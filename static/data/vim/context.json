[{"word":"\u0016","context":[["\u0016",155],[":call C_HlMessage()\u0016",210],["nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand(\"\u0016<cWORD>\"),0)\u0016",119],["nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand(\"\u0016<cWORD>\"),0)\u0016",119],["\"\u0016",74],["xnoremap <buffer> <silent> \\a( \u0016\u001b`>a)\u0016\u001b`\u0016<i(\u0016\u001b",22],["xnoremap <buffer> <silent> \\a] \u0016\u001b`>a]\u0016\u001b`\u0016<i[\u0016\u001b",22],["vnoremap <silent> <Plug>NetrwBrowseXVis :\u0016\u0015call netrw#BrowseXVis()\u0016",25],["setlocal include=\\\\(require\\\\\u0016|include\\\\)\\\\(_once\\\\)\\\\?",29],["\\ '\u0016' : 'V-BLOCK',",34]],"useCount":5790},{"word":"\u0016\u001b","context":[["xnoremap <buffer> <silent> \\a) \u0016\u001b`>a)\u0016\u001b`\u0016<i(\u0016\u001b",22],["vmap ]% \u0016\u001b]%m'gv``",23],["imap <F5> \u0016\u001b:r !date /T\u0016",23],["vmap a% \u0016\u001b[%v]%",23],["vmap [% \u0016\u001b[%m'gv``",23],["xnoremap <buffer> <silent> \\a( \u0016\u001b`>a)\u0016\u001b`\u0016<i(\u0016\u001b",22],["xnoremap <buffer> <silent> \\a{ \u0016\u001b`>a}\u0016\u001b`\u0016<i{\u0016\u001b",22],["xnoremap <buffer> <silent> \\a' \u0016\u001b`>a'\u0016\u001b`\u0016<i'\u0016\u001b",22],["xnoremap <buffer> <silent> \\a{ \u0016\u001b`>a}\u0016\u001b`\u0016<i{\u0016\u001b",22],["xnoremap <buffer> <silent> \\a' \u0016\u001b`>a'\u0016\u001b`\u0016<i'\u0016\u001b",22]],"useCount":2281},{"word":"4e4e4e","context":[["CSAHi airline_b_inactive term=NONE cterm=NONE ctermbg=235 ctermfg=239 gui=NONE guibg=#262626 guifg=#4e4e4e",117],["CSAHi airline_x_inactive term=NONE cterm=NONE ctermbg=236 ctermfg=239 gui=NONE guibg=#303030 guifg=#4e4e4e",117],["CSAHi airline_y_inactive_bold term=bold cterm=bold ctermbg=235 ctermfg=239 gui=bold guibg=#262626 guifg=#4e4e4e",117],["CSAHi airline_z_inactive term=NONE cterm=NONE ctermbg=234 ctermfg=239 gui=NONE guibg=#1c1c1c guifg=#4e4e4e",117],["CSAHi airline_b_inactive_bold term=bold cterm=bold ctermbg=235 ctermfg=239 gui=bold guibg=#262626 guifg=#4e4e4e",117],["CSAHi airline_a_inactive_bold term=bold cterm=bold ctermbg=234 ctermfg=239 gui=bold guibg=#1c1c1c guifg=#4e4e4e",117],["CSAHi airline_y_inactive term=NONE cterm=NONE ctermbg=235 ctermfg=239 gui=NONE guibg=#262626 guifg=#4e4e4e",117],["CSAHi airline_z_inactive_bold term=bold cterm=bold ctermbg=234 ctermfg=239 gui=bold guibg=#1c1c1c guifg=#4e4e4e",117],["CSAHi airline_x_inactive_bold term=bold cterm=bold ctermbg=236 ctermfg=239 gui=bold guibg=#303030 guifg=#4e4e4e",117],["CSAHi airline_a_inactive term=NONE cterm=NONE ctermbg=234 ctermfg=239 gui=NONE guibg=#1c1c1c guifg=#4e4e4e",117]],"useCount":2125},{"word":"9_","context":[["syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\=\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\"",34],["syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\\=\"",34],["syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\=\\%([eE][+-]\\=[0-9_]\\+\\)\\(f32\\|f64\\)\\=\"",34],["syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\\=\"",34],["syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\\=\"",34],["if cmd !~ '^[ A-Za-z0-9_=:-]*$'",41],["if a:str =~ '^[A-Za-z0-9_/.:-]\\+$'",49],["let migrations = rails#app().relglob(\"db/migrate/\",a:A.\"[0-9_]*\",\".rb\")",48],["if a:1 =~ '[^a-z0-9_/.]'",49],["if a:arg =~ '^[A-Za-z0-9_/.-]\\+$'",108]],"useCount":2156},{"word":"A","context":[["function! s:EditComplete(A,L,P) abort",76],["if a:A =~ '^/'",76],["let matches = s:repo().dirglob(a:A)",76],["function! s:DirComplete(A,L,P) abort",79],["\\ (empty(tag) ? 'N/A' : tag), a:spec.tag)",79],["\" A Sublime Text 2 / Textmate theme.",91],["if a:arg =~ '^[A-Za-z0-9_/.-]\\+$'",108],["return s:repo().superglob(a:A)",322],["let matches = split(glob(a:A.'*'),\"\\n\")",75],["return filter(args,'v:val[0 : strlen(a:A)-1] ==# a:A')",75]],"useCount":13298},{"word":"ARISING","context":[["\"             WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",14],["\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",19],["\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",20],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710]],"useCount":2011},{"word":"Add","context":[["\" Add subtype info if present.",75],["\" Add this tag to the tag type variable",66],["\" Add the current cursor position to the jump list, so that user can",64],["\" Add the tag scope, if it is available and is configured. Tag",64],["\"   \" Add plugins to &runtimepath",62],["\" Add a bit extra margin to the left",56],["\" Add POSIX signals as well...",54],["\" Add POSIX errors as well",54],["\" Add mappings, unless the user didn't want this.",45],["call w3m#search_engine#Add(s:engine)",42]],"useCount":2487},{"word":"Args","context":[["\" Args     : filename (IN) -- the name of the file",20],["\" Args     : The path to the file to find the extension in",19],["\" Args     : fileName (IN) - name of the file to check",19],["\" Args     : path -- path of a file (not including the file)",19],["\" Args     : accepts one argument. If present it used the argument as the new",19],["\" Args     : list -- the list (extension spec, file paths) to iterate",19],["\" Optional Args:",25],["\" Args     : filename -- name of the file to search for",36],["\" Args:",1463],["\"Args:",1664]],"useCount":3454},{"word":"Author","context":[["\" Author:  Eric Van Dewoestine",683],["\" Author: itchyny",386],["\" @Author:      Tom Link (micathom AT gmail com?subject=[vim])",214],["\" @Author:      Tom Link (mailto:micathom AT gmail com?subject=[vim])",196],["\" Author: Tomas Restrepo <tomas@winterdom.com>",151],["\" Author   : Michael Sharpe <feline@irendi.com>",147],["\" Author: Peter Odding <peter@peterodding.com>",110],["\" Author:        Kien Nguyen <github.com/kien>",107],["\" Author   : Michael Sharpe (feline@irendi.com)",86],["\" Author: Yasuhiro Matsumoto <mattn.jp@gmail.com>",84]],"useCount":4586},{"word":"Bookmark","context":[["let targetNode = s:Bookmark.GetNodeForName(a:name, 0)",54],["for i in s:Bookmark.Bookmarks()",256],["call s:Bookmark.Write()",159],["let bookmark = s:Bookmark.BookmarkFor(a:name)",97],["call s:Bookmark.Sort()",70],["call s:Bookmark.CacheBookmarks(1)",70],["let @h=@h.\"\\\" Bookmark commands~\\n\"",46],["let @h=@h.\"\\\" Bookmark table mappings~\\n\"",46],["function! s:Bookmark.Sort()",35],["function! s:Bookmark.validate()",35]],"useCount":3414},{"word":"Boolean","context":[["hi Boolean         ctermfg=135",167],["call <sid>hi(\"Boolean\",      s:gui09, \"\", s:cterm09, \"\", \"\")",267],["hi Boolean         guifg=#AE81FF",158],["hi link Boolean         Constant",114],["\" Boolean options",97],["hi def link plugStar    Boolean",90],["hi Boolean         ctermfg=141",71],["\"        Boolean         a boolean constant: TRUE, false",69],["\" Boolean",58],["hi Boolean ctermfg=141 ctermbg=NONE cterm=NONE guifg=#ae81ff guibg=NONE gui=NONE",55]],"useCount":2417},{"word":"BufNewFile","context":[["au BufNewFile,BufRead *.jsp\t\t\tsetf jsp",30],["silent exe 'doau BufNewFile '.s:fnameescape(expand('%:p'))",60],["autocmd BufNewFile,BufReadPost *.md set filetype=markdown",40],["autocmd BufNewFile,BufReadPost * call fugitive#detect(expand('<amatch>:p'))",31],["au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH(\"ksh\")",31],["autocmd BufNewFile,BufReadPost * call s:Detect(expand('<amatch>:p'))",31],["au BufNewFile,BufRead *.reg",30],["au BufNewFile,BufRead *.rst\t\t\tsetf rst",30],["au BufNewFile,BufRead *.man\t\t\tsetf man",30],["autocmd BufNewFile,BufReadPost *",83]],"useCount":16628},{"word":"BufRead","context":[["au BufNewFile,BufRead *.ora\t\t\tsetf ora",30],["au BufNewFile,BufRead *.chs\t\t\tsetf chaskell",30],["au BufNewFile,BufRead *.diff,*.rej,*.patch\tsetf diff",30],["au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH(\"ksh\")",31],["exe 'doautocmd filetypedetect BufRead ' . a:fname",34],["if exists('#BufRead')",46],["doautocmd BufRead",95],["au BufNewFile,BufRead *.java,*.jav\t\tsetf java",30],["au BufNewFile,BufRead smb.conf\t\t\tsetf samba",30],["au BufNewFile,BufRead *fvwm2rc*",30]],"useCount":16558},{"word":"Bundle","context":[["Bundle 'kchmck/vim-coffee-script'",38],["Bundle 'tpope/vim-surround'",56],["Bundle 'gmarik/vundle'",68],["Bundle \"gmarik/vundle\"",66],["Bundle 'tpope/vim-fugitive'",61],["Bundle 'scrooloose/syntastic'",57],["\" Bundle file for furry-vim",56],["Bundle 'scrooloose/nerdtree'",55],["Bundle 'kien/ctrlp.vim'",49],["Bundle 'altercation/vim-colors-solarized'",47]],"useCount":3258},{"word":"C","context":[["set cpo-=C",577],["\\ <C-o>:call <SID>Tlist_Window_Jump_To_Tag('useopen')<CR>",84],["nnoremap <buffer> <silent> q    :<C-U>bdelete<CR>",88],["\\ [['i', '<C-O>', ''], ['n', '', ''], ['v', '', 'gv'], ['o', '', '']]",90],["\" Read the C syntax to start with",110],["let stripped = substitute( a:result, '\\_.*-\\s*'.\"[\\<C-J>]\", '', '' )",117],["\" C Highlighting",211],["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'')",157],["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'g')",154],["\" C highlighting",119]],"useCount":33546},{"word":"CR","context":[["\" <CR>: close popup and save indent.",77],["nnoremap <buffer> <silent> q    :<C-U>bdelete<CR>",88],["return \"\\<CR>\"",106],["execute 'nnoremap <buffer> <silent> dp :diffput '.nr.'<Bar>diffupdate<CR>'",140],["\\ <C-o>:call <SID>Tlist_Window_Jump_To_Tag('useopen')<CR>",84],["nnoremap <buffer> <silent> O     :<C-U>exe <SID>GF(\"tabedit\")<CR>",77],["nnoremap <buffer> <silent> <CR>    :<C-U>exe <SID>GF(\"edit\")<CR>",77],["nnoremap <buffer> <silent> <CR>    :<C-U>exe <SID>GF(\"edit\")<CR>",77],["\" and insert the comment leader when hitting <CR> or using \"o\".",79],["\\ '%snoremap <silent> %s %s:<C-U>call <SID>lod_map(%s, %s, \"%s\")<CR>',",82]],"useCount":24678},{"word":"CSAHi","context":[["CSAHi vimSynRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimCollection term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSynKeyRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSynPatMod term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiGuiFontname term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimPatRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimUserCmd term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuRhs term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiKeyList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimFuncBlank term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":52940},{"word":"C_InsertTemplate","context":[["vnoremap <buffer> <silent> \\im \u0016\u001b:call C_InsertTemplate(\"idioms.main\", \"v\")\u0016",15],["noremap <buffer> <silent> \\pd :call C_InsertTemplate(\"preprocessor.define\")\u0016",15],["nnoremap <buffer> <silent> \\pie :call C_InsertTemplate(\"preprocessor.if-else-endif\")\u0016",15],["inoremap <buffer> <silent> \\+tcn \u0016\u001b:call C_InsertTemplate(\"cpp.template-class-using-new-definition\")\u0016",15],["inoremap <buffer> <silent> \\+tf \u0016\u001b:call C_InsertTemplate(\"cpp.template-function\")\u0016",15],["onoremap <buffer> <silent> \\sif :call C_InsertTemplate(\"statements.if-block\")\u0016",15],["onoremap <buffer> <silent> \\sie :call C_InsertTemplate(\"statements.if-else\")\u0016",15],["endfunction    \" ----------  end of function C_InsertTemplate  ----------",15],["onoremap <buffer> <silent> \\isf :call C_InsertTemplate(\"idioms.function-static\")\u0016",15],["call C_InsertTemplate('comment.end-of-line-comment')",24]],"useCount":3403},{"word":"Character","context":[["\" Character prefix used to number the menu items (hotkey)",64],["hi Character ctermfg=141 ctermbg=NONE cterm=NONE guifg=#ae81ff guibg=NONE gui=NONE",54],["call <sid>hi(\"Character\",    s:gui08, \"\", s:cterm08, \"\", \"\")",269],["\" String and Character constants",176],["hi Character       guifg=#E6DB74",154],["hi Character       ctermfg=144",151],["hi link Character       Constant",108],["hi Character       ctermfg=222",71],["\"        Character       a character constant: 'c', '\\n'",69],["hi Character cterm=NONE gui=NONE",50]],"useCount":2562},{"word":"Check","context":[["\" Check vimproc.",55],["\" Check if the character at lnum:col is inside a string, comment, or is ascii.",58],["\" Check if the character at lnum:col is inside a string.",64],["\" Check if line 'lnum' has more opening brackets than closing ones.",65],["\" Check branch",79],["\" Check tag",79],["\" Check whether this file is removed based on user request",98],["\" Check if a login_script has been specified",174],["\" Check wildcard.",49],["\" Check to ensure the buffer still exists",44]],"useCount":2851},{"word":"Clear","context":[["\" Clear previously selected name",69],["\"Clear current search highlight by double tapping //",67],["\" Clear old folding information from previous file version to prevent leaks",26],["\" Clear search",28],["\" * Clear caches {{{1",30],["\" Clear the displayed informational messages",33],["\" Clear all the highlights",35],["\" For version 5.x: Clear all syntax items.",65],["\" For version 5.x: Clear all syntax items",1596],["\" Clear the previously displayed line",34]],"useCount":2258},{"word":"Comment","context":[["\" Comment/Uncomment the following line to disable/enable transparency",90],["hi def link plugRelDate Comment",90],["hi Comment         guifg=#75715E",127],["hi Comment         ctermfg=59",136],["\" Comment",172],["hi def link plugNotLoaded Comment",89],["\" ARGS... are either (see also |tcomment#Comment()|):",78],["hi def link FugitiveblameNotCommittedYet    Comment",77],["call <sid>hi(\"Comment\",      s:gui03, \"\", s:cterm03, \"\", \"\")",262],["call <SID>X(\"Comment\", s:comment, \"\", \"\")",195]],"useCount":6553},{"word":"Conditional","context":[["call <sid>hi(\"Conditional\",  s:gui0E, \"\", s:cterm0E, \"\", \"\")",268],["call <SID>X(\"Conditional\", s:foreground, \"\", \"\")",177],["hi Conditional     guifg=#F92672               gui=bold",152],["hi Conditional     ctermfg=161               cterm=bold",147],["\"        Conditional     if, then, else, endif, switch, etc.",69],["hi Conditional     ctermfg=197               cterm=bold",69],["hi link htmlTagName     Conditional",66],["hi link xmlTagName      Conditional",63],["hi Conditional ctermfg=197 ctermbg=NONE cterm=NONE guifg=#f92672 guibg=NONE gui=NONE",52],["HiLink pythonConditional\tConditional",57]],"useCount":2473},{"word":"Constant","context":[["call <sid>hi(\"Constant\",     s:gui09, \"\", s:cterm09, \"\", \"\")",255],["hi! link diffRemoved Constant",81],["call <SID>X(\"Constant\", s:orange, \"\", \"\")",191],["hi Constant        ctermfg=135               cterm=bold",154],["hi Constant        guifg=#AE81FF               gui=bold",150],["hi Constant ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE",130],["hi link Boolean         Constant",114],["hi link Character       Constant",108],["hi Constant    guibg=bg    guifg=white        ctermbg=8   ctermfg=15",91],["hi def link plugPlus    Constant",90]],"useCount":5538},{"word":"Cursor","context":[["call <sid>hi(\"Cursor\",        s:gui00, s:gui05, s:cterm00, s:cterm05, \"\")",252],["hi Cursor          ctermfg=16  ctermbg=253",156],["hi Cursor          guifg=#000000 guibg=#F8F8F0",143],["\" Cursor",106],["hi! link lCursor Cursor",101],["hi link CursorIM Cursor",101],["hi Cursor      guibg=#cc4455  guifg=white     ctermbg=4 ctermfg=15",91],["exe \"hi! Cursor\"         .s:fmt_none   .s:fg_base03 .s:bg_base0",67],["hi Cursor ctermfg=235 ctermbg=231 cterm=NONE guifg=#272822 guibg=#f8f8f0 gui=NONE",52],["\" Cursor {{{",49]],"useCount":3040},{"word":"CursorColumn","context":[["hi CursorColumn                  guibg=#293739",144],["CSAHi CursorColumn term=reverse cterm=NONE ctermbg=241 ctermfg=fg gui=NONE guibg=#666666 guifg=fg",72],["call <SID>X(\"CursorColumn\", \"\", s:line, \"none\")",188],["call <sid>hi(\"CursorColumn\",  \"\", s:gui01, \"\", s:cterm01, \"none\")",245],["hi CursorColumn                  guibg=#3E3D32",137],["hi CursorColumn                ctermbg=234",109],["exe \"hi! CursorColumn\"   .s:fmt_none   .s:fg_none   .s:bg_base02",67],["hi CursorColumn ctermfg=NONE ctermbg=237 cterm=NONE guifg=NONE guibg=#3c3d37 gui=NONE",60],["hi CursorColumn                ctermbg=236",55],["hi CursorColumn   guifg=NONE        guibg=#121212     gui=NONE      ctermfg=NONE        ctermbg=NONE        cterm=BOLD",54]],"useCount":2334},{"word":"CursorLine","context":[["call <SID>X(\"CursorLine\", \"\", s:line, \"none\")",180],["CSAHi CursorLine term=underline cterm=NONE ctermbg=241 ctermfg=fg gui=NONE guibg=#666666 guifg=fg",62],["hi CursorLine               ctermbg=236   cterm=none",69],["hi CursorLine               ctermbg=235   cterm=none",74],["hi CursorLine               ctermbg=234   cterm=none",75],["exe \"hi! CursorLine\"     .s:fmt_uopt   .s:fg_none   .s:bg_base02  .s:sp_base1",67],["hi CursorLine                    guibg=#293739",141],["call <sid>hi(\"CursorLine\",    \"\", s:gui01, \"\", s:cterm01, \"none\")",269],["hi CursorLine                  ctermbg=234   cterm=none",86],["hi CursorLine                    guibg=#3E3D32",129]],"useCount":2612},{"word":"D","context":[["call add(msgs, \"Press 'D' to see the updated changes.\")",89],["elseif g:drawit_mode == 'D'",60],["for prefix in ['E', 'S', 'V', 'T', 'D', 'R', 'RE', 'RS', 'RV', 'RT', 'RD']",60],["nnoremap <buffer> <silent> D    :<C-u>exe \"vertical resize \".(<SID>linechars('.\\{-\\}\\ze\\d\\ze\\s\\+\\d\\+)')+1-v:count)<CR>",53],["nnoremap <silent> <D-P> :ClearCtrlPCache<cr>",50],["vmap <D-k> <M-k>",48],["if s:buffer().commit() =~# '\\D\\|..'",75],["\"make Y consistent with C and D",74],["nnoremap <silent> <buffer> D  :PlugDiff<cr>",90],["call s:process(a:bang, 'D')",84]],"useCount":3864},{"word":"DB_get","context":[["if s:DB_get('type') =~ '\\<DBI\\>\\|\\<ODBC\\>'",90],["\\ \" order by \".(s:DB_get('dict_show_owner')==1?\"convert(varchar,u.name), \":'').\"o.name\"",66],["let driver       = s:DB_get('driver')",55],["let l:prev_use_result_buffer = s:DB_get('use_result_buffer')",46],["if s:DB_get('dict_show_owner') == 1",44],["if has_owner == 1 &&  s:DB_get('dict_show_owner') == 1",44],["if s:DB_get(\"buffer_defaulted\") == 1",35],["\\ \"select \".(s:DB_get('dict_show_owner')==1?\"convert(varchar,u.name)||'.'||\":'').\"convert(varchar,o.name)  \".",33],["if s:DB_get(\"buffer_defaulted\") != 1",104],["let output = output.s:DB_getLoginScript(s:DB_get(\"login_script\"))",163]],"useCount":3164},{"word":"Decho","context":[["\"  else \" Decho",88],["\"      call Decho(\"filter input: \".getline('$'))",210],["\"     call Decho(\"filter input: \".getline('$'))",168],["\"     call Decho(\"filter input: \".getline('.'))",126],["\"  call Decho(\"saving posn to svpos<\".string(svpos).\">\",'~'.expand(\"<slnum>\"))",78],["\"    call Decho(\"filter input: \".getline('.'))",75],["\"  call Decho(\"sanity chk passed: s:netrwmarkfilelist_\".curbufnr.\"<\".string(s:netrwmarkfilelist_{curbufnr}))",68],["\"  call Decho(\"fname<\".fname.\">\")",52],["\"      call Decho(\"returned=\".ret.\" errcode=\".v:shell_error)",49],["\"      call Decho(\"filter input: \".getline('.'))",45]],"useCount":10203},{"word":"Define","context":[["call <sid>hi(\"Define\",       s:gui0E, \"\", s:cterm0E, \"\", \"none\")",268],["\" Define some defaults in case the included ftplugins don't set them.",86],["hi link Define    Include",91],["\" Define keyword.",104],["hi link Define          PreProc",104],["\" Define the default highlighting",114],["hi Define          guifg=#66D9EF",159],["hi Define          ctermfg=81",172],["call <SID>X(\"Define\", s:purple, \"\", \"none\")",178],["\" Define the default highlighting.",2028]],"useCount":5436},{"word":"DefineType","context":[["call tcomment#DefineType('pascal',           '(* %s *)'         )",18],["call tcomment#DefineType('php_block',        g:tcommentBlockC   )",18],["call tcomment#DefineType('pascal_block',     \"(*%s*)\\n   \"      )",18],["call tcomment#DefineType('css_block',        g:tcommentBlockC   )",18],["call tcomment#DefineType('m4',               'dnl %s'           )",18],["call tcomment#DefineType('viki',             '%% %s'            )",18],["call tcomment#DefineType('ruby_nodoc_block', \"=begin%s=end\"     )",18],["call tcomment#DefineType('scheme',           '; %s'             )",18],["call tcomment#DefineType('yaml',             '# %s'             )",18],["call tcomment#DefineType('c_block',          g:tcommentBlockC   )",18]],"useCount":2529},{"word":"Delimiter","context":[["hi Delimiter cterm=NONE gui=NONE",50],["call <sid>hi(\"Delimiter\",    s:gui0F, \"\", s:cterm0F, \"\", \"\")",268],["hi Delimiter       ctermfg=241",172],["hi Delimiter       guifg=#8F8F8F",164],["hi Delimiter      guibg=bg   guifg=fg       ctermbg=1   ctermfg=fg",91],["hi def link FugitiveblameDelimiter          Delimiter",77],["\"        Delimiter       character that needs attention",68],["hi! link hsImportParams      Delimiter",67],["hi! link hsDelimTypeExport   Delimiter",67],["hi Delimiter       guifg=#8f8f8f",53]],"useCount":3385},{"word":"Description","context":[["\"| Option                  | Description                                      |",40],["\"Description: Syntax checking plugin for syntastic.vim",1331],["\" Description:",955],["\" Description: {{{",610],["\"Description: Vim plugin for on the fly syntax checking.",67],["\"  Description:",50],["\" Description: An ack/ag powered code search and view tool.",49],["\" Description: List the current file's tags in a sidebar, ordered by class etc",47],["\"Description: Syntax checking plugin for syntastic",40],["\" Description:\"{{{",40]],"useCount":4345},{"word":"DiffAdd","context":[["hi DiffAdd                     ctermbg=24",161],["hi DiffAdd                       guibg=#13354A",148],["\"hi DiffAdd",101],["hi DiffAdd     guibg=#446688  guifg=fg    gui=none ctermbg=1 ctermfg=fg",91],["call <sid>hi(\"DiffAdd\",      s:gui0B, s:gui01,  s:cterm0B, s:cterm01, \"\")",85],["exe \"hi! DiffAdd\"        .s:fmt_revr   .s:fg_green  .s:bg_none",65],["hi DiffAdd\tctermbg=4",59],["hi DiffAdd ctermfg=231 ctermbg=64 cterm=bold guifg=#f8f8f2 guibg=#46830c gui=bold",53],["CSAHi DiffAdd term=bold cterm=NONE ctermbg=19 ctermfg=fg gui=NONE guibg=#00008b guifg=fg",52],["call <sid>hi(\"DiffAdd\",      s:gui0B, s:gui00, s:cterm0B, s:cterm00, \"\")",179]],"useCount":2289},{"word":"DiffChange","context":[["call <sid>hi(\"DiffChange\",   s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\")",179],["hi DiffChange\tctermbg=5",65],["exe \"hi! DiffChange\"     .s:fmt_revr   .s:fg_yellow .s:bg_none",65],["hi DiffChange  guibg=#558855  guifg=fg    gui=none ctermbg=2 ctermfg=fg",91],["call <sid>hi(\"DiffChange\",   s:gui03, s:gui01,  s:cterm03, s:cterm01, \"\")",94],["\"hi DiffChange",109],["hi DiffChange      guifg=#89807D guibg=#4C4745",146],["hi DiffChange      ctermfg=181 ctermbg=239",160],["CSAHi DiffChange term=bold cterm=NONE ctermbg=127 ctermfg=fg gui=NONE guibg=#8b008b guifg=fg",60],["hi DiffChange      guibg=#333333",52]],"useCount":2380},{"word":"DiffDelete","context":[["hi DiffDelete      guifg=#960050 guibg=#1E0010",157],["CSAHi DiffDelete term=bold cterm=bold ctermbg=37 ctermfg=21 gui=bold guibg=#008b8b guifg=#0000ff",56],["exe \"hi! DiffDelete\"     .s:fmt_revr   .s:fg_red    .s:bg_none",65],["hi DiffDelete\tcterm=bold ctermfg=4 ctermbg=6",65],["hi DiffDelete      ctermfg=125 ctermbg=233",69],["call <sid>hi(\"DiffDelete\",   s:gui08, s:gui01,  s:cterm08, s:cterm01, \"\")",88],["hi DiffDelete  guibg=#884444  guifg=fg    gui=none ctermbg=4 ctermfg=fg",91],["\"hi DiffDelete",108],["hi DiffDelete      ctermfg=162 ctermbg=53",161],["call <sid>hi(\"DiffDelete\",   s:gui08, s:gui00, s:cterm08, s:cterm00, \"\")",179]],"useCount":2464},{"word":"DiffText","context":[["call <sid>hi(\"DiffText\",     s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\")",179],["exe \"hi! DiffText\"       .s:fmt_revr   .s:fg_blue   .s:bg_none",65],["hi DiffText ctermfg=231 ctermbg=24 cterm=bold guifg=#f8f8f2 guibg=#204a87 gui=bold",75],["call <sid>hi(\"DiffText\",     s:gui0D, s:gui01,  s:cterm0D, s:cterm01, \"\")",87],["hi DiffText    guibg=#884444  guifg=fg     ctermbg=4 ctermfg=fg",91],["\"hi DiffText",104],["CSAHi DiffText term=reverse cterm=bold ctermbg=196 ctermfg=fg gui=bold guibg=#ff0000 guifg=fg",120],["hi DiffText                      guibg=#4C4745 gui=italic,bold",137],["hi DiffText                    ctermbg=102 cterm=bold",144],["hi DiffText\tcterm=bold ctermbg=1",59]],"useCount":2497},{"word":"Directory","context":[["call <SID>X(\"Directory\", s:blue, \"\", \"\")",192],["call <sid>hi(\"Directory\",     s:gui0D, \"\", s:cterm0D, \"\", \"\")",267],["hi Directory       ctermfg=118               cterm=bold",165],["hi Directory       guifg=#A6E22E               gui=bold",158],["\"hi Directory",95],["hi Directory   guibg=bg       guifg=#337700  gui=none ctermbg=bg ctermfg=10",90],["CSAHi Directory term=bold cterm=NONE ctermbg=bg ctermfg=51 gui=NONE guibg=bg guifg=#00ffff",81],["hi Directory       ctermfg=154               cterm=bold",69],["exe \"hi! Directory\"      .s:fmt_none   .s:fg_blue   .s:bg_none",67],["hi Directory\tctermfg=darkcyan",57]],"useCount":3046},{"word":"Do","context":[["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\" Do the business:",84],["\" Do not process comment lines and empty lines",69],["\" ****************** Do not modify after this line ************************",51],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" Do :help cope if you are unsure what cope is. It's super useful!",49],["\"| `frozen`                | Do not update unless explicitly specified        |",40],["\" Do nothing",38],["\" Do this only if taglist is configured to display tags for more than",33]],"useCount":3246},{"word":"Dret","context":[["\"      call Dret(\"netrw#Explore\")",40],["\"   call Dret(\"s:NetrwMarkFileCopy 0\")",44],["\"  call Dret(\"s:NetrwMarkHideSfx\")",30],["\"  call Dret(\"NetUserPass\")",27],["\"  call Dret(\"s:GetTempfile <\".tmpfile.\">\")",20],["\"   call Dret(\"zip#Write\")",25],["\"        call Dret(\"netrw#NetRead :2 getcwd<\".getcwd().\">\")",20],["\"  call Dret(\"s:SaveWinVars\")",24],["\"  call Dret(\"s:RestoreWinVars\")",24],["\"   call Dret(\"NetReadFixup\")",23]],"useCount":3233},{"word":"E","context":[["for prefix in ['E', 'S', 'V', 'T', 'D', 'R', 'RE', 'RS', 'RV', 'RT', 'RD']",60],["execute 'normal! '.delta.\"\\<C-E>\"",66],["catch /^Vim\\%((\\a\\+)\\)\\=:E/",75],["let e['type'] = 'E'",75],["if ( $level eq \"E\" ) {",80],["\" Maintainer:\tCharles E. Campbell <NdrOchipS@PcampbellAfamily.Mbiz>",46],["\" Maintainer:\tDr. Charles E. Campbell, Jr. <NdrOchipS@PcampbellAfamily.Mbiz>",45],["\\%E%f:%l:\\ %m,",41],["if cmd == '' || cmd == 'E' || cmd == 'F'",49],["let type = 'E'",58]],"useCount":2598},{"word":"END","context":[["\"=============  END NON-INDENTING BLOCK  =============",30],["\"augroup END",49],["\" augroup END",42],["python << END",50],["silent! redir END",54],["augroup END\"}}}",59],["END",60],["aug END",280],["redir END",1829],["augroup END",6987]],"useCount":9934},{"word":"EOF","context":[["'<,'>python << EOF",34],["python << EOF",686],["perl <<EOF",41],["python3 << EOF",46],["syn keyword cConstant _IOFBF _IOLBF _IONBF BUFSIZ EOF WEOF",52],["execute py_exe \"<< EOF\"",69],["python <<EOF",128],["lua << EOF",199],["ruby << EOF",219],["EOF",1597]],"useCount":3345},{"word":"Edit","context":[["\" Edit/Global Settings",84],["nnoremap <buffer> <silent> cc    :<C-U>exe <SID>Edit('edit',0,<SID>buffer().containing_commit())<CR>",68],["nnoremap <buffer> <silent> co    :<C-U>exe <SID>Edit('split',0,<SID>buffer().containing_commit())<CR>",68],["nnoremap <buffer> <silent> cO    :<C-U>exe <SID>Edit('tabedit',0,<SID>buffer().containing_commit())<CR>",68],["return s:Edit(a:mode,0,file)",300],["return s:Edit(a:mode,0,ref)",250],["\" Edit menu",145],["\" Edit/File Settings",101],["\" Edit your .vimrc",90],["nnoremap <buffer> <silent> C     :<C-U>exe <SID>Edit('edit',0,<SID>buffer().containing_commit())<CR>",68]],"useCount":3960},{"word":"Error","context":[["echohl Error",336],["hi Error           ctermfg=219 ctermbg=89",164],["\" Error",134],["hi Error           guifg=#960050 guibg=#1E0010",109],["hi Error    guibg=#ff0000  guifg=white        ctermbg=12  ctermfg=15",91],["hi def link plugError   Error",90],["rescue Timeout::Error, Interrupt => e",90],["\"hi Error",84],["CSAHi Error term=reverse cterm=NONE ctermbg=196 ctermfg=231 gui=NONE guibg=#ff0000 guifg=#ffffff",86],["if e.is_a?(Timeout::Error) && tried < tries",89]],"useCount":7875},{"word":"ErrorMsg","context":[["echohl ErrorMsg",1074],["call <sid>hi(\"ErrorMsg\",      s:gui08, s:gui00, s:cterm08, s:cterm00, \"\")",274],["hi ErrorMsg\tcterm=bold ctermfg=7 ctermbg=1",61],["exe \"hi! ErrorMsg\"       .s:fmt_revr   .s:fg_red    .s:bg_none",67],["\"hi ErrorMsg",80],["CSAHi ErrorMsg term=NONE cterm=NONE ctermbg=196 ctermfg=231 gui=NONE guibg=#ff0000 guifg=#ffffff",80],["hi ErrorMsg    guibg=bg guifg=#ff0000   ctermbg=bg ctermfg=12",91],["hi link  WarningMsg  ErrorMsg",91],["hi ErrorMsg        guifg=#F92672 guibg=#232526 gui=bold",156],["hi ErrorMsg        ctermfg=199 ctermbg=16    cterm=bold",162]],"useCount":5036},{"word":"Esc","context":[["imap <silent> <C-J> <%  %><Esc>2hi",46],["execute 'normal' \"viv\\<Esc>\"",67],["let g:multi_cursor_quit_key='<Esc>'",32],["inoremap jj <Esc>",33],["inoremap jk <Esc>",34],["let &t_EI = \"\\<Esc>]50;CursorShape=0\\x7\"",35],["let &t_SI = \"\\<Esc>]50;CursorShape=1\\x7\"",36],["tnoremap <Esc> <C-\\><C-n>",39],["imap <silent> <C-K> <%=   %><Esc>3hi",45],["let delim = s:Esc(delim)",46]],"useCount":2350},{"word":"Exception","context":[["hi Exception       ctermfg=154               cterm=bold",68],["\"        Exception       try, catch, throw",69],["hi def link plugX       Exception",90],["class PlugError(Exception):",59],["except Exception, e:",98],["hi link Exception       Statement",115],["hi Exception       guifg=#A6E22E               gui=bold",159],["hi Exception       ctermfg=118               cterm=bold",165],["rescue Exception",204],["call <sid>hi(\"Exception\",     s:gui08, \"\", s:cterm08, \"\", \"\")",269]],"useCount":2613},{"word":"F","context":[["delfunction F",70],["setlocal indentkeys=0{,0},:,0#,!^F,o,O,e",706],["set statusline=\\ %{HasPaste()}%F%m%r%h\\ %w\\ \\ CWD:\\ %r%{getcwd()}%h\\ \\ \\ Line:\\ %l",43],["call s:initVariable(\"g:NERDTreeMapToggleFiles\", \"F\")",45],["if cmd == '' || cmd == 'E' || cmd == 'F'",49],["function! F()",57],["\\ 'stl_format':               '[Syntax: line:%F (%t)]',",60],["call F()",67],["let args = '-F '.s:shellesc(msgfile).' '.args",75],["setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e",848]],"useCount":3885},{"word":"FROM","context":[["\\ \"  FROM INFORMATION_SCHEMA.ROUTINES \" .",22],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\"[[STOLEN FROM VTREEEXPLORER.VIM]]",41],["\"   \"SELECT * FROM \" + obj.method() +\"product\"",25],["\"   \"SELECT * FROM \" + prefix+\"product\"",25],["\"   \"SELECT * FROM \" . method() .\"product\"",24],["\\ \"  FROM INFORMATION_SCHEMA.VIEWS \" .",22],["syn match   railslogSQL         '\\%(^ \\%(\\e\\[[0-9;]*m\\)\\=\\)\\@<=\\%(FROM\\|WHERE\\|ON\\|AND\\|OR\\|ORDER\\) .*$'",22]],"useCount":2424},{"word":"FUNCTION","context":[["\"===  FUNCTION  ================================================================",515],["\" FUNCTION: s:jumpToChild(direction) {{{2",35],["\" FUNCTION: s:refreshRoot() {{{2",32],["\" FUNCTION: s:jumpToLastChild() {{{2",32],["\" FUNCTION: s:toggleShowFiles() {{{2",32],["\" FUNCTION: s:handleMiddleMouse() {{{2",32],["\" FUNCTION: s:jumpToRoot() {{{2",32],["\" FUNCTION: s:toggleShowHidden() {{{2",32],["\" FUNCTION: s:displayHelp() {{{2",32],["#===  FUNCTION  ================================================================",34]],"useCount":7435},{"word":"File","context":[["\" For use with syntax/haskell.vim : Haskell Syntax File",73],["fetch_opt = (tag && File.exist?(File.join(dir, '.git/shallow'))) ? '--depth 99999999' : ''",71],["\"File:        syntastic.vim",81],["exists = File.directory? dir",89],["File.unlink tmp rescue nil",90],["data = File.read(tmp).chomp",90],["echom \"File is not encrypted, all GPG functions disabled!\"",93],["\" Edit/File Settings",101],["\" File menu",150],["fetch_opt = (tag && File.exist?(File.join(dir, '.git/shallow'))) ? '--depth 99999999' : ''",71]],"useCount":4542},{"word":"FileType","context":[["autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS",137],["autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags",136],["autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS",135],["autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags",134],["autocmd FileType python setlocal omnifunc=pythoncomplete#Complete",127],["execute printf('autocmd FileType %s call <SID>lod_ft(%s, %s)',",90],["doautocmd filetypeindent FileType",66],["execute 'autocmd! PlugLOD FileType' a:pat",89],["set eventignore=FileType",63],["doautocmd filetypeplugin FileType",66]],"useCount":3350},{"word":"Float","context":[["\"        Float           a floating point constant: 2.3e10",69],["hi Float ctermfg=141 ctermbg=NONE cterm=NONE guifg=#ae81ff guibg=NONE gui=NONE",54],["hi Float term=NONE cterm=NONE",50],["call <sid>hi(\"Float\",        s:gui09, \"\", s:cterm09, \"\", \"\")",269],["hi Float           ctermfg=135",171],["hi Float           guifg=#AE81FF",158],["hi link Float           Number",119],["\" Float",104],["hi def link FugitiveblameOriginalLineNumber Float",77],["hi Float           ctermfg=141",71]],"useCount":2409},{"word":"FoldColumn","context":[["CSAHi FoldColumn term=NONE cterm=NONE ctermbg=244 ctermfg=51 gui=NONE guibg=#808080 guifg=#00ffff",39],["call <sid>hi(\"FoldColumn\",    \"\", s:gui01, \"\", s:cterm01, \"\")",272],["call <SID>X(\"FoldColumn\", \"\", s:background, \"\")",169],["hi FoldColumn      ctermfg=67  ctermbg=16",156],["hi FoldColumn      guifg=#465457 guibg=#000000",146],["hi FoldColumn      guifg=#93b3a3 guibg=#3f4040",55],["exe \"hi! FoldColumn\"     .s:fmt_none   .s:fg_base0  .s:bg_base02",49],["hi FoldColumn\tctermfg=darkgrey ctermbg=NONE",45],["hi FoldColumn\tguibg=grey30 guifg=tan",39],["\"hi FoldColumn -- no settings --",39]],"useCount":2132},{"word":"Folded","context":[["hi Folded\t\tcterm=none",40],["call <sid>hi(\"Folded\",        s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",274],["call <SID>X(\"Folded\", s:comment, s:background, \"\")",166],["hi Folded          ctermfg=67  ctermbg=16",154],["hi Folded          guifg=#465457 guibg=#000000",149],["exe \"hi! Folded\"         .s:fmt_undb   .s:fg_base0  .s:bg_base02  .s:sp_base03",65],["hi Folded          guifg=#93b3a3 guibg=#3f4040",55],["hi Folded ctermfg=242 ctermbg=235 cterm=NONE guifg=#75715e guibg=#272822 gui=NONE",47],["hi Folded\tctermfg=darkgrey ctermbg=NONE",45],["CSAHi Folded term=NONE cterm=NONE ctermbg=248 ctermfg=51 gui=NONE guibg=#a9a9a9 guifg=#00ffff",42]],"useCount":2395},{"word":"For","context":[["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["\" For version 5.x: Clear all syntax items",1596],["\" For some reason this doesn't work as a regular set command,",62],["\" For regular expressions turn magic on",64],["\" For version 5.x: Clear all syntax items.",65],["\" For no inserting <CR> key.",65],["\" For each row returned",66],["\" For use with syntax/haskell.vim : Haskell Syntax File",73],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["\" For version 5.7 and earlier: only when not done already",1587]],"useCount":9898},{"word":"Function","context":[["call <SID>X(\"Function\", s:blue, \"\", \"\")",177],["call <sid>hi(\"Function\",     s:gui0D, \"\", s:cterm0D, \"\", \"\")",254],["hi Function        ctermfg=118",163],["hi Function        guifg=#A6E22E",151],["hi def link plugInstall Function",90],["syn keyword Function PlugInstall PlugStatus PlugUpdate PlugClean",90],["hi def link plugMessage Function",89],["hi! link vimUserFunc Function",81],["hi! link vimFunc Function",81],["hi Function        ctermfg=154",70]],"useCount":8124},{"word":"G","context":[["\" returns the palette index to approximate the given R/G/B color levels",120],["\\ '%-G%.%#'",424],["normal! G",229],["\" Returns the palette index for the given R/G/B colour indices",211],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\\%-G%.%#",129],["\" returns the palette index for the given R/G/B color indices",120],["normal! G$",90],["normal G",70],["nnoremap <buffer> <silent> y<C-G> :call setreg(v:register, <SID>recall())<CR>",60]],"useCount":3925},{"word":"GUI","context":[["\" The GUI toolbar",100],["\" GUI options",99],["\" Return GUI color for light/dark variants",292],["\" Default GUI Colours",185],["\" GUI",43],["\" GUI & CSApprox hexadecimal palettes\"{{{",71],["\" light and dark modes that runs in both GUI, 256 and 16 color modes.",70],["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" Set extra options when running in GUI mode",54],["\" GUI color definitions",298]],"useCount":1971},{"word":"Get","context":[["\" Get the current line.",69],["\" Get the closest colour",211],["\" Get the file index",66],["\" Get tag list index of the specified file",65],["\" Get the tag search pattern and display it",63],["\" Get the tag output line for the current tag",63],["let errors = go#list#Get(l:listtype)",62],["\" Get the current highlight group. Useful for then remapping the color",59],["\" Get cursor word.",53],["\" Get the closest grey",211]],"useCount":3281},{"word":"HEAD","context":[["elseif s:buffer().path() =~# '^\\.git/refs/\\|^\\.git/.*HEAD$'",75],["let commit = s:sub(self.commit(),'^\\d=$','HEAD')",76],["return 'HEAD'",77],["let rev = 'HEAD'",79],["let tag = s:system_chomp('git describe --exact-match --tags HEAD 2>&1', a:spec.dir)",88],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["let dref = s:sub(dref,'^a/','HEAD:')",75],["let heads = [\"HEAD\",\"ORIG_HEAD\",\"FETCH_HEAD\",\"MERGE_HEAD\"]",76],["let file = 'HEAD'.a:rev.self.path(':')",76],["let file = 'HEAD^{}'.a:rev[1:-1].self.path(':')",76]],"useCount":2765},{"word":"HL","context":[["call s:HL('vCursor', 'none', 'none', 'inverse')",35],["call s:HL('Cursor', 'none', 'none', 'inverse')",32],["call s:HL('Tag', '', '', 'bold')",31],["call s:HL('CtrlPLinePre', 'deepgravel', 'bg', 'none')",30],["call s:HL('hlLevel0', 'gravel')",30],["call s:HL('iCursor', 'none', 'none', 'inverse')",35],["call s:HL('lCursor', 'none', 'none', 'inverse')",35],["call s:HL('texMathZoneX', 'orange', '', 'none')",36],["call s:HL('Cursor', s:none, s:none, s:inverse)",40],["function! s:HL(group, fg, ...)",83]],"useCount":11010},{"word":"HTML","context":[["\" -> HTML-specific",45],["\" HTML",145],["\" HTML Highlighting",212],["\" HTML {{{",48],["\" Define the htmlJavaScript for HTML syntax html.vim",52],["\" Read the HTML syntax to start with",63],["\"       *Underlined      text that stands out, HTML links",68],["endif \"DOM/HTML/CSS",45],["\" HTML highlighting",312],["\" Special for HTML",76]],"useCount":2596},{"word":"HiLink","context":[["command -nargs=+ HiLink hi link <args>",2249],["delcommand HiLink",2378],["command -nargs=+ HiLink hi def link <args>",2291],["\" don't use standard HiLink, it will not work with included syntax files",78],["HiLink pythonComment\t\tComment",57],["HiLink pythonRawString\tString",57],["HiLink pythonConditional\tConditional",57],["HiLink pythonOperator\t\tOperator",57],["HiLink pythonException\tException",57],["command! -nargs=+ HiLink hi def link <args>",57]],"useCount":20367},{"word":"Highlighting","context":[["\" PHP Highlighting",222],["\" Diff Highlighting",159],["\" Python Highlighting",210],["\" C Highlighting",211],["\" HTML Highlighting",212],["\" JavaScript Highlighting",226],["\" Ruby Highlighting",236],["\" Highlighting function",319],["\" Standard Highlighting",189],["\" Vim Highlighting",390]],"useCount":4830},{"word":"I","context":[["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" the following if-then. However, I find vim's background autodetection to be",70],["\" with ma.  It’s more useful in any case I can imagine, but it’s located way",66],["\" way is Ctrl-w,v and Ctrl-w,s. I remap",65],["\" (the numbers don't show up) so I made it a VimEnter event",62],["syn match\tcUserLabel\tdisplay \"\\I\\i*\" contained",55],["syn match\tcUserCont\tdisplay \"^\\s*\\I\\i*\\s*:$\" contains=@cLabelGroup",50],["\" pretty good and, at least with MacVim, I can leave this background value",70],["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" Due to possibility that CSApprox is running (though I suppose we could just",73]],"useCount":4164},{"word":"IN","context":[["\"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!",24],["\" FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",23],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\" Args     : filename (IN) -- the name of the file",20],["\" NOTE THIS IS IN THE COOL SECTION",109],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["if getline(1).getline(2).getline(3).getline(4) =~ '^; <<>> DiG [0-9.]\\+ <<>>\\|BIND.*named\\|$ORIGIN\\|$TTL\\|IN\\s\\+SOA'",28],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\" NOTE THIS IS IN THE WARM SECTION",103]],"useCount":2492},{"word":"Identifier","context":[["call <SID>X(\"Identifier\", s:red, \"\", \"none\")",171],["call <sid>hi(\"Identifier\",   s:gui08, \"\", s:cterm08, \"\", \"none\")",254],["hi Identifier      guifg=#FD971F",158],["hi! link vimVar Identifier",83],["\" Identifier",84],["hi Identifier      ctermfg=208               cterm=none",89],["hi def link plugSha     Identifier",90],["hi Identifier      ctermfg=208",134],["hi def link FugitiveblameHash               Identifier",77],["hi link rubyGlobalVariable    Identifier",70]],"useCount":6215},{"word":"If","context":[["\" If it is, then don't display the tags for this file",98],["\" If the line is inside a fold, open the fold",99],["\" If there are no tags for this file, then no need to proceed further",101],["\" If the buffer is visible, switch to it",117],["\" If the previous line ended with a block opening, add a level of indent.",64],["\" If we got a closing bracket on an empty line, find its match and indent",64],["\" If the window is open, jump to it",68],["\" If strings are concatenated over multiple lines, since they are",70],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156],["\" If the file doesn't support tag listing, skip it",164]],"useCount":12285},{"word":"Ignore","context":[["\"hi Ignore -- no settings --",95],["\"call <SID>X(\"Ignore\", \"666666\", \"\", \"\")",188],["hi Ignore          guifg=#808080 guibg=bg",166],["hi Ignore   guibg=bg       guifg=#cccccc    ctermbg=bg  ctermfg=8",91],["\"       *Ignore          left blank, hidden  |hl-Ignore|",68],["\" Ignore.",178],["hi Ignore          ctermfg=244 ctermbg=232",171],["\" Ignore the remainder of the line",66],["exe \"hi! Ignore\"         .s:fmt_none   .s:fg_none   .s:bg_none",67],["\"       *Ignore          left blank, hidden  |hl-Ignore|",68]],"useCount":3564},{"word":"IncSearch","context":[["call <sid>hi(\"IncSearch\",     s:gui01, s:gui09, s:cterm01, s:cterm09, \"none\")",249],["hi IncSearch term=reverse cterm=reverse gui=reverse",53],["\"hi IncSearch -- no settings --",60],["\"hi IncSearch",61],["exe \"hi! IncSearch\"      .s:fmt_stnd   .s:fg_orange .s:bg_none",64],["hi IncSearch   guibg=#0066cc  guifg=white    gui=none ctermbg=1 ctermfg=15",93],["hi link Seach IncSearch",95],["CSAHi IncSearch term=reverse cterm=reverse ctermbg=bg ctermfg=fg gui=reverse guibg=bg guifg=fg",116],["hi IncSearch       guifg=#C4BE89 guibg=#000000",151],["hi IncSearch       ctermfg=193 ctermbg=16",172]],"useCount":2122},{"word":"Include","context":[["hi link Macro     Include",91],["call <sid>hi(\"Include\",      s:gui0D, \"\", s:cterm0D, \"\", \"\")",269],["call <SID>X(\"Include\", s:blue, \"\", \"\")",181],["hi link Include         PreProc",105],["hi link PreCondit Include",100],["hi link Define    Include",91],["hi Include term=NONE cterm=NONE",50],["\"   colouring for Include, use",52],["hi def link cInclude\t\tInclude",54],["\"        Include         preprocessor #include",69]],"useCount":2364},{"word":"Keyword","context":[["hi Keyword         ctermfg=197               cterm=bold",68],["hi Keyword         guifg=#F92672               gui=bold",147],["hi Keyword         ctermfg=161               cterm=bold",83],["call <sid>hi(\"Keyword\",      s:gui0E, \"\", s:cterm0E, \"\", \"\")",266],["\"hi! link rubyClass             Keyword",67],["\"        Keyword         any other keyword",69],["hi def link FugitiveblameBoundary           Keyword",77],["hi link rubyModule            Keyword",79],["hi link rubyClass             Keyword",79],["hi link rubyKeyword           Keyword",78]],"useCount":3293},{"word":"L","context":[["execute 'write !'.substitute(basecmd,' blame ',' blame -L '.a:line1.','.a:line2.' ','g')",75],["set guioptions-=L",100],["xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>",89],["echo \"Press 'L' on each line to load plugin, or 'U' to update\"",89],["nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>",89],["function! s:DirComplete(A,L,P) abort",79],["function! s:EditComplete(A,L,P) abort",76],["silent! unmap <buffer> L",73],["\" L\\*a\\*b values are canonical (White D65, Reference D50), other values are",73],["function! s:CommitComplete(A,L,P) abort",75]],"useCount":5764},{"word":"Label","context":[["hi Label cterm=NONE gui=NONE",50],["hi Label term=NONE cterm=NONE",50],["hi Label ctermfg=186 ctermbg=NONE cterm=NONE guifg=#e6db74 guibg=NONE gui=NONE",60],["call <sid>hi(\"Label\",        s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["hi Label           guifg=#E6DB74               gui=none",156],["\"        Label           case, default, etc.",69],["hi link Label           Statement",113],["hi def link plugName    Label",90],["hi Label       guibg=bg    guifg=#ffccff      ctermbg=bg   ctermfg=13",91],["hi Label           ctermfg=229               cterm=none",171]],"useCount":2234},{"word":"Language","context":[["\" Language:\tC",66],["\" Language:     Markdown",46],["\" Language:     JavaScript",53],["\" Language:     Colorful CSS Color Preview",55],["\" Language:\tC++",43],["\" Language:\t\teRuby",51],["\" Language:    CoffeeScript",106],["\" Language:\tPython",59],["\" Language:\t\tRuby",100],["\" Language:     Rust",72]],"useCount":2820},{"word":"LineNr","context":[["call <sid>hi(\"LineNr\",        s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",245],["hi LineNr          guifg=#BCBCBC guibg=#3B3A32",123],["\"hi LineNr",53],["hi LineNr          guifg=#BCBCBC guibg=#232526",51],["hi LineNr          ctermfg=239 ctermbg=235",70],["CSAHi LineNr term=underline cterm=NONE ctermbg=bg ctermfg=226 gui=NONE guibg=bg guifg=#ffff00",60],["exe \"hi! LineNr\"         .s:fmt_none   .s:fg_base01 .s:bg_base02",65],["hi LineNr          ctermfg=250 ctermbg=234",86],["hi LineNr          guifg=#465457 guibg=#232526",85],["call <SID>X(\"LineNr\", s:selection, \"\", \"\")",119]],"useCount":2356},{"word":"List","context":[["\" List of valid directories",90],["\" TLogDBG string(tlib#win#List())",76],["\" See |tlib#input#List()|.",75],["\" List",60],["\"\t? List of any external variable, control, or other element whose state affects this procedure.",52],["\"\t? List of the procedure's effect on each external variable, control, or other element.",51],["let cplt = \" -complete=customlist,\".s:sid.l.\"List\"",48],["\" Description: List the current file's tags in a sidebar, ordered by class etc",47],["\" Returns List of character sequence between [a:from, a:to]",45],["\" similar to Haskell's Data.List.break",44]],"useCount":2548},{"word":"M","context":[["nmap <M-k> mz:m-2<cr>`z",52],["nmap <M-j> mz:m+<cr>`z",52],["\" Remove the Windows ^M - when the encodings gets messed up",54],["execute \"normal /\" . l:pattern . \"^M\"",59],["set guitablabel=%M\\ %t",59],["execute \"normal ?\" . l:pattern . \"^M\"",59],["autocmd VimEnter * set guitablabel=%N:\\ %t\\ %M",65],["vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z",52],["vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z",51],["if search('^diff .* b/\\M'.escape(path,'\\').'$','W')",66]],"useCount":2532},{"word":"Maintainer","context":[["\" Maintainer:\tIngo Karkat <ingo@karkat.de>",266],["\" Maintainer:       Nikolai Weibull <now@bitwi.se>",390],["\"Maintainer:  Martin Grenfell <martin.grenfell at gmail dot com>",344],["\" Maintainer:  othree <othree@gmail.com>",128],["\"Maintainer:  Gregor Uhlenheuer <kongo2002 at gmail dot com>",106],["\" Maintainer: David Nečas (Yeti) <yeti@physics.muni.cz>",130],["\" Maintainer:\tTim Pope <vimNOSPAM@tpope.org>",189],["\" Maintainer:\tBram Moolenaar <Bram@vim.org>",376],["\"Maintainer:  LCD 47 <lcd047 at gmail dot com>",278],["\" Maintainer:   Tim Pope <http://tpo.pe/>",202]],"useCount":7657},{"word":"Make","context":[["silent! exe 'Make'",100],["\"   \" Make sure you use single quotes",89],["if g:go_dispatch_enabled && exists(':Make') == 2",103],["\" Make sure the tag type is a valid and supported one",62],["\" Make it beautiful - colors and fonts",61],["\" Make sure the continuation lines below do not cause problems in",115],["\" Make sure the current tag line is visible in the taglist window.",66],["\" Make sure the taglist window is present",67],["\" Make the node for this bookmark the new tree root",70],["\" Make sure we are in our window",132]],"useCount":2534},{"word":"ModeMsg","context":[["hi ModeMsg\tcterm=NONE ctermfg=brown",57],["exe \"hi! ModeMsg\"        .s:fmt_none   .s:fg_blue   .s:bg_none",67],["\"hi ModeMsg -- no settings --",62],["hi ModeMsg     guibg=bg guifg=#ffeecc  gui=none ctermbg=bg ctermfg=14",91],["hi link  MoreMsg     ModeMsg",91],["CSAHi ModeMsg term=bold cterm=bold ctermbg=bg ctermfg=fg gui=bold guibg=bg guifg=fg",148],["hi ModeMsg         ctermfg=229",160],["hi ModeMsg         guifg=#E6DB74",162],["call <SID>X(\"ModeMsg\", s:green, \"\", \"\")",185],["call <sid>hi(\"ModeMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",268]],"useCount":2331},{"word":"MoreMsg","context":[["call <SID>X(\"MoreMsg\", s:green, \"\", \"\")",186],["hi MoreMsg\tctermfg=darkgreen",60],["exe \"hi! MoreMsg\"        .s:fmt_none   .s:fg_blue   .s:bg_none",67],["\"hi MoreMsg -- no settings --",68],["echohl MoreMsg",69],["CSAHi MoreMsg term=bold cterm=bold ctermbg=bg ctermfg=72 gui=bold guibg=bg guifg=#2e8b57",88],["call <sid>hi(\"MoreMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["hi link  MoreMsg     ModeMsg",91],["hi MoreMsg         ctermfg=229",160],["hi MoreMsg         guifg=#E6DB74",162]],"useCount":2401},{"word":"N","context":[["autocmd VimEnter * set guitablabel=%N:\\ %t\\ %M",65],["return 'Git add -N .'",56],["nnoremap <buffer> <silent> <C-N> :<C-U>execute <SID>StageNext(v:count1)<CR>",55],["\" Return: N/A",49],["call append(5, ['', 'N/A'])",45],["\" vim --noplugin -u vim/vundles.vim -N \"+set hidden\" \"+syntax on\" +BundleClean! +BundleInstall +qall",71],["cnoremap <C-N> <Down>",43],["let yes = a:force || (input('Proceed? (y/N) ') =~? '^y')",38],["\\ input(printf('Revert the update of %s? (y/N) ', name)) !~? '^y'",84],["\\ (empty(tag) ? 'N/A' : tag), a:spec.tag)",79]],"useCount":2423},{"word":"NERDTree","context":[["catch /^NERDTree/",154],["\" NERDTree highlighting",284],["catch /^NERDTree.InvalidArgumentsError/",213],["call b:NERDTree.render()",186],["catch /^NERDTree.BookmarkNotFoundError/",139],["catch /^NERDTree.BookmarkedNodeNotFoundError/",129],["\" NERDTree",117],["echomsg \"NERDTree: \" . a:msg",59],["call b:NERDTree.ui.centerView()",54],["call g:NERDTree.CursorToTreeWin()",51]],"useCount":3801},{"word":"NONE","context":[["CSAHi vimHiBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiKeyList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAutoCmdSpace term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiKeyList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAuSyntax term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimIf term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["echohl NONE",483],["CSAHi vimMenuBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAutoCmdSpace term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":218703},{"word":"New","context":[["call s:notifiers.refresh(g:SyntasticLoclist.New([]))",93],["let newLoclist = g:SyntasticLoclist.New([])",68],["let object = s:prototype.New(a:0 >= 1 ? a:1 : {})",55],["let path = s:Path.New(i)",54],["let newRoot = s:TreeDirNode.New(path)",52],["let creator = s:Creator.New()",52],["return s:Path.New(path)",43],["return s:Path.New(a:fullpath)",43],["let checker = g:SyntasticChecker.New(a:args)",41],["let buf = g:vimclojure#ResultBuffer.New()",41]],"useCount":3865},{"word":"No","context":[["echomsg 'No commit needed.'",56],["\\ \"\\n&No\"",53],["\" E776: No location list",49],["return s:error(\"No view name given\")",49],["return s:error('No such directory')",60],["let filename = '[No Name]'",48],["call setline(1, cnt == 0 ? 'No updates.' : 'Last update:')",45],["echo 'No plugin to '. (a:pull ? 'update' : 'install') . '.'",61],["call s:DB_warningMsg('DBI: No column info returned')",66],["\" No annoying sound on errors",67]],"useCount":2656},{"word":"NonText","context":[["hi NonText         ctermfg=239",71],["call <sid>hi(\"NonText\",       s:gui03, \"\", s:cterm03, \"\", \"\")",274],["call <SID>X(\"NonText\", s:selection, \"\", \"\")",177],["hi NonText cterm=NONE gui=NONE",50],["hi NonText         guifg=#BCBCBC guibg=#232526",50],["hi NonText         guifg=#BCBCBC guibg=#3B3A32",58],["hi NonText         guifg=#465457",86],["hi NonText         ctermfg=59",83],["hi NonText         guifg=#75715E",77],["CSAHi NonText term=bold cterm=bold ctermbg=bg ctermfg=21 gui=bold guibg=bg guifg=#0000ff",60]],"useCount":2640},{"word":"None","context":[["self.callback = cb if cb else (lambda msg: None)",79],["echohl WarningMsg | echomsg s:MsgInsNotAvail  | echohl None",78],["echohl None",3576],["\"   None.",592],["\\ echohl None",168],["com = Command(cmd, None, G_TIMEOUT, callback, clean(target))",59],["self.proc = None",60],["echohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None",71],["if matcher.search(line) is not None:",79],["return None",82]],"useCount":7384},{"word":"Normal","context":[["hi Normal                   ctermbg=234",68],["exe \"hi! Normal\"         .s:fmt_none   .s:fg_base0  .s:bg_back",65],["hi Normal       ctermfg=252 ctermbg=233",66],["echohl Normal",302],["hi Normal       ctermfg=252 ctermbg=234",67],["call <sid>hi(\"Normal\",        s:gui05, s:gui00, s:cterm05, s:cterm00, \"\")",262],["call <SID>X(\"Normal\", s:foreground, s:background, \"\")",191],["hi Normal          guifg=#F8F8F2 guibg=#1B1D1E",131],["hi Normal          guifg=#F8F8F2 guibg=#272822",128],["\" Normal mode",100]],"useCount":4643},{"word":"Number","context":[["hi link javaScriptNumber      Number",66],["hi Number          ctermfg=141",71],["\"        Number          a number constant: 234, 0xff",69],["hi def link FugitiveblameLineNumber         Number",77],["hi def link plugNumber  Number",90],["hi link Float           Number",119],["\" Number",136],["hi Number          guifg=#AE81FF",153],["hi Number          ctermfg=135",156],["call <sid>hi(\"Number\",       s:gui09, \"\", s:cterm09, \"\", \"\")",255]],"useCount":4643},{"word":"O","context":[["setlocal indentkeys=o,O,*<Return>,<>>,{,}",32],["inoremap $4 {<esc>o}<esc>O",32],["setlocal indentkeys=0{,0},0),:,!^F,o,O,e,*<Return>,=?>,=<?,=*/",36],["\" Set completion with CTRL-X CTRL-O to autoloaded function.",38],["call s:initVariable(\"g:NERDTreeMapOpenRecursively\", \"O\")",45],["nnoremap <buffer> <silent> O    :<C-U>exe <SID>BlameCommit(\"tabedit\")<CR>",67],["nnoremap <buffer> <silent> O     :<C-U>exe <SID>GF(\"tabedit\")<CR>",77],["\\ [['i', '<C-O>', ''], ['n', '', ''], ['v', '', 'gv'], ['o', '', '']]",90],["setlocal indentkeys=0{,0},:,0#,!^F,o,O,e",706],["setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e",848]],"useCount":3520},{"word":"OF","context":[["\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",35],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",20],["\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",20],["\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",20],["\"       DO NOT USE THIS FILE WITH A VERSION OF VIM < 7.0.",21],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162]],"useCount":2315},{"word":"OR","context":[["\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",35],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\" KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO",41],["\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",35],["\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",35],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65]],"useCount":4348},{"word":"OTHERWISE","context":[["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",19],["\"             WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",14],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710]],"useCount":1991},{"word":"OUT","context":[["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\"   OUT      @variable CHAR(1)",16],["\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",19],["\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",20],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162]],"useCount":2013},{"word":"Only","context":[["\" Only valid for DBI and ODBC (perl)",41],["\" Only do this when not done yet for this buffer",496],["\" Only load this indent file when no other was loaded.",515],["\" Only do this part when compiled with support for autocommands.",33],["\" Only double click using the mouse will be processed.",34],["\" Only define the function once.",430],["\" Only when an item doesn't have highlighting yet",254],["\" Only one possibility",211],["\" Only include a command terminator if one has not already",172],["\" Only used when an item doesn't have highlighting yet",106]],"useCount":3108},{"word":"Open","context":[["\" Open the window at the rightmost place",56],["\" Open a new window",35],["\" Open this file in Vim and run :source % to restore your session.",35],["\" Open a vertically split window. Increase the window size, if",34],["\" Open the taglist window",64],["\" Open the new window",40],["\" Open CtrlP starting from a particular path, making it much",51],["\" Open the window at the leftmost place",58],["\" Open the fold for the file",61],["\" Open the project tree and expose current file in the nerdtree with Ctrl-\\",60]],"useCount":2274},{"word":"Operator","context":[["hi Operator        guifg=#F92672",155],["hi Operator        ctermfg=197",71],["\"        Operator        \"sizeof\", \"+\", \"*\", etc.",70],["HiLink pythonOperator\t\tOperator",57],["hi Operator        ctermfg=161",152],["call <sid>hi(\"Operator\",     s:gui05, \"\", s:cterm05, \"\", \"none\")",260],["call <SID>X(\"Operator\", s:aqua, \"\", \"none\")",174],["hi link rubyOperator          Operator",70],["\" Operator",68],["\"hi! link rubyOperator          Operator",67]],"useCount":2817},{"word":"OptionG","context":[["call <SID>OptionG(\"pfn\", &pfn)",18],["call <SID>OptionG(\"para\", &para)",18],["call <SID>OptionG(\"lcs\", &lcs)",18],["call <SID>OptionG(\"sh\", &sh)",18],["call <SID>OptionG(\"pm\", &pm)",18],["call <SID>OptionG(\"titlestring\", &titlestring)",18],["call <SID>OptionG(\"gfw\", &gfw)",18],["call <SID>OptionG(\"tenc\", &tenc)",18],["call <SID>OptionG(\"cedit\", &cedit)",18],["call <SID>OptionG(\"bdir\", &bdir)",18]],"useCount":2211},{"word":"P","context":[["wincmd P | wincmd H",71],["return s:GitComplete(a:A,a:L,a:P)",67],["function! s:CommitComplete(A,L,P) abort",75],["function! s:EditComplete(A,L,P) abort",76],["silent! wincmd P",142],["wincmd P",313],["`pgrep -P #{pid}`.lines.map { |l| l.chomp }",90],["function! s:DirComplete(A,L,P) abort",79],["nnoremap <buffer> <silent> P    :<C-U>exe <SID>BlameJump('^'.v:count1)<CR>",76],["nunmap   <buffer>          P",76]],"useCount":5098},{"word":"Path","context":[["\"filesystem. If the path already exists, a NERDTree.Path.Exists exception is",45],["\"thrown. If any other errors occur, a NERDTree.Path exception is thrown.",45],["\"a Path object",45],["\"The Constructor for the Path object",45],["\"Throws NERDTree.Path.InvalidArguments exception.",49],["let path = s:Path.New(i)",54],["let lead = s:Path.Slash()",74],["\"Throws NERDTree.Path.Deletion exceptions",45],["\"Copies the file/dir represented by this Path to the given location",45],["\"a new Path object",45]],"useCount":4744},{"word":"Plug","context":[["Plug 'tpope/vim-surround'",277],["Plug 'airblade/vim-gitgutter'",213],["Plug 'vim-airline/vim-airline'",175],["Plug 'vim-airline/vim-airline-themes'",172],["Plug 'scrooloose/syntastic'",169],["Plug 'tpope/vim-repeat'",166],["nmap gx <Plug>NetrwBrowseX",154],["Plug 'tpope/vim-commentary'",149],["Plug 'scrooloose/nerdtree'",151],["Plug 'tpope/vim-fugitive'",327]],"useCount":19952},{"word":"Plugin","context":[["\"   \" Plugin outside ~/.vim/plugged with post-update hook",89],["Plugin 'scrooloose/nerdtree'",160],["Plugin 'bling/vim-airline'",93],["Plugin 'tpope/vim-surround'",105],["\" Section: Plugin header {{{1",105],["Plugin 'tpope/vim-fugitive'",165],["Plugin 'gmarik/Vundle.vim'",120],["\" Plugin key-mappings.",122],["Plugin 'kien/ctrlp.vim'",125],["Plugin 'scrooloose/syntastic'",129]],"useCount":5866},{"word":"PreProc","context":[["call <sid>hi(\"PreProc\",      s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <SID>X(\"PreProc\", s:purple, \"\", \"\")",176],["hi PreProc         ctermfg=118",156],["hi link Include         PreProc",105],["hi PreProc         guifg=#A6E22E",153],["hi def link FugitiveblameTime               PreProc",77],["hi PreProc    guibg=bg   guifg=#ffcc99   ctermbg=4  ctermfg=14",91],["hi link PreCondit       PreProc",114],["hi link Macro           PreProc",112],["hi link Define          PreProc",104]],"useCount":5223},{"word":"Python","context":[["\" Python",199],["\" Python Highlighting",210],["\" Python: {{{",35],["\" Python {{{",45],["\" Delete trailing white space on save, useful for Python and CoffeeScript ;)",52],["\" Language:\tPython",59],["\" Special for Python",64],["\" Python version requirement (>= 2.7)",79],["\" Decorators (new in Python 2.4)",81],["\" Python highlighting",191]],"useCount":2277},{"word":"Question","context":[["echohl Question",86],["call <sid>hi(\"Question\",      s:gui0A, \"\", s:cterm0A, \"\", \"\")",109],["call <sid>hi(\"Question\",      s:gui0D, \"\", s:cterm0D, \"\", \"\")",131],["\"hi Question -- no settings --",81],["exe \"hi! Question\"       .s:fmt_bold   .s:fg_cyan   .s:bg_none",66],["hi Question\tctermfg=green",60],["\"hi Question",57],["hi Question        guifg=#66D9EF",161],["hi Question        ctermfg=81",174],["call <SID>X(\"Question\", s:green, \"\", \"\")",185]],"useCount":2421},{"word":"Quit","context":[["\" For version 6.x: Quit when a syntax file was already loaded.",61],["\" For versions greater than 6.x: Quit when a syntax file was already loaded",21],["\" Quit when a syntax file was already loaded {{{2",23],["\" Quit if syntax file is already loaded",24],["\" For version 6.x and 7.x: Quit when a syntax file was already loaded",25],["\" Quit when menu translations have already been done.",185],["\" Quit when a syntax file was already loaded",211],["\" Quit when a (custom) syntax file was already loaded",212],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["call vimtest#Quit()",38]],"useCount":2399},{"word":"R","context":[["return split(R, '\\n')",72],["vmap ,{ c{<C-R>\"}<ESC>",65],["vmap ,' c'<C-R>\"'<ESC>",65],["vmap ,( c( <C-R>\" )<ESC>",65],["nnoremap <buffer> <silent> R :<C-U>edit<CR>",68],["\" Returns the palette index for the given R/G/B colour indices",211],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\" returns the palette index to approximate the given R/G/B color levels",120],["\" returns the palette index for the given R/G/B color indices",120],["call add(msgs, \"Press 'R' to retry.\")",89]],"useCount":5021},{"word":"Rabbrev","context":[["Rabbrev se[ session",49],["Rabbrev mcht( change_table",49],["return s:error(\"Rabbrev: unimplemented\")",49],["Rabbrev mct(  create_table",49],["Rabbrev rq[ request",49],["command! -buffer -bar -nargs=* -bang Rabbrev :call s:Abbrev(<bang>0,<f-args>)",49],["Rabbrev mrc(  remove_column",49],["Rabbrev hm(    has_many",49],["Rabbrev rf( render :file\\ =>\\",49],["return s:error(\"Rabbrev: invalid arguments\")",147]],"useCount":3448},{"word":"Remove","context":[["\" Remove the Windows ^M - when the encodings gets messed up",54],["\\ exe \"command! -buffer -bar -bang Gremove :execute s:Remove(<bang>0)\" |",77],["\" Remove the previous help",68],["\" Remove any old syntax stuff hanging around",205],["\" Remove functions",303],["\" Remove color variables",303],["\" Remove the previous highlighting",66],["\" Remove any newline characters",60],["\" Remove duplicates from a list.",67],["function! s:Remove(force)",41]],"useCount":2940},{"word":"Repeat","context":[["hi Repeat          ctermfg=197               cterm=bold",69],["\"        Repeat          for, do, while, etc.",69],["hi def link plug2       Repeat",90],["call <SID>X(\"Repeat\", s:foreground, \"\", \"\")",176],["hi Repeat          ctermfg=161               cterm=bold",160],["call <sid>hi(\"Repeat\",       s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["hi Repeat          guifg=#F92672               gui=bold",154],["hi link Repeat          Statement",100],["HiLink pythonRepeat\t\tRepeat",57],["\" Repeat",57]],"useCount":2277},{"word":"Return","context":[["\"Return: the number of child nodes read",66],["\" Return to previous location",56],["\"\"\" Read a file with nonblock flag. Return the last line. \"\"\"",79],["\"Return:",374],["\" Return GUI color for light/dark variants",292],["\" Return terminal color for light/dark variants",292],["\" Return to original window",144],["\" Return to last edit position when opening files (You want this!)",65],["\" Return value:",98],["\"\"\" Find first line with name in current buffer. Return line num. \"\"\"",79]],"useCount":3163},{"word":"Returns","context":[["\" Returns an approximate grey index for the given grey level",211],["\" Returns  : nothing",112],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\" Returns the palette index to approximate the 'rrggbb' hex string",190],["\" Returns the palette index for the given R/G/B colour indices",211],["\" Returns:",410],["\" Returns the palette index for the given grey index",211],["\" Returns the actual colour level for the given colour index",211],["\" Returns the actual grey level represented by the grey index",211],["\" Returns an approximate colour index for the given colour level",211]],"useCount":5241},{"word":"S","context":[["let self._aliases[matchstr(line,'\\.\\zs\\S\\+')] = matchstr(line,' \\zs.*')",66],["let myhash = matchstr(getline(1),'^\\w\\+ \\zs\\S\\+')",67],["\\ 'style_error_symbol':       'S>',",60],["nnoremap <buffer> <silent> S     :<C-U>exe <SID>GF(\"vsplit\")<CR>",60],["for prefix in ['E', 'S', 'V', 'T', 'D', 'R', 'RE', 'RS', 'RV', 'RT', 'RD']",60],["\\ 'style_warning_symbol':     'S>',",60],["call s:system((s:is_win ? 'rmdir /S /Q ' : 'rm -rf ') . s:shellesc(a:dir))",73],["let file = matchstr(getline('.'),\"'\\\\zs\\\\S\\\\+\\\\ze'\")",75],["if g:drawit_mode == 'S'",78],["nnoremap <silent> <buffer> S  :PlugStatus<cr>",90]],"useCount":6754},{"word":"SID","context":[["let l:gx = <SID>grey_number(a:r)",265],["let l:x = <SID>rgb_number(a:r)",265],["let l:gz = <SID>grey_number(a:b)",265],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["call <SID>DEBUG('===========================',10)",320],["let l:y = <SID>rgb_number(a:g)",265],["let l:dr = <SID>rgb_level(l:gx) - a:r",265],["let l:dgb = <SID>grey_level(l:gz) - a:b",265],["let l:gy = <SID>grey_number(a:g)",265],["let l:z = <SID>rgb_number(a:b)",265]],"useCount":68532},{"word":"Script","context":[["\" Script Wrappers {{{1",49],["\" Script Varables {{{",69],["\" Script Variables {{{",244],["\" Script-local variable needed since compare functions can't",28],["\" SECTION: Script init stuff {{{1",46],["\" Active Server Pages (with Perl or Visual Basic Script)",30],["\" Windows Scripting Host and Windows Script Component",29],["\" Script Info and Documentation  {{{",28],["\"SECTION: Script level variable declaration{{{2",28],["\" Active Server Pages (with Visual Basic Script)",30]],"useCount":2010},{"word":"Search","context":[["call <sid>hi(\"Search\",        s:gui03, s:gui0A, s:cterm03, s:cterm0A,  \"\")",191],["echohl Search\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\" highlight prompt",48],["exe \"hi! Search\"         .s:fmt_revr   .s:fg_yellow .s:bg_none",63],["call <sid>hi(\"Search\",        s:gui01, s:gui0A, s:cterm01, s:cterm0A,  \"\")",63],["hi Search          guifg=#FFFFFF guibg=#455354",105],["hi Search          ctermfg=253 ctermbg=66",111],["hi Search ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline",112],["echohl Search",133],["call <SID>X(\"Search\", s:background, s:yellow, \"\")",144],["\" Search",282]],"useCount":3639},{"word":"Section","context":[["\" Section: Utility",37],["\" Section: Plugin header {{{1",105],["\" Section: Documentation {{{1",96],["\" Section: Utility functions {{{1",82],["\" Section: Variable initialization {{{1",57],["\" Section: Plugin Registration {{{1",57],["\" Section: VCS function implementations {{{1",57],["\" Section: Menu items {{{1",38],["\" Section: Command definitions {{{1",37],["\" Section: Go to file",36]],"useCount":2057},{"word":"See","context":[["\" See also :help syntax",47],["\" Solarized menu option. See the \"Menus\" section below for the function itself.",49],["\\'\" existing colorscheme commands). See also \":help solarized\"',",49],["\" See the homepage above for screenshots and details.",69],["\" See the Solarized homepage at http://ethanschoonover.com/solarized for",70],["\" See also Steffen Siering's github repository:",73],["\" See |tlib#input#List()|.",75],["\" Anon CVS:\t\tSee above site",96],["\"              See http://sam.zoy.org/wtfpl/COPYING for more details.",100],["\"             See http://sam.zoy.org/wtfpl/COPYING for more details.",1702]],"useCount":3359},{"word":"Set","context":[["\" Set utf8 as standard encoding and en_US as the standard language",58],["\" Set 'comments' to format dashed lists in comments.",60],["\" Set to auto read when a file is changed from the outside",65],["\" Set both gui and terminal color values in separate conditional statements",73],["\" Set 'formatoptions' to break comment lines but not other lines,",84],["\" Set report option to a huge value to prevent informational messages",104],["\" Set minimum syntax keyword length.",108],["\" Set up variables to use and search for MSL to the previous line.",54],["\" Set extra options when running in GUI mode",54],["\" Set 7 lines to the cursor - when moving vertically using j/k",57]],"useCount":3174},{"word":"Shougo","context":[["Plug 'Shougo/deoplete.nvim'",61],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu@gmail.com>",909],["NeoBundle 'Shougo/vimproc.vim', {",37],["NeoBundle 'Shougo/unite.vim'",41],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu@gmail.com>",909],["\" AUTHOR: Shougo Matsushita <Shougo.Matsu@gmail.com>",510],["\" AUTHOR: Shougo Matsushita <Shougo.Matsu@gmail.com>",510],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>",195],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>",195],["NeoBundleFetch 'Shougo/neobundle.vim'",91]],"useCount":4182},{"word":"Solarized","context":[["\" Solarized is a carefully designed selective contrast colorscheme with dual",70],["\" Currently, Solarized sets only the cterm or gui values for the colorscheme",66],["\" or, for the light background mode of Solarized:",70],["\" See the Solarized homepage at http://ethanschoonover.com/solarized for",70],["\\'\" includes the current, non-default Solarized option values.',",49],["\" In cases where Solarized is initialized inside a terminal vim session and",66],["\" Name:     Solarized vim colorscheme",64],["\\'\" Solarized Colorscheme Config',",49],["\" Solarized menu option. See the \"Menus\" section below for the function itself.",49],["silent! aunmenu Solarized",48]],"useCount":2611},{"word":"Special","context":[["call <sid>hi(\"Special\",      s:gui0C, \"\", s:cterm0C, \"\", \"\")",255],["hi def link plugDash    Special",90],["hi Special         ctermfg=81  ctermbg=232",90],["call <SID>X(\"Special\", s:foreground, \"\", \"\")",185],["hi Special    guibg=bg   guifg=#bbddff      ctermbg=1   ctermfg=15",91],["hi Special         guifg=#66D9EF guibg=bg      gui=italic",145],["hi link Tag             Special",111],["hi link SpecialComment  Special",123],["hi link Debug           Special",116],["hi link SpecialChar     Special",115]],"useCount":7803},{"word":"SpecialKey","context":[["hi SpecialKey      ctermfg=59",85],["hi SpecialKey      guifg=#66D9EF               gui=italic",150],["hi SpecialKey  guibg=bg guifg=fg       gui=none ctermbg=bg ctermfg=fg",91],["hi SpecialKey      guifg=#465457",88],["call <SID>X(\"SpecialKey\", s:selection, \"\", \"\")",186],["CSAHi SpecialKey term=bold cterm=NONE ctermbg=bg ctermfg=51 gui=NONE guibg=bg guifg=#00ffff",84],["hi SpecialKey      ctermfg=245",81],["hi SpecialKey      guifg=#75715E",77],["hi SpecialKey      ctermfg=81",170],["call <sid>hi(\"SpecialKey\",    s:gui03, \"\", s:cterm03, \"\", \"\")",543]],"useCount":3262},{"word":"Spell","context":[["\"    -> Spell checking",45],["syn match   pythonComment\t\"#.*$\" display contains=pythonTodo,@Spell",47],["syn region\tcCppString\tstart=+L\\=\"+ skip=+\\\\\\\\\\|\\\\\"\\|\\\\$+ excludenl end=+\"+ end='$' contains=cSpecial,@Spell",36],["\\ @Spell",38],["syn region\tcParen\t\ttransparent start='(' end=')' contains=ALLBUT,@cParenGroup,cCppParen,cCppString,@Spell",67],["syn region\tcCppString\tstart=+L\\=\"+ skip=+\\\\\\\\\\|\\\\\"\\|\\\\$+ excludenl end=+\"+ end='$' contains=cSpecial,cFormat,@Spell",58],["syn region\tcCommentL\tstart=\"//\" skip=\"\\\\$\" end=\"$\" keepend contains=@cCommentGroup,cSpaceError,@Spell",58],["\" => Spell checking",50],["\\ contains=@Spell",47],["\" Spell Checking",42]],"useCount":2376},{"word":"Statement","context":[["hi Statement       guifg=#F92672               gui=bold",145],["hi link Label           Statement",113],["hi link Exception       Statement",115],["hi Statement       ctermfg=161               cterm=bold",147],["call <SID>X(\"Statement\", s:foreground, \"\", \"\")",173],["call <sid>hi(\"Statement\",    s:gui08, \"\", s:cterm08, \"\", \"\")",255],["hi Statement       ctermfg=197               cterm=bold",67],["\"       *Statement       any statement",69],["echohl Statement",74],["hi link Repeat          Statement",100]],"useCount":5527},{"word":"StatusLine","context":[["exe \"hi! StatusLine\"     .s:fmt_none   .s:fg_base1  .s:bg_base02 .s:fmt_revbb",46],["\"  - Charlie - spotted too bright StatusLine in non-high contrast mode",45],["hi StatusLine      guifg=#313633 guibg=#ccdc90",42],["CSAHi StatusLine term=bold,reverse cterm=bold,reverse ctermbg=bg ctermfg=fg gui=bold,reverse guibg=bg guifg=fg",56],["hi StatusLine ctermfg=231 ctermbg=241 cterm=bold guifg=#f8f8f2 guibg=#64645e gui=bold",57],["hi StatusLine     guibg=#ffeecc  guifg=black     ctermbg=14 ctermfg=0",91],["hi StatusLine      guifg=#455354 guibg=fg",147],["call <SID>X(\"StatusLine\", s:window, s:yellow, \"reverse\")",149],["hi StatusLine      ctermfg=238 ctermbg=253",152],["call <sid>hi(\"StatusLine\",    s:gui04, s:gui02, s:cterm04, s:cterm02, \"none\")",273]],"useCount":2291},{"word":"StatusLineNC","context":[["call <SID>X(\"StatusLineNC\", s:window, s:foreground, \"reverse\")",156],["hi StatusLineNC    ctermfg=244 ctermbg=232",154],["hi StatusLineNC    guifg=#2e3330 guibg=#88b090",48],["CSAHi StatusLineNC term=reverse cterm=reverse ctermbg=bg ctermfg=fg gui=reverse guibg=bg guifg=fg",80],["exe \"hi! StatusLineNC\"   .s:fmt_none   .s:fg_base00 .s:bg_base02 .s:fmt_revbb",46],["hi StatusLineNC   guibg=#cc4455  guifg=white    gui=none ctermbg=4  ctermfg=11",91],["call <sid>hi(\"StatusLineNC\",  s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",272],["hi StatusLineNC    guifg=#808080 guibg=#080808",160],["hi StatusLineNC cterm=reverse",67],["hi StatusLineNC ctermfg=231 ctermbg=241 cterm=NONE guifg=#f8f8f2 guibg=#64645e gui=NONE",56]],"useCount":2236},{"word":"StorageClass","context":[["hi StorageClass    ctermfg=208",172],["\"        StorageClass    static, register, volatile, etc.",69],["hi StorageClass ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic",55],["hi StorageClass cterm=NONE gui=NONE",50],["hi StorageClass term=NONE cterm=NONE",50],["hi def link cStorageClass\tStorageClass",46],["hi link StorageClass\tType",98],["hi link StorageClass    Type",117],["hi StorageClass    guifg=#FD971F               gui=italic",155],["call <sid>hi(\"StorageClass\", s:gui0A, \"\", s:cterm0A, \"\", \"\")",255]],"useCount":2023},{"word":"String","context":[["hi String          ctermfg=144",151],["call <sid>hi(\"String\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",255],["\" String",236],["call <SID>X(\"String\", s:green, \"\", \"\")",185],["\" String and Character constants",176],["hi String          guifg=#E6DB74",151],["throw \"vital: Data.String: Can't use non-half-width characters for padding.\"",125],["hi def link FugitiveblameOriginalFile       String",77],["hi String          ctermfg=222",70],["\"        String          a string constant: \"this is a string\"",69]],"useCount":6232},{"word":"Structure","context":[["hi Structure cterm=NONE gui=NONE",50],["call <sid>hi(\"Structure\",    s:gui0E, \"\", s:cterm0E, \"\", \"\")",269],["call <SID>X(\"Structure\", s:purple, \"\", \"\")",174],["hi Structure       ctermfg=81",172],["hi Structure       guifg=#66D9EF",155],["hi link Structure       Type",112],["hi def link plugBracket Structure",90],["\"        Structure       struct, union, enum, etc.",69],["hi Structure term=NONE cterm=NONE",50],["hi link Structure\tType",58]],"useCount":2156},{"word":"SyntasticRegistry","context":[["function! g:SyntasticRegistry.CreateAndRegisterChecker(args) abort \" {{{2",22],["function! g:SyntasticRegistry.Instance() abort \" {{{2",22],["function! g:SyntasticRegistry.getKnownFiletypes() abort \" {{{2",22],["function! g:SyntasticRegistry._registerChecker(checker) abort \" {{{2",33],["function! g:SyntasticRegistry.getNamesOfAvailableCheckers(ftalias) abort \" {{{2",22],["function! g:SyntasticRegistry.getCheckers(ftalias, hints_list) abort \" {{{2",22],["call g:SyntasticRegistry.CreateAndRegisterChecker({",1621],["let s:registry = g:SyntasticRegistry.Instance()",68],["let registry = g:SyntasticRegistry.Instance()",55],["let g:SyntasticRegistry = {}",41]],"useCount":2112},{"word":"Syntax","context":[["\" For use with syntax/haskell.vim : Haskell Syntax File",73],["\" Syntax group",69],["\" Syntax {{{1",64],["\" Syntax",111],["\\ 'stl_format':               '[Syntax: line:%F (%t)]',",60],["\" Syntax menu",131],["\" Syntax highlighting",312],["\"Description: Syntax checking plugin for syntastic.vim",1331],["\" Colors for Syntax Highlighting.",112],["autocmd Syntax fugitiveblame call s:BlameSyntax()",77]],"useCount":4492},{"word":"T","context":[["syn match     rustFuncCall    \"\\w\\(\\w\\)*::<\"he=e-3,me=e-3 \" foo::<T>();",42],["\" search will be displayed in the current window.  You can use CTRL-T to",37],["map T <Plug>(easymotion-T)",37],["set guioptions-=T",135],["call s:initVariable(\"g:NERDTreeMapOpenInTabSilent\", \"T\")",45],["elseif cmd == 'T'",49],["for prefix in ['E', 'S', 'V', 'T', 'D', 'R', 'RE', 'RS', 'RV', 'RT', 'RD']",60],["let m_prefix = 'anoremenu <silent> T\\&ags.'",62],["\" -n  unix : DON'T use <.netrc>, even though it exists",100],["map T <Plug>(easymotion-T)",37]],"useCount":2182},{"word":"THE","context":[["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\" NOTE THIS IS IN THE COOL SECTION",109],["\" NOTE THIS IS IN THE WARM SECTION",103],["\\ if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'",27],["\" FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",23],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",19],["\"  READ THE TEMPLATE FILES",13],["silent put ='GPG: THERE IS NO CHECK OF THE ENTERED OPTIONS!'",13],["\" DELAYED LOADING OF THE TEMPLATE DEFINITIONS",13]],"useCount":2051},{"word":"TLogVAR","context":[["\" TLogVAR world.list",51],["\" TLogVAR handler",46],["\" TLogVAR pos",46],["\" TLogVAR world.prefidx",68],["\" TLogVAR self.filter",67],["\" TLogVAR cdef",65],["\" TLogVAR rv",202],["\" TLogVAR text",64],["\" TLogVAR world.state",97],["\" TLogVAR rx",82]],"useCount":4725},{"word":"TODO","context":[["syn keyword pythonTodo\t\tTODO FIXME XXX contained",55],["\" TODO:",324],["\" TODO",226],["\" TODO: use count, if possible",76],["\"                        keywords TODO FIXME and XXX",69],["\" TODO: regexp engine specified",69],["\" TODO: at this point there is no b:syntastic_loclist",66],["\"TODO",65],["syn keyword\tcTodo\t\tcontained TODO FIXME XXX",62],["\" TODO: the || s:IsInString() thing worries me a bit.",54]],"useCount":3471},{"word":"TORT","context":[["\"             WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",14],["\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",19],["\"   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",21],["\"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1710],["\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",162],["\" TRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CON‐",65]],"useCount":1991},{"word":"Tab","context":[["menutrans &Make<Tab>:make\t\t&Make<Tab>:make",30],["if a:A =~ '^-' || type(a:A) == type(0) \" a:A is 0 on :Gcommit -<Tab>",75],["\" Window/Tab/Split Manipulation",62],["return \"\\<Tab>\"",60],["\" several Tab workspaces and want to open two windows into the same file.",46],["\" Tab pages line filler",40],["\"   Note: you must press <Tab> once to be able to cycle back",33],["\"   You can cycle forward and backward with the <Tab> and <S-Tab> keys",33],["\"   You can cycle forward and backward with the <Tab> and <S-Tab> keys",33],["inoremap <buffer> <silent> <Tab> <C-o>:call <SID>Tlist_Window_Move_To_File(1)<CR>",31]],"useCount":4510},{"word":"Tag","context":[["\"        Tag             you can use CTRL-] on this",70],["call <sid>hi(\"Tag\",          s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["hi Tag             guifg=#F92672               gui=italic",153],["hi link Tag             Special",111],["hi Tag        guibg=bg   guifg=#bbddff      ctermbg=1   ctermfg=15",91],["hi Tag             ctermfg=161",170],["hi Tag             ctermfg=197",71],["\" Add the tag scope, if it is available and is configured. Tag",64],["hi Tag ctermfg=197 ctermbg=NONE cterm=NONE guifg=#f92672 guibg=NONE gui=NONE",53],["hi Tag             guifg=#e89393 gui=bold",41]],"useCount":2279},{"word":"The","context":[["\" The GUI toolbar",100],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\"The corresponding options are set for the duration of the function call. They",81],["\" The popup menu",151],["\" The default highlighting.",216],["\" The default methods for highlighting.  Can be overridden later",248],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" The difference is in whether a space is put in",76],["\" The following are the preferred 16 colors for your terminal",70],["\" Create window splits easier. The default",66]],"useCount":9774},{"word":"This","context":[["\" This enables the coresponding base16-shell script to run so that",177],["\" This contains the defaults settings for all database types",167],["\" This file is part of SingleCompile.",70],["\" This is fast but code inside triple quoted strings screws it up. It",72],["\"This function is used to determine whether the given line is commented with",69],["\"This function doesnt not recurse into child dir nodes",84],["\" This scheme was created by CSApproxSnapshot",75],["\\ '\"sudo vim\" is detected. This feature is disabled.')",74],["\" This file contains the list of plugin installed using vundle plugin manager.",73],["\" This is basic vim plugin boilerplate",87]],"useCount":9250},{"word":"Title","context":[["exe \"hi! Title\"          .s:fmt_bold   .s:fg_orange .s:bg_none",67],["echohl Title",68],["hi Title           ctermfg=203",70],["CSAHi Title term=bold cterm=bold ctermbg=bg ctermfg=201 gui=bold guibg=bg guifg=#ff00ff",81],["hi Title ctermfg=231 ctermbg=NONE cterm=bold guifg=#f8f8f2 guibg=NONE gui=bold",82],["hi def link plug1       Title",90],["hi Title           ctermfg=166",158],["hi Title           guifg=#ef5939",163],["call <SID>X(\"Title\", s:comment, \"\", \"\")",194],["call <sid>hi(\"Title\",         s:gui0D, \"\", s:cterm0D, \"\", \"none\")",269]],"useCount":3211},{"word":"Todo","context":[["call <sid>hi(\"Todo\",         s:gui0A, s:gui01, s:cterm0A, s:cterm01, \"\")",267],["hi Todo            ctermfg=231 ctermbg=232   cterm=bold",151],["hi def link     goTodo              Todo",64],["exe \"hi! Todo\"           .s:fmt_bold   .s:fg_magenta.s:bg_none",65],["\"       *Todo            anything that needs extra attention; mostly the",69],["hi Todo            guifg=#FFFFFF guibg=bg      gui=bold",147],["hi Todo     guibg=#556677  guifg=#ff0000      ctermbg=1   ctermfg=12",91],["CSAHi Todo term=NONE cterm=NONE ctermbg=226 ctermfg=21 gui=NONE guibg=#ffff00 guifg=#0000ff",99],["\" Todo",122],["call <SID>X(\"Todo\", s:comment, s:background, \"\")",155]],"useCount":3322},{"word":"TreeDirNode","context":[["function! s:TreeDirNode.close()",40],["function! s:TreeDirNode.sortChildren()",40],["function! s:TreeDirNode.openRecursively()",40],["function! s:TreeDirNode.addChild(treenode, inOrder)",40],["let newRoot = s:TreeDirNode.New(path)",52],["function! s:TreeDirNode.getChildCount()",40],["function! s:TreeDirNode.AbsoluteTreeRoot()",40],["function! s:TreeDirNode.createChild(path, inOrder)",40],["function! s:TreeDirNode.closeChildren()",40],["function! s:TreeDirNode.getChildByIndex(indx, visible)",40]],"useCount":2832},{"word":"TreeFileNode","context":[["function! s:TreeFileNode.findNode(path)",34],["let s:TreeFileNode = {}",34],["function! s:TreeFileNode.delete()",34],["let currentNode = s:TreeFileNode.GetSelected()",168],["let treenode = s:TreeFileNode.GetSelected()",132],["function! s:TreeFileNode.isVisible()",34],["let curNode = s:TreeFileNode.GetSelected()",49],["function! s:TreeFileNode.cacheParent()",34],["function! s:TreeFileNode.refresh()",34],["function! s:TreeFileNode.copy(dest)",34]],"useCount":2388},{"word":"Type","context":[["hi link StorageClass\tType",98],["hi Type ctermfg=NONE ctermbg=NONE cterm=NONE guifg=NONE guibg=NONE gui=NONE",110],["hi link Structure       Type",112],["hi link Typedef         Type",115],["hi link StorageClass    Type",117],["hi Type            guifg=#66D9EF               gui=none",151],["hi Type            ctermfg=81                cterm=none",161],["call <SID>X(\"Type\", s:blue, \"\", \"none\")",178],["hi def link plugUpdate  Type",90],["call <sid>hi(\"Type\",         s:gui09, \"\", s:cterm09, \"\", \"none\")",181]],"useCount":6718},{"word":"U","context":[["nnoremap <buffer> <silent> o     :<C-U>exe <SID>GF(\"split\")<CR>",77],["echo \"Press 'L' on each line to load plugin, or 'U' to update\"",89],["xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>",89],["nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>",89],["nnoremap <buffer> <silent> q    :<C-U>bdelete<CR>",88],["\\ '%snoremap <silent> %s %s:<C-U>call <SID>lod_map(%s, %s, \"%s\")<CR>',",82],["nnoremap <buffer> <silent> <CR>    :<C-U>exe <SID>GF(\"edit\")<CR>",77],["nnoremap <buffer> <silent> O     :<C-U>exe <SID>GF(\"tabedit\")<CR>",77],["nnoremap <buffer> <silent> ~    :<C-U>exe <SID>BlameJump('~'.v:count1)<CR>",76],["nnoremap <buffer> <silent> i :<C-U>let b:fugitive_display_format -= v:count1<Bar>exe <SID>BufReadObject()<CR>",76]],"useCount":6213},{"word":"URL","context":[["\" URL:",108],["let cmd = substitute(cmd, '%URL%', '\\=shellescape(a:url)', 'g')",51],["\"\t\t<URL:http://code.google.com/p/lh-vim/>",54],["\" URL:\t\thttp://dwsharp.users.sourceforge.net/vim/ftplugin",64],["\" URL:      http://ethanschoonover.com/solarized",65],["\" URL: http://peterodding.com/code/vim/misc/",66],["\" URL:\t\t\thttp://vim-ruby.rubyforge.org",72],["\" URL: http://physics.muni.cz/~yeti/vim/gtk-syntax.tar.gz",101],["\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby",101],["\" URL:         http://github.com/kchmck/vim-coffee-script",106]],"useCount":2249},{"word":"Underlined","context":[["exe \"hi! Underlined\"     .s:fmt_none   .s:fg_violet .s:bg_none",64],["\"Underlined",49],["\"hi Underlined -- no settings --",62],["\"       *Underlined      text that stands out, HTML links",68],["\"hi Underlined",72],["hi Underlined guibg=bg guifg=#99ccff gui=underline ctermbg=bg ctermfg=9 cterm=underline",93],["hi Underlined      ctermfg=244               cterm=underline",164],["hi Underlined      guifg=#808080               gui=underline",174],["hi Underlined ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline",200],["call <sid>hi(\"Underlined\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276]],"useCount":2346},{"word":"Use","context":[["\" Use \"extend\" here to have preprocessor lines not terminate halfway a",52],["\" Use neocomplete.",59],["\" Use spaces instead of tabs",65],["\" Arguments are not supplied. Use the current buffer name",66],["\" Use builtin function.",81],["\" Use smartcase.",89],["\" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore",122],["\" Use the colour",211],["\" Use Unix as the standard file type",69],["\" Use the grey",211]],"useCount":3112},{"word":"User","context":[["autocmd User Fugitive if s:buffer().commit() =~# '^0\\=$' |",77],["silent doautocmd User BufLeaveRails",49],["silent doautocmd User BufEnterRails",49],["autocmd User BufEnterRails call s:resetomnicomplete()",49],["autocmd User Fugitive",62],["\" User must set this variable in .vimrc",177],["autocmd User Fugitive call s:define_commands()",72],["au LatexSuite User LatexSuiteFileType",63],["\" Highlight User Labels",101],["\" Colors for the User Interface.",112]],"useCount":2375},{"word":"V","context":[["V",1327],["V\\u000a",547],["V=",198],["let s:V = a:V",197],["let s:V = a:V",197],["function! s:_vital_loaded(V) abort",170],["normal! V",160],["V(",159],["V)",158],["V,",153]],"useCount":7614},{"word":"VIM","context":[["limit = VIM::evaluate('get(g:, \"plug_timeout\", 60)')",90],["VIM::command('normal! 2G')",90],["tmp = VIM::evaluate('tempname()')",90],["VIM::command('noautocmd normal! a')",89],["iswin = VIM::evaluate('s:is_win').to_i == 1",90],["maxy  = VIM::evaluate('winheight(\".\")').to_i",90],["all   = VIM::evaluate('s:update.todo')",88],["} if VIM::evaluate('s:mac_gui') == 1",89],["tries = VIM::evaluate('get(g:, \"plug_retries\", 2)') + 1",89],["base  = VIM::evaluate('g:plug_home')",90]],"useCount":3702},{"word":"Version","context":[["\"   VIM Version:  7.0+",59],["\" Version:      1.1",67],["\" Version:",69],["\" Version:      2.0",76],["\" Version: 1.0.0",69],["\" Version:      0.1",83],["\" Version:      1.2",67],["\" Version: 1.0",100],["\" Version: 0.1",101],["\" Version:      1.0",106]],"useCount":3062},{"word":"VertSplit","context":[["CSAHi VertSplit term=reverse cterm=reverse ctermbg=bg ctermfg=fg gui=reverse guibg=bg guifg=fg",112],["call <SID>X(\"VertSplit\", s:window, s:window, \"none\")",155],["hi VertSplit       guifg=#808080 guibg=#080808 gui=bold",164],["hi VertSplit       ctermfg=244 ctermbg=232   cterm=bold",166],["hi VertSplit\tcterm=reverse",68],["hi VertSplit ctermfg=241 ctermbg=241 cterm=NONE guifg=#64645e guibg=#64645e gui=NONE",56],["exe \"hi! VertSplit\"  .s:fmt_none   .s:fg_base00 .s:bg_base00",46],["exe \"hi! VertSplit\"  .s:fmt_revbb  .s:fg_base00 .s:bg_base02",46],["call <sid>hi(\"VertSplit\",     s:gui02, s:gui02, s:cterm02, s:cterm02, \"none\")",247],["hi VertSplit      guibg=#cc4455  guifg=white    gui=none ctermbg=4  ctermfg=11",91]],"useCount":2236},{"word":"Vim","context":[["\" Vim filetype plugin",286],["catch /^Vim\\%((\\a\\+)\\)\\=:E117/",136],["\" Vim syntax file",5155],["\" Vim color file",1626],["\" Vim indent file",746],["\" Vim filetype plugin file",638],["if exists(\":CompilerSet\") != 2\t\t\" older Vim always used :setlocal",190],["\" Vim compiler file",241],["\" Vim Highlighting",390],["\" Vim editor colors",305]],"useCount":19004},{"word":"Visual","context":[["call <sid>hi(\"Visual\",        \"\", s:gui02, \"\", s:cterm02, \"\")",269],["call <SID>X(\"Visual\", \"\", s:selection, \"\")",180],["hi Visual                      ctermbg=235",157],["hi Visual                        guibg=#403D3D",153],["\" Visual mode pressing * or # searches for the current selection",63],["\" Visual",65],["hi Visual                      ctermbg=238",69],["\" Visual mapping:",83],["hi Visual      guibg=#557799  guifg=white    gui=none ctermbg=9 ctermfg=15",93],["\" Visual mode",114]],"useCount":4102},{"word":"VisualNOS","context":[["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["hi VisualNOS       guifg=#000000 guibg=#71d3b4 gui=none",42],["exe \"hi! VisualNOS\"      .s:fmt_stnd   .s:fg_none   .s:bg_base02 .s:fmt_revbb",47],["hi VisualNOS\tcterm=bold,underline",48],["hi VisualNOS       guifg=#333333 guibg=#f18c96 gui=bold,underline",49],["\"hi VisualNOS -- no settings --",75],["\"hi VisualNOS",121],["hi VisualNOS                     guibg=#403D3D",156],["hi VisualNOS                   ctermbg=238",170],["call <sid>hi(\"VisualNOS\",     s:gui08, \"\", s:cterm08, \"\", \"\")",269]],"useCount":2008},{"word":"W","context":[["call search('^# .*:$','W')",220],["call search('\\*/', 'W')",72],["\" :W sudo saves the file",58],["map <C-h> <C-W>h",60],["map <C-l> <C-W>l",60],["let pos = search(a:pattern,'W'.a:flags)",61],["map <C-j> <C-W>j",62],["map <C-k> <C-W>k",63],["if search('^diff .* b/\\M'.escape(path,'\\').'$','W')",66],["if !search('^# .*:\\n# .*\"git add .*\\n#\\n\\|^# Untracked files:$','W')",110]],"useCount":5118},{"word":"WarningMsg","context":[["echohl WarningMsg |",171],["call <SID>X(\"WarningMsg\", s:red, \"\", \"\")",180],["hi WarningMsg      guifg=#FFFFFF guibg=#333333 gui=bold",158],["hi WarningMsg      ctermfg=231 ctermbg=238   cterm=bold",155],["CSAHi WarningMsg term=NONE cterm=NONE ctermbg=bg ctermfg=196 gui=NONE guibg=bg guifg=#ff0000",96],["hi link  WarningMsg  ErrorMsg",91],["hi WarningMsg\tguifg=salmon",82],["echohl WarningMsg | echomsg s:MsgInsNotAvail  | echohl None",78],["call <sid>hi(\"WarningMsg\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276],["echohl WarningMsg",2001]],"useCount":5559},{"word":"We","context":[["\" We try to ensure backwards compatibility with Syntastic if the user has",50],["\" We also check to see if user has set solarized (force use of the",72],["\" method.  We should verify by checking for an argument, but that's",49],["\" FIXME: Escaping is incomplete. We could use shellescape with eval,",89],["\" We can't grab the namespace so only run tasks at the start of the line",49],["\" We'll cheat and peak at this in a bit",49],["\" ends with the /;\"\\t string. We add 4 at the end to skip the characters",34],["\" buffer. We don't want to refresh the taglist window if we are entering the",34],["\" We don't want to use Ctrl-p as the mapping because",50],["\" Here we define the color map for ctrlp.  We check for the g:loaded_ctrlp",55]],"useCount":2083},{"word":"WildMenu","context":[["hi WildMenu        guifg=#66D9EF guibg=#000000",162],["\"hi WildMenu",155],["CSAHi WildMenu term=NONE cterm=NONE ctermbg=226 ctermfg=16 gui=NONE guibg=#ffff00 guifg=#000000",144],["\"hi WildMenu -- no settings --",71],["call <sid>hi(\"WildMenu\",      s:gui08, \"\", s:cterm08, \"\", \"\")",272],["\"WildMenu",46],["exe \"hi! WildMenu\"       .s:fmt_none   .s:fg_base2  .s:bg_base02 .s:fmt_revbb",48],["CSAHi WildMenu term=NONE cterm=NONE ctermbg=76 ctermfg=16 gui=NONE guibg=#ffff00 guifg=#000000",48],["hi WildMenu\tctermfg=0 ctermbg=3",62],["hi WildMenu        ctermfg=81  ctermbg=16",172]],"useCount":2040},{"word":"X","context":[["call <SID>X(\"rubyLocalVariableOrMethod\", s:orange, \"\", \"\")",189],["call <SID>X(\"Normal\", s:foreground, s:background, \"\")",191],["call <SID>X(\"Constant\", s:orange, \"\", \"\")",191],["delf <SID>X",262],["fun <SID>X(group, fg, bg, attr)",254],["call <SID>X(\"Comment\", s:comment, \"\", \"\")",195],["call <SID>X(\"PMenuSel\", s:foreground, s:selection, \"reverse\")",194],["call <SID>X(\"Title\", s:comment, \"\", \"\")",194],["call <SID>X(\"PMenu\", s:foreground, s:selection, \"none\")",194],["call <SID>X(\"Directory\", s:blue, \"\", \"\")",192]],"useCount":37649},{"word":"Xpath","context":[["Xpath 1024\t\t\t\t\" X: 0",66],["Xpath 1048576\t\t\t\t\" X: 0",59],["Xpath 256\t\t\t\t\" X: 256",57],["Xpath 65536\t\t\t\t\" X: 65536",54],["Xpath 16\t\t\t\t\" X: 0",51],["Xpath 32768\t\t\t\t\" X: 0",51],["Xpath 536870912\t\t\t\t\" X: 0",50],["Xpath 1\t\t\t\t\t\" X: 1",97],["Xpath 4\t\t\t\t\t\" X: 4",49],["Xpath 16384\t\t\t\t\" X: 16384",48]],"useCount":3826},{"word":"You","context":[["\"   in your ~/.vimrc file to disable particular options. You can also write:",38],["\" search will be displayed in the current window.  You can use CTRL-T to",37],["\"   You can cycle forward and backward with the <Tab> and <S-Tab> keys",33],["\\ . '%+ECannot %.%#: You have unstaged changes.,'",33],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["echoerr \"NERDTree: this plugin requires vim >= 7. DOWNLOAD IT! You'll thank me later!\"",47],["\" * You can now set a darker background for bright environments. To activate, use:",48],["\" You can use the default (don't set any parameters), or you can",53],["\" Return to last edit position when opening files (You want this!)",65]],"useCount":3135},{"word":"Z","context":[["elseif cmd =~# '^[A-Z]'",53],["\" This is merely a convention; note also the use of [A-Z], restricting it to",39],["\\ '%Z%p^,'.",93],["\" Z-Shell script",59],["\\ '%Z%p^,' .",39],["\\ '%-Z%p^,'.",47],["let class = tolower(s:gsub(class,'[^A-Z]',''))",46],["let self.drive = substitute(a:fullpath, '\\(^[a-zA-Z]:\\).*', '\\1', '')",45],["\\%-Z%p^,",40],["\"syn match     rustCapsIdent    display \"[A-Z]\\w\\(\\w\\)*\"",39]],"useCount":2864},{"word":"_","context":[["let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)",131],["let ttype = s:tlist_{ftype}_{i}_name",135],["let tag_line = s:tlist_{a:fidx}_{a:tidx}_tag",137],["return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '<SNR>\\d\\+_'),''))",164],["let _ = []",214],["return _",225],["wincmd _ | wincmd |",521],["let stripped = substitute( a:result, '\\_.*-\\s*'.\"[\\<C-J>]\", '', '' )",117],["setlocal spellcapcheck=[.?!]\\\\_[\\\\])'\\\"\\\t\\ ]\\\\+",858],["setlocal iskeyword=@,48-57,_,192-255",833]],"useCount":21334},{"word":"a","context":[["if a:0 == 0",1381],["elseif a:n == 2",669],["if a:0 > 0",1510],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["if a:0",1556],["if a:n == 0",1986],["a(g185",2865],["return a:color",1181],["a(g198",737],["elseif a:n == 1",659]],"useCount":406881},{"word":"abort","context":[["function! s:_SID() abort",278],["function! s:update_impl(pull, force, args) abort",89],["function! s:function(name) abort",91],["function! s:shellesc(arg) abort",92],["function! s:wcswidth(str) abort",93],["function! s:fnameescape(file) abort",117],["function! s:buffer_name() dict abort",124],["function! s:buffer_spec() dict abort",148],["function! s:_vital_loaded(V) abort",170],["function! s:_vital_depends() abort",171]],"useCount":23575},{"word":"above","context":[["\" Treat True and False specially, see the plugin referenced above",73],["\" highlight delims, see the plugin referenced above",73],["# Any exception except those above print stack trace",79],["\" Anon CVS:\t\tSee above site",96],["\" After either Option 1 or Option 2 above, put the following two lines in your",70],["\" See the homepage above for screenshots and details.",69],["\" Find a non-blank line above the current line.",184],["\" Find a non-empty line above the current line.",52],["\" Find line above 'lnum' that isn't empty, in a comment, or in a string.",60],["\" Find a non-blank, non-multi-line string line above the current line.",55]],"useCount":2136},{"word":"action","context":[["let res = s:findasymbol('action','\\1')",49],["if l:action == 'start'",104],["elif action == Action.DONE:",79],["def write(self, action, name, msg):",79],["if action == Action.ERROR:",79],["if lnum > self.maxy and action in set([Action.INSTALL, Action.UPDATE]):",76],["def write(self, action, name, lines):",69],["self.buf_q.put((action, name, msg))",69],["msg = ['{0} {1}{2}{3}'.format(action, name, ': ' if first else '', first)]",76],["action, name, msg = buf_q.get(True, 0.25)",69]],"useCount":2367},{"word":"add","context":[["call add(args, arg)",105],["call add(s:tmp, ['ID'])",226],["call add(res, m)",151],["call add(s:update.errors, name)",150],["call add(dirs, spec.dir)",117],["if !search('^# .*:\\n# .*\"git add .*\\n#\\n\\|^# Untracked files:$','W')",110],["let add = \"\"",98],["call add(todo, f)",90],["call add(root.child, deepcopy(current))",94],["call add(toReturn, i)",94]],"useCount":24080},{"word":"after","context":[["call s:lod([name], ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",89],["call s:lod([name], ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",89],["execute 'set rtp-='.s:escrtp(after)",89],["let after = globpath(rtp, 'after')",89],["call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",166],["if isdirectory(after)",90],["call s:source(s:rtp(plug), 'ftdetect/**/*.vim', 'after/ftdetect/**/*.vim')",89],["call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",166],["after",403],["let after = globpath(rtp, 'after')",89]],"useCount":7948},{"word":"airline","context":[["let g:airline#extensions#tabline#enabled = 1",252],["Plug 'vim-airline/vim-airline-themes'",172],["Plugin 'bling/vim-airline'",93],["Plug 'vim-airline/vim-airline-themes'",172],["call airline#update_statusline()",120],["call airline#init#bootstrap()",75],["\\ g:airline#themes#solarized#palette.normal.airline_warning",86],["Plug 'bling/vim-airline'",113],["Plug 'vim-airline/vim-airline'",175],["Plug 'vim-airline/vim-airline'",175]],"useCount":10227},{"word":"all","context":[["\" This contains the defaults settings for all database types",167],["\\ 'all':     todo,",88],["let total = len(s:update.all)",88],["\" First remove all existing highlighting.",90],["take1 = proc { mtx.synchronize { running && all.shift } }",90],["echom \"File is not encrypted, all GPG functions disabled!\"",93],["set ei=all",155],["let all= 1",156],["set eventignore=all",204],["\" For version 5.x: Clear all syntax items",1596]],"useCount":15089},{"word":"already","context":[["\" For version 5.7 and earlier: only when not done already",1587],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["\" quit when a syntax file was already loaded",373],["\" Quit when a (custom) syntax file was already loaded",212],["\" Quit when a syntax file was already loaded",211],["\" Quit when menu translations have already been done.",185],["\" Only include a command terminator if one has not already",172],["echo 'vim-plug is already up-to-date'",82],["\" First check whether the file already exists",66],["\" For version 6.x: Quit when a syntax file was already loaded.",61]],"useCount":7440},{"word":"also","context":[["\" also accept <% for {, %> for }, <: for [ and :> for ] (C99)",54],["\\'\" existing colorscheme commands). See also \":help solarized\"',",49],["\" :make expands '%' and '#' wildcards, so they must also be escaped",87],["\" ARGS... are either (see also |tcomment#Comment()|):",78],["\" See also Steffen Siering's github repository:",73],["\" We also check to see if user has set solarized (force use of the",72],["\"        Function        function name (also: methods for classes)",69],["\" need to use a special type of cString: cCommentString, which also ends on",68],["\" mode (detected with the script scope s:vmode variable). It also allows for",66],["\\ ' from your database.  Please also send this SQL to the'.",66]],"useCount":2880},{"word":"an","context":[["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["\" Only used when an item doesn't have highlighting yet",106],["\" Flag the first zero of an octal number as something special",113],["\" returns an approximate grey index for the given grey level",120],["\" returns an approximate color index for the given color level",120],["\" flag an octal number with wrong digits",140],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156],["\" Returns an approximate colour index for the given colour level",211],["\" Returns an approximate grey index for the given grey level",211],["\" Only when an item doesn't have highlighting yet",254]],"useCount":13030},{"word":"and","context":[["\" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore",122],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" Strings and constants",129],["\"integer number, or floating point number without a dot and with \"f\".",150],["\" by Wimer Hazenberg and its darker variant",157],["\" String and Character constants",176],["\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",223],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["\" For version 5.7 and earlier: only when not done already",1587],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588]],"useCount":47018},{"word":"any","context":[["\" Remove any old syntax stuff hanging around",205],["cc 1 \"jump to first error if there is any",100],["\" espace any single quotes in the SQL",88],["elseif getline('.') ==# '# Not currently on any branch.'",76],["\"       *Special         any special symbol",69],["\"       *Constant        any constant",69],["\"       *Statement       any statement",69],["\"       *Identifier      any variable name",69],["\"       *Comment         any comment",69],["\"        Keyword         any other keyword",69]],"useCount":6549},{"word":"app","context":[["let app = self.app()",88],["if rails#app().has('spec')",128],["\" color terminals (t_co=8, such as OS X Terminal.app) and should only be used",52],["let app = rails#app()",56],["let app = rails#app()",56],["let tests = map(filter(rails#app().test_suites(),'has_key(mapping,v:val)'),'get(mapping,v:val)')",63],["if rails#app().has_file(prefix.f.suffix)",83],["if rails#app().has('test')",84],["let app = self.app()",88],["let self = rails#app()",99]],"useCount":13496},{"word":"append","context":[["call append(\"$\", \"\\t(local to window)\")",621],["call append(1, '')",234],["call append(\"$\", \"\\t(local to buffer)\")",1019],["call append(\"$\", \"\\t(global or local to buffer)\")",199],["call append('$', '')",106],["call append(line('$'),",99],["call append('$', line)",93],["call append(0, ['', ''])",92],["$curbuf.append((lnum || 4) - 1 + offset, line.gsub(/\\e\\[./, '').chomp)",90],["call append(0, 'Checking plugins')",90]],"useCount":15059},{"word":"aqua","context":[["call <SID>X(\"scalaVar\", s:aqua, \"\", \"\")",63],["call <SID>X(\"clojureParen\", s:aqua, \"\", \"\")",70],["let s:aqua = \"8abeb7\"",53],["exe \"let s:bg_aqua       = ' \".s:vmode.\"bg=\".s:aqua      .\"'\"",38],["exe \"let s:fg_aqua       = ' \".s:vmode.\"fg=\".s:aqua      .\"'\"",38],["exe \"let s:sp_aqua       = ' guisp=\".s:aqua      .\"'\"",32],["let s:aqua = \"3e999f\"",32],["call <SID>X(\"ShowMarksHLm\", s:aqua, s:background, \"none\")",93],["call <SID>X(\"pythonRepeat\", s:aqua, \"\", \"\")",95],["call <SID>X(\"Operator\", s:aqua, \"\", \"none\")",174]],"useCount":2453},{"word":"are","context":[["\" All defaults are specified in the DB_getDefault function.",167],["\" There are two possibilities",211],["\" Make sure we are in our window",132],["\" there are two possibilities",121],["\" If there are no tags for this file, then no need to proceed further",101],["if 0\t\" disabled; These are in the Windows menu",93],["\"if we are running windows then slap a drive letter on the front",90],["\"return '' if no errors are cached for the buffer",81],["\"The corresponding options are set for the duration of the function call. They",81],["\"are set with :let, so dont escape spaces.",81]],"useCount":16205},{"word":"arg","context":[["for arg in a:000",100],["if arg == ''",96],["call add(args, arg)",105],["if a:arg =~ '^[A-Za-z0-9_/.-]\\+$'",108],["function! s:shellesc(arg)",112],["for arg in args",117],["let arg = a:arg",117],["let arg = a:arg",117],["return shellescape(a:arg)",125],["return a:arg",133]],"useCount":9770},{"word":"args","context":[["let args = a:args",146],["command -nargs=+ HiLink hi def link <args>",2291],["command -nargs=+ HiLink hi link <args>",2249],["command -nargs=* CompilerSet setlocal <args>",266],["let args = []",174],["function! s:source.gather_candidates(args, context) \"{{{",173],["return args",168],["self.args = args",158],["self.args = args",158],["let args = a:args",146]],"useCount":24806},{"word":"argument","context":[["\" command argument.",57],["throw 'Invalid argument type (expected: string or dictionary)'",89],["\" after the original directory.  If no argument is given, 'bundle' is used.",33],["\" Form the ctags argument depending on the sort type",34],["\" bufexists takes a numeric argument, so we must add 0 to it",33],["\" to convince Vim we are passing a numeric argument, if not",33],["\" Install installs the package by simple calling 'go install'. If any argument",32],["\" method.  We should verify by checking for an argument, but that's",49],["return s:err('Unable to determine plug home. Try calling plug#begin() with a path argument.')",89],["\" test files). Any other argument is appendend to the final `go test` command",33]],"useCount":2496},{"word":"arguments","context":[["\" Add the filetype specific arguments",35],["return s:error(\"Rabbrev: invalid arguments\")",147],["return s:err('Invalid number of arguments (1..2)')",89],["\\ 'Invalid arguments (or job table is full)'",80],["\" Sufficient arguments are not supplied",66],["return s:error(\"Incorrect number of arguments\")",51],["\" This isn't actually correct; a closure with no arguments can be `|| { }`.",39],["\" Exuberant ctags arguments to generate a tag list",36],["\" Initialize the ctags arguments and tag variable for the specified",34],["\" Repeated calls with the same arguments are ignored.",34]],"useCount":2352},{"word":"as","context":[["\" Mark the buffer as modifiable",74],["\" Mark the buffer as not modifiable",72],["\" Avoid recognizing most bitfields as labels",78],["\"       highlights deprecated declarations as Errors",74],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["\" cCppString: same as cString, but ends at end of line",120],["import threading as thr",79],["\" Message displayed in lower left, such as --INSERT--",89],["\" \"*/\", and sees a \"*\" at the start of the line as comment again.",102],["\" Flag the first zero of an octal number as something special",113]],"useCount":12395},{"word":"assert","context":[["call s:assert.equals(s:expand([['readonly', 'filename', 'custom', 'modified']]),",65],["let s:assert = themis#helper('assert')",186],["call s:assert.equals(",161],["call s:assert.equals(s:get_pos_char(), '1')",99],["call s:assert.equals(neobundle#parser#path(",81],["call s:assert.equals(s:get_pos_char(), '2')",67],["call s:assert.equals(s:expand([['readonly', 'filename'], ['custom'], ['modified']]),",65],["call s:assert.equals(neosnippet#parser#_get_completed_snippet({",60],["let s:assert = themis#helper('assert')",186],["call s:assert.equals(s:get_pos_char(), '3')",48]],"useCount":1974},{"word":"at","context":[["\"Maintainer:  Martin Grenfell <martin.grenfell at gmail dot com>",344],["\"Maintainer:  LCD 47 <lcd047 at gmail dot com>",278],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>",195],["\" cCppString: same as cString, but ends at end of line",120],["let my_time    = +self.repo().git_chomp('log','--max-count=1','--pretty=format:%at',self.commit())",75],["\"Maintainer:  Gregor Uhlenheuer <kongo2002 at gmail dot com>",106],["\" Find more themes at : https://github.com/daylerees/colour-schemes",91],["let their_time = +self.repo().git_chomp('log','--max-count=1','--pretty=format:%at',a:commit)",75],["\" \"*/\", and sees a \"*\" at the start of the line as comment again.",102]],"useCount":9342},{"word":"attr","context":[["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["if a:attr != \"\"",615],["let val = current.attr[attr]",75],["let val = current.attr[attr]",75],["let fn = current.attr.src",79],["let current.attr.height = height",79],["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276],["fun <SID>X(group, fg, bg, attr)",254],["let current.attr.width = width",79]],"useCount":4804},{"word":"au","context":[["au LatexSuite User LatexSuiteFileType",63],["au BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif",43],["au!",1287],["au TabLeave * let g:lasttab = tabpagenr()",39],["au WinLeave <buffer> q  \" automatically leave, if an option is chosen",36],["au VimEnter * RainbowParenthesesToggle",35],["au Syntax * RainbowParenthesesLoadRound",35],["au Syntax * RainbowParenthesesLoadSquare",35],["au Syntax * RainbowParenthesesLoadBraces",34],["au FileType mako vmap Si S\"i${ _(<esc>2f\"a) }<esc>",34]],"useCount":19486},{"word":"augroup","context":[["augroup fugitive_blame",77],["augroup END",6987],["augroup end",363],["augroup filetypedetect",250],["augroup syntastic",228],["augroup PlugLOD",180],["augroup! PlugLOD",90],["augroup fugitive",77],["augroup fugitive_files",77],["augroup fugitive_remove",77]],"useCount":11421},{"word":"auto","context":[["\" Manual overrides for 256-color terminals. Dark colors auto-map badly.",40],["\"When typing a string, your quotes auto complete. Move past the quote",66],["Plug 'jiangmiao/auto-pairs'",62],["syn keyword\tcStorageClass\tstatic register auto volatile extern const",54],["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'UpdateErrors' . (a:auto_invoked ? ' (auto)' : '') .",46],["\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal",44],["let values = [\"auto\"]",42],["\" Set to auto read when a file is changed from the outside",65],["\" Map auto complete of (, \", ', [",32],["silent! echo '\" Taglist session file. This file is auto-generated.'",33]],"useCount":1988},{"word":"autocmd","context":[["autocmd FileType python setlocal omnifunc=pythoncomplete#Complete",127],["autocmd!",4299],["autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags",134],["autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS",135],["autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags",136],["autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS",137],["if has('autocmd')",161],["if has(\"autocmd\")",377],["autocmd BufReadPost *",171],["autocmd! * <buffer>",113]],"useCount":15829},{"word":"autoload","context":[["\"     subdirectory (e.g. autoload/togglebg.vim goes into your .vim/autoload",45],["\"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\",75],["\\ 'autoload' : {",74],["\" Install in ~/.vim/autoload (or ~\\vimfiles\\autoload).",67],["\" Install in ~/.vim/autoload (or ~\\vimfiles\\autoload).",67],["\" Vimwiki autoload plugin file",61],["\\ 'autoload': {",55],["\\'a': 'autoload',",51],["\" autoload/rails.vim",49],["\" Download plug.vim and put it in ~/.vim/autoload",90]],"useCount":2090},{"word":"available","context":[["\" Fall back to using git ls-files if Ag is not available",47],["\" function and more. If you have already installed Solarized, this is available",47],["\\'\" The following items are available options, but do not need to be',",49],["call syntastic#log#warn('checkers ' . join(a:checker_names, ', ') . ' are not available')",60],["call syntastic#log#warn('checker ' . a:checker_names[0] . ' is not available')",60],["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: Checker ' . cname . ' is not available')",46],["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: no checkers available for ' . &filetype)",46],["\" Add the tag scope, if it is available and is configured. Tag",64],["echo \"currently no prototypes available\"",69],["echo 'Feature not yet available'",250]],"useCount":2749},{"word":"b","context":[["if exists(\"b:current_syntax\")",2491],["setlocal complete=.,w,b,u,t,i",871],["if exists(\"b:did_ftplugin\")",866],["unlet! b:current_syntax",604],["setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-",500],["elseif exists(\"b:current_syntax\")",2724],["if exists(\"b:did_indent\")",937],["let b:did_indent = 1",1008],["unlet b:current_syntax",1104],["let b:did_ftplugin = 1",1056]],"useCount":84429},{"word":"back","context":[["let s:back        = s:base02",65],["let s:back        = \"NONE\"",66],["exe \"let s:sp_back      = ' guisp=\".s:back   .\"'\"",66],["exec back",66],["\" Go back to the original window",136],["exe \"let s:fg_back      = ' \".s:vmode.\"fg=\".s:back   .\"'\"",67],["if (s:back != \"NONE\")",68],["let s:back        = s:back",68],["let s:back        = s:back",68],["\"Move back and forth through previous and next buffers",67]],"useCount":3882},{"word":"background","context":[["call <SID>X(\"SignColumn\", \"\", s:background, \"none\")",120],["set background=dark",3909],["set background=light",755],["if &background == \"dark\"",725],["call <SID>X(\"Normal\", s:foreground, s:background, \"\")",191],["if &background == \"light\"",171],["call <SID>X(\"FoldColumn\", \"\", s:background, \"\")",169],["call <SID>X(\"Folded\", s:comment, s:background, \"\")",166],["call <SID>X(\"Todo\", s:comment, s:background, \"\")",155],["call <SID>X(\"Search\", s:background, s:yellow, \"\")",144]],"useCount":11454},{"word":"bang","context":[["\\ 'command! -nargs=* -range -bang %s call s:lod_cmd(%s, \"<bang>\", <line1>, <line2>, <q-args>, %s)',",86],["if !a:bang && !empty(list)",77],["\\ exe \"command! -buffer -bar -bang Gremove :execute s:Remove(<bang>0)\" |",77],["function! s:lod_cmd(cmd, bang, l1, l2, args, names)",83],["call s:process(a:bang, 'D')",84],["\\ 'command! -nargs=* -range -bang %s call s:lod_cmd(%s, \"<bang>\", <line1>, <line2>, <q-args>, %s)',",86],["execute printf('%s%s%s %s', (a:l1 == a:l2 ? '' : (a:l1.','.a:l2)), a:cmd, a:bang, a:args)",89],["if !empty(errors) && !a:bang",128],["if !a:bang",352],["if a:bang",628]],"useCount":10968},{"word":"bar","context":[["command! -nargs=0 -bar PlugStatus  call s:status()",89],["bar += type ? '=' : 'x' unless ing",90],["cnt = bar.length",90],["call s:progress_bar(2, bar, len(total))",90],["bar   = ''",90],["call s:bar()",176],["function! s:progress_bar(line, bar, total)",90],["call setline(a:line, '[' . s:lpad(a:bar, a:total) . ']')",90],["$curbuf[2] = '[' + bar.ljust(tot) + ']'",90],["command! -nargs=0 -bar PlugDiff    call s:diff()",89]],"useCount":7724},{"word":"base","context":[["if a:base =~# '^/' || a:base !~# ':'",77],["let base = s:sub(a:base,'^/','')",155],["let base = s:sub(a:base,'^/','')",155],["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152],["base  = VIM::evaluate('g:plug_home')",90],["function! s:progress_opt(base)",81],["return a:base && !s:is_win &&",81],["function! s:repo_dirglob(base) dict abort",77],["if a:base =~# '^/' || a:base !~# ':'",77],["if a:base !~# '^/'",77]],"useCount":6345},{"word":"be","context":[["\" `s:loaded` entry can be missing if PlugUpgraded",89],["\" The default methods for highlighting.  Can be overridden later",248],["\" Since the string will be enclosed in single quotes, we must first",88],["\" :make expands '%' and '#' wildcards, so they must also be escaped",87],["\" All of your Plugins must be added before the following line",81],["\"   'subtype' - all errors will be assigned the given subtype",75],["\" fugitive.vim - A Git wrapper so awesome, it should be illegal",75],["let b:c_minlines = 50\t\" #if 0 constructs can be long",71],["\" the following if-then. However, I find vim's background autodetection to be",70],["\" Construct execution string (four lines) which will be passed through filter",67]],"useCount":18568},{"word":"because","context":[["\" Last, because the & in && isn't a sigil",39],["\" Separated into a match and region because a region by itself is always greedy",37],["\" is impossible to fix because the only way to know if you are inside a",72],["\" TODO: this is needed because in recent versions of Vim lclose",54],["\" We don't want to use Ctrl-p as the mapping because",50],["\" Must be at the end, because of ctermbg=234 bug.",47],["\"This is here because it is possible for some error messages to",45],["\" Force dark background, because of a bug in VIM:  VIM sets background",44],["\"because of the file filters.",42],["\" other code they should stand out, because something tricky is",36]],"useCount":2066},{"word":"been","context":[["\" Extra checks for when no filetype has been detected now.  Mostly used for",30],["\" Note: the following keywords have already been defined:",40],["\" defaulted, dbext has not been used.",31],["\" Quit when menu translations have already been done.",185],["\" Check if a login_script has been specified",174],["\" been added",161],["echo 'vim-plug has been upgraded'",82],["\" If the buffer connection parameters have not been",31],["\\'\" this block of commands has been autogenerated by solarized.vim and',",49],["\" If no yank command has been supplied, assume it is",35]],"useCount":2051},{"word":"before","context":[["\"   'cwd' - change directory to the given path before running the checker",65],["before",458],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["\" All of your Plugins must be added before the following line",81],["syn match rubyRailsRakeMethod '^\\s*\\zs\\%(task\\|file\\|namespace\\|desc\\|before\\|after\\|on\\)\\>\\%(\\s*=\\)\\@!'",49],["\" Get the text before the filename under the cursor.",49],["\" [-- local settings (must come before aborting the script) --]",49],["\" This should be before cErrInParen to avoid problems with #define ({ xxx })",54],["\"   'env' - environment variables to set before running the checker",54],["\"   'preprocess' - a function to be applied to the error file before parsing errors",65]],"useCount":5634},{"word":"begin","context":[["return s:err('Unable to determine plug home. Try calling plug#begin() with a path argument.')",89],["call plug#begin()",97],["return s:err('Call plug#begin() first')",89],["function! plug#begin(...)",90],["\\ 'Try to call plug#begin with a valid directory', g:plug_home))",89],["begin",444],["call vundle#begin()",206],["return s:err('plug#begin was not called')",178],["call plug#begin('~/.config/nvim/plugged')",142],["call plug#begin('~/.vim/plugged')",130]],"useCount":3808},{"word":"below","context":[["\" Make sure the continuation lines below do not cause problems in",115],["\" Solarized menu option. See the \"Menus\" section below for the function itself.",49],["let &splitbelow=below",40],["\" Reloads the current root. All nodes below this will be lost and the root dir",44],["let below=0",46],["\" use internal formatting to avoid conficts when using == below",57],["if mode == 'below'",60],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["below 1new",151],["\" used again and the autocommand below will be dropped.",66]],"useCount":2801},{"word":"bg","context":[["CSAHi vimHiTermcap term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["if a:bg != \"\"",273],["CSAHi vimHiTermcap term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimGroupList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimUserCmd term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimIsCommand term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimUserCmd term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiKeyList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSubstPat term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSubstPat term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":87775},{"word":"bg_none","context":[["exe \"hi! pandocCitationRef\"              .s:fg_magenta.s:bg_none   .s:fmt_none",134],["exe \"hi! pandocStrongEmphasisEmphasisHeading\".s:fg_phead .s:bg_none.s:fmt_bldi",69],["exe \"hi! pandocSubscript\"                .s:fg_violet .s:bg_none  .s:fmt_none",67],["exe \"hi! hsStructure\"        . s:fg_cyan   .s:bg_none   .s:fmt_none",67],["exe \"hi! pandocLinkTitle\"                .s:fg_base00 .s:bg_none   .s:fmt_undi",67],["exe \"hi! pandocSuperscriptTable\"             .s:fg_ptable.s:bg_none  .s:fmt_none",67],["exe \"hi! pandocCitation\"                 .s:fg_magenta.s:bg_none   .s:fmt_none",67],["exe \"hi! pandocVerbatimInline\"           .s:fg_yellow .s:bg_none  .s:fmt_none",67],["exe \"hi! pandocMetadata\"                 .s:fg_blue   .s:bg_none   .s:fmt_none",68],["exe \"hi! pandocStrongEmphasisEmphasisDefinition\" .s:fg_pdef.s:bg_none.s:fmt_bldi",69]],"useCount":12488},{"word":"bin","context":[["\\   ['#!/bin/sh',  '# Generated by vim-plug', '# '.strftime(\"%c\"), '',",36],["syn keyword pythonBuiltinFunc\tbin bool bytearray bytes",29],["\"#!/usr/bin/perl -f -bar",29],["\"{'exe': '/usr/bin/perl', 'args': ['-f', '-bar']}",29],["let dbext_bin = s:DB_fullPath2Bin(dbext#DB_getWType(\"bin\"))",152],["setlocal nrformats=bin,octal,hex",90],["set shell=/bin/bash",70],["\"        cd Perl_Root_dir\\bin",60],["set shell=/bin/sh",46],["set grepprg=/bin/grep\\ -nH",33]],"useCount":2036},{"word":"black","context":[["hi WildMenu\t\t\tguifg=yellow guibg=black ctermfg=yellow ctermbg=black cterm=none term=none",25],["hi StatusLine     guibg=#ffeecc  guifg=black     ctermbg=14 ctermfg=0",91],["\" base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26",72],["\"  background color: black",53],["\" Delete the contents of the buffer to the black-hole register",46],["hi StatusLine\tguibg=#c2bfa5 guifg=black gui=none",32],["hi WildMenu\t\t\tguifg=yellow guibg=black ctermfg=yellow ctermbg=black cterm=none term=none",25],["\"TODO no nice greenish in console, 65 is closest. use full black instead,",23],["call s:h(\"Normal\", { \"fg\": s:white, \"bg\": s:black }) \" normal text",21],["syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow",21]],"useCount":2129},{"word":"blob","context":[["\" Empty blob",76],["call s:ReplaceCmd(s:repo().git_command('cat-file','blob',s:buffer().sha1()))",76],["elseif buffer.type('blob')",77],["call s:throw('file or blob required')",77],["let b:fugitive_type = 'blob'",77],["elseif b:fugitive_type ==# 'blob'",77],["if b:fugitive_type !~# '^\\%(tag\\|commit\\|tree\\|blob\\)$'",77],["if !exists('b:fugitive_display_format') && b:fugitive_type != 'blob'",76],["if b:fugitive_type !=# 'blob'",140],["let type = 'blob'",223]],"useCount":2513},{"word":"block","context":[["call emmet#util#setContent(block, content)",113],["let content = emmet#util#getContent(block)",106],["if emmet#util#regionIsValid(block)",97],["echo \"Press 'X' on each block to revert the update\"",89],["call emmet#util#selectRegion(block)",87],["let block = [pos1, [pos1[0], pos1[1] + len(content) - 1]]",81],["call setpos('.', [0, block[0][0]-1, block[0][1], 0])",72],["call setpos('.', [0, block[0][0], block[0][1], 0])",128],["call setpos('.', [0, block[0][0], block[0][1], 0])",128],["let block = [pos1, pos2]",206]],"useCount":5242},{"word":"blue","context":[["call <SID>X(\"Directory\", s:blue, \"\", \"\")",192],["call <SID>X(\"pythonFunction\", s:blue, \"\", \"\")",170],["call <SID>X(\"Include\", s:blue, \"\", \"\")",181],["call <SID>X(\"rubyInclude\", s:blue, \"\", \"\")",180],["call <SID>X(\"Function\", s:blue, \"\", \"\")",177],["call <SID>X(\"clojureRepeat\", s:blue, \"\", \"\")",140],["call <SID>X(\"goDeclType\", s:blue, \"\", \"\")",106],["call <SID>X(\"cucumberGivenAnd\", s:blue, \"\", \"\")",97],["call <SID>X(\"rubyAttribute\", s:blue, \"\", \"\")",180],["call <SID>X(\"Type\", s:blue, \"\", \"none\")",178]],"useCount":6296},{"word":"bold","context":[["call <sid>hi(\"Bold\",          \"\", \"\", \"\", \"\", \"bold\")",276],["CSAHi TabLineSel term=bold cterm=bold ctermbg=bg ctermfg=fg gui=bold guibg=bg guifg=fg",248],["CSAHi TabLineSel term=bold cterm=bold ctermbg=bg ctermfg=fg gui=bold guibg=bg guifg=fg",248],["CSAHi TabLineSel term=bold cterm=bold ctermbg=bg ctermfg=fg gui=bold guibg=bg guifg=fg",248],["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["hi VertSplit       ctermfg=244 ctermbg=232   cterm=bold",166],["hi Debug           ctermfg=225               cterm=bold",166],["hi Exception       ctermfg=118               cterm=bold",165]],"useCount":36972},{"word":"bookmark","context":[["let @h=@h.\"\\\" \". g:NERDTreeMapDeleteBookmark .\": delete bookmark\\n\"",44],["\"name: the name of a bookmark or a directory",42],["\" completion function for the bookmark commands",45],["\" put the cursor on the given bookmark and, if its a file, open it",44],["let @h=@h.\"\\\" \". g:NERDTreeMapActivateNode .\": open bookmark\\n\"",46],["\"strip off any bookmark flags",46],["\" Create a new bookmark object with the given name and path object",66],["\" Make the node for this bookmark the new tree root",70],["let bookmark = s:Bookmark.BookmarkFor(a:name)",97],["call bookmark.delete()",108]],"useCount":2457},{"word":"border","context":[["return border == 0 ? [[], copy(a:xs)] : [a:xs[: border - 1], a:xs[border :]]",43],["let border = len(a:xs)",44],["\\            'bdci:c': 'border-corner-image:continue;',",26],["\\            'bdl': 'border-left:|;',",26],["\\            'bdts:n': 'border-top-style:none;',",26],["\\            'bdt+': 'border-top:1px solid #000;',",26],["\\            'bdtli:n': 'border-top-left-image:none;',",26],["return border == 0 ? [[], copy(a:xs)] : [a:xs[: border - 1], a:xs[border :]]",43],["let border = i",44],["return border == 0 ? [[], copy(a:xs)] : [a:xs[: border - 1], a:xs[border :]]",43]],"useCount":2994},{"word":"bottom","context":[["\"   -bottomline: the bottom line to be checked",46],["\" E380: At bottom of quickfix stack",49],["\"   -firstLine/lastLine: the top and bottom lines to comment",69],["\"   -bottom: the bottom line number of the block",46],["let bottom = currentLine",46],["\"have we reached the bottom of the tree?",40],["\"   -bottomline: the line num of the bottom line in the sexy comment",38],["syntax keyword javaScriptCssStyles      contained bottom height left position right top width zIndex",35],["\"comment the bottom line",46],["\"   -bottom: the bottom line number of the block",46]],"useCount":2503},{"word":"branch","context":[["let branch = result[0]",90],["let s:base_spec = { 'branch': 'master', 'frozen': 0 }",89],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["\\ branch, a:spec.branch)",79],["elseif a:spec.branch !=# branch",79],["elseif getline('.') ==# '# Not currently on any branch.'",76],["\" Check branch",79],["\\ branch, a:spec.branch)",79],["elseif a:spec.branch !=# branch",79],["if branch ==# ''",135]],"useCount":4526},{"word":"break","context":[["\" similar to Haskell's Data.List.break",44],["syn keyword pythonStatement\tbreak continue del",35],["syn keyword     goStatement         defer go goto return break continue fallthrough",37],["break unless running",89],["break\t\t\" discard error for $VIMNOERRTHROW",125],["break",11350],["\" Set 'formatoptions' to break comment lines but not other lines,",84],["syn keyword\tcStatement\tgoto break return continue asm",47],["\" Treat long lines as break lines (useful when moving around in them)",49],["\\\"\\<cr>case \".g:rs.\"...\".g:re.\":\\<cr>break;\".",72]],"useCount":14003},{"word":"buf","context":[["line = buf.rstrip('\\r\\n')",79],["let @@ = buf",100],["\"refresh and redraw all the error info for this buf when saving or reading",81],["let buf = bufnr('%')",70],["buf = os.read(fread, 100000).decode('utf-8', 'replace')",61],["\"display the cached errors for this buf in the location list",59],["let path = buf[type]",54],["let buf = bufnr('')",53],["let buf = @@",51],["buf = VIM::Buffer.current",48]],"useCount":3913},{"word":"buffer","context":[["call append(\"$\", \"\\t(local to buffer)\")",1019],["let cmd += [s:buffer().commit()]",151],["nnoremap <silent><script><buffer>",152],["curbuf = vim.current.buffer",158],["\" Don't load another plugin for this buffer",178],["call append(\"$\", \"\\t(global or local to buffer)\")",199],["\" Only do this when not done yet for this buffer",496],["let buffer = rails#buffer()",145],["let buffer = rails#buffer()",145],["\" buffer.",142]],"useCount":57600},{"word":"buffers","context":[["\" Remember info about open buffers on close",46],["let buffers = []",50],["\" => Moving around, tabs, windows and buffers",54],["\" Close all the buffers",55],["let buffers = syntastic#util#unique(map(loclist, 'v:val[\"bufnr\"]') + (owner ? [owner] : []))",55],["\" Specify the behavior when switching between buffers",56],["return buffers",65],["\"Move back and forth through previous and next buffers",67],["\" Skip running in special buffers",67],["\" Skip buffers with 'buftype' set to nofile, nowrite, quickfix or help",67]],"useCount":3678},{"word":"bufhidden","context":[["setlocal bufhidden=delete",677],["setlocal bufhidden=hide",293],["if &bufhidden ==# ''",201],["setlocal bufhidden=wipe",155],["setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap cursorline modifiable",83],["setlocal bufhidden=wipe filetype=gitcommit",63],["setlocal buftype=nofile bufhidden=delete",46],["silent! setlocal bufhidden=delete",43],["setl bufhidden=hide",37],["setlocal bufhidden=",868]],"useCount":2833},{"word":"bufname","context":[["let fidx = s:Tlist_Get_File_Index(fnamemodify(bufname('%'), ':p'))",93],["let bufname = bufname(self['#'])",153],["let bufname = bufname(self['#'])",153],["if bufname('%') != '-MiniBufExplorer-'",113],["let filename = fnamemodify(bufname('%'), ':p')",95],["return s:shellslash(bufname == '' ? '' : fnamemodify(bufname,':p'))",78],["return s:shellslash(bufname == '' ? '' : fnamemodify(bufname,':p'))",78],["let entry.filename = s:repo().translate(':0:'.bufname(entry.bufnr))",76],["let entry.filename = s:repo().translate(bufname(entry.bufnr))",76],["if bufname(entry.bufnr) =~ ':'",76]],"useCount":5435},{"word":"bufnr","context":[["let cur = bufnr('%')",89],["let filtbuf= bufnr(\"%\")",100],["let originalBuffer = VCSCommandGetOriginalBuffer(bufnr('%'))",103],["if exists(\"s:netrwmarkfilelist_{bufnr('%')}\")",141],["for nr in range(1,bufnr('$'))",150],["unlet! entry.bufnr",154],["let curbufnr = bufnr(\"%\")",199],["let bufnr = bufnr('%')",233],["let bufnr = bufnr('%')",233],["let s:wipebuf = bufnr('%')",240]],"useCount":15460},{"word":"buftype","context":[["setlocal buftype=nofile",886],["setlocal buftype=",931],["setlocal buftype=nowrite",192],["if &buftype == 'quickfix'",136],["if &buftype != ''",98],["setlocal buftype=acwrite",84],["setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap cursorline modifiable",83],["set buftype=nofile",68],["setlocal buftype=nowrite nomodified filetype=git foldmarker=<<<<<<<,>>>>>>>",68],["\" Skip buffers with 'buftype' set to nofile, nowrite, quickfix or help",67]],"useCount":4109},{"word":"bufwinnr","context":[["let winnr = bufwinnr(s:title)",48],["exe bufwinnr(l:currentbuffernr) . \"wincmd w\"",59],["autocmd BufWinLeave * execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')",67],["let restore .= '|call setwinvar(bufwinnr('.bufnr.'),\"&wrap\",1)'",73],["let restore = 'call setwinvar(bufwinnr('.bufnr.'),\"&scrollbind\",0)'",73],["let restore .= '|call setwinvar(bufwinnr('.bufnr.'),\"&foldenable\",1)'",73],["let winnr = bufwinnr(b:fugitive_blamed_bufnr)",77],["let winnr = bufwinnr(s:plug_buf)",90],["let tagbarwinnr = bufwinnr('__Tagbar__')",209],["let winnum = bufwinnr(g:TagList_title)",393]],"useCount":3685},{"word":"bundle","context":[["call neobundle#config#add(bundle)",66],["\"     b. **or move manually into the pathogen bundle directory:**",66],["let type = neobundle#config#get_types(a:bundle.type)",73],["call neobundle#util#cd(a:bundle.path)",74],["if empty(bundle)",76],["for bundle in bundles",92],["let bundle = neobundle#parser#_init_bundle(",104],["return bundle",110],["set rtp+=~/.vim/bundle/vundle/",142],["set rtp+=~/.vim/bundle/Vundle.vim",157]],"useCount":6351},{"word":"bundles","context":[["func! vundle#installer#helptags(bundles) abort",42],["for bundle in bundles",92],["let bundle_dirs = map(copy(g:bundles), 'v:val.path()')",38],["let bundle_dirs = map(copy(a:bundles),'v:val.rtpath')",40],["if empty(bundles)",64],["let bundles = filter(neobundle#config#get_autoload_bundles(),",59],["call neobundle#config#source_bundles(bundles)",52],["if !empty(bundles)",47],["call vundle#config#require(bundles)",43],["let names = vundle#scripts#bundle_names(map(copy(bundles), 'v:val.name_spec'))",41]],"useCount":1990},{"word":"but","context":[["\" cCppBracket: same as cParen but ends at end-of-line; used in cDefine",68],["\" with ma.  It’s more useful in any case I can imagine, but it’s located way",66],["\" This is fast but code inside triple quoted strings screws it up. It",72],["\" the first two items don't have an impact, but better safe",73],["\" Set 'formatoptions' to break comment lines but not other lines,",84],["\"        but it won't work on Windows.",89],["\" Same, but without octal error (for comments)",94],["\" cCppString: same as cString, but ends at end of line",120],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241]],"useCount":5707},{"word":"by","context":[["\" Avoid matching foo::bar() in C++ by requiring that the next char is not ':'",80],["\"catch errors caused by wrong parenthesis and brackets",85],["\" Filetype off is required by vundle",75],["\" Override our defaults if these were set by an included ftplugin.",89],["\" returns the actual grey level represented by the grey index",120],["\" by Hamish Stuart Macpherson",156],["\" by Wimer Hazenberg and its darker variant",157],["\" :colorscheme works in terminals supported by base16-shell scripts",177],["\" Returns the actual grey level represented by the grey index",211],["\" NOTE: lines between '\" ___vital___' is generated by :Vitalize.",269]],"useCount":13645},{"word":"c","context":[["\\ 'filetype': 'c',",126],["call cursor(l, c)",165],["let c = col(\".\")",203],["\\ 'c' : 'class',",252],["return c",259],["if c == 0",126],["let c = getchar(0)",126],["let c = 0",119],["\\ 'class'     : 'c',",112],["let c += 1",110]],"useCount":33754},{"word":"cConstant","context":[["syn keyword cConstant FOPEN_MAX FILENAME_MAX L_tmpnam",56],["syn keyword cConstant SCHAR_MIN SINT_MIN SLONG_MIN SSHRT_MIN",56],["syn keyword cConstant SIG_DFL SIG_ERR SIG_IGN",56],["syn keyword cConstant CHAR_MIN INT_MIN LONG_MIN SHRT_MIN",56],["syn keyword cConstant SCHAR_MAX SINT_MAX SLONG_MAX SSHRT_MAX",56],["syn keyword cConstant LC_NUMERIC LC_TIME",56],["syn keyword cConstant FLT_MIN FLT_MAX FLT_MIN_EXP FLT_MAX_EXP",56],["syn keyword cConstant TMP_MAX stderr stdin stdout",56],["syn keyword cConstant LC_ALL LC_COLLATE LC_CTYPE LC_MONETARY",56],["syn keyword cConstant FLT_DIG FLT_MANT_DIG FLT_EPSILON",56]],"useCount":3213},{"word":"cache","context":[["if self.cache.needs(\"user_classes\")",48],["call self.cache.clear('user_classes')",76],["if self.cache.needs(\"user_assertions\")",48],["call self.cache.set(\"user_classes\",classes)",48],["if self.cache.has(\"named_routes\") && has_key(self.cache.get(\"named_routes\"),a:route)",48],["\" Cmd-Shift-P to clear the cache",52],["let s:cache = {}",66],["\" Create cache directory.",77],["\"detect and cache all syntax errors in this buffer",81],["\" ag is fast enough that CtrlP doesn't need to cache",110]],"useCount":5289},{"word":"cal","context":[["sil! cal ctrlp#statusline()",67],["cal s:BuildPrompt(0)",298],["cal s:PrtExit()",171],["cal s:unmarksigns()",155],["cal s:PrtClear()",140],["cal ctrlp#setlines()",84],["cal s:PrtSwitcher()",90],["cal <SID>RefreshDisplays()",100],["cal s:BuildPrompt(1)",354],["cal ctrlp#recordhist()",91]],"useCount":6427},{"word":"call","context":[["call plug#end()",607],["call s:nextToken()",625],["call fugitive#reload_status()",557],["call g:SyntasticRegistry.CreateAndRegisterChecker({",1621],["call neocomplete#util#set_default_dictionary(",1297],["call append(\"$\", \"\\t(local to buffer)\")",1019],["call append(\"$\", \"\\t(local to window)\")",621],["call s:renderView()",634],["call inputsave()",701],["call inputrestore()",698]],"useCount":325167},{"word":"callback","context":[["self.callback([msg])",79],["self.callback = cb if cb else (lambda msg: None)",79],["self.callback([line])",79],["self.callback(['Retrying ...'])",79],["\"\"\" Execute a cmd & poll for callback. Returns list of output.",79],["return self.callback == -1 && self.children == []",25],["callback = functools.partial(self.write, Action.UPDATE, self.name)",69],["callback = functools.partial(self.write, Action.INSTALL, self.name)",69],["com = Command(cmd, self.args['dir'], G_TIMEOUT, callback)",59],["com = Command(cmd, None, G_TIMEOUT, callback, clean(target))",59]],"useCount":2346},{"word":"called","context":[["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'SyntasticMake: called with options:', a:options)",46],["\"   'd'   called: find functions that function under cursor calls",39],["\" Note: this is a hack to prevent 'keywords' being highlighted as such when called as methods with an explicit receiver",39],["\" can no longer be called from BufWinLeave",54],["\"called.",67],["\"  Also called in the filetype plugin perl.vim",93],["return s:err('plug#begin was not called')",178],["\"   -forceNested: a flag indicating whether the called is requesting the comment",46],["\" in case called from outside the tree",43],["\" any git directory called //.git or //serverName/.git so let's avoid",40]],"useCount":2261},{"word":"can","context":[["\" A comment can contain cString, cCharacter and cNumber.",74],["\" with ma.  It’s more useful in any case I can imagine, but it’s located way",66],["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" pretty good and, at least with MacVim, I can leave this background value",70],["\"        Tag             you can use CTRL-] on this",70],["let b:c_minlines = 50\t\" #if 0 constructs can be long",71],["\"if we have no parent then we can have no siblings",72],["\" Once you've updated the list of plugin, you can run vundle update by issuing",72],["\"a:options can contain the following keys:",81],["\" `s:loaded` entry can be missing if PlugUpgraded",89]],"useCount":8203},{"word":"candidate","context":[["for candidate in a:candidates",442],["call unite#take_action('open', candidate)",56],["for candidate in a:context.candidates",64],["call add(candidates, candidate)",54],["for candidate in candidates",88],["return candidate",43],["call unite#sources#file#create_vimfiler_dict(candidate, exts)",37],["\" of these maps to use other keys.  One likely candidate is 'CTRL-_'",37],["let candidate.unite__abbr =",35],["let directory = unite#helper#get_candidate_directory(a:candidate)",33]],"useCount":2219},{"word":"candidates","context":[["candidates[i] = nil",52],["for candidate in a:candidates",442],["call add(candidates, candidate)",54],["for candidate in a:context.candidates",64],["return a:context.candidates",68],["for candidate in candidates",88],["if empty(candidates)",98],["return a:candidates",203],["let candidates = []",240],["return candidates",391]],"useCount":3578},{"word":"case","context":[["\" leave the hex values out entirely in that case and include only cterm colors)",73],["syntax case ignore",411],["syntax case match",503],["syn case ignore",1972],["syn case match",2113],["\\\"\\<cr>case \".g:rs.\"...\".g:re.\":\\<cr>break;\".",72],["\"        Label           case, default, etc.",69],["\" message in case of success",87],["b = case type",90],["\" Define some defaults in case the included ftplugins don't set them.",86]],"useCount":10006},{"word":"catch","context":[["catch /^Vim\\%((\\a\\+)\\)\\=:/",92],["catch",3921],["catch /^fugitive:/",1295],["catch /.*/",785],["catch /^NERDTree.InvalidArgumentsError/",213],["catch /^NERDTree/",154],["catch /^NERDTree.BookmarkNotFoundError/",139],["catch /^Vim\\%((\\a\\+)\\)\\=:E117/",136],["catch /^NERDTree.BookmarkedNodeNotFoundError/",129],["\"catch errors caused by wrong parenthesis and brackets",85]],"useCount":10897},{"word":"cd","context":[["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd' : 'cd'",116],["execute cd fnameescape(cwd)",100],["execute cd . fnameescape(dir)",108],["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd' : 'cd'",116],["call neobundle#util#cd(cwd)",120],["cd -",147],["execute cd.'`=s:repo().tree()`'",463],["execute cd.'`=dir`'",604],["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd ' : 'cd '",653],["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd ' : 'cd '",653]],"useCount":6143},{"word":"char","context":[["return a:char",235],["let char = get(a:, 1, ' ')",125],["if strdisplaywidth(char) != 1",125],["let width -= s:wcswidth(char)",95],["return char",77],["char = readchar rescue return",90],["buffer << char",90],["if SEP.include? char.chr",90],["\" Avoid matching foo::bar() in C++ by requiring that the next char is not ':'",80],["\" <C-h>, <BS>: close popup and delete backword char.",78]],"useCount":6628},{"word":"character","context":[["\" even if a:str contains multibyte character(s).",66],["\"        Delimiter       character that needs attention",68],["\" Check if the character at lnum:col is inside a string.",64],["\" Check if the character at lnum:col is inside a string, comment, or is ascii.",58],["\" Make 0 go to the first character rather than the beginning",58],["\" Remap VIM 0 to first non-blank character",54],["\" The character to show in the last column when wrap is off and the line",48],["\" Returns List of character sequence between [a:from, a:to]",45],["\"        Character       a character constant: 'c', '\\n'",69],["\"        SpecialChar     special character in a constant",69]],"useCount":2490},{"word":"characters","context":[["\" Highlight special characters (those which have a backslash) differently",172],["throw \"vital: Data.String: Can't use non-half-width characters for padding.\"",125],["\" Remove any newline characters",60],["\" unicode characters",60],["\" Linebreak on 500 characters",53],["\" truncate hash to a:1 characters if we're in detached head mode",57],["\" Strings and characters:",42],["\"width as the proper amount of characters",45],["\" A definition of a TEXT file is \"A file that contains characters organized",39],["\" Avoid garbled characters in Chinese language windows OS",38]],"useCount":2760},{"word":"check","context":[["\" sanity check",201],["\" We also check to see if user has set solarized (force use of the",72],["\" check doc/SingleCompile.txt for more information",67],["\" First check whether the file already exists",66],["\" If empty, check if they want to leave it empty",61],["\" Expression used to check whether we should skip a match with searchpair().",59],["\" Here we define the color map for ctrlp.  We check for the g:loaded_ctrlp",55],["<span class=\"select-menu-item-icon octicon octicon-check\"></span>",54],["\"then check for the space and remove it if it is there",46],["\"   -line: the line that to check if commented",46]],"useCount":5073},{"word":"checking","context":[["\"Description: Syntax checking plugin for syntastic",40],["\"    -> Spell checking",45],["\" method.  We should verify by checking for an argument, but that's",49],["\" checking for them since such checks are extremely slow.",40],["\" => Spell checking",50],["\" Pressing ,ss will toggle and untoggle spell checking",52],["\" the \"missing\" elements will be assumed to be 0 for the purposes of checking.",38],["\" check cscope for definition of a symbol before checking ctags: set to 1",37],["\"Description: Vim plugin for on the fly syntax checking.",67],["\"Description: Syntax checking plugin for syntastic.vim",1331]],"useCount":2305},{"word":"child","context":[["for child in s:glob_dir(dir)",90],["\\                    .\"<body>\\n\\t${child}|\\n</body>\\n\"",210],["call add(root.child, deepcopy(current))",94],["let allowed[child] = 1",90],["\" wrapper for the jump to child method",88],["\"This function doesnt not recurse into child dir nodes",84],["for c in self.child",72],["\"Return: the number of child nodes read",66],["for child in current.child",65],["for child in current.child",65]],"useCount":3246},{"word":"children","context":[["children = children.map { |pid|",90],["return len(self.children)",43],["let self.children = []",50],["if has_key(tag, 'children')",56],["if self.children ==# []",76],["children = pids",90],["for i in self.children",180],["until children.empty?",90],["children = children.map { |pid|",90],["pids += children",90]],"useCount":3174},{"word":"choice","context":[["let b:netrw_fname   = substitute(a:choice,mf,'\\2',\"\")",42],["let b:netrw_lastfile = choice",336],["return choice",71],["if choice == 1",71],["let choice = nr2char(getchar())",62],["let choice = inputlist(choices)",44],["if match(choice,\"?\") == 0",42],["let choice = b:netrw_lastfile",42],["let confirmed = choice ==# 'y'",42],["exe \"let choice= a:\" . ichoice",42]],"useCount":3439},{"word":"class","context":[["<li class=\"facebox-user-list-item\">",70],["<li class=\"header-nav-item\">",64],["class Command(object):",79],["class PlugThread(thr.Thread):",79],["class Plugin(object):",79],["class Action(object):",79],["class RefreshThread(thr.Thread):",79],["class Buffer(object):",81],["\\ 'class'     : 'c',",112],["\\ 'c' : 'class',",252]],"useCount":9141},{"word":"clear","context":[["syntax clear",3107],["\" Cmd-Shift-P to clear the cache",52],["syntax sync clear",58],["\"clear the loc list for the buffer",76],["call self.cache.clear('user_classes')",76],["syn sync clear",128],["\"hi clear -- no settings --",145],["syn clear",583],["highlight clear",620],["hi clear",3887]],"useCount":11344},{"word":"close","context":[["close",778],["close!",323],["fd.close",180],[":close",81],["os.close(fread)",79],["\" <C-h>, <BS>: close popup and delete backword char.",78],["\" <CR>: close popup and save indent.",77],["\" open close folds",73],["\" Don't close window, when deleting a buffer",57],["call self.close()",68]],"useCount":5435},{"word":"cluster","context":[["syn cluster\tcLabelGroup\tcontains=cUserLabel",53],["syn cluster rubyNotTop add=railsOrderSpecial,railsConditionsSpecial",49],["syn cluster yamlRailsRegions contains=yamlRailsOneLiner,yamlRailsBlock,yamlRailsExpression",49],["syn cluster shFunctionList\tadd=shRepeat",48],["syn cluster vimFuncBodyList add=vimSynType",48],["syn cluster     goCharacterGroup    contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU",46],["syn cluster     goStringGroup       contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU,goEscapeError",46],["syn cluster\tcCommentGroup\tcontains=cTodo,cBadContinuation",42],["syn cluster sqlTop remove=sqlString,sqlComment",39],["syn cluster     goCommentGroup      contains=goTodo",37]],"useCount":3187},{"word":"cmd","context":[["exe a:cmd",218],["let cmd += [s:buffer().commit()]",151],["let result = s:DB_runCmd(cmd, output, \"\")",152],["let cmd = ''",168],["exec cmd",408],["return cmd",354],["let cmd = s:findcmdfor(a:cmd)",304],["let cmd = s:findcmdfor(a:cmd)",304],["exe cmd",178],["execute cmd",191]],"useCount":30692},{"word":"cnt","context":[["$curbuf[1] = \"#{pull ? 'Updating' : 'Installing'} plugins (#{cnt}/#{tot})\"",90],["cnt = bar.length",90],["let cnt += 1",540],["let cnt = 0",280],["call s:progress_bar(2, repeat('=', cnt), total)",180],["let [cnt, total] = [0, len(g:plugs)]",179],["let cnt = 1",163],["let cnt = cnt + 1",107],["let cnt = cnt + 1",107],["let plural = cnt != 1 ? 's' : ''",119]],"useCount":4509},{"word":"code","context":[["\"    string inner (punc, code, etc): #00A0A0  0:160:160",55],["\" Supporting code -------------------------------------------------------------",74],["\" This is fast but code inside triple quoted strings screws it up. It",72],["Raises CmdFailed   -> return code for Popen isn't 0",79],["\" URL: http://peterodding.com/code/vim/misc/",66],["\" related code that sets gui specific values isn't executed.",66],["\"\t\t<URL:http://code.google.com/p/lh-vim/>",54],["\" Description: An ack/ag powered code search and view tool.",49],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["\" Home: http://code.google.com/p/vimwiki/",81]],"useCount":3830},{"word":"col","context":[["let c = col(\".\")",203],["call cursor(line(\".\")+1, col(\".\"))",274],["let start = col('.') - 1",255],["let col = col('.')",247],["let col = col('.')",247],["call cursor(line, col)",158],["if col > 0",93],["let vcol = col('.')",104],["let col = col('.') - 1",109],["let col = col('.') - 1",109]],"useCount":14783},{"word":"color","context":[["\" Return terminal color for light/dark variants",292],["elseif a:color == s:cterm05",312],["elseif a:color == s:gui05",313],["return a:color",1181],["\" Vim color file",1626],["\" Remove color variables",303],["\" Terminal color definitions",301],["\" GUI color definitions",298],["\" Return GUI color for light/dark variants",292],["fun s:gui(color)",290]],"useCount":15581},{"word":"colors","context":[["\" Vim >= 7.0 specific colors",133],["Plug 'altercation/vim-colors-solarized'",114],["\" :he cterm-colors",128],["\" Vim editor colors",305],["\" General colors",250],["\" leave the hex values out entirely in that case and include only cterm colors)",73],["Plugin 'altercation/vim-colors-solarized'",75],["\" :help cterm-colors",75],["if version >= 700 \" Vim 7.x specific colors",99],["\" local syntax file - set colors on a per-machine basis:",112]],"useCount":4858},{"word":"colorscheme","context":[["\" :colorscheme works in terminals supported by base16-shell scripts",177],["colorscheme solarized",253],["\"     colorscheme solarized",140],["\\ | colorscheme lucius",144],["\" does not re-read the colorscheme (or .vimrc for that matter) so any `has_gui`",66],["\" Currently, Solarized sets only the cterm or gui values for the colorscheme",66],["\" Solarized is a carefully designed selective contrast colorscheme with dual",70],["colorscheme molokai",73],["colorscheme gruvbox",90],["colorscheme desert",90]],"useCount":3153},{"word":"colour","context":[["return <SID>colour(l:r, l:g, l:b)",200],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\" Returns an approximate colour index for the given colour level",211],["\" Use the colour",211],["\" Returns the actual colour level for the given colour index",211],["\" Returns an approximate colour index for the given colour level",211],["\" Returns the palette index for the given R/G/B colour indices",211],["\" Get the closest colour",211],["\" Returns the actual colour level for the given colour index",211],["fun <SID>colour(r, g, b)",196]],"useCount":3115},{"word":"column","context":[["call s:DB_warningMsg('DBI: No column info returned')",66],["\" Strip off column headers ending with a newline",182],["\" marks column",308],["\" file marked with ma. However, `a will jump to the line and column marked",66],["\" one extra column is needed to include the vertical split",54],["\" according to it.  For parentheses we indent to its column - 1, for the",53],["let add = s:sub(add,'\\)=$',', :column => '.mat.'&')",49],["\" The character to show in the last column when wrap is off and the line",48],["\" The column separating vertically split windows",41],["\" Screen column that the cursor is",39]],"useCount":3616},{"word":"com","context":[["\" Author   : Michael Sharpe <feline@irendi.com>",147],["\" Author: Tomas Restrepo <tomas@winterdom.com>",151],["\" http://chriskempson.com",170],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>",195],["\" @Author:      Tom Link (mailto:micathom AT gmail com?subject=[vim])",196],["\" @Author:      Tom Link (micathom AT gmail com?subject=[vim])",214],["\"Maintainer:  LCD 47 <lcd047 at gmail dot com>",278],["\"Maintainer:  Martin Grenfell <martin.grenfell at gmail dot com>",344],["\" AUTHOR: Shougo Matsushita <Shougo.Matsu@gmail.com>",510],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu@gmail.com>",909]],"useCount":16370},{"word":"command","context":[["let command = substitute(command, '<project>', project, '')",274],["let command = substitute(command, '<project>', project, '')",274],["command -nargs=* CompilerSet setlocal <args>",266],["let command = substitute(command, '<file>', file, '')",178],["let command = substitute(command, '<file>', file, '')",178],["\" Only include a command terminator if one has not already",172],["let out = go#tool#ExecuteInDir(command)",166],["command -nargs=+ HiLink hi def link <args>",2291],["return s:command",138],["command -nargs=+ HiLink hi link <args>",2249]],"useCount":30363},{"word":"commands","context":[["for command in s:commands",84],["\" using \"call SolarizedOptions()\" or with the \"Generate .vimrc commands\"",49],["\\'\" existing colorscheme commands). See also \":help solarized\"',",49],["\\'\" this block of commands has been autogenerated by solarized.vim and',",49],["return commands",53],["\" XXX: Vim doesn't call autocmd commands in a predictible",62],["\\ -complete=customlist,neobundle#commands#complete_bundles",70],["let s:commands += [a:definition]",84],["\" Useful commands for testing colorschemes:",72],["let s:commands = []",84]],"useCount":4156},{"word":"comment","context":[["\" \"*/\", and sees a \"*\" at the start of the line as comment again.",102],["call <SID>X(\"Comment\", s:comment, \"\", \"\")",195],["call <SID>X(\"Title\", s:comment, \"\", \"\")",194],["\" A comment can contain cString, cCharacter and cNumber.",74],["\" and insert the comment leader when hitting <CR> or using \"o\".",79],["\" Set 'formatoptions' to break comment lines but not other lines,",84],["let s:comment = \"969896\"",86],["call <SID>X(\"Folded\", s:comment, s:background, \"\")",166],["\" keep a // comment separately, it terminates a preproc. conditional",97],["call <SID>X(\"Todo\", s:comment, s:background, \"\")",155]],"useCount":9512},{"word":"comments","context":[["\" Unfortunately this doesn't very well work for // type of comments :-(",100],["\" Set 'comments' to format dashed lists in comments.",60],["\" cCommentGroup allows adding matches for special things in comments",69],["setlocal comments=:# commentstring=#\\ %s formatoptions-=t formatoptions+=croql",85],["\" Same, but without octal error (for comments)",94],["setlocal comments=:#",146],["\" comments",172],["setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-",500],["setlocal comments=sO:*\\ -,mO:*\\ \\ ,exO:*/,s1:/*,mb:*,ex:*/,://",228],["\" Set 'comments' to format dashed lists in comments.",60]],"useCount":5179},{"word":"commentstring","context":[["setlocal commentstring=//\\ %s",65],["setlocal commentstring=//%s",70],["setlocal commentstring=<!--%s-->",74],["setlocal comments=:# commentstring=#\\ %s formatoptions-=t formatoptions+=croql",85],["setlocal commentstring=#\\ %s",136],["setlocal commentstring=#%s",147],["setlocal commentstring=/*%s*/",730],["setlocal comments=:# commentstring=#\\ %s",33],["setlocal commentstring=\\\"%s",26],["return &commentstring",26]],"useCount":2182},{"word":"commit","context":[["let cmd += [s:buffer().commit()]",151],["let commit = ':0'",77],["return self.commit()",77],["if b:fugitive_type !~# '^\\%(tag\\|commit\\|tree\\|blob\\)$'",77],["elseif self.commit() =~# '.'",77],["if commit =~# '^0\\+$'",77],["elseif s:buffer().commit() ==# '0'",76],["autocmd User Fugitive if s:buffer().commit() =~# '^0\\=$' |",77],["let file = commit.a:rev.self.path(':')",76],["if s:buffer().commit() == ''",76]],"useCount":6770},{"word":"complete","context":[["call s:command(\"-bang -nargs=? -complete=customlist,s:EditComplete Glgrep :execute s:Grep('lgrep',<bang>0,<q-args>)\")",60],["\\ -complete=customlist,eclim#project#util#CommandCompleteProject",64],["\" complete menu",384],["call s:command(\"-bang -nargs=? -complete=customlist,s:GitComplete Git :execute s:Git(<bang>0,<q-args>)\")",76],["call s:command(\"-nargs=? -complete=customlist,s:CommitComplete Gcommit :execute s:Commit(<q-args>)\")",76],["setlocal complete=.,w,b,u,t,i",871],["\\ -complete=customlist,neobundle#commands#complete_bundles",70],["\"When typing a string, your quotes auto complete. Move past the quote",66],["call s:command(\"-bang -nargs=? -complete=customlist,s:EditComplete Ggrep :execute s:Grep('grep',<bang>0,<q-args>)\")",60],["function! s:source.complete(args, context, arglead, cmdline, cursorpos) \"{{{",51]],"useCount":5952},{"word":"completion","context":[["\" Enable omni completion.",116],["\" Vim completion script",88],["\" <TAB>: completion.",81],["\" Enable heavy omni completion.",80],["\" Hack to workaround bug when invoking command line completion via <c-r>=",54],["\" set the current completion type to the default",54],["\" Auto-completion",52],["\" Ugly but necessary, until we have our own completion",49],["\" optionally enable enhanced longest completion",48],["\" popup completion menu",45]],"useCount":3869},{"word":"conditions","context":[["\" the following conditions:",179],["\"     the following conditions:",1680],["\" furnished to do so, subject to the following conditions:",313],["\" so, subject to the following conditions:",66],["\"   conditions are met:",40],["return s:selectiveexpand('..',':conditions => ',':c')",58],["return len(conditions) == 1 ? conditions[0] : join(map(conditions, '\"(\" . v:val . \")\"'), ' && ')",35],["let conditions = []",35],["return len(conditions) == 1 ? conditions[0] : join(map(conditions, '\"(\" . v:val . \")\"'), ' && ')",35],["return len(conditions) == 1 ? conditions[0] : join(map(conditions, '\"(\" . v:val . \")\"'), ' && ')",35]],"useCount":2737},{"word":"conf","context":[["au BufNewFile,BufRead smb.conf\t\t\tsetf samba",30],["\\   setf conf |",30],["function! s:repo_config(conf) dict abort",74],["return matchstr(system(s:repo().git_command('config').' '.a:conf),\"[^\\r\\n]*\")",73],["\" Resolv.conf",29],["\" Xinetd conf",54],["\" Pam conf",54],["\" yum conf (close enough to dosini)",38],["au BufNewFile,BufRead pf.conf\t\t\tsetf pf",29],["\" Packet filter conf",29]],"useCount":2185},{"word":"config","context":[["return matchstr(system(s:repo().git_command('config').' '.a:conf),\"[^\\r\\n]*\")",73],["\\ neobundle#config#get_neobundles() :",77],["let username = s:repo().config('user.name')",73],["let useremail = s:repo().config('user.email')",73],["let type = neobundle#config#get_types(a:bundle.type)",73],["call plug#begin('~/.config/nvim/plugged')",142],["return \"config/application.rb\\nconfig/environment.rb\"",66],["elseif path =~# '.git/\\%(config$\\|hooks\\>\\)'",73],["let raw = s:repo().git_chomp('config','remote.'.remote.'.url')",72],["call s:add_methods('repo',['config', 'user', 'aliases'])",67]],"useCount":8391},{"word":"contained","context":[["syn region\tcIncluded\tdisplay contained start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+",73],["\\ contained",2179],["syn match\tcIncluded\tdisplay contained \"<[^>]*>\"",72],["syn match\tcSpecial\tdisplay contained \"\\\\\\(x\\x\\+\\|\\o\\{1,3}\\|.\\|$\\)\"",65],["syn match plugRelDate /([^)]*)$/ contained",90],["syn match FugitiveblameNotCommittedYet \"(\\@<=Not Committed Yet\\>\" contained containedin=FugitiveblameAnnotation",77],["syn match plugNumber /[0-9]\\+[0-9.]*/ contained",90],["syn match plugBracket /[[\\]]/ contained",90],["syn match plugX /x/ contained",90],["syn match\tcFormat\t\tdisplay \"%%\" contained",74]],"useCount":26641},{"word":"contains","context":[["\\ contains=",149],["\\ contains=TOP",218],["\" This contains the defaults settings for all database types",167],["\\ contains=p6Attention,p6Comment",135],["\\ contains=@p6Regexen,@p6Variables",116],["syntax region plug1 start=/\\%1l/ end=/\\%2l/ contains=plugNumber",90],["\" This file contains the list of plugin installed using vundle plugin manager.",73],["syn match\tcInclude\tdisplay \"^\\s*\\(%:\\|#\\)\\s*include\\>\\s*[\"<]\" contains=cIncluded",68],["syn region\tcParen\t\ttransparent start='(' end=')' contains=ALLBUT,@cParenGroup,cCppParen,cCppString,@Spell",67],["syntax region plug2 start=/\\%2l/ end=/\\%3l/ contains=plugBracket,plugX",90]],"useCount":16092},{"word":"content","context":[["return content",55],["let result = vimclojure#ExecuteNailWithInput(\"Repl\", content,",52],["\\                    .\"\\t<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=${charset}\\\" />\\n\"",69],["let block = [pos1, [pos1[0], pos1[1] + len(content) - 1]]",81],["let content = emmet#util#getContent(block)",106],["let current = emmet#lang#html#parseTag(content)",48],["call emmet#util#setContent(block, content)",113],["let content = matchstr(getline(pos1[0])[pos1[1]-1:], mx)",127],["let content = ''",66],["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62]],"useCount":5023},{"word":"context","context":[["let a:context.is_async = 0",286],["let context = get(a:000, 0, {})",70],["function! s:source.gather_candidates(args, context) \"{{{",173],["let context = unite#get_context()",183],["function! s:command.execute(args, context) \"{{{",71],["echoerr \"warning: unknown context \".matchstr(getline('.'),'^\\l*')",77],["function! s:source.hooks.on_init(args, context) \"{{{",79],["function! s:source.gather_candidates(args, context) abort \"{{{",83],["let context = unite.context",112],["let context = unite.context",112]],"useCount":8199},{"word":"continue","context":[["continue",6735],["syn keyword\tcStatement\tgoto break return continue asm",47],["syn keyword     goStatement         defer go goto return break continue fallthrough",37],["syn keyword pythonStatement\tbreak continue del",35],["let warning = '|echohl WarningMsg|echo \"Install scriptease.vim to continue using :V'.a:cmd.'\"|echohl NONE'",34],["\"redraw!|call DechoSep()|call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()",32],["\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()",64],["call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()",56],["\" continue",52],["if s:external_sign_present(line) | continue | endif",30]],"useCount":8138},{"word":"controller","context":[["let name = a:0 ? a:1 : s:controller(1)",83],["let r = \"controller-api\"",49],["let r = \"controller\"",49],["let controller = s:controller(1)",50],["let controller = s:controller(1)",50],["let c = s:controller(1)",51],["\" controller",52],["if buffer.type_name('controller')",55],["elseif self.type_name('controller')",58],["return controller",71]],"useCount":2536},{"word":"copy","context":[["let managed = filter(copy(g:plugs), 's:is_managed(v:key)')",91],["let opts = copy(s:base_spec)",89],["let unknowns = filter(copy(a:000), '!has_key(g:plugs, v:val)')",89],["return filter(copy(g:plugs_order), 'get(s:loaded, v:val, 0)')",89],["\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",223],["let newObj = copy(self)",146],["let args = copy(a:args)",112],["\\ 'todo':    copy(todo),",88],["\\ extend(copy(s:update.errors), [s:update.threads]))",88],["let newobj = copy(self)",87]],"useCount":10035},{"word":"count","context":[["function! s:Browse(bang,line1,count,...) abort",72],["for i in range(a:count)",117],["let their_time = +self.repo().git_chomp('log','--max-count=1','--pretty=format:%at',a:commit)",75],["function! s:Blame(bang,line1,line2,count,args) abort",75],["let my_time    = +self.repo().git_chomp('log','--max-count=1','--pretty=format:%at',self.commit())",75],["\" TODO: use count, if possible",76],["count, 's' if count != 1 else '')",79],["count, 's' if count != 1 else '')",79],["for count in range(3, 0, -1):",79],["if a:count",93]],"useCount":5533},{"word":"cpo","context":[["let s:keepcpo= &cpo",287],["set cpo&vim",8126],["let &cpo = s:save_cpo",5583],["let s:save_cpo = &cpo",5502],["let s:cpo_save = &cpo",1788],["let &cpo=s:cpo_save",339],["let s:cpo_save=&cpo",338],["let &cpo= s:keepcpo",233],["set cpo-=C",577],["let &cpo = s:cpo_save",1932]],"useCount":26505},{"word":"cpo_save","context":[["let &cpoptions = s:cpo_save",16],["unlet s:cpo_save s:line1",16],["let &cpo = s:cpo_save",1932],["unlet s:old_title s:old_icon s:old_ru s:old_sc s:cpo_save s:idx s:lnum",18],["unlet s:cpo_save",1900],["let s:cpo_save = &cpo",1788],["let &cpo=s:cpo_save",339],["let s:cpo_save=&cpo",338],["let cpo_save = &cpo",60],["let &cpo = cpo_save",60]],"useCount":6481},{"word":"cpoptions","context":[["let s:save_cpo = &cpoptions",77],["set cpoptions&vim",311],["\" Restore 'cpoptions' {{{",137],["\" Saving 'cpoptions' {{{",137],["let old_cpoptions = &cpoptions",95],["\" Setup the cpoptions properly for the maps to work",62],["\" Restore 'cpoptions'",64],["\" Restore the previous cpoptions settings",64],["let &cpoptions = s:save_cpo",69],["let &cpoptions = old_cpoptions",95]],"useCount":2182},{"word":"cpp","context":[["if s:ft ==# 'cpp' && !exists(\"cpp_no_cpp11\")",57],["setlocal syntax=cpp",237],["if &syntax != 'cpp'",237],["setlocal filetype=cpp",237],["if &filetype != 'cpp'",237],["if( s:CheckFileType() == \"cpp\" )",80],["setf cpp",55],["\\ 'cpp',",56],["if &filetype != \"c\" && &filetype != \"cpp\"",76],["\\ 'filetype': 'cpp',",67]],"useCount":3829},{"word":"cppSTLfunction","context":[["syntax keyword cppSTLfunction construct",21],["syntax keyword cppSTLfunction reserve",40],["syntax keyword cppSTLfunction strstr",20],["syntax keyword cppSTLfunction atomic_is_lock_free",20],["syntax keyword cppSTLfunction move",20],["syntax keyword cppSTLfunction is_partitioned",20],["syntax keyword cppSTLfunction is_heap",21],["syntax keyword cppSTLfunction exp",20],["syntax keyword cppSTLfunction get_id",39],["syntax keyword cppSTLfunction va_arg",23]],"useCount":11931},{"word":"cppSTLtype","context":[["syntax keyword cppSTLtype unordered_set",20],["syntax keyword cppSTLtype mega",20],["syntax keyword cppSTLtype float_round_style",20],["syntax keyword cppSTLtype indirect_array",20],["syntax keyword cppSTLtype ostream",20],["syntax keyword cppSTLtype tuple",39],["syntax keyword cppSTLtype off_type",21],["syntax keyword cppSTLtype pos_type",21],["syntax keyword cppSTLtype value_compare",20],["syntax keyword cppSTLtype weibull_distribution",20]],"useCount":7779},{"word":"cr","context":[["xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>",89],["nnoremap <silent> <buffer> S  :PlugStatus<cr>",90],["nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>",90],["nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>",90],["nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>",90],["nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>",90],["\\\"else if (\".g:rs.\"...\".g:re.\")\\<cr>{\\<cr>\".g:rs.\"...\".g:re.\"\\<cr>} \".",90],["\\\"else if (\".g:rs.\"...\".g:re.\")\\<cr>{\\<cr>\".g:rs.\"...\".g:re.\"\\<cr>} \".",90],["\\\"else if (\".g:rs.\"...\".g:re.\")\\<cr>{\\<cr>\".g:rs.\"...\".g:re.\"\\<cr>} \".",90],["nnoremap <silent> <buffer> D  :PlugDiff<cr>",90]],"useCount":11824},{"word":"create","context":[["\" create and delete folds",78],["\"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\",75],["\"create the nerd tree window",42],["\"create a new path and see if it exists in this nodes children",42],["\"if it ends with a slash, assume its a dir create it",45],["\"fullpath: the full filesystem path to the file/dir to create",45],["\"assume its a file and create",45],["\" Make gf (go to file) create the file, if not existent",52],["\" create <%= foo %> erb tags using Ctrl-j in edit mode",55],["\" create <%= foo %> erb tags using Ctrl-k in edit mode",57]],"useCount":2218},{"word":"css","context":[["if uri =~ '\\.css$'",49],["autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS",137],["autocmd FileType css set omnifunc=csscomplete#CompleteCSS",49],["setlocal filetype=css",66],["\\        'extends': 'css',",94],["\" [-- count indent-decreasing '}' of (java|css) line a:lnum --]",43],["runtime! syntax/css.vim",44],["\\ =~ '\\(css\\|java\\).*'",41],["\" [-- count indent-increasing '{' of (java|css) line a:lnum --]",43],["let str .= '.css'",43]],"useCount":3023},{"word":"ctags","context":[["let cmd = \"ctags.exe\"",52],["elseif executable(\"ctags.exe\")",52],["elseif executable('ctags.exe')",41],["elseif executable(\"exuberant-ctags\")",52],["\" Store the ctags output for this tag",64],["let cmd = \"exuberant-ctags\"",52],["let cmd = \"ctags\"",52],["elseif executable(\"ctags-exuberant\")",52],["let cmd = \"ctags-exuberant\"",52],["elseif executable(\"ctags\")",52]],"useCount":2770},{"word":"cterm","context":[["delf <sid>cterm",291],["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["exec \"hi \" . a:group . \" ctermbg=\" . s:cterm(a:ctermbg)",291],["exec \"hi \" . a:group . \" ctermfg=\" . s:cterm(a:ctermfg)",291],["fun s:cterm(color)",290],["CSAHi vimCollClass term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimPatRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuMap term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":91861},{"word":"cterm00","context":[["call <sid>hi(\"Normal\",        s:gui05, s:gui00, s:cterm05, s:cterm00, \"\")",262],["let s:cterm00 = \"00\"",308],["call <sid>hi(\"Conceal\",       s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\")",268],["call <sid>hi(\"SpellBad\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",273],["call <sid>hi(\"SpellRare\",    \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",273],["call <sid>hi(\"SpellCap\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",274],["call <sid>hi(\"ErrorMsg\",      s:gui08, s:gui00, s:cterm08, s:cterm00, \"\")",274],["call <sid>hi(\"SpellLocal\",   \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",274],["return s:cterm00",289],["if a:color == s:cterm00",289]],"useCount":6208},{"word":"cterm01","context":[["call <sid>hi(\"FoldColumn\",    \"\", s:gui01, \"\", s:cterm01, \"\")",272],["call <sid>hi(\"ColorColumn\",   \"\", s:gui01, \"\", s:cterm01, \"none\")",273],["call <sid>hi(\"TabLineFill\",   s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"Folded\",        s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",274],["return s:cterm01",289],["elseif a:color == s:cterm01",289],["let s:cterm01 = \"10\"",307],["let s:cterm01 = \"18\"",311],["call <sid>hi(\"TabLine\",       s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"StatusLineNC\",  s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",272]],"useCount":9192},{"word":"cterm02","context":[["let s:cterm02 = \"19\"",312],["call <sid>hi(\"Visual\",        \"\", s:gui02, \"\", s:cterm02, \"\")",269],["call <sid>hi(\"VertSplit\",     s:gui02, s:gui02, s:cterm02, s:cterm02, \"none\")",247],["call <sid>hi(\"StatusLine\",    s:gui04, s:gui02, s:cterm04, s:cterm02, \"none\")",273],["call <sid>hi(\"VertSplit\",     s:gui02, s:gui02, s:cterm02, s:cterm02, \"none\")",247],["\\ 'cterm02': 19,",51],["let s:I2   = [ s:gui06, s:gui02, s:cterm06, s:cterm02 ]",40],["elseif a:color == s:cterm02",289],["let s:cterm02 = \"11\"",307],["return s:cterm02",313]],"useCount":2751},{"word":"cterm03","context":[["call <sid>hi(\"StatusLineNC\",  s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",272],["call <sid>hi(\"TabLineFill\",   s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"SignColumn\",    s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",268],["call <sid>hi(\"SpecialKey\",    s:gui03, \"\", s:cterm03, \"\", \"\")",543],["let s:cterm03 = \"08\"",306],["elseif a:color == s:cterm03",290],["call <sid>hi(\"Folded\",        s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",274],["call <sid>hi(\"TabLine\",       s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"NonText\",       s:gui03, \"\", s:cterm03, \"\", \"\")",274],["return s:cterm03",289]],"useCount":4964},{"word":"cterm04","context":[["\\ [ s:gui07, s:gui04, s:cterm07, s:cterm04, '' ],",40],["call <sid>hi(\"StatusLine\",    s:gui04, s:gui02, s:cterm04, s:cterm02, \"none\")",273],["call <sid>hi(\"PMenu\",         s:gui04, s:gui01, s:cterm04, s:cterm01, \"none\")",270],["call <sid>hi(\"PMenuSel\",      s:gui01, s:gui04, s:cterm01, s:cterm04, \"\")",247],["\\ 'cterm04': 20,",51],["call <sid>hi(\"PMenuSel\",      s:gui01, s:gui04, s:cterm01, s:cterm04, \"\", \"\")",26],["let s:cterm04 = \"20\"",312],["let s:cterm04 = \"12\"",307],["elseif a:color == s:cterm04",289],["return s:cterm04",289]],"useCount":2355},{"word":"cterm05","context":[["call <sid>hi(\"NERDTreeExecFile\",  s:gui05, \"\", s:cterm05, \"\", \"\")",268],["call <sid>hi(\"Normal\",        s:gui05, s:gui00, s:cterm05, s:cterm00, \"\")",262],["call <sid>hi(\"cssBraces\",      s:gui05, \"\", s:cterm05, \"\", \"\")",260],["call <sid>hi(\"Operator\",     s:gui05, \"\", s:cterm05, \"\", \"none\")",260],["call <sid>hi(\"phpMemberSelector\",  s:gui05, \"\", s:cterm05, \"\", \"\")",272],["call <sid>hi(\"phpParent\",          s:gui05, \"\", s:cterm05, \"\", \"\")",272],["call <sid>hi(\"phpComparison\",      s:gui05, \"\", s:cterm05, \"\", \"\")",273],["let s:cterm05 = \"07\"",306],["elseif a:color == s:cterm05",312],["return s:cterm05",289]],"useCount":5104},{"word":"cterm08","context":[["call <sid>hi(\"VisualNOS\",     s:gui08, \"\", s:cterm08, \"\", \"\")",269],["call <sid>hi(\"WildMenu\",      s:gui08, \"\", s:cterm08, \"\", \"\")",272],["call <sid>hi(\"ErrorMsg\",      s:gui08, s:gui00, s:cterm08, s:cterm00, \"\")",274],["call <sid>hi(\"Macro\",         s:gui08, \"\", s:cterm08, \"\", \"\")",275],["call <sid>hi(\"Debug\",         s:gui08, \"\", s:cterm08, \"\", \"\")",275],["call <sid>hi(\"gitCommitOverflow\",  s:gui08, \"\", s:cterm08, \"\", \"\")",275],["let s:cterm08 = \"01\"",308],["call <sid>hi(\"TooLong\",       s:gui08, \"\", s:cterm08, \"\", \"\")",276],["call <sid>hi(\"WarningMsg\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276],["call <sid>hi(\"Underlined\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276]],"useCount":6448},{"word":"cterm09","context":[["call <sid>hi(\"IncSearch\",     s:gui01, s:gui09, s:cterm01, s:cterm09, \"none\")",249],["call <sid>hi(\"Type\",         s:gui09, \"\", s:cterm09, \"\", \"none\")",181],["let s:cterm09 = \"16\"",311],["call <sid>hi(\"Float\",        s:gui09, \"\", s:cterm09, \"\", \"\")",269],["call <sid>hi(\"javaScriptNumber\",  s:gui09, \"\", s:cterm09, \"\", \"\")",253],["call <sid>hi(\"Number\",       s:gui09, \"\", s:cterm09, \"\", \"\")",255],["call <sid>hi(\"Constant\",     s:gui09, \"\", s:cterm09, \"\", \"\")",255],["call <sid>hi(\"sassClassChar\",  s:gui09, \"\", s:cterm09, \"\", \"\")",262],["call <sid>hi(\"Boolean\",      s:gui09, \"\", s:cterm09, \"\", \"\")",267],["let s:cterm09 = \"09\"",309]],"useCount":3245},{"word":"cterm0A","context":[["call <sid>hi(\"Label\",        s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"htmlBold\",    s:gui0A, \"\", s:cterm0A, \"\", \"\")",274],["call <sid>hi(\"rubyConstant\",                s:gui0A, \"\", s:cterm0A, \"\", \"\")",275],["let s:cterm0A = \"03\"",308],["call <sid>hi(\"StorageClass\", s:gui0A, \"\", s:cterm0A, \"\", \"\")",255],["call <sid>hi(\"Repeat\",       s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"Tag\",          s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"PreProc\",      s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"Typedef\",      s:gui0A, \"\", s:cterm0A, \"\", \"\")",267],["call <sid>hi(\"Todo\",         s:gui0A, s:gui01, s:cterm0A, s:cterm01, \"\")",267]],"useCount":3823},{"word":"cterm0B","context":[["call <sid>hi(\"markdownCode\",              s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["call <sid>hi(\"MoreMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["call <sid>hi(\"gitCommitSummary\",   s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["call <sid>hi(\"TabLineSel\",    s:gui0B, s:gui01, s:cterm0B, s:cterm01, \"none\")",265],["let s:cterm0B = \"02\"",308],["call <sid>hi(\"rubyStringDelimiter\",         s:gui0B, \"\", s:cterm0B, \"\", \"\")",274],["call <sid>hi(\"rubyInterpolation\",           s:gui0B, \"\", s:cterm0B, \"\", \"\")",274],["call <sid>hi(\"rubySymbol\",                  s:gui0B, \"\", s:cterm0B, \"\", \"\")",274],["call <sid>hi(\"markdownCodeBlock\",         s:gui0B, \"\", s:cterm0B, \"\", \"\")",269],["call <sid>hi(\"ModeMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",268]],"useCount":4950},{"word":"cterm0D","context":[["call <sid>hi(\"NERDTreeDirSlash\",  s:gui0D, \"\", s:cterm0D, \"\", \"\")",266],["call <sid>hi(\"Directory\",     s:gui0D, \"\", s:cterm0D, \"\", \"\")",267],["call <sid>hi(\"Conceal\",       s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\")",268],["let s:cterm0D = \"04\"",309],["call <sid>hi(\"rubyAttribute\",               s:gui0D, \"\", s:cterm0D, \"\", \"\")",274],["call <sid>hi(\"markdownHeadingDelimiter\",  s:gui0D, \"\", s:cterm0D, \"\", \"\")",274],["call <sid>hi(\"Include\",      s:gui0D, \"\", s:cterm0D, \"\", \"\")",269],["call <sid>hi(\"Title\",         s:gui0D, \"\", s:cterm0D, \"\", \"none\")",269],["call <sid>hi(\"sassMixinName\",  s:gui0D, \"\", s:cterm0D, \"\", \"\")",260],["call <sid>hi(\"GitGutterChange\",  s:gui0D, s:gui01, s:cterm0D, s:cterm01, \"\")",263]],"useCount":4745},{"word":"cterm0E","context":[["call <sid>hi(\"Conditional\",  s:gui0E, \"\", s:cterm0E, \"\", \"\")",268],["call <sid>hi(\"GitGutterChangeDelete\",  s:gui0E, s:gui01, s:cterm0E, s:cterm01, \"\")",246],["call <sid>hi(\"cssClassName\",   s:gui0E, \"\", s:cterm0E, \"\", \"\")",261],["call <sid>hi(\"sassInclude\",    s:gui0E, \"\", s:cterm0E, \"\", \"\")",261],["call <sid>hi(\"sassMixing\",     s:gui0E, \"\", s:cterm0E, \"\", \"\")",261],["call <sid>hi(\"Keyword\",      s:gui0E, \"\", s:cterm0E, \"\", \"\")",266],["call <sid>hi(\"Define\",       s:gui0E, \"\", s:cterm0E, \"\", \"none\")",268],["call <sid>hi(\"Structure\",    s:gui0E, \"\", s:cterm0E, \"\", \"\")",269],["call <sid>hi(\"htmlItalic\",  s:gui0E, \"\", s:cterm0E, \"\", \"\")",275],["let s:cterm0E = \"05\"",308]],"useCount":3719},{"word":"ctermbg","context":[["CSAHi vimSynKeyRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276],["exec \"hi \" . a:group . \" ctermbg=\" . s:cterm(a:ctermbg)",291],["exec \"hi \" . a:group . \" ctermbg=\" . s:cterm(a:ctermbg)",291],["if a:ctermbg != \"\"",323],["CSAHi vimHiLink term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSyncMatch term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiGuiFontname term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiCtermColor term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAutoEventList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":92549},{"word":"ctermfg","context":[["CSAHi vimFiletype term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["if a:ctermfg != \"\"",323],["exec \"hi \" . a:group . \" ctermfg=\" . s:cterm(a:ctermfg)",291],["exec \"hi \" . a:group . \" ctermfg=\" . s:cterm(a:ctermfg)",291],["CSAHi vimMenuPriority term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuMap term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimEscapeBrace term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276],["CSAHi vimIsCommand term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":103876},{"word":"ctrlp","context":[["Plug 'ctrlpvim/ctrlp.vim'",132],["cal ctrlp#setlines()",84],["Plug 'kien/ctrlp.vim'",84],["let line = ctrlp#getcline()",77],["call ctrlp#exit()",72],["sil! cal ctrlp#statusline()",67],["if j2l | cal ctrlp#j2l(j2l) | en",60],["Plugin 'kien/ctrlp.vim'",125],["cal ctrlp#recordhist()",91],["cal ctrlp#syntax()",60]],"useCount":4833},{"word":"curline","context":[["let curline = '\\V\\^' . getline('.') . '\\$'",50],["if curline =~ '^\\s*$' || curline[0] == '\"'",95],["if curline =~ '^\\s*$' || curline[0] == '\"'",95],["let tag.tline                 = curline",42],["call search(curline, 'w')",68],["let curline                   = line('.')",98],["call cursor(curline, curcol)",56],["let curline = getline('.')",118],["let curline = line('.')",213],["let curline = line(\".\")",88]],"useCount":2305},{"word":"current","context":[["\" Highlight the current tag",104],["call add(root.child, deepcopy(current))",94],["curbuf = vim.current.buffer",158],["\" Find a non-blank line above the current line.",184],["let current = a:current",119],["let text = current.value[1:-2]",96],["return current",98],["let s:current.is_operator = mode(1) ==# 'no' ? 1: 0",154],["let current.name = ''",132],["let current = a:current",119]],"useCount":20580},{"word":"currentLine","context":[["while currentLine <= a:bottomline",69],["let theLine = getline(currentLine)",253],["let currentLine = a:topline",92],["let currentLine = a:firstLine",92],["call setline(currentLine, theLine)",161],["let currentLine = currentLine + 1",374],["let bottom = currentLine",46],["let currentLine = a:topline+1",69],["while currentLine <= a:lastLine",69],["let currentLine = currentLine + 1",374]],"useCount":2525},{"word":"current_syntax","context":[["elseif exists(\"b:current_syntax\")",2724],["if exists(\"b:current_syntax\")",2491],["let b:current_syntax = \"ruby\"",72],["let b:current_syntax = \"javascript\"",76],["let b:current_syntax = 'fugitiveblame'",77],["elseif exists('b:current_syntax')",80],["let b:current_syntax = \"python\"",89],["if exists('b:current_syntax')",181],["unlet! b:current_syntax",604],["unlet b:current_syntax",1104]],"useCount":9674},{"word":"cursor","context":[["`cursor^",315],["call cursor(line(\".\")+1, col(\".\"))",274],["call cursor(1, 1)",272],["call cursor(1,1)",182],["call cursor(l, c)",165],["let expand = substitute(expand, '\\${cursor}', '', 'g')",158],["call cursor(line, col)",158],["call cursor(a:lnum, 1)",149],["call cursor(lnum, 1)",134],["\" Preparation: save last search, and cursor position.",95]],"useCount":13790},{"word":"cwd","context":[["let cwd = getcwd()",604],["if has_key(a:options, 'cwd')",130],["call neobundle#util#cd(cwd)",120],["execute cd fnameescape(cwd)",100],["if isdirectory(cwd)",95],["\"   'cwd' - change directory to the given path before running the checker",65],["execute 'lcd ' . fnameescape(a:options['cwd'])",63],["let cwd = substitute(getcwd(), '\\', '/', 'g')",43],["exec 'lcd ' . escape(cwd, ' ')",41],["exe \"lcd \" . fnameescape(cwd)",39]],"useCount":2963},{"word":"d","context":[["d = esc dir.sub(%r{[\\\\/]+$}, '')",90],["cd    = iswin ? 'cd /d' : 'cd'",90],["exec \"normal `d\"",97],["\\ {'short' : 'd', 'long' : 'macros',      'fold' : 1, 'stl' : 0},",103],["silent %d _",106],["let path = matchstr(getline('.'),'^\\^\\=\\x\\+\\s\\+\\zs.\\{-\\}\\ze\\s*\\d\\+ ')",132],["let lnum = matchstr(getline('.'),' \\zs\\d\\+\\ze\\s\\+[([:digit:]]')",132],["return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '<SNR>\\d\\+_'),''))",164],["return matchstr(expand('<sfile>'), '<SNR>\\zs\\d\\+\\ze__SID$')",278],["setlocal formatlistpat=^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t\\ ]\\\\s*",874]],"useCount":27736},{"word":"dark","context":[["if &background == \"dark\"",725],["\" Return GUI color for light/dark variants",292],["\" Return terminal color for light/dark variants",292],["set bg=dark",81],["if s:background == 'dark'",71],["\" screenshots which will help you select either the light or dark background.",70],["\" light and dark modes that runs in both GUI, 256 and 16 color modes.",70],["\"     set background=dark",69],["\"       set background=dark",67],["set background=dark",3909]],"useCount":6923},{"word":"data","context":[["current_uri = data.lines.to_a.last",90],["\" When a:event == 'stdout', data = list of strings",66],["if a:data != 0",67],["[false, data]",90],["data << line",90],["[false, [data.chomp, \"PlugClean required.\"].join($/)]",90],["[$? == 0, data.chomp]",90],["data = File.read(tmp).chomp",90],["if data =~ /^Interrupted|^Timeout/",90],["data = ''",90]],"useCount":4439},{"word":"db","context":[["let migrations = rails#app().relglob(\"db/migrate/\",a:A.\"[0-9_]*\",\".rb\")",48],["let migrations = rails#app().relglob(\"db/migrate/\",\"[0-9]*[0-9]_*\",\".rb\")",48],["if RailsFilePath() =~ '\\<db/migrate/.*\\.rb$'",49],["let l:db = s:rgb_level(l:gz) - a:b",67],["if buffer.type_name('db-migration','db-schema')",78],["if buffer.type_name('db-migration','db-schema')",78],["return 'db/schema.rb'.suffix",90],["let l:db = <SID>rgb_level(l:gz) - a:b",265],["let l:drgb = (l:dr * l:dr) + (l:dg * l:dg) + (l:db * l:db)",332],["let l:drgb = (l:dr * l:dr) + (l:dg * l:dg) + (l:db * l:db)",332]],"useCount":3423},{"word":"dbext","context":[["call dbext#DB_windowClose(s:DB_resBufName())",43],["if dbext#DB_connect() == -1",231],["let terminator = dbext#DB_getWType(\"cmd_terminator\")",163],["let dbext_bin = s:DB_fullPath2Bin(dbext#DB_getWType(\"bin\"))",152],["let output = dbext#DB_getWType(\"cmd_header\")",141],["call s:DB_warningMsg( \"dbext:A valid database type must be chosen\" )",55],["if dbext#DB_getWType('version') < '5'",55],["call dbext#DB_disconnect()",50],["call s:DB_warningMsg(\"dbext:No statement to execute!\")",44],["\\ s:DB_option(' ', dbext#DB_getWTypeDefault(\"extra\"), '') .",42]],"useCount":3036},{"word":"debug","context":[["let s:debug = 0",69],["Rabbrev logd( logger.debug",49],["function! s:debug(str)",53],["\" debug logging {{{3",60],["\\ 'debug':                    0,",60],["\" debug constants",62],["setlocal makeprg=mxmlc\\ -compiler.debug\\ -compiler.incremental",64],["if s:debug",72],["call syntastic#log#debug(g:SyntasticDebugAutocommands,",72],["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,",176]],"useCount":4057},{"word":"def","context":[["hi def link plugPlus    Constant",90],["def run(self):",176],["def thread_vim_command(cmd):",138],["return def",115],["hi def link plugRelDate Comment",90],["hi def link plugError   Error",90],["def main():",102],["hi def link plugName    Label",90],["def esc arg",90],["command -nargs=+ HiLink hi def link <args>",2291]],"useCount":37442},{"word":"default","context":[["let g:neocomplete#keyword_patterns['default'] = '\\h\\w*'",89],["\\ 'default' : '',",75],["\"   'defaults' - a dict containing default values for the returned errors",76],["\" Define the default highlighting",114],["return a:default",213],["\" Define the default highlighting.",2028],["\" The default methods for highlighting.  Can be overridden later",248],["\" The default highlighting.",216],["set fileencodings=ucs-bom,utf-8,default,latin1",122],["return default",197]],"useCount":14308},{"word":"defaults","context":[["\" Define some defaults in case the included ftplugins don't set them.",86],["\"   'defaults' - a dict containing default values for the returned errors",76],["if has_key(a:options, 'defaults')",76],["\\ 'defaults': {'bufnr': bufnr(\"\")} })",72],["\" All defaults are specified in the DB_getDefault function.",167],["\\'\" included in your .vimrc as they are currently set to their defaults.',",49],["\\ 'defaults': {'bufnr': bufnr('')} })",55],["\" This contains the defaults settings for all database types",167],["\" Override our defaults if these were set by an included ftplugin.",89],["if str ==# \"defaults\"",47]],"useCount":2078},{"word":"define","context":[["\" Only define the function once.",430],["let beg = search('\\%('.&l:define.'\\).*'.dst.'\\>',\"w\")",49],["\" This should be before cErrInParen to avoid problems with #define ({ xxx })",54],["\" ctrlp. Note that this is optional, and if you do not define ctrlp colors",55],["\" Here we define the color map for ctrlp.  We check for the g:loaded_ctrlp",55],["\" we define it here so that included files can test for it",66],["\"        Define          preprocessor #define",69],["let beg = search('\\%('.&l:define.'\\).*'.src.'\\>',\"w\")",98],["call self.setvar('&define',self.define_pattern())",98],["setlocal define=",862]],"useCount":4045},{"word":"defined","context":[["end unless defined?(PlugStream)",90],["\" Note: the following keywords have already been defined:",40],["\" already defined styling for Syntastic highlight groups.",50],["silent! ruby ActiveRecord::Base.reset_subclasses if defined?(ActiveRecord)",49],["silent! ruby ActiveRecord::Base.clear_reloadable_connections! if defined?(ActiveRecord)",49],["\" If user defined highlighting group exists, then use them.",33],["call s:warn(\"No alternate file is defined\")",44],["\" Get the list of tags defined in the specified file and store them",33],["\" Check if the user has any profiles defined in his vimrc",34],["\" List the tags defined in the specified file in a Vim window",34]],"useCount":2020},{"word":"delcommand","context":[["\\|delcommand RustEmitAsm",13],["\\|delcommand RustExpand",13],["delcommand HtmlHiLink",72],["delcommand SetIsk",18],["\\|delcommand RustEmitIr",13],["delcommand JavaHiLink",17],["\\|delcommand RustRun",13],["delcommand HiLink",2378],["delcommand CSAHi",82],["silent! delcommand NeoCompleteDisable",12]],"useCount":2653},{"word":"delete","context":[["\" delete functions {{{",112],["call bookmark.delete()",108],["call delete(l:tmpname)",119],["$curbuf.delete lnum",90],["silent 1,$delete _",88],["silent %delete",88],["call delete(outfile)",87],["call delete(file)",80],["setlocal bufhidden=delete",677],["call delete(tmp)",168]],"useCount":6682},{"word":"delf","context":[["delf <SID>grey_colour",196],["delf <SID>rgb",261],["delf <SID>rgb_level",261],["delf <SID>rgb_number",261],["delf <sid>gui",291],["delf <SID>X",262],["delf <SID>grey_level",261],["delf <SID>grey_number",261],["delf <sid>cterm",291],["delf <sid>hi",306]],"useCount":3784},{"word":"delim","context":[["return delim",48],["let delim = s:Esc(delim)",46],["if delim == ''",46],["let delim = s:Esc(delim)",46],["\" get the len of the right delim",38],["let delim = a:delim",24],["\"grab the longest left delim that has a right",23],["function s:AddLeftDelimAligned(delim, theLine, alignIndx)",23],["let delim = a:delim",24],["\"   -delim: the delimiter to look for",23]],"useCount":2160},{"word":"delimiter","context":[["let l:delimiter = a:delimiter",46],["let l:delimiter = a:delimiter",46],["\"   -toReplace: the delimiter in str that is to be replaced",46],["\"   -left: the left comment delimiter",25],["\"   -right: the right comment delimiter",25],["\" Things always indented at col 1 (PHP delimiter: <?, ?>, Heredoc end) {{{",24],["\" Returns the left delimiter for sexy comments for this filetype or -1 if",23],["\" occurrence of this delimiter in the string with a given string",46],["\"   -delimiter: the delimiter we are validating",23],["\"any given \" is not a comment delimiter",23]],"useCount":2200},{"word":"depth","context":[["let fetch_opt = (has_tag && !empty(globpath(spec.dir, '.git/shallow'))) ? '--depth 99999999' : ''",71],["\"depth: the current depth in the tree for this call",36],["\"depth: the current depth in the tree for this call",36],["let output = output . childNodesToDraw[lastIndx]._renderToString(a:depth + 1, 1, add(copy(a:vertMap), 0), 1)",31],["\\ '--depth 1' . (s:git_version_requirement(1, 7, 10) ? ' --no-single-branch' : '') : ''",71],["\"for each depth in the tree",36],["let out = s:system(printf('git clone --depth 1 %s %s', s:plug_src, tmp))",73],["fetch_opt = (tag && File.exist?(File.join(dir, '.git/shallow'))) ? '--depth 99999999' : ''",71],["fetch_opt = '--depth 99999999' if self.tag and os.path.isfile(os.path.join(self.args['dir'], '.git/shallow')) else ''",71],["if a:depth > 1",44]],"useCount":2137},{"word":"details","context":[["\"             See http://sam.zoy.org/wtfpl/COPYING for more details.",1702],["\"              See http://sam.zoy.org/wtfpl/COPYING for more details.",100],["\" See the homepage above for screenshots and details.",69],["\" see :h vundle for more details or wiki for FAQ",68],["\\            'det': 'details',",35],["\" light.  See \":help highlight\" for details.",44],["\" Provides version control details for the current file.  Current version",57],["\"    Vim help pages for more details about installing Vim plugins.",34],["\" It is very important to understand all details before changing the",32],["\" details.",33]],"useCount":2524},{"word":"dict","context":[["elseif type == s:TYPE.dict",89],["function! s:buffer_getvar(var) dict abort",83],["let dict = {",118],["let dict = {}",176],["let a:dict[a:key] = add(get(a:dict, a:key, []), a:val)",83],["let a:dict[a:key] = add(get(a:dict, a:key, []), a:val)",83],["\\   'dict':    type({}),",89],["function! s:buffer_spec() dict abort",148],["return dict",128],["function! s:buffer_name() dict abort",124]],"useCount":15927},{"word":"dictionary","context":[["\" Return the info dictionary of the tag on the specified line. If the line",28],["setlocal dictionary=",870],["throw 'Invalid argument type (expected: string or dictionary)'",89],["\" Define dictionary.",73],["let g:neocomplete#sources#dictionary#dictionaries = {",64],["\" using Vim's dictionary feature |i_CTRL-X_CTRL-K|.",40],["\"Takes an optional dictionary param to specify how the output should be",37],["let ausgabe= &dictionary",33],["\" contains a pseudo-tag) return an empty dictionary.",28],["\\ \"|<c-x><c-k>| - Keywords in 'dictionary'.\\n\" .",30]],"useCount":2283},{"word":"did_ftplugin","context":[["\" Don't set 'b:did_ftplugin = 1' because that is xml.vim's responsability.",13],["let b:did_ftplugin = 1  \" Don't load another plugin for this buffer",14],["unlet b:did_ftplugin",25],["unlet! b:did_ftplugin",59],["let b:did_ftplugin=1",27],["if exists('b:did_ftplugin')",96],["if (exists(\"b:did_ftplugin\"))",113],["if exists(\"b:did_ftplugin\") | finish | endif",168],["if exists(\"b:did_ftplugin\")",866],["let b:did_ftplugin = 1",1056]],"useCount":2448},{"word":"did_indent","context":[["unlet b:did_indent",46],["if exists('b:did_indent')",110],["unlet! b:did_indent",112],["let b:did_indent = 1",1008],["if !exists(\"b:did_indent\")",13],["if exists(\"b:did_indent\")",937],["\"let b:did_indent = 1",16],["\"if exists(\"b:did_indent\")",14]],"useCount":2256},{"word":"diff","context":[["elseif getline('.') =~# '^index ' && getline(line('.')-1) =~# '^diff --git \\%(a/.*\\|/dev/null\\) \\%(b/.*\\|/dev/null\\)'",73],["let c += getwinvar(nr,'&diff')",74],["if getwinvar(0, '&diff')",75],["elseif getline('.') =~# '^diff --git \\%(a/.*\\|/dev/null\\) \\%(b/.*\\|/dev/null\\)'",76],["command! -nargs=0 -bar PlugDiff    call s:diff()",89],["function! s:diff()",90],["if !empty(diff)",99],["if has(\"diff\")",102],["if &diff",164],["\" Additional diff highlighting",183]],"useCount":4945},{"word":"dir","context":[["return dir",147],["let dir = getcwd()",667],["execute cd.'`=dir`'",604],["let b:git_dir = s:repo().dir()",228],["if isdirectory(spec.dir)",182],["if dir !=# ''",153],["if !isdirectory(dir)",152],["for dir in dirs",145],["if exists('l:dir')",150],["if self.dir() =~# '/\\.git$'",124]],"useCount":22461},{"word":"directory","context":[["\" 2.  Next, move or clone the `vim-colors-solarized` directory so that it is",66],["let type = 'directory'",95],["exists = File.directory? dir",89],["\\ 'Try to call plug#begin with a valid directory', g:plug_home))",89],["return s:err(printf('Invalid plug directory: %s. '.",85],["let directory = ''",85],["if directory == ''",84],["\" Create cache directory.",77],["\" 2.  Move `solarized.vim` to your `.vim/colors` directory.",67],["\"     b. **or move manually into the pathogen bundle directory:**",66]],"useCount":9579},{"word":"dirname","context":[["keepj call s:SetRexDir(a:islocal,dirname)",40],["if dirname !~ '/$'",40],["let res = s:findit('\\v\\s*<require\\s*\\(=\\s*File.dirname\\(__FILE__\\)\\s*\\+\\s*[:'.\"'\".'\"](\\f+)>.=',expand('%:h').'/\\1')",49],["let res = s:findit('\\v<File.dirname\\(__FILE__\\)\\s*\\+\\s*[:'.\"'\".'\"](\\f+)>['.\"'\".'\"]=',expand('%:h').'\\1')",49],["return dirname",61],["let dirname= dirname.'/'",65],["let b:netrw_curdir= dirname",58],["if dirname == \"\"",56],["if dirname !~ dirpat",40],["let dirname= dirname.'/'",65]],"useCount":4390},{"word":"display","context":[["syn match\tcIncluded\tdisplay contained \"<[^>]*>\"",72],["syn region\tcIncluded\tdisplay contained start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+",73],["syn match\tcFormat\t\tdisplay \"%%\" contained",74],["call eclim#display#signs#Update()",80],["syn match\tcParenError\tdisplay \"[\\])]\"",82],["\" toggles the display of hidden files",97],["\\ display",226],["syn match\tcParenError\tdisplay \")\"",147],["\" If it is, then don't display the tags for this file",98],["let a:world.state = 'display'",141]],"useCount":14017},{"word":"div","context":[["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62],["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62],["<div class=\"select-menu-no-results\">Nothing to show</div>",45],["</div>",1139],["let tag_name = 'div'",64],["<div class=\"select-menu-no-results\">Nothing to show</div>",45],["\"      |</div>",48],["<div class=\"container\">",54],["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62],["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62]],"useCount":5654},{"word":"do","context":[["setlocal cinwords=if,else,while,do,for,switch",886],["\" Only do this when not done yet for this buffer",496],["mtx.synchronize do",359],["let type = type(spec.do)",89],["\" furnished to do so, subject to the following conditions:",313],["do",158],["\" do nothing",128],["\" Make sure the continuation lines below do not cause problems in",115],["loop do",91],["result.each_with_index do |line, offset|",90]],"useCount":9906},{"word":"doc","context":[["\" check doc/SingleCompile.txt for more information",67],["\" Invoke :helptags on all non-$VIM doc directories in runtimepath.",68],["let docd = join([spec.dir, 'doc'], '/')",90],["\\'d': 'doc',",51],["\" \"doc\" subdirectory) for information on options, usage, the Toggle Background",47],["\" :doc:",43],["\\     ? !(empty(glob(a:rtp.'/doc/*.txt', 1)) && empty(glob(a:rtp.'/doc/*.??x', 1)))",41],["\\   && (!filereadable(a:rtp.'/doc/tags') || filewritable(a:rtp.'/doc/tags'))",42],["\\   && (!filereadable(a:rtp.'/doc/tags') || filewritable(a:rtp.'/doc/tags'))",42],["return isdirectory(a:rtp.'/doc')",42]],"useCount":2039},{"word":"does","context":[["\"This method is actually a wrapper for the OpenRecursively2 method which does",42],["\" Syntax: JSON does not allow strings with single quotes, unlike JavaScript.",35],["\" as part of CTRL-\\ CTRL-N typemap, which basically just does the same",37],["\" diplays your search result in the new window, and one that does the same",37],["\" thing, but does a vertical split instead (vim 6 only).",37],["\" Hitting CTRL-space *twice* before the search type does a vertical",40],["\" nicer if we could nnoremap <buffer> ... however vim does",48],["\"variable is only initialised if it does not exist prior",47],["echomsg \"entry '\".a:arg.\"' does not exist\"",45],["\" does not re-read the colorscheme (or .vimrc for that matter) so any `has_gui`",66]],"useCount":2517},{"word":"doesn","context":[["\" note that link syntax to avoid duplicate configuration doesn't work with the",73],["\" Current line doesn't belong to any of the displayed tag types",66],["\" For some reason this doesn't work as a regular set command,",62],["\" Unfortunately this doesn't very well work for // type of comments :-(",100],["\" XXX: Vim doesn't call autocmd commands in a predictible",62],["\" Only used when an item doesn't have highlighting yet",106],["\" ag is fast enough that CtrlP doesn't need to cache",110],["\" If the file doesn't support tag listing, skip it",164],["\" Only when an item doesn't have highlighting yet",254],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588]],"useCount":4646},{"word":"don","context":[["\" Define some defaults in case the included ftplugins don't set them.",86],["\" don't use standard HiLink, it will not work with included syntax files",78],["\" the first two items don't have an impact, but better safe",73],["\" (the numbers don't show up) so I made it a VimEnter event",62],["\"don't care about warnings",37],["\" If it is, then don't display the tags for this file",98],["\" You can use the default (don't set any parameters), or you can",53],["\" We don't want to use Ctrl-p as the mapping because",50],["\" make sure we don't comment lines that are just spaces or tabs or empty.",39],["\" The f makes it find the enclosure so you don't have",42]],"useCount":3403},{"word":"done","context":[["\" we are done with this line",46],["\" libraries is done. I.e. set the variable like this:",43],["while !done",76],["let done = 1",129],["\" Only do this when not yet done for this buffer",33],["let done = 0",145],["\" Quit when menu translations have already been done.",185],["\" Only do this when not done yet for this buffer",496],["\"Note that all comparisons are done with ==?",32],["\" For version 5.7 and earlier: only when not done already",1587]],"useCount":3734},{"word":"dot","context":[["\"Maintainer:  LCD 47 <lcd047 at gmail dot com>",278],["\"Maintainer:  Martin Grenfell <martin.grenfell at gmail dot com>",344],["\"hexadecimal floating point number, with leading digits, optional dot, with exponent",70],["\" Maintainer:  Martin Grenfell <martin.grenfell at gmail dot com>",73],["\"Maintainer:  Gregor Uhlenheuer <kongo2002 at gmail dot com>",106],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["\"floating point number, with dot, optional exponent",212],["\"integer number, or floating point number without a dot and with \"f\".",150],["\"floating point number, starting with a dot, optional exponent",200],["\"floating point number, without dot, with exponent",202]],"useCount":3917},{"word":"e","context":[["for e in a:errors",144],["setlocal indentkeys=0{,0},:,0#,!^F,o,O,e",706],["setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e",848],["%s/\\s\\+$//e",150],["if res != \"\"|return res.(fnamemodify(res,':e') == '' ? '.rb' : '')|endif",98],["set guioptions-=e",99],["except Exception, e:",98],["\\ {'short' : 'e', 'long' : 'enumerators', 'fold' : 0, 'stl' : 0},",103],["for e in loclist",266],["let ext = expand(\"%:e\")",104]],"useCount":19848},{"word":"each","context":[["pids.each { |pid| Process.kill 'INT', pid.to_i rescue nil }",47],["\"\t? List of the procedure's effect on each external variable, control, or other element.",51],["echo \"Press 'L' on each line to load plugin, or 'U' to update\"",89],["\" Sorts a list with expression to compare each two values.",58],["cal add(items[0], each)",60],["pids.each { |pid| Process.kill 'TERM', pid.to_i rescue nil }",90],["threads.each { |t| t.raise Interrupt }",90],["threads.each { |t| t.join rescue nil }",180],["\" For each row returned",66],["echo \"Press 'X' on each block to revert the update\"",89]],"useCount":4300},{"word":"echo","context":[["echo \"\"",266],["echo 'Feature not yet available'",250],["echo \"\\n\"",232],["\"msg: the message to echo",135],["echo \" \"",131],["echo msg",134],["echo ''",209],["echo a:msg",193],["silent echo output",172],["echo",456]],"useCount":12488},{"word":"echoerr","context":[["echoerr \"warning: unknown context \".matchstr(getline('.'),'^\\l*')",77],["echoerr v:exception",62],["return \"echoerr 'E345: Can''t find file \\\"\".a:file.\"\\\" in runtimepath'\"",52],["echoerr \"NERDTree: this plugin requires vim >= 7. DOWNLOAD IT! You'll thank me later!\"",47],["if cmd =~# '^echoerr'",67],["if result =~# '^\\%(write\\|wq\\|echoerr\\)'",73],["return 'echoerr '.string('fugitive: '.error)",76],["return 'echoerr '.string(v:errmsg)",76],["return \"echoerr 'fugitive: unrecognized git type'\"",76],["return 'echoerr v:errmsg'",1463]],"useCount":2720},{"word":"echohl","context":[["echohl NONE",483],["echohl ErrorMsg",1074],["echohl WarningMsg |",171],["echohl GPGWarning",197],["echohl Normal",302],["echohl Error",336],["echohl WarningMsg",2001],["echohl None",3576],["echohl Search",133],["\\ echohl None",168]],"useCount":12906},{"word":"echomsg","context":[["echomsg a:msg",200],["echomsg 'Executed command: \"' . ctags_cmd . '\"'",66],["echomsg 'Command output:'",67],["echohl WarningMsg|echomsg 'VCSCommand requires at least VIM 7.0'|echohl None",71],["return 'echomsg '.string(url)",72],["echohl WarningMsg | echomsg s:MsgInsNotAvail  | echohl None",78],["echomsg a:str",269],["echomsg \"\"",98],["echomsg line",108],["echomsg \"NERDTree: \" . a:msg",59]],"useCount":5032},{"word":"echon","context":[["echon \"vim-go: \" | echohl Identifier | echon \"testing ...\" | echohl None",37],["echon \"vim-go: \" | echohl Function | echon \"[test] PASS\" | echohl None",35],["redraws! | echon \"vim-go: [run] \" | echohl Function | echon \"SUCCESS\"| echohl None",35],["redraws! | echon \"vim-go: [run] \" | echohl ErrorMsg | echon \"FAILED\"| echohl None",35],["redraws! | echon \"vim-go: [run] \" | echohl ErrorMsg | echon \"FAILED\"| echohl None",35],["redraws! | echon \"vim-go: [run] \" | echohl Function | echon \"SUCCESS\"| echohl None",35],["echon \"vim-go: \" | echohl Identifier | echon \"testing ...\" | echohl None",37],["silent echon strftime('%H:%M:%S') . ': ' . a:msg . \"\\n\"",47],["echon \"\\rAdded \" . fcnt . \" files to the taglist\"",62],["echon \"\\r                                                              \"",94]],"useCount":1977},{"word":"eclim","context":[["let command = substitute(command, '<encoding>', eclim#util#GetEncoding(), '')",77],["call eclim#display#signs#Update()",80],["let result = eclim#ExecuteEclim(command)",85],["let project = eclim#project#util#GetCurrentProjectName()",392],["if !eclim#project#util#IsCurrentFileInProject()",231],["call eclim#util#Echo(result)",194],["call eclim#AddVimSetting(",178],["let file = eclim#project#util#GetProjectRelativeFilePath()",170],["let result = eclim#Execute(command)",121],["let args = eclim#util#ParseCmdLine(cmdLine)",113]],"useCount":5749},{"word":"edit","context":[["silent! edit!",434],["nnoremap <buffer> <silent> cc    :<C-U>exe <SID>Edit('edit',0,<SID>buffer().containing_commit())<CR>",68],["nnoremap <buffer> <silent> R :<C-U>edit<CR>",68],["nnoremap <buffer> <silent> C     :<C-U>exe <SID>Edit('edit',0,<SID>buffer().containing_commit())<CR>",68],["execute s:Edit('edit', 0, commit.a:suffix.':'.path)",67],["nnoremap <buffer> <silent> i    :<C-U>exe <SID>BlameCommit(\"exe 'norm q'<Bar>edit\")<CR>",67],["nnoremap <buffer> <silent> <CR>    :<C-U>exe <SID>GF(\"edit\")<CR>",77],["silent edit!",117],["execute 'keepalt edit '.s:fnameescape(msgfile)",124],["exe \":silent! edit \".path",132]],"useCount":4374},{"word":"else","context":[["\"               notice is copied with it. Like anything else that's free,",166],["\"else",174],["\"     else",178],["} else {",259],["\\\"else if (\".g:rs.\"...\".g:re.\")\\<cr>{\\<cr>\".g:rs.\"...\".g:re.\"\\<cr>} \".",90],["\" else",268],["\\ else |",465],["setlocal cinwords=if,else,while,do,for,switch",886],["else:",1845],["else",144266]],"useCount":154008},{"word":"elseif","context":[["elseif a:n == 9",329],["elseif a:n == 6",329],["elseif a:n == 5",329],["elseif a:n == 8",329],["elseif a:n == 25",333],["elseif a:n == 3",340],["elseif a:n == 4",341],["elseif a:n == 1",659],["elseif a:n == 2",669],["elseif exists(\"b:current_syntax\")",2724]],"useCount":62594},{"word":"emmet","context":[["call emmet#util#setContent(block, content)",113],["let indent = emmet#getIndentation(type)",77],["Plug 'mattn/emmet-vim'",77],["if emmet#useFilter(filters, 'e')",72],["call emmet#util#selectRegion(block)",87],["let curpos = emmet#util#getcurpos()",87],["if emmet#util#regionIsValid(block)",97],["let type = emmet#getFileType()",253],["let rtype = emmet#lang#exists(type) ? type : 'html'",185],["let content = emmet#util#getContent(block)",106]],"useCount":3977},{"word":"empty","context":[["if empty(fileinfo)",255],["if !empty(errors)",247],["if empty(bin_path)",191],["if empty(todo)",180],["if !empty(s:first_rtp)",179],["if !empty(types)",156],["if !empty(names)",155],["if !empty(filtered) | return filtered | endif",139],["if !empty(name)",299],["if !empty(errors) && !a:bang",128]],"useCount":25091},{"word":"en","context":[["en",7791],["setlocal spelllang=en",846],["if !s:focus | retu | en",230],["en | endfo",160],["set helplang=en",104],["en | en",64],["if empty(line) | retu | en",56],["if !s:dosigns() | retu | en",60],["if j2l | cal ctrlp#j2l(j2l) | en",60],["en | en",64]],"useCount":11908},{"word":"enabled","context":[["if get(g:, 'airline#extensions#tabline#enabled', 0)",33],["\" Load the syntax highlighting defaults, if it's enabled.",36],["let g:airline#extensions#tabline#enabled = 1",252],["\" including HTML,JavaScript,SQL even if not enabled via options",37],["if s:enabled",43],["let g:airline#extensions#syntastic#enabled = 1",45],["let s:enabled = 1",50],["\" Turn filetype detection off and back on again if it was already enabled.",56],["\" Returns true if paste mode is enabled",56],["let g:airline#extensions#whitespace#enabled = 1",34]],"useCount":2210},{"word":"encoding","context":[["\" encoding",47],["set encoding=utf-8",366],["let output = s:iconv(output, 'char', &encoding)",48],["# encoding: UTF-8",49],["let char = strtrans(iconv(char, 'utf-8', &encoding))",56],["\" Set utf8 as standard encoding and en_US as the standard language",58],["if &encoding == 'utf-8'",66],["if &encoding != 'utf-8'",76],["let command = substitute(command, '<encoding>', eclim#util#GetEncoding(), '')",77],["set encoding=utf8",111]],"useCount":3037},{"word":"end","context":[["\\ end=\">\"",231],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["augroup end",363],["call plug#end()",607],["end",19848],["\\ end=\"»\"",169],["\\ end=\"^\\ze\\%(\\s*$\\|=\\K\\)\"",160],["let end = s:endof(beg)",147],["call vundle#end()",145],["\\ end=\"}\"",142]],"useCount":46657},{"word":"endf","context":[["endf \"}}}2",27],["vnoremap <buffer> <silent> [] m':\u0016\u0015exe \"normal! gv\"\u0016|call search('^\\s*endf*\\%[unction]\\>', \"bW\")\u0016",12],["nnoremap <buffer> <silent> ][ m':call search('^\\s*endf*\\%[unction]\\>', \"W\")\u0016",12],["nnoremap <buffer> <silent> [] m':call search('^\\s*endf*\\%[unction]\\>', \"bW\")\u0016",12],["vnoremap <buffer> <silent> ][ m':\u0016\u0015exe \"normal! gv\"\u0016|call search('^\\s*endf*\\%[unction]\\>', \"W\")\u0016",12],["\" endf",78],["endf \" }}}",58],["endf \"}}}",173],["endf",17797],["\"   endf",57]],"useCount":18238},{"word":"endfor","context":[["\"         endfor",18],["\" endfor",47],["endfor\"}}}",54],["\"endfor",64],["endfor",49792],["\"    endfor",24],["\"     endfor",26],["endfor\t\" for every file in the marked list",13],["\"  endfor",27],["endfor\t\" ---------  read line  ---------",12]],"useCount":50112},{"word":"endfu","context":[["endfu \"}}} }}}",12],["endfu \"}}}",96],["endfu",3135]],"useCount":3243},{"word":"endfun","context":[["endfun",12791],["endfun \"}}}",782],["endfun  \" >>>",18],["\" endfun",39],["endfun \" }}}",60],["endfun \" }}} }}}",11],["\\ 'endfun'",12],["endfun \" >>>",16]],"useCount":13729},{"word":"endfunc","context":[["endfunc",3992],["endfunc \"}}}",365],["endfunc \" }}}",14],["endfunc!",13],["\" endfunc",12]],"useCount":4396},{"word":"endfunction","context":[["\"endfunction",187],["endfunction!",196],["endfunction",176084],["endfunction\"}}}",17819],["endfunction \" }}}",8301],["endfunction \"}}}",6895],["endfunction \" }}}2",4919],["endfunction \" }}}1",762],["\" endfunction",223],["endfunction \">>>",199]],"useCount":218086},{"word":"endif","context":[["\"     endif",368],["endif\"}}}",309],["endif \" }}}",413],["if res != \"\"|return res|endif",605],["\"endif",980],["if s:l < 1 | let s:l = 1 | endif",1115],["\" endif",1166],["\\ endif",1660],["endif \"}}}",413],["endif",539714]],"useCount":559472},{"word":"endtry","context":[["endtry",15670],["\" endtry",12],["\"       endtry",12],["\"endtry",16],["endtry \"}}}",20],["catch | endtry",20],["\"         endtry",24],["try | silent undojoin | catch | endtry",44],["\"   endtry",77]],"useCount":15895},{"word":"endwhile","context":[["\"   endwhile",71],["endwhile",23220],["while s:col <= s:len && s:id == synID(s:lnum, s:col, 1) | let s:col = s:col + 1 | endwhile",17],["if MESSAGES('E588', \":endwhile without :while\")",21],["\" \tendwhile",16],["\"       endwhile",15],["endwhile \" groups =~ '[^,:]'",13],["\"endwhile",22],["\"  endwhile",29],["endwhile\"}}}",42]],"useCount":23541},{"word":"entry","context":[["unlet! entry.bufnr",154],["let relative_paths += [entry[strlen(path) : -strlen(suffix)-1]]",51],["for entry in full_paths",51],["if bufname(entry.bufnr) =~ ':'",76],["let entry.filename = s:repo().translate(':0:'.bufname(entry.bufnr))",76],["let entry.filename = s:repo().translate(bufname(entry.bufnr))",76],["\" `s:loaded` entry can be missing if PlugUpgraded",89],["for entry in list",80],["let entry.filename = s:repo().translate(':0:'.bufname(entry.bufnr))",76],["let entry.filename = s:repo().translate(bufname(entry.bufnr))",76]],"useCount":2956},{"word":"env","context":[["\"   'env' - environment variables to set before running the checker",54],["let env = syntastic#util#isRunningWindows() ? {} : { 'TERM': 'dumb' }",59],["if has_key(a:options, 'env') && len(a:options['env'])",54],["if has_key(a:options, 'env') && len(a:options['env'])",54],["for key in keys(a:options['env'])",54],["\\ 'env': env,",53],["\\ 'env': env,",53],["let command = 'env GIT_EDITOR=false '",71],["let prefix = 'env GIT_INDEX_FILE='.s:shellesc(a:1).' '",70],["\" save options and locale env variables {{{3",60]],"useCount":2494},{"word":"environment","context":[["let env = s:environment()",49],["\" environment.",49],["return ['config/application.rb', 'config/environment.rb']",50],["\" Overrides dependent on user specified values and environment \"{{{",51],["\"   'env' - environment variables to set before running the checker",54],["\" restore environment variables {{{3",54],["\" set environment variables {{{3",54],["\"Emulates the :lmake command. Sets up the make environment according to the",65],["\"options given, runs make, resets the environment, returns the location list",65],["return \"config/application.rb\\nconfig/environment.rb\"",66]],"useCount":1979},{"word":"err","context":[["return s:error(err)",147],["for err in a:errors",102],["function! s:err(msg)",93],["return s:err('Argument missing: plugin name(s) required')",89],["return s:err(printf('Unknown plugin%s: %s', s, join(unknowns, ', ')))",89],["return s:err('Unable to determine plug home. Try calling plug#begin() with a path argument.')",89],["return s:err(v:exception)",89],["return s:err('plug#begin was not called')",178],["return s:err('Call plug#begin() first')",89],["return s:err('Invalid number of arguments (1..2)')",89]],"useCount":3494},{"word":"errmsg","context":[["let v:errmsg = \"\"",256],["let v:errmsg = 'fugitive: '.message",76],["let v:errmsg = 'fugitive: '.a:string",76],["let v:errmsg = 'fugitive: rm not supported here'",77],["let v:errmsg = a:str",78],["if v:errmsg != \"\"",78],["echo v:errmsg",81],["throw v:errmsg",95],["let v:errmsg = ''",126],["return 'echoerr v:errmsg'",1463]],"useCount":3971},{"word":"error","context":[["call neobundle#installer#error(",137],["return s:error(\"Rabbrev: invalid arguments\")",147],["break\t\t\" discard error for $VIMNOERRTHROW",125],["except vim.error:",114],["return 'error'",106],["cc 1 \"jump to first error if there is any",100],["let error = 1",97],["return s:error(\"E471: Argument required\")",97],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156],["return s:error(err)",147]],"useCount":10347},{"word":"errorformat","context":[["CompilerSet errorformat=",123],["return SyntasticMake({ 'makeprg': makeprg, 'errorformat': errorformat })",246],["\\ 'errorformat': errorformat })",349],["let errorformat =",828],["\\ 'errorformat': errorformat,",859],["\\ 'errorformat': errorformat,",859],["setlocal errorformat=",902],["\\ 'errorformat': errorformat })",349],["\\ 'errorformat':",291],["return SyntasticMake({ 'makeprg': makeprg, 'errorformat': errorformat })",246]],"useCount":7282},{"word":"errors","context":[["call go#list#Window(l:listtype, len(errors))",130],["for e in a:errors",144],["call add(s:update.errors, name)",150],["let errors = []",169],["if !empty(errors)",247],["return errors",249],["if !empty(errors) && !a:bang",128],["return a:errors",106],["for err in a:errors",102],["let errors = getqflist()",101]],"useCount":7639},{"word":"esc","context":[["def esc arg",90],["execute 'cd' s:esc(spec.dir)",90],["function! s:esc(path)",90],["d = esc dir.sub(%r{[\\\\/]+$}, '')",90],["if a:esc",89],["silent! execute 'helptags' s:esc(docd)",89],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif",81],["def esc(name):",79],["execute 'source' s:esc(vim)",81]],"useCount":3399},{"word":"escape","context":[["return escape(a:path, ' ')",89],["\\ . join(map(afters, 'escape(v:val, \",\")'), ',')",79],["let rtp      = join(map(rtps, 'escape(v:val, \",\")'), ',')",79],["\"are set with :let, so dont escape spaces.",81],["exec \"let SuperTabKey = \\\"\" . escape(SuperTabPlug, '<') . \"\\\"\"",88],["return escape(a:path, ' ,')",89],["let l:pattern = escape(@\", '\\\\/.*$^~[]')",78],["return '\"'.escape(a:arg, '\"').'\"'",78],["\\ escape(expand('<sfile>'), ' ')",155],["return escape(a:file,\" \\t\\n*?[{`$\\\\%#'\\\"|!<\")",118]],"useCount":7271},{"word":"et","context":[["\" vim:ts=4:sw=4:et",287],["\" vim: sw=2 ts=2 et",134],["\" vim:set et:",151],["\" vim:set et ts=2 sts=2 sw=2 tw=0:",333],["\" vim:set et sw=2:",103],["\" vim: ts=2 sw=2 et",99],["\" vim: ts=4 sw=4 et",163],["\" vim: et ts=2 sts=2 sw=2",546],["\" vim: set et sts=4 sw=4:",659],["\" vim: set sw=4 sts=4 et fdm=marker:",1085]],"useCount":5011},{"word":"etc","context":[["\"        Operator        \"sizeof\", \"+\", \"*\", etc.",70],["\"        StorageClass    static, register, volatile, etc.",69],["\"        Conditional     if, then, else, endif, switch, etc.",69],["\"       *Type            int, long, char, etc.",69],["\"        Repeat          for, do, while, etc.",69],["\"    string inner (punc, code, etc): #00A0A0  0:160:160",55],["\"        PreCondit       preprocessor #if, #else, #endif, etc.",69],["\" Convert a list to a path with escaped spaces for 'path', 'tag', etc.",67],["\"        Structure       struct, union, enum, etc.",69],["\"        Label           case, default, etc.",69]],"useCount":4059},{"word":"eval","context":[["if eval(substitute(a:f, 'v:val', string(a:xs[i]), 'g'))",93],["G_RETRIES = int(vim.eval('get(g:, \"plug_retries\", 2)')) + 1",79],["plugs = vim.eval('s:update.todo')",79],["G_PULL = vim.eval('s:update.pull') == '1'",79],["G_TIMEOUT = int(vim.eval('get(g:, \"plug_timeout\", 60)'))",79],["G_PROGRESS = vim.eval('s:progress_opt(1)')",79],["\" FIXME: Escaping is incomplete. We could use shellescape with eval,",89],["nthreads = int(vim.eval('s:update.threads'))",79],["self.maxy = int(vim.eval('winheight(\".\")'))",79],["mac_gui = vim.eval('s:mac_gui') == '1'",79]],"useCount":3808},{"word":"except","context":[["except OSError:",95],["except queue.Empty:",139],["except CmdTimedOut:",79],["# Any exception except those above print stack trace",79],["except PlugError as exc:",59],["except:",470],["except Exception, e:",98],["except vim.error:",114],["except ImportError:",133],["except KeyboardInterrupt:",150]],"useCount":2439},{"word":"exception","context":[["call unite#print_error(v:exception)",54],["Xout v:exception \"in\" v:throwpoint",159],["\"Throws NERDTree.Path.InvalidArguments exception.",49],["call s:ReportError(v:exception)",53],["return s:err(v:exception)",89],["echo v:exception",87],["# Any exception except those above print stack trace",79],["let error = v:exception",63],["echoerr v:exception",62],["echomsg v:exception",56]],"useCount":2323},{"word":"exe","context":[["exe \"source \" . fnameescape(s:sx)",235],["exe s:tlist_{fidx}_start",231],["silent exe 'bwipe ' . s:wipebuf",213],["exe cmd",178],["exe \":\".pos1",148],["exe l:restore",148],["exe 'redir! > ' . s:dbext_tempfile",163],["exe a:cmd",218],["exe s:l",1115],["exe winnum . 'wincmd w'",372]],"useCount":53738},{"word":"exec","context":[["exec winnr . 'winc w'",140],["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["exec cmd",408],["exec \"hi \" . a:group . \" ctermfg=\" . s:cterm(a:ctermfg)",291],["exec \"hi \" . a:group . \" ctermbg=\" . s:cterm(a:ctermbg)",291],["exec \"hi \" . a:group . \" guifg=#\" . s:gui(a:guifg)",291],["exec \"hi \" . a:group . \" guibg=#\" . s:gui(a:guibg)",291],["exec \"hi \" . a:group . \" guibg=#\" . a:bg . \" ctermbg=\" . <SID>rgb(a:bg)",229],["exec \"hi \" . a:group . \" guifg=#\" . a:fg . \" ctermfg=\" . <SID>rgb(a:fg)",229],["exec s:dbext_prev_winnr.\"wincmd w\"",165]],"useCount":16680},{"word":"executable","context":[["if !executable(\"ruby\")",94],["if !executable(self.getExec())",118],["if executable('ag')",276],["if !executable('git')",133],["if executable('curl')",61],["if\texecutable(Exe) && getftime(Exe) >= getftime(Obj) && getftime(Obj) >= getftime(Sou)",64],["let job.result  = jid < 0 ? 'sh is not executable' :",66],["elseif executable('xdg-open')",72],["let old_mode = executable(s:repo().tree(path)) ? '100755' : '100644'",75],["\\   (!isdirectory('/proc') && executable('sw_vers')))",77]],"useCount":5473},{"word":"execute","context":[["execute 'tabnext '.tab",230],["execute 'tabnext '.mytab",225],["execute winnr.'wincmd w'",453],["execute cd.'`=s:repo().tree()`'",463],["execute cd.'`=dir`'",604],["execute lnum",311],["silent execute '1,'.last.'delete_'",220],["call g:RubyDebugger.queue.execute()",168],["execute cmd",191],["execute printf(",248]],"useCount":21484},{"word":"exists","context":[["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd ' : 'cd '",653],["if exists(\"b:current_syntax\")",2491],["if exists(\"g:netrw_port\") && g:netrw_port != \"\"",342],["if exists(\"b:did_ftplugin\")",866],["if exists(\"b:did_indent\")",937],["if exists(\"b:is_bash\")",384],["elseif exists(\"b:current_syntax\")",2724],["if !exists(\"main_syntax\")",647],["if exists('g:vundle_installing_plugins')",404],["if exists(\"syntax_on\")",3421]],"useCount":80852},{"word":"expand","context":[["call s:throw('not a git repository: '.expand('%:p'))",152],["let expand = substitute(expand, '\\${cursor}', '', 'g')",158],["let v:this_session=expand(\"<sfile>:p\")",241],["let s:sx = expand(\"<sfile>:p:r\").\"x.vim\"",241],["return matchstr(expand('<sfile>'), '<SNR>\\zs\\d\\+\\ze__SID$')",278],["let expand = substitute(expand, '\\${cursor}', '', 'g')",158],["return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '<SNR>\\d\\+_'),''))",164],["let g:colors_name = expand(\"<sfile>:t:r\")",180],["if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''",240],["\\ escape(expand('<sfile>'), ' ')",155]],"useCount":20412},{"word":"expandtab","context":[["\" vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:",28],["\" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker",51],["if &expandtab",42],["setl expandtab",30],["set expandtab",892],["\" vim: foldmethod=marker:expandtab:ts=4:sts=4",39],["\" vim:fdm=marker:nowrap:ts=4:expandtab:",30],["if !&expandtab",90],["\" vim:tabstop=2:shiftwidth=2:expandtab:foldmethod=marker:textwidth=79",111],["setlocal expandtab",993]],"useCount":2811},{"word":"expr","context":[["return sort(a:list, a:expr)",61],["\" v:val is used in {expr}",136],["inoremap <expr><BS> neocomplete#smart_close_popup().\"\\<C-h>\"",66],["let expr = substitute(expr, 'v:memo', string(memo), 'g')",65],["return a:expr",86],["let memo = eval(expr)",67],["let expr = substitute(expr, 'v:memo', string(memo), 'g')",65],["setlocal foldmethod=expr",232],["inoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"",79],["let result = iconv(a:expr, a:from, a:to)",82]],"useCount":5754},{"word":"ext","context":[["elseif ext == \"mn\"",49],["let ext = matchstr(def,'\\.\\zs.*')",49],["return 'Git! diff --no-ext-diff '.s:shellesc(arg)",44],["let ext = expand(\"%:e\")",104],["elseif ext == \"rxml\" || ext == \"builder\"",49],["elseif ext == \"rxml\" || ext == \"builder\"",49],["let success = search('\\C^\\s*'.variable.'\\s*\\.\\s*\\zs'.ext.'\\>','',end)",49],["for ext in extends",70],["if ext =~? '^\\%(rhtml\\|erb\\|dryml\\)$'",98],["elseif ext == \"rjs\"",49]],"useCount":2757},{"word":"extend","context":[["call extend(opts, a:arg)",89],["fd = IO.popen(cmd).extend(PlugStream)",90],["call extend(extend(buffer,s:buffer_prototype,'keep'),s:abstract_prototype,'keep')",82],["\\ extend(copy(s:update.errors), [s:update.threads]))",88],["call extend(extend(buffer,s:buffer_prototype,'keep'),s:abstract_prototype,'keep')",82],["call extend(s:lines, [",77],["call extend(res_lines, lines)",72],["let options = extend({",179],["\\ extend",147],["return extend([printf('x %s:', a:name)], lines)",90]],"useCount":5589},{"word":"extensions","context":[["call airline#extensions#ctrlp#init(s:ext)",36],["call airline#extensions#syntastic#init(s:ext)",36],["set tabline=%!airline#extensions#tabline#get()",37],["call airline#extensions#commandt#init(s:ext)",36],["call airline#extensions#tagbar#init(s:ext)",36],["let g:airline#extensions#tabline#enabled = 1",252],["let g:airline#extensions#tabline#fnamemod = ':t'",53],["let g:airline#extensions#syntastic#enabled = 1",45],["function! airline#extensions#load()",38],["let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)",37]],"useCount":5120},{"word":"extra","context":[["\" one extra column is needed to include the vertical split",54],["\" Add a bit extra margin to the left",56],["\"       *Todo            anything that needs extra attention; mostly the",69],["\" With a map leader it's possible to do extra key combinations",62],["let extra = \"\"",87],["\" Set extra options when running in GUI mode",54],["\\ s:DB_option(' ', dbext#DB_getWTypeDefault(\"extra\"), '') .",42],["call feedkeys(a:prefix . substitute(a:map, '^<Plug>', \"\\<Plug>\", '') . extra)",77],["let extra .= nr2char(c)",90],["let extra = ''",232]],"useCount":2132},{"word":"f","context":[["if f !=# '' | let jump = f | endif",150],["if eval(substitute(a:f, 'v:val', string(a:xs[i]), 'g'))",93],["let found = filter(found, 'stridx(v:val, f) != 0')",90],["if !has_key(allowed, f) && isdirectory(f)",90],["call append(line('$'), '- ' . f)",90],["let line = s:sub(line,'([:\"'.\"'\".']|\\%[qQ]=[[({<])=\\f*$','')",98],["if f !=# '' | let jump = f | endif",150],["\"integer number, or floating point number without a dot and with \"f\".",150],["\\ {'short' : 'f', 'long' : 'functions', 'fold' : 0, 'stl' : 1}",150],["let f = self.name()",236]],"useCount":25621},{"word":"false","context":[["first_line = false",90],["ing  = ![true, false].include?(type)",90],["let $GIT_EDITOR = 'false'",109],["[false, data]",90],["let command = 'env GIT_EDITOR=false '",71],["running = false",90],["[false, [\"Invalid URI: #{current_uri}\",",90],["[false, [data.chomp, \"PlugClean required.\"].join($/)]",90],["[false, e.is_a?(Interrupt) ? \"Interrupted!\" : \"Timeout!\"]",90],["\" Returns false otherwise.",90]],"useCount":2676},{"word":"fdm","context":[["\" vim:ft=vim:fdm=marker",737],["\" vim600: set fdm=marker:",75],["\" vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2",120],["setlocal fdm=manual",234],["\" vim: set ts=8 sts=4 sw=4 noexpandtab ff=unix fdm=syntax :",257],["\" vim: ts=4 fdm=marker",76],["\" vim: fdm=marker",97],["\" vim:fdm=marker:ff=unix:noet:ts=4:sw=4",105],["\" vim: set fdm=marker:",114],["\" vim: set sw=4 sts=4 et fdm=marker:",1085]],"useCount":4359},{"word":"ff0000","context":[["CSAHi airline_y_red term=NONE cterm=NONE ctermbg=238 ctermfg=196 gui=NONE guibg=#444444 guifg=#ff0000",117],["CSAHi DiffText term=reverse cterm=bold ctermbg=196 ctermfg=fg gui=bold guibg=#ff0000 guifg=fg",120],["CSAHi airline_c_red term=NONE cterm=NONE ctermbg=234 ctermfg=196 gui=NONE guibg=#202020 guifg=#ff0000",117],["CSAHi airline_b_red term=NONE cterm=NONE ctermbg=238 ctermfg=196 gui=NONE guibg=#444444 guifg=#ff0000",117],["CSAHi SpellBad term=reverse cterm=undercurl ctermbg=bg ctermfg=196 gui=undercurl guibg=bg guifg=fg guisp=#ff0000",180],["CSAHi airline_a_inactive_red term=NONE cterm=NONE ctermbg=234 ctermfg=196 gui=NONE guibg=#1c1c1c guifg=#ff0000",117],["CSAHi airline_x_inactive_red term=NONE cterm=NONE ctermbg=236 ctermfg=196 gui=NONE guibg=#303030 guifg=#ff0000",117],["CSAHi airline_c_inactive_red term=NONE cterm=NONE ctermbg=236 ctermfg=196 gui=NONE guibg=#303030 guifg=#ff0000",117],["CSAHi airline_b_inactive_red term=NONE cterm=NONE ctermbg=235 ctermfg=196 gui=NONE guibg=#262626 guifg=#ff0000",117],["CSAHi airline_y_inactive_red term=NONE cterm=NONE ctermbg=235 ctermfg=196 gui=NONE guibg=#262626 guifg=#ff0000",117]],"useCount":4369},{"word":"ffffff","context":[["CSAHi airline_y_bold term=bold cterm=bold ctermbg=238 ctermfg=231 gui=bold guibg=#444444 guifg=#ffffff",78],["CSAHi airline_b_bold term=bold cterm=bold ctermbg=238 ctermfg=231 gui=bold guibg=#444444 guifg=#ffffff",78],["hi Question        guifg=#ffffff gui=bold",50],["hi MoreMsg         guifg=#ffffff gui=bold",49],["CSAHi ErrorMsg term=NONE cterm=NONE ctermbg=196 ctermfg=231 gui=NONE guibg=#ff0000 guifg=#ffffff",80],["CSAHi Error term=reverse cterm=NONE ctermbg=196 ctermfg=231 gui=NONE guibg=#ff0000 guifg=#ffffff",86],["CSAHi airline_y term=NONE cterm=NONE ctermbg=238 ctermfg=231 gui=NONE guibg=#444444 guifg=#ffffff",78],["hi WarningMsg      guifg=#ffffff guibg=#333333 gui=bold",51],["CSAHi PmenuThumb term=NONE cterm=NONE ctermbg=231 ctermfg=fg gui=NONE guibg=#ffffff guifg=fg",52],["CSAHi airline_b term=NONE cterm=NONE ctermbg=238 ctermfg=231 gui=NONE guibg=#444444 guifg=#ffffff",78]],"useCount":2488},{"word":"fg","context":[["CSAHi vimCmdSep term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSyncLinecont term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSynRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuRhs term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMapLhs term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSynRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuRhs term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSubstRange term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAuSyntax term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["if a:fg != \"\"",274]],"useCount":86744},{"word":"fg_blue","context":[["exe \"hi! pandocTitleBlock\"               .s:fg_blue   .s:bg_none   .s:fmt_none",67],["exe \"hi! pandocLinkText\"                 .s:fg_blue   .s:bg_none   .s:fmt_undb",67],["let s:fg_ptable = s:fg_blue",73],["exe \"hi! pandocMetadata\"                 .s:fg_blue   .s:bg_none   .s:fmt_none",68],["exe \"hi! hs_hlFunctionName\"  . s:fg_blue   .s:bg_none",67],["exe \"hi! pandocBlockQuote\"               .s:fg_blue   .s:bg_none   .s:fmt_none",67],["exe \"hi! Directory\"      .s:fmt_none   .s:fg_blue   .s:bg_none",67],["exe \"hi! VarId\"    . s:fg_blue   .s:bg_none   .s:fmt_none",67],["exe \"hi! pandocMetadataKey\"              .s:fg_blue   .s:bg_none   .s:fmt_none",67],["exe \"hi! pandocBlockQuoteLeader1\"        .s:fg_blue   .s:bg_none   .s:fmt_none",67]],"useCount":2312},{"word":"fidx","context":[["if fidx != -1",193],["let s:tlist_{fidx}_valid = 0",165],["let fidx = s:Tlist_Get_File_Index(filename)",164],["return fidx",164],["let tag_line = s:tlist_{a:fidx}_{a:tidx}_tag",137],["let fidx = s:Tlist_Get_File_Index(a:filename)",136],["if s:tlist_{fidx}_tag_count == 0",132],["exe s:tlist_{fidx}_start",231],["exe \"silent! \" . s:tlist_{fidx}_start . \",\" .",129],["if fidx == -1",587]],"useCount":10097},{"word":"fields","context":[["\\ 'v:val.fields.kind ==# kind.short')",56],["let pscope  = a:typeinfo.kind2scope[a:parent.fields.kind]",56],["let ctags_args = ' -f - --format=2 --excmd=pattern --fields=nks '",33],["\\ typeinfo.kinddict[a:tag2.fields.kind]",56],["let suffix .= ' : ' . typeinfo.kind2scope[self.fields.kind]",56],["let fileinfo.tagfolds[self.fields.kind][self.fullpath] =",60],["let suffix = get(self.fields, 'signature', '')",56],["\\ 'w:fields',",44],["let self.fileinfo.tagfolds[self.fields.kind][self.fullpath] = a:folded",30],["\\ fileinfo.kindfolds[self.fields.kind]",30]],"useCount":2552},{"word":"file","context":[["\" Vim compiler file",241],["return file",261],["return s:Edit(a:mode,0,file)",300],["\" quit when a syntax file was already loaded",373],["\" Only load this indent file when no other was loaded.",515],["\" Vim syntax file",5155],["\" Vim color file",1626],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["\" Vim indent file",746],["\" Vim filetype plugin file",638]],"useCount":61075},{"word":"fileinfo","context":[["let fileinfo.tagfolds[self.fields.kind][self.fullpath] =",60],["call fileinfo.sortTags()",59],["\\ a:typeinfo, a:fileinfo)",96],["let fileinfo = s:known_files.getCurrent()",99],["let typeinfo = fileinfo.typeinfo",100],["let fileinfo = self.fileinfo",119],["let fileinfo = s:known_files.get(a:fname)",56],["let fileinfo = self.fileinfo",119],["if empty(fileinfo)",255],["let fileinfo = s:known_files.getCurrent(0)",132]],"useCount":3755},{"word":"filename","context":[["if filename == ''",170],["if filereadable(filename)",139],["if filename =~ ' -> '",110],["let fidx = s:Tlist_Get_File_Index(filename)",164],["let first_filename = filename",152],["let [filename, section] = s:stage_info(line('.'))",146],["let [filename, section] = s:stage_info(lnum)",112],["elseif filename ==# ''",132],["let fidx = s:Tlist_Get_File_Index(a:filename)",136],["if filename ==# ''",215]],"useCount":14935},{"word":"filereadable","context":[["if filereadable(path)",146],["elseif a:spec =~# 'HEAD\\|^refs/' && a:spec !~ ':' && filereadable(self.dir(a:spec))",66],["if !filereadable(fname)",70],["if path =~# '^\\.git/.*HEAD' && filereadable(s:repo().dir(path[5:-1]))",72],["let b:fugitive_display_format = filereadable(expand('%').'.lock')",75],["if !filereadable(a:filename)",78],["if filereadable(outfile)",79],["if filereadable(file)",80],["if filereadable(l:snippetfile)",86],["if filereadable(filename)",139]],"useCount":5317},{"word":"files","context":[["for i in files",86],["let files = []",91],["for file in files",104],["let files = split(filesStr, \"\\n\")",86],["\" toggles the display of hidden files",97],["\" guard for unencrypted files",94],["if !search('^# .*:\\n# .*\"git add .*\\n#\\n\\|^# Untracked files:$','W')",110],["\" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore",122],["return files",144],["if !a:silent && len(files) > g:NERDTreeNotificationThreshold",84]],"useCount":12957},{"word":"filetype","context":[["filetype off",481],["filetype plugin on",271],["setlocal filetype=cpp",237],["if &filetype != 'cpp'",237],["filetype plugin indent on",735],["\" Vim filetype plugin",286],["\" Vim filetype plugin file",638],["filetype indent on",167],["\\ 'filetype': 'python',",143],["filetype on",135]],"useCount":17249},{"word":"filter","context":[["\"      call Decho(\"filter input: \".getline('$'))",210],["\"     call Decho(\"filter input: \".getline('$'))",168],["\"     call Decho(\"filter input: \".getline('.'))",126],["return filter(s:controllerList(a:ArgLead,\"\",\"\"),'v:val !=# \"application\"')",96],["return filter(copy(g:plugs_order), 'get(s:loaded, v:val, 0)')",89],["let unknowns = filter(copy(a:000), '!has_key(g:plugs, v:val)')",89],["let names = filter(map(lines, 's:extract_name(v:val, \"[x-]\", \"\")'), '!empty(v:val)')",89],["let found = filter(found, 'stridx(v:val, f) != 0')",90],["\\ filter(managed, 'index(args, v:key) >= 0')",90],["let managed = filter(copy(g:plugs), 's:is_managed(v:key)')",91]],"useCount":12274},{"word":"filters","context":[["\"forceOpen: 1 if this node should be opened regardless of file filters",42],["let filters = ['html']",105],["return filters",48],["for f in a:filters",59],["if emmet#useFilter(filters, 'e')",72],["let filters = a:filters",88],["let filters = a:filters",88],["call unite#filters#matcher_default#use(['matcher_fuzzy'])",48],["\"because of the file filters.",42],["\"   *they arent filtered by file filters",42]],"useCount":2115},{"word":"finally","context":[["finally",6320],["\" And finally.",99],["finally:",63],["if thisline =~ '^\\s*\\(except\\|finally\\)\\>'",21],["syn keyword pythonException\texcept finally raise try",24],["\"         finally",24],["\"   finally",24],["syn keyword pythonException\ttry except finally",27],["\"\t    When a :finally clause is executed due to a :continue, :break,",21],["syn keyword pythonException     try except finally",28]],"useCount":6856},{"word":"find","context":[["\" more likely to find the correct thing first. mnemonic 'jump to [something]'",51],["return \"echoerr 'E345: Can''t find file \\\"\".a:file.\"\\\" in runtimepath'\"",52],["\"go up the tree till we find a node that will be visible or till we run",44],["\"direction: 0 if you want to find the previous sibling, 1 for the next sibling",72],["where = proc { |name| (1..($curbuf.length)).find { |l| $curbuf[l] =~ /^[-+x*] #{name}:/ } }",90],["\" Default to filename searches - so that appctrl will find application",48],["return s:error(\"Cannot find view without controller\")",49],["return num.'find'.bang",49],["\" If we got a closing bracket on an empty line, find its match and indent",64],["\" the following if-then. However, I find vim's background autodetection to be",70]],"useCount":4618},{"word":"finish","context":[["function! s:finish(pull)",90],["if exists(\"b:did_ftplugin\") | finish | endif",168],["\"finish",42],["finish",21256],["\"    finish",34],["if !( has('gui_running') || &t_Co==256 ) | finish | endif",28],["return 'finish'",27],["\" auto-commands and finish sourcing the file",32],["call s:finish(s:update.pull)",88],["\"  finish",49]],"useCount":22109},{"word":"first","context":[["msg = ['{0} {1}{2}{3}'.format(action, name, ': ' if first else '', first)]",76],["msg = ['{0} {1}{2}{3}'.format(action, name, ': ' if first else '', first)]",76],["\"\"\" Find first line with name in current buffer. Return line num. \"\"\"",79],["first, rest = lines[0], lines[1:]",79],["\" Since the string will be enclosed in single quotes, we must first",88],["\" Flag the first zero of an octal number as something special",113],["cc 1 \"jump to first error if there is any",100],["name = pair.first",90],["return s:err('Call plug#begin() first')",89],["call s:echo(\"Select a node first\")",88]],"useCount":7592},{"word":"flag","context":[["if a:flag > 0",83],["\"\"\" Read a file with nonblock flag. Return the last line. \"\"\"",79],["\"if  the last part of the path is a symlink then flag it as such",45],["\"if the line is part of a sexy comment then just flag it...",46],["\"strip off any read only flag",46],["if a:flag == -2 || a:flag == 2",139],["if a:flag == -2 || a:flag == 2",139],["\" flag an octal number with wrong digits",140],["\"   -forceNested: a flag indicating whether the called is requesting the comment",46],["let s:flag.within_line = 1",50]],"useCount":2623},{"word":"fmt_bold","context":[["exe \"hi! pandocHeading\"                      .s:fg_phead .s:bg_none.s:fmt_bold",66],["exe \"hi! pandocTitleBlockTitle\"          .s:fg_blue   .s:bg_none   .s:fmt_bold",66],["exe \"hi! pandocStrongEmphasisHeading\"        .s:fg_phead .s:bg_none.s:fmt_bold",66],["exe \"hi! pandocStrongEmphasisTable\"          .s:fg_ptable.s:bg_none  .s:fmt_bold",66],["exe \"hi! rubyDefine\"     . s:fg_base1  .s:bg_back   .s:fmt_bold",66],["exe \"hi! pandocStrongEmphasisDefinition\"     .s:fg_pdef  .s:bg_none  .s:fmt_bold",66],["exe \"hi! pandocSubscriptHeading\"             .s:fg_phead .s:bg_none.s:fmt_bold",66],["exe \"let s:fmt_bold     = ' \".s:vmode.\"=NONE\".s:b.      \" term=NONE\".s:b.\"'\"",67],["exe \"hi! Title\"          .s:fmt_bold   .s:fg_orange .s:bg_none",67],["exe \"hi! WarningMsg\"     .s:fmt_bold   .s:fg_red    .s:bg_none",67]],"useCount":2958},{"word":"fmt_none","context":[["exe \"hi! pandocCitationRef\"              .s:fg_magenta.s:bg_none   .s:fmt_none",134],["exe \"hi! texMathMatcher\" . s:fg_yellow .s:bg_back   .s:fmt_none",134],["exe \"hi! perlStatementFileDesc\". s:fg_cyan.s:bg_back.s:fmt_none",69],["exe \"hi! pandocMetadata\"                 .s:fg_blue   .s:bg_none   .s:fmt_none",68],["exe \"hi! hsTypedef\"          . s:fg_cyan   .s:bg_none   .s:fmt_none",67],["exe \"hi! pandocBlockQuoteLeader4\"        .s:fg_red    .s:bg_none   .s:fmt_none",67],["exe \"hi! pandocStyleDelim\"               .s:fg_base01 .s:bg_none  .s:fmt_none",67],["exe \"hi! cPreCondit\". s:fg_orange.s:bg_none   .s:fmt_none",67],["exe \"hi! pandocSubscriptDefinition\"          .s:fg_pdef  .s:bg_none  .s:fmt_none",67],["exe \"hi! pandocFootnote\"                 .s:fg_green  .s:bg_none   .s:fmt_none",67]],"useCount":8766},{"word":"fn","context":[["if filereadable(fn) && !(a:force || s:ask(a:1.' already exists. Overwrite?'))",46],["let [width, height] = emmet#util#getImageSize(fn)",56],["let fn = expand('%:p')",72],["silent exe 'doau BufReadPost '.s:fnameescape(fn)",76],["silent exe 'keepalt file '.s:fnameescape(fn)",76],["let fn = current.attr.src",79],["let fn = expand(a:1)",81],["let fn = simplify(expand('%:h') . '/' . fn)",87],["let fn = simplify(expand('%:h') . '/' . fn)",87],["call writefile(getline(1, '$'), fn)",88]],"useCount":2287},{"word":"fname","context":[["if fname != ''",73],["for fname in s:netrwmarkfilelist_{curbufnr}",101],["let fname = fnamemodify(a:filename, ':p')",98],["let fidx = s:Tlist_Get_File_Index(fname)",93],["let fname = expand('%', 1)",86],["if !filereadable(fname)",70],["for fname in s:netrwmarkfilelist_{bufnr(\"%\")}",72],["fread = os.open(fname, os.O_RDONLY | os.O_NONBLOCK)",79],["def nonblock_read(fname):",79],["return fname",75]],"useCount":11073},{"word":"fnameescape","context":[["return a:cmd.' '.s:fnameescape(file)",77],["exe \"source \" . fnameescape(s:sx)",235],["if exists('*fnameescape')",218],["execute 'keepalt edit '.s:fnameescape(msgfile)",124],["return fnameescape(a:file)",121],["silent exe 'keepalt file '.s:fnameescape(fn)",76],["silent! execute 'f' fnameescape(name)",89],["execute cd fnameescape(cwd)",100],["function! s:fnameescape(file) abort",117],["execute cd . fnameescape(dir)",108]],"useCount":5688},{"word":"fnamemodify","context":[["let filename = fnamemodify(bufname('%'), ':p')",95],["return s:shellslash(bufname == '' ? '' : fnamemodify(bufname,':p'))",78],["if fnamemodify($GIT_INDEX_FILE !=# '' ? $GIT_INDEX_FILE : b:git_dir . '/index', ':p') ==# expand('%:p')",76],["let allowed[s:dirpath(fnamemodify(dir, ':h:h'))] = 1",81],["if str != '' && fnamemodify(str, ':e') == ''",84],["let dir = s:dirpath( fnamemodify(join([g:plug_home, a:name], '/'), ':p') )",84],["let home = s:path(fnamemodify(expand(a:1), ':p'))",89],["let fidx = s:Tlist_Get_File_Index(fnamemodify(bufname('%'), ':p'))",93],["if res != \"\"|return res.(fnamemodify(res,':e') == '' ? '.rb' : '')|endif",98],["let fname = fnamemodify(a:filename, ':p')",98]],"useCount":8240},{"word":"fold","context":[["\\ {'short' : 'c', 'long' : 'classes',     'fold' : 0, 'stl' : 1},",100],["\\ {'short' : 'd', 'long' : 'macros',      'fold' : 1, 'stl' : 0},",103],["\\ {'short' : 'f', 'long' : 'functions', 'fold' : 0, 'stl' : 1}",150],["\\ {'short' : 'e', 'long' : 'enumerators', 'fold' : 0, 'stl' : 0},",103],["\\ {'short' : 'g', 'long' : 'enums',       'fold' : 0, 'stl' : 1},",103],["\\ fold",127],["\\ {'short' : 's', 'long' : 'structs',     'fold' : 0, 'stl' : 1},",78],["\" fold method",88],["\" If the line is inside a fold, open the fold",99],["\" If the line is inside a fold, open the fold",99]],"useCount":9068},{"word":"foldlevel","context":[["setlocal foldmethod=syntax foldlevel=1",42],["setlocal foldlevel=0",897],["\" vim:foldmethod=marker:foldlevel=0",106],["\" vim: set filetype=vim foldmethod=marker foldlevel=0 nowrap:",62],["set foldlevel=1",49],["let l:MySpaces = MakeSpaces(&sw * (v:foldlevel-1))",42],["\\ . ' foldlevel=' . &l:foldlevel",45],["\\ . ' foldlevel=' . &l:foldlevel",45],["if foldlevel('.') == 0",45],["set foldlevel=99",49]],"useCount":2130},{"word":"foldmethod","context":[["\" vim:foldmethod=marker:foldlevel=0",106],["setlocal foldmethod=indent",110],["\" vim: foldmethod=marker",1598],["setlocal foldmethod=manual",913],["setlocal foldmethod=syntax",322],["\" vim:tabstop=2:shiftwidth=2:expandtab:foldmethod=marker:textwidth=79",111],["setlocal foldmethod=marker",136],["set foldmethod=indent",163],["setlocal foldmethod=expr",232],["set foldmethod=syntax",244]],"useCount":5921},{"word":"foldtext","context":[["setlocal foldtext=foldtext()",869],["set foldtext=fugitive#foldtext()",51],["set foldtext=fugitive#foldtext()",51],["function! fugitive#foldtext() abort",60],["\\    set foldtext=fugitive#foldtext() |",61],["\\    set foldtext=fugitive#foldtext() |",61],["\\ if &filetype =~# '^git\\%(commit\\)\\=$' && &foldtext ==# 'foldtext()' |",61],["\\ if &filetype =~# '^git\\%(commit\\)\\=$' && &foldtext ==# 'foldtext()' |",61],["return foldtext()",137],["setlocal foldtext=foldtext()",869]],"useCount":2538},{"word":"following","context":[["\" Comment/Uncomment the following line to disable/enable transparency",90],["\"a:options can contain the following keys:",81],["\" All of your Plugins must be added before the following line",81],["\" following is for the haskell-conceal plugin",73],["\" command line with the following syntax:",72],["\" the following if-then. However, I find vim's background autodetection to be",70],["\" After either Option 1 or Option 2 above, put the following two lines in your",70],["\" furnished to do so, subject to the following conditions:",313],["\" the following conditions:",179],["\"     the following conditions:",1680]],"useCount":5484},{"word":"foo","context":[["\" create <%= foo %> erb tags using Ctrl-j in edit mode",55],["\" If foo::bar changes to foo.bar, change this (\"::\" to \"\\.\").",46],["\" If foo::bar changes to Foo::bar, change this (first \"\\w\" to \"\\u\").",46],["\" :PluginSearch foo - searches for foo; append `!` to refresh local cache",47],["\" :PluginSearch foo - searches for foo; append `!` to refresh local cache",47],["return \"foo\"",55],["\" create <%= foo %> erb tags using Ctrl-k in edit mode",57],["\" the first quote will autoclose so you'll get 'foo' and hitting <c-a> will",63],["\" type 'foo<c-a>",64],["\" Avoid matching foo::bar() in C++ by requiring that the next char is not ':'",80]],"useCount":4046},{"word":"for","context":[["\"             See http://sam.zoy.org/wtfpl/COPYING for more details.",1702],["\"Description: Syntax checking plugin for syntastic.vim",1331],["setlocal cinwords=if,else,while,do,for,switch",886],["for line in lines",604],["\" Only do this when not done yet for this buffer",496],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["\" Return GUI color for light/dark variants",292],["\" Return terminal color for light/dark variants",292],["for candidate in a:candidates",442],["for e in loclist",266]],"useCount":84879},{"word":"force","context":[["function! s:update(force, names)",89],["if a:force",180],["unl s:force",148],["function! s:clean(force)",90],["function! s:do(pull, force, todo)",89],["if a:force || installed || updated",89],["call s:update_impl(1, a:force, a:names)",89],["function! s:install(force, names)",89],["call s:update_impl(0, a:force, a:names)",89],["call spec.do({ 'name': name, 'status': status, 'force': a:force })",89]],"useCount":4173},{"word":"foreground","context":[["call <SID>X(\"phpMemberSelector\", s:foreground, \"\", \"\")",179],["call <SID>X(\"Conditional\", s:foreground, \"\", \"\")",177],["call <SID>X(\"Repeat\", s:foreground, \"\", \"\")",176],["call <SID>X(\"Statement\", s:foreground, \"\", \"\")",173],["call <SID>X(\"javaScriptBraces\", s:foreground, \"\", \"\")",169],["call <SID>X(\"StatusLineNC\", s:window, s:foreground, \"reverse\")",156],["call <SID>X(\"Special\", s:foreground, \"\", \"\")",185],["call <SID>X(\"Normal\", s:foreground, s:background, \"\")",191],["call <SID>X(\"PMenu\", s:foreground, s:selection, \"none\")",194],["call <SID>X(\"PMenuSel\", s:foreground, s:selection, \"reverse\")",194]],"useCount":3652},{"word":"format","context":[["'Expected     {0}'.format(expect_uri),",76],["msg = 'Trace:\\n{0}'.format(traceback.format_exc().rstrip())",76],["curbuf[1] = '[{0}{1}]'.format(self.bar, num_spaces * ' ')",76],["'Invalid URI: {0}'.format(actual_uri),",76],["if format == ''",79],["tname = 'PlugT-{0:02}'.format(num)",79],["matcher = re.compile('^[-+x*] {0}:'.format(name))",76],["msg = 'Timeout. Will retry in {0} second{1} ...'.format(",76],["msg = ['{0} {1}{2}{3}'.format(action, name, ': ' if first else '', first)]",76],["curbuf[0] = self.event + ' plugins ({0}/{1})'.format(len(self.bar), self.num_plugs)",76]],"useCount":5943},{"word":"formatoptions","context":[["setlocal comments=:# commentstring=#\\ %s formatoptions-=t formatoptions+=croql",85],["\" Set 'formatoptions' to break comment lines but not other lines,",84],["setlocal comments=:# commentstring=#\\ %s formatoptions-=t formatoptions+=croql",85],["setlocal formatoptions-=t",141],["setlocal formatoptions-=t formatoptions+=croql",180],["setlocal formatoptions+=c",36],["setlocal formatoptions+=r",50],["setlocal formatoptions=tcq",539],["setlocal formatoptions-=t formatoptions+=croql",180],["setlocal formatoptions=croql",285]],"useCount":2215},{"word":"found","context":[["let f = remove(found, 0)",90],["let found = 1",221],["let found = sort(s:glob_dir(g:plug_home))",90],["while !empty(found)",90],["let [valid, msg] = [0, 'Not found. Try PlugInstall.']",90],["let [valid, msg] = [0, 'Not found.']",90],["let found = []",114],["let found = 0",208],["let found = filter(found, 'stridx(v:val, f) != 0')",90],["let found = filter(found, 'stridx(v:val, f) != 0')",90]],"useCount":6763},{"word":"from","context":[["let result = iconv(a:expr, a:from, a:to)",82],["function! s:source(from, ...)",89],["\" &rtp is modified from outside",89],["\" Original function is from mattn.",80],["elseif getline('.') =~# '^rename from '",76],["\" Download palettes and files from: http://ethanschoonover.com/solarized",75],["\" Hex colour conversion functions borrowed from the theme \"Desert256\"\"",171],["\\ \"  from sysobjects o, sysusers u \".",135],["\" Removes duplicates from a list.",92],["\" -i       : turns off interactive prompting from ftp",100]],"useCount":14742},{"word":"ft","context":[["\\ ft, string(ft), string(names))",83],["\" vim:ft=vim:fdm=marker",737],["\" vim: set ft=vim :",215],["\" vim:noet:sw=4:ts=4:ft=vim",86],["for [ft, names] in items(lod.ft)",83],["for [ft, names] in items(lod.ft)",83],["let ft = &ft",79],["call s:assoc(lod.ft, type, name)",83],["\\ ft, string(ft), string(names))",83],["let lod = { 'ft': {}, 'map': {}, 'cmd': {} }",83]],"useCount":8695},{"word":"ftype","context":[["while j <= s:tlist_{ftype}_count",93],["let ttype = s:tlist_{ftype}_{j}_name",93],["let var = 's:tlist_def_' . a:ftype . '_settings'",68],["let ftype = &filetype",81],["let var = 'g:tlist_' . a:ftype . '_settings'",68],["let ttype = s:tlist_{a:ftype}_{i}_name",66],["let ftype = s:tlist_{a:fidx}_filetype",108],["return ftype",117],["let ttype = s:tlist_{ftype}_{i}_name",135],["while i <= s:tlist_{ftype}_count",168]],"useCount":4125},{"word":"fu","context":[["fu! s:syntax()",41],["fu! s:matchfname(item, pat)",31],["fu! s:lash(...)",35],["fu! s:compval(...)",31],["fu! ctrlp#exit()",30],["fu! ctrlp#prtclear()",30],["fu! s:Render(lines, pat)",30],["fu! s:PrtAdd(char)",30],["fu! ctrlp#rmbasedir(items)",30],["fu! s:dictindex(dict, expr)",30]],"useCount":5414},{"word":"fugitive","context":[["Plug 'tpope/vim-fugitive'",327],["call fugitive#reload_status()",557],["Plugin 'tpope/vim-fugitive'",165],["let rev = matchstr(self.spec(),'^fugitive://.\\{-\\}//\\zs.*')",146],["catch /^fugitive:/",1295],["let dir = fugitive#extract_git_dir(a:path)",84],["let v:errmsg = 'fugitive: rm not supported here'",77],["augroup fugitive",77],["autocmd FileReadCmd fugitive://**//[0-3]/**          exe s:FileRead()",77],["catch /^fugitive: rev-parse/",77]],"useCount":8073},{"word":"full","context":[["let full = s:repo().translate(expanded)",72],["\\ 'Invalid arguments (or job table is full)'",80],["let commit = matchstr(full,'://.*//\\zs\\w\\+')",60],["let path = '.git/' . full[strlen(s:repo().dir())+1:-1]",72],["set wildmode=list:longest,full",73],["elseif isdirectory(full)",73],["if full =~# '^fugitive://'",73],["\"path: a path object representing the full filesystem path to the file/dir that the node represents",73],["let path = matchstr(full,'://.*//\\w\\+\\zs/.*')",72],["let path = full[strlen(s:repo().tree())+1:-1]",72]],"useCount":2090},{"word":"fullpath","context":[["let self.pathSegments = split(fullpath, '/')",45],["let self.drive = substitute(a:fullpath, '\\(^[a-zA-Z]:\\).*', '\\1', '')",45],["let fullpath = substitute(a:fullpath, '\\(\\\\\\|\\/\\)$', '', '')",45],["let fullpath = substitute(a:fullpath, '\\(\\\\\\|\\/\\)$', '', '')",45],["\"bail if the a:fullpath already exists",45],["\"fullpath: the full filesystem path to the file/dir to create",45],["elseif filereadable(a:fullpath)",45],["call writefile([], a:fullpath)",45],["let curpath = a:parent.fullpath",56],["let fileinfo.tagfolds[self.fields.kind][self.fullpath] =",60]],"useCount":2325},{"word":"fun","context":[["fun <SID>grey_colour(n)",196],["fun s:gui(color)",290],["fun s:cterm(color)",290],["fun <SID>grey_number(x)",252],["fun <SID>grey_level(n)",252],["fun <SID>rgb_level(n)",252],["fun <SID>rgb(rgb)",252],["fun <SID>rgb_number(x)",252],["fun <SID>X(group, fg, bg, attr)",254],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276]],"useCount":7828},{"word":"func","context":[["return s:findit('\\s*\\<\\%('.a:func.'\\)\\s*(\\=\\s*[@:'.\"'\".'\"]\\(\\f\\+\\)\\>.\\=',a:repl)",49],["function! s:findfromview(func,repl)",49],["let includes .= call(handler[\"func\"], handler[\"args\"])",48],["return s:findit('\\s*\\%(<%\\)\\==\\=\\s*\\<\\%('.a:func.'\\)\\s*(\\=\\s*[@:'.\"'\".'\"]\\(\\f\\+\\)\\>['.\"'\".'\"]\\=\\s*\\%(%>\\s*\\)\\=',a:repl)",49],["func! DeleteTrailingWS()",62],["function! s:findamethod(func,repl)",49],["func! s:process(bang, cmd)",42],["func! vundle#installer#new(bang, ...) abort",42],["func! vundle#installer#run(func_name, name, ...) abort",42],["func! vundle#installer#helptags(bundles) abort",42]],"useCount":4602},{"word":"function","context":[["\" Highlighting function",319],["function! s:_vital_loaded(V) abort",170],["function! s:_vital_depends() abort",171],["function! s:source.gather_candidates(args, context) \"{{{",173],["function! s:rtp(spec)",180],["function! s:dirpath(path)",180],["function! s:path(path)",186],["function! s:is_local_plug(repo)",178],["\" Only define the function once.",430],["function! s:_SID() abort",278]],"useCount":103091},{"word":"functions","context":[["\" Private functions {{{1",131],["\" Remove functions",303],["\" Hex colour conversion functions borrowed from the theme \"Desert256\"\"",171],["\\ {'short' : 'f', 'long' : 'functions', 'fold' : 0, 'stl' : 1}",150],["\" delete functions {{{",112],["\" Public functions {{{1",109],["echom \"File is not encrypted, all GPG functions disabled!\"",93],["\" => Helper functions",90],["\" Section: Utility functions {{{1",82],["\\ {'short' : 'f', 'long' : 'functions',   'fold' : 0, 'stl' : 1},",75]],"useCount":5354},{"word":"g","context":[["let g:airline_powerline_fonts = 1",309],["call g:SyntasticRegistry.CreateAndRegisterChecker({",1621],["\\'g:neocomplete#keyword_patterns',",645],["let l:g = (\"0x\" . strpart(a:rgb, 2, 2)) + 0",308],["if !exists(\"g:netrw_quiet\")",298],["if exists('g:vundle_installing_plugins')",404],["let winnum = bufwinnr(g:TagList_title)",393],["if exists(\"g:netrw_port\") && g:netrw_port != \"\"",342],["if exists(\"g:netrw_port\") && g:netrw_port != \"\"",342],["if g:dbext_dbi_result == -1",331]],"useCount":169463},{"word":"g185","context":[["a(g185",2865]],"useCount":2865},{"word":"gb","context":[["let s:gb.dark0  = ['f2e5bc', 228]     \" 242-229-188",22],["let s:gb.medium = ['928374', 8]",32],["let s:gb.dark0  = ['32302f', 236]     \" 50-48-47",26],["let s:gb.dark0  = ['1d2021', 234]     \" 29-32-33",26],["nnoremap <buffer> <silent> gb\t:<c-u>call <SID>NetrwBookHistHandler(1,b:netrw_curdir)<cr>",22],["nnoremap <silent> <leader>gb :Gblame<CR>",22],["let s:gb.dark0  = ['f9f5d7', 230]     \" 249-245-215",22],["let c = get(s:gb, a:3)",21],["inoremap <buffer> <silent> gb\t<c-o>:<c-u>call <SID>NetrwBookHistHandler(1,b:netrw_curdir)<cr>",20],["let s:gb = {}",37]],"useCount":1983},{"word":"get","context":[["\" get the closest color",121],["let s:middle = get(s:, 'middle', &rtp)",89],["let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')",89],["return s:path(a:spec.dir . get(a:spec, 'rtp', ''))",89],["let spec.frozen = get(spec, 'frozen', 0)",89],["return s:dirpath(a:spec.dir . get(a:spec, 'rtp', ''))",90],["limit = VIM::evaluate('get(g:, \"plug_timeout\", 60)')",90],["\" get the closest grey",121],["if !get(g:, 'loaded_ctrlp', 0)",134],["let char = get(a:, 1, ' ')",125]],"useCount":21973},{"word":"getbufvar","context":[["let specialWindow = getbufvar(\"%\", '&buftype') != '' || getwinvar('%', '&previewwindow')",53],["if bufloaded(nr) && !getbufvar(nr,'&modified') && (name ==# one || name ==# two || name ==# three)",60],["if getbufvar(winbufnr(winnr), 'fugitive_blamed_bufnr')",67],["let args = getbufvar(+expand('<abuf>'),'fugitive_commit_arguments')",75],["if getbufvar(tabpagebuflist(tab)[winnr-1],'fugitive_type') ==# 'index'",75],["let rr = getbufvar(i,\"rails_root\")",49],["let b:fugitive_display_format = +getbufvar('#','fugitive_display_format')",76],["return getbufvar(self['#'],a:var)",82],["if &previewwindow && getbufvar('','fugitive_type') ==# 'index'",75],["elseif nr > 0 && getbufvar(nr,'rails_file_type') != ''",48]],"useCount":2675},{"word":"getcwd","context":[["let current_dir = getcwd()",55],["let [s:crfilerel, s:dyncwd] = [fnamemodify(s:crfile, ':.'), getcwd()]",56],["let s:origdir = fnameescape(getcwd())",60],["let old_cwd = getcwd()",65],["let curdir = getcwd()",73],["let b:netrw_curdir= getcwd()",89],["let cwd = getcwd()",604],["let dir = getcwd()",667],["let vimfiler_current_dir = getcwd()",53],["autocmd VimEnter * if expand('<amatch>')==''|call fugitive#detect(getcwd())|endif",48]],"useCount":3861},{"word":"getline","context":[["let line = getline(n)",170],["let line = getline(lnum)",1191],["let line = getline(a:lnum)",455],["let ref = matchstr(getline('.'),'\\x\\{40\\}')",447],["let line = getline('.')",1194],["let theLine = getline(currentLine)",253],["if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''",240],["let line = getline(\".\")",232],["\"      call Decho(\"filter input: \".getline('$'))",210],["let line = getline(v:lnum)",175]],"useCount":32128},{"word":"getpos","context":[["let curpos = getpos('.')",140],["let pos = getpos('.')",579],["let save_cursor = getpos(\".\")",156],["let cursor = getpos('.')",52],["let save_cursor = getpos('.')",82],["let savedpos = getpos('.')",72],["let l:pos = getpos('.')",54],["let [lnum2, col2] = getpos(\"'>\")[1:2]",64],["let curPos = getpos('.')",68],["let [lnum1, col1] = getpos(\"'<\")[1:2]",64]],"useCount":2894},{"word":"git","context":[["if !search('^# .*:\\n# .*\"git add .*\\n#\\n\\|^# Untracked files:$','W')",110],["if !executable('git')",133],["call s:throw('not a git repository: '.expand('%:p'))",152],["if self.dir() =~# '/\\.git$'",124],["let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')",89],["\\ {'type' : 'git', 'uri' :",104],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')",89],["\"   Plug 'https://github.com/junegunn/vim-github-dashboard.git'",89]],"useCount":12923},{"word":"git_dir","context":[["let b:git_dir = s:repo().dir()",228],["unlet b:git_dir",84],["let b:git_dir = dir",81],["return s:repo(self.getvar('git_dir'))",77],["let repo = {'git_dir': dir}",77],["if fnamemodify($GIT_INDEX_FILE !=# '' ? $GIT_INDEX_FILE : b:git_dir . '/index', ':p') ==# expand('%:p')",76],["if exists('b:git_dir')",89],["if buffer.getvar('git_dir') !=# ''",76],["let git = g:fugitive_git_executable . ' --git-dir='.s:shellesc(self.git_dir)",76],["if !exists('b:git_dir')",232]],"useCount":2951},{"word":"github","context":[["\"   Plug 'https://github.com/junegunn/vim-github-dashboard.git'",89],["\" Author:        Kien Nguyen <github.com/kien>",107],["\" URL:         http://github.com/kchmck/vim-coffee-script",106],["\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby",101],["let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')",89],["\\ '^https://git::@github\\.com', 'https://github.com', '')",78],["\" Find more themes at : https://github.com/daylerees/colour-schemes",91],["\\ '^https://git::@github\\.com', 'https://github.com', '')",78],["\" http://github.com/mattn/googlereader-vim/tree/master",80],["\"   Plug 'https://github.com/junegunn/vim-github-dashboard.git'",89]],"useCount":4403},{"word":"given","context":[["\" Returns the palette index for the given R/G/B colour indices",211],["\" Sets the highlighting for the given group",213],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\" returns the palette index to approximate the given R/G/B color levels",120],["\" returns the actual color level for the given color index",120],["\" returns the palette index for the given R/G/B color indices",120],["\" Returns an approximate colour index for the given colour level",211],["\" Returns an approximate grey index for the given grey level",211],["\" Returns the palette index for the given grey index",211],["\" Returns the actual colour level for the given colour index",211]],"useCount":6896},{"word":"glob","context":[["let matches = split(glob(a:A.'*'),\"\\n\")",75],["let full_paths = split(glob(path.a:glob.suffix),\"\\n\")",51],["function! s:glob(expr) abort",52],["let matches = split(glob(path.sep.pattern),\"\\n\")",52],["\" Like pathogen#glob(), only limit the results to directories.",67],["\" Convenience wrapper around glob() which returns a list.",67],["let files = split(glob(a:pattern),\"\\n\")",68],["return filter(pathogen#glob(a:pattern),'isdirectory(v:val)')",68],["let matches = split(glob(self.tree(s:gsub(base,'/','*&').'*/')),\"\\n\")",76],["let matches = split(glob(self.tree(s:gsub(base,'/','*&').'*')),\"\\n\")",76]],"useCount":2725},{"word":"global","context":[["\"   'g'   global: find global definition(s) of the token under cursor",39],["\"   'g'   global: find global definition(s) of the token under cursor",39],["\\ {'short' : 'v', 'long' : 'global variables', 'fold' : 0, 'stl' : 0},",39],["\" Description: vim global plugin that provides a nice tree explorer",38],["\" Search backwards for a global declaration to start processing the syntax.",35],["\" gcc command line you can add those to the global variable",37],["call append(\"$\", \"\\t(global or local to buffer)\")",199],["\"                     Uses the global markfilelist",36],["\" Class method to get all bookmarks. Lazily initializes the bookmarks global",37],["global G_THREADS",38]],"useCount":2534},{"word":"gmail","context":[["\" @Author:      Tom Link (mailto:micathom AT gmail com?subject=[vim])",196],["\"Maintainer:  Gregor Uhlenheuer <kongo2002 at gmail dot com>",106],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu@gmail.com>",909],["\" AUTHOR: Shougo Matsushita <Shougo.Matsu@gmail.com>",510],["\"Maintainer:  Martin Grenfell <martin.grenfell at gmail dot com>",344],["\"Maintainer:  LCD 47 <lcd047 at gmail dot com>",278],["\" Maintainer:  othree <othree@gmail.com>",128],["\" Release Coordinator:\tDoug Kearns <dougkearns@gmail.com>",146],["\" AUTHOR:  Shougo Matsushita <Shougo.Matsu at gmail.com>",195],["\" @Author:      Tom Link (micathom AT gmail com?subject=[vim])",214]],"useCount":5925},{"word":"go","context":[["call go#list#JumpToFirst(l:listtype)",115],["let $GOPATH = go#path#Detect()",199],["if go#util#ShellError() != 0",113],["call go#cmd#autowrite()",110],["call go#list#Clean(l:listtype)",72],["let out = go#tool#ExecuteInDir(command)",166],["if go#util#IsWin()",133],["call go#list#Window(len(errors))",72],["call go#list#Window(l:listtype, len(errors))",130],["call go#list#Window(l:listtype)",70]],"useCount":12541},{"word":"green","context":[["\" green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60",73],["\" green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60",73],["call <SID>X(\"MoreMsg\", s:green, \"\", \"\")",186],["call <SID>X(\"String\", s:green, \"\", \"\")",185],["call <SID>X(\"Question\", s:green, \"\", \"\")",185],["call <SID>X(\"ModeMsg\", s:green, \"\", \"\")",185],["call <SID>X(\"rubySymbol\", s:green, \"\", \"\")",176],["call <SID>X(\"rubyStringDelimiter\", s:green, \"\", \"\")",161],["call <SID>X(\"diffAdded\", s:green, \"\", \"\")",150],["let s:green       = \"2\"",86]],"useCount":4478},{"word":"grey","context":[["\" Returns an approximate grey index for the given grey level",211],["\" Get the closest grey",211],["\" Use the grey",211],["\" Returns the actual grey level represented by the grey index",211],["\" Returns the actual grey level represented by the grey index",211],["\" returns an approximate grey index for the given grey level",120],["\" Returns the palette index for the given grey index",211],["\" Returns an approximate grey index for the given grey level",211],["\" get the closest grey",121],["\" use the grey",121]],"useCount":2489},{"word":"group","context":[["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276],["fun <SID>X(group, fg, bg, attr)",254],["exec \"hi \" . a:group . \" guibg=#\" . a:bg . \" ctermbg=\" . <SID>rgb(a:bg)",229],["exec \"hi \" . a:group . \" guifg=#\" . a:fg . \" ctermfg=\" . <SID>rgb(a:fg)",229],["exec \"hi \" . a:group . \" ctermbg=\" . s:cterm(a:ctermbg)",291],["exec \"hi \" . a:group . \" guifg=#\" . s:gui(a:guifg)",291],["exec \"hi \" . a:group . \" ctermfg=\" . s:cterm(a:ctermfg)",291],["exec \"hi \" . a:group . \" guibg=#\" . s:gui(a:guibg)",291],["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["\" Sets the highlighting for the given group",213]],"useCount":7901},{"word":"gsub","context":[["let mat = s:gsub(mat,'\\|','\\\\|')",58],["let matches = split(glob(self.tree(s:gsub(base,'/','*&').'*/')),\"\\n\")",76],["function! s:gsub(str,pat,rep)",65],["echo s:sub(s:gsub(output,'\\n+','\\n'),'\\n$','')",75],["let args = s:gsub(args,'%(^| )@<=[%#]%(:\\w)*','\\=expand(submatch(0))')",75],["let matches = split(glob(self.tree(s:gsub(base,'/','*&').'*')),\"\\n\")",76],["%[\"#{arg.gsub('\"', '\\\"')}\"]",90],["$curbuf.append((lnum || 4) - 1 + offset, line.gsub(/\\e\\[./, '').chomp)",90],["function! s:gsub(str,pat,rep) abort",86],["return s:gsub(a:path,'\\\\','/')",83]],"useCount":3458},{"word":"gui","context":[["CSAHi vimSyncMatch term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimNormCmds term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimIsCommand term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuMap term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["fun s:gui(color)",290],["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["exec \"hi \" . a:group . \" guifg=#\" . s:gui(a:guifg)",291],["delf <sid>gui",291],["exec \"hi \" . a:group . \" guibg=#\" . s:gui(a:guibg)",291],["CSAHi vimMenuRhs term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":93799},{"word":"gui00","context":[["call <sid>hi(\"MatchParen\",    s:gui00, s:gui03, s:cterm00, s:cterm03,  \"\")",256],["if a:color == s:gui00",289],["return s:gui00",284],["call <sid>hi(\"ErrorMsg\",      s:gui08, s:gui00, s:cterm08, s:cterm00, \"\")",274],["call <sid>hi(\"SpellCap\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",274],["call <sid>hi(\"SpellLocal\",   \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",274],["call <sid>hi(\"SpellRare\",    \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",273],["call <sid>hi(\"SpellBad\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",273],["call <sid>hi(\"Conceal\",       s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\")",268],["call <sid>hi(\"Normal\",        s:gui05, s:gui00, s:cterm05, s:cterm00, \"\")",262]],"useCount":5963},{"word":"gui01","context":[["call <sid>hi(\"PMenu\",         s:gui04, s:gui01, s:cterm04, s:cterm01, \"none\")",270],["call <sid>hi(\"CursorLine\",    \"\", s:gui01, \"\", s:cterm01, \"none\")",269],["call <sid>hi(\"StatusLineNC\",  s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",272],["call <sid>hi(\"FoldColumn\",    \"\", s:gui01, \"\", s:cterm01, \"\")",272],["call <sid>hi(\"TabLineFill\",   s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"TabLine\",       s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"ColorColumn\",   \"\", s:gui01, \"\", s:cterm01, \"none\")",273],["call <sid>hi(\"Folded\",        s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",274],["return s:gui01",289],["elseif a:color == s:gui01",289]],"useCount":8639},{"word":"gui02","context":[["call <sid>hi(\"Visual\",        \"\", s:gui02, \"\", s:cterm02, \"\")",269],["call <sid>hi(\"VertSplit\",     s:gui02, s:gui02, s:cterm02, s:cterm02, \"none\")",247],["call <sid>hi(\"StatusLine\",    s:gui04, s:gui02, s:cterm04, s:cterm02, \"none\")",273],["elseif a:color == s:gui02",289],["return s:gui02",313],["call <sid>hi(\"VertSplit\",     s:gui02, s:gui02, s:cterm02, s:cterm02, \"none\")",247],["\\ [ s:gui07, s:gui02, s:cterm07, s:cterm02, '' ],",40],["let s:R2   = [ s:gui06, s:gui02, s:cterm06, s:cterm02 ]",40],["let s:V2   = [ s:gui06, s:gui02, s:cterm06, s:cterm02 ]",40],["let s:I2   = [ s:gui06, s:gui02, s:cterm06, s:cterm02 ]",40]],"useCount":2180},{"word":"gui03","context":[["call <sid>hi(\"SpecialKey\",    s:gui03, \"\", s:cterm03, \"\", \"\")",543],["return s:gui03",283],["call <sid>hi(\"Folded\",        s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",274],["call <sid>hi(\"NonText\",       s:gui03, \"\", s:cterm03, \"\", \"\")",274],["call <sid>hi(\"TabLine\",       s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"TabLineFill\",   s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"StatusLineNC\",  s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",272],["call <sid>hi(\"SignColumn\",    s:gui03, s:gui01, s:cterm03, s:cterm01, \"\")",268],["call <sid>hi(\"Comment\",      s:gui03, \"\", s:cterm03, \"\", \"\")",262],["elseif a:color == s:gui03",289]],"useCount":4718},{"word":"gui05","context":[["call <sid>hi(\"Operator\",     s:gui05, \"\", s:cterm05, \"\", \"none\")",260],["call <sid>hi(\"Normal\",        s:gui05, s:gui00, s:cterm05, s:cterm00, \"\")",262],["call <sid>hi(\"NERDTreeExecFile\",  s:gui05, \"\", s:cterm05, \"\", \"\")",268],["call <sid>hi(\"phpParent\",          s:gui05, \"\", s:cterm05, \"\", \"\")",272],["call <sid>hi(\"phpMemberSelector\",  s:gui05, \"\", s:cterm05, \"\", \"\")",272],["call <sid>hi(\"phpComparison\",      s:gui05, \"\", s:cterm05, \"\", \"\")",273],["return s:gui05",289],["call <sid>hi(\"javaScriptBraces\",  s:gui05, \"\", s:cterm05, \"\", \"\")",259],["elseif a:color == s:gui05",313],["call <sid>hi(\"cssBraces\",      s:gui05, \"\", s:cterm05, \"\", \"\")",260]],"useCount":4859},{"word":"gui08","context":[["call <sid>hi(\"Character\",    s:gui08, \"\", s:cterm08, \"\", \"\")",269],["call <sid>hi(\"TooLong\",       s:gui08, \"\", s:cterm08, \"\", \"\")",276],["call <sid>hi(\"Underlined\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276],["call <sid>hi(\"gitCommitOverflow\",  s:gui08, \"\", s:cterm08, \"\", \"\")",275],["call <sid>hi(\"Macro\",         s:gui08, \"\", s:cterm08, \"\", \"\")",275],["call <sid>hi(\"Debug\",         s:gui08, \"\", s:cterm08, \"\", \"\")",275],["call <sid>hi(\"ErrorMsg\",      s:gui08, s:gui00, s:cterm08, s:cterm00, \"\")",274],["call <sid>hi(\"WildMenu\",      s:gui08, \"\", s:cterm08, \"\", \"\")",272],["call <sid>hi(\"Exception\",     s:gui08, \"\", s:cterm08, \"\", \"\")",269],["call <sid>hi(\"WarningMsg\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276]],"useCount":6238},{"word":"gui09","context":[["call <sid>hi(\"Type\",         s:gui09, \"\", s:cterm09, \"\", \"none\")",181],["call <sid>hi(\"Float\",        s:gui09, \"\", s:cterm09, \"\", \"\")",269],["call <sid>hi(\"Boolean\",      s:gui09, \"\", s:cterm09, \"\", \"\")",267],["call <sid>hi(\"sassClassChar\",  s:gui09, \"\", s:cterm09, \"\", \"\")",262],["call <sid>hi(\"Constant\",     s:gui09, \"\", s:cterm09, \"\", \"\")",255],["call <sid>hi(\"Number\",       s:gui09, \"\", s:cterm09, \"\", \"\")",255],["call <sid>hi(\"javaScriptNumber\",  s:gui09, \"\", s:cterm09, \"\", \"\")",253],["call <sid>hi(\"IncSearch\",     s:gui01, s:gui09, s:cterm01, s:cterm09, \"none\")",249],["let s:N3   = [ s:gui09, s:gui01, s:cterm09, s:cterm01 ]",40],["let s:R3   = [ s:gui09, s:gui01, s:cterm09, s:cterm01 ]",40]],"useCount":2681},{"word":"gui0A","context":[["call <sid>hi(\"rubyConstant\",                s:gui0A, \"\", s:cterm0A, \"\", \"\")",275],["call <sid>hi(\"Search\",        s:gui03, s:gui0A, s:cterm03, s:cterm0A,  \"\")",191],["call <sid>hi(\"htmlBold\",    s:gui0A, \"\", s:cterm0A, \"\", \"\")",274],["call <sid>hi(\"Label\",        s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"Repeat\",       s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"Tag\",          s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"PreProc\",      s:gui0A, \"\", s:cterm0A, \"\", \"\")",269],["call <sid>hi(\"Todo\",         s:gui0A, s:gui01, s:cterm0A, s:cterm01, \"\")",267],["call <sid>hi(\"Typedef\",      s:gui0A, \"\", s:cterm0A, \"\", \"\")",267],["call <sid>hi(\"StorageClass\", s:gui0A, \"\", s:cterm0A, \"\", \"\")",255]],"useCount":3614},{"word":"gui0B","context":[["call <sid>hi(\"GitGutterAdd\",     s:gui0B, s:gui01, s:cterm0B, s:cterm01, \"\")",262],["call <sid>hi(\"TabLineSel\",    s:gui0B, s:gui01, s:cterm0B, s:cterm01, \"none\")",265],["call <sid>hi(\"rubyInterpolation\",           s:gui0B, \"\", s:cterm0B, \"\", \"\")",274],["call <sid>hi(\"rubyStringDelimiter\",         s:gui0B, \"\", s:cterm0B, \"\", \"\")",274],["call <sid>hi(\"rubySymbol\",                  s:gui0B, \"\", s:cterm0B, \"\", \"\")",274],["call <sid>hi(\"markdownCodeBlock\",         s:gui0B, \"\", s:cterm0B, \"\", \"\")",269],["call <sid>hi(\"MoreMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["call <sid>hi(\"gitCommitSummary\",   s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["call <sid>hi(\"markdownCode\",              s:gui0B, \"\", s:cterm0B, \"\", \"\")",268],["call <sid>hi(\"ModeMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\")",268]],"useCount":4702},{"word":"gui0D","context":[["call <sid>hi(\"NERDTreeDirSlash\",  s:gui0D, \"\", s:cterm0D, \"\", \"\")",266],["call <sid>hi(\"GitGutterChange\",  s:gui0D, s:gui01, s:cterm0D, s:cterm01, \"\")",263],["call <sid>hi(\"sassMixinName\",  s:gui0D, \"\", s:cterm0D, \"\", \"\")",260],["call <sid>hi(\"Function\",     s:gui0D, \"\", s:cterm0D, \"\", \"\")",254],["call <sid>hi(\"Directory\",     s:gui0D, \"\", s:cterm0D, \"\", \"\")",267],["call <sid>hi(\"Conceal\",       s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\")",268],["call <sid>hi(\"Title\",         s:gui0D, \"\", s:cterm0D, \"\", \"none\")",269],["call <sid>hi(\"Include\",      s:gui0D, \"\", s:cterm0D, \"\", \"\")",269],["call <sid>hi(\"markdownHeadingDelimiter\",  s:gui0D, \"\", s:cterm0D, \"\", \"\")",274],["call <sid>hi(\"rubyAttribute\",               s:gui0D, \"\", s:cterm0D, \"\", \"\")",274]],"useCount":4524},{"word":"gui0E","context":[["call <sid>hi(\"Define\",       s:gui0E, \"\", s:cterm0E, \"\", \"none\")",268],["call <sid>hi(\"Structure\",    s:gui0E, \"\", s:cterm0E, \"\", \"\")",269],["call <sid>hi(\"pythonRepeat\",    s:gui0E, \"\", s:cterm0E, \"\", \"\")",158],["call <sid>hi(\"htmlItalic\",  s:gui0E, \"\", s:cterm0E, \"\", \"\")",275],["call <sid>hi(\"Conditional\",  s:gui0E, \"\", s:cterm0E, \"\", \"\")",268],["call <sid>hi(\"GitGutterChangeDelete\",  s:gui0E, s:gui01, s:cterm0E, s:cterm01, \"\")",246],["call <sid>hi(\"cssClassName\",   s:gui0E, \"\", s:cterm0E, \"\", \"\")",261],["call <sid>hi(\"sassInclude\",    s:gui0E, \"\", s:cterm0E, \"\", \"\")",261],["call <sid>hi(\"sassMixing\",     s:gui0E, \"\", s:cterm0E, \"\", \"\")",261],["call <sid>hi(\"Keyword\",      s:gui0E, \"\", s:cterm0E, \"\", \"\")",266]],"useCount":3509},{"word":"gui_running","context":[["if has(\"gui_running\") || &t_Co == 88 || &t_Co == 256",301],["if !has(\"gui_running\")",204],["if !has('gui_running')",356],["if has('gui_running')",497],["if has(\"gui_running\")",1090],["\"     if has('gui_running')",67],["if has('gui_running') && !has('win32')",152],["let s:mac_gui = has('gui_macvim') && has('gui_running')",89],["elseif has(\"gui_running\") || &t_Co == 88",80],["elseif has(\"gui_running\") || &t_Co == 256",82]],"useCount":4563},{"word":"guibg","context":[["CSAHi vimMenuMap term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["if a:guibg != \"\"",322],["exec \"hi \" . a:group . \" guibg=#\" . s:gui(a:guibg)",291],["exec \"hi \" . a:group . \" guibg=#\" . s:gui(a:guibg)",291],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276],["CSAHi vimOperParen term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMapRhsExtend term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimCmdSep term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimCommentTitleLeader term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":92100},{"word":"guifg","context":[["if a:guifg != \"\"",322],["CSAHi vimSyncLines term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["exec \"hi \" . a:group . \" guifg=#\" . s:gui(a:guifg)",291],["exec \"hi \" . a:group . \" guifg=#\" . s:gui(a:guifg)",291],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276],["CSAHi vimHiCtermColor term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimFuncBlank term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAugroupSyncA term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimExecute term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimSynLine term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":104113},{"word":"guisp","context":[["hi SpellRare   guisp=#FFFFFF gui=undercurl",163],["CSAHi SpellBad term=reverse cterm=undercurl ctermbg=bg ctermfg=196 gui=undercurl guibg=bg guifg=fg guisp=#ff0000",180],["CSAHi SpellCap term=reverse cterm=undercurl ctermbg=bg ctermfg=21 gui=undercurl guibg=bg guifg=fg guisp=#0000ff",177],["CSAHi SpellRare term=reverse cterm=undercurl ctermbg=bg ctermfg=201 gui=undercurl guibg=bg guifg=fg guisp=#ff00ff",177],["hi SpellCap    guisp=#7070F0 gui=undercurl",164],["hi SpellBad    guisp=#FF0000 gui=undercurl",163],["hi SpellLocal  guisp=#70F0F0 gui=undercurl",162],["CSAHi SpellLocal term=underline cterm=undercurl ctermbg=bg ctermfg=51 gui=undercurl guibg=bg guifg=fg guisp=#00ffff",123],["\" Arguments: group, guifg, guibg, gui, guisp",86],["exe \"let s:sp_base1     = ' guisp=\".s:base1  .\"'\"",66]],"useCount":7144},{"word":"h","context":[["so <sfile>:p:h/html.vim",126],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTab.\": open in new tab\\n\"",92],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTab.\": open in new tab\\n\"",92],["let @h=@h.\"\\\" middle-click,\\n\"",92],["let @h=@h.\"\\\"    selected dir\\n\"",92],["\\'\\h\\w*')",205],["normal! h",212],["let @h=@h.\"\\\"\\n\\\" ----------------------------\\n\"",360],["let @h=@h.\"\\\"\\n\\\" ----------------------------\\n\"",360],["1wincmd h",289]],"useCount":22922},{"word":"handler","context":[["function s:handler.getModeName()",60],["function s:handler.onOpen(word, mode)",60],["\" s:handler {{{1",60],["return a:base.concretize(copy(s:handler))",60],["function s:handler.onModeEnterPost()",60],["function s:handler.onModeLeavePost(opened)",60],["function s:handler.makePatternSet(patternBase)",60],["for handler in s:handlers",60],["function s:handler.makePreviewLines(word, count)",60],["function s:handler.getPreviewHeight()",60]],"useCount":2176},{"word":"has","context":[["if has('win32') || has('win64')",293],["if has(\"gui_running\") || &t_Co == 88 || &t_Co == 256",301],["if has(\"win32\")",352],["if has(\"autocmd\")",377],["if has('nvim')",388],["if has('gui_running')",497],["if has(\"spell\")",507],["if has('win32')",585],["if !has('gui_running')",356],["if has(\"gui_running\")",1090]],"useCount":36244},{"word":"has_key","context":[["if !has_key(allowed, f) && isdirectory(f)",90],["if get(s:loaded, name, 0) || !has_key(plug, 'on') && !has_key(plug, 'for')",89],["if empty(name) || !has_key(printed, name)",90],["return has_key(g:plugs[a:name], 'uri')",90],["if has_key(spec, 'uri')",90],["if has_key(plug, 'for')",90],["if has_key(a:options, 'cwd')",130],["if !has_key(g:plugs, name)",96],["if has_key(b:rails_abbreviations,root)",94],["if has_key(plug, 'on')",90]],"useCount":14833},{"word":"hash","context":[["call s:throw('rev-parse '.a:rev.': '.hash)",76],["let b:fugitive_type = s:repo().git_chomp('cat-file','-t',hash)",76],["let hash = s:buffer().sha1()",76],["let type = repo.git_chomp('cat-file','-t',hash)",76],["let hash = self.git_chomp('rev-parse','--verify',a:rev)",76],["call s:ReplaceCmd(s:repo().git_command('cat-file','-p',hash))",76],["return \"read !\".escape(repo.git_command('cat-file',type,hash),'%#\\')",76],["call s:ReplaceCmd(s:repo().git_command('ls-tree',hash))",76],["let hash = repo.rev_parse(path)",77],["call s:ReplaceCmd(s:repo().git_command('cat-file',b:fugitive_type,hash))",228]],"useCount":2620},{"word":"have","context":[["\" we have a mapping",55],["\" Only when an item doesn't have highlighting yet",254],["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\"if we have no parent then we can have no siblings",72],["\"if we have no parent then we can have no siblings",72],["\" the first two items don't have an impact, but better safe",73],["\" Only used when an item doesn't have highlighting yet",106],["\" Highlight special characters (those which have a backslash) differently",172],["\" Quit when menu translations have already been done.",185],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588]],"useCount":8375},{"word":"head","context":[["\\                    .\"</head>\\n\"",210],["\" truncate hash to a:1 characters if we're in detached head mode",57],["syn match   rubyRailsTestControllerMethod  '\\.\\@<!\\<\\%(get\\|post\\|put\\|delete\\|head\\|process\\|assigns\\)\\>'",58],["let head = line('.')",67],["execute head",67],["let head = s:repo().head_ref()",75],["if head =~# '^ref: '",76],["elseif head =~# '^\\x\\{40\\}$'",76],["let type = 'head'",77],["\\                    .\"<head>\\n\"",210]],"useCount":2672},{"word":"header","context":[["\" In order to force syntastic to refresh the header includes simply",43],["call append(0, header)",44],["\"draw the header line",44],["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62],["<li class=\"header-nav-item\">",64],["self.header()",79],["def header(self):",79],["\" following line to your .vimrc. Otherwise the header files are checked only",43],["\" Section: Plugin header {{{1",105],["\" To disable the search of included header files after special",43]],"useCount":3333},{"word":"help","context":[["\" :help group-name",75],["\" cool help screens",121],["\" :help highlight-groups",79],["\" Brief help",76],["\" :help cterm-colors",75],["\" screenshots which will help you select either the light or dark background.",70],["\" Remove the previous help",68],["keepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",53],["if &filetype == \"help\"",59],["\" Skip buffers with 'buftype' set to nofile, nowrite, quickfix or help",67]],"useCount":6335},{"word":"here","context":[["\" The plugins listed in ~/.vim/.vundles.local will be added here to",55],["let v:errmsg = 'fugitive: rm not supported here'",77],["\" Line continuation used here",74],["\"This is here because it is possible for some error messages to",45],["\" TODO: complete controller names with trailing slashes here",49],["\" difficult the way things here are currently structured.",49],["\" Use \"extend\" here to have preprocessor lines not terminate halfway a",52],["\" Line continuation is used here, remove 'C' from 'cpoptions'",56],["\" we define it here so that included files can test for it",66],["\" here. It fires only in cases where vim is transferring from terminal to gui",66]],"useCount":3302},{"word":"hex","context":[["syn keyword pythonBuiltin\thelp hex id input int isinstance",23],["\" Returns the palette index to approximate the 'rrggbb' hex string",190],["setlocal nrformats=octal,hex",785],["\"hex number",154],["\" returns the palette index to approximate the 'rrggbb' hex string",118],["setlocal nrformats=bin,octal,hex",90],["\" leave the hex values out entirely in that case and include only cterm colors)",73],["au BufNewFile,BufRead *.hex,*.h32\t\tsetf hex",29],["syn keyword pythonBuiltinFunc\tglobals hasattr hash hex id",29],["au BufNewFile,BufRead *.hex,*.h32\t\tsetf hex",29]],"useCount":2085},{"word":"hi","context":[["exec \"hi \" . a:group . \" guibg=#\" . s:gui(a:guibg)",291],["exec \"hi \" . a:group . \" ctermfg=\" . s:cterm(a:ctermfg)",291],["exec \"hi \" . a:group . \" ctermbg=\" . s:cterm(a:ctermbg)",291],["hi clear",3887],["command -nargs=+ HiLink hi def link <args>",2291],["command -nargs=+ HiLink hi link <args>",2249],["exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr",578],["call <sid>hi(\"SpecialKey\",    s:gui03, \"\", s:cterm03, \"\", \"\")",543],["delf <sid>hi",306],["exec \"hi \" . a:group . \" guifg=#\" . s:gui(a:guifg)",291]],"useCount":215707},{"word":"hidden","context":[["\" Change the buffer (assuming hidden is set) to the previous",44],["\"dont show hidden files unless instructed to",45],["\" A buffer becomes hidden when it is abandoned",58],["\"       *Ignore          left blank, hidden  |hl-Ignore|",68],["\" vim --noplugin -u vim/vundles.vim -N \"+set hidden\" \"+syntax on\" +BundleClean! +BundleInstall +qall",71],["if &hidden",73],["if !&hidden",76],["\" toggles the display of hidden files",97],["set hidden",405],["\" get rid of hidden buffers",39]],"useCount":2108},{"word":"highlight","context":[["highlight clear",620],["\" highlight groups",153],["\" :he highlight-groups",127],["\"when wanted, highlight trailing white space",89],["\" :help highlight-groups",79],["\" highlight delims, see the plugin referenced above",73],["\"Clear current search highlight by double tapping //",67],["\" Get the current highlight group. Useful for then remapping the color",59],["\" While it can't be handled with context depended with Regex based highlight",55],["\" Disable highlight when <leader><cr> is pressed",55]],"useCount":9487},{"word":"highlighting","context":[["\" Markdown highlighting",307],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["\" JavaScript highlighting",303],["\" Standard syntax highlighting",304],["\" Ruby highlighting",304],["\" Git highlighting",306],["\" Syntax highlighting",312],["\" HTML highlighting",312],["\" GitGutter highlighting",325],["\" Define the default highlighting.",2028]],"useCount":14994},{"word":"html","context":[["let filters = ['html']",105],["runtime! syntax/html.vim",281],["\\                    .\"</html>\",",193],["let rtype = emmet#lang#exists(type) ? type : 'html'",185],["\\        'extends': 'html',",170],["autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags",134],["so <sfile>:p:h/html.vim",126],["if len(type) == 0 | let type = 'html' | endif",111],["\\                    .\"<html lang=\\\"${lang}\\\">\\n\"",105],["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105]],"useCount":7867},{"word":"http","context":[["\" Maintainer:   Tim Pope <http://tpo.pe/>",202],["\" @Website:     http://www.vim.org/account/profile.php?user_id=4037",341],["\" Home: http://code.google.com/p/vimwiki/",81],["\"              See http://sam.zoy.org/wtfpl/COPYING for more details.",100],["\" Scheme: Chris Kempson (http://chriskempson.com)",101],["\"             See http://sam.zoy.org/wtfpl/COPYING for more details.",1702],["\" URL: http://physics.muni.cz/~yeti/vim/gtk-syntax.tar.gz",101],["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105],["\" http://chriskempson.com",170],["\" URL:         http://github.com/kchmck/vim-coffee-script",106]],"useCount":10309},{"word":"https","context":[["\\ '^https://git::@github\\.com', 'https://github.com', '')",78],["\\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",60],["\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby",101],["\" Find more themes at : https://github.com/daylerees/colour-schemes",91],["\"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",90],["let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')",89],["\"   Plug 'https://github.com/junegunn/vim-github-dashboard.git'",89],["\\ '^https://git::@github\\.com', 'https://github.com', '')",78],["let s:plug_src = 'https://github.com/junegunn/vim-plug.git'",73],["\"     https://github.com/tpope/vim-pathogen",66]],"useCount":3209},{"word":"i","context":[["let i = 1",1707],["return i",528],["setlocal complete=.,w,b,u,t,i",871],["let i = i + 1",2056],["let i = i + 1",2056],["let i -= 1",222],["let i = 0",2277],["let i += 1",2583],["while i < a:0",253],["for i in s:Bookmark.Bookmarks()",256]],"useCount":45966},{"word":"id","context":[["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62],["exe 'sign unplace '.id.' buffer='.winbufnr(0)",46],["return s:id",47],["return id",56],["'result': \"<div id=\\\"header\\\">\\n\\t<li></li>\\n</div>\\n<div id=\\\"content\\\"></div>\\n\",",62],["let x = s:HtmlColor(synIDattr(a:id, \"bg#\", s:whatterm))",65],["let x = s:HtmlColor(synIDattr(a:id, \"fg#\", s:whatterm))",65],["retu s:id",67],["let id += 1",68],["let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)",103]],"useCount":5526},{"word":"idx","context":[["return idx",83],["let v = get(a:val, idx, 0)",79],["let name = printf('%s (%s)', prefix, idx)",89],["let idx    = 2",90],["if idx == -1",111],["if idx != -1",121],["let idx += 1",202],["let idx = idx + 1",214],["let idx = idx + 1",214],["let idx = 0",288]],"useCount":6220},{"word":"if","context":[["if a:0 == 0",1381],["if exists(\"b:current_syntax\")",2491],["if version < 600",3425],["if exists(\"syntax_on\")",3421],["if version < 508",2366],["if &t_Co == 88",2034],["if a:0 > 0",1510],["if a:0",1556],["if v:shell_error",1585],["if a:n == 0",1986]],"useCount":384535},{"word":"ignore","context":[["if i.path.ignore() ==# 0",35],["\" \\(\"\\|\\[\\)\\? - ignore any quotes",38],["function! s:Path.ignore()",39],["\" ignore",40],["\"filter out the user specified paths to ignore",45],["\" To ignore plugin indent changes, instead use:",52],["syntax case ignore",411],["syn case ignore",1972],["\" not a directory, ignore it",38],["\"ignore blank lines",37]],"useCount":4071},{"word":"imap","context":[["imap <silent> <C-K> <%=   %><Esc>3hi",45],["imap <expr><TAB> neosnippet#expandable_or_jumpable() ?",38],["imap <silent> <C-J> <%  %><Esc>2hi",46],["imap \u0016\u0007s <Plug>Isurround",34],["imap \u0016\u0007S <Plug>ISurround",34],["imap <C-k>     <Plug>(neosnippet_expand_or_jump)",51],["imap <c-l> <space>=><space>",57],["imap <C-a> <esc>wa",60],["imap \u0016\u0013 <Plug>Isurround",32],["imap <buffer> <c-h> <c-r>=<SID>CompletionReset(\"\\<lt>c-h>\")<cr>",32]],"useCount":2963},{"word":"import","context":[["import traceback",105],["import vim",692],["import tempfile",97],["import datetime",86],["import random",84],["import time",122],["import os",297],["import re",199],["import sys",173],["import subprocess",124]],"useCount":5276},{"word":"in","context":[["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["for line in lines",604],["for candidate in a:candidates",442],["for e in loclist",266],["for i in s:Bookmark.Bookmarks()",256],["for winnr in range(1,tabpagewinnr(tab,'$'))",225],["for name in a:names",224],["for spec in values(g:plugs)",179],["for [name, spec] in items(g:plugs)",180],["for i in self.children",180]],"useCount":71248},{"word":"include","context":[["\" leave the hex values out entirely in that case and include only cterm colors)",73],["syn include @rubyTop syntax/ruby.vim",72],["\" set the runtime path to include Vundle and initialize",90],["\" Only include a command terminator if one has not already",172],["ing  = ![true, false].include?(type)",90],["if SEP.include? char.chr",90],["setlocal include=",794],["\" However it seems relatively benign in this case to include the autocommand",66],["syn match\tcInclude\tdisplay \"^\\s*\\(%:\\|#\\)\\s*include\\>\\s*[\"<]\" contains=cIncluded",68],["\"        Include         preprocessor #include",69]],"useCount":5238},{"word":"ind","context":[["let ind = ind - &sw",548],["let ind = ind + &shiftwidth",83],["let ind = ind - &shiftwidth",98],["return ind + &sw",167],["let ind = indent(lnum)",375],["let ind = ind - &sw",548],["let ind = ind + &sw",555],["let ind = ind + &sw",555],["return ind",1175],["let ind = ind - &shiftwidth",98]],"useCount":7724},{"word":"indent","context":[["let ind = indent(lnum)",375],["return indent",308],["set backspace=indent,eol,start",447],["\" Vim indent file",746],["\" Only load this indent file when no other was loaded.",515],["\" Hit the start of the file, use zero indent.",176],["filetype indent on",167],["set foldmethod=indent",163],["return indent(lnum)",162],["filetype plugin indent on",735]],"useCount":14688},{"word":"index","context":[["\" Returns an approximate grey index for the given grey level",211],["\" Returns the actual grey level represented by the grey index",211],["\" Returns the palette index for the given R/G/B colour indices",211],["let index = 0",276],["let index += 1",308],["\" Returns the palette index for the given grey index",211],["\" Returns the palette index for the given grey index",211],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\" Returns an approximate colour index for the given colour level",211],["\" Returns the actual colour level for the given colour index",211]],"useCount":14456},{"word":"info","context":[["\"refresh and redraw all the error info for this buf when saving or reading",81],["let info = old_mode.' '.sha1.' '.stage.\"\\t\".path",75],["\" Add subtype info if present.",75],["return info",67],["call s:DB_warningMsg('DBI: No column info returned')",66],["\" Maintainer:   Chris Morgan <me@chrismorgan.info>",59],["\\ 'menu' : '', 'info' : ''",58],["set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc",75],["call writefile([info],tmp)",76],["let error = system(s:repo().git_command('update-index','--index-info').' < '.tmp)",76]],"useCount":2406},{"word":"init","context":[["subm = \"git submodule update --init --recursive 2>&1\"",59],["call lightline#init()",210],["call EasyMotion#init()",104],["call s:init()",89],["call airline#init#bootstrap()",75],["let memo = a:init",65],["\" init hack for <c-x><c-v> workaround.",57],["let context = unite#init#_context(context,",55],["function! s:init()",49],["'git submodule update --init --recursive']",48]],"useCount":3756},{"word":"initVariable","context":[["function! s:initVariable(var, value)",47],["call s:initVariable(\"g:NERDTreeBookmarksFile\", expand('$HOME') . '/.NERDTreeBookmarks')",45],["call s:initVariable(\"g:NERDTreeMapActivateNode\", \"o\")",45],["call s:initVariable(\"g:NERDTreeMapCloseDir\", \"x\")",45],["call s:initVariable(\"g:NERDTreeAutoCenter\", 1)",45],["call s:initVariable(\"g:NERDTreeMapRefresh\", \"r\")",45],["call s:initVariable(\"g:NERDTreeMapToggleBookmarks\", \"B\")",45],["call s:initVariable(\"g:NERDTreeMapChangeRoot\", \"C\")",45],["call s:initVariable(\"g:NERDTreeShowBookmarks\", 0)",45],["call s:initVariable(\"g:NERDTreeMapCloseChildren\", \"X\")",45]],"useCount":2597},{"word":"inoremap","context":[["inoremap <expr><C-y>  neocomplete#close_popup()",36],["inoremap <expr><C-g>     neocomplete#undo_completion()",47],["inoremap <expr><C-l>     neocomplete#complete_common_string()",47],["exe 'inoremap <expr>' . key .",52],["inoremap <expr><C-h> neocomplete#smart_close_popup().\"\\<C-h>\"",54],["inoremap <C-U> <C-G>u<C-U>",56],["inoremap <expr><BS> neocomplete#smart_close_popup().\"\\<C-h>\"",66],["inoremap jk <esc>",69],["inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>",72],["inoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"",79]],"useCount":6222},{"word":"input","context":[["\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()",64],["\"      call Decho(\"filter input: \".getline('$'))",210],["\"     call Decho(\"filter input: \".getline('$'))",168],["\"     call Decho(\"filter input: \".getline('.'))",126],["\\ input(printf('Revert the update of %s? (y/N) ', name)) !~? '^y'",84],["\"    call Decho(\"filter input: \".getline('.'))",75],["\" See |tlib#input#List()|.",75],["let input = ''",64],["let newname= input(\"Moving \".oldname.\" to : \",oldname)",55],["call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()",56]],"useCount":9321},{"word":"insert","context":[["call insert(buf_name, s:skip_symbol)",32],["call insert(buffers, -1, 0)",31],["\" and insert the comment leader when hitting <CR> or using \"o\".",79],["\\ 'PrtInsert(\"c\")':       ['<MiddleMouse>', '<insert>'],",32],["\"   Use your tab key to do all your completion in insert mode!",33],["\" insert: nil",35],["return insert(a:list, a:val)",41],["\"while still in insert mode by hitting Ctrl-a. Example:",64],["let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}",69],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269]],"useCount":2606},{"word":"inside","context":[["\" even if the cursor is halfway inside the word",66],["\" In cases where Solarized is initialized inside a terminal vim session and",66],["\" Check if the character at lnum:col is inside a string.",64],["\" If the line is inside a fold, open the fold",99],["\" This is fast but code inside triple quoted strings screws it up. It",72],["\" Check if the character at lnum:col is inside a string, comment, or is ascii.",58],["\" If the line is empty and inside a string, use the previous line.",53],["\" is impossible to fix because the only way to know if you are inside a",72],["\" But a \"*/\" inside a cString in a cComment DOES end the comment!  So we",68],["\"        SpecialComment  special things inside a comment",69]],"useCount":2617},{"word":"install","context":[["function! s:install(force, names)",89],["echo 'No plugin to '. (a:pull ? 'update' : 'install') . '.'",61],["Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }",61],["\" 1.  Download and install Tim Pope's Pathogen from:",66],["self.install()",79],["log.call name, 'Installing ...', :install",90],["when :install  then '+' when :update then '*'",90],["\" Then reload .vimrc and :PlugInstall to install plugins.",89],["def install(self):",79],["\"       This requries that you install https://github.com/amix/vimrc !",56]],"useCount":2307},{"word":"int","context":[["let s:filetype_regex_overrides['^int-'] = ['vimshell','%{substitute(&ft, \"int-\", \"\", \"\")}']",35],["G_TIMEOUT = int(vim.eval('get(g:, \"plug_timeout\", 60)'))",79],["nthreads = int(vim.eval('s:update.threads'))",79],["G_RETRIES = int(vim.eval('get(g:, \"plug_retries\", 2)')) + 1",79],["G_LOG_PROB = 1.0 / int(vim.eval('s:update.threads'))",79],["self.maxy = int(vim.eval('winheight(\".\")'))",79],["\"       *Type            int, long, char, etc.",69],["syn keyword\tcType\t\tint long short char void",54],["syn keyword   rustType        int uint float char bool u8 u16 u32 u64 f32",35],["let s:filetype_regex_overrides['^int-'] = ['vimshell','%{substitute(&ft, \"int-\", \"\", \"\")}']",35]],"useCount":2251},{"word":"into","context":[["\"newNode: the node to graft into the tree",42],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["\" Split a path into a list.",85],["\"This function doesnt not recurse into child dir nodes",84],["\" copy current filename into system clipboard - mnemonic: (c)urrent(f)ilename",69],["\"     b. **or move manually into the pathogen bundle directory:**",66],["\" several Tab workspaces and want to open two windows into the same file.",46],["\"     subdirectory (e.g. autoload/togglebg.vim goes into your .vim/autoload",45],["\" Separated into a match and region because a region by itself is always greedy",37],["\" into one or more lines.\"",39]],"useCount":3151},{"word":"is","context":[["\" ag is fast enough that CtrlP doesn't need to cache",110],["echom \"File is not encrypted, all GPG functions disabled!\"",93],["\" Check whether this file is removed based on user request",98],["\" If it is, then don't display the tags for this file",98],["\" If the line is inside a fold, open the fold",99],["cc 1 \"jump to first error if there is any",100],["\" NOTE: lines between '\" ___vital___' is generated by :Vitalize.",269],["\"               notice is copied with it. Like anything else that's free,",166],["\" v:val is used in {expr}",136],["\" If the buffer is visible, switch to it",117]],"useCount":48369},{"word":"isdirectory","context":[["if isdirectory(destination)",151],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["if isdirectory(a:dir)",99],["if isdirectory(cwd)",95],["if !has_key(allowed, f) && isdirectory(f)",90],["if isdirectory(after)",90],["if !isdirectory(spec.dir)",91],["if !isdirectory(dir)",152],["if isdirectory(path)",162],["if isdirectory(spec.dir)",182]],"useCount":5805},{"word":"iskeyword","context":[["setlocal iskeyword=@,48-57,_,192-255",833],["let &iskeyword = oldiskeyword",24],["setlocal iskeyword+=$",116],["setlocal iskeyword+=:",93],["setlocal iskeyword+=.",73],["setlocal iskeyword+=-",179],["set iskeyword+=:",28],["setlocal iskeyword=_,-,a-z,A-Z,48-57",28],["setlocal iskeyword-=_",29],["setlocal iskeyword=@,48-57,_,.",71]],"useCount":2084},{"word":"islocal","context":[["NetrwKeepj call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",68],["keepj call s:SetRexDir(a:islocal,dirname)",40],["elseif a:islocal",39],["call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",125],["elseif !a:islocal && !s:netrwmftgt_islocal",36],["if a:islocal",498],["NetrwKeepj call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",68],["keepj call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",94],["keepj call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",94],["call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",125]],"useCount":3973},{"word":"it","context":[["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" If it is, then don't display the tags for this file",98],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["\"               notice is copied with it. Like anything else that's free,",166],["\" If the file doesn't support tag listing, skip it",164],["\" If the buffer is visible, switch to it",117],["\" -n  unix : DON'T use <.netrc>, even though it exists",100],["\"              it and/or modify it under the terms of the Do What The Fuck You",100]],"useCount":25318},{"word":"italic","context":[["hi StorageClass    guifg=#FD971F               gui=italic",155],["hi Tag             guifg=#F92672               gui=italic",153],["hi Macro           guifg=#C4BE89               gui=italic",152],["hi DiffText                      guibg=#4C4745 gui=italic,bold",137],["hi SpecialKey      guifg=#888A85               gui=italic",75],["hi rubyRailsUserClass ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic",71],["hi rubyConstant ctermfg=81 ctermbg=NONE cterm=NONE guifg=#66d9ef guibg=NONE gui=italic",70],["let s:i           = \",italic\"",69],["hi SpecialKey      guifg=#66D9EF               gui=italic",150],["hi Special         guifg=#66D9EF guibg=bg      gui=italic",145]],"useCount":4016},{"word":"item","context":[["\" Only used when an item doesn't have highlighting yet",106],["for item in items",173],["\" Only when an item doesn't have highlighting yet",254],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["<li class=\"facebox-user-list-item\">",70],["call add(res, substitute(item, '\\${cursor}\\||', '', 'g'))",70],["for item in a:items",69],["return item",73],["unlet item",74],["for item in a:list",94]],"useCount":9994},{"word":"items","context":[["\" For version 5.x: Clear all syntax items",1596],["for [name, spec] in items(a:todo)",89],["for item in items",173],["for [map, names] in items(lod.map)",83],["for [ft, names] in items(lod.ft)",83],["for [cmd, names] in items(lod.cmd)",83],["for [name, spec] in items(g:plugs)",180],["let items = []",111],["return items",113],["for [name, j] in items(s:jobs)",88]],"useCount":7129},{"word":"its","context":[["\" Konsole only used its own palette up til KDE 4.2.0",54],["\" Start on the line we're at and use its indent.",54],["\" by Wimer Hazenberg and its darker variant",157],["\"if its a special window e.g. quickfix or another explorer plugin then we",43],["\" according to it.  For parentheses we indent to its column - 1, for the",53],["\"assume its a file and create",45],["\" put the cursor on the given bookmark and, if its a file, open it",44],["\"if the link is a dir then slap a / on the end of its dest",45],["\"if it ends with a slash, assume its a dir create it",45],["\" If we got a closing bracket on an empty line, find its match and indent",64]],"useCount":2437},{"word":"j","context":[["let j = 1",303],["let j = j + 1",343],["let j = j + 1",343],["let j += 1",258],["let j = 0",213],["normal! j",159],["nnoremap j gj",143],["wincmd j",138],["normal j",105],["while j < len(list)",100]],"useCount":8183},{"word":"javascript","context":[["call s:addfilecmds(\"javascript\")",49],["let b:current_syntax = \"javascript\"",76],["if main_syntax == 'javascript'",78],["let main_syntax = 'javascript'",78],["Plugin 'pangloss/vim-javascript'",81],["Plug 'pangloss/vim-javascript'",83],["setlocal filetype=javascript",101],["\\ 'filetype': 'javascript',",122],["autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS",135],["if main_syntax == \"javascript\"",64]],"useCount":2870},{"word":"join","context":[["return type(a:v) == s:TYPE.string ? a:v : join(a:v, \"\\n\") . \"\\n\"",86],["echo join(msgs, ' ')",89],["return s:err(printf('Unknown plugin%s: %s', s, join(unknowns, ', ')))",89],["threads.each { |t| t.join rescue nil }",180],["let caption = join(a:argList, ' ')",151],["return join(lines, \"\\n\")",97],["[false, [data.chomp, \"PlugClean required.\"].join($/)]",90],["let docd = join([spec.dir, 'doc'], '/')",90],["\"PlugClean required.\"].join($/)]",90],["execute 'PlugUpdate' join(names)",89]],"useCount":9285},{"word":"js","context":[["let res .= '.js'",34],["return \"public/javascripts/application.js\"",34],["elseif f =~ '\\<application\\.js$'",34],["let urls = urls + [s:sub(s:sub(self.name(),'^app/scripts/','/javascripts/'),'\\.coffee$','.js')]",36],["elseif rails#app().has('coffee') && rails#app().has_file('app/scripts/'.name.'.js')",36],["return get({'rhtml': 'html', 'rxml': 'xml', 'rjs': 'js', 'haml': 'html'},fnamemodify(self.path(),':e'),'')",42],["let str .= '.js'",43],["elseif e == \"js\"",44],["if word =~? '\\.js$' || word == ''",49],["elseif uri =~ '\\.js$'",49]],"useCount":2926},{"word":"jump","context":[["return s:findedit(cmd,prefix.f.suffix.jump)",81],["\" wrapper for the jump to child method",88],["if jump =~ '!'",81],["\" If the window is open, jump to it",68],["let jump = a:target",68],["\" These are very similar keys. Typing 'a will jump to the line in the current",66],["\" file marked with ma. However, `a will jump to the line and column marked",66],["\" jump back using the ' and ` marks.",64],["cc 1 \"jump to first error if there is any",100],["if f !=# '' | let jump = f | endif",150]],"useCount":3398},{"word":"just","context":[["\" Gather just the values we want (pos_type - pos_table)",44],["\" In many terminal emulators the mouse works just fine, thus enable it.",39],["\" make sure we don't comment lines that are just spaces or tabs or empty.",39],["\"swap this nodes children out for the children we just read/refreshed",42],["\" Nothing too fancy, just some alien fruit salad to keep you in the zone.",44],["\"if the line is part of a sexy comment then just flag it...",46],["\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate",44],["\" formerly just a \"new...bd!\", that changed the window sizes when equalalways.  Using enew workaround instead",64],["\" Due to possibility that CSApprox is running (though I suppose we could just",73],["\" off in the corner of the keyboard. The best way to handle this is just to",66]],"useCount":2515},{"word":"k","context":[["nnoremap <C-k> <C-w>k",77],["let k = k + 1",145],["let k = k + 1",145],["nnoremap k gk",144],["let k = 1",136],["\\ start=\"\\K\\k*\"",104],["nnoremap <C-k> <C-w>k",77],["1wincmd k",87],["for k in keys(a)",116],["wincmd k",104]],"useCount":8350},{"word":"keep","context":[["return extend(extend(repo, s:repo_prototype, 'keep'), s:abstract_prototype, 'keep')",60],["return extend(extend({'_app': self, '_name': a:name}, s:file_prototype,'keep'),s:readable_prototype,'keep')",44],["\" Nothing too fancy, just some alien fruit salad to keep you in the zone.",44],["return extend(extend({'_app': self, '_name': a:name}, s:file_prototype,'keep'),s:readable_prototype,'keep')",44],["\\ }, 'keep')",126],["\" Things to keep (like comments) from a migration statement",49],["return extend(extend(repo, s:repo_prototype, 'keep'), s:abstract_prototype, 'keep')",60],["\" keep a // comment separately, it terminates a preproc. conditional",97],["call extend(extend(buffer,s:buffer_prototype,'keep'),s:abstract_prototype,'keep')",82],["call extend(extend(buffer,s:buffer_prototype,'keep'),s:abstract_prototype,'keep')",82]],"useCount":2055},{"word":"keepj","context":[["exe \"sil! keepj \".w:netrw_bannercnt",61],["sil! keepj %d",63],["keepj put ='open '.g:netrw_machine",70],["keepj call s:NetrwRefresh(a:islocal,s:NetrwBrowseChgDir(a:islocal,'./'))",94],["keepj put =g:netrw_ftpmode",70],["keepj call netrw#NetrwRestorePosn(svpos)",104],["keepj put ='open '.g:netrw_machine.' '.g:netrw_port",70],["keepj put =g:netrw_ftpextracmd",108],["keepj call histdel(\"/\",-1)",208],["keepj norm! 0",93]],"useCount":2486},{"word":"key","context":[["let a:dict[a:key] = add(get(a:dict, a:key, []), a:val)",83],["function! s:assoc(dict, key, val)",83],["for key in keys",85],["\\ filter(managed, 'index(args, v:key) >= 0')",90],["let managed = filter(copy(g:plugs), 's:is_managed(v:key)')",91],["sil!exe 'sil!return \"' . key . '\"'",101],["\" Plugin key-mappings.",122],["return a:key",137],["let a:dict[a:key] = add(get(a:dict, a:key, []), a:val)",83],["for key in keys(a:options)",83]],"useCount":14544},{"word":"keys","context":[["let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))",89],["for k in keys(a)",116],["return sort(filter(keys(g:plugs), 'stridx(v:val, a:1) == 0 && s:is_managed(v:val)'))",88],["for key in a:keys",75],["for n in keys(s:types)",78],["\"a:options can contain the following keys:",81],["for key in keys(a:options)",83],["for key in keys",85],["let new_frozen = len(filter(keys(s:update.new), 'g:plugs[v:val].frozen'))",87],["let name = keys(s:update.todo)[0]",88]],"useCount":5201},{"word":"keyword","context":[["syn keyword\tcTodo\t\tcontained TODO FIXME XXX",62],["\" Set minimum syntax keyword length.",108],["\" Define keyword.",104],["syn keyword rubyRailsMethod params request response session headers cookies flash",98],["syn keyword Function PlugInstall PlugStatus PlugUpdate PlugClean",90],["\" keyword definitions",78],["syn keyword rubyRailsMethod logger",69],["\"        Keyword         any other keyword",69],["hi keyword         ctermfg=161               cterm=bold",64],["syn keyword pythonRepeat\tfor while",60]],"useCount":57108},{"word":"kind","context":[["for kind in typeinfo.kinds",148],["let s:kind = {",120],["return s:kind",119],["\\ 'kind' : 'internal',",97],["for kind in a:typeinfo.kinds",82],["let fileinfo.tagfolds[self.fields.kind][self.fullpath] =",60],["\\ 'kind' : 'manual',",58],["\\ typeinfo.kinddict[a:tag2.fields.kind]",56],["let suffix .= ' : ' . typeinfo.kind2scope[self.fields.kind]",56],["let pscope  = a:typeinfo.kind2scope[a:parent.fields.kind]",56]],"useCount":4114},{"word":"kinds","context":[["let type_c.kinds     = [",28],["for kind in typeinfo.kinds",148],["\\ 'kinds'     : [",128],["for kind in a:typeinfo.kinds",82],["\\ 'kinds' : [",76],["let type_javascript.kinds = [",56],["for ckind in a:typeinfo.kinds",40],["\" Constants of all kinds are colored together.",35],["for kind in kinds",31],["\" Assembly (all kinds)",30]],"useCount":2030},{"word":"l","context":[["exe s:l",1115],["if s:l < 1 | let s:l = 1 | endif",1115],["if s:l < 1 | let s:l = 1 | endif",1115],["return l:n",666],["return l:n + 1",666],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["normal! l",341],["let l:n = (a:x - 8) / 10",333]],"useCount":76999},{"word":"lang","context":[["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105],["\\                    .\"<html lang=\\\"${lang}\\\">\\n\"",105],["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105],["XPTemplate priority=lang",38],["let rtype = emmet#lang#exists(type) ? type : 'html'",185],["let current = emmet#lang#html#parseTag(content)",48],["Plug 'rust-lang/rust.vim'",50],["call eclim#lang#SilentUpdate()",54],["let rtype = zencoding#lang#exists(type) ? type : 'html'",86],["\\                    .\"<html lang=\\\"${lang}\\\">\\n\"",105]],"useCount":2785},{"word":"language","context":[["\" perl language",36],["\" vim language",36],["\" Set utf8 as standard encoding and en_US as the standard language",58],["\" Avoid garbled characters in Chinese language windows OS",38],["\" tcl language",36],["\" eiffel language",36],["\" c language",36],["\" java language",36],["\" cobol language",36],["\" rexx language",36]],"useCount":2291},{"word":"last","context":[["\" Preparation: save last search, and cursor position.",95],["let last = line('$')",245],["silent execute '1,'.last.'delete_'",220],["current_uri = data.lines.to_a.last",90],["\" last line",81],["\"\"\" Read a file with nonblock flag. Return the last line. \"\"\"",79],["let last.pos += 1",66],["\" Return to last edit position when opening files (You want this!)",65],["\" scope is the last field after the 'line:<num>\\t' field",64],["\"Go to last edit location with ,.",61]],"useCount":6082},{"word":"lastline","context":[["let lastline = line('$')",50],["let lines = getline(a:firstline, a:lastline)",107],["function! s:lastline(msg)",90],["return [printf('%s %s: %s', a:bullet, a:name, s:lastline(a:message))]",88],["while ctr <= a:lastline",80],["let lastline = getline(lnum)",73],["for n in range(a:firstline, a:lastline)",70],["if a:firstline == a:lastline",63],["set display+=lastline",49],["let last = a:lastline",54]],"useCount":2554},{"word":"later","context":[["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["echoerr \"NERDCommenter: this plugin requires vim >= 7. DOWNLOAD IT! You'll thank me later!\"",23],["\" on appearance, not semantics. In later versions I might define more new colours.",24],["\" Define some common expressions we can use later on",27],["\" The default methods for highlighting. Can be overridden later.",34],["\" The default highlight links.  Can be overridden later.",34],["echoerr \"NERDTree: this plugin requires vim >= 7. DOWNLOAD IT! You'll thank me later!\"",47],["call s:SetOption(\"italic\",1) \" note that we need to override this later if the terminal doesn't support",49],["\" Save the current line for later restoration",68],["\" The default methods for highlighting.  Can be overridden later",248]],"useCount":2556},{"word":"lcd","context":[["call unite#util#lcd(vimfiler_current_dir)",36],["execute 'lcd ' . fnameescape(old_cwd)",63],["execute 'lcd `=path`'",50],["command! -buffer -bar -nargs=? -complete=customlist,s:Complete_cd Rlcd :lcd `=rails#app().path(<q-args>)`",44],["exec 'lcd ' . escape(cwd, ' ')",41],["exe \"lcd \" . fnameescape(cwd)",39],["exec 'lcd ' . escape(dir, ' ')",37],["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd ' : 'cd '",653],["let cd = exists('*haslocaldir') && haslocaldir() ? 'lcd' : 'cd'",116],["execute 'lcd ' . fnameescape(a:options['cwd'])",63]],"useCount":2000},{"word":"leader","context":[["map <leader>to :tabonly<cr>",59],["map <leader>te :tabedit <c-r>=expand(\"%:p:h\")<cr>/",57],["\" like <leader>w saves the current file",56],["map <leader>ss :setlocal spell!<cr>",56],["\" and insert the comment leader when hitting <CR> or using \"o\".",79],["nmap <leader>w :w!<cr>",65],["map <leader>tn :tabnew<cr>",59],["map <leader>tc :tabclose<cr>",60],["map <leader>tm :tabmove",61],["\" With a map leader it's possible to do extra key combinations",62]],"useCount":5498},{"word":"left","context":[["if left != -1:",79],["left += 1",79],["left = max(line.rfind('\\r'), line.rfind('\\n'))",79],["line = line[left:]",79],["return left",87],["\" Message displayed in lower left, such as --INSERT--",89],["let left = s:Left()",105],["let left = s:Left({'alt': 1})",105],["let left = ''",115],["return [a:node.left, a:node.right]",78]],"useCount":14430},{"word":"len","context":[["if len(auth) == 0",96],["elseif len(a:argList) <= 2 && match(a:argList, '^-') == -1",94],["let argLead = cmdLine =~ '\\s$' ? '' : args[len(args) - 1]",96],["while j < len(list)",100],["let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)",103],["if len(type) == 0 | let type = 'html' | endif",111],["call go#list#Window(l:listtype, len(errors))",130],["while i < len(a:list)",134],["let [cnt, total] = [0, len(g:plugs)]",179],["if len(a:argList) == 0",225]],"useCount":21758},{"word":"let","context":[["let i = 1",1707],["let line = getline(lnum)",1191],["let line = getline('.')",1194],["let &cpo = s:save_cpo",5583],["let s:save_cpo = &cpo",5502],["let i += 1",2583],["let i = 0",2277],["let i = i + 1",2056],["let &cpo = s:cpo_save",1932],["let s:cpo_save = &cpo",1788]],"useCount":652411},{"word":"level","context":[["return level",70],["\" returns an approximate grey index for the given grey level",120],["\" returns an approximate color index for the given color level",120],["\" Returns the actual colour level for the given colour index",211],["\" returns the actual grey level represented by the grey index",120],["if ( $level eq \"E\" ) {",80],["\" Returns the actual grey level represented by the grey index",211],["\" returns the actual color level for the given color index",120],["\" Returns an approximate grey index for the given grey level",211],["\" Returns an approximate colour index for the given colour level",211]],"useCount":5203},{"word":"light","context":[["\"     set background=light",70],["\" light and dark modes that runs in both GUI, 256 and 16 color modes.",70],["\" or, for the light background mode of Solarized:",70],["\" Alternate light scheme \"{{{",72],["if s:style == \"light\"",104],["if &background == \"light\"",171],["\" Return GUI color for light/dark variants",292],["\" Return terminal color for light/dark variants",292],["set background=light",755],["\" screenshots which will help you select either the light or dark background.",70]],"useCount":3089},{"word":"like","context":[["\" SuperTab like snippets behavior.",53],["\" like <leader>w saves the current file",56],["\" ,q to toggle quickfix window (where you have stuff like Ag)",50],["\" Things to keep (like comments) from a migration statement",49],["\" AutoComplPop like behavior.",48],["\"       highlights deprecated declarations too (like normal declarations)",74],["\" string concentations like this:",71],["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" Or it looks like a Progress /* comment",58],["\" Makes search act like search in modern browsers",56]],"useCount":3871},{"word":"line","context":[["let lnum = line('.')",618],["call cursor(line(\".\")+1, col(\".\"))",274],["let line = line('.')",381],["let line = line('.')",381],["let line = getline(a:lnum)",455],["for line in lines",604],["return line",783],["let line = getline(lnum)",1191],["let line = getline('.')",1194],["let last = line('$')",245]],"useCount":90879},{"word":"line1","context":[["return call('s:Find',[1,a:line1.a:cmd]+a:000)",43],["return s:Alternate(a:cmd,a:line1,a:line1,a:line1)",44],["return call('s:Alternate',[a:cmd,a:line1,a:line2,a:count]+a:000)",44],["return s:Alternate(a:cmd,a:line1,a:line1,a:line1)",44],["return s:Alternate(a:cmd,a:line1,a:line1,a:line1)",44],["\\ 'command! -nargs=* -range -bang %s call s:lod_cmd(%s, \"<bang>\", <line1>, <line2>, <q-args>, %s)',",86],["function! s:Blame(bang,line1,line2,count,args) abort",75],["execute 'write !'.substitute(basecmd,' blame ',' blame -L '.a:line1.','.a:line2.' ','g')",75],["function! s:Related(cmd,line1,line2,count,...)",44],["function! s:Browse(bang,line1,count,...) abort",72]],"useCount":3225},{"word":"line2","context":[["return call('s:Alternate',[a:cmd,a:line1,a:line2,a:count]+a:000)",44],["\\ 'command! -nargs=* -range -bang %s call s:lod_cmd(%s, \"<bang>\", <line1>, <line2>, <q-args>, %s)',",86],["function! s:Blame(bang,line1,line2,count,args) abort",75],["execute 'write !'.substitute(basecmd,' blame ',' blame -L '.a:line1.','.a:line2.' ','g')",75],["function! s:Related(cmd,line1,line2,count,...)",44],["\"   line2 - a line (string)",41],["let url .= '#L' . a:line1 . '-' . a:line2",41],["if line2 == 0",40],["function! s:github_url(repo,url,rev,commit,path,type,line1,line2) abort",40],["function! s:Alternate(cmd,line1,line2,count,...)",39]],"useCount":2251},{"word":"lines","context":[["retu lines",95],["return join(lines, \"\\n\")",97],["let lines = getline(a:firstline, a:lastline)",107],["for line in a:lines",110],["\" Make sure the continuation lines below do not cause problems in",115],["return lines",229],["\" NOTE: lines between '\" ___vital___' is generated by :Vitalize.",269],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["let lines = []",458],["for line in lines",604]],"useCount":18910},{"word":"link","context":[["hi link SpecialChar     Special",115],["command -nargs=+ HiLink hi link <args>",2249],["hi link Exception       Statement",115],["hi link Typedef         Type",115],["hi link Debug           Special",116],["hi link StorageClass    Type",117],["hi link Float           Number",119],["hi link SpecialComment  Special",123],["hi link PreCondit       PreProc",114],["command -nargs=+ HiLink hi def link <args>",2291]],"useCount":55945},{"word":"list","context":[["let list = []",314],["set list",342],["return a:list",335],["call remove(a:list,i)",102],["return list",275],["while i < len(a:list)",134],["call go#list#Window(l:listtype, len(errors))",130],["call go#list#JumpToFirst(l:listtype)",115],["let seen[a:list[i]] = 1",113],["let list = a:000[i]",101]],"useCount":22349},{"word":"lnum","context":[["let lnum = lnum - 1",388],["let ind = indent(lnum)",375],["let line = getline(lnum)",1191],["execute lnum",311],["let lnum -= 1",307],["let lnum = line('.')",618],["if lnum == 0",542],["return lnum",509],["let line = getline(a:lnum)",455],["let lnum = lnum - 1",388]],"useCount":32622},{"word":"load","context":[["call airline#extensions#load()",33],["\" Only load this indent file when no other was loaded.",515],["\" Don't load another plugin for this buffer",178],["function! plug#load(...)",89],["call plug#load(name)",89],["echo \"Press 'L' on each line to load plugin, or 'U' to update\"",89],["if line =~# '\\<\\(require\\|load\\)\\s*(\\s*$'",47],["return \"db:fixtures:load FIXTURES=\".s:sub(fnamemodify(self.name(),':r'),'^.{-}/fixtures/','')",44],["let cmdb = 'require %{yaml}; File.open(%q{'.self.path().'/config/database.yml}) {|f| y = YAML::load(f); e = y[%{'",39],["function! airline#extensions#load()",38]],"useCount":2261},{"word":"loaded","context":[["let s:loaded = get(s:, 'loaded', {})",89],["if get(s:loaded, name, 0) || !has_key(plug, 'on') && !has_key(plug, 'for')",89],["if valid && get(s:loaded, name, -1) == 0",89],["let s:loaded[name] = 1",178],["\" Quit when a syntax file was already loaded",211],["\" Quit when a (custom) syntax file was already loaded",212],["\" quit when a syntax file was already loaded",373],["\" Only load this indent file when no other was loaded.",515],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["let s:loaded = get(s:, 'loaded', {})",89]],"useCount":5985},{"word":"local","context":[["\" [-- local settings (must come before aborting the script) --]",49],["\" The plugins listed in ~/.vim/.vundles.local will be added here to",55],["let commit = local",58],["\" scope: local",108],["\" local syntax file - set colors on a per-machine basis:",112],["call append(\"$\", \"\\t(global or local to buffer)\")",199],["call append(\"$\", \"\\t(local to window)\")",621],["call append(\"$\", \"\\t(local to buffer)\")",1019],["let local = rails#app().relglob(\"app/views/\".c.\"/\",\"*.*[^~]\")",48],["return s:completion_filter(local+top,a:A)",48]],"useCount":6540},{"word":"loclist","context":[["return loclist",396],["let newLoclist = newLoclist.extend(loclist)",64],["let loclist = checker.getLocList()",68],["call s:notifiers.refresh(loclist)",70],["let loclist = g:SyntasticLoclist.current()",77],["if !loclist.isEmpty()",78],["for e in loclist",266],["let loclist = SyntasticMake({",307],["\" populate loclist and jump {{{3",60],["if run_checks && do_jump && !loclist.isEmpty()",61]],"useCount":2610},{"word":"log","context":[["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,",176],["log.call name, 'Retrying ...', type",89],["log.call name, \"Timeout. Will retry in #{countdown} second#{s} ...\", type",89],["log   = proc { |name, result, type|",90],["log.call name, 'Installing ...', :install",90],["log.call name, 'Updating ...', :update",90],["log.call name, line.chomp, type if name && (first_line || rand < log_prob)",90],["log.call name, result, ok",90],["call neobundle#installer#log(",106],["call s:log('')",128]],"useCount":6407},{"word":"long","context":[["\\ {'short' : 'f', 'long' : 'functions', 'fold' : 0, 'stl' : 1}",150],["\\ {'short' : 'g', 'long' : 'enums',       'fold' : 0, 'stl' : 1},",103],["\\ {'short' : 'd', 'long' : 'macros',      'fold' : 1, 'stl' : 0},",103],["\\ {'short' : 'e', 'long' : 'enumerators', 'fold' : 0, 'stl' : 0},",103],["\\ {'short' : 'c', 'long' : 'classes',     'fold' : 0, 'stl' : 1},",100],["\\ {'short' : 's', 'long' : 'structs',     'fold' : 0, 'stl' : 1},",78],["\\ {'short' : 'f', 'long' : 'functions',   'fold' : 0, 'stl' : 1},",75],["\\ {'short' : 'p', 'long' : 'procedures', 'fold' : 0, 'stl' : 1}",75],["let b:c_minlines = 50\t\" #if 0 constructs can be long",71],["\"       *Type            int, long, char, etc.",69]],"useCount":7707},{"word":"m","context":[["let l:m = (a:x - 8) % 10",333],["\\ '%f:%l:%c: %trror: %m,' .",71],["catch /\\m^Vim\\%((\\a\\+)\\)\\=:E484/",73],["\\ '%f:%l:%c: %tarning: %m,' .",73],["if !empty(m)",82],["normal! m`",91],["call add(res, m)",151],["if l:m < 20",332],["if l:m < 5",332],["let l:m = (a:x - 55) % 40",333]],"useCount":14927},{"word":"main_syntax","context":[["let main_syntax = 'php'",39],["if !exists(\"main_syntax\")",647],["unlet main_syntax",559],["let main_syntax = 'javascript'",78],["if main_syntax == 'javascript'",78],["if main_syntax == \"javascript\"",64],["unlet g:main_syntax",57],["if !exists('main_syntax')",52],["let g:main_syntax = 'eruby'",49],["let main_syntax = 'html'",48]],"useCount":2277},{"word":"make","context":[["function! s:make()",59],["silent! exe 'make!'",65],["\"Emulates the :lmake command. Sets up the make environment according to the",65],["\" :make expands '%' and '#' wildcards, so they must also be escaped",87],["exe 'make! '.arg",76],["\"make Y consistent with C and D",74],["silent noautocmd make!",67],["\"options given, runs make, resets the environment, returns the location list",65],["\" make default node",48],["\" other potential terminal customizations that might make gui mode suboptimal.",66]],"useCount":4930},{"word":"makeprg","context":[["let makeprg = syntastic#makeprg#build({",298],["\\ 'makeprg': makeprg,",1141],["\\ 'makeprg': makeprg,",1141],["setlocal makeprg=",808],["let makeprg = self.makeprgBuild({",430],["let makeprg = syntastic#makeprg#build({",298],["return SyntasticMake({ 'makeprg': makeprg, 'errorformat': errorformat })",246],["return SyntasticMake({ 'makeprg': makeprg, 'errorformat': errorformat })",246],["let makeprg = self.makeprgBuild({})",128],["let &makeprg = default_makeprg",119]],"useCount":7626},{"word":"manual","context":[["let\tmanual\t\t= {}",25],["if g:sh_fold_enabled && &fdm == \"manual\"",25],["if len(keys(manual)) > 1",25],["\" Handles manual entrance into completion mode.",27],["let source.kind = 'manual'",30],["setlocal foldmethod=manual",913],["setlocal fdm=manual",234],["\" Two options for installation: manual or pathogen",81],["\\ 'kind' : 'manual',",58],["set foldmethod=manual",61]],"useCount":2003},{"word":"map","context":[["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152],["map <SID>xx <SID>xx",98],["children = children.map { |pid|",90],["[\"#{b} #{name}\"] + result.lines.map { |l| \"    \" << l }",90],["for map in s:triggers[a:name].map",85],["let lines = map(s:lines(a:message), '\"    \".v:val')",88],["`pgrep -P #{pid}`.lines.map { |l| l.chomp }",90],["let rtps     = map(s:loaded_names(), 's:rtp(g:plugs[v:val])')",89],["let names = filter(map(lines, 's:extract_name(v:val, \"[x-]\", \"\")'), '!empty(v:val)')",89]],"useCount":19670},{"word":"mapping","context":[["\" Show tab number (useful for Cmd-1, Cmd-2.. mapping)",62],["\" attempt to perform single click mapping, it would be much",48],["let tests = map(filter(rails#app().test_suites(),'has_key(mapping,v:val)'),'get(mapping,v:val)')",63],["let tests = map(filter(rails#app().test_suites(),'has_key(mapping,v:val)'),'get(mapping,v:val)')",63],["\" Visual mapping:",83],["\" We don't want to use Ctrl-p as the mapping because",50],["\" Sorts a list using a set of keys generated by mapping the values in the list",52],["\" we have a mapping",55],["\" no mapping for leftmouse",55],["\" Additional mapping for buffer search",55]],"useCount":2045},{"word":"mappings","context":[["\"\"\"\"\"\"\"\"\"\"\"\"\" My cscope/vim key mappings",37],["\" Insert mode mappings",39],["\"| `on`                    | On-demand loading: Commands or `<Plug>`-mappings |",40],["\"    -> Editing mappings",44],["\" Add mappings, unless the user didn't want this.",45],["\"SECTION: Init variable calls for key mappings {{{2",46],["\" Useful mappings for managing tabs",56],["\" Recommended key-mappings.",59],["\" Plugin key-mappings.",122],["\" => Editing mappings",51]],"useCount":2299},{"word":"marked","context":[["let marked = { 1 : fnamemodify(line, ':p') }",34],["if exists('s:marked')",74],["\" file marked with ma. However, `a will jump to the line and column marked",66],["\" file marked with ma. However, `a will jump to the line and column marked",66],["keepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",53],["let has_marked = exists('s:marked')",34],["\" unmark marked file list",35],["NetrwKeepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",50],["\" remove all marked files",38],["unl s:marked",39]],"useCount":2600},{"word":"marker","context":[["\" vim:foldmethod=marker:fen:",99],["\" vim:fdm=marker:ff=unix:noet:ts=4:sw=4",105],["\" vim: foldmethod=marker",1598],["\" vim: set sw=4 sts=4 et fdm=marker:",1085],["\" vim:ft=vim:fdm=marker",737],["setlocal foldmethod=marker",136],["\" vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2",120],["\" vim: set fdm=marker:",114],["\" vim:tabstop=2:shiftwidth=2:expandtab:foldmethod=marker:textwidth=79",111],["\" vim:foldmethod=marker:foldlevel=0",106]],"useCount":7216},{"word":"match","context":[["syn match plugRelDate /([^)]*)$/ contained",90],["syn match plugStar /^*/",90],["syn match plugX /x/ contained",90],["elseif len(a:argList) <= 2 && match(a:argList, '^-') == -1",94],["return match",100],["syn match\tcParenError\tdisplay \")\"",147],["match none",462],["syntax case match",503],["syn case match",2113],["syn match plugUpdate /\\(^* \\)\\@<=[^:]*/",90]],"useCount":57748},{"word":"matches","context":[["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152],["return matches",304],["call map(matches,'s:shellslash(v:val)')",75],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["let matches = []",136],["let matches = split(glob(self.tree(s:gsub(base,'/','*&').'*/')),\"\\n\")",76],["let matches = s:repo().dirglob(a:A)",76],["let matches = split(glob(self.tree(s:gsub(base,'/','*&').'*')),\"\\n\")",76],["let results += matches",77],["let matches = split(glob(a:A.'*'),\"\\n\")",75]],"useCount":4731},{"word":"matchgroup","context":[["\\ matchgroup=p6PodFormatCode",359],["\\ matchgroup=p6StringSpecial2",52],["\\ matchgroup=p6PodType",182],["\\ matchgroup=p6Escape",52],["\\ matchgroup=p6Context",52],["\\ matchgroup=p6Quote",402],["\\ matchgroup=p6RxP5Escape",96],["\\ matchgroup=p6Error",135],["\\ matchgroup=p6Comment",135],["\\ matchgroup=p6PodPrefix",180]],"useCount":5337},{"word":"matchstr","context":[["return matchstr(a:str, '^'.a:prefix.' \\zs[^:]\\+\\ze:.*'.a:suffix.'$')",89],["let path = matchstr(getline('.'),'^\\^\\=\\x\\+\\s\\+\\zs.\\{-\\}\\ze\\s*\\d\\+ ')",132],["let lnum = matchstr(getline('.'),' \\zs\\d\\+\\ze\\s\\+[([:digit:]]')",132],["let rev = matchstr(self.spec(),'^fugitive://.\\{-\\}//\\zs.*')",146],["return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '<SNR>\\d\\+_'),''))",164],["return matchstr(expand('<sfile>'), '<SNR>\\zs\\d\\+\\ze__SID$')",278],["let ref = matchstr(getline('.'),'\\x\\{40\\}')",447],["let content = matchstr(getline(pos1[0])[pos1[1]-1:], mx)",127],["return matchstr(self.getline(1),'\\C# rake \\zs.*')",82],["echoerr \"warning: unknown context \".matchstr(getline('.'),'^\\l*')",77]],"useCount":16666},{"word":"max","context":[["for n in range(1, max)",56],["if width <= a:max",78],["let their_time = +self.repo().git_chomp('log','--max-count=1','--pretty=format:%at',a:commit)",75],["let my_time    = +self.repo().git_chomp('log','--max-count=1','--pretty=format:%at',self.commit())",75],["let max = len(a:script)",70],["let header_width = a:max - s:wcswidth(a:separator) - a:footer_width",67],["return s:truncate(ret, a:max)",66],["let max = a:context.source__max_bundles",59],["left = max(line.rfind('\\r'), line.rfind('\\n'))",79],["while i < max",171]],"useCount":3506},{"word":"me","context":[["\" TODO: the || s:IsInString() thing worries me a bit.",54],["\" Maintainer:   Chris Morgan <me@chrismorgan.info>",59],["syntax match\tcCommentStartError display \"/\\*\"me=e-1 contained",61],["syn match\tcSpaceError\tdisplay \" \\+\\t\"me=e-1",61],["command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif",81],["call rename(s:me, s:me . '.old')",89],["call rename(s:me, s:me . '.old')",89],["let s:me = resolve(expand('<sfile>:p'))",89],["call rename(new, s:me)",89],["if readfile(s:me) ==# readfile(new)",89]],"useCount":4047},{"word":"menu","context":[["\" Quit when menu translations have already been done.",185],["\" Programming menu",105],["\" Syntax menu",131],["\" Edit menu",145],["\" Help menu",145],["\" Window menu",145],["\" File menu",150],["\" The popup menu",151],["\" complete menu",384],["\" Names for buffer menu.",104]],"useCount":8966},{"word":"menutrans","context":[["menutrans Toggle\\ &Showmatch<Tab>:set\\ sm!",24],["menutrans &Make<Tab>:make\t\t&Make<Tab>:make",30],["menutrans Toggle\\ &List\\ Mode<Tab>:set\\ list!",24],["menutrans Toggle\\ Insert\\ &Mode<Tab>:set\\ im!",24],["menutrans Toggle\\ Line\\ &Numbering<Tab>:set\\ nu!",24],["menutrans on/off\\ for\\ &This\\ file",24],["menutrans Toggle\\ &expand-tab<Tab>:set\\ et!",24],["menutrans Toggle\\ &Ignore-case<Tab>:set\\ ic!",24],["menutrans Toggle\\ Line\\ &Wrap<Tab>:set\\ wrap!",24],["menutrans Toggle\\ W&rap\\ at\\ word<Tab>:set\\ lbr!",24]],"useCount":2962},{"word":"message","context":[["let v:errmsg = 'fugitive: '.s:sub(message,'error:.*\\zs\\n\\(.*-f.*',' (add ! to force)')",76],["\" message in case of success",87],["nnoremap <buffer> <silent> cA :<C-U>Gcommit --amend --reuse-message=HEAD<CR>",68],["let message = call(s:repo().git_chomp_in_tree,cmd+['--',s:buffer().path()],s:repo())",76],["let v:errmsg = 'fugitive: '.message",76],["return [printf('%s %s: %s', a:bullet, a:name, s:lastline(a:message))]",88],["function! s:format_message(bullet, name, message)",88],["let lines = map(s:lines(a:message), '\"    \".v:val')",88],["\"msg: the message to echo",135],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156]],"useCount":4461},{"word":"method","context":[["\" fold method",88],["\" wrapper for the jump to child method",88],["\"Cmd-Shift-(M)ethod - jump to a method (tag in current file)",48],["let url .= (url =~ '?' ? '&' : '?') . '_method='.tolower(method)",48],["if method !=? \"GET\"",49],["let method = matchstr(url,'^\\u\\+')",49],["let err = \"Could not parse method\"",49],["\" method.  We should verify by checking for an argument, but that's",49],["\"  method declaration name: #FFD2A7  255:210:167",55],["\" autocommand method is deemed excessively poor form, that approach will be",66]],"useCount":4261},{"word":"methods","context":[["\" Private methods {{{1",122],["\" ** Public methods",103],["\"        Function        function name (also: methods for classes)",69],["\" Public methods {{{1",176],["\\ 'm:methods',",59],["\" ** Private methods",50],["methods = []",49],["\" Note: this is a hack to prevent 'keywords' being highlighted as such when called as methods with an explicit receiver",39],["\" The default methods for highlighting.  Can be overridden later",248],["\\  'methods': {",349]],"useCount":2581},{"word":"mode","context":[["\" Visual mode",114],["\" Insert mode",109],["\" Normal mode",100],["\" Replace mode",93],["for [mode, map_prefix, key_prefix] in",91],["let b:mode = s:EXPR",150],["let s:current.is_operator = mode(1) ==# 'no' ? 1: 0",154],["return s:Edit(a:mode,0,ref)",250],["return s:Edit(a:mode,0,file)",300],["\" compatibility mode.",115]],"useCount":12906},{"word":"modifiable","context":[["setlocal\tmodifiable",58],["let modifiable_save = &l:modifiable",61],["setlocal noreadonly modifiable",68],["\" Mark the buffer as not modifiable",72],["\" Mark the buffer as modifiable",74],["setl modifiable",78],["setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap cursorline modifiable",83],["if !&modifiable",89],["set modifiable",102],["setlocal modifiable",2639]],"useCount":4027},{"word":"modified","context":[["call s:assert.equals(s:expand([['readonly', 'filename'], ['custom'], ['modified']]),",65],["call s:assert.equals(s:expand([['readonly', 'filename', 'custom', 'modified']]),",65],["let &modified = 0",80],["if !&modified",80],["\" &rtp is modified from outside",89],["if &modified",119],["if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''",240],["let modified = &modified",57],["cal map(lines,'s:sub(v:val, \"^#\\t%(modified: +|renamed: +)=\", \"\")')",59],["if bufloaded(nr) && !getbufvar(nr,'&modified') && (name ==# one || name ==# two || name ==# three)",60]],"useCount":2809},{"word":"modify","context":[["\" ****************** Do not modify after this line ************************",51],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",223],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\" We need to be able to modify the buffer",27],["\" modify GOPATH if needed",24],["\" gotta make a copy of a:bottomline cos we modify the position of the",23],["\" we need to create local copies of these arguments so we can modify them",23],["\" WARNING: Don't modify this section unless necessary.",21],["\"  call Decho(\"modify display if wide/tree listing style\")",14]],"useCount":2268},{"word":"module","context":[["module PlugStream",90],["return deepcopy(s:module)",52],["module LustyE",78],["let s:module = {",83],["module VIM",46],["\\ 'c:common;e:entry;i:interface;k:type;l:label;m:module;' .",34],["\" based folding and special highlighting of module/class/method definitions",36],["\" begin case class def do end for if module unless until while",40],["throw 'vital: module not found: ' . a:name",42],["function! s:module.on_char_pre(cmdline)",50]],"useCount":2054},{"word":"more","context":[["\"             See http://sam.zoy.org/wtfpl/COPYING for more details.",1702],["\"              See http://sam.zoy.org/wtfpl/COPYING for more details.",100],["\" Find more themes at : https://github.com/daylerees/colour-schemes",91],["\" see :h vundle for more details or wiki for FAQ",68],["\" Visual with more contrast, thanks to Steve Hall & Cream posse",53],["\" use more jumpy Error",59],["\" default is something more zenburn-compatible",59],["\" Check if line 'lnum' has more opening brackets than closing ones.",65],["\" with ma.  It’s more useful in any case I can imagine, but it’s located way",66],["\" check doc/SingleCompile.txt for more information",67]],"useCount":5486},{"word":"move","context":[["let @h=@h.\"\\\" \". g:NERDTreeMapUpdir .\": move tree root up a dir\\n\"",46],["\" 2.  Next, move or clone the `vim-colors-solarized` directory so that it is",66],["\"move to the line after last line of the sexy comment",46],["\" move on to the next line",46],["\" Smart way to move between windows",65],["\"     b. **or move manually into the pathogen bundle directory:**",66],["let @h=@h.\"\\\" \". g:NERDTreeMapUpdirKeepOpen .\": move tree root up a dir\\n\"",46],["\" which will move us around by functions",45],["\" forward: 1 if the cursor should move to the next sibling, 0 if it should",44],["\" move back to the previous sibling",44]],"useCount":2071},{"word":"msg","context":[["function! s:lastline(msg)",90],["let [valid, msg] = [1, 'OK']",90],["function! s:err(msg)",93],["echom a:msg",93],["if ( ! $msg eq \"\" ) {",100],["echo msg",134],["\"msg: the message to echo",135],["echo a:msg",193],["call s:Tlist_Warning_Msg(msg)",404],["echomsg a:msg",200]],"useCount":8751},{"word":"must","context":[["\"   * Redistributions in binary form must reproduce the above",40],["\"rustLifetime must appear before rustCharacter, or chars will get the lifetime highlighting",43],["\" In order to parse a statement, we must know what database type",45],["\" [-- local settings (must come before aborting the script) --]",49],["call s:DB_warningMsg( \"dbext:A valid database type must be chosen\" )",55],["\"Note: we must match .. AND ../ cos sometimes the globpath returns",71],["\" User must set this variable in .vimrc",177],["\" Since the string will be enclosed in single quotes, we must first",88],["\" :make expands '%' and '#' wildcards, so they must also be escaped",87],["\" All of your Plugins must be added before the following line",81]],"useCount":3120},{"word":"mx","context":[["let pos1 = searchpos(mx, 'bcnW')",107],["let filters = split(matchstr(str, mx)[1:], '\\s*,\\s*')",40],["let str = substitute(str, mx, '', '')",40],["if str =~ mx",40],["let attr_match = matchlist(match, mx)",48],["let content = matchstr(getline(pos1[0])[pos1[1]-1:], mx)",127],["let attrs = substitute(match, mx, '\\2', 'i')",51],["let match = matchstr(a:tag, mx)",56],["let match = matchstr(attrs, mx)",56],["let current.name = substitute(match, mx, '\\1', 'i')",51]],"useCount":1992},{"word":"my","context":[["foreach my $row2 ( @result_set ) {",50],["my $i = 0;",50],["\" Hack to override password from .my.cnf",49],["my ($from, $args) = @_;",41],["my $driver;",80],["foreach my $col2 ( @{$row2} ) {",70],["vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z",52],["my $conn_local;",150],["\"   Plug '~/my-prototype-plugin'",89],["vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z",51]],"useCount":2155},{"word":"n","context":[["let @h=@h.\"\\\"\\n\\\" ----------------------------\\n\"",360],["elseif a:n == 2",669],["if a:n == 0",1986],["let n = 1",452],["return l:n + 1",666],["return l:n",666],["elseif a:n == 1",659],["setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-",500],["let n = n + 1",495],["let n = n + 1",495]],"useCount":62110},{"word":"name","context":[["let name = a:name",212],["if !empty(name)",299],["let f = self.name()",236],["for name in a:names",224],["let name = a:name",212],["for [name, spec] in items(g:plugs)",180],["let rtp = s:rtp(g:plugs[name])",178],["return name",309],["let s:loaded[name] = 1",178],["let name = s:find_name(line('.'))",178]],"useCount":54197},{"word":"names","context":[["call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",166],["let names = filter(map(lines, 's:extract_name(v:val, \"[x-]\", \"\")'), '!empty(v:val)')",89],["return names",94],["function! s:lod_ft(pat, names)",90],["function! s:names(...)",90],["for name in a:names",224],["if !empty(names)",155],["call s:update_impl(0, a:force, a:names)",89],["let names = []",173],["execute 'PlugUpdate' join(names)",89]],"useCount":6098},{"word":"nargs","context":[["call s:command(\"-bang -nargs=? -complete=customlist,s:GitComplete Git :execute s:Git(<bang>0,<q-args>)\")",76],["command! -nargs=+ CSAHi exe \"hi\" <q-args>",81],["command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif",81],["\\ 'command! -nargs=* -range -bang %s call s:lod_cmd(%s, \"<bang>\", <line1>, <line2>, <q-args>, %s)',",86],["command! -nargs=0 -bar PlugStatus  call s:status()",89],["command! -nargs=0 -bar PlugDiff    call s:diff()",89],["command -nargs=* CompilerSet setlocal <args>",266],["command -nargs=+ HiLink hi link <args>",2249],["command -nargs=+ HiLink hi def link <args>",2291],["call s:command(\"-nargs=? -complete=customlist,s:CommitComplete Gcommit :execute s:Commit(<q-args>)\")",76]],"useCount":10941},{"word":"need","context":[["\"we need to use this number many times for sorting... so we calculate it only",45],["call s:SetOption(\"italic\",1) \" note that we need to override this later if the terminal doesn't support",49],["\\'\" The following items are available options, but do not need to be',",49],["\"need to switch delimiters for place-holders",46],["\"    to be nested if need be",46],["\" ag is fast enough that CtrlP doesn't need to cache",110],["\" If there are no tags for this file, then no need to proceed further",101],["\" need to use a special type of cString: cCommentString, which also ends on",68],["\" allow the user to add vim plugins to yadr without the need for a fork.",55],["\" Terminals that are in neither list need to be tested.",49]],"useCount":3078},{"word":"neobundle","context":[["let bundle = neobundle#parser#_init_bundle(",104],["call neobundle#installer#log(",106],["call neobundle#util#cd(cwd)",120],["call neobundle#util#set_default(",137],["call neobundle#end()",97],["NeoBundleFetch 'Shougo/neobundle.vim'",91],["call s:assert.equals(neobundle#parser#path(",81],["call neobundle#installer#error(",137],["call neobundle#untap()",229],["call neobundle#util#print_error(",328]],"useCount":6620},{"word":"neocomplcache","context":[["call neocomplcache#set_dictionary_helper(g:neocomplcache_same_filetype_lists,",126],["let filetype = neocomplcache#get_context_filetype()",79],["let neocomplcache = neocomplcache#get_current_neocomplcache()",77],["call neocomplcache#set_dictionary_helper(g:neocomplcache_keyword_patterns,",211],["let neocomplcache = neocomplcache#get_current_neocomplcache()",77],["if !neocomplcache#is_enabled()",76],["call neocomplcache#util#set_default_dictionary(",430],["call neocomplcache#print_error(",69],["call neocomplcache#print_error(v:exception)",48],["call neocomplcache#util#set_default(",44]],"useCount":2365},{"word":"neocomplete","context":[["\\ 'g:neocomplete#delimiter_patterns',",108],["if !neocomplete#is_enabled()",114],["let g:neocomplete#enable_smart_case = 1",134],["let g:neocomplete#enable_at_startup = 1",154],["call neocomplete#print_error(",158],["call neocomplete#util#set_default_dictionary(",1297],["\\ 'g:neocomplete#same_filetypes',",266],["let neocomplete = neocomplete#get_current_neocomplete()",353],["let neocomplete = neocomplete#get_current_neocomplete()",353],["\\'g:neocomplete#keyword_patterns',",645]],"useCount":8761},{"word":"nerdtree","context":[["Plug 'scrooloose/nerdtree'",151],["call nerdtree#closeTree()",50],["NeoBundle 'scrooloose/nerdtree'",52],["Bundle 'scrooloose/nerdtree'",55],["Plugin 'scrooloose/nerdtree'",160],["\" Open the project tree and expose current file in the nerdtree with Ctrl-\\",60],["call nerdtree#centerView()",63],["\"   Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }",89],["call nerdtree#renderView()",153],["if nerdtree#runningWindows()",125]],"useCount":3124},{"word":"netrw","context":[["call netrw#NetrwRestorePosn(svpos)",148],["let svpos= netrw#NetrwSavePosn()",140],["autocmd FileType           netrw call fugitive#detect(expand('%:p'))",48],["nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand(\"\u0016<cWORD>\"),0)\u0016",119],["keepj call netrw#NetrwRestorePosn(svpos)",104],["let svpos    = netrw#NetrwSavePosn()",76],["keepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",53],["keepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",53],["NetrwKeepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",50],["NetrwKeepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",50]],"useCount":5205},{"word":"netrw_curdir","context":[["elseif !exists(\"b:netrw_curdir\")",42],["if !exists(\"b:netrw_curdir\")",120],["let curdir   = b:netrw_curdir",99],["let b:netrw_curdir= getcwd()",89],["if exists(\"b:netrw_curdir\")",74],["let b:netrw_curdir= dirname",58],["if b:netrw_curdir =~ '/$'",53],["let curdir = b:netrw_curdir",41],["if exists(\"w:netrw_liststyle\") && w:netrw_liststyle == s:TREELIST && exists(\"b:netrw_curdir\")",40],["call s:RemotePathAnalysis(b:netrw_curdir)",40]],"useCount":3140},{"word":"netrw_liststyle","context":[["if !exists(\"w:netrw_liststyle\")|let w:netrw_liststyle= g:netrw_liststyle|endif",40],["if exists(\"w:netrw_liststyle\") && w:netrw_liststyle == s:TREELIST",76],["if !exists(\"w:netrw_liststyle\")",72],["if w:netrw_liststyle == s:LONGLIST",60],["let w:netrw_liststyle= g:netrw_liststyle",55],["if exists(\"w:netrw_liststyle\") && w:netrw_liststyle == s:TREELIST",76],["let w:netrw_liststyle= g:netrw_liststyle",55],["if w:netrw_liststyle == s:WIDELIST",46],["if exists(\"w:netrw_liststyle\") && w:netrw_liststyle == s:TREELIST && exists(\"b:netrw_curdir\")",40],["if !exists(\"w:netrw_liststyle\")|let w:netrw_liststyle= g:netrw_liststyle|endif",40]],"useCount":2164},{"word":"netrw_method","context":[["let b:netrw_method  = 1",38],["let b:netrw_method  = 3",42],["if exists(\"b:netrw_method\")",51],["elseif b:netrw_method == 2",56],["let result = s:NetrwGetFile(readcmd, tmpfile, b:netrw_method)",38],["elseif b:netrw_method == 3",74],["if exists(\"w:netrw_method\") && (w:netrw_method == 2 || w:netrw_method == 3)",79],["if exists(\"w:netrw_method\") && (w:netrw_method == 2 || w:netrw_method == 3)",79],["if exists(\"w:netrw_method\") && (w:netrw_method == 2 || w:netrw_method == 3)",79],["let result           = s:NetrwGetFile(readcmd, tmpfile, b:netrw_method)",95]],"useCount":2184},{"word":"new","context":[["new",786],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTab.\": open in new tab\\n\"",92],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTabSilent .\": open in new tab silently\\n\"",92],["mtx   = Mutex.new",90],["watcher = Thread.new {",90],["threads << Thread.new {",90],["call rename(new, s:me)",89],["refresh = Thread.new {",89],["if readfile(s:me) ==# readfile(new)",89]],"useCount":12698},{"word":"next","context":[["throw 'Exception: Join to next line (\\).'",46],["\" Avoid matching foo::bar() in C++ by requiring that the next char is not ':'",80],["\"direction: 0 if you want to find the previous sibling, 1 for the next sibling",72],["\"Move back and forth through previous and next buffers",67],["\" To go to the next search result do:",48],["\" move on to the next line",46],["let @h=@h.\"\\\" \". g:NERDTreeMapJumpNextSibling .\": go to next sibling\\n\"",46],["\" get the next line, check commentability and convert spaces to tabs",46],["\" forward: 1 if the cursor should move to the next sibling, 0 if it should",44],["\" Skip this match and move on to the next",42]],"useCount":3538},{"word":"nextgroup","context":[["syn match plugEdge /^  \\X*/ contained nextgroup=plugSha",36],["syn match railslogEscapeMN    '\\e\\[[0-9;]*m' nextgroup=railslogModelNum,railslogEscapeMN skipwhite contained",38],["syn match   pythonDecorator\t\"@\" display nextgroup=pythonDottedName skipwhite",38],["syn match railslogEscapeMN    '\\e\\[[0-9;]*m' conceal nextgroup=railslogModelNum,railslogEscapeMN skipwhite contained",38],["syn match   pythonDecorator\t\"@\" display nextgroup=pythonFunction skipwhite",39],["\\ nextgroup=kconfigConfigOptionIf,",76],["\\ nextgroup=@nanorcFGSpec skipwhite",32],["\\ nextgroup=@nanorcBGSpec skipwhite",32],["syn match markdownUrl \"\\S\\+\" nextgroup=markdownUrlTitle skipwhite contained",35],["syntax match javaScriptDotNotation      \"\\.style\\.\" nextgroup=javaScriptCssStyles",35]],"useCount":5206},{"word":"ngxDirective","context":[["syn keyword ngxDirective empty_gif",14],["syn keyword ngxDirective flv",14],["syn keyword ngxDirective stub_status",14],["syn keyword ngxDirective index",14],["syn keyword ngxDirective uninitialized_variable_warn",14],["hi link ngxDirective Identifier",14],["syn keyword ngxDirective valid_referers",14],["syn keyword ngxDirective gzip_static",13],["syn keyword ngxDirective add_header",13],["syn keyword ngxDirective autoindex_localtime",13]],"useCount":3552},{"word":"ngxDirectiveThirdParty","context":[["syn keyword ngxDirectiveThirdParty proxy_cache_purge",12],["syn keyword ngxDirectiveThirdParty chunkin",12],["syn keyword ngxDirectiveThirdParty max_connections",12],["syn keyword ngxDirectiveThirdParty fancyindex",12],["syn keyword ngxDirectiveThirdParty upload_store",12],["syn keyword ngxDirectiveThirdParty push_listener",12],["syn keyword ngxDirectiveThirdParty mogilefs_domain",12],["syn keyword ngxDirectiveThirdParty echo_exec",12],["syn keyword ngxDirectiveThirdParty echo_read_request_body",12],["syn keyword ngxDirectiveThirdParty upload_cleanup",12]],"useCount":2112},{"word":"nmap","context":[["nmap <silent> ,qo :copen<CR>",56],["nmap sk :SplitjoinJoin<cr>",64],["nmap sj :SplitjoinSplit<cr>",64],["nmap <leader>w :w!<cr>",65],["nmap <silent> // :nohlsearch<CR>",67],["nmap gx <Plug>NetrwBrowseX",154],["nmap ga <Plug>(EasyAlign)",60],["nmap <silent> ,vr :so %<CR>",56],["nmap yss <Plug>Yssurround",53],["nmap <silent> ,vc yy:<C-f>p<C-c><CR>",55]],"useCount":5246},{"word":"nnoremap","context":[["nnoremap <silent> <buffer> S  :PlugStatus<cr>",90],["nnoremap ` '",103],["nnoremap ' `",106],["nnoremap ; :",113],["nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand(\"\u0016<cWORD>\"),0)\u0016",119],["execute 'nnoremap <buffer> <silent> dp :diffput '.nr.'<Bar>diffupdate<CR>'",140],["nnoremap j gj",143],["nnoremap k gk",144],["nnoremap <silent><script><buffer>",152],["nnoremap Y y$",229]],"useCount":18413},{"word":"no","context":[["\"hi clear -- no settings --",145],["\"hi CTagsGlobalConstant -- no settings --",140],["\"hi CTagsImport -- no settings --",140],["\"hi EnumerationName -- no settings --",141],["\"hi EnumerationValue -- no settings --",141],["\"hi CTagsMember -- no settings --",141],["\" Only load this indent file when no other was loaded.",515],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["let s:current.is_operator = mode(1) ==# 'no' ? 1: 0",154],["\"hi Union -- no settings --",142]],"useCount":13678},{"word":"node","context":[["let node = node.parent",57],["let node.pos = token.pos",55],["let node = node.parent",57],["call s:echo(\"Put the cursor on a node first\" )",61],["\" Make the node for this bookmark the new tree root",70],["call s:echo(\"select a node first\")",71],["\"path: a path object representing the full filesystem path to the file/dir that the node represents",73],["return [a:node.left, a:node.right]",78],["return [a:node.left, a:node.right]",78],["call s:echo(\"Select a node first\")",88]],"useCount":7525},{"word":"nomodifiable","context":[["setl nomodifiable",69],["setlocal buftype=nowrite nobuflisted noswapfile nomodifiable filetype=git",16],["set nomodifiable",26],["vim.command('setlocal nomodifiable')",28],["setlocal nomodifiable readonly",31],["setlocal nomodifiable nomodified",32],["setlocal nomodified nomodifiable nonumber scrollbind nowrap foldcolumn=0 nofoldenable filetype=fugitiveblame",33],["setlocal nomodifiable",2090],["setlocal\tnomodifiable",58],["setlocal readonly nomodifiable",138]],"useCount":2591},{"word":"non","context":[["\" Find a non-blank, non-multi-line string line above the current line.",55],["\" Find a non-blank line above the current line.",184],["throw \"vital: Data.String: Can't use non-half-width characters for padding.\"",125],["\" Invoke :helptags on all non-$VIM doc directories in runtimepath.",68],["\" Find a non-blank, non-multi-line string line above the current line.",55],["\" Remap VIM 0 to first non-blank character",54],["\"   \" Using a non-master branch",54],["\" s:options_list is used to autogenerate a list of all non-default options",49],["\\'\" includes the current, non-default Solarized option values.',",49],["\" Find a non-empty line above the current line.",52]],"useCount":2970},{"word":"none","context":[["match none",462],["call <sid>hi(\"Title\",         s:gui0D, \"\", s:cterm0D, \"\", \"none\")",269],["call <sid>hi(\"StatusLine\",    s:gui04, s:gui02, s:cterm04, s:cterm02, \"none\")",273],["call <sid>hi(\"TabLineFill\",   s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"ColorColumn\",   \"\", s:gui01, \"\", s:cterm01, \"none\")",273],["call <sid>hi(\"TabLine\",       s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",273],["call <sid>hi(\"Italic\",        \"\", \"\", \"\", \"\", \"none\")",272],["call <sid>hi(\"StatusLineNC\",  s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\")",272],["2match none",271],["call <sid>hi(\"PMenu\",         s:gui04, s:gui01, s:cterm04, s:cterm01, \"none\")",270]],"useCount":24662},{"word":"noremap","context":[["noremap <Up> <NOP>",30],["noremap <Right> <NOP>",34],["noremap <silent><script><buffer>",34],["noremap L $",44],["noremap ,hl :set hlsearch! hlsearch?<CR>",59],["\\\t\t\t\"noremap\" : 1,",58],["noremap j gj",56],["noremap k gk",56],["noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm",51],["noremap H ^",48]],"useCount":2894},{"word":"norm","context":[["NetrwKeepj norm! 0",51],["keepj norm! 0",93],["norm! 0",91],["sil! norm! zvzz",77],["nnoremap <buffer> <silent> i    :<C-U>exe <SID>BlameCommit(\"exe 'norm q'<Bar>edit\")<CR>",67],["norm! gv",65],["keepj norm! 1Gdd",58],["norm! j",55],["norm ^6w",49],["nnoremap <buffer> <silent> <CR> :<C-U>exe <SID>BlameCommit(\"exe 'norm q'<Bar>edit\")<CR>",49]],"useCount":3253},{"word":"normal","context":[["normal! zo",445],["normal! zt",1674],["normal! 0",1189],["silent! normal! zE",933],["normal zo",901],["normal! gg",554],["normal! l",341],["normal! 2G",336],["normal! gg0",233],["normal! G",229]],"useCount":22979},{"word":"noswapfile","context":[["setlocal ro noma nomod noswapfile",100],["set noswapfile",446],["setlocal noswapfile",1437],["setlocal buftype=acwrite bufhidden=wipe nobuflisted noswapfile nowrap number",23],["setlocal buftype=nofile bufhidden=delete noswapfile",25],["setlocal buftype=nofile bufhidden=hide noswapfile",32],["setlocal noswapfile nobuflisted",41],["silent! setlocal noswapfile",64],["setl noswapfile",69],["setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap cursorline modifiable",83]],"useCount":2503},{"word":"not","context":[["\" Make sure the continuation lines below do not cause problems in",115],["echom \"File is not encrypted, all GPG functions disabled!\"",93],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["call s:throw('not a git repository: '.expand('%:p'))",152],["\" Only include a command terminator if one has not already",172],["return s:err('plug#begin was not called')",178],["echo 'Feature not yet available'",250],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["\" Only do this when not done yet for this buffer",496],["\" For version 5.7 and earlier: only when not done already",1587]],"useCount":25089},{"word":"nowrap","context":[["\" vim: set filetype=vim foldmethod=marker foldlevel=0 nowrap:",62],["\\ . (&l:wrap ? ' wrap' : ' nowrap')",45],["\" vim: nowrap sw=2 sts=2 ts=8 noet:",46],["\" vim:set fdm=marker sw=2 nowrap:",46],["setlocal nowrap",789],["set nowrap",367],["\" vim: nowrap sw=2 sts=2 ts=8:",111],["setlocal scrollbind nowrap nofoldenable",86],["setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap cursorline modifiable",83],["silent! setlocal nowrap",51]],"useCount":2305},{"word":"nr","context":[["let c += getwinvar(nr,'&diff')",74],["for nr in range(1,bufnr('$'))",150],["for nr in range(1,winnr('$'))",147],["execute 'nnoremap <buffer> <silent> dp :diffput '.nr.'<Bar>diffupdate<CR>'",140],["let text = substitute(text, '\\${nr}', \"\\n\", 'g')",120],["if nr < 0 && exists('+shellslash') && ! &shellslash",96],["let nr = bufnr('')",80],["let treebufnr = nr",76],["execute nr.'bdelete'",75],["if fnamemodify(bufname(nr),':p') ==# file",75]],"useCount":4283},{"word":"null","context":[["unless `which pgrep 2> /dev/null`.empty?",89],["let dref = matchstr(line,'\\Cdiff --git \\zs\\%(a/.*\\|/dev/null\\)\\ze \\%(b/.*\\|/dev/null\\)')",73],["let ref = matchstr(getline('.'),'\\Cdiff --git \\%(a/.*\\|/dev/null\\) \\zs\\%(b/.*\\|/dev/null\\)')",75],["let dref = matchstr(getline('.'),'\\Cdiff --git \\zs\\%(a/.*\\|/dev/null\\)\\ze \\%(b/.*\\|/dev/null\\)')",75],["let dref = matchstr(getline('.'),'\\Cdiff --git \\zs\\%(a/.*\\|/dev/null\\)\\ze \\%(b/.*\\|/dev/null\\)')",75],["let ref = matchstr(getline('.'),'\\Cdiff --git \\%(a/.*\\|/dev/null\\) \\zs\\%(b/.*\\|/dev/null\\)')",75],["elseif getline('.') =~# '^diff --git \\%(a/.*\\|/dev/null\\) \\%(b/.*\\|/dev/null\\)'",76],["if ref ==# '/dev/null'",76],["elseif getline('.') =~# '^diff --git \\%(a/.*\\|/dev/null\\) \\%(b/.*\\|/dev/null\\)'",76],["let type = 'null'",76]],"useCount":2211},{"word":"num","context":[["if lnum != -1: # Found matching line num",79],["for num in range(nthreads):",79],["tname = 'PlugT-{0:02}'.format(num)",79],["\"\"\" Find first line with name in current buffer. Return line num. \"\"\"",79],["\" scope is the last field after the 'line:<num>\\t' field",64],["let num = 0",56],["return 'vert '.num.'sfind'.bang",49],["return num.'find'.bang",49],["let num = ''",49],["return s:sub(s:sub(matchstr(a:str,'\\w\\+\\>\\zs\\s*\\%([^,){ ]*[, ]*\\)\\{,'.a:num.'\\}'),'[, ]*$',''),'^\\s+',' ')",49]],"useCount":3062},{"word":"number","context":[["\"floating point number, starting with a dot, optional exponent",200],["set number",974],["setlocal number",456],["\"floating point number, with dot, optional exponent",212],["\"floating point number, without dot, with exponent",202],["\"hex number",154],["\"integer number, or floating point number without a dot and with \"f\".",150],["\"integer number, or floating point number without a dot and with \"f\".",150],["\" flag an octal number with wrong digits",140],["\" Flag the first zero of an octal number as something special",113]],"useCount":13772},{"word":"o","context":[["nnoremap <silent> <buffer> o    :silent! call <SID>preview_commit()<cr>",79],["\" and insert the comment leader when hitting <CR> or using \"o\".",79],["let ok= substitute(ok,'\\[{y(es)},n(o),a(ll),q(uit)]\\s*','','e')",80],["\\ <C-o>:call <SID>Tlist_Window_Jump_To_Tag('useopen')<CR>",84],["\\ [['i', '<C-O>', ''], ['n', '', ''], ['v', '', 'gv'], ['o', '', '']]",90],["normal o",106],["setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e",848],["setlocal indentkeys=0{,0},:,0#,!^F,o,O,e",706],["\\ \" where o.uid=u.uid \".",117],["\\ \"  from sysobjects o, sysusers u \".",135]],"useCount":9905},{"word":"object","context":[["\"path: a path object",126],["\"Returns a new TreeNode object with the given path and parent",78],["class Action(object):",79],["elseif getline('.') =~# '^object \\x\\{40\\}$' && getline(line('.')+1) =~ '^type \\%(commit\\|tree\\|blob\\)$'",76],["silent execute 'write !'.s:repo().git_command('hash-object','-w','--stdin').' > '.tmp",76],["return object",90],["class Buffer(object):",81],["class Plugin(object):",79],["class Command(object):",79],["\"path: a path object representing the full filesystem path to the file/dir that the node represents",73]],"useCount":3468},{"word":"of","context":[["\" cCppString: same as cString, but ends at end of line",120],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" Unfortunately this doesn't very well work for // type of comments :-(",100],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\" \"*/\", and sees a \"*\" at the start of the line as comment again.",102],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["\" Hit the start of the file, use zero indent.",176],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156],["\" At the start of the file use zero indent.",149],["\" Flag the first zero of an octal number as something special",113]],"useCount":47271},{"word":"off","context":[["filetype off",481],["\" Strip off query statistics",202],["\" Strip off column headers ending with a newline",182],["\" Filetype off is required by vundle",75],["\" Strip off trailing spaces",152],["\" Strip off beginning and closing quotes",59],["\" Type ,hl to toggle highlighting on/off, and show current value.",60],["filetype off                  \" required",65],["\" off in the corner of the keyboard. The best way to handle this is just to",66],["\" -i       : turns off interactive prompting from ftp",100]],"useCount":4063},{"word":"offset","context":[["let offset += matchstr(getline(lnum), type.'\\zs\\d\\+')",66],["while offset > 0 && line('.') < line('$')",66],["let offset = lnum - top",67],["let offset -= 1",67],["let offset = line('.') - line('w0')",77],["let delta = line('.') - line('w0') - offset",77],["$curbuf.append((lnum || 4) - 1 + offset, line.gsub(/\\e\\[./, '').chomp)",90],["let offset += 1",184],["let offset = 0",142],["result.each_with_index do |line, offset|",90]],"useCount":3215},{"word":"omnifunc","context":[["setlocal omnifunc=ccomplete#Complete",140],["autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS",137],["autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags",136],["autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS",135],["autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags",134],["autocmd FileType python setlocal omnifunc=pythoncomplete#Complete",127],["setlocal omnifunc=htmlcomplete#CompleteTags",52],["setlocal omnifunc=rubycomplete#Complete",50],["autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete",49],["setlocal omnifunc=",552]],"useCount":2803},{"word":"on","context":[["if has_key(plug, 'on')",90],["filetype plugin indent on",735],["syntax on",556],["filetype plugin on",271],["filetype indent on",167],["filetype on",135],["\" local syntax file - set colors on a per-machine basis:",112],["\" Note: Based on the monokai theme for textmate",108],["\" Check whether this file is removed based on user request",98],["\"if we are running windows then slap a drive letter on the front",90]],"useCount":18535},{"word":"one","context":[["\" changes the current root to the selected one",50],["\" only one possibility",121],["\" one extra column is needed to include the vertical split",54],["\" Record current buffer to return to the correct one",70],["let one = s:repo().translate(':1:'.path)",75],["\" new, less contrasted one",57],["if bufloaded(nr) && !getbufvar(nr,'&modified') && (name ==# one || name ==# two || name ==# three)",60],["\" Make sure the tag type is a valid and supported one",62],["\" Only include a command terminator if one has not already",172],["\" Only one possibility",211]],"useCount":6688},{"word":"only","context":[["\" is impossible to fix because the only way to know if you are inside a",72],["\" leave the hex values out entirely in that case and include only cterm colors)",73],["\" only one possibility",121],["silent only",244],["\" For version 5.7 and earlier: only when not done already",1587],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["\" UTF-8 only.",73],["\" recommened and is for testing only.",66],["\" Currently, Solarized sets only the cterm or gui values for the colorscheme",66],["\" Like pathogen#glob(), only limit the results to directories.",67]],"useCount":11002},{"word":"open","context":[["fread = os.open(fname, os.O_RDONLY | os.O_NONBLOCK)",79],["keepj put ='open '.g:netrw_machine",70],["keepj put ='open '.g:netrw_machine.' '.g:netrw_port",70],["elseif executable('xdg-open')",72],["call newRoot.open()",73],["call self.open()",87],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTab.\": open in new tab\\n\"",92],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTabSilent .\": open in new tab silently\\n\"",92],["\" If the line is inside a fold, open the fold",99],["\" open close folds",73]],"useCount":8014},{"word":"opt","context":[["return [a:opt]",32],["if opt != ''",29],["let opt = a:opt",58],["let b:clang_user_options .= ' ' . l:opt",30],["let opt = a:opt",58],["let var = s:sname().'_'.opt",56],["\" If the line isn't empty (with opt. comment) or in a string, end search.",53],["return map(copy(a:opt), 'syntastic#util#shescape(v:val)')",32],["elseif type(a:opt) == type([])",32],["\\            'opt': 'option',",35]],"useCount":2012},{"word":"option","context":[["call s:throw('unsupported option')",76],["\" pathogen.vim - path option manipulation",65],["\" Set report option to a huge value to prevent informational messages",104],["\" Restore the report option",107],["\" Default option values\"{{{",72],["call s:err('Invalid `on` option: '.cmd.",53],["\\'\" includes the current, non-default Solarized option values.',",49],["\" Solarized menu option. See the \"Menus\" section below for the function itself.",49],["for option in options",46],["\" toggles the use of the NERDTreeIgnore option",44]],"useCount":5393},{"word":"options","context":[["\" GUI options",99],["\" Boolean options",97],["\"   \" Plugin options",89],["\" other options",88],["let options = {}",99],["\" Restore the saved compatibility options.",114],["let options = a:argList",114],["if has_key(a:options, 'cwd')",130],["\" Global options definition. \"{{{",160],["let options = extend({",179]],"useCount":12280},{"word":"opts","context":[["call extend(opts, a:arg)",89],["let opts = copy(s:base_spec)",89],["if has_key(opts, 'dir')",89],["let opts = {}",114],["let opts = a:0 ? a:1 : {}",136],["return opts",148],["let opts.dir = s:dirpath(expand(opts.dir))",89],["let opts.dir = s:dirpath(expand(opts.dir))",89],["function! s:spawn(name, cmd, opts)",88],["let params = has_key(a:opts, 'dir') ? [a:cmd, a:opts.dir] : [a:cmd]",88]],"useCount":5346},{"word":"or","context":[["call append(\"$\", \"\\t(global or local to buffer)\")",199],["\"   this function return 0 or 1",84],["echo \"Press 'L' on each line to load plugin, or 'U' to update\"",89],["throw 'Invalid argument type (expected: string or dictionary)'",89],["\" or",100],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\" Redistribution and use in source and binary forms, with or without",116],["\"integer number, or floating point number without a dot and with \"f\".",150],["\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",223],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703]],"useCount":21553},{"word":"orange","context":[["call <SID>X(\"Constant\", s:orange, \"\", \"\")",191],["call <SID>X(\"rubyLocalVariableOrMethod\", s:orange, \"\", \"\")",189],["call <SID>X(\"rubyCurlyBlock\", s:orange, \"\", \"\")",177],["call <SID>X(\"rubyInterpolationDelimiter\", s:orange, \"\", \"\")",170],["call <SID>X(\"javaScriptNumber\", s:orange, \"\", \"\")",170],["call <SID>X(\"javaScriptMember\", s:orange, \"\", \"\")",169],["call <SID>X(\"pythonExClass\", s:orange, \"\", \"\")",110],["call <SID>X(\"goConstants\", s:orange, \"\", \"\")",108],["call <SID>X(\"ShowMarksHLl\", s:orange, s:background, \"none\")",94],["\" orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80",73]],"useCount":5017},{"word":"order","context":[["\"inOrder: 1 if the new node should be inserted in sorted order",42],["\"Returns a list of children to display for this node, in the correct order",42],["\\ :call <SID>Tlist_Change_Sort('menu', 'set', 'order')<CR>",56],["\" In order to parse a statement, we must know what database type",45],["\" In order to force syntastic to refresh the header includes simply",43],["\"Sorts the children of this node according to alphabetical order and the",42],["\" order, which can lead to missing filetype when jumping",62],["\\ \" order by \".(s:DB_get('dict_show_owner')==1?\"convert(varchar,u.name), \":'').\"o.name\"",66],["\\ \" order by o.name\"",74],["\"-inOrder: 1 if the new node should be inserted in sorted order",42]],"useCount":2159},{"word":"org","context":[["\"             See http://sam.zoy.org/wtfpl/COPYING for more details.",1702],["\" http://www.vim.org/scripts/script.php?script_id=3034",73],["\" Maintainer:\tJohannes Zellner <johannes@zellner.org>",77],["\" Maintainer:\t\tTim Pope <vimNOSPAM@tpope.org>",81],["\" Maintainer:   Tim Pope <vimNOSPAM@tpope.org>",90],["\"              See http://sam.zoy.org/wtfpl/COPYING for more details.",100],["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105],["\" Maintainer:\tTim Pope <vimNOSPAM@tpope.org>",189],["\" @Website:     http://www.vim.org/account/profile.php?user_id=4037",341],["\" Maintainer:\tBram Moolenaar <Bram@vim.org>",376]],"useCount":6073},{"word":"other","context":[["\"\t? List of the procedure's effect on each external variable, control, or other element.",51],["\" other options",88],["\"\t? List of any external variable, control, or other element whose state affects this procedure.",52],["\" other potential terminal customizations that might make gui mode suboptimal.",66],["\"        Keyword         any other keyword",69],["\" L\\*a\\*b values are canonical (White D65, Reference D50), other values are",73],["\" directory names and other special names in listings",47],["\" Set 'formatoptions' to break comment lines but not other lines,",84],["\" Only load this indent file when no other was loaded.",515],["\"SECTION: Init variable calls and other random constants {{{2",46]],"useCount":4049},{"word":"out","context":[["let out = go#tool#ExecuteInDir(command)",166],["return out",337],["let out = []",363],["echo out",89],["let out = s:system(cmd)",85],["let out = s:system(printf('git clone --depth 1 %s %s', s:plug_src, tmp))",73],["\" leave the hex values out entirely in that case and include only cterm colors)",73],["return s:err('Error upgrading vim-plug: '. out)",73],["\"filter out the .. and . directories",76],["set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc",75]],"useCount":7065},{"word":"output","context":[["let output = output . terminator",153],["let output = output . terminator",153],["let output = ''",160],["let output = output.s:DB_getLoginScript(s:DB_get(\"login_script\"))",163],["let output = output.s:DB_getLoginScript(s:DB_get(\"login_script\"))",163],["let output = output.a:str",163],["let output = output.a:str",163],["silent echo output",172],["\"   let g:base16_shell_path=base16-builder/output/shell/",177],["return output",321]],"useCount":9291},{"word":"owner","context":[["if owner != ''",59],["let buffers = syntastic#util#unique(map(loclist, 'v:val[\"bufnr\"]') + (owner ? [owner] : []))",55],["let buffers = syntastic#util#unique(map(loclist, 'v:val[\"bufnr\"]') + (owner ? [owner] : []))",55],["let owner      = s:DB_getObjectOwner(a:view_prefix)",53],["let owner  = ( strlen(owner) > 0 ? owner : '' )",51],["let owner      = s:DB_getObjectOwner(a:table_name)",135],["if strlen(owner) > 0",209],["let owner      = s:DB_getObjectOwner(a:table_prefix)",76],["let owner   = s:DB_getObjectOwner(a:proc_prefix)",69],["\\ \"   and u.name = '\".owner.\"' \"",60]],"useCount":2470},{"word":"p","context":[["let v:this_session=expand(\"<sfile>:p\")",241],["Expect CursorPos() == [l,1,'p']",125],["so <sfile>:p:h/html.vim",126],["call s:throw('not a git repository: '.expand('%:p'))",152],["call s:Tlist_Exe_Cmd_No_Acmds('wincmd p')",159],["call s:exec('wincmd p')",115],["call mkdir(dir, 'p')",107],["let fname = fnamemodify(a:filename, ':p')",98],["let s:sx = expand(\"<sfile>:p:r\").\"x.vim\"",241],["wincmd p",1940]],"useCount":22850},{"word":"palette","context":[["\" neutral gray monotone palette component)",73],["\\ g:airline#themes#solarized#palette.normal.airline_warning",86],["\" returns the palette index for the given grey index",120],["\" returns the palette index to approximate the 'rrggbb' hex string",118],["\" returns the palette index for the given R/G/B color indices",120],["\" returns the palette index to approximate the given R/G/B color levels",120],["\" Returns the palette index to approximate the 'rrggbb' hex string",190],["\" Returns the palette index for the given R/G/B colour indices",211],["\" Returns the palette index for the given grey index",211],["\" Returns the palette index to approximate the given R/G/B colour levels",211]],"useCount":3174},{"word":"parent","context":[["let parent += 1",77],["elseif getline('.') =~# '^parent \\x\\{40\\}\\>'",77],["if getline('.') ==# 'parent '",76],["if self.parent != {}",72],["\"if we have no parent then we can have no siblings",72],["while getline(line) =~# '^parent '",77],["let parent = 0",78],["let currentNode = currentNode.parent",87],["let newTreeNode.parent = {}",78],["\"Returns a new TreeNode object with the given path and parent",78]],"useCount":5940},{"word":"part","context":[["\" This file is part of SingleCompile.",70],["let part = matchstr(line, '\\(\\S.*\\)$')",51],["\"if  the last part of the path is a symlink then flag it as such",45],["\" This file is part of YouCompleteMe.",41],["\" Note:\t\tThis file is a part of Automatic Tex Plugin for Vim.",43],["\"Gets the last part of this path.",45],["\"grab the last part of the path (minus the trailing slash)",45],["\"if the line is part of a sexy comment then just flag it...",46],["let part = substitute(line, '^\\s*', '', '')",70],["\" Prompt for the variables which are part of",71]],"useCount":3454},{"word":"parts","context":[["\"get all the leading spaces and vertical tree parts for this line",35],["if !empty(parts)",31],["\\ 'function': 'airline#parts#readonly',",31],["if len(parts) >= 3",44],["\"remove the tree parts and the leading space",90],["\"returns the given line with all the tree parts stripped off",46],["if len(parts) > 4",31],["\" floating point number with integer and fractional parts and optional exponent",36],["call airline#parts#define_function('branch', 'airline#extensions#branch#get_head')",32],["if len(parts) > 3",35]],"useCount":2990},{"word":"pat","context":[["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'g')",154],["function! s:sub(str,pat,rep) abort",85],["function! s:lod_ft(pat, names)",90],["execute 'autocmd! PlugLOD FileType' a:pat",89],["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'')",157],["function! s:gsub(str,pat,rep) abort",86],["let beg = match(line,'\\C'.a:pat,lastend)",49],["let pat = '\\s\\+\\zs.\\{-\\}\\ze\\%(\\n\\|\\s\\s\\|#{\\@!\\|%>\\|-->\\|$\\)'",58],["function! s:gsub(str,pat,rep)",65],["function! s:sub(str,pat,rep)",68]],"useCount":5309},{"word":"path","context":[["return a:path",220],["let $GOPATH = go#path#Detect()",199],["function! s:path(path)",186],["setlocal path=",859],["function! s:path(path)",186],["return path",308],["let path = a:path",284],["let path = ''",276],["let path = a:path",284],["function! s:dirpath(path)",180]],"useCount":50230},{"word":"pathogen","context":[["let sep = pathogen#separator()",163],["call s:warn('Change pathogen#infect('.string(path).') to pathogen#infect('.string(path.'/{}').')')",68],["let &rtp = pathogen#join(pathogen#uniq(list))",68],["call s:warn('Change pathogen#infect('.string(path).') to pathogen#infect('.string(path.'/{}').')')",68],["return filter(pathogen#glob(a:pattern),'isdirectory(v:val)')",68],["let rtp = pathogen#split(&rtp)",73],["\" Two options for installation: manual or pathogen",81],["let &rtp = pathogen#join(pathogen#uniq(list))",68],["for dir in pathogen#split(&rtp)",103],["let sep = pathogen#slash()",110]],"useCount":4436},{"word":"pattern","context":[["let files = split(glob(a:pattern),\"\\n\")",68],["call CmdLine(\"%s\" . '/'. l:pattern . '/')",67],["return filter(pathogen#glob(a:pattern),'isdirectory(v:val)')",68],["if &hls | let keepregslash= s:ExplorePatHls(pattern) | endif",72],["let l:pattern = escape(@\", '\\\\/.*$^~[]')",78],["let @/ = l:pattern",82],["let l:pattern = substitute(l:pattern, \"\\n$\", \"\", \"\")",84],["let l:pattern = substitute(l:pattern, \"\\n$\", \"\", \"\")",84],["for pattern in a:000",90],["let pattern = ''",108]],"useCount":10012},{"word":"perl","context":[["perl db_results_variable()",88],["call s:DB_runCmd(\"perl DBI\", cmd, g:dbext_dbi_msg)",88],["\"  Also called in the filetype plugin perl.vim",93],["setf perl",110],["\" Bugs/requests: http://github.com/vim-perl/vim-perl/issues",57],["let cmd = \"perl db_query()\"",66],["\" Bugs/requests: http://github.com/vim-perl/vim-perl/issues",57],["call s:DB_runCmd(\"perl DBI::ODBC\", cmd, g:dbext_dbi_msg)",66],["perl <<EOP",82],["\" perl highlighting \"{{{",74]],"useCount":3086},{"word":"php","context":[["if &syntax != 'php'",44],["if &filetype != 'php'",47],["\\ 'php',",51],["\\ 'filetype': 'php',",57],["\" http://www.vim.org/scripts/script.php?script_id=2937",72],["\" http://www.vim.org/scripts/script.php?script_id=3034",73],["\" @Website:     http://www.vim.org/account/profile.php?user_id=4037",341],["setlocal syntax=php",44],["syn region phpFoldHtmlInside matchgroup=Delimiter start=\"?>\" end=\"<?\\(php\\)\\=\" contained transparent contains=@htmlTop",42],["setlocal filetype=php",44]],"useCount":3121},{"word":"pid","context":[["pids.each { |pid| Process.kill 'TERM', pid.to_i rescue nil }",90],["pids.each { |pid| Process.kill 'TERM', pid.to_i rescue nil }",90],["children = children.map { |pid|",90],["`pgrep -P #{pid}`.lines.map { |l| l.chomp }",90],["return pid",51],["killall fd.pid",89],["echo \"Killing server with pid \".pid",49],["os.killpg(self.proc.pid, signal.SIGTERM)",59],["def killall pid",89],["pids = [pid]",89]],"useCount":2238},{"word":"plug","context":[["call plug#begin('~/.config/nvim/plugged')",142],["\" vim-plug: Vim plugin manager",91],["call plug#begin()",97],["call plug#begin('~/.vim/plugged')",130],["if has_key(plug, 'on')",90],["\"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",90],["\"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",90],["call plug#end()",607],["if has_key(plug, 'for')",90],["return s:err('plug#begin was not called')",178]],"useCount":6068},{"word":"plugin","context":[["\"  Also called in the filetype plugin perl.vim",93],["call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",166],["call s:lod(a:names, ['ftdetect', 'after/ftdetect', 'plugin', 'after/plugin'])",166],["\" vim-plug: Vim plugin manager",91],["\" Don't load another plugin for this buffer",178],["filetype plugin on",271],["\" Vim filetype plugin",286],["filetype plugin indent on",735],["\" Vim filetype plugin file",638],["\"Description: Syntax checking plugin for syntastic.vim",1331]],"useCount":12581},{"word":"plugins","context":[["\\ ' plugins ('.len(s:update.bar).'/'.total.')')",88],["curbuf[0] = self.event + ' plugins ({0}/{1})'.format(len(self.bar), self.num_plugs)",76],["call append(0, 'Searching for unused plugins in '.g:plug_home)",63],["\"   \" Add plugins to &runtimepath",62],["\" Enable filetype plugins",58],["\" Then reload .vimrc and :PlugInstall to install plugins.",89],["call append(0, 'Checking plugins')",90],["$curbuf[1] = \"#{pull ? 'Updating' : 'Installing'} plugins (#{cnt}/#{tot})\"",90],["if RailsFilePath() =~ '\\<vendor/plugins/.'",145],["if !has_key(s:plugins, vcsType)",56]],"useCount":2766},{"word":"plugs","context":[["let [cnt, total] = [0, len(g:plugs)]",179],["if !has_key(g:plugs, name)",96],["let managed = filter(copy(g:plugs), 's:is_managed(v:key)')",91],["let plug = g:plugs[name]",90],["let rtp = s:rtp(g:plugs[name])",178],["return has_key(g:plugs[a:name], 'uri')",90],["if !exists('g:plugs')",268],["let g:plugs = {}",90],["for spec in values(g:plugs)",179],["for [name, spec] in items(g:plugs)",180]],"useCount":3391},{"word":"point","context":[["\"hexadecimal floating point number, with leading digits, optional dot, with exponent",70],["\"hexadecimal floating point number, optional leading digits, with dot, with exponent",70],["\"        Float           a floating point constant: 2.3e10",69],["\" TODO: at this point there is no b:syntastic_loclist",66],["\"integer number, or floating point number without a dot and with \"f\".",150],["\" floating point number, with dot, optional exponent",52],["\" floating point number, starting with a dot, optional exponent",52],["\"floating point number, with dot, optional exponent",212],["\"floating point number, starting with a dot, optional exponent",200],["\"floating point number, without dot, with exponent",202]],"useCount":2414},{"word":"pos","context":[["call add(s:pos, winsaveview())",90],["let settings = strpart(settings, pos + 1)",102],["call setpos('.',pos)",115],["if pos == -1",156],["let pos = getpos('.')",579],["call setpos('.', pos)",453],["let pos = 0",193],["let pos = 4",172],["let pos = b:pos",162],["let pos = b:pos",162]],"useCount":10155},{"word":"pos1","context":[["call setpos('.', [0, pos1[0], pos1[1], 0])",105],["let block = [pos1, pos2]",206],["call setpos('.', [0, pos1[0], pos1[1], 0])",105],["let block = [pos1, [pos1[0], pos1[1] + len(content) - 1]]",81],["let pos1 = searchpos(mx, 'bcnW')",107],["let content = matchstr(getline(pos1[0])[pos1[1]-1:], mx)",127],["let content = matchstr(getline(pos1[0])[pos1[1]-1:], mx)",127],["let pos1  = line(\".\")",89],["let ins\t= pos2-pos1+1",100],["exe \":\".pos1",148]],"useCount":2368},{"word":"position","context":[["\" Save the cursor position",71],["\"Always show current position",55],["\" Add the current cursor position to the jump list, so that user can",64],["\" Return to last edit position when opening files (You want this!)",65],["\"Saves the current cursor position in the current buffer and the window",67],["\"scroll position",67],["\" When editing a file, always jump to the last known cursor position.",50],["\" Restore the cursor position",75],["\" Clean up: restore previous search history, and cursor position",94],["\" Preparation: save last search, and cursor position.",95]],"useCount":4335},{"word":"pre","context":[["let add = pre.s:sub(s:sub(mat,'^,',''),',$','').post",49],["\" starting <pre> to restore the indent.",33],["let pre = matchstr(line,'^.*\\.update_all[( ][}'.\"'\".'\"]')",49],["let mat = strpart(line,strlen(pre),strlen(line)-strlen(pre)-strlen(post))",49],["let mat = strpart(line,strlen(pre),strlen(line)-strlen(pre)-strlen(post))",49],["let pre = 'app/views/'",37],["return pre.name",37],["let state.pre = s:close_tag_pre(state.pre, res_lines)",36],["let state.pre = s:close_tag_pre(state.pre, res_lines)",36],["if processed && state.pre[0]",36]],"useCount":2129},{"word":"prefix","context":[["let prefix = ''",160],["call feedkeys(a:prefix . substitute(a:map, '^<Plug>', \"\\<Plug>\", '') . extra)",77],["return s:findedit(cmd,prefix.f.suffix.jump)",81],["if rails#app().has_file(prefix.f.suffix)",83],["function! s:extract_name(str, prefix, suffix)",89],["let name = printf('%s (%s)', prefix, idx)",89],["return matchstr(a:str, '^'.a:prefix.' \\zs[^:]\\+\\ze:.*'.a:suffix.'$')",89],["let prefix = '[Plugins]'",90],["let name   = prefix",90],["for [prefix, suffix] in tests",91]],"useCount":4946},{"word":"previous","context":[["\" the '0 mark is correctly set to the previous buffer.",68],["\"Move back and forth through previous and next buffers",67],["\" Clean up: restore previous search history, and cursor position",94],["let previous = root",74],["\"direction: 0 if you want to find the previous sibling, 1 for the next sibling",72],["\" Remove the previous help",68],["while root !=# previous",69],["let previous = \"\"",69],["\" Remove the previous highlighting",66],["\" Restore the previous state",66]],"useCount":4421},{"word":"printf","context":[["return extend([printf('x %s:', a:name)], lines)",90],["call append(3, printf('- Installed %d frozen plugin%s', new_frozen, s))",87],["return [printf('%s %s: %s', a:bullet, a:name, s:lastline(a:message))]",88],["let uri = printf(fmt, repo)",89],["let name = printf('%s (%s)', prefix, idx)",89],["execute printf('%s%s%s %s', (a:l1 == a:l2 ? '' : (a:l1.','.a:l2)), a:cmd, a:bang, a:args)",89],["return s:err(printf('Unknown plugin%s: %s', s, join(unknowns, ', ')))",89],["execute printf('autocmd FileType %s call <SID>lod_ft(%s, %s)',",90],["execute printf(",248],["call s:_throw(printf(",202]],"useCount":4593},{"word":"proc","context":[["self.proc = None",60],["os.killpg(self.proc.pid, signal.SIGTERM)",59],["if self.proc.returncode != 0:",59],["return self.proc and self.proc.poll() is None",59],["logh  = proc {",90],["take1 = proc { mtx.synchronize { running && all.shift } }",90],["log   = proc { |name, result, type|",90],["bt = proc { |cmd, name, type, cleanup|",89],["\\   (!isdirectory('/proc') && executable('sw_vers')))",77],["where = proc { |name| (1..($curbuf.length)).find { |l| $curbuf[l] =~ /^[-+x*] #{name}:/ } }",90]],"useCount":2434},{"word":"project","context":[["let project = eclim#project#util#GetCurrentProjectName()",392],["if !eclim#project#util#IsCurrentFileInProject()",231],["let command = substitute(command, '<project>', project, '')",274],["let command = substitute(command, '<project>', project, '')",274],["let file = eclim#project#util#GetProjectRelativeFilePath()",170],["if project == ''",104],["let project = eclim#project#util#GetCurrentProjectName()",392],["for project in projects",83],["\\ -complete=customlist,eclim#project#util#CommandCompleteProject",64],["call eclim#project#util#ClearProjectsCache()",76]],"useCount":5688},{"word":"prompt","context":[["call s:promptToDelBuffer(bufnum, prompt)",35],["\" Loop through and prompt the user for all buffer connection parameters.",38],["\" More prompt: -- More --",39],["\" 'Press enter' prompt and yes/no questions",40],["\" if the cursor is on a bookmark, prompt to delete",42],["\"begin with \\n which will cause a \"press enter\" prompt.",45],["\"print as much of a:msg as possible without \"Press Enter\" prompt appearing",47],["echohl Search\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\" highlight prompt",48],["let str = join(s:prompt, '')",65],["let prt = s:prompt",66]],"useCount":2474},{"word":"prototype","context":[["\"   Plug '~/my-prototype-plugin'",89],["function! s:prototype.FormatFilename(file) dict \"{{{3",38],["\" If inside a fold, then don't display the prototype",34],["\\     'prototype': {",55],["let object = s:prototype.New(a:0 >= 1 ? a:1 : {})",55],["\" Extract the tag scope/prototype",64],["function! s:prototype.CleanFilter(filter) dict \"{{{3",49],["\" The tag type is after the tag prototype field. The prototype field",34],["function! s:prototype.Highlight_filename() dict \"{{{3",38],["syntax keyword javaScriptPrototype      prototype",35]],"useCount":3252},{"word":"purple","context":[["call <SID>X(\"phpKeyword\", s:purple, \"\", \"\")",177],["call <SID>X(\"Define\", s:purple, \"\", \"none\")",178],["call <SID>X(\"phpStatement\", s:purple, \"\", \"\")",176],["call <SID>X(\"PreProc\", s:purple, \"\", \"\")",176],["call <SID>X(\"phpRepeat\", s:purple, \"\", \"\")",176],["call <SID>X(\"phpConditional\", s:purple, \"\", \"\")",175],["call <SID>X(\"cStorageClass\", s:purple, \"\", \"\")",175],["call <SID>X(\"javaScriptRepeat\", s:purple, \"\", \"\")",167],["call <SID>X(\"Structure\", s:purple, \"\", \"\")",174],["call <SID>X(\"pythonConditional\", s:purple, \"\", \"\")",166]],"useCount":7512},{"word":"put","context":[["keepj put ='open '.g:netrw_machine.' '.g:netrw_port",70],["\" After either Option 1 or Option 2 above, put the following two lines in your",70],["put =zz",90],["\" Download plug.vim and put it in ~/.vim/autoload",90],["silent  put ='\\\"'",84],["work_q.put(work)",79],["silent! put h",78],["\" The difference is in whether a space is put in",76],["keepj put =g:netrw_ftpextracmd",108],["silent put",75]],"useCount":5295},{"word":"python","context":[["python <<EOF",128],["python << EOF",686],["if !has('python')",240],["\\ 'filetype': 'python',",143],["if has('python')",164],["python << endpython",194],["if !has(\"python\")",84],["let b:current_syntax = \"python\"",89],["if has(\"python\")",96],["autocmd FileType python setlocal omnifunc=pythoncomplete#Complete",127]],"useCount":5860},{"word":"q","context":[["call repo.git_chomp_in_tree('reset','-q')",70],["q!",133],["nnoremap <buffer> <silent> q    :<C-U>bdelete<CR>",88],["\\ 'command! -nargs=* -range -bang %s call s:lod_cmd(%s, \"<bang>\", <line1>, <line2>, <q-args>, %s)',",86],["let ok= substitute(ok,'\\[{y(es)},n(o),a(ll),q(uit)]\\s*','','e')",80],["let cmd = ['reset','-q','--',filename]",75],["command! -nargs=+ CSAHi exe \"hi\" <q-args>",81],["call s:command(\"-bang -nargs=? -complete=customlist,s:GitComplete Git :execute s:Git(<bang>0,<q-args>)\")",76],["q",264],["call s:command(\"-nargs=? -complete=customlist,s:CommitComplete Gcommit :execute s:Commit(<q-args>)\")",76]],"useCount":5190},{"word":"query","context":[["let query = s:DB_searchReplace(query, var_expr, var_expr, 0)",77],["let query = s:DB_searchReplace(query, var_expr, var_expr, 0)",77],["let query = a:query",104],["let query = a:query",104],["let query = substitute(query,",203],["return query",225],["let query = query .",384],["let query = query .",384],["\" Strip off query statistics",202],["let query = substitute(query,",203]],"useCount":7571},{"word":"quote","context":[["let command .= \" \".quote.url.quote",38],["let quote = ''",49],["let command .= \" \".quote.url.quote",38],["\"  \\s*\"       - Any space followed by a double quote",47],["\"  \"\\s*       - Double quote followed any space",47],["\" the first quote will autoclose so you'll get 'foo' and hitting <c-a> will",63],["message = Regexp.quote($2)",66],["\" put the cursor right after the quote",66],["let quote = &shellxquote == '\"' ?  \"'\" : '\"'",69],["\"When typing a string, your quotes auto complete. Move past the quote",66]],"useCount":2162},{"word":"r","context":[["return r",288],["let g:colors_name = expand(\"<sfile>:t:r\")",180],["fun <SID>colour(r, g, b)",196],["return <SID>colour(l:r, l:g, l:b)",200],["let s:sx = expand(\"<sfile>:p:r\").\"x.vim\"",241],["let l:x = <SID>rgb_number(a:r)",265],["let l:dr = <SID>rgb_level(l:gx) - a:r",265],["let l:dgr = <SID>grey_level(l:gx) - a:r",265],["let l:gx = <SID>grey_number(a:r)",265],["let l:r = (\"0x\" . strpart(a:rgb, 0, 2)) + 0",308]],"useCount":18044},{"word":"rails","context":[["let self = rails#app()",99],["\" autoload/rails.vim",49],["let c = rails#underscore(a:1)",49],["let app = rails#app()",56],["let tests = map(filter(rails#app().test_suites(),'has_key(mapping,v:val)'),'get(mapping,v:val)')",63],["if rails#app().has_file(prefix.f.suffix)",83],["let buffer = rails#buffer()",145],["if rails#app().has('spec')",128],["let self = rails#buffer()",107],["if rails#app().has('test')",84]],"useCount":11330},{"word":"range","context":[["function! s:status_update() range",89],["for lnum in reverse(range(1, a:lnum))",89],["for i in range(a:count)",117],["for i in range(tabpagenr('$'))",119],["for winnr in range(winnr('$'),1,-1)",133],["for nr in range(1,winnr('$'))",147],["for lnum in range(a:lnum1,a:lnum2)",150],["for nr in range(1,bufnr('$'))",150],["for tab in [mytab] + range(1,tabpagenr('$'))",151],["for winnr in range(1,tabpagewinnr(tab,'$'))",225]],"useCount":8065},{"word":"rb","context":[["if res =~ '#'|return s:sub(res,'#','_controller.rb#')|endif",126],["if res != \"\"|return res.\".rb\"|endif",196],["if res != \"\"|return res.(fnamemodify(res,':e') == '' ? '.rb' : '')|endif",98],["return 'db/schema.rb'.suffix",90],["return \"config/application.rb\\nconfig/environment.rb\"",66],["return \"config/application.rb\\nconfig/environment.rb\"",66],["let suffix = '.rb'",63],["elseif f =~ '\\<test/unit/.*_test\\.rb$'",56],["elseif f =~ '\\<test/functional/.*_test\\.rb$'",56],["return ['config/application.rb', 'config/environment.rb']",50]],"useCount":10966},{"word":"re","context":[["\\\"else if (\".g:rs.\"...\".g:re.\")\\<cr>{\\<cr>\".g:rs.\"...\".g:re.\"\\<cr>} \".",90],["import re",199],["\\\"else if (\".g:rs.\"...\".g:re.\")\\<cr>{\\<cr>\".g:rs.\"...\".g:re.\"\\<cr>} \".",90],["matcher = re.compile('^[-+x*] {0}:'.format(name))",76],["\\\"\\<cr>case \".g:rs.\"...\".g:re.\":\\<cr>break;\".",72],["expect_uri = re.sub(match, '', self.args['uri'])",69],["actual_uri = re.sub(match, '', self.repo_uri())",69],["match = re.compile(r'git::?@')",69],["\" this is helpful to paste someone the path you're looking at",67],["\" does not re-read the colorscheme (or .vimrc for that matter) so any `has_gui`",66]],"useCount":3273},{"word":"read","context":[["let echo = s:Edit('read',1,args)",67],["silent call s:ExecuteInTree((a:cmd ==# 'read' ? '$read' : a:cmd).'!'.git.' --no-pager '.args)",68],["if a:cmd =~# 'read'",68],["if a:cmd !~# 'read'",68],["return 'silent %delete_|read '.s:fnameescape(file).'|silent 1delete_|diffupdate|'.line('.')",73],["silent execute '$read '.temp",76],["return \"read !\".escape(repo.git_command('cat-file',type,hash),'%#\\')",76],["data = File.read(tmp).chomp",90],["silent call s:ExecuteInTree((a:cmd ==# 'read' ? '$read' : a:cmd).'!'.git.' --no-pager '.args)",68],["if a:cmd ==# 'read'",141]],"useCount":3155},{"word":"readfile","context":[["if readfile(s:me) ==# readfile(new)",89],["let line = get(readfile(dir, '', 1), 0, '')",61],["return readfile(self.dir('HEAD'))[0]",62],["let body = readfile(s:repo().dir(path[5:-1]))[0]",72],["let errors = readfile(errorfile)",74],["call s:throw(join(readfile(error),\"\\n\"))",75],["for line in readfile(outfile)",76],["call writefile(readfile(temp,'b'),file,'b')",75],["let sha1 = readfile(tmp)[0]",77],["if readfile(s:me) ==# readfile(new)",89]],"useCount":2258},{"word":"red","context":[["call <SID>X(\"diffRemoved\", s:red, \"\", \"\")",144],["call <SID>X(\"Identifier\", s:red, \"\", \"none\")",171],["call <SID>X(\"htmlArg\", s:red, \"\", \"\")",140],["call <SID>X(\"htmlScriptTag\", s:red, \"\", \"\")",139],["call <SID>X(\"htmlTag\", s:red, \"\", \"\")",137],["call <SID>X(\"htmlTagName\", s:red, \"\", \"\")",135],["let s:red         = \"1\"",86],["call <SID>X(\"phpVarSelector\", s:red, \"\", \"\")",175],["call <SID>X(\"vimCommand\", s:red, \"\", \"none\")",178],["call <SID>X(\"WarningMsg\", s:red, \"\", \"\")",180]],"useCount":5022},{"word":"redir","context":[["redir => redir",39],["redir => redir",39],["exe 'redir! > ' . s:dbext_tempfile",163],["redir => result",40],["redir => res",46],["silent! redir END",54],["redir => output",66],["redir @a",70],["redir => pyv",79],["redir END",1829]],"useCount":3227},{"word":"redraw","context":[["silent! redraw",77],["\" redraw",73],["return 'redraw|echo '.string(':!'.git.' '.args)",67],["\"refresh and redraw all the error info for this buf when saving or reading",81],["vim.command('redraw')",93],["call syntastic#util#redraw(g:syntastic_full_redraws)",108],[":redraw!",112],["\"   redraw!",125],["redraw!",2046],["redraw",4622]],"useCount":8337},{"word":"ref","context":[["return s:Edit(a:mode,0,ref)",250],["let ref = self.rev_parse(matchstr(a:spec,'.[^:]*'))",76],["let ref = strpart(getline('.'),5)",76],["let ref = matchstr(getline('.'),'\\x\\{40\\}')",447],["let ref = 'e69de29bb2d1d6434b8b29ae775ad8c2e48c5391'",77],["if getline('.') =~# '^ref: '",77],["let ref = s:sub(ref,'^b/',myhash.':')",76],["let ref = getline('.')",77],["let ref = expand(\"<cfile>\")",77],["let ref = ''",77]],"useCount":4062},{"word":"refresh","context":[["call self.path.refresh()",69],["let refresh = 1",90],["call s:notifiers.refresh(g:SyntasticLoclist.New([]))",93],["\" refresh the listing",143],["refresh.kill if refresh",89],["refresh = Thread.new {",89],["refresh.kill if refresh",89],["call s:notifiers.refresh(g:SyntasticLoclist.current())",61],["call s:notifiers.refresh(loclist)",70],["\"refresh and redraw all the error info for this buf when saving or reading",81]],"useCount":2874},{"word":"refs","context":[["if self.spec() =~ '^fugitive://' || self.spec() =~ '\\.git/refs/\\|\\.git/.*HEAD$'",73],["elseif self.spec() =~ '\\.git/refs/\\|\\.git/.*HEAD$'",73],["elseif s:buffer().path() =~# '^\\.git/refs/\\|^\\.git/.*HEAD$'",75],["let file = 'refs/heads/'.getline('.')[12:]",75],["return self.dir('refs/heads/'.a:spec)",66],["elseif a:spec =~# 'HEAD\\|^refs/' && a:spec !~ ':' && filereadable(self.dir(a:spec))",66],["elseif body =~# '^ref: refs/'",73],["if path =~# '^\\.git/refs/heads/'",73],["elseif fnamemodify(self.spec(),':p') =~# '.\\git/refs/\\|\\.git/\\w*HEAD$'",73],["return self.dir('refs/remotes/'.a:spec,'/HEAD')",66]],"useCount":2290},{"word":"region","context":[["syntax region plug1 start=/\\%1l/ end=/\\%2l/ contains=plugNumber",90],["syntax region plug2 start=/\\%2l/ end=/\\%3l/ contains=plugBracket,plugX",90],["syn region p6Match",249],["syn region p6Comment",135],["syn region\tcParen\t\ttransparent start='(' end=')' contains=ALLBUT,@cParenGroup,cCppParen,cCppString,@Spell",67],["syn region\tcIncluded\tdisplay contained start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+",73],["syn region p6PodFormatOne",84],["syn region p6PodFormatThree",84],["syn region p6PodFormatTwo",84],["syn region p6PodFormatFrench",84]],"useCount":13531},{"word":"relglob","context":[["call s:add_methods('app', ['relglob'])",48],["function! s:relglob(...)",48],["return join(call(rails#app().relglob,a:000,rails#app()),\"\\n\")",48],["let migrations = rails#app().relglob(\"db/migrate/\",a:A.\"[0-9_]*\",\".rb\")",48],["let all = rails#app().relglob(\"\",a:ArgLead.\"*\")",48],["let local = rails#app().relglob(\"app/views/\".c.\"/\",\"*.*[^~]\")",48],["let con = rails#app().relglob(\"app/controllers/\",\"**/*\",\".rb\")",48],["\\ self.relglob(\"lib/\",\"**/*\",\".rb\")",48],["\\ self.relglob(\"app/models/\",\"**/*\",\".rb\") +",48],["let controllers = self.relglob(\"app/controllers/\",\"**/*\",\".rb\")",48]],"useCount":2176},{"word":"remote","context":[["let remote = result[-1]",90],["let remote = 'origin'",122],["let remote = s:repo().git_chomp('config','branch.'.branch.'.remote')",60],["let remote = s:repo().git_chomp('config','branch.'.branch.'.remote')",60],["elseif !s:compare_git_uri(remote, a:spec.uri)",90],["let remote = matchstr(branch,'[^/]\\+')",60],["let raw = s:repo().git_chomp('config','remote.'.remote.'.url')",72],["let rev = rev[strlen(remote)+1:-1]",60],["let raw = s:repo().git_chomp('config','remote.'.remote.'.url')",72],["let raw = remote",73]],"useCount":3272},{"word":"remove","context":[["\"remove the tree parts and the leading space",90],["\" joined now, remove the concatenation",70],["call remove(list, i)",72],["call remove(s:triggers, a:name)",85],["let spec = remove(s:update.todo, name)",88],["call remove(s:jobs, a:name)",88],["let f = remove(found, 0)",90],["\" First remove all existing highlighting.",90],["call remove(b:rails_abbreviations,root)",94],["call remove(a:list,i)",102]],"useCount":7761},{"word":"repeat","context":[["Plug 'tpope/vim-repeat'",166],["call append(a:lnum, ['', a:text, repeat('-', len(a:text))])",45],["Plugin 'tpope/vim-repeat'",49],["\" attempt to repeat with previous host-file-etc",42],["\\   'repeat'  : 0,",53],["let ret .= repeat(' ', a:width - width)",81],["return a:str . repeat(' ', a:len - len(a:str))",92],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["call s:progress_bar(2, repeat('=', cnt), total)",180]],"useCount":2901},{"word":"repo","context":[["execute cd.'`=s:repo().tree()`'",463],["return s:repo().superglob(a:A)",322],["call s:ReplaceCmd(s:repo().git_command('cat-file',b:fugitive_type,hash))",228],["let b:git_dir = s:repo().dir()",228],["function! s:is_local_plug(repo)",178],["let repo = s:repo()",173],["let repo = s:repo()",173],["let repo = a:repo",91],["let uri = printf(fmt, repo)",89],["let repo = a:repo",91]],"useCount":13846},{"word":"report","context":[["let &report = 10000",67],["let &report  = l:save_rep",128],["set report=99999",109],["\" Restore the report option",107],["let old_report = &report",106],["let &report = old_report",106],["\" Set report option to a huge value to prevent informational messages",104],["let l:save_rep = &report",93],["let &report= repkeep",152],["set report=10",59]],"useCount":2095},{"word":"require","context":[["if line =~# '\\<\\(require\\|load\\)\\s*(\\s*$'",47],["\" dashes are very common, and in position that require",44],["let res = s:findit('\\v\\s*<require\\s*\\(=\\s*File.dirname\\(__FILE__\\)\\s*\\+\\s*[:'.\"'\".'\"](\\f+)>.=',expand('%:h').'/\\1')",49],["let res = s:findamethod('require','\\1')",49],["require 'thread'",91],["require 'timeout'",91],["require 'fileutils'",93],["call vundle#config#require(bundles)",43],["call vundle#config#require([b])",42],["let s:terminal_italic=1 \" TODO: could refactor to not require this at all",49]],"useCount":1982},{"word":"required","context":[["call vundle#end()            \" required",87],["filetype plugin indent on    \" required",86],["'PlugClean required.']",79],["call s:throw('file or blob required')",77],["\\ 'PlugClean required.'], \"\\n\")",89],["return s:err('Argument missing: plugin name(s) required')",89],["[false, [data.chomp, \"PlugClean required.\"].join($/)]",90],["\"PlugClean required.\"].join($/)]",90],["return s:error(\"E471: Argument required\")",97],["\" let Vundle manage Vundle, required",102]],"useCount":2393},{"word":"res","context":[["if res != \"\"|return res|endif",605],["\\ res)",157],["if res != \"\"|return res|endif",605],["return res",603],["let res = []",300],["if res != \"\"|return res.\".rb\"|endif",196],["if res != \"\"|return res.\".rb\"|endif",196],["if res != \"\"|return res.\"\\n\".s:findview(res)|endif",177],["if res != \"\"|return res.\"\\n\".s:findview(res)|endif",177],["if res != \"\"|return res.\"\\n\".s:findview(res)|endif",177]],"useCount":8426},{"word":"reset","context":[["let reset += [filename]",76],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["syntax reset",4245],["return 'Git reset --patch'",76],["if !empty(reset)",76],["let reset = []",76],["let cmd = ['reset','-q','--',filename]",75],["call repo.git_chomp_in_tree('reset','-q')",70],["let reset += [split(filename,' -> ')[1]]",75],["call s:notifiers.reset(g:SyntasticLoclist.current())",62]],"useCount":6165},{"word":"restore","context":[["let restore .= '|call setwinvar(bufwinnr('.bufnr.'),\"&wrap\",1)'",73],["\" restore 'cpo'",149],["exe l:restore",148],["let l:restore = s:SavePos()",105],["\" Clean up: restore previous search history, and cursor position",94],["let w:fugitive_diff_restore = restore",80],["let l:restore =  s:SavePos()",64],["let w:fugitive_leave = restore",68],["let restore = 'call setwinvar(bufwinnr('.bufnr.'),\"&scrollbind\",0)'",73],["let restore .= '|call setwinvar(bufwinnr('.bufnr.'),\"&foldenable\",1)'",73]],"useCount":3240},{"word":"result","context":[["let result = s:DB_runCmd(cmd, output, \"\")",152],["let result = {}",179],["return l:result",190],["call eclim#util#Echo(result)",194],["let result = []",462],["return result",2293],["let result = g:dbext_dbi_result",176],["self.write(Action.DONE, self.name, result[-1:])",158],["let result = ''",156],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156]],"useCount":17403},{"word":"results","context":[["return results",393],["let results = []",294],["silent! let results = system(cmd)",89],["return v:shell_error == 0 ? results : def",87],["if type(results) != g:LIST_TYPE",82],["let results += heads",77],["let results += matches",77],["\" assignment out entirely and get the same results.",70],["\" Highlight search results",67],["\" Like pathogen#glob(), only limit the results to directories.",67]],"useCount":3982},{"word":"ret","context":[["let ret = []",259],["return v:shell_error ? '' : substitute(ret, '\\n$', '', '')",90],["let ret = 0",267],["let ret = a:str",308],["return ret",1304],["let ret = {}",130],["if !ret",124],["let ret= v:shell_error",116],["let ret = 1",113],["return l:ret",107]],"useCount":7524},{"word":"retu","context":[["retu lines",95],["retu 0",243],["if !s:focus | retu | en",230],["retu -1",97],["retu 1",345],["retu",252],["retu l:haveTag",96],["retu str",69],["retu s:id",67],["if !s:dosigns() | retu | en",60]],"useCount":5746},{"word":"return","context":[["return ''",9392],["return",34244],["return 1",10224],["return 0",16511],["return -1",5635],["return 'echoerr v:errmsg'",1463],["return {}",1714],["return result",2293],["return \"\"",3896],["return []",4552]],"useCount":236925},{"word":"returns","context":[["\" returns the actual color level for the given color index",120],["\" returns the actual grey level represented by the grey index",120],["\" returns an approximate grey index for the given grey level",120],["\" returns the palette index to approximate the 'rrggbb' hex string",118],["\" returns an approximate color index for the given color level",120],["\\ 'returns': [0, 1] })",89],["\\ 'returns': [0] })",80],["\" returns the palette index for the given R/G/B color indices",120],["\" returns the palette index to approximate the given R/G/B color levels",120],["\" returns the palette index for the given grey index",120]],"useCount":4165},{"word":"rev","context":[["elseif a:rev =~# '^[~^]'",77],["return rev",134],["elseif a:rev =~# '^-'",77],["if a:rev =~# '^:[0-3]$'",77],["let file = a:rev",77],["catch /^fugitive: rev-parse/",77],["let rev = 'HEAD'",79],["let file = a:rev.self.path(':')",77],["if rev != ''",90],["let rev = matchstr(self.spec(),'^fugitive://.\\{-\\}//\\zs.*')",146]],"useCount":6014},{"word":"reverse","context":[["CSAHi DiffText term=reverse cterm=bold ctermbg=196 ctermfg=fg gui=bold guibg=#ff0000 guifg=fg",120],["call <SID>X(\"StatusLine\", s:window, s:yellow, \"reverse\")",149],["call <SID>X(\"PMenuSel\", s:foreground, s:selection, \"reverse\")",194],["call <SID>X(\"StatusLineNC\", s:window, s:foreground, \"reverse\")",156],["CSAHi TabLineFill term=reverse cterm=reverse ctermbg=bg ctermfg=fg gui=reverse guibg=bg guifg=fg",168],["CSAHi TabLineFill term=reverse cterm=reverse ctermbg=bg ctermfg=fg gui=reverse guibg=bg guifg=fg",168],["CSAHi TabLineFill term=reverse cterm=reverse ctermbg=bg ctermfg=fg gui=reverse guibg=bg guifg=fg",168],["CSAHi SpellCap term=reverse cterm=undercurl ctermbg=bg ctermfg=21 gui=undercurl guibg=bg guifg=fg guisp=#0000ff",177],["CSAHi SpellRare term=reverse cterm=undercurl ctermbg=bg ctermfg=201 gui=undercurl guibg=bg guifg=fg guisp=#ff00ff",177],["CSAHi SpellBad term=reverse cterm=undercurl ctermbg=bg ctermfg=196 gui=undercurl guibg=bg guifg=fg guisp=#ff0000",180]],"useCount":8020},{"word":"rgb","context":[["delf s:rgb",60],["fun! s:rgb(rgb)",55],["exec \"hi \" . a:group . \" guibg=#\" . a:bg . \" ctermbg=\" . <SID>rgb(a:bg)",229],["fun <SID>rgb(rgb)",252],["exec \"hi \" . a:group . \" guifg=#\" . a:fg . \" ctermfg=\" . <SID>rgb(a:fg)",229],["delf <SID>rgb",261],["let l:g = (\"0x\" . strpart(a:rgb, 2, 2)) + 0",308],["let l:r = (\"0x\" . strpart(a:rgb, 0, 2)) + 0",308],["let l:b = (\"0x\" . strpart(a:rgb, 4, 2)) + 0",308],["fun <SID>rgb(rgb)",252]],"useCount":3107},{"word":"right","context":[["let right = s:Right({'alt': 1})",84],["\" continues beyond the right of the screen",47],["\" Limit to the right filetypes.  But error on the liberal side",49],["\" put the cursor right after the quote",66],["\" swap them: http://items.sjbach.com/319/configuring-vim-right",66],["let right = s:Right()",84],["let lenRight = strlen(right)",69],["while left < right",73],["let right = ''",116],["return [a:node.left, a:node.right]",78]],"useCount":7681},{"word":"root","context":[["call remove(b:rails_abbreviations,root)",94],["call add(root.child, deepcopy(current))",94],["return root",353],["if has_key(b:rails_abbreviations,root)",94],["let url = root . '/blob/' . commit . '/' . path",73],["return root . '/commits/' . branch",73],["let url = root",73],["let root = fnamemodify(root, ':h')",74],["let previous = root",74],["let root = fnamemodify(root, ':h')",74]],"useCount":6571},{"word":"rtp","context":[["set rtp+=~/.vim/bundle/vundle/",142],["set rtp+=~/.vim/bundle/Vundle.vim",157],["for dir in pathogen#split(&rtp)",103],["let home = s:path(split(&rtp, ',')[0]) . '/plugged'",90],["let rtp = s:rtp(g:plugs[name])",178],["execute 'set rtp-='.s:first_rtp",90],["elseif !empty(&rtp)",90],["return s:dirpath(a:spec.dir . get(a:spec, 'rtp', ''))",90],["let rtp = s:rtp(g:plugs[name])",178],["function! s:rtp(spec)",180]],"useCount":5796},{"word":"ruby","context":[["let b:current_syntax = \"ruby\"",72],["syn include @rubyTop syntax/ruby.vim",72],["\" URL:\t\t\thttp://vim-ruby.rubyforge.org",72],["\" ruby highlighting \"{{{",73],["\\ 'filetype': 'ruby',",84],["if !executable(\"ruby\")",94],["\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby",101],["ruby << EOF",219],["if has('ruby')",151],["\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby",101]],"useCount":5892},{"word":"run","context":[["\" This enables the coresponding base16-shell script to run so that",177],["def run(self):",176],["\" Once you've updated the list of plugin, you can run vundle update by issuing",72],["\" We can't grab the namespace so only run tasks at the start of the line",49],["\"go up the tree till we find a node that will be visible or till we run",44],["func! vundle#installer#run(func_name, name, ...) abort",42],["\" Open this file in Vim and run :source % to restore your session.",35],["redraws! | echon \"vim-go: [run] \" | echohl ErrorMsg | echon \"FAILED\"| echohl None",35],["redraws! | echon \"vim-go: [run] \" | echohl Function | echon \"SUCCESS\"| echohl None",35],["\"  run : redirect output to an output buffer",33]],"useCount":2451},{"word":"running","context":[["while self.running:",83],["take1 = proc { mtx.synchronize { running && all.shift } }",90],["let job.running = 0",198],["self.running = False",83],["if !s:jobs[name].running",88],["break unless running",89],["\"if we are running windows then slap a drive letter on the front",90],["running = false",90],["running = true",90],["} if running",90]],"useCount":2657},{"word":"runtime","context":[["runtime! syntax/html.vim",281],["runtime! syntax/c.vim",97],["runtime! ftplugin/html.vim ftplugin/html_*.vim ftplugin/html/*.vim",94],["runtime! indent/html.vim",90],["\" set the runtime path to include Vundle and initialize",90],["runtime! plugin/syntastic/*.vim",67],["runtime plugin/vcscommand.vim",57],["runtime! macros/rails.vim",49],["runtime! indent/xml.vim",48],["runtime! syntax/css.vim",44]],"useCount":3158},{"word":"rv","context":[["call setreg('\"', rv, rt)",30],["return rv",379],["\" TLogVAR rv",202],["call s:InsertSelectedItems(rv, item)",42],["\" TLogVAR world.rv",39],["let world = tlib#agent#SuspendToParentWindow(world, world.rv)",37],["return world.rv",34],["let world.rv = world.CurrentItem()",34],["let rv = 0",31],["\"Maintainer:  Maksim Ryzhikov <rv.maksim at gmail dot com>",25]],"useCount":2130},{"word":"s","context":[["setlocal formatlistpat=^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t\\ ]\\\\s*",874],["if s:l < 1 | let s:l = 1 | endif",1115],["if s:l < 1 | let s:l = 1 | endif",1115],["exe s:l",1115],["let s:cpo_save = &cpo",1788],["unlet s:cpo_save",1900],["let &cpo = s:cpo_save",1932],["unlet s:save_cpo",4937],["let s:save_cpo = &cpo",5502],["let &cpo = s:save_cpo",5583]],"useCount":856892},{"word":"same","context":[["\" assignment out entirely and get the same results.",70],["\"        Macro           same as Define",69],["\" cCppBracket: same as cParen but ends at end-of-line; used in cDefine",68],["\" Super useful when editing files in the same directory",56],["\" several Tab workspaces and want to open two windows into the same file.",46],["\" same as define",46],["\"if the paths are the same then clearly we return 0",45],["\"They are equal if the paths they represent are the same",45],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["\" cCppString: same as cString, but ends at end of line",120]],"useCount":2785},{"word":"save_cpo","context":[["let &cpo = save_cpo",52],["let g:save_cpo = &cpo",21],["unlet! s:save_cpo",45],["let save_cpo = &cpo",51],["let s:save_cpo = &cpoptions",77],["let s:save_cpo=&cpo",103],["let &cpo = s:save_cpo",5583],["let s:save_cpo = &cpo",5502],["unlet s:save_cpo",4937],["let &cpoptions = s:save_cpo",69]],"useCount":16481},{"word":"scope","context":[["\" scope: public",74],["for scope in [bufnr('%')] + split(&ft, '\\.') + ['_']",31],["\" Extract the tag scope from the tag text",33],["elseif scope =~? 'b'",29],["let scope = ''",30],["\" scope: local",108],["\" mode (detected with the script scope s:vmode variable). It also allows for",66],["\" Add the tag scope, if it is available and is configured. Tag",64],["\" scope is the last field after the 'line:<num>\\t' field",64],["\" Extract the tag scope/prototype",64]],"useCount":3867},{"word":"script","context":[["nnoremap <silent><script><buffer>",152],["\" This enables the coresponding base16-shell script to run so that",177],["\" Z-Shell script",59],["\" mode (detected with the script scope s:vmode variable). It also allows for",66],["let max = len(a:script)",70],["\" http://www.vim.org/scripts/script.php?script_id=2937",72],["\" http://www.vim.org/scripts/script.php?script_id=3034",73],["\" Vim script",88],["\" Vim completion script",88],["\" URL:         http://github.com/kchmck/vim-coffee-script",106]],"useCount":7208},{"word":"scripts","context":[["let bundles = vundle#scripts#bundle_names(map(copy(g:bundles), 'v:val.name_spec'))",36],["let scripts = [",40],["let names = vundle#scripts#bundle_names(map(copy(bundles), 'v:val.name_spec'))",41],["let names = vundle#scripts#bundle_names(map(copy(x_dirs), 'fnamemodify(v:val, \":t\")'))",42],["\" :colorscheme works in terminals supported by base16-shell scripts",177],["let repo = 'vim-scripts/'. repo",89],["\" http://www.vim.org/scripts/script.php?script_id=3034",73],["\" http://www.vim.org/scripts/script.php?script_id=2937",72],["\" tcsh scripts",45],["call vundle#scripts#view('clean', headers, names)",42]],"useCount":3119},{"word":"search","context":[["setlocal rightleftcmd=search",862],["call search('^# .*:$','W')",220],["\" Preparation: save last search, and cursor position.",95],["if !search('^# .*:\\n# .*\"git add .*\\n#\\n\\|^# Untracked files:$','W')",110],["let beg = search('\\%('.&l:define.'\\).*'.src.'\\>',\"w\")",98],["\" Clean up: restore previous search history, and cursor position",94],["call search('\\(^[x-] \\)\\@<=[^:]\\+:', a:flags)",88],["if matcher.search(line) is not None:",79],["\" search",73],["call search('\\*/', 'W')",72]],"useCount":10796},{"word":"section","context":[["let [filename, section] = s:stage_info(line('.'))",146],["elseif section ==# 'untracked'",56],["elseif getline('.') =~# '^# .*:$' && section ==# 'unstaged'",56],["function! s:section(flags)",90],["nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>",90],["elseif section ==# 'unstaged'",90],["nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>",90],["if section ==# 'staged'",112],["elseif section ==# 'staged'",168],["let [filename, section] = s:stage_info(lnum)",112]],"useCount":2909},{"word":"see","context":[["\" ARGS... are either (see also |tcomment#Comment()|):",78],["\" highlight delims, see the plugin referenced above",73],["\" Treat True and False specially, see the plugin referenced above",73],["\" We also check to see if user has set solarized (force use of the",72],["\" see :h vundle for more details or wiki for FAQ",68],["\"           (see this url for latest release & screenshots)",66],["\"             see Additional:",60],["\"if the user has specified forceNesting then we check to see if we",46],["\"check to see if we have the root node",44],["call add(msgs, \"Press 'D' to see the updated changes.\")",89]],"useCount":2856},{"word":"select","context":[["exe \"syn keyword rubyRailsHelperMethod \".s:gsub(s:helpermethods(),'<%(content_for|select)\\s+','')",42],["call s:echo(\"select a node first\")",71],["\" screenshots which will help you select either the light or dark background.",70],["<span class=\"select-menu-item-icon octicon octicon-check\"></span>",54],["syn match rubyRailsHelperMethod '\\<select\\>\\%(\\s*{\\|\\s*do\\>\\|\\s*(\\=\\s*&\\)\\@!'",49],["<li class=\"select-menu-tab\">",46],["\"    \"select \" + \" * from \" + \" some_table \";",46],["<div class=\"select-menu-no-results\">Nothing to show</div>",45],["</div> <!-- /.select-menu-item -->",43],["\\ \"select * \".",40]],"useCount":3242},{"word":"selected","context":[["\" write (selected portion of) file to temporary",41],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenExpl.\": explore selected dir\\n\"",42],["\"If the 'up a dir' line was selected then the path to the parent of the",44],["\"A path if a node was selected, {} if nothing is selected.",44],["\"A path if a node was selected, {} if nothing is selected.",44],["\" When you press <leader>r you can search and replace the selected text",49],["\" changes the current root to the selected one",50],["\" selected item in popup",62],["\" Clear previously selected name",69],["let @h=@h.\"\\\"    selected dir\\n\"",92]],"useCount":3110},{"word":"selection","context":[["let &selection = 'inclusive'",67],["call <SID>X(\"PMenuSel\", s:foreground, s:selection, \"reverse\")",194],["call <SID>X(\"PMenu\", s:foreground, s:selection, \"none\")",194],["call <SID>X(\"SpecialKey\", s:selection, \"\", \"\")",186],["call <SID>X(\"Visual\", \"\", s:selection, \"\")",180],["call <SID>X(\"NonText\", s:selection, \"\", \"\")",177],["call <SID>X(\"MatchParen\", \"\", s:selection, \"\")",169],["let &selection = sel_save",165],["let sel_save = &selection",128],["call <SID>X(\"LineNr\", s:selection, \"\", \"\")",119]],"useCount":4041},{"word":"self","context":[["self.write(Action.DONE, self.name, result[-1:])",158],["self.write(Action.DONE, self.name, result[-1:])",158],["self.args = args",158],["def run(self):",176],["for i in self.children",180],["let f = self.name()",236],["self.lock = lock",237],["with self.lock:",237],["let makeprg = self.makeprgBuild({",430],["return self",451]],"useCount":69717},{"word":"sep","context":[["let sep = pathogen#slash()",110],["if sep != \"\"",64],["let sep = (a:0 == 0) ? a:sep : a:1",79],["let sep = (a:0 == 0) ? a:sep : a:1",79],["let sep = pathogen#separator()",163],["let matches = split(glob(path.sep.pattern),\"\\n\")",52],["call map(matches,'isdirectory(v:val) ? v:val.sep : v:val')",52],["let sep = s:separator()",50],["let f = getcwd().sep.f",48],["let sep = matchstr(f,'^[^\\\\/]\\{3,\\}\\zs[\\\\/]')",48]],"useCount":2011},{"word":"set","context":[["set splitbelow splitright",678],["set winheight=1 winwidth=1",670],["\" vim: set et sts=4 sw=4:",659],["set cpo&vim",8126],["set background=dark",3909],["\" vim: set sw=4 sts=4 et fdm=marker:",1085],["set number",974],["set expandtab",892],["set background=light",755],["set t_Co=256",730]],"useCount":82184},{"word":"setf","context":[["\\   setf xpm2 |",58],["\\   setf smil |",58],["setf mmix",58],["setf chill",58],["setf c",59],["setf ch",86],["setf progress",87],["setf vim-plug",90],["setf vim",93],["setf perl",110]],"useCount":17223},{"word":"setl","context":[["setl noswapfile",69],["setl nomod",73],["setl modifiable",78],["setl ma",79],["setl nomodified",84],["setl cursorline",89],["setl ma noro",92],["setl ff=unix",119],["let b:undo_ftplugin = \"setl com< cms< fo<\"",129],["setl nomodifiable",69]],"useCount":2867},{"word":"setline","context":[["call setline(currentLine, theLine)",161],["call setline(4, getline(4) . 'Done!')",90],["call setline(1, 'Finished. '.ecnt.' error(s).')",90],["call setline(a:line, '[' . s:lpad(a:bar, a:total) . ']')",90],["call setline(a:lnum, substitute(line, ' (not loaded)$', '', ''))",89],["call setline(1, (s:update.pull ? 'Updating' : 'Installing').",88],["call setline(1, 'Updated. Elapsed time: ' . split(reltimestr(reltime(s:update.start)))[0] . ' sec.')",88],["call setline(lnum, line)",71],["call setline('$', ' ')",69],["call setline(a:topline, theLine)",67]],"useCount":3189},{"word":"setlocal","context":[["setlocal modifiable",2639],["setlocal nomodifiable",2090],["setlocal noswapfile",1437],["setlocal foldcolumn=0",1126],["setlocal nospell",1096],["setlocal noreadonly",1077],["setlocal nolist",1034],["setlocal nolisp",1017],["setlocal expandtab",993],["setlocal nopreviewwindow",949]],"useCount":116641},{"word":"setpos","context":[["call setpos('.', save_cursor)",171],["call setpos('.', pos)",453],["call setpos('.', curpos)",168],["call setpos('.', [0, block[0][0], block[0][1], 0])",128],["call setpos('.',pos)",115],["silent! call setpos('.', orgpos)",112],["call setpos('.', [0, pos1[0], pos1[1], 0])",105],["call setpos('.', [0, sn, 1, 0])",104],["call setpos('.', [0, block[0][0]-1, block[0][1], 0])",72],["call setpos('.', savedpos)",72]],"useCount":2997},{"word":"settings","context":[["\"hi CTagsGlobalVariable -- no settings --",140],["\"hi CTagsImport -- no settings --",140],["\"hi CTagsGlobalConstant -- no settings --",140],["\" This contains the defaults settings for all database types",167],["\"hi clear -- no settings --",145],["\"hi Union -- no settings --",142],["\"hi EnumerationValue -- no settings --",141],["\"hi EnumerationName -- no settings --",141],["\"hi CTagsMember -- no settings --",141],["\"hi LocalVariable -- no settings --",140]],"useCount":9155},{"word":"sfile","context":[["so <sfile>:p:h/c.vim",56],["return matchstr(expand('<sfile>'), '<SNR>\\zs\\d\\+\\ze__SID$')",278],["let v:this_session=expand(\"<sfile>:p\")",241],["let s:sx = expand(\"<sfile>:p:r\").\"x.vim\"",241],["let g:colors_name = expand(\"<sfile>:t:r\")",180],["return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '<SNR>\\d\\+_'),''))",164],["\\ escape(expand('<sfile>'), ' ')",155],["so <sfile>:p:h/html.vim",126],["let s:me = resolve(expand('<sfile>:p'))",89],["let s:MODE_NAME = expand('<sfile>:t:r')",60]],"useCount":3150},{"word":"sh","context":[["if &sh =~ 'cmd\\.exe'",37],["\\ 'filetype': 'sh',",39],["\\ ['sh', '$PLUG_HOME',",42],["let [sh, shrd] = [&shell, &shellredir]",44],["set shell=/bin/sh",46],["set shell=sh",59],["let job.result  = jid < 0 ? 'sh is not executable' :",66],["let [&shell, &shellredir] = [sh, shrd]",92],["set shell=sh shellredir=>%s\\ 2>&1",68],["let argv = [ 'sh', '-c',",66]],"useCount":2298},{"word":"shell","context":[["\\ 'shell',",62],["if &shell =~ 'cmd\\.exe'",63],["set shell=sh shellredir=>%s\\ 2>&1",68],["set shell=/bin/bash",70],["let [&shell, &shellredir] = [sh, shrd]",92],["if &shell =~# 'cmd'",118],["if &shell =~# 'csh'",160],["\"   let g:base16_shell_path=base16-builder/output/shell/",177],["\" :colorscheme works in terminals supported by base16-shell scripts",177],["\" This enables the coresponding base16-shell script to run so that",177]],"useCount":4199},{"word":"shell_error","context":[["if v:shell_error",1585],["if v:shell_error != 0",598],["if v:shell_error == 0",216],["if !v:shell_error",135],["let ret= v:shell_error",116],["return v:shell_error",105],["return v:shell_error ? '' : substitute(ret, '\\n$', '', '')",90],["let job.error = v:shell_error != 0",88],["return v:shell_error == 0 ? results : def",87],["if(v:shell_error)",101]],"useCount":4470},{"word":"shellescape","context":[["\" A less noisy shellescape()",38],["exe s:netrw_silentxfer.\"%!\".s:netrw_ftp_cmd.\" -i \".shellescape(g:netrw_machine,1).\" \".shellescape(g:netrw_port,1)",32],["exe s:netrw_silentxfer.\"%!\".s:netrw_ftp_cmd.\" -i \".shellescape(g:netrw_machine,1)",32],["let toReturn = shellescape(toReturn)",37],["\"shellescape()",37],["\" A less noisy shellescape(expand())",38],["let cmd = substitute(cmd, '%URL%', '\\=shellescape(a:url)', 'g')",51],["\\ shellescape(filename)))",67],["\" FIXME: Escaping is incomplete. We could use shellescape with eval,",89],["return shellescape(a:arg)",125]],"useCount":2267},{"word":"shellslash","context":[["if exists('+shellslash')",157],["if nr < 0 && exists('+shellslash') && ! &shellslash",96],["\" \\ on Windows unless shellslash is set, / everywhere else.",68],["return s:shellslash(fnamemodify(retval,':p'))",73],["call map(matches,'s:shellslash(v:val)')",75],["return s:shellslash(bufname == '' ? '' : fnamemodify(bufname,':p'))",78],["return !exists(\"+shellslash\") || &shellslash ? '/' : '\\'",84],["return !exists(\"+shellslash\") || &shellslash ? '/' : '\\'",84],["set shellslash",95],["if nr < 0 && exists('+shellslash') && ! &shellslash",96]],"useCount":2769},{"word":"shiftwidth","context":[["let ind = ind + &shiftwidth",83],["if exists('*shiftwidth')",86],["return &shiftwidth",87],["let ind = ind - &shiftwidth",98],["\" vim:tabstop=2:shiftwidth=2:expandtab:foldmethod=marker:textwidth=79",111],["setlocal shiftwidth=8",246],["set shiftwidth=2",392],["setlocal shiftwidth=2",559],["setlocal shiftwidth=4",770],["set shiftwidth=4",588]],"useCount":4272},{"word":"short","context":[["\\ {'short' : 'd', 'long' : 'macros',      'fold' : 1, 'stl' : 0},",103],["\\ {'short' : 'f', 'long' : 'functions', 'fold' : 0, 'stl' : 1}",150],["syn keyword\tcType\t\tint long short char void",54],["\\ 'v:val.fields.kind ==# kind.short')",56],["\\ {'short' : 'f', 'long' : 'functions',   'fold' : 0, 'stl' : 1},",75],["\\ {'short' : 'p', 'long' : 'procedures', 'fold' : 0, 'stl' : 1}",75],["\\ {'short' : 's', 'long' : 'structs',     'fold' : 0, 'stl' : 1},",78],["\\ {'short' : 'c', 'long' : 'classes',     'fold' : 0, 'stl' : 1},",100],["\\ {'short' : 'g', 'long' : 'enums',       'fold' : 0, 'stl' : 1},",103],["\\ {'short' : 'e', 'long' : 'enumerators', 'fold' : 0, 'stl' : 0},",103]],"useCount":7279},{"word":"should","context":[["\" method.  We should verify by checking for an argument, but that's",49],["\" fugitive.vim - A Git wrapper so awesome, it should be illegal",75],["\" Expression used to check whether we should skip a match with searchpair().",59],["\" Configure backspace so it acts as it should act",56],["\" Follow stuff should be highligh within a special context",55],["\" This should be before cErrInParen to avoid problems with #define ({ xxx })",54],["\" color terminals (t_co=8, such as OS X Terminal.app) and should only be used",52],["\" Classes should always be in .rb files",49],["\"Returns a string that specifies how the path should be represented as a",45],["\"returns true if this path should be ignored",45]],"useCount":4389},{"word":"show","context":[["return g:fugitive_git_executable . args . ' show'",53],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156],["let cmd = ['--no-pager', 'blame', '--show-number'] + a:args",76],["\" Always show the status line",69],["call s:ReplaceCmd(s:repo().git_command('show','--no-color',hash))",68],["\" (the numbers don't show up) so I made it a VimEnter event",62],["call g:SyntasticLoclist.current().show()",61],["\" Type ,hl to toggle highlighting on/off, and show current value.",60],["\"Always show current position",55],["if filter(copy(a:args),'v:val !~# \"^\\\\%(--root\\|--show-name\\\\|-\\\\=\\\\%([ltfnsew]\\\\|[MC]\\\\d*\\\\)\\\\+\\\\)$\"') != []",52]],"useCount":2934},{"word":"sid","context":[["delf <sid>cterm",291],["delf <sid>gui",291],["call <sid>hi(\"SpecialKey\",    s:gui03, \"\", s:cterm03, \"\", \"\")",543],["delf <sid>hi",306],["call <sid>hi(\"rubyRegexp\",                  s:gui0C, \"\", s:cterm0C, \"\", \"\")",275],["call <sid>hi(\"Underlined\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276],["call <sid>hi(\"WarningMsg\",    s:gui08, \"\", s:cterm08, \"\", \"\")",276],["call <sid>hi(\"Bold\",          \"\", \"\", \"\", \"\", \"bold\")",276],["call <sid>hi(\"TooLong\",       s:gui08, \"\", s:cterm08, \"\", \"\")",276],["fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)",276]],"useCount":39550},{"word":"sil","context":[["sil! keepj %d",63],["sil! cal ctrlp#statusline()",67],["sil! norm! zvzz",77],["sil! let @/ = keepregslash",88],["exe \"sil! keepj \".w:netrw_bannercnt",61],["sil! let @+ = keepregstar",88],["sil! let @* = keepregstar",88],["sil!exe 'sil!return \"' . key . '\"'",101],["sil! noa winc p",54],["sil!exe 'sil!return \"' . key . '\"'",101]],"useCount":2653},{"word":"silent","context":[["silent execute '1,'.last.'delete_'",220],["silent write!",150],["silent! normal! zE",933],["silent! edit!",434],["silent only",244],["silent exe 'bwipe ' . s:wipebuf",213],["silent echo output",172],["silent! bw! %",157],["nnoremap <silent><script><buffer>",152],["silent execute lnum",152]],"useCount":49352},{"word":"skip","context":[["\\ skip=\"([^)]*)\"",73],["skip  = 'Already installed'",90],["[true, skip]",90],["\\ skip=\"<<<[^>]*>>>\"",101],["\\ skip=\"<<[^>]*>>\"",101],["\\ skip=\"«[^»]*»\"",114],["\\ skip=\"<[^>]*>\"",116],["\" If the file doesn't support tag listing, skip it",164],["syn region\tcIncluded\tdisplay contained start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+",73],["return skip",72]],"useCount":5563},{"word":"skipwhite","context":[["syn match markdownUrl \"\\S\\+\" nextgroup=markdownUrlTitle skipwhite contained",35],["syn match\tmrxvtrcOptions\tcontained skipwhite",33],["syn match railslogEscapeMN    '\\e\\[[0-9;]*m' nextgroup=railslogModelNum,railslogEscapeMN skipwhite contained",38],["\\ nextgroup=@nanorcBGSpec skipwhite",32],["syn match   pythonDecorator\t\"@\" display nextgroup=pythonFunction skipwhite",39],["\\ skipwhite skipnl",204],["\\ skipwhite",443],["syn match railslogEscapeMN    '\\e\\[[0-9;]*m' conceal nextgroup=railslogModelNum,railslogEscapeMN skipwhite contained",38],["syn match   pythonDecorator\t\"@\" display nextgroup=pythonDottedName skipwhite",38],["\\                           skipwhite",36]],"useCount":3555},{"word":"snippet","context":[["let current.snippet = join(lines, \"\\n\")",48],["if pumvisible() \" Update snippet if completion is used, or deal with supertab",35],["let lines = split(snippet, \"\\n\")",35],["\" update current buffer / split window / edit snippet file",42],["let snippet = ''",45],["let snippet = current.snippet",47],["let snippet = current.snippet",47],["if len(snippet) > 0",35],["let snippet = substitute(snippet, '|', '${cursor}', 'g')",48],["let snippet = substitute(snippet, '|', '${cursor}', 'g')",48]],"useCount":2383},{"word":"snippets","context":[["\" Some of these were cherry picked from the TextMate snippets",49],["\" SuperTab like snippets behavior.",53],["\\        'snippets': {",180],["Plug 'honza/vim-snippets'",82],["\" snippets",80],["Plugin 'honza/vim-snippets'",70],["\"   Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'",67],["\"   \" Group dependencies, vim-snippets depends on ultisnips",67],["let snippets = emmet#getResource(type, 'snippets', {})",63],["let snippets = emmet#getResource(type, 'snippets', {})",63]],"useCount":2161},{"word":"so","context":[["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" fugitive.vim - A Git wrapper so awesome, it should be illegal",75],["\"are set with :let, so dont escape spaces.",81],["\" :make expands '%' and '#' wildcards, so they must also be escaped",87],["so <sfile>:p:h/html.vim",126],["\" This enables the coresponding base16-shell script to run so that",177],["let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0",243],["let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0",243],["let &so = s:so_save | let &siso = s:siso_save",243],["\" furnished to do so, subject to the following conditions:",313]],"useCount":8673},{"word":"softtabstop","context":[["setlocal softtabstop=2",295],["set softtabstop=2",239],["set softtabstop=4",330],["setlocal softtabstop=4",338],["\" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker",51],["setlocal softtabstop=8",28],["set softtabstop=0",26],["setlocal softtabstop=0",712],["call self.setvar('&softtabstop',2)",24],["let &l:softtabstop = &l:shiftwidth",20]],"useCount":2302},{"word":"solarized","context":[["\" Download palettes and files from: http://ethanschoonover.com/solarized",75],["\"       $ git clone git://github.com/altercation/vim-colors-solarized.git",66],["\"     colorscheme solarized",140],["colorscheme solarized",253],["Plug 'altercation/vim-colors-solarized'",114],["\\ g:airline#themes#solarized#palette.normal.airline_warning",86],["Plugin 'altercation/vim-colors-solarized'",75],["\" 2.  Move `solarized.vim` to your `.vim/colors` directory.",67],["\" See the Solarized homepage at http://ethanschoonover.com/solarized for",70],["\" We also check to see if user has set solarized (force use of the",72]],"useCount":3191},{"word":"some","context":[["\" Define some defaults in case the included ftplugins don't set them.",86],["\" For some reason this doesn't work as a regular set command,",62],["\" set some parameters to tweak the Zenburn colours.",48],["\"   There are some options for customizing the highlighting; the recommended",38],["\"This is here because it is possible for some error messages to",45],["\"call vundle#begin('~/some/path/here')",44],["\" Nothing too fancy, just some alien fruit salad to keep you in the zone.",44],["\"   as light values, and sets background to light for some people. If you have",43],["\" In order to add some custom include directories that should be added to the",39],["\" check if the user manually set some cflags",41]],"useCount":2628},{"word":"sort","context":[["call newLoclist.sort()",56],["call loclist.sort()",56],["return sort(keys(found))",53],["return sort(keys(ret))",50],["return sort(a:list, 's:_compare')",61],["let heads += sort(split(s:repo().git_chomp(\"rev-parse\",\"--symbolic\",\"--branches\",\"--tags\",\"--remotes\"),\"\\n\"))",76],["let found = sort(s:glob_dir(g:plug_home))",90],["return sort(filter(keys(g:plugs), 'stridx(v:val, a:1) == 0 && s:is_managed(v:val)'))",88],["return map(s:sort(pairs,",61],["return sort(a:list, a:expr)",61]],"useCount":3807},{"word":"source","context":[["function! s:source.gather_candidates(args, context) \"{{{",173],["exe \"source \" . fnameescape(s:sx)",235],["return s:source",468],["let s:source = {",497],["command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif",81],["function! s:source.gather_candidates(args, context) abort \"{{{",83],["function! s:source(from, ...)",89],["\" Redistribution and use in source and binary forms, with or without",116],["call s:source(rtp, dir.'/**/*.vim')",89],["call s:source(s:rtp(plug), 'ftdetect/**/*.vim', 'after/ftdetect/**/*.vim')",89]],"useCount":8824},{"word":"space","context":[["let s:spc = g:airline_symbols.space",92],["\"remove the tree parts and the leading space",90],["\"when wanted, highlight trailing white space",89],["let escaped = substitute(list[j],'[,'.space.']\\|\\\\[\\,'.space.']\\@=','\\\\&','g')",67],["\" To handle a bug in the winmanager plugin, add a space at the",69],["if a:space && g:NERDSpaceDelims",73],["\" matched in sRGB space.",73],["let space = ''",76],["\" The difference is in whether a space is put in",76],["let space = ' '",78]],"useCount":5422},{"word":"spaces","context":[["if spaces != \"\"",51],["silent! exe '%substitute/^'.spaces.'//'",51],["let spaces = matchstr(getline(first),\"^ *\")",49],["\" 1 tab == 4 spaces",58],["\" mixed tabs and spaces",48],["\"removeLeadingSpaces: 1 if leading spaces are to be removed (leading spaces =",46],["\" Use spaces instead of tabs",65],["\" Convert a list to a path with escaped spaces for 'path', 'tag', etc.",67],["\"are set with :let, so dont escape spaces.",81],["\" Strip off trailing spaces",152]],"useCount":2939},{"word":"span","context":[["\\ 'span': [",32],["'result': \"<div>\\n\\t<span></span>\\n</div>\",",32],["'result': \"<div>\\n\\t<span></span>\\n</div>\",",32],["<span class=\"js-select-button-text hidden-select-button-text\">",33],["return s:span(a:f, a:xs)[0]",38],["return s:span(printf('!(%s)', a:f), a:xs)",44],["\" similar to Haskell's Data.List.span",44],["<span class=\"select-menu-item-icon octicon octicon-check\"></span>",54],["<span class=\"select-menu-item-icon octicon octicon-check\"></span>",54],["</span>",179]],"useCount":2039},{"word":"spec","context":[["let r = \"spec\"",136],["if rails#app().has('spec')",128],["let rev = matchstr(self.spec(),'^fugitive://.\\{-\\}//\\zs.*')",146],["call add(dirs, spec.dir)",117],["if !isdirectory(spec.dir)",91],["if has_key(spec, 'uri')",90],["for spec in values(g:plugs)",179],["function! s:rtp(spec)",180],["for [name, spec] in items(g:plugs)",180],["if isdirectory(spec.dir)",182]],"useCount":13929},{"word":"special","context":[["\"        SpecialChar     special character in a constant",69],["\"        SpecialComment  special things inside a comment",69],["\" cCommentGroup allows adding matches for special things in comments",69],["\" Flag the first zero of an octal number as something special",113],["\" Highlight special characters (those which have a backslash) differently",172],["\"       *Special         any special symbol",69],["\" need to use a special type of cString: cCommentString, which also ends on",68],["\" Follow stuff should be highligh within a special context",55],["\"  brown: #E18964  good for special",55],["\" Skip running in special buffers",67]],"useCount":2916},{"word":"specified","context":[["\"| `frozen`                | Do not update unless explicitly specified        |",40],["\" Get tag list index of the specified file",65],["\" Filename and line number are specified",66],["\" TODO: regexp engine specified",69],["\" All defaults are specified in the DB_getDefault function.",167],["\" Check if a login_script has been specified",174],["\" set default geometry if not specified",39],["\"filter out the user specified paths to ignore",45],["\"if the user has specified forceNesting then we check to see if we",46],["\" Overrides dependent on user specified values and environment \"{{{",51]],"useCount":3048},{"word":"split","context":[["let files = split(filesStr, \"\\n\")",86],["call setline(1, 'Updated. Elapsed time: ' . split(reltimestr(reltime(s:update.start)))[0] . ' sec.')",88],["return split(a:msg, \"[\\r\\n]\")",88],["split",425],["let split = split(a:path,'\\\\\\@<!\\%(\\\\\\\\\\)*\\zs,')",103],["let split = split(a:path,'\\\\\\@<!\\%(\\\\\\\\\\)*\\zs,')",103],["for dir in pathogen#split(&rtp)",103],["let tmp = split(extends, '\\s*,\\s*')",90],["let home = s:path(split(&rtp, ',')[0]) . '/plugged'",90],["return split(&rtp, '\\\\\\@<!,')",89]],"useCount":16293},{"word":"sql","context":[["return s:DB_ASA_execSql(sql)",44],["let sql =  ''.",51],["let sql = ''.",87],["return sql",84],["let sql = a:1",45],["let sql = sql .",66],["let sql = sql .",66],["elseif self.has_file('db/'.s:environment().'_structure.sql')",31],["\" sql language",35],["syn include @sqlTop syntax/sql.vim",39]],"useCount":2108},{"word":"start","context":[["\" At the start of the file use zero indent.",149],["\" Read the C syntax to start with",110],["\\ start=\"\\K\\k*\"",104],["if l:action == 'start'",104],["let start = 0",103],["set backspace=indent,eol,start",447],["let start -= 1",420],["return start",313],["let start = col('.') - 1",255],["\" Hit the start of the file, use zero indent.",176]],"useCount":22937},{"word":"state","context":[["\" TLogVAR world.state",97],["\"return a string representing the state of buffer according to",79],["\" Restore the previous state",66],["if world.state =~ '\\<suspend\\>'",63],["let world.state = 'redisplay'",112],["let world.state = 'exit empty'",54],["\"\t? List of any external variable, control, or other element whose state affects this procedure.",52],["return state",126],["let a:world.state = 'display'",141],["let a:world.state = 'redisplay'",177]],"useCount":4846},{"word":"status","context":[["call spec.do({ 'name': name, 'status': status, 'force': a:force })",89],["call spec.do({ 'name': name, 'status': status, 'force': a:force })",89],["command! -nargs=0 -bar PlugStatus  call s:status()",89],["let status = installed ? 'installed' : (updated ? 'updated' : 'unchanged')",89],["function! s:status()",90],["return status",103],["let status = ''",83],["let status .= ':' . s:buffer().commit()[0:7]",75],["return '[Git'.status.']'",74],["return ',GIT'.status",74]],"useCount":4635},{"word":"statusline","context":[["setlocal statusline=%!airline#statusline(1)",68],["setlocal statusline=%!airline#statusline(1)",68],["return lightline#statusline(0)",69],["if &statusline =~# '%[MRHWY]' && &statusline !~# '%[mrhwy]'",75],["if &statusline =~# '%[MRHWY]' && &statusline !~# '%[mrhwy]'",75],["setlocal statusline=",747],["set statusline+=%*",137],["sil! cal ctrlp#statusline()",67],["set statusline+=%#warningmsg#",122],["set statusline+=%{SyntasticStatuslineFlag()}",107]],"useCount":3205},{"word":"stl","context":[["let stl = s:builder.build()",62],["\\ {'short' : 'f', 'long' : 'functions', 'fold' : 0, 'stl' : 1}",150],["\\ {'short' : 'g', 'long' : 'enums',       'fold' : 0, 'stl' : 1},",103],["\\ {'short' : 'e', 'long' : 'enumerators', 'fold' : 0, 'stl' : 0},",103],["\\ {'short' : 'd', 'long' : 'macros',      'fold' : 1, 'stl' : 0},",103],["\\ {'short' : 'c', 'long' : 'classes',     'fold' : 0, 'stl' : 1},",100],["\\ {'short' : 's', 'long' : 'structs',     'fold' : 0, 'stl' : 1},",78],["\\ {'short' : 'p', 'long' : 'procedures', 'fold' : 0, 'stl' : 1}",75],["\\ {'short' : 'f', 'long' : 'functions',   'fold' : 0, 'stl' : 1},",75],["\\ {'short' : 'm', 'long' : 'members',     'fold' : 0, 'stl' : 0},",53]],"useCount":6311},{"word":"str","context":[["let output = output.a:str",163],["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'')",157],["echomsg a:str",269],["let width = s:wcswidth(a:str)",287],["let ret = a:str",308],["let str = \"\"",345],["let str = a:str",404],["let str = a:str",404],["return str",780],["return a:str",228]],"useCount":31022},{"word":"stridx","context":[["let found = filter(found, 'stridx(v:val, f) != 0')",90],["if stridx(a:path.str(), self.path.str(), 0) ==# -1",102],["let next_idx = stridx(rem_text, \"\\n\")",64],["let attrs = attrs[stridx(attrs, match) + len(match):]",56],["if stridx(self.type, 'i') != -1",63],["let end = stridx(tag_line, '/;\"' . \"\\t\")",64],["let start = stridx(tag_line, '/^') + 2",64],["let pos = stridx(settings, ';')",68],["return sort(filter(keys(g:plugs), 'stridx(v:val, a:1) == 0 && s:is_managed(v:val)'))",88],["\\ \"v:val =~ '^- ' && stridx(v:val, 'Already up-to-date') < 0\"))",89]],"useCount":4390},{"word":"string","context":[["if eval(substitute(a:f, 'v:val', string(a:xs[i]), 'g'))",93],["function! s:throw(string) abort",84],["\\   'string':  type(''),",89],["return type(a:v) == s:TYPE.string ? a:v : join(a:v, \"\\n\") . \"\\n\"",86],["\"string",89],["\" Since the string will be enclosed in single quotes, we must first",88],["throw 'Invalid argument type (expected: string or dictionary)'",89],["\" returns the palette index to approximate the 'rrggbb' hex string",118],["if type == s:TYPE.string",178],["\" Returns the palette index to approximate the 'rrggbb' hex string",190]],"useCount":16671},{"word":"strlen","context":[["if strlen(owner) > 0",209],["return filter(args,'v:val[0 : strlen(a:A)-1] ==# a:A')",75],["if destination[0:strlen(s:repo().tree())] ==# s:repo().tree('')",75],["call filter(entries,'v:val[ 0 : strlen(a:base)-1 ] ==# a:base')",76],["let destination = destination[strlen(s:repo().tree('')):-1]",76],["call filter(heads,'v:val[ 0 : strlen(a:base)-1 ] ==# a:base')",76],["return filter(entries,'v:val[ 0 : strlen(a:base)-1 ] ==# a:base')",76],["return strlen(s)",88],["if a:0 >= 2 && strlen(a:2)",89],["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152]],"useCount":8682},{"word":"strpart","context":[["let cmds = strpart(cmds,1)",58],["let text_after = strpart(rem_text, next_idx + 1)",64],["let cmdTail = strpart(a:cmdLine, a:cursorPos)",73],["let ref = strpart(getline('.'),5)",76],["\\ printf('%-'.a:width.'s', a:str) : strpart(a:str, 0, a:width)",78],["let l:b = (\"0x\" . strpart(a:rgb, 4, 2)) + 0",308],["let l:r = (\"0x\" . strpart(a:rgb, 0, 2)) + 0",308],["let l:g = (\"0x\" . strpart(a:rgb, 2, 2)) + 0",308],["let cmdLine = strpart(a:cmdLine, 0, a:cursorPos)",145],["let settings = strpart(settings, pos + 1)",102]],"useCount":8230},{"word":"sts","context":[["\" vim: et sw=2 sts=2",74],["\" vim:set et ts=2 sts=2 sw=2 tw=0:",333],["\" vim: set ts=8 sts=4 sw=4 noexpandtab ff=unix fdm=syntax :",257],["\" vim: set sw=4 sts=4 et fdm=marker:",1085],["\" vim: set et sts=4 sw=4:",659],["\" vim: et ts=2 sts=2 sw=2",546],["\" vim:set sw=2 sts=2:",142],["\" vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2",120],["\" vim: nowrap sw=2 sts=2 ts=8:",111],["\" vim:set sw=2 sts=2 ts=8 noet:",80]],"useCount":5032},{"word":"style","context":[["function! s:h(group, style)",47],["let str = s:sub(str,':0x\\x+$','') \" For #<Object:0x...> style output",49],["\"assume c style sexy comments if possible",50],["if s:style == \"light\"",104],["\\ flow_elements + ['style'],",57],["\\ \"guifg=\"   (has_key(a:style, \"fg\")    ? a:style.fg.gui   : \"NONE\")",44],["\\ \"gui=\"     (has_key(a:style, \"gui\")   ? a:style.gui      : \"NONE\")",44],["\\ \"cterm=\"   (has_key(a:style, \"cterm\") ? a:style.cterm    : \"NONE\")",45],["\\ \"cterm=\"   (has_key(a:style, \"cterm\") ? a:style.cterm    : \"NONE\")",45],["\\ \"gui=\"     (has_key(a:style, \"gui\")   ? a:style.gui      : \"NONE\")",44]],"useCount":5191},{"word":"sub","context":[["d = esc dir.sub(%r{[\\\\/]+$}, '')",90],["let line = s:sub(line,'([:\"'.\"'\".']|\\%[qQ]=[[({<])=\\f*$','')",98],["let mat = s:sub(mat,'\\s+$','')",104],["if res =~ '#'|return s:sub(res,'#','_controller.rb#')|endif",126],["let base = s:sub(a:base,'^/','')",155],["function! s:sub(str,pat,rep) abort",85],["elsif current_uri.sub(/git::?@/, '') != uri.sub(/git::?@/, '')",79],["elsif current_uri.sub(/git::?@/, '') != uri.sub(/git::?@/, '')",79],["let ref = s:sub(ref,'^b/',myhash.':')",76],["call map(entries,'tree.s:sub(v:val,\".*\\t\",\"\")')",76]],"useCount":14518},{"word":"substitute","context":[["let command = substitute(command, '<project>', project, '')",274],["let text = substitute(text, '\\${nr}', \"\\n\", 'g')",120],["\" let stripped = substitute( stripped, '\\(\\<\\w\\+\\>\\)\\s*', '\\1', 'g' )",135],["let stripped = substitute( stripped, '\\(\\<\\w\\+\\>\\)\\s*\\(\\n\\)', '\\1\\2', '' )",136],["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'g')",154],["return substitute(a:str,'\\v\\C'.a:pat,a:rep,'')",157],["let expand = substitute(expand, '\\${cursor}', '', 'g')",158],["return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '<SNR>\\d\\+_'),''))",164],["let query = substitute(query,",203],["let command = substitute(command, '<file>', file, '')",178]],"useCount":30133},{"word":"suffix","context":[["let suffix .= ' : ' . typeinfo.kind2scope[self.fields.kind]",56],["let suffix = '.rb'",63],["execute s:Edit('edit', 0, commit.a:suffix.':'.path)",67],["for [prefix, suffix] in tests",91],["function! s:BlameJump(suffix) abort",76],["return s:findedit(cmd,prefix.f.suffix.jump)",81],["if rails#app().has_file(prefix.f.suffix)",83],["return matchstr(a:str, '^'.a:prefix.' \\zs[^:]\\+\\ze:.*'.a:suffix.'$')",89],["function! s:extract_name(str, prefix, suffix)",89],["return 'db/schema.rb'.suffix",90]],"useCount":3288},{"word":"support","context":[["\" rake routes doesn't support ACTION... yet...",37],["echo 'UltraLite does not support stored procedures'",33],["\" Vim support file to detect file types",35],["\" If the file doesn't support tag listing, skip it",164],["\" Terminals that support italics",49],["call s:SetOption(\"italic\",1) \" note that we need to override this later if the terminal doesn't support",49],["\" Drop fold if it set but vim doesn't support it.",48],["\" Vim syntax support file",41],["\" Matchit support",38],["elseif f =~ '\\<spec/support/.*\\.rb'",38]],"useCount":2687},{"word":"sure","context":[["\" Make sure we are in our window",132],["\" Make sure the tag type is a valid and supported one",62],["\" Make sure the continuation lines below do not cause problems in",115],["\"   \" Make sure you use single quotes",89],["\" Make sure the taglist window is present",67],["\" Make sure the current tag line is visible in the taglist window.",66],["\" Make sure tabs are respected",42],["\" make sure we don't comment lines that are just spaces or tabs or empty.",39],["\" Not sure what 'special character in a constant' means, but let's make it pop.",37],["\" Make sure a valid filename is supplied",36]],"useCount":2336},{"word":"sw","context":[["\" vim: et ts=2 sts=2 sw=2",546],["\" vim:set sw=2:",200],["\" vim: set ts=8 sts=4 sw=4 noexpandtab ff=unix fdm=syntax :",257],["\" vim: ts=8 sw=2",269],["\" vim: set et sts=4 sw=4:",659],["\" vim:ts=4:sw=4:et",287],["\" vim: set sw=4 sts=4 et fdm=marker:",1085],["\" vim:set et ts=2 sts=2 sw=2 tw=0:",333],["let ind = ind - &sw",548],["let ind = ind + &sw",555]],"useCount":10913},{"word":"switch","context":[["\" If the buffer is visible, switch to it",117],["\"        Conditional     if, then, else, endif, switch, etc.",69],["\"need to switch delimiters for place-holders",46],["\" switch to scratch buffer window",52],["\" window numbers.  Account for that so we switch",38],["setlocal cinwords=if,else,while,do,for,switch",886],["syn keyword\tcConditional\tif else switch",50],["\" used to switch between Hebrew and English keyboard mode.",37],["syn keyword     goConditional       if else switch select",37],["\" Save the current buffer to switch back to",34]],"useCount":2458},{"word":"syn","context":[["syn case match",2113],["syn sync clear",128],["\" Generated By: vim-syn-gen.py",129],["syn region p6Comment",135],["syn case ignore",1972],["syn clear",583],["syn sync fromstart",343],["syn region p6Match",249],["syn sync minlines=50",174],["syn match\tcParenError\tdisplay \")\"",147]],"useCount":93069},{"word":"sync","context":[["syntax sync fromstart",172],["exe 'syn sync match '.syncname.' grouphere '.grpname.' \"\\\\begin\\s*{\\s*'.a:mathzone.'\\*\\s*}\"'",72],["syn sync minlines=2000",80],["syn sync minlines=100",100],["syn sync maxlines=500",114],["syn sync minlines=10",122],["syn sync maxlines=200",123],["syn sync clear",128],["syn sync minlines=50",174],["syn sync fromstart",343]],"useCount":4520},{"word":"syntastic","context":[["\"Description: Syntax checking plugin for syntastic.vim",1331],["let makeprg = syntastic#makeprg#build({",298],["runtime! plugin/syntastic/*.vim",67],["call syntastic#log#debug(g:SyntasticDebugAutocommands,",72],["\"File:        syntastic.vim",81],["call syntastic#util#redraw(g:syntastic_full_redraws)",108],["Plugin 'scrooloose/syntastic'",129],["Plug 'scrooloose/syntastic'",169],["call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,",176],["augroup syntastic",228]],"useCount":9174},{"word":"syntax","context":[["syntax reset",4245],["\" Vim syntax file",5155],["syntax clear",3107],["\" For version 5.x: Clear all syntax items",1596],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["syntax case match",503],["syntax enable",498],["syntax case ignore",411],["syntax on",556],["\" quit when a syntax file was already loaded",373]],"useCount":62366},{"word":"syntax_on","context":[["if exists('g:syntax_on')",51],["if has('syntax') && !exists('g:syntax_on')",62],["if exists('syntax_on')",99],["if has(\"syntax\") && exists(\"g:syntax_on\") && !has(\"syntax_items\")",38],["if exists('g:syntax_on') != 1 | syntax on | endif",35],["if has(\"syntax\") && exists(\"g:syntax_on\")",32],["retu !( has('syntax') && exists('g:syntax_on') )",28],["if (has(\"syntax\") && exists(\"g:syntax_on\"))",26],["if exists(\"syntax_on\")",3421],["if skip =~ 'synID' && !(has(\"syntax\") && exists(\"g:syntax_on\"))",26]],"useCount":3912},{"word":"system","context":[["if s:installation == 'system'",87],["let ret = call('s:system', a:000)",88],["return system(s:is_win ? '('.cmd.')' : cmd)",88],["function! s:system(cmd, ...)",88],["call s:system('git reset --hard HEAD@{1} && git checkout '.s:esc(g:plugs[name].branch), g:plugs[name].dir)",88],["silent! let results = system(cmd)",89],["let out = s:system(cmd)",85],["let success = system(cmd)",90],["call s:system('rm -rf ' . s:shellesc(g:plugs[name].dir))",82],["call system(cmd)",140]],"useCount":6573},{"word":"t","context":[["\\                    .\"<body>\\n\\t${child}|\\n</body>\\n\"",210],["\" Only when an item doesn't have highlighting yet",254],["call append(\"$\", \"\\t(local to window)\")",621],["wincmd t",691],["call append(\"$\", \"\\t(local to buffer)\")",1019],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["setlocal formatlistpat=^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t\\ ]\\\\s*",874],["setlocal complete=.,w,b,u,t,i",871],["\\ \"All Files (*.*)\\t*.*\\n\"",188],["call append(\"$\", \"\\t(global or local to buffer)\")",199]],"useCount":42324},{"word":"t_Co","context":[["if has(\"gui_running\") || &t_Co == 88 || &t_Co == 256",301],["if ($TERM_PROGRAM ==? \"apple_terminal\" && &t_Co < 256)",66],["if &t_Co == 88",2034],["elseif g:solarized_termcolors != 256 && &t_Co >= 16",66],["set t_Co=16",72],["elseif has(\"gui_running\") || &t_Co == 88",80],["elseif has(\"gui_running\") || &t_Co == 256",82],["if &t_Co > 255",326],["set t_Co=256",730],["if has(\"gui_running\") || &t_Co == 88 || &t_Co == 256",301]],"useCount":5352},{"word":"tab","context":[["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTab.\": open in new tab\\n\"",92],["execute 'tabnext '.tab",230],["for winnr in range(1,tabpagewinnr(tab,'$'))",225],["for tab in [mytab] + range(1,tabpagenr('$'))",151],["let @h=@h.\"\\\" \". g:NERDTreeMapOpenInTabSilent .\": open in new tab silently\\n\"",92],["let g:UltiSnipsExpandTrigger=\"<tab>\"",75],["if getbufvar(tabpagebuflist(tab)[winnr-1],'fugitive_type') ==# 'index'",75],["let bufnr = tabpagebuflist(tab)[winnr-1]",75],["for tab in range(1,tabpagenr('$'))",78],["return \"\\<tab>\"",84]],"useCount":6779},{"word":"table","context":[["call s:DB_errorMsg('DBI: Cannot find table type position')",44],["let @h=@h.\"\\\" Bookmark table mappings~\\n\"",46],["call s:DB_errorMsg('DBI: Cannot find table name position')",44],["\"Places the cursor at the top of the bookmarks table",43],["if processed && len(state.table)",48],["return table",49],["\\ 'Invalid arguments (or job table is full)'",80],["throw \"NERDTree.BookmarkTableNotFoundError: didnt find the bookmarks table\"",40],["# my $table       = '%';",40],["throw \"NERDTree.IllegalOperationError: cant find bookmark table, bookmarks arent active\"",40]],"useCount":3233},{"word":"table_name","context":[["let table_name = rails#pluralize(s:gsub(s:sub(fnamemodify(f,':r'),'.{-}<app/models/',''),'/','_'))",44],["let table_name = s:DB_getObjectName(a:table_prefix)",70],["let table_name = s:DB_getObjectName(a:table_name)",129],["let table_name = s:DB_getObjectName(a:table_name)",129],["let owner      = s:DB_getObjectOwner(a:table_name)",135],["if table_name == ''",44],["let owner      = toupper(s:DB_getObjectOwner(a:table_name))",35],["let table_name = toupper(s:DB_getObjectName(a:table_name))",35],["let table_name = toupper(s:DB_getObjectName(a:table_name))",35],["\\ \" order by table_name\"",34]],"useCount":2216},{"word":"tabline","context":[["set tabline=%!airline#extensions#tabline#get()",37],["set tabline=%!airline#extensions#tabline#get()",37],["let s:p.tabline.right = copy(s:p.normal.right)",44],["let g:airline#extensions#tabline#fnamemod = ':t'",53],["let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}",69],["let g:airline#extensions#tabline#enabled = 1",252],["let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)",37],["let s:tabline = 'blackgravel'",36],["let s:tabline = 'blackestgravel'",36],["call airline#extensions#tabline#init(s:ext)",33]],"useCount":2180},{"word":"tabpagenr","context":[["for tab in [mytab] + range(1,tabpagenr('$'))",151],["for tabnr in range(1, tabpagenr('$'))",68],["if tabpagenr('$') == 1",70],["for tab in range(1,tabpagenr('$'))",78],["let s:plug_tab = tabpagenr()",88],["let s:pos = [tabpagenr(), winnr(), winsaveview()]",90],["let currentTab = tabpagenr()",96],["for i in range(tabpagenr('$'))",119],["let mytab = tabpagenr()",153],["for tab in range(1, tabpagenr('$'))",55]],"useCount":2259},{"word":"tabstop","context":[["let onetab = strpart('          ', 0, &tabstop)",33],["\" vi: set autoindent tabstop=4 shiftwidth=4:",35],["\" vim: tabstop=2 shiftwidth=2 foldmethod=marker",53],["set tabstop=8",76],["\" vim:tabstop=2:shiftwidth=2:expandtab:foldmethod=marker:textwidth=79",111],["setlocal tabstop=8",347],["set tabstop=2",368],["setlocal tabstop=2",457],["set tabstop=4",550],["setlocal tabstop=4",722]],"useCount":3287},{"word":"tag","context":[["\\ (empty(tag) ? 'N/A' : tag), a:spec.tag)",79],["if has_key(a:spec, 'tag')",79],["if a:spec.tag !=# tag",79],["for tag in tags",134],["\" If the file doesn't support tag listing, skip it",164],["\" Highlight the current tag",104],["\" Extract the tag type",102],["let tag = s:system_chomp('git describe --exact-match --tags HEAD 2>&1', a:spec.dir)",88],["for tag in curtags",84],["\\ (empty(tag) ? 'N/A' : tag), a:spec.tag)",79]],"useCount":16808},{"word":"taglist","context":[["\" Goto the taglist window",130],["\" Make sure the taglist window is present",67],["\" Update the taglist menu",96],["\" Update the taglist window",168],["\" Go to the taglist window",67],["\" Refresh the taglist window",67],["\" Initialize the taglist window",67],["\" Make sure the current tag line is visible in the taglist window.",66],["\" Refresh the taglist",66],["\" taglist window",65]],"useCount":6659},{"word":"tags","context":[["\" tags",77],["\" Save the number of tags for this file",64],["return self.dir('refs/tags/'.a:spec)",66],["let heads += sort(split(s:repo().git_chomp(\"rev-parse\",\"--symbolic\",\"--branches\",\"--tags\",\"--remotes\"),\"\\n\"))",76],["setlocal tags=",830],["for tag in tags",134],["\" If there are no tags for this file, then no need to proceed further",101],["\" If it is, then don't display the tags for this file",98],["let tag = s:system_chomp('git describe --exact-match --tags HEAD 2>&1', a:spec.dir)",88],["\" Invalidate the tags listed for this file",66]],"useCount":11300},{"word":"target","context":[["com = Command(cmd, None, G_TIMEOUT, callback, clean(target))",59],["call s:add_target_syntax_ON(target, 'VimwikiLink')",58],["let jump = a:target",68],["def clean(target):",79],["shutil.rmtree(target)",79],["thrd = thr.Thread(target=(lambda proc: proc.wait()), args=(self.proc,))",57],["target = self.args['dir']",79],["return target",93],["let s:target = target",49],["let s:target = target",49]],"useCount":4642},{"word":"tcomment","context":[["function! tcomment#CollectFileTypes()",20],["\\ 'replacements': g:tcomment#replacements_xml",20],["function! tcomment#Operator(type, ...) \"{{{3",20],["function! tcomment#OperatorLineAnyway(type) \"{{{3",20],["call tcomment#Operator(a:type, '', '!')",20],["function! tcomment#OperatorAnyway(type) \"{{{3",20],["\" See |tcomment-operator|.",24],["\\ 'replacements': g:tcomment#replacements_c",43],["call tcomment#CollectFileTypes()",58],["\" ARGS... are either (see also |tcomment#Comment()|):",78]],"useCount":3417},{"word":"td","context":[["call <SID>HtmlIndentPush('td')",27],["\\            'td:u': 'text-decoration:underline;',",26],["\\ 'td': [",36],["</td>",471],["\\            'tr': 'tr>td',",35],["\\            'table': 'table>tr>td',",35],["\\            'td:n': 'text-decoration:none;',",26],["\\            'td:o': 'text-decoration:overline;',",26],["\\            'td:l': 'text-decoration:line-through;',",26],["\\ ['th', 'td'],",33]],"useCount":3067},{"word":"template","context":[["\\            'call': 'xsl:call-template',",35],["\" vim-airline template by chartoin (http://github.com/chartoin)",40],["return template",47],["\\      \"template\": [",71],["\\ '{\"pattern\": v:val[1], \"template\": v:val[2], \"affinity\": v:val[3], \"complete\": v:val[4]}')",30],["\" HTML Cheetah template",30],["let txt = txt.' local template directory :  '.s:C_LocalTemplateDir.\"\\n\"",32],["\\            'tmatch': 'xsl:template',",35],["syn keyword cppStructure\tclass typename template namespace",34],["\\            'tname': 'xsl:template',",35]],"useCount":2423},{"word":"term","context":[["CSAHi vimPatRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimMenuRhs term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimFuncBody term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimOperParen term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimAuSyntax term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimRegion term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimHiBang term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimGroupList term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimCmdSep term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264],["CSAHi vimIsCommand term=NONE cterm=NONE ctermbg=bg ctermfg=fg gui=NONE guibg=bg guifg=fg",264]],"useCount":59978},{"word":"terminal","context":[["\" depending on gui or terminal mode. It's possible that, if the following",66],["\" In cases where Solarized is initialized inside a terminal vim session and",66],["\" other potential terminal customizations that might make gui mode suboptimal.",66],["\" here. It fires only in cases where vim is transferring from terminal to gui",66],["\" Return terminal color for light/dark variants",292],["\" Support for 256-color terminal",161],["\" I like to have a different background in GUI and terminal modes, so I can use",70],["\" The following are the preferred 16 colors for your terminal",70],["\" Set both gui and terminal color values in separate conditional statements",73],["\" color terminal definitions",122]],"useCount":2625},{"word":"test","context":[["elseif f =~ '\\<test/unit/.*_test\\.rb$'",56],["let r = \"test-integration\"",49],["elseif f =~ '\\<test/integration/.*_test\\.rb$'",49],["elseif f =~ '\\<test/functional/.*_test\\.rb$'",56],["\" we define it here so that included files can test for it",66],["if buffer.type_name('test')",78],["if rails#app().has('test')",84],["let r = \"test\"",98],["let r = \"test-unit\"",49],["elseif f =~ '\\<\\%(test\\|spec\\)/exemplars/.*_exemplar\\.rb$'",49]],"useCount":7612},{"word":"text","context":[["let text = substitute(text, '\\${nr}', \"\\n\", 'g')",120],["return text",178],["let text = substitute(text, '\\${nr}', \"\\n\", 'g')",120],["let text = substitute(text, '\\\\\\$', '$', 'g')",120],["let text = substitute(text, '\\\\\\$', '$', 'g')",120],["return a:text",113],["let s:outText = s:result.text",112],["let s:outText2 = s:result2.text",112],["let text = current.value[1:-2]",96],["let s:outText3 = s:result3.text",86]],"useCount":11716},{"word":"textwidth","context":[["set textwidth=80",90],["\"vim: sts=2 sw=2 smarttab et ai textwidth=0 fdm=marker",44],["setlocal textwidth=72",47],["setlocal textwidth=78",51],["set textwidth=0",72],["\" vim:tabstop=2:shiftwidth=2:expandtab:foldmethod=marker:textwidth=79",111],["setlocal textwidth=80",191],["setlocal textwidth=0",860],["setlocal textwidth=79",53],["set textwidth=79",48]],"useCount":2022},{"word":"that","context":[["\" note that link syntax to avoid duplicate configuration doesn't work with the",73],["\"path: a path object representing the full filesystem path to the file/dir that the node represents",73],["\" leave the hex values out entirely in that case and include only cterm colors)",73],["\" ag is fast enough that CtrlP doesn't need to cache",110],["\" Avoid matching foo::bar() in C++ by requiring that the next char is not ':'",80],["\"               notice is copied with it. Like anything else that's free,",166],["\" This enables the coresponding base16-shell script to run so that",177],["\" Due to possibility that CSApprox is running (though I suppose we could just",73],["\" light and dark modes that runs in both GUI, 256 and 16 color modes.",70],["\" Now, set up our indentation expression and keys that trigger it.",70]],"useCount":17144},{"word":"the","context":[["\" Sets the highlighting for the given group",213],["\" Sets the highlighting for the given group",213],["\" Get the closest colour",211],["\" Do not mofidify the code nor insert new lines before '\" ___vital___'",269],["\" furnished to do so, subject to the following conditions:",313],["\" Only define the function once.",430],["\"     the following conditions:",1680],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703],["\" Define the default highlighting.",2028]],"useCount":191032},{"word":"theLine","context":[["let theLine = s:ConvertLeadingTabsToSpaces(theLine)",230],["let theLine = s:ConvertLeadingSpacesToTabs(theLine)",226],["let theLine = s:ConvertLeadingTabsToSpaces(theLine)",230],["let theLine = getline(currentLine)",253],["let theLine = getline(a:lineNum)",69],["let theLine = s:ConvertLeadingSpacesToTabs(theLine)",226],["call setline(currentLine, theLine)",161],["let theLine = s:SwapOutterMultiPartDelimsForPlaceHolders(theLine)",95],["let lineHasLeadingTabs = s:HasLeadingTabs(theLine)",92],["let theLine = s:SwapOutterMultiPartDelimsForPlaceHolders(theLine)",95]],"useCount":4609},{"word":"them","context":[["\"Removes all childen from this node and re-reads them",42],["\" Treat long lines as break lines (useful when moving around in them)",49],["\" Take a list of errors and add default values to them from a:options",60],["\" match one line constructs here and skip them at folding",42],["\" Show matching brackets when text indicator is over them",60],["\"msg: a message that will be echoed to the user asking them if they wish to",60],["\" Join them together with a newline separator",66],["\" ~/.vim/vundles/ to edit them:",40],["\" Define some defaults in case the included ftplugins don't set them.",86],["\" swap them: http://items.sjbach.com/319/configuring-vim-right",66]],"useCount":2484},{"word":"then","context":[["\"if we are running windows then slap a drive letter on the front",90],["\" If it is, then don't display the tags for this file",98],["\"        Conditional     if, then, else, endif, switch, etc.",69],["when :install  then '+' when :update then '*'",90],["\" then transferred to a gui session via the command `:gui`, the gui vim process",66],["when :install  then '+' when :update then '*'",90],["when true, nil then '-' else",89],["\"if we have no parent then we can have no siblings",72],["\" the following if-then. However, I find vim's background autodetection to be",70],["\" If there are no tags for this file, then no need to proceed further",101]],"useCount":8118},{"word":"there","context":[["\" 'there' will be set to a command to move from the split window",40],["\" there are two possibilities",121],["\" If an owner exists, there will be spaces between the",44],["\"then check for the space and remove it if it is there",46],["\"if there isnt a * in the sort sequence then add one",47],["keepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",53],["\" TODO: at this point there is no b:syntastic_loclist",66],["cc 1 \"jump to first error if there is any",100],["\" If there are no tags for this file, then no need to proceed further",101],["NetrwKeepj call netrw#ErrorMsg(2,\"there are no marked files in this window (:help netrw-mf)\",66)",50]],"useCount":4014},{"word":"they","context":[["\"compare the sort sequences, if they are different then the return",45],["\" If strings are concatenated over multiple lines, since they are",70],["\" TODO check for more obscure syntax groups that they're ok",45],["\"They are equal if the paths they represent are the same",45],["\" If empty, check if they want to leave it empty",61],["\"msg: a message that will be echoed to the user asking them if they wish to",60],["\"if the node is open in a buffer, ask the user if they want to",48],["\\'\" included in your .vimrc as they are currently set to their defaults.',",49],["\" they will be chosen automatically from the existing palette.",55],["\" :make expands '%' and '#' wildcards, so they must also be escaped",87]],"useCount":2285},{"word":"this","context":[["\" If it is, then don't display the tags for this file",98],["\" Check whether this file is removed based on user request",98],["\" Unfortunately this doesn't very well work for // type of comments :-(",100],["\" If there are no tags for this file, then no need to proceed further",101],["\" User must set this variable in .vimrc",177],["\" Don't load another plugin for this buffer",178],["\" no guarantees for version 5.8 and below, but this makes it stop",346],["\" Only load this indent file when no other was loaded.",515],["\" Only do this when not done yet for this buffer",496],["\" Only do this when not done yet for this buffer",496]],"useCount":23203},{"word":"throw","context":[["throw v:errmsg",95],["throw 'Invalid argument type (expected: string or dictionary)'",89],["function! s:throw(string) abort",84],["throw \"vital: Data.String: Can't use non-half-width characters for padding.\"",125],["call s:throw('not a git repository: '.expand('%:p'))",152],["call s:throw('file or blob required')",77],["call s:throw('no work tree')",77],["throw 'pick'",80],["call s:throw('rev-parse '.a:rev.': '.hash)",76],["call s:throw('unsupported option')",76]],"useCount":4602},{"word":"time","context":[["call setline(1, 'Updated. Elapsed time: ' . split(reltimestr(reltime(s:update.start)))[0] . ' sec.')",88],["import time",122],["time.sleep(0.2)",41],["\" one time on initially loading the file.",43],[":r !time /T\u0016",45],["let time = reltime()",49],["time.sleep(0.33)",61],["time_diff = time.time() - os.path.getmtime(tfile.name)",79],["time_diff = time.time() - os.path.getmtime(tfile.name)",79],["time.sleep(1)",81]],"useCount":3092},{"word":"timeout","context":[["while line = Timeout::timeout(timeout) { fd.get_line }",89],["self.timeout += limit",79],["self.timeout = timeout",79],["self.timeout = timeout",79],["while line = Timeout::timeout(timeout) { fd.get_line }",89],["Timeout::timeout(timeout) do",89],["tried = timeout = 0",89],["timeout += limit",89],["Timeout::timeout(timeout) do",89],["require 'timeout'",91]],"useCount":2348},{"word":"title","context":[["hi title           ctermbg=237",40],["\\                    .\"\\t<title></title>\\n\"",138],["'query': \"a[title=$#]{foo}\",",42],["let winnr = bufwinnr(s:title)",48],["let &title = s:old_title",51],["let a.value = '{' . title . '}'",70],["\\                    .\"    <title></title>\\n\"",72],["\\                    .\"    <title></title>\\n\"",72],["set title",134],["\\                    .\"\\t<title></title>\\n\"",138]],"useCount":2872},{"word":"tlib","context":[["call tlib#autocmdgroup#Init()",94],["let list = tlib#cmd#OutputAsList(a:command)",25],["\" TLogDBG string(tlib#win#List())",76],["\" See |tlib#input#List()|.",75],["\" A convenience wrapper for |tlib#arg#Let|.",38],["call tlib#normal#WithRegister('gg\"tdG', 't')",38],["let world = tlib#agent#SuspendToParentWindow(world, world.rv)",37],["return tlib#agent#Exit(a:world, a:selected)",36],["let winpos = tlib#fixes#Winpos()",32],["call tlib#buffer#ViewLine(l, 1)",24]],"useCount":5585},{"word":"tlist_","context":[["let ftype = s:tlist_{a:fidx}_filetype",108],["let ttype = s:tlist_{ftype}_{i}_name",135],["let tag_line = s:tlist_{a:fidx}_{a:tidx}_tag",137],["let s:tlist_{fidx}_valid = 0",165],["while i <= s:tlist_{ftype}_count",168],["exe s:tlist_{fidx}_start",231],["exe \"silent! \" . s:tlist_{fidx}_start . \",\" .",129],["if s:tlist_{fidx}_tag_count == 0",132],["\\ s:tlist_{fidx}_end . \"foldopen!\"",97],["let s:tlist_{fidx}_{ttype}_offset = 0",96]],"useCount":11158},{"word":"tmp","context":[["File.unlink tmp rescue nil",90],["silent exe 'keepalt file '.tmp",76],["let sha1 = readfile(tmp)[0]",77],["let tmp = tempname()",306],["call add(s:tmp, ['ID'])",226],["call delete(tmp)",168],["let tmp = split(extends, '\\s*,\\s*')",90],["system(\"(#{cmd}) > #{tmp}\")",79],["data = File.read(tmp).chomp",90],["tmp = VIM::evaluate('tempname()')",90]],"useCount":4263},{"word":"to","context":[["\" Returns the palette index to approximate the 'rrggbb' hex string",190],["call append(\"$\", \"\\t(global or local to buffer)\")",199],["\" Returns the palette index to approximate the given R/G/B colour levels",211],["\" This enables the coresponding base16-shell script to run so that",177],["\" If the result of the ftp operation isn't blank, show an error message (tnx to Doug Claar)",156],["call append(\"$\", \"\\t(local to buffer)\")",1019],["\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",223],["\" furnished to do so, subject to the following conditions:",313],["\" furnished to do so, subject to the following conditions:",313],["call append(\"$\", \"\\t(local to window)\")",621]],"useCount":82207},{"word":"toReturn","context":[["let toReturn = []",94],["call add(toReturn, i)",94],["let toReturn  = a:line",46],["let toReturn = toReturn . '/'",45],["let toReturn = substitute(toReturn, '\\', '/', \"g\")",45],["let toReturn = substitute(toReturn, '\\', '/', \"g\")",45],["let toReturn = self.pathSegments[-1]",45],["return toReturn",479],["let toReturn  = toReturn . '/'",45],["let toReturn = a:pathstr",45]],"useCount":2156},{"word":"top","context":[["let top = line('w0') + &scrolloff",79],["return s:completion_filter(top,a:A)",48],["return s:completion_filter(local+top,a:A)",48],["execute top",78],["\"   -firstLine/lastLine: the top and bottom lines to comment",69],["let offset = lnum - top",67],["let top = +matchstr(getline('.'),' +\\zs\\d\\+')",66],["if lnum >= top && lnum <= top + len",66],["if lnum >= top && lnum <= top + len",66],["0 \"jump back to the top",48]],"useCount":4490},{"word":"tpope","context":[["Plugin 'tpope/vim-fugitive'",165],["Plug 'tpope/vim-unimpaired'",95],["Plug 'tpope/vim-commentary'",149],["Plug 'tpope/vim-repeat'",166],["\" Maintainer:\tTim Pope <vimNOSPAM@tpope.org>",189],["Plug 'tpope/vim-surround'",277],["Plug 'tpope/vim-fugitive'",327],["\" Maintainer:   Tim Pope <vimNOSPAM@tpope.org>",90],["Plug 'tpope/vim-endwise'",96],["Plugin 'tpope/vim-surround'",105]],"useCount":4294},{"word":"tr","context":[["\\ ['tr'],",96],["<tr>",3646],["</tr>",3658],["cal map(g:ctrlp_allfiles, 'tr(v:val, \"/\", \"\\\\\")')",30],["\\            'tr': 'tr>td',",35],["\\            'table': 'table>tr>td',",35],["\\            'tr': 'tr>td',",35],["\\ 'tr': [",36],["\\   type(function('tr')),",45],["call extend(s:apps[key],filter(copy(s:app_prototype),'type(v:val) == type(function(\"tr\"))'),'force')",48]],"useCount":8485},{"word":"trailing","context":[["\"whack the trailing slash off the end if it exists",45],["let retval  = substitute( retval, '\\s\\+$', \"\", \"\" )\t\t\" remove trailing whitespaces",42],["\"grab the last part of the path (minus the trailing slash)",45],["\"dirSlash: if 1 then a trailing slash will be added to the returned value for",45],["\" trailing whitespace",53],["\" Strip any leading or trailing spaces",46],["\" TODO: complete controller names with trailing slashes here",49],["\" Delete trailing white space on save, useful for Python and CoffeeScript ;)",52],["\"when wanted, highlight trailing white space",89],["\" Strip off trailing spaces",152]],"useCount":1977},{"word":"tree","context":[["if b:fugitive_type !~# '^\\%(tag\\|commit\\|tree\\|blob\\)$'",77],["call s:throw('no work tree')",77],["return self.bare() ? self.dir() : self.tree()",77],["\" http://github.com/mattn/googlereader-vim/tree/master",80],["\"remove the tree parts and the leading space",90],["return self.tree(a:spec)",77],["let showtree = (getline(1) =~# '^tree ' && getline(2) == \"\")",152],["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152],["let type = 'tree'",227],["execute cd.'`=s:repo().tree()`'",463]],"useCount":7787},{"word":"true","context":[["[true, skip]",90],["\"\"\" Returns true only if command still running. \"\"\"",59],["\" Returns true if paste mode is enabled",56],["syn keyword cConstant true false",54],["\"    - returns 1 (true)  or 0 (false)",50],["first_line = true",90],["ing  = ![true, false].include?(type)",90],["running = true",90],["when true, nil then '-' else",89],["while true",93]],"useCount":2867},{"word":"try","context":[["\"recurseUpward: try to put the cursor on the parent if the this node isnt",36],["try",15792],["try:",1680],["\" keeps timing you out before you can complete them, try changing your timeout",37],["\" try, catch, throw",43],["try | silent undojoin | catch | endtry",44],["\" We try to ensure backwards compatibility with Syntastic if the user has",50],["\" When searching try to be smart about cases",61],["\"        Exception       try, catch, throw",69],["\"   try",74]],"useCount":19938},{"word":"ts","context":[["\" vim: ts=8",1180],["\" vim:fen:fdm=marker:fmr={{{,}}}:fdl=0:fdc=1:ts=2:sw=2:sts=2",120],["\" vim: et ts=2 sts=2 sw=2",546],["\" vim:set et ts=2 sts=2 sw=2 tw=0:",333],["\" vim:ts=4:sw=4:et",287],["\" vim: ts=8 sw=2",269],["\" vim: set ts=8 sts=4 sw=4 noexpandtab ff=unix fdm=syntax :",257],["\" vim: ts=4 sw=4 et",163],["\" vim: sw=2 ts=2 et",134],["\" vim: tw=0 ts=4 sw=4",119]],"useCount":6623},{"word":"ttype","context":[["if s:tlist_{fidx}_{ttype}_count",49],["let ttype = s:tlist_{ftype}_{i}_name",135],["let s:tlist_{fidx}_{ttype}_offset = 0",96],["let ttype = s:tlist_{ftype}_{j}_name",93],["if ttype == ''",69],["let s:tlist_{fidx}_{ttype}_count = 0",66],["return ttype",66],["let s:tlist_{fidx}_{ttype} = ''",66],["let ttype = s:tlist_{a:ftype}_{i}_name",66],["let fidx_ttype = 's:tlist_' . fidx . '_' . ttype",64]],"useCount":2608},{"word":"txt","context":[["\"       http://amix.dk/vim/vimrc.txt",39],["echo txt",72],["silent! put =txt",67],["\" check doc/SingleCompile.txt for more information",67],["silent! put! =txt",66],["\\     ? !(empty(glob(a:rtp.'/doc/*.txt', 1)) && empty(glob(a:rtp.'/doc/*.??x', 1)))",41],["\\     : !(empty(glob(a:rtp.'/doc/*.txt')) && empty(glob(a:rtp.'/doc/*.??x')))",41],["let txt = txt.\"\\n\"",42],["let txt = txt.\"\\n\"",42],["\" See the \"solarized.txt\" help file included with this colorscheme (in the",47]],"useCount":3067},{"word":"type","context":[["return type",162],["let type = a:type",311],["let type = a:type",311],["let type = ''",256],["let type = emmet#getFileType()",253],["let type = 'tree'",227],["let type = 'blob'",223],["let rtype = emmet#lang#exists(type) ? type : 'html'",185],["let rtype = emmet#lang#exists(type) ? type : 'html'",185],["if type == s:TYPE.string",178]],"useCount":39143},{"word":"type_name","context":[["if buffer.type_name() ==# 'model' || buffer.type_name('model-arb')",72],["if self.type_name('view')",62],["elseif self.type_name('controller')",58],["if buffer.type_name('controller')",55],["elseif self.type_name('spec')",53],["if buffer.type_name() ==# 'model' || buffer.type_name('model-arb')",72],["if buffer.type_name('db-migration','db-schema')",78],["if buffer.type_name('view-partial')",78],["if buffer.type_name('test')",78],["elseif self.type_name('view')",102]],"useCount":3055},{"word":"typeinfo","context":[["let typeinfo = self.typeinfo",50],["let suffix .= ' : ' . typeinfo.kind2scope[self.fields.kind]",56],["\\ typeinfo.kinddict[a:tag2.fields.kind]",56],["let pscope  = a:typeinfo.kind2scope[a:parent.fields.kind]",56],["let typeinfo = self.typeinfo",50],["for kind in a:typeinfo.kinds",82],["\\ a:typeinfo, a:fileinfo)",96],["let typeinfo = fileinfo.typeinfo",100],["let typeinfo = fileinfo.typeinfo",100],["for kind in typeinfo.kinds",148]],"useCount":2745},{"word":"types","context":[["let types = s:to_a(plug.for)",89],["for n in keys(s:types)",78],["\" Current line doesn't belong to any of the displayed tag types",66],["\" checkers from mixed types",65],["if !executable(g:neobundle#types#git#command_path)",57],["function! s:lod(names, types)",51],["for dir in a:types",90],["for type in types",135],["if !empty(types)",156],["\" This contains the defaults settings for all database types",167]],"useCount":3789},{"word":"u","context":[["exe \"let s:fmt_undb     = ' \".s:vmode.\"=NONE\".s:u.s:b.  \" term=NONE\".s:u.s:b.\"'\"",67],["setlocal complete=.,w,b,u,t,i",871],["\\ \"  from sysobjects o, sysusers u \".",135],["\\ \" where o.uid=u.uid \".",117],["\" vim --noplugin -u vim/vundles.vim -N \"+set hidden\" \"+syntax on\" +BundleClean! +BundleInstall +qall",71],["call repo.git_chomp_in_tree('add','-u')",70],["let s:u           = \",underline\"",69],["exe \"let s:fmt_undi     = ' \".s:vmode.\"=NONE\".s:u.      \" term=NONE\".s:u.\"'\"",67],["exe \"let s:fmt_undi     = ' \".s:vmode.\"=NONE\".s:u.      \" term=NONE\".s:u.\"'\"",67],["exe \"let s:fmt_undb     = ' \".s:vmode.\"=NONE\".s:u.s:b.  \" term=NONE\".s:u.s:b.\"'\"",67]],"useCount":10391},{"word":"ucs","context":[["\\  || (ucs >= 0xff00 && ucs <= 0xff60)",73],["\\  || ucs == 0x232a",73],["\\  || ucs == 0x2329",73],["\\  || (ucs >= 0xff00 && ucs <= 0xff60)",73],["\\  || (ucs >= 0x20000 && ucs <= 0x2fffd)",73],["\\  || (ucs >= 0xac00 && ucs <= 0xd7a3)",73],["\\  || (ucs >= 0xac00 && ucs <= 0xd7a3)",73],["\\      && ucs != 0x303f)",73],["set fileencodings=ucs-bom,utf-8,default,latin1",122],["\\  || (ucs >= 0x20000 && ucs <= 0x2fffd)",73]],"useCount":2112},{"word":"under","context":[["\" Get the text before the filename under the cursor.",49],["\"   'd'   called: find functions that function under cursor calls",39],["\"   'e'   egrep:  egrep search for the word under cursor",39],["\" Match paired bracket under the cursor",40],["echo 'no name/symbol under cursor!'",40],["\" Character under cursor",40],["\"   'i'   includes: find files that include the filename under cursor",40],["\"go thru all the files/dirs under this node",42],["\"              it and/or modify it under the terms of the Do What The Fuck You",100],["\"             it and/or modify it under the terms of the Do What The Fuck You",1703]],"useCount":3562},{"word":"undercurl","context":[["CSAHi SpellBad term=reverse cterm=undercurl ctermbg=bg ctermfg=196 gui=undercurl guibg=bg guifg=fg guisp=#ff0000",180],["CSAHi SpellCap term=reverse cterm=undercurl ctermbg=bg ctermfg=21 gui=undercurl guibg=bg guifg=fg guisp=#0000ff",177],["CSAHi SpellCap term=reverse cterm=undercurl ctermbg=bg ctermfg=21 gui=undercurl guibg=bg guifg=fg guisp=#0000ff",177],["CSAHi SpellRare term=reverse cterm=undercurl ctermbg=bg ctermfg=201 gui=undercurl guibg=bg guifg=fg guisp=#ff00ff",177],["CSAHi SpellRare term=reverse cterm=undercurl ctermbg=bg ctermfg=201 gui=undercurl guibg=bg guifg=fg guisp=#ff00ff",177],["CSAHi SpellBad term=reverse cterm=undercurl ctermbg=bg ctermfg=196 gui=undercurl guibg=bg guifg=fg guisp=#ff0000",180],["call <sid>hi(\"SpellBad\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",273],["call <sid>hi(\"SpellRare\",    \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",273],["call <sid>hi(\"SpellLocal\",   \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",274],["call <sid>hi(\"SpellCap\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\")",274]],"useCount":5204},{"word":"underline","context":[["CSAHi TabLine term=underline cterm=underline ctermbg=248 ctermfg=fg gui=underline guibg=#a9a9a9 guifg=fg",114],["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["CSAHi VisualNOS term=bold,underline cterm=bold,underline ctermbg=bg ctermfg=fg gui=bold,underline guibg=bg guifg=fg",220],["hi Underlined ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline",200],["hi Underlined ctermfg=NONE ctermbg=NONE cterm=underline guifg=NONE guibg=NONE gui=underline",200],["hi Underlined      guifg=#808080               gui=underline",174],["hi Underlined      ctermfg=244               cterm=underline",164],["CSAHi TabLine term=underline cterm=underline ctermbg=248 ctermfg=fg gui=underline guibg=#a9a9a9 guifg=fg",114],["CSAHi SpellLocal term=underline cterm=undercurl ctermbg=bg ctermfg=51 gui=undercurl guibg=bg guifg=fg guisp=#00ffff",123]],"useCount":7912},{"word":"unite","context":[["let unite = unite#get_current_unite()",630],["call unite#force_redraw()",64],["if unite#util#is_windows()",66],["let path = unite#util#substitute_path_separator(",111],["let context = unite.context",112],["call unite#print_error(",147],["call unite#util#set_default(",164],["let context = unite#get_context()",183],["call unite#print_source_message(",212],["let unite = unite#get_current_unite()",630]],"useCount":7498},{"word":"unix","context":[["set ffs=unix,dos,mac",78],["\" vim: set ts=8 sts=4 sw=4 noexpandtab ff=unix fdm=syntax :",257],["if has(\"unix\")",236],["if has('unix')",185],["setlocal ff=unix",131],["setl ff=unix",119],["elseif has(\"unix\")",111],["\" vim:fdm=marker:ff=unix:noet:ts=4:sw=4",105],["\" -n  unix : DON'T use <.netrc>, even though it exists",100],["let s:is_unix = has('unix')",79]],"useCount":2553},{"word":"unlet","context":[["unlet s:save_cpo",4937],["unlet s:cpo_save",1900],["unlet b:current_syntax",1104],["unlet! b:current_syntax",604],["unlet main_syntax",559],["unlet s:keepcpo",467],["unlet SessionLoad",240],["unlet! s:wipebuf",213],["unlet! entry.bufnr",154],["unlet s:didsplit",120]],"useCount":20363},{"word":"up","context":[["\" If the shell is messed up, this command could cause an error message",58],["\" Clean up: restore previous search history, and cursor position",94],["\\ \"v:val =~ '^- ' && stridx(v:val, 'Already up-to-date') < 0\"))",89],["echo 'vim-plug is already up-to-date'",82],["\" This is fast but code inside triple quoted strings screws it up. It",72],["\" Now, set up our indentation expression and keys that trigger it.",70],["\"Emulates the :lmake command. Sets up the make environment according to the",65],["\" Used to speed up file lookup",64],["\" (the numbers don't show up) so I made it a VimEnter event",62],["\" ,oq to open it back up (rare)",58]],"useCount":5478},{"word":"update","context":[["call add(s:update.errors, name)",150],["update",144],["let s:update.bar .= job.error ? 'x' : '='",88],["call append(3, '- Post-update hook for '. name .' ... ')",89],["echo \"Press 'L' on each line to load plugin, or 'U' to update\"",89],["echo \"Press 'X' on each block to revert the update\"",89],["function! s:update(force, names)",89],["\"   \" Plugin outside ~/.vim/plugged with post-update hook",89],["when :install  then '+' when :update then '*'",90],["log.call name, 'Updating ...', :update",90]],"useCount":7862},{"word":"uri","context":[["return has_key(g:plugs[a:name], 'uri')",90],["let uri = repo",89],["elseif !s:compare_git_uri(remote, a:spec.uri)",90],["\\ 'Expected:    '.a:spec.uri,",90],["return { 'dir': dir, 'uri': uri }",84],["\\ s:shellesc(spec.uri),",90],["\"Expected:    #{uri}\",",90],["\\ {'type' : 'git', 'uri' :",104],["let uri = printf(fmt, repo)",89],["if has_key(spec, 'uri')",90]],"useCount":2857},{"word":"url","context":[["let a.attr.href = url",70],["let @* = url",66],["return 'echomsg '.string(url)",72],["let raw = s:repo().git_chomp('config','remote.'.remote.'.url')",72],["let url .= ';a=commit'",73],["let url = root . '/commit/' . commit",73],["let url = root . '/blob/' . commit . '/' . path",73],["let url = root",73],["if url == ''",96],["return url",183]],"useCount":5030},{"word":"use","context":[["\" -n  unix : DON'T use <.netrc>, even though it exists",100],["\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",223],["\" Hit the start of the file, use zero indent.",176],["\" At the start of the file use zero indent.",149],["throw \"vital: Data.String: Can't use non-half-width characters for padding.\"",125],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["\" use the grey",121],["\" FIXME: Escaping is incomplete. We could use shellescape with eval,",89],["\" Redistribution and use in source and binary forms, with or without",116],["\" use the color",121]],"useCount":12279},{"word":"used","context":[["\" Character prefix used to number the menu items (hotkey)",64],["\" Expression used to check whether we should skip a match with searchpair().",59],["\" used again and the autocommand below will be dropped.",66],["\" v:val is used in {expr}",136],["\" Only used when an item doesn't have highlighting yet",106],["\" Line continuation used here",74],["\"This function is used to determine whether the given line is commented with",69],["\" cCppParen: same as cParen but ends at end-of-line; used in cDefine",241],["if exists(\":CompilerSet\") != 2\t\t\" older Vim always used :setlocal",190],["\" cCppBracket: same as cParen but ends at end-of-line; used in cDefine",68]],"useCount":8372},{"word":"user","context":[["\" Add the current cursor position to the jump list, so that user can",64],["call s:add_methods('repo',['config', 'user', 'aliases'])",67],["<li class=\"facebox-user-list-item\">",70],["\" We also check to see if user has set solarized (force use of the",72],["\" Check whether this file is removed based on user request",98],["let useremail = s:repo().config('user.email')",73],["let username = s:repo().config('user.name')",73],["\"msg: a message that will be echoed to the user asking them if they wish to",60],["\"prints out the given msg and, if the user responds by pushing 'y' then the",60],["\"\"\" Retry required for command, notify user. \"\"\"",59]],"useCount":7910},{"word":"using","context":[["\" use internal formatting to avoid conficts when using == below",57],["\" create <%= foo %> erb tags using Ctrl-k in edit mode",57],["\" Be smart when using tabs ;)",57],["\" Sorts a list using a set of keys generated by mapping the values in the list",52],["\" jump back using the ' and ` marks.",64],["\" Set 7 lines to the cursor - when moving vertically using j/k",57],["\" This file contains the list of plugin installed using vundle plugin manager.",73],["\" and insert the comment leader when hitting <CR> or using \"o\".",79],["\" create <%= foo %> erb tags using Ctrl-j in edit mode",55],["\" variable so that related functionality is loaded iff the user is using",54]],"useCount":4473},{"word":"utf","context":[["set encoding=utf-8",366],["scriptencoding utf-8",1159],["set fileencoding=utf-8",52],["set fileencodings=ucs-bom,utf-8,default,latin1",122],["set termencoding=utf-8",94],["if &encoding != 'utf-8'",76],["if &encoding == 'utf-8'",66],["buf = os.read(fread, 100000).decode('utf-8', 'replace')",61],["result = [line.decode('utf-8', 'replace').rstrip() for line in tfile]",61],["let char = strtrans(iconv(char, 'utf-8', &encoding))",56]],"useCount":2904},{"word":"util","context":[["let project = eclim#project#util#GetCurrentProjectName()",392],["if go#util#IsWin()",133],["call unite#util#set_default(",164],["call neobundle#util#set_default(",137],["let file = eclim#project#util#GetProjectRelativeFilePath()",170],["call eclim#util#Echo(result)",194],["if !eclim#project#util#IsCurrentFileInProject()",231],["call neobundle#util#print_error(",328],["call neocomplcache#util#set_default_dictionary(",430],["call neocomplete#util#set_default_dictionary(",1297]],"useCount":16711},{"word":"v","context":[["if v:version < 700",726],["let lnum = prevnonblank(v:lnum - 1)",236],["let v:this_session=expand(\"<sfile>:p\")",241],["let v:errmsg = \"\"",256],["if v:version > 703 || v:version == 703 && has('patch1170')",276],["if v:version > 703 || v:version == 703 && has('patch1170')",276],["if v:shell_error != 0",598],["if v:version >= 700",635],["return 'echoerr v:errmsg'",1463],["if v:shell_error",1585]],"useCount":54765},{"word":"val","context":[["if eval(substitute(a:f, 'v:val', string(a:xs[i]), 'g'))",93],["if !exists(a:var) || type({a:var}) != type(a:val)",93],["return filter(s:controllerList(a:ArgLead,\"\",\"\"),'v:val !=# \"application\"')",96],["return a:val",100],["\" v:val is used in {expr}",136],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151]],"useCount":24396},{"word":"valid","context":[["let [valid, msg] = [0, 'Not found.']",90],["\\ 'Try to call plug#begin with a valid directory', g:plug_home))",89],["if valid && get(s:loaded, name, -1) == 0",89],["call append(3, s:format_message(valid ? '-' : 'x', name, msg))",88],["\"   'returns' - a list of valid exit codes for the checker",65],["\" Make sure the tag type is a valid and supported one",62],["\" List of valid directories",90],["let ecnt += !valid",90],["let [valid, msg] = [1, 'OK']",90],["let [valid, msg] = [0, 'Not found. Try PlugInstall.']",90]],"useCount":2460},{"word":"value","context":[["\" pretty good and, at least with MacVim, I can leave this background value",70],["\" Set report option to a huge value to prevent informational messages",104],["\" Return value:",98],["let text = current.value[1:-2]",96],["return value",95],["return a:value",84],["return setbufvar(self['#'],a:var,a:value)",81],["function! s:buffer_setvar(var,value) dict abort",81],["\"   1. a list of key=value pairs",78],["unlet value",71]],"useCount":9310},{"word":"values","context":[["\" L\\*a\\*b values are canonical (White D65, Reference D50), other values are",73],["\" Set both gui and terminal color values in separate conditional statements",73],["\" L\\*a\\*b values are canonical (White D65, Reference D50), other values are",73],["\" leave the hex values out entirely in that case and include only cterm colors)",73],["\" Default option values\"{{{",72],["\" Formatting options and null values for passthrough effect \"{{{",68],["for spec in values(g:plugs)",179],["\"   'defaults' - a dict containing default values for the returned errors",76],["\"   2. 1-2 values for: ?commentBegin, ?commentEnd",78],["for plug in values(todo)",79]],"useCount":4108},{"word":"var","context":[["return setbufvar(self['#'],a:var,a:value)",81],["if !exists(a:var)",180],["if !exists(var)",139],["if !exists(a:var) || type({a:var}) != type(a:val)",93],["if !exists(a:var) || type({a:var}) != type(a:val)",93],["function! s:buffer_getvar(var) dict abort",83],["return getbufvar(self['#'],a:var)",82],["function! s:buffer_setvar(var,value) dict abort",81],["let var = 's:tlist_def_' . a:ftype . '_settings'",68],["let var = 'g:tlist_' . a:ftype . '_settings'",68]],"useCount":5248},{"word":"variable","context":[["\" User must set this variable in .vimrc",177],["\"\t? List of any external variable, control, or other element whose state affects this procedure.",52],["\" variable so that related functionality is loaded iff the user is using",54],["\"  variable: #C6C5FE  198:197:254",55],["if !has_key(a:variable, key)",58],["\" of skip this variable",61],["\" Curly brace variable name optimization",64],["\" mode (detected with the script scope s:vmode variable). It also allows for",66],["\" Add this tag to the tag type variable",66],["\"       *Identifier      any variable name",69]],"useCount":5633},{"word":"variables","context":[["\" Important variables.",56],["\" restore environment variables {{{3",54],["\" Remove color variables",303],["\" Prompt for the variables which are part of",71],["\\ 'v:variables',",70],["\\ {'short' : 'v', 'long' : 'variables',   'fold' : 0, 'stl' : 0},",53],["\"   'env' - environment variables to set before running the checker",54],["\" Set up variables to use and search for MSL to the previous line.",54],["\" set environment variables {{{3",54],["\" save options and locale env variables {{{3",60]],"useCount":4974},{"word":"version","context":[["if version < 508",2366],["\" For version 5.7 and earlier: only when not done already",1587],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["\" For version 5.x: Clear all syntax items",1596],["if version > 580",770],["if version < 600",3425],["if v:version >= 700",635],["if v:version < 700",726],["if version >= 700",765],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588]],"useCount":23945},{"word":"vertical","context":[["nnoremap <buffer> <silent> D    :<C-u>exe \"vertical resize \".(<SID>linechars('.\\{-\\}\\ze\\d\\ze\\s\\+\\d\\+)')+1-v:count)<CR>",53],["execute \"vertical resize \".(s:linechars('.\\{-\\}\\ze\\s\\+\\d\\+)')+1)",55],["nnoremap <buffer> <silent> C    :<C-u>exe \"vertical resize \".(<SID>linechars('^\\S\\+')+1+v:count)<CR>",53],["set diffopt+=vertical",48],["\" one extra column is needed to include the vertical split",54],["\" Hitting CTRL-space *twice* before the search type does a vertical",40],["execute get(g:, 'plug_window', 'vertical topleft new')",89],["silent! exec splitLocation . 'vertical ' . splitSize . ' split'",37],["\" thing, but does a vertical split instead (vim 6 only).",37],["let g:UltiSnipsEditSplit=\"vertical\"",52]],"useCount":2416},{"word":"view","context":[["elseif self.type_name('view')",102],["call winrestview(view)",149],["\" Description: An ack/ag powered code search and view tool.",49],["if buffer.type_name('view-partial')",78],["let r = \"view-layout-\" . e",49],["let view = winsaveview()",151],["let r = \"view-partial-\" . e",49],["if self.type_name('view')",62],["call unite#view#_resize_window()",61],["let r = \"view-\" . e",49]],"useCount":3667},{"word":"vim","context":[["\" vim:ft=vim:fdm=marker",737],["\" vim: set et sts=4 sw=4:",659],["\" vim: set sw=4 sts=4 et fdm=marker:",1085],["\" vim: et ts=2 sts=2 sw=2",546],["\" vim: ts=8",1180],["\"Description: Syntax checking plugin for syntastic.vim",1331],["\" vim: foldmethod=marker",1598],["set cpo&vim",8126],["import vim",692],["\" vim:ft=vim:fdm=marker",737]],"useCount":78395},{"word":"vimproc","context":[["\\ vimproc#get_last_status() : v:shell_error",48],["\" Check vimproc.",55],["call vimproc#version()",81],["call vimproc#util#set_default(",86],["if vimproc#util#is_windows()",92],["\\ &encoding, vimproc#util#termencoding())",43],["\\ 'vimproc plugin is not installed.', self.name)",39],["NeoBundle 'Shougo/vimproc.vim', {",37],["\\ vimproc#parser#parse_pipe(a:commands) :",36],["if !vimproc#util#is_windows()",33]],"useCount":2148},{"word":"vimrc","context":[["\" User must set this variable in .vimrc",177],["\" Turn off Solarized menu by including the following assignment in your .vimrc:",48],["\\'\" included in your .vimrc as they are currently set to their defaults.',",49],["\" using \"call SolarizedOptions()\" or with the \"Generate .vimrc commands\"",49],["\"       This requries that you install https://github.com/amix/vimrc !",56],["\" Edit your .vimrc",90],["\" Then reload .vimrc and :PlugInstall to install plugins.",89],["\" .vimrc:",84],["\\'\" To use, place these commands in your .vimrc file (replacing any',",49],["\" does not re-read the colorscheme (or .vimrc for that matter) so any `has_gui`",66]],"useCount":2900},{"word":"vimshell","context":[["call vimshell#print_prompt(context)",40],["let b:vimshell.continuation = {}",39],["let context = vimshell#get_context()",37],["let s:filetype_overrides['vimshell'] = ['vimshell','%{vimshell#get_status_string()}']",35],["if vimshell#util#is_windows()",43],["call vimshell#start_insert(a:is_insert)",48],["\\ 'vimshell' : $HOME.'/.vimshell_hist',",62],["call vimshell#util#set_default_dictionary_helper(",64],["call vimshell#echo_error(",72],["call vimshell#set_dictionary_helper(",64]],"useCount":2055},{"word":"vmode","context":[["let s:vmode       = \"cterm\"",196],["exe \"let s:fmt_undi     = ' \".s:vmode.\"=NONE\".s:u.      \" term=NONE\".s:u.\"'\"",67],["exe \"let s:fmt_undb     = ' \".s:vmode.\"=NONE\".s:u.s:b.  \" term=NONE\".s:u.s:b.\"'\"",67],["exe \"let s:fg_base2     = ' \".s:vmode.\"fg=\".s:base2  .\"'\"",67],["exe \"let s:bg_none      = ' \".s:vmode.\"bg=\".s:none   .\"'\"",67],["exe \"let s:bg_base1     = ' \".s:vmode.\"bg=\".s:base1  .\"'\"",67],["exe \"let s:fg_none      = ' \".s:vmode.\"fg=\".s:none   .\"'\"",67],["exe \"let s:fmt_stnd     = ' \".s:vmode.\"=NONE\".s:s.      \" term=NONE\".s:s.\"'\"",68],["exe \"let s:fmt_revr     = ' \".s:vmode.\"=NONE\".s:r.      \" term=NONE\".s:r.\"'\"",68],["let s:vmode       = \"gui\"",132]],"useCount":5866},{"word":"vnoremap","context":[["vnoremap <C-Insert> \"+y",38],["vnoremap <BS> d",39],["vnoremap <S-Del> \"+x",38],["vnoremap <silent> * :call VisualSelection('f', '')<CR>",35],["vnoremap <silent> gv :call VisualSelection('gv', '')<CR>",47],["vnoremap / /\\v",54],["vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>",48],["vnoremap ; :",49],["vnoremap < <gv",111],["vnoremap > >gv",120]],"useCount":2279},{"word":"vt","context":[["let {a:vt}netrw_cinokeep  = &l:cino",19],["if !exists(\"{a:vt}netrw_optionsave\")",38],["unlet {a:vt}netrw_swfkeep",38],["if exists(\"{a:vt}netrw_swfkeep\")",19],["if exists(\"{a:vt}netrw_aikeep\")   |let &l:ai     = {a:vt}netrw_aikeep      |unlet {a:vt}netrw_aikeep   |endif",19],["let {a:vt}netrw_optionsave= 1",19],["let {a:vt}netrw_repkeep   = &l:report",19],["if exists(\"{a:vt}netrw_comkeep\")  |let &l:com    = {a:vt}netrw_comkeep     |unlet {a:vt}netrw_comkeep  |endif",19],["let {a:vt}netrw_dirkeep  = getcwd()",19],["if exists(\"{a:vt}netrw_cinkeep\")  |let &l:cin    = {a:vt}netrw_cinkeep     |unlet {a:vt}netrw_cinkeep  |endif",19]],"useCount":2590},{"word":"vundle","context":[["call vundle#begin()",206],["\"Filetype plugin indent on is required by vundle",69],["Bundle 'gmarik/vundle'",68],["\" Once you've updated the list of plugin, you can run vundle update by issuing",72],["\" This file contains the list of plugin installed using vundle plugin manager.",73],["\" Filetype off is required by vundle",75],["call vundle#rc()",150],["call vundle#end()            \" required",87],["set rtp+=~/.vim/bundle/vundle/",142],["call vundle#end()",145]],"useCount":3497},{"word":"w","context":[["\\'\\h\\w*')",205],["exe winnum . 'wincmd w'",372],["execute winnr.'wincmd w'",453],["setlocal complete=.,w,b,u,t,i",871],["wincmd w",1651],["\" let stripped = substitute( stripped, '\\(\\<\\w\\+\\>\\)\\s*', '\\1', 'g' )",135],["exec s:dbext_prev_winnr.\"wincmd w\"",165],["exec winnr . 'winc w'",140],["call s:NetrwOptionRestore(\"w:\")",137],["let stripped = substitute( stripped, '\\(\\<\\w\\+\\>\\)\\s*\\(\\n\\)', '\\1\\2', '' )",136]],"useCount":34305},{"word":"want","context":[["\" Add mappings, unless the user didn't want this.",45],["\" you want the traditional beginning of line, use ^",58],["\"if the node is open in a buffer, ask the user if they want to",48],["hi def link cOctalZero\t\tPreProc\t \" link this to Error if you want",49],["\" We don't want to use Ctrl-p as the mapping because",50],["\" If empty, check if they want to leave it empty",61],["\" Return to last edit position when opening files (You want this!)",65],["\"direction: 0 if you want to find the previous sibling, 1 for the next sibling",72],["\"for line continuation - i.e dont want C in &cpo",47],["\" several Tab workspaces and want to open two windows into the same file.",46]],"useCount":2209},{"word":"was","context":[["\" For version 6.x: Quit when a syntax file was already loaded",1544],["\" Only load this indent file when no other was loaded.",515],["\" QuitPre was added in Vim 7.3.544",66],["\" Quit when a (custom) syntax file was already loaded",212],["\" quit when a syntax file was already loaded",373],["\" Turn filetype detection off and back on again if it was already enabled.",56],["\" For version 6.x: Quit when a syntax file was already loaded.",61],["\" This scheme was created by CSApproxSnapshot",75],["return s:err('plug#begin was not called')",178],["\" Quit when a syntax file was already loaded",211]],"useCount":6621},{"word":"we","context":[["\"if we have no parent then we can have no siblings",72],["\"if we have no parent then we can have no siblings",72],["\"Note: we must match .. AND ../ cos sometimes the globpath returns",71],["\" Are we on a line with a file name?",68],["\" But a \"*/\" inside a cString in a cComment DOES end the comment!  So we",68],["\" Due to possibility that CSApprox is running (though I suppose we could just",73],["\" Since the string will be enclosed in single quotes, we must first",88],["\"if we are running windows then slap a drive letter on the front",90],["\" Undo the stuff we changed.",109],["\" Make sure we are in our window",132]],"useCount":14590},{"word":"when","context":[["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["\" For version 5.7 and earlier: only when not done already",1587],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["\" Only load this indent file when no other was loaded.",515],["\" quit when a syntax file was already loaded",373],["\" Quit when menu translations have already been done.",185],["\" Quit when a syntax file was already loaded",211],["\" Only when an item doesn't have highlighting yet",254],["\" Quit when a (custom) syntax file was already loaded",212],["\" Only do this when not done yet for this buffer",496]],"useCount":16438},{"word":"where","context":[["\" ,q to toggle quickfix window (where you have stuff like Ag)",50],["\"  cursor (where block is used): white",53],["\" Work around bug where URLs ending in / get handled as FTP",49],["\"  cursor (where underscore is used): #FFA560  255:165:96",55],["\" where:    start of current line",60],["\" In cases where Solarized is initialized inside a terminal vim session and",66],["\" here. It fires only in cases where vim is transferring from terminal to gui",66],["if lnum = where.call(name)",90],["where = proc { |name| (1..($curbuf.length)).find { |l| $curbuf[l] =~ /^[-+x*] #{name}:/ } }",90],["\\ \" where o.uid=u.uid \".",117]],"useCount":3438},{"word":"whether","context":[["\"Determines whether 2 path objects are \"equal\".",45],["\" Check whether this file is removed based on user request",98],["\" The difference is in whether a space is put in",76],["\"This function is used to determine whether the given line is commented with",69],["\" First check whether the file already exists",66],["\" Expression used to check whether we should skip a match with searchpair().",59],["\"   -forceNested: a flag indicating whether the called is requesting the comment",46],["\" determine whether to parse header files as well",41],["\" check whether to search for include files at all",40],["\"   -esc: specifies whether the tricky chars in the string are ESCed",46]],"useCount":2358},{"word":"which","context":[["\" Prompt for the variables which are part of",71],["unless `which pgrep 2> /dev/null`.empty?",89],["\" screenshots which will help you select either the light or dark background.",70],["\" need to use a special type of cString: cCommentString, which also ends on",68],["\" Highlight special characters (those which have a backslash) differently",172],["\"begin with \\n which will cause a \"press enter\" prompt.",45],["\" which will move us around by functions",45],["\" order, which can lead to missing filetype when jumping",62],["\" Construct execution string (four lines) which will be passed through filter",67],["\" Convenience wrapper around glob() which returns a list.",67]],"useCount":4524},{"word":"while","context":[["while i <= a:0",162],["while i < len(a:list)",134],["while i <= s:tlist_{ftype}_count",168],["while width > a:width",169],["while i < max",171],["while i < s:tlist_file_count",208],["while i < a:0",253],["while lnum > 0",303],["setlocal cinwords=if,else,while,do,for,switch",886],["while 1",2371]],"useCount":19302},{"word":"white","context":[["hi Cursor      guibg=#cc4455  guifg=white     ctermbg=4 ctermfg=15",91],["hi MatchParen     guifg=#f6f3e8     guibg=#857b6f     gui=BOLD      ctermfg=white       ctermbg=darkgray    cterm=NONE",59],["\" base2     #eee8d5  7/7 white    254 #d7d7af 92 -00  10 238 232 213  44  11  93",72],["\"when wanted, highlight trailing white space",89],["hi VertSplit      guibg=#cc4455  guifg=white    gui=none ctermbg=4  ctermfg=11",91],["hi Error    guibg=#ff0000  guifg=white        ctermbg=12  ctermfg=15",91],["hi StatusLineNC   guibg=#cc4455  guifg=white    gui=none ctermbg=4  ctermfg=11",91],["hi Constant    guibg=bg    guifg=white        ctermbg=8   ctermfg=15",91],["hi Visual      guibg=#557799  guifg=white    gui=none ctermbg=9 ctermfg=15",93],["hi IncSearch   guibg=#0066cc  guifg=white    gui=none ctermbg=1 ctermfg=15",93]],"useCount":2290},{"word":"width","context":[["return width",140],["if width > a:width",82],["if width == -1 && height == -1",87],["let width = 0",88],["let width -= s:wcswidth(char)",95],["throw \"vital: Data.String: Can't use non-half-width characters for padding.\"",125],["if a:width <= 0",135],["while width > a:width",169],["while width > a:width",169],["let width = s:wcswidth(a:str)",287]],"useCount":5858},{"word":"will","context":[["\"   'subtype' - all errors will be assigned the given subtype",75],["\" screenshots which will help you select either the light or dark background.",70],["\" Construct execution string (four lines) which will be passed through filter",67],["\" autocommand method is deemed excessively poor form, that approach will be",66],["\" file marked with ma. However, `a will jump to the line and column marked",66],["\" These are very similar keys. Typing 'a will jump to the line in the current",66],["\" used again and the autocommand below will be dropped.",66],["\" Since the string will be enclosed in single quotes, we must first",88],["\" don't use standard HiLink, it will not work with included syntax files",78],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125]],"useCount":8429},{"word":"win32","context":[["if has('win32')",585],["if has(\"win32\")",352],["if has('win32') || has('win64')",293],["if has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")",230],["if (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\"))",180],["if has(\"win32\") || has(\"win64\")",174],["\" -n  win32: quit being obnoxious about password",100],["if !has(\"win32\")",102],["if has(\"win16\") || has(\"win32\")",146],["if has('gui_running') && !has('win32')",152]],"useCount":4298},{"word":"win64","context":[["if has('win32') || has('win64')",293],["elseif has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")",57],["if !g:netrw_cygwin && (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\"))",66],["if has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")",230],["if (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\"))",180],["if has(\"win32\") || has(\"win64\")",174],["let s:is_win = has('win32') || has('win64')",95],["let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')",91],["if (has('win32') || has('win64'))",79],["if has('win32') || has('win64') || has('win32unix')",58]],"useCount":2062},{"word":"wincmd","context":[["exec s:dbext_prev_winnr.\"wincmd w\"",165],["call s:Tlist_Exe_Cmd_No_Acmds('wincmd p')",159],["wincmd P",313],["exe winnum . 'wincmd w'",372],["execute winnr.'wincmd w'",453],["wincmd _ | wincmd |",521],["wincmd _ | wincmd |",521],["wincmd t",691],["wincmd w",1651],["wincmd p",1940]],"useCount":12284},{"word":"window","context":[["call append(\"$\", \"\\t(local to window)\")",621],["\" Update the taglist window",168],["\" window",165],["call <SID>X(\"StatusLineNC\", s:window, s:foreground, \"reverse\")",156],["call <SID>X(\"VertSplit\", s:window, s:window, \"none\")",155],["call <SID>X(\"VertSplit\", s:window, s:window, \"none\")",155],["call <SID>X(\"StatusLine\", s:window, s:yellow, \"reverse\")",149],["\" Return to original window",144],["\" Go back to the original window",136],["\" Make sure we are in our window",132]],"useCount":21078},{"word":"windows","context":[["\"EG, in windows c:\\foo\\bar",45],["\"pathstr: the windows path to convert",45],["\"If running windows, cache the drive letter for this path",45],["\"we always wanna treat MS windows shortcuts as files for",45],["\" several Tab workspaces and want to open two windows into the same file.",46],["\" Resize windows with arrow keys",50],["\" => Moving around, tabs, windows and buffers",54],["\" Smart way to move between windows",65],["\"if we are running windows then slap a drive letter on the front",90],["\" windows",67]],"useCount":2517},{"word":"winnr","context":[["execute winnr.'wincmd w'",453],["let winnr = winnr()",335],["let winnr = winnr()",335],["if winnr != winnr()",239],["if winnr != winnr()",239],["for winnr in range(1,tabpagewinnr(tab,'$'))",225],["if winnr != -1",188],["if winnr > 0",173],["let save_winnr = winnr()",173],["if winnr() != winnum",181]],"useCount":11028},{"word":"winnum","context":[["if winnum == -1",226],["if winnr() != winnum",181],["let winnum = 1",79],["if org_winnr == winnum",67],["let winnum = winnr()",67],["if save_winnr != winnum",64],["call s:Tlist_Exe_Cmd_No_Acmds(winnum . 'wincmd w')",64],["exe winnum . 'wincmd w'",372],["let winnum = bufwinnr(g:TagList_title)",393],["if winnum != -1",306]],"useCount":2464},{"word":"with","context":[["\" Read the C syntax to start with",110],["\" Redistribution and use in source and binary forms, with or without",116],["\" flag an octal number with wrong digits",140],["\"integer number, or floating point number without a dot and with \"f\".",150],["with self.lock:",237],["\"               notice is copied with it. Like anything else that's free,",166],["\" Strip off column headers ending with a newline",182],["\"floating point number, starting with a dot, optional exponent",200],["\"floating point number, without dot, with exponent",202],["\"floating point number, with dot, optional exponent",212]],"useCount":21857},{"word":"without","context":[["\"floating point number, without dot, with exponent",202],["\"integer number, or floating point number without a dot and with \"f\".",150],["\" Same, but without octal error (for comments)",94],["Raises CmdTimedOut -> command exceeded timeout without new output",79],["\" allow the user to add vim plugins to yadr without the need for a fork.",55],["\"Gets the path without the last segment on the end.",53],["return s:error(\"Cannot find view without controller\")",49],["\"print as much of a:msg as possible without \"Press Enter\" prompt appearing",47],["\" return absolute classname, without leading \\",45],["\" Redistribution and use in source and binary forms, with or without",116]],"useCount":2388},{"word":"word","context":[["\" ,) or ,( Surround a word with (parens)",66],["let word = a:word",130],["let word = a:word",130],["\" locate the start of the word",98],["if word == ''",87],["\" ,[ Surround a word with [brackets]",67],["\" ,' Surround a word with 'single quotes'",67],["\" even if the cursor is halfway inside the word",66],["\" alias yw to yank the entire word 'yank inner word'",66],["return word",272]],"useCount":8943},{"word":"work","context":[["\"the work.",42],["\" For some reason this doesn't work as a regular set command,",62],["\" Setup the cpoptions properly for the maps to work",62],["\" note that link syntax to avoid duplicate configuration doesn't work with the",73],["call s:throw('no work tree')",77],["\" don't use standard HiLink, it will not work with included syntax files",78],["work_q.put(work)",79],["for work in plugs.items():",79],["\" Unfortunately this doesn't very well work for // type of comments :-(",100],["\"        but it won't work on Windows.",89]],"useCount":2284},{"word":"world","context":[["let world.state = ''",51],["return a:world",472],["let a:world.state = 'redisplay'",177],["let world.state = 'exit empty'",54],["if world.state =~ '\\<suspend\\>'",63],["call a:world.CloseScratch()",63],["\" TLogVAR world.prefidx",68],["let a:world.state = 'display'",141],["let world.state = 'redisplay'",112],["\" TLogVAR world.state",97]],"useCount":9827},{"word":"wrap","context":[["let l:wrap='\"'",49],["setlocal wrap",891],["set wrap",174],["exe 'let g:solarized_'.a:name.'='.l:wrap.a:default.l:wrap.'\"'",49],["let l:wrap=''",49],["exe 'let g:solarized_'.a:name.'='.l:wrap.a:default.l:wrap.'\"'",49],["if &l:wrap",79],["let restore .= '|call setwinvar(bufwinnr('.bufnr.'),\"&wrap\",1)'",73],["if &wrap",59],["set wrap \"Wrap lines",53]],"useCount":3303},{"word":"write","context":[["self.write(Action.ERROR, self.name, msg.split('\\n'))",79],["write",189],["self.write(Action.DONE, self.name, result[-1:])",158],["silent write!",150],["silent write",129],["self.write(Action.UPDATE, self.name, ['Updating ...'])",79],["self.write(Action.INSTALL, self.name, ['Installing ...'])",79],["self.write(Action.DONE, self.name, ['Already installed'])",79],["def write(self, action, name, msg):",79],["self.write(Action.ERROR, self.name, ['Interrupted!'])",79]],"useCount":4276},{"word":"www","context":[["\" Python allows case-insensitive Unicode IDs: http://www.unicode.org/charts/",30],["\"   http://www.vim.org/scripts/script.php?script_id=1643",31],["\" http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html",47],["\" Author   : Michael Sharpe (feline@irendi.com) www.irendi.com",32],["\" Idea from : http://www.charlietanksley.net/blog/blog/2011/10/18/vim-navigation-with-lustyexplorer-and-lustyjuggler/",49],["\" http://www.vim.org/scripts/script.php?script_id=2937",72],["\" http://www.frexx.de/xterm-256-notes/\"",72],["\" http://www.vim.org/scripts/script.php?script_id=3034",73],["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105],["\" @Website:     http://www.vim.org/account/profile.php?user_id=4037",341]],"useCount":2054},{"word":"x","context":[["if a:x < 75",332],["let l:m = (a:x - 55) % 40",333],["\" For version 6.x: Quit when a syntax file was already loaded",1544],["if a:x < 14",332],["let l:n = (a:x - 55) / 40",333],["let l:n = (a:x - 8) / 10",333],["let l:m = (a:x - 8) % 10",333],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["let ref = matchstr(getline('.'),'\\x\\{40\\}')",447],["\" For version 5.x: Clear all syntax items",1596]],"useCount":27151},{"word":"xml","context":[["\\                    .\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"${lang}\\\">\\n\"",105],["Rabbrev rx( render :xml\\ =>\\",49],["runtime! indent/xml.vim",48],["runtime! syntax/xml.vim",38],["autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags",136],["\\ 'gentoo-metadata': 'xml',",38],["let type = 'xml'",35],["return get({'rhtml': 'html', 'rxml': 'xml', 'rjs': 'js', 'haml': 'html'},fnamemodify(self.path(),':e'),'')",42],["let renderstr = \"xml << \".s:sub(renderstr,\"render \",\"render(\").\")\"",49],["\" xml",51]],"useCount":2660},{"word":"xs","context":[["let len = len(a:xs)",93],["for i in range(len(a:xs))",53],["let word = s:sub(word,'xe[ns]$','xs')",49],["return s:foldl(a:f, a:xs[0], a:xs[1:])",44],["for x in a:xs",80],["if len(a:xs) == 0",88],["return s:foldl(a:f, a:xs[0], a:xs[1:])",44],["return s:foldr(a:f, a:xs[-1], a:xs[0:-2])",44],["let border = len(a:xs)",44],["if eval(substitute(a:f, 'v:val', string(a:xs[i]), 'g'))",93]],"useCount":2460},{"word":"y","context":[["return 16 + (a:x * 16) + (a:y * 4) + a:z",328],["let l:y = <SID>rgb_number(a:g)",265],["nnoremap Y y$",229],["return 16 + (a:x * 36) + (a:y * 6) + a:z",332],["\\ input(printf('Revert the update of %s? (y/N) ', name)) !~? '^y'",84],["return s:rgb_color(l:x, l:y, l:z)",112],["\\ input(printf('Revert the update of %s? (y/N) ', name)) !~? '^y'",84],["fun <SID>rgb_colour(x, y, z)",196],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["return <SID>rgb_color(l:x, l:y, l:z)",130]],"useCount":6735},{"word":"yellow","context":[["call <SID>X(\"goTodo\", s:yellow, \"\", \"\")",97],["call <SID>X(\"rubyAccess\", s:yellow, \"\", \"\")",96],["call <SID>X(\"rubyConstant\", s:yellow, \"\", \"\")",179],["call <SID>X(\"cType\", s:yellow, \"\", \"\")",174],["\" yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71",73],["call <SID>X(\"Search\", s:background, s:yellow, \"\")",144],["let s:yellow      = \"3\"",85],["call <SID>X(\"ShowMarksHLu\", s:yellow, s:background, \"none\")",94],["call <SID>X(\"StatusLine\", s:window, s:yellow, \"reverse\")",149],["\" yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71",73]],"useCount":4204},{"word":"yet","context":[["\" Skip files which are not readable or files which are not yet stored",35],["\" If the tag types for this filetype are not yet created, then create",34],["\" For version 5.8 and later: only when an item doesn't have highlighting yet",1588],["\" Only do this when not yet done for this buffer",33],["echo 'Feature not yet available'",250],["\" rake routes doesn't support ACTION... yet...",37],["\" Reserved (but not yet used) keywords {{{2",39],["\" Only used when an item doesn't have highlighting yet",106],["\" Only when an item doesn't have highlighting yet",254],["\" Only do this when not done yet for this buffer",496]],"useCount":3469},{"word":"you","context":[["\"        Tag             you can use CTRL-] on this",70],["\" the first quote will autoclose so you'll get 'foo' and hitting <c-a> will",63],["\" FIXME: will not properly repeat when you use a dot (tie into repeat.vim)",125],["\" screenshots which will help you select either the light or dark background.",70],["\"   \" Make sure you use single quotes",89],["\" this is helpful to paste someone the path you're looking at",67],["\" is impossible to fix because the only way to know if you are inside a",72],["\" Once you've updated the list of plugin, you can run vundle update by issuing",72],["\"direction: 0 if you want to find the previous sibling, 1 for the next sibling",72],["\" Once you've updated the list of plugin, you can run vundle update by issuing",72]],"useCount":7099},{"word":"your","context":[["\" Edit your .vimrc",90],["\\'\" To use, place these commands in your .vimrc file (replacing any',",49],["\" The following are the preferred 16 colors for your terminal",70],["\" After either Option 1 or Option 2 above, put the following two lines in your",70],["\" All of your Plugins must be added before the following line",81],["\\'\" included in your .vimrc as they are currently set to their defaults.',",49],["\"When typing a string, your quotes auto complete. Move past the quote",66],["\\ ' from your database.  Please also send this SQL to the'.",66],["\" 2.  Move `solarized.vim` to your `.vim/colors` directory.",67],["\" Turn off Solarized menu by including the following assignment in your .vimrc:",48]],"useCount":3669},{"word":"z","context":[["return 16 + (a:x * 16) + (a:y * 4) + a:z",328],["return a:repo =~? '^[a-z]:\\|^[%~]'",72],["let l:z = <SID>rgb_number(a:b)",265],["return 16 + (a:x * 36) + (a:y * 6) + a:z",332],["return <SID>rgb_colour(l:x, l:y, l:z)",400],["fun <SID>rgb_colour(x, y, z)",196],["normal! z.",152],["return <SID>rgb_color(l:x, l:y, l:z)",130],["return s:rgb_color(l:x, l:y, l:z)",112],["exe \"normal `z\"",75]],"useCount":6378},{"word":"zA","context":[["let mx = '<\\(/\\{0,1}[a-zA-Z][a-zA-Z0-9]*\\)[^>]*>'",34],["let tag_name = matchstr(content, '^<\\zs[a-zA-Z0-9:_\\-]*\\ze')",46],["let self.drive = substitute(a:fullpath, '\\(^[a-zA-Z]:\\).*', '\\1', '')",45],["\\ '^&\\?\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze')",42],["let pos1 = searchpos('<' . tag_name[1:] . '[^a-zA-Z0-9]', 'bcnW')",72],["\\ '^&\\?\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze')",42],["let mx = 'https\\=:\\/\\/[-!#$%&*+,./:;=?@0-9a-zA-Z_~]\\+'",35],["let tag_name = substitute(content, '^<\\(/\\{0,1}[a-zA-Z0-9]*\\).*$', '\\1', '')",34],["let mx = '<\\(/\\{0,1}[a-zA-Z][a-zA-Z0-9]*\\)[^>]*>'",34],["\\ 'v:val =~ \"function\\\\s\\\\+&\\\\?[a-zA-Z_\\\\x7f-\\\\xff][a-zA-Z_0-9\\\\x7f-\\\\xff]*\\\\s*(\"')",34]],"useCount":3798},{"word":"ze","context":[["let lnum = matchstr(getline('.'),' \\zs\\d\\+\\ze\\s\\+[([:digit:]]')",132],["\\ end=\"^\\ze\\%(\\s*$\\|=\\K\\)\"",160],["let path = matchstr(getline('.'),'^\\^\\=\\x\\+\\s\\+\\zs.\\{-\\}\\ze\\s*\\d\\+ ')",132],["return matchstr(a:str, '^'.a:prefix.' \\zs[^:]\\+\\ze:.*'.a:suffix.'$')",89],["call map(a:args,'s:sub(v:val,\"^\\\\ze[^-]\",\"-\")')",75],["let col_names  = matchstr(g:dbext_dbi_result,'DBI:.\\{-}\\zsTABLE_CAT.\\{-}\\ze\\n')",66],["let dref = matchstr(line,'\\Cdiff --git \\zs\\%(a/.*\\|/dev/null\\)\\ze \\%(b/.*\\|/dev/null\\)')",73],["let file = matchstr(getline('.'),\"'\\\\zs\\\\S\\\\+\\\\ze'\")",75],["let file = '/'.matchstr(getline('.'),'.*\\ze: needs merge$')",75],["let dref = matchstr(getline('.'),'\\Cdiff --git \\zs\\%(a/.*\\|/dev/null\\)\\ze \\%(b/.*\\|/dev/null\\)')",75]],"useCount":6526},{"word":"zs","context":[["return matchstr(expand('<sfile>'), '<SNR>\\zs\\d\\+\\ze__SID$')",278],["let rev = matchstr(self.spec(),'^fugitive://.\\{-\\}//\\zs.*')",146],["let path = matchstr(getline('.'),'^\\^\\=\\x\\+\\s\\+\\zs.\\{-\\}\\ze\\s*\\d\\+ ')",132],["let lnum = matchstr(getline('.'),' \\zs\\d\\+\\ze\\s\\+[([:digit:]]')",132],["let split = split(a:path,'\\\\\\@<!\\%(\\\\\\\\\\)*\\zs,')",103],["return matchstr(a:str, '^'.a:prefix.' \\zs[^:]\\+\\ze:.*'.a:suffix.'$')",89],["return matchstr(self.getline(1),'\\C# rake \\zs.*')",82],["\\ end=\"\\z1\\zs\"",77],["let commit = matchstr(getline('.'),'^\\^\\=\\zs\\x\\+')",76],["let type = matchstr(getline(line('.')+1),'type \\zs.*')",76]],"useCount":12770},{"word":"~","context":[["if &shell =~# 'csh'",160],["set rtp+=~/.vim/bundle/Vundle.vim",157],["if output !~ s:DB_escapeStr(terminator) .",152],["call map(matches,'v:val[ strlen(self.tree())+(a:base !~ \"^/\") : -1 ]')",152],["let showtree = (getline(1) =~# '^tree ' && getline(2) == \"\")",152],["call map(matches,'v:val !~ \"/$\" && isdirectory(v:val) ? v:val.\"/\" : v:val')",151],["if a:str =~# '^[\\x00-\\x7f]*$'",151],["if RailsFilePath() =~ '\\<vendor/plugins/.'",145],["set rtp+=~/.vim/bundle/vundle/",142],["call plug#begin('~/.config/nvim/plugged')",142]],"useCount":71534},{"word":"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀","context":[["\\ \"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\",",2832]],"useCount":2832}]