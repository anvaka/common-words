[{"word":"\f","context":[["\f;;;",13],["v0)) \f",16],[";;; \f",19],["V0))\f",19],[";; \f",30],["\f",181],["\f",8353]],"useCount":8631},{"word":"0x8000","context":[["\"14\" \"15\" \"16\" \"17\" \"18\" \"19\" \"..\" \"0x8000..\"))",417],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"..\" \"0x8000..\"))",426],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"..\" \"0x8000..\"))",419],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"..\" \"0x8000..\"))",418],["\"14\" \"15\" \"16\" \"..\" \"0x8000..\"))",417],["\"0x8000..\"))",22]],"useCount":2119},{"word":"A","context":[[":CF 'A",144],["A",152],["A Null return indicates the implementation (provider) does not implement this property.",1251],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126],["2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values.",417],["A return code of 0 shall indicate the state change was successfully initiated.",344],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343],[":CF 'A))",340],["(temperature A COLD)",103],["(last-scheduled A 0)",103]],"useCount":11163},{"word":"ARRAY","context":[["\"ARRAY-DISPLACEMENT\"",37],["(OPERATIONALSTATUS (ARRAY UINT16) :CIM-NAME \"OperationalStatus\"",418],["(STATUSDESCRIPTIONS (ARRAY STRING) :CIM-NAME",417],["(AVAILABLEREQUESTEDSTATES (ARRAY UINT16) :CIM-NAME",343],["(POLICYKEYWORDS (ARRAY STRING) :CIM-NAME \"PolicyKeywords\"",39],["(SELECTEDSTATISTICS (ARRAY STRING) \"SelectedStatistics\" :IN",44],["(ADDITIONALAVAILABILITY (ARRAY UINT16) :CIM-NAME",118],["(POWERMANAGEMENTCAPABILITIES (ARRAY UINT16) :CIM-NAME",122],["(OTHERIDENTIFYINGINFO (ARRAY STRING) :CIM-NAME",137],["(IDENTIFYINGDESCRIPTIONS (ARRAY STRING) :CIM-NAME",137]],"useCount":2079},{"word":"Applicable","context":[["\"Not Applicable\" \"DMTF Reserved\" \"Vendor Reserved\"))",344],["\"Not Applicable\" \"DMTF Reserved\"))",343],["Not Applicable (5) indicates the element does not support being enabled or disabled.",336],["\"Not Applicable\" \"Power Off\" \"Off Line\" \"Off Duty\"",235],["(\"Other\" \"Unknown\" \"Enabled\" \"Disabled\" \"Not Applicable\"))",117],["(\"Other\" \"Unknown\" \"None/Not Applicable\" \"Broken\" \"Data Lost\"",20],["(\"Unknown\" \"Not Applicable\" \"Removable when off\"",14],["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["\"Caldera Open UNIX\" \"OpenBSD\" \"Not Applicable\" \"Windows XP\"",28]],"useCount":2124},{"word":"Author","context":[[";;; Author      : Dan Bothell",111],[";;;; Author:   Paul Dietz",1211],["Author: Nicolas Hafner <shinmera@tymoon.eu>",791],[";;;; Author: Moskvitin Andrey <archimag@gmail.com>",130],[";;;; Author(s): Neil T. Dantam <ntd@gatech.edu>",124],[";; Author          : Sam Owre",115],["; Author: David Torralba",76],[";;;    Author: Gilbert Baumann <unk6@rz.uni-karlsruhe.de>",74],[";; Author: David O'Toole <dto@ioforms.org>",60],[";; Author: Didier Verna <didier@didierverna.net>",60]],"useCount":3431},{"word":"B","context":[["(temperature B COLD)",101],["(last-scheduled B 0)",101],["(is-object B)",186],["'(#\\a . 3) '(#\\B . 4)  '(#\\c . 5)",44],["(object B)",79],["(clear B)",64],["(B CFFI-FNV-COMPLEX-FLOAT) (LDB FORTRAN-INT)",55],["(B CFFI-FNV-COMPLEX-DOUBLE) (LDB FORTRAN-INT)",53],["(on B C)",48],["(on-table B)",44]],"useCount":2746},{"word":"Base","context":[[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10; Package: utils -*-",58],[";;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Package: OCML;   -*-",60],[";;; -*- Mode: Lisp; Syntax: Ansi-Common-Lisp; Package: RACER; Base: 10 -*-",80],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: HUNCHENTOOT; Base: 10 -*-",92],[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-",99],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-PPCRE; Base: 10 -*-",113],[";;;  -*- mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-",123],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],[";;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10 -*-",427],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465]],"useCount":2816},{"word":"Boston","context":[[";; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",207],[";;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",702],[";;; Boston, MA  02111-1307  USA.",466],[";;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",173],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",147],[";;;  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",27],[";; Boston, MA 02111-1307 USA",116],[";;;;    Boston, MA 02111-1307 USA",61],[";;; Boston, MA 02111-1307 USA",31],[";; Boston, MA 02110-1301, USA.",38]],"useCount":2068},{"word":"C","context":[["(not (lsame trans \"C\")))",55],["(setq C 0)",127],[";;; C prototypes",60],["(object C)",70],["(C-TYPES:DEFUN-DLL",82],[";;;;  -*- Mode: Lisp; Syntax: Common-Lisp; Package: C -*-",105],["(setq C (+ C 1))",115],["(setq C (+ C 1))",115],["(on-table C)",59],[";;; (C) 2005-2015 Philippe Brochard <pbrochard@common-lisp.net>",53]],"useCount":4160},{"word":"CATEGORY","context":[["(:CATEGORY \"movie-west\"",5093],["(:CATEGORY \"tv-drama\"",2245],["(:CATEGORY \"movie-other\"",4930],["(:CATEGORY \"movie-japan\"",1049],["(:CATEGORY \"documentary\"",2428],["(:CATEGORY \"animation\"",1549],["(:CATEGORY \"movie-chinese\"",1508]],"useCount":18802},{"word":"CFFI","context":[["(A CFFI-FNV-COMPLEX-FLOAT) (LDA FORTRAN-INT)",84],["(CFFI:DEFCFUN",66],["(IWORK CFFI-FNV-INT32) (LIWORK FORTRAN-INT) (INFO FORTRAN-INT))",31],["(IWORK CFFI-FNV-INT32) (INFO FORTRAN-INT))",55],["(WORK CFFI-FNV-DOUBLE) (IWORK CFFI-FNV-INT32)",28],["(B CFFI-FNV-COMPLEX-FLOAT) (LDB FORTRAN-INT)",55],["(B CFFI-FNV-COMPLEX-DOUBLE) (LDB FORTRAN-INT)",53],["(A CFFI-FNV-COMPLEX-DOUBLE) (LDA FORTRAN-INT)",85],[";;; Low-level CFFI wrappers",44],["(WORK CFFI-FNV-DOUBLE) (IWORK CFFI-FNV-INT32)",28]],"useCount":2042},{"word":"CIM","context":[["(OPERATIONALSTATUS (ARRAY UINT16) :CIM-NAME \"OperationalStatus\"",418],["(CAPTION STRING :CIM-NAME \"Caption\" :QUALIFIERS",824],["(DESCRIPTION STRING :CIM-NAME \"Description\" :QUALIFIERS",821],["(ELEMENTNAME STRING :CIM-NAME \"ElementName\" :QUALIFIERS",818],["(INSTANCEID STRING :CIM-NAME \"InstanceID\" :QUALIFIERS",739],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["(NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",463],["(CREATIONCLASSNAME STRING :CIM-NAME \"CreationClassName\"",433],["(HEALTHSTATE UINT16 :CIM-NAME \"HealthState\" :QUALIFIERS",418],["(STATUS STRING :CIM-NAME \"Status\" :QUALIFIERS",417]],"useCount":19717},{"word":"CIM_EnabledLogicalElement","context":[["((:DEPRECATED (\"CIM_EnabledLogicalElement.EnabledState\"))",139],["(\"CIM_EnabledLogicalElement.OtherEnabledState\")))",343],["\"CIM_EnabledLogicalElement.EnabledState\")))",343],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))",343],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))))",343],["\"CIM_EnabledLogicalElement.RequestedState\"",343],["(:DEPRECATED (\"CIM_EnabledLogicalElement.RequestStateChange\"))",354],["(\"CIM_EnabledLogicalElement.PrimaryStatus\"",417],["(\"CIM_EnabledLogicalElement.EnabledState\")))",1110],["(\"CIM_EnabledLogicalElement.RequestStateChange\"",686]],"useCount":4455},{"word":"CIM_ManagedSystemElement","context":[["((:DEPRECATED (\"CIM_ManagedSystemElement.OperationalStatus\"))",535],["\"CIM_ManagedSystemElement.HealthState\")))",834],["(\"CIM_ManagedSystemElement.DetailedStatus\"",417],["(\"CIM_ManagedSystemElement.StatusDescriptions\")))",416],["(\"CIM_ManagedSystemElement.OperationalStatus\")))",423],["(MSE \"CIM_ManagedSystemElement\" \"MSE\" :IN",24],[":INITFORM \"CIM_ManagedSystemElement\"))",11]],"useCount":2660},{"word":"CL","context":[["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::FUNCTION-DOC-BIT",43],[";;;   Clozure CL is referenced in the preamble as the \"LIBRARY.\"",130],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],[";;;   This file is part of Clozure CL.",130],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-PPCRE; Base: 10 -*-",113],[";;;  -*- mode: LISP; Package: CL-USER; Syntax: COMMON-LISP;  Base: 10 -*-",37],["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::GENERIC-FUNCTION-DOC-BIT",34],["(:use \"CL\")",44],["(in-package \"CL-USER\")",84]],"useCount":3020},{"word":"COMMON","context":[[";;;  -*- mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-",123],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-PPCRE; Base: 10 -*-",113],["\"COM.INFORMATIMAGO.COMMON-LISP.CESARUM.SIMPLE-TEST\"",110],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: HUNCHENTOOT; Base: 10 -*-",92],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],["(:use \"COMMON-LISP\")",311],["\"COM.INFORMATIMAGO.COMMON-LISP.CESARUM.UTILITY\"",71],["\"COM.INFORMATIMAGO.COMMON-LISP.CESARUM.STRING\"",61],["(in-package \"COMMON-LISP-USER\")",200],["(:use \"COMMON-LISP\"",380]],"useCount":2740},{"word":"CORRESPONDENCE","context":[["(:MODEL-CORRESPONDENCE (\"CIM_StorageExtent.NameFormat\")))",19],["(:MODEL-CORRESPONDENCE (\"CIM_StorageExtent.NameNamespace\")))",19],["(:MODEL-CORRESPONDENCE (\"CIM_Controller.ProtocolSupported\")))",20],["(:MODEL-CORRESPONDENCE (\"CIM_StatisticalData.StartStatisticTime\")))))",22],["(:MODEL-CORRESPONDENCE (\"CIM_StatisticalData.StatisticTime\")))))",22],["(:MODEL-CORRESPONDENCE (\"CIM_ManagedElement.ElementName\")))",41],["(:MODEL-CORRESPONDENCE (\"CIM_LogicalDevice.Availability\")))",118],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))",343],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))))",343],["(:MODEL-CORRESPONDENCE",6076]],"useCount":7132},{"word":"Caption","context":[["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["(CAPTION STRING :CIM-NAME \"Caption\" :QUALIFIERS",824]],"useCount":1648},{"word":"Common","context":[[";; @std       Common Lisp",156],[";; -*- Mode:Lisp; Syntax:ANSI-Common-LISP; Coding:us-ascii-unix; fill-column:158 -*-",157],[";;; Using Lisp CMU Common Lisp 19f (19F)",314],[";;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10 -*-",427],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465],[";;;;SYSTEM:             Common-Lisp",1072],[";;; Using Lisp CMU Common Lisp 20d (20D Unicode)",208],[";;;; cl-ana is a Common Lisp data analysis library.",162],["\"Clozure Common Lisp\"",177],[";;;;LANGUAGE:           Common-Lisp",1095]],"useCount":7336},{"word":"D","context":[["D2 (orthogonal-projection-unique-equalp D '(1 0 1 0 0)))",41],["(on C D)",29],["(on-table D)",41],[";;; Ph.D. Student, University of Edinburgh",33],["(object D)",30],["D",81],["D1 (orthogonal-projection-unique-equalp D '(1 1 0 0 0)))",41],["(nth-list '(0 1) (nth (first x) D)))) Idx))",47],["(translation P2 (nth i T2)) D '(1 0 1 0 0)))",48],["(nth (first x) D))) Idx))",66]],"useCount":1779},{"word":"DEPRECATED","context":[["((:DEPRECATED (\"CIM_DeviceErrorData.LastErrorCode\"))",118],["((:DEPRECATED (\"CIM_DeviceErrorData.ErrorDescription\"))",118],["((:DEPRECATED (\"CIM_ManagedSystemElement.OperationalStatus\"))",535],["(:DEPRECATED (\"CIM_EnabledLogicalElement.RequestStateChange\"))",354],["((:DEPRECATED (\"No value\"))",301],["(:QUALIFIERS (:DEPRECATED (\"CIM_Service.RequestStateChange\"))",234],["((:DEPRECATED",213],["((:DEPRECATED (\"CIM_EnabledLogicalElement.EnabledState\"))",139],["(:QUALIFIERS (:DEPRECATED (\"CIM_PowerManagementService.SetPowerState\"))",122],["((:DEPRECATED (\"CIM_PowerManagementCapabilities\"))",119]],"useCount":2585},{"word":"DESCRIPTION","context":[["(:KEY (:DESCRIPTION \"The Name of the scoping System.\")",161],["(:DESCRIPTION \"The CreationClassName of the scoping System.\")",161],["(:KEY (:DESCRIPTION \"The scoping System's Name.\")",150],["(:KEY (:DESCRIPTION \"The scoping System's CreationClassName.\")",149],[":DESCRIPTION",139],["(:DESCRIPTION \"If TRUE enable the device, if FALSE disable the device.\")))",118],["(DESCRIPTION STRING :CIM-NAME \"Description\" :QUALIFIERS",821],[";;;;DESCRIPTION",1129],["(:DESCRIPTION",11097],["((:DESCRIPTION",14846]],"useCount":29279},{"word":"DICTIONARY","context":[["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126],["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841]],"useCount":4165},{"word":"DMTF","context":[["\"Relocating\" \"DMTF Reserved\" \"Vendor Reserved\"))",417],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["\"DMTF Reserved\" \"Vendor Specific\")))",428],["(\"Unknown\" \"OK\" \"Degraded\" \"Error\" \"DMTF Reserved\"",418],["\"Supporting Entity in Error\" \"DMTF Reserved\"",417],["DMTF has reserved the unused portion of the continuum for additional HealthStates in the future.\")",417],["\"In Test\" \"Transitioning\" \"In Service\" \"DMTF Reserved\"",417],["\"Lost Communication\" \"No Contact\" \"DMTF Reserved\"",417],["(:MAPPING-STRINGS (\"MIF.DMTF|ComponentID|001.5\")))",417],["\"Failed\" \"Invalid Parameter\" \"In Use\" \"DMTF Reserved\"",349]],"useCount":7589},{"word":"Degraded","context":[["(\"OK\" \"Error\" \"Degraded\" \"Unknown\" \"Pred Fail\" \"Starting\"",417],["(\"Unknown\" \"OK\" \"Degraded\" \"Error\" \"DMTF Reserved\"",418],["(\"Unknown\" \"Other\" \"Information\" \"Degraded/Warning\" \"Minor\"",26],["3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed.",26],["(\"Unknown\" \"OK\" \"Degraded/Warning\" \"Minor failure\"",419],["\\\"Degraded\\\" indicates the ManagedElement is functioning below normal.",417],["(\"Unknown\" \"Other\" \"OK\" \"Degraded\" \"Stressed\"",417],["\"Degraded\" \"Not Installed\" \"Install Error\"",235]],"useCount":2375},{"word":"Description","context":[[";;; Description:",150],[";;; Description:",77],["*Description:*",72],["Description",53],["\"The Description property provides a textual description of the object.\"))",799],["(DESCRIPTION STRING :CIM-NAME \"Description\" :QUALIFIERS",821],["(\"Description\")]",21],["*Description*:",21],["Description:~@",41],["((:OVERRIDE \"Description\")",46]],"useCount":2150},{"word":"Disabled","context":[["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\" \"Quiesce\"",344],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\"",377],["\"Partially Exposed\" \"Protection Disabled\" \"Readying\"",20],["(\"Unknown\" \"Enabled\" \"Disabled\" \"Shut Down\" \"No Change\"",687],["(\"Unknown\" \"Other\" \"Enabled\" \"Disabled\" \"Shutting Down\"",344],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["(\"Unknown\" \"Not Supported\" \"Disabled\" \"Enabled\"",122],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],["Shutting Down (4) indicates that the element is in the process of going to a Disabled state.",336],["(\"Other\" \"Unknown\" \"Enabled\" \"Disabled\" \"Not Applicable\"))",117]],"useCount":3026},{"word":"Dormant","context":[["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832],["\"Lost Communication\" \"Aborted\" \"Dormant\"",417],["\"Stopped\" \"Aborted\" \"Dormant\" \"Completed\" \"Migrating\"",417]],"useCount":1666},{"word":"Down","context":[["(#\\Page-Down . #\\Page-Down)",26],["(#\\Down-Arrow . #\\Down-Arrow)",26],["(#\\Down-Arrow . #\\Down-Arrow)",26],["Shutting Down (4) indicates that the element is in the process of going to a Disabled state.",336],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\" \"Quiesce\"",344],["(\"Unknown\" \"Other\" \"Enabled\" \"Disabled\" \"Shutting Down\"",344],["(\"Unknown\" \"Enabled\" \"Disabled\" \"Shut Down\" \"No Change\"",687],["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\"Emigrating\" \"Immigrating\" \"Snapshotting\" \"Shutting Down\"",417],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\"",377]],"useCount":3058},{"word":"END","context":[[";;;; THE END ;;;;",875],[");END foreach",43],[");END if",132],[");END progn",78],[");END subcond",54],["continuing to frame number END or, if END is nil, the last frame on the",34],["continuing to frame number END or, if END is nil, the last frame on the",34],["); END if",39],[");END defun",36],[");END cond",34]],"useCount":1976},{"word":"ENT","context":[["(setq ENT (entlast))(RFL:PUTPREVENT ENT PREVENT)(RFL:PUTNEXTENT PREVENT ENT)(setq PREVENT ENT)",108],["(setq ENT (entlast))(RFL:PUTPREVENT ENT PREVENT)(RFL:PUTNEXTENT PREVENT ENT)(setq PREVENT ENT)",108],["(setq ENT (entlast))(RFL:PUTPREVENT ENT PREVENT)(RFL:PUTNEXTENT PREVENT ENT)(setq PREVENT ENT)",108],["(setq ENT (entlast))(RFL:PUTPREVENT ENT PREVENT)(RFL:PUTNEXTENT PREVENT ENT)(setq PREVENT ENT)",108],["(setq ENT (entnext ENT))",326],["(setq ENT (entnext ENT))",326],["(setq ENTLIST (entget ENT))",457],["(if (= (type ENT) 'ENAME)",27],["(setq ENT (entlast))",39],["(entupd ENT)",30]],"useCount":1897},{"word":"ENTLIST","context":[["(setq INLINE (cdr (assoc 1 ENTLIST)))",96],["(setq P3 (cdr (assoc 10 ENTLIST)))",41],["TMP (cdar ENTLIST)",42],["(setq P1 (cdr (assoc 10 ENTLIST)))",50],["(setq ENTLIST (cdr ENTLIST))",53],["(setq ENTLIST (cdr ENTLIST))",53],["(entmake ENTLIST)",168],["ENTLIST (cdr ENTLIST)",315],["ENTLIST (cdr ENTLIST)",315],["(setq ENTLIST (entget ENT))",457]],"useCount":2244},{"word":"ERROR","context":[["(ERROR 'OMG.ORG/CORBA:NO_IMPLEMENT))",61],["(FUNCALL PARSE-ERROR",219],["(TYPE-ERROR NIL T)",404],["(OCL::ERROR-RETURNED (:POINTER OCL::INT)))",28],["(:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))",439],["(ERROR NIL NIL)",442],["(OTHERWISE (FUNCALL PARSE-ERROR 'NIL '((T_SEMICOLON))))))",27],["(OTHERWISE (FUNCALL PARSE-ERROR '(T_SEMICOLON) 'NIL))))",16],["(OTHERWISE (FUNCALL PARSE-ERROR 'NIL '((T_IDENTIFIER))))))",17],["(addr (if (not (find-symbol \"SOCKET-ERROR\" :ext))",16]],"useCount":2090},{"word":"Emacs","context":[["\"Like y-or-n-p, but ask in the Emacs minibuffer.\"",34],[";;; Emacs and Lisp. Each has a socket stream, a set of user I/O",34],["\"Return a readable value of FORM for editing in Emacs.",34],["When Emacs presents the message it already has the source popped up",63],["\"Briefly describe a compiler error for Emacs.",63],["\"Describe a compiler error for Emacs including context information.\"",51],["in Emacs.\"",38],["\"A mapping from tempfile names to Emacs buffer names.\")",35],["\"Make an apropos search for Emacs.",34],["This is the entry point for Emacs.\"",34]],"useCount":2826},{"word":"Enabled","context":[["Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.\")",336],["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["(\"Unknown\" \"Other\" \"Enabled\" \"Disabled\" \"Shutting Down\"",344],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\" \"Quiesce\"",344],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["(\"Unknown\" \"Enabled\" \"Disabled\" \"Shut Down\" \"No Change\"",687],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\"",377],["(\"Unknown\" \"Not Supported\" \"Disabled\" \"Enabled\"",122],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336]],"useCount":3825},{"word":"EnabledState","context":[["(\"CIM_EnabledLogicalElement.EnabledState\")))",1110],["((:OVERRIDE \"EnabledState\")",30],["((:DEPRECATED (\"CIM_EnabledLogicalElement.EnabledState\"))",139],["(ENABLEDSTATE UINT16 :CIM-NAME \"EnabledState\" :QUALIFIERS",341],["\"CIM_EnabledLogicalElement.EnabledState\")))",343]],"useCount":1963},{"word":"Error","context":[["(\"Unknown\" \"OK\" \"Degraded\" \"Error\" \"DMTF Reserved\"",418],["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["\"Predictive Failure\" \"Error\" \"Non-Recoverable Error\"",417],["\"Supporting Entity in Error\" \"Completed\" \"Power Mode\"",417],["\"Predictive Failure\" \"Error\" \"Non-Recoverable Error\"",417],["\\\"Error\\\" indicates the ManagedElement is in an Error condition.\")",417],["\"Supporting Entity in Error\" \"DMTF Reserved\"",417],["(\"OK\" \"Error\" \"Degraded\" \"Unknown\" \"Pred Fail\" \"Starting\"",417],["\\\"Error\\\" indicates the ManagedElement is in an Error condition.\")",417],["\"Predictive Failure\" \"Non-Recoverable Error\"",417]],"useCount":6049},{"word":"Exp","context":[[";;;  \"f2cl2.l,v 1.37 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;;  \"f2cl3.l,v 1.6 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;;  \"f2cl6.l,v 1.48 2008/08/24 00:56:27 rtoy Exp $\"",372],[";;;  \"f2cl4.l,v 1.7 2008/02/22 22:19:34 rtoy Exp $\"",372],[";;;  \"macros.l,v 1.112 2009/01/08 12:57:19 rtoy Exp $\")",317],[";;; (\"f2cl1.l,v 1.215 2009/04/07 22:05:21 rtoy Exp $\"",315],[";;;  \"f2cl5.l,v 1.200 2009/01/19 02:38:17 rtoy Exp $\"",314],[";;; (\"f2cl1.l,v 1.221 2010/05/26 19:25:52 rtoy Exp $\"",47],[";;;  \"f2cl5.l,v 1.204 2010/02/23 05:21:30 rtoy Exp $\"",55],[";;;  \"macros.l,v 1.114 2010/05/17 01:42:14 rtoy Exp $\")",55]],"useCount":2641},{"word":"FILE","context":[["The server port is written to PORT-FILE-NAME.\"",34],["See FILE\")",31],[";;; source-location for a function, and we also have FILE-SOURCE-LOCATION &co",34],["\"Start the server and write the listen port number to PORT-FILE.",34],["(in-package #I@FILE)",34],["\"RENAME-FILE\"",39],["\"FILE-WRITE-DATE\"",39],["\"Returns true if NEW-FILE is newer than OLD-FILE.\"",58],["\"Returns true if NEW-FILE is newer than OLD-FILE.\"",58],[";;;; FILE IDENTIFICATION",532]],"useCount":1825},{"word":"FNV","context":[["(B CFFI-FNV-COMPLEX-FLOAT) (LDB FORTRAN-INT)",55],["(IWORK CFFI-FNV-INT32) (INFO FORTRAN-INT))",55],["(A CFFI-FNV-COMPLEX-DOUBLE) (LDA FORTRAN-INT)",85],["(B CFFI-FNV-COMPLEX-DOUBLE) (LDB FORTRAN-INT)",53],["(IWORK CFFI-FNV-INT32) (LIWORK FORTRAN-INT) (INFO FORTRAN-INT))",31],["(WORK CFFI-FNV-DOUBLE) (IWORK CFFI-FNV-INT32)",28],["(WORK CFFI-FNV-DOUBLE) (IWORK CFFI-FNV-INT32)",28],["(WORK CFFI-FNV-COMPLEX-FLOAT) (RWORK CFFI-FNV-FLOAT)",28],["(A CFFI-FNV-COMPLEX-FLOAT) (LDA FORTRAN-INT)",84],["(WORK CFFI-FNV-COMPLEX-FLOAT) (RWORK CFFI-FNV-FLOAT)",28]],"useCount":1751},{"word":"FORTRAN","context":[["(B CFFI-FNV-COMPLEX-FLOAT) (LDB FORTRAN-INT)",55],["(A CFFI-FNV-COMPLEX-FLOAT) (LDA FORTRAN-INT)",84],["(M FORTRAN-INT) (N FORTRAN-INT) (K FORTRAN-INT)",44],["(B CFFI-FNV-COMPLEX-DOUBLE) (LDB FORTRAN-INT)",53],["(A CFFI-FNV-COMPLEX-DOUBLE) (LDA FORTRAN-INT)",85],["(LWORK FORTRAN-INT) (INFO FORTRAN-INT))",87],["(LWORK FORTRAN-INT) (INFO FORTRAN-INT))",87],["(INFO FORTRAN-INT))",376],["(M FORTRAN-INT) (N FORTRAN-INT) (K FORTRAN-INT)",44],["(IWORK CFFI-FNV-INT32) (INFO FORTRAN-INT))",55]],"useCount":2309},{"word":"FUNCTION","context":[["(RT-FUNCTION",127],["\"Return the call sites of FUNCTION-NAME (a symbol).",54],["(c-GLOBAL-FUNCTION-CALL-form",49],["'(FTYPE (FUNCTION",57],[":KIND FUNCTION",77],[";;; fuzzy: we have FUNCTION-SOURCE-LOCATION which returns the",34],["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::GENERIC-FUNCTION-DOC-BIT",34],[";;| FUNCTION: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |;;",34],["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::FUNCTION-DOC-BIT",43],[";;| AUXILIAR FUNCTION: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |;;",48]],"useCount":1967},{"word":"Failure","context":[["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["\"Predictive Failure\" \"Non-Recoverable Error\"",417],["\"Predictive Failure\" \"Error\" \"Non-Recoverable Error\"",417],["\\\"Minor Failure\\\" (15) - All functionality is available but some might be degraded.",417],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\"Failure reports are printed with *PRINT-CIRCLE* bound to this value.\")",12]],"useCount":2512},{"word":"HealthState","context":[["\"CIM_ManagedSystemElement.HealthState\")))",834],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],["(HEALTHSTATE UINT16 :CIM-NAME \"HealthState\" :QUALIFIERS",418]],"useCount":1669},{"word":"IN","context":[["(TIMEOUTPERIOD DATETIME \"TimeoutPeriod\" :IN",345],["(REQUESTEDSTATE UINT16 \"RequestedState\" :IN",343],[":IN",127],[";;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",563],["(JOB \"CIM_ConcreteJob\" \"Job\" :IN :OUT",408],[";; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",122],["(POWERSTATE UINT16 \"PowerState\" :IN",120],["(ENABLED BOOLEAN \"Enabled\" :IN",118],["(QUIESCE BOOLEAN \"Quiesce\" :IN",118],[";;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY",896]],"useCount":4409},{"word":"INITFORM","context":[[":INITFORM \"1\")",44],[":INITFORM \"00000000000000.000000:000\")",47],[":INITFORM \"0\")",77],[":INITFORM \"CIM_ManagedElement\"))",41],[":INITFORM \"false\")",83],[":INITFORM \"5\")",322],[":INITFORM \"2\")",380],[":INITFORM \"12\")",685],[":INITFORM NIL))",845],[":INITFORM NIL)",18788]],"useCount":21510},{"word":"INT","context":[["(TARGET :POINTER) (SOURCE :POINTER) (WIDTH_IN_PIXELS :INT))",51],["(A CFFI-FNV-COMPLEX-DOUBLE) (LDA FORTRAN-INT)",85],["(B CFFI-FNV-COMPLEX-DOUBLE) (LDB FORTRAN-INT)",53],["(IWORK CFFI-FNV-INT32) (INFO FORTRAN-INT))",55],["(B CFFI-FNV-COMPLEX-FLOAT) (LDB FORTRAN-INT)",55],["(A CFFI-FNV-COMPLEX-FLOAT) (LDA FORTRAN-INT)",84],["(LWORK FORTRAN-INT) (INFO FORTRAN-INT))",87],["(LWORK FORTRAN-INT) (INFO FORTRAN-INT))",87],["OCL::INT",114],["(INFO FORTRAN-INT))",376]],"useCount":2621},{"word":"If","context":[["If PACKAGE is not specified, the home package of SYMBOL is used.\"",35],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],[";;; obligated to do so.  If you do not wish to do so, delete this",458],["(:DESCRIPTION \"If TRUE enable the device, if FALSE disable the device.\")))",118],["\"If TRUE, take the device online, if FALSE, take the device OFFLINE.\")))",118],["\"If set to TRUE then cleanly cease all activity, if FALSE resume activity.\")))",118],[";; If we reached the end of the list before start-bis",72],["VALUE. If one is found, the BODY is executed with ARGS bound to the",36],["If FORCE is true then check all symbols, otherwise only check symbols",35],[";;; If there's no debug-block info, we return the (less precise)",34]],"useCount":5098},{"word":"In","context":[["(\"Other\" \"Unknown\" \"Running/Full Power\" \"Warning\" \"In Test\"",235],["\\\"In Test\\\" element is performing test functions.",417],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["\"In Test\" \"Transitioning\" \"In Service\" \"DMTF Reserved\"",417],["\"In Test\" \"Transitioning\" \"In Service\" \"DMTF Reserved\"",417],["\"Starting\" \"Stopping\" \"Stopped\" \"In Service\" \"No Contact\"",417],["\\\"In Service\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",415],["\"Failed\" \"Invalid Parameter\" \"In Use\" \"DMTF Reserved\"",349],["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["provision contained herein.  In no event shall BBN be liable for any",49]],"useCount":4389},{"word":"Int32","context":[["(:name |params| :type |Int32| :direction :out :array t :size (|pname|)))",250],["(:name |param| :type |Int32| :direction :in))",47],["(:name |params| :type |Int32| :direction :in :array t :size (|pname|)))",49],["(:name |size| :type |Int32| :direction :in)",50],["(:name |v0| :type |Int32| :direction :in)",66],["(:name |value| :type |Int32| :direction :in :array t :size count))",74],["(:name |params| :type |Int32| :direction :out :array t :size pname))",76],["((:name |size| :type |Int32| :direction :in)",90],["((:name |location| :type |Int32| :direction :in)",608],["(:name |location| :type |Int32| :direction :in)",304]],"useCount":2296},{"word":"KEY","context":[["(:KEY (:DESCRIPTION \"The scoping System's Name.\")",150],["(:KEY (:DESCRIPTION \"The Name of the scoping System.\")",161],["(:KEY (:OVERRIDE \"Name\")",194],["(:KEY (:OVERRIDE \"InstanceID\")",266],[":KEY)",633],["(:KEY",1276],["(error \"A required &KEY or &OPTIONAL argument was not supplied.\"))",35],["((:DEPRECATED (\"No value\")) :KEY",40],["(if (sdl:key= key :SDL-KEY-ESCAPE)",45],["(:KEY (:DESCRIPTION \"The scoping System's CreationClassName.\")",149]],"useCount":3325},{"word":"LEN","context":[["(:MAX-LEN \"256\") (:PROPOGATED \"CIM_System.Name\"))",298],["(:MAX-LEN \"256\") (:PROPOGATED \"CIM_System.CreationClassName\"))",300],["(:MAX-LEN \"256\")",409],["(:MAX-LEN \"64\")",226],["(:MAX-LEN \"1024\"))",218],["(:MAX-LEN \"64\"))",995],["(:MAX-LEN \"256\"))",952],["(:MAX-LEN \"10\"))",417],["(:ARRAYTYPE \"Indexed\") (:MAX-LEN \"256\")",139],["(:VALUE-MAP (\"Automatic\" \"Manual\")) (:MAX-LEN \"10\"))",117]],"useCount":4258},{"word":"LISP","context":[[";;;  -*- mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-",123],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-PPCRE; Base: 10 -*-",113],["(:use \"COMMON-LISP\"",380],[";;;  -*- mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-",123],[";; -*- Mode:Lisp; Syntax:ANSI-Common-LISP; Coding:us-ascii-unix; fill-column:158 -*-",157],["(in-package \"COMMON-LISP-USER\")",200],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],["(:use \"COMMON-LISP\")",311],[";;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10 -*-",427]],"useCount":5017},{"word":"Lisp","context":[[";-*- Mode:     Lisp -*-",1228],[";;;;LANGUAGE:           Common-Lisp",1095],[";;;;SYSTEM:             Common-Lisp",1072],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465],[";;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10 -*-",427],[";;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",371],[";;; Using Lisp CMU Common Lisp 19f (19F)",314],[";;; Using Lisp CMU Common Lisp 19f (19F)",314],[";;; Using Lisp SBCL 1.0.54",257]],"useCount":14048},{"word":"MA","context":[["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::GENERIC-FUNCTION-DOC-BIT",34],[";; Boston, MA 02110-1301, USA.",38],[";;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",702],[";;; Boston, MA  02111-1307  USA.",466],[";; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",207],["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::FUNCTION-DOC-BIT",43],[";;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",173],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",147],[";; Boston, MA 02111-1307 USA",116],[";;;;    Boston, MA 02111-1307 USA",61]],"useCount":2227},{"word":"MAP","context":[["(:VALUE-MAP (\"2\" \"3\" \"4\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"..\"))",343],["(:VALUE-MAP (\"2\" \"3\" \"4\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"..\" \"32768..65535\"))",344],["(:VALUE-MAP",3822],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"..\" \"0x8000..\"))",426],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"..\" \"0x8000..\"))",419],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"..\" \"0x8000..\"))",418],["(:VALUE-MAP (\"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"..\" \"32768..65535\"))",343],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\"))",148],["(:VALUE-MAP (\"1\" \"2\" \"3\" \"4\" \"5\"))",149],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\"))",155]],"useCount":7612},{"word":"MAPPING","context":[["(:MAPPING-STRINGS (\"MIB.IETF|IF-MIB.ifOperStatus\"))",23],["(:MAPPING-STRINGS",1536],["(:MAPPING-STRINGS (\"MIF.DMTF|ComponentID|001.5\")))",417],["(:MAPPING-STRINGS (\"MIF.DMTF|General Information|001.3\")))",135],["(:MAPPING-STRINGS (\"MIB.IETF|IF-MIB.ifType\"))",23],["(:MAPPING-STRINGS (\"MIF.DMTF|General Information|001.4\")))",135],["(:MAPPING-STRINGS (\"MIF.DMTF|Operational State|006.4\")))",118],["(:MAPPING-STRINGS (\"JSR77.JCP|JSR77.3.1.1.1 objectName|V1.0\"))",34],["(:MAPPING-STRINGS (\"MIB.IETF|IF-MIB.ifLastChange\"))",23],["(:MAPPING-STRINGS (\"MIB.IETF|IF-MIB.ifDescr\"))",23]],"useCount":2679},{"word":"MAX","context":[["(:MAX-LEN \"10\"))",417],["(:MAX-LEN \"256\"))",952],["(:MAX-LEN \"256\") (:PROPOGATED \"CIM_System.Name\"))",298],["(:VALUE-MAP (\"Automatic\" \"Manual\")) (:MAX-LEN \"10\"))",117],["(:MAX-LEN \"64\"))",995],["(:MAX-LEN \"256\") (:PROPOGATED \"CIM_System.CreationClassName\"))",300],["(:MAX-LEN \"256\")",409],["(:ARRAYTYPE \"Indexed\") (:MAX-LEN \"256\")",139],["(:MAX-LEN \"1024\"))",218],["(:MAX-LEN \"64\")",226]],"useCount":4545},{"word":"METHOD","context":[["(DEFCIM-METHOD ENABLEDEVICE",118],["(DEFCIM-METHOD QUIESCEDEVICE",118],["(DEFCIM-METHOD REQUESTSTATECHANGE",345],["(DEFCIM-METHOD SETPOWERSTATE",123],["(DEFCIM-METHOD RESTOREPROPERTIES",118],["(DEFCIM-METHOD SAVEPROPERTIES",118],["(DEFCIM-METHOD STOPSERVICE",117],["(DEFCIM-METHOD RESET",118],["(DEFCIM-METHOD ONLINEDEVICE",118],["(DEFCIM-METHOD STARTSERVICE",117]],"useCount":1637},{"word":"MODEL","context":[["(MODEL STRING :CIM-NAME \"Model\" :QUALIFIERS",19],["(:MODEL-CORRESPONDENCE (\"CIM_StorageExtent.NameNamespace\")))",19],["(:MODEL-CORRESPONDENCE (\"CIM_Controller.ProtocolSupported\")))",20],["(:MODEL-CORRESPONDENCE (\"CIM_StatisticalData.StatisticTime\")))))",22],["(:MODEL-CORRESPONDENCE (\"CIM_StatisticalData.StartStatisticTime\")))))",22],["(:MODEL-CORRESPONDENCE (\"CIM_ManagedElement.ElementName\")))",41],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))",343],["(:MODEL-CORRESPONDENCE (\"CIM_LogicalDevice.Availability\")))",118],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))))",343],["(:MODEL-CORRESPONDENCE",6076]],"useCount":7151},{"word":"Mode","context":[["\"Power Save - Unknown\" \"Power Save - Low Power Mode\"",235],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],[";;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",371],["\"Supporting Entity in Error\" \"Completed\" \"Power Mode\"",417],[";;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10 -*-",427],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465],[";;;; -*- Mode: lisp; indent-tabs-mode: nil -*-",589],[";-*- Mode:     Lisp -*-",1228],[";; -*- Mode:Lisp; Syntax:ANSI-Common-LISP; Coding:us-ascii-unix; fill-column:158 -*-",157],[";;;;;;;;;;;;;;;;;;;;;;;;;;;;;; -*- Mode: Lisp -*- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",157]],"useCount":7712},{"word":"N","context":[["N-LHS",32],[";; N.B. Even though these handlers are called HANDLE-FOO they",30],["N.B. this is not an actual package name or nickname.\"",34],["'(\"#<N/A (class not finalized)>\"))",43],["((and (not (lsame diag \"U\")) (not (lsame diag \"N\")))",36],["((lsame trans \"N\")",85],["(setf nounit (lsame diag \"N\"))",50],["(M FORTRAN-INT) (N FORTRAN-INT) (K FORTRAN-INT)",44],["%N%",43],["((and (not (lsame trans \"N\"))",36]],"useCount":1638},{"word":"NAME","context":[["(CREATIONCLASSNAME STRING :CIM-NAME \"CreationClassName\"",433],["(ELEMENTNAME STRING :CIM-NAME \"ElementName\" :QUALIFIERS",818],["(CAPTION STRING :CIM-NAME \"Caption\" :QUALIFIERS",824],["(DESCRIPTION STRING :CIM-NAME \"Description\" :QUALIFIERS",821],["(PRIMARYSTATUS UINT16 :CIM-NAME \"PrimaryStatus\" :QUALIFIERS",417],["(OPERATIONALSTATUS (ARRAY UINT16) :CIM-NAME \"OperationalStatus\"",418],["(NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",463],["(NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",463],["(HEALTHSTATE UINT16 :CIM-NAME \"HealthState\" :QUALIFIERS",418],["(INSTANCEID STRING :CIM-NAME \"InstanceID\" :QUALIFIERS",739]],"useCount":20630},{"word":"NIL","context":[["NIL)",356],["(TYPE-ERROR NIL T)",404],["(:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))",439],["(ERROR NIL NIL)",442],["(ERROR NIL NIL)",442],["NIL",528],["plurals NIL",615],[":INITFORM NIL))",845],[":INITFORM NIL)",18788],["(DEPENDENT NIL :CIM-NAME \"Dependent\" :QUALIFIERS",328]],"useCount":29909},{"word":"Name","context":[["((:OVERRIDE \"Name\")",76],[";;; $Name:  $",38],["((NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",41],["`(\"Name: \"",58],["(:KEY (:DESCRIPTION \"The Name of the scoping System.\")",161],["(:KEY (:DESCRIPTION \"The scoping System's Name.\")",150],["(:KEY (:OVERRIDE \"Name\")",194],["(NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",463],["(:MAX-LEN \"256\") (:PROPOGATED \"CIM_System.Name\"))",298],[";;;; Name:          package.lisp",36]],"useCount":2007},{"word":"No","context":[["(\"Completed with No Error\" \"Not Supported\"",352],["\"Starting\" \"Stopping\" \"Stopped\" \"In Service\" \"No Contact\"",417],["(\"Not Available\" \"No Additional Information\" \"Stressed\"",417],["\"Lost Communication\" \"No Contact\" \"DMTF Reserved\"",417],["\"Stopping\" \"Service\" \"Stressed\" \"NonRecover\" \"No Contact\"",417],["(\"Unknown\" \"Enabled\" \"Disabled\" \"Shut Down\" \"No Change\"",687],["((:DEPRECATED (\"No value\")) :KEY",40],["(cond ((null values) \"; No value\")",63],["((:DEPRECATED (\"No value\"))",301],["\"No Default\" \"Quiesce\" \"DMTF Reserved\" \"Vendor Reserved\")))",343]],"useCount":4922},{"word":"Non","context":[["(error \"Non-zero exit status\")))))",15],[":format-control \"Non-absolute pathname.\"))",16],["\"Non-nil means the Swank debugger hook will be installed globally.\")",33],[";;; Non-error tests",68],["\"Predictive Failure\" \"Error\" \"Non-Recoverable Error\"",417],["\"Predictive Failure\" \"Non-Recoverable Error\"",417],["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["\"Major failure\" \"Critical failure\" \"Non-recoverable error\"",419],["\"Non Facility Associated Signaling\" \"TR008\" \"GR303 RDT\"",14],[";; Non-local control transfer, don't actually need those results now.",15]],"useCount":1831},{"word":"Not","context":[["(\"Not Available\" \"No Additional Information\" \"Stressed\"",417],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["(\"Unknown\" \"Not Available\" \"Communication OK\"",417],["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["\"Not Applicable\" \"DMTF Reserved\" \"Vendor Reserved\"))",344],["\"Use of Timeout Parameter Not Supported\" \"Busy\" \"Method Reserved\"",344],["(\"Completed with No Error\" \"Not Supported\"",352],["(\"Unknown\" \"Not Available\" \"Servicing\" \"Starting\" \"Stopping\"",417],["Not Applicable (5) indicates the element does not support being enabled or disabled.",336],["\"Not Applicable\" \"DMTF Reserved\"))",343]],"useCount":5685},{"word":"OBJ","context":[["(:OBJ T :EN",136],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T)",212],[":OBJ T)",765],[":OBJ T))",1569],["(:TYPE \"melee\" :OBJ T)",89],[":TYPE \"melee\" :OBJ T)",85],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",69]],"useCount":3859},{"word":"OF","context":[["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841],[";;; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",900],["(was-made-by STANFORD-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",696],[";;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",563],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by INTERNET-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",195],[";;; GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, OR BUSINESS",169],[";; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",122],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126]],"useCount":8053},{"word":"OK","context":[["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],["(\"Unknown\" \"Not Available\" \"Communication OK\"",417],["\\\"OK\\\" indicates the ManagedElement is functioning normally.",417],["(\"Unknown\" \"OK\" \"Degraded\" \"Error\" \"DMTF Reserved\"",418],["(\"Unknown\" \"OK\" \"Degraded/Warning\" \"Minor failure\"",419],["(\"Unknown\" \"Other\" \"OK\" \"Degraded\" \"Stressed\"",417],["(\"OK\" \"Error\" \"Degraded\" \"Unknown\" \"Pred Fail\" \"Starting\"",417],["(should be string= \"OK\"",30],[";; Actions when OK is pressed.",12],[";;; 01/04/05 changed OUTPUT-OK-P to not check output except when asked to [CKR]",12]],"useCount":2988},{"word":"OR","context":[[";;; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",900],[";;; GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, OR BUSINESS",169],[";;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",563],[";;; GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, OR BUSINESS",169],[";;; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",900],[";;; GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, OR BUSINESS",169],[";; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",122],[";; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",122],[";;; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",900],[";;; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL",1069]],"useCount":7002},{"word":"Offline","context":[["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["\"Offline\" \"Test\" \"Deferred\" \"Quiesce\" \"Reboot\" \"Reset\"",344],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["\"Offline\" \"Test\" \"Defer\" \"Quiesce\" \"Reboot\" \"Reset\"",343],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\" \"Quiesce\"",344],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\"",377]],"useCount":2431},{"word":"OrgID","context":[["For DMTF-defined instances, the \\\"preferred\\\" algorithm should be used with the <OrgID> set to CIM.\")",16],["For DMTF-defined instances, the 'preferred' algorithm must be used with the <OrgID> set to 'CIM'.\"))",19],["For DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",58],["For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.\"))",146],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["<OrgID>:<LocalID>",833]],"useCount":1629},{"word":"Other","context":[["(\"Other\" \"Unknown\" \"Running/Full Power\" \"Warning\" \"In Test\"",235],["(\"Unknown\" \"Other\" \"IPv4\" \"IPv6\" \"IPX\" \"AppleTalk\" \"DECnet\"",27],["1 - Other, by CIM convention, is used to indicate that the Severity's value can be found in the OtherSeverity property.",26],["\"Other 64-Bit\" \"Microsoft Windows Server 2008 R2\"",28],["(\"Unknown\" \"Other\" \"MACOS\" \"ATTUNIX\" \"DGUX\" \"DECNT\"",28],["(\"Other\" \"Unknown\" \"Enabled\" \"Disabled\" \"Not Applicable\"))",117],["(\"Unknown\" \"Other\" \"OK\" \"Degraded\" \"Stressed\"",417],["(\"Unknown\" \"Other\" \"Enabled\" \"Disabled\" \"Shutting Down\"",344],["\"Power Save - Other\" \"Power Cycle\" \"Power Off\")))",118],["(\"Unknown\" \"Other\" \"Information\" \"Degraded/Warning\" \"Minor\"",26]],"useCount":1652},{"word":"P","context":[["P1 (orthogonal-projection-unique-equalp P '(1 1 0 0 0)))",41],["(command \"._UCS\" \"P\")",41],["P2 (orthogonal-projection-unique-equalp P '(1 0 1 0 0)))",41],[";;;\t\t\t\t  P.O. BOX 149149",52],["(NIL \"Bytes\") (:P-UNIT \"byte\"))",59],["You can check that with: (LET ((STATUS (SYMBOL-STATUS S P)))",68],["(:P-UNIT \"byte\"))",69],["P",70],[";;;\t\t\t\t  P.O. BOX 2909",89],["(P :pointer)",92]],"useCount":2523},{"word":"PACKAGE","context":[["\"Return the shortest nickname (or canonical name) of PACKAGE.\"",35],["(:UML-PACKAGE-PATH \"CIM::Network::QoS\")",47],["(:UML-PACKAGE-PATH \"CIM::Application::J2eeAppServer\")",47],["(:UML-PACKAGE-PATH \"PRS::Support\")",60],[";;; *PACKAGE* is rebound so that the IN-PACKAGE form can set it during",35],["\"True if SYMBOL is external in PACKAGE.",35],[";;; *PACKAGE* is rebound so that the IN-PACKAGE form can set it during",35],["\"Bind *BUFFER-PACKAGE* to BUFFER-PACKAGE and evaluate FORM.",35],["If PACKAGE is not specified, the home package of SYMBOL is used.\"",35],["\"Bind *BUFFER-PACKAGE* to BUFFER-PACKAGE and evaluate FORM.",35]],"useCount":2109},{"word":"PHILOSOPHY","context":[["((DEFINED-BY-VIEW  FIRST-WITTGENSTEIN-PHILOSOPHY)",86],["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841],["(was-made-by STANFORD-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",696],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by INTERNET-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",195],["((USED-IN-VIEW  FIRST-WITTGENSTEIN-PHILOSOPHY)",11]],"useCount":4027},{"word":"Package","context":[[";;; Package:      FUG5",54],[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10; Package: utils -*-",58],[";;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Package: OCML;   -*-",60],[";;; -*- Mode: Lisp; Syntax: Ansi-Common-Lisp; Package: RACER; Base: 10 -*-",80],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: HUNCHENTOOT; Base: 10 -*-",92],[";;;;  -*- Mode: Lisp; Syntax: Common-Lisp; Package: C -*-",105],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-PPCRE; Base: 10 -*-",113],[";;; -*- Mode: Lisp; Package: CLIM-INTERNALS -*-",123],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228]],"useCount":2957},{"word":"Power","context":[["\"Power Save - Standby\" \"Power Cycle\" \"Power Save - Warning\"",235],["\"Power Save - Standby\" \"Power Cycle\" \"Power Save - Warning\"",235],["\"Power Save - Standby\" \"Power Cycle\" \"Power Save - Warning\"",235],["\"Supporting Entity in Error\" \"Completed\" \"Power Mode\"",417],["\"Not Applicable\" \"Power Off\" \"Off Line\" \"Off Duty\"",235],["(\"Other\" \"Unknown\" \"Running/Full Power\" \"Warning\" \"In Test\"",235],["\"Power Save - Unknown\" \"Power Save - Low Power Mode\"",235],["\"Power Save - Unknown\" \"Power Save - Low Power Mode\"",235],["\"Power Save - Unknown\" \"Power Save - Low Power Mode\"",235],["\"Power State Settable\" \"Power Cycling Supported\"",124]],"useCount":3675},{"word":"Predictive","context":[["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\"Predictive Failure\" \"Non-Recoverable Error\"",417],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\"Predictive Failure\" \"Error\" \"Non-Recoverable Error\"",417]],"useCount":1666},{"word":"QUALIFIERS","context":[["(HEALTHSTATE UINT16 :CIM-NAME \"HealthState\" :QUALIFIERS",418],["(NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",463],["(INSTANCEID STRING :CIM-NAME \"InstanceID\" :QUALIFIERS",739],["(ELEMENTNAME STRING :CIM-NAME \"ElementName\" :QUALIFIERS",818],["(DESCRIPTION STRING :CIM-NAME \"Description\" :QUALIFIERS",821],["(CAPTION STRING :CIM-NAME \"Caption\" :QUALIFIERS",824],["(:QUALIFIERS",1456],["(DETAILEDSTATUS UINT16 :CIM-NAME \"DetailedStatus\" :QUALIFIERS",417],[":QUALIFIERS",4804],["(OPERATINGSTATUS UINT16 :CIM-NAME \"OperatingStatus\" :QUALIFIERS",417]],"useCount":20966},{"word":"Quiesce","context":[["\"Offline\" \"Test\" \"Defer\" \"Quiesce\" \"Reboot\" \"Reset\"",343],["\"Quiesce\" \"Starting\" \"DMTF Reserved\" \"Vendor Reserved\"))",342],["\"No Default\" \"Quiesce\" \"DMTF Reserved\" \"Vendor Reserved\")))",343],["\"Quiesce\" \"Reboot\" \"Reset\" \"DMTF Reserved\"))",343],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\" \"Quiesce\"",344],["\"Offline\" \"Test\" \"Deferred\" \"Quiesce\" \"Reboot\" \"Reset\"",344],["Quiesce (9) indicates that the element is enabled but in a restricted mode.",336],["(QUIESCE BOOLEAN \"Quiesce\" :IN",118],["\"Quiesce\" \"Reboot\" \"Reset\"))",34]],"useCount":2547},{"word":"Redistribution","context":[["Redistribution and use in source and binary forms, with or without",19],[";;;  Redistribution and use in source and binary forms, with or without |",21],[";;; Redistribution  and  use  in  source  and  binary  forms,  with  or  without",15],[";; Redistribution and use in source and binary forms, with or without",332],[";;;; Redistribution and use in source and binary forms, with or",42],[";;;;   Redistribution and use in source and binary forms, with or",138],[";;;; Redistribution and use in source and binary forms, with or without",148],[";;;;    Redistribution and use in source and binary forms, with or without",14],[";;; Redistribution and use in source and binary forms, with or without",1324],["; Redistribution and use in source and binary forms, with or without",12]],"useCount":2065},{"word":"RequestStateChange","context":[["(:QUALIFIERS (:DEPRECATED (\"CIM_Service.RequestStateChange\"))",234],["((:CIM-NAME \"RequestStateChange\")",345],["(:DEPRECATED (\"CIM_EnabledLogicalElement.RequestStateChange\"))",354],["(\"CIM_EnabledLogicalElement.RequestStateChange\"",686],["(\"CIM_EnabledLogicalElement.RequestStateChange\")))",34]],"useCount":1653},{"word":"RequestedState","context":[["\"CIM_EnabledLogicalElement.RequestedState\"",343],["(REQUESTEDSTATE UINT16 :CIM-NAME \"RequestedState\" :QUALIFIERS",344],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))))",343],["(:MODEL-CORRESPONDENCE (\"CIM_EnabledLogicalElement.RequestedState\")))",343],["(REQUESTEDSTATE UINT16 \"RequestedState\" :IN",343]],"useCount":1716},{"word":"Reserved","context":[["\"Vendor Reserved\")))",453],["\"Failed\" \"Invalid Parameter\" \"In Use\" \"DMTF Reserved\"",349],["\"DMTF Reserved\" \"Vendor Specific\")))",428],["\"Vendor Reserved\"))",1348],["(\"Unknown\" \"OK\" \"Degraded\" \"Error\" \"DMTF Reserved\"",418],["\"Lost Communication\" \"No Contact\" \"DMTF Reserved\"",417],["\"Relocating\" \"DMTF Reserved\" \"Vendor Reserved\"))",417],["\"Relocating\" \"DMTF Reserved\" \"Vendor Reserved\"))",417],["\"Supporting Entity in Error\" \"DMTF Reserved\"",417],["\"In Test\" \"Transitioning\" \"In Service\" \"DMTF Reserved\"",417]],"useCount":9222},{"word":"Reset","context":[[";;;             : Reset the version to 1.0a1",12],["\"Reset the set of deferred warnings to be handled at the end of the current WITH-COMPILATION-UNIT.",13],["\"Quiesce\" \"Reboot\" \"Reset\"))",34],["\"Reset profiling counters.\")",111],["((:CIM-NAME \"Reset\")",118],["\"Offline\" \"Test\" \"Defer\" \"Quiesce\" \"Reboot\" \"Reset\"",343],["\"Quiesce\" \"Reboot\" \"Reset\" \"DMTF Reserved\"))",343],["\"Offline\" \"Test\" \"Deferred\" \"Quiesce\" \"Reboot\" \"Reset\"",344],["\"Reboot\" \"Reset\" \"DMTF Reserved\" \"Vendor Reserved\"))",344]],"useCount":1662},{"word":"Return","context":[["\"Return a vector of debug-variables in frame.\"",63],["\"Return THREAD's mailbox.\"",139],["Return NIL if the symbol is unbound.\"",69],[";; We can't take any more. Return now.",56],["\"Return the call sites of FUNCTION-NAME (a symbol).",54],["\"Return true if PTR is a null pointer.\"",46],["\"Return a pointer pointing to ADDRESS.\"",45],["\"Return the size in bytes of a foreign type.\"",64],["\"Return a plist describing SYMBOL.",69],["\"Return a property list describing SYMBOL.",61]],"useCount":7007},{"word":"Returns","context":[["\"Returns one of",34],["Returns:",179],["\"Returns true if NEW-FILE is newer than OLD-FILE.\"",58],["\"Finds the magic secret from the user's home directory.  Returns nil",34],["Returns NIL if this cannot be determined by examining internal",34],["##### Returns",54],["\"Returns a pointer to a foreign symbol NAME.\"",45],["Returns previously set callback.\"",42],["\"Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,",42],["Returns a list of completions with package qualifiers if needed.\"",35]],"useCount":1657},{"word":"S","context":[["\"         $TESTDIR/lisp/S.lisp\")",107],["#S(|IT.UNIMIB.DISCO.MA.CL.HELambdaP|::FUNCTION-DOC-BIT",43],[";; A&S 16.20 (Jacobi's Imaginary transformation)",45],["#S(TILE :OBJECT :VOID :OWNER NIL)",38],["#S(TILE :OBJECT :EMPTY :OWNER NIL)",48],["#S(random-state",56],["(p/S input)",68],["(p/S? input)",68],["You can check that with: (LET ((STATUS (SYMBOL-STATUS S P)))",68],[";;;; Programmer:    Ian S. Eslick",72]],"useCount":1862},{"word":"STRING","context":[["(NAME STRING :CIM-NAME \"Name\" :QUALIFIERS",463],["(CREATIONCLASSNAME STRING :CIM-NAME \"CreationClassName\"",433],["(STATUSDESCRIPTIONS (ARRAY STRING) :CIM-NAME",417],["(STATUS STRING :CIM-NAME \"Status\" :QUALIFIERS",417],["(SYSTEMNAME STRING :CIM-NAME \"SystemName\" :QUALIFIERS",380],["(OTHERENABLEDSTATE STRING :CIM-NAME \"OtherEnabledState\"",343],["(CAPTION STRING :CIM-NAME \"Caption\" :QUALIFIERS",824],["(INSTANCEID STRING :CIM-NAME \"InstanceID\" :QUALIFIERS",739],["(DESCRIPTION STRING :CIM-NAME \"Description\" :QUALIFIERS",821],["(ELEMENTNAME STRING :CIM-NAME \"ElementName\" :QUALIFIERS",818]],"useCount":10125},{"word":"STRINGS","context":[["(:MAPPING-STRINGS",1536],["(:MAPPING-STRINGS (\"MIF.DMTF|Operational State|006.4\")))",118],["(:MAPPING-STRINGS (\"MIF.DMTF|General Information|001.4\")))",135],["(:MAPPING-STRINGS (\"MIF.DMTF|General Information|001.3\")))",135],["\"Return the longest string that is a common prefix of STRINGS.\"",36],["(:MAPPING-STRINGS (\"JSR77.JCP|JSR77.3.1.1.1 objectName|V1.0\"))",34],["\"Compile STRINGS (exerpted from BUFFER at POSITION).",32],["(:MAPPING-STRINGS (\"MIB.IETF|IF-MIB.ifType\"))",23],["(:MAPPING-STRINGS (\"MIB.IETF|IF-MIB.ifLastChange\"))",23],["(:MAPPING-STRINGS (\"MIF.DMTF|ComponentID|001.5\")))",417]],"useCount":2740},{"word":"SYSTEM","context":[["(in-package \"SYSTEM\")",30],[";;;;SYSTEM:            UNIX",15],["(multiple-value-bind (body-rest declarations) (SYSTEM::PARSE-BODY body)",17],["(in-package \"COM.INFORMATIMAGO.COMMON-LISP.VIRTUAL-FILE-SYSTEM\")",17],["(common-lisp:in-package \"SYSTEM\")",18],["CODING-SYSTEM is Emacs-style coding system name (a string),",27],["\"Return a \\\"external file format designator\\\" for CODING-SYSTEM.",27],[";;;;SYSTEM:             Common-Lisp",1072],["(in-package \"SYSTEM\")",555],[";;;;  -*- Mode: Lisp; Syntax: Common-Lisp; Package: SYSTEM -*-",38]],"useCount":2030},{"word":"Save","context":[["#| Save lisp-format text file. |#",84],["\"Power Save - Unknown\" \"Power Save - Low Power Mode\"",235],["\"Power Save - Unknown\" \"Power Save - Low Power Mode\"",235],["\"Power Save - Standby\" \"Power Cycle\" \"Power Save - Warning\"",235],["#| Save CSV. |#",84],["#| occi. Save as csv, lisp, and midi. |#",84],["\"Power Save - Other\" \"Power Cycle\" \"Power Off\")))",118],["\"Power Save - Standby\" \"Power Cycle\" \"Power Save - Warning\"",235],["(\"Full Power\" \"Power Save - Low Power Mode\" \"Power Save - Standby\"",122],["(\"Full Power\" \"Power Save - Low Power Mode\" \"Power Save - Standby\"",122]],"useCount":1726},{"word":"Service","context":[["\\\"In Service\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",415],["\"Starting\" \"Stopping\" \"Stopped\" \"In Service\" \"No Contact\"",417],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["\"Stopping\" \"Service\" \"Stressed\" \"NonRecover\" \"No Contact\"",417],["\"In Test\" \"Transitioning\" \"In Service\" \"DMTF Reserved\"",417],["\"Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE).\"))",117],["\"Windows Embedded for Point of Service\"",28],["(:UML-PACKAGE-PATH \"CIM::Core::Service\")",22],["\"Voice Foreign Exchange Service\" \"Voice Encapsulation\"",14],["\"ISO 802.211c\" \"LocalTalk\" \"SMDS DXI\" \"Frame Relay Service\"",14]],"useCount":2292},{"word":"SizeI","context":[["(:name |count| :type |SizeI| :direction :in)",745],["(:name |height| :type |SizeI| :direction :in))",111],["(:name |imageSize| :type |SizeI| :direction :in)",168],["(:name |width| :type |SizeI| :direction :in)",570],["(:name |height| :type |SizeI| :direction :in)",315],["((:name |n| :type |SizeI| :direction :in)",225],["(:name |depth| :type |SizeI| :direction :in)",118],["(:name |length| :type |SizeI| :direction :out :array t :size #x1)",122],["(:name |stride| :type |SizeI| :direction :in)",142],["(:name |bufSize| :type |SizeI| :direction :in)",148]],"useCount":3129},{"word":"Starting","context":[["\"Starting\" \"Stopping\" \"Stopped\" \"In Service\" \"No Contact\"",417],["\\\"Starting\\\" describes an element being initialized.",417],["(\"OK\" \"Error\" \"Degraded\" \"Unknown\" \"Pred Fail\" \"Starting\"",417],["(\"Unknown\" \"Not Available\" \"Servicing\" \"Starting\" \"Stopping\"",417],[";;;; Starting, Stopping, Dumping a Lisp image",13],["Starting with ASDF 3, please use :IF-FEATURE instead\"",13],["Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.\")",336],["\"Quiesce\" \"Starting\" \"DMTF Reserved\" \"Vendor Reserved\"))",342]],"useCount":2372},{"word":"Stopping","context":[[";;;; Starting, Stopping, Dumping a Lisp image",13],["\"Stopping\" \"Service\" \"Stressed\" \"NonRecover\" \"No Contact\"",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417],["(\"Unknown\" \"Not Available\" \"Servicing\" \"Starting\" \"Stopping\"",417],["\"Starting\" \"Stopping\" \"Stopped\" \"In Service\" \"No Contact\"",417]],"useCount":1681},{"word":"Syntax","context":[[";;;;  -*- Mode: Lisp; Syntax: Common-Lisp; Package: C -*-",105],[";;;  -*- mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-",123],[";; -*- Mode:Lisp; Syntax:ANSI-Common-LISP; Coding:us-ascii-unix; fill-column:158 -*-",157],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],[";;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10 -*-",427],[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; indent-tabs-mode: nil -*-",114],[";;; -*-  Mode: Lisp; Package: Maxima; Syntax: Common-Lisp; Base: 10 -*- ;;;;",465],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-PPCRE; Base: 10 -*-",113],[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-",99],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: HUNCHENTOOT; Base: 10 -*-",92]],"useCount":3906},{"word":"T","context":[["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T)",212],["T",232],["(TYPE-ERROR NIL T)",404],["(T",504],["T)",513],["T))",515],[":OBJ T)",765],[":OBJ T))",1569]],"useCount":8888},{"word":"THE","context":[[";;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.",44],[";;;; THE END ;;;;",875],[";;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.",44],[";;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",67],[";;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",105],[";; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",122],["(was-made-by THE-ISM-BOOK-website)",165],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by THE-CATHOLIC-ENCYCLOPEDIA-website)",296],[";;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY",896]],"useCount":2999},{"word":"TYPE","context":[[":LINKAGE-TYPE",82],["(:TYPE \"melee\" :OBJ T)",89],[":RETURN-TYPE",82],[":TYPE \"melee\" :OBJ T)",85],[":RESULT-TYPE",151],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T)",212],["(TYPE-ERROR NIL T)",404]],"useCount":2937},{"word":"Test","context":[["Test (7) indicates that the element is in a test state.",336],[";;; Test that explicit calls to macroexpand in subforms",105],["(\"Other\" \"Unknown\" \"Running/Full Power\" \"Warning\" \"In Test\"",235],["\"In Test\" \"Transitioning\" \"In Service\" \"DMTF Reserved\"",417],["\\\"In Test\\\" element is performing test functions.",417],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\"",377],["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["\"Offline\" \"Test\" \"Deferred\" \"Quiesce\" \"Reboot\" \"Reset\"",344],["(\"Enabled\" \"Disabled\" \"Shut Down\" \"Offline\" \"Test\" \"Defer\" \"Quiesce\"",344],["\"Offline\" \"Test\" \"Defer\" \"Quiesce\" \"Reboot\" \"Reset\"",343]],"useCount":3561},{"word":"The","context":[["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["(:KEY (:DESCRIPTION \"The scoping System's Name.\")",150],["(:KEY (:DESCRIPTION \"The Name of the scoping System.\")",161],["(:DESCRIPTION \"The CreationClassName of the scoping System.\")",161],["\"Note: The use of this method has been deprecated.",161],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],[";;;     The data in this file contains enhancments.                    ;;;;;",470],["\"The Description property provides a textual description of the object.\"))",799],["\"The Caption property is a short textual description (one- line string) of the object.\")",824]],"useCount":12585},{"word":"This","context":[[";;;; This file is part of cl-ana.",162],[";;; This file is part of Kindista.",83],[";;;; This file is part of CLSQL.",121],["This file is a part of Maiden",126],[";;;   This file is part of Clozure CL.",130],[";;;; This file is part of little b.",145],[";; This file is part of STMX.",151],[";; This file is part of SICP Solutions.",176],[";;  This file is part of stumpwm.",234],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361]],"useCount":7612},{"word":"UINT16","context":[["(HEALTHSTATE UINT16 :CIM-NAME \"HealthState\" :QUALIFIERS",418],["(PRIMARYSTATUS UINT16 :CIM-NAME \"PrimaryStatus\" :QUALIFIERS",417],["(DETAILEDSTATUS UINT16 :CIM-NAME \"DetailedStatus\" :QUALIFIERS",417],["(OPERATINGSTATUS UINT16 :CIM-NAME \"OperatingStatus\" :QUALIFIERS",417],["(COMMUNICATIONSTATUS UINT16 :CIM-NAME \"CommunicationStatus\"",417],["(OPERATIONALSTATUS (ARRAY UINT16) :CIM-NAME \"OperationalStatus\"",418],["(ENABLEDDEFAULT UINT16 :CIM-NAME \"EnabledDefault\" :QUALIFIERS",343],["(TRANSITIONINGTOSTATE UINT16 :CIM-NAME \"TransitioningToState\"",343],["(AVAILABLEREQUESTEDSTATES (ARRAY UINT16) :CIM-NAME",343],["(REQUESTEDSTATE UINT16 :CIM-NAME \"RequestedState\" :QUALIFIERS",344]],"useCount":5632},{"word":"UInt32","context":[["((:name |program| :type |UInt32| :direction :in)",604],["((:name |shader| :type |UInt32| :direction :in)) :category \"VERSION_2_0\"",48],["((:name |index| :type |UInt32| :direction :in)",768],["(:name |index| :type |UInt32| :direction :in)",300],["((:name |id| :type |UInt32| :direction :in)",134],["((:name |program| :type |UInt32| :direction :in)) :category \"VERSION_2_0\"",80],["((:name |shader| :type |UInt32| :direction :in)",66],["(:name |index| :type |UInt32| :direction :in))",60],["(:name |buffer| :type |UInt32| :direction :in))",56],["(:name |v0| :type |UInt32| :direction :in)",54]],"useCount":3133},{"word":"USA","context":[[";;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",702],[";;; Boston, MA  02111-1307  USA.",466],[";;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",27],[";;; Boston, MA 02111-1307 USA",31],[";; Boston, MA 02110-1301, USA.",38],[";;;;    Boston, MA 02111-1307 USA",61],[";; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",207],[";;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",173],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",147],[";; Boston, MA 02111-1307 USA",116]],"useCount":2150},{"word":"USE","context":[["(delete-package \"TB-BAR-TO-USE\"))",67],["(when (find-package \"TB-BAR-TO-USE\")",68],["(export (intern name \"TB-BAR-TO-USE\") \"TB-BAR-TO-USE\"))",51],[";;; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",900],[";;; GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, OR BUSINESS",169],["(export (intern name \"TB-BAR-TO-USE\") \"TB-BAR-TO-USE\"))",51],["(:USE :COMMON-LISP",56],[";; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",60],["(mapcan #'delete-package (package-used-by-list \"TB-BAR-TO-USE\"))",67],[";;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",67]],"useCount":2051},{"word":"USER","context":[["(setf (symbol-function (intern \"USER-INIT-FILE\" :swank-loader))",17],["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],[";;;;USER-INTERFACE:     NONE",844],[";;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CL-USER; Base: 10 -*-",228],[";;;;USER-INTERFACE:     MCL User Interface Classes",223],["(in-package \"COMMON-LISP-USER\")",200],["(in-package \"CL-USER\")",84],["(in-package \"USER\")",68],[";;;  -*- mode: LISP; Package: CL-USER; Syntax: COMMON-LISP;  Base: 10 -*-",37],[";;; -*- Mode: Lisp; Package: COMMON-LISP-USER -*-",28]],"useCount":3009},{"word":"Unknown","context":[["(\"Unknown\" \"Other\" \"Enabled\" \"Disabled\" \"Shutting Down\"",344],["\"Unknown or Unspecified Error\" \"Cannot complete within Timeout Period\"",344],["(\"Unknown\" \"OK\" \"Degraded/Warning\" \"Minor failure\"",419],["(\"Unknown\" \"Not Available\" \"Servicing\" \"Starting\" \"Stopping\"",417],["(\"Unknown\" \"Not Available\" \"Communication OK\"",417],["(\"OK\" \"Error\" \"Degraded\" \"Unknown\" \"Pred Fail\" \"Starting\"",417],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],["(\"Unknown\" \"Enabled\" \"Disabled\" \"Shut Down\" \"No Change\"",687],["(\"Unknown\" \"Other\" \"OK\" \"Degraded\" \"Stressed\"",417],["(\"Unknown\" \"OK\" \"Degraded\" \"Error\" \"DMTF Reserved\"",418]],"useCount":5842},{"word":"V","context":[["(LET ((OMETA::V",42],["V`",40],["V\\u000a\\u000a",34],["OMETA::V))",44],["V,",67],["V'*",100],["V)",1835],["V(",1835],["V",2577],["V\\u000a",1056]],"useCount":8081},{"word":"VALUE","context":[["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"..\" \"0x8000..\"))",418],["(:VALUE-MAP",3822],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"..\" \"0x8000..\"))",426],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"..\" \"0x8000..\"))",419],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\"))",148],["(:VALUE-MAP (\"1\" \"2\" \"3\" \"4\" \"5\"))",149],["(:VALUE-MAP (\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\"))",155],["(:VALUE-MAP (\"2\" \"3\" \"5\" \"6\" \"7\" \"9\" \"..\" \"32768..65535\"))",343],["(:VALUE-MAP (\"2\" \"3\" \"4\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"..\" \"32768..65535\"))",344],["(:VALUE-MAP (\"2\" \"3\" \"4\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"..\"))",343]],"useCount":8238},{"word":"VALUES","context":[["(:VALUES",7061],["(VALUES",12],["\"If exactly one value in VALUES is non-NIL, this value is returned.",16],["(let ((sym (find-symbol \"FUNCTION-END-BREAKPOINT-VALUES/STANDARD\" :di)))",16],[":VALUES NIL",34],[":VALUES NIL)",19],[":VALUES (T))",20],["(:VALUES (\"Deployable\" \"Installable\" \"Executable\" \"Running\"))",22],["(:VALUES (\"Clean\" \"New\" \"Modified\" \"Deleted\")))",26],["\"Bind some printer variables and pretty print each object in VALUES.\"",29]],"useCount":7266},{"word":"VERSION_1_0","context":[["((:name |list| :type |List| :direction :in)) :category \"VERSION_1_0\"",18],["((:name |name| :type |SelectName| :direction :in)) :category \"VERSION_1_0\"",18],["((:name |cap| :type |EnableCap| :direction :in)) :category \"VERSION_1_0\"",42],["((:name |name| :type |StringName| :direction :in)) :category \"VERSION_1_0\"",14],["((:name |opcode| :type |LogicOp| :direction :in)) :category \"VERSION_1_0\"",14],["\"VERSION_1_0\" :deprecated nil :version \"1.0\")",84],[":category \"VERSION_1_0\" :deprecated nil :version \"1.0\")",392],["\"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",711],[":category \"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",1368],["((:name |flag| :type |Boolean| :direction :in)) :category \"VERSION_1_0\"",23]],"useCount":2796},{"word":"Vendor","context":[["\"Reboot\" \"Reset\" \"DMTF Reserved\" \"Vendor Reserved\"))",344],["\"Vendor Reserved\")))",453],["\"Vendor Reserved\"))",1348],["\"DMTF Reserved\" \"Vendor Specific\")))",428],["\"Relocating\" \"DMTF Reserved\" \"Vendor Reserved\"))",417],["\"Not Applicable\" \"DMTF Reserved\" \"Vendor Reserved\"))",344],["\"No Default\" \"Quiesce\" \"DMTF Reserved\" \"Vendor Reserved\")))",343],["\"Quiesce\" \"Starting\" \"DMTF Reserved\" \"Vendor Reserved\"))",342],["\"DMTF Reserved\" \"Vendor Reserved\"))",59],["\"Vendor Specific\"))",370]],"useCount":4664},{"word":"We","context":[[";; We did not reach the end of STRING1, but we did reach",32],[";; We can't take any more. Return now.",56],["\"List of threads displayed in Emacs.  We don't care a about",34],[";;; code in this file is purely portable Common Lisp. We do require a",34],[";;; containing `!' have special meaning.  We have to work long and",34],[";;; We copy the string to a temporary file in order to get adequate",34],[";;; We use Emacs-like `add-hook' and `run-hook' utilities to support",34],[";; We did not reach the end of either string, and the",64],[";; We can't use loop for ... on, becaue it uses atom for testing the end",128],[";;; We support a simplim%function. The function is looked up in simplimit and",60]],"useCount":1827},{"word":"_","context":[["(+ _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ +)",63],["(+ _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ +)",63],["(if (_== first last)",76],["(+ _ + _ + _ + _ + _ +)",64],["(+ _ + _ + _ + _ + _ +)",64],["(+ _ + _ + _ + _ + _ +)",64],["(+ _ + _ + _ + _ + _ +)",64],["(+ _ + _ + _ + _ + _ +)",64],["(+ _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ +)",63],["(declare (ignore _))",247]],"useCount":5351},{"word":"__ros_arr_len","context":[["(cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))",231],["(cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)",231],["(cl:let ((__ros_arr_len 0))",231],["(cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))",231],["(cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))",231],["(cl:dotimes (i __ros_arr_len)",231],["(cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))",231],["(cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)",231],["(cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)",231],["(cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))",231]],"useCount":2310},{"word":"__ros_str_len","context":[["(cl:let ((__ros_str_len 0))",218],["(cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))",218],["(cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))",218],["(cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)",218],["(cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))",218],["(cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)",218],["(cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)",218],["(cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))",218],["(cl:dotimes (__ros_str_idx __ros_str_len msg)",218],["(cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))",218]],"useCount":2334},{"word":"a","context":[["(let ((a \"Aa-\"))",1554],["a(g100",1571],["a(g6",3655],["a(g212",3670],["(let ((a \"aA-\"))",1554],["a-%offset%)",1061],["(f2cl-lib:fref a-%data%",1315],["a(g84",842],["\"Converts a ROS message object to a list\"",881],["\"Converts a ROS message object to a list\"",881]],"useCount":83908},{"word":"above","context":[[";;;     * Redistributions in binary form must reproduce the above",116],[";;;;   * Redistributions of source code must retain the above",96],[";; purpose with or without fee is hereby granted, provided that the above",60],["documentation is hereby granted without fee, provided that the above",49],[";;;;   * Redistributions in binary form must reproduce the above",178],[";;;   * Redistributions in binary form must reproduce the above",876],[";;;; 2. Redistributions in binary form must reproduce the above",42],[";;; location above for a more recent version (and for documentation",34],[";; gotta be one of those above",29],["Execute any clean-up code from unwind-protect forms above the frame",27]],"useCount":1997},{"word":"abox","context":[["abox))",64],["abox",101],["thematic-substrate::abox",146],["(setf abox (find-abox abox))",94],["(setf abox (find-abox abox))",94],["(setf abox (find-abox abox))",94],["(check-type abox abox)",54],["(check-type abox abox)",54],["thematic-substrate::create-abox-if-not-found-p",43],["(with-consistent-abox",35]],"useCount":1671},{"word":"abs","context":[["(+ (abs fval1) (abs fval2)))))",34],["(abs",592],["(abs :1-ary-operator)",40],["(soln alpha) (abs-error result (soln alpha)))))))",29],["(+ (abs fval1) (abs fval2)))))",34],["\"alpha   est result              est abserr             neval    ier   true answer            true abs err\"))",31],["(setf y (abs x))",31],["(<= (abs (- n q r)) single-float-epsilon)))) t)",32],["(/ (abs (* x y)) (gcd x y)))",33],["(defun abs (x) (if (< x 0) (- 0 x) x))",33]],"useCount":1819},{"word":"abserr","context":[["abserr",35],["(setf abserr",33],["(setf abserr 0.0)",59],["(multiple-value-bind (result est-abserr neval ier soln abserr)",253],["(multiple-value-bind (result est-abserr neval ier soln abserr)",253],["t (values result est-abserr neval ier soln abserr)))",138],["t (values result est-abserr neval ier soln abserr)))",138],["(values result est-abserr neval ier soln abserr)))",115],["alpha result abserr neval ier",78],["(values result est-abserr neval ier soln abserr)))",115]],"useCount":1769},{"word":"absolute","context":[[";; Setting *default-pathname-defaults* to an absolute directory",33],["absolute))",23],["'(:absolute",87],["(make-pathname :directory `(:relative ,name) :defaults absolute)",23],[":position \"absolute\"",25],["(return-from resolve-absolute-location",26],["\"Return the (absolute) instruction pointer and the relative pc of FRAME.\"",29],["(defun append-logical-directories-mk (absolute-dir relative-dir)",33],["(ensure-absolute-pathname",40],["(resolve-absolute-location",44]],"useCount":2485},{"word":"acc","context":[["(let ((acc nil))",135],["(cond ((null x) acc)",41],["((atom x) (cons x acc))",41],["acc)))",69],[";acc",100],["acc",129],["(let ((acc))",45],["(nreverse acc)))",56],["acc)",59],["acc))",158]],"useCount":2701},{"word":"accessor","context":[["((proclamations :initarg :proclamations :accessor compile-op-proclamations :initform nil)",33],["((name :accessor name :initarg :name)))",44],["((name :initarg :name :accessor name)",37],[":accessor component-operation-times)",34],["(properties :accessor component-properties :initarg :properties",34],[":accessor data)",45],[":accessor regex",45],[":accessor containerField",46],[":accessor name)",59],[":accessor name",105]],"useCount":4520},{"word":"action","context":[[":action $1)",196],[":action #'(lambda (file)",48],[":action",63],["of use, data or profits, whether in an action of contract, negligence or",49],["action",46],[":dialog-item-action",41],["(process-type action)",41],[":action action",35],["other tortuous action, arising out of or in connection with the use or",49],["(case action",97]],"useCount":5380},{"word":"add","context":[["(f2cl-lib:int-add (f2cl-lib:int-sub lwork iwork) 1)",404],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(setf ix (f2cl-lib:int-add ix incx))",282],["(add",291],["(f2cl-lib:int-add",541],["((f2cl-lib:int-add",183],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(f2cl-lib:int-add i 1))",263],["(f2cl-lib:int-add j",272],["(f2cl-lib:fdo (k 1 (f2cl-lib:int-add k 1))",298]],"useCount":19814},{"word":"address","context":[["(defmethod get-local-address ((usocket usocket))",71],["\"An address or other identifying information to uniquely name the LogicalDevice.\")",118],["(reuse-address nil reuse-address-supplied-p)",82],["(reuse-address nil reuse-address-supplied-p)",82],["(defmethod get-peer-address ((usocket stream-usocket))",72],["(let* ((reuseaddress (if reuse-address-supplied-p reuse-address reuseaddress))",66],["(let* ((reuseaddress (if reuse-address-supplied-p reuse-address reuseaddress))",66],["#:pointer-address",70],["(make-value address sys.int::+tag-object+)))",61],["(defun get-host-by-address (address)",58]],"useCount":3549},{"word":"after","context":[["(when after",51],["(defmethod shared-initialize :after",54],["(after-cr (code)",38],["(make-condition 'offset-after-end :offset offset))",35],["will accept multiple connections, otherwise it will be closed after the",34],["(defvar *after-init-hook* '()",34],["connections, otherwise it will be closed after the first.\"",34],["(defmethod initialize-instance :after",93],["(*continue-after-undecidable-precondition*)",233],["(*continue-after-undecidable-test* . t)",233]],"useCount":3251},{"word":"alien","context":[["(with-struct (alien::alien-value- sap type) alien",58],["(with-struct (alien::alien-value- sap type) alien",58],["(with-struct (alien::alien-value- sap type) alien",58],["(sb-alien:alien-sap",62],["(sb-alien:alien-sap",62],["sb-alien:int",111],[":allocation :alien",328],["(sb-alien:define-alien-routine (\"WSAEventSelect\" wsa-event-select)",37],["(sb-alien:define-alien-routine (\"WSAEventSelect\" wsa-event-select)",37],["sb-alien:c-string",37]],"useCount":3866},{"word":"alist","context":[["alist))",91],["alist)",69],["(let ((alist '())",63],["bind-alist subst)",56],["(cdr (assoc name alist)))))",61],["(let ((probe (assoc name alist)))",61],["(setf alist (delete name alist :key #'car)))",61],["(t (setf alist (acons name thread alist))))))))",61],["(setf alist (delete name alist :key #'car)))",61],["(t (setf alist (acons name thread alist))))))))",61]],"useCount":2969},{"word":"all","context":[["(defun all-threads ()",85],["'((odysseus::*store-all-non-refuted-proof-terms*)",177],["(defimplementation all-threads ()",202],["(do-all-symbols (s)",87],["(define-test test/all ()",109],["\"If set to TRUE then cleanly cease all activity, if FALSE resume activity.\")))",118],["(undefine-all-test-predicates)",119],["(defimplementation unprofile-all ()",130],["all-scans))",165],["(defimplementation macroexpand-all (form)",166]],"useCount":10079},{"word":"allegro","context":[["#+allegro",1249],["#-allegro",288],["#+:allegro",267],["#-(or lispworks sbcl openmcl cmu allegro)",53],["(:implementation allegro",49],["(allegro-inspect o))",43],["#+(and allegro (version>= 7 0))",38],["#-(or allegro clisp)",37],["#+(and (and allegro-version>= (version>= 4 1))",33],["#+allegro (sys::getenv (string var))",32]],"useCount":3683},{"word":"allocation","context":[["; space allocation:",34],[":allocation :alien",328],[":allocation :virtual",416],[":allocation :class",186],[":allocation :class))",86],["#:slot-definition-allocation",74],["(p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL \"true\"",57],[":allocation :class)",53],[":allocation :class)))",41],[":type operation-designator :allocation :class))",27]],"useCount":1677},{"word":"allow","context":[[":allow-other-keys t)",33],[":allow-other-keys t",102],["(&allow-other-keys",46],["&allow-other-keys)",1409],["&allow-other-keys) options",34],["emacs-string &allow-other-keys)",34],["&rest options &key &allow-other-keys)",36],["&key &allow-other-keys)",382],["&allow-other-keys))",52],[":allow-other-keys nil",42]],"useCount":4281},{"word":"alpha","context":[["(labels ((soln (alpha)",40],["(* alpha",513],["alpha result abserr neval ier",78],["(+ (* alpha temp)",42],["((= alpha zero)",45],["(:name |alpha| :type |ClampedColorF| :direction :in))",40],["(declare (double-float alpha))",121],["(* alpha temp)))",66],["(* alpha temp2)))",72],["(type (double-float) beta alpha)",39]],"useCount":2717},{"word":"also","context":[["(declaim (declaration also-use-packages))",43],[";;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.",430],[";;; terms of your choice, provided that you also meet, for each linked",487],[";;; The LLGPL is also available online at",33],["also true with an empty package identifier part, as the STRING is",34],["buffer are best read in this package.  See also FROM-STRING and TO-STRING.\")",34],[";;; Suggestions, comments and requests for improvements are also welcome.",58],["also \\\"Configuration DSL\\\"\\) in the ASDF manual.\"",54],[";;; source-location for a function, and we also have FILE-SOURCE-LOCATION &co",34],[";;;   The LLGPL is also available online at",129]],"useCount":2198},{"word":"an","context":[["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417],["\\\"Error\\\" indicates the ManagedElement is in an Error condition.\")",417],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["\\\"Servicing\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",417],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\\\"Starting\\\" describes an element being initialized.",417]],"useCount":11193},{"word":"and","context":[["#-(and cl-stl-noextra cl-stl-0x98)",550],[";;; modules, and to copy and distribute the resulting executable under",487],[";;; Redistribution and use in source and binary forms, with or without",1324],[";;; modify, merge, publish, distribute, sublicense, and/or sell copies",563],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],[";;; Redistribution and use in source and binary forms, with or without",1324],[";;; modules, and to copy and distribute the resulting executable under",487],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],["(and",1429]],"useCount":59716},{"word":"ansi","context":[["#+:ansi-tests-strict-initial-element",19],[":ansi-c)",67],["(if (ansi-streamp stream)",46],[":language :ansi-c)",1324],["#+clx-ansi-common-lisp",126],["#+(and lispm (not clx-ansi-common-lisp))",105],[":language :ansi-c",15],["#+(and Genera (not clx-ansi-common-lisp))",14],["(unless (member :ansi-cl *features*)",14],["#-clx-ansi-common-lisp",22]],"useCount":1900},{"word":"any","context":[["\"Update Emacs if any relevant Lisp state has changed.\"",34],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["#| Save MIDI file (have to alter any anacrusis). |#",63],[";; We can't take any more. Return now.",56],["provision contained herein.  In no event shall BBN be liable for any",49],["(types:any ast)))",35],["_external_    if S is going to be inherited into any package that",34],["\"Send any indentation updates to Emacs via CONNECTION.\"",34]],"useCount":3705},{"word":"app","context":[["(catch-app-errors event-cb",33],["(declare (ignore app))",28],["(gl-app-quad-2d 0 0 0 100 100 100 100 0)",36],["(gl-app-rotate 0 0 90)",32],["(gl-app-draw :draw)",31],["(gl-app-pop-matrix :pop-matrix)",31],["(gl-app-load-identity :load-identity)",31],["(gl-app-push-matrix :push-matrix)",31],["(gl-app-color 0.5 0.5 1.0)",28],["(gl-app-scale-2d 0.5 0.5)",24]],"useCount":1935},{"word":"append","context":[["append",196],[":if-exists :append",171],["(apply #'append",120],["(append",83],["(string-append",77],["append",68],["append (label-value-line",63],["(part-append",58],["(append",1926],["(append (label-value-line*",56]],"useCount":6894},{"word":"apply","context":[["(apply #'make-hash-table args))",122],["((:emacs-rex &rest args) (apply #'eval-for-emacs args))",65],["(apply #'concatenate 'string",120],["(apply",159],["((apply-reflection-simp (mop form) y $trigsign))",67],["(unless (apply #'seq-end-p sequence iter rest)",75],["(apply",78],["(multiple-value-or (apply #'extra-keywords/make-instance operator args)",80],["(apply #'make-instance",100],["(apply #'append",120]],"useCount":7096},{"word":"are","context":[[";; are met:",111],[";;; are done in the correct environment",105],[";;;; are met:",115],[";;;;   conditions are met:",138],[";;; are disclaimed.",201],["Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.\")",336],[";;; this exception to your version of the library, but you are not",458],[";;; are met:",1050],[";; All other cases are handled by the simplifier of the function.",100],[":notes (:nil-vectors-are-strings)",81]],"useCount":9106},{"word":"aref","context":[["(setf (aref vector i) newitem)))",48],["(roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))",54],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))",56],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))",62],["(vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)",54],["(vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)",54],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits))))))",52],["(setf (aref prop (incf index))",50],["do (setf (aref buffer index) #x00))",50],["(incf (aref *repeat-counters* rep-num))",48]],"useCount":5866},{"word":"arg","context":[["(fortran-to-lisp::make-f2cl-finfo :arg-types",359],[":arg-types '((fortran-to-lisp::integer4) (fortran-to-lisp::integer4)",106],["(dolist (arg args)",215],["arg",155],[":arg-checking nil",138],["arg))",120],["arg)",115],["(etypecase arg",112],["(when (check-arg-count form 1)",98],["arg)))",92]],"useCount":15833},{"word":"arg1","context":[["(if (or (not ($listp arg1))",56],["(maybe-emit-clear-values arg1 arg2)))",115],["(arg1 :pointer)",231],["(type1 (derive-compiler-type arg1))",58],["(compile-form arg1 'stack nil)",74],["((compile-operand arg1 nil)",82],["arg1 (cdras 'w l)",99],["(arg1 (%car args))",100],["(arg1 :pointer))",117],["(maybe-emit-clear-values arg1 arg2)",132]],"useCount":2655},{"word":"arg2","context":[["(null arg2)",58],["arg2 (cdras 'w2 l)",66],["(arg2 :pointer))",68],["(arg2 (%cadr args))",114],["(maybe-emit-clear-values arg1 arg2)))",115],["(maybe-emit-clear-values arg1 arg2)",132],["(arg2 :pointer)",139],["(compile-operand arg2 nil)",62],["(compile-form arg2 'stack :int)",62],["(not ($listp arg2))",61]],"useCount":2196},{"word":"arglist","context":[["arglist",129],["(defun %invoke (command arglist)",53],["(defimplementation arglist (fun)",52],["(multiple-value-bind (arglist foundp)",58],["(defmethod declaration-arglist ((decl-identifier (eql 'optimize)))",51],["(make-arglist",48],["arglist))",70],["(etypecase arglist",72],["(not (eq (type-specifier-arglist symbol) :not-available))))",79],["(defimplementation arglist (fname)",106]],"useCount":9495},{"word":"args","context":[["(cl:declare (cl:ignorable args))",878],["(declare (ignore args))",1189],[":args",599],["args))",576],["args",278],["\"void\" :args",347],["(lambda (&rest args)",347],["args)",368],["args)))",432],[";; args: \"void\"",449]],"useCount":29252},{"word":"argument","context":[["(with-slots (argument) expr",104],["(or (argument-pop input)",84],[":argument arg",50],["(with-slots (operator argument) expr",55],["(or (argument-pop-rest input)",41],["(with-slots (operator argument) ex",43],[":argument (make-instance 'arg-tuple-expr",44],["#:generic-function-argument-precedence-order",45],["(with-slots (index argument) expr",52],["argument-precedence-order",46]],"useCount":5014},{"word":"arguments","context":[[":format-arguments format-arguments))",75],[":format-arguments format-arguments))",75],["arguments)",59],[":format-arguments args))",91],["(declare (ignore arguments))",59],[";; Look for the limit of the arguments.",56],["arguments))",55],["(declare (ignore expected kind arguments))",203],["(:arguments",152],["arguments",104]],"useCount":6413},{"word":"array","context":[["(f2cl-lib:array-slice work-%data%",1115],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],[";;;           (:coerce-assigns :as-needed) (:array-type ':array)",942],[";;;           (:coerce-assigns :as-needed) (:array-type ':array)",942],[";;;           (:array-slicing t) (:declare-common nil)",846],["(f2cl-lib:with-multi-array-data",786],["(array double-float (*))",654],["(f2cl-lib:array-slice work",573],["(f2cl-lib:array-slice a-%data%",306],["(array fortran-to-lisp::complex16 (*))",281]],"useCount":33261},{"word":"as","context":[[";;;           (:coerce-assigns :as-needed) (:array-type ':array)",942],["(with-foreign-pointer-as-string (s 100)",101],["Record compiler notes signalled as `compiler-condition's.\"",114],[";;;   Clozure CL is referenced in the preamble as the \"LIBRARY.\"",130],[";;;           (:coerce-assigns :as-needed) (:array-type ':simple-array)",162],[";; (http://opensource.franz.com/preamble.html), known as the LLGPL.",266],[";;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.",430],["(has-as-subject   )",502],["(with-output-as-presentation",91],["(as-offsets ((offset mark-or-offset))",89]],"useCount":10395},{"word":"asdf","context":[["(asdf:system-relative-pathname",43],["(:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache",36],["asdf:*central-registry*)",45],["(:use :asdf/common-lisp :asdf/driver :asdf/upgrade",45],["(:use :asdf/common-lisp :asdf/driver :asdf/upgrade",45],["(:use :asdf/common-lisp :asdf/driver :asdf/upgrade",45],["(setf asdf:*central-registry*",51],["(:use :uiop/common-lisp :uiop :asdf/upgrade",60],["(require 'asdf)",76],["(require :asdf)",122]],"useCount":4954},{"word":"assert","context":[["(assert (or (not timeout) (eq timeout t)))",211],["(assert (member timeout '(nil t)))",118],["(assert *current-context*)",119],["(odysseus::*assert-rewrite-for-preconditions* . t)",177],["(assert-equal",654],["(assert",425],["(assert-error 'type-error",379],["(assert-equal '()",240],["(odysseus::*assert-rewrite-for-unique-names-axioms*)",233],["(odysseus::*assert-rewrite-for-declarations*)",233]],"useCount":13398},{"word":"assoc","context":[["(while (/= \"SEQEND\" (cdr (assoc 0 ENTLIST)))",36],["(setq P3 (cdr (assoc 10 ENTLIST)))",41],["(setq NODEBLOCK (cdr (assoc \"NODERIGHTBLOCK\" RFL:LALIGNLIST)))",42],["(cdr (assoc symbol",43],["(setq NODEBLOCK (cdr (assoc \"NODELEFTBLOCK\" RFL:LALIGNLIST)))",45],["(let ((bind (assoc e1 bindings :test #'tc-eq)))",48],["(setq P1 (cdr (assoc 10 ENTLIST)))",50],["(cdr (assoc name alist)))))",61],["(setq INLINE (cdr (assoc 1 ENTLIST)))",96],["(let ((probe (assoc name alist)))",61]],"useCount":2307},{"word":"at","context":[["at org.armedbear.lisp.Cons.evalImpl(Cons.java:631)",44],["\"Make sure that constant forms are compiled into scanners at compile time.\"",46],["(defimplementation sldb-break-at-start (fname)",47],["at org.armedbear.lisp.Lisp.eval(Lisp.java:439)",65],[";;;   The LLGPL is also available online at",129],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],[":compile-at :definition-time)",43],["at org.armedbear.lisp.Lisp.progn(Lisp.java:575)",39],[";;; You can reach me at marc.battyani@fractalconcept.com or marc@battyani.net",38],["distribution, and is available at",37]],"useCount":5053},{"word":"atom","context":[[";; We can't use loop for ... on, becaue it uses atom for testing the end",128],["(if (atom x)",131],["(cond ((atom e) e)",143],["(cond ((atom form)",67],["(cond ((atom exp) exp)",69],["until (or (atom remaining) (>= index end))",72],["(if (atom tree)",75],["until (atom remaining)",83],["((atom tree) tree)",91],["(if (atom form)",93]],"useCount":4617},{"word":"auto","context":[[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls nil)",112],["((eql :auto)",40],["(sleep *auto-flush-interval*)))",35],["(when *auto-abbreviate-dotted-packages*",34],["(defun auto-abbreviated-package-name (package)",34],["(defvar *auto-abbreviate-dotted-packages* t",34],["(auto-abbreviated-package-name package)",34],["(defvar *auto-flush-interval* 0.2)",33],["(defun auto-flush-loop (stream)",33]],"useCount":1890},{"word":"aux","context":[["(compile-and-load \"printer-aux.lsp\")",111],["((eq (car arglist) '&aux)",34],["(toggle-trace-aux callee :wherein (list (process-fspec caller)))))))",34],["\"Remove &whole, &enviroment, and &aux elements from ARGLIST.\"",34],["(defun toggle-trace-aux (fspec &rest args)",55],["(&aux",64],["(compile-and-load \"numbers-aux.lsp\")",69],["(toggle-trace-aux spec))",84],["&aux",132],["(compile-and-load \"cons-aux.lsp\")",105]],"useCount":2380},{"word":"available","context":[["(with-available-arglist (arglist) arglist",36],["This program and the accompanying materials are made available under",37],["\\\"Minor Failure\\\" (15) - All functionality is available but some might be degraded.",417],[":not-available))",47],[":not-available)",66],[";;;   The LLGPL is also available online at",129],["distribution, and is available at",37],["((member :not-available)",46],[":not-available",38],["(not (eq (type-specifier-arglist symbol) :not-available))))",79]],"useCount":2678},{"word":"b","context":[["(b* (",1385],["b",188],["b-%offset%)))",195],["b-%offset%)",378],["(f2cl-lib:fref b-%data%",422],["b-%offset%))))",168],["'(lambda (a b)",160],[";;;; This file is part of little b.",145],["'(lambda (a b c)",152],["(setf (f2cl-lib:fref b-%data%",157]],"useCount":19932},{"word":"b0","context":[["b0 (mod64- b0 b7))",76],["b0 (mod64- b0 b7))",76],["(setf b0 (mod64+ b0 b7)",76],["(setf b0 (mod64+ b0 b7)",76],["(nyq:biquad-m x b0 b1 b2 a0 a1 a2)))",42],["(setf b0 (mod64+ b0 b3)",108],["(setf b0 (mod64+ b0 b3)",108],["b0 (mod64- b0 b3))",108],["b0 (mod64- b0 b3))",108],["b0 (mod64- b0 b15))",40]],"useCount":2632},{"word":"b1","context":[["(setf b2 (mod64+ b2 b1)",108],["(setf b8 (mod64+ b8 b1)",40],["(setf b14 (mod64+ b14 b1)",40],["b8 (mod64- b8 b1))",40],["(nyq:biquad-m x b0 b1 b2 a0 a1 a2)))",42],["b14 (mod64- b14 b1))",40],["(setf b1",44],["b2 (mod64- b2 b1))",108],["b6 (mod64- b6 b1))",76],["(setf b6 (mod64+ b6 b1)",76]],"useCount":2877},{"word":"b2","context":[["(setf b2 (mod64+ b2 b5)",76],["(setf b2 (mod64+ b2 b5)",76],["b2 (mod64- b2 b5))",76],["b2 (mod64- b2 b5))",76],["(nyq:biquad-m x b0 b1 b2 a0 a1 a2)))",42],["(setf b2 (mod64+ b2 b1)",108],["(setf b2 (mod64+ b2 b1)",108],["b2 (mod64- b2 b1))",108],["(setf b2",46],["b2 (mod64- b2 b1))",108]],"useCount":2480},{"word":"b3","context":[["(setf b0 (mod64+ b0 b3)",108],["b0 (mod64- b0 b3))",108],["(setf b10 (mod64+ b10 b3)",40],["b6 (mod64- b6 b3))",36],["b10 (mod64- b10 b3))",40],["b4 (mod64- b4 b3))",76],["(setf b12 (mod64+ b12 b3)",40],["(setf b4 (mod64+ b4 b3)",76],["b2 (mod64- b2 b3))",36],["b12 (mod64- b12 b3))",40]],"useCount":2490},{"word":"b5","context":[["b6 (mod64- b6 b5))",36],["b8 (mod64- b8 b5))",40],["b14 (mod64- b14 b5))",40],["(setf b8 (mod64+ b8 b5)",40],["b0 (mod64- b0 b5))",36],["(setf b14 (mod64+ b14 b5)",40],["b2 (mod64- b2 b5))",76],["(setf b2 (mod64+ b2 b5)",76],["(setf b6 (mod64+ b6 b5)",36],["(setf b0 (mod64+ b0 b5)",36]],"useCount":1706},{"word":"b7","context":[["b10 (mod64- b10 b7))",40],["(setf b12 (mod64+ b12 b7)",40],["(setf b10 (mod64+ b10 b7)",40],["b12 (mod64- b12 b7))",40],["(setf b4 (mod64+ b4 b7)",36],["b4 (mod64- b4 b7))",36],["(setf b2 (mod64+ b2 b7)",36],["b2 (mod64- b2 b7))",36],["(setf b0 (mod64+ b0 b7)",76],["b0 (mod64- b0 b7))",76]],"useCount":1688},{"word":"backend","context":[["(in-package :swank-backend)",207],["(compile-template :common-lisp-backend",70],["#+#.(swank-backend::sbcl-with-weak-hash-tables)",66],["(addtest (common-lisp-backend-test)",64],["#+#.(swank-backend::sbcl-with-new-stepper-p)",63],["#-#.(swank-backend::sbcl-with-weak-hash-tables)",42],["#+#.(swank-backend::sbcl-with-restart-frame)",41],["#+#.(swank-backend:with-symbol 'restrict-compiler-policy 'sb-ext)",34],["#+#.(swank/backend:with-symbol 'definition-source-form-number 'sb-introspect)",35],[";; These are re-exported directly from the backend:",35]],"useCount":2346},{"word":"backtrace","context":[["(close-connection connection nil (safe-backtrace))))",33],["(*print-pprint-dispatch*  . ,*backtrace-pprint-dispatch-table*))",33],["\"The initial number of backtrace frames to send to Emacs.\")",34],["(loop for frame in (compute-backtrace start end)",34],["(defvar *backtrace-printer-bindings*",34],["(backtrace start end)",34],["(with-bindings *backtrace-printer-bindings*",40],["(map-backtrace",71],["(lambda () (backtrace 0 nil)))))",33],["(defimplementation compute-backtrace (start end)",183]],"useCount":2443},{"word":"bar","context":[["(:argument-precedence-order client gadget-id scroll-bar))",36],["(defun bar ()",34],[":action \"/foo/bar\"",31],["if (bar()) {",31],["(when (bar)",30],["(:div :class \"data-mining-bar\"",25],["bar",25],["#'(lambda (scroll-bar)",40],["bar();",51],["(setf (last-update-time progress-bar) (get-internal-real-time))",45]],"useCount":2488},{"word":"base","context":[["(ensure-knowledge-base-state ':tbox-prepared tbox)",56],["(:base-type dword))",45],["(let ((*read-base* 10)",172],["xml:base",138],["(:base-type dword)",71],[":element-type 'base-char))",66],["base)",64],[":element-type 'base-char",53],[":element-type 'base-char",49],["(ash (register-number base) +rn-shift+)",49]],"useCount":3687},{"word":"be","context":[["For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.\"))",146],["3) Any bugs, bug fixes, or extensions will be forwarded to the designers.",90],["1) PRODIGY will only be used for internal, noncommercial research purposes.",90],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["(should be true",177],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["\\\"Minor Failure\\\" (15) - All functionality is available but some might be degraded.",417],["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["(should be null",160]],"useCount":12950},{"word":"before","context":[["\"Return true if X belongs before Y in a printed summary of symbols.",34],["(let ((before (get-internal-real-time)))",34],["\"Hook run (without arguments) immediately before replying to an RPC.\")",34],[";; If we reached the end of the list before start-bis",72],["(defun present-symbol-before-p (x y)",34],["(make-condition 'offset-before-beginning :offset offset))",35],["(when before",44],["(funcall before args))",38],[";; FIXME: this implementation doesn't unwind the stack before",34],[";;; and test files, if your copy came without them) before reporting",34]],"useCount":2048},{"word":"being","context":[["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\\\"Migrating\\\" element is being moved between host elements.",417],["\\\"Immigrating\\\" element is being moved to new host element.",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417],["\\\"Emigrating\\\" element is being moved away from host element.",417],["\\\"Relocating\\\" indicates the element is being relocated.",415],["\\\"In Service\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",415],["Not Applicable (5) indicates the element does not support being enabled or disabled.",336],["\\\"Servicing\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",417],["\\\"Starting\\\" describes an element being initialized.",417]],"useCount":5148},{"word":"below","context":[[";*** DO NOT add text below the comment! ***|;",58],["(loop for i below n",42],["(loop for stripe of-type index below (n-stripes* lump) do",46],["(loop for i from 0 below n",46],["(loop for i below count",49],["\\\"Degraded\\\" indicates the ManagedElement is functioning below normal.",417],["(loop for i from start below end",317],["for i from start below end",139],["for i fixnum from start below end",60],["(loop for i from (if (< i 0) 2 1) below len",55]],"useCount":3742},{"word":"bigfloat","context":[["(make-instance 'complex-bigfloat",263],["(let ((uu (bigfloat:to ($bfloat u)))",45],["(bigfloat 1))",35],["((or (bigfloat-numerical-eval-p u m)",64],["(complex-bigfloat-numerical-eval-p u m))",92],["(bigfloat:bigfloat pi)))",36],["(make-instance 'bigfloat",245],["(bigfloat:bigfloat pi)))",36],["(in-package :bigfloat)",32],["(mm (bigfloat:to ($bfloat m))))",45]],"useCount":2247},{"word":"binary","context":[[";;;; Redistribution and use in source and binary forms, with or",42],[":where (sql-binary-operator :name '= :left (sql-identifier :name \"langauge\")",84],[";;; Redistribution and use in source and binary forms, with or without",1324],[";;;   * Redistributions in binary form must reproduce the above",876],[";; Redistribution and use in source and binary forms, with or without",332],[";;;     * Redistributions in binary form must reproduce the above",116],[";;;;   Redistribution and use in source and binary forms, with or",138],[";;;; 2. Redistributions in binary form must reproduce the above",42],[";;;; Redistribution and use in source and binary forms, with or without",148],[";;;;   * Redistributions in binary form must reproduce the above",178]],"useCount":5124},{"word":"bind","context":[["(multiple-value-bind (var-0 var-1 var-2 var-3 var-4 var-5)",178],["(multiple-value-bind (x y)",157],["(multiple-value-bind (var-0 var-1 var-2 var-3 var-4 var-5 var-6)",136],["(multiple-value-bind (dummies vals newval setter getter)",122],["(multiple-value-bind (result est-abserr neval ier soln abserr)",253],["(handler-bind",109],["(multiple-value-bind (var-0 var-1 var-2 var-3 var-4)",271],["(destructuring-bind",276],["(handler-bind",450],["(multiple-value-bind",2905]],"useCount":19584},{"word":"binding","context":[["(if (consp binding)",67],["(if binding",66],["(car binding)",65],["(dolist (binding bindings)",35],["binding)",36],["(loop for binding in bindings",41],["binding))",41],["(mapcar (lambda (binding)",46],["(defimplementation set-default-initial-binding (var form)",52],["binding",53]],"useCount":2346},{"word":"bindings","context":[["bindings)))",198],["bindings))))",95],["(declare (type list bindings))",94],["(if bindings",152],["bindings",190],["(declare (ignore bindings))",270],["bindings))",280],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361],["bindings)",520],["(if (null bindings)",72]],"useCount":6652},{"word":"bit","context":[["do (setf (sbit bit-vector (- i start)) 0)",108],["(let ((bit-vector (make-array (- end start) :element-type 'bit :initial-element 1))",108],["(gl:clear :color-buffer-bit)",78],["(a2 (make-array '(2 2) :element-type 'bit",130],["#+64-bit-target",90],[":element-type 'bit",306],["(let ((bit-vector (make-array (- end start) :element-type 'bit :initial-element 1))",108],["(let* ((a1 (make-array '(2 2) :element-type 'bit",80],["(gl:clear :color-buffer-bit :depth-buffer-bit)",68],["(gl:clear :color-buffer-bit :depth-buffer-bit)",68]],"useCount":5342},{"word":"bits","context":[["(cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream))",569],["(cl:let ((bits 0))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)",1100]],"useCount":16327},{"word":"block","context":[["(block nil",640],["`(block nil",273],["(block nil",139],["(pprint-logical-block",128],["(block done",119],["(block",217],["(pprint-logical-block (nil nil)",251],["(pprint-logical-block (stream nil)",93],["(pprint-indent :block 2)",73],["(let ((block (make-block-buffer)))",71]],"useCount":7832},{"word":"body","context":[[",@body))",3596],["(:body",345],[",@body)))))",667],["(progn ,@body)",711],[",@body",790],["&body body)",1271],["&body body)",1271],[",@body))))",1332],[",@body)",1586],[",@body)))",1755]],"useCount":28814},{"word":"boolean","context":[[":type cl:boolean",166],["\"ErrorCleared is a boolean property indicating that the error reported in LastErrorCode is now cleared.\"))",118],[":type boolean",95],["(normalized boolean)",66],[":type boolean)",48],["(type generalized-boolean byte-lsb-first-p bit-lsb-first-p))",48],["(:boolean",54],[":boolean",182],["(transpose boolean)",258],["(fixedsamplelocations boolean))",35]],"useCount":2901},{"word":"border","context":[["(:name |border| :type |CheckedInt32| :direction :in))",38],["(setf (border-color bg) §c00000000))",38],["(:name |border| :type |CheckedInt32| :direction :in)",142],["(border int)",111],["(setf (s-wrap-mode  bg) :clamp-to-border)",39],[":border-width 1",48],[";;     border",40],[":border-width *border-size*",37],[":border-width *border-size*",37],["(setf (t-wrap-mode  bg) :clamp-to-border)",39]],"useCount":2723},{"word":"boundp","context":[["(when (boundp 'excl:*warn-on-nested-reader-conditionals*)",54],["(boundp x)",38],["(map-slot-boundp* obj '(a b))",114],[":variable (when (boundp symbol)",94],["(if (or (boundp symbol) recorded-p)",63],["(map-slot-boundp* obj '(a b c d))",62],["(boundp '$imetric)",48],["#:slot-boundp-using-class",44],["(when (boundp symbol)",35],["slot-boundp-using-class",35]],"useCount":1751},{"word":"break","context":[["(defimplementation sldb-break-at-start (fname)",47],["(let ((*break-on-signals* nil))",41],["break;",177],["; (break \"\")",35],[";(break \"\")",77],["(break))",75],[";;(break)",64],["(with-simple-restart (continue \"Continue from break.\")",34],["#:sldb-break",34],[";(break)",62]],"useCount":2444},{"word":"buffer","context":[["(with-buffer-syntax ()",1129],["(buffer uint)",244],["buffer",179],["(declare (type buffer buffer)",174],["(declare (type buffer buffer)",174],["(defimplementation swank-compile-string (string &key buffer position filename",162],["(let ((*buffer-name* buffer)",148],["(let ((*buffer-name* buffer)",148],["(make-location (list :buffer *buffer-name*)",147],["(make-location (list :buffer *buffer-name*)",147]],"useCount":22611},{"word":"but","context":[[";;; this exception to your version of the library, but you are not",458],["\"Like socket-accept, but retry on EAGAIN.\"",66],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["Quiesce (9) indicates that the element is enabled but in a restricted mode.",336],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["(\"Enabled\" \"Disabled\" \"Not Applicable\" \"Enabled but Offline\"",343],["\"Not Applicable\" \"Enabled but Offline\" \"In Test\" \"Deferred\"",344],["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\\\"Minor Failure\\\" (15) - All functionality is available but some might be degraded.",417],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417]],"useCount":6564},{"word":"button","context":[["(replay-button-event)))",37],["button",28],[":close-button-p t",28],["(stop-button-event)",29],["capi:push-button",32],[":button-1-motion :button-2-motion :button-3-motion :button-4-motion",33],[":button-1-motion :button-2-motion :button-3-motion :button-4-motion",33],[":button-1-motion :button-2-motion :button-3-motion :button-4-motion",33],[":button-1-motion :button-2-motion :button-3-motion :button-4-motion",33],["(make-pane 'push-button",34]],"useCount":1762},{"word":"by","context":[["(carried-out-by michele-pasin)",5517],["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126],[";;; Compiled by f2cl version:",1102],["(was-made-by STANFORD-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",696],["((carried-out-by michele-pasin)",645],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361],["(was-made-by THE-CATHOLIC-ENCYCLOPEDIA-website)",296],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by INTERNET-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",195]],"useCount":23322},{"word":"byte","context":[["(cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)",1100]],"useCount":47796},{"word":"bytes","context":[["(declare (type buffer-bytes src dest)",44],["\"Return the alignment in bytes of a foreign type.\"",45],["(multiple-value-bind (mrm-byte sib direction width extra-bytes)",47],["\"Return the size in bytes of a foreign type.\"",64],["padded-bytes-per-line bits-per-pixel)",70],["(type array-index index padded-bytes-per-line)",70],["(with-vector (buffer-bbuf buffer-bytes)",74],["(type buffer-bytes a)",77],["(declare (type buffer-bytes a)",79],["(declare (type buffer-bytes buffer-bbuf)",86]],"useCount":3067},{"word":"c","context":[["(lambda (c)",333],[":language :ansi-c)",1324],["c-%offset%)",1268],["(f2cl-lib:fref c-%data%",704],["(setf (f2cl-lib:fref c-%data%",610],["(:report (lambda (c s)",468],["(declare (ignore c))",462],["c-%offset%))",349],["(c) 2014 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",336],["(error (c)",312]],"useCount":42963},{"word":"caar","context":[["(eq (caar e) $imetric)",32],[",@(if (eq (caar (last patterns)) t)",37],["(defun caar (x) (car (car x)))",46],["(eq (caar x) $imetric)",48],["((eq (caar e) 'mtimes)",54],["((eq (caar e) 'mexpt)",56],["(setq dissym (safe-get (caar form) 'dissym)",30],["((eq (caar lst) item) (car lst))",33],["(member (caar u) '(%inverse_jacobi_sn",60],["((eq (caar e) 'mplus)",65]],"useCount":1848},{"word":"cache","context":[["\"Update the indentation cache in CONNECTION and update Emacs.",34],["(source-cache-get input-file",57],["(no-cache)",46],["(with-cache-example",40],["(:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache",36],["(setf (gethash symbol cache) indent)",35],["(unless (equal (gethash symbol cache) indent)",35],["If FORCE is true then start again without considering the old cache.\"",34],[";;; arglists) and tells Emacs. A per-connection cache is used to avoid",34],["\"Return true if the whole indentation cache should be updated.",34]],"useCount":2490},{"word":"cadr","context":[["(x2 ($float (cadr arg2)))",40],["(let* ((arg (%cadr form))",42],["(let ((order (simpcheck (cadr expr) z))",44],["(let ((n (cadr a))",48],["(let ((z (limit (cadr expr) var val 'think)))",57],["(setq y (simpcheck (cadr form) z))",69],["(let ((arg (%cadr form)))",85],["(setq z (simpcheck (cadr expr) simpflag))",89],["(arg2 (%cadr args))",114],["(let ((u (simpcheck (cadr form) z))",130]],"useCount":4439},{"word":"call","context":[["(with-call/cc",144],["(call-next-method)",2215],["(call-next-method)))",1481],["(call-next-method))",1041],["(call-next-method))))",476],["(defimplementation call-with-compilation-hooks (function)",194],["(defimplementation call-with-debugging-environment (debugger-loop-fn)",177],["(call-next-method)))))",177],["(defimplementation call-with-lock-held (lock function)",175],["(when (next-method-p) (call-next-method))",146]],"useCount":15170},{"word":"called","context":[["\"Return the definition locations for the class called NAME.\"",29],[";; N.B. Even though these handlers are called HANDLE-FOO they",30],["(when (boundp '*wait-for-input-called*)",32],["When called with arguments :METHODS T, profile all methods of all",27],["(let ((*wait-for-input-called* nil))",32],["(defvar *wait-for-input-called*)",32],["(setq *wait-for-input-called* t))",32],["\"Function called to print a condition to an SLDB buffer.\")",33],["\"List of (key . fn) pairs to be called on SIGIO.\")",34],["\"Hook called when the first connection from Emacs is established.",27]],"useCount":1814},{"word":"calls","context":[["(define-xref-action :calls-who    #'calls-who)",30],[":calls 'nil)))",223],[":calls",216],[";;; Test that explicit calls to macroexpand in subforms",105],[":calls '(fortran-to-lisp::xerbla fortran-to-lisp::lsame))))",95],["(xref-locations :macro-calls name t))",44],["(defxref who-calls      pxref:list-callers)",41],["(defxref who-calls)",34],["(with-symbol 'who-calls 'sb-introspect))",32],[":calls '(fortran-to-lisp::d1mach))))",30]],"useCount":2482},{"word":"can","context":[[";;; You can reach me at marc.battyani@fractalconcept.com or marc@battyani.net",38],["\"Answer whether <o> can be displayed on the GUI.\"",40],["\"TimeToApply can be either a specific time or a time interval.\"))",42],[";;; This instruction can be used by implementations that support the",47],["The different SWANK backends can specialize this generic function to",53],[";;; implementation can't do this.",41],[";; We can't take any more. Return now.",56],[";; We can't use loop for ... on, becaue it uses atom for testing the end",128],["You can check that with: (LET ((STATUS (SYMBOL-STATUS S P)))",68],[";; <name> can be a normal name or a (setf name)",71]],"useCount":4723},{"word":"car","context":[[":key #'car)",123],["do (setf (cdr last) (cons (car remaining) (cdr remaining)))",162],["(ecase (car spec)",106],["(car",104],[":key #'car)))",103],["(car (rassoc-if (lambda (x) (member coding-system x :test #'equal))",102],[":key #'car))))",101],["(arg1 (%car args))",100],["for element = (car remaining)",169],[":key #'car",283]],"useCount":17673},{"word":"carried","context":[["((carried-out-by MICHELE-PASIN)",51],["((carried-out-by michele-pasin)",645],["(carried-out-by michele-pasin)",5517]],"useCount":6213},{"word":"case","context":[["(case key",189],["(handler-case",3839],["(restart-case",655],["(case type",622],["(handler-case",345],["(case c",306],["(case char",265],["(case ch",235],["(case kind",162],["'example-test-case",177]],"useCount":19036},{"word":"cat","context":[["((cat clause)",814],["(np ((cat common)",88],["(sem-cat",58],["((cat pp)",82],["(cat common)",87],["((cat common)",270],["(syn-cat",112],["(possessor ((cat personal-pronoun)",120],["(qualifier ((cat clause)",146],["((cat np)",166]],"useCount":4535},{"word":"category","context":[[":category \"VERSION_1_3\" :deprecated \"3.1\" :version \"1.3\")",408],[":category \"VERSION_1_1\" :deprecated nil :version \"1.1\")",182],[":category \"VERSION_2_0\" :deprecated \"3.1\" :version \"2.0\")",216],[":category \"VERSION_1_5\" :deprecated nil :version \"1.5\")",269],[":category \"EXT_direct_state_access\" :deprecated nil :version nil)",367],[":category \"VERSION_1_0\" :deprecated nil :version \"1.0\")",392],[":category \"VERSION_3_0\" :deprecated nil :version \"3.0\")",431],[":category \"VERSION_1_2\" :deprecated \"3.1\" :version \"1.2\")",434],[":category \"VERSION_2_0\" :deprecated nil :version \"2.0\")",727],[":category \"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",1368]],"useCount":9504},{"word":"cbuf","context":[["(:method ((cbuf cbuf))",57],["(call-processor fun cbuf (start cbuf) end)",38],["(setf (start cbuf) end)",38],["(call-processor fun cbuf (start cbuf) end)",38],["(funcall fun (data cbuf) start end))",19],["cbuf))",21],["(process-all fun cbuf)",57],["(:method ((cbuf cbuf))",57],[":accessor cbuf-progress-size",19],["(connection cbuf)))",19]],"useCount":1735},{"word":"ccl","context":[["#+ (or ccl ecl gcl) (declare (optimize (speed 3) (safety 0)))",307],["#+ccl",464],["ccl:*current-process*)",37],["#-ccl",40],["(ccl:external-process-status",42],["#-(and (or ccl clisp) (not debug-weak))",84],["#+:ccl",74],["(in-package :ccl)",68],["(ccl:with-lock-grabbed (lock)",50],["(ccl:with-lock-grabbed (mutex)",44]],"useCount":5369},{"word":"cddr","context":[["(clean-arglist (cddr arglist)))",34],["(body (cddr form)))",34],["(body (cddr form))",43],["(fast list (cddr fast))          ;Fast pointer: leaps by 2.",36],["(loop for (type arg) on args by #'cddr",48],["(rplacd fm (cddr fm))",89],["by #'cddr",65],["(a (simplify (cons '(mplus) (cddr a)))))",72],["(cddr form)))",32],["(loop for type in *definition-types* by #'cddr",34]],"useCount":2258},{"word":"cdr","context":[["(setf remaining (cdr remaining))",128],["(setq l (cdr l))",181],["(cdr result)))",269],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["(let* ((args (cdr form))",140],["(setq x (cdr x))",124],["ENTLIST (cdr ENTLIST)",315],["do (setf (cdr last) (cons (car remaining) (cdr remaining)))",162],["(setq dp (cdr dp))",126],["do (setf (cdr last) (cons (car remaining) (cdr remaining)))",162]],"useCount":21001},{"word":"cffi","context":[["(defpackage #:cffi-sys",50],["(cffi:null-pointer)))",45],["(dst sdl-cffi::sdl-surface)",48],["(cffi:null-pointer)",81],["(in-package #:cffi)",76],["(:use #:cl #:cffi)",72],["(in-package #:cffi-tests)",62],["(cffi:null-pointer))",52],["(in-package #:cffi-sys)",51],["(dst (:pointer (:struct sdl-cffi::sdl-surface)))",48]],"useCount":2174},{"word":"ch","context":[["(name-of ch)",49],["(with-pagination ((link-of ch))",45],["(lambda (ch)",50],["(declare (ignore ch))",51],["(act ch :item obj",54],["ch)",58],["(act ch",60],["(when ch",46],["ch))",62],["(case ch",235]],"useCount":2456},{"word":"char","context":[["(read-char stream)",208],["(write-char #\\space)",764],["(declare (ignore char))",281],["(case char",265],["(write-char #\\space xp)",99],["(write-char #\\,)",158],["(loop for char across string",141],["(name (:pointer char)))",117],["(let ((data (html5-stream-char stream)))",114],["char)",106]],"useCount":20782},{"word":"character","context":[["(element-type 'character))",86],["(character",78],[":arg-types '((simple-array character (1))",80],["(trans character trans-%data% trans-%offset%)",82],["'character)",85],["'character",86],["(simple-array character (1))",116],["(set-dispatch-macro-character",119],["((uplo character uplo-%data% uplo-%offset%)",121],[":element-type 'character",539]],"useCount":6264},{"word":"check","context":[["(check-type name string)",173],["(__pointer-check-iterator-range first2 last2)",138],["(check",205],["(__pointer-check-iterator-range first1 last1)",172],["(__pointer-check-iterator-range first last)",143],["(modify-to-check-dataset",134],["(check-type string string)",121],["(check-type symbol symbol)",108],["(when (check-arg-count form 1)",98],["(check-slime-interrupts)",220]],"useCount":9897},{"word":"child","context":[["(declare (ignore child))",52],["(let* ((managed-children (update-layout-managed-children child parent))",46],["(pos (child-position child managed-children))",46],["child))",40],["(pos (child-position child managed-children))",46],["child",60],["(dolist (child children)",62],["(when (frame-p *current-child*)",65],["(when (frame-p child)",39],["(when (frame-p (current-child))",150]],"useCount":2511},{"word":"children","context":[["(show-all-children)",71],["(let* ((managed-children (update-layout-managed-children child parent))",46],["(children  (pjb-re-slot-children node)) )",44],["children)",45],["(let* ((managed-children (update-layout-managed-children child parent))",46],["(set-layout-managed-children)",46],["(show-all-children))",61],["(pos (child-position child managed-children))",46],["(show-all-children)))",71],["(dolist (child children)",62]],"useCount":2042},{"word":"cl","context":[["(in-package :cl-test)",1202],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(in-package :cl-user)",1804],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:let ((bits 0))",1100],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["(:use :cl)",1117]],"useCount":109420},{"word":"class","context":[["class",268],["(declare (ignore class))",236],[":allocation :class",186],["(:class",184],["class)",165],["class))",139],["(t (error \"Overloaded method not defined for this class.\"))))",125],["(if class",116],["(when class",110],[":class (if (find-class symbol nil)",101]],"useCount":23667},{"word":"clause","context":[["(qualifier ((cat clause)",146],["default:   alert('default clause');",22],["clause",31],["(loop for clause in clauses",33],["(clause-level ((scoped {^4 scoped})",37],["(((cat clause)",38],["(dolist (clause clauses)",43],["(cat clause)",45],[",@(mapcar (lambda (clause)",51],["((cat clause)",814]],"useCount":2021},{"word":"clear","context":[["(buffer-clear buffer)",75],["(maybe-emit-clear-values arg1 arg2)",132],["(sdl:clear-display sdl:*black*)",111],["(gl:clear-color 0 0 0 0)",85],["(gl:clear :color-buffer)",81],["(gl:clear :color-buffer-bit)",78],["(clear A)",65],["(clear)",69],["(gl:clear :color-buffer-bit :depth-buffer-bit)",68],["(maybe-emit-clear-values arg1 arg2)))",115]],"useCount":3955},{"word":"clisp","context":[["#+:clisp",69],["#-(or cmu sbcl clisp ecls) fill-this-in)",31],[";; XXX: as of clisp 2.46 flags is a list, not a number.",32],["#-(or allegro clisp)",37],["(:implementation clisp",52],["#+clisp",899],["#-clisp",189],["#+(or clisp clozure)",78],["#-(and (or ccl clisp) (not debug-weak))",84],["#-(and clisp (not debug-weak))",86]],"useCount":3344},{"word":"close","context":[["(unless dont-close",59],["(close s)",57],["(close-socket socket)))))",53],["(dont-close *dont-close*)",52],["(close-list)",60],["(defmethod socket-close ((usocket usocket))",74],["(usocket:socket-close sock))))",81],["(close socket))",82],["(close stream)",78],["(defimplementation close-socket (socket)",205]],"useCount":4954},{"word":"closure","context":[["(make-text-closure",75],["(non-greedy-constant-length-closure",70],["(constant-repetition-constant-length-closure",62],["(greedy-constant-length-closure",62],["((c::byte-function-or-closure-p function)",58],["(c::byte-closure",48],[";; create a closure to match the inner regex and to",40],["((= header sb-vm:closure-header-widetag)",34],[";; REPEAT-MATCHER is part of the closure's environment but it",40],[";; the closure we return is just a thin wrapper around",40]],"useCount":1640},{"word":"cmu","context":[["Send comments or requests to: prodigy@cs.cmu.edu or The PRODIGY PROJECT,",90],[";;;             : db30@andrew.cmu.edu",101],["#+:cmu",76],[";;;\t\t\tFrank Pfenning (fp@cs.cmu.edu)\t\t\t;;;",69],["(optimize #+cmu(ext:inhibit-warnings 3)))",60],["#-(or lispworks sbcl openmcl cmu allegro)",53],["#+(or cmu sbcl)",122],["#-cmu",141],["#+(or cmu scl)",312],["#+cmu",790]],"useCount":2917},{"word":"code","context":[["(acase code",128],["*lisp-code-root*))",552],["A return code of 0 shall indicate the state change was successfully initiated.",344],["code",135],["\"LastErrorCode captures the last error code reported by the LogicalDevice.\"))",118],[";;;;   * Redistributions of source code must retain the above",96],["code))",94],[";;; The code",93],["2) The code will not be distributed to other sites without the explicit",90],["(let ((code (char-code char)))",83]],"useCount":19940},{"word":"coding","context":[["(or (find-external-format coding-system)",34],["(member coding-system x :test #'equal))",38],[";;;; -*- Mode: LISP; Syntax: COMMON-LISP; indent-tabs-mode: nil; coding: utf-8; show-trailing-whitespace: t -*-",49],["(car (rassoc-if (lambda (x) (member coding-system x :test #'equal))",102],[";;;; -*- mode:lisp; coding:utf-8 -*-",67],["*external-format-to-coding-system*)))",143],["(defvar *external-format-to-coding-system*",187],["(defimplementation find-external-format (coding-system)",187],[";;;; -*- coding:utf-8 -*-",246],[";;;; -*- mode:lisp;coding:utf-8 -*-",825]],"useCount":2619},{"word":"coerce","context":[["(let ((name (coerce-name system)))",34],[":arg-coerce 'objc-arg-coerce",34],[";;;           (:coerce-assigns :as-needed) (:array-type ':simple-array)",162],[":arg-coerce 'objc-arg-coerce",34],["(setf az (coerce (realpart (zabs zr zi)) 'double-float))",36],["(setq key (coerce-to-function key)))",41],["(let* ((name (coerce-name name))",59],["(setf lquery (coerce (= lwork -1) 'f2cl-lib:logical))",66],["(coerce",527],[";;;           (:coerce-assigns :as-needed) (:array-type ':array)",942]],"useCount":4360},{"word":"collect","context":[[":collect",119],["collect i))",106],["collect",247],["(collect",119],["(collect-notes",139],["collect (list i x q r)))",80],["collect i)",80],["collect x)",148],["while f collect f)))",76],["collect",1269]],"useCount":10859},{"word":"color","context":[["(hex-to-rgb (get-option '$color))",110],[";;     color",212],["(gl:clear-color 0 0 0 0)",85],["#:com.hexstreamsoft.lib.color",83],["(gl:clear :color-buffer)",81],["(gl:clear :color-buffer-bit)",78],["color",71],["(gl:clear :color-buffer-bit :depth-buffer-bit)",68],["(gl:color 1 1 1)",63],["(hex-to-rgb (get-option '$color)))",48]],"useCount":5883},{"word":"com","context":[[";;;;    <PJB> Pascal J. Bourguignon <pjb@informatimago.com>",1091],[";;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.",430],[";; (http://opensource.franz.com/preamble.html), known as the LLGPL.",266],[";;;; ghollisjr@gmail.com",195],["#:com.hexstreamsoft.lib",187],["(com.informatimago.rdp::with-non-terminal",134],["\"com.informatimago.common-lisp.cesarum\")",132],[";;;; Author: Moskvitin Andrey <archimag@gmail.com>",130],[";;;   http://opensource.franz.com/preamble.html",129],["\"com.informatimago.common-lisp.cesarum\"",121]],"useCount":5455},{"word":"command","context":[["(list \"-c\" command)",60],["(defun %invoke (command arglist)",53],["(etypecase command",53],["command)))",50],["(database-execute-command",64],["(defimplementation command-line-args ()",66],["(command",49],["(list  \"-c\" command)",70],[":command pltcmd",72],["command",101]],"useCount":7017},{"word":"commands","context":[["(dolist (cmd commands)",30],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["(in-package :user-commands)",53],["(:category :basic-commands)",44],[":command-table lisp-commands",36],["si::*tpl-commands*",30],["si::tpl-commands)))",29],["#:gdb-initial-commands",30]],"useCount":1676},{"word":"common","context":[["(&rest common-lisp-user::args)",147],[";(in-package :common-lisp-user)",136],["\"com.informatimago.common-lisp.cesarum\")",132],["(in-package :common-lisp-user)",191],["(:use :common-lisp",209],[";;;           (:array-slicing nil) (:declare-common nil)",252],["(:use #:common-lisp)",331],["((cat common)",270],["(:use :common-lisp)",438],[";;;           (:array-slicing t) (:declare-common nil)",846]],"useCount":7229},{"word":"compilation","context":[["(compilation-speed 0)))",92],["(compilation-speed 2)))",90],["(compilation-speed 3)))",78],["(compilation-speed 1)))",66],["(compilation-speed 0)))",62],["; compilation unit finished",44],["(with-compilation-unit ()",111],["(defimplementation call-with-compilation-hooks (function)",194],["(compilation-speed 0)",259],["(with-compilation-hooks ()",329]],"useCount":2611},{"word":"compile","context":[["(eval-when (:compile-toplevel)",235],["(eval-when (:compile-toplevel :execute)",202],["(compile",847],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["(eval-when (:compile-toplevel :load-toplevel :execute)",4491],["(eval-when (:compile-toplevel :load-toplevel)",243],["(eval-when (compile load eval)",378],["(defimplementation swank-compile-file (input-file output-file",172],["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["(defimplementation swank-compile-string (string &key buffer position filename",162]],"useCount":19609},{"word":"compiled","context":[["(di::compiled-debug-function",67],["compiled-shaders",52],[";; because the code was compiled at a low debug setting.",29],["(di::compiled-frame (di::frame-pointer frame))",29],["(uniform-matrix compiled-shaders :modelview-matrix 4",30],["(compiled-shaders compiled-shaders)",34],["(compiled-shaders compiled-shaders)",34],[";;; the source-path for a code-location.  If the code was compiled",34],["((member (frame-type frame) '(compiled-fun sys-fun fun special-op))",36],["\"Make sure that constant forms are compiled into scanners at compile time.\"",46]],"useCount":1901},{"word":"compiler","context":[["'compiler-condition",60],["(defun signal-compiler-condition (condition context)",63],["(defvar *previous-compiler-condition* nil",63],["\"Briefly describe a compiler error for Emacs.",63],["(setq *previous-compiler-condition* condition)",63],["(defun handle-compiler-warning (condition)",73],["(signal 'compiler-condition",83],["(signal-compiler-condition",109],["Record compiler notes signalled as `compiler-condition's.\"",114],["Record compiler notes signalled as `compiler-condition's.\"",114]],"useCount":7201},{"word":"complex","context":[["(make-instance 'complex-bigfloat",263],["(complex-bigfloat-numerical-eval-p u m))",92],["(complex conjunction)",55],["(complex-float-numerical-eval-p u m))",48],["((complex-float-numerical-eval-p order arg)",40],["(complex apposition)",36],["(complex",36],["(cl:complex a b))",35],["'($complex imaginary))))",32],["((complex-float-numerical-eval-p u m)",30]],"useCount":1794},{"word":"complex16","context":[["(declare (type (f2cl-lib:complex16) one)",47],["f2cl-lib:complex16",460],["(array fortran-to-lisp::complex16 (*))",281],["(array fortran-to-lisp::complex16",187],["'f2cl-lib:complex16))",132],["(fortran-to-lisp::complex16)",103],["'f2cl-lib:complex16))))",86],["(a f2cl-lib:complex16 a-%data% a-%offset%)",74],["(type (f2cl-lib:complex16) zero)",57],["'f2cl-lib:complex16)))",43]],"useCount":2278},{"word":"component","context":[["(component-name component)))",49],["(component-name component)))",49],["(defclass component ()",45],["(setf (component-components component)",44],["(setf (component-components component)",44],["component)",44],["(component-name component))",55],["(component-name component))",55],["component))",66],["(when component",70]],"useCount":16173},{"word":"components","context":[["components))",24],[":initarg :components",25],[";;;; Finding components",31],["(sysdef-error-component \":components must be NIL or a list of components.\"",34],["(sysdef-error-component \":components must be NIL or a list of components.\"",34],["(unless (listp components)",35],["(setf (component-components component)",44],[":components",23],["(split-unix-namestring-directory-components",22],["and NIL NAME, TYPE and VERSION components\"",22]],"useCount":2061},{"word":"compute","context":[["\"In non-nil, use this function to compute the name for fasl-files.\")",31],["(defimplementation compute-backtrace (start end)",183],["(*sldb-restarts* (compute-restarts condition))",31],["#:compute-effective-slot-definition",33],["(loop for frame in (compute-backtrace start end)",34],["(defmethod compute-effective-slot-definition",36],["#:compute-applicable-methods-using-classes",37],[":compute-bounding-box t",38],["(compute-types",39],["#:compute-slots",57]],"useCount":2309},{"word":"computer","context":[["(defun handle-computer (tree)",12],["((has-physical-medium computer-medium)",5517],[";;    SymbolicC++ : An object oriented computer algebra system written in C++",14]],"useCount":5543},{"word":"concatenate","context":[["(concatenate 'string",1369],["(concatenate",401],["(apply #'concatenate 'string",120],["(concatenate 'list",108],["(concatenate 'vector",70],["(intern (concatenate 'string",84],["(concatenate 'string \"occ\" (write-to-string (+ i 1))))",52],["(apply #'concatenate",47],["(apply #'concatenate 'string strings))",44],["(concatenate 'string",41]],"useCount":3624},{"word":"cond","context":[["(cond ((not (< y x)) z)",101],["(cond ((not (< y x)) z)",102],["(os-cond",109],["(cond ((listp sequence)",116],["(cond ((null x) nil)",134],["(cond ((atom e) e)",143],["`(cond",149],["do (cond",174],["(cond",1366],["(cond",26381]],"useCount":45022},{"word":"condition","context":[[":original-condition condition",201],["(lambda (condition)",244],["(defmethod acclimation:report-condition",177],[":original-condition condition",201],["(error (condition)",176],["(lambda (condition stream)",238],["(:report (lambda (condition stream)",1097],["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["\\\"Error\\\" indicates the ManagedElement is in an Error condition.\")",417],["(declare (ignore condition))",297]],"useCount":21748},{"word":"conditions","context":[[";;;; the following conditions:",112],[";;;;   conditions are met:",138],[";; the following conditions:",139],[";;;; furnished to do so, subject to the following conditions:",183],["(with-mapped-conditions (usocket)",253],["(with-mapped-conditions ()",328],[";;; furnished to do so, subject to the following conditions:",596],[";;; the following conditions:",111],["(with-mapped-conditions (socket)",111],[";; furnished to do so, subject to the following conditions:",102]],"useCount":4081},{"word":"configuration","context":[["(clear-logging-configuration)",51],[":inherit-configuration",37],["(setf *ignored-configuration-form* t)",34],[":inherit-configuration))",31],["(error (compatfmt \"~@<Only one inherited configuration allowed: ~3i~_~S~@:>\")",34],[";; or cleared. In the former case, return current configuration; in",36],["(validate-configuration-form",36],["((:inherit-configuration)",36],["(validate-configuration-directory",36],["(validate-configuration-file",36]],"useCount":1696},{"word":"connection","context":[["((default-connection)",102],["(etypecase connection",135],["(let ((c *emacs-connection*))",138],["(defimplementation accept-connection (socket",113],["(singlethreaded-connection",175],["(with-connection (connection)",223],["(with-connection (connection)",223],["(multithreaded-connection",245],["(with-connection ((default-connection))",102],["(with-connection ((default-connection))",102]],"useCount":13491},{"word":"cons","context":[["(cons 100 \"AcDbEntity\")",838],["(cons 280 0)",646],["(cons 100 \"AcDbText\")",771],["(cons 67 0)",828],["(cons 71 0)",566],["(cons 73 0)",553],["(cons 50  0.00000000)",550],["(cons 51  0.00000000)",550],["(cons 8 \"0\")",849],["(cons",1247]],"useCount":23873},{"word":"consp","context":[["(and (consp x)",160],["(and (consp form)",101],["(if (consp x)",112],["((consp x)",87],["(if (consp tree)",92],["(if (consp form)",64],["(and (consp dim) (= (length dim) 1)))",65],["(if (consp binding)",67],["(if (and (f-consp (f-first args))",69],["(cond ((consp fspec)",84]],"useCount":4700},{"word":"const","context":[[";; args: ((\"const String&\" . \"name\"))",79],["\"bool isValid () const\"",42],["\"virtual QSize minimumSizeHint () const\"",42],["\"virtual QSize sizeHint () const\"",56],["(destructuring-bind (lin const)",60],["(zerop1 const))",60],["(mul const",60],["const",63],["(if (zerop1 const)",200],["(\"unsigned long\" \"timeout\" (const-style \"HC05_DEFAULT_TIMEOUT\")))",40]],"useCount":2187},{"word":"constant","context":[["(:constant",33],["(non-greedy-constant-length-closure",70],["(greedy-constant-length-closure",62],["(constant-repetition-constant-length-closure",62],["(constant-repetition-constant-length-closure",62],["\"Make sure that constant forms are compiled into scanners at compile time.\"",46],["(unless constant-offset",42],["(cond (constant-offset",38],["(:constant 1",37],[":constant defconstant",34]],"useCount":2076},{"word":"content","context":[["(setf (hunchentoot:content-type*) \"application/json\")",56],[":content content",44],["content",110],["(setf (istate.content istate) (emacs-inspect/istate istate))",54],["content)",47],[":content content",44],["(setf (hunchentoot:content-type*) \"text/html\")",42],["(when content",37],[":content-type \"application/json\"",37],["content))",36]],"useCount":1917},{"word":"contents","context":[[":initial-contents '(#*010 #*101)))",44],["(clear-register-contents)",45],[":initial-contents '(#*010 #*101))",43],["(clear-register-contents :eax)",39],[":initial-contents",423],[":contents",253],[":initial-contents '((0 1)(0 1))))",64],["contents",53],[":initial-contents '(#*101 #*010)))",55],[":initial-contents '((0 0)(1 1))))",64]],"useCount":3009},{"word":"context","context":[["&key acceptably for-context-type)",120],["context",131],["(defun signal-compiler-condition (condition context)",63],["the error-context redundant.\"",63],["(if error-context",63],[":context context",70],[":context context",70],["(with-frame (p context) index",85],["(assert *current-context*)",119],["(declare (ignore context))",123]],"useCount":7745},{"word":"control","context":[["(multiple-value-bind (new-form control-terminates)",48],[":control-form",45],["(:category :execution-control)",45],[";;; GL version: 1.0, drawing-control",44],["(when control-terminates",42],["(let ((command (apply #'format nil control-string args)))",42],[":format-control",117],[":format-control format-control",110],[":format-control format-control",110],[":control-string string",74]],"useCount":3261},{"word":"copy","context":[["(x (copy-seq orig))",471],["(setf *readtable* (copy-readtable nil)))",494],[";;; modules, and to copy and distribute the resulting executable under",487],["(let ((*readtable* (copy-readtable nil)))",202],["(*readtable* (copy-readtable nil)))",193],["(let ((list (copy-tree '((((0 . 0) . (0 . 0)) . ((0 . 0) . (0 . 0))) .",160],[";;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",149],["copy))",110],[";; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",91],["(copy ex",91]],"useCount":7387},{"word":"count","context":[["(count sizei)",1050],["(:name |count| :type |SizeI| :direction :in)",745],["(if count",298],["(let ((count 0))",263],["(decf count))",146],["while (plusp count)",161],["(dotimes (i count)",230],["(count 0))",195],["(incf count)",186],["until (zerop count)",186]],"useCount":14808},{"word":"counter","context":[["(let ((counter 0))",60],["(defvar *thread-id-counter* 0)",169],["(incf *thread-id-counter*)))))",89],["(incf counter)",47],["(counter 0))",46],["(defvar *thread-id-counter-lock*",41],["(incf *thread-id-counter*)))",38],["(let ((*gensym-counter* 0))",36],["(let ((counter 0)",35],["(sb-thread:make-mutex :name \"thread id counter lock\"))",34]],"useCount":1833},{"word":"create","context":[[":valid-new-expresion-function 'create-new-random-valid",63],[":if-does-not-exist :create)",627],["(push (arc:create-shader",74],["(create",60],[":if-does-not-exist :create",446],["(defimplementation create-socket (host port &key backlog)",138],["(defimplementation create-socket (host port)",83],[":if-does-not-exist :create))",81],[":if-exists :supersede :if-does-not-exist :create)",56],["(ps:create",61]],"useCount":4127},{"word":"current","context":[["(assert *current-context*)",119],["(verify-current-model",137],["(when (frame-p (current-child))",150],["(:status '|current|)",250],["(lhs (and (current-node <node>)",212],["(defimplementation current-thread ()",202],["(scanner-current-token scanner)",150],["mp:*current-process*)",107],["(emit-push-current-thread)",116],["(verify-current-mp",186]],"useCount":13374},{"word":"d","context":[["#'(lambda (d)",91],[";; the value is gc'd, remove it manually",68],["prints                  \"instr %4d t %9.4f d %9.4f k %9.4f v %9.4f p %9.4f\\n\", p1, p2, p3, p4, p5, p7",114],["d-%offset%)",149],["(f2cl-lib:fref d-%data%",173],["(map-slot-boundp* obj '(a b c d))",62],["d-%offset%))",62],["d",61],["(fixnum start end d-start))",58],["d))",56]],"useCount":7898},{"word":"data","context":[["(f2cl-lib:fref h-%data%",352],["(f2cl-lib:fref a-%data%",1315],["(f2cl-lib:array-slice work-%data%",1115],["(f2cl-lib:fref x-%data%",825],["(f2cl-lib:with-multi-array-data",786],["(f2cl-lib:fref c-%data%",704],["(f2cl-lib:fref z-%data%",646],["(setf (f2cl-lib:fref c-%data%",610],[";;;     The data in this file contains enhancments.                    ;;;;;",470],["(f2cl-lib:fref b-%data%",422]],"useCount":32143},{"word":"database","context":[["(database *default-database*))",62],[":database database",130],[":database database",130],["(declare (ignore database))",103],["database",60],["(database *default-database*))",62],["(declare (ignore database db-type))",102],["(error 'sql-database-error",93],["(error 'sql-database-data-error",80],["(database-execute-command",64]],"useCount":3164},{"word":"date","context":[["(has-date-of-death )",103],["(source-code (get-source-code filename code-date)))",70],["(format out \"~&--~&~A~%\" (date))",61],["(> (file-write-date new-file) (file-write-date old-file)))",58],["(second minute hour date month year day-of-week dst-p tz)",39],["(> (file-write-date new-file) (file-write-date old-file)))",58],["(file-write-date input-file))",57],["date",55],["(multiple-value-bind (second minute hour date month year)",40],["(has-date-of-birth )",43]],"useCount":1807},{"word":"db","context":[["(in-package :graph-db)",47],["(declare (ignore database db-type))",102],["(alet* ((sock (db-sock))",59],["(:method (db-type)",51],["(declare (ignore db-type))",51],[":db-kind :key",50],[":db-kind :join",50],["(with-mongo-connection (:host \"localhost\" :port *mongo-default-port* :db \"test\" )",41],["(with-connection (db)",41],[":db-constraints :not-null",45]],"useCount":1964},{"word":"debug","context":[["(declare (optimize (debug 0) (safety 0) (speed 3)))",113],["(when *debug-integrate*",144],["(when *debug-gamma*",168],["#+:debug",225],["(when *debug*",229],["(debug 0)",244],["#-:debug-regex(declare (optimize (speed 3) (safety 0) (space 0) (debug 0)",105],["#-:debug-regex(declare (optimize (speed 3) (safety 0) (space 0) (debug 0)",105],["(optimize (speed 3) (safety 0) (space 0) (debug 0)))",105],["#-:debug",110]],"useCount":14249},{"word":"debugger","context":[["(debugger:environment-of-frame frame)))))",65],["(defimplementation call-with-debugging-environment (debugger-loop-fn)",177],["(defimplementation call-with-debugger-hook (hook fun)",119],["(setq *debugger-hook* function)",111],["(defimplementation install-debugger-globally (function)",111],["(let ((*debugger-hook* hook)",102],["(funcall debugger-loop-fn)))",84],["(if *debugger-hook*",81],["(defun make-invoke-debugger-hook (hook)",77],["(funcall debugger-loop-fn))))",77]],"useCount":5443},{"word":"decf","context":[["do (decf count)",120],["(decf end-start))",76],["(decf start-bis))",168],["(decf count)",143],["(decf count))",146],["do (decf end-start)",31],["(decf i)",76],["(decf n)",53],["(decf spaceleft)",42],["(decf k)",36]],"useCount":1986},{"word":"decl","context":[["(when decl-formals (make-xml-decl-formals :list decl-formals))",42],["(when decl-formals (make-xml-decl-formals :list decl-formals))",42],["decl)",86],["(when decl-formals (make-xml-decl-formals :list decl-formals))",42],["(lcopy decl",42],["(defmethod declaration-arglist ((decl-identifier (eql 'optimize)))",51],["(m5::class-decl-methods",49],[":decl-formals dfmls",46],["(declaim #.potato.common::*compile-decl*)",74],["(check-duplication decl)",42]],"useCount":3037},{"word":"declarations","context":[["(odysseus::*assert-rewrite-for-declarations*)",233],[",@declarations",181],["(odysseus::*optimize-interpretation-of-declarations* . t)",177],["declarations",78],["(odysseus::*optimize-interpretation-of-declarations*",56],["declarations)",46],["#:generic-function-declarations",43],[":generic-function-declarations",40],["declarations))",34],["(odysseus::*support-declarations*)",233]],"useCount":2049},{"word":"declare","context":[["(declare (ignore name))",579],["(declare (ignore pred))",1645],["(declare #.*standard-optimize-settings*)",1603],["(declare (ignore args))",1189],["(declare",893],["(cl:declare (cl:ignorable args))",878],[";;;           (:array-slicing t) (:declare-common nil)",846],["(declare (optimize speed))",641],["(declare (ignore type))",586],["(declare (type display display)",584]],"useCount":67737},{"word":"decls","context":[[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],["(dolist (decl decls)",33],["decls)))",34],["decls))",49],["(multiple-value-bind (bod decls init step final finalp)",29],["(if (null decls)",31],["(when decls",26],["(multiple-value-bind (body decls)",49],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls nil)",112],[",@decls",134]],"useCount":1899},{"word":"decode","context":[["(defun decode-message (stream)",36],["(decode-universal-time universal-time)",34],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))",56],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))",62],["(let ((stream (decode-print-arg output-stream)))",41],["(let ((stream (decode-read-arg input-stream)))",40],["(decode-universal-time (get-universal-time))",55],["(setq stream (decode-stream-arg stream))",50],["(decode-universal-time time)",55],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits))))))",52]],"useCount":1994},{"word":"def","context":[["(def-sqlite3-function",39],["\"hu.dwim.defclass-star+hu.dwim.def\" \"hu.dwim.logger\"",35],["(def :int ((win window-ptr)",34],["\"hu.dwim.stefil+hu.dwim.def+swank\")",30],[":no-proofs-by (:iff-def))",34],["'c:def-ir1-translator name))",29],["'c:def-source-transform",29],["(defvar mal-def! (make-mal-symbol \"def!\"))",32],["(!dao-def)",45],["(defvar mal-def! (make-mal-symbol \"def!\"))",32]],"useCount":1672},{"word":"default","context":[["(defimplementation set-default-directory (directory)",172],[":subject (default-object-in-search",153],["(:default-initargs",1454],["(defimplementation default-directory ()",91],["#-win32 (:library :default)",97],[":default-value nil",100],[":default nil)",148],["(external-format :default))",134],["(with-connection ((default-connection))",102],["((default-connection)",102]],"useCount":12825},{"word":"defaults","context":[["(interpret-bind-defaults",48],["(expand-bind-defaults () params",69],[":defaults pathname)))",54],["(expand-bind-defaults",52],["(interpret-bind-defaults () params",72],["*default-pathname-defaults*))",48],[":defaults pathname))",44],["(*default-pathname-defaults*",42],["defaults)))",39],["(setf *default-pathname-defaults* (truename (merge-pathnames directory)))",35]],"useCount":4046},{"word":"defclass","context":[["(defclass person ()",30],["(defclass doc-file (static-file) ())",34],["(defclass channel ()",46],["(defclass component ()",45],["(defclass node ()",43],["(defclass window ()",40],["(defclass operation ()",36],["(defclass tweet ()",34],[":class defclass",34],["\"hu.dwim.defclass-star+hu.dwim.def\" \"hu.dwim.logger\"",35]],"useCount":2584},{"word":"defconstant","context":[["(defconstant keyword-package (find-package :keyword)",34],[":constant defconstant",34],["(defconstant default-server-port 4005",34],["(defconstant cl-package (find-package :cl)",34],["(defconstant +fd-close+ #.(ash 1 5))",30],["(defconstant +fd-read+ #.(ash 1 0))",30],["(c-format out \"(cl:defconstant \"",28],["(defconstant +lowtag-symbols+",29],["(defconstant +sigint+ 2)",29],["(defconstant +header-type-symbols+",29]],"useCount":6586},{"word":"defgeneric","context":[["(defgeneric component-system (component)",29],["(defgeneric component-pathname (component)",29],["(cons (list `(defgeneric ,name) (gf-location function))",29],["(defgeneric (setf component-property) (new-value component property))",29],["((:defgeneric)",80],[":generic-function defgeneric",34],["((:defun :defgeneric) (second fspec))",84],["(defgeneric component-property (component property))",29],["(defgeneric xref-doit (type thing)",30],["(defgeneric channel-send (channel selector args))",31]],"useCount":2346},{"word":"defimplementation","context":[["(defimplementation all-threads ()",202],["(defimplementation print-frame (frame stream)",195],["(defimplementation send (thread message)",198],["(defimplementation current-thread ()",202],["(defimplementation kill-thread (thread)",202],["(defimplementation preferred-communication-style ()",202],["(defimplementation describe-symbol-for-emacs (symbol)",205],["(defimplementation quit-lisp ()",205],["(defimplementation local-port (socket)",205],["(defimplementation close-socket (socket)",205]],"useCount":13624},{"word":"define","context":[["(docs:define-docs",131],["(define-parameter",48],["(hunchentoot:define-easy-handler",52],["(define-condition throwable (java-exception) ())",54],["`(%glfw:define-glfw-callback ,name",45],["(define-instruction",42],["(define-parse-tree-synonym",78],["(define-test test/all ()",109],["(define-modify-macro appendf (&rest args)",40],["(define-external-function",390]],"useCount":8198},{"word":"defined","context":[["For DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",58],["thematic-substrate::rewrite-defined-concepts-p",52],[";;; should be defined to perform a copy-in/copy-out if the Lisp",41],["((defined-by first-wittgenstein-philosophy)))",40],["(gethash (coerce-name name) *defined-systems*))",34],["additional information on the specifiers defined in ANSI Common Lisp.\")",55],["(t (error \"Overloaded method not defined for this class.\"))))",125],["((defined-by-view first-wittgenstein-philosophy)",131],["For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.\"))",146],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557]],"useCount":2641},{"word":"definition","context":[["(defun swank-mop:slot-definition-documentation (slot)",123],["(defimplementation describe-definition (symbol namespace)",147],["#:slot-definition-name",91],["#:slot-definition-writers",72],["#:slot-definition-initargs",72],["#:slot-definition-allocation",74],["#:slot-definition-type",74],[":key #'slot-definition-name)))",91],["#:slot-definition-initform",71],["#:slot-definition-readers",72]],"useCount":9450},{"word":"definitions","context":[["\"When true don't handle errors while looking for definitions.",34],["(defun function-definitions (name)",30],["\"Return the definitions of a generic function and its methods.\"",29],["(defun variable-definitions (name)",29],["(return-from find-definitions-find-symbol-or-package",44],["(append (function-definitions name)",29],["(defimplementation find-definitions (name)",156],["(defimplementation find-definitions (symbol)",73],["(defslimefun find-definitions-for-emacs (name)",33],["\"Return a list ((DSPEC LOCATION) ...) of definitions for NAME.",34]],"useCount":1991},{"word":"definterface","context":[["(definterface make-weak-value-hash-table (&rest args)",27],["(definterface lisp-implementation-type-name ()",27],["(definterface accept-connection (socket &key external-format",27],["(definterface add-sigio-handler (socket fn)",27],["(definterface toggle-trace (spec)",27],["(definterface function-name (function)",27],["(definterface set-default-directory (directory)",27],["(definterface kill-thread (thread)",27],["(definterface remove-sigio-handlers (socket)",27],["(definterface preferred-communication-style ()",27]],"useCount":3386},{"word":"defmacro","context":[["(defmacro with-recursive-lock-held ((place) &body body)",47],["(defmacro with-pointer-to-vector-data ((ptr-var vector) &body body)",42],["(defmacro with-foreign-pointer ((var size &optional size-var) &body body)",48],["(defmacro with-gensyms (syms &body body)",49],["(defmacro while (test &body body)",54],["(defmacro aif (test then &optional else)",58],["(defmacro without-interrupts (&body body)",63],["(defmacro with-gensyms ((&rest names) &body body)",71],["(defmacro defxref (name function)",74],["(defmacro with-lock-held ((place) &body body)",76]],"useCount":5144},{"word":"defmethod","context":[["(defmethod acclimation:report-condition",177],["(defmethod emacs-inspect ((o t))",180],["(defmethod socket-close ((usocket usocket))",74],["(defmethod convert-special",74],["(defmethod translate-simple-instruction",75],["(defmethod initialize-instance :after",93],["(defmethod emacs-inspect ((o function))",101],["((:defmethod)",109],["(defmethod get-peer-address ((usocket stream-usocket))",72],["(defmethod get-local-name ((usocket usocket))",72]],"useCount":9936},{"word":"defparameter","context":[["(defparameter *unimplemented-interfaces* '()",27],["(defparameter *interface-functions* '()",27],["(defparameter *thread-id-map* (make-hash-table))",63],["(defparameter *loopback-interface* \"127.0.0.1\")",34],["(defparameter *type-specifier-arglists*",28],["(defparameter *implementation-features*",29],["(defparameter *os-features*",29],["(defparameter *architecture-features*",29],["`(defparameter ,name",30],["(defparameter *definition-types*",34]],"useCount":1666},{"word":"defslimefun","context":[["(defslimefun pprint-eval (string)",33],["(defslimefun load-file (filename)",33],["(defslimefun connection-info ()",33],["(defslimefun describe-symbol (symbol-name)",33],["(defslimefun swank-macroexpand (string)",33],["(defslimefun inspect-nth-part (index)",33],["(defslimefun inspect-current-condition ()",33],["(defslimefun sldb-continue ()",33],["(defslimefun undefine-function (fname-string)",33],["(defslimefun find-definition-for-thing (thing)",34]],"useCount":3091},{"word":"defun","context":[["(defun get-host-name ()",94],["(defun main ()",353],["(defun mailbox (thread)",202],["(defun foo ()",201],["(defun nth-frame (index)",142],["(defun current-thread ()",98],["(defun run-tests ()",108],["(defun swank-mop:slot-definition-documentation (slot)",123],["(defun init ()",121],["(defun test ()",112]],"useCount":51119},{"word":"defvar","context":[["(defvar *sldb-stack-top*)",60],["(defvar *external-format-to-coding-system*",187],["(defvar *thread-id-counter* 0)",169],["(defvar *buffer-name* nil)",142],["(defvar *mailboxes* (list))",86],["(defvar *buffer-start-position*)",74],["(defvar *thread-id-map-lock*",63],["(defvar *buffer-substring* nil)",63],["(defvar *previous-compiler-condition* nil",63],["(defvar *buffer-string*)",62]],"useCount":9973},{"word":"delete","context":[["(setf alist (delete name alist :key #'car)))",61],["(delete-all-versions pn)",54],["(delete-duplicates",198],["(when (find-package \"TB-FOO\") (delete-package \"TB-FOO\"))",190],["(delete-count 0))",109],["(safely-delete-package \"H\")",76],["(incf delete-count)",74],["(mapcan #'delete-package (package-used-by-list \"TB-BAR-TO-USE\"))",67],["(delete-package \"TB-BAR-TO-USE\"))",67],[";;; obligated to do so.  If you do not wish to do so, delete this",458]],"useCount":4536},{"word":"deprecated","context":[["\"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",711],[":category \"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",1368],[":category \"VERSION_2_0\" :deprecated nil :version \"2.0\")",727],[":category \"VERSION_1_2\" :deprecated \"3.1\" :version \"1.2\")",434],[":category \"VERSION_3_0\" :deprecated nil :version \"3.0\")",431],[":category \"VERSION_1_3\" :deprecated \"3.1\" :version \"1.3\")",408],[":category \"VERSION_1_0\" :deprecated nil :version \"1.0\")",392],[":category \"EXT_direct_state_access\" :deprecated nil :version nil)",367],[":category \"VERSION_1_5\" :deprecated nil :version \"1.5\")",269],[":deprecated \"3.1\" :version \"1.0\")",234]],"useCount":9853},{"word":"depth","context":[["(depth sizei)",166],["d depth)",46],["(|format| |type| |width| |height| |depth|)))",50],["(gl:clear :color-buffer :depth-buffer)",44],["(declare (ignore depth))",250],["(:name |depth| :type |SizeI| :direction :in)",118],["(ignore depth))",58],["(gl:clear :color-buffer-bit :depth-buffer-bit)",68],["(update-heights height depth)",68],["(gl:enable :depth-test)",75]],"useCount":2807},{"word":"describe","context":[["(defimplementation describe-symbol-for-emacs (symbol)",205],["(describe (find-class symbol)))",51],["(defimplementation describe-definition (symbol namespace)",147],["(describe symbol))",135],["(describe (symbol-function symbol)))",134],["(describe (find-class symbol)))))",83],["(defimplementation describe-definition (symbol type)",51],["\"Briefly describe a compiler error for Emacs.",63],["(:header (describe-primitive-type o))",71],["(with-describe-settings ()",68]],"useCount":2590},{"word":"describes","context":[["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\\\"Servicing\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",417],["\\\"Starting\\\" describes an element being initialized.",417],["\\\"In Service\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",415],["\"An enumerated value that describes the severity of the Indication from the notifier's point of view:",23],["(:documentation \"returns a phrase that describes performing this operation",18],[";;; \"defstruct descriptor\" structure in CMUCL. A `dd' describes a",16],[";;; \"defstruct descriptor\" structure in SCL. A `dd' describes a",13],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417]],"useCount":2593},{"word":"description","context":[[":description",439],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\"The Description property provides a textual description of the object.\"))",799],["(:description",264],["; description:",134],["See WHO-CALLS for a description of the return value.\"",115],["description",80],[":description description",73],[":description description",73],["(description",58]],"useCount":4747},{"word":"destructuring","context":[["(destructuring-bind (caller callee) (cdr spec)",84],["(destructuring-bind (element-type &optional (length '*))",44],["(destructuring-bind",276],["(destructuring-bind (op &rest rands) pattern",36],["(destructuring-bind (pathname) rest",54],["(destructuring-bind (file . pos) loc",44],["A cross between `case' and `destructuring-bind'.",36],["(destructuring-bind (lin const)",60],["`(,op (destructuring-bind ,rands ,operands",37],["(destructuring-bind ,lambda-list ,args",40]],"useCount":2892},{"word":"device","context":[["(device device)",75],["\"If TRUE, take the device online, if FALSE, take the device OFFLINE.\")))",118],["(:DESCRIPTION \"If TRUE enable the device, if FALSE disable the device.\")))",118],["(:DESCRIPTION \"If TRUE enable the device, if FALSE disable the device.\")))",118],["(device device)",75],["\"Access the device-specific portion of the header, skpping the MSI-X fields if required.\"",32],[":device device",32],[":device device",32],[":device (pathname-device pathname)",31],["\"If TRUE, take the device online, if FALSE, take the device OFFLINE.\")))",118]],"useCount":1827},{"word":"di","context":[["(loc (sb-di:frame-code-location frame))",61],["(di:activate-breakpoint bp)",87],["(di::compiled-debug-function",67],["'debug-source-name 'sb-di)",64],["(form-number (sb-di::code-location-form-number cloc)))",35],["(sb-di:no-debug-blocks  () nil)))",35],["(tlf-number (sb-di::code-location-toplevel-form-offset cloc))",35],["(progn (sb-di:code-location-debug-block code-location)",35],["(di::bogus-debug-function",41],["(let* ((path-table (sb-di::form-number-translations tlf 0))",42]],"useCount":4466},{"word":"dir","context":[["(dolist (dir *central-registry*)",34],["dir)",37],["(if dir",42],["(include-book \"std/util/defrule\" :dir :system)",45],["dir))",59],["dir)))",60],["dir",60],["(include-book \"models/jvm/m5/m5\" :dir :system)",41],["(setf (component-root-dir component pathname-type)",40],["(ensure-directories-exist *data-dir*)",36]],"useCount":4148},{"word":"direct","context":[[":direct-slots",45],["direct-superclasses)",46],["#:class-direct-superclasses",95],["#:class-direct-slots",98],[":call-direct t",126],["#:class-direct-default-initargs",78],[":direct-superclasses",75],["#:class-direct-subclasses",53],["direct-slots",52],["direct-superclasses",46]],"useCount":3167},{"word":"direction","context":[["((:name |index| :type |UInt32| :direction :in)",768],["(:name |count| :type |SizeI| :direction :in)",745],["((:name |target| :type |TextureUnit| :direction :in)",464],["(:name |format| :type |PixelFormat| :direction :in)",417],["((:name |location| :type |Int32| :direction :in)",608],[":direction :output",1464],["(:name |level| :type |CheckedInt32| :direction :in)",496],["((:name |program| :type |UInt32| :direction :in)",604],["((:name |target| :type |TextureTarget| :direction :in)",583],["(:name |width| :type |SizeI| :direction :in)",570]],"useCount":31198},{"word":"directory","context":[[":directory",931],[":directory '(:relative \"File conversion\")",390],["(defimplementation set-default-directory (directory)",172],["(defimplementation set-default-directory (directory)",172],["; in the root directory of this project.",134],["(pathname-directory",110],["directory",97],["(make-pathname :directory",93],["(defimplementation default-directory ()",91],["(default-directory))",86]],"useCount":15233},{"word":"display","context":[["(sdl:update-display))",97],["(declare (type display display)",584],[";;; Set properties to give full support to the parser and display",93],["(declare (type display display)",584],["(sdl:update-display)",109],["(sdl:clear-display sdl:*black*)",111],["(declare (type display display))",184],["(declare (type display display))",184],["(xlib:display-finish-output *display*)",129],["(xlib:display-finish-output *display*)",129]],"useCount":7121},{"word":"distribution","context":[[";;    documentation and/or other materials provided with the distribution.",145],[";;;     provided with the distribution.",876],[";;; documentation and/or other materials provided with the distribution.",171],[";;     and/or other materials provided with the distribution.",157],[";;;       with the distribution.",91],[";;;;     provided with the distribution.",136],[";;;    documentation and/or other materials provided with the distribution.",94],[";;    distribution.",92],[";; See `COPYING' in the source distribution for details.",52],[";;;;    documentation and/or other materials provided with the distribution.",80]],"useCount":2352},{"word":"div","context":[["(:div :class \"extra-top-1\" \"<!-- empty -->\")",58],["(div",396],["(:div",235],["(power var (div 1 2))",72],["</div>",63],["(:div :class \"form-group\"",62],["(:div :class \"extra-top-2\" \"<!-- empty -->\")",59],["(:div :class \"extra-top-3\" \"<!-- empty -->\")",59],["(:div :class \"extra-bottom-1\" \"<!-- empty -->\")",59],["(:div :class \"extra-bottom-2\" \"<!-- empty -->\")",59]],"useCount":2618},{"word":"do","context":[["do (progn",599],["(do ()",693],["do",5012],["(do ((i 0 (1+ i))",334],[":do",355],[";;; obligated to do so.  If you do not wish to do so, delete this",458],[";;; obligated to do so.  If you do not wish to do so, delete this",458],[";;; obligated to do so.  If you do not wish to do so, delete this",458],["(do",542],[";;; furnished to do so, subject to the following conditions:",596]],"useCount":26552},{"word":"doc","context":[["(flet ((doc (kind)",81],["(doc nil)))",87],["(doc 'function)))",192],[":doc ((:doc-type :short)",223],[":doc ((:doc-type :short)",223],[":doc ((:doc-type :long)",160],["(doc 'class)))",101],["(doc 'variable)))",94],[":doc ((:doc-type :long)",160],["(when doc",87]],"useCount":3573},{"word":"documentary","context":[["(:CATEGORY \"documentary\"",2428]],"useCount":2428},{"word":"documentation","context":[["(defun swank-mop:slot-definition-documentation (slot)",123],[";;    documentation and/or other materials provided with the distribution.",145],[";;; documentation and/or other materials provided with the distribution.",171],[";;; documentation.",143],[":documentation \"\")",993],["documentation",121],[":documentation",515],["(:documentation \"",824],["(:documentation \"\"))",851],["(:documentation",3956]],"useCount":13481},{"word":"does","context":[[":if-does-not-exist :create)",627],[":if-does-not-exist :create",446],[":if-does-not-exist :error)",108],[":if-does-not-exist if-does-not-exist)",84],[":if-does-not-exist if-does-not-exist)",84],[":if-does-not-exist :create))",81],["(ecase if-does-not-exist",63],[":if-does-not-exist nil)",182],["Not Applicable (5) indicates the element does not support being enabled or disabled.",336],["A Null return indicates the implementation (provider) does not implement this property.",1251]],"useCount":5333},{"word":"dolist","context":[["(dolist (slot slots)",157],["(dolist (arg args)",215],["(dolist (file files)",124],["(dolist (name names)",109],["(dolist (a args)",69],["(dolist (method methods)",71],["(dolist (item items)",65],["(dolist (var vars)",86],["(dolist (option options)",85],["(dolist (form forms)",83]],"useCount":8790},{"word":"done","context":[[":done)",56],["(done))",44],["(done-testing)",62],["'$done))",84],[";;; are done in the correct environment",105],["jmp     short :done",111],["(block done",119],["(done nil))",51],["'$done)",245],[":done",151]],"useCount":3744},{"word":"dotimes","context":[["(dotimes (i 4)",160],["(cl:dotimes (i __ros_arr_len)",231],["(dotimes (i count)",230],["(dotimes (i length)",228],["(cl:dotimes (__ros_str_idx __ros_str_len msg)",218],["(dotimes (i size)",188],["(dotimes (i 10)",162],["(dotimes (i len)",156],["(dotimes (i 100)",138],["(dotimes (i n)",664]],"useCount":6432},{"word":"double","context":[["double-float",2882],[";;;           (:float-format double-float))",1086],["(double-float) (double-float)",170],["(double-float) (double-float)",170],["(f2cl-lib:array-slice work-%data% double-float (iwork)",198],["(x double)",232],["(fortran-to-lisp::integer4) (array double-float (*))",272],["(array double-float (*))",654],["(v (:pointer double)))",303],[":element-type 'double-float",375]],"useCount":18563},{"word":"drama","context":[["(:CATEGORY \"tv-drama\"",2245]],"useCount":2245},{"word":"draw","context":[["`(:draw-operation (,$2)))",49],["(setf ncols (if (= *draw-enhanced3d-type* 0) 3 4))",40],["`(:draw-operation (,$2 ,$3 ,$4)))",52],["(case *draw-enhanced3d-type*",78],["(if (> *draw-enhanced3d-type* 0)",41],["(when (> *draw-transform-dimensions* 0)",46],["(defun draw ()",48],["(when (= *draw-enhanced3d-type* 99)",61],["(when (> *draw-enhanced3d-type* 0)",76],["((draw-operation",155]],"useCount":3671},{"word":"dspec","context":[["(list (make-dspec type name defsrc)",30],["`(,dspec ,(make-file-location file pos)))))",22],["(defun method-dspec (method)",29],["(list (method-dspec method)",29],["(defun make-dspec (type name source-location)",32],["(defun function-dspec (fn)",34],["(mapcar #'check-dspec",34],["(mapcar #'function-dspec (sb-introspect:find-function-callers fn)))))",34],["(dolist (dspec dspecs)",34],["(mapcar #'function-dspec (sb-introspect:find-function-callees fn)))))",34]],"useCount":2037},{"word":"dynamic","context":[["(dynamic-extent transform)",55],["(typecase dynamic-env",58],["(dynamic-extent transform))",78],["(declare (dynamic-extent arguments))",52],["(declare (dynamic-extent initargs))",86],["(declare (dynamic-extent args))",172],["(fli:with-dynamic-foreign-objects ()",40],["(declare (dynamic-extent more-numbers))",40],["(defmethod read-rr-data ((buffer dynamic-buffer)",42],["dynamic-env",50]],"useCount":2174},{"word":"e","context":[["e",219],["(error (e)",293],["(cond ((atom e) e)",143],["(cond ((atom e) e)",143],["(declare (ignore e))",140],["e)",109],["e))",97],["$%e",95],["(lambda (e)",91],["(power '$%e (mul -1 z))",88]],"useCount":10615},{"word":"each","context":[["Executes a series of forms with each VAR bound to a fresh,",29],["\"Bind some printer variables and pretty print each object in VALUES.\"",29],[";;; them separately for each Lisp implementation. These extensions are",34],["\"Return a list of ((&key NAME ID VALUE) ...) where each element of",27],["\"Call each of FUNCTIONS with ARGUMENTS.\"",34],["\"This hook is run each time a connection is established.",34],["(dolist (each inputs)",31],["The `symbol-value' of each element is a type tag.\")",29],[";;; terms of your choice, provided that you also meet, for each linked",487],["after each command.\")",34]],"useCount":1779},{"word":"eax","context":[["mov\t\tedx, eax",42],["mov\t\teax, [esi + t-offset]",43],["mov\t\teax, edx",49],["mov\t\teax, [esi]",58],["push\teax",127],["xor     eax, eax",102],["fstp.single [eax + (uvector-offset 1)]",41],["(inst :push :eax)",71],["push    eax",87],["xor     eax, eax",102]],"useCount":1990},{"word":"ebp","context":[["mov\t\tebp, esp",230],["pop     ebp",177],["push\tebp",228],["pop\t\tebp",211],["push    ebp",158],["mov     ebp, esp",153],["pop         ebp",64],["push        ebp",54],["push    [ebp + ARGS_OFFSET]",53],["mov         ebp,esp",50]],"useCount":1869},{"word":"ecase","context":[["(ecase style",75],["(ecase kind",83],["(ecase type",557],["(ecase namespace",124],["(ecase direction",116],["(ecase mode",114],["(ecase state",107],["(ecase (car spec)",106],["(ecase protocol",98],["(ecase (first fspec)",84]],"useCount":4213},{"word":"ecl","context":[["#+(or ecl mkcl)",42],["#+ (or ccl ecl gcl) (declare (optimize (speed 3) (safety 0)))",307],["#+ (or ccl ecl gcl sbcl) (declare (optimize (speed 3) (safety 0)))",36],["#+(or clasp ecl mkcl)",35],["#-ecl-min",31],["#+ecl-min",30],["#+:ecl",28],["#+ecl",296],["#-ecl-bytecmp",46],["#-ecl",63]],"useCount":1706},{"word":"element","context":[["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417],[":element-type '(unsigned-byte 8)",681],["\\\"In Test\\\" element is performing test functions.",417],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["\\\"Servicing\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",417],["\\\"Migrating\\\" element is being moved between host elements.",417],[":element-type 'character",539],["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832]],"useCount":28685},{"word":"elements","context":[["(multiple-value-bind (elements annotations)",35],["\"Remove &whole, &enviroment, and &aux elements from ARGLIST.\"",34],["\\\"Migrating\\\" element is being moved between host elements.",417],["(iterate-elements",105],["(with-proper-list-elements (element list1 name)",84],["(with-proper-list-elements (element list2 name)",60],[";; Loop through the elements checking whether",48],["(let ((entry (with-alist-elements (element alist nsublis)",48],["(collect-stack-elements)",37],["(collect-elements",37]],"useCount":2147},{"word":"else","context":[["(if it ,then-form ,else-form)))",38],["; else",43],["else",1246],["} else {",229],[":else",157],["(else",46],["else do",54],["(defmacro aif (test then &optional else)",58],["(else",87],[";; else",94]],"useCount":3184},{"word":"elt","context":[["(eql (elt s1 0) (elt s2 0))",55],["(elt model-matrix 0)))",35],["(eql (elt s1 (incf j)) (elt s2 i))))))",55],["(eql (elt s2 i) commachar)",66],["(and (>= i 0) (not (eql (elt s1 0) #\\+)))",33],["(eql (elt s1 (incf j)) (elt s2 i))))))",55],["(eql (elt s1 0) (elt s2 0))",55],["(if (< i 0) (eql (elt s1 1) (elt s2 1)) t)",44],["(if (< i 0) (eql (elt s1 1) (elt s2 1)) t)",44],["(indent-form syntax (elt-noncomment (children tree) (car path)) (cdr path))))",40]],"useCount":2909},{"word":"emacs","context":[["(defmethod emacs-inspect ((f function))",57],["(third (wait-for-event `(:emacs-return ,tag result)))))",60],["((:emacs-rex &rest args) (apply #'eval-for-emacs args))",65],["((:emacs-rex &rest args) (apply #'eval-for-emacs args))",65],["(when *emacs-connection*",68],["(send-to-emacs",69],["(defmethod emacs-inspect ((o function))",101],["(defimplementation describe-symbol-for-emacs (symbol)",205],["(let ((c *emacs-connection*))",138],["(defmethod emacs-inspect ((o t))",180]],"useCount":8326},{"word":"emit","context":[["(emit 'goto LABEL2)",67],["(emit-push-current-thread)",116],["(emit 'dup)",131],["(maybe-emit-clear-values arg1 arg2)",132],["(emit-move-from-stack target representation))",274],["(emit-trailer (type-error-label)",61],["(emit 'swap)",76],["(emit-push-nil)",88],["(emit-move-from-stack target representation)))",116],["(maybe-emit-clear-values arg1 arg2)))",115]],"useCount":4102},{"word":"empty","context":[["(:div :class \"extra-bottom-1\" \"<!-- empty -->\")",59],["(:div :class \"extra-top-1\" \"<!-- empty -->\")",58],["(arm-empty)))",67],["(non-empty (djvm-stack djvm))",67],["remove-empty-subseqs) ; empty subseq we don't want",68],["remove-empty-subseqs) ; empty subseq we don't want",68],["((arm-empty)",84],["(:div :class \"extra-bottom-2\" \"<!-- empty -->\")",59],["(:div :class \"extra-top-3\" \"<!-- empty -->\")",59],["(:div :class \"extra-top-2\" \"<!-- empty -->\")",59]],"useCount":2305},{"word":"enable","context":[["(sb-debug::enable-debugger)",56],["(enable-interpol-syntax)",54],["(sb-impl::enable-stepping))",34],["(:DESCRIPTION \"If TRUE enable the device, if FALSE disable the device.\")))",118],["(gl:enable :depth-test)",75],["(enable-#?-syntax)",85],["(annot:enable-annot-syntax)",43],["(gl:enable :texture-2d)",41],["(gl:enable :cull-face)",52],["(cl-interpol:enable-interpol-syntax)",62]],"useCount":1789},{"word":"encoding","context":[[":encoding encoding",41],[":encoding encoding",41],[":mime-encoding 'nil :source",58],["\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>",40],["(make-simple-8-bit-encoding",38],["(setf *default-foreign-encoding* :utf-16le)",33],["signalled during decoding/encoding the wire protocol.  Do not set this",30],["(declare (ignore encoding-method))",29],["(case encoding",26],[":mime-encoding 'nil :source '\"ECMA registry\" :comments 'nil",26]],"useCount":1676},{"word":"end","context":[["(defimplementation compute-backtrace (start end)",183],[":datum end",166],["(if from-end",486],["(if end",240],["end",336],["(loop for i from start below end",317],["\"end-proof\"",267],["(type fixnum start end))",185],[":from-end t",262],["end-atomic",259]],"useCount":28239},{"word":"end_label","context":[["(if (/= ierr 0) (go end_label))",14],["(go end_label)",1776],["(go end_label)))",519],["end_label",1094],["(if (= n 0) (go end_label))",65],["(if (= n 1) (go end_label))",35],["(if (<= n 0) (go end_label))",31],["(go end_label))",421],["(lquery (go end_label)))",22],["(if (= alpha zero) (go end_label))",20]],"useCount":4056},{"word":"english","context":[["((part-of-expression Tractatus-original-english-version)",1040],["(has-form written-english)",526],["(has-language english)",511],["(language english",11],["(has-language english)))",14],["english)",17],["(language (eql 'english)))",30],["(has-form   written-english)",54],[":lang 'english))",120],["(language acclimation:english))",172]],"useCount":2495},{"word":"ensure","context":[["(let ((byte (ensure-and-read-bits 8 state)))",45],["(ensure-directories-exist path)",47],["(lift:ensure (equal (type-of condition)",47],["(with-open-file (out (ensure-directories-exist",50],["(lift:ensure (cl-ppcre:scan \"<lfm status=\\\"ok\\\">\" response))",51],["(cl:ensure-generic-function 'header-val :lambda-list '(m))",254],["(ensure-same",203],["(ensure-directories-exist",81],["(lift:ensure",53],["(ensure-knowledge-base-state ':tbox-prepared tbox)",56]],"useCount":5594},{"word":"entry","context":[["entry))",115],["(mapcar #'(lambda (entry)",57],["(unless entry",56],["(sys.lap-x86:call (:r13 #.(+ (- sys.int::+tag-object+) 8 (* sys.int::+fref-entry-point+ 8))))",54],["(if entry",192],["(when entry",100],["(pop-bdd-entry)",86],["(push-bdd-entry",72],["`(sys.lap-x86:call ,(object-ea :r13 :slot sys.int::+fref-entry-point+))",53],["(cdr entry))",63]],"useCount":4110},{"word":"enum","context":[["(stream enum)",210],["(mode enum))",180],["(attachment enum)",155],["(target enum)",2772],["(pname enum)",2081],["(type enum)",1082],["(format enum)",453],["(internalformat enum)",418],["(mode enum)",322],["(texunit enum)",208]],"useCount":10728},{"word":"env","context":[["env))",128],["&environment env)",82],["(env:set-env *repl-env*",80],["(env:set-env *repl-env*",80],["(env:set-env *repl-env*",80],["env)",135],["env",78],["env)))",104],["(declare (ignore env))",416],["(get-setf-expansion place env)",178]],"useCount":6641},{"word":"environment","context":[["(declare (ignore environment))",277],["&environment env)",82],["environment)",86],["environment))",102],[";;; are done in the correct environment",105],["(defimplementation call-with-debugging-environment (debugger-loop-fn)",177],["(init-test-environment)",74],["(call-with-debugging-environment",68],["(debugger:environment-of-frame frame)))))",65],["environment",60]],"useCount":3873},{"word":"eq","context":[[":test #'eq)",153],[":test #'eq))",117],["(when (eq timeout t) (return (values nil t)))",178],[":test #'eq))))",100],["(or (eq e1 e2)",91],["(not (eq (type-specifier-arglist symbol) :not-available))))",79],[":test #'eq",76],["((eq (caar e) 'mplus)",65],[":test #'eq)))",179],["(assert (or (not timeout) (eq timeout t)))",211]],"useCount":17292},{"word":"eql","context":[[":eql-specializer-object",57],["(eql (elt s1 0) (elt s2 0))",55],["(eql (elt s1 (incf j)) (elt s2 i))))))",55],["((eql data #\\u0000)",62],["(eql (elt s2 i) commachar)",66],["((eql data +eof+)",86],["(declare (type cl:function eql-bf))",111],["(defmethod declaration-arglist ((decl-identifier (eql 'optimize)))",51],["(eql r rrad))",52],["((eql data #\\>)",50]],"useCount":7029},{"word":"equal","context":[[":test #'string-equal))",118],["(assert-equal",654],[":test #'equal))",310],[":test #'equal",119],[":test 'equal))",154],["(equal",168],["(equal (@__ieee754_pow-%358-rev mem loc pred)",178],[":test #'equal)))",226],["(assert-equal '()",240],[":test #'equal)",254]],"useCount":19236},{"word":"equalp","context":[["(is (equalp",255],[":test #'equalp)",235],["(and (equalp orig x)",166],["(equalp",93],[":test #'equalp))",91],["(orthogonal-projection-unique-equalp",88],[":test #'equalp)))",81],["(assert-equality #'equalp",79],["(assert-equalp",60],[":test #'equalp",55]],"useCount":2786},{"word":"err","context":[["err",103],["(when err",36],["(if usock-err",37],["(progn (setf *standard-output* out) (setf *debug-io* dbg) (setf *error-output* err))",35],["(declare (ignore err))",46],["(error usock-err :socket socket)",48],["(multiple-value-bind (res err)",48],["(err-init '(\"cmdecho\"))",49],["(err-handle \"\"))",52],["(error (err)",163]],"useCount":1851},{"word":"error","context":[["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],["\"Major failure\" \"Critical failure\" \"Non-recoverable error\"",419],["type-error)",476],["program-error)",569],["(error 'format-error",654],["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["(assert-error 'type-error",379],["(error 'format-error",654],["(error",313],["(assert-error 'type-error",379]],"useCount":43793},{"word":"errors","context":[["(let ((*print-errors* t)",57],["(ignore-errors (label-value-line*",56],["(ignore-errors",1412],["(or (ignore-errors",174],["(converting-errors-to-error-location",109],["(ignore-errors",61],["(without-printing-errors (:object object :stream nil)",60],["#+armedbear ((jvm::*catch-errors* nil))",42],["(report-and-ignore-errors",55],["(list name (converting-errors-to-error-location",58]],"useCount":4398},{"word":"escape","context":[["(if *print-escape*",121],["(*print-escape* nil))",40],["(:sdl-key-escape (sdl:push-quit-event))))",37],["(when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-escape)",46],["(write-string (escape-non-ascii event) stream))",34],["(defun escape-non-ascii (string)",34],["(cond (*print-escape*",37],["(*print-escape* t)",37],["(*print-escape* nil)",65],["(let ((*print-escape* nil))",85]],"useCount":1833},{"word":"etypecase","context":[["(etypecase sequence",346],["(etypecase x",253],["(etypecase connection",135],["(etypecase name",131],["(etypecase c",117],["(etypecase socket",114],["(etypecase arg",112],["(etypecase thing",90],[":severity (etypecase condition",81],["(etypecase form",80]],"useCount":4290},{"word":"eu","context":[["(c) 2016 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",212],["Author: Nicolas Hafner <shinmera@tymoon.eu>, Janne Pakarinen <gingeralesy@gmail.com>",12],["(c) 2013 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",31],["(c) 2013 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",31],["(c) 2015 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",208],["(c) 2015 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",208],["(c) 2016 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",212],["(c) 2014 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",336],["(c) 2014 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",336],["Author: Nicolas Hafner <shinmera@tymoon.eu>",791]],"useCount":2377},{"word":"eval","context":[["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["(eval-when (compile load eval)",378],["(eval-when (compile load eval)",378],["(eval-when (:load-toplevel :execute)",336],["(eval-when (:compile-toplevel :load-toplevel :execute)",4491],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["(eval-when (:compile-toplevel :execute)",202],["(eval-always",221],["(eval-when (:compile-toplevel)",235],["(eval-when (:compile-toplevel :load-toplevel)",243]],"useCount":18637},{"word":"event","context":[["(:metaclass event-class)",73],["event",57],["(sdl2:with-event-loop (:method :poll)",59],["(third (wait-for-event `(:emacs-return ,tag result)))))",60],["(sdl:push-quit-event)))",56],["(:key-up-event (:key key)",66],["\"virtual bool event ( QEvent * )\"",83],["(declare (ignore event))",100],["(:key-down-event (:key key)",114],["(:quit-event () t)",171]],"useCount":10339},{"word":"events","context":[["#:*log-events*",36],["(when *log-events*",34],["\"Return the list of events (older events first).\"",34],["(sdl:with-events (:poll)",35],["(events",97],["(PARSE-IRI \"http://fispace.aston.ac.uk/pharmaCo1/data/epc/id/events/x\"))",100],["(sdl:with-events ()",192],["\"Return the list of events (older events first).\"",34],["\"Write a message to *terminal-io* when *log-events* is non-nil.",34],["(defvar *log-events* nil)",34]],"useCount":1793},{"word":"ex","context":[["ex)",58],["(copy ex",91],["(mapobject #'(lambda (ex)",87],["(declare (ignore ex))",68],["#'(lambda (ex)",72],["ex",52],["(with-slots (operator argument) ex",43],["(type ex)",41],["(with-slots (row-expr col-expr row-headings col-headings table-entries) ex",32],["(let ((val (wait-for-single-object-ex event 0 0)))",30]],"useCount":1739},{"word":"excl","context":[["#+allegro (eq excl:*current-case-mode* :case-sensitive-lower)",29],["(excl:run-shell-command",28],["#+(or Genera lcl3.0 excl)",27],["#+(or lcl3.0 excl)",30],["(excl:without-redefinition-warnings",34],["#+:excl",35],["excl::*common-lisp-version-number*",46],["(when (boundp 'excl:*warn-on-nested-reader-conditionals*)",54],["#+excl",71],["(excl:call-next-fwrapper))))",29]],"useCount":1928},{"word":"execute","context":[["(eval-when (:compile-toplevel :load-toplevel :execute)",4491],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],["(eval-when (:load-toplevel :execute)",336],["(database-execute-command",64],["#-gcl (:compile-toplevel :execute)",73],["(eval-when (:execute :compile-toplevel :load-toplevel)",87],["(eval-when (:compile-toplevel :execute :load-toplevel)",132],["(eval-when (:compile-toplevel :execute)",202]],"useCount":8995},{"word":"exist","context":[["(ensure-directories-exist",81],[":if-does-not-exist nil))",60],["(ecase if-does-not-exist",63],[":if-does-not-exist :create))",81],[":if-does-not-exist if-does-not-exist)",84],[":if-does-not-exist if-does-not-exist)",84],[":if-does-not-exist :error)",108],[":if-does-not-exist nil)",182],[":if-does-not-exist :create",446],[":if-does-not-exist :create)",627]],"useCount":3948},{"word":"exists","context":[[":if-exists :overwrite",101],[":if-exists :supersede)",717],[":if-exists :supersede",548],[":if-exists :append",171],[":if-exists if-exists",105],[":if-exists if-exists",105],[":direction :output :if-exists :supersede)",104],[":if-exists :supersede :if-does-not-exist :create)",56],["#?(pkg-exists-p \"gtk+-2.0\" :atleast-version \"2.6.0\")",73],["(if exists",67]],"useCount":4734},{"word":"exit","context":[["Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.",34],["(exit)",132],["(pprint-exit-if-list-exhausted)",371],["(exit))",84],["(frame-exit *application-frame*))",52],["(ext:process-exit-code",50],[":exit",49],["jmp\t\tshort :exit",40],["(pprint-exit-if-list-exhausted)",32],["(sb-ext:exit)",30]],"useCount":2017},{"word":"exp","context":[["exp))",90],["exp)",85],["(make-instance 'sql-function-exp",72],["(cond ((atom exp) exp)",69],["(cond ((atom exp) exp)",69],["(while (setq exp (cdr exp))",43],["(make-instance 'sql-relational-exp",60],["(t exp)))",44],["(not (variable (first ?exp)))",46],["exp",52]],"useCount":3013},{"word":"expand","context":[["(expand-bind-defaults () params",69],["(expand-format",102],["(expand-repeatedly #'expand-1 form))",28],[";; This can happen if the compiler needs to expand a macro",29],["(expand-bind-defaults",52],["(multiple-value-call #'%expand-cons form",42],["(expand-bind-defaults ((count 1)) params",32],["(apply-macro-expander #'format-string-expand string))",31],["(defun expand (form)",31],["(defslimefun swank-format-string-expand (string)",30]],"useCount":1784},{"word":"expected","context":[[":expected-result",177],["(declare (ignore expected kind arguments))",203],["(when (mismatch result expected-digest)",31],["FORM is expected, but not required, to be SETF'able.\"",34],[":expected-type `(integer 0 ,(+ start (- end end-start)))",36],["(equal actual expected)))",44],[":expected-type `(integer 0 ,(- start start-bis))))",72],["(declare (ignore expected))",91],[":expected-type `(integer 0 ,(- end end-start))",97],[":expected-type `(integer 0 ,(- start start-bis))",99]],"useCount":2019},{"word":"export","context":[["(cl:export '(HEADER-VAL",214],["(export '(",56],["(:export :main))",56],["@export-accessors",58],["(:export))",74],["(:export \"TEST/ALL\"))",86],["(export",94],["(:export #:main))",125],["@export",1015],["(:export",3251]],"useCount":7009},{"word":"expr","context":[["(ok expr stream n state",118],["expr",413],["(answer expr state",348],["expr)",307],["expr))",159],["(lcopy expr",142],["(ok expr stream n state output-string-stream))",128],["(type-error expr",135],["(answer expr",154],["(m2 expr",452]],"useCount":8936},{"word":"expression","context":[[":lexer 'lisp-math-expression-lexer",49],["(with-slots (expression assignments) expr",47],["`(:expression ,$1))",45],[":expression query-expression",42],["((part-of-expression Tractatus-original-english-version)",1040],["((part-of-expression Tractatus-original-german-version)",541],[":expression expr",96],["expression",80],["(nth-value 2 (function-lambda-expression function)))",42],[":expression query-expression",42]],"useCount":5932},{"word":"ext","context":[["(optimize #+cmu(ext:inhibit-warnings 3)))",60],["(ext:quit))",50],["(ext:process-exit-code",50],["(sb-ext:run-program",67],["(let ((maybe-thread (sb-ext:weak-pointer-value thread-pointer)))",68],["(error-of-type 'ext:source-program-error",143],["(apply #'sb-ext:save-lisp-and-die filename",56],["(ext:run-program",51],["(system-get 'opengl-free-drawing-default-language-ext-1)))",52],["'*runtime-pathname* 'sb-ext)",56]],"useCount":6485},{"word":"external","context":[["(defvar *external-format-to-coding-system*",187],["(define-external-function",390],["load-p external-format",161],[":external-format external-format",128],[":external-format external-format",128],["*external-format-to-coding-system*)))",143],[":external-format external-format)))",137],["(defimplementation find-external-format (coding-system)",187],[":external-format external-format)))",137],["(external-format :default))",134]],"useCount":6415},{"word":"f","context":[["f",110],["f))",63],["f)",67],["(if (and (f-consp (f-first args))",69],["(if (and (f-consp (f-first args))",69],["(defimplementation function-name (f)",71],["while f collect f)))",76],[":f-juego  #'f-j-mmx",100],["while f collect f)))",76],[":f-juego  #'f-j-mmx",100]],"useCount":9256},{"word":"f2cl","context":[["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(f2cl-lib:fref a-%data%",1315],["(the f2cl-lib:integer4",1215],[";;; Compiled by f2cl version:",1102],["(f2cl-lib:array-slice work-%data%",1115],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["(f2cl-lib:fref x-%data%",825],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435]],"useCount":60249},{"word":"failure","context":[["(failure-p t",41],["(multiple-value-bind (output warnings-p failure-p)",36],["(when failure-p",38],["(multiple-value-bind (output-file warnings-p failure-p)",61],["(or failure-p",68],["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["(\"Unknown\" \"OK\" \"Degraded/Warning\" \"Minor failure\"",419],["\"Major failure\" \"Critical failure\" \"Non-recoverable error\"",419],["\"Major failure\" \"Critical failure\" \"Non-recoverable error\"",419]],"useCount":3488},{"word":"false","context":[["false",33],["(setf first$ f2cl-lib:%false%)",88],[":INITFORM \"false\")",83],["(cont-false (be ∅))",56],[":initform  \"false\"",46],["false)",37],["(assert-false (subsetp l1",36],["(funcall cont-false)",44],["(emit-push-false representation)",43],["cell1 false",41]],"useCount":1853},{"word":"fasl","context":[["(or (not fasl-file)",34],["((getf options :fasl-directory)",31],["(funcall *fasl-pathname-function* input-file options))",31],["(defun fasl-pathname (input-file options)",32],["#:*fasl-pathname-function*",32],["(defun compile-files (files fasl-dir load quiet)",32],["(fasl-pathname pathname options)",32],["(let ((fasl-file (probe-file (compile-file-pathname source-file))))",34],["(file-newer-p source-file fasl-file))))",34],["(defvar *fasl-pathname-function* nil",31]],"useCount":1911},{"word":"fd","context":[["(or (not (fd-stream-input-buffer-empty-p stream))",49],["(defimplementation socket-fd (socket)",63],["(push (cons fd fn) *sigio-handlers*)))",50],["(:int :handle fd)",59],["#'(lambda (fd fail frame)",56],["(defimplementation remove-fd-handlers (socket)",50],["(fd :int)",71],["(fd :int))",86],["(let ((fd (socket-fd socket)))",136],["(let ((fd (socket-fd socket)))",136]],"useCount":6090},{"word":"fdo","context":[["(f2cl-lib:fdo (l 1 (f2cl-lib:int-add l 1))",177],["(f2cl-lib:fdo (j n (f2cl-lib:int-add j (f2cl-lib:int-sub 1)))",179],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(f2cl-lib:fdo (i",157],["(f2cl-lib:fdo (i j (f2cl-lib:int-add i 1))",150],["(f2cl-lib:fdo (i (f2cl-lib:int-add j 1)",141],["(f2cl-lib:fdo (i 2 (f2cl-lib:int-add i 1))",115],["(f2cl-lib:fdo (j 2 (f2cl-lib:int-add j 1))",75],["(f2cl-lib:fdo (k 1 (f2cl-lib:int-add k 1))",298],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435]],"useCount":5305},{"word":"features","context":[["((member :sb-thread *features*) :spawn)",34],[":features ,(features-for-emacs)",34],["*features*)",37],["(setq *slime-features* *features*)",66],["(setq *slime-features* *features*)",66],["(defun features-for-emacs ()",34],["(disabled-features",34],["(send-to-emacs (list :new-features (features-for-emacs)))))",34],[":features ,(features-for-emacs)",34],["(send-to-emacs (list :new-features (features-for-emacs)))))",34]],"useCount":2017},{"word":"field","context":[["append (let ((slot (alien::alien-record-field-name field)))",29],["(make-instance 'form-view-field",25],["(defgeneric Fix-ship-position (ship game-field))",25],["append (let ((slot (alien::alien-record-field-name field)))",29],["(defmethod Fix-ship-position (ship game-field)",25],[":field-names nil",39],["(format-write-field stream",55],[":field-names nil))",49],["(loop for field in fields",42],["field",47]],"useCount":1988},{"word":"file","context":[[";;;; See file COPYING for details.",218],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361],[";; This file is part of SICP Solutions.",176],["(defimplementation swank-compile-file (input-file output-file",172],["(defimplementation swank-compile-file (input-file output-file",172],["(defimplementation swank-compile-file (input-file output-file",172],[";;;     The data in this file contains enhancments.                    ;;;;;",470],["(write-to-file",170],["(:file",164],[";;  This file is part of stumpwm.",234]],"useCount":39919},{"word":"filename","context":[["(apply #'sb-ext:save-lisp-and-die filename",56],["(defimplementation swank-compile-string (string &key buffer position filename",162],["filename",94],["(declare (ignore filename policy))",91],["(with-open-file (in filename)",59],["(when filename",59],["(source-code (get-source-code filename code-date)))",70],["(defimplementation save-image (filename &optional restart-function)",82],[":filename filename",90],[":filename filename",90]],"useCount":6415},{"word":"files","context":[[":name \"text-files\"",63],[";;; and test files, if your copy came without them) before reporting",34],["(dolist (file files)",124],[":name \"csv-files\"",109],["(:files",49],["files)))",46],["perform explain output-files operation-done-p",42],["\"Hook run after user init files are loaded.\")",34],["(defun compile-files (files fasl-dir load quiet)",32],["(read-strategies-files)",33]],"useCount":3977},{"word":"fill","context":[["(pprint-newline :fill)))",58],[":fill-pointer t",82],["fill",56],[":fill-pointer 5",64],["(fill-pointer a)",128],[":fill-pointer 0)))",133],[";; -*- Mode:Lisp; Syntax:ANSI-Common-LISP; Coding:us-ascii-unix; fill-column:158 -*-",157],[":fill-pointer 0))",158],[":fill-pointer 0",159],["(pprint-newline :fill)",320]],"useCount":4037},{"word":"finally","context":[["finally (return t)))",56],["(finally",90],["finally (return result)))",127],[":finally",117],["finally (return",145],["finally",1101],["finally (progn",109],["finally (return result))))",63],["finally (return t))))",66],["} finally {",78]],"useCount":3659},{"word":"find","context":[["(when (find-package \"TB-FOO\") (delete-package \"TB-FOO\"))",190],["(defimplementation find-thread (id)",191],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["(describe (find-class symbol)))))",83],["(or (find thread *mailboxes* :key #'mailbox.thread)",89],["(defimplementation find-external-format (coding-system)",187],["(defimplementation find-definitions (name)",156],["(setf tbox (find-tbox tbox))",114],[":class (if (find-class symbol nil)",101],["(setf abox (find-abox abox))",94]],"useCount":16614},{"word":"finish","context":[["(xlib:display-finish-output *display*)))",63],["(loop-finish)",66],["(finish-output s)",72],["(finish-output)))",91],["(finish-output stream))",93],["(loop-finish))",109],["(finish-output))",121],["(xlib:display-finish-output *display*)",129],["(finish-output stream)",140],["(finish-output)",382]],"useCount":2828},{"word":"first","context":[["(first",157],["(__pointer-check-iterator-range first last)",143],["(ecase (first fspec)",84],["(list (- (first x) (first (first R))))",84],["(list (- (first x) (first (first R))))",84],["(setf first$ f2cl-lib:%false%)",88],["(/ (first (get-option '$dimensions)) 100.0)",88],["(setq first$ f2cl-lib:%true%)",93],["((defined-by-view first-wittgenstein-philosophy)",131],["(round (first (get-option '$dimensions)))",142]],"useCount":12046},{"word":"fixnum","context":[["(declare (fixnum i))",314],["#+:lispworks (hcl:fixnum-safety 0)))",334],[":type cl:fixnum",345],["(declare (type fixnum i))",260],["(the fixnum",257],["(declare (type fixnum start-pos))",227],["(type fixnum start end))",185],["(declare (fixnum n))",160],["(declare (type fixnum n))",147],[":type fixnum",139]],"useCount":10261},{"word":"flag","context":[["(values symbol flag sname package))",34],["internal to the package identifier part. (Notice that the flag is",34],["(flag :short-name \"h\" :long-name \"help\"",34],["(make-bp :value 0 :united-flag nil :spaces nil :crs nil",65],["(if flag",62],["(let ((flag nil))",49],[":united-flag",46],["(when flag",45],["Return the symbol and a flag indicating whether the symbols was found.\"",35],["(assert flag)",40]],"useCount":1854},{"word":"flags","context":[["(appendf *cc-flags* (trim-whitespace flags)))",42],["(if flags",62],["(flags :int)",63],["(flags :int))",67],["(declare (special flags))",74],["(let* ((flags (sb-cltl2:declaration-information decl-identifier)))",34],["(flags bitfield))",37],["(appendf *cc-flags* (trim-whitespace flags)))",42],["(flags :unsigned-int))",47],["flags",61]],"useCount":2119},{"word":"flet","context":[["(flet",98],["(flet ((doc (kind)",81],["(flet ((doc (kind &optional (sym symbol))",77],["(flet ((restart-sbcl ()",56],["(flet ((common-prefix (s1 s2)",53],["((:flet) `(flet ,(process-fspec (second fspec)) ,(third fspec)))))",47],["((:flet) `(flet ,(process-fspec (second fspec)) ,(third fspec)))))",47],["(flet ((%f (y)",39],["(flet ((reader (slot)",38],["(flet ((name (s) (string-downcase (symbol-name s))))",35]],"useCount":2957},{"word":"float","context":[["(array double-float (*))",654],["(params (:pointer float)))",470],["(v (:pointer float)))",396],[":type cl:float",900],[";;;           (:float-format double-float))",1086],[":element-type 'double-float",375],["double-float",2882],[";;;           (:float-format double-float))",1086],["(x float)",296],["(fortran-to-lisp::integer4) (array double-float (*))",272]],"useCount":29180},{"word":"fn","context":[["(defimplementation call-with-debugging-environment (debugger-loop-fn)",177],["(defimplementation interrupt-thread (thread fn)",173],[",@(loop for (keyword fn) in pairs",76],["(funcall debugger-loop-fn))))",77],["(defimplementation spawn (fn &key name)",171],["(funcall fn))",111],["(declare (type generic-function fn))",134],["(let ((fn",77],["(funcall debugger-loop-fn)))",84],["(funcall fn)))",84]],"useCount":8667},{"word":"fname","context":[["'(:relative \"occurrences\" \"lisp\") :name *fname*",168],["(defimplementation profile (fname)",151],["'(:relative \"occurrences\" \"csv\") :name *fname*",84],["(defimplementation arglist (fname)",106],["(defimplementation unprofile (fname)",151],["'(:relative \"occurrences\" \"midi\") :name *fname*",84],["*fname*",78],["(let ((fname (from-string fname-string)))",67],["(let ((fname (from-string fname-string)))",67],["(list :function-name (string fname))))",58]],"useCount":2510},{"word":"following","context":[[";;; the following conditions:",111],[";; the following conditions:",139],[";;;; the following conditions:",112],[";;;; furnished to do so, subject to the following conditions:",183],[";;; furnished to do so, subject to the following conditions:",596],[";; furnished to do so, subject to the following conditions:",102],[";;;; subject to the following conditions:",87],["one following appear in all copies and in supporting documentation, and",49],[";; the following list of keywords is reproduced below in the",34],["The following restarts are available:",30]],"useCount":2094},{"word":"font","context":[["font-stretch",36],["font-ascent font-descent direction",36],["font-weight",36],["font-size",41],["font",45],["(declare (type font font)",53],["(declare (type font font)",53],[":font font",73],[":font font",73],["(write-font-type)",222]],"useCount":3039},{"word":"foo","context":[["(defun foo (x)",51],["(foo)",55],["(return-from foo",60],["foo();",66],["(foo))",66],["\"foo\")))",71],["(defun foo ()",201],["\"function foo() {",194],["foo",54],["var foo = function (x) {",47]],"useCount":3008},{"word":"for","context":[[";;;; See file COPYING for details.",218],["\\\"Unknown\\\" (0) indicates the last requested state for the element is unknown.",343],["DMTF has reserved the unused portion of the continuum for additional HealthStates in the future.\")",417],[";;; terms of your choice, provided that you also meet, for each linked",487],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["for i from 0",679],["(loop for i from start below end",317],["(odysseus::*assert-rewrite-for-declarations*)",233],["(odysseus::*assert-rewrite-for-unique-names-axioms*)",233],["(loop for i from 0",221]],"useCount":49873},{"word":"force","context":[["(force-output stream)))",53],[":force force",52],["(force-output)",545],["(force-output stream)",170],["(force-output))",140],["(force-output stream))",110],["(force-output *standard-output*)",69],["(force-user-output)",67],["(force-output *query-io*)",58],["(declare (ignore force))",56]],"useCount":3579},{"word":"foreign","context":[["#:%foreign-type-size",50],["\"Return the size in bytes of a foreign type.\"",64],["(with-foreign-object (p type)",80],["(with-foreign-pointer-as-string (s 100)",101],["#:with-foreign-pointer",56],["(multiple-value-bind (lisp-name foreign-name options)",52],["#:%foreign-type-alignment",50],["#:%foreign-alloc",50],["#:%foreign-funcall",50],["#:foreign-free",60]],"useCount":5096},{"word":"form","context":[[":form whole-form",300],["(has-form written-english)",526],["(has-form written-german)",541],["form)",787],["form))",481],["form",420],["plurals-form \"\"",378],[":form whole-form",300],["form)))",282],[";;;   * Redistributions in binary form must reproduce the above",876]],"useCount":34255},{"word":"format","context":[["(format stream",190],["(format t",253],["(format t \"~%\")",199],["(format",284],["(:name |format| :type |PixelFormat| :direction :in)",417],["(format enum)",453],["(error 'format-error",654],["(format stream",722],["(format nil",832],[";;;           (:float-format double-float))",1086]],"useCount":32449},{"word":"forms","context":[["(dolist (form forms)",83],[";;; Redistribution and use in source and binary forms, with or without",1324],[";; Redistribution and use in source and binary forms, with or without",332],["forms)))",78],[",@forms))",113],[",@forms))))",79],[",@forms",117],[";;;;   Redistribution and use in source and binary forms, with or",138],[";;;; Redistribution and use in source and binary forms, with or without",148],["forms))",74]],"useCount":7282},{"word":"fortran","context":[["(array fortran-to-lisp::complex16",187],["(fortran-to-lisp::integer4) (array double-float (*))",272],["(fortran-to-lisp::integer4) (fortran-to-lisp::integer4)",278],["(fortran-to-lisp::integer4) (fortran-to-lisp::integer4)",278],["(array fortran-to-lisp::complex16 (*))",281],["(fortran-to-lisp::make-f2cl-finfo :arg-types",359],["(fortran-to-lisp::integer4))",535],["fortran-to-lisp::*f2cl-function-info*)",649],["(fortran-to-lisp::make-f2cl-finfo",658],["(fortran-to-lisp::integer4)",1246]],"useCount":7620},{"word":"found","context":[["(let ((found nil))",50],["found))",38],["(if found?",43],["thematic-substrate::create-abox-if-not-found-p",43],["(unless found",43],["(cond (found",47],["found)",50],[":not-found)",84],["(if found",169],["(when found",106]],"useCount":2724},{"word":"frame","context":[["(defimplementation print-frame (frame stream)",195],["(defimplementation print-frame (frame stream)",195],["(let ((frame (nth-frame index)))",177],["(let ((frame (nth-frame index)))",177],["(let ((frame (nth-frame frame-number)))",167],["(let ((frame (nth-frame frame-number)))",167],["(let ((frame (nth-frame frame-number)))",167],["(when (frame-p (current-child))",150],["(declare (ignore frame))",149],["(defun nth-frame (index)",142]],"useCount":28986},{"word":"free","context":[["(make-instance 'entity-opengl-free-drawing-2d",126],[";;; (C) 2011 Philippe Brochard <hocwp@free.fr>",40],["+free-text-re+",36],["state free",47],["(defun foreign-free (ptr)",48],["(system-get 'opengl-free-drawing-default-language-ext-1)))",52],["(make-instance 'context-free-grammar",60],["#:foreign-free",60],["(count (min free (length string))))",33],["(when (> (length string) free)",33]],"useCount":2323},{"word":"fref","context":[["(f2cl-lib:fref c-%data%",704],["(f2cl-lib:fref h-%data%",352],["(setf (f2cl-lib:fref a-%data%",312],["(f2cl-lib:fref ap-%data%",304],["(f2cl-lib:fref b-%data%",422],["(setf (f2cl-lib:fref c-%data%",610],["(f2cl-lib:fref z-%data%",646],["(setf (f2cl-lib:fref x-%data%",273],["(f2cl-lib:fref x-%data%",825],["(f2cl-lib:fref a-%data%",1315]],"useCount":16537},{"word":"fresh","context":[["(fresh-line *standard-output*)",40],["(fresh-line)",501],["(fresh-line-indented s)",44],["(with-fresh-labels",49],["(with-fresh-genvar",194],["(fresh-line stream)",169],["(fresh-line *query-io*)",79],["(fresh-line *error-output*)",67],["(fresh-line *debug-io*)",58],["(fresh-line))",55]],"useCount":1718},{"word":"from","context":[["(emit-move-from-stack target representation))",274],["\\\"Emigrating\\\" element is being moved away from host element.",417],[":from-end t",262],["for i from 0",679],["(if from-end",486],[";;; exception statement from your version.",458],[";;; module.  An independent module is a module which is not derived from",458],["(with-input-from-string",285],["(loop for i from start below end",317],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361]],"useCount":30735},{"word":"fspec","context":[["(ecase (first fspec)",84],["((:defun :defgeneric) (second fspec))",84],["(defun process-fspec (fspec)",63],["(defun process-fspec (fspec)",63],["(format nil \"~S is now untraced.\" fspec))",55],["(defun toggle-trace-aux (fspec &rest args)",55],["(defun tracedp (fspec)",55],["(format nil \"~S is now traced.\" fspec))))",55],["(cond ((consp fspec)",84],["fspec)))",84]],"useCount":3580},{"word":"fst","context":[["(let ((nvw (pair-fst pair))",77],["(let ((nva (pair-fst pair))",51],["(let ((nvs1 (pair-fst pair))",54],["(let ((nvn (pair-fst pair))",49],["(let ((nvX_ (pair-fst pair))",55],["(let ((nvX (pair-fst pair))",59],["(let ((nvy (pair-fst pair))",85],["(make-pair :fst (funcall (funcall nvmk-hdf)",242],["(let ((nvh (pair-fst pair))",97],["(let ((nvx (pair-fst pair))",194]],"useCount":1843},{"word":"fun","context":[["(process-all fun cbuf)",57],["(defimplementation call-with-debugger-hook (hook fun)",119],["(etypecase debug-fun",58],["(declare (type function fun))",61],["(funcall fun)",158],["(etypecase fun",62],["fun)",65],["(funcall fun)))",157],["(when fun",66],["(if fun",71]],"useCount":6588},{"word":"funcall","context":[["(funcall",1416],["(funcall function))))",102],["(funcall fn))",111],["(funcall function))",143],["(funcall fun)))",157],["(funcall fun)",158],["(funcall function)))",234],["(make-pair :fst (funcall (funcall nvmk-hdf)",242],["(make-pair :fst (funcall (funcall nvmk-hdf)",242],["(funcall",420]],"useCount":13945},{"word":"function","context":[["(defimplementation call-with-compilation-hooks (function)",194],["fortran-to-lisp::*f2cl-function-info*)",649],["\"(function () {",475],["(define-external-function",390],["(cl:ensure-generic-function 'header-val :lambda-list '(m))",254],["(funcall function)))",234],["(function",233],["(declare (type cl:function less-bf))",195],["\"function foo() {",194],["(make-instance '-function-proto",195]],"useCount":42539},{"word":"functioning","context":[["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\\\"OK\\\" indicates the ManagedElement is functioning normally.",417],["\\\"Degraded\\\" indicates the ManagedElement is functioning below normal.",417]],"useCount":1666},{"word":"functions","context":[["\\\"In Test\\\" element is performing test functions.",417],[";;; etc, turned into generic functions, or something. In the very",34],["(defimplementation profiled-functions ()",151],["\"All functions unprofiled.\")",90],["*MCStylistic-Mar2013-functions-path*))",54],["(dolist (local-function local-functions)",42],[";; Representation through equivalent functions",40],["(dolist (function functions)",38],[";;; smattering of non-portable functions in order to write the server,",34],["#:profiled-functions",34]],"useCount":4944},{"word":"g","context":[["(g float)",40],[";; sometimes the name is not a string (e.g. NIL)",34],["(declare (ignorable a b c d e f g h))",38],["g))",199],["(let ((g (gensym)))",167],["(g :uint8)",56],["'(lambda (a b c d e f g h)",38],["g",47],["(dolist (v (vertices g))",42],["(multiple-value-bind (r g b)",41]],"useCount":3622},{"word":"g212","context":[["a(g212",3670]],"useCount":3670},{"word":"g6","context":[["a(g6",3655]],"useCount":3655},{"word":"gc","context":[["(:gc :frame)",137],["4\tGCONTEXT\t\tgc",38],["(when *gc-debug-scavenge-stack*",40],["(uuo-gc-trap)",41],["(gc)",49],["(declare (ignore gc))",52],["(:gc :no-frame :layout #*0)",60],[";; the value is gc'd, remove it manually",68],["(:gc :no-frame)",112],["(bench-gc)",134]],"useCount":2254},{"word":"gcl","context":[["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],["#+gcl (compile load eval)",39],["#-gcl (:load-toplevel :execute)",42],["#+gcl (load eval)",43],["#-gcl (:compile-toplevel :execute)",73],["#+gcl (compile eval)",79],["#-gcl",254],["#+ (or ccl ecl gcl) (declare (optimize (speed 3) (safety 0)))",307],["#+gcl",309],["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102]],"useCount":3957},{"word":"generated","context":[["(defun compiling-from-generated-code-p (filename source)",31],["; Auto-generated. Do not edit!",681],["(generated-by d)))",29],[";;; we work from come out of the compiler's statically-generated debug",29],["((compiling-from-generated-code-p file source)",31],["; Automatically generated by jvm2m5",39],[";;;; when a new instance of this file is generated.",26],[";;automatically generated from data in the philosophy meta=encyclopedia: http://www.ditext.com/encyc/",52],[";;; this file is automatically generated, do not edit",54],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361]],"useCount":1761},{"word":"generic","context":[["((typep (fdefinition symbol) 'generic-function)",52],["The different SWANK backends can specialize this generic function to",53],[":generic-function)",55],[";; generic function readers",72],["#:generic-function-name",79],["((:function :generic-function)",130],[";;; For the specification of this generic function, see",131],["(declare (type generic-function fn))",134],["(cl:ensure-generic-function 'header-val :lambda-list '(m))",254],["#:generic-function-methods",48]],"useCount":5652},{"word":"gensym","context":[["(let ((g (gensym)))",167],["(setf *r8-value* (list (gensym))))",109],["(let ((var (gensym)))",119],["(let ((sym (gensym)))",110],["(setf *r8-value* (list (gensym)))))",79],["(gensym))",78],["(let ((value (gensym)))",67],["(let* ((sym (gensym))",65],["(let ((sym (gensym)))",64],["(LABEL2 (gensym)))",62]],"useCount":4289},{"word":"get","context":[["(with-request :get nil",274],["(make-obj-title (get-option '$key))",244],["(get-option '$line_width)",196],["(hex-to-rgb (get-option '$color))",110],["(get-option '$line_type)",182],["(get-decoded-time)",117],["(round (first (get-option '$dimensions)))",142],["(get-setf-expansion place env)",178],["(if (and (juego-terminado-p estado) (< (get-pts yo) (get-pts otro)))",100],["(get-option '$file_name)))",101]],"useCount":13735},{"word":"getf","context":[["(if (getf plist :emacs-buffer)",34],[":key (lambda (p) (getf (mp:process-property-list p) 'id))))",37],["(or (getf (mp:process-property-list thread) 'id)",37],["(or (getf (mp:process-property-list thread) 'mailbox)",37],["(setf (getf (mp:process-property-list thread) 'id)",37],["(let ((dir (getf options :fasl-directory)))",30],["(case (getf options :plot_format)",40],["(setf (getf current-token :correct) nil)",54],["((getf options :fasl-directory)",31],["(setf (getf (mp:process-property-list thread) 'mailbox)",37]],"useCount":1771},{"word":"gethash","context":[["(setf (gethash opt *gr-options*) val)",100],["(setf (gethash \"one\" hash-table-equal) \"uno\")",44],["(setf (gethash \"one\" hash-table-eq) \"uno\")",44],["(setf (gethash \"one\" hash-table-default) \"uno\")",44],["(let* ((entry (gethash (name s) table))",35],["(setf (gethash o *to-string-hashtable*)",40],["(mapc #'(lambda (k v) (setf (gethash k table) v)) '(k0 k1 k2) '(v0 v1 v2))",36],["(unless (equal (gethash symbol cache) indent)",35],["(setf (gethash (name s) table)",35],["(setf (gethash symbol cache) indent)",35]],"useCount":4314},{"word":"gf","context":[["gf",59],["(if (eq (class-of gf) the-class-standard-gf)",37],["gf))",38],["(gf-merror (intl:gettext",160],["(setq a (gf-p2x a))",78],["(setq args (mapcar #'gf-p2x args))",42],["gf)",47],["(declare (ignore gf))",72],["(if (eq (class-of gf) the-class-standard-gf)",37],["(gf-set-rat-header)",36]],"useCount":3578},{"word":"gl","context":[["(gl:matrix-mode :modelview)",143],["(gl:flush)",71],["(gl:viewport 0 0 width height)",71],["(gl:clear-color 0 0 0 0)",85],["(gl:clear :color-buffer)",81],["(gl:clear :color-buffer-bit)",78],["(gl:enable :depth-test)",75],["(gl:load-identity)",322],["(gl:matrix-mode :projection)",194],["(gl:with-pushed-matrix",143]],"useCount":7722},{"word":"go","context":[["(go end_label)",1776],["(go start))",119],["(go a)))",139],["(go start))))",153],["(go loop))",161],["(go start)))",268],["(go loop)))",357],["(go label20))",117],["(go end_label))",421],["(go end_label)))",519]],"useCount":8886},{"word":"goal","context":[["=goal>",567],["goal-cat          NP-goal",32],["goal-cat          NP-goal",32],["next-goal               =next-goal",33],["next-goal               =next-goal",33],["(with-slots (body) goal",38],["(current-goal <node> (place <x> <y> <p>))",39],["(goal",46],["(retract ?goal))",48],[":use-goal-file t)",77]],"useCount":1721},{"word":"group","context":[["(let ((group (current-group)))",100],["(when (window-in-current-group-p window)",57],["thematic-substrate::group-by-ops",52],["(let ((screen (group-screen group)))",43],["(group",42],["(let ((screen (group-screen group)))",43],["(let* ((group (current-group))",61],["(let* ((group (current-group))",61],["(:div :class \"form-group\"",62],["(let ((group (current-group)))",100]],"useCount":7741},{"word":"h","context":[["(\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\"",64],["(f2cl-lib:fref h-%data%",352],["h-%offset%)",314],["((1 ldh) (1 *)) h-%offset%)",156],["(setf (f2cl-lib:fref h-%data%",118],["h (max h height)",57],["h (max h height)",57],["h-%offset%))",106],["h))",88],["(f2cl-lib:array-slice h-%data%",78]],"useCount":4547},{"word":"handle","context":[["(defun handle-condition (condition &optional (socket nil))",63],["(handler-bind ((warning #'handle-compiler-warning))",50],["(err-handle \"\"))",52],["(handle-requests connection t))",67],["((hstmt sql-handle)         ; HSTMT       hstmt",72],["(defun handle-compiler-warning (condition)",73],["(defun handle-notification-condition (condition)",81],["(handle :pointer))",136],["(handle :pointer)",240],["(:int :handle fd)",59]],"useCount":4294},{"word":"handler","context":[["(handler-case",3839],["(with-swank-error-handler (connection)",59],["(loop (handler-case",71],["`(handler-case (progn ,@body)",76],["(handler-bind ((warning #'muffle-warning))",94],["(handler-bind",109],["`(handler-case",119],["(handler-case",345],["(handler-bind",450],["(hunchentoot:define-easy-handler",52]],"useCount":10800},{"word":"has","context":[["(has-form written-english)",526],["(has-as-subject   )",502],["DMTF has reserved the unused portion of the continuum for additional HealthStates in the future.\")",417],["((has-physical-medium computer-medium)",5517],["(has-form written-german)",541],["(has-death-place   )",404],["(has-birth-place  )",404],["(has-social-role philosopher)))",404],["(has-language english)",511],["(has-gender male)",414]],"useCount":13351},{"word":"hash","context":[["(defimplementation make-weak-key-hash-table (&rest args)",141],["(let ((table (make-hash-table)))",131],["(let ((table (make-hash-table))",72],["(defimplementation hash-table-weakness (hashtable)",76],["(compare-hash table1 table0)))",78],[":initform (make-hash-table)",96],["(if use-hash",100],["(defimplementation make-weak-value-hash-table (&rest args)",112],["hash))",115],["(apply #'make-hash-table args))",122]],"useCount":9151},{"word":"have","context":[["#| Save MIDI file (have to alter any anacrusis). |#",63],[";;; containing `!' have special meaning.  We have to work long and",34],["(setf score (score-must-have-begin-end score))",50],[";;; source-location for a function, and we also have FILE-SOURCE-LOCATION &co",34],[";;; with C-c C-c, we have to search the position in the source string.",34],[";;In SBCL, we have:",34],["make a symbol _external_, you'd have to use EXPORT",34],[";;; fuzzy: we have FUNCTION-SOURCE-LOCATION which returns the",34],[";;; containing `!' have special meaning.  We have to work long and",34],["(have-2 ((ending root)))",32]],"useCount":2417},{"word":"head","context":[["(when (mode-line-head ml)",30],["(head ((cat team-name)",28],["thematic-substrate::dont-show-head-projection-operators-p",33],["(:head",221],["(head",59],["head              =word",50],["head",44],["(head ((cat noun)",39],["(head === person)",30],["(head ((cat person-name)",39]],"useCount":2472},{"word":"header","context":[[":initarg :header",257],["(cl:cons ':header (header msg))",254],["(header m))",254],["(roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)",254],["(cl:ensure-generic-function 'header-val :lambda-list '(m))",254],["(roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)",254],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(cl:cons ':header (header msg))",254],[":reader header",255],["((header",255]],"useCount":6301},{"word":"height","context":[["(declare (ignore width height))",169],["(height :int)",98],["(:name |height| :type |SizeI| :direction :in))",111],[":height height",156],["(height sizei)",371],["(:name |height| :type |SizeI| :direction :in)",315],["height",183],["(type card16 x y width height)",126],["(height sizei))",159],[":height height",156]],"useCount":7750},{"word":"history","context":[["(unless (null *history*)",66],[";; Change history (most recent first):",38],["(mod (1+ *event-history-index*) (length *event-history*))))",34],["(defvar *event-history-index* 0)",34],["(mod (1+ *event-history-index*) (length *event-history*))))",34],["(setf (aref *event-history* *event-history-index*)",34],["(setf (aref *event-history* *event-history-index*)",34],["(format *log-output* \"~&;; Event history start:~%\")",34],["(when *enable-event-history*",34],["(idx *event-history-index*))",34]],"useCount":1997},{"word":"hook","context":[["(defimplementation call-with-debugger-hook (hook fun)",119],["(let ((*debugger-hook* hook)",102],["(let ((*debugger-hook* hook)",102],["(setq *debugger-hook* function)",111],["(defimplementation call-with-debugger-hook (hook fun)",119],["(if *debugger-hook*",81],["(defun make-invoke-debugger-hook (hook)",77],["(defun make-invoke-debugger-hook (hook)",77],["(when hook",60],["(call-with-debugger-hook #'swank-debugger-hook",56]],"useCount":7712},{"word":"host","context":[["\\\"Migrating\\\" element is being moved between host elements.",417],["\\\"Immigrating\\\" element is being moved to new host element.",417],["(etypecase host",77],["(declare (ignore host))",79],["\\\"Emigrating\\\" element is being moved away from host element.",417],["(defimplementation create-socket (host port &key backlog)",138],["(defimplementation create-socket (host port)",83],["(defun get-host-name ()",94],[":host host",110],[":host host",110]],"useCount":6369},{"word":"html","context":[["(build-html",190],["(:html",256],[":html-attribute-p t",123],[";; (http://opensource.franz.com/preamble.html), known as the LLGPL.",266],[";;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.",430],["(with-html",349],["(html",535],[";;;   http://opensource.franz.com/preamble.html",129],["(who-ps-html",73],["(with-html-string",74]],"useCount":4386},{"word":"http","context":[["(c) 2015 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",208],["(c) 2016 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",212],[";;;   http://opensource.franz.com/preamble.html",129],[";; <http://www.cliki.net/Common%20Lisp%20Utilities>",51],[";;automatically generated from data in the philosophy meta=encyclopedia: http://www.ditext.com/encyc/",52],["(uri \"http://www.red.com/\")",58],[";; (http://opensource.franz.com/preamble.html), known as the LLGPL.",266],["(PARSE-IRI \"http://fispace.aston.ac.uk/pharmaCo1/data/epc/id/events/x\"))",100],[";;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.",430],["(c) 2014 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",336]],"useCount":3634},{"word":"i","context":[["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(incf i))",350],["(incf i)",517],["((> i m) nil)",573],["(i)",585],["(dotimes (i n)",664],["for i from 0",679],["((> i n) nil)",888],["(i j)",1169],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890]],"useCount":55017},{"word":"id","context":[["id))",126],["(defvar *thread-id-counter* 0)",169],["((:name |id| :type |UInt32| :direction :in)",134],["(declare (ignore id))",121],["(defimplementation thread-id (thread)",181],["(defimplementation find-thread (id)",191],["(id uint)",295],[":id id",311],[":id id",311],["id",434]],"useCount":13510},{"word":"identity","context":[["(print-unreadable-object (object stream :type t :identity nil)",42],["(gl:load-identity)",322],["(print-unreadable-object (object stream :type t :identity t)",287],["#'identity",164],["(print-unreadable-object (obj stream :type t :identity t)",75],["(print-unreadable-object (self stream :type t :identity t)",70],["#'identity)",66],["(print-unreadable-object (val out :type t :identity t)))))",56],["(print-unreadable-object (self stream :identity t :type t)",49],["(gl:load-identity))",44]],"useCount":2839},{"word":"ierr","context":[["(f2cl-lib:int-add (f2cl-lib:int-sub lwork iwork) 1) ierr)",76],["(setf ierr var-9))))",36],["(setf ierr var-8))",132],["(setf ierr var-10))",138],["(f2cl-lib:int-add (f2cl-lib:int-sub lwork nwork) 1) ierr)",142],["(setf ierr var-9))",180],["ierr)",467],["(setf ierr var-7))",128],["(setf ierr var-13))",105],["(setf ierr var-17))",36]],"useCount":1731},{"word":"if","context":[["(if (inr-p dec)",437],["(if nounit",438],[":if-does-not-exist :create",446],["(if from-end",486],[":if-exists :supersede",548],[":if-does-not-exist :create)",627],["(if",701],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["(if key",797],[":if-exists :supersede)",717]],"useCount":79319},{"word":"ignorable","context":[["(declare (ignorable foreground background))",72],["(declare (ignorable ontology))",91],["(cl:declare (cl:ignorable args))",878],["(declare (ignorable args))",191],["(ignorable one zero))",134],["(declare (ignorable o))",116],["(declare (ignorable x))",108],["(ignorable",103],["(declare (ignorable o c))",97],["(declare (ignorable self))",79]],"useCount":4624},{"word":"ignore","context":[["(declare (ignore name))",579],["(declare (ignore var-0 var-1 var-2 var-3 var-4 var-5",402],["(declare (ignore env))",416],["(declare (ignore key))",460],["(declare (ignore c))",462],["(declare (ignore initargs))",570],["(declare (ignore type))",586],["(declare (ignore args))",1189],["(declare (ignore pred))",1645],["(ignore-errors",1412]],"useCount":37680},{"word":"image","context":[["(check-type image image)",47],["(defimplementation save-image (filename &optional restart-function)",82],[":background (make-instance 'BG-Layer :source-image \"beach-sketch.png\")",73],["image))",60],["((im gd-image-ptr)",54],["(create-image",50],["image",73],["(defimplementation exec-image (image-file args)",40],["(when image",45],["(check-type image image)",47]],"useCount":4573},{"word":"implementation","context":[[":lisp-implementation-version",180],[":lisp-implementation-type",180],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],["A Null return indicates the implementation (provider) does not implement this property.",1251],[":lisp-implementation-type \"CMU Common Lisp\"",56],["(lisp-implementation-type))",58],["(lisp-implementation-type)",100],["(lisp-implementation-version)",108],["(:implementation t",140],["(defimplementation lisp-implementation-type-name ()",175]],"useCount":5945},{"word":"import","context":[["(import-to-swank-mop",43],["(:import-from :alexandria",121],["(:shadowing-import-from",82],["(:shadowing-import-from #:com.bahagontools.dbapi",76],["(:shadowing-import-from #:hecss",74],["(import",63],["(:import-from #:alexandria",63],["(import-swank-mop-symbols :clos '(:slot-definition-documentation))",49],["(import-export-symbols",38],["(:import-from",41]],"useCount":2687},{"word":"in","context":[["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],["(in-package :cl-test)",1202],[";;; Redistribution and use in source and binary forms, with or without",1324],["(in-package #:climbe)",1439],["(in-package :cl-user)",1804],["(in-package #:cl-user)",653],["(:name |count| :type |SizeI| :direction :in)",745],["((:name |index| :type |UInt32| :direction :in)",768],["(in-package :maxima)",905],[";;;   * Redistributions in binary form must reproduce the above",876]],"useCount":96093},{"word":"incf","context":[["(incf count))",124],["(incf n)",107],["(incf start)",108],["(incf j)",122],["(incf i)",517],["(incf i)))",135],["(incf count)",186],["(incf index))",202],["(incf index)",276],["(incf i))",350]],"useCount":8514},{"word":"incx","context":[["incx))))",50],["(type (f2cl-lib:integer4) incx n))",50],["(setf jx (f2cl-lib:int-add jx incx))",180],["(setf ix (f2cl-lib:int-sub ix incx))",90],["(setf ix (f2cl-lib:int-add ix incx))",282],["((= incx 1)",191],["(setf jx (f2cl-lib:int-sub jx incx))",72],["((= incx 0)",66],["((and (= incx 1) (= incy 1))",60],["incx)))",62]],"useCount":1624},{"word":"indent","context":[[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; indent-tabs-mode: nil -*-",114],[";;;; -*- Mode: lisp; indent-tabs-mode: nil -*-",589],[";;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",371],[";;;; -*- indent-tabs-mode: nil -*-",163],[";;;; -*- mode: lisp; indent-tabs-mode: nil -*-",117],[";;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",104],["(pprint-indent :current 0)",76],["(pprint-indent :block 2)",73],["(pprint-indent :current 2)",72],["(pprint-indent :block 0)",59]],"useCount":3275},{"word":"indentation","context":[["(defun macro-indentation (arglist)",36],["#:*configure-emacs-indentation*",35],["\"Return the list of symbols whose indentation styles collide incompatibly.",35],["#:print-indentation-lossage",35],["(defun print-indentation-lossage (&optional (stream *standard-output*))",35],["(defun symbol-indentation (symbol)",38],["(indentation-cache-packages '())",34],["(defun sync-indentation-to-emacs ()",34],["(equal (symbol-indentation s) indent)",34],["\"Return a form describing the indentation of SYMBOL.",38]],"useCount":1878},{"word":"index","context":[["(let ((frame (nth-frame index)))",177],["(error 'invalid-start-index",183],["(index uint)",1751],["((:name |index| :type |UInt32| :direction :in)",768],["(let ((index (gensumindex)))",304],["(:name |index| :type |UInt32| :direction :in)",300],["(incf index)",276],["(incf index))",202],["index))",155],["(type array-index i))",155]],"useCount":25214},{"word":"indicates","context":[["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["\"TransitioningToState indicates the target state to which the instance is transitioning.",343],["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\\\"Relocating\\\" indicates the element is being relocated.",415],["\\\"Error\\\" indicates the ManagedElement is in an Error condition.\")",417],["A Null return indicates the implementation (provider) does not implement this property.",1251],["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\\\"OK\\\" indicates the ManagedElement is functioning normally.",417],["\\\"Degraded\\\" indicates the ManagedElement is functioning below normal.",417]],"useCount":8642},{"word":"info","context":[["((/= info 0)",247],["info)",203],["fortran-to-lisp::info)",146],["(setf info 2))",127],["(setf info -2))",124],["(setf info -1))",123],["(setf info 1))",111],["#'(lambda (link-info)",106],["(setf info 0)",395],["fortran-to-lisp::*f2cl-function-info*)",649]],"useCount":10451},{"word":"informatimago","context":[[";;;;    <PJB> Pascal Bourguignon <pjb@informatimago.com>",19],["\"com.informatimago.common-lisp.lisp-sexp\")",32],[". \"com.informatimago\")",45],["(com.informatimago.rdp::error-unexpected-token",79],["\"com.informatimago.common-lisp.cesarum\"",121],["\"com.informatimago.common-lisp.cesarum\")",132],["(com.informatimago.rdp::with-non-terminal",134],[";;;;    <PJB> Pascal J. Bourguignon <pjb@informatimago.com>",1091],["(com.informatimago.common-lisp.cesarum.package:add-nickname",16],["\"com.informatimago.common-lisp.arithmetic\"",15]],"useCount":1784},{"word":"inherit","context":[[":inherit inherit :collect collect))",54],[":inherit inherit :collect collect))",54],[":inherit-from t)",65],["(when inherit",72],[":inherit-configuration",37],["(inherit-output-translations inherit :collect collect))",36],[":with inherit = nil",36],["(inherit-output-translations inherit :collect collect))",36],["(unless inherit",36],["(setf inherit t)",36]],"useCount":2142},{"word":"init","context":[["(err-init '(\"cmdecho\"))",49],[":final-state   :init",46],[":initial-state :init",46],["(sdl:with-init ()",147],["(defun init ()",121],["(when (probe-file quicklisp-init)",52],["(sdl2:with-init (:everything)",54],["(init)",67],["(init-test-environment)",74],["(init-test)",114]],"useCount":3404},{"word":"initarg","context":[["((text :initarg :text :reader text)))",77],[":initarg :header",257],[":initarg :value",82],[":initarg :name",313],["((name :initarg :name",163],[":initarg :y",84],[":initarg :size",85],[":initarg :data",91],[":initarg :id",89],[":initarg :x",85]],"useCount":8489},{"word":"initargs","context":[["&rest initargs)",183],["(:default-initargs",1454],["#:slot-definition-initargs",72],["initargs)",63],["(declare (ignore initargs))",570],["&rest initargs",118],["initargs)))",106],["initargs))",90],["#:class-direct-default-initargs",78],["(declare (dynamic-extent initargs))",86]],"useCount":4425},{"word":"initform","context":[[":initform nil",3839],[":initform nil)))",269],[":initform 0",533],[":initform '()",191],[":initform 0))",204],[":initform \"\"",217],[":initform (cl:make-instance 'std_msgs-msg:Header))",258],[":initform 0.0)",757],[":initform 0)",678],[":initform nil)",976]],"useCount":14284},{"word":"initial","context":[[":initial-contents",423],[":initial-element 0))",228],[":initial-element 0)))",193],["(let ((bit-vector (make-array (- end start) :element-type 'bit :initial-element 1))",108],[":initial-element 0)",84],[":initform (cl:make-array 0 :element-type 'cl:float :initial-element 0.0))",78],[":initial-element 0",66],[":initial-contents '((0 0)(1 1))))",64],[":initial-contents '((0 1)(0 1))))",64],[":initial-element nil)))",61]],"useCount":6437},{"word":"initialize","context":[["(defmethod initialize-instance",32],["(if (eq situation 't) 'initialize-instance 'shared-initialize)",32],["(if (eq situation 't) 'initialize-instance 'shared-initialize)",32],["\"An alist to initialize dynamic variables in worker threads.",34],[";; the latter, initialize.  ASDF will call this function at the start",36],["(initialize-output-translations",37],["(defmethod initialize-hash",41],["(defmethod shared-initialize :after",54],["(defimplementation initialize-multiprocessing (continuation)",54],["(defmethod initialize-instance :after",93]],"useCount":1765},{"word":"input","context":[["input",101],["(defimplementation swank-compile-file (input-file output-file",172],[":input t",178],[":direction :input",278],["(with-input-from-string",285],[":direction :input)",129],["(consume-token input)",88],["(with-input-from-string (stream string)",109],["(defimplementation wait-for-input (streams &optional timeout)",113],["(with-input-from-string (s string)",121]],"useCount":18010},{"word":"inspect","context":[["(lispworks-inspect o))",51],[";;#:inspect-slot-for-emacs",35],["(defmethod emacs-inspect ((o standard-object))",38],["(allegro-inspect o))",43],["#:inspect-in-emacs",35],["(setf (istate.content istate) (emacs-inspect/istate istate))",54],["#:emacs-inspect",54],["(defmethod emacs-inspect ((f function))",57],["(defmethod emacs-inspect ((o function))",101],["(defmethod emacs-inspect ((o t))",180]],"useCount":3115},{"word":"inspector","context":[["(defslimefun quit-inspector ()",33],["#:*inspector-verbose*",33],["(inspector-table-row (pane)",36],[",(inspector-princ",37],["(reset-inspector)",203],["*inspector-history* (make-array 10 :adjustable t :fill-pointer 0)))",33],["(defslimefun inspector-call-nth-action (index &rest args)",33],["((:inspector part)",36],[";; tell emacs that we don't want to refresh the inspector buffer",34],["(defun reset-inspector ()",34]],"useCount":2308},{"word":"instance","context":[["(make-instance 'bigfloat",245],[",(make-instance",243],["(make-instance '-function-proto",195],["(make-instance 'complex-bigfloat",263],["instance",137],["(make-instance 'entity-opengl-free-drawing-2d",126],["(make-instance 'registrable-object-wrapper",162],["(make-instance",976],["\"TransitioningToState indicates the target state to which the instance is transitioning.",343],[":initform (cl:make-instance 'std_msgs-msg:Header))",258]],"useCount":12404},{"word":"int","context":[["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(location int)",1128],["(params (:pointer int)))",675],[":int",650],["(f2cl-lib:int-add (f2cl-lib:int-sub lwork iwork) 1)",404],["(f2cl-lib:int-add",541],["(level int)",547],["(f2cl-lib:int-sub",551],["int",641]],"useCount":40106},{"word":"integer","context":[[":type cl:integer",314],["(do-special-integer-vectors",63],[":type integer",223],["(integer",215],[":type integer)",80],["(parse-integer",86],[":expected-type `(integer 0 ,(- end end-start))",97],[":expected-type `(integer 0 ,(- start start-bis))))",72],["(check-type n (integer 0 *))",64],[":expected-type `(integer 0 ,(- start start-bis))",99]],"useCount":5659},{"word":"integer4","context":[["(max (the f2cl-lib:integer4 wrkbl)",405],["(fortran-to-lisp::integer4)",1246],["(the f2cl-lib:integer4",1215],["(fortran-to-lisp::integer4))",535],["(array double-float (*)) (fortran-to-lisp::integer4)",166],["(fortran-to-lisp::integer4) (fortran-to-lisp::integer4)",278],["(fortran-to-lisp::integer4) (fortran-to-lisp::integer4)",278],["(max (the f2cl-lib:integer4 1)",196],["(max (the f2cl-lib:integer4 maxwrk)",141],["(fortran-to-lisp::integer4) (array double-float (*))",272]],"useCount":8205},{"word":"intern","context":[["(let ((getter (intern (concatenate 'string",33],["(let* ((extern (and pname (not intern)))",34],["(values (intern (apply #'mkstr args))))",35],["(intern",185],["(mapc #'(lambda (name) (push (intern name pkg) bag0)) '(\"A\" \"B\" \"C\"))",32],["(intern (concatenate 'string",84],["(:intern #:host-network-address)",54],["(export (intern name \"TB-BAR-TO-USE\") \"TB-BAR-TO-USE\"))",51],["(push (intern name pkg) bag0)",51],["(export (intern name pkg) pkg)) '(\"X\" \"Y\" \"Z\"))",51]],"useCount":1882},{"word":"internal","context":[["internal-time-units-per-second)))",41],["internal-time-units-per-second))))",49],["(with-event-queue-internal (display)",48],["(setf (last-update-time progress-bar) (get-internal-real-time))",45],["(let* ((start (get-internal-real-time))",50],["internal-time-units-per-second)",56],["(let ((now (get-internal-real-time)))",61],["(defun wait-for-input-internal (wait-list &key timeout)",78],["internal-time-units-per-second))",87],["1) PRODIGY will only be used for internal, noncommercial research purposes.",90]],"useCount":2622},{"word":"interrupt","context":[["(defimplementation interrupt-thread (thread fn)",173],["(sb-sys:enable-interrupt sb-unix:sigint",34],["((:emacs-interrupt thread-id)",34],["(defun make-interrupt-handler (real-handler)",46],["(return :interrupt))",50],["(invoke-or-queue-interrupt",128],["(mp:process-interrupt thread fn))",54],["(cond ((check-slime-interrupts) (return :interrupt))",61],["(interrupt-thread (nth-thread index)",68],["(defun interrupt-thread (thread function &rest args)",71]],"useCount":2240},{"word":"interrupts","context":[["(defmacro without-interrupts (&body body)",63],["(defmacro with-interrupts-enabled% (flag body)",33],["(cond ((check-slime-interrupts) (return :interrupt))",61],["(sb-sys:with-interrupts",37],["(check-slime-interrupts)",220],["(without-slime-interrupts",232],["(without-interrupts",235],["(sys:without-interrupts",35],["(check-slime-interrupts))",35],["`(with-interrupts-enabled% t ,body))",33]],"useCount":2278},{"word":"into","context":[["and sum 1 into nr-elts",46],["\"Make sure that constant forms are compiled into scanners at compile time.\"",46],["\"Return a temporary file name to compile strings into.\"",39],["into tem",48],["thematic-substrate::put-into-repository-p",52],["into result",53],["\"Interpolate ARGS into CONTROL-STRING as if by FORMAT, and",60],[";;; etc, turned into generic functions, or something. In the very",34],[";;;; German comments translated into English: Stefan Kain 2002-04-08",34],["imported into P or exported from P by IMPORT, or",34]],"useCount":3025},{"word":"invalid","context":[["(_ (error \"The value ~S is an invalid form.\" form))))",41],["(error 'invalid-start-index",183],["(error 'invalid-end-index",152],["(push-token self '(:type :parse-error :data :invalid-codepoint))",64],["(error 'invalid-bzip2-data))",42],["(list :invalid-rpc id",31],["(:invalid",31],["((:invalid :unknown) ':<not-available>)))",34],["pointer in VAR is invalid beyond the dynamic extent of BODY, and",37],["(invalid))))",39]],"useCount":1981},{"word":"invoke","context":[["(invoke-restart 'sb-ext:step-into))",34],["(invoke-or-queue-interrupt",128],["(defun make-invoke-debugger-hook (hook)",77],["(defun %invoke (command arglist)",53],["(invoke-debugger condition))))",37],["Errors are trapped and invoke our debugger.\"",35],["(invoke-restart 'sb-ext:step-out)))",34],["(cond (restart (invoke-restart restart))",34],["(sb-ext:step-condition #'sb-impl::invoke-stepper))",34],["(sb-impl::invoke-debugger condition)))))))",34]],"useCount":2249},{"word":"io","context":[["(with-standard-io-syntax",623],["(fresh-line *debug-io*)",58],["(with-io-redirection (connection)",57],["(with-standard-io-syntax",676],["(force-output *query-io*)",58],["(with-safe-io-syntax ()",60],["(format *debug-io*",62],["(my-with-standard-io-syntax",79],["(fresh-line *query-io*)",79],[":direction :io",131]],"useCount":5745},{"word":"is","context":[["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values.",417],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417],["\\\"Degraded\\\" indicates the ManagedElement is functioning below normal.",417],[";;; module.  An independent module is a module which is not derived from",458],[";;; module.  An independent module is a module which is not derived from",458],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417]],"useCount":47707},{"word":"istate","context":[["(defun istate>elisp (istate)",33],["(setf (istate.content istate) (emacs-inspect/istate istate))",54],["(defun istate>elisp (istate)",33],["(setf (istate.content istate) (emacs-inspect/istate istate))",54],["(setf (istate.content istate) (emacs-inspect/istate istate))",54],["(setf (istate.content istate) (emacs-inspect/istate istate))",54],["(istate>elisp istate)))",56],["(istate>elisp istate)))",56],["(istate>elisp *istate*))",102],["(istate>elisp *istate*))",102]],"useCount":2953},{"word":"istream","context":[["(cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))",339],["(cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))",294]],"useCount":10138},{"word":"it","context":[[";; the value is gc'd, remove it manually",68],["it))",56],["`(let ((it ,test))",53],["it",220],["When Emacs presents the message it already has the source popped up",63],["(in-package :it.bese.arnesi)",63],[";; We can't use loop for ... on, becaue it uses atom for testing the end",128],["it)",62],[";; nreverse it again and count",58],[";;;; purpose, including using, modifying, and redistributing it.",67]],"useCount":8423},{"word":"item","context":[["(dolist (item items)",65],["(when item",57],["(declare (type item item))",60],["(declare (type item item))",60],["item))",121],["(lambda (item)",107],["item",90],["item)",68],["item sequence start end key)",54],["#'(lambda (item)",68]],"useCount":6770},{"word":"iwork","context":[["(f2cl-lib:int-add (f2cl-lib:int-sub lwork iwork) 1)",404],["(iwork)",378],["(f2cl-lib:array-slice work-%data% double-float (iwork)",198],["(f2cl-lib:int-add (f2cl-lib:int-sub lwork iwork) 1) ierr)",76],["(setf iwork (f2cl-lib:int-add itaup m))",54],["(setf iwork (f2cl-lib:int-add itaup n))",54],["(setf iwork (f2cl-lib:int-add ie n))",54],["(setf iwork (f2cl-lib:int-add ie m))",53],["limit lenw 0 iwork work)",51],["iwork info)",54]],"useCount":1907},{"word":"ix","context":[["(setf ix kx)",147],["(setf ix jx)",86],["(setf ix 1)",61],["(setf ix (f2cl-lib:int-sub ix incx))",90],["(setf ix",38],["(setf ix (f2cl-lib:int-sub ix incx))",90],["(setf ix (f2cl-lib:int-add ix incx))",282],["(setf ix (f2cl-lib:int-add ix incx))",282],["(ix)",244],["(f2cl-lib:fref x-%data% (ix) ((1 *))",97]],"useCount":1674},{"word":"j","context":[["((> j 1) nil)",189],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(i j)",1169],["((> j n) nil)",1126],["(j j)",328],["(j j)",328],["(j)",323],["(f2cl-lib:int-add j",272],["(f2cl-lib:fdo (j n (f2cl-lib:int-add j (f2cl-lib:int-sub 1)))",179]],"useCount":19457},{"word":"java","context":[["at org.armedbear.lisp.Lisp.eval(Lisp.java:439)",65],["(invokespecial 1)                                       ; 1 java.lang.Object.<init>:()V",33],["at org.armedbear.lisp.Lisp.progn(Lisp.java:575)",39],["'(\"java/lang/Object\")",39],["at org.armedbear.lisp.Cons.evalImpl(Cons.java:631)",44],["(define-condition throwable (java-exception) ())",54],["(java:jcall",59],["\"java.lang.String\")",72],["(with-registered-exception \"java.lang.Throwable\" 'throwable",27],["(methodref \"java/lang/Object\" \"<init>:()V\" 0)            ; 1",33]],"useCount":2382},{"word":"k","context":[["(i k)",175],["(declare (ignore k))",163],["((> l k) nil)",117],["((> j k) nil)",135],["(k j)",159],["((> k",159],["(f2cl-lib:fdo (k 1 (f2cl-lib:int-add k 1))",298],["(f2cl-lib:fdo (k 1 (f2cl-lib:int-add k 1))",298],["(maphash (lambda (k v)",298],["(k)",228]],"useCount":8616},{"word":"kernel","context":[["(let ((kernel (make-kernel)))",38],["(let ((kernel (make-kernel)))",38],["(ash (sb-kernel:%code-code-size o) sb-vm:word-shift)",34],["(:code-size (sb-kernel:%code-code-size o))",34],["(:arglist (sb-kernel:%simple-fun-arglist o))",34],["(cond ((sb-kernel:%code-debug-info o)",34],["(:name (sb-kernel:%simple-fun-name o))",34],["(let ((header (sb-kernel:widetag-of o)))",34],["i (sb-kernel:%closure-index-ref o i)))))",34],["(kernel:bit-bash-copy",50]],"useCount":3863},{"word":"key","context":[["&key",1282],["(maphash (lambda (key value)",180],["&key policy)",183],["(case key",189],[";;     key",220],["(make-obj-title (get-option '$key))",244],[":key #'car",283],["(if key",797],["(declare (ignore key))",460],["&key &allow-other-keys)",382]],"useCount":29154},{"word":"keys","context":[["keys))",123],["(:keys id))",62],["&rest keys",67],["other-keys)",68],["keys)))",74],[":allow-other-keys t",102],["&key &allow-other-keys)",382],["&allow-other-keys)",1409],["&rest all-keys",54],["&allow-other-keys))",52]],"useCount":7579},{"word":"keyword","context":[[",@(loop for (keyword fn) in pairs",76],["(let ((*package* (find-package :keyword)))",68],[":provide-output-destination-keyword t)",64],["keyword",59],["subpathname specification and keyword arguments as per RESOLVE-LOCATION \\(see",54],[":provide-output-destination-keyword nil)",51],["(if (keyword-arg.default-arg arg)",48],["(:keyword",48],["(keyword-arg.default-arg arg))",48],[":keyword))",44]],"useCount":4477},{"word":"keywords","context":[[";; the following list of keywords is reproduced below in the",34],["(if keywords",37],["FEATURES: a list of keywords",34],["keywords)",37],["in the result; otherwise they will be discarded.  All other keywords",33],["\"An array of keywords for characterizing / categorizing policy objects. Keywords are of one of two types:",39],["(values keywords aok",32],["(multiple-value-bind (keywords aok determiners)",32],["(applicable-methods-keywords",64],["(multiple-value-or (apply #'extra-keywords/make-instance operator args)",80]],"useCount":2900},{"word":"kind","context":[[":kind kind",86],["(case kind",162],["(declare (ignore expected kind arguments))",203],["(or (documentation symbol kind) :not-documented))",81],["(declare (ignore kind))",108],["(ecase kind",83],[":kind kind",86],["(flet ((doc (kind &optional (sym symbol))",77],["(or (documentation sym kind) :not-documented))",76],["(flet ((doc (kind)",81]],"useCount":3518},{"word":"known","context":[["(known <node>",44],["(defun known-to-emacs-p (symbol)",34],["(not (known-to-emacs-p symbol)))",37],["(:known-return (debug-function-returns",29],[";;;; (http://opensource.franz.com/preamble.html), also known as the LLGPL.",430],["(list \"<<known-return convention not supported>>\" info)))))",29],[";; (http://opensource.franz.com/preamble.html), known as the LLGPL.",266],["(push arg (arglist.known-junk result)))",32],["(values nil (known-type-p t2))))",30],["((:single-value-return :known-return :unknown-return)",29]],"useCount":1653},{"word":"l","context":[[";;; (\"f2cl1.l,v 1.215 2009/04/07 22:05:21 rtoy Exp $\"",315],[";;;  \"macros.l,v 1.112 2009/01/08 12:57:19 rtoy Exp $\")",317],[";;;  \"f2cl2.l,v 1.37 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;;  \"f2cl6.l,v 1.48 2008/08/24 00:56:27 rtoy Exp $\"",372],[";;;  \"f2cl3.l,v 1.6 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;;  \"f2cl4.l,v 1.7 2008/02/22 22:19:34 rtoy Exp $\"",372],[";;;  \"f2cl2.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",459],[";;;  \"f2cl4.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",473],[";;;  \"f2cl6.l,v 1d5cbacbb977 2008/08/24 00:56:27 rtoy $\"",473],[";;;  \"f2cl3.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",473]],"useCount":15067},{"word":"label","context":[["(label EXIT)",65],["(label LABEL1)",92],["`(sys.lap-x86:jne ,type-error-label)",87],["(emit-trailer (type-error-label)",61],["(when label",69],["(label-value-line*",535],["append (label-value-line",63],["(if label",63],[":initform (make-instance 'simple-label-prefixed",61],[":label \"\")",57]],"useCount":5471},{"word":"labels","context":[["((:labels) `(labels ,(process-fspec (second fspec)) ,(third fspec)))",47],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],["(labels",535],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls nil)",112],["(labels ((soln (alpha)",40],["(labels ((callback (response)",39],["(labels ((traverse (tree)",69],["(with-fresh-labels",49],["((:labels) `(labels ,(process-fspec (second fspec)) ,(third fspec)))",47],["(labels ((traverse-list-step-1 (list length)",49]],"useCount":3988},{"word":"lambda","context":[["(lambda (x)",771],["(:report (lambda (condition stream)",1097],["#'(lambda ()",746],["#'(lambda (x)",775],["(lambda (&rest args)",347],["(lambda ()",3291],["(lambda (start-pos)",379],["(:report (lambda (c s)",468],["(lambda (nvz)",414],["(mapcar #'(lambda (x)",475]],"useCount":45854},{"word":"language","context":[["(:language :stdc))",50],["language",40],["(let ((language (find-language (or (component-language component)",38],["(system-get 'opengl-free-drawing-default-language-ext-1)))",52],["(make-instance 'cfg-tree-language",74],[":language",80],["(:language #-win32 :stdc",99],["(language acclimation:english))",172],["(has-language english)",511],[":language :ansi-c)",1324]],"useCount":3087},{"word":"lap","context":[["(sys.lap-x86:push :rbp)",55],["(sys.lap-x86:ret)",60],["(sys.lap-x86:mov32 :ecx #.(ash 1 sys.int::+n-fixnum-bits+))",61],["(sys.lap-x86:mov64 :rbp :rsp)",66],["(sys.lap-x86:ret))",127],["`(sys.lap-x86:jne ,type-error-label)",87],["(sys.lap-x86:gs)",62],["(sys.lap-x86:mov64 :rax :r8)",62],["`(sys.lap-x86:and8 :al #b1111)",64],["(sys.lap-x86:leave)",66]],"useCount":3702},{"word":"last","context":[["\\\"Unknown\\\" (0) indicates the last requested state for the element is unknown.",343],["do (setf (cdr last) (cons (car remaining) (cdr remaining)))",162],["(__pointer-check-iterator-range first last)",143],["\"LastErrorCode captures the last error code reported by the LogicalDevice.\"))",118],["\"The number of consecutive hours that this Device has been powered, since its last power cycle.\")",118],["(setf last (cdr last))",104],["(setf last (cdr last))",104],["(last-scheduled A 0)",103],["(last-scheduled B 0)",101],["(last result)",99]],"useCount":7516},{"word":"lda","context":[["(dgeqrf m n a lda",60],["((< lda (max (the f2cl-lib:integer4 1) (the f2cl-lib:integer4 n)))",61],["(f2cl-lib:fref a-%data% (j j) ((1 lda) (1 *))",63],["(setf (f2cl-lib:fref a-%data% (i i) ((1 lda) (1 *)) a-%offset%)",74],["(f2cl-lib:fref a-%data% (i j) ((1 lda) (1 *))",90],["lda)",109],["((1 lda) (1 *)))",112],["lda",192],["((1 lda) (1 *)) a-%offset%)",310],["((1 lda) (1 *))",1997]],"useCount":4436},{"word":"ldb","context":[["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream))",569],["((1 ldb$) (1 *))",662],["(cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))",1100]],"useCount":20835},{"word":"ldc","context":[["(emit 'ldc (pool-string s))",20],["(setf (f2cl-lib:fref c-%data% (i j) ((1 ldc) (1 *))",153],["((1 ldc) (1 *)))",20],["ldc)))",24],["(setf (f2cl-lib:fref c-%data% (j j) ((1 ldc) (1 *))",24],["((1 ldc) (1 *)) c-%offset%)",84],["(f2cl-lib:fref c-%data% (i j) ((1 ldc) (1 *))",57],["ldc",48],["((1 ldc) (1 *))",1353],["((< ldc (max (the f2cl-lib:integer4 1) (the f2cl-lib:integer4 m)))",30]],"useCount":2024},{"word":"left","context":[["(:left",55],["(destructuring-bind (top left right bottom) bounding-box",35],["(multiple-value-bind (width ascent descent left right",36],["@item :top-left",38],[":where (sql-binary-operator :name '= :left (sql-identifier :name \"langauge\")",84],["(left",60],["@item :bottom-left",38],["(multiple-value-bind (top left right bottom)",39],["float: left;",40],["left",41]],"useCount":2970},{"word":"len","context":[["(let ((len (length string)))",54],["(declare (fixnum len))",52],["(len :int))",52],["len",62],["(let* ((len (file-length s))",50],["always (if (= (mod (- len i) ci+1) 0)",66],["(let ((len (length s2))",66],["len)",75],["(dotimes (i len)",156],["(loop for i from (if (< i 0) 2 1) below len",55]],"useCount":4293},{"word":"length","context":[[":length (make-property :value 1))",91],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(dotimes (i length)",228],["(if (> (length x) 1)",168],["(length :unsigned-int)",152],["(length (:pointer sizei))",149],["(:name |length| :type |SizeI| :direction :out :array t :size #x1)",122],["length",120],["(2 {request-length})",103],["(case (length args)",98]],"useCount":21372},{"word":"let","context":[["(cl:let ((unsigned 0))",339],["(let*",769],["(let ((a \"Aa-\"))",1554],["(let ((s0 (list mem loc pred)))",812],["(let ((a \"aA-\"))",1554],["(cl:let ((bits 0))",1100],["(let",664],["(let ((result '()))",494],["(let ((result nil))",377],["(let ((result",315]],"useCount":93883},{"word":"level","context":[["(top-level-check)",68],["(setf (tempus::level-of alice) 51)",49],["(level int))",63],["(when (dm-act-level (dm-act dm) 'medium)",65],["((member :top-level)",44],[";;; Low-level CFFI wrappers",44],["(*print-level* nil)",73],["(icl int-consistency-level))",126],["(:name |level| :type |CheckedInt32| :direction :in)",496],["(level int)",547]],"useCount":5985},{"word":"lib","context":[["(f2cl-lib:array-slice work-%data%",1115],["(f2cl-lib:fref x-%data%",825],["(the f2cl-lib:integer4",1215],["(f2cl-lib:fref a-%data%",1315],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(f2cl-lib:fdo (j 1 (f2cl-lib:int-add j 1))",1435],["(f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))",1890],["(f2cl-lib:with-multi-array-data",786],["(f2cl-lib:fref c-%data%",704]],"useCount":57466},{"word":"library","context":[["#+win32 (:library \"WS2_32\")",99],["(defun %foreign-symbol-pointer (name library)",36],["(defun %load-foreign-library (name path)",36],["#:%close-foreign-library",39],["#:%load-foreign-library",50],["(:library +library-name+))",65],["(:library +library-name+))",65],["#-win32 (:library :default)",97],[";;; this exception to your version of the library, but you are not",458],[";;;; cl-ana is a Common Lisp data analysis library.",162]],"useCount":2690},{"word":"limit","context":[["(when (= idx limit)",38],["(let ((z (limit (cadr expr) var val 'think)))",57],["(let* ((lenw (* 4 limit))",76],["(odysseus-snark::*run-time-limit* . 0.2)",233],["(odysseus-snark::*ida-run-time-limit* . 0.1)",233],["(iwork (make-array limit :element-type 'f2cl-lib:integer4)))",34],[";; Look for the limit of the argument.",36],["(iwork (make-array limit :element-type 'f2cl-lib:integer4))",45],["limit lenw 0 iwork work)",51],[";; Look for the limit of the arguments.",56]],"useCount":3915},{"word":"line","context":[["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["(label-value-line*",535],["(fresh-line)",501],["while line",312],["(loop for line = (read-line stream nil)",96],["(loop for line = (read-line stream nil)",96],["line",82],["(setq INLINE (read-line INFILE))",96],["(fresh-line *query-io*)",79],["(fresh-line stream)",169]],"useCount":16711},{"word":"lisp","context":[["fortran-to-lisp::*f2cl-function-info*)",649],["(fortran-to-lisp::integer4)",1246],[":type \"lisp\")",616],["(fortran-to-lisp::make-f2cl-finfo",658],[";;;; -*- Mode: lisp; indent-tabs-mode: nil -*-",589],["(:use :common-lisp)",438],["(fortran-to-lisp::integer4))",535],["*lisp-code-root*))",552],[";;;; package.lisp",562],[";;;; -*- mode:lisp;coding:utf-8 -*-",825]],"useCount":28490},{"word":"lispworks","context":[["#+(and :lispworks (or :macosx :mswindows :linux))",39],["#+(and lispworks (or win32 linux))",32],["lispworks",37],["#-(or lispworks sbcl openmcl cmu allegro)",53],["#-lispworks",92],["#-:lispworks",126],["#+lispworks",691],["#+:lispworks (hcl:fixnum-safety 0)))",334],["(lispworks-inspect o))",51],["#+:lispworks",324]],"useCount":3182},{"word":"list","context":[["(multiple-value-list",377],["(list",1328],["(list",3750],["(let ((s0 (list mem loc pred)))",812],["\"Converts a ROS message object to a list\"",881],["(pprint-exit-if-list-exhausted)",371],["list)",273],["(list 11 0.00000000 0.00000000 0.00000000)",257],[":type list",254],["(list 210 0.00000000 0.00000000 1.00000000)",828]],"useCount":75995},{"word":"listp","context":[["(cond ((listp sequence)",116],["(listp u)",115],["(if (listp sequence)",189],["(if (or (not ($listp arg1))",56],["(if (listp args)",51],["((and ($listp val)",70],["(if (listp x)",63],["(not ($listp arg2))",61],["(and (listp form)",59],["(if (listp arg)",45]],"useCount":3171},{"word":"load","context":[["(eval-when (:compile-toplevel :load-toplevel)",243],["load-p external-format",161],["(load-start-state",147],["(gl:load-identity)",322],["(eval-when (:load-toplevel :execute)",336],["(eval-when (compile load eval)",378],["(load",700],["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["(eval-when (:compile-toplevel :load-toplevel :execute)",4491]],"useCount":19488},{"word":"loc","context":[["(let ((s39 (list mem loc pred)))",89],["(mv succ mem loc)))",823],["(let ((s0 (list mem loc pred)))",812],["(let ((s358 (list mem loc pred)))",184],["(equal (@__ieee754_pow-%358-rev mem loc pred)",178],["(let ((s87 (list mem loc pred)))",128],["(let ((s86 (list mem loc pred)))",107],["(let ((s50 (list mem loc pred)))",107],["(let ((s48 (list mem loc pred)))",86],["(let ((s43 (list mem loc pred)))",93]],"useCount":13005},{"word":"local","context":[["(with-ppc-local-vinsn-macros (seg)",63],["(local",121],["(in-local-scope",56],[":local-port local-port",79],[":local-port local-port",79],["(defmethod get-local-name ((usocket usocket))",72],["(defmethod get-local-address ((usocket usocket))",71],["(defmethod get-local-port ((usocket usocket))",71],["(declare (si::c-local))",246],["(defimplementation local-port (socket)",205]],"useCount":4460},{"word":"location","context":[["(make-location",302],["(make-location (list :buffer *buffer-name*)",147],["(defimplementation frame-source-location (index)",122],["(converting-errors-to-error-location",109],["#'(lambda (location &optional (offset 0))",92],["(:name |location| :type |Int32| :direction :in)",304],["(make-location (list :file (unix-truename file))",90],["((:name |location| :type |Int32| :direction :in)",608],["(location int)",1128],["(location pointer))",78]],"useCount":19330},{"word":"lock","context":[["(defmacro with-lock-held ((place) &body body)",76],["(defimplementation call-with-lock-held (lock function)",175],["(defimplementation make-lock (&key name)",175],["(defimplementation call-with-lock-held (lock function)",175],["(defun make-lock (&optional name)",93],["(defun release-lock (lock)",81],["(defun release-lock (lock)",81],["(defun acquire-lock (lock &optional (wait-p t))",79],["(defun acquire-lock (lock &optional (wait-p t))",79],["(defun make-recursive-lock (&optional name)",71]],"useCount":6435},{"word":"log","context":[["((%log simp)",50],["(declare (type tlog log))",38],["(with-captured-log log",47],["(with-captured-log log",47],["(mul c ($log h))",42],["(cl-log:log-message",52],["(cl-log:log-message",52],["#'log",72],["(with-package-log-hierarchy",56],["(finish-output *log-output*)",61]],"useCount":3099},{"word":"logical","context":[["(pprint-logical-block",128],["(type f2cl-lib:logical first$))",76],["(pprint-logical-block (stream nil)",93],["(pprint-logical-block (nil nil)",251],["(setf lquery (coerce (= lwork -1) 'f2cl-lib:logical))",66],["(pprint-logical-block",44],["(filter-logical-directory-results",44],["logical-pathname",45],["(pprint-logical-block (nil nil :prefix \"(\" :suffix \")\")",56],["(translate-logical-pathname",58]],"useCount":2713},{"word":"logxor","context":[["(setf b11 (ror64 (logxor b11 b8) 44)",20],["(setf b1 (ror64 (logxor b1 b6) 46)",20],["b13 (logxor (rol64 b13 48) b6))",20],["(setf b13 (ror64 (logxor b13 b6) 35)",20],["b5 (logxor (rol64 b5 31) b8))",20],["b13 (logxor (rol64 b13 19) b2))",20],["b3 (logxor (rol64 b3 37) b10))",20],["b7 (logxor (rol64 b7 49) b10))",20],["(logxor",22],["(< (f-logxor u3 #x80) #x40)",24]],"useCount":4433},{"word":"long","context":[[":long",56],["#+cffi-sys::no-long-long",40],["(loop for type in '(short-float single-float double-float long-float)",85],[":final-state   :long",49],[":initial-state :long",49],[":doc ((:doc-type :long)",160],["#+cffi-sys::no-long-long",40],["(:long",41],["#+(and scl long-float)",47],["(push long-size positions)))",47]],"useCount":2902},{"word":"loop","context":[["(defimplementation call-with-debugging-environment (debugger-loop-fn)",177],[",@(loop",238],["(loop",12594],["(loop until (endp remaining)",194],["(loop",667],["(loop for i from start below end",317],["(go loop)))",357],["(loop for i from 0",221],["(loop-pop-source)",211],["loop",204]],"useCount":40983},{"word":"lst","context":[["(defun foldr (f zero lst)",36],["(and (consp lst)",37],["(dolist (x lst)",40],["(let ((lst ()))",40],["lst)))",42],["(set-sys-var-lst '((\"cmdecho\" 0)))",50],["lst))",86],["(if (null lst) zero",104],["lst",113],["(if (null lst)",215]],"useCount":3384},{"word":"m","context":[["m))",167],["m",166],["((mexpt) ((mplus) 1 ((mtimes) -1 m)) -1)",150],["(f2cl-lib:int-add (f2cl-lib:int-mul 3 m)",142],["((%m (z) z))",276],["(cl:ensure-generic-function 'header-val :lambda-list '(m))",254],["(header m))",254],["(f2cl-lib:int-mul m",135],["((u m)",140],["((> i m) nil)",573]],"useCount":13191},{"word":"macro","context":[["(set-dispatch-macro-character #\\# #\\!",38],["(defun macro-indentation (arglist)",36],["(set-macro-character",36],["(define-modify-macro appendf (&rest args)",40],["(building-reader-dispatch-macro-source-object",40],["(:macro",43],["(xref-locations :macro-calls name t))",44],["(cond ((macro-function symbol)     :macro)",80],["(cond ((macro-function symbol)     :macro)",80],["(set-dispatch-macro-character",119]],"useCount":3527},{"word":"macros","context":[[";;; SBCL's source code is riddled with #! reader macros.  Also symbols",34],["(with-ppc-local-vinsn-macros (seg)",63],[";;; The strategy is to scan all symbols, pick out the macros, and look",34],[";;; macros, we use a special readtable.  The special symbols are",34],["(with-ppc-local-vinsn-macros (seg vreg xfer)",41],[";;;  \"macros.l,v 1.114 2010/05/17 01:42:14 rtoy Exp $\")",55],[";;;  \"macros.l,v 3fe93de3be82 2012/05/06 02:17:14 toy $\")",208],[";;;  \"macros.l,v fceac530ef0c 2011/11/26 04:02:26 toy $\")",250],[";;;  \"macros.l,v 1.112 2009/01/08 12:57:19 rtoy Exp $\")",317],["(load-macsyma-macros rzmac)",59]],"useCount":1996},{"word":"made","context":[["(change-made)",204],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by THE-CATHOLIC-ENCYCLOPEDIA-website)",296],["(was-made-by STANFORD-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",696],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126],["(was-made-by INTERNET-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",195],["(was-made-by THE-ISM-BOOK-website)",165],["((was-made-by LUDWIG-WITTGENSTEIN)",41],["This program and the accompanying materials are made available under",37],["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841]],"useCount":6002},{"word":"mailbox","context":[["(let* ((mbox (mailbox thread))",115],["(defun mailbox (thread)",202],["(setf (mailbox.queue mbox)",201],["(defstruct (mailbox (:conc-name mailbox.))",165],["(defstruct (mailbox (:conc-name mailbox.))",165],["(let* ((q (mailbox.queue mbox))",145],["(mutex (mailbox.mutex mbox)))",142],["\"Return THREAD's mailbox.\"",139],["(nconc (mailbox.queue mbox) (list message)))",119],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110]],"useCount":3499},{"word":"main","context":[["(main)",59],["(defun main ()",353],["(:export #:main))",125],["main =rec",75],["(:export :main))",56],["void main() {",54],["(defun main-loop ()",45],[":entity-kind :main",37],[";;; least the names should indicate the main entry point vs. helper",34],["\"main routine\"",30]],"useCount":1908},{"word":"make","context":[["(make-instance 'complex-bigfloat",263],["(fortran-to-lisp::make-f2cl-finfo :arg-types",359],["(make-location",302],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361],["(fortran-to-lisp::make-f2cl-finfo",658],["(make-lexdisr",757],["(make-pathname",2221],["(make-instance",976],[":initform (cl:make-instance 'std_msgs-msg:Header))",258],["(make-instance 'bigfloat",245]],"useCount":45524},{"word":"mal","context":[["(loop do (let ((line (mal-readline \"user> \")))",41],["(defpackage :mal",41],["(in-package :mal)",41],["(defun mal-read (string)",41],["(defun mal-print (expression)",41],["(mal-print (mal-eval (mal-read string)",39],["(mal-print (mal-eval (mal-read string)",39],["(types:make-mal-builtin-fn (lambda (value1 value2)",46],["(defun mal-readline (prompt)",43],["(defun mal-writeline (string)",41]],"useCount":2524},{"word":"map","context":[["(map 'list",229],["(map nil",212],["(cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))",118],["(cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))",82],["(map-slot-boundp* obj '(a b))",114],["(remhash id *thread-id-map*))",83],["(map-backtrace",71],["(sb-thread:with-mutex (*thread-id-map-lock*)",68],["(map 'vector",89],["(nvbag-map (lambda (nvl)",63]],"useCount":8460},{"word":"mapcar","context":[["(mapcar (lambda (x)",323],["(mapcar",1343],["(mapcar #'(lambda (x)",475],[",@(mapcar",204],["(mapcar",154],[",@(mapcar (lambda (arg)",63],["(mapcar #'(lambda (arg)",70],["(mapcar (lambda (name)",72],["(mapcar (lambda (w)",75],["(mapcar #'car",90]],"useCount":9894},{"word":"match","context":[["(when match",96],["(if match",72],["(cl-pattern:match form",72],["or the next unmatched position when there's a match.",70],["RETURNS: nil when no match,",70],["(declare (ignore match))",54],["\"Iterates over TARGET-STRING and tries to match REGEX as often as",43],[";; create a closure to match the inner regex and to",40],["(:function (lambda (match)",40],["(defun prefix-match-p (prefix string)",35]],"useCount":4242},{"word":"matcher","context":[["(type function repeat-matcher))",60],[":matcher",111],["(make-instance 'matcher",57],["(funcall repeat-matcher start-pos)",64],["(setq repeat-matcher",96],["matcher",47],["repeat-matcher)",40],["(matcher  (make-apropos-matcher string case-sensitive))",33],["is-zero-or-more-matcher-p",33],["(funcall matcher symbol))",33]],"useCount":1751},{"word":"matrix","context":[["(glutil:with-transform (model-matrix)",48],["matrix)",44],["(matrix :pointer)",37],[";; Draw operations: opengl matrix",50],["(gl:push-matrix)",52],["matrix))",61],["(station-pqr-to-etrs-matrix",90],["(gl:matrix-mode :modelview)",143],["(gl:with-pushed-matrix",143],["(gl:matrix-mode :projection)",194]],"useCount":2885},{"word":"max","context":[["(max (the f2cl-lib:integer4 2)",55],["(max (the f2cl-lib:integer4 wrkbl)",405],["(max",284],["(max (the f2cl-lib:integer4 1)",196],["((< lda (max (the f2cl-lib:integer4 1) (the f2cl-lib:integer4 m)))",51],["(declare (type ,type seq) (fixnum start end max))",52],["h (max h height)",57],["((< lda (max (the f2cl-lib:integer4 1) (the f2cl-lib:integer4 n)))",61],["(max (the f2cl-lib:integer4 maxwrk)",141],["(:max-access '|read-only|)",171]],"useCount":5353},{"word":"maxima","context":[["(in-package :maxima)",905],[";;  If ss=0, returns a number, otherwise a maxima list",28],["(maxima::fpplus (cdr (real-value a))",63],["(maxima::fpdifference (cdr (real-value a))",63],[":imag (maxima::bcons",91],[":real (maxima::bcons",287],["(maxima::fpquotient (cdr (real-value a))",28],["(when maxima::*debug-newton*",30],["(maxima::fptimes* (cdr (real-value a))",42],["(maxima-integerp (cdras 'n w))",48]],"useCount":2544},{"word":"maybe","context":[["(maybe-emit-clear-values arg1 arg2)))",115],["(maybe-push",748],["(maybe-push (property value)",175],["(maybe-emit-clear-values arg1 arg2)",132],["(let ((maybe-thread (sb-ext:weak-pointer-value thread-pointer)))",68],["(maybe-wsa-error",46],["(compile-forms-and-maybe-emit-clear-values arg1 'stack nil",43],["maybe-supertype)",42],["(maybe-char-is-fixnum-let ((c c))",38],["(compile-forms-and-maybe-emit-clear-values arg 'stack nil)",50]],"useCount":3406},{"word":"mbox","context":[["(mutex (mailbox.mutex mbox)))",142],["(threads:synchronized-on mbox",40],["(nconc (mailbox.queue mbox) (list message))))))",44],["(let ((mbox (mailbox thread)))",50],["(let* ((mbox (mailbox (current-thread)))",75],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["(let* ((mbox (mailbox thread))",115],["(nconc (mailbox.queue mbox) (list message)))",119],["(let* ((q (mailbox.queue mbox))",145],["(setf (mailbox.queue mbox)",201]],"useCount":1915},{"word":"medium","context":[["(when (dm-act-level (dm-act dm) 'medium)",65],["((has-physical-medium computer-medium)",5517],["((has-physical-medium computer-medium)",5517],["(let ((tr (medium-transformation medium)))",36],["(let ((tr (sheet-native-transformation (medium-sheet medium))))",36],["(let ((tr (sheet-native-transformation (medium-sheet medium))))",36],["(with-medium (medium)",40],["(with-medium (medium)",40],["(medium ((cat common)",41],["(with-medium-options (sheet args)",71]],"useCount":12855},{"word":"mem","context":[["(let ((s39 (list mem loc pred)))",89],["(let ((s43 (list mem loc pred)))",93],["(let ((s86 (list mem loc pred)))",107],["(let ((s50 (list mem loc pred)))",107],["(let ((s87 (list mem loc pred)))",128],["(equal (@__ieee754_pow-%358-rev mem loc pred)",178],["(let ((s358 (list mem loc pred)))",184],["(let ((s0 (list mem loc pred)))",812],["(mv succ mem loc)))",823],["(let ((s48 (list mem loc pred)))",86]],"useCount":13906},{"word":"member","context":[["(tail (member-if test q)))",179],["((and (not (member 'simp (car form))) (big-float-eval (mop form) y)))",67],["(member thread (all-threads)))",47],["((member sgn '($pos $pz))",67],["(car (rassoc-if (lambda (x) (member coding-system x :test #'equal))",102],["(assert (member timeout '(nil t)))",118],["(type (member 1 4 8 16 24 32) bits-per-pixel)",118],["((member :deleted)",60],["(member (caar u) '(%inverse_jacobi_sn",60],["(type (member 8 16 32) unit)",52]],"useCount":5498},{"word":"menu","context":[["(setf (fill-pointer (menu-state-current-input menu)) 0)",36],["(setf (fill-pointer (menu-state-current-input menu)) 0)",36],["menu))",25],["(defvar *menu-font*)                                     ; menu font",25],[":menu t)",32],[":pane-menu (lambda (pane object x y)",24],["(defvar *menu-font*)                                     ; menu font",25],[":menu t",128],["(bound-check-menu menu))",36],["(bound-check-menu menu))",36]],"useCount":1948},{"word":"merge","context":[["(merge-pathnames*",84],[";;;; copy, modify, merge, publish, distribute, sublicense, and/or sell",55],[";;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",38],["(setf *default-pathname-defaults* (truename (merge-pathnames directory)))",35],["(merge-pathnames",2097],["(:merge :standard)",34],[";;;; modify, merge, publish, distribute, sublicense, and/or sell copies",34],[";; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",91],[";;; modify, merge, publish, distribute, sublicense, and/or sell copies",563],[";;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",149]],"useCount":4855},{"word":"message","context":[[":message",141],["\"Converts a ROS message object to a list\"",881],["(defimplementation send (thread message)",198],["(nconc (mailbox.queue mbox) (list message)))",119],["message",96],["(pvs-message",73],["#:message",60],["When Emacs presents the message it already has the source popped up",63],["message)",72],["(message",70]],"useCount":8304},{"word":"met","context":[[";;; are met:",1050],[";;; met:",197],[";; met:",153],[";;;;   conditions are met:",138],[";;;; are met:",115],[";; are met:",111],[";;;; conditions are met:",42],[";;;  met:                                                               |",21],["are met:",18],[";;;; met:",16]],"useCount":1899},{"word":"method","context":[["(call-next-method))))",476],["\"Note: The use of this method has been deprecated.",161],["(call-next-method)))))",177],["(when (next-method-p) (call-next-method))",146],["(when (next-method-p) (call-next-method))",146],[":method :post",137],["(t (error \"Overloaded method not defined for this class.\"))))",125],["(call-next-method))",1041],["(call-next-method)))",1481],["(call-next-method)",2215]],"useCount":18016},{"word":"methods","context":[["(dolist (method methods)",71],["(defimplementation profile-package (package callers methods)",90],["; methods",160],["#:specializer-direct-methods",43],["methods)",43],["#:generic-function-methods",48],["(m5::class-decl-methods",49],["methods)))",41],["(applicable-methods-keywords",64],["(declare (ignore callers methods))",61]],"useCount":3732},{"word":"mexpt","context":[["((eq (caar e) 'mexpt)",56],["((mexpt) ((%jacobi_sn) u m) 2))",45],["((mexpt simp) $e4 2))",42],["((mexpt) ((mfactorial) ((mtimes) 2 *index)) -1)",40],["((mexpt simp) $e5 2))",60],["(list '(mexpt)",62],["((mexpt) $%pi ((rat) -1 2))",90],["((mexpt simp)",127],["((mexpt) ((mplus) 1 ((mtimes) -1 m)) -1)",150],["((mexpt)",513]],"useCount":2577},{"word":"michele","context":[["((carried-out-by michele-pasin)",645],["(carried-out-by michele-pasin)",5517],["(CARRIED-OUT-BY  michele-pasin)",165]],"useCount":6327},{"word":"might","context":[[";; TODO: this might solve the problem:",14],[";; There might be remaining elements on reversed-middle",24],[";;; We set the breakpoint in the caller which might be a bit confusing.",29],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],[";; We might want to constrain version with",15],[";; we have to watch out for endless loops as the inner regex might",16],["\"This is the package eval reads and executes in. You might want to set",19],["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["\\\"Minor Failure\\\" (15) - All functionality is available but some might be degraded.",417]],"useCount":1796},{"word":"min","context":[["min",50],["(min (the f2cl-lib:integer4 m)",56],["(min (the f2cl-lib:integer4 n)",91],["(min",130],[":min-value 0",56],["min-len",48],["ymin ($tree_reduce 'min (cons '(mlist simp) y))",37],["(setf xmin ($tree_reduce 'min (cons '(mlist simp) x))",37],["#:min",36],["(assert-eql 2 (extract-min heap))",35]],"useCount":3539},{"word":"missing","context":[["(defun missing-arg ()",39],["(define-condition missing-component (system-definition-error)",34],["((required-by :initarg :required-by :reader missing-required-by)))",34],["(defmethod print-object ((c missing-component) s)",34],["(parent :initform nil :reader missing-parent :initarg :parent)))",34],["(missing-version c)",34],["((requires :initform \"(unnamed)\" :reader missing-requires :initarg :requires)",34],["#:missing-component",34],["(missing-requires c)",54],["(when (missing-parent c)",54]],"useCount":1658},{"word":"mlist","context":[["((mlist) ((mplus) 1 a) ((mplus) 1 a))",52],["'((mlist simp))",196],["(cons '(mlist)",128],["(cons '(mlist simp)",105],["xmax ($tree_reduce 'max (cons '(mlist simp) x))",37],["(setf xmin ($tree_reduce 'min (cons '(mlist simp) x))",37],["ymin ($tree_reduce 'min (cons '(mlist simp) y))",37],["(list '(mlist)",76],["`((mlist simp)",62],["`((mlist)",42]],"useCount":2158},{"word":"mod64","context":[["b2 (mod64- b2 b5))",76],["(setf b2 (mod64+ b2 b1)",108],["(setf b4 (mod64+ b4 b3)",76],["(setf b0 (mod64+ b0 b3)",108],["b4 (mod64- b4 b3))",76],["(setf b2 (mod64+ b2 b5)",76],["(setf b0 (mod64+ b0 b7)",76],["b0 (mod64- b0 b3))",108],["b2 (mod64- b2 b1))",108],["(setf b6 (mod64+ b6 b1)",76]],"useCount":3504},{"word":"mode","context":[["(mode enum)",322],[";;;; -*- Mode: lisp; indent-tabs-mode: nil -*-",589],[":execution-mode",177],[";;;; -*- indent-tabs-mode: nil -*-",163],[";;;; -*- mode:lisp;coding:utf-8 -*-",825],[";;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",371],["Quiesce (9) indicates that the element is enabled but in a restricted mode.",336],["(leave-second-mode))",206],["(gl:matrix-mode :projection)",194],["(mode enum))",180]],"useCount":11868},{"word":"module","context":[[":module \"mysql\"",132],[";;; module.  An independent module is a module which is not derived from",458],[";;; module.  An independent module is a module which is not derived from",458],[";;; module.  An independent module is a module which is not derived from",458],[":module \"postgresql\"",60],[":module :vision",59],[":module \"clsql-mysql\"",72],[":module \"ws2_32\")",78],[":module \"gd\")",80],[":module \"odbc\"",113]],"useCount":5835},{"word":"mop","context":[[";;; swank-mop",108],["(defun swank-mop:slot-definition-documentation (slot)",123],["((taylorize (mop expr) (second expr)))",68],["(cond ((flonum-eval (mop form) y))",69],["(swank-mop:slot-definition-name slot)))))",50],[",@(if (swank-mop:class-finalized-p class)",52],["(:metaclass closer-mop:funcallable-standard-class))",54],["((apply-reflection-simp (mop form) y $trigsign))",67],["((and (not (member 'simp (car form))) (big-float-eval (mop form) y)))",67],["((taylorize (mop form) (second form)))",69]],"useCount":4526},{"word":"more","context":[[":cl-test-more))",44],["more-context",46],[";; We can't take any more. Return now.",56],["Or more simply, if S is not _inherited_.",34],["(nlist more-numbers (cdr nlist)))",35],["#-gcl (dynamic-extent more-numbers))",35],[";; for more details.",38],["(if more",40],["(declare (dynamic-extent more-numbers))",40],["(do ((nlist more-numbers (cdr nlist))",43]],"useCount":2929},{"word":"most","context":[["(let ((end (or end most-positive-fixnum)))",107],["(ymin most-positive-double-float)",96],["most-positive-fixnum))",36],[";; Change history (most recent first):",38],["\"The time the most recent measurement was taken, relative to the managed element where the statistic was collected.\"))",44],["(zmax most-negative-double-float)",48],["(zmin most-positive-double-float)",48],["(xmin most-positive-double-float)",72],["(xmax most-negative-double-float)",88],["(ymax most-negative-double-float)",96]],"useCount":1710},{"word":"mov","context":[["(inst :mov thread-register :rdi)",45],["mov\t\tecx, 2",49],["mov\t\teax, edx",49],["mov         ebp,esp",50],["mov\t\teax, [esi]",58],["mov\t\tebp, esp",230],["mov         ecx, 1",82],["mov     ebp, esp",153],["mov\t\tecx, 1",182],["mov     ecx, 1",194]],"useCount":2054},{"word":"move","context":[["(emit-move-from-stack target representation)",60],["(dative-move no)",33],["(float-window-move-resize window",35],["(move-to (/ w 8) (/ w 16))",41],["(emit-move-from-stack target representation))))",42],["(emit-move-from-stack target))",60],["(move-result-to-target target)",69],["(move-result-to-target target))",81],["(emit-move-from-stack target representation)))",116],["(emit-move-from-stack target representation))",274]],"useCount":2042},{"word":"movie","context":[["(:CATEGORY \"movie-other\"",4930],["(swf-movie-object)",11],["(:CATEGORY \"movie-japan\"",1049],["(:CATEGORY \"movie-chinese\"",1508],["(:CATEGORY \"movie-west\"",5093]],"useCount":12591},{"word":"mp","context":[["(verify-current-mp",186],["(mp:with-lock (lock) (funcall function)))",45],["(mp:process-wait-with-timeout",46],["(mp:all-processes))",51],["(mp:with-lock (mutex)",52],["(mp:process-interrupt thread fn))",54],["(mp:with-lock (*thread-id-map-lock*)",58],["(mp:process-kill thread))",90],["mp:*current-process*)",107],["(mp:process-name thread))",114]],"useCount":3755},{"word":"mplus","context":[["`((mplus)",298],["((mexpt) ((mplus) 1 ((mtimes) -1 m)) -1)",150],["(list '(mplus)",93],["((mplus simp) 1 ((mtimes simp) -1 ,m))",90],["((mplus) u",75],["((mplus simp)",73],["(a (simplify (cons '(mplus) (cddr a)))))",72],["((eq (caar e) 'mplus)",65],["((mlist) ((mplus) 1 a) ((mplus) 1 a))",52],["((mplus)",856]],"useCount":2718},{"word":"msg","context":[["msg",938],[":type std_msgs-msg:Header",263],[":initform (cl:make-instance 'std_msgs-msg:Header))",258],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)",254],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)",254],["(roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)",254],["(roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)",254],["(cl:cons ':header (header msg))",254]],"useCount":8828},{"word":"mtimes","context":[["(list '(mtimes)",114],["((mtimes) ((rat) -1 2)",50],["((eq (caar e) 'mtimes)",54],["'(mtimes)",59],["`((mtimes)",60],["((mtimes)",524],["((mtimes) -1",292],["'((mtimes)",192],["((mexpt) ((mplus) 1 ((mtimes) -1 m)) -1)",150],["((mplus simp) 1 ((mtimes simp) -1 ,m))",90]],"useCount":3079},{"word":"mul","context":[["(mul",839],["(f2cl-lib:int-mul",380],["(mul -1",162],["(mul 2",142],["(f2cl-lib:int-mul n",169],["(f2cl-lib:int-add (f2cl-lib:int-mul 3 n)",142],["(f2cl-lib:int-add (f2cl-lib:int-mul 3 m)",142],["(f2cl-lib:int-mul m",135],["(power '$%e (mul -1 z))",88],["(f2cl-lib:int-mul (f2cl-lib:int-sub n 1)",80]],"useCount":5515},{"word":"multiple","context":[["\"Datapoint refers to multiple indices.\"",124],["(multiple-value-bind (var-0 var-1 var-2 var-3 var-4 var-5 var-6)",136],["(multiple-value-bind (x y)",157],["(is (multiple-value-list",160],["(multiple-value-bind (var-0 var-1 var-2 var-3 var-4 var-5)",178],["(multiple-value-bind (result est-abserr neval ier soln abserr)",253],["(multiple-value-bind (var-0 var-1 var-2 var-3 var-4)",271],["(multiple-value-list",377],["(multiple-value-prog1",441],["(multiple-value-bind",2905]],"useCount":17202},{"word":"must","context":[[";;;;   * Redistributions in binary form must reproduce the above",178],[";;;;   * Redistributions of source code must retain the above",96],["(error 'must-be-proper-list",59],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],[";;;   * Redistributions in binary form must reproduce the above",876],["For DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",58],["(setf score (score-must-have-begin-end score))",50],[";;;; 2. Redistributions in binary form must reproduce the above",42],["must always be supplied. This way the :TYPE slot option need not",34],[";;;     * Redistributions in binary form must reproduce the above",116]],"useCount":3955},{"word":"mutex","context":[["(sb-thread:with-mutex (*thread-id-map-lock*)",68],["(mutex (mailbox.mutex mbox)))",142],["(mutex (mailbox.mutex mbox)))",142],["(sb-thread:with-mutex (mutex)",120],["(sb-thread:with-mutex (mutex)",120],["(mp:with-lock (mutex)",52],["(sb-thread:make-mutex :name name))",46],["(mp:with-mutex-lock (lock)",45],["(ccl:with-lock-grabbed (mutex)",44],["(mezzano.supervisor:with-mutex ((lock stream))",39]],"useCount":1795},{"word":"n","context":[["((1 n) (1 *))",185],["((:name |n| :type |SizeI| :direction :in)",225],["((> j n) nil)",1126],["((> i n) nil)",888],["(dotimes (i n)",664],["n",601],["(n sizei)",388],["stream n",273],["((< n 0)",234],["n)))",184]],"useCount":30282},{"word":"name","context":[["(:name |width| :type |SizeI| :direction :in)",570],["name",1313],["(declare (ignore name))",579],["((:name |target| :type |TextureTarget| :direction :in)",583],["((:name |program| :type |UInt32| :direction :in)",604],["((:name |location| :type |Int32| :direction :in)",608],["(:name |count| :type |SizeI| :direction :in)",745],["((:name |index| :type |UInt32| :direction :in)",768],[":name name",815],[":name name",815]],"useCount":110487},{"word":"names","context":[["names))",98],[";;;     * Neither the name of the project nor the names of its",91],["(dolist (name names)",109],[";;  - Neither the name of Edward Marco Baringer, nor BESE, nor the names",127],["(declare (ignore slot-names))",78],["(defmacro with-gensyms ((&rest names) &body body)",71],["(defun package-names (package)",67],["(odysseus::*assert-rewrite-for-unique-names-axioms*)",233],["(type-names",67],["slot-names",66]],"useCount":5510},{"word":"namestring","context":[["(make-location (list :file (namestring file))",65],["(namestring",140],["(list :file (namestring (truename file)))",43],["(parse-unix-namestring",61],["(namestring pathname))",58],["(load (format nil \"~a~a\" (directory-namestring *load-truename*) \"bootstrap.lisp\"))",50],["#:native-namestring",48],["(\"Namestring\" (namestring pathname))",45],["(make-location (list :file (namestring (truename file)))",44],["(list (file-namestring pathname)))",44]],"useCount":3497},{"word":"nconc","context":[["(nconc",226],["nconc",296],["(nconc (mailbox.queue mbox) (list message)))",119],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["nconc",77],["(nconc (ldiff q tail) (cdr tail)))",47],["(nconc (mailbox.queue mbox) (list message))))))",44],["(nconc *pending-slime-interrupts*",32],["(nconc args (list :local-host (when local-host",30],["(nconc (mapcan",26]],"useCount":1741},{"word":"needed","context":[[";;;           (:coerce-assigns :as-needed) (:array-type ':simple-array)",162],[";;;           (:coerce-assigns :as-needed) (:array-type ':array)",942],["; Bootstrap all needed packages (loads ACT-R, Cocoa framework, etc.)",50],["Returns a list of completions with package qualifiers if needed.\"",35],[";RBP not needed",34],[";RPOS not needed",34],["(defslimefun compile-file-if-needed (filename loadp)",33],[";; intersperse lambda keywords as needed",30],["\"Escape a string TOKEN within double-quotes if needed",28],["3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed.",26]],"useCount":2108},{"word":"new","context":[["new-value))",143],["new)",78],["(let ((result (generate-test-paths-new",84],["(declare (ignore new-value))",96],["new-value)",129],["new))",158],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["\\\"Immigrating\\\" element is being moved to new host element.",417]],"useCount":11401},{"word":"newline","context":[["(pprint-newline :fill)))",58],["`(\"Constants:\" (:newline))",63],["(pprint-newline :miser)",64],["(newline)",67],["(:newline))",74],["(pprint-newline :mandatory)",95],["(:newline)))",143],[":newline",157],["(pprint-newline :fill)",320],["(:newline)",875]],"useCount":5132},{"word":"next","context":[["(call-next-method)))",1481],["(next)",98],["(t (call-next-method))))",102],["(next-token)",119],["(when (next-method-p) (call-next-method))",146],["(when (next-method-p) (call-next-method))",146],["(call-next-method)))))",177],["(call-next-method))))",476],["(call-next-method))",1041],["(call-next-method)",2215]],"useCount":13867},{"word":"nil","context":[["nil",7810],["(t nil)))",1196],["nil))))",1203],["nil)",14064],["nil)",5133],[":initform nil",3839],["nil))",3728],["nil)))",2644],["nil",1326],["#+nil",1213]],"useCount":147553},{"word":"no","context":[["(definite no)",287],["provision contained herein.  In no event shall BBN be liable for any",49],["(:no-error (&rest rest) (declare (ignore rest)) nil))",50],["cont-no-alloc",54],["(:gc :no-frame :layout #*0)",60],["'$no)",62],["RETURNS: nil when no match,",70],["(restrictive no)",97],["(:gc :no-frame)",112],["(simple no)",136]],"useCount":6010},{"word":"node","context":[["(let ((p         (pjb-re-slot-begin node))",52],["node)",217],["(lhs (and (current-node <node>)",212],["(lhs (and (current-node <node>)",212],["node))",133],["node",131],["(ensuring-node-target (target vreg)",78],["node)))",57],["(lambda (node)",107],["(when node",68]],"useCount":5516},{"word":"non","context":[["(check-type size (or non-negative-fixnum (eql *)))",36],["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["'((odysseus::*store-all-non-refuted-proof-terms*)",177],["(com.informatimago.rdp::with-non-terminal",134],[":warning \"a non-negative number\"",79],["(voice-class non-middle)",71],["(non-greedy-constant-length-closure",70],["(non-empty (djvm-stack djvm))",67],[":variable-values '((odysseus::*store-all-non-refuted-proof-terms*)",56],["(let ((next-char (next-char-non-extended lexer)))",45]],"useCount":4282},{"word":"normal","context":[["(normal-vector (0.598753 0.072099 0.797682))",54],[":normal))",31],["((:normal",31],["(with-slots (normal-hints) shell",27],["(tangent-v mesh normal)",24],["(:_NET_WM_WINDOW_TYPE_NORMAL . :normal))",23],["(defconstant +normal-state+ 1)",23],["\\\"Degraded\\\" indicates the ManagedElement is functioning below normal.",417],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],[";; <name> can be a normal name or a (setf name)",71]],"useCount":2361},{"word":"not","context":[["A Null return indicates the implementation (provider) does not implement this property.",1251],["; Auto-generated. Do not edit!",681],[":if-does-not-exist :create)",627],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],[";;; module.  An independent module is a module which is not derived from",458],[";;; this exception to your version of the library, but you are not",458],[";;; obligated to do so.  If you do not wish to do so, delete this",458],[":if-does-not-exist :create",446],["\\\"Critical Failure\\\" (25) - The element is non-functional and recovery might not be possible.",417],["Not Applicable (5) indicates the element does not support being enabled or disabled.",336]],"useCount":35190},{"word":"note","context":[["(locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))",46],["(note-toplevel-form form)",45],["(source-note-to-source-location",70],["(note-package-fishiness",156],[";; note that REPEAT-MATCHER will call",40],["(sb-ext:compiler-note :note)",34],["(sb-ext:compiler-note :note)",34],["(function-name-source-note function))",34],["(locate-compiler-note",34],["\"Make a compiler note data structure from a compiler-condition.\"",34]],"useCount":2661},{"word":"now","context":[["(format nil \"~S is now traced.\" fspec))))",55],["(format nil \"~S is now profiled.\" fname)))))",33],["(let ((now (get-universal-time)))",35],["thematic-substrate::prepare-now-p))",42],["(format nil \"~S is now traced.\" spec))))",47],["(format nil \"~S is now untraced.\" fspec))",55],[";; We can't take any more. Return now.",56],["(let ((now (get-internal-real-time)))",61],["(format nil \"~S is now untraced.\" spec))",63],["\"ErrorCleared is a boolean property indicating that the error reported in LastErrorCode is now cleared.\"))",118]],"useCount":1681},{"word":"nreverse","context":[["(nreverse",189],["(nreverse result))))",52],["(return (nreverse result)))",40],["(nreverse list)))",42],["(nreverse res)))",45],["(nreverse acc)))",56],[";; nreverse it again and count",58],[";; nreverse the remaining list",64],["(nreverse result)",134],["(nreverse result)))",272]],"useCount":2316},{"word":"nth","context":[["(let ((frame (nth-frame index)))",177],["(let* ((frame (nth-frame frame-number))",56],["(let* ((frame (nth-frame index)))",59],["(let* ((frame (nth-frame frame))",63],["(nth (first x) D))) Idx))",66],["(interrupt-thread (nth-thread index)",68],["(nth-value 1",99],["(let* ((frame (nth-frame index))",116],["(defun nth-frame (index)",142],["(let ((frame (nth-frame frame-number)))",167]],"useCount":4904},{"word":"null","context":[["((null l))",202],["(if (null lst)",215],["(null-pointer)",240],["(if (null args)",246],["(null nil)",301],["(null",326],["(should be null",160],["((null l)",152],["(cond ((null x) nil)",134],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557]],"useCount":21046},{"word":"num","context":[[";Max num semillas",100],["(mulf num 10000)",60],["num",48],["(incf (aref *repeat-counters* rep-num))",48],["(num :int))",45],["(setf (svref *last-pos-stores* zero-length-num) start-pos)",40],["(svref *last-pos-stores* zero-length-num)))",40],["num))",37],["(setf (svref *last-pos-stores* zero-length-num)",32],[":num-utils",32]],"useCount":1746},{"word":"number","context":[["\"The total number of hours that this Device has been powered.\")",118],["number",92],["callp \t_wrong-number-of-args-error",88],[":warning \"a non-negative number\"",79],["(number plural)))",75],["(defimplementation disassemble-frame (frame-number)",75],["\"The number of consecutive hours that this Device has been powered, since its last power cycle.\")",118],["(let ((frame (nth-frame frame-number)))",167],["(defimplementation eval-in-frame (form frame-number)",120],["(number plural)",156]],"useCount":11158},{"word":"o","context":[["(:header (describe-primitive-type o))",71],["(lispworks-inspect o))",51],["(defmethod emacs-inspect ((o t))",180],["\"Initialize <o> properties.\"",71],["o)",72],["(declare (ignorable o c))",97],["(defmethod emacs-inspect ((o function))",101],["(declare (ignorable o))",116],["(core-or o",147],["o",163]],"useCount":9393},{"word":"obj","context":[["(make-obj-title (get-option '$key))",244],["obj)",222],["obj))",191],["(declare (ignore obj))",190],["obj",127],["(typecase obj",115],["(map-slot-boundp* obj '(a b))",114],["(print-unreadable-object (obj stream :type t :identity t)",75],["(lambda (obj)",73],["obj)))",98]],"useCount":6032},{"word":"object","context":[["(:type 'object-type)",245],["(declare (ignore object))",251],["object))",262],["(print-unreadable-object (object stream :type t :identity t)",287],["(print-unreadable-object (object stream :type t :identity t)",287],["object",400],["object)",542],["\"Converts a ROS message object to a list\"",881],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\"The Description property provides a textual description of the object.\"))",799]],"useCount":23670},{"word":"objects","context":[[";;; Add system objects",35],["\"Inspect the next element in the history of inspected objects..\"",33],[";; condition objects, which in turn does inheritance of :report options at",34],["(let ((objects (make-array repeat)))",38],["\"Like (mapcar FN . LISTS) but only call FN on objects satisfying TEST.",34],["\"An array of keywords for characterizing / categorizing policy objects. Keywords are of one of two types:",39],["(when objects",40],["(dolist (object objects)",61],["objects",43],["(fli:with-dynamic-foreign-objects ()",40]],"useCount":1647},{"word":"odysseus","context":[["(odysseus-snark::*ida-run-time-limit* . 0.1)",233],["(odysseus-snark::*run-time-limit* . 0.2)",233],["'((odysseus::*store-all-non-refuted-proof-terms*)",177],["(odysseus-snark::*error-when-refutation-without-answer*))",233],["(odysseus::*support-declarations*)",233],["(odysseus-snark::*ida-iterations* . 3)",233],["(odysseus::*support-unique-name-axioms*)",233],["(odysseus::*support-preconditions*)",233],["(odysseus::*assert-rewrite-for-declarations*)",233],["(odysseus::*assert-rewrite-for-unique-names-axioms*)",233]],"useCount":3055},{"word":"of","context":[["\"Use of Timeout Parameter Not Supported\" \"Busy\" \"Method Reserved\"",344],["((part-of-expression Tractatus-original-english-version)",1040],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\"The Description property provides a textual description of the object.\"))",799],["((part-of-expression Tractatus-original-german-version)",541],[";;; terms of your choice, provided that you also meet, for each linked",487],[";;; this exception to your version of the library, but you are not",458],["DMTF has reserved the unused portion of the continuum for additional HealthStates in the future.\")",417],["2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values.",417],["A return code of 0 shall indicate the state change was successfully initiated.",344]],"useCount":45100},{"word":"offset","context":[["c-%offset%)",1268],["b-%offset%)",378],["x-%offset%))))",393],["a-%offset%))",409],["z-%offset%)",491],["a-%offset%))))",630],["x-%offset%)",779],["((1 *)) work-%offset%)",813],["a-%offset%)",1061],["work-%offset%)",1764]],"useCount":30463},{"word":"ok","context":[["cont-ok",61],["(lift:ensure (cl-ppcre:scan \"<lfm status=\\\"ok\\\">\" response))",51],["(setq ok t))",63],["(cont-ok (be t))",65],["(unless ok",98],["(funcall cont-ok)",41],["(setf ok nil))",43],["(ok expr stream n state",118],["(ok expr stream n state output-string-stream))",128],[":ok)",309]],"useCount":1867},{"word":"old","context":[["(defun file-newer-p (new-file old-file)",58],["(if (old-streamp stream)",83],["(> (file-write-date new-file) (file-write-date old-file)))",58],["(funcall hook condition old-hook)))))",53],["&optional (old-case-insensitive-p :void))",45],["for old-pos = 0 then (+ pos part-length)",45],[":start old-pos",44],[":start2 old-pos",43],["(= (the fixnum old-last-pos) start-pos))",40],["(when (and old-last-pos",40]],"useCount":2843},{"word":"on","context":[[";; We can't use loop for ... on, becaue it uses atom for testing the end",128],["(loop for (type arg) on args by #'cddr",48],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],["\"Like socket-accept, but retry on EAGAIN.\"",66],["(on-table C)",59],["additional information on the specifiers defined in ANSI Common Lisp.\")",55],["(when (boundp 'excl:*warn-on-nested-reader-conditionals*)",54],["(operate-on-system",54],["(opengl:rendering-on (canvas)",48],["(on B C)",48]],"useCount":10567},{"word":"one","context":[["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["(let* ((zero 0.0) (one 1.0))",52],["(ignorable zero one))",57],["((/= beta one)",81],["(let* ((one 1.0) (zero 0.0))",86],["(/ one",96],["(declare (type (double-float 1.0 1.0) one)",104],["(type (double-float 1.0 1.0) one)",129],["(ignorable one zero))",134],["one)",155]],"useCount":6330},{"word":"only","context":[["division by zero (multi-line description), and only one frame is being",34],["from other packages, but only about the symbols directly specific",34],["(socket-io        (missing-arg) :type stream :read-only t)",34],["If FORCE is true then check all symbols, otherwise only check symbols",35],["(once-only (value)",37],["\"Like with-slots but works only for structs.\"",49],["(setf *only-simple-args* nil)",57],["1) PRODIGY will only be used for internal, noncommercial research purposes.",90],[":read-only t)",94],["(:max-access '|read-only|)",171]],"useCount":3798},{"word":"op","context":[["(case op",149],["`(,op (destructuring-bind ,rands ,operands",37],["(declare (ignore op))",95],["(:op",69],["(ecase op",61],["(op enum)",54],["(let* ((op (%car form))",51],["op",40],["op))",38],["(let ((operator (gensym \"op-\"))",37]],"useCount":6433},{"word":"open","context":[["(with-open-file (stream filename)",47],["(with-open-file (stream filename",49],["(with-open-file (out (ensure-directories-exist",50],["(unless (open-stream-p stream)",53],["(with-open-file (in filename)",59],["(with-open-file (in file)",62],["(new (chain *open-layers",67],["(with-open-file (stream file)",93],["(with-open-file",115],["(with-open-file",147]],"useCount":4769},{"word":"opengl","context":[["(opengl:rendering-on (canvas)",48],["(opengl:gl-vertex2-f (safe-float-coerce c) (safe-float-coerce d))",33],[";; Draw operations: opengl matrix",50],["(opengl:gl-end))",51],["(opengl:gl-end)))",51],["(system-get 'opengl-free-drawing-default-language-ext-1)))",52],["(in-package #:cl-opengl-bindings)",58],["(make-instance 'entity-opengl-free-drawing-2d",126],["\"cl-glfw-opengl-core\")",217],["(in-package #:cl-glfw-opengl)",361]],"useCount":2293},{"word":"openmcl","context":[["#+:openmcl",51],["openmcl-mop:slot-definition-allocation",22],["openmcl-mop:eql-specializer-object",22],["openmcl-mop:generic-function-methods",22],["openmcl-mop:class-direct-slots",23],["#+(or (not :mcl) :openmcl)",26],["#+(or openmcl digitool)",41],["#+(and :mcl (not :openmcl))",44],["#-(or lispworks sbcl openmcl cmu allegro)",53],["#+openmcl",335]],"useCount":1766},{"word":"operation","context":[["perform explain output-files operation-done-p",42],["(declare (ignorable operation))",38],["operation c))",42],["(if operation",45],["(case operation",46],["`(:draw-operation (,$2)))",49],[";; Draw operation list",50],["`(:draw-operation (,$2 ,$3 ,$4)))",52],["(declare (ignorable operation c))",61],["((draw-operation",155]],"useCount":8807},{"word":"operator","context":[["(* :2-ary-operator)",41],["(declare (ignore operator))",41],["(+ :2-ary-operator)",41],["(with-slots (operator argument) ex",43],["(with-slots (operator argument) expr",55],["operator)",59],["(multiple-value-or (apply #'extra-keywords/make-instance operator args)",80],["((special-operator-p symbol) :special-operator)",80],["((special-operator-p symbol) :special-operator)",80],[":where (sql-binary-operator :name '= :left (sql-identifier :name \"langauge\")",84]],"useCount":4292},{"word":"optimize","context":[["(declare (optimize speed))",641],["(optimize (speed 3) (safety 0)))",188],["(declare (optimize (speed 3))",207],["(declare (optimize speed",230],["#+ (or ccl ecl gcl) (declare (optimize (speed 3) (safety 0)))",307],["(declare (optimize (speed 3)))",346],["(locally (declare (optimize speed))",347],["(declare (optimize (speed 3) (safety 0)))",351],["(declare #.*standard-optimize-settings*)",1603],["(odysseus::*optimize-interpretation-of-declarations* . t)",177]],"useCount":9492},{"word":"option","context":[["(dolist (option options)",85],["(/ (first (get-option '$dimensions)) 100.0)",88],["(/ (second (get-option '$dimensions)) 100.0)",88],["(round (second (get-option '$dimensions)))",100],["(get-option '$file_name)))",101],["(hex-to-rgb (get-option '$color))",110],["(round (first (get-option '$dimensions)))",142],["(get-option '$line_type)",182],["(get-option '$line_width)",196],["(make-obj-title (get-option '$key))",244]],"useCount":4099},{"word":"optional","context":[["&optional",857],["(:optional \"\")",819],["(defimplementation receive-if (test &optional timeout)",176],["(:optional",173],["(defimplementation wait-for-input (streams &optional timeout)",113],["(defun make-lock (&optional name)",93],["#'(lambda (location &optional (offset 0))",92],["((s trivial-gray-stream-mixin) seq &optional start end)",88],["(&optional",88],["(:optional \"\"))",84]],"useCount":12067},{"word":"options","context":[["(options :pointer)",41],["(multiple-value-bind (lisp-name foreign-name options)",52],["(with-medium-options (sheet args)",71],["options)))",74],["(declare (ignore options))",77],["(dolist (option options)",85],["options)",98],["(setf (gethash opt *gr-options*) val)",100],["options))",133],["options",103]],"useCount":3810},{"word":"or","context":[[";;; modify, merge, publish, distribute, sublicense, and/or sell copies",563],["(or",1344],[";;; Redistribution and use in source and binary forms, with or without",1324],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832],["#+(or)",567],["\\\"Servicing\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",417],["\\\"In Service\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",415],["\"Unknown or Unspecified Error\" \"Cannot complete within Timeout Period\"",344],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343]],"useCount":45222},{"word":"order","context":[["order arg))",44],["#:generic-function-argument-precedence-order",45],["(:argument-precedence-order client gadget-id scroll-bar))",36],[";;; smattering of non-portable functions in order to write the server,",34],["argument-precedence-order",46],["The forms are evaluated in order, and the values of all but the last",51],["(:order-by",57],["((complex-float-numerical-eval-p order arg)",40],["(add order '((rat simp) 1 2)))",40],["(let ((order (simpcheck (cadr expr) z))",44]],"useCount":2911},{"word":"orig","context":[["(and (equalp orig x) y))",50],["(x (copy-seq orig))",471],["(and (equalp orig x)",166],["(let* ((orig #*010101)",136],["(let* ((orig '(a b c a b d a c b a e))",44],["(throw 'need-orig-args nil))",33],["(let* ((orig \"aaaaaaaaaa\")",32],["(let* ((orig '(a a a a a a a a a a))",32],["(let* ((orig #(a a a a a a a a a a))",32],["(let* ((orig '(1 2 3 2 6 1 2 4 1 3 2 7))",32]],"useCount":1857},{"word":"original","context":[["(sb-c::source-path-original-source",34],[":original-condition condition)))))",32],["(sb-c::compiler-error-context-original-source-path context)))))",34],["(let ((real-condition (original-condition condition)))",34],["thematic-substrate::original-query",52],[":initarg :original-condition",55],["((original-condition",55],[":original-condition condition",201],["((part-of-expression Tractatus-original-german-version)",541],["((part-of-expression Tractatus-original-english-version)",1040]],"useCount":3351},{"word":"ostream","context":[["(cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream))",569],["(cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)",339],["(cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream))",331]],"useCount":10205},{"word":"other","context":[["\"An address or other identifying information to uniquely name the LogicalDevice.\")",118],[";; All other cases are handled by the simplifier of the function.",100],[":allow-other-keys t",102],[";;    documentation and/or other materials provided with the distribution.",145],[";;     and/or other materials provided with the distribution.",157],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343],["&key &allow-other-keys)",382],["&allow-other-keys)",1409],["(:CATEGORY \"movie-other\"",4930],[";;; documentation and/or other materials provided with the distribution.",171]],"useCount":12298},{"word":"otherwise","context":[["\\\"In Service\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",415],["if the file doesn't exist; otherwise the first line of the file.\"",34],["If FORCE is true then check all symbols, otherwise only check symbols",35],["(otherwise (mv nil mem loc))))",39],["otherwise.\"",40],["(otherwise",43],["(otherwise nil))))",44],["(otherwise nil)))",161],["\\\"Servicing\\\" describes an element being configured, maintained, cleaned, or otherwise administered.",417],["(otherwise",1427]],"useCount":3718},{"word":"out","context":[["(:name |length| :type |SizeI| :direction :out :array t :size #x1)",122],["(c-format out \" \")",113],["out)",86],["out))",163],["(:name |params| :type |Float32| :direction :out :array t :size (|pname|)))",176],["(:name |params| :type |Int32| :direction :out :array t :size (|pname|)))",250],["((carried-out-by michele-pasin)",645],["(carried-out-by michele-pasin)",5517],["(with-output-to-string (out)",656],["(:name |params| :type |Int32| :direction :out :array t :size pname))",76]],"useCount":16984},{"word":"output","context":[["(with-output-to-string (out)",656],["(with-output-to-string (stream)",590],["(force-output)",545],["(with-output-to-string (*standard-output*)",542],["(with-output-to-string (*standard-output*)",542],["output-string-stream))",479],["(finish-output)",382],["(with-output-to-string",285],["(with-output-to-string (s)",1065],[":direction :output",1464]],"useCount":32986},{"word":"p","context":[["(defimplementation thread-alive-p (thread)",158],["load-p external-format",161],[":predicate (lambda (p)",170],["p))",177],[":actuator (lambda (p)",180],["(when error-p",196],["(eat ?p.person)",286],["(declare (ignore p))",288],["(if (inl-p dec)",437],["(if (inr-p dec)",437]],"useCount":49437},{"word":"package","context":[["(in-package #:climbe)",1439],["(in-package #:cl-glfw-opengl)",361],["(in-package \"SYSTEM\")",555],[";;;; package.lisp",562],["(in-package #:cl-user)",653],["(in-package :maxima)",905],["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],["#+#.(cl:if (cl:find-package '#:f2cl) '(and) '(or))",1102],["(in-package :cl-test)",1202],["(in-package :cl-user)",1804]],"useCount":60903},{"word":"pair","context":[["(let ((nvx (pair-fst pair))",194],["(make-pair :fst (funcall (funcall nvmk-hdf)",242],["(let ((nvx (pair-fst pair))",194],["(nvy (pair-snd pair)))",138],["(nvy (pair-snd pair)))",138],["(nvzz1 (pair-snd pair)))",114],["(nvzz2 (pair-snd pair)))",114],["(nvzz2 (pair-snd pair)))",114],["(let ((pair nvzz1))",114],["(let ((pair nvz))",247]],"useCount":7934},{"word":"pane","context":[["(if (eq (gadget-orientation pane) :vertical)",48],["(with-slots (armed) pane",48],["(formatting-cell (pane)",57],["pane",61],["(with-special-choices (pane)",47],["(multiple-value-bind (x1 y1 x2 y2) (bounding-rectangle* (sheet-region pane))",47],["(inspector-table-row (pane)",36],["(with-bounding-rectangle* (x1 y1 x2 y2) (sheet-region pane)",36],["(make-pane 'push-button",34],["(with-slots (border-width) pane",33]],"useCount":2181},{"word":"param","context":[["(param int))",179],["(param float))",147],["(:name |param| :type |CheckedFloat32| :direction :in))",128],["(if (cdr param)",42],["(:name |param| :type |Int32| :direction :in))",47],["(param (:pointer int)))",49],["(case (car param)",54],["(param fixed))",76],["(:name |param| :type |CheckedInt32| :direction :in))",104],["(case param",112]],"useCount":1655},{"word":"parameter","context":[[":parameter parameter",30],["(define-parameter",48],["(defun shebang-reader (stream sub-character infix-parameter)",40],["(parameter",35],["(when infix-parameter",34],["(error \"illegal read syntax: #~D!\" infix-parameter))",34],[":parameter parameter",30],["\"Setting parameter ~s failed because ~s already on the hook.\"",30],["(gl:tex-parameter-i gl:+texture-2d+",30],["(unless (null parameter)",28]],"useCount":1790},{"word":"parameters","context":[[":parameters",44],["<<parameters>>",98],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],["parameters",68],[":parameters parameters",57],[":parameters parameters",57],["parameters)",50],["parameters))",43],[". #.(or #+scl '(:parameters nil :query nil :fragment nil))))",30],["parameters)))",24]],"useCount":1977},{"word":"params","context":[["(params (:pointer int)))",675],["(params (:pointer float)))",470],["(:name |params| :type |Int32| :direction :out :array t :size (|pname|)))",250],["(:name |params| :type |Float32| :direction :out :array t :size (|pname|)))",176],["params",167],["(params (:pointer uint)))",159],["(:name |params| :type |CheckedFloat32| :direction :in :array t :size",143],["(:name |params| :type |CheckedInt32| :direction :in :array t :size",119],["(params (:pointer double)))",109],["(params (:pointer fixed)))",100]],"useCount":4877},{"word":"parent","context":[[":parent parent",210],["(when parent\t\t; parent's default",47],["(with-slots (rx ry rw rh) parent",51],["(when (missing-parent c)",54],[":parent parent",210],["(declare (ignore parent))",58],["parent",72],["(if parent",115],["(when parent",208],["parent)",47]],"useCount":5498},{"word":"parse","context":[["(parse-assembler",216],["#.(test-parse \"",193],["(update-parse syntax)",65],["(x86::parse-assembler",69],["(define-parse-tree-synonym",78],[";;; parse trees",80],["(parse-tyi)",83],[":condition-type 'uri-parse-error)",94],["(test-transform 'cps (parse \"",84],["(parse-integer",86]],"useCount":6767},{"word":"part","context":[[";;;; This file is part of CLSQL.",121],["This file is a part of Maiden",126],[";;;   This file is part of Clozure CL.",130],[";;;; This file is part of little b.",145],[";; This file is part of STMX.",151],[";;;; This file is part of cl-ana.",162],[";; This file is part of SICP Solutions.",176],[";;  This file is part of stumpwm.",234],["((part-of-expression Tractatus-original-german-version)",541],["((part-of-expression Tractatus-original-english-version)",1040]],"useCount":7402},{"word":"pasin","context":[["(carried-out-by michele-pasin)",5517],["(CARRIED-OUT-BY  michele-pasin)",165],["((carried-out-by michele-pasin)",645]],"useCount":6327},{"word":"path","context":[["path)))",75],["path",187],["path))",158],["path)",153],["*path&name*))",142],["*path&name*",136],["(when path",107],["(path uint)",102],["*path&name*)))",95],["(if (null (cdr path))",72]],"useCount":11262},{"word":"pathname","context":[["(make-pathname :name nil :type nil :version nil",81],["(make-pathname :directory",93],["pathname",95],["(pathname-directory",110],["pathname)))",116],[":pathname pathname",179],[":pathname pathname",179],["(when pathname",180],["(pathname",272],["(make-pathname",2221]],"useCount":29084},{"word":"pathnames","context":[["(unix-truename (merge-pathnames (make-pathname :type \"lisp\")",29],[";; pathnames are sooo useless",25],["(merge-pathnames (format nil \"archives/~A\" (subseq (get-opt \"download.uri\") (1+ pos))) (homedir)))))",27],["(merge-pathnames",2097],["(merge-pathnames*",84],["(loop for p in *pathnames*",62],["(error \"Can't reliably convert wild pathnames.\"))",42],["(setf *default-pathname-defaults* (truename (merge-pathnames directory)))",35],["(not :logical-pathnames-mk))",33],["(merge-pathnames (user-homedir-pathname) #p\".slime-secret\")",33]],"useCount":4339},{"word":"pattern","context":[["thematic-substrate::rule-con-pattern",52],["#| Load the piece and the pattern. |#",63],["((consp pattern)",62],["(setq T2 (translators-of-pattern-in-dataset P2 D2))",48],["pattern))",41],["(case (car pattern)",40],[",@(loop for (pattern . body) in patterns collect",36],["(destructuring-bind (op &rest rands) pattern",36],["(if (eq pattern t)",36],["(cl-pattern:match form",72]],"useCount":2692},{"word":"per","context":[["bits-per-pixel",53],["(type (member 1 4 8 16 24 32) bits-per-pixel)",118],["internal-time-units-per-second))",87],["padded-bytes-per-line bits-per-pixel)",70],["padded-bytes-per-line bits-per-pixel)",70],["(type array-index index padded-bytes-per-line)",70],["(ignore bits-per-pixel))",70],["internal-time-units-per-second)",56],["subpathname specification and keyword arguments as per RESOLVE-LOCATION \\(see",54],["internal-time-units-per-second))))",49]],"useCount":2454},{"word":"physical","context":[["(check ensure-physical (physical-pathname-p p) \"Could not translate to a physical pathname\")",13],["(physical-memref-unsigned-byte-32",14],["((has-physical-medium computer-medium)",5517],["(sb-ext:parse-native-namestring filename *physical-pathname-host*))",33],["(defvar *physical-pathname-host* (pathname-host (user-homedir-pathname)))",33],["(physical-device physical-device)",24],["(physical-device physical-device)",24],["(when *verbose-physical-allocation*",18],[";; Try hard to not resolve logical-pathname into physical pathnames;",15],[";; Not that the results are very portable when you use these patterns on physical pathnames.",15]],"useCount":5933},{"word":"place","context":[["(current-goal <node> (place <x> <y> <p>))",39],[":place (term-place expr)))",41],[":place (term-place expr)))",41],["(defmacro with-recursive-lock-held ((place) &body body)",47],[":place place",55],[":place place",55],["(defmacro with-lock-held ((place) &body body)",76],["(get-setf-expansion place env)",178],["(has-death-place   )",404],["(has-birth-place  )",404]],"useCount":2997},{"word":"plan","context":[["(defmethod compute-action-stamp (plan (o operation) (c component) &key just-done)",13],["(plan nil)",111],["plan))",23],["(plan 1)",20],["The plan returned is a list of dotted-pairs. Each pair is the CONS",18],["\"Generate and return a plan for performing OPERATION on COMPONENT.",18],["(declare (ignorable plan operation component))",16],["plan)",14],["(plan 3)",21],["(keep-operation :initform t :initarg :keep-operation :reader plan-keep-operation)",13]],"useCount":2355},{"word":"plist","context":[["\"A hashtable mapping threads to a plist.\")",38],["(with-definition-source (pathname form-path character-offset plist",44],["(plist-hash-table",52],["\"Return a plist describing SYMBOL.",69],["plist",94],[";; geb val  konst svar func mac spec plist i1  i2  i3",37],["(when plist",34],["(:source-plist (list :emacs-buffer buffer",34],["(emacs-buffer-source-location code-location plist)",34],["(if (getf plist :emacs-buffer)",34]],"useCount":2503},{"word":"pname","context":[["(pname glenum)",90],["((:name |pname| :type |PointParameterNameARB| :direction :in)",96],["(:name |pname| :type |TextureGenParameter| :direction :in)",99],["(:name |pname| :type |GetTextureParameter| :direction :in)",108],["(|pname|)))",274],["(pname enum)",2081],["(:name |params| :type |Int32| :direction :out :array t :size (|pname|)))",250],["(:name |pname| :type |GLenum| :direction :in)",194],["(:name |params| :type |Float32| :direction :out :array t :size (|pname|)))",176],["(:name |pname| :type |TextureParameterName| :direction :in)",108]],"useCount":5441},{"word":"point","context":[["(multiple-value-bind (x1 y1) (line-start-point* a)",45],["`(sys.lap-x86:call ,(object-ea :r13 :slot sys.int::+fref-entry-point+))",53],["(sys.lap-x86:call (:r13 #.(+ (- sys.int::+tag-object+) 8 (* sys.int::+fref-entry-point+ 8))))",54],["(multiple-value-bind (x2 y2) (line-end-point* a)",45],["\"Return true if PTR1 and PTR2 point to the same address.\"",45],["'no-next-choice-point)",42],["(undo-bdd-entries-back-to undo-point)",39],["(transform-point 3)",80],["(with-editor-point-and-string ((point string) editor)",56],["(with-editor-point-and-string ((point string) editor)",56]],"useCount":3441},{"word":"pointer","context":[["(value (:pointer float)))",250],["(v (:pointer short)))",259],["(v (:pointer double)))",303],[":pointer",382],["(null-pointer)",240],["(params (:pointer int)))",675],["(params (:pointer float)))",470],["(arg0 :pointer)",412],["(v (:pointer float)))",396],["(v (:pointer int)))",242]],"useCount":31720},{"word":"points","context":[[";; Loop invariant: trail points to the cell",48],["(declare (ignore outer-points))",36],["points))",39],["Note that this does _not_ check to see that PATHNAME points to an",31],[":name 'points",32],[";;;;; SLDB entry points",33],["(discarded-points",34],["(:entry-points (sb-kernel:%code-entry-points o))",34],["(:entry-points (sb-kernel:%code-entry-points o))",34],["(points (:pointer float)))",53]],"useCount":1675},{"word":"policy","context":[["(with-compiler-policy policy",58],[":policy policy)))))))",60],["policy)",200],["&key policy)",183],["(declare (ignore policy))",164],["(declare (ignore filename policy))",91],["(:policy :fast-safe)",84],["(return-by-policy)))",61],[":policy policy)))))))",60],["(with-compiler-policy policy",58]],"useCount":2303},{"word":"pop","context":[["pop         ebp",64],["(loop-pop-source)",211],["pop\t\tebp",211],["pop     ebp",177],["(pop-bdd-entry)",86],["(or (argument-pop input)",84],["(loop (pp* (pprint-pop))",82],["pop     ecx",57],["(kb (pop-stack *stack*)))",57],["pop\t\tedi",51]],"useCount":3576},{"word":"port","context":[[":local-port local-port",79],[":port port",127],[":port port",127],["port",91],["(defimplementation create-socket (host port)",83],["(defimplementation create-socket (host port &key backlog)",138],["(defimplementation local-port (socket)",205],[":local-port local-port",79],["(defun socket-listen (host port",75],["(defmethod get-peer-port ((usocket stream-usocket))",72]],"useCount":6247},{"word":"pos","context":[["(lambda (start-pos)",379],["(if pos",330],["(declare (type fixnum start-pos))",227],["pos)))",154],["(when pos",142],["#'(lambda (pos)",114],["(declare (fixnum pos)",104],["pos",90],["pos)",90],["when (or (null pos)",88]],"useCount":12000},{"word":"position","context":[["(when position",71],["or the next unmatched position when there's a match.",70],["(if position",69],["(source-path-string-position",63],["(progn (file-position s :start)",54],["position)",54],["(defimplementation swank-compile-string (string &key buffer position filename",162],["(*buffer-start-position* position)",80],["(*buffer-start-position* position)",80],["(defvar *buffer-start-position*)",74]],"useCount":10022},{"word":"power","context":[["(power '$%e",66],["\"The number of consecutive hours that this Device has been powered, since its last power cycle.\")",118],["(:DESCRIPTION \"The power state to set.\")",118],["(power",96],["(power '$%e (mul -1 z))",88],["(power var (div 1 2))",72],["(power '$%pi '((rat simp) 1 2))",53],["(power z index)",56],["(power (power '$%e",60],["(power (power '$%e",60]],"useCount":2157},{"word":"pprint","context":[["(pprint-indent :block 2)",73],["(pprint-indent :current 2)",72],["(pprint-logical-block",128],["(pprint-logical-block (nil nil)",251],["(pprint-newline :mandatory)",95],["(pprint-logical-block (stream nil)",93],["(pprint-newline :fill)",320],["(pprint-exit-if-list-exhausted)",371],["(pprint-indent :current 0)",76],["(loop (pp* (pprint-pop))",82]],"useCount":3822},{"word":"pred","context":[["(let ((s358 (list mem loc pred)))",184],["(let ((s0 (list mem loc pred)))",812],["(let ((s39 (list mem loc pred)))",89],["(let ((s43 (list mem loc pred)))",93],["(let ((s50 (list mem loc pred)))",107],["(let ((s86 (list mem loc pred)))",107],["(let ((s87 (list mem loc pred)))",128],["(@__ieee754_pow-%358-pred s358))))",177],["(equal (@__ieee754_pow-%358-rev mem loc pred)",178],["(declare (ignore pred))",1645]],"useCount":15898},{"word":"predicate","context":[["(declare (type function predicate))",29],["(predicate",30],["predicate sequence start end key)",32],["(:predicate lcons?))",33],[":named :predicate)",38],["(:predicate nil)",38],["predicate",45],["(:predicate nil))",51],[":predicate #1#",93],[":predicate (lambda (p)",170]],"useCount":1752},{"word":"prefix","context":[["(type (or prefix null) prefix))",52],[";; First skip a prefix indicated by start",72],[";; skip a prefix indicated by start",96],["(flet ((common-prefix (s1 s2)",53],["(with-path-prefix",54],[":prefix prefix",86],["prefix",55],["(pprint-logical-block (nil nil :prefix \"(\" :suffix \")\")",56],["(multiple-value-bind (result last rest) (copy-prefix 'remove list start)",72],[":prefix prefix",86]],"useCount":3453},{"word":"pretty","context":[["(*print-pretty* nil))",66],["(if *print-pretty*",52],["(let ((*print-pretty* t))",69],["(pretty-string",83],["(let ((*print-pretty* t)",97],["(*print-pretty* nil)",112],["(let ((*print-pretty* nil))",150],["(*print-pretty* t)",51],["(let* ((*print-pretty* nil)",51],["(let ((*print-pretty* nil)",44]],"useCount":1787},{"word":"previous","context":[["(setq *previous-compiler-condition* condition)",63],["(defvar *previous-compiler-condition* nil",63],[";;; which the previous approach using",34],["(unless (or (eq condition *previous-compiler-condition*))",33],["Return nil if there's no previous object.\"",33],["\"Inspect the previous object.",33],["next previous)",32],["(cond ((istate.previous *istate*)",32],["(setq *istate* (istate.previous *istate*))",32],["(unless (eq condition *previous-compiler-condition*)",30]],"useCount":1908},{"word":"princ","context":[["(princ-to-string condition)))",51],[":message (princ-to-string condition)",44],["(princ \"\\n*** NOT AN RFL ALIGNMENT BLOCK ***\")",45],["(t (list :error (princ-to-string c))))))",47],["(princ \" \")",49],["(princ)",390],["(dolist (a args) (princ a s))))",54],["(princ-to-string",58],["(princ \"\\n\" OUTFILE)",63],["(princ))",77]],"useCount":3528},{"word":"print","context":[["(print-warning",197],["(print '-)",209],["(print-unreadable-object (object stream :type t :identity t)",287],["(defimplementation print-frame (frame stream)",195],["(let ((*print-readably* nil))",186],["(print-unreadable-object (object stream :type t)",171],["(let ((*print-pretty* nil))",150],["(print",144],["(*print-readably* nil)",136],["(if *print-escape*",121]],"useCount":13998},{"word":"probe","context":[["(let ((true1 (probe-file filename))",54],["(when (probe-file path)",56],["(cond (probe (throw (car probe) (eval-in-frame form index)))",63],["(cond (probe (throw (car probe) (eval-in-frame form index)))",63],["(cond (probe (setf (cdr probe) thread))",61],["(cond (probe (setf (cdr probe) thread))",61],["(let ((probe (assoc name alist)))",61],["(cond (probe",59],["(true2 (probe-file *buffer-tmpfile*)))",54],["(when (probe-file quicklisp-init)",52]],"useCount":2540},{"word":"process","context":[["mp:*current-process*)",107],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343],["(mp:process-kill thread))",90],["(declare (ignore process))",79],["(mp:process-name thread))",114],["(process",74],["(defun process-fspec (fspec)",63],["(process-all fun cbuf)",57],["Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.\")",336],["Shutting Down (4) indicates that the element is in the process of going to a Disabled state.",336]],"useCount":8573},{"word":"profile","context":[["(defimplementation profile-reset ()",151],["#:profile-reset",34],["color-profile",36],["(sb-profile:unprofile)",37],["(defimplementation profile (fname)",151],["(defimplementation profile-report ()",151],["(defimplementation profile-package (package callers methods)",90],["(sb-profile:reset)",44],["(defimplementation profile-package (package callers-p methods)",40],["(sb-profile:report))",38]],"useCount":2386},{"word":"prog1","context":[["`(multiple-value-prog1",32],["(prog1",1638],["(multiple-value-prog1",441],["(prog1",130],["(prog1 t",83],["(multiple-value-prog1",78],["(prog1 nil",67],["`(prog1",51],["(multiple-value-prog1 (progn ,@body)",50],["(prog1 (progn ,@body)",37]],"useCount":3062},{"word":"progn","context":[["`(progn ,@body)))",138],["finally (progn",109],["(progn ,@body)))",141],["`(progn ,@body))",166],["(unwind-protect (progn ,@body)",269],["do (progn",599],["(progn ,@body)",711],["(progn",3544],["`(progn",5660],["(progn",22867]],"useCount":38380},{"word":"program","context":[["((:name |program| :type |UInt32| :direction :in)",604],["((:name |program| :type |UInt32| :direction :in)) :category \"VERSION_2_0\"",80],["program",96],["program-error)",130],["(error-of-type 'ext:source-program-error",143],["along with this program.",153],["(error 'program-error",219],["(error-of-type 'source-program-error",253],["program-error)",569],["(program uint)",936]],"useCount":6108},{"word":"progress","context":[["(update-progress progress-bar",19],["(handler-bind ((cbuf-progress #'update))",19],["(define-condition cbuf-progress ()",19],["(update-progress progress-bar",19],["(cbuf-progress-size condition))))",19],["(finish-display progress-bar)))",19],["(setf (last-update-time progress-bar) (get-internal-real-time))",45],["(signal 'cbuf-progress :size (- end start))",19],["#:update-progress",20],["(:export #:make-progress-bar",20]],"useCount":1919},{"word":"prompt","context":[["(check-type prompt string) (check-type initial-value (or null string))",30],["(defun package-string-for-prompt (package)",34],[":prompt ,(package-string-for-prompt *package*))",34],["Return the full package-name and the string to use in the prompt.\"",34],["(list (package-name p) (package-string-for-prompt p))))",34],[":prompt ,(package-string-for-prompt *package*))",34],["(format *standard-output* prompt)",41],["(defun raw-input (prompt)",41],["(defun mal-readline (prompt)",43],["prompt",164]],"useCount":1913},{"word":"property","context":[["The form is to be used as the `common-lisp-indent-function' property",38],["A Null return indicates the implementation (provider) does not implement this property.",1251],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\"The Description property provides a textual description of the object.\"))",799],["(setf result (list* property value result)))))",175],["(maybe-push (property value)",175],["\"ErrorCleared is a boolean property indicating that the error reported in LastErrorCode is now cleared.\"))",118],[":length (make-property :value 1))",91],["\"Return a property list describing SYMBOL.",61],[":length (make-property :value 0))",40]],"useCount":6246},{"word":"protect","context":[["(unwind-protect (progn",27],["(unwind-protect",4883],["(unwind-protect (funcall function)",51],["(unwind-protect-case ()",52],["(unwind-protect",127],["`(unwind-protect",139],["(unwind-protect (progn ,@body)",269],["(unwind-protect (funcall fun)",30],["Execute any clean-up code from unwind-protect forms above the frame",27],["(let ((client (unwind-protect",26]],"useCount":5837},{"word":"protocol","context":[["(roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))",54],["(defun socket-connect (host port &key (protocol :stream) (element-type 'character)",54],[":protocol :tcp",58],["(cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))",59],[":type :stream :protocol :tcp)))",39],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)",254],["(roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)",254],["(ecase protocol",98],[":protocol :tcp)))",88]],"useCount":2418},{"word":"provided","context":[[";;;     provided with the distribution.",876],[";;; terms of your choice, provided that you also meet, for each linked",487],[";;; documentation and/or other materials provided with the distribution.",171],[";;     and/or other materials provided with the distribution.",157],[";;    documentation and/or other materials provided with the distribution.",145],[";;;;     provided with the distribution.",136],[";;;    documentation and/or other materials provided with the distribution.",94],[";;    the documentation and/or other materials provided with the",86],[";;;;    documentation and/or other materials provided with the distribution.",80],[";; purpose with or without fee is hereby granted, provided that the above",60]],"useCount":3525},{"word":"ptr","context":[["(with-psdoc-ptr (ptr) object",73],["(opr::vec-ptr-index  first2)",151],["(opr::vec-ptr-index  last)",83],["(opr::vec-ptr-index  last1)",92],["(ptr :pointer)",99],["(declare (type maddress ptr)",109],["(opr::vec-ptr-index  result)",130],["(opr::vec-ptr-buffer first1)",131],["(opr::vec-ptr-index  last2)",77],["(win window-ptr)",110]],"useCount":3771},{"word":"push","context":[["(emit-push-current-thread)",116],["do (push",145],["push\teax",127],["(maybe-push",748],["(push",635],["push\tebp",228],["(maybe-push (property value)",175],["push    ebp",158],["(emit-push-nil)",88],["(push mb *mailboxes*)",89]],"useCount":11851},{"word":"q","context":[["q))",45],["(tail (member-if test q)))",179],["(let* ((q (mailbox.queue mbox))",145],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["collect (list i x q r)))",80],["(nconc (ldiff q tail) (cdr tail)))",47],["q-%offset%)",63],["q)",63],["(equal (run* (q)",47],["((null q))",54]],"useCount":2895},{"word":"query","context":[["(query)",90],["query)",46],["query",49],["thematic-substrate::original-query",52],["(fresh-line *query-io*)",79],[":query query",71],["(query",93],["(finish-output *query-io*)",52],["(force-output *query-io*)",58],[":query query",71]],"useCount":2730},{"word":"queue","context":[["(let* ((q (mailbox.queue mbox))",145],["(invoke-or-queue-interrupt",128],["(queue '() :type list))",159],["(nconc (mailbox.queue mbox) (list message)))",119],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["queue)",58],["(with-event-queue-internal (display)",48],["(nconc (mailbox.queue mbox) (list message))))))",44],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["(setf (mailbox.queue mbox)",201]],"useCount":2885},{"word":"quit","context":[["(defimplementation quit-lisp ()",205],["(sdl2:push-event :quit)))",41],["(:quit-event () t)",171],["(quit)",120],["(sdl:push-quit-event)))",56],["#:quit-lisp",51],["(:quit-event ()",50],["(ext:quit))",50],["(:quit () t)",46],["(quit))",44]],"useCount":2277},{"word":"r","context":[["(return r)))",86],["r)))",87],["r)",121],["r))",152],["#+:packaged-actr (in-package :act-r)",156],["collect (list i x q r)))",80],["(r float)",71],["(\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\"",64],["#'(lambda (r)",59],["(r :uint8)",54]],"useCount":5781},{"word":"random","context":[["(make-random-state",177],["for i = (- (random (+ x x)) x)",182],[":random-state",179],["(loop for x = (ash 1 (+ 2 (random 80)))",173],["for mincol = (random 30)",88],["(setf *random-state* (make-random-state t))",78],["(setf *random-state* (make-random-state t))",78],[":valid-new-expresion-function 'create-new-random-valid",63],["#S(random-state",56],[":random-state (make-random-state",56]],"useCount":2675},{"word":"range","context":[["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",69],[":TYPE \"range\" :OBJ T)",66],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",69],["(__pointer-check-iterator-range first2 last2)",138],["(__pointer-check-iterator-range first last)",143],["(__pointer-check-iterator-range first1 last1)",172],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T) (:TYPE \"range\" :OBJ T)",184],["(:TYPE \"range\" :OBJ T)",212]],"useCount":2577},{"word":"rat","context":[["((mtimes) ((rat) -1 2)",50],["((rat) -1 2))",50],["(power '$%pi '((rat simp) 1 2))",53],["((rat) -1 2)))",60],["((rat simp) -1 2))",65],["((rat simp) 1 2))",85],["((rat) 1 2)",47],["((mexpt) $%pi ((rat) -1 2))",90],["((rat) 1 2)))",40],["(add order '((rat simp) 1 2)))",40]],"useCount":1828},{"word":"read","context":[["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))",339],["(cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))",294],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))",413],["(cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))",413]],"useCount":23487},{"word":"reader","context":[["(when (boundp 'excl:*warn-on-nested-reader-conditionals*)",54],["(symbol `(,name (,(reader name) ,tmp)))",49],["(multiple-value-bind (vars vals store-vars writer-form reader-form)",44],[":reader name",72],["((text :initarg :text :reader text)))",77],["((core :initform t :reader core-typep)",126],["(:reader (in)",132],[":reader header",255],["(cons `(,(first name) (,(reader (second name)) ,tmp)))",49],["(serror 'simple-reader-error stream",48]],"useCount":4991},{"word":"readtable","context":[["readtable)",83],["(setf (readtable-case *readtable*) :preserve)",111],["(setf (readtable-case *readtable*) :preserve)",111],["(in-readtable :qtools)",119],["(*readtable* (copy-readtable nil)))",193],["(setf *readtable* (copy-readtable nil)))",494],["(setf *readtable* (copy-readtable nil)))",494],["(let ((*readtable* (copy-readtable nil)))",202],["(*readtable* (copy-readtable nil)))",193],["(let ((*readtable* (copy-readtable nil)))",202]],"useCount":5769},{"word":"real","context":[["(let* ((start (get-internal-real-time))",50],["(cdr (real-value b))))",49],["(cdr (real-value b))))))",91],["(maxima::fpplus (cdr (real-value a))",63],["(maxima::fpdifference (cdr (real-value a))",63],["(let ((now (get-internal-real-time)))",61],["okra-real",59],[":real (maxima::bcons",287],["(vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)",54],["(vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)",54]],"useCount":4239},{"word":"record","context":[["\"A ring buffer to record events for better error messages.\")",34],["sb-win32::input-record-size",30],["append (let ((slot (alien::alien-record-field-name field)))",29],["(alien::alien-record-type (inspect-alien-record alien))",29],["(buf (array char #.sb-win32::input-record-size)))",30],["#:*record-repl-results*",34],[";;   *record-source-file* is true).",36],["record)",44],["(defmethod* (setf output-record-position) :around",45],["record",150]],"useCount":1943},{"word":"ref","context":[["'(ref -1)))",39],["(unless (null-pointer-p (ref-pointer location offset))",42],["ref)",40],["!eval! (increase-ref-count-parseloc)",81],["(mem-ref p type)))",80],["(defun %mem-ref (ptr type &optional (offset 0))",50],["#:%mem-ref",50],["(declare (ignore ref))",44],["(setf (mem-ref s :char) 0)",44],["(declare (ignore type ref))",43]],"useCount":2327},{"word":"reg","context":[["reg-starts reg-ends)))",36],["reg-starts reg-ends)))",36],["(ash (register-number reg) +rt-shift+)))",56],["(load-in-reg :r8 object t)",38],["(load-in-reg :r9 object t)",38],["(modrm-byte (make-modrm-byte mod reg rm)))",82],["(load-in-reg :r10 offset t)",37],["(load-in-reg :r9 offset t)",33],["(and reg-start",34],["(mod-reg-rm-byte-single op)",35]],"useCount":2095},{"word":"regex","context":[["(throw 'regex-parse-error",39],["(typecase regex",69],["#-:debug-regex(declare (optimize (speed 3) (safety 0) (space 0) (debug 0)",105],["((regex :initarg :regex",46],[":accessor regex",45],["((regex :initarg :regex",46],["(cond ((constantp regex env)",63],["(if (case-insensitive-p regex)",48],[";; create a closure to match the inner regex and to",40],["(cl-ppcre:regex-replace-all",50]],"useCount":1916},{"word":"register","context":[["(ash (register-number base) +rn-shift+)",49],["(let* ((*register* *register*)",40],["(let* ((*register* *register*)",40],["(when value-register",44],["(inst :mov thread-register :rdi)",45],["(ash (register-number reg) +rt-shift+)))",56],["(clear-register-contents)",45],["(*register* *register*)",52],["(defimplementation register-thread (name thread)",61],["(*register* *register*)",52]],"useCount":3172},{"word":"registry","context":[["'\"ECMA registry\" :comments 'nil :references '(\"[RFC1345,KXS2]\")",58],["`(:source-registry",52],["(setf asdf:*central-registry*",51],["asdf:*central-registry*)",45],["(inherit-source-registry inherit :register register))",36],["(defun sysdef-central-registry-search (system)",29],["(dolist (dir *central-registry*)",34],["((:default-registry)",35],[":source '\"ECMA registry\" :comments 'nil :references",36],["*central-registry*)",39]],"useCount":3108},{"word":"relative","context":[["(list :relative))",55],[":directory '(:relative \"Pattern metrics\")",63],[":directory '(:relative \"Maths foundation\")",63],[":directory '(:relative \"File conversion\")",390],["'(:relative \"occurrences\" \"lisp\") :name *fname*",168],["'(:relative",109],["'(:relative \"occurrences\" \"csv\") :name *fname*",84],[":directory '(:relative \"Pattern rating\")",84],["(declare (ignore relative-to))",54],["'(:relative \"occurrences\" \"midi\") :name *fname*",84]],"useCount":3793},{"word":"remaining","context":[["do (setf (cdr last) (cons (car remaining) (cdr remaining)))",162],["(setf remaining (cdr remaining))",128],["do (setf (cdr last) (cons (car remaining) (cdr remaining)))",162],["for element = (car remaining)",169],["(loop until (endp remaining)",194],["(setf remaining (cdr remaining))",128],["until (endp remaining)",97],["until (or (atom remaining) (>= index end))",72],["(let* ((remaining list)",96],["until (atom remaining)",83]],"useCount":3628},{"word":"remove","context":[["(multiple-value-bind (result last rest) (copy-prefix 'remove list start)",72],["(remove-if-not",213],["remove-empty-subseqs) ; empty subseq we don't want",68],["(remove-if #'(lambda (x)",75],["(remove-if #'null",75],["(defun %remove-waiter (wait-list waiter)",84],["(remove-waiter (wait-list usocket) usocket))",127],["(remove-duplicates",657],["(remove-if",194],["(remove nil",174]],"useCount":6251},{"word":"repeat","context":[["(loop repeat count",46],["repeat 1000",563],["repeat 100",137],["(setq repeat-matcher",96],["(loop repeat n",94],["(loop repeat start",80],["(funcall repeat-matcher start-pos)",64],["(type function repeat-matcher))",60],["(incf (aref *repeat-counters* rep-num))",48],["repeat 10000",42]],"useCount":2451},{"word":"report","context":[[":report",87],[":report (lambda (s)",109],[":report (lambda (stream)",124],["(:report (lambda (c stream)",146],["(defimplementation profile-report ()",151],["(defmethod acclimation:report-condition",177],["(:report",361],["(:report (lambda (c s)",468],["(:report (lambda (condition stream)",1097],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417]],"useCount":4706},{"word":"representation","context":[["(fix-boxing representation nil)",159],["(emit-move-from-stack target representation))",274],["(emit-push-false representation)",43],["(ecase representation",48],["(case representation",50],["(emit-move-from-stack target representation)",60],["(compile-function-call form target representation)",60],["(compile-function-call form target representation))))",76],["(compile-function-call form target representation)))))",94],["(emit-move-from-stack target representation)))",116]],"useCount":1838},{"word":"request","context":[["(with-retry-restart (:msg \"Retry SLIME inspection request.\")",64],["2\t2\t\t\trequest-length",58],["@see-condition{lastfm-request-error}",51],["(drakma:http-request",49],["(cl-lastfm:request-error-code-of condition))))))",47],["(cl-lastfm:lastfm-request-error (condition)",45],["(with-retry-restart (:msg \"Retry SLIME interactive evaluation request.\")",64],["(with-retry-restart (:msg \"Retry SLIME evaluation request.\")",73],["(with-request :get nil",274],["(2 {request-length})",103]],"useCount":3145},{"word":"requests","context":[["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],[";; requests from Emacs and sending them to the `control-thread'; the",34],["then waits to handle further requests from Emacs. Eventually returns",34],[";;; Suggestions, comments and requests for improvements are also welcome.",58],["(handle-requests connection t))",67],["Send comments or requests to: prodigy@cs.cmu.edu or The PRODIGY PROJECT,",90],["Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.\")",336],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["\"Read and process all requests on connections.\"",34],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336]],"useCount":2392},{"word":"require","context":[["(require \"comm\"))",37],["(require 'sb-posix)",50],["(require 'sockets))",67],["(require :cllib-base (translate-logical-pathname \"clocc:src;cllib;base\"))",42],["(require-same-dimensions bit-array-1 bit-array-2)",40],["(require 'asdf)",76],["(require :asdf)",122],[";;; code in this file is purely portable Common Lisp. We do require a",34],["(require :sb-posix)",34],["(require :sock)",34]],"useCount":2192},{"word":"required","context":[["(defun required-arguments (name)",41],["(error \"A required &KEY or &OPTIONAL argument was not supplied.\"))",35],[":required-args (list (make-arglist",36],[":required-args (list typespec-arglist)",36],["(parse-all-required lambda-list",40],["(:DESCRIPTION \"The required completion time for the method.\"))",42],["(:required",48],["(setf (required result)",52],["((required-by :initarg :required-by :reader missing-required-by)))",34],["FORM is expected, but not required, to be SETF'able.\"",34]],"useCount":2752},{"word":"res","context":[["(if res",66],["(setq res",86],["(when res",86],["res))))",99],["(let ((res",131],["(let ((res nil))",168],["res",213],["res)))",224],["res))",525],["res)",542]],"useCount":4518},{"word":"resolve","context":[["(defun resolve-hostname (name)",73],["(setq next (resolve-instr link-info next))) ))",83],["(resolve-relative-location",52],["(resolve-absolute-location",44],["(with-promise (resolve reject)",36],["(defun resolve-symlinks (path)",33],[";;; Our mission here is to \"resolve\" references to code locations into",29],["(defun resolve-hostname (hostname)",29],["(let ((imm-value (or (resolve-immediate offset) 0)))",27],["This is used to resolve filenames without directory component.\"",27]],"useCount":1750},{"word":"rest","context":[["&rest initargs)",183],["(defimplementation make-weak-key-hash-table (&rest args)",141],["(&rest common-lisp-user::args)",147],["rest (cdras 'u l))",198],["<rest-of-stack>",164],["(lambda (&rest args)",347],["&rest args",275],["#'(lambda (&rest args)",247],["&rest args)",236],["(declare (ignore rest))",202]],"useCount":16903},{"word":"restart","context":[["(restart-case",655],["(restart-case",121],["(defimplementation restart-frame (index)",108],["(defimplementation save-image (filename &optional restart-function)",82],["(when restart",77],["(with-retry-restart (:msg \"Retry SLIME evaluation request.\")",73],["(with-retry-restart (:msg \"Retry SLIME inspection request.\")",64],["(with-retry-restart (:msg \"Retry SLIME interactive evaluation request.\")",64],["(defimplementation restart-frame (frame-number)",61],["(funcall restart-function)))",56]],"useCount":5400},{"word":"result","context":[["(let ((result nil))",377],["(setq result",323],["(let ((result",315],["result))))",401],["result",485],["(let ((result '()))",494],["result)",716],["result)))",981],[":result-type :void",1201],["result))",2049]],"useCount":28800},{"word":"results","context":[["results)",122],["results))",120],["(let ((results '()))",78],["(xref-results (,function name))))",74],["results)))",61],["(combine-results",52],["The results is a list ((DSPEC LOCATION) ...).\"",46],["(filter-logical-directory-results",44],["(push (clsql:in-transaction-p) results)",44],["(let ((results nil))",43]],"useCount":2181},{"word":"ret","context":[["(multiple-value-bind (ret-val var-0)",57],["ret-val))",59],["(%ret nil))",47],["(ssl-error-ret condition))",42],["(sys.lap-x86:ret)",60],["(mem (alloca-double 'ret 1 mem))",74],["ret)))",76],["ret))",110],["(sys.lap-x86:ret))",127],["ret",525]],"useCount":2350},{"word":"return","context":[[":return-values",315],["A return code of 0 shall indicate the state change was successfully initiated.",344],["(return nil))))",381],["(return))))",389],["(return nil)))",390],["(return)))",508],["(return nil))",809],["(return))",1816],["A Null return indicates the implementation (provider) does not implement this property.",1251],["(return",1365]],"useCount":33536},{"word":"rev","context":[["(equal (@__ieee754_pow-%622-rev mem loc pred)",82],["(equal (@__kernel_tan-%86-rev mem loc pred)",84],["(equal (@__ieee754_pow-%358-rev mem loc pred)",178],["(equal (@__ieee754_pow-%0-rev mem loc pred)",72],["(equal (@__ieee754_acos-%130-rev mem loc pred)",69],["(equal (@cbrt-%50-rev mem loc pred)",64],["(equal (@atan-%87-rev mem loc pred)",56],["(equal (@__ieee754_log-%113-rev mem loc pred)",55],["(equal (@__ieee754_acos-%83-rev mem loc pred)",55],["(equal (@__kernel_rem_pio2-%0-rev mem loc pred)",49]],"useCount":4042},{"word":"right","context":[["(*print-right-margin* 100)",81],["(multiple-value-bind (top left right bottom)",39],["(let ((*print-right-margin* most-positive-fixnum))",35],["(string-right-trim",45],["@item :top-right",38],["@item :bottom-right",38],["(multiple-value-bind (width ascent descent left right",36],["(multiple-value-bind (top left bottom right)",35],["(destructuring-bind (top left right bottom) bounding-box",35],["(*print-right-margin*     . 200)",33]],"useCount":3037},{"word":"rol64","context":[["b3 (logxor (rol64 b3 9) b2))",20],["b5 (logxor (rol64 b5 23) b14))",20],["b5 (logxor (rol64 b5 31) b8))",20],["b7 (logxor (rol64 b7 20) b12))",20],["b7 (logxor (rol64 b7 33) b0))",20],["b15 (logxor (rol64 b15 34) b12))",20],["b9 (logxor (rol64 b9 52) b4))",20],["b11 (logxor (rol64 b11 20) b2))",20],["b13 (logxor (rol64 b13 22) b12))",20],["b1 (logxor (rol64 b1 46) b6))",20]],"useCount":2144},{"word":"role","context":[["(if (not role)",29],["(ensure-role-is-known role-term tbox)",21],["role)",22],["role))",28],["(let ((role response))",29],["thematic-substrate::initial-role-assertion-mirroring-p",33],["(check-role-term role-term)",33],["(check-role-term role-term)",33],["role",86],["(has-social-role philosopher)))",404]],"useCount":1643},{"word":"root","context":[["*lisp-code-root*))",552],["(with-all-frames (*root-frame* frame)",51],["(let ((root (screen-root screen)))",50],[";;; in the root directory for further information.",61],["(root",64],["*lisp-code-root* \"/File conversion\"",81],["; in the root directory of this project.",134],["*music-data-root*))",173],["(let ((root (screen-root screen)))",50],["(setf (component-root-dir component pathname-type)",40]],"useCount":4473},{"word":"ror64","context":[["(setf b1 (ror64 (logxor b1 b8) 52)",20],["(setf b11 (ror64 (logxor b11 b2) 20)",20],["(setf b13 (ror64 (logxor b13 b14) 41)",20],["(setf b9 (ror64 (logxor b9 b10) 25)",20],["(setf b9 (ror64 (logxor b9 b10) 17)",20],["(setf b3 (ror64 (logxor b3 b2) 9)",20],["(setf b7 (ror64 (logxor b7 b12) 20)",20],["(setf b3 (ror64 (logxor b3 b4) 47)",20],["(setf b15 (ror64 (logxor b15 b12) 19)",20],["(setf b13 (ror64 (logxor b13 b12) 44)",20]],"useCount":2144},{"word":"roslisp","context":[["(cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits))))))",52],["(cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))",82],["(cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))",118],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))",62],["(roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)",254],["(roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))",54],["(roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)",254],["(cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))",59],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))",56]],"useCount":1852},{"word":"rtoy","context":[[";;;  \"f2cl2.l,v 1.37 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;; (\"f2cl1.l,v 1.215 2009/04/07 22:05:21 rtoy Exp $\"",315],[";;;  \"macros.l,v 1.112 2009/01/08 12:57:19 rtoy Exp $\")",317],[";;;  \"f2cl3.l,v 1.6 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;;  \"f2cl4.l,v 1.7 2008/02/22 22:19:34 rtoy Exp $\"",372],[";;;  \"f2cl6.l,v 1.48 2008/08/24 00:56:27 rtoy Exp $\"",372],[";;;  \"f2cl3.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",473],[";;;  \"f2cl2.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",459],[";;;  \"f2cl4.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",473],[";;;  \"f2cl6.l,v 1d5cbacbb977 2008/08/24 00:56:27 rtoy $\"",473]],"useCount":4481},{"word":"run","context":[["(defun run ()",89],["(defun run-tests ()",108],["(odysseus-snark::*run-time-limit* . 0.2)",233],["(nvhdf-run (lambda (nvm)",57],["(ext:run-program",51],["(:export #:run-tests))",49],["(run-actions install-actions)",49],["(equal (run* (q)",47],["(sb-ext:run-program",67],["(odysseus-snark::*ida-run-time-limit* . 0.1)",233]],"useCount":4515},{"word":"s","context":[["s",179],["s))",256],["(:report (lambda (c s)",468],["(with-output-to-string (s)",1065],["s)",212],["(loop for s in",166],["(lambda (s)",152],["s)))",202],["(lambda (type s)",193],["(:KEY (:DESCRIPTION \"The scoping System's Name.\")",150]],"useCount":26621},{"word":"s0","context":[["(@__ieee754_log-%0-pred s0))))",28],["(@__ieee754_hypot-%0-pred s0))))",34],["(@__ieee754_atan2-%0-pred s0))))",43],["(caddr s0))",39],["(cadr s0))",39],["(@__kernel_rem_pio2-%0-pred s0))))",48],["(@__ieee754_sqrt-%0-pred s0))))",28],["(let ((s0 (list mem loc pred)))",812],["(@__ieee754_pow-%0-pred s0))))",71],["(car s0))",39]],"useCount":1729},{"word":"s1","context":[["(eql (elt s1 (incf j)) (elt s2 i))))))",55],["(flet ((common-prefix (s1 s2)",53],["(let ((diff-pos (mismatch s1 s2)))",53],["(eql (elt s1 0) (elt s2 0))",55],["collect (list i mincol s1 s2 pos)))",60],["(let* ((s1 (make-array nil :initial-element 1 :element-type 'bit))",61],["(if diff-pos (subseq s1 0 diff-pos) s1))))",53],["unless (string= s1 s2)",79],["for pos = (search s1 s2)",88],["(and (> mincol (length s1))",88]],"useCount":2105},{"word":"s2","context":[["do (assert (string= s s2))",66],["(or (/= (length s2) mincol)",88],["(eql (elt s2 i) commachar)",66],["for pos = (search s1 s2)",88],["(let ((len (length s2))",66],["collect (list i mincol s1 s2 pos)))",60],["(eql (elt s1 (incf j)) (elt s2 i))))))",55],["unless (string= s1 s2)",79],["(values s s2))",75],["for s2 = (formatter-call-to-string fn i)",69]],"useCount":2494},{"word":"safe","context":[["(list (safe-condition-message *swank-debugger-condition*)",33],["(defun safe-condition-message (condition)",34],["(with-safe-io-syntax ()",60],["(safe-definition-finding",58],["(with-safe-io-syntax (:package package)",49],["(:policy :fast-safe)",84],["(defun safe-length (list)",36],["(escape-non-ascii (safe-condition-message condition) )",34],["(multiple-value-bind (length tail) (safe-length list)",34],["(opengl:gl-vertex2-f (safe-float-coerce a) (safe-float-coerce b))",33]],"useCount":1814},{"word":"safety","context":[["(declare (optimize (speed 3) (safety 0)))",351],["#+:lispworks (hcl:fixnum-safety 0)))",334],["#+ (or ccl ecl gcl) (declare (optimize (speed 3) (safety 0)))",307],["(safety 0)",265],["(optimize (speed 3) (safety 0)))",188],["(declare (optimize speed (safety 0)))",122],["(declare (optimize (debug 0) (safety 0) (speed 3)))",113],["#-:debug-regex(declare (optimize (speed 3) (safety 0) (space 0) (debug 0)",105],["(optimize (speed 3) (safety 0) (space 0) (debug 0)))",105],["(declare (optimize (speed 3) (safety 0) (debug 0)))",92]],"useCount":4068},{"word":"same","context":[["\"Return true if PTR1 and PTR2 point to the same address.\"",45],[":test #'same-declaration)))",50],[":test #'same-declaration))",63],["\"Return true if the frame pointers of FRAME1 and FRAME2 are the same.\"",29],[";; Convert both arguments to the same kind of float.",31],[":test #'same-declaration)",31],[";; basically the same",32],["(require-same-dimensions bit-array-1 bit-array-2)",40],["(ensure-same",203],["\"Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,",42]],"useCount":1727},{"word":"save","context":[[":name \"midi-save\"",101],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],["(setf (hostname url) (save))",38],["(defimplementation background-save-image (filename &key restart-function",28],["(pushnew 'deinit-log-output sb-ext:*save-hooks*)",28],["(apply #'sb-ext:save-lisp-and-die filename",56],["(defimplementation save-image (filename &optional restart-function)",82],["(save-excursion",165],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls nil)",112],["\"/midi-save.lisp\"))",27]],"useCount":2699},{"word":"sb","context":[["#+sb-thread",62],["(sb-alien:alien-sap",62],["(let ((sb-int:*print-condition-references* nil))",72],["(sb-thread:with-mutex (*thread-id-map-lock*)",68],["(let ((maybe-thread (sb-ext:weak-pointer-value thread-pointer)))",68],["(sb-ext:run-program",67],["'debug-source-name 'sb-di)",64],["(sb-thread:with-mutex (mutex)",120],["sb-alien:int",111],["(let ((pid (sb-posix:fork)))",62]],"useCount":14575},{"word":"sbcl","context":[["#-sbcl",193],["#+sbcl",1586],["#+(or cmu sbcl)",122],["#+:sbcl",99],["#+#.(swank-backend::sbcl-with-weak-hash-tables)",66],["#-(or cmu sbcl)",46],["#-(or lispworks sbcl openmcl cmu allegro)",53],["(list :toplevel #'restart-sbcl))))",56],["(flet ((restart-sbcl ()",56],["#+#.(swank-backend::sbcl-with-new-stepper-p)",63]],"useCount":5920},{"word":"scanner","context":[[":scanner scanner",38],["(scanner-current-token scanner)",150],["(scanner-current-token scanner)",150],["scanner",110],["scanner))",80],["(scanner)",74],["(cl-ppcre:create-scanner",44],["(re-scanner-end scanner)))",33],[":scanner scanner",38],["(t (ungetchar scanner)",34]],"useCount":1762},{"word":"screen","context":[["(loop for s in *screen-list*",42],["(let* ((screen (current-screen))",45],[":colormap (xlib:screen-default-colormap *screen*)",49],["(let ((screen (group-screen group)))",43],["(let ((screen (group-screen group)))",43],["(let* ((screen (current-screen))",45],["(let ((root (screen-root screen)))",50],["(let ((root (screen-root screen)))",50],["screen",50],[":colormap (xlib:screen-default-colormap *screen*)",49]],"useCount":8514},{"word":"sdl","context":[["(sdl:clear-display sdl:*black*)",111],["(sdl:update-display))))))",58],["(in-package #:lispbuilder-sdl)",63],["(sdl:update-display))",97],["(sdl:with-events ()",192],["(sdl:with-init ()",147],["(sdl:clear-display sdl:*black*)",111],["(sdl:push-quit-event)))",56],["(:video-expose-event () (sdl:update-display))",52],["(sdl:update-display)",109]],"useCount":4138},{"word":"search","context":[["(search",70],["for pos = (search part string",43],["\"Make an apropos search for Emacs.",34],["\"A list of directories to search for modules.\")",34],[";;; with C-c C-c, we have to search the position in the source string.",34],["(search pattern (string symbol) :test chr=))))",33],[";;; find. We search for definitions of every kind and return them in a",29],["(defun sysdef-central-registry-search (system)",29],[":subject (default-object-in-search",153],["for pos = (search s1 s2)",88]],"useCount":1968},{"word":"second","context":[["((:defun :defgeneric) (second fspec))",84],["internal-time-units-per-second))",87],["(/ (second (get-option '$dimensions)) 100.0)",88],["(round (second (get-option '$dimensions)))",100],["(leave-second-mode)))",63],["((taylorize (mop expr) (second expr)))",68],["((taylorize (mop form) (second form)))",69],["(second",73],["(second u))",110],["(leave-second-mode))",206]],"useCount":5534},{"word":"self","context":[["(push-token self current-token)",78],["self)",411],["(self :pointer)",173],["(self :pointer))",148],["self",133],["self))",83],["(declare (ignorable self))",79],["(with-fields (inputs) self",70],["(print-unreadable-object (self stream :type t :identity t)",70],["(with-focused-view self",88]],"useCount":4849},{"word":"send","context":[["(send-it))",34],["(defimplementation send (thread message)",198],["(send-to-emacs",69],["(send",63],[";;; (or send Arpanet mail to CommonLoops-Coordinator.pa@Xerox.arpa)",57],["(channel-send channel selector args))))))",38],["(tcp4-send-packet connection",36],["(send-to-emacs `(:return ,(current-thread)",35],["(send-to-emacs `(:background-message",34],["(send-oob-to-emacs `(:ed ,target))))",34]],"useCount":3533},{"word":"seq","context":[["(seq-next iter)",75],["(let ((seq (make-array 10))) (read-sequence seq s) seq)",68],["(let ((seq (make-array 10))) (read-sequence seq s) seq)",68],["((s trivial-gray-stream-mixin) seq &optional start end)",88],["seq))",116],["seq",130],["(unless (apply #'seq-end-p sequence iter rest)",75],["(x (copy-seq orig))",471],["(seq",215],["seq)",152]],"useCount":5216},{"word":"sequence","context":[["(etypecase sequence",346],["((simple-string-p sequence)",98],["((simple-vector-p sequence)",99],["(typecase sequence",112],[":in-sequence list))",205],["(if (listp sequence)",189],["sequence",173],["(card16 sequence)",166],["sequence)",141],["(cond ((listp sequence)",116]],"useCount":9190},{"word":"server","context":[["(let ((*server-timeout* saved-timeout))",132],["#-:racer-server",39],["#:start-server",41],["#:stop-server",42],["(defmethod socket-accept ((usocket stream-server-usocket) &key element-type)",51],[";;;; TCP server",56],["#+:racer-server",92],["(in-package :core-server)",111],["(let* ((saved-timeout *server-timeout*) (*server-timeout* nil))",132],["(let* ((saved-timeout *server-timeout*) (*server-timeout* nil))",132]],"useCount":3200},{"word":"set","context":[["(env:set-env *repl-env*",80],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["(set-up-packages)",76],["(set-difference",111],["(:DESCRIPTION \"The power state to set.\")",118],["\"If set to TRUE then cleanly cease all activity, if FALSE resume activity.\")))",118],["(set-dispatch-macro-character",119],["For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.\"))",146],["(defimplementation set-default-directory (directory)",172],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557]],"useCount":10088},{"word":"setf","context":[["(setf temp",1397],["(cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))",413],["(setf wrkbl",438],["(setf *readtable* (copy-readtable nil)))",494],["(setf (f2cl-lib:fref c-%data%",610],["(setf",700],["(cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))",1100],["(cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))",1100]],"useCount":77464},{"word":"setq","context":[["(setq dp (cdr dp))",126],["(setq C 0)",127],["(setq CMDECHO (getvar \"CMDECHO\"))",161],["(setq l (cdr l))",181],["(setq *scale* 1000)",186],["(setq result",323],["(setq ENT (entnext ENT))",326],["(setq ENTLIST (entget ENT))",457],["(setq",711],["(setq",1752]],"useCount":26495},{"word":"settings","context":[["#.*standard-optimize-settings*)",53],["(settings settings)",44],["(settings settings)",44],["(with-kb-settings (kb)",66],["(with-describe-settings ()",68],["(declare #.*standard-optimize-settings*",73],["(declare #.*optimize-settings*)",123],["(declare #.utils:*standard-optimize-settings*)",149],["(declare #.*standard-optimize-settings*)",1603],["(declare #.*fixnum-optimize-settings*)",74]],"useCount":2906},{"word":"sheet","context":[["(when sheet",41],["(let ((tr (sheet-native-transformation (medium-sheet medium))))",36],["(let ((tr (sheet-native-transformation (medium-sheet medium))))",36],["(with-bounding-rectangle* (x1 y1 x2 y2) (sheet-region pane)",36],["(multiple-value-bind (x1 y1 x2 y2) (bounding-rectangle* (sheet-region pane))",47],["(with-medium-options (sheet args)",71],[":sheet sheet",96],[":sheet sheet",96],["(with-sheet-medium (medium pane)",33],["(with-sheet-medium (medium stream)",34]],"useCount":1902},{"word":"short","context":[["\"The Caption property is a short textual description (one- line string) of the object.\")",824],[":doc ((:doc-type :short)",223],["(v (:pointer short)))",259],["(x short)",135],["jmp     short :done",111],[":returning :short)              ; RETCODE_SQL_API",98],["(y short)",88],["(loop for type in '(short-float single-float double-float long-float)",85],[":final-state   :short",49],[":initial-state :short",49]],"useCount":4064},{"word":"should","context":[["\"Return true if the whole indentation cache should be updated.",34],[";;; should be defined to perform a copy-in/copy-out if the Lisp",41],["(should be true",177],[";;; This code decides how macros should be indented (based on their",34],[";;; Maybe these should be named code-location-file-source-location,",34],[";;; least the names should indicate the main entry point vs. helper",34],["not nil it is a frame number for which the source should be displayed.",34],[";; This should be a thread -> id map but as weak keys are not",34],["Backend code should treat the connection structure as opaque.\")",68],["(should be null",160]],"useCount":3028},{"word":"si","context":[["(multiple-value-bind (shared-initialize-keywords si-aokp)",32],["(si::ihs-env ihs)",30],["si::*ihs-base*",30],["(declare (si::c-local))",246],["si::ihs-fun",30],["'(si::*break-env*",30],["si::set-current-ihs",30],["si::*tpl-commands*",30],["do (let ((i (- (si::frs-ihs f) *ihs-base* 1)))",30],["tok-si",38]],"useCount":1781},{"word":"signal","context":[["(signal-ppcre-syntax-error",52],["(defun sigio-handler (signal code scp)",50],["(defun signal-compiler-condition (&rest args)",51],["(signal-compiler-condition",109],["(signal 'compiler-condition",83],["(signal-error-if-current-thread thread)",77],["(signal-ppcre-syntax-error*",74],["(signal (make-condition",73],["(declare (ignore signal code scp))",65],["(defun signal-compiler-condition (condition context)",63]],"useCount":2325},{"word":"simp","context":[["((mplus simp)",73],["(simp-domain-error",167],["((mexpt simp)",127],["(cons $imetric '(simp))",120],["'((mlist simp))",196],["((rat simp) 1 2))",85],["((apply-reflection-simp (mop form) y $trigsign))",67],["((mplus simp) 1 ((mtimes simp) -1 ,m))",90],["((mplus simp) 1 ((mtimes simp) -1 ,m))",90],["(cons '(mlist simp)",105]],"useCount":5025},{"word":"simple","context":[["(defmethod translate-simple-instruction",75],[":arg-types '((simple-array character (1))",80],["(error 'simple-error",85],["(simple-array double-float (*))",98],["((simple-string-p sequence)",98],["((simple-vector-p sequence)",99],["(simple-array character (1))",116],["(simple no)",136],["(error 'simple-type-error",160],[";;;           (:coerce-assigns :as-needed) (:array-type ':simple-array)",162]],"useCount":7767},{"word":"simplify","context":[["(simplify (list '($beta) a b))",40],["(simplify (list '($pochhammer) (sub 1 a) n)))",40],["(simplify (list '(mfactorial)",40],["(return-from simplify-control-flow-1",39],["(simplify (list '(mfactorial) index)))",48],["(inv (simplify (list '(mfactorial)",60],["(a (simplify (cons '(mplus) (cddr a)))))",72],["(simplify (list '($pochhammer)",98],["(simplify",310],["(simplify (list '($floor)",40]],"useCount":1845},{"word":"single","context":[["(single-float",74],["(single-value-return))",191],["(cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))",118],["(verify-single-explicit-value",112],["(loop for type in '(short-float single-float double-float long-float)",85],["single-line-mode",72],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))",62],["single-float)",59],["(cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))",56],[":element-type 'single-float",55]],"useCount":3807},{"word":"size","context":[["(size int)",298],["(:name |params| :type |Int32| :direction :out :array t :size (|pname|)))",250],["(dotimes (i size)",188],["(:name |params| :type |Float32| :direction :out :array t :size (|pname|)))",176],["(:name |data| :type |CompressedTextureARB| :direction :in :array t :size",144],["(:name |params| :type |CheckedFloat32| :direction :in :array t :size",143],["(:name |value| :type |Float32| :direction :in :array t :size count))",140],["(:name |pixels| :type |Void| :direction :in :array t :size",137],["(:name |length| :type |SizeI| :direction :out :array t :size #x1)",122],["(:name |params| :type |CheckedInt32| :direction :in :array t :size",119]],"useCount":16437},{"word":"sizei","context":[["(width sizei)",651],["(height sizei))",159],["(depth sizei)",166],["(length (:pointer sizei))",149],["(imageSize sizei)",125],["(stride sizei)",254],["(bufSize sizei)",306],["(height sizei)",371],["(n sizei)",388],["(count sizei)",1050]],"useCount":4642},{"word":"sldb","context":[["(defimplementation sldb-break-at-start (fname)",47],["(defvar *sldb-restarts* nil",33],["(defimplementation sldb-step-next ()",33],["#:sldb-break-on-return",34],["#:sldb-step",34],["#:sldb-break",34],["((:sldb frame var)",35],["(setq *sldb-stepping-p* t)",66],["(defvar *sldb-stack-top*)",60],["(defvar *sldb-topframe*)",42]],"useCount":3070},{"word":"slice","context":[["(f2cl-lib:array-slice work-%data% double-float (itaup)",86],["(f2cl-lib:array-slice work-%data% double-float (itauq)",86],["(f2cl-lib:array-slice h-%data%",78],["(f2cl-lib:array-slice work-%data% double-float (itau)",76],["(f2cl-lib:array-slice a",119],["(f2cl-lib:array-slice work-%data% double-float (iwork)",198],["(f2cl-lib:array-slice a-%data%",306],["(f2cl-lib:array-slice work",573],["(f2cl-lib:array-slice work-%data%",1115],["(f2cl-lib:array-slice t$-%data%",118]],"useCount":4805},{"word":"slime","context":[["(without-slime-interrupts",232],["(defvar *slime-features* nil",33],[";; FIXME: *slime-features* should be connection-local",33],["#:invoke-slime-debugger",33],["(defun slime-secret ()",34],["(check-slime-interrupts))",35],["(unless (eq *slime-features* *features*)",33],["(cond ((check-slime-interrupts) (return :interrupt))",61],["(check-slime-interrupts)",220],["(setq *slime-features* *features*)",66]],"useCount":2467},{"word":"slot","context":[["(lambda (slot)",111],["(defun swank-mop:slot-definition-documentation (slot)",123],["#:slot-definition-name",91],["(map-slot-boundp* obj '(a b))",114],["(roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))",254],["(roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)",254],["(roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)",254],["(dolist (slot slots)",157],["slot",148],["(defun swank-mop:slot-definition-documentation (slot)",123]],"useCount":17507},{"word":"slots","context":[["slots)",110],["(with-slots (argument) expr",104],["#:class-direct-slots",98],["slots))",128],[":slots",138],["(dolist (slot slots)",157],["#:class-slots",88],["slots)))",80],["#:compute-slots",57],["(with-slots (operator argument) expr",55]],"useCount":7013},{"word":"snd","context":[["(nvt (pair-snd pair)))",97],["nvs1) :snd nvb)))))))))",38],["(let* ((w (* 2.0 Pi (/ hz (snd-srate x))))",48],["(nvz_ (pair-snd pair)))",65],["(nvz (pair-snd pair)))",78],["(nvb (pair-snd pair)))",82],["(nvc (pair-snd pair)))",98],["(nvzz2 (pair-snd pair)))",114],["(nvzz1 (pair-snd pair)))",114],["(nvy (pair-snd pair)))",138]],"useCount":1659},{"word":"so","context":[[";; Has a slot so that it can be closed with the connection.",33],[";;; furnished to do so, subject to the following conditions:",596],[";;; obligated to do so.  If you do not wish to do so, delete this",458],[";;; obligated to do so.  If you do not wish to do so, delete this",458],[";;;; furnished to do so, subject to the following conditions:",183],[";; furnished to do so, subject to the following conditions:",102],[";;; *PACKAGE* is rebound so that the IN-PACKAGE form can set it during",35],["aborted and return immediately with the output written so far.\"",33],[";; likely represents a version number; so we collect the",33],[";; quite often the modeline displays the window list, so update it",32]],"useCount":4075},{"word":"socket","context":[["(let ((fd (socket-fd socket)))",136],["(defimplementation create-socket (host port &key backlog)",138],[":socket socket",169],[":socket socket",169],["(defimplementation local-port (socket)",205],["(defimplementation close-socket (socket)",205],["(defimplementation close-socket (socket)",205],["(let ((fd (socket-fd socket)))",136],["(etypecase socket",114],["(defimplementation accept-connection (socket",113]],"useCount":12678},{"word":"some","context":[["\"Bind some printer variables and pretty print each object in VALUES.\"",29],["(some #'(lambda (ty)",37],["((or) (some (lambda (p) (event-match-p event p)) (cdr pattern)))",33],["\\\"Minor Failure\\\" (15) - All functionality is available but some might be degraded.",417],["BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof\"",74],["; Set some paths.",60],["(some",53],["considered to represent a symbol internal to some current package.)\"",34],["include some arbitrary initial value like NIL.\"",34],["(:or  (some  #'subfeature-in-list-p (rest feature)))",34]],"useCount":2551},{"word":"sort","context":[["(sort",265],["(sort",98],["(#t(:sort",42],["(sort (mapcar #'symbol-name",40],["(sort (remove-duplicates",39],["(sort strings #'string<)))",35],["(setf content (sort content 'string< :key #'first)))",31],["(setf content (sort content '< :key #'first))))",31],["#t(:sort",28],["(elt (sort-groups screen) n))))",26]],"useCount":1750},{"word":"source","context":[[";;;;   * Redistributions of source code must retain the above",96],["(defimplementation frame-source-location (index)",122],[";;;;   Redistribution and use in source and binary forms, with or",138],["(error-of-type 'ext:source-program-error",143],[";;;; Redistribution and use in source and binary forms, with or without",148],[":source)",152],["(loop-pop-source)",211],["(error-of-type 'source-program-error",253],[";; Redistribution and use in source and binary forms, with or without",332],[";;; Redistribution and use in source and binary forms, with or without",1324]],"useCount":26899},{"word":"space","context":[["(space 0)",271],["(write-char #\\space stream)",88],["(write-char #\\space xp)",99],["(optimize (speed 3) (safety 0) (space 0) (debug 0)))",105],["#-:debug-regex(declare (optimize (speed 3) (safety 0) (space 0) (debug 0)",105],["xml:space",134],["(space)",184],["(space space-type)",259],["(space space-type)",259],["(write-char #\\space)",764]],"useCount":4573},{"word":"spec","context":[["(destructuring-bind (caller callee) (cdr spec)",84],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361],["(eval `(untrace ,spec))",63],["spec",81],["(format nil \"~S is now untraced.\" spec))",63],["\"spec\"",105],["(defimplementation toggle-trace (spec)",106],["(ecase (car spec)",106],["(:alternatives \"endspec\" \"end-spec\")",122],["(toggle-trace-aux spec))",84]],"useCount":6171},{"word":"special","context":[["(special *str* *end*)",65],["(do-special-strings",206],["(declare (special x))",160],["((special-operator-p symbol) :special-operator)",80],["(do-special-integer-vectors",63],["((special-operator-p symbol) :special-operator)",80],["(defmethod convert-special",74],["(declare (special flags))",74],["(declare (special *TREE-FORMAT*))",56],["(declare (special var))",54]],"useCount":3593},{"word":"speed","context":[["(declare (optimize speed))",641],["(optimize (speed 3)))",126],["(optimize (speed 3) (safety 0)))",188],["(declare (optimize (speed 3))",207],["(declare (optimize speed",230],["#+ (or ccl ecl gcl) (declare (optimize (speed 3) (safety 0)))",307],["(declare (optimize (speed 3)))",346],["(locally (declare (optimize speed))",347],["(declare (optimize (speed 3) (safety 0)))",351],["(compilation-speed 0)",259]],"useCount":6814},{"word":"src","context":[["(src dest srcoff destoff srclen srcinc destinc height lsb-first-p)",44],["(src :pointer)",45],["(declare (type ,src-type src)",60],["(declare (type ,src-type src)",60],["(src :pointer))",67],["(format t \"~&chdir ~A~%\" src)",35],["(declare (type buffer-bytes src dest)",44],["(require :cllib-base (translate-logical-pathname \"clocc:src;cllib;base\"))",42],["src",41],["(with-vector (src buffer-bytes)",40]],"useCount":2629},{"word":"stack","context":[["(emit-move-from-stack target representation)",60],["(compile-form arg2 'stack :int)",62],["<rest-of-stack>",164],["(emit-move-from-stack target representation))",274],["(push-stack (find-owllink-attribute \"kb\" attributes)",66],["(non-empty (djvm-stack djvm))",67],["(compile-form arg1 'stack nil)",74],["*stack*))",110],["stack)",162],["(emit-move-from-stack target representation)))",116]],"useCount":4984},{"word":"standard","context":[["(with-standard-io-syntax",676],["(with-standard-io-syntax",623],["(with-output-to-string (*standard-output*)",542],["(declare #.utils:*standard-optimize-settings*)",149],["(*standard-output*)",105],["(let ((*standard-output* stream))",91],["(my-with-standard-io-syntax",79],["(declare #.*standard-optimize-settings*",73],["(declare #.*standard-optimize-settings*)",1603],["(standard-page",102]],"useCount":11179},{"word":"start","context":[["start",725],["(lambda (start-pos)",379],["(loop for i from start below end",317],["(go start)))",268],[":start start",227],["(declare (type fixnum start-pos))",227],[":start start",227],[":datum start",215],["(type fixnum start end))",185],["(error 'invalid-start-index",183]],"useCount":30569},{"word":"state","context":[["state",423],["(answer expr state",348],["A return code of 0 shall indicate the state change was successfully initiated.",344],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343],["\\\"Unknown\\\" (0) indicates the last requested state for the element is unknown.",343],["\"TransitioningToState indicates the target state to which the instance is transitioning.",343],["Shutting Down (4) indicates that the element is in the process of going to a Disabled state.",336],["Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.\")",336],["Test (7) indicates that the element is in a test state.",336],["state)",190]],"useCount":14557},{"word":"status","context":[["(status MPI_Status :out))",56],["(multiple-value-bind (symbol status)",55],["status :TRANSLATED",619],["(:status '|current|)",250],["(defimplementation thread-status (thread)",191],["(status",72],[":initarg :status",71],["(multiple-value-bind (existing status) (find-symbol name to-package)",65],["(:status-handlers",63],["(multiple-value-bind (rpid status) (sb-posix:waitpid pid 0)",61]],"useCount":5982},{"word":"step","context":[["#:sldb-step",34],["((typep condition 'sb-impl::step-form-condition)",34],["(typep condition 'sb-ext:step-form-condition))",34],["\"True during execution of a step command.\")",34],["(invoke-restart 'sb-ext:step-next))",34],["(invoke-restart 'sb-ext:step-into))",34],["step)",37],["; step 2",43],["(progn (traverse-list-step-1 (cdr list) (1- length))",49],["(labels ((traverse-list-step-1 (list length)",49]],"useCount":2331},{"word":"stl","context":[["#-cl-stl-0x98 input_iterator)",12],["#+cl-stl-warn-deprecated",14],["#+cl-stl-0x98 binary_function))",19],["(in-package :cl-stl)",27],["#+cl-stl-0x98 nil",33],["#+cl-stl-debug",36],["#-cl-stl-noextra",72],["#-cl-stl-0x98",340],["#-(and cl-stl-noextra cl-stl-0x98)",550],["#-(and cl-stl-noextra cl-stl-0x98)",550]],"useCount":1688},{"word":"stop","context":[["#:stop-server",42],["(stop-server port)",34],["\\\"Shutting Down\\\" describes an element being brought to an abrupt stop.",417],["\\\"Stopping\\\" describes an element being brought to an orderly stop.",417],["stop-opacity",32],["(defun stop ()",42],[";; stop if EOF",42],["(defun stop-server ()",36],["(defun stop-server (port)",35],["stop-color",34]],"useCount":2059},{"word":"store","context":[["(state-expanded-store state)",33],[",store)",51],["(list store)",51],[":variable-values '((odysseus::*store-all-non-refuted-proof-terms*)",56],["expanded-store",45],["'((odysseus::*store-all-non-refuted-proof-terms*)",177],[":unexpanded-exists-constraints-store",39],["unexpanded-disjunctive-constraints-store",34],[",store-form",33],["(multiple-value-bind (vars vals store-vars writer-form reader-form)",44]],"useCount":2253},{"word":"str","context":[["(with-output-to-string (str)",227],["str))",209],["(str",169],["str",152],["str)))",141],["str)",116],["(str :string))",85],["(setf str var-2)",66],["(special *str* *end*)",65],["(setf str",58]],"useCount":4975},{"word":"stream","context":[["stream))",345],[":stream stream",375],["(terpri stream)",418],["stream)",446],["output-string-stream))",479],["(with-output-to-string (stream)",590],["(format stream",722],["(:report (lambda (condition stream)",1097],["stream",1197],[":stream stream",375]],"useCount":51132},{"word":"streams","context":[["(defimplementation wait-for-input (streams &optional timeout)",113],["(error \"octet streams not supported in this implementation\")))",53],["(in-package :flexi-streams)",60],["*standard-input-streams*",40],["(flexi-streams:with-output-to-sequence (s)",29],["(let ((ready (remove-if-not #'input-ready-p streams)))",30],[";; Bindings used for this connection (usually streams)",31],["\"trivial-gray-streams\")",35],["optimized for LispWorks binary streams.\"))",38],[";;; streams that redirect to Emacs, and optionally a second socket",34]],"useCount":2067},{"word":"string","context":[["(with-output-to-string (*standard-output*)",542],["string))",381],["(concatenate 'string",1369],["output-string-stream))",479],["(with-output-to-string (s)",1065],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["(string",720],["string",386],["(with-output-to-string (out)",656],["(with-output-to-string (stream)",590]],"useCount":66373},{"word":"stringp","context":[["(unless (and (stringp first-val) (string= first-val secret))",34],["(and (stringp o)",35],["(let ((documentation (when (stringp (car slots)) (pop slots))))",36],["(if (stringp x)",36],["((not (stringp string))",38],["(if (stringp string)",39],["(assert (stringp project))",44],["(if (stringp value)",46],["((stringp x)",48],["(check-option (cdr opt) #'stringp \"a string\" 1)))",56]],"useCount":2002},{"word":"strings","context":[["(apply #'concatenate 'string strings))",44],["(defun longest-common-prefix (strings)",36],["(do-special-strings",206],["#+(version>= 6) :strings-convert #+(version>= 6) nil",124],[":notes (:nil-vectors-are-strings)",81],["(:DESCRIPTION \"Array of strings indicating which statistics to reset.\")))",44],["(defun strcat (&rest strings)",42],["(if (null strings)",40],["\"Return a temporary file name to compile strings into.\"",39],["(dolist (s strings)",37]],"useCount":2708},{"word":"struct","context":[["(p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL \"true\"",57],["(with-struct (istate. object metadata-plist) *istate*",29],["(defun struct-constructor (dd)",29],["(assert (struct-closure-p function))",29],["(* (sb-alien:struct mona-dfa))",32],["(with-struct* (lcons- @ lcons)",33],["(defmacro with-struct* ((conc-name get obj) &body body)",33],["struct-c-name",42],["(with-struct (alien::alien-value- sap type) alien",58],["(dst (:pointer (:struct sdl-cffi::sdl-surface)))",48]],"useCount":1866},{"word":"style","context":[["(:p :style *style-p*",51],["(style *communication-style*)",68],["(:p :style *style-p*",51],["(style *communication-style*)",68],["(declare (ignore ink clipping-region transformation line-style line-thickness",48],["(ecase (connection.communication-style connection)",48],["(handler-bind ((style-warning #'muffle-warning))",41],["(defimplementation preferred-communication-style ()",202],[";;; -*- Mode: Lisp; common-lisp-style: poem -*-",76],["(ecase style",75]],"useCount":4073},{"word":"sub","context":[["(f2cl-lib:int-sub",551],["(f2cl-lib:int-add (f2cl-lib:int-sub lwork iwork) 1)",404],["(f2cl-lib:int-sub 1",152],["(f2cl-lib:fdo (j n (f2cl-lib:int-add j (f2cl-lib:int-sub 1)))",179],["(f2cl-lib:int-add (f2cl-lib:int-sub lwork nwork) 1) ierr)",142],["(f2cl-lib:int-sub n 1)",113],["(f2cl-lib:int-add i (f2cl-lib:int-sub 1)))",94],["(sub",189],["(f2cl-lib:int-sub 1)))",212],["((f2cl-lib:int-sub",220]],"useCount":8063},{"word":"subject","context":[[";;;; furnished to do so, subject to the following conditions:",183],[":subject (default-object-in-search",153],[";; furnished to do so, subject to the following conditions:",102],[";;;; subject to the following conditions:",87],["subject",28],[";; subject to the following conditions:",25],[";;;; it freely, subject to the following restrictions:",23],["!eval! (attach-message =word \"subject\" =subj-word)",21],["(has-as-subject   )",502],[";;; furnished to do so, subject to the following conditions:",596]],"useCount":1934},{"word":"subseq","context":[["remove-empty-subseqs) ; empty subseq we don't want",68],["(subseq",53],["(if diff-pos (subseq s1 0 diff-pos) s1))))",53],["(defun ascii-subseq (vector start end)",39],["(if pos (subseq string (1+ pos)) string)))",36],["(if pos (subseq string 0 pos) nil)))",36],["(concatenate 'list (subseq arr idx) (subseq arr 0 idx))))",34],["(subseq (prin1-to-string (make-symbol string)) 2))",34],["(concatenate 'list (subseq arr idx) (subseq arr 0 idx))))",34],["(if (null pos) string (subseq string 0 pos)))))",34]],"useCount":2474},{"word":"substrate","context":[["thematic-substrate::new-ind-ops",52],["thematic-substrate::type-of-substrate))",85],["thematic-substrate::type-of-substrate))",85],["thematic-substrate::type-of-substrate",56],["thematic-substrate::id",53],["thematic-substrate::put-into-repository-p",52],["thematic-substrate::rewrite-semantically-p",52],["thematic-substrate::dont-check-id-p",52],["thematic-substrate::type-of-substrate",56],["thematic-substrate::abox",146]],"useCount":3185},{"word":"sum","context":[["((%sum)",59],["(incf sum))",65],["(setf sum",133],["(let ((sum 0))",122],["sum))",111],["sum",55],["(* sum t1)))",72],["(* sum t2)))",72],["(let ((sum 0)",70],["(* sum t3)))",57]],"useCount":2257},{"word":"supersede","context":[[":direction :output :if-exists :supersede",28],["(if-exists :supersede)",30],[":direction :output :if-exists :supersede)",104],[":if-exists :supersede",32],["(with-open-file (out c-file :direction :output :if-exists :supersede)",34],[":if-exists :supersede)",43],[":if-exists :supersede :if-does-not-exist :create",55],[":if-exists :supersede :if-does-not-exist :create)",56],[":if-exists :supersede",548],[":if-exists :supersede)",717]],"useCount":2016},{"word":"support","context":[["Not Applicable (5) indicates the element does not support being enabled or disabled.",336],[";;; We use Emacs-like `add-hook' and `run-hook' utilities to support",34],[";; And for xref support (1.0.1)",34],[";;; This instruction can be used by implementations that support the",47],["(error (make-threading-support-error)))",56],[";;; We support a simplim%function. The function is looked up in simplimit and",60],[";;; Set properties to give full support to the parser and display",93],["(odysseus::*support-unique-name-axioms*)",233],["(odysseus::*support-preconditions*)",233],["(odysseus::*support-declarations*)",233]],"useCount":2240},{"word":"swank","context":[["(defimplementation swank-compile-file (input-file output-file",172],["(in-package :swank-backend)",207],["(defun swank-mop:slot-definition-documentation (slot)",123],[";;; swank-mop",108],["#+#.(swank-backend::sbcl-with-weak-hash-tables)",66],["(defimplementation swank-compile-string (string &key buffer position filename",162],["(in-package :swank)",165],["(swank-compile-string string",64],["#+#.(swank-backend::sbcl-with-new-stepper-p)",63],["(with-swank-error-handler (connection)",59]],"useCount":10432},{"word":"sym","context":[["(when sym",49],["(flet ((doc (kind &optional (sym symbol))",77],["(or (documentation sym kind) :not-documented))",76],["(when (fboundp sym)",69],["(let* ((sym (gensym))",65],["(let ((sym (gensym)))",64],["sym)",60],["(if sym",48],["sym",39],["(let ((sym (gensym)))",110]],"useCount":3414},{"word":"symbol","context":[["(describe (symbol-function symbol)))",134],["(symbol",468],["(defimplementation describe-symbol-for-emacs (symbol)",205],["(defimplementation describe-symbol-for-emacs (symbol)",205],["(defimplementation describe-definition (symbol namespace)",147],["(symbol-macrolet",145],["symbol",141],["(when (fboundp symbol)",139],["(describe symbol))",135],["(describe (symbol-function symbol)))",134]],"useCount":33298},{"word":"symbolp","context":[["(if (symbolp name)",157],["(if (symbolp x)",125],["((symbolp form)",75],["(and (symbolp name)",66],["(unless (symbolp name)",60],["(assert (every #'symbolp args) ()",54],["(and (symbolp x)",54],["(if (symbolp item)",51],["(cond ((symbolp form)",46],["(if (and (symbolp name)",43]],"useCount":3142},{"word":"symbols","context":[["(do-all-symbols (s)",87],["(do-all-symbols (symbol)",80],["symbols))",41],["(defun xref-results (symbols)",41],["exported-symbols-alist",43],["(do-symbols (symbol package)",59],["(dolist (symbol symbols)",59],["(import-swank-mop-symbols :clos '(:slot-definition-documentation))",49],["(do-symbols (s package)",46],["(let ((exported-symbols-alist",49]],"useCount":4180},{"word":"syntax","context":[["(with-standard-io-syntax",623],["(with-buffer-syntax (package)",128],["(with-safe-io-syntax ()",60],["(with-standard-io-syntax",676],["(with-buffer-syntax ()",1129],["(update-parse syntax)",65],["(cl-interpol:enable-interpol-syntax)",62],["(signal-ppcre-syntax-error*",74],["(my-with-standard-io-syntax",79],["(enable-#?-syntax)",85]],"useCount":5917},{"word":"sys","context":[["sys.int::+object-type-shift+))",86],["`(sys.lap-x86:jne ,type-error-label)",87],["(sys.lap-x86:ret))",127],["(in-package :sys.int)",178],["(sys.lap-x86:leave)",66],["(in-package :sys.c)",71],["(in-package #:clsql-sys)",85],["`(sys.lap-x86:and8 :al #b1111)",64],["(sys.lap-x86:mov64 :rbp :rsp)",66],["(sys.lap-x86:gs)",62]],"useCount":9486},{"word":"system","context":[["*external-format-to-coding-system*)))",143],["(system:call-system-showing-output",51],["(system-get 'opengl-free-drawing-default-language-ext-1)))",52],["(operate-on-system",54],["(when system",88],["(in-package #:system)",298],["(car (rassoc-if (lambda (x) (member coding-system x :test #'equal))",102],["(defimplementation find-external-format (coding-system)",187],["(defvar *external-format-to-coding-system*",187],["(system-add",138]],"useCount":12904},{"word":"t","context":[[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],["t)",6109],["t))",2315],["t",1936],["t)))",1412],["(t nil)))",1196],["(t",1083],[";;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)",992],["t)",9517],["(t",34136]],"useCount":132544},{"word":"table","context":[["(:table",116],["@table @asis",117],["(apply #'make-hash-table args))",122],["(let ((table (make-hash-table)))",131],["(let ((table (make-hash-table)))",131],["(defimplementation make-weak-key-hash-table (&rest args)",141],["table))",255],["table)",273],["table",104],["(defimplementation make-weak-value-hash-table (&rest args)",112]],"useCount":13690},{"word":"tabs","context":[[";;; -*- show-trailing-whitespace: t; indent-tabs-mode: nil -*-",47],[";;;; -*- Mode: LISP; Syntax: COMMON-LISP; indent-tabs-mode: nil; coding: utf-8; show-trailing-whitespace: t -*-",49],[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10; indent-tabs-mode: nil -*-",53],[";;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",104],[";;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; indent-tabs-mode: nil -*-",114],[";;;; -*- mode: lisp; indent-tabs-mode: nil -*-",117],[";;;; -*- indent-tabs-mode: nil -*-",163],[";;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-",371],[";;;; -*- Mode: lisp; indent-tabs-mode: nil -*-",589],[";;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; indent-tabs-mode: nil -*-",43]],"useCount":1973},{"word":"tag","context":[["(declare (ignore tag))",52],["(sys.lap-x86:call (:r13 #.(+ (- sys.int::+tag-object+) 8 (* sys.int::+fref-entry-point+ 8))))",54],["(emit `(sys.lap-x86:test64 :r8 ,sys.int::+fixnum-tag-mask+)",47],["tag",49],["(let ((tag (make-tag)))",90],["(let ((tag (make-tag)))",90],["(make-value address sys.int::+tag-object+)))",61],["(third (wait-for-event `(:emacs-return ,tag result)))))",60],["(:tag :unittest)",58],["tag)",58]],"useCount":4352},{"word":"tagbody","context":[["(tagbody",7250],["tagbody",15],["(\"tagbody frame\" tagbody)",18],["(\"tagbody frame\" tagbody)",18],["(\"nested tagbody frame\" tagbody)",18],["(tagbody ,@body)",21],["(tagbody toplevel",29],["`(tagbody",33],["(tagbody",122],["(\"nested tagbody frame\" tagbody)",18]],"useCount":7628},{"word":"tail","context":[["(when tail",221],["(tail (member-if test q)))",179],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["(setf (mailbox.queue mbox) (nconc (ldiff q tail) (cdr tail)))",110],["(return (car tail))))",77],["(return (car tail)))))",51],["(nconc (ldiff q tail) (cdr tail)))",47],["(nconc (ldiff q tail) (cdr tail)))",47],["(cond ((member *for-value* '(:multiple :tail))",40],["(return (car tail)))",40]],"useCount":2520},{"word":"target","context":[["((target glenum)",216],["((:name |target| :type |GLenum| :direction :in)",222],["(emit-move-from-stack target representation))",274],["((:name |target| :type |BufferTargetARB| :direction :in)",154],["((:name |target| :type |ConvolutionTarget| :direction :in)",154],["(when target",157],["(target enum)",2772],["((:name |target| :type |TextureTarget| :direction :in)",583],["((:name |target| :type |TextureUnit| :direction :in)",464],["\"TransitioningToState indicates the target state to which the instance is transitioning.",343]],"useCount":12648},{"word":"tbox","context":[["(setf tbox (find-tbox tbox))",114],["(setf tbox (find-tbox tbox))",114],["(setf tbox (find-tbox tbox))",114],["tbox))",99],["(reasoner-sync tbox)",60],["(ensure-knowledge-base-state ':tbox-prepared tbox)",56],["(ensure-knowledge-base-state ':tbox-prepared tbox)",56],["tbox",53],["(check-type tbox (or symbol tbox))",48],["(check-type tbox (or symbol tbox))",48]],"useCount":1803},{"word":"temp","context":[["(setf remaining temp)))",65],["(* alpha temp)))",66],["temp))",88],["(/ temp",131],["(- temp",133],["temp)))",166],["temp)",167],["(+ temp",237],["(* temp",545],["(setf temp",1397]],"useCount":5771},{"word":"template","context":[["template",40],["template))))))))",29],["(djula::render-template*",30],["(addtest (template-parser-test)",31],["#:com.bahagontools.web.template",32],["#.(table-header-template",36],["(djula:render-template* template nil)",37],["(djula:render-template* template nil)",37],["(compile-template :common-lisp-backend",70],["(loop for template in (c::function-info-templates info)",29]],"useCount":1855},{"word":"term","context":[["(mapcar #'(lambda (term)",26],["(check-role-term role-term)",33],["(check-role-term role-term)",33],["term)",36],[":place (term-place expr)))",41],["term))",41],["(declare (ignore term))",44],["'((make-term 1 '((make-var 'x 1)))",45],["(make-sb-term",52],["term",63]],"useCount":1621},{"word":"terpri","context":[["(terpri stream))))",60],["(terpri)",78],["(terpri stream)))",86],["(terpri *error-output*)",89],["(terpri)))",109],["(terpri stream))",163],["(terpri)",711],["(terpri stream)",418],["(terpri))",204],["(terpri f)",60]],"useCount":2633},{"word":"test","context":[[":test #'equal))",310],["(*continue-after-undecidable-test* . t)",233],[":test #'equalp)",235],[":test #'equal)",254],["\\\"In Test\\\" element is performing test functions.",417],["Test (7) indicates that the element is in a test state.",336],["(in-package :cl-test)",1202],[":test #'string=)",217],[":test #'equal)))",226],["(test",211]],"useCount":30828},{"word":"tests","context":[["(run-tests)",44],[";;; Error tests",382],["(:export #:run-tests))",49],[";;; Order of evaluation tests",55],["(in-package #:clsql-tests)",59],[";;; Keyword tests",62],["(in-package #:cffi-tests)",62],[";;; Non-error tests",68],["(in-package :incudine-tests)",74],["(defun run-tests ()",108]],"useCount":2500},{"word":"text","context":[["((text :initarg :text :reader text)))",77],["#| Save lisp-format text file. |#",84],["(buffer text-buffer)",84],["(iter text-iter))",84],["text",95],["(iter text-iter)",80],["((text :initarg :text :reader text)))",77],["((text :initarg :text :reader text)))",77],["(:script :type \"text/javascript\"",76],["(:input :type \"text\"",75]],"useCount":5022},{"word":"textual","context":[["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\"The Description property provides a textual description of the object.\"))",799],["(view textual-view)",172],["stream (view textual-view)",20],["(:DESCRIPTION \"A textual description of the PhysicalElement.\")",18]],"useCount":1833},{"word":"texture","context":[["(gl:active-texture :texture0)",39],["(texture uint))",49],["(gl:bind-texture :texture-2d texture)",58],["(gl:bind-texture :texture-2d texture)",58],["(gl:bind-texture :texture-2d texture)",58],["; check texture model",66],["((:name |texture| :type |Texture| :direction :in)",68],["(texture enum)",100],["(gl:enable :texture-2d)",41],["(texture uint)",463]],"useCount":2947},{"word":"that","context":[["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["\\\"Predictive Failure\\\" indicates that an element is functioning nominally but predicting a failure in the near future.",415],["\\\"In Service\\\" describes an element that is in service and operational.\")",417],["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417],["Quiesce (9) indicates that the element is enabled but in a restricted mode.",336],["Test (7) indicates that the element is in a test state.",336],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],[";;; terms of your choice, provided that you also meet, for each linked",487],["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832],["\\\"Predictive Failure\\\" indicates that an element is functioning normally but a failure is predicted in the near future.",417]],"useCount":14498},{"word":"the","context":[[";;; furnished to do so, subject to the following conditions:",596],[";;;     provided with the distribution.",876],["(the f2cl-lib:integer4",1215],["A Null return indicates the implementation (provider) does not implement this property.",1251],[";;;   * Redistributions in binary form must reproduce the above",876],["\\\"Dormant\\\" indicates that the element is inactive or quiesced.",832],["\"The Caption property is a short textual description (one- line string) of the object.\")",824],["\"The Description property provides a textual description of the object.\"))",799],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557]],"useCount":91166},{"word":"thematic","context":[["thematic-substrate::use-repository-p",52],["thematic-substrate::abox",146],["thematic-substrate::type-of-substrate))",85],["thematic-substrate::type-of-substrate",56],["thematic-substrate::id",53],["thematic-substrate::parser",52],["thematic-substrate::execute-p",52],["thematic-substrate::rewrite-to-dnf-p",52],["thematic-substrate::bind-specials-p",52],["thematic-substrate::rewrite-defined-concepts-p",52]],"useCount":2544},{"word":"then","context":[["(then",85],["(loop for i = 0 then (1+ j)",58],["(defmacro aif (test then &optional else)",58],[":then 'noun",103],[":then 'adj",118],["\"If set to TRUE then cleanly cease all activity, if FALSE resume activity.\")))",118],[":then 'verb",127],[":then 'pron",70],[";; became zero, then start is beyond the end of the",72],["then",74]],"useCount":4207},{"word":"thing","context":[["(flet ((ensure-list (thing) (if (listp thing) thing (list thing))))",34],["(typecase thing",64],["(defun ensure-list (thing)",37],["thing",38],["(if (listp thing) thing (list thing)))",41],["(if (listp thing) thing (list thing)))",41],["thing)",65],["(if (listp thing) thing (list thing)))",41],["(etypecase thing",90],["thing))",79]],"useCount":1672},{"word":"this","context":[["A Null return indicates the implementation (provider) does not implement this property.",1251],[";;;     The data in this file contains enhancments.                    ;;;;;",470],[";;; this exception to your version of the library, but you are not",458],["\"Note: The use of this method has been deprecated.",161],[";;; obligated to do so.  If you do not wish to do so, delete this",458],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],["along with this program.",153],["; in the root directory of this project.",134],[";;; For the specification of this generic function, see",131],["\\\"Non-Recoverable Error \\\" indicates that this element is in an error condition that requires human intervention.",417]],"useCount":11666},{"word":"thread","context":[["(defimplementation kill-thread (thread)",202],["(defimplementation thread-name (thread)",191],["(defimplementation thread-status (thread)",191],["(defimplementation thread-status (thread)",191],["(defimplementation send (thread message)",198],["(defun mailbox (thread)",202],["(defimplementation kill-thread (thread)",202],["(defimplementation current-thread ()",202],["(defimplementation thread-name (thread)",191],["(defimplementation find-thread (id)",191]],"useCount":20938},{"word":"threads","context":[["(find id (all-threads)",54],["#+threads",60],["(defun all-threads ()",85],["(in-package #:bordeaux-threads)",106],["(defimplementation all-threads ()",202],["(threads:synchronized-on *thread-plists*",40],["(bordeaux-threads:with-lock-held (lock)",47],["(member thread (all-threads)))",47],["(bordeaux-threads:make-thread",43],["(sb-thread:list-all-threads))",42]],"useCount":2333},{"word":"time","context":[["time",73],["\\\"Unknown\\\" (0) - The implementation cannot report on HealthState at this time.",417],["(odysseus-snark::*run-time-limit* . 0.2)",233],["(odysseus-snark::*ida-run-time-limit* . 0.1)",233],["(time",205],["(get-decoded-time)",117],["(load-time-value",89],["internal-time-units-per-second))",87],["!eval! (set-end-time)",71],["((last-time 3)",76]],"useCount":8717},{"word":"timeout","context":[["(assert (or (not timeout) (eq timeout t)))",211],["(defimplementation receive-if (test &optional timeout)",176],["(declare (ignore timeout))",134],["(let* ((saved-timeout *server-timeout*) (*server-timeout* nil))",132],["(let ((*server-timeout* saved-timeout))",132],["(let* ((saved-timeout *server-timeout*) (*server-timeout* nil))",132],["(let* ((saved-timeout *server-timeout*) (*server-timeout* nil))",132],["(when (eq timeout t) (return (values nil t)))",178],["(assert (or (not timeout) (eq timeout t)))",211],["(let ((*server-timeout* saved-timeout))",132]],"useCount":5709},{"word":"title","context":[[":title title",68],["(when title",54],["#:title",34],["(flet ((frob (title list)",34],["(list* title '(:newline) (inspect-list-aux list))))",34],["@item :title",31],[":title title",68],["(make-obj-title (get-option '$key))",244],[":title",137],["title",79]],"useCount":2392},{"word":"tmp","context":[["(tmp (gensym \"tmp-\")))",37],["(,operator (car ,tmp))",37],["(,operands (cdr ,tmp)))",37],["(let ((tmp (mapcar #'rest (rest arg1))))",40],["(let ((pn #p\"tmp.dat\"))",50],["(cons `(,(first name) (,(reader (second name)) ,tmp)))",49],["(let ((tmp (gensym \"OO-\")))",49],["(symbol `(,name (,(reader name) ,tmp)))",49],["` (let ((,tmp ,obj))",49],["(tmp (gensym \"tmp-\")))",37]],"useCount":1840},{"word":"to","context":[[";;; furnished to do so, subject to the following conditions:",596],["(with-output-to-string (out)",656],["(with-output-to-string (stream)",590],["(fortran-to-lisp::make-f2cl-finfo",658],[";;; furnished to do so, subject to the following conditions:",596],["(fortran-to-lisp::integer4)",1246],["fortran-to-lisp::*f2cl-function-info*)",649],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557],["\"Converts a ROS message object to a list\"",881],["(with-output-to-string (s)",1065]],"useCount":70131},{"word":"token","context":[["(push-token self current-token)",78],["(parse-token)",60],["(case token",62],["(push-token self '(:type :parse-error :data :invalid-codepoint))",64],["token)",71],["(push-token self current-token)",78],["(com.informatimago.rdp::error-unexpected-token",79],["(consume-token input)",88],["(next-token)",119],["(scanner-current-token scanner)",150]],"useCount":4055},{"word":"top","context":[["(:div :class \"extra-top-3\" \"<!-- empty -->\")",59],["(:div :class \"extra-top-1\" \"<!-- empty -->\")",58],["(:div :class \"extra-top-2\" \"<!-- empty -->\")",59],["(defvar *sldb-stack-top*)",60],["(top-level-check)",68],["top",81],["((?top (syn-cat  (==0 LU))",51],["(with-slots (stack-top) syntax",46],["((member :top-level)",44],[";; top level",40]],"useCount":4643},{"word":"toplevel","context":[["(eval-when (:compile-toplevel)",235],["(eval-when (:compile-toplevel :load-toplevel)",243],["(eval-when (:compile-toplevel :load-toplevel)",243],["(eval-when (:load-toplevel :execute)",336],["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["(eval-when (:compile-toplevel :load-toplevel :execute)",4491],["(eval-when (:compile-toplevel :load-toplevel :execute)",4491]],"useCount":17141},{"word":"trace","context":[["(funcall trace-function",48],["(format *trace-output*",141],[":trace-result t)",66],[";; (trace <name>)",71],["(defimplementation toggle-trace (spec)",106],["(trace",84],["(defun toggle-trace-aux (fspec &rest args)",55],["(toggle-trace-aux spec))",84],["(finish-output *trace-output*)",53],[";; (trace (method <name> <qualifier>? (<specializer>+)))",50]],"useCount":3009},{"word":"transform","context":[["(sys:downward-funarg transform))",55],["(glutil:with-transform (model-matrix)",48],["(when (> *draw-transform-dimensions* 0)",46],["(transform 'explicitize (test-parse \"",38],["(if transform",106],[";;     transform",129],["(dynamic-extent transform)",55],["(dynamic-extent transform))",78],["(test-transform 'cps (parse \"",84],["(transform-point 3)",80]],"useCount":1962},{"word":"translations","context":[["(inherit-output-translations inherit :collect collect))",36],["(process-output-translations (validate-output-translations-file pathname)",18],["#:apply-output-translations",31],["(let* ((path-table (di:form-number-translations tlf 0))",29],["(process-output-translations (validate-output-translations-file pathname)",18],["(loop for (nil pattern) in (logical-pathname-translations \"SYS\")",33],["(initialize-output-translations",37],["`(:output-translations",38],["(let* ((path-table (sb-di::form-number-translations tlf 0))",42],["(warn \"inconsistent form-number-translations\")",42]],"useCount":2304},{"word":"tree","context":[["(define-parse-tree-synonym",78],["(let ((list (copy-tree '(0 0 0 0 0 0 0 0 0 0))))",76],["(if (consp tree)",92],["(if (atom tree)",75],["(let ((list (copy-tree '((((0 . 0) . (0 . 0)) . ((0 . 0) . (0 . 0))) .",160],["tree)",143],["((atom tree) tree)",91],["((atom tree) tree)",91],["tree",128],["tree))",138]],"useCount":5331},{"word":"true","context":[["\"Returns true if NEW-FILE is newer than OLD-FILE.\"",58],["(is-true",62],["(true",65],[":initform  \"true\"",77],["*true*)",54],["(cont-true (be t))",56],["(p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL \"true\"",57],["(assert-true",86],["(setq first$ f2cl-lib:%true%)",93],["(should be true",177]],"useCount":4048},{"word":"truename","context":[["(list :file (namestring (truename file)))",43],["(make-location (list :file (unix-truename file))",90],["(truename",62],["(load (format nil \"~a~a\" (directory-namestring *load-truename*) \"bootstrap.lisp\"))",50],["(make-location (list :file (namestring (truename file)))",44],["(*compile-file-truename* (truename *compile-file-pathname*))",34],["(multiple-value-bind (output-truename warnings-p failure-p)",34],["(setf *default-pathname-defaults* (truename (merge-pathnames directory)))",35],["(if truename",40],["(when truename",39]],"useCount":2287},{"word":"tv","context":[["(unless tv (return-from %subtypep (values tv flag)))))",12],["(:CATEGORY \"tv-drama\"",2245],["(unless tv (return-from %subtypep (values tv flag)))))",12],["(when tv (return-from %subtypep (values t t)))))",12],["(tv-usec :long))",12],["struct timeval tv;",11],["(tv-sec :long)",13],["(with-foreign-object (tv 'timeval)",16],["(fli:with-foreign-slots (tv-sec tv-usec) timeout",18],["(fli:with-foreign-slots (tv-sec tv-usec) timeout",18]],"useCount":2369},{"word":"two","context":[["thematic-substrate::two-phase-processing-p",33],["(two-way-stream",84],["(or (zerop (two-arg-- x y))",70],["because what the spec considers _internal_ is split up into two",34],["Return two values: the length of the list and the last cdr.",36],["\"An array of keywords for characterizing / categorizing policy objects. Keywords are of one of two types:",39],["(make-two-way-stream",42],["thematic-substrate::deliver-phase-two-warning-tokens-p",33],["(real-output-stream (two-way-stream-output-stream stream)))",32],["(type (double-float 2.0 2.0) two)",57]],"useCount":1834},{"word":"tymoon","context":[["Author: Nicolas Hafner <shinmera@tymoon.eu>",791],["Author: Nicolas Hafner <shinmera@tymoon.eu>, Janne Pakarinen <gingeralesy@gmail.com>",12],["(c) 2013 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",31],["(c) 2013 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",31],["(c) 2015 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",208],["(c) 2015 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",208],["(c) 2016 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",212],["(c) 2016 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",212],["(c) 2014 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",336],["(c) 2014 Shirakumo http://tymoon.eu (shinmera@tymoon.eu)",336]],"useCount":2377},{"word":"type","context":[["((:name |location| :type |Int32| :direction :in)",608],["(:name |count| :type |SizeI| :direction :in)",745],[":type \"lisp\")",616],["((:name |index| :type |UInt32| :direction :in)",768],["(case type",622],[":type cl:float",900],[":element-type '(unsigned-byte 8)",681],[":result-type :void",1201],["(type enum)",1082],[";;;           (:coerce-assigns :as-needed) (:array-type ':array)",942]],"useCount":123575},{"word":"typecase","context":[["(typecase x",258],["(typecase list",83],["(typecase stream",84],["(typecase value",85],["(typecase form",89],["(typecase sequence",112],["(typecase obj",115],["(typecase object",132],["(typecase name",166],["(typecase condition",169]],"useCount":2616},{"word":"typep","context":[["((and (typep arg0 'string))",39],["(if (typep condition 'sb-int:reference-condition)",34],["((core :initform t :reader core-typep)",126],["(cond ((typep datum 'condition)",34],["((typep condition 'sb-impl::step-form-condition)",34],["((typep condition 'sb-int:reference-condition)",34],["(when (and condition (not (typep condition 'end-of-file)))",34],["((typep (fdefinition symbol) 'generic-function)",52],["(typep c '(or string pathname",34],["(typep condition 'sb-ext:step-form-condition))",34]],"useCount":3203},{"word":"types","context":[["(multiple-value-bind (types fargs rettype)",55],[":arg-types '((double-float) (double-float) (double-float)",87],["(if (null types)",81],[":arg-types '((simple-array character (1))",80],[":arg-types '((fortran-to-lisp::integer4) (fortran-to-lisp::integer4)",106],["(fortran-to-lisp::make-f2cl-finfo :arg-types",359],["(fortran-to-lisp::make-f2cl-finfo :arg-types '((double-float))",74],["types",65],["(lisp-object-arg-types 1) +lisp-object+)",64],["types))",55]],"useCount":4764},{"word":"u","context":[["(listp u)",115],["(alike1 (third u) m))",115],["(second u))",110],["(u nonzerp)",243],["rest (cdras 'u l))",198],["((u m)",140],["((zerop1 u)",90],["(complex-bigfloat-numerical-eval-p u m))",92],["u-%offset%)",95],["(let ((u (simpcheck (cadr form) z))",130]],"useCount":5017},{"word":"uint","context":[["(params (:pointer uint)))",159],["(buffer uint)",244],["(id uint)",295],["(texture uint)",463],["(program uint)",936],["(index uint)",1751],["(framebuffer uint)",112],["(id uint))",111],["(vaobj uint)",147],["(index uint))",115]],"useCount":7407},{"word":"uiop","context":[["(uiop/run-program:run-program",33],["(:use :uiop/common-lisp :uiop :asdf/upgrade",60],["(:use :uiop/common-lisp :uiop :asdf/upgrade",60],["(:use :uiop/common-lisp :uiop/package :uiop/utility",39],["(:use :uiop/common-lisp :uiop/package :uiop/utility",39],["(:use :uiop/common-lisp :uiop/package :uiop/utility",39],["(:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache",36],["(uiop/os:chdir src)",35],["(uiop/run-program:run-program cmd :output t :ignore-error-status t)))",35],["(:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache",36]],"useCount":1923},{"word":"unit","context":[["(:use #:common-lisp #:lisp-unit))",39],["(with-compilation-unit ()",111],["(lisp-unit:assert-equal",75],["unit byte-lsb-first-p bit-lsb-first-p)",65],["(ql:quickload \"lisp-unit\")",59],["(type (member 8 16 32) unit)",52],["; compilation unit finished",44],["(with-compilation-unit",38],["bits-per-pixel unit byte-lsb-first-p bit-lsb-first-p)",38],["(lisp-unit:assert-equality",36]],"useCount":1731},{"word":"unix","context":[[";; -*- Mode:Lisp; Syntax:ANSI-Common-LISP; Coding:us-ascii-unix; fill-column:158 -*-",157],["(make-location (list :file (unix-truename file))",90],["\"latin-1\" \"latin-1-unix\" \"iso-latin-1-unix\"",124],["\"latin-1\" \"latin-1-unix\" \"iso-latin-1-unix\"",124],["(:utf-8 \"utf-8\" \"utf-8-unix\")",68],["#+unix",68],["(:euc-jp \"euc-jp\" \"euc-jp-unix\")",55],["\"iso-8859-1\" \"iso-8859-1-unix\")",124],["(parse-unix-namestring",61],["(:utf-8 \"utf-8\" \"utf-8-unix\")))",56]],"useCount":3706},{"word":"unless","context":[["(unless (zerop start-bis)",96],["(unless (symbolp name)",60],["(unless (class-finalized-p class)",64],["(unless (null *history*)",66],["(unless (apply #'seq-end-p sequence iter rest)",75],["unless (string= s1 s2)",79],["(unless ok",98],["(unless",173],["(unless result",59],["(unless dont-close",59]],"useCount":12451},{"word":"unreadable","context":[["(print-unreadable-object (obj s :type t :identity t))))",34],["(print-unreadable-object (obj stream :type t :identity t)",75],["(print-unreadable-object (object stream :type t)",171],["(print-unreadable-object (object stream :type t :identity t)",287],["(print-unreadable-object (conn stream :type t :identity t)))",34],["(print-unreadable-object (self stream :type t :identity t)",70],["(print-unreadable-object (object stream :type t :identity nil)",42],["(print-unreadable-object",45],["(print-unreadable-object (self stream :identity t :type t)",49],["(print-unreadable-object (val out :type t :identity t)))))",56]],"useCount":1634},{"word":"unsigned","context":[[":element-type '(unsigned-byte 8))",304],["(cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)",339],["(cl:let ((unsigned 0))",339],[":element-type '(unsigned-byte 8)",681],["(cl:write-byte (cl:ldb (cl:byte 8 8) unsigned) ostream)",294],["(cl:setf (cl:ldb (cl:byte 8 24) unsigned) (cl:read-byte istream))",256],["(cl:write-byte (cl:ldb (cl:byte 8 24) unsigned) ostream)",256],["(cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))",339],["(cl:setf (cl:ldb (cl:byte 8 16) unsigned) (cl:read-byte istream))",256],["(cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))",294]],"useCount":9815},{"word":"until","context":[["until (zerop end-start)",101],["(loop until (null reversed)",64],["(loop until (null current)",72],["until (null current)",72],["until (or (atom remaining) (>= index end))",72],["until (atom remaining)",83],["until (endp remaining)",97],["(loop until (zerop start-bis)",99],["until (zerop count)",186],["(loop until (endp remaining)",194]],"useCount":2488},{"word":"unwind","context":[["(defslimefun sldb-break-with-default-debugger (dont-unwind)",31],["(unwind-protect",127],["(cond (dont-unwind",32],[";; FIXME: this implementation doesn't unwind the stack before",34],["(sb-debug:unwind-to-frame-and-call frame",37],["(unwind-protect",4883],["(unwind-protect (progn ,@body)",269],["(unwind-protect (funcall function)",51],["(unwind-protect-case ()",52],["`(unwind-protect",139]],"useCount":5981},{"word":"up","context":[[";;; for the location. Once we have the source-path we can pull up the",29],["(clean-up-quotes)",44],["When Emacs presents the message it already has the source popped up",63],["(:key-up-event (:key key)",66],["(set-up-packages)",76],["(csp (frame-cfp (di::frame-up frame)))",29],["because what the spec considers _internal_ is split up into two",34],[";; Declare return type explicitly to shut up STYLE-WARNINGS about",34],["(catch 'up-and-out",39],[";;; We support a simplim%function. The function is looked up in simplimit and",60]],"useCount":1989},{"word":"update","context":[["(sdl:update-display)",109],["(sdl:update-display))",97],["(update-ranges-2d xmin xmax ymin ymax)",117],["(update-heights height depth)",68],["(update-parse syntax)",65],["(sdl:update-display))))))",58],["(:video-expose-event () (sdl:update-display))",52],["(update-all-mode-lines)",53],["(update-parse syntax 0 (offset mark))",56],["(update-ranges-3d xmin xmax ymin ymax zmin zmax)",56]],"useCount":3854},{"word":"upgradability","context":[["(defmacro with-upgradability ((&optional) &body body)",13],["`(with-upgradability ()",13],["(with-upgradability ()",1909]],"useCount":1935},{"word":"url","context":[["(defclass url ()",24],["url",78],["url))",52],[":url url",39],[":url url",39],["(setf (hostname url) (save))",38],["#:*proxy-url*",34],["#:url",30],["(url :initarg :url",27],["(url :initarg :url",27]],"useCount":1888},{"word":"use","context":[["(:use \"COMMON-LISP\")",311],["(:use \"COMMON-LISP\"",380],["(:use #:common-lisp)",331],[";; Redistribution and use in source and binary forms, with or without",332],["(:use :common-lisp)",438],["(:use #:cl",477],["(:use :cl",632],["(:use #:cl)",852],["(:use :cl)",1117],[";;; Redistribution and use in source and binary forms, with or without",1324]],"useCount":15476},{"word":"used","context":[["For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.\"))",146],["For DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",58],["(mapcan #'delete-package (package-used-by-list \"TB-BAR-TO-USE\"))",67],["(setq *loop-end-used?* t)",68],["1) PRODIGY will only be used for internal, noncommercial research purposes.",90],["(equalt (package-used-by-list p) nil))",44],[";;; This instruction can be used by implementations that support the",47],["that the name Bolt Beranek and Newman Inc. not be used in advertising or",49],["(defun used-area (&optional unused)",57],["If not set to null for DMTF-defined instances, the \\\"preferred\\\" algorithm must be used with the <OrgID> set to CIM.\"))",557]],"useCount":4035},{"word":"user","context":[["(in-package #:cl-user)",653],["(in-package #-gcl #:cl-user #+gcl \"CL-USER\")",1102],["(in-package :cl-user)",1804],["(cl:in-package #:common-lisp-user)",101],["(in-package #:common-lisp-user)",93],[";(in-package :common-lisp-user)",136],["#+(and :clean-actr (not :packaged-actr) :ALLEGRO-IDE) (in-package :cg-user)",147],["#-(or (not :clean-actr) :packaged-actr :ALLEGRO-IDE) (in-package :cl-user)",147],["(&rest common-lisp-user::args)",147],["(in-package :common-lisp-user)",191]],"useCount":10361},{"word":"using","context":[[";;;; purpose, including using, modifying, and redistributing it.",67],["#:slot-value-using-class",55],["synchronously execute the result using a Bourne-compatible shell, with",55],["#:slot-boundp-using-class",44],["#:slot-makunbound-using-class",44],["using (hash-value value)",41],["slot-value-using-class",37],["#:compute-applicable-methods-using-classes",37],["slot-boundp-using-class",35],["using (hash-value thread-pointer)",35]],"useCount":2652},{"word":"usocket","context":[["(defmethod get-peer-port ((usocket stream-usocket))",72],["(remove-waiter (wait-list usocket) usocket))",127],["(remove-waiter (wait-list usocket) usocket))",127],["(when (wait-list usocket)",134],["(defmethod get-peer-address ((usocket stream-usocket))",72],["(defmethod socket-close ((usocket usocket))",74],["(defmethod socket-close ((usocket usocket))",74],["(with-mapped-conditions (usocket)",253],["(in-package :usocket)",121],["(usocket:socket-close sock))))",81]],"useCount":3641},{"word":"utf","context":[[";;;; -*- coding:utf-8 -*-",246],["(:utf-8 \"utf-8\" \"utf-8-unix\")",68],["(:utf-8 \"utf-8\" \"utf-8-unix\")",68],["(:utf-8 \"utf-8\" \"utf-8-unix\")",68],[":external-format :utf-8)",68],[";;;; -*- mode:lisp; coding:utf-8 -*-",67],["(:utf-8 \"utf-8\" \"utf-8-unix\")))",56],["(:utf-8 \"utf-8\" \"utf-8-unix\")))",56],["(external-format *utf-8-external-format*)",66],[";;;; -*- mode:lisp;coding:utf-8 -*-",825]],"useCount":2648},{"word":"v","context":[[";;;  \"f2cl2.l,v 1.37 2008/02/22 22:19:33 rtoy Exp $\"",372],[";;;  \"f2cl4.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",473],[";;;  \"f2cl6.l,v 1d5cbacbb977 2008/08/24 00:56:27 rtoy $\"",473],[";;;  \"f2cl3.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",473],[";;;  \"f2cl2.l,v 96616d88fb7e 2008/02/22 22:19:34 rtoy $\"",459],[";;;  \"macros.l,v 1.112 2009/01/08 12:57:19 rtoy Exp $\")",317],[";;;  \"f2cl6.l,v 1.48 2008/08/24 00:56:27 rtoy Exp $\"",372],[";;;  \"f2cl4.l,v 1.7 2008/02/22 22:19:34 rtoy Exp $\"",372],[";;;  \"f2cl3.l,v 1.6 2008/02/22 22:19:33 rtoy Exp $\"",372],["(v (:pointer float)))",396]],"useCount":17132},{"word":"val","context":[["val)))",115],["(declare (ignore val))",127],["(setf (gethash opt *gr-options*) val)",100],["val))))",79],["(if val",144],["val))",156],["(maphash #'(lambda (key val)",166],["val)",182],["val",194],["(cl:ensure-generic-function 'header-val :lambda-list '(m))",254]],"useCount":6606},{"word":"value","context":[["(multiple-value-bind",2905],["value)",784],["value))",706],["(label-value-line*",535],["value",485],["(multiple-value-prog1",441],["(when value",409],["(multiple-value-list",377],["value)))",364],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343]],"useCount":56340},{"word":"values","context":[["(values nil nil))))",186],["(when (eq timeout t) (return (values nil t)))",178],["(values))))",202],["(values nil nil))",252],[":return-values",315],["2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values.",417],["(values)))",861],["(values))",2305],["(values",2353],["(values",2822]],"useCount":28064},{"word":"var","context":[["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8",404],["(declare (ignore var-0 var-1 var-2 var-3 var-4 var-5",402]],"useCount":59831},{"word":"variable","context":[["(doc 'variable)))",94],[":variable-values",177],["(:variable",162],[":variable (when (boundp symbol)",94],["(declare (ignore variable-name))",73],["(doc 'variable))))",63],[":variable var",71],["(defun condition-notify (condition-variable)",69],["(defun make-condition-variable (&key name)",65],[":variable (multiple-value-bind (kind recorded-p)",63]],"useCount":5868},{"word":"variables","context":[["\"A list of variables bindings during pretty printing.",34],["\"Return a vector of debug-variables in frame.\"",63],["'(&rest variables))",46],["thematic-substrate::dont-show-variables",40],["variables)",35],[";; These are user-configurable variables:",35],[";;; These variables are dynamically bound during debugging.",34],["\"Call FUN with variables bound according to ALIST.",34],["\"An alist to initialize dynamic variables in worker threads.",34],[";;; Resource contention: condition variables",83]],"useCount":2493},{"word":"vars","context":[["(dolist (var vars)",86],["vars",89],["(multiple-value-bind (vars vals store-vars writer-form reader-form)",44],["(multiple-value-bind (vars vals store-vars writer-form reader-form)",44],["(vars (frame-debug-vars frame))",54],["(vars (frame-debug-vars frame))",54],["(when vars",56],["vars)",58],["(defun frame-debug-vars (frame)",63],["vars))",63]],"useCount":3282},{"word":"vec","context":[["(opr::vec-ptr-index   last2)",52],["(opr::vec-ptr-buffer first2)",65],["(opr::vec-ptr-index   last1)",67],["(opr::vec-ptr-index  last2)",77],["(opr::vec-ptr-index  last)",83],["(opr::vec-ptr-index  last1)",92],["vec))",93],["(opr::vec-ptr-index  result)",130],["(opr::vec-ptr-buffer first1)",131],["(opr::vec-ptr-index  first2)",151]],"useCount":1866},{"word":"vector","context":[["(vector-push-extend",73],["vector)",221],[":type (cl:vector cl:float)",200],["vector))",131],["(let ((bit-vector (make-array (- end start) :element-type 'bit :initial-element 1))",108],["do (setf (sbit bit-vector (- i start)) 0)",108],["((simple-vector-p sequence)",99],["(map 'vector",89],["(with-vector (buffer-bbuf buffer-bytes)",74],["(vector",373]],"useCount":10881},{"word":"verbose","context":[["(when verbose",332],[":verbose verbose",75],[":verbose verbose",75],["(let ((*compile-print* t) (*compile-verbose* nil))",65],[":test test :verbose verbose",50],[":test test :verbose verbose",50],["(when *load-verbose*",47],[":input nil :output *verbose-out*))",46],["(*compile-verbose* nil)",44],["(declare (ignore force force-not verbose version))",42]],"useCount":3040},{"word":"version","context":[[":category \"VERSION_1_2\" :deprecated \"3.1\" :version \"1.2\")",434],[";;; exception statement from your version.",458],[":category \"VERSION_3_0\" :deprecated nil :version \"3.0\")",431],[";;; this exception to your version of the library, but you are not",458],["((part-of-expression Tractatus-original-german-version)",541],["\"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",711],[":category \"VERSION_2_0\" :deprecated nil :version \"2.0\")",727],["((part-of-expression Tractatus-original-english-version)",1040],[";;; Compiled by f2cl version:",1102],[":category \"VERSION_1_0\" :deprecated \"3.1\" :version \"1.0\")",1368]],"useCount":23892},{"word":"view","context":[["(view textual-view)",172],["(view textual-view)",172],["((defined-by-view first-wittgenstein-philosophy)",131],["(with-focused-view self",88],["(with-focused-view view",72],["(with-focused-view view",72],[":view-subviews",62],[":view view",50],[":view view",50],["(text-view text-view)",48]],"useCount":2910},{"word":"vm","context":[["(ash 1 sb-vm:n-lowtag-bits))",34],["vm:other-immediate-1-type",58],["vm:other-immediate-0-type",58],["o vm:code-trace-table-offset-slot)))",43],["(loop for i from vm:code-constants-offset",43],["block (* vm:vector-data-offset vm:word-bits)",35],["block (* vm:vector-data-offset vm:word-bits)",35],["(* sb-vm:code-constants-offset",34],["(cond ((= header sb-vm:simple-fun-header-widetag)",34],["vm:function-pointer-type",58]],"useCount":1870},{"word":"void","context":[[";; type: \"void\"",435],[":result-type :void",1201],[":void",907],[";; args: \"void\"",449],["\"void\" :args",347],[":return \"void\" :args",175],["(data (:pointer :void)))",112],["(pixels (:pointer :void)))",93],["(pointer (:pointer :void)))",86],["(:p-next (:pointer :void))#|opaque t|#",72]],"useCount":7194},{"word":"w","context":[["arg1 (cdras 'w l)",99],["w-%offset%)",93],["(w double))",77],["(mapcar (lambda (w)",75],[":width w",71],["(w float))",69],["(when w",66],["(w :pointer))",64],["w))",99],["w)",52]],"useCount":6208},{"word":"wait","context":[["(defun %setup-wait-list (wait-list)",80],["(defun acquire-lock (lock &optional (wait-p t))",79],["(defun wait-for-input-internal (wait-list &key timeout)",78],["(defun wait-for-input-internal (wait-list &key timeout)",78],["(defun %setup-wait-list (wait-list)",80],["(defun %add-waiter (wait-list waiter)",84],["(defun %remove-waiter (wait-list waiter)",84],["(defimplementation wait-for-input (streams &optional timeout)",113],["(remove-waiter (wait-list usocket) usocket))",127],["(when (wait-list usocket)",134]],"useCount":4587},{"word":"warn","context":[["(*warn-if-redefine-kernel* nil))",29],["(when (boundp 'excl:*warn-on-nested-reader-conditionals*)",54],["(t (apply #'warn fstring args)",29],["(warn \"~a\" condition))))))",29],["(when warn",40],["(warn \"inconsistent form-number-translations\")",42],["(:warn (warn",42],["(:warn (warn",42],["(warn",51],["(version (maybe-warn (lisp-version-string)",29]],"useCount":2002},{"word":"warning","context":[[":warning \"a non-negative number\"",79],[":severity :warning",85],["(handler-bind ((warning #'muffle-warning))",94],["(handler-bind ((warning #'muffle-warning))",94],["(print-warning",197],["(defun handle-compiler-warning (condition)",73],["(handler-bind ((warning #'handle-compiler-warning))",50],[":warning \"a function or nil\"",44],["\"Handle a condition caused by a compiler warning.\"",47],["(handler-bind ((warning #'handle-compiler-warning))",50]],"useCount":4155},{"word":"warnings","context":[["(multiple-value-bind (output-file warnings-p failure-p)",61],["(optimize #+cmu(ext:inhibit-warnings 3)))",60],["(values output-file warnings-p",57],["(declare (ignore warnings?))",62],["(when warnings-p",36],["(reduce-warnings",37],["(when (and *warnings-file-type* (not (builtin-system-p c)))",39],["#+cmu (declare (optimize (extensions:inhibit-warnings 3)))",46],["(let ((jvm::*resignal-compiler-warnings* t)",46],["(get-warnings kb)))))",54]],"useCount":3160},{"word":"was","context":[["A return code of 0 shall indicate the state change was successfully initiated.",344],["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126],["(was-made-by STANFORD-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",696],[";;;; This file was automatically generated by /home/bill/programming/cl-glfw/generators/make-bindings-from-spec.lisp",361],["(was-made-by THE-CATHOLIC-ENCYCLOPEDIA-website)",296],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by INTERNET-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",195],["The PRODIGY System was designed and built by Steven Minton, Craig Knoblock,",90],["(was-made-by THE-ISM-BOOK-website)",165]],"useCount":8030},{"word":"we","context":[[";; In multithreaded systems we delegate certain tasks to specific",34],[";;; with C-c C-c, we have to search the position in the source string.",34],["C:*COMPILER-NOTIFICATION-FUNCTION*. The advantage is that we get to",34],[";; If we reached the end of the list before start-bis",72],["instead, we only do a full scan if the set of packages has changed.\"",34],["remove-empty-subseqs) ; empty subseq we don't want",68],[";; the closure we return is just a thin wrapper around",40],[";;; Here we add hooks to push updates of relevant information to",34],[";;; sending redundant information to Emacs -- we just say what's",34],[";; we make a reservation for our slot in *REPEAT-COUNTERS*",40]],"useCount":6135},{"word":"website","context":[["(website-button-grid-html",14],["(website-config-column-html",16],["(was-made-by THE-ISM-BOOK-website)",165],["(was-made-by INTERNET-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",195],["(was-made-by DICTIONARY-OF-THE-PHILOSOPHY-OF-MIND-website)",198],["(was-made-by DICTIONARY-OF-PHILOSOPHY-website)",2841],["(was-made-by A-DICTIONARY-OF-PHILOSOPHICAL-TERMS-AND-NAMES-website)",1126],["(was-made-by STANFORD-ENCYCLOPEDIA-OF-PHILOSOPHY-website)",696],["(was-made-by THE-CATHOLIC-ENCYCLOPEDIA-website)",296]],"useCount":5547},{"word":"west","context":[["(:CATEGORY \"movie-west\"",5093]],"useCount":5093},{"word":"when","context":[["(eval-when (:compile-toplevel)",235],["(eval-when (:compile-toplevel :load-toplevel)",243],["(when result",263],["`(eval-when (:compile-toplevel :load-toplevel :execute)",707],["(eval-when (:compile-toplevel :load-toplevel :execute)",4491],["(eval-when (:load-toplevel :compile-toplevel :execute)",1503],["(when verbose",332],["(when value",409],["(eval-when (compile load eval)",378],["(eval-when (:load-toplevel :execute)",336]],"useCount":59162},{"word":"where","context":[["\"Describe where the function FN was defined.",34],[";; A stream where we send REPL results.",33],["argument to CL:SUBSEQ into the sequence indicating where processing",33],[";;; is also the place where we keep everything that needs to be",32],["\"The time the most recent measurement was taken, relative to the managed element where the statistic was collected.\"))",44],[":where",45],["where",48],["(declare (ignore where))",85],[":where (sql-binary-operator :name '= :left (sql-identifier :name \"langauge\")",84],[":where [= [emplid] 1])",52]],"useCount":2238},{"word":"which","context":[["\"Returns a string which emacs will read as equivalent to",34],["\"Return a function like F, but which returns any non-null value",34],[";;; which the previous approach using",34],["(:documentation \"Special class for external formats which use the",43],["(:DESCRIPTION \"Array of strings indicating which statistics to reset.\")))",44],["\"TransitioningToState indicates the target state to which the instance is transitioning.",343],["A value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.\")",343],[";;; module.  An independent module is a module which is not derived from",458],["inherited from another package Q (which implies",34],[";;; fuzzy: we have FUNCTION-SOURCE-LOCATION which returns the",34]],"useCount":4393},{"word":"while","context":[["while char",56],["(defmacro while (test &body body)",54],["while c",50],["while j))",50],["(while (<= i n)",49],["while line",312],["while (plusp count)",161],["while f collect f)))",76],["while line do",66],["(while-collecting (c)",79]],"useCount":3897},{"word":"who","context":[["(cl-who:with-html-output (hunchentoot::*standard-output*)",60],["(defxref who-references pxref:list-readers)",41],["(who-ps-html",73],["(defxref who-references)",34],["(defxref who-binds)",34],["(defxref who-calls)",34],["(who:htm",38],["(defxref who-calls      pxref:list-callers)",41],["(defxref who-binds      pxref:list-setters)",41],["(defxref who-sets       pxref:list-setters)",41]],"useCount":2044},{"word":"width","context":[["(type card16 x y width height)",126],["(type card16 width height)",87],["(dotimes (x width)",77],["(:name |width| :type |SizeI| :direction :in)",570],["(width sizei)",651],["width",201],[":width width",189],["(width :int)",164],["(declare (ignore width height))",169],[":width width",189]],"useCount":10235},{"word":"will","context":[["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336],["SIZE-VAR is supplied, it will be bound to SIZE during BODY.\"",37],[";; note that REPEAT-MATCHER will call",40],["nil         ; decline, *DEBUGGER-HOOK* will be tried next.",53],["2) The code will not be distributed to other sites without the explicit",90],["3) Any bugs, bug fixes, or extensions will be forwarded to the designers.",90],["1) PRODIGY will only be used for internal, noncommercial research purposes.",90],["Deferred (8) indicates that the element might be completing commands, but will queue any new requests.",336],["Enabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests.",336],["Disabled (3) indicates that the element will not execute commands and will drop any new requests.",336]],"useCount":4640},{"word":"win","context":[["(win window-ptr))",34],["(def :int ((win window-ptr)",34],["win",72],["(when win",107],["(win window-ptr)",110],["(if win",134],["(xlib:with-state (win)",49],["(let ((win (find-window window)))",45],["(sdl2:with-gl-context (gl-context win)",44],["(xlib:draw-line win gc",36]],"useCount":4137},{"word":"win32","context":[["#-win32",298],["(sb-alien:define-alien-routine (#-win32 \"tempnam\" #+win32 \"_tempnam\" tempnam)",33],["((member :win32 *features*) nil)",34],[";; fixme: when SBCL/win32 gains better select() support, remove",34],["(in-package :win32)",36],["#-win32 (:library :default)",97],["#+win32 (:library \"WS2_32\")",99],["(:language #-win32 :stdc",99],["#+win32 :stdc-stdcall)",99],["#+win32",246]],"useCount":1995},{"word":"window","context":[["(window window))",135],["(declare (ignore window))",153],["window",178],["(window window)",220],["(window window)",220],["(declare (type window window))",242],["(declare (type window window))",242],["(declare (type window window)",273],["(declare (type window window)",273],["(when window",172]],"useCount":28992},{"word":"windows","context":[["#-windows-target",73],["#-windows",172],["#+windows",70],["#+windows-target",56],["((os-windows-p)",40],["(group-windows group)))",37],["#+os-windows",36],["do (loop for j in (screen-mapped-windows i)",32],[";(assert (member window (screen-mapped-windows screen)))",26],["(dolist (w windows)",28]],"useCount":3467},{"word":"with","context":[["(with-output-to-string (s)",1065],["(with-upgradability ()",1909],[";;; Redistribution and use in source and binary forms, with or without",1324],["(with-output-to-string (stream)",590],["(with-standard-io-syntax",623],["(with-output-to-string (out)",656],["(with-standard-io-syntax",676],["(f2cl-lib:with-multi-array-data",786],[";;;     provided with the distribution.",876],["(with-buffer-syntax ()",1129]],"useCount":62743},{"word":"without","context":[["2) The code will not be distributed to other sites without the explicit",90],[";;; Redistribution and use in source and binary forms, with or without",1324],["\\\"OK\\\" (5) - The element is fully functional and is operating within normal operational parameters and without error.",417],[";; Redistribution and use in source and binary forms, with or without",332],["(without-interrupts",235],["(odysseus-snark::*error-when-refutation-without-answer*))",233],["(without-slime-interrupts",232],[";; purpose with or without fee is hereby granted, provided that the above",60],["(defmacro without-interrupts (&body body)",63],[";;;; Redistribution and use in source and binary forms, with or without",148]],"useCount":4789},{"word":"word","context":[["(ash (sb-kernel:%code-code-size o) sb-vm:word-shift)",34],["word-spacing",32],["sb-vm:n-word-bytes))",34],["#'word-equal)",36],["((word-equal",105],["word              =word",95],["word              =word",95],["block (* vm:vector-data-offset vm:word-bits)",35],["head              =word",50],["!eval! (set-begin-time =word)",44]],"useCount":1930},{"word":"work","context":[["(setf (f2cl-lib:fref work-%data%",227],["(f2cl-lib:fref work-%data%",249],["(f2cl-lib:array-slice work",573],["((1 *)) work-%offset%)",813],["(f2cl-lib:array-slice work-%data%",1115],["work-%offset%)",1764],["(work double-float work-%data% work-%offset%))",136],["(setf (f2cl-lib:fref work-%data% (1) ((1 *)) work-%offset%)",195],["(f2cl-lib:array-slice work-%data% double-float (iwork)",198],["(setf (f2cl-lib:fref work-%data% (1) ((1 *)) work-%offset%)",195]],"useCount":8685},{"word":"write","context":[["(cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)",1100],["(cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream))",569],["(cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)",413],["(write-char #\\space)",764],["(cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)",413],["(cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)",339],["(cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)",413]],"useCount":19800},{"word":"written","context":[[";   Program written by Robert Livingston, 2008/11/04",30],["(has-form written-german)",541],["(has-form written-english)",526],[";;;         This code was written as part of the Ergo project.          ;;;",69],["(has-form   written-english)",54],["The server port is written to PORT-FILE-NAME.\"",34],["aborted and return immediately with the output written so far.\"",33],["\"Call FUNCTION with a new stream, return the output written to the stream.",33],[";   Program written by Robert Livingston, 98/05/13",30],["The output should be written to standard output.",27]],"useCount":1805},{"word":"x","context":[["x)",773],["(mapcar #'(lambda (x)",475],["(f2cl-lib:fref x-%data%",825],["x",819],["x-%offset%)",779],["#'(lambda (x)",775],["(x (copy-seq orig))",471],["x-%offset%))))",393],["(lambda (x)",771],["x))",752]],"useCount":71037},{"word":"x1","context":[["(with-standard-rectangle* (:x1 x1 :y1 y1)",42],["(with-standard-rectangle* (:x1 x1 :y1 y1)",42],["(:name |type| :type |GLenum| :direction :out :array t :size #x1)",52],["(with-standard-rectangle (x1 y1 x2 y2)",53],["(:name |length| :type |SizeI| :direction :out :array t :size #x1)",122],["(let* ((x1 ($float (cadr arg1)))",40],["(with-bounding-rectangle* (x1 y1 x2 y2)",40],["(multiple-value-bind (x1 y1 x2 y2) (bounding-rectangle* (sheet-region pane))",47],["(let ((dx (- nx x1))",45],["(multiple-value-bind (x1 y1) (line-start-point* a)",45]],"useCount":1911},{"word":"x86","context":[["`(sys.lap-x86:and8 :al #b1111)",64],["(sys.lap-x86:leave)",66],["(sys.lap-x86:gs)",62],["(sys.lap-x86:mov64 :rax :r8)",62],["(sys.lap-x86:ret))",127],["#+x86-64",102],["#+x86",90],["`(sys.lap-x86:jne ,type-error-label)",87],["(x86::parse-assembler",69],["(sys.lap-x86:mov64 :rbp :rsp)",66]],"useCount":4228},{"word":"xlib","context":[["(xlib:display-finish-output *display*)",129],["(xlib:change-property xwin :_NET_WM_STATE",32],["(xlib:with-state (parent)",35],["(xlib:draw-line win gc",36],["(when (xlib:window-p window)",46],[":colormap (xlib:screen-default-colormap *screen*)",49],["(xlib:with-state (win)",49],["(xlib:display-finish-output *display*))",54],["(xlib:display-finish-output *display*)))",63],["(in-package :xlib)",109]],"useCount":4338},{"word":"xref","context":[[";; And for xref support (1.0.1)",34],["(defun xref>elisp (xref)",34],["(defun source-location-for-xref-data (xref-data)",34],["(mapcar #'source-location-for-xref-data",34],["(xref-results (,function name))))",74],["(defun xref-results (symbols)",41],["(xref-locations :binds name))",44],["(xref-locations :macro-calls name t))",44],["(defun xref>elisp (xref)",34],["(member f (ignored-xref-function-names)))",34]],"useCount":2180},{"word":"xwin","context":[["(let* ((hints (xlib:wm-hints (window-xwin window)))",32],[":window (window-xwin win) :event-window (window-xwin win)",25],[":window (window-xwin win) :event-window (window-xwin win)",25],["(xwin-hide w)))",26],["(xlib:with-state (xwin)",25],["(xlib:change-property (window-xwin window) :_NET_WM_DESKTOP",20],["(setf (xwin-state (window-xwin window)) +iconic-state+)",20],["(setf (xwin-state (window-xwin window)) +iconic-state+)",20],["(xlib:change-property xwin :_NET_WM_STATE",32],["(unless (eq (xlib:window-map-state (window-xwin window)) :unmapped)",32]],"useCount":2540},{"word":"y","context":[[":test #'(lambda (x y)",196],["(y int)",294],["(declare (ignore x y))",255],["(y float)",238],["y",232],["x y",159],["y)",163],["(y double)",169],["(lambda (x y)",185],["(:name |y| :type |WinCoord| :direction :in)",221]],"useCount":26522},{"word":"you","context":[["make a symbol _external_, you'd have to use EXPORT",34],["symbols, you're actually not including the symbols inherited",34],["The rationale is that most times when you speak about \\\"internal\\\"",34],[";;; exception to your version of the library, but you are not obligated to",29],["to T unless you want to debug swank internals.\")",29],[";;; do so. If you do not wish to do so, delete this exception statement",29],[";; If it is not present, you can access it from",28],[";;; terms of your choice, provided that you also meet, for each linked",487],[";;; this exception to your version of the library, but you are not",458],[";;; obligated to do so.  If you do not wish to do so, delete this",458]],"useCount":2918},{"word":"your","context":[[";;; exception statement from your version.",458],[";;; terms of your choice, provided that you also meet, for each linked",487],[";;; and test files, if your copy came without them) before reporting",34],[";;; exception to your version of the library, but you are not obligated to",29],[";;; this exception to your version of the library, but you are not",458],[";;; from your version.",29],["(define-test write-your-own-let-statement",26],["(define-test test-make-your-own-array",25],[";;; your configuration file:",24],["\"make your own array that meets the specifications below.\"",25]],"useCount":2070},{"word":"z","context":[["z)",114],["(f2cl-lib:fref z-%data%",646],["z-%offset%)",491],["((%m (z) z))",276],["((%m (z) z))",276],["(setf (f2cl-lib:fref z-%data%",199],["z-%offset%))",165],["(z float))",157],["((z)",138],["(let ((u (simpcheck (cadr form) z))",130]],"useCount":13556},{"word":"zero","context":[["(let* ((one 1.0) (zero 0.0))",86],["((/= (f2cl-lib:fref x (jx) ((1 *))) zero)",116],["zero)",518],["((= beta zero)",237],["(ignorable one zero))",134],["(declare (type (double-float 0.0 0.0) zero)",128],["(type (double-float 0.0 0.0) zero)",112],["(setf temp2 zero)",108],["(if (null lst) zero",104],["((/= (f2cl-lib:fref x (j) ((1 *))) zero)",96]],"useCount":5030},{"word":"zerop","context":[["((zerop i) frame)))",84],["(if (zerop x)",45],["(unless (zerop amount)",47],["(when (zerop size)",49],["(or (zerop (two-arg-- x y))",70],["(unless (zerop start-bis)",96],["(loop until (zerop start-bis)",99],["until (zerop end-start)",101],["(if (zerop n)",141],["until (zerop count)",186]],"useCount":4179},{"word":"~","context":[["(cl:format cl:nil \"~%~%~%\"))",70],["(cl:format cl:nil \"~%~%~%\"))",70],["(c-format out \")~%\")",71],["(format t \"~%\"))",72],["(cl:format cl:nil \"~%~%\"))",94],["(cl:format cl:nil \"~%~%\"))",94],["(format t \"~%\")",199],["~@",230],["(cl:format cl:nil \"~%~%~%\"))",70],["(format out \"~&--~&~A~%\" (date))",61]],"useCount":16443},{"word":"~A","context":[["(format nil \"(~S () ~A)\" 'lambda string))))",46],[";(format t \"~%}}} a: ~A, b: ~A {{{~%\" a b)",35],["(format out \"(~{~{~A ~A~}~^, ~})~%\" fargs)",36],[";(format t \"~%}}} a: ~A, b: ~A {{{~%\" a b)",35],["(error \"Unknown symbol: ~A [in ~A]\" string package))))",34],["(cons (format nil \"(~A . ~A)\"",34],["(cons (format nil \"(~A . ~A)\"",34],["(format out \"~{#include <~A>~%~}\" includes))",36],["(t (error \"Malformed syntax in WITH-STRUCT: ~A\" name))))",49],[":message (format nil \"~A\" condition)",56]],"useCount":5040},{"word":"~A~","context":[["(format out \"(~{~{~A ~A~}~^, ~})~%\" fargs)",36],["(format t \"~A~%\" header)",64],["(format out \"~&--~&~A~%\" (date))",61],["(format t \"~&   : w = ~A~%\" w))",42],["(format out \"#define ~A~@[ ~A~]~%\" name value))",36],["(format out \"#define ~A~@[ ~A~]~%\" name value))",36],["(escape-non-ascii (format nil \"Unexpected event: ~A~%\" event))",33],["(format t \"~&chdir ~A~%\" src)",35],[";; Backtrace:~%~{~A~%~}~",34],[";;  condition: ~A~%~",34]],"useCount":2360},{"word":"~S","context":[["(_ (error \"The value ~S is an invalid form.\" form))))",41],["(format nil \"(~S () ~A)\" 'lambda string))))",46],["(format nil \"~S is now traced.\" spec))))",47],["\"Complex lambda-list not supported: ~S ~S\" name args)",54],["\"Complex lambda-list not supported: ~S ~S\" name args)",54],["(format nil \"~S is now traced.\" fspec))))",55],["(format nil \"~S is now untraced.\" fspec))",55],["(error \"Index ~S out of bounds. Must be 0 <= n < ~D~%\"",48],["(format nil \"~S is now untraced.\" spec))",63],["(t (format nil \"Cannot return from frame: ~S\" frame)))))",68]],"useCount":4807},{"word":"~a","context":[[":command (format nil \" ~a w ~a lw ~a lt ~a lc ~a\"",40],["\"~a\"",52],[":command (format nil \" ~a w ~a lw ~a lt ~a lc ~a\"",40],["(format nil \"~a ~a ~a\"",39],["(format nil \"~a ~a ~a\"",39],["(format nil \"~a ~a ~a\"",39],[";;(log-event \"send-to-emacs: ~a\" event)",33],[":command (format nil \" ~a w ~a lw ~a lt ~a lc ~a\"",40],[":command (format nil \" ~a w ~a lw ~a lt ~a lc ~a\"",40],[":command (format nil \" ~a w ~a lw ~a lt ~a lc ~a\"",40]],"useCount":3636}]