[{"word":"A","context":[[", A.type_ \"button\"",21],["import qualified Halogen.HTML.Attributes as A",124],["import Data.Array as A",162],["import qualified Data.Array as A",58],["import qualified Halogen.HTML.Events as A",25],["A.catMaybes",25],["import qualified Thermite.Html.Attributes as A",17],["cc.measures A.!! 0 >>= view S._value",18],["cc.series A.!! 0 >>= view S._value",20],["import qualified Halogen.HTML.Events.Forms as A",18]],"useCount":628},{"word":"AJAX","context":[["(MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)",23],["(Error -> Eff (ajax :: AJAX | e) Unit)",12],["import Network.HTTP.Affjax (AJAX())",23],["import Network.HTTP.Affjax (AJAX)",28],[", ajax :: AJAX",12]],"useCount":98},{"word":"ARIA","context":[[", ARIA.label label",14],["import Halogen.HTML.Properties.Indexed.ARIA as ARIA",123],["import Halogen.HTML.Properties.Indexed.ARIA as ARIA",123]],"useCount":260},{"word":"AT","context":[["import SlamData.Workspace.AccessType as AT",29]],"useCount":29},{"word":"AVAR","context":[["import Control.Monad.Aff.AVar (AVAR())",19],[", avar :: AVAR",17],[". (Affable (avar ∷ AVAR | eff) g, Functor g)",21],["import Control.Monad.Aff.AVar (AVAR)",56]],"useCount":113},{"word":"AVar","context":[["import Control.Monad.Aff.AVar as AVar",20],["import Control.Monad.Aff.AVar (AVAR)",56],["import Control.Monad.Aff.AVar (AVAR())",19],["import Control.Monad.Aff.AVar as AVar",20]],"useCount":115},{"word":"AccessType","context":[["import SlamData.Workspace.AccessType (AccessType(..))",13],["import SlamData.Workspace.AccessType as AT",29],["import SlamData.Workspace.AccessType (AccessType(..))",13]],"useCount":55},{"word":"Ace","context":[["import Ace.EditSession as Session",20],["import Ace.Types",38],["import Ace.Editor as Editor",22],["import Ace.Config as AceConfig",12]],"useCount":92},{"word":"Action","context":[["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["spec :: T.Spec _ State _ Action",14],["import SlamData.Workspace.Action as WA",16],["import qualified Thermite.Action as T",20],["data Action",28],["action = Action \\args -> do",32],["view :: State -> Html Action",32],["action :: Action",39]],"useCount":194},{"word":"Activate","context":[["CC.Activate next →",62]],"useCount":62},{"word":"AdditionalSource","context":[["import SlamData.Workspace.Deck.AdditionalSource (AdditionalSource)",15],["import SlamData.Workspace.Deck.AdditionalSource (AdditionalSource)",15]],"useCount":30},{"word":"Additive","context":[["import Data.Monoid.Additive (Additive(..))",15],["import Data.Monoid.Additive (Additive(..))",15],["import Data.Monoid.Additive ()",11]],"useCount":41},{"word":"AddressBook","context":[["import Data.AddressBook",25],["module Data.AddressBook where",11]],"useCount":36},{"word":"Advanced","context":[["import Quasar.Advanced.Types (ProviderR)",15],["import Quasar.Advanced.QuasarAF as QF",33]],"useCount":48},{"word":"Aff","context":[["import Control.Monad.Aff.Bus as Bus",28],["import Control.Monad.Aff (attempt)",32],["import Control.Monad.Aff.Class (liftAff)",42],["import Control.Monad.Aff.AVar (AVAR)",56],["import Control.Monad.Aff (Aff())",60],["import Control.Monad.Aff",97],["import Control.Monad.Aff (Aff)",90],["import Control.Monad.Aff (Aff)",90],["import Control.Monad.Aff (Aff())",60],["import Control.Monad.Aff.Free (class Affable)",27]],"useCount":949},{"word":"Affable","context":[["import Control.Monad.Aff.Free (class Affable, fromAff)",18],[". (Monad m, Affable (QEff eff) m)",43],["import Control.Monad.Aff.Free (class Affable)",27],[". (Monad m, Affable SlamDataEffects m)",21],[". (Affable (avar ∷ AVAR | eff) g, Functor g)",21],[". Affable (QEff eff) m",21],[". (Functor m, Affable (QEff eff) m)",17],[". (Affable SlamDataEffects m)",15],[". (Affable SlamDataEffects m, Ord k)",14],["import Control.Monad.Aff.Free (class Affable, fromEff)",12]],"useCount":209},{"word":"Affjax","context":[["import Network.HTTP.Affjax (AJAX())",23],["import Network.HTTP.Affjax (AJAX)",28],["import Network.HTTP.Affjax",15],["import Network.HTTP.Affjax as AX",11]],"useCount":77},{"word":"Ag","context":[[", valueAggregation ∷ Ag.Aggregation",22],["import SlamData.Workspace.Card.BuildChart.Aggregation as Ag",66]],"useCount":88},{"word":"Aggregation","context":[["| ValueAgg (f Aggregation)",11],["import SlamData.Workspace.Card.BuildChart.Aggregation (nonMaybeAggregationSelect)",18],[", valueAgg ∷ Select Aggregation",22],[", valueAggregation ∷ Ag.Aggregation",22],["import SlamData.Workspace.Card.BuildChart.Aggregation as Ag",66],["import SlamData.Workspace.Card.BuildChart.Aggregation (Aggregation)",44],["import SlamData.Workspace.Card.BuildChart.Aggregation (Aggregation)",44]],"useCount":227},{"word":"Alt","context":[["import Control.Alt",106],["import Control.Alt ((<|>))",167],["import Control.Alt ()",29],["import Control.Alt (class Alt)",28],["import Control.Alt (class Alt)",28],["import Control.Alt (class Alt, (<|>))",20],["import Control.Alt (class Alt, (<|>))",20]],"useCount":398},{"word":"Alternative","context":[["import Control.Alternative (class Alternative)",46],["import Control.Alternative",83],["import Control.Alternative (class Alternative)",46],["import Control.Alternative (Alternative)",20],["import Control.Alternative ()",20],["import Control.Alternative (Alternative)",20]],"useCount":235},{"word":"AnyPath","context":[["import Quasar.Types (AnyPath, DirPath, FilePath)",11],["⇒ AnyPath",15]],"useCount":26},{"word":"Apply","context":[["import Control.Apply ((*>))",111],["import Control.Apply (class Apply, apply, (*>), (<*), (<*>))",11],["import Control.Apply (class Apply, apply, (*>), (<*), (<*>))",11],[", module Control.Apply",17],["import Control.Apply ((*>), (<*))",17],["import Control.Apply (lift2)",26],["import Control.Apply",81]],"useCount":274},{"word":"ArbModel","context":[["newtype ArbModel = ArbModel M.Model",13],["( ArbModel",13],["newtype ArbModel = ArbModel M.Model",13],["runArbModel (ArbModel m) = m",14]],"useCount":53},{"word":"Arbitrary","context":[["import Test.StrongCheck (QC(), Result(..), Arbitrary, arbitrary, quickCheck, (<?>))",12],["import Test.QuickCheck.Arbitrary (class Arbitrary, arbitrary)",13],["import Test.QuickCheck.Arbitrary (class Arbitrary, arbitrary)",13],["import Test.StrongCheck (QC, Result(..), class Arbitrary, arbitrary, quickCheck, (<?>))",15],["import Test.QuickCheck.Arbitrary",19],["import Test.StrongCheck.Arbitrary (class Arbitrary, arbitrary)",22],["import Test.StrongCheck.Arbitrary (class Arbitrary, arbitrary)",22],["import Test.StrongCheck.Arbitrary as SC",26],["import Test.StrongCheck.Arbitrary (arbitrary)",34]],"useCount":176},{"word":"Argonaut","context":[["import Data.Argonaut.Encode (EncodeJson, encodeJson)",25],["import Data.Argonaut.Encode (EncodeJson)",26],["import Data.Argonaut (encodeJson, decodeJson)",25],["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["import Data.Argonaut (JArray, Json)",29],["import Data.Argonaut.Core (jsonEmptyObject)",30],["import Data.Argonaut.Combinators ((~>), (:=), (.?))",39],["import Data.Argonaut as J",43],["import Data.Argonaut.Decode (DecodeJson, decodeJson)",48],["import Data.Argonaut (JCursor)",67]],"useCount":590},{"word":"Args","context":[["import Pulp.Args",55],["import Pulp.Args.Get",35],["Args.optionDefault \"main\" [\"--main\", \"-m\"] Type.string",12]],"useCount":102},{"word":"Arr","context":[["import Data.Array as Arr",79]],"useCount":79},{"word":"Array","context":[["import Data.Array as Array",101],["import Data.Array as Array",101],["import Data.Array as Arr",79],["-> Array a",69],["import Data.Array as A",162],["import Data.Array",176],["import qualified Data.Array as A",58],["import Data.Array ()",52],["import Data.Array (map)",35],["→ Array JCursor",30]],"useCount":1328},{"word":"Assert","context":[["import Test.Assert (assert)",18],["import Test.Assert (ASSERT, assert)",20],["import Test.Assert",29]],"useCount":67},{"word":"Attribute","context":[["(:=) (AttributeKey key) value = Attribute",12],["newtype Attribute = Attribute",20],["newtype Attribute = Attribute",20],[", Attribute()",12],["renderAttribute :: Attribute -> String",12]],"useCount":76},{"word":"AttributeKey","context":[["_class :: AttributeKey String",12],["newtype AttributeKey a = AttributeKey String",13],["height = AttributeKey \"height\"",16],["newtype AttributeKey a = AttributeKey String",13],["width = AttributeKey \"width\"",16],["_class = AttributeKey \"class\"",16],["href = AttributeKey \"href\"",16],["src = AttributeKey \"src\"",16],["(:=) (AttributeKey key) value = Attribute",12],["src :: AttributeKey String",12]],"useCount":154},{"word":"Attributes","context":[["import qualified Halogen.HTML.Attributes as A",124],["import qualified Thermite.Html.Attributes as A",17]],"useCount":141},{"word":"Auth","context":[["import Quasar.Auth as Auth",18],["-> M.Maybe Auth.IdToken",33],["import Quasar.Auth as Auth",18],["import SlamData.Quasar.Auth as Auth",13],["import SlamData.Quasar.Auth as Auth",13]],"useCount":95},{"word":"Authorization","context":[["[{ field : \"Authorization\" , value : encodeHeader spOpts_' authorization",18],["[Tuple \"Authorization\" (gDefaultToURLPiece authorization)]",18]],"useCount":36},{"word":"Axes","context":[["import SlamData.Workspace.Card.BuildChart.Axis (Axes, initialAxes)",31],["{ axes ∷ Axes",31]],"useCount":62},{"word":"Axis","context":[["import SlamData.Workspace.Card.Chart.Axis as Ax",15],["import SlamData.Workspace.Card.BuildChart.Axis (Axes, initialAxes)",31]],"useCount":46},{"word":"B","context":[["[ HP.classes [ B.btn ]",20],["$ [ B.alert, B.alertDanger ]",18],["[ HP.classes [ B.inputGroupBtn ] ]",19],["[ HP.classes [ B.btn, B.btnDefault ]",27],["[ HP.classes [ B.btn, B.btnDefault ]",27],["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],["[ HP.classes [ B.formControl ]",72],["[ HP.classes [ B.colXs6, CSS.axisLabelParam ]",23],["import qualified Halogen.Themes.Bootstrap3 as B",91],["import Halogen.Themes.Bootstrap3 as B",204]],"useCount":753},{"word":"BCE","context":[["import SlamData.Workspace.Card.BuildChart.Common.Eval as BCE",29],["records ← BCE.records resource",29]],"useCount":58},{"word":"BCI","context":[[", BCI.pickerWithSelect",30],["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["BCI.Open _    → pure unit",13],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["import SlamData.Workspace.Card.BuildChart.Inputs as BCI",22],["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31],[", BCI.pickerInput",47]],"useCount":176},{"word":"Base","context":[["import Graphics.D3.Base",21],["import KanColle.Expedition.Base",11],["import Enchant.Base",32]],"useCount":64},{"word":"Bifunctor","context":[["import Data.Bifunctor (bimap)",24],["import Data.Bifunctor (class Bifunctor)",14],["import Data.Bifunctor (lmap)",43],["import Data.Bifunctor (class Bifunctor)",14]],"useCount":95},{"word":"Bind","context":[[", module Control.Bind",13],["import Control.Bind (join)",13],["import Control.Bind (class Bind)",11],["import Control.Bind ((>=>))",40],["import Control.Bind ((=<<))",53],["import Control.Bind",57],["import Control.Bind (class Bind)",11]],"useCount":198},{"word":"Boolean","context":[["test \"Boolean\" do",12],["filterEntry :: Entry -> Boolean",12],["-> (a -> Boolean)",13],["→ Boolean",24],[", loading ∷ Boolean",18],[", shiftKey :: Boolean",14],["-> Boolean",36],["eqModel ∷ Model → Model → Boolean",43],["crossDomain :: Boolean",14],["quickCheck \\ (x :: Boolean) y ->",13]],"useCount":210},{"word":"Bootstrap3","context":[["import qualified Halogen.Themes.Bootstrap3 as B",91],["import Halogen.Themes.Bootstrap3 as B",204]],"useCount":295},{"word":"Browser","context":[["import Control.UI.Browser (select)",11],["import Control.UI.Browser as Browser",14],["import Control.UI.Browser as Browser",14]],"useCount":39},{"word":"Buffer","context":[["-> Buffer",21],["import Node.Buffer as Buffer",12],["import Node.Buffer as Buffer",12]],"useCount":45},{"word":"BuildChart","context":[["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DPC",23],["import SlamData.Workspace.Card.BuildChart.Common.Eval (type (>>))",27],["import SlamData.Workspace.Card.BuildChart.Common.Eval as BCE",29],["import SlamData.Workspace.Card.BuildChart.Inputs (PickerOptions)",30],["import SlamData.Workspace.Card.BuildChart.Axis (Axes, initialAxes)",31],["import SlamData.Workspace.Card.BuildChart.Aggregation (Aggregation)",44],["import SlamData.Workspace.Card.BuildChart.Aggregation as Ag",66],["import SlamData.Workspace.Card.BuildChart.Inputs as BCI",22],["import SlamData.Workspace.Card.BuildChart.ColorScheme (colors)",21],["import SlamData.Workspace.Card.BuildChart.CSS as CSS",22]],"useCount":435},{"word":"Bus","context":[["import Control.Monad.Aff.Bus as Bus",28],["import Control.Monad.Aff.Bus as Bus",28]],"useCount":56},{"word":"ButtonButton","context":[[", HP.buttonType HP.ButtonButton",64]],"useCount":64},{"word":"C","context":[["import qualified Model.Notebook.Cell.Common as C",12],["C.checkIncorrect btnCheck",12],["import Graphics.Canvas as C",12]],"useCount":36},{"word":"CC","context":[["CC.raiseUpdatedP' CC.EvalModelUpdate",73],["CC.ModelUpdated _ next →",62],["CC.Activate next →",62],["CC.ZoomIn next →",63],["import SlamData.Workspace.Card.Component as CC",72],["CC.raiseUpdatedP' CC.EvalModelUpdate",73],["CC.Deactivate next →",44],["CC.SetDimensions dims next → do",41],["CC.EvalCard info output next → do",40],["cardEval ∷ CC.CardEvalQuery ~> DSL",36]],"useCount":766},{"word":"CET","context":[["⇒ CET.CardEvalInput",33],["import SlamData.Workspace.Card.Eval.CardEvalT as CET",48],["→ CET.CardEvalT m Port.TaggedResourcePort",19],["→ CET.CardEvalT m Port.Port",40]],"useCount":140},{"word":"CID","context":[["import SlamData.Workspace.Card.CardId as CID",26]],"useCount":26},{"word":"CONSOLE","context":[[", console :: CONSOLE",38],["import Control.Monad.Eff.Console (CONSOLE, logShow)",20],["import Control.Monad.Eff.Console (CONSOLE())",23],["import Control.Monad.Eff.Console (log, CONSOLE)",23],["main :: Eff (console :: CONSOLE) Unit",26],["import Control.Monad.Eff.Console (CONSOLE(), log)",19],["main :: forall eff. Eff (console :: CONSOLE | eff) Unit",17],["import Control.Monad.Eff.Console (CONSOLE, log)",79],["import Control.Monad.Eff.Console (CONSOLE)",84],["main :: forall e. Eff (console :: CONSOLE | e) Unit",15]],"useCount":370},{"word":"CP","context":[["def = CP.defaultSpawnOptions",12],["import Node.ChildProcess as CP",15],["[ CP.nonSubmit",17],["import Halogen.CustomProps as CP",22]],"useCount":66},{"word":"CS","context":[["peek ∷ ∀ a. CS.ChildQuery a → DSL Unit",22],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28]],"useCount":238},{"word":"CSS","context":[["[ HP.classes [ CSS.chartConfigureForm ]",50],["import SlamData.Render.CSS as Rc",81],["import CSS.String",31],["import SlamData.Render.CSS as CSS",30],["import SlamData.Render.CSS as CSS",30],["import CSS.String (fromString)",28],["import CSS.Property",24],["[ HP.classes [ B.colXs6, CSS.axisLabelParam ]",23],["[ HP.classes [ CSS.withAggregation, CSS.chartConfigureForm ]",23],["[ HP.classes [ CSS.withAggregation, CSS.chartConfigureForm ]",23]],"useCount":567},{"word":"CT","context":[["import SlamData.Workspace.Card.CardType as CT",98]],"useCount":98},{"word":"Callback","context":[["-> Callback eff Unit",29]],"useCount":29},{"word":"Cancel","context":[["[ H.text \"Cancel\" ]",13],["[ HH.text \"Cancel\" ]",19]],"useCount":32},{"word":"Canceler","context":[["-> (Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["(Eff (db :: DB | e) (Canceler (db :: DB | e)))",14]],"useCount":28},{"word":"Canvas","context":[["import Graphics.Canvas",28],["import Graphics.Canvas as C",12],["import Graphics.Canvas hiding (translate)",11]],"useCount":51},{"word":"Card","context":[["import SlamData.Workspace.Card.Eval.CardEvalT as CET",48],["import SlamData.Workspace.Card.Common.EvalQuery (CardEvalQuery)",64],["import SlamData.Workspace.Card.BuildChart.Aggregation as Ag",66],["import SlamData.Workspace.Card.Port as Port",121],["import SlamData.Workspace.Card.Component as CC",72],["import SlamData.Workspace.Card.Model as Card",107],["import SlamData.Workspace.Card.BuildChart.Aggregation (Aggregation)",44],["import SlamData.Workspace.Card.Common.Render (renderLowLOD)",36],["import SlamData.Workspace.Card.CardType as CT",98],["import SlamData.Workspace.Card.Model as Card",107]],"useCount":1387},{"word":"CardEvalInput","context":[["⇒ CET.CardEvalInput",33]],"useCount":33},{"word":"CardEvalQuery","context":[["import SlamData.Workspace.Card.Common.EvalQuery (CardEvalQuery)",64],["cardEval ∷ CC.CardEvalQuery ~> DSL",36],["type QueryC = CardEvalQuery ⨁ Query",18]],"useCount":118},{"word":"CardEvalT","context":[["import SlamData.Workspace.Card.Eval.CardEvalT as CET",48],["→ CET.CardEvalT m Port.Port",40],["→ CET.CardEvalT m Port.TaggedResourcePort",19]],"useCount":107},{"word":"CardId","context":[["→ DeckId × CardId",11],[", parent ∷ Maybe (DeckId × CardId)",14],["import SlamData.Workspace.Card.CardId as CID",26],["import SlamData.Workspace.Card.CardId (CardId)",27],["import SlamData.Workspace.Card.CardId (CardId)",27]],"useCount":105},{"word":"CardType","context":[["import SlamData.Workspace.Card.CardType (CardType)",17],["import SlamData.Workspace.Card.CardType (CardType)",17],["import SlamData.Workspace.Card.CardType.ChartType as CHT",23],["import SlamData.Workspace.Card.CardType as CT",98]],"useCount":155},{"word":"Cell","context":[["import Model.Notebook.Cell",18],["import qualified Model.Notebook.Cell.Common as C",12],["import Controller.Notebook.Cell (requestCellContent)",12],["import SlamData.Notebook.Cell.Common.EvalQuery (CellEvalQuery())",14],["import Model.Notebook.Cell.Viz",15],["import Model.Notebook.Cell (Cell())",15],["import Model.Notebook.Cell (Cell())",15]],"useCount":101},{"word":"Char","context":[["import Data.Char (fromCharCode)",32],["import Data.Char",30]],"useCount":62},{"word":"Chart","context":[["import SlamData.Workspace.Card.Chart.Axis as Ax",15],["import SlamData.Workspace.Card.Chart.ChartConfiguration (ChartConfiguration)",14],["import SlamData.Workspace.Card.Chart.ChartType (ChartType(..))",13],["Chart",12],["import ECharts.Chart",12]],"useCount":66},{"word":"ChartConfiguration","context":[["→ ChartConfiguration",13],["import SlamData.Workspace.Card.Chart.ChartConfiguration (ChartConfiguration)",14],["import SlamData.Workspace.Card.Chart.ChartConfiguration (ChartConfiguration)",14]],"useCount":41},{"word":"ChartType","context":[["import SlamData.Workspace.Card.Chart.ChartType (ChartType(..))",13],["import SlamData.Workspace.Card.CardType.ChartType as CHT",23],["import SlamData.Workspace.Card.Chart.ChartType (ChartType(..))",13],["-> Eff (dom :: DOM | eff ) ChartType",12]],"useCount":61},{"word":"Check","context":[["test :: Check Unit",16],["-- | Check whether the underlying tree satisfies the 2-3 invariant",12]],"useCount":28},{"word":"ChildF","context":[["∘ H.ChildF unit",11],["type QueryP = Coproduct Query (H.ChildF ChildSlot ChildQuery)",19],["import Halogen (ChildF)",18],["type QueryP = QueryC ⨁ H.ChildF ChildSlot ChildQuery",16]],"useCount":64},{"word":"ChildPath","context":[["import Halogen.Component.ChildPath (ChildPath, cpL, cpR, (:>))",12],["import Halogen.Component.ChildPath (ChildPath, cpL, cpR, (:>))",12],["∷ ChildPath",84],[":: ChildPath",24]],"useCount":132},{"word":"ChildQuery","context":[["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["peek ∷ ∀ a. CS.ChildQuery a → DSL Unit",22],["type ChildQuery =",22],["type QueryP = Coproduct Query (H.ChildF ChildSlot ChildQuery)",19],["type ChildQuery = DP.QueryP JCursorNode",16],["type QueryP = QueryC ⨁ H.ChildF ChildSlot ChildQuery",16],["type HTML = H.ParentHTML ChildState Query ChildQuery Slam ChildSlot",15],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28]],"useCount":231},{"word":"ChildSlot","context":[["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28],["type HTML = H.ParentHTML ChildState Query ChildQuery Slam ChildSlot",15],["type QueryP = QueryC ⨁ H.ChildF ChildSlot ChildQuery",16],["type ChildSlot = Unit",18],["Unit ChildSlot",82],["type QueryP = Coproduct Query (H.ChildF ChildSlot ChildQuery)",19],["type ChildSlot =",21],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22]],"useCount":292},{"word":"ChildState","context":[[", ChildState",13],["type DSL = H.ParentDSL State ChildState Query ChildQuery Slam ChildSlot",14],["type HTML = H.ParentHTML ChildState Query ChildQuery Slam ChildSlot",15],["type ChildState = DP.StateP JCursorNode",16],["type ChildState =",21],["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28]],"useCount":173},{"word":"Choice","context":[["import Data.Profunctor.Choice",12],["import Data.Profunctor.Choice (class Choice)",12],["import Data.Profunctor.Choice (class Choice)",12]],"useCount":36},{"word":"Choose","context":[["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31]],"useCount":31},{"word":"Class","context":[["import Control.Monad.Eff.Class",94],["import Control.Monad.Error.Class (throwError)",115],["import Control.Monad.Eff.Class (liftEff)",275],["import SlamData.Quasar.Class (class QuasarDSL)",44],["import Control.Monad.Error.Class",79],["import Data.Foreign.Class",75],["import Control.Monad.Aff.Class (liftAff)",42],["import Control.Monad.Writer.Class",34],["import Control.Monad.Eff.Class (class MonadEff, liftEff)",32],["import Control.Monad.State.Class",58]],"useCount":1151},{"word":"Coerce","context":[["import Unsafe.Coerce (unsafeCoerce)",114],["import Unsafe.Coerce",17]],"useCount":131},{"word":"Combinators","context":[["import Data.Argonaut.Encode.Combinators ((~>), (:=))",11],["import Text.Parsing.Parser.Combinators as PC",12],["import Data.Argonaut.Decode.Combinators ((.?))",12],["import Text.Parsing.Parser.Combinators",24],["import Data.Argonaut.Combinators ((~>), (:=), (.?))",39]],"useCount":98},{"word":"Commands","context":[["import ECharts.Commands as E",30]],"useCount":30},{"word":"Common","context":[["import SlamData.Workspace.Card.Common.EvalQuery (CardEvalQuery)",64],["import SlamData.Render.Common (glyph)",41],["import SlamData.Workspace.Card.Common.Render (renderLowLOD)",36],["import View.Notebook.Common (HTML())",29],["import SlamData.Render.Common (row)",20],["import Test.Selenium.Common",20],["import View.File.Common (HTML())",24],["import SlamData.Workspace.Card.BuildChart.Common.Eval (type (>>))",27],["import Controller.Notebook.Common (I())",28],["import SlamData.Workspace.Card.BuildChart.Common.Eval as BCE",29]],"useCount":431},{"word":"Comonad","context":[["import Control.Comonad ()",26],["import Control.Comonad (class Comonad)",21],["import Control.Comonad (class Comonad)",21],["import Control.Comonad",42],["import Control.Comonad (class Comonad, extract)",20],["import Control.Comonad (Comonad)",15],["import Control.Comonad (Comonad)",15],["import Control.Comonad (class Comonad, extract)",20]],"useCount":180},{"word":"Component","context":[["comp ∷ H.Component StateP QueryP Slam",23],["import Halogen.Component",25],["comp ∷ H.Component State Query Slam",44],["import SlamData.Workspace.Card.Component as CC",72],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DPC",23],["import SlamData.Workspace.Deck.Component.State as DCS",22],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DP",17],["import SlamData.FileSystem.Search.Component as Search",15],["import SlamData.Header.Component as Header",15],["import SlamData.FileSystem.Listing.Component as Listing",15]],"useCount":512},{"word":"ComponentDSL","context":[["type DSL = H.ComponentDSL State Query Slam",39]],"useCount":39},{"word":"ComponentHTML","context":[["render :: State -> H.ComponentHTML Query",15],["type HTML = H.ComponentHTML Query",42],["render ∷ State → H.ComponentHTML Query",19],["render :: State -> ComponentHTML Query",28]],"useCount":104},{"word":"Config","context":[["import Ace.Config as AceConfig",12],["import SlamData.Config as Config",84],["import SlamData.Config as Config",84]],"useCount":180},{"word":"Conj","context":[["import Data.Monoid.Conj (Conj(..), runConj)",23],["import Data.Monoid.Conj (Conj(..), runConj)",23]],"useCount":46},{"word":"Console","context":[["import Control.Monad.Eff.Console (CONSOLE, logShow)",20],["import Test.Spec.Reporter.Console (consoleReporter)",23],["import Control.Monad.Eff.Console (log, CONSOLE)",23],["import Control.Monad.Eff.Console (CONSOLE())",23],["import Control.Monad.Aff.Console (log)",25],["import Control.Monad.Eff.Console (log)",61],["import Control.Monad.Eff.Console (CONSOLE, log)",79],["import Control.Monad.Eff.Console (CONSOLE)",84],["import Control.Monad.Eff.Console",198],["main = Control.Monad.Eff.Console.log \"Done\"",71]],"useCount":698},{"word":"Const","context":[["import Data.Const",14],["_ { picker = Just { options, select: f (Const unit) } }",28],["∷ (Const Unit JCursor → Selection (Const Unit))",30],["∷ (Const Unit JCursor → Selection (Const Unit))",30],["type Query = Const Void",12]],"useCount":114},{"word":"Cont","context":[["import Control.Monad.Cont.Trans",49],["import Control.Monad.Cont.Class (class MonadCont, callCC)",14]],"useCount":63},{"word":"Content","context":[[", Content()",12],["renderContentItem :: Content -> String",12],["data Content",13]],"useCount":37},{"word":"Control","context":[["import Control.Monad.Eff (Eff())",274],["import Control.Monad.Eff.Console",198],["import Control.Alt",106],["import Control.Apply ((*>))",111],["import Control.Monad.Error.Class (throwError)",115],["import Control.Monad.Trans",120],["import Control.Alt ((<|>))",167],["import Control.Monad.Eff",822],["import Control.Monad.Eff.Class (liftEff)",275],["import Control.Monad.Eff (Eff)",626]],"useCount":7464},{"word":"Controller","context":[["import Controller.Notebook.Common (I())",28],["import Controller.Notebook.Cell (requestCellContent)",12]],"useCount":40},{"word":"Coproduct","context":[["import Data.Functor.Coproduct (Coproduct)",11],["import Data.Functor.Coproduct (Coproduct())",31],["import Data.Functor.Coproduct (Coproduct())",31],["type QueryP = Coproduct Query (H.ChildF ChildSlot ChildQuery)",19],["import Data.Functor.Coproduct",12],["import Data.Functor.Coproduct (Coproduct)",11]],"useCount":115},{"word":"Core","context":[["import Data.Argonaut.Core (Json())",16],["import Data.Argonaut.Core (Json)",16],["import Optic.Core",141],["import Data.Argonaut.Core (jsonEmptyObject)",30],["import Halogen.HTML.Core (className, ClassName)",19],["import Data.Argonaut.Core",14]],"useCount":236},{"word":"Cp","context":[["[ Cp.nonSubmit",11],["import Halogen.CustomProps as Cp",51],[", Cp.nonSubmit",124]],"useCount":186},{"word":"Css","context":[["import Css.Size",20],["import qualified View.Css as Vc",25],["import qualified View.Css as VC",29],["import Css.Property",31],["import Css.String",52],["import Css.Stylesheet",24]],"useCount":181},{"word":"CustomProps","context":[["import Halogen.CustomProps as Cp",51],["import Halogen.CustomProps as CP",22]],"useCount":73},{"word":"DB","context":[["-> (Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["(Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["-> (Error -> Eff (db :: DB | e) Unit)",14],["(Error -> Eff (db :: DB | e) Unit)",15],["(Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["-> (Eff (db :: DB | e) (Canceler (db :: DB | e)))",14]],"useCount":85},{"word":"DCS","context":[["H.modify (DCS._displayMode .~ DCS.Backside)",12],["H.modify (DCS._displayMode .~ DCS.Backside)",12],["import SlamData.Workspace.Deck.Component.State as DCS",22],["H.modify (DCS._displayMode .~ DCS.Dialog)",29],["H.modify (DCS._displayMode .~ DCS.Dialog)",29]],"useCount":104},{"word":"DOM","context":[["import DOM (DOM)",216],["import DOM (DOM)",216],["import DOM",179],["import Data.DOM.Simple.Types",114],["-> (e -> Eff (dom :: DOM | t) Unit)",40],["import DOM (DOM())",69],["import DOM (DOM())",69],["import DOM.HTML (window)",57],["import DOM.HTML.Types (HTMLElement)",53],["import Data.DOM.Simple.Element",42]],"useCount":1574},{"word":"DP","context":[["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DP",17],["type ChildQuery = DP.QueryP JCursorNode",16],["type ChildState = DP.StateP JCursorNode",16]],"useCount":49},{"word":"DPC","context":[[", isSelectable: DPC.isLeafPath",24],["DPC.Dismiss _ →",24],["DPC.Confirm value _ → do",24],[", initialState: H.parentState DPC.initialState",24],["{ component: DPC.picker",24],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DPC",23],[", label: DPC.labelNode show",22],[", render: DPC.renderNode show",22]],"useCount":187},{"word":"DSL","context":[["eval ∷ Query ~> DSL",38],["synchronizeChildren ∷ DSL Unit",22],["type DSL = H.ParentDSL State ChildState Query ChildQuery Slam ChildSlot",14],["type DSL = H.ComponentDSL State Query Slam",39],["cardEval ∷ CC.CardEvalQuery ~> DSL",36],["raiseUpdate ∷ DSL Unit",22],["eval ∷ Q.QueryC ~> DSL",22],["import ECharts.Monad (DSL)",32],["type DSL =",24],["peek ∷ ∀ a. CS.ChildQuery a → DSL Unit",22]],"useCount":271},{"word":"Data","context":[["import Data.Tuple",426],["import Data.Maybe (Maybe(..))",496],["import Data.Maybe",791],["import Data.Either",388],["import Data.Either (Either(..))",330],["import Data.Tuple (Tuple(..))",262],["import Data.Monoid",179],["import Data.Foldable",177],["import Data.Function",202],["import Data.Array",176]],"useCount":13311},{"word":"Date","context":[["import Data.Date",33],["import Data.Date (now)",21]],"useCount":54},{"word":"Deactivate","context":[["CC.Deactivate next →",44]],"useCount":44},{"word":"Debug","context":[["import Debug.Trace",207],["main = Debug.Trace.trace \"Done\"",54],["import Debug.Trace ()",13],["import Debug.Profile",11]],"useCount":285},{"word":"Deck","context":[["import SlamData.Workspace.Deck.Dialog.Share.Model (SharingInput)",13],["import SlamData.Workspace.Deck.Component.Query as DCQ",12],["import SlamData.Workspace.Deck.BackSide.Component as Back",13],["import SlamData.Workspace.Deck.Component.Nested.Query as DNQ",13],["import SlamData.Workspace.Deck.Component.Query (Query)",13],["import SlamData.Workspace.Deck.Component.Cycle (DeckComponent)",14],["import SlamData.Workspace.Deck.AdditionalSource (AdditionalSource)",15],["import SlamData.Workspace.Deck.DeckId (DeckId, deckIdToString)",22],["import SlamData.Workspace.Deck.Component.State as DCS",22],["import SlamData.Workspace.Deck.DeckId (DeckId)",58]],"useCount":263},{"word":"DeckDSL","context":[["→ DeckDSL (L.List (DeckId × Port.VarMap))",12],["→ DeckDSL Unit",33]],"useCount":45},{"word":"DeckId","context":[["∷ L.List (DeckId × Port.VarMap)",12],["→ DeckDSL (L.List (DeckId × Port.VarMap))",12],[", modelCards ∷ Array (DeckId × Card.Model)",14],[", parent ∷ Maybe (DeckId × CardId)",14],["→ DeckId × Card.Model",18],["import SlamData.Workspace.Deck.DeckId (DeckId, deckIdToString)",22],["import SlamData.Workspace.Deck.DeckId (DeckId, deckIdToString)",22],["→ DeckId",53],["import SlamData.Workspace.Deck.DeckId (DeckId)",58],["import SlamData.Workspace.Deck.DeckId (DeckId)",58]],"useCount":305},{"word":"Decode","context":[["import Data.Argonaut.Decode (DecodeJson, decodeJson)",48],["Left err -> Failed $ \"Decode failed: \" ++ err",30],["Left err -> Failed $ \"Decode failed: \" <> err",26],["import Data.Argonaut.Decode (class DecodeJson, decodeJson)",22],["import Data.Argonaut.Decode (decodeJson)",17],["import Data.Argonaut.Decode.Combinators ((.?))",12]],"useCount":155},{"word":"DecodeJson","context":[["import Data.Argonaut.Decode (class DecodeJson, decodeJson)",22],["import Data.Argonaut.Decode (DecodeJson, decodeJson)",48]],"useCount":70},{"word":"Dialog","context":[["import SlamData.Dialog.Render (modalDialog, modalHeader, modalBody, modalFooter)",27],["H.modify (DCS._displayMode .~ DCS.Dialog)",29],["data Dialog",13],["import SlamData.FileSystem.Dialog.Component as Dialog",15],["import SlamData.FileSystem.Dialog.Component as Dialog",15],["showDialog $ Dialog.Error",17],[", module SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery",11],["import Model.Notebook.Dialog",12],["import SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery (SettingsQuery(..))",12],["import SlamData.Workspace.Deck.Dialog.Share.Model (SharingInput)",13]],"useCount":164},{"word":"DimensionPicker","context":[["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DPC",23],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.JCursor (groupJCursors, flattenJCursors)",19],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.Component as DP",17],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.JCursor (JCursorNode)",17]],"useCount":76},{"word":"DirPath","context":[["∷ DirPath",14],["import Model.Path (DirPath())",11],["⇒ DirPath",69],["import Utils.Path (DirPath)",47],["import Quasar.Types (AnyPath, DirPath, FilePath)",11],["→ DirPath",18]],"useCount":170},{"word":"Disj","context":[["import Data.Monoid.Disj (Disj(..), runDisj)",14],["import Data.Monoid.Disj (Disj(..), runDisj)",14]],"useCount":28},{"word":"Dismiss","context":[["DPC.Dismiss _ →",24],["[ HH.text \"Dismiss\" ]",16],["eval (Dismiss next) = pure next",36],[", HE.onClick (HE.input_ Dismiss)",48],["= Dismiss a",21],["| Dismiss a",21]],"useCount":166},{"word":"Document","context":[["import Data.DOM.Simple.Document",32]],"useCount":32},{"word":"Done","context":[["main = Control.Monad.Eff.Console.log \"Done\"",71],["main = Debug.Trace.trace \"Done\"",54],["g Done        = Done",34],["g Done        = Done",34],["Control.Monad.Eff.Console.log \"Done\"",12],["f Done        = Done",12],["f Done        = Done",12]],"useCount":229},{"word":"Download","context":[["| Download",13],["import SlamData.Download.Model as D",25]],"useCount":38},{"word":"Draftboard","context":[["import SlamData.Workspace.Card.Draftboard.Pane as Pane",16],["| Draftboard",16]],"useCount":32},{"word":"Dysinger","context":[["Author    : Tim Dysinger",26]],"useCount":26},{"word":"E","context":[["import qualified Halogen.HTML.Events as E",91],["import qualified Halogen.HTML.Events.Monad as E",65],["import qualified Halogen.HTML.Events.Handler as E",63],["E.fontFamily \"Ubuntu, sans\"",52],["E.textStyle do",46],["import Data.Either as E",45],["import Halogen.HTML.Events.Indexed as E",43],["import qualified Halogen.HTML.Events.Forms as E",40],["import qualified Halogen.HTML.Events.Indexed as E",31],["import ECharts.Commands as E",30]],"useCount":829},{"word":"EC","context":[["import ECharts as EC",11],["import Control.Monad.Error.Class as EC",20]],"useCount":31},{"word":"ECharts","context":[["import qualified Model.Notebook.ECharts as Me",15],["import ECharts.Chart",12],["import ECharts.Options",18],["import ECharts as EC",11],["import ECharts.Types.Phantom as ETP",27],["import ECharts.Types as ET",29],["import ECharts.Types.Phantom (OptionI)",29],["import ECharts.Commands as E",30],["import ECharts.Monad (DSL)",32]],"useCount":203},{"word":"EQ","context":[["EQ -> 0",29],["compare _ _ = EQ",20]],"useCount":49},{"word":"ET","context":[["E.axisType ET.Value",12],["import qualified Halogen.HTML.Events.Types as ET",14],["import ECharts.Types as ET",29]],"useCount":55},{"word":"ETP","context":[["import ECharts.Types.Phantom as ETP",27]],"useCount":27},{"word":"EXCEPTION","context":[["import Control.Monad.Eff.Exception (EXCEPTION)",78],[", err :: EXCEPTION",28],["import Control.Monad.Eff.Exception (EXCEPTION())",20],["-> Eff (fs :: FS, err :: EXCEPTION | eff) Unit",13]],"useCount":139},{"word":"EasyFFI","context":[["import Data.Foreign.EasyFFI",37]],"useCount":37},{"word":"Editor","context":[["Editor.setTheme \"ace/theme/chrome\" editor",14],["import Ace.Editor as Editor",22],["import Ace.Editor as Editor",22],["Editor.navigateFileEnd editor",14],["Editor.setEnableBasicAutocompletion true editor",12],["session <- Editor.getSession editor",16]],"useCount":100},{"word":"Eff","context":[["import Control.Monad.Eff (Eff())",274],["import Control.Monad.Eff.Console",198],["-> (Eff (webgl :: WebGl | eff) Unit)",94],["import Control.Monad.Eff.Class",94],["import Control.Monad.Eff.Exception (error)",86],["import Control.Monad.Eff (Eff)",626],["import Control.Monad.Eff (Eff)",626],["import Control.Monad.Eff.Class (liftEff)",275],["import Control.Monad.Eff",822],["import Control.Monad.Eff (Eff())",274]],"useCount":5047},{"word":"EffectTypes","context":[["import EffectTypes (FileAppEff())",15],["import EffectTypes (NotebookAppEff())",19]],"useCount":34},{"word":"Effects","context":[["import SlamData.Effects (Slam)",117],["import SlamData.Effects (SlamDataEffects)",29],["import SlamData.Effects (Slam())",44]],"useCount":190},{"word":"Either","context":[["import Data.Either ()",44],["import Data.Either (Either(..), either)",153],["import Data.Either (Either(..))",330],["import Data.Either (Either(..))",330],["import Data.Either",388],["import Data.Either (Either)",36],["import Data.Either as E",45],["import Data.Either (either)",72],["import Data.Either (Either)",36],["import Data.Either (Either(..), either)",153]],"useCount":1762},{"word":"Element","context":[["newtype Element = Element",20],["render :: Element -> String",19],["import Data.DOM.Simple.Unsafe.Element",17],["element name attribs content = Element",15],["import Data.DOM.Simple.Element",42],["| ElementContent Element",12],["Element",12],["→ Array Element",12],["→ Feature eff o (Array Element)",22],["newtype Element = Element",20]],"useCount":215},{"word":"Enchant","context":[["import Enchant.EventTarget (EventTarget)",23],["import Enchant.Base",32]],"useCount":55},{"word":"Encode","context":[["import Data.Argonaut.Encode (EncodeJson)",26],["import Data.Argonaut.Encode (EncodeJson, encodeJson)",25],["import Data.Argonaut.Encode (class EncodeJson, encodeJson)",12],["import Data.Argonaut.Encode.Combinators ((~>), (:=))",11]],"useCount":74},{"word":"EncodeJson","context":[["import Data.Argonaut.Encode (EncodeJson, encodeJson)",25],["import Data.Argonaut.Encode (class EncodeJson, encodeJson)",12],["import Data.Argonaut.Encode (EncodeJson)",26]],"useCount":63},{"word":"Encoding","context":[["import Node.Encoding",12],["import Node.Encoding (Encoding(UTF8))",38],["import Node.Encoding (Encoding(UTF8))",38],["import Node.Encoding (Encoding(..))",27],["import Node.Encoding (Encoding(..))",27]],"useCount":142},{"word":"Eq","context":[["import Data.Eq (class Eq, (==))",14],["import Data.Eq (class Eq, (==))",14],["class Eq a where",13]],"useCount":41},{"word":"Error","context":[["import Control.Monad.Error",55],["import SlamData.Quasar.Error as QE",61],["import Control.Monad.Error.Trans",44],["import Control.Monad.Eff.Exception (Error)",42],["import Control.Monad.Eff.Exception (Error())",21],["import Control.Monad.Error.Class",79],["import Control.Monad.Error.Class (throwError)",115],["(Error -> Eff (db :: DB | e) Unit)",15],["import Control.Monad.Error.Class as EC",20],["showDialog $ Dialog.Error",17]],"useCount":578},{"word":"Eval","context":[["import SlamData.Workspace.Card.Eval.CardEvalT as CET",48],["import SlamData.Workspace.Card.BuildChart.Common.Eval as BCE",29],["import SlamData.Workspace.Card.BuildChart.Common.Eval (type (>>))",27]],"useCount":104},{"word":"EvalCard","context":[["CC.EvalCard info output next → do",40]],"useCount":40},{"word":"EvalModelUpdate","context":[["raiseUpdate = synchronizeChildren *> CC.raiseUpdatedP' CC.EvalModelUpdate",21],["CC.raiseUpdatedP' CC.EvalModelUpdate",73]],"useCount":94},{"word":"EvalQuery","context":[["import SlamData.Workspace.Card.Common.EvalQuery (CardEvalQuery)",64],["import SlamData.Workspace.Card.Common.EvalQuery as CEQ",19],["import SlamData.Notebook.Cell.Common.EvalQuery (CellEvalQuery())",14]],"useCount":97},{"word":"Event","context":[["import Halogen.HTML.Events.Monad (Event())",13],["import Halogen.HTML.Events.Types (Event, MouseEvent)",13],["foreign import data Event :: *",13],["(Event -> EventHandlerContext eff props state result) -> Props",24]],"useCount":63},{"word":"EventTarget","context":[["import Enchant.EventTarget (EventTarget)",23],["import Enchant.EventTarget (EventTarget)",23]],"useCount":46},{"word":"Events","context":[["import Halogen.HTML.Events.Indexed as HE",164],["import Halogen.HTML.Events.Indexed as E",43],["import qualified Thermite.Events as T",20],["import qualified Halogen.HTML.Events as A",25],["import qualified Halogen.HTML.Events.Indexed as E",31],["import Halogen.HTML.Events.Handler as HEH",35],["import qualified Halogen.HTML.Events.Forms as E",40],["import qualified Halogen.HTML.Events.Handler as E",63],["import qualified Halogen.HTML.Events.Monad as E",65],["import qualified Halogen.HTML.Events as E",91]],"useCount":697},{"word":"Except","context":[["import Control.Monad.Except.Trans",13],["import Control.Monad.Except.Trans (ExceptT(..), runExceptT)",16],["import Control.Monad.Except (runExcept)",43]],"useCount":72},{"word":"Exception","context":[["import Control.Monad.Eff.Exception (error)",86],["import Control.Monad.Eff.Exception",85],["import Control.Monad.Eff.Exception (EXCEPTION)",78],["import Control.Monad.Eff.Exception as Exn",50],["-> Eff (fs :: FS, err :: Exception | eff) Unit",15],["import Control.Monad.Eff.Exception (Error)",42],["import Control.Monad.Eff.Exception (throwException)",29],["import Control.Monad.Eff.Exception (EXCEPTION())",20],["import Control.Monad.Eff.Exception (Error())",21],["import Control.Monad.Eff.Exception (message)",27]],"useCount":490},{"word":"Exn","context":[["→ m (Either Exn.Error Unit)",12],["import Control.Monad.Eff.Exception as Exn",50]],"useCount":62},{"word":"Expect","context":[["import Test.SlamData.Feature.Expectations as Expect",31],["Expect.backsideMenuPresented",21]],"useCount":52},{"word":"Expectations","context":[["import Test.SlamData.Feature.Expectations as Expect",31]],"useCount":31},{"word":"Express","context":[["import Node.Express.Types",16],["import Node.Express.Handler",12]],"useCount":28},{"word":"Extend","context":[["import Control.Extend (class Extend)",25],["import Control.Extend",37],["import Control.Extend ()",34],["import Control.Extend (class Extend)",25],["import Control.Extend (Extend)",16],["import Control.Extend (Extend)",16]],"useCount":153},{"word":"Extended","context":[["import Data.Json.Extended as EJSON",25],["import Optic.Extended (TraversalP())",20],["import Optic.Extended (TraversalP(), (^?))",12]],"useCount":57},{"word":"F","context":[["import Data.Foreign.Index as F",12],["import Data.Foldable as F",126],["F.and",36],["import Data.Foreign as F",16],["import Data.Foreign (F)",15],["import Data.Foreign.Class as F",15],["-- | instance functorF :: Functor F where",11],["import Data.Foreign.Extra as F",11]],"useCount":242},{"word":"FFI","context":[["import Pulp.System.FFI",79]],"useCount":79},{"word":"FROM","context":[["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"FS","context":[["import Node.FS.Aff as FS",21],["-> Eff (fs :: FS | eff) Unit",45],["import Node.FS (FS)",30],["import Node.FS (FS)",30],["import Node.FS.Aff as FS",21],["(Eff (fs :: FS | eff) Unit)",12],["import Node.FS (FS())",14],["-> Eff (fs :: FS, err :: Exception | eff) Unit",15],["import Node.FS (FS())",14],["-> Eff (fs :: FS, err :: EXCEPTION | eff) Unit",13]],"useCount":215},{"word":"Failed","context":[["Left err -> Failed $ \"Decode failed: \" <> err",26],["Left err -> Failed $ \"Decode failed: \" ++ err",30]],"useCount":56},{"word":"Feature","context":[["Feature.pressEnter",14],["import Test.SlamData.Feature.Expectations as Expect",31],["import Test.SlamData.Feature.Interactions as Interact",30],["import Test.Feature.Scenario (scenario)",30],["→ Feature eff o (Array Element)",22],["import Test.Feature.Log (successMsg)",22],["Feature.provideFieldValue",18],["Feature.selectFromDropdown",12],["→ Feature eff o Unit",67],["import Test.SlamData.Feature.Monad (SlamFeature)",35]],"useCount":281},{"word":"File","context":[["import Model.File",15],["foreign import data File :: *",13],["import Input.File (Input(), FileInput(..))",11],["import Model.File (_dialog)",20],["import View.File.Common (HTML())",24],["import Input.File (FileInput(..))",33],["import Input.File.Item (ItemInput(..))",11]],"useCount":127},{"word":"FileInput","context":[["import Input.File (Input(), FileInput(..))",11],["import Input.File (FileInput(..))",33]],"useCount":44},{"word":"FilePath","context":[["import Quasar.Types (FilePath)",40],["-> FilePath",26],["import Quasar.Types (AnyPath, DirPath, FilePath)",11],["go ∷ PU.FilePath → Resource",15],["→ FilePath",64],["⇒ FilePath",67]],"useCount":223},{"word":"FileSystem","context":[["import SlamData.FileSystem.Dialog.Component as Dialog",15],["import SlamData.FileSystem.Resource as R",70],["import SlamData.FileSystem.Routing (browseURL)",11],["import SlamData.FileSystem.Routing (parentURL)",12],[", module SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery",11],["import SlamData.FileSystem.Listing.Sort (Sort(..))",12],["import SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery (SettingsQuery(..))",12],["import SlamData.FileSystem.Search.Component as Search",15],["import SlamData.FileSystem.Listing.Component as Listing",15]],"useCount":173},{"word":"Firebase","context":[["import Web.Firebase.Types as FBT",11],["Firebase",12],["Firebase ->",11]],"useCount":34},{"word":"First","context":[["import Data.Maybe.First (First(..))",14],["import Data.Maybe.First (First(..))",14],["import Data.Maybe.First (First(..), runFirst)",15],["import Data.Maybe.First (First(..), runFirst)",15]],"useCount":58},{"word":"Fn2","context":[["import Data.Function (Fn2(), runFn2)",12],["import Data.Function.Uncurried (Fn2, runFn2)",17]],"useCount":29},{"word":"Fold","context":[["import Optic.Fold ((^?))",34],["-- | Fold a data structure from the right, keeping all intermediate results",12],["-- | Fold a data structure from the left, keeping all intermediate results",12],["-- | Fold a data structure, accumulating values in some `Monoid`.",11]],"useCount":69},{"word":"Foldable","context":[["import Data.Foldable (foldMap)",29],["import Data.Foldable (foldr)",29],["import Data.Foldable (traverse_)",30],["import Data.Foldable ()",34],["import Data.Foldable (fold)",36],["import Data.Foldable",177],["import Data.Foldable (intercalate)",38],["import Data.Foldable (for_)",68],["import Data.Foldable as F",126],["import Data.Foldable (foldl)",111]],"useCount":829},{"word":"For","context":[["-- | For example:",134],["-- | For example",11],["-- | For example,",13],["--  | For example:",28]],"useCount":186},{"word":"Foreign","context":[["import Data.Foreign.Class",75],["import Data.Foreign",134],["import Data.Foreign (Foreign)",34],["import Data.Foreign.Class (class IsForeign)",23],["import Data.Foreign.Class (readProp)",23],["import Data.Foreign (Foreign())",24],["import Data.Foreign (Foreign())",24],["import Data.Foreign ()",28],["import Data.Foreign (Foreign)",34],["import Data.Foreign.EasyFFI",37]],"useCount":589},{"word":"Form","context":[["import SlamData.Form.Select (Select, emptySelect)",30]],"useCount":30},{"word":"Forms","context":[["import qualified Halogen.HTML.Events.Forms as E",40],["import qualified Halogen.HTML.Events.Forms as A",18]],"useCount":58},{"word":"Free","context":[["import Control.Monad.Aff.Free (class Affable, fromEff)",12],["import Control.Monad.Aff.Free (class Affable, fromAff)",18],["import Control.Monad.Aff.Free (class Affable)",27],["import Control.Monad.Free",31]],"useCount":88},{"word":"Freeman","context":[["-- Maintainer  :  Phil Freeman <paf31@cantab.net>",27]],"useCount":27},{"word":"Function","context":[["import Data.Function (on)",88],["import Data.Function.Uncurried (Fn2, runFn2)",17],["import Data.Function.Uncurried (Fn3, runFn3)",15],["import Data.Function.Uncurried",13],["import Data.Function ()",33],["import Data.Function (Fn2(), runFn2)",12],["import Data.Function",202]],"useCount":380},{"word":"Functor","context":[["import Data.Functor.Coproduct (Coproduct())",31],[", module Data.Functor",23],[". (Affable (avar ∷ AVAR | eff) g, Functor g)",21],["import Data.Functor.Invariant (class Invariant)",17],["-- | The `Functor` instance allows functions to transform the contents of a",19],["import Control.Functor (($>))",19],["import Data.Functor.Eff (liftEff)",31],["import Data.Functor (($>))",98],[". (Functor m, QuasarDSL m)",18],["import Data.Functor.Aff (liftAff)",18]],"useCount":483},{"word":"GE","context":[["case GE.fromQError err of",33],["GE.raiseGlobalError ge",28],["import SlamData.GlobalError as GE",26]],"useCount":87},{"word":"GLenum","context":[["GLenum->",24],["GLenum",15]],"useCount":39},{"word":"Gen","context":[["import Test.QuickCheck.Gen",23],["genModel ∷ Gen.Gen Model",51],["genModel ∷ Gen.Gen Model",51],["import Test.StrongCheck.Gen as Gen",84],["import Test.StrongCheck.Gen as Gen",84]],"useCount":293},{"word":"Generated","context":[["-- Generated by psc-make version 0.6.9.3",54],["-- Generated by psc-make version 0.6.9.5",127]],"useCount":181},{"word":"Generic","context":[["import Data.Generic (Generic, gEq, gCompare)",19],["import Data.Generic",52],["import Data.Generic (class Generic)",83],["import Data.Generic (Generic, gEq, gCompare)",19],["import Data.Generic (class Generic)",83]],"useCount":256},{"word":"Get","context":[["import Pulp.Args.Get",35]],"useCount":35},{"word":"Global","context":[["import Global (encodeURIComponent)",24],["import Global (infinity)",11],["import Global",13],["import Global as Global",21],["import Global (readFloat, isNaN)",24],["import Global as Global",21]],"useCount":114},{"word":"GlobalError","context":[["import SlamData.GlobalError as GE",26]],"useCount":26},{"word":"Graphics","context":[["import Graphics.Canvas",28],["import Graphics.D3.Base",21],["import Graphics.Canvas hiding (translate)",11],["import Graphics.Canvas as C",12]],"useCount":72},{"word":"H","context":[["H.modify",150],["st ← H.get",254],["import qualified Halogen.HTML as H",142],["import Halogen as H",327],["state ← H.get",77],["import Halogen.HTML.Indexed as H",73],["H.div",59],["comp ∷ H.Component State Query Slam",44],["Wiring wiring ← H.liftH $ H.liftH ask",43],["H.modify _",84]],"useCount":2538},{"word":"HE","context":[["import Halogen.HTML.Events.Indexed as HE",164],[", HE.onClick (HE.input_ Dismiss)",48],[", HE.onClick (HE.input_ Dismiss)",48],["import Halogen.HTML.Events as HE",15]],"useCount":275},{"word":"HEH","context":[["import Halogen.HTML.Events.Handler as HEH",35]],"useCount":35},{"word":"HH","context":[["[ HH.input",48],[", HH.input",66],[", HH.button",81],["[ HH.div",120],[", HH.div",86],["HH.div_",89],["[ HH.button",109],["HH.form",130],["import Halogen.HTML.Indexed as HH",250],["HH.div",301]],"useCount":1847},{"word":"HP","context":[["[ HP.classes [ B.colXs6, CSS.axisLabelParam ]",23],[", HP.disabled state.submitting",27],["[ HP.classes [ CSS.withAggregation, CSS.chartConfigureForm ]",23],["[ HP.classes [ B.btn, B.btnDefault ]",27],[", HP.buttonType HP.ButtonButton",64],["[ HP.classes [ CSS.chartConfigureForm ]",50],[", HP.buttonType HP.ButtonButton",64],["[ HP.classes [ B.formControl ]",72],["[ HP.classes",173],["import Halogen.HTML.Properties.Indexed as HP",249]],"useCount":980},{"word":"HTML","context":[["import Halogen.HTML.Properties.Indexed as HP",249],["import Halogen.HTML.Events.Indexed as HE",164],["import qualified Halogen.HTML as H",142],["import qualified Halogen.HTML.Attributes as A",124],["import Halogen.HTML.Indexed as HH",250],["import Halogen.HTML.Properties.Indexed.ARIA as ARIA",123],["import qualified Halogen.HTML.Events as E",91],["import Halogen.HTML.Indexed as H",73],["import qualified Halogen.HTML.Events.Monad as E",65],["import qualified Halogen.HTML.Events.Handler as E",63]],"useCount":2301},{"word":"HTMLElement","context":[["import DOM.HTML.Types (HTMLElement)",53],["import DOM.HTML.Types (HTMLElement())",24],["import Data.DOM.Simple.Types (HTMLElement())",20],["import DOM.HTML.Types (HTMLElement, htmlElementToElement)",15]],"useCount":112},{"word":"HTTP","context":[["import Network.HTTP.Affjax as AX",11],["import Network.HTTP.Affjax",15],["import Network.HTTP.Method (Method(..))",12],["import Network.HTTP.RequestHeader (RequestHeader(..))",30],["import Network.HTTP.StatusCode (StatusCode(..))",16],["import Network.HTTP.Affjax (AJAX())",23],["import Network.HTTP.Affjax (AJAX)",28]],"useCount":135},{"word":"Halogen","context":[["import qualified Halogen.HTML.Attributes as A",124],["import Halogen",137],["import qualified Halogen.HTML as H",142],["import qualified Halogen.Themes.Bootstrap3 as B",91],["import Halogen.HTML.Properties.Indexed.ARIA as ARIA",123],["import Halogen.HTML.Properties.Indexed as HP",249],["import Halogen.HTML.Events.Indexed as HE",164],["import Halogen as H",327],["import Halogen.HTML.Indexed as HH",250],["import Halogen.Themes.Bootstrap3 as B",204]],"useCount":2860},{"word":"Handler","context":[["import qualified Halogen.HTML.Events.Handler as E",63],["import Halogen.HTML.Events.Handler as HEH",35],["import Halogen.HTML.Events.Handler (EventHandler())",12],["import Node.Express.Handler",12]],"useCount":122},{"word":"Header","context":[["import SlamData.Header.Component as Header",15],["import SlamData.Header.Component as Header",15]],"useCount":30},{"word":"Helper","context":[["import Test.Helper (Suite, bind, quickCheck, suite, test, (===))",26]],"useCount":26},{"word":"High","context":[["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],["else High",39],[", levelOfDetails: High",47]],"useCount":115},{"word":"Html","context":[["import Pux.Html.Events (onClick)",17],["import qualified Thermite.Html as T",13],["import qualified Thermite.Html.Attributes as A",17],["view :: State -> Html Action",32]],"useCount":79},{"word":"I","context":[["import Synctube.Client.Component.Common.Input as I",11],["import qualified Data.Int as I",16],["import Controller.Notebook.Common (I())",28]],"useCount":55},{"word":"IdToken","context":[["-> M.Maybe Auth.IdToken",33]],"useCount":33},{"word":"Identity","context":[["import Data.Identity (Identity(..))",27],["import Data.Identity (Identity)",16],["import Data.Identity (Identity(..))",27],["import Data.Identity (Identity)",16],["import Data.Identity ()",17],["import Data.Identity (Identity(..), runIdentity)",15],["import Data.Identity (Identity(..), runIdentity)",15],["-- | to the `Identity` monad.",34],["import Data.Identity",43]],"useCount":210},{"word":"Index","context":[["import Data.Foreign.Index as F",12],["import Data.Foreign.Index (prop)",12],["import Data.Foreign.Index ((!))",12],["import Data.Lens.Index (ix)",14]],"useCount":50},{"word":"Indexed","context":[["import Halogen.HTML.Events.Indexed as E",43],["import Halogen.HTML.Properties.Indexed as P",62],["import Halogen.HTML.Indexed as H",73],["import Halogen.HTML.Properties.Indexed.ARIA as ARIA",123],["import Halogen.HTML.Indexed as HH",250],["import Halogen.HTML.Events.Indexed as HE",164],["import Halogen.HTML.Properties.Indexed as HP",249],["import qualified Halogen.HTML.Indexed as H",32],["import qualified Halogen.HTML.Events.Indexed as E",31],["import qualified Halogen.HTML.Properties.Indexed as P",11]],"useCount":1038},{"word":"Init","context":[[", initializer: Just (H.action Init)",31],["= Init a",13],["eval (Init next) = do",17],["| Init a",29]],"useCount":90},{"word":"Inject1","context":[["import Data.Inject1 (inj)",52]],"useCount":52},{"word":"Input","context":[["import Input.Notebook (Input(..))",43],["import Input.Notebook (Input(..))",43],["import Input.File (FileInput(..))",33],["import Input.File (Input(), FileInput(..))",11],["import Synctube.Client.Component.Common.Input as I",11],["import Input.File (Input(), FileInput(..))",11],["import Input.File.Item (ItemInput(..))",11]],"useCount":163},{"word":"Inputs","context":[["import SlamData.Workspace.Card.BuildChart.Inputs (SelectAction)",17],["import SlamData.Workspace.Card.BuildChart.Inputs (PickerOptions)",30],["import SlamData.Workspace.Card.BuildChart.Inputs as BCI",22]],"useCount":69},{"word":"Int","context":[["import Data.Int",44],["test \"Int\" do",19],["quickCheck \\ (x :: Int) y ->",20],["import Data.Int (fromNumber, toNumber)",21],["-> Maybe Int",47],["import Data.Int (toNumber)",50],["→ Int",60],["-> Int",79],["import Data.Int as Int",109],["import Data.Int as Int",109]],"useCount":712},{"word":"Interact","context":[["Interact.insertSearchCardInLastDeck",25],["Interact.insertQueryCardInLastDeck",23],["Interact.createFolder",20],["Interact.insertDisplayMarkdownCardInLastDeck",28],["Interact.accessNextCardInLastDeck",181],["Interact.browseTestFolder",45],["Interact.insertMdCardInLastDeck",35],["import Test.SlamData.Feature.Interactions as Interact",30],["Interact.accessPreviousCardInLastDeck",28],["Interact.runQuery",26]],"useCount":607},{"word":"Interactions","context":[["import Test.SlamData.Feature.Interactions as Interact",30]],"useCount":30},{"word":"Invariant","context":[["import Data.Functor.Invariant (class Invariant)",17],["import Data.Functor.Invariant (class Invariant)",17],["import Data.Functor.Invariant (class Invariant, imapF)",14],["import Data.Functor.Invariant (class Invariant, imapF)",14]],"useCount":62},{"word":"J","context":[["import Data.Argonaut as J",43],["→ J.Json",28],["∷ J.Json",16],["~> J.jsonEmptyObject",24],["import qualified Control.Monad.JQuery as J",11],["J.append jExpand jtypExp",14]],"useCount":136},{"word":"JArray","context":[["import Data.Argonaut (JArray, Json)",29]],"useCount":29},{"word":"JCursor","context":[["import Data.Argonaut (JCursor)",67],["∷ (Const Unit JCursor → Selection (Const Unit))",30],["import Data.Argonaut.JCursor (JCursor())",18],["import Data.Argonaut.JCursor (JCursor())",18],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.JCursor (groupJCursors, flattenJCursors)",19],[", value ∷ JCursor",20],[", value ∷ Select JCursor",24],["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["→ Array JCursor",30],[", picker ∷ Maybe (PickerOptions JCursor Selection)",30]],"useCount":348},{"word":"JCursorNode","context":[["import SlamData.Workspace.Card.BuildChart.DimensionPicker.JCursor (JCursorNode)",17],["type ChildState = DP.StateP JCursorNode",16],["type ChildQuery = DP.QueryP JCursorNode",16]],"useCount":49},{"word":"JS","context":[["import Language.PureScript.CodeGen.JS.AST",12],["import Data.Argonaut as JS",20]],"useCount":32},{"word":"JSON","context":[["import Data.JSON",32]],"useCount":32},{"word":"JSONResponse","context":[["Tuple Nothing JSONResponse",26]],"useCount":26},{"word":"Json","context":[["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["import Data.Json.Extended as EJSON",25],["import Data.Argonaut (Json, (:=), (~>), (.?), decodeJson, jsonEmptyObject)",17],["import Data.Argonaut.Core (Json())",16],["→ J.Json",28],["import Data.Argonaut (JArray, Json)",29],["decode ∷ Json → String ⊹ Model",30],["encode ∷ Model → Json",40],["∷ Json",48],["→ Json",79]],"useCount":370},{"word":"Just","context":[["_ { picker = Just { options, select: f (Const unit) } }",28],["Just { options, select } →",21],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24],["| otherwise = map Just do",24],["else map Just do",24],[", arg:        Just $ arg \"BAZ\"",20],["import Data.Maybe (Maybe(Just, Nothing))",27],["encode (Just r) =",30],["Just canvas <- getCanvasElementById \"canvas\"",20],[", initializer: Just (H.action Init)",31]],"useCount":575},{"word":"KanColle","context":[["import KanColle.Expedition.Base",11],["import KanColle.KCAPI.Battle",16],["import KanColle.Util",18]],"useCount":45},{"word":"L","context":[["∷ L.List (DeckId × Port.VarMap)",12],["import Data.List as L",125],["import qualified Data.List as L",34],[", updates ∷ L.List CardEval",12],["→ DeckDSL (L.List (DeckId × Port.VarMap))",12],["L.nubBy (\\a b → Pathy.printPath a ≡ Pathy.printPath b)",12]],"useCount":207},{"word":"LIMIT","context":[["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"Language","context":[["import Language.PureScript.CodeGen.JS.AST",12],["import Language.PureScript.Names",27],["import Language.PureScript.Errors",16],["import Language.PureScript.Types",17],["import Language.PureScript.Declarations",20],["import Language.PureScript.Environment",17]],"useCount":109},{"word":"Lazy","context":[["import Data.Lazy ()",15],["import Data.Lazy",17],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["import Control.Lazy",25],["import Control.Lazy ()",12]],"useCount":87},{"word":"Left","context":[["Left _ →",19],["Left err -> do",19],["(Left",21],["Left msg →",23],["Left err -> Failed $ \"Decode failed: \" <> err",26],["Left err → do",29],["_ -> Result (Left \"Reached end of file\") str",29],["Left err -> Failed $ \"Decode failed: \" ++ err",30],["Left err ->",43],["Left err →",68]],"useCount":409},{"word":"Lens","context":[["import Data.Lens as Lens",77],[", module Data.Lens.Types",18],["import Data.Lens ((.~))",18],["import Data.Lens as Lens",77],["import Data.Lens (LensP, lens)",59],["import Data.Lens (Lens', lens)",37],["import Data.Lens (Lens', lens)",37],["import Data.Lens ((^?))",29],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],["import Data.Lens ((.~), (?~))",19]],"useCount":491},{"word":"LensP","context":[["import Data.Lens (LensP(), lens)",12],["import Data.Lens (LensP, lens)",59],["_levelOfDetails ∷ ∀ a r. LensP {levelOfDetails ∷ a|r} a",11]],"useCount":82},{"word":"LevelOfDetails","context":[["import SlamData.Workspace.LevelOfDetails (LevelOfDetails(..))",97],[", levelOfDetails ∷ LevelOfDetails",47],["import SlamData.Workspace.LevelOfDetails (LevelOfDetails(..))",97]],"useCount":241},{"word":"List","context":[["import Data.List as List",96],["import Data.List (List)",45],["import qualified Data.List as L",34],["import Data.List (List(..), (:))",23],["import Data.List (List(..))",45],["import Data.List (List(..))",45],["import Data.List (List)",45],["import Data.List",47],["import Data.List as List",96],["import Data.List as L",125]],"useCount":768},{"word":"Listing","context":[["import SlamData.FileSystem.Listing.Component as Listing",15],["import SlamData.FileSystem.Listing.Component as Listing",15],["import SlamData.FileSystem.Listing.Sort (Sort(..))",12]],"useCount":42},{"word":"Load","context":[["CC.Load card next →",17],["CC.Load _ next →",19],["CC.Load card next → do",22]],"useCount":58},{"word":"LocalStorage","context":[["import Utils.LocalStorage as LocalStorage",14],["import Utils.LocalStorage as LocalStorage",14]],"useCount":28},{"word":"Location","context":[["import DOM.HTML.Location as Location",26],["H.fromEff $ locationObject >>= Location.setHash deckHash",14],["import DOM.HTML.Location as Location",26]],"useCount":66},{"word":"Log","context":[["import Test.Selenium.Log",23],["import Test.Feature.Log (successMsg)",22]],"useCount":45},{"word":"Low","context":[["then Low",40]],"useCount":40},{"word":"M","context":[["import qualified Data.StrMap as M",29],["-> M.Maybe Auth.IdToken",33],["import Data.Maybe as M",42],["import qualified Data.Map as M",91],["import Data.Map as M",111],["import Data.StrMap as M",11],["newtype ArbModel = ArbModel M.Model",13],["foldl dataMapFoldFn M.empty records",25]],"useCount":355},{"word":"M1","context":[["module M1 where",14],["import M1",17]],"useCount":31},{"word":"Main","context":[["module Main where",615],["module Test.Main where",245],["import Test.Unit.Main (runTest)",19]],"useCount":879},{"word":"Maintainer","context":[["-- Maintainer  :  Phil Freeman <paf31@cantab.net>",27]],"useCount":27},{"word":"Map","context":[["import qualified Data.Map as Map",13],["import Data.Map (Map())",14],["import Data.Map (Map())",14],["let opts = Map.union args.globalOpts args.commandOpts",22],["import Data.Map (Map)",26],["import Data.Map (Map)",26],["import qualified Data.Map as M",91],["import Data.Map as M",111],["import Data.Map as Map",140],["import Data.Map as Map",140]],"useCount":610},{"word":"Markdown","context":[["import Text.Markdown.SlamDown.Halogen.Component.State as SDS",14],["import Text.Markdown.SlamDown as SD",32]],"useCount":46},{"word":"Math","context":[["import Math (floor)",12],["import Math as Math",30],["import Math as Math",30],["import Math",53]],"useCount":125},{"word":"Maybe","context":[["import Data.Maybe (Maybe)",67],["import Data.Maybe",791],["import Data.Maybe (Maybe(..))",496],["import Data.Maybe (Maybe(..))",496],["import Data.Maybe (Maybe(..), maybe)",115],["import Data.Maybe (Maybe(..), maybe)",115],["import Data.Maybe.Unsafe (fromJust)",84],["import Data.Maybe (Maybe(..), fromMaybe)",71],["import Data.Maybe (Maybe(..), fromMaybe)",71],["import Data.Maybe (Maybe)",67]],"useCount":3588},{"word":"Me","context":[["import qualified Model.Notebook.ECharts as Me",15],["(>>= Me.catFromSemanthic) <$>",12]],"useCount":27},{"word":"Milliseconds","context":[["import Data.Time.Duration (Milliseconds(..))",21],["import Data.Time (Milliseconds())",18],["import Data.Time (Milliseconds(..))",35]],"useCount":74},{"word":"Model","context":[["eqModel ∷ Model → Model → Boolean",43],["( Model",26],["⇒ Model",29],["decode ∷ Json → String ⊹ Model",30],["type Model =",37],["initialModel ∷ Model",38],["eqModel ∷ Model → Model → Boolean",43],["encode ∷ Model → Json",40],["import SlamData.Workspace.Card.Model as Card",107],["genModel ∷ Gen.Gen Model",51]],"useCount":843},{"word":"ModelUpdated","context":[["CC.ModelUpdated _ next →",62]],"useCount":62},{"word":"Monad","context":[["import Control.Monad.Error.Class (throwError)",115],["import Control.Monad.Trans",120],["import Control.Monad.Eff.Class",94],["import SlamData.Monad (Slam)",157],["import Control.Monad.Eff.Console",198],["import Control.Monad.Eff (Eff())",274],["import Control.Monad.Eff.Class (liftEff)",275],["import Control.Monad.Eff (Eff)",626],["import Control.Monad.Eff",822],["import Control.Monad.Aff",97]],"useCount":6198},{"word":"MonadEff","context":[["import Control.Monad.Eff.Class (class MonadEff, liftEff)",32]],"useCount":32},{"word":"MonadPlus","context":[["import Control.MonadPlus (MonadPlus)",13],["import Control.MonadPlus (MonadPlus)",13],["import Control.MonadPlus",62],["import Control.MonadPlus (guard)",51],["import Control.MonadPlus (class MonadPlus)",25],["import Control.MonadPlus (class MonadPlus)",25],["import Control.MonadPlus ()",14]],"useCount":203},{"word":"MonadZero","context":[["import Control.MonadZero (class MonadZero)",22],["import Control.MonadZero (class MonadZero)",22]],"useCount":44},{"word":"Monoid","context":[["import Data.Monoid (class Monoid)",57],["import Data.Monoid (mempty)",67],["import Data.Monoid ()",69],["import Data.Monoid (class Monoid)",57],["import Data.Monoid (class Monoid, mempty)",54],["import Data.Monoid (class Monoid, mempty)",54],["import Data.Monoid (Monoid, mempty)",29],["import Data.Monoid (Monoid, mempty)",29],["import Data.Monoid (Monoid)",26],["import Data.Monoid",179]],"useCount":733},{"word":"Mount","context":[[", module SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery",11],["import SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery (SettingsQuery(..))",12],["import Quasar.Mount as QM",13]],"useCount":36},{"word":"NEL","context":[["import Data.List.NonEmpty as NEL",12],["import qualified Data.Array.NonEmpty as NEL",20]],"useCount":32},{"word":"Names","context":[["import Language.PureScript.Names",27]],"useCount":27},{"word":"Neodoc","context":[["import Neodoc.Data.SolvedLayout as Solved",12],["import Neodoc.Data.Description",12],["import Neodoc.Data.Layout",19],["import Neodoc.Data.SolvedLayout",12],["import Neodoc.Data.OptionArgument",11],["import Neodoc.OptionAlias as OptionAlias",11]],"useCount":77},{"word":"Neon","context":[["import Neon as Neon",37],["import Neon as Neon",37],["import Neon.Data as Data",24]],"useCount":98},{"word":"Nested","context":[["import Data.Tuple.Nested ((/\\))",43],["import Data.Tuple.Nested",18],["import SlamData.Workspace.Deck.Component.Nested.Query as DNQ",13],["import SlamData.Workspace.Deck.Component.Nested.State as DNS",11]],"useCount":85},{"word":"Network","context":[["import Network.HTTP.Affjax (AJAX())",23],["import Network.HTTP.Method (Method(..))",12],["import Network.HTTP.RequestHeader (RequestHeader(..))",30],["import Network.HTTP.StatusCode (StatusCode(..))",16],["import Network.HTTP.Affjax",15],["import Network.HTTP.Affjax as AX",11],["import Network.HTTP.Affjax (AJAX)",28]],"useCount":135},{"word":"Newtype","context":[["import Data.Newtype (class Newtype)",49],["import Data.Newtype (unwrap)",45],["import Data.Newtype (class Newtype)",49]],"useCount":143},{"word":"Nil","context":[["go Nil = Nil",15],["go Nil = Nil",15],["[ o { aliases:    OptionAlias.Short 'f' :| OptionAlias.Long \"foo\" : Nil",11],["go _ Nil = Nil",12],["go _ Nil = Nil",12],[": Nil",13]],"useCount":78},{"word":"Node","context":[["import Node.Process as Process",53],["import Node.Path as Path",38],["import Node.Encoding (Encoding(UTF8))",38],["import DOM.Node.Types",37],["import Node.Encoding (Encoding(..))",27],["import Node.FS.Aff as FS",21],["import Node.Express.Types",16],["import Node.Process (PROCESS)",16],["import Node.ChildProcess as CP",15],["import Node.FS (FS)",30]],"useCount":363},{"word":"NonEmpty","context":[["import Data.List.NonEmpty as NEL",12],["import Data.NonEmpty (NonEmpty, (:|))",22],["import Data.NonEmpty (NonEmpty, (:|))",22],["import qualified Data.Array.NonEmpty as NEL",20],["import Data.NonEmpty.Extra as NonEmpty",11],["import Data.NonEmpty.Extra as NonEmpty",11]],"useCount":98},{"word":"Nop","context":[["pure Nop",30]],"useCount":30},{"word":"Note","context":[["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12],["-- | Note, the running time of this function is `O(n)`.",12],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20]],"useCount":44},{"word":"Notebook","context":[["import Model.Notebook",21],["import Model.Notebook.Cell",18],["import Model.Notebook.Cell.Viz",15],["import Controller.Notebook.Common (I())",28],["import Test.Selenium.Notebook.Getters",14],["import View.Notebook.Common (HTML())",29],["import Input.Notebook (Input(..))",43],["import SlamData.Notebook.Cell.Common.EvalQuery (CellEvalQuery())",14],["import qualified Model.Notebook.ECharts as Me",15],["import Model.Notebook.Cell (Cell())",15]],"useCount":272},{"word":"NotebookAppEff","context":[["import EffectTypes (NotebookAppEff())",19],["-> Eff (NotebookAppEff e) Unit",12],["Eff (NotebookAppEff e) Unit",15]],"useCount":46},{"word":"Nothing","context":[["Nothing →",70],["fromSpine _ = Nothing",56],["Nothing -> pure unit",50],["then Nothing",59],["Nothing -> do",57],["_ → Nothing",253],["_ -> Nothing",160],["Nothing ->",108],["Nothing",88],["else Nothing",73]],"useCount":2118},{"word":"Nullable","context":[["import Data.Nullable (toMaybe)",35],["import Data.Nullable (Nullable)",32],["import Data.Nullable (Nullable)",32],["import Data.Nullable (Nullable(), toNullable)",20],["import Data.Nullable (Nullable(), toNullable)",20],["import Data.Nullable",20],["import Data.Nullable (Nullable())",14],["import Data.Nullable (Nullable, toNullable)",12],["import Data.Nullable (Nullable())",14],["import Data.Nullable (Nullable, toNullable)",12]],"useCount":211},{"word":"Number","context":[["→ Maybe (Array Number)",19],["\\}\" :: Number -> Number -> Number",39],["-> Number",44],["\\}\" :: Number -> Number -> Number",39],["\\}\" :: Number -> Number -> Number",39],[", y :: Number",25],["Number ->",22],["→ Number",17],["∷ Maybe (Array Number)",19],["{ x :: Number",21]],"useCount":417},{"word":"O","context":[["-- | Note, the running time of this function is `O(n)`.",12],["-- | Running time: `O(n)` where `n` is the length of the array",15],["-- | Running time: `O(1)`.",30],["-- | Running time: `O(n^2)`",34],["-- | Running time: `O(1)`",38],["-- | Running time: `O(n)`",83]],"useCount":212},{"word":"Open","context":[["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["BCI.Open _    → pure unit",13]],"useCount":33},{"word":"Optic","context":[["import Optic.Extended (TraversalP(), (^?))",12],["import Optic.Setter ((.~))",14],["import Optic.Getter ((^.))",16],["import Optic.Refractor.Prism (_Just)",18],["import Optic.Extended (TraversalP())",20],["import Optic.Fold ((^?))",34],["import Optic.Core",141]],"useCount":255},{"word":"OptionAlias","context":[["[ o { aliases:    OptionAlias.Short 'f' :| OptionAlias.Long \"foo\" : Nil",11],["import Neodoc.OptionAlias as OptionAlias",11],["[ o { aliases:    OptionAlias.Short 'f' :| OptionAlias.Long \"foo\" : Nil",11],["import Neodoc.OptionAlias as OptionAlias",11]],"useCount":44},{"word":"OptionI","context":[["import ECharts.Types.Phantom (OptionI)",29]],"useCount":29},{"word":"Ord","context":[["import Data.Ord (class Ord, compare)",14],[". (Affable SlamDataEffects m, Ord k)",14],["import Data.Ord (class Ord, compare)",14]],"useCount":42},{"word":"Ordering","context":[["import Data.Ordering (Ordering(..))",14],["import Data.Ordering (Ordering(..))",14],["-> Ordering",12]],"useCount":40},{"word":"Outputter","context":[["import Pulp.Outputter",42]],"useCount":42},{"word":"P","context":[["import Halogen.HTML.Properties.Indexed as P",62],["import qualified Halogen.HTML.Properties.Indexed as P",11],["import Data.Path.Pathy as P",50],["Tuple pp dirOrFile ← P.peel p",25],["import Text.Parsing.Parser as P",22],["import qualified Halogen.HTML.Properties as P",11]],"useCount":181},{"word":"PU","context":[["go ∷ PU.FilePath → Resource",15],["import Utils.Path as PU",28]],"useCount":43},{"word":"Page","context":[["Page",46]],"useCount":46},{"word":"Pane","context":[["→ Pane a",26],["import SlamData.Workspace.Card.Draftboard.Pane as Pane",16],["import SlamData.Workspace.Card.Draftboard.Pane as Pane",16]],"useCount":58},{"word":"ParentDSL","context":[["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["type DSL = H.ParentDSL State ChildState Query ChildQuery Slam ChildSlot",14]],"useCount":36},{"word":"ParentHTML","context":[["type HTML = H.ParentHTML ChildState Query ChildQuery Slam ChildSlot",15],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22]],"useCount":37},{"word":"ParentState","context":[["import Halogen (ParentState)",54],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28],["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["ParentState",11]],"useCount":115},{"word":"Parser","context":[["import Text.Parsing.Parser.String as PS",11],["import Text.Parsing.Parser.Combinators",24],["import Text.Parsing.Parser as P",22],["import Data.Argonaut.Parser (jsonParser)",21],["import Text.Parsing.Parser.String",14],["import Text.Parsing.Parser.Combinators as PC",12],["import Text.Parsing.Parser",31]],"useCount":135},{"word":"Parsing","context":[["import Text.Parsing.Parser.String as PS",11],["import Text.Parsing.Parser.Combinators as PC",12],["import Text.Parsing.Parser.String",14],["import Text.Parsing.StringParser",16],["import Text.Parsing.Parser as P",22],["import Text.Parsing.Parser.Combinators",24],["import Text.Parsing.Parser",31]],"useCount":130},{"word":"Partial","context":[["import Partial.Unsafe (unsafeCrashWith)",13],["import Partial.Unsafe",16],["import Partial.Unsafe (unsafePartial)",120]],"useCount":149},{"word":"Path","context":[["import Utils.Path (DirPath)",47],["import Data.Path.Pathy ((</>))",49],["import Data.Path.Pathy as Pt",24],["import Data.Path.Pathy as P",50],["import Node.Path as Path",38],["import Node.Path as Path",38],["import Utils.Path as UP",37],["import Data.Path.Pathy as Pathy",25],["import Utils.Path as PU",28],["import Data.Path.Pathy",29]],"useCount":464},{"word":"Pathy","context":[["import Data.Path.Pathy as Path",19],["import Data.Path.Pathy (printPath)",19],["import Data.Path.Pathy as Pathy",25],["import Data.Path.Pathy as Pathy",25],["import Data.Path.Pathy",29],["import Data.Path.Pathy ((</>))",49],["</> Pathy.file \"index\"",12],["import Data.Path.Pathy (rootDir)",15],["import Data.Path.Pathy as Pt",24],["import Data.Path.Pathy as P",50]],"useCount":291},{"word":"Phantom","context":[["import ECharts.Types.Phantom as ETP",27],["import ECharts.Types.Phantom (OptionI)",29]],"useCount":56},{"word":"Phil","context":[["-- Maintainer  :  Phil Freeman <paf31@cantab.net>",27]],"useCount":27},{"word":"PickerOptions","context":[["import SlamData.Workspace.Card.BuildChart.Inputs (PickerOptions)",30],[", picker ∷ Maybe (PickerOptions JCursor Selection)",30]],"useCount":60},{"word":"Please","context":[["QE.throw \"Please select axis to aggregate\"",31]],"useCount":31},{"word":"Plus","context":[["import Control.Plus (class Plus)",24],["import Control.Plus (class Plus, empty)",22],["import Control.Plus (class Plus, empty)",22],["import Control.Plus (class Plus)",24],["import Control.Plus (Plus)",32],["import Control.Plus",59],["import Control.Plus (empty)",102],["import Control.Plus ()",27],["import Control.Plus (Plus)",32]],"useCount":344},{"word":"Port","context":[["import SlamData.Workspace.Card.Port as Port",121],["→ CET.CardEvalT m Port.Port",40],["→ CET.CardEvalT m Port.Port",40],["→ CET.CardEvalT m Port.TaggedResourcePort",19],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],["import SlamData.Workspace.Card.Port as Port",121],["import SlamData.Workspace.Card.Port (Port)",26],["import SlamData.Workspace.Card.Port (Port)",26],["import SlamData.Workspace.Card.Port.VarMap as Port",30],["import SlamData.Workspace.Card.Port.VarMap as Port",30]],"useCount":530},{"word":"Portability","context":[["-- Portability :",31]],"useCount":31},{"word":"Prelude","context":[["import Prelude (($))",13],["import Prelude ()",351],["import Prelude (Unit)",85],["import Prelude as Prelude",51],["import Prelude as Prelude",51],["import Prelude (Unit())",21],["import SlamData.Prelude",871],["import Prelude",3225],["import Prelude hiding (div)",21],["import Prelude hiding (compare)",12]],"useCount":4712},{"word":"Pretty","context":[["import Data.Pretty",14],["import Data.Pretty (class Pretty, pretty)",22],["import Data.Pretty (class Pretty, pretty)",22]],"useCount":58},{"word":"Prim","context":[["import Prim ()",189]],"useCount":189},{"word":"Printer","context":[["import Data.Argonaut.Printer (printJson)",18],["import Text.SlamSearch.Printer (strQuery)",11]],"useCount":29},{"word":"Process","context":[["import Node.Process as Process",53],["cwd <- liftEff Process.cwd",20],["Process.exit 1",11],["import Node.Process (PROCESS)",16],["import Node.Process as Process",53]],"useCount":153},{"word":"Profunctor","context":[["import Data.Profunctor.Choice (class Choice)",12],["import Data.Profunctor.Choice",12],["import Data.Profunctor",15],["import Data.Profunctor (class Profunctor)",16],["import Data.Profunctor (class Profunctor)",16],["import Data.Profunctor.Strong",17],["import Data.Profunctor.Strong (class Strong)",11]],"useCount":99},{"word":"Properties","context":[["import Halogen.HTML.Properties.Indexed as HP",249],["import Halogen.HTML.Properties.Indexed.ARIA as ARIA",123],["import qualified Halogen.HTML.Properties.Indexed as P",11],["import qualified Halogen.HTML.Properties as P",11],[". Properties",72],["import Halogen.HTML.Properties.Indexed as P",62]],"useCount":528},{"word":"Property","context":[["import Test.Property.ArbJson (runArbJCursor)",18],["import CSS.Property",24],["import Css.Property",31]],"useCount":73},{"word":"Props","context":[["import React.DOM.Props as RP",39],["(Event -> EventHandlerContext eff props state result) -> Props",24],["state <- get :: Component (Props ps) State State",14]],"useCount":77},{"word":"Proxy","context":[["import Type.Proxy (Proxy(..))",13],["import Type.Proxy (Proxy(..))",13]],"useCount":26},{"word":"Pulp","context":[["import Pulp.Exec",17],["import Pulp.Args",55],["import Pulp.System.FFI",79],["import Pulp.Outputter",42],["import Pulp.Args.Get",35],["import Pulp.Files",21]],"useCount":249},{"word":"PureScript","context":[["import Language.PureScript.Errors",16],["import Language.PureScript.Names",27],["import Language.PureScript.Declarations",20],["import Language.PureScript.Environment",17],["import Language.PureScript.Types",17],["import Language.PureScript.CodeGen.JS.AST",12]],"useCount":109},{"word":"Q","context":[["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["Q.ValueAgg a → updateSelect ST._valueAgg a",12],["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["selecting f q a = right (Q.Select (f q) a)",14],["eval ∷ Q.QueryC ~> DSL",22],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22]],"useCount":118},{"word":"QC","context":[["import Test.StrongCheck (QC(), Result(..), Arbitrary, arbitrary, quickCheck, (<?>))",12],["import Test.StrongCheck (QC, Result(..), class Arbitrary, arbitrary, quickCheck, (<?>))",15],["check :: QC Unit",37]],"useCount":64},{"word":"QE","context":[["QE.throw \"Please select axis to aggregate\"",31],["import SlamData.Quasar.Error as QE",61]],"useCount":92},{"word":"QEff","context":[["import SlamData.Quasar.Aff (QEff, runQuasarF)",12],[". (Functor m, Affable (QEff eff) m)",17],[". Affable (QEff eff) m",21],[". (Monad m, Affable (QEff eff) m)",43]],"useCount":93},{"word":"QF","context":[["import Quasar.Advanced.QuasarAF as QF",33]],"useCount":33},{"word":"Quasar","context":[["import Quasar.Advanced.QuasarAF as QF",33],["import Quasar.Mount as QM",13],["import SlamData.Quasar.Auth as Auth",13],["import SlamData.Quasar.Class (class QuasarDSL, liftQuasar)",14],["import SlamData.Quasar.Query as QQ",14],["import Quasar.Advanced.Types (ProviderR)",15],["import Quasar.Auth as Auth",18],["import Quasar.Types (FilePath)",40],["import SlamData.Quasar.Error as QE",61],["import SlamData.Quasar.Class (class QuasarDSL)",44]],"useCount":356},{"word":"QuasarAF","context":[["import Quasar.Advanced.QuasarAF as QF",33]],"useCount":33},{"word":"QuasarDSL","context":[[". (Functor m, QuasarDSL m)",18],[". QuasarDSL m",28],["import SlamData.Quasar.Class (class QuasarDSL)",44],[". (Monad m, QuasarDSL m)",54],["import SlamData.Quasar.Class (class QuasarDSL, liftQuasar)",14]],"useCount":158},{"word":"Query","context":[["eval ∷ Query ~> DSL",38],["data Query a",171],["comp ∷ H.Component State Query Slam",44],["type HTML = H.ComponentHTML Query",42],["type DSL = H.ComponentDSL State Query Slam",39],["render :: State -> ComponentHTML Query",28],["( Query(..)",25],[", Query(..)",25],["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["render ∷ State → H.ComponentHTML Query",19]],"useCount":673},{"word":"QueryC","context":[["eval ∷ Q.QueryC ~> DSL",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["type QueryP = QueryC ⨁ H.ChildF ChildSlot ChildQuery",16],["type QueryC = CardEvalQuery ⨁ Query",18]],"useCount":141},{"word":"QueryP","context":[["comp ∷ H.Component StateP QueryP Slam",23],["type QueryP = Coproduct Query (H.ChildF ChildSlot ChildQuery)",19],["type QueryP = QueryC ⨁ H.ChildF ChildSlot ChildQuery",16],["type ChildQuery = DP.QueryP JCursorNode",16],[", QueryP",35]],"useCount":109},{"word":"QuickCheck","context":[["import Test.QuickCheck.Gen",23],["import Test.QuickCheck",68],["import Test.QuickCheck.Arbitrary",19],["import Test.QuickCheck.Arbitrary (class Arbitrary, arbitrary)",13]],"useCount":123},{"word":"R","context":[["⇒ R.Resource",18],[", R.button",19],["import qualified Data.String.Regex as R",20],[", R.div",22],["import React as R",24],[", R.li'",26],["[ R.div",31],["import React.DOM as R",33],[", R.div [ RP.className \"form-group\" ]",36],["import SlamData.FileSystem.Resource as R",70]],"useCount":455},{"word":"RANDOM","context":[[", random :: RANDOM",19],["import Control.Monad.Eff.Random (RANDOM)",43]],"useCount":62},{"word":"RP","context":[[", R.div [ RP.className \"form-group\" ]",36],["import React.DOM.Props as RP",39],[", RP.className \"form-control\"",19],[", R.div [ RP.className \"col-sm-8\" ]",16],["R.div [ RP.className \"form-group\" ]",14],["R.div [ RP.className \"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3\" ]",12]],"useCount":136},{"word":"RWS","context":[["import Control.Monad.RWS.Trans",23],["import Control.Monad.RWS.Class",17]],"useCount":40},{"word":"RX","context":[["RX.regex",20],["RX.noFlags",12]],"useCount":32},{"word":"Random","context":[["import Control.Monad.Eff.Random (RANDOM)",43],["import Control.Monad.Eff.Random",32],["import Control.Monad.Eff.Random (randomInt)",11]],"useCount":86},{"word":"Rc","context":[["import SlamData.Render.CSS as Rc",81]],"useCount":81},{"word":"Reached","context":[["_ -> Result (Left \"Reached end of file\") str",29]],"useCount":29},{"word":"React","context":[["import React (ReactElement)",32],["import React as R",24],["import qualified React as R",12],["import React.DOM as R",33],["import React",12],["import React.DOM.Props as RP",39]],"useCount":152},{"word":"ReactElement","context":[["import React (ReactElement)",32],["mainpageSection :: State -> ReactElement",16]],"useCount":48},{"word":"Reader","context":[["import Control.Monad.Reader.Trans (runReaderT)",13],[", module Control.Monad.Reader.Class",11],["import Control.Monad.Reader.Trans ()",13],["import Control.Monad.Reader.Class",30],["import Control.Monad.Reader.Trans",34]],"useCount":101},{"word":"Rec","context":[["import Control.Monad.Rec.Class (class MonadRec, tailRecM)",14],["import Control.Monad.Rec.Class",21],["import Control.Monad.Rec.Class (forever)",17]],"useCount":52},{"word":"Ref","context":[["varMaps ← H.fromEff $ Ref.readRef wiring.urlVarMaps",11],["import Control.Monad.Eff.Ref (REF)",19],["import Control.Monad.Eff.Ref as Ref",22],["import Control.Monad.Eff.Ref as Ref",22],["import Control.Monad.Eff.Ref",50]],"useCount":124},{"word":"Regex","context":[["import qualified Data.String.Regex as Rgx",12],["import qualified Data.String.Regex as Rx",16],["import Data.String.Regex as Rgx",28],["import Data.String.Regex as Rx",23],["import Data.String.Regex.Flags as RXF",20],["import qualified Data.String.Regex as R",20],["import Data.String.Regex as R",16]],"useCount":135},{"word":"Render","context":[["import SlamData.Render.Common (row)",20],["import SlamData.Dialog.Render (modalDialog, modalHeader, modalBody, modalFooter)",27],["import SlamData.Render.CSS as CSS",30],["import SlamData.Workspace.Card.Common.Render (renderLowLOD)",36],["import SlamData.Render.Common (glyph)",41],["import SlamData.Render.CSS as Rc",81],["import SlamData.Render.CSS as RC",12]],"useCount":247},{"word":"RequestHeader","context":[["import Network.HTTP.RequestHeader (RequestHeader(..))",30],["import Network.HTTP.RequestHeader (RequestHeader(..))",30]],"useCount":60},{"word":"Resource","context":[["go ∷ PU.FilePath → Resource",15],["import SlamData.FileSystem.Resource as R",70],["⇒ R.Resource",18],["import Model.Resource",15],[". R.Resource",13]],"useCount":131},{"word":"Result","context":[["import Test.StrongCheck (QC, Result(..), class Arbitrary, arbitrary, quickCheck, (<?>))",15],["in Result (Left msg) str",17],["in Result (Left msg) (drop 1 str)",14],["then Result (Right c) (drop 1 str)",26],["import Test.StrongCheck (QC(), Result(..), Arbitrary, arbitrary, quickCheck, (<?>))",12],["_ -> Result (Left \"Reached end of file\") str",29]],"useCount":113},{"word":"Rgx","context":[["import Data.String.Regex as Rgx",28],["import qualified Data.String.Regex as Rgx",12]],"useCount":40},{"word":"Right","context":[["import Data.Either (Either(Right, Left))",18],["Right name' → do",11],["Right _  → do",12],["Right _ →",12],["Right _ → do",12],["Right res' -> cb res'",12],["then Result (Right c) (drop 1 str)",26],["Right _ → pure unit",14],["import Data.Either (Either(Left, Right))",17],["Right ge →",23]],"useCount":157},{"word":"Running","context":[["-- | Running time: `O(n)` where `n` is the length of the array",15],["-- | Running time: `O(1)`.",30],["-- | Running time: `O(n^2)`",34],["-- | Running time: `O(1)`",38],["-- | Running time: `O(n)`",83]],"useCount":200},{"word":"Rx","context":[["import Data.String.Regex as Rx",23],["import qualified Data.String.Regex as Rx",16]],"useCount":39},{"word":"S","context":[["join $ cc.aggregations A.!! 0 >>= view S._value",12],["import Data.String as S",99],["$ H.request S.GetSelect",12],["cc.dimensions A.!! 0 >>= view S._value",12],["import Data.Set as S",18],["cc.measures A.!! 0 >>= view S._value",18],["cc.series A.!! 0 >>= view S._value",20],["import qualified Data.Set as S",31],["import qualified Data.String as S",64]],"useCount":286},{"word":"SC","context":[["import Test.StrongCheck.Arbitrary as SC",26],["import Test.StrongCheck as SC",32]],"useCount":58},{"word":"SD","context":[[". (SD.Value v)",15],["import Text.Markdown.SlamDown as SD",32]],"useCount":47},{"word":"SELECT","context":[["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"SM","context":[["→ SM.StrMap String",18],["s <- SM.new",18],["import qualified Data.StrMap as SM",25],["import Data.StrMap as SM",119]],"useCount":180},{"word":"SPParams_","context":[["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46],["(MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)",23]],"useCount":69},{"word":"SPSettings_","context":[["(MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)",23],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46]],"useCount":69},{"word":"SQL","context":[["→ SQL",33]],"useCount":33},{"word":"ST","context":[["renderPicker ∷ ST.State → HTML",22],["import Control.Monad.ST",49],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["renderHighLOD ∷ ST.State → HTML",22],["import Data.Array.ST",15],[", initialState: H.parentState ST.initialState",22],["render ∷ ST.State → HTML",22],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["renderValue ∷ ST.State → HTML",17],["Q.ValueAgg a → updateSelect ST._valueAgg a",12]],"useCount":269},{"word":"Save","context":[["CC.Save k → do",32],["CC.Save k →",31]],"useCount":63},{"word":"Scenario","context":[["import Test.Feature.Scenario (scenario)",30]],"useCount":30},{"word":"Search","context":[["import SlamData.FileSystem.Search.Component as Search",15],["import SlamData.FileSystem.Search.Component as Search",15]],"useCount":30},{"word":"Select","context":[["import SlamData.Form.Select (Select, emptySelect)",30],["selecting f q a = right (Q.Select (f q) a)",14],[", series ∷ Select JCursor",13],[", parallel ∷ Select JCursor",12],[", valueAgg ∷ Select Aggregation",22],[", value ∷ Select JCursor",24],["import SlamData.Form.Select (Select, emptySelect)",30],["Select",16]],"useCount":161},{"word":"SelectAction","context":[["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["import SlamData.Workspace.Card.BuildChart.Inputs (SelectAction)",17]],"useCount":30},{"word":"Selection","context":[["data Selection f",17],["import Data.Selection",12],[", picker ∷ Maybe (PickerOptions JCursor Selection)",30],["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13],["∷ (Const Unit JCursor → Selection (Const Unit))",30]],"useCount":102},{"word":"Selenium","context":[["import Test.Selenium.Notebook.Contexts",12],["import Test.Selenium.Notebook.Getters",14],["import Test.Selenium.Common",20],["import Selenium.ActionSequence hiding (sequence)",20],["import Test.Selenium.Log",23],["import Test.Selenium.Monad",23],["import Selenium.Monad",24],["import Selenium.Types",50]],"useCount":186},{"word":"Semigroup","context":[["class Semigroup a where",12],["import Data.Semigroup (class Semigroup, (<>))",14],["import Data.Semigroup (class Semigroup, (<>))",14]],"useCount":40},{"word":"Set","context":[["import qualified Data.Set as Set",12],["import Data.Set as Set",94],["import Data.Set as Set",94],["import qualified Data.Set as S",31],["import Data.Set as S",18],["import qualified Data.Set as Set",12]],"useCount":261},{"word":"SetDimensions","context":[["CC.SetDimensions dims next → do",41],["CC.SetDimensions _ next →",20]],"useCount":61},{"word":"SettingsQuery","context":[[", module SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery",11],["import SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery (SettingsQuery(..))",12],["import SlamData.FileSystem.Dialog.Mount.Common.SettingsQuery (SettingsQuery(..))",12]],"useCount":35},{"word":"Show","context":[["import Data.Show (class Show, show)",22],["import Data.Show (class Show, show)",22],["class Show a where",16]],"useCount":60},{"word":"Signal","context":[["import Signal ((~>))",15],["import Halogen.Signal",16],["import Signal",15]],"useCount":46},{"word":"Simple","context":[["import Data.DOM.Simple.Unsafe.Element",17],["import Data.DOM.Simple.Ajax",13],["import Data.DOM.Simple.Types (HTMLElement())",20],["import Data.DOM.Simple.Window",24],["import Data.DOM.Simple.Document",32],["import Data.DOM.Simple.Element",42],["import Data.DOM.Simple.Types",114],["import Data.DOM.Simple.Unsafe.Utils(ensure, showImpl)",12]],"useCount":274},{"word":"Size","context":[["import CSS.Size (px)",19],["import CSS.Size",14],["import Css.Size",20]],"useCount":53},{"word":"Slam","context":[["import SlamData.Monad (Slam)",157],["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["H.ParentHTML CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["H.ParentDSL ST.State CS.ChildState Q.QueryC CS.ChildQuery Slam CS.ChildSlot",22],["comp ∷ H.Component StateP QueryP Slam",23],["ParentState State CS.ChildState QueryC CS.ChildQuery Slam CS.ChildSlot",28],["type DSL = H.ComponentDSL State Query Slam",39],["comp ∷ H.Component State Query Slam",44],["import SlamData.Effects (Slam())",44],["import SlamData.Effects (Slam)",117]],"useCount":583},{"word":"SlamData","context":[["import SlamData.Prelude",871],["import SlamData.Monad (Slam)",157],["import SlamData.Workspace.Card.Port as Port",121],["import SlamData.Effects (Slam)",117],["import SlamData.Workspace.Card.Model as Card",107],["import SlamData.Workspace.Card.CardType as CT",98],["import SlamData.Workspace.Card.Component as CC",72],["import SlamData.Render.CSS as Rc",81],["import SlamData.Workspace.LevelOfDetails (LevelOfDetails(..))",97],["import SlamData.Config as Config",84]],"useCount":3787},{"word":"SlamDataEffects","context":[[". (Affable SlamDataEffects m)",15],["→ Aff SlamDataEffects Unit",22],["import SlamData.Effects (SlamDataEffects)",29],[". (Monad m, Affable SlamDataEffects m)",21],[". (Affable SlamDataEffects m, Ord k)",14]],"useCount":101},{"word":"SlamDown","context":[["import Text.Markdown.SlamDown as SD",32],["import Text.Markdown.SlamDown.Halogen.Component.State as SDS",14]],"useCount":46},{"word":"SlamFeature","context":[["import Test.SlamData.Feature.Monad (SlamFeature)",35],["→ SlamFeature Unit",22],["test ∷ SlamFeature Unit",21],["∷ Int → String → String → SlamFeature Unit",15]],"useCount":93},{"word":"SlamSearch","context":[["import Text.SlamSearch.Printer (strQuery)",11],["import Text.SlamSearch (mkQuery)",20]],"useCount":31},{"word":"Sort","context":[["import SlamData.Common.Sort (Sort(..))",12],["import SlamData.Common.Sort (Sort(..))",12],["import SlamData.FileSystem.Listing.Sort (Sort(..))",12],["import SlamData.FileSystem.Listing.Sort (Sort(..))",12],[", sort :: Sort",11]],"useCount":59},{"word":"Spec","context":[["spec :: forall eff state props action. T.Spec eff state props action",13],["spec :: T.Spec _ State _ Action",14],["-> Spec r Unit",15],["import Test.Spec.Assertions (shouldEqual)",17],["import Test.Spec.Reporter.Console (consoleReporter)",23]],"useCount":82},{"word":"Stability","context":[["-- Stability   :  experimental",27]],"useCount":27},{"word":"State","context":[["type DSL = H.ComponentDSL State Query Slam",39],["comp ∷ H.Component State Query Slam",44],["→ State",75],["type State =",253],["( State",47],["initialState :: State",120],["initialState ∷ State",110],["import Control.Monad.State.Trans",50],["render ∷ State → HTML",54],["import Control.Monad.State.Class",58]],"useCount":1380},{"word":"StateMode","context":[["import SlamData.Workspace.StateMode (StateMode(..))",15],["import SlamData.Workspace.StateMode (StateMode(..))",15]],"useCount":30},{"word":"StateP","context":[["type ChildState = DP.StateP JCursorNode",16],["type StateP = H.ParentState State ChildState Query ChildQuery Slam ChildSlot",22],["comp ∷ H.Component StateP QueryP Slam",23],[", StateP",33],["type StateP =",53]],"useCount":147},{"word":"StatusCode","context":[["import Network.HTTP.StatusCode (StatusCode(..))",16],["import Network.HTTP.StatusCode (StatusCode(..))",16]],"useCount":32},{"word":"Str","context":[["import qualified Data.String as Str",16],["import Data.String as Str",97]],"useCount":113},{"word":"StrMap","context":[["import Data.StrMap as SM",119],["import Data.StrMap as StrMap",43],["import Data.StrMap as StrMap",43],["import qualified Data.StrMap as M",29],["import qualified Data.StrMap as SM",25],["import Data.StrMap (StrMap())",21],["import Data.StrMap (StrMap())",21],["→ SM.StrMap String",18],["import Data.StrMap (StrMap)",17],["import Data.StrMap (StrMap)",17]],"useCount":390},{"word":"String","context":[["import Data.String as String",61],[". String",56],["import Data.String as String",61],["String",62],["import qualified Data.String as S",64],["-> String",156],["→ String",119],["import Data.String as S",99],["import Data.String (joinWith)",86],["import Data.String as Str",97]],"useCount":2241},{"word":"Strong","context":[["import Data.Profunctor.Strong",17],["import Data.Profunctor.Strong (class Strong)",11],["import Data.Profunctor.Strong (class Strong)",11]],"useCount":39},{"word":"StrongCheck","context":[["import Test.StrongCheck.Data.Argonaut (runArbJCursor)",18],["import Test.StrongCheck.Arbitrary (class Arbitrary, arbitrary)",22],["import Test.StrongCheck (QC, Result(..), class Arbitrary, arbitrary, quickCheck, (<?>))",15],["import Test.StrongCheck (QC(), Result(..), Arbitrary, arbitrary, quickCheck, (<?>))",12],["import Test.StrongCheck.Arbitrary as SC",26],["import Test.StrongCheck as SC",32],["import Test.StrongCheck.Arbitrary (arbitrary)",34],["import Test.StrongCheck.Gen as Gen",84]],"useCount":243},{"word":"Stylesheet","context":[["import CSS.Stylesheet (CSS, key)",14],["import CSS.Stylesheet",21],["import Css.Stylesheet",24]],"useCount":59},{"word":"Suite","context":[["tests :: Suite",40],["import Test.Helper (Suite, bind, quickCheck, suite, test, (===))",26]],"useCount":66},{"word":"System","context":[["import Pulp.System.FFI",79]],"useCount":79},{"word":"T","context":[["spec :: forall eff state props action. T.Spec eff state props action",13],["import qualified Thermite as T",27],["import qualified Thermite.Html as T",13],["spec :: T.Spec _ State _ Action",14],["import qualified Thermite.Types as T",18],["import qualified Thermite.Action as T",20],["import qualified Thermite.Events as T",20],["T.simpleSpec T.defaultPerformAction render",20],["T.simpleSpec T.defaultPerformAction render",20],["import Thermite as T",34]],"useCount":211},{"word":"Test","context":[["import Test.Assert",29],["import Test.StrongCheck.Gen as Gen",84],["import Test.SlamData.Feature.Interactions as Interact",30],["import Test.Feature.Scenario (scenario)",30],["module Test.Main where",245],["import Test.SlamData.Feature.Expectations as Expect",31],["import Test.StrongCheck as SC",32],["import Test.StrongCheck.Arbitrary (arbitrary)",34],["import Test.SlamData.Feature.Monad (SlamFeature)",35],["import Test.QuickCheck",68]],"useCount":1077},{"word":"Text","context":[["import Text.SlamSearch (mkQuery)",20],["import Text.Parsing.Parser",31],["import Text.Parsing.Parser as P",22],["import Text.Parsing.Parser.Combinators",24],["import Text.Parsing.StringParser",16],["import Text.Parsing.Parser.String",14],["import Text.Markdown.SlamDown.Halogen.Component.State as SDS",14],["import Text.Markdown.SlamDown as SD",32],["import Text.Parsing.Parser.Combinators as PC",12],["import Text.Parsing.Parser.String as PS",11]],"useCount":207},{"word":"The","context":[["-- | The `Functor` instance allows functions to transform the contents of a",19],["--  | The `Functor` instance allows functions to transform the contents of a",16],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["--  | The `Bits` type class identifies types which support bitwise operations.",18],["-- | The state of the application",11]],"useCount":82},{"word":"Themes","context":[["import Halogen.Themes.Bootstrap3 as B",204],["import qualified Halogen.Themes.Bootstrap3 as B",91]],"useCount":295},{"word":"Thermite","context":[["import qualified Thermite.Html.Attributes as A",17],["import qualified Thermite.Html as T",13],["import Thermite as T",34],["import Thermite.Types",29],["import qualified Thermite as T",27],["import Thermite.Internal",24],["import qualified Thermite.Action as T",20],["import qualified Thermite.Events as T",20],["import qualified Thermite.Types as T",18]],"useCount":202},{"word":"Tim","context":[["Author    : Tim Dysinger",26]],"useCount":26},{"word":"Time","context":[["import Data.Time",16],["import Data.Time (Milliseconds(..))",35],["import Data.Time.Duration (Milliseconds(..))",21],["import Data.Time (Milliseconds())",18]],"useCount":90},{"word":"Trace","context":[["import Debug.Trace",207],["import Debug.Trace ()",13],["main = Debug.Trace.trace \"Done\"",54]],"useCount":274},{"word":"Trans","context":[["import Control.Monad.RWS.Trans",23],["import Control.Monad.Trans",120],[", module Control.Monad.Trans",24],["import Control.Monad.Maybe.Trans",25],["import Control.Monad.State.Trans",50],["import Control.Monad.Trans (lift)",32],["import Control.Monad.Writer.Trans",32],["import Control.Monad.Reader.Trans",34],["import Control.Monad.Cont.Trans",49],["import Control.Monad.Error.Trans",44]],"useCount":609},{"word":"Traversable","context":[["import Data.Traversable ()",27],["import Data.Traversable (sequence)",36],["import Data.Traversable (class Traversable, traverse)",14],["import Data.Traversable (for)",36],["import Data.Traversable (class Traversable, traverse)",14],["import Data.Traversable as T",12],["import Data.Traversable (traverse)",98],["import Data.Traversable",88]],"useCount":325},{"word":"TraversalP","context":[["import Optic.Extended (TraversalP(), (^?))",12],["import Optic.Extended (TraversalP())",20]],"useCount":32},{"word":"Tuple","context":[["import Data.Tuple (Tuple(Tuple))",46],["import Data.Tuple",426],["import Data.Tuple (Tuple(..))",262],["import Data.Tuple (Tuple(..), fst, snd)",58],["import Data.Tuple (Tuple(..), fst, snd)",58],["import Data.Tuple ()",57],["import Data.Tuple (Tuple(..))",262],["import Data.Tuple (Tuple(Tuple))",46],["import Data.Tuple (Tuple(Tuple))",46],["import Data.Tuple.Nested ((/\\))",43]],"useCount":1681},{"word":"Types","context":[["import DOM.Node.Types",37],["import Ace.Types",38],["import Quasar.Types (FilePath)",40],["import Types",59],["import Data.DOM.Simple.Types",114],["import DOM.HTML.Types (HTMLElement)",53],["import ECharts.Types.Phantom (OptionI)",29],["import Thermite.Types",29],["import Selenium.Types",50],["import ECharts.Types as ET",29]],"useCount":766},{"word":"U","context":[["toRequest = U.unsafeCoerce",14],["import qualified Data.Maybe.Unsafe as U",26],["import qualified Data.String.Unsafe as U",11]],"useCount":51},{"word":"UP","context":[["import Utils.Path as UP",37]],"useCount":37},{"word":"UTF8","context":[["import Node.Encoding (Encoding(UTF8))",38]],"useCount":38},{"word":"Ubuntu","context":[["E.textStyle $ E.fontFamily \"Ubuntu, sans\"",17],["E.fontFamily \"Ubuntu, sans\"",52]],"useCount":69},{"word":"Uncurried","context":[["import Data.Function.Uncurried (Fn3, runFn3)",15],["import Data.Function.Uncurried (Fn2, runFn2)",17],["import Data.Function.Uncurried",13]],"useCount":45},{"word":"Unfoldable","context":[["import Data.Unfoldable",16],["import Data.Unfoldable (replicate)",13],["import Data.Unfoldable ()",11]],"useCount":40},{"word":"Unit","context":[["→ Feature eff o Unit",67],["-> Eff (fs :: FS | eff) Unit",45],[") Unit",41],["-> (e -> Eff (dom :: DOM | t) Unit)",40],["-> (Eff (dom :: DOM | ta) Unit)",40],["→ m Unit",54],["import Prelude (Unit)",85],["-> (Eff (webgl :: WebGl | eff) Unit)",94],["Unit",59],["Unit ChildSlot",82]],"useCount":1503},{"word":"Unsafe","context":[["import Partial.Unsafe (unsafePartial)",120],["import Unsafe.Coerce (unsafeCoerce)",114],["import Data.Maybe.Unsafe (fromJust)",84],["import Control.Monad.Eff.Unsafe",14],["import Data.Maybe.Unsafe",38],["import qualified Data.Maybe.Unsafe as U",26],["import Data.DOM.Simple.Unsafe.Element",17],["import Data.Array.Unsafe (unsafeIndex)",15],["import Partial.Unsafe",16],["import Unsafe.Coerce",17]],"useCount":570},{"word":"Util","context":[["import Halogen.Util (runHalogenAff, awaitBody)",13],["import KanColle.Util",18],["import Halogen.Util (appendToBody)",20],["import Util",21]],"useCount":72},{"word":"Utils","context":[["import Utils.Array (enumerate)",19],["import Utils.Path as UP",37],["import Data.DOM.Simple.Unsafe.Utils(ensure, showImpl)",12],["import Utils (s2i)",12],["import Halogen.Component.Utils (raise)",13],["import Utils.LocalStorage as LocalStorage",14],["module Utils where",14],["import Utils.Path (DirPath)",47],["import Utils.Path as PU",28],["import Utils",30]],"useCount":226},{"word":"V3","context":[[", V3 (-5.000) 5.000 (-5.000)",15],[", V3 0.000 0.000 1.000",101],[", V3 0.000 0.000 (-1.000)",102],[", V3 5.000 (-5.000) (-5.000)",15],[", V3 0.000 1.000 0.000",78],[", V3 (-1.000) 0.000 0.000",78],[", V3 (-5.000) (-5.000) 5.000",15],[", V3 1.000 0.000 0.000",78],[", V3 0.000 (-1.000) 0.000",78],[", V3 5.000 5.000 5.000",15]],"useCount":671},{"word":"VC","context":[["import qualified View.Css as VC",29],[", VC.chartConfigureForm",12],[", H.form [ A.classes [ B.colXs4, VC.chartConfigureForm ] ]",11]],"useCount":52},{"word":"Value","context":[["E.axisType ET.Value",12],[". (SD.Value v)",15]],"useCount":27},{"word":"VarMap","context":[["import SlamData.Workspace.Card.Port.VarMap as Port",30],["import SlamData.Workspace.Card.Port.VarMap as VM",19],["→ DeckDSL (L.List (DeckId × Port.VarMap))",12],["∷ L.List (DeckId × Port.VarMap)",12]],"useCount":73},{"word":"View","context":[["import View.Common (glyph)",11],["import View.File.Common (HTML())",24],["import qualified View.Css as Vc",25],["import qualified View.Css as VC",29],["import View.Notebook.Common (HTML())",29]],"useCount":118},{"word":"Void","context":[["import Data.Void",22],["import Data.Void (Void, absurd)",13],["import Data.Void (Void, absurd)",13],["type Query = Const Void",12]],"useCount":60},{"word":"WebGl","context":[["-> (Eff (webgl :: WebGl | eff) Unit)",94]],"useCount":94},{"word":"Window","context":[["import DOM.HTML.Window as Window",14],[">>= Window.location",13],["import Data.DOM.Simple.Window",24],["import DOM.HTML.Window (document)",29],["import DOM.HTML.Window as Window",14]],"useCount":94},{"word":"Wiring","context":[["Wiring wiringR ← H.liftH $ H.liftH $ ask",12],["Wiring wiring ← ask",15],["Wiring wiring ← H.liftH $ H.liftH ask",43]],"useCount":70},{"word":"Workspace","context":[["import SlamData.Workspace.Card.Eval.CardEvalT as CET",48],["import SlamData.Workspace.Card.Port as Port",121],["import SlamData.Workspace.Card.Model as Card",107],["import SlamData.Workspace.Card.BuildChart.Aggregation (Aggregation)",44],["import SlamData.Workspace.Card.CardType as CT",98],["import SlamData.Workspace.LevelOfDetails (LevelOfDetails(..))",97],["import SlamData.Workspace.Card.Component as CC",72],["import SlamData.Workspace.Card.BuildChart.Aggregation as Ag",66],["import SlamData.Workspace.Card.Common.EvalQuery (CardEvalQuery)",64],["import SlamData.Workspace.Deck.DeckId (DeckId)",58]],"useCount":1670},{"word":"Writer","context":[["import Control.Monad.Writer.Class as WC",11],["import Control.Monad.Writer.Trans ()",13],["import Control.Monad.Writer.Class (tell)",16],["import Control.Monad.Writer",22],["import Control.Monad.Writer.Class",34],["import Control.Monad.Writer.Trans",32]],"useCount":128},{"word":"XPath","context":[["$ \"input\" `XPath.withLabelWithExactText` labelText",16],["-- | provided XPath.",20],["XPath.errorMessage",22],["import XPath as XPath",13],["→ XPath",79],["import XPath as XPath",13],["$ XPath.anywhere",25]],"useCount":188},{"word":"ZoomIn","context":[["CC.ZoomIn next →",63]],"useCount":63},{"word":"_","context":[["_ →",82],["H.modify _",84],["case _ of",129],["_ ->",74],["_ -> pure unit",65],["_ → pure unit",129],["eq _ _ = false",141],["_ -> Nothing",160],["_ → Nothing",253],["eq _ _ = false",141]],"useCount":3139},{"word":"_Just","context":[["import Optic.Refractor.Prism (_Just)",18],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22]],"useCount":40},{"word":"__","context":[[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"_class","context":[["_class :: AttributeKey String",12],[", _class",16],["_class = AttributeKey \"class\"",16]],"useCount":44},{"word":"_dialog","context":[[", E.onClick (E.input_ $ inj $ WithState (_dialog .~ Nothing))",20],["import Model.File (_dialog)",20]],"useCount":40},{"word":"_displayMode","context":[["H.modify (DCS._displayMode .~ DCS.Backside)",12],["H.modify (DCS._displayMode .~ DCS.Dialog)",29]],"useCount":41},{"word":"_levelOfDetails","context":[["$ _levelOfDetails",13],[", _levelOfDetails",16],["_levelOfDetails = lens (_.levelOfDetails) (_{levelOfDetails = _})",19],["_levelOfDetails ∷ ∀ a r. LensP {levelOfDetails ∷ a|r} a",11]],"useCount":59},{"word":"_name","context":[[", _name",22],["_name = lens _.name (_ { name = _ })",11]],"useCount":33},{"word":"_path","context":[[", _path",23],["_path = lens _.path _{path = _}",12]],"useCount":35},{"word":"_value","context":[["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31],["_value = lens _.value _{ value = _ }",24],["cc.series A.!! 0 >>= view S._value",20],["cc.measures A.!! 0 >>= view S._value",18],["<*> (st.valueAgg ^. _value)",16],["join $ cc.aggregations A.!! 0 >>= view S._value",12],["cc.dimensions A.!! 0 >>= view S._value",12]],"useCount":133},{"word":"_valueAgg","context":[["_valueAgg = lens _.valueAgg _{ valueAgg = _ }",22],["Q.ValueAgg a → updateSelect ST._valueAgg a",12]],"useCount":34},{"word":"a","context":[["a <- p",38],["data Query a",171],["∷ ∀ a",77],["-> Array a",69],[":: forall a",56],["-> (forall a. Maybe a)",36],["-> (forall a. Maybe a)",36],["return a",39],["-> a",39],["a <- m",38]],"useCount":2134},{"word":"acc","context":[["Nothing → acc",21],["dataMapFoldFn acc js =",25]],"useCount":46},{"word":"accessNextCardInLastDeck","context":[["Interact.accessNextCardInLastDeck",181]],"useCount":181},{"word":"accessPreviousCardInLastDeck","context":[["Interact.accessPreviousCardInLastDeck",28]],"useCount":28},{"word":"accumulates","context":[["--  |   and accumulates the results.",16],["-- |   and accumulates the results.",12]],"useCount":28},{"word":"action","context":[["( action",15],["spec :: forall eff state props action. T.Spec eff state props action",13],["∘ H.action",17],["action",19],["spec :: forall eff state props action. T.Spec eff state props action",13],["case action of",21],[", initializer: Just (H.action Init)",31],["action = Action \\args -> do",32],["$ H.action",36],["action :: Action",39]],"useCount":249},{"word":"addEventListener","context":[["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25]],"useCount":50},{"word":"affReq","context":[["let affReq = defaultRequest",23],["affResp <- affjax affReq",23],["getResult affReq decodeJson affResp",23]],"useCount":69},{"word":"affResp","context":[["affResp <- affjax affReq",23],["getResult affReq decodeJson affResp",23]],"useCount":46},{"word":"aggregate","context":[["QE.throw \"Please select axis to aggregate\"",31]],"useCount":31},{"word":"ajax","context":[[", ajax :: AJAX",12],["(MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)",23],["(Error -> Eff (ajax :: AJAX | e) Unit)",12]],"useCount":47},{"word":"alert","context":[["$ [ B.alert, B.alertInfo, HH.className \"share-loading\" ]",12],["$ [ B.alert, B.alertDanger ]",18]],"useCount":30},{"word":"all","context":[["-- | Fold a data structure from the right, keeping all intermediate results",12],["-- | Fold a data structure from the left, keeping all intermediate results",12],[", all",23]],"useCount":47},{"word":"allows","context":[["-- | The `Functor` instance allows functions to transform the contents of a",19],["--  | The `Functor` instance allows functions to transform the contents of a",16]],"useCount":35},{"word":"alterSeriesFn","context":[["alterSeriesFn Nothing =",13],["alterSeriesFn",13]],"useCount":26},{"word":"and","context":[["-- | and ignores the response.",12],["F.and",36],["--  |   and accumulates the results.",16],["-- | A basic text input field that uses a lens to read from and update the",14],["-- | Creates an asynchronous effect from a function that accepts error and",12],["-- |   and accumulates the results.",12]],"useCount":102},{"word":"andThen","context":[["`andThen` \\_ ->",12],["`andThen` \\_ -> finish cell",15],["import Halogen.HTML.Events.Monad (andThen)",18]],"useCount":45},{"word":"ap","context":[["(<*>) = ap",22],["apply = ap",49]],"useCount":71},{"word":"app","context":[["pure app",17],["renderToDOM \"#app\" app.html",29],["renderToDOM \"#app\" app.html",29],["appendToBody app.node",19]],"useCount":94},{"word":"append","context":[["J.append jExpand jtypExp",14],["alt = append",11],[", append",12]],"useCount":37},{"word":"appendToBody","context":[["appendToBody node",15],["appendToBody app.node",19],["import Halogen.Util (appendToBody)",20]],"useCount":54},{"word":"apply","context":[["import Control.Apply (class Apply, apply, (*>), (<*), (<*>))",11],["apply = ap",49]],"useCount":60},{"word":"arbitrary","context":[["b <- arbitrary",27],["isNothing ← arbitrary",30],["import Test.StrongCheck.Arbitrary (arbitrary)",34],["arbitrary = do",157],["value ← map runArbJCursor arbitrary",24],["<*> arbitrary",22],["arbitrary =",26],["import Test.StrongCheck.Arbitrary (class Arbitrary, arbitrary)",22],["<$> arbitrary",16],["valueAggregation ← arbitrary",24]],"useCount":461},{"word":"arg","context":[["parser: \\arg -> do",12],[", arg:        Just $ arg \"BAZ\"",20],[", arg:        Just $ arg \"BAZ\"",20]],"useCount":52},{"word":"args","context":[["-- | args: `nvim`",12],["out <- getOutputter args",43],["action = Action \\args -> do",32],["let opts = Map.union args.globalOpts args.commandOpts",22],["let opts = Map.union args.globalOpts args.commandOpts",22]],"useCount":131},{"word":"arr","context":[["arr <- emptySTArray",12],["\\  return function (arr) {\\",15],["arr <- thaw [1, 2, 3]",14]],"useCount":41},{"word":"array","context":[["-- | creating a new array.",17],["-- | Running time: `O(n)` where `n` is the length of the array",15],["-- | specified predicate, creating a new array.",12]],"useCount":44},{"word":"as","context":[["import Halogen as H",327],["import Halogen.HTML.Indexed as HH",250],["import Data.List as L",125],["import Data.Foldable as F",126],["import Data.Map as Map",140],["import qualified Halogen.HTML as H",142],["import Data.Array as A",162],["import Halogen.HTML.Events.Indexed as HE",164],["import Halogen.Themes.Bootstrap3 as B",204],["import Halogen.HTML.Properties.Indexed as HP",249]],"useCount":8227},{"word":"ask","context":[["spOpts_' <- ask",46],["Wiring wiring ← H.liftH $ H.liftH ask",43],["ask = lift ask",27],["ask = lift ask",27],["Wiring wiring ← ask",15],["Wiring wiringR ← H.liftH $ H.liftH $ ask",12]],"useCount":170},{"word":"assert","context":[["import Test.Assert (ASSERT, assert)",20],["import Test.Assert (assert)",18],["assert $ runPure (runSTArray (do",18],["assert $ runPure (runST (do",12]],"useCount":68},{"word":"attempt","context":[["import Control.Monad.Aff (Aff(), attempt)",15],["import Control.Monad.Aff (attempt)",32]],"useCount":47},{"word":"attribs","context":[["a attribs content = element \"a\" attribs (Just content)",15],["p attribs content = element \"p\" attribs (Just content)",15],["a attribs content = element \"a\" attribs (Just content)",15],[", attribs:   attribs",15],["img attribs = element \"img\" attribs Nothing",15],["element name attribs content = Element",15],["p attribs content = element \"p\" attribs (Just content)",15],["img attribs = element \"img\" attribs Nothing",15],[", attribs:   attribs",15]],"useCount":135},{"word":"authorization","context":[["let authorization = spParams_.authorization",36],["let authorization = spParams_.authorization",36],["[Tuple \"Authorization\" (gDefaultToURLPiece authorization)]",18],["[{ field : \"Authorization\" , value : encodeHeader spOpts_' authorization",18]],"useCount":108},{"word":"autoSelect","context":[["$ autoSelect",44]],"useCount":44},{"word":"avar","context":[[". (Affable (avar ∷ AVAR | eff) g, Functor g)",21],[", avar :: AVAR",17]],"useCount":38},{"word":"axes","context":[["⊕ st.axes.time",37],["{ axes ∷ Axes",31],["{ axes: initialAxes",31],["$ st.axes.value",31],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],["H.modify _{axes = axes}",21],["$ st.axes.category",46],["H.modify _{axes = axes}",21],["⊕ st.axes.date",20],["⊕ st.axes.datetime",16]],"useCount":276},{"word":"axis","context":[["QE.throw \"Please select axis to aggregate\"",31]],"useCount":31},{"word":"axisLabelAngle","context":[[", axisLabelAngle ∷ Number",12],[", axisLabelAngle",14]],"useCount":26},{"word":"b","context":[["-> (forall b. Maybe b)",25],["_ -> b",20],["case b of",22],["(/=) a b = not $ a == b",22],["(/=) a b = not $ a == b",22],["(/=) a b = not (a == b)",24],["(/=) a b = not (a == b)",24],["-> b",73],["-> (forall b. Maybe b)",25],["b <- arbitrary",27]],"useCount":525},{"word":"background","context":[["background = key $ fromString \"background\"",18],["background = key $ fromString \"background\"",18]],"useCount":36},{"word":"base","context":[["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25],["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25],["clearEventListener = fpi [\"base\", \"type\", \"\"] \"base.clearEventListener(type);\"",25],["clearEventListener = fpi [\"base\", \"type\", \"\"] \"base.clearEventListener(type);\"",25],["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25],["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25]],"useCount":250},{"word":"baseURL","context":[["let baseURL = spParams_.baseURL",46],["let baseURL = spParams_.baseURL",46]],"useCount":92},{"word":"bind","context":[["import Test.Helper (Suite, bind, quickCheck, suite, test, (===))",26]],"useCount":26},{"word":"bounds","context":[["-- | returning `Nothing` if the index is out of bounds.",18],["-- | list or `Nothing` if the index is out-of-bounds.",12]],"useCount":30},{"word":"browseTestFolder","context":[["Interact.browseTestFolder",45]],"useCount":45},{"word":"btn","context":[["[ H.button [ A.classes [B.btn, B.btnDefault]",11],["[ HP.classes [ B.btn, B.btnPrimary ]",16],["[ HP.classes [ B.btn ]",20],["[ HP.classes [ B.btn, B.btnDefault ]",27]],"useCount":74},{"word":"btnDefault","context":[["[ HP.classes [ B.btn, B.btnDefault ]",27],["[ H.button [ A.classes [B.btn, B.btnDefault]",11]],"useCount":38},{"word":"buildPath","context":[["buildPath <- getOption' \"buildPath\" opts",14],["buildPath <- getOption' \"buildPath\" opts",14]],"useCount":28},{"word":"button","context":[["H.button",11],["[ H.button [ A.classes [B.btn, B.btnDefault]",11],["[ R.button",17],[", R.button",19],["[ HH.button",109],[", HH.button",81],["HH.button",40],[", H.button",22],["[ H.button",21],[", A.type_ \"button\"",21]],"useCount":352},{"word":"buttonType","context":[[", HP.buttonType HP.ButtonButton",64]],"useCount":64},{"word":"by","context":[["-- Generated by psc-make version 0.6.9.5",127],["--  | - multiplication by `zero` annihilates `a`",12],["-- Generated by psc-make version 0.6.9.3",54],["-- | Default implementations are provided by the following functions:",16],["-- | Used by hot-reloading code in support/index.js",13]],"useCount":222},{"word":"c","context":[["<> show c",29],["\\      return function(c) {\\",14],["case c of",12],["in Tuple r c",12],["[ \"-n\", \"-a\", \"-b\", \"-c\" ]",11],["-> c",16],["then Result (Right c) (drop 1 str)",26]],"useCount":120},{"word":"cantab","context":[["-- Maintainer  :  Phil Freeman <paf31@cantab.net>",27]],"useCount":27},{"word":"canvas","context":[["canvas <- getCanvasElementById \"canvas\"",15],["canvas <- getCanvasElementById \"canvas\"",15],["Just canvas <- getCanvasElementById \"canvas\"",20],["Just canvas <- getCanvasElementById \"canvas\"",20],["ctx <- getContext2D canvas",31]],"useCount":101},{"word":"card","context":[["case card of",24],["CC.Load card next → do",22],["CC.Load card next →",17]],"useCount":63},{"word":"cardEval","context":[["cardEval = case _ of",42],["cardEval ∷ CC.CardEvalQuery ~> DSL",36]],"useCount":78},{"word":"cards","context":[[", cards: snd <$> modelCards.rest",12],["cards ← makeCache",16]],"useCount":28},{"word":"case","context":[["case e of",48],["encodeJson v = case v of",55],["case res of",56],["case result of",74],["case ty of",79],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46],["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46],["case tag of",99],["case _ of",129],["case r of",139]],"useCount":1623},{"word":"catMaybes","context":[["catMaybes = mapMaybe id",17],[", catMaybes",24],["A.catMaybes",25]],"useCount":66},{"word":"category","context":[["$ st.axes.category",46],["{ category: _",11]],"useCount":57},{"word":"cc","context":[["cc.series A.!! 0 >>= view S._value",20],["cc.measures A.!! 0 >>= view S._value",18],["cc.dimensions A.!! 0 >>= view S._value",12],["join $ cc.aggregations A.!! 0 >>= view S._value",12]],"useCount":62},{"word":"cell","context":[["`andThen` \\_ -> finish cell",15],["case cell ^. _content of",12]],"useCount":27},{"word":"charAt","context":[["case charAt 0 str of",29]],"useCount":29},{"word":"chartConfigureForm","context":[["[ HP.classes [ CSS.chartConfigureForm ]",50],[", H.form [ A.classes [ B.colXs4, VC.chartConfigureForm ] ]",11],[", VC.chartConfigureForm",12],["[ HP.classes [ CSS.withAggregation, CSS.chartConfigureForm ]",23]],"useCount":96},{"word":"check","context":[["check :: QC Unit",37],[", check",38],["-- check _type_",14]],"useCount":89},{"word":"class","context":[["import Control.Monad.Eff.Class (class MonadEff, liftEff)",32],["import Data.Generic (class Generic)",83],["import Data.Monoid (class Monoid)",57],["import Control.MonadPlus (class MonadPlus)",25],["import Control.Monad.Aff.Free (class Affable)",27],["import Control.Alt (class Alt)",28],["import SlamData.Quasar.Class (class QuasarDSL)",44],["import Control.Alternative (class Alternative)",46],["import Data.Newtype (class Newtype)",49],["import Data.Monoid (class Monoid, mempty)",54]],"useCount":1203},{"word":"className","context":[[", R.div [ RP.className \"col-sm-8\" ]",16],["$ [ B.alert, B.alertInfo, HH.className \"share-loading\" ]",12],["R.div [ RP.className \"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3\" ]",12],[", R.div [ RP.className \"form-group\" ]",36],["import Halogen.HTML.Core (className, ClassName)",19],[", RP.className \"form-control\"",19],["R.div [ RP.className \"form-group\" ]",14]],"useCount":128},{"word":"classes","context":[["[ HP.classes",173],["[ HP.classes [ B.formControl ]",72],["[ HP.classes [ CSS.chartConfigureForm ]",50],["[ HP.classes [ B.btn, B.btnDefault ]",27],["[ HP.classes [ CSS.withAggregation, CSS.chartConfigureForm ]",23],["[ HP.classes [ B.btn ]",20],["[ HP.classes [ B.inputGroupBtn ] ]",19],["[ HP.classes [ B.btn, B.btnPrimary ]",16],[", HP.classes",16],["[ HP.classes [ B.colXs6, CSS.axisLabelParam ]",23]],"useCount":491},{"word":"clearEventListener","context":[["clearEventListener = fpi [\"base\", \"type\", \"\"] \"base.clearEventListener(type);\"",25],["clearEventListener = fpi [\"base\", \"type\", \"\"] \"base.clearEventListener(type);\"",25]],"useCount":50},{"word":"col","context":[["R.div [ RP.className \"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3\" ]",12],["R.div [ RP.className \"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3\" ]",12],["R.div [ RP.className \"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3\" ]",12],[", R.div [ RP.className \"col-sm-8\" ]",16],["R.div [ RP.className \"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3\" ]",12]],"useCount":64},{"word":"colors","context":[["import SlamData.Workspace.Card.BuildChart.ColorScheme (colors)",21],["E.colors colors",25],["E.colors colors",25]],"useCount":71},{"word":"comp","context":[[", comp",17],["comp ∷ H.Component StateP QueryP Slam",23],["( comp",36],["comp =",37],["comp = H.component { render, eval }",42],["case comp k k1 of",12],["comp :: H.Component State Query Slam",15],["comp = component render eval",15],["comp ∷ H.Component State Query Slam",44]],"useCount":241},{"word":"compare","context":[["compare _ _ = EQ",20],["sort xs = sortBy compare xs",11],["insert = insertBy compare",11],["import Prelude hiding (compare)",12],["case compare x y of",13],["import Data.Ord (class Ord, compare)",14],["compare = gCompare",24],["compare = unsafeCompare",36]],"useCount":141},{"word":"component","context":[["comp = H.component { render, eval }",42],["comp = component render eval",15],["{ component: DPC.picker",24],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24],[", component: H.component { render, eval }",19],[", component: H.component { render, eval }",19],["ui = component render eval",17]],"useCount":160},{"word":"config","context":[["config <- getConfig",352]],"useCount":352},{"word":"configType","context":[["configType ← obj .? \"configType\"",32],["configType ← obj .? \"configType\"",32]],"useCount":64},{"word":"console","context":[[", console :: CONSOLE",38],["main :: Eff (console :: CONSOLE) Unit",26],["main :: forall eff. Eff (console :: CONSOLE | eff) Unit",17],["main :: forall e. Eff (console :: CONSOLE | e) Unit",15],["-> Eff (console :: CONSOLE | r) Unit",14]],"useCount":110},{"word":"consoleReporter","context":[["import Test.Spec.Reporter.Console (consoleReporter)",23],["main = run [consoleReporter] do",16]],"useCount":39},{"word":"const","context":[["dims' = const 1.0",12],["(const (pure unit))",12],["(const Nothing)",16],["main = runAff throwException (const (pure unit)) $ do",20],["peek = coproduct peekPicker (const (pure unit))",14],["(const $ pure unit)",13]],"useCount":87},{"word":"content","context":[["a attribs content = element \"a\" attribs (Just content)",15],[", content:   content",15],["renderContent e.content",20],["a attribs content = element \"a\" attribs (Just content)",15],[", content:   content",15],["p attribs content = element \"p\" attribs (Just content)",15],["element name attribs content = Element",15],["p attribs content = element \"p\" attribs (Just content)",15],["renderContent (Just content) =",12]],"useCount":137},{"word":"contents","context":[["r <- readProp \"contents\" json",68],["r <- obj .? \"contents\"",34],["~> \"contents\" := [encodeJson x0]",32],["~> \"contents\" := ([] :: Array String)",20],["-- | The `Functor` instance allows functions to transform the contents of a",19],["--  | The `Functor` instance allows functions to transform the contents of a",16],[", \"contents\" .= ([] :: Array String)",12]],"useCount":201},{"word":"coproduct","context":[["coproduct",20],["peek = coproduct peekPicker (const (pure unit))",14]],"useCount":34},{"word":"create","context":[["( create",12],[", create",32]],"useCount":44},{"word":"creating","context":[["-- | specified predicate, creating a new array.",12],["-- | creating a new array.",17]],"useCount":29},{"word":"ctx","context":[["\\      return ctx;\\",20],["fillPath ctx $ rect ctx",11],["withContext ctx $ do",11],["setFillStyle \"#00FF00\" ctx",11],["ctx <- getContext2D canvas",31],["\\  return function(ctx) {\\",13],["restore ctx",12],["save ctx",12],["setFillStyle \"#0000FF\" ctx",12],["setStrokeStyle \"#000000\" ctx",11]],"useCount":166},{"word":"cwd","context":[["cwd <- liftEff Process.cwd",20],["cwd <- liftEff Process.cwd",20]],"useCount":40},{"word":"d","context":[["\\        return function(d) {\\",11],["case d of",13],["d </>",14]],"useCount":38},{"word":"data","context":[["foreign import data STArray :: * -> * -> *",13],["data Routes",14],["data Dialog",13],["foreign import data Event :: *",13],["foreign import data File :: *",13],["data Query a",171],["-- | for every element in a data structure:",13],["data Maybe a = Nothing | Just a",15],["data Selection f",17],["data Action",28]],"useCount":426},{"word":"dataMapFoldFn","context":[["foldl dataMapFoldFn M.empty records",25],["dataMapFoldFn",25],["dataMapFoldFn acc js =",25]],"useCount":75},{"word":"db","context":[["-> (Error -> Eff (db :: DB | e) Unit)",14],["-> (Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["(Error -> Eff (db :: DB | e) Unit)",15],["(Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["(Eff (db :: DB | e) (Canceler (db :: DB | e)))",14],["-> (Eff (db :: DB | e) (Canceler (db :: DB | e)))",14]],"useCount":85},{"word":"decode","context":[["decode js",33],["decode =",25],["decode",29],["decode ∷ Json → String ⊹ Model",30],[", decode",47]],"useCount":164},{"word":"decodeJson","context":[["import Data.Argonaut.Decode (class DecodeJson, decodeJson)",22],["decodeJson >=> \\obj → do",48],["import Data.Argonaut.Decode (DecodeJson, decodeJson)",48],["obj <- decodeJson json",175],["decodeJson json = do",227],["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["obj ← decodeJson js",34],["getResult affReq decodeJson affResp",23],["import Data.Argonaut (encodeJson, decodeJson)",25],["obj ← decodeJson json",17]],"useCount":723},{"word":"default","context":[[", default:    Just (int 100)",15],[", default:    Nothing",12]],"useCount":27},{"word":"defaultOptions","context":[["(Just (defaultOptions { stopAt = [ \"-x\" ] }))",13],["(Just (defaultOptions",15],["read = readGeneric defaultOptions",14]],"useCount":42},{"word":"defaultRequest","context":[["let affReq = defaultRequest",23],[", headers = defaultRequest.headers <> reqHeaders",23]],"useCount":46},{"word":"defaultToRequest","context":[["toRequest = defaultToRequest",30]],"useCount":30},{"word":"defined","context":[["--  | defined in this library.",21],["-- | defined in this library.",28]],"useCount":49},{"word":"defining","context":[["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20],["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12]],"useCount":32},{"word":"delete","context":[[", delete",43],["Nothing -> delete k m",12]],"useCount":55},{"word":"dims","context":[["CC.SetDimensions dims next → do",41],["if dims.width < 576.0 ∨ dims.height < 416.0",19],["dims' = const 1.0",12],["if dims.width < 576.0 ∨ dims.height < 416.0",19]],"useCount":91},{"word":"dirOrFile","context":[["Tuple pp dirOrFile ← P.peel p",25],["Tuple pp dirOrFile <- peel p",12]],"useCount":37},{"word":"disabled","context":[[", HP.disabled state.submitting",27],[", A.disabled enabled",12]],"useCount":39},{"word":"discipline","context":[["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"dispatchEvent","context":[["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25],["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25]],"useCount":50},{"word":"div","context":[["[ H.div",28],[", div",44],["H.div",59],["[ div",34],["div",34],["HH.div",301],[", R.div [ RP.className \"form-group\" ]",36],[", HH.div",86],["[ R.div",31],["[ HH.div",120]],"useCount":940},{"word":"div_","context":[["[ HH.div_",23],["H.div_",40],["HH.div_",89]],"useCount":152},{"word":"do","context":[["sequence do",60],["main = do",538],["decodeJson json = do",227],["arbitrary = do",157],["else do",135],["then do",78],["Nothing -> do",57],["do",50],["decodeJson >=> \\obj → do",48],["E.textStyle do",46]],"useCount":2609},{"word":"document","context":[["import DOM.HTML.Window (document)",29],["doc <- document globalWindow",16]],"useCount":45},{"word":"dom","context":[["-> (e -> Eff (dom :: DOM | t) Unit)",40],[", dom :: DOM",14],["-> Eff (dom :: DOM | eff) Unit",14],["\\}\" :: forall eff a. String -> a -> (Eff (dom :: DOM | eff) Unit)",16],["-> Eff (dom :: DOM | eff ) ChartType",12],["-> (Eff (dom :: DOM | ta) Unit)",40],["\\}\" :: forall eff a. a -> (Eff (dom :: DOM | eff) String)",11]],"useCount":147},{"word":"domain","context":[["domain      :: String,",11],["domain = unsafeDomain",21]],"useCount":32},{"word":"drop","context":[["in Result (Left msg) (drop 1 str)",14],["then Result (Right c) (drop 1 str)",26],[", drop",31]],"useCount":71},{"word":"e","context":[[":: forall e",65],[":: forall e.",78],["case e of",48],["∷ ∀ e",17],["} catch (e) {",18],["-> Eff (phantomjs :: PHANTOMJS | e) Unit",19],["renderContent e.content",20],["throwError e = lift (throwError e)",26],["throwError e = lift (throwError e)",26],["-> (e -> Eff (dom :: DOM | t) Unit)",40]],"useCount":582},{"word":"editor","context":[["session <- Editor.getSession editor",16],["Editor.setTheme \"ace/theme/chrome\" editor",14],["Editor.navigateFileEnd editor",14],["Editor.setEnableBasicAutocompletion true editor",12]],"useCount":56},{"word":"eff","context":[["-> (Eff (webgl :: WebGl | eff) Unit)",94],[":: forall eff",92],["∷ ∀ eff o",91],["∷ ∀ eff m",89],["∷ ∀ eff",28],["-> Callback eff Unit",29],["→ Feature eff o Unit",67],["| eff",47],["-> Eff (fs :: FS | eff) Unit",45],[". (Monad m, Affable (QEff eff) m)",43]],"useCount":1035},{"word":"effects","context":[[", effects:",14],[", effects: [ do",15]],"useCount":29},{"word":"either","context":[["import Data.Either (Either(..), either)",153],["either",21],["import Data.Either (either)",72]],"useCount":246},{"word":"el","context":[["for_ els \\el -> do",11],["\\   return function(el){ \\",18]],"useCount":29},{"word":"elem","context":[[", elem",23],["import Data.Foldable (elem)",16]],"useCount":39},{"word":"element","context":[["p attribs content = element \"p\" attribs (Just content)",15],["element name attribs content = Element",15],["a attribs content = element \"a\" attribs (Just content)",15],["-- | for every element in a data structure:",13],["-- | from the element type of the final data structure.",12],["img attribs = element \"img\" attribs Nothing",15]],"useCount":85},{"word":"elements","context":[["-- | function to determine equality of elements.",16],["-- | 2. the remaining elements",11]],"useCount":27},{"word":"else","context":[["else",230],["else Nothing",73],["else do",135],["else pure unit",52],["else []",48],["else [ ]",22],["else name",14],["else map Just do",24],["} else {",29],["else High",39]],"useCount":741},{"word":"empty","context":[["unions = foldl union empty",19],["mempty = empty",18],["Nothing -> empty",16],["<?> \"was not empty\")",12],[", empty",23],["foldl dataMapFoldFn M.empty records",25],["import Control.Plus (empty)",102],["empty",39],["import Control.Plus (class Plus, empty)",22],["-- | An empty map",12]],"useCount":299},{"word":"emptyModel","context":[["emptyModel ∷ Model",13],[", emptyModel",14]],"useCount":27},{"word":"emptySelect","context":[["import SlamData.Form.Select (Select, emptySelect)",30],[", value: emptySelect",24],[", valueAgg: emptySelect",22],[", parallel: emptySelect",12],[", series: emptySelect",13]],"useCount":101},{"word":"encode","context":[["encode Nothing = jsonNull",35],["encode",26],["encode (Just r) =",30],["encode ∷ Model → Json",40],[", encode",49]],"useCount":180},{"word":"encodeJson","context":[["~> \"labels\" := encodeExpr encodeJson xs",12],["~> \"contents\" := [encodeJson x0]",32],["let str = printJson (encodeJson s) :: String",26],["import Data.Argonaut.Encode (class EncodeJson, encodeJson)",12],["import Data.Argonaut (encodeJson, decodeJson)",25],["import Data.Argonaut.Encode (EncodeJson, encodeJson)",25],["encodeJson v = case v of",55]],"useCount":187},{"word":"end","context":[["\\    end\\n\\",28],["_ -> Result (Left \"Reached end of file\") str",29],["-- .end",44],["\\        end\\n\\",12]],"useCount":113},{"word":"ensure","context":[["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["import Data.DOM.Simple.Unsafe.Utils(ensure, showImpl)",12]],"useCount":30},{"word":"env","context":[[", env:        Nothing",31]],"useCount":31},{"word":"eq","context":[["eq _ _ = false",141],["eq = gEq",55],["eq = refEq",30],["eq _ _ = true",19],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12]],"useCount":257},{"word":"eqModel","context":[["eqModel Nothing Nothing = true",34],["eqModel ∷ Model → Model → Boolean",43],["eqModel _ _ = false",34],[", eqModel",14],["eqModel m1 m2 =",11]],"useCount":136},{"word":"err","context":[["Left err -> Failed $ \"Decode failed: \" <> err",26],["Left err -> do",19],[", err :: EXCEPTION",28],["Left err -> Failed $ \"Decode failed: \" <> err",26],["Left err → do",29],["Left err -> Failed $ \"Decode failed: \" ++ err",30],["Left err -> Failed $ \"Decode failed: \" ++ err",30],["case GE.fromQError err of",33],["Left err ->",43],["Left err →",68]],"useCount":393},{"word":"error","context":[["return function(success, error) {",16],["error(e);",14],["-- | Creates an asynchronous effect from a function that accepts error and",12],["import Control.Monad.Eff.Exception (Error(), error)",12],["import Control.Monad.Eff.Exception (error)",86],[", error :: Maybe String",17],["throwError (error (",14],["case error of",13],["foreign import error",12],[", error: Nothing",24]],"useCount":232},{"word":"eval","context":[["eval (Dismiss next) = pure next",36],[", eval",59],["eval",48],["comp = H.component { render, eval }",42],["eval ∷ Query ~> DSL",38],["( eval",31],[", component: H.component { render, eval }",19],["eval = case _ of",22],["eval ∷ Q.QueryC ~> DSL",22],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24]],"useCount":428},{"word":"event","context":[["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25],["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25]],"useCount":50},{"word":"example","context":[["--  | For example:",28],["-- | For example:",134],["-- | For example,",13],["-- | For example",11]],"useCount":186},{"word":"expectPresentedWithProperties","context":[["expectPresentedWithProperties properties xPath",12],["expectPresentedWithProperties",17]],"useCount":29},{"word":"experimental","context":[["-- Stability   :  experimental",27]],"useCount":27},{"word":"f","context":[["showPicker f options =",30],["read f = do",22],["state f = lift (state f)",26],["state f = lift (state f)",26],["-> f a",22],["_ { picker = Just { options, select: f (Const unit) } }",28],["pure :: forall a. a -> f a",14],["data Selection f",17],["∷ ∀ f m",20],["-> f Unit",18]],"useCount":506},{"word":"failed","context":[["Left err -> Failed $ \"Decode failed: \" ++ err",30],["Left err -> Failed $ \"Decode failed: \" <> err",26]],"useCount":56},{"word":"false","context":[["eq _ _ = false",141],["Nothing -> false",14],["isDirectory _ = false",14],["false -> do",15],[", ignoreCase: false",16],["_ → false",16],[", repeatable: false",30],["eqModel _ _ = false",34],["(==) _ _ = false",50],["_ -> false",60]],"useCount":482},{"word":"field","context":[["[{ field : \"Authorization\" , value : encodeHeader spOpts_' authorization",18],["-- | A basic text input field that uses a lens to read from and update the",14],["case field of",16]],"useCount":48},{"word":"file","context":[["_ -> Result (Left \"Reached end of file\") str",29],["</> Pathy.file \"index\"",12]],"useCount":41},{"word":"filter","context":[["import Data.Array (filter)",23],[", filter",32]],"useCount":55},{"word":"final","context":[["-- | from the element type of the final data structure.",12],["-- | instead of only the final result.",20]],"useCount":32},{"word":"finalizer","context":[[", finalizer: Nothing",47]],"useCount":47},{"word":"fl","context":[["let fl = readFloat str",19],["unless (isNaN fl) do",19]],"useCount":38},{"word":"flattenJCursors","context":[["value' = flattenJCursors value",20],["import SlamData.Workspace.Card.BuildChart.DimensionPicker.JCursor (groupJCursors, flattenJCursors)",19]],"useCount":39},{"word":"fold","context":[["fold",18],[", fold",13],["import Data.Foldable (fold)",36]],"useCount":67},{"word":"foldFn","context":[["foldFn",14],["foldFn m tpls =",12]],"useCount":26},{"word":"foldMap","context":[["import Data.Foldable (foldMap)",29]],"useCount":29},{"word":"foldl","context":[["import Data.Foldable (foldl)",111],["foldl dataMapFoldFn M.empty records",25],["unions = foldl union empty",19],["foldl :: forall a b. (b -> a -> b) -> b -> f a -> b",11],["foldl",12]],"useCount":178},{"word":"foldr","context":[["import Data.Foldable (foldr)",29],["foldr :: forall a b. (a -> b -> b) -> b -> f a -> b",11]],"useCount":40},{"word":"fontFamily","context":[["E.fontFamily \"Ubuntu, sans\"",52],["E.textStyle $ E.fontFamily \"Ubuntu, sans\"",17]],"useCount":69},{"word":"fontSize","context":[["E.fontSize 12",26]],"useCount":26},{"word":"for","context":[["import Data.Traversable (for)",36],["-- | to combine values for duplicate keys.",16],[", for",14],["-- | for every element in a data structure:",13],["-- | An infix synonym for `range`.",11],["-- | `Data.Sequence` instead, which might give better performance for certain",11],["-- | A simpler version of `foldJson` which accepts a callback for when the",12],["-- | This function is provided for internal use.",12]],"useCount":125},{"word":"for_","context":[["import Data.Foldable (for_)",68],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],["import Data.Foldable(for_)",13],["for_",18],["for_ serie.name E.name",17],["for_ st.picker \\{ select } → case select of",14],["for_ (zipItems ItemSlot items) \\slot ->",12],["for_ els \\el -> do",11]],"useCount":175},{"word":"forall","context":[["-> (forall a. Maybe a)",36],["-> (forall b. Maybe b)",25],[":: forall g",19],[":: (forall a. a -> Maybe a)",16],["main :: forall eff. Eff (console :: CONSOLE | eff) Unit",17],[":: forall a h r",18],[":: forall eff",92],[":: forall e.",78],[":: forall e",65],[":: forall a",56]],"useCount":639},{"word":"foreign","context":[["foreign import decodeURIComponent :: String -> String",11],["foreign import data ST :: * -> !",11],["foreign import data STRef :: * -> * -> *",11],["foreign import error",12],["foreign import data STArray :: * -> * -> *",13],["foreign import data File :: *",13],["foreign import data Event :: *",13],["foreign import",31]],"useCount":115},{"word":"form","context":[["R.div [ RP.className \"form-group\" ]",14],[", H.form [ A.classes [ B.colXs4, VC.chartConfigureForm ] ]",11],["HH.form",130],[", R.div [ RP.className \"form-group\" ]",36],["[ HH.form",27],[", RP.className \"form-control\"",19]],"useCount":237},{"word":"formControl","context":[["[ HP.classes [ B.formControl ]",72],["[ H.input [ A.classes [B.formControl]",15]],"useCount":87},{"word":"fpi","context":[["clearEventListener = fpi [\"base\", \"type\", \"\"] \"base.clearEventListener(type);\"",25],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["dispatchEvent = fpi [\"base\", \"event\", \"\"] \"base.dispatchEvent(event);\"",25],["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25]],"useCount":125},{"word":"from","context":[["-- | Creates an asynchronous effect from a function that accepts error and",12],["-- | from the element type of the final data structure.",12],["-- | Fold a data structure from the left, keeping all intermediate results",12],["-- | Fold a data structure from the right, keeping all intermediate results",12],["-- | A basic text input field that uses a lens to read from and update the",14]],"useCount":62},{"word":"fromCharCode","context":[["import Data.Char (fromCharCode)",32]],"useCount":32},{"word":"fromEff","context":[["H.fromEff $ locationObject >>= Location.setHash deckHash",14],["newId ← H.fromEff freshDeckId",12],["varMaps ← H.fromEff $ Ref.readRef wiring.urlVarMaps",11],["import Control.Monad.Aff.Free (class Affable, fromEff)",12],["H.fromEff",12]],"useCount":61},{"word":"fromEnum","context":[["pred = toEnum <<< (_ - 1) <<< fromEnum",17],["succ = toEnum <<< (_ + 1) <<< fromEnum",17]],"useCount":34},{"word":"fromFoldable","context":[[", values: groupJCursors (List.fromFoldable options)",21],[", fromFoldable",20],["A.fromFoldable",17],["import Data.Array (fromFoldable)",11]],"useCount":69},{"word":"fromJust","context":[["import Data.Maybe.Unsafe (fromJust)",84],["import Data.Maybe (fromJust)",22],["import Data.Maybe (Maybe(..), fromJust)",20]],"useCount":126},{"word":"fromMaybe","context":[["import Data.Maybe (Maybe(..), fromMaybe)",71],["import Data.Maybe (fromMaybe)",43],["import Data.Maybe (Maybe(..), maybe, fromMaybe)",33],["import Data.Maybe (Maybe(..), fromMaybe, maybe)",26]],"useCount":173},{"word":"fromNumber","context":[[", lvl: fromNumber 0 }",11],["import Data.Int (fromNumber, toNumber)",21],["import Data.Int (fromNumber)",14]],"useCount":46},{"word":"fromQError","context":[["case GE.fromQError err of",33]],"useCount":33},{"word":"fromRight","context":[["unsafePartial fromRight $",26],["import Data.Either.Unsafe (fromRight)",11]],"useCount":37},{"word":"fromSpine","context":[["fromSpine _ = Nothing",56]],"useCount":56},{"word":"fromString","context":[["import CSS.String (class IsString, fromString)",12],[", fromString",14],["import Data.Int (fromString)",17],["inherit = fromString \"inherit\"",26],["import CSS.String (fromString)",28],["background = key $ fromString \"background\"",18]],"useCount":115},{"word":"fs","context":[["(Eff (fs :: FS | eff) Unit)",12],["-> Eff (fs :: FS, err :: EXCEPTION | eff) Unit",13],["-> Eff (fs :: FS, err :: Exception | eff) Unit",15],["-> Eff (fs :: FS | eff) Unit",45]],"useCount":85},{"word":"fst","context":[["import Data.Tuple (fst, snd)",14],["import Data.Tuple (Tuple(..), fst, snd)",58],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12],["import Data.Tuple (Tuple(..), fst)",22]],"useCount":106},{"word":"function","context":[["return function () {",131],["return function() {",124],["\\   return function(){ \\",85],["\\    return function() {\\",72],["\\  return function() {\\",67],["return function(){",41],["\\  return function(n2) {\\",39],["\\  return function(a) {\\",33],["return function(s) {",32],["\\     return function(){ \\",30]],"useCount":1035},{"word":"functions","context":[["-- | The `Functor` instance allows functions to transform the contents of a",19],["-- | Default implementations are provided by the following functions:",16],["--  | The `Functor` instance allows functions to transform the contents of a",16]],"useCount":51},{"word":"g","context":[[". (Affable (avar ∷ AVAR | eff) g, Functor g)",21],[". (Affable (avar ∷ AVAR | eff) g, Functor g)",21],["g Done        = Done",34],[":: forall g",19],["-> FormBuilderHTML g",15],[". (Functor g)",12],[":: forall a e g",12],["g Nothing             = pure b",12]],"useCount":146},{"word":"gCompare","context":[["import Data.Generic (Generic, gEq, gCompare)",19],["compare = gCompare",24]],"useCount":43},{"word":"gEq","context":[["eq = gEq",55],["import Data.Generic (Generic, gEq, gCompare)",19]],"useCount":74},{"word":"gShow","context":[["show = gShow",113]],"useCount":113},{"word":"ge","context":[["Right ge →",23],["GE.raiseGlobalError ge",28]],"useCount":51},{"word":"genModel","context":[[", genModel",17],["genModel ∷ Gen.Gen Model",51],["genModel = do",44]],"useCount":112},{"word":"get","context":[["state <- H.get",13],["state <- get",34],["st ← H.get",254],["s <- get",13],["astate ← H.get",12],["state <- get :: Component (Props ps) State State",14],["GameState state <- get",21],[", get",28],["state ← H.get",77]],"useCount":466},{"word":"getCanvasElementById","context":[["canvas <- getCanvasElementById \"canvas\"",15],["Just canvas <- getCanvasElementById \"canvas\"",20]],"useCount":35},{"word":"getConfig","context":[["config <- getConfig",352]],"useCount":352},{"word":"getContext2D","context":[["ctx <- getContext2D canvas",31]],"useCount":31},{"word":"getMaybeString","context":[["getMaybeStringFromJson = getMaybeString js",21],["import SlamData.Workspace.Card.BuildChart.Semantics (getMaybeString, getValues)",21]],"useCount":42},{"word":"getMaybeStringFromJson","context":[["getMaybeStringFromJson =<< r.series",12],["getMaybeStringFromJson =<< r.parallel",11],["getMaybeStringFromJson = getMaybeString js",21]],"useCount":44},{"word":"getOutputter","context":[["out <- getOutputter args",43]],"useCount":43},{"word":"getValues","context":[["import SlamData.Workspace.Card.BuildChart.Semantics (getMaybeString, getValues)",21],["getValuesFromJson = getValues js",21]],"useCount":42},{"word":"getValuesFromJson","context":[["getValuesFromJson $ pure r.value",21],["getValuesFromJson = getValues js",21]],"useCount":42},{"word":"gets","context":[["deckId ← H.gets _.id",12],["path ← H.gets _.path",21]],"useCount":33},{"word":"glyph","context":[["[ glyph B.glyphiconCopy ]",14],["import SlamData.Render.Common (glyph)",41],["import View.Common (glyph)",11],["[ glyph B.glyphiconRemove ]",12]],"useCount":78},{"word":"go","context":[["go ∷ PU.FilePath → Resource",15],["go _ = pure unit",15],["go Nil = Nil",15],["go _ = Nothing",12],["go _ Nil = Nil",12]],"useCount":69},{"word":"group","context":[[", R.div [ RP.className \"form-group\" ]",36],[", group'",11],["group' = group <<< sort",11],[", group",15],["R.div [ RP.className \"form-group\" ]",14],["group' = group <<< sort",11]],"useCount":98},{"word":"groupJCursors","context":[["import SlamData.Workspace.Card.BuildChart.DimensionPicker.JCursor (groupJCursors, flattenJCursors)",19],[", values: groupJCursors (List.fromFoldable options)",21]],"useCount":40},{"word":"guard","context":[["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],["import Control.MonadPlus (guard)",51]],"useCount":80},{"word":"head","context":[[", head",37]],"useCount":37},{"word":"headers","context":[[", headers = defaultRequest.headers <> reqHeaders",23],[", headers = defaultRequest.headers <> reqHeaders",23]],"useCount":46},{"word":"height","context":[["height = AttributeKey \"height\"",16],["height = AttributeKey \"height\"",16],["if dims.width < 576.0 ∨ dims.height < 416.0",19],[", height",23],["height <- windowHeight",11],[", height :: Int",12]],"useCount":97},{"word":"hidden","context":[["⊕ (if state.loading then [ B.hidden ] else [ ])",12],["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],["⊕ if state.loading then [ ] else [ B.hidden ]",12],["⊕ if state.loading then [ B.hidden ] else [ ]",12]],"useCount":65},{"word":"hiding","context":[["import Selenium.ActionSequence hiding (sequence)",20],["import Prelude hiding (compare)",12],["import Prelude hiding (div)",21],["import Graphics.Canvas hiding (translate)",11]],"useCount":64},{"word":"hr_","context":[[", HH.hr_",41]],"useCount":41},{"word":"href","context":[[", href",24],["href = AttributeKey \"href\"",16],["href = AttributeKey \"href\"",16]],"useCount":56},{"word":"html","context":[["renderToDOM \"#app\" app.html",29]],"useCount":29},{"word":"httpMethod","context":[["let httpMethod = \"POST\"",14],["let httpMethod = \"GET\"",16],["{ method = httpMethod",23],["{ httpMethod: httpMethod",23],["{ httpMethod: httpMethod",23]],"useCount":99},{"word":"id","context":[["id x = x",11],["sequence = traverse id",27],["catMaybes = mapMaybe id",17],["idParam <- getRouteParam \"id\"",14],["toValue = id",12],["id :: forall t. a t t",12],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12],["deckId ← H.gets _.id",12],[">>= id",11],["import Control.Category (id)",12]],"useCount":140},{"word":"idParam","context":[["idParam <- getRouteParam \"id\"",14],["case idParam of",13]],"useCount":27},{"word":"if","context":[["if isNothing",30],["⊕ if state.loading then [ ] else [ B.hidden ]",12],["⊕ (if state.loading then [ B.hidden ] else [ ])",12],["⊕ if state.loading then [ B.hidden ] else [ ]",12],["-- | list or `Nothing` if the index is out-of-bounds.",12],["if succeeded result.status",15],["-- | returning `Nothing` if the index is out of bounds.",18],["if dims.width < 576.0 ∨ dims.height < 416.0",19]],"useCount":130},{"word":"imapF","context":[["imap = imapF",26],["import Data.Functor.Invariant (class Invariant, imapF)",14]],"useCount":40},{"word":"img","context":[["[ HH.img [ HP.src \"img/blue-spin.svg\" ]",14],["[ HH.img [ HP.src \"img/blue-spin.svg\" ]",14],["img attribs = element \"img\" attribs Nothing",15],["img attribs = element \"img\" attribs Nothing",15],["[ img",16],[", img",20]],"useCount":94},{"word":"import","context":[["import Prelude",3225],["import Data.Either (Either(..))",330],["import SlamData.Prelude",871],["import Prelude ()",351],["import Data.Either",388],["import Data.Tuple",426],["import Data.Maybe (Maybe(..))",496],["import Control.Monad.Eff (Eff)",626],["import Data.Maybe",791],["import Control.Monad.Eff",822]],"useCount":37054},{"word":"in","context":[["in Tuple r c",12],["-- | Used by hot-reloading code in support/index.js",13],["-- | for every element in a data structure:",13],["in Result (Left msg) (drop 1 str)",14],["in Result (Left msg) str",17],["--  | defined in this library.",21],["-- | defined in this library.",28],["in toRequest str",29],["in do",39],["in",470]],"useCount":679},{"word":"index","context":[["-- | list or `Nothing` if the index is out-of-bounds.",12],["</> Pathy.file \"index\"",12],["-- | Used by hot-reloading code in support/index.js",13],["-- | returning `Nothing` if the index is out of bounds.",18]],"useCount":55},{"word":"infix","context":[["infix 5 \\\\",12],["infix 4 /=",11],["-- | An infix synonym for `range`.",11],["infix 4 ==",11]],"useCount":45},{"word":"infixl","context":[["infixl 4 <",11],["infixl 4 <$>",11],["infixl 6 +",11],["infixl 7 *",11],["infixl 7 /",11],["infixl 4 <=",11],["infixl 4 >",11],["infixl 4 >=",11],["infixl 1 >>=",11],["infixl 8 !!",12]],"useCount":133},{"word":"infixr","context":[["infixr 9 <<<",11],["infixr 0 $",11],["infixr 2 ||",11],["infixr 3 &&",11],["infixr 9 >>>",11],["infixr 6 :",13],["infixr 5 ++",11],["infixr 5 <>",11]],"useCount":90},{"word":"info","context":[["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],["CC.EvalCard info output next → do",40]],"useCount":62},{"word":"inherit","context":[["inherit = fromString \"inherit\"",26],["inherit = fromString \"inherit\"",26]],"useCount":52},{"word":"init","context":[[", init",26],["init :: State",19],["init =",12],[", mirror: map _.cardId <$> modelCards.init",12]],"useCount":69},{"word":"initialAxes","context":[["import SlamData.Workspace.Card.BuildChart.Axis (Axes, initialAxes)",31],["{ axes: initialAxes",31]],"useCount":62},{"word":"initialModel","context":[["initialModel = Nothing",32],["initialModel ∷ Model",38]],"useCount":70},{"word":"initialState","context":[[", initialState: initialState",28],[", initialState: H.parentState DPC.initialState",24],[", initialState: H.parentState DPC.initialState",24],[", initialState: H.parentState ST.initialState",22],[", initialState: H.parentState ST.initialState",22],[", initialState: initialState",28],["initialState ∷ State",110],[", initialState",76],["initialState =",168],["initialState :: State",120]],"useCount":687},{"word":"initializer","context":[[", initializer: Just (H.action Init)",31]],"useCount":31},{"word":"inj","context":[[", E.onClick (E.input_ $ inj $ WithState (_dialog .~ Nothing))",20],["import Data.Inject1 (inj)",52]],"useCount":72},{"word":"input","context":[["case input of",20],[", HH.input",66],["[ HH.input",48],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],["leftClick input",20],["$ \"input\" `XPath.withLabelWithExactText` labelText",16],["[ H.input [ A.classes [B.formControl]",15],["[ R.input",14],["-- | A basic text input field that uses a lens to read from and update the",14],["<$> obj .? \"input\"",13]],"useCount":294},{"word":"inputType","context":[["[ HP.inputType HP.InputText",11],["[ HP.inputType HP.InputCheckbox",22],["[ HP.inputType inputType",12],["[ HP.inputType inputType",12]],"useCount":57},{"word":"input_","context":[[", HE.onClick (HE.input_ Dismiss)",48],[", E.onClick (E.input_ $ inj $ WithState (_dialog .~ Nothing))",20]],"useCount":68},{"word":"insert","context":[["insert = insertBy compare",11],[", insert",38],["Just v -> insert k v m",12]],"useCount":61},{"word":"insertDisplayMarkdownCardInLastDeck","context":[["Interact.insertDisplayMarkdownCardInLastDeck",28]],"useCount":28},{"word":"insertMdCardInLastDeck","context":[["Interact.insertMdCardInLastDeck",35]],"useCount":35},{"word":"instance","context":[["instance stringIsValue :: IsValue String where",12],["--  | The `Functor` instance allows functions to transform the contents of a",16],["-- | The `Functor` instance allows functions to transform the contents of a",19],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20],["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12],["instance applicativeMaybe :: Applicative Maybe where",12],["-- | instance functorF :: Functor F where",11]],"useCount":102},{"word":"instead","context":[["-- | instead of only the final result.",20],["-- | `Data.Sequence` instead, which might give better performance for certain",11]],"useCount":31},{"word":"intercalate","context":[["import Data.Foldable (intercalate)",38]],"useCount":38},{"word":"is","context":[["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12],["-- | Running time: `O(n)` where `n` is the length of the array",15],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20],["~> \"value\" := map encodeInline is",20],["-- | returning `Nothing` if the index is out of bounds.",18],["-- | Note, the running time of this function is `O(n)`.",12],["--  | - `a` is a commutative monoid under addition",12],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["--  | - `a` is a monoid under multiplication",12],["-- | list or `Nothing` if the index is out-of-bounds.",12]],"useCount":163},{"word":"isDirectory","context":[[", isDirectory",14],["isDirectory _ = false",14]],"useCount":28},{"word":"isJust","context":[["import Data.Maybe (Maybe(..), maybe, isJust)",19],["import Data.Maybe (Maybe(..), isJust)",13]],"useCount":32},{"word":"isNaN","context":[["unless (isNaN fl) do",19],["import Global (readFloat, isNaN)",24]],"useCount":43},{"word":"isNothing","context":[["isNothing ← arbitrary",30],["if isNothing",30]],"useCount":60},{"word":"isNull","context":[["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["| isNull js = pure Nothing",35]],"useCount":61},{"word":"joinWith","context":[["import Data.String (joinWith)",86],["joinWith \" OR \" $",18],["Interact.provideMdInLastMdCard $ joinWith \"\\n\\n\"",15]],"useCount":119},{"word":"js","context":[["getValuesFromJson = getValues js",21],["getMaybeStringFromJson = getMaybeString js",21],["dataMapFoldFn acc js =",25],["-- | Used by hot-reloading code in support/index.js",13],["| isNull js = pure Nothing",35],["decode js",33],["obj ← decodeJson js",34]],"useCount":182},{"word":"json","context":[["r <- readProp \"contents\" json",68],["obj <- decodeJson json",175],["decodeJson json = do",227],["tag <- readProp \"tag\" json",20],["o <- note \"Expected object\" $ toObject json",13],["obj ← decodeJson json",17],["fromResponse json =",16],["read json =",16],["read json = do",12]],"useCount":564},{"word":"jsonEmptyObject","context":[["jsonEmptyObject",27],["import Data.Argonaut.Core (jsonEmptyObject)",30],["~> jsonEmptyObject",529],["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["~> J.jsonEmptyObject",24],["import Data.Argonaut (Json, (:=), (~>), (.?), decodeJson, jsonEmptyObject)",17]],"useCount":653},{"word":"jsonNull","context":[["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["encode Nothing = jsonNull",35]],"useCount":61},{"word":"jtypExp","context":[["J.append jExpand jtypExp",14],["pure jtypExp",15]],"useCount":29},{"word":"k","context":[["∷ ∀ m k v",14],["alter f k m = case f (k `lookup` m) of",12],["CC.Save k → do",32],["CC.Save k →",31],["k <- arbitrary",15],[". (Affable SlamDataEffects m, Ord k)",14],["case comp k k1 of",12],["update f k m = alter (maybe Nothing f) k m",12],["Nothing -> delete k m",12],["alter f k m = case f (k `lookup` m) of",12]],"useCount":226},{"word":"k1","context":[["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12],["case comp k k1 of",12],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18]],"useCount":72},{"word":"k2","context":[["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12]],"useCount":60},{"word":"key","context":[["import CSS.Stylesheet (CSS, key)",14],["{ key: key",17],["-- | Create a map with one key/value pair",12],["background = key $ fromString \"background\"",18],["(:=) (AttributeKey key) value = Attribute",12],["-- | Calculate the number of key/value pairs in a map",12],["{ key: key",17],["{ key          :: String",20]],"useCount":122},{"word":"keys","context":[[", keys",17],["-- | to combine values for duplicate keys.",16]],"useCount":33},{"word":"l","context":[["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31],["updatePicker l q = case _ of",22],["updateSelect l = case _ of",21],["\\    return function (l) {\\",12]],"useCount":86},{"word":"label","context":[["[ HH.label [ HP.classes [ B.controlLabel ] ] [ HH.text \"Measure\" ]",15],["[ HH.label",15],[", label: DPC.labelNode show",22],[", ARIA.label label",14],[", ARIA.label label",14]],"useCount":80},{"word":"label_","context":[["[ HH.label_",28]],"useCount":28},{"word":"labels","context":[["labels ← traceError \"labels\" $ obj .? \"labels\" >>= decodeExpr decodeJson",12],["~> \"labels\" := encodeExpr encodeJson xs",12],["labels ← traceError \"labels\" $ obj .? \"labels\" >>= decodeExpr decodeJson",12],["labels ← traceError \"labels\" $ obj .? \"labels\" >>= decodeExpr decodeJson",12]],"useCount":48},{"word":"left","context":[["∘ left",20],["-- | Fold a data structure from the left, keeping all intermediate results",12],["$ left",31]],"useCount":63},{"word":"legend","context":[[", legend = Just $ mkLegend series",17],["E.legend do",19]],"useCount":36},{"word":"length","context":[[", length",24],["import Data.Array (length)",16],["-- | Running time: `O(n)` where `n` is the length of the array",15]],"useCount":55},{"word":"lens","context":[["_value = lens _.value _{ value = _ }",24],["import Data.Lens (Lens', lens)",37],["import Data.Lens (LensP, lens)",59],["_valueAgg = lens _.valueAgg _{ valueAgg = _ }",22],["_levelOfDetails = lens (_.levelOfDetails) (_{levelOfDetails = _})",19],["-- | A basic text input field that uses a lens to read from and update the",14],["_series = lens _.series _{ series = _ }",13],["import Data.Lens (LensP(), lens)",12],["_path = lens _.path _{path = _}",12],["_version = lens _.version _{version = _}",11]],"useCount":245},{"word":"let","context":[["let reqQuery =",23],["let spReq = HttpRequest",23],["let affReq = defaultRequest",23],["let str = printJson (encodeJson s) :: String",26],["let reqHeaders =",46],["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46],["let baseURL = spParams_.baseURL",46],["let",1026],["let authorization = spParams_.authorization",36]],"useCount":1435},{"word":"levelOfDetails","context":[[", levelOfDetails: High",47],[", levelOfDetails ∷ LevelOfDetails",47],["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],["_levelOfDetails = lens (_.levelOfDetails) (_{levelOfDetails = _})",19],["_levelOfDetails = lens (_.levelOfDetails) (_{levelOfDetails = _})",19],["_{levelOfDetails =",12],["_levelOfDetails ∷ ∀ a r. LensP {levelOfDetails ∷ a|r} a",11]],"useCount":184},{"word":"li","context":[[", R.li'",26]],"useCount":26},{"word":"li_","context":[["H.li_",11],["HH.li_",20]],"useCount":31},{"word":"library","context":[["-- | defined in this library.",28],["--  | defined in this library.",21]],"useCount":49},{"word":"lift","context":[["liftEff = lift <<< liftEff",42],["ask = lift ask",27],["throwError e = lift (throwError e)",26],["liftAff = lift <<< liftAff",33],["import Control.Monad.Trans (class MonadTrans, lift)",12],["# lift",17],["import Control.Monad.Trans (lift)",32],["state f = lift (state f)",26],["writer wd = lift (writer wd)",20],["import Control.Monad.Trans.Class (lift)",19]],"useCount":254},{"word":"lift2","context":[["import Control.Apply (lift2)",26]],"useCount":26},{"word":"liftAff","context":[["import Data.Functor.Aff (liftAff)",18],["liftAff = lift <<< liftAff",33],["liftAff = lift <<< liftAff",33],["import Control.Monad.Aff.Class (liftAff)",42]],"useCount":126},{"word":"liftEff","context":[["liftEff",19],["cwd <- liftEff Process.cwd",20],["import Control.Monad.Eff.Class (class MonadEff, liftEff)",32],["import Data.Functor.Eff (liftEff)",31],["liftEff = lift <<< liftEff",42],["liftEff $ do",15],["import Control.Monad.Eff.Class (liftEff)",275],["liftEff = lift <<< liftEff",42],["liftEff do",18]],"useCount":494},{"word":"liftH","context":[["Wiring wiringR ← H.liftH $ H.liftH $ ask",12],["Wiring wiringR ← H.liftH $ H.liftH $ ask",12],["Wiring wiring ← H.liftH $ H.liftH ask",43],["Wiring wiring ← H.liftH $ H.liftH ask",43]],"useCount":110},{"word":"listener","context":[["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25],["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25]],"useCount":150},{"word":"lmap","context":[["import Data.Bifunctor (lmap)",43],["runQuasarF $ lmap lowerQError <$>",21]],"useCount":64},{"word":"loading","context":[["⊕ if state.loading then [ B.hidden ] else [ ]",12],["$ [ B.alert, B.alertInfo, HH.className \"share-loading\" ]",12],["⊕ if state.loading then [ ] else [ B.hidden ]",12],["⊕ (if state.loading then [ B.hidden ] else [ ])",12],[", loading ∷ Boolean",18],[", loading: true",19]],"useCount":85},{"word":"log","context":[["main = Control.Monad.Eff.Console.log \"Done\"",71],["import Control.Monad.Eff.Console (CONSOLE, log)",79],["import Control.Monad.Aff.Console (log)",25],["import Control.Monad.Eff.Console (log, CONSOLE)",23],["import Control.Monad.Eff.Console (CONSOLE(), log)",19],["Control.Monad.Eff.Console.log \"Done\"",12],["import Control.Monad.Eff.Console (CONSOLE, log, logShow)",12],["log \"\"",27],["import Control.Monad.Eff.Console (log)",61]],"useCount":329},{"word":"logShow","context":[["import Control.Monad.Eff.Console (CONSOLE, logShow)",20],["import Control.Monad.Eff.Console (CONSOLE, log, logShow)",12]],"useCount":32},{"word":"lowerQError","context":[["import Quasar.Error (lowerQError)",11],["runQuasarF $ lmap lowerQError <$>",21]],"useCount":32},{"word":"lvl","context":[[", lvl: fromNumber 0 }",11],[", lvl:  0 }",22]],"useCount":33},{"word":"m","context":[["∷ ∀ m",192],["∷ ∀ eff m",89],["→ m Unit",54],[". (Monad m, QuasarDSL m)",54],[". (Monad m, QuasarDSL m)",54],[". (Monad m, Affable (QEff eff) m)",43],[". (Monad m, Affable (QEff eff) m)",43],["→ CET.CardEvalT m Port.Port",40],["a <- m",38],[". QuasarDSL m",28]],"useCount":1214},{"word":"main","context":[["main :: forall e. Eff (console :: CONSOLE | e) Unit",15],["main = do",538],["main = Control.Monad.Eff.Console.log \"Done\"",71],["main = runAff throwException (const (pure unit)) $ do",20],["main = runTest do",18],["main :: Eff (console :: CONSOLE) Unit",26],["main = Debug.Trace.trace \"Done\"",54],["main :: Eff (HalogenEffects ()) Unit",14],["main = run [consoleReporter] do",16],["main :: forall eff. Eff (console :: CONSOLE | eff) Unit",17]],"useCount":851},{"word":"mainpageSection","context":[["mainpageSection state =",16],["mainpageSection :: State -> ReactElement",16]],"useCount":32},{"word":"make","context":[["-- Generated by psc-make version 0.6.9.5",127],["-- Generated by psc-make version 0.6.9.3",54]],"useCount":181},{"word":"map","context":[["import Data.Array (map)",35],["$ map fromHexString",25],["value ← map runArbJCursor arbitrary",24],["else map Just do",24],["| otherwise = map Just do",24],["~> \"value\" := map encodeInline is",20],["parallel ← map (map runArbJCursor) arbitrary",12],["series ← map (map runArbJCursor) arbitrary",12],["series ← map (map runArbJCursor) arbitrary",12],["import Data.Functor (class Functor, map, void, ($>), (<#>), (<$), (<$>))",16]],"useCount":286},{"word":"mapMaybe","context":[[", mapMaybe",21],["catMaybes = mapMaybe id",17]],"useCount":38},{"word":"maxSize","context":[[", maxSize ∷ Number",16],[", maxSize",18]],"useCount":34},{"word":"maybe","context":[["import Data.Maybe (Maybe(..), maybe, fromMaybe)",33],["import Data.Maybe (Maybe(..), maybe)",115],["maybe",45],["import Data.Maybe (maybe)",37],["import Data.Maybe (Maybe(..), fromMaybe, maybe)",26],["import Data.Maybe (Maybe(..), maybe, isJust)",19],["import Data.Maybe (Maybe(), maybe)",14],["update f k m = alter (maybe Nothing f) k m",12]],"useCount":301},{"word":"mconcat","context":[["mconcat",13],["import Data.Foldable (mconcat)",15]],"useCount":28},{"word":"mempty","context":[["import Data.Monoid (Monoid, mempty)",29],["mempty = empty",18],["import Data.Monoid (class Monoid, mempty)",54],["import Data.Monoid (mempty)",67],["mempty = pure mempty",15],["mempty = pure mempty",15]],"useCount":198},{"word":"message","context":[["import Control.Monad.Eff.Exception (message)",27],["message =",12]],"useCount":39},{"word":"minSize","context":[[", minSize ∷ Number",16],[", minSize",18]],"useCount":34},{"word":"mkLegend","context":[["mkLegend ss =",12],[", legend = Just $ mkLegend series",17]],"useCount":29},{"word":"modalBody","context":[["import SlamData.Dialog.Render (modalDialog, modalHeader, modalBody, modalFooter)",27],[", modalBody",21]],"useCount":48},{"word":"modalDialog","context":[["modalDialog",27],["import SlamData.Dialog.Render (modalDialog, modalHeader, modalBody, modalFooter)",27]],"useCount":54},{"word":"modalFooter","context":[["import SlamData.Dialog.Render (modalDialog, modalHeader, modalBody, modalFooter)",27],[", modalFooter",26]],"useCount":53},{"word":"modalHeader","context":[["import SlamData.Dialog.Render (modalDialog, modalHeader, modalBody, modalFooter)",27]],"useCount":27},{"word":"modelCards","context":[[", mirror: map _.cardId <$> modelCards.init",12],[", cards: snd <$> modelCards.rest",12],[", modelCards ∷ Array (DeckId × Card.Model)",14],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12],[", modelCards",12]],"useCount":62},{"word":"modifierKey","context":[["selectAll modifierKey",14],["modifierKey <- getModifierKey",19]],"useCount":33},{"word":"modify","context":[["H.modify",150],["H.modify _",84],["H.modify _{submitting = false}",12],["H.modify (DCS._displayMode .~ DCS.Backside)",12],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["H.modify _{axes = axes}",21],["H.modify (DCS._displayMode .~ DCS.Dialog)",29],["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31],["H.modify _ { picker = Nothing }",34],["H.modify validate",35]],"useCount":451},{"word":"module","context":[["module Data.AddressBook where",11],[", module Control.Bind",13],["module Utils where",14],["module M1 where",14],[", module Control.Apply",17],[", module Data.Lens.Types",18],[", module Data.Functor",23],[", module Control.Monad.Trans",24],["module Test.Main where",245],["module Main where",615]],"useCount":1038},{"word":"monad","context":[["-- | to the `Identity` monad.",34]],"useCount":34},{"word":"mount","context":[["Interact.selectFileForLastOpenCard \"/test-mount/testDb/zips\"",16],["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":46},{"word":"msg","context":[["Left msg →",23],["in Result (Left msg) (drop 1 str)",14],["in Result (Left msg) str",17],["case msg of",15]],"useCount":69},{"word":"multiplication","context":[["--  | - multiplication by `zero` annihilates `a`",12],["--  | - multiplication distributes over addition",12],["--  | - `a` is a monoid under multiplication",12]],"useCount":36},{"word":"n","context":[["-- | Running time: `O(n)` where `n` is the length of the array",15],["Interact.provideMdInLastMdCard $ joinWith \"\\n\\n\"",15],["-- | Running time: `O(n)` where `n` is the length of the array",15],["Interact.provideMdInLastMdCard $ joinWith \"\\n\\n\"",15],["-- |   print n",19],["\\  }; \\n\\",20],["\\    end\\n\\",28],["\"\\n\" <>",33],["-- | Running time: `O(n^2)`",34],["-- | Running time: `O(n)`",83]],"useCount":387},{"word":"n2","context":[["\\  return function(n2) {\\",39]],"useCount":39},{"word":"name","context":[["[{ name",25],[", name :: String",33],["name :: String,",23],["{ name :: String",35],[", name: st.name",18],["case name of",23],["{ name         :: String",20],[", name ∷ String",19],["{ name ∷ Maybe String",24],[", name",24]],"useCount":429},{"word":"net","context":[["-- Maintainer  :  Phil Freeman <paf31@cantab.net>",27]],"useCount":27},{"word":"new","context":[["-- | creating a new array.",17],["-- | specified predicate, creating a new array.",12],["s <- SM.new",18]],"useCount":47},{"word":"newSelect","context":[["$ newSelect",77]],"useCount":77},{"word":"newValueAggregation","context":[["newValueAggregation =",14],[", valueAgg = newValueAggregation",14]],"useCount":28},{"word":"newtype","context":[["newtype ArbModel = ArbModel M.Model",13],["newtype AttributeKey a = AttributeKey String",13],["newtype Element = Element",20],["newtype Attribute = Attribute",20]],"useCount":66},{"word":"next","context":[["CC.Activate next →",62],["CC.SetDimensions dims next → do",41],["CC.EvalCard info output next → do",40],["eval (Dismiss next) = pure next",36],["eval (Dismiss next) = pure next",36],["CC.Load card next → do",22],["CC.Deactivate next →",44],["CC.ModelUpdated _ next →",62],["CC.ZoomIn next →",63],["pure next",1295]],"useCount":1774},{"word":"node","context":[["appendToBody node",15],["appendToBody app.node",19]],"useCount":34},{"word":"nonMaybeAggregationSelect","context":[["import SlamData.Workspace.Card.BuildChart.Aggregation (nonMaybeAggregationSelect)",18],["$ nonMaybeAggregationSelect",23]],"useCount":41},{"word":"nonSubmit","context":[["[ Cp.nonSubmit",11],[", Cp.nonSubmit",124],["[ CP.nonSubmit",17]],"useCount":152},{"word":"not","context":[["(/=) x y = not (x == y)",33],["<?> \"was not empty\")",12],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12],["-- Should not compile:",12],["(/=) a b = not $ a == b",22],["(/=) a b = not (a == b)",24]],"useCount":115},{"word":"nubBy","context":[[", nubBy",15],["L.nubBy (\\a b → Pathy.printPath a ≡ Pathy.printPath b)",12]],"useCount":27},{"word":"null","context":[["import Data.Array (null)",11],[", null",25]],"useCount":36},{"word":"o","context":[["∷ ∀ eff o",91],["decodeJson o = do",16],["[ o { aliases:    OptionAlias.Short 'f' :| OptionAlias.Long \"foo\" : Nil",11],["o <- note \"Expected object\" $ toObject json",13],["→ Feature eff o Unit",67],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46],["obj <- decodeJson o",16],["parseJSON (JObject o) = do",22],["→ Feature eff o (Array Element)",22],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46]],"useCount":350},{"word":"obj","context":[["obj <- decodeJson json",175],["tag <- obj .? \"tag\"",72],["decodeJson >=> \\obj → do",48],["value ← obj .? \"value\"",34],["r <- obj .? \"contents\"",34],["obj ← decodeJson js",34],["ty ← obj .? \"type\"",30],["valueAggregation ← obj .? \"valueAggregation\"",24],["obj ← decodeJson json",17],["configType ← obj .? \"configType\"",32]],"useCount":581},{"word":"of","context":[["case e of",48],["encodeJson v = case v of",55],["case res of",56],["case result of",74],["case ty of",79],["case tag of",99],["case _ of",129],["case r of",139],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46],["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46]],"useCount":1851},{"word":"olympics","context":[[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"on","context":[["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["import Data.Function (on)",88]],"useCount":138},{"word":"onClick","context":[[", HE.onClick (HE.input_ Dismiss)",48],[", E.onClick (E.input_ $ inj $ WithState (_dialog .~ Nothing))",20],["import Pux.Html.Events (onClick)",17]],"useCount":85},{"word":"options","context":[["showPicker f options =",30],["_ { picker = Just { options, select: f (Const unit) } }",28],[", values: groupJCursors (List.fromFoldable options)",21],["Just { options, select } →",21],["options:",20]],"useCount":120},{"word":"opts","context":[["saveDeck opts Nothing",12],["buildPath <- getOption' \"buildPath\" opts",14],["setModel opts",18],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["let opts = Map.union args.globalOpts args.commandOpts",22]],"useCount":106},{"word":"other","context":[["other -> other",24],["other -> other",24]],"useCount":48},{"word":"otherwise","context":[["| otherwise =",68],["| otherwise = map Just do",24],["| otherwise = do",16],["| otherwise = Nothing",42]],"useCount":150},{"word":"out","context":[["-- | list or `Nothing` if the index is out-of-bounds.",12],["out <- getOutputter args",43],["-- | returning `Nothing` if the index is out of bounds.",18]],"useCount":73},{"word":"output","context":[["CC.EvalCard info output next → do",40]],"useCount":40},{"word":"p","context":[["Tuple pp dirOrFile <- peel p",12],["case p of",28],["Tuple pp dirOrFile ← P.peel p",25],["x <- p",11],["p attribs content = element \"p\" attribs (Just content)",15],["p attribs content = element \"p\" attribs (Just content)",15],[", p",18],["a <- p",38]],"useCount":162},{"word":"p_","context":[[", H.p_",12],[", HH.p_",21]],"useCount":33},{"word":"paf31","context":[["-- Maintainer  :  Phil Freeman <paf31@cantab.net>",27]],"useCount":27},{"word":"parallel","context":[[", parallel ∷ Maybe JCursor",12],["~> \"parallel\" := r.parallel",12],["~> \"parallel\" := r.parallel",12],[", r1.parallel ≡ r2.parallel",12],[", r1.parallel ≡ r2.parallel",12],["parallel ← obj .? \"parallel\"",11],[", parallel: emptySelect",12],[", parallel",23],["parallel ← map (map runArbJCursor) arbitrary",12],[", parallel ∷ Select JCursor",12]],"useCount":174},{"word":"params","context":[["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46]],"useCount":46},{"word":"parent","context":[[", parent",15],["{ parent: st.parent",16],["{ parent: st.parent",16],[", parent ∷ Maybe (DeckId × CardId)",14]],"useCount":61},{"word":"parentState","context":[[", initialState: H.parentState initialState",20],[", initialState: H.parentState DPC.initialState",24],[", initialState: H.parentState ST.initialState",22]],"useCount":66},{"word":"parse","context":[["<> \" when trying to parse the string \"",27]],"useCount":27},{"word":"pass","context":[[", pass Nothing",13],[", pass",25],["[ pass",21]],"useCount":59},{"word":"path","context":[["_path = lens _.path _{path = _}",12],["path ← H.gets _.path",21],["_path = lens _.path _{path = _}",12],[", path: rootDir",11],[", path: \"\"",12],["path ← H.gets _.path",21],["{ path",14],[", path :: String",15]],"useCount":118},{"word":"peek","context":[[", peek: Just (peek ∘ H.runChildF)",16],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24],["peek ∷ ∀ a. CS.ChildQuery a → DSL Unit",22],[", peek: Just (peek ∘ H.runChildF)",16],["peek = coproduct peekPicker (const (pure unit))",14],["peek =",13],["peek",12]],"useCount":141},{"word":"peekPicker","context":[["peek = coproduct peekPicker (const (pure unit))",14],["peekPicker = case _ of",18]],"useCount":32},{"word":"peel","context":[["Tuple pp dirOrFile <- peel p",12],["Tuple pp dirOrFile ← P.peel p",25]],"useCount":37},{"word":"picker","context":[["H.modify _ { picker = Nothing }",34],["renderPicker state = case state.picker of",22],["for_ st.picker \\{ select } → case select of",14],[", picker ∷ Maybe (PickerOptions JCursor Selection)",30],[", picker: Nothing",30],["_ { picker = Just { options, select: f (Const unit) } }",28],["{ component: DPC.picker",24]],"useCount":182},{"word":"pickerInput","context":[[", BCI.pickerInput",47]],"useCount":47},{"word":"pickerWithSelect","context":[[", BCI.pickerWithSelect",30]],"useCount":30},{"word":"pp","context":[["Tuple pp dirOrFile <- peel p",12],["Tuple pp dirOrFile ← P.peel p",25]],"useCount":37},{"word":"print","context":[["-- |   print (n * n)",13],["-- |   print n",19]],"useCount":32},{"word":"printJson","context":[["import Data.Argonaut.Printer (printJson)",18],["let str = printJson (encodeJson s) :: String",26]],"useCount":44},{"word":"printPath","context":[["import Data.Path.Pathy (printPath)",19],["L.nubBy (\\a b → Pathy.printPath a ≡ Pathy.printPath b)",12],["L.nubBy (\\a b → Pathy.printPath a ≡ Pathy.printPath b)",12]],"useCount":43},{"word":"prop","context":[[", prop",16],["import Data.Foreign.Index (prop)",12]],"useCount":28},{"word":"props","context":[["(Event -> EventHandlerContext eff props state result) -> Props",24],["ReactThis props state ->",16],["spec :: forall eff state props action. T.Spec eff state props action",13],["spec :: forall eff state props action. T.Spec eff state props action",13]],"useCount":66},{"word":"provided","context":[["-- | provided XPath.",20],["-- | Default implementations are provided by the following functions:",16],["-- | This function is provided for internal use.",12]],"useCount":48},{"word":"ps","context":[["state <- get :: Component (Props ps) State State",14],["case ps of",14]],"useCount":28},{"word":"ps_","context":[["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46],["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46]],"useCount":92},{"word":"psc","context":[["-- Generated by psc-make version 0.6.9.5",127],["-- Generated by psc-make version 0.6.9.3",54]],"useCount":181},{"word":"pure","context":[["pure",114],["_ → pure unit",129],["pure unit",225],["pure next",1295],["_ -> pure unit",65],["else pure unit",52],["Nothing -> pure unit",50],["then pure unit",49],["then pure Nothing",44],["eval (Dismiss next) = pure next",36]],"useCount":2553},{"word":"purescript","context":[["--  | ```purescript",96],["--  | ``` purescript",134],["-- | ``` purescript",357],["-- | ```purescript",387]],"useCount":974},{"word":"q","context":[["updatePicker l q = case _ of",22],["selecting f q a = right (Q.Select (f q) a)",14],["selecting f q a = right (Q.Select (f q) a)",14],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["case q of",38]],"useCount":108},{"word":"qualified","context":[["import qualified Halogen.HTML.Events.Handler as E",63],["import qualified Halogen.HTML.Events.Forms as E",40],["import qualified Data.Array as A",58],["import qualified Data.String as S",64],["import qualified Halogen.HTML.Events.Monad as E",65],["import qualified Halogen.Themes.Bootstrap3 as B",91],["import qualified Data.Map as M",91],["import qualified Halogen.HTML.Events as E",91],["import qualified Halogen.HTML.Attributes as A",124],["import qualified Halogen.HTML as H",142]],"useCount":1534},{"word":"quickCheck","context":[["import Test.Helper (Suite, bind, quickCheck, suite, test, (===))",26],["quickCheck \\ (x :: Int) y ->",20],["import Test.StrongCheck (QC, Result(..), class Arbitrary, arbitrary, quickCheck, (<?>))",15],["quickCheck \\ (x :: Boolean) y ->",13],["quickCheck $ \\(TestMap m1) (TestMap m2) k ->",12],["import Test.StrongCheck (QC(), Result(..), Arbitrary, arbitrary, quickCheck, (<?>))",12],["quickCheck \\ x ->",12],["quickCheck \\ (x :: Array Int) ->",11]],"useCount":121},{"word":"r","context":[["case r of",139],["-> r",21],["∷ ∀ r",21],["getValuesFromJson $ pure r.value",21],["~> \"valueAggregation\" := r.valueAggregation",22],["~> \"value\" := r.value",24],["encode (Just r) =",30],["r <- obj .? \"contents\"",34],["r <- readProp \"contents\" json",68],["| r",37]],"useCount":674},{"word":"r1","context":[[", r1.valueAggregation ≡ r2.valueAggregation",22],[", r1.value ≡ r2.value",22],[", r1.series ≡ r2.series",13],[", r1.parallel ≡ r2.parallel",12]],"useCount":69},{"word":"r2","context":[[", r1.series ≡ r2.series",13],[", r1.value ≡ r2.value",22],[", r1.valueAggregation ≡ r2.valueAggregation",22],[", r1.parallel ≡ r2.parallel",12]],"useCount":69},{"word":"raiseGlobalError","context":[["GE.raiseGlobalError ge",28]],"useCount":28},{"word":"raiseUpdate","context":[["raiseUpdate = synchronizeChildren *> CC.raiseUpdatedP' CC.EvalModelUpdate",21],["raiseUpdate ∷ DSL Unit",22],["raiseUpdate",27],["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31]],"useCount":101},{"word":"raiseUpdatedP","context":[["raiseUpdate = synchronizeChildren *> CC.raiseUpdatedP' CC.EvalModelUpdate",21],["CC.raiseUpdatedP' CC.EvalModelUpdate",73]],"useCount":94},{"word":"range","context":[["range = unsafeRange",21],["-- | An infix synonym for `range`.",11]],"useCount":32},{"word":"read","context":[["read json = do",12],["read value = do",38],["read f = do",22],[", read",17],["read json =",16],["-- | A basic text input field that uses a lens to read from and update the",14],["read = readGeneric defaultOptions",14],["import Data.Foreign.Class (read)",11]],"useCount":144},{"word":"readFloat","context":[["import Global (readFloat, isNaN)",24],["let fl = readFloat str",19]],"useCount":43},{"word":"readProp","context":[["tag <- readProp \"tag\" json",20],["import Data.Foreign.Class (readProp)",23],["r <- readProp \"contents\" json",68]],"useCount":111},{"word":"records","context":[["foldl dataMapFoldFn M.empty records",25],["records ← BCE.records resource",29],["records ← BCE.records resource",29]],"useCount":83},{"word":"refEq","context":[["eq = refEq",30],["(==) = refEq",13]],"useCount":43},{"word":"regex","context":[["RX.regex",20],["R.regex",14]],"useCount":34},{"word":"removeEventListener","context":[["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25],["removeEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.removeEventListener(type, listener);\"",25]],"useCount":50},{"word":"render","context":[["render",46],["render ∷ ST.State → HTML",22],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24],["render st =",28],["render :: State -> ComponentHTML Query",28],[", render",40],["comp = H.component { render, eval }",42],["{ render",48],["render ∷ State → HTML",54],["render state =",155]],"useCount":670},{"word":"renderContent","context":[["renderContent (Just content) =",12],["renderContent Nothing = \" />\"",12],["renderContent e.content",20]],"useCount":44},{"word":"renderHighLOD","context":[["[ renderHighLOD state",33],["renderHighLOD state =",32],["renderHighLOD ∷ ST.State → HTML",22]],"useCount":87},{"word":"renderLowLOD","context":[["import SlamData.Workspace.Card.Common.Render (renderLowLOD)",36]],"useCount":36},{"word":"renderPicker","context":[["renderPicker state = case state.picker of",22],[", renderPicker state",22],["renderPicker ∷ ST.State → HTML",22]],"useCount":66},{"word":"renderToDOM","context":[["renderToDOM \"#app\" app.html",29]],"useCount":29},{"word":"renderValue","context":[[", renderValue state",14],["renderValue ∷ ST.State → HTML",17],["renderValue state =",17]],"useCount":48},{"word":"repeatable","context":[[", repeatable: false",30],[", repeatable",11]],"useCount":41},{"word":"replace","context":[[", replace",28]],"useCount":28},{"word":"reqHeaders","context":[[", httpHeaders: reqHeaders",23],[", headers = defaultRequest.headers <> reqHeaders",23],["let reqHeaders =",46]],"useCount":92},{"word":"reqQuery","context":[["let reqQuery =",23],[", httpQuery: reqQuery",23]],"useCount":46},{"word":"res","context":[["Right res' -> cb res'",12],["pure res",11],["Right res' -> cb res'",12],["res",14],["assertEq ok200 res.status",15],["case res of",56]],"useCount":120},{"word":"resource","context":[["records ← BCE.records resource",29],["eval (Just conf) resource = do",19]],"useCount":48},{"word":"rest","context":[["return rest",46],[", cards: snd <$> modelCards.rest",12]],"useCount":58},{"word":"result","context":[["pure result",14],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["if succeeded result.status",15],["-- | instead of only the final result.",20],["\\    return result;\\",12],["(Event -> EventHandlerContext eff props state result) -> Props",24],["result",15],["case result of",74]],"useCount":192},{"word":"results","context":[["-- | Fold a data structure from the right, keeping all intermediate results",12],["--  |   and accumulates the results.",16],["-- | Fold a data structure from the left, keeping all intermediate results",12],["-- |   and accumulates the results.",12]],"useCount":52},{"word":"return","context":[["\\  return function() {\\",67],["return {};",45],["return function(){",41],["\\  return function(n2) {\\",39],["return rest",46],["\\    return function() {\\",72],["\\   return function(){ \\",85],["return function() {",124],["return function () {",131],["return unit",199]],"useCount":1430},{"word":"right","context":[["right",25],["-- | Fold a data structure from the right, keeping all intermediate results",12],["∘ right",39],["selecting f q a = right (Q.Select (f q) a)",14],["$ right",23]],"useCount":113},{"word":"rootDir","context":[["import Data.Path.Pathy (rootDir)",15],[", path: rootDir",11]],"useCount":26},{"word":"row","context":[[", row",12],["import SlamData.Render.Common (row)",20]],"useCount":32},{"word":"runAff","context":[["main = runAff throwException (const (pure unit)) $ do",20],["import Control.Monad.Aff (Aff(), runAff)",12],["import Control.Monad.Aff (runAff)",20]],"useCount":52},{"word":"runArbJCursor","context":[["import Test.Property.ArbJson (runArbJCursor)",18],["series ← map (map runArbJCursor) arbitrary",12],["parallel ← map (map runArbJCursor) arbitrary",12],["value ← map runArbJCursor arbitrary",24],["import Test.StrongCheck.Data.Argonaut (runArbJCursor)",18]],"useCount":84},{"word":"runArbModel","context":[["runArbModel (ArbModel m) = m",14],[", runArbModel",19]],"useCount":33},{"word":"runChildF","context":[[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24],[", peek: Just (peek ∘ H.runChildF)",16]],"useCount":40},{"word":"runExcept","context":[["import Control.Monad.Except (runExcept)",43]],"useCount":43},{"word":"runFn2","context":[["import Data.Function.Uncurried (Fn2, runFn2)",17],["import Data.Function (Fn2(), runFn2)",12]],"useCount":29},{"word":"runPure","context":[["assert $ runPure (runST (do",12],["assert $ runPure (runSTArray (do",18]],"useCount":30},{"word":"runQuasarF","context":[["runQuasarF $ lmap lowerQError <$>",21],["import SlamData.Quasar.Aff (QEff, runQuasarF)",12]],"useCount":33},{"word":"runQuery","context":[["Interact.runQuery",26]],"useCount":26},{"word":"runTest","context":[["import Test.Unit.Main (runTest)",19],["main = runTest do",18]],"useCount":37},{"word":"s","context":[["s <- get",13],["s <- SM.new",18],["case s of",21],["then s",13],["_ → pure s",34],["-> s",35],["pure s)",12],["toRequest s =",26],["let str = printJson (encodeJson s) :: String",26],["return function(s) {",32]],"useCount":277},{"word":"sans","context":[["E.textStyle $ E.fontFamily \"Ubuntu, sans\"",17],["E.fontFamily \"Ubuntu, sans\"",52]],"useCount":69},{"word":"scenario","context":[["scenario",27],["import Test.Feature.Scenario (scenario)",30]],"useCount":57},{"word":"sel","context":[[", initialState: sel",12],["case sel of",15]],"useCount":27},{"word":"select","context":[[", HH.select",12],["for_ st.picker \\{ select } → case select of",14],["for_ st.picker \\{ select } → case select of",14],["{ title: case select of",19],["_ { picker = Just { options, select: f (Const unit) } }",28],["Just { options, select } →",21],["import Control.UI.Browser (select)",11],["QE.throw \"Please select axis to aggregate\"",31]],"useCount":150},{"word":"selecting","context":[["selecting f q a = right (Q.Select (f q) a)",14],["selecting ∷ ∀ a. (a → Q.Selection BCI.SelectAction) → a → H.Action Q.QueryC",13]],"useCount":27},{"word":"sequence","context":[["import Data.Traversable (sequence)",36],["sequence = traverse id",27],["import Selenium.ActionSequence hiding (sequence)",20],["sequence do",60],["zipWithA f xs ys = sequence (zipWith f xs ys)",12]],"useCount":155},{"word":"series","context":[["E.series series",19],["E.series series",19],[", legend = Just $ mkLegend series",17],["cc.series A.!! 0 >>= view S._value",20],[", r1.series ≡ r2.series",13],[", series: emptySelect",13],[", series ∷ Select JCursor",13],[", series",29],["series =",26],[", r1.series ≡ r2.series",13]],"useCount":296},{"word":"setFillStyle","context":[["setFillStyle \"#FF0000\" ctx",11],["setFillStyle \"#00FF00\" ctx",11],["setFillStyle \"#0000FF\" ctx",12]],"useCount":34},{"word":"setPreviousValueFrom","context":[["setPreviousValueFrom (Just st.valueAgg)",16],["setPreviousValueFrom (Just st.value)",17]],"useCount":33},{"word":"shortcutLabel","context":[[", shortcutLabel: Nothing",33]],"useCount":33},{"word":"shouldEqual","context":[["1 `shouldEqual` 1",17],["import Test.Spec.Assertions (shouldEqual)",17]],"useCount":34},{"word":"show","context":[["import Data.Show (class Show, show)",22],[", render: DPC.renderNode show",22],["<> show c",29],["<> show (take 20 str)",29],["addKeyboardEventListener typ    = unsafeAddEventListener (show typ)",18],[", label: DPC.labelNode show",22],["addMouseEventListener typ    = unsafeAddEventListener (show typ)",18],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["show = gShow",113]],"useCount":506},{"word":"showDialog","context":[["showDialog $ Dialog.Error",17],["showDialog",18]],"useCount":35},{"word":"showPicker","context":[["showPicker",30],["BCI.Open opts → H.modify (ST.showPicker q opts)",20],["showPicker f options =",30]],"useCount":80},{"word":"singleton","context":[[", singleton",41],["pure = singleton",15],["import Data.Array (singleton)",12]],"useCount":68},{"word":"size","context":[[", size",41]],"useCount":41},{"word":"slot","context":[["HH.slot unit \\_ →",24],["[ HH.slot unit \\_ →",14],["for_ (zipItems ItemSlot items) \\slot ->",12]],"useCount":50},{"word":"snd","context":[[", cards: snd <$> modelCards.rest",12],["import Data.Tuple (fst, snd)",14],["import Data.Tuple (Tuple(..), fst, snd)",58],["import Data.Tuple (Tuple(..), snd)",15]],"useCount":99},{"word":"socket","context":[["socket' = unsafeFromJust state.socket",14],["socket' = unsafeFromJust state.socket",14]],"useCount":28},{"word":"sort","context":[[", sort :: Sort",11],["group' = group <<< sort",11],["sort xs = sortBy compare xs",11],[", sort",13]],"useCount":46},{"word":"spOpts_","context":[["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46],["spOpts_' <- ask",46],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46],["let spOpts_ = case spOpts_' of SPSettings_ o -> o",46],["[{ field : \"Authorization\" , value : encodeHeader spOpts_' authorization",18]],"useCount":202},{"word":"spParams_","context":[["let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_",46],["let authorization = spParams_.authorization",36],["let baseURL = spParams_.baseURL",46]],"useCount":128},{"word":"spReq","context":[["pure spReq",23],["let spReq = HttpRequest",23]],"useCount":46},{"word":"span","context":[[", HH.span",34],["[ span",14],[", span",32],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12]],"useCount":92},{"word":"spec","context":[["spec =",24],["spec :: T.Spec _ State _ Action",14],["spec :: forall eff state props action. T.Spec eff state props action",13]],"useCount":51},{"word":"split","context":[[", split",13],["import Data.String (split)",34]],"useCount":47},{"word":"src","context":[[", src",22],["\\  return function (src) {                \\",17],["src = AttributeKey \"src\"",16],["src = AttributeKey \"src\"",16],["return function (src) {",22],["[ HH.img [ HP.src \"img/blue-spin.svg\" ]",14],["src :: AttributeKey String",12]],"useCount":119},{"word":"st","context":[["$ st.axes.category",46],["{ parent: st.parent",16],["⊕ st.axes.datetime",16],["setPreviousValueFrom (Just st.value)",17],[", name: st.name",18],["⊕ st.axes.date",20],["render st =",28],["$ st.axes.value",31],["⊕ st.axes.time",37],["st ← H.get",254]],"useCount":541},{"word":"state","context":[["[ renderHighLOD state",33],["renderHighLOD state =",32],["render state =",155],["state",30],["state <- get",34],["state ← H.get",77],["view state =",29],["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],[", HP.disabled state.submitting",27],["state f = lift (state f)",26]],"useCount":884},{"word":"status","context":[["if succeeded result.status",15],["assertEq ok200 res.status",15]],"useCount":30},{"word":"str","context":[["case str of",27],["then Result (Right c) (drop 1 str)",26],["in Result (Left msg) (drop 1 str)",14],["in Result (Left msg) str",17],["let fl = readFloat str",19],["let str = printJson (encodeJson s) :: String",26],["in toRequest str",29],["case charAt 0 str of",29],["<> show (take 20 str)",29],["_ -> Result (Left \"Reached end of file\") str",29]],"useCount":257},{"word":"string","context":[["Args.optionDefault \"main\" [\"--main\", \"-m\"] Type.string",12],["<> \" when trying to parse the string \"",27]],"useCount":39},{"word":"structure","context":[["-- | Fold a data structure, accumulating values in some `Monoid`.",11],["-- | from the element type of the final data structure.",12],["-- | Fold a data structure from the left, keeping all intermediate results",12],["-- | Fold a data structure from the right, keeping all intermediate results",12],["-- | for every element in a data structure:",13]],"useCount":60},{"word":"submitting","context":[["H.modify _{submitting = true}",12],["H.modify _{submitting = false}",12],[", HP.disabled state.submitting",27]],"useCount":51},{"word":"support","context":[["-- | Used by hot-reloading code in support/index.js",13],["--  | The `Bits` type class identifies types which support bitwise operations.",18]],"useCount":31},{"word":"synchronizeChildren","context":[["raiseUpdate = synchronizeChildren *> CC.raiseUpdatedP' CC.EvalModelUpdate",21],["synchronizeChildren",22],["synchronizeChildren ∷ DSL Unit",22],["synchronizeChildren = do",15]],"useCount":80},{"word":"t","context":[["id :: forall t. a t t",12],["-> (e -> Eff (dom :: DOM | t) Unit)",40],["t' <- helpTypeToABC t",15],["t' <- helpTypeToABC t",15],["jExpand <- buildExpandDiv t",12],["id :: forall t. a t t",12],["id :: forall t. a t t",12]],"useCount":118},{"word":"ta","context":[["-> (Eff (dom :: DOM | ta) Unit)",40]],"useCount":40},{"word":"tag","context":[["tag <- obj .? \"tag\"",72],["tag <- readProp \"tag\" json",20],["tag <- obj .? \"tag\"",72],["case tag of",99],["tag <- readProp \"tag\" json",20]],"useCount":283},{"word":"tail","context":[[", tail",38]],"useCount":38},{"word":"take","context":[["<> show (take 20 str)",29],[", take",31]],"useCount":60},{"word":"target","context":[["{ target :: Target",11],[", target",18]],"useCount":29},{"word":"tell","context":[["import Control.Monad.Writer.Class (tell)",16],["tell e.name",16],["tell \">\"",16]],"useCount":48},{"word":"test","context":[["test \"List\" do",19],["test \"Int\" do",19],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],["Interact.selectFileForLastOpenCard \"/test-mount/testDb/zips\"",16],[", test",45],["test :: Check Unit",16],["test ∷ SlamFeature Unit",21],["import Test.Helper (Suite, bind, quickCheck, suite, test, (===))",26],["test = do",36],["test \"Array\" do",18]],"useCount":284},{"word":"testDb","context":[["[ \"discipline = __ (!``SELECT discipline FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],["Interact.selectFileForLastOpenCard \"/test-mount/testDb/zips\"",16],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":46},{"word":"tests","context":[["tests :: Suite",40]],"useCount":40},{"word":"text","context":[["[ HH.text \"Dismiss\" ]",16],["[ HH.label [ HP.classes [ B.controlLabel ] ] [ HH.text \"Measure\" ]",15],["[ HH.text",43],[", text",27],["HH.text \"\"",23],[", text :: String",15],["-- | A basic text input field that uses a lens to read from and update the",14],["[ H.text \"Cancel\" ]",13],["Nothing → HH.text \"\"",22],["[ HH.text \"Cancel\" ]",19]],"useCount":232},{"word":"textStyle","context":[["E.textStyle $ E.fontFamily \"Ubuntu, sans\"",17],["E.textStyle do",46]],"useCount":63},{"word":"the","context":[["-- | to the `Identity` monad.",34],["<> \" when trying to parse the string \"",27],["-- | returning `Nothing` if the index is out of bounds.",18],["-- | Running time: `O(n)` where `n` is the length of the array",15],["-- | The `Functor` instance allows functions to transform the contents of a",19],["--  |   and accumulates the results.",16],["--  | The `Functor` instance allows functions to transform the contents of a",16],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["-- | Default implementations are provided by the following functions:",16],["-- | instead of only the final result.",20]],"useCount":418},{"word":"then","context":[["then Result (Right c) (drop 1 str)",26],["then \"\"",27],["then do",78],["then []",35],["then Low",40],["then [ ]",24],["then pure unit",49],["then",131],["then Nothing",59],["then pure Nothing",44]],"useCount":598},{"word":"this","context":[["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20],["-- | Note, the running time of this function is `O(n)`.",12],["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12],["--  | defined in this library.",21],["-- | defined in this library.",28]],"useCount":93},{"word":"throw","context":[["QE.throw \"Please select axis to aggregate\"",31]],"useCount":31},{"word":"throwError","context":[["throwError (error (",14],["throwError e = lift (throwError e)",26],["throwError e = lift (throwError e)",26],["import Control.Monad.Error.Class (throwError)",115],["import Control.Monad.Error.Class   (throwError)",11]],"useCount":192},{"word":"throwException","context":[["import Control.Monad.Eff.Exception (throwException)",29],["main = runAff throwException (const (pure unit)) $ do",20]],"useCount":49},{"word":"time","context":[["⊕ st.axes.time",37],["-- | Running time: `O(n^2)`",34],["-- | Running time: `O(1)`.",30],["-- | Running time: `O(n)`",83],["-- | Running time: `O(n)` where `n` is the length of the array",15],["-- | Running time: `O(1)`",38],["-- | Note, the running time of this function is `O(n)`.",12]],"useCount":249},{"word":"title","context":[[", title :: String",13],["{ title: case select of",19]],"useCount":32},{"word":"to","context":[["<> \" when trying to parse the string \"",27],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18],["QE.throw \"Please select axis to aggregate\"",31],["-- | to the `Identity` monad.",34],["-- | to combine values for duplicate keys.",16],["--  | The `Functor` instance allows functions to transform the contents of a",16],["-- | The `Functor` instance allows functions to transform the contents of a",19],["-- | function to determine equality of elements.",16],["-- | The `Lazy` constraint is used to generate the result lazily, to ensure",18]],"useCount":241},{"word":"toEnum","context":[["succ = toEnum <<< (_ + 1) <<< fromEnum",17],["import Data.Enum (toEnum)",11],["toEnum n",12],["pred = toEnum <<< (_ - 1) <<< fromEnum",17]],"useCount":57},{"word":"toList","context":[[", toList",16],["import Data.List (toList)",11]],"useCount":27},{"word":"toMaybe","context":[["import Data.Nullable (toMaybe)",35]],"useCount":35},{"word":"toNullable","context":[["import Data.Nullable (Nullable(), toNullable)",20],["import Data.Nullable (Nullable, toNullable)",12]],"useCount":32},{"word":"toNumber","context":[["import Data.Int (toNumber)",50],["import Data.Int (fromNumber, toNumber)",21],[", toNumber",11]],"useCount":82},{"word":"toRequest","context":[["toRequest = defaultToRequest",30],["in toRequest str",29],["toRequest s =",26],["toRequest = unsafeConversion",14],["toRequest = U.unsafeCoerce",14]],"useCount":113},{"word":"toValue","context":[["toValue :: a -> String",12],[", toValue",12],["toValue = show",15],[", value: toValue value",12],["toValue = id",12]],"useCount":63},{"word":"trace","context":[["main = Debug.Trace.trace \"Done\"",54],["trace \"\"",20]],"useCount":74},{"word":"transform","context":[["-- | The `Functor` instance allows functions to transform the contents of a",19],["--  | The `Functor` instance allows functions to transform the contents of a",16]],"useCount":35},{"word":"traverse","context":[["import Data.Traversable (traverse)",98],["import Data.Traversable (class Traversable, traverse)",14],["sequence = traverse id",27]],"useCount":139},{"word":"traverse_","context":[["import Data.Foldable (traverse_)",30]],"useCount":30},{"word":"true","context":[["true -> do",15],["_ -> true",34],["eqModel Nothing Nothing = true",34],[", optionsFirst = true",16],[", HP.readonly true",17],["then pure true",24],["Editor.setEnableBasicAutocompletion true editor",12],[", loading: true",19],["eq _ _ = true",19],[", { include: true",13]],"useCount":226},{"word":"tryRepeatedlyTo","context":[["tryRepeatedlyTo do",20],["tryRepeatedlyTo",46]],"useCount":66},{"word":"trying","context":[["<> \" when trying to parse the string \"",27]],"useCount":27},{"word":"ty","context":[["case ty of",79],["ty <- obj .? \"type\"",16],["ty ← obj .? \"type\"",30],["traceError ty",12]],"useCount":137},{"word":"typ","context":[["removeMouseEventListener typ = unsafeRemoveEventListener (show typ)",18],["removeKeyboardEventListener typ = unsafeRemoveEventListener (show typ)",18],["removeKeyboardEventListener typ = unsafeRemoveEventListener (show typ)",18],["addKeyboardEventListener typ    = unsafeAddEventListener (show typ)",18],["addMouseEventListener typ    = unsafeAddEventListener (show typ)",18],["addKeyboardEventListener typ    = unsafeAddEventListener (show typ)",18],["addMouseEventListener typ    = unsafeAddEventListener (show typ)",18],["removeMouseEventListener typ = unsafeRemoveEventListener (show typ)",18]],"useCount":144},{"word":"type","context":[["ty ← obj .? \"type\"",30],["on = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.on(type, listener);\"",25],["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["type Model =",37],["addEventListener = fpi [\"base\", \"type\", \"listener\", \"\"] \"base.addEventListener(type, listener);\"",25],["type DSL = H.ComponentDSL State Query Slam",39],["import SlamData.Workspace.Card.BuildChart.Common.Eval (type (>>))",27],["type HTML = H.ComponentHTML Query",42],["type StateP =",53],["type State =",253]],"useCount":1017},{"word":"uncons","context":[[", uncons",26]],"useCount":26},{"word":"union","context":[["union = unionBy (==)",11],["-- | Compute the union of a collection of maps",12],["unions = foldl union empty",19],["let opts = Map.union args.globalOpts args.commandOpts",22],[", union",23]],"useCount":87},{"word":"unions","context":[["unions = foldl union empty",19],[", unions",12]],"useCount":31},{"word":"unit","context":[["then pure unit",49],["pure unit",225],["return unit",199],["_ → pure unit",129],["_ -> pure unit",65],["else pure unit",52],["Nothing -> pure unit",50],["_ -> return unit",21],["_ { picker = Just { options, select: f (Const unit) } }",28],["HH.slot unit \\_ →",24]],"useCount":1013},{"word":"unless","context":[["import Control.Monad (when, unless)",13],["unless (isNaN fl) do",19]],"useCount":32},{"word":"unsafe","context":[["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20]],"useCount":32},{"word":"unsafeAddEventListener","context":[["addMouseEventListener typ    = unsafeAddEventListener (show typ)",18],["addKeyboardEventListener typ    = unsafeAddEventListener (show typ)",18]],"useCount":36},{"word":"unsafeCoerce","context":[["import Unsafe.Coerce (unsafeCoerce)",114],["toRequest = U.unsafeCoerce",14]],"useCount":128},{"word":"unsafeCompare","context":[["compare = unsafeCompare",36]],"useCount":36},{"word":"unsafePartial","context":[["import Partial.Unsafe (unsafePartial)",120],["unsafePartial fromRight $",26]],"useCount":146},{"word":"unsafeRemoveEventListener","context":[["removeMouseEventListener typ = unsafeRemoveEventListener (show typ)",18],["removeKeyboardEventListener typ = unsafeRemoveEventListener (show typ)",18]],"useCount":36},{"word":"unwrap","context":[["unwrap y = Either.Left y",14],["import Data.Newtype (unwrap)",45]],"useCount":59},{"word":"update","context":[[", update",15],["-- | A basic text input field that uses a lens to read from and update the",14],["update f k m = alter (maybe Nothing f) k m",12]],"useCount":41},{"word":"updateSelect","context":[["updateSelect l = case _ of",21],["Q.ValueAgg a → updateSelect ST._valueAgg a",12]],"useCount":33},{"word":"uri","context":[["~> \"uri\" := uri",15],["~> \"uri\" := uri",15]],"useCount":30},{"word":"url","context":[[", url :: String",11],[", url = reqUrl",23]],"useCount":34},{"word":"use","context":[["-- | This function is provided for internal use.",12],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20]],"useCount":32},{"word":"v","context":[["<?> (\"k: \" ++ show k ++ \", v: \" ++ show v)",12],["encodeJson v = case v of",55],["Just v -> insert k v m",12],["encodeJson v = case v of",55],["case v of",32],[". (SD.Value v)",15],["v <- makeVar",21],["∷ ∀ m k v",14],["Just v -> insert k v m",12],["<?> (\"k: \" ++ show k ++ \", v: \" ++ show v)",12]],"useCount":240},{"word":"v1","context":[["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12]],"useCount":60},{"word":"v2","context":[["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12],["<?> (\"k1: \" <> show k1 <> \", v1: \" <> show v1 <> \", k2: \" <> show k2 <> \", v2: \" <> show v2)",12],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18],["<?> (\"k1: \" ++ show k1 ++ \", v1: \" ++ show v1 ++ \", k2: \" ++ show k2 ++ \", v2: \" ++ show v2)",18]],"useCount":60},{"word":"validate","context":[["modify validate",11],["H.modify validate",35]],"useCount":46},{"word":"value","context":[["_value = lens _.value _{ value = _ }",24],["read value = do",38],["$ st.axes.value",31],["value ← obj .? \"value\"",34],["value ← obj .? \"value\"",34],[", value ∷ Select JCursor",24],[", value",27],[", value: emptySelect",24],["value ← map runArbJCursor arbitrary",24],[", value: _",27]],"useCount":774},{"word":"valueAgg","context":[[", valueAgg ∷ Select Aggregation",22],["state.valueAgg",16],["_valueAgg = lens _.valueAgg _{ valueAgg = _ }",22],[", valueAgg = newValueAggregation",14],[", valueAgg: emptySelect",22],["_valueAgg = lens _.valueAgg _{ valueAgg = _ }",22],[", valueAgg = fromSelected (Just r.valueAggregation)",14],["setPreviousValueFrom (Just st.valueAgg)",16],["<*> (st.valueAgg ^. _value)",16]],"useCount":164},{"word":"valueAggregation","context":[["valueAggregation ← obj .? \"valueAggregation\"",24],[", r1.valueAggregation ≡ r2.valueAggregation",22],["~> \"valueAggregation\" := r.valueAggregation",22],[", r1.valueAggregation ≡ r2.valueAggregation",22],["~> \"valueAggregation\" := r.valueAggregation",22],[", valueAggregation: _",28],[", valueAggregation",24],[", valueAggregation ∷ Ag.Aggregation",22],["valueAggregation ← arbitrary",24],["valueAggregation ← obj .? \"valueAggregation\"",24]],"useCount":274},{"word":"values","context":[["-- | values wrapped with the type constructor `f`.",12],["-- | Fold a data structure, accumulating values in some `Monoid`.",11],[", values",12],["-- | to combine values for duplicate keys.",16],[", values: groupJCursors (List.fromFoldable options)",21],["values =",24]],"useCount":96},{"word":"version","context":[["-- Generated by psc-make version 0.6.9.3",54],["_version = lens _.version _{version = _}",11],["-- Generated by psc-make version 0.6.9.5",127],["-- | A simpler version of `foldJson` which accepts a callback for when the",12],[", version",11],["_version = lens _.version _{version = _}",11]],"useCount":226},{"word":"view","context":[["cc.dimensions A.!! 0 >>= view S._value",12],["view state =",29],["view :: State -> Html Action",32],[", view: view",22],[", view: view",22],["cc.series A.!! 0 >>= view S._value",20],["cc.measures A.!! 0 >>= view S._value",18],["import Data.Lens (view)",12],["join $ cc.aggregations A.!! 0 >>= view S._value",12]],"useCount":179},{"word":"void","context":[["$ void",14],["import Data.Functor (class Functor, map, void, ($>), (<#>), (<$), (<$>))",16],["void",30]],"useCount":60},{"word":"w","context":[["Tuple a w <- listen m",19],[":: forall w eff",11]],"useCount":30},{"word":"wd","context":[["writer wd = lift (writer wd)",20],["writer wd = lift (writer wd)",20]],"useCount":40},{"word":"webgl","context":[["-> (Eff (webgl :: WebGl | eff) Unit)",94]],"useCount":94},{"word":"when","context":[["-- | A simpler version of `foldJson` which accepts a callback for when the",12],["-- | Note: when defining a `Foldable` instance, this function is unsafe to use",20],["import Control.Monad (when, unless)",13],["-- | Note: when defining a `Bifoldable` instance, this function is unsafe to",12],["import Control.Monad (when)",60],["-- | This can be useful when running an action written using do notation",13],["<> \" when trying to parse the string \"",27]],"useCount":157},{"word":"where","context":[["where",4724],["module Main where",615],["-- | Running time: `O(n)` where `n` is the length of the array",15],["module Utils where",14],["class Show a where",16],[") where",1984],["-- |   where",13],["module M1 where",14],["class Foo a where",18],["module Test.Main where",245]],"useCount":7800},{"word":"which","context":[["-- | `Data.Sequence` instead, which might give better performance for certain",11],["--  | The `Bits` type class identifies types which support bitwise operations.",18],["-- | A simpler version of `foldJson` which accepts a callback for when the",12]],"useCount":41},{"word":"width","context":[["if dims.width < 576.0 ∨ dims.height < 416.0",19],["width = AttributeKey \"width\"",16],["width = AttributeKey \"width\"",16],["width <- windowWidth",11],[", width",23],["E.width 1",28]],"useCount":113},{"word":"window","context":[["import DOM.HTML (window)",57],["window",18]],"useCount":75},{"word":"wiring","context":[["varMaps ← H.fromEff $ Ref.readRef wiring.urlVarMaps",11],["Wiring wiring ← ask",15],["Wiring wiring ← H.liftH $ H.liftH ask",43]],"useCount":69},{"word":"writer","context":[["writer wd = lift (writer wd)",20],["writer wd = lift (writer wd)",20]],"useCount":40},{"word":"x","context":[["(/=) x y = not (x == y)",33],["(/=) x y = not (x == y)",33],["{ x :: Number",21],["quickCheck \\ (x :: Int) y ->",20],["case x of",15],[", x: Nothing",13],["quickCheck \\ (x :: Boolean) y ->",13],["(Just (defaultOptions { stopAt = [ \"-x\" ] }))",13],["case compare x y of",13],["quickCheck \\ x ->",12]],"useCount":230},{"word":"x0","context":[["~> \"contents\" := [encodeJson x0]",32]],"useCount":32},{"word":"xs","context":[["~> \"labels\" := encodeExpr encodeJson xs",12],["zipWithA f xs ys = sequence (zipWith f xs ys)",12],["sort xs = sortBy compare xs",11],["sort xs = sortBy compare xs",11],["zipWithA f xs ys = sequence (zipWith f xs ys)",12]],"useCount":58},{"word":"y","context":[["quickCheck \\ (x :: Boolean) y ->",13],["(/=) x y = not (x == y)",33],[", y ∷ Maybe Number",12],["(/=) x y = not (x == y)",33],[", y :: Number",25],["quickCheck \\ (x :: Int) y ->",20],["case compare x y of",13],["unwrap y = Either.Left y",14],["unwrap y = Either.Left y",14],[", y: Nothing",14]],"useCount":191},{"word":"yAxis","context":[[", yAxis = Just yAxis",14],[", yAxis = Just yAxis",14]],"useCount":28},{"word":"year","context":[[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15],[", \"year = __ (!``SELECT year FROM `/test-mount/testDb/olympics` LIMIT 1``)\"",15]],"useCount":30},{"word":"zipWith","context":[[", zipWith",22],["zipWithA f xs ys = sequence (zipWith f xs ys)",12],["zip = zipWith Tuple",13]],"useCount":47},{"word":"~","context":[["import Data.Argonaut.Combinators ((~>), (:=), (.?))",39],["eval ∷ Query ~> DSL",38],["cardEval ∷ CC.CardEvalQuery ~> DSL",36],["~> jsonEmptyObject",529],["~> \"contents\" := [encodeJson x0]",32],["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31],["H.modify (DCS._displayMode .~ DCS.Dialog)",29],["import Data.Argonaut (JCursor, Json, decodeJson, (~>), (:=), isNull, jsonNull, (.?), jsonEmptyObject)",26],["~> J.jsonEmptyObject",24],["~> \"value\" := r.value",24]],"useCount":1130},{"word":"×","context":[["→ DeckId × Card.Model",18],["→ DeckId × CardId",11],["→ DeckDSL (L.List (DeckId × Port.VarMap))",12],[", parent ∷ Maybe (DeckId × CardId)",14],[", modelCards ∷ Array (DeckId × Card.Model)",14],["∷ L.List (DeckId × Port.VarMap)",12],["∷ Maybe String × (String >> Array Number)",12]],"useCount":93},{"word":"←","context":[["configType ← obj .? \"configType\"",32],["obj ← decodeJson js",34],["value ← obj .? \"value\"",34],["Wiring wiring ← H.liftH $ H.liftH ask",43],["state ← H.get",77],["st ← H.get",254],["Tuple pp dirOrFile ← P.peel p",25],["records ← BCE.records resource",29],["ty ← obj .? \"type\"",30],["isNothing ← arbitrary",30]],"useCount":895},{"word":"→","context":[["→ Feature eff o Unit",67],["_ → Nothing",253],["Left err →",68],["Nothing →",70],["→ String",119],["_ →",82],["→ Json",79],["_ → pure unit",129],["→ XPath",79],["→ State",75]],"useCount":3366},{"word":"⇒","context":[["⇒ CET.CardEvalInput",33],["⇒ DirPath",69],["⇒ FilePath",67],["⇒ Model",29],["⇒ R.Resource",18],["⇒ AnyPath",15],["⇒ String",16]],"useCount":247},{"word":"∀","context":[["peek ∷ ∀ a. CS.ChildQuery a → DSL Unit",22],["∷ ∀ eff m",89],["∷ ∀ a",77],["∷ ∀ eff",28],[":: ∀ a",15],["∷ ∀ eff o",91],["∷ ∀ m",192],["∷ ∀ f m",20],["∷ ∀ r",21],["∷ ∀ e",17]],"useCount":658},{"word":"∘","context":[[", peek: Just (peek ∘ H.runChildF)",16],["∘ right",39],["∘ H.ChildF unit",11],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12],["∘ H.action",17],["∘ left",20],["modelCards ← Array.span (not ∘ eq st.id ∘ fst) <$> getModelCards",12],["BCI.Choose a  → H.modify (l ∘ _value .~ a) *> raiseUpdate",31],["for_ (info.input ^? Lens._Just ∘ Port._ResourceAxes) \\axes → do",22],[", component: H.parentComponent { render, eval, peek: Just (peek ∘ H.runChildF) }",24]],"useCount":204},{"word":"∷","context":[["∷ ∀ m",192],["∷ ∀ a",77],["∷ ∀ eff o",91],["∷ ∀ eff m",89],["∷ ChildPath",84],["render ∷ State → HTML",54],["initialState ∷ State",110],["genModel ∷ Gen.Gen Model",51],["∷ Json",48],[", levelOfDetails ∷ LevelOfDetails",47]],"useCount":2176},{"word":"≠","context":[["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29]],"useCount":29},{"word":"≡","context":[[", r1.value ≡ r2.value",22],["L.nubBy (\\a b → Pathy.printPath a ≡ Pathy.printPath b)",12],[", r1.valueAggregation ≡ r2.valueAggregation",22],[", r1.series ≡ r2.series",13],[", r1.parallel ≡ r2.parallel",12]],"useCount":81},{"word":"⊕","context":[["⊕ st.axes.time",37],["⊕ (guard (state.levelOfDetails ≠ High) $> B.hidden)",29],["⊕ st.axes.date",20],["⊕ st.axes.datetime",16],["⊕ (if state.loading then [ B.hidden ] else [ ])",12],["⊕ if state.loading then [ B.hidden ] else [ ]",12],["⊕ if state.loading then [ ] else [ B.hidden ]",12]],"useCount":138},{"word":"⊹","context":[["decode ∷ Json → String ⊹ Model",30],["⊹ Unit",37]],"useCount":67},{"word":"⨁","context":[["type QueryC = CardEvalQuery ⨁ Query",18],["type QueryP = QueryC ⨁ H.ChildF ChildSlot ChildQuery",16]],"useCount":34}]