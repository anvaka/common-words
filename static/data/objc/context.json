[{"word":"0f","context":[["0.0f, 0.0f,",705],["return 0.0f;",2479],["multiplier:1.0f",2147],["self.alpha = 0.0f;",1839],["delay:0.0f",1175],["self.alpha = 1.0f;",1126],["alpha:1.0f];",1005],["0.0f,",714],["1.0f, 1.0f,",708],["1.0f, 1.0f,",708]],"useCount":198198},{"word":"0x00","context":[["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["return 0x00;",370],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",218]],"useCount":30622},{"word":"31IA","context":[[";;=^358.31IA^4^3",16],[";;=^358.31IA^4^2",55018],[";;=^358.31IA^5^2",16175],[";;=^358.31IA^3^2",9612],[";;=^358.31IA^2^2",2884],[";;=^358.31IA^8^2",551]],"useCount":84256},{"word":"4000000000000000e","context":[["2.4000000000000000e+11 1.8000000000000000e+05",32763]],"useCount":32763},{"word":"8000000000000000e","context":[["2.4000000000000000e+11 1.8000000000000000e+05",32763]],"useCount":32763},{"word":"A","contextgood bit of this code was derived from the Three20 project",1323],["* @param session - A TMBTembooSession containing valid Temboo Application Key credentials",1952]],"useCount":154026},{"word":"AFHTTPRequestOperation","context":[["success:^(AFHTTPRequestOperation *operation, id responseObject) {",2014],["} failure:^(AFHTTPRequestOperation *operation, NSError *error) {",10214],["AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithRequest:request success:success failure:failure];",1008],["failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure",1893],["#import \"AFHTTPRequestOperation.h\"",893],["AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];",990],["[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {",761],["AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];",990],["success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success",1705],["failure:^(AFHTTPRequestOperation *operation, NSError *error) {",1046]],"useCount":36076},{"word":"API","context":[["#pragma mark - API",326],["#pragma mark Public API : Functions",951],["// API:",407],["#pragma mark Private API",421],["//   YouTube Data API (youtube/v3)",515],["// Project: Zenfolio Web API",517],["#pragma mark Public API",544],["return @\"Invalid API Key\";",618],["#pragma mark Public API : Properties",717],["#pragma mark - Public API",891]],"useCount":28338},{"word":"Add","context":[["// Add the view controller's view to the window and display.",200],["%    Add noise to forcing",551],["%    Add noise to initial state",550],["// Add a page at the end",449],["% Add ones to the X data matrix",387],["// Add in color tint.",364],["% Add intercept term to X",234],["/* Add menu items */",227],["// Add default values",201],["// Add the newline",188]],"useCount":33454},{"word":"AppDelegate","context":[["AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];",597],["int retVal = UIApplicationMain(argc, argv, nil, @\"AppDelegate\");",746],["#import \"AppDelegate.h\"",951],["AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication]delegate];",1192],["AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication]delegate];",1192],["@interface AppDelegate ()",21494],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["//  AppDelegate.m",31420],["#import \"AppDelegate.h\"",70921],["@implementation AppDelegate",34927]],"useCount":207290},{"word":"Author","context":[["% Author Johan LÃ¶fberg",686],["% Author:",520],["* Author: Bill Hollings",536],["%     Author: Tom Doel, 2012.  www.tomdoel.com",734],["% Author: Harold Figueroa",853],["%  Author:",866],["% Author: David Legland",950],["% Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA",1128],["%   Author(s): R. Losada",1263],["%   Author(s): J. Schickler",3657]],"useCount":42188},{"word":"B","context":[["B = single(rand(1,1) + rand(1,1)*1i);",384],["QS S DZ=X D D,QQ^DIEQ G B",980],["B G @DQ",980],["// |B|B|B|B|B|P|P|P|P|P|",584],["// |B|B|B|B|B|P|P|P|P|P|",584],["// |B|B|B|B|B|P|P|P|P|P|",584],["// |B|B|B|B|B|P|P|P|P|P|",584],["// |B|B|B|B|B|P|P|P|P|P|",584],["% This is the MATLAB Tensor Toolbox by T. Kolda, B. Bader, and others.",494],["case 'B':",430]],"useCount":69752},{"word":"BOOL","context":[["} completion:^(BOOL finished) {",25009],["- (void)viewDidAppear:(BOOL)animated {",6376],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated {",7137],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated {",7137],["- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation",7181],["- (void)viewDidAppear:(BOOL)animated",7408],["- (void)viewWillAppear:(BOOL)animated {",11048],["- (void)viewWillAppear:(BOOL)animated",12501],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090]],"useCount":1011653},{"word":"BackgroundColor","context":[["if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",13891],["'BackgroundColor',[0.8 0.8 0.8], ...",2223],["'BackgroundColor',[1 1 1], ...",1660],["set(hObject,'BackgroundColor',[.9 .9 .9]);",988],["set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));",951],["if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",940],["'BackgroundColor',[1 1 1],...",493],["'BackgroundColor',bgcolor, ...",478],["'BackgroundColor','w',...",311],["set(hObject,'BackgroundColor','white');",15030]],"useCount":49485},{"word":"C","context":[[":- pragma foreign_proc(\"C#\",",2009],["extern \"C\" {",1335],["X W:'$D(ZTQUEUED) $C(7),\"??\" I $D(DB(DQ)) G Z^DIE17",980],["TR R X:DTIME E  S (DTOUT,X)=U W $C(7)",970],["// IDECodeSnippetLanguage: Xcode.SourceCodeLanguage.Objective-C",782],["extern \"C\"",731],["case 'C':",667],["(flags & kSCNetworkReachabilityFlagsConnectionOnTraffic)  ? 'C' : '-',",488],[".SH C-BINDING SYNOPSIS",485],[":- pragma foreign_proc(\"C\",",5437]],"useCount":80141},{"word":"CDVPluginResult","context":[["CDVPluginResult *pluginResult = nil;",429],["CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK",404],["CDVPluginResult *pluginResult;",424],["CDVPluginResult* result;",455],["CDVPluginResult* pluginResult;",494],["CDVPluginResult* result = nil;",1485],["CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];",1524],["CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];",1524],["pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];",1557],["CDVPluginResult* pluginResult = nil;",1905]],"useCount":30397},{"word":"CFRelease","context":[["CFRelease(lMap);",564],["CFRelease(request);",593],["CFRelease(font);",629],["CFRelease(framesetter);",657],["CFRelease(frame);",726],["CFRelease(message);",795],["CFRelease(trust);",846],["CFRelease(source);",901],["CFRelease(path);",911],["CFRelease(uuid);",1069]],"useCount":64406},{"word":"CFStringRef","context":[["TiStringRef jsEventTypeString = TiStringCreateWithCFString((CFStringRef) eventName);",1302],["(CFStringRef)self,",547],["(CFStringRef)@\"!*'();:@&=+$,/?%#[]\",",515],["(CFStringRef)unencodedString,",493],["forMode:(__unused CFStringRef)aMode",468],["TiStringRef keyString = TiStringCreateWithCFString((CFStringRef) key);",432],["CFStringRef escapedPath = CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,",418],["(CFStringRef)@\"!*'();:@+$,/?%#[]=\",",418],["(CFStringRef)pathPortion, charactersToNotEscape,charactersThatNeedEscaping,",417],["TiStringRef nameRef = TiStringCreateWithCFString((CFStringRef)key);",2170]],"useCount":38260},{"word":"CGColor","context":[["CGContextSetFillColorWithColor(context, [color CGColor]);",1278],["CGContextSetFillColorWithColor(context, color.CGColor);",568],["[cbutton.layer setBorderColor:[UIColor whiteColor].CGColor];",441],["const CGFloat *c = CGColorGetComponents(self.CGColor);",412],["CGContextSetFillColorWithColor(outputContext, tintColor.CGColor);",407],["[colors2 addObject:(id)[color CGColor]];",380],["[colors addObject:(id)[color CGColor]];",361],["self.layer.shadowColor = [UIColor blackColor].CGColor;",309],["CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);",286],["const CGFloat *components = CGColorGetComponents(self.CGColor);",263]],"useCount":29815},{"word":"CGContextRef","context":[["CGContextRef outputContext = UIGraphicsGetCurrentContext();",416],["CGContextRef effectInContext = UIGraphicsGetCurrentContext();",386],["CGContextRef context = UIGraphicsGetCurrentContext();",13753],["CGContextRef ctx = UIGraphicsGetCurrentContext();",2812],["CGContextRef c = UIGraphicsGetCurrentContext();",657],["CGContextRef context = UIGraphicsGetCurrentContext();",497],["CGContextRef gradientBitmapContext = CGBitmapContextCreate(nil, 1, reflectionHeight,",448],["CGContextRef context = CGBitmapContextCreate(NULL,",438],["CGContextRef effectOutContext = UIGraphicsGetCurrentContext();",387],["- (void)drawInContext:(CGContextRef)context",305]],"useCount":36012},{"word":"CGFloat","context":[["-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath",1367],["CGFloat r,g,b,a;",899],["- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section",987],["CGFloat pageWidth = scrollView.frame.size.width;",1083],["-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{",1169],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath",6381],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {",4624],["- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section",2024],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{",1906],["- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {",1477]],"useCount":393205},{"word":"CGPoint","context":[["CGPoint point = [touch locationInView:self];",896],["CGPoint result;",529],["-(UIView*)hitTest:(CGPoint)point withEvent:(UIEvent *)event",493],["CGPoint newCenter;",668],["- (UIView *)hitTest:(CGPoint) point withEvent:(UIEvent *)event",675],["- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event",848],["CGPoint anchorPoint = [[view layer] anchorPoint];",837],["CGPoint offset = CGPointMake(newX, 0);",900],["CGPoint point;",950],["CGPoint center = self.center;",1650]],"useCount":98775},{"word":"CGPointMake","context":[["return CGPointMake(result.x + bounds.origin.x,result.y + bounds.origin.y);",418],["return CGPointMake(x, y);",702],["CGPoint gradientStartPoint = CGPointMake(0, reflectionHeight);",448],["scrollView.contentOffset = CGPointMake(scrollView.frame.size.width*pageIndex, 0);",443],["dragButton.center = CGPointMake(dragOrigin.x + (origin.x - touchOrigin.x),",443],["scrollView.contentOffset = CGPointMake(pager.currentPage * scrollView.frame.size.width, 0);",443],["[scrollView setContentOffset:CGPointMake(x, 0) animated:animated];",443],["CGPoint offset = CGPointMake(newX, 0);",900],["return CGPointMake(0,0);",815],["return CGPointMake(",436]],"useCount":42360},{"word":"CGRect","context":[["- (void)drawRect:(CGRect)rect",8162],["- (id)initWithFrame:(CGRect)frame",14862],["CGRect frame = self.frame;",11306],["- (void)drawRect:(CGRect)rect {",8845],["- (instancetype)initWithFrame:(CGRect)frame",7578],["- (id)initWithFrame:(CGRect)frame {",6732],["- (instancetype)initWithFrame:(CGRect)frame {",5205],["-(void)frameSizeChanged:(CGRect)frame bounds:(CGRect)bounds",2512],["-(void)frameSizeChanged:(CGRect)frame bounds:(CGRect)bounds",2512],["CGRect bounds = self.bounds;",1959]],"useCount":230379},{"word":"CGRectMake","context":[["UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 50, 20)];",451],["webview = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, 10, 1)];",451],["CGContextDrawImage(context, CGRectMake(0, image.size.height, image.size.width, reflectionHeight), reflectionImage);",444],["button.frame = CGRectMake(point.x, point.y, button.frame.size.width, button.frame.size.height);",444],["CGContextFillRect(gradientBitmapContext, CGRectMake(0, 0, 1, reflectionHeight));",448],["CGRect frame = CGRectMake(x, y, buttonWidth, buttonHeight);",449],["CGRect rect = CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);",564],["return CGRectMake(0, 0, 0, 0);",456],["return CGRectMake(x, y, w, h);",466],["CGRect rect = CGRectMake(0, 0, size.width, size.height);",475]],"useCount":71525},{"word":"CGSize","context":[["- (CGSize)intrinsicContentSize",720],["CGSize boundsSize = self.bounds.size;",863],["- (CGSize)sizeThatFits:(CGSize)size",694],["- (CGSize)sizeThatFits:(CGSize)size {",844],["- (CGSize)sizeThatFits:(CGSize)size {",844],["- (CGSize)sizeThatFits:(CGSize)size",694],["- (CGSize)size",674],["- (void)setSize:(CGSize)size",655],["CGSize size;",962],["CGSize s = [[CCDirector sharedDirector] winSize];",1213]],"useCount":82849},{"word":"CGSizeMake","context":[["CGSize imageSize = CGSizeMake(TiDimensionCalculateValue(width, 0.0),",450],["imageSize = CGSizeMake(ceilf(scale*fullImageSize.width),",449],["CGSize size = CGSizeMake(image.size.width, image.size.height + reflectionHeight);",444],["scrollView.contentSize = CGSizeMake(numberOfPages*scrollView.frame.size.width, scrollView.frame.size.height);",443],["return CGSizeMake(rect.size.width-TI_NAVBAR_BUTTON_WIDTH, TI_NAVBAR_HEIGHT);",418],["self.preferredContentSize = CGSizeMake(320.0, 600.0);",246],["newImage = [UIImageResize resizedImage:CGSizeMake(calculatedWidth, calculatedHeight)",240],["CGSize maxSize = CGSizeMake(maxWidth, remainingHeight);",236],["return CGSizeMake(width, height);",637],["label.shadowOffset = CGSizeMake(0.0f, 1.0f);",236]],"useCount":32671},{"word":"CHECK","context":[["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["// CHECK-NEXT:          </array>",2928],["// CHECK-NEXT:         </dict>",2774],["// CHECK-NEXT:          <array>",2928],["// CHECK-NEXT:           </dict>",5352],["// CHECK-NEXT:           <dict>",5352],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352],["// CHECK-NEXT:           </dict>",5856],["// CHECK-NEXT:           <dict>",5856]],"useCount":192663},{"word":"Check","context":[["% Check symmetry",456],["else // Check and see if we cached a file to disk",371],["% Check",367],["//Check the login error in shibboleth",341],["% Check input",335],["//Check if there are fragmens of saml in url, in this case there are a credential error",334],["// Check pre-conditions.",332],["// Check for errors",331],["// TODO: Check for proxies",325],["Check the error message to determine what the actual problem was.",742]],"useCount":46341},{"word":"Class","context":[["Class isa;",510],["+ (Class)layerClass {",530],["Class class = [self class];",558],["+ (Class)classForAdditionalProperties {",571],["#pragma mark Class Methods",665],["+ (Class)layerClass",853],["#pragma mark - Class Methods",1304],["#pragma mark - Class methods",1348],["NSDictionary<NSString *, Class> *map = @{",2625],["+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {",2629]],"useCount":73963},{"word":"Cocoa","context":[["#import <Cocoa/Cocoa.h>",8117],["#include <Cocoa/Cocoa.h>",1414],["#import <Cocoa/Cocoa.h>",8117],["#import <Cocoa/Cocoa.h>",4929],["#import <Cocoa/Cocoa.h>",4929],["#include <Cocoa/Cocoa.h>",1414],["#include <Cocoa/Cocoa.h>",262],["#include <Cocoa/Cocoa.h>",262],["* Welcome to Cocoa Lumberjack!",203],["/*   SDLMain.m - main entry point for our Cocoa-ized SDL app",158]],"useCount":40997},{"word":"Create","context":[["// Create the default button, and set the default size",247],["// Create the coordinator and store",1247],["// Create the request",277],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["//  Choose \"Create NSManagedObject Subclassâ¦\" from the Core Data editor menu",841],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",541],["// Create the item",404],["% Create ellipse",392],["// Create and configure the scene.",348],["% Create axes",315]],"useCount":54494},{"word":"Created","context":[["//  Created by ___FULLUSERNAME___ on ___DATE___.",2243],["//  Created by Rob Amos.",1933],["//  Created by base on 15/09/19.",275],["//  Created by decoteaud on 3/11/16.",1005],["//  Created by Jesse Squires",868],["//  Created by: Jon Reid, http://qualitycoding.org/",635],["Created by Juan Haladjian on 05/10/2013.",339],["* Created by Weex.",300],["// Created by Matej Bukovinski on 2.4.09.",296],["//  Created by Daniel Cohen Gindi on 17/3/15.",259]],"useCount":128562},{"word":"D","context":[["- doubly constrained        :  0   D",11182],["D",2365],["D P Q:EX=U",1858],["D FULL^VALM1",1587],["D ^DIE",1572],["I $D(X),X'?.ANP K X",1327],["D ^DIR K DIR",1265],["D ^DIR",2810],["E  D",2658],["I X'=\"\" D",1199]],"useCount":260419},{"word":"DA","context":[["S DIKZ(0)=$G(^DGPT(DA(1),\"M\",DA,0))",240],["S DFN=DA D EN^DGMTCOR K DGMTCOR",220],["N DA,DIK",213],["S Y=^(0),DH=$S($O(^(0))'>0:0,1:$P(Y,U,4)-1),X=$P($P(Y,U,3),U,DH>0) D 3:X=DA",201],["D EVENT^IVMPLOG(DA)",813],["D:($T(ADGRU^DGRUDD01)'=\"\") ADGRU^DGRUDD01(DA)",646],["S DA=0",534],["D AUTOUPD^DGENA2(DA)",516],["S DIKZ(70)=$G(^DGPT(DA,70))",282],["S DIKZ(0)=$G(^DGPT(DA(1),\"M\",DA,0))",240]],"useCount":28423},{"word":"DCHECK","context":[["DCHECK(sender);",235],["DCHECK(thread_checker_.CalledOnValidThread());",1436],["DCHECK([NSThread isMainThread]);",992],["DCHECK(CalledOnValidThread());",572],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",406],["DCHECK(view);",400],["DCHECK(browser);",283],["DCHECK(event);",247],["DCHECK(delegate_);",234],["DCHECK(profile);",226]],"useCount":31102},{"word":"DEBUG","context":[["NSLog(@\"[DEBUG] Invoking %@ with args: %@\",o,args);",492],["#ifdef DEBUG",11255],["#if DEBUG",7680],["#ifdef DEBUG",956],["#if defined(DEBUG)",663],["#endif // DEBUG",617],["VerboseLog(@\"[DEBUG] facebook didLoad\");",492],["NSLog(@\"[DEBUG] Invoked %@ with result: %@ [took: %f]\",o,result,elapsed);",492],["NSLog(@\"[MEMORY DEBUG] RELEASE: %@ (%d)\",self,[self retainCount]-1);",422],["NSLog(@\"[DEBUG] INIT: %@\",self);",421]],"useCount":49228},{"word":"DQ","context":[["X W:'$D(ZTQUEUED) $C(7),\"??\" I $D(DB(DQ)) G Z^DIE17",980],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["S X=DG(DQ),DIC=DIE",6482],["A K DQ(DQ) S DQ=DQ+1",983],["A K DQ(DQ) S DQ=DQ+1",983],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["A K DQ(DQ) S DQ=DQ+1",983],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["A K DQ(DQ) S DQ=DQ+1",983]],"useCount":38472},{"word":"Data","context":[["#pragma mark - Core Data Saving support",1253],["% D4M: Dynamic Distributed Dimensional Data Model",289],["// Data",290],["#pragma mark - Core Data stack",2113],["fprintf('Loading and Visualizing Data ...\\n')",301],["//  Choose \"Create NSManagedObject Subclassâ¦\" from the Core Data editor menu",841],["//   YouTube Data API (youtube/v3)",515],["#pragma mark - Data",464],["%% Load Data",398],["#pragma mark Plot Data Source Methods",351]],"useCount":28042},{"word":"Dispose","context":[["[self Dispose];",14],["// Dispose of this observation if the receiver or the observer deallocate.",14],["// Dispose the ExtAudioFileRef, it is no longer needed",19],["// Dispose of any resources that can be recreated",23],["// Dispose the ExtAudioFileRef, it is no longer needed",37],["//    // Dispose of any resources that can be recreated.",47],["// Dispose of the Audio Queue",136],["// Dispose of any resources that can be recreated.",546],["// Dispose of any resources that can be recreated.",61819]],"useCount":62655},{"word":"Do","context":[["% Do nothing",288],["// Automatically generated by xmlvm2obj. Do not edit!",329],["// Do any additional setup after loading the view.",21076],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Do any additional setup after loading the view from its nib.",7268],["// Do nothing",714],["Do[",587],["// Do not rely on the block being run in order to release the packet,",478],["// Do nothing.",366],["// Do a direct comparison first, and then iterate through the headers if we have to.",361]],"useCount":65704},{"word":"E","context":[["catch E",693],[". E  D",468],["S X=Y,DB(DQ)=1,DE(DW,\"4/\")=\"\" G:X=\"\" N^DIE17:DV,A I $D(DE(DQ)),DV[\"I\"!(DV[\"#\") D E^DIE0 G A:'$D(X)",558],["E  K @DIEZTMP@(\"V\",DP,DIIENS,DIFLD,\"4/\")",810],["E  D",2658],["coefActual = double(E.'*E);",369],["D E^DIE0 G RD:$D(X),PR",980],["TR R X:DTIME E  S (DTOUT,X)=U W $C(7)",970],["S X=Y,DB(DQ)=1 G:X=\"\" N^DIE17:DV,A I $D(DE(DQ)),DV[\"I\"!(DV[\"#\") D E^DIE0 G A:'$D(X)",939],["SET N DIR S DIR(0)=\"SV\"_$E(\"o\",$D(DB(DQ)))_U_DU,DIR(\"V\")=1",922]],"useCount":54579},{"word":"EXPECT_EQ","context":[["EXPECT_EQ(model_string, actualModelString);",556],["EXPECT_EQ([[bar_ buttons] count], arraysize(titles));",216],["EXPECT_EQ(0U, [[bar_ buttons] count]);",220],["EXPECT_EQ(",837],["EXPECT_EQ(0, subchild->child_count());",473],["EXPECT_EQ(StatusBubbleMac::kBubbleHidden, GetState());",221],["EXPECT_EQ(expected, actual);",222],["EXPECT_EQ(1u, [apps_grid_controller_ visiblePage]);",222],["EXPECT_EQ(0u, [apps_grid_controller_ visiblePage]);",272],["EXPECT_EQ(model_string, actual);",253]],"useCount":40656},{"word":"Error","context":[["XCTFail(@\"Error: %@\", error);",451],["// Error",425],["NSLog(@\"[ERROR] Failed to load image: %@, Error: %@\",[request url], error);",458],["YDBLogError(@\"Error creating '%@': %d %s\", THIS_METHOD, status, sqlite3_errmsg(db));",578],["//Error handling using HTTP status codes",583],["if ([elementName isEqualToString:@\"Error\"]) {",763],[";       <0  Error code",820],["NSLog(@\"Timeout Error: %@\", error);",831],["JSB_PRECONDITION2(ok, cx, JS_FALSE, \"Error processing arguments\");",928],["NSLog(@\"Error: %@\", error);",2185]],"useCount":58875},{"word":"F","context":[["S p2=$F(object,p1,p2)",304],["SAVEVALS S @DIEZTMP@(\"V\",DP,DIIENS,DIFLD,\"O\")=$G(DE(DQ)) S:$D(^(\"F\"))[0 ^(\"F\")=$G(DE(DQ))",807],[".\tF  S p2=$F(object,p1,p2) Q:p2=0!($L($E(object,1,p2-1),qt)#2)",304],["F  S y=$$vStrFnd(object,p1,y,p4,qt) Q:y=0  D",304],[".\tF  S p2=$F(object,p1,p2) Q:p2=0!($L($E(object,1,p2-1),qt)#2)",304],["I p1'>0 F  Q:$E(object,1)'=p2  S object=$E(object,2,1048575)",303],["F = set([]);",257],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983],["N I X=\"\" G NKEY:$D(^DD(\"KEY\",\"F\",DP,DIFLD)),A:DV'[\"R\",X:'DV,X:D'>0,A",810],["SAVEVALS S @DIEZTMP@(\"V\",DP,DIIENS,DIFLD,\"O\")=$G(DE(DQ)) S:$D(^(\"F\"))[0 ^(\"F\")=$G(DE(DQ))",807]],"useCount":44423},{"word":"FontSize","context":[["'FontSize',8,...",574],["set(gca,'FontSize',15);",461],["'FontSize',10,...",673],["'FontSize',9, ...",812],["'FontSize',10, ...",822],["'fontsize',handles.FontSize(2),...",850],["set(gca,'FontSize',fontSize);",864],["xlabel('X','FontSize',fontSize); ylabel('Y','FontSize',fontSize); zlabel('Z','FontSize',fontSize);",400],["xlabel('X','FontSize',fontSize); ylabel('Y','FontSize',fontSize); zlabel('Z','FontSize',fontSize);",400],["xlabel('X','FontSize',fontSize); ylabel('Y','FontSize',fontSize); zlabel('Z','FontSize',fontSize);",400]],"useCount":30678},{"word":"For","context":[["// For now, we're shortcutting to suppress false warnings.",573],["** a written agreement between you and Digia.  For licensing terms and",637],["** conditions see http://qt.digia.com/licensing.  For further information",630],["// For documentation please refer to the DDAbstractLogger implementation.",536],["// For now, do the sensible thing... throw an exception.",476],["// For now, do the sensible thing... only go up to the end.",476],["// For extensive documentation please refer to the DDAbstractLogger implementation.",446],["%  For this exercise, you will not need to change any code in this file,",423],["// For larger values of 's' (s >= 2.0), an approximation can be used: Three",408],["% For additional information visit http://murphylab.web.cmu.edu or",360]],"useCount":36796},{"word":"Foundation","context":[["#import <Foundation/Foundation.h>",36021],["#import <Foundation/Foundation.h>",3400],["#import <Foundation/Foundation.h>",3400],["% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",2372],["#import <Foundation/NSString.h>",2258],["*  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.",950],["#import <Foundation/NSException.h>",1274],["#import <Foundation/NSArray.h>",1923],["#import <Foundation/NSDictionary.h>",1816],["#import <Foundation/Foundation.h>",36021]],"useCount":133576},{"word":"G","context":[["K DDER G X",983],["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980],["RD G QS:X?.\"?\" I X[\"^\" D D G ^DIE17",980],["G RE",4193],["S X=$G(X(1))",1763],["Q:$G(OCXOERR)",1680],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983],["I I DV'[\"I\",DV'[\"#\" G RD",980],["D DE G BEGIN",980],["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980]],"useCount":112514},{"word":"GUIDATA","context":[["% and user data (see GUIDATA)",19],["% handles    structure with handles and user data (see GUIDATA)",35747],["% See also: GUIDE, GUIDATA, GUIHANDLES",2122],["% data       structure with handles and user data (see GUIDATA)",21],["% figureHandle    structure with figureHandle and user data (see GUIDATA)",21],["%       o handles    structure with handles and user data (see GUIDATA)",21],["% Generate HANDLES structure and store with GUIDATA. If there is",22],["% handles    structure with handles and user data (see GUIDATA )",39],["% % handles    structure with handles and user data (see GUIDATA)",106],["% h    structure with h and user data (see GUIDATA)",146]],"useCount":38340},{"word":"Get","context":[["// Get root node of the accessible node hierarchy, if node not specified",268],["% Get data",235],["// Get the resized image from the context and a UIImage",239],["// Get the authentication realm",263],["% Get preferences.",342],["#pragma mark Get Operations",408],["//  Get the latest version from here:",445],["% Get default command line output from handles structure",2229],["// Get the new view controller using [segue destinationViewController].",19412],["// Get the index for the parameter name.",202]],"useCount":60255},{"word":"HDR","context":[["fclose(HDR.FILE.FID);",596],["HDR ;",254],["[VAL,c] = fread(HDR.FILE.FID,[1,LEN],'uint8');",295],["for k = 1:HDR.NS,",297],["HDR ; -- header code",311],["HDR.FILE.OPEN = 1;",363],["HDR.TYPE = 'native';",440],["HDR.NRec = 1;",444],["HDR.FILE.POS = 0;",470],["D HDR",499]],"useCount":33741},{"word":"I","context":[["I X'=\"\" D",1199],["I I DV'[\"I\",DV'[\"#\" G RD",980],["RP D O I X=\"\" S X=DE(DQ) G A:'DV,A:DC<2,N^DIE17",980],["I $D(X),X'?.ANP K X",1327],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983],["I X=\"@\" D D G Z^DIE2",980],["I I DV'[\"I\",DV'[\"#\" G RD",980],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983],["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980],["I I DV'[\"I\",DV'[\"#\" G RD",980]],"useCount":145026},{"word":"IBAction","context":[["- (IBAction)done:(id)sender {",214],["- (IBAction)slidersValueChanged:(id)sender",231],["- (IBAction)ok:(id)sender {",219],["- (IBAction)back:(id)sender {",279],["- (IBAction)done:(id)sender",342],["- (IBAction)cancel:(id)sender {",456],["- (IBAction)cancel:(id)sender",532],["#pragma mark - IBAction",617],["- (IBAction) showSearchScreen: (id) sender",187],["- (IBAction)cancel:(id)sender {",277]],"useCount":52842},{"word":"IBOutlet","context":[["@property (weak, nonatomic) IBOutlet UILabel *titleLabel;",819],["@property (weak, nonatomic) IBOutlet UIImageView *imageView;",1017],["@property (weak, nonatomic) IBOutlet UITextField *textField;",294],["@property (weak, nonatomic) IBOutlet UITextView *textView;",301],["@property (weak, nonatomic) IBOutlet UICollectionView *collectionView;",390],["@property (weak) IBOutlet NSWindow *window;",434],["@property (weak, nonatomic) IBOutlet UIWebView *webView;",483],["@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;",668],["@property (weak, nonatomic) IBOutlet UITableView *tableView;",1814],["@property (weak, nonatomic) IBOutlet UILabel *nameLabel;",711]],"useCount":36239},{"word":"IN","context":[["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",918],["//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1854],["OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.",1687],["IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL",1685],["* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS",1258],["* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1242],["WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1172],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",1021],["// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",1002],["// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",1002]],"useCount":34085},{"word":"IO","context":[["io.nl(!IO)",937],["main(!IO) :-",1504],["U IO",1641],["io.nl(!IO),",1717],["!IO),",782],["io.nl(!IO).",732],["write_indent(Indent, !IO),",711],["io.write_string(\", \", !IO),",626],["trace [io(!IO)] (",617],["IO = IO0;",925]],"useCount":43717},{"word":"If","context":[["// If the model doesn't already exist, it is created from the application's model.",694],["addressed in the generation tool. If you wish to submit pull requests, please",798],["//Note: If url is a nonimmediate image, this returns nil.",836],["If you encounter schema incompatibility errors during development, you can reduce their frequency by:",694],["// If the coordinator doesn't already exist, it is created and the application's store added to it.",683],["//TODO: If we have focus while this happens, we need to signal an update.",662],["// View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),",602],["/** If you need to do any extra app-specific initialization, you can do it here",600],["* along with this program; see the file COPYING.  If not, write to",914],["## along with Octave; see the file COPYING.  If not, see",3037]],"useCount":150674},{"word":"In","context":[["// In UI tests it is usually best to stop immediately when a failure occurs.",4667],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["** In addition, as a special exception, Nokia gives you certain additional",491],["In consideration of your agreement to abide by the following terms, and",1689],["% In:",661],["** In addition, as a special exception, Digia gives you certain additional",638],["// In a story board-based application, you will often want to do a little preparation before navigation",497],["In consideration of your agreement to abide by the following terms, and subject",455],["// but after we've detached our view.  In which case, we need to just ignore this",451],["*\tIn views where the order in which keys are applied matter (I'm looking at you, TableView), this should be",450]],"useCount":61715},{"word":"Initialization","context":[["#pragma mark - Initialization & Destruction",219],["// Initialization",204],["/// @name Initialization",505],["% Initialization",610],["%% Initialization",1018],["#pragma mark Initialization and teardown",1036],["#pragma mark Initialization",1884],["// Initialization code here.",1982],["#pragma mark - Initialization",4716],["// Initialization code",17240]],"useCount":33216},{"word":"Input","context":[["% Input arguments:",628],["% ## Input",1948],["% Input",2416],["% Input:",6283],[";Input:",905],["; Input:",901],[";  Input:",865],["%   Input parameters:",826],["% Input fields:",788],["%   Input:",626]],"useCount":32473},{"word":"It","context":[["//It's possible that some of the covered area doesn't matter. If it all matters, unimportant is 0.",524],["//It's likely to fail, but that way we pass it on to error handling.",449],["//It's possible that the 'setvalueforkey' has its own plans of what should be in the JS object,",432],["{ //It's not an image.",415],["if(keyboardUIToolbar != nil){ //It already exists, update it.",331],["* It is called when:",240],["// It only waits until ONE context has signialed that it has shut down; then we proceed along our merry way.",243],["// It's time to start the connection process.",252],["%     You should not use this class within your own code. It is intended to",278],["// It can be RGBA8888, RGBA4444, RGB5_A1, RGB565",399]],"useCount":32015},{"word":"J","context":[["%   Author(s): J. Schickler",3657],["J = 0;",1351],["%               You should set J to the cost.",877],["%   Author:      Peter J. Acklam",245],["%     N. Perraudin, J. Paratte, D. Shuman, V. Kalofolias, P. Vandergheynst,",270],["%% K.C. Toh, M.J. Todd, R.H. Tutuncu",296],["K ^UTILITY($J,\"W\")",331],["% Save the cost J in every iteration",355],["* Signature: (J)V",468],["K ^TMP($J)",742]],"useCount":40308},{"word":"K","context":[["V D @(\"X\"_DQ) K YS",980],["I $D(X),X'?.ANP K X",1327],["D ^DIR K DIR",1265],["K X",1202],["K DDER G X",983],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983],["A K DQ(DQ) S DQ=DQ+1",983],["K %Z Q",980],["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980],[". K X1,X2 M X1=X,X2=X",873]],"useCount":81823},{"word":"KrollObject","context":[["KrollObject* o = (KrollObject*) TiObjectGetPrivate(object);",1741],["if ([o isKindOfClass:[KrollObject class]])",874],["id excm = [KrollObject toID:context value:exception];",1138],["TiValueRef value = [KrollObject toValue:ctx value:result];",1142],["TiValueRef value = [KrollObject toValue:ctx value:result];",1215],["id excm = [KrollObject toID:context value:exception];",1256],["KrollObject * currentKrollObject = [currentBridge krollObjectForProxy:self];",1296],["#import \"KrollObject.h\"",1400],["*exception = [KrollObject toValue:[o context] value:ex];",1530],["KrollObject* o = (KrollObject*) TiObjectGetPrivate(object);",1741]],"useCount":48128},{"word":"L","context":[["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980],["lua_newtable(L);",841],["lua_newtable(L) ;",689],["lua_setmetatable(L, -2);",596],["lua_settable(L, -3);",572],["case 'L':",541],["lua_pop(L, 1);",1439],["lua_pushnil(L);",1354],["lua_pushvalue(L, 1);",1025],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983]],"useCount":86517},{"word":"M","context":[["% compiling this M-file instead of linking against the MEX-file.  Don't remove.",199],["S DIKZ(0)=$G(^DGPT(DA(1),\"M\",DA,0))",240],["%% K.C. Toh, M.J. Todd, R.H. Tutuncu",296],["M D @DIXX",297],["for i = 1:M",325],["K X M X=X2 D",380],[";;=!M",423],["for i=1:M",475],["for m=1:M",527],[". K X1,X2 M X1=X,X2=X",873]],"useCount":46952},{"word":"MAKE_SYSTEM_PROP","context":[["MAKE_SYSTEM_PROP(CANCEL,UIBarButtonSystemItemCancel);",442],["MAKE_SYSTEM_PROP(EDIT,UIBarButtonSystemItemEdit);",442],["MAKE_SYSTEM_PROP(PLAY,UIBarButtonSystemItemPlay);",442],["MAKE_SYSTEM_PROP(SEARCH,UIBarButtonSystemItemSearch);",442],["MAKE_SYSTEM_PROP(PAUSE,UIBarButtonSystemItemPause);",442],["MAKE_SYSTEM_PROP(ACTION,UIBarButtonSystemItemAction);",442],["MAKE_SYSTEM_PROP(TRASH,UIBarButtonSystemItemTrash);",442],["MAKE_SYSTEM_PROP(COMPOSE,UIBarButtonSystemItemCompose);",442],["MAKE_SYSTEM_PROP(REPLY,UIBarButtonSystemItemReply);",442],["MAKE_SYSTEM_PROP(FAST_FORWARD,UIBarButtonSystemItemFastForward);",442]],"useCount":31832},{"word":"MATLAB","context":[["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["% This file is part of The Robotics Toolbox for MATLAB (RTB).",355],["% This code is part of a batch job configuration system for MATLAB. See",346],["% This is the MATLAB Tensor Toolbox by T. Kolda, B. Bader, and others.",494],["%   VOICEBOX is a MATLAB toolbox for speech processing.",586],["%MATLAB Tensor Toolbox.",715],["%Embedded MATLAB Library Function",314],["%   other modules (such as MATLAB code and MEX-files) available in a",264],["%   MATLAB(R) or comparable environment containing parts covered",264],["% Requirements: MATLAB R2013b",328]],"useCount":63814},{"word":"Methods","context":[["#pragma mark Private Methods",1738],["#pragma mark - Helper Methods",867],["#pragma mark NSCoding Methods",665],["#pragma mark - Instance Methods",880],["#pragma mark Public Methods",1145],["#pragma mark - Methods",1295],["#pragma mark - Class Methods",1304],["#pragma mark - Public Methods",2659],["#pragma mark - Private Methods",3849],["#pragma mark Class Methods",665]],"useCount":41125},{"word":"N","context":[["N ER S ER=0",1117],[".N DIK,DIV,DIU,DIN",1155],["N X",1324],["for i=1:N",1920],["R 1  R 2  N 1  N 2",7267],["jobnr. mode duration  R 1  R 2  N 1  N 2",7267],["jobnr. mode duration  R 1  R 2  N 1  N 2",7267],["- nonrenewable              :  2   N",9475],["R 1  R 2  N 1  N 2",7267],["for i = 1:N",1594]],"useCount":168503},{"word":"NAME","context":[["<font NAME=\"SansSerif\" SIZE=\"12\"/>",6686],["<hook NAME=\"NodeConditionalStyles\">",8955],["<font BOLD=\"true\" NAME=\"SansSerif\" SIZE=\"12\"/>",3006],["<hook NAME=\"SummaryNode\"/>",1170],["<font NAME=\"SansSerif\" SIZE=\"10\"/>",1062],[".SH NAME",946],["<font NAME=\"SansSerif\" SIZE=\"14\"/>",946],["<font NAME=\"Dialog\" SIZE=\"10\"/>",899],["<hook NAME=\"FirstGroupNode\"/>",896],["<font NAME=\"Dialog\" SIZE=\"12\"/>",724]],"useCount":41942},{"word":"NEXT","context":[["// CHECK-NEXT:          <array>",2928],["// CHECK-NEXT:          </array>",2928],["// CHECK-NEXT:           </dict>",5352],["// CHECK-NEXT:           <dict>",5352],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352],["// CHECK-NEXT:           <dict>",5856],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856],["// CHECK-NEXT:           </dict>",5856],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["// CHECK-NEXT:         <dict>",2774]],"useCount":174425},{"word":"NO","context":[["repeats:NO];",3029],["return NO;",240518],["return NO;",26096],["// Return NO if you do not want the specified item to be editable.",5341],["self.continueAfterFailure = NO;",4725],["// Return NO if you do not want the item to be re-orderable.",4677],["// self.clearsSelectionOnViewWillAppear = NO;",3715],["BOOL result = NO;",3359],["self.automaticallyAdjustsScrollViewInsets = NO;",3134],["result = NO;",3081]],"useCount":1069066},{"word":"NOT","context":[["NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",502],["// DO NOT CHANGE!",502],["//  Generated by the J2ObjC translator.  DO NOT EDIT!",7237],["% End initialization code - DO NOT EDIT",2519],["% Begin initialization code - DO NOT EDIT",2506],["// note: this method is only for internal use, DO NOT CHANGE!",886],["// DO NOT EDIT. This file is machine-generated and constantly overwritten.",781],["// DO NOT MODIFY!! Modifications will be overwritten.",633],["//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED",618],["// Generated by the protocol buffer compiler.  DO NOT EDIT!",512]],"useCount":30402},{"word":"NSApp","context":[["[NSApp activateIgnoringOtherApps:YES];",1663],["[NSApp run];",784],["[NSApp stopModal];",713],["[NSApp terminate:self];",575],["[NSApp terminate:nil];",547],["[NSApp sendEvent:event];",537],["[NSApp activateIgnoringOtherApps:YES];",486],["[[NSApp mainMenu] addItem:menuItem];",442],["[NSApp presentError:error];",322],["[NSApp stopModal];",307]],"useCount":41568},{"word":"NSArray","context":[["[tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];",973],["[NSArray arrayWithObjects:",1000],["NSArray * bridges = [KrollBridge krollBridgesUsingProxy:self];",1090],["NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);",1204],["return [NSArray arrayWithObjects:",1374],["NSArray *pathParams = @[",1672],["return [NSArray array];",1717],["#import <Foundation/NSArray.h>",1923],["for (NSArray* buttonPage in buttons)",3286],["NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);",4638]],"useCount":349171},{"word":"NSAssert","context":[["NSAssert((readStream != NULL && writeStream != NULL), @\"Read/Write stream is null\");",440],["NSAssert(term != nil, @\"This method does not apply to non-term reads\");",479],["NSAssert(![self isOnInternalLoggerQueue], @\"MUST access ivar directly, NOT via self.* syntax.\");",502],["NSAssert( child != nil, @\"Argument must be non-nil\");",369],["NSAssert(dispatch_get_specific(IsOnSocketQueueOrTargetQueueKey), @\"Must be dispatched on socketQueue\");",1703],["NSAssert(![self isOnGlobalLoggingQueue], @\"Core architecture requirement failure\");",1000],["NSAssert(descriptor == nil, @\"Startup recursed!\");",821],["NSAssert(dispatch_get_specific(xmppQueueTag), @\"Invoked on incorrect queue\");",818],["NSAssert(dispatch_get_current_queue() == socketQueue, @\"Must be dispatched on socketQueue\");",622],["NSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");",508]],"useCount":53176},{"word":"NSAutoreleasePool","context":[["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",2418],["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",8604],["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",8604],["NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];",3006],["NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];",3006],["NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];",2798],["NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];",2798],["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",2418],["pool = [[NSAutoreleasePool alloc] init];",1583],["NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];",1272]],"useCount":61061},{"word":"NSBundle","context":[["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",3313],["- (id)initWithNibName:(NSString*)nibNameOrNil bundle:(NSBundle*)nibBundleOrNil",688],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",763],["//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];",898],["NSBundle *bundle = [NSBundle mainBundle];",979],["NSBundle *bundle = [NSBundle mainBundle];",979],["NSBundle *bundle = [NSBundle bundleForClass:[self class]];",1434],["NSBundle *bundle = [NSBundle bundleForClass:[self class]];",1434],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",647],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767]],"useCount":68446},{"word":"NSCalendar","context":[["NSCalendar *calendar = [NSCalendar currentCalendar];",3719],["NSCalendar *calendar = [NSCalendar currentCalendar];",3719],["NSCalendar *gregorian = [[NSCalendar alloc]",586],["NSCalendar *gregorian = [[NSCalendar alloc]",586],["NSCalendar *cal = [NSCalendar currentCalendar];",572],["NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];",565],["NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];",565],["NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];",525],["NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];",525],["NSCalendar *cal = [NSCalendar currentCalendar];",572]],"useCount":27563},{"word":"NSCoder","context":[["- (void)encodeWithCoder:(NSCoder *)aCoder",2108],["- (void) encodeWithCoder: (NSCoder *) encoder",1920],["- (id) initWithCoder: (NSCoder *) decoder",1930],["- (instancetype)initWithCoder:(NSCoder *)aDecoder",2009],["- (instancetype)initWithCoder:(NSCoder *)aDecoder {",2977],["- (void)encodeWithCoder:(NSCoder *)aCoder {",3058],["- (id)initWithCoder:(NSCoder *)decoder {",3109],["- (void)encodeWithCoder:(NSCoder *)coder {",3407],["- (id)initWithCoder:(NSCoder *)aDecoder {",4319],["- (id)initWithCoder:(NSCoder *)aDecoder",5290]],"useCount":59710},{"word":"NSColor","context":[["[[NSColor whiteColor] set];",710],["NSColor *color;",364],["#import <AppKit/NSColor.h>",307],["[[NSColor whiteColor] setFill];",302],["[[NSColor whiteColor] set];",301],["[[NSColor blackColor] setStroke];",285],["[[NSColor clearColor] set];",271],["#import \"NSColor+iTerm.h\"",257],["[[NSColor redColor] set];",256],["[[NSColor blackColor] set];",772]],"useCount":40516},{"word":"NSData","context":[["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {",1197],["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data",1182],["NSData *data = [NSData dataWithContentsOfFile:path];",865],["NSData *data = [NSData dataWithContentsOfFile:path];",865],["#import <Foundation/NSData.h>",852],["NSData *data = [NSData dataWithContentsOfURL:url];",728],["NSData *data = [NSData dataWithContentsOfURL:url];",728],["NSData *data;",1306],["NSData *data = nil;",2029],["data:(NSData *)data",2799]],"useCount":169750},{"word":"NSDate","context":[["NSDate *now = [NSDate date];",2671],["[[NSRunLoop mainRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];",1246],["NSDate *date = [NSDate date];",1395],["NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];",1334],["NSDate *date = [NSDate date];",1395],["NSDate *date = [NSDate dateWithTimeIntervalSinceNow:TIMEOUT_SECONDS];",1224],["NSDate *date = [NSDate dateWithTimeIntervalSinceNow:TIMEOUT_SECONDS];",1224],["[[NSRunLoop mainRunLoop] runMode:NSRunLoopCommonModes beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];",1219],["NSDate *now = [NSDate date];",2671],["NSDate *newDate = [NSDate dateWithTimeIntervalSinceReferenceDate:aTimeInterval];",1334]],"useCount":129256},{"word":"NSDateFormatter","context":[["NSDateFormatter *df = [[NSDateFormatter alloc] init];",797],["NSDateFormatter *df = [[NSDateFormatter alloc] init];",797],["formatter = [[NSDateFormatter alloc] init];",776],["NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];",4741],["NSDateFormatter *formatter = [[NSDateFormatter alloc] init];",3723],["NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];",4741],["NSDateFormatter *formatter = [[NSDateFormatter alloc] init];",3723],["NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];",1128],["NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];",1128],["dateFormatter = [[NSDateFormatter alloc] init];",1348]],"useCount":50829},{"word":"NSDictionary","context":[["if ([value isKindOfClass:[NSDictionary class]])",2268],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["+ (NSDictionary *)JSONKeyPathsByPropertyKey {",9691],["parameters:(NSDictionary *)parameters",4324],["if ([properties isKindOfClass:[NSDictionary class]])",3389],["[NSDictionary dictionaryWithObjectsAndKeys:",3270],["return [NSDictionary dictionaryWithObjectsAndKeys:",2850],["+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {",2629],["NSDictionary<NSString *, Class> *map = @{",2625],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090]],"useCount":451953},{"word":"NSError","context":[["NSError *error = nil;",48410],["NSError* error;",4384],["} errorBlock:^(NSError *error) {",4783],["errorBlock:(void(^)(NSError *error))errorBlock {",4894],["NSError *err = nil;",5189],["NSError* error = nil;",5751],["} failure:^(NSError *error) {",9441],["} failure:^(AFHTTPRequestOperation *operation, NSError *error) {",10214],["NSError *error;",24379],["} failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {",3549]],"useCount":355088},{"word":"NSEvent","context":[["- (void)mouseDown:(NSEvent *)theEvent",899],["- (void)mouseDragged:(NSEvent *)theEvent",530],["- (void)mouseUp:(NSEvent *)theEvent",524],["- (void)mouseDown:(NSEvent *)theEvent {",454],["- (void)keyDown:(NSEvent *)theEvent",443],["- (void)mouseDown:(NSEvent*)event {",334],["- (void)mouseExited:(NSEvent *)theEvent",321],["- (void)mouseExited:(NSEvent*)theEvent {",320],["- (void)mouseExited:(NSEvent *)theEvent {",289],["- (void)mouseMoved:(NSEvent *)theEvent",287]],"useCount":54375},{"word":"NSException","context":[["@catch (NSException * e)",2038],["@catch (NSException * e) {",1533],["@catch (NSException *e) {",1719],["@throw [NSException exceptionWithName:NSInternalInconsistencyException",1847],["@catch (NSException * e)",1981],["[NSException raise: NSInternalInconsistencyException",2029],["} @catch (NSException *exception) {",2193],["[NSException raise: NSInvalidArgumentException",3924],["@catch(NSException * ex)",6704],["@catch (NSException *exception) {",9894]],"useCount":79453},{"word":"NSFileManager","context":[["[[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]",698],["NSFileManager *manager = [NSFileManager defaultManager];",957],["NSFileManager *manager = [NSFileManager defaultManager];",957],["NSFileManager* fm = [NSFileManager defaultManager];",1496],["NSFileManager* fm = [NSFileManager defaultManager];",1496],["return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];",2322],["NSFileManager *fm = [NSFileManager defaultManager];",3754],["NSFileManager *fm = [NSFileManager defaultManager];",3754],["NSFileManager *fileManager = [NSFileManager defaultManager];",7295],["NSFileManager *fileManager = [NSFileManager defaultManager];",7295]],"useCount":72761},{"word":"NSIndexPath","context":[["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath",11931],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{",2598],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {",8876],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath",6381],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {",4624],["- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {",3980],["- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath",3163],["- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {",3012]],"useCount":164607},{"word":"NSInteger","context":[["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView",11573],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {",11511],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{",2759],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{",2759],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section",2365],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section",2365],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976]],"useCount":367066},{"word":"NSLocalizedString","context":[["cancelButtonTitle:NSLocalizedString(@\"Cancel\", nil)",412],["cancelButtonTitle:NSLocalizedString(@\"ok\", nil) otherButtonTitles:nil] show];",235],["cancelButtonTitle:NSLocalizedString(@\"Continue\", nil)",241],["cancelButtonTitle:NSLocalizedString(@\"OK\", @\"\")",214],["delegate:nil cancelButtonTitle:NSLocalizedString(@\"ok\", nil) otherButtonTitles:nil] show];",202],["barButtonItem.title = NSLocalizedString(@\"Master\", @\"Master\");",192],["result = NSLocalizedString(@\"Delete\",@\"Table View Delete Confirm\");",187],["cancelButtonTitle:NSLocalizedString(@\"Continue\",nil)",305],["cancelButtonTitle:NSLocalizedString(@\"OK\", @\"OK\")",178],["cancelButtonTitle:NSLocalizedString(@\"OK\", nil)",542]],"useCount":29979},{"word":"NSLog","context":[["NSLog(@\"%@\", error);",2865],["NSLog(@\"%@\",error);",1572],["NSLog(@\"%s\",__func__);",692],["NSLog(@\"DB Query: %@\", sql);",750],["NSLog(@\"Timeout Error: %@\", error);",831],["NSLog(@\"%s\", __PRETTY_FUNCTION__);",996],["NSLog(@\"Running %@ '%@'\", self.class, NSStringFromSelector(_cmd));",1085],["NSLog(@\"%s\", __FUNCTION__);",1569],["NSLog(@\"Error: %@\", error);",2185],["NSLog(@\"Unresolved error %@, %@\", error, [error userInfo]);",5778]],"useCount":180718},{"word":"NSMakeRange","context":[["return NSMakeRange(NSNotFound, 0);",322],["NSData* encodedString = [[string substringWithRange:NSMakeRange(srcPosition, length)] dataUsingEncoding:encoding];",415],["[data replaceBytesInRange:NSMakeRange(offset+length,[data length]-(offset+length)) withBytes:(currentBytes+offset)];",238],["NSData* subdata = [[buffer data] subdataWithRange:NSMakeRange(offset, length)];",243],["NSRange range = NSMakeRange((NSUInteger)_phaseReadOffset, MIN([data length] - ((NSUInteger)_phaseReadOffset), length));",243],["self.acceptableStatusCodes = [NSIndexSet indexSetWithIndexesInRange:NSMakeRange(200, 100)];",280],["NSMakeRange(offsetArg, MIN(countArg, dataLength-offsetArg))",352],["return NSMakeRange(0, 0);",355],["NSRange range = [relativeString rangeOfString:@\"/\" options:0 range:NSMakeRange(7, [relativeString length]-7)];",415],["return NSMakeRange(NSNotFound, 0);",737]],"useCount":41479},{"word":"NSMenuItem","context":[["[menu addItem:[NSMenuItem separatorItem]];",362],["[theMenu addItem:[NSMenuItem separatorItem]];",320],["NSMenuItem *menuItem = (NSMenuItem *)item;",341],["NSMenuItem *menuItem = (NSMenuItem *)item;",341],["[menu addItem:[NSMenuItem separatorItem]];",904],["NSMenuItem *menuItem;",720],["- (BOOL)validateMenuItem:(NSMenuItem *)menuItem",604],["o_mi = [[NSMenuItem alloc] initWithTitle:                               \\",525],["[appleMenu addItem:[NSMenuItem separatorItem]];",509],["NSMenuItem *item;",470]],"useCount":28307},{"word":"NSMutableArray","context":[["NSMutableArray *array = [[NSMutableArray alloc] init];",1099],["NSMutableArray *array = [[NSMutableArray alloc] init];",1099],["NSMutableArray *items = [NSMutableArray array];",1289],["NSMutableArray *items = [NSMutableArray array];",1289],["NSMutableArray *fields = [[NSMutableArray alloc] init];",1354],["NSMutableArray *fields = [[NSMutableArray alloc] init];",1354],["NSMutableArray *result = [NSMutableArray array];",2290],["NSMutableArray *result = [NSMutableArray array];",2290],["NSMutableArray *array = [NSMutableArray array];",2695],["NSMutableArray *array = [NSMutableArray array];",2695]],"useCount":289107},{"word":"NSMutableData","context":[["- (id)initWithData:(NSMutableData *)d",352],["NSMutableData *data = [NSMutableData data];",825],["NSMutableData *data = [NSMutableData data];",825],["buffer:(NSMutableData *)buffer",764],["[tempBuffer setData:[NSMutableData dataWithData:data]];",486],["NSMutableData *data = [[NSMutableData alloc] init];",450],["NSMutableData *data = [[NSMutableData alloc] init];",450],["NSMutableData *body = [NSMutableData data];",366],["[tempBuffer setData:[NSMutableData dataWithBytesNoCopy:bytes length:subdataRange.length freeWhenDone:YES]];",472],["NSMutableData *body = [NSMutableData data];",366]],"useCount":35011},{"word":"NSMutableDictionary","context":[["NSMutableDictionary *md = [NSMutableDictionary dictionary];",2973],["NSMutableDictionary *params = [NSMutableDictionary dictionary];",2047],["NSMutableDictionary *params = [NSMutableDictionary dictionary];",2047],["NSMutableDictionary *event = [NSMutableDictionary dictionary];",1518],["NSMutableDictionary *md = [NSMutableDictionary dictionary];",2973],["NSMutableDictionary *event = [NSMutableDictionary dictionary];",1518],["NSMutableDictionary *parameters = [NSMutableDictionary dictionary];",1393],["NSMutableDictionary *parameters = [NSMutableDictionary dictionary];",1393],["NSMutableDictionary *dict = [NSMutableDictionary dictionary];",3887],["NSMutableDictionary *dict = [NSMutableDictionary dictionary];",3887]],"useCount":225999},{"word":"NSMutableString","context":[["NSMutableString *string = [NSMutableString string];",689],["NSMutableString *errorDescription = [[NSMutableString alloc] initWithString:@\"You are missing required params: \"];",618],["NSMutableString *html = [[[NSMutableString alloc] init] autorelease];",455],["NSMutableString *errorDescription = [[NSMutableString alloc] initWithString:@\"You are missing required params: \"];",618],["NSMutableString *result = [NSMutableString string];",1005],["NSMutableString *result = [NSMutableString string];",1005],["- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {",1081],["NSMutableString *buffer = [[NSMutableString alloc] initWithCapacity:256];",1811],["NSMutableString *buffer = [[NSMutableString alloc] initWithCapacity:256];",1811],["NSMutableString *string = [NSMutableString string];",689]],"useCount":66151},{"word":"NSMutableURLRequest","context":[["- (NSMutableURLRequest *)requestWithMethod:(NSString *)method",786],["NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];",618],["NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];",620],["NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];",618],["NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];",620],["NSMutableURLRequest *mutableRequest = [request mutableCopy];",796],["NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:uri];",1125],["NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:uri];",1125],["NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];",2229],["NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];",2229]],"useCount":29309},{"word":"NSNotFound","context":[["if (index == NSNotFound) {",948],["if (itemIndex != NSNotFound)",898],["if (range.location == NSNotFound) {",889],["if (range.location!=NSNotFound)",2075],["if (range.location != NSNotFound) {",2089],["return NSNotFound;",3343],["return NSNotFound;",799],["return NSMakeRange(NSNotFound, 0);",737],["if (range.location != NSNotFound)",1451],["if (index != NSNotFound) {",1299]],"useCount":56548},{"word":"NSNotification","context":[["NSNotification *notification = [NSNotification notificationWithName:kTiContextShutdownNotification object:self];",488],["NSNotification *notification = [NSNotification notificationWithName:kTiContextShutdownNotification object:self];",488],["- (void)applicationDidFinishLaunching:(NSNotification *)aNotification",2219],["- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {",1459],["-(void)didReceiveMemoryWarning:(NSNotification*)notification",1105],["usingBlock:^(NSNotification *note) {",1061],["- (void)applicationWillTerminate:(NSNotification *)aNotification {",862],["- (void)windowWillClose:(NSNotification*)notification {",768],["- (void)keyboardWillShow:(NSNotification *)notification",555],["queue:nil usingBlock:^(NSNotification *note) {",501]],"useCount":67739},{"word":"NSNotificationCenter","context":[["[[NSNotificationCenter defaultCenter] addObserver: self",1989],["[[NSNotificationCenter defaultCenter] addObserver:self",25124],["NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];",2489],["NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];",2489],["[[NSNotificationCenter defaultCenter] removeObserver:self];",2688],["[[NSNotificationCenter defaultCenter]",3997],["WARN_IF_BACKGROUND_THREAD_OBJ;\t//NSNotificationCenter is not threadsafe!",4031],["[[NSNotificationCenter defaultCenter] removeObserver:self];",20165],["[[NSNotificationCenter defaultCenter]",5702],["[[NSNotificationCenter defaultCenter] removeObserver:self",5167]],"useCount":135294},{"word":"NSNull","context":[["if (value == [NSNull null])",1364],["return [NSNull null];",4113],["if (thisValue == [NSNull null])",900],["if (value == nil || value == [NSNull null])",855],["value = [NSNull null];",540],["[args addObject:[NSNull null]];",582],["else if (value == [NSNull null])",518],["NSNull * nullObject = [NSNull null];",450],["NSNull * nullObject = [NSNull null];",450],["if (current==[NSNull null])",450]],"useCount":42211},{"word":"NSNumber","context":[["} reverseBlock:^NSString *(NSNumber *value) {",2217],["return [AWSMTLValueTransformer reversibleTransformerWithForwardBlock:^NSNumber *(NSString *value) {",1112],["return [MTLValueTransformer reversibleTransformerWithForwardBlock:^NSNumber *(NSString *value) {",1105],["includeEntities:(NSNumber *)includeEntities",997],["return [NSNumber numberWithFloat:f];",865],["return [NSNumber numberWithInt:i];",844],["return [NSNumber numberWithDouble:d];",839],["return [NSNumber numberWithChar:c];",822],["return [NSNumber numberWithLong:l];",821],["[delegate launcherView:self didChangePage:[NSNumber numberWithInteger:pager.currentPage]];",744]],"useCount":206934},{"word":"NSObject","context":[["NSObject *nsobj0 = (NSObject *) p0;",600],["[NSObject cancelPreviousPerformRequestsWithTarget:self];",531],["[NSObject cancelPreviousPerformRequestsWithTarget:self];",2249],["#pragma mark NSObject",1273],["ENSURE_SINGLE_ARG(args,NSObject);",927],["ENSURE_ARG_OR_NIL_AT_INDEX(length, args, 2, NSObject);",706],["ENSURE_ARG_OR_NIL_AT_INDEX(offset, args, 1, NSObject);",706],["[NSObject cancelPreviousPerformRequestsWithTarget:self",634],["NSObject *nsobj0 = (NSObject *) p0;",600],["#pragma mark - NSObject",2420]],"useCount":74025},{"word":"NSParameterAssert","context":[["NSParameterAssert(name);",1908],["NSParameterAssert((objects != NULL) && (count <= capacity));",591],["NSParameterAssert(url);",592],["NSParameterAssert(block != nil);",621],["NSParameterAssert(method);",625],["NSParameterAssert(mimeType);",740],["NSParameterAssert(request);",773],["NSParameterAssert(block);",782],["NSParameterAssert(fileName);",912],["NSParameterAssert(moc_);",1477]],"useCount":36882},{"word":"NSPoint","context":[["to:(NSPoint)point",246],["NSPoint p;",403],["NSPoint point;",431],["attachedToPoint:(NSPoint)point",177],["atPoint:(NSPoint)point {",190],["- (NSView*)hitTest:(NSPoint)aPoint {",197],["NSPoint loc = [event locationInWindow];",236],["NSPoint pt;",209],["- (id)accessibilityHitTest:(NSPoint)point {",207],["NSPoint clickPoint = [self clickPoint:event allowRightMarginOverflow:NO];",198]],"useCount":33955},{"word":"NSRange","context":[["NSRange range = [cacheControl rangeOfString:@\"max-age=0\"];",449],["NSRange range;",2859],["NSRange range = [urlstring rangeOfString:resourceurl];",418],["NSRange setRange = [string rangeOfCharacterFromSet:characterSet];",418],["withRange:(NSRange)range",433],["NSRange r;",557],["NSRange range;",479],["- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text",438],["NSRange range = [name rangeOfString:@\"create\"];",445],["NSRange range = [content rangeOfString:@\"<html\"];",451]],"useCount":54173},{"word":"NSRect","context":[["NSRect frame = [self frame];",673],["- (id)initWithFrame:(NSRect)frame",1351],["NSRect rect;",1247],["- (void)drawRect:(NSRect)dirtyRect",1236],["NSRect frame;",1225],["- (void)drawRect:(NSRect)rect",1198],["- (void)drawRect:(NSRect)dirtyRect {",1073],["NSRect bounds = [self bounds];",876],["NSRect buttonFrame = [button frame];",735],["- (id)initWithFrame:(NSRect)frame {",705]],"useCount":99714},{"word":"NSSet","context":[["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {",908],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event",3008],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event",2060],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {",1797],["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event",1654],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {",1393],["- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event",1274],["- (void)touchesMoved:(NSSet*)touches withEvent:(UIEvent *)event",888],["- (void)touchesEnded:(NSSet*)touches withEvent:(UIEvent *)event",887],["NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];",809]],"useCount":50775},{"word":"NSString","context":[["-(NSString *)description",2695],["static NSString *CellIdentifier = @\"Cell\";",4294],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767],["- (NSString *)description {",10314],["- (NSString *)description",8441],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",4471],["if ([value isKindOfClass:[NSString class]])",3488],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",3313],["NSString *documentsDirectory = [paths objectAtIndex:0];",2792],["- (NSString *) description {",2743]],"useCount":1647071},{"word":"NSStringFromClass","context":[["return NSStringFromClass([self class]);",936],["return [[[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self) owner:nil options:nil] lastObject];",250],["NSString *className = NSStringFromClass(operationClass);",279],["NSString *className = NSStringFromClass([self class]);",309],["cn = NSStringFromClass([self class]);",327],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["return NSStringFromClass(self);",372],["NSStringFromClass([self class]), NSStringFromSelector(_cmd)];",554],["NSStringFromClass([self class]),",895],["self.restorationIdentifier = NSStringFromClass([self class]);",191]],"useCount":48791},{"word":"NSStringFromSelector","context":[["reason:[NSString stringWithFormat:@\"You must override %@ in a subclass\", NSStringFromSelector(_cmd)]",402],["GTL_DEBUG_ASSERT(object != nil, @\"%@ got a nil object\", NSStringFromSelector(_cmd));",1272],["name:NSStringFromSelector(_cmd)",1171],["NSLog(@\"Running %@ '%@'\", self.class, NSStringFromSelector(_cmd));",1085],["NSStringFromClass([self class]), NSStringFromSelector(_cmd)];",554],["return [self tasksForKeyPath:NSStringFromSelector(_cmd)];",508],["return [NSString stringWithFormat:@\"%@->%@ [%d]\",target,NSStringFromSelector(selector),(int)type];",450],["NSStringFromSelector(_cmd),",439],["NSLog(@\"%@\", NSStringFromSelector(_cmd));",423],["NSString *databasePath = [self databasePath:NSStringFromSelector(_cmd)];",373]],"useCount":31559},{"word":"NSThread","context":[["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-14);",3050],["if ([NSThread isMainThread])",1885],["if ([NSThread isMainThread]) {",1822],["if (![NSThread isMainThread]) {",3375],["socketThread = [NSThread currentThread];",589],["BOOL isMainThread = [NSThread isMainThread];",644],["if ([NSThread currentThread] != socketThread) {",972],["DCHECK([NSThread isMainThread]);",992],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-16);",1156],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-15);",1352]],"useCount":43382},{"word":"NSTimeInterval","context":[["static const NSTimeInterval kLauncherViewTransitionDuration = 0.3;",443],["static const NSTimeInterval kLauncherViewWobbleTime = 0.07;",443],["duration:(NSTimeInterval)duration",949],["withTimeout:(NSTimeInterval)timeout",943],["NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];",594],["delay:(NSTimeInterval)delay",475],["- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext",467],["NSTimeInterval timeout;",461],["static const NSTimeInterval kLauncherViewFastTransitionDuration = 0.2;",443],["static const NSTimeInterval kLauncherViewSpringLoadTimeInterval = 0.5;",443]],"useCount":48474},{"word":"NSUInteger","context":[["- (NSUInteger)hash {",3509],["- (NSUInteger) hash",1085],["for (NSUInteger i = 0; i < count; i++) {",1219],["- (NSUInteger) hash {",1221],["NSUInteger count = 0;",1306],["NSUInteger index = 0;",1569],["- (NSUInteger)hash",1982],["- (NSUInteger)supportedInterfaceOrientations",2231],["NSUInteger i = 0;",2346],["NSUInteger i;",4522]],"useCount":260755},{"word":"NSURL","context":[["NSURL *url = [NSURL URLWithString:urlString];",1976],["NSURL *url = [NSURL URLWithString:urlString];",1976],["return [NSURL fileURLWithPath:testpath];",1869],["NSURL *jsCodeLocation;",1495],["- (NSURL *)applicationDocumentsDirectory {",1406],["- (NSURL *)applicationDocumentsDirectory",899],["-(NSURL*)url",837],["NSURL *url_ = [path hasPrefix:@\"file:\"] ? [NSURL URLWithString:path] : [NSURL fileURLWithPath:path];",662],["NSURL * urlAttempt = [self toURL:object proxy:proxy];",836],["jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\"];",698]],"useCount":162367},{"word":"NSURLConnection","context":[["- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {",1056],["- (void)connectionDidFinishLoading:(NSURLConnection *)connection {",1238],["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {",1197],["- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {",1187],["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data",1182],["- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error",1102],["- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response",998],["- (void)connection:(NSURLConnection *)connection",837],["- (void)connection:(NSURLConnection __unused *)connection",663],["- (void)connectionDidFinishLoading:(NSURLConnection *)connection",1329]],"useCount":29548},{"word":"NSURLRequest","context":[["[OHHTTPStubs stubRequestsPassingTest:^BOOL(NSURLRequest *request) {",1185],["} withStubResponse:^OHHTTPStubsResponse *(NSURLRequest *request) {",1082],["- (NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request",526],["- (NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request",526],["} withStubResponse:^OHHTTPStubsResponse*(NSURLRequest *request) {",420],["NSURLRequest *request = [NSURLRequest requestWithURL:URL];",378],["NSURLRequest *request = [NSURLRequest requestWithURL:URL];",378],["NSURLRequest *request = [NSURLRequest requestWithURL:url];",1556],["} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {",364],["NSURLRequest *request = [NSURLRequest requestWithURL:url];",1556]],"useCount":39045},{"word":"NSUTF8StringEncoding","context":[["NSString *code = [NSString stringWithContentsOfURL:url_ encoding:NSUTF8StringEncoding error:nil];",451],["encoding:NSUTF8StringEncoding];",2698],["encoding:NSUTF8StringEncoding",2343],["encoding:NSUTF8StringEncoding] autorelease];",782],["NSStringEncoding encoding = NSUTF8StringEncoding;",658],["self.stringEncoding = NSUTF8StringEncoding;",596],["encoding = NSUTF8StringEncoding;",568],["return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];",544],["encoding: NSUTF8StringEncoding];",495],["NSString *string = [[[NSString alloc] initWithData:theData encoding:NSUTF8StringEncoding] autorelease];",451]],"useCount":63192},{"word":"NSUserDefaults","context":[["NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];",921],["NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];",1257],["NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];",1257],["NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];",3224],["NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];",1208],["NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];",3224],["NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];",1208],["[[NSUserDefaults standardUserDefaults] synchronize];",10106],["NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];",10882],["NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];",10882]],"useCount":83763},{"word":"NSView","context":[["withView: (NSView *)o_parent_view",320],["inView:(NSView*)controlView {",282],["NSView* view;",262],["[[NSView alloc] initWithFrame:NSZeroRect]);",230],["- (void)drawWithFrame:(NSRect)cellFrame inView:(NSView *)controlView",198],["- (NSView*)hitTest:(NSPoint)aPoint {",197],["- (void)drawInteriorWithFrame:(NSRect)cellFrame inView:(NSView *)controlView",188],["NSView *view = FRAME_NS_VIEW (f);",402],["NSView *view;",397],["NSView* contentView = [[self window] contentView];",283]],"useCount":47322},{"word":"NSWindow","context":[["#import <AppKit/NSWindow.h>",286],["NSWindow* window = [self window];",1268],["NSWindow* window = [view window];",248],["NSWindow *window = [self window];",583],["- (id)initWithWindow:(NSWindow *)window",475],["@property (weak) IBOutlet NSWindow *window;",434],["NSWindow* window = test_window();",374],["NSWindow *window = [self window];",330],["- (id)initWithParentWindow:(NSWindow*)parentWindow",299],["NSWindow *nsWindow = OBJC(windowPtr);",247]],"useCount":33134},{"word":"NULL","context":[["return NULL;",23504],["if (error != NULL) {",2405],["error:NULL];",2759],["if (exists != NULL) *exists = NO;",2926],["NULL);",3479],["[UIView beginAnimations:nil context:NULL];",3837],["if (exists != NULL) *exists = YES;",4180],["return NULL;",6229],["NULL,",7914],["TiValueRef exception=NULL;",2170]],"useCount":555571},{"word":"No","context":[["XCTFail(@\"No implementation for \\\"%s\\\"\", __PRETTY_FUNCTION__);",9751],["W:Y]\"\" \"// \" I 'DV,DV[\"I\",$D(DE(DQ))#2 S X=\"\" W \"  (No Editing)\" Q",970],[";; ___ Yes   ___ No",888],["case 'No'",397],["%   Intergovernmental Oceanographic Commission, Manuals and Guides No. 56,",288],["// No window, so we can't display the popover...",272],["// No need to avoid resizing the buffer.",271],["@Public No",256],["// No longer send messages to this thread!",243],["*\tNo sense in doing hex when so many more characters are valid property",375]],"useCount":42315},{"word":"Note","context":[["// Note: The caller is responsible for -retaining the object that is to be added.",292],["// Note:",291],["// Note: YES means kIPv6Disabled is OFF",300],["// Note: YES means kIPv4Disabled is OFF",300],["// retaining 'self' by creating a __block access ref. Note that",334],["% Note:",537],["<b>Note</b>",607],["% Note",277],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["//Note: If url is a nonimmediate image, this returns nil.",836]],"useCount":33154},{"word":"OF","context":[["WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1172],["// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",1002],["// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",1002],["//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",875],["AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),",1687],["//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1854],["SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1986],["* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1242],["//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",875],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1263]],"useCount":31758},{"word":"OK","context":[["// ... but WWAN connections are OK if the calling application",266],["//OK",321],["cancelButtonTitle:@\"OK\"",265],["@\"OK\",",316],["otherButtonTitles:@\"OK\", nil];",394],["XCTAssertEqualObjects(output.status, @\"OK\");",451],["defaultButton:@\"OK\"",537],["cancelButtonTitle:NSLocalizedString(@\"OK\", nil)",542],["[alert addButtonWithTitle:@\"OK\"];",677],["cancelButtonTitle:@\"OK\"",5502]],"useCount":28147},{"word":"OR","context":[["SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1986],["SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1986],["* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1242],["SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1986],["//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",1854],["OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.",1687],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1263],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1263],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1263],["* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS",1258]],"useCount":49769},{"word":"Output","context":[["% Output:",7094],["%   Output:",596],["% Output fields:",692],["%   Output parameters:",720],[";Output:",749],["; Output:",1052],["% ## Output",2210],["% Output",2336],["%% Output",596],[";  Output:",560]],"useCount":27604},{"word":"Override","context":[["// Override to support editing the table view.",4698],["#pragma mark Override",283],["// The designated initializer. Override to perform setup that is required before the view is loaded.",283],["// Override point for customization after application launch.",367],["#pragma mark - Override",503],["// Override to allow orientations other than the default portrait orientation.",1620],["// Override to support conditional editing of the table view.",4691],["// Override to support conditional rearranging of the table view.",4695],["// Override to support rearranging the table view.",4696],["// Override point for customization after application launch.",31855]],"useCount":60975},{"word":"P","context":[["D P Q:EX=U",1858],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980],["I X=\" \",DV[\"d\",DV'[\"P\",$D(^DISV(DUZ,\"DIE\",DLB)) S X=^(DLB) I DV'[\"D\",DV'[\"S\" W \"  \"_X",980],["D S D=DIFLD,DQ(DQ)=DLB_U_DV_U_DU_U_DW_U_$P($T(@(\"X\"_DQ)),\" \",2,99) Q",980],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["X:DG[\"D\" ^DD(\"DD\") I DG[\"S\" S %=$P($P(\";\"_X,\";\"_Y_\":\",2),\";\") S:%]\"\" Y=%",970],["X:DG[\"D\" ^DD(\"DD\") I DG[\"S\" S %=$P($P(\";\"_X,\";\"_Y_\":\",2),\";\") S:%]\"\" Y=%",970],["S X=$P($G(DIKZ(0)),U,1)",897],[".P",3601]],"useCount":74456},{"word":"Pass","context":[["XCTAssert(YES, @\"Pass\");",10102],["// Pass any index, all we're interested in is the Y",173],["//Pass the items with OCFileDto to FileDto Array",75],["// Pass 1.0 to force exact pixel size.",70],["/* 2 Pass Encoding */",68],["// appears after a delay.) Pass null to remove the tooltip.",57],["// Pass the selected object to the new view controller.",20206],["// Pass the selected object to the new view controller.",88],["//TIMOB-11998. minimumParentHeightForSize:CGSize will limit width anyways. Pass bounding width here",112],["center_->AddNotification(notification.Pass());",155]],"useCount":33820},{"word":"Private","context":[["#pragma mark - Private Method",573],["#import \"OpenFeint+Private.h\"",477],["Begin[\"`Private`\"];",575],["#pragma mark Private methods",1026],["#pragma mark Private Methods",1738],["#pragma mark - Private methods",2729],["#pragma mark Private API",421],["#pragma mark Private",2755],["#pragma mark - Private Methods",3849],["#pragma mark - Private",7457]],"useCount":46935},{"word":"Public","context":[["#pragma mark - Public Methods",2659],["#pragma mark Public",1970],["#pragma mark - Public methods",1884],["#pragma mark Public APIs",2985],["#pragma mark - Public",3533],["#pragma mark - Public API",891],["#pragma mark Public Methods",1145],["#pragma mark Public API : Functions",951],["//  This Source Code Form is subject to the terms of the Mozilla Public",951],["#pragma mark Public API : Properties",717]],"useCount":30089},{"word":"Put","context":[["% Put some labels",139],["/* Put menu into the menubar */",408],["#pragma mark Put Operations",408],["// Put setup code here; it will be run once, before the first test case.",479],["// TODO: Put this in the write()/read() wrappers when they're being called consistently, blah blah blah",486],["// Put teardown code here; it will be run once, after the last test case.",574],["// Put the code you want to measure the time of here.",15555],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put teardown code here. This method is called after the invocation of each test method in the class.",103]],"useCount":87379},{"word":"Q","context":[["Q 0",3985],["Q 1",5490],[".Q",5728],[".\tQ",6498],["Q Q",7240],["Q Q",7240],[". Q",11117],["Q",209657],["Q X",2647],["Q Y",2578]],"useCount":378521},{"word":"QuartzCore","context":[["#import <QuartzCore/QuartzCore.h>",13692],["#import <QuartzCore/QuartzCore.h>",13692],["#import <QuartzCore/QuartzCore.h>",1487],["#import <QuartzCore/QuartzCore.h>",1487],["@import QuartzCore;",296],["#import <QuartzCore/CALayer.h>",157],["#import \"QuartzCore/QuartzCore.h\"",149],["#import \"QuartzCore/QuartzCore.h\"",149],["#include <QuartzCore/QuartzCore.h>",127],["#include <QuartzCore/QuartzCore.h>",127]],"useCount":32772},{"word":"R","context":[["jobnr. mode duration  R 1  R 2  N 1  N 2",7267],["R 1  R 2  N 1  N 2",7267],["R 1  R 2  N 1  N 2",7267],["jobnr. mode duration  R 1  R 2  N 1  N 2",7267],["S VALMBCK=\"R\"",1414],["%   Author(s): R. Losada",1263],["Y I '$D(DE(DQ)) D O G RD:\"@\"'[X,A:DV'[\"R\"&(X=\"@\"),X:X=\"@\" S X=Y G N",980],["TR R X:DTIME E  S (DTOUT,X)=U W $C(7)",970],["N I X=\"\" G NKEY:$D(^DD(\"KEY\",\"F\",DP,DIFLD)),A:DV'[\"R\",X:'DV,X:D'>0,A",810],["- renewable                 :  2   R",8974]],"useCount":112289},{"word":"RELEASE_TO_NIL","context":[["RELEASE_TO_NIL(recentlyResizedImage);",1191],["RELEASE_TO_NIL(lastHitName);",1044],["RELEASE_TO_NIL(lastValidLoad);",1123],["RELEASE_TO_NIL(stretchableImage);",1191],["RELEASE_TO_NIL(data);",1272],["RELEASE_TO_NIL(keyboardTiView);",1324],["RELEASE_TO_NIL(host);",1352],["RELEASE_TO_NIL(basicCredentials);",1353],["RELEASE_TO_NIL(timer);",2004],["RELEASE_TO_NIL(url);",3694]],"useCount":90149},{"word":"RationalField","context":[["[ RationalField() | 0, 0, 0, 0, 0, 0, 0, 0 ],",8104],["[ RationalField() | 0, 0 ],",17428],["[ RationalField() | 1, 0 ],",3589],["[ RationalField() | -1, 0 ],",3068],["[ RationalField() | 1, 0, 0, 0, 0, 0, 0, 0 ],",2975],["[ RationalField() | -1, 0, 0, 0, 0, 0, 0, 0 ],",2459],["[ RationalField() | 0, 0, 0, 0 ],",1876],["[ RationalField() | 2, 0 ],",1549],["[ RationalField() | 0, 1 ],",1408],["[ RationalField() | -2, 0 ],",1353]],"useCount":99829},{"word":"Return","context":[["// Return the number of rows in the section.",4535],["// Return the number of sections.",4606],["// Return NO if you do not want the specified item to be editable.",5341],["// Return NO if you do not want the item to be re-orderable.",4677],["// TODO: Return UIBarStyleBlack for the appropriate colors once Apple fixes how the 'cancel' button",418],["// TODO: Return nil for the appropriate colors once Apple fixes how the 'cancel' button",418],["% Return values:",572],["Return[result];",622],["; Return Values:",1113],["// Return YES for supported orientations",4340]],"useCount":45465},{"word":"Returns","context":[["/// Returns:",5130],["% Returns",2321],["% Returns:",1566],["// Returns the managed object context for the application.",698],["%\t Returns:",1555],["// Returns the managed object model for the application.",706],["// Returns the persistent store coordinator for the application.",697],["//  Returns:",619],["// Returns:",614],["// Returns the URL to the application's Documents directory.",749]],"useCount":43520},{"word":"S","context":[["N ER S ER=0",1117],["S X=DG(DQ),DIC=DIE",6482],["S X=$G(X(1))",1763],["S Y=X",1487],["S VALMBCK=\"R\"",1414],["N RM S RM=\"\"",1084],["S X=DE(1),DIC=DIE",997],["A K DQ(DQ) S DQ=DQ+1",983],["S X=\"?BAD\"",983],["QS S DZ=X D D,QQ^DIEQ G B",980]],"useCount":271695},{"word":"SEL","context":[["SEL selector;",979],["SEL sel = SetterWithObjectForKrollProperty(key);",900],["selector:(SEL)selector",677],["typedef double (*dIMP)(id, SEL, ...);",562],["typedef char (*cIMP)(id, SEL, ...);",562],["typedef float (*fIMP)(id, SEL, ...);",562],["- (BOOL)respondsToSelector:(SEL)aSelector",504],["SEL SetterWithObjectForKrollProperty(NSString * key)",450],["SEL selector = NSSelectorFromString([NSString stringWithFormat:@\"%@:withObject:\",method]);",450],["typedef long (*lIMP)(id, SEL, ...);",562]],"useCount":65541},{"word":"See","context":[["%   See also",1261],["% See also",1119],["See also applicationDidEnterBackground:.",1194],["%  See also",1600],["%      *See GUI Options on GUIDE's Tools menu.  Choose \"GUI allows only one",2092],["%\tSee also",2117],["% See also: GUIDE, GUIDATA, GUIHANDLES",2122],["% See also:",2329],["% See http://www.chebfun.org/ for Chebfun information.",4660],["%       See ISPC and COMPUTER.",11624]],"useCount":63510},{"word":"Set","context":[["// Set selected+over background: IB lack !",403],["// Set-up code here.",1664],["* Set the value of the ResponseFormat input for this Choreo.",769],["* Set the value of the AccessToken input for this Choreo.",617],["* Set the value of the APIKey input for this Choreo.",558],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527],["// Set Logging Component",504],["axis([0 2^14 -1 1]); % Set axis ranges.",484],["% Set",370],["// Set up output context.",355]],"useCount":67599},{"word":"Status","context":[["@Status Caveat",1849],["@Status Stub",13668],["@Status Interoperable",19086],["// Status bar",316],["bubble_->SetStatus(UTF8ToUTF16(\"Status\"));",304],["NSLog(@\"Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s\\n\",",234],["#import \"Status.h\"",210],["@\"status\" : @\"Status\",",180],["/** @Status Stub */",138],["// Status Bar",135]],"useCount":41707},{"word":"String","context":[["// String should be 6 or 8 characters",320],["'String','',...",330],["subreason:[NSString stringWithFormat:@\"expected TiBlob, String, TiFile, was: %@\",[arg class]]",331],["{ \"description\", \"toString\", \"Ljava.lang.String;\", 0x1, NULL, NULL },",607],["return String();",993],["\\\"shape\\\":\\\"String\\\",\\",1045],["\\\"shape\\\":\\\"String\\\", \\",1529],["vStrTrim(object,p1,p2) ; String.trim",295],["vStrRep(object,p1,p2,p3,p4,qt) ; String.replace",295],["vStrFnd(object,p1,p2,p3,qt) ; String.find",295]],"useCount":53057},{"word":"T","context":[["T = reshape(zeros(1, 4), 2, 2);",305],["[dateFormatter setDateFormat:@\"yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000\"];",836],["D:($T(ADGRU^DGRUDD01)'=\"\") ADGRU^DGRUDD01(DA)",646],["% This is the MATLAB Tensor Toolbox by T. Kolda, B. Bader, and others.",494],["for t=1:T",456],["if ([attributes hasPrefix:@\"T@\"])",437],["S IVMX=X,X=\"IVMPXFR\" X ^%ZOSF(\"TEST\") D:$T DPT^IVMPXFR S X=IVMX K IVMX",391],["%$ T = all(t);",293],["template<typename T>",367],["D S D=DIFLD,DQ(DQ)=DLB_U_DV_U_DU_U_DW_U_$P($T(@(\"X\"_DQ)),\" \",2,99) Q",980]],"useCount":48588},{"word":"TARGET_OS_IPHONE","context":[["#endif\t// #if (TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR)",1473],["#ifdef TARGET_OS_IPHONE",680],["#if TARGET_OS_IPHONE",843],["#if\tTARGET_OS_IPHONE",846],["#if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR",983],["#if (TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR)",1604],["#if TARGET_IPHONE_SIMULATOR || TARGET_OS_IPHONE",1757],["#if !TARGET_OS_IPHONE",2192],["#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)",2454],["#if TARGET_OS_IPHONE",17430]],"useCount":36800},{"word":"TODO","context":[["// TODO: Android also attempts to parse the ref... but why would the ref ever contain a query...?",488],["// TODO",1304],["//TODO: Should we remove these gracefully?",993],["//TODO",938],["//TODO: You know, we can probably nip this in the bud and do this at a lower level,",864],["//TODO: This is a temprorary workaround for the time being. We have to properly take care of [undefined] objects.",765],["// TODO:",707],["//TODO: If we have focus while this happens, we need to signal an update.",662],["* TODO: Write general description for this method",610],["% TODO",576]],"useCount":73014},{"word":"The","context":[["The initial conditions are as follows:",1186],["% The command 'cvx_where' will show where this file is located.",1182],["@return The constraint added.",973],["The species values are given as amounts of substance to make it easier to",774],["%                                       The Netherlands",713],["* The persistent store is not accessible;",702],["* The schema for the persistent store is incompatible with current managed object model.",696],["* Load from pre-bundled file on disk. The static bundle is automatically",694],["// The design of this method is taken from the DDAbstractLogger implementation.",507],["* @param response The execution response from the Temboo server",1952]],"useCount":197963},{"word":"This","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["// This is an example of a performance test case.",15613],["// This is an example of a functional test case.",15558],["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["## This file is part of Octave.",3146],["// NOTE: This file is generated from Google APIs Discovery Service.",2801],["% This function has no output args, see OutputFcn.",2180],["* completes successfully. This class in turn calls the same function on the object",1952]],"useCount":332871},{"word":"TiUtils","context":[["#import \"TiUtils.h\"",11021],["if ([TiUtils boolValue:[[self proxy] valueForKey:@\"hires\"]])",689],["if ([TiUtils isIOS8OrGreater]) {",1252],["int offsetValue = [TiUtils intValue:offset];",692],["[[TiExceptionHandler defaultExceptionHandler] reportScriptError:[TiUtils scriptErrorValue:excm]];",1225],["if ([TiUtils isRetinaDisplay]) {",957],["[TiUtils setView:child positionRect:bounds];",930],["if ([TiUtils isIOS7OrGreater]) {",810],["NSStringEncoding encoding = [TiUtils charsetToEncoding:charset];",721],["int lengthValue = [TiUtils intValue:length def:[[buffer data] length]];",692]],"useCount":105760},{"word":"TiValueRef","context":[["TiValueRef exception = NULL;",1138],["TiValueRef value = [KrollObject toValue:ctx value:result];",1142],["TiValueRef jsEventData = ConvertIdTiValue(context, eventData);",868],["TiValueRef value = [KrollObject toValue:ctx value:result];",1215],["TiValueRef exception = NULL;",1562],["TiValueRef exception=NULL;",2170],["const TiValueRef args[], TiValueRef* exception)",2310],["const TiValueRef args[], TiValueRef* exception)",2310],["const TiValueRef args[], TiValueRef* exception)",2578],["const TiValueRef args[], TiValueRef* exception)",2578]],"useCount":43701},{"word":"U","context":[["TR R X:DTIME E  S (DTOUT,X)=U W $C(7)",970],["S X=$P(DIKZ(0),U,1)",620],["S X=$P($G(DIKZ(0)),U,1)",897],["S X=$P($G(DIKZ(0)),U,2)",472],["U = [U; [",4917],["U = [U; [",4917],["D P Q:EX=U",1858],["U IO",1641],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980],["I $P(DQ(DQ),U,5)'[\"$\",X?.1\"-\".N.1\".\".N,$P(DQ(DQ),U,5,99)[\"+X'=X\" S X=+X",980]],"useCount":58890},{"word":"UI","context":[["#pragma mark - UI",707],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667],["// Use recording to get started writing UI tests.",4638],["// Update UI",298],["DCHECK_CURRENTLY_ON(web::WebThread::UI);",298],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",406],["return [[self pageContext] preloadForKey:@\"currentWindow\" name:@\"UI\"];",449],["//NOTE: this is called by ENSURE_UI_THREAD_WITH_OBJ and will always be on UI thread when we get here",450],["// on the main UI thread",483],["// UI",516]],"useCount":29837},{"word":"UIAlertView","context":[["UIAlertView *alert = [[UIAlertView alloc]",837],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex",2145],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {",1620],["UIAlertView *alert = [[UIAlertView alloc]",837],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {",625],["UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title",452],["-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex",404],["UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title",452],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex",603],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{",484]],"useCount":33281},{"word":"UIApplication","context":[["- (void)applicationWillEnterForeground:(UIApplication *)application {",20617],["- (void)applicationWillTerminate:(UIApplication *)application",17304],["- (void)applicationDidBecomeActive:(UIApplication *)application",17105],["- (void)applicationDidEnterBackground:(UIApplication *)application",16821],["- (void)applicationDidEnterBackground:(UIApplication *)application {",20661],["- (void)applicationWillResignActive:(UIApplication *)application {",20919],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090],["- (void)applicationDidBecomeActive:(UIApplication *)application {",21209],["- (void)applicationWillTerminate:(UIApplication *)application {",21193]],"useCount":349380},{"word":"UIApplicationMain","context":[["int retVal = UIApplicationMain(argc, argv, nil, @\"TiApp\");",425],["int retVal = UIApplicationMain(argc, argv, nil, @\"AppDelegate\");",746],["int retVal = UIApplicationMain(argc, argv, nil, nil);",1295],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["int retVal = UIApplicationMain(argc, argv, nil, @\"AppController\");",236],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([FKAppDelegate class]));",183],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([BIDAppDelegate class]));",83],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([SCAppDelegate class]));",75],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",70],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([ZXAppDelegate class]));",53]],"useCount":36465},{"word":"UIButton","context":[["UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];",2640],["UIButton *cbutton = [UIButton buttonWithType:UIButtonTypeCustom];",882],["UIButton *cbutton = [UIButton buttonWithType:UIButtonTypeCustom];",882],["UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];",1481],["UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];",1481],["UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];",667],["UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];",667],["UIButton *button = (UIButton *)sender;",632],["UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];",2640],["UIButton *button = (UIButton *)sender;",632]],"useCount":63494},{"word":"UIColor","context":[["self.view.backgroundColor = [UIColor whiteColor];",6618],["self.view.backgroundColor = [UIColor blackColor];",1466],["label.backgroundColor = [UIColor clearColor];",3654],["self.window.backgroundColor = [UIColor whiteColor];",5104],["label.textColor = [UIColor whiteColor];",1656],["cell.backgroundColor = [UIColor clearColor];",1914],["self.backgroundColor = [UIColor whiteColor];",3517],["return [UIColor whiteColor];",1081],["self.view.backgroundColor = [UIColor clearColor];",1072],["self.backgroundColor = [UIColor clearColor];",11515]],"useCount":253872},{"word":"UIControlStateNormal","context":[["[button setTitle:title forState:UIControlStateNormal];",1060],["[cbutton setBackgroundImage:stretchImage forState:UIControlStateNormal];",441],["[btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];",480],["[button setImage:image forState:UIControlStateNormal];",523],["[button setTitle:item.title forState:UIControlStateNormal];",523],["[button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];",530],["[btn setTitle:title forState:UIControlStateNormal];",571],["[button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];",664],["forState:UIControlStateNormal];",3857],["[cbutton setImage:image forState:UIControlStateNormal];",441]],"useCount":34107},{"word":"UIDevice","context":[["[[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];",893],["UIDevice *device = [UIDevice currentDevice];",976],["UIDevice *device = [UIDevice currentDevice];",976],["UIDeviceOrientation orient = [UIDevice currentDevice].orientation;",430],["NSRange iPadStringPosition = [[[UIDevice currentDevice] model] rangeOfString:@\"iPad\"];",417],["return [[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad;",411],["[[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];",403],["if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone)",396],["if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {",1738],["if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {",1345]],"useCount":30098},{"word":"UIEvent","context":[["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event",3008],["- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event",848],["- (void)touchesEnded:(NSSet*)touches withEvent:(UIEvent *)event",887],["- (void)touchesMoved:(NSSet*)touches withEvent:(UIEvent *)event",888],["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {",908],["- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event",1274],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {",1393],["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event",1654],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {",1797],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event",2060]],"useCount":38637},{"word":"UIFont","context":[["- (void)setFont:(UIFont *)font",606],["- (void)setFont:(UIFont *)font {",516],["label.font = [UIFont boldSystemFontOfSize:28];",451],["cbutton.titleLabel.font = [UIFont boldSystemFontOfSize:12];",441],["font:(UIFont *)font",325],["label.font = [UIFont systemFontOfSize:14];",290],["UIFont *font = nil;",274],["cell.textLabel.font = [UIFont systemFontOfSize:14];",244],["self.labelFont = [UIFont boldSystemFontOfSize:kLabelFontSize];",232],["self.detailsLabelFont = [UIFont boldSystemFontOfSize:kDetailsLabelFontSize];",231]],"useCount":47179},{"word":"UIImage","context":[["UIImage *image = UIGraphicsGetImageFromCurrentImageContext();",4884],["if ([image isKindOfClass:[UIImage class]]) {",816],["UIImage *imageToUse = [self rotatedImage:image];",820],["UIImage* image = nil;",828],["UIImage *image = [UIImage imageWithContentsOfFile:[file path]];",836],["UIImage *image = [UIImage imageWithContentsOfFile:[file path]];",836],["UIImage *image;",908],["UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();",1610],["#import \"UIImage+Resize.h\"",2088],["UIImage *image = nil;",2446]],"useCount":173847},{"word":"UIImageView","context":[["UIImageView *imageView = [[UIImageView alloc] init];",858],["UIImageView *imageView = [[UIImageView alloc] initWithImage:image];",634],["UIImageView *imageView = [[UIImageView alloc] initWithImage:image];",634],["@property (nonatomic, strong) UIImageView *imageView;",844],["UIImageView *imageView = [[UIImageView alloc] init];",858],["#import \"UIImageView+WebCache.h\"",3720],["#import <UIImageView+WebCache.h>",1655],["#import <SDWebImage/UIImageView+WebCache.h>",1400],["@property (weak, nonatomic) IBOutlet UIImageView *imageView;",1017],["#import \"UIImageView+AFNetworking.h\"",908]],"useCount":49108},{"word":"UIInterfaceOrientation","context":[["- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation",765],["+(UIInterfaceOrientation)orientation",418],["- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation",548],["- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation {",800],["UIInterfaceOrientation orientation = [[UIApplication sharedApplication] statusBarOrientation];",874],["- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation {",888],["- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation",1271],["UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;",1478],["- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {",4229],["- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation",7181]],"useCount":29999},{"word":"UIKit","context":[["#import <UIKit/UIKit.h>",62878],["#include <UIKit/UIKit.h>",191],["#import <UIKit/UIApplication.h>",184],["#import <UIKit/UIKit.h>",2297],["#import <UIKit/UIKit.h>",2297],["#import <UIKit/UIGestureRecognizerSubclass.h>",352],["#import <UIKit/UIDevice.h>",241],["#include <UIKit/UIKit.h>",191],["#import <UIKit/UIKit.h>",62878],["@import UIKit;",2535]],"useCount":140067},{"word":"UILabel","context":[["UILabel *label = [[UILabel alloc] init];",1520],["@property (nonatomic, strong) UILabel *titleLabel;",792],["UILabel *titleLabel = [[UILabel alloc] init];",570],["@property (weak, nonatomic) IBOutlet UILabel *titleLabel;",819],["@property (weak, nonatomic) IBOutlet UILabel *nameLabel;",711],["_titleLabel = [[UILabel alloc] init];",661],["UILabel *titleLabel = [[UILabel alloc] init];",570],["UILabel *label = [[UILabel alloc] init];",1520],["UILabel *label = [UILabel new];",617],["UILabel *label = [UILabel new];",617]],"useCount":57301},{"word":"UIScreen","context":[["CGRect screenBounds = [[UIScreen mainScreen] bounds];",986],["CGFloat scale = [UIScreen mainScreen].scale;",694],["self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];",658],["CGRect screenRect = [[UIScreen mainScreen] bounds];",782],["UIGraphicsBeginImageContextWithOptions(self.size, NO, [[UIScreen mainScreen] scale]);",983],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["scale = [[UIScreen mainScreen] scale];",521],["CGRect f = [[UIScreen mainScreen] applicationFrame];",479],["return [UIScreen mainScreen].bounds;",456]],"useCount":47552},{"word":"UIScrollView","context":[["- (void)scrollViewDidScroll:(UIScrollView *)scrollView {",2260],["- (void)scrollViewDidScroll:(UIScrollView *)scrollView",3141],["- (void)scrollViewDidScroll:(UIScrollView *)scrollView{",716],["@property (nonatomic, strong) UIScrollView *scrollView;",756],["- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate {",834],["- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {",1180],["- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {",1426],["- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate",1453],["- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView",1514],["- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView",1909]],"useCount":51326},{"word":"UIStoryboardSegue","context":[["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",6212],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",108],["-(void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",111],["- (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",159],["- (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",189],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{",222],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",291],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{",348],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",579],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",19102]],"useCount":28162},{"word":"UITableView","context":[["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {",11511],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView",11573],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {",4624],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {",8876],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath",6381],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath",11931],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436]],"useCount":237119},{"word":"UITableViewCell","context":[["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436],["- (UITableViewCell *)tableView:(UITableView *)tableView",1210],["UITableViewCell *cell;",1259],["UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];",1262],["-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{",1265],["-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",1467],["cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];",1772],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{",2598],["UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];",4058]],"useCount":85122},{"word":"UITextField","context":[["-(BOOL)textFieldShouldReturn:(UITextField *)textField",460],["- (BOOL)textFieldShouldReturn:(UITextField *)textField",2431],["- (BOOL)textFieldShouldReturn:(UITextField *)textField {",2375],["- (void)textFieldDidEndEditing:(UITextField *)textField",890],["- (void)textFieldDidBeginEditing:(UITextField *)textField",843],["- (void)textFieldDidEndEditing:(UITextField *)textField {",825],["- (void)textFieldDidBeginEditing:(UITextField *)textField {",738],["- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField",540],["- (BOOL)textFieldShouldReturn:(UITextField *)textField{",508],["- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {",451]],"useCount":29677},{"word":"UIView","context":[["[UIView beginAnimations:nil context:NULL];",3837],["[UIView animateWithDuration:0.3",1693],["[UIView animateWithDuration:duration animations:^{",1868],["[UIView animateWithDuration:0.25 animations:^{",2429],["[UIView animateWithDuration:0.5 animations:^{",2523],["[UIView animateWithDuration:0.2 animations:^{",3048],["[UIView animateWithDuration:0.3 animations:^{",4623],["[UIView setAnimationDelegate:self];",5340],["[UIView beginAnimations:nil context:nil];",6840],["[UIView commitAnimations];",15687]],"useCount":295336},{"word":"UIViewController","context":[["UIViewController *rootViewController = [UIViewController new];",1023],["UIViewController *rootViewController = [UIViewController new];",1023],["#pragma mark UIViewController",620],["- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated",450],["UIViewController *vc = [[[[UIApplication sharedApplication] delegate] window] rootViewController];",1223],["UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];",616],["UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];",382],["UIViewController *rootViewController = [[UIViewController alloc] init];",506],["UIViewController *rootViewController = [[UIViewController alloc] init];",506],["#pragma mark - UIViewController",1791]],"useCount":56630},{"word":"UIWindow","context":[["self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];",658],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["UIWindow *keyWindow = [UIApplication sharedApplication].keyWindow;",325],["self.window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];",345],["UIWindow *window = [[UIApplication sharedApplication] keyWindow];",454],["self.window = [[UIWindow alloc] initWithFrame:screenBounds];",542],["- (NSUInteger)application:(UIApplication*)application supportedInterfaceOrientationsForWindow:(UIWindow*)window",544],["UIWindow *window = [UIApplication sharedApplication].keyWindow;",844],["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["self.window = [[[UIWindow alloc] initWithFrame:screenBounds] autorelease];",578]],"useCount":30803},{"word":"URL","context":[["// remove format in URL if needed",889],["// Returns the URL to the application's Documents directory.",749],["% URL/Info: http://neuroelf.net/",1144],["return @\"Bad URL found\";",618],["NSURL *url = [request URL];",570],["NSURLErrorFailingURLErrorKey:[response URL],",524],["// Based on the Android code, they return ONLY the query part of the URL as 'result'.  Let's do the same.",488],["// NOTE: Loading from URL means we can't pre-determine any % value.",450],["NSLog(@\"[WARN] couldn't load URL: %@\",url);",451],["NSURL * newUrl = [request URL];",449]],"useCount":68590},{"word":"URLWithString","context":[["NSURL *baseURL = baseURLString == nil ? nil : [NSURL URLWithString:baseURLString];",340],["return [NSURL URLWithString:urlString];",382],["NSURL *url = [NSURL URLWithString:urlString];",1976],["jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\"];",698],["NSURL *url_ = [path hasPrefix:@\"file:\"] ? [NSURL URLWithString:path] : [NSURL fileURLWithPath:path];",662],["NSURL *url = [NSURL URLWithString:urlStr];",497],["result = [NSURL URLWithString:relativeString relativeToURL:rootPath];",452],["return [TiUtils checkFor2XImage:[NSURL URLWithString:newurl]];",418],["return [NSURL URLWithString:relativeString];",415],["// Ensure terminal slash for baseURL path, so that NSURL +URLWithString:relativeToURL: works as expected",299]],"useCount":33810},{"word":"UTF8String","context":[["const char* data = [urlStr UTF8String];",371],["const char *dbpath = [databasePath UTF8String];",341],["SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithName(NULL, [hostName UTF8String]);",309],["const char *cStr = [self UTF8String];",402],["const char *urlCString = [[url_ absoluteString] UTF8String];",412],["const char *urlCString = [[url_ absoluteString] UTF8String];",420],["objc_property_t p = class_getProperty([target class], [key UTF8String]);",437],["const char *data = [toEncode UTF8String];",451],["TiStringRef value = TiStringCreateWithUTF8CString([key UTF8String]);",868],["sqlite3_bind_text(pStmt, idx, [[obj description] UTF8String], -1, SQLITE_STATIC);",288]],"useCount":39782},{"word":"Update","context":[["% Update",283],["% Update handles structure",4323],["// Update the view.",699],["// Update",593],["// Update UI",298],["// Update nav",275],["// Update to determinante indicator",253],["// Update state",325],["// Update the user interface for the detail item.",662],["// Update totals",357]],"useCount":32935},{"word":"Use","context":[["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031],["#error This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",275],["// Use dataWithBytesNoCopy to avoid an extra allocation and memcpy.",284],["@param responseFields Use this field to include those fields which are not included by default.",370],["// 3. Use srcLength as a HINT (as in all other buffer ops)",415],["// TODO: Use the full image size here?  Auto width/height is going to be changed once the image is loaded.",450],["// Use the loopback",486],["#warning This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",1664],["% Use as",4409],["// Use recording to get started writing UI tests.",4638]],"useCount":41077},{"word":"V","context":[["E  K @DIEZTMP@(\"V\",DP,DIIENS,DIFLD,\"4/\")",810],["SET N DIR S DIR(0)=\"SV\"_$E(\"o\",$D(DB(DQ)))_U_DU,DIR(\"V\")=1",922],["G V:DV'[\"N\" D D I $L($P(X,\".\"))>24 K X G Z",980],["V D @(\"X\"_DQ) K YS",980],["SAVEVALS S @DIEZTMP@(\"V\",DP,DIIENS,DIFLD,\"O\")=$G(DE(DQ)) S:$D(^(\"F\"))[0 ^(\"F\")=$G(DE(DQ))",807],["V ;;5.1;IFCAP;;Oct 20, 2000",547],["* Signature: (J)V",468],["I $D(DE(DW,\"4/\")) S @DIEZTMP@(\"V\",DP,DIIENS,DIFLD,\"4/\")=\"\"",810],["V![",2999],["%   Author(s): V. Pellissier",401]],"useCount":38748},{"word":"ViewController","context":[["self.viewController = [[ViewController alloc] initWithNibName:@\"ViewController\" bundle:nil];",447],["@implementation ViewController",294],["@implementation ViewController {",297],["#import \"ViewController.h\"",333],["self.viewController = [[ViewController alloc] initWithNibName:@\"ViewController\" bundle:nil];",447],["#pragma mark - ViewController Functions",498],["@interface ViewController ()",15550],["@implementation ViewController",20993],["//  ViewController.m",21870],["#import \"ViewController.h\"",24677]],"useCount":91539},{"word":"W","context":[["W !",4485],["W @IOF",1218],["X W:'$D(ZTQUEUED) $C(7),\"??\" I $D(DB(DQ)) G Z^DIE17",980],["O D W W Y W:$X>45 !?9",980],["O D W W Y W:$X>45 !?9",980],["O D W W Y W:$X>45 !?9",980],["W W !?DL+DL-2,DLB_\": \"",980],["W W !?DL+DL-2,DLB_\": \"",980],["I X=\" \",DV[\"d\",DV'[\"P\",$D(^DISV(DUZ,\"DIE\",DLB)) S X=^(DLB) I DV'[\"D\",DV'[\"S\" W \"  \"_X",980],["TR R X:DTIME E  S (DTOUT,X)=U W $C(7)",970]],"useCount":61516},{"word":"We","context":[["//We need to run this before the app.js, which means it has to be here.",378],["*\tthat is unique. We previously did an nsstring with format",375],["// We should be switching to this pattern EVERYWHERE.",371],["// to be case-correct. We can't be certain.",361],["// We need to stage this out; the problem at hand is that some values",350],["overwritten. We welcome comments and issues regarding this code; they will be",798],["//We do not retain the Class, but simply assign them.",445],["//Rogue event. We're supposed to be disabled!",636],["{\t//We did not have any event listeners on this proxy. Perfectly normal.",661],["//TODO: This is a temprorary workaround for the time being. We have to properly take care of [undefined] objects.",765]],"useCount":84543},{"word":"X","context":[["Q X",2647],["S X=$G(X(1))",1763],["S X=DG(DQ),DIC=DIE",6482],["I $D(X),X'?.ANP K X",1327],["S X=$G(X(1))",1763],["S Y=X",1487],["I $D(X),X'?.ANP K X",1327],["I $D(X),X'?.ANP K X",1327],["N X",1324],["m = size(X, 1);",1254]],"useCount":258160},{"word":"XCTAssert","context":[["XCTAssert(!error, @\"evaluation should not generate an error\");",309],["XCTAssert(YES, @\"Pass\");",10102],["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031],["XCTAssert([[screen compactLineDump] isEqualToString:",640],["XCTAssert([[grid compactLineDumpWithContinuationMarks] isEqualToString:",171],["XCTAssert(screen.cursorY == 3);",140],["XCTAssert([a isEqualToString:e]);",132],["XCTAssert([[screen compactLineDumpWithHistory] isEqualToString:",220],["XCTAssert(screen.cursorX == 1);",290],["XCTAssert([[screen compactLineDumpWithHistoryAndContinuationMarks] isEqualToString:",470]],"useCount":33219},{"word":"XCTAssertEqual","context":[["XCTAssertEqual(dict.count, 2U);",411],["XCTAssertEqual(dict.count, 1U);",483],["XCTAssertEqual(dict.count, 0U);",657],["XCTAssertEqual(dict.count, 4U);",1141],["else XCTAssertEqual(AGXNotFoundError, error.code);",1923],["XCTAssertEqual(value, YES);",313],["XCTAssertEqual(value, 700);",323],["XCTAssertEqual(value, NO);",355],["XCTAssertEqual(value, 702);",361],["XCTAssertEqual(dict.count, 3U);",561]],"useCount":36386},{"word":"XCTAssertTrue","context":[["XCTAssertTrue([dict valueForKey:11 value:NULL]);",258],["XCTAssertTrue(edgeCount == 1, @\"Bad edgeCount. expected(1) != %d\", (int)edgeCount);",260],["XCTAssertTrue(result);",264],["XCTAssertTrue(success);",322],["XCTAssertTrue( element == NSLineToBezierPathElement, @\"Incorrect element\" );",533],["XCTAssertTrue(value && !value.isUndefined);",570],["XCTAssertTrue(count == 1, @\"Oops\");",764],["XCTAssertTrue([self waitForTest:0.1], @\"Test timed out.\");",777],["XCTAssertTrue(foundElement, @\"Couldn't find element with text '%@' in %d seconds\", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);",1114],["XCTAssertTrue([dict valueForKey:21LL value:NULL]);",258]],"useCount":41588},{"word":"XCTest","context":[["@import XCTest;",2085],["#import <XCTest/XCTest.h>",45377],["isTestEnvironment = NSClassFromString(@\"SenTestCase\") || NSClassFromString(@\"XCTest\");",27],["#import \"XCTest+Spec.h\"",34],["#import <XCTest/XCTestAssertions.h>",48],["// Workarounds for crashing behavior using Key-Value Observing with XCTest",71],["#import <XCTest/XCTest.h>",609],["#import <XCTest/XCTest.h>",45377],["#import <XCTest/XCTest.h>",609],["XCTFail(@\"Will write the test when I found a way to test asynchronous code with XCTest framework.\");",171]],"useCount":94718},{"word":"Y","context":[["D ^DIR I 'DDER S %=Y(0),X=Y",970],["D ^DIR I 'DDER S %=Y(0),X=Y",970],["W:Y]\"\" \"// \" I 'DV,DV[\"I\",$D(DE(DQ))#2 S X=\"\" W \"  (No Editing)\" Q",970],["O D W W Y W:$X>45 !?9",980],["PR S DG=DV,Y=DE(DQ),X=DU I $D(DQ(DQ,2)) X DQ(DQ,2) G RP",980],["Y I '$D(DE(DQ)) D O G RD:\"@\"'[X,A:DV'[\"R\"&(X=\"@\"),X:X=\"@\" S X=Y G N",980],["Y I '$D(DE(DQ)) D O G RD:\"@\"'[X,A:DV'[\"R\"&(X=\"@\"),X:X=\"@\" S X=Y G N",980],["I $L(Y)>19,'DV,DV'[\"I\",(DV[\"F\"!(DV[\"K\")) G RW^DIR2",983],["S Y=X",1487],["Q Y",2578]],"useCount":80379},{"word":"YES","context":[["return YES;",295607],["return YES;",25193],["[self dismissViewControllerAnimated:YES completion:nil];",13083],["[self.navigationController popViewControllerAnimated:YES];",11397],["XCTAssert(YES, @\"Pass\");",10102],["[tableView deselectRowAtIndexPath:indexPath animated:YES];",9007],["*stop = YES;",8759],["[self setNeedsDisplay:YES];",8001],["[self.view endEditing:YES];",5319],["[self.navigationController pushViewController:vc animated:YES];",4916]],"useCount":1288232},{"word":"_","context":[["key = [NSString stringWithFormat:@\"set%@%@_\", [[key substringToIndex:1] uppercaseString], [key substringFromIndex:1]];",900],["//    / ___\\  /_\\     /\\/\\    /\\ /\\    /__\\   /_\\     \\_   \\",835],["//     ____    _                        __     _      _____",835],["//  /\\_\\ \\  /  _  \\ / /\\/\\ \\ \\ \\_/ / / _  \\ /  _  \\ /\\/ /_",835],["//  /\\_\\ \\  /  _  \\ / /\\/\\ \\ \\ \\_/ / / _  \\ /  _  \\ /\\/ /_",835],["//  /\\_\\ \\  /  _  \\ / /\\/\\ \\ \\ \\_/ / / _  \\ /  _  \\ /\\/ /_",835],["//\t\\ \\  __<  \\ \\  __\\_ \\ \\  __\\_",848],["//\t\\ \\  __<  \\ \\  __\\_ \\ \\  __\\_",848],["_",890],["SET N DIR S DIR(0)=\"SV\"_$E(\"o\",$D(DB(DQ)))_U_DU,DIR(\"V\")=1",922]],"useCount":102139},{"word":"_NS","context":[["[o_mi_info setTitle: _NS(\"Media Information...\")];",100],["o_labelString = _NS((char *)p_item->psz_text);",223],["[self setTitle: _NS(\"VLC media player\")];",197],["[o_mi_play setTitle: _NS(\"Play\")];",150],["labelString = _NS((char *)p_item->psz_text);",143],["[o_open_panel setPrompt: _NS(\"Open\")];",140],["_NS(\"OK\"), @\"\", @\"\", o_wizard_window, nil, nil, nil, nil,",117],["[object setToolTip: _NS(p_item->psz_longtext)];",108],["_NS(\"This combination is already taken by \\\"%@\\\".\"),",106],["[o_open_panel setTitle: _NS(\"Open File\")];",105]],"useCount":40728},{"word":"__block","context":[["__block BOOL result = NO;",2749],["__block BOOL result;",1351],["__block NSError *error = nil;",1162],["__block NSString *redboxError = nil;",1033],["__block NSError *err = nil;",975],["__block NSUInteger hashCode = 7;",944],["__block SInt32 size_ = memoizedSerializedSize;",940],["__block id result = nil;",770],["__block BOOL success = NO;",713],["__block BOOL result = YES;",758]],"useCount":69548},{"word":"__bridge","context":[["SCNetworkReachabilityContext context = {0, (__bridge void *)(self), NULL, NULL, NULL};",204],["NSDictionary *attributes = (__bridge NSDictionary *)CTRunGetAttributes((__bridge CTRunRef) glyphRun);",181],["GCDAsyncSocket *asyncSocket = (__bridge GCDAsyncSocket *)pInfo;",188],["GCDAsyncSocket *asyncSocket = (__bridge GCDAsyncSocket *)connection;",188],["HSDrawingWindow *drawingWindow = (__bridge HSDrawingWindow *)drawingObject->window;",491],["(__bridge CFStringRef)self,",289],["CGDataProviderRef dataProvider = CGDataProviderCreateWithCFData((__bridge CFDataRef)data);",282],["HSWebViewWindow *theWindow = get_objectFromUserdata(__bridge HSWebViewWindow, L, 1) ;",231],["void *nonNullUnusedPointer = (__bridge void *)self;",210],["return SecCertificateCreateWithData(NULL, (__bridge CFDataRef)(certData));",217]],"useCount":39757},{"word":"__weak","context":[["__weak typeof(self)weakSelf = self;",1009],["__weak __typeof(self)weakSelf = self;",1351],["__weak typeof(self) weakSelf = self;",12163],["__weak __typeof(self) weakSelf = self;",1821],["__weak typeof (self) weakSelf = self;",562],["typeof(self) __weak weakSelf = self;",566],["__weak typeof(self) _self = self;",613],["__weak typeof(self) wself = self;",622],["__weak __typeof__(self) weakSelf = self;",718],["__weak __typeof(&*self)weakSelf = self;",741]],"useCount":38793},{"word":"_cmd","context":[["NSStringFromSelector(_cmd),",439],["return [self tasksForKeyPath:NSStringFromSelector(_cmd)];",508],["[self subclassResponsibility: _cmd];",3399],["NSStringFromClass([self class]), NSStringFromSelector(_cmd)];",554],["[self doesNotRecognizeSelector: _cmd];",641],["return objc_getAssociatedObject(self, _cmd);",822],["NSLog(@\"Running %@ '%@'\", self.class, NSStringFromSelector(_cmd));",1085],["name:NSStringFromSelector(_cmd)",1171],["GTL_DEBUG_ASSERT(object != nil, @\"%@ got a nil object\", NSStringFromSelector(_cmd));",1272],["[self doesNotRecognizeSelector:_cmd];",3791]],"useCount":39254},{"word":"_delegate","context":[["if (_delegate)",205],["if ([_delegate respondsToSelector:",278],["if (!_delegate) {",197],["@synthesize delegate=_delegate;",433],["_delegate = delegate;",458],["if (_delegate) {",593],["return _delegate;",701],["_delegate = nil;",1347],["@synthesize delegate = _delegate;",3045],["_delegate = delegate;",3401]],"useCount":41677},{"word":"_tableView","context":[["[_tableView reloadData];",3098],["UITableView *_tableView;",489],["_tableView.delegate = self;",2162],["return _tableView;",1446],["[self.view addSubview:_tableView];",1402],["if (!_tableView) {",714],["_tableView.separatorStyle = UITableViewCellSeparatorStyleNone;",607],["_tableView = tableView;",521],["if (_tableView == nil) {",507],["_tableView.dataSource = self;",2176]],"useCount":28025},{"word":"a","context":[["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// Do any additional setup after loading the view, typically from a nib.",17756],["// This is an example of a performance test case.",15613],["% Hint: edit controls usually have a white background on Windows.",8913],["if i == a",5887],["// This is an example of a functional test case.",15558],["a = 6",5887],["// Releases the view if it doesn't have a superview.",5338]],"useCount":1038327},{"word":"aDecoder","context":[["-(id)initWithCoder:(NSCoder *)aDecoder",574],["if ((self = [super initWithCoder:aDecoder])) {",725],["-(id)initWithCoder:(NSCoder *)aDecoder {",794],["if (self = [super initWithCoder:aDecoder]) {",1673],["- (instancetype)initWithCoder:(NSCoder *)aDecoder",2009],["- (instancetype)initWithCoder:(NSCoder *)aDecoder {",2977],["- (id)initWithCoder:(NSCoder *)aDecoder {",4319],["if((self = [ClassStore deserialize:[aDecoder decodeObjectForKey:@\"data\"]])) {",510],["- (id)initWithCoder:(NSCoder *)aDecoder",5290],["self = [super initWithCoder:aDecoder];",9744]],"useCount":46102},{"word":"about","context":[["// This method is called when watch view controller is about to be visible to user",397],["The optional argument TERMINAL specifies which display to ask about.",364],["// about thread safety of the singleton.",321],["//  OCMockito by Jon Reid, http://qualitycoding.org/about/",308],["// Code is aware about this case and at the end will simply call on 'nil' object method.",273],["* in your own internal browser, or perhaps warn the user that they are about to leave your app.",250],["// don't worry about KrollBridge since he's already listening",245],["//  OCHamcrest by Jon Reid, http://qualitycoding.org/about/",487],["Called when the application is about to terminate.",1223],["% information about SBML, and the latest version of SBMLToolbox.",1262]],"useCount":27681},{"word":"action","context":[["[button addTarget:target action:action forControlEvents:UIControlEventTouchUpInside];",521],["action:nil keyEquivalent:@\"\"];                                      \\",543],["[button addTarget:target action:action forControlEvents:UIControlEventTouchUpInside];",521],["#pragma mark - action",544],["[tableview insertRowsAtIndexPaths:[NSArray arrayWithObject:path] withRowAnimation:action.animation];",561],["handler:^(UIAlertAction *action) {",702],["action:nil",799],["return action;",949],["action:nil];",1253],["TiUITableViewRowProxy* row = (TiUITableViewRowProxy*)action.obj;",1674]],"useCount":131681},{"word":"add","context":[["// add a black fill with 50% opacity",447],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["<td class=\"player-add\">",1152],["// Insert code here to add functionality to your managed object subclass",723],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",541],["// add layer as a child to scene",512],["/* add the label */",421],["// and add this error to the error log",310],["// If you simply want to add a few extra header fields, see the preprocessErrorResponse: method.",284],["// You can also use preprocessErrorResponse: to add an optional HTML body.",284]],"useCount":59198},{"word":"addObject","context":[["[items addObject:flexSpace];",587],["[curArray addObject:[obj toDictionary]];",620],["[args addObject:[NSNull null]];",582],["[menus addObject:item];",670],["[args addObject:value];",674],["[TLmetaSchemeTypes addObject:constructor];",960],["[items addObject:item];",2659],["[steps addObject:step];",2772],["[fields addObject:arg];",3083],["[photos addObject:photo];",3814]],"useCount":199819},{"word":"addObserver","context":[["addObserver:self",2730],["[[NSNotificationCenter defaultCenter] addObserver:self",25124],["[[NSNotificationCenter defaultCenter] addObserver: self",1989],["[nc addObserver: self",663],["[nc addObserver:self",836],["[center addObserver:self",901],["[center addObserver:self",980],["[notificationCenter addObserver:self",1635],["[[NSNotificationCenter defaultCenter] addObserver:self",1656],["addObserver:self",1701]],"useCount":55647},{"word":"addSubview","context":[["[self addSubview:label];",1943],["[self addSubview:button];",2315],["[self.view addSubview:self.tableView];",2596],["[self addSubview:view];",1931],["[self addSubview:imageView];",1629],["[self.view addSubview:_tableView];",1402],["[view addSubview:label];",1350],["[self.view addSubview:button];",1238],["[self.view addSubview:tableView];",1174],["[self.view addSubview:label];",1083]],"useCount":178415},{"word":"additional","context":[["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["distributed with this work for additional information",3509],["** In addition, as a special exception, Nokia gives you certain additional",491],["* distributed with this work for additional information",546],["// Do any additional setup after loading the view from its nib.",7268],["// additional verification",630],["** In addition, as a special exception, Digia gives you certain additional",638],["* or visit www.oracle.com if you need additional information or have any",772],["// Do any additional setup after loading the view.",21076],["// Do any additional setup after loading the view, typically from a nib.",17756]],"useCount":62476},{"word":"address","context":[["return address;",562],["* To run on device, change `localhost` to the IP address of your computer",1052],["// Found IPv6 address",269],["// Wrap the native address structures for CFSocketSetAddress.",458],["// strict address/hash comparison. So the notification must always",350],["% Contact address: Shogo MURAMATSU,",345],["NSString *msg = @\"Unknown interface. Specify valid interface by name (e.g. \\\"en1\\\") or IP address.\";",313],["// Found IPv4 address",269],["address:nil",248],["// Wrap the native address structure",234]],"useCount":36399},{"word":"after","context":[["// Do any additional setup after loading the view.",21076],["// Override point for customization after application launch.",31855],["// Do any additional setup after loading the view, typically from a nib.",17756],["% --- Executes during object creation, after setting all properties.",14669],["% handles    empty - handles not created until after all CreateFcns called",13063],["cta_dummy_arg.after = tmp_vec;",800],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["// Do any additional setup after loading the view from its nib.",7268],["DESCRIBE( after )",731],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643]],"useCount":189323},{"word":"alert","context":[["[alert addButtonWithTitle:@\"OK\"];",677],["[alert setAlertStyle:NSWarningAlertStyle];",657],["*      alert(e.error);",741],["NSAlert *alert = [[NSAlert alloc] init];",1862],["[alert runModal];",2109],["[self presentViewController:alert animated:YES completion:nil];",2289],["[alert release];",3451],["[alert show];",19121],["UIAlertView *alert = [[UIAlertView alloc]",837],["[alert show];",766]],"useCount":76733},{"word":"alertView","context":[["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex",2145],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex",2145],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {",1620],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex",603],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex",603],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {",1620],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {",625],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {",625],["[alertView release];",883],["[alertView show];",9263]],"useCount":43180},{"word":"all","context":[["clear all;",5787],["% --- Executes during object creation, after setting all properties.",14669],["all++;",2459],["hold all",1628],["hold all;",958],["clear ; close all; clc",604],["close all;",6676],["clear all",6780],["close all",8665],["% handles    empty - handles not created until after all CreateFcns called",13063]],"useCount":188691},{"word":"alloc","context":[["NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];",2798],["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",8604],["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];",4741],["[[[XCUIApplication alloc] init] launch];",4666],["NSDateFormatter *formatter = [[NSDateFormatter alloc] init];",3723],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];",3006],["TLSchemeParam$schemeParam *arg = [[TLSchemeParam$schemeParam alloc] init];",3083],["[[self alloc] initWithPathURITemplate:pathURITemplate",3386]],"useCount":763508},{"word":"alpha","context":[["self.alpha = 1.0;",834],["self.alpha = 0;",1748],["self.alpha = 1;",1559],["alpha:1.0];",1558],["self.alpha = 1.0f;",1126],["self.alpha = 0.0;",1012],["self.alpha = 0.0f;",1839],["alpha:1.0f];",1005],["alpha:1];",640],["if (![self red:&r green:&g blue:&b alpha:&a]) return nil;",583]],"useCount":133026},{"word":"already","context":[["// don't worry about KrollBridge since he's already listening",245],["// if already authorized, this should do nothing",247],["DeveloperLog(@\"[WARN] Bridge %@ already has target %@!\",[context_ delegate],target_);",288],["// Whether or not class initialization had already began, it has begun now",291],["if(keyboardUIToolbar != nil){ //It already exists, update it.",331],["DebugLog(@\"[ERROR] The specified Completion Handler with ID: %@ has already expired or removed from the system\", key);",372],["// don't set if already set above",450],["// That is, socket was disconnected, or connection has already timed out.",480],["// If the coordinator doesn't already exist, it is created and the application's store added to it.",683],["// If the model doesn't already exist, it is created from the application's model.",694]],"useCount":41821},{"word":"also","context":[["<b>See also</b>",559],["// TODO: Android also attempts to parse the ref... but why would the ref ever contain a query...?",488],["% See also",1119],["See also applicationDidEnterBackground:.",1194],["%   See also",1261],["%  See also",1600],["%\tSee also",2117],["% See also: GUIDE, GUIDATA, GUIHANDLES",2122],["% See also:",2329],["//Should be rare, but also useful if arguments are used improperly.",450]],"useCount":46421},{"word":"an","context":[["NSString *failureReason = @\"There was an error creating or loading the application's saved data.\";",1286],["// This is an example of a performance test case.",15613],["// This is an example of a functional test case.",15558],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["* Retrieve the value of the \"Response\" output from an execution of this Choreo.",1828],["// can't call an abstract method",1485],["Typical reasons for an error here include:",743],["//TODO: If we have focus while this happens, we need to signal an update.",662],["//that don't exist and it should return undefined, not an exception",661]],"useCount":208190},{"word":"and","context":[["Redistribution and use in source and binary forms, with or without",5044],["% for the documentation and details.",5613],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["%       See ISPC and COMPUTER.",11624],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["% handles    structure with handles and user data (see GUIDATA)",35747],["Redistribution and use in source and binary forms, with or without",5044]],"useCount":787276},{"word":"animateWithDuration","context":[["[UIView animateWithDuration:duration animations:^{",1868],["[UIView animateWithDuration:0.2 animations:^{",3048],["[UIView animateWithDuration:0.5 animations:^{",2523],["[UIView animateWithDuration:0.25 animations:^{",2429],["[UIView animateWithDuration:0.3",1693],["[UIView animateWithDuration:0.3f animations:^{",1412],["[UIView animateWithDuration:duration",1301],["[UIView animateWithDuration:0.1 animations:^{",1043],["[UIView animateWithDuration:0.3 animations:^{",4623],["[UIView animateWithDuration:0.2f animations:^{",910]],"useCount":56234},{"word":"animated","context":[["- (void)viewDidAppear:(BOOL)animated",7408],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated {",7137],["[tableView deselectRowAtIndexPath:indexPath animated:YES];",9007],["[super setSelected:selected animated:animated];",10716],["[super setSelected:selected animated:animated];",10716],["- (void)viewWillAppear:(BOOL)animated {",11048],["- (void)viewWillAppear:(BOOL)animated",12501],["[super viewWillDisappear:animated];",12778],["[super viewDidAppear:animated];",15418],["[super viewWillAppear:animated];",26824]],"useCount":420548},{"word":"animation","context":[["animation.delegate = self;",782],["animation.removedOnCompletion = NO;",852],["animation.duration = duration;",583],["withRowAnimation:animation];",617],["CATransition *animation = [CATransition animation];",677],["CATransition *animation = [CATransition animation];",677],["CATransition *transition = [CATransition animation];",712],["// An empty implementation adversely affects performance during animation.",7709],["return animation;",1302],["animation.fillMode = kCAFillModeForwards;",932]],"useCount":79379},{"word":"animations","context":[["[UIView animateWithDuration:0.3 animations:^{",4623],["[UIView animateWithDuration:0.2 animations:^{",3048],["[UIView animateWithDuration:0.5 animations:^{",2523],["[UIView animateWithDuration:0.25 animations:^{",2429],["animations:^{",16737],["[UIView animateWithDuration:duration animations:^{",1868],["[UIView animateWithDuration:0.3f animations:^{",1412],["[UIView animateWithDuration:0.1 animations:^{",1043],["[UIView animateWithDuration:0.2f animations:^{",910],["[UIView animateWithDuration:0.4 animations:^{",885]],"useCount":71459},{"word":"any","context":[["// Dispose of any resources that can be recreated.",61819],["// Start with super's key paths (if there are any)",877],["// remove any existing images",902],["// Report any error we got.",1290],["implied, are granted by Apple herein, including but not limited to any",1582],["// Release any cached data, images, etc that aren't in use.",5076],["// Release any retained subviews of the main view.",6136],["// Do any additional setup after loading the view from its nib.",7268],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Do any additional setup after loading the view.",21076]],"useCount":222055},{"word":"app","context":[["UIApplication *app = [UIApplication sharedApplication];",1096],["[[TiApp app] startNetwork];",1032],["[req addRequestHeader:@\"User-Agent\" value:[[TiApp app] userAgent]];",940],["#include \"chrome/app/chrome_command_ids.h\"",923],["UIApplication* app = [UIApplication sharedApplication];",752],["* This is main kick off after the app inits, the views and Settings are setup here. (preferred - iOS4 and up)",603],["/** If you need to do any extra app-specific initialization, you can do it here",600],["AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication]delegate];",1192],["[[TiApp app] stopNetwork];",1631],["// this happens while we are running ( in the background, or from within our own app )",597]],"useCount":76339},{"word":"appendString","context":[["[buffer appendString:[super description]];",1815],["[buffer appendString:@\"}\"];",1815],["[buffer appendString:@\"{\"];",1816],["[ms appendString: @\")\"];",2101],["[buf appendString: indent];",630],["[ms appendString: @\"success:\"];",540],["[result appendString:@\"=\"];",539],["[result appendString:@\"&\"];",506],["[html appendString:content];",454],["[html appendString:@\"</script>\"];",451]],"useCount":58875},{"word":"application","context":[["- (void)applicationDidBecomeActive:(UIApplication *)application {",21209],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090],["// Override point for customization after application launch.",31855],["- (void)applicationWillTerminate:(UIApplication *)application {",21193],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["- (void)applicationWillResignActive:(UIApplication *)application {",20919],["- (void)applicationWillEnterForeground:(UIApplication *)application {",20617],["- (void)applicationDidEnterBackground:(UIApplication *)application {",20661],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090]],"useCount":437753},{"word":"applicationDidBecomeActive","context":[["- (void)applicationDidBecomeActive:(UIApplication *)application {",21209],["- (void)applicationDidBecomeActive:(UIApplication *)application",17105],["- (void)applicationDidBecomeActive:(UIApplication *)application",468],["- (void)applicationDidBecomeActive:(UIApplication *)application {",400],["selector:@selector(applicationDidBecomeActive:)",232],["-(void) applicationDidBecomeActive:(UIApplication *)application",217],["- (void)applicationDidBecomeActive:(NSNotification *)notification",196],["selector:@selector(applicationDidBecomeActive)",181],["- (void)applicationDidBecomeActive",170],["- (void)applicationDidBecomeActive {",166]],"useCount":42384},{"word":"applicationDidEnterBackground","context":[["- (void)applicationDidEnterBackground:(UIApplication *)application {",20661],["- (void)applicationDidEnterBackground:(UIApplication *)application",16821],["See also applicationDidEnterBackground:.",1194],["- (void)applicationDidEnterBackground:(UIApplication *)application {",327],["-(void)applicationDidEnterBackground:(UIApplication *)application",258],["-(void)applicationDidEnterBackground:(UIApplication *)application",248],["See also applicationDidEnterBackground:.",243],["- (void)applicationDidEnterBackground:(UIApplication *)application",231],["-(void) applicationDidEnterBackground:(UIApplication*)application",205],["- (void)applicationDidEnterBackground",164]],"useCount":42479},{"word":"applicationWillEnterForeground","context":[["-(void) applicationWillEnterForeground:(UIApplication*)application",204],["- (void)applicationWillEnterForeground",162],["-(void) applicationWillEnterForeground:(UIApplication*)application {",160],["- (void)applicationWillEnterForeground:(UIApplication *)application",228],["selector:@selector(applicationWillEnterForeground:)",242],["- (void)applicationWillEnterForeground:(UIApplication *)application {",20617],["- (void)applicationWillEnterForeground:(UIApplication *)application",16737],["-(void)applicationWillEnterForeground:(UIApplication *)application",247],["-(void)applicationWillEnterForeground:(UIApplication *)application",252],["- (void)applicationWillEnterForeground:(UIApplication *)application {",325]],"useCount":40668},{"word":"applicationWillResignActive","context":[["- (void)applicationWillResignActive:(NSNotification *)notification",164],["selector:@selector(applicationWillResignActive:)",190],["-(void) applicationWillResignActive:(UIApplication *)application",218],["- (void)applicationWillResignActive:(UIApplication *)application",227],["- (void)applicationWillResignActive:(UIApplication *)application {",20919],["- (void)applicationWillResignActive",120],["- (void)applicationWillResignActive:(UIApplication *)application",16764],["- (void)applicationWillResignActive:(UIApplication *)application {",401],["-(void)applicationWillResignActive:(UIApplication *)application",250],["-(void)applicationWillResignActive:(UIApplication *)application",247]],"useCount":40924},{"word":"applicationWillTerminate","context":[["selector:@selector(applicationWillTerminate:)",207],["If your application supports background execution, called instead of applicationWillTerminate: when the user quits.",209],["- (void)applicationWillTerminate:(NSNotification *)aNotification",255],["If your application supports background execution, called instead of applicationWillTerminate: when the user quits.",337],["- (void)applicationWillTerminate:(UIApplication *)application {",406],["- (void)applicationWillTerminate:(NSNotification *)notification",412],["- (void)applicationWillTerminate:(UIApplication *)application {",21193],["- (void)applicationWillTerminate:(UIApplication *)application",17304],["- (void)applicationWillTerminate:(NSNotification *)aNotification {",862],["- (void)applicationWillTerminate:(UIApplication *)application",515]],"useCount":44114},{"word":"are","context":[["* are met:",3973],["% --- Outputs from this function are returned to the command line.",2400],["%      existing singleton*.  Starting from the left, property value pairs are",2022],["implied, are granted by Apple herein, including but not limited to any",1582],["are met:",1294],["The initial conditions are as follows:",1186],["* are met:",1148],["* `inet` value under `en0:`) and make sure your computer and iOS device are",1052],["// Start with super's key paths (if there are any)",877],["%get level and version and check the input arguments are appropriate",816]],"useCount":189890},{"word":"arg","context":[["TLSchemeParam$schemeParam *arg = [[TLSchemeParam$schemeParam alloc] init];",3083],["[fields addObject:arg];",3083],["arg.type = @\"string\";",480],["[acceptArgs setValue:arg forKey:ARG_KEY];",486],["TiFile *file = (TiFile*)arg;",518],["TiBlob *blob = (TiBlob*)arg;",519],["TiThreadPerformOnMainThread(^{[proxy _dispatchWithObjectOnUIThread:arg];}, YES);",678],["image = (UIImage*)arg;",717],["NSArray *arg = [NSArray arrayWithObjects:key,firstarg,secondarg,target,nil];",900],["arg.type = @\"int\";",1059]],"useCount":75320},{"word":"argc","context":[["int main(int argc, const char * argv[])",2219],["return NSApplicationMain(argc, argv);",2310],["int main(int argc, const char * argv[]) {",2874],["int main(int argc, char *argv[]) {",3055],["int main(int argc, char *argv[])",8723],["int main(int argc, char * argv[])",12959],["int main(int argc, char * argv[]) {",21373],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["int retVal = UIApplicationMain(argc, argv, nil, nil);",1295],["return NSApplicationMain(argc, (const char **)argv);",1195]],"useCount":106742},{"word":"args","context":[["[args release];",1112],["ENSURE_SINGLE_ARG(args,NSDictionary);",1281],["ENSURE_ARG_COUNT(args, 2);",1311],["% This function has no output args, see OutputFcn.",2180],["% varargout  cell array for returning output args (see VARARGOUT);",2213],["const TiValueRef args[], TiValueRef* exception)",2310],["const TiValueRef args[], TiValueRef* exception)",2578],["va_end(args);",5005],["va_list args;",5334],["va_start(args, format);",1658]],"useCount":228255},{"word":"arguments","context":[["org_xmlvm_runtime_XMLVMArray* args = (org_xmlvm_runtime_XMLVMArray*) arguments;",548],["id value = [KrollObject toID:[o context] value:arguments[c]];",656],["va_list arguments;",724],["%get level and version and check the input arguments are appropriate",816],["va_end(arguments);",839],["JSB_PRECONDITION2(ok, cx, JS_FALSE, \"Error processing arguments\");",928],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2310],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2578],["% Input arguments:",628],["// arguments",583]],"useCount":78105},{"word":"argv","context":[["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["int retVal = UIApplicationMain(argc, argv, nil, nil);",1295],["int main(int argc, const char * argv[])",2219],["return NSApplicationMain(argc, argv);",2310],["int main(int argc, const char * argv[]) {",2874],["int main(int argc, char *argv[]) {",3055],["int main(int argc, char *argv[])",8723],["int main(int argc, char * argv[])",12959],["int main(int argc, char * argv[]) {",21373],["return NSApplicationMain(argc, (const char **)argv);",1195]],"useCount":104391},{"word":"array","context":[["NSMutableArray *result = [NSMutableArray array];",2290],["return array;",6575],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["// CHECK-NEXT:          <array>",2928],["// CHECK-NEXT:          </array>",2928],["NSMutableArray *array = [NSMutableArray array];",2695],["NSMutableArray *array = [NSMutableArray array];",2695],["// CHECK-NEXT:          </array>",2676],["// CHECK-NEXT:          <array>",2676],["% varargout  cell array for returning output args (see VARARGOUT);",2213]],"useCount":228434},{"word":"as","context":[["* Performing automatic lightweight migration by passing the following dictionary as the options parameter:",690],["//  2. Altered source versions must be plainly marked as such, and must not be",642],["* This method is invoked by a YapDatabaseReadWriteTransaction as a post-operation-hook.",727],["The species values are given as amounts of substance to make it easier to",774],["use the model in a discrete stochastic simulator, but (as per usual SBML",776],["% Use as",4409],["* particular file as subject to the \"Classpath\" exception as provided",845],["* particular file as subject to the \"Classpath\" exception as provided",845],["The initial conditions are as follows:",1186],["* (delegate) which was specified as when the choreo execution was initiated.",1952]],"useCount":188187},{"word":"assert","context":[["assert(0);",1302],["#include <assert.h>",886],["assert(strcmp(e.identifier,'mexopencv:error'));",884],["assert(false);",715],["assert(NO);",516],["assert(isequalRel(lonper,  9.999991000000e+05, TOL));",489],["assert(isequalRel(arglat,  9.999991000000e+05, TOL));",489],["assert(isequalRel(truelon, 9.999991000000e+05, TOL));",489],["assert(0);",1795],["assert([NSThread isMainThread]);",301]],"useCount":44559},{"word":"assign","context":[["@property (readwrite, nonatomic, assign) NSStringEncoding stringEncoding;",451],["@property (nonatomic, assign) unsigned long long bodyContentLength;",246],["//We do not retain the Class, but simply assign them.",445],["@property (nonatomic, assign) NSStringEncoding stringEncoding;",407],["@property (nonatomic, assign) BOOL hasInitialBoundary;",281],["@property (nonatomic, assign) BOOL hasFinalBoundary;",281],["// Initialize interfaces if necessary and assign tib to implementedInterfaces",274],["@property (nonatomic, assign) NSTimeInterval delay;",269],["@property (readonly, nonatomic, assign) unsigned long long contentLength;",252],["@property (nonatomic, assign) NSUInteger numberOfBytesInPacket;",243]],"useCount":37802},{"word":"at","context":[["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["* WARNING: This is generated code. Modify at your own risk and without support.",938],["//TODO: You know, we can probably nip this in the bud and do this at a lower level,",864],["** use the contact form at http://qt.digia.com/contact-us.",631],["*          Felix Paul KÃ¼hne <fkuehne at videolan dot org>",578],["// Prevent more than one request from asking for credentials at once",524],["//at this point we're just going to fail",451],["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["NSLog(@\"[ERROR] couldn't load imageview image: %@ at position: %d\",theurl,position);",451],["% do the general cleanup and bookkeeping at the end of the function",952]],"useCount":132926},{"word":"atIndex","context":[["[invocation setArgument:&length atIndex:4];",493],["[invocation setArgument:&size atIndex:3];",496],["[inv setArgument:&arg2 atIndex:3];",1058],["[inv setArgument:&arg1 atIndex:2];",1058],["[invocation setArgument:&callback atIndex:5];",487],["[invocation setArgument:&buffer atIndex:2];",486],["[invocation setArgument:&offset atIndex:3];",486],["[invoke setArgument:&callback atIndex:5];",472],["[invoke setArgument:&size atIndex:3];",472],["[invoke setArgument:&buffer atIndex:2];",472]],"useCount":60446},{"word":"attribute","context":[["attribute:NSLayoutAttributeLeading",1397],["attribute:NSLayoutAttributeNotAnAttribute",1739],["attribute:NSLayoutAttributeLeft",1818],["attribute:NSLayoutAttributeWidth",2687],["attribute:NSLayoutAttributeHeight",2741],["attribute:NSLayoutAttributeCenterY",2848],["attribute:NSLayoutAttributeCenterX",3041],["attribute:NSLayoutAttributeBottom",3279],["attribute:NSLayoutAttributeTop",3489],["attribute:NSLayoutAttributeRight",1670]],"useCount":63290},{"word":"attributes","context":[["if ([attributes hasPrefix:@\"T@\"])",437],["attributes:attributes];",486],["if (attributes) {",536],["NSMutableDictionary *attributes = [NSMutableDictionary dictionary];",615],["attributes:attributes",639],["attributes:attributes",639],["attributes:@{",889],["return attributes;",1998],["attributes:nil",2285],["attributes:attributes];",486]],"useCount":77789},{"word":"autorelease","context":[["return [font autorelease];",837],["// Have to autorelease because we need to hold onto it for throwing the exception",1215],["return [result autorelease];",4353],["TiBuffer* tempBuffer = [[[TiBuffer alloc] _initWithPageContext:[self executionContext]] autorelease];",1199],["return [buffer autorelease];",1827],["[self autorelease];",2434],["NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];",1128],["[name autorelease];",902],["keyEquivalent:@\"\"] autorelease];",847],["autorelease];",3273]],"useCount":147691},{"word":"autoreleasepool","context":[["@autoreleasepool {",61703],["dispatch_async(socketQueue, ^{ @autoreleasepool {",1645],["dispatch_async(delegateQueue, ^{ @autoreleasepool {",1450],["@autoreleasepool{",846],["@autoreleasepool",417],["dispatch_async(asyncSocket->socketQueue, ^{ @autoreleasepool {",392],["{ @autoreleasepool",344],["dispatch_block_t block = ^{ @autoreleasepool {",3000],["@autoreleasepool",3060],["@autoreleasepool {",3108]],"useCount":83224},{"word":"available","context":[["%   other modules (such as MATLAB code and MEX-files) available in a",264],["% The Princeton MVPA toolbox is available free and",243],["% This file is part of VLFeat, available under the terms of the",263],["// 1) Read all available data.",271],["%   This file is part of libflame and is available under the 3-Clause",306],["% check that the required low-level toolbox is available",331],["% This file is part of the VLFeat library and is made available under",398],["// Read type #1 - read all available data",422],["available: visit www.juce.com for more information.",526],["LogWarn(@\"%@ - Method only available from within the context of a performBlock: invocation\", THIS_METHOD);",848]],"useCount":31056},{"word":"awakeFromNib","context":[["-(void)awakeFromNib {",505],["- (void)awakeFromNib",10073],["-(void)awakeFromNib{",662],["- (void) awakeFromNib {",677],["- (void)awakeFromNib{",741],["-(void)awakeFromNib",1078],["- (void)awakeFromNib {",13177],["- (void) awakeFromNib",1161],["- (void)awakeFromNib {",1322],["[super awakeFromNib];",8787]],"useCount":40729},{"word":"axis","context":[["axis equal;",1817],["axis off;",1778],["axis off",2748],["axis square",2801],["axis tight;",1600],["axis image",1282],["axis image;",1057],["axis square;",851],["axis tight",2996],["axis equal",3209]],"useCount":61389},{"word":"b","context":[["<b>Note</b>",607],["<b>Note</b>",607],["[ n, x, y, z, w ] = gen_oh ( 6, n, a, b, v, x, y, z, w );",723],["b = uicontrol('Parent',a, ...",756],["CGFloat r, g, b, a;",770],["if (b) {",688],["CGFloat r,g,b,a;",899],["return b;",1362],["<b>&#21442;&#12288;&#29031;</b>",599],["<b>&#21442;&#12288;&#29031;</b>",599]],"useCount":130676},{"word":"back","context":[["// for itself when the proxy serialization occurs from native back",450],["- (void)back {",268],["- (IBAction)back:(id)sender {",279],["// Store the completionhandler till we can come back and send appropriate message.",558],["// make space for the new audio data then back out",244],["// TODO: This is a dumb convention. Go back and fix it.",237],["- (void)back",586],["//TODO: Call back to the proxy?",434],["% This version is only used for back-ends for which there is no",303],["// this method will allow a proxy to return a different object back",450]],"useCount":33788},{"word":"background","context":[["// this happens while we are running ( in the background, or from within our own app )",597],["// Black base color for background matches the native apps",561],["% Hint: listbox controls usually have a white background on Windows.",620],["If your application supports background execution, called instead of applicationWillTerminate: when the user quits.",337],["// check to see if the background is a dark color and if so, we want to",469],["// Set selected+over background: IB lack !",403],["% Hint: slider controls usually have a light gray background.",789],["// Draw background",794],["% Hint: popupmenu controls usually have a white background on Windows.",2084],["% Hint: edit controls usually have a white background on Windows.",8913]],"useCount":46236},{"word":"backgroundColor","context":[["self.backgroundColor = [UIColor clearColor];",11515],["self.view.backgroundColor = [UIColor whiteColor];",6618],["self.window.backgroundColor = [UIColor whiteColor];",5104],["label.backgroundColor = [UIColor clearColor];",3654],["self.view.backgroundColor = [UIColor clearColor];",1072],["titleLabel.backgroundColor = [UIColor clearColor];",947],["cell.backgroundColor = [UIColor whiteColor];",881],["self.backgroundColor = [UIColor whiteColor];",3517],["self.view.backgroundColor = [UIColor blackColor];",1466],["cell.backgroundColor = [UIColor clearColor];",1914]],"useCount":129257},{"word":"bar","context":[["// Update to bar determinate indicator",192],["// a.setFoo('bar')",149],["bar = XNS_SCROLL_BAR (window->vertical_scroll_bar);",146],["// form is foo.setFoo('bar','foo')",149],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["[subject sendNext:@\"bar\"];",154],["//Check if I cover status bar",187],["// Status bar",316],["UINavigationBar *bar = [UINavigationBar appearance];",132],["// message, since it just means that a menu extra (on the \"system status bar\")",141]],"useCount":43898},{"word":"base","context":[["#include \"ui/base/l10n/l10n_util_mac.h\"",1868],["#include \"ui/base/resource/resource_bundle.h\"",1618],["#include \"ui/base/l10n/l10n_util.h\"",1752],["#include \"base/sys_string_conversions.h\"",1619],["#include \"base/strings/utf_string_conversions.h\"",2072],["#include \"base/mac/scoped_nsobject.h\"",2264],["#include \"base/mac/mac_util.h\"",2280],["#include \"base/logging.h\"",4363],["#include \"base/strings/sys_string_conversions.h\"",4771],["#include \"base/mac/foundation_util.h\"",1874]],"useCount":175786},{"word":"based","context":[["// iOS is 32-bit, so we need to make sure that we convert NSNumbers to the right end type based on the number of bytes.",232],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// In a story board-based application, you will often want to do a little preparation before navigation",497],["// Flip coordinates based on the primary screen.",342],["// In a xib-based application, navigation from a table can be handled in -tableView:didSelectRowAtIndexPath:",292],["// TODO: Do we throw an exception based on arg typing here?  For now, assume we throw an exception on arg type...",236],["%                         Assessment of IP-based Applications                *",229],["% STD-based cloud screening for direct Sun measurements",211],["% This call is based on the structure of the file used to generate this",197],["// Recalculate contentSize based on current orientation",158]],"useCount":40842},{"word":"be","context":[[";Per VHA Directive 10-93-142, this routine should not be modified.",2550],["// Return NO if you do not want the item to be re-orderable.",4677],["// Return NO if you do not want the specified item to be editable.",5341],["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["// Dispose of any resources that can be recreated.",61819],[";;Per VHA Directive 10-93-142, this routine should not be modified.",1698],["NSAssert(dispatch_get_specific(IsOnSocketQueueOrTargetQueueKey), @\"Must be dispatched on socketQueue\");",1703],[";;Per VHA Directive 2004-038, this routine should not be modified.",2012],[";Per VHA Directive 2004-038, this routine should not be modified.",946],["#warning This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",1664]],"useCount":486309},{"word":"because","context":[["[self retain]; // this is because we return autoreleased and as a delegate we're not retained",244],["// the view hierarchy because the tab isn't main.  Could retrieve",223],["// NOTE: Have to fire a separate but non-'resume' event here because there is SOME information",226],["ENSURE_ARG_AT_INDEX(stream, args, 0, TiStreamProxy); // Conform to class because that's good practice",236],["// NOTE: We have to do this internal type conversion because in the id->TiValue process, a byte",238],["// NOTE: Have to fire a separate but non-'resume' event here because there is SOME information",244],["// Note that we use 'internal' methods because we have to override the normal width/height setters.",247],["{\t//This is a special case, because it IS built into the bundle despite being in the simulator.",433],["// Have to autorelease because we need to hold onto it for throwing the exception",1215],["// This method is threadsafe because it is initially called",821]],"useCount":39777},{"word":"been","context":[["NSString *msg = @\"Both IPv4 and IPv6 have been disabled. Must enable at least one protocol first.\";",298],["NSString *msg = @\"IPv6 has been disabled and specified interface doesn't support IPv4.\";",268],["NSString *msg = @\"IPv4 has been disabled and specified interface doesn't support IPv6.\";",268],["// it and probably whole client instance has been deallocated.",273],["@\"error domain should have been MSErrorDomain.\");",279],["XCTAssertNil(error, @\"error should have been nil.\");",373],["// Great strides have been take to ensure this is safe to do. Plus it's MUCH faster.",450],["// this means the pending request has been cancelled and should be",451],["// The connect operation has been cancelled.",480],["//  IMPORTANT!   This code is critical path code.  Because of this, it has been written for speed, not clarity.",487]],"useCount":41492},{"word":"before","context":[["before(^{",1396],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// Saves changes in the application's managed object context before the application terminates.",1792],["//FOR NOW, we're not dropping anything but we'll want to do before release",450],["// per doc, must stop webview load before releasing",451],["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["// Put setup code here; it will be run once, before the first test case.",479],["// In a story board-based application, you will often want to do a little preparation before navigation",497],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["DESCRIBE( before )",731]],"useCount":103293},{"word":"between","context":[["%               vector containing labels between 1 to num_labels.",162],["// Due to coordinate system shenanagins (there are multiple translations between the UIKit coordinate system",165],["* This behavior is slightly more complex between iOS 4 and iOS 5 than you might believe, and Apple's",176],["//Yes, this looks similar to canEdit, but here we need to make the distinction between moving and editing.",187],["** conditions contained in a signed written agreement between you and Nokia.",195],["// Calculate transform to map points between coordinate spaces",268],["% convert between datatypes",289],["// TODO: Clarify internal difference between nil/NSNull",350],["** a written agreement between you and Digia.  For licensing terms and",637],["// Uncomment the following line to preserve selection between presentations.",3757]],"useCount":28116},{"word":"binary","context":[["* Redistribution and use in source and binary forms, with or without modification,",435],["// Redistribution and use in source and binary forms, with or without modification,",1314],["//  Redistribution and use in source and binary forms, with or without",1673],["// Redistribution and use in source and binary forms, with or without",1714],["Redistribution and use in source and binary forms, with or without modification,",2376],["% Redistribution and use in source and binary forms, with or without",2485],["* Redistribution and use in source and binary forms, with or without",2828],["* Redistribution and use in source and binary forms, with or without",4482],["Redistribution and use in source and binary forms, with or without",5044],["modifications, in source and/or binary forms; provided that if you redistribute",455]],"useCount":36419},{"word":"blackColor","context":[["[[NSColor blackColor] set];",772],["cell.textLabel.textColor = [UIColor blackColor];",790],["return [UIColor blackColor];",771],["[button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];",664],["label.textColor = [UIColor blackColor];",611],["theWebView.backgroundColor = [UIColor blackColor];",557],["[btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];",480],["[cbutton setBackgroundColor:[UIColor blackColor]];",441],["self.view.backgroundColor = [UIColor blackColor];",1466],["self.backgroundColor = [UIColor blackColor];",872]],"useCount":30614},{"word":"block","context":[["/* Comment out the block below to over-ride */",1226],["if (block)",1232],["dispatch_async(socketQueue, block);",1405],["dispatch_sync(socketQueue, block);",2521],["dispatch_block_t block = ^{ @autoreleasepool {",3000],["if (block) {",5528],["dispatch_block_t block = ^{",6223],["block();",14772],["dispatch_sync(xmppQueue, block);",1033],["block(nil, error);",2338]],"useCount":161168},{"word":"blue","context":[["if (![self red:&r green:&g blue:&b alpha:&a]) return nil;",583],["rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];",412],["return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];",409],["return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];",409],["effectColor = [UIColor colorWithRed:r green:g blue:b alpha:EffectColorAlpha];",303],["if ([tintColor getRed:&r green:&g blue:&b alpha:NULL]) {",298],["blue:((float) b / 255.0f)",238],["[self getRed:&r green:&g blue:&b alpha:&a];",234],["CGFloat red, green, blue;",210],["CGFloat red, green, blue, alpha;",396]],"useCount":38231},{"word":"body","context":[["return body;",476],["body:(NSData *)body",551],["[request setHTTPBody:body];",383],["body:nil",331],["</body>",20935],["<body>",20896],["[self appendPartWithHeaders:mutableHeaders body:data];",606],["body: bodyParam",594],["body:(NSData *)body",551],["NSMutableData *body = [NSMutableData data];",366]],"useCount":89171},{"word":"bool","context":[["bool KrollHasInstance(TiContextRef ctx, TiObjectRef constructor, TiValueRef possibleInstance, TiValueRef* exception)",434],[":- import_module bool.",1738],["bool",708],["bool t_success;",476],["bool KrollDeleteProperty(TiContextRef ctx, TiObjectRef object, TiStringRef propertyName, TiValueRef* exception)",437],["static bool init;",436],["static bool iphone4 = NO;",418],["bool ret = false;",422],["static bool iphone_checked = NO;",418],["bool result;",403]],"useCount":102498},{"word":"boolValue","context":[["if(skipStatus) md[@\"skip_status\"] = [skipStatus boolValue] ? @\"1\" : @\"0\";",546],["if(includeEntities) md[@\"include_entities\"] = [includeEntities boolValue] ? @\"1\" : @\"0\";",858],["if ([value respondsToSelector:@selector(boolValue)])",838],["if ([TiUtils boolValue:[[self proxy] valueForKey:@\"hires\"]])",689],["return [result boolValue];",645],["return [value boolValue];",1140],["BOOL animated = [TiUtils boolValue:@\"animated\" properties:args def:YES];",481],["reverse = [TiUtils boolValue:value];",451],["if (![TiUtils boolValue:[self valueForKey:@\"enabled\"] def:YES])",636],["BOOL animated = [TiUtils boolValue:@\"animated\" properties:properties def:YES];",634]],"useCount":49933},{"word":"bottom","context":[["CGFloat b = [TiUtils floatValue:@\"bottom\" properties:dict def:0];",418],["if ((top + bottom) >= maxHeight) {",204],["bottom = maxHeight - (top + 1);",204],["NSInteger bottom = top;",204],["- (CGFloat)bottom",241],["- (CGFloat)bottom {",423],["// bottom",353],["frame.origin.y = bottom - frame.size.height;",450],["* var button = facebook.createLoginButton({bottom:10});",247],["- (void)setBottom:(CGFloat)bottom {",369]],"useCount":38015},{"word":"bounds","context":[["CGRect screenBounds = [[UIScreen mainScreen] bounds];",986],["[super frameSizeChanged:frame bounds:bounds];",1829],["[super frameSizeChanged:frame bounds:bounds];",1829],["CGRect bounds = self.bounds;",1959],["CGRect bounds = self.bounds;",1959],["-(void)frameSizeChanged:(CGRect)frame bounds:(CGRect)bounds",2512],["-(void)frameSizeChanged:(CGRect)frame bounds:(CGRect)bounds",2512],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["[TiUtils setView:child positionRect:bounds];",930]],"useCount":252873},{"word":"break","context":[["break",10432],["default: break;",1772],["}break;",1955],["//            break;",2237],["}; break;",3492],["} break;",11892],["break;",110224],["break; }",1369],["} break;",977],["break;",710800]],"useCount":891693},{"word":"browser","context":[["#include \"chrome/browser/ui/cocoa/cocoa_profile_test.h\"",787],["#include \"chrome/browser/ui/browser.h\"",1825],["#include \"chrome/browser/ui/browser.h\"",1825],["#include \"content/public/browser/web_contents.h\"",1790],["#include \"chrome/browser/profiles/profile.h\"",1720],["#import \"chrome/browser/ui/cocoa/browser_window_controller.h\"",1281],["#include \"chrome/browser/ui/browser_window.h\"",1013],["#import \"chrome/browser/ui/cocoa/cocoa_test_helper.h\"",891],["#include \"chrome/browser/browser_process.h\"",827],["#include \"chrome/browser/ui/tabs/tab_strip_model.h\"",818]],"useCount":112416},{"word":"buffer","context":[["free(buffer);",2376],["[buffer appendString:@\"{\"];",1816],["buffer:(NSMutableData *)buffer",764],["buffer:(NSMutableData *)buffer",764],["TiBuffer* buffer = nil;",940],["return buffer;",970],["NSMutableString *buffer = [[NSMutableString alloc] initWithCapacity:256];",1811],["[buffer appendString:@\"}\"];",1815],["[buffer appendString:[super description]];",1815],["return [buffer autorelease];",1827]],"useCount":127235},{"word":"bundle","context":[["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",763],["self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];",19646],["bundle:nil];",794],["if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {",815],["NSBundle *bundle = [NSBundle mainBundle];",979],["self = [super initWithNibName:nil bundle:nil];",1054],["if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {",1061],["NSBundle *bundle = [NSBundle bundleForClass:[self class]];",1434],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",3313],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767]],"useCount":83596},{"word":"but","context":[["//We do not retain the Class, but simply assign them.",445],["// TODO: Android also attempts to parse the ref... but why would the ref ever contain a query...?",488],["implied, are granted by Apple herein, including but not limited to any",1582],["use the model in a discrete stochastic simulator, but (as per usual SBML",776],["appreciated but is not required.",505],["// but after we've detached our view.  In which case, we need to just ignore this",451],["//Should be rare, but also useful if arguments are used improperly.",450],["//FOR NOW, we're not dropping anything but we'll want to do before release",450],["//It's likely to fail, but that way we pass it on to error handling.",449],["//to cause the bug to go away, but is this really the right thing to do? Shouldn't we have a better",449]],"useCount":80569},{"word":"button","context":[["button.transform = CGAffineTransformIdentity;",1385],["[self.view addSubview:button];",1238],["[button setTitle:title forState:UIControlStateNormal];",1060],["[button updateImage];",988],["return button;",3891],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["for (LauncherButton* button in buttonPage)",3729],["UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];",2640],["[self addSubview:button];",2315],["[button sizeToFit];",2113]],"useCount":209160},{"word":"buttonIndex","context":[["if (buttonIndex == 0) {",1857],["switch (buttonIndex) {",1618],["if (buttonIndex == 1) {",1592],["- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex",1427],["- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {",1008],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {",625],["- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex",603],["- (void)actionSheet:(UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex",514],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex",2145],["- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {",1620]],"useCount":32110},{"word":"buttons","context":[["for (NSArray* buttonPage in buttons)",3286],["[buttons release];",956],["buttons = [[NSMutableArray alloc] init];",463],["if (buttons)",445],["[buttons removeObjectAtIndex:i];",444],["[buttons addObject:[NSMutableArray array]];",443],["BOOL isLastPage = pageIndex == [buttons count]-1;",443],["NSMutableArray* buttonPage = [buttons objectAtIndex:pageIndex];",443],["NSArray* buttonPage = [buttons objectAtIndex:pageIndex];",443],["[buttons addObject:nextButtonPage];",443]],"useCount":40339},{"word":"by","context":[["* This method is used by `JSONModel`.",1156],["implied, are granted by Apple herein, including but not limited to any",1582],["In consideration of your agreement to abide by the following terms, and",1689],[";*** Start of code by-passed by compiler",1843],[";*** End of code by-passed by compiler ***",1843],[";*** End of code by-passed by compiler ***",1843],["//  Generated by the J2ObjC translator.  DO NOT EDIT!",7237],["//  Created by ___FULLUSERNAME___ on ___DATE___.",2243],["//  Created by Rob Amos.",1933],[";*** Start of code by-passed by compiler",1843]],"useCount":320002},{"word":"bytes","context":[["memcpy(bytes+position, &val, size);",1245],["memcpy(bytes+position, &(val.sf.v), size);",830],["free(bytes);",583],["const void* bytes = [data bytes];",478],["const void* bytes = [data bytes];",478],["void* bytes = [data mutableBytes];",476],["void* bytes = malloc(subdataRange.length);",472],["[tempBuffer setData:[NSMutableData dataWithBytesNoCopy:bytes length:subdataRange.length freeWhenDone:YES]];",472],["NSCParameterAssert(encodeState->atIndex < encodeState->stringBuffer.bytes.length);",452],["void* bytes = [[dest data] mutableBytes];",415]],"useCount":82443},{"word":"c","context":[["c=0; return",781],["c++;",1755],["return c;",2276],["for c = 1:10",5908],["case 'c':",1232],["URShiftAssignLong(&c, 32);",800],["char c;",1184],["* (c) Olivier Poitrey <rs@dailymotion.com>",887],["c = 0;",866],["return [NSNumber numberWithChar:c];",822]],"useCount":209485},{"word":"cache","context":[["// honor cache control parameters - however, we're only caching",449],["RELEASE_TO_NIL(cache);",449],["// we don't have it local or in the cache so we need to fetch it remotely",449],["// we want to be able to cache remote images so we need to",449],["range = [cacheControl rangeOfString:@\"no-cache\"];",449],["if (cache==nil)",450],["cache = [[NSCache alloc] init];",474],["[cache removeAllObjects];",491],["// cache it",524],["return cache;",540]],"useCount":52349},{"word":"call","context":[["//subclasses need to call super if overriden",450],["//Common exceptions to throw when the function call was improper",450],["// Synchronize the cleanup call on the main thread in case",589],["// TODO: Throw exception, or call callback?",472],["// Synchronize the cleanup call on the main thread in case",489],["// since we call this alot, cache it",419],["// you *must* call the superclass",357],["-(id)call:(NSArray*)args",624],["id result = [o call:args];",656],["// can't call an abstract method",1485]],"useCount":64855},{"word":"callback","context":[["if (callback) {",1687],["if(callback != nil) {",1013],["[self _fireEventToListener:@\"read\" withObject:event listener:callback thisObject:nil];",1205],["[module _fireEventToListener:@\"result\" withObject:event listener:callback thisObject:nil];",1222],["[self _fireEventToListener:@\"pump\" withObject:event listener:callback thisObject:nil];",1290],["KrollCallback* callback = [info valueForKey:@\"callback\"];",1458],["KrollCallback* callback = [info valueForKey:@\"callback\"];",1458],["if (callback != nil) {",3970],["[self _fireEventToListener:@\"write\" withObject:event listener:callback thisObject:nil];",962],["[self _fireEventToListener:@\"writeToStream\" withObject:event listener:callback thisObject:nil];",1661]],"useCount":109804},{"word":"callbackId","context":[["[self.commandDelegate sendPluginResult:pluginResult callbackId:callbackId];",683],["[self.commandDelegate sendPluginResult:pluginResult callbackId:callbackId];",683],["[self.commandDelegate sendPluginResult:result callbackId:callbackId];",937],["[self.commandDelegate sendPluginResult:result callbackId:callbackId];",937],["NSString* callbackId = command.callbackId;",1013],["NSString* callbackId = command.callbackId;",1013],["[self.commandDelegate sendPluginResult:result callbackId:command.callbackId];",2381],["[self.commandDelegate sendPluginResult:result callbackId:command.callbackId];",2381],["[self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];",6539],["[self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];",6539]],"useCount":44187},{"word":"called","context":[["// This is called by +initialize so there is no need to worry",465],["// TODO: Put this in the write()/read() wrappers when they're being called consistently, blah blah blah",486],["* This method will be called when logging model object using `NSLog`.",565],["// all plugins will get the notification, and their handlers will be called",587],["// called within this class",717],["// This method is threadsafe because it is initially called",821],["* TMBChoreographyDelegate protocol method - called when this Choreo's execution",1952],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["% handles    empty - handles not created until after all CreateFcns called",13063]],"useCount":146211},{"word":"can","context":[["/** If you need to do any extra app-specific initialization, you can do it here",600],["// you can do so here.",602],["//NOTE: we need to return nil here since in JS you can ask for properties",661],["If you encounter schema incompatibility errors during development, you can reduce their frequency by:",694],["//TODO: You know, we can probably nip this in the bud and do this at a lower level,",864],["* (you can get this by typing `ifconfig` into the terminal and selecting the",1052],["// can't call an abstract method",1485],["it(@\"can read\", ^{",1609],["it(@\"can do maths\", ^{",1609],["// Dispose of any resources that can be recreated.",61819]],"useCount":203988},{"word":"cancel","context":[["- (void)cancel {",2037],["- (void)cancel",1865],["[self.connection cancel];",1504],["[self cancel];",1439],["[super cancel];",1223],["[connection cancel];",1083],["-(void)cancel",1049],["[operation cancel];",854],["[request cancel];",791],["[task cancel];",743]],"useCount":42137},{"word":"case","context":[["case 3",8192],["case 4:",7230],["case 3:",10615],["case 2",11194],["case 1",12078],["// This is an example of a functional test case.",15558],["// This is an example of a performance test case.",15613],["case 2:",16506],["case 0:",19628],["case 1:",22461]],"useCount":961741},{"word":"catch","context":[["catch",33010],["catch ne_eo;",1841],["@catch (NSException *exception) {",9894],["@catch(NSException * ex)",6704],["catch ME",6507],["catch err",2679],["catch e",2230],["} @catch (NSException *exception) {",2193],["@catch (NSException * e)",2038],["@catch (NSException * e)",1981]],"useCount":112918},{"word":"cell","context":[["cell.accessoryType = UITableViewCellAccessoryNone;",3918],["// Configure the cell...",4019],["UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];",4058],["cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;",4866],["if (!cell) {",7226],["cell.selectionStyle = UITableViewCellSelectionStyleNone;",7374],["if (cell == nil) {",11957],["if (cell == nil)",2388],["% varargout  cell array for returning output args (see VARARGOUT);",2213],["return cell;",61203]],"useCount":349783},{"word":"cellForRowAtIndexPath","context":[["UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];",412],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436],["-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",607],["cellForRowAtIndexPath:(NSIndexPath *)indexPath {",650],["cellForRowAtIndexPath:(NSIndexPath *)indexPath",733],["UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];",1262],["-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{",1265],["-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",1467],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{",2598],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978]],"useCount":48775},{"word":"center","context":[["self.center = center;",1774],["CGPoint center = self.center;",1650],["CGPoint center = self.center;",1650],["<p style=\"text-align: center\">",1589],["NSNotificationCenter *center = [NSNotificationCenter defaultCenter];",1286],["return self.center.x;",1260],["return self.center.y;",1249],["'HorizontalAlignment','center',...",982],["[center addObserver:self",980],["self.center = center;",1774]],"useCount":85321},{"word":"cfg","context":[["setappdata(h, 'cfg', cfg);",312],["cfg = [];",2885],["%   cfg.inputfile   =  ...",713],["% check if the input cfg is valid for this function",579],["%   cfg.outputfile  =  ...",477],["switch cfg.method",385],["cfg=[];",366],["setappdata(h, 'cfg', cfg);",312],["if cfg.stim.photoCell",285],["Screen('FillRect', w, cfg.stim.photoCellAntiRectColor, cfg.stim.photoCellRect);",235]],"useCount":99097},{"word":"ch","context":[["for iSubband = 1:ch",585],["++ch;",453],["'NumberOfChannels',ch,...",361],["eventCharacter = [NSString stringWithCharacters:&ch length:1];",338],["if (*ch == '-') ++ch;",335],["if (*ch == '-') ++ch;",335],["% Authors: Christian Beckel (beckel@inf.ethz.ch), Leyna Sadamori (sadamori@inf.ethz.ch)",319],["% Authors: Christian Beckel (beckel@inf.ethz.ch), Leyna Sadamori (sadamori@inf.ethz.ch)",319],["result = isValidCodePoint(&ch);",299],["if (*ch == '-') {",272]],"useCount":34250},{"word":"change","context":[["[super observeValueForKeyPath:keyPath ofObject:object change:change context:context];",1945],["[super observeValueForKeyPath:keyPath ofObject:object change:change context:context];",1945],["change:(NSDictionary *)change",1610],["change:(NSDictionary *)change",1610],["* To run on device, change `localhost` to the IP address of your computer",1052],["if ([self.proxy _hasListeners:@\"change\"])",611],["// To change the template use AppCode | Preferences | File Templates.",458],["[self.proxy fireEvent:@\"change\" withObject:evt];",451],["//DO NOT run super shutdown here, as we want to change the behavior that TiProxy does.",427],["%  For this exercise, you will not need to change any code in this file,",423]],"useCount":53815},{"word":"channel","context":[["return channel;",202],["% Return only one channel for greyscale",110],["[self setMRL: [NSString stringWithFormat:@\"eyetv:// :eyetv-channel=%d\", chanNum]];",120],["cfg.channel = ft_channelselection(cfg.channel, hdr.label);",123],["cfg.channel = ft_channelselection(cfg.channel, hdr.label);",123],["EOAdaptorChannel *channel;",133],["if (channel) {",138],["state.channel = _channel;",194],["cfg.channel = ft_channelselection(cfg.channel, data.label);",196],["cfg.channel = ft_channelselection(cfg.channel, data.label);",196]],"useCount":28515},{"word":"char","context":[["int main(int argc, char * argv[]) {",21373],["return NSApplicationMain(argc,  (const char **) argv);",854],["int main(int argc, char *argv[])",8723],["int main(int argc, char *argv[]) {",3055],["int main(int argc, const char * argv[]) {",2874],["int main(int argc, const char * argv[])",2219],["unsigned char result[CC_MD5_DIGEST_LENGTH];",1270],["return NSApplicationMain(argc, (const char **)argv);",1195],["char c;",1184],["int main(int argc, char * argv[])",12959]],"useCount":244252},{"word":"check","context":[["// do click 2x to scale it up so we have to check for this method",449],["// check for required fields",1340],["%get level and version and check the input arguments are appropriate",816],["% argument check",616],["% check if the input cfg is valid for this function",579],["% check if the input data is valid for this function",560],["// check to see if the background is a dark color and if so, we want to",469],["// first check to see if we're attempting to load a file from the",451],["// first check to see if the property is defined by a <key>:withObject: signature",450],["// check to see if we're cacheable or not",449]],"useCount":69607},{"word":"child","context":[["for (CC3Node* child in children) {",261],["- (id)outlineView:(NSOutlineView *)outlineView child:(NSInteger)index ofItem:(id)item",306],["return child;",330],["NSAssert( child != nil, @\"Argument must be non-nil\");",369],["-(UIView *) parentViewForChild:(TiViewProxy *)child",447],["for (UIView *child in [container subviews])",451],["for (UIView *child in [self subviews])",477],["// add layer as a child to scene",512],["[TiUtils setView:child positionRect:bounds];",930],["[child removeFromSuperview];",233]],"useCount":51113},{"word":"children","context":[["[[oldProxy children] enumerateObjectsUsingBlock:^(TiViewProxy *oldSubProxy, NSUInteger idx, BOOL *stop) {",154],["// means we need to force the layout of our children",176],["NSArray *children = [self children];",200],["NSArray *children = [self children];",200],["// cocos2d will automatically release all the children (Label)",223],["children:{",223],["NSArray *oldSubProxies = [oldProxy children];",154],["for (CC3Node* child in children) {",261],["return children;",277],["NSArray *subProxies = [newProxy children];",308]],"useCount":31542},{"word":"chrome","context":[["#include \"chrome/browser/browser_process.h\"",827],["#include \"chrome/common/chrome_switches.h\"",878],["#import \"chrome/browser/ui/cocoa/cocoa_test_helper.h\"",891],["#include \"chrome/app/chrome_command_ids.h\"",923],["#include \"chrome/grit/generated_resources.h\"",932],["#include \"chrome/common/pref_names.h\"",977],["#include \"chrome/browser/ui/browser_window.h\"",1013],["#import \"chrome/browser/ui/cocoa/browser_window_controller.h\"",1281],["#include \"chrome/browser/profiles/profile.h\"",1720],["#include \"chrome/browser/ui/browser.h\"",1825]],"useCount":85710},{"word":"clang","context":[["#pragma clang diagnostic pop",1617],["#pragma clang diagnostic push",18802],["#pragma clang diagnostic pop",18635],["#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"",5393],["#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"",3209],["#pragma clang diagnostic ignored \"-Wgnu\"",1715],["#pragma clang diagnostic push",1609],["#pragma clang diagnostic ignored \"-Wincomplete-implementation\"",1160],["#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"",1032],["#pragma clang diagnostic ignored \"-Wundeclared-selector\"",1016]],"useCount":62865},{"word":"class","context":[["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["if ([value isKindOfClass:[NSString class]])",3488],["if ([properties isKindOfClass:[NSDictionary class]])",3389],["% Instantiation of target class",3068],["if ([value isKindOfClass:[NSDictionary class]])",2268],["* completes successfully. This class in turn calls the same function on the object",1952],["NSBundle *bundle = [NSBundle bundleForClass:[self class]];",1434]],"useCount":530056},{"word":"clear","context":[["clear all",6780],["clear; close all; clc;",418],["clear all;",5787],["clear",4186],["clear;",2796],["clear all; close all; clc;",480],["- (void)clear",550],["clear ; close all; clc",604],["- (void)clear {",770],["[self clear];",825]],"useCount":72814},{"word":"clearColor","context":[["_titleLabel.backgroundColor = [UIColor clearColor];",741],["self.backgroundColor = [UIColor clearColor];",11515],["return [UIColor clearColor];",700],["view.backgroundColor = [UIColor clearColor];",720],["if ((result == [UIColor clearColor]))",836],["titleLabel.backgroundColor = [UIColor clearColor];",947],["[self setBackgroundColor:[UIColor clearColor]];",1066],["self.view.backgroundColor = [UIColor clearColor];",1072],["cell.backgroundColor = [UIColor clearColor];",1914],["label.backgroundColor = [UIColor clearColor];",3654]],"useCount":60456},{"word":"client","context":[["[client URLProtocolDidFinishLoading:self];",538],["return client;",1146],["[client executeWithCompletionHandler:^(id result, NSHTTPURLResponse *response, MOZUAPIError *error) {",680],["MOZUClient *client = [[MOZUClient alloc] initWithResourceURLComponents:url verb:verb];",645],["client.context = self.apiContext;",640],["client.JSONParser = ^id(NSString *jsonResult) {",489],["MSClient *filteredClient = [client clientWithFilter:testFilter];",427],["// Post a notification to notify the client that the network reachability changed.",389],["[delegate_ client:client didFailWithException:exception];",308],["if([delegate_ respondsToSelector:@selector(client:didFailWithException:)]){",308]],"useCount":37916},{"word":"close","context":[["close all;",6676],["[db close];",1852],["close(h);",1037],["close(socketFD);",1136],["- (void)close",1253],["- (void)close {",1539],["[self close];",1701],["[rs close];",3062],["[self close];",4439],["close all",8665]],"useCount":106891},{"word":"cocoa","context":[["#include \"chrome/browser/ui/cocoa/cocoa_profile_test.h\"",787],["#import \"chrome/browser/ui/cocoa/toolbar/toolbar_controller.h\"",598],["#import \"chrome/browser/ui/cocoa/cocoa_test_helper.h\"",891],["#import \"chrome/browser/ui/cocoa/browser_window_controller.h\"",1281],["#import \"chrome/browser/ui/cocoa/view_id_util.h\"",409],["#import \"chrome/browser/ui/cocoa/themed_window.h\"",512],["#import \"chrome/browser/ui/cocoa/info_bubble_window.h\"",503],["#import \"chrome/browser/ui/cocoa/location_bar/location_bar_view_mac.h\"",500],["#import \"chrome/browser/ui/cocoa/info_bubble_view.h\"",485],["struct vo_cocoa_state *s = vo->cocoa;",477]],"useCount":42588},{"word":"code","context":[["// Drawing code",7599],["// Initialization code here.",1982],["% Begin initialization code - DO NOT EDIT",2506],["% End initialization code - DO NOT EDIT",2519],["// Replace this implementation with code to handle the error appropriately.",2559],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["// Initialization code",17240],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put the code you want to measure the time of here.",15555]],"useCount":324851},{"word":"coder","context":[["- (void)encodeWithCoder:(NSCoder *)coder {",3407],["[super encodeWithCoder:coder];",3161],["self = [super initWithCoder:coder];",2315],["- (instancetype)initWithCoder:(NSCoder *)coder",1097],["- (void)encodeWithCoder:(NSCoder *)coder",1055],["- (id)initWithCoder:(NSCoder *)coder {",989],["- (id)initWithCoder:(NSCoder *)coder",850],["-(void)encodeWithCoder:(NSCoder *)coder",660],["[super encodeRestorableStateWithCoder:coder];",596],["-(void)encodeWithCoder:(NSCoder *)coder {",517]],"useCount":49029},{"word":"col","context":[["// CHECK-NEXT:            <key>col</key><integer>5</integer>",597],["// CHECK-NEXT:       <key>col</key><integer>3</integer>",534],["// CHECK-NEXT:          <key>col</key><integer>3</integer>",473],["// CHECK-NEXT:            <key>col</key><integer>7</integer>",426],["// CHECK-NEXT:            <key>col</key><integer>3</integer>",1888],["// CHECK-NEXT:            <key>col</key><integer>3</integer>",1720],["// CHECK-NEXT:            <key>col</key><integer>7</integer>",392],["// CHECK-NEXT:            <key>col</key><integer>8</integer>",390],["// CHECK-NEXT:            <key>col</key><integer>4</integer>",343],["// CHECK-NEXT:            <key>col</key><integer>5</integer>",1768]],"useCount":34733},{"word":"collection","context":[["collection:nil",910],["__unsafe_unretained NSString *collection = collectionKey.collection;",280],["YapCollectionKey *cacheKey = [[YapCollectionKey alloc] initWithCollection:collection key:key];",464],["return collection;",286],["collection:nil];",381],["YapDatabaseString _collection; MakeYapDatabaseString(&_collection, collection);",372],["if (collection == nil) collection = @\"\";",367],["if (collection == nil) collection = @\"\";",367],["inCollection:(NSString *)collection",326],["//Remove null values from header collection in order to omit from request",295]],"useCount":29244},{"word":"collectionView","context":[["[self.collectionView reloadData];",4320],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {",2207],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {",2207],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section",2365],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section",2365],["- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath",1441],["- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath",1441],["- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {",1302],["- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView",1231],["- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {",1017]],"useCount":77363},{"word":"color","context":[["return color;",3478],["CGContextSetFillColorWithColor(context, [color CGColor]);",1278],["[color setFill];",1147],["if (color) {",1083],["[color set];",930],["// is displayed on nil-color bars.",836],["UIColor * result = [color _color];",836],["-(void)setBackgroundColor_:(id)color",666],["UIColor *color;",625],["_color = color;",585]],"useCount":138855},{"word":"column","context":[["% Hint: theta(:) will return a column vector.",170],["vRCrequiredErr(column) ;",258],["vRCvalidateDDerr(column,errmsg) ;",265],["error('Input can only have one column');",327],["NSInteger column = round(x/dragButton.frame.size.width);",443],["NSInteger itemIndex = (row * self.columnCount) + column;",449],["%               Note that X is a matrix where each column is a",161],["% ARG t2 : column inputs for which kernel is to be computed.",181],["%\tIndices: row and column indices of the cell(s) edited",177],["column = 0;",194]],"useCount":30968},{"word":"com","context":[["*  http://aws.amazon.com/apache2.0",4401],["% This file is from pmtk3.googlecode.com",1587],["* (c) Olivier Poitrey <rs@dailymotion.com>",887],["%     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit",839],["//\thttp://www.samurai-framework.com",835],["the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).",798],["This code was generated by Vipr (https://github.com/microsoft/vipr) using",798],["* or visit www.oracle.com if you need additional information or have any",772],["%     Author: Tom Doel, 2012.  www.tomdoel.com",734],["//\thttp://www.bee-framework.com",723]],"useCount":134425},{"word":"command","context":[["NSString* callbackId = command.callbackId;",1013],["return [super execute:command];",883],["- (BOOL)execute:(CDVInvokedUrlCommand*)command",870],["self.callbackId = command.callbackId;",569],["callbackId:command.callbackId];",567],["% Get default command line output from handles structure",2229],["[self.commandDelegate sendPluginResult:result callbackId:command.callbackId];",2381],["% --- Outputs from this function are returned to the command line.",2400],["[self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];",6539],["% The command 'cvx_where' will show where this file is located.",1182]],"useCount":84011},{"word":"completion","context":[["[self dismissViewControllerAnimated:YES completion:nil];",13083],["} completion:^(BOOL finished) {",25009],["if (completion) {",8955],["completion:^(BOOL finished){",2394],["completion:completion];",2397],["completion:completion];",2397],["completion();",4764],["completion:nil];",5014],["} completion:nil];",5955],["completion:^(BOOL finished) {",6024]],"useCount":198851},{"word":"completionBlock","context":[["[self setUA_RequestCompletionBlock:completionBlock];",1065],["completionBlock(nil);",512],["self.completionBlock = nil;",572],["completionBlock: ^(id data, NSError *error) {",594],["if (self.completionBlock) {",616],["completion:completionBlock];",687],["if (completionBlock)",965],["if (completionBlock) {",3348],["completionBlock();",1798],["completionBlock(nil, error);",1058]],"useCount":39052},{"word":"completionHandler","context":[["completionHandler:(void (^)(NSError *error))completionHandler {",704],["completionHandler:(void (^)(NSError *error))completionHandler {",704],["if (completionHandler) {",4801],["completionHandler();",1466],["completionHandler:nil];",554],["completionHandler:handler];",651],["completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler",723],["completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler",723],["completionHandler(error);",1115],["completionHandler(result, error);",1633]],"useCount":55429},{"word":"components","context":[["#include \"components/bookmarks/browser/bookmark_model.h\"",333],["NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];",865],["NSDateComponents *components = [CURRENT_CALENDAR components:DATE_COMPONENTS fromDate:self];",865],["NSDateComponents *components = [[NSDateComponents alloc] init];",1313],["NSDateComponents *components = [[NSDate currentCalendar] components:componentFlags fromDate:self];",368],["NSDateComponents *components = [[NSDate currentCalendar] components:componentFlags fromDate:self];",368],["NSDateComponents *components;",383],["return components;",451],["return [calendar dateByAddingComponents:components toDate:self options:0];",520],["return [calendar dateFromComponents:components];",555]],"useCount":64942},{"word":"condition","context":[["[condition unlock];",2900],["[condition unlock];",2820],["[condition lock];",2670],["[condition lock];",2643],["[condition signal];",1511],["[condition signal];",1360],["RELEASE_TO_NIL(condition);",491],["RELEASE_TO_NIL(condition);",436],["//  project, commercial or otherwise, entirely at your risk, with the condition",342],["[condition wait];",307]],"useCount":31945},{"word":"conditions","context":[["The initial conditions are as follows:",1186],["% following conditions:",1414],["//  conditions:",1793],["furnished to do so, subject to the following conditions:",2964],["* furnished to do so, subject to the following conditions:",6200],["// furnished to do so, subject to the following conditions:",15183],["furnished to do so, subject to the following conditions:",1356],["* conditions:",1250],["//  furnished to do so, subject to the following conditions:",11359],["//\tfurnished to do so, subject to the following conditions:",1201]],"useCount":65071},{"word":"config","context":[["NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];",349],["#import \"config.h\"",2187],["#include \"config.h\"",1556],["#include \"config.h\"",975],["BOOL isIPv4Disabled = (config & kIPv4Disabled) ? YES : NO;",627],["BOOL isIPv6Disabled = (config & kIPv6Disabled) ? YES : NO;",627],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527],["# include \"config.h\"",467],["return config;",426],["#import \"config.h\"",338]],"useCount":30071},{"word":"connection","context":[["- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {",1187],["[self.connection cancel];",1504],["self.connection = nil;",1811],["- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {",1187],["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data",1182],["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {",1197],["- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {",1197],["- (void)connectionDidFinishLoading:(NSURLConnection *)connection",1329],["[connection release];",1265],["- (void)connectionDidFinishLoading:(NSURLConnection *)connection {",1238]],"useCount":98165},{"word":"const","context":[["static const J2ObjcMethodInfo methods[] = {",6328],["return NSApplicationMain(argc, (const char **)argv);",1195],["+ (const J2ObjcClassInfo *)__metadata {",6573],["static const J2ObjcFieldInfo fields[] = {",4514],["int main(int argc, const char * argv[]) {",2874],["const TiValueRef args[], TiValueRef* exception)",2578],["const TiValueRef args[], TiValueRef* exception)",2310],["int main(int argc, const char * argv[])",2219],["const BookmarkNode* root = model->bookmark_bar_node();",960],["return NSApplicationMain(argc,  (const char **) argv);",854]],"useCount":486179},{"word":"container","context":[["return container;",675],["if (container!=nil)",1805],["[self addSubview:container];",522],["[container addSubview:view];",495],["container = [[UIView alloc] initWithFrame:self.bounds];",455],["[self bringSubviewToFront:container];",452],["UIView *view = [[container subviews] objectAtIndex:position];",902],["RELEASE_TO_NIL(container);",902],["// the container sits on top of the image in case the first frame (via setUrl) is first",451],["return container.bounds.size.height;",451]],"useCount":34407},{"word":"content","context":[["return content;",931],["namespace content {",879],["}  // namespace content",830],["// request content type",613],["#include \"content/public/browser/web_contents.h\"",1790],["using content::WebContents;",1066],["// response content type",613],["#include \"content/public/browser/browser_thread.h\"",559],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527],["#include \"content/public/browser/render_widget_host_view.h\"",488]],"useCount":94081},{"word":"contentOffset","context":[["[self updatePagerWithContentOffset:scrollView.contentOffset];",447],["NSInteger pageIndex = MAX(floor(scrollView.contentOffset.x/scrollView.frame.size.width),0);",425],["scrollView.contentOffset = CGPointMake(pager.currentPage * scrollView.frame.size.width, 0);",443],["CGFloat newX = scrollView.contentOffset.x - scrollView.frame.size.width;",443],["return floor(scrollView.contentOffset.x/scrollView.frame.size.width);",443],["scrollView.contentOffset = CGPointMake(scrollView.frame.size.width*pageIndex, 0);",443],["CGFloat x = origin.x - scrollView.contentOffset.x;",443],["pager.currentPage = floor((contentOffset.x - pageWidth / 2) / pageWidth) + 1;",443],["CGFloat newX = scrollView.contentOffset.x + scrollView.frame.size.width;",443],["- (void)updatePagerWithContentOffset:(CGPoint)contentOffset",443]],"useCount":29626},{"word":"contentSize","context":[["return contentSize;",288],["_pagingScrollView.contentSize = [self contentSizeForPagingScrollView];",331],["[event setObject:[TiUtils sizeToDictionary:scrollView.contentSize] forKey:@\"contentSize\"];",316],["[event setObject:[TiUtils sizeToDictionary:scrollView.contentSize] forKey:@\"contentSize\"];",316],["CGSize newSize = [self contentSize];",281],["-(CGSize)contentSize",275],["CGSize contentSize = self.contentSize;",274],["CGSize contentSize = self.contentSize;",274],["if (newX <= scrollView.contentSize.width - scrollView.frame.size.width)",443],["scrollView.contentSize = CGSizeMake(numberOfPages*scrollView.frame.size.width, scrollView.frame.size.height);",443]],"useCount":28230},{"word":"contentView","context":[["@property (nonatomic, strong) UIView *contentView;",308],["self.contentView.backgroundColor = [UIColor clearColor];",319],["toItem:self.contentView",527],["[self addSubview:contentView];",417],["_contentView = contentView;",402],["[self.contentView addSubview:self.titleLabel];",387],["[self.contentView addSubview:_titleLabel];",371],["[self.contentView addSubview:label];",364],["[self addSubview:self.contentView];",355],["[cell.contentView addSubview:label];",346]],"useCount":67621},{"word":"contents","context":[["if (!contents)",380],["if (RenderWidgetHostView* rwhv = contents->GetRenderWidgetHostView())",527],["if (![fm createFileAtPath:path contents:imageData  attributes:nil]) {",327],["if (WebContents* contents =",266],["BOOL created = [fm createFileAtPath:filePath contents:[NSData data] attributes:nil];",239],["% Hints: get(hObject,'String') returns contents of edit1 as text",219],["%        str2double(get(hObject,'String')) returns contents of edit1 as a double",218],["% Hints: get(hObject,'String') returns contents of edit2 as text",200],["%        str2double(get(hObject,'String')) returns contents of edit2 as a double",199],["return contents;",290]],"useCount":37715},{"word":"context","context":[["CGContextRestoreGState(context);",6062],["CGContextRef context = UIGraphicsGetCurrentContext();",13753],["CGContextRelease(context);",3006],["CGContextFillPath(context);",3793],["[UIView beginAnimations:nil context:NULL];",3837],["if (![context isKJSThread])",4361],["CGContextStrokePath(context);",5131],["[UIView beginAnimations:nil context:nil];",6840],["CGContextSaveGState(context);",6244],["CGContextBeginPath(context);",2918]],"useCount":474832},{"word":"continue","context":[["continue;",62331],["// If we have a username and password, let's apply them to the request and continue",263],["//If we have some credentials to use let's apply them to the request and continue",263],["continue;",12108],["if(jk_parse_skip_newline(parseState)) { continue; }",282],["// will continue to increase with new models but",418],["if ([keySequence containsObject:thisKey]) continue;",450],["fprintf('\\nProgram paused. Press enter to continue.\\n');",590],["continue",7822],["fprintf('Program paused. Press enter to continue.\\n');",1769]],"useCount":103620},{"word":"control","context":[["// CHECK-NEXT:      <key>kind</key><string>control</string>",1338],["// clicks should also be handled by any control the view is embedded in.",176],["// CHECK-NEXT:      <key>kind</key><string>control</string>",1464],["control(end + 1) = control_create( ...",493],["// honor cache control parameters - however, we're only caching",449],["%\tModifier: name(s) of the modifier key(s) (i.e., control, shift) pressed",415],["SETIOF ;  ** Set device control var's",312],["// NOTE: We have to override these to do nothing so that we can control the horizontal and vertical (literally)",243],["%          kvasnica@control.ee.ethz.ch",199],["control(j) = control_create( ...",235]],"useCount":30462},{"word":"controller","context":[["if (controller!=nil)",1029],["// Pass the selected object to the new view controller.",20206],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["return controller;",2275],["- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller",954],["[self.navigationController pushViewController:controller animated:YES];",1937],["controller.delegate = self;",1154],["RELEASE_TO_NIL(controller);",781],["[controller release];",864],["// Get the new view controller using [segue destinationViewController].",19412]],"useCount":176339},{"word":"controller_","context":[["[controller_ cancel:nil];",458],["[controller_ adjustWindowHeightBy:40];",273],["[controller_ adjustWindowHeightBy:-40];",273],["[controller_ resetWindowGrowthState];",312],["[controller_ close];",407],["[controller_ showWindow:nil];",454],["CheckViewPositions(controller_);",468],["controller_ = controller;",563],["controller = controller_;",229],["[controller_ ok:nil];",267]],"useCount":27554},{"word":"copy","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["return copy;",5033],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070]],"useCount":165322},{"word":"count","context":[["count = count + 1;",1829],["count = count + 1;",1829],["int count = 0;",1871],["for (int i = 0; i < count; i++) {",2131],["count = 1;",1429],["for (i = 0; i < count; i++)",2504],["count:GPBARRAYSIZE(kValues)];",1307],["count = 0;",3417],["return count;",4494],["count++;",5039]],"useCount":429800},{"word":"create","context":[["// create proxy method invocation",450],["// create an image by masking the bitmap of the mainView content with the gradient view",478],["// function will stretch the bitmap image as required, so we can create a 1 pixel wide gradient",479],["// main view content to create the 'fade' of the reflection.  The CGImageCreateWithMask",479],["// create a 2 bit CGImage containing a gradient that will be used for masking the",482],["// create the CGGradient and then release the gray color space",485],["// create the start and end points for the gradient vector (straight down)",486],["// Implement loadView to create a view hierarchy programmatically, without using a nib.",1112],["create:YES",574],["// create the bitmap context",505]],"useCount":64152},{"word":"created","context":[["// the page context is the owning context that created (and thus owns) the proxy",450],["// So now, we cache (if we can) and then pull the created image, or just create the image if",371],["// This created TWO images in memory from the same binary data, which the system might not be",371],["// If we are being created with a page context, assume that this is also",286],["// If the coordinator doesn't already exist, it is created and the application's store added to it.",683],["// If the model doesn't already exist, it is created from the application's model.",694],["% handles    empty - handles not created until after all CreateFcns called",13063],["// don't bother firing an app event to the webview if we don't have a webview yet created",451],["if(!created) {",240],["// This gets called for sockets created via accepting, so return if the connected socket is NOT us",243]],"useCount":36650},{"word":"ctx","context":[["CGContextSaveGState(ctx);",1938],["CGContextStrokePath(ctx);",1869],["JSValueRef result = JSValueMakeUndefined(ctx);",1810],["CGContextRestoreGState(ctx);",1795],["KrollContext *ctx = GetKrollContext(jsContext);",1946],["CGContextRef ctx = UIGraphicsGetCurrentContext();",2812],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-14);",3050],["return JSValueMakeUndefined(ctx);",6675],["KrollContext *ctx = GetKrollContext(jsContext);",1680],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-15);",1352]],"useCount":100003},{"word":"current","context":[["BOOL newValue = (current != propvalue && ![current isEqual:propvalue]);",350],["if (newValue && [current isKindOfClass:[TiProxy class]]) {",350],["BOOL newValue = (current != propvalue && ![current isEqual:propvalue]);",350],["oldValue:current",350],["[self forgetProxy:current];",435],["current = [[[dynprops objectForKey:key] retain] autorelease];",450],["if (current==[NSNull null])",450],["current = nil;",513],["* The schema for the persistent store is incompatible with current managed object model.",696],["id current = nil;",555]],"useCount":76592},{"word":"cursor","context":[["while (cursor && (cursor != Nu__null)) {",424],["cursor:(NSString *)cursor",343],["cursor = [cursor cdr];",935],["cursor = cursor->ifa_next;",313],["cursor:(NSString *)cursor",343],["while (cursor && (cursor != Nu__null)) {",424],["if(cursor) md[@\"cursor\"] = cursor;",462],["if(cursor) md[@\"cursor\"] = cursor;",462],["cursor = [cursor cdr];",935],["if(cursor) md[@\"cursor\"] = cursor;",462]],"useCount":29229},{"word":"customization","context":[["// Set up toolbar properties: Allow customization, give a default display mode, and remember state in user defaults",39],["//--------- End of customization -----------",38],["// Set the text label to be displayed in the toolbar and customization palette",42],["*  Override point for customization.",52],["//    // Override point for customization after application launch.",56],["* Optional override hook for complete customization.",86],["// Override point for customization after application launch",89],["// Override point for customization after app launch",209],["// Override point for customization after application launch.",367],["// Override point for customization after application launch.",31855]],"useCount":33160},{"word":"d","context":[["return d;",1985],["I X=\" \",DV[\"d\",DV'[\"P\",$D(^DISV(DUZ,\"DIE\",DLB)) S X=^(DLB) I DV'[\"D\",DV'[\"S\" W \"  \"_X",980],["NSLog(@\"RETAIN: %@ (%d)\",self,[self retainCount]+1);",492],["[self throwException:[NSString stringWithFormat:@\"Invalid endianness: %d\", byteOrder]",512],["XCTAssertTrue(foundElement, @\"Couldn't find element with text '%@' in %d seconds\", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);",1114],["case 'd':",1149],["double d;",971],["d = r + s",5887],["return [NSNumber numberWithDouble:d];",839],["YDBLogError(@\"Error creating '%@': %d %s\", THIS_METHOD, status, sqlite3_errmsg(db));",578]],"useCount":218947},{"word":"data","context":[["if (data) {",7250],["% handles    structure with handles and user data (see GUIDATA)",35747],["#pragma mark - Table view data source",12481],["return data;",6600],["// Release any cached data, images, etc that aren't in use.",5076],["// Delete the row from the data source",4362],["data:(NSData *)data",2799],["data:(NSData *)data",2799],["if (data == nil) {",2386],["if (!data) {",2116]],"useCount":686196},{"word":"dataSource","context":[["operation.dataSource = dataSource;",837],["self.dataSource = self;",965],["RKObjectMappingOperationDataSource *dataSource = [RKObjectMappingOperationDataSource new];",886],["self.tableView.dataSource = self;",3127],["tableView.dataSource = self;",1616],["_tableView.dataSource = self;",2176],["_collectionView.dataSource = self;",768],["self.collectionView.dataSource = self;",836],["operation.dataSource = dataSource;",837],["_dataSource = dataSource;",862]],"useCount":42184},{"word":"date","context":[["double elapsed = [[NSDate date] timeIntervalSinceDate:reftime];",656],["pronr.  #jobs rel.date duedate tardcost  MPM-Time",11182],["return date;",2697],["NSDate *now = [NSDate date];",2671],["NSDate *date = [NSDate date];",1395],["NSDate *date = [NSDate date];",1395],["NSDate *date = [NSDate dateWithTimeIntervalSinceNow:TIMEOUT_SECONDS];",1224],["while ([date timeIntervalSinceNow] > 0 && !foundElement && !redboxError) {",1211],["NSDate *reftime = [NSDate date];",658],["} reverseBlock:^id(NSDate *date) {",943]],"useCount":115372},{"word":"dateFormatter","context":[["NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];",4741],["[dateFormatter setDateStyle:NSDateFormatterMediumStyle];",492],["NSDateFormatter *dateFormatter = [NSDateFormatter new];",587],["[dateFormatter release];",615],["[dateFormatter setLocale:USLocale];",836],["dateFormatter = [[NSDateFormatter alloc] init];",1348],["[dateFormatter setDateFormat:@\"yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000\"];",836],["return dateFormatter;",885],["[dateFormatter setTimeZone:timeZone];",939],["NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];",1128]],"useCount":36026},{"word":"db","context":[["db:db",592],["if ([db open]) {",589],["YDBLogError(@\"Error creating '%@': %d %s\", THIS_METHOD, status, sqlite3_errmsg(db));",578],["[db open];",554],["db:db",592],["int status = sqlite3_prepare_v2(db, stmt, stmtLen+1, statement, NULL);",466],["[queue inTransaction:^(FMDatabase *db, BOOL *rollback) {",667],["[queue inDatabase:^(FMDatabase *db) {",984],["[db close];",1852],["status, sqlite3_errmsg(databaseTransaction->connection->db));",961]],"useCount":48584},{"word":"dealloc","context":[["-(void)dealloc",20671],["- (void) dealloc {",7756],["[super dealloc];",14721],["- (void) dealloc",17172],["- (void)dealloc {",43504],["[super dealloc];",97664],["-(void)dealloc {",3929],["- (void)dealloc {",5821],["- (void)dealloc",6086],["- (void)dealloc",48653]],"useCount":297449},{"word":"decoder","context":[["if ((self = [super initWithCoder:decoder])) {",283],["__success = [[decoder decodeObjectForKey: @\"success\"] retain_stub];",280],["JSONDecoder *decoder = NULL;",277],["if(decoder != NULL) { _JSONDecoderCleanup(decoder); }",275],["if ([decoder containsValueForKey: @\"success\"])",421],["- (instancetype)initWithCoder:(NSCoder *)decoder {",841],["- (id)initWithCoder:(NSCoder *)decoder",1377],["- (id) initWithCoder: (NSCoder *) decoder",1930],["self = [super initWithCoder:decoder];",2695],["- (id)initWithCoder:(NSCoder *)decoder {",3109]],"useCount":29946},{"word":"def","context":[["BOOL animated = [TiUtils boolValue:@\"animated\" properties:dict def:YES];",443],["BOOL hires = [TiUtils boolValue:[[req userInfo] valueForKey:@\"hires\"] def:NO];",447],["int lengthValue = [TiUtils intValue:length def:[[buffer data] length]];",692],["if (![TiUtils boolValue:[self valueForKey:@\"enabled\"] def:YES])",636],["BOOL animated = [TiUtils boolValue:@\"animated\" properties:properties def:YES];",634],["BOOL animated = [TiUtils boolValue:@\"animated\" properties:args def:YES];",481],["int lengthVal = [TiUtils intValue:length def:[data length]];",460],["if ((defURL == nil) && ![TiUtils boolValue:[self.proxy valueForKey:@\"preventDefaultImage\"] def:NO])",451],["styleCache = [TiUtils intValue:value def:UIButtonTypeCustom];",447],["return def;",6059]],"useCount":67864},{"word":"default","context":[["default:{",463],["% Get default command line output from handles structure",2229],["default: break;",1772],["default: {",7925],["// Override to allow orientations other than the default portrait orientation.",1620],["default:",16465],["// default",669],["default: return nil;",542],["// default",492],["default:",105247]],"useCount":219819},{"word":"defaultCenter","context":[["[[NSNotificationCenter defaultCenter] removeObserver:self];",2688],["[[NSNotificationCenter defaultCenter] addObserver:self",1656],["NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];",1640],["[[NSNotificationCenter defaultCenter] addObserver:self",25124],["[[NSNotificationCenter defaultCenter] removeObserver:self];",20165],["[[NSNotificationCenter defaultCenter]",5702],["[[NSNotificationCenter defaultCenter] removeObserver:self",5167],["[[NSNotificationCenter defaultCenter]",3997],["NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];",2489],["[[NSNotificationCenter defaultCenter] addObserver: self",1989]],"useCount":120908},{"word":"defaultManager","context":[["NSFileManager *fileManager = [NSFileManager defaultManager];",7295],["NSFileManager *fm = [NSFileManager defaultManager];",3754],["return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];",2322],["if ([[NSFileManager defaultManager] fileExistsAtPath:filepath])",420],["NSFileManager *fileMgr = [NSFileManager defaultManager];",431],["[[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]",698],["NSFileManager *manager = [NSFileManager defaultManager];",957],["NSFileManager* fm = [NSFileManager defaultManager];",1496],["if ([[NSFileManager defaultManager] fileExistsAtPath:path])",576],["NSFileManager* fileManager = [NSFileManager defaultManager];",685]],"useCount":44670},{"word":"defaults","context":[["[defaults removeObjectForKey:@\"FBAccessToken\"];",571],["% set the defaults",893],["[defaults removeObjectForKey:@\"FBUserId\"];",518],["[defaults removeObjectForKey:@\"FBSessionExpires\"];",592],["// View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),",602],["// NOTE: To customize the view's frame size (which defaults to full screen), override",536],["NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];",743],["NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];",1208],["[defaults synchronize];",5974],["NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];",10882]],"useCount":48445},{"word":"define","context":[["#define IMAGEVIEW_DEBUG 0",451],["#define TIMEOUT_SECONDS 240",777],["#define HC_SHORTHAND",1017],["#define TEXT_TO_LOOK_FOR @\"Welcome to React Native!\"",1196],["#define EXP_SHORTHAND",634],["// define the start and end grayscale values (with the alpha, even though",485],["#define TIMEOUT_SECONDS 600",447],["#define STRING(x) _QUOTEME(x)",444],["#define _QUOTEME(x) #x",444],["#define TI_INVALIDATE_TIMER(__TIMER) { [__TIMER invalidate]; __TIMER = nil; }",443]],"useCount":116823},{"word":"defined","context":[["#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)",933],["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED)",3027],["#if !defined(__has_feature) || !__has_feature(objc_arc)",834],["#elif defined(__CC_PLATFORM_MAC)",735],["#if defined(USE_TI_XML) || defined(USE_TI_NETWORK)",726],["#if defined(USE_TI_XML) || defined(USE_TI_NETWORK)",726],["#if defined(DEBUG)",663],["#if defined(USE_TI_UIIPADPOPOVER) || defined(USE_TI_UIIPADSPLITWINDOW)",519],["#if defined(USE_TI_UITEXTWIDGET) || defined(USE_TI_UITEXTAREA) || defined(USE_TI_UITEXTFIELD)",519]],"useCount":106149},{"word":"delay","context":[["- (void)hide:(BOOL)animated afterDelay:(NSTimeInterval)delay {",287],["@property (nonatomic, assign) NSTimeInterval delay;",269],["delay:(NSTimeInterval)delay",475],["delay:delay",493],["delay:delay",493],["delay:(NSTimeInterval)delay",475],["delay:0.f",448],["delay:0.0",3503],["delay:0.0f",1175],["delay:0",4492]],"useCount":35673},{"word":"delegate","context":[["delegate:nil",10936],["_delegate = delegate;",3401],["delegate:self",10763],["@synthesize delegate;",5391],["#pragma mark - Table view delegate",4004],["self.delegate = self;",3251],["self.tableView.delegate = self;",3157],["@synthesize delegate = _delegate;",3045],["_tableView.delegate = self;",2162],["* (delegate) which was specified as when the choreo execution was initiated.",1952]],"useCount":410285},{"word":"delete","context":[["//  to delete and recreate this implementation file for your updated model.",841],["delete(handles.figure1);",438],["function delete(obj)",453],["% Hint: delete(hObject) closes the figure",296],["delete(hObject);",579],["delete(h)",291],["% If you delete all lines, you are not allowed to distribute",299],["function delete(this)",432],["delete this;",904],["delete(h);",607]],"useCount":31619},{"word":"description","context":[["-(NSString *)description",2695],["[buffer appendString:[super description]];",1815],["- (NSString *) description {",2743],["- (NSString *)description",8441],["- (NSString *)description {",10314],["-(id)description",1585],["- (NSString*) description",1496],["- (NSString *) description",1174],["return [self description];",1126],["return description;",1946]],"useCount":107060},{"word":"det","context":[["list(error_spec)::in, list(error_spec)::out) is det.",1406],["is det.",4177],["module_info::in, module_info::out) is det.",758],[":- pred main(io__state::di, io__state::uo) is det.",639],["ml_gen_info::in, ml_gen_info::out) is det.",443],["proc_info::in, proc_info::out) is det.",287],["io::di, io::uo) is det.",3882],["code_info::in, code_info::out) is det.",360],["mode_info::in, mode_info::out) is det.",357],[":- pred main(io::di, io::uo) is det.",1415]],"useCount":35093},{"word":"details","context":[["* details.",244],["NSMutableDictionary* details = [NSMutableDictionary dictionary];",247],["// If this is a HEAD request generated by an ASINetworkQueue, we'll try to use the details from the main request",251],["% remember the original header details",271],["// details.",336],["for more details.",550],["% more details.",652],["% details.",895],["% @details",1325],["% for the documentation and details.",5613]],"useCount":30151},{"word":"device","context":[["// third try just device specific normal res",418],["return device;",459],["// right on device with iphone - probably a symbol issue",444],["* To run on device, change `localhost` to the IP address of your computer",1052],["// first try 2x device specific",418],[";; | medical device under 21CFR820, the use of which is considered |",781],["[device unlockForConfiguration];",871],["UIDevice *device = [UIDevice currentDevice];",976],["//TODO: rework these to be more accurate and multi-device",418],["* `inet` value under `en0:`) and make sure your computer and iOS device are",1052]],"useCount":48459},{"word":"diagnostic","context":[["#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"",1032],["#pragma clang diagnostic ignored \"-Wincomplete-implementation\"",1160],["#pragma clang diagnostic push",1609],["#pragma clang diagnostic pop",1617],["#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"",1628],["#pragma clang diagnostic ignored \"-Wgnu\"",1715],["#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"",3209],["#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"",5393],["#pragma clang diagnostic pop",18635],["#pragma clang diagnostic push",18802]],"useCount":67626},{"word":"dict","context":[["return dict;",4189],["// CHECK-NEXT:           </dict>",5352],["// CHECK-NEXT:           <dict>",5856],["// CHECK-NEXT:           </dict>",5856],["// CHECK-NEXT:           <dict>",5352],["NSMutableDictionary *dict = [NSMutableDictionary dictionary];",3887],["// CHECK-NEXT:         <dict>",2774],["// CHECK-NEXT:         </dict>",2774],["// CHECK-NEXT:     </dict>",2689],["// CHECK-NEXT:     <dict>",2689]],"useCount":190778},{"word":"dictionary","context":[["NSMutableDictionary *event = [NSMutableDictionary dictionary];",1518],["NSMutableDictionary *params = [NSMutableDictionary dictionary];",2047],["NSMutableDictionary *md = [NSMutableDictionary dictionary];",2973],["NSMutableDictionary *mutableHeaders = [NSMutableDictionary dictionary];",1114],["NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];",1265],["NSMutableDictionary *dict = [NSMutableDictionary dictionary];",3887],["NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];",1265],["import saivdr.dictionary.nsoltx.*",1368],["NSMutableDictionary *parameters = [NSMutableDictionary dictionary];",1393],["return dictionary;",2043]],"useCount":115504},{"word":"dictionaryWithObjectsAndKeys","context":[["NSMutableDictionary* eventObject = [NSMutableDictionary dictionaryWithObjectsAndKeys:type,@\"type\",self,@\"source\",nil];",432],["[NSDictionary dictionaryWithObjectsAndKeys:",3270],["return [NSDictionary dictionaryWithObjectsAndKeys:",2850],["userInfo:[NSDictionary dictionaryWithObjectsAndKeys:",392],["NSDictionary *event = [NSDictionary dictionaryWithObjectsAndKeys:NUMBOOL(YES),@\"interruption\",nil];",394],["[NSDictionary dictionaryWithObjectsAndKeys:",431],["NSDictionary *event = [NSDictionary dictionaryWithObjectsAndKeys:",912],["NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:",579],["NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:[banner currentContentSizeIdentifier],@\"size\",nil];",506],["NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithObjectsAndKeys:",502]],"useCount":30235},{"word":"didFinishLaunchingWithOptions","context":[["didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",187],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",298],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions_",245],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions_",226],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",321],["didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",309],["- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions",694],["return [super application:application didFinishLaunchingWithOptions:launchOptions];",124]],"useCount":47944},{"word":"didReceiveMemoryWarning","context":[["- (void)didReceiveMemoryWarning",32640],["[super didReceiveMemoryWarning];",1239],["-(void)didReceiveMemoryWarning:(NSNotification*)notification",1105],["[super didReceiveMemoryWarning:notification];",872],["selector:@selector(didReceiveMemoryWarning:)",731],["- (void)didReceiveMemoryWarning",677],["- (void)didReceiveMemoryWarning {",648],["[super didReceiveMemoryWarning]; // Releases the view if it doesn't have a superview",472],["[super didReceiveMemoryWarning];",77268],["- (void)didReceiveMemoryWarning {",44282]],"useCount":163756},{"word":"didSelectRowAtIndexPath","context":[["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {",8876],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{",2438],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath",11931],["-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath",1759],["-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{",1515],["- (void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {",301],["-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {",630],["// In a xib-based application, navigation from a table can be handled in -tableView:didSelectRowAtIndexPath:",292],["didSelectRowAtIndexPath:(NSIndexPath *)indexPath",277],["[super tableView:tableView didSelectRowAtIndexPath:indexPath];",266]],"useCount":31707},{"word":"dismissViewControllerAnimated","context":[["[controller dismissViewControllerAnimated:YES completion:nil];",498],["[self dismissViewControllerAnimated:NO completion:nil];",644],["[self.navigationController dismissViewControllerAnimated:YES completion:nil];",1157],["[self.presentingViewController dismissViewControllerAnimated:YES completion:nil];",759],["[alert dismissViewControllerAnimated:YES completion:nil];",471],["[picker dismissViewControllerAnimated:YES completion:^{",440],["[self dismissViewControllerAnimated:YES completion:nil];",13083],["[self dismissViewControllerAnimated:YES completion:^{",1956],["[picker dismissViewControllerAnimated:YES completion:nil];",1438],["[self dismissViewControllerAnimated:YES completion:NULL];",1187]],"useCount":30841},{"word":"disp","context":[["disp(' ');",8442],["disp(msg);",288],["disp('')",289],["disp('  ')",296],["disp('  ');",308],["disp(str);",377],["disp('');",381],["disp(lasterr);",831],["disp(ME.message);",1064],["disp(' ')",5466]],"useCount":57048},{"word":"dispatch_async","context":[["dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{",7770],["dispatch_async(dispatch_get_main_queue(), ^{",53248],["dispatch_async(delegateQueue, ^{ @autoreleasepool {",1450],["dispatch_async(dispatch_get_main_queue(), ^{",3199],["dispatch_async(socketQueue, ^{ @autoreleasepool {",1645],["dispatch_async(_workQueue, ^{",1119],["dispatch_async(socketQueue, block);",1405],["dispatch_async(dispatch_get_main_queue(), ^(void) {",1314],["dispatch_async(queue, ^{",1965],["dispatch_async(dispatch_get_global_queue(0, 0), ^{",1179]],"useCount":112812},{"word":"dispatch_get_main_queue","context":[["dispatch_async(dispatch_get_main_queue(), ^{",53248],["dispatch_after(popTime, dispatch_get_main_queue(), ^(void){",2687],["dispatch_async(dispatch_get_main_queue(), ^(void) {",1314],["dispatch_async(dispatch_get_main_queue(), ^",920],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",735],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",702],["dispatch_async(dispatch_get_main_queue(), ^(void){",601],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",550],["dispatch_async(dispatch_get_main_queue(), ^{",3199],["dispatch_sync(dispatch_get_main_queue(), ^{",4236]],"useCount":87020},{"word":"dispatch_once","context":[["dispatch_once(&pred, ^{",2219],["dispatch_once(&token, ^{",611],["dispatch_once(&predicate, ^{",1304],["dispatch_once(&onceToken, ^{",33939],["dispatch_once(&oncePredicate, ^{",1088],["dispatch_once(&once, ^{",2431],["dispatch_once(&onceToken, ^",343],["dispatch_once(&timerInitializer, ^{",210],["dispatch_once(&onceToken, ^",980],["dispatch_once(&onceToken, ^{",866]],"useCount":47607},{"word":"dispatch_once_t","context":[["static dispatch_once_t onceToken;",36390],["static dispatch_once_t predicate = 0;",257],["static dispatch_once_t once;",2969],["static dispatch_once_t pred;",1861],["static dispatch_once_t token;",575],["static dispatch_once_t pred = 0;",576],["static dispatch_once_t onceToken = 0;",622],["static dispatch_once_t predicate;",1318],["static dispatch_once_t oncePredicate;",1113],["static dispatch_once_t onceToken;",1171]],"useCount":49851},{"word":"display","context":[["[[self window] setFrame:windowFrame display:NO];",312],["display = 1;",308],["// If the grace time is set postpone the HUD display",305],["If omitted or nil, that stands for the selected frame's display.  */)",276],["The optional argument TERMINAL specifies which display to ask about.",364],["[view_ display];",335],["TERMINAL should be a terminal object, a frame or a display name (a string).",338],["// an iPad with a retina display, this will need to be fixed.",417],["[self display];",669],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779]],"useCount":55938},{"word":"distribute","context":[["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",972],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995]],"useCount":49965},{"word":"distribution","context":[["documentation and/or other materials provided with the distribution.",1921],["*    documentation and/or other materials provided with the distribution.",2906],["and/or other materials provided with the distribution.",2114],["* with this source distribution.",1955],["other materials provided with the distribution.",1826],["%       documentation and/or other materials provided with the distribution.",1497],["distribution.",1120],["*     documentation and/or other materials provided with the distribution.",1047],["with the distribution.",1003],["// other materials provided with the distribution.",968]],"useCount":34944},{"word":"do","context":[["do {",11657],["// furnished to do so, subject to the following conditions:",15183],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["furnished to do so, subject to the following conditions:",2964],["do",3588],["//  furnished to do so, subject to the following conditions:",11359],["* furnished to do so, subject to the following conditions:",6200],["// Return NO if you do not want the specified item to be editable.",5341],["// Return NO if you do not want the item to be re-orderable.",4677]],"useCount":190156},{"word":"document","context":[["-(id)initWithResponse:(NSDictionary*)document {",1953],["return document;",727],["CGFloat realWidth = [[webview stringByEvaluatingJavaScriptFromString:@\"document.width\"] floatValue];",254],["if (document) {",220],["///  @param storage The document storage.",217],["CGFloat result = [[webview stringByEvaluatingJavaScriptFromString:@\"document.height\"] floatValue];",254],["CGFloat currentHeight = [[webview stringByEvaluatingJavaScriptFromString:@\"document.height\"] floatValue];",254],["[result setDocument:[self document]];",248],["NSXMLDocument *document = [[NSXMLDocument alloc] initWithData:data options:self.options error:&serializationError];",246],["return [super initWithResponse:document];",1952]],"useCount":37046},{"word":"documentation","context":[["% for the documentation and details.",5613],["// For documentation please refer to the DDAbstractLogger implementation.",536],["//documentation inherited.",943],["*    documentation and/or other materials provided with the distribution.",796],["the documentation and/or other materials provided with the",984],["%       documentation and/or other materials provided with the distribution.",1497],["*     documentation and/or other materials provided with the distribution.",1047],["documentation and/or other materials provided with the distribution.",1921],["*    documentation and/or other materials provided with the distribution.",2906],["in a product, an acknowledgment in the product documentation would be",505]],"useCount":32838},{"word":"does","context":[["//As of iPhone OS 3.2, calling dismissPopoverAnimated does NOT call didDismissPopover. So we have to do it ourselves.",259],["// setImage_ does the property replacement for us; no need to do it twice.",241],["// This method does not actually do any resizing.",240],["DebugLog(@\"[ERROR] Target does not support watch connectivity\");",235],["//registryObjects nor the registry does a retain here!",285],["*\tCurrently, Binding/unbinding bridges does nearly nothing but atomically",373],["//DO NOT run super shutdown here, as we want to change the behavior that TiProxy does.",427],["NSAssert(term != nil, @\"This method does not apply to non-term reads\");",479],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["[NSException raise:NSInternalInconsistencyException format:@\"File does not exist at path %@\", filePath, nil];",239]],"useCount":40439},{"word":"doesn","context":[["// If the model doesn't already exist, it is created from the application's model.",694],["NSString *msg = @\"IPv6 has been disabled and specified interface doesn't support IPv4.\";",268],["// passed into the model class doesn't break the parsing.",429],["[super didReceiveMemoryWarning]; // Releases the view if it doesn't have a superview",472],["// Releases the view if it doesn't have a superview.",477],["// our bitmap context doesn't support alpha the gradient requires it)",486],["//It's possible that some of the covered area doesn't matter. If it all matters, unimportant is 0.",524],["// If the coordinator doesn't already exist, it is created and the application's store added to it.",683],["if (thisValue == nil) //Dictionary doesn't have this key. Skip.",900],["// Releases the view if it doesn't have a superview.",5338]],"useCount":39311},{"word":"don","context":[["// refuse to start animation if you don't have any images",451],["// don't bother firing an app event to the webview if we don't have a webview yet created",451],["// don't bother firing an app event to the webview if we don't have a webview yet created",451],["// don't initially start the spinner when added since we don't want to prematurely show",451],["// per the Apple docs on what to do when you don't know the encoding ahead of a",451],["// don't initially start the spinner when added since we don't want to prematurely show",451],["// don't let the placeholder stomp on our new images",451],["// don't set if already set above",450],["//that don't exist and it should return undefined, not an exception",661],["// assume if we don't have a view that we can send on the",450]],"useCount":61059},{"word":"done","context":[["[self done];",1818],["__block BOOL done = NO;",578],["waitUntil(^(DoneCallback done) {",2141],["done = YES;",3253],["done();",3425],["BOOL done = NO;",1137],["done = NO;",801],["goto done;",764],["if (done)",648],["// resume image loader when we're done scrolling",561]],"useCount":58924},{"word":"double","context":[["double d;",971],["+(double)doubleValue:(NSString*)name properties:(NSDictionary*)properties def:(double)def exists:(BOOL*) exists",418],["+(double)doubleValue:(NSString*)name properties:(NSDictionary*)props def:(double)def;",418],["+(double)doubleValue:(NSString*)name properties:(NSDictionary*)props;",418],["double height = 0;",426],["+(double)doubleValue:(NSString*)name properties:(NSDictionary*)properties def:(double)def exists:(BOOL*) exists",418],["+(double)doubleValue:(id)value",418],["typedef double (*dIMP)(id, SEL, ...);",562],["double elapsed = [[NSDate date] timeIntervalSinceDate:reftime];",656],["case 'double'",678]],"useCount":91813},{"word":"drawRect","context":[["- (void)drawRect:(NSRect)dirtyRect {",590],["- (void)drawRect:(NSRect)dirtyRect {",1073],["- (void)drawRect:(NSRect)rect",1198],["- (void)drawRect:(NSRect)dirtyRect",1236],["[super drawRect:dirtyRect];",1284],["[super drawRect:rect];",3088],["// Only override drawRect: if you perform custom drawing.",7715],["- (void)drawRect:(CGRect)rect",8162],["- (void)drawRect:(NSRect)rect {",653],["- (void)drawRect:(CGRect)rect {",8845]],"useCount":44042},{"word":"duration","context":[["jobnr. mode duration  R 1  R 2  N 1  N 2",7267],["[super willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];",1061],["[UIView animateWithDuration:duration animations:^{",1868],["[UIView animateWithDuration:duration",1301],["[super willRotateToInterfaceOrientation:toInterfaceOrientation duration:duration];",1108],["[super willRotateToInterfaceOrientation:toInterfaceOrientation duration:duration];",1108],["[super willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];",1061],["duration:(NSTimeInterval)duration",949],["duration:(NSTimeInterval)duration",949],["duration:duration",682]],"useCount":89937},{"word":"during","context":[["% --- Executes during object creation, after setting all properties.",14669],["// An empty implementation adversely affects performance during animation.",7709],["If you encounter schema incompatibility errors during development, you can reduce their frequency by:",694],["// this path is only taken during a simulator build",418],["// interactions during such.",330],["// 0.02 prevents the hud from passing through touches during the animation the hud will get completely hidden",291],["DeveloperLog(@\"[WARN] Object %@ was not a KrollObject during finalization, was: %@\",o,[o class]);",288],["executionContext = context; //To ensure there is an execution context during _configure.",286],["//warning here, too many false alarms were raised during",286],["// the execution context during creation so that recursively-made",286]],"useCount":40319},{"word":"dynamic","context":[["@dynamic delegate;",544],["@dynamic name;",2214],["@dynamic title;",877],["@dynamic type;",502],["@dynamic id;",340],["@dynamic date;",369],["@dynamic text;",375],["@dynamic url;",394],["@dynamic value;",318],["@dynamic identifier;",427]],"useCount":43188},{"word":"e","context":[["e = z + 10",5887],["// e.g. self.myOutlet = nil;",5002],["@catch (NSException * e) {",1533],["return ThrowException(jsContext, [e reason], exception);",1562],["catch e",2230],["@throw e;",2088],["@catch (NSException * e)",2038],["@catch (NSException * e)",1981],["@catch (NSException *e) {",1719],["return ThrowException(jsContext, [e reason], exception);",1702]],"useCount":126067},{"word":"each","context":[["// Release the conditions... so long as each condition has been retained, this is safe.",243],["/* Called before each frame is rendered */",209],["// we have to walk each type to detect the right size and alignment",210],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// in +initialize for each subclass.",821],["%               derivatives of the cost w.r.t. each parameter in theta",528],["// NOTE: we must encode each individual part for the to successfully work",418],["// You can turn on ARC for only PubNub files by adding '-fobjc-arc' to the build phase for each of its files.",328],["// we have to walk each type to detect the right size and alignment",243]],"useCount":112459},{"word":"edge","context":[["*\tIn the extreme edge case of having come back to the app while",226],["<edge STYLE=\"bezier\" WIDTH=\"thin\"/>",786],["<edge WIDTH=\"thin\"/>",1725],["<edge COLOR=\"#94AC70\"></edge>",264],["<edge STYLE=\"horizontal\"/>",645],["usingBlock:^(YapDatabaseRelationshipEdge *edge, BOOL *stop)",614],["<edge STYLE=\"hide_edge\"/>",551],["<edge COLOR=\"#94AC70\"></edge>",264],["<edge COLOR=\"#808080\" STYLE=\"bezier\" WIDTH=\"thin\"/>",365],["<edge COLOR=\"#00ffcc\"/>",324]],"useCount":29885},{"word":"editing","context":[["// Override to support conditional editing of the table view.",4691],["button.editing = NO;",449],["button.editing = YES;",449],["- (BOOL)editing",452],["return editing;",460],["editing = NO;",472],["editing = YES;",507],["[super setEditing:editing animated:animated];",694],["if (editing)",2709],["// Override to support editing the table view.",4698]],"useCount":30153},{"word":"element","context":[["XCTAssertTrue( element == NSLineToBezierPathElement, @\"Incorrect element\" );",533],["return element;",1544],["# name: <cell-element>",1298],["XCTAssertTrue(foundElement, @\"Couldn't find element with text '%@' in %d seconds\", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);",1114],["XCTAssertTrue( element == NSLineToBezierPathElement, @\"Incorrect element\" );",533],["[element writeDescriptionTo:output",295],["if (!element.isInitialized) {",302],["/* element() */",308],["if (element)",332],["hashCode = hashCode * 31 + [element hash];",353]],"useCount":61536},{"word":"else","context":[["} else {",598060],["}else {",17533],["#else",19661],["else{",22318],["else",63081],["} else {",68077],["#else",69753],["}else{",84670],["else {",173217],["else",1009882]],"useCount":2533323},{"word":"elseif","context":[["elseif acc==0",293],["elseif nargout == 2",241],["elseif nargin == 5",288],["elseif nargin==2",294],["elseif (nargin == 1)",333],["elseif (nargin == 2)",352],["elseif nargin == 4",351],["elseif nargin == 1",541],["elseif nargin == 3",671],["elseif nargin == 2",800]],"useCount":67061},{"word":"empty","context":[["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["return [RACSignal empty];",644],["EXPECT_TRUE(States()->empty());",323],["% handles    empty - handles not created until after all CreateFcns called",13063],["// An empty implementation adversely affects performance during animation.",7709],["// empty file?",247],["% empty",229],["Code = empty",231],["// we register an empty kroll string that allows us to pluck out this instance",244],["%\tOldValue: handle of the previously selected object or empty if none was selected",235]],"useCount":64962},{"word":"enabled","context":[["self.navigationItem.rightBarButtonItem.enabled = YES;",771],["self.enabled = YES;",698],["if (enabled) {",675],["if (![TiUtils boolValue:[self valueForKey:@\"enabled\"] def:YES])",636],["- (void)setEnabled:(BOOL)enabled {",460],["[self replaceValue:NUMBOOL(YES) forKey:@\"enabled\" notification:NO];",447],["- (void)setEnabled:(BOOL)enabled",435],["self.navigationItem.rightBarButtonItem.enabled = NO;",997],["[super setEnabled:enabled];",417],["_enabled = enabled;",357]],"useCount":48171},{"word":"encoding","context":[["encoding:NSUTF8StringEncoding] autorelease];",782],["encoding:NSUTF8StringEncoding",2343],["encoding:NSASCIIStringEncoding];",609],["encoding:NSUTF8StringEncoding];",2698],["self.stringEncoding = encoding;",572],["encoding:(NSStringEncoding)encoding",743],["encoding:(NSStringEncoding)encoding",743],["NSStringEncoding encoding = [TiUtils charsetToEncoding:charset];",721],["if (encoding == 0) {",667],["NSStringEncoding encoding = NSUTF8StringEncoding;",658]],"useCount":78449},{"word":"end","context":[["end",3018493],["% end",23704],["@end",97905],["end;",190586],["%     end",13885],["%         end",8852],["%end",9309],["@end",1487786],["%             end",5252],["## @end deftypefn",3747]],"useCount":5144219},{"word":"endif","context":[["#endif // objc_arc",442],["#endif\t// #if __SAMURAI_TESTING__",743],["#endif\t// #if (TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR)",1473],["# endif",1635],["endif",40277],["#endif",77261],["#endif",312735],["//#endif",1137],["#endif // DEBUG",617],["#endif  // GTM_IPHONE_SDK",566]],"useCount":464679},{"word":"entry","context":[["if (entry) {",412],["// we need to, and then dump the entry from the cache if there was a problem.",371],["NSCParameterAssert((dictionary != NULL) && (dictionary->entry != NULL) && (dictionary->count <= dictionary->capacity));",302],["image = [entry fullImage];",371],["tListEntry *entry, *tmp;",360],["[entry release];",514],["ImageCacheEntry *entry = [self entryForKey:[req url]];",431],["return entry;",537],["NSParameterAssert((entry != NULL) && (count <= capacity));",586],["// We need to move past the first entry in the array before we start assigning values",279]],"useCount":39364},{"word":"equal","context":[["expect(actualValue).to_not(equal(expectedValue));",261],["expect(values).to(equal(expected));",284],["expect(actualValue).to(equal(expectedValue));",288],["view(3); axis tight;  axis equal;  grid on;",488],["axis equal tight off",578],["// Should be new pointer, but equal objects.",266],["expect(@\"number\").to.equal(@\"string\");",634],["expect(1).to.equal(2);",634],["axis equal;",1817],["axis equal",3209]],"useCount":43143},{"word":"err","context":[["if (err != noErr) {",1322],["err = nil;",1079],["catch err;",1318],["NSError* err = nil;",1461],["NSError *err;",1599],["return err;",1762],["catch err",2679],["if (err) {",3766],["if (err)",4392],["NSError *err = nil;",5189]],"useCount":117631},{"word":"error","context":[["NSError *error;",24379],["error = nil;",7266],["failure(error);",7349],["if (!error) {",8893],["} failure:^(AFHTTPRequestOperation *operation, NSError *error) {",10214],["error:&error];",12301],["} failure:^(NSError *error) {",9441],["error:&error];",12301],["NSError *error = nil;",48410],["if (error) {",37924]],"useCount":1107330},{"word":"event","context":[["[super touchesBegan:touches withEvent:event];",2978],["[super touchesEnded:touches withEvent:event];",2696],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event",3008],["NSMutableDictionary *event = [NSMutableDictionary dictionary];",1518],["return event;",1544],["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event",1654],["[self _fireEventToListener:@\"writeToStream\" withObject:event listener:callback thisObject:nil];",1661],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {",1797],["[super touchesMoved:touches withEvent:event];",2226],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event",2060]],"useCount":289247},{"word":"eventdata","context":[["function edit1_CreateFcn(hObject, eventdata, handles)",253],["susildyk(hObject, eventdata, handles);",255],["function pushbutton2_Callback(hObject, eventdata, handles)",290],["% eventdata  structure with the following fields (see UICONTROL)",312],["atnaujink_rodomus_failus(hObject, eventdata, handles);",327],["function figure1_CloseRequestFcn(hObject, eventdata, handles)",363],["redraw_cb(h, eventdata);",369],["function pushbutton1_Callback(hObject, eventdata, handles)",404],["Ar_galima_vykdyti(hObject, eventdata, handles);",608],["% eventdata  reserved - to be defined in a future version of MATLAB",47946]],"useCount":68563},{"word":"events","context":[["// process just those events and then we immediately exit and clean up",244],["// run our thread event pump and process events",244],["*\tAs such, we have to take the events away if we have event listeners",451],["events",252],["/*\twebview is a little _special_ and refuses to share events.",451],["// since this guy only works with touch events, we always want them",298],["XCTAssertEqualObjects(res.events, events);",302],["XCTAssertEqualObjects(res.events, events);",302],["NSArray *events = @[",335],["// common event properties for all events we fire.. IF they're undefined.",432]],"useCount":32368},{"word":"ex","context":[["NSLog(@\"[ERROR] method invoked exception: %@\",ex);",656],["nsex = toObjCException(ex);",759],["catch ex",775],["*exception = [KrollObject toValue:[o context] value:ex];",1530],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-15);",1352],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-16);",1156],["@catch (NSException * ex)",878],["catch(const std::exception& ex)",775],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-14);",3050],["@catch(NSException * ex)",6704]],"useCount":30671},{"word":"example","context":[["// This function is adapted from Apple's example in AudioFileStreamExample with",412],["% example:",699],["%% @example",711],["%% @end example",712],["## @end example",1751],["## @example",1752],["* JS example:",3920],["// This is an example of a functional test case.",15558],["// This is an example of a performance test case.",15613],["// For example: self.myOutlet = nil;",339]],"useCount":61333},{"word":"exception","context":[["AWSLogError(@\"Fatal exception: [%@]\", task.exception);",2321],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2310],["AWSLogError(@\"Fatal exception: [%@]\", task.exception);",2321],["const TiValueRef args[], TiValueRef* exception)",2310],["} @catch (NSException *exception) {",2193],["@catch (NSException *exception) {",9894],["HyperloopRaiseNativetoJSException(ctx,exception,ex,[NSThread callStackSymbols],__FILE__,__FUNCTION__,__LINE__-14);",3050],["const TiValueRef args[], TiValueRef* exception)",2578],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2578],["if (task.exception) {",2383]],"useCount":126539},{"word":"exist","context":[["// If the model doesn't already exist, it is created from the application's model.",694],["// If the coordinator doesn't already exist, it is created and the application's store added to it.",683],["//that don't exist and it should return undefined, not an exception",661],["if exist('Event', 'file') == 2",615],["// on the ipad running iphone app in emulation mode, this won't exist when",449],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["if exist('residu')",400],["if (exist(full_fname,'file'))",296],["//that don't exist and it should return undefined, not an exception",244],["if exist('OCTAVE_VERSION')",288]],"useCount":31086},{"word":"exists","context":[["*exists = YES;",421],["+(float)floatValue:(NSString*)name properties:(NSDictionary*)properties def:(float)def exists:(BOOL*) exists",418],["*exists = NO;",421],["//This remote object no longer exists.",433],["// filesystem and if so, and it exists, use that",451],["if (exists != NULL)",836],["if (exists != NULL) *exists = NO;",2926],["if (exists != NULL) *exists = NO;",2926],["if (exists != NULL) *exists = YES;",4180],["if (exists != NULL) *exists = YES;",4180]],"useCount":43980},{"word":"expect","context":[["expect(@(completed)).to(beFalsy());",424],["expect(error).notTo.beNil();",467],["expect(@\"team\").toNot.contain(@\"I\");",683],["expect(1).beLessThan(23);",685],["expect(success).to.beTruthy();",855],["expect(^{",866],["expect(error).to(beNil());",595],["expect(error).to.beNil();",1577],["expect(1).to.equal(2);",634],["expect(@\"number\").to.equal(@\"string\");",634]],"useCount":53173},{"word":"expected","context":[["expect(values).to(equal(expected));",284],["// expected-no-diagnostics",268],["RCTAssertEqualFonts(expected, result);",282],["subreason:[NSString stringWithFormat:@\"expected TiBlob, String, TiFile, was: %@\",[arg class]]",331],["// Ensure terminal slash for baseURL path, so that NSURL +URLWithString:relativeToURL: works as expected",299],["describe(@\"and the actual value is greater than the expected value\", ^{",304],["describe(@\"and the actual value is less than the expected value\", ^{",304],["describe(@\"and the actual value equals the expected value\", ^{",304],["'Actual image size is different from the expected one.');",608],["NSString * const TiExceptionInternalInconsistency = @\"Value was not the value expected\";",450]],"useCount":28144},{"word":"extension","context":[["#include \"chrome/common/extensions/extension.h\"",231],["+(TiFile*)createTempFile:(NSString*)extension",440],["* YapDatabase extension hook.",727],["return [TiFile createTempFile:extension];",418],["// Ideally we'd like to synchronously query the delegate about a timeout extension.",240],["@\"extension\",",208],["@[@\"extension\",@\"FHIRExtension\",],",201],["NSString *extension = nil;",200],["static inline NSString * AFContentTypeForPathExtension(NSString *extension) {",246],["#include \"extensions/common/extension.h\"",309]],"useCount":28090},{"word":"f","context":[["return f;",586],["EmacsView *view = FRAME_NS_VIEW (f);",523],["float f;",1033],["Float64 f;",647],["f = 0;",490],["NSLog(@\"[DEBUG] Invoked %@ with result: %@ [took: %f]\",o,result,elapsed);",492],["fclose(f);",1071],["return [NSNumber numberWithFloat:f];",865],["Float32 f;",647],["case 'f':",1389]],"useCount":186097},{"word":"failed","context":[["failed = YES;",584],["return @\"Write operation failed\";",412],["goto failed;",721],["LogWarn(@\"Accept failed with error: %@\", [self errnoError]);",255],["XCTAssertEqualObjects(listener.returnStatus, kTestRequestStatusDidLoad, @\"request failed\");",256],["// We've failed NTLM authentication twice, we should assume our credentials are wrong",263],["NSAssert(NO, @\"Filter shader link failed\");",283],["NSString * const TiExceptionMemoryFailure = @\"Memory allocation failed\";",286],["error('failed');",293],["return @\"Login failed / Invalid auth token\";",348]],"useCount":32138},{"word":"failure","context":[["} failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {",3549],["} failure:^(AFHTTPRequestOperation *operation, NSError *error) {",10214],["} failure:^(NSError *error) {",9441],["failure(error);",7349],["if (failure) {",7256],["} failure:failure];",1940],["} failure:^(NSURLSessionDataTask *task, NSError *error) {",2182],["failure:failure];",2624],["failure:failure];",2624],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667]],"useCount":134000},{"word":"false","context":[["<conditional_style ACTIVE=\"true\" STYLE_REF=\"TitlesContent\" LAST=\"false\"/>",981],["result = false;",1175],["<conditional_style ACTIVE=\"true\" STYLE_REF=\"MenuTitle\" LAST=\"false\"/>",943],["set_enabled(false);",904],["<font SIZE=\"12\" BOLD=\"false\" ITALIC=\"false\"/>",870],["<font SIZE=\"12\" BOLD=\"false\" ITALIC=\"false\"/>",870],["<conditional_style ACTIVE=\"true\" STYLE_REF=\"OptionalValue\" LAST=\"false\"/>",1854],["return false;",37856],["return false;",13244],["<conditional_style ACTIVE=\"true\" STYLE_REF=\"Method\" LAST=\"false\"/>",2607]],"useCount":191326},{"word":"fclose","context":[["fclose(fp);",1408],["fclose(HDR.FILE.FID);",596],["fclose(fh);",573],["fclose all;",314],["fclose (fid);",329],["fclose('all');",500],["fclose(fid);",18302],["fclose(file);",675],["fclose(f);",1071],["fclose(fileID);",1182]],"useCount":34376},{"word":"fid","context":[["if fid == -1",754],["fclose(fid);",18302],["while ~feof(fid)",523],["fprintf(fid,'\\n');",2643],["line = fgetl(fid);",1194],["fprintf(fid, '\\n');",1170],["tline = fgetl(fid);",952],["if (fid == -1)",347],["fgetl(fid);",389],["fid = fopen(filename);",396]],"useCount":74536},{"word":"field","context":[["self.field = field;",335],["self.field = field;",335],["@param responseFields Use this field to include those fields which are not included by default.",370],["GPBDataType keyDataType = field.mapKeyDataType;",384],["return field;",445],["GPBDataType valueDataType = GPBGetFieldDataType(field);",448],["NKEY W:'$D(ZTQUEUED) \"??  Required key field\" S X=\"?BAD\" G QS",810],["if (![request valueForHTTPHeaderField:field]) {",490],["[self.HTTPRequestHeaders enumerateKeysAndObjectsUsingBlock:^(id field, id value, BOOL * __unused stop) {",491],["[mutableRequest setValue:value forHTTPHeaderField:field];",511]],"useCount":45245},{"word":"fields","context":[["constructor.params = fields;",1354],["NSMutableArray *fields = [[NSMutableArray alloc] init];",1354],["static J2ObjcFieldInfo fields[] = {",1589],["// check for required fields",1340],["fields:fields",876],["fields:fields",876],["static GPBMessageFieldDescription fields[] = {",801],["% Input fields:",788],["[fields addObject:arg];",3083],["static const J2ObjcFieldInfo fields[] = {",4514]],"useCount":41791},{"word":"figure","context":[["figure()",1492],["figure(2)",2298],["figure(2);",2104],["% figure",1794],["% figure;",1496],["figure;",16607],["figure",13914],["figure(1)",3653],["% hObject    handle to figure",4371],["figure(1);",3179]],"useCount":112474},{"word":"file","context":[["#warning This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",1664],["** packaging of this file.  Please review the following information to",1693],["% This file is part of XBAT.",1807],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["## along with Octave; see the file COPYING.  If not, see",3037],["// NOTE: This file is generated from Google APIs Discovery Service.",2801],["## This file is part of Octave.",3146],["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856]],"useCount":259960},{"word":"filePath","context":[["if (filePath == nil) {",282],["NSString* filePath;",286],["NSData *data = [NSData dataWithContentsOfFile:filePath];",315],["completionHandler:(void (^)(NSURLResponse *response, NSURL *filePath, NSError *error))completionHandler",360],["if (filePath != nil) {",403],["defURL = [NSURL fileURLWithPath:filePath];",451],["return filePath;",827],["handle = [NSFileHandle fileHandleForReadingAtPath:filePath];",240],["if ([[NSFileManager defaultManager] fileExistsAtPath:filePath]) {",279],["[[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];",266]],"useCount":32115},{"word":"filename","context":[["hdr = ft_read_header(filename);",506],["print(hh, '-dpng', filename);",631],["return filename;",505],["print(hh, '-depsc', filename);",483],["fid = fopen(filename);",396],["NSString *filename;",390],["if isequal(filename,0) || isequal(pathname,0)",345],["[p, f, x] = fileparts(filename);",385],["[path, file, ext] = fileparts(filename);",361],["saveas(hh,filename)",354]],"useCount":64899},{"word":"files","context":[["files: files",557],["%  or any other files other than those mentioned above.",424],["files: files",557],["% files should contain only a single variable, corresponding with the",465],["#include \"base/files/file_util.h\"",366],["// You can turn on ARC for only PubNub files by adding '-fobjc-arc' to the build phase for each of its files.",328],["// You can turn on ARC for only PubNub files by adding '-fobjc-arc' to the build phase for each of its files.",328],["NSMutableDictionary *files = [[NSMutableDictionary alloc] init];",551],["#include \"base/files/file_path.h\"",825],["%   other modules (such as MATLAB code and MEX-files) available in a",264]],"useCount":35990},{"word":"filter","context":[["[filter setDefaults];",361],["return filter;",386],["* consider using the alternative version below which provides a filter,",237],["if (filter) {",198],["CIImage *outputImage = [filter outputImage];",167],["* From the filter block, simply return YES if you'd like the block handler to be invoked for the given key.",173],["* If the filter block returns NO, then the block handler is skipped for the given key,",173],["NSAssert(status == GL_FRAMEBUFFER_COMPLETE, @\"Incomplete filter FBO: %d\", status);",161],["% Workaround for Inkscape filter bug",146],["[filter setValue:image forKey:kCIInputImageKey];",142]],"useCount":33030},{"word":"find","context":[["% unsupported to those who might find it useful. We do not",243],["vStrFnd(object,p1,p2,p3,qt) ; String.find",295],["DebugLog(@\"[WARN] Attempted to load %@: Could not find class definition.\",className);",281],["[self scriptError:[NSString stringWithFormat:@\"Could not find the file %@\",[path lastPathComponent]]];",244],["CDTQResultSet* result = [im find:query];",342],["//TODO: Someone did a DOCTYPE, and our search wouldn't find it. This search is tailored for him",449],["//First, find out how much we have to compensate.",524],["% Please email me if you find bugs, or have suggestions or questions!",708],["XCTAssertTrue(foundElement, @\"Couldn't find element with text '%@' in %d seconds\", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);",1114],["// in earlier versions, we need to find the scroll view",329]],"useCount":59798},{"word":"finished","context":[["self.finished = YES;",824],["completion(finished);",831],["} completion:^(BOOL finished) {",25009],["completion:^(BOOL finished) {",6024],["completion:^(BOOL finished){",2394],["if (finished) {",2290],["} completion:^(BOOL finished){",1527],["completion:^(BOOL finished)",1101],["}completion:^(BOOL finished) {",915],["finished = YES;",851]],"useCount":73987},{"word":"first","context":[["// we attach the XHR bridge the first time we need a webview",451],["first = NO;",680],["*  an array of which keys go first, and in what order. Otherwise, this is nil.",450],["BOOL first = YES;",504],["// the container sits on top of the image in case the first frame (via setUrl) is first",451],["// the spinner (usually for the first image) and then immediately remove it with a flash",451],["// the container sits on top of the image in case the first frame (via setUrl) is first",451],["// first check to see if we're attempting to load a file from the",451],["// Put setup code here; it will be run once, before the first test case.",479],["if (first) {",458]],"useCount":78357},{"word":"flag","context":[["- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag {",390],["flag = 1;",954],["flag = 0;",1048],["if (flag) {",1395],["#warning This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",1664],["if (flag)",1893],["return flag;",585],["flag=0;",504],["flag = false;",382],["flag=1;",450]],"useCount":55586},{"word":"flags","context":[["return (flags & kSCNetworkReachabilityFlagsConnectionRequired);",550],["SCNetworkReachabilityFlags flags;",2137],["flags:0];",785],[".flags = GPBFieldOptional,",1641],["logReachabilityFlags(flags);",570],["if (flags & kSocketSecure)",599],["SCNetworkReachabilityFlags flags = 0;",896],["if (SCNetworkReachabilityGetFlags(reachabilityRef, &flags)) {",636],["(flags & kSCNetworkReachabilityFlagsInterventionRequired) ? 'i' : '-',",565],["flags &= ~kSocketCanAcceptBytes;",606]],"useCount":86497},{"word":"float","context":[["+(float)floatValue:(NSString*)name properties:(NSDictionary*)props def:(float)def;",418],["+(float)floatValue:(NSString*)name properties:(NSDictionary*)properties def:(float)def exists:(BOOL*) exists",418],["+(float)floatValue:(NSString*)name properties:(NSDictionary*)properties def:(float)def exists:(BOOL*) exists",418],["+(float)floatValue:(NSString*)name properties:(NSDictionary*)props;",418],["CGFloat startAngle = - ((float)M_PI / 2); // 90 degrees",551],["typedef float (*fIMP)(id, SEL, ...);",562],["float f;",1033],[":- import_module float.",357],["+(float)floatValue:(NSString*)name properties:(NSDictionary*)props def:(float)def;",418],["#import <float.h>",359]],"useCount":123281},{"word":"floatValue","context":[["return [value floatValue];",1379],["return [[s stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"] floatValue];",418],["CGFloat b = [TiUtils floatValue:@\"bottom\" properties:dict def:0];",418],["+(CGFloat)floatValue:(id)value",419],["CGFloat w = [TiUtils floatValue:@\"width\" properties:dict def:0];",418],["+(CGFloat)floatValue:(id)value def:(CGFloat) def",419],["if ([value respondsToSelector:@selector(floatValue)])",425],["CGFloat t = [TiUtils floatValue:@\"top\" properties:dict def:0];",418],["CGFloat l = [TiUtils floatValue:@\"left\" properties:dict def:0];",418],["+(float)floatValue:(NSString*)name properties:(NSDictionary*)props;",418]],"useCount":44858},{"word":"following","context":[["In consideration of your agreement to abide by the following terms, and",1689],["** packaging of this file.  Please review the following information to",1693],["without modifications, you must retain this notice and the following",1687],["% You need to return the following variables correctly",2148],["// furnished to do so, subject to the following conditions:",15183],["furnished to do so, subject to the following conditions:",2964],["// Uncomment the following line to preserve selection between presentations.",3757],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["* furnished to do so, subject to the following conditions:",6200],["//  furnished to do so, subject to the following conditions:",11359]],"useCount":97678},{"word":"font","context":[["return [font autorelease];",837],["<font NAME=\"SansSerif\" SIZE=\"12\"/>",6686],["<font BOLD=\"true\" NAME=\"SansSerif\" SIZE=\"12\"/>",3006],["<font NAME=\"SansSerif\" SIZE=\"10\"/>",1062],["<font NAME=\"SansSerif\" SIZE=\"14\"/>",946],["<font NAME=\"Dialog\" SIZE=\"10\"/>",899],["<font SIZE=\"12\" BOLD=\"false\" ITALIC=\"false\"/>",870],["return font;",863],["WebFont *font = [[WebFont alloc] init];",836],["detailsLabel.font = self.detailsLabelFont;",773]],"useCount":129887},{"word":"for","context":[["distributed with this work for additional information",3509],["XCTFail(@\"No implementation for \\\"%s\\\"\", __PRETTY_FUNCTION__);",9751],["for (LauncherButton* button in buttonPage)",3729],["// Configure the view for the selected state",8899],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["// Return YES for supported orientations",4340],["for c = 1:10",5908],["// Override point for customization after application launch.",31855],["% for the documentation and details.",5613],["% See http://www.chebfun.org/ for Chebfun information.",4660]],"useCount":1323239},{"word":"forKey","context":[["forKey:key];",906],["NSDictionary *userInfo = [NSDictionary dictionaryWithObject:errMsg forKey:NSLocalizedDescriptionKey];",1235],["[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions];",928],["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"animating\" notification:NO];",934],["NSDictionary *info = [NSDictionary dictionaryWithObject:errMsg forKey:NSLocalizedDescriptionKey];",1480],["[self setValue:thisValue forKey:thisKey];",900],["[listeners setObject:NUMINT(ourCallbackCount) forKey:type];",864],["forKey:NSLocalizedDescriptionKey];",834],["[self updateJSObjectWithValue:arg1 forKey:propertyKey];",801],["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"paused\" notification:NO];",825]],"useCount":253231},{"word":"forState","context":[["[btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];",480],["[button setTitle:item.title forState:UIControlStateNormal];",523],["[button setImage:image forState:UIControlStateNormal];",523],["[button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];",530],["forState:(UIControlStateHighlighted | UIControlStateSelected)];",550],["forState:UIControlStateNormal];",3857],["[btn setTitle:title forState:UIControlStateNormal];",571],["[button setTitle:title forState:UIControlStateNormal];",1060],["[button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];",664],["forState:UIControlStateHighlighted];",544]],"useCount":46833},{"word":"format","context":[["[formatter setDateFormat:format];",446],["// remove format in URL if needed",889],["va_start(args, format);",1658],["if ([resourcePath rangeOfString:@\".{format}\"].location != NSNotFound) {",561],["va_start(varArgsList, format);",549],["NSPropertyListFormat format;",546],["format long",514],["+ (instancetype)serializerWithFormat:(NSPropertyListFormat)format",421],["serializer.format = self.format;",421],["[resourcePath replaceCharactersInRange: [resourcePath rangeOfString:@\".{format}\"] withString:@\".json\"];",561]],"useCount":112891},{"word":"formatter","context":[["formatter = [[NSDateFormatter alloc] init];",776],["NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];",867],["NSDateFormatter *formatter = [[NSDateFormatter alloc] init];",3723],["return [formatter stringFromDate:self];",641],["[formatter release];",695],["[formatter setDateFormat:format];",446],["NSDateFormatter *formatter = [NSDateFormatter new];",473],["NSNumberFormatter *formatter = [[[NSNumberFormatter alloc] init] autorelease];",552],["return formatter;",642],["[formatter setNumberStyle:NSNumberFormatterDecimalStyle];",649]],"useCount":40264},{"word":"forms","context":[["Redistribution and use in source and binary forms, with or without modification,",2376],["// Redistribution and use in source and binary forms, with or without",1714],["//  Redistribution and use in source and binary forms, with or without",1673],["// Redistribution and use in source and binary forms, with or without modification,",1314],["* Redistribution and use in source and binary forms, with or without modification,",435],["Redistribution and use in source and binary forms, with or without",5044],["* Redistribution and use in source and binary forms, with or without",4482],["* Redistribution and use in source and binary forms, with or without",2828],["% Redistribution and use in source and binary forms, with or without",2485],["modifications, in source and/or binary forms; provided that if you redistribute",455]],"useCount":27616},{"word":"found","context":[["return @\"Bad URL found\";",618],["return @\"Format \\\"xxx\\\" not found\";",618],["return found;",684],["BOOL found = NO;",1702],["return @\"Method \\\"xxx\\\" not found\";",618],["if (!found) {",486],["if (found) {",474],["// distributed with this project and can also be found at",438],["if (found)",427],["found = YES;",2603]],"useCount":48401},{"word":"fprintf","context":[["fprintf('\\nProgram paused. Press enter to continue.\\n');",590],["fprintf('Done.\\n');",601],["fprintf ( 1, '\\n' );",693],["fprintf(spacing);",801],["fprintf('.');",845],["fprintf(fid, '\\n');",1170],["fprintf('\\n')",1731],["fprintf('Program paused. Press enter to continue.\\n');",1769],["fprintf(fid,'\\n');",2643],["fprintf('\\n');",6549]],"useCount":91655},{"word":"frame","context":[["CGRect frame = self.frame;",11306],["- (instancetype)initWithFrame:(CGRect)frame {",5205],["- (id)initWithFrame:(CGRect)frame {",6732],["- (instancetype)initWithFrame:(CGRect)frame",7578],["if (self = [super initWithFrame:frame]) {",6377],["self = [super initWithFrame:frame];",31818],["CGRect frame = self.frame;",11306],["self.frame = frame;",11542],["self.frame = frame;",11542],["- (id)initWithFrame:(CGRect)frame",14862]],"useCount":641589},{"word":"free","context":[["free(machine);",553],["free(bytes);",583],["free(classes);",603],["free(log);",634],["free(base64Result);",695],["free(data);",914],["free(methods);",928],["free(buf);",1083],["free(buffer);",2376],["free(properties);",1548]],"useCount":60033},{"word":"from","context":[["* Retrieve the value of the \"Response\" output from an execution of this Choreo.",1828],["// Do any additional setup after loading the view from its nib.",7268],["% Get default command line output from handles structure",2229],["% --- Outputs from this function are returned to the command line.",2400],["// NOTE: This file is generated from Google APIs Discovery Service.",2801],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["%      existing singleton*.  Starting from the left, property value pairs are",2022],["* @param response The execution response from the Temboo server",1952],["// Delete the row from the data source",4362]],"useCount":279604},{"word":"function","context":[["function test_1",744],["end%function",760],["function schema",810],["% do the general cleanup and bookkeeping at the end of the function",952],["% do the general setup of the function",1056],["end % function",1320],["* completes successfully. This class in turn calls the same function on the object",1952],["% This function has no output args, see OutputFcn.",2180],["% --- Outputs from this function are returned to the command line.",2400],["TiObjectRef callbackFunction = [eventCallback function];",677]],"useCount":182209},{"word":"functions","context":[["%  linear exercise. You will need to complete the following functions",156],["#pragma mark Buffer and Object Stack management functions",148],["#pragma mark Decoding / parsing / deserializing functions",148],["#pragma mark Unicode related functions",151],["#pragma mark - Supporting functions",152],["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031],["p0 = functions(jvx_host_call_cb);",232],["*\tThe viewWill/DidAppear/Disappear functions are here to conform to the",177],["%  exercise. You will need to complete the following functions:",173],["% Hint: You might find the 'mean' and 'std' functions useful.",161]],"useCount":27944},{"word":"furnished","context":[["furnished to do so, subject to the following conditions:",2964],["furnished to do so, subject to the following conditions:",1356],["//\tfurnished to do so, subject to the following conditions:",1201],["% furnished to do so, subject to the following conditions:",973],["* furnished to do so, subject to the following conditions:",365],["//furnished to do so, subject to the following conditions:",349],["*furnished to do so, subject to the following conditions:                      *",311],["* furnished to do so, subject to the following conditions:",6200],["// furnished to do so, subject to the following conditions:",15183],["//  furnished to do so, subject to the following conditions:",11359]],"useCount":41569},{"word":"future","context":[[";Per VHA Directive 2004-038 (or future revisions regarding same), this routine should not be modified.",113],["%     SAK(Nov 2013)   -- Move to git, future modification history is",119],["// A date one second in the future from the time it was created",131],["% % eventdata  reserved - to be defined in a future version of MATLAB",138],["* This class my be altered to support more than just TLS in the future.",167],["// But we still want to leave our log statements for any future debugging,",195],["*\tincrement or decrement. In the future, error checking could be done, or",373],["// future proof against possible different model names, but in the event of",417],["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["*\tTIUIViewController protocol, but currently do nothing. In the future they",177]],"useCount":53633},{"word":"g","context":[["testCase.verifyThat(coefDist,IsLessThan(1e-14),sprintf('%g',coefDist));",953],["[[NSScanner scannerWithString:gString] scanHexInt:&g];",453],["CGFloat r, g, b;",562],["if (![self red:&r green:&g blue:&b alpha:&a]) return nil;",583],["sprintf('%g',diff));",587],["// View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),",602],["CGFloat r, g, b, a;",770],["CGFloat r,g,b,a;",899],["unsigned int r, g, b;",453],["// e.g. self.myOutlet = nil;",5002]],"useCount":87320},{"word":"gca","context":[["set(gca,'FontSize',15);",461],["set(gca,'fontsize',16)",303],["set(gca,'NextPlot','replacechildren') ;",421],["set(gca,'FontSize',12);",332],["set(gca,'FontName','arial');",282],["set(gca,'FontSize',16);",279],["set(gca,'YTick',[]);",273],["set(gca, ...",255],["set(gca,'FontSize',fontSize);",864],["ax = gca;",760]],"useCount":40099},{"word":"gcf","context":[["set(gcf, 'PaperPositionMode', 'manual');",1325],["set(gcf, 'PaperUnits', 'inches');",1256],["h = gcf;",249],["set(gcf,'Position',pos);",265],["set(gcf,'color','w');",271],["set(gcf,'PaperPositionMode','auto')",337],["print(gcf, '-dpdf', figfilename);",366],["fig = gcf;",467],["set(gcf,'Color','w')",469],["close(gcf);",625]],"useCount":28291},{"word":"generated","context":[["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["// NOTE: This file is generated from Google APIs Discovery Service.",2801],["* WARNING: This is generated code. Modify at your own risk and without support.",938],["*     This code was generated by a tool.",857],["* <auto-generated>",857],["// This block of code is generated, do not edit it directly.",524],["// DO NOT EDIT. This file is machine-generated and constantly overwritten.",781],["* </auto-generated>",857],["**NOTE** This code was generated by a tool and will occasionally be",798],["This code was generated by Vipr (https://github.com/microsoft/vipr) using",798]],"useCount":37534},{"word":"get","context":[["// Use recording to get started writing UI tests.",4638],["if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",13891],["if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",13891],["* (you can get this by typing `ifconfig` into the terminal and selecting the",1052],["angs = get(lppufb,'Angles');",1043],["% Hints: get(hObject,'Value') returns position of slider",756],["%get level and version and check the input arguments are appropriate",816],["if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",940],["if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",940],["set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));",951]],"useCount":248611},{"word":"gfx","context":[["gfx::Image(),",252],["#include \"ui/gfx/image/image_skia.h\"",226],["#include \"ui/gfx/rect.h\"",345],["gfx::ScopedNSGraphicsContextSaveGState scopedGState;",336],["#include \"ui/gfx/image/image_skia_util_mac.h\"",297],["gfx::Rect(NSRectToCGRect(rect)));",396],["namespace gfx {",290],["#include \"ui/gfx/geometry/rect.h\"",254],["#include \"ui/gfx/scoped_ns_graphics_context_save_gstate_mac.h\"",662],["#include \"ui/gfx/image/image.h\"",1269]],"useCount":36705},{"word":"given","context":[["// TODO: experiment, attempt to collect more often than usual given our environment",244],["The species values are given as amounts of substance to make it easier to",774],["@\"The given socketQueue parameter must not be a concurrent queue.\");",426],["* Indicates whether the property with the given name is optional.",578],["//given",609],["//TODO: Yes is the historical default. Is this the right thing to do, given the expense?",206],["// given",1556],["// TODO: experiment, attempt to collect more often than usual given our environment",210],["%   p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the",202],["* The given parameter indicates the number of bytes estimated to be available on the socket,",240]],"useCount":43024},{"word":"global","context":[["global CI",350],["if ~climada_init_vars,return;end % init/import global variables",279],["global pos inStr len",262],["global ne_gcfg;",250],["TiObjectRef global = TiContextGetGlobalObject(context);",244],["TiObjectSetProperty(context, global,",244],["TiObjectRef global = TiContextGetGlobalObject([context context]);",326],["global st",399],["global climada_global",347],["// calls into javascript global function 'handleOpenURL'",378]],"useCount":40465},{"word":"gradient","context":[["// then release the  pre-masked content bitmap and the gradient bitmap",480],["// create a 2 bit CGImage containing a gradient that will be used for masking the",482],["// function will stretch the bitmap image as required, so we can create a 1 pixel wide gradient",479],["// our bitmap context doesn't support alpha the gradient requires it)",486],["// create an image by masking the bitmap of the mainView content with the gradient view",478],["// create the start and end points for the gradient vector (straight down)",486],["// draw the gradient into the gray bitmap context",487],["CGGradientRelease(gradient);",1738],["CAGradientLayer *gradient = [CAGradientLayer layer];",396],["// gradient is always black-white and the mask must be in the gray colorspace",478]],"useCount":29957},{"word":"green","context":[["CGFloat red, green, blue;",210],["[self getRed:&r green:&g blue:&b alpha:&a];",234],["green:((float) g / 255.0f)",238],["if (![self red:&r green:&g blue:&b alpha:&a]) return nil;",583],["rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];",412],["return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];",409],["if ([tintColor getRed:&r green:&g blue:&b alpha:NULL]) {",298],["return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];",409],["CGFloat red, green, blue, alpha;",396],["effectColor = [UIColor colorWithRed:r green:g blue:b alpha:EffectColorAlpha];",303]],"useCount":37447},{"word":"grid","context":[["grid on; zoom on",408],["grid ;",253],["grid on",7445],["grid on;",6390],["grid minor;",274],["grid",945],["grid;",798],["% grid on",494],["view(3); axis tight;  axis equal;  grid on;",488],["grid off",359]],"useCount":38681},{"word":"group","context":[["## @end group",1127],["dispatch_group_leave(group);",1671],["dispatch_group_enter(group);",1244],["## @group",1127],["if (group) {",425],["dispatch_group_wait(group, DISPATCH_TIME_FOREVER);",637],["%% @group",739],["%% @end group",739],["return group;",758],["dispatch_group_t group = dispatch_group_create();",904]],"useCount":52814},{"word":"h","context":[["#import \"AppDelegate.h\"",70921],["#include \"J2ObjC_source.h\"",5149],["#import <Cocoa/Cocoa.h>",8117],["#import \"TiUtils.h\"",11021],["#import <QuartzCore/QuartzCore.h>",13692],["#import <objc/runtime.h>",18584],["#import \"ViewController.h\"",24677],["#import <Foundation/Foundation.h>",36021],["#import <XCTest/XCTest.h>",45377],["#import <UIKit/UIKit.h>",62878]],"useCount":2185067},{"word":"hObject","context":[["guidata(hObject,handles)",1193],["% hObject    handle to figure",4371],["handles.output = hObject;",2486],["set(hObject,'BackgroundColor',[.9 .9 .9]);",988],["handles = guidata(hObject);",968],["set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));",951],["set(hObject,'BackgroundColor','white');",15030],["if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",13891],["guidata(hObject, handles);",9212],["guidata(hObject,handles);",2731]],"useCount":99817},{"word":"handle","context":[["return handle;",476],["% hObject    handle to figure",4371],["// Replace this implementation with code to handle the error appropriately.",2559],["Replace this implementation with code to handle the error appropriately.",1013],["% hObject    handle to pushbutton1 (see GCBO)",343],["// handle property names which makes the object iterable",434],["% hObject    handle to edit2 (see GCBO)",452],["% hObject    handle to edit1 (see GCBO)",498],["% hObject    handle to figure1 (see GCBO)",697],["// Replace this with code to handle the error appropriately.",1251]],"useCount":64653},{"word":"handler","context":[["handler(result, error, response);",548],["handler:nil];",569],["handler:^(UIAlertAction * action) {",520],["handler();",627],["completionHandler:handler];",651],["handler:^(UIAlertAction *action) {",702],["[self waitForExpectationsWithTimeout:1.0 handler:nil];",736],["if (handler) {",1789],["if (handler != nil) {",817],["[self waitForExpectationsWithTimeout:1 handler:nil];",1109]],"useCount":52528},{"word":"handles","context":[["% handles    empty - handles not created until after all CreateFcns called",13063],["handles.output = hObject;",2486],["guidata(hObject,handles);",2731],["varargout{1} = handles.output;",2210],["% Update handles structure",4323],["% handles    empty - handles not created until after all CreateFcns called",13063],["% handles    structure with handles and user data (see GUIDATA)",35747],["% handles    structure with handles and user data (see GUIDATA)",35747],["guidata(hObject, handles);",9212],["% Get default command line output from handles structure",2229]],"useCount":223727},{"word":"has","context":[["// That is, socket was disconnected, or connection has already timed out.",480],["//  IMPORTANT!   This code is critical path code.  Because of this, it has been written for speed, not clarity.",487],["// Different from resume - there's some information we can only update AFTER the app has popped to the foreground.",444],["*\tOr let webview has his entire cake. Through experimenting, if the",451],["// this means the pending request has been cancelled and should be",451],["// The connect operation has been cancelled.",480],["// attempt a function that has no args (basically a non-property property)",437],["return; // if the asyncDataSource has become invalid while we are processing, ignore this request to avoid crashes",433],["//It's possible that the 'setvalueforkey' has its own plans of what should be in the JS object,",432],["% This function has no output args, see OutputFcn.",2180]],"useCount":86864},{"word":"hasPrefix","context":[["if ([path hasPrefix:@\"/\"])",454],["if (![key hasPrefix:@\"set\"])",900],["NSURL *url_ = [path hasPrefix:@\"file:\"] ? [NSURL URLWithString:path] : [NSURL fileURLWithPath:path];",662],["if (![path hasPrefix:@\"/\"] && ![path hasPrefix:@\"file:\"])",662],["if (![path hasPrefix:@\"/\"] && ![path hasPrefix:@\"file:\"])",662],["else if ([attributes hasPrefix:@\"Tf,\"])",437],["else if ([attributes hasPrefix:@\"Ti,\"])",437],["if ([attributes hasPrefix:@\"Td,\"])",437],["else if ([attributes hasPrefix:@\"Tl,\"])",437],["else if ([attributes hasPrefix:@\"Tc,\"])",437]],"useCount":29752},{"word":"hash","context":[["- (NSUInteger)hash {",3509],["hashCode = hashCode * 31 + [element hash];",353],["// strict address/hash comparison. So the notification must always",350],["return hash;",1668],["- (NSUInteger) hash {",1221],["hashCode = hashCode * 31 + [self.unknownFields hash];",1088],["- (NSUInteger) hash",1085],["NSUInteger hash = 17;",656],["pageToken = [[NSString stringWithFormat:@\"%d\",[self hash]] retain];",361],["- (NSUInteger)hash",1982]],"useCount":40937},{"word":"have","context":[["// Releases the view if it doesn't have a superview.",5338],["% Hint: popupmenu controls usually have a white background on Windows.",2084],["if (thisValue == nil) //Dictionary doesn't have this key. Skip.",900],["% Hint: slider controls usually have a light gray background.",789],["* or visit www.oracle.com if you need additional information or have any",772],["//TODO: This is a temprorary workaround for the time being. We have to properly take care of [undefined] objects.",765],["% Please email me if you find bugs, or have suggestions or questions!",708],["{\t//We did not have any event listeners on this proxy. Perfectly normal.",661],["//TODO: If we have focus while this happens, we need to signal an update.",662],["% Hint: edit controls usually have a white background on Windows.",8913]],"useCount":163447},{"word":"hdr","context":[["if isempty(hdr)",704],["hdr = ft_read_header(filename);",506],["hdr.nSamplesPre = 0;",453],["for i=1:hdr.nChans",318],["hdr.nTrials     = 1;",295],["hdr.orig = orig;",283],["hdr = [];",234],["event(end  ).offset   = -hdr.nSamplesPre;",186],["if nii_view.nii.hdr.dime.datatype == 128 | nii_view.nii.hdr.dime.datatype == 511",162],["if nii_view.nii.hdr.dime.datatype == 128 | nii_view.nii.hdr.dime.datatype == 511",162]],"useCount":37656},{"word":"head","context":[["- (id)head {",78],["% get the surface describing the head shape",69],["// We might as well get a head start on decrypting some data now.",110],["<head/>",126],["// CHECK-NEXT:      <string>Looping back to the head of the loop</string>",144],["<head>",20749],["</head>",20761],["// CHECK-NEXT:      <string>Looping back to the head of the loop</string>",68],["return head;",83],["// found it; delete it from the head of the node's ns definition list",60]],"useCount":48859},{"word":"header","context":[["+(NSString*)getResponseHeader:(NSString *)header fromHeaders:(NSDictionary *)responseHeaders",361],["__block NSString* responseHeader = [responseHeaders valueForKey:header];",361],["[self.tableView.header endRefreshing];",375],["* See header file for big discussion of this method.",451],["\\\"location\\\":\\\"header\\\", \\",463],["// See full explanation in the header file.",483],["* Questions? Have you read the header file?",486],["// HTTP header `Accept`",613],["\\\"location\\\":\\\"header\\\",\\",759],["return header;",1153]],"useCount":43787},{"word":"height","context":[["- (CGFloat)height",894],["return height;",2572],["frame.size.height = height;",1507],["frame.size.height = height;",1507],["autoHeight = fullSize.height;",1324],["autoHeight = imageToUse.size.height;",1254],["CGContextMoveToPoint(context, 4, rect.size.height/2);",1152],["rect.size.height = TI_NAVBAR_HEIGHT;",836],["return self.frame.size.height;",1927],["- (void)setHeight:(CGFloat)height",745]],"useCount":432180},{"word":"here","context":[["Typical reasons for an error here include:",743],["// Insert code here to tear down your application",759],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Insert code here to initialize your application",1371],["// Put the code you want to measure the time of here.",15555],["// Set-up code here.",1664],["// Tear-down code here.",1812],["// Initialization code here.",1982],["%   Detailed explanation goes here",5886]],"useCount":163711},{"word":"hidden","context":[["self.hidden = NO;",1548],["self.imageView.hidden = YES;",455],["self.hidden = YES;",1806],["self.filterSettingsSlider.hidden = YES;",863],["self.filterSettingsSlider.hidden = NO;",1224],["view.hidden = YES;",908],["previous.hidden = YES;",451],["self.imageView.hidden = NO;",527],["self.tabBarController.tabBar.hidden = YES;",624],["view.hidden = NO;",705]],"useCount":82848},{"word":"hold","context":[["hold all;",958],["hold on",33442],["hold on;",23058],["hold off",12647],["hold off;",10725],["% hold on",1889],["hold all",1628],["// Have to autorelease because we need to hold onto it for throwing the exception",1215],["figure; hold on;",1195],["% hold on;",1062]],"useCount":110951},{"word":"host","context":[["if (host == nil || [host isEqual:@\"\"]) {",486],["return host;",985],["TiHost *host = [self _host];",486],["if ([[self host] debugMode]) {",628],["host = [host_ retain];",665],["RELEASE_TO_NIL(host);",1352],["if (host == nil || [host isEqual:@\"\"]) {",486],["if (host != nil) {",460],["TiHost *h = [pageContext host];",450],["[host fireEvent:listener withObject:eventObject remove:NO context:evaluator thisObject:thisObject_];",450]],"useCount":47133},{"word":"html","context":[["</html>",11623],["<html>",10058],["// self.viewController.startPage = @\"index.html\";",523],["<richcontent TYPE=\"NODE\"><html>",9445],["</html></richcontent>",9333],["<richcontent TYPE=\"NOTE\"><html>",1416],["if (html==nil && error!=nil)",902],["return html;",855],["%   Home page: http://www.ee.ic.ac.uk/hp/staff/dmb/voicebox/voicebox.html",582],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527]],"useCount":76321},{"word":"http","context":[["//\thttp://www.samurai-framework.com",835],["http://www.cocos2d-x.org",858],["\\\"http\\\":{ \\",990],["% URL/Info: http://neuroelf.net/",1144],["% This file is part of FieldTrip, see http://www.fieldtriptoolbox.org",1190],["% This file is part of SBMLToolbox.  Please visit http://sbml.org for more",1262],["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["* cocos2d for iPhone: http://www.cocos2d-iphone.org",1858],["*  http://aws.amazon.com/apache2.0",4401],["% See http://www.chebfun.org/ for Chebfun information.",4660]],"useCount":120575},{"word":"https","context":[["if ([relativeString hasPrefix:@\"http://\"] || [relativeString hasPrefix:@\"https://\"])",415],["//  More info at <https://github.com/sequelpro/sequelpro>",336],["// https://github.com/Specta/Specta",356],["%     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit",839],["This code was generated by Vipr (https://github.com/microsoft/vipr) using",798],["the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).",798],["//  Source: https://github.com/hamcrest/OCHamcrest",471],["//  XLForm ( https://github.com/xmartlabs/XLForm )",486],["//   https://developers.google.com/youtube/v3",515],["//  https://github.com/jessesquires/JSQMessagesViewController",610]],"useCount":30614},{"word":"i","context":[["for i=1:n",3461],["NSUInteger i;",4522],["int i = 0;",4734],["i=i+1;",2776],["for i = 1:n",2896],["if i == a",5887],["i = 1;",2913],["int i;",14682],["i++;",9967],["i = 5",5888]],"useCount":1080529},{"word":"iOS","context":[["NSString * const TiExceptionOSError = @\"The iOS reported an error\";",449],["//  AWS iOS SDK",1990],["* `inet` value under `en0:`) and make sure your computer and iOS device are",1052],["//  iOS-Categories (https://github.com/shaojiankui/iOS-Categories)",295],["// as of iOS 5.0, we can return the scroll view",329],["// In pre-iOS 5, it looks like response headers were case-mangled.",361],["// This makes things faster in almost all scenarios, and ALWAYS so under iOS 5 unless",361],["{ //Technically, this will have an extra /, but iOS ignores this.",415],["//  A port of MPAndroidChart for iOS",368],["* This is the source code of Telegram for iOS v. 1.1",391]],"useCount":39368},{"word":"icon","context":[["return icon;",442],["<icon BUILTIN=\"help\"/>",361],["<icon BUILTIN=\"attach\"/>",253],["if (icon.isNull())",252],["<icon BUILTIN=\"yes\"/>",545],["<icon BUILTIN=\"idea\"/>",709],["<icon BUILTIN=\"info\"/>",421],["<icon BUILTIN=\"messagebox_warning\"/>",385],["<icon BUILTIN=\"pencil\"/>",369],["<icon BUILTIN=\"button_ok\"/>",1049]],"useCount":36880},{"word":"id","context":[["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",19102],["- (id)init {",20751],["- (id)init",33085],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767],["-(id)init",8970],["- (id)initWithFrame:(CGRect)frame",14862],["- (id) init",9749],["- (id)copyWithZone:(NSZone *)zone {",5925],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",6212],["- (id)initWithFrame:(CGRect)frame {",6732]],"useCount":1308902},{"word":"identifier","context":[["return identifier;",616],["@\"identifier\" : @\"id\"",669],["UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];",671],["query.identifier = identifier;",675],["query.identifier = identifier;",675],["identifier:(NSString *)identifier",490],["[self throwException:[NSString stringWithFormat:@\"Invalid type identifier '%@'\",type]",538],["assert(strcmp(e.identifier,'mexopencv:error'));",884],["return @{ @\"identifier\" : @\"id\" };",684],["if ([[segue identifier] isEqualToString:@\"showDetail\"]) {",598]],"useCount":66377},{"word":"idx","context":[["[self enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {",594],["if ~isempty(idx)",552],["int idx = 0;",478],["NSUInteger idx = 0;",465],["idx = idx + 1;",820],["idx = 0;",760],["idx = idx + 1;",820],["idx++;",1431],["idx = 1;",715],["++idx;",620]],"useCount":85030},{"word":"if","context":[["if (!self) {",11926],["if (self) {",149027],["if (error) {",37924],["if (self = [super init]) {",30289],["if (self)",20055],["if ((self = [super init])) {",18009],["#if TARGET_OS_IPHONE",17430],["if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))",13891],["if (cell == nil) {",11957],["if (success) {",11585]],"useCount":6303821},{"word":"ifdef","context":[["#ifdef DEBUG_IMAGE_CACHE",3710],["#ifdef _SYSTEMCONFIGURATION_H",1380],["#ifdef USE_TI_UIDASHBOARDVIEW",1394],["#ifdef USE_TI_UIWEBVIEW",1470],["#ifdef QT_MAC_USE_COCOA",1591],["#ifdef USE_TI_UIWEBVIEW",1845],["#ifdef NS_IMPL_COCOA",2279],["#ifdef KROLL_COVERAGE",2664],["#ifdef KROLL_COVERAGE",8033],["#ifdef DEBUG",11255]],"useCount":111060},{"word":"ifndef","context":[["#ifndef SP_CODA",1668],["#ifndef NS_BLOCK_ASSERTIONS",1232],["#ifndef QT_MAC_USE_COCOA",4431],["#ifndef CN1_USE_ARC",918],["#ifndef WX_PRECOMP",886],["#ifndef NP_NO_CARBON",641],["#ifndef TI_USE_AUTOLAYOUT",857],["#ifndef NDEBUG",709],["#ifndef __clang_analyzer__",658],["#ifndef NDEBUG",647]],"useCount":29696},{"word":"ignored","context":[["#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"",5393],["#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"",3209],["#pragma clang diagnostic ignored \"-Wcovered-switch-default\"",460],["#pragma clang diagnostic ignored \"-Warc-retain-cycles\"",500],["#pragma clang diagnostic ignored \"-Wgnu\"",1715],["#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"",1628],["#pragma clang diagnostic ignored \"-Wincomplete-implementation\"",1160],["#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"",1032],["#pragma clang diagnostic ignored \"-Wundeclared-selector\"",1016],["#pragma clang diagnostic ignored \"-Wdeprecated-implementations\"",501]],"useCount":28247},{"word":"ii","context":[["ii = ii + 1;",349],["ii = ii+1;",364],["ii = ii+1;",364],["ii = ii + 1;",349],["ii = 0;",348],["if ~isempty(ii),",342],["ii = 1;",341],["if ii == 1",274],["for ii=1:n",205],["for ii = 1:n",198]],"useCount":44959},{"word":"image","context":[["self.image = image;",1334],["if (image != nil) {",1353],["if (!image) {",1486],["if (image == nil)",1640],["return image;",14931],["UIImage *image = UIGraphicsGetImageFromCurrentImageContext();",4884],["if (image) {",3984],["[image release];",2476],["UIImage *image = nil;",2446],["if (image!=nil)",2280]],"useCount":361174},{"word":"imageNamed","context":[["self.navigationItem.titleView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@\"MainTitle\"]];",209],["return [UIImage imageNamed:name];",169],["UIImage *image = [UIImage imageNamed:imageName];",531],["UIImage *image = [UIImage imageNamed:@\"modules/ui/images/closeButton.png\"];",441],["UIImage *badgeImage = [UIImage imageNamed:@\"modules/ui/images/badge.png\"];",441],["image = [[NSImage imageNamed:@\"NSApplicationIcon\"] retain];",436],["resultImage = [UIImage imageNamed:image];",425],["return [UIImage imageNamed:imageName];",202],["UIImage *image = [UIImage imageNamed:name];",202],["HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@\"HUD-error\"]];",274]],"useCount":28940},{"word":"imageSize","context":[["if (imageSize.width > 1.0)",449],["[self loadDefaultImage:imageSize];",662],["CGFloat height = imageSize.height;",527],["CGFloat width = imageSize.width;",522],["CGSize imageSize = [image size];",492],["CGSize imageSize = sourceImage.size;",479],["UIImage *poster = [[ImageLoader sharedLoader] loadImmediateImage:defURL withSize:imageSize];",451],["CGSize imageSize = CGSizeMake(TiDimensionCalculateValue(width, 0.0),",450],["imageSize = CGSizeMake(ceilf(scale*fullImageSize.width),",449],["scale = imageSize.height/fullImageSize.height;",449]],"useCount":33268},{"word":"imageView","context":[["@property (nonatomic, strong) UIImageView *imageView;",844],["if (imageView!=nil)",902],["@property (weak, nonatomic) IBOutlet UIImageView *imageView;",1017],["imageView.image = nil;",1077],["self.imageView.image = image;",1151],["return imageView;",1615],["imageView.userInteractionEnabled = YES;",788],["imageView.contentMode = UIViewContentModeScaleAspectFit;",802],["UIImageView *imageView = [[UIImageView alloc] init];",858],["[self addSubview:imageView];",1629]],"useCount":70085},{"word":"images","context":[["// Release any cached data, images, etc. that aren't in use.",470],["RELEASE_TO_NIL(images);",906],["// and a set of images",451],["[images addObject:img];",464],["[self fireLoadEventWithState:@\"images\"];",451],["// refuse to start animation if you don't have any images",451],["// Release any cached data, images, etc that aren't in use.",5076],["// don't let the placeholder stomp on our new images",451],["NSURL *theurl = [TiUtils toURL:[images objectAtIndex:position] proxy:self.proxy];",451],["// remove any existing images",902]],"useCount":36617},{"word":"img","context":[["UIImage *img = [UIImage imageWithCGImage:cgimg];",334],["return img;",1790],["UIImage *img = UIGraphicsGetImageFromCurrentImageContext();",537],["[images addObject:img];",464],["if (img!=nil)",454],["if (img) {",454],["-(void)loadUrl:(id)img",420],["NSURL *url_ = [TiUtils toURL:[img absoluteString] proxy:self.proxy];",402],["-(void)queueImage:(id)img index:(int)index_",359],["-(void)setUrl_:(id)img",242]],"useCount":33973},{"word":"implementation","context":[["#pragma clang diagnostic ignored \"-Wincomplete-implementation\"",1160],["@implementation AppDelegate",34927],["@implementation RootViewController",1167],["@implementation Tests",1285],["@implementation MainViewController",1951],["// Replace this implementation with code to handle the error appropriately.",2559],[":- implementation.",7245],["// An empty implementation adversely affects performance during animation.",7709],["@implementation ViewController",20993],["XCTFail(@\"No implementation for \\\"%s\\\"\", __PRETTY_FUNCTION__);",9751]],"useCount":316428},{"word":"import","context":[["#import <Cocoa/Cocoa.h>",8117],["#import \"TiUtils.h\"",11021],["#import <QuartzCore/QuartzCore.h>",13692],["#import <objc/runtime.h>",18584],["#import \"ViewController.h\"",24677],["#import \"AppDelegate.h\"",70921],["#import <Foundation/Foundation.h>",36021],["#import <XCTest/XCTest.h>",45377],["#import <UIKit/UIKit.h>",62878],["#import <Cocoa/Cocoa.h>",4929]],"useCount":1739686},{"word":"import_module","context":[[":- import_module list.",3560],[":- import_module io.",3908],[":- import_module int.",2563],[":- import_module string.",2053],[":- import_module require.",1926],[":- import_module bool.",1738],[":- import_module maybe.",1534],[":- import_module map.",1384],[":- import_module pair.",1149],[":- import_module parse_tree.prog_data.",1130]],"useCount":50396},{"word":"in","context":[["for (LauncherButton* button in buttonPage)",3729],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["* Redistribution and use in source and binary forms, with or without",4482],["// Return the number of rows in the section.",4535],["Redistribution and use in source and binary forms, with or without",5044],["// Release any cached data, images, etc that aren't in use.",5076],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["for (NSArray* buttonPage in buttons)",3286]],"useCount":941059},{"word":"inProtocol","context":[["- (void) read: (id <TProtocol>) inProtocol;",1087],["[TProtocolUtil skipType: fieldType onProtocol: inProtocol];",8844],["NSString * fieldValue = [inProtocol readString];",2118],["[inProtocol readStructEnd];",2104],["[inProtocol readFieldEnd];",2103],["[inProtocol readStructBeginReturningName: NULL];",2095],["[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];",2094],["- (void) read: (id <TProtocol>) inProtocol",2094],["[inProtocol readMessageEnd];",1651],["[fieldValue read: inProtocol];",2198]],"useCount":31754},{"word":"include","context":[["#include \"J2ObjC_source.h\"",5149],["#include \"base/logging.h\"",4363],["#include \"IOSClass.h\"",3445],["#include \"testing/gtest/include/gtest/gtest.h\"",2516],["#include \"testing/gtest/include/gtest/gtest.h\"",2516],["#include \"base/mac/mac_util.h\"",2280],["#include \"base/mac/scoped_nsobject.h\"",2264],["#include <stdlib.h>",2227],["#include <string.h>",2153],["#include \"base/strings/sys_string_conversions.h\"",4771]],"useCount":396225},{"word":"ind","context":[["if isempty(ind)",554],["datamode = datamode(ind); time_adj = time_adj(ind);",414],["datamode = datamode(ind); time_adj = time_adj(ind);",414],["position_qc = position_qc(ind); juld_qc = juld_qc(ind); prof_temp_qc = prof_temp_qc(ind);",455],["position_qc = position_qc(ind); juld_qc = juld_qc(ind); prof_temp_qc = prof_temp_qc(ind);",455],["prof_psal_qc = prof_psal_qc(ind); prof_pres_qc = prof_pres_qc(ind);",455],["position_qc = position_qc(ind); juld_qc = juld_qc(ind); prof_temp_qc = prof_temp_qc(ind);",455],["prof_psal_qc = prof_psal_qc(ind); prof_pres_qc = prof_pres_qc(ind);",455],["ind = 1;",511],["if ~isempty(ind)",553]],"useCount":47144},{"word":"index","context":[["index = 1;",1090],["if (index == 0) {",1250],["switch (index) {",1280],["if (index != NSNotFound) {",1299],["NSUInteger index = 0;",1569],["NSInteger index = 0;",1652],["int index = 0;",1682],["index = 0;",1946],["return index;",2253],["index++;",4883]],"useCount":250988},{"word":"indexPath","context":[["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath",11931],["[tableView deselectRowAtIndexPath:indexPath animated:YES];",9007],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {",8876],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath",6381],["[tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];",4855],["- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {",4624],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436],["if (indexPath.row == 0) {",4391],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978],["switch (indexPath.row) {",4186]],"useCount":283305},{"word":"info","context":[["NSDictionary *info = [NSDictionary dictionaryWithObject:errMsg forKey:NSLocalizedDescriptionKey];",1480],["KrollCallback* callback = [info valueForKey:@\"callback\"];",1458],["return info;",1149],["- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info",967],["// Log levels: off, error, warn, info, verbose",751],["%   See http://www.pserc.cornell.edu/matpower/ for more info.",655],["- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {",646],["if (info) {",627],["ReadDestination type = [[info objectForKey:@\"type\"] intValue];",486],["** Contact: Nokia Corporation (qt-info@nokia.com)",493]],"useCount":113732},{"word":"information","context":[["% See licensing information in the code.",579],["* Dissemination of this information or reproduction of this material",624],["** conditions see http://qt.digia.com/licensing.  For further information",630],["* NOTICE: All information contained herein is, and remains",682],["% See http://www.maths.ox.ac.uk/chebfun/ for Chebfun information.",712],["* or visit www.oracle.com if you need additional information or have any",772],["% information about SBML, and the latest version of SBMLToolbox.",1262],["** packaging of this file.  Please review the following information to",1693],["% See http://www.chebfun.org/ for Chebfun information.",4660],["distributed with this work for additional information",3509]],"useCount":45274},{"word":"init","context":[["- (id) init",9749],["- (instancetype)init",16471],["if (self = [super init])",10034],["-(id)init",8970],["if ((self = [super init])) {",18009],["- (instancetype)init {",20286],["- (id)init {",20751],["if (self = [super init]) {",30289],["- (id)init",33085],["self = [super init];",124878]],"useCount":798977},{"word":"initWithCoder","context":[["self = [super initWithCoder:aDecoder];",9744],["- (id)initWithCoder:(NSCoder *)aDecoder",5290],["- (id)initWithCoder:(NSCoder *)aDecoder {",4319],["- (id)initWithCoder:(NSCoder *)decoder {",3109],["- (instancetype)initWithCoder:(NSCoder *)aDecoder {",2977],["self = [super initWithCoder:decoder];",2695],["self = [super initWithCoder:coder];",2315],["if (self = [super initWithCoder:aDecoder]) {",1673],["- (id) initWithCoder: (NSCoder *) decoder",1930],["- (instancetype)initWithCoder:(NSCoder *)aDecoder",2009]],"useCount":60419},{"word":"initWithFrame","context":[["if ((self = [super initWithFrame:frame]))",1406],["self = [super initWithFrame:frame];",31818],["if ((self = [super initWithFrame:frame])) {",2444],["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["- (instancetype)initWithFrame:(CGRect)frame",7578],["- (id)initWithFrame:(CGRect)frame {",6732],["if (self = [super initWithFrame:frame]) {",6377],["- (instancetype)initWithFrame:(CGRect)frame {",5205],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["- (id)initWithFrame:(CGRect)frame",14862]],"useCount":179036},{"word":"initWithNibName","context":[["self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];",19646],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",3313],["if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {",1061],["self = [super initWithNibName:nil bundle:nil];",1054],["if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {",815],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",763],["- (id)initWithNibName:(NSString*)nibNameOrNil bundle:(NSBundle*)nibBundleOrNil",688],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",647],["self.viewController = [[ViewController alloc] initWithNibName:@\"ViewController\" bundle:nil];",447]],"useCount":52211},{"word":"initWithStyle","context":[["- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {",1021],["- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",1258],["self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];",7208],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",4471],["self = [super initWithStyle:style];",3996],["- (id)initWithStyle:(UITableViewStyle)style",3578],["cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];",1772],["if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {",1335],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {",1310],["- (id)initWithStyle:(UITableViewStyle)style {",829]],"useCount":45233},{"word":"initialization","context":[["// Whether or not class initialization had already began, it has begun now",291],["// whether class initialization began or not",291],["// GCD allows single-dispatch predicates, specifically for situations like singleton initialization.",371],["[self initialization];",406],["// Custom initialization",467],["#pragma mark Allocation and initialization",545],["/** If you need to do any extra app-specific initialization, you can do it here",600],["% Begin initialization code - DO NOT EDIT",2506],["// Custom initialization",17475],["% End initialization code - DO NOT EDIT",2519]],"useCount":32632},{"word":"initialize","context":[["dict[NSLocalizedDescriptionKey] = @\"Failed to initialize the application's saved data\";",1304],["+ (void)initialize {",5036],["+ (void)initialize",966],["[super initialize];",899],["+ (void)initialize",5676],["// Insert code here to initialize your application",1371],["+(void)initialize",1775],["+ (void) initialize {",2302],["+ (void) initialize",3075],["[self initialize];",3119]],"useCount":47285},{"word":"input","context":[["[input readMessage:subBuilder extensionRegistry:extensionRegistry];",648],["% check if the input cfg is valid for this function",579],["* Set the value of the AccessToken input for this Choreo.",617],["return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];",1354],["if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {",1341],["% input:",1009],["SInt32 tag = [input readTag];",945],["%get level and version and check the input arguments are appropriate",816],["* Set the value of the ResponseFormat input for this Choreo.",769],["% input",850]],"useCount":105828},{"word":"instance","context":[["instance = [self new];",499],["if (instance) {",301],["if (!instance) {",304],["return instance;",326],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",541],["instance = [[self alloc] init];",800],["static id instance;",811],["%      instance to run (singleton)\".",2090],["return instance;",5299],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306]],"useCount":60110},{"word":"instancetype","context":[["- (instancetype)initWithFrame:(CGRect)frame",7578],["- (instancetype)init {",20286],["- (instancetype)init",16471],["- (instancetype)initWithFrame:(CGRect)frame {",5205],["- (instancetype)initWithCoder:(NSCoder *)aDecoder {",2977],["- (instancetype)copyWithZone:(NSZone *)zone {",2231],["- (instancetype) init {",2089],["+ (instancetype)sharedInstance {",1360],["+ (instancetype)serializer {",1812],["- (instancetype)initWithCoder:(NSCoder *)aDecoder",2009]],"useCount":155679},{"word":"int","context":[["int main(int argc, char *argv[]) {",3055],["int main(int argc, char *argv[]) {",3055],["int i = 0;",4734],["int main(int argc, char * argv[]) {",21373],["int main(int argc, char *argv[])",8723],["int main(int argc, char *argv[])",8723],["int main(int argc, char * argv[])",12959],["int main(int argc, char * argv[])",12959],["int main(int argc, char * argv[]) {",21373],["int i;",14682]],"useCount":731419},{"word":"int64_t","context":[["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",406],["int64_t rowid = 0;",437],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",453],["didResumeAtOffset:(int64_t)fileOffset",459],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",550],["int64_t fieldValue = [inProtocol readI64];",558],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",702],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",735],["dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));",1820],["dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{",391]],"useCount":27805},{"word":"intValue","context":[["if ([value respondsToSelector:@selector(intValue)])",1257],["int lengthValue = [TiUtils intValue:length def:[[buffer data] length]];",692],["int offsetValue = [TiUtils intValue:offset];",692],["return [value intValue];",1498],["return [result intValue];",586],["int position = [TiUtils intValue:pos];",560],["ReadDestination type = [[info objectForKey:@\"type\"] intValue];",486],["int index = [key intValue];",479],["int offsetVal = [TiUtils intValue:offset];",476],["int size = [TiUtils intValue:[info valueForKey:@\"chunkSize\"]];",472]],"useCount":61664},{"word":"integer","context":[["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856],["// CHECK-NEXT:            <key>col</key><integer>3</integer>",1888],["// CHECK-NEXT:            <key>col</key><integer>3</integer>",1888],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["// CHECK-NEXT:            <key>col</key><integer>5</integer>",1768],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352],["// CHECK-NEXT:            <key>col</key><integer>5</integer>",1768],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352]],"useCount":128175},{"word":"interface","context":[["@interface ViewController ()",15550],["@interface AppDelegate ()",21494],["@interface RootViewController ()",489],["@interface SecondViewController ()",499],["@interface LoginViewController ()",533],["// Update the user interface for the detail item.",662],["@interface MainViewController ()",725],["@interface DetailViewController ()",800],["@interface Tests : XCTestCase",1264],[":- interface.",7527]],"useCount":158672},{"word":"into","context":[["// function for converting a TiValueRef into a JSON string as NSString*",437],["// turn this into a static function (from what was a category to UIImage",444],["// convert it into a app:// relative path to load the resource",451],["// function for converting a TiValueRef into an NSObject* (as ID)",455],["// function for converting a TiValueRef into a NSDictionary*",455],["// convert the context into a CGImageRef and release the context",486],["// draw the gradient into the gray bitmap context",487],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",541],["* (you can get this by typing `ifconfig` into the terminal and selecting the",1052],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306]],"useCount":73671},{"word":"invalidate","context":[["#define TI_INVALIDATE_TIMER(__TIMER) { [__TIMER invalidate]; __TIMER = nil; }",443],["[_displayLink invalidate];",411],["- (void)invalidate",948],["[self invalidate];",1153],["[_timer invalidate];",1884],["[self.timer invalidate];",2167],["[timer invalidate];",3957],["[self.displayLink invalidate];",271],["- (void)invalidate",279],["[timer_ invalidate];",297]],"useCount":28576},{"word":"invocation","context":[["[invocation setSelector:selector];",1340],["[invocation performSelector:@selector(invoke) onThread:socketThread withObject:nil waitUntilDone:NO];",1215],["NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];",1108],["[invocation setTarget:self];",1400],["SAFE_WAIT(ioCondition, invocation);",972],["[invocation retainArguments];",1970],["[invocation invoke];",2627],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["LogWarn(@\"%@ - Method only available from within the context of a performBlock: invocation\", THIS_METHOD);",848]],"useCount":117034},{"word":"io","context":[[":- import_module io.",3908],[":- pred main(io::di, io::uo) is det.",1415],["io.nl(!IO),",1717],["#include \"java/io/IOException.h\"",1728],["io::di, io::uo) is det.",3882],[":- pred main(io::di, io::uo) is det.",1415],["io.nl(!IO)",937],["io.write_string(\", \", !IO),",626],["io.nl(!IO).",732],["io::di, io::uo) is det.",3882]],"useCount":49761},{"word":"is","context":[["// This is an example of a performance test case.",15613],["// This is an example of a functional test case.",15558],["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["WARN_IF_BACKGROUND_THREAD_OBJ;\t//NSNotificationCenter is not threadsafe!",4031],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["is det.",4177],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667],["io::di, io::uo) is det.",3882]],"useCount":947482},{"word":"isEqual","context":[["- (BOOL)isEqual:(id)object",1690],["- (BOOL)isEqual:(id)object {",2900],["- (BOOL)isEqual:(id)other {",482],["- (BOOL) isEqual:(id)other {",1090],["return [object isEqual:[NSNull null]] ? nil : object;",441],["BOOL newValue = (current != propvalue && ![current isEqual:propvalue]);",350],["BOOL isParentSame = [super isEqual:object];",957],["- (BOOL) isEqual: (id) anObject",668],["if (host == nil || [host isEqual:@\"\"]) {",486],["- (BOOL)isEqual:(id)anObject",666]],"useCount":50682},{"word":"isEqualToString","context":[["if ([elementName isEqualToString:@\"Error\"]) {",763],["if ([key isEqualToString:@\"toString\"] || [key isEqualToString:@\"valueOf\"])",1098],["if ([view.accessibilityLabel isEqualToString:TEXT_TO_LOOK_FOR]) {",1112],["if ([key isEqualToString:@\"toString\"] || [key isEqualToString:@\"valueOf\"])",1098],["if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {",701],["XCTAssert([[screen compactLineDump] isEqualToString:",640],["if ([[segue identifier] isEqualToString:@\"showDetail\"]) {",598],["else if ([s isEqualToString:@\"long\"])",486],["if ([alignment isEqualToString:@\"left\"])",486],["if ([s isEqualToString:@\"short\"])",486]],"useCount":179339},{"word":"isKindOfClass","context":[["if ([value isKindOfClass:[NSDictionary class]])",2268],["if ([value isKindOfClass:[NSString class]])",3488],["if ([properties isKindOfClass:[NSDictionary class]])",3389],["if ([value isKindOfClass:[NSString class]]) {",1161],["if ([value isKindOfClass:[NSDictionary class]]) {",1071],["if (spinner!=nil && [spinner isKindOfClass:[UIActivityIndicatorView class]])",902],["if ([firstarg isKindOfClass:[TiComplexValue class]])",900],["if ([value isKindOfClass:[NSArray class]]) {",856],["if ([value isKindOfClass:[TiPoint class]])",836],["if ([o isKindOfClass:[KrollObject class]])",874]],"useCount":188832},{"word":"isempty","context":[["if ( isempty(f) )",440],["if isempty(data)",470],["if isempty(k)",278],["if isempty(idx)",429],["if isempty(p)",361],["if isempty(X)",326],["if isempty(x)",471],["if isempty(ind)",554],["if isempty(hdr)",704],["if isempty(varargin)",808]],"useCount":63176},{"word":"it","context":[["// Have to autorelease because we need to hold onto it for throwing the exception",1215],["// This method is threadsafe because it is initially called",821],["// Releases the view if it doesn't have a superview.",5338],["it(@\"should pass\", ^{",1526],["it(@\"can do maths\", ^{",1609],["it(@\"can read\", ^{",1609],["it(@\"should fail with a sensible failure message\", ^{",1728],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["The species values are given as amounts of substance to make it easier to",774],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667]],"useCount":359548},{"word":"item","context":[["NSUInteger itemIndex = [page indexOfObject:item];",898],["return item;",4242],["[items addObject:item];",2659],["[item release];",1965],["NSIndexPath* path = [self indexPathOfItem:item];",898],["[item setTarget:self];",1153],["// Return NO if you do not want the item to be re-orderable.",4677],["// Return NO if you do not want the specified item to be editable.",5341],["item = nil;",1102],["if (item) {",1081]],"useCount":233040},{"word":"items","context":[["[items addObject:item];",2659],["NSMutableArray *items = [NSMutableArray new];",555],["return self.items.count;",555],["[items addObject:flexSpace];",587],["NSMutableArray *items = [[NSMutableArray alloc] init];",665],["NSMutableArray *items = [NSMutableArray array];",1289],["return items;",1966],["_items = items;",437],["[items addObject:button.item.userData];",443],["- (NSArray*)items",456]],"useCount":66013},{"word":"its","context":[["DeveloperLog(@\"[DEBUG] Proxy %@ is missing its javascript representation needed to remember %@.\",self,rememberedProxy);",286],["// - Any property setter which potentially takes an array of proxies MUST ALWAYS have its",325],["// You can turn on ARC for only PubNub files by adding '-fobjc-arc' to the build phase for each of its files.",328],["//It's possible that the 'setvalueforkey' has its own plans of what should be in the JS object,",432],["// this means its a return type of id",437],["*     * Neither the name of Google Inc. nor the names of its",268],["// property accessor - need to determine if its a objc property of method",437],["// see if its an actual method that takes an arg instead",437],["// View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),",602],["// Do any additional setup after loading the view from its nib.",7268]],"useCount":52475},{"word":"j","context":[["j=j+1;",1417],["j = j+1;",1084],["j = j+1;",1084],["0 + j*(0)",1088],["j++;",1107],["for j = 1:n",1114],["j = 1;",1327],["j = j + 1;",1352],["j = j + 1;",1352],["j=j+1;",1417]],"useCount":143822},{"word":"jsContext","context":[["KrollContext *ctx = GetKrollContext(jsContext);",1946],["return TiValueMakeUndefined(jsContext);",1779],["if ((jsCallbackArray == NULL) || (TiValueGetType(jsContext,jsCallbackArray) != kTITypeObject))",1095],["if ((jsProxyHash == NULL) || (TiValueGetType(jsContext,jsProxyHash) != kTITypeObject))",1163],["return ThrowException(jsContext, [e reason], exception);",1562],["TiContextRef jsContext = [context context];",1598],["KrollContext *ctx = GetKrollContext(jsContext);",1680],["return ThrowException(jsContext, [e reason], exception);",1702],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2578],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2310]],"useCount":66439},{"word":"json","context":[["[requestUrl replaceCharactersInRange: [requestUrl rangeOfString:@\".{format}\"] withString:@\".json\"];",295],["return json;",943],["[request setValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];",836],["[request setValue:@\"application/json\" forHTTPHeaderField:@\"Accept\"];",586],["* Maps json key to property name.",578],["[resourcePath replaceCharactersInRange: [resourcePath rangeOfString:@\".{format}\"] withString:@\".json\"];",561],["if (json) {",402],["if (!json) {",361],["id userInfo = [RKTestFixture parsedObjectWithContentsOfFixture:@\"user.json\"];",327],["headers:@{@\"Content-Type\": @\"application/json\"}];",299]],"useCount":54542},{"word":"just","context":[["// this is a different encoding than specified, just send it to the webview to load",451],["//at this point we're just going to fail",451],["// if we have a stored value as complex, just unwrap",450],["// to the bridge layer - the default is to just return ourselves, however,",450],["// since you can't serialize a proxy as JSON, just return null",450],["// third try just device specific normal res",418],["// oh well, just jack it in",451],["// but after we've detached our view.  In which case, we need to just ignore this",451],["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["// if have a queue and it's suspend, just throw our request",449]],"useCount":44298},{"word":"k","context":[["k = k+1;",2289],["k = 1;",2104],["k = k+1;",2289],["k = k + 1;",1642],["for k=1:K",849],["k=1;",1205],["k = k + 1;",1642],["k=k+1;",1903],["k = 0;",1366],["k=k+1;",1903]],"useCount":130296},{"word":"key","context":[["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5352],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",5856],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",2774],["TiStringRef nameRef = TiStringCreateWithCFString((CFStringRef)key);",2170],["// CHECK-NEXT:            <key>col</key><integer>3</integer>",1888],["// CHECK-NEXT:            <key>col</key><integer>3</integer>",1888],["// CHECK-NEXT:            <key>col</key><integer>5</integer>",1768]],"useCount":535831},{"word":"keyPath","context":[["for (NSString *keyPath in AFHTTPRequestSerializerObservedKeyPaths()) {",281],["[super observeValueForKeyPath:keyPath ofObject:object change:change context:context];",1945],["- (void)observeValueForKeyPath:(NSString *)keyPath",1571],["for (NSString *keyPath in [self observableKeypaths]) {",1234],["[self removeObserver:self forKeyPath:keyPath];",680],["[self addObserver:self forKeyPath:keyPath options:NSKeyValueObservingOptionNew context:NULL];",611],["[self updateUIForKeypath:keyPath];",241],["} else if ([keyPath isEqualToString:@\"labelText\"]) {",236],["[self performSelectorOnMainThread:@selector(updateUIForKeypath:) withObject:keyPath waitUntilDone:NO];",236],["} else if ([keyPath isEqualToString:@\"progress\"]) {",236]],"useCount":28789},{"word":"keys","context":[["// Check and see if any keys from APS and the rest of the dictionary match; if they do, just",243],["return keys;",909],["for (NSString * thisKey in keys)",450],["*  an array of which keys go first, and in what order. Otherwise, this is nil.",450],["*\tIn views where the order in which keys are applied matter (I'm looking at you, TableView), this should be",450],["id<NSFastEnumeration> keys = [dynprops allKeys];",427],["[keys addObject:key];",360],["@{ @\"keys\" : @[ @\"b/4\" ],",273],["for (NSString *key in keys)",459],["for (NSString *key in keys) {",1054]],"useCount":39369},{"word":"l","context":[["case 'l':",1066],["long l;",852],["l = ((lIMP)methodFunction)(target,selector,arg1,arg2);",843],["return [NSNumber numberWithLong:l];",821],["l = 0;",546],["(flags & kSCNetworkReachabilityFlagsIsLocalAddress)       ? 'l' : '-',",544],["ASDN::MutexLocker l(_propertyLock);",3040],["ASDN::MutexLocker l(__instanceLock__);",3773],["return UIEdgeInsetsMake(t, l, b, r);",418],["ASDN::MutexLocker l(_textKitLock);",497]],"useCount":56565},{"word":"label","context":[["label.textAlignment = NSTextAlignmentCenter;",3343],["return label;",2202],["[self addSubview:label];",1943],["label.textColor = [UIColor whiteColor];",1656],["[label release];",1566],["UILabel *label = [[UILabel alloc] init];",1520],["label.numberOfLines = 0;",1449],["[view addSubview:label];",1350],["[label sizeToFit];",1281],["label.backgroundColor = [UIColor clearColor];",3654]],"useCount":141640},{"word":"last","context":[["// we need to track when we've initially rendered the last row",146],["// if that was the last free packet description, then enqueue the buffer.",136],["// Cleanup after the last request",132],["* The last chunk of the response body will be sent with a tag of HTTP_RESPONSE.",138],["// the last listener called for event named 'my_event' has",141],["/* Get last part into buffer */",151],["// note, trigger action before the update since on the last delete it will be gone..",187],["// hold during the move in case the array is the last guy holding the retain count",187],["// Put teardown code here; it will be run once, after the last test case.",574],["// Records how much bandwidth all requests combined have used in the last second",131]],"useCount":28138},{"word":"launch","context":[["[[[XCUIApplication alloc] init] launch];",4666],["// Override point for customization after application launch.",31855],["DebugLog(@\"[WARN] The launch-url provided : %@ is invalid.\", [launchDefaults objectForKey:@\"application-launch-url\"]);",209],["// Override point for customization after app launch",209],["NSURL *url = [NSURL URLWithString:[launchDefaults objectForKey:@\"application-launch-url\"]];",209],["DebugLog(@\"[WARN] The launch-url provided : %@ is invalid.\", [launchDefaults objectForKey:@\"application-launch-url\"]);",209],["// Override point for customization after application launch.",367],["[task launch];",1407],["[task launch];",127],["disp('In Matlab, launch \"install_sedumi\" in the folder you put the SeDuMi files.')",132]],"useCount":43453},{"word":"launchOptions","context":[["[launchOptions removeObjectForKey:UIApplicationLaunchOptionsURLKey];",490],["- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions",694],["launchOptions:launchOptions];",1586],["launchOptions:launchOptions];",1586],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions",21104],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",23090],["didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",309],["- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",321],["[launchOptions removeObjectForKey:UIApplicationLaunchOptionsURLKey];",453],["[launchOptions removeObjectForKey:UIApplicationLaunchOptionsSourceApplicationKey];",413]],"useCount":62138},{"word":"layer","context":[["// 'layer' is an autorelease object.",503],["[self.layer renderInContext:UIGraphicsGetCurrentContext()];",602],["CGPoint anchorPoint = [[view layer] anchorPoint];",837],["return layer;",936],["self.layer.masksToBounds = YES;",1502],["[scene addChild: layer];",567],["CALayer *layer = [CALayer layer];",548],["CALayer *layer = [CALayer layer];",548],["[view.layer renderInContext:UIGraphicsGetCurrentContext()];",518],["// add layer as a child to scene",512]],"useCount":130365},{"word":"layout","context":[["// have to set these through their proper setters or else the layout is never updated!",247],["layout:(UICollectionViewLayout *)collectionViewLayout",344],["return layout;",332],["layout.minimumInteritemSpacing = 0;",322],["layout.scrollDirection = UICollectionViewScrollDirectionVertical;",312],["layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;",501],["UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];",1155],["[self layout];",311],["layout.minimumLineSpacing = 0;",285],["- (void)layout",269]],"useCount":45002},{"word":"layoutSubviews","context":[["[super layoutSubviews];",613],["[self layoutSubviews];",958],["- (void)layoutSubviews",547],["- (void)layoutSubviews",10261],["- (void)layoutSubviews{",1358],["-(void)layoutSubviews",1945],["[self layoutSubviews];",2195],["- (void)layoutSubviews {",7662],["[super layoutSubviews];",20064],["-(void)layoutSubviews{",853]],"useCount":51593},{"word":"left","context":[["NSInteger left = (TiDimensionIsAuto(leftCap) || TiDimensionIsUndefined(leftCap) || leftCap.value == 0) ?",449],["image.leftCap = left;",449],["if ([alignment isEqualToString:@\"left\"])",486],["-(UIImage *)loadImmediateStretchableImage:(NSURL *)url withLeftCap:(TiDimension)left topCap:(TiDimension)top",449],["CGFloat l = [TiUtils floatValue:@\"left\" properties:dict def:0];",418],["- (CGFloat)left {",382],["'HorizontalAlignment','left', ...",2570],["'HorizontalAlignment','left',...",1942],["'HorizontalAlignment', 'left', ...",476],["%      existing singleton*.  Starting from the left, property value pairs are",2022]],"useCount":70894},{"word":"len","context":[["for (i = 0; i < len; i++)",324],["for (int i = 0; i < len; i++) {",797],["return len;",529],["if (len == 0) {",501],["int len;",497],["size_t len = [toEncode length];",451],["- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len",376],["len = 0;",347],["size_t len;",327],["if (len == 0)",321]],"useCount":44167},{"word":"length","context":[["m = length(y); % number of training examples",1512],["return length;",1334],["id length = nil;",1180],["maxLength:(NSUInteger)length",924],["if (length == 0) {",788],["ENSURE_ARG_OR_NIL_AT_INDEX(length, args, 2, NSObject);",706],["if (offsetValue >= [[buffer data] length]) {",704],["for i=1:length(varargin)",704],["n = length(x);",703],["range.length = retText.length;",700]],"useCount":531514},{"word":"level","context":[["elseif (level == 2)",241],["if (level == 1)",258],["switch (level) {",298],["* Define log level for this file: OFF, ERROR, WARN, INFO, VERBOSE",298],["% check that the required low-level toolbox is available",331],["%get level and version and check the input arguments are appropriate",816],["//TODO: You know, we can probably nip this in the bud and do this at a lower level,",864],["if (level >= RCTLogLevelError) {",1053],["//Since listeners are now at the object level, we have to wait in line.",226],["// Set the quality level to use when rescaling",225]],"useCount":40094},{"word":"line","context":[["// If necessary, uncomment the line below to override it.",527],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["#line 21",452],["// Uncomment the following line to preserve selection between presentations.",3757],["% --- Outputs from this function are returned to the command line.",2400],["/* To override the methods, uncomment the line in the init function(s)",604],["/* To override, uncomment the line in the init function(s)",604],["% H1 line",622],["line = fgetl(fid);",1194],["% Get default command line output from handles structure",2229]],"useCount":125983},{"word":"list","context":[["\\\"type\\\":\\\"list\\\",\\",458],["// token+rule list labels",355],["INIT ; -- init variables and list array",279],["list.foldl(",337],["* <list>",236],["list(error_spec)::in, list(error_spec)::out) is det.",1406],["list(error_spec)::in, list(error_spec)::out) is det.",1406],["return list;",1001],["\\\"type\\\":\\\"list\\\", \\",633],[":- import_module list.",3560]],"useCount":67655},{"word":"listener","context":[["[module _fireEventToListener:@\"result\" withObject:event listener:callback thisObject:nil];",1222],["[self _fireEventToListener:@\"pump\" withObject:event listener:callback thisObject:nil];",1290],["[self _fireEventToListener:@\"writeToStream\" withObject:event listener:callback thisObject:nil];",1661],["[self _fireEventToListener:@\"read\" withObject:event listener:callback thisObject:nil];",1205],["[self _fireEventToListener:@\"write\" withObject:event listener:callback thisObject:nil];",962],["ENSURE_TYPE(listener,KrollCallback);",882],["KrollCallback* listener = [args objectAtIndex:1];",692],["KrollObject * ourObject = [self krollObjectForContext:[listener context]];",674],["[self _fireEventToListener:@\"error\" withObject:event listener:error thisObject:self];",486],["- (void)fireEvent:(id)listener withObject:(id)obj remove:(BOOL)yn thisObject:(id)thisObject_",476]],"useCount":27980},{"word":"load","context":[["- (void)load",481],["NSLog(@\"[WARN] couldn't load URL: %@\",url);",451],["if ([self.proxy _hasListeners:@\"load\"])",466],["+(void)load",529],["% load data",619],["[self load];",647],["NSLog(@\"[ERROR] Failed to load image: %@, Error: %@\",[request url], error);",458],["+ (void)load {",4554],["+ (void)load",3077],["[self.proxy fireEvent:@\"load\" withObject:event];",777]],"useCount":58222},{"word":"loading","context":[["self.loading = NO;",647],["// Do any additional setup after loading the view.",21076],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Do any additional setup after loading the view from its nib.",7268],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["NSString *failureReason = @\"There was an error creating or loading the application's saved data.\";",1286],["// and we want to start the spinner to let the user know that we're still loading. we",451],["// this can happen after receiving an async callback for loading the image",451],["if (webview.loading)",451],["self.loading = YES;",392]],"useCount":70328},{"word":"location","context":[["if (range.location==NSNotFound)",697],["\\\"location\\\":\\\"header\\\",\\",759],["// CHECK-NEXT:      <key>location</key>",787],["if (range.location == NSNotFound) {",889],["// CHECK-NEXT:      <key>location</key>",1244],["if (range.location != NSNotFound)",1451],["range.location = 0;",1531],["if (range.location!=NSNotFound)",2075],["if (range.location != NSNotFound) {",2089],["location:CODELOCATION];",17112]],"useCount":152441},{"word":"lock","context":[["[self.lock lock];",3344],["[lock unlock];",4175],["[lock lock];",3863],["[lock lock];",3863],["[self.lock unlock];",3394],["[self.lock lock];",3344],["[condition lock];",2670],["[condition lock];",2643],["[[self cancelledLock] lock];",2201],["[bandwidthThrottlingLock lock];",1699]],"useCount":82472},{"word":"log","context":[["GLchar *log = (GLchar *)malloc(logLength);",577],["% Change log:",576],["#include \"wx/log.h\"",391],["// and add this error to the error log",310],["// log this error to the console",310],["free(log);",634],["glGetProgramInfoLog(prog, logLength, &logLength, log);",308],["* Define log level for this file: OFF, ERROR, WARN, INFO, VERBOSE",298],["NSLog(@\"Fragment shader compile log: %@\", fragLog);",285],["NSLog(@\"Vertex shader compile log: %@\", vertLog);",285]],"useCount":36293},{"word":"long","context":[["- (unsigned long long)contentLength {",497],["long l;",852],["tag:(long)tag",804],["typedef long (*lIMP)(id, SEL, ...);",562],["format long",514],["unsigned long long length = 0;",509],["unsigned long long length = 0;",509],["unsigned long long ull;",477],["else if ([s isEqualToString:@\"long\"])",486],["- (unsigned long long)contentLength {",497]],"useCount":110809},{"word":"loop","context":[["// There's a chance that responding to this event will run a nested event loop, and",192],["// Run loop",192],["// wait only 10 seconds and then loop, this will allow us to garbage",244],["// removeObjectAtIndex sends an 'autorelease' message, so we need to drain the pool in the queue loop, NOT the invoke",210],["// wait only 10 seconds and then loop, this will allow us to garbage",210],["% Main loop",238],["// CHECK-NEXT:      <string>Entering loop body</string>",240],["// Begin the run loop for the socket",243],["// We start up the accepted socket thread, and wait for the run loop to be cached, and return it...",243],["// removeObjectAtIndex sends an 'autorelease' message, so we need to drain the pool in the queue loop, NOT the invoke",225]],"useCount":28045},{"word":"m","context":[["n = m",5887],["for i = 1:m",1812],["o = m",5887],["m = m - n",5887],["m = m - n",5887],["o = o + m",5887],["m = 10",5889],["//  ViewController.m",21870],["//  AppDelegate.m",31420],["//  main.m",48365]],"useCount":351640},{"word":"mac","context":[["#include \"base/mac/mac_util.h\"",2280],["#include \"base/mac/scoped_nsautorelease_pool.h\"",731],["#include \"base/mac/scoped_nsobject.h\"",2264],["#include \"base/mac/foundation_util.h\"",1874],["#include \"base/mac/bundle_locations.h\"",1399],["#include \"base/mac/scoped_cftyperef.h\"",1014],["#import \"base/mac/scoped_nsobject.h\"",868],["#import \"base/mac/foundation_util.h\"",333],["#include \"base/mac/sdk_forward_declarations.h\"",594],["base::mac::ScopedNSAutoreleasePool pool;",723]],"useCount":34532},{"word":"main","context":[["int main(int argc, char *argv[]) {",3055],["int main(int argc, const char * argv[]) {",2874],["int main(int argc, const char * argv[])",2219],["void main()",1590],["main(!IO) :-",1504],["// Release any retained subviews of the main view.",6136],["int main(int argc, char *argv[])",8723],["int main(int argc, char * argv[])",12959],["int main(int argc, char * argv[]) {",21373],["//  main.m",48365]],"useCount":165505},{"word":"mainScreen","context":[["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["return [UIScreen mainScreen].bounds;",456],["CGRect f = [[UIScreen mainScreen] applicationFrame];",479],["scale = [[UIScreen mainScreen] scale];",521],["self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];",658],["CGFloat scale = [UIScreen mainScreen].scale;",694],["CGRect screenRect = [[UIScreen mainScreen] bounds];",782],["UIGraphicsBeginImageContextWithOptions(self.size, NO, [[UIScreen mainScreen] scale]);",983],["CGRect screenBounds = [[UIScreen mainScreen] bounds];",986]],"useCount":49349},{"word":"make","context":[["make.edges.equalTo(self.view);",628],["The species values are given as amounts of substance to make it easier to",774],["//Or make this less onerous.",864],["* `inet` value under `en0:`) and make sure your computer and iOS device are",1052],["//first make sure we don't have a method with the fullname",437],["//TODO: need to consult property_getAttributes to make sure we're not hitting readonly, etc. but do this",437],["// This check serves to make sure that a non-NSDictionary object",429],["//encoding problem - fail fast and make sure we re-escape",418],["// occur, and it's up to the delegate to make sense of it (for now).",350],["% Instructions: Complete the following code to make predictions using",497]],"useCount":75566},{"word":"managedObjectContext","context":[["inManagedObjectContext:self.managedObjectContext];",878],["- (NSManagedObjectContext *)managedObjectContext",1265],["- (NSManagedObjectContext *)managedObjectContext {",1643],["if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {",2014],["if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {",2014],["NSManagedObjectContext *managedObjectContext = self.managedObjectContext;",2043],["NSManagedObjectContext *managedObjectContext = self.managedObjectContext;",2043],["if (managedObjectContext != nil) {",2147],["@synthesize managedObjectContext = _managedObjectContext;",2173],["[self.managedObjectContext performBlock:^{",694]],"useCount":40649},{"word":"manager","context":[["AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];",2610],["NSFileManager *manager = [NSFileManager defaultManager];",957],["AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];",1372],["return manager;",1462],["AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];",2610],["AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];",1372],["- (void)locationManager:(CLLocationManager *)manager",940],["manager.responseSerializer = [AFHTTPResponseSerializer serializer];",764],["- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error",543],["manager.requestSerializer = [AFJSONRequestSerializer serializer];",526]],"useCount":54535},{"word":"map","context":[["return map;",7038],["NSMutableDictionary *map = [OrderedDictionary dictionary];",477],["#include <map>",555],["</map>",1034],["- (void)TLfillFieldsWithValues:(std::map<int32_t, TLConstructedValue> *)__unused values",1167],["- (void)TLfillFieldsWithValues:(std::map<int32_t, TLConstructedValue> *)values",1205],["NSDictionary *map =",1383],[":- import_module map.",1384],["NSDictionary *map = @{",1541],["NSDictionary<NSString *, Class> *map = @{",2625]],"useCount":47696},{"word":"mark","context":[["#pragma mark - Actions",5740],["#pragma mark - Private",7457],["#pragma mark -",7752],["#pragma mark - Table view data source",12481],["#pragma mark - Navigation",21156],["#pragma mark -",170468],["#pragma mark - Properties",5638],["#pragma mark - NSCopying",4634],["#pragma mark - View lifecycle",4950],["#pragma mark - Initialization",4716]],"useCount":813713},{"word":"match","context":[["describe(@\"positive match\", ^{",1705],["if (match) {",327],["// Check and see if any keys from APS and the rest of the dictionary match; if they do, just",243],["// IP match",300],["// Name match",300],["for (NSTextCheckingResult *match in matches) {",306],["// This CPP symbol can be defined to use imports that match up to the framework",313],["match x to",316],["return match;",394],["describe(@\"negative match\", ^{",1690]],"useCount":32753},{"word":"matrix","context":[["% Add ones to the X data matrix",387],["% ARG kern : the kernel structure for which the matrix is computed.",326],["return [matrix autorelease];",304],["% ARG partial : matrix of partial derivatives of the function of",230],["%    function structure GPCF, a matrix X of input vectors and",228],["% RETURN k : the kernel matrix computed at the given points.",193],["% kernel matrix.",221],["#import \"kazmath/GL/matrix.h\"",191],["%   in a matrix all_theta, where the i-th row of all_theta corresponds",185],["% matrix.",197]],"useCount":42466},{"word":"max","context":[["coefDist = max(abs(coefDiff(:)));",466],["for (count = 0; count < max; count++)",1015],["diff = max(abs(imgExpctd(:) - imgActual(:))./abs(imgExpctd(:)));",633],["NSRange range = [cacheControl rangeOfString:@\"max-age=0\"];",449],["// the actual max-age setting for now.",449],["coefDist = max(abs(coefExpctd(:)-coefActual(:))./abs(coefExpctd(:)));",426],["int count, max;",367],["return max;",309],["double max = 1.0;",299],["NSUInteger count, max;",281]],"useCount":65645},{"word":"menu","context":[["[menu addItem:[NSMenuItem separatorItem]];",362],["%      *See GUI Options on GUIDE's Tools menu.  Choose \"GUI allows only one",2092],["[menu setMenuVisible:YES animated:YES];",327],["UIMenuController *menu = [UIMenuController sharedMenuController];",374],["/* Put menu into the menubar */",408],["[menu addItem:menuItem];",429],["return menu;",779],["[menu addItem:item];",809],["//  Choose \"Create NSManagedObject Subclassâ¦\" from the Core Data editor menu",841],["[menu addItem:[NSMenuItem separatorItem]];",904]],"useCount":78652},{"word":"merge","context":[["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",972],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070]],"useCount":51390},{"word":"message","context":[["message:nil",1740],["it(@\"should fail with a sensible failure message\", ^{",1728],["return message;",1329],["#import <objc/message.h>",2705],["message:message",3704],["message:message",3704],["message:(NSString *)message",1299],["message:(NSString *)message",1299],["// CHECK-NEXT:      <key>message</key>",1244],["disp(ME.message);",1064]],"useCount":167061},{"word":"method","context":[["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["* This method is used by `JSONModel`.",1156],["// note: this method is only for internal use, DO NOT CHANGE!",886],["switch method",956],["return NSSelectorFromString(method);",1076],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["* TMBChoreographyDelegate protocol method - called when this Choreo's execution",1952],["// can't call an abstract method",1485]],"useCount":300830},{"word":"methods","context":[["methods",19030],["static const J2ObjcMethodInfo methods[] = {",6328],["methods (Static)",3400],["#pragma mark - Private methods",2729],["static J2ObjcMethodInfo methods[] = {",2030],["#pragma mark - Public methods",1884],["#pragma mark - Class methods",1348],["#pragma mark - Instance methods",1221],["methods (Access = private)",1061],["#pragma mark Private methods",1026]],"useCount":107032},{"word":"min","context":[["int min = 1;",452],["if (readyCount >= min)",451],["@{@\"key\": @\"toggleAutoScaleMinMax\", @\"label\": @\"Toggle auto scale min/max\"},",216],["\\\"min\\\":1, \\",204],["pp(k) = (100 * (xtoc(k) - mtoc(k)) / min(mtoc(k),xtoc(k)));",192],["xlim([min(ienergy) max(ienergy)]);",161],["return min;",176],["case 'min'",155],["min:0",147],["dat_min = min(dat_min,min(data_pl));",142]],"useCount":37436},{"word":"mode","context":[["jobnr. mode duration  R 1  R 2  N 1  N 2",7267],["switch mode",533],["jobnr. mode duration  R 1  R 2  R 3  R 4  R 5  N 1  N 2",546],["jobnr. mode duration  R 1  R 2  R 3  N 1  N 2",557],["jobnr. mode duration  R 1  N 1  N 2",553],["hud.mode = MBProgressHUDModeText;",782],["jobnr. mode duration  R 1  R 2  R 3  R 4  N 1  N 2",552],["jobnr. mode duration  R 1  R 2  N 1  N 2  N 3",600],["jobnr. mode duration  R 1  R 2  N 1",637],["switch (mode) {",642]],"useCount":88798},{"word":"model","context":[["const BookmarkNode* parent = model->bookmark_bar_node();",830],["// Validate initial model.",809],["use the model in a discrete stochastic simulator, but (as per usual SBML",776],["% opening :/home/verlaanm/deltares/src/openda_20101025/public/tests/simple_oscillator/./model/OscillatorStochModel.xml",730],["// Returns the managed object model for the application.",706],["//  to delete and recreate this implementation file for your updated model.",841],["const BookmarkNode* root = model->bookmark_bar_node();",960],["BookmarkModel* model = BookmarkModelFactory::GetForProfile(profile());",2062],["return model;",1435],["_model = model;",962]],"useCount":136794},{"word":"modify","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["not agree with these terms, please do not use, install, modify or",1364]],"useCount":55665},{"word":"module","context":[["return module;",869],["// compile-time dependency on our sub module classes",445],["** This file is part of the QtGui module of the Qt Toolkit.",532],["[module _fireEventToListener:@\"result\" withObject:event listener:callback thisObject:nil];",1222],["if (module!=nil)",976],["return module;",947],["if (module!=nil)",840],["RELEASE_TO_NIL(module);",784],["module = [module_ retain];",763],["unexpected($module, $pred,",759]],"useCount":51061},{"word":"more","context":[["%   See http://www.pserc.cornell.edu/matpower/ for more info.",655],["for more details.",550],["% This file is part of SBMLToolbox.  Please visit http://sbml.org for more",1262],["// TODO: ENSURE_UI_THREAD needs to be deprecated in favor of more effective and concicse mechanisms",325],["*\tNo sense in doing hex when so many more characters are valid property",375],["*\timmutable, they are threadsafe and more importantly, ones that are in",393],["// Prevent more than one request from asking for credentials at once",524],["//TODO: rework these to be more accurate and multi-device",418],["% more details.",652],["available: visit www.juce.com for more information.",526]],"useCount":42841},{"word":"msg","context":[["err = [self badConfigError:msg];",499],["*errPtr = [self badParamError:msg];",366],["err = [self badParamError:msg];",1009],["message:msg",410],["return msg;",620],["[msg release];",468],["[self closeWithError:[self otherError:msg]];",393],["msg = '';",653],["*errPtr = [self badConfigError:msg];",783],["error(msg);",815]],"useCount":49458},{"word":"must","context":[["without modifications, you must retain this notice and the following",1687],["#warning This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",1664],["//  2. Altered source versions must be plainly marked as such, and must not be",642],["//  2. Altered source versions must be plainly marked as such, and must not be",642],["2. Altered source versions must be plainly marked as such, and must not be",510],["2. Altered source versions must be plainly marked as such, and must not be",510],["// gradient is always black-white and the mask must be in the gray colorspace",478],["// per doc, must stop webview load before releasing",451],["@\"The given socketQueue parameter must not be a concurrent queue.\");",426],["// NOTE: we must encode each individual part for the to successfully work",418]],"useCount":68636},{"word":"n","context":[["for i = 1:n",2896],["fprintf('\\n');",6549],["m = m - n",5887],["n = m",5887],["n = 1;",1311],["printf(\"\\n\");",1659],["fprintf('\\n')",1731],["fprintf('Program paused. Press enter to continue.\\n');",1769],["fprintf(fid,'\\n');",2643],["for i=1:n",3461]],"useCount":368304},{"word":"name","context":[["return name;",2146],["id value = [properties objectForKey:name];",3346],["name:UIApplicationDidReceiveMemoryWarningNotification",1709],["name:UIKeyboardWillHideNotification",1710],["[name release];",1902],["NSParameterAssert(name);",1908],["name:(NSString *)name",1973],["name:(NSString *)name",1973],["%      unrecognized property name or invalid value makes property application",2043],["@dynamic name;",2214]],"useCount":420072},{"word":"names","context":[["%     * Neither the name of the eMII/IMOS nor the names of its contributors",251],["% parameters@names =t_damp,omega parameters=[8.0,1.5708]",1160],["* 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of",778],["- Neither the name of Christiaan Hofman nor the names of any",762],["// handle property names which makes the object iterable",434],["// future proof against possible different model names, but in the event of",417],["return names;",392],["for i = 1:length(names)",274],["*     * Neither the name of Google Inc. nor the names of its",268],["% parameterUncertainty@names =t_damp,omega parameterUncertainty=[1.0,0.1257]",1164]],"useCount":29550},{"word":"namespace","context":[["namespace WebCore {",1343],["namespace {",10700],["namespace",798],["}  // namespace content",830],["using namespace Cedar::Doubles;",946],["using namespace std;",998],["using namespace Cedar::Matchers;",1144],["using namespace WebCore;",1535],["}  // namespace",8796],["namespace content {",879]],"useCount":61800},{"word":"nargin","context":[["if nargin < 5",2475],["if nargin && ischar(varargin{1})",2479],["if nargin<3",2748],["if nargin == 0",3014],["if nargin<2",3101],["if nargin == 1",3134],["if nargin < 1",3947],["if nargin < 4",4418],["if nargin < 3",7207],["if nargin < 2",8002]],"useCount":135468},{"word":"nargout","context":[["if nargout > 1",3324],["if nargout",3604],["[varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});",2579],["if nargout > 0",2208],["if nargout>1",1308],["if nargout > 2",1264],["if nargout == 0",1117],["if nargout == 1",875],["if nargout == 2",596],["if (nargout>1)",558]],"useCount":38561},{"word":"navigation","context":[["// Send a loadstart event for each top-level navigation (includes redirects).",98],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["// In a story board-based application, you will often want to do a little preparation before navigation",497],["// In a xib-based application, navigation from a table can be handled in -tableView:didSelectRowAtIndexPath:",292],["%station-specific navigation label and url to append to nav_base",198],["// Add the navigation controller's view to the window and display.",113],["#import \"ios/web/navigation/crw_session_controller.h\"",107],["- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation {",104],["%append station-specific label and url to base navigation",104]],"useCount":31360},{"word":"navigationController","context":[["self.navigationController.navigationBarHidden = NO;",1034],["[self.navigationController pushViewController:detailViewController animated:YES];",1152],["[self.navigationController dismissViewControllerAnimated:YES completion:nil];",1157],["[self.navigationController pushViewController:viewController animated:YES];",1658],["[self.navigationController pushViewController:controller animated:YES];",1937],["[self.navigationController popToRootViewControllerAnimated:YES];",2095],["[self.navigationController pushViewController:vc animated:YES];",4916],["[self.navigationController popViewControllerAnimated:YES];",11397],["self.navigationController.navigationBar.translucent = NO;",1051],["self.navigationController.navigationBarHidden = YES;",1090]],"useCount":94352},{"word":"navigationItem","context":[["self.navigationItem.hidesBackButton = YES;",631],["self.navigationItem.leftBarButtonItem = nil;",535],["self.navigationItem.rightBarButtonItem = nil;",1080],["self.navigationItem.rightBarButtonItem = self.editButtonItem;",450],["[self.navigationItem setLeftBarButtonItem:nil animated:YES];",364],["self.navigationItem.rightBarButtonItem = addButton;",638],["self.navigationItem.leftBarButtonItem = self.editButtonItem;",754],["self.navigationItem.rightBarButtonItem.enabled = YES;",771],["self.navigationItem.rightBarButtonItem.enabled = NO;",997],["// self.navigationItem.rightBarButtonItem = self.editButtonItem;",3581]],"useCount":37203},{"word":"need","context":[["% You need to return the following variables correctly",2148],["//TODO: If we have focus while this happens, we need to signal an update.",662],["// Have to autorelease because we need to hold onto it for throwing the exception",1215],["% You need to return the following variables correctly.",1039],["* or visit www.oracle.com if you need additional information or have any",772],["// This is called by +initialize so there is no need to worry",465],["/** If you need to do any extra app-specific initialization, you can do it here",600],["//NOTE: we need to return nil here since in JS you can ask for properties",661],["// but after we've detached our view.  In which case, we need to just ignore this",451],["// we attach the XHR bridge the first time we need a webview",451]],"useCount":86420},{"word":"net","context":[["%    \tThis is part of the BIOSIG-toolbox http://biosig.sf.net/",255],["* Authors: Jon Lech Johansen <jon-vl@nanocrew.net>",300],["% -- this function is part of iso2mesh toolbox (http://iso2mesh.sf.net)",329],["#import <net/if.h>",349],["#include <net/if_dl.h>",435],["#include <net/if.h>",526],["% URL/Info: http://neuroelf.net/",1144],["// http://code4app.com (cn) http://code4app.net (en)",596],["// Original - Christopher Lloyd <cjwl@objc.net>",252],["#import \"net/base/mac/url_conversions.h\"",193]],"useCount":29254},{"word":"new","context":[["UILabel *label = [UILabel new];",617],["NSMutableArray *array = [NSMutableArray new];",597],["return new;",664],["NSAutoreleasePool *pool = [NSAutoreleasePool new];",784],["RKObjectMappingOperationDataSource *dataSource = [RKObjectMappingOperationDataSource new];",886],["UIViewController *rootViewController = [UIViewController new];",1023],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["// Get the new view controller using [segue destinationViewController].",19412],["// Pass the selected object to the new view controller.",20206]],"useCount":232578},{"word":"next","context":[["if ([rs next]) {",453],["next(150, @1),",276],["while ([resultSet next]) {",292],["[self next];",257],["if (next) *next = str;",268],["% Application starting next step",1409],["while ([rs next]) {",1856],["// Dequeue the next object in the write queue",336],["while ([result next]) {",321],["if (next) *next = str;",268]],"useCount":55727},{"word":"nib","context":[["ofType:@\"nib\"];",410],["// Override returning the nib file name of the document",180],["// Implement loadView to create a view hierarchy programmatically, without using a nib.",195],["+ (UINib *)nib",284],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",292],["cell = [nib objectAtIndex:0];",313],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Do any additional setup after loading the view from its nib.",7268],["// Implement loadView to create a view hierarchy programmatically, without using a nib.",1112],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160]],"useCount":34703},{"word":"nibBundleOrNil","context":[["if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {",815],["self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];",348],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",263],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767],["self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];",19646],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",647],["- (id)initWithNibName:(NSString*)nibNameOrNil bundle:(NSBundle*)nibBundleOrNil",688],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",763],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",3313],["if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {",1061]],"useCount":46056},{"word":"nibNameOrNil","context":[["- (id)initWithNibName:(NSString*)nibNameOrNil bundle:(NSBundle*)nibBundleOrNil",688],["self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];",19646],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",763],["- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",647],["self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];",348],["if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {",815],["if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {",1061],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",263],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {",3313],["- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil",15767]],"useCount":46195},{"word":"nil","context":[["delegate:nil",10936],["if (cell == nil) {",11957],["[self dismissViewControllerAnimated:YES completion:nil];",13083],["return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",28704],["object:nil];",31684],["userInfo:nil];",10904],["return nil;",314242],["nil];",32314],["return nil;",37025],["NSError *error = nil;",48410]],"useCount":2588536},{"word":"no","context":[["* (no documentation provided)",438],["range = [cacheControl rangeOfString:@\"no-cache\"];",449],["// This is called by +initialize so there is no need to worry",465],["RH = no",1147],["% This function has no output args, see OutputFcn.",2180],["// attempt a function that has no args (basically a non-property property)",437],["//This remote object no longer exists.",433],["//it's no longer referenced by any contexts at all.",432],["// This method is called when watch view controller is no longer visible",405],["// nil for section name key path means \"no sections\".",375]],"useCount":112693},{"word":"noErr","context":[["return noErr;",2629],["return noErr;",1979],["OSStatus status = noErr;",450],["if (result != noErr)",466],["if (status != noErr) {",487],["if (status != noErr)",1723],["if (err != noErr) {",1322],["if (status != noErr) {",1235],["if (err != noErr) return nil;",432],["if (err == noErr) {",558]],"useCount":29106},{"word":"node","context":[["return node;",1572],["if (node) {",341],["xmlDtdPtr theRealNode = (xmlDtdPtr)[node XMLNode];",342],["return node;",396],["if (!node)",406],["if (node) {",428],["[node setStringValue:result];",528],["if (node != nil)",730],["</node>",79975],["CCScene *scene = [CCScene node];",1060]],"useCount":195956},{"word":"non","context":[["NSAssert(term != nil, @\"This method does not apply to non-term reads\");",479],["// NOTE: Have to fire a separate but non-'resume' event here because there is SOME information",244],["//only for non-production builds",437],["// attempt a function that has no args (basically a non-property property)",437],["// This check serves to make sure that a non-NSDictionary object",429],["NSAssert( child != nil, @\"Argument must be non-nil\");",369],["* The examples provided by Facebook are for non-commercial testing and",303],["% want for non-commercial purposes. However, it is appreciated if you",268],["[self throwException:[NSString stringWithFormat:@\"Passed non-view object %@ as passthrough view\",proxy]",254],["subject to these terms, Apple grants you a personal, non-exclusive",1432]],"useCount":35538},{"word":"nonatomic","context":[["@property (weak, nonatomic) IBOutlet UILabel *nameLabel;",711],["@property (nonatomic, strong) NSTimer *timer;",746],["@property (nonatomic, strong) UIScrollView *scrollView;",756],["@property (nonatomic, strong) UILabel *titleLabel;",792],["@property (weak, nonatomic) IBOutlet UILabel *titleLabel;",819],["@property (nonatomic, strong) UIImageView *imageView;",844],["@property (weak, nonatomic) IBOutlet UIImageView *imageView;",1017],["@property (nonatomic, strong) UITableView *tableView;",1287],["@property (weak, nonatomic) IBOutlet UITableView *tableView;",1814],["@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;",668]],"useCount":219420},{"word":"not","context":[["% handles    empty - handles not created until after all CreateFcns called",13063],["// Return NO if you do not want the specified item to be editable.",5341],["// Return NO if you do not want the item to be re-orderable.",4677],["WARN_IF_BACKGROUND_THREAD_OBJ;\t//NSNotificationCenter is not threadsafe!",4031],["## along with Octave; see the file COPYING.  If not, see",3037],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],[";Per VHA Directive 10-93-142, this routine should not be modified.",2550],[";;Per VHA Directive 2004-038, this routine should not be modified.",2012],["WARN_IF_BACKGROUND_THREAD_OBJ;\t//NSNotificationCenter is not threadsafe!",1838],[";;Per VHA Directive 10-93-142, this routine should not be modified.",1698]],"useCount":335499},{"word":"notification","context":[["// all plugins will get the notification, and their handlers will be called",587],["-(void)didReceiveMemoryWarning:(NSNotification*)notification",1105],["NSDictionary *userInfo = [notification userInfo];",1088],["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"animating\" notification:NO];",934],["[[NSNotificationCenter defaultCenter] postNotification:notification];",912],["[super didReceiveMemoryWarning:notification];",872],["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"paused\" notification:NO];",825],["[self.proxy replaceValue:NUMBOOL(YES) forKey:@\"animating\" notification:NO];",793],["- (void)windowWillClose:(NSNotification*)notification {",768],["NSDictionary *userInfo = notification.userInfo;",613]],"useCount":126715},{"word":"now","context":[["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["// For now, do the sensible thing... only go up to the end.",476],["// For now, do the sensible thing... throw an exception.",476],["// the actual max-age setting for now.",449],["// remove the spinner now that we've loaded our image",451],["//As such, obscuredHeight is now how much actually matters of scrollVisibleRect.",524],["// For now, we're shortcutting to suppress false warnings.",573],["NSDate *now = [NSDate date];",2671],["NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];",594],["// for now we can't really assume",418]],"useCount":55577},{"word":"null","context":[["[args addObject:[NSNull null]];",582],["value = [NSNull null];",540],["if (firstobj == [NSNull null])",450],["if (current==[NSNull null])",450],["else if (value == [NSNull null])",518],["if (value == nil || value == [NSNull null])",855],["return [NSNull null];",4113],["if (value == [NSNull null])",1364],["//When a null, we want to write a nil.",900],["if (thisValue == [NSNull null])",900]],"useCount":53016},{"word":"num2str","context":[["num2str(timestr(3)),'_',num2str(timestr(4)),'_',num2str(timestr(5)));",522],["num2str(num_trials), ',Fm', num2str(max_iter_per_grouping), ',', num2str(fg), ',',...",260],["num2str(num_trials), ',Fm', num2str(max_iter_per_grouping), ',', num2str(fg), ',',...",260],["save_file_name = strcat(save_path,num2str(numActivity),'Act_',num2str(numEmotion),'Em_',num2str(size(Names,2)),...",386],["save_file_name = strcat(save_path,num2str(numActivity),'Act_',num2str(numEmotion),'Em_',num2str(size(Names,2)),...",386],["save_file_name = strcat(save_path,num2str(numActivity),'Act_',num2str(numEmotion),'Em_',num2str(size(Names,2)),...",386],["',', num2str(Rand_seq_start_point), ',', num2str(max_num_groupings), ',',...",452],["',', num2str(Rand_seq_start_point), ',', num2str(max_num_groupings), ',',...",452],["num2str(timestr(3)),'_',num2str(timestr(4)),'_',num2str(timestr(5)));",522],["num2str(timestr(3)),'_',num2str(timestr(4)),'_',num2str(timestr(5)));",522]],"useCount":32214},{"word":"number","context":[["// Return the number of sections.",4606],["NSNumber* number = [KrollObject toID:ctx value:args[0]];",486],["// Return the number of rows in the section.",4535],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2578],["return ThrowException(jsContext, @\"invalid number of arguments\", exception);",2310],["m = length(y); % number of training examples",1512],["return number;",736],["// Customize the number of rows in the table view.",522],["JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, \"Invalid number of arguments\" );",541],["expect(@\"number\").to.equal(@\"string\");",634]],"useCount":124128},{"word":"numberOfRowsInSection","context":[["- (NSInteger)tableView:(UITableView *)table numberOfRowsInSection:(NSInteger)section",301],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",1626],["-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{",1480],["-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",547],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",342],["numberOfRowsInSection:(NSInteger)section {",375],["numberOfRowsInSection:(NSInteger)section",477],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{",2759]],"useCount":44378},{"word":"numberOfSectionsInTableView","context":[["-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {",338],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {",172],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)ourTableView",187],["- (NSInteger) numberOfSectionsInTableView:(UITableView *)tableView {",233],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView",255],["-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{",857],["-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView",896],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{",1108],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {",11511],["- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView",11573]],"useCount":29487},{"word":"numel","context":[["if numel(ienergy)>1",159],["numel(opts) ~= 1",174],["if(offset > numel(out)), return, end",660],["eIdx = sIdx + numel(subImg) - 1;",464],["coefDist = norm(coefDiff(:))/sqrt(numel(coefDiff));",442],["numel(hfile) ~= 1 || ...",342],["for i=1:numel(fn)",260],["coefDist = norm(coefActual(:))/sqrt(numel(coefActual));",253],["for i = 1:numel(this)",198],["for k = 1:numel(F)",185]],"useCount":34898},{"word":"o","context":[["o = m",5887],["_r0.o = JAVA_NULL;",1068],["[_r1.o retain];",1358],["o = o + m",5887],["*exception = [KrollObject toValue:[o context] value:ex];",1530],["[_r1.o release];",1605],["[_r0.o retain];",1668],["o = o + m",5887],["[_r0.o release];",1790],["KrollObject* o = (KrollObject*) TiObjectGetPrivate(object);",1741]],"useCount":107729},{"word":"obj","context":[["return obj;",6296],["[obj release];",673],["eventObject = [NSMutableDictionary dictionaryWithDictionary:obj];",736],["id obj = nil;",758],["if ([obj isKindOfClass:[NSDictionary class]])",804],["if (obj) {",867],["id obj;",1228],["[obj forwardInvocation:inv];",1316],["^(CALayer *obj, CGFloat values[]) {",645],["TiUITableViewRowProxy* row = (TiUITableViewRowProxy*)action.obj;",1674]],"useCount":222670},{"word":"objc","context":[["#import \"objc/runtime.h\"",651],["#include <objc/objc.h>",661],["return objc;",534],["// property accessor - need to determine if its a objc property of method",437],["#import <objc/Ice.h>",431],["#include <objc/objc.h>",661],["#include <objc/runtime.h>",716],["#import <objc/runtime.h>",1259],["#import <objc/message.h>",2705],["#import <objc/runtime.h>",18584]],"useCount":38172},{"word":"object","context":[["- (BOOL)isEqual:(id)object {",2900],["object:self",3666],["// Pass the selected object to the new view controller.",20206],["if (object == nil) {",3110],["object:nil];",3764],["object:nil",3786],["object:self];",4071],["return object;",5468],["% --- Executes during object creation, after setting all properties.",14669],["object:nil];",31684]],"useCount":443323},{"word":"objectAtIndex","context":[["KrollCallback* listener = [args objectAtIndex:1];",692],["KrollCallback* callback = [args objectAtIndex:2];",494],["NSString *username = [args objectAtIndex:0];",454],["properties = [args objectAtIndex:0];",518],["NSScreen* screen = [[NSScreen screens] objectAtIndex:0];",497],["NSString *documentsDirectory = [paths objectAtIndex:0];",2792],["NSString *type = [args objectAtIndex:0];",1056],["UIView *view = [[container subviews] objectAtIndex:position];",902],["NSMutableDictionary* params = [args objectAtIndex:1];",741],["UIView *spinner = [[view subviews] count] > 0 ? [[view subviews] objectAtIndex:0] : nil;",902]],"useCount":146770},{"word":"objectForKey","context":[["id value = [properties objectForKey:name];",3346],["id thisValue = [keyedValues objectForKey:thisKey];",900],["id currentValue = [keyedValues objectForKey:currentKey];",805],["ImageLoaderRequest *req = [[request userInfo] objectForKey:@\"request\"];",758],["id value = [self objectForKey:key];",702],["if ([headerParams objectForKey:@\"Accept\"]) {",580],["CDVAudioFile* audioFile = [[self soundCache] objectForKey:mediaId];",558],["ReadDestination type = [[info objectForKey:@\"type\"] intValue];",486],["NSDictionary* info = [operationInfo objectForKey:NUMINT(tag)];",472],["NSString *name = [event objectForKey:@\"type\"];",451]],"useCount":178888},{"word":"objects","context":[["return objects;",543],["NSParameterAssert((objects != NULL) && (count <= capacity));",591],["\"if(value!==undefined){objects.push(Ti.App._JSON(prop,bridge)+': '+value)}}return'{'+objects.join(',')+'}'};\"",451],["// this proxy is being touched.  since objects can be referenced from one context",450],["// special generic factory for creating proxy objects for modules",450],["// we can safely cache method objects",437],["// callback for handling retrieving an objects property (in JS land)",437],["[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {",632],["//TODO: This is a temprorary workaround for the time being. We have to properly take care of [undefined] objects.",765],["\"if(value!==undefined){objects.push(Ti.App._JSON(prop,bridge)+': '+value)}}return'{'+objects.join(',')+'}'};\"",451]],"useCount":55578},{"word":"of","context":[["// Dispose of any resources that can be recreated.",61819],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Override to support conditional editing of the table view.",4691],["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["// Override to support conditional rearranging of the table view.",4695],["// Release any retained subviews of the main view.",6136],["// Put the code you want to measure the time of here.",15555],["// This is an example of a functional test case.",15558],["// This is an example of a performance test case.",15613],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003]],"useCount":1058733},{"word":"off","context":[["warning off",586],["* This is main kick off after the app inits, the views and Settings are setup here. (preferred - iOS4 and up)",603],["hold off;",10725],["hold off",12647],["'Visible','off',...",587],["axis off",2748],["axis off;",1778],["box off",1161],["// Log levels: off, error, warn, info, verbose",751],["'Visible','off');",712]],"useCount":101234},{"word":"offset","context":[["[scrollView setContentOffset:offset animated:YES];",1090],["int offsetValue = [TiUtils intValue:offset];",692],["if(offset > numel(out)), return, end",660],["ENSURE_ARG_OR_NIL_AT_INDEX(offset, args, 1, NSObject);",706],["id offset = nil;",710],["bufferOffset:(NSUInteger)offset",769],["return offset;",879],["[self updatePagerWithContentOffset:offset];",898],["offset = 0;",1161],["CGPoint offset = CGPointMake(newX, 0);",900]],"useCount":118050},{"word":"ok","context":[["JSB_PRECONDITION2(ok, cx, JS_FALSE, \"Error processing arguments\");",928],["JSBool ok = JS_TRUE;",1456],["ok(ME, name);",1094],["catch %#ok<CTCH>",1010],["ok = 0;",522],["if (!ok) {",558],["if (ok) {",644],["return ok;",674],["; %#ok Undocumented",693],["tprintf(\"ok\\n\");",1006]],"useCount":36970},{"word":"on","context":[["hold on",33442],["hold on;",23058],["% hold on",1889],["% Hint: edit controls usually have a white background on Windows.",8913],["* completes successfully. This class in turn calls the same function on the object",1952],["//  Created by ___FULLUSERNAME___ on ___DATE___.",2243],["grid on",7445],["grid on;",6390],["%      *See GUI Options on GUIDE's Tools menu.  Choose \"GUI allows only one",2092],["% Hint: popupmenu controls usually have a white background on Windows.",2084]],"useCount":507364},{"word":"onceToken","context":[["//    dispatch_once(&onceToken, ^{",155],["static dispatch_once_t onceToken;",36390],["dispatch_once(&onceToken, ^",343],["static dispatch_once_t onceToken = 0;",622],["dispatch_once(&onceToken, ^{",866],["dispatch_once(&onceToken, ^",980],["static dispatch_once_t onceToken;",1171],["onceToken:&onceToken];",1545],["onceToken:&onceToken];",1545],["dispatch_once(&onceToken, ^{",33939]],"useCount":78699},{"word":"one","context":[["%      *See GUI Options on GUIDE's Tools menu.  Choose \"GUI allows only one",2092],["* Loading JavaScript code - uncomment the one you want.",1049],["// second consult our fixed properties dictionary if we have one",437],["// this proxy is being touched.  since objects can be referenced from one context",450],["//step 3: try an appropriate legacy encoding (if one) -- what's that? Latin-1?",451],["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["% If you specify one of these (or both) the input data will be read from a *.mat",465],["// cancel a pending request if we have one pending",482],["// Prevent more than one request from asking for credentials at once",524],["'Actual image size is different from the expected one.');",608]],"useCount":80654},{"word":"only","context":[["//NOTE: this should only be called on suspend",449],["%      *See GUI Options on GUIDE's Tools menu.  Choose \"GUI allows only one",2092],["// note: this method is only for internal use, DO NOT CHANGE!",886],["LogWarn(@\"%@ - Method only available from within the context of a performBlock: invocation\", THIS_METHOD);",848],["// For now, do the sensible thing... only go up to the end.",476],["% files should contain only a single variable, corresponding with the",465],["// However, we only do this if the content looks like HTML",451],["// Different from resume - there's some information we can only update AFTER the app has popped to the foreground.",444],["// this is only set in the case of a Plus Module",445],["// honor cache control parameters - however, we're only caching",449]],"useCount":100412},{"word":"open","context":[["#import \"open.h\"",331],["[self.outputStream open];",376],["[outputStream open];",393],["\"var xhr=new Ti.App._xhr();xhr.open('GET',url,false);xhr.send()}catch(X){}};\"",451],["[self.inputStream open];",371],["[inputStream open];",484],["- (void)open {",502],["[db open];",554],["if ([db open]) {",589],["[stream open];",623]],"useCount":39193},{"word":"operation","context":[["} failure:^(AFHTTPRequestOperation *operation, NSError *error) {",10214],["return operation;",3232],["AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];",990],["AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithRequest:request success:success failure:failure];",1008],["failure:^(AFHTTPRequestOperation *operation, NSError *error) {",1046],["[self.operationQueue addOperation:operation];",1242],["success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success",1705],["failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure",1893],["success:^(AFHTTPRequestOperation *operation, id responseObject) {",2014],["[operation start];",2188]],"useCount":103615},{"word":"opt","context":[["setappdata(h, 'opt', opt);",1092],["opt = getappdata(h, 'opt');",444],["opt = getappdata(h, 'opt');",444],["if(opt != miscParams->end())",328],["rect = opt->rect;",190],["switch (d->aquaSizeConstrain(opt, widget)) {",190],["opt = [];",186],["opt= opt_proplistToStruct(varargin{:});",182],["gb_name_structure = 'opt';",163],["setappdata(h, 'opt', opt);",1092]],"useCount":43074},{"word":"options","context":[["options:kNilOptions",2346],["options:0",14386],["options:options",2626],["options:options",2626],["options:NSStringDrawingUsesLineFragmentOrigin",1919],["options:NSLiteralSearch",1848],["options:UIViewAnimationOptionCurveEaseInOut",1706],["options:0];",1598],["options:NSKeyValueObservingOptionNew",1584],["options:UIViewAnimationOptionCurveEaseOut",1476]],"useCount":229400},{"word":"or","context":[["Redistribution and use in source and binary forms, with or without modification,",2376],["% Redistribution and use in source and binary forms, with or without",2485],["* Redistribution and use in source and binary forms, with or without",2828],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["* Redistribution and use in source and binary forms, with or without",4482],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["*    documentation and/or other materials provided with the distribution.",2906],["Redistribution and use in source and binary forms, with or without",5044]],"useCount":299387},{"word":"order","context":[["% field  synthesis  methods  like  wave  field  synthesis  or  higher  order *",232],["% methods like wave field synthesis or higher order ambisonics.              *",248],["// that must be invoked on animation completion in order to finish deployment",263],["// Do not rely on the block being run in order to release the packet,",478],["*\tIn views where the order in which keys are applied matter (I'm looking at you, TableView), this should be",450],["*  an array of which keys go first, and in what order. Otherwise, this is nil.",450],["//specify the exact order",418],["//NOTE; I'm not sure the order here.. the docs don't necessarily",418],["and ncarg_c, preferably in that order.",366],["//Remove null values from header collection in order to omit from request",295]],"useCount":35938},{"word":"org","context":[["*          Felix Paul KÃ¼hne <fkuehne at videolan dot org>",578],["www.interactex.org",501],["//  http://cocoadocs.org/docsets/JSQMessagesViewController",610],["//  Created by: Jon Reid, http://qualitycoding.org/",635],["** Contact: http://www.qt-project.org/legal",646],["http://www.cocos2d-x.org",858],["% This file is part of FieldTrip, see http://www.fieldtriptoolbox.org",1190],["% This file is part of SBMLToolbox.  Please visit http://sbml.org for more",1262],["* cocos2d for iPhone: http://www.cocos2d-iphone.org",1858],["% See http://www.chebfun.org/ for Chebfun information.",4660]],"useCount":57304},{"word":"orientation","context":[["UIDeviceOrientation orient = [UIDevice currentDevice].orientation;",430],["if (UIInterfaceOrientationIsLandscape(orientation)) {",755],["if ([UIImage instancesRespondToSelector:@selector(imageWithCGImage:scale:orientation:)])",449],["+(UIInterfaceOrientation)orientation",418],["return UIInterfaceOrientationIsLandscape([self orientation]);",418],["return UIInterfaceOrientationIsPortrait([self orientation]);",418],["// Override to allow orientations other than the default portrait orientation.",1620],["UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;",1478],["UIInterfaceOrientation orientation = [[UIApplication sharedApplication] statusBarOrientation];",874],["switch (orientation) {",1282]],"useCount":45108},{"word":"origin","context":[["frame.origin = origin;",858],["frame.origin.x = 0;",751],["frame.origin = origin;",858],["frame.origin.y = 0;",1153],["return self.frame.origin;",1199],["return self.frame.origin.y;",2046],["return self.frame.origin.x;",2034],["frame.origin.y = y;",1339],["frame.origin.x = x;",1329],["return self.frame.origin.y + self.frame.size.height;",713]],"useCount":211428},{"word":"other","context":[["// Override to allow orientations other than the default portrait orientation.",1620],["- (BOOL) isEqual:(id)other {",1090],["[super copyAllFieldsTo:other];",1095],["if (other == self) {",1298],["[self mergeUnknownFields:other.unknownFields];",1348],["%       documentation and/or other materials provided with the distribution.",1497],["*    documentation and/or other materials provided with the distribution.",2906],["and/or other materials provided with the distribution.",2114],["documentation and/or other materials provided with the distribution.",1921],["other materials provided with the distribution.",1826]],"useCount":90893},{"word":"otherwise","context":[["%  - 0 otherwise",352],["* If `propertyName` is optional, then return `YES`, otherwise return `NO`.",578],["otherwise,",1807],["//  project, commercial or otherwise, entirely at your risk, with the condition",342],["//TODO: If we're focused or the toolbar is otherwise onscreen, we need to let the root view controller know and update.",331],["// ... otherwise hide the HUD immediately",313],["// ... otherwise show the HUD imediately",307],["// otherwise, if the app is started from a push notification, this method will not be",245],["// if we have a nav controller, use him, otherwise use our root controller",245],["otherwise",37328]],"useCount":57622},{"word":"our","context":[["// this happens while we are running ( in the background, or from within our own app )",597],["// fire a notification event to our listeners",488],["// with our placeholder",451],["// our bitmap context doesn't support alpha the gradient requires it)",486],["// if we have a cached id, use it for our identifier",450],["// remove the spinner now that we've loaded our image",451],["// look for our alpha view which is the placeholder layer",451],["// from our application",451],["// but after we've detached our view.  In which case, we need to just ignore this",451],["// don't let the placeholder stomp on our new images",451]],"useCount":61071},{"word":"out","context":[["/* Comment out the block below to over-ride */",1226],["list(error_spec)::in, list(error_spec)::out) is det.",1406],["ml_gen_info::in, ml_gen_info::out) is det.",443],["subreason:[NSString stringWithFormat:@\"Index %d out of bounds on buffer (length %u)\", index, [data length]]",460],["// That is, socket was disconnected, or connection has already timed out.",480],["//First, find out how much we have to compensate.",524],["module_info::in, module_info::out) is det.",758],["XCTAssertTrue([self waitForTest:0.1], @\"Test timed out.\");",777],["out = [];",913],["if(offset > numel(out)), return, end",660]],"useCount":123685},{"word":"outProtocol","context":[["[outProtocol writeListEnd];",398],["[outProtocol writeFieldEnd];",7743],["[outProtocol writeStructEnd];",2727],["[outProtocol writeFieldStop];",2727],["- (void) write: (id <TProtocol>) outProtocol {",2093],["- (void) write: (id <TProtocol>) outProtocol;",1087],["[result write: outProtocol];",468],["[outProtocol writeFieldBeginWithName: @\"success\" type: TType_STRUCT fieldID: 0];",364],["[[outProtocol transport] flush];",1173],["[outProtocol writeMessageEnd];",1173]],"useCount":27985},{"word":"output","context":[["varargout{1} = handles.output;",2210],["% This function has no output args, see OutputFcn.",2180],["% varargout  cell array for returning output args (see VARARGOUT);",2213],["% Get default command line output from handles structure",2229],["handles.output = hObject;",2486],["* Retrieve the value of the \"Response\" output from an execution of this Choreo.",1828],["- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {",1352],["[self.unknownFields writeToCodedOutputStream:output];",1339],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["return output;",3061]],"useCount":104401},{"word":"override","context":[["// Only override drawRect: if you perform custom drawing.",7715],["// Uncomment to override the CDVCommandDelegateImpl used",1205],["/* To override the methods, uncomment the line in the init function(s)",604],["void SetUp() override {",925],["// Uncomment to override the CDVCommandQueue used",1205],["/* To override, uncomment the line in the init function(s)",604],["// NOTE: To customize the view's frame size (which defaults to full screen), override",536],["// If necessary, uncomment the line below to override it.",527],["void TearDown() override {",457],["reason:[NSString stringWithFormat:@\"You must override %@ in a subclass\", NSStringFromSelector(_cmd)]",402]],"useCount":36367},{"word":"own","context":[["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["* WARNING: This is generated code. Modify at your own risk and without support.",938],["// this happens while we are running ( in the background, or from within our own app )",597],["//It's possible that the 'setvalueforkey' has its own plans of what should be in the JS object,",432],["%     You should not use this class within your own code. It is intended to",278],["// Otherwise, we'll try the queue (if this request is part of one) and it will pass the message on to its own delegate",262],["* in your own internal browser, or perhaps warn the user that they are about to leave your app.",250],["// If the user provided their own buffer,",240],["// So, we check the table style and device, and if they match up wrong, we replace the background view with our own.",223],["//doing our own custom search screen since the controller gives this to us",187]],"useCount":30005},{"word":"p","context":[["return p;",1364],["</p>",774],["<p style=\"text-align: center\">",1589],["p = inputParser;",1713],["* <p>",2946],["* </p>",3203],["%     Part of the TD Pulmonary Toolkit. http://code.google.com/p/pulmonarytoolkit",589],["p.parse(varargin{:});",665],["<p>",45962],["</p>",48813]],"useCount":284823},{"word":"page","context":[["%   Home page: http://www.ee.ic.ac.uk/hp/staff/dmb/voicebox/voicebox.html",582],["// than the owning context (page context).",450],["[pages addObject:page];",494],["if (!page)",519],["NSUInteger itemIndex = [page indexOfObject:item];",898],["for (MWZoomingScrollView *page in _visiblePages) {",774],["if (page) {",671],["return page;",1998],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527],["[page addObject:item];",452]],"useCount":71919},{"word":"param","context":[["* @param session - A TMBTembooSession containing valid Temboo Application Key credentials",1952],["* @param response The execution response from the Temboo server",1952],["*  @param event The OS event.",430],["*  @param calendar NSCalendar - The calendar to be used in the calculation",396],["*  @param date NSDate - Provided date for comparison",393],["* @param reader The reader.",385],["* @param delegate",370],["@param responseFields Use this field to include those fields which are not included by default.",370],["*  @param interactionPoint The coordinates of the interaction.",367],["%> @param",366]],"useCount":89889},{"word":"parameter","context":[["% Instructions: Perform a single gradient step on the parameter vector",340],["// Get the index for the parameter name.",202],["%   theta as the parameter for regularized logistic regression and the",379],["// verify the required parameter 'name' is set",395],["@\"The given socketQueue parameter must not be a concurrent queue.\");",426],["%               derivatives of the cost w.r.t. each parameter in theta",528],["%   parameter for linear regression to fit the data points in X and y",370],["NSAssert(bytesAvailable > 0, @\"Invalid parameter: bytesAvailable\");",234],["* The given parameter indicates the number of bytes estimated to be available on the socket,",240],["* Performing automatic lightweight migration by passing the following dictionary as the options parameter:",690]],"useCount":38687},{"word":"parameters","context":[["NSDictionary *parameters = nil;",1243],["NSMutableDictionary *parameters = [NSMutableDictionary dictionary];",1393],["parameters:params",1461],["parameters:(id)parameters",2053],["parameters:(id)parameters",2053],["parameters:nil",3030],["parameters:parameters",3369],["parameters:parameters",3369],["parameters:(NSDictionary *)parameters",4324],["parameters:(NSDictionary *)parameters",4324]],"useCount":130905},{"word":"params","context":[["NSMutableDictionary *params = [NSMutableDictionary dictionary];",2047],["[params release];",604],["NSMutableString *errorDescription = [[NSMutableString alloc] initWithString:@\"You are missing required params: \"];",618],["NSMutableDictionary* params = [args objectAtIndex:1];",741],["params:params",804],["params:params",804],["return params;",857],["NSDictionary *params = @{",1353],["constructor.params = fields;",1354],["parameters:params",1461]],"useCount":86033},{"word":"parent","context":[["model->AddURL(parent, parent->child_count(),",438],["model->AddURL(parent, parent->child_count(),",438],["if (parent) {",420],["argcount:1 type:KrollMethodInvoke name:nil context:[self context] parent:self] autorelease];",376],["argcount:argcount type:KrollMethodInvoke name:key context:[self context] parent:self] autorelease];",376],["parent = [parent_ retain];",348],["KrollMethod * result  = [[KrollCoverageMethod alloc] initWithTarget:target context:[self context] parent:self];",752],["const BookmarkNode* parent = model->bookmark_bar_node();",830],["type:KrollMethodFactory name:key context:[self context] parent:self] autorelease];",376],["moveRow.parent = newSection;",372]],"useCount":66389},{"word":"parseState","context":[["parseState->atIndex++;",308],["NSCParameterAssert((parseState != NULL) && (JK_AT_STRING_PTR(parseState) <= JK_END_STRING_PTR(parseState)));",580],["size_t  startingObjectIndex = parseState->objectStack.index;",292],["jk_parse_skip_whitespace(parseState);",294],["parseState->cache.items[bucket].cfHash = 0UL;",294],["switch(parseState->token.value.type) {",294],["parseState->objectStack.index = startingObjectIndex;",306],["NSCParameterAssert((parseState != NULL) && (JK_AT_STRING_PTR(parseState) <= JK_END_STRING_PTR(parseState)));",580],["NSCParameterAssert((parseState != NULL) && (JK_AT_STRING_PTR(parseState) <= JK_END_STRING_PTR(parseState)));",580],["switch(parseState->token.type) {",734]],"useCount":34436},{"word":"parser","context":[["[parser parse];",887],["[parser setDelegate:listUnmarshaller];",369],["- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string",424],["- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string",424],["[parser setDelegate:self];",583],["[super parser:parser didEndElement:elementName namespaceURI:namespaceURI qualifiedName:qName];",870],["[super parser:parser didEndElement:elementName namespaceURI:namespaceURI qualifiedName:qName];",870],["[parser setDelegate:caller];",675],["[state parser:self shouldTransitionTo:tok];",342],["[parser release];",1003]],"useCount":32982},{"word":"part","context":[["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["## This file is part of Octave.",3146],["% This file is part of XBAT.",1807],["% This file is part of SBMLToolbox.  Please visit http://sbml.org for more",1262],["% This file is part of FieldTrip, see http://www.fieldtriptoolbox.org",1190],["%   This file is part of SLAMTB, a SLAM toolbox for Matlab.",1089],["% This file is part of Dynare.",862],["* This file is part of the SDWebImage package.",846],["%   This file is part of MATPOWER.",586],["%% This file is part of OctSymPy.",579]],"useCount":74565},{"word":"password","context":[["password:(NSString *)password",1116],["self.password = password;",315],["@synthesize password;",324],["return password;",325],["NSString *password = [args objectAtIndex:1];",451],["NSString *toEncode = [NSString stringWithFormat:@\"%@:%@\",username,password];",451],["if (username==nil && password==nil)",451],["password:password",574],["password:password",574],["password:(NSString *)password",1116]],"useCount":38249},{"word":"path","context":[["path:(NSString *)path",1268],["CGMutablePathRef path = CGPathCreateMutable();",2691],["CGPathRelease(path);",2424],["[path stroke];",2357],["[path fill];",2110],["[path closePath];",1942],["if (path)",1332],["NSString *path;",1291],["path:(NSString *)path",1268],["return path;",5375]],"useCount":276759},{"word":"pause","context":[["pause;",4954],["pause",4268],["[self pause];",1685],["- (void)pause",728],["[player pause];",1005],["pause(1)",761],["- (void)pause {",818],["pause(0.1);",917],["%pause",982],["pause(1);",999]],"useCount":41306},{"word":"performSelector","context":[["[parentObject performSelector:parentSetter withObject:self.response];",607],["[target performSelector:sel withObject:value];",450],["[target performSelector:selector withObject:firstobj withObject:secondobj];",450],["[[request delegate] performSelector:@selector(imageLoadCancelled:) withObject:request];",449],["return [target performSelector:selector];",874],["[[req delegate] performSelector:@selector(imageLoadCancelled:) withObject:req];",898],["[self performSelector:@selector(springingDidStop) withObject:nil afterDelay:0.3];",898],["[target performSelector:sel withObject:firstarg withObject:secondarg];",900],["[invocation performSelector:@selector(invoke) onThread:socketThread withObject:nil waitUntilDone:NO];",1215],["#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"",3209]],"useCount":50407},{"word":"performance","context":[["/* Sprite Kit applies additional optimizations to improve rendering performance */",85],["// Note: The last time I benchmarked the performance of direct access vs atomic property access,",79],["// The thread safety must not come at a cost to the performance of the logMessage method.",79],["buffer = d; // Retain not copy. For performance as documented in header file.",99],["//   validation, finds available direct deals, and retrieves performance",106],["// Comparing the performance of the two we can see that reading",120],["// TODO: maybe not copy this for performance",123],["// suspend image loader while we're scrolling to improve performance",374],["// An empty implementation adversely affects performance during animation.",7709],["// This is an example of a performance test case.",15613]],"useCount":27966},{"word":"picker","context":[["picker.delegate = self;",1489],["picker.allowsEditing = YES;",487],["[picker dismissViewControllerAnimated:YES completion:nil];",1438],["- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {",640],["- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {",646],["- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker",762],["[self presentViewController:picker animated:YES completion:nil];",821],["- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info",967],["UIImagePickerController *picker = [[UIImagePickerController alloc] init];",981],["picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;",553]],"useCount":29546},{"word":"player","context":[["[player play];",1022],["<td class=\"player-add\">",1152],["[player stop];",1736],["if (player != nil) {",1904],["[player pause];",1005],["for player = 1:num_players",990],["[self.player play];",899],["RELEASE_TO_NIL(player);",768],["<td class=\"player-played\">1</td>",752],["if (player!=nil)",2190]],"useCount":54806},{"word":"plot","context":[["plot(x,y);",182],["-(NSNumber *)numberForPlot:(CPTPlot *)plot field:(NSUInteger)fieldEnum recordIndex:(NSUInteger)index",190],["## If the first argument @var{hax} is an axes handle, then plot into this axis,",191],["legend_type = 'plot';",191],["% Create plot",191],["%plot",210],["-(NSUInteger)numberOfRecordsForPlot:(CPTPlot *)plot",325],["%% plot",423],["% plot",765],["plot(...",163]],"useCount":48011},{"word":"point","context":[["UIView *view = [super hitTest:point withEvent:event];",615],["point.y = 0;",528],["CGPoint point;",950],["- (UIView *)hitTest:(CGPoint) point withEvent:(UIEvent *)event",675],["return [value point];",803],["- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event",848],["return [super hitTest:point withEvent:event];",899],["return point;",1411],["// Override point for customization after application launch.",31855],["CGPoint point = [touch locationInView:self];",896]],"useCount":142844},{"word":"points","context":[["% Generate a few random points to use as test values.",302],["// Calculate transform to map points between coordinate spaces",268],["'Units','points', ...",1186],["'units', 'points',...",872],["'Fontunits','points',...",799],["// create the start and end points for the gradient vector (straight down)",486],["'units','points',...",378],["%   parameter for linear regression to fit the data points in X and y",370],["% Generate a few random points to use as test values:",318],["CGContextStrokeLineSegments(context, points, 2);",283]],"useCount":36780},{"word":"pool","context":[["NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];",1272],["QMacCocoaAutoReleasePool pool;",1527],["pool = [[NSAutoreleasePool alloc] init];",1583],["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",2418],["NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];",2798],["NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];",3006],["[pool release];",3557],["[pool drain];",4972],["NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];",8604],["[pool release];",16261]],"useCount":69207},{"word":"pop","context":[["PKToken *tok = [a pop];",145],["[self pop];",152],["#pragma pack(pop)",157],["#import <pop/POP.h>",162],["//pop the context to get back to the default",164],["else pop",206],["[[MWNetworkActivityIndicatorManager sharedManager] pop];",266],["#pragma GCC diagnostic pop",924],["#pragma clang diagnostic pop",1617],["#pragma clang diagnostic pop",18635]],"useCount":30511},{"word":"port","context":[["sockaddr6.sin6_port      = htons(port);",303],["nativeAddr6.sin6_port = htons(port);",301],["sockaddr4.sin_port        = htons(port);",303],["nativeAddr6.sin6_port      = htons(port);",319],["//  A port of MPAndroidChart for iOS",368],["TiProfilerStart(host, port);",418],["NSInteger port = [[params objectForKey:@\"port\"] integerValue];",434],["NSInteger port = [[params objectForKey:@\"port\"] integerValue];",434],["return port;",372],["TiDebuggerStart(host, port);",450]],"useCount":38349},{"word":"pos","context":[["-(void)loadImageInBackground:(NSNumber*)pos",451],["'Position',pos, ...",277],["pos = 0;",391],["pos++;",1043],["return pos;",485],["const wxPoint& pos,",513],["int position = [TiUtils intValue:pos];",560],["pos = pos + 1;",630],["pos = pos + 1;",630],["pos = [x y w h];",848]],"useCount":64146},{"word":"position","context":[["ENSURE_INT_OR_NIL_FOR_KEY(position, args, @\"position\", hasPosition);",696],["position = (hasPosition) ? position : 0;",696],["ENSURE_INT_OR_NIL_FOR_KEY(position, args, @\"position\", hasPosition);",696],["position = (hasPosition) ? position : 0;",696],["int position;",719],["% Hints: get(hObject,'Value') returns position of slider",756],["memcpy(bytes+position, &(val.sf.v), size);",830],["UIView *view = [[container subviews] objectAtIndex:position];",902],["position = 0;",672],["memcpy(bytes+position, &val, size);",1245]],"useCount":114508},{"word":"pragma","context":[["#pragma mark - Private",7457],["#pragma mark -",7752],["#pragma mark - Table view data source",12481],["#pragma clang diagnostic pop",18635],["#pragma clang diagnostic push",18802],["#pragma mark - Navigation",21156],["#pragma mark -",170468],["#pragma mark - Actions",5740],["#pragma mark - Properties",5638],[":- pragma foreign_proc(\"C\",",5437]],"useCount":899397},{"word":"prepareForSegue","context":[["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{",348],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",19102],["- (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",159],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",6212],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",579],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",291],["[super prepareForSegue:segue sender:sender];",250],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{",222],["- (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",189],["-(void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",111]],"useCount":28326},{"word":"private","context":[["private:",9171],["properties (SetAccess=private)",521],["#pragma mark - private methods",851],["methods (Access = private)",1061],["properties (Access = private)",1114],["properties (SetAccess = private)",1356],["* @private",1577],["#pragma mark - private",1618],["@private",3125],["@private",3982]],"useCount":44326},{"word":"profile","context":[["BookmarkModel* model = BookmarkModelFactory::GetForProfile(profile());",2062],["#include \"chrome/browser/profiles/profile.h\"",1720],["profile(n) =0019",861],["Profile* profile,",550],["ASSERT_TRUE(profile());",378],["profile:(Profile*)profile",316],["profile:(Profile*)profile",316],["profile:profile()",267],["profile:profile()",267],["profile_ = profile;",251]],"useCount":38511},{"word":"progress","context":[["progress:nil",1028],["@synthesize progress;",355],["return progress;",346],["self.progress = progress;",354],["self.progress = progress;",354],["if (progress) {",511],["// Draw progress",595],["progress:(NSProgress * __autoreleasing *)progress",603],["progress:(NSProgress * __autoreleasing *)progress",603],["_progress = progress;",1015]],"useCount":60259},{"word":"prop","context":[["NSString* name = (NSString*)TiStringCopyCFString(kCFAllocatorDefault, prop);",874],["TiStringRelease(prop);",956],["stringValueRef=TiObjectGetProperty(context, globalRef, prop, NULL);",972],["\"if(value!==undefined){objects.push(Ti.App._JSON(prop,bridge)+': '+value)}}return'{'+objects.join(',')+'}'};\"",451],["\"for(var prop in object){var value=object[prop];if(value!==undefined){value=Ti.App._JSON(value,bridge)}\"",451],["\"for(var prop in object){var value=object[prop];if(value!==undefined){value=Ti.App._JSON(value,bridge)}\"",451],["if(TiStringIsEqual(prop,kTiStringTiPropertyKey))",750],["stringValueRef=TiObjectGetProperty(context, globalRef, prop, NULL);",840],["TiStringRelease(prop);",843],["[o forgetObjectForTiString:prop context:jsContext];",868]],"useCount":31554},{"word":"properties","context":[["% --- Executes during object creation, after setting all properties.",14669],["properties",10285],["if ([properties isKindOfClass:[NSDictionary class]])",3389],["id value = [properties objectForKey:name];",3346],["free(properties);",1548],["properties (Constant)",1407],["properties (SetAccess = private)",1356],["properties (Access = private)",1114],["objc_property_t property = properties[i];",987],["secondarg = [(TiComplexValue*)newValue properties];",900]],"useCount":157286},{"word":"property","context":[["%      unrecognized property name or invalid value makes property application",2043],["objc_property_t property = properties[i];",987],["@property (nonatomic, strong) UIImageView *imageView;",844],["@property (weak, nonatomic) IBOutlet UILabel *titleLabel;",819],["@property (weak, nonatomic) IBOutlet UIImageView *imageView;",1017],["@property (nonatomic, strong) UITableView *tableView;",1287],["@property (weak, nonatomic) IBOutlet UITableView *tableView;",1814],["%      existing singleton*.  Starting from the left, property value pairs are",2022],["%      unrecognized property name or invalid value makes property application",2043],["@property (nonatomic, strong) UILabel *titleLabel;",792]],"useCount":311350},{"word":"protocol","context":[["* TMBChoreographyDelegate protocol method - called when this Choreo's execution",1952],["if ([target conformsToProtocol:@protocol(KrollTargetable)])",887],["// (URLDropTargetController protocol)",540],["// Generated by the protocol buffer compiler.  DO NOT EDIT!",512],["targetable = [target conformsToProtocol:@protocol(KrollTargetable)];",437],["NSString *msg = @\"Both IPv4 and IPv6 have been disabled. Must enable at least one protocol first.\";",298],["if ([textView conformsToProtocol:@protocol(UITextInput)]) {",314],["/// @brief UITableViewDataSource protocol method.",320],["// (URLDropTarget protocol)",335],["// (BookmarkBarState protocol)",340]],"useCount":33928},{"word":"provided","context":[["and/or other materials provided with the distribution.",2114],["// other materials provided with the distribution.",968],["documentation and/or other materials provided with the distribution.",1921],["other materials provided with the distribution.",1826],["%       documentation and/or other materials provided with the distribution.",1497],["*     documentation and/or other materials provided with the distribution.",1047],["*    documentation and/or other materials provided with the distribution.",2906],["the documentation and/or other materials provided with the",984],["*    documentation and/or other materials provided with the distribution.",796],["* particular file as subject to the \"Classpath\" exception as provided",845]],"useCount":45486},{"word":"proxy","context":[["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"animating\" notification:NO];",934],["[self.proxy fireEvent:@\"load\" withObject:event];",777],["[self.proxy replaceValue:NUMBOOL(YES) forKey:@\"animating\" notification:NO];",793],["DoProxyDelegateReadKeyFromProxy(target, thisKey, proxy, nullObject, useThisThread);",900],["return proxy;",853],["NSURL * urlAttempt = [self toURL:object proxy:proxy];",836],["NSURL * urlAttempt = [self toURL:object proxy:proxy];",836],["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"paused\" notification:NO];",825],["for (TiProxy* proxy in keyboardToolbarItems) {",1300],["[self forgetProxy:proxy];",1331]],"useCount":138016},{"word":"public","context":[["public:",14134],["@public",8394],["#include \"content/public/browser/web_contents.h\"",1790],["#include \"content/public/browser/render_widget_host_view.h\"",488],["@public",1347],["#pragma mark - public",1000],["% opening :/home/verlaanm/deltares/src/openda_20101025/public/tests/simple_oscillator/./model/OscillatorStochModel.xml",730],["methods (Access = public)",632],["#include \"content/public/browser/browser_thread.h\"",559],["#pragma mark - public methods",508]],"useCount":59554},{"word":"publish","context":[["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",972],["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242]],"useCount":50778},{"word":"push","context":[["// otherwise, if the app is started from a push notification, this method will not be",226],["// NOTE: this is called when the app is *running* after receiving a push notification",226],["%push variable to caller",226],["// NOTE: this is called when the app is *running* after receiving a push notification",245],["// otherwise, if the app is started from a push notification, this method will not be",245],["'BackgroundColor', cgui.NColor.button, 'Style', 'push', ...",250],["\"if(value!==undefined){objects.push(Ti.App._JSON(prop,bridge)+': '+value)}}return'{'+objects.join(',')+'}'};\"",451],["#pragma GCC diagnostic push",1022],["#pragma clang diagnostic push",1609],["#pragma clang diagnostic push",18802]],"useCount":32878},{"word":"q","context":[["q",1491],["case 'c': case 'i': case 's': case 'l': case 'q':",196],["q = 1;",217],["[acceptLanguagesComponents addObject:[NSString stringWithFormat:@\"%@;q=%0.1g\", obj, q]];",249],["float q = 1.0f - (idx * 0.1f);",249],["*stop = q <= 0.5f;",249],["[acceptLanguagesComponents addObject:[NSString stringWithFormat:@\"%@;q=%0.1g\", obj, q]];",249],["case 'q'",276],["return q;",467],["case 'q':",1017]],"useCount":40101},{"word":"query","context":[["return query;",9237],["query.bodyObject = object;",2603],["query.project = project;",1106],["query.accountId = accountId;",992],["query.identifier = identifier;",675],["[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {",632],["GTLQueryYouTube *query = [self queryWithMethodName:methodName];",578],["it(@\"should encode to a query string.\", ^",577],["GTLQueryDrive *query = [self queryWithMethodName:methodName];",554],["GTLQueryAnalytics *query = [self queryWithMethodName:methodName];",541]],"useCount":86789},{"word":"queue","context":[["queue:nil",857],["[queue inTransaction:^(FMDatabase *db, BOOL *rollback) {",667],["RELEASE_TO_NIL(queue);",674],["if (queue == nil)",728],["NSAssert(dispatch_get_specific(xmppQueueTag), @\"Invoked on incorrect queue\");",818],["[queue inDatabase:^(FMDatabase *db) {",984],["dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);",1221],["queue:[NSOperationQueue mainQueue]",1231],["if (queue!=nil)",1557],["dispatch_async(queue, ^{",1965]],"useCount":89391},{"word":"r","context":[["r = r + 1;",9526],["r = r + 1;",9526],["d = r + s",5887],["r = 10",5887],["return r;",3454],["r = rsave;",966],["CGFloat r,g,b,a;",899],["CGFloat r, g, b, a;",770],["r.string = s;",748],["if (![self red:&r green:&g blue:&b alpha:&a]) return nil;",583]],"useCount":203246},{"word":"radius","context":[["vImageBoxConvolve_ARGB8888(&effectInBuffer, &effectOutBuffer, NULL, 0, 0, radius, radius, 0, kvImageEdgeExtend);",547],["CGContextAddArcToPoint(context, 2, 2, radius + 2, 2, radius);",390],["CGContextAddArcToPoint(context, 4, 4, radius + 4, 4, radius);",585],["CGContextAddArcToPoint(context, 4, 4, radius + 4, 4, radius);",585],["CGContextAddArcToPoint(context, 4, rect.size.height - 4, radius + 4, rect.size.height - 4, radius);",579],["CGContextAddArcToPoint(context, 4, rect.size.height - 4, radius + 4, rect.size.height - 4, radius);",579],["vImageBoxConvolve_ARGB8888(&effectInBuffer, &effectOutBuffer, NULL, 0, 0, radius, radius, 0, kvImageEdgeExtend);",547],["// radius (aka standard deviation) appears in the SVG spec:",410],["CGContextAddLineToPoint(context, rect.size.width - radius - 2, 2);",390],["CGContextAddArcToPoint(context, 2, 2, radius + 2, 2, radius);",390]],"useCount":40608},{"word":"raise","context":[["}) should] raise];",613],["[NSException raise: NSInvalidArgumentException",3924],["[NSException raise: NSInternalInconsistencyException",2029],["[NSException raise:NSInternalInconsistencyException",1184],["[localException raise];",1156],["[NSException raise:NSInvalidArgumentException",1142],["[NSException raise: @\"XMLWriteError\"",1053],["[NSException raise: NSGenericException",937],["[exception raise];",731],["[NSException raise: NSRangeException",618]],"useCount":29938},{"word":"rand","context":[["B = single(rand(1,1) + rand(1,1)*1i);",384],["B = single(rand(1,1) + rand(1,1)*1i);",384],["B = rand(1,1);",384],["B = single(rand(1,1));",384],["A = single(rand(1,1));",384],["B = rand(1,1) + rand(1,1)*1i;",384],["B = rand(1,1) + rand(1,1)*1i;",384],["A = rand(1,1);",416],["A = rand(1,1) + rand(1,1)*1i;",416],["A = rand(1,1) + rand(1,1)*1i;",416]],"useCount":53524},{"word":"range","context":[["if (range.location!=NSNotFound)",2075],["if (range.location == NSNotFound) {",889],["range.location = 0;",1531],["if (range.location != NSNotFound)",1451],["range:range];",1328],["range:range];",1328],["return range;",922],["if (range.location != NSNotFound) {",2089],["%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider",752],["NSRange range;",2859]],"useCount":153576},{"word":"re","context":[["// if we were running, re-start it",451],["// first check to see if we're attempting to load a file from the",451],["// Return NO if you do not want the item to be re-orderable.",4677],["// and we want to start the spinner to let the user know that we're still loading. we",451],["// re-post ( broadcast )",1263],["//Rogue event. We're supposed to be disabled!",636],["// For now, we're shortcutting to suppress false warnings.",573],["// TODO: Put this in the write()/read() wrappers when they're being called consistently, blah blah blah",486],["// resume image loader when we're done scrolling",561],["//at this point we're just going to fail",451]],"useCount":75312},{"word":"read","context":[["- (NSInteger)read:(uint8_t *)buffer",747],["subreason:@\"read() operation on stream that is not readable\"",944],["- (void) read: (id <TProtocol>) inProtocol;",1087],["[self _fireEventToListener:@\"read\" withObject:event listener:callback thisObject:nil];",1205],["it(@\"can read\", ^{",1609],["- (void) read: (id <TProtocol>) inProtocol",2094],["[fieldValue read: inProtocol];",2198],["[result read: inProtocol];",595],["// Read type #3 - read up to a terminator",542],["PKToken *tok = [numberState nextTokenFromReader:r startingWith:[r read] tokenizer:t];",528]],"useCount":72075},{"word":"readwrite","context":[["@property(nonatomic,readwrite,retain) UIImage * fullImage;",449],["@property (readwrite, nonatomic, strong) id field;",286],["@property (readwrite, nonatomic, strong) id value;",288],["@property (readwrite, nonatomic, strong) NSRecursiveLock *lock;",302],["@property (readwrite, nonatomic, strong) NSURL *baseURL;",306],["@property(nonatomic,readwrite,retain) UIImage* recentlyResizedImage;",371],["@property(nonatomic,readwrite) BOOL hires;",447],["@property (readwrite, nonatomic, assign) NSStringEncoding stringEncoding;",451],["@property(nonatomic,readwrite) TiDimension topCap;",449],["@property(nonatomic,readwrite) TiDimension leftCap;",449]],"useCount":29972},{"word":"realm","context":[["[realm commitWriteTransaction];",666],["[realm commitWriteTransaction];",2374],["RLMRealm *realm = [RLMRealm defaultRealm];",1420],["[realm beginWriteTransaction];",898],["[realm beginWriteTransaction];",2458],["[realm cancelWriteTransaction];",281],["// Get the authentication realm",263],["[realm transactionWithBlock:^{",243],["[realm transactionWithBlock:^{",332],["RLMRealm *realm = [self realmWithTestPath];",394]],"useCount":28619},{"word":"reason","context":[["reason:@\"already started\"",244],["subreason:[NSString stringWithFormat:@\"Could not open file stream for file at path: %@\\n%@\", filePath, [e reason], nil]",239],["return ThrowException(jsContext, [e reason], exception);",1702],["*\tstrange reason, UIPopoverController doesn't like that. So we must explicitly set the view",253],["NSString *reason = @\"Error in bind() function\";",254],["err = [self errnoErrorWithReason:reason];",686],["NSDictionary *userInfo = [NSDictionary dictionaryWithObject:exception.reason",350],["reason:[NSString stringWithFormat:@\"invalid method (%@) passed to %@\",name,[self class]]",445],["return ThrowException(jsContext, [e reason], exception);",1562],["reason:[NSString stringWithFormat:@\"You must override %@ in a subclass\", NSStringFromSelector(_cmd)]",402]],"useCount":35123},{"word":"recreated","context":[["// Dispose of any resources that can be recreated.",546],["// Dispose of any resources that can be recreated.",61819],["// Release anything that can be recreated in viewDidLoad or on demand.",42],["// recreated OpenGL ES resources",45],["//    // Dispose of any resources that can be recreated.",47],["// So release any properties that are loaded in viewDidLoad or can be recreated lazily.",49],["// destroyed and recreated when we change the styleMask of the window, we",54],["Free up as much memory as possible by purging cached data objects that can be recreated (or reloaded from disk) later.",216],["// Relinquish ownership of anything that can be recreated in viewDidLoad or on demand.",356],["Free up as much memory as possible by purging cached data objects that can be recreated (or reloaded from disk) later.",422]],"useCount":64003},{"word":"rect","context":[["- (void)drawRect:(CGRect)rect",8162],["return rect;",3960],["- (void)drawRect:(CGRect)rect {",8845],["[super drawRect:rect];",3088],["CGContextFillRect(context, rect);",2488],["UIGraphicsBeginImageContext(rect.size);",1660],["CGRect rect;",1485],["NSRect rect;",1247],["CGRect rect = [self screenRect];",1254],["&rect,",1380]],"useCount":204035},{"word":"release","context":[["[image release];",2476],["[pool release];",3557],["[alert release];",3451],["[request release];",2692],["[self release];",7676],["[view release];",2463],["[dict release];",2100],["[item release];",1965],["[name release];",1902],["[pool release];",16261]],"useCount":367989},{"word":"reloadData","context":[["[table reloadData];",702],["[[self tableView] reloadData];",769],["- (void)reloadData {",1316],["[weakSelf.tableView reloadData];",1457],["- (void)reloadData",1517],["[tableView reloadData];",2250],["[self reloadData];",4717],["[_tableView reloadData];",3098],["[self.tableView reloadData];",26464],["[self.collectionView reloadData];",4320]],"useCount":73207},{"word":"remove","context":[["// remove any existing images",902],["//TODO: See if this actually happens, and if not, remove this extra check.",434],["// remove format in URL if needed",889],["- (void)fireEvent:(id)listener withObject:(id)obj remove:(BOOL)yn thisObject:(id)thisObject_",476],["// remove the spinner now that we've loaded our image",451],["// the spinner (usually for the first image) and then immediately remove it with a flash",451],["[host fireEvent:listener withObject:eventObject remove:NO context:evaluator thisObject:thisObject_];",450],["// remove all listeners JS side proxy",450],["// If we remove the button here, it could be the case that the system",370],["//TODO: Should we remove these gracefully?",993]],"useCount":37643},{"word":"removeAllObjects","context":[["[timers removeAllObjects];",489],["[self removeAllObjects];",466],["[timeout removeAllObjects];",449],["[timers removeAllObjects];",433],["[readQueue removeAllObjects];",390],["[writeQueue removeAllObjects];",390],["- (void)removeAllObjects",348],["[_recycledPages removeAllObjects];",317],["[self.dataArray removeAllObjects];",294],["[cache removeAllObjects];",491]],"useCount":28407},{"word":"removeFromSuperview","context":[["[keyboardTiView removeFromSuperview];",1324],["[v removeFromSuperview];",807],["[view removeFromSuperview];",5019],["[self removeFromSuperview];",4769],["[indicator removeFromSuperview];",1377],["[spinner removeFromSuperview];",1025],["[super removeFromSuperview];",912],["[keyboardUIToolbar removeFromSuperview];",993],["[subview removeFromSuperview];",1316],["[self.view removeFromSuperview];",1187]],"useCount":63377},{"word":"removeObserver","context":[["[[NSNotificationCenter defaultCenter] removeObserver: self];",1088],["[[NSNotificationCenter defaultCenter]removeObserver:self];",456],["[[NSNotificationCenter defaultCenter] removeObserver:self name:UIDeviceOrientationDidChangeNotification object:nil];",464],["removeObserver:self",605],["[self removeObserver:self forKeyPath:keyPath];",680],["[[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillHideNotification object:nil];",717],["[[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];",784],["[[NSNotificationCenter defaultCenter] removeObserver:self];",2688],["[[NSNotificationCenter defaultCenter] removeObserver:self",5167],["[[NSNotificationCenter defaultCenter] removeObserver:self];",20165]],"useCount":54833},{"word":"request","context":[["NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];",2229],["[request setHTTPMethod:@\"POST\"];",2987],["return [self invokeRequest:request",4677],["return request;",7700],["[request release];",2692],["NSFetchRequest *request = [[NSFetchRequest alloc] init];",1389],["[request setUserInfo:nil];",1792],["NSURLRequest *request = [NSURLRequest requestWithURL:url];",1556],["[request startSynchronous];",1401],["[request setHTTPMethod:@\"GET\"];",1325]],"useCount":297478},{"word":"required","context":[["// check for required fields",1340],["NSMutableString *errorDescription = [[NSMutableString alloc] initWithString:@\"You are missing required params: \"];",618],["\\\"required\\\":[ \\",533],["appreciated but is not required.",505],["// function will stretch the bitmap image as required, so we can create a 1 pixel wide gradient",479],["NSString * const TiExceptionUnimplementedFunction = @\"Subclass did not implement required method\";",450],["\\\"required\\\":[\\",424],["// verify the required parameter 'name' is set",395],["//  appreciated but is not required.",365],["//  appreciated but not required.",342]],"useCount":29116},{"word":"res","context":[["return res;",2284],["[inv getReturnValue:&res];",1302],["res = 0;",357],["res = JreStrcat(\"$C\", res, '}');",392],["res = JreStrcat(\"$C\", res, '}');",392],["// third try just device specific normal res",418],["NSMutableArray* res;",1058],["res = [NSMutableArray array];",1059],["id res;",1252],["return res;",6321]],"useCount":55663},{"word":"reserved","context":[["% eventdata  reserved - to be defined in a future version of MATLAB",47946],["// Because BIG_ENDIAN and LITTLE_ENDIAN are reserved macro names, we have to return them as \"undefined keys\"...",232],["% % eventdata  reserved - to be defined in a future version of MATLAB",138],["// The cache should generally be reserved for items that are explicitly fetched,",132],["// B-F reserved.",81],["// 3-7 reserved.",81],["int reserved;",81],["% ~  reserved - to be defined in a future version of MATLAB",75],["query strings to include a URL. Therefore, all \"reserved\" characters with the exception of \"?\" and \"/\"",69],["RFC 3986 states that the following characters are \"reserved\" characters.",69]],"useCount":50539},{"word":"reset","context":[["[self reset];",2713],["- (void)reset {",1657],["- (void)reset",1459],["[super reset];",427],["[queue reset];",311],["function reset(obj)",294],["bbfc.reset(SimpleBookmarkBarFolderController());",286],["// reset these to be a little more common if we have them",245],["- (void)reset;",241],["- (void) reset",236]],"useCount":53769},{"word":"resources","context":[["#include \"ui/resources/grit/ui_resources.h\"",206],["// Dispose of any resources that can be recreated.",61819],["// Dispose of any resources that can be recreated.",546],["// in this path, we will attempt to load resources directly from the",418],["// We have a module to load resources from! Now we need to determine if",211],["// release any resources that have been retained by the module",164],["** resources allocated by the sqlite3_prepare() call above.",145],["// been removed, we can optionally clean up any resources",141],["% Close and release resources.",98],["// optionally release any resources that can be dynamically",175]],"useCount":68121},{"word":"respondsToSelector","context":[["if (parentObject != nil && [parentObject respondsToSelector:parentSetter]) {",673],["if ([value respondsToSelector:@selector(intValue)])",1257],["if ([target respondsToSelector:sel])",1351],["if ([target respondsToSelector:selector])",3517],["- (BOOL)respondsToSelector:(SEL)aSelector",504],["if ([value respondsToSelector:@selector(stringValue)])",1256],["if ([value respondsToSelector:@selector(doubleValue)])",840],["if ([value respondsToSelector:@selector(boolValue)])",838],["if ([delegate respondsToSelector:@selector(launcherView:didChangePage:)]) {",744],["if ([[req delegate] respondsToSelector:@selector(imageLoadCancelled:)])",618]],"useCount":122984},{"word":"response","context":[["[response release];",1299],["- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {",1056],["* @param response The execution response from the Temboo server",1952],["- (id)responseObjectForResponse:(NSURLResponse *)response",1675],["-(void)choreographyDidFinishExecuting:(NSDictionary*)response {",1952],["if (![self validateResponse:(NSHTTPURLResponse *)response data:data error:error]) {",1327],["* @param response The execution response from the Temboo server",1952],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["successBlock(response);",2593],["return response;",3109]],"useCount":150229},{"word":"responseObject","context":[["if (responseObject) {",669],["completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler",723],["[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {",761],["success:^(NSURLSessionDataTask *task, id responseObject) {",774],["success:(void (^)(NSURLSessionDataTask *task, id responseObject))success",784],["success(responseObject);",1234],["return responseObject;",1400],["} success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {",1458],["success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success",1705],["success:^(AFHTTPRequestOperation *operation, id responseObject) {",2014]],"useCount":39423},{"word":"result","context":[["return result;",97104],["[self.commandDelegate sendPluginResult:result callbackId:command.callbackId];",2381],["__block BOOL result = NO;",2749],["if (!result) {",2836],["result = NO;",3081],["BOOL result = NO;",3359],["result = YES;",4101],["if (result) {",4136],["return [result autorelease];",4353],["return result;",10601]],"useCount":642574},{"word":"results","context":[["[results close];",322],["% Save the results.",326],["% Evaluate xpath expression and retrieve the results",333],["#pragma mark - Fetched results controller",360],["NSMutableArray *results = [NSMutableArray array];",681],["return results;",708],["[self.choreoDelegate choreographyDidFinishExecuting:results];",1952],["return results;",2737],["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031],["if (results == nil)",286]],"useCount":67585},{"word":"ret","context":[["NSInteger ret = 0;",465],["int ret;",555],["ret = YES;",557],["// CHECK-NEXT: ret void",610],["[ret addObjectsFromArray:[NSArray arrayWithObjects:",629],["ret = true;",701],["return [ret autorelease];",750],["int ret = 0;",1162],["return ret;",7441],["return ret;",13907]],"useCount":80514},{"word":"retain","context":[["module = [module_ retain];",763],["without modifications, you must retain this notice and the following",1687],["[self retain];",1669],["[_r0.o retain];",1668],["[_r1.o retain];",1358],["target = [target_ retain];",901],["-(id)retain",888],["[_r2.o retain];",805],["return [super retain];",781],["return [super retain];",759]],"useCount":139845},{"word":"return","context":[["return;",509316],["return self;",495014],["return nil;",314242],["return YES;",295607],["return NO;",240518],["return;",100081],["return result;",97104],["return",77300],["return 0;",65767],["return cell;",61203]],"useCount":5307743},{"word":"returns","context":[["% Hints: get(hObject,'Value') returns position of slider",756],["//Note: If url is a nonimmediate image, this returns nil.",836],["It returns \\f(CWDW_DLV_ERROR\\fP on error.",229],["// -[NSString intValue] returns 0 for unparsables; so check to for isEqual:@\"0\" on that value",238],["// On Android, Facebook is a little braindead and so it returns the stringified result without parsing the JSON.",245],["// returns YES if the audio currently playing.",250],["* Called when a request returns and its response has been parsed into an object.",252],["// Make sure -showBuildSettings returns some data",350],["//  returns nothing",399],["// retrieve the current interfaces - returns 0 on success",226]],"useCount":40833},{"word":"reuseIdentifier","context":[["- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",1258],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {",1310],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {",1310],["if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {",1335],["if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {",1335],["cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];",1772],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",4471],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",4471],["self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];",7208],["self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];",7208]],"useCount":60593},{"word":"richcontent","context":[["<richcontent TYPE=\"NODE\"><html>",9445],["</richcontent>",11618],["</html></richcontent>",9333],["<richcontent TYPE=\"DETAILS\">",2114],["<richcontent TYPE=\"DETAILS\" HIDDEN=\"true\">",1531],["<richcontent TYPE=\"NOTE\"><html>",1416],["<richcontent TYPE=\"NODE\">",719],["<richcontent TYPE=\"NOTE\">",646],["<richcontent><html>",26],["<richcontent TYPE=\"NOTE\"><html>&#xd;",11]],"useCount":36859},{"word":"right","context":[["// we're dealing with double, so convert so that it formats right",302],["- (void)setRight:(CGFloat)right {",365],["- (CGFloat)right {",417],["CGFloat r = [TiUtils floatValue:@\"right\" properties:dict def:0];",418],["'HorizontalAlignment','right', ...",430],["frame.origin.x = right - frame.size.width;",441],["// right on device with iphone - probably a symbol issue",444],["//to cause the bug to go away, but is this really the right thing to do? Shouldn't we have a better",449],["'HorizontalAlignment','right',...",470],["else if ([alignment isEqualToString:@\"right\"])",485]],"useCount":63725},{"word":"root","context":[["NSURL *root = [[[self proxy] _host] baseURL];",451],["* Load from development server. Start the server from the repository root:",1052],["*  be found in the AUTHORS file in the root of the source tree.",281],["* from the root of your project directory, run",314],["model_test_utils::AddNodesFromModelString(model, root, model_string);",327],["//TODO: If we're focused or the toolbar is otherwise onscreen, we need to let the root view controller know and update.",331],["bookmarks::test::AddNodesFromModelString(model, root, model_string);",382],["return root;",420],["url_ = [NSURL fileURLWithPath:[NSString stringWithFormat:@\"%@/%@\",root,path]];",451],["const BookmarkNode* root = model->bookmark_bar_node();",960]],"useCount":28767},{"word":"row","context":[["TiUITableViewRowProxy* row = (TiUITableViewRowProxy*)action.obj;",1674],["[row.section reorderRows];",954],["[section addFormRow:row];",1034],["NSIndexPath *path = [NSIndexPath indexPathForRow:row.row inSection:row.section.section];",1116],["NSIndexPath *path = [NSIndexPath indexPathForRow:row.row inSection:row.section.section];",1116],["NSIndexPath *path = [NSIndexPath indexPathForRow:row.row inSection:row.section.section];",1116],["switch (indexPath.row) {",4186],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["// Delete the row from the data source",4362],["if (indexPath.row == 0) {",4391]],"useCount":157250},{"word":"rows","context":[["return rows;",563],["// Return the number of rows in the section.",4535],["[rows removeObject:row];",200],["rows = 1;",215],["for (CBLQueryRow* row in rows) {",221],["[rows addObject:row];",478],["#warning Incomplete implementation, return the number of rows",483],["// Customize the number of rows in the table view.",522],["NSMutableArray *rows = [row.section rows];",748],["NSMutableArray *rows = [row.section rows];",748]],"useCount":38871},{"word":"run","context":[["@\"run-tests\",",459],["%      instance to run (singleton)\".",2090],["* To run on device, change `localhost` to the IP address of your computer",1052],["- (void)run {",1026],["[NSApp run];",784],["- (void)run;",687],["[[NSRunLoop currentRunLoop] run];",660],["// Put teardown code here; it will be run once, after the last test case.",574],["// Put setup code here; it will be run once, before the first test case.",479],["// Do not rely on the block being run in order to release the packet,",478]],"useCount":55703},{"word":"runtime","context":[["#include <objc/runtime.h>",324],["#import <objc/runtime.h>",18584],["@import ObjectiveC.runtime;",241],["#include \"im/actor/runtime/bser/BserObject.h\"",254],["#include \"im/actor/runtime/bser/BserWriter.h\"",264],["#include \"im/actor/runtime/bser/BserValues.h\"",268],["#import \"objc/runtime.h\"",651],["#include <objc/runtime.h>",716],["#import <objc/runtime.h>",1259],["#import <objc/objc-runtime.h>",313]],"useCount":29311},{"word":"s","context":[["NSLog(@\"%s\", __FUNCTION__);",1569],["XCTFail(@\"No implementation for \\\"%s\\\"\", __PRETTY_FUNCTION__);",9751],["s = 10",5887],["d = r + s",5887],["%   Author(s): J. Schickler",3657],["return s;",3225],["%      *See GUI Options on GUIDE's Tools menu.  Choose \"GUI allows only one",2092],["* TMBChoreographyDelegate protocol method - called when this Choreo's execution",1952],["// Saves changes in the application's managed object context before the application terminates.",1792],["t.string = s;",1783]],"useCount":505037},{"word":"same","context":[["* completes successfully. This class in turn calls the same function on the object",1952],["// proxies have the same page context.",286],["* on the same Wi-Fi network.",1052],["// Based on the Android code, they return ONLY the query part of the URL as 'result'.  Let's do the same.",488],["// Build a context that's the same dimensions as the new size",461],["// if the proxies are the same class, we can cast",434],["*\tIn theory, if two contexts are both using the proxy at the same time,",373],["// This created TWO images in memory from the same binary data, which the system might not be",371],["// the task actually finishes at around the same time.",359],["//outsize is the same as *outOutputDataSize, but is a local copy.",297]],"useCount":47863},{"word":"sap","context":[["conn = database(sap.databasename, sap.pm.sql_root, sap.pm.sql_pass);",105],["if (sap.pm.cluster_val(ii+1))",109],["val=get(sap.gph.ui_select_song_by_filename,'Value');",109],["sap.pm.same_serial_index(jj)];",120],["s=strsplit(sap.pm.feature_dir,filesep);",138],["curs = fetch(curs,sap.pm.max_load_N);",144],["sap.pm.filename=str{val};",151],["conn = database(sap.databasename, sap.pm.sql_root, sap.pm.sql_pass);",105],["str=get(sap.gph.ui_select_song_by_filename,'String');",238],["which_cluster_type=get(get(sap.gph.ui_cluster_type_select,'selectedobject'),'UserData');",182]],"useCount":36101},{"word":"save","context":[["%save all the variables into a file",384],["save('-mat7-binary',strcat(save_file_name,'.mat'),'accuracyEmotion_FPHMM_MissingSet_knownEm','-append');",368],["%% save the figure in .eps",375],["p->save();",375],["contextualVector = cell(numEmotion,1);% save thetas values",417],["- (void)save {",420],["if (![context save:&error]) {",805],["[self save];",1534],["- (void)save",430],["if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {",2014]],"useCount":44343},{"word":"scale","context":[["return [image scale];",449],["if ([image respondsToSelector:@selector(scale)])",450],["// allow the user to overwrite the scale (usually if local)",451],["scale = [[UIScreen mainScreen] scale];",521],["scale = [[UIScreen mainScreen] scale];",521],["scale = 1.0;",583],["CGFloat scale = 1.0;",622],["CGFloat scale = [UIScreen mainScreen].scale;",694],["CGFloat scale = [UIScreen mainScreen].scale;",694],["UIGraphicsBeginImageContextWithOptions(self.size, NO, [[UIScreen mainScreen] scale]);",983]],"useCount":75964},{"word":"scanner","context":[["[scanner release];",305],["[scanner advance];",621],["NSScanner *scanner = [NSScanner scannerWithString:hexString];",312],["[scanner scanHexInt:&rgbValue];",315],["[scanner commitTransaction:NO];",385],["NSScanner *scanner = [NSScanner scannerWithString:self];",403],["NSScanner *scanner = [NSScanner scannerWithString:string];",406],["while (![scanner isAtEnd]) {",515],["[scanner setCharactersToBeSkipped:nil];",592],["[scanner beginTransaction];",644]],"useCount":27664},{"word":"screen","context":[["screen.delegate = (id<VT100ScreenDelegate>)self;",836],["XCTAssert([[screen compactLineDump] isEqualToString:",640],["// NOTE: To customize the view's frame size (which defaults to full screen), override",536],["NSScreen* screen = [[NSScreen screens] objectAtIndex:0];",497],["XCTAssert([[screen compactLineDumpWithHistoryAndContinuationMarks] isEqualToString:",470],["[screen terminalLineFeed];",350],["// Flip coordinates based on the primary screen.",342],["[self showAltAndUppercase:screen];",336],["screen = [self fiveByFourScreenWithThreeLinesOneWrapped];",294],["XCTAssert(screen.cursorX == 1);",290]],"useCount":70126},{"word":"scrollView","context":[["- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {",1180],["CGFloat pageWidth = scrollView.frame.size.width;",1083],["- (void)scrollViewDidScroll:(UIScrollView *)scrollView",3141],["- (void)scrollViewDidScroll:(UIScrollView *)scrollView {",2260],["- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView",1909],["- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView",1514],["- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate",1453],["- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {",1426],["scrollView.delegate = self;",1255],["[scrollView setContentOffset:offset animated:YES];",1090]],"useCount":133241},{"word":"section","context":[["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["// Return the number of rows in the section.",4535],["if (indexPath.section == 0) {",3831],["if (section == 0) {",3551],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{",2759],["switch (section) {",2642],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section",2365],["- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section",2281],["- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {",2207]],"useCount":189417},{"word":"see","context":[["% handles    structure with handles and user data (see GUIDATA)",35747],["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["## along with Octave; see the file COPYING.  If not, see",3037],["## along with Octave; see the file COPYING.  If not, see",3037],["% varargout  cell array for returning output args (see VARARGOUT);",2213],["% This function has no output args, see OutputFcn.",2180],["% This file is part of FieldTrip, see http://www.fieldtriptoolbox.org",1190],["* along with this program; see the file COPYING.  If not, write to",914],["% hObject    handle to figure1 (see GCBO)",697],["** conditions see http://qt.digia.com/licensing.  For further information",630]],"useCount":112767},{"word":"segue","context":[["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{",348],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{",222],["[super prepareForSegue:segue sender:sender];",250],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",291],["[[segue destinationViewController] setDetailItem:object];",327],["-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",579],["if ([[segue identifier] isEqualToString:@\"showDetail\"]) {",598],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",6212],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",19102],["// Get the new view controller using [segue destinationViewController].",19412]],"useCount":52448},{"word":"sel","context":[["if ([target respondsToSelector:sel])",1351],["TiThreadPerformOnMainThread(^{[target performSelector:sel withObject:value];}, NO);",339],["TiThreadPerformOnMainThread(^{[target performSelector:sel withObject:newValue];}, YES);",339],["if (sel == 0)",379],["if (![target respondsToSelector:sel])",450],["[target performSelector:sel withObject:value];",450],["DoProxyDispatchToSecondaryArg(target,sel,key,value,proxy);",450],["sel = SetterForKrollProperty(key);",900],["[target performSelector:sel withObject:firstarg withObject:secondarg];",900],["SEL sel = SetterWithObjectForKrollProperty(key);",900]],"useCount":28997},{"word":"selected","context":[["[super setSelected:selected animated:animated];",10716],["sender.selected = !sender.selected;",606],["- (void)setSelected:(BOOL)selected",635],["[super setSelected:selected];",798],["if (selected) {",1013],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated",3694],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated {",7137],["// Configure the view for the selected state",8899],["// Pass the selected object to the new view controller.",20206],["sender.selected = !sender.selected;",606]],"useCount":92730},{"word":"selector","context":[["#pragma clang diagnostic ignored \"-Wundeclared-selector\"",1016],["selector:@selector(positionHUD:)",1091],["selector:@selector(positionHUD:)",1091],["[invocation performSelector:@selector(invoke) onThread:socketThread withObject:nil waitUntilDone:NO];",1215],["if ([value respondsToSelector:@selector(intValue)])",1257],["[invocation setSelector:selector];",1340],["[result setSelector:selector];",1736],["va_start(ap, selector);",3018],["if ([target respondsToSelector:selector])",3517],["if ([value respondsToSelector:@selector(stringValue)])",1256]],"useCount":458091},{"word":"self","context":[["return self;",495014],["[[NSNotificationCenter defaultCenter] removeObserver:self];",20165],["[self setNeedsDisplay];",23503],["[[NSNotificationCenter defaultCenter] addObserver:self",25124],["[self.tableView reloadData];",26464],["if (self = [super init]) {",30289],["self = [super initWithFrame:frame];",31818],["return self;",39002],["self = [super init];",124878],["if (self) {",149027]],"useCount":7837039},{"word":"sell","context":[["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",972],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070]],"useCount":49005},{"word":"sender","context":[["[[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];",767],["#pragma unused(sender)",807],["id<TiEvaluator> context = (id<TiEvaluator>)sender;",877],["-(void)contextShutdown:(id)sender",877],["-(void)shutdown:(id)sender",971],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",6212],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender",6212],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",19102],["UIButton *button = (UIButton *)sender;",632],["- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {",19102]],"useCount":244818},{"word":"service","context":[["IOObjectRelease(service);",131],["_service = service;",132],["return service;",382],["if (!service) {",313],["for (CBService *service in peripheral.services) {",215],["for (CBCharacteristic *characteristic in service.characteristics) {",183],["if (0 < [service length] && 0 < [account length]) {",166],["if (service) {",154],["NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];",142],["// Turn off prettyPrint for this service to save bandwidth (especially on",152]],"useCount":27507},{"word":"session","context":[["- (void)URLSession:(NSURLSession *)session",2509],["* Initialize the Choreo with a valid session",1952],["- (void)URLSession:(__unused NSURLSession *)session",497],["if (session) {",543],["[session release];",674],["return session;",745],["NSURLSession *session = [NSURLSession sharedSession];",874],["-(id)initWithSession:(TMBTembooSession *)session {",1952],["* @param session - A TMBTembooSession containing valid Temboo Application Key credentials",1952],["return [super initWithSession:session andUri:uri];",1952]],"useCount":89992},{"word":"set","context":[["key = [NSString stringWithFormat:@\"set%@%@_\", [[key substringToIndex:1] uppercaseString], [key substringFromIndex:1]];",900],["set(lppufb,'OutputMode','ParameterMatrixSet');",915],["set(hObject,'BackgroundColor','white');",15030],["set(gcf, 'PaperPositionMode', 'manual');",1325],["set(gcf, 'PaperUnits', 'inches');",1256],["set(lppufb,'Angles',angs);",1054],["set(hObject,'BackgroundColor',[.9 .9 .9]);",988],["set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));",951],[":- import_module set.",936],["[color set];",930]],"useCount":317869},{"word":"setDelegate","context":[["- (void)setDelegate:(id)newDelegate",371],["[parser setDelegate:caller];",675],["[parser setDelegate:self];",583],["[player setDelegate:nil];",568],["[self setDelegate:self];",441],["[player setDelegate:self];",412],["[self setDelegate:nil];",396],["[searchField setDelegate:nil];",379],["[cache setDelegate:self];",371],["[request setDelegate:self];",1248]],"useCount":35352},{"word":"setEnabled","context":[["[sender setEnabled:NO];",183],["[item setEnabled:YES];",207],["[[AFNetworkActivityIndicatorManager sharedManager] setEnabled:YES];",276],["[[self gestureRecognizerForEvent:@\"dswipe\"] setEnabled:YES];",306],["[[self gestureRecognizerForEvent:@\"uswipe\"] setEnabled:YES];",306],["[[self gestureRecognizerForEvent:@\"lswipe\"] setEnabled:YES];",307],["[[self gestureRecognizerForEvent:@\"rswipe\"] setEnabled:YES];",307],["[super setEnabled:enabled];",417],["- (void)setEnabled:(BOOL)enabled",435],["- (void)setEnabled:(BOOL)enabled {",460]],"useCount":32083},{"word":"setFrame","context":[["[super setFrame:frame];",3974],["[[self window] setFrame:windowFrame display:NO];",312],["[button setFrame:buttonFrame];",336],["[view setFrame:frame];",403],["[view setFrame:frameRect];",419],["- (void)setFrame:(CGRect)frame",1655],["[gradientLayer setFrame:[self bounds]];",565],["[self setFrame:frame];",651],["-(void)setFrame:(CGRect)frame",811],["- (void)setFrame:(CGRect)frame {",1060]],"useCount":46618},{"word":"setNeedsDisplay","context":[["[_chartView setNeedsDisplay];",1120],["[self setNeedsDisplay];",23503],["[self setNeedsDisplay:YES];",8001],["[self setNeedsDisplay:YES];",1893],["[self setNeedsDisplay: YES];",1505],["[self setNeedsDisplay];",1368],["[gradientLayer setNeedsDisplay];",554],["[self.layer setNeedsDisplay];",397],["[self.view setNeedsDisplay];",356],["[[self controlView] setNeedsDisplay:YES];",341]],"useCount":53779},{"word":"setObject","context":[["[eventObject setObject:type forKey:@\"type\"];",694],["[listeners setObject:NUMINT(ourCallbackCount) forKey:type];",864],["[event setObject:[TiUtils sizeToDictionary:scrollView.contentSize] forKey:@\"contentSize\"];",316],["[defaults setObject:uid forKey:kAppUUIDString];",338],["[modules setObject:module forKey:path];",406],["[event setObject:[error description] forKey:@\"message\"];",498],["[cache setObject:newEntry forKey:urlString];",449],["[eventObject setObject:self forKey:@\"source\"];",450],["[operationInfo setObject:info forKey:NUMINT(tag)];",486],["[operationInfo setObject:asynchInfo forKey:NUMINT(tag)];",486]],"useCount":103079},{"word":"setSelected","context":[["[super setSelected:yn];",386],["-(void) setSelected:(BOOL)yn {",217],["- (void)setSelected:(BOOL)selected {",421],["[button setSelected:YES];",550],["- (void)setSelected:(BOOL)selected",635],["[button setSelected:NO];",732],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated",3694],["- (void)setSelected:(BOOL)selected animated:(BOOL)animated {",7137],["[super setSelected:selected animated:animated];",10716],["[super setSelected:selected];",798]],"useCount":29967},{"word":"setTitle","context":[["[button setTitle:title forState:UIControlStateNormal];",1060],["- (void)setTitle:(NSString *)title",828],["- (void)setTitle:(NSString *)title {",623],["[btn setTitle:title forState:UIControlStateNormal];",571],["[button setTitle:item.title forState:UIControlStateNormal];",523],["[badge setTitle:title forState:UIControlStateNormal];",441],["[self setTitle:title forState:UIControlStateNormal];",311],["-(void)setTitle:(id)item",272],["[ourItem setTitle:[TiUtils stringValue:[self valueForKey:@\"title\"]]];",259],["[super setTitle:title forState:state];",217]],"useCount":43229},{"word":"setUp","context":[["- (void)setUp {",28019],["- (void)setUp",19463],["[self setUp];",1542],["[super setUp];",575],["- (void) setUp",395],["- (void) setUp {",379],["-(void)setUp",366],["- (void)setUp",344],["[super setUp];",45229],["- (void)setUp {",275]],"useCount":98809},{"word":"setValue","context":[["[mutableRequest setValue:value forHTTPHeaderField:field];",511],["[request setValue:@\"application/x-www-form-urlencoded\" forHTTPHeaderField:@\"Content-Type\"];",563],["[request setValue:@\"application/json\" forHTTPHeaderField:@\"Accept\"];",586],["-(void)setValue:(id)value forKey:(NSString *)key",722],["[mutableHeaders setValue:mimeType forKey:@\"Content-Type\"];",773],["[request setValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];",836],["[self setValue:thisValue forKey:thisKey];",900],["[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions];",928],["[super setValue:value forUndefinedKey:key];",508],["[super setValue:value forKey:key];",528]],"useCount":62907},{"word":"setting","context":[["// 'auto' width setting for web views is NOT RECOMMENDED as a result.  'auto' height is OK, and necessary",254],["// WORKAROUND FOR APPLE BUG: 4.2 and lower don't like setting background color for grouped table views on iPad.",223],["% --- Executes during object creation, after setting all properties.",14669],["// Authentication setting",613],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527],["// the actual max-age setting for now.",449],["// Previously, we were creating the image here, then caching the image, then setting the data.",371],["NSLog(@\"[WARN] Invalid mode for audio player... setting to default.\");",325],["return setting;",352],["NSLog(@\"[WARN] Invalid mode for audio recorder... setting to default.\");",160]],"useCount":33051},{"word":"setup","context":[["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["// Do any additional setup after loading the view from its nib.",7268],["[self setup];",8549],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Do any additional setup after loading the view.",21076],["% do the general setup of the function",1056],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["- (void)setup;",693],["- (void)setup {",2108],["- (void)setup",2435]],"useCount":113870},{"word":"sharedApplication","context":[["[UIApplication sharedApplication].networkActivityIndicatorVisible = NO;",2152],["UIApplication *app = [UIApplication sharedApplication];",1096],["[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];",1119],["AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication]delegate];",1192],["UIViewController *vc = [[[[UIApplication sharedApplication] delegate] window] rootViewController];",1223],["[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;",1387],["[[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];",1417],["UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;",1478],["[[UIApplication sharedApplication] openURL:url];",1598],["[[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];",2396]],"useCount":91791},{"word":"sharedInstance","context":[["return sharedInstance;",5074],["AVAudioSession *audioSession = [AVAudioSession sharedInstance];",607],["sharedInstance = [[self alloc] init];",1656],["BRWalletManager *m = [BRWalletManager sharedInstance];",591],["+ (instancetype)sharedInstance {",1360],["+ (instancetype)sharedInstance",1358],["NSManagedObjectContext *context = [[ContextManager sharedInstance] mainContext];",1253],["if (sharedInstance == nil) {",761],["[DDLog addLogger:[DDTTYLogger sharedInstance]];",684],["static id sharedInstance = nil;",638]],"useCount":72791},{"word":"should","context":[["[[serialisationError should] beNil];",630],[";Per VHA Directive 10-93-142, this routine should not be modified.",2550],[";;Per VHA Directive 2004-038, this routine should not be modified.",2012],["it(@\"should fail with a sensible failure message\", ^{",1728],[";;Per VHA Directive 10-93-142, this routine should not be modified.",1698],["it(@\"should pass\", ^{",1526],[";Per VHA Directive 2004-038, this routine should not be modified.",946],["%               You should set J to the cost.",877],["//that don't exist and it should return undefined, not an exception",661],["[[parseError should] beNil];",630]],"useCount":167242},{"word":"show","context":[["[alert show];",766],["[self show];",909],["- (void)show {",939],["[SVProgressHUD show];",1043],["- (void)show",1140],["% The command 'cvx_where' will show where this file is located.",1182],["otherButtonTitles:nil] show];",1650],["[alertView show];",9263],["if (show) {",874],["[alert show];",19121]],"useCount":85213},{"word":"since","context":[["//NOTE: we need to return nil here since in JS you can ask for properties",661],["// on simulator we want to keep slash since it's coming from file",418],["// need to retain here since we autorelease below and since colorName also autoreleases",418],["// need to retain here since we autorelease below and since colorName also autoreleases",418],["// since we call this alot, cache it",419],["// since you can't serialize a proxy as JSON, just return null",450],["// use valueForUndefined since this should really come from dynprops",450],["// this proxy is being touched.  since objects can be referenced from one context",450],["// don't initially start the spinner when added since we don't want to prematurely show",451],["@since 4.0",1401]],"useCount":36300},{"word":"single","context":[["% files should contain only a single variable, corresponding with the",465],["A = single(rand(1,1) + rand(1,1)*1i);",384],["B = single(rand(1,1) + rand(1,1)*1i);",384],["A = single(rand(1,1));",384],["B = single(rand(1,1));",384],["// GCD allows single-dispatch predicates, specifically for situations like singleton initialization.",371],["case 'single'",343],["% Instructions: Perform a single gradient step on the parameter vector",340],["B = single(rand(1000,1000) + rand(1000,1000)*1i);",256],["A = single(rand(2000,2000));",256]],"useCount":31100},{"word":"size","context":[["UIGraphicsBeginImageContext(size);",1504],["return self.frame.size;",1507],["frame.size.height = height;",1507],["UIGraphicsBeginImageContext(rect.size);",1660],["return self.frame.size.width;",1918],["frame.size.width = width;",1471],["frame.size = size;",1276],["frame.size = size;",1276],["return size;",5375],["return self.frame.size.height;",1927]],"useCount":812578},{"word":"size_t","context":[["for (size_t x = 1; x < argCount; x++)",420],["for (size_t c=0;c<argCount;c++)",450],["size_t len = [toEncode length];",451],["size_t i;",477],["for (size_t x = 1; x < argCount; x++)",486],["size_t i = 0;",517],["size_t width = CGImageGetWidth(imageRef);",537],["size_t height = CGImageGetHeight(imageRef);",545],["size_t run_result = ct_runsuite(&suite);",912],["size_t size;",1149]],"useCount":76866},{"word":"sizeof","context":[["NUMINT(sizeof(uint64_t)), NUMINT(TI_LONG),",415],["NUMINT(sizeof(uint32_t)), NUMINT(TI_INT),",415],["memcpy(&(val.sf.v), (void*)data+position, sizeof(val.sf.v));",464],["bzero(&localWifiAddress, sizeof(localWifiAddress));",510],["fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))",627],["socklen_t sockaddr4len = sizeof(sockaddr4);",1108],["socklen_t sockaddr6len = sizeof(sockaddr6);",1108],["bzero(&zeroAddress, sizeof(zeroAddress));",824],["zeroAddress.sin_len = sizeof(zeroAddress);",817],["fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))",627]],"useCount":92166},{"word":"so","context":[["do so for the templates in that tool.",798],["//\tdo so, subject to the following conditions:",651],["% furnished to do so, subject to the following conditions:",973],["//\tfurnished to do so, subject to the following conditions:",1201],["furnished to do so, subject to the following conditions:",1356],["// you can do so here.",602],["furnished to do so, subject to the following conditions:",2964],["* furnished to do so, subject to the following conditions:",6200],["//  furnished to do so, subject to the following conditions:",11359],["// furnished to do so, subject to the following conditions:",15183]],"useCount":167151},{"word":"socket","context":[["RELEASE_TO_NIL(socket);",277],["// As always, ensure that operations take place on the socket thread...",486],["LogVerbose(@\"Creating IPv6 socket\");",270],["LogVerbose(@\"Creating IPv4 socket\");",270],["#import <sys/socket.h>",1318],["#include <sys/socket.h>",804],["[socket readDataWithTimeout:-1",729],["socket = [[AsyncSocket alloc] initWithDelegate:self];",504],["// That is, socket was disconnected, or connection has already timed out.",480],["[socket disconnect];",317]],"useCount":38195},{"word":"some","context":[["// in some concrete implementations you really want to return a different",450],["//It's possible that some of the covered area doesn't matter. If it all matters, unimportant is 0.",524],["// In some circumstances this result can be replaced at an inconvenient time,",449],["% Initialize some useful values",1429],["// Different from resume - there's some information we can only update AFTER the app has popped to the foreground.",444],["// Make sure -showBuildSettings returns some data",350],["// We need to stage this out; the problem at hand is that some values",350],["//If we have some credentials to use let's apply them to the request and continue",263],["*\tYes, I know that [TiViewController view] will return [self view] anyways, but for some",253],["// If there was some kind of issue with enqueueBuffer and we didn't",244]],"useCount":35221},{"word":"source","context":[["Redistribution and use in source and binary forms, with or without",5044],["#pragma mark - Table view data source",12481],["* Redistribution and use in source and binary forms, with or without",4482],["// Delete the row from the data source",4362],["* Redistribution and use in source and binary forms, with or without",2828],["% Redistribution and use in source and binary forms, with or without",2485],["Redistribution and use in source and binary forms, with or without modification,",2376],["* with this source distribution.",1955],["// Redistribution and use in source and binary forms, with or without",1714],["//  Redistribution and use in source and binary forms, with or without",1673]],"useCount":128666},{"word":"space","context":[["CGColorSpaceRelease(space);",369],["CGColorSpaceRef space = CGColorSpaceCreateDeviceRGB();",324],["// if the space remaining in the buffer is not enough for this packet, then enqueue the buffer.",273],["// view, so its frame is in window coordinate space, which is never rotated. Its bounds, however, will be in landscape",171],["// make space for the new audio data then back out",244],["// available space in the socket's internal write buffer.",240],["return space;",217],["// Include space for a terminating zero",186],["% difficult because fields appear in caller memory space undeclared.",171],["// create the CGGradient and then release the gray color space",485]],"useCount":27779},{"word":"specified","context":[["NSString *msg = @\"IPv4 has been disabled and specified interface doesn't support IPv6.\";",268],["% Additional options should be specified in key-value pairs and can be",256],["// Get root node of the accessible node hierarchy, if node not specified",268],["NSString *msg = @\"IPv6 has been disabled and specified interface doesn't support IPv4.\";",268],["// Return NO if you do not want the specified item to be editable.",5341],["DebugLog(@\"[ERROR] The specified Completion Handler with ID: %@ has already expired or removed from the system\", key);",372],["// if we specified a 2x, we need to upscale it",449],["// this is a different encoding than specified, just send it to the webview to load",451],["// if not specified",452],["* (delegate) which was specified as when the choreo execution was initiated.",1952]],"useCount":34826},{"word":"sprintf","context":[["testCase.verifyEqual(imgActual,imgExpctd,'RelTol',1e-10,sprintf('%g',diff));",314],["sprintf('%g',coefDist));",443],["sprintf('%g',diff));",587],["testCase.verifyThat(coefDist,IsLessThan(1e-14),sprintf('%g',coefDist));",953],["testCase.verifyEqual(coefActual,coefExpctd,'RelTol',1e-14,sprintf('%g',coefDist));",313],["sp = sprintf('%6.1f',ap);",192],["err_msg = sprintf ( '%s:  %s:  succeeded when it should have failed\\n', mfilename, testid);",174],["testCase.verifyEqual(imgActual,imgExpctd,'RelTol',1e-9,sprintf('%g',diff));",161],["txt=sprintf(dataformat,txt,padding0,'\"_ArrayData_\": ',...",155],["hdr.label{i} = sprintf('%d', i);",150]],"useCount":30601},{"word":"standardUserDefaults","context":[["NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];",921],["NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];",1208],["NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];",1257],["NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];",3224],["[[NSUserDefaults standardUserDefaults] synchronize];",10106],["NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];",10882],["NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];",743],["NSString *curKey = [[NSUserDefaults standardUserDefaults] stringForKey:@\"APNSRemoteDeviceUUID\"];",490],["defaults = [NSUserDefaults standardUserDefaults];",466],["NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];",488]],"useCount":54120},{"word":"start","context":[["[operation start];",2188],["- (void)start",2016],["[self start];",1819],["// CHECK-NEXT:         <key>start</key>",1464],["// CHECK-NEXT:         <key>start</key>",1338],["[connection start];",1145],["* $ npm start",1049],["-(void)start",874],["[self startTimerWithEvent:@\"start\"];",684],["- (void)start {",2022]],"useCount":107736},{"word":"state","context":[["switch (state) {",2741],["%    Add noise to initial state",550],["WebCore::JSMainThreadNullState state;",2467],["return state;",713],["// Configure the view for the selected state",8899],["_state = state;",1033],["switch (self.state) {",777],["[self humanReadableStateFrom:self.state]];",730],["if (recognizer.state == UIGestureRecognizerStateBegan) {",718],["@synthesize state = _state;",564]],"useCount":188343},{"word":"statement","context":[["if (statement == NULL) return;",614],["int status = sqlite3_prepare_v2(db, stmt, stmtLen+1, statement, NULL);",466],["while (sqlite3_step(statement) == SQLITE_ROW) {",389],["sqlite3_reset(statement);",1997],["sqlite3_finalize(statement);",1892],["return *statement;",794],["int status = sqlite3_step(statement);",1554],["if (*statement == NULL)",846],["sqlite3_clear_bindings(statement);",1468],["sqlite3_stmt *statement;",1343]],"useCount":42630},{"word":"static","context":[["static const J2ObjcFieldInfo fields[] = {",4514],["static void",8469],["static dispatch_once_t onceToken;",36390],["static const J2ObjcMethodInfo methods[] = {",6328],["static int",1843],["static dispatch_once_t pred;",1861],["static J2ObjcMethodInfo methods[] = {",2030],["static dispatch_once_t once;",2969],["static NSString *CellIdentifier = @\"Cell\";",4294],["// static",5028]],"useCount":338493},{"word":"status","context":[["int status = sqlite3_step(statement);",1554],["switch (status) {",1771],["if (status != SQLITE_OK)",2043],["int status;",2174],["return status;",3053],["if (status != noErr)",1723],["status, sqlite3_errmsg(databaseTransaction->connection->db));",961],["if (status != noErr) {",1235],["OSStatus status;",1159],["CBLStatus status;",961]],"useCount":158318},{"word":"std","context":[["- (void)TLfillFieldsWithValues:(std::map<int32_t, TLConstructedValue> *)values",1205],["- (void)TLfillFieldsWithValues:(std::map<int32_t, TLConstructedValue> *)__unused values",1167],["using namespace std;",998],["- (id<TLObject>)TLbuildFromMetaObject:(std::tr1::shared_ptr<TLMetaObject>)metaObject",799],["const std::string model_string(\"1b 2f:[ 2f1b 2f2f:[ 2f2f1b 2f2f2b 2f2f3b ] \"",253],["return std::string();",282],["catch(const std::exception& ex)",775],["- (id<TLObject>)TLbuildFromMetaObject:(std::tr1::shared_ptr<TLMetaObject>)__unused metaObject",731],["- (id<TLObject>)TLbuildFromMetaObject:(std::shared_ptr<TLMetaObject>)metaObject",406],["- (id<TLObject>)TLbuildFromMetaObject:(std::shared_ptr<TLMetaObject>)__unused metaObject",436]],"useCount":68981},{"word":"step","context":[["% Application starting next step",1409],["//step 3: try an appropriate legacy encoding (if one) -- what's that? Latin-1?",451],["// step 1: read and attempt to have system determine",451],["coefActual = step(testCase.lppufb,ang,[]);",646],["step.shouldTintImages = YES;",431],["//step 2: if unknown encoding, try UTF-8",451],["ORKStepArrayAddStep(steps, step);",860],["//@step",544],["step(testCase.synthesizer,coefs,scales);",654],["[steps addObject:step];",2772]],"useCount":48084},{"word":"stop","context":[["[self stop];",3853],["[player stop];",1736],["- (void)stop",1594],["BOOL stop = NO;",1570],["- (void)stop {",1235],["*stop = YES;",8759],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667],["BOOL *stop) {",957],["-(void)stop",773],["[self stopTimerWithEvent:@\"stop\"];",684]],"useCount":100883},{"word":"store","context":[["return store;",327],["// Create the coordinator and store",1247],["// While the static initializer mutex is locked, locally store the value of",291],["// we might store as properties (such as NSArray) use isEqual: as a",350],["%store",591],["// If the coordinator doesn't already exist, it is created and the application's store added to it.",683],["* The schema for the persistent store is incompatible with current managed object model.",696],["// Returns the persistent store coordinator for the application.",697],["* Simply deleting the existing store:",701],["* The persistent store is not accessible;",702]],"useCount":32021},{"word":"str","context":[["return str;",389],["return [MTLValueTransformer reversibleTransformerWithForwardBlock:^id(NSString *str) {",451],["str = '';",974],["#define RETURN_IF_ORIENTATION_STRING(str,orientation) \\",417],["if (str) {",534],["[str release];",549],["NSString *str = nil;",673],["return [NSDate aws_dateFromString:str];",680],["NSString *str;",725],["return str;",3957]],"useCount":88705},{"word":"strcmp","context":[["if ischar(s) & strcmp(s,'DIP_GetParamList')",195],["if strcmp(get(ax,'Box'),'on')",165],["if strcmp(cfg.feedback, 'yes')",165],["if strcmp(version, 'latest')",167],["assert(strcmp(e.identifier,'mexopencv:error'));",884],["if (!strcmp(u.machine, \"iPhone3,1\"))",418],["if ((conversion != NULL) && (strcmp(ip, iface) == 0))",284],["if (strcmp(cursor->ifa_name, iface) == 0)",284],["if strcmp(get(ax,'YScale'),'log')",197],["if strcmp(get(ax,'XScale'),'log')",197]],"useCount":52105},{"word":"stream","context":[["subreason:@\"Attempt to write from closed/nil data stream\"",711],["-(void)serialize:(SerializedData*)stream {",528],["[stream open];",623],["if (![stream isReadable:nil]) {",708],["TiStreamProxy<TiStreamInternal>* stream = nil;",646],["ENSURE_ARG_AT_INDEX(stream, args, 0, TiStreamProxy);",944],["subreason:@\"read() operation on stream that is not readable\"",944],["[stream close];",877],["return @\"application/octet-stream\";",750],["[invoke setTarget:stream];",708]],"useCount":60874},{"word":"string","context":[["#include <string.h>",2153],[":- import_module string.",2053],["t.string = s;",1783],["// CHECK-NEXT:      <key>kind</key><string>control</string>",1464],["// CHECK-NEXT:      <key>kind</key><string>control</string>",1464],["#include <string>",1453],["// CHECK-NEXT:      <key>kind</key><string>control</string>",1338],["// CHECK-NEXT:      <key>kind</key><string>control</string>",1338],["// CHECK-NEXT:      <key>kind</key><string>event</string>",1244],["return string;",4998]],"useCount":268347},{"word":"stringValue","context":[["+(NSString*)stringValue:(NSString*)name properties:(NSDictionary*)properties def:(NSString*)def;",418],["+(NSString*)stringValue:(NSString*)name properties:(NSDictionary*)properties def:(NSString*)def exists:(BOOL*) exists",418],["if ([value respondsToSelector:@selector(stringValue)])",1256],["return [value stringValue];",1004],["value = [value stringValue];",953],["return [obj stringValue];",441],["return [self stringValue:name properties:properties def:def exists:NULL];",418],["+(NSString*)stringValue:(id)value",418],["+(NSString*)stringValue:(NSString*)name properties:(NSDictionary*)properties;",418],["else if ([value respondsToSelector:@selector(stringValue)])",429]],"useCount":38413},{"word":"stringWithFormat","context":[["return [NSString stringWithFormat:",1479],["subreason:[NSString stringWithFormat:@\"Offset %d extends past data length %u\", offsetVal, [data length]]",460],["[uM setActionName:[NSString stringWithFormat:GCLocalizedString(@\"Undo %@\", @\"Misc\"), self.localizedType]];",468],["withIndent:[NSString stringWithFormat:@\"%@  \", indent]];",494],["[self throwException:[NSString stringWithFormat:@\"Invalid endianness: %d\", byteOrder]",512],["[self throwException:[NSString stringWithFormat:@\"Invalid string encoding type '%@'\",charset]",538],["[self throwException:[NSString stringWithFormat:@\"Invalid type identifier '%@'\",type]",538],["o_key = [NSString stringWithFormat:@\"%s\", key];",694],["[NSString stringWithFormat:",697],["key = [NSString stringWithFormat:@\"set%@%@_\", [[key substringToIndex:1] uppercaseString], [key substringFromIndex:1]];",900]],"useCount":124353},{"word":"strong","context":[["@property (nonatomic, strong) UIImage *image;",323],["@property (nonatomic, strong) UIWebView *webView;",373],["@property (nonatomic, strong) CLLocationManager *locationManager;",388],["@property (nonatomic, strong) UICollectionView *collectionView;",470],["@property (nonatomic, strong) NSInputStream *inputStream;",547],["@property (nonatomic, strong) NSTimer *timer;",746],["@property (nonatomic, strong) UIScrollView *scrollView;",756],["@property (nonatomic, strong) UILabel *titleLabel;",792],["@property (nonatomic, strong) UIImageView *imageView;",844],["@property (nonatomic, strong) UITableView *tableView;",1287]],"useCount":105504},{"word":"strongSelf","context":[["__strong __typeof(weakSelf)strongSelf = weakSelf;",1098],["__strong typeof(weakSelf) strongSelf = weakSelf;",1024],["typeof(self) strongSelf = weakSelf;",942],["if (strongSelf) {",887],["__strong typeof(self) strongSelf = weakSelf;",823],["[strongSelf unlock];",666],["[strongSelf lock];",654],["if (!strongSelf) {",645],["if (!strongSelf)",733],["__strong __typeof(&*weakSelf)strongSelf = weakSelf;",488]],"useCount":35527},{"word":"struct","context":[["struct sockaddr_in6 sockaddr6;",1519],["typedef struct {",3179],["gui_State = struct('gui_Name',       mfilename, ...",2558],["struct {",1545],["struct sockaddr_in sockaddr4;",1519],["struct sockaddr_in zeroAddress;",814],["struct ct_testsuite suite = ct_makesuite(tests);",808],["struct utsname systemInfo;",607],["typedef struct",602],["struct {",539]],"useCount":107144},{"word":"structure","context":[["% Get default command line output from handles structure",2229],["% ARG kern : the kernel structure containing the parameters to be",266],["% 1. SBMLModel, an SBML Model structure",310],["% eventdata  structure with the following fields (see UICONTROL)",312],["% ARG kern : the kernel structure for which the matrix is computed.",326],["% input/output structure.",425],["\\\"type\\\":\\\"structure\\\",\\",2083],["\\\"type\\\":\\\"structure\\\", \\",2638],["% Update handles structure",4323],["% handles    structure with handles and user data (see GUIDATA)",35747]],"useCount":79011},{"word":"style","context":[["self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];",7208],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier",4471],["self = [super initWithStyle:style];",3996],["- (id)initWithStyle:(UITableViewStyle)style",3578],["style:UIBarButtonItemStylePlain",3214],["style:UIAlertActionStyleDefault",2212],["<p style=\"text-align: center\">",1589],["style:UIBarButtonItemStyleBordered",1494],["if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {",1335],["- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {",1310]],"useCount":121557},{"word":"subject","context":[["// furnished to do so, subject to the following conditions:",15183],["//  furnished to do so, subject to the following conditions:",11359],["* furnished to do so, subject to the following conditions:",6200],["furnished to do so, subject to the following conditions:",2964],["subject to these terms, Apple grants you a personal, non-exclusive",1432],["furnished to do so, subject to the following conditions:",1356],["//\tfurnished to do so, subject to the following conditions:",1201],["//  subject to the following conditions:",974],["% furnished to do so, subject to the following conditions:",973],["//  This Source Code Form is subject to the terms of the Mozilla Public",951]],"useCount":76274},{"word":"sublicense","context":[["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["//  copy, modify, merge, publish, distribute, sublicense, and/or sell",1774],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1354],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",1242],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1201],["copy, modify, merge, publish, distribute, sublicense, and/or sell",1124],["% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",972]],"useCount":49013},{"word":"subplot","context":[["subplot(2,1,2)",1739],["subplot(2,2,4)",961],["subplot(1,2,1)",961],["subplot(2,2,1)",986],["subplot(2,2,3)",1024],["subplot(1,2,1);",1162],["subplot(1,2,2);",1194],["subplot(2,1,2);",1338],["subplot(2,1,1);",1348],["subplot(2,1,1)",1808]],"useCount":53493},{"word":"subviews","context":[["// Release any retained subviews of the main view.",6136],["for (UIView *child in [self subviews])",477],["for (UIView *subview in self.subviews) {",517],["// View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),",602],["for (UIView *view in self.subviews) {",630],["UIView *spinner = [[view subviews] count] > 0 ? [[view subviews] objectAtIndex:0] : nil;",902],["UIView *spinner = [[view subviews] count] > 0 ? [[view subviews] objectAtIndex:0] : nil;",902],["UIView *view = [[container subviews] objectAtIndex:position];",902],["for (UIView *view in [self subviews])",911],["for (UIView *subview in [view subviews]) {",1289]],"useCount":55643},{"word":"success","context":[["success();",1896],["success:^(AFHTTPRequestOperation *operation, id responseObject) {",2014],["success:success",2293],["success:success",2293],["success = NO;",2348],["if (success)",2459],["if (!success) {",3793],["if (success) {",11585],["return success;",5351],["BOOL success = NO;",2146]],"useCount":150164},{"word":"sum","context":[["int sum = 0;",210],["sum=0;",127],["I = sum(f);",129],["ss = sum(~isnan(s)); tt = sum(~isnan(t)); pp = sum(~isnan(p));",155],["ss = sum(~isnan(s)); tt = sum(~isnan(t)); pp = sum(~isnan(p));",155],["ss = sum(~isnan(s)); tt = sum(~isnan(t)); pp = sum(~isnan(p));",155],["tmp3=zeros(4,narrows); tmp3(:)=sum(tmp2)'; end;",176],["Qv_ff=sum(B.^2)';",176],["return sum;",345],["sum = 0;",353]],"useCount":35452},{"word":"super","context":[["[super viewWillAppear:animated];",26824],["if (self = [super init]) {",30289],["[super layoutSubviews];",20064],["[super viewDidLoad];",134546],["self = [super init];",124878],["[super dealloc];",97664],["self = [super initWithFrame:frame];",31818],["[super didReceiveMemoryWarning];",77268],["[super setUp];",45229],["[super tearDown];",42796]],"useCount":1173241},{"word":"superview","context":[["UIView *superview = self.superview;",495],["if ((view == webview) || (superview == webview) || (superduperview == webview))",451],["// Releases the view if it doesn't have a superview.",5338],["self.bounds = self.superview.bounds;",452],["if (self.superview) {",814],["UIView *superview = self.superview;",495],["// Releases the view if it doesn't have a superview.",477],["[super didReceiveMemoryWarning]; // Releases the view if it doesn't have a superview",472],["UIView *superview = [view superview];",458],["UIView *superview = [view superview];",458]],"useCount":53202},{"word":"support","context":[["// Override to support editing the table view.",4698],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["// Override to support conditional rearranging of the table view.",4695],["#error \"This file requires ARC support.\"",442],["// Override to support rearranging the table view.",4696],["Martijn ten BhÃ¶mer from TU Eindhoven contributed PureData support. Contact: m.t.bhomer@tue.nl.",468],["// our bitmap context doesn't support alpha the gradient requires it)",486],["* WARNING: This is generated code. Modify at your own risk and without support.",938],["#pragma mark - Core Data Saving support",1253],["// Override to support conditional editing of the table view.",4691]],"useCount":62835},{"word":"sure","context":[["// TODO: We're on a BG thread... need to make sure this gets caught somehow.",243],["// Make sure we have enough room in the buffer for our read.",306],["// Make sure -showBuildSettings returns some data",350],["//NOTE; I'm not sure the order here.. the docs don't necessarily",418],["//encoding problem - fail fast and make sure we re-escape",418],["// This check serves to make sure that a non-NSDictionary object",429],["//first make sure we don't have a method with the fullname",437],["//TODO: need to consult property_getAttributes to make sure we're not hitting readonly, etc. but do this",437],["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["* `inet` value under `en0:`) and make sure your computer and iOS device are",1052]],"useCount":38175},{"word":"switch","context":[["switch (type)",2351],["switch (tag) {",1781],["switch (type) {",5168],["switch (indexPath.row) {",4186],["switch (byteOrder) {",3882],["switch (state) {",2741],["switch (indexPath.section) {",1965],["switch (fieldID)",2095],["switch (section) {",2642],["switch ([value integerValue]) {",2228]],"useCount":205652},{"word":"synchronized","context":[["}  // @synchronized(self)",979],["@synchronized(self) {",16192],["@synchronized(self)",7573],["@synchronized (self) {",4368],["@synchronized (self)",1081],["@synchronized (lock) {",1021],["@synchronized (self.lock) {",524],["@synchronized(self) {",716],["@synchronized(self){",711],["@synchronized (self.runningOperations) {",624]],"useCount":46189},{"word":"synthesize","context":[["@synthesize bridge = _bridge;",952],["@synthesize managedObjectModel = _managedObjectModel;",2133],["@synthesize delegate;",5391],["@synthesize delegate = _delegate;",3045],["@synthesize window = _window;",2241],["@synthesize managedObjectContext = _managedObjectContext;",2173],["@synthesize persistentStoreCoordinator = _persistentStoreCoordinator;",2145],["@synthesize window;",2125],["@synthesize name;",1484],["@synthesize name = _name;",1028]],"useCount":240218},{"word":"sys","context":[["#import <sys/types.h>",636],["#include <sys/types.h>",1568],["#include <sys/sysctl.h>",1379],["#import <sys/socket.h>",1318],["#import <sys/utsname.h>",1001],["#include <sys/socket.h>",804],["#include <sys/stat.h>",717],["#import <sys/sysctl.h>",647],["#include <sys/time.h>",582],["vout_display_sys_t *sys = vd->sys;",526]],"useCount":29437},{"word":"system","context":[["// step 1: read and attempt to have system determine",451],["system(command);",184],["//Check to see if the app booted and we still have the completionhandler in the system",186],["[~,hname] = system('hostname');",231],["// Note that returning 'char' forces a conversion to boolean value by the Ti system, so we coerce to int",232],["system(cmd);",294],["% This code is part of a batch job configuration system for MATLAB. See",346],["// If we remove the button here, it could be the case that the system",370],["// This created TWO images in memory from the same binary data, which the system might not be",371],["DebugLog(@\"[ERROR] The specified Completion Handler with ID: %@ has already expired or removed from the system\", key);",372]],"useCount":27608},{"word":"t","context":[["t^5,",1944],["t^3,",2232],["t^4,",2309],["tok = [t nextToken];",2493],["t^2,",2517],["t,",1789],["// Release any cached data, images, etc that aren't in use.",5076],["t.string = s;",1783],["t^6,",1536],["// Releases the view if it doesn't have a superview.",5338]],"useCount":422479},{"word":"tab","context":[["// Cancel any pending tab transition.",432],["tab(@);",423],["// the information from the main tab for our window.",223],["usr = get(tab,'Userdata');",151],["// the view hierarchy because the tab isn't main.  Could retrieve",223],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",179],["- (BOOL)isTabFullyVisible:(TabView*)tab {",149],["for (TabController* tab in tabArray_.get()) {",173],["// -*-  Mode:ObjC; c-basic-offset:4; tab-width:8; indent-tabs-mode:nil -*-",172],["if (tab) {",154]],"useCount":46588},{"word":"table","context":[["// Override to support conditional rearranging of the table view.",4695],["// Override to support rearranging the table view.",4696],["// Override to support editing the table view.",4698],["[table endUpdates];",594],["// Override to support conditional editing of the table view.",4691],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",4306],["// Customize the appearance of table view cells.",1368],["UITableView *table = [self tableView];",1344],["row.table = self;",748],["[table reloadData];",702]],"useCount":75668},{"word":"tableView","context":[["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978],["- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath",11931],["[self.tableView reloadData];",26464],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath",16436],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {",15976],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section",15972],["- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {",14978]],"useCount":614315},{"word":"tag","context":[["switch (tag) {",1781],["tag:tag];",1380],["tag:tag];",1380],["if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {",1341],["if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {",1341],["SInt32 tag = [input readTag];",945],["tag:(long)tag",804],["tag:(long)tag",804],["// Set your app's start page by setting the <content src='foo.html' /> tag in config.xml.",527],["int tag = -1;",492]],"useCount":102192},{"word":"target","context":[["target:self",17629],["target:(id)target",1086],["target:(id)target",1086],["[target setExecutionContext:context.delegate];",1324],["target:self",1340],["if ([target respondsToSelector:sel])",1351],["target: self",1583],["target:nil",1659],["% Instantiation of target class",3068],["if ([target respondsToSelector:selector])",3517]],"useCount":159346},{"word":"task","context":[["} failure:^(NSURLSessionDataTask *task, NSError *error) {",2182],["AWSLogError(@\"Fatal exception: [%@]\", task.exception);",2321],["NSError *error = task.error;",2380],["if (task.exception) {",2383],["[task resume];",2910],["} failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {",3549],["return task;",4107],["[task launch];",1407],["task:(NSURLSessionTask *)task",993],["} success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {",1458]],"useCount":94045},{"word":"tearDown","context":[["- (void)tearDown",17179],["[super tearDown];",42796],["-(void)tearDown",233],["- (void)tearDown",234],["- (void)tearDown {",271],["- (void) tearDown",276],["- (void)tearDown {",26315],["[self tearDown];",278],["- (void) tearDown {",289],["[super tearDown];",492]],"useCount":89682},{"word":"teardown","context":[["// Put teardown code here. This method is called after the invocation of each test method in the",44],["#pragma mark Initialization and teardown",1036],["// Put teardown code here; it will be run once, after the last test case.",574],["[self teardown];",152],["// Put teardown code here. This method is called after the invocation of each test method in the class.",103],["#pragma mark Setup and teardown",92],["- (void)teardown {",87],["- (void)teardown",76],["- (void)teardown;",64],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643]],"useCount":36311},{"word":"temp","context":[["NSString *temp;",244],["[temp unlock]; \\",243],["pqc = pqc(:,ind); pres = pres(:,ind); psal = psal(:,ind); sqc = sqc(:,ind); temp = temp(:,ind); tqc = tqc(:,ind);",248],["pqc = pqc(:,ind); pres = pres(:,ind); psal = psal(:,ind); sqc = sqc(:,ind); temp = temp(:,ind); tqc = tqc(:,ind);",248],["[temp release];",261],["id temp = [self valueForUndefinedKey:@\"id\"];",327],["if (temp==nil||![temp isKindOfClass:[NSString class]]){",327],["cn = temp;",327],["if (temp==nil||![temp isKindOfClass:[NSString class]]){",327],["return temp;",667]],"useCount":35826},{"word":"test","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["%!test",5385],["// This is an example of a functional test case.",15558],["// This is an example of a performance test case.",15613],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["test(NO);",1300],["if (test(view)) {",1217],["- (BOOL)findSubviewInView:(UIView *)view matching:(BOOL(^)(UIView *view))test",1217],["// Unit test",852],["if ([self findSubviewInView:subview matching:test]) {",1217]],"useCount":169984},{"word":"testExample","context":[["//- (void)testExample",31],["- (void)testExample {",20225],["- (void)testExample",11133],["//- (void)testExample {",25],["- (void)testExample {",13],["@\"TestProjectLibrary64bitTests/testExample\",",12],["- (void) testExample {",12],["- (void)testExample",12],["NSArray *testList = @[ @\"TestThatThrowsExceptionOnStart/testExample\" ];",12]],"useCount":31475},{"word":"tests","context":[["% opening :/home/verlaanm/tudelft/svn_costa/trunk/openda/tests/two_oscillators/./model2/OscillatorStochModel.xml",217],["// Pretend tests succeeded.",183],["tests = functiontests(localfunctions);",187],["% opening :/home/verlaanm/tudelft/svn_costa/trunk/openda/tests/two_oscillators/./model1/OscillatorStochModel.xml",213],["@\"run-tests\",",459],["% opening :/home/verlaanm/deltares/src/openda_20101025/public/tests/simple_oscillator/./model/OscillatorStochModel.xml",730],["struct ct_testsuite suite = ct_makesuite(tests);",808],["// Use recording to get started writing UI tests.",4638],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667],["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031]],"useCount":31295},{"word":"text","context":[["- (void)setText:(NSString *)text {",725],["NSString *text = nil;",751],["[super setText:text];",799],["- (void)setText:(NSString *)text",955],["XCTAssertTrue(foundElement, @\"Couldn't find element with text '%@' in %d seconds\", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);",1114],["return text;",1411],["'Style','text', ...",3108],["<p style=\"text-align: center\">",1589],["label.text = text;",610],["'Style','text',...",1905]],"useCount":219747},{"word":"textColor","context":[["label.textColor = [UIColor blackColor];",611],["- (void)setTextColor:(UIColor *)textColor {",419],["self.textColor = [UIColor whiteColor];",332],["self.textColor = [UIColor blackColor];",338],["_textColor = textColor;",438],["titleLabel.textColor = [UIColor whiteColor];",568],["label.textColor = [UIColor whiteColor];",1656],["cell.textLabel.textColor = [UIColor blackColor];",790],["cell.textLabel.textColor = [UIColor whiteColor];",761],["label.textColor = [UIColor redColor];",626]],"useCount":42285},{"word":"textField","context":[["- (BOOL)textFieldShouldReturn:(UITextField *)textField {",2375],["[textField resignFirstResponder];",4815],["- (BOOL)textFieldShouldReturn:(UITextField *)textField",2431],["- (void)textFieldDidEndEditing:(UITextField *)textField",890],["- (void)textFieldDidBeginEditing:(UITextField *)textField",843],["- (void)textFieldDidEndEditing:(UITextField *)textField {",825],["textField.delegate = self;",765],["- (void)textFieldDidBeginEditing:(UITextField *)textField {",738],["- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField",540],["- (BOOL)textFieldShouldReturn:(UITextField *)textField{",508]],"useCount":59859},{"word":"textLabel","context":[["cell.textLabel.text = title;",315],["cell.textLabel.textColor = [UIColor whiteColor];",761],["cell.textLabel.textAlignment = NSTextAlignmentCenter;",688],["cell.textLabel.numberOfLines = 0;",628],["self.textLabel.backgroundColor = [UIColor clearColor];",434],["cell.textLabel.backgroundColor = [UIColor clearColor];",359],["cell.textLabel.textAlignment = NSTextAlignmentLeft;",325],["cell.textLabel.text = [object description];",300],["cell.textLabel.adjustsFontSizeToFitWidth = YES;",278],["cell.textLabel.textColor = [UIColor blackColor];",790]],"useCount":30309},{"word":"textView","context":[["- (void)textViewDidBeginEditing:(UITextView *)textView",527],["[self.textView resignFirstResponder];",634],["[self.textView becomeFirstResponder];",700],["hook:^(PTYTextView *textView) {",748],["- (void)textViewDidChange:(UITextView *)textView",765],["[textView resignFirstResponder];",862],["- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text",438],["- (void)textViewDidEndEditing:(UITextView *)textView",466],["textView.drawingHook = ^(iTermTextDrawingHelper *helper) {",492],["- (void)textViewDidChange:(UITextView *)textView {",440]],"useCount":47974},{"word":"than","context":[["// if we have module js than we're a JS native module",445],["// than the owning context (page context).",450],["// the execution context is different than the page context",450],["// this is a different encoding than specified, just send it to the webview to load",451],["%  or any other files other than those mentioned above.",424],["describe(@\"and the actual value is greater than the expected value\", ^{",304],["describe(@\"and the actual value is less than the expected value\", ^{",304],["// Override to allow orientations other than the default portrait orientation.",1620],["// Prevent more than one request from asking for credentials at once",524],["// Override to allow orientations other than the default portrait orientation.",268]],"useCount":42906},{"word":"that","context":[["//It's possible that some of the covered area doesn't matter. If it all matters, unimportant is 0.",524],["// As always, ensure that operations take place on the socket thread...",486],["%  This file contains code that helps you get started on the",535],["// Dispose of any resources that can be recreated.",546],["//that don't exist and it should return undefined, not an exception",661],["do so for the templates in that tool.",798],["subreason:@\"read() operation on stream that is not readable\"",944],["* file that was distributed with this source code.",1024],["// Release any cached data, images, etc that aren't in use.",5076],["// Dispose of any resources that can be recreated.",61819]],"useCount":346176},{"word":"the","context":[["// Pass the selected object to the new view controller.",20206],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Put the code you want to measure the time of here.",15555],["// Get the new view controller using [segue destinationViewController].",19412],["// Pass the selected object to the new view controller.",20206],["// Do any additional setup after loading the view.",21076],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put setup code here. This method is called before the invocation of each test method in the class.",33003],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643],["// Put teardown code here. This method is called after the invocation of each test method in the class.",33643]],"useCount":3132079},{"word":"theEvent","context":[["- (void)mouseDown:(NSEvent *)theEvent",899],["[super mouseDown:theEvent];",533],["- (void)mouseDragged:(NSEvent *)theEvent",530],["[super keyDown:theEvent];",509],["EV_TRAILER (theEvent);",502],["- (void)mouseDown:(NSEvent *)theEvent {",454],["- (void)keyDown:(NSEvent *)theEvent",443],["- (void)mouseExited:(NSEvent *)theEvent",321],["- (void)mouseUp:(NSEvent *)theEvent",524],["- (void)mouseExited:(NSEvent*)theEvent {",320]],"useCount":44458},{"word":"then","context":[["// then release the  pre-masked content bitmap and the gradient bitmap",480],["// Previously, we were creating the image here, then caching the image, then setting the data.",371],["If the new path is HTTP:// etc, then punt and massage the code.",415],["// the spinner (usually for the first image) and then immediately remove it with a flash",451],["}] then:^id(id value) {",452],["// create the CGGradient and then release the gray color space",485],["* If `propertyName` is optional, then return `YES`, otherwise return `NO`.",578],["//then",628],["// then",1776],["then",9450]],"useCount":74302},{"word":"there","context":[["% This version is only used for back-ends for which there is no",303],["// We're not done and there's a set maxLength.",271],["// Start with super's key paths (if there are any)",877],["// This is called by +initialize so there is no need to worry",465],["// Different from resume - there's some information we can only update AFTER the app has popped to the foreground.",444],["// we need to, and then dump the entry from the cache if there was a problem.",371],["//Check if there are fragmens of saml in url, in this case there are a credential error",334],["//Check if there are fragmens of saml in url, in this case there are a credential error",334],["// In most cases if referenced object become 'nil' it mean what there is no more need in",273],["executionContext = context; //To ensure there is an execution context during _configure.",286]],"useCount":55500},{"word":"these","context":[["not agree with these terms, please do not use, install, modify or",1364],["//TODO: Should we remove these gracefully?",993],["describe(@\"these will pass\", ^{",699],["describe(@\"these will fail\", ^{",640],["% If you specify one of these (or both) the input data will be read from a *.mat",465],["constitutes acceptance of these terms.  If you do not agree with these terms,",454],["constitutes acceptance of these terms.  If you do not agree with these terms,",454],["// forward declare these",434],["//TODO: rework these to be more accurate and multi-device",418],["subject to these terms, Apple grants you a personal, non-exclusive",1432]],"useCount":28789},{"word":"this","context":[["// Replace this implementation with code to handle the error appropriately.",2559],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",3779],["distributed with this work for additional information",3509],[";;Per VHA Directive 10-93-142, this routine should not be modified.",1698],["* Retrieve the value of the \"Response\" output from an execution of this Choreo.",1828],["* TMBChoreographyDelegate protocol method - called when this Choreo's execution",1952],["* with this source distribution.",1955],[";;Per VHA Directive 2004-038, this routine should not be modified.",2012],["% --- Outputs from this function are returned to the command line.",2400],[";Per VHA Directive 10-93-142, this routine should not be modified.",2550]],"useCount":463779},{"word":"thread","context":[["//NOTE: this is called by ENSURE_UI_THREAD_WITH_OBJ and will always be on UI thread when we get here",450],["// by the queue processor). We need to seriously re-evaluate the memory model and thread",330],["*\tTODO: Investigate thread safety of this, or to moot it.",373],["[thread start];",377],["// main thread to the proxy",450],["// on the main UI thread",483],["// As always, ensure that operations take place on the socket thread...",486],["// Synchronize the cleanup call on the main thread in case",489],["// Synchronize the cleanup call on the main thread in case",589],["// which use the main thread only when necessary to reduce latency.",325]],"useCount":46799},{"word":"throw","context":[["@throw new_JavaIoIOException_init();",582],["@throw e;",2088],["@throw x;",596],["throw(ME);",605],["@throw nsex;",763],["@throw [NSException exceptionWithName:NSInvalidArgumentException",765],["throw('UnitTest:Fail');",893],["@throw exception;",1208],["@throw [NSException exceptionWithName:NSInternalInconsistencyException",1847],["@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT",540]],"useCount":41252},{"word":"time","context":[["#include <sys/time.h>",582],["//TODO: This is a temprorary workaround for the time being. We have to properly take care of [undefined] objects.",765],["// we attach the XHR bridge the first time we need a webview",451],["// In some circumstances this result can be replaced at an inconvenient time,",449],["// compile-time dependency on our sub module classes",445],["*\tIn theory, if two contexts are both using the proxy at the same time,",373],["// the task actually finishes at around the same time.",359],["xlabel('time');",348],["#include <time.h>",327],["// Put the code you want to measure the time of here.",15555]],"useCount":113460},{"word":"timeout","context":[["NSTimeInterval timeout;",461],["timeout:timeout",677],["timeout:timeout",677],["RELEASE_TO_NIL(timeout);",475],["timeout = t;",462],["// in the timeout queue until we're resumed",449],["if (timeout==nil)",449],["[timeout removeAllObjects];",449],["[timeout addObject:request];",449],["withTimeout:(NSTimeInterval)timeout",943]],"useCount":33340},{"word":"timer","context":[["BOOL running = (timer!=nil);",451],["//NOTE: for now i'm just making sure you have at least one frame loaded before starting the timer",451],["@property (nonatomic, strong) NSTimer *timer;",746],["timer = nil;",910],["if (timer!=nil)",934],["self.timer = nil;",1364],["RELEASE_TO_NIL(timer);",2004],["[self.timer invalidate];",2167],["[timer invalidate];",3957],["if (timer==nil)",451]],"useCount":48692},{"word":"title","context":[["_title = title;",1497],["if (title) {",986],["[button setTitle:title forState:UIControlStateNormal];",1060],["[title release];",1083],["title:(NSString *)title",1205],["title:(NSString *)title",1205],["return title;",1336],["NSString *title;",1366],["self.title = title;",1435],["self.title = title;",1435]],"useCount":181011},{"word":"titleLabel","context":[["self.titleLabel.textAlignment = NSTextAlignmentCenter;",992],["[self addSubview:titleLabel];",503],["self.titleLabel.text = title;",533],["titleLabel.textColor = [UIColor whiteColor];",568],["UILabel *titleLabel = [[UILabel alloc] init];",570],["[self addSubview:self.titleLabel];",646],["@property (nonatomic, strong) UILabel *titleLabel;",792],["@property (weak, nonatomic) IBOutlet UILabel *titleLabel;",819],["titleLabel.backgroundColor = [UIColor clearColor];",947],["titleLabel.textAlignment = NSTextAlignmentCenter;",971]],"useCount":42402},{"word":"tmp","context":[["[tmp release];",398],["return tmp;",619],["DL_FOREACH_SAFE( mouseDelegates_, entry, tmp ) {",169],["if (tmp)",171],["tmp = [];",188],["unknown_release(tmp);",192],["if ~isempty(tmp)",278],["clear tmp;",294],["clear tmp",306],["tListEntry *entry, *tmp;",360]],"useCount":46700},{"word":"to","context":[["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["//  furnished to do so, subject to the following conditions:",11359],["//  furnished to do so, subject to the following conditions:",11359],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070],["// furnished to do so, subject to the following conditions:",15183],["// furnished to do so, subject to the following conditions:",15183],["// Put the code you want to measure the time of here.",15555],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// Pass the selected object to the new view controller.",20206],["% eventdata  reserved - to be defined in a future version of MATLAB",47946]],"useCount":1570837},{"word":"token","context":[["// token+rule list labels",355],["NSString *token = [[[[deviceToken description] stringByReplacingOccurrencesOfString:@\"<\"withString:@\"\"]",363],["[[NSNotificationCenter defaultCenter] postNotificationName:CDVRemoteNotification object:token];",367],["NSString* token = [[[[deviceToken description]",368],["if (token) {",493],["static dispatch_once_t token;",575],["dispatch_once(&token, ^{",611],["return token;",642],["switch(parseState->token.type) {",734],["[self buildWithContext: theContext token: theToken];",910]],"useCount":50490},{"word":"toolbar","context":[["UIToolbar * toolBar = [navController toolbar];",418],["toolbar = nil;",359],["return toolbar!=nil;",447],["//TODO: If we're focused or the toolbar is otherwise onscreen, we need to let the root view controller know and update.",331],["-(id<TiToolbar>)toolbar",326],["toolbar = toolbar_;",326],["return [[toolbar retain] autorelease];",326],["return toolbar;",260],["[toolbar setDelegate:self];",252],["#import \"chrome/browser/ui/cocoa/toolbar/toolbar_controller.h\"",598]],"useCount":35100},{"word":"top","context":[["// the container sits on top of the image in case the first frame (via setUrl) is first",451],["NSInteger top = (TiDimensionIsAuto(topCap) || TiDimensionIsUndefined(topCap) || topCap.value == 0) ?",449],["-(UIImage *)loadImmediateStretchableImage:(NSURL *)url withLeftCap:(TiDimension)left topCap:(TiDimension)top",449],["CGFloat t = [TiUtils floatValue:@\"top\" properties:dict def:0];",418],["- (CGFloat)top {",396],["p { margin-top: 0 }",395],["// top",353],["topCapHeight:top] retain];",284],["y += view.top;",261],["image.topCap = top;",449]],"useCount":58409},{"word":"touch","context":[["touchOrigin = [touch locationInView:scrollView];",443],["for (UITouch* touch in touches)",903],["CGPoint point = [touch locationInView:self];",896],["if (touch == dragTouch)",886],["- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch",680],["- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {",673],["for (UITouch *touch in touches) {",636],["UITouch* touch = [[event allTouches] anyObject];",484],["UITouch* touch = [touches anyObject];",466],["UITouch *touch = [touches anyObject];",4194]],"useCount":42917},{"word":"touches","context":[["[super touchesEnded:touches withEvent:event];",2696],["UITouch *touch = [touches anyObject];",4194],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event",3008],["[super touchesBegan:touches withEvent:event];",2978],["[super touchesMoved:touches withEvent:event];",2226],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event",2060],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {",1797],["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event",1654],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {",1393],["- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event",1274]],"useCount":59091},{"word":"transform","context":[["CGAffineTransform transform = CGAffineTransformIdentity;",1333],["button.transform = CGAffineTransformIdentity;",1385],["transform = CGAffineTransformIdentity;",641],["transform = CGAffineTransformRotate(transform, M_PI_2);",658],["transform = CGAffineTransformRotate(transform, M_PI_2);",658],["transform = CGAffineTransformRotate(transform, M_PI);",766],["self.transform = CGAffineTransformIdentity;",1292],["transform = CGAffineTransformRotate(transform, M_PI);",766],["transform = CGAffineTransformScale(transform, -1, 1);",1138],["transform = CGAffineTransformScale(transform, -1, 1);",1138]],"useCount":80026},{"word":"true","context":[["\\\"exception\\\":true, \\",1300],["return true;",27913],["return true;",10744],["true",7119],["<font BOLD=\"true\" NAME=\"SansSerif\" SIZE=\"12\"/>",3006],["while (true)",2759],["<conditional_style ACTIVE=\"true\" STYLE_REF=\"Method\" LAST=\"false\"/>",2607],["while true",1955],["<conditional_style ACTIVE=\"true\" STYLE_REF=\"OptionalValue\" LAST=\"false\"/>",1854],["<richcontent TYPE=\"DETAILS\" HIDDEN=\"true\">",1531]],"useCount":198559},{"word":"try","context":[["@try",16237],["try {",2800],["try",60823],["@try {",29160],["try {",616],["try,",860],["@try{",947],["try",1173],["@try {",1913],["@try",2447]],"useCount":143253},{"word":"type","context":[["switch(type) {",1498],["switch (type) {",5168],["\\\"type\\\":\\\"structure\\\", \\",2638],["return type;",1142],["# type: scalar",1202],["_type = type;",1288],["switch type",1731],["\\\"type\\\":\\\"structure\\\",\\",2083],["[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];",2094],["switch (type)",2351]],"useCount":319687},{"word":"typedef","context":[["typedef double (*dIMP)(id, SEL, ...);",562],["typedef signed char BOOL;",364],["typedef struct {",403],["typedef enum",538],["typedef struct {",3179],["typedef enum {",3107],["typedef struct",602],["typedef float (*fIMP)(id, SEL, ...);",562],["typedef long (*lIMP)(id, SEL, ...);",562],["typedef char (*cIMP)(id, SEL, ...);",562]],"useCount":30493},{"word":"types","context":[["// There are 3 types of read packets:",276],["#error JSONKit requires the C 'int' and 'long long' types to be 32 and 64 bits respectively.",142],["#include <sys/types.h>",1568],["#import <sys/types.h>",636],["#include <sys/types.h>",406],["return types;",288],["// Other types match up as you'd expect.",232],["This method can be used to constrain different types of attributes across two views.",175],["Vector<String> types;",171],["return types;",153]],"useCount":28745},{"word":"u","context":[["return u;",243],["uname(&u);",523],["subreason:[NSString stringWithFormat:@\"Offset %d extends past data length %u\", offsetVal, [data length]]",460],["subreason:[NSString stringWithFormat:@\"Index %d out of bounds on buffer (length %u)\", index, [data length]]",460],["case 'u':",429],["if (!strcmp(u.machine, \"iPhone3,1\"))",418],["subreason:[NSString stringWithFormat:@\"Offset %d is past buffer bounds (length %u)\",offset,[data length]]",336],["else if (i < length && [sql characterAtIndex:i] == 'u') {",324],["struct utsname u;",534],["u = gp.X_u;",270]],"useCount":41212},{"word":"ui","context":[["#include \"chrome/browser/ui/cocoa/cocoa_profile_test.h\"",787],["#include \"chrome/browser/ui/tabs/tab_strip_model.h\"",818],["#import \"chrome/browser/ui/cocoa/cocoa_test_helper.h\"",891],["#include \"chrome/browser/ui/browser_window.h\"",1013],["#include \"ui/gfx/image/image.h\"",1269],["#import \"chrome/browser/ui/cocoa/browser_window_controller.h\"",1281],["#include \"ui/base/resource/resource_bundle.h\"",1618],["#include \"ui/base/l10n/l10n_util.h\"",1752],["#include \"chrome/browser/ui/browser.h\"",1825],["#include \"ui/base/l10n/l10n_util_mac.h\"",1868]],"useCount":108415},{"word":"uint32_t","context":[["uint32_t _has_storage_[1];",803],["fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))",627],["uint32_t val = [data intValue];",415],["NUMINT(sizeof(uint32_t)), NUMINT(TI_INT),",415],["uint32_t alpha = (bitmapInfo & kCGBitmapAlphaInfoMask);",260],["uint32_t intVal;",232],["uint32_t i;",232],["uint32_t tag = GPBWireFormatMakeTag(GPBFieldNumber(field), GPBWireFormatLengthDelimited);",216],["uint32_t flags;",204],["case sizeof(uint32_t):",176]],"useCount":30978},{"word":"unlock","context":[["[condition unlock];",2820],["[connectionsLock unlock];",1562],["[bandwidthThrottlingLock unlock];",1699],["[_lock unlock];",1706],["[sessionCredentialsLock unlock];",1736],["[condition unlock];",2900],["[[self cancelledLock] unlock];",3052],["[delegateAuthenticationLock unlock];",3144],["[self.lock unlock];",3394],["[lock unlock];",4175]],"useCount":53539},{"word":"unsigned","context":[["unsigned int i;",1361],["unsigned long long ull;",477],["- (unsigned long long)contentLength {",497],["unsigned long long length = 0;",509],["unsigned char result[16];",602],["unsigned int count = 0;",738],["unsigned int count;",832],["unsigned\ti;",883],["unsigned i;",1048],["unsigned char result[CC_MD5_DIGEST_LENGTH];",1270]],"useCount":140109},{"word":"until","context":[["// until the socket is closed, which fires the I/O condition signal.",243],["// It only waits until ONE context has signialed that it has shut down; then we proceed along our merry way.",226],["// It only waits until ONE context has signialed that it has shut down; then we proceed along our merry way.",243],["% handles    empty - handles not created until after all CreateFcns called",13063],["// in the timeout queue until we're resumed",449],["//I think we should instead have it that the proxy stays around until",432],["// this is only safe as long as the block until completion is YES.",334],["// Busy wait until the other thread finishes initializing this class",291],["// Call should block until we're listening or have an error",243],["// Don't switch threads until after the state check; this allows us to throw the exception on the right thread",243]],"useCount":32405},{"word":"up","context":[["// Set-up code here.",1664],["// Clean up",961],["* This is main kick off after the app inits, the views and Settings are setup here. (preferred - iOS4 and up)",603],["// Read type #3 - read up to a terminator",542],["// For now, do the sensible thing... only go up to the end.",476],["// do click 2x to scale it up so we have to check for this method",449],["[o forgetObjectForTiString:prop context:jsContext];\t//Clean up the old property.",433],["Free up as much memory as possible by purging cached data objects that can be recreated (or reloaded from disk) later.",422],["// app's Resources directory to speed up round-trips",418],["% Affiliations up to SeDuMi 1.02 (AUG1998):",402]],"useCount":78500},{"word":"update","context":[["-(void) update: (ccTime) t",828],["if(keyboardUIToolbar != nil){ //It already exists, update it.",331],["//TODO: If we're focused or the toolbar is otherwise onscreen, we need to let the root view controller know and update.",331],["[super update];",420],["-(void) update: (CCTime) t",435],["// Different from resume - there's some information we can only update AFTER the app has popped to the foreground.",444],["//TODO: If we have focus while this happens, we need to signal an update.",662],["- (void)update {",678],["- (void)update",783],["[self update];",2074]],"useCount":55635},{"word":"url","context":[["[url release];",1310],["ImageCacheEntry* image = [self entryForKey:url];",897],["if (!url) {",1397],["if (url) {",1419],["NSURLRequest *request = [NSURLRequest requestWithURL:url];",1556],["[[UIApplication sharedApplication] openURL:url];",1598],["NSURL *url = [NSURL URLWithString:urlString];",1976],["NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];",2229],["RELEASE_TO_NIL(url);",3694],["return url;",4163]],"useCount":221613},{"word":"use","context":[["Redistribution and use in source and binary forms, with or without modification,",2376],["% Redistribution and use in source and binary forms, with or without",2485],["* Redistribution and use in source and binary forms, with or without",2828],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",3027],["* Redistribution and use in source and binary forms, with or without",4482],["Redistribution and use in source and binary forms, with or without",5044],["// Release any cached data, images, etc that aren't in use.",5076],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",5995],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",10515],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",15070]],"useCount":187876},{"word":"used","context":[["% TORSCHE Scheduling Toolbox for Matlab can be used, copied",299],["% This version is only used for back-ends for which there is no",303],["// Uncomment to override the CDVCommandQueue used",1205],["// Uncomment to override the CDVCommandDelegateImpl used",1205],["* This method is used by `JSONModel`.",1156],["// create a 2 bit CGImage containing a gradient that will be used for masking the",482],["//Should be rare, but also useful if arguments are used improperly.",450],["// in another, the execution context should be used to resolve certain things like",450],["// For larger values of 's' (s >= 2.0), an approximation can be used: Three",408],["*  @param calendar NSCalendar - The calendar to be used in the calculation",396]],"useCount":61976},{"word":"user","context":[["if (user && pass) {",435],["// Update the user interface for the detail item.",662],["% handles    structure with handles and user data (see GUIDATA)",35747],["return user;",801],["RKTestUser *user = [RKTestUser user];",768],["RKTestUser *user = [RKTestUser user];",768],["if (user) {",679],["_user = user;",440],["// allow the user to overwrite the scale (usually if local)",451],["// and we want to start the spinner to let the user know that we're still loading. we",451]],"useCount":132956},{"word":"userInfo","context":[["NSDictionary *userInfo = [NSDictionary dictionaryWithObject:errMsg forKey:NSLocalizedDescriptionKey];",1235],["error = [NSError errorWithDomain:@\"YOUR_ERROR_DOMAIN\" code:9999 userInfo:dict];",1279],["userInfo:@{",1369],["NSDictionary *userInfo = @{",1784],["userInfo:userInfo];",3802],["userInfo:userInfo];",3802],["NSLog(@\"Unresolved error %@, %@\", error, [error userInfo]);",5778],["userInfo:nil",6499],["userInfo:nil];",10904],["userInfo:nil];",1197]],"useCount":148529},{"word":"using","context":[["//Error handling using HTTP status codes",583],["using namespace WebCore;",1535],["using namespace Cedar::Matchers;",1144],["// Implement loadView to create a view hierarchy programmatically, without using a nib.",1112],["using content::WebContents;",1066],["// Get the new view controller using [segue destinationViewController].",19412],["using namespace std;",998],["using namespace Cedar::Doubles;",946],["This code was generated by Vipr (https://github.com/microsoft/vipr) using",798],["* This method will be called when logging model object using `NSLog`.",565]],"useCount":90339},{"word":"v","context":[["[o setValue:v forKey:name];",449],["memcpy(&(val.sf.v), (void*)data+position, sizeof(val.sf.v));",464],["memcpy(&(val.sf.v), (void*)data+position, sizeof(val.sf.v));",464],["case 'v':",714],["[ n, x, y, z, w ] = gen_oh ( 6, n, a, b, v, x, y, z, w );",723],["[v removeFromSuperview];",807],["memcpy(bytes+position, &(val.sf.v), size);",830],["TiViewProxy *p =(TiViewProxy*) v.proxy;",441],["TiUIView *v = (TiUIView*)item.view;",441],["return v;",1270]],"useCount":87880},{"word":"val","context":[["vlc_value_t val;",637],["val.sf.v = CFSwapInt32HostToLittle(val.sf.v);",415],["memcpy(&(val.sf.v), (void*)data+position, sizeof(val.sf.v));",464],["memcpy(&(val.sf.v), (void*)data+position, sizeof(val.sf.v));",464],["val = [];",566],["val = 0;",572],["memcpy(bytes+position, &(val.sf.v), size);",830],["return val;",1152],["memcpy(bytes+position, &val, size);",1245],["} val;",1313]],"useCount":73157},{"word":"valid","context":[["% check if the input cfg is valid for this function",579],["if(!valid) {",644],["valid = 0;",698],["BOOL valid = YES;",890],["return valid;",1181],["valid = NO;",1232],["* Initialize the Choreo with a valid session",1952],["* @param session - A TMBTembooSession containing valid Temboo Application Key credentials",1952],["* @throws TMBExceptionNotFound if output does not exist. (Note an empty response is considered valid)",2572],["% check if the input data is valid for this function",560]],"useCount":47039},{"word":"value","context":[["} reverseBlock:^NSString *(NSNumber *value) {",2217],["switch ([value integerValue]) {",2228],["if ([value isKindOfClass:[NSDictionary class]])",2268],["if (value)",2517],["return value;",13193],["return value;",2519],["TLConstructedValue value;",3305],["if (value) {",3747],["id value = [properties objectForKey:name];",3346],["if ([value isKindOfClass:[NSString class]])",3488]],"useCount":673358},{"word":"valueForKey","context":[["NSUndoManager *uM = [self valueForKey:@\"undoManager\"];",468],["if ((defURL == nil) && ![TiUtils boolValue:[self.proxy valueForKey:@\"preventDefaultImage\"] def:NO])",451],["KrollCallback* callback = [info valueForKey:@\"callback\"];",1458],["TiColor *bgcolor = [TiUtils colorValue:[self.proxy valueForKey:@\"backgroundColor\"]];",469],["int size = [TiUtils intValue:[info valueForKey:@\"chunkSize\"]];",472],["id<TiStreamInternal> stream = [info valueForKey:@\"destination\"];",486],["id value = [target valueForKey:key];",578],["if (![TiUtils boolValue:[self valueForKey:@\"enabled\"] def:YES])",636],["-(id)valueForKey:(NSString *)key",653],["if ([TiUtils boolValue:[[self proxy] valueForKey:@\"hires\"]])",689]],"useCount":70395},{"word":"values","context":[["NSMutableArray *values = [NSMutableArray array];",635],["^(CALayer *obj, CGFloat values[]) {",645],["principles) their symbols represent their values in concentration units",726],["return values;",751],["The species values are given as amounts of substance to make it easier to",774],["- (void)TLfillFieldsWithValues:(std::map<int32_t, TLConstructedValue> *)__unused values",1167],["- (void)TLfillFieldsWithValues:(std::map<int32_t, TLConstructedValue> *)values",1205],["% Initialize some useful values",1429],["% Expected values",2934],["% Actual values",3073]],"useCount":104519},{"word":"var","context":[["* var button = facebook.createLoginButton({bottom:10});",247],["var = varargin{1};",215],["SETIOF ;  ** Set device control var's",312],["if exist('template','var') ~= 1",212],["P(var);",326],["\"var xhr=new Ti.App._xhr();xhr.open('GET',url,false);xhr.send()}catch(X){}};\"",451],["\"for(var prop in object){var value=object[prop];if(value!==undefined){value=Ti.App._JSON(value,bridge)}\"",451],["\"for(var prop in object){var value=object[prop];if(value!==undefined){value=Ti.App._JSON(value,bridge)}\"",451],["* var facebook = require('facebook');",3920],["## If the first argument @var{hax} is an axes handle, then plot into this axis,",191]],"useCount":28253},{"word":"varargin","context":[["if nargin && ischar(varargin{1})",2479],["gui_State.gui_Callback = str2func(varargin{1});",2598],["gui_mainfcn(gui_State, varargin{:});",2597],["[varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});",2579],["for i = 1:length(varargin)",496],["p.parse(varargin{:});",665],["for i=1:length(varargin)",704],["if isempty(varargin)",808],["varargin(1) = [];",868],["if ~isempty(varargin)",1371]],"useCount":95464},{"word":"vc","context":[["[self.navigationController pushViewController:vc animated:YES];",4916],["return vc;",1298],["UIViewController *vc = [[[[UIApplication sharedApplication] delegate] window] rootViewController];",1223],["foundElement = [self findSubviewInView:vc.view matching:^BOOL(UIView *view) {",1205],["[self presentViewController:vc animated:YES completion:nil];",598],["vc.delegate = self;",485],["if (vc) {",313],["self.window.rootViewController = vc;",289],["UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];",286],["ViewController *vc = theViewController;",256]],"useCount":29350},{"word":"vector","context":[["%  regression theta vector for the i-th class. You should set p to a vector",175],["// create the start and end points for the gradient vector (straight down)",486],["% Instructions: Perform a single gradient step on the parameter vector",340],["#import <vector>",311],["% RETURN param : vector of parameters extracted from the kernel. If",194],["std::vector<LocationBarDecoration*> decorations;",192],["std::vector<NSRect> decorationFrames;",190],["%  p = PREDICTONEVSALL(all_theta, X) will return a vector of predictions",178],["%  regression theta vector for the i-th class. You should set p to a vector",175],["#include <vector>",1248]],"useCount":45053},{"word":"version","context":[["if (version == 1)",383],["later version.",370],["// for checking version",418],["//  Get the latest version from here:",445],[";;  ;;ORDER CHECK EXPERT version 1.01 released OCT 29,1998",574],["return version;",608],["%get level and version and check the input arguments are appropriate",816],["% version.",976],["% information about SBML, and the latest version of SBMLToolbox.",1262],["% eventdata  reserved - to be defined in a future version of MATLAB",47946]],"useCount":111484},{"word":"view","context":[["// Pass the selected object to the new view controller.",20206],["#pragma mark - Table view data source",12481],["// Do any additional setup after loading the view.",21076],["// Configure the view for the selected state",8899],["// Do any additional setup after loading the view from its nib.",7268],["return view;",7230],["self.view.backgroundColor = [UIColor whiteColor];",6618],["// Get the new view controller using [segue destinationViewController].",19412],["// Do any additional setup after loading the view, typically from a nib.",17756],["// Release any retained subviews of the main view.",6136]],"useCount":817370},{"word":"viewController","context":[["return viewController;",1397],["self.window.rootViewController = self.viewController;",2537],["[self.navigationController pushViewController:viewController animated:YES];",1658],["[super pushViewController:viewController animated:animated];",835],["self.viewController = [[[MainViewController alloc] init] autorelease];",569],["@synthesize window, viewController;",584],["self.viewController = [[MainViewController alloc] init];",604],["viewController.hidesBottomBarWhenPushed = YES;",629],["@synthesize viewController = _viewController;",650],["[viewController release];",824]],"useCount":57671},{"word":"viewDidAppear","context":[["[super viewDidAppear:animated];",445],["- (void) viewDidAppear:(BOOL)animated",464],["- (void) viewDidAppear:(BOOL)animated {",475],["-(void)viewDidAppear:(BOOL)animated {",607],["- (void)viewDidAppear:(BOOL)animated{",896],["-(void)viewDidAppear:(BOOL)animated{",1027],["-(void)viewDidAppear:(BOOL)animated",1189],["- (void)viewDidAppear:(BOOL)animated {",6376],["- (void)viewDidAppear:(BOOL)animated",7408],["[super viewDidAppear:animated];",15418]],"useCount":38211},{"word":"viewDidLoad","context":[["- (void)viewDidLoad",54563],["- (void)viewDidLoad {",76236],["[super viewDidLoad];",134546],["- (void)viewDidLoad",1219],["[super viewDidLoad];",2170],["// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.",2160],["- (void)viewDidLoad{",1276],["-(void)viewDidLoad",1116],["- (void)viewDidLoad {",829],["- (void) viewDidLoad",808]],"useCount":280855},{"word":"viewWillAppear","context":[["- (void)viewWillAppear:(BOOL)animated {",11048],["- (void)viewWillAppear:(BOOL)animated",12501],["[super viewWillAppear:animated];",26824],["- (void) viewWillAppear:(BOOL)animated",747],["[super viewWillAppear:YES];",774],["[super viewWillAppear:animated];",821],["-(void)viewWillAppear:(BOOL)animated {",837],["- (void)viewWillAppear:(BOOL)animated{",1835],["-(void)viewWillAppear:(BOOL)animated{",1874],["-(void)viewWillAppear:(BOOL)animated",2591]],"useCount":66644},{"word":"viewWillDisappear","context":[["[super viewWillDisappear:animated];",496],["- (void)viewWillDisappear:(BOOL)animated",334],["- (void) viewWillDisappear:(BOOL)animated",340],["-(void)viewWillDisappear:(BOOL)animated {",382],["-(void)viewWillDisappear:(BOOL)animated{",665],["- (void)viewWillDisappear:(BOOL)animated{",882],["-(void)viewWillDisappear:(BOOL)animated",1119],["- (void)viewWillDisappear:(BOOL)animated {",5331],["- (void)viewWillDisappear:(BOOL)animated",6063],["[super viewWillDisappear:animated];",12778]],"useCount":31797},{"word":"views","context":[["views:views];",331],["views:viewsDictionary]];",284],["metrics:nil views:views]];",297],["metrics:nil views:views]];",297],["views:viewsDictionary];",308],["views:views];",331],["*\tIn views where the order in which keys are applied matter (I'm looking at you, TableView), this should be",450],["* This is main kick off after the app inits, the views and Settings are setup here. (preferred - iOS4 and up)",603],["views:views]];",3617],["views:views]];",3617]],"useCount":39988},{"word":"visible","context":[["if (self.visible) {",243],["'visible','off', ...",471],["self.visible = NO;",406],["// This method is called when watch view controller is no longer visible",405],["// This method is called when watch view controller is about to be visible to user",397],["//Okay, the scrollVisibleRect.size now represents the actually visible area.",350],["if (visible) {",341],["self.visible = YES;",303],["[self.proxy replaceValue:NUMBOOL(NO) forKey:@\"visible\" notification:YES];",248],["%! hf = figure (\"visible\", \"off\");",247]],"useCount":36057},{"word":"void","context":[["- (void)dealloc",48653],["- (void)didReceiveMemoryWarning {",44282],["- (void)dealloc {",43504],["- (void)didReceiveMemoryWarning",32640],["- (void)setUp {",28019],["- (void)tearDown {",26315],["- (void)applicationDidBecomeActive:(UIApplication *)application {",21209],["- (void)applicationWillTerminate:(UIApplication *)application {",21193],["- (void)viewDidLoad {",76236],["- (void)viewDidLoad",54563]],"useCount":3120574},{"word":"w","context":[["%   gradient of the cost w.r.t. to the parameters.",378],["warning(w);",378],["pos = [x y w h];",848],["[ n, x, y, z, w ] = gen_oh ( 6, n, a, b, v, x, y, z, w );",723],["[ n, x, y, z, w ] = gen_oh ( 6, n, a, b, v, x, y, z, w );",723],["%               derivatives of the cost w.r.t. each parameter in theta",528],["set(gcf,'Color','w')",469],["CGFloat w = [TiUtils floatValue:@\"width\" properties:dict def:0];",418],["freopen([logPath cStringUsingEncoding:NSUTF8StringEncoding],\"w+\",stderr);",439],["return CGRectMake(x, y, w, h);",466]],"useCount":76455},{"word":"want","context":[["//When a null, we want to write a nil.",900],["// View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),",602],["* Loading JavaScript code - uncomment the one you want.",1049],["// In a story board-based application, you will often want to do a little preparation before navigation",497],["// and we want to start the spinner to let the user know that we're still loading. we",451],["// Return NO if you do not want the item to be re-orderable.",4677],["// Return NO if you do not want the specified item to be editable.",5341],["// Put the code you want to measure the time of here.",15555],["// check to see if the background is a dark color and if so, we want to",469],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358]],"useCount":81876},{"word":"warning","context":[["#pragma clang diagnostic warning \"-Wimplicit-retain-self\"",612],["warning(w);",378],["#warning Incomplete method implementation.",592],["warning off",586],["#warning Potentially incomplete method implementation.",569],["#warning Incomplete implementation, return the number of sections",485],["#warning Incomplete implementation, return the number of rows",483],["warning off;",440],["warning on",421],["#warning This file must be compiled with ARC. Use -fobjc-arc flag (or convert project to ARC).",1664]],"useCount":32834},{"word":"was","context":[["NSString *failureReason = @\"There was an error creating or loading the application's saved data.\";",1286],["// That is, socket was disconnected, or connection has already timed out.",480],["Check the error message to determine what the actual problem was.",742],["**NOTE** This code was generated by a tool and will occasionally be",798],["This code was generated by Vipr (https://github.com/microsoft/vipr) using",798],["*     This code was generated by a tool.",857],["* file that was distributed with this source code.",1024],["// A good bit of this code was derived from the Three20 project",1323],["* (delegate) which was specified as when the choreo execution was initiated.",1952],["* (delegate) which was specified as when the choreo execution was initiated.",1952]],"useCount":78914},{"word":"we","context":[["// this happens while we are running ( in the background, or from within our own app )",597],["//NOTE: we need to return nil here since in JS you can ask for properties",661],["//TODO: If we have focus while this happens, we need to signal an update.",662],["//TODO: If we have focus while this happens, we need to signal an update.",662],["// For now, we're shortcutting to suppress false warnings.",573],["//TODO: You know, we can probably nip this in the bud and do this at a lower level,",864],["//When a null, we want to write a nil.",900],["//TODO: Should we remove these gracefully?",993],["// Have to autorelease because we need to hold onto it for throwing the exception",1215],["// Report any error we got.",1290]],"useCount":398074},{"word":"weak","context":[["@property (nonatomic, weak) UIScrollView *scrollView;",365],["@property (weak, nonatomic) IBOutlet UICollectionView *collectionView;",390],["#pragma clang diagnostic ignored \"-Wreceiver-is-weak\"",421],["@property (weak) IBOutlet NSWindow *window;",434],["@property (weak, nonatomic) IBOutlet UIWebView *webView;",483],["@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;",668],["@property (weak, nonatomic) IBOutlet UILabel *nameLabel;",711],["@property (weak, nonatomic) IBOutlet UILabel *titleLabel;",819],["@property (weak, nonatomic) IBOutlet UIImageView *imageView;",1017],["@property (weak, nonatomic) IBOutlet UITableView *tableView;",1814]],"useCount":42203},{"word":"weakSelf","context":[["__weak typeof(self)weakSelf = self;",1009],["__weak typeof(self) weakSelf = self;",12163],["__weak __typeof(self) weakSelf = self;",1821],["[weakSelf.tableView reloadData];",1457],["__weak __typeof(self)weakSelf = self;",1351],["return weakSelf;",1022],["__strong typeof(weakSelf) strongSelf = weakSelf;",1024],["__strong typeof(weakSelf) strongSelf = weakSelf;",1024],["__strong __typeof(weakSelf)strongSelf = weakSelf;",1098],["__strong __typeof(weakSelf)strongSelf = weakSelf;",1098]],"useCount":79667},{"word":"webView","context":[["- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error {",828],["self.webView.delegate = self;",923],["- (void)webViewDidFinishLoad:(UIWebView *)webView",1662],["- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error",1268],["- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error",1268],["- (void)webViewDidFinishLoad:(UIWebView *)webView {",1242],["[self.view addSubview:self.webView];",762],["- (void)webViewDidStartLoad:(UIWebView *)webView",1207],["[self.webView loadRequest:request];",1069],["- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error {",828]],"useCount":72881},{"word":"webview","context":[["[[self webview] setScalesPageToFit:YES];",1607],["[webview stopLoading];",919],["[webview setBounds:oldBounds];",902],["CGRect oldBounds = [[self webview] bounds];",902],["[[self webview] setScalesPageToFit:NO];",648],["webview.delegate = self;",506],["webview.opaque = NO;",462],["if (webview!=nil)",2006],["webview.delegate = nil;",458],["[webview goForward];",457]],"useCount":31569},{"word":"when","context":[["// when",1584],["* TMBChoreographyDelegate protocol method - called when this Choreo's execution",1952],["Called when the application is about to terminate.",1223],["//when",620],["* This method will be called when logging model object using `NSLog`.",565],["// resume image loader when we're done scrolling",561],["// TODO: Put this in the write()/read() wrappers when they're being called consistently, blah blah blah",486],["* (delegate) which was specified as when the choreo execution was initiated.",1952],["// TODO: Codify in read() and write() when we have every method calling the wrappers... like it should.",474],["// In UI tests it is usually best to stop immediately when a failure occurs.",4667]],"useCount":132160},{"word":"where","context":[["// Webview appears to have an interesting quirk where the web content is always scaled/sized to just barely",254],["// uri is optional but we point it to where we loaded it",244],["% where:",216],["// Handle the degenerate case (supported by MW) where we're loading",211],["% The command 'cvx_where' will show where this file is located.",1182],["// This method is only used on the iPhone simulator, where normal extended attributes are broken.",260],["// special case where we're asking for Default.png and it's in Bundle not path",425],["*\tIn views where the order in which keys are applied matter (I'm looking at you, TableView), this should be",450],["where they appear in expressions.",726],["% where",1191]],"useCount":36225},{"word":"which","context":[["*  an array of which keys go first, and in what order. Otherwise, this is nil.",450],["// representation which this will allow. the resulting value should not be",450],["* (delegate) which was specified as when the choreo execution was initiated.",1952],[";; | medical device under 21CFR820, the use of which is considered |",781],["// NOTE: To customize the view's frame size (which defaults to full screen), override",536],["// but after we've detached our view.  In which case, we need to just ignore this",451],["// use a placeholder image - which the dev can specify with the",451],["// look for our alpha view which is the placeholder layer",451],["*\tIn views where the order in which keys are applied matter (I'm looking at you, TableView), this should be",450],["// the execution context is the context which is executing against the context when",450]],"useCount":88418},{"word":"while","context":[["while ( fromBytes < lastSample ) {",1404],["while (true)",2759],["while (YES) {",2482],["while true",1955],["while ([rs next]) {",1856],["} while (NO);",1667],["while (1) {",1558],["while ([date timeIntervalSinceNow] > 0 && !foundElement && !redboxError) {",1211],["while (true) {",1122],["while 1",2809]],"useCount":146324},{"word":"white","context":[["// show the white indicator instead",469],["set(hObject,'BackgroundColor','white');",15030],["% Hint: edit controls usually have a white background on Windows.",8913],["% Hint: popupmenu controls usually have a white background on Windows.",2084],["% Hint: listbox controls usually have a white background on Windows.",620],["// gradient is always black-white and the mask must be in the gray colorspace",478],["CGContextSetRGBFillColor(context, 1.0f, 1.0f, 1.0f, 1.0f); // white",218],["CGFloat saturation = ( arc4random() % 128 / 256.0 ) + 0.5;  //  0.5 to 1.0, away from white",187],["'Backgroundcolor','white',...",178],["'BackgroundColor','white',...",171]],"useCount":36616},{"word":"whiteColor","context":[["titleLabel.textColor = [UIColor whiteColor];",568],["self.window.backgroundColor = [UIColor whiteColor];",5104],["self.collectionView.backgroundColor = [UIColor whiteColor];",598],["[[NSColor whiteColor] set];",710],["cell.textLabel.textColor = [UIColor whiteColor];",761],["cell.backgroundColor = [UIColor whiteColor];",881],["return [UIColor whiteColor];",1081],["label.textColor = [UIColor whiteColor];",1656],["self.view.backgroundColor = [UIColor whiteColor];",6618],["self.backgroundColor = [UIColor whiteColor];",3517]],"useCount":60632},{"word":"width","context":[["autoWidth = imageToUse.size.width;",1254],["return self.frame.size.width;",1918],["frame.size.width = width;",1471],["frame.size.width = width;",1471],["autoWidth = fullSize.width;",1324],["CGFloat pageWidth = scrollView.frame.size.width;",1083],["width,",1028],["[{width:30em,margin: 1em auto}|  *Reaction*  |  *Rate*  |",1024],["- (CGFloat)width",896],["- (void)setWidth:(CGFloat)width",737]],"useCount":428505},{"word":"will","context":[["// Put teardown code here; it will be run once, after the last test case.",574],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["% The command 'cvx_where' will show where this file is located.",1182],["// all plugins will get the notification, and their handlers will be called",587],["// all plugins will get the notification, and their handlers will be called",587],["// DO NOT MODIFY!! Modifications will be overwritten.",633],["describe(@\"these will fail\", ^{",640],["describe(@\"these will pass\", ^{",699],["overwritten. We welcome comments and issues regarding this code; they will be",798],["**NOTE** This code was generated by a tool and will occasionally be",798]],"useCount":177152},{"word":"window","context":[["[window makeKeyAndVisible];",1788],["self.window.rootViewController = rootViewController;",1639],["[window release];",1658],["@synthesize window;",2125],["@synthesize window = _window;",2241],["self.window.rootViewController = self.viewController;",2537],["self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];",2913],["self.window.backgroundColor = [UIColor whiteColor];",5104],["self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",8301],["[self.window makeKeyAndVisible];",15126]],"useCount":360662},{"word":"with","context":[["distributed with this work for additional information",3509],["Redistribution and use in source and binary forms, with or without modification,",2376],["% Redistribution and use in source and binary forms, with or without",2485],["// Replace this implementation with code to handle the error appropriately.",2559],["* Redistribution and use in source and binary forms, with or without",2828],["*    documentation and/or other materials provided with the distribution.",2906],["## along with Octave; see the file COPYING.  If not, see",3037],["* Redistribution and use in source and binary forms, with or without",4482],["Redistribution and use in source and binary forms, with or without",5044],["% handles    structure with handles and user data (see GUIDATA)",35747]],"useCount":345404},{"word":"withEvent","context":[["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event",3008],["[super touchesCancelled:touches withEvent:event];",1121],["[super touchesBegan:touches withEvent:event];",2978],["[super touchesEnded:touches withEvent:event];",2696],["[super touchesMoved:touches withEvent:event];",2226],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event",2060],["- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {",1797],["- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event",1654],["- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {",1393],["- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event",1274]],"useCount":61587},{"word":"withObject","context":[["[self performSelectorInBackground:@selector(performInvocation:) withObject:invoke];",944],["[target performSelector:sel withObject:firstarg withObject:secondarg];",900],["[self _fireEventToListener:@\"write\" withObject:event listener:callback thisObject:nil];",962],["[self _fireEventToListener:@\"read\" withObject:event listener:callback thisObject:nil];",1205],["[invocation performSelector:@selector(invoke) onThread:socketThread withObject:nil waitUntilDone:NO];",1215],["[module _fireEventToListener:@\"result\" withObject:event listener:callback thisObject:nil];",1222],["withObject:nil",1280],["[self _fireEventToListener:@\"pump\" withObject:event listener:callback thisObject:nil];",1290],["[self _fireEventToListener:@\"writeToStream\" withObject:event listener:callback thisObject:nil];",1661],["withObject:nil",2778]],"useCount":115492},{"word":"withString","context":[["withString:@\"\"];",746],["NSString *token = [[[[deviceToken description] stringByReplacingOccurrencesOfString:@\"<\"withString:@\"\"]",363],["appurlstr = [appurlstr stringByReplacingOccurrencesOfString:@\".\" withString:@\"_\"];",417],["return [[s stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"] floatValue];",418],["NSString *s = [(NSString*) value stringByReplacingOccurrencesOfString:@\"px\" withString:@\"\"];",418],["withString:@\"\"",442],["moduleName_ = [moduleName_ stringByReplacingOccurrencesOfString:@\"Module\" withString:@\"\"];",445],["stringByReplacingOccurrencesOfString: @\" \" withString: @\"\"];",554],["[resourcePath replaceCharactersInRange: [resourcePath rangeOfString:@\".{format}\"] withString:@\".json\"];",561],["stringByReplacingOccurrencesOfString:@\">\" withString:@\"\"]",651]],"useCount":32646},{"word":"without","context":[["//  Redistribution and use in source and binary forms, with or without",1673],["* Redistribution and use in source and binary forms, with or without",2828],["* Redistribution and use in source and binary forms, with or without",4482],["% Redistribution and use in source and binary forms, with or without",2485],["Redistribution and use in source and binary forms, with or without",5044],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["Redistribution and use in source and binary forms, with or without modification,",2376],["// Redistribution and use in source and binary forms, with or without",1714],["without modifications, you must retain this notice and the following",1687],["// Redistribution and use in source and binary forms, with or without modification,",1314]],"useCount":68274},{"word":"work","context":[["distributed with this work for additional information",3509],["// Do the work associated with the task.",229],["// Do the work associated with the task.",245],["#pragma mark Listener work",248],["% referenced and attributed as such. The original author maintains the right to be solely associated with this work.",253],["%   If you modify MATPOWER, or any covered work, to interface with",260],["// Ok, that didn't work, let's try the keychain",263],["// NOTE: we must encode each individual part for the to successfully work",418],["// using categories with static libraries don't seem to work",444],["* distributed with this work for additional information",546]],"useCount":28667},{"word":"write","context":[["//When a null, we want to write a nil.",900],["[self _fireEventToListener:@\"write\" withObject:event listener:callback thisObject:nil];",962],["- (void) write: (id <TProtocol>) outProtocol {",2093],["- (void) write: (id <TProtocol>) outProtocol;",1087],["[result write: outProtocol];",468],["// TODO: Codify in read() and write() when we have every method calling the wrappers... like it should.",474],["// TODO: Put this in the write()/read() wrappers when they're being called consistently, blah blah blah",486],["subreason:@\"Attempt to write from closed/nil data stream\"",711],["* along with this program; see the file COPYING.  If not, write to",914],["[__success write: outProtocol];",364]],"useCount":39896},{"word":"www","context":[["% See http://www.maths.ox.ac.uk/chebfun/ for Chebfun information.",712],["//\thttp://www.bee-framework.com",723],["%     Author: Tom Doel, 2012.  www.tomdoel.com",734],["* or visit www.oracle.com if you need additional information or have any",772],["//\thttp://www.samurai-framework.com",835],["http://www.cocos2d-x.org",858],["% This file is part of FieldTrip, see http://www.fieldtriptoolbox.org",1190],["* cocos2d for iPhone: http://www.cocos2d-iphone.org",1858],["% This file is part of FieldTrip, see http://www.ru.nl/neuroimaging/fieldtrip",4383],["% See http://www.chebfun.org/ for Chebfun information.",4660]],"useCount":59114},{"word":"x","context":[["return x;",929],["frame.origin.x = x;",1329],["frame.origin.x = x;",1329],["return self.center.x;",1260],["x = 0;",1050],["x = x(:);",881],["x = x(:);",881],["http://www.cocos2d-x.org",858],["pos = [x y w h];",848],["return self.frame.origin.x;",2034]],"useCount":526224},{"word":"xlabel","context":[["xlabel('Time');",935],["xlabel('time');",348],["xlabel('Location','fontName','Times','fontSize',14);",354],["xlabel('Time [s]');",371],["xlabel('Time [s]')",388],["xlabel('X','FontSize',fontSize); ylabel('Y','FontSize',fontSize); zlabel('Z','FontSize',fontSize);",400],["xlabel('x')",461],["xlabel('x');",578],["xlabel('n (samples)'); ylabel('Amplitude');",654],["xlabel('Time (s)');",821]],"useCount":34467},{"word":"xx","context":[["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858],["xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx,",1858]],"useCount":43686},{"word":"y","context":[["return self.frame.origin.y;",2046],["m = length(y); % number of training examples",1512],["frame.origin.y = y;",1339],["frame.origin.y = y;",1339],["return self.center.y;",1249],["frame.origin.y = 0;",1153],["y = 0;",936],["pos = [x y w h];",848],["CGFloat y = 0;",819],["y = x;",817]],"useCount":403198},{"word":"you","context":[["// Only override drawRect: if you perform custom drawing.",7715],["addressed in the generation tool. If you wish to submit pull requests, please",798],["* Loading JavaScript code - uncomment the one you want.",1049],["* (you can get this by typing `ifconfig` into the terminal and selecting the",1052],["subject to these terms, Apple grants you a personal, non-exclusive",1432],["without modifications, you must retain this notice and the following",1687],["// Return NO if you do not want the item to be re-orderable.",4677],["// In a storyboard-based application, you will often want to do a little preparation before navigation",19358],["// Put the code you want to measure the time of here.",15555],["// Return NO if you do not want the specified item to be editable.",5341]],"useCount":141550},{"word":"your","context":[["//  to delete and recreate this implementation file for your updated model.",841],["* WARNING: This is generated code. Modify at your own risk and without support.",17152],["// Use XCTAssert and related functions to verify your tests produce the correct results.",10031],["In consideration of your agreement to abide by the following terms, and",1689],["// Insert code here to initialize your application",1371],["terms, and your use, installation, modification or redistribution of",1364],["Inc. (\"Apple\") in consideration of your agreement to the following",1363],["* `inet` value under `en0:`) and make sure your computer and iOS device are",1052],["* To run on device, change `localhost` to the IP address of your computer",1052],["* WARNING: This is generated code. Modify at your own risk and without support.",938]],"useCount":69756},{"word":"z","context":[["[ n, x, y, z, w ] = gen_oh ( 4, n, a, b, v, x, y, z, w );",366],["NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\";",309],["+ (id) allocWithZone: (NSZone*)z",344],["z = 10;",5892],["e = z + 10",5887],["[ n, x, y, z, w ] = gen_oh ( 6, n, a, b, v, x, y, z, w );",723],["[ n, x, y, z, w ] = gen_oh ( 6, n, a, b, v, x, y, z, w );",723],["z = A*PEAKHEIGHTS;",384],["err = norm(z-y');",384],["[ n, x, y, z, w ] = gen_oh ( 4, n, a, b, v, x, y, z, w );",366]],"useCount":63779},{"word":"zeros","context":[["J_history = zeros(num_iters, 1);",371],["coefs = zeros(1,height*width);",377],["grad = zeros(size(theta));",668],["S = bin2str(zeros(1,n));",214],["y = zeros(size(x));",256],["tmp2=zeros(4,4*narrows); tmp2(:)=tmp1(:);",264],["g = zeros(size(z));",286],["T = reshape(zeros(1, 4), 2, 2);",305],["imgExpctd = zeros(height,width);",332],["p = zeros(size(X, 1), 1);",375]],"useCount":55279},{"word":"zone","context":[["- (id)mutableCopyWithZone:(NSZone *)zone",435],["+ (id)allocWithZone:(NSZone *)zone {",465],["-(id)copyWithZone:(NSZone *)zone {",513],["-(id)copyWithZone:(NSZone *)zone",569],["- (instancetype)copyWithZone:(NSZone *)zone",584],["+ (id)allocWithZone:(NSZone *)zone",756],["-(id) copyWithZone: (NSZone*) zone",1561],["- (instancetype)copyWithZone:(NSZone *)zone {",2231],["- (id)copyWithZone:(NSZone *)zone",4013],["- (id)copyWithZone:(NSZone *)zone {",5925]],"useCount":43337},{"word":"~","context":[["S $ZE=\"0,\"_$ZPOS_\",\"_\"%PSL-E-DBFILER,\"_$translate(MSG,\",\",\"~\"),$EC=\",U1001,\"",265],["numel(hfile) ~= 1 || ...",342],["const CFStringRef charactersToNotEscape = CFSTR(\":[]@!$' ()*+,;\\\"<>%{}|\\\\^~`#\");",415],["if status ~= 0",420],["if ( status ~= 0 ), error ( mexnc('strerror',status) ), end",427],["if ( status ~= 0 )",430],["return suggestedResizing & ~(UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight);",447],["[pathstr, ~, ~] = fileparts(mfilename('fullpath'));",2087],["[pathstr, ~, ~] = fileparts(mfilename('fullpath'));",2087],["if nargin ~= 2",306]],"useCount":52549},{"word":"~isempty","context":[["if ~isempty(data)",558],["if ~isempty(ind)",553],["if ~isempty(idx)",552],["if ~isempty(index)",390],["if ~isempty(ii),",342],["if ~isempty(s)",323],["if ~isempty(i)",313],["if ~isempty(x)",306],["if ~isempty(p)",304],["if ~isempty(varargin)",1371]],"useCount":61734}]