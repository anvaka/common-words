[{"word":"0L","context":[["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["do_exit(0L)",183]],"useCount":16307},{"word":"0i","context":[["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187]],"useCount":3498},{"word":"12L","context":[["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165],["12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L,",165]],"useCount":2223},{"word":"16777215L","context":[["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742]],"useCount":4452},{"word":"1L","context":[["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311]],"useCount":96200},{"word":"1e","context":[["epsilon <- 1e-5",60],["tolerance = 1e-3)",144],[",  identicalTo( expected, tol = 1e-6 ) )",353],["tolerance = 1e-6)",142],["tolerance = 1e-2)",117],["##-   100 -1e-13 Inf -Inf NaN 3.14 NA",76],["tolerance = 1e-4)",34],["if(abs(rate*scale - 1) < 1e-15)",36],["tollerance = 1e-2)",38],["checkPCAModel(fitH2O, fitR, tolerance = 1e-5)",57]],"useCount":3964},{"word":"2012L","contextuseCount":4986},{"word":"2L","context":[["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945]],"useCount":35256},{"word":"3L","context":[["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759]],"useCount":22490},{"word":"4L","context":[["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["unit(bounds[4L], \"inches\")",126],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121]],"useCount":8271},{"word":"5L","context":[["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130]],"useCount":5105},{"word":"6L","context":[["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76]],"useCount":2941},{"word":"7L","context":[["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84]],"useCount":2960},{"word":"A","context":[["#' @return A dataframe consisting of the vectors listed in the Description.",346],["A = as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",113],["A = as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",113],[") ## A",167],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["A",202],["# along with this program.  A copy can be cound in the R installation",234],["# A function implemented by Diethelm Wuertz",283],["# - layout: A matrix specifying the layout. If present, 'cols' is ignored.",111]],"useCount":14639},{"word":"AND","context":[["options<-paste(sep=\" \",\" `len` >=\",list$len2,\" AND\")",16],["options<-\"where `freq` > 0 AND\"",17],["AND (m.ChoiceName IN ('strongly', 'very strongly', 'indurated') OR m.ChoiceName IS NULL)",19],["## methods left afterwards. AND we can't necessarily use the same default \"where\"",22],["# USER BLOCK: CHECK AND CHANGE OPTIONS HERE",22],["# AUTHOR(S) AND VERSION HISTORY REMAIN INTACT.",27],["# THESE FIELDS DETERMINE REQUIRED INPUT AND DESCRIPTION",30],["## IMPUTATION AND NORMALIZATION STEP (OFFLINE ON THE WHOLE DATASET)",33],["# STEPS 7 AND 8",34],["statement <- paste0(statement, \" AND\")",1666]],"useCount":2113},{"word":"API","context":[["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' received from the API server",498],["##' function which makes POST HTTP requests to the API server.",498],["\"They are not part of the API,\",",31],["help=\"Rosette API key\"), make_option(c(\"-u\", \"--url\"), action=\"store\", default=NA, type='character',",33],["\"Compiled code should not call non-API entry points in R.\\n\")",30],["nAPIs <- length(grep(\"Found non-API\", out))",30],["help=\"Rosette API url\"))",33]],"useCount":3217},{"word":"ASCII","context":[["problems <- with(rdas, (ASCII | compress == \"none\") & (size > 1e5))",66],["update <- with(rdas, ASCII | compress == \"none\" | version < 2)",44],["wrapLog(\"Portable packages must use only ASCII\",",63],["diff2 <- (rdas2$ASCII != rdas$ASCII) | (rdas2$compress != rdas$compress)",66],["asc <- iconv(x, \"latin1\", \"ASCII\")",126],["## must be ASCII as well (so that the RPM works in a C locale).",33],["## All field tags must be ASCII.",67],["diff2 <- (rdas2$ASCII != rdas$ASCII) | (rdas2$compress != rdas$compress)",66],["c(gettext(\"Fields with non-ASCII values:\"),",33],["writeLines(c(gettext(\"These fields must have ASCII values.\"), \"\"))",33]],"useCount":2584},{"word":"Add","context":[["# Add it to another list (it will be used to adjust the column names in the final sample peaklist)",56],["# Add it to the features to keep",56],["# Add this to the features to be added",56],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["# TODO: Add comment",388],["# Add the intensity of this peak to the y coordinates of the bars",56],["# Add the file names recursively, scrolling the whole spectral dataset",43],["## Add the missing features to the final matrix (the one that were in the model but not in the peaklist)",42],["# Add it to the output list",42],["##' @log Add a log here",34]],"useCount":2241},{"word":"All","context":[["if (DF.yrs[i]==\"All\") {",52],["## All remaining checks give notes and not warnings.",60],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["# All negative use is prohibited.",48],["selected=\"All\",",48],["# get All recmmended papers",34],["## All models",64],["## All field tags must be ASCII.",67],["#  All right reserved.",120]],"useCount":3146},{"word":"An","context":[["#' @param x An H2OFrame object.",72],["##' @param appNameOrID An app identifier using either the name of an app",57],["#' @return An object of class \\code{XiMpLe.node}.",67],["#' @param x An H2O Frame object.",87],["#' @param object An \\linkS4class{H2OModel} or \\linkS4class{H2OModelMetrics}",100],["#' @param object An \\linkS4class{H2OModel} object.",103],["# An R-based population pharmacokinetic/",234],["#' @param x An \\linkS4class{H2OFrame} object.",199],["#' @param object An \\linkS4class{H2OClusteringModel} object.",152],["#' @param x An H2O Frame object",45]],"useCount":2513},{"word":"Author","context":[["#  Author: Steven M. Boker",85],["# Author: Michael D. Hunter",71],["# Author: Ryne Estabrook",69],["## Author: Martin John Hadley (orcid.org/0000-0002-3039-6849)",66],["# Author: Robin Elahi",81],["#   Author: Claudio Agostinelli                             #",92],["# Author: Autogenerated on 2013-12-18 17:01:19",93],["## Author: Andrew Hooker",171],["# Author: ecor",131],["#\tAuthor: Claudio Agostinelli                         #",103]],"useCount":3212},{"word":"B","context":[["B <- as.matrix(readMM(paste(args[1], \"B.mtx\", sep=\"\")))",94],["B=1000 # The number of replicates",110],["B <- as.matrix(readMM(paste(args[1], \"B.mtx\", sep=\"\")))",94],["writeMM(as(B, \"CsparseMatrix\"), paste(args[2], \"B\", sep=\"\"));",90],["writeMM(as(B, \"CsparseMatrix\"), paste(args[2], \"B\", sep=\"\"));",90],["for (b in 1:B) {",80],["(AB <- rbind(A,B))",60],["rcond(B)",48],["B <- length(Block)",44],["Block <- Specs[[\"B\"]]",44]],"useCount":4077},{"word":"C","context":[["Sys.setlocale(\"LC_CTYPE\", \"C\")",212],["writeMM(as(C, \"CsparseMatrix\"), paste(args[2], \"C\", sep=\"\"));",145],["writeMM(as(C, \"CsparseMatrix\"), paste(args[2], \"C\", sep=\"\"));",145],["!(Sys.getlocale(\"LC_CTYPE\") %in% c(\"C\", \"POSIX\"))) {",191],["#' @param CT Conservative Temperature [ deg C ]",57],["Sys.setlocale(\"LC_ALL\", \"C\")",60],["## Move names handling to C code eventually ...",69],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136],["C.t<-C[[t]]",49]],"useCount":8545},{"word":"Call","context":[["bounds <- grid.Call(L_locnBounds, x$x, x$y, 0)",108],["cat(\"Call:\\n\")",132],["dl.index <- grid.Call(L_getDLindex)",109],["bounds <- grid.Call(L_locnBounds, x$x, x$y, theta)",99],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["bounds <- grid.Call(L_rectBounds, x$x, x$y, x$width, x$height,",72],["Call <- match.call()",70],["Call <- deparse(e[[1L]])[1L]",66],["mc <- match.call(get(Call, baseenv()), e[keep])",66],["grid.Call(L_setDLindex, as.integer(dl.index))",58]],"useCount":4340},{"word":"Check","context":[["# Check expected number of models",109],["# Check",58],["#Check data type",60],["## Check names of formals.",63],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["# Check parameters coverage",93],["### Check the network and arguments to make sure they are appropriate.",95],["# Check Arguments:",98],["## Check that state and outcome are valid",194]],"useCount":4579},{"word":"Class","context":[["ClassDef <- getClass(Class)",112],["dQuote(Class)),",271],["dQuote(Class),",180],["assignClassDef(Class, classDef, where)",109],["ClassDef <- getClassDef(Class, where)",87],["msg, dQuote(Class),",84],["def <- getClassDef(Class, value, NULL)",81],["else if(isClass(Class, where = where))",79],["classDef <- Class",63],["Class <- ClassDef@className",61]],"useCount":6668},{"word":"ClassDef","context":[["properties <- ClassDef@slots",54],["ClassDef <- getClass(Class)",112],["ClassDef <- getClassDef(Class, where)",87],["ext <- ClassDef@contains",81],["ClassDef",135],["Class <- ClassDef@className",61],["className <- ClassDef@className",54],["ClassDef <- Class",50],["if(is(ClassDef, \"refClassRepresentation\"))",40],["dQuote(ClassDef@className),",52]],"useCount":3614},{"word":"Create","context":[["# Create the outcomes dataframe",36],["## Create a directory in tempdir",78],["# Create an MxModel object",74],["# Create a temporary environment",51],["#Create a new window:",33],["### Create receptacles for output",33],["#Create a matrix with unique patient_nums.",32],["# Create the empty vector",43],["# Create workbooks",49],["# Create annotations",44]],"useCount":2210},{"word":"D","context":[["##D",140],["gps.db <- odbcConnectAccess2007('D:/Dropbox/tracking_db/GPS_db.accdb')",94],["# Author: Michael D. Hunter",71],["#' @author Marco D. Visser",49],["#' @source Andrade, D. F., Ogliari, P. J. (2010). Estatística para as",40],["D",40],["as.integer(D),",37],["return(D)",36],["## It is hard to think of anything apart from -I* and -D* that is",34],["sizes <- as.integer(sub(\"\\\\D.*\", \"\", res))",32]],"useCount":2339},{"word":"DESCRIPTION","context":[["Rdeps <- .split_description(.read_description(file.path(pkgDir, \"DESCRIPTION\")))$Rdepends2",66],["## DESCRIPTION",62],["db <- .read_description(file.path(dir, \"DESCRIPTION\"))",117],["# DESCRIPTION:",134],["if (file.exists(file.path(instdir, \"DESCRIPTION\"))) {",48],["## We definitely need a valid DESCRIPTION file.",49],["f <- file.path(pkgdir, \"DESCRIPTION\")",50],["checkingLog(Log, \"DESCRIPTION meta-information\")",54],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["## Are these mentioned in DESCRIPTION?",58]],"useCount":4940},{"word":"Data","context":[[".Data",172],["cat(oname, \" <- LaplacesDemon(Model, Data=\", dname,",115],["Data[[\"parm.names\"]][j],",117],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],[".Data = new('character'),",172],["# Data",130],["# Data:",155],["#Load Data",166],[".Object@.Data <-",172],["if(is.null(Data))",240]],"useCount":9666},{"word":"Date","context":[["# Date: 2009.08.01",107],["## Date of Authorship: 2016",66],["\"Date\",",65],["Jericho_data$Date <- as.Date(Jericho_data$Date)",57],["Jericho_data$Date <- as.Date(Jericho_data$Date)",57],["Jericho_data$Date <- as.Date(Jericho_data$Date)",57],["#trdata$date = as.Date(trdata$date,\"%Y-%m-%d\")",49],["temp=as.Date(\"20140901\",format=\"%Y%m%d\")",45],["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["xlab(\"Date\") +",43]],"useCount":5063},{"word":"Depends","context":[["category = c(\"Depends\", \"Imports\", \"LinkingTo\", \"VignetteBuilder\",",42],["writeLines(gettext(\"Malformed Depends or Suggests or Imports or Enhances field.\"))",33],["depends <- .get_requires_from_package_db(db, \"Depends\")",151],["val <- db[match(c(\"Depends\", \"Suggests\", \"Imports\", \"Enhances\"),",33],["## only 'Depends' are guaranteed to be on the search path, but",33],["deps <- c(names(pkgInfo$Depends), names(pkgInfo$Imports))",33],["## Are all packages listed in Depends/Suggests/Imports/LinkingTo installed?",33],["ldepends <-  .get_requires_with_version_from_package_db(db, \"Depends\")",33],["##   Depends/Suggests/Imports/Enhances, Namespace, Priority.",33],["## Everything listed in Depends or Suggests or Imports",32]],"useCount":2245},{"word":"Dev","context":[["Acceptance, Dev, DiagCovar, LIV, Mon, Mo0, ScaleF, thinned, tuning,",78],["Dev <- matrix(m.old[[\"Dev\"]],1,1)",63],["Dev[t.iter] <- Mo1[[\"Dev\"]]",81],["Specs, Acceptance, Dev, DiagCovar, LIV, Mon, Mo0, ScaleF,",168],["Dev=Dev,",215],["Dev=Dev,",215],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["Dev[t.iter] <- Mo1[[\"Dev\"]]",81],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270]],"useCount":2372},{"word":"E","context":[["#\tE-mail: claudio@unive.it                            #",100],["# Mats O. Karlsson and E. Niclas Jonsson.",234],["# E. Niclas Jonsson.",234],["#   E-mail: claudio@unive.it                                #",49],["mxAlgebra(L %*% t(L) + vec2diag(E), name=\"impliedCovs\"),",42],["weights <- E(graph)$weight",39],["the.graph <- delete.edges(the.graph, E(the.graph)[weight < theta]);",37],["##   have an environment E which is empty and has globalenv() as",33],["##   to have E as their parent env.)",33],["mxAlgebra(vectorofOnes - (diag2vec(L %*% t(L))) , name=\"E\"),",40]],"useCount":2542},{"word":"EOCT","context":[["sgp.grade.sequences=list(c('EOCT', 'EOCT'))),",144],["sgp.grade.sequences=list(c('EOCT', 'EOCT'))),",144],["sgp.grade.sequences=list(c('EOCT', 'EOCT')),",374],["sgp.grade.sequences=list(c('EOCT', 'EOCT')),",374],["sgp.baseline.grade.sequences=c('EOCT', 'EOCT'),",76],["sgp.baseline.grade.sequences=c('EOCT', 'EOCT'),",76],["sgp.grade.sequences=list(c('EOCT', 'EOCT', 'EOCT')),",58],["sgp.grade.sequences=list(c('EOCT', 'EOCT', 'EOCT')),",58],["sgp.grade.sequences=list(c('EOCT', 'EOCT', 'EOCT')),",58],["sgp.grade.sequences=list(c(8, 'EOCT')),",40]],"useCount":2134},{"word":"Error","context":[["if (any(grepl(\"^Error\", out))) {",77],["#### Error Bars ###",112],["# Error handling",57],["# Error check and build model",54],["if (any(grepl(\"^Error\", out)) || length(attr(out, \"status\"))) {",52],["# Error handling:",47],["error = function(e) paste(\"Error:\", conditionMessage(e)))",40],["Error = .error, Warnings = .warnings)",33],["writeLines(c(sprintf(\"Error in file '%s':\", xi$File),",33],["warning( \"Error message is: \", geterrmessage() );",263]],"useCount":3082},{"word":"F","context":[["return(F)",99],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["if(F){",122],["if( (q_use==F) && (p_use==T) )",115],["if( (q_use==F) && (p_use==F) )",115],["if( (q_use==F) && (p_use==F) )",115],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["stringsAsFactors = F)",109],["stringsAsFactors=F)",206]],"useCount":13440},{"word":"FALSE","context":[["stringsAsFactors=FALSE)",801],["return(FALSE)",2961],["first <- FALSE",1729],["stringsAsFactors = FALSE)",1517],["call. = FALSE, domain = NA)",1289],["FALSE",1115],["call. = FALSE)",1000],["row.names=FALSE)",515],["##' \\code{FALSE}.",498],["any <- FALSE",483]],"useCount":106983},{"word":"FIXME","context":[["## FIXME: make option of methods::getGenerics()",33],["## <FIXME> could be inside substitute or a variable",33],["## <FIXME split.matrix>",35],["#FIXME",35],["# FIXME",41],["print(res) # FIXME print to Log?",44],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["## FIXME: this does not need to be run in another process",128],["## </FIXME>",1341],["## <FIXME>",1380]],"useCount":5255},{"word":"FUN","context":[["FUN <- match.fun(FUN)",175],["FUN = function(x, y)",68],["FUN = sum)",49],["FUN = function(x) {",47],["FUN = fillMissingValues, mc.cores = detectCores() - 1,",42],["FUN = function(X){",72],["signature(X = \"RDD\", FUN = \"function\"),",76],["function(X, FUN) {",99],["FUN <- match.fun(FUN)",175],["FUN = sum),",506]],"useCount":4387},{"word":"File","context":[["c(gettextf(\"File '%s':\", fname),",33],["c(gettextf(\"File %s:\", sQuote(f)),",93],["msg <- c(if(one) \"File\" else \"Files\",",58],["File = fname,",36],["list(File = file.path(dir_name, f),",33],["writeLines(c(sprintf(\"Error in file '%s':\", xi$File),",33],["grep(\"^(ftype: not found|File type)\", out,",32],["files <- meta$File",33],["#  File src/library/tools/R/QC.R",33],["#  File src/library/tools/R/check.R",32]],"useCount":3555},{"word":"For","context":[["## For all fields used by the R package management system, values",34],["## For the time being, ignore base packages missing from the",34],["## For matching \\(S3)?method{GENERIC}{CLASS}.",34],["out <- list()                       # For the time being ...",34],["# For compatibility with 2.2.21",40],["# This does the summary. For each group's data frame, return a vector with",41],["## For debugging",51],["# For each feature in the model",56],["## For each state, find the hospital of the given rank",56],["requireNamespace(\"testit\")# For asserting conditions meet expected patterns.",57]],"useCount":2907},{"word":"Forest","context":[["chk.bac[tmp.rows, \"total.bac\"] / chk.Forest",60],["model.bac.total = df.output[ , \"Accum.Forest\"],",112],["chk.land.Total <- chk.land.Forest + chk.land.Pasture + chk.land.RAOCUT",80],["chk.dil * (df.output[ , \"Accum.Forest\"] -",112],["chk.pop <- rbind(data.frame(location = \"forest\", pop = chk.pop.on.land.Forest),",96],["chk.dil * (df.output[ , \"pop.total.in.Forest\"] -",96],["model.pop.total = df.output[ , \"pop.total.in.Forest\"],",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.land.Forest",112]],"useCount":3055},{"word":"Found","context":[["\"Found .Internal calls in the following functions:\"",33],["\"Found the following significant warnings:\")",52],["\"Found the following files with non-portable file names:\\n\",",60],["\"Found the following file with a non-portable file name:\\n\",",60],["printLog(Log, \"Found subdirectory 'MAN'.\\n\",",32],["\"Found possibly global 'T' or 'F' in the following functions:\"",33],["\"Found possibly global 'T' or 'F' in the following function:\",",33],["warningLog(Log, \"Found the following sources/headers with CR or CRLF line endings:\")",32],["printLog(Log, \"Found subdirectory 'r'.\\n\",",32],["\"  Found 'inst/doc/makefile': should be 'Makefile' and will be ignored\\n\")",32]],"useCount":2268},{"word":"Get","context":[["# Get summary statistics of chain:",38],["# Get the value which a user either entered directly or was computed",137],["# Get the last expression which the user entered at the R console.",136],["# Get models",111],["## Get the \\item tags inside \\describe.",66],["# Get data",39],["# Get function from function name",34],["#' Get trade report field",38],["# Get the swirl state",138],["# Get the i,j matrix positions of the regions that contain this subplot",197]],"useCount":2737},{"word":"H2O","context":[["print(paste(\"Rows from H2O\", nrow(prediction1)))",40],["#' # Try to connect to a local H2O instance that is already running.",37],["print(\"Prediction from H2O\")",40],["#' @param x An H2O Frame object.",87],["# Train H2O GBM Model:",37],["# Check if we are running inside the H2O network by seeing if we can touch",49],["hdfs_name_node = H2O.INTERNAL.HDFS.NAME.NODE",47],["#' @param x An H2O Frame object",45],["Log.info(\"Compare model statistics in R to model statistics in H2O\")",42],["Log.info(\"Print model statistics for R and H2O... \\n\")",41]],"useCount":5129},{"word":"HTML","context":[["HTML(\"<center>\"),",32],["## In addition, the names of help files get converted to HTML",32],["## don't use HTML, checkRd goes over the same ground.",32],["HTML(\"Excluded\")",36],["message(\"Updating HTML index of packages in '.Library'\")",39],["HTML(",56],["HTML('<hr>'),",60],["HTML('<br>'),",70],["HTML(\"<hr>\"),",113],["HTML(\"<br>\"),",248]],"useCount":2101},{"word":"I","context":[["\"2 'I channel surf'\")",38],["k <- sample(1:K,Kcol) # this is where I generate the sample of columns",36],["# Here I first replace % (i.e., misValperc) of the data with missing data (i.e., NA)",35],["swirl_out(\"I've executed the correct expression in case the result is needed in an upcoming question.\")",54],["## It is hard to think of anything apart from -I* and -D* that is",34],["swirl_out(\"That's not the expression I expected but it works.\")",54],["set.seed(12345, 'Mersenne-Twister','I')",51],["for(i in 1:I){",48],["mxMatrix(\"Iden\",nrow=100,name=\"I\",condenseSlots=T),",41],["# Here I impute the missing data in Xtemp.mis with the function missForest",32]],"useCount":3096},{"word":"ID","context":[["##' @param objectID DNAnexus object ID",358],["#'  \\item{region_id}{ID for region within a statistical area}",50],["# To get the gene symbol for each Illumina ID",55],["colnames(outcome_matrix)[1:3] <- c(\"Ind.ID\",\"origin.pop\",\"pred.pop\")",40],["# Select the columns Patient ID [1], MMSE [3]  (Mini-Mental State Exam score, a cognitive assessment measure),",36],["# To get annotation for each Illumina ID",55],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["## 'id' is an integer vector indicating the monitor ID numbers",172],["## where 'id' is the monitor ID number and 'nobs' is the",89],["##' (\"app-name\") or its full ID (\"app-xxxx\")",57]],"useCount":2514},{"word":"If","context":[["##' @param alias If an app name is given for \\code{appNameOrID}, this can be",57],["#' @param model_id (Optional) The unique id assigned to the resulting model. If",57],["# If after all the signal in the model is not found in the sample",56],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),",109],["# - layout: A matrix specifying the layout. If present, 'cols' is ignored.",111],["# If layout is NULL, then use 'cols' to determine layout",195],["# If there is a match",73],["## If not, we build the Rd db from the sources:",62]],"useCount":7759},{"word":"Inf","context":[["return(-Inf)",46],["##-   100 -1e-13 Inf -Inf NaN 3.14 NA",76],["##-   100 -1e-13 Inf -Inf NaN 3.14 NA",76],["return(Inf)",86],["loglik = -Inf",82],["if (is.na(td0)) td0 <- Inf",53],["output$bfMin0 <- Inf",50],["output$bfPlus0 <- Inf",50],["dfGenes = topTable(fit, coef = n[i], number = Inf)",49],["d <- data.frame(x=-Inf, xend=-Inf, y=min(b), yend=max(b))",42]],"useCount":4202},{"word":"Internal","context":[[".Internal(printDeferredWarnings())",68],["out <- c(out, \"with calls to .Internal functions\",",33],["calls <- calls[.call_names(calls) == \".Internal\"]",33],["\"Found .Internal calls in the following functions:\"",33],[".Internal(as.vector(argv[[1]], argv[[2]]));",38],["if((as.character(e[[1L]])[1L] %in% \".Internal\") &&",33],["details <- pkgname != \"relax\" # has .Internal in a 10,000 line fun",32],[".Internal(`as.vector`(argv[[1]], argv[[2]]));",36],["wrapLog(c(\"Packages should not call .Internal():\",",32],[".Internal(paste(list(...), sep, collapse))",31]],"useCount":5405},{"word":"JSON","context":[["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["##' @param inputParams Either an R object that will be converted into JSON",498],["## trying to parse JSON data",27],["# JSON",18],["#The JSONLITE Serializer properly handles the JSON conversion",17],["skip(\"Malformed JSON, can't extract credentials\")",16],["# JSON from parent",15],["#This removes the non-data info returned with the JSON object",14]],"useCount":2148},{"word":"K","context":[["## hi     1   8   hi   K[hi](r)",78],["for(k in 1:K){",105],["for (k in 1:K) {",107],["## obs    1   1  obs  K[obs](r)",78],["## theo                 theoretical value of K(r) for CSR",78],["## lo     1   8   lo   K[lo](r)",78],["## lo   lower pointwise envelope of K(r) from simulations",78],["## obs            observed value of K(r) for data pattern",78],["K=5 # Number of subspaces into which the test is projected",110],["## theo   2   2 theo K[theo](r)",78]],"useCount":3290},{"word":"L","context":[["IPM.kernel <- mk_K(nBigMatrix, params, L.z, U.z)",38],["mxAlgebra(L %*% t(L) + vec2diag(E), name=\"impliedCovs\"),",42],["mxAlgebra(vectorofOnes - (diag2vec(L %*% t(L))) , name=\"E\"),",40],["## \tSummary function: L(r)",39],["##  Summary function: L(r)",39],["##' @author Gavin L. Simpson",54],["L",65],["return(L)",88],["mxAlgebra(L %*% t(L) + vec2diag(E), name=\"impliedCovs\"),",42],["mxAlgebra(vectorofOnes - (diag2vec(L %*% t(L))) , name=\"E\"),",40]],"useCount":2906},{"word":"Load","context":[["# Load libraries",99],["# Load Library",115],["# Load the required libraries",138],["# Load packages",150],["# Load Libraries",87],["### Load data",92],["### Load SGP Package",98],["# Load data",294],["#Load Data",166],["## Load package into code_env.",238]],"useCount":2972},{"word":"Log","context":[["} else resultLog(Log, \"OK\")",1491],["warningLog(Log)",1033],["if(!any) noteLog(Log)",482],["errorLog(Log)",508],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["printLog0(Log,",707],["if (!any) warningLog(Log)",644],["if(!any) warningLog(Log)",588],["printLog(Log,",578],["summaryLog(Log)",523]],"useCount":26226},{"word":"LogFile","context":[["thinned, Debug, LogFile)}",45],["\"value(s).\\n\", file=LogFile, append=TRUE)",49],["file=LogFile, append=TRUE)}",278],["stop(\"The Specs argument is not a list.\", file=LogFile,",171],["stop(\"The Specs argument is incorrect.\", file=LogFile,",171],["sep=\"\"), \"\\n\", file=LogFile, append=TRUE)}",170],["stop(\"The Specs argument is required.\", file=LogFile,",88],["LogFile)",84],["\"\\n\", file=LogFile, append=TRUE)}",51],["file=LogFile, append=TRUE)",1113]],"useCount":2839},{"word":"M","context":[["for (j in 1:M){",65],["#' @author M.Beauvais",82],["M",49],["for (j in 1:M) {",79],["return(M)",74],["#  Author: Steven M. Boker",85],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["mynoiseqHo.deg2 = degenes(mynoiseqHo, q = 0.95, M = \"down\")",60],["mynoiseqHo.deg1 = degenes(mynoiseqHo, q = 0.95, M = \"up\")",60],["mynoiseqHo.deg = degenes(mynoiseqHo, q = 0.95, M = NULL)",60]],"useCount":5850},{"word":"Make","context":[["# Make each plot, in the correct location",211],["# Make a list from the ... arguments and plotlist",207],["# Make the panel",205],["# Make the randomness reproducible",179],["###### Make Graph ########",98],["######### Make new data set with only salinities and abundances#########",76],["# Make a matrix of output names",49],["# Make predictions",41],["# Make prediction",39],["# Make file for model selection of best fit model",36]],"useCount":2154},{"word":"Matrix","context":[["library(\"Matrix\")",828],["if (pkg == \"Matrix\") unlink(file.path(tmplib, \"lattice\"), TRUE)",32],["library(Matrix)",374],["library(Matrix);",32],["## stats has ::: to Matrix, Matrix depends on lattice",32],["exceptions <- c(exceptions, \"Matrix\", \"lattice\")",32],["#' @import Matrix",32],["Ytemp = NeuroIm1_Final_AD_vs_NC_training$Group; # Output Matrix Y for SuperLearner",36],["require(Matrix)",85],["## stats has ::: to Matrix, Matrix depends on lattice",32]],"useCount":2463},{"word":"Mo0","context":[["Mo1 <- Mo0",341],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["Mo0 <- Mo1",242],["round(Mo0[[\"LP\"]],1), \"\\n\", sep=\"\",",227],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["Mon[t.iter,] <- Mo0[[\"Monitor\"]]}",215],["prop <- Mo0[[\"parm\"]]",173],["Specs, Acceptance, Dev, DiagCovar, LIV, Mon, Mo0, ScaleF,",168],["log.alpha <- Mo1[[\"LP\"]] - Mo0[[\"LP\"]]",87],["\"Current:\", round(Mo0[[\"parm\"]][j]),",129]],"useCount":3111},{"word":"Mo1","context":[["Mo1 <- try(Model(prop, Data),",81],["log.alpha <- Mo1[[\"LP\"]] - Mo0[[\"LP\"]]",87],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["Dev[t.iter] <- Mo1[[\"Dev\"]]",81],["Mo1[[\"Monitor\"]])))) {",190],["if(inherits(Mo1, \"try-error\")) {",217],["Mo0 <- Mo1",242],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["Mo1 <- Mo0",341]],"useCount":3150},{"word":"Model","context":[["cat(oname, \" <- LaplacesDemon(Model, Data=\", dname,",115],["Mo1 <- try(Model(prop, Data),",81],["Mo1 <- try(Model(prop, Data), silent=TRUE)",59],["# Model parameters",59],["if(Debug[[\"DB.Model\"]] == TRUE) {",443],["#' The data is structured according to the Multi-Level Healthcare Information Modelling Reference Model release 2.5.0",304],["silent=!Debug[[\"DB.Model\"]])",171],["if(Debug[[\"DB.Model\"]] == TRUE)",135],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124]],"useCount":4212},{"word":"Month","context":[["chk.RAOCUT.pop.by.month$Month <- factor(chk.RAOCUT.pop.by.month$Month,",46],["names(chk.forest.pop.by.month) <- c(\"Month\", \"manual.calc.pop.total\",",46],["chk.pasture.bac.by.month$Month <- factor(chk.pasture.bac.by.month$Month,",46],["chk.forest.accum.by.month$Month <- factor(chk.forest.accum.by.month$Month,",46],["by.x = \"month.chr\", by.y = \"Month\")",598],["names(chk.stream.pop.by.month) <- c(\"Month\", \"manual.calc.pop.total\",",46],["chk.pasture.accum.by.month$Month <- factor(chk.pasture.accum.by.month$Month,",46],["num = match(chk.pasture.accum.by.month$Month, month.abb))",46],["chk.pasture.accum.by.month$Month <- factor(chk.pasture.accum.by.month$Month,",46],["df.output[ , c(\"Month\", \"Accum.RAOCUT\")],",46]],"useCount":4050},{"word":"N","context":[["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["N <- length(x)",90],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["N, nrows), domain = NA)",95],["if (is.null(N)) return()",112],["stop(sprintf(ngettext(N,",144],["for(i in 1:N){",181],["for (i in 1:N) {",234],["for (i in 1:N){",88],["N      <- as.numeric(tclObj(N))",82]],"useCount":8085},{"word":"NA","context":[["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["domain = NA)",10683],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253]],"useCount":94063},{"word":"NOTE","context":[["# NOTE:",45],["## </NOTE>",1416],["## <NOTE>",1382],["stop(\"CHIPSTER-NOTE: Your input file is not a sequence file that is compatible with the tool you try to use\")",49],["## NOTE: Do not round the result!",46],["#  *************NOTE *****************************",32],["sprintf(\"NOTE: arguments in definition %s changed from (%s) to (%s)\",",26],["## FUTURE NOTE (7/09):  For now, we are using an attribute for conflicts,",26],["c(## <NOTE>",24],["# NOTE: we fail gracefully if there are not enough unique solutions",24]],"useCount":3757},{"word":"NULL","context":[["NULL",7330],["} else NULL",310],["class(x) <- NULL",336],["function(package, dir, lib.loc = NULL)",419],["else NULL",445],["united$TempBreed <- NULL",504],["out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")",510],["return(NULL)",5221],["invisible(NULL)",972],["return(invisible(NULL))",683]],"useCount":69281},{"word":"No","context":[["stop('No column named ', by, ' in ', substitute(data), '.')",36],["stop(\"Not running on H2O internal network.  No access to HDFS.\")",30],["\"no\" =, \"No\" =, \"false\" =, \"False\" =, \"FALSE\" = FALSE,",100],["#' No description yet",45],["\"Split No\"     = as.numeric(iSplit),     # from function param",33],["## No valid Encoding metadata.",33],["## Case A: No redirection of stdout/stderr from installation.",32],["## No log file and thus no chance to find out",32],["legend(x=\"topright\",legend=c(\"Shocks\", \"No Shocks\"),lwd=c(2.5,2.5),col=c(\"black\", \"red\"), lty=c(1,1),cex=0.4,bty = \"n\")",32],["## No point in this test if already installed in .Library",31]],"useCount":2535},{"word":"Not","context":[["## Not run:",74],["## End(Not run)",73],["stop(\"Not OK check your values\")",139],["## Not yet:",66],["##' @param ...  Not used.  Forces remaining arguments to be specified by name.",49],["if (!is.igraph(graph)) { stop(\"Not a graph object\") }",52],["if ( str.filetype == \"Not an EMBOSS compatible sequence file\"){",50],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["stop(\"Not a graph object\")",215],["warning(gettextf(\"Not all arguments are of the same length, the following need to be recycled: %s\",",48]],"useCount":2960},{"word":"Note","context":[["# so raise an exception. (Note that builtins were handled earlier.)",51],["## Does the package have a NAMESPACE file?  Note that when",104],["# Note:",93],[".addFootnote(footnotes, symbol=\"<em>Note.</em>\", text=message)",71],["#' \tNote: This function requires acting user",67],["## (Note that as.character(sapply(exprs, \"[[\", 1L)) does not do",66],["# Note: Check extreme",40],["print(      \"(Note: That is the 1-based data row number, not the file line number.\")",40],["# Note: bfPlus0, bfMin0: PREPARE",35],["## Note that the fact that we can parse the raw \\usage does",34]],"useCount":3288},{"word":"OK","context":[["OK <- FALSE",183],["OK <- c(OK, grep(p, objects_in_code, value = TRUE))",102],["resultLog(Log, \"OK\")",326],["if (!any) resultLog(Log, \"OK\")",402],["} else resultLog(Log, \"OK\")",1491],["ns <- asNamespace(ns, base.OK = FALSE)",156],["stop(\"Not OK check your values\")",139],["OK <- TRUE",113],["OK <- c(OK, grep(p, objects_in_code, value = TRUE))",102],["objects_in_code <- unique(OK)",102]],"useCount":6571},{"word":"OP","context":[["cb$putcode(LDNULL.OP)",105],["cb$putcode(CHECKFUN.OP)",45],["cb$putcode(GOTO.OP, loop.label)",45],["cb$putcode(PUSHNULLARG.OP)",75],["cb$putcode(GETFUN.OP, ci)",45],["cb$putcode(POP.OP)",60],["cb$putcode(RETURN.OP)",258],["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["cb$putcode(SWAP.OP)",71],["cb$putcode(INVISIBLE.OP)",120]],"useCount":6528},{"word":"OS","context":[["if(.Platform$OS.type == \"windows\")",233],["if(.Platform$OS.type == \"unix\") {",59],["if (.Platform$OS.type == \"windows\")",69],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68],["if (.Platform$OS.type == \"windows\") {",173],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if(.Platform$OS.type == \"windows\") {",326],["if (.Platform$OS.type == \"unix\") {",51],["if ( .Platform$OS.type == 'unix' )",42]],"useCount":3181},{"word":"Object","context":[[".Object <- callNextMethod()",80],["function(.Object, modelname, namespace) {",89],["name <- .Object@name",95],["validObject(.Object)",130],["slot(.Object, 'slot_order') <-",172],[".Object@.Data <-",172],["slot(.Object, 'lang') <-",172],["slot(.Object, 'schemaLocation') <-",173],["return(.Object)",513],[".Object",716]],"useCount":6765},{"word":"P","context":[["m10 <- feval(y=e.ret,X=lty,P=P)$forecast[,method]*w",43],["m1 <- feval(y=e.ret,X=dy,P=P)$forecast[,method]*w",43],["m4 <- feval(y=e.ret,X=de,P=P)$forecast[,method]*w",43],["m4 <- feval(y=e.ret,X=de,P=P)$forecast[,method]*w",43],["R <- T - P",61],["m3 <- feval(y=e.ret,X=ep,P=P)$forecast[,method]*w",43],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["return(P)",52],["P <- Fs",52]],"useCount":3300},{"word":"PACKAGE","context":[["PACKAGE=\"pbdNCDF4\")",44],["PACKAGE=\"igraph\")",388],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["PACKAGE=spss_package)",69],["PACKAGE=\"base\")",55],["PACKAGE = \"base\")",46],[".C(\"ext_EndProcedure\",as.integer(err),PACKAGE=spss_package)",41],["PACKAGE = \"xcms\")",37],["PACKAGE=\"rvle\")",34],["## 'bad' FF calls (i.e., where the 'PACKAGE' argument is missing)",34]],"useCount":2216},{"word":"POSIXct","context":[["return(.POSIXct(res, tz))",38],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["x <- as.POSIXct(x)",77],["dates <- as.POSIXct(dates,format =\"%m/%d/%Y\")",34],["valid_time_end <- as.POSIXct(ds)",33],["chk.total.pop.by.month$Month <- factor(strftime(as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["chk.total.bac.by.month$Month <- factor(strftime(as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\")))",46],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["return(.POSIXct(x))",38]],"useCount":3475},{"word":"POSIXlt","context":[["end <- as.POSIXlt(end + (93 * step * 86400))",32],["end <- as.POSIXlt(end + (31 * step * 86400))",32],["end <- as.POSIXlt(maxx)",32],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112],["to0 <- as.POSIXlt(to)",45],["zz <- as.POSIXlt(z)",36],["x <- as.POSIXlt(x)",36],["r1 <- as.POSIXlt(from)",34],["to <- as.POSIXlt(to)",23],["start <- as.POSIXlt(min(x, na.rm = TRUE))",31]],"useCount":2107},{"word":"PR","context":[["## protect against failure (PR#9801)",39],["## Claimed at one time at least one fewer copies: PR#15274",32],["## dates with fractional seconds after 2038 (PR#15200)",27],["## by functions in base and utils, including PR#15499",25],["## PR#15535 c() \"promoted\" raw vectors to bad logical values",25],["## PR#15004",25],["## PR#15454",25],["## PR#15699 aggregate failed when there were no grouping variables",24],["## PR#15341 singular complex matrix in rcond()",24],["## PR#15377, very long variable names",24]],"useCount":4020},{"word":"Package","context":[["### Load SGP Package",98],["new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]",67],["packages <- db[, \"Package\"]",65],["sQuote(desc[\"Package\"]),",57],["#' Type: \\tab Package\\cr",49],["c(.get_standard_package_names()$base, db[, \"Package\"]))",48],["colnames(update) <- c(\"Package\", \"LibPath\")",42],["pkg_name <- db[\"Package\"]",99],["\"See section 'Package structure'\",",189],["package <- meta[\"Package\"]",146]],"useCount":4846},{"word":"Part","context":[["#  Part of the R package, http://www.R-project.org",3868],["## Part  7:  Figures about nucleosome contribution value (NCV).",18],["#' Part 1. Manual. \\emph{FAO Fisheries Technical Paper}, (306.1, Rev. 2). 407 p.",21],["## Part  1:  Load R libraries and define some functions.",21],["# Part of the hydroPSO R package, http://www.rforge.net/hydroPSO/ ;",23],["# Part of the FALCON (Framework of Adaptive ensembLes for the Comparison Of",28],["#  Part of the R package, https://www.R-project.org",1164],["# Part of the R/eqtl package",16],["## Part  5:  Classify DNA regions based on NOL.",17],["## Part  6:  Classify DNA regions based on NTR.",18]],"useCount":5308},{"word":"Pasture","context":[["model.bac.total = df.output[ , \"Accum.Pasture\"],",96],["chk.land.Pasture",96],["chk.Percent.Pasture.in.and.around.streams / 100",180],["chk.dil * (df.output[ , \"Accum.Pasture\"] -",96],["chk.dil * (df.output[ , \"pop.total.on.Pasture\"] -",80],["chk.pop.on.land.Pasture <- chk.pop.on.land * (chk.land.Pasture / chk.land.Total)",80],["chk.pop.on.land.Pasture <- chk.pop.on.land * (chk.land.Pasture / chk.land.Total)",80],["chk.land.Total <- chk.land.Forest + chk.land.Pasture + chk.land.RAOCUT",80],["model.pop.total = df.output[ , \"pop.total.on.Pasture\"],",80],["data.frame(location = \"pasture\", pop = chk.pop.on.land.Pasture),",80]],"useCount":2961},{"word":"Platform","context":[["if (.Platform$OS.type == \"windows\")",69],["r_arch <- .Platform$r_arch",71],["if (.Platform$pkgType == \"source\")",130],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68],["if (.Platform$OS.type == \"windows\") {",173],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68],["if(.Platform$OS.type == \"unix\") {",59],["if(.Platform$OS.type == \"windows\")",233],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if(.Platform$OS.type == \"windows\") {",326]],"useCount":3717},{"word":"R","context":[["#  Part of the R package, http://www.R-project.org",3868],["#  Part of the R package, https://www.R-project.org",1164],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["##' @param inputParams Either an R object that will be converted into JSON",498],["code_dir <- file.path(dir, \"R\")",636],["#  Part of the R package, http://www.R-project.org",3868],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["source('../h2o-runit.R')",1120],["source('../../h2o-runit.R')",867],["#  Part of the R package, https://www.R-project.org",1164]],"useCount":73626},{"word":"RAOCUT","context":[["chk.RAOCUT.accum.by.month <-",92],["chk.RAOCUT.bac.by.month <-",92],["tmp.table <- tableGrob(chk.RAOCUT.pop, show.rownames = FALSE)",92],["## bac on RAOCUT",126],["chk.RAOCUT.bac <- data.frame(",126],["## pop on RAOCUT",126],["## on RAOCUT",172],["## accum load on RAOCUT by month",92],["chk.RAOCUT.pop <- data.frame(",126],["location = c(\"pasture\", \"forest\", \"RAOCUT\",\"stream\"),",92]],"useCount":8019},{"word":"Rcmd","context":[["out <- R_runR2(Rcmd)",256],["Rcmd <-",56],["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")",510],["Rcmd <- paste(\"options(warn=1)\\n\",",750],["out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")",128],["Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",",160],["out <- R_runR(Rcmd, opts, env, arch = arch)",52],["R_runR(Rcmd, opts, \"R_DEFAULT_PACKAGES=NULL\", arch = arch)",32],["system2(file.path(R.home(\"bin\"), \"Rcmd.exe\"), args, out, out)",32]],"useCount":3171},{"word":"Rd","context":[["Rdfile <- attr(Rd, \"Rdfile\")",49],["rds <- file.path(dir, \"Meta\", \"Rd.rds\")",46],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["filename <- paste0(name, \".Rd\")",58],["sections <- RdTags(Rd)",59],["already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")",60],["bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",",60],["## Build Rd data base.",68],["writeSection(Rd[[i]], sections[i])",66],["## If not, we build the Rd db from the sources:",62]],"useCount":6569},{"word":"Return","context":[["# Return Value:",728],["## Return hospital name in that state with lowest 30-day death",69],["## Return the mean of the pollutant across all monitors list",85],["## Return a data frame of the form:",92],["#Return",83],["## Return a numeric vector of correlations",97],["# Return result",98],["# Return:",101],["## Return hospital name in that state with the given rank",59],["# Return",161]],"useCount":2654},{"word":"Returns","context":[["# Returns:",1277],["# Returns TRUE if e$expr matches any of the expressions given",142],["## Returns:",120],["#\tReturns:",109],["# Returns:     none",26],["#Returns:",29],["#' @return Returns an object of class \\linkS4class{H2ODimReductionModel}.",31],["#' Returns:",37],["# Returns",51],["#   Returns:",40]],"useCount":2473},{"word":"Rscript","context":[["#!/bin/env Rscript",48],["if(any(grepl(\"[^/]Rscript\", lines))) {",32],["#!/bin/Rscript",40],["#!/usr/bin/env Rscript --vanilla",39],["# input/output filenames are passed as two additional arguments to Rscript",50],["#!/usr/bin/Rscript --vanilla",84],["#! /usr/bin/Rscript",91],["#! /usr/bin/env Rscript",126],["#!/usr/bin/Rscript",680],["#!/usr/bin/env Rscript",1591]],"useCount":3008},{"word":"S","context":[["##' @author Barry S Rowlingson",38],["#' Venkataraman, S., Bodzsar, E., Roy, I., AuYoung, A., and",31],["for (s in 1:S) {",40],["print(.jcall(\"java/lang/System\", \"S\", \"getProperty\", \"java.version\"))",47],["return(S)",49],["#' Prasad, S., Fard, A., Gupta, V., Martinez, J., LeFevre, J., Xu, V., Hsu, M., Roy, I.",31],["epsilon.rep <- matrix(rnorm(N*S), N, S)",30],["## error in current S-PLUS versions.)",34],["format = \"%Y-%m-%d %H:%M:%S\",",37],["Sstar <- sc %*% S %*% sc",38]],"useCount":3357},{"word":"S3","context":[["## Determine names of declared S3 methods and associated S3",136],["## And finally transform the S3 \\method{}{} markup into the",34],["## Determine names of declared S3 methods and associated S3",136],["\", to S3 method '\", dprs(expr[[1]]),",51],["\"There is no matching S3 method or default for object, \",",51],["# At this point, fct should be an ordinary function or an S3 method.",51],["# If the S3 method's first argument, expr[[2]], is anything but atomic",51],["## For matching \\(S3)?method{GENERIC}{CLASS}.",34],["## S3 replacement methods from namespace registration?",34],["# Set this to True if you want to fetch the data directly from S3.",39]],"useCount":3437},{"word":"S4","context":[["## Note that this also allows us to get rid of S4 meta objects",34],["#' @param object an S4 class object",160],["## S4 classes or methods.",102],["## Also check the code in S4 methods.",67],["## The S4 'system' does **copy** base code into packages ....",60],["# If fct is an (S4) standardGeneric, match.call is likely to give a misleading result,",51],["#' @param object an S4 object",43],["## We avoid markup for indicating S4 methods, hence need to",34],["## Undocumented S4 methods?",34],["list(\"S4 methods\" =",34]],"useCount":3423},{"word":"See","context":[["## See the file ../COPYING for licensing issues.",122],["#TODO See Details.",43],["## See @file{src/library/Makefile.in}.",45],["#' @references See citation(\"microbiome\")",51],["printLog0(Log, sprintf(\"See %s for details.\\n\",",58],["gettextf(\"See section %s in '%s'.\",",60],["\"See section 'Package structure'\",",189],["## See",37],["msg <- \"See the note in ?`:::` about the use of this operator.\"",80],["wrapLog(gettextf(\"See section %s in '%s'.\",",60]],"useCount":2370},{"word":"Set","context":[["# Set the value of the displaying label",51],["# Set JAVA_HOME, set max. memory, and load rJava library",46],["# Set up plot layout, map will go on top and histogram on bottom",50],["# Set the presence of the signal in the sample to TRUE",56],["# Set the default presence of the signal in the sample to FALSE",56],["print(paste(\"Finished: Set \", i, sep = \"\"))",62],["print(paste(\"Starting: Set \", i, sep = \"\"))",62],["# Set up the page",211],["# Set working directory",78],["print(\"Set variables for h2o.\")",73]],"useCount":3153},{"word":"Sys","context":[["Sys.sleep(2)",129],["end.time <- Sys.time()",113],["Sys.sleep(5)",109],["start <- Sys.time()",144],["start.time <- Sys.time()",166],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["!(Sys.getlocale(\"LC_CTYPE\") %in% c(\"C\", \"POSIX\"))) {",191],["hdfs_name_node <- Sys.getenv(c(\"NAME_NODE\"))",209],["Sys.setlocale(\"LC_CTYPE\", \"C\")",212],["Sys.sleep(1)",265]],"useCount":16672},{"word":"T","context":[["record = system.time(gcFirst = T,",119],["ds <- gsub('T', ' ', ds)",86],["free=T,",231],["if( (q_use==F) && (p_use==T) )",115],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["par(new=T)",722],["verbose = T",109],["return(T)",107],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91]],"useCount":17226},{"word":"TODO","context":[["#TODO See Details.",43],["## TODO: REMOVE",70],["#' @return TODO",52],["## TODO:  have a metric that picks the \"closest\" relationship",54],["# TODO: Add comment",388],["# TODO",179],["#' TODO",136],["# TODO:",96],["## TODO",91],["#' # TODO",75]],"useCount":2087},{"word":"TRUE","context":[["args <- commandArgs(TRUE)",1677],["TRUE",2384],["return(TRUE)",2383],["any <- TRUE",2245],["file=LogFile, append=TRUE)",1113],["sgp.exact.grade.progression=TRUE,",1079],["append=TRUE)",1053],["args <- commandArgs(trailingOnly = TRUE)",826],["if (USER$Logged == TRUE)",629],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565]],"useCount":135944},{"word":"The","context":[["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["# The model",97],["## The bad ones:",101],["B=1000 # The number of replicates",110],["stop(\"The Specs argument is not a list.\", file=LogFile,",171],["stop(\"The Specs argument is incorrect.\", file=LogFile,",171],["#' The vectors are: label, vtb, vte, #' dvstring_value, dvstring_language, #' ccd, sourceName,",224],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' The data is structured according to the Multi-Level Healthcare Information Modelling Reference Model release 2.5.0",304],["#' The semantic reference(s) for this data:",337]],"useCount":12628},{"word":"This","context":[["# This file is part of the R package rkwarddev.",122],["# This is the user-interface definition of a Shiny web application.",121],["## This file is part of the R-package `ape'.",116],["# This file is part of the R package koRpus.",111],["# This is the server logic for a Shiny web application.",105],["# This file is a part of Xpose 4.",234],["# This file was generated by Rcpp::compileAttributes",216],["##' This is an internal function exported for those people who know",160],["# This file is part of Rcpp.",133],["# This file is part of icd.",135]],"useCount":9559},{"word":"To","context":[["# To run a while loop to generate different plots",108],["# To get an integer value of number of arrays",108],["# To add 10 to a while loop",108],["# To compare if the arrays are the last 10 arrays or not",108],["# To define column names",121],["# To get annotation for each Illumina ID",55],["# To get the gene symbol for each Illumina ID",55],["# To store Illumina IDs annotation",55],["# To check the input parameter for generating figures",62],["# To filter out samples based on donor information",88]],"useCount":3098},{"word":"UTF","context":[["(outputEncoding == \"\" && l10n_info()[[\"UTF-8\"]])) {",33],["#' @encoding UTF-8",79],["enc <- if(l10n[[\"UTF-8\"]]) \"UTF-8\" else utils::localeToCharset()",33],["} else if(l10n_info()[[\"UTF-8\"]]) {",33],["if (! enc %in% c(\"latin1\", \"latin2\", \"UTF-8\"))",33],["if (!nzchar(enc)) enc <- \"UTF-8\"",36],["### Encoding: UTF-8",43],["knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)",48],["fileEncoding=\"UTF-8\")",58],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99]],"useCount":2516},{"word":"UseMethod","context":[["isS3 <- function(fct)isTRUE(grep(\"UseMethod\", body(fct)) > 0)",51],["UseMethod = as.character(e[[2L]]),",43],["## too broad in the sense that a UseMethod call in a local function",27],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["## semantics.  Something containing a literal call to UseMethod is",27],["##      function(e) <UME>  # UME = UseMethod Expression",27],["assign(\"Ops\", function(e1, e2) UseMethod(\"Ops\"),",26],["assign(\"Complex\", function(z) UseMethod(\"Complex\"),",26],["assign(\"Summary\", function(..., na.rm = FALSE) UseMethod(\"Summary\"),",26],["assign(\"Math\", function(x, ...) UseMethod(\"Math\"),",26]],"useCount":2695},{"word":"V","context":[["V(",79],["V)",79],["V\\u000a",69],["V,",65],["while(v < V) {",51],["V = as.matrix(readMM(paste(args[1], \"V.mtx\", sep=\"\")))",85],["V(ig)$label = as.character(lab$SYMBOL)",128],["n = V(ig)$name",131],["V",214],["V = as.matrix(readMM(paste(args[1], \"V.mtx\", sep=\"\")))",85]],"useCount":3605},{"word":"Value","context":[["c(\"Augmentation Value\", input$ewsRadioButtons),",62],["# Return Value:",728],["legend(\"topleft\",c(\"Augmentation Value\", \"Breakpoints\",",128],["names=c('Value', 'Mean')",93],["# Value:",86],["if(input$quick_dataType == \"Augmentation Value\"){",66],["c(\"Augmentation Value\", input$quick_ewsRadioButtons),",66],["if(input$dataType == \"Augmentation Value\"){",64],["# Value must be character or single number",54],["'         <RegistryValue Name=\"InstallPath\" Type=\"string\" Value=\"[INSTALLDIR]\"/>',",40]],"useCount":2241},{"word":"Version","context":[["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["## delete class: Version 3 idiom",80],["v_m <- package_version(meta[\"Version\"])",63],["version <- desc[\"Version\"]",48],["#\tVersion: 0.1                                        #",40],["# Version: 0.1",39],["t_module_name, \" (Version: \", t_version, \", Status: \", t_status, \")\", \"\\n\", \"\\n\",",37],["if(!is.na(val <- db[\"Version\"])",34],["current <- desc$DESCRIPTION[\"Version\"]",33]],"useCount":2521},{"word":"WINDOWS","context":[["env0 <- if(WINDOWS) \"R_ENVIRON_USER='no_such_file'\" else \"R_ENVIRON_USER=''\"",32],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53],["if (WINDOWS && grepl(\"\\\\.zip$\", pkg)) {",48],["if(WINDOWS) {",87],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if (WINDOWS) {",552],["if (!WINDOWS)",44],["useJunctions <- WINDOWS && !nzchar(Sys.getenv(\"R_WIN_NO_JUNCTIONS\"))",32],["if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))",53],["if (!WINDOWS) {",57]],"useCount":2138},{"word":"We","context":[["#We need MASS to dump the matrix to a file.",51],["## We definitely need a valid DESCRIPTION file.",49],["## (We set .libPaths)",42],["## (in case 'verbose' was true).  We now add this as an attribute to",34],["## what is actually in the code.  We most likely also should do",34],["## We avoid markup for indicating S4 methods, hence need to",34],["## We used to have",33],["## We should really determine the name g dispatches for, see",68],["## We should be able to safely strip all backticks; alternatively,",66],["## We need to rempve '...': OTOH the argument could be NULL",66]],"useCount":3121},{"word":"Windows","context":[["messageLog(Log, \"will not attempt to install this package on Windows\")",32],["## FLIBS is not needed on Windows, at least currently (as it is",32],["} else if (Sys.info()[1] == \"Windows\") {",89],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71],["name.opt = \".Windows.Options\",",50],["## Under Windows, need a Makefile.win for methods.",33],["## definitely cannot have '/'.  Under Windows, the control",32],["messageLog(Log, \"this is a Windows-only package, skipping installation\")",32],["## Warning on x64 Windows gcc 4.5.1 that",32],["## -x is always false on Windows.",32]],"useCount":2109},{"word":"X","context":[["FUN = function(X){",72],["return(X)",240],["X",213],["n <- nrow(X)",118],["function(X, FUN) {",99],["xj <- X[[j]]",94],["p <- ncol(X)",90],["signature(X = \"RDD\", FUN = \"function\"),",76],["X <- as.matrix(X)",75],["X <- as.matrix(X)",75]],"useCount":15637},{"word":"XML","context":[["library(\"XML\")",98],["data$ccd <- XML::xmlName(root)",608],["library(XML)",567],["require(XML)",173],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["root <- XML::xmlRoot(doc)",312],["doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",304],["#' @import httr XML",52],["rk.XML.col(",57],["rk.XML.row(",61]],"useCount":3040},{"word":"Y","context":[[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["ncol(Data[[\"Y\"]]))",80],["if(is.null(Data[[\"Y\"]]))",74],["fit.probit <- probit(Y = y.i.o, X = X.o, s = s.o, knots = knots,",62],["#trdata$date = as.Date(trdata$date,\"%Y-%m-%d\")",49],["X = Y[, \"Close\", drop = FALSE];",48],["Y = X;",47],["temp=as.Date(\"20140901\",format=\"%Y%m%d\")",45],["colnames(X) = attr(Y, \"SName\");",43],["n <- length(Y)",42]],"useCount":6133},{"word":"_","context":[["paste(c(\"[._[:alnum:]]*\",",66],["plot_name <- paste(plot_name, idx, sep='_')",48],["fn = gsub(\" \", \"_\", cmdname, fixed=TRUE)",48],["d = gsub('^_|[.][a-zA-Z]+$', '', a[1])",47],["fn <- file.path(lib, paste(\"_test_dir\", Sys.getpid(), sep = \"_\"))",40],["bad <- !grepl(\"^[[:alnum:]._]+$\",",33],["sub(\"_.*\", \"\",",33],["\"_\",",34],["pattern = \"^[.]__[CT]_\")))",34],["phenotype = paste(phenotype_timepoint, phenotype_suffix, sep=\"_\")",35]],"useCount":3211},{"word":"a","context":[["# This file is a part of Xpose 4.",234],["stop(\"Not a graph object\")",215],["return(a)",209],["# Make a list from the ... arguments and plotlist",207],["a(g202",251],["## 'directory' is a character vector of length 1 indicating",280],["# along with this program; if not, a copy is available at",314],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["a(g189",528],["a",562]],"useCount":89360},{"word":"abline","context":[["abline(h=0,col=\"black\",lty=3)",53],["abline(h=0)",352],["abline(0,1)",223],["abline(h = 0)",108],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["abline(v=quickTP()[[2]], col=\"blue\")",480],["abline(h=0,lty=2)",43],["abline(0,0)",52],["abline(h = 0, lty = 2)",60],["abline(h=0,v=0)",54]],"useCount":4925},{"word":"about","context":[["# User has logged in. Record details about the HTTP session.",50],["msg <- \"See the note in ?`:::` about the use of this operator.\"",80],["## There is no point in worrying about exportMethods directives",68],["# extract info about simulation settings",57],["## If we were really picky, we would worry about possible",34],["# Find out more about building applications with Shiny here:",48],["if (debug) message(\"about to run \", cmd, domain = NA)",48],["# You can find out more about building applications with Shiny here:",223],["## Hence, even if we still provide information about this, we",34],["## There is no point in worrying about exportClasses directives",34]],"useCount":2805},{"word":"abs","context":[["abs(is - round(is)) < ts.eps) {",32],["if(any(abs(colSums(contrast)) > 1e-8))",31],["#'   max(abs(df1-df2))",39],["if (abs((as.numeric(feature_model)-as.numeric(feature_sample))*10^6/as.numeric(feature_model)) <= tolerance_ppm) {",48],["#' @source Based on Australian Bureau of Statistics data \\url{http://www.abs.gov.au/}",52],["stopifnot(abs(res$value - val) < res$abs.error)",144],["stopifnot(abs(res$value - val) < res$abs.error)",144],["if(abs(rate*scale - 1) < 1e-15)",36],["init.values[[i]]$.RNG.seed <- abs(.Random.seed[i +",35],["max.raw <- max(abs(c(x, breaks)), na.rm = TRUE)",32]],"useCount":3193},{"word":"access","context":[["chk.pop.on.land <- chk.pop.wo.stream.access +",96],["## no longer print it by default.  One can still access it via",34],["validity, access, version, sealed, where = where)",39],["chk.pop.in.around.stream <- chk.pop.w.stream.access * (chk.in.and.around.streams / 100)",96],["chk.pop.wo.stream.access <- chk.pop.total * (1 - chk.Percent.habitat.with.Stream.Access / 100)",96],["chk.pop.w.stream.access * (1 - chk.in.and.around.streams / 100)",96],["chk.pop.w.stream.access <- chk.pop.total * (chk.Percent.habitat.with.Stream.Access / 100)",96],["## with/without stream access",112],["## with stream access on in/around atream",112],["### Percent of Landuse with Stream access",130]],"useCount":2242},{"word":"accum","context":[["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["## accum",174],["## accum loads",158],["chk.bac <- data.frame(chk.bac, accum.bac = -1)",142],["chk.bac[chk.bac$location == \"stream\", \"accum.bac\"] = NA",142],["sqolim.bac = chk.bac$accum.bac * chk.sqolim)",142],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"]) /",112],["tmp.table <- tableGrob(chk.all.accum, show.rownames = FALSE)",112]],"useCount":6244},{"word":"action","context":[["m <- as.call(c(m, list(na.action = NULL)))",44],["res <- naresid(object$na.action, res)",41],["options(na.action=na.exclude) # preserve missings",61],["test_fit = t.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["test_fit = wilcox.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["x <- na.action(as.ts(x))",88],["na.act <- attr(mf, \"na.action\")",41],["m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\",",40],["fit$na.action <- attr(mf, \"na.action\")",39],["function(formula, data, subset, na.action, ...)",101]],"useCount":3747},{"word":"add","context":[["if (!add) {",93],["eval(substitute(add.expr))",62],["if (!missing(add.expr))",64],["summary.table <- add.to.sumtab(summary.table, adds=list(",73],["if(add.labs)",76],["#' @param urlSuffix The partial URL suffix to add to the calculated base URL for the instance",84],["# To add 10 to a while loop",108],["US(add=TRUE, lwd=1.5)",96],["map(\"world\", \"Canada\", add=TRUE, lwd=1.5)",95],["add(repo, \"test.txt\")",87]],"useCount":8014},{"word":"adj","context":[["adj.root = 0,",53],["n = (which(sapply(lSigGenes.adj, length) >= 10)) + 1",69],["adj=0,",78],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["adjR2.ts    <- r2.adj.funct(my.datf.test[,1],pred.ts,noFeats.fit)",33],["adjR2.both  <- r2.adj.funct(ds.full[,1],pred.both,noFeats.fit)",33],["chk.amng.adj.size   <- c(1.15,1.35,1.39,1.43,1.47,1.51,1.55,1.59,1.63,",32],["adj=1,",45],["sapply(lSigGenes.adj, length)",31],["adjR2.tr    <- r2.adj.funct(my.datf.train[,1],pred.tr,noFeats.fit)",33]],"useCount":2173},{"word":"aes","context":[["FigureTemp5 <- ggplot(DataFrame_Local, aes(x=sampleType) ) +",55],["#geom_errorbar(aes(ymin=CMeanLower, ymax=CMeanUpper), width=.2,",60],["pdb + geom_line(aes(group=projid)) + facet_grid(msex~.)",60],["gp <- gp + geom_pointrange(aes(ymin = lower, ymax = upper))",61],["#geom_errorbar(aes(ymin=YMin,ymax=YMax)) +",65],["geom_errorbar(aes(ymin=YMin,ymax=YMax)) +",68],["#geom_errorbar(aes(ymin=TransformedNpercentLower, ymax=TransformedNpercentUpper), width=.01,",85],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["aes(",310]],"useCount":5253},{"word":"aliases","context":[["## have aliases, provided that there is no alias which ends in",34],["#' @aliases",131],["aliases <- unlist(aliases[idx])",35],["aliases <- unlist(aliases[idx])",35],["aliases <- db_aliases[[docObj]]",34],["aliases <- lapply(db, .Rd_get_metadata, \"alias\")",112],["aliases <- c(aliases, list(aliases1))",66],["aliases <- c(aliases, list(aliases1))",66],["al <- aliases[i]",34],["##' @aliases",165]],"useCount":3219},{"word":"all","context":[["arrows=1, connect=\"all.pairs\",",192],["rm(list=ls(all=TRUE))",377],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["#all reference trees to one comp tree",139],["MP.political_groups <- c(\"all\")",127],["MP.mp_ids           <- c(\"all\")",127],["MP.countries        <- c(\"all\")",127],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["rm(list=ls(all=TRUE))  #Clear the variables from previous runs.",120],["## all bac",112]],"useCount":32401},{"word":"alpha","context":[["alpha = 0.5,",144],["alpha = alpha,",179],["alpha = alpha,",179],["alpha.init = 0.5, rho.init = knots.h,",136],["xi.fix = TRUE, alpha.fix = FALSE,",136],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["alpha <- 0.3",126],["alpha.min = 0.1, alpha.max = 0.9,",138],["alpha.min = 0.1, alpha.max = 0.9,",138],["if(!is.finite(log.alpha)) log.alpha <- 0",131]],"useCount":9148},{"word":"already","context":[["fmt <- \"handler for '%s' is already defined for another package\"",45],["## Rd objects should already have been installed.",38],["#' @param force logical, indicates how to deal with files that already exist.",38],["# if the requested plot already exists use it",62],["# then, if the requested plot already exists, use it",228],["any(rdas$compress %in% c(\"bzip2\", \"xz\"))) # assume already optimized",66],["## check for indirect extensions => already completed",54],["bad <- files[files %in% already]",60],["already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")",60],["\"The following files are already in R: \",",60]],"useCount":2738},{"word":"also","context":[["Log.info(\"Perform filtering with the '$' sign also\")",254],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#wilcox rank sum test, and logistic regression are also provided: \"wilcox\", \"regression\"",37],["## what is actually in the code.  We most likely also should do",34],["## Note that this also allows us to get rid of S4 meta objects",34],["## Note also that we'd like to help people find where the offending",33],["## should also have a \\usage, apart from",33],["## We traditionally also use the usage \"texts\" for some sanity",33],["## We currently use double quoting for the parse step.  As we also allow",33]],"useCount":3263},{"word":"alternative","context":[["switch(alternative,",135],["validate.htest.alternative(alternative = alternative)",91],["alternative <- match.arg(alternative)",129],[",alternative = c(\"two.sided\",\"less\",\"greater\")",62],["alternative <- match.arg(alternative)",129],["## (experimental) alternative way of specifying the namespace.",104],["alternative = alternative,",103],["alternative = alternative,",103],["validate.htest.alternative(alternative = alternative)",91],["validate.htest.alternative(alternative = alternative)",91]],"useCount":2189},{"word":"an","context":[["## 'id' is an integer vector indicating the monitor ID numbers",172],["#' @param object an S4 class object",160],["##' @param inputParams Either an R object that will be converted into JSON",498],["##' This is an internal function exported for those people who know",160],["# To get an integer value of number of arrays",108],["#' @param R an xts, vector, matrix, data frame, timeSeries or zoo object of",98],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["## Currently only accessible via an internal environment",82],["#\tfile - the quoted name of an existing GH5 file",81],["# Create an MxModel object",74]],"useCount":14823},{"word":"analysis","context":[["analysis <- function(db) {",34],["# Initialize the multiple-QTL-model with the results from single QTL analysis",35],["analysis(db)",34],["## Using code analysis, we really don't know which",66],["analysis <- load_analysis()",80],["#### ROC analysis",45],["print(summary(analysis))",82],["# This code is part of the MOCAT analysis pipeline",40],["#  of packages for network analysis, http://statnet.org .",124],["# Renjin : JVM-based interpreter for the R language for the statistical analysis",309]],"useCount":2284},{"word":"and","context":[["## bacteria loads total and by locations",158],["## population total and by locations",158],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["chk.Percent.Pasture.in.and.around.streams / 100",180],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["# Make a list from the ... arguments and plotlist",207],["# Mats O. Karlsson and E. Niclas Jonsson.",234],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["# update plot legend with ews and breakpoint lines",898],["## Check that state and outcome are valid",194]],"useCount":51122},{"word":"ans","context":[["ans <- is_robust_match(good_expr, e$expr, eval_for_class, eval_env)",85],["ans",1462],["return(ans)",649],["if(ans!=\"\") {",51],["ans <- readline()",124],["#print(paste(\"User val is \",e$val,\"Correct ans is \",correctVal))",107],["print(ans)",77],["ans <- list()",73],["return (ans)",66],["return(ans);",58]],"useCount":7881},{"word":"any","context":[["any(sapply(c(...), function(expr)omnitest(expr)))",142],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["if (!any) resultLog(Log, \"OK\")",402],["any <- TRUE",2245],["if(!any) noteLog(Log)",482],["any <- FALSE",483],["if(!any) warningLog(Log)",588],["if(any(ind)) {",630],["if(any(ind))",416],["if (!any) warningLog(Log)",644]],"useCount":26441},{"word":"append","context":[["write(paste0(sWarningMsg,\" \",date()),file=sLogFile,append=TRUE)",54],["file=LogFile, append=TRUE)",1113],["append=TRUE)",1053],["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["features_to_keep <- append(features_to_keep, feature_sample)",49],["\"value(s).\\n\", file=LogFile, append=TRUE)",49],["features_to_add <- append(features_to_add, feature_model)",49],["\"\\n\", file=LogFile, append=TRUE)}",51],["file=LogFile, append=TRUE)}",278],["sep=\"\"), \"\\n\", file=LogFile, append=TRUE)}",170]],"useCount":6996},{"word":"apply","context":[["\"The following options apply where sub-architectures are in use:\",",32],["# these settings are only for myself, and they will not apply to you, but",31],["retval$rowSDs <- sx <- apply(x, 1, sd, na.rm = na.rm)",30],["#' @param X The RDD to apply the transformation.",38],["m<-apply(t,1,min)",34],["retval$colSDs <- sx <- apply(x, 2, sd, na.rm = na.rm)",30],["#m = apply(m, 2, function(x) f_ivStabilizeData(x, fGroups))",51],["Handsontable.renderers.TextRenderer.apply(this, arguments);",51],["epsilon.summary <- apply(epsilon, 1, quantile,",90],["apply(",79]],"useCount":3089},{"word":"arch","context":[["opts <- if(nzchar(arch)) R_opts4 else R_opts2",84],["starsmsg(\"***\", \"arch - \", arch)",72],["starsmsg(\"***\", \"arch - \", arch)",72],["for(arch in archs) {",72],["ss <- paste(\"src\", arch, sep = \"-\")",72],["for (arch in archs) {",80],["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["if(nzchar(arch)) env0,",62],["for (arch in inst_archs) {",64]],"useCount":3348},{"word":"are","context":[["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' The vectors are: label, vtb, vte, #' dvstring_value, dvstring_language, #' ccd, sourceName,",224],["## Check that state and outcome are valid",194],["##' what they are doing.",156],["# To compare if the arrays are the last 10 arrays or not",108],["# Ensure that text and symbols are scaled 150%",56],["### Check the network and arguments to make sure they are appropriate.",95],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["# if no opal login details are provided look for 'opal' objects in the environment",67],["\"The following files are already in R: \",",60]],"useCount":17536},{"word":"arg","context":[["units <- match.arg(units)",88],["family <- match.arg(family)",68],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["if (! is.na(arg.split[2]) ) {",60],["method <- match.arg(method)",401],["tmp<- na.omit(sapply(argv,function(arg)",93],["alternative <- match.arg(alternative)",129],["test <- match.arg(test)",138],["type <- match.arg(type)",739]],"useCount":6574},{"word":"args","context":[["a <- args[1L]",158],["while(length(args)) {",162],["args <- args[-1L]",176],["args <- args[-1L]",176],["args <- commandArgs(TRUE)",1677],["args <- commandArgs(trailingOnly = TRUE)",826],["args <- list(...)",635],["args <- commandArgs(trailingOnly=TRUE)",257],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197]],"useCount":22779},{"word":"argument","context":[["argument)",114],["stop(\"The Specs argument is required.\", file=LogFile,",88],["argument,",84],["if(!is.qr(qr)) stop(\"argument is not a QR decomposition\")",77],["if(missing(x)) stop(\"The x argument is required.\")",68],["stop(\"The Specs argument is incorrect.\", file=LogFile,",171],["# (as characters) in the argument.",142],["stop(\"The Specs argument is not a list.\", file=LogFile,",171],["argument",234],["stop(\"argument 'package' must be of length 1\")",667]],"useCount":8537},{"word":"arguments","context":[["#' @param ... Further arguments passed to or from other methods.",114],["### Check the network and arguments to make sure they are appropriate.",95],["### Process the arguments",85],["#' @param \\dots extra arguments to be passed if `object` is of type",78],["# validation des arguments #",68],["#' @param ... Further arguments to be passed from or to other methods.",60],["# arguments:",135],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["# Make a list from the ... arguments and plotlist",207],["#' @param \\dots further arguments to be passed to/from this method.",97]],"useCount":6753},{"word":"argv","context":[[".Internal(as.vector(argv[[1]], argv[[2]]));",38],["do.call(`-`, argv);",42],["do.call(`attr`, argv);",44],["do.call(`is.na`, argv);",44],[".Internal(as.vector(argv[[1]], argv[[2]]));",38],["do.call(`as.character`, argv);",46],["tmp<- na.omit(sapply(argv,function(arg)",93],["do.call(`c`, argv);",74],["do.call(`list`, argv);",64],["do.call(`invisible`, argv);",50]],"useCount":4989},{"word":"around","context":[["## with stream access on in/around atream",112],["chk.Percent.Pasture.in.and.around.streams / 100",180],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["chk.pop.in.around.stream <- chk.pop.w.stream.access * (chk.in.and.around.streams / 100)",96],["chk.pop.in.around.stream <- chk.pop.w.stream.access * (chk.in.and.around.streams / 100)",96],["### percent of animals in/around streams",112],["data.frame(location = \"stream\", pop = chk.pop.in.around.stream))",112],["chk.pop.w.stream.access * (1 - chk.in.and.around.streams / 100)",96],["## pop in/around stream",158],["## bac in/around stream",158]],"useCount":2974},{"word":"array","context":[["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/array.json\" )",60],["stop(\"'x' must be an array of at least two dimensions\")",38],["if(!is.array(x) || length(dn <- dim(x)) < 2L)",34],["# Delete all the SL objects, nj arrays, Yj array and Xj matrices generated throughout the SuperLearner loop",30],["#' @param symInfo RHost variable that stores the array",40],["matrix = , array = {",54],["else if (is.array(data))",33],["#' @param varName RHost variable that stores the array",38],["# To store gene expression values for all the array",55],["stop(\"'data' must be a data.frame, not a matrix or an array\")",33]],"useCount":4129},{"word":"as","context":[["x <- as.character(x)",254],["m$data <- as.data.frame(data)",227],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["x <- as.matrix(x)",696],["x <- as.numeric(x)",199],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["patient.number <- as.integer(id.map[patient.id])",260]],"useCount":103831},{"word":"asValues","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues= TRUE)$\"f\")))",12],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["test_name <- R.utils::commandArgs(asValues=TRUE)$\"f\"",15]],"useCount":3592},{"word":"assign","context":[["base::assign(\".ptime\", proc.time(), pos = \"CheckExEnv\")",73],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73],["assign (pos = 1, newnam, xpdb)",85],["pros.train <- h2o.assign(pros.hex[p.sid > .2, ], \"pros.train\")",68],["pros.test <- h2o.assign(pros.hex[p.sid <= .2, ], \"pros.test\")",68],["assign(x, value, envir = ns, inherits = FALSE)",66],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["assign (pos = 1, \".cur.db\", xpdb)",85],["assign(f, fx, envir = env)",111],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136]],"useCount":11399},{"word":"at","context":[["#  (at your option).",66],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["# Whenever swirl is running, its callback is at the top of its call stack.",138],["# Get the last expression which the user entered at the R console.",136],["message(\"want to try to submit your grade at a later time.\")",129],["# along with this program; if not, a copy is available at",314],["#           java must be at least 1.6.",120],["q_use = FALSE #use p value at last",82],["#Gives Salinities at high tide",72],["at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",66]],"useCount":12354},{"word":"attr","context":[["attr(value, \"row.names\") <- row.names",116],["attr(aod, \"heading\") <- head",78],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["bad_lines <- lapply(db_usages[ind], attr, \"bad_lines\")",102],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["function(x) !is.null(attr(x, \"bad_lines\"))))",98],["rows <- attr(x, \"row.names\")",97],["attr(bad_doc_objects, \"bad_lines\") <- bad_lines",94],["response <- attr(attr(mf, \"terms\"), \"response\")",126]],"useCount":18883},{"word":"attributes","context":[["at <- attributes(x)",43],["stop(gettextf(\"'%s' must be logical\", \"check.attributes\"), domain = NA)",40],["pnames <- names(attributes(prototype))",108],["level <- as.matrix(attributes(df)$levels)",101],["attributes(value) <- NULL",93],["a <- attributes(x)",80],["attributes(x)",58],["if (!is.logical(check.attributes))",50],["msg <-  if(check.attributes) attr.all.equal(target, current, ...)",46],["attributes(x) <- a",45]],"useCount":4362},{"word":"author","context":[["#' @author Eliot McIntire",120],["#' @author John Brzustowski \\email{jbrzusto@@REMOVE_THIS_PART_fastmail.fm}",131],["#' @author Derek H. Ogle, \\email{derek@@derekogle.com}",133],["#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}",139],["#' @author Matt Owen \\email{mowen@@iq.harvard.edu}",144],["#' @author Martin Vincent",158],[", author = \"Roger\"",184],["#' @author Yassen Assenov",187],["#' @author Nicholas J. Matzke \\email{matzke@@berkeley.edu}",240],["#' @author",355]],"useCount":9115},{"word":"available","context":[["foundpkgs <- download.packages(pkgs, destdir = tmpd, available = available,",41],["# along with this program; if not, a copy is available at",314],["if(is.null(available))",130],["available <-",90],["method, available = NULL, destdir = NULL,",64],["method = method, available = available,",60],["method = method, available = available,",60],["pkgs <- getDependencies(pkgs, dependencies, available, lib)",44],["available <- available.packages(contriburl = contriburl,",96],["available <- available.packages(contriburl = contriburl,",96]],"useCount":5722},{"word":"axes","context":[["if(axes) {",68],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["plot(ddr, horiz = TRUE, axes = FALSE, yaxs = \"i\", leaflab = \"none\")",58],["axes = FALSE)",51],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["axes=FALSE,",71],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["axes = FALSE,",85],["if (axes) {",90],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121]],"useCount":2676},{"word":"axis","context":[["axis.title.y = element_blank(),",219],["axis.title.x = element_blank(),",214],["axis.ticks = element_blank(),",212],["theme(axis.text = element_text(size = 9),",378],["axis(2)",443],["axis.text.x = element_blank(),",306],["axis(1)",322],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["axis.title.x=element_blank(),",189]],"useCount":18534},{"word":"b","context":[["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["b",255],["type = \"b\",",104],["remove(\"a\", \"b\")",87],["b = b,",86],["for (b in 1:B) {",80],["add_panel_label(\"b\")",80],["return(b)",85],["type=\"b\",",86],["b = b,",86]],"useCount":12408},{"word":"bac","context":[["## bac load in forest",204],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["## bac load on pasture",188],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["\"model.bac.total\")",368],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288]],"useCount":27537},{"word":"background","context":[["panel.background=element_blank(),",125],["plot.background = element_blank(),",118],["plot.background=element_blank(),",49],["panel.background = element_rect(fill = \"transparent\",colour = NA),",55],["theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(), panel.background = element_blank(),",66],["theme(strip.background = element_blank(),",91],["panel.background = element_rect(fill = \"white\"),",101],["theme(panel.background = element_blank(),",103],["strip.background = element_blank(),",112],["panel.background = element_blank(),",345]],"useCount":2617},{"word":"bad","context":[["bad <- character()",231],["paste(\" \", bad))",126],["## The bad ones:",101],["bad <- c(bad, pkg)",74],["bad),",90],["if(length(bad) > 1L)",95],["bad <- TRUE",140],["} else if(length(bad)) {",283],["if (length(bad)) {",246],["if(length(bad))",164]],"useCount":9613},{"word":"base","context":[["if (file.exists(base.path1))  {",234],["is_base <- basename(dir) == \"base\"",242],["nobj <- base",168],["base.path2 = \"/Users/gino/kaggle/fast-furious/gitHub/fast-furious/data_process/\"",136],["ret = paste0(base.path1,\"/\")",158],["ns <- asNamespace(ns, base.OK = FALSE)",156],["ret = base.path2",176],["base.path1 = \"\"",156],["base.path2 = \"\"",156],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136]],"useCount":13415},{"word":"basename","context":[["db <- tryCatch(Rd_db(basename(outDir), lib.loc = dirname(outDir)),",62],["dir_name <- basename(dir)",66],["files2 <- files2[! basename(files2) %in%",58],["is_base <- basename(dir) == \"base\"",242],["sQuote(basename(bad_vignettes))),",96],["row.names(rdas) <- basename(row.names(rdas))",66],["row.names(rdas2) <- basename(row.names(rdas2))",66],["paste(\"when running code in\", sQuote(basename(file))),",60],["== 3L) bad <- c(bad, basename(f))",60],["nsInfo <- parseNamespaceFile(basename(dir), dirname(dir))",192]],"useCount":5877},{"word":"be","context":[["stop(\"argument 'package' must be of length 1\")",667],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' @param inputParams Either an R object that will be converted into JSON",498],["# along with this program.  A copy can be cound in the R installation",234],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["#           curl, javac, java must be installed.",120],["## FIXME: this does not need to be run in another process",128],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["## to be used",173],["stop(\"current working directory cannot be ascertained\")",190]],"useCount":37663},{"word":"before","context":[["## some have had space before ,",46],["# To create a stringency gene plots before normalization",32],["# To create a density plots before normalization",32],["## need the number of points before subsetting",34],["## most likely error before the first example",32],["cat(\"\\n\", \"\\n\", \"Example dataset before function call\", \"\\n\", \"\\n\")",36],["stop(gettextf(\"package %s was built before R 3.0.0: please re-install it\",",40],["# To create a CDF plots before normalization",32],["## we need to do this before installation",32],["# delete the extra rows before saving",46]],"useCount":2264},{"word":"beta","context":[["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["rho.fix = FALSE, beta.fix = TRUE,",122],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["beta = beta,",98],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["beta.attempts = 50, xi.attempts = 50,",87],["beta = beta,",98]],"useCount":5383},{"word":"bg","context":[["bg = 'transparent',",43],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = \"auto\")",122],["pointsize = 12, bg = \"white\")",104],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = 82)",41],["par(bg=bg, font.main = 2, font.lab = 2)",43],["if(!missing(bg)) new$bg <- bg",47],["if(!missing(bg)) new$bg <- bg",47],["if(!missing(bg)) new$bg <- bg",47],["}, bg = \"transparent\")",45],["par(bg=bg, font.main = 2, font.lab = 2)",43]],"useCount":2402},{"word":"bin","context":[["#!/usr/bin/env Rscript",1591],["#!/usr/bin/Rscript",680],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["#!/usr/bin/r -t",72],["#!/usr/bin/Rscript --vanilla",84],["#!/usr/bin/R",88],["#! /usr/bin/Rscript",91],["#! /usr/bin/env Rscript",126],["wd2 <- setwd(file.path(R.home(\"bin\"), \"exec\"))",104]],"useCount":4863},{"word":"binary","context":[["# samtools binary",33],["if(binary.target){",54],["# Redistribution and use in source and binary forms, with or without",77],["if(!binary.target){",45],["samtools.binary <- c(file.path(chipster.tools.path, \"samtools\", \"samtools\"))",43],["# binary",52],["sfcheck.binary <- file.path(chipster.module.path ,\"/shell/sfcheck.sh\")",50],["## Redistribution and use in source and binary forms, with or without",45],["sfcheck.command <- paste(sfcheck.binary, emboss.path, inputfile.to.check )",39],["## Now see what we can get as binary packages.",35]],"useCount":2438},{"word":"black","context":[["axis.text=element_text(color='black'),",119],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=1, lcol=\"black\")",833],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["col = \"black\",",109]],"useCount":8964},{"word":"block","context":[["for(t in 1:block){",123],["writeContent(block[[1L]], tag)",96],["srcref <- attr(block, \"srcref\")",42],["writeContent(block, tag)",251],["div(style=\"display:inline-block\",",43],["writeContent(block[[2L]], tag)",142],["block <- env$block",132],["block <- env$block",132],["block <- blocks[[i]]",67],["if (length(block) > 1L) {",43]],"useCount":3869},{"word":"blue","context":[["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65],["colours2=c( \"banding\"=\"blue\",  \"sham\"=\"green4\"  ),",114],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["colours2=c( \"week0_EEDheto\"=\"red\",  \"week0_EEDko\"=\"red4\",   \"week4_EEDheto\"=\"skyblue\",  \"week4_EEDko\"=\"blue\" ),",94],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["col=\"blue\")",74],["abline(v=quickTP()[[2]], col=\"blue\")",480],["colours2=c(\"red\",  \"red4\",   \"blue\",    \"blue4\" ),",72],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833]],"useCount":4042},{"word":"body","context":[["exprs <- c(exprs, lapply(mlist, body))",66],["toExpr <- body(f)",54],["body(f, envir = environment(f)) <- expr",54],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["isS3 <- function(fct)isTRUE(grep(\"UseMethod\", body(fct)) > 0)",51],["tags$body(onload=\"setvalues()\"),",73],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["respone <- httr::POST(url, body = payload)",129],["body",485]],"useCount":4748},{"word":"border","context":[["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["border = border)",40],["border = border)",40],["polygon(dens, col=\"black\", border=\"black\")",45],["col = sepcolor, border = sepcolor)",48],["border=NA)",59],["border=FALSE)",63],["panel.border=element_blank(),",73],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["panel.border = element_blank(),",316]],"useCount":2663},{"word":"both","context":[["#both",44],["if (any(label.axes.box == \"box\") || any(label.axes.box == \"both\")) {",38],["if (dendrogram %in% c(\"both\", \"row\")) {",40],["if (dendrogram %in% c(\"both\", \"column\")) {",40],["warning(\"specify 'rate' or 'scale' but not both\")",44],["if (trace %in% c(\"both\", \"column\")) {",46],["if (trace %in% c(\"both\", \"row\")) {",46],["# Testing for both correct expression and correct value",54],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["# one or both dates is \"[Not Available]\".  count tells us how many good",122]],"useCount":3762},{"word":"box","context":[["box()",1495],["box(",404],["box(lwd=2)",155],["box(lwd = 2)",118],["leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")",84],["if (any(label.axes.box == \"box\") || any(label.axes.box == \"both\")) {",38],["#box()",39],["box(bty=\"l\")",57],["return(box)",45],["box <- valueBox(",44]],"useCount":3772},{"word":"br","context":[["br(), br(),",66],["HTML('<br>'),",70],["br(),br(),",132],["br(),br(),",132],["br()",248],["HTML(\"<br>\"),",248],["tags$br(),",432],["br(),",4494],["#br(),",69],["br(), br(),",66]],"useCount":7015},{"word":"break","context":[["if (has_error) break",48],["if(!is(err, \"try-error\"))break",51],["if(dep$version >= package_version(\"2.10\")) {OK <- TRUE; break;}",66],["break}",135],["break()",145],["break;",296],["break",4443],["OK <- FALSE; break",30],["if (idx > nrow(clusters)) break",48],["if(res) break",48]],"useCount":6541},{"word":"breaks","context":[["breaks = breaks,",50],["breaks = breaks)",59],["breaks <- seq(start, maxx + incr, breaks)",52],["if(is.na(valid)) stop(\"invalid specification of 'breaks'\")",52],["scale_y_continuous(breaks =c(-.5, 0, .5, .75, 1), labels = c(\"-50%\", \"0%\", \"50%\", \"75%\", \"100%\")) +",196],["scale_x_discrete(breaks=c(1, 7, 79, 157), labels = c(\"9:30am\", \"10:00am\", \"Day 1 Close\", \"Day 2 Close\")) +",196],["breaks = breaks)",59],["breaks <- seq(start, maxx + incr, breaks)",52],["## specified number of breaks",52],["if (length(breaks) == 1) {",56]],"useCount":7317},{"word":"browser","context":[["#\tbrowser()",134],["# # browser()",170],["if(debug) browser()",93],["# find the html help file and display in the default browser",48],["#\t\tbrowser()",44],["# browser()",515],["##browser()",42],["#browser()",487],["#options(error = browser)",41],["browser()",374]],"useCount":2537},{"word":"bty","context":[["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["lty=c(1, 1), col=c(\"red\", \"green4\"), bty=\"n\")",65],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["bty = \"n\",",59],["box(bty=\"l\")",57],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["bty=\"n\")",55]],"useCount":2865},{"word":"build","context":[["} else if (a == \"--no-build-vignettes\") {",50],["args <- args0[! args0 %in% c(\"--merge-multiarch\", \"--build\")]",46],["print(\"Time it took to build GLM\")",46],["paste0(\"--build-dir=\", shQuote(build_dir)),",96],["## If not, we build the Rd db from the sources:",62],["dir.create(\"build\", showWarnings = FALSE)",62],["# Error check and build model",54],["print(\"Time it took to build GBM\")",54],["stages = c(\"build\", \"install\", \"render\"))",50],["fv <- file.path(\"build\", \"vignette.rds\")",44]],"useCount":3749},{"word":"but","context":[["reset.but  <- tkbutton(tt, text=\"Reset\", command=reset)",142],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["q.but <- tkbutton(tt,text=\"Quit\",",144],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128],["tkgrid(DimHlp.but, row=3, column=2,sticky=\"w\")",119],["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["tkgrid(DimHlp.but, row=6, column=2,sticky=\"w\")",114]],"useCount":11849},{"word":"by","context":[["# by the command he or she entered.",137],["chk.stream.pop.by.month <-",92],["#Constructing validation and train sets by sampling (20/80)",102],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["by.x = \"month.chr\", by.y = \"Month\")",598],["by.x = \"month.chr\", by.y = \"Month\")",598],["# A function implemented by Diethelm Wuertz",283],["# This file was generated by Rcpp::compileAttributes",216],["## population total and by locations",158],["## bacteria loads total and by locations",158]],"useCount":32691},{"word":"c","context":[["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["par(mfrow=c(2,1))",456],["input$quick_ewsRadioButtons), lty=c(1, 1, 1),",428],["c(",707],["par(mfrow=c(1,2))",779],["par(mfrow=c(2,2))",802],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["par(mfrow=c(1,1))",1117]],"useCount":171915},{"word":"calc","context":[["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"total.bac\"],",96],["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"accum.bac\"],",96],["manual.calc.pop.total = chk.pop[chk.pop$location == \"pasture\", \"pop\"],",96],["manual.calc.pop.total = chk.pop[chk.pop$location == \"stream\", \"pop\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"stream\", \"total.bac\"],",112],["manual.calc.pop.total = sum(chk.pop$pop),",142],["manual.calc.bac.total = sum(chk.bac$total.bac),",142]],"useCount":3888},{"word":"call","context":[["call. = FALSE)",1000],["call.=FALSE)",318],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["domain = NA, call. = FALSE)",433],["stop(msg, call. = FALSE)",398],["m <- match.call(expand.dots = FALSE)",343],["call <- match.call()",240],["call. = FALSE, domain = NA)",1289],["##' @return If the API call is successful, the parsed JSON of the API server",498]],"useCount":29697},{"word":"calls","context":[["c(gettextf(\"  %s calls:\", f),",63],["calls <- c(calls, new)",63],["unlist(lapply(bad[[\"calls\"]], function(e)",63],["calls <- c(calls, new)",63],["calls",263],["calls <- Filter(length,",150],["calls <- .find_calls(fcode[[3L]], recursive = TRUE)",63],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["calls <- list()",91],["cnames <- .call_names(calls)",66]],"useCount":5272},{"word":"can","context":[["# Check if we are running inside the H2O network by seeing if we can touch",49],["# its class can't be determined here without evaluation.",51],["\" hence its class can't be determined in an abstract\",",51],["##' @param alias If an app name is given for \\code{appNameOrID}, this can be",57],["## As going through the db to extract sections can take some time,",68],["# New version of length which can handle NA's: if na.rm==T, don't count them",72],["## R developers can use this to debug the function by running it",78],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["# You can find out more about building applications with Shiny here:",223],["# along with this program.  A copy can be cound in the R installation",234]],"useCount":7672},{"word":"cannot","context":[["stop(\"cannot handle more than one 'x' coordinate\")",35],["} else if (errorMessage == \"'from' cannot be NA, NaN or infinite\") {",36],["cntxt$stop(gettext(\"cannot compile byte code literals in code\"),",45],["stop(\"cannot determine a usable name\")",47],["## working on the sources we (currently?) cannot deal with the",104],["stop(\"current working directory cannot be ascertained\")",190],["cntxt$stop(gettext(\"cannot compile promise literals in code\"),",45],["## cannot have a corresponding object in the code.  Hence, we",34],["if(\"\" %in% j) stop(\"column name \\\"\\\" cannot match any column\")",44],["cntxt$stop(gettext(\"cannot compile this expression\"), cntxt)",44]],"useCount":4006},{"word":"case","context":[["## produce output here in case we found something.",66],["# Trivial case",71],["## special case common problems.",60],["swirl_out(\"I've executed the correct expression in case the result is needed in an upcoming question.\")",54],["ignore.case, perl, fixed, useBytes))",56],["ignore.case = TRUE)",74],["for (case in cases){",54],["value = TRUE, ignore.case = TRUE)",84],["files, ignore.case = TRUE)",92],["## The dir case.",96]],"useCount":5858},{"word":"cat","context":[["cat(\"\\n\")",4572],["cat( y, sep = \",\\n\" )",427],["cat(\"\\n\\n\")",332],["cat(paste0(sErrorMsg,\"\\n\"))",320],["cat(\"  Iteration:\", iter, \"Proposal:\\n\",",302],["cat(",248],["cat(\"\",",231],["cat(\".\")",207],["cat(\"\\n\\n\\n\")",207],["cat('\\n')",422]],"useCount":34607},{"word":"cb","context":[["cb$putcode(INVISIBLE.OP)",120],["ci <- cb$putconst(e)",134],["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["cb$putcode(RETURN.OP)",258],["cb$putlabel(end.label)",116],["end.label <- cb$makelabel()",116],["ci <- cb$putconst(call)",112],["cmpBuiltin(e, cb, cntxt)",97],["cmpSpecial(e, cb, cntxt)",101],["cb$putcode(LDNULL.OP)",105]],"useCount":7607},{"word":"cbind","context":[["train = cbind(train,tr)",114],["test = cbind(test,ts)",114],["cbind(",71],["g <- cbind(fp,rp)",49],["image(cbind(1:nc), col = ColSideColors[colInd], axes = FALSE)",41],["update <- unique(cbind(pkgs, lib))",41],["df.output.chk <- cbind(df.output.chk,",176],["tube = cbind(tube,spec_enc)",45],["cbind(dependencies[ind],",44],["tube = cbind(tube_base,bom_base)",43]],"useCount":6562},{"word":"cex","context":[["cex=1.1,",112],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158],["par(cex = 0.5)",72],["cex=1,",82],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113]],"useCount":13044},{"word":"change","context":[["a<-1:length(smiset) #change to 2 for testing",39],["change <- !nzchar(new)",36],["new[change] <- old[change]",36],["new[change] <- old[change]",36],["## to change the code for the non-installed case to only look at",34],["## the class environment of obj (change validObject too if a better way is found)",39],["names=c(\"country\",\"byVar\",\"Diff\",\"change\"),",41],["# This needs to change based on study",54],["## since we need to reinstall if those change.",33],["# change NAs to 0s",113]],"useCount":2227},{"word":"character","context":[["else character()",237],["character()",875],["return(character())",404],["c(character(),",355],["} else character()",295],["## 'directory' is a character vector of length 1 indicating",280],["result <- character()",215],["bad <- character()",231],["if(!length(x)) return(character())",236],["x <- as.character(x)",254]],"useCount":48331},{"word":"check","context":[["# check out if the file is compressed and if so unzip it",69],["## Because we really only need this for calling from R CMD check, we",66],["## Also check the code in S4 methods.",67],["a <- check.ErgmTerm(nw, arglist,",77],["# check required information",86],["print(check.normal.quantiles(r))",93],["# check",120],["stop(\"Not OK check your values\")",139],["# sanity check",148],["## check model output",158]],"useCount":14095},{"word":"checkingLog","context":[["checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))",32],["checkingLog(Log, \"compiled code\")",32],["checkingLog(Log, \"foreign function calls\")",32],["checkingLog(Log, \"R/sysdata.rda\")",32],["checkingLog(Log, \"DESCRIPTION meta-information\")",54],["checkingLog(Log, \"running R code from vignettes\")",64],["checkingLog(Log,",64],["checkingLog(Log, \"examples\")",64],["checkingLog(Log, \"re-building of vignette outputs\")",84],["checkingLog(Log, \"tests\")",32]],"useCount":2341},{"word":"children","context":[["# Just check for gPath$name amongst children and recurse if no match",50],["children=result)",57],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(",59],["children = list(",61],["child <- gTree$children[[childName]]",60],["# Search children for match",60],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212],["gTree$children[[childName]] <- newChild",90],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",63]],"useCount":3189},{"word":"chk","context":[["df.output.chk = df.output.chk, df.comp = df.comp,",592],["chk.dil <- 1E+06 # need to explain this",190],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["chk.dil = chk.dil)",592],["chk.dil = chk.dil)",592],["dil = round(chk.dil *",506],["df.output.chk = df.output.chk, df.comp = df.comp,",592]],"useCount":49679},{"word":"chr","context":[["chk.forest.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["by.x = \"month.chr\", by.y = \"Month\")",598],["chk.RAOCUT.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.pasture.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["month.chr =  factor(strftime(",46],["chk.stream.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.pasture.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.forest.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["if(is.null(chr)){",53],["gsub(\"\\\\.txt\",\"-\",chr.input)",190]],"useCount":4940},{"word":"chunk","context":[["chunk <- seq_len(min(100, ll))",32],["these <- files[chunk]",32],[".collapse(x$chunk[-1L]))",32],["files <- files[-chunk]",32],["reporter(x$chunk)",32],["chunk)",33],["data.chucks = rbind(train.chunk,test.chunk)",40],["data.chucks = rbind(train.chunk,test.chunk)",40],["chunk = chunk,",48],["chunk = chunk,",48]],"useCount":2319},{"word":"ci","context":[["ci <- cb$putconst(e)",134],["ci <- cb$putconst(call)",112],["datac$ci <- datac$se * ciMult",67],["cb$putcode(start.op, ci, end.label)",56],["agr$YMin = agr$Probability - agr$ci.low",55],["agr$YMax = agr$Probability + agr$ci.high",55],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49]],"useCount":2873},{"word":"cl","context":[["cl <- class(x)",132],["cl <- defaultCluster(cl)",106],["cl <- defaultCluster(cl)",106],["class(val) <- cl",110],["cl = makeCluster(no_cores)",206],["class(x) <- cl",216],["cl <- match.call()",230],["cl <- oldClass(x)",362],["registerDoParallel(cl)",507],["stopCluster(cl)",782]],"useCount":10660},{"word":"class","context":[["#' @rdname H2OModelMetrics-class",183],["class(result) <- \"gridListing\"",169],["class(x) <- cl",216],["#' @param object an S4 class object",160],["#' @docType class",141],["if(class(tr2)==\"phylo\" & class(ref2)==\"phylo\") {",139],["else if(class(tr2)==\"phylo\" & class(ref2)==\"multiPhylo\") {",139],["else if(class(tr2)==\"phylo\" & class(ref2)==\"multiPhylo\") {",139],["class(x) <- NULL",336],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212]],"useCount":37593},{"word":"classDef","context":[["classDef <- getClassDef(Class)",42],["if(is.null(classDef))",64],["assignClassDef(Class, classDef, where)",109],["classDef",63],["classDef <- getClassDef(Class, where)",44],["where <- .classDefEnv(classDef)",44],["classDef <- Class",63],["classDef <- getClass(Class)",60],["superClasses <- names(classDef@contains)",51],["classDef@sealed <- TRUE",44]],"useCount":4205},{"word":"className","context":[["Class <- ClassDef@className",61],["dQuote(def@className)),",44],["Class <- Class@className",44],["dQuote(ClassDef@className),",52],["className <- ClassDef@className",54],["className <- ClassDef@className",54],["dQuote(thisClass@className)),",56],["dQuote(className)),",101],["dQuote(className),",125],["dQuote(def@className),",132]],"useCount":3065},{"word":"classes","context":[["for (i in 1:classes) {",59],["#' @keywords classes",66],["classes <- as.character(signature)",60],["for(i in 1:classes) {",84],["for(i in seq_along(classes)) {",90],["if(length(classes)) {",44],["#' @include plotting-classes.R",49],["classes <- try(class(temp), silent=TRUE)",51],["## S4 classes or methods.",102],["for(cls in classes){",52]],"useCount":6944},{"word":"clean","context":[["## clean up",206],["clean <- TRUE",112],["do_cleanup(clean)",78],["\"--no-clean\", \"--no-index\",",64],["} else if (a %in% c(\"-c\", \"--clean\")) {",48],["# clean workspace",50],["clean <- FALSE",60],["# clean up",60],["set_folders(\"clean\")",72],["if(clean) {",69]],"useCount":3522},{"word":"close","context":[["close(conn)",139],["close(con)",743],["on.exit(close(con))",690],["close(pb)",313],["on.exit(close(file))",278],["on.exit(progress$close())",205],["close(zz)",197],["close(f)",191],["## close the pdf file",158],["close(fileConn)",108]],"useCount":6284},{"word":"cluster","context":[["#cluster",55],["# cluster sizes and number of clusters",56],["dplyr::select(cluster.id)",145],["a.trial.min.cut(the.graph, the.true.cluster, theta, method, overlap,",73],["colnames(dfCluster) = c('gene', 'cluster')",77],["the.true.cluster = load.true.cluster(file.path=node.path);",112],["the.true.cluster = load.true.cluster(file.path=node.path);",112],["ground.truth.clusters=the.true.cluster));",210],["library(cluster)",182],["group_by(cluster.id) %>%",169]],"useCount":5074},{"word":"cmd","context":[["res <- system(cmd)",198],["safeSystem(cmd)",258],["system(cmd)",249],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["cmd",89],["lapply(cmd, system)",81],["cmd <- sprintf(\"rm -fr %s\", tmpdir_name)",76],["cat(cmd)",66],["function(cmd,",64],["out <- R_runR(cmd, R_opts2, env)",64]],"useCount":4594},{"word":"cntxt","context":[["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["ncntxt <- make.nonTailCallContext(cntxt)",183],["if (cntxt$tailcall)",108],["if (cntxt$tailcall) {",105],["cmpSpecial(e, cb, cntxt)",101],["cmpBuiltin(e, cb, cntxt)",97],["cntxt)",157],["ncntxt <- make.argContext(cntxt)",138],["if (! suppressAll(cntxt))",94],["cntxt",75]],"useCount":7081},{"word":"code","context":[["##' @seealso \\code{\\link{dxHTTPRequest}}",498],["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["##' \\code{FALSE}.",498],["##' \\code{inputParams} directly.  (Default is \\code{TRUE}.)",498],["test(id=0, code={",3834],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' \\code{inputParams} directly.  (Default is \\code{TRUE}.)",498],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498]],"useCount":32228},{"word":"code_env","context":[["objects_in_code <- sort(names(code_env))",147],["mlist <- .get_S4_methods_list(f, code_env)",132],["if(file_test(\"-f\", sys_data_file)) load(sys_data_file, code_env)",137],["code_env <- if(packageHasNamespace(package, dirname(dir)))",96],["bad_closures <- find_bad_closures(code_env)",192],["f <- get(f, envir = code_env) # get is expensive",92],["## Load package into code_env.",238],[".source_assignments_in_code_dir(code_dir, code_env, meta)",261],["code_env <- new.env(hash = TRUE)",261],["code_env <- .package_env(package)",271]],"useCount":3938},{"word":"coef","context":[["dimnames(coef) <- list(dn, colnames(y))",33],["coef.table <- cbind(coef.p, s.err, tvalue, pvalue)",39],["coef.table <- cbind(coef.p, s.err, tvalue, pvalue)",39],["dimnames(coef.table) <- list(names(coef.p),",41],["dimnames(coef.table) <- list(names(coef.p),",41],["coef",42],["coef[mask] <- res$par",43],["dfGenes = topTable(fit, coef = n[i], number = Inf)",49],["coef(ModelTDTNVar)",66],["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110]],"useCount":4133},{"word":"col","context":[["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["abline(v=quickTP()[[2]], col=\"blue\")",480],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["layout.pos.col = matchidx$col))",203],["layout.pos.col = matchidx$col))",203],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121]],"useCount":30622},{"word":"collapse","context":[["indent = 2, exdent = 2), collapse = \"\\n\"),",173],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["collapse = \"\\n\")",442],["collapse = \", \")),",314],["collapse = \"\\n\"))",184],["printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")",176],["args <- paste(args, collapse=\" \")",112],["printLog(Log, paste(c(out, \"\"), collapse = \"\\n\"))",129],["paste(\"c(\",paste(prop, collapse=\",\"),\")\",",152],["collapse = \"\\n\"),",166]],"useCount":19652},{"word":"colnames","context":[["list.bs_mat = bootstrap_sample( colnames(train.dat), train.resp, BS=BS)",67],["#' @rdname h2o.colnames",54],["train.resp = as.character(train.info$response[match(colnames(train.dat),as.character(train.info$patient))])",57],["print(symnum(correl, abbr.colnames = NULL))",53],["colnames(performances)=c(\"c01\", \"c02\", \"c03\", \"c04\");",58],["colnames(dfCluster) = c('gene', 'cluster')",77],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["train_pats = colnames(train_dat)",115],["#colnames(x) <- c(\"j\",\"ref\",\"rf\",\"pd\")",139],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142]],"useCount":10722},{"word":"color","context":[["legend.text = element_text(color=\"black\", size=16),",40],["geom_point(size = 3, color=\"red\") +",289],["# draw the heatmap  color='-RdBu:50'",70],["color = boxcolor",46],["# Set color range",44],["aheatmap(m1, color=c('blue', 'black', 'red'), breaks=0, scale='none', Rowv = TRUE,",43],["color = color,",42],["color = color,",42],["axis.text=element_text(color='black'),",119],["p = ggplot(dm, aes(x = index, y = value, group = X2, color=class)) +",37]],"useCount":4920},{"word":"colour","context":[["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\", adjust = 3) + scale_x_discrete(limits=sampleRank2)  +",55],["panel.grid.major = element_line(colour = \"gray\"),",62],["axis.ticks =element_line(colour = \"black\"),",70],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["axis.line = element_line(colour = \"black\"),",60]],"useCount":5427},{"word":"cols","context":[["cols <- names(y)",88],["# - cols:   Number of columns in layout",110],["# - layout: A matrix specifying the layout. If present, 'cols' is ignored.",111],["multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {",164],["# nrow: Number of rows needed, calculated from # of cols",192],["# If layout is NULL, then use 'cols' to determine layout",195],["ncol = cols, nrow = ceiling(numPlots/cols))",199],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["ncol = cols, nrow = ceiling(numPlots/cols))",199]],"useCount":6187},{"word":"column","context":[["column(",411],["column(6,",567],["column(3,",648],["column(4,",671],["column(jc)",388],["column(12,",370],["column(2,",314],["column(8,",167],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["column(5,",152]],"useCount":14002},{"word":"columns","context":[["# - cols:   Number of columns in layout",110],["# ncol: Number of columns of plots",192],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["# keep only lon and lat columns",51],["if(anyNA(cols)) stop(\"undefined columns selected\")",64],["#' @format Data frame with columns",64],["# Rename columns",48],["stop(\"numbers of columns of arguments do not match\")",44],["##### Determine the columns to keep and the column to add",43],["stop(\"`x' must have at least 2 rows and 2 columns\")",42]],"useCount":5774},{"word":"com","context":[["#' @author Derek H. Ogle, \\email{derek@@derekogle.com}",133],["#' \\url{https://code.google.com/p/lagrange/}",75],["#'@author Sili Fan \\email{fansili2013@gmail.com}",88],["# http://www.rstudio.com/shiny/",53],["##  Marco Guazzone (marco.guazzone@gmail.com)",72],["##' @contact elahi.robin@gmail.com",70],["# Author : Sylvain Mareschal <maressyl@gmail.com>",59],["# http://shiny.rstudio.com",168],["#' \\url{http://phylo.wikidot.com/matzke-2013-international-biogeography-society-poster}",218],["#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}",139]],"useCount":3802},{"word":"command","context":[["# command",50],["command=function(){USTHB()})",140],["# by the command he or she entered.",137],["system(echo.command)",83],["system(command);",67],["system(command.full)",58],["check2showcommand(params$opt$showc, command, file2process.my2);",51],["reset.but  <- tkbutton(tt, text=\"Reset\", command=reset)",142],["command=function() tkdestroy(tt))",152],["system(command)",182]],"useCount":3166},{"word":"commandArgs","context":[["args = commandArgs(trailingOnly = TRUE)",80],["args = commandArgs(trailingOnly=TRUE)",91],["args<-commandArgs(TRUE)",154],["args <- commandArgs()",79],["ipPort <- get_args(commandArgs(trailingOnly = TRUE))",159],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["## be what commandArgs(TRUE) would return, that is a character vector",78],["args <- commandArgs(TRUE)",1677],["args <- commandArgs(trailingOnly = TRUE)",826],["args <- commandArgs(trailingOnly=TRUE)",257]],"useCount":8446},{"word":"comment","context":[["# TODO: Add comment",388],["doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",304],["## comment",70],["# library(microbenchmark)  # comment out for beowulf",60],["fill = TRUE, comment.char = \"\", ...)",44],["## ----message=FALSE, comment=NA-------------------------------------------",44],["email = NULL, role = NULL, comment = NULL,",38],["comment.char=\"\",",36],["comment=TRUE",34],["doc <- xmlTreeParse(fileName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",33]],"useCount":2767},{"word":"comp","context":[["main='PCA comp 2 and 3')",48],["if (!is.numeric(comp) || any(comp < 1))",60],["if (!is.numeric(comp) || any(comp < 1))",60],["main='PCA comp 1 and 2')",50],["main='PCA comp 1 and 3')",48],["comp <- F",43],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["#all reference trees to one comp tree",139],["stop(\"invalid vector for 'comp'.\")",64]],"useCount":3129},{"word":"complete","context":[["## (asserted not to be needed if the subclass slot is complete)",54],["OK <- complete.cases(x, y)",45],["# If it's a complete match, look for gPath$name amongst child",50],["## number of complete cases",90],["complete <- function(directory, id = 1:332) {",130],["plot[[\"status\"]] <- \"complete\"",145],["cat(\" failed to complete the test\\n\")",32],["sgp.projections.use.only.complete.matrices=sgp.projections.use.only.complete.matrices,",32],["complete <- TRUE",34],["cat(\"data set\", names(data[i]), \": run complete\\n\")",36]],"useCount":2486},{"word":"con","context":[["close(con)",743],["on.exit(close(con))",690],["cat(file = con, sep=\"\\n\",",90],["read_next_non_whitespace_and_seek_back(con)",105],["} else con <- file",125],["x <- .con_read_bytes(con, 1L)",133],["if(is.character(con)) {",135],["con,",142],["function(con)",146],["dbDisconnect(con)",474]],"useCount":10322},{"word":"conf","context":[["attr(cint, \"conf.level\") <- conf.level",72],["# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1",62],["if(conf.int)",66],["ciMult <- qt(conf.interval/2 + .5, datac$N-1)",65],["if(conf.int) {",65],[",conf.level = .95",39],["conf.interval=.95, .drop=TRUE) {",44],["attr(cint, \"conf.level\") <- conf.level",72],["alpha <- 1 - conf.level",81],["stop(\"'conf.level' must be a single number between 0 and 1\")",84]],"useCount":2188},{"word":"conn","context":[["#dbListTables(conn)",50],["conn <- new(\"H2OClient\", ip=myIP, port=myPort)",49],["conn <- dbConnect(drv, \"jdbc:hsqldb:hsql://localhost:9005/proc_hom\", \"SA\", \"\")",48],["conn <- h2o.getConnection()",46],["close(conn)",139],["dbSendUpdate(conn,sql)",52],["stopifnot(is(conn, \"H2OConnection\"))",72],["conn <- h2o.init(ip=myIP, port=myPort, startH2O = FALSE)",94],["test <- function(conn) {",100],["dbDisconnect(conn)",136]],"useCount":3962},{"word":"console","context":[["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["# Get the last expression which the user entered at the R console.",136],["cat(\"\\f\") # clear console",97],["#flush.console()",38],["if(k%%1000==0) cat(k,\"\");flush.console()",28],["utils = c(\"close.socket\", \"flush.console\", \"update.packages\")",26],["## back to the console",25],["# TODO: Be careful, there might be a limit on how long a vector you can define in console",24],["flush.console()",1209],["utils::flush.console()",160]],"useCount":2501},{"word":"contains","context":[["contains = c('eml-2.1.1', 'character')",167],["##   measurevar: the name of a column that contains the variable to be summariezed",43],["superClasses <- names(classDef@contains)",51],["contains = 'list',",128],["ext <- ClassDef@contains",81],["getClass(Class, where = where)@contains",52],["Class@contains",52],["contains = sampler_BASE,",39],["#'   # load that contains the login details",39],["contains = \"BaseCompute\",",41]],"useCount":5698},{"word":"content","context":[["content <- table[[2L]]",43],["tags <- RdTags(content)",43],["plot[[\"data\"]]  <- content",43],["list(file = file, \"content-type\" = mime_type(path))",53],["content,",53],["##' .. content for \\details{} ..",56],["\"content-type\" = 'text/html',",62],["content <- .endSaveImage(image)",84],["content = function(file){",90],["content = function(file) {",1166]],"useCount":3739},{"word":"control","context":[["if(!is.null(d <- defaults$control))",68],["control <- d",68],["control",75],["control = control,",103],["control = control,",103],["control = list(), program = NULL, dictionaries = character())",105],["str(control)",108],["InitializeR(duplex.output.to = control$path.out.log)",59],["control = optim.control)",59],["control = optim.control)",59]],"useCount":5737},{"word":"copy","context":[["file.copy(res_file,new_loc,overwrite=T)",49],["## The S4 'system' does **copy** base code into packages ....",60],["file.copy(latex_log, paste0(pkgname, \"-manual.log\"))",64],["file.copy(files, cpdir)",66],["file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",114],["# along with this program.  A copy can be cound in the R installation",234],["# along with this program; if not, a copy is available at",314],["copy.date = TRUE)",54]],"useCount":3908},{"word":"cor","context":[["ans$symbolic.cor <- symbolic.cor",51],["ans$symbolic.cor <- symbolic.cor",51],["cor.test(c(1, 2, 3, 4, 5), c(8, 6, 7, 5, 3), method = \"kendall\",",54],["if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)",49],["if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)",49],["mCor = cor(mCounts)",46],["summary(fit, cor = TRUE)",43],["symbolic.cor = x$symbolic.cor,",53],["symbolic.cor = x$symbolic.cor,",53],["cor.test(c(1, 2, 3, 4, 5), c(8, 6, 7, 5, 3), method = \"spearman\",",54]],"useCount":2445},{"word":"could","context":[["## this could be noisy",56],["## Of course, these could still be 'documented' via \\alias.",34],["## CLASS can be a syntactic name (we could be more precise about the",33],["## data.frame (could add support for other classes later) variable",34],["if(file.exists(code_file))      # could be data-only",34],["## 'file' could be a file path",52],["## the first argument could be named, or could be a variable name.",66],["## the first argument could be named, or could be a variable name.",66],["## we could do something like",66],["## We need to rempve '...': OTOH the argument could be NULL",66]],"useCount":3366},{"word":"count","context":[["count <- count + 1",368],["# New version of length which can handle NA's: if na.rm==T, don't count them",72],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["range <- count:(count+length(new.list)-1)",187],["count <- count + 1",368],["count <- 1",348],["count <- 0",298],["count <- count + length(new.list)",187],["count <- count + length(new.list)",187],["range <- count:(count+length(new.list)-1)",187]],"useCount":6619},{"word":"counts","context":[["counts",36],["top <- max(c(xhist$counts, yhist$counts))",69],["top <- max(c(xhist$counts, yhist$counts))",69],["return(counts)",53],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["equidist = TRUE), .Names = c(\"breaks\", \"counts\", \"density\",",44],["hy <- c(h$counts, h$counts[length(h$counts)])",40],["hy <- c(h$counts, h$counts[length(h$counts)])",40],["hy <- c(h$counts, h$counts[length(h$counts)])",40]],"useCount":2681},{"word":"create","context":[["if (!file.exists(tmpd) && !dir.create(tmpd))",74],["dir.create(path)",103],["dir.create(\"data\")",100],["dir.create(tmpdir, showWarnings=FALSE)",96],["stop(gettextf(\"unable to create temporary directory %s\",",90],["# create widget",81],["if (!file.exists(\"pirana_reports\")) {dir.create (\"pirana_reports\")}",75],["int_slope(dsL) # create scatterplot",90],["# observed_predicted(dsL) # create scatterplot",82],["##' \\code{inputParams} to create the JSON string or pass through the value of",498]],"useCount":10027},{"word":"csv","context":[["cars <- h2o.uploadFile(locate(\"smalldata/junit/cars_20mpg.csv\"))",103],["tkgrid(tklabel(tt,text = \"Output in Excel (.csv) : \"),sticky = \"w\")",85],["prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",85],["dat <- read.csv(text=input$text, sep=\"\\t\")",79],["the.graph = load.graph.csv(edge.path, node.path);",108],["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))",74]],"useCount":12836},{"word":"current","context":[["stop(\"current working directory cannot be ascertained\")",190],["checkIdentical(target, current)",247],["!do.call(depends$op, list(current, depends$version))",68],["current",80],["if(is.null(current))",68],["## This is patterned after the current codoc().",68],["if(data.class(target) != data.class(current)) {",64],["current <- wc()",54],["current <- as.numeric_version(\"3.0.1\")",54],["current.device <- dev.cur()",62]],"useCount":7328},{"word":"cv","context":[["cv.mat[fd.ix!=j,j] = \"train\"",56],["rownames(cv.mat) = obs",56],["print(bst.cv)",50],["cv.nround = cv.nround * 2",44],["cv.nround = cv.nround * 2",44],["if (early.stop < cv.nround) {",43],["return(cv.mat)",56],["cv.mat[fd.ix==j,j] = \"validation\"",56],["cv.mat = matrix(\"NULL\",nrow=length(obs),ncol=k)",56],["cv <- covmat$cov",37]],"useCount":2740},{"word":"d","context":[["d",516],["return(d)",458],["d <- dim(x)",230],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["if(!file_test(\"-d\", dir))",170],["for(i in 1:d.size){",147],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["head(d)",130],["d.n=20 # Dimension of the noise process driving the MA",110]],"useCount":26661},{"word":"dQuote","context":[["dQuote(Class),",180],["dQuote(ClassDef@className),",52],["dQuote(def@className),",132],["dQuote(dataPartClass)),",126],["dQuote(className),",125],["dQuote(className)),",101],["msg, dQuote(Class),",84],["dQuote(class(object))),",71],["dQuote(thisClass@className)),",56],["dQuote(Class)),",271]],"useCount":3305},{"word":"dat","context":[["return(dat)",304],["dat",219],["head(dat)",121],["fm_test_real <- t(as.matrix(read.table('../data/fm_test_real.dat')))",110],["fm_train_real <- t(as.matrix(read.table('../data/fm_train_real.dat')))",110],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["datvar <- datVar() # requested variable name, x of dat.x",86],["train.dat = tmp_list[[1]]",85],["str(dat)",84]],"useCount":10706},{"word":"data","context":[["#' @docType data",1301],["data",880],["data.frame(",754],["library(data.table)",1845],["return(data)",2047],["data <- data.table::rbindlist(data, fill=TRUE)",608],["data <- data.table::rbindlist(data, fill=TRUE)",608],["data$ccd <- XML::xmlName(root)",608],["data <- data.table::rbindlist(data, fill=TRUE)",608],["data = list(",494]],"useCount":128377},{"word":"dataset","context":[["dataset",64],["#' @param x A TRONCO compliant dataset.",64],["return(dataset)",79],["onco <- OncoDev14(port=PORT, scriptDir=scriptDir, userID=userID, datasetNames=dataset)",42],["if (is.null(dataset)) {",59],["switch(input$dataset,",49],["if (is.null(dataset))",46],["\"does not have a dataset associated with it in model\",",43],["# Add the file names recursively, scrolling the whole spectral dataset",43],["session$sendCustomMessage(type = \"showalert\", \"Analysis report generated and linked to the current dataset.\")",43]],"useCount":4634},{"word":"datasets","context":[["#' ## NarrowPeak and Peak datasets from the same experiment must",30],["### Keywords: datasets",34],["hdfs_data_file = \"/datasets/1Mx2.2k.csv\"",43],["hdfs_data_file = \"/datasets/15Mx2.2k.csv\"",44],["#remove datasets with too many missing top gene features",44],["#' ## Loading datasets",44],["# get the datasets",56],["#' @keywords datasets",789],["library(datasets)",202],["hdfs_data_file = \"/datasets/airlinesbillion.csv\"",68]],"useCount":2496},{"word":"date","context":[["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["write(paste0(sWarningMsg,\" \",date()),file=sLogFile,append=TRUE)",54],["dateDownloaded <- date()",57],["# removing the date column",76],["# seperating out the elements of the date column for the train set",79],["y.date = \"DateTime_numeric\", index = \"SP\", est.win = 390, digits = 6,",93],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["#   $date [1] \"7/12/2006\"",100],["date()",172],["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174]],"useCount":6284},{"word":"db","context":[["function(db)",181],["dbDisconnect(db)",201],["db",252],["poped.db <- returnArgs[[2]]",344],["db <- .read_description(dfile)",401],["db <- db[!ind]",147],["db <- db[!ind]",147],["db <- if(!missing(package))",148],["depends <- .get_requires_from_package_db(db, \"Depends\")",151],["function(object, db, with.tables, ...){",154]],"useCount":19858},{"word":"debug","context":[["# debug",79],["if (debug) {",114],["if(debug) {",98],["if(debug) browser()",93],["if (debug)",86],["debug <- FALSE",83],["#'@param verbose - flag (T/F) to print debug info",49],["debug <- TRUE",59],["if(.grid$debug)",64],["## R developers can use this to debug the function by running it",78]],"useCount":2183},{"word":"def","context":[["newpkg <- def@package",96],["par(def.par)",151],["def",148],["if(is.null(def)) {",147],["def.par <- par(no.readonly = TRUE)",142],["if(is.null(def))",60],["sQuote(def@package),",72],["def <- getClassDef(Class, value, NULL)",81],["def <- .getGeneric(f, value)",81],["dQuote(def@className),",132]],"useCount":9083},{"word":"default","context":[["default.units=default.units,",81],["default.units=default.units,",81],["default.units=\"npc\",",287],["x <- unit(x, default.units)",181],["y <- unit(y, default.units)",181],["if (is.na(tmp)) default",98],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["default",88],["## nitrate and sulfate; the default is 0",93],["default.units=\"native\",",102]],"useCount":13557},{"word":"defined","context":[["## since we defined the resamples",37],["fmt <- \"handler for '%s' is already defined for another package\"",45],["ClassDef <- getClass(cl) # fails if cl not a defined class (!)",39],["\" not defined because of singularities)\\n\", sep = \"\")",38],["stop(gettextf(\"'%s' not defined for \\\"POSIXt\\\" objects\", .Generic),",76],["print(\"input theme not defined, using orginal one for manuscript.\")",34],["# #' ## The function is currently defined as",82],["# If do_test is not defined globally define it here locally by un-commenting it",46],["# check if the input object(s) is(are) defined in all the studies",51],["stop(gettextf(\"'%s' not defined for \\\"difftime\\\" objects\", .Generic),",57]],"useCount":3779},{"word":"definition","context":[["definition=function(object) {",41],["## -- parameter definition function",61],["definition = function(x) {",40],["definition = function(x, Theta){",63],["definition = function(object){",64],["definition = function(object, ...) {",82],["# This is the user-interface definition of a Shiny web application.",121],["definition = function(x){",136],["definition = function(object, value) {",178],["definition = function(object) {",190]],"useCount":5341},{"word":"dendrogram","context":[["dendrogram <- match.arg(dendrogram)",42],["dendrogram <- \"column\"",42],["ddr <- as.dendrogram(hcr)",108],["stop(\"column dendrogram ordering gave index of wrong length\")",107],["stop(\"row dendrogram ordering gave index of wrong length\")",107],["ddc <- as.dendrogram(hcc)",106],["else dendrogram <- \"none\"",55],["rowInd <- order.dendrogram(ddr)",123],["colInd <- order.dendrogram(ddc)",160],["dendrogram <- \"row\"",42]],"useCount":2915},{"word":"density","context":[["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["subgrid.density.relative.to.bandwidth=TRUE # is subgrid.density given relatively to the bandwidth?",91],["else if (density.info == \"histogram\") {",40],["if (density.info == \"density\") {",40],["density.info <- match.arg(density.info)",42],["density.info <- match.arg(density.info)",42],["equidist = TRUE), .Names = c(\"breaks\", \"counts\", \"density\",",44],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["subgrid.density.relative.to.bandwidth=TRUE # is subgrid.density given relatively to the bandwidth?",91]],"useCount":2573},{"word":"deparse","context":[["DNAME <- deparse(substitute(x))",130],["Call <- deparse(e[[1L]])[1L]",66],["keep <- sapply(e, function(x) deparse(x)[1L] != \"...\")",66],["deparse(substitute(x)) ))",68],["if (!is.character(linktemp)) linktemp <- deparse(linktemp)",82],["paste0(\"  \", deparse(x[[1L]]), \"(\", deparse(x[[2L]]), \", ...)\")",90],["paste0(\"  \", deparse(x[[1L]]), \"(\", deparse(x[[2L]]), \", ...)\")",90],["deparse(conditionCall(res))[1L],",102],["series <- deparse(substitute(x))",103],["pkg <- deparse(e[[2L]])",66]],"useCount":6449},{"word":"dependencies","context":[["pkgs <- getDependencies(pkgs, dependencies, available, lib)",44],["## Are all namespace dependencies listed as package dependencies?",34],["if(is.logical(dependencies) && is.na(dependencies))",38],["if(is.logical(dependencies) && is.na(dependencies))",38],["function(.Object, flatModel, model, labelsData, dependencies) {",40],["function(.Object, dependencies) {",40],["dependencies = FALSE, libs_only = FALSE,",44],["cbind(dependencies[ind],",44],["## dependencies.",44],["return(dependencies)",70]],"useCount":2902},{"word":"depends","context":[["depends <-",116],["!do.call(depends$op, list(current, depends$version))",68],["status <- if(inherits(depends$version, \"numeric_version\"))",68],["!do.call(depends$op, list(current, depends$version))",68],["as.numeric(sub(\"^r\", \"\", depends$version))))",68],["else !do.call(depends$op,",68],["for(depends in deps) {",68],["# list the user inputs the tab depends on (easier to read the code)",94],["depends <- .get_requires_from_package_db(db, \"Depends\")",151],["depends <- trimws(unlist(strsplit(val, \",\")))",44]],"useCount":3099},{"word":"depth","context":[["attr(result, \"depth\") <- depth(x)",33],["grep <- rep(grep, length.out=depth(gPath))",90],["if (depth(gPath) == 1) {",70],["# Special case when strict is FALSE and depth(gPath) is 1",50],["(!strict && depth(gPath) == 1) ||",50],["if (!strict && depth(gPath) == 1) {",50],["if (nameMatch(gPath$name, childName, grep[depth(gPath)])) {",40],["if (depth(gPath) > 1)",40],["attr(result, \"depth\") <- depth(x)",33],["#   n.trees = 50,interaction.depth = 1,n.minobsinnode = 1,shrinkage = 1,bag.fraction = 1,",32]],"useCount":2239},{"word":"desc","context":[["desc     = desc,",50],["desc     = desc,",50],["desc <- try(.read_description(f))",52],["encoding <- desc[\"Encoding\"]",56],["if (!is.na(desc[\"Bundle\"])) {",56],["OS_type <- desc[\"OS_type\"]",56],["sQuote(desc[\"Package\"]),",57],["if (inherits(desc, \"try-error\") || !length(desc)) {",86],["if (inherits(desc, \"try-error\") || !length(desc)) {",86],["tmp <- desc[field]",98]],"useCount":3973},{"word":"describe","context":[["#'  \\describe{",476],["\"\\\\describe\"= {",43],["## Should this allow for several \\describe blocks?",66],["## Get the \\item tags inside \\describe.",66],["##' \\describe{",72],["#'    \\describe{",74],["x <- .Rd_get_section(x, \"describe\")",79],["#'   \\describe{",91],["#' \\describe{",1303],["if (verbose) print(describe(num))",41]],"useCount":2768},{"word":"description","context":[["#' @description",2245],["#'@description",67],["description <- c(",60],["##' @description",60],["# \\description{",56],["# @description",48],["#' No description yet",45],[", description = \"NEED DESCRIPTION\"",44],["l.investigation$generate_correlation_function_in_python(fun_name=name,filename=name,description=description)",40],["l.investigation$generate_correlation_function_in_python(fun_name=name,filename=name,description=description)",40]],"useCount":4772},{"word":"details","context":[["printLog0(Log, sprintf(\"See %s for details.\\n\",",58],["##' @details",76],["### details.",85],["# if no opal login details are provided look for 'opal' objects in the environment",67],["##' .. content for \\details{} ..",56],["warning(gettextf(\"%s failed in %s() for '%s', details:\\n  call: %s\\n  error: %s\",",52],["stop(gettextf(\"%s failed in %s() for '%s', details:\\n  call: %s\\n  error: %s\",",50],["#' @details",1781],["#'@details",178],["# for full details see the file COPYING",173]],"useCount":4458},{"word":"dev","context":[["dev.hold(); on.exit(dev.flush())",254],["dev.off()",23382],["dev.off();",771],["#dev.off()",771],["# dev.off()",510],["garbage <- dev.off()",487],["dev.new()",452],["if (!interactive()) dev.off()",399],["dev.hold()",151],["dev.hold(); on.exit(dev.flush())",254]],"useCount":33837},{"word":"df","context":[["model.pop.total = sum(df.output$pop.total),",158],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk <- cbind(df.output.chk,",176],["df.output.chk <- cbind(df.output.chk,",176],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df",788],["return(df)",1189]],"useCount":28278},{"word":"dfile","context":[["dfile <- file_path_as_absolute(dfile)",128],["function(dfile)",96],["meta <- .read_description(dfile)",71],[".read_description(dfile)[\"Encoding\"] else NA",68],["if(!file_test(\"-f\", dfile))",47],["dfile <- file_path_as_absolute(dfile)",128],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["db <- .read_description(dfile)",401],[".read_description(dfile)",286],["meta <- if(file_test(\"-f\", dfile))",286]],"useCount":3152},{"word":"diff","context":[["if(any(diff)) {",32],["diff <- .diff(options, state$options)",46],["## might be diff-ing results against tests/Examples later",32],["diff <- .diff(options, state$options)",46],["diff <- NULL",46],["yya1 <- yy1 + 1/4 * diff(c(yy1, yy2))",56],["if (any(diff(x) <= 0) || any(diff(y) <= 0))",61],["if (any(diff(x) <= 0) || any(diff(y) <= 0))",61],["res <- format(res, diff = 1e5)",63],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110]],"useCount":3226},{"word":"digits","context":[["signif(mean(x),digits=4),",75],["digits = 0))",2370],["options(digits=22)",750],["options( digits = 16 )",339],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["options( digits = 16 );",106],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["y.date = \"DateTime_numeric\", index = \"SP\", est.win = 390, digits = 6,",93],["format=\"f\",digits=2),",80],["list(MYOTHERVALUE = format(my.p, digits = 2)))[2]",78]],"useCount":11649},{"word":"dil","context":[["chk.dil * (df.output[ , \"pop.total.in.stream\"] -",112],["chk.dil * (df.output$bac.total - sum(chk.bac$total.bac)) /",112],["chk.dil * (df.output[ , \"bac.total.in.stream\"] -",112],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["chk.dil <- 1E+06 # need to explain this",190],["dil = round(chk.dil *",506],["dil = round(chk.dil *",506],["chk.dil = chk.dil)",592],["chk.dil = chk.dil)",592],["dil = round(",1864]],"useCount":8514},{"word":"dim","context":[["dim(rval) <- dim(SA)",85],["nsettings <- dim(y)[3]",57],["nsets     <- dim(y)[2]",57],["if (dim(data)[1] ==0) { return(data)}",60],["dim(m)",63],["dim(games)",69],["dx <- dim(x)",72],["n <- dim(x)[1]",81],["dim(rval) <- dim(SA)",85],["d <- dim(x)",230]],"useCount":15490},{"word":"dimnames","context":[["stop(\"invalid 'dimnames' given for data frame\")",61],["dimnames(x)",37],["dimnames(.grad) <- list(NULL, .actualArgs)",55],["dimnames(YMatrix) <- list(NULL, paste(\"X\", 1:numberIndicators, sep=\"\"))",49],["dimnames(mytable) = list( c(class_p,class_n), c(class_p,class_n) )",47],["dimnames(coef.table) <- list(names(coef.p),",41],["kronecker(fred, bill, make.dimnames = TRUE)",38],["dimnames=selVars",77],["dimnames=list(",96],["dn <- dimnames(x)",180]],"useCount":6355},{"word":"dir","context":[["dir <- file_path_as_absolute(dir)",911],["dir <- file_path_as_absolute(dir)",911],["code_dir <- file.path(dir, \"R\")",636],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["dir <- find.package(package, lib.loc)",623],["function(dir)",500],["## Using sources from directory @code{dir} ...",442],["if(!dir.exists(dir))",431],["if(!dir.exists(dir))",431],["function(package, dir, lib.loc = NULL)",419]],"useCount":37215},{"word":"directory","context":[["## Using sources from directory @code{dir} ...",442],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["## 'directory' is a character vector of length 1 indicating",280],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["stop(\"current working directory cannot be ascertained\")",190],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["corr <- function(directory, threshold = 0) {",142],["pollutantmean <- function(directory, pollutant, id = 1:332) {",130],["complete <- function(directory, id = 1:332) {",130]],"useCount":8098},{"word":"dirname","context":[["if(packageHasNamespace(package, dirname(dir))) {",128],["db <- Rd_db(package, lib.loc = dirname(dir))",68],["Rd_db(package, lib.loc = dirname(dir))",127],["code_env <- if(packageHasNamespace(package, dirname(dir)))",96],["ff <- file.path(outDir, dirname[type],",72],["unlink(file.path(outDir, dirname[type], drop))",72],["have <- list.files(file.path(outDir, dirname[type]))",72],["dirpath <- dirname(path)",70],["nsInfo <- parseNamespaceFile(basename(dir), dirname(dir))",192],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565]],"useCount":6790},{"word":"distribution","context":[["# Show a plot of the generated distribution",173],["if(input$quick_cpmType == \"Exponential distribution\"){",56],["#'distribution, for a gamlss.family object to be used in GAMLSS fitting using using the",37],["# check distribution",51],["#     distribution.",54],["\"distribution of original sources:\\n\",",60],["distribution = \"multinomial\",",76],["#' @keywords ts multivariate distribution models",101],["#' model <- h2o.gbm(x = 3:9, y = 2, training_frame = hex, distribution = \"bernoulli\")",88],["if(input$cpmType == \"Exponential distribution\"){",56]],"useCount":2565},{"word":"div","context":[["tags$div(",123],["div(style=\"display:inline-block\",",43],["div(align=\"center\",conditionalPanel(",141],["</div>   \"",35],["div(class = \"login\",",30],["div(align = \"right\", style = \"margin-right:15px; margin-bottom:10px\",",31],["div(class=\"row-fluid\",",32],["<div id = 'chart_1' class = 'rChart datamaps'>",34],["div(",358],["</div>",635]],"useCount":2102},{"word":"dn","context":[["if(!is.array(x) || length(dn <- dim(x)) < 2L)",34],["if(dims < 1L || dims > length(dn) - 1L)",34],["names(coef) <- dn",33],["dimnames(coef) <- list(dn, colnames(y))",33],["if(length(dn) > 1L) {",32],["nmeffects <- c(dn[pivot[r1]], rep.int(\"\", n - z$rank))",32],["dim(z) <- dn",50],["dn <- dimnames(x)",180],["c(dn, \"t value\",\"Pr(>|t|)\"))",31],["dn <- colnames(x); if(is.null(dn)) dn <- paste0(\"x\", 1L:p)",28]],"useCount":2512},{"word":"do","context":[["!do.call(depends$op, list(current, depends$version))",68],["do.call(`c`, argv);",74],["## we do the vectorized metadata computations first, and try to",68],["else !do.call(depends$op,",68],["# #' ##--\tor do  help(data=index)  for the standard data sets.",82],["do.call(",97],["## we only source the assignments, and hence do not get any",102],["# furnished to do so, subject to the following conditions:",114],["do.call(rbind,",161],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285]],"useCount":14269},{"word":"doc","context":[["if(is.null(con) && is.null(con <- doc$con)) {",42],["file <- file.path(R.home(\"doc\"), sub(\"^/doc\", \"\", path))",42],["if(!inherits(doc, \"pdf_doc\")) stop(\"wrong class\")",42],["file <- file.path(R.home(\"doc\"), sub(\"^/doc\", \"\", path))",42],["root <- xmlRoot(doc)",56],["#' @seealso \\href{../doc/tmap-nutshell.html}{\\code{vignette(\"tmap-nutshell\")}}",36],["root <- XML::xmlRoot(doc)",312],["doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",304],["doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)",67],["con <- file(doc$file, \"rb\")",63]],"useCount":4748},{"word":"docType","context":[["#'@docType data",24],["#' @docType data",1301],["#' @docType methods",1252],["#' @docType package",689],["#' @docType class",141],["##' @docType methods",105],["## 1) \\docType{} identical to \"class\";",33],["##' @docType data",32],["##' @docType package",26],["##' @docType class",24]],"useCount":3824},{"word":"docs","context":[["list(list(name = fName, code = ffc, docs = ffd))",34],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136],["file <- vigns$docs[i]",114],["for (i in seq_along(vigns$docs)) {",83],["if (!is.null(vigns) && length(vigns$docs)) {",81],["for(i in seq_along(vigns$docs)) {",40],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/competitions/facebook-recruiting-iv-human-or-bot\"",35],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/dataset/facebook-recruiting-iv-human-or-bot\"",35],["docs = var_names_in_docs)",34],["docs_files <- list_files_with_type(docs_dir, \"docs\")",34]],"useCount":2578},{"word":"does","context":[["cstr <- paste(\"- file does not exist:\",file,\"\\n\")",85],["## (Note that as.character(sapply(exprs, \"[[\", 1L)) does not do",66],["stop(gettextf(\"file '%s' does not exist\", file),",67],["stop(\"Parameter in Parms does not exist.\")",74],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["# So swirl does not repeat execution of plot commands",135],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["## FIXME: this does not need to be run in another process",128]],"useCount":5713},{"word":"domain","context":[["appendLF = FALSE, domain = NA)",199],["domain = NA, call. = FALSE))",226],["domain = NA, call. = FALSE, immediate. = TRUE)",160],["stop(printSpssError(last.SpssError),call. = getOption(\"SPSSStatisticsTraceback\"), domain = NA)",160],["stop(msg, domain = NA)",127],["stop(printSpssError(last.SpssError),call. = FALSE, domain = NA)",103],["domain = NA)",10683],["call. = FALSE, domain = NA)",1289],["domain = NA, call. = FALSE)",433],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232]],"useCount":20735},{"word":"dontrun","context":[["#'\\dontrun{",863],["#' \\dontrun{",3090],["#'   \\dontrun{",44],["\"\\\\dontrun\"= writeDR(block, tag),",33],["#'@examples \\dontrun{",37],["##' \\dontrun{",68],["#\\dontrun{",160],["\\dontrun{",179],["#' @examples \\dontrun{",390],["#'  \\dontrun{",31]],"useCount":5073},{"word":"dots","context":[["#' @param \\dots any other passthru parameters",71],["#' @param \\dots extra arguments to be passed if `object` is of type",78],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["dots <- lapply(dots, dosub)",47],["dots <- list(...)",469],["m <- match.call(expand.dots = FALSE)",343],["# #' @param \\dots",54],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["mf <- match.call(expand.dots = FALSE)",123],["#' @param \\dots further arguments to be passed to/from this method.",97]],"useCount":4787},{"word":"double","context":[["as.double(y),",48],["storage.mode(x) <- \"double\"",156],["as.double(x),",109],["n=n, rval=double(n), NAOK=TRUE, package=\"gsw\")$rval",102],["storage.mode(y) <- \"double\"",85],["as.double(span),",67],["if (!is.double(x)) x <- as.double(x)",63],["if (!is.double(x)) x <- as.double(x)",63],[", checkDataType = function(x)is.double(x)&(x>=0)",56],["returnType(double(1))",50]],"useCount":5945},{"word":"dplyr","context":[["library(dplyr)",4151],["dplyr::rename_(",80],["dplyr::summarize(",84],["dplyr::ungroup() %>%",122],["dplyr::ungroup()",107],["dplyr::select(cluster.id)",145],["library(\"dplyr\")",278],["#' @import dplyr",321],["dplyr::mutate(",342],["require(dplyr)",535]],"useCount":8604},{"word":"draw","context":[["grid.draw(g)",79],["draw.all()",84],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["# Define server logic required to draw a histogram",93],["if (draw)",168],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["grid.draw(tmp.gt)",1992],["# draw the heatmap  color='-RdBu:50'",70],["# draw the histogram with the specified number of bins",48],["# draw some random weights ~ Poisson, add 'x1' weight col and y to df, hdf",31]],"useCount":3602},{"word":"drop","context":[["## need to drop \"units\" attribute here",51],["drop = FALSE])",52],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["as.integer(order.drop.sqr),",55],["as.integer(sum.drop.sqr),",55],["y <- drop(y)",57],["unlink(file.path(outDir, dirname[type], drop))",72],["mf$drop.unused.levels <- TRUE",77],["drop = FALSE]",104],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139]],"useCount":8738},{"word":"drug","context":[["if( drug == \"Tamoxiten\"){ drug = \"Tamoxifen\"}",21],["if( drug == \"BIBW2992\"){ drug = \"BIBW 2992\"}",21],["if( drug == \"Metexafin Gadolinium\" | drug ==\"Motexatin Gadoinium\"){ drug = \"Motexafin Gadolinium\"}",21],["if( drug == \"Metexafin Gadolinium\" | drug ==\"Motexatin Gadoinium\"){ drug = \"Motexafin Gadolinium\"}",21],["if( drug == \"CPT 11\" | drug == \"CPT11\" | drug ==\"cpt-11\"){ drug = \"CPT-11\"}",21],["if( drug == \"VP16\" | drug ==\"VP 16 (Etoposide)\" | drug ==\"Vp 16\" | drug ==\"VP 16\") { drug = \"VP-16\"}",21],["if( drug == \"VP16\" | drug ==\"VP 16 (Etoposide)\" | drug ==\"Vp 16\" | drug ==\"VP 16\") { drug = \"VP-16\"}",21],["if( drug == \"VP16\" | drug ==\"VP 16 (Etoposide)\" | drug ==\"Vp 16\" | drug ==\"VP 16\") { drug = \"VP-16\"}",21],["if( drug == \"Metexafin Gadolinium\" | drug ==\"Motexatin Gadoinium\"){ drug = \"Motexafin Gadolinium\"}",21],["if( drug == \"BIBW2992\"){ drug = \"BIBW 2992\"}",21]],"useCount":2627},{"word":"ds","context":[["ds %>%",58],["head(ds)",56],["ds <- xmlValue(n[[1]])",66],["ds <- gsub('T', ' ', ds)",86],["ds <- ds %>%",86],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))",53],["ds <- ds %>%",86],["ds <- gsub('T', ' ', ds)",86]],"useCount":2394},{"word":"e","context":[["e",212],["}, error = function(e) {",493],["error = function(e) {",620],["error = function(e)",461],["e <- get(\"e\", parent.frame())",440],["e <- get(\"e\", parent.frame())",440],["function(e)",406],["function(e) {",302],["error = function(e) NULL",270],["other_problem <<- c(other_problem, e)",234]],"useCount":37344},{"word":"e1","context":[["function(e1, e2) {",205],["function(e1, e2)",99],["e1      <- try(parse(text=dat))",77],["e1",61],["cn <- names(e1)",46],["if(.row_names_info(e1) > 0L) rn <- attr(e1, \"row.names\")",44],["nr <- .row_names_info(e1, 2L)",44],["if(.row_names_info(e1) > 0L) rn <- attr(e1, \"row.names\")",44],["callGeneric(e1@.Data, e2@.Data)",42],["return(e1)",42]],"useCount":3641},{"word":"e2","context":[["e2 <- coerceTimeUnit(e2)",40],["if (inherits(e2, \"difftime\")) e2 <- coerceTimeUnit(e2)",66],["e2 <- as.integer(e2)",40],["function(e1, e2) {",205],["funs <- .addBasicGeneric(funs, f, function(e1, e2) standardGeneric(\"\"),",41],["callGeneric(e1@.Data, e2@.Data)",42],["e2",54],["if (inherits(e2, \"difftime\")) e2 <- coerceTimeUnit(e2)",66],["function(e1, e2)",99],["if (inherits(e2, \"difftime\")) e2 <- coerceTimeUnit(e2)",66]],"useCount":3759},{"word":"each","context":[["# For each feature in the model",56],["fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))",56],["# To get the gene symbol for each Illumina ID",55],["# To get annotation for each Illumina ID",55],["## For each state, find the hospital of the given rank",56],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["# Make each plot, in the correct location",211],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["fd.ix = rep(1:tmp,each = (fd.size+1))",57],["fd.ix = rep(1:k,each=fd.size)",56]],"useCount":6350},{"word":"element_blank","context":[["axis.text.x = element_blank(),",306],["axis.title.y = element_blank(),",219],["axis.title.x = element_blank(),",214],["axis.ticks = element_blank(),",212],["axis.title.x=element_blank(),",189],["panel.grid.minor = element_blank(),",524],["panel.grid.major = element_blank(),",410],["panel.background = element_blank(),",345],["legend.title=element_blank(),",321],["panel.border = element_blank(),",316]],"useCount":10150},{"word":"element_text","context":[["strip.text = element_text(size = 12)",73],["theme(axis.text.x = element_text(angle = 90, hjust = 1)) +",72],["axis.text.y = element_text(size = rel(1.5), angle = 0)) +",189],["axis.text.x = element_text(size = rel(1.5), angle = 0)) +",171],["axis.text=element_text(color='black'),",119],["p <- p + theme(axis.text = element_text(size = 12),",99],["legend.text = element_text(size = 12),",82],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["theme(axis.text = element_text(size = 9),",378]],"useCount":7175},{"word":"elements","context":[["# seperating out the elements of the date column for the train set",79],["elements <- args[which]",55],["while (flag !=1) {   # find out where non-zero elements start",48],["# Declare table elements",46],["# the list is composed of the following elements",42],["# each of these elements is a raw data set of a corresponding study, for example",42],["elNames <- names(elements)",40],["stop(\"the elements of 'comp' must be smaller or equal than \", object$ncomp, \".\")",39],["#' @param i18n Either a character string or a named list with the optional elements \\code{context}",37],["# extract all <word> elements and children into XmlNodeList object",36]],"useCount":2112},{"word":"elk","context":[["chk.season.2.RAOCUT.elk",48],["chk.season.2.Pasture.elk.w.str.acc",32],["data = chk.elk.bac[chk.elk.bac$location == \"RAOCUT\", ],",32],["chk.elk.bac[tmp.rows, \"accum.bac\"] <-",96],["tmp.rows <- grep(\"TRUE\", with(chk.elk.bac,",96],["chk.season.1.RAOCUT.elk",48],["chk.season.2.RAOCUT.elk.w.str.acc",32],["data = chk.elk.bac[chk.elk.bac$location == \"pasture\", ],",32],["chk.season.1.Forest.elk.w.str.acc",32],["data = chk.elk.bac[chk.elk.bac$location == \"pasture\", ],",32]],"useCount":3744},{"word":"else","context":[["} else",3797],["else {",22263],["}else{",16995],["else{",5667],["else",31368],["} else {",97084],["}else {",500],["} else{",3237],["} else {}",2342],["} else resultLog(Log, \"OK\")",1491]],"useCount":248553},{"word":"email","context":[["email <- readline(\"What is your email address? \")",129],["#'@author Sili Fan \\email{fansili2013@gmail.com}",88],["#'@author Marc W. Schmid \\email{marcschmid@@gmx.ch}.",85],["email <- readline(\"What is your email address? \")",129],["#' @author Matt Owen \\email{mowen@@iq.harvard.edu}",144],["#' @author Nicholas J. Matzke \\email{matzke@@berkeley.edu}",240],["#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}",139],["#' @author Derek H. Ogle, \\email{derek@@derekogle.com}",133],["#' @author John Brzustowski \\email{jbrzusto@@REMOVE_THIS_PART_fastmail.fm}",131],["}', email, token)",129]],"useCount":4154},{"word":"empty","context":[["variable.names(fit) #should be empty",38],["stop(\"`path` must be a non-empty character string\")",39],["# Create the empty vector",43],["empty <- emptyenv()",45],["## set to empty of something non-existent.",50],["# Non-empty table",54],["## NB, link might be empty, and was in mvbutils",33],["stop(\"'file' must be a non-empty character string\")",38],["## 3) a non-empty user-defined section 'Slots'.",33],["## Check whether we can expand to something non-empty.",33]],"useCount":4219},{"word":"enc","context":[["enc <- vigns$encodings[i]",62],["switch(enc,",66],["con <- file(file, encoding=enc)",80],["enc <- db[\"Encoding\"]",123],["if(!is.na(enc) &&",158],["lines <- iconv(readLines(file, warn = FALSE), from = enc, to = \"\",",39],["if(!is.na(enc)) tmp <- iconv(tmp, \"\", enc)",48],["enc <- if(file.exists(dfile))",44],["if(!is.na(enc)) tmp <- iconv(tmp, \"\", enc)",48],["con <- file(file, encoding = enc)",45]],"useCount":3196},{"word":"encoding","context":[["con <- file(file, encoding=enc)",80],["if(is.na(encoding <- meta[\"Encoding\"]))",103],["encoding <- \"unknown\"",114],["encoding = encoding,",138],["encoding = encoding,",138],["#' @encoding UTF-8",79],["function(file, encoding = NA)",66],["exprs <- .parse_code_file(file, encoding)",60],["encoding <- desc[\"Encoding\"]",56],["encoding = getOption(\"encoding\"))",54]],"useCount":7641},{"word":"end","context":[["# Sources 7 & 8 end",328],["end.time <- Sys.time()",113],["end$isdst <- -1L",114],["} # IF end",277],["end$mday <- 1L",134],["start = 1, end = iters - burn, update = update)",127],["end",119],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112],["cb$putlabel(end.label)",116],["end.label <- cb$makelabel()",116]],"useCount":9422},{"word":"entries","context":[["Log.info(\"Duplicate-entries-in-grid-space check\")",40],["entries,",33],["## remove these function entries, but should really do better,",34],["## by comparing the explicit \\usage entries for S4 methods to",34],["entries <- NULL",41],["## Optional entries in DESCRIPTION:",34],["entries <- readRDS(INDEX)",36],["length(x) - max.print, 'entries ]\\n')",37],["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["entries <-",87]],"useCount":3011},{"word":"entry","context":[["tkgrid(tklabel(tt,text=\"Initial time (t0) : \"), t0.entry,sticky=\"w\")",76],["output.entry  <- tkentry(tt, textvariable=output)",63],["c(\"Compiled code should not call entry points which\",",60],["entry <- list(handler = h, package = package)",45],["tkgrid(tklabel(tt,text=\"Initial value (x0) : \"), x0.entry, sticky=\"w\")",50],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["## <entry>",247],["## </entry>",247],["entry",58]],"useCount":3524},{"word":"env","context":[["env <- parent.env(env)",163],["block <- env$block",132],["env",224],["env <- as.environment(env)",132],["code_env <- new.env(hash = TRUE)",261],["#!/usr/bin/env Rscript",1591],["cplexPointer(env),",187],["env <- parent.env(env)",163],["env <- parent.env(env)",163],["envir = env)",161]],"useCount":20985},{"word":"envir","context":[["envir)",138],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["}, where = envir)",151],["assign(f, fx, envir = env)",111],["envir = thisEnv)",106],["envir = env)",161],["where = envir)",263],["envir = .GenericArgsEnv)",243],["envir = compat)",689]],"useCount":22121},{"word":"environment","context":[["environment(fx) <- .BaseNamespaceEnv",93],["ev <- environment(fdef)",105],["# Notes:    Assumes unix environment.",118],["fenv <- environment(fdef)",70],["## Currently only accessible via an internal environment",82],["if (typeof(genfun) == \"closure\") environment(genfun)",125],["env <- as.environment(env)",132],["# Swirl's state, named e, is stored in the environment of the callback.",138],["environment(sys.function(1))$e",138],["where <- as.environment(where)",190]],"useCount":11241},{"word":"epsilon","context":[["N <- nrow(epsilon.obs)",60],["epsilon   = 0.000011))",56],["for (s in 1:ncol(epsilon.obs)) {",45],["epsilon <- x[[\"y\"]] - x[[\"yhat\"]]",60],["epsilon <- 1e-5",60],["epsilon.summary <- apply(epsilon, 1, quantile,",90],["epsilon.summary <- apply(epsilon, 1, quantile,",90],["epsilon = 0.000011))",44],["epsilon.500 <- matrix(epsilon.summary[2,], nrow(Data[[\"Y\"]]),",40],["epsilon.500 <- matrix(epsilon.summary[2,], nrow(Data[[\"Y\"]]),",40]],"useCount":2469},{"word":"equal","context":[["stop(\"the elements of 'comp' must be smaller or equal than \", object$ncomp, \".\")",39],["## Are all vignette dependencies at least suggested or equal to",34],["m1 <- m[-grep(\"^all\\\\.equal\", m)]",34],["msg <-  if(check.attributes) attr.all.equal(target, current, ...)",46],["all.equal(d0, d1)",36],["comm.print(all.equal(out1, out2))",74],["stopifnot(all.equal(aperm(x, c(2, 1)), t(x)))",50],["isTRUE(all.equal(expr1, expr2))",51],["isTRUE(all.equal(correctVal,e$val))",102],["var.equal = TRUE, paired = FALSE)",44]],"useCount":3947},{"word":"err","context":[["error = function(err) {",247],["if(!is(err, \"try-error\"))break",51],["print(paste(\"ERROR:  \",err))",54],["} , error = function(err) {",54],["as.integer(err),",55],["error = function(err){",64],["err <- 0",84],["err <- try({",89],["}, error=function(err) {",95],["}, error = function(err) {",117]],"useCount":2408},{"word":"error","context":[["if (inherits(res, \"try-error\"))",269],["error = function(e) NULL",270],["error = identity)",379],["error = function(e)",461],["}, error = function(e) {",493],["error = function(e) {",620],["error = function(err) {",247],["if(inherits(Mo1, \"try-error\")) {",217],["error = function(e){",169],["error = conditionMessage)",153]],"useCount":22380},{"word":"errors","context":[["errors <- character()",66],["errors <- c(errors, msg)",35],["errors <- c(errors, msg)",35],["# testing for specific errors",41],["# warnings = errors",45],["if(length(errors))",47],["## BibTeX errors.",52],["## (La)TeX errors.",52],["errors <- c(errors,",71],["errors <- c(errors,",71]],"useCount":2595},{"word":"eta","context":[["mu.eta <- function(eta)",47],["mu <- linkinv(eta)",30],["mu.eta = stats$mu.eta,",90],["mu.eta = stats$mu.eta,",90],["valideta <- function(eta) TRUE",78],["mu.eta <- function(eta)",47],["mu <- linkinv(eta <- eta + offset)",45],["eta <- drop(x %*% start)",45],["mu <- linkinv(eta <- eta + offset)",45],["linkinv <- function(eta)",36]],"useCount":2119},{"word":"eval","context":[["mf <- eval(mf, parent.frame())",81],["## ----eval=TRUE, tidy=FALSE-----------------------------------------------",124],["expected <- eval(parse(text=\"NULL\"));",135],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["if(is.matrix(eval(m$data, parent.frame())))",163],["## ---- eval=FALSE---------------------------------------------------------",171],["expected <- eval(parse(text=\"TRUE\"));",191],["mf <- eval(m, parent.frame())",204],["## ----eval=FALSE----------------------------------------------------------",211],["expected <- eval(parse(text=\"FALSE\"));",383]],"useCount":10226},{"word":"events","context":[["stopifnot(identical(model@events, result@events))",24],["# some number of the expected events will fail, often (always?) because",122],["events    = NULL,",70],["events  = NULL,",57],["events",39],["list.events <- Allevents",34],["#' @rdname simList-accessors-events",25],["event.counts <- as.list(table(unlist(lapply(events,",27],["events    = events,",32],["events    = events,",32]],"useCount":2142},{"word":"ews","context":[["# update plot legend with ews and breakpoint lines",898],["# re-scale ews statistic",193],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["# use ews time-index determination and associated value",48],["# run ews analysis on desired component",28],["# check for all valid ews arguments",27],["# display default plot attributes if there are no ews lines selected",24],["# check if breakpoint lines and ews lines can be drawn",18],["# update plot legend with only ews line",898],["# draw ews line based on radio button selection",12]],"useCount":2339},{"word":"ewsLine","context":[["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["ewsLine <- advancedGeneric()[7]",12],["ewsLine <- rbind(NA, ewsLine)",193],["ewsLine <- rbind(NA, ewsLine)",193],["ewsLine <- quickGeneric()[8]",14],["ewsLine <- advancedGeneric()[9]",13],["ewsLine <- advancedGeneric()[3]",13],["ewsLine <- advancedGeneric()[6]",12],["ewsLine <- quickGeneric()[4]",12],["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898]],"useCount":2365},{"word":"exact","context":[["sgp.exact.grade.progression=sgp.iter[[\"sgp.exact.grade.progression\"]],",32],["warning(\"cannot compute exact p-value with ties\")",33],["sub(\".*:([^_]*).*\", \"\\\\1\", attr(env, \"name\", exact = TRUE))",33],["exact = FALSE, continuity = TRUE)",36],["exact = FALSE)",37],["exact = TRUE)",39],["sgp.exact.grade.progression=TRUE,",1079],["# sgp.exact.grade.progression=TRUE,",204],["nm <- attr(envir, \"name\", exact = TRUE)",53],["if(is.null(exact))",43]],"useCount":2981},{"word":"examples","context":[["#'@examples",674],["#' @examples {",95],["checkingLog(Log, \"examples\")",64],["types = c(\"examples\", \"tests\", \"vignettes\"),",42],["# #' @examples",119],["#' @examples",18408],["# @examples",244],["##' @examples",593],["#' @examples \\dontrun{",390],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337]],"useCount":22845},{"word":"exdent","context":[["indent = 2L, exdent = 2L)",61],["indent = 2L, exdent = 2L))",62],["exdent = 2L),",208],["msg <- strwrap(paste(msg, collapse = \" \"), indent = 2L, exdent = 2L)",80],["indent = 2L, exdent = 2L),",121],["indent = 2, exdent = 2), collapse = \"\\n\"),",173],["strwrap(y[[2L]], indent = 2L, exdent = 4L)),",63],["strwrap(y[[1L]], indent = 2L, exdent = 4L),",66],["indent = 4L, exdent = 4L)))",66],["indent = 2L, exdent = 8L),",66]],"useCount":2289},{"word":"exist","context":[["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["## Implicit generic functions exist to turn method dispatch on",33],["cstr <- paste(\"- file does not exist:\",file,\"\\n\")",85],["stop(\"Parameter in Parms does not exist.\")",74],["stop(gettextf(\"file '%s' does not exist\", file),",67],["#' @param force logical, indicates how to deal with files that already exist.",38],["if(is.na(file.info(movieDir)$isdir)) stop(paste(\"movie directory does not exist\"))",38],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["# download the reactome file if it doesnt exist",35],["## whether pointers exist, so let us do this here.",33]],"useCount":2299},{"word":"exists","context":[["if(!dir.exists(dir))",431],["if(file.exists(path)) {",114],["if (file.exists(base.path1))  {",234],["# then, if the requested plot already exists, use it",228],["if(file.exists(file.path(dir, \"NAMESPACE\"))) {",203],["checkTrue(file.exists(file))",162],["if(dir.exists(code_dir)) {",150],["if (file.exists(savefile)) {",107],["checkTrue(file.exists(dir))",150],["if(!dir.exists(code_dir))",275]],"useCount":19125},{"word":"exit","context":[["on.exit({",186],["on.exit(close(con))",690],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["on.exit(close(file))",278],["on.exit()",276],["dev.hold(); on.exit(dev.flush())",254],["on.exit(progress$close())",205],["message(\"Press ESC if you want to exit this lesson and you\")",129],["\"  -h, --help\t\tprint short help message and exit\",",133],["on.exit(par(opar))",134]],"useCount":8242},{"word":"exp","context":[["checkIdentical(obs, exp)",152],["expect_equal(act, exp)",29],["LP.grid <- exp(LP.grid - logadd(LP.grid))",30],["theta <- exp(logwtheta[2])",31],["w <- exp(logwtheta[1])",31],["V=bpop[2]*exp(b[2]),",31],["breaks=round(exp(seq(log(0.5), log(10), 0.25)),1), LegendSize=0.75, PlotRef=FALSE,",33],["exp.root = NA,",40],["if(log == FALSE) dens <- exp(dens)",133],["checkEquals(obs, exp, msg = message)",204]],"useCount":3404},{"word":"expand","context":[["scale_y_continuous(expand=c(0,0)) +",47],["m <- match.call(expand.dots = FALSE)",343],["mf <- match.call(expand.dots = FALSE)",123],["else if (file.exists(f <- path.expand(\"~/.R/Makevars\")))",88],["} else if (file.exists(f <- path.expand(paste(\"~/.R/Makevars\",",34],["expand = c(0, 0)) +",35],["## expand",48],["scale_x_continuous(expand=c(0,0)) +",39],["bestTune = expand.grid(",37],["## Check whether we can expand to something non-empty.",33]],"useCount":2472},{"word":"expect_equal","context":[["expect_equal(sortKeyValueList(actual), sortKeyValueList(expected))",87],["expect_equal(sql,",57],["expect_equal(system(\"ls -lh | grep DR-loader- | wc -l\", intern=TRUE), \"0\")",60],["expect_equal(ncol(tmp),2)",67],["testthat::expect_equal(",75],["expect_equal(mode(tmp),\"numeric\")",87],["expect_equal(sortKeyValueList(actual),",110],["expect_equal(as(",114],["expect_equal(actual, expected)",116],["expect_equal(",765]],"useCount":5520},{"word":"expected","context":[["expected <- eval(parse(text=\"NULL\"));",135],["checkIdentical(expected, xx)",162],["expected <- .tadf(seqnames=seqnames,",181],["expected <- eval(parse(text=\"TRUE\"));",191],["},  o = expected);",330],[",  identicalTo( expected, tol = 1e-6 ) )",353],["expected <- eval(parse(text=\"FALSE\"));",383],["expected = y",420],["}, o=expected);",3713],["# some number of the expected events will fail, often (always?) because",122]],"useCount":8790},{"word":"export","context":[["#'@export",2239],["#' @export",44293],["##' @export",1990],["# @export",404],["# #' @export",222],["#'  @export",83],["# If this is the first export function called in the library",43],["##     will also export its methods.",33],["##     export the generic, and exporting a generic in the namespace",33],["## ##' @export",28]],"useCount":49859},{"word":"expr","context":[["ans <- is_robust_match(good_expr, e$expr, eval_for_class, eval_env)",85],["return(expr)",150],["if (!quoted) { expr <- substitute(expr) } # force quoted",96],["if (!quoted) { expr <- substitute(expr) } # force quoted",96],["error = function(e)stop(paste0(\"Illegal expression \", dprs(expr), \": \",",102],["getState()$expr",136],["# Returns TRUE if e$expr matches any of the expressions given",142],["any(sapply(c(...), function(expr)omnitest(expr)))",142],["any(sapply(c(...), function(expr)omnitest(expr)))",142],["expr",149]],"useCount":6857},{"word":"expression","context":[["plotCmd = expression({",56],["## which is an expression evaluating to TRUE?)",66],["initialize <- expression({",68],["rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),",78],["rp[1] = substitute(expression(italic(R)^2 == MYVALUE),",78],["rp = vector('expression',2)",83],["# a reasonable range of expression log2 ratios",96],["if(is.call(e) || is.expression(e)) {",100],["error = function(e)stop(paste0(\"Illegal expression \", dprs(expr), \": \",",102],["# Get the last expression which the user entered at the R console.",136]],"useCount":5609},{"word":"exprs","context":[["for(i in seq_along(exprs)) find_bad_exprs(exprs[[i]])",106],["for(i in seq_along(exprs)) find_bad_exprs(exprs[[i]])",106],["ind <- as.logical(sapply(exprs,",166],["exprs <- exprs[!ind]",167],["exprs <- exprs[!ind]",167],["exprs <- db_usages[[docObj]]",102],["exprs <-",78],["for(e in exprs) {",72],["bad_exprs <- c(bad_exprs, exprs)",68],["if(!length(exprs)) next",68]],"useCount":3419},{"word":"ext","context":[["for(i in seq_along(ext)) {",156],["what <- names(ext)",106],["exti <- ext[[i]]",81],["ext <- ClassDef@contains",81],["if(length(ext)) {",78],["return(ext)",71],["ext",67],["showExtends(ext)",54],["ext <- ext[ok]",54],["paste0(bf, ext[type]))",72]],"useCount":3894},{"word":"extra","context":[["# if there are extra rows that have been added by \"dragging\" the control, remove them",46],["\"      --extra-arch      do only runtime tests needed for an additional\",",32],["\"--add-extra-dicts=en_GB\",",36],["# override for api to account for extra parameter in V19 and beyond",41],["# delete the extra rows before saving",46],["\"--add-extra-dicts=en_GB\"),",48],["family=\"nbinom\", zeroInflation=FALSE, extra.args=\"-ndi 60000\",",50],["paste(extra, collapse = \" \"),",58],["extra <- \"\"",58],["#' @param \\dots extra arguments to be passed if `object` is of type",78]],"useCount":2750},{"word":"f","context":[["f",463],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["sQuote(f)),",354],["meta <- if(file_test(\"-f\", dfile))",286],["fdef <- getGeneric(f, where = where)",196],["function(f) {",193],["close(f)",191],["return(f)",171],["makefiles <- c(makefiles, f)",152],["f <- fdef@generic",146]],"useCount":38646},{"word":"factor","context":[["'factor',",188],["## SQOLIM multiplcation factor:",158],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["#' hex[,2] <- as.factor(hex[,2])",96],["fG = factor(fGroups, levels= c(levels(fGroups)[1], lev[-i], lev[i]) )",79],["pros.hex[,2] <- as.factor(pros.hex[,2])",73],["train[,response_col] <- as.factor(train[,response_col])",71],["pros.hex[,6] <- as.factor(pros.hex[,6])",71],["pros.hex[,5] <- as.factor(pros.hex[,5])",71],["pros.hex[,9] <- as.factor(pros.hex[,9])",71]],"useCount":12724},{"word":"factors","context":[["# Fixed factors",51],["## careful, as.data.frame turns things into factors.",23],["factors <- x$factors",23],["factors <- x$factors",23],["## coerce factors to vectors, in case lhs is character or",23],["## str(.) for large factors should be fast:",24],["dof <- 0.5 * ((p - factors)^2 - p - factors)",24],["dof <- 0.5 * ((p - factors)^2 - p - factors)",24],["stop(\"level sets of factors are different\")",38],["# Random factors",51]],"useCount":2600},{"word":"failed","context":[["## failed in 2.3.1",45],["errorLog(Log, \"copying to build directory failed\")",44],["## failed in 1.8.1",49],["## all failed in 3.0.2",49],["stop(gettextf(\"%s failed in %s() for '%s', details:\\n  call: %s\\n  error: %s\",",50],["## failed in 1.5.1",60],["errorLog(Log, \"Installation failed.\")",64],["if (res) pkgerrmsg(\"configuration failed\", pkg_name)",72],["warning(gettextf(\"%s failed in %s() for '%s', details:\\n  call: %s\\n  error: %s\",",52],["message(\"Grade submission failed.\")",129]],"useCount":5401},{"word":"family","context":[["family = family,",68],["family <- match.arg(family)",68],["family = family,",68],["fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=binomial)",69],["#' @family datetime_funcs",70],["data = mcmc_dataframe, family=\"ordinal\",",75],["#' @family string_funcs",77],["class = \"family\")",91],["#' @family math_funcs",110],["family <- match.arg(family)",68]],"useCount":8074},{"word":"fdef","context":[["package <- fdef@package",110],["if(!is(fdef, \"genericFunction\"))",100],["ev <- environment(fdef)",105],["if(is.null(fdef))",253],["fdef <- getGeneric(f, where = where)",196],["if(!is(fdef, \"genericFunction\")) {",149],["if(is(fdef, \"genericFunction\"))",147],["f <- fdef@generic",146],["fdef <- f",119],["if(is.null(fdef)) {",108]],"useCount":9970},{"word":"ff","context":[["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136],["ff.setBasePath(path = '/Users/gino/kaggle/fast-furious/gitHub/fast-furious/')",80],["ff <- file.path(outDir, dirname[type],",72],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["ens = ff.createEnsemble (Xtrain = train_set_cl,",66],["ff <- def@fieldPrototypes",47],["c(as.list(def@refMethods), as.list(ff)[accs])",47]],"useCount":3254},{"word":"field","context":[["stop(gettextf(\"%s is not a field in class %s\",",54],["tmp <- desc[field]",98],["r.field as field,",50],["r.field as field,",50],["## All field tags must be ASCII.",67],["dQuote(fieldClasses[[field]])),",40],["sQuote(field),",90],["field <- as.factor(field)",45],["parse_description_field <- function(desc, field, default = TRUE)",48],["field <- as.factor(field)",45]],"useCount":4892},{"word":"fields","context":[["if(length(fields)) {",50],["ret0 <- .readPkgDesc(lib, fields)",40],["fields <- unique(c(requiredFields, fields))",40],["fields <- unique(c(requiredFields, fields))",40],["fields <- requiredFields",40],["if (is.null(fields))",44],["fields = list(",335],["library(fields)",325],["fields <- list(",224],["fields <- list()",62]],"useCount":6197},{"word":"file","context":[["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["code_dir <- file.path(dir, \"R\")",636],["file=LogFile, append=TRUE)",1113],["content = function(file) {",1166],["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["file=LogFile, append=TRUE)}",278],["on.exit(close(file))",278]],"useCount":89257},{"word":"file_test","context":[["if(file_test(\"-f\", sys_data_file)) load(sys_data_file, code_env)",137],["if(!file_test(\"-d\", code_dir))",98],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["if(file_test(\"-f\", logfile)) {",52],["if(file_test(\"-f\", log)) {",52],["files <- files[file_test(\"-f\", files)]",50],["if (file_test(\"-x\", \"configure\")) {",48],["meta <- if(file_test(\"-f\", dfile))",286],["if(!file_test(\"-d\", dir))",170]],"useCount":2726},{"word":"filename","context":[["unlink(filename)",162],["filename <- tempfile(fileext = \".mat\")",145],["png(filename)",134],["filename = function() {",631],["invisible(filename)",75],["if(!checkIntFormat(filename)) stop(\"invalid 'filename'\")",117],["if(is.na(filename)) return(Rdtxt)",69],["file = filename)",71],["if(is.null(filename))",71],["if(!checkIntFormat(filename)) stop(\"invalid 'filename'\")",117]],"useCount":6335},{"word":"files","context":[["file.remove(list.files(pattern=\".png\"))",88],["for (f in files) {",114],["files",97],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["## the location of the CSV files",280],["for(f in files) {",115],["if (length(files)) {",127],["aspell(files,",175],["for (i in 1:length(files)) {",94],["files, ignore.case = TRUE)",92]],"useCount":19552},{"word":"fill","context":[["legend(\"topright\", inset=.05, c(\"position_from_pip\",\"position_from_start\"), fill=c(\"cyan4\",\"darkgoldenrod1\"))",115],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\")   + scale_x_discrete(limits=sampleRank2)  +",55],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\") + scale_x_discrete(limits=sampleRank2)  +",55],["panel.background = element_rect(fill = \"transparent\",colour = NA),",55],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\", adjust = 3) + scale_x_discrete(limits=sampleRank2)  +",55],["data <- data.table::rbindlist(data, fill=TRUE)",608],["legend('topright', legend = c('Underexpressed', 'Overexpressed'), fill = c('lightblue', 'pink'))",120],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\", adjust = 3) +   scale_x_discrete(limits=sampleRank2)  +",55],["panel.background = element_rect(fill = \"white\"),",101]],"useCount":4826},{"word":"filter","context":[["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["ma.scale=c(-1.4,2.3,-2) # scaling of the MA filter",110],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["if(is.null(filter))",37],["dplyr::filter(",41],["filter = list(\"pot\", ignore = ignore),",48],["dplyr::filter(id %in% sample(unique(id),10)) %>%",57],["filter(",70],["# To filter out samples based on donor information",88],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110]],"useCount":3294},{"word":"find","context":[["# Otherwise, attempt to find the appropriate method.",51],["##find data##",46],["while (flag !=1) {   # find out where non-zero elements start",48],["# find the html help file and display in the default browser",48],["# Try to find pathsofar at start of gPath",50],["dir <- find.package(package, lib.loc)",623],["# If there was no matching method, attempt to find the default method. If that fails,",51],["## For each state, find the hospital of the given rank",56],["error = function(c) {file.path(find.package(\"swirl\"),\"Courses\")}",58],["# You can find out more about building applications with Shiny here:",223]],"useCount":3907},{"word":"finite","context":[["if(!is.finite(value) || value < min || value > max) return()",37],["cat(\"\\nWARNING: Proposal resulted in non-finite\",",37],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["x <- x[is.finite(x)]",52],["\"resulted in non-finite value(s).\\n\",",114],["if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",36],["stop(\"all entries of 'x' must be nonnegative and finite\")",30],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246]],"useCount":2540},{"word":"first","context":[["first <- FALSE",1729],["## we do the vectorized metadata computations first, and try to",68],["## the first argument could be named, or could be a variable name.",66],["# If the S3 method's first argument, expr[[2]], is anything but atomic",51],["## This first line will likely take a few seconds. Be patient!",51],["if (first) {",1713],["first <- TRUE",262],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["stop(paste0(\"Illegal expression, \", dprs(expr),\": The first argument, \", dprs(expr[[2]]),",51]],"useCount":10263},{"word":"fit","context":[["print(fit)",130],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["return(fit)",188],["fit",391],["summary(fit)",505],["anova(fit)",123],["predict(fit)",78],["predict(fit, data.frame(x=x), se=TRUE)",76],["plot(fit)",119],["print(\"    start mcmc fit\")",179]],"useCount":13444},{"word":"fixed","context":[["ignore.case, perl, fixed, useBytes))",56],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["fixed = FALSE, useBytes = FALSE)",58],["invert = TRUE, value = TRUE, fixed = TRUE)",68],["if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))",64],["function(x) grepl(x, lic, fixed = TRUE))",58],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)",96],["fixed = TRUE, invert = TRUE, value = TRUE)",100],["args <- strsplit(args,'nextArg', fixed = TRUE)[[1L]][-1L]",154]],"useCount":6190},{"word":"fluidRow","context":[[") # fluidRow",18],["# fluidRow(",19],["fluidRow(",3732],["fluidRow(column(12,",47],["fluidRow (",46],["fluidRow(column(width=12,",19],["wellPanel(fluidRow(",25],["fluidRow(column(width = 12,",34],["shiny::fluidRow(",36],["fluidRow(column(",41]],"useCount":4123},{"word":"flush","context":[["#flush.console()",38],["\"> ### \\\\* [^\\n]+\\n> \\n> flush[^\\n]+\\n> \\n\", useBytes = TRUE)[[1L]]",32],["dev.flush()",138],["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["utils::flush.console()",160],["dev.hold(); on.exit(dev.flush())",254],["flush(stderr()); flush(stdout())",320],["## subsequent call to flush(): needs to be kept in",32],["flush(stderr()); flush(stdout())",320],["flush.console()",1209]],"useCount":2906},{"word":"fname","context":[["#' logger.start(fname=NA)",46],["sQuote(fname),",43],["else if (Sys.info()['sysname'] == 'Darwin') { system(paste (\"open \",fname, sep=\"\")) } # mac",71],["if(Recall(x[[i]], fname))",46],["cat (paste(\"OUTPUT: \", fname, sep=\"\"))",68],["if (file.exists(fname) && open_res) {",65],["else { system(paste (\"xdg-open \",fname, sep=\"\")) } # linux",62],["fname))",109],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71],["xfname <- x[[fname]]",74]],"useCount":3264},{"word":"following","context":[["\"Found the following files with non-portable file names:\\n\",",60],["\"Found the following significant warnings:\")",52],["#' @param values Any of following valid values",42],["\"The following files are already in R: \",",60],["#\tre-name the following:",46],["warning(gettextf(\"Not all arguments are of the same length, the following need to be recycled: %s\",",48],["\"The following files look like leftovers/mistakes:\\n\",",60],["\"In addition to the above warning(s), found the following notes:\",",60],["\"Found the following file with a non-portable file name:\\n\",",60],["# furnished to do so, subject to the following conditions:",114]],"useCount":4325},{"word":"font","context":[["par(bg=bg, font.main = 2, font.lab = 2)",43],["font=2)",113],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["font = (1:4)[c(\"plain\", \"bold\", \"italic\", \"bold italic\") ==",46],["font",51],["par(bg=bg, font.main = 2, font.lab = 2)",43],["par(font.lab=2)",38],["# Check that the font has the correct structure and information",40],["font-weight: bold;",40]],"useCount":3472},{"word":"foo","context":[["foo(matrix(1:10, 2, 5))",38],["foo(pi)",38],["foo()",39],["foo(1:10)",39],["foo",130],["as.vector.foo <- function(...) 99",112],["foo <- function(x) {",60],["## this will report '* DONE (foo)' if it works, which",48],["show(foo)",52],["print(foo)",58]],"useCount":3365},{"word":"for","context":[["# Parameters for the test.",398],["# pharmacodynamic model building aid for NONMEM.",234],["for (i in seq_along(tr2)) {",278],["for (iter in 1:Iterations) {",289],["# Renjin : JVM-based interpreter for the R language for the statistical analysis",309],["# Renjin : JVM-based interpreter for the R language for the statistical analysis",309],["#' The semantic reference(s) for this data:",337],["for(i in 1:n){",522],["# distributed with this work for additional information",608],["for (i in 1:n) {",620]],"useCount":123953},{"word":"forest","context":[["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["## bac load in forest",204],["chk.pop[chk.pop$location == \"forest\", \"pop\"]) /",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["chk.bac[chk.bac$location == \"forest\", \"total.bac\"]) /",112],["## on forest",204],["chk.forest.bac <- data.frame(",158],["## pop on forest",158],["chk.forest.pop <- data.frame(",158],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112]],"useCount":7986},{"word":"form","context":[["</form>",36],["form",100],["form <- formula(paste('expression~',paste(c('gene',xcols),collapse='+'),sep=''))",36],["## show all foreign function calls in abbreviated form with the line",34],["attr(value, \"formula\") <- form",43],["## Return a data frame of the form:",92],["formula = function() form,",34],["## fixup \\link[=dest] form",33],["rhs <- eval(form[[3L]], envir = env)",32],["getRHS.noVarying <- function() eval(form[[3L]], envir = env)",32]],"useCount":2214},{"word":"format","context":[["writeLines(format(x))",84],["resultLog(Log, \"EXISTS but not correct format\")",82],["list(MYVALUE = format(r2,dig=3)))[2]",80],["format=\"f\",digits=2),",80],["#' @format",79],["format.fun <- formatNum",92],["list(MYOTHERVALUE = format(my.p, digits = 2)))[2]",78],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190]],"useCount":14024},{"word":"formula","context":[["formula <- as.formula(formula)",81],["formula <- as.formula(formula)",81],["formula <- as.formula(formula)",81],["formula <- as.formula(data)",66],["formula <- as.formula(data)",66],["return(formula)",62],["data <- environment(formula)",55],["fcall <- formula$call",54],["function(formula, data, subset, na.action, ...)",101],["stop(\"'formula' missing or incorrect\")",140]],"useCount":8030},{"word":"found","context":[["good.records.found <- good.records.found + 1",303],["good.records.found <- 0",191],["good.records.found <- good.records.found + 1",303],["found <- TRUE",356],["result[[good.records.found]] <- new.event",376],["result[1:good.records.found]",186],["# we found",122],["good.records.found <- good.records.found +1",73],["good.records.found <- good.records.found +1",73],["found <- FALSE",201]],"useCount":9120},{"word":"frame","context":[["m$data <- as.data.frame(data)",227],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["data <- data.frame()",358],["mf <- eval(m, parent.frame())",204],["if(is.matrix(eval(m$data, parent.frame())))",163],["e <- get(\"e\", parent.frame())",440],["data.frame(",754],["data <- as.data.frame(data)",159],["chk.forest.pop <- data.frame(",158],["chk.forest.bac <- data.frame(",158]],"useCount":39429},{"word":"free","context":[["mxMatrix(type = \"Full\", nrow = 1, ncol=1, free=T, values = 2, labels = \"ve\", lbound = 0.0001, name = \"Ve\"),",47],["free=FALSE,",109],["arrows=1, free=FALSE, values=0),",49],["##' @param freeSet names of matrices containing free variables",51],["arrows=1, free=TRUE, values=.1,",82],["free=TRUE, values=.8,",98],["free=TRUE, values=.2,",248],["free=FALSE, values=1),",187],["free=TRUE,",223],["free=T,",231]],"useCount":2238},{"word":"from","context":[["emlToS4(from))",685],["S4Toeml(from))",685],["##' received from the API server",498],["## Using sources from directory @code{dir} ...",442],["from",322],["for (e in seq(from=1, to=nExp)) {",212],["# Make a list from the ... arguments and plotlist",207],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["# nrow: Number of rows needed, calculated from # of cols",192],["for (k in seq(from=1, to=nAssets)) {",177]],"useCount":34311},{"word":"full","context":[["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["full.names = TRUE, recursive = TRUE)",238],["# for full details see the file COPYING",173],["full.names = FALSE,",115],["full.names = TRUE)",76],["# Only check for match with child if have full match with pathsofar",50],["##' (\"app-name\") or its full ID (\"app-xxxx\")",57],["system(command.full)",58],["pattern = \"[.](cls|sty|drv)$\", full.names = TRUE)",60],["full.names = FALSE)",65]],"useCount":4590},{"word":"fun","context":[["tryCatch(fct <- match.fun(expr[[1]]),",51],["# If match.fun(expr[[1]]) raises an exception here, the code which follows",51],["checkEquals(fun(),",54],["fun <- fun_call({",60],["if (typeof(fun) == \"symbol\") {",62],["fun <- e[[1]]",77],["format.fun <- formatNum",92],["fun",116],["FUN <- match.fun(FUN)",175],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176]],"useCount":6214},{"word":"function","context":[["filename = function() {",631],["function(x) {",1328],["function(x, ...)",2129],["function(x)",2000],["shinyServer(function(input, output) {",959],["content = function(file) {",1166],["function()",1290],["function() {",696],["error = function(e) {",620],["shinyServer(function(input, output, session) {",546]],"useCount":152397},{"word":"functions","context":[["## Replacement functions.",102],["functions <- c(functions, replace_funs)",102],["source(\"functions.R\")",133],["functions <- functions[!ind]",67],["functions <- functions[!ind]",67],["functions <- .transform_S3_method_markup(functions)",68],["functions <- .transform_S3_method_markup(functions)",68],["functions <-",79],["functions <- c(functions, replace_funs)",102],["## Ordinary functions.",101]],"useCount":7678},{"word":"g","context":[["for(g in 1L:ngroups){",132],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["#' @param SA Absolute Salinity [ g/kg ]",95],["grid.draw(g)",79],["#'              \\linkS4class{H2OModel} (e.g. train=TRUE)",78],["g <- .geometry(width, height, units, res)",72],["plot(g)",234],["return(g)",354],["print(g)",382],["g",583]],"useCount":14582},{"word":"gPath","context":[["if (!inherits(gPath, \"gPath\"))",80],["if (!inherits(gPath, \"gPath\"))",80],["gPath, strict,",80],["if (nameMatch(gPath$name, grob$name, grep))",90],["pathsofar, gPath, strict,",90],["grep <- rep(grep, length.out=depth(gPath))",90],["if (depth(gPath) == 1) {",70],["if (is.character(gPath))",100],["gPath=\"\", vpPath=\"\") {",63],["gPath, strict, grep, global)",60]],"useCount":2391},{"word":"gTree","context":[["if (!inherits(gTree, \"gTree\"))",70],["if (!inherits(gTree, \"gTree\"))",70],["gTree$children[[childName]] <- newChild",90],["child <- gTree$children[[childName]]",60],["childName <- gTree$childrenOrder[index]",60],["while (index <= length(gTree$childrenOrder) &&",50],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["gTree",100],["# (or the child of a child of a gTree, or ...)",50],["gTree(children = gList(",34]],"useCount":2328},{"word":"gc","context":[["cleanit <- gc()",44],["invisible(gc())",171],["gc();",30],["gc(reset=TRUE)",35],["gc() # Let's clean ouR garbage if possible",37],["#gc()",40],["gc(reset=TRUE);",81],["# gc()",41],["gc()",2001],["gc(verbose = FALSE)",43]],"useCount":2877},{"word":"gene","context":[["# To store gene expression values for all the array",55],["rownames(dfCluster) = dfCluster$gene",70],["# To create a stringency gene plots before normalization",32],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["colnames(dfCluster) = c('gene', 'cluster')",77],["form <- formula(paste('expression~',paste(c('gene',xcols),collapse='+'),sep=''))",36],["#remove datasets with too many missing top gene features",44],["gene = gene,",49],["gene = gene,",49],["# To get the gene symbol for each Illumina ID",55]],"useCount":2707},{"word":"generic","context":[["fdefault@generic <- value@generic",44],[".cacheImplicitGeneric(name, generic)",42],["\"formal arguments in method and generic do not appear in the same order\",",44],["fdefault@generic <- value@generic",44],["mname <- methodsPackageMetaName(\"M\",fdef@generic, fdef@package)",44],["warning(gettextf(\"no generic function %s found\",",45],["function(generic.function, class)",47],["## Find registered methods for generic g.",68],["generic",77],["f <- fdef@generic",146]],"useCount":9770},{"word":"generics","context":[["## generics.",136],["generics <- c(generics, g)",46],["## This isn't really right: it assumes the generics are visible.",33],["## needed for internal generics and group generics.)",34],["## Allow group generics to be undocumented other than in base.",34],["## needed for internal generics and group generics.)",34],["## for internal generics and group generics.)",34],["## for internal generics and group generics.)",34],["for(i in seq_along(generics)) {",36],["generics <- c(generics, g)",46]],"useCount":2516},{"word":"genes","context":[["#sig_gene, when no significant genes according to p/q value threshold",38],["#identify significant genes",115],["#output data:row as genes and col as samples",66],["#input data: row as genes and col as samples",66],["##select differential genes across cancer types##",49],["HugoGenes <- genes.tbl[match(EntrezGenes, genes.tbl[,1]), 2]",42],["genes.tbl <- read.delim(file=\"../../../../RawData/mysql_cbio_genes.txt\", header=T, as.is=T, sep=\"\\t\")",42],["HugoGenes <- genes.tbl[match(EntrezGenes, genes.tbl[,1]), 2]",42],["# how many genes in each cluster",41],["nrow(train.dat),\" genes are remained\",sep=\"\")",41]],"useCount":2284},{"word":"geom_line","context":[["ggtitle(paste0(case5_ABT$Case_Name,\"\\n\",case5_ABT$ticker))+ geom_line() +",116],["geom_line()",121],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["gp <- gp + geom_line()",75],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["geom_line()+",148],["geom_line(size=1) +",52],["geom_line() +",1034],["pdb + geom_line(aes(group=projid)) + facet_grid(msex~.)",60],["p <- p + geom_line()",58]],"useCount":2961},{"word":"geom_point","context":[["geom_point(size = 3, color=\"red\") +",289],["geom_point(size=3) +",73],["geom_smooth(method=\"lm\") + geom_point() +",268],["geom_point()",172],["geom_point()+",80],["geom_point(shape=1) +",50],["geom_point(size = 3) +",55],["geom_point(",57],["p <- p + geom_point()",63],["geom_point() +",1291]],"useCount":3913},{"word":"get","context":[["get <- function() x",71],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73],["# To get an integer value of number of arrays",108],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["## get input",192],["e <- get(\"e\", parent.frame())",440],["## we only source the assignments, and hence do not get any",102],["f <- get(f, envir = code_env) # get is expensive",92],["trim_spectra <- get(x=\"trim\", pos=\"package:MALDIquant\")",91],["f <- get(f, envir = code_env) # get is expensive",92]],"useCount":13701},{"word":"getOption","context":[["getOption(\"SweaveHooks\")[[\"fig\"]]()",173],["if (is.null(Rc)) Rc <- getOption(\"Rhiredis.connect\")",149],["stop(printSpssError(last.SpssError),call. = getOption(\"SPSSStatisticsTraceback\"), domain = NA)",160],["repos <- getOption(\"repos\")",117],["verbose = getOption(\"verbose\"),",109],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["verbose = getOption(\"verbose\"))",73],["signif.stars = getOption(\"show.signif.stars\"), ...)",62],["encoding = getOption(\"encoding\"))",54],["verbose <- getOption(\"verbose\")",53]],"useCount":4730},{"word":"getenv","context":[[".runThisTest <- Sys.getenv(\"RunAllRcppTests\") == \"yes\"",106],["config_val_to_logical(Sys.getenv(\"_R_CHECK_INSTALL_DEPENDS_\", \"FALSE\"))",48],["if (!is.na(f <- Sys.getenv(\"R_MAKEVARS_USER\", NA))) {",52],["td0 <- as.numeric(Sys.getenv(\"_R_CHECK_TIMINGS_\"))",53],["oPATH <- Sys.getenv(\"PATH\")",54],["scriptsDir=Sys.getenv(\"TM_HOME\")",45],["if(Sys.getenv(\"R_LIB\") != \"\") { .libPaths(c(Sys.getenv(\"R_LIB\"), .libPaths())) }",77],["if(Sys.getenv(\"R_LIB\") != \"\") { .libPaths(c(Sys.getenv(\"R_LIB\"), .libPaths())) }",77],["hdfs_name_node <- Sys.getenv(c(\"NAME_NODE\"))",209],["if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", use_valgrind)))",64]],"useCount":5492},{"word":"gettext","context":[["cntxt$stop(gettext(\"cannot compile byte code literals in code\"),",45],["msg <- gettext(\"replacing local value with import %s when loading %s\")",50],["cntxt$stop(gettext(\"cannot compile promise literals in code\"),",45],["gettext(\"Edit the file and move it to the appropriate directory.\"),",45],["cntxt$stop(gettext(\"cannot compile this expression\"), cntxt)",44],["writeLines(c(gettext(\"Malformed package version.\"), \"\"))",33],["writeLines(c(gettext(\"All field tags must be ASCII.\"), \"\"))",33],["c(gettext(\"Fields with non-ASCII tags:\"),",33],["gettext(\"Unknown encoding with non-ASCII data\")",33],["writeLines(c(gettext(\"Invalid Priority field.\"),",33]],"useCount":2609},{"word":"gettextf","context":[["stop(gettextf(\"'%s' not defined for \\\"POSIXt\\\" objects\", .Generic),",76],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["stop(gettextf(",113],["c(gettextf(\"File %s:\", sQuote(f)),",93],["stop(gettextf(\"unable to create temporary directory %s\",",90],["warning(gettextf(",79],["message(gettextf(\"  comparing %s to %s ...\",",72]],"useCount":15023},{"word":"getwd","context":[["print(getwd())",134],["startdir <- getwd()",127],["cat(paste0(getwd(),\"\\n\"))",77],["cwd <- getwd()",105],["getwd()",607],["sAppDir <<- getwd()",74],["owd <- getwd()",84],["pkgdir <- getwd()",86],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71],["wd <- getwd()",181]],"useCount":2791},{"word":"ggplot","context":[["p <- ggplot() +",57],["#' @return ggplot object",69],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["p <- ggplot()",70],["ggplot(subset(batch_merged,",72],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["FigureTemp1 <- ggplot( DataFrame_Local, aes(x=sampleType) ) + scale_x_discrete(limits=sampleRank2)  +",55],["ggplot() +",377],["FigureTemp3 <- ggplot(DataFrame_Local, aes(x=sampleType) ) +",55],["ggplot(",239]],"useCount":3203},{"word":"ggplot2","context":[["#' @import ggplot2",340],["#'@import ggplot2",138],["library('ggplot2')",161],["require(\"ggplot2\")",142],["library(\"ggplot2\")",553],["#library(ggplot2)",81],["library(ggplot2)",7006],["require(ggplot2)",1390],["install.packages(\"ggplot2\")",124],["#' library(ggplot2)",96]],"useCount":13226},{"word":"give","context":[["## give the function a new environment, to cache methods later",46],["# You are welcome to use parts of this code, but please give credit when using it extensively.",51],["## All remaining checks give notes and not warnings.",60],["# If fct is an (S4) standardGeneric, match.call is likely to give a misleading result,",51],["# would be likely to give a misleading result. Catch the error merely to",51],["#   # likely to give a misleading result. Catch the error merely to give a better diagnostic.",50],["#   # likely to give a misleading result. Catch the error merely to give a better diagnostic.",50],["## Maybe give a warning (in particular if both are given)?",32],["## will give an error.",33],["## Earlier versions used to give an error if there were no Rd",34]],"useCount":2693},{"word":"given","context":[["stop(\"invalid 'dimnames' given for data frame\")",61],["## Find the function objects in the given package.",68],["subgrid.density.relative.to.bandwidth=TRUE # is subgrid.density given relatively to the bandwidth?",91],["# Returns TRUE if e$expr matches any of the expressions given",142],["#'        none is given, an id will automatically be generated.",58],["## Return hospital name in that state with the given rank",59],["##' @param alias If an app name is given for \\code{appNameOrID}, this can be",57],["## For each state, find the hospital of the given rank",56],["# If a correct expression is given attempt a robust match with user's expression.",45],["#' @param log, log.p logical; if TRUE, probabilities p are given as log(p).",44]],"useCount":4030},{"word":"glm","context":[["## what else shall we allow?  At least objects of class link-glm.",72],["if(inherits(link, \"link-glm\")) {",71],["fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=binomial)",69],["glm(y ~ x, family = poisson(identity), start = c(1,0))",38],["### This tests observation weights in glm ######",36],["load.module(\"glm\")",32],["SL.library <- c(\"SL.glm\",\"SL.gam\",\"SL.glmnet\",\"SL.glmnet.0\")",32],["summary(glm.fit)",34],["method = \"glm\", metric = \"ROC\", trControl = controlObject)",34],["load.module('glm')",34]],"useCount":2962},{"word":"global","context":[["\"the global environment\" else paste(\"package\", sQuote(thisPackage))",42],["#   into memory.  Avoid side effects and don't pollute the global environment.",47],["grep, grepname, global, warn) {",50],["(!found || global)) {",50],["list(global.id.number=global.id.number),",50],["list(global.id.number=global.id.number),",50],["gPath, strict, grep, global)",60],["grep, global))) {",60],["# Append this row to the global matrix",76],["grep, global) {",140]],"useCount":2256},{"word":"good","context":[["good <- thisfile[this] %in% nm",66],["good.records.found <- good.records.found +1",73],["result <- vector(\"list\", nrow(tbl.good))",73],["good.records.found <- good.records.found +1",73],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["result[1:good.records.found]",186],["good.records.found <- 0",191],["good.records.found <- good.records.found + 1",303],["good.records.found <- good.records.found + 1",303],["result[[good.records.found]] <- new.event",376]],"useCount":3414},{"word":"gp","context":[["name=NULL, gp=gpar(), vp=NULL) {",183],["name=name, gp=gp, vp=vp)",103],["name=name, gp=gp, vp=vp)",103],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["gp <- gp + expand_limits(y = 0)",80],["vjust=0, gp=gpar(fontsize=20))",1432],["gp <- gp + geom_line()",75],["gp <- gp + geom_line()",75],["gp <- gp + expand_limits(y = 0)",80],["print(gp)",351]],"useCount":4866},{"word":"gpar","context":[["vjust=0, gp=gpar(fontsize=20))",1432],["name=NULL, gp=gpar(), vp=NULL) {",183],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["gp=gpar(col = \"black\", lwd = 1.75))",36],["grid.rect(gp=gpar(col=col[colIndex], fill=fill[fillIndex]))",36],["gp = gpar(",34],["set.gpar(vp$gp)",20],["gp=gpar(col=\"grey\"))",21],["# Do not call set.gpar because set.gpar accumulates cex",32],["# Do not call set.gpar because set.gpar accumulates cex",32]],"useCount":2317},{"word":"grade","context":[["sgp.grade.sequences=list(c('EOCT', 'EOCT')),",374],["sgp.grade.sequences=list(c(8, 'EOCT')),",40],["sgp.baseline.grade.sequences.lags=1),",58],["sgp.grade.sequences=list(c('EOCT', 'EOCT', 'EOCT')),",58],["sgp.baseline.grade.sequences=c('EOCT', 'EOCT'),",76],["message(\"want to try to submit your grade at a later time.\")",129],["sgp.grade.sequences=list(c('EOCT', 'EOCT'))),",144],["# sgp.exact.grade.progression=TRUE,",204],["sgp.projection.grade.sequences=\"NO_PROJECTIONS\",",39],["sgp.exact.grade.progression=TRUE,",1079]],"useCount":3142},{"word":"graph","context":[["the.graph = load.graph.csv(edge.path, node.path);",108],["graph",57],["the.graph = load.graph.csv(edge.path, node.path);",108],["stop(\"Not a graph object\")",215],["if (!is.igraph(graph)) {",256],["rk.graph.on ()",58],["rk.graph.off ()",62],["gmode <- 'graph'",63],["return(graph)",65],["a.trial.min.cut(the.graph, the.true.cluster, theta, method, overlap,",73]],"useCount":3524},{"word":"graphics","context":[["\".Call.graphics\", \".External.graphics\")",34],["graphics.off() # This closes all of R's graphics windows.",43],["graphics.off()",919],["\".Call.graphics\", \".External.graphics\")",34],["library(graphics)",36],["graphics.off();",47],["graphics.off() # This closes all of R's graphics windows.",43],["require(graphics)",53],["## \"graphics\" with its own environment which does not",33],["# Start the postscript graphics device driver.",53]],"useCount":3224},{"word":"green4","context":[["lty=c(1, 1), col=c(\"red\", \"green4\"), bty=\"n\")",65],["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["colours2=c( \"banding\"=\"blue\",  \"sham\"=\"green4\"  ),",114],["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65],["\"green4\",",14]],"useCount":3732},{"word":"grep","context":[["grep <- rep(grep, length.out=depth(gPath))",90],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["if (nameMatch(gPath$name, grob$name, grep))",90],["grep <- rep(grep, length.out=depth(gPath))",90],["grep, global) {",140],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112],["OK <- c(OK, grep(p, objects_in_code, value = TRUE))",102],["if (!is.logical(grep))",100],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"pasture\"))",96],["tmp.rows <- grep(\"TRUE\", with(chk.elk.bac,",96]],"useCount":9564},{"word":"grepl","context":[["if (any(grepl(\"^Error\", out))) {",77],["united$TempBreed <- grepl(\"Greyhound\",united$MainBreed)",42],["if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))",64],["bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",",60],["function(x) grepl(x, lic, fixed = TRUE))",58],["if (any(grepl(\"^Error\", out)) || length(attr(out, \"status\"))) {",52],["have_colon <- grepl(\":\", anchor, fixed = TRUE)",49],["if (WINDOWS && grepl(\"\\\\.zip$\", pkg)) {",48],["if (grepl(\"[.]rds$\", f)) f <- readRDS(f)",48],["if (grepl(\":\", variables.in.model[var])) {",42]],"useCount":7608},{"word":"grid","context":[["grid()",503],["require(grid)",439],["panel.grid.major = element_blank(),",410],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["panel.grid.minor = element_blank(),",524],["library(grid)",839],["grid.draw(tmp.gt)",1992],["grid.newpage()",2580]],"useCount":17718},{"word":"grob","context":[["if (is.null(pathsofar)) grob$name else pathsofar,",100],["if (nameMatch(gPath$name, grob$name, grep))",90],["grob",73],["grob <- NULL",61],["# If it's not a grob then fail",40],["(is.null(grob) || global)) {",40],["#'@author Marc W. Schmid \\email{marcschmid@@gmx.ch} and Stefan Grob \\email{stefan@@grob.org}.",59],["if (!is.null(grob)) {",52],["grid.Call(L_setDLelt, grob)",32],["table.grob <- function(chr.col, df.output = df.output,",32]],"useCount":2247},{"word":"group","context":[["sgp.norm.group.preference=2),",199],["sgp.norm.group.preference=3),",167],["sgp.norm.group.preference=1),",170],["# sgp.norm.group.preference=1),",75],["sgp.norm.group.preference=4),",129],["group by",87],["sgp.norm.group.preference=0)",85],["sgp.norm.group.preference=5),",70],["sgp.norm.group.preference=1)",62],["pdb + geom_line(aes(group=projid)) + facet_grid(msex~.)",60]],"useCount":7315},{"word":"groups","context":[["if(!is.null(groups))",58],["groups <- factor(groups)",29],["vertex.frame.color=NA, mark.groups=NULL, edge.color='lightgrey')",31],["if (is.null(groups)) {",51],["# mean expression of groups in every cluster",31],["groupmat <- groups(object)",34],["groups = NULL,",35],["for(g in levels(groups)){",39],["id <- groups==g",54],["if (!is.null(groups)) {",44]],"useCount":2387},{"word":"gsub","context":[["ds <- gsub('T', ' ', ds)",86],["new.runno <- gsub(\"run\", \"\", model)",85],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["trim <- function (x) gsub(\"^\\\\s+|\\\\s+$\", \"\", x)",71],["txt <- gsub(\"(^|[^\\\\])\\\\\\\\($|[^abfnrtuUvx0-9'\\\"\\\\])\",",66],["texinputs <- gsub(\"\\\\\", \"/\", texinputs, fixed = TRUE)",52],["BarcodeSample <- gsub(\"\\\\-\", \"\\\\.\", BarcodeSample)",50],["build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)",96],["gsub(\"\\\\.txt\",\"-\",chr.input)",190],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260]],"useCount":6378},{"word":"gt","context":[["grid.draw(tmp.gt)",1992],["tmp.gt <- table.grob(chr.col = \"Bacteria.OnPastureWStreamAccess\", df.output = df.output,",16],["tmp.gt <- table.grob(chr.col = \"Bacteria.InForestInStream\", df.output = df.output,",16],["return(gt)",23],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["rm(tmp.gt)",592],["x <- fsub(\">\", \"&gt;\", x)",33],["tmp.gt <- table.grob(chr.col = \"pairs.InConfinementvsTime\", df.output = df.output,",32],["grid.draw(gt)",29],["x <- gsub(\">\", \"&gt;\", x, fixed = TRUE)",24]],"useCount":4818},{"word":"h","context":[["max.dist = 3 * knots.h,",114],["h",127],["\"  -h, --help\t\tprint short help message and exit\",",133],["alpha.init = 0.5, rho.init = knots.h,",136],["if (a %in% c(\"-h\", \"--help\")) {",158],["abline(h=0)",352],["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["tmp.h <- grobHeight(tmp.table)",1432],["abline(h = 0)",108],["test <- function(h) {",97]],"useCount":10861},{"word":"h2o","context":[["#' @rdname h2o.metric",300],["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["#' localH2O <- h2o.init()",370],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["#' h2o.init()",563],["library(h2o)",588],["#' library(h2o)",733],["source('../../h2o-runit.R')",867],["source('../h2o-runit.R')",1120]],"useCount":26235},{"word":"has","context":[["# resulting codaSamples object has these indices:",42],["\"replacement has %d rows, data has %d\"),",108],["\"replacement has %d row, data has %d\",",108],["\"replacement has %d row, data has %d\",",108],["gettextf(\"  %s has wrong argument list %s\",",63],["has.j <- !missing(j)",52],["# User has logged in. Record details about the HTTP session.",50],["#                 \" the corresponding coefficient has been fixed at its MLE of negative infinity.\\n\",sep=\" \"))",48],["stop(gettextf(\"package %s has not been installed properly\\n\",",45],["\"replacement has %d rows, data has %d\"),",108]],"useCount":7644},{"word":"have","context":[["have <- list.files(file.path(outDir, dirname[type]))",72],["## we just have a stop list here.",66],["\"Please ensure that you have complied with it.\\n\")",60],["## Does the package have a NAMESPACE file?  Note that when",104],["stop(\"'x' and 'y' must have the same length\")",57],["stop(\"'qr' and 'y' must have the same number of rows\")",56],["# Unless you have received this program directly from RStudio pursuant",175],["## Does the package have a namespace?",102],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["if(rmatio:::have.zlib()) {",72]],"useCount":10990},{"word":"head","context":[["head(data)",231],["head(tpmData)",65],["tags$head(",253],["singleton(tags$head(tags$script(src = \"js/shinyBindings.js\", type='text/javascript'))),",73],["singleton(tags$head(tags$script(src = \"js/md5.js\", type='text/javascript'))),",73],["head(result)",73],["attr(aod, \"heading\") <- head",78],["head(df)",115],["head(dat)",121],["head(d)",130]],"useCount":5578},{"word":"header","context":[["header = header,",78],["source(\"header.R\")",372],["sep=\"\\t\", header=FALSE, as.is=TRUE);",64],["header = FALSE,",65],["header=FALSE,",65],["header = header,",78],["header = TRUE,",141],["header = TRUE)",114],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["header=TRUE,",188]],"useCount":7502},{"word":"height","context":[["\".pdf\"), height = 8.5, width = 11, onefile = TRUE)",190],["g <- .geometry(width, height, units, res)",72],["bounds <- grid.Call(L_rectBounds, x$x, x$y, x$width, x$height,",72],["width = width, height = height,",74],["width = 480, height = 480, units = \"px\", pointsize = 12,",72],["height=5,",104],["plot[[\"height\"]] <- 400",107],["height = height,",128],["height = height,",128],["width = width, height = height,",74]],"useCount":8235},{"word":"help","context":[["cat(help,sep=\"\\n\")",44],["if(\"--help\" %in% args) {",34],["\"  -h, --help\t\tprint short help message and exit\",",133],["if ( !is.null(opt$help) ) {",35],["if (a %in% c(\"-h\", \"--help\")) {",158],["\"  -h, --help\t\tprint short help message and exit\",",133],["# #' ##--\tor do  help(data=index)  for the standard data sets.",82],["#'    and the \\href{help:rkwardplugins}{Introduction to Writing Plugins for RKWard}",57],["# find the html help file and display in the default browser",48],["args <- c(\"--help\")",36]],"useCount":4137},{"word":"here","context":[["# lesson is started. Any variables created here will show up in",49],["## Working directory must be set here, so the source()'s below run",48],["#   # Form preliminary match. If match.call raises an error here, the remaining code is",50],["# its class can't be determined here without evaluation.",51],["# If match.fun(expr[[1]]) raises an exception here, the code which follows",51],["## need to drop \"units\" attribute here",51],["i18n=list(context=\"context info here\")",59],["## produce output here in case we found something.",66],["# You can find out more about building applications with Shiny here:",223],["## we just have a stop list here.",66]],"useCount":4635},{"word":"hex","context":[["#' prostate.hex <- h2o.uploadFile(localH2O, path = prosPath)",120],["parse_time <- system.time(data.hex <- h2o.importFile(url))",129],["#' prostate.hex <- h2o.uploadFile(path = prosPath)",123],["#' hex[,2] <- as.factor(hex[,2])",96],["#' hex[,2] <- as.factor(hex[,2])",96],["#' hex <- h2o.uploadFile(prosPath)",95],["#' perf <- h2o.performance(model, hex)",95],["myX = setdiff(names(data.hex), myY)",88],["#' model <- h2o.gbm(x = 3:9, y = 2, training_frame = hex, distribution = \"bernoulli\")",88],["print(hex)",124]],"useCount":9305},{"word":"home","context":[["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["delayedAssign(x, get(method, envir = home), assign.env = envir)",50],["home <- home                # force evaluation",52],["assignWrapped <- function(x, method, home, envir) {",52],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["Sys.setenv(PATH = paste(R.home(\"bin\"), oPATH,",54],["shQuote(file.path(R.home(\"share\"), \"make\",",56],["home <- home                # force evaluation",52],["rhome <- chartr(\"\\\\\", \"/\", R.home())",86],["wd2 <- setwd(file.path(R.home(\"bin\"), \"exec\"))",104]],"useCount":3123},{"word":"hr","context":[["tags$hr()",52],["hr(),",1086],["tags$hr(),",558],["HTML(\"<hr>\"),",113],["hr()",67],["HTML('<hr>'),",60],["out <- c(out, \"<hr/>\\n</body></html>\")",39],["shiny::tags$hr(),",36],["hr(class = \"hroptions\"),",28],["shiny::hr(),",21]],"useCount":2184},{"word":"html","context":[["out <- c(out, \"<hr/>\\n</body></html>\")",39],["make.packages.html(.Library)",39],["paste0(id, \".html\")",43],["thefile = Find(file.exists, file.path(.libPaths(), fn, \"markdown.html\"))",47],["# find the html help file and display in the default browser",48],["if(type == \"html\") {",48],["d1$save(paste(fileName,\".html\",sep=\"\"), cdn = TRUE)",56],["type <- \"html\"",72],["if (\"html\" %in% types) {",72],["\"content-type\" = 'text/html',",62]],"useCount":4567},{"word":"http","context":[["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["source(\"http://bioconductor.org/biocLite.R\")",285],["#' \\url{http://phylo.wikidot.com/matzke-2013-international-biogeography-society-poster}",218],["# http://shiny.rstudio.com",168],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["#  of packages for network analysis, http://statnet.org .",124],["#  http://statnet.org/attribution",124],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["#' \\url{http://www.mlhim.org}",337],["#  Part of the R package, http://www.R-project.org",3868]],"useCount":9394},{"word":"https","context":[["# Annotation from https://bioconductor.org/packages/release/data/annotation/html/illuminaHumanv4.db.html",29],["#  Part of the R package, https://www.R-project.org",1164],["# Nestedness) package: https://github.com/sjbeckett/FALCON",28],["# Code available at https://github.com/thomasevans/lbbg_gps",30],["#' Homepage: https://github.com/vertica/ddR",31],["## https://stat.ethz.ch/pipermail/r-devel/2010-April/057225.html",31],["url <- \"https://api.twitter.com/1.1/application/rate_limit_status.json\"",38],["source(\"https://bioconductor.org/biocLite.R\")",49],["#' \\url{https://code.google.com/p/lagrange/}",75],["url <- 'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'",129]],"useCount":2952},{"word":"i","context":[["i <- i + 1",1039],["i <- i+1",333],["i = i + 1",352],["i = i + 1",352],["i <- 0",454],["print(i)",795],["i <- i + 1",1039],["for (i in 1:n) {",620],["i <- 1",1189],["for(i in 1:n){",522]],"useCount":110133},{"word":"id","context":[["} # for id",187],["test(id=0, code={",3834],["new.event <- list(PatientID=patient.id,",314],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["patient.number <- as.integer(id.map[patient.id])",260],["patient.number <- as.integer(id.map[patient.id])",260],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["for(id in ids){",191],["group_by(cluster.id) %>%",169],["## 'id' is an integer vector indicating the monitor ID numbers",172]],"useCount":19424},{"word":"identical","context":[["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["stopifnot(identical(pmin(x, y), pmin(y, x)))",90],["stopifnot(identical(pmin(x, y, na.rm=TRUE), pmin(y, x, na.rm=TRUE)))",90],["stopifnot(identical(pmax(x, y), pmax(y, x)))",90],["stopifnot(identical(pmax(x, y, na.rm=TRUE), pmax(y, x, na.rm=TRUE)))",90],["stopifnot(identical(x, y))",76],["if(identical(package, \".GlobalEnv\"))",71],["stopifnot(identical(input, unserialize(serialize(input, NULL))))",56],["if(!identical(default, value)) # user supplied default",54]],"useCount":16057},{"word":"identity","context":[["geom_bar(stat = \"identity\") +",114],["geom_bar(stat=\"identity\") +",205],["error = identity)",379],["error = identity))",93],["error = identity),",90],["geom_bar(stat='identity') +",54],["geom_bar(stat=\"identity\",position=dodge) +",50],["res <- tryCatch(fun(libname, pkgname), error = identity)",47],["geom_bar(position=position_dodge(), stat=\"identity\") +",43],["glm(y ~ x, family = poisson(identity), start = c(1,0))",38]],"useCount":2889},{"word":"ids","context":[["for(id in ids){",191],["## Version control directory names: CVS, .svn (Subversion), .arch-ids",26],["#'    \\item wid. vocabulary ids of the instances of words in the corpus (a",26],["ids <- c()",28],["# get the matching positions for uniprot ids in the reactome table",31],["ds$id <- 1:nrow(ds) # some ids values might be identical, replace",32],["## Determine ids of blocks that need to be joined.",32],["return(ids)",33],["cat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")",45],["result <- vector(\"list\", length(ids))",104]],"useCount":2378},{"word":"idx","context":[["if(!any(idx)) return(bad_Rd_objects)",136],["if(is.na(idx))",109],["db <- db[idx]",100],["idx <- idx + 1",74],["idx <- idx + 1",74],["idx = pmatch(name, names(accessorFuns))",71],["f = accessorFuns[[idx]]",71],["idx <- 0",69],["symNames <- symNames[-idx]",50],["if(!is.na(idx)) {",50]],"useCount":3838},{"word":"if","context":[["if (verbose) {",1034],["if (first) {",1713],["if(verbose)",870],["if (length(out)) {",866],["if(!missing(package)) {",748],["if (!any) warningLog(Log)",644],["if(any(ind)) {",630],["if (USER$Logged == TRUE)",629],["if(length(package) != 1L)",625],["if(!any) warningLog(Log)",588]],"useCount":392157},{"word":"ifelse","context":[["start$mday <- start$mday + ifelse(start$wday > 0L, 1L, -6L)",40],["height <- g$height/ifelse(is.na(res), 72, res);",40],["exprGood <- ifelse(is(err, \"try-error\"), expr_identical_to(correctExpr), ans)",45],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["step <- ifelse(length(by2) == 2L, as.integer(by2[1L]), 1L)",78],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["ifelse(",154],["width <- g$width/ifelse(is.na(res), 72, res);",40],["mmat <- ifelse(is.na(x), 1, NA)",40],["else if (tag == \"\\\\ifelse\")",39]],"useCount":4986},{"word":"ignore","context":[["ignore.case, perl, fixed, useBytes))",56],["\"ignore\",",120],["files, ignore.case = TRUE)",92],["value = TRUE, ignore.case = TRUE)",84],["ignore.case = TRUE)",74],["function(dir, ignore = character(),",64],["ignore <- get_exclude_patterns()",54],["for(e in ignore)",48],["filter = list(\"pot\", ignore = ignore),",48],["filter = list(\"pot\", ignore = ignore),",48]],"useCount":3687},{"word":"igraph","context":[["mode <- igraph.match.arg(mode)",48],["if (!is.igraph(graph)) {",256],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["PACKAGE=\"igraph\")",388],["library(igraph)",1215],["require(igraph)",168],["if (!is.igraph(graph)) { stop(\"Not a graph object\") }",52],["library(\"igraph\")",109],["#' @import igraph",34],["# igraph exports %>% from magrittr",41]],"useCount":2886},{"word":"ii","context":[["ii <- 1 # loop counter",139],["x[ii, ] <- c(i, j, treedist(tr2,ref2[[j]]))",139],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2))",139],["stopifnot(is.na(ii))",88],["ii <- ii + 1",65],["ii <- ii + 1",65],["x[ii, ]<- c(i,j,treedist(tr2,ref2))",139],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2[[j]]))",139],["ii <- ii+1",567],["ii <- ii+1",567]],"useCount":5457},{"word":"image","context":[["image <- .beginSaveImage(530, 400)",227],["contentType = 'image/png'",43],["image(rbind(1:nr), col = RowSideColors[rowInd], axes = FALSE)",43],["messageLog(Log, \"re-saving image files\")",44],["contentType='image/pdf')",57],["contentType='image/jpg')",57],["contentType='image/png')",57],["image <- .beginSaveImage(options$plotWidth, options$plotHeight)",68],["content <- .endSaveImage(image)",84],["plot[[\"data\"]] <- .endSaveImage(image)",250]],"useCount":2358},{"word":"import","context":[["#' @import dplyr",321],["#' @import ggplot2",340],["#' @import data.table",229],["#' @import methods",207],["#' @import httr",87],["#' @import raster",87],["#'@import ggplot2",138],["#' @import htmlwidgets",108],["#' @import sp",86],["#' @import plyr",82]],"useCount":4402},{"word":"importFrom","context":[["#' @importFrom methods is",50],["#' @importFrom Rcpp sourceCpp",56],["#' @importFrom magrittr \"%>%\"",56],["#' @importFrom unitted u",60],["#' @importFrom stats na.omit",62],["#' @importFrom reshape2 melt",66],["#' @importFrom methods setMethod",86],["#' @importFrom stats setNames",101],["#' @importFrom magrittr %>%",111],["#' @importFrom RCurl getURL",49]],"useCount":2597},{"word":"in","context":[["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["## Using package installed in @code{dir} ...",323],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["# along with this program.  A copy can be cound in the R installation",234],["for (i in seq_along(tr2)) {",278],["for (i in 1:n) {",620],["for(i in 1:n){",522],["for (iter in 1:Iterations) {",289],["\"in the 'Writing R Extensions' manual.\\n\")",329],["#' @return A dataframe consisting of the vectors listed in the Description.",346]],"useCount":155167},{"word":"include","context":[["include.lowest = TRUE,",49],["#' @include plotting-classes.R",49],["# include breakpoint lines",922],["#' @include simList-class.R",110],["#' @param parms (Optional) Parameters to include in the request",84],["#' @include utils.R",80],["#' @include darch.R",50],["#' @include model-zelig.R",44],["#' @include rbm.R",44],["full.names = TRUE, include.dirs = TRUE)",39]],"useCount":4331},{"word":"ind","context":[["if(any(ind)) {",630],["if(any(ind))",416],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["exprs <- exprs[!ind]",167],["ind <- as.logical(sapply(exprs,",166],["db <- db[!ind]",147],["msg <- ngettext(sum(ind),",120],["if(length(ind)) {",110],["bad_lines <- lapply(db_usages[ind], attr, \"bad_lines\")",102],["db_names <- db_names[!ind]",101]],"useCount":14508},{"word":"indent","context":[["strwrap(y[[2L]], indent = 2L, exdent = 4L)),",63],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["indent = 4L, exdent = 4L)))",66],["indent = 2L, exdent = 8L),",66],["strwrap(y[[1L]], indent = 2L, exdent = 4L),",66],["msg <- strwrap(paste(msg, collapse = \" \"), indent = 2L, exdent = 2L)",80],["indent = 2L, exdent = 2L),",121],["indent = 2L, exdent = 2L))",62],["indent = 2L, exdent = 2L)",61],["indent = 2, exdent = 2), collapse = \"\\n\"),",173]],"useCount":3457},{"word":"index","context":[["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["index <- 1",262],["index <- index + 1",300],["index <- index + 1",300],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["dl.index <- grid.Call(L_getDLindex)",109],["stop(\"row dendrogram ordering gave index of wrong length\")",107],["stop(\"column dendrogram ordering gave index of wrong length\")",107],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110]],"useCount":9908},{"word":"index1","context":[["F7_H3K27me3_WT_sort         <-  rbind( myFirstLine ,    C7_Average_H3K27me3_WT[index1,  ]    )",19],["E3_Average_MNase_EEDko_sort       <-  \trbind( myFirstLine ,    D3_Average_MNase_EEDko[index1,    ]    )",19],["G4_EED_Adult_Rep1 <- rbind( myFirstLine ,    B4_EED_Adult_Rep1[index1, ]    )",19],["F1_week4_EEDheto_sort      <-  \trbind( myFirstLine ,    C1_Average_week4_EEDheto[index1,  ]    )",19],["E4_EED_P5_sort      <-  \trbind( myFirstLine ,    D4_Average_EED_P5[index1,    ]    )",19],["G5_HDAC_HomoHDAC1 <- rbind( myFirstLine ,    B5_HDAC_HomoHDAC1[index1, ]    )",19],["G6_H3K27ac_EEDko_rep2 <- rbind( myFirstLine ,    B6_H3K27ac_EEDko_rep2[index1, ]    )",19],["toSort1[ index1[1:100] ]",19],["G1_H2BGFP_week0_Rep1 <- rbind( myFirstLine ,    B1_H2BGFP_week0_Rep1[index1, ]    )",19],["F1_H2BGFP_WT_week8_sort  <-   rbind( myFirstLine ,    C1_Average_week8[index1, ]    )",19]],"useCount":2647},{"word":"info","context":[["if (Sys.info()[1] == \"Linux\" || Sys.info()[1] == \"Darwin\") {",89],["\"  -v, --version\t\tprint version info and exit\",",104],["have_ttk <- as.character(tcl(\"info\", \"tclversion\")) >= \"8.5\"",184],["Log.info(\"Perform filtering with the '$' sign also\")",254],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["info",91],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["} else if (Sys.info()[1] == \"Windows\") {",89],["if (Sys.info()[1] == \"Linux\" || Sys.info()[1] == \"Darwin\") {",89],["Log.info(\"Performing various checks of the constructed grid...\")",87]],"useCount":14174},{"word":"information","context":[["# distributed with this work for additional information",608],["# To filter out samples based on donor information",88],["# check required information",86],["## land use information",65],["# To store Illumina IDs information",55],["checkingLog(Log, \"DESCRIPTION meta-information\")",54],["# To get the donors information",44],["\" syntax tree without additional information.\\n\"))",51],["# Check that the font has the correct structure and information",40],["# Display posterior information:",40]],"useCount":3602},{"word":"inherits","context":[["inherits = FALSE)) {",88],["if (inherits(desc, \"try-error\") || !length(desc)) {",86],["stopifnot(inherits(z, \"try-error\"))",83],["if (!inherits(gPath, \"gPath\"))",80],["if (inherits(model, \"ExternalReference\")) model = slot(model,\"ref\")",90],["if(!inherits(file, \"connection\"))",94],["if(inherits(db, \"error\")) {",101],["if (inherits(res, \"error\")) {",118],["if(inherits(Mo1, \"try-error\")) {",217],["if (inherits(res, \"try-error\"))",269]],"useCount":12189},{"word":"init","context":[["#' sqlContext <- sparkRSQL.init(sc)",214],["#' localH2O <- h2o.init()",370],["#' h2o.init()",563],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["# sc <- sparkR.init()",154],["alpha.init = 0.5, rho.init = knots.h,",136],["alpha.init = 0.5, rho.init = knots.h,",136],["h2o.init()",130],["#' sc <- sparkR.init()",595]],"useCount":7258},{"word":"input","context":[["if(!is.null(input$breakpointsCheckbox)",441],["&& input$breakpointsCheckbox == TRUE) {",450],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["if(!is.null(input$quick_breakpointsCheckbox)",463],["&& input$quick_breakpointsCheckbox == TRUE) {",472],["shinyServer(function(input, output) {",959],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["shinyServer(function(input, output, session) {",546]],"useCount":25952},{"word":"inputParams","context":[["inputParams=emptyNamedList,",358],["inputParams,",415],["inputParams=emptyNamedList, jsonifyData=TRUE,",57],["##' \\code{inputParams} directly.  (Default is \\code{TRUE}.)",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' @param inputParams Either an R object that will be converted into JSON",498]],"useCount":2324},{"word":"inst","context":[["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["if (dir.exists(\"inst\") && !length(dir(\"inst\", recursive = TRUE))) {",32],["if (dir.exists(\"inst/doc\")) {",32],["checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))",32],["## Common problems: rather than inst/CITATION, have",32],["if (file.exists(file.path(\"inst\", \"CITATION\"))) {",32],["## fake installs don't install inst/doc",32],["meta <- if(basename(dir <- dirname(cfile)) == \"inst\")",33],["demo = character(), `inst/doc` = character())",33],["if(length(wrong)) wrong_things$`inst/doc` <- wrong",33]],"useCount":3604},{"word":"install","context":[["install.packages(\"devtools\")",93],["install.packages(\"reshape2\")",47],["#install.packages(\"ggplot2\")",46],["install.packages(\"plyr\")",46],["install.packages(\"data.table\")",44],["message(\"\\n\", \"install for \", arch, \"\\n\", domain = NA)",48],["stages = c(\"build\", \"install\", \"render\"))",50],["install.packages(\"dplyr\")",66],["install.packages(\"ggplot2\")",124],["install.packages(pkg_dir,type=\"source\",repos=NULL)",72]],"useCount":5933},{"word":"installed","context":[["## Using package installed in @code{dir} ...",323],["oo <- installed.packages()",36],["## Rd objects should already have been installed.",38],["instPkgs = installed.packages(lib.loc = lib.loc),",42],["stop(gettextf(\"package %s has not been installed properly\\n\",",45],["## to be used in installed.packages() and similar",60],["function(dir, installed = FALSE)",66],["new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]",67],["meta <- tools:::.get_package_metadata(dir, installed = FALSE)",102],["#           curl, javac, java must be installed.",120]],"useCount":5282},{"word":"int","context":[["initialize <- expression({n <- rep.int(1, nobs)",40],["n <- rep.int(1, nobs)",77],["url_db(urls, rep.int(path, length(urls)))",40],["w = \"wt.int\",",37],["as.integer(seq.int(from = nrow + 1L, length.out = ni))",44],["for(i in seq.int(from=2L, length.out = length(x)-1L)) {",44],["for (j in sample.int(LIV)) {",48],["x <- seq.int(0, 1, length.out = nrow(z))",55],["if(conf.int) {",65],["if(conf.int)",66]],"useCount":6963},{"word":"integer","context":[["n<-as.integer(args[1])",68],["as.integer(length(x)),",59],["patient.number <- as.integer(id.map[patient.id])",260],["## 'id' is an integer vector indicating the monitor ID numbers",172],["as.integer(n),",111],["# To get an integer value of number of arrays",108],["'integer',",104],["n <- as.integer(n)",80],["step <- ifelse(length(by2) == 2L, as.integer(by2[1L]), 1L)",78],["as.integer(N),",60]],"useCount":14247},{"word":"internal","context":[["## Exclude internal objects from further computations.",66],["## force the use of internal untar unless over-ridden",56],["#internal",43],["##' @keywords internal",35],["function(x) length(grep(\"^ *internal *$\", x)) > 0L )",66],["#'@keywords internal",74],["## Currently only accessible via an internal environment",82],["#' @keywords internal manip",102],["##' This is an internal function exported for those people who know",160],["#' @keywords internal",2458]],"useCount":4973},{"word":"into","context":[["Log.info(\"Placing key \\\"sliced.hex\\\" into User Store\")",41],["# Load the relevant model into R's working memory:",36],["# extract all <word> elements and children into XmlNodeList object",36],["## put the class name with package attribute into new()",40],["# Else, must specify new fonts to enter into database (all",40],["#   into memory.  Avoid side effects and don't pollute the global environment.",47],["## The S4 'system' does **copy** base code into packages ....",60],["K=5 # Number of subspaces into which the test is projected",110],["## Load package into code_env.",238],["##' @param inputParams Either an R object that will be converted into JSON",498]],"useCount":4667},{"word":"invalid","context":[["stop(\"invalid 'arrow' argument\")",59],["if(is.na(valid)) stop(\"invalid specification of 'breaks'\")",52],["stop(\"invalid outcome\")",228],["stop(\"invalid state\")",166],["if(!checkIntFormat(filename)) stop(\"invalid 'filename'\")",117],["stop(\"invalid 'row.names' length\")",65],["stop(\"invalid vector for 'comp'.\")",64],["stop(\"invalid 'dimnames' given for data frame\")",61],["stop(\"invalid 'grep' value\")",60],["#   $Result    Deletion, invalid, amplification, Negative, 100",60]],"useCount":4538},{"word":"invisible","context":[["return(invisible(NULL))",683],["invisible(x)",2782],["return(invisible(.self))",187],["invisible(TRUE)",209],["return(invisible(x))",224],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["invisible(NULL)",972],["return(invisible())",1209],["invisible()",2353]],"useCount":14924},{"word":"iris","context":[["data(iris)",195],["#' fr <- as.h2o(iris)",83],["#' data(iris)",77],["hex <- as.h2o(iris)",73],["#' iris.hex <- as.h2o(iris)",70],["#' iris.hex <- as.h2o(iris)",70],["print(summary(iris.hex))",68],["#' summary(iris.hex)",66],["summary(iris.hex)",54],["#' iris.hex <- h2o.uploadFile(localH2O, path = irisPath)",52]],"useCount":3829},{"word":"is","context":[["if (is.null(bounds))",520],["#' The data is structured according to the Multi-Level Healthcare Information Modelling Reference Model release 2.5.0",304],["# along with this program; if not, a copy is available at",314],["if(!is.null(input$breakpointsCheckbox)",441],["if(!is.null(input$quick_breakpointsCheckbox)",463],["##' \\code{inputParams} directly.  (Default is \\code{TRUE}.)",498],["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["##' @param alwaysRetry Whether to always retry even when no response is",498]],"useCount":179404},{"word":"it","context":[["# Now pass to ui.R what it needs to display this tab",64],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["# then, if the requested plot already exists, use it",228],["print(\"Time it took to parse\")",199],["#\tE-mail: claudio@unive.it                            #",100],["## it seems that splits on spaces, so try harder.",97],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["## R developers can use this to debug the function by running it",78],["# check out if the file is compressed and if so unzip it",69],["# if the requested plot already exists use it",62]],"useCount":13095},{"word":"item","context":[["#'    \\item von Bertalanffy",54],["#'    \\item Growth",62],["#'    \\item Abundance",64],["## Get the \\item tags inside \\describe.",66],["#'    \\item Recruitment",56],["function(item) {",82],["#'    \\item Stock-Recruit",54],["#'  \\item{region_id}{ID for region within a statistical area}",50],["#'  \\item{count}{Census count for this region}",47],["#'  \\item{colname}{Full column name from original ABS data}",47]],"useCount":4100},{"word":"itemize","context":[["\"\\\\itemize\"=,",22],["\"\\\\itemize\"= {",31],["#'      \\itemize{",35],["#'         \\itemize{",36],["#'    \\itemize{",66],["##' \\itemize{",73],["#'\\itemize{",116],["#' \\itemize{",1618],["#'  \\itemize{",624],["#'   \\itemize{",219]],"useCount":3145},{"word":"iter","context":[["cat(\"Iteration: \", iter,",175],["if(iter %% Status == 0)",333],["if(iter %% Thinning == 0) {",386],["Mon[t.iter,] <- Mo0[[\"Monitor\"]]}",215],["for (iter in 1:Iterations) {",289],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["t.iter <- floor(iter / Thinning) + 1",252],["t.iter <- floor(iter / Thinning) + 1",252],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["cat(\"  Iteration:\", iter, \"Proposal:\\n\",",302]],"useCount":6940},{"word":"its","context":[["##     will also export its methods.",33],["# Whenever swirl is running, its callback is at the top of its call stack.",138],["## \"graphics\" with its own environment which does not",33],["## its parent env, and excluded the ones already found there.",33],["## conveniently, we wrap around methods::getGenerics() to rewrite its",33],["#                 \" the corresponding coefficient has been fixed at its MLE of negative infinity.\\n\",sep=\" \"))",48],["# its class can't be determined here without evaluation.",51],["\" hence its class can't be determined in an abstract\",",51],["##' (\"app-name\") or its full ID (\"app-xxxx\")",57],["# Whenever swirl is running, its callback is at the top of its call stack.",138]],"useCount":2123},{"word":"j","context":[["j <- j + 1",412],["j <- j + 1",412],["j <- 1",368],["j <- j+1",206],["x[ii, ] <- c(i, j, treedist(tr2,ref2[[j]]))",139],["j <- j+1",206],["x[ii, ] <- c(i, j, treedist(tr2,ref2[[j]]))",139],["# Get the i,j matrix positions of the regions that contain this subplot",197],["for (j in seq_along(ref2)) {",139],["x[ii, ]<- c(i,j,treedist(tr2,ref2))",139]],"useCount":25221},{"word":"jsonifyData","context":[["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["jsonifyData,",57],["inputParams=emptyNamedList, jsonifyData=TRUE,",57],["jsonifyData=jsonifyData,",358],["jsonifyData=jsonifyData,",358],["jsonifyData=TRUE,",443],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498]],"useCount":2269},{"word":"just","context":[["resolveVJust(x$just, x$vjust),",143],["## we just have a stop list here.",66],["resolveHJust(x$just, x$hjust),",166],["# If expr is not a call, just return it.",51],["valid.just(x$just)",48],["valid.just(x$just)",48],["popupTemplate =  \"#! function(geography, data) { //this function should just return a string",38],["## (rather than just the ones with mismatches).",34],["## dependencies listed in DESCRIPTION, or e.g. just the ones on",34],["just=\"centre\", hjust=NULL, vjust=NULL,",74]],"useCount":3499},{"word":"k","context":[["k <- k+1",116],["for (i in 1:k) {",115],["k <- k + 1",231],["k <- k+1",116],["for (k in seq(from=0, to=nExp-1)) {",148],["for (k in seq(from=1, to=nAssets)) {",177],["k.size <- env$k.size",112],["k <- k + 1",231],["k <- 1",295],["k.size <- env$k.size",112]],"useCount":15899},{"word":"keep","context":[["keep <- sapply(e, function(x) deparse(x)[1L] != \"...\")",66],["mc <- match.call(get(Call, baseenv()), e[keep])",66],["# Add it to the features to keep",56],["# Avoid consecutive duplicates (once it is found there is no point in keep going)",56],["keep <- NULL",53],["#' @param keep_cross_validation_predictions Whether to keep the predictions of the cross-validation models",51],["# keep only lon and lat columns",51],["keep <- c(keep, plot$data)",51],["keep <- c(keep, plot$data)",51],["##### Determine the columns to keep and the column to add",43]],"useCount":5778},{"word":"key","context":[["legend.key = element_blank(),",103],["##      lty col  key      label",80],["if(!is.character(key)) stop(\"key must be of class character\")",62],["if(!is.character(key)) stop(\"key must be of class character\")",62],["stop(\"argument \\\"training_frame\\\" must be a valid H2OFrame or key\")",51],[".key.validate(destination_frame)",51],["stop(\"argument \\\"training_frame\\\" must be a valid Frame or key\")",49],["stop(\"key must match the regular expression '^[a-zA-Z_][a-zA-Z0-9_.]*$'\")",47],["if(nchar(key) > 0 && regexpr(\"^[a-zA-Z_][a-zA-Z0-9_.]*$\", key)[1] == -1)",47],["if(nchar(key) > 0 && regexpr(\"^[a-zA-Z_][a-zA-Z0-9_.]*$\", key)[1] == -1)",47]],"useCount":4761},{"word":"keywords","context":[["#'@keywords internal",74],["#' @keywords internal",2458],["#' @keywords datasets",789],["#' @keywords data",157],["#' @keywords manip",146],["#' @keywords utilities",134],["#' @keywords package",117],["#' @keywords internal manip",102],["#' @keywords ts multivariate distribution models",101],["# #' @keywords ~kwd1 ~kwd2",83]],"useCount":6030},{"word":"knitr","context":[["knitr::opts_knit$set(width = 70)",46],["knitr::render_jekyll()",44],["} else knitr::render_markdown()",41],["requireNamespace(\"knitr\")",39],["knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)",48],["# knitr::stitch_rmd(script=\"./___/___.R\", output=\"./___/___/___.md\")",57],["require(knitr)",95],["knitr::opts_chunk$set(",95],["library(knitr)",512],["library(\"knitr\")",1756]],"useCount":3765},{"word":"knots","context":[["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["dw2.o  <- rdist(s.o, knots)",57],["fit.probit <- probit(Y = y.i.o, X = X.o, s = s.o, knots = knots,",62],["fit.probit <- probit(Y = y.i.o, X = X.o, s = s.o, knots = knots,",62],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["s.pred = s.p, knots = knots,",139],["knots <- splineKnots(object)",84],["max.dist = 3 * knots.h,",114],["alpha.init = 0.5, rho.init = knots.h,",136],["s.pred = s.p, knots = knots,",139]],"useCount":2629},{"word":"l","context":[["l.lookup = lookuptable(",113],["l",215],["type = \"l\",",183],["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["return(l)",162],["ts = l[[2]]",120],["tr = l[[1]]",120],["type=\"l\",",119],["return(lookup(l.lookup,xin))",113],["n <- length(l[[1]])",113]],"useCount":11681},{"word":"lab","context":[["V(ig)$label = as.character(lab$SYMBOL)",128],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["cex.lab=cex.lab,",48],["cex.lab=cex.lab,",48],["attr(val, \"label\") <- lab",43],["cex.lab=1.5,",43],["par(bg=bg, font.main = 2, font.lab = 2)",43],["par(font.lab=2)",38],["col.lab = 'black',",37],["lab = f_dfGetGeneAnnotation(n)",128]],"useCount":3625},{"word":"label","context":[["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74],["##      lty col  key      label",80],["#' The vectors are: label, vtb, vte, #' dvstring_value, dvstring_language, #' ccd, sourceName,",224],["p$data$label) & isTip)),",81],["tmpdir\t\t\t<- paste(tmpdir,label,sep='')",87],["ntaxa <- length(phylo$tip.label)",95],["cb$putlabel(end.label)",116],["end.label <- cb$makelabel()",116],["V(ig)$label = as.character(lab$SYMBOL)",128],["# draw rescaled ews line, axis, and label (from 'plotrix')",193]],"useCount":9940},{"word":"labels","context":[["labels=c(\".1\", \".2\", \".3\", \".4\", \".5\", \".6\", \".7\", \".8\", \".9\", \"1.0\"),",66],["scale_x_discrete(breaks=c(1, 7, 79, 157), labels = c(\"9:30am\", \"10:00am\", \"Day 1 Close\", \"Day 2 Close\")) +",196],["scale_y_continuous(breaks =c(-.5, 0, .5, .75, 1), labels = c(\"-50%\", \"0%\", \"50%\", \"75%\", \"100%\")) +",196],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["labels=factorVarLabels),",95],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["labels=uniqueLabels),",74],["labels=meanLabels),",68]],"useCount":11616},{"word":"lambda","context":[["lambda <- object$lambda",32],["ix = match(cv_fit$lambda.1se,cv_fit$lambda)",32],["ix = match(cv_fit$lambda.1se,cv_fit$lambda)",32],["lambda = 1.0,",79],["lambda,",34],["lambda = 0,",35],["lambda <- 0",39],["stop(paste(\"lambda must be positive\", \"\\n\", \"\"))",42],["lambda = lambda,",150],["lambda = lambda,",150]],"useCount":2715},{"word":"land","context":[["chk.land.Pasture",96],["chk.pop <- rbind(data.frame(location = \"forest\", pop = chk.pop.on.land.Forest),",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["model.bac.total = df.output[ , \"bac.forest.on.land\"],",96],["model.bac.total = df.output[ , \"bac.pasture.on.land\"],",96],["chk.land.Forest",112],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.dil * (df.output[ , \"bac.forest.on.land\"] -",96]],"useCount":4074},{"word":"lapply","context":[["bad_lines <- lapply(db_usages[ind], attr, \"bad_lines\")",102],["data <- lapply(pcm, mlhim250rm::DvString)",224],["db_usages <- lapply(db, .Rd_get_section, \"usage\")",66],["exprs <- lapply(ls(envir = code_env, all.names = TRUE),",67],["x <- lapply(objects_in_env,",75],["lapply(cmd, system)",81],["aliases <- lapply(db, .Rd_get_metadata, \"alias\")",112],["lapply(",134],["deleters <- which(unlist(lapply(result, is.null)))",187],["as.character(unlist(lapply(names(x), .fmt)))",193]],"useCount":12771},{"word":"las","context":[["axis(side=1, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",49],["par(las=2)",66],["at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",66],["axis(2, las=1)",68],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["las=1)",49],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["las = 1,",117],["par(las=1)",120],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129]],"useCount":2869},{"word":"last","context":[["sQuote(\"family\"), sQuote(\"last\")),",38],["stop(printSpssError(last.SpssError),call. = getOption(\"SPSSStatisticsTraceback\"), domain = NA)",160],["dont.mind <- c(\"last.dump\", \"last.warning\", \".Last.value\",",37],["first = NULL, last = NULL)",38],["last.SpssError <<- 17",41],["q_use = FALSE #use p value at last",82],["stop(printSpssError(last.SpssError),call. = FALSE, domain = NA)",103],["# To compare if the arrays are the last 10 arrays or not",108],["# Get the last expression which the user entered at the R console.",136],["if( is.SpssError(last.SpssError))",157]],"useCount":3853},{"word":"layout","context":[["# If layout is NULL, then use 'cols' to determine layout",195],["if (is.null(layout)) {",209],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["layout.pos.col = matchidx$col))",203],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["# If layout is NULL, then use 'cols' to determine layout",195]],"useCount":5112},{"word":"left","context":[["if (oneSided == \"left\") {",296],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["} else if (oneSided == \"left\") {",101],["layout.widths = list(left.padding = 0, right.padding = 0),",76],["oneSided <- \"left\"",55],["Log.info(\"Checking left and right: \")",46],["left = normalize(left)",40],["left = normalize(left)",40],["## precautionary remove in case some other attempt left it behind",32],["checkingLog(Log, \"for left-overs from vignette generation\")",32]],"useCount":3407},{"word":"legend","context":[["theme(legend.position=\"none\")",130],["legend(\"topright\",",145],["theme(legend.position=\"none\") +",170],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["legend(\"topleft\",",967],["legend.direction=\"vertical\") +",196],["legend.position=\"right\",",207],["legend.title=element_blank(),",321],["# update plot legend with only ews line",898],["# update plot legend with ews and breakpoint lines",898]],"useCount":15885},{"word":"len","context":[["v.len <- round(.75 * v.len)",48],["len.reg <- len.reg + 1",42],["regression.result[[ len.reg ]]$\"Model\" <- as.integer(m)",42],["len.reg <- len.reg + 1",42],["for (i in 1:len) {",47],["v.len <- round(.75 * v.len)",48],["len <- length(x)",64],["if(len > 3L) {",66],["len <- length(ind)",82],["if(len) {",99]],"useCount":5244},{"word":"length","context":[["n <- length(x)",1017],["if (length(n) > 0)",363],["if(length(xx) > 1L) {",340],["n <- length(y)",315],["if (length(data) > 0) {",315],["} else if(length(bad)) {",283],["if(length(package) != 1L)",625],["stop(\"argument 'package' must be of length 1\")",667],["if (length(out)) {",866],["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898]],"useCount":122969},{"word":"level","context":[["level = level, level.comb = level.comb,",52],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["## Look at all calls (not only at top level).",63],["attr(cint, \"conf.level\") <- conf.level",72],["attr(cint, \"conf.level\") <- conf.level",72],["alpha <- 1 - conf.level",81],["stop(\"'conf.level' must be a single number between 0 and 1\")",84],["level <- as.matrix(attributes(df)$levels)",101],["pll <- c(pll,list(data.frame(parameter,type,level)))",101],["parameter <- rep(n,nrow(level))",101]],"useCount":7286},{"word":"levels","context":[["fG = factor(fGroups, levels= c(levels(fGroups)[1], lev[-i], lev[i]) )",79],["train[[f]] <- as.integer(factor(train[[f]], levels=levels))",55],["levels <- unique(c(train[[f]], test[[f]]))",55],["for (i in 2:length(levels(fSamples))){",59],["lx <- levels(x)",62],["mf$drop.unused.levels <- TRUE",77],["lev = levels(fGroups)[-1]",79],["fG = factor(fGroups, levels= c(levels(fGroups)[1], lev[-i], lev[i]) )",79],["level <- as.matrix(attributes(df)$levels)",101],["levels = strftime(",644]],"useCount":8024},{"word":"lib","context":[["db <- Rd_db(package, lib.loc = dirname(dir))",68],["dir <- find.package(package, lib.loc)",623],["function(package, dir, lib.loc = NULL)",419],["c(lib.loc, .libPaths()),",72],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["Rd_db(package, lib.loc = dirname(dir))",127],["function(package, lib.loc = NULL)",128],["if(is.null(lib.loc))",143],["lib.loc <- .libPaths()",173],[".load_package_quietly(package, lib.loc)",434]],"useCount":12091},{"word":"library","context":[["library(stringr)",1259],["library(tidyr)",1276],["library(\"rgl\")",1720],["library(\"knitr\")",1756],["library(ggplot2)",7006],["library(dplyr)",4151],["library(shiny)",3258],["library(plyr)",2718],["library(data.table)",1845],["library(reshape2)",1774]],"useCount":107145},{"word":"like","context":[["## How about any pdf files which look like figures files from vignettes?",32],["## we could do something like",66],["## \\usage is only 'verbatim-like'",33],["## Note also that we'd like to help people find where the offending",33],["## trouble in case T or F were redefined.  So we'd like to warn about",33],["wrapLog(\"\\nIt looks like this package\",",95],["# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),",109],["## add something like",33],["\"The following files look like leftovers/mistakes:\\n\",",60],["messageLog(Log, \"looks like \", sQuote(pkgname0),",64]],"useCount":2206},{"word":"line","context":[["theme(axis.line=element_blank(),",58],["axis.line = list(lwd = 0.01),",58],["axis.line = element_line(colour = \"black\"),",60],["axis.line = element_blank(),",76],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["# update plot legend with only ews line",898],["trellis.par.set('axis.line', list(col='transparent'))",56],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253]],"useCount":10733},{"word":"lines","context":[["# update plot legend with ews and breakpoint lines",898],["lines",151],["lines <- readLines(outfile, warn = FALSE)",96],["lines, invert = TRUE, value = TRUE)",101],["paste(lines, collapse = \"\\n\"),",104],["lines <- readLines(file)",112],["lines, invert = TRUE, value = TRUE, useBytes = TRUE)",116],["if(length(lines))",126],["lines <- readLines(file, warn = FALSE)",145],["# include breakpoint lines",922]],"useCount":16248},{"word":"link","context":[["## what else shall we allow?  At least objects of class link-glm.",72],["##' @seealso \\code{\\link{dxHTTPRequest}}",498],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["linktemp <- substitute(link)",90],["link = linktemp,",89],["stats <- make.link(linktemp)",89],["stats <- link",82],["linktemp <- link",73],["stats <- make.link(link)",71],["else if (is.character(link)) {",72]],"useCount":7171},{"word":"list","context":[["methods = list(",654],["list(",2751],["rm(list=ls())",2467],["data = list(",494],["return(list())",559],["args <- list(...)",635],["dots <- list(...)",469],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["rm(list = ls())",1170],["out <- list()",465]],"useCount":97446},{"word":"ll","context":[["return(ll)",71],["out <- out[ll:length(out)]",64],["ll <- ll[length(ll)]",64],["ll <- ll[length(ll)]",64],["#' \\tabular{ll}{",274],["ll <- ll[length(ll)]",64],["if(length(ll)) {",64],["ll <- grep(\"---- unloading\", out)",64],["ll",44],["cxxstd <- gsub(\"^CXX_STD *=\", \"\", ll)",36]],"useCount":2735},{"word":"lm","context":[["#geom_smooth(method=lm)+",80],["geom_smooth(method=\"lm\") +",61],["for (m in 1:length(lm.model)) {",60],["if(!inherits(object, \"lm\"))",45],["geom_smooth(method = \"lm\") +",45],["#geom_smooth(method=lm)",48],["turkey <- HSD.test(lm, c(\"Genotype\")) #Tukey",93],["anova(lm)",97],["geom_smooth(method=lm)",171],["geom_smooth(method=\"lm\") + geom_point() +",268]],"useCount":5320},{"word":"load","context":[["# load packages",150],["## bac load in forest",204],["## accum load in forest",112],["# ---- load-data ---------------------------------------------------------------",121],["load(file)",232],["# ---- load-sources ------------------------------------------------------------",130],["# ---- load-packages -----------------------------------------------------------",130],["if(file_test(\"-f\", sys_data_file)) load(sys_data_file, code_env)",137],["## bac load on pasture",188],["# load data",197]],"useCount":8259},{"word":"loc","context":[["function(package, dir, lib.loc = NULL)",419],[".load_package_quietly(package, lib.loc)",434],["dir <- find.package(package, lib.loc)",623],["lib.loc <- .libPaths()",173],["if(is.null(lib.loc))",143],["function(package, lib.loc = NULL)",128],["Rd_db(package, lib.loc = dirname(dir))",127],["c(lib.loc, .libPaths()),",72],["db <- Rd_db(package, lib.loc = dirname(dir))",68],["db <- tryCatch(Rd_db(basename(outDir), lib.loc = dirname(outDir)),",62]],"useCount":8064},{"word":"local","context":[["source(paste0(sShinySourcePath,\"/server_pre_marxan.R\"),  local = TRUE)",45],["source(paste0(sAppDir,\"/render_ui.R\"),  local = TRUE)",44],["zz <- textConnection(\"out\", \"w\", local = TRUE)",44],["source(config_file_path, local = TRUE)",36],["# Requiere un servidor local, en la terminal de Mac usar: python -m SimpleHTTPServer 8888",37],["#' # Try to connect to a local H2O instance that is already running.",37],["## Data Source: local file",43],["local({",852],["msg <- gettext(\"replacing local value with import %s when loading %s\")",50],["source(file.path(shiny_root, \"server-base.R\"), local = T)",55]],"useCount":4143},{"word":"location","context":[["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112],["chk.pop[chk.pop$location == \"stream\", \"pop\"]) /",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["chk.bac[chk.bac$location == \"stream\", \"accum.bac\"] = NA",142],["# Make each plot, in the correct location",211],["## the location of the CSV files",280],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"]) /",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112]],"useCount":7920},{"word":"log","context":[["log.alpha <- Mo1[[\"LP\"]] - Mo0[[\"LP\"]]",87],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["if(log.u < log.alpha) {",118],["if(log.u < log.alpha) {",118],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["if(log == FALSE) dens <- exp(dens)",133],["log.u <- log(runif(1))",133],["log.u <- log(runif(1))",133],["file='log.txt',",138]],"useCount":12452},{"word":"logical","context":[["valGood <- as.logical(NA)",45],["ind <- as.logical(sapply(exprs,",166],["if (!is.logical(grep))",100],["ind <- as.logical(sapply(db_usages,",98],["if (logical.return)",65],["cpu_thread_number <- detectCores(logical=TRUE) - 1",57],["if(is.logical(x) && all(is.na(x)))",53],["if (!is.logical(check.attributes))",50],["expected <- eval(parse(text=\"logical(0)\"));",50],["#' @param log, log.p logical; if TRUE, probabilities p are given as log(p).",44]],"useCount":6929},{"word":"loop","context":[["cb$putlabel(loop.label)",45],["kk <- 1 ## loop counter",139],["cb$putcode(GOTO.OP, loop.label)",45],["lcntxt <- make.loopContext(cntxt, loop.label, end.label)",45],["# To run a for loop for all the samples",45],["loop.label <- cb$makelabel()",45],["} # end of for 'i' loop.",39],["# To run a while loop to generate different plots",108],["# To add 10 to a while loop",108],["ii <- 1 # loop counter",139]],"useCount":2277},{"word":"lower","context":[["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["gp <- gp + geom_pointrange(aes(ymin = lower, ymax = upper))",61],["## lo   lower pointwise envelope of K(r) from simulations",78],["PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)",75],["lower.tail=FALSE)",38],["R[lower.tri(R)] <- 0",38],["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["dev[nas] <- safe_pchisq(dev[nas], aod$Df[nas], lower.tail=FALSE)",46],["correl[!lower.tri(correl)] <- \"\"",58],["lower.tail = FALSE)",59]],"useCount":4516},{"word":"ls","context":[["rm(list=ls());",134],["h2o.rm(localH2O, grep(pattern = \"Last.value\", x = h2o.ls(localH2O)$Key, value = TRUE))",89],["# ls()",93],["rm(list = ls(all = TRUE))",99],["rm(list=ls(all=TRUE))  #Clear the variables from previous runs.",120],["ls()",307],["rm(list=ls(all=TRUE))",377],["rm(list = ls())",1170],["rm(list=ls())",2467],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348]],"useCount":9319},{"word":"lty","context":[["input$quick_ewsRadioButtons), lty=c(1, 1, 1),",428],["lty=1, lcol=\"black\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["input$ewsRadioButtons), lty=c(1, 1, 1),",405],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["lty=1,",91],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["##      lty col  key      label",80],["#geom_hline(yintercept=-0.01, lty=1, col=\"white\", size=0.6) +",84],["lty = 1,",88]],"useCount":8097},{"word":"lumi","context":[["mDat = exprs(oExp.lumi)",24],["library(lumi)",22],["ivDetection = detectionCall(oExp.lumi)",20],["dfSamples = pData(oExp.lumi)",17],["suppressMessages(library(lumi))",16],["k.arrays.lumi = as.integer((dim(as.matrix(data.gene.lumi))[2])/10)",16],["plot(data.gene.lumi, what = 'sampleRelation', method = \"mds\")",16],["plotHousekeepingGene(data.control.lumi[, k.lumi:(k.lumi + 9)])",16],["plotCDF(data.gene.lumi[, j.lumi:(j.lumi + 9)], reverse = TRUE)",16],["plotCDF(data.gene.lumi[, j.lumi:(j.lumi + 9)], reverse = TRUE)",16]],"useCount":4140},{"word":"lwd","context":[["lwd = 2)",77],["box(lwd=2)",155],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["box(lwd = 2)",118],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["lwd = 2,",110],["US(add=TRUE, lwd=1.5)",96],["map(\"world\", \"Canada\", add=TRUE, lwd=1.5)",95],["length=0.05, lwd = 2)",88],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84]],"useCount":7432},{"word":"m","context":[[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["mf <- eval(m, parent.frame())",204],["m$data <- as.data.frame(data)",227],["m <- match.call(expand.dots = FALSE)",343],["return(m)",375],["m",744],["print(m)",181],["if(is.matrix(eval(m$data, parent.frame())))",163],["m$... <- NULL",155],["m[[1L]] <- quote(stats::model.frame)",150]],"useCount":26352},{"word":"m1","context":[["summary(m1)",101],["m1[m1 < -3] = -3",43],["m1[m1 > 3] = 3",43],["m1[m1 > 3] = 3",43],["m1[m1 < -3] = -3",43],["f.combo <- m1+m2+m3+m4+m5+m6+m7+m8+m9+m10+m11+m12+m13+m14",43],["aheatmap(m1, color=c('blue', 'black', 'red'), breaks=0, scale='none', Rowv = TRUE,",43],["m1 <- feval(y=e.ret,X=dy,P=P)$forecast[,method]*w",43],["m1",82],["colnames(m1) = fGroups",53]],"useCount":2226},{"word":"main","context":[["main = main,",66],["if (is.null(main))",66],["main=main,",130],["main=main,",130],["main=title,",107],["main = \"\",",105],["if(is.null(main))",98],["main()",93],["main=NULL,",78],["main = main,",66]],"useCount":9385},{"word":"major","context":[["panel.grid.major.x = element_blank(),",70],["panel.grid.major = element_blank(),",410],["R.version[[\"major\"]], \".\",  R.version[[\"minor\"]],",183],["panel.grid.major=element_blank(),",126],["theme(panel.grid.major = element_blank(),",72],["theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(), panel.background = element_blank(),",66],["panel.grid.major = element_line(colour = \"gray\"),",62],["panel.grid.major.y = element_line(colour='grey40', size=0.2),",47],["theme(panel.background = element_rect(fill='grey99'), panel.grid.major.x = element_blank(),",46],["panel.grid.major = ggplot2::element_blank(),",36]],"useCount":2112},{"word":"make","context":[["if(anyDuplicated(cols)) names(y) <- make.unique(cols)",44],["ncntxt <- make.nonTailCallContext(cntxt)",183],["ncntxt <- make.argContext(cntxt)",138],["### Check the network and arguments to make sure they are appropriate.",95],["make.table(nr, nc)",90],["stats <- make.link(linktemp)",89],["kronecker(fred, bill, make=TRUE)",76],["stats <- make.link(link)",71],["shQuote(file.path(R.home(\"share\"), \"make\",",56],["lcntxt <- make.loopContext(cntxt, loop.label, end.label)",45]],"useCount":5444},{"word":"manual","context":[["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"accum.bac\"],",96],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112],["\"in the 'Writing R Extensions' manual.\\n\")",329],["manual.calc.pop.total = sum(chk.pop$pop),",142],["manual.calc.bac.total = sum(chk.bac$total.bac),",142],["manual.calc.pop.total = chk.pop[chk.pop$location == \"stream\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"stream\", \"total.bac\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"total.bac\"],",96]],"useCount":5353},{"word":"map","context":[["mapping <- .type.map[paramDef$type,]",39],["patient.number <- as.integer(id.map[patient.id])",260],["map(\"world\", \"Canada\", add=TRUE, lwd=1.5)",95],["map",84],["# Set up plot layout, map will go on top and histogram on bottom",50],["output$map <- renderLeaflet({",48],["map.types = map.types,",47],["map.types = map.types,",47],["map = NULL,",42],["conditionalPanel(condition = \"input.displaywhat == 'map'\",",42]],"useCount":3389},{"word":"mar","context":[["par(mar = c(0.5, 0, 0, margins[2]))",64],["par(mar=c(0,5,1,1))",63],["par(mar=c(0,0,0,0))",300],["par(mar=c(1,1,1,1)+0.1)",166],["par(mfrow=c(numRows,numCols), mar=c(3,4,3,1), oma=c(3,3,5,3))",143],["par(mar=c(5,5,1,1))",100],["par(mar=c(4,4,1,1))",83],["par(mar=c(1,1,1,1))",80],["par(mar=mar)",70],["par(mar=mar)",70]],"useCount":4051},{"word":"mat","context":[["return(cv.mat)",56],["filename <- tempfile(fileext = \".mat\")",145],["mat <- mat[keep, , drop = FALSE]",40],["mat <- mat[keep, , drop = FALSE]",40],["cv.mat[fd.ix!=j,j] = \"train\"",56],["cv.mat = matrix(\"NULL\",nrow=length(obs),ncol=k)",56],["rownames(cv.mat) = obs",56],["cv.mat[fd.ix==j,j] = \"validation\"",56],["mat",161],["return(mat)",143]],"useCount":2852},{"word":"match","context":[["return(match.call())",114],["mf <- match.call(expand.dots = FALSE)",123],["alternative <- match.arg(alternative)",129],["test <- match.arg(test)",138],["FUN <- match.fun(FUN)",175],["cl <- match.call()",230],["call <- match.call()",240],["m <- match.call(expand.dots = FALSE)",343],["method <- match.arg(method)",401],["type <- match.arg(type)",739]],"useCount":22004},{"word":"matrix","context":[["if(is.matrix(eval(m$data, parent.frame())))",163],["# Get the i,j matrix positions of the regions that contain this subplot",197],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["x <- matrix(ncol = 4, nrow = prod(length(tr2), length(ref2)))",139],["A = as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",113],["if (is.matrix(x)) {",148],["x <- as.matrix(x)",696],["y <- as.matrix(y)",168]],"useCount":31558},{"word":"max","context":[["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112],["maxx <- max(x, na.rm = TRUE)",84],["max = 100,",80],["ux[which.max(tabulate(match(x, ux)))]",76],["max.dist = 3 * knots.h,",114],["if(cores==\"max\"){cores=detectCores()-1}",73],["top <- max(c(xhist$counts, yhist$counts))",69],["print(max(ph[,1]))",70],["alpha.min = 0.1, alpha.max = 0.9,",138]],"useCount":14916},{"word":"mean","context":[["signif(mean(y),digits=4),",75],["signif(mean(x),digits=4),",75],["## mean; either \"sulfate\" or \"nitrate\".",85],["## Return the mean of the pollutant across all monitors list",85],["mean(x)",104],["meantablerf <- rbind(meantablerf,mean(min[,2])) #zmean RF closest trees between pruned and deleted sets",137],["meantablepd <- rbind(meantablepd,mean(min[,3])) #zmean PD closest trees between pruned and deleted sets",137],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176]],"useCount":11089},{"word":"merge","context":[["chk.RAOCUT.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",114],["merge(",88],["results <- merge(results,",49],["dnds.dat = merge(cgm, dnds.dat, by = 'EST')",48],["chk.forest.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.months.season <- merge(chk.months.season, chk.months)",46],["## merge",48],["chk.pasture.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["chk.RAOCUT.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46]],"useCount":3463},{"word":"message","context":[["warning( \"Error message is: \", geterrmessage() );",263],["res[[1]]$message)) > 0)",321],["stop(message)",120],["message(\"Grade submission succeeded!\")",129],["message(\"Grade submission failed.\")",129],["message(\"want to try to submit your grade at a later time.\")",129],["message(\"Press ESC if you want to exit this lesson and you\")",129],["\"  -h, --help\t\tprint short help message and exit\",",133],["checkEquals(obs, exp, msg = message)",204],["message(\"\")",248]],"useCount":13218},{"word":"meta","context":[["results[[\".meta\"]] <- meta",67],["v_m <- package_version(meta[\"Version\"])",63],["package <- meta[\"Package\"]",146],["results[[\".meta\"]] <- meta",67],["meta <- list()",69],["meta <- .read_description(dfile)",71],["meta <- tools:::.get_package_metadata(dir, installed = FALSE)",102],["if(is.na(encoding <- meta[\"Encoding\"]))",103],["meta <- if(file_test(\"-f\", dfile))",286],[".source_assignments_in_code_dir(code_dir, code_env, meta)",261]],"useCount":4531},{"word":"method","context":[["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["random = ~1|device_info_serial, method = \"ML\")",127],["method <- match.arg(method)",401],["method <- match.arg(method)",401],["geom_smooth(method=\"lm\") + geom_point() +",268],["geom_smooth(method=lm)",171],["switch(method,",151],["method = method)",147],["method = method)",147],["method",138]],"useCount":24661},{"word":"methods","context":[["#' @docType methods",1252],["##' @docType methods",105],["NaviCell$methods(",375],["methods = list(",654],["#' @import methods",207],["require(methods)",195],["library(methods)",182],["## Determine names of declared S3 methods and associated S3",136],["#' @param ... Further arguments passed to or from other methods.",114],["#' @rdname string-methods",106]],"useCount":23158},{"word":"metrics","context":[["expect_equal(a@metrics$logloss, b@metrics$logloss)",39],["expect_equal(a@metrics$r2, b@metrics$r2)",44],["mean_deviance = hh@model$training_metrics@metrics$mean_residual_deviance",78],["expect_equal(a@metrics$model_category, b@metrics$model_category)",51],["expect_equal(a@metrics$r2, b@metrics$r2)",44],["expect_equal(a@metrics$model_category, b@metrics$model_category)",51],["expect_equal(a@metrics$MSE, b@metrics$MSE)",50],["expect_equal(a@metrics$MSE, b@metrics$MSE)",50],["if( !is.null(object@metrics) ) {",45],["expect_equal(a@metrics$logloss, b@metrics$logloss)",39]],"useCount":3930},{"word":"mf","context":[["response <- attr(attr(mf, \"terms\"), \"response\")",126],["mf <- eval(mf, parent.frame())",81],["mf <- eval(mf, parent.frame())",81],["names(mf) <- NULL",93],["mf$drop.unused.levels <- TRUE",77],["mt <- attr(mf, \"terms\")",75],["DNAME <- paste(names(mf), collapse = \" by \")",73],["mf <- eval.parent(mf)",70],["mf <- eval(m, parent.frame())",204],["mf <- match.call(expand.dots = FALSE)",123]],"useCount":4500},{"word":"mfrow","context":[["par(mfrow=c(1,3))",183],["par(mfrow = c(1, 1))",239],["par(mfrow=c(3,1))",170],["par(mfrow = c(2, 2))",171],["par(mfrow = c(1,1))",176],["par(mfrow=c(2,1))",456],["par(mfrow=c(1,2))",779],["par(mfrow=c(2,2))",802],["par(mfrow=c(1,1))",1117],["par(mfrow=c(1,1))}",181]],"useCount":7638},{"word":"might","context":[["## returned in the codoc object but not shown.  Eventually, we might",33],["## NB, link might be empty, and was in mvbutils",33],["## now configure might generate files in this directory",33],["## There are situations where S3 methods might be documented as",33],["## (which might get un-archived eventually).",33],["env <- new.env(hash = TRUE) # might be many",33],["## no \\usage entry are not necessarily a problem---they might be",34],["## symbols via ':::' and hence package developers might want to",34],["## Spaces in paths might still cause trouble.",38],["\"might terminate R nor write to stdout/stderr instead\",",64]],"useCount":2612},{"word":"min","context":[["min = 0,",271],["min = 1,",204],["alpha.min = 0.1, alpha.max = 0.9,",138],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["rm(min)",137],["meantablerf <- rbind(meantablerf,mean(min[,2])) #zmean RF closest trees between pruned and deleted sets",137],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165]],"useCount":9705},{"word":"minor","context":[["panel.grid.minor.y = element_blank(),",44],["panel.grid.minor.x = element_blank(),",45],["panel.grid.minor = element_line(colour='grey40', size=0.1)) +",47],["panel.grid.minor = element_line(colour = \"gray\",linetype=\"dashed\"),",49],["theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(), panel.background = element_blank(),",66],["panel.grid.minor=element_blank(),",161],["panel.grid.minor = element_blank()",41],["R.version[[\"major\"]], \".\",  R.version[[\"minor\"]],",183],["### mode: outline-minor ***",198],["panel.grid.minor = element_blank(),",524]],"useCount":2135},{"word":"missing","context":[["if (missing(file)) {",100],["if(missing(where)) {",91],["if (!missing(person_id)) {",96],["if(missing(Specs) | is.null(Specs))",97],["stop(\"'formula' missing or incorrect\")",140],["else if(!missing(dir)) {",141],["db <- if(!missing(package))",148],["if(!missing(package)) {",748],["if(missing(dir))",397],["if(missing(where))",209]],"useCount":24633},{"word":"mlist","context":[["if(length(mlist)) {",33],["sigs <- .make_siglist(mlist[ind])",33],["mlist@methods <- methods",46],["methods <- mlist@methods",60],["mlist <- mlist[!ind]",33],["sigs <- .make_siglist(mlist)",33],["exprs <- c(exprs, lapply(mlist, body))",66],["return(mlist)",99],["mlist",121],["mlist <- .get_S4_methods_list(f, code_env)",132]],"useCount":2862},{"word":"mod","context":[["names(dfMod[[cv]])[mod.ind[cv]] <- names1[1]",30],["summary(mod)",145],["return(mod)",81],["print(mod.aicctab, digits=2, LL=TRUE)",40],["mod",36],["tmp.mod <- eval(parse(text = paste0(\"df.output$\", chr.col)))",32],["Model = tmp.mod,",32],["mod.ind[cv] <- mod.ind[cv] +1 # update mod.ind indicator variable",30],["mod.ind[cv] <- mod.ind[cv] +1 # update mod.ind indicator variable",30],["mod.ind[cv] <- mod.ind[cv] +1 # update mod.ind indicator variable",30]],"useCount":2204},{"word":"mode","context":[["mode=\"lin\")",50],["mode(myRowNames2)",57],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["storage.mode(y) <- \"double\"",85],["expect_equal(mode(tmp),\"numeric\")",87],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["MP.group_by.mode    <- c(\"DontGroup\")",126],["storage.mode(x) <- \"double\"",156],["### mode: outline-minor ***",198]],"useCount":7519},{"word":"model","context":[["return(model)",609],["\"model.bac.total\")",368],["model.parts <- .model.parts(object)",305],["model.parts <- .model.parts(object)",305],["model",267],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["# pharmacodynamic model building aid for NONMEM.",234],["\"model.pop.total\")",230],["model {",186]],"useCount":34855},{"word":"models","context":[["## calculate the number of models",67],["model_names <- names(models)",74],["model     <- names(models)[i]",85],["for (i in 1:length(names(models))) {",64],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["# Get models",111],["# Check expected number of models",109],["#' @keywords ts multivariate distribution models",101],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["models <- #PIRANA_IN",133]],"useCount":4230},{"word":"month","context":[["## total by month",92],["chk.forest.bac.by.month <-",92],["## population in/around stream by month",92],["chk.pasture.bac.by.month <-",92],["## accum load on forest by month",92],["chk.total.pop.by.month <-",92],["chk.forest.pop.by.month <-",92],["chk.forest.accum.by.month <-",92],["by.x = \"month.chr\", by.y = \"Month\")",598],["chk.RAOCUT.bac.by.month <-",92]],"useCount":12638},{"word":"more","context":[["## more (as one can refer to the generic or the methods in the",34],["stop(\"ERROR: there is more than one coefficient value per month and latband\")",46],["\"~~ If necessary, more details than the description above ~~\")",33],["no_observations <- length(grep(\"One or more variables in the data set have no non-missing values\", mplus_output))",35],["# Find out more about building applications with Shiny here:",48],["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["# You can find out more about building applications with Shiny here:",223],["stop(\"cannot handle more than one 'x' coordinate\")",35],["variance_zero <- length(grep(\"One or more variables have a variance of zero\", mplus_output))",35],["##   one or more \\describe sections inside.",34]],"useCount":5262},{"word":"msg","context":[["stop(msg)",580],["wrapLog(msg)",176],[".pretty_format(sort(xx)), msg)",160],["sQuote(xx)), msg)",160],["stop(msg, call.=FALSE)",157],["return(msg)",148],["msg <- ngettext(nb,",181],["checkEquals(obs, exp, msg = message)",204],["msg <-",318],["stop(msg, call. = FALSE)",398]],"useCount":13887},{"word":"mtext","context":[["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["mtext(\"Community Similarity\", side = 2, line = 3, cex = 1.2)",34],["mtext(text = xlab, side = 1, cex=1.5, line = 2.9)",36],["mtext(text = \"Density\", side = 2, las=0, cex = cexYlab, line= 3.25)",36],["mtext(side = 1, \"Row Z-Score\", line = 2)",32],["mtext(ylab, side = 4, line = margins[2] - 1.25)",39],["mtext(xlab, side = 1, line = margins[1] - 1.25)",39],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438]],"useCount":3567},{"word":"mtx","context":[["X = as.matrix(readMM(paste(args[1], \"X.mtx\", sep=\"\")))",63],["V1 <- readMM(paste(args[1], \"V.mtx\", sep=\"\"))",42],["W = as.matrix(readMM(paste(args[1], \"W.mtx\", sep=\"\")))",50],["A1 <- readMM(paste(args[1], \"A.mtx\", sep=\"\"))",54],["U = as.matrix(readMM(paste(args[1], \"U.mtx\", sep=\"\")))",76],["V = as.matrix(readMM(paste(args[1], \"V.mtx\", sep=\"\")))",85],["B1 <- readMM(paste(args[1], \"B.mtx\", sep=\"\"))",39],["B <- as.matrix(readMM(paste(args[1], \"B.mtx\", sep=\"\")))",94],["A = as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",113],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197]],"useCount":2145},{"word":"mu","context":[["validmu <- function(mu) all(mu>0)",54],["if (!missing(mu)) {",56],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["dev <- sum(dev.resids(y, mu, weights))",60],["dev.resids <- function(y, mu, wt)",84],["mu.eta = stats$mu.eta,",90],["mu.eta = stats$mu.eta,",90],["validmu <- function(mu) all(mu>0)",54],["mu = mu,",112],["mu = mu,",112]],"useCount":6264},{"word":"multiple","context":[["## FIXME: should we do this for multiple sub-archs?",32],["# Initialize the multiple-QTL-model with the results from single QTL analysis",35],["## see if there are multiple installed architectures, and if they work",32],["multiple = TRUE,",95],["obj <- xpose.multiple.plot(plotList,plotTitle,...)",35],["# Estimate QTL using multiple mapping with R/qtl package",36],["plotTitle <- xpose.multiple.plot.title(object=object,",40],["source(\"./scripts/common-functions.R\") # used in multiple reports",55],["multiple = FALSE,",60],["#multiple correction",115]],"useCount":2479},{"word":"must","context":[["stop(\"argument 'package' must be of length 1\")",667],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["stop(\"you must specify 'package' or 'dir'\")",364],["#           java must be at least 1.6.",120],["#           curl, javac, java must be installed.",120],["stop(\"'x' must be numeric\")",92],["stop(\"'file' must be a character string or connection\")",90],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["stop(\"'x' and 'y' must be units\")",85],["stop(\"'conf.level' must be a single number between 0 and 1\")",84]],"useCount":15098},{"word":"my","context":[["my.range <- env$my.range",51],["list(MYOTHERVALUE = format(my.p, digits = 2)))[2]",78],["my.end <- 6",65],["my.range <- env$my.range",51],["assign(state[d],X.t0[my.range[t],d])",45],["return(my.plot)",45],["if(my.p < 0.001) my.p <- \"< 0.001\"",40],["if(my.p < 0.001) my.p <- \"< 0.001\"",40],["step.my  = step)",37],["my.st <- 6",35]],"useCount":2563},{"word":"myFirstLine","context":[["F4_EED_P5_sort      <-  \trbind( myFirstLine ,    C4_Average_EED_P5[index1,    ]    )",19],["names(myFirstLine)",57],["myFirstLine <- A1_H2BGFP_H3_Rep1[1, c(5:504)]",30],["G1_H2BGFP_week0_EEDko_Rep1   <- rbind( myFirstLine ,    B1_H2BGFP_week0_EEDko_Rep1[index1, ]    )",19],["G4_EED_P5_Rep2    <- rbind( myFirstLine ,    B4_EED_P5_Rep2[index1, ]    )",19],["G6_H3K27ac_EEDko_rep1 <- rbind( myFirstLine ,    B6_H3K27ac_EEDko_rep1[index1, ]    )",19],["G1_H2BGFP_week1_Rep1 <- rbind( myFirstLine ,    B1_H2BGFP_week1_Rep1[index1, ]    )",19],["F4_EED_Adult_sort   <-  \trbind( myFirstLine ,    C4_Average_EED_Adult[index1,  ]    )",19],["E5_HomoHDAC1_sort   <-  \trbind( myFirstLine ,    D5_Average_HomoHDAC1[index1,  ]    )",19],["F1_H2BGFP_WT_week4_sort  <-  \trbind( myFirstLine ,    C1_Average_week4[index1, ]    )",19]],"useCount":2579},{"word":"n","context":[["for (i in 1:n) {",620],["sep = \"\\n\")",542],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["for(i in 1:n){",522],["cat(\"\\n\")",4572],["n <- length(x)",1017],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["\"\\n\",",809],["Rcmd <- paste(\"options(warn=1)\\n\",",750]],"useCount":118611},{"word":"na","context":[["na.rm = TRUE)",197],["if(is.na(i))",105],["if(is.na(idx))",109],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112],["na.rm=TRUE))",113],["TotalData[is.na(TotalData)]=0",135],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["x <- x[!is.na(x)]",209],["if(!is.na(enc) &&",158]],"useCount":42212},{"word":"name","context":[["n = V(ig)$name",131],["name=NULL, gp=gpar(), vp=NULL) {",183],["#' @param repo the name of the repo",187],["name",198],["Name=name,",274],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["name <- vigns$names[i]",127],["name,",125],["#' @param repo the repo name",120]],"useCount":46129},{"word":"named","context":[["stop('No column named ', by, ' in ', substitute(data), '.')",36],["#' @param i18n Either a character string or a named list with the optional elements \\code{context}",37],["# all of which must be named args)",40],["message(gettextf(\"Created file named %s.\", sQuote(filename)),",43],["warning(\"named arguments are discouraged\")",45],["# Process the function. Decide if it's an anonymous fcn, or a named one.",48],["if (getIgraphOpt(\"add.vertex.names\") && is.named(graph)) {",48],["# Append named formals with default values which are not included",51],["## the first argument could be named, or could be a variable name.",66],["# Swirl's state, named e, is stored in the environment of the callback.",138]],"useCount":2734},{"word":"names","context":[["row.names=FALSE,",211],["row.names = FALSE)",185],["full.names = TRUE, recursive = TRUE)",238],["as.character(unlist(lapply(names(x), .fmt)))",193],["use.names = FALSE)",146],["names(v) <- v_names",259],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["row.names=FALSE)",515],["checkEquals(names(x[[1]]), c(\"PatientID\", \"PtNum\", \"study\", \"Name\", \"Fields\"))",155],["objects_in_code <- sort(names(code_env))",147]],"useCount":76373},{"word":"namespace","context":[["modelname, namespace)",37],["## namespace.",38],["function(.Object, flatModel, namespace, labelsData) {",52],["function(.Object, modelname, namespace) {",89],["## Not clear whether we want to require *all* namespace package",34],["## but 'missing from the code'.  If a package has a namespace, we",34],["## If an installed package has a namespace, we need to record the S3",34],["## S3 replacement methods from namespace registration?",34],["## Does the package have a namespace?",102],["## (experimental) alternative way of specifying the namespace.",104]],"useCount":4526},{"word":"nc","context":[["nc <- ncol(x)",121],["make.table(nr, nc)",90],["if (nc != length(colInd))",80],["nc <- 1",49],["nc <- length(x)",103],["y[which] <- if(nc==0) 0 else if(nc==1) coeff[1, 1]",48],["y[which] <- if(nc==0) 0 else if(nc==1) coeff[1, 1]",48],["if (nr <= 1 || nc <= 1)",44],["if (nr != nc)",44],["nc <- di[2]",46]],"useCount":4217},{"word":"nchar","context":[["substr(x, nchar(x)-n+1, nchar(x))",41],["if(any(ind <- is.na(nchar(lines, allowNA = TRUE))))",52],["if(nchar(key) > 0 && regexpr(\"^[a-zA-Z_][a-zA-Z0-9_.]*$\", key)[1] == -1)",47],["for (i in 1:nchar(q2)) { # faco um for de 1 ate o numero de caracteres do meu vetor em conjunto",45],["newy <- substring(newy, nchar(newy)-4, nchar(newy))",42],["newy <- substring(newy, nchar(newy)-4, nchar(newy))",42],["if(nchar(value)>=2 & length(value)>0) # colum sign",41],["substr(x, nchar(x)-n+1, nchar(x))",41],["nchar(name, type=\"c\")) == name]",38],["for (i in 1:nchar(q22)) { # faco um for de 1 ate o numero de caracteres do meu vetor em conjunto",39]],"useCount":4107},{"word":"ncol","context":[["ncol = cols, nrow = ceiling(numPlots/cols))",199],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["# ncol: Number of columns of plots",192],["ncol=2,",132],["p <- ncol(x)",185],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["x <- matrix(ncol = 4, nrow = prod(length(tr2), length(ref2)))",139],["nc <- ncol(x)",121],["p <- ncol(X)",90],["ncol=1,",177]],"useCount":13944},{"word":"need","context":[["chk.dil <- 1E+06 # need to explain this",190],["## FIXME: this does not need to be run in another process",128],["## need stats:: for non-standard evaluation",115],["# Just need to test that output is the same as if the GTuples were GRanges",67],["## We need to rempve '...': OTOH the argument could be NULL",66],["## Because we really only need this for calling from R CMD check, we",66],["## We definitely need a valid DESCRIPTION file.",49],["## need to drop \"units\" attribute here",51],["#We need MASS to dump the matrix to a file.",51],["validate(       need(!is.null(df), \"Please select a data set\"))",52]],"useCount":6700},{"word":"needed","context":[["# nrow: Number of rows needed, calculated from # of cols",192],["## calculate test statistic if needed",47],["swirl_out(\"I've executed the correct expression in case the result is needed in an upcoming question.\")",54],["## (asserted not to be needed if the subclass slot is complete)",54],["## do initialization if needed",50],["if(!(isSTDOUT <- file == \"\")) ## stdout() -- no sink() needed",42],["## a current version of methods() [2003-07-07].  (Care is needed",34],["## needed for internal generics and group generics.)",34],["## FIXME: is this still needed now we do dependency analysis?",33],["## Check Authors@R and expansion if needed.",33]],"useCount":2907},{"word":"new","context":[["dev.new()",452],["plot.new()",1229],["par(new=T)",722],["par(new=TRUE)",417],["new.event <- list(PatientID=patient.id,",314],["result[[good.records.found]] <- new.event",376],["result[range] <- new.list",187],["count <- count + length(new.list)",187],["code_env <- new.env(hash = TRUE)",261],["range <- count:(count+length(new.list)-1)",187]],"useCount":23572},{"word":"newdata","context":[["if(missing(newdata)) {",44],["rf_predicted<-predict(rf_model, newdata=td, type=\"prob\")",40],["m <- model.frame(Terms, newdata, na.action = na.action,",38],["function(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,",35],["stacking_test[,i] = predict(m, newdata = X_test)",35],["predict = function(newdata = list(), qr = FALSE)",34],["ph = as.data.frame(h2o.predict(hh,newdata = y))",32],["newdata",45],["if (missing(newdata)) {",48],["ph = as.data.frame(h2o.predict(hh,newdata = hdf))",48]],"useCount":2143},{"word":"newpage","context":[["grid::grid.newpage()",47],["grid.newpage(recording=FALSE)",37],["if (newpage)",30],["#grid.newpage()",29],["grid.newpage();",16],["if (newpage) {",19],["grid.newpage()",2580],["# grid.newpage()",13],["# Keep a list of all drawing operations (since last grid.newpage()) so",12],["for (fun in getHook(\"grid.newpage\"))  {",12]],"useCount":2853},{"word":"next","context":[["next",3643],["if(!is.data.frame(al)) next",34],["next                    # What the hell did we pick up?",34],["else next",46],["next;",310],["next()",145],["if(dep$op != '>=') next",88],["if(!length(exprs)) next",68],["if (!file.exists(f)) next",64],["if(!length(where)) next",33]],"useCount":7066},{"word":"ngettext","context":[["msg <- ngettext(sum(ind),",120],["msg <- ngettext(nr,",73],["msg <- ngettext(length(x),",62],["msg <- ngettext(length(xx),",62],["msg <- ngettext(length(x$bad_refs),",60],["msg <- ngettext(length(x$bad_S4methods),",60],["msg <- ngettext(nb,",181],["msg <- ngettext(length(x$bad_closures),",96],["stop(sprintf(ngettext(N,",144],["ngettext(n,",99]],"useCount":2858},{"word":"nm","context":[[".pretty_format(bad[[nm]]))",66],["nm),",399],[".fmt <- function(nm) {",193],["function(nm) {",113],["good <- thisfile[this] %in% nm",66],["docObj <- x[[nm]]",66],["nm <- names(x); if(is.null(nm)) nm <- character()",66],["names(nm) <- names(x) <- seq_along(x)",66],["nm <- names(x); if(is.null(nm)) nm <- character()",66],["nm <- names(x); if(is.null(nm)) nm <- character()",66]],"useCount":7055},{"word":"nms","context":[["nms",34],["if(is.na(match(\"...\", nms)) &&",63],["nms <- names(fcode[[2L]])",63],["strwrap(paste(nms, collapse = \" \"),",66],["out$bad_arg_names <- nms",63],["for (x in d$x$nms){",56],["names(y) <- nms",43],["nms <- names(x)",97],["for (s in d$s$nms){",38],["vffd <- ffd[nms]",33]],"useCount":3038},{"word":"no","context":[["##' @param alwaysRetry Whether to always retry even when no response is",498],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["def.par <- par(no.readonly = TRUE)",142],["quit(\"no\")",143],["q(\"no\")",160],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["op <- par(no.readonly = TRUE)",137],["quit(save=\"no\", status=1)",133]],"useCount":20123},{"word":"node","context":[["the.graph = load.graph.csv(edge.path, node.path);",108],["return(node)",90],["function(node, debug_level=0)",71],["#' @return An object of class \\code{XiMpLe.node}.",67],["node",47],["## node list generation",37],["if (inherits(node, \"ExternalReference\")) node = slot(node,\"ref\")",36],["if (inherits(node, \"ExternalReference\")) node = slot(node,\"ref\")",36],["if (inherits(node, \"ExternalReference\")) node = slot(node,\"ref\")",36],["the.true.cluster = load.true.cluster(file.path=node.path);",112]],"useCount":3114},{"word":"non","context":[["stop(\"'file' must be a non-empty character string\")",38],["\"non-arguments found in the signature: %s\"),",38],["stop(\"`path` must be a non-empty character string\")",39],["\"non-argument found in the signature: %s\",",38],["while (flag !=1) {   # find out where non-zero elements start",48],["## set to empty of something non-existent.",50],["\"Found the following file with a non-portable file name:\\n\",",60],["\"Found the following files with non-portable file names:\\n\",",60],["\"resulted in non-finite value(s).\\n\",",114],["## need stats:: for non-standard evaluation",115]],"useCount":7095},{"word":"none","context":[["legend.position=\"none\",",108],["legend.position = \"none\",",94],["legend.position=\"none\")",85],["#' @return none",77],["theme(legend.position=\"none\",",72],["problems <- with(rdas, (ASCII | compress == \"none\") & (size > 1e5))",66],["theme(legend.position = \"none\")",119],["theme(legend.position = \"none\") +",125],["theme(legend.position=\"none\")",130],["theme(legend.position=\"none\") +",170]],"useCount":4750},{"word":"normalizePath","context":[["dir <- normalizePath(dir)",60],["normalizePath(file.path(lib, name), \"/\", TRUE))",25],["normalizePath(epath, \"/\", TRUE)",26],["sQuote(normalizePath(tmpd, mustWork = FALSE))),",30],["if (self) flink(normalizePath(pkgdir), tmplib)",32],["movieDir=normalizePath(argv[1])",37],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["#outputdir =  normalizePath(bccvl.env$outputdir)",39],["#scriptdir = normalizePath(bccvl.env$scriptdir)",39],["#inputdir =  normalizePath(bccvl.env$inputdir)",39]],"useCount":4674},{"word":"not","context":[["# To compare if the arrays are the last 10 arrays or not",108],["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["## FIXME: this does not need to be run in another process",128],["# So swirl does not repeat execution of plot commands",135],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["stop(\"The Specs argument is not a list.\", file=LogFile,",171],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["# along with this program; if not, a copy is available at",314],["stop(gettextf(\"directory '%s' does not contain R code\",",357]],"useCount":37181},{"word":"now","context":[["c(\"Former standard packages required but now defunct:\",",33],["## And now strip enclosing '\\code{...}:'",34],["## (in case 'verbose' was true).  We now add this as an attribute to",34],["## Allow anything containing ... (for now); otherwise, insist on",63],["## Start warning eventually ... maybe use message() for now?",57],["# **** this is now handled differently; see \"Improved subset ...\"",44],["## Need some heuristics now.  When does an Rd object document a",34],["## now look for possible copy as a registered S3 method",34],["## Need some heuristics now.  When does an Rd object document just",34],["## With \\method{GENERIC}{CLASS} now being transformed to show",34]],"useCount":4318},{"word":"npc","context":[["width=unit(1, \"npc\"), height=unit(1, \"npc\"),",32],["width=unit(1, \"npc\"), height=unit(1, \"npc\"),",32],["y=unit(c(0, 1), \"npc\"),",30],["unit(0.5, \"npc\")",262],["default.units=\"npc\",",287],["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["xxt <- grconvertX(0.28, \"npc\", \"user\")",28],["xx <- grconvertX(0.1, \"npc\", \"user\")",28],["yy <- grconvertY(0.5, \"npc\", \"user\")",28],["default.units = \"npc\",",27]],"useCount":2581},{"word":"nr","context":[["iy <- nr:1",64],["msg <- ngettext(nr,",73],["if (nr != length(rowInd))",80],["make.table(nr, nc)",90],["nr <- di[1]",47],["nr <- .row_names_info(e1, 2L)",44],["if (nr != nc)",44],["if (nr <= 1 || nc <= 1)",44],["else iy <- 1:nr",43],["nr <- nrow(x)",61]],"useCount":2883},{"word":"nrow","context":[["ncol = cols, nrow = ceiling(numPlots/cols))",199],["n <- nrow(x)",355],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["# nrow: Number of rows needed, calculated from # of cols",192],["nrow=1,",166],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["x <- matrix(ncol = 4, nrow = prod(length(tr2), length(ref2)))",139],["n <- nrow(X)",118],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),",109]],"useCount":20649},{"word":"ns","context":[["ns <- asNamespace(ns, base.OK = FALSE)",156],["nsname <- getNamespaceName(ns)",77],["environmentIsLocked(ns)",78],["namespaceIsSealed <- function(ns)",78],["ns <- length(scope)",79],["ntrain <- floor(0.75 * ns)",72],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["ns <- asNamespace(ns)",157],["ns <- asNamespace(ns)",157],["ns <- asNamespace(ns, base.OK = FALSE)",156]],"useCount":8682},{"word":"null","context":[["if (is.null(bounds))",520],["if(!is.null(input$quick_breakpointsCheckbox)",463],["if(!is.null(input$breakpointsCheckbox)",441],["if(is.null(fdef))",253],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if(is.null(Data))",240],["if (!is.null(seed)) {",213],["if (is.null(layout)) {",209],["deleters <- which(unlist(lapply(result, is.null)))",187]],"useCount":54470},{"word":"num","context":[["rankall <- function(outcome, num = \"best\") {",82],["num.tests=num.tests+1",90],["num.tests=num.tests+1",90],["cat(\"num. phenotype samples =\",sum(!is.na(r)),\"\\n\")",93],["num.passed.tests=num.passed.tests+1",135],["num.passed.tests=num.passed.tests+1",135],["rankhospital <- function(state, outcome, num = \"best\") {",80],["num.tests=num.tests + 1",55],["num.tests=num.tests + 1",55],["sample_pos = sample(pos_obs,size=sample.num,replace=T)",53]],"useCount":6296},{"word":"number","context":[["## number of complete cases",90],["PtNum=patient.number,",314],["patient.number <- as.integer(id.map[patient.id])",260],["# some number of the expected events will fail, often (always?) because",122],["B=1000 # The number of replicates",110],["# Check expected number of models",109],["# To get an integer value of number of arrays",108],["## number of completely observed observations (on all",95],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["# Sidebar with a slider input for number of bins",90]],"useCount":8847},{"word":"numeric","context":[["T      <- as.numeric(tclObj(T))",82],["if(!is.numeric(x))",85],["y <- as.numeric(y)",86],["N      <- as.numeric(tclObj(N))",82],["x <- as.numeric(x)",199],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["## Return a numeric vector of correlations",97],["expect_equal(mode(tmp),\"numeric\")",87],["stop(\"'x' must be numeric\")",92],["## 'threshold' is a numeric vector of length 1 indicating the",95]],"useCount":21373},{"word":"nzchar","context":[["opts <- if(nzchar(arch)) R_opts4 else R_opts2",84],["if(nzchar(unique)) {",42],["else if (nzchar(res <- isUME(e[[4L]]))) res",43],["if(!nzchar(package))",74],["if(nzchar(arch)) env0,",62],["if(nzchar(tz)) attr(res, \"tzone\") <- tz",57],["if (nzchar(rarch) &&",54],["which <- nzchar(snames)",54],["if(nzchar(Renv) && file.exists(Renv)) readRenviron(Renv)",50],["if (nzchar(res <- isUME(e[[3L]]))) res",43]],"useCount":6683},{"word":"o","context":[["else stop(\"-o option without value\", call. = FALSE)",80],["diag(d.o) <- 0",72],["}, o=expected);",3713],["},  o = expected);",330],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["o <- object",94],["return(o)",93],["} else if (a == \"-o\") {",80]],"useCount":10304},{"word":"obj","context":[["as(.Object, Classi) <- obj",43],["stopifnot( is(obj, 'sleuth') )",42],["query <- gsub(\"`obj`\", obj, query)",48],["query <- gsub(\"`obj`\", obj, query)",48],["#' @param obj a \\code{sleuth} object",52],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["function (obj) {",73],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["obj",391],["return(obj)",392]],"useCount":5574},{"word":"object","context":[["object",1381],["return(object)",1024],["##' @param inputParams Either an R object that will be converted into JSON",498],["#' @param ctx the github context object",473],["function(object) {",464],["validity = function(object) {",390],["##' @param objectID DNAnexus object ID",358],["function(object, value) {",350],["object <-",313],["function(object){",308]],"useCount":56082},{"word":"objects","context":[["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["objects_in_code <- objects(envir = code_env, all.names = TRUE)",91],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["stop(gettextf(\"'%s' not defined for \\\"POSIXt\\\" objects\", .Generic),",76],["## what else shall we allow?  At least objects of class link-glm.",72],["## Find the function objects in the given package.",68],["## Determine exported objects.",68],["# if no opal login details are provided look for 'opal' objects in the environment",67]],"useCount":6535},{"word":"obs","context":[["s.p    <- s[!obs, ]",57],["## obs    1   1  obs  K[obs](r)",78],["X.o    <- matrix(x[obs], ntrain, 1)",57],["obs    <- c(rep(T, ntrain), rep(F, ntest))",57],["N <- nrow(epsilon.obs)",60],["## obs            observed value of K(r) for data pattern",78],["## obs    1   1  obs  K[obs](r)",78],["## obs    1   1  obs  K[obs](r)",78],["checkIdentical(obs, exp)",152],["checkEquals(obs, exp, msg = message)",204]],"useCount":6290},{"word":"observe","context":[["}) #observe",31],["observe(",19],["## seem to observe is the following.",33],["}) # observe",85],["observe ({",139],["observe({",2354],["# observe({",13],["### print and observe this table and select the groups you are interested in",15],["#   observe({",17],["shiny::observe({",49]],"useCount":2778},{"word":"of","context":[["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#  Part of the R package, http://www.R-project.org",3868],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["#  Part of the R package, https://www.R-project.org",1164],["## the location of the CSV files",280],["stop(\"argument 'package' must be of length 1\")",667],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["#' @return A dataframe consisting of the vectors listed in the Description.",346]],"useCount":89390},{"word":"off","context":[["dev.off();",771],["# dev.off()",510],["garbage <- dev.off()",487],["dev.off()",23382],["graphics.off()",919],["## dev.off()",91],["#dev.off()",771],["if (!interactive()) dev.off()",399],["on.exit(dev.off())",104],["invisible(dev.off())",108]],"useCount":30523},{"word":"offset","context":[["offset <- as.vector(model.offset(mf))",42],["mu <- linkinv(eta <- eta + offset)",45],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["column <- treeview$getColumn(col.offset - 1)",67],["offset <- object$offset",60],["offset <- as.vector(model.offset(mf))",42],["if(!is.null(offset)) {",48],["if(!is.null(offset))",48],["#' @param offset_column Specify the offset column.",47],["offset <- object$offset",60]],"useCount":4613},{"word":"ok","context":[["exists('ok') && isTRUE(ok)",47],["i <- pmatch(i, rows, duplicates.ok = TRUE)",45],["exists('ok') && isTRUE(ok)",47],["ext <- ext[ok]",54],["if(!ok)",59],["ok <- switch(.Generic, max = , min = , range = TRUE, FALSE)",67],["ok <- TRUE",68],["ok(cmp(",85],["if (!ok)",140],["ok <- FALSE",184]],"useCount":4993},{"word":"old","context":[["m.new <- m.old",51],["if (is.null(new)) new <- old",52],["names(old) <- new",52],["old <- as.character(spec)",52],["on.exit(par(old.par))",45],["old",81],["setwd(old)",56],["Dev <- matrix(m.old[[\"Dev\"]],1,1)",63],["par(old.par)",72],["par(p.old)",240]],"useCount":4433},{"word":"omit","context":[["x <- na.omit(x)",92],["test_fit = t.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["na.omit() %>%",103],["tmp<- na.omit(sapply(argv,function(arg)",93],["test_fit = wilcox.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["#' @importFrom stats na.omit",62],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["na.omit %>%",48],["d <- na.omit(d)",49],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52]],"useCount":2676},{"word":"on","context":[["on.exit(close(file))",278],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["## on pasture",188],["## on forest",204],["on.exit(close(con))",690],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["on.exit()",276],["dev.hold(); on.exit(dev.flush())",254],["on.exit(progress$close())",205]],"useCount":30681},{"word":"one","context":[["if (one.fig)",86],["one <- (length(topfiles) == 1L)",58],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["#all reference trees to one comp tree",139],["mxPath(from=\"one\", to=indicators,",68],["mxPath(from=\"one\", to=c(latents),",49],[".tkigraph.error(\"Please select exactly one graph\")",52],["# Align the feature in the sample with the one in the model",56],["msg <- c(if(one) \"File\" else \"Files\",",58],["if(one) {",58]],"useCount":8778},{"word":"only","context":[["wrapLog(\"Portable packages must use only ASCII\",",63],["######### Make new data set with only salinities and abundances#########",76],["## Currently only accessible via an internal environment",82],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["## we only source the assignments, and hence do not get any",102],["# Plant the seed only if a specified value is entered",159],["# update plot legend with only ews line",898],["## package was called if character.only = TRUE and",66],["## Because we really only need this for calling from R CMD check, we",66],["if(!character.only)",68]],"useCount":12726},{"word":"op","context":[["op <- par(no.readonly = TRUE)",137],["#' par(op)",162],["par(op)",445],["options(op)",282],["cb$putcode(start.op, ci, end.label)",56],["on.exit(options(op))",63],["else !do.call(depends$op,",68],["!do.call(depends$op, list(current, depends$version))",68],["if(dep$op != '>=') next",88],["on.exit(par(op))",124]],"useCount":4464},{"word":"open","context":[["open(f)",34],["open(file)",40],["outConn <- file(outFile, open = \"w\")",36],["zz <- file(\"all.Rout\", open=\"wt\")",38],["if (!isOpen(file)) open(file, \"w\") else closeit <- FALSE",42],["type = \"open\",",46],["else { system(paste (\"xdg-open \",fname, sep=\"\")) } # linux",62],["# open created file",68],["else if (Sys.info()['sysname'] == 'Darwin') { system(paste (\"open \",fname, sep=\"\")) } # mac",71],["bounds <- grid.Call(L_xsplineBounds, x$x, x$y, x$shape, x$open, x$arrow,",36]],"useCount":2441},{"word":"options","context":[["options(digits=22)",750],["options(warn=-1)",438],["options( digits = 16 )",339],["options(op)",282],["options(echo=TRUE)",250],["options(stringsAsFactors = FALSE)",233],["options(warn = -1)",193],["options(warn=2)",180],["options = list(",180],["Rcmd <- paste(\"options(warn=1)\\n\",",750]],"useCount":21140},{"word":"opts","context":[["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["if (opts$nFlag == 0) {",34],["} else if (opts$nFlag == 1) {",34],["opts <- list(",35],["opts <- unlist(strsplit(Sys.getenv(\"_R_CHECK_CODETOOLS_PROFILE_\"),",33],["args[sub(\"[[:space:]]*=.*\", \"\", opts)] <-",33],["out <- R_runR(Rcmd, opts, env, arch = arch)",52],["admb.opts = admbControl(noinit = FALSE))",58],["opts <- Rd2txt_options()",96],["opts <- if(nzchar(arch)) R_opts4 else R_opts2",84]],"useCount":3106},{"word":"or","context":[["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["# for the code accessed (or partly included) from contributed R-ports",118],["# for the code accessed (or partly included) from other R-ports:",118],["#determine q value threshold or p value threshold",115],["stop(\"'formula' missing or incorrect\")",140],["# by the command he or she entered.",137],["# Get the value which a user either entered directly or was computed",137],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["stop(\"you must specify 'package' or 'dir'\")",364],["#' or \"xval\".",259]],"useCount":23382},{"word":"order","context":[["# match call again, for order",51],["order<-dim(A)[1]",49],["as.integer(order.drop.sqr),",55],["fGroups = fGroups[order(fGroups)]",60],["res <- res[order(res$padj),]",63],["order <- 1;",72],["order, alpha, no.subsets);",73],["colInd <- order.dendrogram(ddc)",160],["rowInd <- order.dendrogram(ddr)",123],["order by",79]],"useCount":7408},{"word":"org","context":[["#' @param owner the repo owner (user, org, etc)",144],["#' \\url{http://www.mlhim.org}",337],["#  Part of the R package, https://www.R-project.org",1164],["#  Part of the R package, http://www.R-project.org",3868],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["source(\"http://bioconductor.org/biocLite.R\")",285],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["url <- 'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'",129],["library(org.Hs.eg.db)",145]],"useCount":9723},{"word":"other","context":[["#Load any source files that contain/define functions, but that don't load any other types of variables",47],["#' @param ... Further arguments passed to or from other methods.",114],["# and other sources",118],["#' @param \\dots any other passthru parameters",71],["# for the code accessed (or partly included) from other R-ports:",118],["\"Use \\\\uxxxx escapes for other characters.\\n\")",63],["# for code accessed (or partly included) from other sources:",47],["#     the documentation and/or other materials provided with the",53],["#' @param ... Further arguments to be passed from or to other methods.",60],["## try a couple of other heuristics",54]],"useCount":3700},{"word":"out","context":[["# You can find out more about building applications with Shiny here:",223],["out <- NULL",280],["out <- list()",465],["out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")",510],["if (length(out)) {",866],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["out",2263],["return(out)",3387],["if(length(out)) {",196],["out <- R_runR2(Rcmd)",256]],"useCount":39402},{"word":"outcome","context":[["best <- function(state, outcome) {",104],["## Check that state and outcome are valid",194],["stop(\"invalid outcome\")",228],["## Read outcome data",241],["#### Use the model to predict the outcome of the testing set (the new data must have only the predictors)",31],["rankall <- function(outcome, num = \"best\") {",82],["rankhospital <- function(state, outcome, num = \"best\") {",80],["data <- read.csv(\"outcome-of-care-measures.csv\", colClasses = \"character\")",69],["if (outcome == \"heart attack\") {",34],["\"sampleSubmission.csv\" , sep=''))) ## outcome = 0 human",31]],"useCount":2265},{"word":"outfile","context":[["unlink(outfile)",84],["lines <- readLines(outfile, warn = FALSE)",96],["savefile <- paste(outfile, \"save\", sep = \".\" )",86],["stdout = outfile, stderr = outfile)",80],["stdout = outfile, stderr = outfile)",80],["out <- readLines(outfile, warn = FALSE)",64],["shQuote(f), shQuote(outfile))",63],["sQuote(outfile)))",58],["outfile <- paste0(f, \"out\")",57],["close(outfile)",56]],"useCount":2869},{"word":"output","context":[["output",265],["return(output)",1201],["df.output.chk <- cbind(df.output.chk,",176],["shinyServer(function(input, output, session) {",546],["shinyServer(function(input, output) {",959],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["output$plot <- renderPlot({",210],["## output results in tables to pdf",190],["df.output.chk <- cbind(df.output.chk,",176],["df.output.chk = df.output.chk, df.comp = df.comp,",592]],"useCount":30837},{"word":"p","context":[["p <- p +",228],["p <- p +",228],["p",1549],["par(p.old)",240],["p <- p + theme_bw()",149],["for(p in nsInfo$exportPatterns)",166],["p <- ncol(x)",185],["return(p)",972],["print(p)",1291],["plot(p)",207]],"useCount":37739},{"word":"p1","context":[["print(p1)",95],["return(p1)",135],["p1",220],["p1 <- 1L:p",46],["p1 <- p1 + geom_line(data=mvf_plot_data,aes(Time,Failure))",38],["plot(p1)",44],["p1 <- p1 + geom_line(data=mvf_plot_data,aes(Time,Failure))",38],["#p1 <- ggplot(,aes_string(x=Time,y=Failure));",35],["p1 = ggplot(dm[dm$X2==\"ones\",], aes(x = index, y = value, group = X2, color=\"black\")) +",33],["print(arrangeGrob(p1, p2, ncol=2))",28]],"useCount":2520},{"word":"package","context":[["if(!missing(package)) {",748],["#' @docType package",689],["stop(\"argument 'package' must be of length 1\")",667],["#  Part of the R package, https://www.R-project.org",1164],["#  Part of the R package, http://www.R-project.org",3868],["if(length(package) != 1L)",625],["dir <- find.package(package, lib.loc)",623],["dir <- find.package(package, lib.loc)",623],[".load_package_quietly(package, lib.loc)",434],["function(package, dir, lib.loc = NULL)",419]],"useCount":53710},{"word":"packages","context":[["install.packages(\"ggplot2\")",124],["#  of packages for network analysis, http://statnet.org .",124],["available <- available.packages(contriburl = contriburl,",96],["## packages",206],["# load packages",150],["install.packages(\"devtools\")",93],["# Load packages",150],["# ---- load-packages -----------------------------------------------------------",130],["install.packages(pkg_dir,type=\"source\",repos=NULL)",72],["# Load required packages",75]],"useCount":14990},{"word":"panel","context":[["panel.background = element_blank(),",345],["panel.grid.minor = element_blank(),",524],["panel.grid.major = element_blank(),",410],["panel.border = element_blank(),",316],["sgp.panel.years.within=c('LAST_OBSERVATION', 'FIRST_OBSERVATION'),",229],["panel.background=element_blank(),",125],["panel.grid.major=element_blank(),",126],["sgp.baseline.panel.years=c('2009', '2010', '2011', '2012', '2013'),",141],["panel.grid.minor=element_blank(),",161],["# Make the panel",205]],"useCount":9929},{"word":"par","context":[["par(opar)",241],["par(mfrow=c(1,1))",1117],["par(mfrow=c(2,2))",802],["par(mfrow=c(1,2))",779],["par(new=T)",722],["par(mfrow=c(2,1))",456],["par(op)",445],["par(new=TRUE)",417],["par(mar=c(0,0,0,0))",300],["par(p.old)",240]],"useCount":24894},{"word":"parallel","context":[["if( parallel==F )",63],["}, .parallel = FALSE)",151],["library(parallel)",701],["require(parallel)",124],["#' @import parallel",43],["if((poped.db$settings$parallel$bParallelLS == 0)){",43],["options(mc.cores = parallel::detectCores())",58],["parallel.config=list(",60],["if( parallel==T)",62],["parallel::stopCluster(cl)",77]],"useCount":3188},{"word":"param","context":[["##' @param inputParams Either an R object that will be converted into JSON",498],["#' @param ctx the github context object",473],["##' @param objectID DNAnexus object ID",358],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' @param x An \\linkS4class{H2OFrame} object.",199],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["##' @param alwaysRetry Whether to always retry even when no response is",498],["#' @param repo the name of the repo",187],["#' @param owner the repo owner",163]],"useCount":25635},{"word":"parameter","context":[["### Propose new parameter values",178],["fun_call(parameter = fun_argument(",60],["fun_call(parameter =",60],["## -- parameter definition function",61],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["parameter = PARAMETER,",117],["pll <- c(pll,list(data.frame(parameter,type,level)))",101],["parameter <- rep(n,nrow(level))",101],["# To check the input parameter for generating figures",62]],"useCount":3826},{"word":"parameters","context":[["# Check parameters coverage",93],["parameters {",76],["# parameters",76],["parameters <- list()",72],["#' @param \\dots any other passthru parameters",71],["#' @param ... ignored parameters",70],["return(parameters)",68],["with(as.list(parameters),{",65],["# Model parameters",59],["parameters.to.save = model_parameters,",56]],"useCount":6233},{"word":"params","context":[["params",104],["return(params)",109],["params <- list()",76],["params$training_frame  <- training_frame",70],["params <- list(",63],["params = params,",62],["params = params,",62],["params                 <- list()",58],["params = list(",56],["if (getIgraphOpt(\"add.params\")) {",52]],"useCount":5022},{"word":"parent","context":[["env <- parent.frame()",97],["e <- get(\"e\", parent.frame())",440],["mf <- eval(m, parent.frame())",204],["env <- parent.env(env)",163],["mf <- eval(mf, parent.frame())",81],["if(is.matrix(eval(m$data, parent.frame())))",163],["parent=outTreeMessage)",109],["data, enclos = sys.frame(sys.parent()))",109],["where = topenv(parent.frame()),",107],["where = topenv(parent.frame()))",85]],"useCount":8917},{"word":"parm","context":[["Data[[\"parm.names\"]][j], \".\\n\",",45],["thinned[t.iter,] <- Mo1[[\"parm\"]]",81],["Data[[\"parm.names\"]][j],",117],["\"Current:\", round(Mo0[[\"parm\"]][j]),",129],["prop <- Mo0[[\"parm\"]]",173],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["cat(\"\\nWARNING: Evaluating\", Data[[\"parm.names\"]][j],",36],["post <- matrix(Mo0[[\"parm\"]], Iterations, LIV, byrow=TRUE)",34],["prop <- Mo1[[\"parm\"]]",33],["parm.len <- length(parm)",33]],"useCount":2465},{"word":"parms","context":[["parms$seed <- seed",93],["parms$training_frame <- training_frame",103],["parms <- list()",182],["#' @param parms (Optional) Parameters to include in the request",84],["parms$model_id <- model_id",83],["parms$ignored_columns <- args$x_ignore",75],["parms$response_column <- args$y",75],["parms$nfolds <- nfolds",73],["parms$validation_frame <- validation_frame",62],["if( !missing(fold_column) )               parms$fold_column            <- fold_column",60]],"useCount":4102},{"word":"pars","context":[["pars <- env$pars",46],["return(pars)",27],["ini.cov.pars = ini.cov.pars,",27],["ini.cov.pars = ini.cov.pars,",27],["pars[[i]]@parnum <- tmp2",39],["##' @rdname pars",44],["pars <- env$pars",46],["if(transform.pars) {",49],["assign(pars[1],0)",52],["if (is.null(pars)) {",70]],"useCount":2441},{"word":"parse","context":[["expected <- eval(parse(text=\"NULL\"));",135],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["good_expr <- parse(text=correctExpr)[[1]]",89],["e1      <- try(parse(text=dat))",77],["if (eval(parse(text=newy)) >= 10^6) {",67],["if (eval(parse(text= newy)) <= 10^(-6)) {",67],["stop(gettextf(\"parse error in file '%s':\\n%s\",",66],["expected <- eval(parse(text=\"TRUE\"));",191],["print(\"Time it took to parse\")",199],["expected <- eval(parse(text=\"FALSE\"));",383]],"useCount":6723},{"word":"part","context":[["# This file is part of the R package rkwarddev.",122],["## This file is part of the R-package `ape'.",116],["# This file is a part of Xpose 4.",234],["# This file is part of icd.",135],["# This file is part of Rcpp.",133],["# This file is part of the R package koRpus.",111],["#  This file is part of sybil.",104],["# This file is part of darch.",97],["# This file is part of icd9.",77],["# This file is part of shinystan",74]],"useCount":4720},{"word":"parts","context":[["## the non-matched parts.",33],["model.parts <- .model.parts(object)",305],["model.parts <- .model.parts(object)",305],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["\"parts\": {",129],["# You are welcome to use parts of this code, but please give credit when using it extensively.",51],["if( is.null(model.parts$vm) ) return( invisible(.warn.no.validation()) )",51],["## mentioned in other parts of the Rd object documenting them, or be",34],["## We could also check that the local and domain parts are no longer",33]],"useCount":3311},{"word":"passed","context":[["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["#' @param \\dots extra arguments to be passed if `object` is of type",78],["#' @param ... Further arguments passed to or from other methods.",114],["valGood <- valResults$passed",108],["if(is(e, \"dev\") && !valResults$passed)swirl_out(valResults$message)",108],["#' @param \\dots further arguments to be passed to/from this method.",97],["num.passed.tests=num.passed.tests+1",135],["num.passed.tests=num.passed.tests+1",135],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110]],"useCount":2473},{"word":"paste","context":[["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["paste(",446],["Rcmd <- paste(\"options(warn=1)\\n\",",750],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")",176],["paste(\"c(\",paste(prop, collapse=\",\"),\")\",",152],["Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",",160],["paste(\"c(\",paste(prop, collapse=\",\"),\")\",",152]],"useCount":50862},{"word":"paste0","context":[["ret = paste0(base.path1,\"/\")",158],["paste0(\"--build-dir=\", shQuote(build_dir)),",96],["ggtitle(paste0(case5_ABT$Case_Name,\"\\n\",case5_ABT$ticker))+ geom_line() +",116],["statement <- paste0(statement, \" AND\")",1666],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["newy <- paste0(\"1/\", newy)",99],["error = function(e)stop(paste0(\"Illegal expression \", dprs(expr), \": \",",102],["paste0(",263],["cat(paste0(sErrorMsg,\"\\n\"))",320],["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320]],"useCount":28426},{"word":"pasture","context":[["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"accum.bac\"],",96],["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"total.bac\"],",96],["chk.pop[chk.pop$location == \"pasture\", \"pop\"]) /",96],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"pasture\"))",96],["## bac load on pasture",188],["## on pasture",188],["## pop on pasture",142],["## accum load on pasture",96],["chk.pasture.bac <- data.frame(",142],["chk.pasture.pop <- data.frame(",142]],"useCount":7262},{"word":"path","context":[["#' path <- \"path/to/file.json\"",168],["return(invisible(path))",150],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["code_dir <- file.path(dir, \"R\")",636],["if(file.exists(file.path(dir, \"NAMESPACE\"))) {",203],["setwd(path)",191],["sys_data_file <- file.path(code_dir, \"sysdata.rda\")",170],["#' path <- \"path/to/file.json\"",168]],"useCount":34849},{"word":"paths","context":[["for(p in paths) {",36],["paths <- paths[file_test(\"-f\", paths)]",34],["fp <- file.path(paths, \"Meta\", \"Rd.rds\")",34],["paths <- paths[file_test(\"-f\", paths)]",34],["#' @rdname simList-accessors-paths",36],["## Spaces in paths might still cause trouble.",38],["# 2nd element - file paths of the data files for each study as character vector",42],["paths <-",49],["if(length(paths)) {",58],["if (length(paths)) {",59]],"useCount":4077},{"word":"patient","context":[["curr_info = info[match(train_pats,as.character(info$patient)),]",76],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["patient.number <- as.integer(id.map[patient.id])",260],["patient.number <- as.integer(id.map[patient.id])",260],["PtNum=patient.number,",314],["new.event <- list(PatientID=patient.id,",314],["train.resp = as.character(train.info$response[match(colnames(train.dat),as.character(train.info$patient))])",57]],"useCount":4140},{"word":"pattern","context":[["pattern = pattern),",110],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["pattern <- vignetteEngine(\"Sweave\")$pattern",83],["file.remove(list.files(pattern=\".png\"))",88],["h2o.rm(localH2O, grep(pattern = \"Last.value\", x = h2o.ls(localH2O)$Key, value = TRUE))",89],["pattern = pattern),",110],["## obs            observed value of K(r) for data pattern",78],["path <- tempfile(pattern=\"git2r-\")",82],["pattern <- vignetteEngine(\"Sweave\")$pattern",83]],"useCount":7456},{"word":"pch","context":[["pch = 16,",70],["pch = 19,",101],["plot(pr.out$x[,1:2], col=col, pch=19, xlab='Z1', ylab='Z2',",68],["plot(pr.out$x[,c(2,3)], col=col, pch=19, xlab='Z2', ylab='Z3',",54],["plot(pr.out$x[,c(1,3)], col=col, pch=19, xlab='Z1', ylab='Z3',",54],["#' op <- par(mfrow=c(1,2),pch=19)",51],["pch = 0, cex = 1.2, col = \"blue\")",48],["pch=16, cex=0.75, xlab=\"Longitude\", ylab=\"Latitude\",",45],["pch = 19)",61],["ylab=input$yaxis, pch=1)",60]],"useCount":4044},{"word":"pdf","context":[["sUserGuide <<- \"Marxan_io_rev39_user_guide.pdf\"",50],["condition=\"input.paramdown=='pdf'\",",47],["\".tex\", \".log\", \".aux\", \".pdf\", \".png\",",55],["contentType='image/pdf')",57],["dev.off(pdf.output)",61],["## output results in tables to pdf",190],["pdf(file)",110],["## close the pdf file",158],["\".pdf\"), height = 8.5, width = 11, onefile = TRUE)",190],["pdf.output <- dev.cur()",61]],"useCount":6213},{"word":"pi","context":[["foo(pi)",38],["more <- c(more, names(pi$Depends), names(pi$Imports),",32],["names(pi$LinkingTo))",32],["pi <- .split_description(desc)",32],["\"methods\" %in% c(names(pi$Depends), names(pi$Imports))",32],["pi <- .split_description(.read_description(file.path(pkgdir, \"DESCRIPTION\")))",32],["if( !is.null(pi) ) perm[[i]] <- pi",44],["if( !is.null(pi) ) perm[[i]] <- pi",44],["m <- list(a1=1:3, a2=4:6, a3=pi, a4=c(\"a\",\"b\",\"c\"))",38],["more <- c(more, names(pi$Depends), names(pi$Imports),",32]],"useCount":2662},{"word":"pkg","context":[["bad <- c(bad, pkg)",74],["for (pkg in pkgs) {",121],["bad_imports <<- c(bad_imports, pkg)",132],["bad_data <<- c(bad_data, pkg)",66],["for(pkg in pkgs) {",71],["if(!is.null(pkg <- mc$package) && !pkg %in% depends_suggests)",66],["if(! pkg %in% depends_suggests)",66],["if(! pkg %in% imports)",66],["if(!is.null(pkg <- mc$package) && !pkg %in% depends_suggests)",66],["unknown <- c(unknown, pkg)",66]],"useCount":11972},{"word":"pkgdir","context":[["pkgdir))",240],["f <- file.path(pkgdir, \"DESCRIPTION\")",50],["Sys.setenv(R_PACKAGE_DIR = pkgdir)",44],["Sys.setenv(R_LIBRARY_DIR = dirname(pkgdir))",44],["pkgname <- basename(pkgdir)",53],["tests_dir <- file.path(pkgdir, test_dir)",44],["cleanup_pkg(pkgdir, Log)",44],["owd <- setwd(pkgdir)",63],["pkgdir <- getwd()",86],["vigns <- pkgVignettes(dir = pkgdir)",122]],"useCount":4232},{"word":"pkgname","context":[["runHook <- function(hookname, env, libname, pkgname) {",50],["runUserHook <- function(pkgname, pkgpath) {",52],["sQuote(pkgname)),",53],["pkgname <- basename(pkgdir)",53],["pkgname))",56],["file.copy(latex_log, paste0(pkgname, \"-manual.log\"))",64],["return(e3 != pkgname)",66],[".onLoad <- function(libname, pkgname)",101],[".onAttach <- function(libname, pkgname) {",142],[".onLoad <- function(libname, pkgname) {",188]],"useCount":5995},{"word":"pkgs","context":[["pkgs <- character()",99],["for(pkg in pkgs) {",71],["} else pkgs <- c(pkgs, a)",78],["} else pkgs <- c(pkgs, a)",78],["if(!length(pkgs)) return(invisible())",61],["if(is.null(pkgs))",55],["pkgs <- names(value)",54],["for(i in seq_along(pkgs)) {",54],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["for (pkg in pkgs) {",121]],"useCount":6085},{"word":"plot","context":[["plot(g)",234],["plot.new()",1229],["# update plot legend with only ews line",898],["# update plot legend with ews and breakpoint lines",898],["twoord.plot(1:length(decomposed$seasonal), decomposed$seasonal,",226],["plot(",313],["# plot",279],["plot[[\"data\"]] <- .endSaveImage(image)",250],["# then, if the requested plot already exists, use it",228],["twoord.plot(1:length(decomposed$random), decomposed$random,",236]],"useCount":29501},{"word":"plots","context":[["segments(mp - 0.1, AB_mean + AB_se, mp + 0.1, AB_mean + AB_se, lwd=2) #plots error bar caps",57],["segments(mp, AB_mean + AB_se, mp,AB_mean, lwd=2) # plots positive error bar centered on mp",57],["plots.ttest[[z]] <- state$plotsTtest[[index]]",59],["plots <- list()",61],["# To run a while loop to generate different plots",108],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["# ncol: Number of columns of plots",192],["print(plots[[1]])",207],["plots <- c(list(...), plotlist)",215],["numPlots = length(plots)",222]],"useCount":4326},{"word":"plyr","context":[["#' @import plyr",82],["requireNamespace(\"plyr\")",51],["ds1 <- plyr::rename(x=ds1, replace = c(",51],["library('plyr')",46],["install.packages(\"plyr\")",46],["#library(plyr)",45],["require(\"plyr\")",40],["library(plyr)",2718],["require(plyr)",775],["library(\"plyr\")",175]],"useCount":4656},{"word":"png","context":[["png(filename=plot_name, width=PLOT_W, height=PLOT_H, units=\"px\", pointsize=PTSIZE)",48],["png(file)",87],["contentType='image/png')",57],["\".tex\", \".log\", \".aux\", \".pdf\", \".png\",",55],["library(png)",100],["png(filename)",134],["file.remove(list.files(pattern=\".png\"))",88],["plot_name <- paste(plot_name, '.png', sep='')",48],["condition=\"input.paramdown=='png'\",",47],["\".png\")",45]],"useCount":3562},{"word":"points","context":[["c(\"Compiled code should not call entry points which\",",60],["trellis.par.set(fontsize = list(text = 7, points = 5),",76],["# Adding the number of points to the plot",40],["nums.of.characteristic.points=nums.of.characteristic.points,",42],["nums.of.characteristic.points=nums.of.characteristic.points,",42],["invisible(points)",40],["#define the the lon/lat of the background / psuedo absence points to use -- 2 column matrix of longitude and latitude",39],["# time points",38],["# subset ocurrence points within GOC",38],["points(",37]],"useCount":3347},{"word":"pop","context":[["model.pop.total = sum(df.output$pop.total),",158],["model.pop.total = sum(df.output$pop.total),",158],["chk.forest.pop <- data.frame(",158],["chk.total.pop <- data.frame(",158],["sum(chk.pop$pop),",142],["## pop in/around stream",158],["\"model.pop.total\")",230],["## pop on forest",158],["chk.stream.pop <- data.frame(",158],["pop$add_model(",198]],"useCount":22318},{"word":"poped","context":[["poped.db <- returnArgs[[2]]",344],["if((poped.db$settings$parallel$bParallelLS == 0)){",43],["#' @inheritParams create.poped.database",61],["poped.db <- returnArgs[[3]]",45],["if((!isempty(poped.db$settings$strIterationFileName))){",44],["sigma=poped.db$parameters$sigma,",37],["return(list(y=y,poped.db=poped.db))",37],["return(list(y=y,poped.db=poped.db))",37],["return(list( y= y,poped.db=poped.db))",43],["return(list( y= y,poped.db=poped.db))",43]],"useCount":2521},{"word":"port","context":[["conn <- h2o.init(ip=myIP, port=myPort, startH2O = FALSE)",94],["# for this R-port:",164],["port = conn@port",42],["algorithm=\"port\",control=ctrl)",48],["conn <- new(\"H2OClient\", ip=myIP, port=myPort)",49],["\"port: \",     session$clientData$url_port,     \"\\n\",",51],["port = conn@port",42],["onco <- OncoDev14(port=PORT, scriptDir=scriptDir, userID=userID, datasetNames=dataset)",42],["stop(\"need to hardcode ip and port\")",38],["h2o.init(ip=myIP, port=myPort, startH2O = FALSE)",55]],"useCount":2393},{"word":"pos","context":[["layout.pos.col = matchidx$col))",203],["if(length(pos)) {",225],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["trim_spectra <- get(x=\"trim\", pos=\"package:MALDIquant\")",91],["if(length(pos))",90],["assign (pos = 1, newnam, xpdb)",85],["assign (pos = 1, \".cur.db\", xpdb)",85],["pos <- pos[1L]",77],["pos <- pos[1L]",77],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73]],"useCount":10609},{"word":"position","context":[["theme(legend.position = \"bottom\") +",102],["legend.position=\"none\",",108],["theme(legend.position = \"none\")",119],["theme(legend.position = \"none\") +",125],["theme(legend.position=\"bottom\")",128],["theme(legend.position=\"none\")",130],["position=position_dodge(0.05)) +",151],["#position=position_dodge(0.05)) +",151],["theme(legend.position=\"none\") +",170],["legend.position=\"right\",",207]],"useCount":4846},{"word":"possible","context":[["warning(\"'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible\", call.=FALSE)",40],["plot[[\"error\"]] <- list(error=\"badData\", errorMessage= paste(\"Plotting is not possible:\", errorMessage))",72],["## subscript whenever possible.",68],["errorMessage <- \"Plotting is not possible: The Bayes factor is too small\"",66],["## Determine encoding and re-encode if necessary and possible.",43],["strwrap(gettextf(\"Only operators '<=' and '>=' are possible.\")))",33],["## If we were really picky, we would worry about possible",34],["## now look for possible copy as a registered S3 method",34],["gc() # Let's clean ouR garbage if possible",37],["## sink() handling as general as possible -- unbelievably unpretty coding:",42]],"useCount":2793},{"word":"pred","context":[["post.prob.pro <- pred.spprob(mcmcoutput = fit.probit, X.pred = X.p,",62],["post.prob.pro <- pred.spprob(mcmcoutput = fit.probit, X.pred = X.p,",62],["head(pred)",60],["post.prob.gev <- pred.spgev(mcmcoutput = fit.gev, x.pred = X.p,",59],["post.prob.gev <- pred.spgev(mcmcoutput = fit.gev, x.pred = X.p,",59],["return(pred)",59],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["fit.gev <- mcmc.gev(y = y.i.o, s = s.o, x = X.o, s.pred = NULL, x.pred = NULL,",57],["pred",91],["s.pred = s.p, knots = knots,",139]],"useCount":4778},{"word":"predict","context":[["print(\"    start mcmc predict\")",189],["pred = predict(bst,x[teind,])",50],["ph = as.data.frame(h2o.predict(hh,newdata = hdf))",48],["predict = plsBag$pred,",45],["#' pred <- predict(model, toyml)",44],["rf_predicted<-predict(rf_model, newdata=td, type=\"prob\")",40],["pred = as.numeric( predict(model , testSet )  )",52],["predict(fit, type=\"terms\", se=TRUE)",76],["predict(fit, data.frame(x=x), se=TRUE)",76],["predict(fit)",78]],"useCount":4066},{"word":"primitive","context":[["## get the primitive functions from the version of R we are using.",34],["if(is.primitive(fct)){",51],["else if(is.primitive(f))",43],["if(is.primitive(fun)) return(qcall)",34],["# match.call() does not support primitive functions",34],["if(is.primitive(fdef)) {",28],["if (is.primitive(object))",31],["is.primitive(f)",31],["if(is.primitive(deflt)) {",32],["## This includes the primitive group generics as from R 2.6.0",33]],"useCount":2256},{"word":"print","context":[["print(p)",1291],["print(\"\")",1012],["print(plots[[1]])",207],["print(hdfs_name_node)",209],["#print(.self$formatResponse(response))",282],["print(",311],["print(gp)",351],["print(g)",382],["print(x)",412],["print(i)",795]],"useCount":40182},{"word":"printLog","context":[["printLog(Log,",578],["printLog(Log, \"\\n\")",116],["printLog(Log, msg)",68],["printLog(Log, \"      -----------------------------------\\n\")",44],["printLog(Log, \"Some Unix compilers require LF line endings.\\n\")",32],["printLog(Log, \"Subdirectory 'demo' contains no demos.\\n\")",32],["printLog(Log, paste(c(out, \"\"), collapse = \"\\n\"))",129],["printLog(Log, \"Problems with news in 'inst/NEWS.Rd':\\n\")",32],["# printLog(Log, \"Error when running command:\\n\")",32],["# printLog(Log, strwrap(cmd, indent = 2, exdent = 4), \"\\n\")",32]],"useCount":2638},{"word":"printLog0","context":[["printLog0(Log, paste(msg, collapse = \"\\n\"))",110],["printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")",78],["printLog0(Log, msg,",78],["printLog0(Log, .format_lines_with_indent(out), \"\\n\")",148],["printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")",151],["printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")",176],["printLog0(Log,",707],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["printLog0(Log, .format_lines_with_indent(lines), \"\\n\")",64],["printLog0(Log, paste(c(res, \"\", \"\"), collapse = \"\\n\"))",64]],"useCount":3828},{"word":"prob","context":[["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["post.prob.pro <- pred.spprob(mcmcoutput = fit.probit, X.pred = X.p,",62],["post.prob.gev <- pred.spgev(mcmcoutput = fit.gev, x.pred = X.p,",59],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["post.prob.log <- t(yp.sp.log$p.y.predictive.samples)",54],["fit.probit, post.prob.pro,",46],["fit.logit, post.prob.log,",46],["return(prob)",44],["save(fit.pcl, fit.gev, post.prob.gev,",41],["##Output assignment results (prob.& used train loci) to files",40]],"useCount":2104},{"word":"proc","context":[["set.seed(476); ptm <- proc.time()",200],["base::assign(\".ptime\", proc.time(), pos = \"CheckExEnv\")",73],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73],["proc.time()",87],["starttime<-proc.time()",104],["endtime <- proc.time()",136],["t2 <- proc.time()",197],["ptm <- proc.time()",350],["tm = proc.time() - ptm",308],["t1 <- proc.time()",205]],"useCount":3906},{"word":"process","context":[["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["source(paste0( getBasePath(\"process\") , \"/FeatureEncode_Lib.R\"))",60],["process = \"BM\",",61],["process = \"scOU\",",75],["process = process,",77],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["} else if (type == \"process\") {",136],["## FIXME: this does not need to be run in another process",128],["d.n=20 # Dimension of the noise process driving the MA",110],["process = process,",77]],"useCount":2782},{"word":"program","context":[["# along with this program; if not, a copy is available at",314],["program <- d",68],["if(!is.null(d <- defaults$program))",68],["control = list(), program = NULL, dictionaries = character())",105],["# Unless you have received this program directly from RStudio pursuant",175],["program = program,",185],["program = program,",185],["# along with this program.  A copy can be cound in the R installation",234],["program <- aspell_find_program(program)",204],["program <- aspell_find_program(program)",204]],"useCount":2614},{"word":"project","context":[["result <- query_exec(querySql, project=project)",55],["#' PIHM Analysis project.",45],["\".project\", \".seed\", \".settings\", \".tm_properties\")",55],["result <- query_exec(querySql, project=project)",55],["\"Report bugs at bugs.r-project.org .\", sep = \"\\n\")",55],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["#  Part of the R package, http://www.R-project.org",3868],["#  Part of the R package, https://www.R-project.org",1164],["\"Report bugs at bugs.r-project.org .\", sep=\"\\n\")",39],["\"Report bugs at bugs.r-project.org .\",",41]],"useCount":6458},{"word":"prostate","context":[["Log.info(\"Importing prostate.csv data...\\n\")",50],["print(summary(prostate.hex))",63],["hex <- cp(prostate.hex)",64],["print(\"Read in prostate data.\")",65],["summary(prostate.hex)",66],["#' summary(prostate.hex)",66],["prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",85],["#' prostate.hex <- h2o.uploadFile(localH2O, path = prosPath)",120],["#' prostate.hex <- h2o.uploadFile(path = prosPath)",123],["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363]],"useCount":4413},{"word":"prototype","context":[["prototype <- prototype@object",54],["prototype = prototype(",85],["prototype = prototype(",85],["prototypeClass <- getClass(class(prototype), where = where)",81],["return(prototype)",54],["prototype=prototype(",69],["prototype <- do.call(\"prototype\", prototype)",54],["prototype=list(",73],["pnames <- names(attributes(prototype))",108],["prototype=prototype(",69]],"useCount":5405},{"word":"putcode","context":[["cb$putcode(GETFUN.OP, ci)",45],["cb$putcode(RETURN.OP)",258],["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["cb$putcode(INVISIBLE.OP)",120],["cb$putcode(LDNULL.OP)",105],["cb$putcode(PUSHNULLARG.OP)",75],["cb$putcode(SWAP.OP)",71],["cb$putcode(GOTO.OP, loop.label)",45],["cb$putcode(start.op, ci, end.label)",56],["cb$putcode(POP.OP)",60]],"useCount":2262},{"word":"q","context":[["q",88],["q(save=\"no\")",104],["q(\"no\", runLast = FALSE)",104],["#determine q value threshold or p value threshold",115],["q()",244],["q(status=1)",171],["q(\"no\")",160],["q.but <- tkbutton(tt,text=\"Quit\",",144],["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["return(q)",117]],"useCount":7815},{"word":"qr","context":[["k <- as.integer(qr$rank)",39],["if(!is.qr(qr)) stop(\"argument is not a QR decomposition\")",77],["warning(gettextf(\"method = '%s' is not supported. Using 'qr'\", method),",48],["as.double(qr$qraux),",43],["if(!is.qr(qr)) stop(\"argument is not a QR decomposition\")",77],["stop(\"'qr' and 'y' must have the same number of rows\")",56],["as.double(qr$qr),",38],["as.double(qr$qr),",38],["n <- as.integer(nrow(qr$qr))",35],["n <- as.integer(nrow(qr$qr))",35]],"useCount":4645},{"word":"query","context":[["return(query)",64],["query <- gsub(\"`obj`\", obj, query)",48],["query <- parseQueryString(session$clientData$url_search)",113],["rs <- dbSendQuery(con,query)",83],["if(bool(query[i]))",77],["query <- dbSendQuery(con, \"",68],["query = \"",60],["games <- fetch(query,n=-1)",55],["print(query)",53],["#count the query sequeces",50]],"useCount":3292},{"word":"quiet","context":[["quiet = TRUE)",55],["if(!quiet) {",52],["knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)",48],["pkgpath <- find.package(package, lib.loc, quiet = TRUE)",44],["if (!quiet)",96],["if (!quiet) {",74],["if(!quiet)",57],["where <- find.package(pkg, quiet = TRUE)",32],["if(!isTRUE(quiet)){",37],["function(file, pdf = FALSE, clean = FALSE, quiet = TRUE,",26]],"useCount":2230},{"word":"quote","context":[["quote = TRUE,",103],["quote=FALSE,",329],["quote = FALSE,",157],["m[[1L]] <- quote(stats::model.frame)",150],["quote = FALSE)",90],["quote=FALSE,row.names=FALSE)",77],["print.gap = 2, quote = FALSE)",75],["quote = FALSE,row.names = FALSE,col.names=FALSE)",66],["mf[[1L]] <- quote(stats::model.frame)",65],["quote = quote,",59]],"useCount":7393},{"word":"r","context":[["```{r}",204],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["print(check.normal.quantiles(r))",93],["cat(\"num. phenotype samples =\",sum(!is.na(r)),\"\\n\")",93],["return(r)",430],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["#```r",260],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["r",845],["\" (r\", R.version[[\"svn rev\"]], \")\\n\", sep = \"\")",183]],"useCount":19969},{"word":"random","context":[["method <- \"random\";",72],["twoord.plot(1:length(decomposed$random), decomposed$random,",236],["# #' ##-- ==>  Define data, use random,",82],["random = ~1|device_info_serial, method = \"ML\")",127],["random = ~1|device_info_serial , correlation = corARMA(q = 2), method = \"ML\")",56],["x <- decomposed$random[!is.na(decomposed$random)]",56],["x <- decomposed$random[!is.na(decomposed$random)]",56],["type <- rep(\"random\",nrow(df))",51],["type <- rep(\"random\",nrow(level))",51],["twoord.plot(1:length(decomposed$random), decomposed$random,",236]],"useCount":3049},{"word":"range","context":[["range <- count:(count+length(new.list)-1)",187],["ok <- switch(.Generic, max = , min = , range = TRUE, FALSE)",67],["# a reasonable range of expression log2 ratios",96],["my.range <- env$my.range",51],["my.range <- env$my.range",51],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["# Set color range",44],["assign(state[d],X.t0[my.range[t],d])",45],["result[range] <- new.list",187]],"useCount":3652},{"word":"rank","context":[["p <- model$rank",36],["#wilcox rank sum test, and logistic regression are also provided: \"wilcox\", \"regression\"",37],["k <- as.integer(qr$rank)",39],["fitted.values = 0 * y, weights = w, rank = 0L,",39],["## For each state, find the hospital of the given rank",56],["## Return hospital name in that state with the given rank",59],["rank.related.requirements = NULL,",71],["p <- object$rank",72],["rank.related.requirements = rank.related.requirements,",73],["rank.related.requirements = rank.related.requirements,",73]],"useCount":3165},{"word":"raw","context":[["min.raw <- -max.raw",44],["bytes <- raw()",63],["mxData(observed=data, type=\"raw\"),",51],["min.raw <- -max.raw",44],["# each of these elements is a raw data set of a corresponding study, for example",42],["xv <- scale01(as.numeric(lv), min.raw, max.raw)",42],["xv <- scale01(as.numeric(lv), min.raw, max.raw)",42],["# 4th element - a dataset names and labels of raw variables + added metadata for all studies",41],["type=\"raw\"",77],["# \"norm\" or \"raw\", then it is assumed that we have to",41]],"useCount":7431},{"word":"rbind","context":[["meantablerf <- rbind(meantablerf,mean(min[,2])) #zmean RF closest trees between pruned and deleted sets",137],["rbind(",132],["summaryInfo = rbind( summaryInfo ,",97],["chk.all.bac <- rbind(chk.total.bac, chk.stream.bac, chk.forest.bac,",96],["chk.all.accum <- rbind(chk.forest.accum,",96],["chk.all.pop <- rbind(chk.total.pop, chk.stream.pop, chk.forest.pop,",96],["chk.pop <- rbind(data.frame(location = \"forest\", pop = chk.pop.on.land.Forest),",96],["meantablepd <- rbind(meantablepd,mean(min[,3])) #zmean PD closest trees between pruned and deleted sets",137],["do.call(rbind,",161],["ewsLine <- rbind(NA, ewsLine)",193]],"useCount":10312},{"word":"rdname","context":[["#' @rdname accessor-methods",85],["#' @rdname Node-class",82],["#' @rdname collector",82],["#' @rdname H2OFrame-Extract",70],["#' @rdname ModelAccessors",234],["#' @rdname H2OModelMetrics-class",183],["#' @rdname h2o.metric",300],["#' @rdname Frame",137],["#' @rdname string-methods",106],["#' @rdname H2OModel-class",99]],"useCount":6173},{"word":"rds","context":[["pfile <- system.file(\"Meta\", \"package.rds\", package = package,",54],["fv <- file.path(\"build\", \"vignette.rds\")",44],["\"symbols.rds\"))",44],["rds <- file.path(dir, \"Meta\", \"Rd.rds\")",46],["if(file_test(\"-f\", rds)) {",46],["rds <- file.path(dir, \"Meta\", \"Rd.rds\")",46],["if (grepl(\"[.]rds$\", f)) f <- readRDS(f)",48],["\"Meta\", \"package.rds\"))",66],["SCC <- readRDS(\"Source_Classification_Code.rds\")",182],["NEI <- readRDS(\"summarySCC_PM25.rds\")",201]],"useCount":3182},{"word":"re","context":[["#\tre-name the following:",46],["for(re in ignore[nzchar(ignore)])",38],["print(re)",38],["stop(gettextf(\"package %s was built before R 3.0.0: please re-install it\",",40],["warning(\"'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible\", call.=FALSE)",40],["## Determine encoding and re-encode if necessary and possible.",43],["messageLog(Log, \"re-saving image files\")",44],["# re-scale ews statistic",193],["checkingLog(Log, \"re-building of vignette outputs\")",84],["m <- gregexpr(re, s)",63]],"useCount":3331},{"word":"read","context":[["fm_train_real <- t(as.matrix(read.table('../data/fm_train_real.dat')))",110],["train_data <- as.data.frame(read.csv(file = train_data$datapath,header = T))",55],["test_data <- as.data.frame(read.csv(file = test_data$datapath,header = T))",55],["fm_train_dna <- as.matrix(read.table('../data/fm_train_dna.dat'))",59],["dat <- read.table(text=",64],["# read data",67],["data <- read.csv(\"outcome-of-care-measures.csv\", colClasses = \"character\")",69],["dat <- read.csv(text=input$text, sep=\"\\t\")",79],["# list the user inputs the tab depends on (easier to read the code)",94],["fm_test_real <- t(as.matrix(read.table('../data/fm_test_real.dat')))",110]],"useCount":9086},{"word":"readLines","context":[["lines <- readLines(outfile, warn = FALSE)",96],["readLines(\"stdin\",n = 1)",92],["inputdat <- readLines(paste0(sMarxanDir,\"/input.dat\"))",69],["sLine <- readLines(con=infile,n=1)",65],["out <- readLines(outfile, warn = FALSE)",64],["lines <- readLines(f, warn = FALSE)",63],["if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))",60],["inputdat <- readLines(paste(sMarxanDir,\"/input.dat\",sep=\"\"))",57],["lines <- readLines(file, warn = FALSE)",145],["lines <- readLines(file)",112]],"useCount":3871},{"word":"record","context":[["## record in the log what options were used",32],["record, rescale, xpinch, ypinch,",35],["record = system.time(gcFirst = T,",119],["\"      --timings         record timings for examples\",",32],["#record the best models in each bootstrap sample",32],["## record some of the options used.",32],["## now check lengths, as tarballs can only record up to 100 bytes",30],["## predicate so that we record the name of the unload function in",30],["## If an installed package has a namespace, we need to record the S3",34],["## predicate so that we record the name of the startup function in",30]],"useCount":2955},{"word":"records","context":[["} # create.all.Pathology.records",36],["# define the lon/lat of the observation records -- 2 column matrix of longitude and latitude",39],["good.records.found <- good.records.found +1",73],["good.records.found <- good.records.found +1",73],["result[1:good.records.found]",186],["good.records.found <- 0",191],["good.records.found <- good.records.found + 1",303],["good.records.found <- good.records.found + 1",303],["result[[good.records.found]] <- new.event",376],["## Handling records with quotes in names",26]],"useCount":2215},{"word":"recursive","context":[["recursive=recursive),",103],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["full.names = TRUE, recursive = TRUE)",238],["unlink(build_dir, recursive = TRUE)",204],["recursive = TRUE))",180],["fullNames=FALSE, recursive=TRUE) {",136],["recursive=recursive),",103],["recursive = TRUE)",98],["fullNames=fullNames, recursive=recursive)",90],["fullNames=fullNames, recursive=recursive)",90]],"useCount":7300},{"word":"red","context":[["geom_point(size = 3, color=\"red\") +",289],["colours2=c( \"week0_EEDheto\"=\"red\",  \"week0_EEDko\"=\"red4\",   \"week4_EEDheto\"=\"skyblue\",  \"week4_EEDko\"=\"blue\" ),",94],["col=\"red\")",89],["colours2=c(\"red\",  \"red4\",   \"blue\",    \"blue4\" ),",72],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["col = \"red\",",82],["col = \"red\")",70],["lty=c(1, 1), col=c(\"red\", \"green4\"), bty=\"n\")",65],["lty=1, lcol=\"red\")",65],["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65]],"useCount":3568},{"word":"references","context":[["#' @references See citation(\"microbiome\")",51],["references = new('references'),",34],["slot(.Object, 'references') <-",34],["as(references, 'references')",34],["as(references, 'references')",34],["#' @references Carl Bacon, \\emph{Practical portfolio performance measurement",37],["#' @references Basel Committee: The standardised approach for measuring counterparty credit risk exposures",39],["##' @references",70],["#'@references",133],["#' @references",1938]],"useCount":3226},{"word":"remove","context":[["if (exists(\"C_U\")) remove(\"C_U\")",76],["if (exists(\"A_A\")) remove(\"A_A\")",76],["return(remove(list = name, envir = .classTable))",52],["\"Please remove them from your package.\\n\")",60],["if (exists(\"A_U\")) remove(\"A_U\")",76],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46],["if (exists(\"C_A\")) remove(\"C_A\")",76],["remove(\"a\", \"b\")",87],["file.remove(list.files(pattern=\".png\"))",88],["\"\\nPlease remove them from your package.\\n\")",91]],"useCount":4979},{"word":"rep","context":[["n <- rep.int(1, nobs)",77],["parameter <- rep(n,nrow(level))",101],["rep(\"week4_EEDheto\", numOfColumns1),    rep(\"week4_EEDko\", numOfColumns1)   ),",76],["rep(\"week4_EEDheto\", numOfColumns1),    rep(\"week4_EEDko\", numOfColumns1)   ),",76],["phi       = rep(1, 6),",67],["sampleType2=c( rep(\"week0_EEDheto\", numOfColumns1),    rep(\"week0_EEDko\", numOfColumns1),",76],["sampleType2=c( rep(\"banding\", numOfColumns1),    rep(\"sham\", numOfColumns1)  ),",68],["sampleType2=c( rep(\"banding\", numOfColumns1),    rep(\"sham\", numOfColumns1)  ),",68],["sampleType2=c( rep(\"week0_EEDheto\", numOfColumns1),    rep(\"week0_EEDko\", numOfColumns1),",76],["grep <- rep(grep, length.out=depth(gPath))",90]],"useCount":18258},{"word":"replace","context":[["replace = function(from, value) {",60],["train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)",67],["sample_pos = sample(pos_obs,size=sample.num,replace=T)",53],["sample_neg = sample(neg_obs,size=sample.num,replace=T)",53],["ds1 <- plyr::rename(x=ds1, replace = c(",51],["body(replace, envir = packageEnv) <-",39],["#' @param pattern The pattern to replace.",36],["# Here I first replace % (i.e., misValperc) of the data with missing data (i.e., NA)",35],["ds$id <- 1:nrow(ds) # some ids values might be identical, replace",32],["# There seems to be no way to update an object, only replace it",31]],"useCount":2123},{"word":"report","context":[["n.report     <- 10",57],["return(report)",93],["if (sum(rdas$size) < 1e5 || # we don't report unless we get a 1e5 reduction",66],["stop(\"invalid value for report\")",51],["n.report = 500)",50],["if (!inherits(report, \"Report\")) {",50],["verbose = verbose, n.report = n.report, amcmc = amcmc)",49],["verbose = verbose, n.report = n.report, amcmc = amcmc)",49],["## this will report '* DONE (foo)' if it works, which",48],["rnb.add.paragraph(report, txt)",47]],"useCount":2090},{"word":"repos","context":[["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["install.packages(pkg_dir,type=\"source\",repos=NULL)",72],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["repos <- NULL",50],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["options(repos = repos)",46],["contriburl = contrib.url(repos, type),",107],["repos <- getOption(\"repos\")",117],["repos <- getOption(\"repos\")",117],["options(repos = repos)",46]],"useCount":3483},{"word":"representation","context":[["setClass(\"classPrototypeDef\", representation(object = \"ANY\", slots = \"character\", dataPart = \"logical\"),",27],["representation=representation(",141],["representation = representation(",172],["representation = representation(",172],["representation(",267],["representation=representation(",141],["representation = representation(),",30],["## either a basic class or something with the same representation",27],["representation = representation(),",30],["setClass(\"A\", representation(aa = \"integer\"))",27]],"useCount":2424},{"word":"require","context":[["require(RColorBrewer)",301],["require(data.table)",464],["require(dplyr)",535],["require(OpenMx)",577],["require(plyr)",775],["require(ggplot2)",1390],["require(reshape2)",372],["require(scales)",302],["require(grid)",439],["require(MASS)",310]],"useCount":18115},{"word":"required","context":[["stop(\"The Specs argument is required.\", file=LogFile,",88],["# check required information",86],["stop(\"Variable longitude is required in Data.\")",60],["# Define server logic required to draw a histogram",93],["stop(\"Variable latitude is required in Data.\")",60],["if(missing(x)) stop(\"The x argument is required.\")",68],["# Load required packages",75],["# Load the required libraries",138],["stop(\"- name of the GH5 file is required\")",65],["## variables) required to compute the correlation between",95]],"useCount":4071},{"word":"res","context":[["res <- system(cmd)",198],["res <- list()",288],["res[[1]]$message)) > 0)",321],["return(res)",2592],["res <- try(",268],["print(res)",189],["invisible(res)",185],["res <- NULL",184],["res",3478],["if (inherits(res, \"try-error\"))",269]],"useCount":30060},{"word":"reshape2","context":[["require(\"reshape2\")",45],["#' @import reshape2",45],["#'@import reshape2",48],["library('reshape2')",41],["library(reshape2, quietly = TRUE)",34],["install.packages(\"reshape2\")",47],["#' @importFrom reshape2 melt",66],["library(\"reshape2\")",134],["require(reshape2)",372],["library(reshape2)",1774]],"useCount":2874},{"word":"residuals","context":[["res <- residuals(lm.model$lm.fit)",30],["# residuals",33],["\"residuals\", \"effects\", \"rank\", \"fitted.values\", \"assign\", \"qr\",",33],["ans$residuals <- r",34],["#' @param mu.link object for which the extraction of model residuals is meaningful.",36],["return(list(coefficients = numeric(), residuals = y,",30],["n <- length(fit$residuals)",36],["r <- z$residuals",58],["r <- object$residuals",52],["resid <- as.matrix(object$residuals)",42]],"useCount":2433},{"word":"response","context":[["return(response)",100],["response=1 #1:1000 imbalance",80],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["sen_ix = which(as.character(curr_info$response)==\"sensitive\")",74],["insen_ix = which(as.character(curr_info$response)==\"insensitive\")",74],["#print(.self$formatResponse(response))",282],["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["##' @param alwaysRetry Whether to always retry even when no response is",498],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["Log.info(\"Converting the response column to a factor...\")",63]],"useCount":6746},{"word":"result","context":[["deleters <- which(unlist(lapply(result, is.null)))",187],["result <- result[-deleters]",189],["result <- result[-deleters]",189],["result <- list()",336],["result[[good.records.found]] <- new.event",376],["return (result)",429],["result <- character()",215],["result <- NULL",296],["return(result)",2964],["result",2535]],"useCount":21308},{"word":"resultLog","context":[["resultLog(Log, \"SKIPPED\")",173],["if (!do_examples) resultLog(Log, \"SKIPPED\")",32],["resultLog(Log, \"NONE\")",32],["else resultLog(Log, \"OK\")",52],["resultLog(Log, \"ERROR\")",76],["resultLog(Log, \"EXISTS but not correct format\")",82],["} else resultLog(Log, \"OK\")",1491],["if (!any) resultLog(Log, \"OK\")",402],["resultLog(Log, \"OK\")",326],["resultLog(Log, \"NO\")",96]],"useCount":2950},{"word":"results","context":[["## output results in tables to pdf",190],["return(results)",842],["## combining results",158],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["### Save results",102],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["# Compare OpenMx results to Mx results",98],["results <- list()",269],["if ( ! .shouldContinue(callback(results)))",273],["results",282]],"useCount":11041},{"word":"ret","context":[["ret = base.path2",176],["ret = \"\"",184],["ret",991],["return(ret)",1158],["result <- createArray(ret)",176],["ret = paste0(base.path1,\"/\")",158],["ret[sapply(ret, is.null)] <- NULL",67],["if (! ret$success)",71],["ret <- list()",146],["return (ret)",86]],"useCount":5606},{"word":"return","context":[["return()",4703],["return(NULL)",5221],["return(out)",3387],["return(result)",2964],["return(invisible())",1209],["return(FALSE)",2961],["return(x)",2931],["return(res)",2592],["return(TRUE)",2383],["return(data)",2047]],"useCount":110601},{"word":"rgl","context":[["rm(offset); rgl.clear(); rgl.viewpoint(theta=45, phi=30, fov=60, zoom=1)",26],["#library(rgl)",32],["vertices <- rgl.attrib(id, \"vertices\")",36],["options(rgl.useNULL=TRUE)",37],["require(rgl)",47],["rgl.close()",55],["rm(offset); rgl.clear(); rgl.viewpoint(theta=45, phi=30, fov=60, zoom=1)",26],["library(rgl)",201],["library(\"rgl\")",1720],["rgl.open(); offset <- 50; par3d(windowRect=c(offset, offset, 640+offset, 640+offset))",25]],"useCount":2440},{"word":"right","context":[["#  All right reserved.",120],["legend.position=\"right\",",207],["if (oneSided == \"right\") {",302],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["layout.widths = list(left.padding = 0, right.padding = 0),",76],["right = normalize(right)",40],["Log.info(\"Checking left and right: \")",46],["oneSided <- \"right\"",55],["} else if (oneSided == \"right\") {",83],["# Are we in the right universe?",64]],"useCount":4807},{"word":"rm","context":[["rm(x)",251],["na.rm = TRUE)",197],["rm(tmp)",161],["rm(list=ls(all=TRUE))",377],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["system(paste(\"rm -rf\",cran_pkg_unuseful,sep=\" \"))",139],["rm(tmp.gt)",592],["rm(list = ls())",1170],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["rm(list=ls())",2467]],"useCount":21043},{"word":"rnorm","context":[["y <- rnorm(10)",116],["x <- rnorm(10)",85],["x <- rnorm(100)",99],["epsilon.rep <- matrix(rnorm(N*S), N, S)",30],["y <- rnorm(100)",32],["y <- x + rnorm(10)",33],["x <- rnorm(n)",36],["UMatrix <- matrix(rnorm(numberSubjects*numberIndicators, mean=0, sd=1), numberSubjects, numberIndicators)",49],["y <- rnorm(n)",50],["rnorm(4)",57]],"useCount":2459},{"word":"root","context":[["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["root.state = root.state,",127],["root <- xmlRoot(doc)",56],["stationary.root = TRUE,",95],["data$ccd <- XML::xmlName(root)",608],["root <- XML::xmlRoot(doc)",312],["value.root = NA,",53],["adj.root = 0,",53],["value.root = 10^(-2),",50],["root.state = root.state,",127]],"useCount":3852},{"word":"round","context":[["dil = round(chk.dil *",506],["round(Mo0[[\"LP\"]],1), \"\\n\", sep=\"\",",227],["dil = round(",1864],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["\"Current:\", round(Mo0[[\"parm\"]][j]),",129],["\"Proposed:\", round(prop[j],5),",102],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53]],"useCount":9002},{"word":"row","context":[["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128],["anova.rows[[length(anova.rows) + 1]] <- row",129],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["row.names=FALSE,",211],["row.names = FALSE,",144],["row.names = FALSE)",185],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["row.names=FALSE)",515],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190]],"useCount":22195},{"word":"rownames","context":[["rownames(cv.mat) = obs",56],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["tmp.table <- tableGrob(chk.all.pop, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.accum, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.bac, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.RAOCUT.pop, show.rownames = FALSE)",92],["rownames(dfCluster) = dfCluster$gene",70],["rownames(performances)=c(\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\");",68],["rownames(res) <- NULL",66],["#rownames(m) = rownames(mCounts)",51]],"useCount":7250},{"word":"rows","context":[["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["rows <- attr(x, \"row.names\")",97],["\"replacement has %d rows, data has %d\"),",108],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112],["anova.rows[[length(anova.rows) + 1]] <- row",129],["anova.rows[[length(anova.rows) + 1]] <- row",129],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["# nrow: Number of rows needed, calculated from # of cols",192]],"useCount":9847},{"word":"rs","context":[[".rs.makeCompletions(token = token,",114],["inDirectory = .rs.getProjectDirectory(),",63],["result <- .rs.makeCompletions(",72],["completions <- .rs.appendCompletions(",74],["rs <- dbSendQuery(con,query)",83],["return(.rs.makeCompletions(token = token,",46],["result <- .rs.emptyCompletions()",45],["if(length(rs) == 0){",44],["dbClearResult(rs)",97],["return(.rs.emptyCompletions())",113]],"useCount":3148},{"word":"run","context":[["## Not run:",74],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["# To run a while loop to generate different plots",108],["## FIXME: this does not need to be run in another process",128],["if (perform == \"run\") {",190],["## End(Not run)",73],["new.runno <- gsub(\"run\", \"\", model)",85],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["# run",82],["run = function() {",84]],"useCount":5976},{"word":"runif","context":[["runif(100); print(runif(4))",57],["p.sid <- h2o.runif(pros.hex)",60],["s <- h2o.runif(data.hex)    # Useful when number of rows too large for R to handle",68],["log.u <- log(runif(1))",133],["Log.info(paste0(\"runif seed: \",seed))",69],["r <- h2o.runif(cars,seed=seed)",70],["runif(100); print(runif(4))",57],["u <- log(runif(1)) < (Mo1[[\"LP\"]] - Mo0[[\"LP\"]])",46],["c.sid <- h2o.runif(cars.hex)",51],["runif(1)",52]],"useCount":2483},{"word":"runit","context":[["source('../h2o-runit.R')",1120],["source(\"../../h2o-runit.R\")",11],["hdfs_iris_dir  = \"/datasets/runit/iris_test_train\"",15],["hdfs_cross_file = \"/datasets/runit/BigCross.data\"",24],["hdfs_iris_file = \"/datasets/runit/iris_wheader.csv\"",28],["source(\"../h2o-runit.R\")",52],["source('../h2o-runit-hadoop.R')",121],["source('../../h2o-runit.R')",867]],"useCount":2238},{"word":"running","context":[["warning('Please Run the Command \\'get_token()\\' and then retry running command. \\n')",34],["# Whenever swirl is running, its callback is at the top of its call stack.",138],["## R developers can use this to debug the function by running it",78],["checkingLog(Log, \"running R code from vignettes\")",64],["paste(\"when running code in\", sQuote(basename(file))),",60],["# Check if we are running inside the H2O network by seeing if we can touch",49],["# This is useful if your cluster is running in EC2.",39],["# Pass the variables to the cluster for running the function",38],["#' # Try to connect to a local H2O instance that is already running.",37],["warning(sprintf(\"running msgfmt on %s failed\", basename(f)),",35]],"useCount":2167},{"word":"rval","context":[["n=n, rval=double(n), NAOK=TRUE, package=\"gsw\")$rval",102],["n=n, rval=double(n), NAOK=TRUE, package=\"gsw\")$rval",102],["return(rval)",251],["rval",604],[".citation(rval)",38],["dim(rval) <- dim(SA)",85],["rval <- NULL",40],["if(length(rval) == 1L) rval <- rval[[1L]]",38],["attr(rval, \"mheader\") <- paste(mheader, collapse = \"\\n\")",38],["if(length(rval) == 1L) rval <- rval[[1L]]",38]],"useCount":3346},{"word":"s","context":[["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["#' @section Topic(s):",347],["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["s",281],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' The semantic reference(s) for this data:",337]],"useCount":62308},{"word":"sMarxanDir","context":[["thetable <- read.csv(paste0(sMarxanDir,\"/output/output_sum.csv\"))",36],["inputdat[iOUTPUTDIRparam] <- paste0(\"OUTPUTDIR \",sMarxanDir,\"/output\")",46],["inputdat[iINPUTDIRparam] <- paste0(\"INPUTDIR \",sMarxanDir,\"/input\")",46],["inputdat <- readLines(paste(sMarxanDir,\"/input.dat\",sep=\"\"))",57],["sMarxanDir <<- \"\"",60],["inputdat <- readLines(paste0(sMarxanDir,\"/input.dat\"))",69],["setwd(paste0(sMarxanDir,\"/core\",i))",40],["sAppendSummary <<- paste0(sMarxanDir,\"/output/output_Targsummary_BLM\",ruserblm,\"_SPF\",ruserspf,\".csv\")",45],["sAppendSummary <<- paste0(sMarxanDir,\"/output/output_BLMsummary_SPF\",ruserspf,\"_Targ\",rusertarg,\".csv\")",45],["sAppendSummary <<- paste0(sMarxanDir,\"/output/output_SPFsummary_BLM\",ruserblm,\"_Targ\",rusertarg,\".csv\")",45]],"useCount":2348},{"word":"sQuote","context":[["sQuote(basename(bad_vignettes))),",96],["sQuote(package)),",119],["sQuote(name)),",103],["sQuote(f),",105],["sQuote(package),",109],["sQuote(what),",146],["sQuote(xx))",147],["sQuote(xx)), msg)",160],["sQuote(getPackageName(where))),",166],["sQuote(f)),",354]],"useCount":15233},{"word":"same","context":[["\"formal arguments in method and generic do not appear in the same order\",",44],["# Just need to test that output is the same as if the GTuples were GRanges",67],["warning(gettextf(\"Not all arguments are of the same length, the following need to be recycled: %s\",",48],["stop(\"'x' and 'y' must be same length\")",50],["## Run the same test with compression",69],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["stop(\"'x' and 'y' and 'id.lengths' must specify same overall length\")",50],["stop(\"'x' and 'y' and 'id' must all be same length\")",50],["stop(\"'qr' and 'y' must have the same number of rows\")",56],["stop(\"'x' and 'y' must have the same length\")",57]],"useCount":4846},{"word":"sample","context":[["train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)",67],["# dsL <- dsL[dsL$id %in% sample(unique(dsL$id), 100), ]",90],["d <- dsL[dsL$id %in% sample(unique(dsL$id), sample_size), ]",86],["cr <- sample(creds, 1)",69],["# If after all the signal in the model is not found in the sample",56],["seed <- sample(1:1000000, 1)",65],["# Scroll the sample features",56],["# Set the presence of the signal in the sample to TRUE",56],["# Set the default presence of the signal in the sample to FALSE",56],["dplyr::filter(id %in% sample(unique(id),10)) %>%",57]],"useCount":6002},{"word":"samples","context":[["# To filter out samples based on donor information",88],["# pca on samples i.e. covariance matrix of m",48],["#this function only generates BS samples",48],["BarcodeSample <- sample.tbl[match(samples, sample.tbl[,1]), 2]",50],["cov.model = cov.model, n.samples = iters,",50],["post.prob.log <- t(yp.sp.log$p.y.predictive.samples)",54],["#input data: row as genes and col as samples",66],["#output data:row as genes and col as samples",66],["#bootstrap samples#",78],["cat(\"num. phenotype samples =\",sum(!is.na(r)),\"\\n\")",93]],"useCount":2479},{"word":"sapply","context":[["ret[sapply(ret, is.null)] <- NULL",67],["## (Note that as.character(sapply(exprs, \"[[\", 1L)) does not do",66],["sapply(",115],["any(sapply(c(...), function(expr)omnitest(expr)))",142],["ind <- as.logical(sapply(exprs,",166],["ind <- as.logical(sapply(db_usages,",98],["n = (which(sapply(lSigGenes.adj, length) >= 10)) + 1",69],["(cl <- sapply(AB, class))",70],["leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")",84],["tmp<- na.omit(sapply(argv,function(arg)",93]],"useCount":10124},{"word":"save","context":[["q(save = \"no\")",48],["save(BC2116_Global_Summary, file=\"Summary.RData\")",46],["if(save==TRUE){dev.off()}",49],["d1$save(paste(fileName,\".html\",sep=\"\"), cdn = TRUE)",56],["parameters.to.save = model_parameters,",56],["save <- startCapture()",60],["savefile <- paste(outfile, \"save\", sep = \".\" )",86],["# save results",45],["quit(save=\"no\", status=1)",133],["q(save=\"no\")",104]],"useCount":4998},{"word":"sc","context":[["#' rdd <- parallelize(sc, 1:10)",89],["rdd <- textFile(sc, fileName)",33],["sc <- diag(1/sqrt(Psi))",38],["Sstar <- sc %*% S %*% sc",38],["Sstar <- sc %*% S %*% sc",38],["#' rdd <- parallelize(sc, 1:10, 2L)",40],["sc <- sparkR.init()",48],["#' sc <- sparkR.init()",595],["#' sqlContext <- sparkRSQL.init(sc)",214],["# sc <- sparkR.init()",154]],"useCount":2600},{"word":"scale","context":[["ma.scale=c(-1.4,2.3,-2) # scaling of the MA filter",110],["# re-scale ews statistic",193],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["scale <- if (symm && missing(scale))",44],["if (scale == \"row\") {",47],["else match.arg(scale)",44],["pr.out = prcomp(t(m), scale=T)",51],["if(scale > 0) paste(\"\\nscale: \", format(scale), \"\\n\"))",60],["if(scale > 0) paste(\"\\nscale: \", format(scale), \"\\n\"))",60]],"useCount":6867},{"word":"scales","context":[["requireNamespace(\"scales\")",31],["library(scales)",955],["require(scales)",302],["scales = list(arrows = FALSE),",92],["scales=list(rot=45),layout=c(2,1))",63],["scales=list(arrows=F, col='black', tick.number=N_TICKS, axs='i'),",56],["library(\"scales\")",51],["beta.orig[j] <- beta[j]/scales[j]   # rescale",40],["scale_y_continuous(labels = scales::percent) +",25],["suppressPackageStartupMessages(library (scales))",25]],"useCount":2247},{"word":"scope","context":[["scope = scope,",40],["scope <- attr(terms(update.formula(object, scope)), \"term.labels\")",39],["if(!length(scope))",39],["scope = scope,",40],["function rChartsCtrl($scope){",41],["$scope.$watch('year', function(newYear){",41],["scope <- match.arg(scope)",45],["scope <- match.arg(scope)",45],["if(!is.character(scope))",78],["ns <- length(scope)",79]],"useCount":2161},{"word":"score","context":[["return(score)",80],["curr_mat[ score_mat>=cut_vec[i] ] = 1 #large score",31],["# Select the columns Patient ID [1], MMSE [3]  (Mini-Mental State Exam score, a cognitive assessment measure),",36],["# write lod score of entire model",35],["class_1 = target_class # large score",34],["class_n = class_1 #large score",31],["class_p = class_2 #small score",31],["if (score[r,w]>=1.5 && score[r,w]<2) {",30],["if (score[r,w]<1.5) {",30],["curr_mat[ score_mat< cut_vec[i] ] = 0 #small score",31]],"useCount":2155},{"word":"sd","context":[["sd    = rep(0L, Nn),",32],["sd   = sd     (xx[[col]], na.rm=na.rm)",38],["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["signif(sd(x),digits=4),",55],["UMatrix <- matrix(rnorm(numberSubjects*numberIndicators, mean=0, sd=1), numberSubjects, numberIndicators)",49],["sd   = sd     (xx[[col]], na.rm=na.rm)",38],["# N, mean, and sd",39],["kurt <- m4/(sd(x, na.rm=TRUE)^4)-3",40],["skew <- m3/(sd(x, na.rm=TRUE)^3)",40],["sd(x)",44]],"useCount":3035},{"word":"se","context":[["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["(test <- test[c('est', 'se', \"est_se\", 'pval')])",102],["(test <- test[ ,c(\"est\", \"se\",\"est_se\", \"pval\")])",86],["predict(fit, data.frame(x=x), se=TRUE)",76],["predict(fit, type=\"terms\", se=TRUE)",76],["datac$ci <- datac$se * ciMult",67],["if(se) {",56],["geom_smooth(method=lm, se=F) +",42],["dt2[, uui := mean + 1.96 * se]",40],["dt2[, lui := mean - 1.96 * se]",40]],"useCount":3524},{"word":"search","context":[["## only 'Depends' are guaranteed to be on the search path, but",33],["s <- search()",73],["Log.info(lapply(names(grid_space), function(n) paste0(\"The expected \",n,\" search space: \", expected_grid_space[n])))",47],["sp <- search()",54],["\"search: \",   session$clientData$url_search,   \"\\n\",",51],["Log.info(lapply(names(grid_space), function(n) paste0(\"The \",n,\" search space: \", grid_space[n])))",49],["Log.info(lapply(names(grid_space), function(n) paste0(\"The provided \",n,\" search space: \", grid_space[n])))",47],["Log.info(lapply(names(new_grid_space), function(n) paste0(\"The new \",n,\" search space: \", new_grid_space[n])))",40],["attach(compat, name=\"compat\", pos = length(search()),",33],["if (!pname %in% search())",33]],"useCount":2583},{"word":"season","context":[["chk.season.2.RAOCUT.elk",48],["chk.months.season <- rbind(data.frame(month = chk.Season.1.Months, season = 1),",46],["c(season == 1 & location == \"forest\")))",46],["data.frame(season = 1,",46],["chk.months.season <- merge(chk.months.season, chk.months)",46],["## season 2",152],["c(season == 2 & location == \"pasture\")))",46],["c(season == 2 & location == \"RAOCUT\")))",46],["chk.season.1.RAOCUT.elk",48],["## season 1",152]],"useCount":4714},{"word":"section","context":[["gettextf(\"See section %s in '%s'.\",",60],["#' @section Topic(s):",347],["wrapLog(gettextf(\"See section %s in '%s'.\",",60],["#' @section References:",61],["#' @section Requirements:",62],["#' @section Sources:",76],["#' @section Revisions:",76],["#' @section Details:",79],["#'@section Slots:",90],["\"See section 'Package structure'\",",189]],"useCount":2967},{"word":"see","context":[["# for full details see the file COPYING",173],["## see if we can get rownames from the response",33],["## '-deprecated' (see e.g. base-deprecated.Rd).",34],["## Transform <<see below>> style markup so that we can catch and",34],["txt <- gsub(\"(<<?see below>>?)\", \"`\\\\1`\", txt)",34],["## Now see what we can get as binary packages.",35],["# see if we need to use the Jekyll render in knitr",38],["# **** this is now handled differently; see \"Improved subset ...\"",44],["errmsg(\"'configure' exists but is not executable -- see the 'R Installation and Administration Manual'\")",48],["## We should really determine the name g dispatches for, see",68]],"useCount":2854},{"word":"seealso","context":[["##seealso<<",38],["#' @seealso \\code{\\link{predict.H2OModel}} for prediction.",38],["#' @seealso \\code{\\link{RBM}}",47],["# \\seealso{",47],["##' @seealso",51],["#' @seealso \\code{\\link{h2o.month}}",54],["#'@seealso",92],["##' @seealso \\code{\\link{dxHTTPRequest}}",498],["#' @seealso",617],["#' @seealso \\href{../doc/tmap-nutshell.html}{\\code{vignette(\"tmap-nutshell\")}}",36]],"useCount":2534},{"word":"seed","context":[["set.seed(1234)",583],["set.seed(mcmc.seed)",203],["set.seed(mcmc.seed)",203],["if (!is.null(seed)) {",213],["set.seed(0)",311],["set.seed(42)",627],["set.seed(seed)",860],["set.seed(seed)",860],["set.seed(123)",971],["set.seed(1)",1932]],"useCount":16525},{"word":"select","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["dplyr::select(cluster.id)",145],["select(",110],["select",108],["qry<-\"select",73],["#' \\cr \\code{\\link[dplyr]{select}}, \\code{\\link[dplyr]{slice}}",54],[".tkigraph.error(\"Please select exactly one graph\")",52],["validate(       need(!is.null(df), \"Please select a data set\"))",52],["##select differential genes across cancer types##",49],["dplyr::select(study_name, name, label_short,categories)",43]],"useCount":3917},{"word":"selected","context":[["selected = NULL)",74],["selected = 1),",53],["\"opened\", \"selected\", \"disabled\", \"icon\")),",212],["loaded = TRUE, opened = FALSE, selected = FALSE,",163],["selected = FALSE, disabled = FALSE, icon = \"fa fa-\"), .Names = c(\"loaded\",",129],["selected.table      <- c(\"2\")",126],["gnos <- .tkigraph.get.selected()",66],["if(anyNA(cols)) stop(\"undefined columns selected\")",64],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",63],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(",59]],"useCount":2575},{"word":"self","context":[["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["str_data <- .self$makeData(.self$formatJson(list_param))",327],["return(.self)",71],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],[".self$incMessageId()",369],["self",92],["return(invisible(.self))",187],["#print(.self$formatResponse(response))",282],["str_data <- .self$makeData(.self$formatJson(list_param))",327]],"useCount":3876},{"word":"sep","context":[["sep=\"\\t\",",199],["sep = \"\")",816],["sep = \"\\n\")",542],["sep=\"\")",430],["cat( y, sep = \",\\n\" )",427],["\"\\n\", sep = \"\")",280],["sep = \"\"),",255],["sep = \"\"))",231],["round(Mo0[[\"LP\"]],1), \"\\n\", sep=\"\",",227],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204]],"useCount":36833},{"word":"seq","context":[["for (k in seq(from=1, to=nAssets)) {",177],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["for (e in seq(from=1, to=nExp)) {",212],["for (i in seq(from=1, to=nAssets)) {",169],["for (k in seq(from=0, to=nExp-1)) {",148],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["for (i in seq(from=1, to=nAssets*nRuns, by=nAssets)) {",76],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["probs = seq( 0, 1, 0.01 )",68],["at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",66]],"useCount":9295},{"word":"seq_along","context":[["for (i in seq_along(vigns$docs)) {",83],["for (i in seq_along(tr2)) {",278],["for(i in seq_along(x)) {",84],["for (i in seq_along(x)) {",87],["for(i in seq_along(methods)) {",88],["for(i in seq_along(classes)) {",90],["for(i in seq_along(exprs)) find_bad_exprs(exprs[[i]])",106],["for(i in seq_along(e)) Recall(e[[i]])",119],["for (j in seq_along(ref2)) {",139],["for(i in seq_along(ext)) {",156]],"useCount":8781},{"word":"seq_len","context":[["for (i in seq_len(n)) {",80],["for(i in seq_len(n)) {",156],["tspan     = seq_len(10) - 1,",60],["for(i in seq_len(nrow(update))) {",57],["tspan   = seq_len(10) - 1,",48],["iseq <- seq_len(nrows)[i]",45],["blocks[-seq_len(i)] )",44],["i1 <- -seq_len(lag)",39],["for (j in seq_len(ydim)) {",36],["else for (i in seq_len(differences))",35]],"useCount":3689},{"word":"server","context":[["##' received from the API server",498],["##' function which makes POST HTTP requests to the API server.",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["shinyApp(ui = ui, server = server)",124],["shinyApp(ui = ui, server = server)",124],["server <- function(input, output) {",122],["# This is the server logic for a Shiny web application.",105],["# Define server logic required to draw a histogram",93],["sourceDialect = \"sql server\",",90],["# server.R",79]],"useCount":3599},{"word":"session","context":[["shinyServer(function(input, output, session, clientData) {",52],["\"search: \",   session$clientData$url_search,   \"\\n\",",51],["updateSelectInput(session = session,",57],["shinyServer(function(input, output, session) {",546],["query <- parseQueryString(session$clientData$url_search)",113],["server <- function(input, output, session) {",70],["progress <- shiny::Progress$new(session)",68],["function(input, output, session) {",58],["updateTextInput(session,",58],["updateSelectInput(session = session,",57]],"useCount":3280},{"word":"set","context":[["set.seed(42)",627],["set.seed(10)",168],["set.seed(476); ptm <- proc.time()",200],["set.seed(mcmc.seed)",203],["set.seed(0)",311],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["set.seed(1234)",583],["set.seed(seed)",860],["set.seed(123)",971],["set.seed(1)",1932]],"useCount":21689},{"word":"setClass","context":[["## Users should call setClass instead of this function.",22],["setClass(",704],["} else if(Call %in% c(\"setClass\", \"setMethod\")) {",33],["setClass(\"A\", representation(aa = \"integer\"))",27],["setClass(\"classPrototypeDef\", representation(object = \"ANY\", slots = \"character\", dataPart = \"logical\"),",27],["## at setClass() time, so prototype slot in classRepresentation can have that class",27],["setClass(\"MethodSelectionReport\",",26],["setClass(\".Other\", representation(label = \"character\"),",26],["setClass(\"classGeneratorFunction\",",25],["else if(is(try(setClass(Class, oldDef, where=where)), \"try-error\"))",22]],"useCount":2608},{"word":"setMethod","context":[["setMethod(f, signature, NULL, where = where)",43],["setMethod(what, signature, method, where = where)",36],["} else if(Call %in% c(\"setClass\", \"setMethod\")) {",33],["## For each generic, `setMethod' will be called to define a method that throws an error,",27],["setMethod(f, signature, method, where = where)",27],["setMethod(\"[\",",44],["setMethod(\"show\",",48],["#' @importFrom methods setMethod",86],["setMethod(\"initialize\",",107],["setMethod(",1937]],"useCount":5320},{"word":"setdiff","context":[["objects_in_code <- setdiff(objects_in_code, ns_S3_methods)",30],["class_2 = setdiff( unique(class), target_class )",47],["myX = setdiff(names(data1.hex), myY)",49],["#' \\cr \\code{\\link[dplyr]{intersect}}, \\code{\\link[dplyr]{union}}, \\code{\\link[dplyr]{setdiff}}",54],["methods <- setdiff(methods, methods_stop_list)",60],["rs <- setdiff(rs, exc.snps)",36],["unusedSettings <- setdiff(names(settings), usedSettings)",31],["myX = setdiff(names(data.hex), myY)",88],["objects_in_ns <- setdiff(objects_in_ns, objects_in_code)",30],["reqs <- setdiff(reqs, c(imports, depends, allowed_imports))",30]],"useCount":2937},{"word":"setenv","context":[["Sys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")",78],["Sys.setenv(R_LIBS = env_path(libdir, R_LIBS))",80],["Sys.setenv(R_HOME = rhome)",86],["Sys.setenv(JAVA_HOME='/usr/java/latest/bin')",46],["Sys.setenv(\"_R_INSTALL_NO_DONE_\" = \"yes\")",48],["Sys.setenv(R_ARCH = rarch)",48],["Sys.setenv(R_DEFAULT_PACKAGES=\"\")",53],["Sys.setenv(PATH = paste(R.home(\"bin\"), oPATH,",54],["Sys.setenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\" = \"TRUE\")",64],["Sys.setenv(\"PKG_LIBS\"=\"-fopenmp\")",78]],"useCount":2119},{"word":"setwd","context":[["setwd(dir)",160],["setwd(cwd)",137],["setwd(path)",191],["setwd(wd)",210],["setwd(startdir)",433],["setwd(owd)",486],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["setwd(wd2)",131],["setwd(pkgoutdir)",128],["setwd(\"..\")",121]],"useCount":11048},{"word":"sgp","context":[["sgp.norm.group.preference=1),",170],["# sgp.exact.grade.progression=TRUE,",204],["sgp.panel.years.within=c('LAST_OBSERVATION', 'FIRST_OBSERVATION'),",229],["sgp.norm.group.preference=4),",129],["sgp.baseline.panel.years=c('2009', '2010', '2011', '2012', '2013'),",141],["sgp.grade.sequences=list(c('EOCT', 'EOCT'))),",144],["sgp.norm.group.preference=3),",167],["sgp.exact.grade.progression=TRUE,",1079],["sgp.grade.sequences=list(c('EOCT', 'EOCT')),",374],["sgp.norm.group.preference=2),",199]],"useCount":8519},{"word":"shQuote","context":[["\"--no-multiarch\", shQuote(pkgdir))",44],["system(paste(\"mv\", shQuote(instdir),",48],["\"-l\", shQuote(update[i, 2L]),",48],["paste(\"-f\", shQuote(makefiles), collapse = \" \")))",48],["shQuote(file.path(R.home(\"share\"), \"make\",",56],["shQuote(f), shQuote(outfile))",63],["shQuote(f), shQuote(outfile))",63],["shQuote(url),",53],["paste0(\"--build-dir=\", shQuote(build_dir)),",96],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128]],"useCount":2351},{"word":"shiny","context":[["progress <- shiny::Progress$new()",85],["library(\"shiny\")",95],["sShinyPath <<- \"/mnt/shiny/\"",74],["progress <- shiny::Progress$new(session)",68],["code('library(shiny)'),br(),",57],["# http://www.rstudio.com/shiny/",53],["library(shiny)",3258],["# http://shiny.rstudio.com",168],["require(shiny)",144],["shiny::observe({",49]],"useCount":4922},{"word":"should","context":[["## should print as",76],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["## We should really determine the name g dispatches for, see",68],["# The R codes & data files should be saved in the same directory for",41],["# should not have dm and dmcx, etc",44],["# At this point, fct should be an ordinary function or an S3 method.",51],["c(\"Compiled code should not call entry points which\",",60],["## And pick the ones which should not be there ...",63],["## We should be able to safely strip all backticks; alternatively,",66],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142]],"useCount":9405},{"word":"show","context":[["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["tmp.table <- tableGrob(chk.all.accum, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.bac, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.pop, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.RAOCUT.pop, show.rownames = FALSE)",92],["show = function() {",81],["f = \"show\",",68],["file.show(path)",63],["signif.stars = getOption(\"show.signif.stars\"), ...)",62],["file.show(outFile, delete.file = TRUE,",55]],"useCount":5639},{"word":"side","context":[["side=3,",96],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["axis(side=2,",70],["Axis(side=2)",59],["axis(side=1, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",49],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460]],"useCount":5996},{"word":"sig","context":[["power=0.8, sig.level=0.05, type=\"two.sample\",",30],["if(existsMethod(\"coerce\", sig))",52],["pkgs <- attr(sig, \"package\")",28],["pkgs[[i]] <- getClass(sig[[i]], .Force = TRUE)@package",28],[".removeCachedMethod(\"coerce<-\", sig)",52],["if(existsMethod(\"coerce<-\", sig))",52],[".removeCachedMethod(\"coerce\", sig)",52],[".cacheMethodInTable(fdef, sig, def,",42],["else if (is.null(sig.level))",32],["attr(sig, \"package\") <- pkgs",28]],"useCount":2300},{"word":"sigma","context":[["sigma = sigma,",87],["sigma = sigma,",87],["\"phi.unif\" = c(0.1, 1e4), \"sigma.sq.ig\" = c(1, 1))",58],["tuning <- list(\"phi\" = 0.1, \"sigma.sq\" = 0.2, \"beta\" = 1, \"w\" = 5)",41],["starting <- list(\"phi\" = 3/0.5, \"sigma.sq\" = 50, \"beta\" = 0, \"w\" = 0)",41],["sigma=poped.db$parameters$sigma,",37],["sigma=poped.db$parameters$sigma,",37],["#' @param sigma vector of shape parameter values",36],["#' @param sigma.link type of residual to be used.",36],["sigma = 1",41]],"useCount":3018},{"word":"signature","context":[["signature <- matchSignature(signature, fdef)",83],["signature(x = \"Column\"),",252],["signature(x = \"RDD\"),",130],["signature(x = \"DataFrame\"),",128],["if(length(signature) == 0L)",104],["signature <- matchSignature(signature, fdef)",83],["signature(X = \"RDD\", FUN = \"function\"),",76],["if(is.null(signature)) {",71],["signature=\"x\")",71],["classes <- as.character(signature)",60]],"useCount":10563},{"word":"silent","context":[["silent=!Debug[[\"DB.Model\"]])",171],["}, silent=TRUE)",133],["silent=TRUE)",185],["Mo1 <- try(Model(prop, Data), silent=TRUE)",59],["p <- try(silent=FALSE, expr= {",65],["try(dev.off(),silent=TRUE)",85],["}, silent = TRUE)",86],["silent = TRUE)",214],["if (!silent) {",130],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124]],"useCount":3049},{"word":"single","context":[["# Value must be character or single number",54],["stop(\"'conf.level' must be a single number between 0 and 1\")",84],["selectmode=\"single\",",42],["# (for data sets with single rare population: 1 = rare population of interest, 0 = all others)",38],["# Initialize the multiple-QTL-model with the results from single QTL analysis",35],["stop(\"specifying 'contriburl' or 'available' requires a single type, not type = \\\"both\\\"\")",34],["function (x, y = NULL, plot.type = c(\"multiple\", \"single\"),",32],["## given a single piece of dependency",27],["## try for a single superclass that is not virtual",27],["heading(\"Testing single file importHDFS\")",80]],"useCount":2606},{"word":"sink","context":[["if(!isSTDOUT){ sink(file); on.exit({sink(); if(closeit) close(file)}) }",42],["sink(zz)",45],["sink(type = \"message\")",47],["if(!isSTDOUT){ sink(file); on.exit({sink(); if(closeit) close(file)}) }",42],["sink(file)",60],["if(!(isSTDOUT <- file == \"\")) ## stdout() -- no sink() needed",42],["sink(NULL)",42],["if(userParameters$createLog) sink()",60],["sink(file = lod2int_file_name)",71],["sink()",1573]],"useCount":3108},{"word":"size","context":[["k.size <- env$k.size",112],["for(i in 1:d.size){",147],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["geom_point(size = 3, color=\"red\") +",289],["theme(axis.text = element_text(size = 9),",378],["# adjust starting point to accomodate rolling window size",193],["axis.text.y = element_text(size = rel(1.5), angle = 0)) +",189],["axis.text.x = element_text(size = rel(1.5), angle = 0)) +",171]],"useCount":19450},{"word":"slot","context":[["slot(.Object, 'slot_order') <-",172],["slot(.Object, 'lang') <-",172],["slot(.Object, 'schemaLocation') <-",173],["if (inherits(model, \"ExternalReference\")) model = slot(model,\"ref\")",90],["#' @slot finalizers A \\code{list} object containing environments with finalizers that",45],["## (asserted not to be needed if the subclass slot is complete)",54],["slot(value, slotNames[[i]], FALSE) <- slots[[i]]",54],["#' @param value the replacement value of the slot",56],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["if (inherits(world, \"ExternalReference\")) world = slot(world,\"ref\")",64]],"useCount":5081},{"word":"slots","context":[["properties <- ClassDef@slots",54],["slots = c(",283],["slots <- list(...); slotNames <- names(slots)",54],["slots <- list(...)",54],["toSlots <- names(toDef@slots)",54],["slots <- list(...); slotNames <- names(slots)",54],["slotNames <- names(slots)",54],["dataPartClass <- elNamed(slots, \".Data\")",61],["pnames <- prototype@slots",54],["slot(value, slotNames[[i]], FALSE) <- slots[[i]]",54]],"useCount":4364},{"word":"so","context":[["## Working directory must be set here, so the source()'s below run",48],["## so use a backdoor to suppress it.",48],["# with so many knots, adaptive is time prohibitive",57],["## so force LANGUAGE=en",64],["# check out if the file is compressed and if so unzip it",69],["## it seems that splits on spaces, so try harder.",97],["## so e.g. .tar.xz works everywhere",56],["## since so many people use 'R CMD' in Makefiles,",54],["# so raise an exception. (Note that builtins were handled earlier.)",51],["# furnished to do so, subject to the following conditions:",114]],"useCount":7039},{"word":"some","context":[["# There are some NAs in the integer columns so conversion to zero",36],["# availability of some outputs",40],["## some have had space before ,",46],["# some precalculated values for quicker pairwise evaluation",57],["## As going through the db to extract sections can take some time,",68],["## Need some heuristics now.  When does an Rd object document a",34],["## Need some heuristics now.  When does an Rd object document just",34],["# some number of the expected events will fail, often (always?) because",122],["## provide function usages for some of the internal functions.",34],["BF10post[i] <- some.bf",36]],"useCount":4590},{"word":"sort","context":[["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],[".pretty_format(sort(xx)))",180],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["res <- c(res, msg, sort(xx))",62],["function(x) paste(sort(x), collapse=\":\"))",69],["x <- sort(x)",73],["u<-sort(unique(nodecov))",82],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["objects_in_code <- sort(names(code_env))",147],[".pretty_format(sort(xx)), msg)",160]],"useCount":5510},{"word":"source","context":[["source(\"../../scripts/h2o-r-test-setup.R\")",427],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["source(\"header.R\")",372],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["source('../findNSourceUtils.R')",302],["source(\"http://bioconductor.org/biocLite.R\")",285],["source('../h2o-runit.R')",1120],["source('../../findNSourceUtils.R')",201],["source('../../h2o-runit.R')",867]],"useCount":19819},{"word":"sources","context":[["## utility for whether Rd sources are available.",33],["# for code accessed (or partly included) from other sources:",47],["strwrap(paste(sQuote(sources), collapse = \", \"),",55],["# and other sources",118],["# ---- load-sources ------------------------------------------------------------",130],["\"distribution of original sources:\\n\",",60],["## If not, we build the Rd db from the sources:",62],["## Using sources from directory @code{dir} ...",442],["if(length(sources)) {",83],["## working on the sources we (currently?) cannot deal with the",104]],"useCount":3120},{"word":"sp","context":[["#' @import sp",86],["sp <- search()",54],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["sp <- paste(rep('  ', indent), collapse=\"\")",47],["post.prob.log <- t(yp.sp.log$p.y.predictive.samples)",54],["require(sp)",131],["library(sp)",670],["ttc <- sapply(term.coefs, function(x) x[sp])",34],["#' library(sp)",45]],"useCount":2333},{"word":"space","context":[["x <- unique(sub(\"^[[:space:]]*(.*)\", \"\\\\1\" , x))",46],["seqnames <- space(bamWhich(scanBamParam))",129],["seqnames <- space(bamWhich(sb_param))",57],["pat <- \"^([^\\\\([:space:]]+)[[:space:]]*\\\\(([^\\\\)]+)\\\\).*\"",53],["pat <- \"^([^\\\\([:space:]]+)[[:space:]]*\\\\(([^\\\\)]+)\\\\).*\"",53],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["Log.info(lapply(names(grid_space), function(n) paste0(\"The \",n,\" search space: \", grid_space[n])))",49],["Log.info(lapply(names(grid_space), function(n) paste0(\"The provided \",n,\" search space: \", grid_space[n])))",47],["Log.info(lapply(names(grid_space), function(n) paste0(\"The expected \",n,\" search space: \", expected_grid_space[n])))",47]],"useCount":4509},{"word":"specified","context":[["stop(\"environment specified is not a package\")",56],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["# If eval_for_class is not specified, default to customTests$EVAL_FOR_CLASS.",44],["# If no DATA is specified either as a list, or strings",41],["# fall back on '/' if baseurl is not specified",39],["# Plant the seed only if a specified value is entered",159],["# draw the histogram with the specified number of bins",48],["##' @param ...  Not used.  Forces remaining arguments to be specified by name.",49],["## specified number of breaks",52],["#' @param fold_assignment Cross-validation fold assignment scheme, if fold_column is not specified",55]],"useCount":3604},{"word":"split","context":[["vars <- unlist(strsplit(variable, split = \":\"))",36],["# Check AUC and overall prediction error at least as good with group split than without",40],["ns <- names(split)",51],["if (! is.na(arg.split[2]) ) {",60],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["# Specify id.vars: the variables to keep but not split apart on",35],["## <FIXME split.matrix>",35],["iValue <- as.integer(unlist(strsplit(inputdat[iParam], split=\" \"))[2])",34]],"useCount":4067},{"word":"sprintf","context":[["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["stop(sprintf(ngettext(N,",144],["payload <- sprintf('{",129],["cmd <- sprintf(\"rm -fr %s\", tmpdir_name)",76],["sprintf(\"\")",66],["printLog0(Log, sprintf(\"See %s for details.\\n\",",58],["sprintf(",194],["else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53]],"useCount":14254},{"word":"sqrt","context":[["ans$sigma <- sqrt(resvar)",35],["}else{return(x[1]+(x[3]/sqrt(x[4])*(0.5*qchisq(0.975,2*x[4]+2)-x[4])))}})",27],["FUN=function(x){if (x[1]>100){return(x[1]/x[2]*exp(1.96*sqrt(1/x[1])))",27],["}else{return(x[1]+(x[3]/sqrt(x[4])*(0.5*qchisq(0.025,2*x[4])-x[4])))}})",27],["FUN=function(x){if (x[1]>100){return(x[1]/x[2]*exp(-1.96*sqrt(1/x[1])))",27],["df = df, residual.scale = sqrt(res.var))",34],["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["sc <- diag(1/sqrt(Psi))",38],["r <- sqrt(w) * r",35],["AB_se <- FigureTable$SDPercentCoverage/sqrt(FigureTable$NPercentCoverage)*100",35]],"useCount":3199},{"word":"src","context":[["singleton(tags$head(tags$script(src = \"js/md5.js\", type='text/javascript'))),",73],["owd <- setwd(\"src\")",96],["singleton(tags$head(tags$script(src = \"js/shinyBindings.js\", type='text/javascript'))),",73],["ss <- paste(\"src\", arch, sep = \"-\")",72],["sQuote(\"src/Makevars\"),",56],["## called from src/library/Makefile",56],["if (dir.exists(\"src\")) {",54],["source(\"./src/CommonFunctions.R\")",54],["file.copy(Sys.glob(\"src/*\"), ss, recursive = TRUE)",48],["## See @file{src/library/Makefile.in}.",45]],"useCount":5683},{"word":"standard","context":[["# #' ##--\tor do  help(data=index)  for the standard data sets.",82],["stop(\"character string is not in a standard unambiguous format\")",34],["#    using a standard RAM.",34],["cat(\"\\nResidual standard error:\",",36],["## this is not a `standard' model-fitting function,",38],["# 2. Extracts only the measurements on the mean and standard deviation for each measurement.",40],["## force standard handling for data frames",41],["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["# Confidence interval multiplier for standard error",63],["## need stats:: for non-standard evaluation",115]],"useCount":2316},{"word":"start","context":[["start <- Sys.time()",144],["start = Sys.time()",69],["print(\"    start mcmc predict\")",189],["print(\"    start mcmc fit\")",179],["start.time <- Sys.time()",166],["start$mday <- 1L",136],["start = 1, end = iters - burn, update = update)",127],["print(\"    start pcl fit\")",70],["start <- 1",66],["print(\"  start probit\")",62]],"useCount":10754},{"word":"stat","context":[["geom_bar(stat = \"identity\", position = \"identity\", col = \"black\") +",36],["geom_bar(stat = \"identity\") +",114],["geom_bar(stat=\"identity\") +",205],["geom_bar(stat='identity') +",54],["geom_bar(stat=\"identity\",position=dodge) +",50],["stat=\"identity\",",33],["geom_bar(position=position_dodge(), stat=\"identity\") +",43],["return(stat)",36],["'SENS' as stat,",31],["upload.cmd <- paste(\"scp \", tblname, \" samorris@hpc.stat.ncsu.edu:~/rare-binary/markdown/\",",32]],"useCount":2316},{"word":"state","context":[["rankhospital <- function(state, outcome, num = \"best\") {",80],["best <- function(state, outcome) {",104],["root.state = root.state,",127],["root.state = root.state,",127],["# Swirl's state, named e, is stored in the environment of the callback.",138],["# Get the swirl state",138],["state = structure(list(loaded = TRUE, opened = FALSE,",144],["### Log-Posterior of the proposed state",188],["## Check that state and outcome are valid",194],["stop(\"invalid state\")",166]],"useCount":5448},{"word":"statement","context":[["statement <- paste0(statement, \" provider_id = '\", provider_id,\"'\")",60],["statement <- paste0(statement, \" provider_id = '\", provider_id,\"'\")",60],["statement <- paste0(statement, \" person_id = '\", person_id,\"'\")",96],["invisible(statement)",151],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["statement <- paste0(statement, \" AND\")",1666],["statement <- paste0(statement, \" AND\")",1666],["statement <- paste0(statement, \" person_id IS NULL\")",96],["statement <- paste0(statement, \" person_id IS NULL\")",96],["statement <- paste0(statement, \" person_id = '\", person_id,\"'\")",96]],"useCount":6905},{"word":"stats","context":[["## need stats:: for non-standard evaluation",115],["m[[1L]] <- quote(stats::model.frame)",150],["#' @importFrom stats setNames",101],["linkinv = stats$linkinv,",90],["mu.eta = stats$mu.eta,",90],["linkfun = stats$linkfun,",90],["stats <- make.link(linktemp)",89],["stats <- link",82],["if (exists(\"A_U\")) boxplot.stats(A_U)",76],["library(stats)",145]],"useCount":4748},{"word":"status","context":[["if (status$error)",132],["status <- result$status",101],["status <- result$status",101],["plot[[\"status\"]] <- \"waiting\"",112],["return(status)",114],["if (status) {",130],["quit(save=\"no\", status=1)",133],["plot[[\"status\"]] <- \"complete\"",145],["q(status=1)",171],["status = \"primary\",",94]],"useCount":9839},{"word":"stdout","context":[["if(!(isSTDOUT <- file == \"\")) ## stdout() -- no sink() needed",42],["stdout = outfile, stderr = outfile)",80],["write(\"\",stdout())",71],["\"might terminate R nor write to stdout/stderr instead\",",64],["paste(out$stdout, collapse = \"\\n\"),",52],["con <- stdout()",39],["stdout = \"\", stderr = \"\", arch = arch)",34],["sink(tempfile()) ## suppress startup messages to stdout",33],["printLog0(Log, paste(c(res$stdout, \"\"),  collapse = \"\\n\"))",32],["flush(stderr()); flush(stdout())",320]],"useCount":2307},{"word":"step","context":[["step = 0.1",44],["step <- ifelse(length(by2) == 2L, as.integer(by2[1L]), 1L)",78],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["if (trace) {    # end of timing step",76],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["step = 1,",50],["os = c(\"unix\", \"windows\"), step = 1)",46],["ensemble_roc <- function(score_mat,class,target_class,step=0.0001)",38],["step.my  = step)",37]],"useCount":2924},{"word":"sticky","context":[["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["tkgrid(DimHlp.but, row=8, column=2,sticky=\"w\")",86],["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128],["tkgrid(DimHlp.but, row=3, column=2,sticky=\"w\")",119],["tkgrid(DimHlp.but, row=7, column=2,sticky=\"w\")",99],["sticky = \"w\")",108],["tkgrid(DimHlp.but, row=6, column=2,sticky=\"w\")",114]],"useCount":2108},{"word":"stop","context":[["stop(\"argument 'package' must be of length 1\")",667],["stop(msg)",580],["stop()",502],["stop(msg, call. = FALSE)",398],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(cstr)",248],["stop(",282],["stop(sErrorMsg)",320],["stop(\"you must specify 'package' or 'dir'\")",364],["stop(gettextf(\"directory '%s' does not contain R code\",",357]],"useCount":45965},{"word":"stopifnot","context":[["stopifnot(identical(pmin(x, y, na.rm=TRUE), pmin(y, x, na.rm=TRUE)))",90],["stopifnot(identical(pmax(x, y), pmax(y, x)))",90],["stopifnot(is.na(ii))",88],["stopifnot(identical(pmin(x, y), pmin(y, x)))",90],["stopifnot(identical(pmax(x, y, na.rm=TRUE), pmax(y, x, na.rm=TRUE)))",90],["stopifnot(is.rvle(rvleHandle))",118],["stopifnot(abs(res$value - val) < res$abs.error)",144],["stopifnot(",405],["stopifnot(inherits(z, \"try-error\"))",83],["stopifnot(length(n) == 1L)",82]],"useCount":12461},{"word":"str","context":[["str <- whisker.render(template, data=data)",200],["str(x)",115],["str(control)",108],["str(data)",103],["str(d)",100],["str(df)",99],["str(dat)",84],["##print(expected); ##str(expected)",60],["str(train)",52],["str.filetype <- system(sfcheck.command, intern = TRUE )",50]],"useCount":6401},{"word":"stream","context":[["chk.bac[chk.bac$location == \"stream\", \"accum.bac\"] = NA",142],["## for stream",158],["## pop in/around stream",158],["chk.stream.bac <- data.frame(",158],["## bac in/around stream",158],["chk.stream.pop <- data.frame(",158],["chk.dil * (df.output[ , \"bac.total.in.stream\"] -",112],["chk.bac[chk.bac$location == \"stream\", \"total.bac\"],",112],["chk.dil * (df.output[ , \"pop.total.in.stream\"] -",112],["model.pop.total = df.output[ , \"pop.total.in.stream\"],",112]],"useCount":9065},{"word":"strict","context":[["if (strict)",65],["gPath, strict,",80],["if(strict) {",86],["pathsofar, gPath, strict,",90],["(!strict && depth(gPath) == 1) ||",50],["if(strict)",56],["gPath, strict, grep, global)",60],["partialPathMatch(pathsofar, gPath$path, strict, grep)) {",50],["if (fullPathMatch(pathsofar, gPath, strict, grep)) {",50],["if (!strict && depth(gPath) == 1) {",50]],"useCount":2577},{"word":"string","context":[["data <- as.list(as.character(string))",50],["if (is.language(string)) {",50],["n <- length(string)",50],["data[[i]] <- string[i]",50],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["## the package argument is not a string constant.",66],["stop(\"'file' must be a character string or connection\")",90],["string,",95],["#' @rdname string-methods",106],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498]],"useCount":6150},{"word":"stringr","context":[["#' @import httr rjson stringr",42],["library(stringr)",1259],["require(stringr)",265],["library(\"stringr\")",181],["#' @import stringr",80],["require(\"stringr\")",34],["library('stringr')",32],["mes <- stringr::str_c(\"| \", wrapped, collapse = \"\\n\")",21],["# library(stringr)",20],["# Necessite les librairies plyr,httr,jsonlite,proto,stringr",20]],"useCount":2117},{"word":"stringsAsFactors","context":[["stringsAsFactors = FALSE)",1517],["stringsAsFactors=FALSE)",801],["stringsAsFactors = FALSE",406],["options(stringsAsFactors = FALSE)",233],["stringsAsFactors=F)",206],["stringsAsFactors=FALSE))",171],["options(stringsAsFactors=FALSE)",156],["stringsAsFactors = FALSE,",141],["stringsAsFactors=FALSE,",138],["stringsAsFactors=FALSE",119]],"useCount":6881},{"word":"strip","context":[["par.strip.text=par.strip.text, par.settings=par.settings, ...))",74],["strip.background = element_rect(colour = \"purple\", fill = \"#CCCCFF\")) +",41],["strip.text.x = element_text(size = 9, colour = \"black\",face=\"bold\"),",42],["theme(strip.text.x = element_text(size = 12, face = \"bold\"),",44],["## We should be able to safely strip all backticks; alternatively,",66],["strip.text = element_text(size = 12)",73],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["strip.background = element_blank(),",112],["theme(strip.background = element_blank(),",91],["par.strip.text=par.strip.text, par.settings=par.settings, ...))",74]],"useCount":2231},{"word":"strsplit","context":[["txt <- unlist(strsplit(txt, \", *\"))",56],["args <- strsplit(args,'nextArg', fixed = TRUE)[[1L]][-1L]",154],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["result <- strsplit(strsplit(data[i], \"#\")[[1]][1], \"\\\\s+\")[[1]]",55],["result <- strsplit(strsplit(data[i], \"#\")[[1]][1], \"\\\\s+\")[[1]]",55],["x <- unlist(strsplit(x, \",\"))",51],["l1 <- strsplit(l1,\":\")",51],["strsplit(",47],["name_splitted <- unlist(strsplit(features_model[f],\"\"))",46],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71]],"useCount":4917},{"word":"structure","context":[["state = structure(list(loaded = TRUE, opened = FALSE,",144],["structure(list(",59],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(",59],["## files structure for computing summary messages.",63],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",63],["structure(list(rdas = rdas[problems, 1:3], msg = msg,",66],["return(structure(NULL, class = \"check_Rd_xrefs\"))",66],["structure(",168],["\"See section 'Package structure'\",",189],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212]],"useCount":5466},{"word":"strwrap","context":[["strwrap(paste(y, collapse = \", \"),",81],["strwrap(paste(sQuote(sources), collapse = \", \"),",55],["out <- c(out, strwrap(msg), .pretty_format(x$bad_S4methods))",60],["paste(strwrap(paste(sQuote(files[bad]), collapse = \", \"),",60],["out <- c(out, strwrap(msg), .pretty_format(x$bad_refs))",60],["strwrap(y[[2L]], indent = 2L, exdent = 4L)),",63],["strwrap(y[[1L]], indent = 2L, exdent = 4L),",66],["msg <- strwrap(paste(msg, collapse = \" \"), indent = 2L, exdent = 2L)",80],["strwrap(paste(nms, collapse = \" \"),",66],["c(strwrap(msg),",66]],"useCount":3223},{"word":"style","context":[["#      Path style model input - Raw data input",47],["tags$input(id = inputId, class = \"userid\", value=as.character(value), type=\"text\", style=\"display:none;\")",37],["axis.text=element_text(colour=\"black\", size = 16),                              #sets size and style of labels on axes",37],["plot.style + theme(",39],["style <- match.arg(style)",40],["tags$style(type=\"text/css\",",59],["\"</td><td style=\\\"text-align: right\\\">\",",40],["style <- match.arg(style)",40],["div(style=\"display:inline-block\",",43],["td.style.background = 'red';",46]],"useCount":2435},{"word":"sub","context":[["sub = \"byte\")",82],["lines[ind] <- iconv(lines[ind], \"\", \"\", sub = \"byte\")",68],["as.numeric(sub(\"^r\", \"\", depends$version))))",68],["sub(dep_regexp, \"\\\\4\", dep)))",66],["pkg <- sub('^\"(.*)\"$', '\\\\1', deparse(pkg))",58],["title(sub = sub.caption, ...)",86],["newy <-  sub(\"-\", \"+\", x = newy)",99],["this <- sub(\"^'(.*)'$\", \"\\\\1\", this)",56],["this <- sub('^\"(.*)\"$', \"\\\\1\", this)",56],["title(sub = sub.caption, ...)",86]],"useCount":11783},{"word":"subset","context":[["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["## matrix of the appropriate subset of covariates kj",70],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["function(formula, data, subset, na.action, ...)",101],["ggplot(subset(batch_merged,",72],["#' Convert XML instance subset to a dataframe.",47],["if (!missing(subset)) {",57]],"useCount":5357},{"word":"substitute","context":[["rp[1] = substitute(expression(italic(R)^2 == MYVALUE),",78],["deparse(substitute(x)) ))",68],["DNAME <- deparse(substitute(x))",130],["series <- deparse(substitute(x))",103],["if (!quoted) { expr <- substitute(expr) } # force quoted",96],["linktemp <- substitute(link)",90],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["name <- as.character(substitute(name))",80],["rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),",78],["substitute({",71]],"useCount":5432},{"word":"substr","context":[["## the generic function ... hence substr().",34],["## of the generic function ... hence substr().",34],["((substr(.CompletionEnv[[\"linebuffer\"]],",35],["substr(x, nchar(x)-n+1, nchar(x))",41],["} else if (substr(a, 1, 11) == \"--encoding=\") {",41],["} else if (substr(a, 1, 1) == \"-\") {",126],["} else if (substr(a, 1, 9) == \"--output=\") {",80],["functions_in_code[substr(functions_in_code, 1L,",66],["if (substr(spsspkg.GetSPSSVersion(),1, 2) >= 19) {",41],["} else if (substr(a, 1, 10) == \"--library=\") {",56]],"useCount":3428},{"word":"sum","context":[["manual.calc.bac.total = sum(chk.bac$total.bac),",142],["FUN = sum),",506],["model.pop.total = sum(df.output$pop.total),",158],["chk.dil * (df.output$bac.total - sum(chk.bac$total.bac)) /",112],["msg <- ngettext(sum(ind),",120],["sum(chk.pop$pop),",142],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["manual.calc.pop.total = sum(chk.pop$pop),",142],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["sum(chk.bac$total.bac),",142]],"useCount":17859},{"word":"summary","context":[["summary(m1)",101],["summary(x)",96],["epsilon.summary <- apply(epsilon, 1, quantile,",90],["print(summary(analysis))",82],["summary(m)",111],["summary(fit)",505],["summary(mod)",145],["summary(model)",141],["temp <- summary(x, Quiet=TRUE)$Summary",135],["summary(model1)",122]],"useCount":11085},{"word":"switch","context":[["res <- switch(type,",72],["switch(blocktag,",76],["else switch(tmp,",78],["switch(alternative,",135],["switch(tag,",141],["switch(as.character(e[[1L]]),",68],["switch(method,",151],["ok <- switch(.Generic, max = , min = , range = TRUE, FALSE)",67],["switch(",191],["switch(type,",347]],"useCount":4926},{"word":"symbol","context":[["&& (identical(x[[1L]], as.symbol(\"<-\")))",33],["&& is.symbol(x[[3L]]))",33],["&& e[[1L]] == as.symbol(\"data\")))))",33],[".addFootnote(footnotes, symbol = \"<em>Note.</em>\", text = message)",33],["if(is.symbol(what))",40],["# To get the gene symbol for each Illumina ID",55],["as.alist.symbol <-",34],["if (typeof(fun) == \"symbol\") {",62],[".addFootnote(footnotes, symbol=\"<em>Note.</em>\", text=message)",71],[".addFootnote(footnotes, na.for.categorical, note.symbol)",75]],"useCount":2532},{"word":"sys","context":[["deparse(width.cutoff = 400L, sys.call(stackNumber - 1))),",36],["chk.pets.bac.prod <- 4.7500000E+09 # orgs/sys-day",33],["environment(sys.function(1))$e",138],["data, enclos = sys.frame(sys.parent()))",109],["data, enclos = sys.frame(sys.parent()))",109],["call <- sys.call()",58],["if(!all(names(sys.call()) %in% c(\"\", \"value\")))",44],["n <- sys.nframe()",41],["env <- sys.frame(n)",41],["calls <- sys.calls()",44]],"useCount":2315},{"word":"system","context":[["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["system.time(",249],["system(cmd)",249],["parse_time <- system.time(data.hex <- h2o.importFile(url))",129],["system.time({",210],["res <- system(cmd)",198],["system(command)",182],["timing <- system.time({",140],["system(paste(\"rm -rf\",cran_pkg_unuseful,sep=\" \"))",139],["record = system.time(gcFirst = T,",119]],"useCount":9530},{"word":"t","context":[["t.iter <- floor(iter / Thinning) + 1",252],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["Mon[t.iter,] <- Mo0[[\"Monitor\"]]}",215],["sep=\"\\t\",",199],["return(t)",131],["x <- t(x)",129],["for(t in 1:block){",123],["print(t)",120],["sep=\"\\t\")",113],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270]],"useCount":22445},{"word":"tab","context":[["tab[ind, 1L]),",66],["if(length(tab)) {",66],["print(tab)",73],["# Now pass to ui.R what it needs to display this tab",64],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["# list the user inputs the tab depends on (easier to read the code)",94],["return(tab)",114],["tab",127],["tab[ind, 2L]))",66],["tab <- get(methods:::.TableMetaName(f, attr(f, \"package\")),",60]],"useCount":3680},{"word":"table","context":[["table",186],["write.table(",129],["selected.table      <- c(\"2\")",126],["#' @import data.table",229],["require(data.table)",464],["data <- data.table::rbindlist(data, fill=TRUE)",608],["library(data.table)",1845],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["tmp.w <- grobWidth(tmp.table)",1432],["tmp.h <- grobHeight(tmp.table)",1432]],"useCount":27526},{"word":"tables","context":[["#See what tables are available",35],["## output results in tables to pdf",190],["function(object, db, with.tables, ...){",154],["with.tables=\"missing\"),",54],["with.tables=\"character\"),",48],["# copy table to tables folder on beowulf",43],["tables()",37],["tables = tables[-1]",36],["tables = tables[-1]",36],["tables <- readRDS(objects_symbol_tables_file)",36]],"useCount":2349},{"word":"tag","context":[["tag <- names(x)[i]",67],["writeContent(block, tag)",251],["s <- .Rd_deparse(s, tag = FALSE)",165],["switch(tag,",141],["checkContent(block[[2L]], tag)",40],["tag <- tags[i]",48],["##' provided to specify a version or tag (if not provided, the \"default\" tag is",57],["##' provided to specify a version or tag (if not provided, the \"default\" tag is",57],["writeContent(block[[1L]], tag)",96],["writeContent(block[[2L]], tag)",142]],"useCount":3495},{"word":"tags","context":[["singleton(tags$head(tags$script(src = \"js/shinyBindings.js\", type='text/javascript'))),",73],["tags$hr(),",558],["tags$br(),",432],["tags$head(",253],["tags$div(",123],["tags <- RdTags(blocks)",88],["tags$ul(",86],["tags$li(",79],["tags$tr(",77],["for (i in seq_along(tags)) {",75]],"useCount":3962},{"word":"tail","context":[["t1 = tail(aqw_ranked,10)",33],["if (lower.tail == TRUE)",36],["lower.tail=FALSE)",38],["if (!tail) {",39],["out_file <-  tail(strsplit(out_list[i],\"/\")[[1]], n=1)",39],["utils::tail(out, as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\", 10))))",42],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["dev[nas] <- safe_pchisq(dev[nas], aod$Df[nas], lower.tail=FALSE)",46],["lower.tail = FALSE)",59],["PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)",75]],"useCount":2750},{"word":"target","context":[["checkIdentical(target, current)",247],["target, sQuote(pkgname)),",49],["lt <- length(target)",51],["#' @param y_pred Estimated target values.",54],["#' @param y_true Ground truth (correct) target values.",54],["if(binary.target){",54],["if(data.class(target) != data.class(current)) {",64],["checkTrue(.compare_hits(target, current))",48],["msg <-  if(check.attributes) attr.all.equal(target, current, ...)",46],["target = \"_blank\")),",75]],"useCount":5716},{"word":"tbl","context":[["genes.tbl <- read.delim(file=\"../../../../RawData/mysql_cbio_genes.txt\", header=T, as.is=T, sep=\"\\t\")",42],["m8 <- feval(y=e.ret,X=tbl,P=P)$forecast[,method]*w",43],["BarcodeSample <- sample.tbl[match(samples, sample.tbl[,1]), 2]",50],["BarcodeSample <- sample.tbl[match(samples, sample.tbl[,1]), 2]",50],["if(nrow(tbl.omfSub)>0){",59],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["tbl",118],["result <- vector(\"list\", nrow(tbl.good))",73]],"useCount":6272},{"word":"tcl","context":[["par(tcl= -0.5)",51],["tcl(\"set\", name, value)",22],["axis(3, at = seq(0, 80, 20), labels = FALSE, tcl = -0.25, lwd = 2)",16],["axis(4, at = seq(0, 80, 20), labels = FALSE, tcl = -0.25, lwd = 2)",16],["#axis(1, pos=0, tick=T, tcl=0,lab=F, at=c(-1,10))",15],["usrSel <- as.numeric(tcl(tableList, 'curselection'))",15],["tkcoords        <- function(widget, ...) tcl(widget, \"coords\", ...)",15],["tcl(tableList, 'finishediting')",22],["par(tcl= -0.2)",47],["have_ttk <- as.character(tcl(\"info\", \"tclversion\")) >= \"8.5\"",184]],"useCount":2458},{"word":"td","context":[["td2 <- if (td[3L] > 600) {",53],["</td>",85],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))",53],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["td <- td/60",53]],"useCount":3001},{"word":"temp","context":[["return(temp)",167],["temp.school.data <- school.data",52],["temp.school.data <- school.data[Year==DF.yrs[i],]",52],["temp",155],["temp <- summary(x, Quiet=TRUE)$Summary",135],["rm(temp)",104],["unlink(temp)",73],["sShinyTempPath <<- paste0(sShinyPath,\"temp/\")",73],["temp <- tempfile()",87],["temp <- eval(expr[[2]], envir = eval_env)",51]],"useCount":6640},{"word":"tempfile","context":[["filename <- tempfile(fileext = \".mat\")",145],["f <- tempfile()",134],["tmp <- tempfile()",180],["tf <- tempfile()",212],["file <- tempfile()",114],["outfile <- tempfile(\"xshell\")",48],["cpdir <- tempfile('cp')",66],["path <- tempfile(pattern=\"git2r-\")",82],["temp <- tempfile()",87],["build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)",96]],"useCount":2694},{"word":"terms","context":[["formula <- terms(formula, data = data)",45],["Terms <- attr(m, \"terms\")",50],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["termnumber<-1+length(m$terms)",40],["predict(fit, type=\"terms\", se=TRUE)",76],["mt <- attr(mf, \"terms\")",75],["env <- environment(formula$terms)",51],["tl <- attr(object$terms, \"term.labels\")",57],["#  termnumber<-1+length(m$terms)",64],["mt <- terms(formula, data = data)",41]],"useCount":5146},{"word":"test","context":[["#' test=1",116],["test <- match.arg(test)",138],["test(id=0, code={",3834],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["#perform test",115],["test = cbind(test,ts)",114],["# Parameters for the test.",398],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["test <- function() {",233],["test <- match.arg(test)",138]],"useCount":30566},{"word":"tests","context":[["num.passed.tests=num.passed.tests+1",135],["num.passed.tests=num.passed.tests+1",135],["num.tests=num.tests+1",90],["### end of tests added in 2.2.0 patched ###",36],["num.tests=num.tests+1",90],["#' @example tests/testthat/examples_fcn_doc/warfarin_optimize.R",67],["# setwd(\"/Users/tomk/0xdata/ws/h2o/R/tests/testdir_jira\")",59],["num.tests=num.tests + 1",55],["num.tests=num.tests + 1",55],["types = c(\"examples\", \"tests\", \"vignettes\"),",42]],"useCount":4523},{"word":"text","context":[["expected <- eval(parse(text=\"TRUE\"));",191],["theme(axis.text = element_text(size = 9),",378],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212],["expected <- eval(parse(text=\"FALSE\"));",383],["axis.text.x = element_text(size = rel(1.5), angle = 0)) +",171],["axis.text.y = element_blank(),",176],["axis.text.x = element_blank(),",306],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["axis.text.y = element_text(size = rel(1.5), angle = 0)) +",189],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158]],"useCount":24137},{"word":"than","context":[["stop(\"the elements of 'comp' must be smaller or equal than \", object$ncomp, \".\")",39],["# sleep for 5 minutes if limit rate is less than 100",55],["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["## Use a custom gatherer rather than .find_calls() with a suitable",60],["stop(\"cannot handle more than one 'x' coordinate\")",35],["# Check AUC and overall prediction error at least as good with group split than without",40],["## Better than get(); works when called in fun :",46],["stop(\"ERROR: there is more than one coefficient value per month and latband\")",46],["## Proceed if there is compatibility (sample range wider than the model range), otherwise return a message",42]],"useCount":4155},{"word":"that","context":[["##' @param inputParams Either an R object that will be converted into JSON",498],["## it seems that splits on spaces, so try harder.",97],["# Define UI for application that draws a histogram",100],["## Does the package have a NAMESPACE file?  Note that when",104],["## Check that state and outcome are valid",194],["# Get the i,j matrix positions of the regions that contain this subplot",197],["## be what commandArgs(TRUE) would return, that is a character vector",78],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87]],"useCount":17073},{"word":"the","context":[["#  Part of the R package, http://www.R-project.org",3868],["#  Part of the R package, https://www.R-project.org",1164],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' function which makes POST HTTP requests to the API server.",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' received from the API server",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498]],"useCount":169025},{"word":"them","context":[["# Take the twelve series and melt (or equivalently, stack) them:",48],["# and eliminate them from the training dataset because almost perfectly correlated to Y",36],["#When we convert to a data frame the numeric columns get an x in front of them. Remove them here.",41],["#When we convert to a data frame the numeric columns get an x in front of them. Remove them here.",41],["cat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")",45],["\"\\nPlease remove them from your package.\\n\")",91],["# New version of length which can handle NA's: if na.rm==T, don't count them",72],["\"Please remove them from your package.\\n\")",60],["# the user's working directory and thus be accessible to them",49],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46]],"useCount":2452},{"word":"theme","context":[["theme(",600],["theme(axis.text = element_text(size = 9),",378],["theme(legend.position=\"bottom\")",128],["theme(legend.position = \"none\") +",125],["theme(legend.position = \"none\")",119],["theme(panel.background = element_blank(),",103],["theme(legend.position=\"none\")",130],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["theme(legend.position=\"none\") +",170],["theme(plot.title=element_text(size = 18, vjust = 2))",204]],"useCount":9048},{"word":"theme_bw","context":[["theme_bw(20)+",51],["theme_bw()",926],["theme_bw()+",280],["p <- p + theme_bw()",149],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["theme_set(theme_bw())",110],["ggplot2::theme_bw() +",68],["theme_bw(base_size = 20) +",56],["theme_bw() + theme(legend.position='bottom')",49],["theme_bw() +",1868]],"useCount":4546},{"word":"then","context":[["# If there are no specific error, then go get the parameter solution",41],["# then, if the requested plot already exists, use it",228],["# If it's not a grob then fail",40],["# If layout is NULL, then use 'cols' to determine layout",195],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["when 8 then 'Q8.1'",62],["when 9 then 'Q9'",62],["when 7 then 'Q7.1'",62],["when 11 then 'Q8.2'",62],["# \"norm\" or \"raw\", then it is assumed that we have to",41]],"useCount":3512},{"word":"there","context":[["# If there is a match",73],["# If there are no specific error, then go get the parameter solution",41],["## Proceed if there is compatibility (sample range wider than the model range), otherwise return a message",42],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46],["## Should there really be a 'verbose' argument?",34],["stop(\"ERROR: there is more than one coefficient value per month and latband\")",46],["# If there was no matching method, attempt to find the default method. If that fails,",51],["# If there is a match...",56],["# Avoid consecutive duplicates (once it is found there is no point in keep going)",56],["## And pick the ones which should not be there ...",63]],"useCount":4978},{"word":"these","context":[["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["## Are these mentioned in DESCRIPTION?",58],["## .check_package_description will insist on these operators",41],["# these are available from dismo::evaluate.R NOT originally implemented in biomod2::Evaluate.models.R",39],["# TODO: these functions are used to evaluate the model ... configurable?",37],["# resulting codaSamples object has these indices:",42],["\"Most likely, these were included erroneously.\\n\")",96],["## remove these function entries, but should really do better,",34],["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["# each of these elements is a raw data set of a corresponding study, for example",42]],"useCount":4907},{"word":"theta","context":[["a.trial.min.cut(the.graph, the.true.cluster, theta, method, overlap,",73],["stop(paste(\"theta must be positive\", \"\\n\", \"\"))",45],["if (any(theta<=0))",45],["theta)",46],["return(theta)",38],["bounds <- grid.Call(L_locnBounds, x$x, x$y, theta)",99],["theta,",42],["print(\"theta\");",38],["print(theta);",38],["the.graph <- delete.edges(the.graph, E(the.graph)[weight < theta]);",37]],"useCount":2841},{"word":"this","context":[["# distributed with this work for additional information",608],["#' The semantic reference(s) for this data:",337],["# along with this program; if not, a copy is available at",314],["# along with this program.  A copy can be cound in the R installation",234],["# Get the i,j matrix positions of the regions that contain this subplot",197],["chk.dil <- 1E+06 # need to explain this",190],["# Unless you have received this program directly from RStudio pursuant",175],["# for this R-port:",164],["message(\"Press ESC if you want to exit this lesson and you\")",129],["## FIXME: this does not need to be run in another process",128]],"useCount":23339},{"word":"ticks","context":[["axis.ticks.y=element_blank(),",69],["axis.ticks=element_blank(),",184],["axis.ticks =element_line(colour = \"black\"),",70],["axis.ticks.x = element_blank(),",70],["axis.ticks.y = element_blank(),",76],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["theme(axis.ticks.x = element_blank(),",98],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["axis.ticks = element_blank(),",212]],"useCount":2676},{"word":"time","context":[["system.time(",249],["tm = proc.time() - ptm",308],["start.time <- Sys.time()",166],["start.time <- Sys.time()",166],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["t2 <- proc.time()",197],["ptm <- proc.time()",350],["set.seed(476); ptm <- proc.time()",200],["t1 <- proc.time()",205],["system.time({",210]],"useCount":15480},{"word":"title","context":[["legend.title=element_blank(),",321],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["# Application title",412],["axis.title.y = element_blank(),",219],["axis.title.x = element_blank(),",214],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["axis.title.x=element_blank(),",189],["#' @title",175],["axis.title.y=element_blank(),",135],["ggtitle(title) +",107]],"useCount":17577},{"word":"tkgrid","context":[["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["tkgrid(tklabel(tt,text = \"Output in Excel (.csv) : \"),sticky = \"w\")",85],["tkgrid(DimHlp.but, row=8, column=2,sticky=\"w\")",86],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["tkgrid(DimHlp.but, row=7, column=2,sticky=\"w\")",99],["tkgrid(DimHlp.but, row=6, column=2,sticky=\"w\")",114],["tkgrid(DimHlp.but, row=3, column=2,sticky=\"w\")",119],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128]],"useCount":2160},{"word":"tm","context":[["tm = proc.time();",63],["library(tm)",434],["tm = proc.time() - ptm",308],["# tm[1:10]",34],["secs = as.numeric(tm[3])",40],["library(\"tm\")",40],["tm = proc.time()-tm;",59],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["require(tm)",78],["tm = proc.time()-tm;",59]],"useCount":2417},{"word":"tmp","context":[["tmp.h <- grobHeight(tmp.table)",1432],["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["grid.draw(tmp.gt)",1992],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["tmp.h <- grobHeight(tmp.table)",1432],["tmp.w <- grobWidth(tmp.table)",1432],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["tmp.w <- grobWidth(tmp.table)",1432]],"useCount":35051},{"word":"to","context":[["##' @param alwaysRetry Whether to always retry even when no response is",498],["#' The data is structured according to the Multi-Level Healthcare Information Modelling Reference Model release 2.5.0",304],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' function which makes POST HTTP requests to the API server.",498],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498]],"useCount":86090},{"word":"token","context":[["return(.rs.makeCompletions(token = token,",46],["# Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393",274],["token <- readline(\"What is your assignment token? \")",129],["}', email, token)",129],["token <- readline(\"What is your assignment token? \")",129],["token = token,",120],["token = token,",120],[".rs.makeCompletions(token = token,",114],[".rs.makeCompletions(token = token,",114],["token,",53]],"useCount":2257},{"word":"tol","context":[["tol = list(variance = 10^(-2),",49],["tol=tol,",49],["tol=tol,",49],["tol.new <- 1",33],["all.equal(ss[1], -0.00076699031874270453, tol=8e-16),",24],["tol.new=tol.new)",26],["tol.new=tol.new)",26],["qr <- z[c(\"qr\", \"qraux\", \"pivot\", \"tol\", \"rank\")]",32],["as.double(tol),",35],[",  identicalTo( expected, tol = 1e-6 ) )",353]],"useCount":2148},{"word":"tools","context":[["emboss.path <- file.path(chipster.tools.path, \"emboss\" ,\"bin\")",60],["if(is.null(dir)) dir <- tools:::.R_top_srcdir_from_Rd()",68],["res <- tools::assertError(",84],["res <- tools::assertError(SISe(init    = init,",47],["which <- tools:::.get_standard_package_names()$base",50],["res <- tools::assertError(SISe3(init      = init,",59],["library(tools)",237],["meta <- tools:::.get_package_metadata(dir, installed = FALSE)",102],["dir <- tools::file_path_as_absolute(dir)",86],["cmd <- paste0(\"invisible(tools::Rdiff('\",",60]],"useCount":5883},{"word":"top","context":[["theme(legend.position = \"top\") +",43],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["# Set up plot layout, map will go on top and histogram on bottom",50],["## Look at all calls (not only at top level).",63],["for (i in 1:top){",69],["#remove datasets with too many missing top gene features",44],["# Whenever swirl is running, its callback is at the top of its call stack.",138],["layout.heights = list(top.padding = 0, bottom.padding = 0))",76],["top <- max(c(xhist$counts, yhist$counts))",69],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50]],"useCount":3943},{"word":"topleft","context":[["legend(\"topleft\",c(\"Food Amount\", \"Breakpoints\",",128],["legend(\"topleft\",c(input$predatorLabel, \"Breakpoints\",",65],["legend(\"topleft\",c(input$preyLabel, \"Breakpoints\",",65],["legend(\"topleft\",c(\"Oxygen\", \"Breakpoints\",",128],["legend(x=\"topleft\", c(\"Mean\",\"Trend\", \"Trend without 2011\"),lty=c(3:2,4), col = c(\"dark green\",\"red\",\"blue\"))",30],["legend(\"topleft\",c(\"Biological Oxygen Demand\", \"Breakpoints\",",128],["legend(\"topleft\",",967],["legend(\"topleft\",c(\"Augmentation Value\", \"Breakpoints\",",128],["legend(\"topleft\",c(\"Nutrients\", \"Breakpoints\",",128],["legend(\"topleft\",c(\"Photosynthesis\", \"Breakpoints\",",128]],"useCount":2289},{"word":"total","context":[["model.pop.total = sum(df.output$pop.total),",158],["model.pop.total = sum(df.output$pop.total),",158],["chk.total.bac <- data.frame(",158],["## population total and by locations",158],["## bacteria loads total and by locations",158],["\"model.pop.total\")",230],["\"model.bac.total\")",368],["## total",319],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.total.pop <- data.frame(",158]],"useCount":17783},{"word":"tr","context":[["R2sd.tr   <- 0 # formulas will be added later!",33],["tr = l[[1]]",120],["train = cbind(train,tr)",114],["tags$tr(",77],["</tr>",516],["<tr>",516],["'</td></tr>')",33],["tr<-newXMLNode(\"tr\",  parent = tbl)",33],["tr<-newXMLNode(\"tr\",  parent = tbl)",33],["adjR2.tr    <- r2.adj.funct(my.datf.train[,1],pred.tr,noFeats.fit)",33]],"useCount":2544},{"word":"trace","context":[["if (trace %in% c(\"both\", \"column\")) {",46],["if (trace) {    # end of timing step",76],["if (trace %in% c(\"both\", \"row\")) {",46],["trace=\"none\",",48],["if (control$trace)",54],["if(do.trace)",61],["if (trace)",114],["if(trace) {",124],["if (trace) {",172],["if(trace)",255]],"useCount":3737},{"word":"train","context":[["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["if ( train ) {",259],["#train data",140],["v_names <- c(v_names,\"train\")",259],["#Constructing validation and train sets by sampling (20/80)",102],["train = cbind(train,tr)",114],["train = cbind(train,tr)",114],["model <- train( x = Xtrain , y = ytrain.cat,",100],["train = train[ , -1]",95],["train = train[ , -1]",95]],"useCount":17717},{"word":"train_dat","context":[["return(list(train_dat,test_dat,\"p_thresh\",p_thresh))",112],["return(list(train_dat,test_dat,\"sig_gene\",sig_gene))",112],["return(list(train_dat,test_dat,\"q_thresh\",q_thresh))",112],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["train_pats = colnames(train_dat)",115],["train_dat = train_dat[sig_ix,]",345],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["for( i in 1:nrow(train_dat) )",76],["sen_dat = as.numeric(train_dat[i,sen_ix])",69],["train_dat = train_dat[sig_ix,]",345]],"useCount":2581},{"word":"training_frame","context":[["training_frame = train,",85],["params$training_frame  <- training_frame",70],["training_frame <- h2o.importFile(training_file)",66],["args <- .verify_dataxy(training_frame, x, y)",68],["#' model <- h2o.gbm(x = 3:9, y = 2, training_frame = hex, distribution = \"bernoulli\")",88],["parms$training_frame <- training_frame",103],["parms$training_frame <- training_frame",103],["tryCatch(training_frame <- h2o.getFrame(training_frame),",135],["params$training_frame  <- training_frame",70],["tryCatch(training_frame <- h2o.getFrame(training_frame),",135]],"useCount":2465},{"word":"tree","context":[["phylo = tree,",84],["tree",69],["library(tree)",66],["return(tree)",60],["\" syntax tree without additional information.\\n\"))",51],["#train_control<-tree.control(nobs=dim(train_data)[1], mindev=0.01/2)",40],["tree <- GeneralTree$new(0, \"parent1\")",37],["times_shared <- compute_times_ca(tree)",32],["colour='part of genome used\\nfor tree reconstruction',",29],["#all reference trees to one comp tree",139]],"useCount":2335},{"word":"try","context":[["if (inherits(res, \"try-error\"))",269],["if ( !is( res, \"try-error\" ) )",108],["message(\"want to try to submit your grade at a later time.\")",129],["try(",140],["if ( is( res, \"try-error\" ) )",144],["if(inherits(Mo1, \"try-error\")) {",217],["res <- try(",268],["if (class(p) == \"try-error\") {",118],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["try({",360]],"useCount":10090},{"word":"tryCatch","context":[["tryCatch(parse(file = con, n = -1L),",66],["tryCatch({",1607],["tryCatch(",691],["tryCatch(training_frame <- h2o.getFrame(training_frame),",135],["tryCatch( {",71],["fit.pcl <- tryCatch(",57],["tryCatch ({",58],["db <- tryCatch(Rd_db(basename(outDir), lib.loc = dirname(outDir)),",62],["out <- tryCatch(",65],["object <- tryCatch(",75]],"useCount":6496},{"word":"ts","context":[["ts.eps <- getOption(\"ts.eps\")",48],["# +x, -x were ts, !x was not in 3.0.2",48],["ts = l[[2]]",120],["test = cbind(test,ts)",114],["d.ts=20 # Dimension of the FTS",110],["x <- as.ts(x)",109],["#' @keywords ts multivariate distribution models",101],["x <- na.action(as.ts(x))",88],["ts.eps <- getOption(\"ts.eps\")",48],["ts = {",54]],"useCount":5441},{"word":"tt","context":[["tkwm.resizable(tt, 0,0)",143],["q.but <- tkbutton(tt,text=\"Quit\",",144],["tt <- tktoplevel()",201],["command=function() tkdestroy(tt))",152],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["submit.but <- tkbutton(tt, text=\"Simulation\",",113],["tkwm.title(tt, \"Sim.DiffProc\")",102],["reset.but  <- tkbutton(tt, text=\"Reset\", command=reset)",142],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91]],"useCount":4292},{"word":"two","context":[["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["stop(\"'x' must be an array of at least two dimensions\")",38],["p.value <- if (alternative[1] == \"two.sided\") {",40],["#in each sample, two classes are balanced",43],["### two seasons",46],["# input/output filenames are passed as two additional arguments to Rscript",50],[",alternative = c(\"two.sided\",\"less\",\"greater\")",62],["\"two.sided\" = {",65],["two.sided = {",65],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110]],"useCount":2852},{"word":"txt","context":[["txt <- gsub(\"(^|[^\\\\])\\\\\\\\($|[^abfnrtuUvx0-9'\\\"\\\\])\",",66],["gsub(\"\\\\.txt\",\"-\",chr.input)",190],["file='log.txt',",138],["function(txt)",94],["add(repo, \"test.txt\")",87],["\".txt\")",80],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["return(txt)",57],["\"\\\\1<unescaped bksl>\\\\2\", txt)",66],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82]],"useCount":8103},{"word":"type","context":[["type = \"l\",",183],["type=\"RAM\",",189],["type,",217],["if(.Platform$OS.type == \"windows\")",233],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if(.Platform$OS.type == \"windows\") {",326],["type <- match.arg(type)",739],["type <- match.arg(type)",739],["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["switch(type,",347]],"useCount":33616},{"word":"typeof","context":[["if (typeof(e) == \"language\") {",34],["if (typeof(b) == \"language\" && length(b) == 2 && b[[1]] == \"{\")",31],["typeof(f) == \"closure\"",33],["if(typeof(f) == \"closure\") body(f) # else NULL",33],["switch(typeof(def),",33],["defenv <- if (typeof(genfun) == \"closure\") environment(genfun)",34],["if (typeof(fun) == \"symbol\") {",62],["typeof(.Last.value)",95],["if (typeof(v) == \"closure\")",96],["if (typeof(genfun) == \"closure\") environment(genfun)",125]],"useCount":2305},{"word":"types","context":[["## for at least the supported OS types.  Under Unix, we",32],["for (type in types) {",33],["types = c(\"examples\", \"tests\", \"vignettes\"),",42],["if (\"html\" %in% types) {",72],["##select differential genes across cancer types##",49],["if (\"example\" %in% types) {",48],["if (\"latex\" %in% types) {",48],["map.types = map.types,",47],["map.types = map.types,",47],["#Load any source files that contain/define functions, but that don't load any other types of variables",47]],"useCount":2352},{"word":"tz","context":[["return(.POSIXct(res, tz))",38],["if(nzchar(tz)) attr(res, \"tzone\") <- tz",57],["if(nzchar(tz)) attr(res, \"tzone\") <- tz",57],["tz=tz,timestep = \"OutputSoilMaps\",wpath=wpath,inpts.file=inpts.file)",48],["tz=tz,timestep = \"OutputSoilMaps\",wpath=wpath,inpts.file=inpts.file)",48],["tz <- do.call(\"check_tzones\", args)",38],["format(pmax(x, y), tz=\"GMT\")",36],["format(pmin(x, y, na.rm=TRUE), tz=\"GMT\")",36],["tz = \"UTC\"))",36],["format(pmax(x, y, na.rm=TRUE), tz=\"GMT\")",36]],"useCount":2531},{"word":"u","context":[["if(any(is.na(nodecov))){u<-c(u,NA)}",82],["if(log.u < log.alpha) {",118],["u<-sort(unique(nodecov))",82],["# Auth: u.niazi@imperial.ac.uk",71],["if (length(u)==1)",62],["nodecov <- match(nodecov,u,nomatch=length(u)+1)",62],["nodecov <- match(nodecov,u,nomatch=length(u)+1)",62],["#' @importFrom unitted u",60],["log.u <- log(runif(1))",133],["if(any(is.na(nodecov))){u<-c(u,NA)}",82]],"useCount":4287},{"word":"unclass","context":[["res <- cut(unclass(x), unclass(breaks), labels = labels,",34],["classlabel <- as.vector(unclass(sampclass(object)))",33],[".pretty_format(unclass(x))",33],["res <- cut(unclass(x), unclass(breaks), labels = labels,",34],["x <- unclass(x)",142],["parg <- unclass(sym$dll)$name",54],["xx <- unclass(x)",43],["args <- lapply(args, unclass)",38],["s <- lapply(unclass(x),",38],["do.call(`unclass`, argv);",35]],"useCount":2360},{"word":"unique","context":[["unique(c(Filter(function(f) .is_S3_generic(f, envir = code_env),",66],["ux <- unique(x)",92],["objects_in_code <- unique(OK)",102],["uasgn <- unique(asgn)",90],["# dsL <- dsL[dsL$id %in% sample(unique(dsL$id), 100), ]",90],["d <- dsL[dsL$id %in% sample(unique(dsL$id), sample_size), ]",86],["u<-sort(unique(nodecov))",82],["res <- list(others = unique(bad_exprs),",66],["imports = unique(bad_imports),",66],["xx <- unique(xx)",62]],"useCount":11655},{"word":"unit","context":[["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["if (!is.unit(x$x) ||",153],["unit(bounds[2L], \"inches\")",126],["unit(bounds[4L], \"inches\")",126],["if (!is.unit(y))",176],["x <- unit(x, default.units)",181],["y <- unit(y, default.units)",181],["if (!is.unit(x))",191],["unit(0.5, \"npc\")",262],["unit(0, \"inches\")",301]],"useCount":9050},{"word":"united","context":[["united$TempBreed <- grepl(\"Greyhound\",united$MainBreed)",42],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["united$Color1 <- sapply(united$Color, FUN = function(x) {strsplit(x, split=\"/\",fixed=TRUE)[[1]][1]})",23],["united$Color22 <- as.factor(united$Color22)",23],["united$Color22 <- as.factor(united$Color22)",23],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["united$TempBreed <- grepl(\"Greyhound\",united$MainBreed)",42],["united$OutcomeType <- as.factor(united$OutcomeType)",23],["united$TempBreed <- NULL",504]],"useCount":5253},{"word":"units","context":[["default.units=\"npc\",",287],["default.units=default.units,",81],["stop(\"'x' and 'y' must be units\")",85],["units <- match.arg(units)",88],["units <- match.arg(units)",88],["units = \"in\")",93],["default.units=\"native\",",102],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = \"auto\")",122],["y <- unit(y, default.units)",181],["x <- unit(x, default.units)",181]],"useCount":7173},{"word":"unknown","context":[["paste(sQuote(unknown[miss]), collapse = \", \")),",33],["encoding <- \"unknown\"",114],["message(\"Warning: unknown option \", sQuote(a))",86],["unknown <- unknown[!obsolete]",33],["unknown <- c(unknown, pkg)",66],["unknown <- c(unknown, pkg)",66],["paste(sQuote(unknown[obsolete]), collapse = \", \")),",33],["paste(sQuote(unknown[!miss]), collapse = \", \")),",33],["if (length(unknown)) {",34],["unknown <- unique(cbind(non_ASCII, where))",33]],"useCount":2589},{"word":"unlink","context":[["on.exit(unlink(f))",61],["unlink(file.path(outDir, dirname[type], drop))",72],["unlink(temp)",73],["unlink(tf)",218],["unlink(path, recursive=TRUE)",83],["unlink(outfile)",84],["on.exit(unlink(file))",106],["unlink(tmp)",107],["unlink(filename)",162],["unlink(build_dir, recursive = TRUE)",204]],"useCount":4367},{"word":"unlist","context":[["unlist(lapply(names(bad),",66],["cat(unlist(Rdtxt), file = filename, sep = \"\\n\")",69],["\"bad_arg_names\" %in% unlist(lapply(y, names))",63],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["unlist(",72],["unlist %>%",74],["x <- unlist(x)",89],["unlist(Map(.format_calls_in_file, x, names(x))))",90],["deleters <- which(unlist(lapply(result, is.null)))",187],["as.character(unlist(lapply(names(x), .fmt)))",193]],"useCount":10159},{"word":"up","context":[["## clean up",206],["# Set up the page",211],["# Set up plot layout, map will go on top and histogram on bottom",50],["# Clean up",99],["mynoiseqHo.deg1 = degenes(mynoiseqHo, q = 0.95, M = \"up\")",60],["# clean up",60],["# lesson is started. Any variables created here will show up in",49],["class(n) <- \"up\"",60],["# clear up RAM",49],["### Tidy up data",46]],"useCount":4518},{"word":"update","context":[["start = 1, end = iters - burn, update = update)",127],["iters = iters, burn = burn, update = update, thin = 1)",88],["iters = iters, burn = burn, update = update, thin = 1)",88],["iters = iters, burn = burn, update = update)",74],["iters = iters, burn = burn, update = update)",74],["# iters <- 100; burn <- 50; update <- 10; thin <- 1",67],["# update plot legend with ews and breakpoint lines",898],["# update plot legend with only ews line",898],[".byref.update.frame(x)",63],["start = 1, end = iters - burn, update = update)",127]],"useCount":6168},{"word":"upper","context":[["cat(\"\\nWARNING: Stepping out the upper\",",30],["out <- strsplit(sub(\"^R_PKGS_[[:upper:]]+ *= *\", \"\", lines), \" +\")",28],["tolower(sub(\"^R_PKGS_([[:upper:]]+) *=.*\", \"\\\\1\", lines))",28],["lower = c(0, 0), upper = c(1, 1),",30],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["## (gfortran seems to use upper case.)",32],["rho.upper = 9, alpha.init = alpha.init, a.init = 1000,",61],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["## hi   upper pointwise envelope of K(r) from simulations",78],["gp <- gp + geom_pointrange(aes(ymin = lower, ymax = upper))",61]],"useCount":2164},{"word":"url","context":[["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["opts_knit$set(base.url = base.url)",65],["download.file(url, dest)",69],["#' \\url{https://code.google.com/p/lagrange/}",75],["contriburl = contrib.url(repos, type),",107],["parse_time <- system.time(data.hex <- h2o.importFile(url))",129],["respone <- httr::POST(url, body = payload)",129],["url <- 'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'",129],["#' \\url{http://phylo.wikidot.com/matzke-2013-international-biogeography-society-poster}",218],["#' \\url{http://www.mlhim.org}",337]],"useCount":5282},{"word":"usage","context":[["## Determine function names in the \\usage.",34],["## no \\usage entry are not necessarily a problem---they might be",34],["## Determine functions with a \\usage entry in the documentation",34],["#' @usage",144],["#'@usage",95],["db_usages <- lapply(db, .Rd_get_section, \"usage\")",66],["usage()",53],["## by comparing the explicit \\usage entries for S4 methods to",34],["## Also test whether the objects we found from the \\usage all",34],["#' @usage NULL",45]],"useCount":2185},{"word":"use","context":[["msg <- \"See the note in ?`:::` about the use of this operator.\"",80],["## R developers can use this to debug the function by running it",78],["q_use = FALSE #use p value at last",82],["# then, if the requested plot already exists, use it",228],["# If layout is NULL, then use 'cols' to determine layout",195],["use.names = FALSE)",146],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",114],["# use this for interactive setup",111],["use.names = FALSE),",92],["# #' ##-- ==>  Define data, use random,",82]],"useCount":13402},{"word":"useBytes","context":[["useBytes = TRUE))) {",65],["perl = TRUE, useBytes = TRUE)",163],["useBytes = TRUE)",142],["if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))",64],["if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))",60],["writeLines(x, con, useBytes = TRUE, ...)",72],["contents <- readChar(f, file.size(f), useBytes = TRUE)",75],["invert = TRUE, value = TRUE, useBytes = TRUE)",138],["lines, useBytes = TRUE, value = TRUE)",78],["lines, invert = TRUE, value = TRUE, useBytes = TRUE)",116]],"useCount":3438},{"word":"used","context":[["#### Start MCMC setup: Most of this is used for the spBayes package",71],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["source(\"./scripts/common-functions.R\") # used in multiple reports",55],["## to be used",173],["## to be used in installed.packages() and similar",60],["##' used).",57],["# Add it to another list (it will be used to adjust the column names in the final sample peaklist)",56],["#'                                                  covariates will be created and used in models that",50],["##' @param ...  Not used.  Forces remaining arguments to be specified by name.",49]],"useCount":9073},{"word":"user","context":[["# Get the value which a user either entered directly or was computed",137],["# list the user inputs the tab depends on (easier to read the code)",94],["# This is the user-interface definition of a Shiny web application.",121],["# Get the last expression which the user entered at the R console.",136],["user.prompt()",145],["#' @param owner the repo owner (user, org, etc)",144],["#' \tNote: This function requires acting user",67],["config(repo, user.name=\"Alice\", user.email=\"alice@example.org\")",77],["config(repo, user.name=\"Alice\", user.email=\"alice@example.org\")",77],["# first the reactive function doing all calculations when the related inputs were modified by the user",79]],"useCount":5141},{"word":"using","context":[["# Generated by using Rcpp::compileAttributes() -> do not edit by hand",57],["# forward options using x",62],["## using the SuperLearner prediction algorithm output [SL_Pred_j], with the Xnew",70],["## Function translated automatically using 'matlab.to.r()'",86],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["##' @param appNameOrID An app identifier using either the name of an app",57],["# You are welcome to use parts of this code, but please give credit when using it extensively.",51],["## Function translated using 'matlab.to.r()'",43],["\"specified can produce unpredictable results.\", \"Please consider using only one or the other.\")",38]],"useCount":6065},{"word":"usr","context":[["usr <- par(\"usr\"); on.exit(par(usr))",101],["#!/usr/bin/env Rscript",1591],["#!/usr/bin/Rscript",680],["par(usr = c(0, 1, 0, 1))",164],["#! /usr/bin/env Rscript",126],["usr <- par(\"usr\")",118],["usr <- par(\"usr\")",118],["usr <- par(\"usr\"); on.exit(par(usr))",101],["usr <- par(\"usr\"); on.exit(par(usr))",101],["#! /usr/bin/Rscript",91]],"useCount":4768},{"word":"utils","context":[["library(R.utils)",88],["source(file.path(chipster.common.path, \"zip-utils.R\"))",123],["utils::flush.console()",160],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["source(\"utils.R\")",52],["library(utils)",87],["#' @include utils.R",80],["mc <- match.call(utils::data, e)",66],["source(file.path(chipster.common.path, \"tool-utils.R\"))",53],["aar <- utils:::.read_authors_at_R_field(aar)",52]],"useCount":8671},{"word":"v","context":[["abline(v=quickTP()[[2]], col=\"blue\")",480],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["v",273],["if ( length(v)==1 ) { return( v[[1]] ) } else { return( v ) }",259],["if ( length(v)==1 ) { return( v[[1]] ) } else { return( v ) }",259],["if ( length(v)==1 ) { return( v[[1]] ) } else { return( v ) }",259],["names(v) <- v_names",259],["v <- c()",241],["return(v)",228],["else if (a %in% c(\"-v\", \"--version\")) {",145]],"useCount":13748},{"word":"val","context":[["class(val) <- cl",110],["valResults <- expectThat(e$val,",108],["val",605],["return(val)",195],["stopifnot(abs(res$value - val) < res$abs.error)",144],["#print(paste(\"User val is \",e$val,\"Correct ans is \",correctVal))",107],["#print(paste(\"User val is \",e$val,\"Correct ans is \",correctVal))",107],["isTRUE(all.equal(correctVal,e$val))",102],["selection <- getState()$val",129],["getState()$val",137]],"useCount":7098},{"word":"valid","context":[["if(is.na(valid)) stop(\"invalid specification of 'breaks'\")",52],["data.valid <- data.hex[s > 0.8,]",68],["## Check that state and outcome are valid",194],["if ( valid ) {",259],["v_names <- c(v_names,\"valid\")",259],["if( valid ) {",51],["if ( validation_scheme == 3 ) { valid <- cars[r <= 0.2,] }",53],["if ( validation_scheme == 3 ) { valid[,response_col] <- as.factor(valid[,response_col]) } }",53],["stop(\"argument \\\"training_frame\\\" must be a valid H2OFrame or key\")",51],["if ( validation_scheme == 3 ) { valid[,response_col] <- as.factor(valid[,response_col]) } }",53]],"useCount":7093},{"word":"validation","context":[["test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])==\"validation\"])",52],["#Constructing validation and train sets by sampling (20/80)",102],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["# validation des arguments #",68],["#' @param fold_column (Optional) Column with cross-validation fold index assignment per observation",57],["cv.mat[fd.ix==j,j] = \"validation\"",56],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["#' @param fold_assignment Cross-validation fold assignment scheme, if fold_column is not specified",55],["Log.info(paste0(\"Validation scheme (1:none, 2:cross-validation, 3:validation set): \", validation_scheme))",53],["Log.info(paste0(\"Validation scheme (1:none, 2:cross-validation, 3:validation set): \", validation_scheme))",53]],"useCount":2655},{"word":"value","context":[["value",2149],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["invert = TRUE, value = TRUE)",262],["value <- NULL",233],["definition = function(object, value) {",178],["if(is.null(value)) {",166],["# Plant the seed only if a specified value is entered",159],["return(value)",312],["function(object, value) {",350],["stopifnot(abs(res$value - val) < res$abs.error)",144]],"useCount":43108},{"word":"values","context":[["## in the 'id' vector (ignoring NA values)",84],["free=TRUE, values=.8,",98],["for (j in 1:nrow(values))",102],["scale_color_manual(values = palle)",119],["return(values)",125],["stop(\"Not OK check your values\")",139],["### Propose new parameter values",178],["free=FALSE, values=1),",187],["free=TRUE, values=.2,",248],["# threshhold the values",100]],"useCount":13861},{"word":"var","context":[["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["name <- as.character(variables.in.model[ var])",53],["return(var)",50],["for (var in 1:length(variables.in.model)) {",47],["var <- as.character(var)",47],["var <- as.character(var)",47],["var.equal = TRUE, paired = FALSE)",44],["var projection, path;",40],["if (grepl(\":\", variables.in.model[var])) {",42],["stopifnot(is.character(x$var))",40]],"useCount":4813},{"word":"variable","context":[[",processP = \"gripavg\" # Mplus variable",78],["## variable.",83],[",processP = \"fev\" # Mplus variable",84],["for (variable in variables) {",84],["datvar <- datVar() # requested variable name, x of dat.x",86],["xlab=variable,",90],["## the first argument could be named, or could be a variable name.",66],["# add an index variable:",51],["checkTrue(\"history\" %in% manifest(dp)$variable)",51],["aes(variable,value),",48]],"useCount":6637},{"word":"variables","context":[["name <- as.character(variables.in.model[ var])",53],["#'        variables in the model.",67],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["print(\"Set variables for h2o.\")",73],["for (variable in variables) {",84],["## variables) required to compute the correlation between",95],["rm(list=ls(all=TRUE))  #Clear the variables from previous runs.",120],["### Local variables: ***",188],["# Renaming variables",51],["##' @param freeSet names of matrices containing free variables",51]],"useCount":7290},{"word":"vars","context":[["vars <- unlist(strsplit(variable, split = \":\"))",36],["vars=names(case1)",36],["vars",33],["return(vars)",35],["# Specify id.vars: the variables to keep but not split apart on",35],["name <- paste0(vars, collapse=\"\\u2009\\u273b\\u2009\")",89],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["library(vars)",44],["for (i in seq_along(vars))",39],["vars <- .variables",37]],"useCount":4984},{"word":"vector","context":[["## 'threshold' is a numeric vector of length 1 indicating the",95],["#' @param R an xts, vector, matrix, data frame, timeSeries or zoo object of",98],["y <- as.vector(y)",96],["## Return a numeric vector of correlations",97],["result <- vector(\"list\", length(ids))",104],["as.vector.foo <- function(...) 99",112],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["## 'directory' is a character vector of length 1 indicating",280],["## 'id' is an integer vector indicating the monitor ID numbers",172],["x <- as.vector(x)",165]],"useCount":16508},{"word":"verbose","context":[["if(verbose){",539],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["if (verbose == TRUE) {",161],["if (verbose)",516],["if (verbose){",193],["verbose = FALSE,",225],["if(verbose) {",363],["if (verbose) {",1034],["if(verbose)",870],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184]],"useCount":12364},{"word":"version","context":[["R.version[[\"major\"]], \".\",  R.version[[\"minor\"]],",183],["as.numeric(sub(\"^r\", \"\", depends$version))))",68],["ver <- R.version",70],["# New version of length which can handle NA's: if na.rm==T, don't count them",72],["\"  -v, --version\t\tprint version info and exit\",",104],["\" (r\", R.version[[\"svn rev\"]], \")\\n\", sep = \"\")",183],["\"  -v, --version\t\tprint version info and exit\",",104],["# version.",141],["else if (a %in% c(\"-v\", \"--version\")) {",145],["R.version[[\"major\"]], \".\",  R.version[[\"minor\"]],",183]],"useCount":9904},{"word":"vignettes","context":[["types = c(\"examples\", \"tests\", \"vignettes\"),",42],["checkingLog(Log, \"running R code from vignettes\")",64],["} else if (a == \"--no-build-vignettes\") {",50],["} else if (a == \"--no-vignettes\") {",34],["\"      --use-valgrind    use 'valgrind' when running examples/tests/vignettes\",",32],["## How about any pdf files which look like figures files from vignettes?",32],["sQuote(\"inst/doc\"), \" to \", sQuote(\"vignettes\"), \".\\n\")",32],["checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))",32],["wrong <- vignettes",33],["## Should checking the vignettes assume the system default",32]],"useCount":3123},{"word":"vigns","context":[["for (i in seq_along(vigns$docs)) {",83],["if (!is.null(vigns) && length(vigns$docs)) {",81],["if (!is.null(vigns) && length(vigns$docs)) {",81],["enc <- vigns$encodings[i]",62],["file <- vigns$docs[i]",114],["vigns <- pkgVignettes(dir = pkgdir)",122],["name <- vigns$names[i]",127],["engine <- vignetteEngine(vigns$engines[i])",60],["vignetteIndex <- .build_vignette_index(vigns)",44],["if(length(vigns$msg))",40]],"useCount":2464},{"word":"vjust","context":[["just=\"centre\", hjust=NULL, vjust=NULL,",74],["theme(axis.title.y = element_text(size=12, vjust=1.5),",42],["theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1))",43],["resolveVJust(x$just, x$vjust),",143],["x$vjust <- as.numeric(x$vjust)",42],["x$vjust <- as.numeric(x$vjust)",42],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["vjust=0, gp=gpar(fontsize=20))",1432],["if (!is.null(x$vjust))",42]],"useCount":3462},{"word":"vp","context":[["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["name=NULL, gp=NULL, vp=NULL) {",46],["vp=currvpTree",55],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["name=name, gp=gp, vp=vp)",103],["name=name, gp=gp, vp=vp)",103],["pushViewport(vp)",123],["vp",44],["name=NULL, gp=gpar(), vp=NULL) {",183],["if (!is.null(vp))",139]],"useCount":2627},{"word":"w","context":[["tmp.w <- grobWidth(tmp.table)",1432],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128],["tkgrid(DimHlp.but, row=3, column=2,sticky=\"w\")",119],["tkgrid(DimHlp.but, row=6, column=2,sticky=\"w\")",114],["sticky = \"w\")",108],["tkgrid(DimHlp.but, row=7, column=2,sticky=\"w\")",99],["regex <- \"^TCGA\\\\.\\\\w\\\\w\\\\.\\\\w\\\\w\\\\w\\\\w\\\\.[0-9][0-9]$\"",98],["regex <- \"^TCGA\\\\.\\\\w\\\\w\\\\.\\\\w\\\\w\\\\w\\\\w\\\\.[0-9][0-9]$\"",98],["regex <- \"^TCGA\\\\.\\\\w\\\\w\\\\.\\\\w\\\\w\\\\w\\\\w\\\\.[0-9][0-9]$\"",98]],"useCount":15599},{"word":"want","context":[["## We do not want to use utils::available.packages() for now, as",33],["message(\"Press ESC if you want to exit this lesson and you\")",129],["message(\"want to try to submit your grade at a later time.\")",129],["## what we want due to backquotifying.)",68],["# Set this to True if you want to fetch the data directly from S3.",39],["## symbols via ':::' and hence package developers might want to",34],["## Not clear whether we want to require *all* namespace package",34],["## In case the package has a namespace, we really want to check",34],["## we would want the calls back ...",34],["## For the QC computations, we really only want the S4 methods",33]],"useCount":2367},{"word":"warn","context":[["Rcmd <- paste(\"options(warn=1)\\n\",",750],["options(warn = 1)",113],["lines <- readLines(file, warn = FALSE)",145],["options(warn=0)",158],["Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",",160],["options(warn=2)",180],["options(warn = -1)",193],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["options(warn=-1)",438]],"useCount":7054},{"word":"warning","context":[["warning <- TRUE",59],["\"In addition to the above warning(s), found the following notes:\",",60],["if(!warning){",65],["warning(memo)",67],["}, warning = function(w) {",71],["warning(gettextf(",79],["warning = function(e) {",103],["warning(",128],["warning(msg)",141],["warning( \"Error message is: \", geterrmessage() );",263]],"useCount":11891},{"word":"warningLog","context":[["if (!any) warningLog(Log)",644],["if(!any) warningLog(Log)",588],["warningLog(Log,",84],["if (length(bad)) warningLog(Log) else noteLog(Log)",64],["warningLog(Log) else noteLog(Log)",58],["warningLog(Log, \"Found the following sources/headers with CR or CRLF line endings:\")",32],["warningLog(Log)",1033],["warningLog(Log, \"Errors in running code in vignettes:\")",32],["warningLog(Log, \"Found the following significant warnings:\\n\")",32],["warningLog(Log, \"Found directory 'R' with no source files.\")",32]],"useCount":2911},{"word":"was","context":[["# This file was generated by Rcpp::compileAttributes",216],["## (in case 'verbose' was true).  We now add this as an attribute to",34],["## * if documentation was generated via prompt, there is a \\format",34],["## Warn if the filter was not found in the db.",36],["stop(gettextf(\"package %s was built for %s\",",40],["stop(gettextf(\"package %s was built before R 3.0.0: please re-install it\",",40],["# +x, -x were ts, !x was not in 3.0.2",48],["# If there was no matching method, attempt to find the default method. If that fails,",51],["## package was called if character.only = TRUE and",66],["# Get the value which a user either entered directly or was computed",137]],"useCount":6500},{"word":"we","context":[["## Because we really only need this for calling from R CMD check, we",66],["## working on the sources we (currently?) cannot deal with the",104],["## we could do something like",66],["## Because we really only need this for calling from R CMD check, we",66],["## what we want due to backquotifying.)",68],["## we do the vectorized metadata computations first, and try to",68],["## what else shall we allow?  At least objects of class link-glm.",72],["## the name of the pollutant for which we will calculate the",86],["## we only source the assignments, and hence do not get any",102],["# we found",122]],"useCount":15082},{"word":"weights","context":[["stop(\"'weights' must be a numeric vector\")",46],["w <- object$weights",82],["#' @param weights_column Specify the weights column.",47],["weights <- NULL",49],["weights <- as.numeric(weights)",50],["weights <- as.numeric(weights)",50],["wt <- object$weights",55],["w <- z$weights",58],["wts <- object$prior.weights",59],["dev <- sum(dev.resids(y, mu, weights))",60]],"useCount":5360},{"word":"were","context":[["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["\"Most likely, these were included erroneously.\\n\")",96],["stop(\"models were not all fitted to the same size of dataset\")",41],["## Add the missing features to the final matrix (the one that were in the model but not in the peaklist)",42],["# +x, -x were ts, !x was not in 3.0.2",48],["# so raise an exception. (Note that builtins were handled earlier.)",51],["## which the calls were found.",60],["# Just need to test that output is the same as if the GTuples were GRanges",67],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87]],"useCount":2448},{"word":"what","context":[["what",88],["##' what they are doing.",156],["sQuote(what),",146],["what <- names(ext)",106],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["## be what commandArgs(TRUE) would return, that is a character vector",78],["sQuote(what)),",73],["## what else shall we allow?  At least objects of class link-glm.",72],["## what we want due to backquotifying.)",68],["# Now pass to ui.R what it needs to display this tab",64]],"useCount":12247},{"word":"when","context":[["## Does the package have a NAMESPACE file?  Note that when",104],["when 8 then 'Q8.1'",62],["when 9 then 'Q9'",62],["when 7 then 'Q7.1'",62],["s <- h2o.runif(data.hex)    # Useful when number of rows too large for R to handle",68],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["##' @param alwaysRetry Whether to always retry even when no response is",498],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["## in a NAMESPACE file when working on a package source dir, as",102]],"useCount":5462},{"word":"where","context":[["where = envir)",263],["if(missing(where))",209],["sQuote(getPackageName(where))),",166],["fdef <- getGeneric(f, where = where)",196],["fdef <- getGeneric(f, where = where)",196],["where <- as.environment(where)",190],["where <- as.environment(where)",190],["where",185],["}, where = envir)",151],["assignClassDef(Class, classDef, where)",109]],"useCount":27218},{"word":"which","context":[["leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")",84],["##' function which makes POST HTTP requests to the API server.",498],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["deleters <- which(unlist(lapply(result, is.null)))",187],["# Get the value which a user either entered directly or was computed",137],["# Get the last expression which the user entered at the R console.",136],["K=5 # Number of subspaces into which the test is projected",110],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["## the name of the pollutant for which we will calculate the",86]],"useCount":21454},{"word":"while","context":[["# To run a while loop to generate different plots",108],["while (limit==0){",56],["while(length(args)) {",162],["while (TRUE) {",136],["# To add 10 to a while loop",108],["while( sum(q_values<q_thresh) <= sig_gene )",103],["while( sum(p_values<p_thresh) <= sig_gene  )",103],["while(TRUE){",97],["while(TRUE) {",65],["while (index < dl.index &&",60]],"useCount":3923},{"word":"white","context":[["#geom_hline(yintercept=-0.01, lty=1, col=\"white\", size=0.6) +",84],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = \"auto\")",122],["pointsize = 12, bg = \"white\")",104],["panel.background = element_rect(fill = \"white\"),",101],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show_guide = FALSE) +",44],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = 82)",41],["colours[j] <- \"white\"",41],["\"white\", if(is.na(res)) NULL else res))",40]],"useCount":3637},{"word":"widget","context":[["tkselection.set      <- function(widget, ...)",11],["# create widget",81],["l_throwErrorIfNotLoonWidget(widget)",46],["#'   you can modify tooltip widget after chart has been generated:",20],["#'   you can modify legend widget after chart has been generated:",20],["#'   you can modify toolbox widget after chart has been generated:",20],["# Create widget",19],["tkcoords        <- function(widget, ...) tcl(widget, \"coords\", ...)",15],["tkcoords        <- function(widget, ...) tcl(widget, \"coords\", ...)",15],["# widget needs a vector for the 'choices' parameter",12]],"useCount":2085},{"word":"width","context":[["\".pdf\"), height = 8.5, width = 11, onefile = TRUE)",190],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["width = 6,",151],["width = 12,",130],["column(width = 6,",129],["width = width,",115],["width = width,",115],["plot[[\"width\"]]  <- 530",107],["width = NULL,",101],["#geom_errorbar(aes(ymin=TransformedNpercentLower, ymax=TransformedNpercentUpper), width=.01,",85]],"useCount":15087},{"word":"will","context":[["##' @param inputParams Either an R object that will be converted into JSON",498],["# some number of the expected events will fail, often (always?) because",122],["# 3 will go all the way across the bottom.",111],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["## the name of the pollutant for which we will calculate the",86],["#'        none is given, an id will automatically be generated.",58],["# Add it to another list (it will be used to adjust the column names in the final sample peaklist)",56],["## This first line will likely take a few seconds. Be patient!",51],["#'                                                  covariates will be created and used in models that",50]],"useCount":9313},{"word":"win","context":[["y.date = \"DateTime_numeric\", index = \"SP\", est.win = 390, digits = 6,",93],["assign(\"win.version\", function() {}, envir = compat)",33],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["if (file.exists(\"Makefile.win\")) {",46],["y.date = \"DateTime_numeric\", index = \"XLY\", est.win = 390, digits = 6,",44],["win",35],["assign(\"win.metafile\",",33],["assign(\"win.print\",",33],["y.date = \"DateTime_numeric\", index = \"XLI\", est.win = 390, digits = 6,",33],["R_files <- c(\"sysdata.rda\", \"Makefile.win\",",33]],"useCount":2655},{"word":"windows","context":[["if(.Platform$OS.type == \"windows\") {",326],["if(.Platform$OS.type == \"windows\")",233],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if (.Platform$OS.type == \"windows\") {",173],["OS_subdirs <- c(\"unix\", \"windows\")",88],["windows(10,10)",88],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71],["OS_subdirs = c(\"unix\", \"windows\"))",70],["if (.Platform$OS.type == \"windows\")",69],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68]],"useCount":3524},{"word":"with","context":[["# update plot legend with only ews line",898],["# distributed with this work for additional information",608],["# along with this program; if not, a copy is available at",314],["Log.info(\"Perform filtering with the '$' sign also\")",254],["# along with this program.  A copy can be cound in the R installation",234],["# You can find out more about building applications with Shiny here:",223],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["# update plot legend with ews and breakpoint lines",898],["function(object, db, with.tables, ...){",154],["### Percent of Landuse with Stream access",130]],"useCount":33722},{"word":"without","context":[["# Redistribution and use in source and binary forms, with or without",77],["## Redistribution and use in source and binary forms, with or without",45],["# log-log plot without log tick marks",76],["else stop(\"-l option without value\", call. = FALSE)",61],["# Check AUC and overall prediction error at least as good with group split than without",40],["## insert the new is relationship, but without any recursive completion",54],["# its class can't be determined here without evaluation.",51],["else stop(\"-o option without value\", call. = FALSE)",80],["## with/without stream access",112],["\" syntax tree without additional information.\\n\"))",51]],"useCount":3326},{"word":"work","context":[["# distributed with this work for additional information",608],["## Find the data sets to work on.",66],["## Find the function objects to work on.",34],["## Then manually adjusted to make work",43],["# the source command to work",41],["## methods for, and then iterating over these.  To make this work",33],["## work well, so mostly disable it",32],["## so we can work in place, and allow ../../foo references.",32],["if (length(work.results)>0) {",32],["# Check for large rate matrix (>= 7 areas; here, sparse matrices will work better)",32]],"useCount":3003},{"word":"write","context":[["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/matrix.json\" )",60],["\"might terminate R nor write to stdout/stderr instead\",",64],["write(\"\",stdout())",71],["stop(\"unable to write code files\")",78],["write.table(",129],["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/typedarray.json\" )",60],["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/accessor.json\" )",60],["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/deepset.json\" )",60],["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/array.json\" )",60]],"useCount":6203},{"word":"writeLines","context":[["##         writeLines(\"\")",61],["writeLines(lines, con)",51],["writeLines(c('<table width=\"100%\">',",48],["writeLines(tmp)",102],["writeLines(\"\", PSOparam.TextFile)",114],["writeLines(\"\")",248],["writeLines(",65],["writeLines(mockFile, fileName)",48],["writeLines(x, con, useBytes = TRUE, ...)",72],["writeLines(format(x))",84]],"useCount":4694},{"word":"wrong","context":[["stop(\"nrows is wrong\")",119],["generated <- grep(\"\\\\.in$\", wrong)",33],["stop(\"row dendrogram ordering gave index of wrong length\")",107],["if(doDelete) unlink(file.path(dir, \"R\", wrong))",33],["if(length(wrong)) {",112],["if(length(generated)) wrong <- wrong[-generated]",33],["#which is wrong, later we will corrected this",34],["if(!inherits(doc, \"pdf_doc\")) stop(\"wrong class\")",42],["gettextf(\"  %s has wrong argument list %s\",",63],["stop(\"column dendrogram ordering gave index of wrong length\")",107]],"useCount":2709},{"word":"www","context":[["#  Part of the R package, https://www.R-project.org",1164],["# www.fgcz.ch",51],["#' @source Based on Australian Bureau of Statistics data \\url{http://www.abs.gov.au/}",52],["# http://www.rstudio.com/shiny/",53],["#   www.rmetrics.org",117],["url <- 'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'",129],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["#' \\url{http://www.mlhim.org}",337],["#  Part of the R package, http://www.R-project.org",3868]],"useCount":7393},{"word":"x","context":[["x <- as.matrix(x)",696],["x <- as.matrix(x)",696],["n <- length(x)",1017],["function(x) {",1328],["function(x)",2000],["function(x, ...)",2129],["invisible(x)",2782],["return(x)",2931],["x",5340],["by.x = \"month.chr\", by.y = \"Month\")",598]],"useCount":240901},{"word":"x1","context":[["weights_column = \"x1\")",82],["y <- j2r(\"x=[x1,x2]\")",30],["# draw some random weights ~ Poisson, add 'x1' weight col and y to df, hdf",31],["x1 <- rpois(n, rep(2, n)) + 1  #Random integer-valued (>=1) weights",31],["rdf$x1 <- 1  #set weights back to 1.0",31],["inner <- !is.leaf(subtree) && x1 != x2",36],["x2 <- x1",40],["x1",40],["x1 <- x[id]",46],["\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\"), row.names = c(\"1\",",50]],"useCount":2972},{"word":"xi","context":[["xij <- xi[[j]]",46],["vlist[[i]] <- xi",47],["xi <- x[[i]]",68],["xi.init = 0, xi.m = 0, xi.s = 0.5,",75],["xi.init = 0, xi.m = 0, xi.s = 0.5,",75],["xi.fix = TRUE, alpha.fix = FALSE,",136],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["beta.attempts = 50, xi.attempts = 50,",87],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["xi.init = 0, xi.m = 0, xi.s = 0.5,",75]],"useCount":2881},{"word":"xlab","context":[["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["xlab(xLab2 ) + ylab( yLab2 ) + ggtitle( title2 )  + MyTheme_1( hjust1=1, vjust1=1,  angle1=30,   textSize=14 ) +",250],["xlab=xlab,",86],["xlab=xlab,",86],["xlab=variable,",90],["xlab = \"Year\",",91],["xlab(\"Year\") +",96],["xlab=\"\",",127],["xlab = \"\",",128],["xlab(\"\") +",204]],"useCount":9700},{"word":"xlim","context":[["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["xlim = xlim,",40],["if (is.null(xlim))",40],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["if (is.null(xlim)) {",62],["xlim=xlim,",51],["xlim=xlim,",51],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50]],"useCount":3360},{"word":"xval","context":[["Xtrain_mean_sd.reduced.xval, ytrain.cat.xval,",44],["Xtrain_quant.reduced.xval, ytrain.cat.xval,",44],["Xtrain_quant.reduced.xval, ytrain.cat.xval,",44],["Xtrain_mean_sd.reduced.xval, ytrain.cat.xval,",44],["Xtrain_quant.scaled.xval, ytrain.cat.xval,",40],["Xtrain_mean_sd.scaled.xval, ytrain.cat.xval,",40],["Xtrain_mean_sd.scaled.xval, ytrain.cat.xval,",40],["v_names <- c(v_names,\"xval\")",259],["#' or \"xval\".",259],["if ( xval ) {",262]],"useCount":2495},{"word":"xx","context":[["if(length(xx) > 1L) {",340],[".pretty_format(sort(xx)))",180],["checkIdentical(expected, xx)",162],[".pretty_format(sort(xx)), msg)",160],["sQuote(xx)), msg)",160],["sQuote(xx))",147],["xx <- pileup(bf, scanBamParam=scanBamParam, pileupParam=pileupParam)",129],["xx",117],["xx <- x",101],["paste(c(\" \", sQuote(xx)), collapse = \" \"),",82]],"useCount":8846},{"word":"xy","context":[["x <- xy$x",62],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["xlab <- if (is.null(xlab)) xy$xlab else xlab",43],["data = xy,",55],["y <- xy$y",60],["xy <- xy.coords(x, y)",63],["xy <- xy.coords(x, y)",63]],"useCount":2483},{"word":"y","context":[["y = y,",232],["y",1571],["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["return(y)",749],["by.x = \"month.chr\", by.y = \"Month\")",598],["cat( y, sep = \",\\n\" )",427],["expected = y",420],["n <- length(y)",315],["y,",269],["y = y,",232]],"useCount":73311},{"word":"year","context":[["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["# Store the total costs by year",48],["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["predictors <- c(\"displacement\",\"power\",\"weight\",\"acceleration\",\"year\")",117],["group_by(year) %>%",96],["year,",69],["ycols <- c(pro_inflam_genes(year),antibody_genes(),ifn_genes())",66],["sentence(authorList(paper), fmtYear(paper$year), sep = \" \"),",63],["names(y$year) <- names(x)",50],["defense <- as.factor(paste(year,\"/\",opponent,sep=\"\"))",49]],"useCount":4273},{"word":"years","context":[["sgp.panel.years=c('2011', '2012', '2013'),",46],["sgp.panel.years.within=c('LAST_OBSERVATION', 'FIRST_OBSERVATION'),",229],["sgp.baseline.panel.years=c('2009', '2010', '2011', '2012', '2013'),",141],["sgp.panel.years.within=c('LAST_OBSERVATION', 'LAST_OBSERVATION', 'FIRST_OBSERVATION'),",122],["sgp.panel.years=c('2011', '2012'),",118],["sgp.panel.years=c('2009', '2010'),",115],["sgp.panel.years=c('2010', '2011'),",111],["sgp.panel.years.within=c('FIRST_OBSERVATION', 'LAST_OBSERVATION'),",69],["sgp.panel.years=c('2012', '2013'),",68],["sgp.panel.years=c('2010', '2011', '2012'),",59]],"useCount":3007},{"word":"ylab","context":[["ylab = \"\",",104],["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["ylab = ylab,",75],["ylab = ylab,",75],["ylab=\"\",",81],["ylab=ylab,",81],["ylab=ylab,",81],["ylab(\"\") +",98],["xlab(xLab2 ) + ylab( yLab2 ) + ggtitle( title2 )  + MyTheme_1( hjust1=1, vjust1=1,  angle1=30,   textSize=14 ) +",250]],"useCount":9284},{"word":"ylim","context":[["if (is.null(ylim))",77],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["if (is.null(ylim)) {",63],["ylim=ylim,",58],["ylim=ylim,",58],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["if(is.null(ylim))",48],["ylim=c(0,1),",48],["ylim = ylim,",78],["ylim = ylim,",78]],"useCount":4509},{"word":"you","context":[["# Set this to True if you want to fetch the data directly from S3.",39],["print(      \"       If you have a header row, then the file line number is off by one.)\")",40],["stop(\"CHIPSTER-NOTE: Your input file is not a sequence file that is compatible with the tool you try to use\")",49],["\"Please ensure that you have complied with it.\\n\")",60],["stop(\"you must specify 'package', 'dir' or 'file'\")",68],["message(\"Press ESC if you want to exit this lesson and you\")",129],["message(\"Press ESC if you want to exit this lesson and you\")",129],["# Unless you have received this program directly from RStudio pursuant",175],["stop(\"you must specify 'package' or 'dir'\")",364],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498]],"useCount":3480},{"word":"z","context":[["z",652],["return(z)",330],["z <- x",111],["z <- as.matrix(z)",83],["stopifnot(inherits(z, \"try-error\"))",83],["z <- as.matrix(z)",83],["z <- NULL",71],["print(z)",70],["if (missing(z)) {",66],["new <- list(z)",63]],"useCount":19450},{"word":"zero","context":[["####### remove zero variance predictors",29],["while (flag !=1) {   # find out where non-zero elements start",48],["# There are some NAs in the integer columns so conversion to zero",36],["warning(gettextf(\"installation of package %s had non-zero exit status\",",35],["variance_zero <- length(grep(\"One or more variables have a variance of zero\", mplus_output))",35],["if (zero.weights) {",33],["zero.print = zero.print, drop0trailing = drop0trailing,",31],["zero.print = zero.print, drop0trailing = drop0trailing,",31],["if (is.null(dc$zero))",29],["dc$zero <- datacircularp$zero",29]],"useCount":2130},{"word":"zz","context":[["zz <- eval(call(if(is.function(method)) \"method\" else method,",36],["close(zz)",197],["seek(zz, 0, \"start\")",57],["on.exit(close(zz))",53],["zz=dev.off()",50],["sink(zz)",45],["zz <- textConnection(\"out\", \"w\", local = TRUE)",44],["sink(zz, type=\"message\")",40],["zz <- file(\"all.Rout\", open=\"wt\")",38],["zz <- as.POSIXlt(z)",36]],"useCount":2107},{"word":"~","context":[["chk.forest.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["sDispersion ~ dunif(0, 5)",48],["formula = ~ 1,",48],["sDensitySite ~ dunif(0, 5)",48],["fit.logit <- spGLM(formula = y.i.o ~ 1, family = \"binomial\",",50],["x <- fsub(\"~\", \"\\\\textasciitilde{}\", x)",53],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["p.byNatSat <- dotplot(Diff ~ country | byVar ,",61],["else if (file.exists(f <- path.expand(\"~/.R/Makevars\")))",88],["#~",124]],"useCount":8955}]