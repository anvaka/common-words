[{"word":"A","context":[["# A list of ignored prefixes for module index sorting.",26155],["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["clean_lines: A CleansedLines instance containing the file.",7423],["# A sample logging configuration. The only tangible logging",6076],["# A dictionary with options for the search language support, empty by default.",5913],["# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",5193],["class A(object):",4936],["\"VALUE\": \"N/A\"",4626],["class A:",4406],["a = A()",4405]],"useCount":1546286},{"word":"API","context":[["self.flags(network_api_class='nova.network.neutronv2.api.API')",1426],[":API: public",1628],["volume_api = cinder.volume.api.API()",2339],["self.stubs.Set(compute_api.API, 'get_all', fake_get_all)",2354],["self.compute_api = compute.API()",2548],["so as to provide a uniform API.",2880],["self.stubs.Set(compute_api.API, 'create', create)",3121],[":param dargs: standardized virsh function API keywords",3124],["old_create = compute_api.API.create",3132],["api = neutronapi.API()",6724]],"useCount":345946},{"word":"Add","context":[["1. Add an import:  from my_app import views",5330],["2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')",5331],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["cls.add_method('Add',",12055],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["1. Add an import:  from other_app.views import Home",5333]],"useCount":544014},{"word":"An","context":[["- An object to be used as a cross-validation generator.",539],["extra_check_functions: An array of additional check functions that will be",561],[":param deserializer: An objec model deserializer.",578],["lines: An array of strings, each representing a line of the file.",677],["An instance has the following attributes at least.",712],[":param serializer: An object model serializer.",739],["include_state: An _IncludeState instance in which the headers are inserted.",755],["\"\"\"An atomic simple type.\"\"\"",917],["raise ServerError('Unknown', 0, 'An unknown server error occurred')",2018],["print \"\\n---An error occurred---\\n\"",24666]],"useCount":219970},{"word":"AndReturn","context":[[".AndReturn(subnet)",927],[".AndReturn(self.networks.list()[1:])",952],[".AndReturn([self.images.list(), False, False])",988],[".AndReturn(self.networks.list()[:1])",994],[".AndReturn([[], False, False])",1144],[".AndReturn([servers, False])",1259],[".AndReturn([])",1347],[".MultipleTimes().AndReturn(True)",2047],[".AndReturn(True)",2571],[".AndReturn(self.flavors.list())",3218]],"useCount":195570},{"word":"Args","context":[["\"\"\"Args is called by calliope to gather arguments for this command.",233],["**Args:**",279],["Args: None",319],["\"\"\"Args:",341],["**Args**:",480],["Args",1301],["def Args(parser):",1580],["Keyword Args:",2135],[":Args:",8206],["Args:",453031]],"useCount":474831},{"word":"AttributeError","context":[["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],["except (AttributeError, KeyError):",2869],["except AttributeError, e:",3440],["except (AttributeError, TypeError):",3586],["except AttributeError as e:",4070],["raise AttributeError(",4795],["raise AttributeError(name)",5743],["raise AttributeError",6216],["with self.assertRaises(AttributeError):",6985],["except AttributeError:",199156]],"useCount":343725},{"word":"AutoField","context":[["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["(\"id\", models.AutoField(primary_key=True)),",3865],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})",3634],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})",5464],["('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),",5911],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",15194],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880]],"useCount":561394},{"word":"B","context":[["# today_fmt = '%B %d, %Y'",2651],["class B(A):",2801],["return B",1090],["_type = reader.read(\"!B\")[0]",1279],["packed.append(struct.pack(\"!B\", self.version))",1288],["_version = reader.read(\"!B\")[0]",1288],["packed.append(struct.pack(\"!B\", self.type))",1288],["b = B()",1605],["class B(object):",1730],["#today_fmt = '%B %d, %Y'",23301]],"useCount":394153},{"word":"BooleanField","context":[["'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",23130],["'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),",2171],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),",2276],["self.gf('django.db.models.fields.BooleanField')(default=False),",2464],["field=models.BooleanField(default=False),",2560],["'deleted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",3142],["'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",3941],["'is_enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",6768],["'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",22795],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",25914]],"useCount":343641},{"word":"C","context":[["return C",2126],["class C(object):",6382],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["class C:",3893],["__copyright__ = '(C) 2012, Victor Olaya'",3700],["c = C()",2678],["<datafield tag=\"999\" ind1=\"C\" ind2=\"5\">",5654],["from ansible import constants as C",1852],["class D(C):",1780]],"useCount":631450},{"word":"CONF","context":[["CONF = config.CONF",5529],["CONF = nova.conf.CONF",1132],["CONF = nova.conf.CONF",1132],["self.compute = importutils.import_object(CONF.compute_manager)",1212],["CONF.import_opt('host', 'nova.netconf')",1235],["f['osapi_compute_extension'] = CONF.osapi_compute_extension[:]",1244],["CONF = config.CONF",5529],["disk_info = blockinfo.get_disk_info(CONF.libvirt.virt_type,",10242],["CONF = cfg.CONF",27871],["CONF = cfg.CONF",27871]],"useCount":381119},{"word":"CharField","context":[["'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})",22044],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27005],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251],["'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",25100],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),",24733],["'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24033],["'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24009],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711]],"useCount":1362138},{"word":"Check","context":[["#Check",2255],["# Check",1910],["# Check response",1895],["cls.add_method('Check',",1648],["# Check that the exception raised corresponds to the native Python behaviour.",1448],["# Check that the right middleware methods have been invoked",1172],["# Check the outbox",1042],["\"\"\"Check if it is possible to execute live migration.",995],["\"Check list response returns a valid list\"",909],["# Check that the PK link exists on the rendered form",820]],"useCount":379432},{"word":"Column","context":[["id = sa.Column(sa.Integer, primary_key=True)",1584],["id = Column(Integer, primary_key=True)",17331],["Column('updated_at', DateTime),",1625],["Column('created_at', DateTime),",1635],["Column('id', Integer, primary_key=True, nullable=False),",1899],["Column(",2828],["sa.Column('id', sa.Integer(), nullable=False),",5002],["Column('id', Integer, primary_key=True),",6014],["id = db.Column(db.Integer, primary_key=True)",10949],["Column('deleted_at', DateTime),",1555]],"useCount":398126},{"word":"Content","context":[["Content-Transfer-Encoding: 7bit",1265],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["headers = {'Content-Type': 'application/json'}",1308],["self.send_header('Content-Type', 'text/html')",1867],["'Content-Type': 'application/json',",2162],["header_params['Content-Type'] = self.api_client.\\",2738],["# HTTP header `Content-Type`",2961],["req.headers['Content-Type'] = 'application/json'",3436],["'Content-Type': 'text/plain',",1305],["'Topic :: Internet :: WWW/HTTP :: Dynamic Content',",4180]],"useCount":296412},{"word":"Create","context":[["# Create your views here.",6501],["# Create your models here.",6451],["cls.add_method('Create',",5576],["M(\"Create\", m=\"create\"),",4453],["# Create the table",2568],["## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]",1189],["## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]",1073],["# Create your tests here.",1006],["## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]",881],["# Create a book and author on the other database",839]],"useCount":435735},{"word":"D","context":[["return D",2591],["#    ipshell('<some message> -- Entering ipshell.\\nHit Ctrl-D to exit')",521],["D = decimal.Decimal",504],["class D(C):",1780],["d = D()",1230],["\"D\",",1082],["from decimal import Decimal as D",856],["D = {}",792],["class D(object):",630],["('D',",554]],"useCount":254769},{"word":"DEBUG","context":[["logger.setLevel(logging.DEBUG)",8303],["logging.basicConfig(level=logging.DEBUG)",7490],["TEMPLATE_DEBUG = DEBUG",11300],["'level': 'DEBUG',",11317],["DEBUG = False",13845],["if DEBUG:",29138],["DEBUG = True",30328],["if settings.DEBUG:",9991],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["logger.DEBUG)",3566]],"useCount":316684},{"word":"DateTimeField","context":[["'date_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",4131],["'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",4500],["'added_time': ('django.db.models.fields.DateTimeField', [], {}),",5427],["'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),",6002],["'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",8463],["'modified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",17539],["'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",18509],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558]],"useCount":433607},{"word":"Default","context":[["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["# Default",889],["Default is False.",1039],["# Default Django apps:",1138],["# A shorter title for the navigation bar.  Default is the same as",1164],["Default class constructor.",1241],["_sym_db = _symbol_database.Default()",1753],["# Default is True.",2257],["# Default options",859],["# A shorter title for the navigation bar.  Default is the same as html_title.",25634]],"useCount":224858},{"word":"Error","context":[["except Error:",1720],["except Error, e:",1316],["raise osv.except_osv(_('Error!'),",1237],["except locale.Error:",1112],["except Error as e:",1100],["except sqlite3.Error as e:",929],["except MySQLdb.Error, e:",2055],["Error(",3216],["class Error(Exception):",6999],["checks.Error(",8129]],"useCount":348611},{"word":"Example","context":[["Example:",50783],["Example::",24402],["CLI Example:",8530],["Example",8494],["# Example configuration for intersphinx: refer to the Python standard library.",5883],["Example usage:",5140],["# Example:",3725],[":Example:",2892],["Example usage::",2648],["# Example: \"/var/www/example.com/media/\"",2135]],"useCount":195255},{"word":"Examples","context":[["# Examples: \"http://foo.com/media/\", \"/media/\".",1733],["CLI Examples:",884],["# Examples: \"http://foo.com/static/admin/\", \"/static/admin/\".",958],["Examples",141778],["Examples:",31034],["# Examples:",7758],["**Examples**",3871],["Examples::",3638],["# Examples: \"http://example.com/media/\", \"http://media.example.com/\"",2105],["**Examples:**",799]],"useCount":209493},{"word":"Exception","context":[["except Exception as e:",271261],["except Exception as e :",11322],["except Exception:",237243],["except Exception, e:",164240],["except Exception as ex:",29167],["except Exception as err:",21051],["except Exception as exc:",16541],["raise Exception(",13857],["except Exception, err:",12342],["except Exception,e:",11988]],"useCount":1255579},{"word":"F","context":[["return F",1153],["from django.db.models import F",1054],["order : {'C', 'F'}, optional",1050],["class F(FilterSet):",734],["F.close()",729],["F, opt = poly_from_expr(f, *gens, **args)",658],["(F, G), opt = parallel_poly_from_expr((f, g), *gens, **args)",612],[":param F:",602],["import chainer.functions as F",558],["YEAR_MONTH_FORMAT = 'F Y'",540]],"useCount":198822},{"word":"FROM","context":[["# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",10765],["FROM mom_id_entity",587],["FROM chain_candidate cc",600],["# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",920],["# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",1351],["FROM (",1415],["# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",1616],["# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",2316],["FROM",7803],["# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",3955]],"useCount":204912},{"word":"False","context":[["return False",1214010],["found = False",24160],["default=False,",45686],["is_extendable=False,",24654],["keep_default=False)",27041],["has_default_value=False, default_value=0,",27657],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["required=False,",32298],["False",43967],["is_extension=False, extension_scope=None,",98490]],"useCount":7742598},{"word":"For","context":[["# individuals. For the exact contribution history, see the revision",2660],["For more details about this platform, please refer to the documentation at",2875],["For example::",3796],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["For example:",11398],["For the full list of settings and their values, see",14104],["# further.  For a list of options available for each theme, see the",24845],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["For more information on this file, see",25647]],"useCount":448476},{"word":"ForeignKey","context":[["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["user = models.ForeignKey(User)",4932],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['sites.Site']\"}),",1948],["'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['cms.Placeholder']\", 'null': 'True'}),",1768],["content_type = models.ForeignKey(ContentType)",1677],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),",1555],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125]],"useCount":376675},{"word":"G","context":[[">>> G.add_path([0,1,2,3])",1209],["if G.is_directed():",689],["G=self.K3",827],["for g in (G, I, Ig, S, L, R):",942],["G = nx.DiGraph()",1071],["G : graph",1336],[">>> G = nx.Graph()   # or DiGraph, MultiGraph, MultiDiGraph, etc",1590],["G = nx.Graph()",1661],["return G",3749],["G : NetworkX graph",1702]],"useCount":191414},{"word":"GET","context":[["req.method = 'GET'",2186],["method='GET')",2299],["'method': 'GET',",2414],["if request.method == \"GET\":",2519],["method='GET',",2861],["environ={'REQUEST_METHOD': 'GET'})",2978],["'GET',",3425],["method = 'GET'",4748],["if request.method == 'GET':",11749],["def GET(self):",5012]],"useCount":354840},{"word":"Get","context":[["# Get the command object to test",1145],["cls.add_method('Get',",19441],["# Get the project root dir, which is the parent dir of this",1397],["# Get the data: the input matrix and the right output.",1226],["## ipv4-address.h (module 'network'): ns3::Ipv4Mask ns3::Ipv4MaskValue::Get() const [member function]",1040],["## address.h (module 'network'): ns3::Address ns3::AddressValue::Get() const [member function]",1040],["## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]",1073],["# Get the long description from the relevant file",1100],["## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]",1142],["## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]",1189]],"useCount":398663},{"word":"H","context":[["_type = reader.read(\"!H\")[0]",1291],["packed.append(struct.pack(\"!H\", 0)) # placeholder for length at index 2",1291],["packed[2] = struct.pack(\"!H\", length)",1297],["packed.append(struct.pack(\"!H\", self.type))",1370],["packed[1] = struct.pack(\"!H\", length)",1381],["return H",1521],["_length = reader.read(\"!H\")[0]",2226],["git sha              : $Format:%H$",829],["__revision__ = '$Format:%H$'",9743],["packed.append(struct.pack(\"!H\", 0)) # placeholder for length at index 1",856]],"useCount":234241},{"word":"HTML","context":[["# HTML files that should be inserted before the pages created by sphinx.",3483],["# base URL from which the finished HTML is served.",25764],["# Output file base name for HTML help builder.",27989],["# Language to be used for generating the HTML full-text search index.",5923],["# -- Options for HTML output ----------------------------------------------",12095],["# -- Options for HTML output ---------------------------------------------------",12541],["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032]],"useCount":312225},{"word":"HTTP","context":[["asynchronous HTTP request, please define a `callback` function",2901],["'Topic :: Internet :: WWW/HTTP :: Dynamic Content',",4180],["\"Topic :: Internet :: WWW/HTTP\",",1711],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["'Topic :: Internet :: WWW/HTTP',",3936],["# HTTP header `Accept`",2961],["exp = 'HTTP/1.1 201'",1742],["Filter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".",2421],["This method makes a synchronous HTTP request by default. To make an",2718],["# HTTP header `Content-Type`",2961]],"useCount":216424},{"word":"I","context":[["buff.write(struct.pack('<I%ss'%length, length, _x))",1778],[":param I:",1326],["buff.write(struct.pack('<I%sB'%length, length, *_x))",952],["'-I',",1441],["for g in (G, I, Ig, S, L, R):",942],["path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]",890],["return I",692],["pack_str = '!I'",680],["# I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have",648],["raise ValueError('I/O operation on closed file')",640]],"useCount":445138},{"word":"ID","context":[["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),",5911],["target_system             : System ID (uint8_t)",4232],["target_component          : Component ID (uint8_t)",3940],["project: Project ID for this request.",1977],[":param aws_access_key_id: Your AWS Access Key ID",1526],["@param uid: ID of the user currently logged in",1196],["@param list_id: the HTML ID of the list",1017],["@param item_id: the HTML ID of the item",884]],"useCount":401792},{"word":"IOError","context":[["except IOError as e:",18875],["except IOError:",85812],["except IOError, e:",13611],["except (IOError, OSError):",4458],["except (OSError, IOError):",3961],["except IOError as err:",3512],["except IOError, err:",3402],["raise IOError",2608],["except (OSError, IOError) as e:",1897],["except (IOError, OSError), e:",1716]],"useCount":225072},{"word":"If","context":[["# If true, an OpenSearch description file will be output, and all pages will",25786],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# If false, no module index is generated.",74645],["# If true, show URL addresses after external links.",44800],["# If false, no index is generated.",29138],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, the index is split into individual pages for each letter.",26818],["# If true, links to the reST sources are added to the pages.",26301],["# If true, the current module name will be prepended to all description",27546]],"useCount":1887680},{"word":"ImportError","context":[["except ImportError, err:",937],["except ImportError:",312685],["except ImportError: # pragma: no cover",1052],["except ImportError as err:",1147],["raise ImportError(",2332],["except ImportError:  # pragma: no cover",2364],["raise ImportError",2371],["except (ImportError, AttributeError):",2497],["except ImportError, e:",6943],["except ImportError as e:",8271]],"useCount":383954},{"word":"In","context":[["# In[ ]:",5185],["# In a Windows environment this must be set to your system time zone.",3640],["# Specify the Python versions you support here. In particular, ensure",1514],["# In applying this licence, CERN does not waive the privileges and immunities",1119],[">>> source = ugentools.In.ar(bus=0)",1110],["# In this case, 'data_file' will be installed into '<sys.prefix>/my_data'",918],["# In[1]:",886],["# In[2]:",822],["# In[3]:",801],["# In[5]:",723]],"useCount":232835},{"word":"Integer","context":[["id = Column(Integer, primary_key=True)",17331],["id = Column(Integer, primary_key=True, nullable=False)",1467],["id = db.Column(db.Integer, primary_key=True)",10949],["Column('id', Integer, primary_key=True),",6014],["Column('id', Integer, primary_key=True,",1422],["sa.Column('id', sa.Integer(), nullable=False),",5002],["Integer,",2685],["Column('id', Integer, primary_key=True, nullable=False),",1899],["id = sa.Column(sa.Integer, primary_key=True)",1584],["Integer(",1628]],"useCount":212617},{"word":"IntegerField","context":[["'year': ('django.db.models.fields.IntegerField', [], {})",4302],["id = models.IntegerField(primary_key=True)",2471],["'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),",2468],["'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),",1488],["field=models.IntegerField(default=0),",1315],["'score': ('django.db.models.fields.IntegerField', [], {'default': '0'})",1260],["'status': ('django.db.models.fields.IntegerField', [], {'default': '2'}),",1196],["'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),",7472],["'display_index': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),",1157],["'legacy_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),",1061]],"useCount":278234},{"word":"Invalid","context":[["raise exception.Invalid(msg)",1539],["except exception.Invalid as e:",328],["except exception.Invalid:",358],["except Invalid as e:",404],["except exception.Invalid as err:",488],["self.assertTemplateUsed(response, \"Invalid POST Template\")",593],["msg_fmt = _(\"Block Device Mapping is Invalid: \"",622],["raise Invalid(",725],["self.assertRaises(exception.Invalid,",1602],["raise InvalidArgumentError(\"Invalid argument: %s.  Expected one of %s\" % (name, \", \".join(required + optional)))",1695]],"useCount":190509},{"word":"It","context":[["# Used for the long_description.  It's nice, because now 1) we have a top level",550],["# It false, will not define \\strong, \\code, \titleref, \\crossref ... but only",520],["Alternative output array in which to place the result. It must",593],["and any production WSGI deployments. It should expose a module-level variable",4331],["# The language of the text. It defaults to the language option",3473],["It will usually be imported through the generic SCons.Tool.Tool()",2569],["# The basename for the epub file. It defaults to the project name.",1860],["# \\brief It tests default settings",1121],["# Create new image. It will be updated in snapshot method",753],["It exposes the WSGI callable as a module-level variable named ``application``.",11555]],"useCount":288914},{"word":"Item","context":[["'std::_List_const_iterator< ns3::AttributeConstructionList::Item >',",2206],["from core.item import Item",1876],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]",1103],["register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]",1103],["cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::name [variable]",1103],["Item(channel=__channel__,",4453]],"useCount":220281},{"word":"KeyError","context":[["except (KeyError, AttributeError):",2211],["except (AttributeError, KeyError):",2869],["except (KeyError, ValueError):",3828],["except (KeyError, TypeError):",3866],["raise KeyError(key)",4992],["except KeyError, e:",5026],["raise KeyError",5349],["with self.assertRaises(KeyError):",5605],["except KeyError as e:",8812],["except KeyError:",281727]],"useCount":412938},{"word":"L","context":[["lorentz = [ L.FFS1, L.FFS2 ],",1241],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["L = ['%s=%r' % (key, value)",21414],["L = []",4244],["return L",2786],["lorentz = [ L.VVSS1 ],",1791],["@type instance: L{objects.Instance}",1330],["packed.append(struct.pack(\"!L\", self.xid))",1288],["obj.xid = reader.read(\"!L\")[0]",1288],["lorentz = [ L.FFS1, L.FFS2 ],",1241]],"useCount":374310},{"word":"LOG","context":[["LOG.error(msg)",13887],["LOG.exception(e)",1695],["LOG = log.getLogger(__name__)",6129],["LOG.debug(msg)",4928],["LOG.debug(",3431],["LOG.warn(msg)",3141],["LOG.exception(msg)",2738],["LOG.info(msg)",2452],["LOG.exception(exc)",1730],["LOG = logging.getLogger(__name__)",51954]],"useCount":452933},{"word":"Language","context":[["'Programming Language :: Python :: 2.7',",22561],["'Programming Language :: Python :: 3.4',",12734],["'Programming Language :: Python',",25184],["# Language code for this installation. All choices can be found here:",7665],["\"Programming Language :: Python\",",8788],["'Natural Language :: English',",10054],["'Programming Language :: Python :: 2.6',",10250],["'Programming Language :: Python :: 3.3',",11570],["'Programming Language :: Python :: 2',",11585],["'Programming Language :: Python :: 3',",15472]],"useCount":241445},{"word":"List","context":[["M(\"List All\"),",1413],["# Grouping the document tree into LaTeX files. List of tuples",27516],["# List of patterns, relative to source directory, that match files and",24527],["# One entry per manual page. List of tuples",23937],["# Grouping the document tree into Texinfo files. List of tuples",21017],["# List of callables that know how to import templates from various sources.",7775],["# List of finder classes that know how to find static files in",6046],["# List of documents that shouldn't be included in the build.",2875],["# List of directories, relative to source directory, that shouldn't be searched",2329],[":type nums: List[int]",1684]],"useCount":352725},{"word":"M","context":[["return M",2535],["# N 為齒數, M 為模數, P 為壓力角",2160],["M(\"New\", m=\"create\"),",1421],["M(\"List All\"),",1413],["#   Paula Sanz Leon, Stuart A. Knock, M. Marmaduke Woodman, Lia Domide,",1091],["M : int",998],["if M == 1:",894],["chamber = \"M -6.8397, -1.4894 \\",887],["if M < 1:",811],["M(\"Create\", m=\"create\"),",4453]],"useCount":331811},{"word":"Make","context":[["# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a",1742],["# Make coding more python3-ish",2640],["# Make this unique, and don't share it with anybody.",7163],["# URL that handles the media served from MEDIA_ROOT. Make sure to use a",7203],["# Make state",1921],["# Make sure the correct queryset is returned",984],["# Make sure to use a trailing slash.",984],["# Make sure djangosecure.middleware.SecurityMiddleware is listed first",837],["# Make sure the correct choice is selected",800],["# Make the request",752]],"useCount":191796},{"word":"Meta","context":[["class Meta:",222941],["'Meta': {'object_name': 'Group'},",25175],["'Meta': {'object_name': 'User'},",22609],["class Meta(object):",10448],["'Meta': {'object_name': 'Tag'},",2835],["'Meta': {'object_name': 'UserProfile'},",2615],["'Meta': {'ordering': \"('domain',)\", 'object_name': 'Site', 'db_table': \"'django_site'\"},",2260],["'Meta': {'object_name': 'Placeholder'},",1908],["'Meta': {'object_name': 'CMSPlugin'},",1785],["'Meta': {'object_name': 'Project'},",1741]],"useCount":662663},{"word":"Migration","context":[["class Migration(migrations.Migration):",81825],["class Migration(SchemaMigration):",36946],["class Migration(DataMigration):",3080],["class Migration:",1185],["migration = objects.Migration.get_by_instance_and_status(",1123],["migration = objects.Migration()",682],["migration = migration_obj.Migration.get_by_instance_and_status(",348],["class Migration(migrations.Migration):",81825],["self.context, objects.Migration(),",279],["self.mox.StubOutWithMock(objects.Migration,",269]],"useCount":224377},{"word":"Mock","context":[["from mock import Mock, patch",3078],["from mock import patch, Mock",1857],["session = mock.Mock()",1843],["from mock import Mock",6273],["mock = Mock()",1454],["self.agent.refresh_firewall = mock.Mock()",1225],["mock.Mock(",1063],["from unittest.mock import Mock",1015],["request = Mock()",940],["return Mock()",1533]],"useCount":242599},{"word":"Model","context":[["class User(db.Model):",1830],["class Person(models.Model):",1678],["class Category(models.Model):",1737],["from msrest.serialization import Model",1832],["'Model': 'models/misc/pir_m_prp_lev_cambarrier_plane' } },",1839],["class Model(object):",2003],["class Model(models.Model):",2459],["class Model(models.Model):",2459],["'Model': 'models/misc/smiley' } },",2496],["bases=(models.Model,),",23314]],"useCount":307371},{"word":"N","context":[["# N 為齒數, M 為模數, P 為壓力角",2160],["for i in range(N):",5803],["for n in range(N):",922],["N : int",1098],["N = 100",1161],["N = 10",1205],["for j in range(N):",1224],["\"VALUE\": \"N/A\"",4626],["import numpy as N",1450],["for i in xrange(N):",1479]],"useCount":316295},{"word":"Name","context":[["label = T(\"Name\"),",1790],["# ('Your Name', 'your_email@example.com'),",3729],["def Name(cls):",3535],["'name': fields.char('Name', required=True),",1228],["# Name",1660],["# ('Your Name', 'your_email@domain.com'),",1587],["'Name',",1132],["def Name(self):",876],["'name': fields.char('Name', required=True, translate=True),",785],["self.Name = Name",692]],"useCount":317786},{"word":"No","context":[["\"\"\"-- No comment or description provided. --",1076],["self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)",988],["<option value=\"3\">No</option>",815],["module_type = None  # No Menu",734],["'No conference found with key: %s' % request.websafeConferenceKey)",627],["def __init__(self, *args, **kwargs): raise AttributeError, \"No constructor defined\"",1279],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined\")",1651],["def __init__(self): raise AttributeError, \"No constructor defined\"",844],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined - class is abstract\")",883],["No argument.",978]],"useCount":391928},{"word":"Node","context":[["if child_.nodeType == Node.ELEMENT_NODE and \\",1190],["'Type': 'Locator Node',",1182],["'__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >',",1982],["'__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >',",1982],["class Node:",2259],["[param('ns3::Ptr< ns3::Node >', 'node')])",2336],["elif child_.nodeType == Node.ELEMENT_NODE and \\",2677],["[param('ns3::Ptr< ns3::Node >', 'node')],",3549],["class Node(object):",3815],["'ns3::Ptr< ns3::Node >',",4184]],"useCount":211871},{"word":"None","context":[["options=None),",95554],["None",39395],["if value is None:",41767],["options=None,",58231],["None,",76591],["message_type=None, enum_type=None, containing_type=None,",100350],["is_extension=False, extension_scope=None,",98490],["message_type=None, enum_type=None, containing_type=None,",100350],["return None",882671],["message_type=None, enum_type=None, containing_type=None,",100350]],"useCount":15218582},{"word":"NotImplementedError","context":[["raise NotImplementedError()",99691],["raise NotImplementedError('%s not implemented' % (",1120],["raise NotImplementedError(url)",1462],["with pytest.raises(NotImplementedError):",1468],["raise NotImplementedError(msg)",2299],["self.assertRaises(NotImplementedError,",3542],["with self.assertRaises(NotImplementedError):",4088],["raise NotImplementedError(",15310],["except NotImplementedError:",17265],["raise NotImplementedError",110441]],"useCount":341643},{"word":"Note","context":[["# Note that extra references to the specific methods implemented in",519],["'note': fields.text('Note'),",524],["queryset = Note.objects.all()",625],["# Note: This key only used for development and testing.",668],[".. Note::",850],["Note: this parameter is tree-specific.",1548],["# Note:",1640],["Note",2682],["Note:",8492],["# Note that not all possible configuration values are present in this",25557]],"useCount":276973},{"word":"OK","context":[["if not retVal[ 'OK' ]:",2480],["self.assertInResponse('OK')",2188],["return (httplib.OK, body, self.json_hdr, httplib.responses[httplib.OK])",3292],["return (httplib.OK, body, self.json_hdr, httplib.responses[httplib.OK])",3292],["if not result[ 'OK' ]:",5595],["return (httplib.OK, body, {}, httplib.responses[httplib.OK])",6412],["return (httplib.OK, body, {}, httplib.responses[httplib.OK])",6412],["self.assertEqual(response.status, '200 OK')",6749],["if not result['OK']:",11353],["if not res['OK']:",12895]],"useCount":232054},{"word":"OSError","context":[["except (IOError, OSError), e:",1716],["except OSError:",72159],["except (OSError, IOError) as e:",1897],["except (OSError, IOError):",3961],["except OSError as exc:",4190],["except (IOError, OSError):",4458],["except OSError, err:",4578],["except OSError as err:",5454],["except OSError, e:",16635],["except OSError as e:",24981]],"useCount":196673},{"word":"Options","context":[["# -- Options for HTML output ----------------------------------------------",12095],["# -- Options for HTML output ---------------------------------------------------",12541],["from resources.datatables import Options",2264],["# -- Options for Texinfo output ------------------------------------------------",7625],["# -- Options for manual page output --------------------------------------------",10335],["Options:",10944],["# -- Options for Texinfo output -------------------------------------------",11851],["# -- Options for LaTeX output ---------------------------------------------",11902],["# -- Options for manual page output ---------------------------------------",11908],["# -- Options for LaTeX output --------------------------------------------------",12392]],"useCount":183384},{"word":"P","context":[["# N 為齒數, M 為模數, P 為壓力角",2160],["<option value=\"P\">Paul</option>",481],["P.run()",2226],["('P',",1826],[":param P:",1433],["return P",1393],["P = self.cls",1331],["\"P\",",1298],[":type P: gp_Pnt",719],["壓力角:<input type=text name=P><br />",509]],"useCount":277389},{"word":"POST","context":[["if request.method == 'POST':",42864],["method = 'POST'",1993],["'POST',",2417],["def POST(self):",2593],["if request.method != 'POST':",3126],["elif request.method == 'POST':",3136],["if request.POST:",5507],["method='POST',",5692],["req.method = 'POST'",10967],["if request.method == \"POST\":",13059]],"useCount":396823},{"word":"Parameters","context":[["Parameters",366949],["p = omero.sys.Parameters()",640],["# Parameters:",915],["Parameters :",937],["Other Parameters",1213],["**Parameters:**",1376],["**Parameters**",1386],["# Parameters",2318],[":Parameters:",24545],["Parameters:",62452]],"useCount":497042},{"word":"Ptr","context":[["'ns3::Ptr< ns3::AttributeValue >',",21161],["[param('ns3::Ptr< ns3::Node >', 'node')])",2336],["[param('ns3::Ptr< ns3::Packet const >', 'packet')])",2999],["[param('ns3::Ptr< ns3::Node >', 'node')],",3549],["'ns3::Ptr< ns3::Node >',",4184],["'ns3::Ptr< ns3::Packet >',",5885],["'ns3::Ptr< ns3::NetDevice >',",6099],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)",2306]],"useCount":264892},{"word":"Python","context":[["'Programming Language :: Python',",25184],["'Programming Language :: Python :: 2.7',",22561],["'Programming Language :: Python :: 3',",15472],["'Programming Language :: Python :: 3.4',",12734],["'Programming Language :: Python :: 2',",11585],["'Programming Language :: Python :: 3.3',",11570],["'Programming Language :: Python :: 2.6',",10250],["\"Programming Language :: Python\",",8788],["'Programming Language :: Python :: 3.5',",6014],["# Example configuration for intersphinx: refer to the Python standard library.",5883]],"useCount":591475},{"word":"Q","context":[["return Q",967],["assert ask(Q.real(z)) is True",461],["assert ask(Q.commutative(z)) is True",377],["from django.db.models.query_utils import Q",469],["query = Q()",496],["q = Q()",512],["assert ask(Q.imaginary(z)) is False",566],["X = eo['Q-X']",630],["from modularodm import Q",1414],["from django.db.models import Q",12385]],"useCount":192286},{"word":"QtCore","context":[["brush.setStyle(QtCore.Qt.SolidPattern)",8401],["from PyQt4 import QtGui, QtCore",4108],["from PySide import QtCore, QtGui",3165],["from PyQt4.QtCore import Qt",1946],["self.buttonBox.setOrientation(QtCore.Qt.Horizontal)",1887],["from PyQt4 import QtCore",4416],["_fromUtf8 = QtCore.QString.fromUtf8",5818],["from PyQt4.QtCore import *",8894],["@QtCore.pyqtSlot()",3394],["from PyQt4 import QtCore, QtGui",11401]],"useCount":185683},{"word":"QtGui","context":[["return QtGui.QApplication.translate(context, text, disambig)",3898],["app = QtGui.QApplication(sys.argv)",6726],["from PyQt4.QtGui import *",8724],["from PyQt4 import QtCore, QtGui",11401],["return QtGui.QApplication.translate(context, text, disambig, _encoding)",3893],["item = QtGui.QTableWidgetItem()",3952],["from PyQt4 import QtGui",5060],["from PyQt4 import QtGui, QtCore",4108],["_encoding = QtGui.QApplication.UnicodeUTF8",3907],["font = QtGui.QFont()",12975]],"useCount":373643},{"word":"Request","context":[["req = Request.blank(",10592],["@webob.dec.wsgify(RequestClass=Request)",1336],["@webob.dec.wsgify(RequestClass=wsgi.Request)",1272],["req = urllib2.Request(url)",3933],["request = urllib2.Request(url)",1984],["req = Request.blank('/sda1/p/a/c/o',",1978],["pkt.Request(8)",1917],["req = Request.blank('/v1/a/c/o',",1808],["pkt.Request(14, [",1458],["class Request(object):",1337]],"useCount":269953},{"word":"Return","context":[["Return",2822],["Return:",14209],["Return type: Int",641],[":Return:",577],["Return value(s):",687],["\"\"\"Return a string representation of this check.\"\"\"",720],["Return value:",1127],["sequence.append(KeyComboAction(\"Return\"))",1163],["'''Return boolean indicating whether this extension is available'''",1795],["# Return",1830]],"useCount":531936},{"word":"Returns","context":[["Returns ugen input.",1911],["Returns true if both objects are equal",1670],["Returns",257560],[":Returns:",5686],["Returns:",364764],["''' Returns True if this instance represents config data else returns False '''",5223],["Returns true if both objects are not equal",1670],["<Returns>",1732],["Returns the model properties as a dict",1862],["Returns the string representation of the model",1863]],"useCount":1150489},{"word":"S","context":[["return S.Zero",6325],["return S.NaN",3572],["return S",1780],["S'summary_display'",3055],["S'score'",3055],["return S.Infinity",2727],["return S.One",2542],[":param S:",2388],["S''",2385],["('S',",1781]],"useCount":460631},{"word":"See","context":[["# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts",2678],["# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/",2904],["# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/",2973],["See:",3348],["See also:",3642],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["See also",16840],["See Also",78907],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032]],"useCount":430386},{"word":"Set","context":[["'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.",2249],["cls.add_method('Set',",23525],["from sets import Set",1808],["self.stubs.Set(utils, 'execute', fake_execute)",1841],[":param dry_run: Set to True if the operation should not actually run.",2063],["self.stubs.Set(fake_image._FakeImageService, 'show', self.fake_show)",2286],["'PORT': '',                      # Set to empty string for default. Not used with sqlite3.",2338],["self.stubs.Set(compute_api.API, 'get_all', fake_get_all)",2354],["from sets import Set as set",2378],["self.stubs.Set(compute_api.API, 'create', create)",3121]],"useCount":508820},{"word":"String","context":[["user_id = Column(String(255))",1054],["name = Column(String)",1063],["name = Column(String(50))",1080],["project_id = Column(String(255))",1388],["colander.String(),",2345],["\"type\": \"String\"",4348],["String,",986],["(core.modules.basic_modules.String,",983],["sa.Column('id', sa.String(length=36), nullable=False),",956],["name = Column(String(255))",921]],"useCount":278095},{"word":"StringIO","context":[["s = StringIO()",2427],["from StringIO import StringIO",23774],["out = six.StringIO()",2473],["output = StringIO()",3194],["out = StringIO()",4854],["from io import StringIO",8725],["from cStringIO import StringIO",17869],["import StringIO",19291],["from StringIO import StringIO",23774],["buf = StringIO()",2350]],"useCount":273214},{"word":"T","context":[["label = T(\"Status\"),",818],["assert_array_equal(clf.predict(T), true_result)",855],[":param T:",1041],["return T",1413],["\"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"",1762],["\"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"",1762],["label = T(\"Name\"),",1790],["import theano.tensor as T",5984],["T = current.T",13042],["T = current.T",13042]],"useCount":567426},{"word":"TODO","context":[["#TODO",2464],["# TODO:",5554],["TODO:",4119],["TODO",3574],["# TODO(Vek): Need to pass context in for access to auth_token",2233],["#TODO:",1204],["})  # TODO: this should be status code 400  # pylint: disable=fixme",976],["# TODO",11043],["# TODO: for Ron: once the appropriate value is placed in TP",916],["# TODO: need better explanation",916]],"useCount":292660},{"word":"Test","context":[["#import sys;sys.argv = ['', 'Test.testName']",1729],["# Test the state alteration",1807],["class Test(object):",1471],["@unittest.skipUnless(settings.ROOT_URLCONF == 'lms.urls', 'Test only valid in lms')",1531],["Test Plan:",1536],["Test file created by XlsxWriter against a file created by Excel.",1725],["# Test the database alteration",1917],["event = Event.objects.get(title='Test event')",2232],["class Test(unittest.TestCase):",4038],["# Test",5688]],"useCount":579037},{"word":"TestCase","context":[["class Basic(unittest.TestCase):",1303],["from unittest import TestCase",18481],["class Foo(unittest.TestCase):",1438],["from twisted.trial.unittest import TestCase",1656],["from unittest import TestCase, main",1673],["unittest.TestCase):",1976],["class TestCase(unittest.TestCase):",2486],["class TestCase(unittest.TestCase):",2486],["class Test(unittest.TestCase):",4038],["from django.test import TestCase",35866]],"useCount":399937},{"word":"TextField","context":[["description = models.TextField()",2405],["'message': ('django.db.models.fields.TextField', [], {}),",2408],["'notes': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",2543],["'content': ('django.db.models.fields.TextField', [], {}),",2656],["'text': ('django.db.models.fields.TextField', [], {}),",2824],["'description': ('django.db.models.fields.TextField', [], {}),",6206],["'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",11344],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["description = models.TextField(blank=True)",2000],["'notes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",2114]],"useCount":253384},{"word":"The","context":[["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# The encoding of source files.",26524],["# The full version, including alpha/beta/rc tags.",26558],["# The short X.Y version.",26964],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# The master toctree document.",28001],["# The font size ('10pt', '11pt' or '12pt').",26707]],"useCount":2852448},{"word":"This","context":[["# This Source Code Form is subject to the terms of the Mozilla Public",12942],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# This file is part of Invenio.",7129],["## This file is part of Invenio.",7510],["# This will get replaced with a git SHA1 when you do a git archive",8306],["# This file is part of Ansible",11217],["*compliance: mandatory -- This method must be implemented.*",11283],["# This file is execfile()d with the current directory set to its",12708],["# This file is execfile()d with the current directory set to its containing dir.",12868]],"useCount":1737644},{"word":"Time","context":[["[param('ns3::Time::Unit', 'timeUnit')],",1899],["[param('ns3::Time::Unit', 'unit')],",1431],["'ns3::Time',",24404],["[param('ns3::Time const &', 'value')])",1151],["cls.add_constructor([param('ns3::Time const &', 'value')])",1151],["register_Ns3Time_methods(root_module, root_module['ns3::Time'])",1151],["[param('ns3::Time const &', 'o')],",1149],["cls.add_constructor([param('ns3::Time const &', 'o')])",1149],["'ns3::Time::Unit',",1149],["## nstime.h (module 'core'): ns3::Time [class]",2250]],"useCount":227252},{"word":"True","context":[["is_virtual=True)",96617],["return True",1076346],["is_const=True, is_virtual=True)",108896],["is_const=True, is_virtual=True)",108896],["is_static=True)",158254],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["while True:",328649],["is_const=True)",361498],["True",103530]],"useCount":12846280},{"word":"Type","context":[["'Type': 'Tree',",3109],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["'Type': 'Bush',",3850],["req.headers['Content-Type'] = 'application/json'",3436],["# HTTP header `Content-Type`",2961],["'Type': 'Rock',",2392],["'Type': 'Collision Barrier',",2382],["'Content-Type': 'application/json',",2162],["self.send_header('Content-Type', 'text/html')",1867],["header_params['Content-Type'] = self.api_client.\\",2738]],"useCount":373913},{"word":"TypeError","context":[["raise TypeError",8173],["with self.assertRaises(TypeError):",24345],["raise TypeError(",17538],["except (ValueError, TypeError):",12070],["except (TypeError, ValueError):",11471],["except TypeError:",81631],["with pytest.raises(TypeError):",6551],["except TypeError as e:",4816],["raise TypeError, \"%s incorrect request type\" % (request.__class__)",4798],["except (KeyError, TypeError):",3866]],"useCount":497934},{"word":"TypeId","context":[["## type-id.h (module 'core'): ns3::TypeId::TypeId(char const * name) [constructor]",1189],["## type-id.h (module 'core'): static ns3::TypeId ns3::TypeId::GetRegistered(uint32_t i) [member function]",1189],["[param('ns3::TypeId', 'other')],",1203],["'ns3::TypeId',",72866],["cls.add_constructor([param('ns3::TypeId const &', 'value')])",1203],["cls.add_constructor([param('ns3::TypeId const &', 'o')])",1203],["register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])",1203],["[param('ns3::TypeId const &', 'value')])",1203],["[param('ns3::TypeId', 'tid')])",2364],["cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)",2847]],"useCount":210975},{"word":"URL","context":[["# Construct URL",8434],["# URL that handles the media served from MEDIA_ROOT. Make sure to use a",7203],["# URL prefix for static files.",5435],["2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')",5331],["2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')",5330],["# URL: http://code.google.com/p/sickbeard/",3955],["# The scheme of the identifier. Typical schemes are ISBN or URL.",3482],["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648],["# base URL from which the finished HTML is served.",25764],["# If true, show URL addresses after external links.",44800]],"useCount":417721},{"word":"Use","context":[["# Use the lxml ElementTree compatible parser so that, e.g.,",594],["- Use Amazon's S3 for storing static files and uploaded media",535],["- Use djangosecure",533],["\"Use this field anywhere a small image is required.\"),",440],["# Use @Retry as hedge against bucket listing eventual consistency.",569],["restricted = False, # Use ACLs to control access to this module",437],["**Use Cases**",427],["# NOTE: Use of DEFERRED VALUE-GETTERs: dictionary fields and list elements",390],["If `weights` is `None`, weights default to 1. Use weights of 0 to mask values.",387],["help=\"Use the test network\")",443]],"useCount":183241},{"word":"User","context":[["model = User",7635],["User = get_user_model()",6207],["'Meta': {'object_name': 'User'},",22609],["except User.DoesNotExist:",10190],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["User = self.classes.User",4320],["User = self.classes.User",4320],["user = models.ForeignKey(User)",4932],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["from django.contrib.auth.models import User",43609]],"useCount":632428},{"word":"ValueError","context":[["except ValueError:",266807],["raise ValueError(",49546],["with self.assertRaises(ValueError):",37193],["raise ValueError",21891],["except ValueError as e:",20908],["with pytest.raises(ValueError):",13084],["raise ValueError(msg)",11751],["except (TypeError, ValueError):",11471],["except ValueError, e:",11356],["except (ValueError, TypeError):",12070]],"useCount":1098490},{"word":"We","context":[["# We intentionally define lots of variables that aren't used, and",1100],["# Either we're using git < 1.8.3, or there really are no tags. We use",776],["# successors. We intend this dedication to be an overt act of",728],["# TODO(sahid): We are converting all calls from a",681],["# We expect a 500 as we injected a fault in the plugin",518],["# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks",2457],["# We import an assistant script that includes the common verifications",463],["3. We need to handle configuration for multiple courses. This could be as",359],["# Brought to you by We Vote. Be good.",421],["2. We should have a more disciplined approach to feature flagging, even if it",359]],"useCount":354851},{"word":"X","context":[["X : array-like, shape = [n_samples, n_features]",2003],["# The short X.Y version.",26964],["X : array-like, shape (n_samples, n_features)",2043],["'Operating System :: MacOS :: MacOS X',",2169],["def fit(self, X, y=None):",2182],["def fit(self, X, y):",2418],["clf.fit(X, y)",3392],["n_samples, n_features = X.shape",3446],["def predict(self, X):",3574],["return X",5271]],"useCount":848620},{"word":"Y","context":[["return Y",1078],["today_fmt = '%B %d, %Y'",781],["# The empty string is equivalent to '%b %d, %Y'.",1348],["html_last_updated_fmt = '%b %d, %Y'",1535],["# html_last_updated_fmt = '%b %d, %Y'",1697],["clf.fit(X, Y)",1783],["# today_fmt = '%B %d, %Y'",2651],["#html_last_updated_fmt = '%b %d, %Y'",22077],["#today_fmt = '%B %d, %Y'",23301],["# The short X.Y version.",26964]],"useCount":354070},{"word":"You","context":[["# You can specify multiple suffix as a list of string:",5614],["You can specify all parameters while calling this methods.",568],["htmltext = \"<html><body>You are either not carrying out your quest or don't meet the criteria.</body></html>\"",554],["# dependencies). You can install these using the following syntax,",602],["# You can find full information here: http://www.zenoss.com/oss",606],["You can contact Cyan Worlds, Inc. by email legal@cyan.com",796],["changes.  You cannot mix in-order arguments and keyword arguments.",1096],["# You can just specify the packages manually here if your project is",1294],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],["print(\"You probably want to also tag the version now:\")",546]],"useCount":190788},{"word":"_","context":[["from django.utils.translation import ugettext_lazy as _",45041],["_ = gettext_set_language(ln)",15162],["from django.utils.translation import ugettext as _",20455],["from openerp.tools.translate import _",13558],["from gettext import gettext as _",6270],["from frappe import _",3132],["from nova.i18n import _",3128],["from nova.openstack.common.gettextutils import _",2988],["help_text=_(",2879],["for _ in range(10):",2840]],"useCount":2490392},{"word":"__class__","context":[["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))",21958],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["self.__class__.__name__,",7355],["raise TypeError, \"%s incorrect request type\" % (request.__class__)",4798],["cls = self.__class__",3562],["return self.__class__.__name__",3217],["self.__class__.__name__)",2183],["oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))",21959],["if not isinstance(other, self.__class__):",2097]],"useCount":356648},{"word":"__dict__","context":[["self.__dict__.update(state)",1662],["return response[0].__dict__['___count']",2974],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["return str(self.__dict__)",1637],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["for key, value in self.__dict__.iteritems()]",20899],["self.__dict__[name] = value",5487],["return self.__dict__ == other.__dict__",3225],["return self.__dict__ == other.__dict__",3225],["self.__dict__.update(kwargs)",2083]],"useCount":230852},{"word":"__file__","context":[["__file__,",1595],["basedir = os.path.abspath(os.path.dirname(__file__))",1625],["os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))",1674],["path = os.path.dirname(os.path.realpath(__file__))",1799],["here = path.abspath(path.dirname(__file__))",2382],["os.path.dirname(__file__),",2648],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["here = os.path.abspath(os.path.dirname(__file__))",3786],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["BASE_DIR = os.path.dirname(os.path.dirname(__file__))",7153]],"useCount":240698},{"word":"__future__","context":[["from __future__ import (absolute_import, division, print_function)",7334],["from __future__ import unicode_literals",196429],["from __future__ import print_function",98595],["from __future__ import absolute_import",94310],["from __future__ import division",56689],["from __future__ import with_statement",19589],["from __future__ import absolute_import, unicode_literals",13263],["from __future__ import absolute_import, division, print_function",10098],["from __future__ import print_function, division",7909],["from __future__ import absolute_import, print_function",6651]],"useCount":611148},{"word":"__init__","context":[["def __init__(self):",560894],["def __init__(self, *args, **kwargs):",130790],["def __init__(self, **kwargs):",47335],["def __init__(self,",36487],["vstruct.VStruct.__init__(self)",34732],["def __init__(self, *args):",25626],["def __init__(self, name):",22064],["def __init__(self, parent):",17574],["def __init__(self, parent=None):",17248],["def __init__(",15385]],"useCount":3064412},{"word":"__main__","context":[["if __name__ == '__main__':",473962],["if __name__ == \"__main__\":",298715],["if __name__=='__main__':",16884],["if __name__==\"__main__\":",12452],["import __main__",2381],["if __name__ == \"__main__\" :",1561],["if __name__ == '__main__' :",1523],["from __main__ import display",1136],["if __name__ == '__main__':  # pragma: no cover",1355],["if '__main__' == __name__:",1732]],"useCount":850989},{"word":"__name__","context":[["logger = logging.getLogger(__name__)",56480],["if __name__ == '__main__':",473962],["if __name__ == \"__main__\":",298715],["LOG = logging.getLogger(__name__)",51954],["log = logging.getLogger(__name__)",39134],["app = Flask(__name__)",21608],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["if __name__=='__main__':",16884],["if __name__==\"__main__\":",12452],["_logger = logging.getLogger(__name__)",11844]],"useCount":1396125},{"word":"__repr__","context":[["strthis = \"proxy of \" + self.this.__repr__()",602],["\"\"\" x.__repr__() <==> repr(x) \"\"\"",418],["__repr__ = _swig_repr",26488],["__repr__ = __str__",6152],["__str__ = __repr__",3126],["return self.__repr__()",2567],["def __repr__ (self):",1520],["def __repr__( self ):",1373],["try: strthis = \"proxy of \" + self.this.__repr__()",1303],["def __repr__(self):",251573]],"useCount":313883},{"word":"__str__","context":[["def __str__(self):",276248],["def __str__(self) :",559],["def __str__ (self):",3160],["def __str__( self ):",3762],["return self.__str__()",4646],["def __str__(self, prefix=\"\", printElemNumber=0):",4792],["__repr__ = __str__",6152],["__str__ = __unicode__",589],["res+=e.__str__(prefix + \"  \", printElemNumber)",1652],["__str__ = __repr__",3126]],"useCount":336617},{"word":"a","context":[["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# All configuration values have a default; values that are commented out",25768],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["# further.  For a list of options available for each theme, see the",24845],["# for a list of supported languages.",26482],["# Else, today_fmt is used as the format for a strftime call.",26971],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["a = 1",37253],["# If your documentation needs a minimal Sphinx version, state it here.",24083]],"useCount":11585045},{"word":"abc","context":[[">>> from sympy.abc import x, y, z",1569],[">>> from sympy.abc import x",9964],[">>> from sympy.abc import x, y",6461],["from abc import ABCMeta, abstractmethod",6266],["@six.add_metaclass(abc.ABCMeta)",5644],["__metaclass__ = abc.ABCMeta",5415],["@abc.abstractproperty",4918],["from abc import abstractmethod",1661],["import abc",12805],["@abc.abstractmethod",45710]],"useCount":244614},{"word":"about","context":[["`introduction` for details about locating elements.",834],["'about': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",830],["from Components.About import about",727],["def about(self):",926],["For more details about this component, please refer to the documentation at",971],["def about(request):",992],["def about():",1501],["For more details about this platform, please refer to the documentation at",2875],["# General information about the project.",27441],["nesting_state: A NestingState instance which maintains information about",720]],"useCount":239820},{"word":"absolute_import","context":[["from __future__ import (absolute_import, division, print_function,",3954],["from __future__ import (absolute_import, division, generators, nested_scopes, print_function,",5714],["from __future__ import absolute_import, division, print_function, unicode_literals",5790],["from __future__ import division, print_function, absolute_import",6265],["from __future__ import absolute_import, print_function",6651],["from __future__ import (absolute_import, division, print_function)",7334],["from __future__ import absolute_import, division, print_function",10098],["from __future__ import absolute_import, unicode_literals",13263],["from __future__ import absolute_import",94310],["from __future__ import division, absolute_import, print_function",4438]],"useCount":205054},{"word":"abspath","context":[["#sys.path.insert(0, os.path.abspath('.'))",15081],["sys.path.insert(0, os.path.abspath('..'))",3908],["here = os.path.abspath(os.path.dirname(__file__))",3786],["here = path.abspath(path.dirname(__file__))",2382],["path = os.path.abspath(path)",2314],["# sys.path.insert(0, os.path.abspath('.'))",1926],["os.path.abspath(",1800],["os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))",1674],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865]],"useCount":245031},{"word":"access","context":[["access = 4",14002],["# pylint: disable=protected-access",8883],["access = 5",6533],["access = 2",5673],["'security/ir.model.access.csv',",4394],["print repr(dict(node = 'variable', name = 'i', vid = id(i), type = str(type(i)), access = 'read', line_offset = 4))",1821],["# TODO(Vek): Need to pass context in for access to auth_token",2233],["# pylint: enable=protected-access",2449],[":param context: The request context, for access checks.",2832],["\"access\" : \"readonly\",",3623]],"useCount":372304},{"word":"account","context":[["accountid=self.account.name,",2030],["acct = raw_input(\"Enter an account (optional): \")",1466],["domainid=self.account.domainid,",2565],["acct = raw_input(\"Enter an account name: \")",2197],["account=self.account.name,",1744],["journal_obj = self.pool.get('account.journal')",1482],["account=self.account.name,",1744],["if account:",1655],["'account',",1540],["return account",1527]],"useCount":442617},{"word":"action","context":[["action='store',",9809],["return action",6774],["action=\"store_true\",",15630],["action='store_true',",27550],["action=\"store\",",6338],["action='store_true')",4637],["for action in actions:",4318],["action=\"store_true\")",3987],["action='append',",3884],["self.action = action",3247]],"useCount":1052278},{"word":"actions","context":[["actions = [",1356],["'type': 'ir.actions.act_window',",7563],["actions = []",4992],["for action in actions:",4318],["return actions",3052],["svntest.actions.run_and_verify_svn(None, None, [],",2258],["return {'type': 'ir.actions.act_window_close'}",2049],["expected_status = svntest.actions.get_virginal_state(wc_dir, 1)",1672],["if actions:",1423],["self.actions = []",1267]],"useCount":243067},{"word":"active","context":[["'active': True,",5036],["'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",3941],["def active(self):",2194],["'status': 'active'}) \\",2271],["status(\"active\")",2553],["self.active = True",2797],["if active:",2832],["'active': False,",3749],["'status': 'active',",3806],["self.active = False",3828]],"useCount":266844},{"word":"actual","context":[["self.assertDatasetIdentical(expected, actual)",2013],["self.assertEqual(actual, expected)",6694],["self.assertEqual(expected, actual)",9025],["assert actual == expected",1784],["self.assertDataArrayIdentical(expected, actual)",1412],["assert expected == actual",985],["self.assertEqual(actual, expect)",913],["self.assertEquals(expected, actual)",842],["# This is the actual test.",735],["ieq(expect, actual)",794]],"useCount":200422},{"word":"add","context":[["# add these directories to sys.path here. If the directory is relative to the",24896],["db.session.add(user)",3460],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],["if add:",2331],["self._router_interface_action('add',",2206],["weaponTemplates.add(weapontemplate)",2162],["responses.add(",1959],["db.session.add(self)",1738],["encontrados.add(url)",1625],["menu.add(menu_item)",1469]],"useCount":1021953},{"word":"add_argument","context":[["p.add_argument(",1417],["argument_group.add_argument(",536],["self.add_argument(",602],["subparser.add_argument(",720],["PARSER.add_argument(",782],["self.parser.add_argument(",979],["arg_parser.add_argument(",1146],["argparser.add_argument(",1916],["group.add_argument(",5036],["parser.add_argument(",71991]],"useCount":206254},{"word":"add_constructor","context":[["cls.add_constructor([param('char const *', 'name')])",1296],["cls.add_constructor([param('char const *', 'address')])",2092],["cls.add_constructor([param('long unsigned int', 'v')])",2220],["cls.add_constructor([param('long long unsigned int', 'v')])",2220],["cls.add_constructor([param('long long int', 'v')])",2220],["cls.add_constructor([param('long int', 'v')])",2220],["cls.add_constructor([])",158817],["cls.add_constructor([param('unsigned int', 'v')])",2220],["cls.add_constructor([param('double', 'v')])",2259],["cls.add_constructor([param('int', 'v')])",2442]],"useCount":394625},{"word":"add_method","context":[["cls.add_method('GetTypeId',",47496],["cls.add_method('DeserializeFromString',",17380],["cls.add_method('SerializeToString',",17380],["cls.add_method('Set',",23525],["cls.add_method('Copy',",22808],["cls.add_method('Deserialize',",20887],["cls.add_method('GetSerializedSize',",18625],["cls.add_method('Get',",19441],["cls.add_method('Print',",20227],["cls.add_method('Serialize',",20718]],"useCount":1335890},{"word":"added","context":[["added = 0",775],["if not added:",683],["added += 1",705],["_schema.debug(\"Table '%s': added column '%s' with definition=%s\",",725],["# If true, links to the reST sources are added to the pages.",26301],[":param dict custom_headers: headers that will be added to the request",8074],["'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",1787],["added = True",1320],["if added:",1240],["added = False",1130]],"useCount":288569},{"word":"addr","context":[["cls.add_constructor([param('ns3::Ipv6Address const &', 'addr')])",1046],["cls.add_constructor([param('ns3::Ipv6Address const *', 'addr')])",1046],["for addr in addrs:",1087],["[param('ns3::Ipv4Address', 'addr')],",1278],["addr = raw_input(\"Address: \")",1470],["self.addr = addr",1782],["self.addr = addr",1782],["return addr",2006],["def buildProtocol(self, addr):",2774],["[param('ns3::Ipv6Address', 'addr')],",2955]],"useCount":183086},{"word":"address","context":[["if address:",2000],["[param('ns3::Mac48Address', 'address')])",2041],["## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]",2080],["## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]",2080],["cls.add_constructor([param('char const *', 'address')])",2092],["[param('char const *', 'address')])",2092],["return address",2702],["self.address = address",5071],["self.address = address",5071],["[param('ns3::Address const &', 'address')],",7988]],"useCount":811800},{"word":"admin","context":[["# Uncomment the admin/doc line below to enable admin documentation:",2891],["from django.contrib import admin",55424],["'django.contrib.admin',",24423],["url(r'^admin/', include(admin.site.urls)),",14085],["url(r'^admin/', include(admin.site.urls)),",14085],["admin.autodiscover()",11945],["# Uncomment the next line to enable the admin:",6792],["# Uncomment the next two lines to enable the admin:",4215],["# Uncomment the next line to enable admin documentation:",3558],["# Uncomment the admin/doc line below to enable admin documentation:",2891]],"useCount":663649},{"word":"after","context":[["# relative to this directory. They are copied after the builtin static files,",26167],["after=(",648],["# If true, show URL addresses after external links.",44800],["# If true, show page references after internal links.",23896],["autodetector = MigrationAutodetector(before, after)",3113],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["# Remove this helper function from the namespace after it is invoked",1607],["# here, relative to this directory. They are copied after the builtin",1149],["if after:",924],["eq_(self.newlines_helper(before), after)",740]],"useCount":464977},{"word":"agent","context":[["self.agent = agent",756],["from neutron.agent.linux import ip_lib",1441],["self.agent.refresh_firewall = mock.Mock()",1225],["# Crawl responsibly by identifying yourself (and your website) on the user-agent",1161],["<header content=\"w3af.org\" field=\"User-agent\"/>",1044],["ri.process(agent)",949],["from neutron.agent.linux import utils",909],["from neutron.agent.common import config",837],["agent = l3_agent.L3NATAgent(HOSTNAME, self.conf)",3830],["agent.process_router(ri)",826]],"useCount":214758},{"word":"all","context":[["plt.close('all')",4050],["all()",9589],[".all()",3258],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["# The reST default role (used for this markup: `text`) to use for all",13427],["# Note that not all possible configuration values are present in this",25557],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# If true, the current module name will be prepended to all description",27546],["# Documents to append as an appendix to all manuals.",47775],["def all(self):",2997]],"useCount":1725213},{"word":"alpha","context":[["# The full version, including alpha/beta/rc tags.",26558],["if alpha:",588],["self.alpha = alpha",3286],["self.alpha = alpha",3286],["# alpha",2449],["alpha : float",2114],["'type': 'alpha'}),",1282],["alpha : float, optional",1032],["name = gen_string('alpha')",998],["alpha=theta-atan(theta)",986]],"useCount":206241},{"word":"already","context":[["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks",2457],["(e.g. data is expected to be already centered).",1125],["# Assuming that base image already exists in image_service",690],["htmltext = \"<html><body>This quest has already been completed.</body></html>\"",565],["# _version.py hasn't already been rewritten with a short version string,",524],["# Check for a pidfile to see if the daemon already runs",519],["# avoid recursion through already copied records in case of circular relationship",446],["# Fill in the code for the functions below. main() is already set up",472],["reason='already created')",484]],"useCount":324223},{"word":"also","context":[["See also:",3642],["See also",16840],["# This is also used if you do content translation via gettext catalogs.",5941],["Usually you will have the standard Django WSGI application here, but it also",4328],["# are also available at http://trac.edgewall.org/wiki/TracLicense.",1771],["# This patterns also effect to html_static_path and html_extra_path",1361],["# for |version| and |release|, also used in various other places throughout",1139],["# documentation-folder for more details. See also http://www.thevirtualbrain.org",1099],["# (see also tpNCellsPerCol)",933],["# |version| and |release|, also used in various other places throughout the",25310]],"useCount":345007},{"word":"an","context":[["# Documents to append as an appendix to all manuals.",47775],["1. Add an import:  from my_app import views",5330],["1. Add an import:  from blog import urls as blog_urls",3078],["middleware here, or combine a Django application with an application of another",4328],["1. Add an import:  from other_app.views import Home",5333],["# performed by this configuration is to send an email to",6083],["# The name of an image file (within the static path) to use as favicon of the",24060],["# The name of an image file (relative to this directory) to place at the top",25393],["# The name of an image file (relative to this directory) to place at the top of",25468],["# If true, an OpenSearch description file will be output, and all pages will",25786]],"useCount":2089744},{"word":"and","context":[["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# List of patterns, relative to source directory, that match files and",24527],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["# |version| and |release|, also used in various other places throughout the",25310],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# Redistribution and use in source and binary forms, with or without",44287],["# Redistribution and use in source and binary forms, with or without",44287]],"useCount":7702834},{"word":"any","context":[["and any production WSGI deployments. It should expose a module-level variable",4331],["# This application object is used by any WSGI server configured to use this",4241],["platforms='any',",3767],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["error: The function to call with any errors found.",7578],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Add any paths that contain templates here, relative to this directory.",27409]],"useCount":809405},{"word":"api","context":[["from nova.api.openstack import wsgi",3192],["@api.multi",38070],["from google.appengine.api import users",4020],["@api.one",13492],["res = req.get_response(self.api)",10660],["api = neutronapi.API()",6724],["from openstack_dashboard import api",4270],["@api.model",22267],["api.nova.flavor_list(IsA(http.HttpRequest)) \\",3259],["from nova.api.openstack import extensions",3314]],"useCount":887502},{"word":"app","context":[["app = flask.Flask(__name__)",5588],["app = Flask(__name__)",21608],["@app.route('/')",12863],["self.app = app",11162],["self.app = app",11162],["return app",10096],["app.run()",8769],["sys.exit(app.exec_())",8680],["app = QtGui.QApplication(sys.argv)",6726],["self.app.update_request(req)",6180]],"useCount":1017519},{"word":"append","context":[["# Documents to append as an appendix to all manuals.",47775],["results.append(result)",3670],["action='append',",3884],["sequence.append(KeyComboAction(\"Down\"))",4371],["items.append(item)",4428],["errors.append(",4636],["lines.append(line)",6242],["try: self.this.append(this)",9720],["sequence.append(utils.AssertPresentationAction(",13276],["sequence.append(utils.StartRecordingAction())",13281]],"useCount":3241598},{"word":"application","context":[["req.headers[\"content-type\"] = \"application/json\"",6023],["application = get_wsgi_application()",16094],["content_type='application/json')",6819],["content_type='application/json',",4881],["This module contains the WSGI application used by Django's development server",4332],["this application via the ``WSGI_APPLICATION`` setting.",4331],["named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover",4331],["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["self.assertEqual(response.content_type, 'application/json')",11194]],"useCount":603809},{"word":"are","context":[["# There are two options for replacing |today|: either, you set today to some",25812],["# .htaccess) here, relative to this directory. These files are copied",11812],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# Note that not all possible configuration values are present in this",25557],["# All configuration values have a default; values that are commented out",25768],["# relative to this directory. They are copied after the builtin static files,",26167],["# If true, links to the reST sources are added to the pages.",26301],["# output. They are ignored by default.",26989]],"useCount":2150427},{"word":"arg","context":[["return arg",6691],["for arg in args:",18737],["if arg is None:",1837],["self.arg = arg",1863],["self.arg = arg",1863],["for arg in sys.argv[1:]:",2119],["for arg in self.args:",2593],["if arg:",2804],["@cliutils.arg(",3460],["for opt, arg in opts:",5200]],"useCount":622458},{"word":"arg0","context":[["cls.add_constructor([param('ns3::AttributeAccessor const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::AttributeValue const &', 'arg0')])",1204],["cls.add_constructor([param('ns3::TypeIdValue const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::EmptyAttributeValue const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::CallbackValue const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::ObjectBase const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::AttributeChecker const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::CallbackChecker const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::CallbackImplBase const &', 'arg0')])",1203],["cls.add_constructor([param('ns3::TypeIdChecker const &', 'arg0')])",1203]],"useCount":190735},{"word":"argparse","context":[["formatter_class=argparse.RawDescriptionHelpFormatter)",1244],["parser = argparse.ArgumentParser(description=description)",784],["parser = argparse.ArgumentParser(description=__doc__)",1355],["formatter_class=argparse.ArgumentDefaultsHelpFormatter)",1648],["formatter_class=argparse.RawDescriptionHelpFormatter,",1992],["help=argparse.SUPPRESS)",4560],["from argparse import ArgumentParser",7253],["parser = argparse.ArgumentParser(",14663],["parser = argparse.ArgumentParser()",23825],["import argparse",95619]],"useCount":202814},{"word":"args","context":[["return args",17618],["def save(self, *args, **kwargs):",18292],["for arg in args:",18737],["args = []",19428],["if args:",21222],["def __init__(self, *args):",25626],["args = parser.parse_args()",61658],["def __init__(self, *args, **kwargs):",130790],["(options, args) = parser.parse_args()",16538],["def handle(self, *args, **options):",16302]],"useCount":3752965},{"word":"argument","context":[["Keyword argument:",935],["Optional argument:",627],["# pylint: disable=unused-argument",5175],["\"Got an unexpected keyword argument '%s'\"",2740],["argument.",2325],["raise InvalidArgumentError(\"Invalid argument: %s.  Expected one of %s\" % (name, \", \".join(required + optional)))",1695],["ur\"\"\" Returns the value of object identifier argument",1166],["\"\"\" Returns the value of object identifier argument",1064],["No argument.",978],["</argument>",940]],"useCount":363641},{"word":"arguments","context":[["Keyword arguments:",15826],["positional arguments:",1959],["TypeError will be raised when the following arguments are not of data type",1980],["arguments = []",2261],["'arguments':",2708],["optional arguments:",3066],["arguments.",3619],["arguments:",3973],["global_params: (StandardQueryParameters, default: None) global arguments",5086],["Optional arguments:",1617]],"useCount":501864},{"word":"argv","context":[["if len(sys.argv) != 2:",5766],["def main(argv):",16114],["execute_from_command_line(sys.argv)",15440],["if len(sys.argv) > 1:",10294],["if len(sys.argv) < 2:",8666],["main(sys.argv)",6784],["main(sys.argv[1:])",6757],["app = QtGui.QApplication(sys.argv)",6726],["from sys import argv",6541],["args = sys.argv[1:]",5666]],"useCount":535242},{"word":"array","context":[["'type': 'array',",2185],["\"type\": \"array\",",2091],["import array",7111],["Input array.",5153],["return array",3211],["from numpy import array",3115],["from array import array",2877],["from array import array",2877],["a = array.array(self.typecode, self.example)",2491],["a = array.array(self.typecode, self.example)",2491]],"useCount":1058581},{"word":"as","context":[["except Exception as e:",271261],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Else, today_fmt is used as the format for a strftime call.",26971],["# unit titles (such as .. function::).",27531],["except Exception as ex:",29167],["import pandas as pd",34598],["from django.utils.translation import ugettext_lazy as _",45041],["# Documents to append as an appendix to all manuals.",47775],["import matplotlib.pyplot as plt",68317],["import numpy as np",265867]],"useCount":5325673},{"word":"assert","context":[["assert r.status_code == 200",4059],["assert False",19948],["assert 0",3552],["assert (",4572],["assert x is not self",4762],["assert True",4798],["assert pretty(expr) == ascii_str",8753],["assert upretty(expr) == ucode_str",9037],["assert response.status_code == 200",9205],["assert resp.status_code == 200",3373]],"useCount":2075346},{"word":"assertEqual","context":[["self.assertEqual(response.status_code, 200)",83327],["self.assertEqual(response.status_code, 403)",7828],["self.assertEqual(response.status_code, status.HTTP_200_OK)",8247],["self.assertEqual(expected, actual)",9025],["self.assertEqual(response.status_code, 404)",9538],["self.assertEqual(response.status_code, 400)",10316],["self.assertEqual(response.content_type, 'application/json')",11194],["self.assertEqual(resp.status_code, 200)",17900],["self.assertEqual(response.status_code, 302)",19450],["self.assertEqual(",297961]],"useCount":4503764},{"word":"assertEquals","context":[["self.assertEquals(resp.status_int, 404)",2055],["self.assertEquals(headers[:len(exp)], exp)",1916],["self.assertEquals(request['body'], expected)",1822],["self.assertEquals(",37509],["self.assertEquals(resp.status_int, 200)",2258],["self.assertEquals(200, response.status_code)",3170],["self.assertEquals(resp.status_int, 201)",3428],["self.assertEquals(response.status_code, 200)",11521],["self.assertEquals(response.status_code, 302)",1519],["self.assertEquals(conn.execute(",1465]],"useCount":421197},{"word":"assertFalse","context":[["self.assertFalse(",11782],["self.assertFalse(f._rolled)",817],["self.assertFalse(isinstance(event, cpp.LoadExceptionEvent))",830],["self.assertFalse(self._run_validation(sample))",780],["self.assertFalse(formset.is_valid())",1023],["self.assertFalse(login.context)",1401],["self.assertFalse(res)",1690],["self.assertFalse(filt_cls.host_passes(host, filter_properties))",1918],["self.assertFalse(result)",5061],["self.assertFalse(form.is_valid())",7050]],"useCount":325478},{"word":"assertIn","context":[["self.assertIn('fake_device', self.agent.devices_to_refilter)",424],["self.assertIn(instance2['uuid'], instance_uuids)",431],["self.assertIn(doc_id, response.headers['Location'])",444],["self.assertIn(c, self.s)",521],["self.assertIn('vm_state', search_opts)",606],["self.assertIn(instance3['uuid'], instance_uuids)",633],["self.assertIn('launched_at', payload)",707],["self.assertIn('display_name', payload)",707],["self.assertIn('created_at', payload)",707],["self.assertIn(",14648]],"useCount":234246},{"word":"assertRaises","context":[["with self.assertRaises(TypeError):",24345],["self.assertRaises(",46517],["with self.assertRaises(ValueError):",37193],["self.assertRaises(webob.exc.HTTPBadRequest,",12597],["with self.assertRaises(AttributeError):",6985],["self.assertRaises(ValueError,",6704],["self.assertRaises(exception.VolumeBackendAPIException,",6072],["with self.assertRaises(Exception):",6054],["with self.assertRaises(ValidationError):",5684],["with self.assertRaises(KeyError):",5605]],"useCount":843195},{"word":"assertTrue","context":[["self.assertTrue(True)",2661],["self.assertTrue(ret)",2063],["self.assertTrue(",39146],["self.assertTrue(result)",9287],["self.assertTrue(formset.is_valid())",2199],["self.assertTrue(f.is_valid())",2349],["self.assertTrue(filt_cls.host_passes(host, filter_properties))",2652],["self.assertTrue(False)",3096],["self.assertTrue(form.is_valid())",7866],["self.assertTrue(res)",3839]],"useCount":791780},{"word":"assert_equal","context":[["assert_equal(res.status_code, 201)",1504],["assert_equal(",10911],["assert_equal(res.status_code, 200)",7867],["assert_equal(res.status_code, 403)",2847],["assert_equal(res.status_code, 401)",1648],["from nose.tools import assert_equal",1938],["yield assert_equal, getattr(outputs.traits()[key], metakey), value",2487],["yield assert_equal, getattr(inputs.traits()[key], metakey), value",2581],["assert_equal(res.status_code, 400)",4884],["assert_equal(test, control)",4837]],"useCount":466538},{"word":"at","context":[["# history and logs, available at http://trac.edgewall.org/log/.",1755],["# (1) Kamaelia Contributors are listed in the AUTHORS file and at",1709],["# The name of an image file (relative to this directory) to place at the top",25393],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["Email                : volayaf at gmail dot com",4345],["For more details about this platform, please refer to the documentation at",2875],["<matplotlib.text.Text object at 0x...>",2526],["# are also available at http://trac.edgewall.org/wiki/TracLicense.",1771],["# The name of an image file (relative to this directory) to place at the top of",25468],["Please have a look at the function description/documentation in the V-REP user manual",1419]],"useCount":809197},{"word":"attr","context":[["def __getattr__(self, attr):",11548],["from nose.plugins.attrib import attr",6701],["@test.attr(type='smoke')",6523],["return attr",5872],["for attr in attrs:",4118],["@test.attr(type='gate')",4107],["@attr('shard_1')",3890],["@test.attr(type=['negative'])",3812],["@test.attr(type=['negative', 'gate'])",3734],["@attr.gpu",3556]],"useCount":520521},{"word":"attribute","context":[[":param dict attributeMap: The key is attribute name",1642],["Not implemented (virtual attribute)",3120],[".. attribute:: name",1232],["for attribute in attributes:",1250],["[param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')],",1258],["</attribute>",1400],[":param dict swaggerTypes: The key is attribute name",1642],["and the value is attribute type.",1642],["attribute.",2629],["The corresponding attribute of the derived class of interest.",3120]],"useCount":422565},{"word":"attributes","context":[["type=attributes.Schema.STRING",1784],["# read attributes",1871],["albeit unimplemented, all the attributes of the ndarray class",2880],["attrs = node_.attributes",1922],["# set attributes",1945],["from neutron.api.v2 import attributes",1996],["attributes = []",2090],["attributes = {}",2289],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],["'attributes': {",4619]],"useCount":429319},{"word":"attrs","context":[["return attrs",7003],["attrs = {}",4436],["def render(self, name, value, attrs=None):",4321],["for attr in attrs:",4118],["def handle_starttag(self, tag, attrs):",2969],["def __new__(cls, name, bases, attrs):",2888],["attrs = {",2841],["if attrs:",2549],["def __init__(self, attrs=None):",2531],["def buildAttributes(self, node, attrs, already_processed):",10335]],"useCount":374317},{"word":"auth","context":[["u'auth.group': {",9992],["'django.contrib.auth.context_processors.auth',",13559],["'django.contrib.auth.context_processors.auth',",13559],["'auth.user': {",14377],["'auth.group': {",15191],["from django.contrib.auth.decorators import login_required",16773],["'django.contrib.auth.middleware.AuthenticationMiddleware',",26570],["'django.contrib.auth',",28733],["from django.contrib.auth.models import User",43609],["'django.contrib.auth.middleware.SessionAuthenticationMiddleware',",10898]],"useCount":800327},{"word":"author","context":[["<author>",1777],["@author  Michael Behrisch",1635],["author:",1637],["</author>",1758],["@author: Kenneth Hoste (Ghent University)",1931],["# (source start file, target name, title, author, documentclass",1938],["[author], 1)",5717],["#  author, documentclass [howto, manual, or own class]).",11744],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title, author,",21198]],"useCount":370572},{"word":"available","context":[["# further.  For a list of options available for each theme, see the",24845],["'status': 'available',",3418],["available.",1933],["'''Return boolean indicating whether this extension is available'''",1795],["# are also available at http://trac.edgewall.org/wiki/TracLicense.",1771],["# history and logs, available at http://trac.edgewall.org/log/.",1755],["self._error('no available options')",1455],["The official definition of this extension is available here:",1424],["def available(self):",1226],["# theme further.  For a list of options available for each theme, see the",1130]],"useCount":378084},{"word":"ax","context":[["ax = fig.add_subplot(111)",7547],["fig, ax = plt.subplots()",4057],["ax = plt.gca()",3489],["return ax",3363],["if ax is None:",3205],["ax.grid(True)",2045],["ax.set_yscale('log')",1311],["ax.legend()",1153],["ax.set_yticks([])",1116],["ax.set_title(title)",1115]],"useCount":203938},{"word":"axis","context":[["if axis == 0:",1607],["axis=0)",1185],["axis=1)",1191],["axis = 0",1292],["a, axis = _chk_asarray(a, axis)",1310],["a, axis = _chk_asarray(a, axis)",1310],["axis : int or None, optional",1678],["plt.axis('off')",2475],["if axis is None:",3906],["axis : int, optional",5050]],"useCount":392833},{"word":"b","context":[["b = 2",34426],["return b''",3162],["return a + b",2885],["self.b = b",3550],["self.b = b",3550],["return b",10332],["self.check(b, a)",10586],["a,b=2,3",12599],["#html_last_updated_fmt = '%b %d, %Y'",22077],["b = 3",34116]],"useCount":2295023},{"word":"back","context":[["# Pass names back to global scope (s3.*)",3483],["# put it back",1734],["def back(self):",1229],["# roll back",785],["\"back\": self.close,",731],[":param client: the client to use.  If not passed, falls back to the",641],["\"back\": self.exit,",568],["back to the source host to check the results.",553],["##     exit_msg = 'Leaving Interpreter, back to program.')",552],["# and send any change back to that same address.",444]],"useCount":184644},{"word":"backend","context":[["self._backend = backend",731],["for backend in auth.get_backends():",514],["if backend is None:",522],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-backend",532],["backend.",648],["ffi = FFI(backend=self.Backend())",712],["backend",839],["self.backend = backend",1493],["self.backend = backend",1493],["from pants.backend.jvm.targets.jar_library import JarLibrary",488]],"useCount":199634},{"word":"bar","context":[["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["'bar'",646],["_class=\"edit-bar fright\",",720],["'bar': {",791],["foo: bar",895],["def bar(self):",1103],["# A shorter title for the navigation bar.  Default is the same as",1164],["def bar():",1196],["bar",1201],["'foo': 'bar',",2314]],"useCount":428402},{"word":"base","context":[["# Output file base name for HTML help builder.",27989],["self.base = base",3001],["# base URL from which the finished HTML is served.",25764],["from django.core.management.base import BaseCommand",10350],["from django.core.management.base import BaseCommand, CommandError",7751],["@base.remotable_classmethod",3897],["return base",3847],["from neutron.tests import base",3164],["self.base = base",3001],["@base.remotable",3079]],"useCount":878379},{"word":"based","context":[["'''Create a new instance based on a JSON dict.",421],["#   needed by permutation.py-based experiments. These values will be resolved",384],["\"\"\"A setuptools based setup module.",425],["# Compute predictionSteps based on the predictAheadTime and the aggregation",427],["# to support value-getter-based substitutions from the sub-experiment (if any)",433],["# ERPNext - web based ERP (http://erpnext.com)",459],["This checks if the live migration can succeed, based on the",461],["# Miro - an RSS based video player application",500],["# Gramps - a GTK+/GNOME based genealogy program",5312],["Class-based views",5333]],"useCount":205817},{"word":"be","context":[["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# Additional templates that should be rendered to pages, maps page names to",25900],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# Add any Sphinx extension module names here, as strings. They can be",14319]],"useCount":3770736},{"word":"because","context":[["# Encode with UTF-8 rather than TransanaGlobal.encoding because this is a prompt, not DB Data.",880],["# fix made because of serval bugs in Qt mac deployment (https://bugreports.qt-project.org/browse/QTBUG-21267)",678],["# Used for the long_description.  It's nice, because now 1) we have a top level",550],["# Compile the list of packages available, because distutils doesn't have",458],["# Config is not correct because of a wrong relative path",397],["# token.split_contents() isn't useful here because this tag doesn't accept variable as arguments",393],["# because the dimension fields are not null=True.",356],["# It's necessary to check if the architecture is power, because",326],["# Same data as above: Forbidden because of unique_together!",312],["# We do not log here, because we have a handler registered",306]],"useCount":259088},{"word":"been","context":[["# all records in the (possibly aggregated) database have been processed,",435],["'title': \"I've been edited!\",",430],["# _version.py hasn't already been rewritten with a short version string,",524],["print ('The credentials have been revoked or expired, please re-run the '",560],["htmltext = \"<html><body>This quest has already been completed.</body></html>\"",565],["`user` is a Django User object. If it hasn't been saved yet (no `.id`",579],["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["# Check that the right middleware methods have been invoked",1172],["\"actions on them. No items have been changed.\")",407],["# Verify reservation has been cleared.",400]],"useCount":319742},{"word":"before","context":[["autodetector = MigrationAutodetector(before, after)",3113],["# before going forward. The exception will be caught",631],["before = time.time()",740],["eq_(self.newlines_helper(before), after)",740],["# Import iris.tests first so that some things can be initialised before",752],["if before:",855],["\"\"\"Run before each test.\"\"\"",921],["before = self.make_project_state([])",1163],["# HTML files that should be inserted before the pages created by sphinx.",3483],["If True, the regressors X will be normalized before regression.",596]],"useCount":370082},{"word":"being","context":[["\"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"",404],["it will look to see if the record being imported is a duplicate.",390],["being performed.  Check the EC2 API guide",434],["filename: Filename of the file that is being processed.",515],["of the record being imported",666],["# is not supported by the underlying hypervisor being",945],["# of the docs.  This file should be a Windows icon file (.ico) being",1137],["the current stack of nested blocks being parsed.",1162],["# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",1585],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040]],"useCount":202067},{"word":"between","context":[["# Choose between 'default' and 'includehidden'.",1873],["If float, should be between 0.0 and 1.0 and represent the",828],["# between branches and tags. By ignoring refnames without digits, we",776],["## a written agreement between you and The Qt Company. For licensing terms",594],["## a written agreement between you and Digia.  For licensing terms and",463],["# between the sub-experiment and base experiment",427],["the interval is between \"a (s)\" and \"b (s)\".",351],["Crossfade time between old and new input. Default to 0.05.",317],["Crossfade time between old and new input. Defaults to 0.05.",305],["F-score that is not between precision and recall.",304]],"useCount":202643},{"word":"bin","context":[["#!/usr/bin/env python3",50325],["#!/usr/bin/env python",502842],["#! /usr/bin/env python",36357],["#!/usr/bin/env python2",17558],["#!/usr/bin/python3",14457],["#! /usr/bin/python",8559],["#!/usr/bin/env python2.7",5347],["#!/bin/env python",4280],["#!/usr/bin/python2",4200],["#!/usr/bin/python",166810]],"useCount":992530},{"word":"binary","context":[["#  Redistribution and use in source and binary forms, with or without",5075],["#     * Redistributions in binary form must reproduce the above",7862],["## \"Redistribution and use in source and binary forms, with or without",2880],["# Redistribution and use in source and binary forms, with or without modification,",2800],["#      * Redistributions in binary form must reproduce the above",2656],["#  * Redistributions in binary form must reproduce the above",1931],["if binary:",1869],["#    * Redistributions in binary form must reproduce the above",1664],["# Redistribution and use in source and binary forms, with or without",44287],["Redistribution and use in source and binary forms, with or without",3711]],"useCount":254175},{"word":"blank","context":[["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),",23830],["blank=True,",27713],["'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24033],["'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24009],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["'modified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",17539],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",11344],["req = Request.blank(",10592],["'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",18509]],"useCount":1233365},{"word":"block","context":[[".. code-block:: python",12815],[".. code-block:: bash",10438],[".. code-block:: none",4487],["return block",3324],["if block:",2678],[".. code-block:: yaml",2544],["if not block:",1775],["for block in blocks:",1552],["<disk type='block'>",1394],[":param block_migration: if true, prepare for block migration",1356]],"useCount":393666},{"word":"body","context":[["<body>",15561],["</body>",18679],["body = json.loads(body)",8219],["body = {",11286],["return body",11062],["body = json.loads(body)",8219],["req.body = jsonutils.dumps(body)",6621],["req.body = jsonutils.dumps(body)",6621],["return (httplib.OK, body, {}, httplib.responses[httplib.OK])",6412],["self.req.body = jsonutils.dumps(self.body)",5931]],"useCount":1188748},{"word":"bool","context":[[":rtype: ``bool``",3593],["doIsolated = cms.bool( False ),",3336],["lessThan = cms.bool( True ),",2827],["'bool',",185937],[":rtype: bool",27142],["SaveTag = cms.untracked.bool( False ),",3226],[":param bool raw: returns the direct response alongside the",7438],["@rtype: bool",5507],["verbose : bool, str, int, or None",5083],["bool",3689]],"useCount":867845},{"word":"boolean","context":[["'active': fields.boolean('Active'),",984],["normalize : boolean, optional, default False",1008],["@rtype: boolean",2813],["copy_X : boolean, optional, default True",1021],["'type': 'boolean',",1126],["type: boolean",1480],["'''Return boolean indicating whether this extension is available'''",1795],["return # boolean",2008],[":rtype: ``boolean``",2059],[":rtype: boolean",2112]],"useCount":204033},{"word":"break","context":[["return \"break\"",4293],["else: break",2801],["#break",1958],["if not line: break",1855],["#    break",1139],["# break",912],["#        break",844],["#         break",758],["break",978022],["break;",15126]],"useCount":1083348},{"word":"browse","context":[["for po in self.browse(cr, uid, ids, context=context):",1077],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["for line in self.browse(cr, uid, ids, context=context):",4037],["for move in self.browse(cr, uid, ids, context=context):",3875],["for order in self.browse(cr, uid, ids, context=context):",2489],["for record in self.browse(cr, uid, ids, context=context):",2384],["for pick in self.browse(cr, uid, ids, context=context):",1985],["user = self.pool.get('res.users').browse(cr, uid, uid, context=context)",1567],["for obj in self.browse(cr, uid, ids, context=context):",1477],["for account in self.browse(cr, uid, ids, context=context):",1203]],"useCount":197837},{"word":"buf","context":[["[param('uint8_t *', 'buf')],",4184],["def parser(cls, buf, offset):",6083],["return buf",6694],["if not buf:",3179],["def serialize(self, buf, offset):",3082],["buf = []",2769],["buf = bytearray()",2562],["buf = StringIO()",2350],["[param('uint8_t const *', 'buf')],",2092],["buf = ''",2006]],"useCount":289550},{"word":"buffer","context":[["[param('uint8_t *', 'buffer')],",2229],["# Generated by the protocol buffer compiler.  DO NOT EDIT!",2521],["[param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])",2090],["[param('uint8_t *', 'buffer'), param('uint32_t', 'size')])",2025],[":param buff: buffer, ``StringIO``",2010],["raise genpy.DeserializationError(e) #most likely buffer underfill",2004],["[param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')],",2846],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318]],"useCount":301067},{"word":"build","context":[["self.build()",1342],["def build(self, node):",10454],["def build(self):",8246],["sbox.build()",3173],["rootObj.build(rootNode)",3113],["# List of documents that shouldn't be included in the build.",2875],["def build():",2024],["def build(self, node_):",1964],["self.build(context, token)",1228],["obj_.build(child_)",20335]],"useCount":357835},{"word":"but","context":[["else:            # this should never happen... but if it does",1203],["Most of them are same to the on-wire counterparts but in host byte order.",534],["#     integrates with CPython, but also works on its own.",546],["# Print empty, but valid XML",616],["# There's gotta be a better way of doing this but we don't wanna",652],["#    but you are not obligated to do so. If you do not wish to do so, delete",804],["# python list, but a \"list-like\" StringVec object",877],["# NOTE(vish): This is no longer used but can't be removed until",1031],["# property including but not limited to intellectual property relating",1267],["Usually you will have the standard Django WSGI application here, but it also",4328]],"useCount":603929},{"word":"button","context":[["return button",1816],["if event.button() == Qt.LeftButton:",735],["for button in buttons:",661],["button.show()",1838],["button.click()",790],["button.add_behavior( {",793],["</button>",927],["if event.button == 3:",1122],["from kivy.uix.button import Button",1294],["if event.button == 1:",1620]],"useCount":192489},{"word":"by","context":[["# revision identifiers, used by Alembic.",11527],["# output. They are ignored by default.",26989],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["### commands auto generated by Alembic - please adjust! ###",10020],["# A dictionary with options for the search language support, empty by default.",5913],["# performed by this configuration is to send an email to",6083],["This module contains the WSGI application used by Django's development server",4332],["# Python dotted path to the WSGI application used by Django's runserver.",4268],["# This application object is used by any WSGI server configured to use this",4241],["# Used by:",4127]],"useCount":1777665},{"word":"bytes","context":[["if isinstance(s, bytes):",1101],["if isinstance(data, bytes):",511],["if isinstance(path, bytes):",526],["def bytes(self):",535],["if isinstance(value, bytes):",1040],["binary_type = bytes",554],[":rtype: bytes",1209],["return bytes",1536],["bytes = str",1021],["def write(self, bytes):",603]],"useCount":282872},{"word":"c","context":[["c.close()",10297],["return c",24795],["instances = self.compute_api.get_all(c,",3385],["if c is None:",3405],["c.save()",3658],["c = Client()",3894],["c += 1",5320],["c = conn.cursor()",5787],["if c:",6005],["c = 0",6982]],"useCount":2257532},{"word":"cache","context":[["@reflection.cache",2926],["from django.core.cache import cache",9125],["from django.core.cache import cache",9125],["cache.clear()",5057],["cache = {}",4008],["'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',",3961],["self.cache = {}",3874],["if cache:",2542],["from django.views.decorators.cache import never_cache",1998],["return cache",1878]],"useCount":493794},{"word":"call","context":[["Traceback (most recent call last):",34604],["error: The function to call with any errors found.",7578],["subprocess.call(",1311],["# Else, today_fmt is used as the format for a strftime call.",26971],["rpc_client.EngineClient.call(",1311],["mock.call.add_rule(",2075],["pyauto_errors.JSONInterfaceError if the automation call returns an error.",2261],["mock.call(",4038],["from subprocess import call",6707],["(self.call.device.RunShellCommand(",1166]],"useCount":687251},{"word":"callback","context":[["return callback(config)",9262],["self.callback = callback",6340],["self.callback = callback",6340],["if callback:",6324],["if callback is not None:",4011],["callback()",3033],[":param callback function: The callback function",2901],["callback = kwargs.pop('callback', self._callback)",9277],["callback = kwargs.pop('callback', self._callback)",9277],["asynchronous HTTP request, please define a `callback` function",2901]],"useCount":407602},{"word":"called","context":[["called = [False]",728],["called[0] = True",749],["self.assertEqual(driver.called, [",795],["self.called()",824],["self.assertTrue(mock_post.called)",830],["called.",1424],["self.called = False",1595],["self.called = True",1959],["called = []",2236],["If the method is called asynchronously,",2901]],"useCount":430578},{"word":"can","context":[["# simple. Or you can use find_packages().",1245],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# NOTE(vish): This is no longer used but can't be removed until",1031],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# Local time zone for this installation. Choices can be found here:",7887],["# Language code for this installation. All choices can be found here:",7665],["# You can just specify the packages manually here if your project is",1294],["# 'zh' user can custom change `jieba` dictionary path.",1350],["# You can specify multiple suffix as a list of string:",5614],["# The unique identifier of the text. This can be a ISBN number",3412]],"useCount":1250129},{"word":"cannot","context":[["changes.  You cannot mix in-order arguments and keyword arguments.",1096],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],[":meth:`.get_content`. Note: the `url` parameter cannot be altered.",420],["RuntimeError - If current platform is not supported/phidget c dll cannot be found",357],["context key, or None if it cannot be resolved to a single",368],["An empty string is returned if the value cannot be determined.",392],["raise TypeError(\"cannot create a YANG container with >1 argument\")",401],["#message fields cannot be None, assign default values for those that are",975],["assert self._transient, \"Model %s is not transient, it cannot be vacuumed!\" % self._name",442],["print \"JSON-RPC: cannot JSON-decode body\"",439]],"useCount":185136},{"word":"case","context":[["# case.",667],["@staticmethod # known case of __new__",2472],["from casexml.apps.case.models import CommCareCase",641],["VirtualBox OSE distribution, in which case the provisions of the",654],["# These are the compilation flags that will be used in case there's no",685],["yield case(",725],["# In this case, 'data_file' will be installed into '<sys.prefix>/my_data'",918],["\"\"\" converts nitro response into object and returns the object array in case of get request.",1064],["for case in cases:",1614],["ur\"\"\" converts nitro response into object and returns the object array in case of get request.",1166]],"useCount":436085},{"word":"category","context":[["self.category = category",2435],["#  dir menu entry, description, category)",20993],["'category': category,",1212],["'category': category,",1212],["else:    # category == MixedContainer.CategoryComplex",1380],["elif self.category == MixedContainer.CategorySimple:",1389],["if self.category == MixedContainer.CategoryText:",1389],["for category in categories:",1993],["if category:",2162],["self.category = category",2435]],"useCount":322866},{"word":"cfg","context":[["CONF = cfg.CONF",27871],["from oslo.config import cfg",17813],["self.assertIsInstance(cfg.devices[2],",3216],["return cfg",3013],["self.assertIsInstance(cfg.devices[1],",2966],["self.assertIsInstance(cfg.devices[0],",2888],["self.assertIsInstance(cfg.devices[3],",2635],["self.assertIsInstance(cfg.devices[4],",2466],["self.assertIsInstance(cfg.devices[5],",2336],["from oslo_config import cfg",24094]],"useCount":495705},{"word":"change","context":[["# If you want change the content of this file, edit",741],["if not change:",612],["change = False",829],["# Most projects will NOT need to set this to anything; you can just change the",829],["if change:",993],["for change in changes:",1114],["# 'zh' user can custom change `jieba` dictionary path.",1350],["change = True",1973],["def save_model(self, request, obj, form, change):",2327],["ssS'change'",623]],"useCount":275458},{"word":"changed","context":[["changed = False",11095],["if changed:",5586],["return changed",4777],["self.changed = True",3732],["self.changed()",2725],["module.exit_json(changed=True)",2132],["self.changed = False",1759],["result['changed'] = True",1248],["self.result['changed'] = True",1248],["changed = True",20176]],"useCount":250616},{"word":"changes","context":[["changes = autodetector._detect_changes()",3423],["# WARNING! All changes made in this file will be lost!",10033],["return changes",2218],["changes = []",1881],["self.assertNumberMigrations(changes, 'testapp', 1)",1629],["# Do not make changes to this file unless you know what you are doing--modify",1627],["if changes:",1409],["'changes': {},",1200],["for change in changes:",1114],["changes.  You cannot mix in-order arguments and keyword arguments.",1096]],"useCount":205936},{"word":"channel","context":[["self.channel = channel",2859],["self._state.channel = _channel",3295],["self.channel = channel",2859],["for channel in channels:",2133],["return channel",1329],["if channel:",1302],["if not channel:",1216],["channel = connection.channel()",1176],["channel = connection.channel()",1176],["Item(channel=__channel__,",4453]],"useCount":280037},{"word":"char","context":[["return char",1112],["## type-id.h (module 'core'): ns3::TypeId::TypeId(char const * name) [constructor]",1189],["'name': fields.char('Name', required=True),",1228],["cls.add_constructor([param('char const *', 'name')])",1296],["self.BrokerID = '' #经纪公司代码, char[11]",1461],["[param('char const *', 'buffer'), param('size_t const', 'size')])",1476],["self.convertToDB(obj.db_entity_type, 'str', 'char(16)')",1512],["cls.add_constructor([param('char const *', 'address')])",2092],["[param('char const *', 'address')])",2092],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318]],"useCount":277819},{"word":"check","context":[["check = True",1669],["def check():",1683],["self.check(b, a)",10586],["linenum: The number of the line to check.",6993],["def check(self):",6689],["if check:",3579],["check_list.append(check)",2726],["# sanity check",2018],["return check",1975],["check = False",1783]],"useCount":713922},{"word":"child","context":[["for child in to_del:",1881],["if child.has_changes():",1936],["for child in node.getchildren():",2036],["for child in node.children:",2268],["return child",4163],["for child in self.children:",5610],["for child in children:",5628],["self.buildChildren(child, node, nodeName_)",10147],["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["for child in node:",12452]],"useCount":445291},{"word":"children","context":[["children = []",8954],["return children",5755],["for child in children:",5628],["for child in self.children:",5610],["self.children = []",4485],["def children(self):",4278],["if children:",2647],["for child in node.children:",2268],["for c in self.children:",1658],["children.append((self, parent[0], parent[1]))",1494]],"useCount":297984},{"word":"choices","context":[["choices=(",1454],["self.choices = choices",1520],["self.choices = choices",1520],["choices=[",1588],["choices:",1729],["return choices",1927],["choices = []",2763],["choices: [ \"yes\", \"no\" ]",3598],["# Language code for this installation. All choices can be found here:",7665],["choices = [",2157]],"useCount":253803},{"word":"class","context":[["class Meta:",222941],["class Migration(migrations.Migration):",81825],["class Migration(SchemaMigration):",36946],["class Command(BaseCommand):",19252],["#  author, documentclass [howto, manual, or own class]).",11744],["class Meta(object):",10448],["class Solution(object):",8707],["class Solution:",8131],["class Error(Exception):",6999],["'class': 'django.utils.log.AdminEmailHandler'",6831]],"useCount":5339272},{"word":"classes","context":[["classes = (\"ajax-modal\",)",1822],["# List of finder classes that know how to find static files in",6046],["for cls in classes:",1342],["User, Address = self.classes.User, self.classes.Address",1468],["User, Address = self.classes.User, self.classes.Address",1468],["self.classes.Address,",1639],["# Import appropriate classes from the client library.",1826],["classes = []",2000],["self.classes.User)",2278],["User = self.classes.User",4320]],"useCount":246486},{"word":"classmethod","context":[["@classmethod",618674],["parse = classmethod(parse)",206],["id_for_label = classmethod(id_for_label)",226],["from_text = classmethod(from_text)",236],["from_wire = classmethod(from_wire)",256],["supported = classmethod(supported)",262],["#     @classmethod",357],["#    @classmethod",390],["# @classmethod",442],["#@classmethod",942]],"useCount":635638},{"word":"clean","context":[["def clean(self):",20697],["clean()",945],["self.assertRaisesMessage(ValidationError, \"'This field is required.'\", f.clean, '')",1095],["self.assertRaisesMessage(ValidationError, \"'This field is required.'\", f.clean, None)",1158],["def clean():",1450],["if clean:",1689],["# clean up",2260],["self.clean()",2367],["def clean(self, value):",5160],["self.assertEqual('', f.clean(''))",670]],"useCount":189345},{"word":"clear","context":[["def clear():",1436],["elem.clear()",1607],["model.clear()",1858],["clear()",2008],["if clear:",2134],["os.system('clear')",2293],["cls.add_method('clear',",4217],["cache.clear()",5057],["self.clear()",13030],["def clear(self):",26154]],"useCount":244854},{"word":"client","context":[["# Initialize client object.",4889],["response = self.client.post(",12406],["self.client.logout()",14930],["response = self.client.get(",11094],["response = self.client.get(url)",23349],["self.client = client",5974],["self.client = client",5974],["client.close()",5637],["r = self.client.get(self.url)",5337],["return client",5311]],"useCount":1515374},{"word":"close","context":[["fp.close()",30675],["os.close(fd)",13483],["s.close()",14661],["fd.close()",16585],["cursor.close()",17115],["file.close()",27296],["conn.close()",29263],["self.close()",55481],["def close(self):",64029],["f.close()",207025]],"useCount":1402539},{"word":"cls","context":[["cls.add_constructor([])",158817],["cls.add_method('GetTypeId',",47496],["def setUpClass(cls):",26359],["cls.add_method('Set',",23525],["cls.add_method('Copy',",22808],["cls.add_method('Deserialize',",20887],["cls.add_output_stream_operator()",20759],["cls.add_method('Get',",19441],["cls.add_method('Print',",20227],["cls.add_method('Serialize',",20718]],"useCount":3190143},{"word":"cluster","context":[["self.cluster = cluster",612],["return cluster",998],["self.cluster = cluster",612],["cluster=cluster)",611],["cluster=cluster)",611],["cluster = self.cluster",2344],["cluster = self.cluster",2344],["cluster.shutdown()",626],["from sklearn.cluster import KMeans",1014],["for cluster in clusters:",1162]],"useCount":187649},{"word":"cmd","context":[["print cmd",5277],["return command(cmd, **dargs)",1904],["cmd,",2096],["columns, data = self.cmd.take_action(parsed_args)",2154],["self.cmd = cmd",3156],["return cmd",7897],["self.cmd = cmd",3156],["parsed_args = self.check_parser(self.cmd, arglist, verifylist)",3682],["cmd = [",5089],["os.system(cmd)",7448]],"useCount":694797},{"word":"cms","context":[["doIsolated = cms.bool( False ),",3336],["SaveTag = cms.untracked.bool( False ),",3226],["L1GtReadoutRecordTag = cms.InputTag( 'hltGtDigis' )",3087],["ncandcut = cms.int32( 1 ),",3045],["cms.PSet(",2916],["lessThan = cms.bool( True ),",2827],["L1IsoCand = cms.InputTag( 'hltL1IsoRecoEcalCandidate' ),",2520],["L1NonIsoCand = cms.InputTag( 'hltL1NonIsoRecoEcalCandidate' )",2520],["appendToDataLabel = cms.string( \"\" ),",2031],["thrOverE2EE = cms.double( -1.0 ),",1966]],"useCount":378700},{"word":"code","context":[["code = \"\"\"",4163],["# URL: http://code.google.com/p/sickbeard/",3955],[".. code-block:: none",4487],["# Language code for this installation. All choices can be found here:",7665],["self.code = code",7845],["self.code = code",7845],["return code",7996],["code.putln(",8737],[".. code-block:: bash",10438],[".. code-block:: python",12815]],"useCount":1359695},{"word":"coding","context":[["# coding: utf-8",46132],["# -*- coding: utf-8 -*-",857663],["#coding=utf-8",6244],["# -*- coding: iso-8859-1 -*-",6476],["#-*- coding: utf-8 -*-",10232],["# -*- coding: utf8 -*-",12606],["# -*- coding:utf-8 -*-",14143],["# -*- coding: UTF-8 -*-",20183],["# coding=utf-8",45684],["#-*- coding:utf-8 -*-",4982]],"useCount":1120565},{"word":"col","context":[["col = layout.column(align=True)",1538],["col = split.column()",4267],["col += 1",3121],["col = 0",3002],["for col in cols:",1825],["row = col.row(align=True)",1657],["return col",1641],["col.separator()",1608],["col = layout.column()",1503],["for col in columns:",1138]],"useCount":227644},{"word":"collections","context":[["from collections import defaultdict, OrderedDict",837],["from collections import defaultdict, namedtuple",868],["from collections import Mapping",1017],["from collections import defaultdict",35412],["import collections",47480],["from collections import OrderedDict",28869],["from collections import namedtuple",20604],["from collections import deque",9795],["from collections import Counter",7145],["from collections import Iterable",1294]],"useCount":250775},{"word":"color","context":[["self.color = color",4895],["self.color = color",4895],["color = [ '1' ],",3272],["if color:",2579],["return color",2151],["if color is None:",1585],["if color is not None:",1458],["color = [ 'Identity(2,3)' ],",1292],["def color(self):",1025],["color = None",983]],"useCount":327530},{"word":"column","context":[["col = layout.column()",1503],["col = layout.column(align=True)",1538],["self.column = column",1884],["col = split.column()",4267],["\"nodetype\" : \"column\",",3664],["}, # column",3664],["column = FloatCol",1803],["for column in columns:",2296],["column = IntCol(val_type = \"monetary\")",1855],["self.column = column",1884]],"useCount":421648},{"word":"columns","context":[["columns, data = self.cmd.take_action(parsed_args)",2154],["dbCommand = self.createSQLSelect(table, columns, whereMap, orderBy, lock)",1196],["columns = self.column_classes(Author)",1542],["self.columns = columns",1691],["self.columns = columns",1691],["def columns(self):",1993],["columns = []",3657],["return columns",2397],["columns = [",2220],["for column in columns:",2296]],"useCount":269959},{"word":"com","context":[["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["# URL: http://code.google.com/p/sickbeard/",3955],["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["Email                : volayaf at gmail dot com",4345],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956]],"useCount":1183262},{"word":"command","context":[["command=(",2886],["command)",3052],["os.system(command)",3459],["return command",3952],["@click.command()",4088],["self.command = command",4220],["self.command = command",4220],["@manager.command",4463],["# Usually you set \"language\" from the command line for these cases.",5937],["@cli.command()",3346]],"useCount":823152},{"word":"commands","context":[["### commands auto generated by Alembic - please adjust! ###",10020],["### end Alembic commands ###",10050],["import commands",7730],["commands = []",4961],["named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover",4331],["for command in commands:",2566],["return commands",2409],["fake_cli = self.driverSetup(commands, results)",1706],["commands.append(command)",1483],["commands = [",1332]],"useCount":259219},{"word":"comment","context":[["self.comment = comment",2762],["'comment': '',",3557],["comment = DIV(_class=\"tooltip\",",3509],["self.comment = comment",2762],["comment.save()",1939],["for comment in comments:",1461],["return comment",1384],["comment = ''",1328],["if comment:",3731],["comment = raw_input(\"Comment (optional): \")",2932]],"useCount":328057},{"word":"commit","context":[["if commit:",7267],["self.session.commit()",6642],["def commit(self):",6833],["transaction.commit()",7257],["self.conn.commit()",7628],["cr.commit()",8180],["db.commit()",15012],["conn.commit()",15717],["session.commit()",21114],["db.session.commit()",39672]],"useCount":347491},{"word":"common","context":[["if common.verbose:",5955],["import common",6095],["from .common import InfoExtractor",4935],["from nova.openstack.common import log as logging",7265],["'django.middleware.common.CommonMiddleware',",27943],["from nova.openstack.common import jsonutils",3335],["from neutron.openstack.common import log as logging",3288],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["from nova.openstack.common.gettextutils import _",2988],["from tempest.common.utils import data_utils",2899]],"useCount":594975},{"word":"compile","context":[["matches = re.compile(patronvideos,re.DOTALL).findall(data)",2084],["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["def compile(self):",1800],["matches = re.compile(patron, re.DOTALL).findall(data)",1079],["# Anyone is free to copy, modify, publish, use, compile, sell, or",730],["pattern = re.compile(",716],["_regexp_compile_cache[pattern] = sre_compile.compile(pattern)",664],["from re import compile",654],["url = re.compile('//.+?/([\\w]+)').findall(url)[0]",591],["regex = re.compile(",559]],"useCount":276115},{"word":"compute","context":[["self.compute.terminate_instance(self.context, instance, [], [])",4923],["from nova.compute import vm_states",3532],["self.compute.build_and_run_instance(self.context, instance, {}, {}, {},",2487],["self.compute_api = compute.API()",2548],["from nova.compute import flavors",2665],["from nova import compute",2678],["self.mox.StubOutWithMock(self.compute,",2719],["self.compute.run_instance(self.context, instance=instance)",2729],["from nova.compute import task_states",3119],["def compute(self, EV):",2737]],"useCount":455262},{"word":"conf","context":[["self.conf = conf",4307],["from django.conf import settings",146012],["from django.conf.urls import patterns, include, url",15417],["from django.conf.urls import url",13016],["from django.conf.urls import patterns, url",12368],["from django.conf.urls import include, url",8033],["from django.conf.urls.defaults import *",7132],["@conf",5788],["from django.conf.urls.static import static",4736],["return conf",4474]],"useCount":676581},{"word":"config","context":[["self.config = config",16331],["from oslo.config import cfg",17813],["config = ET.Element(\"config\")",9129],["config = ET.Element(\"config\")",9129],["return callback(config)",9262],["def __init__(self, config):",9329],["config = {",10818],["import config",14860],["self.config = config",16331],["return config",16780]],"useCount":1798439},{"word":"configuration","context":[["# The name of a javascript file (relative to the configuration directory) that",5913],["# All configuration values have a default; values that are commented out",25768],["# Note that not all possible configuration values are present in this",25557],["# -- General configuration -----------------------------------------------------",12513],["# -- General configuration ------------------------------------------------",11987],[":param operation_config: :ref:`Operation configuration",6589],["# more details on how to customize your logging configuration.",6170],["# performed by this configuration is to send an email to",6083],["# A sample logging configuration. The only tangible logging",6076],["# Example configuration for intersphinx: refer to the Python standard library.",5883]],"useCount":447539},{"word":"conn","context":[["conn.close()",29263],["conn.commit()",15717],["self.conn.commit()",7628],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)",7492],["cur = conn.cursor()",6537],["return conn",6197],["cursor = conn.cursor()",6176],["c = conn.cursor()",5787],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)",5112],["self.conn.close()",4259]],"useCount":627957},{"word":"connect","context":[["def connect(self):",11955],["client.connect()",905],["c1 = p.connect()",915],["s.connect((host, port))",983],["conn = engine.connect()",1182],["def connect():",1237],["connection = engine.connect()",1268],["self.connect()",6800],["conn.connect()",2025],["frappe.connect()",1508]],"useCount":349781},{"word":"connection","context":[["connection.close()",11290],["with connection.schema_editor() as editor:",13909],["self.connection.close()",4444],["cursor = connection.cursor()",13131],["self.connection = connection",6506],["self.connection = connection",6506],["from django.db import connection",6172],["self.connection = None",4811],["def __init__(self, connection):",3751],["connection.commit()",3795]],"useCount":728108},{"word":"const","context":[["[param('ns3::Address const &', 'address')],",7988],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["[param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])",4771],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["[param('ns3::EventId const &', 'id')],",3761],["[param('ns3::Ipv4Mask const &', 'mask')],",3138],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('ns3::Ptr< ns3::Packet const >', 'packet')])",2999]],"useCount":1056095},{"word":"constants","context":[["from OpenGL import platform, constants, constant, arrays",980],["from constants import *",2637],["# constants",2380],["from neutron.common import constants",2254],["from ansible import constants as C",1852],["from ganeti import constants",1818],["from neutron.plugins.common import constants",1288],["from pylib import constants",1243],["from . import constants",1114],["import constants",2527]],"useCount":276281},{"word":"constructor","context":[["def __init__(self, *args, **kwargs): raise AttributeError, \"No constructor defined\"",1279],["Default class constructor.",1241],["constructor.",1719],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined\")",1651],["## type-id.h (module 'core'): ns3::TypeId::TypeId() [constructor]",1189],["## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeId const & value) [constructor]",1189],["## type-id.h (module 'core'): ns3::TypeId::TypeId(ns3::TypeId const & o) [copy constructor]",1189],["## empty.h (module 'core'): ns3::empty::empty(ns3::empty const & arg0) [copy constructor]",1189],["## type-id.h (module 'core'): ns3::TypeIdValue::TypeIdValue(ns3::TypeIdValue const & arg0) [copy constructor]",1189],["## attribute.h (module 'core'): ns3::AttributeValue::AttributeValue() [constructor]",1189]],"useCount":339299},{"word":"contain","context":[["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# Add any paths that contain custom static files (such as style sheets)",1149],["# will contain a <link> tag referring to it.  The value of this option",1135],["# Add any paths that contain templates here, relative to this directory.",27409],["# Email subject *must not* contain newlines",785],["# directories (produced by setup.py build) will contain a much shorter file",712],["(crashes, non-termination) if the inputs do contain infinities or NaNs.",611]],"useCount":234461},{"word":"container","context":[["id = container['Id']",996],["'container', 'object')",1186],["<div class=\"container\">",1224],["..  container:: example",5620],["return container",1951],["self.container = container",1836],["self.container = container",1836],["if container:",1117],["for container in containers:",1158],["differing.append(container)",1438]],"useCount":300851},{"word":"containing","context":[["# This file is execfile()d with the current directory set to its containing dir.",12868],["# Set this to the absolute path to the folder (NOT the file!) containing the",830],["spec: The target dictionary containing the properties of the target.",839],[":param task: a TaskManager instance containing the node to act on.",1446],["# A tuple containing the cover image and cover page html template filenames.",3089],["# The format is a list of tuples containing the path and title.",6966],["clean_lines: A CleansedLines instance containing the file.",7423],["# This file is execfile()d with the current directory set to its containing",458],["# containing dir.",12692],["containing parts covered by the terms of the Bink SDK EULA, 3ds Max EULA,",796]],"useCount":225770},{"word":"contains","context":[["\"/span[contains(@class, 'arrow')]\")),",609],["contains:",448],["def contains(self, other):",464],["\"condition\": \"contains\"",484],["# For simplicity, this file contains only settings considered important or",531],["(\"//div[contains(@style,'static') or contains(@style, 'fixed')]\"",592],["(\"//div[contains(@style,'static') or contains(@style, 'fixed')]\"",592],["# that just contains the computed version number.",712],["# For simplicity, this file contains only the most important settings by",726],["This module contains the WSGI application used by Django's development server",4332]],"useCount":200937},{"word":"content","context":[["f.write(content)",4129],["self.content = content",4424],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["return content",14274],["req.headers[\"content-type\"] = \"application/json\"",6023],["# This is also used if you do content translation via gettext catalogs.",5941],["self.content = content",4424],["if content:",4618],["doc = pq(r.content)",4789],["content = f.read()",5281]],"useCount":1046805},{"word":"content_type","context":[["content_type='application/json',",4881],["self.assertEqual('application/json', response.content_type)",3748],["content_type=\"application/json\")",3476],["req.content_type = 'application/json'",2849],["content_type=\"application/json\",",2143],["content_type='application/json'",1870],["content_type='application/json')",6819],["self.assertEqual(response.content_type, 'application/json')",11194],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125]],"useCount":275371},{"word":"contents","context":[["contents = contents,",1129],["if contents is not None: self.MergeFromString(contents)",4774],["def __init__(self, contents=None):",4826],["bits = token.contents.split()",1198],["contents = []",2081],["f.write(contents)",2184],["contents = f.read()",2640],["return contents",3290],["# The depth of the table of contents in toc.ncx.",3484],["if contents is not None: self.MergeFromString(contents)",4774]],"useCount":254333},{"word":"context","context":[["return context",39926],["if context is None:",38917],["context = {}",45757],["def render(self, context):",11102],["context,",11558],["context=context)",12690],["context=context)",12690],["ctxt = context.get_admin_context()",16555],["context = {",26955],["self.context,",17829]],"useCount":4377148},{"word":"continue","context":[["#            continue",648],["(Pdb) continue",671],["if not line: continue",693],["#             continue",797],["# continue",933],["#     continue",1068],["#continue",1621],["#    continue",2306],["continue;",8883],["continue",1254837]],"useCount":1364676},{"word":"contrib","context":[["from django.contrib import admin",55424],["from django.contrib.auth.models import User",43609],["'django.contrib.contenttypes',",29023],["'django.contrib.auth',",28733],["'django.contrib.sessions',",27946],["'django.contrib.sessions.middleware.SessionMiddleware',",27272],["'django.contrib.auth.middleware.AuthenticationMiddleware',",26570],["'django.contrib.messages.middleware.MessageMiddleware',",25542],["'django.contrib.messages',",24760],["'django.contrib.staticfiles',",24746]],"useCount":760563},{"word":"controller","context":[["self.controller.create,",2138],["resp = req.get_response(self.controller)",7236],["servers = self.controller.index(req)['servers']",3015],["self.assertRaises(webob.exc.HTTPBadRequest, self.controller.create,",2963],["res_dict = self.controller.index(req)",2809],["\"\"\" RESTful CRUD controller \"\"\"",2758],["self.controller = controller",2512],["self.controller = controller",2512],["controller = Controller()",2400],["@controller.protected()",2374]],"useCount":289772},{"word":"copy","context":[["from copy import deepcopy",16233],["from copy import copy",8478],["from copy import copy",8478],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",6977],["env = os.environ.copy()",5216],["if copy:",4411],["ctx = context.copy()",3839],["def copy(self):",17929],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20368],["import copy",69509]],"useCount":860170},{"word":"core","context":[["from django.core.exceptions import ImproperlyConfigured",12252],["from django.core.exceptions import ValidationError",10689],["from django.core.management import execute_from_command_line",15774],["from django.core.wsgi import get_wsgi_application",16998],["from distutils.core import setup",29561],["from django.core.urlresolvers import reverse",57527],["from django.core.management.base import BaseCommand",10350],["from django.core.cache import cache",9125],["from django.core.exceptions import ObjectDoesNotExist",7812],["from django.core.management.base import BaseCommand, CommandError",7751]],"useCount":1261136},{"word":"correct","context":[["Ground truth (correct) target values.",713],["if correct:",1388],["# Make sure the correct queryset is returned",984],["# printing 'OK' when each function is correct.",472],["correct = False",509],["# Select the correct user model",656],["correct += 1",711],["# typographically correct entities.",27024],["correct = 0",979],["# Make sure the correct choice is selected",800]],"useCount":197178},{"word":"count","context":[["if count:",5319],["self.count = 0",5979],["count = count + 1",8332],["count = count + 1",8332],["return count",11406],["count += 1",49856],["if count == 0:",7015],["count = 1",8178],["count = 0",60211],["def count(self):",5510]],"useCount":942565},{"word":"course","context":[["self.course.save()",1180],["course.id,",1374],["\"course_id\": unicode(self.course.id),",1433],["course = self._create_course(\"verified\")",1450],["self.course.id,",1499],["course = CourseFactory.create()",1819],["'course': course,",2412],["course_id=self.course.id,",3506],["'course': course,",2412],["self.course = CourseFactory.create()",3035]],"useCount":476905},{"word":"course_id","context":[["course_id=self.course.id,",3506],["course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id)",2410],["course_id=course_id,",2325],["course_id=course_id,",2325],["course_id = SlashSeparatedCourseKey.from_deprecated_string(course_id)",2324],["course_id = SlashSeparatedCourseKey.from_deprecated_string(course_id)",2324],["course_key = CourseKey.from_string(course_id)",1867],["course_id,",1829],["\"course_id\": unicode(self.course.id),",1433],["course_id=course.id,",1071]],"useCount":217820},{"word":"cr","context":[[":param cr: database cursor",2631],["def write(self, cr, uid, ids, vals, context=None):",5277],["cr.commit()",8180],["def unlink(self, cr, uid, ids, context=None):",5248],["def create(self, cr, uid, vals, context=None):",4588],["for line in self.browse(cr, uid, ids, context=context):",4037],["def copy(self, cr, uid, id, default=None, context=None):",3188],["cr.execute(\"\"\"",3435],["for move in self.browse(cr, uid, ids, context=context):",3875],["def name_get(self, cr, uid, ids, context=None):",3918]],"useCount":1034384},{"word":"create","context":[["def create(self):",7433],["self.stubs.Set(compute_api.API, 'create', create)",3121],["def create(self, cr, uid, vals, context=None):",4588],["M(\"Create\", m=\"create\"),",4453],[").create()",4065],["def create():",3761],["def create(*args, **kwargs):",3358],["if create:",3152],["old_create = compute_api.API.create",3132],["def create(kernel):",15717]],"useCount":1118805},{"word":"created","context":[["'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",18509],["'created': ('django.db.models.fields.DateTimeField', [], {}),",1992],["if created:",8738],["if not created:",2383],["# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),",3078],["created = models.DateTimeField(auto_now_add=True)",3557],["('created', models.DateTimeField(auto_now_add=True)),",2337],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["# HTML files that should be inserted before the pages created by sphinx.",3483]],"useCount":438718},{"word":"css","context":[["# \"default.css\".",1149],["'css/sandstone/sandstone-resp.less',",842],["# static files, so a file named \"default.css\" will overwrite the builtin",1149],["<style type=\"text/css\">",2897],["\"<html><head><meta name=\\\"qrichtext\\\" content=\\\"1\\\" /><style type=\\\"text/css\\\">\\n\"",1474],["css = {",2268],["<style type=\"text/css\"> @import url(\"/img/tablesorter.css\"); </style>",1060],["<style type=\"text/css\"> @import url(\"/img/tablesorter.css\"); </style>",1060],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152]],"useCount":203023},{"word":"ctx","context":[["return ctx",5463],["ctx.update({",2019],["ctx = canvas.getContext(\"2d\")",2171],["ctx.restore()",2346],["ctx.save()",2411],["ctx = {",3293],["ctx.beginPath()",3583],["ctx = context.copy()",3839],["ctx.stroke()",4035],["ctx = context.get_admin_context()",4990]],"useCount":457324},{"word":"ctxt","context":[["self.ctxt = context.get_admin_context()",3934],["self.ctxt, method,",1090],["ctxt = context.get_admin_context()",16555],["self.ctxt,",3672],["ctxt,",1789],["ctxt.reraise = False",1554],["with excutils.save_and_reraise_exception() as ctxt:",1472],["result = db.instance_get_all_by_filters(self.ctxt,",1470],["db.fixed_ip_create(self.ctxt, dict(",1272],["network = db.network_create_safe(self.ctxt, {})",1127]],"useCount":325814},{"word":"current","context":[["# If true, the current module name will be prepended to all description",27546],["s3 = current.response.s3",4743],["settings = current.deployment_settings",5506],["filename: The name of the current file.",6779],["\"status\" : \"current\",",7293],["# This file is execfile()d with the current directory set to its",12708],["# This file is execfile()d with the current directory set to its containing dir.",12868],["T = current.T",13042],["s3db = current.s3db",15509],["db = current.db",18889]],"useCount":786002},{"word":"cursor","context":[["cursor = connection.cursor()",13131],["cursor.close()",17115],["cursor = conn.cursor()",6176],["cur = conn.cursor()",6537],["cursor = db.cursor()",6723],["cursor = db.cursor()",6723],["cur = con.cursor()",7091],["cursor.execute(\"\"\"",7474],["cursor = connection.cursor()",13131],["cursor = conn.cursor()",6176]],"useCount":529954},{"word":"custom","context":[["# must exist either in Sphinx' static/ path, or in one of the custom paths",846],["# Add any paths that contain custom static files (such as style sheets)",1149],["# 'zh' user can custom change `jieba` dictionary path.",1350],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",2317],["might make sense to replace the whole Django WSGI application with a custom one",4328],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Add any paths that contain custom static files (such as style sheets) here,",26179]],"useCount":222710},{"word":"d","context":[["# This file is execfile()d with the current directory set to its containing dir.",12868],["#today_fmt = '%B %d, %Y'",23301],["def TryMerge(self, d):",4786],["d = defer.Deferred()",5133],["for d in data:",5326],["d = {",5640],["# This file is execfile()d with the current directory set to its",12708],["#html_last_updated_fmt = '%b %d, %Y'",22077],["d = {}",22596],["return d",83705]],"useCount":2587118},{"word":"data","context":[["if data is None:",14711],["return data",116782],["data = {",66873],["data = {}",31971],["if data:",27062],["data = []",26383],["if not data:",23224],["self.data = data",20553],["self.data = data",20553],["data = None",12423]],"useCount":5297927},{"word":"database","context":[["database.",2688],["@param cr: the current row, from the database cursor,",1089],["import database",1001],[":param cr: database cursor",2631],["self.database = database",2066],["self.database = database",2066],["# Test the database alteration",1917],["@param cr: A database cursor",1523],["if database:",1238],["database = None",1235]],"useCount":391661},{"word":"date","context":[["'date': date,",2253],["from datetime import date",12020],["today = date.today()",2050],["from datetime import datetime, date",2066],["from datetime import date, timedelta",2076],["'date': date,",2253],["from datetime import date, datetime",2282],["if date:",2833],["today = datetime.date.today()",3879],["return date",2957]],"useCount":601705},{"word":"datetime","context":[["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["from datetime import datetime, timedelta",21642],["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["from datetime import datetime, timedelta",21642],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["import datetime",194963],["from datetime import datetime",84929],["from datetime import datetime",84929]],"useCount":1571962},{"word":"db","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["from django.db import models",109438],["from django.db import models, migrations",41876],["from south.db import db",40923],["from south.db import db",40923],["db.session.commit()",39672],["from django.db import migrations, models",33807],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230]],"useCount":5220297},{"word":"de","context":[["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",3798],["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'",2116],["with translation.override('de'):",1696],["#     Hartmut Goebel, h.goebel@goebel-consult.de",792],["\"\"\" Import item de-duplication \"\"\"",882],["with translation.override('de', deactivate=True):",959],["address='ca:fe:de:ad:be:ef',",1004],["# The official homepage is at http://mathias-kettner.de/check_mk.",1044],["SUMO, Simulation of Urban MObility; see http://sumo.dlr.de/",1338],["#    Gerhard Lausser, Gerhard.Lausser@consol.de",1463]],"useCount":236108},{"word":"debug","context":[["# SECURITY WARNING: don't run with debug turned on in production!",13613],["'django.template.context_processors.debug',",9474],["#debug",4933],["self.debug(",5003],["self.debug = debug",5304],["self.debug = debug",5304],["debug = False",5589],["if self.debug:",19933],["if debug:",29911],["logger.debug(",7081]],"useCount":853146},{"word":"decode","context":[["decode=Codec().decode,",792],["stdout = stdout.decode()",871],["has_default_value=False, default_value=_b(\"\").decode('utf-8'),",9915],["data = rv.data.decode('utf-8')",3446],["content = json.loads(response.content.decode('UTF-8'))",1256],["def decode(self,input,errors='strict'):",966],["def decode(self, input, final=False):",952],["def decode(self, data):",899],["decode=Codec().decode,",792],["def decode(self):",880]],"useCount":229683},{"word":"def","context":[["def tearDown(self):",151302],["def main():",184278],["def __repr__(self):",251573],["def __str__(self):",276248],["def setUp(self):",497902],["def __init__(self, *args, **kwargs):",130790],["def run(self):",118539],["def __unicode__(self):",105295],["def __eq__(self, other):",90006],["def __init__(self):",560894]],"useCount":28015213},{"word":"default","context":[["default=False,",45686],["# All configuration values have a default; values that are commented out",25768],["# serve to show the default.",25778],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",25914],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# output. They are ignored by default.",26989],["default=None,",27378],["return default",34523],["'default': {",39458]],"useCount":3214838},{"word":"defaults","context":[["return defaults",1694],["# The basename for the epub file. It defaults to the project name.",1860],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["defaults = {",9262],["defaults.update(kwargs)",8704],["from django.conf.urls.defaults import *",7132],["# The language of the text. It defaults to the language option",3473],["defaults={",2526],["from django.conf.urls.defaults import patterns, url",2471],["defaults = {}",2360]],"useCount":295232},{"word":"defined","context":[["defined.",508],["If any of the proposed values is over the defined quota, an",517],["# other values from the config, defined by the needs of env.py,",587],["# use admin user for accessing objects having rules defined on store fields",654],["def __init__(self): raise AttributeError, \"No constructor defined\"",844],["# pylint: disable=attribute-defined-outside-init",880],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined - class is abstract\")",883],["def __init__(self, *args, **kwargs): raise AttributeError, \"No constructor defined\"",1279],["\"\"\"list of weak references to the object (if defined)\"\"\"",1408],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined\")",1651]],"useCount":237092},{"word":"del","context":[["del header_params['Accept']",2961],["del params['kwargs']",5574],["del writer",2413],["del self[key]",2148],["del sys.path[0]",1703],["del swig_import_helper",1665],["del version_info",1620],["del c",1460],["del lines[0]",1397],["del e",1386]],"useCount":460187},{"word":"delete","context":[["user.delete()",1630],["def delete(self, req, id):",1642],["def delete(self):",17398],["if delete:",3451],["def delete(self, *args, **kwargs):",3148],["self.delete()",2710],["def delete(self, key):",2590],["obj.delete()",2521],["'delete',",1917],["def delete(self, name):",1559]],"useCount":566356},{"word":"deleted","context":[["'deleted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",3142],["'deleted': False,",2730],["'deleted': 0,",1707],["update({'deleted': True,",1463],["'deleted': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),",1083],["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["Column('deleted', Boolean),",853],["deleted.",1060],["'deleted': None,",1037],["if deleted:",1036]],"useCount":274791},{"word":"dependencies","context":[["# List run-time dependencies here.  These will be installed by pip when",748],["\"dependencies\": [MBED_LIBRARIES],",640],["dependencies=[",720],["for dependency in dependencies:",721],["\"dependencies\" : [",1049],["return dependencies",1063],["dependencies = []",1430],["\"dependencies\": [MBED_LIBRARIES, TEST_MBED_LIB],",1459],["def dependencies(self):",1730],["dependencies = [",81613]],"useCount":190825},{"word":"desc","context":[["self.desc = desc",1610],["return desc",2479],["desc = \"\"\"",2948],["desc:",4287],["desc = \"\"\"\\",2040],["if desc:",1881],["\"desc\": \"\"\"\"\"\",",1733],["desc = \"\"",1631],["desc = ''",1614],["self.desc = desc",1610]],"useCount":247775},{"word":"description","context":[["\"description\" :",8796],["self.description = description",10385],["self.description = description",10385],["'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",11344],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["#  dir menu entry, description, category)",20993],["# (source start file, name, description, authors, manual section).",23889],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# If true, the current module name will be prepended to all description",27546],["description:",85731]],"useCount":1073385},{"word":"dest","context":[["operands=[Operand(type=\"SIMDReg\", size=128, dest=\"Spare\"),",996],["if not os.path.exists(dest):",1224],["self.dest = dest",1279],["self.dest = dest",1279],["dest,",1434],["dest=dest,",1461],["dest=dest,",1461],["if os.path.exists(dest):",1852],["return dest",1897],["if not dest:",962]],"useCount":366068},{"word":"details","context":[["for more details.",1368],["For more details about this platform, please refer to the documentation at",2875],["details.",2994],["# for more details.",3164],["# more details.",4294],["for details.",1458],["# Author details",1386],["# details.",12281],["for name, details in constraints.items():",1327],["# more details on how to customize your logging configuration.",6170]],"useCount":258557},{"word":"dev","context":[["https://docs.djangoproject.com/en/dev/ref/settings/",1211],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs",1333],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url",1368],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#template-debug",1409],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#debug",1451],["<target dev='vda' bus='virtio'/>",1618],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#secret-key",1654],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#databases",1415],["return dev",2898]],"useCount":368060},{"word":"device","context":[["[param('ns3::Ptr< ns3::NetDevice >', 'device')])",2066],["return device",2536],["self.device = device",2821],["self.device = device",2821],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["for device in devices:",3180],["if device:",1787],["if not device:",1526],["device,",1378],["(self.call.device.RunShellCommand(",1166]],"useCount":539494},{"word":"devices","context":[["</devices>",4024],["<devices>",4037],["for device in devices:",3180],["self.assertIsInstance(cfg.devices[5],",2336],["self.assertIsInstance(cfg.devices[4],",2466],["self.assertIsInstance(cfg.devices[3],",2635],["devices = []",2640],["self.assertIsInstance(cfg.devices[0],",2888],["self.assertIsInstance(cfg.devices[1],",2966],["self.assertIsInstance(cfg.devices[2],",3216]],"useCount":183354},{"word":"dict","context":[[":rtype: dict",13130],[":param dict custom_headers: headers that will be added to the request",8074],["if isinstance(value, dict):",5674],["return dict()",5538],["return dict(",12427],["dict = {}",3514],["dict(",19543],["@rtype: dict",3502],["expected=dict(",4150],["elif isinstance(value, dict):",4022]],"useCount":1492857},{"word":"dictionary","context":[["dictionary.",2041],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["dictionary = {}",1064],["@param context: A standard dictionary",1223],["@param context: A standard dictionary for contextual values",876],["# 'zh' user can custom change `jieba` dictionary path.",1350],["return dictionary",1440],["args - A dictionary. The following are options for keys:",1624],[":param resources: A dictionary of the registered resources.",1024],["# A dictionary with options for the search language support, empty by default.",5913]],"useCount":358398},{"word":"diff","context":[["assert diff is None, diff",644],["if diff:",1931],["if diff > 0:",1119],["diff = []",787],["diff = 0",740],["if not diff:",717],["assert diff is None, diff",644],["diff = {}",585],["if diff < 0:",531],["return diff",2206]],"useCount":188449},{"word":"different","context":[["directories afterwards. `path' specifies a different directory",249],["# Search URL for the different modes #",250],["# if we had a value already and this value is different then they're not all the same",267],["# things like caching the course.xml file for different A/B test groups.",273],["raise ValueError(\"Can't do subqueries with queries on different DBs.\")",293],["# * Note that these format strings are different from the ones to display dates",333],["# Special cases for different NS",336],["# browsershots.org - Test your web design in different browsers",372],["# to call the functions with a few different inputs,",472],["people on different computers who have checked the source out to different",244]],"useCount":185320},{"word":"dir","context":[["if not os.path.exists(dir):",1787],["os.makedirs(dir)",2278],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# Get the project root dir, which is the parent dir of this",1397],["# Insert the project root dir as the first element in the PYTHONPATH.",1389],["if dir:",1344],["# Get the project root dir, which is the parent dir of this",1397],["#  dir menu entry, description, category)",20993],["# containing dir.",12692],["for dir in dirs:",2449]],"useCount":319343},{"word":"directory","context":[["# The name of an image file (relative to this directory) to place at the top of",25468],["# relative to this directory. They are copied after the builtin static files,",26167],["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# The name of an image file (relative to this directory) to place at the top",25393],["# add these directories to sys.path here. If the directory is relative to the",24896],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# List of patterns, relative to source directory, that match files and",24527],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708]],"useCount":718384},{"word":"dirname","context":[["BASE_DIR = os.path.dirname(os.path.dirname(__file__))",7153],["here = path.abspath(path.dirname(__file__))",2382],["os.path.dirname(__file__),",2648],["os.makedirs(dirname)",3435],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["BASE_DIR = os.path.dirname(os.path.dirname(__file__))",7153],["from os.path import dirname",3538],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["here = os.path.abspath(os.path.dirname(__file__))",3786]],"useCount":412890},{"word":"disable","context":[["# pylint: disable=protected-access",8883],["# pylint: disable=E1101",2223],["# pylint: disable=C0301",2381],["# pylint: disable=too-few-public-methods",2500],["# pylint: disable=W0212",2969],["except Exception:  # pylint: disable=broad-except",3224],["def disable(self):",3794],["# pylint: disable=no-member",4094],["# pylint: disable=invalid-name",4613],["# pylint: disable=unused-argument",5175]],"useCount":257204},{"word":"disk","context":[["<disk type='file'>",2547],["</disk>",5770],["'device_type': 'disk',",2622],["<disk type='block'>",1394],["for disk in disks:",1365],["'type': 'disk', 'boot_index': '1'},",1006],["\"<disk type='file'><driver name='qemu' type='qcow2'/>\"",940],["\"<target dev='vda' bus='virtio'/></disk>\"",814],["'x-image-meta-disk-format': 'vhd',",754],["\"<source file='/test/disk'/>\"",749]],"useCount":239390},{"word":"display","context":[["pygame.display.flip()",7399],["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648],["pygame.display.update()",5775],["def display(self):",4033],["sS'display'",2685],["if display:",1910],["- 'ln' *string* - The language to display the interface in",1421],["self.display()",1339],["- 'ln' *string* - The language to display",1299],["return p.display()",1507]],"useCount":268639},{"word":"distribution","context":[["# distribution.",8323],["#       documentation and/or other materials provided with the distribution.",6196],["#   and/or other materials provided with the distribution.",6180],["#    documentation and/or other materials provided with the distribution.",2848],["#    distribution.",2783],["# documentation and/or other materials provided with the distribution;",2750],["# you should have received as part of this distribution. The terms",2697],["#     documentation and/or other materials provided with the distribution.",2688],["#        the distribution.",2647],["#   documentation and/or other materials provided with the distribution.",2610]],"useCount":193148},{"word":"div","context":[["'</div>'",754],["<div class=\"container\">",1224],["<div class=\"row\">",1248],["div = DivWdg()",1475],["return div",1642],["<div class=\"bibcircbottom\">",2053],["<div>",3854],["</div>",49263],["</div>\"\"\"",701],["<div class=\"form-group\">",598]],"useCount":233347},{"word":"django","context":[["from django.contrib import admin",55424],["from django.utils.translation import ugettext_lazy as _",45041],["from django.core.urlresolvers import reverse",57527],["from django.db import models",109438],["from django.contrib.auth.models import User",43609],["from django.db import models, migrations",41876],["from django.test import TestCase",35866],["from django.conf import settings",146012],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510]],"useCount":5793025},{"word":"do","context":[["# This is also used if you do content translation via gettext catalogs.",5941],["furnished to do so, subject to the following conditions:",7073],["# This will get replaced with a git SHA1 when you do a git archive",8306],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["def do(self):",2598],["# Automatically generated, do not edit.",1879],["# do some validation checking...",1695],["# Nothing to do",1053],["'''Autogenerated by xml_generate script, do not edit!'''",907],["# furnished to do so, subject to the following conditions:",24476]],"useCount":525995},{"word":"doc","context":[["for doc in docs:",2851],["doc = pq(response.content)",3366],["if doc:",2809],["# Uncomment the admin/doc line below to enable admin documentation:",2891],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["doc = pq(r.content)",4789],["doc = None",4872],["# no doc",6135],["return doc",7234],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292]],"useCount":483941},{"word":"docs","context":[["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956],["https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/",3284],["# https://docs.djangoproject.com/en/1.6/topics/i18n/",3122],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040]],"useCount":296128},{"word":"document","context":[["from browser import document",1541],["# 從 browser 導入 document",1504],["# Custom sidebar templates, maps document names to template names.",27115],["<document source=\"test data\">",1608],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["return document",1655],["# The master toctree document.",28001],["# Grouping the document tree into Texinfo files. List of tuples",21017],["from frappe.model.document import Document",2436],["# Grouping the document tree into LaTeX files. List of tuples",27516]],"useCount":407300},{"word":"documentation","context":[["# in the documentation and/or other materials provided with the",8026],["# Uncomment the next line to enable admin documentation:",3558],["#       documentation and/or other materials provided with the distribution.",6196],["# directly to the root of the documentation.",11811],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# \"<project> v<release> documentation\".",25615],["# documentation.",26366],["# The language for content autogenerated by Sphinx. Refer to documentation",26446]],"useCount":305157},{"word":"does","context":[["A return of true does not guarantee successful authorization. A",1061],["# In applying this licence, CERN does not waive the privileges and immunities",1119],["else: \t\t\t   #this should never happen... if it does",502],["else:            # this should never happen... but if it does",1203],["# What does your project relate to?",1318],["\"\"\"This class does not support CRUD Operations please use parent.",1612],["self.module.fail_json(msg=\"Group %s does not exist\" % self.group)",544],["# this does not exist!",659],["# Bear in mind that compilation_info.compiler_flags_ does NOT return a",877],["# The compilation_commands.json file generated by CMake does not have entries",727]],"useCount":409303},{"word":"doesn","context":[["fmt = \"tag '%s' doesn't start with prefix '%s'\"",504],["\"Policy doesn't allow %s to be performed.\" % rule_name,",958],["# listunspent doesn't give addresses, so:",444],["pieces[\"error\"] = (\"tag '%s' doesn't start with prefix '%s'\"",446],["# Compile the list of packages available, because distutils doesn't have",458],["print(\"guessing rootdir is '%s', but '%s' doesn't start with \"",459],["image_id = 1  # doesn't matter",467],["raise NotThisMethod(\"rootdir doesn't start with parentdir_prefix\")",491],["pass  # Python < 2.2 doesn't have 'property'.",598],["pass # Python < 2.2 doesn't have 'property'.",1137]],"useCount":246028},{"word":"domain","context":[["return domain",2522],["if domain:",2501],["'Meta': {'ordering': \"('domain',)\", 'object_name': 'Site', 'db_table': \"'django_site'\"},",2260],["'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",3327],["# Hosts/domain names that are valid for this site; required if DEBUG is False",2707],["<domain type='kvm'>",2823],["self.domain = domain",3263],["self.domain = domain",3263],["if domain is None:",1948],["</domain>",3525]],"useCount":566911},{"word":"don","context":[["# AWS cache settings, don't change unless you know what you're doing:",591],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["# Make this unique, and don't share it with anybody.",7163],["# The contents of this file are pickled, so don't put values in the namespace",842],["# keywords. When used from setup.py, we don't want to import _version.py,",676],["we don't even need a DBAPI to be available.",667],["# There's gotta be a better way of doing this but we don't wanna",652],["# py2exe/bbfreeze/non-CPython implementations don't do __file__, in which",648],["htmltext = \"<html><body>You are either not carrying out your quest or don't meet the criteria.</body></html>\"",554],["# we don't want that an exception blocks the init_host",550]],"useCount":328310},{"word":"done","context":[["done = True",9096],["print \"done\"",1681],["print 'done'",1744],["done = 0",1752],["self.done = False",2077],["if done:",2239],["self.done = True",2890],["def done(self):",2966],["while not done:",4299],["done = False",7731]],"useCount":280597},{"word":"double","context":[["'double',",51292],["## int64x64-double.h (module 'core'): ns3::int64x64_t [class]",1108],["cls.add_constructor([param('double', 'v')])",2259],["thrOverE2EB = cms.double( -1.0 ),",1966],["thrOverE2EE = cms.double( -1.0 ),",1966],["MaxEta = cms.double( 2.5 ),",1813],["\"\"\"relative_rate(self) -> double\"\"\"",1330],["MaxDz = cms.double( 9999.0 ),",1198],["NSigmaPt = cms.double( 0.0 ),",1198],["## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]",1142]],"useCount":347214},{"word":"driver","context":[["self.driver = driver",3141],["self.driver = driver",3141],["common = self.driver._login()",1341],["self.mox.StubOutWithMock(self.compute.driver,",2095],["block_device_mapping = driver.block_device_info_get_mapping(",1398],["driver = self.driver",1899],["driver = self.driver",1899],["from nova.virt import driver",1587],["driver=self.driver)",1458],["driver=self.driver)",1458]],"useCount":525605},{"word":"dt","context":[["Event.objects.create(dt=dt)",1219],["from datetime import datetime as dt",1228],["import datetime as dt",5222],["return dt",3473],["Event.objects.create(dt=dt)",1219],["def utcoffset(self, dt):",3119],["def dst(self, dt):",2866],["def tzname(self, dt):",2718],["def update(self, dt):",1396],["if dt is None:",1272]],"useCount":245993},{"word":"dtype","context":[["if dtype is None:",2494],["dtype : dtype, optional",1289],["dtype : dtype, optional",1289],["dtype=dtype)",1358],["dtype=dtype)",1358],["if dtype is not None:",1365],["self.dtype = dtype",1411],["self.dtype = dtype",1411],["def dtype(self):",1461],["dtype : data-type, optional",1586]],"useCount":578485},{"word":"dumps","context":[["return json.dumps(data)",1828],["from json import dumps",1759],["data = json.dumps(data)",1630],["return json.dumps({",2030],["s = self.dumps(x, proto)",1256],["req.body = json.dumps(body)",2045],["return json.dumps(result)",1418],["self.req.body = jsonutils.dumps(self.body)",5931],["req.body = jsonutils.dumps(body)",6621],["data=json.dumps({",1263]],"useCount":277992},{"word":"e","context":[["except ValueError as e:",20908],["print e",27464],["except IOError as e:",18875],["print(e)",15921],["except OSError, e:",16635],["raise e",91385],["except Exception, e:",164240],["except Exception as e:",271261],["except OSError as e:",24981],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956]],"useCount":2772126},{"word":"each","context":[["ids = [each['id'] for each in node_json]",578],["# If true, the index is split into individual pages for each letter.",26818],["lines: An array of strings, each representing a line of the file.",677],["Two dimensional array with n rows and one column for each",793],["# what each function returns vs. what it's supposed to return.",882],["\"\"\"Run before each test.\"\"\"",921],["# theme further.  For a list of options available for each theme, see the",1130],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["# further.  For a list of options available for each theme, see the",24845],["ids = [each['id'] for each in node_json]",578]],"useCount":514140},{"word":"either","context":[["The `style` argument is a Style object as returned by either",410],["# There are two options for replacing |today|: either, you set today to some",25812],["# There are two options for replacing |today|: either, you set today to",1144],["# must exist either in Sphinx' static/ path, or in one of the custom paths",846],["chosen by either the windowing system or wxPython, depending on platform;",604],["# either expressed or implied, of the FreeBSD Project.",572],["htmltext = \"<html><body>You are either not carrying out your quest or don't meet the criteria.</body></html>\"",554],["# terminated when either number of iterations reaches iterationCount or",435],["# either django-storage-redux or boto",379],["# policies, either expressed or implied, of Matt Chaput.",321]],"useCount":199226},{"word":"element","context":[["</xs:element>",1501],["element.click()",1420],["# Insert the project root dir as the first element in the PYTHONPATH.",1389],["self.element = element",1540],["return element",6426],["for element in elements:",2903],["self.element = element",1540],["# A sequence of (type, uri, title) tuples for the guide element of content.opf.",2086],["def __init__(self, element):",1588],["if element is None:",1758]],"useCount":433572},{"word":"elements","context":[["for element in elements:",2903],["elements = []",2731],["return elements",1580],["# set elements",1390],["self.elements = []",894],["`introduction` for details about locating elements.",834],["for e in elements:",744],["for element in self.elements:",670],["elements = [",8559],["elements.",664]],"useCount":190247},{"word":"elif","context":[["elif isinstance(value, dict):",4022],["elif len(args) == 2:",2742],["elif isinstance(value, list):",2874],["elif child_.nodeType == Node.ELEMENT_NODE and \\",2677],["elif fid == 4:",4083],["elif fid == 1:",4472],["elif fid == 3:",7630],["elif fid == 2:",12258],["elif request.method == 'POST':",3136],["elif len(args) == 1:",2391]],"useCount":2377934},{"word":"else","context":[["else:",10375088],["#else:",23846],["else :",79897],["# If true, `todo` and `todoList` produce output, else they produce nothing.",5776],["#else",5790],["#        else:",6255],["#     else:",6285],["else",7973],["} else {",9678],["# else:",14528]],"useCount":11205881},{"word":"email","context":[["self.email = email",3100],["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),",23830],["# performed by this configuration is to send an email to",6083],["from email.mime.text import MIMEText",4540],["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),",3938],["if email:",3408],["self.email = email",3100],["import email",2901],["email=email,",2602],["email=email,",2602]],"useCount":688765},{"word":"empty","context":[["incemp = raw_input(\"Include empty? (true/false, optional): \")",1468],["empty = False",1524],["if empty:",1619],["'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.",2249],["'PORT': '',                      # Set to empty string for default. Not used with sqlite3.",2338],["\"\"\"empty message",2540],["def empty(self):",3596],["# A dictionary with options for the search language support, empty by default.",5913],["# The empty string is equivalent to '%b %d, %Y'.",1348],["# implements a search results scorer. If empty, the default will be used.",5914]],"useCount":397984},{"word":"en","context":[["#html_search_language = 'en'",4701],["__docformat__ = \"restructuredtext en\"",4405],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["__docformat__ = 'restructuredtext en'",5344],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name",7832],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["LANGUAGE_CODE = 'en-us'",19724]],"useCount":587949},{"word":"enabled","context":[["if self.enabled:",1716],["enabled=True,",1715],["enabled = False",1586],["if enabled:",2724],["enabled = True",2430],["'enabled': True}",1373],["self.enabled = False",2429],["'enabled': True,",4050],["if not self.enabled:",2316],["self.enabled = True",2250]],"useCount":236036},{"word":"encode","context":[["data = data.encode('utf-8')",1156],["url = url.encode('utf-8')",2336],["_x = _x.encode('utf-8')",1652],["_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))",1640],["def encode(self,input,errors='strict'):",964],["def encode(self):",3284],["name = name.encode('utf-8')",1247],["sample = io.BytesIO(sample.encode('utf-8'))",1386],["return unicode(self).encode('utf-8')",1404],["value = value.encode('utf-8')",1495]],"useCount":277074},{"word":"encoding","context":[["if encoding:",3123],["if encoding is None:",3175],["# -*- encoding: utf-8 -*-",38408],["# encoding: utf-8",45989],["from django.utils.encoding import force_unicode",3199],["self.encoding = encoding",4603],["self.encoding = encoding",4603],["from django.utils.encoding import python_2_unicode_compatible",5629],["from django.utils.encoding import force_text",6270],["# The encoding of source files.",26524]],"useCount":538978},{"word":"end","context":[["#end def",3707],["[param('uint32_t', 'end')])",3800],["def end(self):",4217],["end = time.time()",5543],["end",10778],["### end Alembic commands ###",10050],["# end def",9983],["start = end",9656],["#end",6422],["# end if",6230]],"useCount":822378},{"word":"engine","context":[["self.engine = engine",1664],["from heat.engine import properties",1287],["connection = engine.connect()",1268],["Base.metadata.create_all(engine)",2104],["@gen.engine",2227],["return engine",1279],["self.engine = engine",1664],["from heat.engine import resource",1348],["conn = engine.connect()",1182],["Session = sessionmaker(bind=engine)",1126]],"useCount":247668},{"word":"entries","context":[["self.entries = []",1404],["entries.append(entry)",1519],["# Allow duplicate toc entries.",3437],["return entries",3594],["entries = []",6143],["for entry in entries:",6676],["if entries:",1147],["'entries': entries,",1153],["'entries': entries,",1153],["for e in entries:",1382]],"useCount":200138},{"word":"entry","context":[["</entry>",2605],["#  dir menu entry, description, category)",20993],["if entry:",2486],["if not entry:",1940],["if entry is None:",1663],["# One entry per manual page. List of tuples",23937],["entry = {}",1579],["<entry>",2683],["return entry",6019],["for entry in entries:",6676]],"useCount":541785},{"word":"enumerate","context":[["for i, row in enumerate(rows):",491],["for i, line in enumerate(lines):",2566],["for i, arg in enumerate(args):",1514],["for i, item in enumerate(items):",690],["for i, dirname in enumerate(dirnames):",642],["for (i, c) in enumerate(v[::-1]):",587],["for index, line in enumerate(lines):",531],["for (i, x) in enumerate(arr.shape))",528],["for i, metadata_elem in enumerate(metadata_elems):",511],["for i, line in enumerate(f):",505]],"useCount":221862},{"word":"env","context":[["#!/usr/bin/env python",502842],["#!/usr/bin/env python3",50325],["#! /usr/bin/env python",36357],["#!/usr/bin/env python2",17558],["return env",5556],["#!/usr/bin/env python2.7",5347],["env = os.environ.copy()",5216],["#!/bin/env python",4280],["def generate(env):",3818],["def exists(env):",3547]],"useCount":1410026},{"word":"environ","context":[["context = req.environ['nova.context']",10169],["env = os.environ",1549],["environ=dict(nohash=True,",2151],["def __call__(self, environ, start_response):",5637],["env = os.environ.copy()",5216],["from os import environ",3430],["environ={'REQUEST_METHOD': 'GET'})",2978],["on_rtd = os.environ.get('READTHEDOCS', None) == 'True'",2655],["context = req.environ['cinder.context']",2628],["environ={'REQUEST_METHOD': 'PUT'},",1811]],"useCount":429424},{"word":"environment","context":[["self.environment[",1417],["# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks",2457],["environment.",1083],["self.environment = environment",811],["self.environment = environment",811],["from couchpotato.environment import Env",725],["self.environment.setdefault(",1001],[":param env: Dictionary with test environment.",926],["# In a Windows environment this must be set to your system time zone.",3640],["# If running in a Windows environment this must be set to the same as your",4205]],"useCount":197168},{"word":"eq_","context":[["eq_(200, response.status_code)",2996],["eq_(response.status_code, 302)",2595],["from nose.tools import eq_, ok_",2218],["eq_(rv.status_code, 200)",3613],["from nose.tools import eq_",5376],["eq_(r.status_code, 200)",6610],["eq_(res.status_code, 200)",6984],["eq_(response.status_code, 200)",12361],["eq_(response.status_code, 400)",1863],["eq_(",15459]],"useCount":309278},{"word":"err","context":[["except Exception as err:",21051],["out, err = self.run_manage(args)",5279],["except Exception, err:",12342],["if err:",8859],["self.assertNoOutput(err)",6374],["raise err",6112],["err = lib().Z3_get_error_code(a0)",5535],["if err != Z3_OK:",5535],["raise Z3Exception(lib().Z3_get_error_msg_ex(a0, err))",4961],["except OSError as err:",5454]],"useCount":553240},{"word":"error","context":[["print \"\\n---An error occurred---\\n\"",24666],["except socket.error:",16193],["except socket.error, e:",5474],["except socket.error as e:",5583],["except Exception as error:",6242],["error = True",6629],["error = None",7035],["error: The function to call with any errors found.",7578],["if error:",13664],["LOG.error(msg)",13887]],"useCount":1756106},{"word":"errors","context":[["self.assertEqual(response.json['errors'], [",3884],["self.errors = []",3154],["errors = {}",3511],["self.assertEqual(errors, expected)",3272],["errors += 1",3780],["errors.append(",4636],["error: The function to call with any errors found.",7578],["return errors",9411],["if errors:",13609],["errors = []",17674]],"useCount":657464},{"word":"etc","context":[["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["if filename == \"/etc/machine-id\":",352],["etc.",1874],[">>> G = nx.Graph()   # or DiGraph, MultiGraph, MultiDiGraph, etc",1590],["\"path\": \"/etc/banner.txt\",",937],["# etc.",673],["# ... etc.",631],["srcdir + \"/etc/sssd.api.d\")",447],["#   like listeners/agent handlers/etc.",441],["sssdconfig = SSSDConfig.SSSDConfig(srcdir + \"/etc/sssd.api.conf\",",417]],"useCount":204340},{"word":"event","context":[["def closeEvent(self, event):",3380],["event.save()",4226],["event.Skip()",15713],["for event in pygame.event.get():",6236],["for event in pygame.event.get():",6236],["for event in events:",5951],["event.accept()",5711],["return event",4665],["if event.type == pygame.QUIT:",3059],["event.ignore()",3138]],"useCount":943804},{"word":"events","context":[["events.",787],["raw, events, picks = _get_data()",1010],["events.append(event)",1070],["if events:",1182],["events = [",1294],["for e in events:",1340],["self.events = []",1682],["return events",3185],["events = []",5774],["for event in events:",5951]],"useCount":248266},{"word":"ex","context":[["from sickbeard.exceptions import ex",1383],["except libvirt.libvirtError as ex:",2052],["# ex: set expandtab softtabstop=4 shiftwidth=4:",1983],["error_code = ex.get_error_code()",1669],["print ex",1601],["except ValueError as ex:",1536],["LOG.exception(ex)",1436],["raise ex",4696],["except Exception, ex:",10401],["except Exception as ex:",29167]],"useCount":225154},{"word":"example","context":[["..  container:: example",5620],["%(example)s",4542],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["For example:",11398],["example:",3817],["For example::",3796],["# ('Your Name', 'your_email@example.com'),",3729],["ATTENDEE:mailto:user2@example.com",2927],["a = array.array(self.typecode, self.example)",2491],["ATTENDEE:mailto:user1@example.com",3545]],"useCount":554664},{"word":"exc","context":[["raise webob.exc.HTTPBadRequest(explanation=msg)",4547],["except Exception, exc:",4495],["except exc.NoResultFound:",3865],["self.assertRaises(webob.exc.HTTPNotFound,",4571],["except OSError as exc:",4190],["from webob import exc",3843],["except Exception as exc:",16541],["self.assertRaises(webob.exc.HTTPBadRequest,",12597],["raise exc.HTTPBadRequest(explanation=msg)",9200],["raise exc",6683]],"useCount":434138},{"word":"except","context":[["except Exception as e:",271261],["except KeyError:",281727],["except ImportError:",312685],["except:",1083642],["except AttributeError:",199156],["except Exception, e:",164240],["except IndexError:",97998],["except ValueError:",266807],["except Exception:",237243],["except IOError:",85812]],"useCount":5429728},{"word":"exception","context":[["self.assertRaises(exception.InvalidInput,",4111],["logger.exception(e)",4263],["raise exception.VolumeBackendAPIException(data=msg)",5371],["self.assertRaises(exception.VolumeBackendAPIException,",6072],["from cinder import exception",6719],["except exception.InstanceNotFound:",7156],["except exception.NotFound:",7356],["from nova import exception",16857],["log.exception(e)",3334],["self.assertRaises(exception.ValidationError,",3379]],"useCount":1072541},{"word":"exceptions","context":[["from django.core.exceptions import ValidationError",10689],[".AndRaise(self.exceptions.nova)",1962],["from tempest import exceptions",2201],["exceptions.handle(self.request,",2458],["import exceptions",2779],["raise exceptions.ValidationError(",2793],["exceptions.handle(request,",3090],["from horizon import exceptions",4220],["from django.core.exceptions import ObjectDoesNotExist",7812],["from django.core.exceptions import ImproperlyConfigured",12252]],"useCount":410773},{"word":"execute","context":[["cursor.execute(sql)",5163],["cursor.execute(\"\"\"",7474],["def execute(self, context):",7529],["cursor.execute(query)",4946],["cursor.execute(",3994],["cur.execute(sql)",3734],["cr.execute(\"\"\"",3435],["self.mox.StubOutWithMock(utils, 'execute')",2293],["cur.execute(\"\"\"",1910],["def execute(self):",16834]],"useCount":561018},{"word":"exist","context":[["# must exist either in Sphinx' static/ path, or in one of the custom paths",846],["# this does not exist!",659],["exist.",1411],["# exist.",471],["self.module.fail_json(msg=\"Group %s does not exist\" % self.group)",544],["does not exist.",493],["# Import/export/validate must exist and pass, while Render must only exist.",464],["# Import/export/validate must exist and pass, while Render must only exist.",464],["exist = False",432],["doesn't exist.",405]],"useCount":210163},{"word":"exists","context":[["from os.path import exists",2300],["if not os.path.exists(path):",12286],["if os.path.exists(path):",12272],["if os.path.exists(filename):",5809],["if not os.path.exists(filename):",4758],["def exists(self):",4134],["def exists(env):",3547],["Class generic exists solely to derive numpy scalars from, and possesses,",3120],["if not os.path.exists(directory):",2878],["if exists:",2840]],"useCount":721401},{"word":"exit","context":[["sys.exit(main())",14904],["sys.exit(1)",210632],["sys.exit(0)",72080],["sys.exit()",66854],["exit(1)",42042],["sys.exit(2)",29520],["exit()",26934],["sys.exit(-1)",21435],["exit(0)",16300],["sys.exit(app.exec_())",8680]],"useCount":753945},{"word":"exp","context":[["self.assertEqual(headers[:len(exp)], exp)",2270],["self.assertEqual(got, exp)",2236],["self.assertEqual(headers[:len(exp)], exp)",2270],["if exp is not None:",2503],["exp = CloudError(response)",2678],["exp.request_id = response.headers.get('x-ms-request-id')",2678],["self.assertEquals(headers[:len(exp)], exp)",1916],["raise exp",2887],["self.assertEqual(obs, exp)",2967],["self.assertEquals(headers[:len(exp)], exp)",1916]],"useCount":271341},{"word":"expected","context":[["self.assertEqual(expected, result)",6327],["expected = (",4715],["expected=dict(",4150],["expected = [",35040],["assert_frame_equal(result, expected)",4051],["self.assertEqual(actual, expected)",6694],["self.assertEqual(result, expected)",6855],["self.assertEqual(expected, actual)",9025],["check_detection(expected, test_file)",13409],["expected = {",26545]],"useCount":794887},{"word":"expr","context":[["assert upretty(expr) == ucode_str",9037],["for arg in expr.args:",984],["assert pretty(expr) == ascii_str",8753],["return expr",7062],["self.expr = expr",2194],["self.expr = expr",2194],["expr = sympify(expr)",1124],["expr = sympify(expr)",1124],["if self.expr is not None:",1062],["assert upretty(expr) in [ucode_str_1, ucode_str_2]",999]],"useCount":302687},{"word":"expression","context":[["self.expression = expression",1088],["self.expression = expression",1088],["return expression",978],["expression.",939],["if operator in expression.NEGATIVE_TERM_OPERATORS:",645],["filter: Sets a filter expression for filtering listed resources, in the",496],["def expression(self):",434],["expression = matched.group(2)",363],["expression,",408],["if expression:",388]],"useCount":197633},{"word":"ext","context":[["'sphinx.ext.intersphinx',",4627],["'sphinx.ext.todo',",4875],["from sqlalchemy.ext.declarative import declarative_base",6084],["'sphinx.ext.viewcode',",6197],["from google.appengine.ext import db",6438],["from google.appengine.ext import ndb",6573],["'sphinx.ext.autodoc',",10233],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["'ext': 'mp4',",13737]],"useCount":387902},{"word":"extend","context":[["children.extend(child.db_children((self.vtType, self.db_id), orphan))",1384],["#     http://www.kamaelia.org/AUTHORS - please extend this file,",1696],["def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):",648],["args.extend([",651],["kmi_props_setattr(kmi.properties, 'extend', False)",661],["if extend:",640],["sys.path.extend(['.','..','../..','py'])",737],["if extend: TClist += ofwhat",744],["PLATFORM_SCHEMA = PLATFORM_SCHEMA.extend({",817],["cmd.extend(args)",889]],"useCount":278098},{"word":"extension","context":[["'''Return boolean indicating whether this extension is available'''",1795],["from distutils.extension import Extension",2311],["</xs:extension>",842],["extension=EXTENSION_NAME,",2546],["'extension': True,",3138],["return [extension]",1184],["for extension in extensions:",1353],["The official definition of this extension is available here:",1424],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# Add any Sphinx extension module names here, as strings. They can be",14319]],"useCount":228541},{"word":"extensions","context":[["from OpenGL import extensions",1829],["extensions=[",25666],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["extensions = [",12763],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["extensions = []",6062],["from nova.api.openstack import extensions",3314],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",2317],["extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']",2077]],"useCount":275715},{"word":"extra","context":[["extra = 1",4141],["if extra:",2985],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["extra = 0",4328],["extra = {}",2723],["extra={",1625],["extra = {",1586],["self.extra = extra",1437],["self.extra = extra",1437],["extra = 3",1306]],"useCount":302935},{"word":"f","context":[["for f in files:",21436],["for line in f:",31883],["f.close()",207025],["return f",32519],["f.seek(0)",9922],["def f():",13388],["lines = f.readlines()",8913],["for line in f.readlines():",8390],["data = f.read()",8865],["f.write('\\n')",8410]],"useCount":3094635},{"word":"factory","context":[["self.factory = factory",1354],["def factory(*args_, **kwargs_):",12285],["rootObj = rootClass.factory()",2678],["import factory",2547],["self.factory = factory",1354],["factory = staticmethod(factory)",12344],["factory = staticmethod(factory)",12344],["self.factory = RequestFactory()",2526],["obj_ = cybox_common.StringObjectPropertyType.factory()",1712],["## object-factory.h (module 'core'): ns3::TypeId ns3::ObjectFactory::GetTypeId() const [member function]",1073]],"useCount":219615},{"word":"fail","context":[["self.fail(self._formatMessage(msg, standardMsg))",1894],["gdaltest.post_reason('fail')",5034],["self.fail(",2711],["self.fail('Command should not raise exception: {0}'.format(e))",1760],["if fail:",1760],["else: self.fail(\"time out\")",1750],["self.fail(merge_error_messages(error_messages))",1676],["self.fail()",12294],["return 'fail'",13352],["%(fail)s;",1903]],"useCount":278023},{"word":"failed","context":[["failed = True",7135],["failed = 0",1417],["if self.failed:",1867],["self.failed = True",1877],["if result.failed:",1918],["failed = []",1928],["failed = {}",2128],["failed = False",3575],["if failed:",3908],["raise MUTLibError(\"{0}: failed\".format(comment))",1192]],"useCount":323386},{"word":"fake","context":[["self.user_id = 'fake'",2212],["drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)",12133],["drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)",10282],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)",7492],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)",5112],["conn = xenapi_conn.XenAPIDriver(fake.FakeVirtAPI(), False)",2548],["self.project_id = 'fake'",2299],["'project_id': 'fake',",1483],["self.conn = xenapi_conn.XenAPIDriver(fake.FakeVirtAPI(), False)",1939],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-group-rules')",1985]],"useCount":394153},{"word":"false","context":[["# If false, no module index is generated.",74645],["# If false, no index is generated.",29138],["# non-false value, then it is used:",25813],["return false;",3986],["default: false",3386],["(default false)",2175],["return false",1973],["incemp = raw_input(\"Include empty? (true/false, optional): \")",1468],["to false, no intercept will be used in calculations",1163],["required: false",52495]],"useCount":391293},{"word":"fd","context":[["os.close(fd)",13483],["fd.close()",16585],["return fd",1414],["fd.flush()",5641],["headers = readuntil2crlfs(fd)",4325],["fd = sock.makefile()",4296],["for line in fd:",1552],["self.fd = fd",1203],["self.fd = fd",1203],["fd = sys.stdin.fileno()",1187]],"useCount":244908},{"word":"field","context":[["'required-field': False,",5998],["self.field = field",4338],["self.field = field",4338],["return field",4209],["if field:",3932],["#     There is no restriction on the value of this field.",3726],["for field in self.fields:",3312],["'required-field': True,",2952],["field=models.BooleanField(default=False),",2560],["for field in fields:",11681]],"useCount":1351965},{"word":"fields","context":[["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",25100],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251],["fields=[",99767],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",25914],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27005]],"useCount":4665629},{"word":"file","context":[["file=DESCRIPTOR,",29319],["# Output file base name for HTML help builder.",27989],["# The name of an image file (within the static path) to use as favicon of the",24060],["# The name of an image file (relative to this directory) to place at the top",25393],["# The name of an image file (relative to this directory) to place at the top of",25468],["# autogenerated file.",25550],["For more information on this file, see",25647],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["file.close()",27296]],"useCount":2907954},{"word":"filename","context":[["if filename is None:",7383],["filename=None,",29817],["self.filename = filename",16910],["self.filename = filename",16910],["return filename",12978],["for filename in filenames:",12769],["if filename:",10531],["os.remove(filename)",7193],["def __init__(self, filename):",7742],["for filename in files:",7798]],"useCount":1334164},{"word":"files","context":[["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Grouping the document tree into Texinfo files. List of tuples",21017],["for f in files:",21436],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["# List of patterns, relative to source directory, that match files and",24527],["# directories to ignore when looking for source files.",24534],["# relative to this directory. They are copied after the builtin static files,",26167],["# Grouping the document tree into LaTeX files. List of tuples",27516],["# The encoding of source files.",26524],["for file in files:",15487]],"useCount":1147802},{"word":"filter","context":[[").filter(",4987],["@register.filter(is_safe=True)",1957],["def filter(self, record):",1944],["query = query.filter(",2454],["from six.moves import (filter, input, map, range, zip)  # noqa",1483],[".filter(",1517],["@register.filter",15851],["if filter:",1700],["option_.filter = filter_",2972],["self.filter = filter",1172]],"useCount":664703},{"word":"filters","context":[["'filters': {",6890],["for f in filters:",1718],["filters = {",1747],["return filters",1923],["filters=filters)",2306],["filters=filters)",2306],["filters = []",3360],["filters = {}",3912],["if filters:",4436],["'filters': ['require_debug_false'],",6161]],"useCount":328871},{"word":"finally","context":[["finally :",639],["... finally:",294],["#     finally:",321],["finally: self.accept_next_alert = True",359],["...     finally:",365],["#         finally:",210],["#finally:",483],["# finally:",442],["finally: self.sechead = None",454],["finally:",403686]],"useCount":423749},{"word":"find","context":[["if s1.find('\\n') == -1:",1048],["# You can find full information here: http://www.zenoss.com/oss",606],["raise RuntimeError(\"Unable to find version string.\")",809],["raise RuntimeError(\"can't find toplevel directory!\")",762],["# this to find the root from __file__.",648],["print(\"unable to find command, tried %s\" % (commands,))",645],["(lambda t: t.find('./os/type').text,",620],["if s1.find('\"') != -1:",545],[">>> test = doctest.DocTestFinder().find(f)[0]",1947],["# List of finder classes that know how to find static files in",6046]],"useCount":472008},{"word":"first","context":[["if first:",8029],["server = self.servers.first()",3985],["if not first:",2723],[").first()",8858],["limitby=(0, 1)).first()",14959],["first()",12158],["first = False",9422],["first = True",9329],["network = self.networks.first()",1955],[".first()",2281]],"useCount":762502},{"word":"flag","context":[["flag = 1",2442],["if not flag:",1800],["flag = 0",2848],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["if flag:",4869],["for flag in flags:",2302],["flag = False",5091],["flag = True",5292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["return flag",1605]],"useCount":239046},{"word":"flags","context":[["FLAGS = flags.FLAGS",4282],["# recreate indices and set flags",1939],["self.flags(virt_type='kvm', group='libvirt')",2732],["self.flags = flags",4458],["self.flags = flags",4458],["flags = []",2119],["flags = 0",4562],["return flags",2655],["for flag in flags:",2302],["from nova import flags",2488]],"useCount":462298},{"word":"float","context":[["type=float,",2231],["tol : float, optional",1518],["tol : float",1409],["elif isinstance(value, float):",1355],["alpha : float",2114],["float",2221],[":rtype: float",6503],["return float(value)",3442],["value = float(value)",5031],["# Latex figure (float) alignment",5863]],"useCount":676586},{"word":"flush","context":[["sys.stdout.flush()",57015],["f.flush()",7286],["def flush(self):",12937],["sys.stderr.flush()",9893],["oprot.trans.flush()",9051],["self._oprot.trans.flush()",7677],["session.flush()",7662],["self.flush()",7656],["sess.flush()",6604],["fd.flush()",5641]],"useCount":252533},{"word":"fn","context":[["if fn:",1276],["@functools.wraps(fn)",1296],["@wraps(fn)",1646],["return fn(*args, **kwargs)",2273],["for fn in files:",1582],["self.fn = fn",1559],["self.fn = fn",1559],["return fn",6683],["if os.path.exists(fn):",1434],["os.remove(fn)",1404]],"useCount":236858},{"word":"fname","context":[["fname : str",1553],["(fname, ftype, fid) = iprot.readFieldBegin()",22032],["(fname, mtype, rseqid) = self._iprot.readMessageBegin()",6259],["def read(fname):",4562],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["return fname",2631],["os.remove(fname)",2410],["for fname in files:",2044],["for fname in fnames:",1660],["with open(fname) as f:",1587]],"useCount":243021},{"word":"following","context":[["self._state.following.pop()",3486],["# following terms and conditions apply:",4452],["# subject to the following conditions:",2216],["# Sphinx supports the following languages:",5921],["furnished to do so, subject to the following conditions:",7073],["# the following conditions:",14452],["# furnished to do so, subject to the following conditions:",24476],["TypeError will be raised when the following arguments are not of data type",1980],["args - A dictionary. The following are options for keys:",1624],["# The following settings are not used with sqlite3:",1601]],"useCount":281325},{"word":"font","context":[["return font",1133],["font-weight: bold;",1352],["font.setPointSize(12)",1844],["font.setWeight(50)",2003],["font.setBold(False)",2204],["font.setPointSize(10)",2279],["font.setWeight(75)",3978],["font.setBold(True)",4734],["font = QtGui.QFont()",12975],["# The font size ('10pt', '11pt' or '12pt').",26707]],"useCount":241614},{"word":"foo","context":[["instance.uuid = 'foo'",1706],["def foo(self):",2720],["'foo',",2447],["'foo': 'bar',",2314],["foo = Foo()",1763],["def foo():",5216],["self.foo = foo",1316],["self.foo = foo",1316],["# Examples: \"http://foo.com/media/\", \"/media/\".",1733],["foo",1668]],"useCount":834542},{"word":"for","context":[["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["# A list of ignored prefixes for module index sorting.",26155],["for line in lines:",41967],["for line in f:",31883],["# Output file base name for HTML help builder.",27989],["# Else, today_fmt is used as the format for a strftime call.",26971],["# If true, the index is split into individual pages for each letter.",26818],["# for a list of supported languages.",26482],["# Additional stuff for the LaTeX preamble.",26731],["# There are two options for replacing |today|: either, you set today to some",25812]],"useCount":14572364},{"word":"form","context":[["'form': form,",10608],["'view_type': 'form',",7193],["#     * Redistributions in binary form must reproduce the above",7862],["self.assertTrue(form.is_valid())",7866],["if form.validate_on_submit():",9980],["</form>",10079],["def form_valid(self, form):",10171],["'form': form,",10608],["form.save()",11875],["if form.is_valid():",36268]],"useCount":1040061},{"word":"format","context":[["self.format = format",2913],["# using the given strftime format.",24593],["# Else, today_fmt is used as the format for a strftime call.",26971],["resourcePath = resourcePath.replace('{format}', 'json')",2604],["self.format = format",2913],["def format(self, record):",3209],[").format(",3829],["# If you set this to False, Django will not format dates, numbers and",5943],["# The format is a list of tuples containing the path and title.",6966],["# bottom, using the given strftime format.",2499]],"useCount":1240459},{"word":"forms","context":[["from django import forms",34648],["Redistribution and use in source and binary forms, with or without",3711],["from django.forms import ModelForm",2980],["## \"Redistribution and use in source and binary forms, with or without",2880],["# Redistribution and use in source and binary forms, with or without modification,",2800],["from horizon import forms",2477],["widget=forms.TextInput(",1955],["#  Redistribution and use in source and binary forms, with or without",5075],["raise forms.ValidationError(",7379],["# Redistribution and use in source and binary forms, with or without",44287]],"useCount":408424},{"word":"found","context":[["# Language code for this installation. All choices can be found here:",7665],["found = False",24160],["# Local time zone for this installation. Choices can be found here:",7887],["if not found:",16035],["if found:",9209],["error: The function to call with any errors found.",7578],["return found",5474],["found = 0",2751],["found = []",2399],["found = True",25989]],"useCount":578215},{"word":"fp","context":[["fp.close()",30675],["fp.flush()",1634],["for line in fp:",3207],["fp = None",2576],["fp.seek(0)",2129],["if fp is not None:",2083],["line = fp.readline()",2058],["self.fp = fp",2054],["self.fp = fp",2054],["data = fp.read()",1931]],"useCount":269827},{"word":"frame","context":[["for frame in frames:",995],["self.frame = frame",1673],["del frame",1035],["if frame is None:",1147],["frame.Show()",1254],["self.frame = frame",1673],["return frame",2939],["def signal_handler(signal, frame):",1276],["frame = frame.f_back",1264],["frame = frame.f_back",1264]],"useCount":247804},{"word":"from","context":[["from django.conf import settings",146012],["from __future__ import unicode_literals",196429],["from django.utils.translation import ugettext_lazy as _",45041],["from django.db import models",109438],["from __future__ import print_function",98595],["from __future__ import absolute_import",94310],["from datetime import datetime",84929],["from django.core.urlresolvers import reverse",57527],["from __future__ import division",56689],["from django.contrib import admin",55424]],"useCount":13616950},{"word":"ftype","context":[["if ftype == TType.STOP:",22095],["if ftype == TType.STRUCT:",20614],["iprot.skip(ftype)",79782],["(fname, ftype, fid) = iprot.readFieldBegin()",22032],["if ftype == TType.STRING:",17963],["if ftype == TType.I32:",5222],["if ftype == TType.LIST:",4946],["if ftype == TType.I64:",3161],["if ftype == TType.BOOL:",2781],["if ftype == TType.MAP:",1711]],"useCount":199389},{"word":"full","context":[["\"full-revisionid\": keywords[\"full\"].strip(),",980],["# Language to be used for generating the HTML full-text search index.",5923],["For the full list of settings and their values, see",14104],["# The full version, including alpha/beta/rc tags.",26558],["if full:",1935],["\"full-revisionid\": keywords[\"full\"].strip(),",980],["psyco.full()",948],["return {\"version\": \"0+unknown\", \"full-revisionid\": None,",935],["keywords[\"full\"] = mo.group(1)",672],["``ModelResource`` includes a full working version specific to Django's",626]],"useCount":223085},{"word":"func","context":[["self.func = func",7493],["@functools.wraps(func)",7819],["self.func = func",7493],["def __init__(self, func):",3711],["def decorator(func):",6268],["@wraps(func)",9292],["func()",3965],["return func(*args, **kwargs)",9947],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["return func",16133]],"useCount":669341},{"word":"function","context":[["# unit titles (such as .. function::).",27531],["error: The function to call with any errors found.",7578],["function.",4646],[":param dargs: standardized virsh function API keywords",3124],[":param callback function: The callback function",2901],[":param callback function: The callback function",2901],["asynchronous HTTP request, please define a `callback` function",2901],["def function(self, simulation, period):",2765],["self.function = function",2661],["self.function = function",2661]],"useCount":1865207},{"word":"functions","context":[["functions.",1390],["# helper functions",644],["import functions",645],["# functions",1891],["# Utility functions",1823],["for function in functions:",819],["from functions import *",639],["for func in functions:",1077],["functions = []",1114],["# Helper functions",1596]],"useCount":251301},{"word":"g","context":[["# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").",2890],["return g",8405],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["e.g.::",2631],["def g():",2475],["e.g.",2215],["E.g.::",2157],["g.close()",1906],["if g:",1592],["g = Graph()",1516]],"useCount":819404},{"word":"generated","context":[["# Automatically generated, do not edit.",1879],["# If false, no module index is generated.",74645],["# If false, no index is generated.",29138],["### commands auto generated by Alembic - please adjust! ###",10020],[":toctree: generated/",6335],["# Code generated by Microsoft (R) AutoRest Code Generator.",3989],["NOTE: This class is auto generated by the swagger code generator program.",3080],["\"\"\"NOTE: This class is auto generated by the swagger code generator program.",734],["# This file was automatically generated by SWIG (http://www.swig.org).",1788],["# @generated",1353]],"useCount":266937},{"word":"get","context":[["def get(self, request, *args, **kwargs):",10792],["r = self.client.get(self.url)",5337],["def get(self, key, default=None):",5339],["def get(self):",53173],["def get(self, key):",5351],["'get',",5625],["for event in pygame.event.get():",6236],["response = self.client.get(url)",23349],["response = self.client.get(",11094],["# This will get replaced with a git SHA1 when you do a git archive",8306]],"useCount":3976980},{"word":"getLogger","context":[["_logger = logging.getLogger(__name__)",11844],["logger = logging.getLogger(__name__)",56480],["LOG = logging.getLogger(__name__)",51954],["_log = logging.getLogger(__name__)",2516],["LOGGER = logging.getLogger(__name__)",3368],["from logging import getLogger",4188],["_LOGGER = logging.getLogger(__name__)",4805],["LOG = log.getLogger(__name__)",6129],["logger = logging.getLogger()",6961],["log = logging.getLogger(__name__)",39134]],"useCount":289534},{"word":"getattr","context":[["return getattr(self, key)",1226],["resp = getattr(controller, method)(req)",907],["return getattr(self, name)",1333],["__swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))",1506],["__swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))",1506],["value = getattr(self, attr)",2486],["yield assert_equal, getattr(outputs.traits()[key], metakey), value",2487],["yield assert_equal, getattr(inputs.traits()[key], metakey), value",2581],["return getattr(self, cache_attr)",736],["data = {field.name: getattr(request, field.name) for field in request.all_fields()}",679]],"useCount":453104},{"word":"given","context":[["# using the given strftime format.",24593],["given, it fixes the seed. Defaults to the global numpy random",449],["given.",496],["self.given(u'''",538],["which is encoded in the given encoding.",675],["Calls to context.execute() here emit the given string to the",694],["self.given(b'''",699],["# given in html_static_path.",846],["# given",1485],["# bottom, using the given strftime format.",2499]],"useCount":686010},{"word":"global","context":[["global counter",1004],["global_params: (StandardQueryParameters, default: None) global arguments",5086],["# Pass names back to global scope (s3.*)",3483],["global logger",1895],["global config",1642],["global options",1346],["global count",1203],["global log",1175],["global args",1025],["global verbose",990]],"useCount":355591},{"word":"google","context":[["from google.protobuf import reflection as _reflection",2202],["from google.protobuf import descriptor as _descriptor",2204],["from google.appengine.ext import webapp",2506],["from google.protobuf import descriptor_pb2",2602],["from google.appengine.api import memcache",3179],["# URL: http://code.google.com/p/sickbeard/",3955],["from google.appengine.api import users",4020],["from google.appengine.ext import db",6438],["from google.appengine.ext import ndb",6573],["from google.protobuf import message as _message",2202]],"useCount":187662},{"word":"graph","context":[["return graph",3157],["with self.test_session(graph=tf.Graph()) as sess:",803],["def graph(self):",812],["\"checkstyle\" : \"com.oracle.graal.graph\",",982],["Returns ugen graph.",1057],["graph = Graph()",1281],["G : graph",1336],["self.graph = graph",1390],["self.graph = graph",1390],["G : NetworkX graph",1702]],"useCount":186651},{"word":"group","context":[["return match.group(1)",2880],["parser.add_option_group(group)",2942],["with q.group():",3804],["group='libvirt')",4156],["return group",4434],["if group:",4554],["group.add_argument(",5036],["for group in groups:",6427],["u'auth.group': {",9992],["'auth.group': {",15191]],"useCount":1080953},{"word":"groups","context":[["for group in self.groups:",1153],["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-groups')",1192],["'groups': [",1246],["for g in groups:",1484],["groups = {}",1967],["if groups:",2850],["return groups",4000],["groups = []",5217],["for group in groups:",6427]],"useCount":298865},{"word":"gtk","context":[["cell = gtk.CellRendererText()",1570],["hbox = gtk.HBox()",1471],["gtk.main_iteration()",1258],["import gtk.glade",1431],["vbox = gtk.VBox()",1703],["while gtk.events_pending():",1782],["if response == gtk.RESPONSE_OK:",1897],["gtk.main_quit()",3663],["gtk.main()",6067],["import gtk",18065]],"useCount":194155},{"word":"h","context":[["## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]",2080],["return h",5621],["#include <stdio.h>",2985],["## nstime.h (module 'core'): ns3::Time [class]",2250],["h.close()",2469],["except HTTPError as h:",1854],["raise h",1869],["if of.startswith(\"h\"):",1960],["## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]",2080],["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'",2116]],"useCount":1874416},{"word":"handle","context":[["self.handle = handle",1624],["self.handle = handle",1624],["return handle",1654],["exceptions.handle(self.request,",2458],["def handle(self, request, data):",2745],["exceptions.handle(request,",3090],["req._this=self.handle",3911],["handle.close()",4397],["def handle(self):",6094],["def handle(self, *args, **options):",16302]],"useCount":327089},{"word":"handler","context":[["if handler is None:",1671],["handler.setFormatter(formatter)",4385],["return handler",3903],["def run(self, handler):",2704],["self.handler = handler",2671],["self.handler = handler",2671],["handler = logging.StreamHandler()",2474],["if handler:",2184],["def handler(request):",1638],["logger.addHandler(handler)",4807]],"useCount":343776},{"word":"has","context":[["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["An instance has the following attributes at least.",712],["#             then this has concurrency issues",616],["Error: A general Mandrill error has occurred",588],["htmltext = \"<html><body>This quest has already been completed.</body></html>\"",565],["Given the course has a Video component in \"Youtube\" mode",561],["def has(self, key):",525],[":param context: Information that identifies the user that has made this",472],["# A segment is active if it has >= tpSegmentActivationThreshold",471],["# of this ZenPack has changed.  If no ZenPack with the current name is",455]],"useCount":719044},{"word":"hasattr","context":[["if hasattr(obj, 'db_name') and obj.db_name is not None:",970],["elif hasattr(value, \"to_dict\"):",1972],["lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,",1973],["if hasattr(obj, 'db_id') and obj.db_id is not None:",1964],["if hasattr(obj, 'db_entity_type') and obj.db_entity_type is not None:",1692],["if hasattr(obj, 'db_entity_id') and obj.db_entity_id is not None:",1348],["if hasattr(item[1], \"to_dict\") else item,",1221],["elif hasattr(old_obj, 'db_id') and old_obj.db_id is not None:",1139],["if hasattr(self, '_set'):",1090],["if hasattr(self, name):",1044]],"useCount":448591},{"word":"hash","context":[["return hash(self.name)",895],["## hash-function.h (module 'core'): ns3::Hash::Function::Hash32 [class]",702],["## hash-function.h (module 'core'): void ns3::Hash::Function::Hash64::clear() [member function]",702],["## hash-function.h (module 'core'): ns3::Hash::Function::Hash64 [class]",702],["## hash.h (module 'core'): uint32_t ns3::Hasher::GetHash32(std::string const s) [member function]",702],["## hash-murmur3.h (module 'core'): void ns3::Hash::Function::Murmur3::clear() [member function]",702],["## hash-murmur3.h (module 'core'): ns3::Hash::Function::Murmur3::Murmur3() [constructor]",702],["return hash",807],["value = (value * 31) ^ hash(self.success)",1034],["def hash(self):",1081]],"useCount":194608},{"word":"have","context":[["Usually you will have the standard Django WSGI application here, but it also",4328],["# Using a string here means the worker will not have to",712],["# The compilation_commands.json file generated by CMake does not have entries",727],["# have to be included in MANIFEST.in as well.",988],["pass # Python < 2.2 doesn't have 'property'.",1137],["# Check that the right middleware methods have been invoked",1172],["Please have a look at the function description/documentation in the V-REP user manual",1419],["# you should have received as part of this distribution.",1828],["# you should have received as part of this distribution. The terms",2697],["# All configuration values have a default; values that are commented out",25768]],"useCount":894949},{"word":"header","context":[["[param('ns3::Header const &', 'header'), param('uint32_t', 'size')])",1898],["self.header = header",1963],["self.header = header",1963],["for header in headers:",2196],["return header",2891],["# HTTP header `Content-Type`",2961],["# HTTP header `Accept`",2961],["if header:",3317],["header = []",1714],["def __init__(self, header, value, mask=None):",3443]],"useCount":552639},{"word":"headers","context":[["headers = {}",12691],["return headers",4969],["req.headers[\"content-type\"] = \"application/json\"",6023],["headers=headers,",6315],["headers=headers,",6315],["headers=headers)",7286],["headers=headers)",7286],[":param dict custom_headers: headers that will be added to the request",8074],["# Construct headers",8075],["headers = {",13937]],"useCount":936704},{"word":"height","context":[["self.height = height",5476],["self.height = height",5476],["def height(self):",2384],["height, width = 3, 3",1528],["<canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas>",1510],["height = 0",1307],["'height': height,",1258],["'height': height,",1258],["self.height = 0",1034],["images = tf.random_uniform((5, height, width, 3), seed=1)",1029]],"useCount":327717},{"word":"help","context":[["# Output file base name for HTML help builder.",27989],["help=(",2109],["help=argparse.SUPPRESS)",4560],["help=\"\"\"",4112],["help='''",3031],["# super, missing, help",2787],["def help(self):",2753],["help=_(",2695],["cls.add_instance_attribute('help', 'std::string', is_const=False)",2232],["'href=\"%s/help/admin\">Admin Area' \\",1971]],"useCount":708259},{"word":"here","context":[["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# add these directories to sys.path here. If the directory is relative to the",24896],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# .htaccess) here, relative to this directory. These files are copied",11812],["# Local time zone for this installation. Choices can be found here:",7887]],"useCount":645290},{"word":"host","context":[["self.host = host",14244],["host = None",2615],["if host is None:",2618],["self.assertTrue(filt_cls.host_passes(host, filter_properties))",2652],["return host",2688],["host,",3804],["for host in hosts:",4562],["if host:",4686],["if not host:",4738],["self.host = host",14244]],"useCount":1217171},{"word":"hostname","context":[["hostname = socket.gethostname()",1969],["self.hostname = hostname",2377],["return hostname",1647],["hostname,",1061],["if hostname:",1020],["hostname = None",943],["def hostname(self):",855],["if not hostname:",806],["if hostname is None:",759],["self.hostname = hostname",2377]],"useCount":183968},{"word":"href","context":[["'href=\"%s/help/admin\">Admin Area' \\",1971],["if href:",955],["\"href\": flavor_bookmark,",807],["'href-vars': {",783],["outstring += \"<a href='\"",762],["return href",537],["outstring += \" <a href='\"",508],["href_parts = urlparse.urlparse(servers_links[0]['href'])",501],["\"href\": self_link,",485],["\"href\": image_bookmark,",760]],"useCount":193103},{"word":"html","context":[["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["<html>",13726],["return html",10785],["<!DOCTYPE html>",7191],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">",3957],["from django.utils.html import escape",3897],["return render_template('index.html')",3485],["</html>",13930]],"useCount":889772},{"word":"http","context":[["from django.http import HttpResponseRedirect",9720],["from django.http import HttpResponse",19325],["# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name",7832],["from django.http import Http404",7528],["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["from django import http",5643],["IsA(http.HttpRequest),",5092],["<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">",3957],["# URL: http://code.google.com/p/sickbeard/",3955]],"useCount":1305830},{"word":"https","context":[["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956],["https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/",3284],["# https://docs.djangoproject.com/en/1.6/topics/i18n/",3122],["# https://docs.djangoproject.com/en/1.6/howto/static-files/",3049],["# https://docs.djangoproject.com/en/1.7/topics/i18n/",3041]],"useCount":419585},{"word":"i","context":[["i += 1",106391],["for i in range(n):",15694],["if i == 0:",16746],["i = 1",17605],["return i",18592],["for i in range(10):",18930],["for i in range(3):",19936],["i = i + 1",27057],["i = i + 1",27057],["i = 0",99641]],"useCount":3925283},{"word":"id","context":[["id = db.Column(db.Integer, primary_key=True)",10949],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["id = Column(Integer, primary_key=True)",17331],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["self.id = id",16261],["self.id = id",16261],["('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",15194],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114]],"useCount":5048910},{"word":"ids","context":[["for id in ids:",9353],["return ids",4311],["def unlink(self, cr, uid, ids, context=None):",5248],["def write(self, cr, uid, ids, vals, context=None):",5277],["if ids:",5481],["if isinstance(ids, (int, long)):",5530],["ids = []",7185],["if not ids:",7783],["ids = [ids]",8198],["ids = [ids]",8198]],"useCount":591236},{"word":"idx","context":[["if idx == -1:",1374],["idx += 1",11874],["idx = 0",10348],["return idx",3177],["if idx == 0:",2073],["def __getitem__(self, idx):",1839],["if idx:",1572],["idx = 1",1501],["if idx != -1:",1483],["if idx < 0:",1370]],"useCount":275528},{"word":"if","context":[["if __name__ == \"__main__\":",298715],["if value:",33671],["if form.is_valid():",36268],["if context is None:",38917],["if value is None:",41767],["if request.method == 'POST':",42864],["if m:",53777],["if match:",57234],["if verbose:",75034],["if __name__ == '__main__':",473962]],"useCount":28920253},{"word":"ignore","context":[["warnings.simplefilter(\"ignore\")",3786],["event.ignore()",3138],["warnings.simplefilter('ignore')",1161],["if ignore:",1115],["with np.errstate(invalid='ignore'):",1086],["olderr = np.seterr(all='ignore')",1021],["warnings.simplefilter(\"ignore\", DeprecationWarning)",865],["# directories to ignore when looking for source files.",24534],["warnings.simplefilter(\"ignore\", category=SparseEfficiencyWarning)",806],["warnings.simplefilter('ignore', DeprecationWarning)",803]],"useCount":202112},{"word":"image","context":[["for image in images:",3654],["\"image\": {",3003],["# A tuple containing the cover image and cover page html template filenames.",3089],["self.rect = self.image.get_rect()",3170],["if image:",3177],["return image",8623],["# The name of an image file (within the static path) to use as favicon of the",24060],["# The name of an image file (relative to this directory) to place at the top",25393],["# The name of an image file (relative to this directory) to place at the top of",25468],["self.image = image",2719]],"useCount":940653},{"word":"images","context":[["images = []",3716],["image_href = 'http://localhost/v2/images/%s' % self.image_uuid",1120],["'images': [",1152],["'images': [],",1174],["req = webob.Request.blank(\"/images\")",1271],["path = self._url('/v2/images/%s' % image_id)",1330],["# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a",1742],["# Scale large images.",2087],["return images",2433],["for image in images:",3654]],"useCount":256179},{"word":"import","context":[["import re",377951],["import sys",791260],["import logging",366679],["import time",349792],["import json",266315],["import numpy as np",265867],["import unittest",234895],["from __future__ import unicode_literals",196429],["import datetime",194963],["import os",945005]],"useCount":21428420},{"word":"in","context":[["for f in files:",21436],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["for row in rows:",24269],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# |version| and |release|, also used in various other places throughout the",25310],["# Note that not all possible configuration values are present in this",25557],["for line in f:",31883],["for line in lines:",41967],["# Redistribution and use in source and binary forms, with or without",44287]],"useCount":16509664},{"word":"include","context":[["url(r'^admin/', include(admin.site.urls)),",14085],["from django.conf.urls import patterns, include, url",15417],["2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))",2135],["include('whitespace'),",2180],["# url(r'^admin/doc/', include('django.contrib.admindocs.urls')),",2241],["2. Add a URL to urlpatterns:  url(r'^blog/', include(blog_urls))",2708],["from django.conf.urls import url, include",2906],["#include <stdio.h>",2985],["# url(r'^blog/', include('blog.urls')),",3940],["from django.conf.urls import include, url",8033]],"useCount":353413},{"word":"index","context":[["master_doc = 'index'",28816],["def __getitem__(self, index):",10010],["def index():",17834],["index += 1",20031],["index = 0",22157],["# A list of ignored prefixes for module index sorting.",26155],["# If true, the index is split into individual pages for each letter.",26818],["# If false, no module index is generated.",74645],["def index(self):",9001],["# If false, no index is generated.",29138]],"useCount":1470305},{"word":"info","context":[["logger.info(",7357],["return info",14194],["logging.info(",3874],["info = {",3936],["info={",4003],["log.info(",4103],["if info:",5106],["info = {}",6349],["def info(self):",6441],["# The version info for the project you're documenting, acts as replacement for",25262]],"useCount":1202530},{"word":"information","context":[["# General information about the project.",27441],["# See the README file for information on usage and redistribution.",1086],["for more information.",1199],["distributed with this work for additional information",1385],["directory. For more information, see the \"Caching authentication information\"",1718],["directory. For more information, see the \"Caching authentication information\"",1718],["information.",3559],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["# distributed with this work for additional information",9412],["For more information on this file, see",25647]],"useCount":389070},{"word":"input","context":[["# no input wsaction",5428],["from six.moves import (filter, input, map, range, zip)  # noqa",1483],["input = \"\"\"",1680],["self.recover(self.input, re)",1808],["Returns ugen input.",1911],["return input",1927],["self.input = input",2001],["self.input = input",2001],["input:",2331],["Choreo. The InputSet object is used to specify input parameters when executing this Choreo.",2841]],"useCount":743558},{"word":"inputs","context":[["inputs = []",3565],["x = op.inputs[0]",702],["inputs = {",710],["self.inputs = inputs",762],["self.inputs = inputs",762],["inputs,",832],["inputs = [",887],["return inputs",898],["inputs:",1067],["yield assert_equal, getattr(inputs.traits()[key], metakey), value",2581]],"useCount":226191},{"word":"insert","context":[["#sys.path.insert(0, os.path.abspath('.'))",15081],["sys.path.insert(0, os.path.abspath('../..'))",1324],["sys.path.insert(0, '.')",1068],["}).insert()",1119],["sys.path.insert(0, path)",1120],["sys.path.insert(0, '..')",1136],["sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))",1378],["sys.path.insert(0, project_root)",1417],["# sys.path.insert(0, os.path.abspath('.'))",1926],["sys.path.insert(0, os.path.abspath('..'))",3908]],"useCount":292945},{"word":"inst","context":[["return NotFoundError(inst.args[0] + \" not found\")",850],["return inst",4296],["except Exception as inst:",4148],["print inst",1473],["instance = objects.Instance(**self.inst)",1367],["inst.save()",1251],["except Exception, inst:",1207],["inst.update(params)",1055],["inst = {}",1005],["except KeyError as inst:",915]],"useCount":185001},{"word":"instance","context":[["if instance is None:",5976],["instance=instance)",30506],["instance=instance)",30506],["instance.save()",17079],["return instance",15222],["instance,",13784],["instance = self._create_fake_instance_obj()",12034],["clean_lines: A CleansedLines instance containing the file.",7423],["for instance in instances:",6820],["instance = objects.Instance(**self.test_instance)",6446]],"useCount":2474257},{"word":"instances","context":[["instance_uuids = [instance['uuid'] for instance in instances]",1180],["TypeError will be raised when the following arguments are not instances",1255],["self.assertEqual(len(instances), 0)",1804],["instances.",1957],["instances = db.instance_get_all(self.context)",2115],["return instances",2623],["for instance in instances:",6820],["instances = []",3482],["instances = self.compute_api.get_all(c,",3385],["self.assertEqual(len(instances), 1)",3052]],"useCount":294215},{"word":"instead","context":[["# For a C project, you would set this to something like 'c99' instead of",500],["instead be the :class:`.InstanceState` state-management",457],["# update sys.path; instead we just hope the user managed to do that",354],["# For a C project, you would set this to 'c' instead of 'c++'.",524],["# so we do it with a regexp instead. This function is not used from",676],["# instead.",702],["# starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of",776],["# compile_commands.json file to use that instead of 'flags'. See here for",829],["# the SWIG interface file instead.",1627],["instead.",3303]],"useCount":231278},{"word":"int","context":[[":rtype: int",21650],["verbose : bool, str, int, or None",5083],["'int',",11661],["value = int(value)",7163],["return int(value)",5789],["**type**\\:  int",5538],["if isinstance(ids, (int, long)):",5530],["@rtype: int",5269],["axis : int, optional",5050],["type=int,",11942]],"useCount":1903909},{"word":"integer","context":[["@type version: integer",898],["'color': fields.integer('Color Index'),",929],["raise_parse_error(node, 'Bad integer attribute: %s' % exp)",1043],["@rtype: integer",1058],["type='integer', multi='_get_picking_count'),",1176],["'sequence': fields.integer('Sequence'),",1236],["'type': 'integer',",1663],["\"type\": \"integer\",",1674],["# @return an integer",1864],["type: integer",878]],"useCount":300899},{"word":"interface","context":[["- 'ln' *string* - The language to display the interface in",1421],["<interface>",1304],["from zope.interface import implements",5846],["[param('uint32_t', 'interface')],",5639],["</interface>",2900],["from zope.interface import implementer",2646],["from zope.interface import Interface",2260],["[param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')],",1692],["# the SWIG interface file instead.",1627],["interface.",1599]],"useCount":355715},{"word":"into","context":[["serialize message into buffer",1096],["unpack serialized message in str into this message instance using numpy for array types",1096],["serialize message with numpy array types into buffer",1096],["dive = Book.objects.using('other').create(title=\"Dive into Python\",",1103],["ur\"\"\" converts nitro response into object and returns the object array in case of get request.",1166],["# A list of files that should not be packed into the epub file.",3490],["# Grouping the document tree into Texinfo files. List of tuples",21017],["# If true, the index is split into individual pages for each letter.",26818],["# Grouping the document tree into LaTeX files. List of tuples",27516],["unpack serialized message in str into this message instance",1096]],"useCount":535682},{"word":"invalid","context":[["code='invalid',",1354],["'invalid': [",2589],["self.error_messages['invalid'],",1255],["raise ValidationError(self.error_messages['invalid'])",2591],["# pylint: disable=invalid-name",4613],["invalid = {",1217],["def tearDown(self):  # pylint: disable=invalid-name",890],["if invalid:",962],["with np.errstate(invalid='ignore'):",1086],["itab_entry ( 'invalid',       O_NONE, O_NONE, O_NONE,    P_none ),",1215]],"useCount":259339},{"word":"io","context":[["f = io.BytesIO()",989],["import io",25184],["from io import BytesIO",9359],["from io import StringIO",8725],["from astropy.io import fits",2209],["import scipy.io",1687],["sample = io.BytesIO(sample.encode('utf-8'))",1386],["from io import open",1121],["import scipy.io as sio",1118],["# www.navitia.io",1013]],"useCount":187495},{"word":"ip","context":[["self.ip = ip",2457],["return ip",2852],["self.ip = ip",2457],["for ip in ips:",2242],["'Cisco-IOS-XR-ip-bfd-oper', False),",1973],["if ip:",1456],["ip = get_ipython()",1266],["ip = None",1041],["if not ip:",1035],["if ip is None:",886]],"useCount":288870},{"word":"iprot","context":[["def read(self, iprot):",22087],["args.read(iprot)",8039],["iprot.skip(ftype)",79782],["iprot.readStructBegin()",22032],["iprot.readFieldEnd()",22032],["(fname, ftype, fid) = iprot.readFieldBegin()",22032],["fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))",21958],["iprot.readStructEnd()",22032],["iprot.readListEnd()",5277],["iprot.readMessageEnd()",11839]],"useCount":301292},{"word":"is","context":[["# If false, no module index is generated.",74645],["if value is None:",41767],["if context is None:",38917],["# If false, no index is generated.",29138],["# Else, today_fmt is used as the format for a strftime call.",26971],["# If true, the index is split into individual pages for each letter.",26818],["# non-false value, then it is used:",25813],["# base URL from which the finished HTML is served.",25764],["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459]],"useCount":11213755},{"word":"is_const","context":[["is_const=True)",361498],["is_const=True, is_virtual=True)",108896],["is_pure_virtual=True, is_const=True, is_virtual=True)",66921],["cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)",2306],["is_const=True, visibility='private', is_virtual=True)",8847],["is_const=True, visibility='protected')",4466],["cls.add_instance_attribute('help', 'std::string', is_const=False)",2232],["is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)",3840],["cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)",2847],["cls.add_instance_attribute('name', 'std::string', is_const=False)",3335]],"useCount":617494},{"word":"is_virtual","context":[["is_pure_virtual=True, is_const=True, is_virtual=True)",66921],["is_const=True, is_virtual=True)",108896],["is_virtual=True)",96617],["is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)",3840],["is_pure_virtual=True, visibility='protected', is_virtual=True)",2131],["is_pure_virtual=True, visibility='private', is_virtual=True)",4651],["is_const=True, visibility='private', is_virtual=True)",8847],["visibility='protected', is_virtual=True)",14676],["visibility='private', is_virtual=True)",19892],["is_pure_virtual=True, is_virtual=True)",52937]],"useCount":382360},{"word":"isinstance","context":[["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["if isinstance(value, list):",7753],["if isinstance(value, dict):",5674],["if isinstance(ids, (int, long)):",5530],["if isinstance(value, str):",4496],["elif isinstance(value, dict):",4022],["if isinstance(value, unicode):",3003],["elif isinstance(value, list):",2874],["if isinstance(value, datetime.datetime):",2713],["if isinstance(value, basestring):",6799]],"useCount":1440190},{"word":"it","context":[["# waive the privileges and immunities granted to it by virtue of its status",2689],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["# Make this unique, and don't share it with anybody.",7163],["Usually you will have the standard Django WSGI application here, but it also",4328],["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",3798],["# modify, copy, or redistribute it subject to the terms and conditions of",2884],["# non-false value, then it is used:",25813]],"useCount":2154379},{"word":"item","context":[["if item is None:",4189],["def __contains__(self, item):",4373],["items.append(item)",4428],["for item in data:",5733],["def __getitem__(self, item):",6764],["if item:",7118],["yield item",9882],["for item in items:",21326],["return item",21425],["item = QtGui.QTableWidgetItem()",3952]],"useCount":1295698},{"word":"items","context":[["items = []",17033],["for metakey, value in list(metadata.items()):",3128],["for key, value in kwargs.items():",3187],["if items:",3222],["for k, v in kwargs.items():",3335],["self.items = []",3460],["items.append(item)",4428],["return items",11498],["def items(self):",11849],["for item in items:",21326]],"useCount":864953},{"word":"iteritems","context":[["for k, v in attrs.iteritems():",990],["for key, value in self.__dict__.iteritems()]",20899],["from six import iteritems",4717],["def iteritems(self):",4273],["for key, val in iteritems(params['kwargs']):",2961],["for (key, val) in params['kwargs'].iteritems():",2418],["for k, v in kwargs.iteritems():",1743],["for attr, _ in iteritems(self.swagger_types):",1641],["for key, value in kwargs.iteritems():",1630],["for key, value in data.iteritems():",959]],"useCount":217542},{"word":"its","context":[["# waive the privileges and immunities granted to it by virtue of its status",2689],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708],["#     * Neither the name of Google Inc. nor the names of its",6894],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["# This code is part of the Biopython distribution and governed by its",1680],["# consequences resulting from its eventual inadequacies and bugs",1584],["# This lets us ensure that the source package is imported, and that its",1387],["# granted to it by virtue of its status as an Intergovernmental Organization",1205],["##  - Neither the name of the New York University nor the names of its",1256]],"useCount":360580},{"word":"j","context":[["j += 1",12365],["j = 0",11619],["for j in range(n):",3979],["j = j + 1",3057],["j = j + 1",3057],["for j in range(3):",2988],["return j",2935],["j+=1",2555],["j -= 1",2302],["j=0",2210]],"useCount":594196},{"word":"job","context":[["self.job = job",1209],["for job in jobs:",3182],["self.job = job",1209],["job.run()",1328],["return job",3072],["job.save()",1175],["if job:",1052],["@return: job id",765],["if job is None:",749],["if not job:",754]],"useCount":235292},{"word":"join","context":[["from os.path import join",7705],["'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),",8787],["os.path.join(",7681],["t.join()",7356],["p.join()",4842],["thread.join()",4146],["return ''.join(packed)",3804],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["pool.join()",3773],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759]],"useCount":1681105},{"word":"js","context":[["#html_search_scorer = 'scorer.js'",4754],["'js/libs/jquery.waypoints.min.js',",813],["<!-- 載入 brython.js -->",2431],["'js/libs/jquery.waypoints.min.js',",813],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["# html_search_scorer = 'scorer.js'",1160],["<script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script>",1130],["js = (",1100]],"useCount":248071},{"word":"json","context":[["import simplejson as json",15144],["self.assertEqual(response.json['errors'], [",3884],["data = json.loads(response.content)",3919],["content_type='application/json',",4881],["req.headers[\"content-type\"] = \"application/json\"",6023],["content_type='application/json')",6819],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["body = json.loads(body)",8219],["self.assertEqual(response.content_type, 'application/json')",11194],["import json",266315]],"useCount":1370012},{"word":"just","context":[["# the code embedded in _version.py can just fetch the value of these",829],["# You can just specify the packages manually here if your project is",1294],["# each be defined on a line of their own. _version.py will just call",451],["# which is just a placeholder for your code.",472],["# NOTE: This is just for YouCompleteMe; it's highly likely that your project",481],["This configures the context with just a URL",669],["# that just contains the computed version number.",712],["# just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.",776],["# remember shell=False, so use git.cmd on windows, not just git",817],["# Most projects will NOT need to set this to anything; you can just change the",829]],"useCount":276709},{"word":"k","context":[["k = 0",7037],["def __getitem__(self, k):",2130],["self[k] = v",2175],["k = 1",2386],["for k, v in d.items():",2531],["return k",4459],["setattr(self, k, v)",5567],["for k in keys:",6326],["k += 1",7283],["for k, v in kwargs.items():",3335]],"useCount":1208700},{"word":"key","context":[["return key",13144],["def __getitem__(self, key):",32305],["L = ['%s=%r' % (key, value)",21414],["for key, value in self.__dict__.iteritems()]",20899],["for key in keys:",17986],["def __setitem__(self, key, value):",17895],["# SECURITY WARNING: keep the secret key used in production secret!",13453],["self.key = key",11001],["self.key = key",11001],["def __delitem__(self, key):",10749]],"useCount":2786643},{"word":"keys","context":[["for k in keys:",6326],["if keys:",2051],["setattr(self,keys, value)",3035],["for key in keys:",17986],["def keys(self):",11762],["keys.sort()",7146],["from selenium.webdriver.common.keys import Keys",2516],["keys = []",5723],["return keys",3733],["for keys, value in kwargs.items():",3036]],"useCount":663770},{"word":"keyword","context":[["for keyword in keywords:",1082],["use is keyword arguments as this is more robust to future message",1096],["changes.  You cannot mix in-order arguments and keyword arguments.",1096],["# \"scripts\" keyword. Entry points provide cross-platform support and allow",1107],["import keyword",1479],["\"Got an unexpected keyword argument '%s'\"",2740],["keyword arguments.",920],["Optional keyword arguments:",753],["with the keyword arguments provided to the constructor.",619],[":param kwds: use keyword arguments corresponding to message field names",1004]],"useCount":192797},{"word":"kind","context":[["for name, kind, homecls, value in ok:",567],["<category scheme='http://schemas.google.com/g/2005#kind'",578],["self._kind = kind",624],["for kind in ALL_FOUR:",632],["def kind(self):",1292],["c.sort(kind=kind)",1645],["c.sort(kind=kind)",1645],["self.kind = kind",2068],["self.kind = kind",2068],["assert_equal(a.copy().argsort(kind=kind), r, msg)",520]],"useCount":215947},{"word":"kw","context":[["def __init__(self, *args, **kw):",8020],["lambda *a, **kw: None)",1457],["def __init__(self, master=None, cnf={}, **kw):",1526],["**kw)",1536],["initHelper(self, kw)",1633],["if kw:",1661],["def __init__ (self, **kw):",1787],["kw = {}",3381],["self.binding.Send(None, None, request, soapaction=\"\", **kw)",3988],["def __init__(self, **kw):",4751]],"useCount":337340},{"word":"kwargs","context":[["**kwargs",11904],["def wrapper(*args, **kwargs):",12057],["kwargs = {",15799],["kwargs = {}",16542],["def save(self, *args, **kwargs):",18292],["**kwargs):",22786],["def get_context_data(self, **kwargs):",25507],["**kwargs)",31777],["def __init__(self, **kwargs):",47335],["def __init__(self, *args, **kwargs):",130790]],"useCount":2413010},{"word":"l","context":[["l.sort()",2192],["assert_array_equal(l, r)",2071],["l = 0",2388],["for i in l:",2546],["if not l:",2564],["for l in f:",2829],["if l:",3651],["for l in lines:",5255],["return l",16541],["l = []",19947]],"useCount":686157},{"word":"label","context":[["self.label.setObjectName(_fromUtf8(\"label\"))",2630],["self.label = label",5836],["self.label = label",5836],["number=1, type=9, cpp_type=9, label=1,",4421],["if label:",4399],["return label",3741],["number=2, type=9, cpp_type=9, label=1,",3290],["number=1, type=11, cpp_type=10, label=1,",3197],["for label in labels:",3002],["self.label.setObjectName(_fromUtf8(\"label\"))",2630]],"useCount":804310},{"word":"labels","context":[["self.labels = labels",1094],["labels = []",4834],["for label in labels:",3002],["return labels",2436],["if labels is None:",1453],["labels = {",1245],["if labels:",1219],["labels.append(label)",1189],["self.labels = labels",1094],["labels = {}",1067]],"useCount":225947},{"word":"lambda","context":[["__del__ = lambda self : None;",13417],["represent = lambda opt: \\",3575],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["__del__ = lambda self: None",3467],["_fromUtf8 = lambda s: s",2046],["lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,",1973],["_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))",1640]],"useCount":732718},{"word":"lang","context":[["if lang:",2106],["from kivy.lang import Builder",1492],["if not lang:",1405],["for lang in langs:",1382],["self.lang = lang",1350],["self.lang = lang",1350],["return lang",1315],["if lang is None:",1270],["lang = None",1085],["<html lang=\"en\">",1102]],"useCount":197674},{"word":"language","context":[["# The language of the text. It defaults to the language option",3473],["# load the right message language",3982],[":language: yaml",5722],["# A dictionary with options for the search language support, empty by default.",5913],["# Usually you set \"language\" from the command line for these cases.",5937],["language = None",6264],["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["# The language of the text. It defaults to the language option",3473],["#language = None",18478],["# The language for content autogenerated by Sphinx. Refer to documentation",26446]],"useCount":348941},{"word":"last","context":[["last = None",2736],["last = 0",1736],["Traceback (most recent call last):",34604],["if last is not None:",499],["if last:",2398],["self.last = None",721],["return last",739],["# If page is out of range (e.g. 9999), deliver last page of results.",797],["if last is None:",868],["def last(self):",1182]],"useCount":325206},{"word":"layer","context":[["for layer in layers:",2857],["layer.startEditing()",770],["# cut the new layer polygons",1003],["features = vector.features(layer)",1044],["layer = DatabaseFunctionalLayer",1048],["self.layer = layer",1078],["self.layer = layer",1078],["if layer:",1230],["for layer in self.layers:",1417],["return layer",1928]],"useCount":205659},{"word":"layout","context":[["layout = self.layout",7743],["row = layout.row(align=True)",1697],["layout = QVBoxLayout()",1744],["self.helper.layout = Layout(",2072],["split = layout.split()",2245],["self.setLayout(layout)",4483],["layout.separator()",4733],["row = layout.row()",5214],["layout = self.layout",7743],["col = layout.column(align=True)",1538]],"useCount":186209},{"word":"left","context":[["if left:",1193],["left = 0",1188],["self.left = left",2200],["self.left = left",2200],["def left(self):",1662],["return left",1418],["#         self.left = None",1384],["left=left,",1221],["left=left,",1221],["self.left = None",1205]],"useCount":336548},{"word":"len","context":[["if len(sys.argv) > 1:",10294],["if len(sys.argv) < 2:",8666],["if len(args) == 1:",8388],["if len(args) == 0:",7456],["if len(args) > 1:",6421],["self.assertEqual(len(mail.outbox), 1)",6190],["if len(args) != 1:",6040],["if len(sys.argv) != 2:",5766],["if len(sys.argv) == 1:",5131],["if len(args) > 0:",4750]],"useCount":3311106},{"word":"length","context":[["d.skip(length)",3234],["self.length = length",5120],["self.length = length",5120],["length = 0",4309],["def length(self):",3505],["length = len(_x)",3430],["length = d.getVarInt32()",3234],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["return length",2782],["length = sum([len(x) for x in packed])",2764]],"useCount":535095},{"word":"level","context":[["'level': 'ERROR',",17149],["level += 1",14544],["showIndent(outfile, level, pretty_print)",13276],["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["'level': 'DEBUG',",11317],["logging.basicConfig(level=logging.DEBUG)",7490],["self.exportLiteralChildren(outfile, level, name_)",7373],["def exportLiteralChildren(self, outfile, level, name_):",7303],["level -= 1",5889],["showIndent(outfile, level)",54429]],"useCount":741053},{"word":"lib","context":[["from grr.lib import utils",1680],["err = lib().Z3_get_error_code(a0)",5535],["raise Z3Exception(lib().Z3_get_error_msg_ex(a0, err))",4961],["from grr.lib import rdfvalue",2301],["from grr.lib import aff4",1870],["from grr.lib import flags",1600],["from grr.lib import test_lib",1554],["from grr.lib import config_lib",1394],["from reportlab.lib import colors",1216],["from resources.lib.libraries import client",1071]],"useCount":384295},{"word":"library","context":[["# Locate the client library. If module was installed via \"setup.py\" script, then",1115],["# Standard library",1189],["# Enthought library imports.",1451],["# Import appropriate classes from the client library.",1826],["# ============= local library imports  ==========================",2078],["# ============= standard library imports ========================",2098],["# ============= enthought library imports =======================",2205],["# Import appropriate modules from the client library.",2214],["# Example configuration for intersphinx: refer to the Python standard library.",5883],["# Standard library imports",893]],"useCount":196916},{"word":"like","context":[["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["X : {array-like, sparse matrix}, shape = [n_samples, n_features]",1376],["picks : array-like of int | None",1090],["X : {array-like, sparse matrix}, shape (n_samples, n_features)",1390],["# absolute, like shown here.",1790],["X : array-like, shape = [n_samples, n_features]",2003],["X : array-like, shape (n_samples, n_features)",2043],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759]],"useCount":423974},{"word":"limit","context":[["self.limit = limit",2044],["limit=limit,",3387],["limit=limit,",3387],["if limit is not None:",2774],["self.limit = limit",2044],["limit=10,",1949],["limit = None",1423],["if limit is None:",1413],["limit=None,",1292],["if limit:",4181]],"useCount":362828},{"word":"line","context":[["for line in f:",31883],["for line in lines:",41967],["print line",7619],["line = f.readline()",8006],["if not line:",20092],["for line in f.readlines():",8390],["if line:",10246],["return line",13527],["line = line.strip()",26427],["line = line.strip()",26427]],"useCount":2215705},{"word":"lines","context":[["lines = [",2717],["for line in lines:",41967],["lines = []",23152],["return lines",12015],["lines = f.readlines()",8913],["lines.append(line)",6242],["for l in lines:",5255],["# Uncomment the next two lines to enable the admin:",4215],["self.lines = []",2911],["if lines:",2884]],"useCount":592099},{"word":"link","context":[["# contain a <link> tag referring to it.  The value of this option must be the",25748],["for link in links:",4599],["return link",4065],["if link:",2764],["link=response.read()",1741],["for key, value in link.items():",1621],["self.link = link",1469],["self.link = link",1469],["link.save()",1261],["def link(self):",1462]],"useCount":420630},{"word":"links","context":[["# If true, show URL addresses after external links.",44800],["if links:",1245],["'links': [",2066],["return links",3216],["links = []",4317],["for link in links:",4599],["\"links\": [",6945],["# If true, show page references after internal links.",23896],["# If true, links to the reST sources are added to the pages.",26301],["\"links\": {",1171]],"useCount":250797},{"word":"list","context":[["# The format is a list of tuples containing the path and title.",6966],["list = []",7187],["if isinstance(value, list):",7753],["self.list = []",7973],["For the full list of settings and their values, see",14104],["# a list of builtin themes.",23964],["# further.  For a list of options available for each theme, see the",24845],["# A list of ignored prefixes for module index sorting.",26155],["# for a list of supported languages.",26482],[":rtype: list",11953]],"useCount":2726941},{"word":"ln","context":[["ln=ln,",3368],["ln = argd['ln']",1618],["ln = argd['ln']",1618],["ln=CFG_SITE_LANG):",2564],["@param ln: language",3030],["language=ln,",3210],["ln=ln,",3368],["ln=ln)",3567],["ln=ln)",3567],["_ = gettext_set_language(ln)",15162]],"useCount":198647},{"word":"load","context":[["# to load the internationalization machinery.",7663],["self.load()",5955],["body = self.fixtures.load(",5095],["# load the right message language",3982],["def load():",1707],["data = json.load(f)",1581],["def load(self, filename):",1485],["return json.load(f)",1166],["config.load(",1059],["def load(self):",10753]],"useCount":352596},{"word":"loads","context":[["res_dict = json.loads(res.body)",2937],["body = json.loads(body)",8219],["res_dict = jsonutils.loads(res.body)",1778],["return json.loads(str)",2862],["content = json.loads(response.content)",2372],["res_json = json.loads(response.content)",2363],["data = json.loads(response.content)",3919],["data = json.loads(res.content)",2155],["resp = json.loads(ret.read())",1850],["data = json.loads(data)",2187]],"useCount":304494},{"word":"local","context":[["#!/usr/local/bin/python",2734],["'destination_type': 'local',",3194],["\"local\": [",781],["# local",784],["# proper local hrefs must start with 'http://localhost/v2/'",925],["if self.local:",973],["# local imports",1261],["from threading import local",1264],["if local:",1885],["# ============= local library imports  ==========================",2078]],"useCount":285243},{"word":"locale","context":[["'django.middleware.locale.LocaleMiddleware',",2998],["import locale",13196],["# calendars according to the current locale.",4191],["locale.setlocale(locale.LC_ALL, '')",2266],["locale.setlocale(locale.LC_ALL, '')",2266],["# calendars according to the current locale",1755],["except locale.Error:",1112],["if locale:",807],["self.locale = locale",776],["self.locale = locale",776]],"useCount":183039},{"word":"location","context":[["self.location = location",3723],["self.location = location",3723],["location=location,",1489],["for location in locations:",1496],["if not location:",1576],["{u'description': u'Not Found', u'location':",1652],["if location:",3130],["return location",2129],["location = None",2027],["def location(self):",1673]],"useCount":506202},{"word":"log","context":[["from nova.openstack.common import log as logging",7265],["from oslo_log import log as logging",16834],["log = logging.getLogger(__name__)",39134],["'class': 'django.utils.log.AdminEmailHandler'",6831],["from twisted.python import log",6637],["LOG = log.getLogger(__name__)",6129],["'()': 'django.utils.log.RequireDebugFalse'",6036],["if log:",5568],["log.info(",4103],["from oslo_log import log",4092]],"useCount":1155727},{"word":"logger","context":[["logger.setLevel(logging.INFO)",4590],["logger.info(",7357],["logger.setLevel(logging.DEBUG)",8303],["logger = logging.getLogger(__name__)",56480],["logger.addHandler(handler)",4807],["logger.warning(",5202],["self.logger = logger",6946],["self.logger = logger",6946],["logger = logging.getLogger()",6961],["logger.debug(",7081]],"useCount":801106},{"word":"logging","context":[["from nova.openstack.common import log as logging",7265],["logging.basicConfig(level=logging.DEBUG)",7490],["import logging",366679],["logger = logging.getLogger(__name__)",56480],["LOG = logging.getLogger(__name__)",51954],["log = logging.getLogger(__name__)",39134],["from oslo_log import log as logging",16834],["_logger = logging.getLogger(__name__)",11844],["logger.setLevel(logging.DEBUG)",8303],["logging.basicConfig(level=logging.DEBUG)",7490]],"useCount":1313332},{"word":"login","context":[["def login(request):",1642],["self.login(self.admin)",1648],["return redirect(url_for('login'))",1787],["client.login(user)",1799],["self.login(\"hamlet@zulip.com\")",1977],["def login(self):",4057],["self.client.login(username='super', password='secret')",4771],["def login():",5609],["login(request, user)",3934],["self.login()",10355]],"useCount":339402},{"word":"long","context":[["cls.add_constructor([param('long long int', 'v')])",2220],["long = int",1782],["id = self.convertFromDB(row[0], 'long', 'int')",1786],["cls.add_constructor([param('long long int', 'v')])",2220],["cls.add_constructor([param('long int', 'v')])",2220],["cls.add_constructor([param('long unsigned int', 'v')])",2220],["cls.add_constructor([param('long long unsigned int', 'v')])",2220],["if isinstance(ids, (int, long)):",5530],["keyStr = self.convertToDB(obj.db_id, 'long', 'int')",3479],["cls.add_constructor([param('long long unsigned int', 'v')])",2220]],"useCount":355480},{"word":"loop","context":[["self._loop = loop",1224],["self.loop.run_until_complete(go())",1851],["loop.run_forever()",1336],["loop.run()",1498],["loop.close()",1784],["test_utils.run_briefly(self.loop)",1817],["loop=self.loop)",1877],["loop = asyncio.get_event_loop()",3650],["def loop(self):",2433],["loop=self.loop)",1877]],"useCount":251663},{"word":"lower","context":[["key = key.lower()",1804],["text = text.lower()",840],["ext = ext.lower()",843],["word = word.lower()",1067],["bounding_polygon, airfoil='lower')",1216],["func = string.lower(func[0:1]) + func[1:]",1217],["value = value.lower()",1473],["s = s.lower()",809],["name = name.lower()",3270],["cmd = sys.argv[1].lower()",767]],"useCount":391517},{"word":"m","context":[["M(\"Create\", m=\"create\"),",4453],["m = Message()",4158],["if m is not None:",8771],["if m is None:",9436],["self.m.VerifyAll()",11727],["return m",15037],["self.m.ReplayAll()",15125],["if not m:",15276],["if m:",53777],["'m',",3002]],"useCount":1440660},{"word":"main","context":[["def main():",184278],["gtk.main()",6067],["main(sys.argv[1:])",6757],["main(sys.argv)",6784],["def main(self):",8258],["sys.exit(main())",14904],["def main(argv):",16114],["unittest.main()",106260],["main()",172267],["def main(args):",8616]],"useCount":901068},{"word":"make","context":[["# make sure user is authed",568],["# is relative to the documentation root, use os.path.abspath to make it",663],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# If you set this to False, Django will make some optimizations so as not",7661],["might make sense to replace the whole Django WSGI application with a custom one",4328],["This method makes a synchronous HTTP request by default. To make an",2718],["# Do not make changes to this file unless you know what you are doing--modify",1627],["# relative to the documentation root, use os.path.abspath to make it",1127],["def make(self):",800],["autotools.make()",688]],"useCount":375398},{"word":"manager","context":[["self.manager = manager",2274],["manager = Manager(app)",2327],["from neutron import manager",2907],["plugin = manager.NeutronManager.get_plugin()",2991],["manager.run()",3002],["@manager.command",4463],["return manager",1656],["with transaction.manager:",1672],["self.manager = manager",2274],["manager = fake_network.FakeNetworkManager()",2090]],"useCount":284645},{"word":"map","context":[["self.map = {}",564],["p.map = {}",581],["M(\"Map\", m=\"map\"),",584],["if map is None:",622],["map = {}",886],["result[attr] = dict(map(",1221],["return map",1258],["from six.moves import (filter, input, map, range, zip)  # noqa",1483],["map(",1694],["result[attr] = list(map(",1972]],"useCount":308469},{"word":"mask","context":[["def __init__(self, header, value, mask=None):",3443],["[param('ns3::Ipv4Mask const &', 'mask')],",3138],["self.mask = mask",2548],["self.mask = mask",2548],["mask =",2054],["return mask",1992],["if mask is not None:",1711],["if mask is None:",1601],["assert_equal(test.mask, control.mask)",1485],["assert_equal(test.mask, control.mask)",1485]],"useCount":235485},{"word":"master","context":[["# \"stabilization\", as well as \"HEAD\" and \"master\".",776],["TixSubWidget.__init__(self, master, name, destroy_physically)",726],["def __init__(self, master, name, destroy_physically=1):",726],["# The master toctree document.",28001],["self.master = master",2276],["Frame.__init__(self, master)",731],["def __init__(self, master=None):",851],["def __init__(self, master=None, cnf={}, **kw):",1526],["def __init__(self, master):",1878],["self.master = master",2276]],"useCount":187812},{"word":"match","context":[["if match:",57234],["# List of patterns, relative to source directory, that match files and",24527],["if not match:",16850],["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["for match in matches:",6777],["if match is not None:",6249],["if match is None:",6085],["return match",4355],["mobj = re.match(self._VALID_URL, url)",3805],["match = True",3374]],"useCount":887670},{"word":"matches","context":[["for m in matches:",1207],["for match in matches:",6777],["if len(matches)>0:",1144],["matches = re.compile(patronvideos,re.DOTALL).findall(data)",2084],["scrapertools.printMatches(matches)",2112],["if not matches:",2834],["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["return matches",5392],["if matches:",5438],["matches = []",5925]],"useCount":193483},{"word":"math","context":[[".. math ::",3483],["import math",96236],[".. math::",19143],["from math import sqrt",6408],["from math import *",5994],["from math import ceil",3274],["from math import pi",2711],["from math import log",2214],["deg = math.pi/180",1193],["from math import floor",1573]],"useCount":332303},{"word":"matplotlib","context":[["import matplotlib.cm as cm",2237],["from matplotlib import pyplot",2274],["<matplotlib.text.Text object at 0x...>",2526],["from matplotlib.figure import Figure",2618],["matplotlib.use('Agg')",3949],[">>> import matplotlib.pyplot as plt",3982],["import matplotlib as mpl",5552],["from matplotlib import pyplot as plt",6701],["import matplotlib",15799],["import matplotlib.pyplot as plt",68317]],"useCount":215405},{"word":"matrix","context":[["X : {array-like, sparse matrix}, shape = [n_samples, n_features]",1376],["self.matrix = matrix",544],["X : {array-like, sparse matrix}, shape (n_samples, n_features)",1390],["# Get the data: the input matrix and the right output.",1226],["matrix = []",918],["Whether to use a precomputed Gram matrix to speed up",695],["matrix.",593],["matrix can also be passed as argument.",566],["``dtype=np.float32`` and if a sparse matrix is provided",565],["return matrix",2026]],"useCount":218948},{"word":"max","context":[["self.max = max",1656],["[param('double', 'min'), param('double', 'max')])",479],["[param('double', 'mean'), param('double', 'min'), param('double', 'max')])",479],["\"max\" : \"100\"",569],["return max",649],["# self.set_header('Cache-Control', 'max-age=0,no-cache,no-store')",787],["max = 0",979],["def max(self):",1127],["cherrypy.response.headers['Cache-Control'] = \"max-age=0,no-cache,no-store\"",1257],["self.max = max",1656]],"useCount":305991},{"word":"max_length","context":[["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),",23830],["'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24009],["'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24033],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),",24733],["'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",25100],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27005],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251]],"useCount":1544200},{"word":"member","context":[["\"nodetype\" : \"member\",",2518],["# pylint: disable=no-member",4094],["for member in members:",2809],["role_id='member')",1200],["## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::GetParent() const [member function]",1189],["## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeValue::Copy() const [member function]",1189],["## type-id.h (module 'core'): uint32_t ns3::TypeId::GetTraceSourceN() const [member function]",1189],["## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetGroupName(std::string groupName) [member function]",1189],["## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]",1189],["## type-id.h (module 'core'): std::string ns3::TypeId::GetName() const [member function]",1189]],"useCount":934662},{"word":"menu","context":[["menu = gtk.Menu()",1090],["menu = wx.Menu()",1136],["menu.add(menu_item)",1469],["menu.append(item)",1694],["</menu>",2662],["return menu",2699],["menu.addSeparator()",2955],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["#  dir menu entry, description, category)",20993],["menu.show_all()",1082]],"useCount":204002},{"word":"message","context":[["print message",3835],["# load the right message language",3982],["if not message:",4165],["raise nitro_exception(result.errorcode, str(result.message), str(result.severity))",4490],["def __init__(self, message):",5612],["if message:",7887],["return message",11783],["self.message = message",13479],["self.message = message",13479],["# If true, keep warnings as \"system message\" paragraphs in the built documents.",13596]],"useCount":1520442},{"word":"messages","context":[["'django.contrib.messages.middleware.MessageMiddleware',",25542],["return current.messages[\"NONE\"]",1950],["return messages",3006],["for message in messages:",3049],["messages = []",5821],["from django.contrib import messages",12231],["'django.contrib.messages.context_processors.messages',",13359],["'django.contrib.messages.context_processors.messages',",13359],["'django.contrib.messages',",24760],["self.messages = []",1873]],"useCount":445085},{"word":"meta","context":[["<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">",3957],["meta = {",3452],["meta = MetaData()",3442],["meta.bind = migrate_engine",3343],["return meta",2557],["meta = {}",1743],["\"<html><head><meta name=\\\"qrichtext\\\" content=\\\"1\\\" /><style type=\\\"text/css\\\">\\n\"",1474],["if meta:",1408],["<meta charset=\"UTF-8\">",1402],["meta,",1236]],"useCount":275813},{"word":"metadata","context":[["metadata,",2303],["\"metadata\": {",2879],["for metakey, value in list(metadata.items()):",3128],["metadata = MetaData()",3172],["if metadata:",3331],["def define_tables(cls, metadata):",3440],["'metadata': {",3764],["metadata = {",3834],["metadata = {}",5376],["return metadata",5140]],"useCount":592423},{"word":"method","context":[["method.",4847],["method='POST',",5692],["req.method = 'PUT'",5811],["self.method = method",6659],["self.method = method",6659],["*compliance: mandatory -- This method must be implemented.*",11283],["if request.method == 'GET':",11749],["if request.method == \"POST\":",13059],["if request.method == 'POST':",42864],["req.method = 'POST'",10967]],"useCount":1483847},{"word":"methods","context":[["# Check that the right middleware methods have been invoked",1172],["@app.route('/', methods=['GET', 'POST'])",959],["\"Write your forwards methods here.\"",1143],["\"methods\": {",1306],["return methods",1384],["methods = []",1498],["methods.",1568],["\"Write your backwards methods here.\"",1629],["# pylint: disable=too-few-public-methods",2500],["for method in methods:",2662]],"useCount":299290},{"word":"middleware","context":[["'django.middleware.common.CommonMiddleware',",27943],["'django.middleware.clickjacking.XFrameOptionsMiddleware',",17751],["'django.contrib.sessions.middleware.SessionMiddleware',",27272],["'django.contrib.auth.middleware.AuthenticationMiddleware',",26570],["'django.contrib.messages.middleware.MessageMiddleware',",25542],["'django.middleware.csrf.CsrfViewMiddleware',",24829],["'django.contrib.auth.middleware.SessionAuthenticationMiddleware',",10898],["'django.middleware.security.SecurityMiddleware',",7781],["middleware here, or combine a Django application with an application of another",4328],["# Apply WSGI middleware here.",4088]],"useCount":268224},{"word":"migrations","context":[["migrations.AlterUniqueTogether(",6549],["from django.db import migrations",6204],["migrations.swappable_dependency(settings.AUTH_USER_MODEL),",8569],["migrations.RemoveField(",16094],["from django.db import migrations, models",33807],["from django.db import models, migrations",41876],["migrations.AlterField(",62230],["migrations.AddField(",70280],["migrations.CreateModel(",72711],["class Migration(migrations.Migration):",81825]],"useCount":481760},{"word":"min","context":[["self.min = min",1179],["self.min = min",1179],["min=0,",1005],["def min(self):",987],["'js/libs/jquery.waypoints.min.js',",813],["'min': 0,",625],["min=1,",580],["\"min\" : \"1\",",568],["'js/libs/jquery.waypoints-sticky.min.js',",560],["\"min\" : \"0\",",1723]],"useCount":234477},{"word":"missing","context":[["missing = []",2874],["missing = object()",712],["DeviceUnreachableError on missing device.",762],["missing=None,",794],["if len(missing) > 0:",796],["raise ApiException(400, \"missing required parameters\")",1142],["0.0% missing data",1409],["# pylint: disable=missing-docstring",1950],["# super, missing, help",2787],["if missing:",4277]],"useCount":184780},{"word":"mock","context":[["@mock.patch.object(dell_storagecenter_api.StorageCenterApi,",9956],["mock.ANY,",4058],["from unittest import mock",4197],["with mock.patch.object(",5736],["from mock import Mock",6273],["@mock.patch(",6406],["from mock import patch",12204],["@mock.patch.object(",13526],["import mock",53709],["mock.call(",4038]],"useCount":1173070},{"word":"mode","context":[["self._mode = mode",1882],["# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-",1976],["# -*- cpy-indent-level: 4; indent-tabs-mode: nil -*-",1983],["if mode is None:",2044],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],["# indent-tabs-mode:nil",6533],["self.mode = mode",6893],["self.mode = mode",6893]],"useCount":755619},{"word":"model","context":[["opts = self.model._meta",3191],["'security/ir.model.access.csv',",4394],["def model(self):",6557],["model = User",7635],["return model",7713],["self.model = model",8894],["self.model = model",8894],["@api.model",22267],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["model = None",2949]],"useCount":1341221},{"word":"models","context":[["from django.db import models",109438],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["from django.contrib.auth.models import User",43609],["from django.db import models, migrations",41876],["models = {",41305],["from django.db import migrations, models",33807],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230]],"useCount":5170986},{"word":"module","context":[["# A list of ignored prefixes for module index sorting.",26155],["# If true, the current module name will be prepended to all description",27546],["# If false, no module index is generated.",74645],["self.module = module",4508],["module = AnsibleModule(",5424],["return module",5557],["root_module = module.get_root()",7096],["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# Add any Sphinx extension module names here, as strings. They can be",14319]],"useCount":2673283},{"word":"modules","context":[["modules = {}",1052],["# If extensions (or modules to document with autodoc) are in another",1194],["# Standard Python modules",1266],["# Gramps modules",1342],["# GRAMPS modules",1774],["return modules",1942],["# Import appropriate modules from the client library.",2214],["modules = []",2587],["for module in modules:",3572],["# If extensions (or modules to document with autodoc) are in another directory,",24837]],"useCount":313259},{"word":"more","context":[["For more information on this file, see",25647],["# more details on how to customize your logging configuration.",6170],["directory. For more information, see the \"Caching authentication information\"",1718],["for more details.",1368],["def __new__(S, *more): # real signature unknown; restored from __doc__",1738],["# Make coding more python3-ish",2640],["For more details about this platform, please refer to the documentation at",2875],["# for more details.",3164],["# more details.",4294],["The `urlpatterns` list routes URLs to views. For more information please see:",5337]],"useCount":440133},{"word":"move","context":[["for move in self.browse(cr, uid, ids, context=context):",3875],["move_obj = self.pool.get('stock.move')",1947],["return move",1474],["def move(self):",1280],["for move in moves:",1225],["move_obj = self.pool.get('account.move')",1000],["for move in pick.move_lines:",981],["if move.state == 'done':",953],["if move:",864],["stock_move_obj = self.pool.get('stock.move')",843]],"useCount":270896},{"word":"mox","context":[["mox.ReplayAll()",2276],["self.mox.ReplayAll()",109971],["self.mox.StubOutWithMock(self.compute.network_api,",2110],["self.mox.StubOutWithMock(utils, 'execute')",2293],["self.mox.StubOutWithMock(self.compute,",2719],["import mox",3386],["mox.IgnoreArg())",3838],["self.mox.UnsetStubs()",4285],["mox.IgnoreArg(),",6231],["self.mox.VerifyAll()",16084]],"useCount":386056},{"word":"msg","context":[["return msg",30257],["def __init__(self, msg):",6355],["LOG.error(msg)",13887],["raise ValueError(msg)",11751],["if msg:",11047],["print msg",10073],["self.msg = msg",9486],["self.msg = msg",9486],["raise exc.HTTPBadRequest(explanation=msg)",9200],["print(msg)",7372]],"useCount":1646307},{"word":"multiple","context":[["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["self.ext_mgr.extensions = {'os-multiple-create': 'fake'}",708],["# You can specify multiple suffix as a list of string:",5614],["multiple = False,",2289],["if multiple:",1493],["\"multiple\": False,",996],["multiple=True,",805],["if self.multiple:",784],["multiple=True)),",737],["Only available in dictionary 'multi' when multiple regressions",622]],"useCount":209931},{"word":"must","context":[["The twitter.Api instance must be authenticated.",1999],["#      * Redistributions of source code must retain the above",2653],["#      * Redistributions in binary form must reproduce the above",2656],["set of Temboo credentials, must be supplied.",2841],["# In a Windows environment this must be set to your system time zone.",3640],["# If running in a Windows environment this must be set to the same as your",4205],["#     * Redistributions in binary form must reproduce the above",7862],["*compliance: mandatory -- This method must be implemented.*",11283],["#  * Redistributions in binary form must reproduce the above",1931],["# contain a <link> tag referring to it.  The value of this option must be the",25748]],"useCount":717642},{"word":"n","context":[["\"\\n\"",12367],["n = 0",26659],["print \"\\n---An error occurred---\\n\"",24666],["print \"\\n---An error occurred---\\n\"",24666],["return n",19970],["n += 1",18646],["'\\n'",17531],["for i in range(n):",15694],["eol_ = '\\n'",12842],["f.write('\\n')",8410]],"useCount":4066498},{"word":"name","context":[["self.name = name",104480],["self.name = name",104480],["# If true, the current module name will be prepended to all description",27546],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# Output file base name for HTML help builder.",27989],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["return name",30999],["def name(self):",33281],["return self.name",48183]],"useCount":9126438},{"word":"names","context":[["for name in names:",16167],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Additional templates that should be rendered to pages, maps page names to",25900],["# template names.",25883],["# Custom sidebar templates, maps document names to template names.",27115],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["names = []",9331],["#     * Neither the name of Google Inc. nor the names of its",6894],["return names",5517],["# Custom sidebar templates, maps document names to template names.",27115]],"useCount":677772},{"word":"namespace","context":[["## Register a nested module for the namespace FatalImpl",1332],["self.namespace = namespace",2671],["if namespace:",1442],["namespace=namespace,",1454],["namespace=namespace,",1454],["if namespace is None:",1525],["# Remove this helper function from the namespace after it is invoked",1607],["namespace=NAMESPACE)",1662],["def __call__(self, parser, namespace, values, option_string=None):",2624],["self.namespace = namespace",2671]],"useCount":274332},{"word":"need","context":[["do not need to process this typically.",510],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["# If there are data files included in your packages that need to be",1008],["# TODO: need better explanation",916],["# Most projects will NOT need to set this to anything; you can just change the",829],["# Web-UI helpful to run brain-simulations. To use it, you also need do download",783],["In this scenario we need to create an Engine",715],["we don't even need a DBAPI to be available.",667],["# need to place data files outside of your packages. See:",497],["There normally shouldn't be any need to import this module directly.",2541]],"useCount":381183},{"word":"net","context":[["## net-device.h (module 'network'): ns3::Ptr<ns3::Node> ns3::NetDevice::GetNode() const [member function]",1027],["## net-device.h (module 'network'): uint16_t ns3::NetDevice::GetMtu() const [member function]",1027],["## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]",1027],["## net-device.h (module 'network'): ns3::NetDevice::NetDevice(ns3::NetDevice const & arg0) [copy constructor]",1027],["## net-device.h (module 'network'): bool ns3::NetDevice::IsPointToPoint() const [member function]",1027],["## net-device.h (module 'network'): ns3::Ptr<ns3::Channel> ns3::NetDevice::GetChannel() const [member function]",1027],["## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]",1027],["## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]",1027],["with self.network() as net:",1932],["return net",3388]],"useCount":275626},{"word":"network","context":[["with self.network() as network:",5520],["with self.network() as network:",5520],["network = self.networks.first()",1955],["from nova.network import model as network_model",1966],["for network in networks:",2019],["## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]",2080],["## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]",2080],["return network",2134],["data = {'subnet': {'network_id': network['network']['id'],",2189],["data = {'subnet': {'network_id': network['network']['id'],",2189]],"useCount":1157189},{"word":"neutron","context":[["from neutron.common import exceptions as n_exc",1648],["from neutron.extensions import portbindings",1739],["from neutron.api.v2 import attributes",1996],[":param context: neutron api request context",2002],["api.neutron.network_list(IsA(http.HttpRequest),",2043],["from neutron.common import constants",2254],["from neutron import context",2570],["from neutron import manager",2907],["from neutron.tests import base",3164],["from neutron.openstack.common import log as logging",3288]],"useCount":215825},{"word":"new","context":[["return new",9911],["if new:",3546],["'target': 'new',",3269],["\\new Staff {",2434],["\"name\": \"new-server-test\",",2116],["# set new ids",1944],["\"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"",1762],["new = []",1630],["def new(self):",1594],["import new",1568]],"useCount":936869},{"word":"next","context":[["def next(self):",20377],["return self.next()",1784],["self.next = None",1788],["self.next()",2133],["line = next(inputfile)",3473],["# Uncomment the next line to enable admin documentation:",3558],["# Uncomment the next line for simple clickjacking protection:",3608],["# Uncomment the next two lines to enable the admin:",4215],["s.next()",4826],["# Uncomment the next line to enable the admin:",6792]],"useCount":485413},{"word":"no","context":[["# no input wsaction",5428],["# If false, no index is generated.",29138],["choices: [ \"yes\", \"no\" ]",3598],["#     There is no restriction on the value of this field.",3726],["# pylint: disable=no-member",4094],["else:  # pragma: no cover",4852],["# no output wsaction",5428],["# If false, no module index is generated.",74645],["# no doc",6135],["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648]],"useCount":1181949},{"word":"node","context":[["return node",34098],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["for node in nodes:",12495],["for child in node:",12452],["def build(self, node):",10454],["def buildAttributes(self, node, attrs, already_processed):",10335],["self.buildChildren(child, node, nodeName_)",10147],["def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):",10068],["if node is None:",8176],["self.buildAttributes(node, node.attrib, already_processed)",7530]],"useCount":1826210},{"word":"nodes","context":[["self.nodes[0].generate(1)",1609],["nodes.append(node)",1677],["from docutils import nodes",2243],["self.nodes = []",2320],["for n in nodes:",2512],["raise nodes.SkipNode",3268],["for node in self.nodes:",3273],["return nodes",5127],["nodes = []",6575],["for node in nodes:",12495]],"useCount":421692},{"word":"non","context":[["# binary, for any purpose, commercial or non-commercial, and by any",730],["# py2exe/bbfreeze/non-CPython implementations don't do __file__, in which",648],["# non-false value, then it is used:",25813],["raise TypeError, \"iteration over non-sequence\"",1901],["# some non-false value, then it is used:",1144],["#     a non ending quest to the responsive locomotion way of traveling!",988],["# -1 for non-fixed-size CLA",928],["non-source form of such a combination shall include the source code for",796],["raise ValueError(\"n must be a non-negative integer.\")",726],["(crashes, non-termination) if the inputs do contain infinities or NaNs.",611]],"useCount":339763},{"word":"not","context":[["if not data:",23224],["if not line:",20092],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["if value is not None:",24749],["return not (self == other)",24946],["# not chapters.",25482],["if not result:",28724],["if not value:",18836],["if not match:",16850],["# Note that not all possible configuration values are present in this",25557]],"useCount":10110382},{"word":"nova","context":[["from nova.openstack.common import log as logging",7265],["from nova import exception",16857],["context = req.environ['nova.context']",10169],["from nova import test",10040],["from nova import utils",8292],["from nova import context",6796],["from nova import db",6303],["from nova import objects",5682],["from nova.compute import vm_states",3532],["from nova.openstack.common import jsonutils",3335]],"useCount":495913},{"word":"now","context":[["now = datetime.now()",6712],["now = timezone.now()",4920],["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["now = time.time()",17831],["'modified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",17539],["now = datetime.datetime.now()",10950],["now = datetime.datetime.now()",10950],["now = datetime.now()",6712]],"useCount":673575},{"word":"np","context":[["np.seterr(**olderr)",1642],["x = np.asarray(x)",2106],["np.testing.assert_almost_equal(",2408],["return np.nan",3033],["np.random.seed(1234)",3151],["rng = np.random.RandomState(0)",4527],["np.random.seed(0)",4557],[">>> import numpy as np",7683],["np.random.seed(self.seed)",1506],["import numpy as np",265867]],"useCount":2013223},{"word":"ns","context":[["module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])",1128],["module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])",1128],["module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])",1128],["module.add_class('CallbackBase', import_from_module='ns.core')",1128],["module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])",1128],["module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])",1128],["module.add_class('TypeId', import_from_module='ns.core')",1129],["module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')",1129],["return ns",1295],["module.add_class('empty', import_from_module='ns.core')",1128]],"useCount":206761},{"word":"ns3","context":[["'ns3::TypeId',",72866],["'ns3::Time',",24404],["'ns3::Ptr< ns3::AttributeValue >',",21161],["'ns3::Ptr< ns3::AttributeValue >',",21161],["'ns3::Ipv6Address',",20265],["[param('ns3::Buffer::Iterator', 'start')],",19441],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294]],"useCount":3144760},{"word":"null","context":[["'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),",1897],["default: null",23918],["'revision': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),",1915],["null=True, blank=True)",2123],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["'notes': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",2543],["null=True,",17155],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["blank=True, null=True)",3010],["null=True)",3419]],"useCount":867700},{"word":"num","context":[["if num == 0:",1759],["num = 0",6472],["num += 1",4951],["self.num = num",1236],["return num",3849],["except LdbError, (num, _):",2724],["if num == 1:",1271],["data.update(self._attachment_management_form(num=0))",1325],["num = 1",1608],["for i in range(num):",2542]],"useCount":240408},{"word":"number","context":[["self.number = number",2216],["number=1, type=9, cpp_type=9, label=1,",4421],["# The unique identifier of the text. This can be a ISBN number",3412],["number=2, type=9, cpp_type=9, label=1,",3290],["number=1, type=11, cpp_type=10, label=1,",3197],["return number",2765],["# Right number/type of migrations?",2663],["screen.blit(number, number_position)",2629],["number=2, type=11, cpp_type=10, label=1,",2555],["linenum: The number of the line to check.",6993]],"useCount":961872},{"word":"numpy","context":[["import numpy as np",265867],["from numpy.distutils.core import setup",1876],[":param numpy: numpy python module",2008],[":param numpy: numpy python module",2008],[">>> import numpy.ma as ma",2258],["from numpy import array",3115],["from numpy import *",6918],[">>> import numpy as np",7683],["import numpy",56120],["Class generic exists solely to derive numpy scalars from, and possesses,",3120]],"useCount":729532},{"word":"o","context":[["return o",7999],["'/sda1/p/a/c/o',",1242],["for o, a in opts:",5223],["req = Request.blank('/sda1/p/a/c/o',",1978],["req = Request.blank('/v1/a/c/o',",1808],["o.close()",1637],["def default(self, o):",1534],["o.save()",1425],["for o in objs:",1303],["for o in objects:",1297]],"useCount":551358},{"word":"obj","context":[["self.obj = obj",4333],["if obj is not None:",4456],["obj = None",4556],["for obj in objs:",4817],["obj=self,",5034],["if not obj:",5761],["if obj:",6970],["obj.save()",9298],["if obj is None:",10194],["return obj",54852]],"useCount":1494636},{"word":"object","context":[["from swgpy.object import *",15751],["@mock.patch.object(",13526],["class Meta(object):",10448],["@mock.patch.object(dell_storagecenter_api.StorageCenterApi,",9956],["class Solution(object):",8707],["'type': 'object',",8450],["object.",7591],["</object>",6497],["class C(object):",6382],["class Foo(object):",6157]],"useCount":2551301},{"word":"object_name","context":[["'Meta': {'object_name': 'User'},",22609],["'Meta': {'object_name': 'Group'},",25175],["'Meta': {'object_name': 'TaggedItem'},",1491],["'Meta': {'object_name': 'Category'},",1712],["'Meta': {'object_name': 'Project'},",1741],["'Meta': {'object_name': 'CMSPlugin'},",1785],["'Meta': {'object_name': 'Placeholder'},",1908],["'Meta': {'ordering': \"('domain',)\", 'object_name': 'Site', 'db_table': \"'django_site'\"},",2260],["'Meta': {'object_name': 'UserProfile'},",2615],["'Meta': {'object_name': 'Tag'},",2835]],"useCount":413963},{"word":"objects","context":[["for obj in objects:",3359],["bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(",2421],["from nova import objects",5682],["instance = objects.Instance(**self.test_instance)",6446],["instance_ref = objects.Instance(**self.test_instance)",7569],["objects = []",2996],["image_meta = objects.ImageMeta.from_dict(self.test_image_meta)",2881],["objects.",2782],["return objects",2733],["site = Site.objects.get_current()",2553]],"useCount":1504138},{"word":"of","context":[["# The name of the Pygments (syntax highlighting) style to use.",27948],["# The name of an image file (relative to this directory) to place at the top",25393],["# Grouping the document tree into LaTeX files. List of tuples",27516],["# The encoding of source files.",26524],["# for a list of supported languages.",26482],["# The name of an image file (relative to this directory) to place at the top of",25468],["# A list of ignored prefixes for module index sorting.",26155],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["# The name of an image file (relative to this directory) to place at the top of",25468]],"useCount":8522581},{"word":"offset","context":[["offset = 0",13702],["if offset:",2313],["def parser(cls, buf, offset):",6083],["offset += 1",4420],["self.offset = offset",3689],["self.offset = offset",3689],["return offset",3628],["def serialize(self, buf, offset):",3082],["self.offset = 0",2891],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801]],"useCount":426008},{"word":"old","context":[["# a heuristic: assume all version tags have a digit. The old git %d",684],["return old",1453],["pwd = raw_input(\"Enter old wallet passphrase: \")",898],["debug(\"Querying {} node\".format(\"upgraded\" if is_upgraded else \"old\"))",864],["if old:",854],["def _eval_subs(self, old, new):",759],["old = None",747],["if old is not None:",714],["debug(\"Querying %s node\" % (\"upgraded\" if is_upgraded else \"old\",))",510],["if old is None:",611]],"useCount":193486},{"word":"on","context":[["For more information on this file, see",25647],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["# Always use forward slashes, even on Windows.",10539],["# more details on how to customize your logging configuration.",6170],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["#     There is no restriction on the value of this field.",3726],["@return: 0 on success, -1 on error.",2072],["@return: 0 on success, -1 on error.",2072],["'tools.staticdir.on': True,",1935]],"useCount":2011675},{"word":"one","context":[["one())",821],[".one()",934],["@api.one",13492],["might make sense to replace the whole Django WSGI application with a custom one",4328],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["raise InvalidArgumentError(\"Invalid argument: %s.  Expected one of %s\" % (name, \", \".join(required + optional)))",1695],[").one()",1056],["one.",922],["#     This field can only take one of the following values:",873],["# must exist either in Sphinx' static/ path, or in one of the custom paths",846]],"useCount":857137},{"word":"only","context":[["# A sample logging configuration. The only tangible logging",6076],["This is a *read only* attribute determined during mapper construction.",658],["# Note: This key only used for development and testing.",668],["# For simplicity, this file contains only the most important settings by",726],["#     This field can only take one of the following values:",873],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["If this variable is read-only (config: false) in the",1089],["if not on_rtd:  # only import and set the theme if we're building docs locally",1399],["@unittest.skipUnless(settings.ROOT_URLCONF == 'lms.urls', 'Test only valid in lms')",1531],["# Now only 'ja' uses this config value",4558]],"useCount":821367},{"word":"op","context":[["from alembic import op",12076],["self.op = op",1886],["import os.path as op",4731],["op.create_table(",4355],["return op",2888],["self.ExecOpCode(op)",2055],["self.op = op",1886],["'op': 'eq',",1247],["for op in ops:",1125],["\"\"\", op.node_def)",990]],"useCount":391006},{"word":"open","context":[["with open(filename) as f:",5389],["def open(self):",7200],["long_description=open('README.rst').read(),",4380],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["with open(filename, 'r') as f:",3440],["f = open(filename)",3381],["from codecs import open",3055],["with open(path) as f:",3048],["with open(filename, 'w') as f:",2988],["f = open(filename, 'r')",2984]],"useCount":918618},{"word":"operation","context":[["self.operation = operation",727],["@swagger.operation(",804],["definition = operation.deconstruct()",805],["def operation(self):",873],["name: A name for this operation (optional).",1084],["</wsdl:operation>",1233],["operation.",1427],["@operation",1592],[":param dry_run: Set to True if the operation should not actually run.",2063],["name: A name for the operation (optional).",4287]],"useCount":227148},{"word":"operations","context":[["for ops in operations:",496],["operations = [",82384],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["operations.",1235],["operations = []",990],["# Upgrade operations go here. Don't create your own engine; bind",572],["for operation in operations:",509],["operations = [{",478],["action = migration.operations[0]",425],["@patch('gppylib.operations.restore.restore_file_with_nbu')",468]],"useCount":203116},{"word":"operator","context":[["if operator in expression.NEGATIVE_TERM_OPERATORS:",645],["operator.",658],["import operator",25764],["from operator import itemgetter",10447],["from operator import attrgetter",5227],["from operator import add",1113],["self.operator = operator",1044],["self.operator = operator",1044],["'operator': 'ADD',",933],["from operator import mul",766]],"useCount":228107},{"word":"oprot","context":[["oprot.writeStructEnd()",22049],["def write(self, oprot):",22191],["oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))",21959],["oprot.trans.flush()",9051],["oprot.writeMessageEnd()",9034],["result.write(oprot)",8244],["oprot.writeListEnd()",5282],["oprot.writeFieldBegin('success', TType.STRUCT, 0)",2033],["oprot.writeFieldEnd()",57550],["oprot.writeFieldStop()",22049]],"useCount":294446},{"word":"opt","context":[["{'build_type': 'opt',",890],["for opt, arg in opts:",5200],["represent = lambda opt: \\",3575],["for opt in opts:",1897],["if opt == '-h':",1369],["if not opt.polys:",1260],["return opt",1202],["if opt in (\"-h\", \"--help\"):",1023],["if opt in ('-h', '--help'):",958],["for opt in options:",932]],"useCount":190268},{"word":"option","context":[["for option in options:",3933],["# The language of the text. It defaults to the language option",3473],["</option>",3269],["@click.option(",1706],["<option value=\"1\">1</option>",1386],["<option value=\"1\">1</option>",1386],["<option value=\"3\">3</option>",1326],["<option value=\"3\">3</option>",1326],["<option value=\"\" selected=\"selected\">---------</option>",1174],["# contain a <link> tag referring to it.  The value of this option must be the",25748]],"useCount":581558},{"word":"optional","context":[["mc = raw_input(\"Minimum confirmations (optional): \")",6602],["# trailing slash if there is a path component (optional in other cases).",1882],["axis : int, optional",5050],["name: A name for the operation (optional).",4287],["# optional",3690],["optional arguments:",3066],["comment = raw_input(\"Comment (optional): \")",2932],["for asynchronous request. (optional)",2901],["(optional)",1969],["out : ndarray, optional",2620]],"useCount":496694},{"word":"options","context":[["# further.  For a list of options available for each theme, see the",24845],["options=None),",95554],["options=None,",58231],["options={",49107],["# There are two options for replacing |today|: either, you set today to some",25812],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["self.options = options",8103],["(options, args) = parser.parse_args()",16538],["def handle(self, *args, **options):",16302],["options:",9708]],"useCount":1614832},{"word":"opts","context":[["for o, a in opts:",5223],["opts = []",1867],["for opt in opts:",1897],["(opts, args) = parser.parse_args()",2168],["opts = model._meta",2170],["if opts.verbose:",2324],["opts = {}",2405],["opts = self.model._meta",3191],["return opts",4094],["for opt, arg in opts:",5200]],"useCount":383505},{"word":"or","context":[["# The font size ('10pt', '11pt' or '12pt').",26707],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20368],["# The paper size ('letterpaper' or 'a4paper').",20979],["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# Redistribution and use in source and binary forms, with or without",44287]],"useCount":4286546},{"word":"order","context":[["order.",1342],["for line in order.order_line:",1561],["if order:",1749],["self.order = order",1806],["self.order = order",1806],["order.save()",1838],["return order",1868],["'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),",2468],["for order in self.browse(cr, uid, ids, context=context):",2489],["order = {'QED':1})",3799]],"useCount":679766},{"word":"org","context":[["intersphinx_mapping = {'http://docs.python.org/': None}",2814],["# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name",7832],["comm.clear(\"org.xwalk.test\")",1286],["# See https://pypi.python.org/pypi?%3Aaction=list_classifiers",1589],["#     http://www.kamaelia.org/AUTHORS - please extend this file,",1696],["# history and logs, available at http://trac.edgewall.org/log/.",1755],["# are also available at http://trac.edgewall.org/wiki/TracLicense.",1771],["# This file was automatically generated by SWIG (http://www.swig.org).",1788],["<server xmlns=\"http://docs.openstack.org/compute/api/v2\"",1795],["## Contact: contact@vistrails.org",2332]],"useCount":598112},{"word":"orm","context":[["from sqlalchemy.orm.exc import NoResultFound",2321],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["from sqlalchemy.orm import relationship",2345],["from sqlalchemy.orm import sessionmaker",3305],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125],["def backwards(self, orm):",41166],["def forwards(self, orm):",41199]],"useCount":404908},{"word":"os","context":[["[param('std::ostream &', 'os')],",22052],["import os",945005],["import os.path",80106],["import sys, os",25944],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["os.close(fd)",13483],["import os, sys",18842],["from os import path",16572],["#sys.path.insert(0, os.path.abspath('.'))",15081],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759]],"useCount":5000030},{"word":"other","context":[["return not self.__eq__(other)",10145],["def __add__(self, other):",12011],["def __lt__(self, other):",12936],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["return not (self == other)",24946],["# |version| and |release|, also used in various other places throughout the",25310],["def __ne__(self, other):",49981],["def __eq__(self, other):",90006],["def __cmp__(self, other):",9869]],"useCount":1382405},{"word":"out","context":[["return out",68249],["if out:",5089],["# All configuration values have a default; values that are commented out",25768],["out = []",17809],["out += \"\"\"",12499],["out.close()",8190],["self.assertNoOutput(out)",5655],["out : ndarray",5468],["out = \"\"",5285],["out, err = self.run_manage(args)",5279]],"useCount":1274625},{"word":"outfile","context":[["showIndent(outfile, level)",54429],["showIndent(outfile, level, pretty_print)",13276],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["outfile.write('),\\n')",8201],["outfile.close()",7872],["self.exportLiteralChildren(outfile, level, name_)",7373],["def exportLiteralChildren(self, outfile, level, name_):",7303],["def exportLiteralAttributes(self, outfile, level, already_processed, name_):",5878],["outfile.write('</%s%s>%s' % (namespace_, name_, eol_))",5480],["outfile.write('/>%s' % (eol_, ))",5457]],"useCount":296846},{"word":"output","context":[["output = []",15697],["# output. They are ignored by default.",26989],["# If true, an OpenSearch description file will be output, and all pages will",25786],["return output",56023],["# -- Options for HTML output ---------------------------------------------------",12541],["# -- Options for LaTeX output --------------------------------------------------",12392],["# -- Options for HTML output ----------------------------------------------",12095],["# -- Options for manual page output ---------------------------------------",11908],["# -- Options for LaTeX output ---------------------------------------------",11902],["# -- Options for Texinfo output -------------------------------------------",11851]],"useCount":1422885},{"word":"p","context":[["return p",24257],["</p>",11504],["<p>",9986],["p[0] = p[1]",9672],["p[0] = p[1]",9672],["p.start()",7735],["p.wait()",7466],["if p:",5412],["p.join()",4842],["p.save()",4489]],"useCount":1939960},{"word":"pack","context":[["packed[2] = struct.pack(\"!H\", length)",1297],["def pack(self):",5875],["def pack (self):",1849],["buff.write(struct.pack('<I%ss'%length, length, _x))",1778],["from struct import pack",1665],["packed[1] = struct.pack(\"!H\", length)",1381],["from struct import pack, unpack",1370],["packed.append(struct.pack(\"!H\", self.type))",1370],["def pack(self, mav):",8567],["msg.pack(self)",6112]],"useCount":196828},{"word":"package","context":[["for package in packages:",2576],["# which should be included with this package. The terms are also available at",930],["# This code is so you can run the samples without installing the package",981],["self.package = package",1092],["self.package = package",1092],["return package",1188],["if not package:",1246],["if package:",1337],["# This lets us ensure that the source package is imported, and that its",1387],["# as part of this package.",1694]],"useCount":276156},{"word":"packet","context":[["return b''.join(packet)",1346],["## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::currentTrimedFromStart [variable]",943],["## packet.h (module 'network'): void ns3::Packet::CopyData(std::ostream * os, uint32_t size) const [member function]",943],["## packet-metadata.h (module 'network'): ns3::PacketMetadata::Item::current [variable]",943],["## packet.h (module 'network'): ns3::ByteTagIterator::Item [class]",943],["## packet.h (module 'network'): static void ns3::Packet::EnableChecking() [member function]",943],["[param('ns3::Ptr< ns3::Packet const >', 'packet')])",2999],["packet = []",1444],["return packet",3498],["## packet.h (module 'network'): ns3::ByteTagIterator [class]",943]],"useCount":191699},{"word":"page","context":[["# the title page.",25469],["# Additional templates that should be rendered to pages, maps page names to",25900],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["# One entry per manual page. List of tuples",23937],["# If true, show page references after internal links.",23896],["# -- Options for manual page output ---------------------------------------",11908],["# -- Options for manual page output --------------------------------------------",10335],["return page",4108],["page = 1",3958],["# A tuple containing the cover image and cover page html template filenames.",3089]],"useCount":884299},{"word":"pages","context":[["# If true, the index is split into individual pages for each letter.",26818],["# If true, links to the reST sources are added to the pages.",26301],["# Additional templates that should be rendered to pages, maps page names to",25900],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# HTML files that should be inserted before the pages created by sphinx.",3483],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["for page in pages:",2931],["# The theme to use for HTML and HTML Help pages.  Major themes that come with",2681],["pages = []",1552]],"useCount":266781},{"word":"param","context":[["[param('ns3::Buffer::Iterator', 'start')],",19441],["[param('ns3::TagBuffer', 'i')],",6956],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('uint32_t', 'i')],",13131],[":param dict custom_headers: headers that will be added to the request",8074],["[param('ns3::Address const &', 'address')],",7988],[":param bool raw: returns the direct response alongside the",7438],["[param('std::ostream &', 'os')],",22052]],"useCount":3169229},{"word":"parameter","context":[["parameter.",2481],["#Check parameter value on filesystem",504],[",help='Field parameter value [default: %default]')",507],["# verify the required parameter 'id' is set",638],["scale parameter (default=1)",649],["location parameter (default=0)",723],["for parameter in parameters:",865],["# constructor, see if we should eliminate this parameter from",916],["The shape parameter(s) for the distribution (see docstring of the",1233],["Note: this parameter is tree-specific.",1548]],"useCount":302808},{"word":"parameters","context":[["# Construct parameters",8075],["parameters.Str(",6272],["parameters:",5308],["parameters = {}",4928],["parameters.",3545],["Choreo. The InputSet object is used to specify input parameters when executing this Choreo.",2841],["return parameters",2674],["parameters.Flag(",2511],["parameters = {",2259],["if parameters:",1966]],"useCount":476009},{"word":"params","context":[["params = []",7681],["params = {",32525],["params = {}",23547],["return params",13596],["'params': {",7990],["if params:",7046],["params={",6275],["params[key] = val",6176],["params = locals()",6085],["self.params = params",5813]],"useCount":1323751},{"word":"parent","context":[["if parent is None:",3752],["parent = None",3884],["if self.parent:",4209],["if self.parent is None:",4663],["if parent:",8872],["self.parent = None",9002],["def __init__(self, parent=None):",17248],["def __init__(self, parent):",17574],["self.parent = parent",21823],["self.parent = parent",21823]],"useCount":968328},{"word":"parse","context":[["import six.moves.urllib.parse as urlparse",1632],["def parse(self):",7312],["import urllib.parse",4151],["from urllib.parse import urlparse",3116],["def parse(self, response):",3035],["from dateutil.parser import parse",2509],["from urllib.parse import urlencode",2301],["dtstart=parse(\"19970902T090000\"))),",2085],["from urllib.parse import urljoin",1375],["self.parse()",1833]],"useCount":313999},{"word":"parse_args","context":[["args = parse_args()",3147],["(opts, args) = parser.parse_args()",2168],["options = parser.parse_args()",2090],["opts, args = parser.parse_args()",1842],["args = parser.parse_args(argv)",1650],["def parse_args():",4821],["return parser.parse_args()",6247],["options, args = parser.parse_args()",6495],["(options, args) = parser.parse_args()",16538],["args = parser.parse_args()",61658]],"useCount":184440},{"word":"parser","context":[["options, args = parser.parse_args()",6495],["parser = OptionParser()",9008],["parser = argparse.ArgumentParser(",14663],["parser.print_help()",15524],["(options, args) = parser.parse_args()",16538],["return parser",19780],["parser.add_option(",20243],["parser = argparse.ArgumentParser()",23825],["parser.add_argument(",71991],["args = parser.parse_args()",61658]],"useCount":998354},{"word":"part","context":[["## This file is part of Invenio.",7510],["# This file is part of Ansible",11217],["# This file is part of Invenio.",7129],["for part in parts:",4893],["# This file is part of weboob.",4872],["# This module is part of SQLAlchemy and is released under",3916],["# This file is part of Indico.",3430],["# This file is part of SickRage.",3413],["# you should have received as part of this distribution. The terms",2697],["# This file is part of EasyBuild,",2528]],"useCount":499332},{"word":"parts","context":[["return parts",2026],["parts = line.split()",1902],["# are parts, not chapters.",1126],["if parts:",1307],["parts = []",6502],["if len(parts) > 1:",2520],["if len(parts) == 2:",2808],["if len(parts) == 1:",2954],["for part in parts:",4893],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459]],"useCount":260460},{"word":"pass","context":[["...     pass",2886],["else: pass",2410],["pass;",2456],["#pass",3821],["#     pass",3836],["#    pass",4986],["except: pass",37010],["pass",2389160],["#         pass",2404],["#        pass",2239]],"useCount":2742017},{"word":"passed","context":[["passed = False",1581],["passed = True",1131],["if passed:",867],["etree.XML(\"\"\"<results status=\"passed\">",705],["reprec.assertoutcome(passed=1)",655],[":param client: the client to use.  If not passed, falls back to the",641],["<results status=\"passed\">",634],["ssS'passed'",608],["passed = 0",568],["matrix can also be passed as argument.",566]],"useCount":251734},{"word":"password","context":[["password=password,",3392],["if not password:",3428],["'password': password,",3920],["'password': password,",3920],["if password:",4221],["password = None",4304],["self.client.login(username='super', password='secret')",4771],["self.password = password",10558],["self.password = password",10558],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251]],"useCount":822056},{"word":"patch","context":[["@mock.patch.object(dell_storagecenter_api.HttpClient,",2719],["from mock import Mock, patch",3078],["@mock.patch('requests.get')",2626],["with mock.patch(",3256],["mock.patch.object(",3329],["with mock.patch.object(",5736],["@mock.patch(",6406],["from mock import patch",12204],["@mock.patch.object(",13526],["@mock.patch.object(dell_storagecenter_api.StorageCenterApi,",9956]],"useCount":792304},{"word":"path","context":[["return path",36238],["self.path = path",19533],["# add these directories to sys.path here. If the directory is relative to the",24896],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# The name of an image file (within the static path) to use as favicon of the",24060],["self.path = path",19533],["from os import path",16572],["#sys.path.insert(0, os.path.abspath('.'))",15081],["#sys.path.insert(0, os.path.abspath('.'))",15081],["import os.path",80106]],"useCount":5171957},{"word":"paths","context":[["paths = []",6000],["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["for path in paths:",12492],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# Don't forget to use absolute paths, not relative paths.",10569],["# Don't forget to use absolute paths, not relative paths.",10569],["return paths",4070]],"useCount":335390},{"word":"pattern","context":[["self.pattern = pattern",2185],["self.pattern = pattern",2185],["if pattern:",1531],["return pattern",1429],["for pattern in patterns:",2510],["if not pattern:",927],["if pattern is None:",845],["'pattern': (0, 2, 1)",760],["pattern = re.compile(",716],["pattern = None",713]],"useCount":237958},{"word":"payload","context":[["payload = {",10218],["payload = msg.payload",1733],["return payload",2796],["payload = {}",1905],["payload)",1763],["if payload:",1052],["'CONTENT_LENGTH': len(payload),",1216],["self.payload = payload",1461],["self.payload = payload",1461],["payload = msg.payload",1733]],"useCount":225224},{"word":"pi","context":[["from math import pi",2711],["deg = math.pi/180",1193],["ang=-2.*j*pi/n+sigma",488],["ang2=2.*j*pi/n+sigma",488],["lyd=midy-rd*cos(ang2-2.*pi/n)",488],["# chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2)",621],["# degree = math.asin(20/2/radius)*180/math.pi",621],["from numpy import pi",565],["# 導入數學函式後, 圓周率為 pi",497],["deg = pi/180.",495]],"useCount":207189},{"word":"pid","context":[["self.pid = pid",2183],["pid = os.fork()",7020],["if pid:",3570],["if pid == 0:",2982],["pid = os.getpid()",2876],["pid = None",2837],["return pid",2506],["if not pid:",2133],["self.pid = pid",2183],["if pid > 0:",2894]],"useCount":219847},{"word":"pk","context":[["if self.pk is None:",614],["if not self.pk:",1102],["response = detail_view(request, ex1.pk, template_string=template_text)",763],["addon = Addon.objects.get(pk=3615)",760],["if pk:",696],["if self.pk:",691],["CaseTestModel.objects.all().order_by('pk'),",650],["user = User.objects.get(pk=user_id)",637],["a = Addon.objects.get(pk=3615)",565],["return User.objects.get(pk=user_id)",556]],"useCount":348988},{"word":"platform","context":[["import platform",28485],["if sys.platform.startswith('win'):",3065],["if platform.system() == 'Windows':",3175],["if sys.platform == 'darwin':",5981],["if sys.platform == \"win32\":",6993],["if sys.platform == 'win32':",14849],["For more details about this platform, please refer to the documentation at",2875],["if sys.platform != 'win32':",2608],["if sys.platform == \"darwin\":",2388],["elif sys.platform == 'darwin':",1984]],"useCount":354805},{"word":"plt","context":[["plt.legend()",5716],["#plt.show()",5118],["plt.tight_layout()",6163],["from matplotlib import pyplot as plt",6701],["plt.close()",10103],["plt.clf()",11085],["plt.figure()",11705],["fig = plt.figure()",15437],["plt.show()",52859],["import matplotlib.pyplot as plt",68317]],"useCount":450528},{"word":"plugin","context":[["instance = self.plugin.return_value",4832],["return plugin",1651],["self.plugin = plugin",1730],["A QGIS plugin",1611],["@plugin.event(",1956],["# http://blog.tvalacarta.info/plugin-xbmc/pelisalacarta/",2079],["plugin = manager.NeutronManager.get_plugin()",2991],["self.plugin = plugin",1730],["@event('plugin.register')",1780],["for plugin in plugins:",1949]],"useCount":307632},{"word":"plugins","context":[["plugins = []",1239],["from module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo",849],["return plugins",920],["from neutron.plugins.common import constants as p_const",939],["for plugin in self.plugins:",1133],["from Components.PluginComponent import plugins",1260],["from neutron.plugins.common import constants",1288],["for plugin in plugins:",1949],["from nose.plugins.skip import SkipTest",2522],["from nose.plugins.attrib import attr",6701]],"useCount":197824},{"word":"point","context":[["corresponds to a single data point.",472],["Email                : martin near rapidlasso point com",691],["# Every ZenPack egg must define exactly one zenoss.zenpacks entry point",456],["return point",890],["for point in points:",1836],["for point in self.points:",527],["point.",520],["# the line from last end of dedendum point to the recent",488],["# end of dedendum point",488],["sympy.geometry.point.Point",469]],"useCount":256627},{"word":"points","context":[["# setting points here.",4242],["self.points = points",1199],["for p in points:",1282],["self.points = points",1199],["# To provide executable scripts, use entry points in preference to the",1132],["# \"scripts\" keyword. Entry points provide cross-platform support and allow",1107],["# -*- Entry points: -*-",1044],["for point in points:",1836],["return points",2866],["points = []",4163]],"useCount":204194},{"word":"policy","context":[["for policy in POLICIES:",1259],["self.policy = policy",758],["self.policy = policy",758],["from nova import policy",787],["df_mgr = self.df_router[policy]",791],["policy = {",793],["policy.reset()",858],["policy.set_rules(rules)",997],["for policy in self.iter_policies():",1069],["self.policy.set_rules(rules)",1839]],"useCount":192054},{"word":"pool","context":[["move_obj = self.pool.get('stock.move')",1947],["currency_obj = self.pool.get('res.currency')",1857],["cur_obj = self.pool.get('res.currency')",1995],["mod_obj = self.pool.get('ir.model.data')",2145],["uom_obj = self.pool.get('product.uom')",2094],["product_obj = self.pool.get('product.product')",2555],["pool = Pool()",3059],["pool.join()",3773],["pool.close()",3918],["self.hass.pool.block_till_done()",4374]],"useCount":473772},{"word":"pop","context":[["stack.pop()",3339],["name_key.text = kwargs.pop('name')",1712],["context.pop()",1445],["sys.path.pop(0)",1394],["self.pop()",1328],["self._state.following.pop()",3486],["self.stack.pop()",1281],["self.tree.openElements.pop()",1202],["def pop(self):",4956],["callback = kwargs.pop('callback', self._callback)",9277]],"useCount":444684},{"word":"port","context":[["self.port = port",15533],["return port",5533],["for port in ports:",4433],["if port:",4248],["port = int(port)",4050],["port = int(port)",4050],["port=port,",2854],["port=port,",2854],["port = None",3656],["self.port = port",15533]],"useCount":1002903},{"word":"pos","context":[["pos += 1",8799],["pos = 0",11189],["return pos",3935],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["self.pos = pos",3166],["self.pos = pos",3166],["self.pos += 1",2398],["if pos != -1:",2631],["self.pos = 0",2415]],"useCount":466357},{"word":"position","context":[["position=-1,",1606],["def position(self):",1304],["position=1,",1317],["position += 1",1441],["self.position = position",2755],["'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),",1761],["screen.blit(number, position)",1800],["pos = s.position()",1894],["position = 0",2006],["self.position = position",2755]],"useCount":330514},{"word":"post","context":[["def post(self, *args, **kwargs):",2176],["response = self.client.post(collector_url, self.post_data)",2160],["def post(self):",19202],["response = self.client.post(",12406],["def post(self, request, *args, **kwargs):",7974],["res = self.client.post(url, form_data)",3897],["'post',",3833],["def post(self, request):",3504],["response = self.client.post(url, data)",2541],["post.save()",2876]],"useCount":516087},{"word":"prefix","context":[["def __str__(self, prefix=\"\", printElemNumber=0):",4792],["self.prefix = prefix",4255],["self.prefix = prefix",4255],["prefix = ''",3899],["res+=prefix+\">\\n\"",3223],["# URL prefix for static files.",5435],["if prefix:",7243],["if prefix is None:",2600],["prefix = \"\"",2295],["return prefix",1908]],"useCount":518923},{"word":"present","context":[["state=dict(default='present', choices=['present', 'absent']),",515],["# Note that not all possible configuration values are present in this",25557],["if state == 'present':",2084],["default: present",2455],["default: 'present'",557],["if present:",559],["default: \"present\"",694],["choices: ['present', 'absent']",811],["present.",893],["state: present",3048]],"useCount":188088},{"word":"primary_key","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["'id': ('django.db.models.fields.CharField', [], {'max_length': '36', 'primary_key': 'True'}),",6348],["'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),",9079],["id = db.Column(db.Integer, primary_key=True)",10949],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",15194],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["id = Column(Integer, primary_key=True)",17331],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022]],"useCount":721877},{"word":"print","context":[["print()",42788],["print",114397],["print(",11661],["print('')",15467],["print(e)",15921],["print ''",16829],["print(\"\")",20580],["print \"\\n---An error occurred---\\n\"",24666],["print e",27464],["print \"\"",27527]],"useCount":2621875},{"word":"print_function","context":[["from __future__ import (absolute_import, division, generators, nested_scopes, print_function,",5714],["from __future__ import print_function",98595],["from __future__ import division, absolute_import, print_function",4438],["from __future__ import division, print_function",4691],["from __future__ import absolute_import, division, print_function, unicode_literals",5790],["from __future__ import division, print_function, absolute_import",6265],["from __future__ import absolute_import, print_function",6651],["from __future__ import (absolute_import, division, print_function)",7334],["from __future__ import print_function, division",7909],["from __future__ import absolute_import, division, print_function",10098]],"useCount":207993},{"word":"process","context":[["return process",4279],["process.start()",1180],["process.",1312],["process = subprocess.Popen(",1459],["self.process = None",1978],["process.wait()",2307],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["def process(value):",3671],["def process(self):",7108]],"useCount":399472},{"word":"product","context":[["from itertools import product",3747],["product_obj = self.pool.get('product.product')",2555],["product_obj = self.pool.get('product.product')",2555],["uom_obj = self.pool.get('product.uom')",2094],["_inherit = 'product.product'",1054],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["if not product:",1207],["for product in products:",1381]],"useCount":284051},{"word":"profile","context":[["if not profile:",1145],["if profile:",2473],["#@profile",888],["profile = None",904],["model_name='profile',",938],["import profile",1021],["@profile",1152],["profile.save()",4458],["return profile",2245],["for profile in profiles:",1430]],"useCount":238395},{"word":"project","context":[["self.project = project",3341],["# General information about the project.",27441],["# \"<project> v<release> documentation\".",25615],["# The version info for the project you're documenting, acts as replacement for",25262],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["self.project.save()",4635],["project=project,",3806],["project=project,",3806],["# or the project homepage.",3482],["self.project = project",3341]],"useCount":878978},{"word":"project_id","context":[["filter_by(project_id=project_id).\\",4522],["filter_by(project_id=project_id).\\",4522],["project_id=project_id,",2844],["project_id=project_id,",2844],["if project_id:",2492],["self.project_id = 'fake'",2299],["project_id,",2176],["project_id='test_project',",1783],["self.context = context.RequestContext(self.user_id, self.project_id)",1689],["project_id=project_id)",1565]],"useCount":321641},{"word":"properties","context":[["properties = {",2118],["self.properties = properties",1910],["self.properties = properties",1910],["'properties': {",13958],["\"properties\": {",8921],["properties.Schema.STRING,",8475],["properties = {}",3388],["return properties",2406],["properties.Schema.MAP,",2215],["properties:",5142]],"useCount":394692},{"word":"property","context":[["db_id = property(__get_db_id, __set_db_id)",1679],["filters={'property-owner_id': self.tenant.id,",1595],["<property>",1435],["__weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default",1408],["# property including but not limited to intellectual property relating",1267],["# property including but not limited to intellectual property relating",1267],["_swig_property = property",1735],["</property>",2363],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["@property",1009433]],"useCount":1309196},{"word":"protocol","context":[["'protocol': const.PROTO_NAME_TCP,",867],["from thrift.protocol import fastbinary",965],["from twisted.internet import protocol",896],["'protocol': 'udp',",951],["from thrift.protocol import TBinaryProtocol",1003],["protocol,",1050],["'protocol': 'tcp',",1904],["self.protocol = protocol",2781],["# Generated by the protocol buffer compiler.  DO NOT EDIT!",2521],["self.protocol = protocol",2781]],"useCount":267883},{"word":"provided","context":[["# documentation and/or other materials provided with the distribution;",2750],["# documentation and/or other materials provided with the distribution.",2337],["# and/or other materials provided with the distribution.",2332],["##    documentation and/or other materials provided with the distribution.",2373],["#   documentation and/or other materials provided with the distribution.",2610],["#     documentation and/or other materials provided with the distribution.",2688],["#    documentation and/or other materials provided with the distribution.",2848],["#   and/or other materials provided with the distribution.",6180],["#       documentation and/or other materials provided with the distribution.",6196],["# in the documentation and/or other materials provided with the",8026]],"useCount":265676},{"word":"put","context":[["# Don't put anything in this directory yourself; store your static files",5292],["def put(self):",1911],["@attr(method='put')",1856],["# put it back",1734],["request = self._client.put(url, query_parameters)",1581],["resp = self.app.put(",1087],["response = self.client.put(",1021],["self.put()",1009],["user.put()",1007],["'put',",920]],"useCount":217340},{"word":"py","context":[["# Locate the client library. If module was installed via \"setup.py\" script, then",1115],["self.remove_settings('settings.py')",1472],["# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT",2575],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["import py",2121],["# allow setup.py to be run from any path",1439],["os.system('python setup.py sdist upload')",1429],["# the version across setup.py and the project code, see",1190],["# -*- encoding: utf-8; py-indent-offset: 4 -*-",1180]],"useCount":530499},{"word":"pylint","context":[["# pylint: enable=protected-access",2449],["# pylint: disable=W0212",2969],["except Exception:  # pylint: disable=broad-except",3224],["# pylint: disable=no-member",4094],["# pylint: disable=invalid-name",4613],["# pylint: disable=unused-argument",5175],["# pylint: disable=too-few-public-methods",2500],["# pylint: disable=E1101",2223],["# pylint: disable=C0301",2381],["# pylint: disable=protected-access",8883]],"useCount":195603},{"word":"pytest","context":[["@pytest.fixture(scope='session')",2444],["@pytest.fixture(scope='function')",2482],["@pytest.mark.parametrize(",3524],["@pytest.fixture()",4602],["with pytest.raises(TypeError):",6551],["@pytest.mark.django_db",8837],["with pytest.raises(ValueError):",13084],["@pytest.fixture",31748],["@pytest.yield_fixture",2288],["import pytest",60331]],"useCount":284220},{"word":"python","context":[["```python",7316],["from tensorflow.python.framework import ops",3095],["<script type=\"text/python\">",3594],["#!/bin/env python",4280],["from twisted.python import log",6637],["#! /usr/bin/env python",36357],["#!/usr/bin/env python",502842],["#! /usr/bin/python",8559],[".. code-block:: python",12815],["#!/usr/bin/python",166810]],"useCount":1196598},{"word":"q","context":[["q.breakable()",7608],["def pretty_print(self, q):",3804],["q,",2213],["if q:",2117],["q.text('}')",3804],["with q.group():",3804],["q.text(\",\"); q.breakable()",4783],["q.text(\",\"); q.breakable()",4783],["return q",6976],["with q.indent(2):",3804]],"useCount":548787},{"word":"query","context":[["query = \"\"\"",5593],["self.query = query",2853],["self.query = query",2853],["query = {",2878],["return query.all()",2880],["cursor.execute(query)",4946],["if query:",6846],["return query",13572],["query = query.filter(",2454],["query = query.filter(",2454]],"useCount":1112112},{"word":"queue","context":[["self.queue.task_done()",1334],["import Queue as queue",1136],["queue = []",1108],["self.queue = []",1647],["from queue import Queue",1869],["while queue:",1917],["except queue.Empty:",2248],["self.queue = queue",2943],["self.queue = queue",2943],["import queue",3108]],"useCount":232788},{"word":"r","context":[["if r:",11328],["return r",59967],["r\"\"\"",39838],["L = ['%s=%r' % (key, value)",21414],["url(r'^admin/', include(admin.site.urls)),",14085],["r = []",9263],["r'''",7362],["r['router']['id'],",7294],["self.assertEqual(r.status_code, 200)",5469],["eq_(r.status_code, 200)",6610]],"useCount":3275377},{"word":"raise","context":[["raise",305950],["raise NotImplementedError(",15310],["raise NotImplementedError",110441],["raise NotImplementedError()",99691],["raise e",91385],["raise ValueError(",49546],["raise Http404",26305],["raise ValueError",21891],["raise StopIteration",18404],["raise TypeError(",17538]],"useCount":3475001},{"word":"raises","context":[["with pytest.raises(ValueError):",13084],["with pytest.raises(TypeError):",6551],[":raises:",4642],["@raises(ValueError)",4003],["with pytest.raises(KeyError):",2210],["from nose.tools import raises",2059],["with pytest.raises(Exception):",1965],["with pytest.raises(ValidationError):",1716],["@raises(TypeError)",1647],["with pytest.raises(AssertionError):",1552]],"useCount":241575},{"word":"random","context":[["import random",127442],["from random import randint",9781],["np.random.seed(0)",4557],["rng = np.random.RandomState(0)",4527],["from random import choice",4274],["random.seed()",3739],["from random import random",3406],["from random import random",3406],["np.random.seed(1234)",3151],["from random import randrange",2649]],"useCount":606264},{"word":"range","context":[["for i in range(count):",4666],["for i in range(N):",5803],["from six.moves import range",4252],["for i in range(3):",19936],["for i in range(10):",18930],["for i in range(n):",15694],["for i in range(5):",13524],["for i in range(4):",12296],["for i in range(2):",9690],["for i in range(100):",6975]],"useCount":1237766},{"word":"raw","context":[["def unpack (self, raw, offset=0):",1078],["self.raw = raw",1091],["self.raw = raw",1091],["'raw',",1265],["if not raw:",1572],["self, custom_headers=None, raw=False, **operation_config):",2190],["return raw",2350],["if raw=true",6712],[":param bool raw: returns the direct response alongside the",7438],["if raw:",12505]],"useCount":286463},{"word":"rc","context":[["if rc != 0:",12256],["return rc",8419],["if rc == 0:",5877],["if rc:",3420],["rc = 0",2813],["if not rc:",1362],["from matplotlib import rc",1340],["rc = 1",1274],["sys.exit(rc)",1066],["# The full version, including alpha/beta/rc tags.",26558]],"useCount":207927},{"word":"re","context":[["self._errHandler.reportError(self, re)",2257],["import re",377951],["# The version info for the project you're documenting, acts as replacement for",25262],["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["mobj = re.match(self._VALID_URL, url)",3805],["mobj = re.search(",2685],["except RecognitionException as re:",2365],["self._errHandler.recover(self, re)",2257],["localctx.exception = re",2257]],"useCount":1308419},{"word":"read","context":[["def read(self, iprot):",22087],["def read(self):",9317],["def read(fname):",4562],["content = f.read()",5281],["resp.read()",5493],["x.read(self._iprot)",6272],["result.read(self._iprot)",6273],["return f.read()",7751],["args.read(iprot)",8039],["data = f.read()",8865]],"useCount":1006935},{"word":"real","context":[["# real",6810],["def __init__(self, *args, **kwargs): # real signature unknown",4588],["'type': u'real',",2214],["def __new__(S, *more): # real signature unknown; restored from __doc__",1738],["x = Symbol('x', real=True)",1481],["'type': u'real'}),",1030],["type = 'real',",942],["'type': 'real',",879],["def __new__(*args, **kwargs): # real signature unknown",697],["__gtype__ = None # (!) real value is ''",667]],"useCount":192219},{"word":"reason","context":[["self.reason = reason",3932],["self.reason = reason",3932],["raise exception.InvalidVolume(reason=msg)",3292],["raise exception.InvalidInput(reason=msg)",2839],["if reason:",1516],["def clientConnectionFailed(self, connector, reason):",1417],["reason=reason)",1118],["reason=reason)",1118],["def clientConnectionLost(self, connector, reason):",1090],["def connectionLost(self, reason):",4771]],"useCount":254853},{"word":"record","context":[["<record>",4854],["for record in self:",2622],["if record:",4724],["return record",5363],["for record in records:",5407],["def emit(self, record):",6900],["</record>",4537],["with warnings.catch_warnings(record=True):",4498],["with warnings.catch_warnings(record=True) as w:",7843],["def format(self, record):",3209]],"useCount":614631},{"word":"redirect","context":[["from django.shortcuts import redirect",5275],["return redirect(url_for('index'))",4455],["return redirect(",1283],["return redirect(url_for('.index'))",1326],["return redirect(url)",1619],["return redirect(url_for('login'))",1787],["self.redirect('/')",1936],["return redirect(url_for('main.index'))",2065],["from django.shortcuts import render, redirect",2187],["return redirect('/')",3884]],"useCount":226571},{"word":"ref","context":[["https://docs.djangoproject.com/en/1.7/ref/settings/",3012],["return ref",3182],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],[":param operation_config: :ref:`Operation configuration",6589],["# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts",2678],["if ref:",2706],["# https://docs.djangoproject.com/en/1.6/ref/settings/#databases",2967],["# https://docs.djangoproject.com/en/1.7/ref/settings/#databases",2988],["https://docs.djangoproject.com/en/1.6/ref/settings/",3002]],"useCount":400030},{"word":"reference","context":[["self.reference = reference",536],[":param volume: volume reference",547],["# return reference",792],["return reference",468],["@param self Object reference.",451],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],[":param self: self reference",3969],["# verify reference counting",487],["if reference:",493],["self.reference = reference",536]],"useCount":222330},{"word":"register","context":[["@register.filter",15851],["self.app.register(",2456],["@register.assignment_tag",2527],["register = Library()",2856],["settings.register(",3600],["@register()",4321],["@register.tag",5385],["def register():",5894],["@register.simple_tag",6299],["register = template.Library()",13778]],"useCount":289149},{"word":"related","context":[["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'author': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True'}),",1495],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['sites.Site']\"}),",1948],["'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['cms.Placeholder']\", 'null': 'True'}),",1768],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),",1555],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"}),",1554],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125]],"useCount":383158},{"word":"relative","context":[["# Don't forget to use absolute paths, not relative paths.",10569],["# The name of a javascript file (relative to the configuration directory) that",5913],["# .htaccess) here, relative to this directory. These files are copied",11812],["# List of patterns, relative to source directory, that match files and",24527],["# add these directories to sys.path here. If the directory is relative to the",24896],["# The name of an image file (relative to this directory) to place at the top",25393],["# The name of an image file (relative to this directory) to place at the top of",25468],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# relative to this directory. They are copied after the builtin static files,",26167],["# Add any paths that contain templates here, relative to this directory.",27409]],"useCount":324404},{"word":"release","context":[["# \"<project> v<release> documentation\".",25615],["# |version| and |release|, also used in various other places throughout the",25310],["self.lock.release()",8572],["self._lock.release()",5455],["lock.release()",5384],["def release(self):",4780],["release = '0.1'",3195],["release = version",2615],["if release:",1863],["self.release()",2437]],"useCount":289802},{"word":"remove","context":[["def db_deleted_children(self, remove=False):",1851],["os.remove(filename)",7193],["os.remove(filepath)",1566],["self._router_interface_action('remove',",1929],["os.remove(file)",1999],["os.remove(fname)",2410],["os.remove(f)",3245],["if remove:",3612],["def remove(self):",4193],["os.remove(path)",6697]],"useCount":525194},{"word":"render","context":[["from django.shortcuts import render, get_object_or_404",1925],["def render(self, *args, **kwargs):",1967],["self.render()",1691],["from django.shortcuts import render, redirect",2187],["def render(self, request):",2272],["return render(",3315],["from django.shortcuts import render",13261],["def render(self, name, value, attrs=None):",4321],["def render(self):",8883],["def render(self, context):",11102]],"useCount":292900},{"word":"replace","context":[["\"\"\".replace(\"\\n\", \"\\r\\n\")",1323],["might make sense to replace the whole Django WSGI application with a custom one",4328],["resourcePath = resourcePath.replace('{format}', 'json')",2604],["if replace:",1578],["history = open('HISTORY.rst').read().replace('.. :changelog:', '')",1084],["s1 = s1.replace('<', '&lt;')",1072],["s1 = s1.replace('>', '&gt;')",1058],["s1 = s1.replace('&', '&amp;')",1035],["resourcePath = resourcePath.replace('{' + 'userId' + '}',",1010],["cleanedparams=params.replace('?','')",932]],"useCount":550264},{"word":"req","context":[["req.body = jsonutils.dumps(body)",6621],["res = req.get_response(self.api)",10660],["req = Request.blank(",10592],["context = req.environ['nova.context']",10169],["resp = req.get_response(self.controller)",7236],["resp = req.get_response(self.object_controller)",7029],["response = urllib2.urlopen(req)",6639],["req.method = 'POST'",10967],["self.app.update_request(req)",6180],["req.headers[\"content-type\"] = \"application/json\"",6023]],"useCount":1066650},{"word":"request","context":[["if request.method == 'GET':",11749],["if request.method == 'POST':",42864],["request,",19437],["def get(self, request, *args, **kwargs):",10792],["self.request = request",10455],["self.request = request",10455],["if request.user.is_authenticated():",10343],["user = request.user",10086],["if request.method == \"POST\":",13059],["context_instance=RequestContext(request))",11791]],"useCount":3280326},{"word":"requests","context":[["'requests',",2291],["@mock.patch('requests.get')",2626],["session = requests.Session()",1764],["import requests",71782],["response = requests.get(url)",1963],["except requests.exceptions.ConnectionError:",1941],["r = requests.get(url)",3289],["self.session = requests.Session()",1643],["except requests.exceptions.RequestException as e:",1685],["s = requests.Session()",1688]],"useCount":334337},{"word":"required","context":[["# required",3400],["required=False,",32298],["required: false",52495],["required=True,",19760],["required=False)",14259],["required: true",13467],["required=True)",6660],["'required-field': False,",5998],["'required': True,",3425],["required=True",3225]],"useCount":695623},{"word":"res","context":[["res = []",30325],["return res",179915],["res = {}",30400],["eq_(res.status_code, 200)",6984],["if res:",22455],["if not res['OK']:",12895],["if not res:",11594],["res = req.get_response(self.api)",10660],["assert_equal(res.status_code, 200)",7867],["res = None",5598]],"useCount":1785764},{"word":"reset","context":[["def reset(cls):",692],["self.reset()",18080],["if reset:",2185],["def reset():",1940],["reset()",1933],["policy.reset()",858],["httpretty.reset()",851],["# reset",773],["p.reset()",539],["def reset(self):",27322]],"useCount":187024},{"word":"resource","context":[["for i in range(len(resource)) :",3645],["import resource",2729],["if (resource and len(resource) > 0) :",2572],["if (resource and len(resource) > 0) :",2572],["from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource",2244],["from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response",2230],["if type(resource) is not list :",2195],["for resource in resources:",2044],["return resource",2889],["resource = wsgi.Resource(controller)",1938]],"useCount":521545},{"word":"resources","context":[["resources = []",3036],["from resources.lib.libraries import client",1071],["resources:",2716],["from resources.datatables import Options",2264],["from resources.datatables import WeaponType",2154],["from resources.datatables import Difficulty",2117],["for resource in resources:",2044],["resources.append(res)",1339],["'resources': {",1207],["return resources",3929]],"useCount":214672},{"word":"resp","context":[["self.assertEqual(200, resp.status)",3497],["resp = req.get_response(self.app)",3762],["self.assertEqual(resp.status_int, 200)",4478],["self.expected_success(200, resp.status)",4716],["return resp, body",5410],["resp.read()",5493],["resp = req.get_response(self.object_controller)",7029],["resp = req.get_response(self.controller)",7236],["self.assertEqual(resp.status_code, 200)",17900],["return resp",25595]],"useCount":715371},{"word":"response","context":[["response = self.client.get(",11094],["return response",110657],["self.assertEqual(response.status_code, 200)",83327],["response = self.client.get(url)",23349],["self.assertEqual(response.status_code, 302)",19450],["response = self.client.post(",12406],["eq_(response.status_code, 200)",12361],["self.assertEquals(response.status_code, 200)",11521],["self.assertEqual(response.content_type, 'application/json')",11194],["response,",10668]],"useCount":2715548},{"word":"result","context":[["return result",386750],["if not result['OK']:",11353],["if result is None:",11754],["result = False",13666],["result = None",20161],["if not result:",28724],["if result:",32833],["result = {}",38862],["result = []",80243],["result = True",10705]],"useCount":3276288},{"word":"results","context":[["return results",49222],["results = []",39516],["results = {}",9524],["for result in results:",8733],["# implements a search results scorer. If empty, the default will be used.",5914],["if results:",4845],["# Display results.",3981],["results.append(result)",3670],["if not results:",3545],["for r in results:",3462]],"useCount":779713},{"word":"ret","context":[["ret = 0",4999],["ret = True",4795],["if ret != 0:",5409],["ret = False",5553],["if not ret:",6298],["ret = None",7485],["ret = {}",12257],["if ret:",12294],["ret = []",28165],["return ret",148714]],"useCount":656732},{"word":"return","context":[["return {",161610],["return res",179915],["return []",181135],["return",2012056],["return False",1214010],["return True",1076346],["return None",882671],["return result",386750],["return 0",246952],["return self",209571]],"useCount":23106623},{"word":"return_value","context":[["return_value=True)",2696],["return_value=None)",4956],["return_value=VOLUME)",1143],["return_value=RESPONSE_200)",1388],["instance.get_networks.return_value = []",1551],["return_value=False)",1570],["return_value=(None, EMCVMAXCommonData.storage_system))",1907],["mock_create_client.return_value = mock_client",2475],["return return_value",3070],["instance = self.plugin.return_value",4832]],"useCount":480340},{"word":"returned","context":[["will be returned.",1079],["# confirm the search returned one object",554],["returned: success, path exists and user can read stats",672],["be returned.",758],["array is returned.",548],["returned.",6114],["returned: success",5550],["returned: always",2602],["is returned.",2076],["# Make sure the correct queryset is returned",984]],"useCount":326921},{"word":"returns","context":[[":returns: None",7122],[":param bool raw: returns the direct response alongside the",7438],["''' Returns True if this instance represents config data else returns False '''",5223],["returns:",4782],["returns the request thread.",2901],["pyauto_errors.JSONInterfaceError if the automation call returns an error.",2261],[":returns: :class:`django.http.HttpResponse`",2023],["returns",1497],[":returns:",9864],["@returns(t.void)",1472]],"useCount":496552},{"word":"reverse","context":[["from rest_framework.reverse import reverse",1182],["if reverse:",3830],["from django.core.urlresolvers import reverse",57527],["reverse(",4393],["self.client.get(reverse('admin:logout'))",1194],["from django.core.urlresolvers import reverse, NoReverseMatch",1204],["self.assertRedirects(response, reverse('user_login'))",1330],["def reverse(self):",1928],["url = reverse(",2814],["reverse=True)",2977]],"useCount":471672},{"word":"right","context":[["# load the right message language",3982],["self.right = right",2131],["self.right = right",2131],["<td nowrap align=\"right\" class=\"   RegularFS BlackFC   \">",2112],["def right(self):",1540],["#         self.right = None",1383],["self.right = None",1233],["# Get the data: the input matrix and the right output.",1226],["# Check that the right middleware methods have been invoked",1172],["if right:",859]],"useCount":342500},{"word":"role","context":[["self.role = role",1321],["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["for role in roles:",2691],["def data(self, index, role):",1624],["self.role = role",1321],["if role == Qt.DisplayRole:",1252],["if role:",958],["return role",903],["def headerData(self, section, orientation, role):",765]],"useCount":235352},{"word":"root","context":[["self.root = root",3555],["self.root = root",3555],["root = Tk()",4028],["root = tree.getroot()",4788],["root.mainloop()",5466],["'root': [",5980],["return root",7456],["# directly to the root of the documentation.",11811],["if root:",2522],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865]],"useCount":677206},{"word":"root_module","context":[["register_methods(root_module)",1214],["root_module = module_init()",1214],["register_types(root_module)",1214],["root_module.generate(out)",1219],["def register_functions_ns3_FatalImpl(module, root_module):",1332],["register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)",1332],["module = root_module",1402],["def register_functions(root_module):",1403],["def register_methods(root_module):",1405],["root_module = module.get_root()",7096]],"useCount":621227},{"word":"router","context":[["router['id'],",940],["url(r'^', include(router.urls)),",855],["db = router.db_for_write(self.model, instance=self.instance)",914],["r['router']['id'],",7294],["with self.router() as r:",3329],["router = routers.DefaultRouter()",1301],["for router in routers:",1147],["return router",1008],["raise n_exc.BadRequest(resource='router', msg=msg)",997],["body = self._show('routers', r['router']['id'])",925]],"useCount":217781},{"word":"row","context":[["if not row:",4579],["row = layout.row()",5214],["for row in rows:",24269],["for row in reader:",9626],["if row:",7835],["row += 1",7190],["for row in data:",5946],["row = []",5531],["return row",5502],["row = layout.row()",5214]],"useCount":790528},{"word":"rows","context":[["for row in rows:",24269],["rows = []",9842],["return rows",6304],["if rows:",3469],["rows.append(row)",3285],["rows = cur.fetchall()",2514],["if not rows:",2438],["rows = cursor.fetchall()",2361],["for r in rows:",1916],["def rows(self):",1766]],"useCount":323455},{"word":"rtype","context":[[":rtype: float",6503],[":rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`",6712],["@rtype: string",7623],[":rtype: string",8242],[":rtype: list",11953],[":rtype: dict",13130],[":rtype: int",21650],[":rtype: str",26003],[":rtype: None",26799],[":rtype: bool",27142]],"useCount":391547},{"word":"rule","context":[["self.rule = rule",1019],["for rule in rules:",4146],["self.rule = rule",1019],["req, {'security_group_rule': rule})",1266],["rule = {'ethertype': 'IPv4',",1334],["rule = {'ethertype': 'IPv6',",1334],["for rule in self.rules:",1352],["return rule",1856],["self._test_prepare_port_filter(rule, ingress, egress)",2683],["master_ninja.rule(",2748]],"useCount":282574},{"word":"rules","context":[["for rule in rules:",4146],["rules = {",3482],["rules = []",2911],["return rules",2609],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-group-rules')",1985],["self.policy.set_rules(rules)",1839],["rules = [",1571],["for rule in self.rules:",1352],["self.rules = rules",1020],["self.rules = rules",1020]],"useCount":195064},{"word":"run","context":[["reactor.run()",6819],["def run(self):",118539],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["def run():",11234],["app.run()",8769],["run()",7347],["tf.initialize_all_variables().run()",4488],["def run(self, edit):",4248],["self.run()",4158],["unittest.TextTestRunner(verbosity=2).run(suite)",3925]],"useCount":926749},{"word":"running","context":[["if not self.running:",1763],["while running:",1904],["running = True",2429],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["if self.running:",2569],["running = False",3068],["while self.running:",3735],["# If running in a Windows environment this must be set to the same as your",4205],["self.running = True",7361],["self.running = False",11058]],"useCount":258283},{"word":"s","context":[["return s",84093],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["<td>%s</td>",8770],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["s.close()",14661],["L = ['%s=%r' % (key, value)",21414],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["%s",23928]],"useCount":10037375},{"word":"sa","context":[["sa.Column('id', sa.Integer(), nullable=False),",5002],["sa.Column('id', sa.String(length=36), nullable=False),",956],["af, socktype, proto, canonname, sa = res",1101],["sa.Column(",1240],["id = sa.Column(sa.Integer, primary_key=True)",1584],["id = sa.Column(sa.Integer, primary_key=True)",1584],["sa.PrimaryKeyConstraint('id'),",2499],["sa.PrimaryKeyConstraint('id')",3854],["sa.Column('id', sa.Integer(), nullable=False),",5002],["import sqlalchemy as sa",15417]],"useCount":192389},{"word":"same","context":[[":param str etag: (optional), ETag from a previous request to the same",674],["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["Most of them are same to the on-wire counterparts but in host byte order.",534],["The arguments are the same as for the Popen constructor.  Example:",687],["# Number of cell columns in the cortical region (same number for",927],["# A shorter title for the navigation bar.  Default is the same as",1164],["# for small screen space, using the same theme for HTML and epub output is",1445],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["# On Unix systems, a value of None will cause Django to use the same",2774],["# If running in a Windows environment this must be set to the same as your",4205]],"useCount":459045},{"word":"save","context":[["form.save()",11875],["self.project.save()",4635],["if save:",6952],["self.user.save()",9148],["self.save()",29721],["user.save()",22233],["def save(self):",19698],["def save(self, *args, **kwargs):",18292],["instance.save()",17079],["obj.save()",9298]],"useCount":871843},{"word":"schema","context":[["schema={",1234],["schema = {",4512],["'schema': {",2939],["return schema",2536],["self.schema = schema",1961],["self.schema = schema",1961],["if schema is not None:",1488],["if schema:",1331],["schema, tablename = self.getSchemaTableName(table)",1316],["def schema(self):",1149]],"useCount":249017},{"word":"scope","context":[["# Pass names back to global scope (s3.*)",3483],["@pytest.fixture(scope=\"function\")",1208],["self.scope = scope",1622],["@pytest.fixture(scope='module')",1896],["@pytest.fixture(scope=\"module\")",2235],["@pytest.fixture(scope='session')",2444],["@pytest.fixture(scope='function')",2482],["scope=Scope.settings",3398],["scope=Scope.settings,",4178],["self.scope = scope",1622]],"useCount":203574},{"word":"script","context":[["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["<script type=\"text/javascript\">",5318],["<script>",4634],["<script type=\"text/python\">",3594],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["</script>",15876]],"useCount":339032},{"word":"search","context":[["# Language to be used for generating the HTML full-text search index.",5923],["# implements a search results scorer. If empty, the default will be used.",5914],["# A dictionary with options for the search language support, empty by default.",5913],["mobj = re.search(",2685],["if search:",2319],["epub_exclude_files = ['search.html']",1752],["mo = re.search(r'=\\s*\"(.*)\"', line)",1691],["self.search()",1468],["def search(self):",1415],["def search():",1240]],"useCount":548909},{"word":"second","context":[["self.second = second",332],["self.expand(second, first.type))",332],["\"second\": {",379],["if second is None:",429],["# Check that second device in ring is not affected",438],["# exit from second parent",520],["input_data.second,",532],["# do second fork",635],["\"<Article: John's second story>\",",817],["# translate to the origin of second gear",1697]],"useCount":189178},{"word":"seconds","context":[["units = 'seconds'",537],["self.seconds = seconds",553],["self.seconds = seconds",553],["'seconds': 0,",577],["return seconds",582],["# set this to 60 seconds and then to 518400 when you can prove it works",652],["seconds = 0",781],["time.sleep(seconds)",785],["timeout: timeout in seconds",1263],["total_seconds = tzoff.seconds + (86400 * tzoff.days)",863]],"useCount":208119},{"word":"section","context":[["# (source start file, name, description, authors, manual section).",23889],["section = None",1131],["section = journey.sections.add()",1167],["if section is None:",1200],["self.section = section",1290],["self.section = section",1290],["</section>",1305],["return section",1324],["section of our README.",1710],["for section in sections:",2142]],"useCount":313864},{"word":"see","context":[["For more information on this file, see",25647],["For the full list of settings and their values, see",14104],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["If not None, override default verbose level (see mne.verbose).",4448],["# individuals. For the exact contribution history, see the revision",2660],["# <see AUTHORS file>",1803],["directory. For more information, see the \"Caching authentication information\"",1718],["#*   for detail see the LICENCE text file.                                 *",1423],["SUMO, Simulation of Urban MObility; see http://sumo.dlr.de/",1338],["# further.  For a list of options available for each theme, see the",24845]],"useCount":396627},{"word":"select","context":[["</select>",4935],["</select></li>",847],["sqlResults = myDB.select(",943],["from select import select",1267],["from select import select",1267],["def select(self):",1406],["duplicate = current.db(query).select(table.id,",2261],["</select>\"\"\")",3475],["select",3820],["import select",10905]],"useCount":437020},{"word":"selected","context":[["# Make sure the correct choice is selected",800],["if selected:",2697],["def getMulti(self, selected):",874],["self.selected = False",927],["if self.selected:",957],["return selected",1041],["<option value=\"\" selected=\"selected\">---------</option>",1174],["<option value=\"\" selected=\"selected\">---------</option>",1174],["@param opts: the command line options selected by the user",1364],["selected = []",1388]],"useCount":183004},{"word":"self","context":[["def setUp(self):",497902],["self.assertEqual(",297961],["def __init__(self):",560894],["def __str__(self):",276248],["def __repr__(self):",251573],["return self",209571],["def tearDown(self):",151302],["def __init__(self, *args, **kwargs):",130790],["def run(self):",118539],["self.mox.ReplayAll()",109971]],"useCount":89273871},{"word":"send","context":[["email.send()",1309],["def send(self, msg):",1162],["# Construct and send request",8113],["# performed by this configuration is to send an email to",6083],["response = self._client.send(request, header_parameters, **operation_config)",4543],["response = self._client.send(",2515],["def send(self, data):",2393],["return self._client.send(",1625],["msg.send()",1580],["def send(self):",1436]],"useCount":301230},{"word":"sequence","context":[["<xsd:sequence>",1586],["sequence.append(utils.StartRecordingAction())",13281],["sequence.append(utils.AssertPresentationAction(",13276],["sequence.append(KeyComboAction(\"Down\"))",4371],["sequence.append(KeyComboAction(\"Up\"))",2939],["_order = 'sequence'",2271],["sequence.append(KeyComboAction(\"Tab\"))",2127],["# A sequence of (type, uri, title) tuples for the guide element of content.opf.",2086],["raise TypeError, \"iteration over non-sequence\"",1901],["</xsd:sequence>",1618]],"useCount":288296},{"word":"server","context":[["for server in servers:",3226],["return server",3634],["server.start()",3847],["server = self.servers.first()",3985],["# This application object is used by any WSGI server configured to use this",4241],["# file. This includes Django's development server, if the WSGI_APPLICATION",4242],["This module contains the WSGI application used by Django's development server",4332],["server.serve_forever()",4553],["self.server = server",5998],["self.server = server",5998]],"useCount":937050},{"word":"servers","context":[["servers = self.servers.list()",1414],["for server in servers:",3226],["servers = self.controller.index(req)['servers']",3015],["servers = self.controller.index(req)['servers']",3015],["self.assertEqual(len(servers), 1)",2459],["self.assertEqual(servers[0]['id'], server_uuid)",1962],["return_server = self.fc.servers.list()[1]",1677],["from servers import servertools",1497],["servers = []",1428],["server = self.servers.first()",3985]],"useCount":187782},{"word":"service","context":[["for service in services:",2771],["# Initialize appropriate service.",4548],["service = self.session.nav.getCurrentService()",4009],["return service",2818],["if service:",2451],["self.service = service",2276],["self.service = service",2276],["from nssrc.com.citrix.netscaler.nitro.service.options import options",2239],["service.clear_session(self)",2233],["def _get_nitro_response(self, service, response) :",2229]],"useCount":543080},{"word":"session","context":[["self.session = session",8454],["self.session = session",8454],["def __init__(self, session):",8757],["with context.session.begin(subtransactions=True):",10934],["session.close()",12702],["Screen.__init__(self, session)",12970],["with session.begin():",18258],["session = get_session()",19749],["session.commit()",21114],["db.session.commit()",39672]],"useCount":1270385},{"word":"set","context":[["# Usually you set \"language\" from the command line for these cases.",5937],["# If you set this to False, Django will not format dates, numbers and",5943],["# vim: set expandtab tabstop=4 shiftwidth=4:",6604],["# If you set this to False, Django will make some optimizations so as not",7661],["seen = set()",7778],["# This file is execfile()d with the current directory set to its",12708],["# This file is execfile()d with the current directory set to its containing dir.",12868],["already_processed = set()",18325],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["# There are two options for replacing |today|: either, you set today to some",25812]],"useCount":1982341},{"word":"setUp","context":[["def setUp(self):",497902],["super().setUp()",4022],["self.setUp()",2050],["def setUp (self):",1952],["comm.setUp()",1388],["self.config = testing.setUp()",1124],["unittest.TestCase.setUp(self)",1112],["def setUp( self ):",1085],["def setUp(self, *args, **kwargs):",853],["def setUp(cls):",1084]],"useCount":650510},{"word":"settings","context":[["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["scope=Scope.settings,",4178],["from django.conf import settings",146012],["For the full list of settings and their values, see",14104],["# Quick-start development settings - unsuitable for production",13181],["if settings.DEBUG:",9991],["migrations.swappable_dependency(settings.AUTH_USER_MODEL),",8569],["import settings",7773],["settings = current.deployment_settings",5506],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012]],"useCount":1235172},{"word":"setup","context":[["setup(",74397],["django.setup()",3920],["self.setup()",4028],["def setup():",6860],["def setup(self):",26022],["from distutils.core import setup",29561],["from setuptools import setup, find_packages",37284],["def setup(app):",3911],["from distutils.core import setup, Extension",3187],["from setuptools import setup",38637]],"useCount":449619},{"word":"shape","context":[["n_samples, n_features = X.shape",3446],["def shape(self):",2649],["X : array-like, shape (n_samples, n_features)",2043],["X : array-like, shape = [n_samples, n_features]",2003],["n_samples = X.shape[0]",1595],["X : {array-like, sparse matrix}, shape (n_samples, n_features)",1390],["X : {array-like, sparse matrix}, shape = [n_samples, n_features]",1376],["The shape parameter(s) for the distribution (see docstring of the",1233],["self.shape = shape",1144],["self.shape = shape",1144]],"useCount":690088},{"word":"should","context":[["# HTML files that should be inserted before the pages created by sphinx.",3483],[":param dry_run: Set to True if the operation should not actually run.",2063],["Filter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".",2421],["# you should have received as part of this distribution. The terms",2697],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["# A list of files that should not be packed into the epub file.",3490],["and any production WSGI deployments. It should expose a module-level variable",4331],["# Absolute path to the directory static files should be collected to.",5576],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# Additional templates that should be rendered to pages, maps page names to",25900]],"useCount":1178769},{"word":"show","context":[["plt.show()",52859],["if show:",4638],["pylab.show()",4277],["#plt.show()",5118],["show()",6039],["def show(self):",8715],["self.show()",11458],["# If true, show page references after internal links.",23896],["# serve to show the default.",25778],["# If true, show URL addresses after external links.",44800]],"useCount":620647},{"word":"shutil","context":[["from shutil import copyfile",1353],["shutil.rmtree(self.tmpdir)",1421],["shutil.rmtree(self.tempdir)",1562],["shutil.rmtree(tempdir)",1853],["shutil.rmtree(tmpdir)",3433],["shutil.rmtree(path)",3524],["from shutil import rmtree",4092],["import shutil",99759],["shutil.rmtree(temp_dir)",1129],["shutil.rmtree(tmp_dir)",1238]],"useCount":235380},{"word":"signal","context":[["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["import signal",29337],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["signal.signal(signal.SIGINT, signal_handler)",1627],["signal.alarm(0)",1627],["signal.signal(signal.SIGINT, signal_handler)",1627],["signal.signal(signal.SIGINT, signal_handler)",1627],[">>> from scipy import signal",1627]],"useCount":275016},{"word":"since","context":[["time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)",1818],[":since:  v0.2.00",1586],[":since: v0.2.00",1297],["time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)",998],["time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)",998],["if since:",620],["# distance: number of commits since tag",531],["time_boot_ms              : Timestamp in milliseconds since system boot (uint32_t)",518],["# Delete the current file since this is not done by Django.",487],["usec                      : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)",464]],"useCount":202930},{"word":"single","context":[["single = True",374],["# Versions should comply with PEP440.  For a discussion on single-sourcing",1177],["if single:",1174],["'single': 'b',",763],["# To work with it from snapshot, the single image_service is needed",753],["# WARNING! Do not edit! http://waf.googlecode.com/git/docs/wafbook/single.html#_obtaining_the_waf_file",490],["corresponds to a single data point.",472],["assert len(ids) == 1, 'This option should only be used for a single id at a time.'",404],["#   beginning with a single underscore character to avoid collisions with",384],["A single-element list containing the shape of the output.",377]],"useCount":255381},{"word":"site","context":[["url(r'^admin/', include(admin.site.urls)),",14085],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["# Hosts/domain names that are valid for this site; required if DEBUG is False",2707],["url(r'^admin/', admin.site.urls),",2618],["site = Site.objects.get_current()",2553],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["'sites.site': {",2062],["import site",2038],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['sites.Site']\"}),",1948],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['sites.Site']\"}),",1495]],"useCount":332524},{"word":"six","context":[["from django.utils import six",14126],["if six.PY3:",9509],["if six.PY2:",5752],["@six.add_metaclass(abc.ABCMeta)",5644],["from six import iteritems",4717],["from six.moves import range",4252],["out = six.StringIO()",2473],["from six import string_types",2218],["from six.moves import urllib",2122],["import six",57628]],"useCount":326243},{"word":"size","context":[["self.size = size",8488],["self.size = size",8488],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["return size",6272],["size = 0",6163],["# The paper size ('letter' or 'a4').",5740],["if size is None:",4743],["def size(self):",9662],["# The font size ('10pt', '11pt' or '12pt').",26707],["# The paper size ('letterpaper' or 'a4paper').",20979]],"useCount":1256996},{"word":"skip","context":[["skip = 0",1065],["self.skip = True",920],["if not skip:",1453],["from nose.plugins.skip import SkipTest",2522],["if skip:",3006],["return 'skip'",3174],["d.skip(length)",3234],["skip = True",3394],["skip = False",3451],["iprot.skip(ftype)",79782]],"useCount":235634},{"word":"sleep","context":[["time.sleep(0.01)",7442],["sleep(1)",10977],["time.sleep(10)",11664],["time.sleep(3)",12164],["time.sleep(0.5)",15152],["time.sleep(5)",20009],["from time import sleep",21501],["time.sleep(2)",23157],["time.sleep(1)",72019],["time.sleep(0.1)",26869]],"useCount":482608},{"word":"slug","context":[["if not self.slug:",1164],["slug = models.SlugField()",1150],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})",886],["return slug",1253],["name='slug',",1279],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})",1385],["'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),",1400],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),",1996],["'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),",2887],["'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),",1064]],"useCount":230271},{"word":"snapshot","context":[["snapshot = {",1150],["conn.snapshot(self.context, instance_ref, recv_meta['id'],",793],["if snapshot:",852],["snapshot_id = 'snapshot-1234'",899],["for snapshot in snapshots:",1346],["return snapshot",1816],["def create_volume_from_snapshot(self, volume, snapshot):",1821],["def create_snapshot(self, snapshot):",1844],["'source_type': 'snapshot', 'destination_type': 'volume',",1909],["def delete_snapshot(self, snapshot):",1921]],"useCount":191888},{"word":"so","context":[["furnished to do so, subject to the following conditions:",7073],["#  furnished to do so, subject to the following conditions:",822],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# furnished to do so, subject to the following conditions:",24476],["# If you set this to False, Django will make some optimizations so as not",7661],["so as to provide a uniform API.",2880],["# static files, so a file named \"default.css\" will overwrite the builtin",1149],["os.dup2(so.fileno(), sys.stdout.fileno())",831],["# The contents of this file are pickled, so don't put values in the namespace",842],["# This code is so you can run the samples without installing the package",981]],"useCount":769326},{"word":"sock","context":[["sock = None",1956],["sock.close()",11791],["self.sock = sock",2139],["self.sock = sock",2139],["self.sock = None",2729],["return sock",2744],["sock = connect_tcp(('localhost', prolis.getsockname()[1]))",4174],["fd = sock.makefile()",4296],["self.sock.close()",4482],["sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",4715]],"useCount":183767},{"word":"socket","context":[["import socket",80004],["sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",4715],["except socket.error, e:",5474],["except socket.error as e:",5583],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["except socket.timeout:",6295],["except socket.error:",16193]],"useCount":655533},{"word":"some","context":[["# at each step 0: silent; >=1: some info; >=2: more info;",469],["'/scratch/dir/some/file'),",442],["# If you set this to False, Django will make some optimizations so as not",7661],["# do some validation checking...",1695],["# some non-false value, then it is used:",1144],["# Import iris.tests first so that some things can be initialised before",752],["#    ipshell('<some message> -- Entering ipshell.\\nHit Ctrl-D to exit')",521],["flavors.get_default_flavor(), image_href='some-fake-image',",485],["# 0: silent; >=1: some info; >=2: more info;",477],["# There are two options for replacing |today|: either, you set today to some",25812]],"useCount":395249},{"word":"sort","context":[["keys.sort()",7146],["names.sort()",2825],["files.sort()",2554],["if sort:",2498],["items.sort()",2219],["l.sort()",2192],["result.sort()",1704],["c.sort(kind=kind)",1645],["def sort(self):",1307],["ids.sort()",1197]],"useCount":278574},{"word":"sorted","context":[["for ref in sorted(tags):",776],["print(\"likely tags: %s\" % \",\".join(sorted(tags)))",676],["sorted(",567],["OverQuota exception will be raised with the sorted list of the",497],["assert sorted(exprs, key=default_sort_key) == exprs",457],["sorted([",397],["for n in sorted(G):",396],["return zip(*sorted(six.iteritems(info)))",371],["for state_name in sorted(_STATES.keys()):",340],["return sorted(",1097]],"useCount":219395},{"word":"source","context":[["# Redistribution and use in source and binary forms, with or without",44287],["# The encoding of source files.",26524],["# directories to ignore when looking for source files.",24534],["# List of patterns, relative to source directory, that match files and",24527],["# (source start file, name, description, authors, manual section).",23889],["# The suffix of source filenames.",22248],["# (source start file, target name, title, author,",21198],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title,",11864],["self.source = source",6202]],"useCount":1034856},{"word":"spec","context":[["self.spec = spec",1040],["if spec is None:",1056],["self.spec = spec",1040],["Overview (from the spec)",946],["spec: The target dictionary containing the properties of the target.",839],["spec = {",835],["for spec in specs:",817],["OpenAPI spec version:",695],["if spec:",647],["return spec",3129]],"useCount":213465},{"word":"specific","context":[["# Theme options are theme-specific and customize the look and feel of a theme",24888],["'''Class that manages this specific menu context.'''",518],["# Note that extra references to the specific methods implemented in",519],[":param migrate_data: implementation specific params",561],["``ModelResource`` includes a full working version specific to Django's",626],["# create a specific auth context for this request",1047],["to set specific fields.",1096],["# Apps specific for this project go here.",1122],["# Theme options are theme-specific and customize the look and feel of a",1189],["Note: this parameter is tree-specific.",1548]],"useCount":240108},{"word":"specified","context":[["specified.",1845],["\"\"\"Sets the specified host's ability to accept new instances.\"\"\"",662],["\"\"\"Power off the specified instance.\"\"\"",619],["\"\"\"Power on the specified instance.\"\"\"",605],["than) the specified ID. There are limits to the number of",601],["\"\"\"Suspend the specified instance.\"\"\"",524],["\"\"\"Creates a clone of the specified volume.\"\"\"",511],["raise ValueError(\"no path specified\")",503],["# all of the specified values evaluate to 0).",467],["Properties that need to be unset are specified in args array.",436]],"useCount":416871},{"word":"split","context":[["for line in out.split('\\n'):",2518],["# If true, the index is split into individual pages for each letter.",26818],["col = split.column()",4267],["words = line.split()",3331],["parts = line.split()",1902],["fields = line.split()",2470],["split = layout.split()",2245],["split = layout.split()",2245],["line = line.split()",1996],["nodeName_ = child_.nodeName.split(':')[-1]",1923]],"useCount":926665},{"word":"sql","context":[["cursor.execute(sql)",5163],["sql = \"\"\"",4821],["cur.execute(sql)",3734],["return sql",2743],["store.sql(\"\"\"",1662],["self.cursor.execute(sql)",1652],["session = sql.get_session()",1283],["sql.commit()",1277],["self._execute_and_commit(sql)",1200],["return sql, params",1014]],"useCount":242433},{"word":"sqlalchemy","context":[["from flask.ext.sqlalchemy import SQLAlchemy",3583],["from sqlalchemy.exc import IntegrityError",1853],["from sqlalchemy.orm.exc import NoResultFound",2321],["from sqlalchemy.orm import relationship",2345],["from sqlalchemy import *",2898],["from sqlalchemy.orm import sessionmaker",3305],["import sqlalchemy",4377],["from sqlalchemy import create_engine",5127],["from sqlalchemy.ext.declarative import declarative_base",6084],["import sqlalchemy as sa",15417]],"useCount":197450},{"word":"sqrt","context":[["def sqrt(x):",246],["from numpy import sqrt",242],["from math import pi, sqrt",294],["||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}",316],["from sympy.functions.elementary.miscellaneous import sqrt",395],["- If \"sqrt\", then `max_features=sqrt(n_features)`.",474],["- If \"sqrt\", then `max_features=sqrt(n_features)`.",474],[">>> from sympy import sqrt",713],["theta=sqrt((r*r)/(rb*rb)-1.)",986],["from math import sqrt",6408]],"useCount":203808},{"word":"src","context":[["\"sourceDirs\" : [\"src\"],",1300],["packages=find_packages('src'),",1452],["if src:",1488],["self.src = src",1505],["self.src = src",1505],["return src",1763],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["package_dir={'': 'src'},",2002]],"useCount":401356},{"word":"st","context":[["st.playSound(\"ItemSound.quest_middle\")",5359],["cond = st.getInt(\"cond\")",1901],["return st",2212],["id = st.getState()",2356],["st.set(\"cond\",\"1\")",2387],["st.playSound(\"ItemSound.quest_accept\")",2588],["st.exitQuest(1)",4591],["st.playSound(\"ItemSound.quest_itemget\")",3850],["st = player.getQuestState(qn)",3606],["st.playSound(\"ItemSound.quest_finish\")",2532]],"useCount":191609},{"word":"stack","context":[["stack = utils.parse_stack(t)",1374],["if not stack:",1413],["return stack",1556],["self.stack.create()",1791],["self.stack.store()",2188],["self.stack.state)",2512],["self.stack = []",2784],["stack.pop()",3339],["while stack:",3497],["stack = []",3725]],"useCount":291154},{"word":"start","context":[["# (source start file, target name, title,",11864],["def start(self):",36588],["start = 0",11275],["start = time.time()",25714],["# (source start file, name, description, authors, manual section).",23889],["# (source start file, target name, title, author,",21198],["t.start()",20493],["[param('ns3::Buffer::Iterator', 'start')],",19441],["# Quick-start development settings - unsuitable for production",13181],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397]],"useCount":1258508},{"word":"startswith","context":[["if path.startswith('/'):",1042],["if sys.platform.startswith('java'):",1085],["if line.startswith(\"#\"):",1322],["if name.startswith('_'):",1337],["if sys.platform.startswith(\"win\"):",1535],["if sys.platform.startswith('linux'):",1544],["if of.startswith(\"h\"):",1960],["if line.startswith('#'):",2457],["if sys.platform.startswith('win'):",3065],["if not name.startswith('_'):",950]],"useCount":399064},{"word":"state","context":[["'state': 'draft',",4785],["def state(self):",4942],["self.state = state",5367],["self.state = state",5367],["state:",5496],["if state:",5545],["def __setstate__(self, state):",8045],["return state",9781],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["state: present",3048]],"useCount":1212103},{"word":"static","context":[["# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.",5275],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# relative to this directory. They are copied after the builtin static files,",26167],["# The name of an image file (within the static path) to use as favicon of the",24060],["STATIC_URL = '/static/'",23640],["# List of finder classes that know how to find static files in",6046],["# Absolute path to the directory static files should be collected to.",5576],["# Additional locations of static files",5498],["# URL prefix for static files.",5435],["# Don't put anything in this directory yourself; store your static files",5292]],"useCount":491060},{"word":"staticmethod","context":[["@staticmethod",479080],["#    @staticmethod",284],["#     @staticmethod",327],["# @staticmethod",512],["render = staticmethod(_render)",529],["match = staticmethod(match)",614],["#@staticmethod",644],["get_xml_type = staticmethod(get_xml_type)",661],["@staticmethod # known case of __new__",2472],["factory = staticmethod(factory)",12344]],"useCount":516956},{"word":"stats","context":[["import scipy.stats as stats",1270],["stats = {",1288],["stats = []",1705],[">>> from scipy import stats",2097],["import scipy.stats",2238],["stats = {}",2576],["return stats",5544],["from scipy import stats",4074],["import scipy.stats as stats",1270],["def stats(self):",1245]],"useCount":293149},{"word":"status","context":[["status = 3",5460],["self.assertEqual(response.status, '200 OK')",6749],["status = 1",25766],["return status",11478],["if status:",9440],["self.status = status",9234],["self.assertEqual(response.status_code, status.HTTP_200_OK)",8247],["\"status\" : \"current\",",7293],["self.status = status",9234],["def status(self):",6896]],"useCount":1573662},{"word":"status_code","context":[["self.assertEqual(response.status_code, 200)",83327],["self.assertEqual(response.status_code, 302)",19450],["self.assertEqual(resp.status_code, 200)",17900],["self.assertEquals(response.status_code, 200)",11521],["self.assertEqual(response.status_code, 400)",10316],["self.assertEqual(response.status_code, 404)",9538],["assert response.status_code == 200",9205],["self.assertEqual(response.status_code, status.HTTP_200_OK)",8247],["assert_equal(res.status_code, 200)",7867],["eq_(response.status_code, 200)",12361]],"useCount":643045},{"word":"std","context":[["cls.add_instance_attribute('help', 'std::string', is_const=False)",2232],["[param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])",2406],["'std::string',",33603],["[param('std::ostream &', 'os')],",22052],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])",4771],["cls.add_instance_attribute('name', 'std::string', is_const=False)",3335],["[param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])",2802],["[param('std::string', 'name')],",2636],["[param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])",2406]],"useCount":274757},{"word":"stderr","context":[["stdout, stderr = p.communicate()",3220],["stdout=subprocess.PIPE, stderr=subprocess.PIPE)",2973],["if stderr:",3267],["stderr=subprocess.STDOUT)",3588],["stderr=subprocess.PIPE,",4476],["sys.stderr.write(",4840],["file=sys.stderr)",5464],["stderr=subprocess.PIPE)",7957],["sys.stderr.flush()",9893],["stderr=subprocess.STDOUT,",2630]],"useCount":409725},{"word":"stdout","context":[["stdout, stderr = p.communicate()",3220],["stdout=subprocess.PIPE, stderr=subprocess.PIPE)",2973],["sys.stdout.flush()",57015],["return stdout",2861],["stdout=subprocess.PIPE,",16190],["traceback.print_exc(file=sys.stdout)",5887],["stdout=subprocess.PIPE)",5142],["sys.stdout.write(\"\\n\")",3252],["result.stdout.fnmatch_lines([",4080],["sys.stdout.write('\\n')",4749]],"useCount":574181},{"word":"step","context":[["self.step = step",1216],["step = 1",2721],["def step(self):",2337],["step += 1",1915],["@step",1604],["step = 0",1520],["self.step = step",1216],["return step",771],["if step is None:",1126],["for step in steps:",1176]],"useCount":270386},{"word":"stop","context":[["stop = False",1533],["stop = True",1534],["self.server.stop()",1782],["def stop():",2007],["server.stop()",2707],["self.timer.stop()",2758],["self.addCleanup(patcher.stop)",2804],["reactor.stop()",4068],["self.stop()",15400],["def stop(self):",38844]],"useCount":355457},{"word":"storage","context":[["def __init__(self, storage):",824],["storage = StorageFactory().get_storage('dict_storage')",806],["from django.core.files.storage import default_storage as storage",849],["from django.core.files.storage import default_storage as storage",849],["storage.write_table(",988],["from django.core.files.storage import FileSystemStorage",1221],["from django.core.files.storage import default_storage",1325],["self.storage = storage",1534],["self.storage = storage",1534],["from gluon.storage import Storage",2534]],"useCount":239858},{"word":"store","context":[["self.store = store",1614],["store.sql(\"\"\"",1662],["store = {",2095],["self.stack.store()",2188],["self.app.memcache.store = {}",2361],["store={",4576],["# Don't put anything in this directory yourself; store your static files",5292],["action=\"store\",",6338],["action='store',",9809],["self.store = store",1614]],"useCount":383472},{"word":"str","context":[["type=str,",11503],["print str(e)",4837],["verbose : bool, str, int, or None",5083],["value = str(value)",5157],["return str(self)",5555],["return str(value)",5647],[":type: str",6286],[":type name: str",6783],["return str",9701],[":rtype: str",26003]],"useCount":2313274},{"word":"stream","context":[["stream.close()",4431],["[param('int64_t', 'stream')],",2619],["self.stream.close()",2409],["return stream",2302],["def __init__(self, stream):",2245],["stream.seek(0)",1851],["self.stream.flush()",1816],["[param('int64_t', 'stream')])",1776],["self.stream = stream",4169],["self.stream = stream",4169]],"useCount":420297},{"word":"string","context":[["import string",59137],["'std::string',",33603],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["return string",14958],["'type': 'string',",10261],[":rtype: string",8242],["@rtype: string",7623],["\"type\": \"string\",",7600],["# You can specify multiple suffix as a list of string:",5614],["type: string",8710]],"useCount":1886652},{"word":"strings","context":[["strings.",968],["# The *_INPUT_FORMATS strings use the Python strftime format syntax,",719],["# Documentation strings format",819],["return strings",846],["strings = []",1793],["# CRUD strings",2286],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# Add any Sphinx extension module names here, as strings. They can be",14319]],"useCount":254806},{"word":"strip","context":[["l = l.strip()",1804],["if line.strip():",1622],["text = text.strip()",1890],["data = data.strip()",2126],["s = s.strip()",2195],["if not line.strip():",2282],["name = name.strip()",2677],["\"\"\".strip()",3224],["value = value.strip()",4415],["line = line.strip()",26427]],"useCount":502116},{"word":"struct","context":[["except struct.error:",2530],["except struct.error as e:",2398],["buff.write(struct.pack('<I%ss'%length, length, _x))",1778],["from struct import unpack",1744],["from struct import pack",1665],["packed[1] = struct.pack(\"!H\", length)",1381],["from struct import pack, unpack",1370],["packed.append(struct.pack(\"!H\", self.type))",1370],["import struct",43205],["packed[2] = struct.pack(\"!H\", length)",1297]],"useCount":278098},{"word":"stubs","context":[["self.stubs.Set(fake_image._FakeImageService, 'show', self.fake_show)",2286],["stubs.stubout_session(self.stubs, stubs.FakeSessionForVMTests)",2298],["stubs.stubout_session(self.stubs, stubs.FakeSessionForVMTests)",2298],["self.stubs.Set(utils, 'execute', fake_execute)",1841],["self.stubs.Set(db, 'instance_get_by_uuid',",1788],["stubs.stubout_session(self.stubs, stubs.FakeSessionForVMTests)",2298],["self.stubs.Set(compute_api.API, 'get_all', fake_get_all)",2354],["_fake_network_info(self.stubs, 1),",2466],["network_info = _fake_network_info(self.stubs, 1)",2698],["self.stubs.Set(compute_api.API, 'create', create)",3121]],"useCount":215869},{"word":"style","context":[["# Add any paths that contain custom static files (such as style sheets) here,",26179],["</style>",6790],["<style>",3258],["<style type=\"text/css\">",2897],["\"<html><head><meta name=\\\"qrichtext\\\" content=\\\"1\\\" /><style type=\\\"text/css\\\">\\n\"",1474],["if style:",1429],["self.style = style",1383],["# The name of the Pygments (syntax highlighting) style to use.",27948],["return style",1215],["self.style = style",1383]],"useCount":423507},{"word":"sub","context":[["return sub",989],["data = re.sub(r\"\\n|\\r|\\t|\\s{2}|&nbsp;\",\"\",data)",755],["for sub in subs:",892],["sub = col.column()",878],["from re import sub",840],["return re.sub(",793],["if sub:",563],["sub = col.column(align=True)",638],["yield sub",698],["sub.save()",705]],"useCount":253083},{"word":"subject","context":[["subject=subject,",1751],["subject=subject,",1751],["self.subject = subject",1446],["self.subject = subject",1446],["subject,",1645],["# furnished to do so, subject to the following conditions:",24476],["# This Source Code Form is subject to the terms of the Mozilla Public",12942],["# subject to the following conditions:",2216],["# modify, copy, or redistribute it subject to the terms and conditions of",2884],["furnished to do so, subject to the following conditions:",7073]],"useCount":221435},{"word":"subnet","context":[["with self.port(subnet=subnet) as port:",1199],["s['subnet']['id'],",1304],["for subnet in subnets:",1621],["with self.subnet() as s:",1627],["subnet = self.subnets.first()",1919],["data = {'subnet': {'network_id': network['network']['id'],",2189],["with self.subnet() as subnet:",3168],["with self.subnet() as subnet:",3168],["subnet['subnet']['id'])",2498],["subnet['subnet']['id'])",2498]],"useCount":215633},{"word":"subprocess","context":[["import subprocess",124229],["stderr=subprocess.PIPE,",4476],["except subprocess.CalledProcessError as e:",4879],["stdout=subprocess.PIPE)",5142],["stdin=subprocess.PIPE,",5333],["except subprocess.CalledProcessError:",6603],["from subprocess import call",6707],["stderr=subprocess.PIPE)",7957],["from subprocess import Popen, PIPE",8272],["stdout=subprocess.PIPE,",16190]],"useCount":434897},{"word":"success","context":[["self.success = success",6283],["return result.success",5679],["return success",6209],["returned: success",5550],["if not success:",8954],["if success:",10720],["success = True",13089],["success = False",14831],["self.success = success",6283],["- success",5911]],"useCount":343803},{"word":"such","context":[["# Add any extra paths that contain custom files (such as robots.txt or",11812],["if err.find(\"No such process\") > 0:",474],["# 2. Altered source versions must be plainly marked as such, and must not be",577],["# git-archive tarball (such as those provided by githubs download-from-tag",695],["non-source form of such a combination shall include the source code for",796],["# Add any paths that contain custom static files (such as style sheets)",1149],["# TP is necessary for making temporal predictions, such as predicting",470],["# WARNING: This program as such is intended to be used by professional",1752],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# unit titles (such as .. function::).",27531]],"useCount":229842},{"word":"suffix","context":[["word = word[:-len(suffix)]",1111],["# The suffix of source filenames.",22248],["suffix = \"\"",956],["if suffix:",1671],["suffix = ''",2181],["# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").",2890],["# You can specify multiple suffix as a list of string:",5614],["# The suffix(es) of source filenames.",5725],["self.suffix = suffix",857],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956]],"useCount":194079},{"word":"sum","context":[["length = sum([len(x) for x in packed])",2764],["sum(",457],["print sum",460],["sum=0",476],["def sum(self):",560],["sum = 0.0",1064],["sum = 0",5185],["'n': sum(formula.values()),",1168],["aggregate='sum',",4501],["return sum",2068]],"useCount":224334},{"word":"super","context":[["# super, missing, help",2787],["super().__init__(parent, invokingState)",1365],["first_name='Super', last_name='User', email='super@example.com',",1447],["last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',",1452],["super().__init__()",15059],["super().__init__(*args, **kwargs)",4944],["self.client.login(username='super', password='secret')",4771],["super().setUp()",4022],["super().__init__(parent)",3745],["super().__init__(**kwargs)",1622]],"useCount":712751},{"word":"support","context":[["# with support of Ghent University (http://ugent.be/hpc),",3079],["from test import support",3921],["from selenium.webdriver.support.ui import WebDriverWait",1503],["support.gc_collect()",1512],["# Specify the Python versions you support here. In particular, ensure",1514],["# that you indicate whether you support Python 2, Python 3 or both.",1519],["\"\"\"This class does not support CRUD Operations please use parent.",1612],["if support.verbose:",2206],["# A dictionary with options for the search language support, empty by default.",5913],["# \"scripts\" keyword. Entry points provide cross-platform support and allow",1107]],"useCount":311753},{"word":"supported","context":[["# is not supported by the underlying hypervisor being",945],["# for a list of supported languages.",26482],["supported.",954],["print \"Command not found or not supported\"",735],["# NOTE(vish): if with_lockmode isn't supported, as in sqlite,",616],["@pytest.mark.supported(",608],["# image: all image fields are base64 encoded and PIL-supported",486],["def supported(self):",402],["# Ordered list of supported formats",371],["[param('bool', 'supported')])",360]],"useCount":196046},{"word":"sure","context":[["# make sure user is authed",568],["# make sure the view removes test cookie",472],["# Make sure start and stop can be called without throwing exceptions",609],["# Make sure the async call finishes",628],["# Make sure the correct choice is selected",800],["# Make sure djangosecure.middleware.SecurityMiddleware is listed first",837],["# Make sure to use a trailing slash.",984],["# Make sure the correct queryset is returned",984],["# URL that handles the media served from MEDIA_ROOT. Make sure to use a",7203],["# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a",1742]],"useCount":278448},{"word":"sympy","context":[[">>> from sympy.abc import x",9964],["from sympy.utilities.pytest import raises",1117],[">>> from sympy import Matrix",1273],[">>> from sympy import Symbol",1386],["import sympy",1431],[">>> from sympy.abc import x, y, z",1569],[">>> from sympy import symbols",1871],[">>> from sympy.polys.domains import ZZ",2154],[">>> from sympy import Poly",4034],[">>> from sympy.abc import x, y",6461]],"useCount":237627},{"word":"sys","context":[["sys.exit(-1)",21435],["sys.exit(1)",210632],["import os, sys",18842],["sys.exit(0)",72080],["sys.exit()",66854],["sys.stdout.flush()",57015],["sys.exit(2)",29520],["import sys, os",25944],["# add these directories to sys.path here. If the directory is relative to the",24896],["import sys",791260]],"useCount":3051976},{"word":"system","context":[["if platform.system() == \"Windows\":",1636],["# If true, keep warnings as \"system message\" paragraphs in the built documents.",13596],["time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)",1818],["os.system('clear')",2293],["# timezone as the operating system.",2775],["if platform.system() == 'Windows':",3175],["os.system(command)",3459],["# In a Windows environment this must be set to your system time zone.",3640],["# system time zone.",4182],["os.system(cmd)",7448]],"useCount":436783},{"word":"t","context":[["if t:",4593],["# Don't put anything in this directory yourself; store your static files",5292],["t = time.time()",7061],["# Make this unique, and don't share it with anybody.",7163],["t.join()",7356],["# Don't forget to use absolute paths, not relative paths.",10569],["for t in threads:",4543],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["t.start()",20493],["return t",24916]],"useCount":2820875},{"word":"table","context":[["for table in tables:",3646],["<table class=\"bibcirctable\">",5950],["</table>",22545],["return table",5751],["table = item.table",2670],["table = item.table",2670],["self.table = table",3434],["self.table = table",3434],["<table>",5145],["# The depth of the table of contents in toc.ncx.",3484]],"useCount":916922},{"word":"tag","context":[["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["for tag in tags:",7083],["self.tag = tag",3071],["<datafield tag=\"100\" ind1=\" \" ind2=\" \">",3230],["return tag",3778],["if tag:",4078],["[param('ns3::Tag &', 'tag')],",4745],["@register.tag",5385],["<datafield tag=\"999\" ind1=\"C\" ind2=\"5\">",5654],["# contain a <link> tag referring to it.  The value of this option must be the",25748]],"useCount":814938},{"word":"tags","context":[["# The full version, including alpha/beta/rc tags.",26558],["tags = {}",1484],["self.tags = tags",1642],["self.tags = tags",1642],["if not tags:",1850],["tags:",2041],["return tags",3365],["if tags:",3586],["tags = []",5187],["for tag in tags:",7083]],"useCount":383323},{"word":"target","context":[["if target is None:",3396],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title,",11864],["return target",6602],["self.target = target",5345],["self.target = target",5345],["for target in targets:",4272],["if not target:",3796],["'target': 'new',",3269],["# (source start file, target name, title, author,",21198]],"useCount":818368},{"word":"task","context":[["return task",4279],["for task in tasks:",4219],["shared=False) as task:",3224],["with task_manager.acquire(self.context, self.node.uuid) as task:",1970],["@task()",1928],["if task:",1874],["task.save()",1707],["self.task = task",1468],["self.task = task",1468],["@task",33708]],"useCount":509222},{"word":"td","context":[["<td>%s</td>",8770],["<td>%s</td>",8770],["<td class=\"bibcirccontent\">%s</td>",2419],["<td class=\"bibcirccontent\">%s</td>",2419],["</td>",35952],["<td nowrap align=\"right\" class=\"   RegularFS BlackFC   \">",2112],["<td></td>",1347],["<td></td>",1347],["<td class=\"bibcirctableheader\">%s</td>",1292],["<td>",11233]],"useCount":309563},{"word":"tearDown","context":[["def tearDown(cls):",379],["def tearDown(self):",151302],["self.tearDown()",1683],["testing.tearDown()",1479],["def tearDown (self):",1466],["def tearDown(self):  # pylint: disable=invalid-name",890],["unittest.TestCase.tearDown(self)",774],["super().tearDown()",718],["def tearDown( self ):",488],["def tearDown():",390]],"useCount":185179},{"word":"tempfile","context":[["import tempfile",80853],["tmp_dir = tempfile.mkdtemp()",1131],["self.tmpdir = tempfile.mkdtemp()",1180],["temp_dir = tempfile.mkdtemp()",1291],["self.tempdir = tempfile.mkdtemp()",1487],["tempdir = tempfile.mkdtemp()",1814],["from tempfile import mkstemp",2471],["tmpdir = tempfile.mkdtemp()",2769],["from tempfile import NamedTemporaryFile",3461],["from tempfile import mkdtemp",3827]],"useCount":192350},{"word":"template","context":[["# template names.",25883],["from django import template",15462],["from django.template import RequestContext",13788],["register = template.Library()",13778],["'BACKEND': 'django.template.backends.django.DjangoTemplates',",10823],["'django.template.loaders.filesystem.Loader',",10658],["'django.template.loaders.app_directories.Loader',",10570],["'django.template.context_processors.debug',",9474],["# Custom sidebar templates, maps document names to template names.",27115],["'django.template.context_processors.request',",9255]],"useCount":738352},{"word":"templates","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["for template in templates:",1101],["# Additional templates that should be rendered to pages, maps page names",1135],["templates = Vector()",2117],["mobileTemplate.setTemplates(templates)",2117],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# List of callables that know how to import templates from various sources.",7775],["# Additional templates that should be rendered to pages, maps page names to",25900],["# Custom sidebar templates, maps document names to template names.",27115],["os.path.join(BASE_DIR, 'templates'),",1022]],"useCount":216587},{"word":"tenant_id","context":[["'tenant_id': tenant_id,",1172],["tenant_id = _uuid()",1206],["'tenant_id': network['network']['tenant_id'],",1250],["'tenant_id': network['network']['tenant_id'],",1250],["tenant_id=tenant_id)",1262],["tenant_id=tenant_id)",1262],["tenant_id=self._tenant_id,",1361],["tenant_id=self.tenant.id,",1517],["tenant_id=tenant_id,",2030],["tenant_id=tenant_id,",2030]],"useCount":192661},{"word":"test","context":[["from django.test import TestCase",35866],["def test():",17648],["for test in tests:",4689],["from tempest import test",4714],["assert_equal(test, control)",4837],["@test.attr(type='smoke')",6523],["from django.test.utils import override_settings",8785],["test()",9570],["from nova import test",10040],["def test(self):",16888]],"useCount":2030236},{"word":"testing","context":[["testing.tearDown()",1479],["from numpy.testing import assert_array_equal",1488],["from pyramid import testing",1575],["self.assert_sql_count(testing.db, go, 1)",1958],["@testing.resolve_artifact_names",2245],["__status__  = \"testing\"",2319],["@testing.requires_testing_data",2343],["@testing.provide_metadata",2406],["np.testing.assert_almost_equal(",2408],["request = testing.DummyRequest()",4059]],"useCount":275608},{"word":"tests","context":[["tests = []",3293],["from neutron.tests import base",3164],["return tests",2851],["from xmodule.modulestore.tests.django_utils import ModuleStoreTestCase",2608],["from nova.tests.api.openstack import fakes",1963],["from xmodule.modulestore.tests.factories import CourseFactory",1927],["from student.tests.factories import UserFactory",1665],["tests = [",4582],["test_suite='tests',",3503],["for test in tests:",4689]],"useCount":641571},{"word":"text","context":[["def _translate(context, text, disambig):",7513],["return text",35848],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["self.text = text",10807],["self.text = text",10807],["if text:",10330],["# Language to be used for generating the HTML full-text search index.",5923],["text = \"\"",5756]],"useCount":2048534},{"word":"tf","context":[["sess = tf.Session()",1056],["tf.initialize_all_variables().run()",4488],["with tf.Graph().as_default():",3685],["tf.test.main()",3217],["with tf.Session() as sess:",1799],["sess.run(tf.initialize_all_variables())",1534],["tf.close()",1396],["sess.run(tf.initialize_local_variables())",1281],["tf.global_variables_initializer().run()",1076],["import tensorflow as tf",8257]],"useCount":329166},{"word":"than","context":[["smaller than ``tol``, the optimization code checks the",432],["raise FeeError(\"Rejecting no-fee transaction, larger than 1000 bytes\")",443],["control -- which is a much better idea than hard coding specific",450],["all leaves are pure or until all leaves contain less than",476],["# the code used other than OpenSSL. If you modify file(s) with this",491],["# README file and 2) it's easier to type in the README file than to put a raw",585],["than) the specified ID. There are limits to the number of",601],["Returns results with an ID greater than (that is, more recent",601],["#    the code used other than OpenSSL. If you modify file(s) with this",804],["# Encode with UTF-8 rather than TransanaGlobal.encoding because this is a prompt, not DB Data.",880]],"useCount":340996},{"word":"that","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# List of callables that know how to import templates from various sources.",7775],[":param dict custom_headers: headers that will be added to the request",8074],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# List of patterns, relative to source directory, that match files and",24527],["# Note that not all possible configuration values are present in this",25557],["# All configuration values have a default; values that are commented out",25768],["# Additional templates that should be rendered to pages, maps page names to",25900],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Add any paths that contain custom static files (such as style sheets) here,",26179]],"useCount":3049828},{"word":"the","context":[["# If true, links to the reST sources are added to the pages.",26301],["# If true, links to the reST sources are added to the pages.",26301],["# Additional stuff for the LaTeX preamble.",26731],["# If true, the index is split into individual pages for each letter.",26818],["# Else, today_fmt is used as the format for a strftime call.",26971],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# General information about the project.",27441],["# Grouping the document tree into LaTeX files. List of tuples",27516],["# If true, the current module name will be prepended to all description",27546],["# The name of the Pygments (syntax highlighting) style to use.",27948]],"useCount":20831947},{"word":"them","context":[["# Virtual event handlers, overide them in your derived class",475],["\"actions on them. No items have been changed.\")",407],["# or saved.  Do not modify them directly here.",453],["# methods. The assistant buffers its checks, so that running them again",463],["# Filter them out",471],["Most of them are same to the on-wire counterparts but in host byte order.",534],["# decision by deleting the provisions above and replace them with the notice",642],["# them.",795],["# installed, specify them here.  If using Python 2.6 or less, then these",964],["them.",1609]],"useCount":235161},{"word":"then","context":[["# non-false value, then it is used:",25813],["# set this to 60 seconds and then to 518400 when you can prove it works",652],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# then",1903],["# some non-false value, then it is used:",1144],["# For \"manual\" documents, if this is true, then toplevel headings",1126],["# Locate the client library. If module was installed via \"setup.py\" script, then",1115],["then",1073],["# installed, specify them here.  If using Python 2.6 or less, then these",964],["#    statement from all source files in the program, then also delete it here.",796]],"useCount":517163},{"word":"there","context":[["# If there are data files included in your packages that need to be",1008],["# trailing slash if there is a path component (optional in other cases).",1882],["# Either we're using git < 1.8.3, or there really are no tags. We use",776],["# These are the compilation flags that will be used in case there's no",685],["# __file__, we can work backwards from there to the root. Some",648],["# there.",581],["# no suitable tags, so version is \"0+unknown\", but full hex is still there",531],["# there are more, the weaker ones are suppressed)",471],["# It's ok if you do not complete all the functions, and there",470],["@throws SampleException If there is a problem with sample creation",434]],"useCount":373273},{"word":"these","context":[["# Usually you set \"language\" from the command line for these cases.",5937],["# Type of model that the rest of these parameters apply to.",471],["# You can replace these methods by re-implementing the following class",522],["# Calls to the methods in these classes are generated by generateDS.py.",522],["# dependencies). You can install these using the following syntax,",602],["# if you do not set these you will be prompted for a password for every command",735],["# the code embedded in _version.py can just fetch the value of these",829],["# installed, specify them here.  If using Python 2.6 or less, then these",964],["# directory, add these directories to sys.path here. If the directory is",1146],["# add these directories to sys.path here. If the directory is relative to the",24896]],"useCount":230367},{"word":"they","context":[["# that aren't pickleable (module imports are okay, they're removed automatically).",775],["# setup.py/versioneer.py will grep for the variable names, so they must",451],["pass # Keep asking for passphrase until they get it right",443],["# then they will be staged into the new directory.  Otherwise, default config",347],["# objects in a dialog box so that users can navigate more quickly than they",304],["methods in 2.x after that point should be done such that they can",294],["# Wait on greenthreads to assert they didn't raise exceptions",290],["# they get used",284],["# if we had a value already and this value is different then they're not all the same",267],["# If true, `todo` and `todoList` produce output, else they produce nothing.",5776]],"useCount":250284},{"word":"this","context":[["# relative to this directory. They are copied after the builtin static files,",26167],["# The name of an image file (relative to this directory) to place at the top",25393],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# The name of an image file (relative to this directory) to place at the top of",25468],["# Note that not all possible configuration values are present in this",25557],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["For more information on this file, see",25647],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Add any paths that contain templates here, relative to this directory.",27409]],"useCount":3149048},{"word":"thread","context":[["self.thread = None",1457],["self.thread.join()",1313],["_inherit = ['mail.thread']",1810],["thread.daemon = True",1857],["returns the request thread.",2901],["self.thread.start()",3272],["for thread in threads:",3678],["thread.join()",4146],["import thread",6649],["thread.start()",10303]],"useCount":232263},{"word":"threading","context":[["threading.Thread.__init__(self)",15322],["import threading",73672],["from threading import Thread",12960],["self.lock = threading.Lock()",3596],["from threading import Lock",3331],["self._lock = threading.Lock()",2421],["lock = threading.Lock()",1621],["from threading import Timer",1619],["self.lock = threading.RLock()",1313],["from threading import RLock",1270]],"useCount":215773},{"word":"time","context":[["time.sleep(1)",72019],["start = time.time()",25714],["time.sleep(0.1)",26869],["import time",349792],["start_time = time.time()",19537],["start_time = time.time()",19537],["time.sleep(5)",20009],["from time import sleep",21501],["time.sleep(2)",23157],["start = time.time()",25714]],"useCount":2260952},{"word":"timeout","context":[["if timeout is None:",4396],["self.timeout = timeout",9718],["except socket.timeout:",6295],["if timeout is not None:",3991],["if timeout:",3431],["timeout=timeout,",2711],["timeout=timeout,",2711],["timeout=timeout)",2573],["timeout=timeout)",2573],["self.timeout = timeout",9718]],"useCount":498714},{"word":"timestamp","context":[["self.timestamp = timestamp",2785],["'timestamp': timestamp,",1409],["self.timestamp = timestamp",2785],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["return timestamp",1437],["headers={'X-Timestamp': timestamp,",1549],["timestamp = time.time()",1555],["timestamp = normalize_timestamp(time())",1876],["if timestamp is None:",2130],["if timestamp:",2176]],"useCount":273806},{"word":"title","context":[["self.title = title",10508],["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["# the title page.",25469],["# (source start file, target name, title, author,",21198],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title,",11864],["return self.title",10653],["self.title = title",10508],["'title': title,",7765],["'title': title,",7765]],"useCount":1164647},{"word":"tmp","context":[["if tmp:",2396],["return tmp",5476],["tmp = []",4523],["table.append(tmp)",820],["if tmp is not None:",892],["tmp = None",1015],["'/tmp/fatturapa_v1.1.xsd',",1032],["tmp.close()",1540],["tmp = {}",1716],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223]],"useCount":241790},{"word":"to","context":[["# Documents to append as an appendix to all manuals.",47775],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# Custom sidebar templates, maps document names to template names.",27115],["# Add any paths that contain templates here, relative to this directory.",27409],["# If true, the current module name will be prepended to all description",27546],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# Documents to append as an appendix to all manuals.",47775]],"useCount":11530875},{"word":"token","context":[["return token",10441],["if not token:",2831],["token = self.token()",3588],["token = self.token()",3588],["for token in tokens:",3793],["self.token = token",4037],["self.token = token",4037],["if token:",4547],["token=self.token)",6087],["token=self.token)",6087]],"useCount":659138},{"word":"tokens","context":[["tokens = {",6352],["self.head('/auth/tokens',",1651],["tokens = []",3113],["for token in tokens:",3793],["self.tokens = tokens",920],["if not tokens:",970],["self.tokens = []",1322],["for t in tokens:",1397],["tokens = line.split()",1864],["return tokens",2900]],"useCount":185333},{"word":"tools","context":[["from nose.tools import assert_equal",1938],["from nose.tools import eq_, ok_",2218],["from nose.tools import raises",2059],["from nose.tools import assert_raises",2261],["# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT",2575],["@cherrypy.tools.json_out()",2633],["from openerp import tools",3877],["from nose.tools import *",5056],["from nose.tools import eq_",5376],["from openerp.tools.translate import _",13558]],"useCount":254964},{"word":"top","context":[["return top",2342],["def top(self):",1330],["# top of the sidebar.",1137],["# the top of the title page.",1134],["self.top = top",824],["self.top = top",824],["# The name of an image file (relative to this directory) to place at the top of",25468],["if top:",821],["# The name of an image file (relative to this directory) to place at the top",25393],["from top.api.base import RestApi",816]],"useCount":283682},{"word":"total","context":[["total += 1",3286],["return total",6074],["total = 0.0",3063],["def total(self):",1400],["if total:",1214],["if total == 0:",1170],["progress.setPercentage(int(current * total))",1144],["total = 0",15091],["self.total = total",948],["self.total = total",948]],"useCount":245614},{"word":"tr","context":[["'description': tr(",906],["<tr>",51977],["</tr>",58563],["#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",3085],["<tr align=\"center\">",2235],["self.tr(",1505],["#   'nl', 'no', 'pt', 'ro', 'r', 'sv', 'tr'",1480],["</td></tr>",911],["return tr",856],["from safe.utilities.i18n import tr",777]],"useCount":303387},{"word":"traceback","context":[["traceback.print_exc()",36303],["def __exit__(self, type, value, traceback):",6172],["traceback.print_exc(file=sys.stdout)",5887],["def __exit__(self, exc_type, exc_value, traceback):",5309],["print traceback.format_exc()",3092],["logger.error(traceback.format_exc())",2044],["print(traceback.format_exc())",1828],["tb = traceback.format_exc()",1729],["traceback.format_exc())",1500],["import traceback",80424]],"useCount":271924},{"word":"translation","context":[["from django.utils.translation import ugettext_lazy as _",45041],["with translation.override('nl'):",1214],["from django.utils.translation import ugettext, ugettext_lazy as _",1185],["from django.utils.translation import get_language",1154],["from django.utils.translation import ugettext",1471],["_ = glocale.translation.gettext",1621],["with translation.override('de'):",1696],["from django.utils import translation",3794],["# This is also used if you do content translation via gettext catalogs.",5941],["from django.utils.translation import ugettext as _",20455]],"useCount":190912},{"word":"tree","context":[["self.tree = None",1642],["# Grouping the document tree into Texinfo files. List of tuples",21017],["return tree",6922],["root = tree.getroot()",4788],["tree = etree.fromstring(xml)",1994],["retval.tree = root_0",1624],["tree = conf.format_dom()",1579],["Note: this parameter is tree-specific.",1548],["'view_mode': 'tree,form',",1475],["# Grouping the document tree into LaTeX files. List of tuples",27516]],"useCount":363375},{"word":"true","context":[["# If true, the current module name will be prepended to all description",27546],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# If true, the index is split into individual pages for each letter.",26818],["# If true, links to the reST sources are added to the pages.",26301],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# If true, show URL addresses after external links.",44800],["# If true, show page references after internal links.",23896]],"useCount":707530},{"word":"try","context":[["#        try:",2780],["#    try:",2865],["#         try:",2375],[">>> try:",3086],["#     try:",3273],["# try:",7001],["try: self.this.append(this)",9720],["#try:",11101],["try :",69372],["try:",5448017]],"useCount":5787311},{"word":"tuple","context":[["elif isinstance(value, (list, tuple)):",1019],[":rtype: tuple",4628],["tuple",1090],["return tuple(nodelist)",1471],["if isinstance(value, tuple):",1566],["@rtype: tuple",1662],["return tuple(result)",1667],["if isinstance(value, (list, tuple)):",1913],["# A tuple containing the cover image and cover page html template filenames.",3089],["return tuple([sparse.get(i, default) for i in xrange(0, 1+maxtag)])",3631]],"useCount":502307},{"word":"two","context":[["# There are two options for replacing |today|: either, you set today to some",25812],["'password_mismatch': _(\"The two password fields didn't match.\"),",433],["their first two arguments.",448],["['<Item: one>', '<Item: two>']",448],["#two Decimals",468],["status='option two',",561],["# DisplayCommandBase.take_action() returns two tuples",988],["# the following two lines are not needed.",1115],["# There are two options for replacing |today|: either, you set today to",1144],["# Uncomment the next two lines to enable the admin:",4215]],"useCount":311397},{"word":"txt","context":[["source_suffix = '.txt'",651],["print txt",722],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["return txt",5763],["txt = \"\"",1094],["\"path\": \"/etc/banner.txt\",",937],["if txt:",929],["txt = ''",828],["long_description=open('README.txt').read(),",770],["with open('requirements.txt') as f:",760]],"useCount":261562},{"word":"type","context":[["self.type = type",13072],["self.type = type",13072],["\"type\": \"string\",",7600],["__metaclass__ = type",8357],["'type': 'object',",8450],["type: string",8710],["'type': 'string',",10261],["type=str,",11503],["type=int,",11942],["type=None),",29582]],"useCount":4219633},{"word":"types","context":[["import types",27614],["types = []",2263],["for type in self.types:",1864],["for type in types:",1711],["return types",1555],["types = {",1424],["for t in types:",1414],["from types import *",2305],["types.",1213],["sqlalchemy.types.VARCHAR)",1196]],"useCount":373018},{"word":"u","context":[["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["u(\"\"\"\\",10672],["u'contenttypes.contenttype': {",10671],["u'auth.group': {",9992],["u'auth.user': {",7648],["return u''",6656],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["u\"\"\"",5228]],"useCount":2816832},{"word":"uid","context":[["def write(self, cr, uid, ids, vals, context=None):",5277],["def unlink(self, cr, uid, ids, context=None):",5248],["def create(self, cr, uid, vals, context=None):",4588],["uid = getUid(req)",4186],["for line in self.browse(cr, uid, ids, context=context):",4037],["def name_get(self, cr, uid, ids, context=None):",3918],["def copy(self, cr, uid, id, default=None, context=None):",3188],["uid=uid,",3725],["uid=uid,",3725],["for move in self.browse(cr, uid, ids, context=context):",3875]],"useCount":978061},{"word":"uint32_t","context":[["[param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')],",2846],["'uint32_t',",132426],["[param('uint32_t', 'i')],",13131],["[param('uint32_t', 'interface')],",5639],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["[param('uint32_t', 'data')])",3925],["[param('uint32_t', 'end')])",3800],["[param('uint32_t', 'size')])",2997],["[param('uint32_t', 'start')])",2851],["[param('uint32_t', 'index')],",2406]],"useCount":456666},{"word":"uint8_t","context":[["[param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])",2090],["[param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])",2090],["[param('uint8_t const *', 'buf')],",2092],["[param('uint8_t *', 'buffer')],",2229],["[param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')],",2846],["target_component          : Component ID (uint8_t)",3940],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["[param('uint8_t *', 'buf')],",4184],["target_system             : System ID (uint8_t)",4232],["'uint8_t',",31198]],"useCount":208359},{"word":"unicode","context":[["if python3 or type(_x) == unicode:",1652],["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["has_default_value=False, default_value=unicode(\"\", \"utf-8\"),",7269],["unicode = str",3996],["if isinstance(value, unicode):",3003],["unicode",2390],["if isinstance(s, unicode):",2323],[":rtype: unicode",2236],["return unicode(value)",1912],["\"course_id\": unicode(self.course.id),",1433]],"useCount":378718},{"word":"unicode_literals","context":[["from __future__ import absolute_import, unicode_literals",13263],["print_function, unicode_literals)",2386],["from __future__ import unicode_literals",196429],["from __future__ import absolute_import, division, print_function, unicode_literals",5790],["unicode_literals, with_statement)",5730],["unicode_literals)",5016],["from __future__ import print_function, unicode_literals",4000],["from __future__ import absolute_import, print_function, unicode_literals",3461],["from __future__ import unicode_literals, division, absolute_import",3278],["from __future__ import (unicode_literals, division, absolute_import,",2759]],"useCount":270143},{"word":"unique","context":[["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),",24733],["'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})",22044],["# Make this unique, and don't share it with anybody.",7163],["# A unique identification for the text.",3486],["# The unique identifier of the text. This can be a ISBN number",3412],["unique=True,",2903],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),",2861],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),",2384],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),",1996],["unique=True)",1656]],"useCount":336364},{"word":"unit","context":[["for unit in units:",1031],["# unit titles (such as .. function::).",27531],["self.unit = unit",1202],["self.unit = unit",1202],["UI = SM.GetUnitInterface(unit.unitName)",1238],["unit = SM.GetDefaultUnit()",1240],["from tests.unit import test",1250],["from nova.tests.unit.api.openstack import fakes",1289],["[param('ns3::Time::Unit', 'unit')],",1431],["from nova.tests.unit import fake_instance",1486]],"useCount":301413},{"word":"unittest","context":[["from unittest import TestCase",18481],["suite = unittest.TestSuite()",9277],["import unittest2 as unittest",8509],["from twisted.trial import unittest",5547],["from unittest import mock",4197],["loader = unittest.TestLoader()",4093],["class Test(unittest.TestCase):",4038],["unittest.TextTestRunner(verbosity=2).run(suite)",3925],["import unittest",234895],["unittest.main()",106260]],"useCount":719190},{"word":"up","context":[["\"up\": self.up,",707],["# Clean up.",694],["Whether to use a precomputed Gram matrix to speed up",695],["\"up\": self.up,",707],["'state': 'up',",830],["# Set up logging",842],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["def up(self):",2304],["# Clean up",1885],["# clean up",2260]],"useCount":471851},{"word":"update","context":[["data.update({",2662],["whereMap.update(global_props)",2796],["kwargs.update({",2876],["if update:",4363],["pygame.display.update()",5775],["context.update({",7313],["header_parameters.update(custom_headers)",8073],["defaults.update(kwargs)",8704],["self.update()",22346],["def update(self):",24271]],"useCount":1123822},{"word":"updated","context":[["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["# If not '', a 'Last updated on:' timestamp is inserted at every page",1148],["'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),",2953],["'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})",2714],["updated = True",2389],["updated = False",1797],["if updated:",1661],["# If not None, a 'Last updated on:' timestamp is inserted at every page",1350],["return updated",1328],["'updated': ('django.db.models.fields.DateField', [], {'auto_now': 'True', 'blank': 'True'}),",1323]],"useCount":259319},{"word":"uri","context":[["uri,",934],["def uri(self):",952],["\"type\": \"uri\"",960],["def __init__(self, uri):",983],["(response, content) = self.http.request(uri, \"GET\")",1087],["if uri:",1409],["# A sequence of (type, uri, title) tuples for the guide element of content.opf.",2086],["return uri",2915],["self.uri = uri",3400],["self.uri = uri",3400]],"useCount":201219},{"word":"url","context":[["from django.conf.urls import patterns, url",12368],["return url",25146],["response = self.client.get(url)",23349],["url(",17896],["from django.conf.urls import patterns, include, url",15417],["self.url = url",15029],["self.url = url",15029],["url(r'^admin/', include(admin.site.urls)),",14085],["from django.conf.urls import url",13016],["url,",11063]],"useCount":2145173},{"word":"urllib","context":[["from urllib import urlencode",7147],["from urllib import urlopen",1762],["import urllib.request",5485],["import urllib.parse",4151],["from urllib.request import urlopen",3974],["from urllib.parse import urlparse",3116],["from urllib import quote",2731],["from urllib.parse import urlencode",2301],["from six.moves import urllib",2122],["import urllib",58524]],"useCount":256934},{"word":"urllib2","context":[["response = urllib2.urlopen(req)",6639],["except urllib2.URLError:",2004],["except urllib2.HTTPError as e:",2274],["import urllib2",42150],["response = urllib2.urlopen(request)",2384],["urllib2.install_opener(opener)",3084],["from urllib2 import urlopen",3747],["req = urllib2.Request(url)",3933],["except urllib2.URLError, e:",4082],["except urllib2.HTTPError, e:",5030]],"useCount":184039},{"word":"urls","context":[["for url in urls:",5750],["urls = []",3228],["# url(r'^blog/', include('blog.urls')),",3940],["from django.conf.urls.static import static",4736],["from django.conf.urls.defaults import *",7132],["from django.conf.urls import include, url",8033],["from django.conf.urls import patterns, url",12368],["from django.conf.urls import url",13016],["url(r'^admin/', include(admin.site.urls)),",14085],["from django.conf.urls import patterns, include, url",15417]],"useCount":269416},{"word":"usage","context":[["Example usage:",5140],["def usage():",10547],["usage:",3002],["usage()",21881],["Example usage::",2648],["parser = OptionParser(usage=usage)",2423],["parser = OptionParser(usage=usage)",2423],["usage = '''\\",1413],["help = usage + '''\\",1370],["print usage",1881]],"useCount":289910},{"word":"use","context":[["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# The name of an image file (within the static path) to use as favicon of the",24060],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20368],["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["# Don't forget to use absolute paths, not relative paths.",10569],["# Always use forward slashes, even on Windows.",10539],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# Redistribution and use in source and binary forms, with or without",44287]],"useCount":1296361},{"word":"used","context":[["# Language to be used for generating the HTML full-text search index.",5923],["# This is also used if you do content translation via gettext catalogs.",5941],["# revision identifiers, used by Alembic.",11527],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["# The reST default role (used for this markup: `text`) to use for all",13427],["# SECURITY WARNING: keep the secret key used in production secret!",13453],["# |version| and |release|, also used in various other places throughout the",25310],["# non-false value, then it is used:",25813],["# Else, today_fmt is used as the format for a strftime call.",26971],["# If true, SmartyPants will be used to convert quotes and dashes to",27023]],"useCount":1160660},{"word":"user","context":[["return user",18319],["user.save()",22233],["'auth.user': {",14377],["user=user,",10281],["user=user,",10281],["if request.user.is_authenticated():",10343],["self.user = user",10766],["self.user = user",10766],["if not user:",13411],["if user:",15814]],"useCount":2725652},{"word":"user_id","context":[["user_id,",2374],["if user_id:",4345],["self.user_id = 'fake'",2212],["user_id=user_id)",2080],["user_id=user_id)",2080],["self.user_id = user_id",1949],["user_id=user_id,",1926],["user_id=user_id,",1926],["user_id=self.user['id'],",1782],["self.user_id = user_id",1949]],"useCount":415742},{"word":"username","context":[["'username': username,",3373],["'username': username,",3373],["if not username:",3409],["if username:",3582],["username=username,",3662],["username=username,",3662],["self.client.login(username='super', password='secret')",4771],["self.username = username",9117],["self.username = username",9117],["'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})",22044]],"useCount":769467},{"word":"users","context":[["fixtures = ['admin-views-users.xml']",2364],["__tablename__ = 'users'",2305],["users = [",2072],["mapper(User, users)",2020],["return users",2613],["user = users.get_current_user()",2897],["users = []",3781],["from google.appengine.api import users",4020],["for user in users:",6860],["mapper(User, users, properties={",1872]],"useCount":394471},{"word":"using","context":[["unpack serialized message in str into this message instance using numpy for array types",1096],["# When using The Virtual Brain for scientific publications, please cite it as follows:",1099],["dive = Book.objects.using('other').create(title=\"Dive into Python\",",1103],["# Fix unsupported image types using the PIL.",1109],["# If true, \"Created using Sphinx\" is shown in the HTML footer.",1128],["# for small screen space, using the same theme for HTML and epub output is",1445],["# bottom, using the given strftime format.",2499],["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["user.save(using=self._db)",1088],["# using the given strftime format.",24593]],"useCount":622930},{"word":"usr","context":[["#!/usr/bin/python",166810],["#! /usr/bin/env python3",3419],["#!/usr/bin/python2",4200],["#!/usr/bin/env python2.7",5347],["#! /usr/bin/python",8559],["#!/usr/bin/python3",14457],["#!/usr/bin/env python2",17558],["#! /usr/bin/env python",36357],["#!/usr/bin/env python3",50325],["#!/usr/bin/env python",502842]],"useCount":930732},{"word":"utf","context":[["has_default_value=False, default_value=_b(\"\").decode('utf-8'),",9915],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["#-*- coding: utf-8 -*-",10232],["# -*- coding:utf-8 -*-",14143],["#source_encoding = 'utf-8-sig'",21197],["# coding=utf-8",45684],["# encoding: utf-8",45989],["# coding: utf-8",46132],["# -*- coding: utf-8 -*-",857663],["# -*- encoding: utf-8 -*-",38408]],"useCount":1496263},{"word":"util","context":[["@util.export",1378],["@util.memoized_property",4401],["from util import *",3873],["from java.util import Vector",2543],["from . import util",2417],["from nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util",2241],["from telemetry.core import util",1891],["from .. import util",1725],["from test_framework.util import *",1599],["import util",8331]],"useCount":354606},{"word":"utils","context":[["from django.test.utils import override_settings",8785],["from south.utils import datetime_utils as datetime",10836],["from django.utils.translation import ugettext_lazy as _",45041],["from django.utils.translation import ugettext as _",20455],["from django.utils import timezone",19897],["import utils",14823],["from django.utils import six",14126],["sequence.append(utils.StartRecordingAction())",13281],["sequence.append(utils.AssertPresentationAction(",13276],["from django.utils.safestring import mark_safe",11411]],"useCount":1250589},{"word":"uuid","context":[["with task_manager.acquire(self.context, self.node.uuid,",3844],["db.instance_destroy(self.context, instance['uuid'])",2364],["'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'blank': 'True'})",2420],["instance['uuid'])",2795],["'name': uuid.uuid4().hex,",2798],["header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())",3305],["instance_uuid = instance['uuid']",3508],["uuid = self._post_server()",3684],["from uuid import uuid4",7581],["import uuid",48744]],"useCount":709049},{"word":"v","context":[["# \"<project> v<release> documentation\".",25615],["return v",23613],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["if v:",7779],["if v is None:",6598],["if v is not None:",5646],["setattr(self, k, v)",5567],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376]],"useCount":1357270},{"word":"v2","context":[["req = fakes.HTTPRequest.blank('/v2/fake/servers/1/action')",1039],["from south.v2 import SchemaMigration",36948],["from south.v2 import DataMigration",3093],["from neutron.api.v2 import attributes",1996],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-group-rules')",1985],["<server xmlns=\"http://docs.openstack.org/compute/api/v2\"",1795],["path = self._url('/v2/images/%s' % image_id)",1330],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-groups')",1192],["image_href = 'http://localhost/v2/images/%s' % self.image_uuid",1120],["path = self._url('/v2/images')",1114]],"useCount":191558},{"word":"val","context":[["return self.val",3245],["return val",37620],["if val:",9843],["if val is None:",8171],["if val is not None:",6547],["params[key] = val",6176],["self.val = val",4376],["self.val = val",4376],["val = None",4121],["if not val:",3787]],"useCount":758984},{"word":"valid","context":[["@unittest.skipUnless(settings.ROOT_URLCONF == 'lms.urls', 'Test only valid in lms')",1531],["self.valid = False",1588],["# Hosts/domain names that are valid for this site; required if DEBUG is False",2707],["return valid",2802],["if valid:",3050],["if not valid:",3534],["valid = True",4671],["'valid': [",4945],["valid = False",7746],["ValueError: if `value` is not a valid value",8910]],"useCount":347766},{"word":"validate","context":[["validate,",1168],["if request.method == 'POST' and form.validate():",1034],["def convert_to_cache(self, value, record, validate=True):",1314],["'validate': {'type:uuid': None},",1357],["'validate': {'type:string': None},",1701],["if form.validate():",1844],["if validate:",2357],["self.validate()",2896],["def validate(self, value):",6364],["def validate(self):",34465]],"useCount":213033},{"word":"vals","context":[["vals = {}",2766],["vals = {",5561],["def write(self, cr, uid, ids, vals, context=None):",5277],["return vals",5069],["def create(self, cr, uid, vals, context=None):",4588],["vals = []",4076],["def create(self, vals):",2140],["def write(self, vals):",1582],["for val in vals:",1546],["if vals:",898]],"useCount":223027},{"word":"value","context":[["return value",131201],["for key, value in self.__dict__.iteritems()]",20899],["if value is None:",41767],["self.value = value",35866],["self.value = value",35866],["if value:",33671],["# non-false value, then it is used:",25813],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["if value is not None:",24749],["L = ['%s=%r' % (key, value)",21414]],"useCount":5402822},{"word":"values","context":[["# All configuration values have a default; values that are commented out",25768],["For the full list of settings and their values, see",14104],["# Note that not all possible configuration values are present in this",25557],["# All configuration values have a default; values that are commented out",25768],["values = {}",7113],["def values(self):",7557],["for value in values:",9786],["values = {",10686],["values = []",13492],["return values",13682]],"useCount":1553175},{"word":"var","context":[["return var",2914],["# Example: \"/var/www/example.com/media/\"",2135],["# Example: \"/var/www/example.com/static/\"",2129],["var componentModel = session.RetrieveModel(descr);",1396],["var subPath = pfcCreate(\"MpfcAssembly\").CreateComponentPath(assembly, ids);",1387],["var kwargs = {",1309],["var asmcomp = assembly.AssembleComponent (componentModel, transf);",1294],["self.var = var",1183],["self.var = var",1183],["var server = TacticServerStub.get();",1068]],"useCount":318378},{"word":"variable","context":[["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]",1116],["variable.",1229],["print repr(dict(node = 'variable', name = 'i', vid = id(i), type = str(type(i)), access = 'read', line_offset = 4))",1821],["and any production WSGI deployments. It should expose a module-level variable",4331],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]",1116]],"useCount":372447},{"word":"variables","context":[["# declare variables",960],["# Global variables",934],["variables = []",1031],["def variables(self):",1043],["# want to import all variables from base settings files",1100],["# We intentionally define lots of variables that aren't used, and",1100],["# variables",1138],["variables = {}",1242],["return variables",1278],["variables.",1606]],"useCount":236053},{"word":"verbose","context":[["if verbose:",75034],["if self.verbose:",20028],["self.verbose = verbose",8591],["self.verbose = verbose",8591],["if options.verbose:",7627],["if args.verbose:",6269],["if common.verbose:",5955],["@verbose",5898],["verbose : bool, str, int, or None",5083],["If not None, override default verbose level (see mne.verbose).",4448]],"useCount":481954},{"word":"version","context":[["self.version = version",8687],["# The short X.Y version.",26964],["# The full version, including alpha/beta/rc tags.",26558],["# |version| and |release|, also used in various other places throughout the",25310],["# The version info for the project you're documenting, acts as replacement for",25262],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["'version': 1,",14081],["version=version,",13303],["version=version,",13303],["self.version = version",8687]],"useCount":1585846},{"word":"view","context":[["self.view = view",1993],["if view:",1196],["return view",3582],["from pyramid.view import view_config",2441],["response = view(request)",2398],["self.view = view",1993],["admin.add_view(view)",1685],["def has_object_permission(self, request, view, obj):",1502],["def has_permission(self, request, view):",1389],["response = self.view(request)",1224]],"useCount":420448},{"word":"views","context":[["1. Add an import:  from my_app import views",5330],["2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')",5330],["Class-based views",5333],["1. Add an import:  from other_app.views import Home",5333],["Function views",5334],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["from django.views.generic import TemplateView",6167],["from django.views.decorators.csrf import csrf_exempt",6256],["# Create your views here.",6501],["from . import views",7742]],"useCount":332069},{"word":"void","context":[["'void',",490700],["void main()",1208],["if (componentModel != void null)",1396],["@returns(t.void)",1472],[":return: void",1477],["if (compItem == void null)",1555],["if (asmItem == void null)",1558],[":rtype: void",2869],["void",5085],["{ 'return_type': 'void',",11832]],"useCount":869411},{"word":"volume","context":[["volume,",4231],["'source_type': 'volume',",3204],["return volume",2392],["volume_api = cinder.volume.api.API()",2339],["def delete_volume(self, volume):",2039],["def create_volume(self, volume):",1998],["def initialize_connection(self, volume, connector):",1989],["'source_type': 'snapshot', 'destination_type': 'volume',",1909],["volume_id = volume['id']",1881],["'destination_type': 'volume',",5078]],"useCount":680813},{"word":"w","context":[["with warnings.catch_warnings(record=True) as w:",7843],["return w",6105],["if w:",1446],["w = gh.GH_RuntimeMessageLevel.Warning",1525],["for w in words:",1706],["with open(path, 'w') as f:",2048],["w.close()",2098],["w.show()",2479],["f = open(filename, 'w')",2880],["with open(filename, 'w') as f:",2988]],"useCount":834020},{"word":"wait","context":[["timer.start(interval=0.5).wait()",1267],["p.wait()",7466],["self.wait()",6273],["def wait(self):",6265],["proc.wait()",4253],["if wait:",3182],["process.wait()",2307],["response = self.wait()",1915],["def wait(self, timeout=None):",1270],["time.sleep(wait)",1210]],"useCount":237615},{"word":"want","context":[["Get the default attributes for this class.  This is useful if you want",450],["# want to import all variables from base settings files",1100],["# End users want this...",907],["# If you want change the content of this file, edit",741],["# keywords. When used from setup.py, we don't want to import _version.py,",676],["# Then use the following line where and when you want to drop into the",564],["# we don't want that an exception blocks the init_host",550],["print(\"You probably want to also tag the version now:\")",546],["# headers will be compiled as C headers. You don't want that so ALWAYS specify",486],["want = 'bool'",451]],"useCount":242392},{"word":"warn","context":[["from warnings import warn",6800],["log.warn(",1082],["logger.warn(warnMsg)",1118],["warnings.warn(\"exception %r in wrapper %s\" % (exception, wrapper))",1218],["if warn:",1248],["util.warn(",1295],["logger.warn(",1939],["LOG.warn(msg)",3141],["warnings.warn(msg)",1264],["warnings.warn(",16371]],"useCount":192102},{"word":"warning","context":[["logger.warning(",5202],["logging.warning(",4505],["log.warning(",3176],["LOG.warning(msg)",1644],["self.logger.warning(",1486],["print warning",1390],["LOG.warning(",1349],["_logger.warning(",1125],["log.warning(msg)",1101],[".. warning::",8932]],"useCount":265495},{"word":"warnings","context":[["warnings.warn(",16371],["# If true, keep warnings as \"system message\" paragraphs in the built documents.",13596],["with warnings.catch_warnings():",11929],["with warnings.catch_warnings(record=True) as w:",7843],["from warnings import warn",6800],["with warnings.catch_warnings(record=True):",4498],["warnings.simplefilter('always')",4147],["warnings.simplefilter(\"ignore\")",3786],["warnings = []",2847],["import warnings",62885]],"useCount":289274},{"word":"was","context":[["'This template was compiled with Cheetah version'",497],["# This file was automatically generated by SWIG (http://www.swig.org).",1788],["# Locate the client library. If module was installed via \"setup.py\" script, then",1115],["self.fail('Exception was not thrown')",861],["# This function was autogenerated by boilerplate.py.  Do not edit as",811],["\"\"\"Stop everything that was started.\"\"\"",720],["trans = self.transaction # is None unless self.awake() was called",601],["# This code was developed as part of the Computational Infrastructure",546],["# --long was added in git-1.5.5",531],["# CHEETAH was developed by Tavis Rudd and Mike Orr",492]],"useCount":455628},{"word":"we","context":[["# constructor, see if we should eliminate this parameter from",916],["# so we do it with a regexp instead. This function is not used from",676],["# keywords. When used from setup.py, we don't want to import _version.py,",676],["In this scenario we need to create an Engine",715],["# for header files. So we do our best by asking the db for flags for a",727],["# just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.",776],["# Either we're using git < 1.8.3, or there really are no tags. We use",776],["# between branches and tags. By ignoring refnames without digits, we",776],["#             we major version the network_rpcapi to 2.0.",871],["if not on_rtd:  # only import and set the theme if we're building docs locally",1399]],"useCount":1570732},{"word":"what","context":[["# what each function returns vs. what it's supposed to return.",882],["# what each function returns vs. what it's supposed to return.",882],["def changed(self, what):",672],["# AWS cache settings, don't change unless you know what you're doing:",591],["def is_element_present(self, how, what):",479],["# if > 0: sensor region will print out on screen what it's sensing",469],["# Tell setuptools what packages this zenpack provides.",456],["# This is the version spec which indicates what versions of Zenoss",455],["self.what = what",452],["# Do not make changes to this file unless you know what you are doing--modify",1627]],"useCount":194686},{"word":"when","context":[["# directories to ignore when looking for source files.",24534],["except TypeError as te: self._check_types(ValueError(\"%s: '%s' when writing '%s'\" % (type(te), str(te), str(_x))))",1132],["except struct.error as se: self._check_types(struct.error(\"%s: '%s' when writing '%s'\" % (type(se), str(se), str(_x))))",1132],["TypeError will be raised when the following arguments are not instances",1255],["# when",1969],["TypeError will be raised when the following arguments are not of data type",1980],["Choreo. The InputSet object is used to specify input parameters when executing this Choreo.",2841],["to be invoked when receiving the response.",2901],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["# This will get replaced with a git SHA1 when you do a git archive",8306]],"useCount":844707},{"word":"where","context":[["Training vector, where n_samples in the number of samples and",512],["where",6148],["where:",1480],["if where:",1320],["masked_where : Mask where a condition is met.",865],["where = []",687],["# tree (where the .git directory might live) to this file. Invert",648],["# Then use the following line where and when you want to drop into the",564],["self.where = where",523],["self.where = where",523]],"useCount":443450},{"word":"whether","context":[["# whether to use password policy enforcement or not",317],["# that you indicate whether you support Python 2, Python 3 or both.",1519],["whether to calculate the intercept for this model. If set",816],["\"Determine whether the object is valid by converting to boolean\" # Python 2",526],["\"Determine whether the object is valid by converting to boolean\" # Python 3",526],["'''Return boolean indicating whether this extension is available'''",1795],["# Controls whether TP is enabled or disabled;",476],["\"\"\"Check whether the character is part of",444],["These filters are applied when deciding whether to emit a given",434],["# on_rtd is whether we are on readthedocs.org",434]],"useCount":190195},{"word":"which","context":[["# Get the project root dir, which is the parent dir of this",1397],["# base URL from which the finished HTML is served.",25764],["# must be the base URL from which the finished HTML is served.",1134],["def which(program):",938],["# which should be included with this package. The terms are also available at",930],["# which accompanies this distribution, and is available at",863],["include_state: An _IncludeState instance in which the headers are inserted.",755],["nesting_state: A NestingState instance which maintains information about",720],["error: A callable to which errors are reported, which takes 4 arguments:",678],["error: A callable to which errors are reported, which takes 4 arguments:",678]],"useCount":923118},{"word":"while","context":[["while self.running:",3735],["while (True):",2653],["while(1):",3074],["while stack:",3497],["while line:",4124],["while d.avail() > 0:",4170],["while not done:",4299],["while(True):",4735],["while True:",328649],["while 1:",67543]],"useCount":1003520},{"word":"widget","context":[["return widget",3588],["</widget>",4354],["widget = self.create()",2774],["widget=forms.TextInput(",1955],["self.widget = widget",1840],["self.widget = widget",1840],["widget=forms.TextInput(attrs={",1522],["if widget.get_active():",1507],["from kivy.uix.widget import Widget",1396],["widget.show()",1277]],"useCount":387448},{"word":"width","context":[["<canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas>",1510],["# -*- Mode:Python; indent-tabs-mode:nil; tab-width:4 -*-",1438],["height, width = 3, 3",1528],["# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-",1976],["width = 0",2164],["def width(self):",2609],["# tab-width:4",6534],["<th width=\"100\">%s</th>",6749],["self.width = width",6919],["self.width = width",6919]],"useCount":456462},{"word":"will","context":[[":param dict custom_headers: headers that will be added to the request",8074],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# WARNING! All changes made in this file will be lost!",10033],["# This will get replaced with a git SHA1 when you do a git archive",8306]],"useCount":1668939},{"word":"window","context":[["self.window.hide()",1118],["self.window.show()",1393],["window.onload=function(){",1557],["window.show_all()",1720],["self.window.destroy()",1942],["self.window = window",2092],["self.window = window",2092],["self.window.show_all()",2202],["window.show()",2455],["@window.event",1371]],"useCount":282686},{"word":"with","context":[["# Redistribution and use in source and binary forms, with or without",44287],["with self.assertRaises(ValueError):",37193],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["with self.assertRaises(TypeError):",24345],["with excutils.save_and_reraise_exception():",23955],["with self.test_session():",19517],["with session.begin():",18258],["with connection.schema_editor() as editor:",13909],["with self.lock:",14163],["with contextlib.nested(",16075]],"useCount":4422458},{"word":"without","context":[["# Redistribution and use in source and binary forms, with or without",44287],["#Redistribution and use in source and binary forms, with or without",872],["# documentation for any purpose with or without fee is hereby granted,",940],["# This code is so you can run the samples without installing the package",981],["Redistribution and use in source and binary forms, with or without modification,",1082],["# purpose with or without fee is hereby granted, provided that the above",1568],["# Redistribution and use in source and binary forms, with or without modification,",2800],["## \"Redistribution and use in source and binary forms, with or without",2880],["Redistribution and use in source and binary forms, with or without",3711],["#  Redistribution and use in source and binary forms, with or without",5075]],"useCount":270934},{"word":"word","context":[["for word in words:",6256],["return word",3912],["if word:",1177],["print word",785],["word = word.lower()",1067],["word = word.lower()",1067],["word = word[:-1]",1097],["word = word[:-1]",1097],["word = word[:-len(suffix)]",1111],["word = word[:-len(suffix)]",1111]],"useCount":200294},{"word":"work","context":[["# __file__, we can work backwards from there to the root. Some",648],["work = zeros((lwork,), t)",672],["#       distributed with this work for additional information",694],["# To work with it from snapshot, the single image_service is needed",753],["If you modify this Program, or any covered work, by linking or",813],["#  distributed with this work for additional information",877],["work.",1272],["distributed with this work for additional information",1385],["# distributed with this work for additional information",9412],["def work(self):",978]],"useCount":226629},{"word":"write","context":[["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["def write(self, oprot):",22191],["oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))",21959],["f.write('\\n')",8410],["result.write(oprot)",8244],["outfile.write('),\\n')",8201],["def write(self, data):",8085],["args.write(self._oprot)",7696],["f.write(data)",7030],["f.write(\"\\n\")",6657]],"useCount":1511024},{"word":"www","context":[["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["# http://www.newfies-dialer.org",1135],["#     http://www.kamaelia.org/AUTHORS - please extend this file,",1696],["# This file was automatically generated by SWIG (http://www.swig.org).",1788],["# the Hercules foundation (http://www.herculesstichting.be/in_English)",1904],["# Example: \"/var/www/example.com/static/\"",2129],["# Example: \"/var/www/example.com/media/\"",2135],["# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).",3079],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067]],"useCount":346476},{"word":"wx","context":[["if dlg.ShowModal() == wx.ID_OK:",4009],["self.Bind(wx.EVT_PAINT, self.OnPaint)",971],["wx.Panel.__init__(self, parent)",974],["menu = wx.Menu()",1136],["hbox = wx.BoxSizer(wx.HORIZONTAL)",1351],["hbox = wx.BoxSizer(wx.HORIZONTAL)",1351],["if 'unicode' in wx.PlatformInfo:",1359],["sizer = wx.BoxSizer(wx.VERTICAL)",2634],["sizer = wx.BoxSizer(wx.VERTICAL)",2634],["import wx",17383]],"useCount":296123},{"word":"x","context":[["return x",38592],["raise x",8075],[">>> from sympy.abc import x",9964],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["x = 0",11315],["self.x = x",11542],["self.x = x",11542]],"useCount":5270509},{"word":"x00","context":[["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682]],"useCount":955687},{"word":"x20","context":[["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911]],"useCount":213423},{"word":"xml","context":[["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",2426],["xml = \"\"\"",2731],["ctype = 'xml'",2780],["self.assertXmlEqual(xml, \"\"\"",3429],["xml = obj.to_xml()",3785],["import xml.dom.minidom",4571],["from xml.etree import ElementTree",4684],["return xml",5346],["from xml.dom import minidom",6820],["import xml.etree.ElementTree as ET",9174]],"useCount":530897},{"word":"xrange","context":[["return tuple([sparse.get(i, default) for i in xrange(0, 1+maxtag)])",3631],["for i in xrange(n):",3895],["from six.moves import xrange",1301],["for i in xrange(N):",1479],["for i in xrange(4):",1586],["xrange = range",1737],["for i in xrange(5):",1760],["for i in xrange(100):",1999],["for i in xrange(3):",2379],["for i in xrange(10):",3314]],"useCount":236331},{"word":"y","context":[["y += 1",3116],["clf.fit(X, y)",3392],["return x, y",3418],["y = []",3535],["y = 0",6015],[">>> from sympy.abc import x, y",6461],["return y",8763],["self.y = y",9923],["self.y = y",9923],["def __init__(self, x, y):",2497]],"useCount":1884447},{"word":"year","context":[["year -= 1",698],["'year': ('django.db.models.fields.IntegerField', [], {})",4302],["year=2012))",1872],["self.year = year",1095],["self.year = year",1095],["if year:",1086],["year = int(year)",1042],["for year in years:",914],["year = None",712],["year = int(year)",1042]],"useCount":198852},{"word":"yield","context":[["yield x",5817],["yield clk.posedge",7718],["yield line",6992],["yield i",6522],["yield result",6380],["yield 1",4596],["yield chunk",3921],["yield None",3803],["yield item",9882],["yield",28079]],"useCount":592121},{"word":"you","context":[["# If you set this to False, Django will not use timezone-aware datetimes.",4285],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["Usually you will have the standard Django WSGI application here, but it also",4328],["# Usually you set \"language\" from the command line for these cases.",5937],["# If you set this to False, Django will not format dates, numbers and",5943],["# If you set this to False, Django will make some optimizations so as not",7661],["# This will get replaced with a git SHA1 when you do a git archive",8306],["# The version info for the project you're documenting, acts as replacement for",25262],["# There are two options for replacing |today|: either, you set today to some",25812],["# This is also used if you do content translation via gettext catalogs.",5941]],"useCount":688893},{"word":"your","context":[["# Register your models here.",4264],["# In a Windows environment this must be set to your system time zone.",3640],["# If running in a Windows environment this must be set to the same as your",4205],["# Don't put anything in this directory yourself; store your static files",5292],["# more details on how to customize your logging configuration.",6170],["# Create your models here.",6451],["# Create your views here.",6501],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["# If your documentation needs a minimal Sphinx version, state it here.",24083]],"useCount":337737},{"word":"z","context":[["return z",3412],["self.z = z",2665],["self.z = z",2665],["z = 0",1763],[">>> from sympy.abc import x, y, z",1569],["z.close()",1512],["return x, y, z",904],["z = []",888],["A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\"",886],["z += 1",842]],"useCount":560582}]