[{"word":"A","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# A list of ignored prefixes for module index sorting.",26155],["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",16285],["# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",14375]]},{"word":"AND","context":[["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",20824],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",14791],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",13999],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192],["# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",10997],["# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",8304]]},{"word":"ANY","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",23273],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027]]},{"word":"API","context":[["api = neutronapi.API()",6724],["old_create = compute_api.API.create",3132],[":param dargs: standardized virsh function API keywords",3124],["self.stubs.Set(compute_api.API, 'create', create)",3121],["so as to provide a uniform API.",2880],["self.compute_api = compute.API()",2548],["self.stubs.Set(compute_api.API, 'get_all', fake_get_all)",2354],["volume_api = cinder.volume.api.API()",2339],[":API: public",1628],["self.flags(network_api_class='nova.network.neutronv2.api.API')",1426]]},{"word":"AS","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["distributed under the License is distributed on an \"AS IS\" BASIS,",19724],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",13999],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",9504],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY",9243],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",8040]]},{"word":"Add","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["cls.add_method('Add',",12055],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["1. Add an import:  from other_app.views import Home",5333],["2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')",5331],["1. Add an import:  from my_app import views",5330]]},{"word":"Affero","context":[["#    You should have received a copy of the GNU Affero General Public License",41411],["#    GNU Affero General Public License for more details.",40024],["#    it under the terms of the GNU Affero General Public License as",33945],["# You should have received a copy of the GNU Affero General Public License",31967],["# GNU Affero General Public License for more details.",29547],["# it under the terms of the GNU Affero General Public License as published by",18203],["# it under the terms of the GNU Affero General Public License as",11621],["#    it under the terms of the GNU Affero General Public License as published",5181],["# GNU Affero General Public License version 3 (see the file LICENSE).",2968],["GNU Affero General Public License for more details.",2703]]},{"word":"All","context":[["# All Rights Reserved.",74229],["# All rights reserved.",57676],["# All configuration values have a default; values that are commented out",25768],["# WARNING! All changes made in this file will be lost!",10033],["All rights reserved.",8304],["# Language code for this installation. All choices can be found here:",7665],["# Copyright (c) 2012 The Chromium Authors. All rights reserved.",7318],["# Copyright 2014 The Chromium Authors. All rights reserved.",7116],["# Copyright 2015 Google Inc. All Rights Reserved.",6588],["# Copyright 2013 The Chromium Authors. All rights reserved.",5347]]},{"word":"An","context":[["print \"\\n---An error occurred---\\n\"",24666],["raise ServerError('Unknown', 0, 'An unknown server error occurred')",2018],["\"\"\"An atomic simple type.\"\"\"",917],["include_state: An _IncludeState instance in which the headers are inserted.",755],[":param serializer: An object model serializer.",739],["An instance has the following attributes at least.",712],["# LICENSE file in the root directory of this source tree. An additional grant",698],["lines: An array of strings, each representing a line of the file.",677],[":param deserializer: An objec model deserializer.",578],["extra_check_functions: An array of additional check functions that will be",561]]},{"word":"Apache","context":[["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155],["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may",123249],["# Licensed under the Apache License, Version 2.0 (the \"License\"); you may",30776],["Licensed under the Apache License, Version 2.0 (the \"License\");",17592],["# to you under the Apache License, Version 2.0 (the",9397],["# The ASF licenses this file to You under the Apache License, Version 2.0",7163],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",7047],["# Licensed under the Apache License, Version 2.0 (see LICENSE).",6872],["#  Licensed under the Apache License, Version 2.0 (the \"License\");",6627],["# Licensed to the Apache Software Foundation (ASF) under one",5389]]},{"word":"Args","context":[["Args:",453031],[":Args:",8206],["Keyword Args:",2135],["def Args(parser):",1580],["Args",1301],["**Args**:",480],["\"\"\"Args:",341],["Args: None",319],["**Args:**",279],["\"\"\"Args is called by calliope to gather arguments for this command.",233]]},{"word":"AttributeError","context":[["except AttributeError:",199156],["with self.assertRaises(AttributeError):",6985],["raise AttributeError",6216],["raise AttributeError(name)",5743],["raise AttributeError(",4795],["except AttributeError as e:",4070],["except (AttributeError, TypeError):",3586],["except AttributeError, e:",3440],["except (AttributeError, KeyError):",2869],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834]]},{"word":"AutoField","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",15194],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),",5911],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})",5464],["(\"id\", models.AutoField(primary_key=True)),",3865],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})",3634]]},{"word":"B","context":[["#today_fmt = '%B %d, %Y'",23301],["class B(A):",2801],["# today_fmt = '%B %d, %Y'",2651],["class B(object):",1730],["b = B()",1605],["packed.append(struct.pack(\"!B\", self.version))",1288],["packed.append(struct.pack(\"!B\", self.type))",1288],["_version = reader.read(\"!B\")[0]",1288],["_type = reader.read(\"!B\")[0]",1279],["return B",1090]]},{"word":"BASIS","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["distributed under the License is distributed on an \"AS IS\" BASIS,",19724],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",9504],["#  distributed under the License is distributed on an \"AS IS\" BASIS,",7864],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",5645],["# distributed under the License is distributed on an \"AS-IS\" BASIS,",4841],["#    distributed under the License is distributed on an \"AS IS\" BASIS,",3911],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2997]]},{"word":"BooleanField","context":[["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",25914],["'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",23130],["'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",22795],["'is_enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",6768],["'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",3941],["'deleted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",3142],["field=models.BooleanField(default=False),",2560],["self.gf('django.db.models.fields.BooleanField')(default=False),",2464],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),",2276],["'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),",2171]]},{"word":"C","context":[["# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",23115],["#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).",8702],["class C(object):",6382],["<datafield tag=\"999\" ind1=\"C\" ind2=\"5\">",5654],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["class C:",3893],["Copyright            : (C) 2012 by Victor Olaya",3772],["__copyright__ = '(C) 2012, Victor Olaya'",3700],["#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>).",2722]]},{"word":"CONDITIONS","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",9531],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",7919],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",5645],["#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",3887],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2997]]},{"word":"CONF","context":[["CONF = cfg.CONF",27871],["CONF = cfg.CONF",27871],["disk_info = blockinfo.get_disk_info(CONF.libvirt.virt_type,",10242],["CONF = config.CONF",5529],["CONF = config.CONF",5529],["f['osapi_compute_extension'] = CONF.osapi_compute_extension[:]",1244],["CONF.import_opt('host', 'nova.netconf')",1235],["self.compute = importutils.import_object(CONF.compute_manager)",1212],["CONF = nova.conf.CONF",1132],["CONF = nova.conf.CONF",1132]]},{"word":"CharField","context":[["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27005],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251],["'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",25100],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),",24733],["'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24033],["'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24009],["'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})",22044]]},{"word":"Check","context":[["#Check",2255],["# Check",1910],["# Check response",1895],["cls.add_method('Check',",1648],["# Check that the exception raised corresponds to the native Python behaviour.",1448],["# Check that the right middleware methods have been invoked",1172],["# Check the outbox",1042],["\"\"\"Check if it is possible to execute live migration.",995],["\"Check list response returns a valid list\"",909],["# Check that the PK link exists on the rendered form",820]]},{"word":"Column","context":[["id = Column(Integer, primary_key=True)",17331],["id = db.Column(db.Integer, primary_key=True)",10949],["Column('id', Integer, primary_key=True),",6014],["sa.Column('id', sa.Integer(), nullable=False),",5002],["Column(",2828],["Column('id', Integer, primary_key=True, nullable=False),",1899],["Column('created_at', DateTime),",1635],["Column('updated_at', DateTime),",1625],["id = sa.Column(sa.Integer, primary_key=True)",1584],["Column('deleted_at', DateTime),",1555]]},{"word":"Content","context":[["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["'Topic :: Internet :: WWW/HTTP :: Dynamic Content',",4180],["req.headers['Content-Type'] = 'application/json'",3436],["# HTTP header `Content-Type`",2961],["header_params['Content-Type'] = self.api_client.\\",2738],["'Content-Type': 'application/json',",2162],["self.send_header('Content-Type', 'text/html')",1867],["headers = {'Content-Type': 'application/json'}",1308],["'Content-Type': 'text/plain',",1305],["Content-Transfer-Encoding: 7bit",1265]]},{"word":"Copyright","context":[["# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",23115],["# Copyright 2010 United States Government as represented by the",9232],["#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).",8702],["# Copyright 2012 OpenStack Foundation",7375],["# Copyright (c) 2012 The Chromium Authors. All rights reserved.",7318],["# Copyright 2014 The Chromium Authors. All rights reserved.",7116],["# Copyright 2015 Google Inc. All Rights Reserved.",6588],["# Copyright 2012 Nebula, Inc.",5817],["# Copyright 2013 The Chromium Authors. All rights reserved.",5347],["# Copyright (c) Microsoft Corporation. All rights reserved.",4848]]},{"word":"Create","context":[["# Create your views here.",6501],["# Create your models here.",6451],["cls.add_method('Create',",5576],["M(\"Create\", m=\"create\"),",4453],["# Create the table",2568],["## attribute.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::AttributeChecker::Create() const [member function]",1189],["## object-factory.h (module 'core'): ns3::Ptr<ns3::Object> ns3::ObjectFactory::Create() const [member function]",1073],["# Create your tests here.",1006],["## node-container.h (module 'network'): void ns3::NodeContainer::Create(uint32_t n) [member function]",881],["# Create a book and author on the other database",839]]},{"word":"D","context":[["return D",2591],["class D(C):",1780],["d = D()",1230],["\"D\",",1082],["from decimal import Decimal as D",856],["D = {}",792],["class D(object):",630],["# Copyright (C) 2010-2014  CEA/DEN, EDF R&D",593],["('D',",554],["#    ipshell('<some message> -- Entering ipshell.\\nHit Ctrl-D to exit')",521]]},{"word":"DEBUG","context":[["DEBUG = True",30328],["if DEBUG:",29138],["DEBUG = False",13845],["'level': 'DEBUG',",11317],["TEMPLATE_DEBUG = DEBUG",11300],["if settings.DEBUG:",9991],["logger.setLevel(logging.DEBUG)",8303],["logging.basicConfig(level=logging.DEBUG)",7490],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["logger.DEBUG)",3566]]},{"word":"DateTimeField","context":[["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",18509],["'modified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",17539],["'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",8463],["'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),",6002],["'added_time': ('django.db.models.fields.DateTimeField', [], {}),",5427],["'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",4500],["'date_created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",4131]]},{"word":"Default","context":[["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",23115],["# Default is True.",2257],["_sym_db = _symbol_database.Default()",1753],["Default class constructor.",1241],["# A shorter title for the navigation bar.  Default is the same as",1164],["# Default Django apps:",1138],["Default is False.",1039],["# Default",889]]},{"word":"Error","context":[["checks.Error(",8129],["class Error(Exception):",6999],["Error(",3216],["except MySQLdb.Error, e:",2055],["except Error:",1720],["except Error, e:",1316],["raise osv.except_osv(_('Error!'),",1237],["except locale.Error:",1112],["except Error as e:",1100],["except sqlite3.Error as e:",929]]},{"word":"Example","context":[["Example:",50783],["Example::",24402],["CLI Example:",8530],["Example",8494],["# Example configuration for intersphinx: refer to the Python standard library.",5883],["Example usage:",5140],["# Example:",3725],["# Example: \"/home/media/media.lawrence.com/static/\"",3360],["# Example: \"http://media.lawrence.com/static/\"",3359],["# Example: \"/home/media/media.lawrence.com/media/\"",3183]]},{"word":"Examples","context":[["Examples",141778],["Examples:",31034],["# Examples:",7758],["**Examples**",3871],["Examples::",3638],["# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"",3222],["# Examples: \"http://example.com/media/\", \"http://media.example.com/\"",2105],["# Examples: \"http://media.lawrence.com\", \"http://example.com/media/\"",1810],["# Examples: \"http://foo.com/media/\", \"/media/\".",1733],["# Examples: \"http://foo.com/static/admin/\", \"/static/admin/\".",958]]},{"word":"Exception","context":[["except Exception as e:",271261],["except Exception:",237243],["except Exception, e:",164240],["except Exception as ex:",29167],["except Exception as err:",21051],["except Exception as exc:",16541],["raise Exception(",13857],["except Exception, err:",12342],["except Exception,e:",11988],["except Exception as e :",11322]]},{"word":"FITNESS","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",16285],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192],["# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",10258]]},{"word":"FOR","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",23273],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",16285],["#### PLEASE SEE THE ONLINE DOCUMENTATION FOR EXAMPLES",15717],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101]]},{"word":"FROM","context":[["# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",20027],["# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",10765],["FROM",7803],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",7147],["# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",3955],["# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS",2937],["FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR",2422],["# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",2316],["# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",1974],["# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",1616]]},{"word":"False","context":[["return False",1214010],["is_extension=False, extension_scope=None,",98490],["default=False,",45686],["False",43967],["required=False,",32298],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["has_default_value=False, default_value=0,",27657],["keep_default=False)",27041],["is_extendable=False,",24654],["found = False",24160]]},{"word":"For","context":[["For more information on this file, see",25647],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# further.  For a list of options available for each theme, see the",24845],["For the full list of settings and their values, see",14104],["For example:",11398],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["For example::",3796],["For more details about this platform, please refer to the documentation at",2875],["# individuals. For the exact contribution history, see the revision",2660]]},{"word":"ForeignKey","context":[["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["user = models.ForeignKey(User)",4932],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['sites.Site']\"}),",1948],["'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['cms.Placeholder']\", 'null': 'True'}),",1768],["content_type = models.ForeignKey(ContentType)",1677],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),",1555]]},{"word":"Foundation","context":[["# the Free Software Foundation, either version 3 of the License, or",124116],["# the Free Software Foundation; either version 2 of the License, or",46274],["#    published by the Free Software Foundation, either version 3 of the",33963],["the Free Software Foundation, either version 3 of the License, or",30750],["#    the Free Software Foundation, either version 3 of the License, or",18599],["# License as published by the Free Software Foundation; either",13925],["# published by the Free Software Foundation, either version 3 of the",13552],["# as published by the Free Software Foundation; either version 2",13158],["# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",10906],["# with this program; if not, write to the Free Software Foundation, Inc.,",10747]]},{"word":"Free","context":[["# the Free Software Foundation, either version 3 of the License, or",124116],["# along with this program; if not, write to the Free Software",47621],["# the Free Software Foundation; either version 2 of the License, or",46274],["#    published by the Free Software Foundation, either version 3 of the",33963],["the Free Software Foundation, either version 3 of the License, or",30750],["#    the Free Software Foundation, either version 3 of the License, or",18599],["# License as published by the Free Software Foundation; either",13925],["# published by the Free Software Foundation, either version 3 of the",13552],["# as published by the Free Software Foundation; either version 2",13158],["# with this program; if not, write to the Free Software Foundation, Inc.,",10747]]},{"word":"GET","context":[["if request.method == 'GET':",11749],["def GET(self):",5012],["method = 'GET'",4748],["'GET',",3425],["environ={'REQUEST_METHOD': 'GET'})",2978],["method='GET',",2861],["if request.method == \"GET\":",2519],["'method': 'GET',",2414],["method='GET')",2299],["req.method = 'GET'",2186]]},{"word":"GNU","context":[["# You should have received a copy of the GNU General Public License",202164],["# GNU General Public License for more details.",187562],["# it under the terms of the GNU General Public License as published by",170645],["#    You should have received a copy of the GNU Affero General Public License",41411],["it under the terms of the GNU General Public License as published by",40365],["#    GNU Affero General Public License for more details.",40024],["You should have received a copy of the GNU General Public License",38555],["GNU General Public License for more details.",37820],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["#    it under the terms of the GNU Affero General Public License as",33945]]},{"word":"General","context":[["# You should have received a copy of the GNU General Public License",202164],["# GNU General Public License for more details.",187562],["# it under the terms of the GNU General Public License as published by",170645],["#    You should have received a copy of the GNU Affero General Public License",41411],["it under the terms of the GNU General Public License as published by",40365],["#    GNU Affero General Public License for more details.",40024],["You should have received a copy of the GNU General Public License",38555],["GNU General Public License for more details.",37820],["#    it under the terms of the GNU Affero General Public License as",33945],["# You should have received a copy of the GNU Affero General Public License",31967]]},{"word":"Get","context":[["cls.add_method('Get',",19441],["# Get the project root dir, which is the parent dir of this",1397],["# Get the data: the input matrix and the right output.",1226],["## type-id.h (module 'core'): ns3::TypeId ns3::TypeIdValue::Get() const [member function]",1189],["# Get the command object to test",1145],["## nstime.h (module 'core'): ns3::Time ns3::TimeValue::Get() const [member function]",1142],["# Get the long description from the relevant file",1100],["## object-factory.h (module 'core'): ns3::ObjectFactory ns3::ObjectFactoryValue::Get() const [member function]",1073],["## ipv6-address.h (module 'network'): ns3::Ipv6Address ns3::Ipv6AddressValue::Get() const [member function]",1040],["## ipv4-address.h (module 'network'): ns3::Ipv4Address ns3::Ipv4AddressValue::Get() const [member function]",1040]]},{"word":"H","context":[["__revision__ = '$Format:%H$'",9743],["_length = reader.read(\"!H\")[0]",2226],["return H",1521],["packed[1] = struct.pack(\"!H\", length)",1381],["packed.append(struct.pack(\"!H\", self.type))",1370],["packed[2] = struct.pack(\"!H\", length)",1297],["packed.append(struct.pack(\"!H\", 0)) # placeholder for length at index 2",1291],["_type = reader.read(\"!H\")[0]",1291],["packed.append(struct.pack(\"!H\", 0)) # placeholder for length at index 1",856],["git sha              : $Format:%H$",829]]},{"word":"HTML","context":[["# Output file base name for HTML help builder.",27989],["# base URL from which the finished HTML is served.",25764],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",23115],["# -- Options for HTML output ---------------------------------------------------",12541],["# -- Options for HTML output ----------------------------------------------",12095],["# Language to be used for generating the HTML full-text search index.",5923]]},{"word":"HTTP","context":[["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["'Topic :: Internet :: WWW/HTTP :: Dynamic Content',",4180],["'Topic :: Internet :: WWW/HTTP',",3936],["# HTTP header `Accept`",2961],["# HTTP header `Content-Type`",2961],["asynchronous HTTP request, please define a `callback` function",2901],["This method makes a synchronous HTTP request by default. To make an",2718],["Filter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".",2421],["exp = 'HTTP/1.1 201'",1742],["\"Topic :: Internet :: WWW/HTTP\",",1711]]},{"word":"I","context":[["buff.write(struct.pack('<I%ss'%length, length, _x))",1778],["'-I',",1441],[":param I:",1326],["buff.write(struct.pack('<I%sB'%length, length, *_x))",952],["for g in (G, I, Ig, S, L, R):",942],["path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]",890],["return I",692],["pack_str = '!I'",680],["# Licensed to BERI Open Systems C.I.C. (BERI) under one or more contributor",675],["# I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have",648]]},{"word":"ID","context":[["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),",5911],["target_system             : System ID (uint8_t)",4232],["target_component          : Component ID (uint8_t)",3940],["project: Project ID for this request.",1977],[":param aws_access_key_id: Your AWS Access Key ID",1526],["@param uid: ID of the user currently logged in",1196],["@param list_id: the HTML ID of the list",1017],["@param item_id: the HTML ID of the item",884]]},{"word":"IMPLIED","context":[["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192],["# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE",9242],["# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",7004],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",6314],["# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",6046],["# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",6046]]},{"word":"IN","context":[["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",20027],["# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",14857],["# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",14565],["# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",14375],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",12352],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",12352],["# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",10997],["# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION",10766],["# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",10765]]},{"word":"INCLUDING","context":[["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",14565],["# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",14552],["# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",10899],["# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE",9242],["# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",7337],["# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",7004],["# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",6702]]},{"word":"IOError","context":[["except IOError:",85812],["except IOError as e:",18875],["except IOError, e:",13611],["except (IOError, OSError):",4458],["except (OSError, IOError):",3961],["except IOError as err:",3512],["except IOError, err:",3402],["raise IOError",2608],["except (OSError, IOError) as e:",1897],["except (IOError, OSError), e:",1716]]},{"word":"IS","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",20824],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["distributed under the License is distributed on an \"AS IS\" BASIS,",19724],["#### NOTICE: THIS FILE IS AUTOGENERATED",15717],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",13999]]},{"word":"If","context":[["# If false, no module index is generated.",74645],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["# If true, show URL addresses after external links.",44800],["# If false, no index is generated.",29138],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# If true, the index is split into individual pages for each letter.",26818]]},{"word":"ImportError","context":[["except ImportError:",312685],["except ImportError as e:",8271],["except ImportError, e:",6943],["except (ImportError, AttributeError):",2497],["raise ImportError",2371],["except ImportError:  # pragma: no cover",2364],["raise ImportError(",2332],["except ImportError as err:",1147],["except ImportError: # pragma: no cover",1052],["except ImportError, err:",937]]},{"word":"In","context":[["# In[ ]:",5185],["# In a Windows environment this must be set to your system time zone.",3640],["# In applying this license, CERN does not",2687],["# Specify the Python versions you support here. In particular, ensure",1514],["# In applying this licence, CERN does not waive the privileges and immunities",1119],[">>> source = ugentools.In.ar(bus=0)",1110],["# In this case, 'data_file' will be installed into '<sys.prefix>/my_data'",918],["# In[1]:",886],["# In[2]:",822],["#    In addition, as a special exception, the copyright holders give",804]]},{"word":"Inc","context":[["# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",10906],["# with this program; if not, write to the Free Software Foundation, Inc.,",10747],["## along with Invenio; if not, write to the Free Software Foundation, Inc.,",7535],["#     * Neither the name of Google Inc. nor the names of its",6894],["# Copyright 2015 Google Inc. All Rights Reserved.",6588],["# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA",5890],["# Copyright 2012 Nebula, Inc.",5817],["# along with Invenio; if not, write to the Free Software Foundation, Inc.,",5624],["# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.",5270],["# the Free Software Foundation, Inc., 51 Franklin Street,",4171]]},{"word":"Integer","context":[["id = Column(Integer, primary_key=True)",17331],["id = db.Column(db.Integer, primary_key=True)",10949],["Column('id', Integer, primary_key=True),",6014],["sa.Column('id', sa.Integer(), nullable=False),",5002],["Integer,",2685],["Column('id', Integer, primary_key=True, nullable=False),",1899],["Integer(",1628],["id = sa.Column(sa.Integer, primary_key=True)",1584],["id = Column(Integer, primary_key=True, nullable=False)",1467],["Column('id', Integer, primary_key=True,",1422]]},{"word":"IntegerField","context":[["'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),",7472],["'year': ('django.db.models.fields.IntegerField', [], {})",4302],["id = models.IntegerField(primary_key=True)",2471],["'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),",2468],["'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),",1488],["field=models.IntegerField(default=0),",1315],["'score': ('django.db.models.fields.IntegerField', [], {'default': '0'})",1260],["'status': ('django.db.models.fields.IntegerField', [], {'default': '2'}),",1196],["'display_index': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),",1157],["'legacy_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),",1061]]},{"word":"It","context":[["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["and any production WSGI deployments. It should expose a module-level variable",4331],["# The language of the text. It defaults to the language option",3473],["It will usually be imported through the generic SCons.Tool.Tool()",2569],["# The basename for the epub file. It defaults to the project name.",1860],["# This file is a part of the Pootle project. It is distributed under the GPL3",1583],["# \\brief It tests default settings",1121],["# Create new image. It will be updated in snapshot method",753],["Alternative output array in which to place the result. It must",593],["# Used for the long_description.  It's nice, because now 1) we have a top level",550]]},{"word":"Item","context":[["Item(channel=__channel__,",4453],["'std::_List_const_iterator< ns3::AttributeConstructionList::Item >',",2206],["from core.item import Item",1876],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::value [variable]",1103],["cls.add_constructor([param('ns3::AttributeConstructionList::Item const &', 'arg0')])",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::Item() [constructor]",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item::checker [variable]",1103],["register_Ns3AttributeConstructionListItem_methods(root_module, root_module['ns3::AttributeConstructionList::Item'])",1103],["## attribute-construction-list.h (module 'core'): ns3::AttributeConstructionList::Item [struct]",1103]]},{"word":"KIND","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",9531],["# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE",9242],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",8040],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",7919]]},{"word":"KeyError","context":[["except KeyError:",281727],["except KeyError as e:",8812],["with self.assertRaises(KeyError):",5605],["raise KeyError",5349],["except KeyError, e:",5026],["raise KeyError(key)",4992],["except (KeyError, TypeError):",3866],["except (KeyError, ValueError):",3828],["except (AttributeError, KeyError):",2869],["except (KeyError, AttributeError):",2211]]},{"word":"L","context":[["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["L = ['%s=%r' % (key, value)",21414],["L = []",4244],["return L",2786],["# Copyright 2013 Hewlett-Packard Development Company, L.P.",2256],["lorentz = [ L.VVSS1 ],",1791],["@type instance: L{objects.Instance}",1330],["packed.append(struct.pack(\"!L\", self.xid))",1288],["obj.xid = reader.read(\"!L\")[0]",1288],["lorentz = [ L.FFS1, L.FFS2 ],",1241]]},{"word":"LICENSE","context":[["#         http://www.apache.org/licenses/LICENSE-2.0",126073],["#     http://www.apache.org/licenses/LICENSE-2.0",74025],["#      http://www.apache.org/licenses/LICENSE-2.0",45119],["# found in the LICENSE file.",36681],["#    http://www.apache.org/licenses/LICENSE-2.0",34596],["# http://www.apache.org/licenses/LICENSE-2.0",30992],["http://www.apache.org/licenses/LICENSE-2.0",20437],["#   http://www.apache.org/licenses/LICENSE-2.0",15910],["#       http://www.apache.org/licenses/LICENSE-2.0",12461],[":license: BSD, see LICENSE for more details.",10228]]},{"word":"LOG","context":[["LOG = logging.getLogger(__name__)",51954],["LOG.error(msg)",13887],["LOG = log.getLogger(__name__)",6129],["LOG.debug(msg)",4928],["LOG.debug(",3431],["LOG.warn(msg)",3141],["LOG.exception(msg)",2738],["LOG.info(msg)",2452],["LOG.exception(exc)",1730],["LOG.exception(e)",1695]]},{"word":"Language","context":[["'Programming Language :: Python',",25184],["'Programming Language :: Python :: 2.7',",22561],["'Programming Language :: Python :: 3',",15472],["'Programming Language :: Python :: 3.4',",12734],["'Programming Language :: Python :: 2',",11585],["'Programming Language :: Python :: 3.3',",11570],["'Programming Language :: Python :: 2.6',",10250],["'Natural Language :: English',",10054],["\"Programming Language :: Python\",",8788],["# Language code for this installation. All choices can be found here:",7665]]},{"word":"License","context":[["# You should have received a copy of the GNU General Public License",202164],["# GNU General Public License for more details.",187562],["# it under the terms of the GNU General Public License as published by",170645],["# limitations under the License.",150062],["# See the License for the specific language governing permissions and",149392],["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155],["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155],["# you may not use this file except in compliance with the License.",144128],["# You may obtain a copy of the License at",143458]]},{"word":"Licensed","context":[["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155],["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may",123249],["# Licensed under the Apache License, Version 2.0 (the \"License\"); you may",30776],["Licensed under the Apache License, Version 2.0 (the \"License\");",17592],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",7047],["# Licensed under the Apache License, Version 2.0 (see LICENSE).",6872],["#  Licensed under the Apache License, Version 2.0 (the \"License\");",6627],["# Licensed to the Apache Software Foundation (ASF) under one",5389],["# Licensed to the Apache Software Foundation (ASF) under one or more",4713],["# Licensed under the MIT License. See License.txt in the project root for",4088]]},{"word":"List","context":[["# Grouping the document tree into LaTeX files. List of tuples",27516],["# List of patterns, relative to source directory, that match files and",24527],["# One entry per manual page. List of tuples",23937],["# Grouping the document tree into Texinfo files. List of tuples",21017],["# List of callables that know how to import templates from various sources.",7775],["# List of finder classes that know how to find static files in",6046],["# List of documents that shouldn't be included in the build.",2875],["# List of directories, relative to source directory, that shouldn't be searched",2329],[":type nums: List[int]",1684],["M(\"List All\"),",1413]]},{"word":"M","context":[["M(\"Create\", m=\"create\"),",4453],["return M",2535],["# N 為齒數, M 為模數, P 為壓力角",2160],["M(\"New\", m=\"create\"),",1421],["M(\"List All\"),",1413],["#   Paula Sanz Leon, Stuart A. Knock, M. Marmaduke Woodman, Lia Domide,",1091],["M : int",998],["if M == 1:",894],["chamber = \"M -6.8397, -1.4894 \\",887],["if M < 1:",811]]},{"word":"MERCHANTABILITY","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",16285],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192],["# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",10258]]},{"word":"Meta","context":[["class Meta:",222941],["'Meta': {'object_name': 'Group'},",25175],["'Meta': {'object_name': 'User'},",22609],["class Meta(object):",10448],["'Meta': {'object_name': 'Tag'},",2835],["'Meta': {'object_name': 'UserProfile'},",2615],["'Meta': {'ordering': \"('domain',)\", 'object_name': 'Site', 'db_table': \"'django_site'\"},",2260],["'Meta': {'object_name': 'Placeholder'},",1908],["'Meta': {'object_name': 'CMSPlugin'},",1785],["'Meta': {'object_name': 'Project'},",1741]]},{"word":"Migration","context":[["class Migration(migrations.Migration):",81825],["class Migration(migrations.Migration):",81825],["class Migration(SchemaMigration):",36946],["class Migration(DataMigration):",3080],["class Migration:",1185],["migration = objects.Migration.get_by_instance_and_status(",1123],["migration = objects.Migration()",682],["migration = migration_obj.Migration.get_by_instance_and_status(",348],["self.context, objects.Migration(),",279],["objects.Migration.get_by_instance_and_status(",269]]},{"word":"Mock","context":[["from mock import Mock",6273],["from mock import Mock, patch",3078],["from mock import patch, Mock",1857],["session = mock.Mock()",1843],["return Mock()",1533],["mock = Mock()",1454],["self.agent.refresh_firewall = mock.Mock()",1225],["mock.Mock(",1063],["from unittest.mock import Mock",1015],["request = Mock()",940]]},{"word":"Model","context":[["bases=(models.Model,),",23314],["'Model': 'models/misc/smiley' } },",2496],["class Model(models.Model):",2459],["class Model(models.Model):",2459],["class Model(object):",2003],["'Model': 'models/misc/pir_m_prp_lev_cambarrier_plane' } },",1839],["from msrest.serialization import Model",1832],["class User(db.Model):",1830],["class Category(models.Model):",1737],["class Person(models.Model):",1678]]},{"word":"N","context":[["for i in range(N):",5803],["\"VALUE\": \"N/A\"",4626],["# N 為齒數, M 為模數, P 為壓力角",2160],["for i in xrange(N):",1479],["import numpy as N",1450],["for j in range(N):",1224],["N = 10",1205],["N = 100",1161],["N : int",1098],["# Copyright (C) 2000-2007  Donald N. Allingham",955]]},{"word":"NOT","context":[["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",14552],["# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE",9242],["# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",7337],["# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",7004],["# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",6702],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",6314],["# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",6046]]},{"word":"Name","context":[["# ('Your Name', 'your_email@example.com'),",3729],["def Name(cls):",3535],["label = T(\"Name\"),",1790],["# Name",1660],["# ('Your Name', 'your_email@domain.com'),",1587],["'name': fields.char('Name', required=True),",1228],["'Name',",1132],["def Name(self):",876],["'name': fields.char('Name', required=True, translate=True),",785],["self.Name = Name",692]]},{"word":"No","context":[["# Red Hat trademarks are not licensed under GPLv2. No permission is",3127],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined\")",1651],["def __init__(self, *args, **kwargs): raise AttributeError, \"No constructor defined\"",1279],["\"\"\"-- No comment or description provided. --",1076],["self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)",988],["No argument.",978],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined - class is abstract\")",883],["def __init__(self): raise AttributeError, \"No constructor defined\"",844],["<option value=\"3\">No</option>",815],["module_type = None  # No Menu",734]]},{"word":"Node","context":[["'ns3::Ptr< ns3::Node >',",4184],["class Node(object):",3815],["[param('ns3::Ptr< ns3::Node >', 'node')],",3549],["elif child_.nodeType == Node.ELEMENT_NODE and \\",2677],["[param('ns3::Ptr< ns3::Node >', 'node')])",2336],["class Node:",2259],["'__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >',",1982],["'__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >',",1982],["if child_.nodeType == Node.ELEMENT_NODE and \\",1190],["'Type': 'Locator Node',",1182]]},{"word":"None","context":[["return None",882671],["message_type=None, enum_type=None, containing_type=None,",100350],["message_type=None, enum_type=None, containing_type=None,",100350],["message_type=None, enum_type=None, containing_type=None,",100350],["is_extension=False, extension_scope=None,",98490],["options=None),",95554],["None,",76591],["options=None,",58231],["if value is None:",41767],["None",39395]]},{"word":"NotImplementedError","context":[["raise NotImplementedError",110441],["raise NotImplementedError()",99691],["except NotImplementedError:",17265],["raise NotImplementedError(",15310],["with self.assertRaises(NotImplementedError):",4088],["self.assertRaises(NotImplementedError,",3542],["raise NotImplementedError(msg)",2299],["with pytest.raises(NotImplementedError):",1468],["raise NotImplementedError(url)",1462],["raise NotImplementedError('%s not implemented' % (",1120]]},{"word":"Note","context":[["# Note that not all possible configuration values are present in this",25557],["Note:",8492],["Note",2682],["# Note:",1640],["Note: this parameter is tree-specific.",1548],[".. Note::",850],["# Note: This key only used for development and testing.",668],["queryset = Note.objects.all()",625],["'note': fields.text('Note'),",524],["# Note that extra references to the specific methods implemented in",519]]},{"word":"OF","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",20027],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",16873],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",16873]]},{"word":"OK","context":[["if not res['OK']:",12895],["if not result['OK']:",11353],["self.assertEqual(response.status, '200 OK')",6749],["return (httplib.OK, body, {}, httplib.responses[httplib.OK])",6412],["return (httplib.OK, body, {}, httplib.responses[httplib.OK])",6412],["if not result[ 'OK' ]:",5595],["return (httplib.OK, body, self.json_hdr, httplib.responses[httplib.OK])",3292],["return (httplib.OK, body, self.json_hdr, httplib.responses[httplib.OK])",3292],["if not retVal[ 'OK' ]:",2480],["self.assertInResponse('OK')",2188]]},{"word":"OR","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",23273],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",23273],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",20027],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792]]},{"word":"P","context":[["# Copyright 2013 Hewlett-Packard Development Company, L.P.",2256],["P.run()",2226],["# N 為齒數, M 為模數, P 為壓力角",2160],["('P',",1826],[":param P:",1433],["return P",1393],["P = self.cls",1331],["\"P\",",1298],["# Copyright 2014 Hewlett-Packard Development Company, L.P.",1159],["# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.",1072]]},{"word":"PARTICULAR","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",16285],["# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",14375],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",9906]]},{"word":"POST","context":[["if request.method == 'POST':",42864],["if request.method == \"POST\":",13059],["req.method = 'POST'",10967],["method='POST',",5692],["if request.POST:",5507],["elif request.method == 'POST':",3136],["if request.method != 'POST':",3126],["def POST(self):",2593],["'POST',",2417],["method = 'POST'",1993]]},{"word":"PURPOSE","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",16285],["# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",14375],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",9906]]},{"word":"Parameters","context":[["Parameters",366949],["Parameters:",62452],[":Parameters:",24545],["# Parameters",2318],["**Parameters**",1386],["**Parameters:**",1376],["Other Parameters",1213],["Parameters :",937],["# Parameters:",915],["p = omero.sys.Parameters()",640]]},{"word":"Ptr","context":[["'ns3::Ptr< ns3::AttributeValue >',",21161],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["'ns3::Ptr< ns3::NetDevice >',",6099],["'ns3::Ptr< ns3::Packet >',",5885],["'ns3::Ptr< ns3::Node >',",4184],["[param('ns3::Ptr< ns3::Node >', 'node')],",3549],["[param('ns3::Ptr< ns3::Packet const >', 'packet')])",2999],["[param('ns3::Ptr< ns3::Node >', 'node')])",2336],["cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)",2306]]},{"word":"Public","context":[["# You should have received a copy of the GNU General Public License",202164],["# GNU General Public License for more details.",187562],["# it under the terms of the GNU General Public License as published by",170645],["#    You should have received a copy of the GNU Affero General Public License",41411],["it under the terms of the GNU General Public License as published by",40365],["#    GNU Affero General Public License for more details.",40024],["You should have received a copy of the GNU General Public License",38555],["GNU General Public License for more details.",37820],["#    it under the terms of the GNU Affero General Public License as",33945],["# You should have received a copy of the GNU Affero General Public License",31967]]},{"word":"Python","context":[["'Programming Language :: Python',",25184],["'Programming Language :: Python :: 2.7',",22561],["'Programming Language :: Python :: 3',",15472],["'Programming Language :: Python :: 3.4',",12734],["'Programming Language :: Python :: 2',",11585],["'Programming Language :: Python :: 3.3',",11570],["'Programming Language :: Python :: 2.6',",10250],["\"Programming Language :: Python\",",8788],["'Topic :: Software Development :: Libraries :: Python Modules',",7695],["'Programming Language :: Python :: 3.5',",6014]]},{"word":"QtGui","context":[["font = QtGui.QFont()",12975],["from PyQt4 import QtCore, QtGui",11401],["from PyQt4.QtGui import *",8724],["app = QtGui.QApplication(sys.argv)",6726],["from PyQt4 import QtGui",5060],["from PyQt4 import QtGui, QtCore",4108],["item = QtGui.QTableWidgetItem()",3952],["_encoding = QtGui.QApplication.UnicodeUTF8",3907],["return QtGui.QApplication.translate(context, text, disambig)",3898],["return QtGui.QApplication.translate(context, text, disambig, _encoding)",3893]]},{"word":"Request","context":[["req = Request.blank(",10592],["req = urllib2.Request(url)",3933],["request = urllib2.Request(url)",1984],["req = Request.blank('/sda1/p/a/c/o',",1978],["pkt.Request(8)",1917],["req = Request.blank('/v1/a/c/o',",1808],["pkt.Request(14, [",1458],["class Request(object):",1337],["@webob.dec.wsgify(RequestClass=Request)",1336],["@webob.dec.wsgify(RequestClass=wsgi.Request)",1272]]},{"word":"Return","context":[["Return:",14209],["Return",2822],["# Return",1830],["'''Return boolean indicating whether this extension is available'''",1795],["sequence.append(KeyComboAction(\"Return\"))",1163],["Return value:",1127],["\"\"\"Return a string representation of this check.\"\"\"",720],["Return value(s):",687],["Return type: Int",641],[":Return:",577]]},{"word":"Returns","context":[["Returns:",364764],["Returns",257560],[":Returns:",5686],["''' Returns True if this instance represents config data else returns False '''",5223],["Returns ugen input.",1911],["Returns the string representation of the model",1863],["Returns the model properties as a dict",1862],["<Returns>",1732],["Returns true if both objects are not equal",1670],["Returns true if both objects are equal",1670]]},{"word":"S","context":[["return S.Zero",6325],["return S.NaN",3572],["S'summary_display'",3055],["S'score'",3055],["return S.Infinity",2727],["return S.One",2542],[":param S:",2388],["S''",2385],["('S',",1781],["return S",1780]]},{"word":"SOFTWARE","context":[["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",20824],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",16873],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",13999],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",12352],["# THE SOFTWARE.",12320],["# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",10428],["# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",10428],["# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",10241],["# SOFTWARE.",9260]]},{"word":"See","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["# See the License for the specific language governing permissions and",149392],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["See Also",78907],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",39985],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",34357],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",26741],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032]]},{"word":"Set","context":[["cls.add_method('Set',",23525],["self.stubs.Set(compute_api.API, 'create', create)",3121],["from sets import Set as set",2378],["self.stubs.Set(compute_api.API, 'get_all', fake_get_all)",2354],["'PORT': '',                      # Set to empty string for default. Not used with sqlite3.",2338],["self.stubs.Set(fake_image._FakeImageService, 'show', self.fake_show)",2286],["'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.",2249],[":param dry_run: Set to True if the operation should not actually run.",2063],["self.stubs.Set(utils, 'execute', fake_execute)",1841],["from sets import Set",1808]]},{"word":"Software","context":[["# the Free Software Foundation, either version 3 of the License, or",124116],["# along with this program; if not, write to the Free Software",47621],["# the Free Software Foundation; either version 2 of the License, or",46274],["#    published by the Free Software Foundation, either version 3 of the",33963],["the Free Software Foundation, either version 3 of the License, or",30750],["# in the Software without restriction, including without limitation the rights",20572],["# copies of the Software, and to permit persons to whom the Software is",20358],["# copies of the Software, and to permit persons to whom the Software is",20358],["# of this software and associated documentation files (the \"Software\"), to deal",20351],["# all copies or substantial portions of the Software.",19520]]},{"word":"String","context":[["\"type\": \"String\"",4348],["colander.String(),",2345],["project_id = Column(String(255))",1388],["name = Column(String(50))",1080],["name = Column(String)",1063],["user_id = Column(String(255))",1054],["String,",986],["(core.modules.basic_modules.String,",983],["sa.Column('id', sa.String(length=36), nullable=False),",956],["name = Column(String(255))",921]]},{"word":"StringIO","context":[["from StringIO import StringIO",23774],["from StringIO import StringIO",23774],["import StringIO",19291],["from cStringIO import StringIO",17869],["from io import StringIO",8725],["out = StringIO()",4854],["output = StringIO()",3194],["out = six.StringIO()",2473],["s = StringIO()",2427],["buf = StringIO()",2350]]},{"word":"T","context":[["T = current.T",13042],["T = current.T",13042],["import theano.tensor as T",5984],["label = T(\"Name\"),",1790],["\"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"",1762],["\"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"",1762],["return T",1413],[":param T:",1041],["assert_array_equal(clf.predict(T), true_result)",855],["label = T(\"Status\"),",818]]},{"word":"THE","context":[["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",23013],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",20824],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",16873],["#### PLEASE SEE THE ONLINE DOCUMENTATION FOR EXAMPLES",15717],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",14565],["# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",14375]]},{"word":"TO","context":[["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",14374],["# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE",9242],["# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",7337],["# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",7004],["# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",6702],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",6314],["# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",6046]]},{"word":"TODO","context":[["# TODO",11043],["# TODO:",5554],["TODO:",4119],["TODO",3574],["#TODO",2464],["# TODO(Vek): Need to pass context in for access to auth_token",2233],["#TODO:",1204],["})  # TODO: this should be status code 400  # pylint: disable=fixme",976],["# TODO: need better explanation",916],["# TODO: for Ron: once the appropriate value is placed in TP",916]]},{"word":"Test","context":[["# Test",5688],["class Test(unittest.TestCase):",4038],["event = Event.objects.get(title='Test event')",2232],["# Test the database alteration",1917],["# Test the state alteration",1807],["#import sys;sys.argv = ['', 'Test.testName']",1729],["Test file created by XlsxWriter against a file created by Excel.",1725],["Test Plan:",1536],["@unittest.skipUnless(settings.ROOT_URLCONF == 'lms.urls', 'Test only valid in lms')",1531],["class Test(object):",1471]]},{"word":"TestCase","context":[["from django.test import TestCase",35866],["from unittest import TestCase",18481],["class Test(unittest.TestCase):",4038],["class TestCase(unittest.TestCase):",2486],["class TestCase(unittest.TestCase):",2486],["unittest.TestCase):",1976],["from unittest import TestCase, main",1673],["from twisted.trial.unittest import TestCase",1656],["class Foo(unittest.TestCase):",1438],["class Basic(unittest.TestCase):",1303]]},{"word":"TextField","context":[["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",11344],["'description': ('django.db.models.fields.TextField', [], {}),",6206],["'text': ('django.db.models.fields.TextField', [], {}),",2824],["'content': ('django.db.models.fields.TextField', [], {}),",2656],["'notes': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",2543],["'message': ('django.db.models.fields.TextField', [], {}),",2408],["description = models.TextField()",2405],["'notes': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",2114],["description = models.TextField(blank=True)",2000]]},{"word":"The","context":[["# The master toctree document.",28001],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# The short X.Y version.",26964],["# The font size ('10pt', '11pt' or '12pt').",26707],["# The full version, including alpha/beta/rc tags.",26558],["# The encoding of source files.",26524],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["# The name of an image file (relative to this directory) to place at the top of",25468]]},{"word":"This","context":[["# This program is distributed in the hope that it will be useful,",137492],["# This program is free software: you can redistribute it and/or modify",66253],["#    This program is distributed in the hope that it will be useful,",58120],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["This program is distributed in the hope that it will be useful,",27838],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["This program is free software: you can redistribute it and/or modify",18733],["# This program is free software; you can redistribute it and/or",15997]]},{"word":"Time","context":[["'ns3::Time',",24404],["## nstime.h (module 'core'): ns3::Time [class]",2250],["[param('ns3::Time::Unit', 'timeUnit')],",1899],["[param('ns3::Time::Unit', 'unit')],",1431],["[param('ns3::Time const &', 'value')])",1151],["cls.add_constructor([param('ns3::Time const &', 'value')])",1151],["register_Ns3Time_methods(root_module, root_module['ns3::Time'])",1151],["[param('ns3::Time const &', 'o')],",1149],["[param('ns3::Time::Unit', 'resolution')],",1149],["cls.add_constructor([param('ns3::Time const &', 'o')])",1149]]},{"word":"True","context":[["return True",1076346],["is_const=True)",361498],["while True:",328649],["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["is_static=True)",158254],["is_const=True, is_virtual=True)",108896],["is_const=True, is_virtual=True)",108896],["True",103530],["is_virtual=True)",96617]]},{"word":"Type","context":[["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["'Type': 'Bush',",3850],["req.headers['Content-Type'] = 'application/json'",3436],["'Type': 'Tree',",3109],["# HTTP header `Content-Type`",2961],["header_params['Content-Type'] = self.api_client.\\",2738],["'Type': 'Rock',",2392],["'Type': 'Collision Barrier',",2382],["'Content-Type': 'application/json',",2162],["self.send_header('Content-Type', 'text/html')",1867]]},{"word":"TypeError","context":[["except TypeError:",81631],["with self.assertRaises(TypeError):",24345],["raise TypeError(",17538],["except (ValueError, TypeError):",12070],["except (TypeError, ValueError):",11471],["raise TypeError",8173],["with pytest.raises(TypeError):",6551],["except TypeError as e:",4816],["raise TypeError, \"%s incorrect request type\" % (request.__class__)",4798],["except (KeyError, TypeError):",3866]]},{"word":"TypeId","context":[["'ns3::TypeId',",72866],["cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)",2847],["[param('ns3::TypeId', 'tid')])",2364],["register_Ns3TypeId_methods(root_module, root_module['ns3::TypeId'])",1203],["[param('ns3::TypeId', 'other')],",1203],["[param('ns3::TypeId const &', 'value')])",1203],["cls.add_constructor([param('ns3::TypeId const &', 'o')])",1203],["cls.add_constructor([param('ns3::TypeId const &', 'value')])",1203],["## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::HideFromDocumentation() [member function]",1189],["## type-id.h (module 'core'): ns3::TypeId [class]",1189]]},{"word":"URL","context":[["# If true, show URL addresses after external links.",44800],["# base URL from which the finished HTML is served.",25764],["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648],["# Construct URL",8434],["# URL that handles the media served from MEDIA_ROOT. Make sure to use a",7203],["# URL prefix for static files.",5435],["2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')",5331],["2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')",5330],["# URL: http://code.google.com/p/sickbeard/",3955],["# The scheme of the identifier. Typical schemes are ISBN or URL.",3482]]},{"word":"USE","context":[["# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",14565],["# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",14374],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",12352],["# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",10428],["# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",10241],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",7598],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",7006],["# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",6441],["# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND",5235],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",5120]]},{"word":"Unless","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["Unless required by applicable law or agreed to in writing, software",20105],["#  Unless required by applicable law or agreed to in writing, software",11079],["#   Unless required by applicable law or agreed to in writing, software",10097],["# Unless required by applicable law or agreed to in writing,",9045],["# Copyright (C) 2013, Numenta, Inc.  Unless you have an agreement",2234],["#     Unless required by applicable law or agreed to in writing, software",2065],["##  Unless required by applicable law or agreed to in writing, software",1354],["#  Unless required by applicable law or agreed to in writing,",912]]},{"word":"Use","context":[["# Use of this source code is governed by a BSD-style license that can be",36414],["# Use of this source code is governed by a BSD-style",1192],["## Use of this source code is governed by a BSD-style license that can be",847],["Use is subject to license terms supplied in LICENSE.txt",703],["// Use of this source code is governed by a BSD-style license that can be",678],["# Use the lxml ElementTree compatible parser so that, e.g.,",594],["# Use Django's standard `django.contrib.auth` permissions,",591],["# Use of this source code is governed under the Apache License, Version 2.0",576],["# Use @Retry as hedge against bucket listing eventual consistency.",569],["- Use Amazon's S3 for storing static files and uploaded media",535]]},{"word":"User","context":[["from django.contrib.auth.models import User",43609],["'Meta': {'object_name': 'User'},",22609],["except User.DoesNotExist:",10190],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["model = User",7635],["User = get_user_model()",6207],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["user = models.ForeignKey(User)",4932],["User = self.classes.User",4320],["User = self.classes.User",4320]]},{"word":"ValueError","context":[["except ValueError:",266807],["raise ValueError(",49546],["with self.assertRaises(ValueError):",37193],["raise ValueError",21891],["except ValueError as e:",20908],["with pytest.raises(ValueError):",13084],["except (ValueError, TypeError):",12070],["raise ValueError(msg)",11751],["except (TypeError, ValueError):",11471],["except ValueError, e:",11356]]},{"word":"Version","context":[["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155],["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may",123249],["# Licensed under the Apache License, Version 2.0 (the \"License\"); you may",30776],["Licensed under the Apache License, Version 2.0 (the \"License\");",17592],["# to you under the Apache License, Version 2.0 (the",9397],["# The ASF licenses this file to You under the Apache License, Version 2.0",7163],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",7047],["# Licensed under the Apache License, Version 2.0 (see LICENSE).",6872],["#  Licensed under the Apache License, Version 2.0 (the \"License\");",6627],["PRODID:-//CALENDARSERVER.ORG//NONSGML Version 1//EN",6075]]},{"word":"WARRANTIES","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",25010],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",20776],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15101],["# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",14981],["# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",13192]]},{"word":"WARRANTY","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027],["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",18511],["# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",10258],["## WITHOUT ANY WARRANTY; without even the implied warranty of",10119],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY",9243],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",8040]]},{"word":"WITHOUT","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",24760],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792]]},{"word":"We","context":[["# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks",2457],["# We intentionally define lots of variables that aren't used, and",1100],["# Either we're using git < 1.8.3, or there really are no tags. We use",776],["# software to the public domain. We make this dedication for the benefit",729],["# successors. We intend this dedication to be an overt act of",728],["# TODO(sahid): We are converting all calls from a",681],["# We expect a 500 as we injected a fault in the plugin",518],["# We import an assistant script that includes the common verifications",463],["# Brought to you by We Vote. Be good.",421],["2. We should have a more disciplined approach to feature flagging, even if it",359]]},{"word":"X","context":[["# The short X.Y version.",26964],["return X",5271],["def predict(self, X):",3574],["n_samples, n_features = X.shape",3446],["clf.fit(X, y)",3392],["def fit(self, X, y):",2418],["def fit(self, X, y=None):",2182],["'Operating System :: MacOS :: MacOS X',",2169],["X : array-like, shape (n_samples, n_features)",2043],["X : array-like, shape = [n_samples, n_features]",2003]]},{"word":"Y","context":[["# The short X.Y version.",26964],["#today_fmt = '%B %d, %Y'",23301],["#html_last_updated_fmt = '%b %d, %Y'",22077],["# today_fmt = '%B %d, %Y'",2651],["clf.fit(X, Y)",1783],["# html_last_updated_fmt = '%b %d, %Y'",1697],["html_last_updated_fmt = '%b %d, %Y'",1535],["# The empty string is equivalent to '%b %d, %Y'.",1348],["return Y",1078],["today_fmt = '%B %d, %Y'",781]]},{"word":"You","context":[["# You should have received a copy of the GNU General Public License",202164],["# You may obtain a copy of the License at",143458],["#    not use this file except in compliance with the License. You may obtain",123660],["#    You should have received a copy of the GNU Affero General Public License",41411],["You should have received a copy of the GNU General Public License",38555],["# You should have received a copy of the GNU Affero General Public License",31967],["# not use this file except in compliance with the License. You may obtain",30799],["#    You should have received a copy of the GNU General Public License",20976],["You may obtain a copy of the License at",18414],["# You should have received a copy of the GNU Lesser General Public License",17880]]},{"word":"_","context":[["from django.utils.translation import ugettext_lazy as _",45041],["from django.utils.translation import ugettext as _",20455],["_ = gettext_set_language(ln)",15162],["from openerp.tools.translate import _",13558],["from gettext import gettext as _",6270],["from frappe import _",3132],["from nova.i18n import _",3128],["from nova.openstack.common.gettextutils import _",2988],["help_text=_(",2879],["for _ in range(10):",2840]]},{"word":"__class__","context":[["oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))",21959],["fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))",21958],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["self.__class__.__name__,",7355],["raise TypeError, \"%s incorrect request type\" % (request.__class__)",4798],["cls = self.__class__",3562],["return self.__class__.__name__",3217],["self.__class__.__name__)",2183],["if not isinstance(other, self.__class__):",2097]]},{"word":"__dict__","context":[["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["for key, value in self.__dict__.iteritems()]",20899],["self.__dict__[name] = value",5487],["return self.__dict__ == other.__dict__",3225],["return self.__dict__ == other.__dict__",3225],["return response[0].__dict__['___count']",2974],["self.__dict__.update(kwargs)",2083],["self.__dict__.update(state)",1662],["return str(self.__dict__)",1637]]},{"word":"__file__","context":[["BASE_DIR = os.path.dirname(os.path.dirname(__file__))",7153],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["here = os.path.abspath(os.path.dirname(__file__))",3786],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["os.path.dirname(__file__),",2648],["here = path.abspath(path.dirname(__file__))",2382],["path = os.path.dirname(os.path.realpath(__file__))",1799],["os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))",1674],["basedir = os.path.abspath(os.path.dirname(__file__))",1625],["__file__,",1595]]},{"word":"__future__","context":[["from __future__ import unicode_literals",196429],["from __future__ import print_function",98595],["from __future__ import absolute_import",94310],["from __future__ import division",56689],["from __future__ import with_statement",19589],["from __future__ import absolute_import, unicode_literals",13263],["from __future__ import absolute_import, division, print_function",10098],["from __future__ import print_function, division",7909],["from __future__ import (absolute_import, division, print_function)",7334],["from __future__ import absolute_import, print_function",6651]]},{"word":"__init__","context":[["def __init__(self):",560894],["def __init__(self, *args, **kwargs):",130790],["def __init__(self, **kwargs):",47335],["def __init__(self,",36487],["vstruct.VStruct.__init__(self)",34732],["def __init__(self, *args):",25626],["def __init__(self, name):",22064],["def __init__(self, parent):",17574],["def __init__(self, parent=None):",17248],["def __init__(",15385]]},{"word":"__main__","context":[["if __name__ == '__main__':",473962],["if __name__ == \"__main__\":",298715],["if __name__=='__main__':",16884],["if __name__==\"__main__\":",12452],["import __main__",2381],["if '__main__' == __name__:",1732],["if __name__ == \"__main__\" :",1561],["if __name__ == '__main__' :",1523],["if __name__ == '__main__':  # pragma: no cover",1355],["from __main__ import display",1136]]},{"word":"__name__","context":[["if __name__ == '__main__':",473962],["if __name__ == \"__main__\":",298715],["logger = logging.getLogger(__name__)",56480],["LOG = logging.getLogger(__name__)",51954],["log = logging.getLogger(__name__)",39134],["app = Flask(__name__)",21608],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["if __name__=='__main__':",16884],["if __name__==\"__main__\":",12452],["_logger = logging.getLogger(__name__)",11844]]},{"word":"__repr__","context":[["def __repr__(self):",251573],["__repr__ = _swig_repr",26488],["__repr__ = __str__",6152],["__str__ = __repr__",3126],["return self.__repr__()",2567],["def __repr__ (self):",1520],["def __repr__( self ):",1373],["try: strthis = \"proxy of \" + self.this.__repr__()",1303],["strthis = \"proxy of \" + self.this.__repr__()",602],["\"\"\" x.__repr__() <==> repr(x) \"\"\"",418]]},{"word":"__str__","context":[["def __str__(self):",276248],["__repr__ = __str__",6152],["def __str__(self, prefix=\"\", printElemNumber=0):",4792],["return self.__str__()",4646],["def __str__( self ):",3762],["def __str__ (self):",3160],["__str__ = __repr__",3126],["res+=e.__str__(prefix + \"  \", printElemNumber)",1652],["__str__ = __unicode__",589],["def __str__(self) :",559]]},{"word":"a","context":[["# You should have received a copy of the GNU General Public License",202164],["# You may obtain a copy of the License at",143458],["#    a copy of the License at",123726],["#    You should have received a copy of the GNU Affero General Public License",41411],["You should have received a copy of the GNU General Public License",38555],["a = 1",37253],["# Use of this source code is governed by a BSD-style license that can be",36414],["# You should have received a copy of the GNU Affero General Public License",31967],["# a copy of the License at",30789],["# Else, today_fmt is used as the format for a strftime call.",26971]]},{"word":"abc","context":[["@abc.abstractmethod",45710],["import abc",12805],[">>> from sympy.abc import x",9964],[">>> from sympy.abc import x, y",6461],["from abc import ABCMeta, abstractmethod",6266],["@six.add_metaclass(abc.ABCMeta)",5644],["__metaclass__ = abc.ABCMeta",5415],["@abc.abstractproperty",4918],["from abc import abstractmethod",1661],[">>> from sympy.abc import x, y, z",1569]]},{"word":"about","context":[["# General information about the project.",27441],["For more details about this platform, please refer to the documentation at",2875],["def about():",1501],["def about(request):",992],["For more details about this component, please refer to the documentation at",971],["def about(self):",926],["`introduction` for details about locating elements.",834],["'about': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",830],["from Components.About import about",727],["nesting_state: A NestingState instance which maintains information about",720]]},{"word":"above","context":[["# The above copyright notice and this permission notice shall be included in",19741],["# The above copyright notice and this permission notice shall be included",13942],["#     * Redistributions of source code must retain the above copyright",12656],["# The above copyright notice and this permission notice shall be",8293],["#     * Redistributions in binary form must reproduce the above",7862],["# The above copyright notice and this permission notice shall be included in all",6263],["# * Redistributions in binary form must reproduce the above copyright notice,",5753],["The above copyright notice and this permission notice shall be included in",5497],["# * Redistributions of source code must retain the above copyright notice, this",5088],["#     * Redistributions in binary form must reproduce the above copyright",5041]]},{"word":"absolute_import","context":[["from __future__ import absolute_import",94310],["from __future__ import absolute_import, unicode_literals",13263],["from __future__ import absolute_import, division, print_function",10098],["from __future__ import (absolute_import, division, print_function)",7334],["from __future__ import absolute_import, print_function",6651],["from __future__ import division, print_function, absolute_import",6265],["from __future__ import absolute_import, division, print_function, unicode_literals",5790],["from __future__ import (absolute_import, division, generators, nested_scopes, print_function,",5714],["from __future__ import division, absolute_import, print_function",4438],["from __future__ import (absolute_import, division, print_function,",3954]]},{"word":"abspath","context":[["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["#sys.path.insert(0, os.path.abspath('.'))",15081],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["sys.path.insert(0, os.path.abspath('..'))",3908],["here = os.path.abspath(os.path.dirname(__file__))",3786],["here = path.abspath(path.dirname(__file__))",2382],["path = os.path.abspath(path)",2314],["# sys.path.insert(0, os.path.abspath('.'))",1926],["os.path.abspath(",1800],["os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))",1674]]},{"word":"access","context":[["access = 4",14002],["# pylint: disable=protected-access",8883],["access = 5",6533],["access = 2",5673],["'security/ir.model.access.csv',",4394],["\"access\" : \"readonly\",",3623],[":param context: The request context, for access checks.",2832],["# pylint: enable=protected-access",2449],["# TODO(Vek): Need to pass context in for access to auth_token",2233],["print repr(dict(node = 'variable', name = 'i', vid = id(i), type = str(type(i)), access = 'read', line_offset = 4))",1821]]},{"word":"account","context":[["domainid=self.account.domainid,",2565],["acct = raw_input(\"Enter an account name: \")",2197],["accountid=self.account.name,",2030],["account=self.account.name,",1744],["account=self.account.name,",1744],["if account:",1655],["'account',",1540],["return account",1527],["journal_obj = self.pool.get('account.journal')",1482],["acct = raw_input(\"Enter an account (optional): \")",1466]]},{"word":"action","context":[["action='store_true',",27550],["action=\"store_true\",",15630],["action='store',",9809],["return action",6774],["action=\"store\",",6338],["action='store_true')",4637],["for action in actions:",4318],["action=\"store_true\")",3987],["action='append',",3884],["self.action = action",3247]]},{"word":"actions","context":[["'type': 'ir.actions.act_window',",7563],["actions = []",4992],["for action in actions:",4318],["return actions",3052],["svntest.actions.run_and_verify_svn(None, None, [],",2258],["return {'type': 'ir.actions.act_window_close'}",2049],["expected_status = svntest.actions.get_virginal_state(wc_dir, 1)",1672],["if actions:",1423],["actions = [",1356],["self.actions = []",1267]]},{"word":"active","context":[["'active': True,",5036],["'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",3941],["self.active = False",3828],["'status': 'active',",3806],["'active': False,",3749],["if active:",2832],["self.active = True",2797],["status(\"active\")",2553],["'status': 'active'}) \\",2271],["def active(self):",2194]]},{"word":"add","context":[["# add these directories to sys.path here. If the directory is relative to the",24896],["db.session.add(user)",3460],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],["if add:",2331],["self._router_interface_action('add',",2206],["weaponTemplates.add(weapontemplate)",2162],["responses.add(",1959],["db.session.add(self)",1738],["encontrados.add(url)",1625],["menu.add(menu_item)",1469]]},{"word":"add_argument","context":[["parser.add_argument(",71991],["group.add_argument(",5036],["argparser.add_argument(",1916],["p.add_argument(",1417],["arg_parser.add_argument(",1146],["self.parser.add_argument(",979],["PARSER.add_argument(",782],["subparser.add_argument(",720],["self.add_argument(",602],["argument_group.add_argument(",536]]},{"word":"add_constructor","context":[["cls.add_constructor([])",158817],["cls.add_constructor([param('int', 'v')])",2442],["cls.add_constructor([param('double', 'v')])",2259],["cls.add_constructor([param('long long int', 'v')])",2220],["cls.add_constructor([param('long unsigned int', 'v')])",2220],["cls.add_constructor([param('long long unsigned int', 'v')])",2220],["cls.add_constructor([param('long int', 'v')])",2220],["cls.add_constructor([param('unsigned int', 'v')])",2220],["cls.add_constructor([param('char const *', 'address')])",2092],["cls.add_constructor([param('char const *', 'name')])",1296]]},{"word":"add_method","context":[["cls.add_method('GetTypeId',",47496],["cls.add_method('Set',",23525],["cls.add_method('Copy',",22808],["cls.add_method('Deserialize',",20887],["cls.add_method('Serialize',",20718],["cls.add_method('Print',",20227],["cls.add_method('Get',",19441],["cls.add_method('GetSerializedSize',",18625],["cls.add_method('DeserializeFromString',",17380],["cls.add_method('SerializeToString',",17380]]},{"word":"added","context":[["# If true, links to the reST sources are added to the pages.",26301],[":param dict custom_headers: headers that will be added to the request",8074],["'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",1787],["added = True",1320],["if added:",1240],["added = False",1130],["added = 0",775],["_schema.debug(\"Table '%s': added column '%s' with definition=%s\",",725],["added += 1",705],["if not added:",683]]},{"word":"address","context":[["[param('ns3::Address const &', 'address')],",7988],["self.address = address",5071],["self.address = address",5071],["return address",2702],["[param('char const *', 'address')])",2092],["cls.add_constructor([param('char const *', 'address')])",2092],["## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]",2080],["## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]",2080],["[param('ns3::Mac48Address', 'address')])",2041],["if address:",2000]]},{"word":"admin","context":[["from django.contrib import admin",55424],["'django.contrib.admin',",24423],["url(r'^admin/', include(admin.site.urls)),",14085],["url(r'^admin/', include(admin.site.urls)),",14085],["admin.autodiscover()",11945],["# Uncomment the next line to enable the admin:",6792],["# Uncomment the next two lines to enable the admin:",4215],["# Uncomment the next line to enable admin documentation:",3558],["# Uncomment the admin/doc line below to enable admin documentation:",2891],["# Uncomment the admin/doc line below to enable admin documentation:",2891]]},{"word":"after","context":[["# If true, show URL addresses after external links.",44800],["# relative to this directory. They are copied after the builtin static files,",26167],["# If true, show page references after internal links.",23896],["autodetector = MigrationAutodetector(before, after)",3113],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["# Remove this helper function from the namespace after it is invoked",1607],["# here, relative to this directory. They are copied after the builtin",1149],["if after:",924],["eq_(self.newlines_helper(before), after)",740],["after=(",648]]},{"word":"agent","context":[["agent = l3_agent.L3NATAgent(HOSTNAME, self.conf)",3830],["from neutron.agent.linux import ip_lib",1441],["self.agent.refresh_firewall = mock.Mock()",1225],["# Crawl responsibly by identifying yourself (and your website) on the user-agent",1161],["<header content=\"w3af.org\" field=\"User-agent\"/>",1044],["ri.process(agent)",949],["from neutron.agent.linux import utils",909],["from neutron.agent.common import config",837],["agent.process_router(ri)",826],["self.agent = agent",756]]},{"word":"agreed","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["Unless required by applicable law or agreed to in writing, software",20105],["#  Unless required by applicable law or agreed to in writing, software",11079],["#   Unless required by applicable law or agreed to in writing, software",10097],["# Unless required by applicable law or agreed to in writing,",9045],["#     Unless required by applicable law or agreed to in writing, software",2065],["##  Unless required by applicable law or agreed to in writing, software",1354],["#  Unless required by applicable law or agreed to in writing,",912],["#       Unless required by applicable law or agreed to in writing,",694]]},{"word":"all","context":[["# Documents to append as an appendix to all manuals.",47775],["# If true, the current module name will be prepended to all description",27546],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# Note that not all possible configuration values are present in this",25557],["# all copies or substantial portions of the Software.",19520],["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["# in all copies or substantial portions of the Software.",12837],["all()",9589],["# included in all copies or substantial portions of the Software.",7674]]},{"word":"along","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["# along with this program; if not, write to the Free Software",47621],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975],["# You should have received a copy of the GNU General Public License along",15209],["# You should have received a copy of the GNU General Public License along with",12195],["# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",11396],["# along with this program. If not, see <http://www.gnu.org/licenses/>.",10912],["# License along with this library; if not, write to the Free Software",9307],["## along with Invenio; if not, write to the Free Software Foundation, Inc.,",7535]]},{"word":"alpha","context":[["# The full version, including alpha/beta/rc tags.",26558],["self.alpha = alpha",3286],["self.alpha = alpha",3286],["# alpha",2449],["alpha : float",2114],["'type': 'alpha'}),",1282],["alpha : float, optional",1032],["name = gen_string('alpha')",998],["alpha=theta-atan(theta)",986],["if alpha:",588]]},{"word":"already","context":[["# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks",2457],["(e.g. data is expected to be already centered).",1125],["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["# Assuming that base image already exists in image_service",690],["htmltext = \"<html><body>This quest has already been completed.</body></html>\"",565],["# _version.py hasn't already been rewritten with a short version string,",524],["# Check for a pidfile to see if the daemon already runs",519],["reason='already created')",484],["# Fill in the code for the functions below. main() is already set up",472],["# avoid recursion through already copied records in case of circular relationship",446]]},{"word":"also","context":[["# |version| and |release|, also used in various other places throughout the",25310],["See also",16840],["# This is also used if you do content translation via gettext catalogs.",5941],["Usually you will have the standard Django WSGI application here, but it also",4328],["See also:",3642],["# are also available at http://trac.edgewall.org/wiki/TracLicense.",1771],["# This patterns also effect to html_static_path and html_extra_path",1361],["# for |version| and |release|, also used in various other places throughout",1139],["# documentation-folder for more details. See also http://www.thevirtualbrain.org",1099],["# (see also tpNCellsPerCol)",933]]},{"word":"an","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["# Documents to append as an appendix to all manuals.",47775],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name of an image file (relative to this directory) to place at the top",25393],["# The name of an image file (within the static path) to use as favicon of the",24060],["distributed under the License is distributed on an \"AS IS\" BASIS,",19724],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",9504]]},{"word":"and","context":[["# See the License for the specific language governing permissions and",149392],["#    License for the specific language governing permissions and limitations",123669],["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["# Redistribution and use in source and binary forms, with or without",44287],["# Redistribution and use in source and binary forms, with or without",44287],["# License for the specific language governing permissions and limitations",32108],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987]]},{"word":"any","context":[["# (at your option) any later version.",187795],["(at your option) any later version.",40979],["#    License, or (at your option) any later version.",33565],["#    (at your option) any later version.",28884],["# License, or (at your option) any later version.",28201],["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Permission is hereby granted, free of charge, to any person obtaining a copy",23606],["# of the License, or (at your option) any later version.",16356]]},{"word":"apache","context":[["#         http://www.apache.org/licenses/LICENSE-2.0",126073],["#     http://www.apache.org/licenses/LICENSE-2.0",74025],["#      http://www.apache.org/licenses/LICENSE-2.0",45119],["#    http://www.apache.org/licenses/LICENSE-2.0",34596],["# http://www.apache.org/licenses/LICENSE-2.0",30992],["http://www.apache.org/licenses/LICENSE-2.0",20437],["#   http://www.apache.org/licenses/LICENSE-2.0",15910],["#       http://www.apache.org/licenses/LICENSE-2.0",12461],["#        http://www.apache.org/licenses/LICENSE-2.0",7342],["#  http://www.apache.org/licenses/LICENSE-2.0",2637]]},{"word":"api","context":[["@api.multi",38070],["@api.model",22267],["@api.one",13492],["res = req.get_response(self.api)",10660],["api = neutronapi.API()",6724],["from openstack_dashboard import api",4270],["from google.appengine.api import users",4020],["from nova.api.openstack import extensions",3314],["api.nova.flavor_list(IsA(http.HttpRequest)) \\",3259],["from nova.api.openstack import wsgi",3192]]},{"word":"app","context":[["app = Flask(__name__)",21608],["@app.route('/')",12863],["self.app = app",11162],["self.app = app",11162],["return app",10096],["app.run()",8769],["sys.exit(app.exec_())",8680],["app = QtGui.QApplication(sys.argv)",6726],["self.app.update_request(req)",6180],["app = flask.Flask(__name__)",5588]]},{"word":"append","context":[["# Documents to append as an appendix to all manuals.",47775],["sequence.append(utils.StartRecordingAction())",13281],["sequence.append(utils.AssertPresentationAction(",13276],["try: self.this.append(this)",9720],["lines.append(line)",6242],["errors.append(",4636],["items.append(item)",4428],["sequence.append(KeyComboAction(\"Down\"))",4371],["action='append',",3884],["results.append(result)",3670]]},{"word":"applicable","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["Unless required by applicable law or agreed to in writing, software",20105],["#  Unless required by applicable law or agreed to in writing, software",11079],["#   Unless required by applicable law or agreed to in writing, software",10097],["# Unless required by applicable law or agreed to in writing,",9045],["#     Unless required by applicable law or agreed to in writing, software",2065],["##  Unless required by applicable law or agreed to in writing, software",1354],["#  Unless required by applicable law or agreed to in writing,",912],["#       Unless required by applicable law or agreed to in writing,",694]]},{"word":"application","context":[["application = get_wsgi_application()",16094],["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["self.assertEqual(response.content_type, 'application/json')",11194],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["content_type='application/json')",6819],["req.headers[\"content-type\"] = \"application/json\"",6023],["content_type='application/json',",4881],["This module contains the WSGI application used by Django's development server",4332],["named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover",4331],["this application via the ``WSGI_APPLICATION`` setting.",4331]]},{"word":"are","context":[["# output. They are ignored by default.",26989],["# If true, links to the reST sources are added to the pages.",26301],["# relative to this directory. They are copied after the builtin static files,",26167],["# There are two options for replacing |today|: either, you set today to some",25812],["# All configuration values have a default; values that are commented out",25768],["# Note that not all possible configuration values are present in this",25557],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# modification, are permitted provided that the following conditions are met:",20828]]},{"word":"arg","context":[["for arg in args:",18737],["return arg",6691],["for opt, arg in opts:",5200],["@cliutils.arg(",3460],["if arg:",2804],["for arg in self.args:",2593],["for arg in sys.argv[1:]:",2119],["self.arg = arg",1863],["self.arg = arg",1863],["if arg is None:",1837]]},{"word":"args","context":[["def __init__(self, *args, **kwargs):",130790],["args = parser.parse_args()",61658],["def __init__(self, *args):",25626],["if args:",21222],["args = []",19428],["for arg in args:",18737],["def save(self, *args, **kwargs):",18292],["return args",17618],["(options, args) = parser.parse_args()",16538],["def handle(self, *args, **options):",16302]]},{"word":"argument","context":[["# pylint: disable=unused-argument",5175],["\"Got an unexpected keyword argument '%s'\"",2740],["argument.",2325],["raise InvalidArgumentError(\"Invalid argument: %s.  Expected one of %s\" % (name, \", \".join(required + optional)))",1695],["ur\"\"\" Returns the value of object identifier argument",1166],["\"\"\" Returns the value of object identifier argument",1064],["No argument.",978],["</argument>",940],["Keyword argument:",935],["Optional argument:",627]]},{"word":"arguments","context":[["Keyword arguments:",15826],["global_params: (StandardQueryParameters, default: None) global arguments",5086],["arguments:",3973],["arguments.",3619],["optional arguments:",3066],["'arguments':",2708],["arguments = []",2261],["TypeError will be raised when the following arguments are not of data type",1980],["positional arguments:",1959],["Optional arguments:",1617]]},{"word":"argv","context":[["def main(argv):",16114],["execute_from_command_line(sys.argv)",15440],["if len(sys.argv) > 1:",10294],["if len(sys.argv) < 2:",8666],["main(sys.argv)",6784],["main(sys.argv[1:])",6757],["app = QtGui.QApplication(sys.argv)",6726],["from sys import argv",6541],["if len(sys.argv) != 2:",5766],["args = sys.argv[1:]",5666]]},{"word":"array","context":[["import array",7111],["Input array.",5153],["return array",3211],["from numpy import array",3115],["from array import array",2877],["from array import array",2877],["a = array.array(self.typecode, self.example)",2491],["a = array.array(self.typecode, self.example)",2491],["'type': 'array',",2185],["\"type\": \"array\",",2091]]},{"word":"as","context":[["except Exception as e:",271261],["import numpy as np",265867],["# it under the terms of the GNU General Public License as published by",170645],["import matplotlib.pyplot as plt",68317],["# Documents to append as an appendix to all manuals.",47775],["from django.utils.translation import ugettext_lazy as _",45041],["it under the terms of the GNU General Public License as published by",40365],["import pandas as pd",34598],["#    it under the terms of the GNU Affero General Public License as",33945],["except Exception as ex:",29167]]},{"word":"assert","context":[["assert False",19948],["assert response.status_code == 200",9205],["assert upretty(expr) == ucode_str",9037],["assert pretty(expr) == ascii_str",8753],["assert True",4798],["assert x is not self",4762],["assert (",4572],["assert r.status_code == 200",4059],["assert 0",3552],["assert resp.status_code == 200",3373]]},{"word":"assertEqual","context":[["self.assertEqual(",297961],["self.assertEqual(response.status_code, 200)",83327],["self.assertEqual(response.status_code, 302)",19450],["self.assertEqual(resp.status_code, 200)",17900],["self.assertEqual(response.content_type, 'application/json')",11194],["self.assertEqual(response.status_code, 400)",10316],["self.assertEqual(response.status_code, 404)",9538],["self.assertEqual(expected, actual)",9025],["self.assertEqual(response.status_code, status.HTTP_200_OK)",8247],["self.assertEqual(response.status_code, 403)",7828]]},{"word":"assertEquals","context":[["self.assertEquals(",37509],["self.assertEquals(response.status_code, 200)",11521],["self.assertEquals(resp.status_int, 201)",3428],["self.assertEquals(200, response.status_code)",3170],["self.assertEquals(resp.status_int, 200)",2258],["self.assertEquals(resp.status_int, 404)",2055],["self.assertEquals(headers[:len(exp)], exp)",1916],["self.assertEquals(request['body'], expected)",1822],["self.assertEquals(response.status_code, 302)",1519],["self.assertEquals(conn.execute(",1465]]},{"word":"assertFalse","context":[["self.assertFalse(",11782],["self.assertFalse(form.is_valid())",7050],["self.assertFalse(result)",5061],["self.assertFalse(filt_cls.host_passes(host, filter_properties))",1918],["self.assertFalse(res)",1690],["self.assertFalse(login.context)",1401],["self.assertFalse(formset.is_valid())",1023],["self.assertFalse(isinstance(event, cpp.LoadExceptionEvent))",830],["self.assertFalse(f._rolled)",817],["self.assertFalse(self._run_validation(sample))",780]]},{"word":"assertIn","context":[["self.assertIn(",14648],["self.assertIn('display_name', payload)",707],["self.assertIn('launched_at', payload)",707],["self.assertIn('created_at', payload)",707],["self.assertIn(instance3['uuid'], instance_uuids)",633],["self.assertIn('vm_state', search_opts)",606],["self.assertIn(c, self.s)",521],["self.assertIn(doc_id, response.headers['Location'])",444],["self.assertIn(instance2['uuid'], instance_uuids)",431],["self.assertIn('fake_device', self.agent.devices_to_refilter)",424]]},{"word":"assertRaises","context":[["self.assertRaises(",46517],["with self.assertRaises(ValueError):",37193],["with self.assertRaises(TypeError):",24345],["self.assertRaises(webob.exc.HTTPBadRequest,",12597],["with self.assertRaises(AttributeError):",6985],["self.assertRaises(ValueError,",6704],["self.assertRaises(exception.VolumeBackendAPIException,",6072],["with self.assertRaises(Exception):",6054],["with self.assertRaises(ValidationError):",5684],["with self.assertRaises(KeyError):",5605]]},{"word":"assertTrue","context":[["self.assertTrue(",39146],["self.assertTrue(result)",9287],["self.assertTrue(form.is_valid())",7866],["self.assertTrue(res)",3839],["self.assertTrue(False)",3096],["self.assertTrue(True)",2661],["self.assertTrue(filt_cls.host_passes(host, filter_properties))",2652],["self.assertTrue(f.is_valid())",2349],["self.assertTrue(formset.is_valid())",2199],["self.assertTrue(ret)",2063]]},{"word":"assert_equal","context":[["assert_equal(",10911],["assert_equal(res.status_code, 200)",7867],["assert_equal(res.status_code, 400)",4884],["assert_equal(test, control)",4837],["assert_equal(res.status_code, 403)",2847],["yield assert_equal, getattr(inputs.traits()[key], metakey), value",2581],["yield assert_equal, getattr(outputs.traits()[key], metakey), value",2487],["from nose.tools import assert_equal",1938],["assert_equal(res.status_code, 401)",1648],["assert_equal(res.status_code, 201)",1504]]},{"word":"at","context":[["# (at your option) any later version.",187795],["# You may obtain a copy of the License at",143458],["#    a copy of the License at",123726],["(at your option) any later version.",40979],["#    License, or (at your option) any later version.",33565],["# a copy of the License at",30789],["#    (at your option) any later version.",28884],["# License, or (at your option) any later version.",28201],["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name of an image file (relative to this directory) to place at the top",25393]]},{"word":"attr","context":[["def __getattr__(self, attr):",11548],["from nose.plugins.attrib import attr",6701],["@test.attr(type='smoke')",6523],["return attr",5872],["for attr in attrs:",4118],["@test.attr(type='gate')",4107],["@attr('shard_1')",3890],["@test.attr(type=['negative'])",3812],["@test.attr(type=['negative', 'gate'])",3734],["@attr.gpu",3556]]},{"word":"attribute","context":[["The corresponding attribute of the derived class of interest.",3120],["Not implemented (virtual attribute)",3120],["attribute.",2629],[":param dict swaggerTypes: The key is attribute name",1642],[":param dict attributeMap: The key is attribute name",1642],["and the value is attribute type.",1642],["</attribute>",1400],["[param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue &', 'attribute')],",1258],["for attribute in attributes:",1250],[".. attribute:: name",1232]]},{"word":"attributes","context":[["'attributes': {",4619],["albeit unimplemented, all the attributes of the ndarray class",2880],["raise AttributeError(\"You cannot add attributes to %s\" % self)",2834],["attributes = {}",2289],["attributes = []",2090],["from neutron.api.v2 import attributes",1996],["# set attributes",1945],["attrs = node_.attributes",1922],["# read attributes",1871],["type=attributes.Schema.STRING",1784]]},{"word":"attrs","context":[["def buildAttributes(self, node, attrs, already_processed):",10335],["return attrs",7003],["attrs = {}",4436],["def render(self, name, value, attrs=None):",4321],["for attr in attrs:",4118],["def handle_starttag(self, tag, attrs):",2969],["def __new__(cls, name, bases, attrs):",2888],["attrs = {",2841],["if attrs:",2549],["def __init__(self, attrs=None):",2531]]},{"word":"auth","context":[["from django.contrib.auth.models import User",43609],["'django.contrib.auth',",28733],["'django.contrib.auth.middleware.AuthenticationMiddleware',",26570],["from django.contrib.auth.decorators import login_required",16773],["'auth.group': {",15191],["'auth.permission': {",15172],["'auth.user': {",14377],["'django.contrib.auth.context_processors.auth',",13559],["'django.contrib.auth.context_processors.auth',",13559],["'django.contrib.auth.middleware.SessionAuthenticationMiddleware',",10898]]},{"word":"author","context":[["# (source start file, target name, title, author,",21198],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["#  author, documentclass [howto, manual, or own class]).",11744],["[author], 1)",5717],["# (source start file, target name, title, author, documentclass",1938],["@author: Kenneth Hoste (Ghent University)",1931],["<author>",1777],["</author>",1758],["author:",1637],["@author  Michael Behrisch",1635]]},{"word":"available","context":[["# further.  For a list of options available for each theme, see the",24845],["# although not all choices may be available on all operating systems.",7645],["'status': 'available',",3418],["# This copyrighted material is made available to anyone wishing to use,",3250],["available.",1933],["'''Return boolean indicating whether this extension is available'''",1795],["# are also available at http://trac.edgewall.org/wiki/TracLicense.",1771],["# history and logs, available at http://trac.edgewall.org/log/.",1755],["self._error('no available options')",1455],["The official definition of this extension is available here:",1424]]},{"word":"ax","context":[["ax = fig.add_subplot(111)",7547],["fig, ax = plt.subplots()",4057],["ax = plt.gca()",3489],["return ax",3363],["if ax is None:",3205],["ax.grid(True)",2045],["ax.set_yscale('log')",1311],["ax.legend()",1153],["ax.set_yticks([])",1116],["ax.set_title(title)",1115]]},{"word":"axis","context":[["axis : int, optional",5050],["if axis is None:",3906],["plt.axis('off')",2475],["axis : int or None, optional",1678],["if axis == 0:",1607],["a, axis = _chk_asarray(a, axis)",1310],["a, axis = _chk_asarray(a, axis)",1310],["axis = 0",1292],["axis=1)",1191],["axis=0)",1185]]},{"word":"b","context":[["b = 2",34426],["b = 3",34116],["#html_last_updated_fmt = '%b %d, %Y'",22077],["a,b=2,3",12599],["self.check(b, a)",10586],["return b",10332],["self.b = b",3550],["self.b = b",3550],["return b''",3162],["return a + b",2885]]},{"word":"bar","context":[["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["'foo': 'bar',",2314],["bar",1201],["def bar():",1196],["# A shorter title for the navigation bar.  Default is the same as",1164],["def bar(self):",1103],["foo: bar",895],["'bar': {",791],["_class=\"edit-bar fright\",",720],["'bar'",646]]},{"word":"base","context":[["# Output file base name for HTML help builder.",27989],["# base URL from which the finished HTML is served.",25764],["from django.core.management.base import BaseCommand",10350],["from django.core.management.base import BaseCommand, CommandError",7751],["@base.remotable_classmethod",3897],["return base",3847],["from neutron.tests import base",3164],["@base.remotable",3079],["self.base = base",3001],["self.base = base",3001]]},{"word":"based","context":[["Class-based views",5333],["# Gramps - a GTK+/GNOME based genealogy program",5312],["# Miro - an RSS based video player application",500],["This checks if the live migration can succeed, based on the",461],["# ERPNext - web based ERP (http://erpnext.com)",459],["# to support value-getter-based substitutions from the sub-experiment (if any)",433],["# Compute predictionSteps based on the predictAheadTime and the aggregation",427],["\"\"\"A setuptools based setup module.",425],["'''Create a new instance based on a JSON dict.",421],["#   needed by permutation.py-based experiments. These values will be resolved",384]]},{"word":"be","context":[["# This program is distributed in the hope that it will be useful,",137492],["#    This program is distributed in the hope that it will be useful,",58120],["# Use of this source code is governed by a BSD-style license that can be",36414],["This program is distributed in the hope that it will be useful,",27838],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# Additional templates that should be rendered to pages, maps page names to",25900],["# If true, an OpenSearch description file will be output, and all pages will",25786]]},{"word":"because","context":[["# Encode with UTF-8 rather than TransanaGlobal.encoding because this is a prompt, not DB Data.",880],["# fix made because of serval bugs in Qt mac deployment (https://bugreports.qt-project.org/browse/QTBUG-21267)",678],["# Used for the long_description.  It's nice, because now 1) we have a top level",550],["# Compile the list of packages available, because distutils doesn't have",458],["# Config is not correct because of a wrong relative path",397],["# token.split_contents() isn't useful here because this tag doesn't accept variable as arguments",393],["# because the dimension fields are not null=True.",356],["# It's necessary to check if the architecture is power, because",326],["# Same data as above: Forbidden because of unique_together!",312],["# We do not log here, because we have a handler registered",306]]},{"word":"been","context":[["# Copyright: This module has been placed in the public domain.",1962],["# license.  Please see the LICENSE file that should have been included",1542],["# Check that the right middleware methods have been invoked",1172],["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["`user` is a Django User object. If it hasn't been saved yet (no `.id`",579],["htmltext = \"<html><body>This quest has already been completed.</body></html>\"",565],["print ('The credentials have been revoked or expired, please re-run the '",560],["# _version.py hasn't already been rewritten with a short version string,",524],["# all records in the (possibly aggregated) database have been processed,",435],["'title': \"I've been edited!\",",430]]},{"word":"before","context":[["# HTML files that should be inserted before the pages created by sphinx.",3483],["autodetector = MigrationAutodetector(before, after)",3113],["before = self.make_project_state([])",1163],["\"\"\"Run before each test.\"\"\"",921],["if before:",855],["# Import iris.tests first so that some things can be initialised before",752],["before = time.time()",740],["eq_(self.newlines_helper(before), after)",740],["# before going forward. The exception will be caught",631],["If True, the regressors X will be normalized before regression.",596]]},{"word":"being","context":[["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",1585],["the current stack of nested blocks being parsed.",1162],["# of the docs.  This file should be a Windows icon file (.ico) being",1137],["# is not supported by the underlying hypervisor being",945],["of the record being imported",666],["filename: Filename of the file that is being processed.",515],["#  In case a separate license agreement ends, and such agreement ends without being",434],["being performed.  Check the EC2 API guide",434],["\"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"",404]]},{"word":"between","context":[["# Choose between 'default' and 'includehidden'.",1873],["If float, should be between 0.0 and 1.0 and represent the",828],["# between branches and tags. By ignoring refnames without digits, we",776],["## a written agreement between you and The Qt Company. For licensing terms",594],["## a written agreement between you and Digia.  For licensing terms and",463],["# between the sub-experiment and base experiment",427],["the interval is between \"a (s)\" and \"b (s)\".",351],["#  Unless a separate license agreement exists between you and Tavendo GmbH (e.g. you",318],["Crossfade time between old and new input. Default to 0.05.",317],["Crossfade time between old and new input. Defaults to 0.05.",305]]},{"word":"bin","context":[["#!/usr/bin/env python",502842],["#!/usr/bin/python",166810],["#!/usr/bin/env python3",50325],["#! /usr/bin/env python",36357],["#!/usr/bin/env python2",17558],["#!/usr/bin/python3",14457],["#! /usr/bin/python",8559],["#!/usr/bin/env python2.7",5347],["#!/bin/env python",4280],["#!/usr/bin/python2",4200]]},{"word":"binary","context":[["# Redistribution and use in source and binary forms, with or without",44287],["#     * Redistributions in binary form must reproduce the above",7862],["# * Redistributions in binary form must reproduce the above copyright notice,",5753],["#  Redistribution and use in source and binary forms, with or without",5075],["#     * Redistributions in binary form must reproduce the above copyright",5041],["# 2. Redistributions in binary form must reproduce the above copyright",4912],["Redistribution and use in source and binary forms, with or without",3711],["# 2. Redistributions in binary form must reproduce the above copyright notice,",3453],["## \"Redistribution and use in source and binary forms, with or without",2880],["# Redistribution and use in source and binary forms, with or without modification,",2800]]},{"word":"blank","context":[["blank=True,",27713],["'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24033],["'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24009],["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),",23830],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",18509],["'modified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",17539],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",11344],["req = Request.blank(",10592]]},{"word":"block","context":[[".. code-block:: python",12815],[".. code-block:: bash",10438],[".. code-block:: none",4487],["return block",3324],["if block:",2678],[".. code-block:: yaml",2544],["if not block:",1775],["for block in blocks:",1552],["<disk type='block'>",1394],[":param block_migration: if true, prepare for block migration",1356]]},{"word":"body","context":[["</body>",18679],["<body>",15561],["body = {",11286],["return body",11062],["body = json.loads(body)",8219],["body = json.loads(body)",8219],["req.body = jsonutils.dumps(body)",6621],["req.body = jsonutils.dumps(body)",6621],["return (httplib.OK, body, {}, httplib.responses[httplib.OK])",6412],["self.req.body = jsonutils.dumps(self.body)",5931]]},{"word":"bool","context":[["'bool',",185937],[":rtype: bool",27142],[":param bool raw: returns the direct response alongside the",7438],["@rtype: bool",5507],["verbose : bool, str, int, or None",5083],["bool",3689],[":rtype: ``bool``",3593],["doIsolated = cms.bool( False ),",3336],["SaveTag = cms.untracked.bool( False ),",3226],["lessThan = cms.bool( True ),",2827]]},{"word":"boolean","context":[["@rtype: boolean",2813],[":rtype: boolean",2112],[":rtype: ``boolean``",2059],["return # boolean",2008],["'''Return boolean indicating whether this extension is available'''",1795],["type: boolean",1480],["'type': 'boolean',",1126],["copy_X : boolean, optional, default True",1021],["normalize : boolean, optional, default False",1008],["'active': fields.boolean('Active'),",984]]},{"word":"break","context":[["break",978022],["break;",15126],["return \"break\"",4293],["else: break",2801],["#break",1958],["if not line: break",1855],["#    break",1139],["# break",912],["#        break",844],["#         break",758]]},{"word":"buf","context":[["return buf",6694],["def parser(cls, buf, offset):",6083],["[param('uint8_t *', 'buf')],",4184],["if not buf:",3179],["def serialize(self, buf, offset):",3082],["buf = []",2769],["buf = bytearray()",2562],["buf = StringIO()",2350],["[param('uint8_t const *', 'buf')],",2092],["buf = ''",2006]]},{"word":"buffer","context":[["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["[param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')],",2846],["# Generated by the protocol buffer compiler.  DO NOT EDIT!",2521],["[param('uint8_t *', 'buffer')],",2229],["[param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])",2090],["[param('uint8_t *', 'buffer'), param('uint32_t', 'size')])",2025],[":param buff: buffer, ``StringIO``",2010],["raise genpy.DeserializationError(e) #most likely buffer underfill",2004]]},{"word":"build","context":[["obj_.build(child_)",20335],["def build(self, node):",10454],["def build(self):",8246],["sbox.build()",3173],["rootObj.build(rootNode)",3113],["# List of documents that shouldn't be included in the build.",2875],["def build():",2024],["def build(self, node_):",1964],["self.build()",1342],["self.build(context, token)",1228]]},{"word":"but","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",18511],["# This program is distributed in the hope that it will be useful, but WITHOUT",11709],["# This program is distributed in the hope that it will be useful, but",9856],["## Invenio is distributed in the hope that it will be useful, but",7539],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",7318],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",6750],["# Invenio is distributed in the hope that it will be useful, but",5450]]},{"word":"by","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["# it under the terms of the GNU General Public License as published by",170645],["#    Unless required by applicable law or agreed to in writing, software",127081],["it under the terms of the GNU General Public License as published by",40365],["# Use of this source code is governed by a BSD-style license that can be",36414],["#    published by the Free Software Foundation, either version 3 of the",33963],["# output. They are ignored by default.",26989],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["#    it under the terms of the GNU General Public License as published by",20820],["Unless required by applicable law or agreed to in writing, software",20105]]},{"word":"bytes","context":[["return bytes",1536],[":rtype: bytes",1209],["if isinstance(s, bytes):",1101],["if isinstance(value, bytes):",1040],["bytes = str",1021],["def write(self, bytes):",603],["binary_type = bytes",554],["def bytes(self):",535],["if isinstance(path, bytes):",526],["if isinstance(data, bytes):",511]]},{"word":"c","context":[["return c",24795],["c.close()",10297],["# Copyright (c) 2012 The Chromium Authors. All rights reserved.",7318],["c = 0",6982],["if c:",6005],["c = conn.cursor()",5787],["c += 1",5320],["# Copyright (c) Microsoft Corporation. All rights reserved.",4848],["# Copyright (c) Twisted Matrix Laboratories.",4451],["# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors",4210]]},{"word":"cache","context":[["from django.core.cache import cache",9125],["from django.core.cache import cache",9125],["cache.clear()",5057],["cache = {}",4008],["'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',",3961],["self.cache = {}",3874],["@reflection.cache",2926],["if cache:",2542],["from django.views.decorators.cache import never_cache",1998],["return cache",1878]]},{"word":"call","context":[["Traceback (most recent call last):",34604],["# Else, today_fmt is used as the format for a strftime call.",26971],["error: The function to call with any errors found.",7578],["from subprocess import call",6707],["mock.call(",4038],["pyauto_errors.JSONInterfaceError if the automation call returns an error.",2261],["mock.call.add_rule(",2075],["subprocess.call(",1311],["rpc_client.EngineClient.call(",1311],["(self.call.device.RunShellCommand(",1166]]},{"word":"callback","context":[["callback = kwargs.pop('callback', self._callback)",9277],["callback = kwargs.pop('callback', self._callback)",9277],["return callback(config)",9262],["self.callback = callback",6340],["self.callback = callback",6340],["if callback:",6324],["if callback is not None:",4011],["callback()",3033],[":param callback function: The callback function",2901],["asynchronous HTTP request, please define a `callback` function",2901]]},{"word":"called","context":[["If the method is called asynchronously,",2901],["called = []",2236],["self.called = True",1959],["self.called = False",1595],["called.",1424],["self.assertTrue(mock_post.called)",830],["self.called()",824],["self.assertEqual(driver.called, [",795],["called[0] = True",749],["called = [False]",728]]},{"word":"can","context":[["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["# Use of this source code is governed by a BSD-style license that can be",36414],["This program is free software: you can redistribute it and/or modify",18733],["# This program is free software; you can redistribute it and/or",15997],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# This library is free software; you can redistribute it and/or",13150],["# Ansible is free software: you can redistribute it and/or modify",11997]]},{"word":"case","context":[["@staticmethod # known case of __new__",2472],["for case in cases:",1614],["ur\"\"\" converts nitro response into object and returns the object array in case of get request.",1166],["\"\"\" converts nitro response into object and returns the object array in case of get request.",1064],["# Although 'package_data' is the preferred approach, in some case you may",924],["# In this case, 'data_file' will be installed into '<sys.prefix>/my_data'",918],["yield case(",725],["# These are the compilation flags that will be used in case there's no",685],["# case.",667],["VirtualBox OSE distribution, in which case the provisions of the",654]]},{"word":"category","context":[["#  dir menu entry, description, category)",20993],["self.category = category",2435],["self.category = category",2435],["if category:",2162],["for category in categories:",1993],["elif self.category == MixedContainer.CategorySimple:",1389],["if self.category == MixedContainer.CategoryText:",1389],["else:    # category == MixedContainer.CategoryComplex",1380],["'category': category,",1212],["'category': category,",1212]]},{"word":"cfg","context":[["CONF = cfg.CONF",27871],["from oslo_config import cfg",24094],["from oslo.config import cfg",17813],["self.assertIsInstance(cfg.devices[2],",3216],["return cfg",3013],["self.assertIsInstance(cfg.devices[1],",2966],["self.assertIsInstance(cfg.devices[0],",2888],["self.assertIsInstance(cfg.devices[3],",2635],["self.assertIsInstance(cfg.devices[4],",2466],["self.assertIsInstance(cfg.devices[5],",2336]]},{"word":"change","context":[["def save_model(self, request, obj, form, change):",2327],["change = True",1973],["# 'zh' user can custom change `jieba` dictionary path.",1350],["for change in changes:",1114],["if change:",993],["change = False",829],["# Most projects will NOT need to set this to anything; you can just change the",829],["# If you want change the content of this file, edit",741],["ssS'change'",623],["if not change:",612]]},{"word":"changed","context":[["changed = True",20176],["changed = False",11095],["if changed:",5586],["return changed",4777],["self.changed = True",3732],["self.changed()",2725],["module.exit_json(changed=True)",2132],["self.changed = False",1759],["result['changed'] = True",1248],["self.result['changed'] = True",1248]]},{"word":"changes","context":[["# WARNING! All changes made in this file will be lost!",10033],["changes = autodetector._detect_changes()",3423],["return changes",2218],["changes = []",1881],["self.assertNumberMigrations(changes, 'testapp', 1)",1629],["# Do not make changes to this file unless you know what you are doing--modify",1627],["if changes:",1409],["'changes': {},",1200],["for change in changes:",1114],["changes.  You cannot mix in-order arguments and keyword arguments.",1096]]},{"word":"channel","context":[["Item(channel=__channel__,",4453],["self._state.channel = _channel",3295],["self.channel = channel",2859],["self.channel = channel",2859],["for channel in channels:",2133],["return channel",1329],["if channel:",1302],["if not channel:",1216],["channel = connection.channel()",1176],["channel = connection.channel()",1176]]},{"word":"char","context":[["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["cls.add_constructor([param('char const *', 'address')])",2092],["[param('char const *', 'address')])",2092],["self.convertToDB(obj.db_entity_type, 'str', 'char(16)')",1512],["[param('char const *', 'buffer'), param('size_t const', 'size')])",1476],["self.BrokerID = '' #经纪公司代码, char[11]",1461],["cls.add_constructor([param('char const *', 'name')])",1296],["'name': fields.char('Name', required=True),",1228],["## type-id.h (module 'core'): ns3::TypeId::TypeId(char const * name) [constructor]",1189],["return char",1112]]},{"word":"check","context":[["self.check(b, a)",10586],["linenum: The number of the line to check.",6993],["def check(self):",6689],["if check:",3579],["check_list.append(check)",2726],["# sanity check",2018],["return check",1975],["check = False",1783],["def check():",1683],["check = True",1669]]},{"word":"child","context":[["for child in node:",12452],["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["self.buildChildren(child, node, nodeName_)",10147],["for child in children:",5628],["for child in self.children:",5610],["return child",4163],["for child in node.children:",2268],["for child in node.getchildren():",2036],["if child.has_changes():",1936],["for child in to_del:",1881]]},{"word":"children","context":[["children = []",8954],["return children",5755],["for child in children:",5628],["for child in self.children:",5610],["self.children = []",4485],["def children(self):",4278],["if children:",2647],["for child in node.children:",2268],["for c in self.children:",1658],["children.append((self, parent[0], parent[1]))",1494]]},{"word":"choices","context":[["# Language code for this installation. All choices can be found here:",7665],["# although not all choices may be available on all operating systems.",7645],["choices: [ \"yes\", \"no\" ]",3598],["choices = []",2763],["choices = [",2157],["return choices",1927],["choices:",1729],["choices=[",1588],["self.choices = choices",1520],["self.choices = choices",1520]]},{"word":"class","context":[["class Meta:",222941],["class Migration(migrations.Migration):",81825],["class Migration(SchemaMigration):",36946],["class Command(BaseCommand):",19252],["#  author, documentclass [howto, manual, or own class]).",11744],["class Meta(object):",10448],["class Solution(object):",8707],["class Solution:",8131],["class Error(Exception):",6999],["'class': 'django.utils.log.AdminEmailHandler'",6831]]},{"word":"classes","context":[["# List of finder classes that know how to find static files in",6046],["User = self.classes.User",4320],["self.classes.User)",2278],["classes = []",2000],["# Import appropriate classes from the client library.",1826],["classes = (\"ajax-modal\",)",1822],["self.classes.Address,",1639],["User, Address = self.classes.User, self.classes.Address",1468],["User, Address = self.classes.User, self.classes.Address",1468],["for cls in classes:",1342]]},{"word":"classmethod","context":[["@classmethod",618674],["#@classmethod",942],["# @classmethod",442],["#    @classmethod",390],["#     @classmethod",357],["supported = classmethod(supported)",262],["from_wire = classmethod(from_wire)",256],["from_text = classmethod(from_text)",236],["id_for_label = classmethod(id_for_label)",226],["parse = classmethod(parse)",206]]},{"word":"clear","context":[["def clear(self):",26154],["self.clear()",13030],["cache.clear()",5057],["cls.add_method('clear',",4217],["os.system('clear')",2293],["if clear:",2134],["clear()",2008],["model.clear()",1858],["elem.clear()",1607],["def clear():",1436]]},{"word":"client","context":[["response = self.client.get(url)",23349],["self.client.logout()",14930],["response = self.client.post(",12406],["response = self.client.get(",11094],["self.client = client",5974],["self.client = client",5974],["client.close()",5637],["r = self.client.get(self.url)",5337],["return client",5311],["# Initialize client object.",4889]]},{"word":"close","context":[["f.close()",207025],["def close(self):",64029],["self.close()",55481],["fp.close()",30675],["conn.close()",29263],["file.close()",27296],["cursor.close()",17115],["fd.close()",16585],["s.close()",14661],["os.close(fd)",13483]]},{"word":"cls","context":[["cls.add_constructor([])",158817],["cls.add_method('GetTypeId',",47496],["def setUpClass(cls):",26359],["cls.add_method('Set',",23525],["cls.add_method('Copy',",22808],["cls.add_method('Deserialize',",20887],["cls.add_output_stream_operator()",20759],["cls.add_method('Serialize',",20718],["cls.add_method('Print',",20227],["cls.add_method('Get',",19441]]},{"word":"cmd","context":[["return cmd",7897],["os.system(cmd)",7448],["print cmd",5277],["cmd = [",5089],["parsed_args = self.check_parser(self.cmd, arglist, verifylist)",3682],["self.cmd = cmd",3156],["self.cmd = cmd",3156],["columns, data = self.cmd.take_action(parsed_args)",2154],["cmd,",2096],["return command(cmd, **dargs)",1904]]},{"word":"cms","context":[["doIsolated = cms.bool( False ),",3336],["SaveTag = cms.untracked.bool( False ),",3226],["L1GtReadoutRecordTag = cms.InputTag( 'hltGtDigis' )",3087],["ncandcut = cms.int32( 1 ),",3045],["cms.PSet(",2916],["lessThan = cms.bool( True ),",2827],["L1NonIsoCand = cms.InputTag( 'hltL1NonIsoRecoEcalCandidate' )",2520],["L1IsoCand = cms.InputTag( 'hltL1IsoRecoEcalCandidate' ),",2520],["appendToDataLabel = cms.string( \"\" ),",2031],["thrOverE2EB = cms.double( -1.0 ),",1966]]},{"word":"code","context":[["# Use of this source code is governed by a BSD-style license that can be",36414],[".. code-block:: python",12815],["#     * Redistributions of source code must retain the above copyright",12656],[".. code-block:: bash",10438],["code.putln(",8737],["return code",7996],["self.code = code",7845],["self.code = code",7845],["# Language code for this installation. All choices can be found here:",7665],["# * Redistributions of source code must retain the above copyright notice, this",5088]]},{"word":"coding","context":[["# -*- coding: utf-8 -*-",857663],["# coding: utf-8",46132],["# coding=utf-8",45684],["# -*- coding: UTF-8 -*-",20183],["# -*- coding:utf-8 -*-",14143],["# -*- coding: utf8 -*-",12606],["#-*- coding: utf-8 -*-",10232],["# -*- coding: iso-8859-1 -*-",6476],["#coding=utf-8",6244],["#-*- coding:utf-8 -*-",4982]]},{"word":"col","context":[["col = split.column()",4267],["col += 1",3121],["col = 0",3002],["for col in cols:",1825],["row = col.row(align=True)",1657],["return col",1641],["col.separator()",1608],["col = layout.column(align=True)",1538],["col = layout.column()",1503],["for col in columns:",1138]]},{"word":"collections","context":[["import collections",47480],["from collections import defaultdict",35412],["from collections import OrderedDict",28869],["from collections import namedtuple",20604],["from collections import deque",9795],["from collections import Counter",7145],["from collections import Iterable",1294],["from collections import Mapping",1017],["from collections import defaultdict, namedtuple",868],["from collections import defaultdict, OrderedDict",837]]},{"word":"color","context":[["self.color = color",4895],["self.color = color",4895],["color = [ '1' ],",3272],["if color:",2579],["return color",2151],["if color is None:",1585],["if color is not None:",1458],["color = [ 'Identity(2,3)' ],",1292],["def color(self):",1025],["color = None",983]]},{"word":"column","context":[["col = split.column()",4267],["}, # column",3664],["\"nodetype\" : \"column\",",3664],["for column in columns:",2296],["self.column = column",1884],["self.column = column",1884],["column = IntCol(val_type = \"monetary\")",1855],["column = FloatCol",1803],["col = layout.column(align=True)",1538],["col = layout.column()",1503]]},{"word":"columns","context":[["columns = []",3657],["return columns",2397],["for column in columns:",2296],["columns = [",2220],["columns, data = self.cmd.take_action(parsed_args)",2154],["def columns(self):",1993],["self.columns = columns",1691],["self.columns = columns",1691],["columns = self.column_classes(Author)",1542],["dbCommand = self.createSQLSelect(table, columns, whereMap, orderBy, lock)",1196]]},{"word":"com","context":[["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["Email                : volayaf at gmail dot com",4345],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956],["# URL: http://code.google.com/p/sickbeard/",3955]]},{"word":"command","context":[["# Usually you set \"language\" from the command line for these cases.",5937],["@manager.command",4463],["self.command = command",4220],["self.command = command",4220],["@click.command()",4088],["return command",3952],["os.system(command)",3459],["@cli.command()",3346],["command)",3052],["command=(",2886]]},{"word":"commands","context":[["### end Alembic commands ###",10050],["### commands auto generated by Alembic - please adjust! ###",10020],["import commands",7730],["commands = []",4961],["named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover",4331],["for command in commands:",2566],["return commands",2409],["fake_cli = self.driverSetup(commands, results)",1706],["commands.append(command)",1483],["commands = [",1332]]},{"word":"comment","context":[["if comment:",3731],["'comment': '',",3557],["comment = DIV(_class=\"tooltip\",",3509],["comment = raw_input(\"Comment (optional): \")",2932],["self.comment = comment",2762],["self.comment = comment",2762],["comment.save()",1939],["for comment in comments:",1461],["return comment",1384],["comment = ''",1328]]},{"word":"commit","context":[["db.session.commit()",39672],["session.commit()",21114],["conn.commit()",15717],["db.commit()",15012],["cr.commit()",8180],["self.conn.commit()",7628],["if commit:",7267],["transaction.commit()",7257],["def commit(self):",6833],["self.session.commit()",6642]]},{"word":"common","context":[["'django.middleware.common.CommonMiddleware',",27943],["from nova.openstack.common import log as logging",7265],["import common",6095],["if common.verbose:",5955],["from .common import InfoExtractor",4935],["from nova.openstack.common import jsonutils",3335],["from neutron.openstack.common import log as logging",3288],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["from nova.openstack.common.gettextutils import _",2988],["from tempest.common.utils import data_utils",2899]]},{"word":"compile","context":[["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["matches = re.compile(patronvideos,re.DOTALL).findall(data)",2084],["def compile(self):",1800],["matches = re.compile(patron, re.DOTALL).findall(data)",1079],["# Anyone is free to copy, modify, publish, use, compile, sell, or",730],["pattern = re.compile(",716],["_regexp_compile_cache[pattern] = sre_compile.compile(pattern)",664],["from re import compile",654],["url = re.compile('//.+?/([\\w]+)').findall(url)[0]",591],["regex = re.compile(",559]]},{"word":"compliance","context":[["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660],["# not use this file except in compliance with the License. You may obtain",30799],["you may not use this file except in compliance with the License.",18491],["*compliance: mandatory -- This method must be implemented.*",11283],["# \"License\"); you may not use this file except in compliance",9513],["#   you may not use this file except in compliance with the License.",9445],["#  you may not use this file except in compliance with the License.",7805],["# (the \"License\"); you may not use this file except in compliance with",7329],["#    you may not use this file except in compliance with the License.",3962]]},{"word":"compute","context":[["self.compute.terminate_instance(self.context, instance, [], [])",4923],["from nova.compute import vm_states",3532],["from nova.compute import task_states",3119],["def compute(self, EV):",2737],["self.compute.run_instance(self.context, instance=instance)",2729],["self.mox.StubOutWithMock(self.compute,",2719],["from nova import compute",2678],["from nova.compute import flavors",2665],["self.compute_api = compute.API()",2548],["self.compute.build_and_run_instance(self.context, instance, {}, {}, {},",2487]]},{"word":"conditions","context":[["# furnished to do so, subject to the following conditions:",24476],["# modification, are permitted provided that the following conditions are met:",20828],["# modification, are permitted provided that the following conditions are",14877],["# the following conditions:",14452],["# notice, this list of conditions and the following disclaimer.",9328],["# modification, are permitted provided that the following conditions",8542],["# copyright notice, this list of conditions and the following disclaimer",8007],["furnished to do so, subject to the following conditions:",7073],["#       notice, this list of conditions and the following disclaimer.",6946],["#    notice, this list of conditions and the following disclaimer.",6617]]},{"word":"conf","context":[["from django.conf import settings",146012],["from django.conf.urls import patterns, include, url",15417],["from django.conf.urls import url",13016],["from django.conf.urls import patterns, url",12368],["from django.conf.urls import include, url",8033],["from django.conf.urls.defaults import *",7132],["@conf",5788],["from django.conf.urls.static import static",4736],["return conf",4474],["self.conf = conf",4307]]},{"word":"config","context":[["from oslo.config import cfg",17813],["return config",16780],["self.config = config",16331],["self.config = config",16331],["import config",14860],["config = {",10818],["def __init__(self, config):",9329],["return callback(config)",9262],["config = ET.Element(\"config\")",9129],["config = ET.Element(\"config\")",9129]]},{"word":"configuration","context":[["# All configuration values have a default; values that are commented out",25768],["# Note that not all possible configuration values are present in this",25557],["# -- General configuration -----------------------------------------------------",12513],["# -- General configuration ------------------------------------------------",11987],[":param operation_config: :ref:`Operation configuration",6589],["# more details on how to customize your logging configuration.",6170],["# performed by this configuration is to send an email to",6083],["# A sample logging configuration. The only tangible logging",6076],["# The name of a javascript file (relative to the configuration directory) that",5913],["# Example configuration for intersphinx: refer to the Python standard library.",5883]]},{"word":"conn","context":[["conn.close()",29263],["conn.commit()",15717],["self.conn.commit()",7628],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)",7492],["cur = conn.cursor()",6537],["return conn",6197],["cursor = conn.cursor()",6176],["c = conn.cursor()",5787],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)",5112],["self.conn.close()",4259]]},{"word":"connect","context":[["def connect(self):",11955],["self.connect()",6800],["conn.connect()",2025],["frappe.connect()",1508],["connection = engine.connect()",1268],["def connect():",1237],["conn = engine.connect()",1182],["s.connect((host, port))",983],["c1 = p.connect()",915],["client.connect()",905]]},{"word":"connection","context":[["with connection.schema_editor() as editor:",13909],["cursor = connection.cursor()",13131],["connection.close()",11290],["self.connection = connection",6506],["self.connection = connection",6506],["from django.db import connection",6172],["self.connection = None",4811],["self.connection.close()",4444],["connection.commit()",3795],["def __init__(self, connection):",3751]]},{"word":"const","context":[["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('ns3::Address const &', 'address')],",7988],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["[param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])",4771],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["[param('ns3::EventId const &', 'id')],",3761],["[param('ns3::Ipv4Mask const &', 'mask')],",3138],["[param('ns3::Ptr< ns3::Packet const >', 'packet')])",2999]]},{"word":"constants","context":[["from constants import *",2637],["import constants",2527],["# constants",2380],["from neutron.common import constants",2254],["from ansible import constants as C",1852],["from ganeti import constants",1818],["from neutron.plugins.common import constants",1288],["from pylib import constants",1243],["from . import constants",1114],["from OpenGL import platform, constants, constant, arrays",980]]},{"word":"constructor","context":[["constructor.",1719],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined\")",1651],["def __init__(self, *args, **kwargs): raise AttributeError, \"No constructor defined\"",1279],["Default class constructor.",1241],["## attribute.h (module 'core'): ns3::EmptyAttributeValue::EmptyAttributeValue() [constructor]",1189],["## callback.h (module 'core'): ns3::CallbackValue::CallbackValue() [constructor]",1189],["## callback.h (module 'core'): ns3::CallbackBase::CallbackBase(ns3::CallbackBase const & arg0) [copy constructor]",1189],["## type-id.h (module 'core'): ns3::TypeIdChecker::TypeIdChecker(ns3::TypeIdChecker const & arg0) [copy constructor]",1189],["## object-base.h (module 'core'): ns3::ObjectBase::ObjectBase() [constructor]",1189],["## callback.h (module 'core'): ns3::CallbackChecker::CallbackChecker() [constructor]",1189]]},{"word":"contain","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# Add any paths that contain custom static files (such as style sheets)",1149],["# will contain a <link> tag referring to it.  The value of this option",1135],["# Email subject *must not* contain newlines",785],["# directories (produced by setup.py build) will contain a much shorter file",712],["(crashes, non-termination) if the inputs do contain infinities or NaNs.",611]]},{"word":"container","context":[["..  container:: example",5620],["return container",1951],["self.container = container",1836],["self.container = container",1836],["differing.append(container)",1438],["<div class=\"container\">",1224],["'container', 'object')",1186],["for container in containers:",1158],["if container:",1117],["id = container['Id']",996]]},{"word":"containing","context":[["# This file is execfile()d with the current directory set to its containing dir.",12868],["# containing dir.",12692],["clean_lines: A CleansedLines instance containing the file.",7423],["# The format is a list of tuples containing the path and title.",6966],["# A tuple containing the cover image and cover page html template filenames.",3089],[":param task: a TaskManager instance containing the node to act on.",1446],["spec: The target dictionary containing the properties of the target.",839],["# Set this to the absolute path to the folder (NOT the file!) containing the",830],["containing parts covered by the terms of the Bink SDK EULA, 3ds Max EULA,",796],["# This file is execfile()d with the current directory set to its containing",458]]},{"word":"contains","context":[["This module contains the WSGI application used by Django's development server",4332],["# this repository contains the full copyright notices and license terms.",1668],["# For simplicity, this file contains only the most important settings by",726],["# that just contains the computed version number.",712],["#this repository contains the full copyright notices and license terms.",672],["\"/span[contains(@class, 'arrow')]\")),",609],["(\"//div[contains(@style,'static') or contains(@style, 'fixed')]\"",592],["(\"//div[contains(@style,'static') or contains(@style, 'fixed')]\"",592],["# For simplicity, this file contains only settings considered important or",531],["\"condition\": \"contains\"",484]]},{"word":"content","context":[["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["return content",14274],["req.headers[\"content-type\"] = \"application/json\"",6023],["# This is also used if you do content translation via gettext catalogs.",5941],["content = f.read()",5281],["doc = pq(r.content)",4789],["if content:",4618],["self.content = content",4424],["self.content = content",4424],["f.write(content)",4129]]},{"word":"content_type","context":[["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["self.assertEqual(response.content_type, 'application/json')",11194],["content_type='application/json')",6819],["content_type='application/json',",4881],["self.assertEqual('application/json', response.content_type)",3748],["content_type=\"application/json\")",3476],["req.content_type = 'application/json'",2849],["content_type=\"application/json\",",2143],["content_type='application/json'",1870]]},{"word":"contents","context":[["def __init__(self, contents=None):",4826],["if contents is not None: self.MergeFromString(contents)",4774],["if contents is not None: self.MergeFromString(contents)",4774],["# The depth of the table of contents in toc.ncx.",3484],["return contents",3290],["contents = f.read()",2640],["f.write(contents)",2184],["contents = []",2081],["bits = token.contents.split()",1198],["contents = contents,",1129]]},{"word":"context","context":[["context = {}",45757],["return context",39926],["if context is None:",38917],["context = {",26955],["self.context,",17829],["ctxt = context.get_admin_context()",16555],["context=context)",12690],["context=context)",12690],["context,",11558],["def render(self, context):",11102]]},{"word":"continue","context":[["continue",1254837],["continue;",8883],["#    continue",2306],["#continue",1621],["#     continue",1068],["# continue",933],["#             continue",797],["if not line: continue",693],["(Pdb) continue",671],["#            continue",648]]},{"word":"contrib","context":[["from django.contrib import admin",55424],["from django.contrib.auth.models import User",43609],["'django.contrib.contenttypes',",29023],["'django.contrib.auth',",28733],["'django.contrib.sessions',",27946],["'django.contrib.sessions.middleware.SessionMiddleware',",27272],["'django.contrib.auth.middleware.AuthenticationMiddleware',",26570],["'django.contrib.messages.middleware.MessageMiddleware',",25542],["'django.contrib.messages',",24760],["'django.contrib.staticfiles',",24746]]},{"word":"controller","context":[["resp = req.get_response(self.controller)",7236],["servers = self.controller.index(req)['servers']",3015],["self.assertRaises(webob.exc.HTTPBadRequest, self.controller.create,",2963],["res_dict = self.controller.index(req)",2809],["\"\"\" RESTful CRUD controller \"\"\"",2758],["self.controller = controller",2512],["self.controller = controller",2512],["controller = Controller()",2400],["@controller.protected()",2374],["self.controller.create,",2138]]},{"word":"copy","context":[["# You should have received a copy of the GNU General Public License",202164],["# You may obtain a copy of the License at",143458],["#    a copy of the License at",123726],["import copy",69509],["#    You should have received a copy of the GNU Affero General Public License",41411],["You should have received a copy of the GNU General Public License",38555],["# You should have received a copy of the GNU Affero General Public License",31967],["# a copy of the License at",30789],["# Permission is hereby granted, free of charge, to any person obtaining a copy",23606],["#    You should have received a copy of the GNU General Public License",20976]]},{"word":"copyright","context":[["# The above copyright notice and this permission notice shall be included in",19741],["# The above copyright notice and this permission notice shall be included",13942],["#     * Redistributions of source code must retain the above copyright",12656],["# The above copyright notice and this permission notice shall be",8293],["# copyright notice, this list of conditions and the following disclaimer",8007],["# this work for additional information regarding copyright ownership.",7272],["# The above copyright notice and this permission notice shall be included in all",6263],["# Part of Odoo. See LICENSE file for full copyright and licensing details.",5998],["# * Redistributions in binary form must reproduce the above copyright notice,",5753],["The above copyright notice and this permission notice shall be included in",5497]]},{"word":"core","context":[["from django.core.urlresolvers import reverse",57527],["from distutils.core import setup",29561],["from django.core.wsgi import get_wsgi_application",16998],["from django.core.management import execute_from_command_line",15774],["from django.core.exceptions import ImproperlyConfigured",12252],["from django.core.exceptions import ValidationError",10689],["from django.core.management.base import BaseCommand",10350],["from django.core.cache import cache",9125],["from django.core.exceptions import ObjectDoesNotExist",7812],["from django.core.management.base import BaseCommand, CommandError",7751]]},{"word":"count","context":[["count = 0",60211],["count += 1",49856],["return count",11406],["count = count + 1",8332],["count = count + 1",8332],["count = 1",8178],["if count == 0:",7015],["self.count = 0",5979],["def count(self):",5510],["if count:",5319]]},{"word":"course","context":[["course_id=self.course.id,",3506],["self.course = CourseFactory.create()",3035],["'course': course,",2412],["'course': course,",2412],["course = CourseFactory.create()",1819],["self.course.id,",1499],["course = self._create_course(\"verified\")",1450],["\"course_id\": unicode(self.course.id),",1433],["course.id,",1374],["self.course.save()",1180]]},{"word":"course_id","context":[["course_id=self.course.id,",3506],["course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id)",2410],["course_id=course_id,",2325],["course_id=course_id,",2325],["course_id = SlashSeparatedCourseKey.from_deprecated_string(course_id)",2324],["course_id = SlashSeparatedCourseKey.from_deprecated_string(course_id)",2324],["course_key = CourseKey.from_string(course_id)",1867],["course_id,",1829],["\"course_id\": unicode(self.course.id),",1433],["course_id=course.id,",1071]]},{"word":"cr","context":[["cr.commit()",8180],["def write(self, cr, uid, ids, vals, context=None):",5277],["def unlink(self, cr, uid, ids, context=None):",5248],["def create(self, cr, uid, vals, context=None):",4588],["for line in self.browse(cr, uid, ids, context=context):",4037],["def name_get(self, cr, uid, ids, context=None):",3918],["for move in self.browse(cr, uid, ids, context=context):",3875],["cr.execute(\"\"\"",3435],["def copy(self, cr, uid, id, default=None, context=None):",3188],[":param cr: database cursor",2631]]},{"word":"create","context":[["def create(kernel):",15717],["def create(self):",7433],["def create(self, cr, uid, vals, context=None):",4588],["M(\"Create\", m=\"create\"),",4453],[").create()",4065],["def create():",3761],["def create(*args, **kwargs):",3358],["if create:",3152],["old_create = compute_api.API.create",3132],["self.stubs.Set(compute_api.API, 'create', create)",3121]]},{"word":"created","context":[["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),",18509],["if created:",8738],["created = models.DateTimeField(auto_now_add=True)",3557],["# HTML files that should be inserted before the pages created by sphinx.",3483],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),",3078],["if not created:",2383],["('created', models.DateTimeField(auto_now_add=True)),",2337],["'created': ('django.db.models.fields.DateTimeField', [], {}),",1992]]},{"word":"ctx","context":[["return ctx",5463],["ctx = context.get_admin_context()",4990],["ctx.stroke()",4035],["ctx = context.copy()",3839],["ctx.beginPath()",3583],["ctx = {",3293],["ctx.save()",2411],["ctx.restore()",2346],["ctx = canvas.getContext(\"2d\")",2171],["ctx.update({",2019]]},{"word":"ctxt","context":[["ctxt = context.get_admin_context()",16555],["self.ctxt = context.get_admin_context()",3934],["self.ctxt,",3672],["ctxt,",1789],["ctxt.reraise = False",1554],["with excutils.save_and_reraise_exception() as ctxt:",1472],["result = db.instance_get_all_by_filters(self.ctxt,",1470],["db.fixed_ip_create(self.ctxt, dict(",1272],["network = db.network_create_safe(self.ctxt, {})",1127],["self.ctxt, method,",1090]]},{"word":"current","context":[["# If true, the current module name will be prepended to all description",27546],["db = current.db",18889],["s3db = current.s3db",15509],["T = current.T",13042],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708],["\"status\" : \"current\",",7293],["filename: The name of the current file.",6779],["settings = current.deployment_settings",5506],["s3 = current.response.s3",4743]]},{"word":"cursor","context":[["cursor.close()",17115],["cursor = connection.cursor()",13131],["cursor = connection.cursor()",13131],["cursor.execute(\"\"\"",7474],["cur = con.cursor()",7091],["cursor = db.cursor()",6723],["cursor = db.cursor()",6723],["cur = conn.cursor()",6537],["cursor = conn.cursor()",6176],["cursor = conn.cursor()",6176]]},{"word":"custom","context":[["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["might make sense to replace the whole Django WSGI application with a custom one",4328],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",2317],["# 'zh' user can custom change `jieba` dictionary path.",1350],["# Add any paths that contain custom static files (such as style sheets)",1149],["# must exist either in Sphinx' static/ path, or in one of the custom paths",846]]},{"word":"d","context":[["return d",83705],["#today_fmt = '%B %d, %Y'",23301],["d = {}",22596],["#html_last_updated_fmt = '%b %d, %Y'",22077],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708],["d = {",5640],["for d in data:",5326],["d = defer.Deferred()",5133],["def TryMerge(self, d):",4786]]},{"word":"data","context":[["return data",116782],["data = {",66873],["data = {}",31971],["if data:",27062],["data = []",26383],["if not data:",23224],["self.data = data",20553],["self.data = data",20553],["if data is None:",14711],["data = None",12423]]},{"word":"database","context":[["database.",2688],[":param cr: database cursor",2631],["self.database = database",2066],["self.database = database",2066],["# Test the database alteration",1917],["@param cr: A database cursor",1523],["if database:",1238],["database = None",1235],["@param cr: the current row, from the database cursor,",1089],["import database",1001]]},{"word":"date","context":[["from datetime import date",12020],["today = datetime.date.today()",3879],["return date",2957],["if date:",2833],["from datetime import date, datetime",2282],["'date': date,",2253],["'date': date,",2253],["from datetime import date, timedelta",2076],["from datetime import datetime, date",2066],["today = date.today()",2050]]},{"word":"datetime","context":[["import datetime",194963],["from datetime import datetime",84929],["from datetime import datetime",84929],["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["from datetime import datetime, timedelta",21642],["from datetime import datetime, timedelta",21642],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884]]},{"word":"db","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["from django.db import models",109438],["from django.db import models, migrations",41876],["from south.db import db",40923],["from south.db import db",40923],["db.session.commit()",39672],["from django.db import migrations, models",33807],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230]]},{"word":"de","context":[["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",3798],["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'",2116],["with translation.override('de'):",1696],["#    Gerhard Lausser, Gerhard.Lausser@consol.de",1463],["SUMO, Simulation of Urban MObility; see http://sumo.dlr.de/",1338],["# PARTICULAR PURPOSE. See the  GNU General Public License for more de-",1067],["# The official homepage is at http://mathias-kettner.de/check_mk.",1044],["address='ca:fe:de:ad:be:ef',",1004],["with translation.override('de', deactivate=True):",959],["\"\"\" Import item de-duplication \"\"\"",882]]},{"word":"debug","context":[["if debug:",29911],["if self.debug:",19933],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["'django.template.context_processors.debug',",9474],["logger.debug(",7081],["debug = False",5589],["self.debug = debug",5304],["self.debug = debug",5304],["self.debug(",5003],["#debug",4933]]},{"word":"decode","context":[["has_default_value=False, default_value=_b(\"\").decode('utf-8'),",9915],["data = rv.data.decode('utf-8')",3446],["content = json.loads(response.content.decode('UTF-8'))",1256],["def decode(self,input,errors='strict'):",966],["def decode(self, input, final=False):",952],["def decode(self, data):",899],["def decode(self):",880],["stdout = stdout.decode()",871],["decode=Codec().decode,",792],["decode=Codec().decode,",792]]},{"word":"def","context":[["def __init__(self):",560894],["def setUp(self):",497902],["def __str__(self):",276248],["def __repr__(self):",251573],["def main():",184278],["def tearDown(self):",151302],["def __init__(self, *args, **kwargs):",130790],["def run(self):",118539],["def __unicode__(self):",105295],["def __eq__(self, other):",90006]]},{"word":"default","context":[["default=False,",45686],["'default': {",39458],["return default",34523],["default=None,",27378],["# output. They are ignored by default.",26989],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",25914],["# serve to show the default.",25778],["# All configuration values have a default; values that are commented out",25768]]},{"word":"defaults","context":[["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["defaults = {",9262],["defaults.update(kwargs)",8704],["from django.conf.urls.defaults import *",7132],["# The language of the text. It defaults to the language option",3473],["defaults={",2526],["from django.conf.urls.defaults import patterns, url",2471],["defaults = {}",2360],["# The basename for the epub file. It defaults to the project name.",1860],["return defaults",1694]]},{"word":"defined","context":[["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined\")",1651],["\"\"\"list of weak references to the object (if defined)\"\"\"",1408],["def __init__(self, *args, **kwargs): raise AttributeError, \"No constructor defined\"",1279],["def __init__(self, *args, **kwargs): raise AttributeError(\"No constructor defined - class is abstract\")",883],["# pylint: disable=attribute-defined-outside-init",880],["def __init__(self): raise AttributeError, \"No constructor defined\"",844],["# use admin user for accessing objects having rules defined on store fields",654],["# other values from the config, defined by the needs of env.py,",587],["If any of the proposed values is over the defined quota, an",517],["defined.",508]]},{"word":"del","context":[["del params['kwargs']",5574],["del header_params['Accept']",2961],["del writer",2413],["del self[key]",2148],["del sys.path[0]",1703],["del swig_import_helper",1665],["del version_info",1620],["del c",1460],["del lines[0]",1397],["del e",1386]]},{"word":"delete","context":[["def delete(self):",17398],["if delete:",3451],["def delete(self, *args, **kwargs):",3148],["self.delete()",2710],["def delete(self, key):",2590],["obj.delete()",2521],["'delete',",1917],["def delete(self, req, id):",1642],["user.delete()",1630],["def delete(self, name):",1559]]},{"word":"deleted","context":[["'deleted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),",3142],["'deleted': False,",2730],["'deleted': 0,",1707],["update({'deleted': True,",1463],["'deleted': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),",1083],["deleted.",1060],["'deleted': None,",1037],["if deleted:",1036],["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["Column('deleted', Boolean),",853]]},{"word":"desc","context":[["desc:",4287],["desc = \"\"\"",2948],["return desc",2479],["desc = \"\"\"\\",2040],["if desc:",1881],["\"desc\": \"\"\"\"\"\",",1733],["desc = \"\"",1631],["desc = ''",1614],["self.desc = desc",1610],["self.desc = desc",1610]]},{"word":"description","context":[["description:",85731],["# If true, the current module name will be prepended to all description",27546],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# (source start file, name, description, authors, manual section).",23889],["#  dir menu entry, description, category)",20993],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),",11344],["self.description = description",10385],["self.description = description",10385],["\"description\" :",8796]]},{"word":"dest","context":[["return dest",1897],["if os.path.exists(dest):",1852],["dest=dest,",1461],["dest=dest,",1461],["dest,",1434],["self.dest = dest",1279],["self.dest = dest",1279],["if not os.path.exists(dest):",1224],["operands=[Operand(type=\"SIMDReg\", size=128, dest=\"Spare\"),",996],["if not dest:",962]]},{"word":"details","context":[["# GNU General Public License for more details.",187562],["#    GNU Affero General Public License for more details.",40024],["GNU General Public License for more details.",37820],["# GNU Affero General Public License for more details.",29547],["#    GNU General Public License for more details.",24253],["# General Public License for more details.",23459],["#  GNU General Public License for more details.",16892],["# Lesser General Public License for more details.",14026],["# GNU Lesser General Public License for more details.",13863],["# details.",12281]]},{"word":"dev","context":[["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["return dev",2898],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#secret-key",1654],["<target dev='vda' bus='virtio'/>",1618],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#debug",1451],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#databases",1415],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#template-debug",1409],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url",1368],["# See: https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs",1333],["https://docs.djangoproject.com/en/dev/ref/settings/",1211]]},{"word":"device","context":[["for device in devices:",3180],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["self.device = device",2821],["self.device = device",2821],["return device",2536],["[param('ns3::Ptr< ns3::NetDevice >', 'device')])",2066],["if device:",1787],["if not device:",1526],["device,",1378],["(self.call.device.RunShellCommand(",1166]]},{"word":"dict","context":[["dict(",19543],[":rtype: dict",13130],["return dict(",12427],[":param dict custom_headers: headers that will be added to the request",8074],["if isinstance(value, dict):",5674],["return dict()",5538],["expected=dict(",4150],["elif isinstance(value, dict):",4022],["dict = {}",3514],["@rtype: dict",3502]]},{"word":"dictionary","context":[["# A dictionary with options for the search language support, empty by default.",5913],["dictionary.",2041],["args - A dictionary. The following are options for keys:",1624],["return dictionary",1440],["# 'zh' user can custom change `jieba` dictionary path.",1350],["@param context: A standard dictionary",1223],["dictionary = {}",1064],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],[":param resources: A dictionary of the registered resources.",1024],["@param context: A standard dictionary for contextual values",876]]},{"word":"dir","context":[["#  dir menu entry, description, category)",20993],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# containing dir.",12692],["for dir in dirs:",2449],["os.makedirs(dir)",2278],["if not os.path.exists(dir):",1787],["# Get the project root dir, which is the parent dir of this",1397],["# Get the project root dir, which is the parent dir of this",1397],["# Insert the project root dir as the first element in the PYTHONPATH.",1389],["if dir:",1344]]},{"word":"directory","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# relative to this directory. They are copied after the builtin static files,",26167],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name of an image file (relative to this directory) to place at the top",25393],["# add these directories to sys.path here. If the directory is relative to the",24896],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# List of patterns, relative to source directory, that match files and",24527],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708]]},{"word":"dirname","context":[["BASE_DIR = os.path.dirname(os.path.dirname(__file__))",7153],["BASE_DIR = os.path.dirname(os.path.dirname(__file__))",7153],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",7079],["here = os.path.abspath(os.path.dirname(__file__))",3786],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["from os.path import dirname",3538],["os.makedirs(dirname)",3435],["os.path.dirname(__file__),",2648],["here = path.abspath(path.dirname(__file__))",2382]]},{"word":"disable","context":[["# pylint: disable=protected-access",8883],["# pylint: disable=unused-argument",5175],["# pylint: disable=invalid-name",4613],["# pylint: disable=no-member",4094],["def disable(self):",3794],["except Exception:  # pylint: disable=broad-except",3224],["# pylint: disable=W0212",2969],["# pylint: disable=too-few-public-methods",2500],["# pylint: disable=C0301",2381],["# pylint: disable=E1101",2223]]},{"word":"disk","context":[["</disk>",5770],["'device_type': 'disk',",2622],["<disk type='file'>",2547],["<disk type='block'>",1394],["for disk in disks:",1365],["'type': 'disk', 'boot_index': '1'},",1006],["\"<disk type='file'><driver name='qemu' type='qcow2'/>\"",940],["\"<target dev='vda' bus='virtio'/></disk>\"",814],["'x-image-meta-disk-format': 'vhd',",754],["\"<source file='/test/disk'/>\"",749]]},{"word":"display","context":[["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648],["pygame.display.flip()",7399],["pygame.display.update()",5775],["def display(self):",4033],["sS'display'",2685],["if display:",1910],["return p.display()",1507],["- 'ln' *string* - The language to display the interface in",1421],["self.display()",1339],["- 'ln' *string* - The language to display",1299]]},{"word":"distributed","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["# This program is distributed in the hope that it will be useful,",137492],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["#    This program is distributed in the hope that it will be useful,",58120],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["This program is distributed in the hope that it will be useful,",27838],["distributed under the License is distributed on an \"AS IS\" BASIS,",19724]]},{"word":"distribution","context":[["# distribution.",8323],["#       documentation and/or other materials provided with the distribution.",6196],["#   and/or other materials provided with the distribution.",6180],["#    documentation and/or other materials provided with the distribution.",2848],["#    distribution.",2783],["# documentation and/or other materials provided with the distribution;",2750],["# you should have received as part of this distribution. The terms",2697],["#     documentation and/or other materials provided with the distribution.",2688],["#        the distribution.",2647],["#   documentation and/or other materials provided with the distribution.",2610]]},{"word":"div","context":[["</div>",49263],["<div>",3854],["<div class=\"bibcircbottom\">",2053],["return div",1642],["div = DivWdg()",1475],["<div class=\"row\">",1248],["<div class=\"container\">",1224],["'</div>'",754],["</div>\"\"\"",701],["<div class=\"form-group\">",598]]},{"word":"django","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["from django.conf import settings",146012],["from django.db import models",109438],["from django.core.urlresolvers import reverse",57527],["from django.contrib import admin",55424],["from django.utils.translation import ugettext_lazy as _",45041],["from django.contrib.auth.models import User",43609],["from django.db import models, migrations",41876],["from django.test import TestCase",35866]]},{"word":"do","context":[["# furnished to do so, subject to the following conditions:",24476],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["# permit persons to whom the Software is furnished to do so, subject to",13842],["# This will get replaced with a git SHA1 when you do a git archive",8306],["furnished to do so, subject to the following conditions:",7073],["# This is also used if you do content translation via gettext catalogs.",5941],["# persons to whom the Software is furnished to do so, subject to the fol-",3151],["def do(self):",2598],["# Software is furnished to do so, subject to the following conditions:",2452],["Software is furnished to do so, subject to the following",2378]]},{"word":"doc","context":[["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["return doc",7234],["# no doc",6135],["doc = None",4872],["doc = pq(r.content)",4789],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["doc = pq(response.content)",3366],["# Uncomment the admin/doc line below to enable admin documentation:",2891],["for doc in docs:",2851],["if doc:",2809]]},{"word":"docs","context":[["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956],["https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/",3284],["# https://docs.djangoproject.com/en/1.6/topics/i18n/",3122]]},{"word":"document","context":[["# The master toctree document.",28001],["# Grouping the document tree into LaTeX files. List of tuples",27516],["# Custom sidebar templates, maps document names to template names.",27115],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# Grouping the document tree into Texinfo files. List of tuples",21017],["from frappe.model.document import Document",2436],["return document",1655],["<document source=\"test data\">",1608],["from browser import document",1541],["# 從 browser 導入 document",1504]]},{"word":"documentation","context":[["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["# documentation.",26366],["# \"<project> v<release> documentation\".",25615],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# of this software and associated documentation files (the \"Software\"), to deal",20351],["# a copy of this software and associated documentation files (the",13732],["# directly to the root of the documentation.",11811],["# in the documentation and/or other materials provided with the",8026]]},{"word":"does","context":[["# In applying this license, CERN does not",2687],["\"\"\"This class does not support CRUD Operations please use parent.",1612],["# What does your project relate to?",1318],["else:            # this should never happen... but if it does",1203],["# In applying this licence, CERN does not waive the privileges and immunities",1119],["A return of true does not guarantee successful authorization. A",1061],["# Bear in mind that compilation_info.compiler_flags_ does NOT return a",877],["# The compilation_commands.json file generated by CMake does not have entries",727],["# this does not exist!",659],["self.module.fail_json(msg=\"Group %s does not exist\" % self.group)",544]]},{"word":"doesn","context":[["pass # Python < 2.2 doesn't have 'property'.",1137],["\"Policy doesn't allow %s to be performed.\" % rule_name,",958],["pass  # Python < 2.2 doesn't have 'property'.",598],["fmt = \"tag '%s' doesn't start with prefix '%s'\"",504],["raise NotThisMethod(\"rootdir doesn't start with parentdir_prefix\")",491],["image_id = 1  # doesn't matter",467],["print(\"guessing rootdir is '%s', but '%s' doesn't start with \"",459],["# Compile the list of packages available, because distutils doesn't have",458],["pieces[\"error\"] = (\"tag '%s' doesn't start with prefix '%s'\"",446],["# listunspent doesn't give addresses, so:",444]]},{"word":"domain","context":[["</domain>",3525],["'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",3327],["self.domain = domain",3263],["self.domain = domain",3263],["<domain type='kvm'>",2823],["# Hosts/domain names that are valid for this site; required if DEBUG is False",2707],["return domain",2522],["if domain:",2501],["'Meta': {'ordering': \"('domain',)\", 'object_name': 'Site', 'db_table': \"'django_site'\"},",2260],["# Copyright: This module has been placed in the public domain.",1962]]},{"word":"don","context":[["# SECURITY WARNING: don't run with debug turned on in production!",13613],["# Make this unique, and don't share it with anybody.",7163],["# The contents of this file are pickled, so don't put values in the namespace",842],["# keywords. When used from setup.py, we don't want to import _version.py,",676],["we don't even need a DBAPI to be available.",667],["# There's gotta be a better way of doing this but we don't wanna",652],["# py2exe/bbfreeze/non-CPython implementations don't do __file__, in which",648],["# AWS cache settings, don't change unless you know what you're doing:",591],["htmltext = \"<html><body>You are either not carrying out your quest or don't meet the criteria.</body></html>\"",554],["# we don't want that an exception blocks the init_host",550]]},{"word":"done","context":[["done = True",9096],["done = False",7731],["while not done:",4299],["def done(self):",2966],["self.done = True",2890],["if done:",2239],["self.done = False",2077],["done = 0",1752],["print 'done'",1744],["print \"done\"",1681]]},{"word":"double","context":[["'double',",51292],["cls.add_constructor([param('double', 'v')])",2259],["thrOverE2EB = cms.double( -1.0 ),",1966],["thrOverE2EE = cms.double( -1.0 ),",1966],["MaxEta = cms.double( 2.5 ),",1813],["\"\"\"relative_rate(self) -> double\"\"\"",1330],["MaxDz = cms.double( 9999.0 ),",1198],["NSigmaPt = cms.double( 0.0 ),",1198],["## nstime.h (module 'core'): double ns3::Time::GetSeconds() const [member function]",1142],["## int64x64-double.h (module 'core'): ns3::int64x64_t::int64x64_t(long unsigned int v) [constructor]",1108]]},{"word":"driver","context":[["self.driver = driver",3141],["self.driver = driver",3141],["self.mox.StubOutWithMock(self.compute.driver,",2095],["driver = self.driver",1899],["driver = self.driver",1899],["from nova.virt import driver",1587],["driver=self.driver)",1458],["driver=self.driver)",1458],["block_device_mapping = driver.block_device_info_get_mapping(",1398],["common = self.driver._login()",1341]]},{"word":"dt","context":[["import datetime as dt",5222],["return dt",3473],["def utcoffset(self, dt):",3119],["def dst(self, dt):",2866],["def tzname(self, dt):",2718],["def update(self, dt):",1396],["if dt is None:",1272],["from datetime import datetime as dt",1228],["Event.objects.create(dt=dt)",1219],["Event.objects.create(dt=dt)",1219]]},{"word":"dtype","context":[["if dtype is None:",2494],["dtype : data-type, optional",1586],["def dtype(self):",1461],["self.dtype = dtype",1411],["self.dtype = dtype",1411],["if dtype is not None:",1365],["dtype=dtype)",1358],["dtype=dtype)",1358],["dtype : dtype, optional",1289],["dtype : dtype, optional",1289]]},{"word":"dumps","context":[["req.body = jsonutils.dumps(body)",6621],["self.req.body = jsonutils.dumps(self.body)",5931],["req.body = json.dumps(body)",2045],["return json.dumps({",2030],["return json.dumps(data)",1828],["from json import dumps",1759],["data = json.dumps(data)",1630],["return json.dumps(result)",1418],["data=json.dumps({",1263],["body = json.dumps(arg_hash, cls=JSONObjectEncoder)",1256]]},{"word":"e","context":[["except Exception as e:",271261],["except Exception, e:",164240],["raise e",91385],["print e",27464],["except OSError as e:",24981],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["except ValueError as e:",20908],["except IOError as e:",18875],["except OSError, e:",16635],["print(e)",15921]]},{"word":"each","context":[["# If true, the index is split into individual pages for each letter.",26818],["# further.  For a list of options available for each theme, see the",24845],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["# theme further.  For a list of options available for each theme, see the",1130],["\"\"\"Run before each test.\"\"\"",921],["# what each function returns vs. what it's supposed to return.",882],["Two dimensional array with n rows and one column for each",793],["lines: An array of strings, each representing a line of the file.",677],["ids = [each['id'] for each in node_json]",578],["ids = [each['id'] for each in node_json]",578]]},{"word":"either","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["# the Free Software Foundation, either version 3 of the License, or",124116],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# the Free Software Foundation; either version 2 of the License, or",46274],["#    published by the Free Software Foundation, either version 3 of the",33963],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["the Free Software Foundation, either version 3 of the License, or",30750],["# There are two options for replacing |today|: either, you set today to some",25812],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792]]},{"word":"element","context":[["return element",6426],["for element in elements:",2903],["# A sequence of (type, uri, title) tuples for the guide element of content.opf.",2086],["if element is None:",1758],["def __init__(self, element):",1588],["self.element = element",1540],["self.element = element",1540],["</xs:element>",1501],["element.click()",1420],["# Insert the project root dir as the first element in the PYTHONPATH.",1389]]},{"word":"elif","context":[["elif fid == 2:",12258],["elif fid == 3:",7630],["elif fid == 1:",4472],["elif fid == 4:",4083],["elif isinstance(value, dict):",4022],["elif request.method == 'POST':",3136],["elif isinstance(value, list):",2874],["elif len(args) == 2:",2742],["elif child_.nodeType == Node.ELEMENT_NODE and \\",2677],["elif len(args) == 1:",2391]]},{"word":"else","context":[["else:",10375088],["else :",79897],["#else:",23846],["# else:",14528],["} else {",9678],["else",7973],["#     else:",6285],["#        else:",6255],["#else",5790],["# If true, `todo` and `todoList` produce output, else they produce nothing.",5776]]},{"word":"email","context":[["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),",23830],["# performed by this configuration is to send an email to",6083],["from email.mime.text import MIMEText",4540],["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),",3938],["if email:",3408],["self.email = email",3100],["self.email = email",3100],["import email",2901],["email=email,",2602],["email=email,",2602]]},{"word":"empty","context":[["# implements a search results scorer. If empty, the default will be used.",5914],["# A dictionary with options for the search language support, empty by default.",5913],["def empty(self):",3596],["\"\"\"empty message",2540],["'PORT': '',                      # Set to empty string for default. Not used with sqlite3.",2338],["'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.",2249],["if empty:",1619],["empty = False",1524],["incemp = raw_input(\"Include empty? (true/false, optional): \")",1468],["# The empty string is equivalent to '%b %d, %Y'.",1348]]},{"word":"en","context":[["LANGUAGE_CODE = 'en-us'",19724],["# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name",7832],["# See http://docs.djangoproject.com/en/dev/topics/logging for",6156],["__docformat__ = 'restructuredtext en'",5344],["#html_search_language = 'en'",4701],["__docformat__ = \"restructuredtext en\"",4405],["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012]]},{"word":"enabled","context":[["'enabled': True,",4050],["if enabled:",2724],["enabled = True",2430],["self.enabled = False",2429],["if not self.enabled:",2316],["self.enabled = True",2250],["if self.enabled:",1716],["enabled=True,",1715],["enabled = False",1586],["'enabled': True}",1373]]},{"word":"encode","context":[["def encode(self):",3284],["url = url.encode('utf-8')",2336],["_x = _x.encode('utf-8')",1652],["_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))",1640],["value = value.encode('utf-8')",1495],["return unicode(self).encode('utf-8')",1404],["sample = io.BytesIO(sample.encode('utf-8'))",1386],["name = name.encode('utf-8')",1247],["data = data.encode('utf-8')",1156],["def encode(self,input,errors='strict'):",964]]},{"word":"encoding","context":[["# encoding: utf-8",45989],["# -*- encoding: utf-8 -*-",38408],["# The encoding of source files.",26524],["from django.utils.encoding import force_text",6270],["from django.utils.encoding import python_2_unicode_compatible",5629],["self.encoding = encoding",4603],["self.encoding = encoding",4603],["from django.utils.encoding import force_unicode",3199],["if encoding is None:",3175],["if encoding:",3123]]},{"word":"end","context":[["end",10778],["### end Alembic commands ###",10050],["# end def",9983],["start = end",9656],["#end",6422],["# end if",6230],["end = time.time()",5543],["def end(self):",4217],["[param('uint32_t', 'end')])",3800],["#end def",3707]]},{"word":"engine","context":[["@gen.engine",2227],["Base.metadata.create_all(engine)",2104],["self.engine = engine",1664],["self.engine = engine",1664],["from heat.engine import resource",1348],["from heat.engine import properties",1287],["return engine",1279],["connection = engine.connect()",1268],["conn = engine.connect()",1182],["Session = sessionmaker(bind=engine)",1126]]},{"word":"entry","context":[["# One entry per manual page. List of tuples",23937],["#  dir menu entry, description, category)",20993],["for entry in entries:",6676],["return entry",6019],["<entry>",2683],["</entry>",2605],["if entry:",2486],["if not entry:",1940],["if entry is None:",1663],["entry = {}",1579]]},{"word":"enumerate","context":[["for i, line in enumerate(lines):",2566],["for i, arg in enumerate(args):",1514],["for i, item in enumerate(items):",690],["for i, dirname in enumerate(dirnames):",642],["for (i, c) in enumerate(v[::-1]):",587],["for index, line in enumerate(lines):",531],["for (i, x) in enumerate(arr.shape))",528],["for i, metadata_elem in enumerate(metadata_elems):",511],["for i, line in enumerate(f):",505],["for i, row in enumerate(rows):",491]]},{"word":"env","context":[["#!/usr/bin/env python",502842],["#!/usr/bin/env python3",50325],["#! /usr/bin/env python",36357],["#!/usr/bin/env python2",17558],["return env",5556],["#!/usr/bin/env python2.7",5347],["env = os.environ.copy()",5216],["#!/bin/env python",4280],["def generate(env):",3818],["def exists(env):",3547]]},{"word":"environ","context":[["context = req.environ['nova.context']",10169],["def __call__(self, environ, start_response):",5637],["env = os.environ.copy()",5216],["from os import environ",3430],["environ={'REQUEST_METHOD': 'GET'})",2978],["on_rtd = os.environ.get('READTHEDOCS', None) == 'True'",2655],["context = req.environ['cinder.context']",2628],["environ=dict(nohash=True,",2151],["environ={'REQUEST_METHOD': 'PUT'},",1811],["env = os.environ",1549]]},{"word":"eq_","context":[["eq_(",15459],["eq_(response.status_code, 200)",12361],["eq_(res.status_code, 200)",6984],["eq_(r.status_code, 200)",6610],["from nose.tools import eq_",5376],["eq_(rv.status_code, 200)",3613],["eq_(200, response.status_code)",2996],["eq_(response.status_code, 302)",2595],["from nose.tools import eq_, ok_",2218],["eq_(response.status_code, 400)",1863]]},{"word":"err","context":[["except Exception as err:",21051],["except Exception, err:",12342],["if err:",8859],["self.assertNoOutput(err)",6374],["raise err",6112],["if err != Z3_OK:",5535],["err = lib().Z3_get_error_code(a0)",5535],["except OSError as err:",5454],["out, err = self.run_manage(args)",5279],["raise Z3Exception(lib().Z3_get_error_msg_ex(a0, err))",4961]]},{"word":"error","context":[["print \"\\n---An error occurred---\\n\"",24666],["except socket.error:",16193],["LOG.error(msg)",13887],["if error:",13664],["error: The function to call with any errors found.",7578],["error = None",7035],["error = True",6629],["except Exception as error:",6242],["except socket.error as e:",5583],["except socket.error, e:",5474]]},{"word":"errors","context":[["errors = []",17674],["if errors:",13609],["return errors",9411],["error: The function to call with any errors found.",7578],["errors.append(",4636],["self.assertEqual(response.json['errors'], [",3884],["errors += 1",3780],["errors = {}",3511],["self.assertEqual(errors, expected)",3272],["self.errors = []",3154]]},{"word":"etc","context":[["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["etc.",1874],[">>> G = nx.Graph()   # or DiGraph, MultiGraph, MultiDiGraph, etc",1590],["\"path\": \"/etc/banner.txt\",",937],["# etc.",673],["# ... etc.",631],["srcdir + \"/etc/sssd.api.d\")",447],["#   like listeners/agent handlers/etc.",441],["sssdconfig = SSSDConfig.SSSDConfig(srcdir + \"/etc/sssd.api.conf\",",417],["if filename == \"/etc/machine-id\":",352]]},{"word":"even","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027],["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",18511],["# Always use forward slashes, even on Windows.",10539],["# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",10258],["## WITHOUT ANY WARRANTY; without even the implied warranty of",10119],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",7318],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",6750]]},{"word":"event","context":[["event.Skip()",15713],["for event in pygame.event.get():",6236],["for event in pygame.event.get():",6236],["for event in events:",5951],["event.accept()",5711],["return event",4665],["event.save()",4226],["def closeEvent(self, event):",3380],["event.ignore()",3138],["if event.type == pygame.QUIT:",3059]]},{"word":"events","context":[["for event in events:",5951],["events = []",5774],["return events",3185],["self.events = []",1682],["for e in events:",1340],["events = [",1294],["if events:",1182],["events.append(event)",1070],["raw, events, picks = _get_data()",1010],["events.",787]]},{"word":"ex","context":[["except Exception as ex:",29167],["except Exception, ex:",10401],["raise ex",4696],["except libvirt.libvirtError as ex:",2052],["# ex: set expandtab softtabstop=4 shiftwidth=4:",1983],["error_code = ex.get_error_code()",1669],["print ex",1601],["except ValueError as ex:",1536],["LOG.exception(ex)",1436],["from sickbeard.exceptions import ex",1383]]},{"word":"example","context":[["For example:",11398],["..  container:: example",5620],["%(example)s",4542],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["example:",3817],["For example::",3796],["# ('Your Name', 'your_email@example.com'),",3729],["ATTENDEE:mailto:user1@example.com",3545],["# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"",3222],["ATTENDEE:mailto:user2@example.com",2927]]},{"word":"exc","context":[["except Exception as exc:",16541],["self.assertRaises(webob.exc.HTTPBadRequest,",12597],["raise exc.HTTPBadRequest(explanation=msg)",9200],["raise exc",6683],["self.assertRaises(webob.exc.HTTPNotFound,",4571],["raise webob.exc.HTTPBadRequest(explanation=msg)",4547],["except Exception, exc:",4495],["except OSError as exc:",4190],["except exc.NoResultFound:",3865],["from webob import exc",3843]]},{"word":"except","context":[["except:",1083642],["except ImportError:",312685],["except KeyError:",281727],["except Exception as e:",271261],["except ValueError:",266807],["except Exception:",237243],["except AttributeError:",199156],["except Exception, e:",164240],["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660]]},{"word":"exception","context":[["from nova import exception",16857],["except exception.NotFound:",7356],["except exception.InstanceNotFound:",7156],["from cinder import exception",6719],["self.assertRaises(exception.VolumeBackendAPIException,",6072],["raise exception.VolumeBackendAPIException(data=msg)",5371],["logger.exception(e)",4263],["self.assertRaises(exception.InvalidInput,",4111],["self.assertRaises(exception.ValidationError,",3379],["log.exception(e)",3334]]},{"word":"exceptions","context":[["from django.core.exceptions import ImproperlyConfigured",12252],["from django.core.exceptions import ValidationError",10689],["from django.core.exceptions import ObjectDoesNotExist",7812],["from django.core.exceptions import PermissionDenied",5135],["from horizon import exceptions",4220],["exceptions.handle(request,",3090],["raise exceptions.ValidationError(",2793],["import exceptions",2779],["exceptions.handle(self.request,",2458],["from tempest import exceptions",2201]]},{"word":"execute","context":[["def execute(self):",16834],["def execute(self, context):",7529],["cursor.execute(\"\"\"",7474],["cursor.execute(sql)",5163],["cursor.execute(query)",4946],["cursor.execute(",3994],["cur.execute(sql)",3734],["cr.execute(\"\"\"",3435],["self.mox.StubOutWithMock(utils, 'execute')",2293],["cur.execute(\"\"\"",1910]]},{"word":"exist","context":[["exist.",1411],["# must exist either in Sphinx' static/ path, or in one of the custom paths",846],["# this does not exist!",659],["self.module.fail_json(msg=\"Group %s does not exist\" % self.group)",544],["does not exist.",493],["# exist.",471],["# Import/export/validate must exist and pass, while Render must only exist.",464],["# Import/export/validate must exist and pass, while Render must only exist.",464],["exist = False",432],["doesn't exist.",405]]},{"word":"exists","context":[["if not os.path.exists(path):",12286],["if os.path.exists(path):",12272],["if os.path.exists(filename):",5809],["if not os.path.exists(filename):",4758],["def exists(self):",4134],["def exists(env):",3547],["Class generic exists solely to derive numpy scalars from, and possesses,",3120],["if not os.path.exists(directory):",2878],["if exists:",2840],["from os.path import exists",2300]]},{"word":"exit","context":[["sys.exit(1)",210632],["sys.exit(0)",72080],["sys.exit()",66854],["exit(1)",42042],["sys.exit(2)",29520],["exit()",26934],["sys.exit(-1)",21435],["exit(0)",16300],["sys.exit(main())",14904],["sys.exit(app.exec_())",8680]]},{"word":"exp","context":[["self.assertEqual(obs, exp)",2967],["raise exp",2887],["exp.request_id = response.headers.get('x-ms-request-id')",2678],["exp = CloudError(response)",2678],["if exp is not None:",2503],["self.assertEqual(headers[:len(exp)], exp)",2270],["self.assertEqual(headers[:len(exp)], exp)",2270],["self.assertEqual(got, exp)",2236],["self.assertEquals(headers[:len(exp)], exp)",1916],["self.assertEquals(headers[:len(exp)], exp)",1916]]},{"word":"expected","context":[["expected = [",35040],["expected = {",26545],["check_detection(expected, test_file)",13409],["self.assertEqual(expected, actual)",9025],["self.assertEqual(result, expected)",6855],["self.assertEqual(actual, expected)",6694],["self.assertEqual(expected, result)",6327],["expected = (",4715],["expected=dict(",4150],["assert_frame_equal(result, expected)",4051]]},{"word":"expr","context":[["assert upretty(expr) == ucode_str",9037],["assert pretty(expr) == ascii_str",8753],["return expr",7062],["self.expr = expr",2194],["self.expr = expr",2194],["expr = sympify(expr)",1124],["expr = sympify(expr)",1124],["if self.expr is not None:",1062],["assert upretty(expr) in [ucode_str_1, ucode_str_2]",999],["for arg in expr.args:",984]]},{"word":"express","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",22136],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",9531],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",7919],["# KIND, either express or implied.  See the License for the",4713],["#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",3887],["# version 2 (GPLv2). There is NO WARRANTY for this software, express or",3220]]},{"word":"ext","context":[["'ext': 'mp4',",13737],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["'sphinx.ext.autodoc',",10233],["from google.appengine.ext import ndb",6573],["from google.appengine.ext import db",6438],["'sphinx.ext.viewcode',",6197],["from sqlalchemy.ext.declarative import declarative_base",6084],["'sphinx.ext.todo',",4875],["'sphinx.ext.intersphinx',",4627]]},{"word":"extend","context":[["#     http://www.kamaelia.org/AUTHORS - please extend this file,",1696],["children.extend(child.db_children((self.vtType, self.db_id), orphan))",1384],["cmd.extend(args)",889],["PLATFORM_SCHEMA = PLATFORM_SCHEMA.extend({",817],["#    exception, you may extend this exception to your version of the file(s),",804],["if extend: TClist += ofwhat",744],["sys.path.extend(['.','..','../..','py'])",737],["kmi_props_setattr(kmi.properties, 'extend', False)",661],["args.extend([",651],["def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):",648]]},{"word":"extension","context":[["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["'extension': True,",3138],["extension=EXTENSION_NAME,",2546],["from distutils.extension import Extension",2311],["'''Return boolean indicating whether this extension is available'''",1795],["The official definition of this extension is available here:",1424],["for extension in extensions:",1353],["return [extension]",1184],["</xs:extension>",842]]},{"word":"extensions","context":[["extensions=[",25666],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["extensions = [",12763],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900],["extensions = []",6062],["from nova.api.openstack import extensions",3314],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",2317],["extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']",2077],["from OpenGL import extensions",1829]]},{"word":"extra","context":[["# Add any extra paths that contain custom files (such as robots.txt or",11812],["extra = 0",4328],["extra = 1",4141],["if extra:",2985],["extra = {}",2723],["extra={",1625],["extra = {",1586],["self.extra = extra",1437],["self.extra = extra",1437],["extra = 3",1306]]},{"word":"f","context":[["f.close()",207025],["return f",32519],["for line in f:",31883],["for f in files:",21436],["def f():",13388],["f.seek(0)",9922],["lines = f.readlines()",8913],["data = f.read()",8865],["f.write('\\n')",8410],["for line in f.readlines():",8390]]},{"word":"factory","context":[["factory = staticmethod(factory)",12344],["factory = staticmethod(factory)",12344],["def factory(*args_, **kwargs_):",12285],["rootObj = rootClass.factory()",2678],["import factory",2547],["self.factory = RequestFactory()",2526],["obj_ = cybox_common.StringObjectPropertyType.factory()",1712],["self.factory = factory",1354],["self.factory = factory",1354],["## object-factory.h (module 'core'): ns3::ObjectFactory [class]",1073]]},{"word":"fail","context":[["return 'fail'",13352],["self.fail()",12294],["gdaltest.post_reason('fail')",5034],["self.fail(",2711],["%(fail)s;",1903],["self.fail(self._formatMessage(msg, standardMsg))",1894],["self.fail('Command should not raise exception: {0}'.format(e))",1760],["if fail:",1760],["else: self.fail(\"time out\")",1750],["self.fail(merge_error_messages(error_messages))",1676]]},{"word":"failed","context":[["failed = True",7135],["if failed:",3908],["failed = False",3575],["failed = {}",2128],["failed = []",1928],["if result.failed:",1918],["self.failed = True",1877],["if self.failed:",1867],["failed = 0",1417],["raise MUTLibError(\"{0}: failed\".format(comment))",1192]]},{"word":"fake","context":[["drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)",12133],["drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)",10282],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)",7492],["conn = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)",5112],["conn = xenapi_conn.XenAPIDriver(fake.FakeVirtAPI(), False)",2548],["self.project_id = 'fake'",2299],["self.user_id = 'fake'",2212],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-group-rules')",1985],["self.conn = xenapi_conn.XenAPIDriver(fake.FakeVirtAPI(), False)",1939],["'project_id': 'fake',",1483]]},{"word":"false","context":[["# If false, no module index is generated.",74645],["required: false",52495],["# If false, no index is generated.",29138],["# non-false value, then it is used:",25813],["return false;",3986],["default: false",3386],["(default false)",2175],["return false",1973],["incemp = raw_input(\"Include empty? (true/false, optional): \")",1468],["to false, no intercept will be used in calculations",1163]]},{"word":"fd","context":[["fd.close()",16585],["os.close(fd)",13483],["fd.flush()",5641],["headers = readuntil2crlfs(fd)",4325],["fd = sock.makefile()",4296],["for line in fd:",1552],["return fd",1414],["self.fd = fd",1203],["self.fd = fd",1203],["fd = sys.stdin.fileno()",1187]]},{"word":"field","context":[["for field in fields:",11681],["'required-field': False,",5998],["self.field = field",4338],["self.field = field",4338],["return field",4209],["if field:",3932],["#     There is no restriction on the value of this field.",3726],["for field in self.fields:",3312],["'required-field': True,",2952],["field=models.BooleanField(default=False),",2560]]},{"word":"fields","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["fields=[",99767],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27005],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),",25914],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251],["'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",25100]]},{"word":"file","context":[["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660],["# found in the LICENSE file.",36681],["# not use this file except in compliance with the License. You may obtain",30799],["file=DESCRIPTOR,",29319],["# Output file base name for HTML help builder.",27989],["file.close()",27296],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# If true, an OpenSearch description file will be output, and all pages will",25786],["For more information on this file, see",25647]]},{"word":"filename","context":[["filename=None,",29817],["self.filename = filename",16910],["self.filename = filename",16910],["return filename",12978],["for filename in filenames:",12769],["if filename:",10531],["for filename in files:",7798],["def __init__(self, filename):",7742],["if filename is None:",7383],["os.remove(filename)",7193]]},{"word":"files","context":[["# Grouping the document tree into LaTeX files. List of tuples",27516],["# The encoding of source files.",26524],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# relative to this directory. They are copied after the builtin static files,",26167],["# directories to ignore when looking for source files.",24534],["# List of patterns, relative to source directory, that match files and",24527],["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["for f in files:",21436],["# Grouping the document tree into Texinfo files. List of tuples",21017],["# of this software and associated documentation files (the \"Software\"), to deal",20351]]},{"word":"filter","context":[["@register.filter",15851],[").filter(",4987],["option_.filter = filter_",2972],["query = query.filter(",2454],["@register.filter(is_safe=True)",1957],["def filter(self, record):",1944],["if filter:",1700],[".filter(",1517],["from six.moves import (filter, input, map, range, zip)  # noqa",1483],["self.filter = filter",1172]]},{"word":"filters","context":[["'filters': {",6890],["'filters': ['require_debug_false'],",6161],["if filters:",4436],["filters = {}",3912],["filters = []",3360],["filters=filters)",2306],["filters=filters)",2306],["return filters",1923],["filters = {",1747],["for f in filters:",1718]]},{"word":"finally","context":[["finally:",403686],["finally :",639],["#finally:",483],["finally: self.sechead = None",454],["# finally:",442],["...     finally:",365],["finally: self.accept_next_alert = True",359],["#     finally:",321],["... finally:",294],["#         finally:",210]]},{"word":"find","context":[["# List of finder classes that know how to find static files in",6046],[">>> test = doctest.DocTestFinder().find(f)[0]",1947],["if s1.find('\\n') == -1:",1048],["raise RuntimeError(\"Unable to find version string.\")",809],["raise RuntimeError(\"can't find toplevel directory!\")",762],["# this to find the root from __file__.",648],["print(\"unable to find command, tried %s\" % (commands,))",645],["(lambda t: t.find('./os/type').text,",620],["# You can find full information here: http://www.zenoss.com/oss",606],["if s1.find(\"'\") == -1:",545]]},{"word":"first","context":[["limitby=(0, 1)).first()",14959],["first()",12158],["first = False",9422],["first = True",9329],[").first()",8858],["if first:",8029],["server = self.servers.first()",3985],["if not first:",2723],[".first()",2281],["network = self.networks.first()",1955]]},{"word":"flag","context":[["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["flag = True",5292],["flag = False",5091],["if flag:",4869],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["flag = 0",2848],["flag = 1",2442],["for flag in flags:",2302],["if not flag:",1800],["return flag",1605]]},{"word":"flags","context":[["flags = 0",4562],["self.flags = flags",4458],["self.flags = flags",4458],["FLAGS = flags.FLAGS",4282],["self.flags(virt_type='kvm', group='libvirt')",2732],["return flags",2655],["from nova import flags",2488],["for flag in flags:",2302],["flags = []",2119],["# recreate indices and set flags",1939]]},{"word":"float","context":[[":rtype: float",6503],["# Latex figure (float) alignment",5863],["value = float(value)",5031],["return float(value)",3442],["type=float,",2231],["float",2221],["alpha : float",2114],["tol : float, optional",1518],["tol : float",1409],["elif isinstance(value, float):",1355]]},{"word":"flush","context":[["sys.stdout.flush()",57015],["def flush(self):",12937],["sys.stderr.flush()",9893],["oprot.trans.flush()",9051],["self._oprot.trans.flush()",7677],["session.flush()",7662],["self.flush()",7656],["f.flush()",7286],["sess.flush()",6604],["fd.flush()",5641]]},{"word":"fn","context":[["return fn",6683],["return fn(*args, **kwargs)",2273],["@wraps(fn)",1646],["for fn in files:",1582],["self.fn = fn",1559],["self.fn = fn",1559],["if os.path.exists(fn):",1434],["os.remove(fn)",1404],["@functools.wraps(fn)",1296],["if fn:",1276]]},{"word":"fname","context":[["(fname, ftype, fid) = iprot.readFieldBegin()",22032],["(fname, mtype, rseqid) = self._iprot.readMessageBegin()",6259],["def read(fname):",4562],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["return fname",2631],["os.remove(fname)",2410],["for fname in files:",2044],["for fname in fnames:",1660],["with open(fname) as f:",1587],["fname : str",1553]]},{"word":"following","context":[["# furnished to do so, subject to the following conditions:",24476],["# modification, are permitted provided that the following conditions are met:",20828],["# modification, are permitted provided that the following conditions are",14877],["# the following conditions:",14452],["# notice, this list of conditions and the following disclaimer.",9328],["# modification, are permitted provided that the following conditions",8542],["# copyright notice, this list of conditions and the following disclaimer",8007],["furnished to do so, subject to the following conditions:",7073],["#       notice, this list of conditions and the following disclaimer.",6946],["#    notice, this list of conditions and the following disclaimer.",6617]]},{"word":"font","context":[["# The font size ('10pt', '11pt' or '12pt').",26707],["font = QtGui.QFont()",12975],["font.setBold(True)",4734],["font.setWeight(75)",3978],["font.setPointSize(10)",2279],["font.setBold(False)",2204],["font.setWeight(50)",2003],["font.setPointSize(12)",1844],["font-weight: bold;",1352],["return font",1133]]},{"word":"foo","context":[["def foo():",5216],["def foo(self):",2720],["'foo',",2447],["'foo': 'bar',",2314],["foo = Foo()",1763],["# Examples: \"http://foo.com/media/\", \"/media/\".",1733],["instance.uuid = 'foo'",1706],["foo",1668],["self.foo = foo",1316],["self.foo = foo",1316]]},{"word":"for","context":[["# GNU General Public License for more details.",187562],["# See the License for the specific language governing permissions and",149392],["#    License for the specific language governing permissions and limitations",123669],["for line in lines:",41967],["#    GNU Affero General Public License for more details.",40024],["GNU General Public License for more details.",37820],["# License for the specific language governing permissions and limitations",32108],["for line in f:",31883],["# GNU Affero General Public License for more details.",29547],["# Output file base name for HTML help builder.",27989]]},{"word":"form","context":[["if form.is_valid():",36268],["form.save()",11875],["'form': form,",10608],["'form': form,",10608],["def form_valid(self, form):",10171],["</form>",10079],["if form.validate_on_submit():",9980],["self.assertTrue(form.is_valid())",7866],["#     * Redistributions in binary form must reproduce the above",7862],["'view_type': 'form',",7193]]},{"word":"format","context":[["# Else, today_fmt is used as the format for a strftime call.",26971],["# using the given strftime format.",24593],["# The format is a list of tuples containing the path and title.",6966],["# If you set this to False, Django will not format dates, numbers and",5943],[").format(",3829],["def format(self, record):",3209],["self.format = format",2913],["self.format = format",2913],["resourcePath = resourcePath.replace('{format}', 'json')",2604],["# bottom, using the given strftime format.",2499]]},{"word":"forms","context":[["# Redistribution and use in source and binary forms, with or without",44287],["from django import forms",34648],["raise forms.ValidationError(",7379],["#  Redistribution and use in source and binary forms, with or without",5075],["Redistribution and use in source and binary forms, with or without",3711],["from django.forms import ModelForm",2980],["## \"Redistribution and use in source and binary forms, with or without",2880],["# Redistribution and use in source and binary forms, with or without modification,",2800],["from horizon import forms",2477],["widget=forms.TextInput(",1955]]},{"word":"found","context":[["# found in the LICENSE file.",36681],["found = True",25989],["found = False",24160],["if not found:",16035],["if found:",9209],["# Local time zone for this installation. Choices can be found here:",7887],["# Language code for this installation. All choices can be found here:",7665],["error: The function to call with any errors found.",7578],["return found",5474],["# This source code is licensed under the AGPLv3 license found in the",4600]]},{"word":"fp","context":[["fp.close()",30675],["for line in fp:",3207],["fp = None",2576],["fp.seek(0)",2129],["if fp is not None:",2083],["line = fp.readline()",2058],["self.fp = fp",2054],["self.fp = fp",2054],["data = fp.read()",1931],["fp.flush()",1634]]},{"word":"frame","context":[["return frame",2939],["self.frame = frame",1673],["self.frame = frame",1673],["def signal_handler(signal, frame):",1276],["frame = frame.f_back",1264],["frame = frame.f_back",1264],["frame.Show()",1254],["if frame is None:",1147],["del frame",1035],["for frame in frames:",995]]},{"word":"free","context":[["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["# Permission is hereby granted, free of charge, to any person obtaining a copy",23606],["This program is free software: you can redistribute it and/or modify",18733],["# This program is free software; you can redistribute it and/or",15997],["# Permission is hereby granted, free of charge, to any person obtaining",14689],["# This library is free software; you can redistribute it and/or",13150],["# Ansible is free software: you can redistribute it and/or modify",11997],["*   This program is free software; you can redistribute it and/or modify  *",10713]]},{"word":"from","context":[["from __future__ import unicode_literals",196429],["from django.conf import settings",146012],["from django.db import models",109438],["from __future__ import print_function",98595],["from __future__ import absolute_import",94310],["from datetime import datetime",84929],["from django.core.urlresolvers import reverse",57527],["from __future__ import division",56689],["from django.contrib import admin",55424],["from django.utils.translation import ugettext_lazy as _",45041]]},{"word":"full","context":[["# The full version, including alpha/beta/rc tags.",26558],["For the full list of settings and their values, see",14104],["# Part of Odoo. See LICENSE file for full copyright and licensing details.",5998],["# Language to be used for generating the HTML full-text search index.",5923],["# The full license is in the file COPYING.txt, distributed with this software.",2891],["# Refer to the README and COPYING files for full details of the license",2429],["# For the full copyright and license information, please see the",1975],["if full:",1935],["# this repository contains the full copyright notices and license terms.",1668],["#  Distributed under the terms of the BSD License.  The full license is in",1550]]},{"word":"func","context":[["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["return func",16133],["return func(*args, **kwargs)",9947],["@wraps(func)",9292],["@functools.wraps(func)",7819],["self.func = func",7493],["self.func = func",7493],["def decorator(func):",6268],["func()",3965],["def __init__(self, func):",3711]]},{"word":"function","context":[["# unit titles (such as .. function::).",27531],["error: The function to call with any errors found.",7578],["function.",4646],[":param dargs: standardized virsh function API keywords",3124],[":param callback function: The callback function",2901],[":param callback function: The callback function",2901],["asynchronous HTTP request, please define a `callback` function",2901],["def function(self, simulation, period):",2765],["self.function = function",2661],["self.function = function",2661]]},{"word":"functions","context":[["# functions",1891],["# Utility functions",1823],["# Helper functions",1596],["functions.",1390],["functions = []",1114],["for func in functions:",1077],["for function in functions:",819],["import functions",645],["# helper functions",644],["from functions import *",639]]},{"word":"g","context":[["# This is the file name suffix for HTML files (e.g. \".xhtml\").",23956],["return g",8405],["# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").",2890],["e.g.::",2631],["def g():",2475],["e.g.",2215],["E.g.::",2157],["g.close()",1906],["if g:",1592],["g = Graph()",1516]]},{"word":"generated","context":[["# If false, no module index is generated.",74645],["# If false, no index is generated.",29138],["### commands auto generated by Alembic - please adjust! ###",10020],[":toctree: generated/",6335],["# Code generated by Microsoft (R) AutoRest Code Generator.",3989],["NOTE: This class is auto generated by the swagger code generator program.",3080],["# Automatically generated, do not edit.",1879],["# This file was automatically generated by SWIG (http://www.swig.org).",1788],["# @generated",1353],["\"\"\"NOTE: This class is auto generated by the swagger code generator program.",734]]},{"word":"get","context":[["def get(self):",53173],["response = self.client.get(url)",23349],["response = self.client.get(",11094],["def get(self, request, *args, **kwargs):",10792],["# This will get replaced with a git SHA1 when you do a git archive",8306],["for event in pygame.event.get():",6236],["'get',",5625],["def get(self, key):",5351],["def get(self, key, default=None):",5339],["r = self.client.get(self.url)",5337]]},{"word":"getLogger","context":[["logger = logging.getLogger(__name__)",56480],["LOG = logging.getLogger(__name__)",51954],["log = logging.getLogger(__name__)",39134],["_logger = logging.getLogger(__name__)",11844],["logger = logging.getLogger()",6961],["LOG = log.getLogger(__name__)",6129],["_LOGGER = logging.getLogger(__name__)",4805],["from logging import getLogger",4188],["LOGGER = logging.getLogger(__name__)",3368],["_log = logging.getLogger(__name__)",2516]]},{"word":"getattr","context":[["yield assert_equal, getattr(inputs.traits()[key], metakey), value",2581],["yield assert_equal, getattr(outputs.traits()[key], metakey), value",2487],["value = getattr(self, attr)",2486],["__swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))",1506],["__swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))",1506],["return getattr(self, name)",1333],["return getattr(self, key)",1226],["resp = getattr(controller, method)(req)",907],["return getattr(self, cache_attr)",736],["data = {field.name: getattr(request, field.name) for field in request.all_fields()}",679]]},{"word":"given","context":[["# using the given strftime format.",24593],["# bottom, using the given strftime format.",2499],["# given",1485],["# given in html_static_path.",846],["self.given(b'''",699],["Calls to context.execute() here emit the given string to the",694],["which is encoded in the given encoding.",675],["self.given(u'''",538],["given.",496],["Permission to use, modify, and distribute this software is given under the",476]]},{"word":"global","context":[["global_params: (StandardQueryParameters, default: None) global arguments",5086],["# Pass names back to global scope (s3.*)",3483],["global logger",1895],["global config",1642],["global options",1346],["global count",1203],["global log",1175],["global args",1025],["global counter",1004],["global verbose",990]]},{"word":"gnu","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975],["# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",11396],["# along with this program. If not, see <http://www.gnu.org/licenses/>.",10912],["# along with weboob. If not, see <http://www.gnu.org/licenses/>.",4878],["# along with this program.  If not, see http://www.gnu.org/licenses.",4497],["# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.",4108],["# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).",3691],["# along with Indico; if not, see <http://www.gnu.org/licenses/>.",3425]]},{"word":"governing","context":[["# See the License for the specific language governing permissions and",149392],["#    License for the specific language governing permissions and limitations",123669],["# License for the specific language governing permissions and limitations",32108],["See the License for the specific language governing permissions and",19730],["#   See the License for the specific language governing permissions and",9536],["#  See the License for the specific language governing permissions and",7927],["# specific language governing permissions and limitations",5653],["#    See the License for the specific language governing permissions and",4054],["# language governing permissions and limitations under the License.",3874],["#   License for the specific language governing permissions and limitations",2958]]},{"word":"group","context":[["'auth.group': {",15191],["u'auth.group': {",9992],["for group in groups:",6427],["group.add_argument(",5036],["if group:",4554],["return group",4434],["group='libvirt')",4156],["with q.group():",3804],["parser.add_option_group(group)",2942],["return match.group(1)",2880]]},{"word":"groups","context":[["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["for group in groups:",6427],["groups = []",5217],["return groups",4000],["if groups:",2850],["groups = {}",1967],["for g in groups:",1484],["'groups': [",1246],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-groups')",1192],["for group in self.groups:",1153]]},{"word":"h","context":[["return h",5621],["#include <stdio.h>",2985],["h.close()",2469],["## nstime.h (module 'core'): ns3::Time [class]",2250],["#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'",2116],["## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]",2080],["## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]",2080],["if of.startswith(\"h\"):",1960],["raise h",1869],["except HTTPError as h:",1854]]},{"word":"handle","context":[["def handle(self, *args, **options):",16302],["def handle(self):",6094],["handle.close()",4397],["req._this=self.handle",3911],["exceptions.handle(request,",3090],["def handle(self, request, data):",2745],["exceptions.handle(self.request,",2458],["return handle",1654],["self.handle = handle",1624],["self.handle = handle",1624]]},{"word":"handler","context":[["logger.addHandler(handler)",4807],["handler.setFormatter(formatter)",4385],["return handler",3903],["def run(self, handler):",2704],["self.handler = handler",2671],["self.handler = handler",2671],["handler = logging.StreamHandler()",2474],["if handler:",2184],["if handler is None:",1671],["def handler(request):",1638]]},{"word":"has","context":[["# Copyright: This module has been placed in the public domain.",1962],["assert self.__dict__[\"_is_valid\"](), \"Variable has already been deleted\"",879],["An instance has the following attributes at least.",712],["#             then this has concurrency issues",616],["Error: A general Mandrill error has occurred",588],["htmltext = \"<html><body>This quest has already been completed.</body></html>\"",565],["Given the course has a Video component in \"Youtube\" mode",561],["def has(self, key):",525],[":param context: Information that identifies the user that has made this",472],["# A segment is active if it has >= tpSegmentActivationThreshold",471]]},{"word":"hasattr","context":[["lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,",1973],["elif hasattr(value, \"to_dict\"):",1972],["if hasattr(obj, 'db_id') and obj.db_id is not None:",1964],["if hasattr(obj, 'db_entity_type') and obj.db_entity_type is not None:",1692],["if hasattr(obj, 'db_entity_id') and obj.db_entity_id is not None:",1348],["if hasattr(item[1], \"to_dict\") else item,",1221],["elif hasattr(old_obj, 'db_id') and old_obj.db_id is not None:",1139],["if hasattr(self, '_set'):",1090],["if hasattr(self, name):",1044],["if hasattr(obj, 'db_name') and obj.db_name is not None:",970]]},{"word":"have","context":[["# You should have received a copy of the GNU General Public License",202164],["#    You should have received a copy of the GNU Affero General Public License",41411],["You should have received a copy of the GNU General Public License",38555],["# You should have received a copy of the GNU Affero General Public License",31967],["# All configuration values have a default; values that are commented out",25768],["#    You should have received a copy of the GNU General Public License",20976],["# You should have received a copy of the GNU Lesser General Public License",17880],["# You should have received a copy of the GNU Lesser General Public",15926],["# You should have received a copy of the GNU General Public License along",15209],["## You should have received a copy of the GNU General Public License",15054]]},{"word":"header","context":[["def __init__(self, header, value, mask=None):",3443],["if header:",3317],["# HTTP header `Accept`",2961],["# HTTP header `Content-Type`",2961],["return header",2891],["for header in headers:",2196],["self.header = header",1963],["self.header = header",1963],["[param('ns3::Header const &', 'header'), param('uint32_t', 'size')])",1898],["header = []",1714]]},{"word":"headers","context":[["headers = {",13937],["headers = {}",12691],["# Construct headers",8075],[":param dict custom_headers: headers that will be added to the request",8074],["headers=headers)",7286],["headers=headers)",7286],["headers=headers,",6315],["headers=headers,",6315],["req.headers[\"content-type\"] = \"application/json\"",6023],["return headers",4969]]},{"word":"height","context":[["self.height = height",5476],["self.height = height",5476],["def height(self):",2384],["height, width = 3, 3",1528],["<canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas>",1510],["height = 0",1307],["'height': height,",1258],["'height': height,",1258],["self.height = 0",1034],["images = tf.random_uniform((5, height, width, 3), seed=1)",1029]]},{"word":"help","context":[["# Output file base name for HTML help builder.",27989],["help=argparse.SUPPRESS)",4560],["help=\"\"\"",4112],["help='''",3031],["# super, missing, help",2787],["def help(self):",2753],["help=_(",2695],["cls.add_instance_attribute('help', 'std::string', is_const=False)",2232],["help=(",2109],["'href=\"%s/help/admin\">Admin Area' \\",1971]]},{"word":"here","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# add these directories to sys.path here. If the directory is relative to the",24896],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# .htaccess) here, relative to this directory. These files are copied",11812],["# Local time zone for this installation. Choices can be found here:",7887]]},{"word":"hope","context":[["# This program is distributed in the hope that it will be useful,",137492],["#    This program is distributed in the hope that it will be useful,",58120],["This program is distributed in the hope that it will be useful,",27838],["# This library is distributed in the hope that it will be useful,",14368],["# Ansible is distributed in the hope that it will be useful,",12033],["# This program is distributed in the hope that it will be useful, but WITHOUT",11709],["#  This program is distributed in the hope that it will be useful,",11090],["# This program is distributed in the hope that it will be useful, but",9856],["## Invenio is distributed in the hope that it will be useful, but",7539],["# Invenio is distributed in the hope that it will be useful, but",5450]]},{"word":"host","context":[["self.host = host",14244],["self.host = host",14244],["if not host:",4738],["if host:",4686],["for host in hosts:",4562],["host,",3804],["return host",2688],["self.assertTrue(filt_cls.host_passes(host, filter_properties))",2652],["if host is None:",2618],["host = None",2615]]},{"word":"html","context":[["</html>",13930],["<html>",13726],["return html",10785],["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["<!DOCTYPE html>",7191],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">",3957],["from django.utils.html import escape",3897],["# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).",3691]]},{"word":"http","context":[["#         http://www.apache.org/licenses/LICENSE-2.0",126073],["#     http://www.apache.org/licenses/LICENSE-2.0",74025],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["#      http://www.apache.org/licenses/LICENSE-2.0",45119],["#    http://www.apache.org/licenses/LICENSE-2.0",34596],["# http://www.apache.org/licenses/LICENSE-2.0",30992],["http://www.apache.org/licenses/LICENSE-2.0",20437],["from django.http import HttpResponse",19325],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975]]},{"word":"https","context":[["# https://docs.djangoproject.com/en/1.8/topics/i18n/",4109],["# https://docs.djangoproject.com/en/1.8/howto/static-files/",4043],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/",3956],["https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/",3284],["# https://docs.djangoproject.com/en/1.6/topics/i18n/",3122],["# https://docs.djangoproject.com/en/1.6/howto/static-files/",3049],["# https://docs.djangoproject.com/en/1.7/topics/i18n/",3041]]},{"word":"i","context":[["i += 1",106391],["i = 0",99641],["i = i + 1",27057],["i = i + 1",27057],["for i in range(3):",19936],["for i in range(10):",18930],["return i",18592],["i = 1",17605],["if i == 0:",16746],["for i in range(n):",15694]]},{"word":"id","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["id = Column(Integer, primary_key=True)",17331],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["self.id = id",16261],["self.id = id",16261],["('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",15194],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["id = db.Column(db.Integer, primary_key=True)",10949]]},{"word":"ids","context":[["for id in ids:",9353],["ids = [ids]",8198],["ids = [ids]",8198],["if not ids:",7783],["ids = []",7185],["if isinstance(ids, (int, long)):",5530],["if ids:",5481],["def write(self, cr, uid, ids, vals, context=None):",5277],["def unlink(self, cr, uid, ids, context=None):",5248],["return ids",4311]]},{"word":"idx","context":[["idx += 1",11874],["idx = 0",10348],["return idx",3177],["if idx == 0:",2073],["def __getitem__(self, idx):",1839],["if idx:",1572],["idx = 1",1501],["if idx != -1:",1483],["if idx == -1:",1374],["if idx < 0:",1370]]},{"word":"if","context":[["if __name__ == '__main__':",473962],["if __name__ == \"__main__\":",298715],["if verbose:",75034],["if match:",57234],["if m:",53777],["# along with this program; if not, write to the Free Software",47621],["if request.method == 'POST':",42864],["if value is None:",41767],["if context is None:",38917],["if form.is_valid():",36268]]},{"word":"image","context":[["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name of an image file (relative to this directory) to place at the top",25393],["# The name of an image file (within the static path) to use as favicon of the",24060],["return image",8623],["for image in images:",3654],["if image:",3177],["self.rect = self.image.get_rect()",3170],["# A tuple containing the cover image and cover page html template filenames.",3089],["\"image\": {",3003],["self.image = image",2719]]},{"word":"images","context":[["images = []",3716],["for image in images:",3654],["return images",2433],["# Scale large images.",2087],["# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a",1742],["path = self._url('/v2/images/%s' % image_id)",1330],["req = webob.Request.blank(\"/images\")",1271],["'images': [],",1174],["'images': [",1152],["image_href = 'http://localhost/v2/images/%s' % self.image_uuid",1120]]},{"word":"implied","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",33378],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027],["# implied.",20877],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19792],["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",18511]]},{"word":"import","context":[["import os",945005],["import sys",791260],["import re",377951],["import logging",366679],["import time",349792],["import json",266315],["import numpy as np",265867],["import unittest",234895],["from __future__ import unicode_literals",196429],["import datetime",194963]]},{"word":"in","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["# you may not use this file except in compliance with the License.",144128],["# This program is distributed in the hope that it will be useful,",137492],["#    Unless required by applicable law or agreed to in writing, software",127081],["#    not use this file except in compliance with the License. You may obtain",123660],["#    This program is distributed in the hope that it will be useful,",58120],["# Redistribution and use in source and binary forms, with or without",44287],["for line in lines:",41967],["# found in the LICENSE file.",36681],["for line in f:",31883]]},{"word":"include","context":[["from django.conf.urls import patterns, include, url",15417],["url(r'^admin/', include(admin.site.urls)),",14085],["from django.conf.urls import include, url",8033],["# url(r'^blog/', include('blog.urls')),",3940],["#include <stdio.h>",2985],["from django.conf.urls import url, include",2906],["2. Add a URL to urlpatterns:  url(r'^blog/', include(blog_urls))",2708],["# url(r'^admin/doc/', include('django.contrib.admindocs.urls')),",2241],["include('whitespace'),",2180],["2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))",2135]]},{"word":"index","context":[["# If false, no module index is generated.",74645],["# If false, no index is generated.",29138],["master_doc = 'index'",28816],["# If true, the index is split into individual pages for each letter.",26818],["# A list of ignored prefixes for module index sorting.",26155],["index = 0",22157],["index += 1",20031],["def index():",17834],["def __getitem__(self, index):",10010],["def index(self):",9001]]},{"word":"info","context":[["# The version info for the project you're documenting, acts as replacement for",25262],["return info",14194],["logger.info(",7357],["def info(self):",6441],["info = {}",6349],["if info:",5106],["log.info(",4103],["info={",4003],["info = {",3936],["logging.info(",3874]]},{"word":"information","context":[["# General information about the project.",27441],["For more information on this file, see",25647],["# distributed with this work for additional information",9412],["# this work for additional information regarding copyright ownership.",7272],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["# license information.",4089],["information.",3559],["# For license information, see LICENSE.TXT",2595],["# For the full copyright and license information, please see the",1975],["# see file 'COPYING' for use and warranty information",1899]]},{"word":"input","context":[["# no input wsaction",5428],["Choreo. The InputSet object is used to specify input parameters when executing this Choreo.",2841],["input:",2331],["self.input = input",2001],["self.input = input",2001],["return input",1927],["Returns ugen input.",1911],["self.recover(self.input, re)",1808],["input = \"\"\"",1680],["from six.moves import (filter, input, map, range, zip)  # noqa",1483]]},{"word":"inputs","context":[["inputs = []",3565],["yield assert_equal, getattr(inputs.traits()[key], metakey), value",2581],["inputs:",1067],["return inputs",898],["inputs = [",887],["inputs,",832],["self.inputs = inputs",762],["self.inputs = inputs",762],["inputs = {",710],["x = op.inputs[0]",702]]},{"word":"insert","context":[["#sys.path.insert(0, os.path.abspath('.'))",15081],["sys.path.insert(0, os.path.abspath('..'))",3908],["# sys.path.insert(0, os.path.abspath('.'))",1926],["sys.path.insert(0, project_root)",1417],["sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))",1378],["sys.path.insert(0, os.path.abspath('../..'))",1324],["sys.path.insert(0, '..')",1136],["sys.path.insert(0, path)",1120],["}).insert()",1119],["sys.path.insert(0, '.')",1068]]},{"word":"instance","context":[["instance=instance)",30506],["instance=instance)",30506],["instance.save()",17079],["return instance",15222],["instance,",13784],["instance = self._create_fake_instance_obj()",12034],["clean_lines: A CleansedLines instance containing the file.",7423],["for instance in instances:",6820],["instance = objects.Instance(**self.test_instance)",6446],["if instance is None:",5976]]},{"word":"instances","context":[["for instance in instances:",6820],["instances = []",3482],["instances = self.compute_api.get_all(c,",3385],["self.assertEqual(len(instances), 1)",3052],["return instances",2623],["instances = db.instance_get_all(self.context)",2115],["instances.",1957],["self.assertEqual(len(instances), 0)",1804],["TypeError will be raised when the following arguments are not instances",1255],["instance_uuids = [instance['uuid'] for instance in instances]",1180]]},{"word":"instead","context":[["instead.",3303],["# the SWIG interface file instead.",1627],["# compile_commands.json file to use that instead of 'flags'. See here for",829],["# starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of",776],["# instead.",702],["# so we do it with a regexp instead. This function is not used from",676],["CDDL are applicable instead of those of the GPL.",654],["# in which case the provisions of the GPL or the LGPL are applicable instead",642],["# For a C project, you would set this to 'c' instead of 'c++'.",524],["# For a C project, you would set this to something like 'c99' instead of",500]]},{"word":"int","context":[[":rtype: int",21650],["type=int,",11942],["'int',",11661],["value = int(value)",7163],["return int(value)",5789],["**type**\\:  int",5538],["if isinstance(ids, (int, long)):",5530],["@rtype: int",5269],["verbose : bool, str, int, or None",5083],["axis : int, optional",5050]]},{"word":"integer","context":[["# @return an integer",1864],["\"type\": \"integer\",",1674],["'type': 'integer',",1663],["'sequence': fields.integer('Sequence'),",1236],["type='integer', multi='_get_picking_count'),",1176],["@rtype: integer",1058],["raise_parse_error(node, 'Bad integer attribute: %s' % exp)",1043],["'color': fields.integer('Color Index'),",929],["@type version: integer",898],["type: integer",878]]},{"word":"interface","context":[["from zope.interface import implements",5846],["[param('uint32_t', 'interface')],",5639],["</interface>",2900],["from zope.interface import implementer",2646],["from zope.interface import Interface",2260],["[param('uint32_t', 'interface'), param('ns3::Ipv4InterfaceAddress', 'address')],",1692],["# the SWIG interface file instead.",1627],["interface.",1599],["- 'ln' *string* - The language to display the interface in",1421],["<interface>",1304]]},{"word":"into","context":[["# Grouping the document tree into LaTeX files. List of tuples",27516],["# If true, the index is split into individual pages for each letter.",26818],["# Grouping the document tree into Texinfo files. List of tuples",21017],["# A list of files that should not be packed into the epub file.",3490],["ur\"\"\" converts nitro response into object and returns the object array in case of get request.",1166],["dive = Book.objects.using('other').create(title=\"Dive into Python\",",1103],["serialize message into buffer",1096],["unpack serialized message in str into this message instance using numpy for array types",1096],["unpack serialized message in str into this message instance",1096],["serialize message with numpy array types into buffer",1096]]},{"word":"invalid","context":[["# pylint: disable=invalid-name",4613],["raise ValidationError(self.error_messages['invalid'])",2591],["'invalid': [",2589],["code='invalid',",1354],["self.error_messages['invalid'],",1255],["invalid = {",1217],["itab_entry ( 'invalid',       O_NONE, O_NONE, O_NONE,    P_none ),",1215],["with np.errstate(invalid='ignore'):",1086],["if invalid:",962],["def tearDown(self):  # pylint: disable=invalid-name",890]]},{"word":"ip","context":[["return ip",2852],["self.ip = ip",2457],["self.ip = ip",2457],["for ip in ips:",2242],["'Cisco-IOS-XR-ip-bfd-oper', False),",1973],["if ip:",1456],["ip = get_ipython()",1266],["ip = None",1041],["if not ip:",1035],["if ip is None:",886]]},{"word":"iprot","context":[["iprot.skip(ftype)",79782],["def read(self, iprot):",22087],["(fname, ftype, fid) = iprot.readFieldBegin()",22032],["iprot.readStructEnd()",22032],["iprot.readFieldEnd()",22032],["iprot.readStructBegin()",22032],["fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))",21958],["iprot.readMessageEnd()",11839],["args.read(iprot)",8039],["iprot.readListEnd()",5277]]},{"word":"is","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["# This program is distributed in the hope that it will be useful,",137492],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["# If false, no module index is generated.",74645],["# This program is free software: you can redistribute it and/or modify",66253],["#    This program is distributed in the hope that it will be useful,",58120],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["if value is None:",41767],["if context is None:",38917]]},{"word":"is_const","context":[["is_const=True)",361498],["is_const=True, is_virtual=True)",108896],["is_pure_virtual=True, is_const=True, is_virtual=True)",66921],["is_const=True, visibility='private', is_virtual=True)",8847],["is_const=True, visibility='protected')",4466],["is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)",3840],["cls.add_instance_attribute('name', 'std::string', is_const=False)",3335],["cls.add_instance_attribute('tid', 'ns3::TypeId', is_const=False)",2847],["cls.add_instance_attribute('checker', 'ns3::Ptr< ns3::AttributeChecker const >', is_const=False)",2306],["cls.add_instance_attribute('help', 'std::string', is_const=False)",2232]]},{"word":"is_virtual","context":[["is_const=True, is_virtual=True)",108896],["is_virtual=True)",96617],["is_pure_virtual=True, is_const=True, is_virtual=True)",66921],["is_pure_virtual=True, is_virtual=True)",52937],["visibility='private', is_virtual=True)",19892],["visibility='protected', is_virtual=True)",14676],["is_const=True, visibility='private', is_virtual=True)",8847],["is_pure_virtual=True, visibility='private', is_virtual=True)",4651],["is_pure_virtual=True, is_const=True, visibility='private', is_virtual=True)",3840],["is_pure_virtual=True, visibility='protected', is_virtual=True)",2131]]},{"word":"isinstance","context":[["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["if isinstance(value, list):",7753],["if isinstance(value, basestring):",6799],["if isinstance(value, dict):",5674],["if isinstance(ids, (int, long)):",5530],["if isinstance(value, str):",4496],["elif isinstance(value, dict):",4022],["if isinstance(value, unicode):",3003],["elif isinstance(value, list):",2874],["if isinstance(value, datetime.datetime):",2713]]},{"word":"it","context":[["# it under the terms of the GNU General Public License as published by",170645],["# This program is distributed in the hope that it will be useful,",137492],["# This program is free software: you can redistribute it and/or modify",66253],["#    This program is distributed in the hope that it will be useful,",58120],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["it under the terms of the GNU General Public License as published by",40365],["#    it under the terms of the GNU Affero General Public License as",33945],["This program is distributed in the hope that it will be useful,",27838],["# non-false value, then it is used:",25813]]},{"word":"item","context":[["return item",21425],["for item in items:",21326],["yield item",9882],["if item:",7118],["def __getitem__(self, item):",6764],["for item in data:",5733],["items.append(item)",4428],["def __contains__(self, item):",4373],["if item is None:",4189],["item = QtGui.QTableWidgetItem()",3952]]},{"word":"items","context":[["for item in items:",21326],["items = []",17033],["def items(self):",11849],["return items",11498],["items.append(item)",4428],["self.items = []",3460],["for k, v in kwargs.items():",3335],["if items:",3222],["for key, value in kwargs.items():",3187],["for metakey, value in list(metadata.items()):",3128]]},{"word":"iteritems","context":[["for key, value in self.__dict__.iteritems()]",20899],["from six import iteritems",4717],["def iteritems(self):",4273],["for key, val in iteritems(params['kwargs']):",2961],["for (key, val) in params['kwargs'].iteritems():",2418],["for k, v in kwargs.iteritems():",1743],["for attr, _ in iteritems(self.swagger_types):",1641],["for key, value in kwargs.iteritems():",1630],["for k, v in attrs.iteritems():",990],["for key, value in data.iteritems():",959]]},{"word":"its","context":[["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708],["#     * Neither the name of Google Inc. nor the names of its",6894],["# * Neither the name of the copyright holder nor the names of its contributors",4035],["# in this software or its documentation.",3120],["# neither the name of the copyright holders nor the names of its",2750],["# waive the privileges and immunities granted to it by virtue of its status",2689],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["# This code is part of the Biopython distribution and governed by its",1680],["# consequences resulting from its eventual inadequacies and bugs",1584]]},{"word":"j","context":[["j += 1",12365],["j = 0",11619],["for j in range(n):",3979],["j = j + 1",3057],["j = j + 1",3057],["for j in range(3):",2988],["return j",2935],["j+=1",2555],["j -= 1",2302],["j=0",2210]]},{"word":"job","context":[["for job in jobs:",3182],["return job",3072],["job.run()",1328],["self.job = job",1209],["self.job = job",1209],["job.save()",1175],["if job:",1052],["@return: job id",765],["if not job:",754],["if job is None:",749]]},{"word":"join","context":[["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),",8787],["from os.path import join",7705],["os.path.join(",7681],["t.join()",7356],["p.join()",4842],["thread.join()",4146],["return ''.join(packed)",3804],["pool.join()",3773]]},{"word":"js","context":[["#html_search_scorer = 'scorer.js'",4754],["<!-- 載入 brython.js -->",2431],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["# html_search_scorer = 'scorer.js'",1160],["<script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script>",1130],["js = (",1100],["'js/libs/jquery.waypoints.min.js',",813],["'js/libs/jquery.waypoints.min.js',",813]]},{"word":"json","context":[["import json",266315],["import simplejson as json",15144],["self.assertEqual(response.content_type, 'application/json')",11194],["body = json.loads(body)",8219],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971],["content_type='application/json')",6819],["req.headers[\"content-type\"] = \"application/json\"",6023],["content_type='application/json',",4881],["data = json.loads(response.content)",3919],["self.assertEqual(response.json['errors'], [",3884]]},{"word":"just","context":[["# You can just specify the packages manually here if your project is",1294],["# Most projects will NOT need to set this to anything; you can just change the",829],["# the code embedded in _version.py can just fetch the value of these",829],["# remember shell=False, so use git.cmd on windows, not just git",817],["# just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.",776],["# that just contains the computed version number.",712],["This configures the context with just a URL",669],["# NOTE: This is just for YouCompleteMe; it's highly likely that your project",481],["# which is just a placeholder for your code.",472],["# each be defined on a line of their own. _version.py will just call",451]]},{"word":"k","context":[["k += 1",7283],["k = 0",7037],["for k in keys:",6326],["setattr(self, k, v)",5567],["return k",4459],["for k, v in kwargs.items():",3335],["for k, v in d.items():",2531],["k = 1",2386],["self[k] = v",2175],["def __getitem__(self, k):",2130]]},{"word":"key","context":[["def __getitem__(self, key):",32305],["L = ['%s=%r' % (key, value)",21414],["for key, value in self.__dict__.iteritems()]",20899],["for key in keys:",17986],["def __setitem__(self, key, value):",17895],["# SECURITY WARNING: keep the secret key used in production secret!",13453],["return key",13144],["self.key = key",11001],["self.key = key",11001],["def __delitem__(self, key):",10749]]},{"word":"keys","context":[["for key in keys:",17986],["def keys(self):",11762],["keys.sort()",7146],["for k in keys:",6326],["keys = []",5723],["return keys",3733],["for keys, value in kwargs.items():",3036],["setattr(self,keys, value)",3035],["from selenium.webdriver.common.keys import Keys",2516],["if keys:",2051]]},{"word":"kind","context":[["self.kind = kind",2068],["self.kind = kind",2068],["c.sort(kind=kind)",1645],["c.sort(kind=kind)",1645],["def kind(self):",1292],["hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.",726],["for kind in ALL_FOUR:",632],["self._kind = kind",624],["<category scheme='http://schemas.google.com/g/2005#kind'",578],["for name, kind, homecls, value in ok:",567]]},{"word":"kw","context":[["def __init__(self, *args, **kw):",8020],["def __init__(self, **kw):",4751],["self.binding.Send(None, None, request, soapaction=\"\", **kw)",3988],["kw = {}",3381],["def __init__ (self, **kw):",1787],["if kw:",1661],["initHelper(self, kw)",1633],["**kw)",1536],["def __init__(self, master=None, cnf={}, **kw):",1526],["lambda *a, **kw: None)",1457]]},{"word":"kwargs","context":[["def __init__(self, *args, **kwargs):",130790],["def __init__(self, **kwargs):",47335],["**kwargs)",31777],["def get_context_data(self, **kwargs):",25507],["**kwargs):",22786],["def save(self, *args, **kwargs):",18292],["kwargs = {}",16542],["kwargs = {",15799],["def wrapper(*args, **kwargs):",12057],["**kwargs",11904]]},{"word":"l","context":[["l = []",19947],["return l",16541],["for l in lines:",5255],["if l:",3651],["for l in f:",2829],["if not l:",2564],["for i in l:",2546],["l = 0",2388],["l.sort()",2192],["assert_array_equal(l, r)",2071]]},{"word":"label","context":[["self.label = label",5836],["self.label = label",5836],["number=1, type=9, cpp_type=9, label=1,",4421],["if label:",4399],["return label",3741],["number=2, type=9, cpp_type=9, label=1,",3290],["number=1, type=11, cpp_type=10, label=1,",3197],["for label in labels:",3002],["self.label.setObjectName(_fromUtf8(\"label\"))",2630],["self.label.setObjectName(_fromUtf8(\"label\"))",2630]]},{"word":"labels","context":[["labels = []",4834],["for label in labels:",3002],["return labels",2436],["if labels is None:",1453],["labels = {",1245],["if labels:",1219],["labels.append(label)",1189],["self.labels = labels",1094],["self.labels = labels",1094],["labels = {}",1067]]},{"word":"lambda","context":[["__del__ = lambda self : None;",13417],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["represent = lambda opt: \\",3575],["__del__ = lambda self: None",3467],["_fromUtf8 = lambda s: s",2046],["lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,",1973],["_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))",1640]]},{"word":"language","context":[["# See the License for the specific language governing permissions and",149392],["#    License for the specific language governing permissions and limitations",123669],["# License for the specific language governing permissions and limitations",32108],["# The language for content autogenerated by Sphinx. Refer to documentation",26446],["See the License for the specific language governing permissions and",19730],["#language = None",18478],["#   See the License for the specific language governing permissions and",9536],["#  See the License for the specific language governing permissions and",7927],["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["language = None",6264]]},{"word":"last","context":[["Traceback (most recent call last):",34604],["last = None",2736],["if last:",2398],["last = 0",1736],["def last(self):",1182],["if last is None:",868],["# If page is out of range (e.g. 9999), deliver last page of results.",797],["return last",739],["self.last = None",721],["if last is not None:",499]]},{"word":"later","context":[["# (at your option) any later version.",187795],["(at your option) any later version.",40979],["#    License, or (at your option) any later version.",33565],["#    (at your option) any later version.",28884],["# License, or (at your option) any later version.",28201],["# of the License, or (at your option) any later version.",16356],["# any later version.",15992],["#  (at your option) any later version.",11913],["*   (at your option) any later version.                                   *",10678],["## License, or (at your option) any later version.",10107]]},{"word":"law","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["Unless required by applicable law or agreed to in writing, software",20105],["#  Unless required by applicable law or agreed to in writing, software",11079],["#   Unless required by applicable law or agreed to in writing, software",10097],["# Unless required by applicable law or agreed to in writing,",9045],["#     Unless required by applicable law or agreed to in writing, software",2065],["##  Unless required by applicable law or agreed to in writing, software",1354],["#  Unless required by applicable law or agreed to in writing,",912],["# software under copyright law.",729]]},{"word":"layer","context":[["for layer in layers:",2857],["return layer",1928],["for layer in self.layers:",1417],["if layer:",1230],["self.layer = layer",1078],["self.layer = layer",1078],["layer = DatabaseFunctionalLayer",1048],["features = vector.features(layer)",1044],["# cut the new layer polygons",1003],["layer.startEditing()",770]]},{"word":"left","context":[["self.left = left",2200],["self.left = left",2200],["def left(self):",1662],["return left",1418],["#         self.left = None",1384],["left=left,",1221],["left=left,",1221],["self.left = None",1205],["if left:",1193],["left = 0",1188]]},{"word":"len","context":[["if len(sys.argv) > 1:",10294],["if len(sys.argv) < 2:",8666],["if len(args) == 1:",8388],["if len(args) == 0:",7456],["if len(args) > 1:",6421],["self.assertEqual(len(mail.outbox), 1)",6190],["if len(args) != 1:",6040],["if len(sys.argv) != 2:",5766],["if len(sys.argv) == 1:",5131],["if len(args) > 0:",4750]]},{"word":"length","context":[["self.length = length",5120],["self.length = length",5120],["length = 0",4309],["def length(self):",3505],["length = len(_x)",3430],["d.skip(length)",3234],["length = d.getVarInt32()",3234],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["return length",2782],["length = sum([len(x) for x in packed])",2764]]},{"word":"level","context":[["showIndent(outfile, level)",54429],["'level': 'ERROR',",17149],["level += 1",14544],["showIndent(outfile, level, pretty_print)",13276],["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["'level': 'DEBUG',",11317],["logging.basicConfig(level=logging.DEBUG)",7490],["self.exportLiteralChildren(outfile, level, name_)",7373],["def exportLiteralChildren(self, outfile, level, name_):",7303],["level -= 1",5889]]},{"word":"lib","context":[["err = lib().Z3_get_error_code(a0)",5535],["raise Z3Exception(lib().Z3_get_error_msg_ex(a0, err))",4961],["from grr.lib import rdfvalue",2301],["from grr.lib import aff4",1870],["from grr.lib import utils",1680],["from grr.lib import flags",1600],["from grr.lib import test_lib",1554],["from grr.lib import config_lib",1394],["from reportlab.lib import colors",1216],["from resources.lib.libraries import client",1071]]},{"word":"library","context":[["# This library is distributed in the hope that it will be useful,",14368],["# This library is free software; you can redistribute it and/or",13150],["# License along with this library; if not, write to the Free Software",9307],["# Example configuration for intersphinx: refer to the Python standard library.",5883],["# License along with this library; if not, write to the",2775],["# Import appropriate modules from the client library.",2214],["# ============= enthought library imports =======================",2205],["# ============= standard library imports ========================",2098],["# ============= local library imports  ==========================",2078],["# Import appropriate classes from the client library.",1826]]},{"word":"license","context":[["# Use of this source code is governed by a BSD-style license that can be",36414],["license='MIT',",13714],[":license: BSD, see LICENSE for more details.",10228],["# or more contributor license agreements.  See the NOTICE file",8623],["# contributor license agreements.  See the NOTICE file distributed with",7267],["license='BSD',",7009],["'license': 'AGPL-3',",5724],["# License: GNU General Public License v3. See license.txt",5409],["# the MIT License: http://www.opensource.org/licenses/mit-license.php",4854],["# This source code is licensed under the AGPLv3 license found in the",4600]]},{"word":"licenses","context":[["#         http://www.apache.org/licenses/LICENSE-2.0",126073],["#     http://www.apache.org/licenses/LICENSE-2.0",74025],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["#      http://www.apache.org/licenses/LICENSE-2.0",45119],["#    http://www.apache.org/licenses/LICENSE-2.0",34596],["# http://www.apache.org/licenses/LICENSE-2.0",30992],["http://www.apache.org/licenses/LICENSE-2.0",20437],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975],["#   http://www.apache.org/licenses/LICENSE-2.0",15910]]},{"word":"like","context":[["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["X : array-like, shape (n_samples, n_features)",2043],["X : array-like, shape = [n_samples, n_features]",2003],["# absolute, like shown here.",1790],["X : {array-like, sparse matrix}, shape (n_samples, n_features)",1390],["X : {array-like, sparse matrix}, shape = [n_samples, n_features]",1376],["picks : array-like of int | None",1090]]},{"word":"limit","context":[["if limit:",4181],["limit=limit,",3387],["limit=limit,",3387],["if limit is not None:",2774],["self.limit = limit",2044],["self.limit = limit",2044],["limit=10,",1949],["limit = None",1423],["if limit is None:",1413],["limit=None,",1292]]},{"word":"limitations","context":[["# limitations under the License.",150062],["#    License for the specific language governing permissions and limitations",123669],["# License for the specific language governing permissions and limitations",32108],["limitations under the License.",18746],["#   limitations under the License.",9501],["#  limitations under the License.",7904],["# specific language governing permissions and limitations",5653],["#    limitations under the License.",4092],["# language governing permissions and limitations under the License.",3874],["#   License for the specific language governing permissions and limitations",2958]]},{"word":"line","context":[["for line in lines:",41967],["for line in f:",31883],["line = line.strip()",26427],["line = line.strip()",26427],["if not line:",20092],["return line",13527],["if line:",10246],["for line in f.readlines():",8390],["line = f.readline()",8006],["print line",7619]]},{"word":"lines","context":[["for line in lines:",41967],["lines = []",23152],["return lines",12015],["lines = f.readlines()",8913],["lines.append(line)",6242],["for l in lines:",5255],["# Uncomment the next two lines to enable the admin:",4215],["self.lines = []",2911],["if lines:",2884],["lines = [",2717]]},{"word":"link","context":[["# contain a <link> tag referring to it.  The value of this option must be the",25748],["for link in links:",4599],["return link",4065],["if link:",2764],["link=response.read()",1741],["for key, value in link.items():",1621],["self.link = link",1469],["self.link = link",1469],["def link(self):",1462],["link.save()",1261]]},{"word":"links","context":[["# If true, show URL addresses after external links.",44800],["# If true, links to the reST sources are added to the pages.",26301],["# If true, show page references after internal links.",23896],["\"links\": [",6945],["for link in links:",4599],["links = []",4317],["return links",3216],["'links': [",2066],["if links:",1245],["\"links\": {",1171]]},{"word":"list","context":[["# for a list of supported languages.",26482],["# A list of ignored prefixes for module index sorting.",26155],["# further.  For a list of options available for each theme, see the",24845],["# a list of builtin themes.",23964],["For the full list of settings and their values, see",14104],[":rtype: list",11953],["# notice, this list of conditions and the following disclaimer.",9328],["# copyright notice, this list of conditions and the following disclaimer",8007],["self.list = []",7973],["if isinstance(value, list):",7753]]},{"word":"load","context":[["def load(self):",10753],["# to load the internationalization machinery.",7663],["self.load()",5955],["body = self.fixtures.load(",5095],["# load the right message language",3982],["def load():",1707],["data = json.load(f)",1581],["def load(self, filename):",1485],["return json.load(f)",1166],["config.load(",1059]]},{"word":"loads","context":[["body = json.loads(body)",8219],["data = json.loads(response.content)",3919],["res_dict = json.loads(res.body)",2937],["return json.loads(str)",2862],["content = json.loads(response.content)",2372],["res_json = json.loads(response.content)",2363],["data = json.loads(data)",2187],["data = json.loads(res.content)",2155],["resp = json.loads(ret.read())",1850],["res_dict = jsonutils.loads(res.body)",1778]]},{"word":"local","context":[["'destination_type': 'local',",3194],["#!/usr/local/bin/python",2734],["# ============= local library imports  ==========================",2078],["if local:",1885],["from threading import local",1264],["# local imports",1261],["if self.local:",973],["# proper local hrefs must start with 'http://localhost/v2/'",925],["# local",784],["\"local\": [",781]]},{"word":"location","context":[["self.location = location",3723],["self.location = location",3723],["if location:",3130],["return location",2129],["location = None",2027],["def location(self):",1673],["{u'description': u'Not Found', u'location':",1652],["if not location:",1576],["for location in locations:",1496],["location=location,",1489]]},{"word":"log","context":[["log = logging.getLogger(__name__)",39134],["from oslo_log import log as logging",16834],["from nova.openstack.common import log as logging",7265],["'class': 'django.utils.log.AdminEmailHandler'",6831],["from twisted.python import log",6637],["LOG = log.getLogger(__name__)",6129],["'()': 'django.utils.log.RequireDebugFalse'",6036],["if log:",5568],["log.info(",4103],["from oslo_log import log",4092]]},{"word":"logger","context":[["logger = logging.getLogger(__name__)",56480],["logger.setLevel(logging.DEBUG)",8303],["logger.info(",7357],["logger.debug(",7081],["logger = logging.getLogger()",6961],["self.logger = logger",6946],["self.logger = logger",6946],["logger.warning(",5202],["logger.addHandler(handler)",4807],["logger.setLevel(logging.INFO)",4590]]},{"word":"logging","context":[["import logging",366679],["logger = logging.getLogger(__name__)",56480],["LOG = logging.getLogger(__name__)",51954],["log = logging.getLogger(__name__)",39134],["from oslo_log import log as logging",16834],["_logger = logging.getLogger(__name__)",11844],["logger.setLevel(logging.DEBUG)",8303],["logging.basicConfig(level=logging.DEBUG)",7490],["logging.basicConfig(level=logging.DEBUG)",7490],["from nova.openstack.common import log as logging",7265]]},{"word":"login","context":[["self.login()",10355],["def login():",5609],["self.client.login(username='super', password='secret')",4771],["def login(self):",4057],["login(request, user)",3934],["self.login(\"hamlet@zulip.com\")",1977],["client.login(user)",1799],["return redirect(url_for('login'))",1787],["self.login(self.admin)",1648],["def login(request):",1642]]},{"word":"long","context":[["if isinstance(ids, (int, long)):",5530],["keyStr = self.convertToDB(obj.db_id, 'long', 'int')",3479],["cls.add_constructor([param('long long int', 'v')])",2220],["cls.add_constructor([param('long int', 'v')])",2220],["cls.add_constructor([param('long unsigned int', 'v')])",2220],["cls.add_constructor([param('long long int', 'v')])",2220],["cls.add_constructor([param('long long unsigned int', 'v')])",2220],["cls.add_constructor([param('long long unsigned int', 'v')])",2220],["id = self.convertFromDB(row[0], 'long', 'int')",1786],["long = int",1782]]},{"word":"loop","context":[["loop = asyncio.get_event_loop()",3650],["def loop(self):",2433],["loop=self.loop)",1877],["loop=self.loop)",1877],["self.loop.run_until_complete(go())",1851],["test_utils.run_briefly(self.loop)",1817],["loop.close()",1784],["loop.run()",1498],["loop.run_forever()",1336],["self._loop = loop",1224]]},{"word":"lower","context":[["name = name.lower()",3270],["key = key.lower()",1804],["value = value.lower()",1473],["func = string.lower(func[0:1]) + func[1:]",1217],["bounding_polygon, airfoil='lower')",1216],["word = word.lower()",1067],["ext = ext.lower()",843],["text = text.lower()",840],["s = s.lower()",809],["cmd = sys.argv[1].lower()",767]]},{"word":"m","context":[["if m:",53777],["if not m:",15276],["self.m.ReplayAll()",15125],["return m",15037],["self.m.VerifyAll()",11727],["if m is None:",9436],["if m is not None:",8771],["M(\"Create\", m=\"create\"),",4453],["m = Message()",4158],["'m',",3002]]},{"word":"main","context":[["def main():",184278],["main()",172267],["unittest.main()",106260],["def main(argv):",16114],["sys.exit(main())",14904],["def main(args):",8616],["def main(self):",8258],["main(sys.argv)",6784],["main(sys.argv[1:])",6757],["gtk.main()",6067]]},{"word":"make","context":[["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# If you set this to False, Django will make some optimizations so as not",7661],["might make sense to replace the whole Django WSGI application with a custom one",4328],["This method makes a synchronous HTTP request by default. To make an",2718],["# Do not make changes to this file unless you know what you are doing--modify",1627],["# relative to the documentation root, use os.path.abspath to make it",1127],["def make(self):",800],["# software to the public domain. We make this dedication for the benefit",729],["autotools.make()",688],["# is relative to the documentation root, use os.path.abspath to make it",663]]},{"word":"manager","context":[["@manager.command",4463],["manager.run()",3002],["plugin = manager.NeutronManager.get_plugin()",2991],["from neutron import manager",2907],["manager = Manager(app)",2327],["self.manager = manager",2274],["self.manager = manager",2274],["manager = fake_network.FakeNetworkManager()",2090],["with transaction.manager:",1672],["return manager",1656]]},{"word":"map","context":[["result[attr] = list(map(",1972],["map(",1694],["from six.moves import (filter, input, map, range, zip)  # noqa",1483],["return map",1258],["result[attr] = dict(map(",1221],["map = {}",886],["if map is None:",622],["M(\"Map\", m=\"map\"),",584],["p.map = {}",581],["self.map = {}",564]]},{"word":"mask","context":[["def __init__(self, header, value, mask=None):",3443],["[param('ns3::Ipv4Mask const &', 'mask')],",3138],["self.mask = mask",2548],["self.mask = mask",2548],["mask =",2054],["return mask",1992],["if mask is not None:",1711],["if mask is None:",1601],["assert_equal(test.mask, control.mask)",1485],["assert_equal(test.mask, control.mask)",1485]]},{"word":"match","context":[["if match:",57234],["# List of patterns, relative to source directory, that match files and",24527],["if not match:",16850],["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["for match in matches:",6777],["if match is not None:",6249],["if match is None:",6085],["return match",4355],["mobj = re.match(self._VALID_URL, url)",3805],["match = True",3374]]},{"word":"math","context":[["import math",96236],[".. math::",19143],["from math import sqrt",6408],["from math import *",5994],[".. math ::",3483],["from math import ceil",3274],["from math import pi",2711],["from math import log",2214],["from math import floor",1573],["deg = math.pi/180",1193]]},{"word":"matplotlib","context":[["import matplotlib.pyplot as plt",68317],["import matplotlib",15799],["from matplotlib import pyplot as plt",6701],["import matplotlib as mpl",5552],[">>> import matplotlib.pyplot as plt",3982],["matplotlib.use('Agg')",3949],["from matplotlib.figure import Figure",2618],["<matplotlib.text.Text object at 0x...>",2526],["from matplotlib import pyplot",2274],["import matplotlib.cm as cm",2237]]},{"word":"matrix","context":[["return matrix",2026],["X : {array-like, sparse matrix}, shape (n_samples, n_features)",1390],["X : {array-like, sparse matrix}, shape = [n_samples, n_features]",1376],["# Get the data: the input matrix and the right output.",1226],["matrix = []",918],["Whether to use a precomputed Gram matrix to speed up",695],["matrix.",593],["matrix can also be passed as argument.",566],["``dtype=np.float32`` and if a sparse matrix is provided",565],["self.matrix = matrix",544]]},{"word":"max","context":[["self.max = max",1656],["self.max = max",1656],["cherrypy.response.headers['Cache-Control'] = \"max-age=0,no-cache,no-store\"",1257],["def max(self):",1127],["max = 0",979],["# self.set_header('Cache-Control', 'max-age=0,no-cache,no-store')",787],["return max",649],["\"max\" : \"100\"",569],["[param('uint32_t', 'min'), param('uint32_t', 'max')])",479],["[param('double', 'min'), param('double', 'max')])",479]]},{"word":"max_length","context":[["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27005],["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251],["'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",25100],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),",24733],["'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24033],["'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),",24009],["'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),",23830]]},{"word":"may","context":[["# you may not use this file except in compliance with the License.",144128],["# You may obtain a copy of the License at",143458],["#    not use this file except in compliance with the License. You may obtain",123660],["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may",123249],["# not use this file except in compliance with the License. You may obtain",30799],["# Licensed under the Apache License, Version 2.0 (the \"License\"); you may",30776],["you may not use this file except in compliance with the License.",18491],["You may obtain a copy of the License at",18414],["# contributors may be used to endorse or promote products derived from",11272],["# \"License\"); you may not use this file except in compliance",9513]]},{"word":"media","context":[["MEDIA_URL = '/media/'",7239],["# URL that handles the media served from MEDIA_ROOT. Make sure to use a",7203],["'django.core.context_processors.media',",3844],["# Example: \"/home/media/media.lawrence.com/static/\"",3360],["# Example: \"/home/media/media.lawrence.com/static/\"",3360],["# Example: \"http://media.lawrence.com/static/\"",3359],["# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"",3222],["# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"",3222],["# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"",3222],["# Example: \"/home/media/media.lawrence.com/media/\"",3183]]},{"word":"member","context":[["# pylint: disable=no-member",4094],["for member in members:",2809],["\"nodetype\" : \"member\",",2518],["role_id='member')",1200],["## object-base.h (module 'core'): void ns3::ObjectBase::NotifyConstructionCompleted() [member function]",1189],["## type-id.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::TypeIdValue::Copy() const [member function]",1189],["## callback.h (module 'core'): ns3::Ptr<ns3::AttributeValue> ns3::CallbackValue::Copy() const [member function]",1189],["## type-id.h (module 'core'): bool ns3::TypeId::HasConstructor() const [member function]",1189],["## type-id.h (module 'core'): uint16_t ns3::TypeId::GetUid() const [member function]",1189],["## type-id.h (module 'core'): ns3::TypeId ns3::TypeId::SetParent(ns3::TypeId tid) [member function]",1189]]},{"word":"menu","context":[["#  dir menu entry, description, category)",20993],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["menu.addSeparator()",2955],["return menu",2699],["</menu>",2662],["menu.append(item)",1694],["menu.add(menu_item)",1469],["menu = wx.Menu()",1136],["menu = gtk.Menu()",1090],["menu.show_all()",1082]]},{"word":"message","context":[["# If true, keep warnings as \"system message\" paragraphs in the built documents.",13596],["self.message = message",13479],["self.message = message",13479],["return message",11783],["if message:",7887],["def __init__(self, message):",5612],["raise nitro_exception(result.errorcode, str(result.message), str(result.severity))",4490],["if not message:",4165],["# load the right message language",3982],["print message",3835]]},{"word":"messages","context":[["'django.contrib.messages.middleware.MessageMiddleware',",25542],["'django.contrib.messages',",24760],["'django.contrib.messages.context_processors.messages',",13359],["'django.contrib.messages.context_processors.messages',",13359],["from django.contrib import messages",12231],["messages = []",5821],["for message in messages:",3049],["return messages",3006],["return current.messages[\"NONE\"]",1950],["self.messages = []",1873]]},{"word":"meta","context":[["<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">",3957],["meta = {",3452],["meta = MetaData()",3442],["meta.bind = migrate_engine",3343],["return meta",2557],["meta = {}",1743],["\"<html><head><meta name=\\\"qrichtext\\\" content=\\\"1\\\" /><style type=\\\"text/css\\\">\\n\"",1474],["if meta:",1408],["<meta charset=\"UTF-8\">",1402],["meta,",1236]]},{"word":"metadata","context":[["metadata = {}",5376],["return metadata",5140],["metadata = {",3834],["'metadata': {",3764],["def define_tables(cls, metadata):",3440],["if metadata:",3331],["metadata = MetaData()",3172],["for metakey, value in list(metadata.items()):",3128],["\"metadata\": {",2879],["metadata,",2303]]},{"word":"method","context":[["if request.method == 'POST':",42864],["if request.method == \"POST\":",13059],["if request.method == 'GET':",11749],["*compliance: mandatory -- This method must be implemented.*",11283],["req.method = 'POST'",10967],["self.method = method",6659],["self.method = method",6659],["req.method = 'PUT'",5811],["method='POST',",5692],["method.",4847]]},{"word":"methods","context":[["for method in methods:",2662],["# pylint: disable=too-few-public-methods",2500],["\"Write your backwards methods here.\"",1629],["methods.",1568],["methods = []",1498],["return methods",1384],["\"methods\": {",1306],["# Check that the right middleware methods have been invoked",1172],["\"Write your forwards methods here.\"",1143],["@app.route('/', methods=['GET', 'POST'])",959]]},{"word":"middleware","context":[["'django.middleware.common.CommonMiddleware',",27943],["'django.contrib.sessions.middleware.SessionMiddleware',",27272],["'django.contrib.auth.middleware.AuthenticationMiddleware',",26570],["'django.contrib.messages.middleware.MessageMiddleware',",25542],["'django.middleware.csrf.CsrfViewMiddleware',",24829],["'django.middleware.clickjacking.XFrameOptionsMiddleware',",17751],["'django.contrib.auth.middleware.SessionAuthenticationMiddleware',",10898],["'django.middleware.security.SecurityMiddleware',",7781],["middleware here, or combine a Django application with an application of another",4328],["# Apply WSGI middleware here.",4088]]},{"word":"migrations","context":[["class Migration(migrations.Migration):",81825],["migrations.CreateModel(",72711],["migrations.AddField(",70280],["migrations.AlterField(",62230],["from django.db import models, migrations",41876],["from django.db import migrations, models",33807],["migrations.RemoveField(",16094],["migrations.swappable_dependency(settings.AUTH_USER_MODEL),",8569],["migrations.AlterUniqueTogether(",6549],["from django.db import migrations",6204]]},{"word":"min","context":[["\"min\" : \"0\",",1723],["self.min = min",1179],["self.min = min",1179],["min=0,",1005],["def min(self):",987],["'js/libs/jquery.waypoints.min.js',",813],["'min': 0,",625],["min=1,",580],["\"min\" : \"1\",",568],["'js/libs/jquery.waypoints-sticky.min.js',",560]]},{"word":"mock","context":[["import mock",53709],["@mock.patch.object(",13526],["from mock import patch",12204],["@mock.patch.object(dell_storagecenter_api.StorageCenterApi,",9956],["@mock.patch(",6406],["from mock import Mock",6273],["with mock.patch.object(",5736],["from unittest import mock",4197],["mock.ANY,",4058],["mock.call(",4038]]},{"word":"mode","context":[["self.mode = mode",6893],["self.mode = mode",6893],["# indent-tabs-mode:nil",6533],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["if mode is None:",2044],["# -*- cpy-indent-level: 4; indent-tabs-mode: nil -*-",1983],["# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-",1976],["self._mode = mode",1882]]},{"word":"model","context":[["'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),",27004],["@api.model",22267],["self.model = model",8894],["self.model = model",8894],["return model",7713],["model = User",7635],["def model(self):",6557],["'security/ir.model.access.csv',",4394],["opts = self.model._meta",3191],["model = None",2949]]},{"word":"models","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["from django.db import models",109438],["from django.contrib.auth.models import User",43609],["from django.db import models, migrations",41876],["models = {",41305],["from django.db import migrations, models",33807],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230]]},{"word":"modify","context":[["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20368],["This program is free software: you can redistribute it and/or modify",18733],["# modify it under the terms of the GNU General Public License",15977],["# without limitation the rights to use, copy, modify, merge, publish,",14020],["# modify it under the terms of the GNU Lesser General Public",12480],["# modify it under the terms of the GNU General Public License as",12132],["# Ansible is free software: you can redistribute it and/or modify",11997]]},{"word":"module","context":[["# If false, no module index is generated.",74645],["# If true, the current module name will be prepended to all description",27546],["# A list of ignored prefixes for module index sorting.",26155],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["root_module = module.get_root()",7096],["return module",5557],["module = AnsibleModule(",5424],["self.module = module",4508]]},{"word":"modules","context":[["# If extensions (or modules to document with autodoc) are in another directory,",24837],["for module in modules:",3572],["modules = []",2587],["# Import appropriate modules from the client library.",2214],["return modules",1942],["# GRAMPS modules",1774],["# Gramps modules",1342],["# Standard Python modules",1266],["# If extensions (or modules to document with autodoc) are in another",1194],["modules = {}",1052]]},{"word":"more","context":[["# GNU General Public License for more details.",187562],["#    GNU Affero General Public License for more details.",40024],["GNU General Public License for more details.",37820],["# GNU Affero General Public License for more details.",29547],["For more information on this file, see",25647],["#    GNU General Public License for more details.",24253],["# General Public License for more details.",23459],["#  GNU General Public License for more details.",16892],["# Lesser General Public License for more details.",14026],["# GNU Lesser General Public License for more details.",13863]]},{"word":"move","context":[["for move in self.browse(cr, uid, ids, context=context):",3875],["move_obj = self.pool.get('stock.move')",1947],["return move",1474],["def move(self):",1280],["for move in moves:",1225],["move_obj = self.pool.get('account.move')",1000],["for move in pick.move_lines:",981],["if move.state == 'done':",953],["if move:",864],["stock_move_obj = self.pool.get('stock.move')",843]]},{"word":"mox","context":[["self.mox.ReplayAll()",109971],["self.mox.VerifyAll()",16084],["mox.IgnoreArg(),",6231],["self.mox.UnsetStubs()",4285],["mox.IgnoreArg())",3838],["import mox",3386],["self.mox.StubOutWithMock(self.compute,",2719],["self.mox.StubOutWithMock(utils, 'execute')",2293],["mox.ReplayAll()",2276],["self.mox.StubOutWithMock(self.compute.network_api,",2110]]},{"word":"msg","context":[["return msg",30257],["LOG.error(msg)",13887],["raise ValueError(msg)",11751],["if msg:",11047],["print msg",10073],["self.msg = msg",9486],["self.msg = msg",9486],["raise exc.HTTPBadRequest(explanation=msg)",9200],["print(msg)",7372],["def __init__(self, msg):",6355]]},{"word":"multiple","context":[["# You can specify multiple suffix as a list of string:",5614],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["multiple = False,",2289],["if multiple:",1493],["\"multiple\": False,",996],["multiple=True,",805],["if self.multiple:",784],["multiple=True)),",737],["self.ext_mgr.extensions = {'os-multiple-create': 'fake'}",708],["Only available in dictionary 'multi' when multiple regressions",622]]},{"word":"must","context":[["# contain a <link> tag referring to it.  The value of this option must be the",25748],["#     * Redistributions of source code must retain the above copyright",12656],["*compliance: mandatory -- This method must be implemented.*",11283],["#     * Redistributions in binary form must reproduce the above",7862],["# * Redistributions in binary form must reproduce the above copyright notice,",5753],["# * Redistributions of source code must retain the above copyright notice, this",5088],["#     * Redistributions in binary form must reproduce the above copyright",5041],["# 2. Redistributions in binary form must reproduce the above copyright",4912],["# If running in a Windows environment this must be set to the same as your",4205],["# In a Windows environment this must be set to your system time zone.",3640]]},{"word":"n","context":[["n = 0",26659],["print \"\\n---An error occurred---\\n\"",24666],["print \"\\n---An error occurred---\\n\"",24666],["return n",19970],["n += 1",18646],["'\\n'",17531],["for i in range(n):",15694],["eol_ = '\\n'",12842],["\"\\n\"",12367],["f.write('\\n')",8410]]},{"word":"name","context":[["self.name = name",104480],["self.name = name",104480],["return self.name",48183],["def name(self):",33281],["return name",30999],["'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})",29711],["'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})",29230],["# Output file base name for HTML help builder.",27989],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# If true, the current module name will be prepended to all description",27546]]},{"word":"names","context":[["# Custom sidebar templates, maps document names to template names.",27115],["# Custom sidebar templates, maps document names to template names.",27115],["# Additional templates that should be rendered to pages, maps page names to",25900],["# template names.",25883],["for name in names:",16167],["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["names = []",9331],["#     * Neither the name of Google Inc. nor the names of its",6894],["return names",5517]]},{"word":"namespace","context":[["self.namespace = namespace",2671],["self.namespace = namespace",2671],["def __call__(self, parser, namespace, values, option_string=None):",2624],["namespace=NAMESPACE)",1662],["# Remove this helper function from the namespace after it is invoked",1607],["if namespace is None:",1525],["namespace=namespace,",1454],["namespace=namespace,",1454],["if namespace:",1442],["## Register a nested module for the namespace FatalImpl",1332]]},{"word":"need","context":[["There normally shouldn't be any need to import this module directly.",2541],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["# If there are data files included in your packages that need to be",1008],["# TODO: need better explanation",916],["# Most projects will NOT need to set this to anything; you can just change the",829],["# Web-UI helpful to run brain-simulations. To use it, you also need do download",783],["In this scenario we need to create an Engine",715],["we don't even need a DBAPI to be available.",667],["do not need to process this typically.",510],["# need to place data files outside of your packages. See:",497]]},{"word":"net","context":[["return net",3388],["with self.network() as net:",1932],["# Copyright (C) 2014-2016 Alejandro Alonso <alejandro.alonso@kaleidos.net>",1078],["## net-device.h (module 'network'): bool ns3::NetDevice::IsBroadcast() const [member function]",1027],["## net-device.h (module 'network'): ns3::Address ns3::NetDevice::GetAddress() const [member function]",1027],["## net-device.h (module 'network'): void ns3::NetDevice::SetIfIndex(uint32_t const index) [member function]",1027],["## net-device.h (module 'network'): bool ns3::NetDevice::SetMtu(uint16_t const mtu) [member function]",1027],["## net-device.h (module 'network'): bool ns3::NetDevice::NeedsArp() const [member function]",1027],["## net-device.h (module 'network'): static ns3::TypeId ns3::NetDevice::GetTypeId() [member function]",1027],["## net-device.h (module 'network'): ns3::NetDevice [class]",1027]]},{"word":"network","context":[["with self.network() as network:",5520],["with self.network() as network:",5520],["data = {'subnet': {'network_id': network['network']['id'],",2189],["data = {'subnet': {'network_id': network['network']['id'],",2189],["return network",2134],["## ipv4-address.h (module 'network'): ns3::Ipv4Address [class]",2080],["## ipv6-address.h (module 'network'): ns3::Ipv6Address [class]",2080],["for network in networks:",2019],["from nova.network import model as network_model",1966],["network = self.networks.first()",1955]]},{"word":"neutron","context":[["from neutron.openstack.common import log as logging",3288],["from neutron.tests import base",3164],["from neutron import manager",2907],["from neutron import context",2570],["from neutron.common import constants",2254],["api.neutron.network_list(IsA(http.HttpRequest),",2043],[":param context: neutron api request context",2002],["from neutron.api.v2 import attributes",1996],["from neutron.extensions import portbindings",1739],["from neutron.common import exceptions as n_exc",1648]]},{"word":"new","context":[["return new",9911],["if new:",3546],["'target': 'new',",3269],["\\new Staff {",2434],["\"name\": \"new-server-test\",",2116],["# set new ids",1944],["\"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"",1762],["new = []",1630],["def new(self):",1594],["import new",1568]]},{"word":"next","context":[["def next(self):",20377],["# Uncomment the next line to enable the admin:",6792],["s.next()",4826],["# Uncomment the next two lines to enable the admin:",4215],["# Uncomment the next line for simple clickjacking protection:",3608],["# Uncomment the next line to enable admin documentation:",3558],["line = next(inputfile)",3473],["self.next()",2133],["self.next = None",1788],["return self.next()",1784]]},{"word":"no","context":[["# If false, no module index is generated.",74645],["# If false, no index is generated.",29138],["# How to display URL addresses: 'footnote', 'no', or 'inline'.",22648],["# no doc",6135],["# no input wsaction",5428],["# no output wsaction",5428],["else:  # pragma: no cover",4852],["# pylint: disable=no-member",4094],["#     There is no restriction on the value of this field.",3726],["choices: [ \"yes\", \"no\" ]",3598]]},{"word":"node","context":[["return node",34098],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["for node in nodes:",12495],["for child in node:",12452],["def build(self, node):",10454],["def buildAttributes(self, node, attrs, already_processed):",10335],["self.buildChildren(child, node, nodeName_)",10147],["def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):",10068],["if node is None:",8176],["self.buildAttributes(node, node.attrib, already_processed)",7530]]},{"word":"nodes","context":[["for node in nodes:",12495],["nodes = []",6575],["return nodes",5127],["for node in self.nodes:",3273],["raise nodes.SkipNode",3268],["for n in nodes:",2512],["self.nodes = []",2320],["from docutils import nodes",2243],["nodes.append(node)",1677],["self.nodes[0].generate(1)",1609]]},{"word":"non","context":[["# non-false value, then it is used:",25813],["raise TypeError, \"iteration over non-sequence\"",1901],["# some non-false value, then it is used:",1144],["#     a non ending quest to the responsive locomotion way of traveling!",988],["# -1 for non-fixed-size CLA",928],["non-source form of such a combination shall include the source code for",796],["# binary, for any purpose, commercial or non-commercial, and by any",730],["raise ValueError(\"n must be a non-negative integer.\")",726],["# py2exe/bbfreeze/non-CPython implementations don't do __file__, in which",648],["(crashes, non-termination) if the inputs do contain infinities or NaNs.",611]]},{"word":"not","context":[["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["# along with this program; if not, write to the Free Software",47621],["# not use this file except in compliance with the License. You may obtain",30799],["if not result:",28724],["# Note that not all possible configuration values are present in this",25557],["# not chapters.",25482],["return not (self == other)",24946]]},{"word":"notice","context":[["# The above copyright notice and this permission notice shall be included in",19741],["# The above copyright notice and this permission notice shall be included in",19741],["# The above copyright notice and this permission notice shall be included",13942],["# The above copyright notice and this permission notice shall be included",13942],["# notice, this list of conditions and the following disclaimer.",9328],["# The above copyright notice and this permission notice shall be",8293],["# The above copyright notice and this permission notice shall be",8293],["# copyright notice, this list of conditions and the following disclaimer",8007],["#       notice, this list of conditions and the following disclaimer.",6946],["#    notice, this list of conditions and the following disclaimer.",6617]]},{"word":"nova","context":[["from nova import exception",16857],["context = req.environ['nova.context']",10169],["from nova import test",10040],["from nova import utils",8292],["from nova.openstack.common import log as logging",7265],["from nova import context",6796],["from nova import db",6303],["from nova import objects",5682],["from nova.compute import vm_states",3532],["from nova.openstack.common import jsonutils",3335]]},{"word":"now","context":[["'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",24558],["'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),",23921],["'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",18884],["now = time.time()",17831],["'modified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'blank': 'True'}),",17539],["now = datetime.datetime.now()",10950],["now = datetime.datetime.now()",10950],["now = datetime.now()",6712],["now = datetime.now()",6712],["now = timezone.now()",4920]]},{"word":"np","context":[["import numpy as np",265867],[">>> import numpy as np",7683],["np.random.seed(0)",4557],["rng = np.random.RandomState(0)",4527],["np.random.seed(1234)",3151],["return np.nan",3033],["np.testing.assert_almost_equal(",2408],["x = np.asarray(x)",2106],["np.seterr(**olderr)",1642],["np.random.seed(self.seed)",1506]]},{"word":"ns","context":[["return ns",1295],["module.add_class('TypeId', import_from_module='ns.core')",1129],["module.add_class('ObjectBase', allow_subclassing=True, import_from_module='ns.core')",1129],["module.add_class('TypeIdChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])",1128],["module.add_class('CallbackChecker', import_from_module='ns.core', parent=root_module['ns3::AttributeChecker'])",1128],["module.add_class('CallbackValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])",1128],["module.add_class('TypeIdValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])",1128],["module.add_class('EmptyAttributeValue', import_from_module='ns.core', parent=root_module['ns3::AttributeValue'])",1128],["module.add_class('empty', import_from_module='ns.core')",1128],["module.add_class('CallbackBase', import_from_module='ns.core')",1128]]},{"word":"ns3","context":[["'ns3::TypeId',",72866],["'ns3::Time',",24404],["'ns3::Ptr< ns3::AttributeValue >',",21161],["'ns3::Ptr< ns3::AttributeValue >',",21161],["'ns3::Ipv6Address',",20265],["[param('ns3::Buffer::Iterator', 'start')],",19441],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294]]},{"word":"null","context":[["default: null",23918],["null=True,",17155],["'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",13433],["null=True)",3419],["blank=True, null=True)",3010],["'notes': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),",2543],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["null=True, blank=True)",2123],["'revision': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),",1915],["'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),",1897]]},{"word":"num","context":[["num = 0",6472],["num += 1",4951],["return num",3849],["except LdbError, (num, _):",2724],["for i in range(num):",2542],["if num == 0:",1759],["num = 1",1608],["data.update(self._attachment_management_form(num=0))",1325],["if num == 1:",1271],["self.num = num",1236]]},{"word":"number","context":[["linenum: The number of the line to check.",6993],["number=1, type=9, cpp_type=9, label=1,",4421],["# The unique identifier of the text. This can be a ISBN number",3412],["number=2, type=9, cpp_type=9, label=1,",3290],["number=1, type=11, cpp_type=10, label=1,",3197],["return number",2765],["# Right number/type of migrations?",2663],["screen.blit(number, number_position)",2629],["number=2, type=11, cpp_type=10, label=1,",2555],["self.number = number",2216]]},{"word":"numpy","context":[["import numpy as np",265867],["import numpy",56120],[">>> import numpy as np",7683],["from numpy import *",6918],["Class generic exists solely to derive numpy scalars from, and possesses,",3120],["from numpy import array",3115],[">>> import numpy.ma as ma",2258],[":param numpy: numpy python module",2008],[":param numpy: numpy python module",2008],["from numpy.distutils.core import setup",1876]]},{"word":"o","context":[["return o",7999],["for o, a in opts:",5223],["req = Request.blank('/sda1/p/a/c/o',",1978],["req = Request.blank('/v1/a/c/o',",1808],["o.close()",1637],["def default(self, o):",1534],["o.save()",1425],["for o in objs:",1303],["for o in objects:",1297],["'/sda1/p/a/c/o',",1242]]},{"word":"obj","context":[["return obj",54852],["if obj is None:",10194],["obj.save()",9298],["if obj:",6970],["if not obj:",5761],["obj=self,",5034],["for obj in objs:",4817],["obj = None",4556],["if obj is not None:",4456],["self.obj = obj",4333]]},{"word":"object","context":[["from swgpy.object import *",15751],["@mock.patch.object(",13526],["class Meta(object):",10448],["@mock.patch.object(dell_storagecenter_api.StorageCenterApi,",9956],["class Solution(object):",8707],["'type': 'object',",8450],["object.",7591],["</object>",6497],["class C(object):",6382],["class Foo(object):",6157]]},{"word":"object_name","context":[["'Meta': {'object_name': 'Group'},",25175],["'Meta': {'object_name': 'User'},",22609],["'Meta': {'object_name': 'Tag'},",2835],["'Meta': {'object_name': 'UserProfile'},",2615],["'Meta': {'ordering': \"('domain',)\", 'object_name': 'Site', 'db_table': \"'django_site'\"},",2260],["'Meta': {'object_name': 'Placeholder'},",1908],["'Meta': {'object_name': 'CMSPlugin'},",1785],["'Meta': {'object_name': 'Project'},",1741],["'Meta': {'object_name': 'Category'},",1712],["'Meta': {'unique_together': \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},",1588]]},{"word":"objects","context":[["instance_ref = objects.Instance(**self.test_instance)",7569],["instance = objects.Instance(**self.test_instance)",6446],["from nova import objects",5682],["for obj in objects:",3359],["objects = []",2996],["image_meta = objects.ImageMeta.from_dict(self.test_image_meta)",2881],["objects.",2782],["return objects",2733],["site = Site.objects.get_current()",2553],["bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(",2421]]},{"word":"obtain","context":[["# You may obtain a copy of the License at",143458],["#    not use this file except in compliance with the License. You may obtain",123660],["# not use this file except in compliance with the License. You may obtain",30799],["You may obtain a copy of the License at",18414],["#   You may obtain a copy of the License at",9457],["# file, You can obtain one at http://mozilla.org/MPL/2.0/.",8839],["# with the License.  You may obtain a copy of the License at",8617],["#  You may obtain a copy of the License at",7818],["# the License.  You may obtain a copy of the License at",7247],["#    You may obtain a copy of the License at",4044]]},{"word":"of","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["# You should have received a copy of the GNU General Public License",202164],["# it under the terms of the GNU General Public License as published by",170645],["# You may obtain a copy of the License at",143458],["# the Free Software Foundation, either version 3 of the License, or",124116],["#    a copy of the License at",123726],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["# the Free Software Foundation; either version 2 of the License, or",46274],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["#    You should have received a copy of the GNU Affero General Public License",41411]]},{"word":"offset","context":[["offset = 0",13702],["def parser(cls, buf, offset):",6083],["offset += 1",4420],["self.offset = offset",3689],["self.offset = offset",3689],["return offset",3628],["def serialize(self, buf, offset):",3082],["self.offset = 0",2891],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],["if offset:",2313]]},{"word":"on","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113],["For more information on this file, see",25647],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["distributed under the License is distributed on an \"AS IS\" BASIS,",19724],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["# Always use forward slashes, even on Windows.",10539],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",9504],["# software distributed under the License is distributed on an",8668]]},{"word":"one","context":[["@api.one",13492],["# file, You can obtain one at http://mozilla.org/MPL/2.0/.",8839],["# Licensed to the Apache Software Foundation (ASF) under one",5389],["# Licensed to the Apache Software Foundation (ASF) under one or more",4713],["might make sense to replace the whole Django WSGI application with a custom one",4328],["that later delegates to the Django one. For example, you could introduce WSGI",4327],["# You can obtain one at http://mozilla.org/MPL/2.0/.",3682],["# Licensed to Cloudera, Inc. under one",3052],["# Licensed to the StackStorm, Inc ('StackStorm') under one or more",2468],["raise InvalidArgumentError(\"Invalid argument: %s.  Expected one of %s\" % (name, \", \".join(required + optional)))",1695]]},{"word":"only","context":[["# A sample logging configuration. The only tangible logging",6076],["# Now only 'ja' uses this config value",4558],["# License and may only be used or replicated with the express permission of",2744],["@unittest.skipUnless(settings.ROOT_URLCONF == 'lms.urls', 'Test only valid in lms')",1531],["if not on_rtd:  # only import and set the theme if we're building docs locally",1399],["# The license below extends only to copyright in the software and shall",1267],["If this variable is read-only (config: false) in the",1089],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["#     This field can only take one of the following values:",873],["# license included in enthought/LICENSE.txt and may be redistributed only",808]]},{"word":"op","context":[["from alembic import op",12076],["import os.path as op",4731],["op.create_table(",4355],["return op",2888],["self.ExecOpCode(op)",2055],["self.op = op",1886],["self.op = op",1886],["'op': 'eq',",1247],["for op in ops:",1125],["\"\"\", op.node_def)",990]]},{"word":"open","context":[["def open(self):",7200],["with open(filename) as f:",5389],["long_description=open('README.rst').read(),",4380],["return open(os.path.join(os.path.dirname(__file__), fname)).read()",3551],["with open(filename, 'r') as f:",3440],["f = open(filename)",3381],["from codecs import open",3055],["with open(path) as f:",3048],["with open(filename, 'w') as f:",2988],["f = open(filename, 'r')",2984]]},{"word":"operation","context":[["name: A name for the operation (optional).",4287],[":param dry_run: Set to True if the operation should not actually run.",2063],["@operation",1592],["operation.",1427],["</wsdl:operation>",1233],["name: A name for this operation (optional).",1084],["def operation(self):",873],["definition = operation.deconstruct()",805],["@swagger.operation(",804],["self.operation = operation",727]]},{"word":"operations","context":[["operations = [",82384],[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["operations.",1235],["operations = []",990],["# Upgrade operations go here. Don't create your own engine; bind",572],["for operation in operations:",509],["for ops in operations:",496],["operations = [{",478],["@patch('gppylib.operations.restore.restore_file_with_nbu')",468],["action = migration.operations[0]",425]]},{"word":"operator","context":[["import operator",25764],["from operator import itemgetter",10447],["from operator import attrgetter",5227],["from operator import add",1113],["self.operator = operator",1044],["self.operator = operator",1044],["'operator': 'ADD',",933],["from operator import mul",766],["operator.",658],["if operator in expression.NEGATIVE_TERM_OPERATORS:",645]]},{"word":"oprot","context":[["oprot.writeFieldEnd()",57550],["def write(self, oprot):",22191],["oprot.writeStructEnd()",22049],["oprot.writeFieldStop()",22049],["oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))",21959],["oprot.trans.flush()",9051],["oprot.writeMessageEnd()",9034],["result.write(oprot)",8244],["oprot.writeListEnd()",5282],["self.success.write(oprot)",2033]]},{"word":"option","context":[["# (at your option) any later version.",187795],["(at your option) any later version.",40979],["#    License, or (at your option) any later version.",33565],["#    (at your option) any later version.",28884],["# License, or (at your option) any later version.",28201],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["# of the License, or (at your option) any later version.",16356],["#  (at your option) any later version.",11913],["*   (at your option) any later version.                                   *",10678],["## License, or (at your option) any later version.",10107]]},{"word":"optional","context":[["mc = raw_input(\"Minimum confirmations (optional): \")",6602],["axis : int, optional",5050],["name: A name for the operation (optional).",4287],["# optional",3690],["optional arguments:",3066],["comment = raw_input(\"Comment (optional): \")",2932],["for asynchronous request. (optional)",2901],["out : ndarray, optional",2620],["(optional)",1969],["# trailing slash if there is a path component (optional in other cases).",1882]]},{"word":"options","context":[["options=None),",95554],["options=None,",58231],["options={",49107],["# There are two options for replacing |today|: either, you set today to some",25812],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["# further.  For a list of options available for each theme, see the",24845],["(options, args) = parser.parse_args()",16538],["def handle(self, *args, **options):",16302],["options:",9708],["self.options = options",8103]]},{"word":"opts","context":[["for o, a in opts:",5223],["for opt, arg in opts:",5200],["return opts",4094],["opts = self.model._meta",3191],["opts = {}",2405],["if opts.verbose:",2324],["opts = model._meta",2170],["(opts, args) = parser.parse_args()",2168],["for opt in opts:",1897],["opts = []",1867]]},{"word":"or","context":[["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["# Unless required by applicable law or agreed to in writing, software",187425],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",128993],["#    Unless required by applicable law or agreed to in writing, software",127081],["# the Free Software Foundation, either version 3 of the License, or",124116],["#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",123577],["# This program is free software: you can redistribute it and/or modify",66253],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",65163],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778]]},{"word":"order","context":[["order = {'QED':1})",3799],["for order in self.browse(cr, uid, ids, context=context):",2489],["'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),",2468],["return order",1868],["order.save()",1838],["self.order = order",1806],["self.order = order",1806],["if order:",1749],["for line in order.order_line:",1561],["order.",1342]]},{"word":"org","context":[["#         http://www.apache.org/licenses/LICENSE-2.0",126073],["#     http://www.apache.org/licenses/LICENSE-2.0",74025],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["#      http://www.apache.org/licenses/LICENSE-2.0",45119],["#    http://www.apache.org/licenses/LICENSE-2.0",34596],["# http://www.apache.org/licenses/LICENSE-2.0",30992],["http://www.apache.org/licenses/LICENSE-2.0",20437],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975],["#   http://www.apache.org/licenses/LICENSE-2.0",15910]]},{"word":"orm","context":[["def forwards(self, orm):",41199],["def backwards(self, orm):",41166],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["from sqlalchemy.orm import sessionmaker",3305],["from sqlalchemy.orm import relationship",2345],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["from sqlalchemy.orm.exc import NoResultFound",2321]]},{"word":"os","context":[["import os",945005],["import os.path",80106],["import sys, os",25944],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["[param('std::ostream &', 'os')],",22052],["import os, sys",18842],["from os import path",16572],["#sys.path.insert(0, os.path.abspath('.'))",15081],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["os.close(fd)",13483]]},{"word":"other","context":[["def __eq__(self, other):",90006],["def __ne__(self, other):",49981],["# |version| and |release|, also used in various other places throughout the",25310],["return not (self == other)",24946],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["return isinstance(other, self.__class__) and self.__dict__ == other.__dict__",21874],["def __lt__(self, other):",12936],["def __add__(self, other):",12011],["return not self.__eq__(other)",10145],["def __cmp__(self, other):",9869]]},{"word":"out","context":[["return out",68249],["# All configuration values have a default; values that are commented out",25768],["out = []",17809],["out += \"\"\"",12499],["out.close()",8190],["self.assertNoOutput(out)",5655],["out : ndarray",5468],["out = \"\"",5285],["out, err = self.run_manage(args)",5279],["if out:",5089]]},{"word":"outfile","context":[["showIndent(outfile, level)",54429],["showIndent(outfile, level, pretty_print)",13276],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["outfile.write('),\\n')",8201],["outfile.close()",7872],["self.exportLiteralChildren(outfile, level, name_)",7373],["def exportLiteralChildren(self, outfile, level, name_):",7303],["def exportLiteralAttributes(self, outfile, level, already_processed, name_):",5878],["outfile.write('</%s%s>%s' % (namespace_, name_, eol_))",5480],["outfile.write('/>%s' % (eol_, ))",5457]]},{"word":"output","context":[["return output",56023],["# output. They are ignored by default.",26989],["# If true, an OpenSearch description file will be output, and all pages will",25786],["output = []",15697],["# -- Options for HTML output ---------------------------------------------------",12541],["# -- Options for LaTeX output --------------------------------------------------",12392],["# -- Options for HTML output ----------------------------------------------",12095],["# -- Options for manual page output ---------------------------------------",11908],["# -- Options for LaTeX output ---------------------------------------------",11902],["# -- Options for Texinfo output -------------------------------------------",11851]]},{"word":"p","context":[["return p",24257],["</p>",11504],["<p>",9986],["p[0] = p[1]",9672],["p[0] = p[1]",9672],["p.start()",7735],["p.wait()",7466],["if p:",5412],["p.join()",4842],["p.save()",4489]]},{"word":"package","context":[["for package in packages:",2576],["# as part of this package.",1694],["# This lets us ensure that the source package is imported, and that its",1387],["if package:",1337],["if not package:",1246],["return package",1188],["self.package = package",1092],["self.package = package",1092],["# This code is so you can run the samples without installing the package",981],["# which should be included with this package. The terms are also available at",930]]},{"word":"page","context":[["# Additional templates that should be rendered to pages, maps page names to",25900],["# the title page.",25469],["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["# One entry per manual page. List of tuples",23937],["# If true, show page references after internal links.",23896],["# -- Options for manual page output ---------------------------------------",11908],["# -- Options for manual page output --------------------------------------------",10335],["return page",4108],["page = 1",3958],["# A tuple containing the cover image and cover page html template filenames.",3089]]},{"word":"pages","context":[["# If true, the index is split into individual pages for each letter.",26818],["# If true, links to the reST sources are added to the pages.",26301],["# Additional templates that should be rendered to pages, maps page names to",25900],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# HTML files that should be inserted before the pages created by sphinx.",3483],["# HTML files shat should be inserted after the pages created by sphinx.",3083],["for page in pages:",2931],["# The theme to use for HTML and HTML Help pages.  Major themes that come with",2681],["pages = []",1552]]},{"word":"param","context":[["[param('std::ostream &', 'os')],",22052],["[param('ns3::Buffer::Iterator', 'start')],",19441],["[param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",18397],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('uint32_t', 'i')],",13131],[":param dict custom_headers: headers that will be added to the request",8074],["[param('ns3::Address const &', 'address')],",7988],[":param bool raw: returns the direct response alongside the",7438],["[param('ns3::TagBuffer', 'i')],",6956]]},{"word":"parameter","context":[["parameter.",2481],["Note: this parameter is tree-specific.",1548],["The shape parameter(s) for the distribution (see docstring of the",1233],["# constructor, see if we should eliminate this parameter from",916],["for parameter in parameters:",865],["location parameter (default=0)",723],["scale parameter (default=1)",649],["# verify the required parameter 'id' is set",638],[",help='Field parameter value [default: %default]')",507],["#Check parameter value on filesystem",504]]},{"word":"parameters","context":[["# Construct parameters",8075],["parameters.Str(",6272],["parameters:",5308],["parameters = {}",4928],["parameters.",3545],["Choreo. The InputSet object is used to specify input parameters when executing this Choreo.",2841],["return parameters",2674],["parameters.Flag(",2511],["parameters = {",2259],["if parameters:",1966]]},{"word":"params","context":[["params = {",32525],["params = {}",23547],["return params",13596],["'params': {",7990],["params = []",7681],["if params:",7046],["params={",6275],["params[key] = val",6176],["params = locals()",6085],["self.params = params",5813]]},{"word":"parent","context":[["self.parent = parent",21823],["self.parent = parent",21823],["def __init__(self, parent):",17574],["def __init__(self, parent=None):",17248],["self.parent = None",9002],["if parent:",8872],["if self.parent is None:",4663],["if self.parent:",4209],["parent = None",3884],["if parent is None:",3752]]},{"word":"parse","context":[["def parse(self):",7312],["import urllib.parse",4151],["from urllib.parse import urlparse",3116],["def parse(self, response):",3035],["from dateutil.parser import parse",2509],["from urllib.parse import urlencode",2301],["dtstart=parse(\"19970902T090000\"))),",2085],["self.parse()",1833],["import six.moves.urllib.parse as urlparse",1632],["from urllib.parse import urljoin",1375]]},{"word":"parser","context":[["parser.add_argument(",71991],["args = parser.parse_args()",61658],["parser = argparse.ArgumentParser()",23825],["parser.add_option(",20243],["return parser",19780],["(options, args) = parser.parse_args()",16538],["parser.print_help()",15524],["parser = argparse.ArgumentParser(",14663],["parser = OptionParser()",9008],["options, args = parser.parse_args()",6495]]},{"word":"part","context":[["# This file is part of Ansible",11217],["## This file is part of Invenio.",7510],["# This file is part of Invenio.",7129],["for part in parts:",4893],["# This file is part of weboob.",4872],["# This module is part of SQLAlchemy and is released under",3916],["# This file is part of Indico.",3430],["# This file is part of SickRage.",3413],["# This file is part of GNU Radio",3336],["# you should have received as part of this distribution. The terms",2697]]},{"word":"parts","context":[["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["parts = []",6502],["for part in parts:",4893],["if len(parts) == 1:",2954],["if len(parts) == 2:",2808],["if len(parts) > 1:",2520],["return parts",2026],["parts = line.split()",1902],["if parts:",1307],["# are parts, not chapters.",1126]]},{"word":"pass","context":[["pass",2389160],["except: pass",37010],["#    pass",4986],["#     pass",3836],["#pass",3821],["...     pass",2886],["pass;",2456],["else: pass",2410],["#         pass",2404],["#        pass",2239]]},{"word":"passed","context":[["passed = False",1581],["passed = True",1131],["if passed:",867],["etree.XML(\"\"\"<results status=\"passed\">",705],["reprec.assertoutcome(passed=1)",655],[":param client: the client to use.  If not passed, falls back to the",641],["<results status=\"passed\">",634],["ssS'passed'",608],["passed = 0",568],["matrix can also be passed as argument.",566]]},{"word":"password","context":[["'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),",25251],["self.password = password",10558],["self.password = password",10558],["self.client.login(username='super', password='secret')",4771],["password = None",4304],["if password:",4221],["'password': password,",3920],["'password': password,",3920],["if not password:",3428],["password=password,",3392]]},{"word":"patch","context":[["@mock.patch.object(",13526],["from mock import patch",12204],["@mock.patch.object(dell_storagecenter_api.StorageCenterApi,",9956],["@mock.patch(",6406],["with mock.patch.object(",5736],["mock.patch.object(",3329],["with mock.patch(",3256],["from mock import Mock, patch",3078],["@mock.patch.object(dell_storagecenter_api.HttpClient,",2719],["@mock.patch('requests.get')",2626]]},{"word":"path","context":[["import os.path",80106],["return path",36238],["# add these directories to sys.path here. If the directory is relative to the",24896],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# The name of an image file (within the static path) to use as favicon of the",24060],["self.path = path",19533],["self.path = path",19533],["from os import path",16572],["#sys.path.insert(0, os.path.abspath('.'))",15081],["#sys.path.insert(0, os.path.abspath('.'))",15081]]},{"word":"paths","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["for path in paths:",12492],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# Don't forget to use absolute paths, not relative paths.",10569],["# Don't forget to use absolute paths, not relative paths.",10569],["paths = []",6000],["return paths",4070]]},{"word":"pattern","context":[["for pattern in patterns:",2510],["self.pattern = pattern",2185],["self.pattern = pattern",2185],["if pattern:",1531],["return pattern",1429],["if not pattern:",927],["if pattern is None:",845],["'pattern': (0, 2, 1)",760],["pattern = re.compile(",716],["pattern = None",713]]},{"word":"payload","context":[["payload = {",10218],["return payload",2796],["payload = {}",1905],["payload)",1763],["payload = msg.payload",1733],["payload = msg.payload",1733],["self.payload = payload",1461],["self.payload = payload",1461],["'CONTENT_LENGTH': len(payload),",1216],["if payload:",1052]]},{"word":"permission","context":[["# The above copyright notice and this permission notice shall be included in",19741],["'auth.permission': {",15172],["# The above copyright notice and this permission notice shall be included",13942],["# this software without specific prior written permission.",11283],["u'auth.permission': {",9985],["# The above copyright notice and this permission notice shall be",8293],["# The above copyright notice and this permission notice shall be included in all",6263],["The above copyright notice and this permission notice shall be included in",5497],["#   without specific prior written permission.",4227],["# Red Hat trademarks are not licensed under GPLv2. No permission is",3127]]},{"word":"permissions","context":[["# See the License for the specific language governing permissions and",149392],["#    License for the specific language governing permissions and limitations",123669],["# License for the specific language governing permissions and limitations",32108],["See the License for the specific language governing permissions and",19730],["#   See the License for the specific language governing permissions and",9536],["#  See the License for the specific language governing permissions and",7927],["# specific language governing permissions and limitations",5653],["#    See the License for the specific language governing permissions and",4054],["# language governing permissions and limitations under the License.",3874],["#   License for the specific language governing permissions and limitations",2958]]},{"word":"pi","context":[["from math import pi",2711],["deg = math.pi/180",1193],["# degree = math.asin(20/2/radius)*180/math.pi",621],["# chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2)",621],["from numpy import pi",565],["# 導入數學函式後, 圓周率為 pi",497],["deg = pi/180.",495],["lxd=midx+rd*sin(ang2-2.*pi/n)",488],["ang=-2.*j*pi/n+sigma",488],["ang2=2.*j*pi/n+sigma",488]]},{"word":"pid","context":[["pid = os.fork()",7020],["if pid:",3570],["if pid == 0:",2982],["if pid > 0:",2894],["pid = os.getpid()",2876],["pid = None",2837],["return pid",2506],["self.pid = pid",2183],["self.pid = pid",2183],["if not pid:",2133]]},{"word":"pk","context":[["if not self.pk:",1102],["response = detail_view(request, ex1.pk, template_string=template_text)",763],["addon = Addon.objects.get(pk=3615)",760],["if pk:",696],["if self.pk:",691],["CaseTestModel.objects.all().order_by('pk'),",650],["user = User.objects.get(pk=user_id)",637],["if self.pk is None:",614],["a = Addon.objects.get(pk=3615)",565],["return User.objects.get(pk=user_id)",556]]},{"word":"platform","context":[["import platform",28485],["if sys.platform == 'win32':",14849],["if sys.platform == \"win32\":",6993],["if sys.platform == 'darwin':",5981],["if platform.system() == 'Windows':",3175],["if sys.platform.startswith('win'):",3065],["For more details about this platform, please refer to the documentation at",2875],["if sys.platform != 'win32':",2608],["if sys.platform == \"darwin\":",2388],["elif sys.platform == 'darwin':",1984]]},{"word":"plt","context":[["import matplotlib.pyplot as plt",68317],["plt.show()",52859],["fig = plt.figure()",15437],["plt.figure()",11705],["plt.clf()",11085],["plt.close()",10103],["from matplotlib import pyplot as plt",6701],["plt.tight_layout()",6163],["plt.legend()",5716],["#plt.show()",5118]]},{"word":"plugin","context":[["instance = self.plugin.return_value",4832],["plugin = manager.NeutronManager.get_plugin()",2991],["# http://blog.tvalacarta.info/plugin-xbmc/pelisalacarta/",2079],["@plugin.event(",1956],["for plugin in plugins:",1949],["@event('plugin.register')",1780],["self.plugin = plugin",1730],["self.plugin = plugin",1730],["return plugin",1651],["A QGIS plugin",1611]]},{"word":"point","context":[["for point in points:",1836],["return point",890],["Email                : martin near rapidlasso point com",691],["for point in self.points:",527],["point.",520],["# end of dedendum point",488],["# the line from last end of dedendum point to the recent",488],["corresponds to a single data point.",472],["sympy.geometry.point.Point",469],["# Every ZenPack egg must define exactly one zenoss.zenpacks entry point",456]]},{"word":"points","context":[["# setting points here.",4242],["points = []",4163],["return points",2866],["for point in points:",1836],["for p in points:",1282],["self.points = points",1199],["self.points = points",1199],["# To provide executable scripts, use entry points in preference to the",1132],["# \"scripts\" keyword. Entry points provide cross-platform support and allow",1107],["# -*- Entry points: -*-",1044]]},{"word":"pool","context":[["self.hass.pool.block_till_done()",4374],["pool.close()",3918],["pool.join()",3773],["pool = Pool()",3059],["product_obj = self.pool.get('product.product')",2555],["mod_obj = self.pool.get('ir.model.data')",2145],["uom_obj = self.pool.get('product.uom')",2094],["cur_obj = self.pool.get('res.currency')",1995],["move_obj = self.pool.get('stock.move')",1947],["currency_obj = self.pool.get('res.currency')",1857]]},{"word":"pop","context":[["callback = kwargs.pop('callback', self._callback)",9277],["def pop(self):",4956],["self._state.following.pop()",3486],["stack.pop()",3339],["name_key.text = kwargs.pop('name')",1712],["context.pop()",1445],["sys.path.pop(0)",1394],["self.pop()",1328],["self.stack.pop()",1281],["self.tree.openElements.pop()",1202]]},{"word":"port","context":[["self.port = port",15533],["self.port = port",15533],["return port",5533],["for port in ports:",4433],["if port:",4248],["port = int(port)",4050],["port = int(port)",4050],["port = None",3656],["port=port,",2854],["port=port,",2854]]},{"word":"pos","context":[["pos = 0",11189],["pos += 1",8799],["return pos",3935],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["self.pos = pos",3166],["self.pos = pos",3166],["if pos != -1:",2631],["self.pos = 0",2415],["self.pos += 1",2398]]},{"word":"position","context":[["self.position = position",2755],["self.position = position",2755],["position = 0",2006],["pos = s.position()",1894],["screen.blit(number, position)",1800],["'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),",1761],["position=-1,",1606],["position += 1",1441],["position=1,",1317],["def position(self):",1304]]},{"word":"post","context":[["def post(self):",19202],["response = self.client.post(",12406],["def post(self, request, *args, **kwargs):",7974],["res = self.client.post(url, form_data)",3897],["'post',",3833],["def post(self, request):",3504],["post.save()",2876],["response = self.client.post(url, data)",2541],["def post(self, *args, **kwargs):",2176],["response = self.client.post(collector_url, self.post_data)",2160]]},{"word":"prefix","context":[["if prefix:",7243],["# URL prefix for static files.",5435],["def __str__(self, prefix=\"\", printElemNumber=0):",4792],["self.prefix = prefix",4255],["self.prefix = prefix",4255],["prefix = ''",3899],["res+=prefix+\">\\n\"",3223],["if prefix is None:",2600],["prefix = \"\"",2295],["return prefix",1908]]},{"word":"primary_key","context":[["'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",265510],["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",32022],["id = Column(Integer, primary_key=True)",17331],["('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",16847],["('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",15194],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["id = db.Column(db.Integer, primary_key=True)",10949],["'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),",9079],["'id': ('django.db.models.fields.CharField', [], {'max_length': '36', 'primary_key': 'True'}),",6348]]},{"word":"print","context":[["print",114397],["print()",42788],["print \"\"",27527],["print e",27464],["print \"\\n---An error occurred---\\n\"",24666],["print(\"\")",20580],["print ''",16829],["print(e)",15921],["print('')",15467],["print(",11661]]},{"word":"print_function","context":[["from __future__ import print_function",98595],["from __future__ import absolute_import, division, print_function",10098],["from __future__ import print_function, division",7909],["from __future__ import (absolute_import, division, print_function)",7334],["from __future__ import absolute_import, print_function",6651],["from __future__ import division, print_function, absolute_import",6265],["from __future__ import absolute_import, division, print_function, unicode_literals",5790],["from __future__ import (absolute_import, division, generators, nested_scopes, print_function,",5714],["from __future__ import division, print_function",4691],["from __future__ import division, absolute_import, print_function",4438]]},{"word":"process","context":[["def process(self):",7108],["return process",4279],["def process(value):",3671],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["process.wait()",2307],["self.process = None",1978],["process = subprocess.Popen(",1459],["process.",1312],["process.start()",1180]]},{"word":"product","context":[["from itertools import product",3747],["product_obj = self.pool.get('product.product')",2555],["product_obj = self.pool.get('product.product')",2555],["uom_obj = self.pool.get('product.uom')",2094],["for product in products:",1381],["if not product:",1207],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["product = self.pool.get('product.product').browse(cr, uid, product_id, context=context)",1080],["_inherit = 'product.product'",1054]]},{"word":"profile","context":[["profile.save()",4458],["if profile:",2473],["return profile",2245],["for profile in profiles:",1430],["@profile",1152],["if not profile:",1145],["import profile",1021],["model_name='profile',",938],["profile = None",904],["#@profile",888]]},{"word":"program","context":[["# This program is distributed in the hope that it will be useful,",137492],["# This program is free software: you can redistribute it and/or modify",66253],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    This program is distributed in the hope that it will be useful,",58120],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["# along with this program; if not, write to the Free Software",47621],["This program is distributed in the hope that it will be useful,",27838],["This program is free software: you can redistribute it and/or modify",18733]]},{"word":"project","context":[["# General information about the project.",27441],["# \"<project> v<release> documentation\".",25615],["# The version info for the project you're documenting, acts as replacement for",25262],["# Build paths inside the project like this: os.path.join(BASE_DIR, ...)",13759],["self.project.save()",4635],["# Copyright 2014 Pants project contributors (see CONTRIBUTORS.md).",4523],["# Licensed under the MIT License. See License.txt in the project root for",4088],["project=project,",3806],["project=project,",3806],["# or the project homepage.",3482]]},{"word":"project_id","context":[["filter_by(project_id=project_id).\\",4522],["filter_by(project_id=project_id).\\",4522],["project_id=project_id,",2844],["project_id=project_id,",2844],["if project_id:",2492],["self.project_id = 'fake'",2299],["project_id,",2176],["project_id='test_project',",1783],["self.context = context.RequestContext(self.user_id, self.project_id)",1689],["project_id=project_id)",1565]]},{"word":"properties","context":[["'properties': {",13958],["\"properties\": {",8921],["properties.Schema.STRING,",8475],["properties:",5142],["properties = {}",3388],["return properties",2406],["properties.Schema.MAP,",2215],["properties = {",2118],["self.properties = properties",1910],["self.properties = properties",1910]]},{"word":"property","context":[["@property",1009433],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376],["</property>",2363],["_swig_property = property",1735],["db_id = property(__get_db_id, __set_db_id)",1679],["filters={'property-owner_id': self.tenant.id,",1595],["<property>",1435],["__weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default",1408],["# property including but not limited to intellectual property relating",1267],["# property including but not limited to intellectual property relating",1267]]},{"word":"protocol","context":[["self.protocol = protocol",2781],["self.protocol = protocol",2781],["# Generated by the protocol buffer compiler.  DO NOT EDIT!",2521],["'protocol': 'tcp',",1904],["protocol,",1050],["from thrift.protocol import TBinaryProtocol",1003],["from thrift.protocol import fastbinary",965],["'protocol': 'udp',",951],["from twisted.internet import protocol",896],["'protocol': const.PROTO_NAME_TCP,",867]]},{"word":"provided","context":[["# modification, are permitted provided that the following conditions are met:",20828],["# modification, are permitted provided that the following conditions are",14877],["# modification, are permitted provided that the following conditions",8542],["# in the documentation and/or other materials provided with the",8026],["#       documentation and/or other materials provided with the distribution.",6196],["#   and/or other materials provided with the distribution.",6180],["#  modification, are permitted provided that the following conditions are",4030],["#    documentation and/or other materials provided with the distribution.",2848],["# are permitted provided that the following conditions are met:",2806],["# documentation and/or other materials provided with the distribution;",2750]]},{"word":"published","context":[["# it under the terms of the GNU General Public License as published by",170645],["it under the terms of the GNU General Public License as published by",40365],["#    published by the Free Software Foundation, either version 3 of the",33963],["#    it under the terms of the GNU General Public License as published by",20820],["# it under the terms of the GNU Affero General Public License as published by",18203],["# License as published by the Free Software Foundation; either",13925],["# published by the Free Software Foundation, either version 3 of the",13552],["# as published by the Free Software Foundation; either version 2",13158],["#  it under the terms of the GNU General Public License as published by",11017],["*   it under the terms of the GNU General Public License as published by  *",10710]]},{"word":"put","context":[["# Don't put anything in this directory yourself; store your static files",5292],["def put(self):",1911],["@attr(method='put')",1856],["# put it back",1734],["request = self._client.put(url, query_parameters)",1581],["resp = self.app.put(",1087],["response = self.client.put(",1021],["self.put()",1009],["user.put()",1007],["'put',",920]]},{"word":"py","context":[[":param DeviceProxy: The device proxy for REST operations and session handling. Refer to `common/device_proxy.py`",3013],["# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-",2801],["# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT",2575],["import py",2121],["self.remove_settings('settings.py')",1472],["# allow setup.py to be run from any path",1439],["os.system('python setup.py sdist upload')",1429],["# For copyright and license notices, see __openerp__.py file in module root",1213],["# the version across setup.py and the project code, see",1190],["# -*- encoding: utf-8; py-indent-offset: 4 -*-",1180]]},{"word":"pytest","context":[["import pytest",60331],["@pytest.fixture",31748],["with pytest.raises(ValueError):",13084],["@pytest.mark.django_db",8837],["with pytest.raises(TypeError):",6551],["@pytest.fixture()",4602],["@pytest.mark.parametrize(",3524],["@pytest.fixture(scope='function')",2482],["@pytest.fixture(scope='session')",2444],["@pytest.fixture(autouse=True)",2288]]},{"word":"python","context":[["#!/usr/bin/env python",502842],["#!/usr/bin/python",166810],["#! /usr/bin/env python",36357],[".. code-block:: python",12815],["#! /usr/bin/python",8559],["```python",7316],["from twisted.python import log",6637],["#!/bin/env python",4280],["<script type=\"text/python\">",3594],["from tensorflow.python.framework import ops",3095]]},{"word":"q","context":[["q.breakable()",7608],["return q",6976],["q.text(\",\"); q.breakable()",4783],["q.text(\",\"); q.breakable()",4783],["with q.group():",3804],["q.text('}')",3804],["def pretty_print(self, q):",3804],["with q.indent(2):",3804],["q,",2213],["if q:",2117]]},{"word":"query","context":[["return query",13572],["if query:",6846],["query = \"\"\"",5593],["cursor.execute(query)",4946],["return query.all()",2880],["query = {",2878],["self.query = query",2853],["self.query = query",2853],["query = query.filter(",2454],["query = query.filter(",2454]]},{"word":"queue","context":[["import queue",3108],["self.queue = queue",2943],["self.queue = queue",2943],["except queue.Empty:",2248],["while queue:",1917],["from queue import Queue",1869],["self.queue = []",1647],["self.queue.task_done()",1334],["import Queue as queue",1136],["queue = []",1108]]},{"word":"r","context":[["return r",59967],["r\"\"\"",39838],["L = ['%s=%r' % (key, value)",21414],["url(r'^admin/', include(admin.site.urls)),",14085],["if r:",11328],["r = []",9263],["r'''",7362],["r['router']['id'],",7294],["eq_(r.status_code, 200)",6610],["self.assertEqual(r.status_code, 200)",5469]]},{"word":"raise","context":[["raise",305950],["raise NotImplementedError",110441],["raise NotImplementedError()",99691],["raise e",91385],["raise ValueError(",49546],["raise Http404",26305],["raise ValueError",21891],["raise StopIteration",18404],["raise TypeError(",17538],["raise NotImplementedError(",15310]]},{"word":"raises","context":[["with pytest.raises(ValueError):",13084],["with pytest.raises(TypeError):",6551],[":raises:",4642],["@raises(ValueError)",4003],["with pytest.raises(KeyError):",2210],["from nose.tools import raises",2059],["with pytest.raises(Exception):",1965],["with pytest.raises(ValidationError):",1716],["@raises(TypeError)",1647],["with pytest.raises(AssertionError):",1552]]},{"word":"random","context":[["import random",127442],["from random import randint",9781],["np.random.seed(0)",4557],["rng = np.random.RandomState(0)",4527],["from random import choice",4274],["random.seed()",3739],["from random import random",3406],["from random import random",3406],["np.random.seed(1234)",3151],["from random import randrange",2649]]},{"word":"range","context":[["for i in range(3):",19936],["for i in range(10):",18930],["for i in range(n):",15694],["for i in range(5):",13524],["for i in range(4):",12296],["for i in range(2):",9690],["for i in range(100):",6975],["for i in range(N):",5803],["for i in range(count):",4666],["from six.moves import range",4252]]},{"word":"raw","context":[["if raw:",12505],[":param bool raw: returns the direct response alongside the",7438],["if raw=true",6712],["return raw",2350],["self, custom_headers=None, raw=False, **operation_config):",2190],["if not raw:",1572],["'raw',",1265],["self.raw = raw",1091],["self.raw = raw",1091],["def unpack (self, raw, offset=0):",1078]]},{"word":"rc","context":[["# The full version, including alpha/beta/rc tags.",26558],["if rc != 0:",12256],["return rc",8419],["if rc == 0:",5877],["if rc:",3420],["rc = 0",2813],["if not rc:",1362],["from matplotlib import rc",1340],["rc = 1",1274],["sys.exit(rc)",1066]]},{"word":"re","context":[["import re",377951],["# The version info for the project you're documenting, acts as replacement for",25262],["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["matches = re.compile(patron,re.DOTALL).findall(data)",3893],["mobj = re.match(self._VALID_URL, url)",3805],["mobj = re.search(",2685],["except RecognitionException as re:",2365],["self._errHandler.reportError(self, re)",2257],["localctx.exception = re",2257],["self._errHandler.recover(self, re)",2257]]},{"word":"read","context":[["def read(self, iprot):",22087],["def read(self):",9317],["data = f.read()",8865],["args.read(iprot)",8039],["return f.read()",7751],["result.read(self._iprot)",6273],["x.read(self._iprot)",6272],["resp.read()",5493],["content = f.read()",5281],["def read(fname):",4562]]},{"word":"reason","context":[["def connectionLost(self, reason):",4771],["self.reason = reason",3932],["self.reason = reason",3932],["raise exception.InvalidVolume(reason=msg)",3292],["raise exception.InvalidInput(reason=msg)",2839],["if reason:",1516],["def clientConnectionFailed(self, connector, reason):",1417],["reason=reason)",1118],["reason=reason)",1118],["def clientConnectionLost(self, connector, reason):",1090]]},{"word":"received","context":[["# You should have received a copy of the GNU General Public License",202164],["#    You should have received a copy of the GNU Affero General Public License",41411],["You should have received a copy of the GNU General Public License",38555],["# You should have received a copy of the GNU Affero General Public License",31967],["#    You should have received a copy of the GNU General Public License",20976],["# You should have received a copy of the GNU Lesser General Public License",17880],["# You should have received a copy of the GNU Lesser General Public",15926],["# You should have received a copy of the GNU General Public License along",15209],["## You should have received a copy of the GNU General Public License",15054],["#  You should have received a copy of the GNU General Public License",14617]]},{"word":"record","context":[["with warnings.catch_warnings(record=True) as w:",7843],["def emit(self, record):",6900],["for record in records:",5407],["return record",5363],["<record>",4854],["if record:",4724],["</record>",4537],["with warnings.catch_warnings(record=True):",4498],["def format(self, record):",3209],["for record in self:",2622]]},{"word":"redirect","context":[["from django.shortcuts import redirect",5275],["return redirect(url_for('index'))",4455],["return redirect('/')",3884],["from django.shortcuts import render, redirect",2187],["return redirect(url_for('main.index'))",2065],["self.redirect('/')",1936],["return redirect(url_for('login'))",1787],["return redirect(url)",1619],["return redirect(url_for('.index'))",1326],["return redirect(",1283]]},{"word":"redistribute","context":[["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["This program is free software: you can redistribute it and/or modify",18733],["# This program is free software; you can redistribute it and/or",15997],["# This library is free software; you can redistribute it and/or",13150],["# Ansible is free software: you can redistribute it and/or modify",11997],["*   This program is free software; you can redistribute it and/or modify  *",10713],["## Invenio is free software; you can redistribute it and/or",7533],["This program is free software; you can redistribute it and/or modify",6145]]},{"word":"ref","context":[[":param operation_config: :ref:`Operation configuration",6589],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["# https://docs.djangoproject.com/en/1.8/ref/settings/#databases",3968],["return ref",3182],["https://docs.djangoproject.com/en/1.7/ref/settings/",3012],["https://docs.djangoproject.com/en/1.6/ref/settings/",3002],["# https://docs.djangoproject.com/en/1.7/ref/settings/#databases",2988],["# https://docs.djangoproject.com/en/1.6/ref/settings/#databases",2967],["if ref:",2706],["# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts",2678]]},{"word":"reference","context":[["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],[":param self: self reference",3969],["# return reference",792],[":param volume: volume reference",547],["self.reference = reference",536],["self.reference = reference",536],["if reference:",493],["# verify reference counting",487],["return reference",468],["@param self Object reference.",451]]},{"word":"register","context":[["@register.filter",15851],["register = template.Library()",13778],["@register.simple_tag",6299],["def register():",5894],["@register.tag",5385],["@register()",4321],["settings.register(",3600],["register = Library()",2856],["@register.assignment_tag",2527],["self.app.register(",2456]]},{"word":"related","context":[["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),",21125],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"})",8621],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\", 'null': 'True', 'blank': 'True'})",2330],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['sites.Site']\"}),",1948],["'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['cms.Placeholder']\", 'null': 'True'}),",1768],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),",1555],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"}),",1554],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['sites.Site']\"}),",1495]]},{"word":"relative","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# relative to this directory. They are copied after the builtin static files,",26167],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name of an image file (relative to this directory) to place at the top",25393],["# add these directories to sys.path here. If the directory is relative to the",24896],["# List of patterns, relative to source directory, that match files and",24527],["# .htaccess) here, relative to this directory. These files are copied",11812],["# Don't forget to use absolute paths, not relative paths.",10569],["# The name of a javascript file (relative to the configuration directory) that",5913]]},{"word":"release","context":[["# \"<project> v<release> documentation\".",25615],["# |version| and |release|, also used in various other places throughout the",25310],["self.lock.release()",8572],["self._lock.release()",5455],["lock.release()",5384],["def release(self):",4780],["release = '0.1'",3195],["release = version",2615],["self.release()",2437],["if release:",1863]]},{"word":"remove","context":[["os.remove(filename)",7193],["os.remove(path)",6697],["def remove(self):",4193],["if remove:",3612],["os.remove(f)",3245],["os.remove(fname)",2410],["os.remove(file)",1999],["self._router_interface_action('remove',",1929],["def db_deleted_children(self, remove=False):",1851],["os.remove(filepath)",1566]]},{"word":"render","context":[["from django.shortcuts import render",13261],["def render(self, context):",11102],["def render(self):",8883],["def render(self, name, value, attrs=None):",4321],["return render(",3315],["def render(self, request):",2272],["from django.shortcuts import render, redirect",2187],["def render(self, *args, **kwargs):",1967],["from django.shortcuts import render, get_object_or_404",1925],["self.render()",1691]]},{"word":"replace","context":[["might make sense to replace the whole Django WSGI application with a custom one",4328],["resourcePath = resourcePath.replace('{format}', 'json')",2604],["if replace:",1578],["\"\"\".replace(\"\\n\", \"\\r\\n\")",1323],["history = open('HISTORY.rst').read().replace('.. :changelog:', '')",1084],["s1 = s1.replace('<', '&lt;')",1072],["s1 = s1.replace('>', '&gt;')",1058],["s1 = s1.replace('&', '&amp;')",1035],["resourcePath = resourcePath.replace('{' + 'userId' + '}',",1010],["cleanedparams=params.replace('?','')",932]]},{"word":"req","context":[["req.method = 'POST'",10967],["res = req.get_response(self.api)",10660],["req = Request.blank(",10592],["context = req.environ['nova.context']",10169],["resp = req.get_response(self.controller)",7236],["resp = req.get_response(self.object_controller)",7029],["response = urllib2.urlopen(req)",6639],["req.body = jsonutils.dumps(body)",6621],["self.app.update_request(req)",6180],["req.headers[\"content-type\"] = \"application/json\"",6023]]},{"word":"request","context":[["if request.method == 'POST':",42864],["request,",19437],["if request.method == \"POST\":",13059],["context_instance=RequestContext(request))",11791],["if request.method == 'GET':",11749],["def get(self, request, *args, **kwargs):",10792],["self.request = request",10455],["self.request = request",10455],["if request.user.is_authenticated():",10343],["user = request.user",10086]]},{"word":"requests","context":[["import requests",71782],["r = requests.get(url)",3289],["@mock.patch('requests.get')",2626],["'requests',",2291],["response = requests.get(url)",1963],["except requests.exceptions.ConnectionError:",1941],["session = requests.Session()",1764],["s = requests.Session()",1688],["except requests.exceptions.RequestException as e:",1685],["self.session = requests.Session()",1643]]},{"word":"required","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["required: false",52495],["required=False,",32298],["Unless required by applicable law or agreed to in writing, software",20105],["required=True,",19760],["required=False)",14259],["required: true",13467],["#  Unless required by applicable law or agreed to in writing, software",11079],["#   Unless required by applicable law or agreed to in writing, software",10097]]},{"word":"res","context":[["return res",179915],["res = {}",30400],["res = []",30325],["if res:",22455],["if not res['OK']:",12895],["if not res:",11594],["res = req.get_response(self.api)",10660],["assert_equal(res.status_code, 200)",7867],["eq_(res.status_code, 200)",6984],["res = None",5598]]},{"word":"reserved","context":[["# All rights reserved.",57676],["All rights reserved.",8304],["# Copyright (c) 2012 The Chromium Authors. All rights reserved.",7318],["# Copyright 2014 The Chromium Authors. All rights reserved.",7116],["# Copyright 2013 The Chromium Authors. All rights reserved.",5347],["# Copyright (c) Microsoft Corporation. All rights reserved.",4848],["# Copyright 2015 The Chromium Authors. All rights reserved.",3557],["reserved=0,",3499],["## All rights reserved.",3056],["#  All rights reserved.",2844]]},{"word":"resource","context":[["for i in range(len(resource)) :",3645],["return resource",2889],["import resource",2729],["if (resource and len(resource) > 0) :",2572],["if (resource and len(resource) > 0) :",2572],["from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource",2244],["from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response",2230],["if type(resource) is not list :",2195],["for resource in resources:",2044],["resource = wsgi.Resource(controller)",1938]]},{"word":"resources","context":[["return resources",3929],["resources = []",3036],["resources:",2716],["from resources.datatables import Options",2264],["from resources.datatables import WeaponType",2154],["from resources.datatables import Difficulty",2117],["for resource in resources:",2044],["resources.append(res)",1339],["'resources': {",1207],["from resources.lib.libraries import client",1071]]},{"word":"resp","context":[["return resp",25595],["self.assertEqual(resp.status_code, 200)",17900],["resp = req.get_response(self.controller)",7236],["resp = req.get_response(self.object_controller)",7029],["resp.read()",5493],["return resp, body",5410],["self.expected_success(200, resp.status)",4716],["self.assertEqual(resp.status_int, 200)",4478],["resp = req.get_response(self.app)",3762],["self.assertEqual(200, resp.status)",3497]]},{"word":"response","context":[["return response",110657],["self.assertEqual(response.status_code, 200)",83327],["response = self.client.get(url)",23349],["self.assertEqual(response.status_code, 302)",19450],["response = self.client.post(",12406],["eq_(response.status_code, 200)",12361],["self.assertEquals(response.status_code, 200)",11521],["self.assertEqual(response.content_type, 'application/json')",11194],["response = self.client.get(",11094],["response,",10668]]},{"word":"result","context":[["return result",386750],["result = []",80243],["result = {}",38862],["if result:",32833],["if not result:",28724],["result = None",20161],["result = False",13666],["if result is None:",11754],["if not result['OK']:",11353],["result = True",10705]]},{"word":"results","context":[["return results",49222],["results = []",39516],["results = {}",9524],["for result in results:",8733],["# implements a search results scorer. If empty, the default will be used.",5914],["if results:",4845],["# Display results.",3981],["results.append(result)",3670],["if not results:",3545],["for r in results:",3462]]},{"word":"ret","context":[["return ret",148714],["ret = []",28165],["if ret:",12294],["ret = {}",12257],["ret = None",7485],["if not ret:",6298],["ret = False",5553],["if ret != 0:",5409],["ret = 0",4999],["ret = True",4795]]},{"word":"return","context":[["return",2012056],["return False",1214010],["return True",1076346],["return None",882671],["return result",386750],["return 0",246952],["return self",209571],["return []",181135],["return res",179915],["return {",161610]]},{"word":"return_value","context":[["return_value=None)",4956],["instance = self.plugin.return_value",4832],["return return_value",3070],["return_value=True)",2696],["mock_create_client.return_value = mock_client",2475],["return_value=(None, EMCVMAXCommonData.storage_system))",1907],["return_value=False)",1570],["instance.get_networks.return_value = []",1551],["return_value=RESPONSE_200)",1388],["return_value=VOLUME)",1143]]},{"word":"returned","context":[["returned.",6114],["returned: success",5550],["returned: always",2602],["is returned.",2076],["will be returned.",1079],["# Make sure the correct queryset is returned",984],["be returned.",758],["returned: success, path exists and user can read stats",672],["# confirm the search returned one object",554],["array is returned.",548]]},{"word":"returns","context":[[":returns:",9864],[":param bool raw: returns the direct response alongside the",7438],[":returns: None",7122],["''' Returns True if this instance represents config data else returns False '''",5223],["returns:",4782],["returns the request thread.",2901],["pyauto_errors.JSONInterfaceError if the automation call returns an error.",2261],[":returns: :class:`django.http.HttpResponse`",2023],["returns",1497],["@returns(t.void)",1472]]},{"word":"reverse","context":[["from django.core.urlresolvers import reverse",57527],["reverse(",4393],["if reverse:",3830],["reverse=True)",2977],["url = reverse(",2814],["def reverse(self):",1928],["self.assertRedirects(response, reverse('user_login'))",1330],["from django.core.urlresolvers import reverse, NoReverseMatch",1204],["self.client.get(reverse('admin:logout'))",1194],["from rest_framework.reverse import reverse",1182]]},{"word":"right","context":[["# load the right message language",3982],["self.right = right",2131],["self.right = right",2131],["<td nowrap align=\"right\" class=\"   RegularFS BlackFC   \">",2112],["def right(self):",1540],["#         self.right = None",1383],["self.right = None",1233],["# Get the data: the input matrix and the right output.",1226],["# Check that the right middleware methods have been invoked",1172],["# Ensure the field is right afterwards",859]]},{"word":"rights","context":[["# All rights reserved.",57676],["# in the Software without restriction, including without limitation the rights",20572],["# without limitation the rights to use, copy, modify, merge, publish,",14020],["All rights reserved.",8304],["# Copyright (c) 2012 The Chromium Authors. All rights reserved.",7318],["# Copyright 2014 The Chromium Authors. All rights reserved.",7116],["in the Software without restriction, including without limitation the rights",6983],["# Copyright 2013 The Chromium Authors. All rights reserved.",5347],["# Copyright (c) Microsoft Corporation. All rights reserved.",4848],["# Copyright 2015 The Chromium Authors. All rights reserved.",3557]]},{"word":"role","context":[["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["for role in roles:",2691],["def data(self, index, role):",1624],["self.role = role",1321],["self.role = role",1321],["if role == Qt.DisplayRole:",1252],["if role:",958],["return role",903],["def headerData(self, section, orientation, role):",765]]},{"word":"root","context":[["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# directly to the root of the documentation.",11811],["return root",7456],["'root': [",5980],["root.mainloop()",5466],["root = tree.getroot()",4788],["# LICENSE file in the root directory of this source tree.",4608],["# Licensed under the MIT License. See License.txt in the project root for",4088],["root = Tk()",4028],["self.root = root",3555]]},{"word":"root_module","context":[["root_module = module.get_root()",7096],["def register_methods(root_module):",1405],["def register_functions(root_module):",1403],["module = root_module",1402],["register_functions_ns3_FatalImpl(module.get_submodule('FatalImpl'), root_module)",1332],["def register_functions_ns3_FatalImpl(module, root_module):",1332],["root_module.generate(out)",1219],["root_module = module_init()",1214],["register_types(root_module)",1214],["register_methods(root_module)",1214]]},{"word":"router","context":[["r['router']['id'],",7294],["with self.router() as r:",3329],["router = routers.DefaultRouter()",1301],["for router in routers:",1147],["return router",1008],["raise n_exc.BadRequest(resource='router', msg=msg)",997],["router['id'],",940],["body = self._show('routers', r['router']['id'])",925],["db = router.db_for_write(self.model, instance=self.instance)",914],["url(r'^', include(router.urls)),",855]]},{"word":"row","context":[["for row in rows:",24269],["for row in reader:",9626],["if row:",7835],["row += 1",7190],["for row in data:",5946],["row = []",5531],["return row",5502],["row = layout.row()",5214],["row = layout.row()",5214],["if not row:",4579]]},{"word":"rows","context":[["for row in rows:",24269],["rows = []",9842],["return rows",6304],["if rows:",3469],["rows.append(row)",3285],["rows = cur.fetchall()",2514],["if not rows:",2438],["rows = cursor.fetchall()",2361],["for r in rows:",1916],["def rows(self):",1766]]},{"word":"rtype","context":[[":rtype: bool",27142],[":rtype: None",26799],[":rtype: str",26003],[":rtype: int",21650],[":rtype: dict",13130],[":rtype: list",11953],[":rtype: string",8242],["@rtype: string",7623],[":rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`",6712],[":rtype: float",6503]]},{"word":"rule","context":[["for rule in rules:",4146],["master_ninja.rule(",2748],["self._test_prepare_port_filter(rule, ingress, egress)",2683],["return rule",1856],["for rule in self.rules:",1352],["rule = {'ethertype': 'IPv4',",1334],["rule = {'ethertype': 'IPv6',",1334],["req, {'security_group_rule': rule})",1266],["self.rule = rule",1019],["self.rule = rule",1019]]},{"word":"run","context":[["def run(self):",118539],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["def run():",11234],["app.run()",8769],["run()",7347],["reactor.run()",6819],["tf.initialize_all_variables().run()",4488],["def run(self, edit):",4248],["self.run()",4158],["unittest.TextTestRunner(verbosity=2).run(suite)",3925]]},{"word":"running","context":[["self.running = False",11058],["self.running = True",7361],["# If running in a Windows environment this must be set to the same as your",4205],["while self.running:",3735],["running = False",3068],["if self.running:",2569],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["running = True",2429],["while running:",1904],["if not self.running:",1763]]},{"word":"s","context":[["return s",84093],["%s",23928],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["return '%s(%s)' % (self.__class__.__name__, ', '.join(L))",21584],["L = ['%s=%r' % (key, value)",21414],["s.close()",14661],["# If true, do not generate a @detailmenu in the \"Top\" node's menu.",14400],["<td>%s</td>",8770],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520]]},{"word":"same","context":[["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["# If running in a Windows environment this must be set to the same as your",4205],["# On Unix systems, a value of None will cause Django to use the same",2774],["# if running multiple sites in the same mod_wsgi process. To fix this, use",2459],["# for small screen space, using the same theme for HTML and epub output is",1445],["# A shorter title for the navigation bar.  Default is the same as",1164],["# Number of cell columns in the cortical region (same number for",927],["# This file is distributed under the same license as the Django package.",837],["# of patent rights can be found in the PATENTS file in the same directory.",696],["The arguments are the same as for the Popen constructor.  Example:",687]]},{"word":"save","context":[["self.save()",29721],["user.save()",22233],["def save(self):",19698],["def save(self, *args, **kwargs):",18292],["instance.save()",17079],["form.save()",11875],["obj.save()",9298],["self.user.save()",9148],["if save:",6952],["self.project.save()",4635]]},{"word":"schema","context":[["schema = {",4512],["'schema': {",2939],["return schema",2536],["self.schema = schema",1961],["self.schema = schema",1961],["if schema is not None:",1488],["if schema:",1331],["schema, tablename = self.getSchemaTableName(table)",1316],["schema={",1234],["def schema(self):",1149]]},{"word":"scope","context":[["scope=Scope.settings,",4178],["# Pass names back to global scope (s3.*)",3483],["scope=Scope.settings",3398],["@pytest.fixture(scope='function')",2482],["@pytest.fixture(scope='session')",2444],["@pytest.fixture(scope=\"module\")",2235],["@pytest.fixture(scope='module')",1896],["self.scope = scope",1622],["self.scope = scope",1622],["@pytest.fixture(scope=\"function\")",1208]]},{"word":"script","context":[["</script>",15876],["<script type=\"text/javascript\">",5318],["<script>",4634],["<script type=\"text/python\">",3594],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933]]},{"word":"search","context":[["# Language to be used for generating the HTML full-text search index.",5923],["# implements a search results scorer. If empty, the default will be used.",5914],["# A dictionary with options for the search language support, empty by default.",5913],["mobj = re.search(",2685],["if search:",2319],["epub_exclude_files = ['search.html']",1752],["mo = re.search(r'=\\s*\"(.*)\"', line)",1691],["self.search()",1468],["def search(self):",1415],["def search():",1240]]},{"word":"seconds","context":[["timeout: timeout in seconds",1263],["total_seconds = tzoff.seconds + (86400 * tzoff.days)",863],["time.sleep(seconds)",785],["seconds = 0",781],["# set this to 60 seconds and then to 518400 when you can prove it works",652],["return seconds",582],["'seconds': 0,",577],["self.seconds = seconds",553],["self.seconds = seconds",553],["units = 'seconds'",537]]},{"word":"section","context":[["# (source start file, name, description, authors, manual section).",23889],["for section in sections:",2142],["section of our README.",1710],["return section",1324],["</section>",1305],["self.section = section",1290],["self.section = section",1290],["if section is None:",1200],["section = journey.sections.add()",1167],["section = None",1131]]},{"word":"see","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["For more information on this file, see",25647],["# further.  For a list of options available for each theme, see the",24845],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975],["For the full list of settings and their values, see",14104],["# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",11396],["# along with this program. If not, see <http://www.gnu.org/licenses/>.",10912],[":license: BSD, see LICENSE for more details.",10228],["# Licensed under the Apache License, Version 2.0 (see LICENSE).",6872]]},{"word":"select","context":[["import select",10905],["</select>",4935],["select",3820],["</select>\"\"\")",3475],["duplicate = current.db(query).select(table.id,",2261],["def select(self):",1406],["from select import select",1267],["from select import select",1267],["sqlResults = myDB.select(",943],["</select></li>",847]]},{"word":"self","context":[["def __init__(self):",560894],["def setUp(self):",497902],["self.assertEqual(",297961],["def __str__(self):",276248],["def __repr__(self):",251573],["return self",209571],["def tearDown(self):",151302],["def __init__(self, *args, **kwargs):",130790],["def run(self):",118539],["self.mox.ReplayAll()",109971]]},{"word":"send","context":[["# Construct and send request",8113],["# performed by this configuration is to send an email to",6083],["response = self._client.send(request, header_parameters, **operation_config)",4543],["response = self._client.send(",2515],["def send(self, data):",2393],["return self._client.send(",1625],["msg.send()",1580],["def send(self):",1436],["email.send()",1309],["def send(self, msg):",1162]]},{"word":"sequence","context":[["sequence.append(utils.StartRecordingAction())",13281],["sequence.append(utils.AssertPresentationAction(",13276],["sequence.append(KeyComboAction(\"Down\"))",4371],["sequence.append(KeyComboAction(\"Up\"))",2939],["_order = 'sequence'",2271],["sequence.append(KeyComboAction(\"Tab\"))",2127],["# A sequence of (type, uri, title) tuples for the guide element of content.opf.",2086],["raise TypeError, \"iteration over non-sequence\"",1901],["</xsd:sequence>",1618],["<xsd:sequence>",1586]]},{"word":"server","context":[["self.server = server",5998],["self.server = server",5998],["server.serve_forever()",4553],["This module contains the WSGI application used by Django's development server",4332],["# file. This includes Django's development server, if the WSGI_APPLICATION",4242],["# This application object is used by any WSGI server configured to use this",4241],["server = self.servers.first()",3985],["server.start()",3847],["return server",3634],["for server in servers:",3226]]},{"word":"service","context":[["# Initialize appropriate service.",4548],["service = self.session.nav.getCurrentService()",4009],["return service",2818],["for service in services:",2771],["if service:",2451],["self.service = service",2276],["self.service = service",2276],["from nssrc.com.citrix.netscaler.nitro.service.options import options",2239],["service.clear_session(self)",2233],["def _get_nitro_response(self, service, response) :",2229]]},{"word":"session","context":[["db.session.commit()",39672],["session.commit()",21114],["session = get_session()",19749],["with session.begin():",18258],["Screen.__init__(self, session)",12970],["session.close()",12702],["with context.session.begin(subtransactions=True):",10934],["def __init__(self, session):",8757],["self.session = session",8454],["self.session = session",8454]]},{"word":"set","context":[["# There are two options for replacing |today|: either, you set today to some",25812],["# The name for this set of Sphinx documents.  If None, it defaults to",25620],["already_processed = set()",18325],["# This file is execfile()d with the current directory set to its containing dir.",12868],["# This file is execfile()d with the current directory set to its",12708],["seen = set()",7778],["# If you set this to False, Django will make some optimizations so as not",7661],["# vim: set expandtab tabstop=4 shiftwidth=4:",6604],["# If you set this to False, Django will not format dates, numbers and",5943],["# Usually you set \"language\" from the command line for these cases.",5937]]},{"word":"setUp","context":[["def setUp(self):",497902],["super().setUp()",4022],["self.setUp()",2050],["def setUp (self):",1952],["comm.setUp()",1388],["self.config = testing.setUp()",1124],["unittest.TestCase.setUp(self)",1112],["def setUp( self ):",1085],["def setUp(cls):",1084],["def setUp(self, *args, **kwargs):",853]]},{"word":"settings","context":[["from django.conf import settings",146012],["For the full list of settings and their values, see",14104],["# Quick-start development settings - unsuitable for production",13181],["if settings.DEBUG:",9991],["migrations.swappable_dependency(settings.AUTH_USER_MODEL),",8569],["import settings",7773],["settings = current.deployment_settings",5506],["scope=Scope.settings,",4178],["https://docs.djangoproject.com/en/1.8/ref/settings/",4014],["https://docs.djangoproject.com/en/1.8/topics/settings/",4012]]},{"word":"setup","context":[["setup(",74397],["from setuptools import setup",38637],["from setuptools import setup, find_packages",37284],["from distutils.core import setup",29561],["def setup(self):",26022],["def setup():",6860],["self.setup()",4028],["django.setup()",3920],["def setup(app):",3911],["from distutils.core import setup, Extension",3187]]},{"word":"shape","context":[["n_samples, n_features = X.shape",3446],["def shape(self):",2649],["X : array-like, shape (n_samples, n_features)",2043],["X : array-like, shape = [n_samples, n_features]",2003],["n_samples = X.shape[0]",1595],["X : {array-like, sparse matrix}, shape (n_samples, n_features)",1390],["X : {array-like, sparse matrix}, shape = [n_samples, n_features]",1376],["The shape parameter(s) for the distribution (see docstring of the",1233],["self.shape = shape",1144],["self.shape = shape",1144]]},{"word":"should","context":[["# You should have received a copy of the GNU General Public License",202164],["#    You should have received a copy of the GNU Affero General Public License",41411],["You should have received a copy of the GNU General Public License",38555],["# You should have received a copy of the GNU Affero General Public License",31967],["# Additional templates that should be rendered to pages, maps page names to",25900],["# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",24040],["#    You should have received a copy of the GNU General Public License",20976],["# You should have received a copy of the GNU Lesser General Public License",17880],["# You should have received a copy of the GNU Lesser General Public",15926],["# You should have received a copy of the GNU General Public License along",15209]]},{"word":"show","context":[["plt.show()",52859],["# If true, show URL addresses after external links.",44800],["# serve to show the default.",25778],["# If true, show page references after internal links.",23896],["self.show()",11458],["def show(self):",8715],["show()",6039],["#plt.show()",5118],["if show:",4638],["pylab.show()",4277]]},{"word":"shutil","context":[["import shutil",99759],["from shutil import rmtree",4092],["shutil.rmtree(path)",3524],["shutil.rmtree(tmpdir)",3433],["shutil.rmtree(tempdir)",1853],["shutil.rmtree(self.tempdir)",1562],["shutil.rmtree(self.tmpdir)",1421],["from shutil import copyfile",1353],["shutil.rmtree(tmp_dir)",1238],["shutil.rmtree(temp_dir)",1129]]},{"word":"signal","context":[["import signal",29337],[">>> from scipy import signal",1627],["signal.signal(signal.SIGINT, signal_handler)",1627],["signal.signal(signal.SIGINT, signal_handler)",1627],["signal.alarm(0)",1627],["signal.signal(signal.SIGINT, signal_handler)",1627],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362],["signal.signal(signal.SIGINT, signal.SIG_IGN)",1362]]},{"word":"since","context":[["time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)",1818],[":since:  v0.2.00",1586],[":since: v0.2.00",1297],["time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)",998],["time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)",998],["if since:",620],["# distance: number of commits since tag",531],["time_boot_ms              : Timestamp in milliseconds since system boot (uint32_t)",518],["# Delete the current file since this is not done by Django.",487],["usec                      : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)",464]]},{"word":"single","context":[["# Versions should comply with PEP440.  For a discussion on single-sourcing",1177],["if single:",1174],["'single': 'b',",763],["# To work with it from snapshot, the single image_service is needed",753],["# WARNING! Do not edit! http://waf.googlecode.com/git/docs/wafbook/single.html#_obtaining_the_waf_file",490],["corresponds to a single data point.",472],["assert len(ids) == 1, 'This option should only be used for a single id at a time.'",404],["#   beginning with a single underscore character to avoid collisions with",384],["A single-element list containing the shape of the output.",377],["single = True",374]]},{"word":"site","context":[["url(r'^admin/', include(admin.site.urls)),",14085],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["# Hosts/domain names that are valid for this site; required if DEBUG is False",2707],["url(r'^admin/', admin.site.urls),",2618],["site = Site.objects.get_current()",2553],["# mod_wsgi daemon mode with each site in its own daemon process, or use",2460],["'sites.site': {",2062],["import site",2038],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['sites.Site']\"}),",1948],["'site': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['sites.Site']\"}),",1495]]},{"word":"six","context":[["import six",57628],["from django.utils import six",14126],["if six.PY3:",9509],["if six.PY2:",5752],["@six.add_metaclass(abc.ABCMeta)",5644],["from six import iteritems",4717],["from six.moves import range",4252],["out = six.StringIO()",2473],["from six import string_types",2218],["from six.moves import urllib",2122]]},{"word":"size","context":[["# The font size ('10pt', '11pt' or '12pt').",26707],["# The paper size ('letterpaper' or 'a4paper').",20979],["def size(self):",9662],["self.size = size",8488],["self.size = size",8488],["[param('char const *', 'buffer'), param('size_t const', 'size')],",6318],["return size",6272],["size = 0",6163],["# The paper size ('letter' or 'a4').",5740],["if size is None:",4743]]},{"word":"skip","context":[["iprot.skip(ftype)",79782],["skip = False",3451],["skip = True",3394],["d.skip(length)",3234],["return 'skip'",3174],["if skip:",3006],["from nose.plugins.skip import SkipTest",2522],["if not skip:",1453],["skip = 0",1065],["self.skip = True",920]]},{"word":"sleep","context":[["time.sleep(1)",72019],["time.sleep(0.1)",26869],["time.sleep(2)",23157],["from time import sleep",21501],["time.sleep(5)",20009],["time.sleep(0.5)",15152],["time.sleep(3)",12164],["time.sleep(10)",11664],["sleep(1)",10977],["time.sleep(0.01)",7442]]},{"word":"slug","context":[["'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),",2887],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),",1996],["'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),",1400],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})",1385],["name='slug',",1279],["return slug",1253],["if not self.slug:",1164],["slug = models.SlugField()",1150],["'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),",1064],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})",886]]},{"word":"so","context":[["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# furnished to do so, subject to the following conditions:",24476],["# permit persons to whom the Software is furnished to do so, subject to",13842],["# If you set this to False, Django will make some optimizations so as not",7661],["furnished to do so, subject to the following conditions:",7073],["# persons to whom the Software is furnished to do so, subject to the fol-",3151],["so as to provide a uniform API.",2880],["# Software is furnished to do so, subject to the following conditions:",2452],["Software is furnished to do so, subject to the following",2378],["# and to permit persons to whom the Software is furnished to do so,",1307]]},{"word":"socket","context":[["import socket",80004],["except socket.error:",16193],["except socket.timeout:",6295],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",5978],["except socket.error as e:",5583],["except socket.error, e:",5474],["sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",4715]]},{"word":"software","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["# of this software and associated documentation files (the \"Software\"), to deal",20351],["Unless required by applicable law or agreed to in writing, software",20105],["This program is free software: you can redistribute it and/or modify",18733],["# This program is free software; you can redistribute it and/or",15997],["# a copy of this software and associated documentation files (the",13732]]},{"word":"some","context":[["# There are two options for replacing |today|: either, you set today to some",25812],["# If you set this to False, Django will make some optimizations so as not",7661],["# do some validation checking...",1695],["# some non-false value, then it is used:",1144],["# Although 'package_data' is the preferred approach, in some case you may",924],["# Import iris.tests first so that some things can be initialised before",752],["#    ipshell('<some message> -- Entering ipshell.\\nHit Ctrl-D to exit')",521],["flavors.get_default_flavor(), image_href='some-fake-image',",485],["# 0: silent; >=1: some info; >=2: more info;",477],["# at each step 0: silent; >=1: some info; >=2: more info;",469]]},{"word":"sort","context":[["keys.sort()",7146],["names.sort()",2825],["files.sort()",2554],["if sort:",2498],["items.sort()",2219],["l.sort()",2192],["result.sort()",1704],["c.sort(kind=kind)",1645],["def sort(self):",1307],["ids.sort()",1197]]},{"word":"sorted","context":[["return sorted(",1097],["for ref in sorted(tags):",776],["print(\"likely tags: %s\" % \",\".join(sorted(tags)))",676],["sorted(",567],["OverQuota exception will be raised with the sorted list of the",497],["assert sorted(exprs, key=default_sort_key) == exprs",457],["sorted([",397],["for n in sorted(G):",396],["return zip(*sorted(six.iteritems(info)))",371],["for state_name in sorted(_STATES.keys()):",340]]},{"word":"source","context":[["# Redistribution and use in source and binary forms, with or without",44287],["# Use of this source code is governed by a BSD-style license that can be",36414],["# The encoding of source files.",26524],["# directories to ignore when looking for source files.",24534],["# List of patterns, relative to source directory, that match files and",24527],["# (source start file, name, description, authors, manual section).",23889],["# The suffix of source filenames.",22248],["# (source start file, target name, title, author,",21198],["#     * Redistributions of source code must retain the above copyright",12656],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397]]},{"word":"spec","context":[["return spec",3129],["if spec is None:",1056],["self.spec = spec",1040],["self.spec = spec",1040],["Overview (from the spec)",946],["spec: The target dictionary containing the properties of the target.",839],["spec = {",835],["for spec in specs:",817],["OpenAPI spec version:",695],["if spec:",647]]},{"word":"specific","context":[["# See the License for the specific language governing permissions and",149392],["#    License for the specific language governing permissions and limitations",123669],["# License for the specific language governing permissions and limitations",32108],["# Theme options are theme-specific and customize the look and feel of a theme",24888],["See the License for the specific language governing permissions and",19730],["# this software without specific prior written permission.",11283],["#   See the License for the specific language governing permissions and",9536],["#  See the License for the specific language governing permissions and",7927],["# specific language governing permissions and limitations",5653],["#   without specific prior written permission.",4227]]},{"word":"specified","context":[["specified.",1845],["\"\"\"Sets the specified host's ability to accept new instances.\"\"\"",662],["\"\"\"Power off the specified instance.\"\"\"",619],["\"\"\"Power on the specified instance.\"\"\"",605],["than) the specified ID. There are limits to the number of",601],["\"\"\"Suspend the specified instance.\"\"\"",524],["\"\"\"Creates a clone of the specified volume.\"\"\"",511],["raise ValueError(\"no path specified\")",503],["# all of the specified values evaluate to 0).",467],["Properties that need to be unset are specified in args array.",436]]},{"word":"split","context":[["# If true, the index is split into individual pages for each letter.",26818],["col = split.column()",4267],["words = line.split()",3331],["for line in out.split('\\n'):",2518],["fields = line.split()",2470],["split = layout.split()",2245],["split = layout.split()",2245],["line = line.split()",1996],["nodeName_ = child_.nodeName.split(':')[-1]",1923],["parts = line.split()",1902]]},{"word":"sql","context":[["cursor.execute(sql)",5163],["sql = \"\"\"",4821],["cur.execute(sql)",3734],["return sql",2743],["store.sql(\"\"\"",1662],["self.cursor.execute(sql)",1652],["session = sql.get_session()",1283],["sql.commit()",1277],["self._execute_and_commit(sql)",1200],["return sql, params",1014]]},{"word":"sqrt","context":[["from math import sqrt",6408],["theta=sqrt((r*r)/(rb*rb)-1.)",986],[">>> from sympy import sqrt",713],["- If \"sqrt\", then `max_features=sqrt(n_features)`.",474],["- If \"sqrt\", then `max_features=sqrt(n_features)`.",474],["from sympy.functions.elementary.miscellaneous import sqrt",395],["||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}",316],["from math import pi, sqrt",294],["def sqrt(x):",246],["from numpy import sqrt",242]]},{"word":"src","context":[["package_dir={'': 'src'},",2002],["<script type=\"text/javascript\" src=\"/static/Brython3.1.1-20150328-091302/brython.js\"></script>",1976],["<script src=\"/static/gearUtils-04.js\" type=\"text/javascript\"></script>",1933],["<script src=\"/static/Cango2D.js\" type=\"text/javascript\"></script>",1933],["return src",1763],["self.src = src",1505],["self.src = src",1505],["if src:",1488],["packages=find_packages('src'),",1452],["\"sourceDirs\" : [\"src\"],",1300]]},{"word":"stack","context":[["stack = []",3725],["while stack:",3497],["stack.pop()",3339],["self.stack = []",2784],["self.stack.state)",2512],["self.stack.store()",2188],["self.stack.create()",1791],["return stack",1556],["if not stack:",1413],["stack = utils.parse_stack(t)",1374]]},{"word":"start","context":[["def start(self):",36588],["start = time.time()",25714],["# (source start file, name, description, authors, manual section).",23889],["# (source start file, target name, title, author,",21198],["t.start()",20493],["[param('ns3::Buffer::Iterator', 'start')],",19441],["# Quick-start development settings - unsuitable for production",13181],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title,",11864],["start = 0",11275]]},{"word":"startswith","context":[["if sys.platform.startswith('win'):",3065],["if line.startswith('#'):",2457],["if of.startswith(\"h\"):",1960],["if sys.platform.startswith('linux'):",1544],["if sys.platform.startswith(\"win\"):",1535],["if name.startswith('_'):",1337],["if line.startswith(\"#\"):",1322],["if sys.platform.startswith('java'):",1085],["if path.startswith('/'):",1042],["if not name.startswith('_'):",950]]},{"word":"state","context":[["# If your documentation needs a minimal Sphinx version, state it here.",24083],["return state",9781],["def __setstate__(self, state):",8045],["if state:",5545],["state:",5496],["self.state = state",5367],["self.state = state",5367],["def state(self):",4942],["'state': 'draft',",4785],["state: present",3048]]},{"word":"static","context":[["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# relative to this directory. They are copied after the builtin static files,",26167],["# The name of an image file (within the static path) to use as favicon of the",24060],["STATIC_URL = '/static/'",23640],["# List of finder classes that know how to find static files in",6046],["# Absolute path to the directory static files should be collected to.",5576],["# Additional locations of static files",5498],["# URL prefix for static files.",5435],["# Don't put anything in this directory yourself; store your static files",5292],["# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.",5275]]},{"word":"staticmethod","context":[["@staticmethod",479080],["factory = staticmethod(factory)",12344],["@staticmethod # known case of __new__",2472],["get_xml_type = staticmethod(get_xml_type)",661],["#@staticmethod",644],["match = staticmethod(match)",614],["render = staticmethod(_render)",529],["# @staticmethod",512],["#     @staticmethod",327],["#    @staticmethod",284]]},{"word":"stats","context":[["return stats",5544],["from scipy import stats",4074],["stats = {}",2576],["import scipy.stats",2238],[">>> from scipy import stats",2097],["stats = []",1705],["stats = {",1288],["import scipy.stats as stats",1270],["import scipy.stats as stats",1270],["def stats(self):",1245]]},{"word":"status","context":[["status = 1",25766],["return status",11478],["if status:",9440],["self.status = status",9234],["self.status = status",9234],["self.assertEqual(response.status_code, status.HTTP_200_OK)",8247],["\"status\" : \"current\",",7293],["def status(self):",6896],["self.assertEqual(response.status, '200 OK')",6749],["status = 3",5460]]},{"word":"status_code","context":[["self.assertEqual(response.status_code, 200)",83327],["self.assertEqual(response.status_code, 302)",19450],["self.assertEqual(resp.status_code, 200)",17900],["eq_(response.status_code, 200)",12361],["self.assertEquals(response.status_code, 200)",11521],["self.assertEqual(response.status_code, 400)",10316],["self.assertEqual(response.status_code, 404)",9538],["assert response.status_code == 200",9205],["self.assertEqual(response.status_code, status.HTTP_200_OK)",8247],["assert_equal(res.status_code, 200)",7867]]},{"word":"std","context":[["'std::string',",33603],["[param('std::ostream &', 'os')],",22052],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["[param('std::string', 'name'), param('ns3::AttributeValue const &', 'value')])",4771],["cls.add_instance_attribute('name', 'std::string', is_const=False)",3335],["[param('std::string', 'name'), param('ns3::CallbackBase const &', 'cb')])",2802],["[param('std::string', 'name')],",2636],["[param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])",2406],["[param('std::string', 'name'), param('std::string', 'context'), param('ns3::CallbackBase const &', 'cb')])",2406],["cls.add_instance_attribute('help', 'std::string', is_const=False)",2232]]},{"word":"stderr","context":[["sys.stderr.flush()",9893],["stderr=subprocess.PIPE)",7957],["file=sys.stderr)",5464],["sys.stderr.write(",4840],["stderr=subprocess.PIPE,",4476],["stderr=subprocess.STDOUT)",3588],["if stderr:",3267],["stdout, stderr = p.communicate()",3220],["stdout=subprocess.PIPE, stderr=subprocess.PIPE)",2973],["stderr=subprocess.STDOUT,",2630]]},{"word":"stdout","context":[["sys.stdout.flush()",57015],["stdout=subprocess.PIPE,",16190],["traceback.print_exc(file=sys.stdout)",5887],["stdout=subprocess.PIPE)",5142],["sys.stdout.write('\\n')",4749],["result.stdout.fnmatch_lines([",4080],["sys.stdout.write(\"\\n\")",3252],["stdout, stderr = p.communicate()",3220],["stdout=subprocess.PIPE, stderr=subprocess.PIPE)",2973],["return stdout",2861]]},{"word":"step","context":[["step = 1",2721],["def step(self):",2337],["step += 1",1915],["@step",1604],["step = 0",1520],["self.step = step",1216],["self.step = step",1216],["for step in steps:",1176],["if step is None:",1126],["return step",771]]},{"word":"stop","context":[["def stop(self):",38844],["self.stop()",15400],["reactor.stop()",4068],["self.addCleanup(patcher.stop)",2804],["self.timer.stop()",2758],["server.stop()",2707],["def stop():",2007],["self.server.stop()",1782],["stop = True",1534],["stop = False",1533]]},{"word":"storage","context":[["from gluon.storage import Storage",2534],["self.storage = storage",1534],["self.storage = storage",1534],["from django.core.files.storage import default_storage",1325],["from django.core.files.storage import FileSystemStorage",1221],["storage.write_table(",988],["from django.core.files.storage import default_storage as storage",849],["from django.core.files.storage import default_storage as storage",849],["def __init__(self, storage):",824],["storage = StorageFactory().get_storage('dict_storage')",806]]},{"word":"store","context":[["action='store',",9809],["action=\"store\",",6338],["# Don't put anything in this directory yourself; store your static files",5292],["store={",4576],["self.app.memcache.store = {}",2361],["self.stack.store()",2188],["store = {",2095],["store.sql(\"\"\"",1662],["self.store = store",1614],["self.store = store",1614]]},{"word":"str","context":[[":rtype: str",26003],["type=str,",11503],["return str",9701],[":type name: str",6783],[":type: str",6286],["return str(value)",5647],["return str(self)",5555],["value = str(value)",5157],["verbose : bool, str, int, or None",5083],["print str(e)",4837]]},{"word":"stream","context":[["stream.close()",4431],["self.stream = stream",4169],["self.stream = stream",4169],["[param('int64_t', 'stream')],",2619],["self.stream.close()",2409],["return stream",2302],["def __init__(self, stream):",2245],["stream.seek(0)",1851],["self.stream.flush()",1816],["[param('int64_t', 'stream')])",1776]]},{"word":"string","context":[["import string",59137],["'std::string',",33603],["[param('std::string', 'value'), param('ns3::Ptr< ns3::AttributeChecker const >', 'checker')],",17294],["return string",14958],["'type': 'string',",10261],["type: string",8710],[":rtype: string",8242],["@rtype: string",7623],["\"type\": \"string\",",7600],["# You can specify multiple suffix as a list of string:",5614]]},{"word":"strings","context":[["# Add any Sphinx extension module names here, as strings. They can be",14319],["# Add any Sphinx extension module names here, as strings. They can be extensions",13272],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["# Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".",4911],["# CRUD strings",2286],["strings = []",1793],["strings.",968],["return strings",846],["# Documentation strings format",819],["# The *_INPUT_FORMATS strings use the Python strftime format syntax,",719]]},{"word":"strip","context":[["line = line.strip()",26427],["value = value.strip()",4415],["\"\"\".strip()",3224],["name = name.strip()",2677],["if not line.strip():",2282],["s = s.strip()",2195],["data = data.strip()",2126],["text = text.strip()",1890],["l = l.strip()",1804],["if line.strip():",1622]]},{"word":"struct","context":[["import struct",43205],["except struct.error:",2530],["except struct.error as e:",2398],["buff.write(struct.pack('<I%ss'%length, length, _x))",1778],["from struct import unpack",1744],["from struct import pack",1665],["packed[1] = struct.pack(\"!H\", length)",1381],["from struct import pack, unpack",1370],["packed.append(struct.pack(\"!H\", self.type))",1370],["packed[2] = struct.pack(\"!H\", length)",1297]]},{"word":"stubs","context":[["self.stubs.Set(compute_api.API, 'create', create)",3121],["network_info = _fake_network_info(self.stubs, 1)",2698],["_fake_network_info(self.stubs, 1),",2466],["self.stubs.Set(compute_api.API, 'get_all', fake_get_all)",2354],["stubs.stubout_session(self.stubs, stubs.FakeSessionForVMTests)",2298],["stubs.stubout_session(self.stubs, stubs.FakeSessionForVMTests)",2298],["stubs.stubout_session(self.stubs, stubs.FakeSessionForVMTests)",2298],["self.stubs.Set(fake_image._FakeImageService, 'show', self.fake_show)",2286],["self.stubs.Set(utils, 'execute', fake_execute)",1841],["self.stubs.Set(db, 'instance_get_by_uuid',",1788]]},{"word":"style","context":[["# Use of this source code is governed by a BSD-style license that can be",36414],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["</style>",6790],["<style>",3258],["<style type=\"text/css\">",2897],["# Licensed under a 3-clause BSD style license - see LICENSE.rst",1533],["\"<html><head><meta name=\\\"qrichtext\\\" content=\\\"1\\\" /><style type=\\\"text/css\\\">\\n\"",1474],["if style:",1429],["self.style = style",1383]]},{"word":"sub","context":[["return sub",989],["for sub in subs:",892],["sub = col.column()",878],["from re import sub",840],["return re.sub(",793],["data = re.sub(r\"\\n|\\r|\\t|\\s{2}|&nbsp;\",\"\",data)",755],["sub.save()",705],["yield sub",698],["sub = col.column(align=True)",638],["if sub:",563]]},{"word":"subject","context":[["# furnished to do so, subject to the following conditions:",24476],["# permit persons to whom the Software is furnished to do so, subject to",13842],["# This Source Code Form is subject to the terms of the Mozilla Public",12942],["furnished to do so, subject to the following conditions:",7073],["# persons to whom the Software is furnished to do so, subject to the fol-",3151],["# modify, copy, or redistribute it subject to the terms and conditions of",2884],["# source code or documentation are not subject to the GNU General Public",2744],["# Software is furnished to do so, subject to the following conditions:",2452],["Software is furnished to do so, subject to the following",2378],["# subject to the following conditions:",2216]]},{"word":"subnet","context":[["with self.subnet() as subnet:",3168],["with self.subnet() as subnet:",3168],["subnet['subnet']['id'])",2498],["subnet['subnet']['id'])",2498],["data = {'subnet': {'network_id': network['network']['id'],",2189],["subnet = self.subnets.first()",1919],["with self.subnet() as s:",1627],["for subnet in subnets:",1621],["s['subnet']['id'],",1304],["with self.port(subnet=subnet) as port:",1199]]},{"word":"subprocess","context":[["import subprocess",124229],["stdout=subprocess.PIPE,",16190],["from subprocess import Popen, PIPE",8272],["stderr=subprocess.PIPE)",7957],["from subprocess import call",6707],["except subprocess.CalledProcessError:",6603],["stdin=subprocess.PIPE,",5333],["stdout=subprocess.PIPE)",5142],["except subprocess.CalledProcessError as e:",4879],["stderr=subprocess.PIPE,",4476]]},{"word":"success","context":[["success = False",14831],["success = True",13089],["if success:",10720],["if not success:",8954],["self.success = success",6283],["self.success = success",6283],["return success",6209],["- success",5911],["return result.success",5679],["returned: success",5550]]},{"word":"such","context":[["# unit titles (such as .. function::).",27531],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any extra paths that contain custom files (such as robots.txt or",11812],["# WARNING: This program as such is intended to be used by professional",1752],["# Add any paths that contain custom static files (such as style sheets)",1149],["non-source form of such a combination shall include the source code for",796],["# git-archive tarball (such as those provided by githubs download-from-tag",695],["# 2. Altered source versions must be plainly marked as such, and must not be",577],["if err.find(\"No such process\") > 0:",474],["# TP is necessary for making temporal predictions, such as predicting",470]]},{"word":"sum","context":[["sum = 0",5185],["aggregate='sum',",4501],["length = sum([len(x) for x in packed])",2764],["return sum",2068],["'n': sum(formula.values()),",1168],["sum = 0.0",1064],["def sum(self):",560],["sum=0",476],["print sum",460],["sum(",457]]},{"word":"super","context":[["super().__init__()",15059],["super().__init__(*args, **kwargs)",4944],["self.client.login(username='super', password='secret')",4771],["super().setUp()",4022],["super().__init__(parent)",3745],["# super, missing, help",2787],["super().__init__(**kwargs)",1622],["last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',",1452],["first_name='Super', last_name='User', email='super@example.com',",1447],["super().__init__(parent, invokingState)",1365]]},{"word":"support","context":[["# A dictionary with options for the search language support, empty by default.",5913],["from test import support",3921],["# with support of Ghent University (http://ugent.be/hpc),",3079],["if support.verbose:",2206],["\"\"\"This class does not support CRUD Operations please use parent.",1612],["# that you indicate whether you support Python 2, Python 3 or both.",1519],["# Specify the Python versions you support here. In particular, ensure",1514],["support.gc_collect()",1512],["from selenium.webdriver.support.ui import WebDriverWait",1503],["# garantees and support are strongly adviced to contract a Free Software",1486]]},{"word":"sure","context":[["# URL that handles the media served from MEDIA_ROOT. Make sure to use a",7203],["# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a",1742],["# Make sure the correct queryset is returned",984],["# Make sure to use a trailing slash.",984],["# Make sure djangosecure.middleware.SecurityMiddleware is listed first",837],["# Make sure the correct choice is selected",800],["# Make sure the async call finishes",628],["# Make sure start and stop can be called without throwing exceptions",609],["# make sure user is authed",568],["# make sure the view removes test cookie",472]]},{"word":"sympy","context":[[">>> from sympy.abc import x",9964],[">>> from sympy.abc import x, y",6461],[">>> from sympy import Poly",4034],[">>> from sympy.polys.domains import ZZ",2154],[">>> from sympy import symbols",1871],[">>> from sympy.abc import x, y, z",1569],["import sympy",1431],[">>> from sympy import Symbol",1386],[">>> from sympy import Matrix",1273],["from sympy.utilities.pytest import raises",1117]]},{"word":"sys","context":[["import sys",791260],["sys.exit(1)",210632],["sys.exit(0)",72080],["sys.exit()",66854],["sys.stdout.flush()",57015],["sys.exit(2)",29520],["import sys, os",25944],["# add these directories to sys.path here. If the directory is relative to the",24896],["sys.exit(-1)",21435],["import os, sys",18842]]},{"word":"system","context":[["# If true, keep warnings as \"system message\" paragraphs in the built documents.",13596],["os.system(cmd)",7448],["# system time zone.",4182],["# In a Windows environment this must be set to your system time zone.",3640],["os.system(command)",3459],["if platform.system() == 'Windows':",3175],["# timezone as the operating system.",2775],["os.system('clear')",2293],["time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)",1818],["if platform.system() == \"Windows\":",1636]]},{"word":"t","context":[["return t",24916],["t.start()",20493],["# SECURITY WARNING: don't run with debug turned on in production!",13613],["# Don't forget to use absolute paths, not relative paths.",10569],["t.join()",7356],["# Make this unique, and don't share it with anybody.",7163],["t = time.time()",7061],["# Don't put anything in this directory yourself; store your static files",5292],["if t:",4593],["for t in threads:",4543]]},{"word":"table","context":[["</table>",22545],["<table class=\"bibcirctable\">",5950],["return table",5751],["<table>",5145],["for table in tables:",3646],["# The depth of the table of contents in toc.ncx.",3484],["self.table = table",3434],["self.table = table",3434],["table = item.table",2670],["table = item.table",2670]]},{"word":"tag","context":[["# contain a <link> tag referring to it.  The value of this option must be the",25748],["nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]",10435],["for tag in tags:",7083],["<datafield tag=\"999\" ind1=\"C\" ind2=\"5\">",5654],["@register.tag",5385],["[param('ns3::Tag &', 'tag')],",4745],["if tag:",4078],["return tag",3778],["<datafield tag=\"100\" ind1=\" \" ind2=\" \">",3230],["self.tag = tag",3071]]},{"word":"tags","context":[["# The full version, including alpha/beta/rc tags.",26558],["for tag in tags:",7083],["tags = []",5187],["if tags:",3586],["return tags",3365],["tags:",2041],["if not tags:",1850],["self.tags = tags",1642],["self.tags = tags",1642],["tags = {}",1484]]},{"word":"target","context":[["# (source start file, target name, title, author,",21198],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title,",11864],["return target",6602],["self.target = target",5345],["self.target = target",5345],["for target in targets:",4272],["if not target:",3796],["if target is None:",3396],["'target': 'new',",3269]]},{"word":"task","context":[["@task",33708],["return task",4279],["for task in tasks:",4219],["shared=False) as task:",3224],["with task_manager.acquire(self.context, self.node.uuid) as task:",1970],["@task()",1928],["if task:",1874],["task.save()",1707],["self.task = task",1468],["self.task = task",1468]]},{"word":"td","context":[["</td>",35952],["<td>",11233],["<td>%s</td>",8770],["<td>%s</td>",8770],["<td class=\"bibcirccontent\">%s</td>",2419],["<td class=\"bibcirccontent\">%s</td>",2419],["<td nowrap align=\"right\" class=\"   RegularFS BlackFC   \">",2112],["<td></td>",1347],["<td></td>",1347],["<td class=\"bibcirctableheader\">%s</td>",1292]]},{"word":"template","context":[["# Custom sidebar templates, maps document names to template names.",27115],["# template names.",25883],["from django import template",15462],["from django.template import RequestContext",13788],["register = template.Library()",13778],["'BACKEND': 'django.template.backends.django.DjangoTemplates',",10823],["'django.template.loaders.filesystem.Loader',",10658],["'django.template.loaders.app_directories.Loader',",10570],["'django.template.context_processors.debug',",9474],["'django.template.context_processors.request',",9255]]},{"word":"templates","context":[["# Add any paths that contain templates here, relative to this directory.",27409],["# Custom sidebar templates, maps document names to template names.",27115],["# Additional templates that should be rendered to pages, maps page names to",25900],["# List of callables that know how to import templates from various sources.",7775],["# Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".",5067],["mobileTemplate.setTemplates(templates)",2117],["templates = Vector()",2117],["# Additional templates that should be rendered to pages, maps page names",1135],["for template in templates:",1101],["os.path.join(BASE_DIR, 'templates'),",1022]]},{"word":"terms","context":[["# it under the terms of the GNU General Public License as published by",170645],["it under the terms of the GNU General Public License as published by",40365],["#    it under the terms of the GNU Affero General Public License as",33945],["#    it under the terms of the GNU General Public License as published by",20820],["# it under the terms of the GNU Affero General Public License as published by",18203],["# modify it under the terms of the GNU General Public License",15977],["# This Source Code Form is subject to the terms of the Mozilla Public",12942],["# modify it under the terms of the GNU Lesser General Public",12480],["# modify it under the terms of the GNU General Public License as",12132],["# it under the terms of the GNU Affero General Public License as",11621]]},{"word":"test","context":[["from django.test import TestCase",35866],["def test():",17648],["def test(self):",16888],["from nova import test",10040],["test()",9570],["from django.test.utils import override_settings",8785],["@test.attr(type='smoke')",6523],["assert_equal(test, control)",4837],["from tempest import test",4714],["for test in tests:",4689]]},{"word":"testing","context":[["request = testing.DummyRequest()",4059],["np.testing.assert_almost_equal(",2408],["@testing.provide_metadata",2406],["@testing.requires_testing_data",2343],["__status__  = \"testing\"",2319],["@testing.resolve_artifact_names",2245],["self.assert_sql_count(testing.db, go, 1)",1958],["from pyramid import testing",1575],["from numpy.testing import assert_array_equal",1488],["testing.tearDown()",1479]]},{"word":"tests","context":[["for test in tests:",4689],["tests = [",4582],["test_suite='tests',",3503],["tests = []",3293],["from neutron.tests import base",3164],["return tests",2851],["from xmodule.modulestore.tests.django_utils import ModuleStoreTestCase",2608],["from nova.tests.api.openstack import fakes",1963],["from xmodule.modulestore.tests.factories import CourseFactory",1927],["from student.tests.factories import UserFactory",1665]]},{"word":"text","context":[["return text",35848],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["self.text = text",10807],["self.text = text",10807],["if text:",10330],["def _translate(context, text, disambig):",7513],["# Language to be used for generating the HTML full-text search index.",5923],["text = \"\"",5756]]},{"word":"tf","context":[["import tensorflow as tf",8257],["tf.initialize_all_variables().run()",4488],["with tf.Graph().as_default():",3685],["tf.test.main()",3217],["with tf.Session() as sess:",1799],["sess.run(tf.initialize_all_variables())",1534],["tf.close()",1396],["sess.run(tf.initialize_local_variables())",1281],["tf.global_variables_initializer().run()",1076],["sess = tf.Session()",1056]]},{"word":"than","context":[["# Encode with UTF-8 rather than TransanaGlobal.encoding because this is a prompt, not DB Data.",880],["#    the code used other than OpenSSL. If you modify file(s) with this",804],["# Query may return more than expected, but not less",610],["Returns results with an ID greater than (that is, more recent",601],["than) the specified ID. There are limits to the number of",601],["# README file and 2) it's easier to type in the README file than to put a raw",585],["# the code used other than OpenSSL. If you modify file(s) with this",491],["all leaves are pure or until all leaves contain less than",476],["control -- which is a much better idea than hard coding specific",450],["raise FeeError(\"Rejecting no-fee transaction, larger than 1000 bytes\")",443]]},{"word":"that","context":[["# This program is distributed in the hope that it will be useful,",137492],["#    This program is distributed in the hope that it will be useful,",58120],["# Use of this source code is governed by a BSD-style license that can be",36414],["This program is distributed in the hope that it will be useful,",27838],["# Add any paths that contain templates here, relative to this directory.",27409],["# Add any paths that contain custom static files (such as style sheets) here,",26179],["# Add any paths that contain custom themes here, relative to this directory.",26062],["# Additional templates that should be rendered to pages, maps page names to",25900],["# All configuration values have a default; values that are commented out",25768],["# Note that not all possible configuration values are present in this",25557]]},{"word":"the","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",209425],["# You should have received a copy of the GNU General Public License",202164],["# it under the terms of the GNU General Public License as published by",170645],["# it under the terms of the GNU General Public License as published by",170645],["# limitations under the License.",150062],["# See the License for the specific language governing permissions and",149392],["# See the License for the specific language governing permissions and",149392],["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155]]},{"word":"them","context":[["them.",1609],["# installed, specify them here.  If using Python 2.6 or less, then these",964],["# them.",795],["# decision by deleting the provisions above and replace them with the notice",642],["Most of them are same to the on-wire counterparts but in host byte order.",534],["# Virtual event handlers, overide them in your derived class",475],["# Filter them out",471],["# methods. The assistant buffers its checks, so that running them again",463],["# or saved.  Do not modify them directly here.",453],["\"actions on them. No items have been changed.\")",407]]},{"word":"then","context":[["# non-false value, then it is used:",25813],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# then",1903],["# some non-false value, then it is used:",1144],["# For \"manual\" documents, if this is true, then toplevel headings",1126],["# Locate the client library. If module was installed via \"setup.py\" script, then",1115],["then",1073],["# installed, specify them here.  If using Python 2.6 or less, then these",964],["#    statement from all source files in the program, then also delete it here.",796],["# set this to 60 seconds and then to 518400 when you can prove it works",652]]},{"word":"there","context":[["# trailing slash if there is a path component (optional in other cases).",1882],["# If there are data files included in your packages that need to be",1008],["# Either we're using git < 1.8.3, or there really are no tags. We use",776],["# These are the compilation flags that will be used in case there's no",685],["# __file__, we can work backwards from there to the root. Some",648],["# there.",581],["# no suitable tags, so version is \"0+unknown\", but full hex is still there",531],["# there are more, the weaker ones are suppressed)",471],["# It's ok if you do not complete all the functions, and there",470],["@throws SampleException If there is a problem with sample creation",434]]},{"word":"these","context":[["# add these directories to sys.path here. If the directory is relative to the",24896],["# Usually you set \"language\" from the command line for these cases.",5937],["# directory, add these directories to sys.path here. If the directory is",1146],["# installed, specify them here.  If using Python 2.6 or less, then these",964],["# the code embedded in _version.py can just fetch the value of these",829],["# if you do not set these you will be prompted for a password for every command",735],["# dependencies). You can install these using the following syntax,",602],["# You can replace these methods by re-implementing the following class",522],["# Calls to the methods in these classes are generated by generateDS.py.",522],["# Type of model that the rest of these parameters apply to.",471]]},{"word":"they","context":[["# If true, `todo` and `todoList` produce output, else they produce nothing.",5776],["# that aren't pickleable (module imports are okay, they're removed automatically).",775],["# setup.py/versioneer.py will grep for the variable names, so they must",451],["pass # Keep asking for passphrase until they get it right",443],["# then they will be staged into the new directory.  Otherwise, default config",347],["# objects in a dialog box so that users can navigate more quickly than they",304],["methods in 2.x after that point should be done such that they can",294],["# Wait on greenthreads to assert they didn't raise exceptions",290],["# they get used",284],["# if we had a value already and this value is different then they're not all the same",267]]},{"word":"this","context":[["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["# along with this program; if not, write to the Free Software",47621],["# Use of this source code is governed by a BSD-style license that can be",36414],["# not use this file except in compliance with the License. You may obtain",30799],["# Add any paths that contain templates here, relative to this directory.",27409],["# relative to this directory. They are copied after the builtin static files,",26167],["# Add any paths that contain custom themes here, relative to this directory.",26062]]},{"word":"thread","context":[["thread.start()",10303],["import thread",6649],["thread.join()",4146],["for thread in threads:",3678],["self.thread.start()",3272],["returns the request thread.",2901],["thread.daemon = True",1857],["_inherit = ['mail.thread']",1810],["self.thread = None",1457],["self.thread.join()",1313]]},{"word":"threading","context":[["import threading",73672],["threading.Thread.__init__(self)",15322],["from threading import Thread",12960],["self.lock = threading.Lock()",3596],["from threading import Lock",3331],["self._lock = threading.Lock()",2421],["lock = threading.Lock()",1621],["from threading import Timer",1619],["self.lock = threading.RLock()",1313],["from threading import RLock",1270]]},{"word":"time","context":[["import time",349792],["time.sleep(1)",72019],["time.sleep(0.1)",26869],["start = time.time()",25714],["start = time.time()",25714],["time.sleep(2)",23157],["from time import sleep",21501],["time.sleep(5)",20009],["start_time = time.time()",19537],["start_time = time.time()",19537]]},{"word":"timeout","context":[["self.timeout = timeout",9718],["self.timeout = timeout",9718],["except socket.timeout:",6295],["if timeout is None:",4396],["if timeout is not None:",3991],["if timeout:",3431],["timeout=timeout,",2711],["timeout=timeout,",2711],["timeout=timeout)",2573],["timeout=timeout)",2573]]},{"word":"timestamp","context":[["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["self.timestamp = timestamp",2785],["self.timestamp = timestamp",2785],["if timestamp:",2176],["if timestamp is None:",2130],["timestamp = normalize_timestamp(time())",1876],["timestamp = time.time()",1555],["headers={'X-Timestamp': timestamp,",1549],["return timestamp",1437],["'timestamp': timestamp,",1409]]},{"word":"title","context":[["# A shorter title for the navigation bar.  Default is the same as html_title.",25634],["# the title page.",25469],["# (source start file, target name, title, author,",21198],["# (source start file, target name, title, author, documentclass [howto/manual]).",12397],["# (source start file, target name, title,",11864],["return self.title",10653],["self.title = title",10508],["self.title = title",10508],["'title': title,",7765],["'title': title,",7765]]},{"word":"tmp","context":[["return tmp",5476],["tmp = []",4523],["tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)",3223],["if tmp:",2396],["tmp = {}",1716],["tmp.close()",1540],["'/tmp/fatturapa_v1.1.xsd',",1032],["tmp = None",1015],["if tmp is not None:",892],["table.append(tmp)",820]]},{"word":"to","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["# Documents to append as an appendix to all manuals.",47775],["# Documents to append as an appendix to all manuals.",47775],["# along with this program; if not, write to the Free Software",47621],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# Add any paths that contain templates here, relative to this directory.",27409],["# Custom sidebar templates, maps document names to template names.",27115]]},{"word":"token","context":[["return token",10441],["token=self.token)",6087],["token=self.token)",6087],["if token:",4547],["self.token = token",4037],["self.token = token",4037],["for token in tokens:",3793],["token = self.token()",3588],["token = self.token()",3588],["if not token:",2831]]},{"word":"tools","context":[["from openerp.tools.translate import _",13558],["from nose.tools import eq_",5376],["from nose.tools import *",5056],["from openerp import tools",3877],["@cherrypy.tools.json_out()",2633],["# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT",2575],["from nose.tools import assert_raises",2261],["from nose.tools import eq_, ok_",2218],["from nose.tools import raises",2059],["from nose.tools import assert_equal",1938]]},{"word":"top","context":[["# The name of an image file (relative to this directory) to place at the top of",25468],["# The name of an image file (relative to this directory) to place at the top",25393],["return top",2342],["# This file is part of Tryton.  The COPYRIGHT file at the top level of",1574],["def top(self):",1330],["# top of the sidebar.",1137],["# the top of the title page.",1134],["self.top = top",824],["self.top = top",824],["if top:",821]]},{"word":"total","context":[["total = 0",15091],["return total",6074],["total += 1",3286],["total = 0.0",3063],["def total(self):",1400],["if total:",1214],["if total == 0:",1170],["progress.setPercentage(int(current * total))",1144],["self.total = total",948],["self.total = total",948]]},{"word":"tr","context":[["</tr>",58563],["<tr>",51977],["#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",3085],["<tr align=\"center\">",2235],["self.tr(",1505],["#   'nl', 'no', 'pt', 'ro', 'r', 'sv', 'tr'",1480],["</td></tr>",911],["'description': tr(",906],["return tr",856],["from safe.utilities.i18n import tr",777]]},{"word":"traceback","context":[["import traceback",80424],["traceback.print_exc()",36303],["def __exit__(self, type, value, traceback):",6172],["traceback.print_exc(file=sys.stdout)",5887],["def __exit__(self, exc_type, exc_value, traceback):",5309],["print traceback.format_exc()",3092],["logger.error(traceback.format_exc())",2044],["print(traceback.format_exc())",1828],["tb = traceback.format_exc()",1729],["traceback.format_exc())",1500]]},{"word":"tree","context":[["# Grouping the document tree into LaTeX files. List of tuples",27516],["# Grouping the document tree into Texinfo files. List of tuples",21017],["return tree",6922],["root = tree.getroot()",4788],["# LICENSE file in the root directory of this source tree.",4608],["tree = etree.fromstring(xml)",1994],["self.tree = None",1642],["retval.tree = root_0",1624],["tree = conf.format_dom()",1579],["Note: this parameter is tree-specific.",1548]]},{"word":"true","context":[["# If true, show URL addresses after external links.",44800],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# If true, the index is split into individual pages for each letter.",26818],["# If true, links to the reST sources are added to the pages.",26301],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# For \"manual\" documents, if this is true, then toplevel headings are parts,",25459],["# If true, show page references after internal links.",23896]]},{"word":"try","context":[["try:",5448017],["try :",69372],["#try:",11101],["try: self.this.append(this)",9720],["# try:",7001],["#     try:",3273],[">>> try:",3086],["#    try:",2865],["#        try:",2780],["#         try:",2375]]},{"word":"tuple","context":[[":rtype: tuple",4628],["return tuple([sparse.get(i, default) for i in xrange(0, 1+maxtag)])",3631],["# A tuple containing the cover image and cover page html template filenames.",3089],["if isinstance(value, (list, tuple)):",1913],["return tuple(result)",1667],["@rtype: tuple",1662],["if isinstance(value, tuple):",1566],["return tuple(nodelist)",1471],["tuple",1090],["elif isinstance(value, (list, tuple)):",1019]]},{"word":"two","context":[["# There are two options for replacing |today|: either, you set today to some",25812],["# Uncomment the next two lines to enable the admin:",4215],["# There are two options for replacing |today|: either, you set today to",1144],["# the following two lines are not needed.",1115],["# DisplayCommandBase.take_action() returns two tuples",988],["status='option two',",561],["#two Decimals",468],["['<Item: one>', '<Item: two>']",448],["their first two arguments.",448],["'password_mismatch': _(\"The two password fields didn't match.\"),",433]]},{"word":"txt","context":[["# Add any extra paths that contain custom files (such as robots.txt or",11812],["return txt",5763],["# License: GNU General Public License v3. See license.txt",5409],["# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.",4108],["# Licensed under the MIT License. See License.txt in the project root for",4088],["# MIT License. See license.txt",3015],["# The full license is in the file COPYING.txt, distributed with this software.",2891],["#see license.txt for license details",1971],["# For license information, please see license.txt",1619],["# See LICENSE.txt for complete terms.",1532]]},{"word":"type","context":[["type=None),",29582],["self.type = type",13072],["self.type = type",13072],["type=int,",11942],["type=str,",11503],["'type': 'string',",10261],["type: string",8710],["'type': 'object',",8450],["__metaclass__ = type",8357],["\"type\": \"string\",",7600]]},{"word":"types","context":[["import types",27614],["from types import *",2305],["types = []",2263],["for type in self.types:",1864],["for type in types:",1711],["return types",1555],["types = {",1424],["for t in types:",1414],["types.",1213],["sqlalchemy.types.VARCHAR)",1196]]},{"word":"u","context":[["u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),",173880],["(u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),",12114],["'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),",11585],["u(\"\"\"\\",10672],["u'contenttypes.contenttype': {",10671],["u'auth.group': {",9992],["u'auth.permission': {",9985],["u'auth.user': {",7648],["return u''",6656],["'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['auth.User']\"})",5805]]},{"word":"uid","context":[["def write(self, cr, uid, ids, vals, context=None):",5277],["def unlink(self, cr, uid, ids, context=None):",5248],["def create(self, cr, uid, vals, context=None):",4588],["uid = getUid(req)",4186],["for line in self.browse(cr, uid, ids, context=context):",4037],["def name_get(self, cr, uid, ids, context=None):",3918],["for move in self.browse(cr, uid, ids, context=context):",3875],["uid=uid,",3725],["uid=uid,",3725],["def copy(self, cr, uid, id, default=None, context=None):",3188]]},{"word":"uint32_t","context":[["'uint32_t',",132426],["[param('uint32_t', 'i')],",13131],["[param('uint32_t', 'interface')],",5639],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["[param('uint32_t', 'data')])",3925],["[param('uint32_t', 'end')])",3800],["[param('uint32_t', 'size')])",2997],["[param('uint32_t', 'start')])",2851],["[param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')],",2846],["[param('uint32_t', 'index')],",2406]]},{"word":"uint8_t","context":[["'uint8_t',",31198],["target_system             : System ID (uint8_t)",4232],["[param('uint8_t *', 'buf')],",4184],["[param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])",3998],["target_component          : Component ID (uint8_t)",3940],["[param('uint8_t *', 'buffer'), param('uint32_t', 'maxSize')],",2846],["[param('uint8_t *', 'buffer')],",2229],["[param('uint8_t const *', 'buf')],",2092],["[param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])",2090],["[param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])",2090]]},{"word":"under","context":[["# it under the terms of the GNU General Public License as published by",170645],["# limitations under the License.",150062],["# distributed under the License is distributed on an \"AS IS\" BASIS,",146833],["# Licensed under the Apache License, Version 2.0 (the \"License\");",144155],["#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",123706],["#    under the License.",123634],["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may",123249],["it under the terms of the GNU General Public License as published by",40365],["# under the License.",37911],["# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",34113]]},{"word":"unicode","context":[["# http://www.i18nguy.com/unicode/language-identifiers.html",7468],["has_default_value=False, default_value=unicode(\"\", \"utf-8\"),",7269],["unicode = str",3996],["if isinstance(value, unicode):",3003],["unicode",2390],["if isinstance(s, unicode):",2323],[":rtype: unicode",2236],["return unicode(value)",1912],["if python3 or type(_x) == unicode:",1652],["\"course_id\": unicode(self.course.id),",1433]]},{"word":"unicode_literals","context":[["from __future__ import unicode_literals",196429],["from __future__ import absolute_import, unicode_literals",13263],["from __future__ import absolute_import, division, print_function, unicode_literals",5790],["unicode_literals, with_statement)",5730],["unicode_literals)",5016],["from __future__ import print_function, unicode_literals",4000],["from __future__ import absolute_import, print_function, unicode_literals",3461],["from __future__ import unicode_literals, division, absolute_import",3278],["from __future__ import (unicode_literals, division, absolute_import,",2759],["print_function, unicode_literals)",2386]]},{"word":"unique","context":[["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),",24733],["'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})",22044],["# Make this unique, and don't share it with anybody.",7163],["# A unique identification for the text.",3486],["# The unique identifier of the text. This can be a ISBN number",3412],["unique=True,",2903],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),",2861],["'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),",2384],["'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),",1996],["unique=True)",1656]]},{"word":"unit","context":[["# unit titles (such as .. function::).",27531],["from nova.tests.unit import fake_instance",1486],["# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.",1469],["[param('ns3::Time::Unit', 'unit')],",1431],["from nova.tests.unit.api.openstack import fakes",1289],["from tests.unit import test",1250],["unit = SM.GetDefaultUnit()",1240],["UI = SM.GetUnitInterface(unit.unitName)",1238],["self.unit = unit",1202],["self.unit = unit",1202]]},{"word":"unittest","context":[["import unittest",234895],["unittest.main()",106260],["from unittest import TestCase",18481],["suite = unittest.TestSuite()",9277],["import unittest2 as unittest",8509],["from twisted.trial import unittest",5547],["from unittest import mock",4197],["loader = unittest.TestLoader()",4093],["class Test(unittest.TestCase):",4038],["unittest.TextTestRunner(verbosity=2).run(suite)",3925]]},{"word":"up","context":[["def up(self):",2304],["# clean up",2260],["# Clean up",1885],["x_in = inDataCacheDictionary['X'] # only need to perform this dictionary look-up once",1043],["# Set up logging",842],["'state': 'up',",830],["\"up\": self.up,",707],["\"up\": self.up,",707],["Whether to use a precomputed Gram matrix to speed up",695],["# Clean up.",694]]},{"word":"update","context":[["def update(self):",24271],["self.update()",22346],["defaults.update(kwargs)",8704],["header_parameters.update(custom_headers)",8073],["context.update({",7313],["pygame.display.update()",5775],["if update:",4363],["kwargs.update({",2876],["whereMap.update(global_props)",2796],["data.update({",2662]]},{"word":"updated","context":[["# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",24544],["'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),",2953],["'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})",2714],["updated = True",2389],["updated = False",1797],["if updated:",1661],["# If not None, a 'Last updated on:' timestamp is inserted at every page",1350],["return updated",1328],["'updated': ('django.db.models.fields.DateField', [], {'auto_now': 'True', 'blank': 'True'}),",1323],["# If not '', a 'Last updated on:' timestamp is inserted at every page",1148]]},{"word":"url","context":[["return url",25146],["response = self.client.get(url)",23349],["url(",17896],["from django.conf.urls import patterns, include, url",15417],["self.url = url",15029],["self.url = url",15029],["url(r'^admin/', include(admin.site.urls)),",14085],["from django.conf.urls import url",13016],["from django.conf.urls import patterns, url",12368],["url,",11063]]},{"word":"urllib","context":[["import urllib",58524],["from urllib import urlencode",7147],["import urllib.request",5485],["import urllib.parse",4151],["from urllib.request import urlopen",3974],["from urllib.parse import urlparse",3116],["from urllib import quote",2731],["from urllib.parse import urlencode",2301],["from six.moves import urllib",2122],["from urllib import urlopen",1762]]},{"word":"urls","context":[["from django.conf.urls import patterns, include, url",15417],["url(r'^admin/', include(admin.site.urls)),",14085],["from django.conf.urls import url",13016],["from django.conf.urls import patterns, url",12368],["from django.conf.urls import include, url",8033],["from django.conf.urls.defaults import *",7132],["for url in urls:",5750],["from django.conf.urls.static import static",4736],["# url(r'^blog/', include('blog.urls')),",3940],["urls = []",3228]]},{"word":"usage","context":[["usage()",21881],["def usage():",10547],["Example usage:",5140],["usage:",3002],["Example usage::",2648],["parser = OptionParser(usage=usage)",2423],["parser = OptionParser(usage=usage)",2423],["print usage",1881],["usage = '''\\",1413],["help = usage + '''\\",1370]]},{"word":"use","context":[["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660],["# Redistribution and use in source and binary forms, with or without",44287],["# not use this file except in compliance with the License. You may obtain",30799],["# The name of the Pygments (syntax highlighting) style to use.",27948],["# documentation root, use os.path.abspath to make it absolute, like shown here.",24865],["# The name of an image file (within the static path) to use as favicon of the",24060],["# The theme to use for HTML and HTML Help pages.  See the documentation for",24032],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20368],["you may not use this file except in compliance with the License.",18491]]},{"word":"used","context":[["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# Else, today_fmt is used as the format for a strftime call.",26971],["# non-false value, then it is used:",25813],["# |version| and |release|, also used in various other places throughout the",25310],["# SECURITY WARNING: keep the secret key used in production secret!",13453],["# The reST default role (used for this markup: `text`) to use for all",13427],["# The reST default role (used for this markup: `text`) to use for all documents.",12979],["# revision identifiers, used by Alembic.",11527],["# contributors may be used to endorse or promote products derived from",11272],["# This is also used if you do content translation via gettext catalogs.",5941]]},{"word":"useful","context":[["# This program is distributed in the hope that it will be useful,",137492],["#    This program is distributed in the hope that it will be useful,",58120],["This program is distributed in the hope that it will be useful,",27838],["# This library is distributed in the hope that it will be useful,",14368],["# Ansible is distributed in the hope that it will be useful,",12033],["# This program is distributed in the hope that it will be useful, but WITHOUT",11709],["#  This program is distributed in the hope that it will be useful,",11090],["# This program is distributed in the hope that it will be useful, but",9856],["## Invenio is distributed in the hope that it will be useful, but",7539],["# Invenio is distributed in the hope that it will be useful, but",5450]]},{"word":"user","context":[["user.save()",22233],["return user",18319],["if user:",15814],["'auth.user': {",14377],["if not user:",13411],["self.user = user",10766],["self.user = user",10766],["if request.user.is_authenticated():",10343],["user=user,",10281],["user=user,",10281]]},{"word":"user_id","context":[["if user_id:",4345],["user_id,",2374],["self.user_id = 'fake'",2212],["user_id=user_id)",2080],["user_id=user_id)",2080],["self.user_id = user_id",1949],["self.user_id = user_id",1949],["user_id=user_id,",1926],["user_id=user_id,",1926],["user_id=self.user['id'],",1782]]},{"word":"username","context":[["'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})",22044],["self.username = username",9117],["self.username = username",9117],["self.client.login(username='super', password='secret')",4771],["username=username,",3662],["username=username,",3662],["if username:",3582],["if not username:",3409],["'username': username,",3373],["'username': username,",3373]]},{"word":"users","context":[["for user in users:",6860],["from google.appengine.api import users",4020],["users = []",3781],["user = users.get_current_user()",2897],["return users",2613],["fixtures = ['admin-views-users.xml']",2364],["__tablename__ = 'users'",2305],["users = [",2072],["mapper(User, users)",2020],["mapper(User, users, properties={",1872]]},{"word":"using","context":[["# using the given strftime format.",24593],["# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",23133],["# bottom, using the given strftime format.",2499],["# for small screen space, using the same theme for HTML and epub output is",1445],["# If true, \"Created using Sphinx\" is shown in the HTML footer.",1128],["# Fix unsupported image types using the PIL.",1109],["dive = Book.objects.using('other').create(title=\"Dive into Python\",",1103],["# When using The Virtual Brain for scientific publications, please cite it as follows:",1099],["unpack serialized message in str into this message instance using numpy for array types",1096],["user.save(using=self._db)",1088]]},{"word":"usr","context":[["#!/usr/bin/env python",502842],["#!/usr/bin/python",166810],["#!/usr/bin/env python3",50325],["#! /usr/bin/env python",36357],["#!/usr/bin/env python2",17558],["#!/usr/bin/python3",14457],["#! /usr/bin/python",8559],["#!/usr/bin/env python2.7",5347],["#!/usr/bin/python2",4200],["#! /usr/bin/env python3",3419]]},{"word":"utf","context":[["# -*- coding: utf-8 -*-",857663],["# coding: utf-8",46132],["# encoding: utf-8",45989],["# coding=utf-8",45684],["# -*- encoding: utf-8 -*-",38408],["#source_encoding = 'utf-8-sig'",21197],["# -*- coding:utf-8 -*-",14143],["#-*- coding: utf-8 -*-",10232],["has_default_value=False, default_value=_b(\"\").decode('utf-8'),",9915],["header_parameters['Content-Type'] = 'application/json; charset=utf-8'",7971]]},{"word":"util","context":[["import util",8331],["@util.memoized_property",4401],["from util import *",3873],["from java.util import Vector",2543],["from . import util",2417],["from nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util",2241],["from telemetry.core import util",1891],["from .. import util",1725],["from test_framework.util import *",1599],["@util.export",1378]]},{"word":"utils","context":[["from django.utils.translation import ugettext_lazy as _",45041],["from django.utils.translation import ugettext as _",20455],["from django.utils import timezone",19897],["import utils",14823],["from django.utils import six",14126],["sequence.append(utils.StartRecordingAction())",13281],["sequence.append(utils.AssertPresentationAction(",13276],["from django.utils.safestring import mark_safe",11411],["from south.utils import datetime_utils as datetime",10836],["from django.test.utils import override_settings",8785]]},{"word":"uuid","context":[["import uuid",48744],["from uuid import uuid4",7581],["with task_manager.acquire(self.context, self.node.uuid,",3844],["uuid = self._post_server()",3684],["instance_uuid = instance['uuid']",3508],["header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())",3305],["'name': uuid.uuid4().hex,",2798],["instance['uuid'])",2795],["'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'blank': 'True'})",2420],["db.instance_destroy(self.context, instance['uuid'])",2364]]},{"word":"v","context":[["# \"<project> v<release> documentation\".",25615],["return v",23613],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["# License, v. 2.0. If a copy of the MPL was not distributed with this",8935],["if v:",7779],["if v is None:",6598],["if v is not None:",5646],["setattr(self, k, v)",5567],["thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",4376]]},{"word":"v2","context":[["from south.v2 import SchemaMigration",36948],["from south.v2 import DataMigration",3093],["# the Free Software Foundation v2.",2865],["from neutron.api.v2 import attributes",1996],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-group-rules')",1985],["# Distributed under the terms of the GNU General Public License v2",1895],["<server xmlns=\"http://docs.openstack.org/compute/api/v2\"",1795],["path = self._url('/v2/images/%s' % image_id)",1330],["req = fakes.HTTPRequest.blank('/v2/fake/os-security-groups')",1192],["image_href = 'http://localhost/v2/images/%s' % self.image_uuid",1120]]},{"word":"val","context":[["return val",37620],["if val:",9843],["if val is None:",8171],["if val is not None:",6547],["params[key] = val",6176],["self.val = val",4376],["self.val = val",4376],["val = None",4121],["if not val:",3787],["return self.val",3245]]},{"word":"valid","context":[["ValueError: if `value` is not a valid value",8910],["valid = False",7746],["'valid': [",4945],["valid = True",4671],["if not valid:",3534],["if valid:",3050],["return valid",2802],["# Hosts/domain names that are valid for this site; required if DEBUG is False",2707],["self.valid = False",1588],["@unittest.skipUnless(settings.ROOT_URLCONF == 'lms.urls', 'Test only valid in lms')",1531]]},{"word":"validate","context":[["def validate(self):",34465],["def validate(self, value):",6364],["self.validate()",2896],["if validate:",2357],["if form.validate():",1844],["'validate': {'type:string': None},",1701],["'validate': {'type:uuid': None},",1357],["def convert_to_cache(self, value, record, validate=True):",1314],["validate,",1168],["if request.method == 'POST' and form.validate():",1034]]},{"word":"vals","context":[["vals = {",5561],["def write(self, cr, uid, ids, vals, context=None):",5277],["return vals",5069],["def create(self, cr, uid, vals, context=None):",4588],["vals = []",4076],["vals = {}",2766],["def create(self, vals):",2140],["def write(self, vals):",1582],["for val in vals:",1546],["if vals:",898]]},{"word":"value","context":[["return value",131201],["if value is None:",41767],["self.value = value",35866],["self.value = value",35866],["if value:",33671],["# non-false value, then it is used:",25813],["# contain a <link> tag referring to it.  The value of this option must be the",25748],["if value is not None:",24749],["L = ['%s=%r' % (key, value)",21414],["for key, value in self.__dict__.iteritems()]",20899]]},{"word":"values","context":[["# All configuration values have a default; values that are commented out",25768],["# All configuration values have a default; values that are commented out",25768],["# Note that not all possible configuration values are present in this",25557],["For the full list of settings and their values, see",14104],["return values",13682],["values = []",13492],["values = {",10686],["for value in values:",9786],["def values(self):",7557],["values = {}",7113]]},{"word":"var","context":[["return var",2914],["# Example: \"/var/www/example.com/media/\"",2135],["# Example: \"/var/www/example.com/static/\"",2129],["var componentModel = session.RetrieveModel(descr);",1396],["var subPath = pfcCreate(\"MpfcAssembly\").CreateComponentPath(assembly, ids);",1387],["var kwargs = {",1309],["var asmcomp = assembly.AssembleComponent (componentModel, transf);",1294],["self.var = var",1183],["self.var = var",1183],["var server = TacticServerStub.get();",1068]]},{"word":"variable","context":[["It exposes the WSGI callable as a module-level variable named ``application``.",11555],["and any production WSGI deployments. It should expose a module-level variable",4331],["print repr(dict(node = 'variable', name = 'i', vid = id(i), type = str(type(i)), access = 'read', line_offset = 4))",1821],["variable.",1229],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::originalInitialValue [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::name [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::TraceSourceInformation::accessor [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::initialValue [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::checker [variable]",1116],["## type-id.h (module 'core'): ns3::TypeId::AttributeInformation::flags [variable]",1116]]},{"word":"variables","context":[["variables.",1606],["return variables",1278],["variables = {}",1242],["# variables",1138],["# We intentionally define lots of variables that aren't used, and",1100],["# want to import all variables from base settings files",1100],["def variables(self):",1043],["variables = []",1031],["# declare variables",960],["# Global variables",934]]},{"word":"verbose","context":[["if verbose:",75034],["if self.verbose:",20028],["self.verbose = verbose",8591],["self.verbose = verbose",8591],["if options.verbose:",7627],["if args.verbose:",6269],["if common.verbose:",5955],["@verbose",5898],["verbose : bool, str, int, or None",5083],["If not None, override default verbose level (see mne.verbose).",4448]]},{"word":"version","context":[["# (at your option) any later version.",187795],["# the Free Software Foundation, either version 3 of the License, or",124116],["# the Free Software Foundation; either version 2 of the License, or",46274],["(at your option) any later version.",40979],["#    published by the Free Software Foundation, either version 3 of the",33963],["#    License, or (at your option) any later version.",33565],["the Free Software Foundation, either version 3 of the License, or",30750],["#    (at your option) any later version.",28884],["# License, or (at your option) any later version.",28201],["# The short X.Y version.",26964]]},{"word":"view","context":[["return view",3582],["from pyramid.view import view_config",2441],["response = view(request)",2398],["self.view = view",1993],["self.view = view",1993],["admin.add_view(view)",1685],["def has_object_permission(self, request, view, obj):",1502],["def has_permission(self, request, view):",1389],["response = self.view(request)",1224],["if view:",1196]]},{"word":"views","context":[["from . import views",7742],["# Create your views here.",6501],["from django.views.decorators.csrf import csrf_exempt",6256],["from django.views.generic import TemplateView",6167],["The `urlpatterns` list routes URLs to views. For more information please see:",5337],["Function views",5334],["1. Add an import:  from other_app.views import Home",5333],["Class-based views",5333],["1. Add an import:  from my_app import views",5330],["2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')",5330]]},{"word":"void","context":[["'void',",490700],["{ 'return_type': 'void',",11832],["void",5085],[":rtype: void",2869],["if (asmItem == void null)",1558],["if (compItem == void null)",1555],[":return: void",1477],["@returns(t.void)",1472],["if (componentModel != void null)",1396],["void main()",1208]]},{"word":"volume","context":[["'destination_type': 'volume',",5078],["volume,",4231],["'source_type': 'volume',",3204],["return volume",2392],["volume_api = cinder.volume.api.API()",2339],["def delete_volume(self, volume):",2039],["def create_volume(self, volume):",1998],["def initialize_connection(self, volume, connector):",1989],["'source_type': 'snapshot', 'destination_type': 'volume',",1909],["volume_id = volume['id']",1881]]},{"word":"w","context":[["with warnings.catch_warnings(record=True) as w:",7843],["return w",6105],["with open(filename, 'w') as f:",2988],["f = open(filename, 'w')",2880],["w.show()",2479],["w.close()",2098],["with open(path, 'w') as f:",2048],["for w in words:",1706],["w = gh.GH_RuntimeMessageLevel.Warning",1525],["if w:",1446]]},{"word":"wait","context":[["p.wait()",7466],["self.wait()",6273],["def wait(self):",6265],["proc.wait()",4253],["if wait:",3182],["process.wait()",2307],["response = self.wait()",1915],["def wait(self, timeout=None):",1270],["timer.start(interval=0.5).wait()",1267],["time.sleep(wait)",1210]]},{"word":"want","context":[["# want to import all variables from base settings files",1100],["# End users want this...",907],["# If you want change the content of this file, edit",741],["# keywords. When used from setup.py, we don't want to import _version.py,",676],["# Then use the following line where and when you want to drop into the",564],["# we don't want that an exception blocks the init_host",550],["print(\"You probably want to also tag the version now:\")",546],["# headers will be compiled as C headers. You don't want that so ALWAYS specify",486],["want = 'bool'",451],["Get the default attributes for this class.  This is useful if you want",450]]},{"word":"warning","context":[[".. warning::",8932],["logger.warning(",5202],["logging.warning(",4505],["log.warning(",3176],["LOG.warning(msg)",1644],["self.logger.warning(",1486],["print warning",1390],["LOG.warning(",1349],["_logger.warning(",1125],["log.warning(msg)",1101]]},{"word":"warnings","context":[["import warnings",62885],["warnings.warn(",16371],["# If true, keep warnings as \"system message\" paragraphs in the built documents.",13596],["with warnings.catch_warnings():",11929],["with warnings.catch_warnings(record=True) as w:",7843],["from warnings import warn",6800],["with warnings.catch_warnings(record=True):",4498],["warnings.simplefilter('always')",4147],["warnings.simplefilter(\"ignore\")",3786],["warnings = []",2847]]},{"word":"warranty","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027],["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",18511],["# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",10258],["## WITHOUT ANY WARRANTY; without even the implied warranty of",10119],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",7318],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",6750],["# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",5703]]},{"word":"was","context":[["# License, v. 2.0. If a copy of the MPL was not distributed with this",8935],["# License, v. 2.0. If a copy of the MPL was not distributed with this file,",3800],["# This file was automatically generated by SWIG (http://www.swig.org).",1788],["# Locate the client library. If module was installed via \"setup.py\" script, then",1115],["self.fail('Exception was not thrown')",861],["# This function was autogenerated by boilerplate.py.  Do not edit as",811],["\"\"\"Stop everything that was started.\"\"\"",720],["# This software was developed by SRI International and the University of",628],["trans = self.transaction # is None unless self.awake() was called",601],["# This code was developed as part of the Computational Infrastructure",546]]},{"word":"we","context":[["if not on_rtd:  # only import and set the theme if we're building docs locally",1399],["# constructor, see if we should eliminate this parameter from",916],["#             we major version the network_rpcapi to 2.0.",871],["# just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.",776],["# between branches and tags. By ignoring refnames without digits, we",776],["# Either we're using git < 1.8.3, or there really are no tags. We use",776],["# for header files. So we do our best by asking the db for flags for a",727],["In this scenario we need to create an Engine",715],["# keywords. When used from setup.py, we don't want to import _version.py,",676],["# so we do it with a regexp instead. This function is not used from",676]]},{"word":"when","context":[["# directories to ignore when looking for source files.",24534],["# This will get replaced with a git SHA1 when you do a git archive",8306],["# the site admins on every HTTP 500 error when DEBUG=False.",5061],["to be invoked when receiving the response.",2901],["Choreo. The InputSet object is used to specify input parameters when executing this Choreo.",2841],["TypeError will be raised when the following arguments are not of data type",1980],["# when",1969],["TypeError will be raised when the following arguments are not instances",1255],["except TypeError as te: self._check_types(ValueError(\"%s: '%s' when writing '%s'\" % (type(te), str(te), str(_x))))",1132],["except struct.error as se: self._check_types(struct.error(\"%s: '%s' when writing '%s'\" % (type(se), str(se), str(_x))))",1132]]},{"word":"where","context":[["where",6148],["where:",1480],["if where:",1320],["masked_where : Mask where a condition is met.",865],["where = []",687],["# tree (where the .git directory might live) to this file. Invert",648],["# Then use the following line where and when you want to drop into the",564],["self.where = where",523],["self.where = where",523],["Training vector, where n_samples in the number of samples and",512]]},{"word":"which","context":[["# base URL from which the finished HTML is served.",25764],["# This software is licensed as described in the file COPYING, which",4427],["# Get the project root dir, which is the parent dir of this",1397],["# must be the base URL from which the finished HTML is served.",1134],["def which(program):",938],["# which should be included with this package. The terms are also available at",930],["# which accompanies this distribution, and is available at",863],["include_state: An _IncludeState instance in which the headers are inserted.",755],["nesting_state: A NestingState instance which maintains information about",720],["error: A callable to which errors are reported, which takes 4 arguments:",678]]},{"word":"while","context":[["while True:",328649],["while 1:",67543],["while(True):",4735],["while not done:",4299],["while d.avail() > 0:",4170],["while line:",4124],["while self.running:",3735],["while stack:",3497],["while(1):",3074],["while (True):",2653]]},{"word":"widget","context":[["</widget>",4354],["return widget",3588],["widget = self.create()",2774],["widget=forms.TextInput(",1955],["self.widget = widget",1840],["self.widget = widget",1840],["widget=forms.TextInput(attrs={",1522],["if widget.get_active():",1507],["from kivy.uix.widget import Widget",1396],["widget.show()",1277]]},{"word":"width","context":[["self.width = width",6919],["self.width = width",6919],["<th width=\"100\">%s</th>",6749],["# tab-width:4",6534],["def width(self):",2609],["width = 0",2164],["# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-",1976],["height, width = 3, 3",1528],["<canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas>",1510],["# -*- Mode:Python; indent-tabs-mode:nil; tab-width:4 -*-",1438]]},{"word":"will","context":[["# This program is distributed in the hope that it will be useful,",137492],["#    This program is distributed in the hope that it will be useful,",58120],["This program is distributed in the hope that it will be useful,",27838],["# If true, '()' will be appended to :func: etc. cross-reference text.",27561],["# If true, the current module name will be prepended to all description",27546],["# If true, SmartyPants will be used to convert quotes and dashes to",27023],["# If true, sectionauthor and moduleauthor directives will be shown in the",26987],["# so a file named \"default.css\" will overwrite the builtin \"default.css\".",26152],["# If true, an OpenSearch description file will be output, and all pages will",25786],["# If true, an OpenSearch description file will be output, and all pages will",25786]]},{"word":"window","context":[["window.show()",2455],["self.window.show_all()",2202],["self.window = window",2092],["self.window = window",2092],["self.window.destroy()",1942],["window.show_all()",1720],["window.onload=function(){",1557],["self.window.show()",1393],["@window.event",1371],["self.window.hide()",1118]]},{"word":"with","context":[["# you may not use this file except in compliance with the License.",144128],["#    not use this file except in compliance with the License. You may obtain",123660],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["# along with this program; if not, write to the Free Software",47621],["# Redistribution and use in source and binary forms, with or without",44287],["with self.assertRaises(ValueError):",37193],["# not use this file except in compliance with the License. You may obtain",30799],["# If extensions (or modules to document with autodoc) are in another directory,",24837],["with self.assertRaises(TypeError):",24345]]},{"word":"without","context":[["# but WITHOUT ANY WARRANTY; without even the implied warranty of",260636],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",67306],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45138],["# Redistribution and use in source and binary forms, with or without",44287],["# WITHOUT ANY WARRANTY; without even the implied warranty of",21027],["# in the Software without restriction, including without limitation the rights",20572],["# in the Software without restriction, including without limitation the rights",20572],["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",18511],["# \"Software\"), to deal in the Software without restriction, including",17061],["# without limitation the rights to use, copy, modify, merge, publish,",14020]]},{"word":"work","context":[["# distributed with this work for additional information",9412],["# this work for additional information regarding copyright ownership.",7272],["distributed with this work for additional information",1385],["work.",1272],["def work(self):",978],["# you may not use this work except in compliance with the License.",969],["#   may be used to endorse or promote products derived from this work without",891],["#  distributed with this work for additional information",877],["# This file incorporates work covered by the following copyright and",870],["If you modify this Program, or any covered work, by linking or",813]]},{"word":"write","context":[["# along with this program; if not, write to the Free Software",47621],["def write(self, oprot):",22191],["oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))",21959],["# with this program; if not, write to the Free Software Foundation, Inc.,",10747],["# License along with this library; if not, write to the Free Software",9307],["outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))",8520],["f.write('\\n')",8410],["result.write(oprot)",8244],["outfile.write('),\\n')",8201],["def write(self, data):",8085]]},{"word":"writing","context":[["# Unless required by applicable law or agreed to in writing, software",187425],["#    Unless required by applicable law or agreed to in writing, software",127081],["Unless required by applicable law or agreed to in writing, software",20105],["#  Unless required by applicable law or agreed to in writing, software",11079],["#   Unless required by applicable law or agreed to in writing, software",10097],["# Unless required by applicable law or agreed to in writing,",9045],["#     Unless required by applicable law or agreed to in writing, software",2065],["##  Unless required by applicable law or agreed to in writing, software",1354],["except struct.error as se: self._check_types(struct.error(\"%s: '%s' when writing '%s'\" % (type(se), str(se), str(_x))))",1132],["except TypeError as te: self._check_types(ValueError(\"%s: '%s' when writing '%s'\" % (type(te), str(te), str(_x))))",1132]]},{"word":"www","context":[["#         http://www.apache.org/licenses/LICENSE-2.0",126073],["#     http://www.apache.org/licenses/LICENSE-2.0",74025],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",59921],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",49709],["#      http://www.apache.org/licenses/LICENSE-2.0",45119],["#    http://www.apache.org/licenses/LICENSE-2.0",34596],["# http://www.apache.org/licenses/LICENSE-2.0",30992],["http://www.apache.org/licenses/LICENSE-2.0",20437],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",16975],["#   http://www.apache.org/licenses/LICENSE-2.0",15910]]},{"word":"wx","context":[["import wx",17383],["if dlg.ShowModal() == wx.ID_OK:",4009],["sizer = wx.BoxSizer(wx.VERTICAL)",2634],["sizer = wx.BoxSizer(wx.VERTICAL)",2634],["if 'unicode' in wx.PlatformInfo:",1359],["hbox = wx.BoxSizer(wx.HORIZONTAL)",1351],["hbox = wx.BoxSizer(wx.HORIZONTAL)",1351],["menu = wx.Menu()",1136],["wx.Panel.__init__(self, parent)",974],["self.Bind(wx.EVT_PAINT, self.OnPaint)",971]]},{"word":"x","context":[["return x",38592],["self.x = x",11542],["self.x = x",11542],["x = 0",11315],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],["thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')",10292],[">>> from sympy.abc import x",9964],["raise x",8075]]},{"word":"x00","context":[["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682],["\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\",16682]]},{"word":"x20","context":[["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911],["\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\",5911]]},{"word":"xml","context":[["import xml.etree.ElementTree as ET",9174],["from xml.dom import minidom",6820],["return xml",5346],["from xml.etree import ElementTree",4684],["import xml.dom.minidom",4571],["xml = obj.to_xml()",3785],["self.assertXmlEqual(xml, \"\"\"",3429],["ctype = 'xml'",2780],["xml = \"\"\"",2731],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",2426]]},{"word":"xrange","context":[["for i in xrange(n):",3895],["return tuple([sparse.get(i, default) for i in xrange(0, 1+maxtag)])",3631],["for i in xrange(10):",3314],["for i in xrange(3):",2379],["for i in xrange(100):",1999],["for i in xrange(5):",1760],["xrange = range",1737],["for i in xrange(4):",1586],["for i in xrange(N):",1479],["from six.moves import xrange",1301]]},{"word":"y","context":[["self.y = y",9923],["self.y = y",9923],["return y",8763],[">>> from sympy.abc import x, y",6461],["y = 0",6015],["y = []",3535],["return x, y",3418],["clf.fit(X, y)",3392],["y += 1",3116],["def __init__(self, x, y):",2497]]},{"word":"yield","context":[["yield",28079],["yield item",9882],["yield clk.posedge",7718],["yield line",6992],["yield i",6522],["yield result",6380],["yield x",5817],["yield 1",4596],["yield chunk",3921],["yield None",3803]]},{"word":"you","context":[["# you may not use this file except in compliance with the License.",144128],["#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may",123249],["# This program is free software: you can redistribute it and/or modify",66253],["# This program is free software; you can redistribute it and/or modify",57163],["#    This program is free software: you can redistribute it and/or modify",52778],["# Licensed under the Apache License, Version 2.0 (the \"License\"); you may",30776],["# There are two options for replacing |today|: either, you set today to some",25812],["# The version info for the project you're documenting, acts as replacement for",25262],["This program is free software: you can redistribute it and/or modify",18733],["you may not use this file except in compliance with the License.",18491]]},{"word":"your","context":[["# (at your option) any later version.",187795],["(at your option) any later version.",40979],["#    License, or (at your option) any later version.",33565],["#    (at your option) any later version.",28884],["# License, or (at your option) any later version.",28201],["# If your documentation needs a minimal Sphinx version, state it here.",24083],["# of the License, or (at your option) any later version.",16356],["# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.",13293],["#  (at your option) any later version.",11913],["# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",11900]]},{"word":"z","context":[["return z",3412],["self.z = z",2665],["self.z = z",2665],["z = 0",1763],["# Copyright 2013, 2014 Sourcefabric z.u. and contributors.",1584],[">>> from sympy.abc import x, y, z",1569],["z.close()",1512],["return x, y, z",904],["z = []",888],["A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\"",886]]}]
