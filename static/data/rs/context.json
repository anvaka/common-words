[{"word":"0u","context":[["let mut i = 0u;",1097],["let mut sum = 0u;",150],["let mut i: uint = 0u;",157],["for i in range(0u, len) {",171],["_ => 0u",182],["for _ in range(0u, 100) {",187],["for _ in range(0u, 10) {",196],["act.set(0u, true);",200],["try!(self.ibox(0u));",235],["for _ in range(0u, 1000) {",254]],"useCount":20764},{"word":"1u","context":[["self.meows += 1u;",97],["i += 1u;",988],["} else if args.len() <= 1u {",273],["major: 1u,",207],["st.pos = st.pos + 1u;",197],["i -= 1u;",171],["act.set(1u, true);",160],["assert_eq!(v[1], 1u);",126],["line: 1u,",112],["/// map.insert(1u, \"a\");",99]],"useCount":12775},{"word":"8usize","context":[["assert_eq!(::std::mem::align_of::<nsACString_internal>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<nsStyleColumn>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<FontFamilyName>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<nsCSSValueSharedList>() , 8usize);",60],["assert_eq!(::std::mem::size_of::<gfxFontFeature>() , 8usize);",60],["assert_eq!(::std::mem::size_of::<nsISupports>() , 8usize);",61],["assert_eq!(::std::mem::align_of::<nsISupports>() , 8usize);",61],[", 8usize);",834],["8usize);",1051],["assert_eq!(::std::mem::align_of::<nsCSSValueTriplet_heap>() , 8usize);",60]],"useCount":16333},{"word":"A","context":[["type Item = A;",502],["//             __impl_slice_eq2! { [A; $N], [B] }",594],["//             __impl_slice_eq1! { [A; $N], [B; $N] }",594],["//             // __impl_slice_eq2! { [A; $N], &'b [B; $N] }",594],["//             __impl_slice_eq2! { [A; $N], &'b [B] }",594],["//             // __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }",594],["//             __impl_slice_eq2! { [A; $N], &'b mut [B] }",594],["fn next(&mut self) -> Option<A> {",963],["//         (0) -> A",1440],["* @return A cookie",2260]],"useCount":140274},{"word":"Add","context":[["// Add the box that starts the block context.",98],["use std::ops::Add;",376],["Add,",248],["Add(r0, r0, Reg(r2), LeaveFlags, AL)",180],["use std::ops::{Add, Sub};",155],["for<'a> &'a A: Add<&'a A, Output = A>",106],["// Add formal parameters.",95],["// Add explicitly-declared locals.",95],["// Add pattern bindings.",95],["// Add new pipeline to navigation frame, and return frames evicted from history.",94]],"useCount":11483},{"word":"An","context":[["/// An iterator that moves out of a vector.",98],["/// This function will return an error if the RwLock is poisoned. An RwLock",102],["/// An opaque reference to the DOM node that this `Fragment` originates from.",96],["/// An iterator over substrings of `self`, separated by characters",319],["/// An inline fragment that establishes an absolute containing block for its descendants (i.e.",152],["// OpenAOE: An open source reimplementation of Age of Empires (1997)",127],["/// An iterator over a frame tree, returning nodes in depth-first order.",125],["/// An iterator over subslices separated by elements that match a predicate",124],["/// An HTML node.",111],["/// An enlarged rectangle around the page contents visible in the viewport, used",110]],"useCount":19238},{"word":"Any","context":[["* a reply to be generated. Any returned error will be",1130],["fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {",118],["/// Forwards to the method defined on the type `Any`.",120],["use any::Any;",160],["response.headers_mut().set(AccessControlAllowOrigin::Any);",161],["NamespaceConstraint::Any => {",223],["/// Any error other than `EndOfFile` that is produced by the underlying Reader",235],["fn as_any(&self) -> &::std::any::Any {",761],["self as &::std::any::Any",763],["use std::any::Any;",918]],"useCount":11478},{"word":"Arc","context":[["let cookie_jar = Arc::new(RwLock::new(CookieStorage::new()));",297],["use alloc::arc::Arc;",277],["use std::sync::{Arc, Mutex};",1823],["let mut style = Arc::make_mut(style);",739],["/// use std::sync::Arc;",684],["use sync::Arc;",405],["/// let five = Arc::new(5);",396],["use std::sync::{Arc, RwLock};",323],["let hsts_list = Arc::new(RwLock::new(HSTSList::new()));",297],["use std::sync::Arc;",5368]],"useCount":45985},{"word":"Atom","context":[["use string_cache::{Atom, Namespace, QualName};",200],["fn has_class(&self, name: &Atom) -> bool {",230],["fn get_id(&self) -> Option<Atom> {",245],["fn new_inherited(localName: Atom,",264],["local_name: Atom,",291],["name: Atom,",303],["pub fn new(localName: Atom,",394],["use string_cache::{Atom, Namespace};",403],["fn parse_plain_attribute(&self, name: &Atom, value: DOMString) -> AttrValue {",592],["use string_cache::Atom;",2184]],"useCount":22658},{"word":"Au","context":[["fn update_late_computed_block_position_if_necessary(&mut self, block_position: Au) {",458],["use app_units::Au;",2613],["use util::geometry::Au;",1289],["Au(0)",1286],["bounds: &Rect<Au>,",1211],["-> Au {",815],["absolute_bounds: &Rect<Au>,",737],["stacking_relative_border_box: &Rect<Au>,",710],["stacking_context_position: &Point2D<Au>) {",528],["parent_flow_inline_size: Au,",621]],"useCount":81878},{"word":"Auto","context":[["Auto,",674],["MaybeAuto::Auto,",233],["(MaybeAuto::Auto, MaybeAuto::Auto) => {",468],["(MaybeAuto::Auto, MaybeAuto::Auto) => {",468],["MaybeAuto::Auto => {",379],["// If only one is Auto, solve for it",352],["LengthOrPercentageOrAuto::Auto => MaybeAuto::Auto,",312],["LengthOrPercentageOrAuto::Auto => MaybeAuto::Auto,",312],["LengthOrPercentageOrAuto::Auto |",270],["LengthOrPercentageOrAuto::Auto",239]],"useCount":15946},{"word":"B","context":[["B,",264],["//         (1) -> B",1320],["//             __impl_slice_eq2! { [A; $N], &'b [B] }",594],["//             // __impl_slice_eq2! { [A; $N], &'b [B; $N] }",594],["//             __impl_slice_eq1! { [A; $N], [B; $N] }",594],["//             // __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }",594],["//             __impl_slice_eq2! { [A; $N], &'b mut [B] }",594],["//             __impl_slice_eq2! { [A; $N], [B] }",594],["fn next(&mut self) -> Option<B> {",297],["type B = T;",291]],"useCount":43015},{"word":"Bencher","context":[["impl Bencher {",57],["fn external_bench(_b: &mut test::Bencher) {}",57],["#[bench] fn lib_bench(_b: &mut test::Bencher) {}",57],["fn bench(b: &mut Bencher) {",67],["let mut bs = Bencher {",74],["fn $name(b: &mut Bencher) {",78],["use super::test::Bencher;",99],["use test::{Bencher, black_box};",211],["use self::test::Bencher;",749],["use test::Bencher;",1387]],"useCount":15680},{"word":"BigUint","context":[["let b = BigUint::from_slice(b_vec);",251],["let one: BigUint = One::one();",110],["fn to_biguint(&self) -> Option<BigUint> {",115],["type Output = BigUint;",134],["/// Creates and initializes a `BigUint`.",163],["let c = BigUint::from_slice(cVec);",170],["let b = BigUint::from_slice(bVec);",170],["let a = BigUint::from_slice(aVec);",170],["let a = BigUint::from_slice(a_vec);",251],["let c = BigUint::from_slice(c_vec);",251]],"useCount":12305},{"word":"Bindings","context":[["use dom::bindings::codegen::Bindings::WindowBinding::WindowMethods;",777],["use dom::bindings::codegen::Bindings::FunctionBinding::Function;",250],["use dom::bindings::codegen::Bindings::HTMLInputElementBinding::HTMLInputElementMethods;",273],["use dom::bindings::codegen::Bindings::DocumentBinding::{DocumentMethods, DocumentReadyState};",300],["use dom::bindings::codegen::Bindings::ElementBinding::ElementMethods;",362],["use dom::bindings::codegen::Bindings::DocumentBinding::DocumentMethods;",536],["use dom::bindings::codegen::Bindings::EventBinding::EventMethods;",654],["use dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull;",673],["use dom::bindings::codegen::Bindings::AttrBinding::AttrMethods;",401],["use dom::bindings::codegen::Bindings::NodeBinding::NodeMethods;",847]],"useCount":16740},{"word":"Block","context":[["-> Block<'blk, 'tcx> {",2367],["-> &'a Block<'a> {",1104],["bcx: &'a Block<'a>,",943],["bcx: Block<'blk, 'tcx>,",816],["body: &ast::Block,",670],["-> Block<'a, 'tcx> {",262],["body: &ast::Block) {",249],["Block,",244],["blk: &ast::Block,",236],["-> Block<'blk, 'tcx> where",221]],"useCount":33608},{"word":"Box","context":[["display_list: Box<DisplayList>,",428],["use alloc::boxed::Box;",872],["fn handler(self: Box<Self>) {",234],["${switch_to_style_struct(\"Box\")}",237],["contexts: &mut Vec<Box<StackingContext>>)",257],["// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.",257],["-> Box<base::MacResult+'cx> {",265],["fn clone(&self) -> Box<ScriptChan + Send> {",314],["use boxed::Box;",341],["-> Box<base::MacResult+'static> {",391]],"useCount":52236},{"word":"C","context":[["pub _gtk_reserved4: Option<unsafe extern \"C\" fn()>,",705],["::std::option::Option<extern \"C\" fn",718],["pub _gtk_reserved1: Option<unsafe extern \"C\" fn()>,",721],["pub _gtk_reserved3: Option<unsafe extern \"C\" fn()>,",721],["pub _gtk_reserved2: Option<unsafe extern \"C\" fn()>,",731],["::std::option::Option<unsafe extern \"C\" fn(cx: *mut JSContext,",828],["//         (2) -> C",1200],["#[repr(C)] #[derive(Clone, Copy, Debug)]",6870],["extern \"C\" {",8525],["#[repr(C)]",59021]],"useCount":137963},{"word":"CSS","context":[["//! CSS table formatting contexts.",283],["// Perform CSS selector matching and flow construction.",115],["// shrink to fit algorithm (see CSS 2.1 ยง 10.3.9)",128],["/// Calculates inline metrics from font metrics and line block-size per CSS 2.1 ยง 10.8.1.",131],["/// CSS Section 10.4: Minimum and Maximum inline-sizes",134],["/// objects, parses HTML and CSS, and kicks off initial layout.",138],["// CSS 2.1 ยง 17.2.1, step 3-2",168],["/// CSS Section 10.3.5",176],["// See CSS 2.1 ยง 10.8.1.",180],["// FIXME(pcwalton): Percentages should be relative to any definite size per CSS-SIZING.",186]],"useCount":15496},{"word":"CString","context":[["use std::ffi::{CString, CStr};",121],["let name = CString::new(description).unwrap();",122],["unsafe fn to_c_str_unchecked(&self) -> CString {",162],["fn to_c_str(&self) -> CString {",167],["use std::ffi::CString;",1908],["use std::ffi::{CStr, CString};",376],["let name = CString::new(name).unwrap();",302],["use ffi::CString;",172],["use std::c_str::CString;",266],["use c_str::CString;",279]],"useCount":12179},{"word":"CallType","context":[["use types::executed::CallType;",47],["CallType::Upload(UploadProtocol::Simple) => call.upload(input_file.unwrap(), mime_type.unwrap()),",101],["CallType::Upload(UploadProtocol::Resumable) => call.upload_resumable(input_file.unwrap(), mime_type.unwrap()),",101],["pub enum CallType {",13],["CallType::Standard => unreachable!()",101],["let protocol = CallType::Standard;",5346],["CallType::Standard => call.doit(),",5346],["input_file_from_opts, input_mime_from_opts, FieldCursor, FieldError, CallType, UploadProtocol,",268],["call_type: CallType::Call,",112]],"useCount":11435},{"word":"Cargo","context":[["project.file(\"Cargo.toml\", r#\"",384],[".file(\"d1/Cargo.toml\", r#\"",229],[".file(\"baz/Cargo.toml\", r#\"",243],["//! To use this library, you would put the following lines into your `Cargo.toml` file:",276],[".file(\"b/Cargo.toml\", r#\"",453],[".file(\"Cargo.toml\", &basic_bin_manifest(\"foo\"))",467],[".file(\"Cargo.toml\", &format!(r#\"",724],[".file(\"Cargo.toml\", r#\"",9158],[".file(\"bar/Cargo.toml\", r#\"",1174],[".file(\"a/Cargo.toml\", r#\"",907]],"useCount":18134},{"word":"Cell","context":[["next_worker_id: Cell<WorkerId>,",139],["use std::cell::{Cell, RefCell};",1204],["use std::cell::Cell;",2972],["next_worker_id: Cell::new(WorkerId(0)),",139],["writeback_errors: Cell::new(false),",152],["use core::cell::Cell;",207],["use std::cell::{RefCell, Cell};",216],["use cell::Cell;",313],["cached_size: ::std::cell::Cell::new(0),",872],["cached_size: ::std::cell::Cell<u32>,",913]],"useCount":36599},{"word":"Clone","context":[["#[derive(Copy, Clone, Debug)]",2614],["#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]",2797],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357],["#[derive(Clone, Copy)]",3360],["#[derive(Clone, Debug)]",4239],["#[derive(Debug, Copy, Clone)]",4741],["#[deriving(Clone)]",5487],["#[repr(C)] #[derive(Clone, Copy, Debug)]",6870],["#[derive(Copy, Clone)]",10891],["#[derive(Clone)]",12602]],"useCount":161836},{"word":"Code","context":[["// This Source Code Form is subject to the terms of the Mozilla Public",794],["//! Code that is useful in various trans modules.",76],["// Code that generates a test runner to run all the tests in a crate",59],["* This Source Code Form is subject to the terms of the Mozilla Public",53],["impl Code {",52],["// Code 301, 302, 303, 307, 308",52],["// Code 407",52],["// Code 401",52],["// Code relating to taking, dropping, etc as well as type descriptors.",47],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948]],"useCount":19691},{"word":"Color","context":[["color: Color,",482],["pub color: Color,",476],["use cssparser::Color;",373],["use azure::azure_hl::Color;",234],["Color,",211],["pub background_color: Color,",167],["color: Color) {",165],[".unwrap_or(cssparser::Color::CurrentColor),",158],["pub enum Color {",148],["impl Color {",145]],"useCount":12219},{"word":"Context","context":[["fn to_computed_value(&self, context: &Context) -> computed_value::T {",1326],["fn check_stmt(&mut self, cx: &Context, s: &ast::Stmt) {",254],["use values::computed::Context;",1071],["fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {",567],["fn check_item(&mut self, cx: &Context, it: &ast::Item) {",485],["impl Context {",407],["pub struct Context {",469],["use context::Context;",351],["use values::computed::{ToComputedValue, Context};",284],["Context {",252]],"useCount":21714},{"word":"Copy","context":[["#[derive(Clone, Copy, Debug)]",1445],["#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]",2797],["#[derive(Copy, Clone, Debug)]",2614],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357],["#[derive(Copy, Clone)]",10891],["#[derive(Debug, Copy)]",9387],["#[derive(Copy)]",8456],["#[repr(C)] #[derive(Clone, Copy, Debug)]",6870],["#[derive(Clone, Copy)]",3360],["#[derive(Debug, Copy, Clone)]",4741]],"useCount":102370},{"word":"CrateContext","context":[["cx: &CrateContext,",182],["pub fn compute_abi_info(ccx: &CrateContext,",85],["pub fn to_string(&self, ccx: &CrateContext) -> String {",90],["use trans::context::CrateContext;",90],["use middle::trans::context::CrateContext;",110],["CrateContext {",112],["fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)",200],["cx: &CrateContext<'a, 'tcx>,",190],["pub ccx: &'a CrateContext<'a, 'tcx>,",131],["ccx: &'a CrateContext<'a, 'tcx>,",151]],"useCount":14130},{"word":"Create","context":[["action: Action::Create,",105],["// Create the window and document objects.",138],["// Create a layout context for use throughout the following passes.",123],["// Create a layout context for use in building display lists, hit testing, &c.",122],["// Create a new lexical scope and push it onto the stack",116],["/// Create a new InProgressLoad object.",116],["/// Create a new `OsRng`.",114],["// Create a new frame and update the internal bookkeeping.",105],["// Create the new pipeline, attached to the parent and push to pending frames",105],["// Create the new pipeline",105]],"useCount":15475},{"word":"Creates","context":[["/// Creates a new layout node with the same lifetime as this layout node.",199],["/// Creates the information specific to an iframe fragment.",96],["/// Creates a new image fragment from the given URL and local image cache.",96],["/// Creates a new instance of `UnscannedTextFragmentInfo` from the given text.",96],["/// Creates the display item for a text decoration: underline, overline, or line-through.",89],["/// Creates the information specific to a scanned text fragment from a range and a text run.",96],["/// Creates a new window.",110],["/// Creates and initializes a `BigInt`.",127],["/// Creates a new script chan.",145],["/// Creates and initializes a `BigUint`.",163]],"useCount":15111},{"word":"Cursor","context":[["let mut wr = Cursor::new(Vec::new());",91],["use style_traits::cursor::Cursor;",352],["style.get_cursor(Cursor::Default),",200],["self.style.get_cursor(Cursor::Default),",150],["SetCursor(Cursor),",126],["/// use std::io::Cursor;",94],["fn handle_set_cursor_msg(&mut self, cursor: Cursor) {",109],["use util::cursor::Cursor;",402],["use std::io::Cursor;",577],["Cursor::DefaultCursor),",650]],"useCount":12027},{"word":"D","context":[["fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {",116],["fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {",116],["fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {",116],["D,",160],["fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>",191],["fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>",191],["fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>",191],["(3) -> D, SD, TD,",242],["where D: Deserializer,",342],["//         (3) -> D",1080]],"useCount":18574},{"word":"DOM","context":[["/// TODO: Actually perform DOM event dispatch.",138],["/// This is the main entry point for receiving and dispatching DOM events.",138],["/// normally. If we do exit, we will tear down the DOM nodes, possibly at a point",131],["/// are no reachable, owning pointers to the DOM memory, so it never gets freed by default",128],["/// Global static data related to the DOM.",124],["//! The core DOM types. Defines the basic DOM hierarchy as well as all the HTML elements.",111],["//! The core DOM types. Defines the basic DOM hierarchy as well as all the HTML elements.",111],["/// https://w3c.github.io/DOM-Parsing/#widl-Element-innerHTML",114],["// Drop our references to the JSContext and DOM objects.",116],["// Sever the connection between the global and the DOM tree",116]],"useCount":11696},{"word":"DOMRefCell","context":[["incomplete_loads: DOMRefCell::new(vec!()),",116],["js_runtime: DOMRefCell::new(Some(runtime.clone())),",96],["attrs: DOMRefCell<Vec<JS<Attr>>>,",97],["style_attribute: DOMRefCell::new(None),",97],["fragment_name: DOMRefCell<Option<String>>,",101],["fragment_name: DOMRefCell::new(None),",107],["loader: DOMRefCell::new(doc_loader),",108],["loader: DOMRefCell<DocumentLoader>,",108],["incomplete_loads: DOMRefCell<Vec<InProgressLoad>>,",116],["use dom::bindings::cell::DOMRefCell;",1841]],"useCount":12221},{"word":"DOMString","context":[["None => DOMString::new(),",292],["type_: DOMString,",660],["fn new_inherited(localName: DOMString,",384],["pub fn new(localName: DOMString,",550],["namespace: Option<DOMString>,",556],["prefix: Option<DOMString>,",2224],["use util::str::DOMString;",2221],["fn parse_plain_attribute(&self, name: &Atom, value: DOMString) -> AttrValue {",592],["use dom::bindings::str::DOMString;",1185],["use servo_util::str::DOMString;",707]],"useCount":50865},{"word":"DWORD","context":[["dwDesiredAccess: DWORD,",263],[") -> DWORD;",581],["pub Flags: ::DWORD,",140],["dwFlags: ::DWORD,",175],["use libc::types::os::arch::extra::DWORD;",178],["dwFlags: DWORD,",211],["cbSize: ::DWORD,",219],["pub cbSize: ::DWORD,",245],["pub dwFlags: ::DWORD,",254],["-> DWORD;",356]],"useCount":36927},{"word":"Debug","context":[["#[derive(Debug)]",23845],["#[repr(C)] #[derive(Clone, Copy, Debug)]",6870],["#[derive(Debug, Copy, Clone)]",4741],["#[derive(Clone, Debug)]",4239],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357],["#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]",2797],["#[derive(Copy, Clone, Debug)]",2614],["#[derive(Debug, Clone)]",2558],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]",2062],["#[derive(Debug, Copy)]",9387]],"useCount":128990},{"word":"Decodable","context":[["use rustc_serialize::{Decodable, Decoder};",168],["Decodable::decode(&mut decoder).unwrap()",190],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395],["#[deriving(Clone, Encodable, Decodable)]",1202],["#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]",466],["#[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]",395],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]",306],["#[deriving(Clone, Encodable, Decodable, PartialEq)]",259],["#[deriving(Eq, Encodable, Decodable,IterBytes)]",256],["Decodable::decode(this)",214]],"useCount":14349},{"word":"DefId","context":[["pub def_id: ast::DefId,",471],["def_id: ast::DefId,",1461],["F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,",847],["F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,",847],["trait_def_id: ast::DefId,",669],["did: ast::DefId,",535],["def_id: ast::DefId)",433],["impl_def_id: ast::DefId,",339],["class_id: ast::DefId,",331],["did: ast::DefId)",315]],"useCount":34043},{"word":"Default","context":[["use default::Default;",655],["use core::default::Default;",481],[".. Default::default()",844],["#[derive(Clone,Default)]",868],["#[derive(Default)]",902],["::std::default::Default::default()",913],["#[derive(Debug, Default)]",999],["..Default::default()",1114],["let mut object = json::value::Value::Object(Default::default());",2021],["use std::default::Default;",3793]],"useCount":35219},{"word":"Deserialize","context":[["where T: de::Deserialize,",162],["#[derive(Deserialize, Serialize)]",2135],["#[derive(Clone, Deserialize, Serialize)]",744],["#[derive(Clone, HeapSizeOf, Deserialize, Serialize)]",524],["#[derive(Clone, Deserialize, Serialize, HeapSizeOf)]",343],["#[derive(Clone, PartialEq, Debug, HeapSizeOf, Deserialize, Serialize)]",219],["#[derive(Clone, PartialEq, Eq, Copy, Hash, Debug, Deserialize, Serialize, HeapSizeOf)]",191],["#[derive(HeapSizeOf, Deserialize, Serialize)]",178],["#[derive(Clone, Deserialize, HeapSizeOf, Serialize)]",166],["#[derive(Serialize, Deserialize)]",160]],"useCount":12477},{"word":"Display","context":[["impl fmt::Display for Error {",663],["use std::fmt::{self, Display};",200],["fmt::Display::fmt(&**self, f)",174],["impl Display for Error {",155],["pub display: *mut Display,",152],["use std::fmt::{Display, Formatter};",130],["use std::fmt::{self, Display, Formatter};",115],["fmt::Display::fmt(self, f)",244],["use std::fmt::Display;",274],["//!         // You can also just use its `Debug`, `Display` or `Error` traits",274]],"useCount":11766},{"word":"Document","context":[["impl Document {",277],["let doc = win.Document();",154],["Document {",163],["pub struct Document {",180],["use dom::document::Document;",2403],["NodeTypeId::Document => {",252],["use dom::document::{Document, DocumentHelpers};",287],["let doc = self.Document();",250],["NodeTypeId::Document(_) => {",230],["let document = self.Document();",250]],"useCount":18656},{"word":"DoitError","context":[["DoitError::IoError(path, err) => {",268],["Err(api_err) => Err(DoitError::ApiError(api_err)),",5447],["-> Result<(), DoitError> {",5447],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["fn _doit(&self, dry_run: bool) -> Result<Result<(), DoitError>, Option<InvalidOptionsError>> {",268],["fn doit(&self) -> Result<(), DoitError> {",268],["DoitError::ApiError(err) => {",268],["enum DoitError {",268],["let mut call_result: Result<(), DoitError> = Ok(());",268]],"useCount":17318},{"word":"Drop","context":[["use ops::Drop;",475],["impl Drop for MemoryMap {",111],["impl Drop for r {",232],["use std::ops::Drop;",144],["impl<'a> Drop for ScriptMemoryFailsafe<'a> {",128],["impl Drop for Inner {",117],["// Drop our references to the JSContext and DOM objects.",116],["impl Drop for Window {",162],["impl Drop for Foo {",312],["impl Drop for Node {",112]],"useCount":12603},{"word":"Duration","context":[["/// use std::time::Duration;",156],["thread::sleep(Duration::from_millis(100));",108],["use std::time::{Duration, Instant};",146],["use std::time::duration::Duration;",152],["use std::time::{Instant, Duration};",83],["thread::sleep(Duration::from_millis(50));",79],["Duration { secs: secs, nanos: nanos }",163],["type Output = Duration;",247],["use time::Duration;",622],["use std::time::Duration;",2143]],"useCount":13328},{"word":"E","context":[["env: E) {",363],["(4) -> E, SE, TE,",236],["enum E {",210],["/// let e = f64::consts::E;",164],["element: &E,",157],["type Error = E;",126],["//         (4) -> E",960],["fn encode(&self, s: &mut S) -> Result<(), E> {",544],["where E: Error,",531],["E,",250]],"useCount":31713},{"word":"ERROR","context":[["error = ERROR)));",162],["//~^ ERROR use of deprecated item",420],["//~^ ERROR use of unstable library feature",212],["//! ERROR:main: this is printed by default",195],["[ERROR] failed to parse manifest at `[..]`",177],["//~| ERROR E0277",170],["touch(&x); //~ ERROR use of moved value: `x`",160],["foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text",144],["foo.trait_deprecated(); //~ ERROR use of deprecated item",144],["//~^ ERROR mismatched types",550]],"useCount":11684},{"word":"Element","context":[["let element: JSRef<Element> = ElementCast::from_ref(self);",315],["use dom::element::Element;",1031],["fn filter(&self, elem: &Element, _root: &Node) -> bool {",974],["let element = self.upcast::<Element>();",939],["Some(NodeTypeId::Element(ElementTypeId::HTMLElement(",628],["NodeTypeId::Element(..) => {",605],["impl Element {",500],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLSelectElement)) |",378],["let el = self.upcast::<Element>();",373],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLInputElement)) |",339]],"useCount":34063},{"word":"Encodable","context":[["#[deriving(Eq, Encodable, Decodable,IterBytes)]",256],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395],["#[deriving(Clone, Encodable, Decodable, PartialEq)]",259],["use rustc_serialize::{Encodable, Encoder};",269],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]",306],["#[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]",395],["#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]",466],["#[deriving(Encodable)]",775],["#[deriving(Clone, Encodable, Decodable)]",1202],["#[deriving(Decodable, Encodable)]",154]],"useCount":12360},{"word":"Encoder","context":[["f: |&mut Encoder<'a, W>| -> EncodeResult) -> EncodeResult {",255],["use rustc_serialize::{Encodable, Encoder};",269],["f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {",298],["use serialize::Encoder;",306],["F: FnOnce(&mut Encoder<'a>) -> EncodeResult,",699],["ebml_w: &mut writer::Encoder,",468],["fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {",425],["ebml_w: &mut Encoder,",379],["rbml_w: &mut Encoder,",1478],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143]],"useCount":14936},{"word":"Eq","context":[["#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]",2797],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357],["#[deriving(Eq)]",2384],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]",2062],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395],["#[derive(Clone, Copy, Debug, Eq, PartialEq)]",1136],["#[derive(Debug, Clone, Copy, PartialEq, Eq)]",774],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]",640],["#[derive(Clone, PartialEq, Eq, Debug)]",619],["#[deriving(Clone, Eq)]",616]],"useCount":56755},{"word":"Err","context":[["if let Err(field_err) = temp_cursor.set(&*key) {",2021],["Err(err) => {",2526],["Err(())",2544],["_ => Err(())",2845],["Err(_) => {",3162],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["Err(e) => {",8060],["Err(api_err) => Err(DoitError::ApiError(api_err)),",5447],["Err(api_err) => Err(DoitError::ApiError(api_err)),",5447]],"useCount":190624},{"word":"Error","context":[["fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {",662],["type Error = Error;",595],["type Error = Error;",595],["impl fmt::Display for Error {",663],["fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>",706],["return Err(Error::HierarchyRequest);",1024],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["/// # Error",1337],["use std::error::Error;",2452],["pub enum Error {",1266]],"useCount":77128},{"word":"Example","context":[["* # Example",870],["// Example: We start in this state, where `r` represents \"next",90],["/// # Example values",101],["Example:",152],["# Example",164],["//! ## Example",175],["/// Example:",287],["/// ## Example",432],["//! # Example",648],["/// # Example",17445]],"useCount":22725},{"word":"Examples","context":[["* # Examples",433],["/// # Examples:",128],["// Examples from wikipedia",133],["/// Examples:",179],["# Examples",209],["/// #Examples",235],["//! # Examples",1087],["//     /// # Examples",1508],["//         /// # Examples",4224],["/// # Examples",31848]],"useCount":40993},{"word":"Expr","context":[["fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {",567],["expr: &ast::Expr)",547],["expr: &'tcx ast::Expr,",428],["-> DatumBlock<'a, Expr> {",399],["call_expr: &ast::Expr,",326],["expr: &ast::Expr,",2816],["-> DatumBlock<'blk, 'tcx, Expr> {",1341],["P(ast::Expr {",256],["datum: Datum<'tcx, Expr>,",267],["base: &ast::Expr,",308]],"useCount":50909},{"word":"F","context":[["mut f: F)",439],["where F: FnOnce(&mut Self) -> Result<(), Self::Error>;",323],["where F: Facade",344],["F: FnOnce(&mut Decoder) -> DecodeResult<T>,",387],["F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,",430],["f: F,",525],["F: FnOnce(&mut Encoder<'a>) -> EncodeResult,",699],["f: F)",820],["//         (5) -> F",840],["F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,",847]],"useCount":65715},{"word":"FIXME","context":[["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896],["// FIXME(#5992): assignment operator overloads",239],["// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.",257],["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264],["// FIXME(pcwalton, #2795): Get the real container size.",356],["// ignore-lexer-test FIXME #15679",442],["// pretty-expanded FIXME #23616",1684],["// ignore-android: FIXME(#10381)",770],["// FIXME(#19839) Remove in favor of `#[derive(Clone)]`",453]],"useCount":49232},{"word":"File","context":[["impl File {",206],["use std::fs::File;",5120],["/// use std::fs::File;",796],["let mut read_stream = File::open_mode(filename, Open, Read);",185],["use std::fs::{self, File};",695],["use std::io::File;",608],["File: DIFile,",489],["/// let mut f = try!(File::open(\"foo.txt\"));",276],["//! use std::fs::File;",198],["/// [`File`][file]s implement `Read`:",188]],"useCount":26130},{"word":"Float","context":[["let neg_inf: f32 = Float::neg_infinity();",316],["/// use std::num::Float;",783],["use std::num::Float;",427],["use num::Float;",396],["let nan: f64 = Float::nan();",348],["let inf: f64 = Float::infinity();",331],["let neg_inf: f64 = Float::neg_infinity();",331],["let nan: f32 = Float::nan();",318],["let inf: f32 = Float::infinity();",316],["where T: Float,",269]],"useCount":14902},{"word":"FnMut","context":[["F: FnMut(&mut Parser) -> PResult<T>,",133],["where F: FnMut(&T) -> bool {",120],["F: FnMut(&mut Parser) -> T,",135],["where F: FnMut(&Atom)",135],["push: &mut FnMut(Annotatable))",144],["P: FnMut(&T) -> bool,",144],["where P: FnMut(&Self::Item) -> bool;",228],["//         P: FnMut(&T) -> bool,",282],["fn mutate_fragments(&mut self, mutator: &mut FnMut(&mut Fragment)) {",459],["F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,",847]],"useCount":13452},{"word":"FnOnce","context":[["F: FnOnce(&mut Decoder<'doc>) -> DecodeResult<T>,",299],["F: FnOnce(&mut Encoder<'a>) -> EncodeResult<()>,",108],["F: FnOnce(P<Item>),",125],["F: FnOnce(&mut Resolver),",146],["F: FnOnce(&mut Encoder<'a, W>) -> EncodeResult,",177],["where F: FnOnce(&mut Self) -> Result<T, Self::Error>;",217],["where F: FnOnce(&mut Self) -> Result<(), Self::Error>;",323],["F: FnOnce(&mut Decoder) -> DecodeResult<T>,",387],["F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,",430],["F: FnOnce(&mut Encoder<'a>) -> EncodeResult,",699]],"useCount":11585},{"word":"Foo","context":[["/// struct Foo;",593],["impl Foo for Bar {",286],["* struct Foo;",286],["impl Drop for Foo {",312],["enum Foo {",427],["///     type Output = Foo;",435],["impl Foo {",640],["trait Foo {",826],["struct Foo;",1121],["struct Foo {",1140]],"useCount":34598},{"word":"For","context":[["/// For more information on formatters, see [the module-level documentation][module].",135],["/// For communicating load url messages to the constellation",137],["/// For more information, see `TcpStream::set_timeout`",141],["if self.eat_keyword(keywords::For) {",164],["// For the rest of the cases, auto values for margin are set to 0",176],["// For synchronous requests, this should not fire any events, and just store data",184],["For example:",188],["// For any methods that use a default implementation, add them to",191],["// For replaced block flow, the rest of the constraint solving will",227],["/// For providing instructions to an optional devtools server.",224]],"useCount":28428},{"word":"Form","context":[["/// Returns an iterator over the string in Unicode Normalization Form KD",48],["/// Form a slice from a C string. Unsafe because the caller must ensure the",39],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["* This Source Code Form is subject to the terms of the Mozilla Public",53],["/// equality between arbitrary types. Processing an instance of Form",53],["* Form a slice from a pointer and length (as a number of units,",76],["// This Source Code Form is subject to the terms of the Mozilla Public",794],["/// An Iterator over the string in Unicode Normalization Form C",48],["/// An Iterator over the string in Unicode Normalization Form KC",48],["/// Returns an iterator over the string in Unicode Normalization Form D",48]],"useCount":18387},{"word":"Formatter","context":[["fn fmt(&self, f: &mut Formatter) -> fmt::Result {",606],["fn fmt(&self, f: &mut Formatter) -> Result {",1160],["fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {",662],["//                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",627],["fn fmt(&self, &mut Formatter) -> Result;",622],["fn fmt(&self, fmt: &mut Formatter) -> Result {",365],["fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {",1194],["fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",2429],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {",332]],"useCount":34811},{"word":"Generics","context":[["generics: &ast::Generics,",913],["ast_generics: &ast::Generics,",254],["generics: &ty::Generics<'tcx>,",277],["Generics {",355],["generics: &Generics,",383],["pub generics: Generics,",681],["pub struct Generics {",187],["generics: Generics,",232],["decl_generics: &ty::Generics<'tcx>,",218],["generics: &ast::Generics)",214]],"useCount":13766},{"word":"Get","context":[["* Get the next element of the iterator",392],["// FIXME(pcwalton, #2795): Get the real container size.",356],["* Get the next element in the iterator. The member rem is",392],["method: Method::Get,",337],["//! // Get an ApplicationSecret instance by some means. It contains the `client_id` and",276],["// Get the raw representation of the trait object",216],["// FIXME(#2795): Get the real container size.",185],["client_y, // TODO: Get real screen coordinates?",150],["// Get the item.",142],["// FIXME(pcwalton): Get the real container size.",125]],"useCount":13764},{"word":"H","context":[["H: hash::Hasher<Output=u64>",187],["S: HashState<Hasher=H>,",137],["(7) -> H, SH, TH,",218],["fn hash<H: hash::Hasher>(&self, state: &mut H) {",228],["fn hash<H: hash::Hasher>(&self, state: &mut H) {",228],["//                 fn hash<H: hash::Hasher>(&self, state: &mut H) {",594],["//                 fn hash<H: hash::Hasher>(&self, state: &mut H) {",594],["//         (7) -> H",600],["fn hash<H: Hasher>(&self, state: &mut H) {",761],["fn hash<H: Hasher>(&self, state: &mut H) {",761]],"useCount":14554},{"word":"HTMLElement","context":[["use dom::htmlelement::HTMLElement;",1723],["use dom::htmlelement::{HTMLElement, HTMLElementTypeId};",784],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLAnchorElement)) |",262],["htmlelement: HTMLElement,",1337],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLButtonElement)) |",296],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLInputElement)) |",339],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLSelectElement)) |",378],["Some(NodeTypeId::Element(ElementTypeId::HTMLElement(",628],["Some(self.upcast::<HTMLElement>() as &VirtualMethods)",646],["htmlelement: HTMLElement",651]],"useCount":16082},{"word":"Hash","context":[["use std::hash::Hash;",877],["#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]",2797],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]",2062],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]",640],["//             impl<T: Hash> Hash for [T; $N] {",594],["//             impl<T: Hash> Hash for [T; $N] {",594],["//                     Hash::hash(&self[..], state)",594],["use std::hash::{Hash, Hasher};",580],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357]],"useCount":34664},{"word":"HashMap","context":[["use std::hashmap::HashMap;",551],["use std::collections::HashMap;",7983],["/// use std::collections::HashMap;",1197],["let mut m = HashMap::new();",1157],["use std::collections::{HashMap, HashSet};",877],["let mut map = HashMap::new();",724],["/// let mut map = HashMap::new();",559],["use collections::HashMap;",424],["let mut m = HashMap::with_capacity(4);",283],["use std::collections::hash_map::HashMap;",223]],"useCount":42692},{"word":"HashSet","context":[["use std::collections::{HashMap, HashSet};",877],["use std::collections::{HashSet, HashMap};",185],["tags: HashSet::new(),",206],["/// let mut set = HashSet::new();",225],["let mut set = HashSet::new();",257],["region_names: &HashSet<ast::Name>)",286],["use std::collections::HashSet;",2094],["let mut b = HashSet::new();",340],["let mut a = HashSet::new();",420],["/// use std::collections::HashSet;",1148]],"useCount":18874},{"word":"HeapSizeOf","context":[["#[cfg_attr(feature = \"servo\", derive(HeapSizeOf))]",2633],["#[derive(JSTraceable, HeapSizeOf)]",1630],["#[derive(HeapSizeOf)]",990],["#[derive(Clone, HeapSizeOf, Deserialize, Serialize)]",524],["#[derive(Debug, Clone, PartialEq, HeapSizeOf)]",430],["use util::mem::HeapSizeOf;",377],["#[derive(Clone, PartialEq, Copy, Debug, HeapSizeOf)]",352],["#[derive(Clone, Deserialize, Serialize, HeapSizeOf)]",343],["#[derive(Copy, Clone, HeapSizeOf)]",327],["#[derive(Clone, PartialEq, Debug, HeapSizeOf)]",310]],"useCount":16898},{"word":"I","context":[["fn next(&mut self) -> Option<<I as Iterator>::Item> {",149],["I: Iterator,",169],["iter: I,",829],["//         (8) -> I",480],["type Item = I::Item;",419],["fn next(&mut self) -> Option<I::Item> {",292],["type Item = <I as Iterator>::Item;",229],["(8) -> I, SI, TI,",212],["where I: Iterator,",204],["where I: Iterator<Item=Fragment> {",201]],"useCount":45293},{"word":"ID","context":[["Some(r##\"Project ID for this request.\"##),",395],["/// Returns the type ID of this node.",197],["/// default method or an implementation of a trait method), return the ID of",168],["Some(r##\"The ID of the enterprise.\"##),",146],["Some(r##\"The GTM Account ID.\"##),",133],["Some(r##\"The ID of the managing account.\"##),",131],["pipeline ID not associated with this script task. This is a bug.\");",127],["/// The ID of the pipeline that we belong to.",117],["Some(r##\"The GTM Container ID.\"##),",109],["// Look up a field ID, whether or not it's local",112]],"useCount":12998},{"word":"Ident","context":[["pub ident: Ident,",509],["token::Ident(i, _) => {",121],["self_ty: Ident,",145],["id: ast::Ident,",235],["ident: Ident,",269],["pub name: Ident,",272],["type_ident: Ident,",698],["name: Ident,",748],["ident: ast::Ident,",938],["name: ast::Ident,",277]],"useCount":23230},{"word":"If","context":[["// If field is not initialized, it is initialized with default value first.",1368],["// If only one is Auto, solve for it",352],["//! If such a method also supports a [Response Result](trait.ResponseResult.html), it will return that by default.",276],["// If this is an iframe, send a mozbrowser location change event.",204],["// If the currently focused pipeline is the one being changed (or a child",198],["/// If inline-size is computed as 'auto', the used value is the 'shrink-to-fit' inline-size.",170],["// If there is already a pending page (self.pending_frames), it will not be overridden;",196],["// If the target is an iframe, forward the event to the child document.",174],["// NB: If you change this, you'll probably want to change the corresponding",176],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276]],"useCount":80854},{"word":"In","context":[["// TODO(gw): In the future we could probably batch other types of reflows",109],["// In order to avoid endianess trouble all of the following test values consist of a single",96],["// never be painted. In this case, don't query the layout",97],["// In this case, it doesn't exist in the frame tree, but the pipeline",97],["// compositor. In the future it'll need to be smarter.",99],["/// In other words, remove all elements `e` such that `f(&e)` returns false.",102],["// In main",143],["//         /// in the type. In such a case, this function returns `MIN`",256],["//         /// value that is too large to represent in the type. In such",256],["//         /// minimal value). In such a case, this function returns `0`.",256]],"useCount":22273},{"word":"IoError","context":[["IoError {",314],["}).map_err(IoError::from_rtio_error);",132],["Err(IoError {",298],["IoError(String, io::Error),",268],["DoitError::IoError(path, err) => {",268],["IoError(io::Error),",262],["return Err(IoError {",223],["use std::io::Error as IoError;",196],["use std::io::IoError;",142],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816]],"useCount":13028},{"word":"IoResult","context":[["fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {",526],["fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {",170],["attrs: &[ast::Attribute]) -> IoResult<()> {",185],["use std::io::IoResult;",189],["fn flush(&mut self) -> IoResult<()> {",209],["-> IoResult<()> {",393],["fn write(&mut self, buf: &[u8]) -> IoResult<()> {",443],["use io::IoResult;",133],["-> IoResult<()>",132],["fn seek(&mut self, pos: i64, style: SeekStyle) -> IoResult<()> {",156]],"useCount":22346},{"word":"IpcSender","context":[["renderer: IpcSender<CanvasMsg>,",179],["constellation_chan: IpcSender<ConstellationMsg>,",224],["use ipc_channel::ipc::{IpcReceiver, IpcSender};",206],["timer_event_chan: IpcSender<TimerEvent>,",172],["script_chan: IpcSender<ConstellationControlMsg>,",277],["scheduler_chan: IpcSender<TimerEventRequest>,",340],["devtools_chan: Option<IpcSender<ScriptToDevtoolsControlMsg>>,",352],["use ipc_channel::ipc::{self, IpcReceiver, IpcSender};",412],["use ipc_channel::ipc::IpcSender;",605],["use ipc_channel::ipc::{self, IpcSender};",845]],"useCount":14192},{"word":"It","context":[["///   with `BlockFlow` siblings; the `InlineFlow` is block-level, but not a block container. It is",94],["// Don't edit this file!  It is auto-generated by frameworks/rs/api/gen_runtime.",252],["// is... unfortunate.  It'd be nice to not need this.",95],["// Find the pipeline that corresponds to this rectangle. It's possible that this",97],["// FIXME: It should also check whether the browser context is top-level or not",119],["/// TODO(pcwalton): Make this private. It will let us avoid borrow flag checks in some cases.",144],["/// benchmarked against those two. It is marked `#[inline(never)]` to aid profiling.",234],["// Instead of pre-determining this, we just disable the lint. It's manually tuned to not have any",276],["//! // Instantiate the authenticator. It will choose a suitable authentication flow for you,",276],["//! // Get an ApplicationSecret instance by some means. It contains the `client_id` and",276]],"useCount":23372},{"word":"Item","context":[["item: &ast::Item,",536],["fn clean(&self, cx: &DocContext) -> Item {",1011],["type Item = &'a T;",876],["type Item = Root<Node>;",645],["//                 type Item = &'a T;",627],["//                 type Item = &'a mut T;",627],["fn visit_item(&mut self, item: &ast::Item) {",573],["Item {",1543],["type Item = T;",1372],["fn next(&mut self) -> Option<Self::Item> {",1217]],"useCount":55473},{"word":"Iterator","context":[["where I: Iterator,",204],["__TOKENS: Iterator<Item=Result<(usize, Tok, usize),()>>,",206],["__TOKENS: Iterator<Item=Result<((), Tok, ()),()>>,",218],["type Item = <I as Iterator>::Item;",229],["__TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,",235],["impl<T> Iterator for IntoIter<T> {",254],["use core::iter::Iterator;",289],["/// # Iterator behavior",290],["use std::iter::Iterator;",365],["use iter::Iterator;",600]],"useCount":26535},{"word":"JS","context":[["use dom::bindings::js::{JS, LayoutJS, MutNullableHeap, Root};",141],["use dom::bindings::js::{JS, Root};",476],["document: JS<Document>,",141],["use dom::bindings::js::{JS, LayoutJS, MutNullableHeap};",158],["window: JS<Window>,",185],["use dom::bindings::js::JS;",203],["document: JS::from_ref(document),",216],["use dom::bindings::js::{JS, MutNullableHeap, Root};",374],["canvas: JS<HTMLCanvasElement>,",132],["JS {",135]],"useCount":21389},{"word":"JSContext","context":[["fn to_jsval(&self, _cx: *mut JSContext) -> JSVal {",156],["*mut JSContext,",1586],["::std::option::Option<unsafe extern \"C\" fn(cx: *mut JSContext,",828],["fn to_jsval(&self, cx: *mut JSContext, rval: MutableHandleValue) {",157],["cx: *mut JSContext,",655],["pub fn get_cx(&self) -> *mut JSContext {",356],["_cx: *mut JSContext,",262],["use js::jsapi::{JSContext, JSObject, JSRuntime};",199],["use js::jsapi::JSContext;",163],["fn to_jsval(&self, _cx: *mut JSContext, rval: MutableHandleValue) {",144]],"useCount":20443},{"word":"JSObject","context":[["-> *mut JSObject {",690],["/// Trace the `JSObject` held by `reflector`.",82],["obj: Handle<*mut JSObject>,",98],["data: *mut JSObject) -> Fallible<()> {",99],["*mut JSObject,",120],["-> *mut JSObject>;",124],["use js::jsapi::{JSContext, JSObject};",140],["use js::jsapi::{JSContext, JSObject, JSRuntime};",199],["data: Option<*mut JSObject>) {",213],["-> *mut JSObject;",1552]],"useCount":12356},{"word":"JSRef","context":[["let root: JSRef<Node> = NodeCast::from_ref(self);",144],["fn before_remove_attr(&self, attr: JSRef<Attr>) {",163],["let htmlelement: &JSRef<HTMLElement> = HTMLElementCast::from_borrowed_ref(self);",205],["fn filter(&self, elem: JSRef<Element>, _root: JSRef<Node>) -> bool {",208],["fn after_set_attr(&self, attr: JSRef<Attr>) {",208],["fn filter(&self, elem: JSRef<Element>, _root: JSRef<Node>) -> bool {",208],["let element: JSRef<Element> = ElementCast::from_ref(self);",315],["let node: JSRef<Node> = NodeCast::from_ref(*self);",430],["let node: JSRef<Node> = NodeCast::from_ref(self);",648],["use dom::bindings::js::{JSRef, Temporary};",684]],"useCount":11510},{"word":"Json","context":[["use rustc_serialize::json::Json;",425],["fn to_json(&self) -> Json {",926],["let pact = Json::from_str(r#\"",421],["use rustc_serialize::json::{Json, ToJson};",186],["Json::Object(d)",162],["Json::Object(m)",154],["fn to_json(&self) -> json::Json {",146],["let query = parse(&QueryParseContext::new(), &Json::from_str(\"",116],["Json::Object(data)",115],["fn to_json(&self) -> Json { Number(*self as f64) }",158]],"useCount":11709},{"word":"JsonTypeInfo","context":[["\"kind\" => Some((\"kind\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",1113],["\"updated\" => Some((\"updated\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",165],["\"type\" => Some((\"type\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",208],["calltype_from_str, remove_json_null_values, ComplexType, JsonType, JsonTypeInfo};",268],["\"description\" => Some((\"description\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",336],["\"etag\" => Some((\"etag\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",420],["\"self-link\" => Some((\"selfLink\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",442],["\"name\" => Some((\"name\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",591],["\"id\" => Some((\"id\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",910],["let type_info: Option<(&'static str, JsonTypeInfo)> =",2021]],"useCount":12513},{"word":"K","context":[["type Item = (K, V);",291],["key: K,",287],["type Item = (&'a K, &'a V);",243],["//         (10) -> K",240],["type Item = (&'a K, &'a mut V);",217],["(10) -> K, SK, TK,",200],["where K: Eq + Hash, S: HashState",150],["fn next(&mut self) -> Option<(K, V)> {",147],["NodeRef: Deref<Target=Node<K, V>> + DerefMut,",126],["type Item = &'a K;",122]],"useCount":41871},{"word":"Key","context":[["obj.key = try!(ObjectKeyParser::parse_xml(\"Key\", stack));",119],["if current_name == \"Key\" {",119],["Key::Space if !prevented && state == KeyState::Released => {",121],["Key::Enter if !prevented && state == KeyState::Released => {",121],["use msg::constellation_msg::{Key, KeyModifiers};",129],["ObjectKeyWriter::write_params(params, &(prefix.to_string() + \"Key\"), &obj.key);",135],["pub enum Key {",154],["use msg::constellation_msg::{Key, KeyModifiers, KeyState, LoadData};",158],["key: Key,",169],["KeyEvent(Key, KeyState, KeyModifiers),",193]],"useCount":31008},{"word":"LLVM","context":[["//             // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic",128],["//             // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)",128],["//             // pending, remove this workaround once LLVM generates better code",128],["// This alloca should be optimized away by LLVM's mem-to-reg pass in",85],["// Rust is less strict than LLVM in this regard.",85],["// Translate index expression and cast to a suitable LLVM integer.",85],["// cleanup and for better interaction with LLVM's debug info.  So, if",85],["/// `#[inline(always)]` because this is performance critical and LLVM will not inline it",86],["time(sess.time_passes(), \"LLVM passes\", (), |_|",108],["// otherwise some LLVM optimization passes don't work as expected",115]],"useCount":13238},{"word":"Length","context":[["Specified(specified::Length),",210],["Length(Au),",380],["Length(Length),",366],["Length(Length),",366],["if let Ok(value) = input.try(specified::Length::parse) {",308],["\"computed::LengthOrPercentage::Length(Au(0))\",",253],["specified::LengthOrPercentageOrAuto::Length(value)))));",241],["fn Length(&self) -> u32 {",234],["specified::Length::Absolute(Au(0))));",213],["specified::Length::parse_non_negative(input).map(SpecifiedValue::Specified)",278]],"useCount":24817},{"word":"LengthOrPercentage","context":[["use values::computed::LengthOrPercentage;",210],["vertical: LengthOrPercentage,",141],["let tx = try!(specified::LengthOrPercentage::parse(input));",143],["let ty = try!(specified::LengthOrPercentage::parse(input));",143],["pub enum LengthOrPercentage {",145],["use style::values::computed::{LengthOrPercentage, LengthOrPercentageOrAuto};",157],["pub horizontal: LengthOrPercentage,",212],["pub vertical: LengthOrPercentage,",212],["\"computed::LengthOrPercentage::Length(Au(0))\",",253],["specified::LengthOrPercentage::zero(),",256]],"useCount":14625},{"word":"LengthOrPercentageOrAuto","context":[[".unwrap_or(LengthOrPercentageOrAuto::Auto)",176],["LengthOrPercentageOrAuto::Auto => MaybeAuto::Auto,",312],["LengthOrPercentageOrAuto::Auto |",270],["specified::LengthOrPercentageOrAuto::Length(value)))));",241],["LengthOrPercentageOrAuto::Auto",239],["pub enum LengthOrPercentageOrAuto {",186],["LengthOrPercentageOrAuto::Length(length) => length,",171],["LengthOrPercentageOrAuto::Percentage(percentage) => {",167],["LengthOrPercentageOrAuto::Auto => {}",167],["use style::values::computed::LengthOrPercentageOrAuto;",240]],"useCount":15906},{"word":"M","context":[["let g = M.lock().unwrap();",104],["pub fn into_table(self) -> M {",98],["M,",108],["tm.to_local().strftime(\"%m/%d/%Y %H:%M:%S\").unwrap().to_string()",113],["'M' => {",133],["mk_msg: M,",138],["M: ModuleRef,",184],["(12) -> M, SM, TM,",188],["table: M",93],[".and_then(|pos| parse_type(s, pos, 'M', &mut *tm))",99]],"useCount":13510},{"word":"MAX","context":[["usize::MAX",153],["for stream in acceptor.incoming().take(MAX as uint) {",82],["for (i, stream) in acceptor.incoming().enumerate().take(MAX as uint) {",82],["Au(i32::MAX))",80],["assert_eq!(MAX.saturating_add(MAX), MAX);",76],["assert_eq!(MAX.saturating_add(MAX), MAX);",76],["static MAX: int = 10;",197],["if i == MAX { return }",224],["assert_eq!(MAX.saturating_add(MAX), MAX);",76],["assert_eq!((MAX-2).saturating_add(1), MAX-1);",72]],"useCount":13174},{"word":"MaybeAuto","context":[["MaybeAuto::Specified(fragment.content_inline_size())",285],["MaybeAuto::Specified(w) => w,",244],["LengthOrPercentageOrAuto::Auto => MaybeAuto::Auto,",312],["MaybeAuto::Auto => {",379],["(MaybeAuto::Auto, MaybeAuto::Auto) => {",468],["(MaybeAuto::Auto, MaybeAuto::Auto) => {",468],["-> MaybeAuto {",567],["(MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {",229],["MaybeAuto::Auto,",233],["(MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {",229]],"useCount":19638},{"word":"Method","context":[["pub struct Method {",161],["method: Method::Get,",337],["use hyper::method::Method;",952],["pub method: Method,",277],["//!     * creates [*Method Builders*](trait.MethodsBuilder.html) which in turn",276],["//! [Method Builder](trait.CallBuilder.html) before making the final `doit()` call.",276],["fn create(&self, _: Url, _: Method, _: Headers) -> Result<MockRequest, LoadError> {",242],["method: Method,",199],["load_data.method = Method::Post;",175],["ty::Method::new(",141]],"useCount":13681},{"word":"Mozilla","context":[["// This Source Code Form is subject to the terms of the Mozilla Public",794],["\"Mozilla/5.0 (X11; Linux x86_64; rv:37.0) Servo/1.0 Firefox/37.0\";",38],["\"Mozilla/5.0 (X11; Linux i686; rv:37.0) Servo/1.0 Firefox/37.0\";",38],["\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Servo/1.0 Firefox/37.0\";",40],["/// (https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals/GC/Exact_Stack_Rooting).",40],["//! by L. David Baron (Mozilla) here:",43],["\"Mozilla/5.0 (Android; Mobile; rv:37.0) Servo/1.0 Firefox/37.0\"",49],["* This Source Code Form is subject to the terms of the Mozilla Public",53],["* MozRefCountType is Mozilla's reference count type.",62],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948]],"useCount":18264},{"word":"Msg","context":[["use msg::constellation_msg::Msg as ConstellationMsg;",445],["pub enum Msg {",302],["port: Receiver<Msg>,",281],["use layout_interface::{LayoutChan, Msg};",184],["if chan.send(layout_interface::Msg::PrepareToExit(response_chan)).is_ok() {",161],["Msg::ExitNow => {",124],["Msg::ReapStyleAndLayoutData(dead_data) => {",108],["request: Msg,",108],["Msg::CollectReports(reports_chan) => {",105],["Msg::SetQuirksMode => self.handle_set_quirks_mode(possibly_locked_rw_data),",105]],"useCount":14354},{"word":"N","context":[["//             impl<'a, T> IntoIterator for &'a mut [T; $N] {",627],["//             impl<'a, T> IntoIterator for &'a [T; $N] {",627],["//             impl<T: fmt::Debug> fmt::Debug for [T; $N] {",627],["//             __impl_slice_eq2! { [A; $N], [B] }",594],["//                 fn lt(&self, other: &[T; $N]) -> bool {",594],["//             impl<T> FixedSizeArray<T> for [T; $N] {",594],["//                 fn le(&self, other: &[T; $N]) -> bool {",594],["//             // __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }",594],["//             // __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }",594],["//             impl<T:Eq> Eq for [T; $N] { }",594]],"useCount":33119},{"word":"Name","context":[["Name: *const c_char,",737],["Name: *c_char)",1216],["Name: *const c_char)",2936],["name: Name,",681],["pub name: ast::Name,",491],["pub name: Name,",368],["item_name: ast::Name)",350],["region_names: &HashSet<ast::Name>)",286],["name: ast::Name,",284],["Name: *c_char,",248]],"useCount":25647},{"word":"Node","context":[["impl Node {",436],["fn filter(&self, elem: &Element, _root: &Node) -> bool {",974],["let root = self.upcast::<Node>();",449],["EventTargetTypeId::Node(",484],["current: Option<Root<Node>>,",562],["use dom::node::Node;",573],["type Item = Root<Node>;",645],["fn next(&mut self) -> Option<Root<Node>> {",645],["let node: JSRef<Node> = NodeCast::from_ref(self);",648],["let node = self.upcast::<Node>();",1292]],"useCount":59138},{"word":"NodeId","context":[["id: NodeId,",1675],["id: ast::NodeId,",3022],["pub id: NodeId,",1459],["node_id: ast::NodeId,",860],["id: ast::NodeId) {",710],["pub id: ast::NodeId,",565],["node_id: ast::NodeId)",480],["id: ast::NodeId)",389],["item_id: ast::NodeId,",339],["expr_id: ast::NodeId,",327]],"useCount":43715},{"word":"NodeTypeId","context":[["Some(NodeTypeId::Element(ElementTypeId::HTMLElement(",628],["NodeTypeId::Element(..) => {",605],["NodeTypeId::DocumentFragment |",485],["use dom::node::{Node, NodeTypeId};",372],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLInputElement)) |",339],["NodeTypeId::DocumentType |",322],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLButtonElement)) |",296],["NodeTypeId::DocumentType => {",463],["NodeTypeId::DocumentFragment => {",380],["NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLSelectElement)) |",378]],"useCount":18632},{"word":"None","context":[["None,",18823],["None",48807],["None => {}",14929],["return None;",14440],["_ => None",11127],["None => None,",6164],["None => None,",6164],["None => {",38882],["_ => None,",4891],["None => ()",4607]],"useCount":520382},{"word":"Note","context":[["/// # Note",276],["// Note: there is actually a good case to be made that",96],["// Note: at this point, we cannot say what the best lifetime",95],["Note,",106],["/// Note that this method affects all cloned handles associated with this",108],["// Note: Assuming that the root has display 'static' (as per",115],["/// Note that this iterator should _not_ be used to mutate nodes _during_",125],["//                 // Note that the #[inline] above means that the overflow",128],["// See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs",162],["//! # Note",192]],"useCount":22200},{"word":"Number","context":[["Number(0), Number(0), Number(0), Number(0), Number(0),",396],["Number(0), Number(0), Number(0), Number(0), Number(0),",396],["Number(0), Number(0), Number(0), Number(0), Number(0),",396],["Number(0), Number(0), Number(0), Number(0), Number(0),",396],["Number(0), Number(0), Number(0), Number(0), Number(0),",396],["Number(CSSFloat),",233],["Token::Number(ref value) if value.value == 0. =>",268],["Number,",104],["fn to_json(&self) -> Json { Number(*self as float) }",108],["fn to_json(&self) -> Json { Number(*self as f64) }",158]],"useCount":11920},{"word":"O","context":[["* that element. O(1).",92],["/// This is an O(n) operation as it requires copying every element in the",124],["/// O(1)",296],["/// This operation should compute in O(1) time.",197],["/// This sort is `O(n log n)` worst-case and stable, but allocates",105],["O,",112],["(14) -> O, SO, TO,",176],["/// This does not preserve ordering, but is O(1).",121],["/// throughout the I/O and related libraries take and provide types which",116],["// vector. This operation is still O(n).",90]],"useCount":12155},{"word":"Ok","context":[["Ok(())",58731],["Ok((mut response, output_schema)) => {",4800],["return Ok(());",4418],["Ok(None)",2421],["Ok(m) => m,",1319],["/// # Ok(())",1322],["Ok(_) => {",1562],["Ok(obj)",1781],["::std::result::Result::Ok(())",2231],["Ok(mut f) => f,",4816]],"useCount":284037},{"word":"Option","context":[["fn size_hint(&self) -> (uint, Option<uint>) {",2194],["pub _gtk_reserved2: Option<unsafe extern \"C\" fn()>,",731],["fn size_hint(&self) -> (usize, Option<usize>) {",3425],["fn next(&mut self) -> Option<T> {",774],["fn super_type(&self) -> Option<&VirtualMethods> {",807],["::std::option::Option<unsafe extern \"C\" fn(cx: *mut JSContext,",828],["prefix: Option<DOMString>,",2224],["let type_info: Option<(&'static str, JsonTypeInfo)> =",2021],["fn next(&mut self) -> Option<Self::Item> {",1217],["fn next(&mut self) -> Option<A> {",963]],"useCount":287780},{"word":"Ord","context":[["impl<T: Ord> BTreeSet<T> {",95],["#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,",104],["#[derive(Eq, Ord, PartialEq, PartialOrd, Hash, Copy, Clone, Debug)]",123],["//                     Ord::cmp(&&self[..], &&other[..])",594],["//             impl<T:Ord> Ord for [T; $N] {",594],["Ord::cmp(&**self, &**other)",107],["//             impl<$($T:Ord),+> Ord for ($($T,)+) {",120],["//             impl<$($T:Ord),+> Ord for ($($T,)+) {",120],["//             impl<T:Ord> Ord for [T; $N] {",594],["impl<T: Clone + Integer + Ord>",115]],"useCount":13745},{"word":"Ordering","context":[["use std::sync::atomic::Ordering;",232],["use core::cmp::Ordering;",256],["fn partial_cmp(&self, other: &Self) -> Option<Ordering> {",277],["Ordering::Greater",353],["Ordering::Less",359],["use std::sync::atomic::{AtomicUsize, Ordering};",420],["use std::sync::atomic::{AtomicBool, Ordering};",264],["//                 fn cmp(&self, other: &[T; $N]) -> Ordering {",594],["//                 fn partial_cmp(&self, other: &[T; $N]) -> Option<Ordering> {",594],["use std::cmp::Ordering;",1392]],"useCount":28637},{"word":"Output","context":[[".help(\"Output all server communication to standard error. `tx` and `rx` are placed into the same stream.\")",268],["type Output = str;",366],["type Output = Int;",404],["///     type Output = Foo;",435],["type Output = T;",465],["//             type Output = Wrapping<$t>;",530],["type Output = $t;",532],["type Output = Self;",585],["type Output = [T];",629],["type Output;",774]],"useCount":19536},{"word":"P","context":[["use syntax::ptr::P;",1741],["use ptr::P;",1073],["stmts.push(P(Spanned {",267],["//         P: FnMut(&T) -> bool,",282],["where P: Point,",314],["-> P<ast::Ty> {",366],["pub ty: P<Ty>,",389],["ty: P<ast::Ty>,",485],["where P::Searcher: ReverseSearcher<'a>",576],["//         where P::Searcher: ReverseSearcher<'a>",704]],"useCount":80242},{"word":"Parser","context":[["pub fn parse(_context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue, ()> {",1378],["use cssparser::Parser;",453],["pub fn parse(_: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue,()> {",804],["Parser {",412],["pub fn parse(_context: &ParserContext, input: &mut Parser)",386],["impl<'a> Parser<'a> {",295],["use parse::parser::Parser;",271],["f: |&mut Parser| -> T)",229],["pub fn parse(context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue, ()> {",229],["pub fn parse(context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue,()> {",215]],"useCount":18189},{"word":"PartialEq","context":[["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395],["#[derive(Clone, PartialEq)]",1398],["#[derive(Copy, Clone, PartialEq)]",1404],["#[derive(Clone, Debug, PartialEq)]",1521],["#[derive(Clone, PartialEq, Debug)]",1523],["#[derive(PartialEq)]",1693],["#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]",2797],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357],["#[derive(Debug, PartialEq)]",1782],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]",2062]],"useCount":81812},{"word":"PartialOrd","context":[["#[deriving(Clone, PartialEq, PartialOrd, Show)]",157],["#[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]",153],["//                     PartialOrd::partial_cmp(&&self[..], &&other[..])",594],["#[derive(Clone, PartialEq, PartialOrd, Debug, Copy)]",423],["//                     PartialOrd::ge(&&self[..], &&other[..])",594],["//             impl<T:PartialOrd> PartialOrd for [T; $N] {",594],["//                     PartialOrd::gt(&&self[..], &&other[..])",594],["//             impl<T:PartialOrd> PartialOrd for [T; $N] {",594],["//                     PartialOrd::lt(&&self[..], &&other[..])",594],["//                     PartialOrd::le(&&self[..], &&other[..])",594]],"useCount":14323},{"word":"Path","context":[["use std::path::Path;",5036],["let mut p = Path::new($path);",327],["let path = Path::new($path);",1126],["path: &Path,",354],["/// use std::path::Path;",572],["path: &ast::Path,",429],["let path = ast::Path {",408],["use std::path::{Path, PathBuf};",1758],["ast::Path {",408],["pub struct Path {",335]],"useCount":67756},{"word":"PathBuf","context":[["pub fn current_exe() -> io::Result<PathBuf> {",101],["pub path: PathBuf,",99],["/// use std::path::PathBuf;",100],["odir: &Option<PathBuf>,",106],["use path::{Path, PathBuf};",118],["out_dir: &'a Option<PathBuf>,",122],["use std::path::{PathBuf, Path};",228],["path: PathBuf,",430],["use std::path::{Path, PathBuf};",1758],["use std::path::PathBuf;",1961]],"useCount":13907},{"word":"PhantomData","context":[["use std::marker::PhantomData;",2029],["pub _phantom_0: ::std::marker::PhantomData<T>,",1498],["pub _phantom0: ::std::marker::PhantomData<T>,",441],["chain: PhantomData,",283],["pub _phantom_1: ::std::marker::PhantomData<U>,",1239],["_marker: PhantomData",237],["_marker: PhantomData,",344],["phantom: PhantomData,",494],["marker: PhantomData,",605],["_: ::std::marker::PhantomData<()>,",246]],"useCount":14033},{"word":"PipelineId","context":[["pipeline_id: PipelineId,",2553],["use msg::constellation_msg::PipelineId;",681],["pipeline: PipelineId,",545],["parent_info: Option<(PipelineId, SubpageId)>,",513],["pub id: PipelineId,",345],["parent_pipeline_id: PipelineId,",317],["id: PipelineId,",1089],["pub pipeline_id: PipelineId,",285],["fn new(id: PipelineId,",258],["containing_pipeline_id: PipelineId,",235]],"useCount":28888},{"word":"Point2D","context":[["stacking_relative_flow_origin: &Point2D<Au>,",266],["use geom::point::Point2D;",410],["point: Point2D<f32>) {",226],["offset: &Point2D<Au>,",187],["use euclid::Point2D;",185],["offset: Point2D<Au>,",177],["}, Point2D {",325],["use euclid::{Point2D, Rect, Size2D};",376],["use euclid::point::Point2D;",1143],["stacking_context_position: &Point2D<Au>) {",528]],"useCount":24057},{"word":"Public","context":[["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["// This Source Code Form is subject to the terms of the Mozilla Public",794],["vis: ast::Public,",294],["visibility: Some(ast::Public),",190],["// https://www.w3.org/Bugs/Public/show_bug.cgi?id=27414",144],["Public,",137],["// https://www.w3.org/Bugs/Public/show_bug.cgi?id=27337",121],["// You should have received a copy of the CC0 Public Domain Dedication",107],["vis: ast::Visibility::Public,",101],["ast::Public => {",79]],"useCount":23633},{"word":"R","context":[["fn relate<R>(relation: &mut R,",213],["(17) -> R, SR, TR,",158],["inner: R,",163],["fn relate<R>(relation: &mut R,",213],["type R = MockRequest;",757],["where R: TypeRelation<'a,'tcx>",299],["fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }",241],["fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {",278],["fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {",278],["fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }",241]],"useCount":23587},{"word":"Rc","context":[["-> Option<Rc<Layer<CompositorData>>> {",278],["Rc::new(cmt_ {",278],["layer: Rc<Layer<CompositorData>>,",267],["module_: Rc<Module>,",394],["/// let five = Rc::new(5);",464],["/// use std::rc::Rc;",802],["use std::rc::Rc;",7351],["Ok(Rc::new(cmt_ {",220],["let x = Rc::new(5);",219],["use std::rc::{Rc, Weak};",208]],"useCount":43395},{"word":"Read","context":[["///     Ok(nread) => println!(\"Read {} bytes\", nread),",83],["fn deserialize(src: &mut Read) -> io::Result<Self> {",95],["Read,",174],["let mut read_stream = File::open_mode(filename, Open, Read);",185],["fn decode<T: Read>(&mut self, buffer: &mut T) -> Result<()> {",107],["/// [`File`][file]s implement `Read`:",188],["use std::io::{self, Read};",302],["use std::io::{self, Read, Write};",435],["use std::io::{Read, Write};",875],["use std::io::Read;",2282]],"useCount":12809},{"word":"Rect","context":[["pub bounds: Rect<Au>,",187],["bounds: &Rect<Au>,",1211],["absolute_bounds: &Rect<Au>,",737],["use euclid::rect::Rect;",713],["stacking_relative_border_box: &Rect<Au>,",710],["use geom::rect::Rect;",401],["use euclid::{Point2D, Rect, Size2D};",376],["stacking_relative_content_box: &Rect<Au>,",356],["fn compute_overflow(&self) -> Rect<Au> {",272],["-> Rect<Au> {",199]],"useCount":23525},{"word":"RefCell","context":[["value_def: RefCell::new(None),",124],["//! use std::cell::RefCell;",131],["/// let c = RefCell::new(5);",133],["RefCell::new(None)",147],["let x = RefCell::new(0);",193],["use cell::RefCell;",201],["use std::cell::{RefCell, Cell};",216],["/// use std::cell::RefCell;",262],["use std::cell::{Cell, RefCell};",1204],["use std::cell::RefCell;",3784]],"useCount":37201},{"word":"Region","context":[["b: Region)",147],["fn fold_region(&mut self, r: ty::Region) -> ty::Region {",359],["fn fold_region(&mut self, r: ty::Region) -> ty::Region {",359],["sub: Region,",328],["region: ty::Region,",289],["a: Region,",253],["loan_region: ty::Region,",235],["-> Vec<ty::Region>",201],["b_region: Region)",147],["a_region: Region,",151]],"useCount":18729},{"word":"Repr","context":[["use util::ppaux::{Repr, UserString};",223],["repr: &adt::Repr,",73],["use util::ppaux::Repr;",1385],["use util::ppaux::{Repr, ty_to_string};",109],["where T : TypeFoldable<'tcx> + Clone + HasProjectionTypes + Repr<'tcx>",99],["repr: &adt::Repr<'tcx>,",83],["r: &Repr<'tcx>,",80],["where T : TypeFoldable<'tcx> + Repr<'tcx> + HasProjectionTypes + Clone",74],["use util::ppaux::{Repr};",76],["where T : TypeFoldable<'tcx> + Repr<'tcx>",344]],"useCount":11384},{"word":"Result","context":[["fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {",1194],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["-> Result<(), DoitError> {",5447],["fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",2429],["::std::result::Result::Ok(())",2231],["pub fn parse(_context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue, ()> {",1378],["fn fmt(&self, f: &mut Formatter) -> Result {",1160],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["return ::std::result::Result::Err(::protobuf::ProtobufError::WireError(\"unexpected wire type\".to_string()));",1115]],"useCount":154802},{"word":"Return","context":[["* # Return value",361],["* #Return Value:",249],["/// # Return Values",251],["/// #### Return",168],["/// Return true if the traversal is to continue or false to stop.",292],["/// The operation to perform. Return true to continue or false to stop.",325],["/// Return the solution for the equation.",352],["* Return the iterator pointing to the last element",392],["* Return the reply",546],["/// # Return value",1235]],"useCount":18498},{"word":"Returns","context":[["* Returns the reply of the request asked by",546],["/// Returns an iterator over subslices separated by elements that match",215],["/// # Returns",879],["/// Returns None otherwise.",559],["//         /// Returns the smallest value that can be represented by this integer type.",256],["//         /// Returns the number of trailing zeros in the binary representation",256],["//         /// Returns the number of zeros in the binary representation of `self`.",256],["//         /// Returns the number of ones in the binary representation of `self`.",256],["//         /// Returns the largest value that can be represented by this integer type.",256],["//         /// Returns the number of leading zeros in the binary representation",256]],"useCount":71359},{"word":"Root","context":[["use dom::bindings::js::{Root, RootedReference};",232],["-> Root<HTMLCollection> {",252],["-> Fallible<Root<Node>> {",264],["current: Some(Root::from_ref(self)),",316],["use dom::bindings::js::Root;",1755],["fn next(&mut self) -> Option<Root<Node>> {",645],["type Item = Root<Node>;",645],["current: Option<Root<Node>>,",562],["use dom::bindings::js::{JS, Root};",476],["use dom::bindings::js::{JS, MutNullableHeap, Root};",374]],"useCount":41545},{"word":"Rust","context":[["let d = mk_lldecl(abi::Rust);",136],["abi::Rust",211],["abi::Rust,",208],["if abi != abi::Rust {",169],["// The reference count. This will only be present for Rust instances!",407],["// Extra data. This will only be present for Rust instances!",407],["// contributed by the Rust Project Developers",217],["//! Not what you are looking for ? Find all other Google APIs in their Rust [documentation index](../index.html).",276],["//! ```Rust,ignore",276],["abi: abi::Rust,",292]],"useCount":19770},{"word":"RustcDecodable","context":[["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]",640],["#[derive(RustcDecodable, Debug)]",248],["#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]",822],["#[derive(RustcDecodable)]",1264],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]",2062],["#[derive(Debug, RustcDecodable)]",365],["#[derive(RustcDecodable, RustcEncodable)]",382],["#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]",529],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]",424],["#[derive(RustcEncodable, RustcDecodable)]",278]],"useCount":12577},{"word":"RustcEncodable","context":[["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]",640],["#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]",822],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]",158],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]",2062],["#[derive(RustcEncodable)]",2108],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]",424],["#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]",529],["#[derive(RustcDecodable, RustcEncodable)]",382],["#[derive(RustcEncodable, RustcDecodable)]",278],["#[derive(Clone, RustcEncodable, RustcDecodable)]",168]],"useCount":13478},{"word":"S","context":[["fn hash(&self, state: &mut S) {",832],["fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>",706],["fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>",706],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>",706],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["fn encode(&self, s: &mut S) -> Result<(), E> {",544],["fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {",425],["fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {",425]],"useCount":35054},{"word":"See","context":[["/// See the docs in the crate root file.",352],["#[doc = \"= See also\"]",258],["// by hand. See the translator.README.txt file in the tools directory for",224],["/// See `error_reporting.rs` for more details",224],["/// = See also",639],["// See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs",162],["/// # See also",152],["// See CSS 2.1 ยง 10.8.1.",180],["// See above for why 'ptr.offset' isn't used",131],["/// A list of all the pipelines. (See the `pipeline` module for more details.)",112]],"useCount":20227},{"word":"Self","context":[["fn clone(&self) -> Self { *self }",13205],["fn clone(&self) -> Self {",918],["::protobuf::MessageStatic::descriptor_static(None::<Self>)",864],["type Output = Self;",585],["fn eq(&self, other: &Self) -> bool {",584],["fn next(&mut self) -> Option<Self::Item> {",1217],["fn default() -> Self {",1431],["fn new() -> Self {",480],["fn default() -> Self { unsafe { ::std::mem::zeroed() } }",4004],["pub fn new() -> Self {",1818]],"useCount":103175},{"word":"Send","context":[["parent_sender: Box<ScriptChan + Send>,",148],["pub fn script_chan(&self) -> Box<ScriptChan + Send> {",121],["script_chan: Box<ScriptChan + Send>,",178],["use kinds::Send;",310],["fn clone(&self) -> Box<ScriptChan + Send> {",314],["self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");",144],["// Send new document and relevant styles to layout.",124],["// Send a message and kick the OS event loop awake.",105],["pub fn new_script_pair(&self) -> (Box<ScriptChan + Send>, Box<ScriptPort + Send>) {",177],["pub fn new_script_pair(&self) -> (Box<ScriptChan + Send>, Box<ScriptPort + Send>) {",177]],"useCount":23503},{"word":"Sender","context":[["use std::sync::mpsc::{channel, Sender};",388],["use std::sync::mpsc::{channel, Receiver, Sender};",142],["use std::sync::mpsc::{Sender, Receiver};",143],["own_sender: Sender<(TrustedWorkerAddress, WorkerScriptMsg)>,",144],["use std::sync::mpsc::{Receiver, Sender};",163],["use std::sync::mpsc::{Sender, channel};",250],["use std::sync::mpsc::{Receiver, Sender, channel};",309],["use std::sync::mpsc::{channel, Sender, Receiver};",325],["devtools_chan: Option<Sender<DevtoolsControlMsg>>,",372],["use std::sync::mpsc::Sender;",775]],"useCount":12784},{"word":"Serialize","context":[["#[derive(Clone, Deserialize, Serialize, HeapSizeOf)]",343],["#[derive(Deserialize, Serialize)]",2135],["#[derive(Clone, Deserialize, Serialize)]",744],["#[derive(Clone, HeapSizeOf, Deserialize, Serialize)]",524],["#[derive(Serialize)]",472],["#[derive(Serialize, Deserialize)]",160],["#[derive(Clone, PartialEq, Debug, HeapSizeOf, Deserialize, Serialize)]",219],["#[derive(Clone, PartialEq, Eq, Copy, Hash, Debug, Deserialize, Serialize, HeapSizeOf)]",191],["#[derive(HeapSizeOf, Deserialize, Serialize)]",178],["#[derive(Clone, Deserialize, HeapSizeOf, Serialize)]",166]],"useCount":11861},{"word":"Set","context":[["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["* Set the current element in the iterator to the last element.",392],["AttributeMutation::Set(None) => true,",135],["AttributeMutation::Set(Some(_)) => {",135],["AttributeMutation::Set(_) => {",197],["if let AttributeMutation::Set(_) = mutation {",171],["/// Set absolute descendants for this flow.",166],["// Set Root as CB for any remaining absolute descendants.",115],["// Set the x-coordinate of the absolute flow wrt to its containing block.",106]],"useCount":15800},{"word":"Show","context":[["#[deriving(Show)]",930],["use std::fmt::Show;",316],["#[deriving(Clone, Show)]",347],["#[deriving(PartialEq, Show)]",368],["#[deriving(Clone, PartialEq, PartialOrd, Show)]",157],["#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]",424],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395],["#[deriving(Clone, PartialEq, Eq, Hash, Show)]",208],["#[deriving(Clone, PartialEq, Show)]",282],["#[derive(Show)]",289]],"useCount":11755},{"word":"Size2D","context":[["use euclid::Size2D;",173],["use euclid::{Point2D, Rect, Size2D};",376],["use geom::size::Size2D;",434],["let container_size = Size2D::zero();",478],["use euclid::size::Size2D;",966],["use euclid::size::{Size2D, TypedSize2D};",258],["image_size: Size2D<f64>,",196],["size: &Size2D<i32>,",190],["let container_size = Size2D::new(self.base.block_container_inline_size, Au(0));",189],["size: Size2D<i32>,",176]],"useCount":15978},{"word":"Sized","context":[["Self: Sized,",394],["where Self: Sized,",205],["use marker::Sized;",323],["fn by_ref(&mut self) -> &mut Self where Self: Sized { self }",86],["use core::marker::Sized;",102],["where Self: Sized",211],["/// bug (\"the trait `Sized` is not implemented for `self`\").",63],["Self: Sized",68],["ty::BoundSized => \"Sized\".to_string(),",74],["Self: Sized, P: FnMut(&Self::Item) -> bool,",84]],"useCount":12990},{"word":"Some","context":[["Some(false),",10266],["Some(false)),",13235],["Some(true),",10554],["(Some(r##\"out\"##),",4816],["Some(true)),",7569],["Some(r##\"o\"##),",4816],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["Some(r##\"p\"##),",5447],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["(Some(r##\"v\"##),",5447]],"useCount":650736},{"word":"Source","context":[["let Source(s) = *self;",56],["//  Source Image      Destination Canvas",57],["struct Source<'a>(&'a str);",60],["&page, &(\"\"), &Source(contents)));",54],[".. gfx_app::shade::Source::empty()",109],["let vs = gfx_app::shade::Source {",54],["use core::source::Source;",53],["* This Source Code Form is subject to the terms of the Mozilla Public",53],["// This Source Code Form is subject to the terms of the Mozilla Public",794],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948]],"useCount":20145},{"word":"Span","context":[["span: Span)",1356],["use codemap::Span;",782],["span: Span,",11174],["sp: Span,",4197],["use syntax::codemap::Span;",3090],["pub span: Span,",2315],["span: Span) {",497],["sub_span: Option<Span>,",477],["span: codemap::Span,",357],["_span: Span,",306]],"useCount":65356},{"word":"SpecificFragmentInfo","context":[["SpecificFragmentInfo::TableCell |",906],["SpecificFragmentInfo::InlineAbsoluteHypothetical(_) |",590],["SpecificFragmentInfo::Iframe(_) |",651],["SpecificFragmentInfo::Generic |",661],["SpecificFragmentInfo::Table |",912],["SpecificFragmentInfo::TableRow |",874],["SpecificFragmentInfo::GeneratedContent(_) |",670],["SpecificFragmentInfo::Image(_) |",549],["SpecificFragmentInfo::Canvas(_) |",549],["SpecificFragmentInfo::InlineBlock(_) |",558]],"useCount":26831},{"word":"SpecifiedValue","context":[["impl ToComputedValue for SpecifiedValue {",2319],["-> Result<SpecifiedValue, ()> {",608],["impl NoViewportPercentage for SpecifiedValue {}",387],["pub struct SpecifiedValue {",473],["impl ToCss for SpecifiedValue {",2223],["pub fn parse(_context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue, ()> {",1378],["impl ComputedValueAsSpecified for SpecifiedValue {}",988],["pub use self::computed_value::T as SpecifiedValue;",960],["pub fn parse(_: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue,()> {",804],["pub enum SpecifiedValue {",780]],"useCount":28984},{"word":"Standard","context":[["CallType::Standard => unreachable!()",101],["let protocol = CallType::Standard;",5346],["CallType::Standard => call.doit(),",5346],["/// # Standard section(s)",232],["// Standard",84],["/// [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)",76],["// Standard types that are scalar but vary by OS and arch.",73],["// Standard types that are opaque or common, so are not per-target.",73],["//! # The Rust Standard Library",64],["Standard,",59]],"useCount":12201},{"word":"Step","context":[["// Step 4",2018],["// Step 1.",5073],["// Step 2.",4453],["// Step 3.",3533],["// Step 1",2478],["// Step 4.",2075],["// Step 3",2065],["// Step 2",1969],["// Step 5.",1510],["// Step 6",1395]],"useCount":52821},{"word":"String","context":[["name: String,",2593],["from: String,",1038],["\"id\" => Some((\"id\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",910],["fn repr(&self, tcx: &ctxt) -> String {",864],["let mut buf = String::new();",841],["fn repr(&self, _tcx: &ctxt) -> String {",1069],["\"kind\" => Some((\"kind\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",1113],["fn repr(&self, tcx: &ctxt<'tcx>) -> String {",1481],["let mut s = String::new();",1818],["pub name: String,",2684]],"useCount":164701},{"word":"Substs","context":[["substs: &subst::Substs<'tcx>)",571],["substs: &Substs<'tcx>)",468],["-> subst::Substs<'tcx>",235],["substs: &Substs<'tcx>,",272],["substs: &mut Substs<'tcx>)",224],["param_substs: &Substs<'tcx>,",222],["-> subst::Substs<'tcx> {",189],["-> Substs<'tcx>",343],["param_substs: &'tcx Substs<'tcx>,",306],["use middle::subst::Substs;",318]],"useCount":11541},{"word":"T","context":[["type Item = &'a T;",876],["type Item = T;",1372],["type Target = T;",933],["impl ToCss for computed_value::T {",1137],["fn to_computed_value(&self, context: &Context) -> computed_value::T {",1326],["type ComputedValue = computed_value::T;",2319],["pub _phantom_0: ::std::marker::PhantomData<T>,",1498],["type T = i32;",1042],["pub use self::computed_value::T as SpecifiedValue;",960],["pub fn get_initial_value() -> computed_value::T {",2455]],"useCount":511311},{"word":"TODO","context":[["/// TODO(pcwalton): Elliptical radii.",164],["// TODO(pcwalton): Multiple transitions.",160],["client_y, // TODO: Get real screen coordinates?",150],["//TODO: if not in document, use root ancestor instead of document",149],["// TODO:",212],["// TODO: case-sensitivity depends on the document type and quirks mode",164],["// TODO: Implement anonymous table objects for missing parents",168],["// TODO: remove elaborted bounds. Blocked on rust/issues#20671",204],["// TODO: Step 2.",224],["// TODO",750]],"useCount":31767},{"word":"The","context":[["* The returned value must be freed by the caller using free().",546],["* @param c The connection",2260],["// The resulting string must be freed by calling cef_string_userfree_free().",790],["/// * num - The float value",567],["* @param e      The generic_error supplied",546],["* @param c      The connection",546],["* The parameter @p e supplied to this function must be NULL if",546],["* @param cookie The cookie",546],["//         /// The only case where such wrapping can occur is when one",512],["// The reference count. This will only be present for Rust instances!",407]],"useCount":180696},{"word":"These","context":[["// These are passed around by the code generating functions to track the",85],["/// contain a different recursive type. These cases can therefore be treated",81],["// These cases only have 1 permutation each, so we can't do anything.",96],["type variables with their final inferred types.  These final types",95],["// iframe layers are painted on top of the base layer. These iframe",87],["/// A complex clipping region. These don't as easily admit arbitrary intersection operations, so",81],["// FIXME (#5527): These should be associated constants",145],["//         // These cases only have 1 permutation each, so we can't do anything.",188],["// These three are interdependent, if you plan to put jsmanaged data",81],["//! These will always take a single argument, for which the following statements are true.",276]],"useCount":11519},{"word":"This","context":[["* This form can be used only if the request will cause",546],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584],["// This file is part of rgtk.",492],["// This method intentionally does nothing",412],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["* This form can be used only if the request will not cause",584],["// This file is part of Parity.",1469],["// This Source Code Form is subject to the terms of the Mozilla Public",794],["* This file is part of the uutils coreutils package.",625]],"useCount":164870},{"word":"Token","context":[["Token::Dimension(ref value, ref unit) if context.is_ok(value.value) =>",268],["ket: &token::Token,",400],["Token::Number(ref value) if value.value == 0. =>",268],["use cssparser::{ToCss, Token};",297],["Token::MapSep,",359],["Token::I32(2),",298],["Token::I32(1),",337],["Token::SeqEnd,",364],["tt.push(::syntax::tokenstream::TokenTree::Token(_sp,",676],["Token::SeqSep,",468]],"useCount":20312},{"word":"Ty","context":[["pub ty: P<Ty>,",389],["ty: Ty<'tcx>)",396],["pub ty: Ty<'tcx>,",449],["-> Ty<'tcx>",1149],["ty: Ty<'tcx>,",1448],["a: Ty<'tcx>,",470],["use middle::ty::{self, Ty};",1079],["t: Ty<'tcx>,",551],["-> Ty<'tcx> {",499],["ty: P<ast::Ty>,",485]],"useCount":56108},{"word":"Type","context":[["ty: Type,",187],["data_type: Type::Uuid,",362],["pub enum Type {",309],["pub type_: Type,",255],["impl Type {",181],["llvm_type: Type,",190],["use middle::trans::type_::Type;",650],["data_type: Type::String,",196],["fn clean(&self, cx: &DocContext) -> Type {",230],["use trans::type_::Type;",600]],"useCount":39385},{"word":"U","context":[["/// Replace unpaires surrogates in DOM strings with U+FFFD.",106],["U,",107],["//  if input ends with one or two U+003D EQUALS SIGN (=) characters,",114],["//  U+002F SOLIDUS (/)",114],["//  is greater than U+00FF.\"",114],["-> U {",126],["fn clean(&self, cx: &DocContext) -> U {",126],["(20) -> U, SU, TU,",140],["//  U+002B PLUS SIGN (+)",114],["pub _phantom_1: ::std::marker::PhantomData<U>,",1239]],"useCount":24535},{"word":"Url","context":[["let url = Url::parse(\"file:///\").unwrap();",195],["let url = Url::parse(\"http://mozilla.com\").unwrap();",685],["url: Url,",1623],["use url::Url;",4424],["pub url: Url,",545],["use url::{Url, UrlParser};",374],["url: Option<Url>,",335],["worker_url: Url,",265],["fn create(&self, _: Url, _: Method, _: Headers) -> Result<MockRequest, LoadError> {",242],["url: &Url,",238]],"useCount":24397},{"word":"V","context":[["type Output = V;",169],["where V: de::Visitor,",519],["fn next(&mut self) -> Option<(K, V)> {",147],["type Item = (&'a K, &'a mut V);",217],["type Item = (&'a K, &'a V);",243],["opts.optflag(\"V\", \"version\", \"output version information and exit\");",199],["V",167],["V,",152],["type Item = (K, V);",291],["where V: Visitor,",314]],"useCount":62101},{"word":"Value","context":[["Value: Bool);",228],["* #Return Value:",249],["use serde_json::Value;",168],["impl Value {",200],["pub enum Value {",184],["/// use database::Value;",183],["use value::Value;",183],["let mut object = json::value::Value::Object(Default::default());",2021],["/// let mut val = Value::Nil;",144],["fn Value(&self) -> DOMString {",150]],"useCount":21355},{"word":"ValueRef","context":[["llfndecl: ValueRef,",270],["-> ValueRef {",2144],["val: ValueRef)",382],["rhs: ValueRef,",925],["lhs: ValueRef,",955],["val: ValueRef,",1112],["Val: ValueRef,",1491],["LHS: ValueRef,",1879],["RHS: ValueRef,",1879],["-> ValueRef;",9773]],"useCount":73697},{"word":"Vec","context":[["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["{let mut v = Vec::new();",5447],["let mut result = Vec::new();",1364],["let mut v = Vec::new();",1579],[".collect::<Vec<_>>();",1412],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["use vec::Vec;",1469],["}).collect::<Vec<_>>();",1329]],"useCount":240663},{"word":"W","context":[["fn to_css<W>(&self, dest: &mut W) -> text_writer::Result where W: TextWriter {",446],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["where W: ::std::io::Write",505],["fn write_amqp_message<W>(&self, _: &mut W) -> ::std::io::Result<()>",502],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["fn write_amqp_message<W>(&self, _: &mut W) -> ::std::io::Result<()>",502],["fn to_css<W>(&self, dest: &mut W) -> text_writer::Result where W: TextWriter {",446],["fn to_css<W>(&self, dest: &mut W) -> text_writer::Result where W: TextWriter {",446],["f: |&mut Encoder<'a, W>| -> EncodeResult) -> EncodeResult {",255]],"useCount":35242},{"word":"We","context":[["/// ISize has already been calculated. We now calculate the margins just",136],["// a `&T` pointer.  We can then proceed down the normal",132],["/// We have gotten a window.close from script, which we pass on to the compositor.",131],["// We are supposed to dispatch synthetic click activation for Space and/or Return,",121],["// case, which is wrong. We should be returning an object that",118],["// We want to restore state only if the element had been changed in the first place",144],["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["// We have to use from_str until base-2 exponents",224],["// We failed to resolve the name. Report an error.",148],["/// We have received notification that the response associated with a load has completed.",116]],"useCount":37623},{"word":"When","context":[["/// When we should kick off a reflow. This happens during parsing.",108],["/// When checking a function body, the types of all arguments and so forth",95],["is treated in abstract.  When `foo()` is called, however, `T` will be",95],["// When we are shutting_down, we need to avoid performing operations",103],["/// When called on this context, the context has had its inline-size set by the parent context.",247],["/// Recursively (bottom-up) determine the flow's minimum and preferred inline-sizes. When",162],["//! Page loads follow a two-step process. When a request for a new page load is received, the",116],["//! noting when they pertain to ongoing loads (such as resizes/viewport adjustments). When the",116],["// When the source rectangle is outside the source image,",114],["//! When implementing wrapper functions, be careful that you do not touch the borrow flags, or you",108]],"useCount":12545},{"word":"Window","context":[["GlobalRef::Window(window),",325],["impl WindowMethods for Window {",251],["pub fn new(window: &Window,",250],["window: &'a Window,",231],["let window = Window {",228],["use dom::window::Window;",1067],["impl Window {",919],["where Window: WindowMethods {",193],["compositor: &IOCompositor<Window>,",188],["pub struct Window {",636]],"useCount":21774},{"word":"Write","context":[["// Write the result into the def map.",156],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["use std::io::Write;",1987],["use core::fmt::Write;",200],["use std::io::{self, Write};",977],["Write,",169],["use std::io::{Read, Write};",875],["where W: ::std::io::Write",505],["use std::io::{self, Read, Write};",435],["use std::fmt::Write;",331]],"useCount":26643},{"word":"X","context":[["'T' | 'X' => {",88],["// |U|...|U|X|T|...|T|",94],["let x = Some((X { x: () }, X { x: () }));",97],["let x = Some((X { x: () }, X { x: () }));",97],["struct X {",102],["struct X { x: (), }",113],["(23) -> X, SX, TX,",122],["let child_origin = Point2D::new(rect.X() as f32, rect.Y() as f32);",174],["X,",199],["* Delivers a request to the X server.",2064]],"useCount":15773},{"word":"_","context":[["_ => false,",9923],["_ => ()",10342],["_ => None",11127],["_ => false",12814],["_ => {}",18761],["_ => unreachable!()",9062],["_ => None,",4891],["_ => (),",3611],["Err(_) => {",3162],["_ => {",46334]],"useCount":627359},{"word":"_bitfield_1","context":[["pub _bitfield_1: u8,",155],["self._bitfield_1 |=",2413],["::std::mem::transmute(((self._bitfield_1 &",1248],["pub _bitfield_1: u32,",170],["self._bitfield_1 &= !(1usize as u8);",93],["pub _bitfield_1: u64,",92],["self._bitfield_1 &= !(2usize as u8);",91],["self._bitfield_1 &= !(2147483648usize as u32);",80],["self._bitfield_1 &= !(2147483647usize as u32);",80],["::std::mem::transmute(((self._bitfield_1 & (1usize as u8)) >>",62]],"useCount":11385},{"word":"a","context":[["panic!(\"called a CEF method on a null object\")",3537],["-> &'a Block<'a> {",1104],["* a reply to be generated. Any returned error will be",1130],["* Delivers a request to the X server.",2064],["panic!(\"called a CEF method on a null object\")",3537],["tcx: &'a ty::ctxt<'tcx>,",921],["bcx: &'a Block<'a>,",943],["-> &'a Block<'a> {",1104],["name = \"a\"",1038],["bcx: &'a Block<'a>,",943]],"useCount":1342042},{"word":"abi","context":[["abi: abi,",800],["abi: abi::Rust,",292],["use abi;",336],["#[abi = \"cdecl\"]",390],["abi: abi::Abi,",396],["abi: abi::Abi,",396],["use syntax::abi;",1051],["abi: abi,",800],["abi,",555],["use back::abi;",474]],"useCount":27600},{"word":"about","context":[["scmd = scmd.about(desc);",268],["//!         // The Error enum provides details about what exactly happened.",274],["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["let mut mcmd = SubCommand::with_name(main_command_name).about(about);",266],["let mut mcmd = SubCommand::with_name(main_command_name).about(about);",266],["for &(main_command_name, ref about, ref subcommands) in arg_data.iter() {",172],["// Don't warn about generated blocks, that'll just pollute the output.",152],["/// # Notes about the Iteration Protocol",120],["//! // Provide your own `AuthenticatorDelegate` to adjust the way it operates and get feedback about",276],["reason = \"unsure about its place in the world\")]",295]],"useCount":22479},{"word":"above","context":[["// see above",154],["/// Calculates block-size above baseline, depth below baseline, and ascent for this fragment",95],["// above.",135],["// See above for why 'ptr.offset' isn't used",131],["//                 // Note that the #[inline] above means that the overflow",128],["/// The minimum block-size above the baseline for each line, as specified by the line height",108],["// See above",95],["/// The range within the above text run that this represents.",100],["// completely positive cases tested above.",98],["//    * Redistributions in binary form must reproduce the above",224]],"useCount":11921},{"word":"absolute","context":[["// This is the containing block for all the absolute descendants.",208],["/// Information needed to compute absolute (i.e. viewport-relative) flow positions (not to be",260],["// This is now the only absolute flow in the subtree which hasn't yet",204],["/// = absolute containing block inline-size - (horizontal padding and border)",170],["/// = absolute containing block block-size - (vertical padding and border)",170],["/// Set absolute descendants for this flow.",166],["/// An inline fragment that establishes an absolute containing block for its descendants (i.e.",152],["/// their direct absolute descendants.",146],["/// Traverse all your direct absolute descendants, who will then traverse",146],["// Assign block-sizes for all flows in this absolute flow tree.",142]],"useCount":11822},{"word":"according","context":[["///   positioned as if it were a block fragment, but its children are positioned according to",94],["// copied, modified, or distributed except according to those terms.",350],["// according to those terms.",220],["// modified, or distributed except according to those terms.",195],["/// data will be updated according to future resize events, viewport changes, etc.)",116],["/// Formats the time according to the format string.",100],["// except according to those terms.",61702],["// Clip according to the values of `overflow-x` and `overflow-y`.",85],["or distributed except according to those terms.",91],["/// Returns the text decoration of this fragment, according to the style of the nearest ancestor",96]],"useCount":66430},{"word":"actual","context":[["//! The `doit()` method performs the actual communication with the server and returns the respective result.",276],["assert_eq!(actual, expected);",275],["|actual| {",631],["fcx.type_error_message(span, |actual| {",266],["actual,",338],["actual)",620],["println!(\"{:?}\", actual);",421],["\"actual\": {",416],["/// Recursively (top-down) determines the actual inline-size of child contexts and fragments.",291],["assert_eq!(expected, actual);",288]],"useCount":19723},{"word":"actually","context":[["// value whose address was taken can actually be made to live",93],["// TODO: Check the bounds to see if a clip item is actually required.",95],["// Note: there is actually a good case to be made that",96],["//         /// Such wrap-around never actually occurs mathematically;",256],["// Regression test that isaac is actually using the above vector",88],["// not actually here, but brings in line with freebsd",87],["// TODO: This should actually consult the table in that section to get the",84],["// NB: Do not use this function unless you actually plan to place the",83],["/// This will explicitly set the size of the vector, without actually",76],["// without changing capitalization, this will actually sidestep rust-http's type system",92]],"useCount":12589},{"word":"add","context":[["unsafe { h.add(); }",198],["// cannot add constraints once regions are resolved",212],["// add/subtract current digit depending on sign",114],["// For any methods that use a default implementation, add them to",191],["/// Fused multiply-add. Computes `(self * a) + b` with only one rounding",168],["e1.add(A);",127],["/// a separate multiplication operation followed by an add.",168],["\"add `#![feature(unboxed_closures)]` to \\",103],["port2.add();",100],["git::add(&repo);",124]],"useCount":18441},{"word":"addr","context":[["let addr = next_test_ip4();",1077],["let addr = next_test_ip6();",549],["let port = addr.port;",537],["each_ip(&mut |addr| {",488],["let addr = next_test_unix();",477],["let mut acceptor = TcpListener::bind(addr).listen();",443],["let ip_str = addr.ip.to_string();",388],["let document = self.addr.root();",347],["let acceptor = t!(TcpListener::bind(&addr));",295],["addr: addr,",291]],"useCount":25609},{"word":"address","context":[["address: address,",174],["address: address,",174],["let worker = address.root();",120],["Some(r##\"The user's email address. The special value me can be used to indicate the authenticated user.\"##),",97],["let next = st.address + 2;",98],["let ws = self.address.root();",99],["address: Trusted<WebSocket>,",99],["/// If the given untrusted node address represents a valid DOM node in the given runtime,",104],["params.address = address.clone();",106],["params.address = address.clone();",106]],"useCount":12309},{"word":"after","context":[["// check-tidy: no specs after this line",348],["//!    onto these objects and cause use-after-free.",108],["PatVec(ref before, ref slice, ref after) => {",109],["// I'm dispatching it after the key event so the script has a chance to cancel it",121],["ast::PatVec(ref before, slice, ref after) => {",124],["pats.extend(after.iter().map(|p| &**p));",152],["\"macro expression remains after expansion\");",161],["ast::PatVec(ref before, ref slice, ref after) => {",183],["/// platform that goes after the dot: in this case, `so`.",191],["// https://dom.spec.whatwg.org/#dom-childnode-after",199]],"useCount":29380},{"word":"align","context":[["match align {",95],["if align <= MIN_ALIGN {",140],["align: AlignLeft,",96],["align,",108],["let flags = align_to_flags(align);",121],["align: AlignUnknown,",524],["self.align(align);",215],["self.align(align);",215],["sz: uint, align: uint) -> bool;",264],["align: ValueRef,",153]],"useCount":13743},{"word":"align_of","context":[["let align = C_i32(ccx, type_of::align_of(ccx, tp_ty) as i32);",76],["assert_eq!(::std::mem::align_of::<nsStyleImageLayers_Size>() , 4usize);",60],["assert_eq!(::std::mem::align_of::<nsStyleCorners>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<nsStyleFont>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<nsStyleImageLayers_Size_Dimension>() ,",60],["assert_eq!(::std::mem::align_of::<nsStyleDisplay>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<PLDHashEntryHdr>() , 4usize);",60],["let align = mem::align_of::<T>();",76],["assert_eq!(::std::mem::align_of::<nsStyleVariables>() , 8usize);",60],["assert_eq!(::std::mem::align_of::<nsISupports>() , 8usize);",61]],"useCount":15587},{"word":"all","context":[["//                        reason = \"should ideally be implemented for all fixed-sized arrays\")]",1188],["assert!(!act.none() && !act.all());",300],["#[cfg(all(unix, not(target_os=\"android\")))]",321],["/// Data common to all flows.",324],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276],["//! Not what you are looking for ? Find all other Google APIs in their Rust [documentation index](../index.html).",276],["use encoding::all::UTF_8;",427],["#[cfg_attr(all(target_os = \"macos\", target_arch = \"x86\"),",497],["/// Fields common to all display items.",470],["//!     * a central object to maintain state and allow accessing all *Activities*",276]],"useCount":100819},{"word":"allow","context":[["#[allow(non_snake_case)]",4118],["#[allow(unrooted_must_root)]",4184],["#[allow(dead_code)]",8139],["#[allow(unsafe_code)]",11104],["#[allow(non_upper_case_globals)]",2605],["#![allow(dead_code)]",2450],["#[allow(deprecated)]",2371],["#![allow(non_camel_case_types)]",2317],["#[allow(unused_variables)]",2803],["#[allow(missing_docs)]",2231]],"useCount":83107},{"word":"already","context":[["// Non-auto margin-block-start and margin-block-end values have already been",146],["// Declarations are already stored in reverse order.",197],["/// ISize has already been calculated. We now calculate the margins just",136],["// id that sent load msg is being changed already; abort",125],["// as new_fn_ctxt did it already.",125],["// function here because the child has already translated floats past its border",120],["/// Adds a value to the set. Returns `true` if the value was not already",99],["// Step 4 (some data already copied in step 2).",103],["/// a reflow already.",111],["// If there is already a pending page (self.pending_frames), it will not be overridden;",196]],"useCount":19798},{"word":"also","context":[["// The problem is, as we are doing the computation, we will also",94],["// A size change could also mean a resolution change.",100],["/// = See also",639],["//! If such a method also supports a [Response Result](trait.ResponseResult.html), it will return that by default.",276],["//!         // You can also just use its `Debug`, `Display` or `Error` traits",274],["#[doc = \"= See also\"]",258],["/// # See also",152],["/// would also make any pointers to it invalid.",146],["// FIXME: It should also check whether the browser context is top-level or not",119],["// but also don't trigger reflows every time the viewport changes.",110]],"useCount":24906},{"word":"always","context":[["//             #[inline(always)]",1042],["//         #[inline(always)]",1280],["/// inline(always) because this is only ever called by in-order or non-in-order top-level",134],["#[inline(always)]",21706],["#![inline(always)]",396],["//     #[inline(always)]",283],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["//! These will always take a single argument, for which the following statements are true.",276],["// `.offset(j)` is always in bounds.",124],["--color WHEN             Coloring: auto, always, never",116]],"useCount":43565},{"word":"an","context":[["//         /// Converts an integer from big endian to the target's endianness.",256],["/// Leading and trailing whitespace represent an error.",267],["(&Some(an), _       ) => an,",268],["(&Some(an), _       ) => an,",268],["//! // Get an ApplicationSecret instance by some means. It contains the `client_id` and",276],["//         /// Converts a string slice in a given base to an integer.",256],["//         /// Converts an integer from little endian to the target's endianness.",256],["//         /// Leading and trailing whitespace represent an error.",256],["/// For providing instructions to an optional devtools server.",224],["/// Returns an iterator over subslices separated by elements that match",215]],"useCount":174563},{"word":"and","context":[["/// Recursively (top-down) determines the actual inline-size of child contexts and fragments.",291],["// Redistribution and use in source and binary forms, with or without",478],["//! // Values shown here are possibly random and not representative !",391],["//! ## Uploads and Downloads",276],["//! The `doit()` method performs the actual communication with the server and returns the respective result.",276],["//! // what's going on. You probably want to bring in your own `TokenStorage` to persist tokens and",276],["// Redistribution and use in source and binary forms, with or without",478],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",704],["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]",1058],["// file at the top-level directory of this distribution and at",59409]],"useCount":389545},{"word":"and_then","context":[["inline_declarations.as_ref().and_then(|declarations| {",154],[".and_then(|root_frame_id| self.frames.get(&root_frame_id))",106],[".and_then(|pos| parse_char(s, pos, ' '))",165],[".and_then(|pos| parse_char(s, pos, ':'))",165],["self.get_html_element().and_then(|root| {",189],["match parent.and_then(Root::downcast::<Element>) {",202],[".and_then(|string| string.parse().ok())",114],["let title = self.GetDocumentElement().and_then(|root| {",106],[".and_then(|d| d.decode())",214],["this.interpolate(other, time).and_then(|value| {",314]],"useCount":17891},{"word":"android","context":[["// ignore-android",140],["target_os = \"android\",",481],["#[cfg(not(target_os = \"android\"))]",528],["#[cfg(target_os=\"android\")]",602],["// ignore-android: FIXME(#10381)",770],["#[cfg(not(target_os=\"android\"))]",1158],["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]",1460],["#pragma rs java_package_name(android.renderscript.cts)",226],["#[cfg(all(unix, not(target_os=\"android\")))]",321],["#[cfg(target_os = \"android\")]",2004]],"useCount":11611},{"word":"any","context":[["any = true;",1139],["use std::any::Any;",918],["fn type_id(&self) -> ::std::any::TypeId {",795],["self as &::std::any::Any",763],["fn as_any(&self) -> &::std::any::Any {",761],["#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]",735],["#[cfg(not(any()))]",696],["* Otherwise, it stores the error if any.",546],["//         /// where `mask` removes any high-order bits of `rhs` that",512],["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]",1460]],"useCount":82489},{"word":"arch","context":[["mod arch {",296],["use types::os::arch::posix88::{uid_t};",349],["use types::os::arch::posix88::{mode_t, off_t};",406],["use types::os::arch::c95::{c_int, size_t};",336],["use types::os::arch::posix88::{dev_t, gid_t, ino_t};",273],["use types::os::arch::c95::{c_int, c_uint};",257],["use types::os::arch::c95::{c_char, c_int};",399],["pub mod arch {",587],["use types::os::arch::c95::c_int;",1333],["use types::os::arch::posix88::mode_t;",368]],"useCount":14368},{"word":"are","context":[["//         /// On little endian this is a no-op. On big endian the bytes are",512],["//             // NOTE: some less important impls are omitted to reduce code bloat",594],["#[ignore_heap_size_of = \"channels are hard\"]",921],["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]",1058],["//         /// On big endian this is a no-op. On little endian the bytes are",512],["//! // Values shown here are possibly random and not representative !",391],["//! * [PODs][wiki-pod] are handed by copy",276],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["//! Most optionals are are considered [Parts](trait.Part.html) which are identifiable by name, which will be sent to",276],["//! `doit(...)` methods, which are then named `upload(...)` and `upload_resumable(...)` respectively.",276]],"useCount":151273},{"word":"arg","context":[["assert_that(p.cargo_process(\"build\").arg(\"-v\"),",938],["for arg in args {",318],["scmd = scmd.arg(arg);",268],["arg = arg.help(desc);",268],["arg = arg.short(short_flag);",268],["arg = arg.required(required);",268],["arg = arg.required(required);",268],["assert_that(p.cargo(\"build\").arg(\"-v\"),",297],["arg = arg.short(short_flag);",268],[".arg(Arg::with_name(\"debug\")",291]],"useCount":47460},{"word":"args","context":[["let args: Vec<String> = env::args().collect();",542],["let rs = getopts(args.as_slice(), opts.as_slice());",476],["let matches = match opts.parse(&args[1..]) {",500],["let rs = getopts(args, opts);",520],["args: args,",538],["args: args,",538],["args,",1228],["let args = os::args();",883],["let args = os::args();",883],["let args: Vec<String> = env::args().collect();",542]],"useCount":63393},{"word":"argument","context":[["/// * `hint` - Hint that is used in place of the argument in the usage help,",132],["/// `load` takes an `Ordering` argument which describes the memory ordering of this operation.",104],["If the --package argument is given, then SPEC is a package id specification",112],["// \"Otherwise, the user agent must convert that argument to a",114],["//  the method's first argument contains any character whose code point",114],["//  the argument,\"",114],["/// argument until a notification is received that the fetch is complete.",117],["// If the image argument is an HTMLImageElement object that is in the broken state,",130],["/// [argument, val]",158],["//! These will always take a single argument, for which the following statements are true.",276]],"useCount":23377},{"word":"arguments","context":[["// We do this in a pretty awful way: first we typecheck any arguments",95],["/// Returns the arguments which this program was started with (normally passed",135],["which is not allowed in function arguments\"),",131],["// Push the arguments.",103],["// Supply value of arguments as a list of expressions that must be",98],["// if the wrong number of arguments were supplied",95],["/// When checking a function body, the types of all arguments and so forth",95],["// Check the arguments.",95],["// of arguments when we typecheck the functions. This isn't really the",95],["// Now untuple the rest of the arguments.",90]],"useCount":16402},{"word":"arm","context":[["for p in &arm.pats {",90],["#[cfg(target_arch = \"arm\")]",813],["for arm in arms.iter() {",405],["target_arch = \"arm\",",376],["for arm in arms {",201],["// #[cfg(any(target_arch = \"arm\", target_arch = \"x86_64\"))]",162],["match arm.guard {",151],["for pat in arm.pats.iter() {",111],["\"arm-linux-androideabi\" => {",108],["for pattern in arm.pats.iter() {",100]],"useCount":14777},{"word":"array","context":[["// array (passed in to the traversal)",111],["//     /// Converts the array to mutable slice",594],["//     /// Converts the array to immutable slice",594],["array: vec!( 1, 2, 3, 4, 5 ),",164],["let a = self.array.load(SeqCst);",144],["array",89],["// Simple wrapper around GEP that takes an array of ints and wraps them",72],["// from the start of a mallocated array.",80],["use core::array::FixedSizeArray;",75],["// If the vector contains enums, an LLVM array won't work.",73]],"useCount":12826},{"word":"as","context":[["Some(htmlelement as &VirtualMethods)",444],["ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,",908],["self as &::std::any::Any",763],["pub use self::computed_value::T as SpecifiedValue;",960],["0x00000000 as u32,",1402],["self.c_object as usize == mem::POST_DROP_USIZE {",1267],["Some(self.upcast::<HTMLElement>() as &VirtualMethods)",646],["use msg::constellation_msg::Msg as ConstellationMsg;",445],["self.c_object as usize != mem::POST_DROP_USIZE {",420],["use middle::mem_categorization as mc;",408]],"useCount":417833},{"word":"as_bytes","context":[["body: <[_]>::to_vec(\"Yay!\".as_bytes())",152],["check!(rw_stream.write(initial_msg.as_bytes()));",126],["load_data.data = Some(<[_]>::to_vec(\"Yay!\".as_bytes()));",285],["fn as_bytes(&self) -> &[u8] {",161],["self.as_bytes()",143],["pub fn as_bytes(&self) -> &[u8] {",162],["let content = <[_]>::to_vec(\"Yay!\".as_bytes());",179],["check!(f.write(\"bar\".as_bytes()));",124],["check!(rw_stream.write(message.as_bytes()));",126],["ebml_w.writer.write(s.as_bytes());",134]],"useCount":19276},{"word":"as_ptr","context":[["//     fn as_ptr(&self) -> *const T {",94],["f(c_str.as_ptr())",89],["//                 let p = self.as_ptr();",94],["(*tracer).debugPrintArg_ = name.as_ptr() as *const libc::c_void;",108],["//         let b_start = inner.as_ptr() as usize;",88],["//             data: self.as_ptr().offset(begin as isize),",88],["value.as_ptr(),",119],["args.as_ptr(),",131],["name.as_ptr(),",373],["value.as_ptr())",160]],"useCount":16304},{"word":"as_ref","context":[["let path = path.as_ref();",204],["fn as_ref(&self) -> &str {",208],["if let Some(page) = page.as_ref() {",224],["//                 fn as_ref(&self) -> &[T] {",594],[".as_ref()",812],["fn as_ref(&self) -> &OsStr {",155],["inline_declarations.as_ref().and_then(|declarations| {",154],["fn as_ref(&self) -> &[u8] {",128],["let alloc = self.alloc.as_ref().unwrap();",116],["let sender = sender.as_ref().expect(\"There is no marker sender\");",127]],"useCount":25825},{"word":"as_slice","context":[["let rs = getopts(args.as_slice(), opts.as_slice());",476],["let rs = getopts(args.as_slice(), opts.as_slice());",476],[".as_slice());",497],["//     fn as_slice(&self) -> &[T];",594],["//                 fn as_slice(&self) -> &[T] {",594],["let v = v.as_slice();",239],["let rs = getopts(long_args.as_slice(), opts.as_slice());",224],[".as_slice()",226],["match getopts(short_args.as_slice(), opts.as_slice()) {",224],["let rs = getopts(long_args.as_slice(), opts.as_slice());",224]],"useCount":63768},{"word":"assert","context":[["assert!(act.eq_vec(",972],["assert!(result.is_err());",1069],["/// assert!(abs_difference < 1e-10);",1030],["assert!(result.is_ok());",979],["assert!(err.issues.len() == 0);",5447],["assert!(jdb.can_reconstruct_refs());",900],["/// assert!(it.next().is_none());",862],["assert!(it.next().is_none());",764],["/// assert!(abs_difference <= f32::EPSILON);",704],["assert!(list.media_queries.len() == 1, css.to_owned());",670]],"useCount":215633},{"word":"assert_eq","context":[["assert_eq!(i, expected.len());",521],["assert_eq!(&r, \"\");",430],["assert_eq!(buf, b);",446],["assert_eq!(next(st), '[');",596],["assert_eq!(a, b);",568],["assert_eq!(next(st), '|');",663],["assert_eq!(it.next(), None);",792],["assert_eq!(None, none);",801],["assert_eq!(",4396],["assert_eq!(heap.len(), 5);",456]],"useCount":316979},{"word":"assert_that","context":[["assert_that(p.cargo_process(\"build\"), execs().with_status(0));",427],["assert_that(foo.cargo(\"build\"),",240],["assert_that(p.cargo_process(\"build\"),",1783],["assert_that(p.cargo(\"build\"),",1072],["assert_that(p.cargo_process(\"build\").arg(\"-v\"),",938],["assert_that(&p.bin(\"foo\"), existing_file());",781],["assert_that(p.cargo_process(\"test\"),",647],["assert_that(",348],["assert_that(p.cargo(\"build\").arg(\"-v\"),",297],["assert_that(p.cargo(\"test\"),",245]],"useCount":18901},{"word":"associated","context":[["/// The associated fragment.",124],["/// We have received notification that the response associated with a load has completed.",116],["/// The current window size associated with this pipeline.",116],["/// Common variants associated with the script messages",114],["/// Pipeline id associated with this page.",125],["// changes would be overridden by changing the subframe associated with source_id.",109],["pipeline ID not associated with this script task. This is a bug.\");",127],["/// Notifies the script that a window associated with a particular pipeline",127],["/// Note that this method affects all cloned handles associated with this",108],["// FIXME (#5527): These should be associated constants",145]],"useCount":15794},{"word":"ast","context":[["ast::PathSegment {",991],["def_id: ast::DefId,",1461],["use ast;",2280],["expr: &ast::Expr,",2816],["id: ast::NodeId,",3022],["id: ast::DUMMY_NODE_ID,",5401],["use syntax::ast;",5966],["decl: &ast::FnDecl,",1277],["cfg: ast::CrateConfig,",1057],["ident: ast::Ident,",938]],"useCount":428101},{"word":"ast_map","context":[["ast_map::NodeItem(item) => {",214],["use rustc::ast_map;",200],["ast_map,",160],["ast_map::NodeItem(ref item) => {",155],["ast_map::NodeItem(item) => match item.node {",146],["ast_map variant: {:?}\",",140],["Some(ast_map::NodeItem(it)) => match it.node {",134],["Some(ast_map::NodeItem(it)) => {",156],["Some(ast_map::NodeItem(item)) => {",420],["use syntax::ast_map;",987]],"useCount":16374},{"word":"ast_util","context":[["use syntax::ast_util::PostExpansionMethod;",129],["id: ast_util::local_def(ast_variant.node.id),",166],["let method_def_id = ast_util::local_def(id);",124],["use syntax::ast_util;",1118],["def_id: ast_util::local_def(self.id),",702],["use ast_util;",540],["use syntax::{ast, ast_util};",306],["use syntax::ast_util::local_def;",291],["let generics = ast_util::empty_generics();",144],["stability: get_stability(cx, ast_util::local_def(self.id)),",123]],"useCount":13551},{"word":"at","context":[["//! // You can configure optional parameters by calling the respective setters at will, and",274],["// file at the top-level directory of this distribution and at",59409],["//         /// wrapping around at the boundary of the type.",1280],["// file at the top-level directory of this distribution.",628],["failed to parse manifest at `[..]`",289],["let (at, mut ucmd) = testing(UTIL_NAME);",285],["//         /// other`, wrapping around at the boundary of the type.",256],["//         /// Saturating integer addition. Computes `self + other`, saturating at",256],["// file at the top-level directory of this distribution and at",59409],["//         /// at the numeric bounds instead of overflowing.",256]],"useCount":192311},{"word":"atom","context":[["&atom!(\"id\") => {",113],["&atom!(\"style\") => {",113],["elem.has_attribute(&atom!(\"href\"))",114],["if value != atom!(\"\") {",116],["match elem.get_attribute(&ns!(), &atom!(\"id\")) {",122],["node.namespace() == &ns!(svg) && node.local_name() == &atom!(\"title\")",122],["&atom!(\"src\") => {",128],["self.dispatch_response_progress_event(atom!(\"progress\"));",147],["match elem.get_attribute(&ns!(), &atom!(\"name\")) {",183],["&atom!(\"disabled\") => {",301]],"useCount":22749},{"word":"attr","context":[["self.super_type().unwrap().attribute_mutated(attr, mutation);",620],["fn attribute_mutated(&self, attr: &Attr, mutation: AttributeMutation) {",648],["let value = attr.value();",378],["match *attr {",380],["use syntax::attr;",1297],["use syntax::attr::AttrMetaMethods;",982],["for attr in attrs {",404],["match attr.local_name() {",935],["use attr;",426],["use dom::attr::Attr;",743]],"useCount":58669},{"word":"attribute","context":[["// https://xhr.spec.whatwg.org/#the-timeout-attribute",156],["#[foo] //~ ERROR unused attribute",140],["let attrs = vec!(cx.attribute(span, inline));",185],["match attribute {",204],["attribute vec2 position;",243],["// https://xhr.spec.whatwg.org/#the-responsetype-attribute",156],["/// Returns the first `base` element in the DOM that has an `href` attribute.",100],["// \"1. Let node be the value of the currentNode attribute.\"",120],["// Modifying the `style` attribute might change style.",124],["Some(ref attribute) => {",126]],"useCount":13201},{"word":"attributes","context":[["// Unused attributes happen thanks to defined, but unused structures",276],["attributes: vec![],",83],["attributes: Vec::new(),",481],["the crate attributes to enable\");",86],["pub attributes: Vec<ast::Attribute>,",92],["attributes: GLContextAttributes,",92],["use trans::attributes;",96],["/// Other parts of a node changed; attributes, text content, etc.",92],["// https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name",114],["attributes: attrs,",213]],"useCount":11412},{"word":"attrs","context":[["attrs: &[ast::Attribute],",485],["for attr in attrs {",404],["attrs: vec![],",362],["attrs: self.attrs.clean(cx),",785],["attrs: self.attrs.clean(cx),",785],["pub attrs: Vec<Attribute>,",738],["maybe_append(attrs, extra_attrs));",870],["attrs: attrs,",1384],["attrs: attrs,",1384],["attrs: Vec::new(),",627]],"useCount":44757},{"word":"authors","context":[["authors: project.authors.clone(),",31],["authors: project.authors.clone(),",31],["authors: Vec<String>,",42],["authors = []",11946],["pub authors: Vec<String>,",55],["* those of the authors and should not be interpreted as representing official",101],["authors: vec![",42],["* Note that this type can be specialized, but authors should beware of the risk",42],["authors = [\"carlhuda@example.com\"]",302],["authors = [\"wycats@example.com\"]",2473]],"useCount":15296},{"word":"b","context":[["fn super_type<'b>(&'b self) -> Option<&'b VirtualMethods> {",543],["//             __impl_slice_eq2! { [A; $N], &'b mut [B] }",594],["b.iter(|| {",9620],["match (a, b) {",648],["assert_eq!(a, b);",568],["match (a.next(), b.next()) {",647],["//             // __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }",594],["b",559],["//             // __impl_slice_eq2! { [A; $N], &'b [B; $N] }",594],["//             __impl_slice_eq2! { [A; $N], &'b [B] }",594]],"useCount":335270},{"word":"back","context":[["/// A channel for communicating results of async scripts back to the webdriver server",96],["// Handle a forward or back request",196],["use rustc_trans::back::link;",153],["self.back -= 1;",100],["use back::abi;",474],["while self.front < self.back {",98],["// frame's current pipeline. If neither exist, fall back to sending to",99],["pub mod back {",99],["use back::link;",198],["use back::svh::Svh;",329]],"useCount":16316},{"word":"bar","context":[[".file(\"bar/Cargo.toml\", r#\"",1174],["path = \"../bar\"",291],["path = \"bar\"",1001],["extern crate bar;",659],[".file(\"bar/src/lib.rs\", r#\"",403],["pub fn bar() {}",301],["file_stem: Some(\"bar\"),",297],["[dependencies.bar]",1424],["name = \"bar\"",2725],["file_name: Some(\"bar\"),",297]],"useCount":50984},{"word":"base","context":[["pub base: types::cef_base_t,",407],["((*self.c_object).base.add_ref.unwrap())(&mut (*self.c_object).base);",407],["((*self.c_object).base.add_ref.unwrap())(&mut (*self.c_object).base);",407],["base: base,",761],["base: base,",761],["self.base",711],["pub base: BaseDisplayItem,",697],["&self.base",468],["use ext::base::ExtCtxt;",595],["for kid in self.base.child_iter() {",545]],"useCount":95022},{"word":"baz","context":[["path = \"../baz\"",369],["name = \"baz\"",637],["[dependencies.baz]",465],[".file(\"baz/Cargo.toml\", r#\"",243],["pub fn baz() {}",214],["let baz = project(\"baz\")",179],["baz::gimme()",162],["baz.build();",179],["extern crate baz;",416],["let baz = project(\"baz\")",179]],"useCount":13626},{"word":"bcx","context":[["bcx,",687],["let tcx = bcx.tcx();",1553],["return bcx;",1755],["bcx",2370],["let ccx = bcx.ccx();",2409],["bcx: Block<'blk, 'tcx>,",816],["bcx: &'a Block<'a>,",943],["let mut bcx = bcx;",2899],["let mut bcx = bcx;",2899],["let fcx = bcx.fcx;",1272]],"useCount":149552},{"word":"be","context":[["* The returned value must be freed by the caller using free().",546],["// The resulting string must be freed by calling cef_string_userfree_free().",790],["/// type cannot be represented by this value, the `None` is returned.",536],["* This form can be used only if the request will cause",546],["* The parameter @p e supplied to this function must be NULL if",546],["// Extra data. This will only be present for Rust instances!",407],["* a reply to be generated. Any returned error will be",1130],["* a reply to be generated. Any returned error will be",1130],["//                        reason = \"should ideally be implemented for all fixed-sized arrays\")]",1188],["* This form can be used only if the request will not cause",584]],"useCount":233628},{"word":"because","context":[["/// Differs from ReadyState because we can finish loading (ready)",103],["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264],["/// inline(always) because this is only ever called by in-order or non-in-order top-level",134],["// purposefully don't use 'ptr.offset' because for",132],["// Return offset from original position because of `position: relative`.",98],["//! 2. Layout is not allowed to see anything with `LayoutJS` in the name, because it could hang",98],["// doing it once for the whole number because a",100],["// No try!() here because appending a text node",110],["// function here because the child has already translated floats past its border",120],["// Can't use `for` because we assign to",119]],"useCount":40914},{"word":"been","context":[["// FIXME(pcwalton): This has not been updated to handle the stacking context relative",134],["panic!(\"Unscanned text fragments should have been scanned by now!\")",379],["been rewritten\"),",235],["// Non-auto margin-block-start and margin-block-end values have already been",146],["// We want to restore state only if the element had been changed in the first place",144],["/// ISize has already been calculated. We now calculate the margins just",136],["/// A channel on which new animations that have been triggered by style recalculation can be",128],["/// The entry point for content to notify that a new load has been requested",128],["/// (and saved in `possibly_locked_rw_data`). If it has been, the lock will",111],["/// If the lock was just used, and has been returned since there has been",111]],"useCount":21614},{"word":"before","context":[["let mut pats: Vec<&Pat> = before.iter().map(|p| &**p).collect();",152],["match before {",116],["// mark before expansion:",140],["// This has to be handled before the ResizeMsg below,",126],["/// `request_focus` before `commit_focus_transaction` is called will receive focus.",125],["ast::PatVec(ref before, slice, ref after) => {",124],["//! [Method Builder](trait.CallBuilder.html) before making the final `doit()` call.",276],["ast::PatVec(ref before, ref slice, ref after) => {",183],["// https://dom.spec.whatwg.org/#dom-childnode-before",199],["// Connect again before writing",199]],"useCount":23905},{"word":"being","context":[["/// Whether the page being rendered has loaded completely.",103],["// This is the result of a link being clicked and a navigation completing.",102],["// will result in a new pipeline being spawned and a frame tree being added to",112],["// will result in a new pipeline being spawned and a frame tree being added to",112],["Some(r##\"Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\"##),",114],["/// being non-none",118],["// of the pipeline being changed) then update the focus pipeline to be",198],["// If the currently focused pipeline is the one being changed (or a child",198],["//                 // semantics of this negation depend on the crate we're being",128],["// id that sent load msg is being changed already; abort",125]],"useCount":18727},{"word":"bench","context":[["test foo ... bench: [..] 0 ns/iter (+/- 0)",77],["assert_that(p.cargo_process(\"bench\"),",171],["mod bench {",1006],["bench.iter(|| {",130],["#[bench]",20022],["[[bench]]",104],["pub mod bench {",80],["// #[bench]",76],["// Initial bench run to get ballpark figure.",72],["fn bench(b: &mut Bencher) {",67]],"useCount":26034},{"word":"between","context":[["/// The position of this stop. If not specified, this stop is placed halfway between the",112],["/// We categorize expressions into three kinds.  The distinction between",96],["// between cross origin iframes in the same TLD.",104],["//! The primary duty of a `Constellation` is to mediate between the",97],["/// `n` must be between 1 and 8, inclusive.",212],["/// Returns true if anonymous flow is needed between this flow and child flow.",150],["/// Remove any existing association between the provided id and any elements in this document.",132],["/// lvalue/rvalue is fundamental to the language.  The distinction between the",96],["// Remove assocation between this pipeline and its holding frame",94],["// Sever the connection between the global and the DOM tree",116]],"useCount":13657},{"word":"bindings","context":[["use dom::bindings::js::Root;",1755],["use dom::bindings::cell::DOMRefCell;",1841],["use dom::bindings::str::DOMString;",1185],["use dom::bindings::global::GlobalRef;",2346],["use dom::bindings::inheritance::Castable;",1982],["use dom::bindings::codegen::Bindings::NodeBinding::NodeMethods;",847],["use dom::bindings::refcounted::Trusted;",828],["use dom::bindings::codegen::Bindings::WindowBinding::WindowMethods;",777],["use dom::bindings::error::Fallible;",719],["use dom::bindings::js::{JSRef, Temporary};",684]],"useCount":63433},{"word":"bit","context":[["self.storage[bit / 32] |= 1 << (bit % 32)",94],["/// Returns the capacity in bits for this bit vector. Inserting any",99],["// This is a bit complex. We need to loop through pending frames and find",97],["// Protect against undefined behaviour for over-long bit shifts",106],["//             // Protect against undefined behaviour for over-long bit shifts",256],["domain: \"bit\",",248],["// the map. This is a bit unfortunate.",191],["//  sequence of octets whose nth octet is the eight-bit",114],["//             // u16 and setting bit 8, we get better code without any conditional",128],["// This is a bit slow, but this is rare so it shouldn't",173]],"useCount":12842},{"word":"bits","context":[["//         /// where `mask` removes any high-order bits of `rhs` that",512],["//         /// wrapping the truncated bits to the beginning of the resulting",256],["//         /// Shifts the bits to the left by a specified amount, `n`,",256],["//         /// wrapping the truncated bits to the end of the resulting integer.",256],["* Includes only those bits that still apply",118],["/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());",126],["//             one << ((bits - self.wrapping_sub(one).leading_zeros() as usize) % bits)",128],["//         /// Shifts the bits to the right by a specified amount, `n`,",256],["//             let bits = size_of::<Self>() * 8;",128],["//             one << ((bits - self.wrapping_sub(one).leading_zeros() as usize) % bits)",128]],"useCount":26388},{"word":"blk","context":[["#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",264],["m: &[Match<'a, 'p, 'blk, 'tcx>],",298],["-> Callee<'blk, 'tcx> {",342],["-> Result<'blk, 'tcx> {",387],["ast::ExprBlock(ref blk) => {",420],["bcx: Block<'blk, 'tcx>,",816],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["fcx.write_error(blk.id);",267],["-> Block<'blk, 'tcx> {",2367],["-> DatumBlock<'blk, 'tcx, Expr> {",1341]],"useCount":40034},{"word":"block","context":[["block: &mut BlockFlow,",1900],["// This is the containing block for all the absolute descendants.",208],["block.get_shrink_to_fit_inline_size(available_inline_size -",211],["let block_mode = block.base.writing_mode;",222],["let container_mode = block.base.block_container_writing_mode;",222],["-> block {",225],["// For replaced block flow, the rest of the constraint solving will",227],["self.border_box.size.block =",257],["let fragment = block.fragment();",411],["use block::BlockFlow;",338]],"useCount":72120},{"word":"block_flow","context":[["self.block_flow.update_late_computed_inline_position_if_necessary(inline_position)",374],["self.block_flow.update_late_computed_block_position_if_necessary(block_position)",374],["self.block_flow.base.debug_id());",397],["&mut self.block_flow",398],["&self.block_flow",470],["let block_flow = info.flow_ref.as_block();",548],["self.block_flow.generated_containing_block_size(flow)",293],["self.block_flow.compute_overflow()",326],["self.block_flow.repair_style(new_style)",356],["pub block_flow: BlockFlow,",357]],"useCount":19811},{"word":"body","context":[["body,",534],["${caller.body()}",474],["let mut body = String::new();",391],["\"body\": {",358],["body: body,",311],["body: &ast::Block,",670],["body: &ast::Block) {",249],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["body: None,",299],["body: body,",311]],"useCount":40486},{"word":"bool","context":[["fn is_initialized(&self) -> bool {",979],["fn bind_to_tree(&self, tree_in_doc: bool) {",756],["-> bool>;",763],["fn has_regions_escaping_depth(&self, depth: u32) -> bool {",835],["fn has_projection_types(&self) -> bool {",866],["fn filter(&self, elem: &Element, _root: &Node) -> bool {",974],["-> bool",1461],["pub fn is_empty(&self) -> bool {",1513],["-> bool;",2437],["-> bool {",4553]],"useCount":254587},{"word":"border","context":[["&border,",204],["border,",342],["border: &SideOffsets2D<f32>,",486],["/// = absolute containing block inline-size - (horizontal padding and border)",170],["/// = absolute containing block block-size - (vertical padding and border)",170],["DisplayItem::BorderClass(ref border) => {",167],["let border = style.logical_border_width().to_physical(style.writing_mode);",158],["'border-%s-%s' % (side, prop)",142],["// Move in from the inline-start border edge.",129],["// Our current border-box position.",126]],"useCount":25390},{"word":"border_box","context":[["self.fragment.border_box.start.b = Au(0);",209],["self.fragment.border_box.size.block = block_size;",206],["fragment.border_box.size.block);",181],["self.border_box,",174],["fragment.border_box.start.b = fragment.border_box.start.b +",171],["fragment.border_box.start.b = fragment.border_box.start.b +",171],["border_box: LogicalRect::zero(writing_mode),",245],["self.border_box.size.block =",257],["self.border_box.size.inline =",426],["block_flow.base.block_container_inline_size = self.border_box.size.inline;",170]],"useCount":11884},{"word":"borrow","context":[["let transform = self.state.borrow().transform;",218],["fn borrow(&mut self,",223],["let page = self.page.borrow();",267],["let state = self.state.borrow();",356],["let browser = self.cef_browser.borrow();",411],["use std::borrow::Borrow;",423],["use std::borrow::Cow;",1256],["at the time of borrow\");",206],[".borrow()",1421],["use std::borrow::ToOwned;",3381]],"useCount":70578},{"word":"borrow_mut","context":[[".borrow_mut()",1558],["let mut loads = self.incomplete_loads.borrow_mut();",391],["let mut handlers = self.handlers.borrow_mut();",182],["self.event_queue.borrow_mut().push(WindowEvent::Navigation(WindowNavigateMsg::Back));",170],["self.event_queue.borrow_mut().push(WindowEvent::Navigation(WindowNavigateMsg::Forward));",170],["let mut type_map = debug_context(cx).type_map.borrow_mut();",162],["let mut loader = self.loader.borrow_mut();",383],["*self.type_def.borrow_mut() = Some(TypeNsDef {",348],["let load = self.incomplete_loads.borrow_mut().remove(idx);",223],["let opt_chan = self.webdriver_script_chan.borrow_mut().take();",192]],"useCount":41278},{"word":"both","context":[["/// The only communication between siblings is that they both",91],["/// Guaranteed to be supported for both textures and renderbuffers.",122],["// both of which indicate invalid extension method names",92],["// we swap self[r] and self[w] (no effect as r==w) and then increment both",90],["/// information are both optional due to the possibility of them being whitespace.",88],["/// This is used by both replaced and non-replaced Blocks.",88],["/// calling them individually, since there is no reason not to perform both operations.",132],["/// Computes the border and padding in both inline and block directions from the containing",93],["// TODO(bjz): this should only need to be a single character index, but both values are",96],["{ty:4.1}% {region:5.1}% {both:4.1}%\",",106]],"useCount":14432},{"word":"bottom","context":[["/// Recursively (bottom-up) determine the flow's minimum and preferred inline-sizes. When",162],["vertical_align::T::bottom => {",122],["/// A bottom-up traversal, with a optional in-order pass.",125],["// T = top, B = bottom, L = left, R = right",134],["// The first byte is special, only want bottom 5 bits for width 2, 4 bits",113],["let bottom;",139],["try!(bottom.to_css(dest));",144],["for side in ['top', 'right', 'bottom', 'left'])}\">",157],["% for side in [\"top\", \"right\", \"bottom\", \"left\"]:",968],["bottom = top.clone();",194]],"useCount":14612},{"word":"bound","context":[["bound);",105],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584],["match bound {",567],["(0, upper) // can't know a lower bound, due to the predicate",314],["bound,",284],["bound: ty::BuiltinBound,",276],["match *bound {",257],["for bound in bounds {",110],["// new region names that appear inside of the fn decl are bound to",105],["for bound in bounds.iter() {",218]],"useCount":27637},{"word":"bounds","context":[["//         /// the numeric bounds instead of overflowing.",256],["for bound in bounds.iter() {",218],["ref bounds,",253],["bounds: &Rect<Au>,",1211],["bounds,",758],["bounds: bounds,",713],["bounds: bounds,",713],["&bounds);",253],["//         /// at the numeric bounds instead of overflowing.",256],["let bounds =",326]],"useCount":57510},{"word":"box","context":[["let image_info = box ImageFragmentInfo::new(node,",198],["ROUTER.add_route(action_receiver.to_opaque(), box move |message| {",311],["// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.",257],["assert!(rx.recv().unwrap() == box 10);",198],["HTMLCollection::create(window, root, box filter)",169],["state.add_display_item(DisplayItem::BorderClass(box BorderDisplayItem {",160],["/// `box-shadow`.",156],["tx.send(box 10).unwrap();",147],["debug!(\"flushing {} inline box(es) to flow A\",",142],["box receiver as Box<CompositorReceiver>)",168]],"useCount":45107},{"word":"break","context":[["None => { break }",219],["break;",26647],["break",5732],["None => break,",2151],["zzz(); // #break",1757],["_ => break",1146],["None => break",1074],["_ => break,",849],["Err(_) => break,",602],["None => { break; }",237]],"useCount":53916},{"word":"buf","context":[["fn write(&mut self, buf: &[u8]) -> IoResult<()> {",443],["assert_eq!(buf, b);",446],["fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {",526],["let mut buf = Vec::new();",659],["let mut buf = [0, 0];",661],["fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",750],["let mut buf = String::new();",841],["fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",1051],["buf",1090],["let mut buf = [0];",1770]],"useCount":85317},{"word":"buffer","context":[["buffer: buffer,",139],["let mut buffer = String::new();",383],["buffer",204],["buffer.clear();",172],["// buffer-file-coding-system: utf-8-unix",169],["buffer: Vec::new(),",162],["/// buffer.",156],["let mut buffer = Vec::new();",155],["&self.buffer",146],["buffer: buffer,",139]],"useCount":34478},{"word":"bug","context":[["pub fn bug(&self, msg: &str) -> ! {",159],["None => cx.sess.bug(",147],["self.tcx().sess.bug(",441],["self.tcx.sess.bug(",145],["self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");",144],["pipeline ID not associated with this script task. This is a bug.\");",127],["_ => ccx.sess().bug(",122],["bcx.sess().bug(",176],["cx.sess.bug(",316],["tcx.sess.bug(",213]],"useCount":16231},{"word":"build","context":[["assert_that(p.cargo(\"build\"),",1072],[".build();",1075],["p.build();",1444],["assert_that(p.cargo_process(\"build\"),",1783],["build = \"build.rs\"",2144],["build = \"build.rs\"",2144],[".build()",689],["assert_that(p.cargo_process(\"build\").arg(\"-v\"),",938],[".file(\"build.rs\", r#\"",885],["use ext::build::AstBuilder;",763]],"useCount":38348},{"word":"builder","context":[["builder.build()",152],["builder: &aster::AstBuilder,",313],["builder",173],["name = \"builder\"",199],["builder: self,",205],["let builder = AstBuilder::new();",226],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["//! [builder-pattern]: http://en.wikipedia.org/wiki/Builder_pattern",276],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276],["builder,",296]],"useCount":14320},{"word":"bump","context":[["try!(self.bump());",1957],["$p.bump();",100],["parser.bump();",159],["fn bump(&mut self) {",169],["this.bump();",232],["rdr.bump();",258],["p.bump();",396],["bump(rdr);",1271],["self.bump();",12356],["pub fn bump(&mut self) {",98]],"useCount":20484},{"word":"but","context":[["/// Window was resized, but this script was not active, so don't reflow yet",137],["// a box will be closed by print_expr, but we didn't want an overall",129],["// 15 would be great, but we will definitely get 2^k - 1, for k >= 4, or else",131],["\"this function takes {} parameter{} but {} parameter{} supplied\",",134],["// could be implemented with slices, but this avoids bounds checks",140],["\"this function's return type contains a borrowed value, but \\",144],["// This is a bit slow, but this is rare so it shouldn't",173],["/// but non-ASCII letters are unchanged.",182],["println!(\"{} bytes read, but {} expected ...\",",250],["// Unused attributes happen thanks to defined, but unused structures",276]],"useCount":69512},{"word":"by","context":[["* decreased by one. The member data points to the next",392],["/// type cannot be represented by this value, the `None` is returned.",536],["* The returned value must be freed by the caller using free().",546],["* Returns the reply of the request asked by",546],["* saved for handling by xcb_request_check().",584],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584],["/* automatically generated by rust-bindgen */",646],["// The resulting string must be freed by calling cef_string_userfree_free().",790],["Caused by:",1218],["// Param is passed by value, moved",3078]],"useCount":114177},{"word":"byte","context":[["let byte = reader.read_byte();",132],["/// `f32`s are 4 byte, IEEE754 single-precision floating point numbers.",106],["// repeated byte. This way each interpretation of the union should look the same, no matter if",112],["// Return the initial codepoint accumulator for the first byte.",113],["// return the value of $ch updated with continuation byte $byte",113],["// The first byte is special, only want bottom 5 bits for width 2, 4 bits",113],["// return the value of $ch updated with continuation byte $byte",113],["match (byte, safe_get(v, i, total)) {",132],["match byte {",193],["//         /// Reverses the byte order of the integer.",256]],"useCount":23629},{"word":"bytes","context":[["bytes: bytes,",212],["//         /// On big endian this is a no-op. On little endian the bytes are",512],["//         /// On little endian this is a no-op. On big endian the bytes are",512],["match bytes {",433],["b.bytes = src_len as u64;",333],["offset: FixedMemberOffset { bytes: 0 },",288],["let mut bytes = Vec::new();",250],["println!(\"{} bytes read, but {} expected ...\",",250],["bytes",215],["bytes: bytes,",212]],"useCount":50590},{"word":"c","context":[["let c = BigInt::from_slice(Plus, c_vec);",297],["match c {",2605],["* @param c The connection",2260],["c",615],["Some(c) => {",566],["* @param c      The connection",546],["c => {",470],["for c in s.chars() {",342],["Some(c) => c,",319],["Some(c) => c,",319]],"useCount":150478},{"word":"c_char","context":[["Name: *const c_char,",737],["-> *mut ::libc::c_char;",358],["name: *const ::std::os::raw::c_char,",381],["use types::os::arch::c95::{c_char, c_int};",399],["use libc::c_char;",470],["*const c_char,",479],["pub type c_char = i8;",574],["Name: *const c_char)",2936],["Name: *c_char)",1216],["*const ::libc::c_char,",357]],"useCount":46575},{"word":"c_int","context":[["use libc::c_int;",1038],["gap: c_int,",1177],["s1Len: c_int,",1210],["use types::os::arch::c95::c_int;",1333],["-> ::libc::c_int>,",1683],["-> ::std::os::raw::c_int;",1850],["open: c_int,",1934],["s2Len: c_int,",1934],["-> c_int;",3972],["-> ::libc::c_int;",4464]],"useCount":226150},{"word":"c_long","context":[["pub type c_long = i64;",330],["pub tv_nsec: c_long,",316],["pub st_mtime_nsec: c_long,",565],["pub st_atime_nsec: c_long,",565],["pub st_ctime_nsec: c_long,",565],["use types::os::arch::c95::{c_long, time_t};",140],["use types::os::arch::c95::c_long;",158],["time_t, suseconds_t, c_long};",224],["pub st_birthtime_nsec: c_long,",257],["pub type c_long = i32;",267]],"useCount":11626},{"word":"c_object","context":[["c_object: c_object,",816],["if !self.c_object.is_null() {",801],["self.c_object as usize != mem::POST_DROP_USIZE {",420],["if self.c_object.is_null() {",2227],["self.c_object,",1754],["self.c_object as usize == mem::POST_DROP_USIZE {",1267],["if self.c_object.is_null() ||",1267],["c_object: c_object,",816],["self.c_object))",1783],["self.c_object",814]],"useCount":19199},{"word":"c_uint","context":[["val: ::std::os::raw::c_uint) {",300],["index: c_uint,",289],["Flags: c_uint,",289],["pub ipv6mr_interface: c_uint,",308],["LineNo: c_uint,",314],["loc.line as c_uint,",378],["use libc::c_uint;",449],["pub type c_uint = u32;",537],["sequence : c_uint",546],["::libc::c_uint =",734]],"useCount":83003},{"word":"c_void","context":[["use libc::c_void;",665],["use types::common::c95::{c_void};",870],["*mut ::std::os::raw::c_void)>;",314],["*mut ::libc::c_void)",358],["*mut ::libc::c_void,",379],["-> *mut c_void;",398],["*mut ::std::os::raw::c_void,",503],["*mut ::std::os::raw::c_void)",536],["-> *mut ::libc::c_void;",962],["use types::common::c95::c_void;",598]],"useCount":36532},{"word":"cache","context":[["cache.checked_changed = self.checked_changed.get();",144],["/// A channel to the image cache thread.",136],["self.checked_changed.set(cache.checked_changed);",144],["// Check the cache.",145],["// Wait until our mock resource task has sent the image to the image cache",190],["/// The channel on which the image cache can send messages to ourself.",205],["/// The port on which we receive messages from the image cache",205],["if cache.was_mutable {",216],["let got = find_definition(src, &path, pos, &core::Session::from_path(&cache, &path, &path)).unwrap();",356],["let cache = core::FileCache::new();",589]],"useCount":23182},{"word":"call","context":[["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["#[doc = \"virtual call is too expensive.\"]",375],["call = call.max_results(arg_from_str(value.unwrap_or(\"-0\"), err, \"max-results\", \"integer\"));",827],["call = call.max_results(arg_from_str(value.unwrap_or(\"-0\"), err, \"max-results\", \"integer\"));",827],["call = call.page_token(value.unwrap_or(\"\"));",844],["call = call.add_scope(scope);",5223],["call = call.add_scope(scope);",5223],["CallType::Standard => call.doit(),",5346],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["call = call.page_token(value.unwrap_or(\"\"));",844]],"useCount":67940},{"word":"callback","context":[["callback: F) where",158],["callback: F,",133],["TimerCallback::FunctionTimerCallback(callback),",136],["TimerCallback::StringTimerCallback(callback),",136],["callback: callback,",162],["callback: callback,",162],["self.timers.set_timeout_or_interval(TimerCallback::FunctionTimerCallback(callback),",196],["self.timers.set_timeout_or_interval(TimerCallback::StringTimerCallback(callback),",196],["callback:",395],["callback)",239]],"useCount":14635},{"word":"called","context":[["/// called on this flow, all child flows have had their minimum and preferred inline-sizes set.",162],["panic!(\"called a CEF method on a null object\")",3537],["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276],["/// When called on this context, the context has had its inline-size set by the parent context.",247],["let mut called = false;",172],["called = true;",164],["/// inline(always) because this is only ever called by in-order or non-in-order top-level",134],["panic!(\"called column_intrinsic_inline_sizes() on non-table flow\")",142],["/// This is called when the call operator is used.",144],["assert!(called);",170]],"useCount":25180},{"word":"can","context":[["* This form can be used only if the request will cause",546],["//         /// The only case where such wrapping can occur is when one",512],["(0, upper) // can't know a lower bound, due to the predicate",314],["/// The pattern can be a simple `&str`, `char`, or a closure that",310],["/// The channel on which messages can be sent to the constellation.",308],["* This form can be used only if the request will not cause",584],["//! Generally speaking, you can invoke *Activities* like this:",276],["//! Methods supporting uploads can do so using up to 2 different protocols:",276],["//!     * primary types that you can apply *Activities* to",276],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276]],"useCount":101662},{"word":"cannot","context":[["/// cannot currently be expressed by the user and is used only in",86],["/// type cannot be represented by this value, the `None` is returned.",536],["// cannot add constraints once regions are resolved",212],["//         /// The absolute value of `i32::min_value()` cannot be represented as an",128],["/// cannot be borrowed while this borrow is active.",122],["// For these types, we cannot define any additional",102],["// Note: at this point, we cannot say what the best lifetime",95],["/// Fragments (`struct Fragment`) are the leaves of the layout tree. They cannot position",94],["// since we cannot nest authentic clicks (unlike synthetic click activation, where",91],["// Although we have a mutable reference to `self`, we cannot make",90]],"useCount":19138},{"word":"capacity","context":[["pub fn capacity(&self) -> usize {",361],["/// assert!(s.capacity() >= 100);",121],["/// assert!(vec.capacity() >= 11);",131],["/// assert_eq!(vec.capacity(), 10);",132],["let cap = tester.capacity();",136],["assert!(m.capacity() >= m.len());",111],["/// Panics if the new capacity overflows `usize`.",336],[".expect(\"capacity overflow\");",212],["/// assert!(s.capacity() >= 10);",206],["pub fn capacity(&self) -> uint {",174]],"useCount":17767},{"word":"cargo","context":[["use cargo::util::process;",176],["extern crate cargo;",175],["assert_that(p.cargo(\"build\").arg(\"-v\"),",297],["assert_that(p.cargo(\"build\"),",1072],["use cargo::ops;",334],[".file(\".cargo/config\", r#\"",283],[".file(\".cargo/config\", &format!(r#\"",254],["assert_that(p.cargo(\"test\"),",245],["assert_that(foo.cargo(\"build\"),",240],["assert_that(p.process(cargo_dir().join(\"cargo\")).arg(\"build\"),",236]],"useCount":12244},{"word":"case","context":[["//         /// in the type. In such a case, this function returns `MIN`",256],["//         /// a case, this function returns `MIN` itself.",256],["//         /// minimal value). In such a case, this function returns `0`.",256],["/// platform: in this case, `lib`.",233],["/// platform: in this case, `.so`.",191],["/// platform that goes after the dot: in this case, `so`.",191],["/// platform: in this case, the empty string.",310],["/// on this platform: in this case, the empty string.",268],["//         /// The only case where such wrapping can occur is when one",512],["// TODO: case-sensitivity depends on the document type and quirks mode",164]],"useCount":37684},{"word":"cases","context":[["/// as having reached their containing block. This is needed in order to handle cases like:",96],["// some cases, we insert `AutoAdjustment` annotations such as auto-deref or",96],["// These cases only have 1 permutation each, so we can't do anything.",96],["// completely positive cases tested above.",98],["/// the operating system for cases that need high security.",99],["General(ity, ref cases, _) => {",120],["// stuff. So the position is wrong in most cases.",134],["/// TODO(pcwalton): Make this private. It will let us avoid borrow flag checks in some cases.",144],["// For the rest of the cases, auto values for margin are set to 0",176],["//         // These cases only have 1 permutation each, so we can't do anything.",188]],"useCount":13622},{"word":"cast","context":[["use std::cast;",799],["use cast;",589],["use std::cast::transmute;",230],["use cast::transmute;",218],["// FIXME(bholley): Align binary representations and ditch |match| for cast + static_asserts",188],["unsafe { ::std::cast::transmute(self) }",109],["// cast to point to T in RefCell<T> directly",107],["//             // Can't take two mutable loans from one vector, so instead just cast",94],["// Translate index expression and cast to a suitable LLVM integer.",85],["// FIXME: Align binary representations and ditch |match| for cast + static_asserts",81]],"useCount":13367},{"word":"cause","context":[["* This form can be used only if the request will cause",546],["fn cause(&self) -> Option<&error::Error> {",514],["obligation.cause.span,",475],["//         /// would cause the shift to exceed the bitwidth of the type.",512],["cause(err)",218],["fn cause(&self) -> Option<&Error> {",382],["cause: ObligationCause<'tcx>,",394],["cause: euv::LoanCause,",191],["* This form can be used only if the request will not cause",584],["obligation.cause.clone(),",192]],"useCount":16248},{"word":"ccx","context":[["ccx,",407],["let ccx = bcx.ccx();",2409],["let ccx = bcx.ccx();",2409],["let tcx = ccx.tcx;",1503],["let tcx = fcx.ccx.tcx;",1085],["let tcx = ccx.tcx();",777],["ty: param(ccx, 0),",575],["let lltp_ty = type_of::type_of(ccx, tp_ty);",332],["let ccx = cx.ccx();",330],["let ccx = cx.ccx();",330]],"useCount":113241},{"word":"cdata","context":[["let cdata = cstore.get_crate_data(def_id.krate);",184],["cdata,",191],["let item = lookup_item(node_id, cdata.data());",209],["let cdata = cstore.get_crate_data(def.krate);",818],["cdata: Cmd,",582],["let item_doc = lookup_item(id, cdata.data());",469],["let data = cdata.data();",308],["cdata: &cstore::crate_metadata)",258],["dcx.cdata.cnum,",244],["|_, did| translate_def_id(cdata, did))",230]],"useCount":16841},{"word":"cell","context":[["use std::cell::Cell;",2972],["use cell::UnsafeCell;",308],["use core::cell::UnsafeCell;",313],["use cell::Cell;",313],["use std::cell::UnsafeCell;",331],["cached_size: ::std::cell::Cell::new(0),",872],["cached_size: ::std::cell::Cell<u32>,",913],["use std::cell::{Cell, RefCell};",1204],["use dom::bindings::cell::DOMRefCell;",1841],["use std::cell::RefCell;",3784]],"useCount":19577},{"word":"cfg","context":[["#[cfg(target_os = \"android\")]",2004],["#[cfg(target_arch = \"x86\")]",1929],["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]",1460],["#[cfg(target_arch = \"x86_64\")]",2155],["#[cfg(target_os = \"macos\")]",2625],["#[cfg(target_os = \"linux\")]",2666],["#[cfg(unix)]",4209],["#[cfg(not(test))]",4555],["#[cfg(windows)]",5558],["#[cfg(test)]",28031]],"useCount":146367},{"word":"ch","context":[["let ch = chars.peek().unwrap_or_else(|| {",114],["let ch = self.curr.unwrap();",115],["ch.send(());",119],["self.buffer.push_back(ch);",123],["self.composee = Some(ch);",141],["for ch in s.chars() {",153],["Some(ch) => {",202],["Some(ch)",239],["match self.ch {",260],["match ch {",998]],"useCount":21530},{"word":"chan","context":[["let (chan, port) = ipc::channel().unwrap();",206],["let ConstellationChan(ref chan) = self.constellation_chan;",669],["chan.send(event).unwrap();",600],["chan.send(());",363],["let ConstellationChan(ref chan) = window.constellation_chan();",275],["chan: chan,",243],["chan: chan,",243],["let ConstellationChan(ref chan) = self.window.constellation_chan();",240],["if let Some(chan) = opt_chan {",192],["let (chan, port) = channel();",745]],"useCount":19044},{"word":"channel","context":[["let (chan, port) = channel();",745],["use std::sync::mpsc::channel;",1005],["let (sender, receiver) = ipc::channel().unwrap();",2080],["let (tx, rx) = channel();",5539],["let (tx2, rx2) = channel();",613],["let (sender, receiver) = channel();",568],["let (tx, rx) = channel::<i32>();",486],["let (response_chan, response_port) = channel();",477],["let (tx1, rx1) = channel();",474],["let (tx, rx) = channel::<int>();",680]],"useCount":42498},{"word":"char","context":[["fn emit_char(&mut self, v: char) -> EncodeResult {",135],["use char::Char;",152],["use char;",166],["Char(char),",176],["let v: &[char] = &[];",201],["use char::CharExt;",205],["/// The pattern can be a simple `&str`, `char`, or a closure that",310],["type Item = char;",345],["fn next(&mut self) -> Option<char> {",394],["use std::char;",672]],"useCount":42786},{"word":"character","context":[["//  characters and character ranges, throw an InvalidCharacterError",114],["if gfx::text::util::is_bidi_control(character) {",128],["if util::str::char_is_whitespace(character) {",136],["db_data_type: \"character varying\".to_owned(),",144],["/// If `i` is not the index of the beginning of a valid UTF-8 character.",123],["/// db data type: character varying",148],["/// character.",164],["//  the method's first argument contains any character whose code point",114],["//  representation of the code point of the nth character of",114],["// \"If input contains a character that is not in the following list of",114]],"useCount":17414},{"word":"chars","context":[["let chars: &[char] = &['1', '2'];",117],["chars: *const ::std::os::raw::c_ushort,",118],["let mut parser = Parser::new(src.chars());",140],["let mut it = s.chars();",146],["for ch in s.chars() {",153],[".chars()",222],["match chars.next() {",285],["for c in s.chars() {",342],["chars.next();",348],["let chars: &[char] = &['*', ' '];",117]],"useCount":17149},{"word":"check","context":[["check(\"1\\",207],["self.debug_writing_mode.check(mode);",572],["check(val, summ);",518],["// check-tidy: no specs after this line",348],["check!(file.fsync());",165],["check(Zero::zero(), 0);",172],["check!(fs::remove_file(filename));",180],["check!(read_stream.read(&mut read_mem));",220],["check(One::one(), 1);",172],["check!(unlink(filename));",198]],"useCount":60251},{"word":"child","context":[["if child.inclusively_following_siblings()",200],["if child.following_siblings()",208],["if let Some(child) = child {",222],["if let Some(child) = child {",222],[".any(|child| child.is_doctype()) {",235],[".any(|child| child.is_doctype()) {",235],["Some(child) => {",245],["for child in node.children() {",261],["/// Recursively (top-down) determines the actual inline-size of child contexts and fragments.",291],["match child {",364]],"useCount":38217},{"word":"children","context":[["/// Returns true if this flow has no children.",174],["if node.children()",170],["/// Returns an iterator over this node's children.",180],["if self.children()",186],["if parent.children()",193],["// https://dom.spec.whatwg.org/#dom-parentnode-children",208],["children: vec!(),",229],["for child in node.children() {",261],["for kid in self.children() {",335],["for kid in node.children() {",832]],"useCount":24133},{"word":"class","context":[["match self.class() {",1181],["//! <pre class=\"rust\">",200],["<div class='methods'>",176],["fn class(&self) -> FlowClass {",623],["self.class(),",116],["self.get_string_attribute(&atom!(\"class\"))",89],["self.set_tokenlist_attribute(&atom!(\"class\"), class);",89],["self.set_tokenlist_attribute(&atom!(\"class\"), class);",89],["try!(write!(w, \"<div class='docblock'>{}</div>\", Markdown(s)));",93],["callback(class)",95]],"useCount":15710},{"word":"clean","context":[["name: Some(self.name.clean(cx)),",527],["fn clean(&self, cx: &DocContext) -> Item {",1011],["attrs: self.attrs.clean(cx),",785],["visibility: self.vis.clean(),",268],["use clean;",286],["generics: self.generics.clean(cx),",301],["fn clean(&self) -> Item {",361],["stability: self.stab.clean(cx),",502],["source: self.whence.clean(cx),",545],["visibility: self.vis.clean(cx),",627]],"useCount":43032},{"word":"cleanup","context":[["use middle::trans::cleanup::CleanupMethods;",184],["arg_cleanup_scope: cleanup::ScopeId,",199],["use middle::trans::cleanup;",234],["self.cleanup();",174],["else { // cleanup phase",162],["use trans::cleanup::CleanupMethods;",234],["use trans::cleanup;",318],["pub unsafe fn cleanup() {",155],["fcx.cleanup();",140],["arg_scope: cleanup::CustomScopeIndex,",133]],"useCount":11497},{"word":"clear","context":[["fn clear(&mut self) {",1367],["self.clear();",199],["line.clear();",178],["/// v.clear();",175],["buffer.clear();",172],["match style.get_box().clear {",153],["s.clear();",148],["pub fn clear(&self) {",222],["self.unknown_fields.clear();",913],["pub fn clear(&mut self) {",1038]],"useCount":14181},{"word":"client","context":[["let client = hyper::Client::new();",126],["(Some(r##\"ad-client-id\"##),",111],["let mut client = TestBlockChainClient::new();",101],["mod client;",126],["client: client,",203],["client: client,",203],["pub mod client;",211],["let client =",271],["let client = Client::new();",351],["//! [google-go-api]: https://github.com/google/google-api-go-client",276]],"useCount":12557},{"word":"clip","context":[["item.base.clip.to_clip_region(frame_builder),",160],["clip),",278],["clip);",404],["(*clip).clone()),",416],["&clip,",512],["clip: &ClippingRegion);",792],["clip: &ClippingRegion) {",792],["clip,",563],["clip: &ClippingRegion,",721],["&clip);",791]],"useCount":13500},{"word":"clone","context":[["fn clone(&self) -> Self {",918],["self.time_profiler_chan.clone(),",1183],["use clone::Clone;",1450],["let mut temp_cursor = field_cursor.clone();",2021],["field_cursor = temp_cursor.clone();",2021],["let arc2 = arc.clone();",472],["//                 fn clone(&self) -> [T; $N] {",594],["let tx2 = tx.clone();",605],["let tx = tx.clone();",767],["fn clone(&self) -> Self { *self }",13205]],"useCount":198091},{"word":"closure","context":[["/// Records the type of each closure. The def ID is the ID of the",92],["// Here, the supertraits are the transitive closure of the supertrait",92],["closure();",111],["/// A more complex pattern, using a closure:",120],["use trans::closure;",95],["/// Here, the function `foo()` and the closure passed to",95],["/// The pattern can be a simple `&str`, `char`, or a closure that",310],["use the || { ... } closure form instead\");",136],["closure)",150],["closure:",296]],"useCount":19851},{"word":"cmd","context":[["let mut cmd = Command::new(\"cmd\");",110],["let mut cmd = Command::new(\"cmd\");",110],["match cmd.status() {",111],["let resp = driver.run(cmd);",118],["let cmd = &mut RedisCommand::new();",108],["let mut cmd = Command::new(\"/system/bin/sh\");",107],["let cmd_msg = WebDriverCommandMsg::ScriptCommand(pipeline_id, cmd);",131],["commands.push(cmd);",144],["match cmd {",195],["cmd",342]],"useCount":12712},{"word":"cmp","context":[["use core::cmp;",390],["use std::cmp::{max, min};",418],["use std::cmp::min;",431],["//                 fn cmp(&self, other: &[T; $N]) -> Ordering {",594],["use std::cmp;",2558],["//                     Ord::cmp(&&self[..], &&other[..])",594],["use std::cmp::max;",609],["Some(self.cmp(other))",669],["use cmp;",723],["use std::cmp::Ordering;",1392]],"useCount":33279},{"word":"cmt","context":[["-> cmt {",288],["cmt: mc::cmt<'tcx>,",599],["match cmt.cat {",346],["cmt: cmt,",178],["-> cmt<'tcx> {",191],["base_cmt: cmt,",214],["cmt: mc::cmt<'tcx>,",599],["cmt: mc::cmt,",358],["cmt: mc::cmt,",358],["base_cmt: cmt<'tcx>,",235]],"useCount":16835},{"word":"code","context":[["DOMString::from(props.code),",152],["fn evaluate_js_on_global_with_result(self, code: &str,",160],["fn evaluate_script_on_global_with_result(self, code: &str, filename: &str,",160],["// file that was distributed with this source code.",172],["code: code,",194],["code: code,",194],["Erroneous code example:",202],["* file that was distributed with this source code.",562],["//             // NOTE: some less important impls are omitted to reduce code bloat",594],["match code {",397]],"useCount":50118},{"word":"codegen","context":[["use dom::bindings::codegen::Bindings::NodeBinding::NodeMethods;",847],["use dom::bindings::codegen::Bindings::WindowBinding::WindowMethods;",777],["use dom::bindings::codegen::Bindings::DocumentBinding::{DocumentMethods, DocumentReadyState};",300],["use dom::bindings::codegen::UnionTypes::NodeOrString;",325],["use dom::bindings::codegen::Bindings::ElementBinding::ElementMethods;",362],["use dom::bindings::codegen::Bindings::EventHandlerBinding::EventHandlerNonNull;",673],["use dom::bindings::codegen::Bindings::EventBinding::EventMethods;",654],["use dom::bindings::codegen::Bindings::DocumentBinding::DocumentMethods;",536],["// see codegen.rs for the explanation why impl Sync explicitly",423],["use dom::bindings::codegen::Bindings::AttrBinding::AttrMethods;",401]],"useCount":24269},{"word":"codemap","context":[["use codemap;",751],["span: codemap::Span,",357],["use codemap::Span;",782],["use syntax::codemap;",798],["use syntax::codemap::Span;",3090],["use syntax::codemap::{DUMMY_SP, Span};",200],["use syntax::codemap::DUMMY_SP;",206],["use syntax::codemap::span;",234],["use syntax::codemap::{Span, DUMMY_SP};",263],["codemap::DUMMY_SP);",297]],"useCount":22399},{"word":"collect","context":[["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for kvarg in opt.values_of(\"kv\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",722],[".collect::<Vec<_>>();",1412],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["}).collect::<Vec<_>>();",1329],[".collect();",7250],[".collect(),",787],[".collect()",3067],["}).collect()",4068],["}).collect();",5353]],"useCount":73080},{"word":"collections","context":[["extern crate collections;",880],["/// use std::collections::HashSet;",1148],["/// # #![feature(collections)]",968],["use std::collections::{HashMap, HashSet};",877],["/// use std::collections::VecDeque;",814],["/// use std::collections::HashMap;",1197],["use std::collections::HashMap;",7983],["use std::collections::HashSet;",2094],["#[unstable(feature = \"collections\",",1312],["use std::collections::BTreeMap;",1688]],"useCount":36119},{"word":"color","context":[["color: color,",508],["if color.is_none() {",365],["let mut color = None;",369],["pub color: Color,",476],["color: Color,",482],["color: color,",508],["color = Some(value);",363],["color,",320],["out vec4 color;",232],["use gfx_traits::color;",216]],"useCount":37195},{"word":"com","context":[["let url = Url::parse(\"http://mozilla.com\").unwrap();",685],["authors = [\"carlhuda@example.com\"]",302],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896],["authors = [\"wycats@example.com\"]",2473],["//! [google-go-api]: https://github.com/google/google-api-go-client",276],[".author(\"Sebastian Thiel <byronimo@gmail.com>\")",268],["if url.domain().unwrap() == \"mozilla.com\" {",230],["let request_url = \"http://mozilla.com\";",229],["let url = url!(\"http://mozilla.com\");",165],["assert_eq!(\"127.0.0.1\".to_owned(), *hosts_table.get(&\"foo.bar.com\".to_owned()).unwrap());",168]],"useCount":17093},{"word":"command","context":[["// lldb-command:continue",1995],["// gdb-command:continue",2477],["// gdb-command:run",854],["// gdb-command:finish",788],["// lldb-command:print x",723],["// lldb-command:run",592],["// gdb-command:print arg1",537],["// gdb-command:print arg2",521],["// lldb-command:print arg1",455],["// gdb-command:print x",866]],"useCount":30714},{"word":"common","context":[["/// Data common to all flows.",324],["use common::*;",327],["pub mod common;",356],["pub mod common {",458],["use trans::common::*;",487],["use util::common::indenter;",517],["use types::common::c95::c_void;",598],["use middle::trans::common::*;",685],["use types::common::c95::{c_void};",870],["/// Fields common to all display items.",470]],"useCount":20527},{"word":"compositor","context":[["compositor: compositor,",236],["compositor: compositor,",236],["compositor: C,",209],["compositor: &IOCompositor<Window>,",188],["compositor: &mut IOCompositor<Window>,",148],["// Drain compositor port, sometimes messages contain channels that are blocking",143],["// compositor.",139],["/// We have gotten a window.close from script, which we pass on to the compositor.",131],["compositor",129],["/// Handles loading pages, navigation, and granting access to the compositor",125]],"useCount":13917},{"word":"computed","context":[["use values::computed::LengthOrPercentage;",210],["use values::computed::Context;",1071],["use values::computed::{Context, ToComputedValue};",219],["use values::computed::ComputedValueAsSpecified;",1004],["// take inline-size to be specified as the value computed here.",306],["use values::computed::{ToComputedValue, Context};",284],["fn from_computed_value(computed: &computed_value::T) -> Self {",233],["use style::values::computed::LengthOrPercentageOrAuto;",240],["use values::computed;",253],["\"computed::LengthOrPercentage::Length(Au(0))\",",253]],"useCount":19377},{"word":"computed_value","context":[["fn to_computed_value(&self, context: &Context) -> computed_value::T {",1326],["pub mod computed_value {",3531],["impl ToCss for computed_value::T {",1137],["pub fn get_initial_value() -> computed_value::T {",2455],["type ComputedValue = computed_value::T;",2319],["pub use self::computed_value::T as SpecifiedValue;",960],["computed_value::T {",581],["computed_value::T(None)",539],["#[inline] pub fn get_initial_value() -> computed_value::T {",495],["fn to_computed_value<Cx: TContext>(&self, context: &Cx) -> computed_value::T {",383]],"useCount":35334},{"word":"config","context":[["use config::Config;",378],["config: config,",680],["config: config,",680],["pub mod config;",312],["pub fn execute(options: Options, config: &Config) -> CliResult<Option<()>> {",294],[".file(\".cargo/config\", r#\"",283],[".long(\"config-dir\")",268],[".file(\".cargo/config\", &format!(r#\"",254],["let aux_dir = aux_output_dir_name(config, testfile);",358],["setup(&|config| {",574]],"useCount":42672},{"word":"const","context":[["Name: *const c_char)",2936],["options: *const ReadOnlyCompileOptions,",340],["*const ::libc::c_char,",357],["name: *const ::std::os::raw::c_char,",381],["Name: *const c_char,",737],["*const c_char,",479],["pub const USAGE: &'static str = \"",419],["s2: *const u8,",1936],["matrix: *const ParasailMatrix)",1210],["ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,",908]],"useCount":290204},{"word":"constellation_chan","context":[["constellation_chan: constellation_chan,",559],["constellation_chan: ConstellationChan<ConstellationMsg>,",229],["let ConstellationChan(ref chan) = self.window.constellation_chan();",240],["let ConstellationChan(ref chan) = window.constellation_chan();",275],["let ConstellationChan(ref const_chan) = self.constellation_chan;",296],["if let Err(e) = self.constellation_chan.send(msg) {",302],["constellation_chan,",360],["constellation_chan: constellation_chan,",559],["let ConstellationChan(ref chan) = self.constellation_chan;",669],["constellation_chan: ConstellationChan,",899]],"useCount":11749},{"word":"consts","context":[["pub mod consts {",530],["use middle::trans::consts;",147],["mod consts {",140],["/// let x = f64::consts::PI/4.0;",105],["/// let e = f32::consts::E;",100],["use libc::consts::os::extra::{",90],["/// let e = f64::consts::E;",164],["use std::f64::consts::PI;",189],["use std::f32::consts::PI;",204],["use trans::consts;",230]],"useCount":11865},{"word":"containing","context":[["// The position was set to the containing block by the flow's parent.",159],["// containing cbox, will be closed by print-block at }",167],["/// = absolute containing block inline-size - (horizontal padding and border)",170],["/// = absolute containing block block-size - (vertical padding and border)",170],["// This is the containing block for all the absolute descendants.",208],["/// An inline fragment that establishes an absolute containing block for its descendants (i.e.",152],["// FIXME: This should be return OBJECT elements containing applets.",139],["panic!(\"Link to containing block not established; perhaps you forgot to call \\",121],["// reached its containing block.",116],["// Our inline-size was set to the inline-size of the containing block by the flow's parent.",163]],"useCount":13336},{"word":"contains","context":[["//! // Get an ApplicationSecret instance by some means. It contains the `client_id` and",276],["assert!(jdb.contains(&foo));",276],["if self.base.flags.contains(IS_ABSOLUTELY_POSITIONED) {",307],["if !self.base.flags.contains(IS_ABSOLUTELY_POSITIONED) {",168],["if !node.flags.contains(LAST_FRAGMENT_OF_ELEMENT) {",162],["if !node.flags.contains(FIRST_FRAGMENT_OF_ELEMENT) {",162],["assert!(expected.contains(x));",272],["if kid_base.flags.contains(INLINE_POSITION_IS_STATIC) {",233],["if !self.base.flags.contains(BLOCK_POSITION_IS_STATIC) {",210],["if self.base.flags.contains(IS_ABSOLUTELY_POSITIONED) &&",160]],"useCount":45471},{"word":"content","context":[["Ok(MockRequest::new(ResponseType::WithHeaders(content, headers)))",179],["/// Requests the dimensions of all the content boxes, as in the `getClientRects()` call.",128],["content",143],["content: content,",151],["content: content,",151],["\"on-behalf-of-content-owner\" => {",156],["/// Unwraps a result, yielding the content of an `Ok`.",163],["let content = <[_]>::to_vec(\"Yay!\".as_bytes());",179],["use style::computed_values::content::ContentItem;",239],["let mut content = String::new();",337]],"useCount":21886},{"word":"contents","context":[["contents are abstract to rustc.)",95],["// compute an *intermediate* contents for, e.g., Option<List> of",94],["let mut contents = Vec::new();",204],["let mut contents = String::new();",527],["contents",113],["File::open(&toml).unwrap().read_to_string(&mut contents).unwrap();",115],["/// https://html.spec.whatwg.org/multipage/#appropriate-template-contents-owner-document",168],["/// An enlarged rectangle around the page contents visible in the viewport, used",110],["// cow1 and cow2 should share the same contents",109],["contents: &ast::Expr,",97]],"useCount":14086},{"word":"context","context":[["context: context,",827],["let window = context.active_window();",400],["fn to_computed_value<Cx: TContext>(&self, context: &Cx) -> computed_value::T {",383],["use context::Context;",351],["let _unused = context;",283],["vertical: self.vertical.to_computed_value(context),",276],["horizontal: self.horizontal.to_computed_value(context),",276],["context: context,",827],["use context::LayoutContext;",853],["fn to_computed_value(&self, context: &Context) -> computed_value::T {",1326]],"useCount":75376},{"word":"continue","context":[["continue;",16011],["continue",7486],["// gdb-command:continue",2477],["// lldb-command:continue",1995],["// debugger:continue",1296],["None => continue,",881],["continue 'outer;",309],["/// The operation to perform. Return true to continue or false to stop.",325],["_ => continue",462],["_ => continue,",761]],"useCount":42527},{"word":"copy","context":[["let copy: Root<Node> = match node.type_id() {",101],["// copy last element into empty spot at bottom of buffer",102],["// You should have received a copy of the CC0 Public Domain Dedication",107],["// that case, `i == j` so we don't copy. The",124],["copy",95],["ptr::copy(",129],["// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",251],["//! * [PODs][wiki-pod] are handed by copy",276],["// take a copy of substs so that we own the vectors inside",288],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",704]],"useCount":14280},{"word":"core","context":[["//             #[unstable(feature = \"core\")]",594],["extern crate core;",3727],["#![feature(core)]",2829],["use core::prelude::*;",1948],["//         #[unstable(feature = \"core\", since = \"1.0.0\")]",1280],["use core::mem;",1116],["#[unstable(feature = \"core\",",984],["#[unstable(feature = \"core\")]",975],["use core::ptr;",866],["use core::fmt;",820]],"useCount":51206},{"word":"could","context":[["// neither I (tjc) nor nmatsakis could figure out why,",93],["/// underlying reader because that could possibly corrupt the buffer.",93],["/// TODO: In the future we could detect if the image size hasn't changed",96],["//! 2. Layout is not allowed to see anything with `LayoutJS` in the name, because it could hang",98],["// A size change could also mean a resolution change.",100],["// TODO(gw): In the future we could probably batch other types of reflows",109],["// needed. We could use display list optimization to clean this up, but it still seems",110],["// FIXME #8372: This could be a for-loop if it didn't borrow the iterator",116],["// could be implemented with slices, but this avoids bounds checks",140],["// j + 1 could be `len` (for the last `i`), but in",124]],"useCount":17686},{"word":"count","context":[["self.count += 1;",351],["let mut count = 0;",1490],[".count();",284],["count: usize,",307],["if count == 0 {",342],["//                 count: n,",376],["// The reference count. This will only be present for Rust instances!",407],["count",462],["count: 0,",472],["count += 1;",1234]],"useCount":41816},{"word":"crate","context":[["extern crate time;",2485],["extern crate log;",2476],["extern crate url;",1642],["extern crate hyper;",1584],["extern crate libc;",5198],["extern crate core;",3727],["extern crate rand;",3039],["extern crate test;",2986],["extern crate getopts;",1500],["extern crate rustc_serialize;",2884]],"useCount":149879},{"word":"create","context":[["/// let mut f = try!(File::create(\"foo.txt\"));",137],["HTMLCollection::create(&self.window, self.upcast(), filter)",539],["fn create(&self, _: Url, _: Method, _: Headers) -> Result<MockRequest, LoadError> {",242],["can't create a parameter environment \\",199],["HTMLCollection::create(window, root, box filter)",169],["fn create(&self, _: Url, _: Method) -> Result<MockRequest, LoadError> {",140],["let mut vm = factory.create(params.gas);",139],["HTMLCollection::create(window.r(), root, filter)",308],[".create(true)",184],["// wrapper so we closed the corresponding opening. so create an",129]],"useCount":25185},{"word":"created","context":[["//! entry is created, along with the Window and Document objects, and the appropriate parser",116],["\"created\" => Some((\"created\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",113],["\"created\" => Some((\"created\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",113],["/// data that will need to be present when the document and frame tree entry are created,",116],["/// Adds the created metadata nodes directly to the crate's IR.",360],["/// created nodes have their `ConstructionResult` set to.",86],["//     #[unstable(feature = \"core\", reason = \"method was just created\")]",100],["// it must surely be the root frame being created!",97],["/// * Some CSS fragments are not created at all, such as some anonymous block fragments induced by",94],["/// Fresh bound identifiers created during GLB computations.",95]],"useCount":11658},{"word":"css","context":[["assert!(list.media_queries.len() == 1, css.to_owned());",670],["assert!(q.media_type == MediaQueryType::MediaType(MediaType::Screen), css.to_owned());",135],["assert!(q.expressions.len() == 1, css.to_owned());",136],["&device, |declarations, css| {",198],["assert!(q.expressions.len() == 0, css.to_owned());",534],["assert!(q.media_type == MediaQueryType::All, css.to_owned());",372],["assert!(q.qualifier == Some(Qualifier::Not), css.to_owned());",324],["assert!(q.qualifier == None, css.to_owned());",308],["use css::node_style::StyledNode;",272],["println!(\"{}\", css);",220]],"useCount":12705},{"word":"cstore","context":[["let cstore = &tcx.sess.cstore;",441],["let cstore = &tcx.sess.cstore;",441],["use metadata::cstore;",326],["cdata: &cstore::crate_metadata)",258],["let cdata = cstore.get_crate_data(def.krate);",818],["let cdata = cstore.get_crate_data(def_id.krate);",184],["let name = csearch::get_symbol(&ccx.sess().cstore, did);",164],["let crates = sess.cstore.get_used_crates(cstore::RequireStatic);",154],["let crates = sess.cstore.get_used_crates(cstore::RequireStatic);",154],["let cdata = cstore::get_crate_data(cstore, def.crate);",111]],"useCount":16753},{"word":"ctx","context":[["let ctx = TestContext::new();",139],["token = &vector[*ctx];",146],["fn assign_block_size<'a>(&mut self, ctx: &'a LayoutContext<'a>) {",196],["let con = ctx.connection();",132],["*ctx = orig_ctx;",433],["span: ctx.span",128],["*ctx += 1;",126],["span: ctx.span,",123],["ctx: ctx,",117],["if *ctx >= vector.len() {",199]],"useCount":11373},{"word":"ctxt","context":[["fn repr(&self, tcx: &ctxt) -> String {",864],["fn user_string(&self, tcx: &ctxt<'tcx>) -> String {",366],["fn repr(&self, tcx: &ty::ctxt) -> String {",385],["tcx: &ty::ctxt,",395],["tcx: ty::ctxt,",571],["fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {",658],["tcx: &'a ty::ctxt<'tcx>,",921],["fn repr(&self, _tcx: &ctxt) -> String {",1069],["tcx: &ty::ctxt<'tcx>,",1113],["fn repr(&self, tcx: &ctxt<'tcx>) -> String {",1481]],"useCount":52707},{"word":"cur","context":[["let mut cur = 0;",147],["match cur {",198],["if cur == '%' {",124],["let cur = peek(st);",108],["cur: Box<GreenTask>,",100],["while !cur.is_null() {",96],["//! cur: [a $( a ยท )* a b]  next: [a $( a )* a ยท b]",96],["cur = next;",89],["match self.cur.clone().next() {",438],["self.cur.next();",485]],"useCount":12294},{"word":"current","context":[["let current = match self.current.take() {",634],["Some(current) => current,",635],["Some(current) => current,",635],["self.current = Some(next_sibling);",245],["current: Some(Root::from_ref(self)),",316],["* Set the current element in the iterator to the last element.",392],["self.current = None;",406],["Some(current)",426],["current: Option<Root<Node>>,",562],["let current = match self.current.take() {",634]],"useCount":44771},{"word":"currently","context":[["/// Return the element that currently has focus.",125],["// If the currently focused pipeline is the one being changed (or a child",198],["/// The list of currently-running animations.",97],["// This iframe is currently loading / painting for the first time.",97],["// Check if the currently focused pipeline is the pipeline being replaced",99],["/// Pipeline ID that has currently focused element for key events.",99],["// NOTE: this currently computes borders, so any pruning should separate that",116],["/// The script element that is currently executing.",119],["/// The element that currently has the document focus context.",125],["// TODO(tkuehn): currently there is only one window,",136]],"useCount":11454},{"word":"cx","context":[["cx,",1552],["DIB(cx),",1305],["cx: &mut ExtCtxt,",1226],["fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {",567],["if cx.unreachable.get() {",1116],["::std::option::Option<unsafe extern \"C\" fn(cx: *mut JSContext,",828],["attrs: self.attrs.clean(cx),",785],["visibility: self.vis.clean(cx),",627],["cx: *mut JSContext,",655],["fn clean(&self, cx: &DocContext) -> Item {",1011]],"useCount":252997},{"word":"d","context":[["match d {",320],["assert_finish_ok!(d, \"\");",681],["d",553],["let mut d = RingBuf::new();",412],["Some(d) => {",277],["Some(d) => d,",272],["Some(d) => d,",272],["d.push_front(i);",264],["assert_finish_err!(d, \"\");",257],[".and_then(|d| d.decode())",214]],"useCount":83388},{"word":"data","context":[["let item_doc = lookup_item(id, cdata.data());",469],["% for style_struct in data.style_structs:",420],["// Extra data. This will only be present for Rust instances!",407],["% for style_struct in data.active_style_structs():",489],["* decreased by one. The member data points to the next",392],["% for property in data.longhands:",616],["data:",655],["data",711],["data: data,",962],["data: data,",962]],"useCount":143403},{"word":"datum","context":[["let mut datum = datum;",173],["DatumBlock::new(bcx, datum)",186],["use trans::datum::*;",201],["let llexpr = datum.to_llscalarish(bcx);",329],["return DatumBlock::new(bcx, datum);",220],["let datum = unpack_datum!(bcx, trans(bcx, sub_expr));",215],["let datum = unpack_datum!(",268],["datum",222],["use middle::trans::datum::*;",233],["datum: Datum<'tcx, Expr>,",267]],"useCount":17616},{"word":"dead_code","context":[["#![allow(unused_variables, unused_imports, dead_code, unused_mut)]",269],["#[allow(dead_code)] // useful",78],["#[allow(dead_code)];",82],["#[allow(dead_code)] // potentially useful",85],["#[inline] #[allow(dead_code)]",93],["#![deny(dead_code)]",111],["#![allow(unused_imports, unused_mut, dead_code)]",276],["#[allow(non_snake_case)] #[allow(unused_variables)] #[allow(dead_code)]",374],["#![allow(dead_code)]",2450],["#[allow(dead_code)]",8139]],"useCount":13904},{"word":"debug","context":[["// compile-flags:-Z extra-debug-info",315],["debug::dl();",513],["if debug {",406],["extern crate debug;",398],[".arg(Arg::with_name(\"debug\")",291],["debug!(\"Not a valid element name\");",279],["[FINISHED] debug [unoptimized + debuginfo] target(s) in [..]",729],["// debug::dl();",279],["let debug = matches.is_present(\"debug\");",270],[".long(\"debug\")",279]],"useCount":98974},{"word":"decl","context":[["let x = get_param(decl, first_real_arg);",234],["decl: &ast::fn_decl,",221],["for arg in decl.inputs.iter() {",233],["ast::StmtDecl(ref decl, _) => {",256],["pub decl: FnDecl,",276],["match decl.node {",575],["decl: decl,",351],["decl: &ast::FnDecl,",1277],["decl,",594],["decl: decl,",351]],"useCount":25564},{"word":"def","context":[["def,",425],["def: def::Def,",263],["Some(def) => {",707],["let cdata = cstore.get_crate_data(def.krate);",818],["use middle::def;",1106],["</%def>",1760],["match def {",1818],["def: ast::DefId)",303],["let did = def.def_id();",292],["def => {",292]],"useCount":68184},{"word":"def_id","context":[["Some(def_id),",324],["encode_def_id(rbml_w, def_id);",414],["def_id: ast_util::local_def(self.id),",702],["Some(def_id) => {",347],["pub def_id: ast::DefId,",471],["def_id: def_id,",409],["def_id: ast::DefId,",1461],["def_id: ast::DefId)",433],["def_id: def_id,",409],["def_id,",957]],"useCount":53055},{"word":"default","context":[["use std::default::Default;",3793],["fn default() -> Self { unsafe { ::std::mem::zeroed() } }",4004],["let mut field_cursor = FieldCursor::default();",2021],["let mut object = json::value::Value::Object(Default::default());",2021],[".. Default::default()",844],["::std::default::Default::default()",913],["::std::default::Default::default()",913],["..Default::default()",1114],["// If field is not initialized, it is initialized with default value first.",1368],["fn default() -> Self {",1431]],"useCount":72316},{"word":"defined","context":[["// Unused attributes happen thanks to defined, but unused structures",276],["debug!(\"using user-defined start fn\");",81],["/// 'Proper table child' is defined as table-row flow, table-rowgroup flow,",83],["//! 1. The GC calls `_trace` defined in `FooBinding` during the marking",82],["/// well-defined.",86],["///     None => println!(\"{} is not defined in the environment.\", key)",138],["// InputType::InputSubmit => (), // No behavior defined",216],["/// Forwards to the method defined on the type `Any`.",120],["/// The initial values for all style structs as defined by the specification.",97],["/// closures defined within the function.  For example:",95]],"useCount":13331},{"word":"dependencies","context":[["[dependencies.bar]",1424],["[dependencies]",1537],["[dependencies.a]",522],["//! [dependencies]",454],["[dependencies.baz]",465],["[dependencies.foo]",251],["[dependencies.dep1]",208],["[dependencies.d1]",205],["[dependencies.b]",175],["[dependencies.d2]",138]],"useCount":12398},{"word":"depth","context":[["depth: usize,",227],["depth: 0",227],["depth: 0,",231],["fn has_regions_escaping_depth(&self, depth: u32) -> bool {",835],["self.depth.to_css(dest)",126],["self.depth -= 1;",161],["self.depth += 1;",162],["if depth == 0 {",182],["depth: depth,",225],["depth: depth,",225]],"useCount":13708},{"word":"derive","context":[["#[derive(Debug, Copy, Clone)]",4741],["#[derive(Clone, Debug)]",4239],["#[derive(Debug)]",23845],["#[derive(Clone)]",12602],["#[derive(Copy, Clone)]",10891],["#[derive(Debug, Copy)]",9387],["#[derive(Copy)]",8456],["#[derive(Clone, Copy)]",3360],["#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]",3357],["#[repr(C)] #[derive(Clone, Copy, Debug)]",6870]],"useCount":196970},{"word":"deriving","context":[["#[deriving(Clone)]",5487],["#[deriving(Eq)]",2384],["#[deriving(PartialEq)]",1378],["#[deriving(Clone, PartialEq)]",571],["#[deriving(Clone, Eq)]",616],["#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]",466],["#[deriving(Encodable)]",775],["#[deriving(Show)]",930],["#[deriving(Clone, Encodable, Decodable)]",1202],["#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]",1395]],"useCount":27421},{"word":"desc","context":[["let desc = TestDescAndFn {",356],["if let &Some(desc) = desc {",536],["if let &Some(desc) = desc {",536],["desc: TestDesc {",685],["desc: desc.to_string(),",301],["desc: desc.to_string(),",301],["run_test(&TestOpts::new(), false, desc, tx);",284],["desc:",274],["scmd = scmd.about(desc);",268],["for &(sub_command_name, ref desc, url_info, ref args) in subcommands {",268]],"useCount":16203},{"word":"description","context":[["pub description: Option<String>,",197],["fn description() -> String {",220],["\"description\" => Some((\"description\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",336],["\"description\" => Some((\"description\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",336],["description(err.description())",186],["description(err.description())",186],["description = \"foo\"",153],["self.description().fmt(f)",149],["fn description(&self) -> &str {",2591],["write!(f, \"{}\", self.description())",143]],"useCount":13301},{"word":"dest","context":[["match dest {",594],["try!(shadow.to_css(dest));",508],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["try!(dest.write_str(\" \"));",2863],["try!(dest.write_str(\", \"));",1677],["dest.write_str(\")\")",685],["fn to_css<W>(&self, dest: &mut W) -> text_writer::Result where W: TextWriter {",446],["try!(dest.write_str(\"none\"));",448],["try!(dest.write_str(\")\"));",494],["try!(self.horizontal.to_css(dest));",503]],"useCount":51744},{"word":"did","context":[["did: ast::DefId)",315],["did: did,",263],["did: did,",263],["|_, did| translate_def_id(cdata, did))",230],["|_, did| translate_def_id(cdata, did))",230],["if did.krate == ast::LOCAL_CRATE {",272],["let did = def.def_id();",292],["did,",323],["ty::ty_struct(did, ref substs) => {",302],["did: ast::DefId,",535]],"useCount":43577},{"word":"dir","context":[["{compiling} foo v0.0.1 ({dir})",699],["dir = p.url())));",551],["dir = p.root().display(),",287],["[COMPILING] foo v0.0.1 ({dir})",272],[".long(\"config-dir\")",268],["dir = p.url()).as_slice()));",158],["dir: Direction,",150],["check!(fs::create_dir(dir));",149],["assert!(!dir.exists());",142],["pub fn chdir(dir: *const c_char) -> c_int;",127]],"useCount":15976},{"word":"directory","context":[["// refer to the Cargo.toml file at the top-level directory of this distribution.",153],["// by hand. See the translator.README.txt file in the tools directory for",224],["// top-level directory of this distribution and at",98],["/// * Current directory does not exist.",71],["// refer to the AUTHORS file at the top-level directory of this distribution.",242],["let opts = vec!(optmulti(\"L\", \"\", \"library directory\", \"LIB\"),",72],["/// Changes the current working directory to the specified path, returning",74],["// See the COPYING file at the top-level directory of this distribution.",76],["// file at the top-level directory of this distribution.",628],["// file at the top-level directory of this distribution and at",59409]],"useCount":69537},{"word":"display","context":[["let mut target = display.draw();",261],["let texture = support::build_renderable_texture(&display);",276],["dir = p.root().display(),",287],["display: display,",209],["let display = support::build_display();",1020],["display: display,",209],["opts.optflag(\"h\", \"help\", \"display this help and exit\");",207],["let display = path.display();",203],["display.assert_no_error(None);",968],["/// Fields common to all display items.",470]],"useCount":44048},{"word":"distribution","context":[["// refer to the Cargo.toml file at the top-level directory of this distribution.",153],["/// See `Gamma` for sampling from a Gamma distribution with general",66],["//   distribution.",193],["// refer to the AUTHORS file at the top-level directory of this distribution.",242],["// distribution.",248],["// file at the top-level directory of this distribution.",628],["// file at the top-level directory of this distribution and at",59409],["*       documentation and/or other materials provided with the distribution.",101],["// top-level directory of this distribution and at",98],["// See the COPYING file at the top-level directory of this distribution.",76]],"useCount":62490},{"word":"do","context":[["do task::spawn {",487],["do run_in_newsched_task {",513],["// furnished to do so, subject to the following conditions:",748],["do spawn {",567],["do spawntask {",378],["/// Calculate used value of inline-size just like we do for inline replaced elements.",306],["do run_in_mt_newsched_task {",302],["do b.iter {",281],["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]",1058],["// Nothing to do.",874]],"useCount":52487},{"word":"doc","context":[["html_root_url = \"http://doc.rust-lang.org/nightly/\",",364],["#[doc(hidden)]",7898],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["let doc = document_from_node(self);",678],["#[doc=\"\"]",519],["let doc = page.document();",495],["doc.start,",441],["html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",",441],["html_root_url = \"http://doc.rust-lang.org/nightly/\")]",400],["#[doc = \"virtual call is too expensive.\"]",375]],"useCount":51772},{"word":"document","context":[["let document = page.document();",766],["let window = document.window();",566],["document,",533],["let document = page.document();",766],["use dom::document::Document;",2403],["let doc = page.document();",495],["let document = document_from_node(self);",474],["let document = self.addr.root();",347],["use dom::document::{Document, DocumentHelpers};",287],["let document = self.Document();",250]],"useCount":51856},{"word":"does","context":[["/// strict, _|_ can appear in the type of an expression that does not,",94],["- main: the main pass does the lion's share of the work: it",95],["// auto-ref.  The type returned by this function does not consider such",96],["/// \"Mobile-style\" zoom that does not reflow the page.",100],["// `Box<ZeroSizeType>` does not allocate.",111],["let msg = format!(\"`{}` does not name a structure\",",114],["/// This does not preserve ordering, but is O(1).",121],["/// This does not block.",122],["whose parent has a PipelineId which does not correspond to a pipeline in the script",128],["// This method intentionally does nothing",412]],"useCount":27204},{"word":"doesn","context":[["// If we didn't have a clip rect, the previous display doesn't need rebuilding",110],["// doesn't leak.",108],["// representable negative number doesn't necessary have an",100],["/// CSS 2.1 ยง 16.3.1. Unfortunately, computing this properly doesn't really fit into Servo's",100],["// XXXManishearth this doesn't handle `javascript:` urls properly",98],["// The compositor doesn't know about this pipeline yet.",97],["// doesn't have a fragment\".",97],["// In this case, it doesn't exist in the frame tree, but the pipeline",97],["// NB (2): This type doesn't provide type parameter substitutions; e.g. if you",96],["/// This function will return an error if the provided `path` doesn't exist, if",96]],"useCount":16882},{"word":"dom","context":[["use dom::virtualmethods::VirtualMethods;",1300],["use dom::element::Element;",1031],["use dom::window::Window;",1067],["use dom::bindings::str::DOMString;",1185],["use dom::htmlelement::HTMLElement;",1723],["use dom::bindings::js::Root;",1755],["use dom::bindings::cell::DOMRefCell;",1841],["use dom::bindings::inheritance::Castable;",1982],["use dom::bindings::global::GlobalRef;",2346],["use dom::document::Document;",2403]],"useCount":160764},{"word":"don","context":[["// that case, `i == j` so we don't copy. The",124],["// purposefully don't use 'ptr.offset' because for",132],["// Receive at least one message so we don't spinloop.",136],["/// Window was resized, but this script was not active, so don't reflow yet",137],["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["// so that we don't collect display list items for areas too far outside the viewport,",110],["// otherwise some LLVM optimization passes don't work as expected",115],["// hopefully we don't double-free (or leak)...",113],["/// as RPC calls don't make sense until then. Use this in combination with",111],["// but also don't trigger reflows every time the viewport changes.",110]],"useCount":27247},{"word":"done","context":[["self.done = true;",313],["let mut done = false;",288],["// The flow is done.",279],["let (done, rx) = channel();",241],["// This will likely need to be done by pushing down definite sizes during selector",186],["while !done {",172],["done: bool,",168],["done.send(()).unwrap();",162],["done = true;",314],["if self.done {",400]],"useCount":14012},{"word":"down","context":[["// Tell the layout thread to begin shutting down, and wait until it",120],["/// A top-down traversal.",125],["// This will likely need to be done by pushing down definite sizes during selector",186],["/// Recursively (top-down) determines the actual inline-size of child contexts and fragments.",291],["// flip image vertically (texture is upside down)",141],["/// entire table and pushed down into each row during inline size computation.",128],["/// normally. If we do exit, we will tear down the DOM nodes, possibly at a point",131],["/// constellation to shut down the pipeline, which will clean everything up",131],["// a `&T` pointer.  We can then proceed down the normal",132],["// so this can afford to be naive and just shut down the",136]],"useCount":11367},{"word":"downcast","context":[["let el = match node.downcast::<Element>() {",202],["match parent.and_then(Root::downcast::<Element>) {",202],["let element = node.downcast::<Element>().unwrap();",198],[".filter_map(Root::downcast::<Element>)",182],[".filter_map(Root::downcast::<HTMLInputElement>)",176],["let doctype = node.downcast::<DocumentType>().unwrap();",119],["let maybe_elem = target.downcast::<Element>();",154],[".filter_map(Root::downcast)",147],[".filter_map(Root::downcast::<HTMLIFrameElement>)",127],["if doc.GetBody().r() == self.downcast::<HTMLElement>() &&",130]],"useCount":12410},{"word":"drop","context":[["drop(guard);",221],["fn drop(&self) {",305],["drop(x);",312],["fn drop(&mut self) {}",551],["drop(rx);",810],["drop(tx);",1828],["fn drop(&mut self) {",13433],["drop(w);",224],["self.schedule_clean(cleanup_scope, drop as CleanupObj);",197],["drop(tx.clone());",200]],"useCount":33393},{"word":"dst","context":[["assert_eq!(dst.len(), src_len);",222],["dst: dst,",179],["dst: dst,",179],["pub fn dup2(src: c_int, dst: c_int) -> c_int;",157],["let mut dst = dst.clone();",148],["let mut dst = dst.clone();",148],["try!(mkdir(&dst));",147],["let dst = Path::new(&out_dir).join(\"lib.rs\");",140],["dst: ValueRef)",139],["assert!(dst.iter().enumerate().all(|(i, x)| i == *x));",259]],"useCount":28673},{"word":"during","context":[["// calculated during assign-inline-size.",146],["This means that during inferencing you should use `fcx.write_ty()`",95],["/// Fresh bound identifiers created during GLB computations.",95],["/// confused with absolutely-positioned flows) that is computed during block-size assignment.",98],["\"reached the recursion limit during monomorphization\");",107],["/// When we should kick off a reflow. This happens during parsing.",108],["/// page content during parsing.",108],["/// Reassign the focus context to the element that last requested focus during this",125],["/// entire table and pushed down into each row during inline size computation.",128],["// This will likely need to be done by pushing down definite sizes during selector",186]],"useCount":11492},{"word":"e","context":[["Err(e) => return Err(e),",931],["match e.node {",1136],["Err(e) => return Err(e),",931],["Err(e) => {",8060],["Err(e) => Err(e),",1212],["Err(e) => Err(e),",1212],["match e {",865],["Err(e) => return Err(e)",685],["Err(e) => return Err(e)",685],["match $e {",753]],"useCount":180190},{"word":"each","context":[["//! *simple* and *resumable*. The distinctiveness of each is represented by customized",276],["// Typecheck each field.",161],["/// entire table and pushed down into each row during inline size computation.",128],["static VIEWPORT_EXPANSION: f32 = 2.0; // 2 lengths on each side plus original length is 5 total.",110],["// repeated byte. This way each interpretation of the union should look the same, no matter if",112],["//         // These cases only have 1 permutation each, so we can't do anything.",188],["/// Iterates over each child of the given item.",109],["/// The minimum depth below the baseline for each line, as specified by the line height and",109],["/// The minimum block-size above the baseline for each line, as specified by the line height",108],["// Send Resize (or ResizeInactive) messages to each",105]],"useCount":32221},{"word":"ebml_w","context":[["ebml_w: &mut Encoder,",379],["ebml_w.end_tag();",2210],["encode_visibility(ebml_w, vis);",139],["ebml_w,",139],["ebml_w.id(id);",281],["ebml_w.tag(c::tag_table_val, |ebml_w| {",149],["ebml_w.start_tag(tag_items_data_item);",393],["ebml_w: &mut writer::Encoder,",468],["ebml_w.tag(c::tag_table_val, |ebml_w| {",149],["encode_def_id(ebml_w, def_id);",189]],"useCount":14316},{"word":"ecx","context":[["diag: ecx.diag,",421],["ecx: ecx,",209],["ecx: ecx,",209],["let tcx = ecx.tcx;",173],["tcx: ecx.tcx,",443],["abbrevs: &ecx.type_abbrevs",346],["ecx: &EncodeContext,",306],["ecx: &mut ExtCtxt,",267],["&ecx.ty_str_ctxt(),",246],["self.ecx.ident_of(\"fmt\"),",173]],"useCount":26064},{"word":"either","context":[["//! the doit() methods, or handed as possibly intermediate results to either the",276],["// KIND, either express or implied.",696],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["//! the server to indicate either the set parts of the request or the desired parts in the response.",276],["// Being here means either there are no pending frames, or none of the pending",125],["/// Commence a new URL load which will either replace this window or scroll to a fragment.",116],["* policies, either expressed or implied, of Dmitry Vyukov.",101],["// The 'unset' keyword is represented as either Initial or Inherit,",97],["/// If the given def ID describes an item belonging to a trait (either a",96],["// Create the function context.  This is either derived from scratch or,",95]],"useCount":15535},{"word":"elem","context":[["fn filter(&self, elem: JSRef<Element>, _root: JSRef<Node>) -> bool {",208],["for elem in iter {",176],["match elem.get_attribute(&ns!(), &atom!(\"name\")) {",183],["let elem = self.elem.root();",193],["Some(elem) => elem,",267],["let elem = self.elem.root();",193],["Some(elem) => {",252],["Some(elem) => elem,",267],["match elem {",314],["fn filter(&self, elem: &Element, _root: &Node) -> bool {",974]],"useCount":20680},{"word":"element","context":[["use dom::element::ElementTypeId;",623],["* Set the current element in the iterator to the last element.",392],["* Return the iterator pointing to the last element",392],["* Get the next element in the iterator. The member rem is",392],["* @return  The iterator pointing to the last element",392],["* Set the current element in the iterator to the last element.",392],["element as &'a (VirtualMethods + 'a)",403],["let element = ElementCast::from_ref(self);",415],["use dom::element::Element;",1031],["let element = self.upcast::<Element>();",939]],"useCount":75356},{"word":"elements","context":[["/// Calculate used value of inline-size just like we do for inline replaced elements.",306],["/// Returns an iterator over subslices separated by elements that match",215],["Some(elements) => {",134],["// FIXME: This should be return OBJECT elements containing applets.",139],["elements.is_empty()",130],["let position = elements.iter()",131],["/// Remove any existing association between the provided id and any elements in this document.",132],["elements.remove(position);",132],["// vectors with 0-size elements this would return the",132],["/// elements.",251]],"useCount":28818},{"word":"else","context":[["/// } else {",502],["//             } else {",555],["}else{",585],["} else { return Err(\"stack is empty\".to_string()) },",500],["//         } else {",883],["//         /// } else {",1024],["} else {",236619],["else {",9299],["% else:",1211],["else",1175]],"useCount":316039},{"word":"empty","context":[["} else { return Err(\"stack is empty\".to_string()) },",500],["writing_mode: WritingMode::empty(),",185],["} else { return Err(~\"stack is empty\") },",200],["ty_params: OwnedSlice::empty(),",203],["/// on this platform: in this case, the empty string.",268],["source: Span::empty(),",284],["/// platform: in this case, the empty string.",310],["generics: LifetimeBounds::empty(),",786],["/// empty.",343],["types: OwnedSlice::empty(),",442]],"useCount":36095},{"word":"encode","context":[["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {",95],["value.encode(&mut encoder).unwrap();",108],["animal.encode(&mut encoder).unwrap();",108],["try!(e.emit_struct_field(\"id\", 0, |e| self.debug_id().encode(e)));",127],["}.encode(s)",160],["(**self).encode(s)",176],["fn encode(&self, s: &mut S) -> Result<(), E> {",544],["fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {",425],["fn encode(&self, s: &mut S) {",278]],"useCount":12338},{"word":"end","context":[["end: end,",248],["//         /// wrapping the truncated bits to the end of the resulting integer.",256],["/// Compute inline-start and inline-end margins and inline-size.",272],["try!(visitor.end());",291],["(start, end)",332],["end(s);",334],["try!(self.end());",448],["self.end()",857],["safe_assert!(start <= p && p < end);",896],["end: end,",248]],"useCount":61651},{"word":"entry","context":[["index: &mut Vec<entry<i64>>) {",191],["Occupied(entry) => Root::from_ref(entry.get()),",228],["Occupied(entry) => Root::from_ref(entry.get()),",228],["Occupied(entry) => {",278],["Occupied(entry) => entry.into_mut(),",368],["Occupied(entry) => entry.into_mut(),",368],["index.push(entry {",350],["Entry::Vacant(entry) => {",262],["index: &mut Vec<entry<i64>>,",159],["Vacant(entry) => {",677]],"useCount":29510},{"word":"enum","context":[["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["pub enum Msg {",302],["pub enum Type {",309],["enum Enum {",340],["enum Foo {",427],["enum State {",448],["pub enum T {",697],["pub enum SpecifiedValue {",780],["pub enum Error {",1266]],"useCount":94618},{"word":"enumerate","context":[["for (i, field) in fields.iter().enumerate() {",175],[".enumerate() {",202],["for (i, subpat) in subpats.iter().enumerate() {",138],["for (i, elem) in elems.iter().enumerate() {",126],["for (i, e) in self.iter().enumerate() {",216],["assert!(dst.iter().enumerate().all(|(i, x)| i == *x));",259],["for (i, value) in self.0.iter().enumerate() {",259],["for (i, (k, v)) in self.iter().enumerate() {",118],["for (i, arg) in args.iter().enumerate() {",115],[".enumerate()",1127]],"useCount":16571},{"word":"env","context":[["let t_rptr_free1 = env.t_rptr_free(0, 1);",256],["include!(concat!(env!(\"OUT_DIR\"), \"/lib.rs\"));",321],["use std::env;",6176],["static VERSION: &'static str = env!(\"CARGO_PKG_VERSION\");",239],["env: E) {",363],["/// use std::env;",365],["let t_rptr_bound1 = env.t_rptr_late_bound(1);",372],["let args: Vec<String> = env::args().collect();",542],["test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {",565],["#[stable(feature = \"env\", since = \"1.0.0\")]",836]],"useCount":40257},{"word":"err","context":[["err.issues.push(field_err);",2021],["FieldCursor::from(field_cursor_str).set_json_value(&mut object, value.unwrap(), type_info, err, &temp_cursor);",2021],["if err.issues.len() > last_errc {",2021],["err.issues.remove(last_errc);",2021],["let (key, value) = parse_kv_arg(&*kvarg, err, false);",2021],["let last_errc = err.issues.len();",2021],["err.issues.push(CLIError::UnknownParameter(key.to_string(),",5447],["assert!(err.issues.len() == 0);",5447],["let (key, value) = parse_kv_arg(&*parg, err, false);",5447],["Err(err) => {",2526]],"useCount":76440},{"word":"error","context":[["match error {",555],["use dom::bindings::error::{Error, ErrorResult, Fallible};",526],["mod error;",539],["* Otherwise, it stores the error if any.",546],["pub mod error;",551],["use std::error;",693],["use dom::bindings::error::Fallible;",719],["Err(error) => {",952],["* a reply to be generated. Any returned error will be",1130],["use std::error::Error;",2452]],"useCount":89368},{"word":"errors","context":[["errors.push(",143],["use errors;",127],["pub mod errors;",168],["// XXXManishearth handle errors, if any (substep 2)",174],["self.errors.push(ParserError {",153],["test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {",565],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["//! makes the system potentially resilient to all kinds of errors.",276],["use errors::*;",224],["Err(errors) => {",217]],"useCount":18316},{"word":"event","context":[["event: MozBrowserEvent) {",273],["use dom::event::Event;",365],["timestamp: event.timestamp,",279],["sequential.push(event);",340],["event);",278],["* placed in the event queue.",546],["chan.send(event).unwrap();",600],["use dom::event::{Event, EventBubbles, EventCancelable};",698],["event.fire(target);",836],["match event {",1689]],"useCount":43499},{"word":"example","context":[["/// Handles a mozbrowser event, for example see:",113],["Some(r##\"Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\"##),",114],["[[example]]",126],["Host: example.domain\\r\\n\\",146],["For example:",188],["example:",189],["Erroneous code example:",202],["//! ## A complete example",276],["authors = [\"carlhuda@example.com\"]",302],["authors = [\"wycats@example.com\"]",2473]],"useCount":24086},{"word":"except","context":[["// except according to those terms.",61702],["// copied, modified, or distributed except according to those terms.",350],["// modified, or distributed except according to those terms.",195],["/// Any color value form computed values (except for the 'color' property itself)",97],["/// At present, all fragments are primary fragments except for inline-block and table wrapper",94],["or distributed except according to those terms.",91],["* except according to those terms.",79],["// sense because, in Rust, nested items are independent except for",73],["// I believe these cases should not occur (except when debugging,",65],["/// Equivalent to `split`, except that the trailing substring",65]],"useCount":66186},{"word":"execs","context":[["execs().with_stdout(format!(\"\\",322],["execs().with_status(0));",4329],["execs().with_status(0)",2393],["execs().with_status(101)",914],["execs().with_status(101).with_stderr(\"\\",798],["execs().with_status(0).with_stdout(&format!(\"\\",795],["execs()",706],["assert_that(p.cargo_process(\"build\"), execs().with_status(0));",427],["execs().with_status(0).with_stdout(format!(\"\\",375],["execs().with_status(0).with_stdout(\"\"));",296]],"useCount":16240},{"word":"exit","context":[["opts.optflag(\"V\", \"version\", \"output version information and exit\");",199],["std::process::exit(exit_status);",274],["image_cache_task.exit();",363],["use std::process::exit;",371],["std::process::exit(1);",391],["exit(1);",455],["process::exit(1);",757],[".unwrap_or_else(|e| e.exit());",365],["process::exit(0);",254],["opts.optflag(\"h\", \"help\", \"display this help and exit\");",207]],"useCount":14663},{"word":"exp","context":[["//         pub fn pow(self, mut exp: u32) -> Self {",256],["(s: $path:expr, $push:expr, $exp:expr) => (",158],["assert_eq!(comps, exp);",158],["(s: $path:expr, $join:expr, $exp:expr) => (",158],["(s: $path:expr, $exp:expr) => (",199],["walk_expr(cx, &**exp, scope_stack, scope_map);",239],["//                 exp /= 2;",256],["//             while exp > 0 {",256],["//                 if (exp & 1) == 1 {",256],["//         /// Raises self to the power of `exp`, using exponentiation by squaring.",256]],"useCount":14313},{"word":"expect","context":[["let layout_data = layout_data_ref.as_mut().expect(\"no layout data\");",197],["expect,",192],["expect!(match_request(expected, actual)).to(be_empty());",185],["expect!(match_request(expected, actual)).to_not(be_empty());",185],["self.expect(&token::Semi);",211],[".expect(\"capacity overflow\");",212],["self.expect(&token::LBRACE);",243],["self.expect(&token::RPAREN);",249],["self.expect(&token::SEMI);",265],["self.expect(&token::COLON);",298]],"useCount":23931},{"word":"expected","context":[["values.expected,",526],["\"expected\" : {",398],["assert_eq!(expected, got);",369],["assert_eq!(expected, actual);",288],["let expected =",400],["println!(\"{:?}\", expected);",421],["expected,",443],["assert_eq!(i, expected.len());",521],["expected: vec![],",843],["assert_eq!(actual, expected);",275]],"useCount":48868},{"word":"expr","context":[["visit::walk_expr(rcx, expr);",570],["expr: &ast::Expr,",2816],["expr.span,",2689],["match expr.node {",2569],["expr,",998],["expr.id,",739],["try!(self.print_expr(&**expr));",681],["//     ($($N:expr)+) => {",594],["expr: &ast::Expr)",547],["let method_call = MethodCall::expr(expr.id);",459]],"useCount":143216},{"word":"expression","context":[["visitor.visit_expr(&**expression)",104],["// this is a bare expression",128],["\"macro expression remains after expansion\");",161],["_ => panic!(\"wrong expression type\"),",272],["// // Constructs an expression that performs a lexical ordering using method $rel.",120],["// NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in",96],["/// generate code for that kind of expression.  See trans/expr.rs for more",96],["// Returns the type of an expression as a monotype.",96],["// Recurse on the expression to catch items in blocks",107],["/// expression.",113]],"useCount":23462},{"word":"extend","context":[["pats.extend(after.iter().map(|p| &**p));",152],["comps.extend(ita.by_ref());",144],["v.extend(self.gp.iter().map(|v|*v));",5447],["combined_headers.extend(load_data.preserved_headers.iter());",132],["self.extend(iter.into_iter().cloned());",135],["set.extend(iter);",156],["v.extend([\"filter\", \"page-token\", \"max-results\"].iter().map(|v|*v));",187],["stmt.extend(other.drain(..));",240],["v.extend([\"page-token\", \"max-results\"].iter().map(|v|*v));",198],["map.extend(iter);",204]],"useCount":17634},{"word":"extern","context":[["extern crate time;",2485],["extern crate rustc_serialize;",2884],["extern crate test;",2986],["extern crate rand;",3039],["extern crate core;",3727],["extern {",7796],["extern \"C\" {",8525],["extern crate libc;",5198],["extern crate log;",2476],["extern crate url;",1642]],"useCount":159271},{"word":"extra","context":[["// compile-flags:-Z extra-debug-info",315],["pub mod extra {",1178],["extern mod extra;",902],["pub extra: u8,",407],["-C extra-filename=-[..] \\",110],["use extra::test::BenchHarness;",132],["use extra::url::Url;",154],["use libc::funcs::extra::kernel32::{",159],["use libc::types::os::arch::extra::DWORD;",178],["extra: 0,",223]],"useCount":17224},{"word":"f","context":[["::protobuf::text_format::fmt(self, f)",859],["f(self);",1020],["fn fmt(&self, f: &mut Formatter) -> Result {",1160],["fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {",1194],["f(self)",2240],["Ok(mut f) => f,",4816],["Ok(mut f) => f,",4816],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["try!(f(self));",957],["f: F)",820]],"useCount":196526},{"word":"f32","context":[["/// assert!(abs_difference <= f32::EPSILON);",704],["let inf: f32 = f32::INFINITY;",484],["let nan: f32 = f32::NAN;",484],["let neg_inf: f32 = f32::NEG_INFINITY;",484],["let inf: f32 = f32::INFINITY;",484],["/// use std::f32;",1204],["pub type c_float = f32;",536],["let nan: f32 = f32::NAN;",484],["let neg_inf: f32 = f32::NEG_INFINITY;",484],["border: &SideOffsets2D<f32>,",486]],"useCount":75547},{"word":"f64","context":[["let nan: f64 = NAN;",437],["let nan: f64 = Float::nan();",348],["let inf: f64 = INFINITY;",437],["let neg_inf: f64 = Float::neg_infinity();",331],["/// use std::f64;",812],["use std::f64;",537],["x: f64,",321],["pub type c_double = f64;",536],["let inf: f64 = Float::infinity();",331],["let neg_inf: f64 = NEG_INFINITY;",437]],"useCount":73611},{"word":"fail","context":[["fail!();",1471],["_ => fail!()",1810],["None => fail!(),",169],["fail(&mut output);",210],["None => fail!()",226],["Err(..) => fail!()",238],["// Please note that this call will fail if any part of the opt can't be handled",269],["// error-pattern:fail",270],["fail!()",687],["Ok(..) => fail!(),",358]],"useCount":26521},{"word":"failed","context":[[".expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());",159],["fatal_proc_rec(\"compilation failed!\", &proc_res);",187],["failed to parse manifest at `[..]`",289],["test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured",488],["test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured",720],["test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured",1156],["// We failed to resolve the name. Report an error.",148],["bool failed = false;",119],["[ERROR] failed to parse manifest at `[..]`",177],[".expect(&format!(\"failed to exec `{}`\", config.adb_path));",138]],"useCount":19044},{"word":"false","context":[["return false",3616],["false,",3986],["let (key, value) = parse_kv_arg(&*parg, err, false);",5447],["Some(false)),",13235],["return false;",12981],["_ => false",12814],["let mut found = false;",6098],["Some(false),",10266],["_ => false,",9923],["false",14303]],"useCount":305621},{"word":"fcx","context":[["let fcx = bcx.fcx;",1272],["let tcx = fcx.tcx();",467],["let fcx = bcx.fcx;",1272],["debug_loc.apply(cx.fcx);",391],["fcx.write_nil(id);",400],["fcx.write_bot(id);",376],["let tcx = fcx.ccx.tcx;",1085],["fcx.tcx().types.err",395],["fcx.type_error_message(",432],["fcx.write_error(id);",798]],"useCount":93485},{"word":"fd","context":[["fd: fd,",177],["fd: fd,",177],["fd: c_int,",165],["fd",162],["pub fn close(fd: c_int) -> c_int;",157],["visit::walk_fn(self, fk, fd, b, s);",122],["let fd = self.fd();",147],["let fd = self.fd();",147],["pub fn isatty(fd: c_int) -> c_int;",157],["pub fn dup(fd: c_int) -> c_int;",157]],"useCount":16032},{"word":"feature","context":[["#[cfg_attr(feature = \"servo\", derive(HeapSizeOf))]",2633],["//     #[stable(feature = \"rust1\", since = \"1.0.0\")]",2402],["#![feature(core)]",2829],["#![feature(box_syntax)]",3015],["#[stable(feature = \"rust1\", since = \"1.0.0\")]",58569],["//         #[stable(feature = \"rust1\", since = \"1.0.0\")]",7781],["//             #[stable(feature = \"rust1\", since = \"1.0.0\")]",5555],["#[stable(feature = \"raw_ext\", since = \"1.1.0\")]",2051],["#![feature(plugin)]",1486],["#![stable(feature = \"rust1\", since = \"1.0.0\")]",1328]],"useCount":173935},{"word":"ffi","context":[["mod ffi;",200],["use std::ffi::CString;",1908],["use std::ffi::OsStr;",430],["mod ffi {",201],["pub mod ffi;",228],["use std::ffi::CStr;",709],["use ffi;",2033],["use std::ffi::{CStr, CString};",376],["use std::ffi::OsString;",318],["use ffi::CString;",172]],"useCount":18576},{"word":"field","context":[["// Take field",1752],["// If field is not initialized, it is initialized with default value first.",1368],["match field.node.kind {",499],["for field in fields.iter() {",524],["for field in fields {",550],["// field accesses of the contained type via Deref",302],["// Mutable pointer to the field.",1874],["field.span,",194],["for (i, field) in fields.iter().enumerate() {",175],["// Typecheck each field.",161]],"useCount":41696},{"word":"fields","context":[["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["fields,",1224],["fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(",391],["for field in fields.iter() {",524],["fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(",526],["for field in fields {",550],["let mut fields = ::std::vec::Vec::new();",812],["// special fields",761],["// message fields",711],["\\\"fields\\\":[\\",564]],"useCount":47008},{"word":"file","context":[[".file(\"a/Cargo.toml\", r#\"",907],[".file(\"Cargo.toml\", r#\"",9158],["// file at the top-level directory of this distribution and at",59409],[".file(\"bar/Cargo.toml\", r#\"",1174],[".file(\"src/main.rs\", \"fn main() {}\");",972],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],[".file(\"src/lib.rs\", \"\")",2196],[".file(\"src/main.rs\", r#\"",1527],["// This file is part of Parity.",1469],[".file(\"src/lib.rs\", r#\"",1427]],"useCount":174512},{"word":"filename","context":[["check!(fs::remove_file(filename));",180],["let mut read_stream = File::open_mode(filename, Open, Read);",185],["check!(unlink(filename));",198],["s.push_str(filename);",164],["filename,",174],["pub filename: String,",203],["filename: String,",214],["/// Specifies the filename suffix used for shared libraries on this",276],["/// Specifies the filename suffix used for executable binaries on this",311],["/// Specifies the filename prefix used for shared libraries on this",276]],"useCount":18711},{"word":"filter","context":[["\"filter\" => {",244],["filter: filter,",250],["filter: filter,",250],["v.extend([\"filter\", \"page-token\", \"max-results\"].iter().map(|v|*v));",187],["fn filter(&self, elem: JSRef<Element>, _root: JSRef<Node>) -> bool {",208],["call = call.filter(value.unwrap_or(\"\"));",223],["try!(filter.to_css(dest));",280],["HTMLCollection::create(window.r(), root, filter)",308],["HTMLCollection::create(&self.window, self.upcast(), filter)",539],["fn filter(&self, elem: &Element, _root: &Node) -> bool {",974]],"useCount":22674},{"word":"find","context":[["if let Some(ref mut load) = loads.iter_mut().find(|load| load.pipeline_id == id) {",391],["match self.find(id) {",255],["match cx.map.find(id) {",195],["node.children().find(|child| {",143],["let pact_match = pact.find(\"match\").unwrap();",421],["\"Unable to find element in document\"))",135],["let document = match self.root_browsing_context().find(pipeline_id) {",142],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["/// Attempt to find a named element in this page's document.",137],[".find(|decl| decl.matches(&property))",136]],"useCount":45458},{"word":"first","context":[["first = false;",1377],["fn first<A, B>((a, _): (A, B)) -> A { a }",183],["Ok((first, second))",213],["// If field is not initialized, it is initialized with default value first.",1368],["if first {",1008],["if !first {",569],["let mut first = true;",1874],["first = false",242],["\"first line.\\nsecond line\".to_string());",176],["if first { first = false; }",162]],"useCount":48323},{"word":"flag","context":[["for &(ref arg_name, ref flag, ref desc, ref required, ref multi) in args {",268],["match (arg_name, flag) {",268],["self.flag = true;",245],["if let &Some(short_flag) = flag {",268],["flag: bool,",274],["flags.insert(flag);",200],["flags.remove(flag);",198],["if self.flag {",185],["if flag {",168],["if arg_name.is_some() && flag.is_some() {",268]],"useCount":17270},{"word":"flags","context":[["flags: FLAGS_NONE",366],["// compile-flags:-g",1092],["flags: 0,",1087],["if self.base.flags.is_float() {",370],["flags: flags,",420],["flags: flags,",420],["if self.base.flags.contains(IS_ABSOLUTELY_POSITIONED) {",307],["// compile-flags:-Z extra-debug-info",315],["fn has_type_flags(&self, flags: TypeFlags) -> bool {",331],["// compile-flags: -Z parse-only",348]],"useCount":49335},{"word":"fld","context":[["fld: &mut MacroExpander)",222],["fld.cx.span_err(",223],["fld.cx.bt_pop();",519],["fld.cx.bt_push(ExpnInfo {",451],["id: fld.new_id(id),",431],["span: fld.new_span(span)",420],["fld.cx.span_err(path_span,",153],["span: fld.new_span(span),",172],["fld.cx.span_err(pth.span,",174],["fld: &mut T)",192]],"useCount":17963},{"word":"float","context":[["float::T::none => {}",178],["fn to_json(&self) -> Json { Number(*self as float) }",108],["float::T::left => {",103],["None => float::DigMax(6),",96],["/// * num - The float value",567],["float::T::right => {",103],["float::SignNeg,",90],["\"float\"",90],["Some(i) => float::DigExact(i),",96],["float::float_to_str_bytes_common(self.abs(),",94]],"useCount":12268},{"word":"flow","context":[["flow: &mut FlowRef,",293],["self.block_flow.generated_containing_block_size(flow)",293],["fn generated_containing_block_size(&self, flow: OpaqueFlow) -> LogicalSize<Au> {",293],["self.build_flow_for_block_like(flow, node)",294],["use flow;",263],["//! // Instantiate the authenticator. It will choose a suitable authentication flow for you,",276],["// The flow is done.",279],["fn process(&self, flow: &mut Flow) {",398],["// Table items contribute table flow construction results.",588],["let kid_base = flow::mut_base(kid);",767]],"useCount":61599},{"word":"flush","context":[["self.flush();",212],["fn flush(&mut self) -> IoResult<()> {",209],["try!(self.stream.flush());",138],["stdout.flush().unwrap();",143],["io::stdout().flush().unwrap();",151],["fn flush(&mut self) -> Result<()> {",157],["ostream.flush().unwrap();",4801],["fn flush(&mut self) -> io::Result<()> {",817],["fn flush(&mut self) -> io::Result<()> { Ok(()) }",314],["writer.flush().unwrap();",260]],"useCount":12202},{"word":"fmt","context":[["fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",2429],["fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",2429],["fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",2429],["fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {",2429],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["use std::fmt;",12450],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602]],"useCount":170106},{"word":"fn","context":[["pub fn main() {",13348],["fn description(&self) -> &str {",2591],["fn size_hint(&self) -> (usize, Option<usize>) {",3425],["fn default() -> Self { unsafe { ::std::mem::zeroed() } }",4004],["fn main() {}",4341],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["fn clone(&self) -> Self { *self }",13205],["fn main() {",33529],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["fn drop(&mut self) {",13433]],"useCount":1725320},{"word":"folder","context":[["let config_dir = match cmn::assure_config_dir_exists(opt.value_of(\"folder\").unwrap_or(\"~/.google-service-cli\")) {",268],["nested: self.nested.fold_with(folder),",105],[".arg(Arg::with_name(\"folder\")",268],["id: folder.new_id(id),",222],["span: folder.new_span(span)",216],["let id = folder.new_id(id);",190],["folder.fold_block(body),",153],["opt_ident.map(|i| folder.fold_ident(i)))",131],["folder.fold_generics(generics),",120],["ident: folder.fold_ident(ident),",106]],"useCount":15169},{"word":"foo","context":[["let foo = project(\"foo\")",762],["pub fn foo() {}",1222],["/// # fn foo() -> std::io::Result<()> {",988],["let p = project(\"foo\")",7347],["name = \"foo\"",9749],["assert_that(&p.bin(\"foo\"), existing_file());",781],["let foo = project(\"foo\")",762],["extern crate foo;",746],["/// # #[cfg(windows)] fn foo() {}",742],["/// # #[cfg(unix)] fn foo() {",742]],"useCount":128368},{"word":"for","context":[["impl ToCss for SpecifiedValue {",2223],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for kvarg in opt.values_of(\"kv\").unwrap_or(Vec::new()).iter() {",1299],["//                        reason = \"should ideally be implemented for all fixed-sized arrays\")]",1188],["impl ToCss for computed_value::T {",1137],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["impl ToComputedValue for SpecifiedValue {",2319],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["for param in &self.gp {",5447]],"useCount":751960},{"word":"form","context":[["/// on the borrowed form *must* match the ordering on the key type.",156],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["* This form can be used only if the request will not cause",584],["* This form can be used only if the request will cause",546],["/// `Hash` and `Eq` on the borrowed form *must* match those for",254],["//    * Redistributions in binary form must reproduce the above",224],["// https://html.spec.whatwg.org/multipage/#dom-fae-form",171],["// Prevent click event if form control element is disabled.",129],["use the || { ... } closure form instead\");",136]],"useCount":19240},{"word":"format","context":[[".with_stdout(&format!(\"\\",983],["execs().with_status(0).with_stdout(&format!(\"\\",795],["format!(",758],[".file(\"Cargo.toml\", &format!(r#\"",724],["format: FormatSpec {",573],["&format!(",570],[".with_stderr(&format!(\"\\",491],["format!(\"{:?}\", *self)",461],[".with_stdout(format!(\"\\",453],["execs().with_status(0).with_stdout(format!(\"\\",375]],"useCount":112569},{"word":"found","context":[["values.found)",543],["let found = match ($p).token {",341],["match found {",279],["if found {",228],["if let Some(token::Interpolated(token::$constructor(x))) = found {",226],["*found = true;",193],["*found = false;",164],["found = true;",5934],["if !found {",5658],["let mut found = false;",6098]],"useCount":54164},{"word":"fragment","context":[[".fragment",465],["for fragment in &mut self.fragments.fragments {",247],["match fragment.specific {",426],["let fragment = block.fragment();",411],["let fragment = block.fragment();",411],["fragment: \"",397],["fn should_process(&mut self, fragment: &Fragment) -> bool {",315],["&self.fragment,",293],["MaybeAuto::Specified(fragment.content_inline_size())",285],["// Not the primary fragment, so we do not take the noncontent size into account.",264]],"useCount":64631},{"word":"fragments","context":[["fragment_accumulator.fragments.absolute_descendants.push_descendants(abs_descendants);",156],["if fragments.is_empty() {",166],["fragments: fragments,",181],["fragments: fragments,",181],["fragments: fragment_accumulator.to_intermediate_inline_fragments(),",192],["for fragment in &mut self.fragments.fragments {",247],["/// Recursively (top-down) determines the actual inline-size of child contexts and fragments.",291],["/// The list of fragments.",146],["panic!(\"Unscanned text fragments should have been scanned by now!\")",379],["for fragment in &mut self.fragments.fragments {",247]],"useCount":26216},{"word":"frame","context":[["/// Kick off the document and frame tree creation process using the result.",116],["for frame in self.current_frame_tree_iter(self.root_frame_id) {",192],["Some(frame) => frame,",155],["Some(frame) => frame,",155],["/// An iterator over a frame tree, returning nodes in depth-first order.",125],["// Find the pending frame change whose new pipeline id is pipeline_id.",125],["//! initial response is received for an ongoing load, the second phase starts - the frame tree",116],["//! tree, and manages the entire lifetime of pages in the frame tree from initial request to",116],["Some(frame) => {",122],["// Close all pipelines at and beneath a given frame",124]],"useCount":24187},{"word":"free","context":[["// send a message to free their layout data to the",96],["if matches.free.is_empty() {",110],["/// that refer to bound region parameters are modified to refer to free",95],["/// The next free ID to assign to a frame.",97],["//!    onto these objects and cause use-after-free.",108],["//         /// Panic-free bitwise shift-left; yields `self << mask(rhs)`,",256],["//         /// Panic-free bitwise shift-left; yields `self >> mask(rhs)`,",256],["* The returned value must be freed by the caller using free().",546],["// hopefully we don't double-free (or leak)...",113],["if matches.free.len() == 0 {",87]],"useCount":11391},{"word":"from","context":[["//         /// Converts an integer from big endian to the target's endianness.",256],["//         /// Converts `self` to big endian from the target's endianness.",256],["// This file was generated automatically from 'src/mako/cli/main.rs.mako'",269],["//! // retrieve them from storage.",276],["// This file was generated automatically from 'src/mako/api/lib.rs.mako'",276],["_ => Err(AfError::from(err_val)),",287],["from()",379],["from: self.name(),",719],["from: String,",1038],["FieldCursor::from(field_cursor_str).set_json_value(&mut object, value.unwrap(), type_info, err, &temp_cursor);",2021]],"useCount":140144},{"word":"from_ref","context":[["let node = NodeCast::from_ref(self);",1161],["let node: JSRef<Node> = NodeCast::from_ref(self);",648],["let root = NodeCast::from_ref(self);",581],["Some(el) => Root::from_ref(el),",231],["let target = EventTargetCast::from_ref(self);",234],["let node = NodeCast::from_ref(*self);",254],["let element: JSRef<Element> = ElementCast::from_ref(self);",315],["let node: JSRef<Node> = NodeCast::from_ref(*self);",430],["current: Some(Root::from_ref(self)),",316],["let element = ElementCast::from_ref(self);",415]],"useCount":19561},{"word":"from_str","context":[["let json_value = from_str(\"12\").unwrap();",213],["// We have to use from_str until base-2 exponents",224],["use from_str::FromStr;",286],["fn from_str(s: &str) -> Result<Self, Self::Err> {",219],["let json_value = from_str(\"12.0\").unwrap();",148],["let json_value = from_str(\"-12\").unwrap();",148],["use std::from_str::FromStr;",331],["let pact = Json::from_str(r#\"",421],["assert_eq!(from_str(",177],["/// let mut s = String::from_str(\"foo\");",146]],"useCount":23429},{"word":"fs","context":[["use std::fs::{self, File};",695],["use std::fs::File;",5120],["/// use std::fs::File;",796],["use std::fs;",1924],["use std::io::fs::PathExtensions;",243],["/// use std::fs;",477],["fs::remove_file(&path).unwrap();",398],["use std::io::fs;",324],["pub mod fs;",254],["use std::fs::OpenOptions;",221]],"useCount":25538},{"word":"function","context":[["* The parameter @p e supplied to this function must be NULL if",546],["//         /// in the type. In such a case, this function returns `MIN`",256],["//         /// a case, this function returns `MIN` itself.",256],["//         /// minimal value). In such a case, this function returns `0`.",256],["/// function.",244],["/// specified function.",150],["/// function returns, or else it will end up pointing to garbage.",146],["/// This function accepts strings such as",145],["\"this function's return type contains a borrowed value, but \\",144],["/// Helper function to handle keyboard events.",140]],"useCount":75288},{"word":"functions","context":[["// of arguments when we typecheck the functions. This isn't really the",95],["// Free functions",109],["//! When implementing wrapper functions, be careful that you do not touch the borrow flags, or you",108],["// currently needed for splitting in the `inline::try_append_*` functions.",96],["// that are not anonymous functions, then we typecheck the anonymous",95],["// functions. This is so that we have more information about the types",95],["complete, the functions in the writeback module are used to take the",95],["/// Named region parameters for functions (a in &'a T)",95],["// only use this for foreign function ABIs and glue, use `decl_rust_fn` for Rust functions",94],["// extraneous block (functions are never warned about).",93]],"useCount":16835},{"word":"g","context":[["// compile-flags:-g",1092],["g",295],["/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none",200],["/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none",200],["llvm::LLVMSetGlobalConstant(g, True);",177],["/// let abs_difference = (f - g).abs();",176],["///   e.g. `\"FILE\"` for a `-o FILE` option",132],["drop(g);",135],["self.mem[i+6]=g; self.mem[i+7]=h;",150],["// if e.trace() is a no-op (e.g it is an no_jsmanaged_fields type)",156]],"useCount":35231},{"word":"gdb","context":[["// gdb-command:rbreak zzz",264],["// gdb-command:continue",2477],["// gdb-command:print x",866],["// gdb-command:finish",788],["// gdb-command:print arg1",537],["// gdb-command:print arg2",521],["// gdb-command:print y",413],["// gdb-command:print *self",291],["// gdb-command:print a",248],["// gdb-command:run",854]],"useCount":20028},{"word":"generated","context":[["// This file was generated by gir (4d68d19) from gir-files (11e0e6d)",168],["* a reply to be generated. Any returned error will be",1130],["/* automatically generated by rust-bindgen */",646],["// This file was generated automatically from 'src/mako/api/lib.rs.mako'",276],["// This file was generated automatically from 'src/mako/cli/main.rs.mako'",269],["// Don't edit this file!  It is auto-generated by frameworks/rs/api/gen_runtime.",252],["// This file was generated by the CEF translator tool and should not be edited",224],["// This file was generated by gir (5e8c56e) from gir-files (71d73f0)",204],["// This file was generated by gir (17af302) from gir-files (11e0e6d)",154],["// This file was generated by gir (baa441b) from gir-files (11e0e6d)",154]],"useCount":12240},{"word":"generics","context":[["generics: generics,",597],["generics: self.generics.clean(cx),",301],["generics,",1208],["generics: &ast::Generics,",913],["generics: LifetimeBounds::empty(),",786],["pub generics: Generics,",681],["generics: generics,",597],["generics: &Generics,",383],["generics: self.generics.clean(cx),",301],["try!(self.print_generics(generics));",361]],"useCount":42452},{"word":"get","context":[["if cx.unreachable.get() {",1116],["let tp_ty = *substs.types.get(FnSpace, 0);",487],["match ty::get(ty).sty {",565],["(\"get\", Some(opt)) => {",709],["(\"get\",",709],["instance.get(|| {",872],["match ty::get(t).sty {",913],["self.cached_size.get()",913],["descriptor.get(|| {",1063],["match get(ty).sty {",1379]],"useCount":158479},{"word":"given","context":[["If the --package argument is given, then SPEC is a package id specification",112],["//given",158],["/// Try to resolve the type for the given node.",133],["/// Request that the given element receive focus once the current transaction is complete.",125],["// Close all pipelines at and beneath a given frame",124],["/// for the given pipeline (specifically the \"navigate\" algorithm).",115],["// Find the script channel for the given parent pipeline,",202],["//         /// Converts a string slice in a given base to an integer.",256],["// given",543],["/// Formats the value using the given formatter.",626]],"useCount":43124},{"word":"gl","context":[["use gl;",516],["use gleam::gl;",300],["use gl::types::*;",180],["let gl = &self.share.context;",162],["extern crate gl;",159],["type Id = gl::types::GLuint;",148],["fn to_glenum(&self) -> gl::types::GLenum {",142],["fn get_id(&self) -> gl::types::GLuint {",136],["let mut pixels = gl::read_pixels(0, 0,",129],["width as gl::types::GLsizei,",122]],"useCount":20214},{"word":"global","context":[["global: GlobalField,",309],["pub fn new(global: GlobalRef,",267],["pub fn Constructor(global: GlobalRef,",356],["let global = self.global();",424],["let global = self.global();",424],["let global = self.global.root();",433],["let global = self.global.root();",433],["global,",715],["global: false,",1170],["use dom::bindings::global::GlobalRef;",2346]],"useCount":30850},{"word":"gp","context":[["let gp = vals[3];",22],["gp: vec![\"alt\", \"fields\", \"key\", \"oauth-token\", \"pretty-print\", \"quota-user\", \"user-ip\"],",223],["gp: Vec<&'static str>,",268],["v.extend(self.gp.iter().map(|v|*v));",5447],["for param in &self.gp {",5447]],"useCount":11407},{"word":"h","context":[["HandlerPriority::new(&mut self.h[l])",183],["unsafe { h.add(); }",198],["/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none",200],["/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none",200],["if matches.opt_present(\"h\") || matches.opt_present(\"help\") {",204],["let mut h = s.handle(&rx);",204],["assert_eq!(s.wait2(false), h.id);",204],["opts.optflag(\"h\", \"help\", \"display this help and exit\");",207],["h",258],["if matches.opt_present(\"h\") {",300]],"useCount":23558},{"word":"handle","context":[["// FIXME(pcwalton): This has not been updated to handle the stacking context relative",134],["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["handle: handle,",403],["handle: handle,",403],["let mut h = s.handle(&rx);",204],["// Start another task to handle the connection",194],["self.ClearTimeout(handle);",178],["// XXXManishearth handle errors, if any (substep 2)",174],["/// Helper function to handle keyboard events.",140],["/// A handle to the information pertaining to page layout",128]],"useCount":39196},{"word":"handler","context":[["handler: sighandler_t) -> sighandler_t;",116],["element: handler,",108],["let handler = move |_: HyperRequest, response: HyperResponse| {",177],["fn handler(self: Box<Self>) {",234],["handler: handler,",283],["handler: handler,",283],["let (mut server, url) = make_server(handler);",481],["fn handler(self: Box<DocumentProgressHandler>) {",121],["runnable.handler()",145],["let handler = move |request: HyperRequest, mut response: HyperResponse| {",177]],"useCount":12375},{"word":"has","context":[["/// When called on this context, the context has had its inline-size set by the parent context.",247],["// Use a dummy value for `block_start`, since it has the static position.",210],["// If any of our input sources has an event pending, we'll perform another iteration",126],["whose parent has a PipelineId which does not correspond to a pipeline in the script",128],["/// The entry point for content to notify that a new load has been requested",128],["// FIXME(pcwalton): This has not been updated to handle the stacking context relative",134],["/// ISize has already been calculated. We now calculate the margins just",136],["// the size of the discriminant value is machine dependent, this has be taken into account when",147],["/// Returns true if this flow has no children.",174],["// Wait until our mock resource task has sent the image to the image cache",190]],"useCount":57655},{"word":"hash","context":[["hash: hash,",245],["use std::hash::{Hash, Hasher};",580],["use std::hash;",355],["use std::hash::Hash;",877],["fn hash(&self, state: &mut S) {",832],["fn hash<H: Hasher>(&self, state: &mut H) {",761],["//     #[unstable(feature = \"hash\", reason = \"module was recently redesigned\")]",682],["//                 fn hash<H: hash::Hasher>(&self, state: &mut H) {",594],["//                     Hash::hash(&self[..], state)",594],["//                 fn hash<H: hash::Hasher>(&self, state: &mut H) {",594]],"useCount":37344},{"word":"have","context":[["// can't guarantee we got 15, so have to get what we got.",131],["panic!(\"Unscanned text fragments should have been scanned by now!\")",379],["// Instead of pre-determining this, we just disable the lint. It's manually tuned to not have any",276],["//                         // would have otherwise (i.e. signal any exception",256],["//                         // it would have otherwise).",256],["// We have to use from_str until base-2 exponents",224],["//         // These cases only have 1 permutation each, so we can't do anything.",188],["/// called on this flow, all child flows have had their minimum and preferred inline-sizes set.",162],["// Non-auto margin-block-start and margin-block-end values have already been",146],["/// TODO(pcwalton): Only wait for style recalc, since we have off-main-thread layout.",142]],"useCount":77056},{"word":"head","context":[["try!(self.end()); // end the head-ibox",176],["try!(self.head(\"\"));",327],["try!(self.head(&visibility_qualified(item.vis,",172],["Some(head)",172],["tester.head = tail_pos;",165],["if self.tail == self.head {",148],["try!(self.head(visibility_qualified(item.vis,",141],["</head>",129],["head += 1;",129],["self.v = head;",126]],"useCount":17903},{"word":"header","context":[["info!(\" - {}\", header);",151],["use header;",137],["use header::Headers;",139],["header: header,",150],["use header::Header;",114],["use header::{Header, HeaderFormat};",133],["use hyper::header::Headers;",394],["header: header,",150],["use hyper::header::ContentType;",205],["header! {",239]],"useCount":15040},{"word":"headers","context":[["let mut headers = Headers::new();",1203],["headers,",174],["Ok(MockRequest::new(ResponseType::WithHeaders(content, headers)))",179],["/// let mut headers = Headers::new();",185],["headers: Headers,",200],["\"headers\": {},",285],["headers: headers,",331],["pub headers: Headers,",333],["headers: Headers::new(),",438],["headers: headers,",331]],"useCount":22151},{"word":"height","context":[["height,",230],["for y in 0..height {",230],["height",198],["&mut bounds.size.height,",198],["height: i32,",190],["bounds.size.height = image_size.height;",170],["pub height: u32,",315],["height: u32,",421],["height: height,",684],["height: height,",684]],"useCount":36538},{"word":"here","context":[["// NB: v is an *alias* of type t here, not a direct value.",110],["// take inline-size to be specified as the value computed here.",306],["//! // Values shown here are possibly random and not representative !",391],["//! // into the respective structure. Some of the parts shown here might not be applicable !",117],["// function here because the child has already translated floats past its border",120],["// If the unsafe block didn't drop things properly, we blow up here.",122],["// Being here means either there are no pending frames, or none of the pending",125],["// here.",160],["// Nothing to do here.",172],["// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.",257]],"useCount":36757},{"word":"hi","context":[["hi = e.span.hi;",485],["hi = self.span.hi;",599],["hi = self.span.hi;",599],["hi = self.last_span.hi;",724],["hi = self.last_span.hi;",724],["hi = e.span.hi;",485],["let hi = self.span.hi;",1153],["let hi = self.span.hi;",1153],["last_span.hi,",950],["span: mk_sp(lo, hi),",782]],"useCount":36986},{"word":"hidden","context":[["// TODO: Check whether the element is being rendered (i.e. not hidden).",82],["// Determine if the table cell should be hidden. Per CSS 2.1 ยง 17.6.1.1, this will be true",74],["#[doc(hidden)];",92],["border_style::T::none | border_style::T::hidden => {}",102],["#![doc(hidden)]",147],["#[doc(hidden)]",7898],["#[doc(hidden)] #[inline]",220],["Ok(SpecifiedValue::hidden) => Err(()),",72],["// *hasn't* received a size, it could be that the layer was hidden by script before the",74],["/// borrow is hidden.",86]],"useCount":11677},{"word":"html","context":[["//! Most optionals are are considered [Parts](trait.Part.html) which are identifiable by name, which will be sent to",276],["//!     * **[Parts](trait.Part.html)**",276],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["//! All structures provided by this library are made to be [enocodable](trait.RequestValue.html) and",276],["//! * **[Activities](trait.CallBuilder.html)**",276],["//! * **[Resources](trait.Resource.html)**",276],["//!     * creates [*Method Builders*](trait.MethodsBuilder.html) which in turn",276],["// https://html.spec.whatwg.org/multipage/#dom-windowtimers-setinterval",288],["content_type: (\"text\", \"html\"),",289]],"useCount":61981},{"word":"http","context":[["//! [builder-pattern]: http://en.wikipedia.org/wiki/Builder_pattern",276],["use hyper::http::RawStatus;",340],["let request_url = \"http://mozilla.com\";",229],["html_root_url = \"http://doc.rust-lang.org/nightly/\",",364],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["html_root_url = \"http://doc.rust-lang.org/nightly/\")]",400],["html_playground_url = \"http://play.rust-lang.org/\")]",486],["let url = Url::parse(\"http://mozilla.com\").unwrap();",685],["html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",",1051],["//! [wiki-pod]: http://en.wikipedia.org/wiki/Plain_old_data_structure",276]],"useCount":26112},{"word":"https","context":[["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.5",358],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.3",1448],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.10",1205],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.9",946],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.8",586],["html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",",441],["// https://dom.spec.whatwg.org/#dom-parentnode-queryselector",291],["// https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall",291],["// https://dom.spec.whatwg.org/#dom-parentnode-prepend",291]],"useCount":88872},{"word":"hyper","context":[["use hyper::header::Headers;",394],["hyper::Client::new()",543],["#[ignore_heap_size_of = \"Defined in hyper\"]",547],["use hyper::method::Method;",952],["extern crate hyper;",1584],["hyper::Client::with_connector(mock::TeeConnector {",538],["connector: hyper::net::HttpsConnector::<hyper::net::Openssl>::default()",532],["connector: hyper::net::HttpsConnector::<hyper::net::Openssl>::default()",532],["use hyper::status::StatusCode;",463],["use hyper::http::RawStatus;",340]],"useCount":12971},{"word":"i","context":[["let mut i = 0;",6438],["i -= 1;",1005],["i += 1u;",988],["i += 1;",7865],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["let mut i = 0u;",1097],["Some(i) => {",1230]],"useCount":255856},{"word":"i16","context":[["#[path = \"num/i16.rs\"]  pub mod i16;",118],["-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\",187],["pub type c_short = i16;",538],["*const i16,",114],["#[path = \"num/i16.rs\"]  pub mod i16;",118],["/// `i16`s are 2 bytes long.",106],["a: i16,",81],["ast::TyI16 => disr as i16 as Disr == disr,",82],["pub type int16_t = i16;",96],["x: i16,",104]],"useCount":17368},{"word":"i32","context":[["type T = i32;",1042],["pub type c_int = i32;",544],["#[repr(i32)] #[derive(Copy, Clone, Debug)] #[allow(unused_qualifications)]",522],["pub type wchar_t = i32;",491],["let (tx, rx) = channel::<i32>();",486],["pub fn uumain(args: Vec<String>) -> i32 {",471],["pub type pid_t = i32;",555],["level: i32,",630],["#[repr(i32)]",1762],["x: i32,",453]],"useCount":80087},{"word":"i64","context":[["pub type blkcnt_t = i64;",352],["pub type off_t = i64;",416],["pub type ptrdiff_t = i64;",363],["pub type time_t = i64;",387],["let mut temp: i64 = 0;",429],["pub type c_long = i64;",330],["pub type intmax_t = i64;",322],["pub type ssize_t = i64;",311],["pub type suseconds_t = i64;",284],["pub type c_longlong = i64;",536]],"useCount":35118},{"word":"i8","context":[["-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\",187],["pub type c_schar = i8;",535],["pub type c_char = i8;",574],["#[repr(i8)]",958],["fn execute(&self, cpu: &mut Cpu, _: i8) {",170],["#[path = \"num/i8.rs\"]   pub mod i8;",118],["#[path = \"num/i8.rs\"]   pub mod i8;",118],["// boolean SSA values are i1, but they have to be stored in i8 slots,",115],["*const i8,",108],["//             ::intrinsics::arith_offset(ptr as *mut i8, $by) as *mut _",96]],"useCount":18724},{"word":"id","context":[["id: ast::DUMMY_NODE_ID,",5401],["id: id,",3232],["id: id,",3232],["id: ast::NodeId,",3022],["id,",2789],["id: NodeId,",1675],["pub id: NodeId,",1459],["item.id,",1349],["id: PipelineId,",1089],["\"id\" => Some((\"id\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",910]],"useCount":283663},{"word":"ident","context":[["item.ident,",548],["ident: ident,",902],["ident,",1243],["ident: ast::Ident,",938],["ident: ident,",902],["let (ident, item_, extra_attrs) =",445],["try!(self.print_ident(item.ident));",442],["try!(self.print_ident(ident));",429],["let ident = self.parse_ident();",454],["pub ident: Ident,",509]],"useCount":83119},{"word":"identifier","context":[["segments: path.into_iter().map(|identifier| {",153],["identifier: identifier,",681],["Some(r##\"Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\"##),",114],["token::special_idents::invalid // no special identifier",115],["identifier:",128],["identifier: str_to_ident(\"b\"),",128],["identifier: ident,",137],["// First, parse an identifier.",172],["identifier,",209],["identifier: identifier,",681]],"useCount":16119},{"word":"idx","context":[["idx: uint,",1116],["Some(idx) => {",830],["Some(idx) => idx,",241],["idx += 1;",414],["let mut idx = 0;",406],["idx: usize,",403],["self.emit_seq_elt(idx, f)",383],["if idx == 0 {",331],["match idx {",324],["idx: 0,",269]],"useCount":48802},{"word":"if","context":[["if let Some(ref s) = self.super_type() {",1777],["if dry_run {",5735],["if self.c_object.is_null() ||",1267],["if let Err(field_err) = temp_cursor.set(&*key) {",2021],["if let Some((field_cursor_str, type_info)) = type_info {",2021],["if err.issues.len() > last_errc {",2021],["if value.is_none() {",2056],["if self.c_object.is_null() {",2227],["if key == *param {",5447],["if !found {",5658]],"useCount":824375},{"word":"ignore","context":[["// ignore-lexer-test FIXME #15679",442],["/// ```ignore",1304],["#[ignore]",1862],["```ignore",303],["#[ignore(cfg(windows))]",321],["/// ```rust,ignore",410],["// ignore-tidy-linelength",431],["ignore: false,",626],["// ignore-android: FIXME(#10381)",770],["//! ```ignore",1225]],"useCount":18525},{"word":"image","context":[["image: image,",165],["/// The channel on which the image cache can send messages to ourself.",205],["match image {",207],["use net_traits::image::base::Image;",226],["extern crate image;",528],["/// The port on which we receive messages from the image cache",205],["// Wait until our mock resource task has sent the image to the image cache",190],["// Wait until our mock resource task has sent the image to the image cache",190],["image: image,",165],["#[cfg(feature = \"image\")]",185]],"useCount":24855},{"word":"impl","context":[["impl ToCss for computed_value::T {",1137],["impl HttpRequestFactory for Factory {",667],["impl fmt::Display for Error {",663],["impl Foo {",640],["impl<",672],["impl ToComputedValue for SpecifiedValue {",2319],["impl ToCss for T {",743],["impl Window {",919],["impl ComputedValueAsSpecified for SpecifiedValue {}",988],["impl ToCss for SpecifiedValue {",2223]],"useCount":334620},{"word":"implementation","context":[["implementation: Default::default(),",128],["//         /// implementation artifacts make `x % y` illegal for `MIN /",256],["// Store the implementation info.",218],["// For any methods that use a default implementation, add them to",191],["/// default method or an implementation of a trait method), return the ID of",168],["// The default implementation is a no-op.",159],["/// Whether the underlying implementation (be it a file path, or something",128],["/// Records a trait-to-implementation mapping.",128],["self.implementation.or_init(|| DOMImplementation::new(self))",121],["/// A channel (the implementation of which is port-specific) through which messages can be sent",112]],"useCount":18530},{"word":"in","context":[["[FINISHED] debug [unoptimized + debuginfo] target(s) in [..]",729],["for kid in node.children() {",832],["% for side in [\"top\", \"right\", \"bottom\", \"left\"]:",968],["for kvarg in opt.values_of(\"kv\").unwrap_or(Vec::new()).iter() {",1299],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["in",2944],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["for param in &self.gp {",5447]],"useCount":523072},{"word":"index","context":[["index += 1;",801],["index: index,",682],["index: index,",682],["index: usize,",673],["self.index += 1;",545],["index: 0,",448],["index",418],["add_to_index(item, rbml_w, index);",412],["Some(index) => {",399],["let mut index = 0;",372]],"useCount":89242},{"word":"infcx","context":[["infcx: &InferCtxt<'a,'tcx>,",143],["let infcx = infer::new_infer_ctxt(tcx);",254],["self.infcx.tcx",182],["infcx: infcx,",159],["let infcx = selcx.infcx();",154],["infcx: infcx,",159],["let infcx = selcx.infcx();",154],["fcx.infcx().resolve_type_vars_if_possible(&t))",150],["fcx.infcx().ty_to_string(t_1))",149],["infer::common_supertype(fcx.infcx(),",146]],"useCount":23930},{"word":"infer","context":[["use middle::infer;",631],["use middle::typeck::infer;",405],["let infcx = infer::new_infer_ctxt(tcx);",254],["origin: infer::SubregionOrigin<'tcx>,",201],["origin: infer::TypeOrigin,",192],["use middle::infer::InferCtxt;",150],["use middle::typeck::infer::sub::Sub;",150],["// See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs",162],["let origin = infer::RelateOutputImplTypes(obligation.cause.span);",164],["snapshot: &infer::CombinedSnapshot)",186]],"useCount":17160},{"word":"info","context":[["let block_flow = info.flow_ref.as_block();",548],["--emit=dep-info,link \\",403],["SpecificFragmentInfo::InlineAbsoluteHypothetical(ref mut info) => {",338],["SpecificFragmentInfo::InlineBlock(ref mut info) => {",317],["// compile-flags:-Z extra-debug-info",315],["info: *mut ::libc::c_int)",305],["SpecificFragmentInfo::InlineAbsolute(ref mut info) => {",271],["SpecificFragmentInfo::InlineBlock(ref info) => {",269],["SpecificFragmentInfo::ScannedText(ref info) => {",261],["// Store the implementation info.",218]],"useCount":31201},{"word":"information","context":[["//! // As the method needs a request, you would usually fill it with the desired information",117],["/// For more information, see `TcpStream::set_timeout`",141],["/// For more information on formatters, see [the module-level documentation][module].",135],["/// A handle to the information pertaining to page layout",128],["// NB see the slice::hack module in slice.rs for more information",114],["opts.optflag(\"V\", \"version\", \"output version information and exit\");",199],["// imag - the personal information management suite for the commandline",211],["// more information.",226],["/// information.",248],["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276]],"useCount":17301},{"word":"init","context":[["env_logger::init().unwrap_or(());",398],["let _ = env_logger::init();",473],["env_logger::init().unwrap();",658],["init: init,",138],["pub unsafe fn init() {",168],["expect_ok(config, &[\"rustup-init\", \"-y\"]);",182],["init();",232],["match local.init {",309],["pub fn init() {",336],["let _ = ::env_logger::init();",363]],"useCount":17752},{"word":"inline","context":[["#[fixed_stack_segment] #[inline(never)]",719],["//             #[inline(always)]",1042],["#[fixed_stack_segment]; #[inline(never)];",1069],["//         #[inline(always)]",1280],["#[inline(never)]",2550],["//         #[inline]",6800],["//                 #[inline]",7052],["//     #[inline]",12217],["#[inline(always)]",21706],["#[inline]",212428]],"useCount":324352},{"word":"inner","context":[["match item.inner {",478],["inner: inner,",446],["&self.inner",402],["//             inner: GenericSplitN {",376],["match self.inner {",365],["fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }",314],["mod inner {",275],["self.inner.read(buf)",268],["inner: inner,",446],["let (inner, next) = self.parse_inner_attrs_and_next();",218]],"useCount":55432},{"word":"input","context":[["try!(input.parse_nested_block(|input| {",1832],["try!(input.parse_nested_block(|input| {",1832],["pub fn parse(_context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue, ()> {",1378],["try!(input.expect_comma());",1374],["if input.try(|input| input.expect_ident_matching(\"none\")).is_ok() {",944],["if input.try(|input| input.expect_ident_matching(\"none\")).is_ok() {",944],["if input.try(|input| input.expect_ident_matching(\"none\")).is_ok() {",944],["pub fn parse(_: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue,()> {",804],["input: &ISizeConstraintInput)",702],["'input,",643]],"useCount":104787},{"word":"inputs","context":[["inputs: input_args,",117],["//TODO: set the editing position for text inputs",122],["let mut inputs = Vec::new();",129],["inputs: Vec::new(),",134],["inputs: Vec<ast::Arg> ,",176],["for arg in &decl.inputs {",189],["for arg in decl.inputs.iter() {",233],["inputs: Arguments {",246],["inputs: inputs,",656],["inputs: inputs,",656]],"useCount":19411},{"word":"insert","context":[["m.insert(i, i);",379],["assert!(b.insert(3));",389],["/// a.insert(1, \"a\");",393],["assert!(m.insert(1, 2));",394],["assert!(a.insert(5));",582],["/// map.insert(1, \"a\");",556],["assert!(a.insert(1));",523],["assert!(a.insert(11));",516],["assert!(a.insert(3));",481],["scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);",457]],"useCount":78032},{"word":"instead","context":[["/// * upper - Use `E` instead of `e` for the exponent sign",106],["//         /// the numeric bounds instead of overflowing.",256],["//         /// at the numeric bounds instead of overflowing.",256],["//TODO: if not in document, use root ancestor instead of document",149],["use the || { ... } closure form instead\");",136],["/// Calls `repair_style` and `bubble_inline_sizes`. You should use this method instead of",132],["/// predicate instead.",131],["#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",",114],["// Calculate the absolute value of each digit instead of only",100],["// (instead of passing `None`)? Probably.",99]],"useCount":17672},{"word":"int","context":[["static MAX: int = 10;",197],["a: int,",257],["let mut m: DList<int> = DList::new();",246],["let (tx, rx) = channel::<int>();",680],["x: int",309],["y: int,",312],["let (tx, rx) = sync_channel::<int>(0);",579],["x: int,",593],["let (tx, rx) = sync_channel::<int>(1);",194],["let mut i: int = 0;",187]],"useCount":66546},{"word":"integer","context":[["//         /// wrapping the truncated bits to the end of the resulting integer.",256],["//         /// Checked integer division. Computes `self / other`, returning `None`",256],["//         /// Converts an integer from little endian to the target's endianness.",256],["//         /// Checked integer multiplication. Computes `self * other`, returning",256],["//         /// Returns the largest value that can be represented by this integer type.",256],["//         /// Converts an integer from big endian to the target's endianness.",256],["//         /// Checked integer subtraction. Computes `self - other`, returning",256],["//         /// integer.",256],["call = call.max_results(arg_from_str(value.unwrap_or(\"-0\"), err, \"max-results\", \"integer\"));",827],["//         /// Returns the smallest value that can be represented by this integer type.",256]],"useCount":16654},{"word":"into","context":[["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["//! The API is structured into the following primary items:",276],["// Write the result into the def map.",156],["name: name.into(),",169],["/// Encodes a json value into a string",203],["Err(e) => Err(e).into(),",243],["// Not the primary fragment, so we do not take the noncontent size into account.",264],[".help(\"Output all server communication to standard error. `tx` and `rx` are placed into the same stream.\")",268],["//! To use this library, you would put the following lines into your `Cargo.toml` file:",276],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276]],"useCount":63970},{"word":"into_iter","context":[["Vec::new().into_iter()",171],[".into_iter()",1368],["//                 fn into_iter(self) -> IterMut<'a, T> {",627],["//                 fn into_iter(self) -> Iter<'a, T> {",627],["fn into_iter(self) -> Self::IntoIter {",317],["fn into_iter(self) -> IntoIter<T> {",266],["self.into_iter()",185],["return out.into_iter();",233],["out.into_iter()",253],["fn into_iter(self) -> Iter<'a, T> {",264]],"useCount":23124},{"word":"intrinsics","context":[["fn type_id(&self) -> ::std::intrinsics::TypeId {",118],["use intrinsics;",613],["//                 intrinsics::overflowing_mul(self, rhs)",256],["//                 intrinsics::overflowing_add(self, rhs)",256],["use std::intrinsics;",242],["#![feature(intrinsics)]",240],["use unstable::intrinsics;",186],["//                     intrinsics::cttz16(self as u16 | 0x100) as u32",128],["ccx.intrinsics().borrow_mut().insert($name, f.clone());",112],["//                 intrinsics::overflowing_sub(self, rhs)",256]],"useCount":16952},{"word":"invalid","context":[["// If the entire flow tree is invalid, then it will be reflowed anyhow.",108],["/// // ๐mus<invalid>ic<invalid>",102],["/// // ๐mus<invalid>ic<invalid>",102],["*     If the input is invalid, then ctx remains unchanged.",102],["if it.ident.name == parse::token::special_idents::invalid.name {",102],["// Handle conditions where the entire flow tree is invalid.",111],["// invalid input.",114],["token::special_idents::invalid // no special identifier",115],["/// would also make any pointers to it invalid.",146],["/// This can be used to easily check for invalid stale data.",157]],"useCount":11528},{"word":"io","context":[["use io;",989],["fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",1051],["writeln!(io::stderr(), \"{}\\n\", opt.usage()).ok();",1167],["use std::io::Write;",1987],["use std::io::Read;",2282],["use std::io::prelude::*;",3576],["use std::io;",7031],["/// # fn foo() -> std::io::Result<()> {",988],["use std::io::{self, Write};",977],["use std::io::{Read, Write};",875]],"useCount":94930},{"word":"is","context":[["* This file is part of the uutils coreutils package.",625],["while !try!(is.eof()) {",914],["let (field_number, wire_type) = try!(is.read_tag_unpack());",914],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["// Param is passed by value, moved",3078],["// This file is part of Parity.",1469],["// If field is not initialized, it is initialized with default value first.",1368],["// If field is not initialized, it is initialized with default value first.",1368],["fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {",903],["// This Source Code Form is subject to the terms of the Mozilla Public",794]],"useCount":552552},{"word":"is_empty","context":[["assert!(m.is_empty());",362],["pub fn is_empty(&self) -> bool { self.len() == 0 }",371],["/// assert!(v.is_empty());",469],["if self.is_empty() {",483],["fn is_empty(&self) -> bool {",690],["pub fn is_empty(&self) -> bool {",1513],["/// assert!(a.is_empty());",267],["if fields.is_empty() {",275],["if !consecutive_siblings.is_empty() {",300],["if self.0.is_empty() {",361]],"useCount":40072},{"word":"is_none","context":[["if horizontal.is_none() {",323],["if !i_arg.is_none() {",155],["if vertical.is_none() {",172],["if style.is_none() {",210],["assert!(m.insert(1, 2).is_none());",250],["if color.is_none() {",365],["assert!(it.next().is_none());",764],["/// assert!(it.next().is_none());",862],["if value.is_none() {",2056],["} else if vertical.is_none() {",151]],"useCount":30788},{"word":"is_null","context":[["if !self.c_object.is_null() {",801],["if self.c_object.is_null() {",2227],["if self.c_object.is_null() ||",1267],["if tmp_pointer.is_null() {",655],["if ptr.is_null() {",513],["if !self.c_object.is_null() &&",420],["if tmp.is_null() {",316],["if c_object.is_null() {",267],["self.c_object.is_null()",267],["if !c_object.is_null() {",267]],"useCount":20343},{"word":"is_ok","context":[["if input.try(|input| input.expect_ident_matching(\"normal\")).is_ok() {",372],["assert!(res.is_ok(), res.unwrap_err());",162],["Token::Percentage(ref value) if context.is_ok(value.unit_value) =>",185],["assert!(r.is_ok());",220],["Token::Dimension(ref value, ref unit) if context.is_ok(value.value) =>",268],["assert!(p.is_ok());",304],["assert!(res.is_ok());",357],["assert!(result.is_ok());",979],["if input.try(|input| input.expect_ident_matching(\"none\")).is_ok() {",944],["if input.try(|input| input.expect_ident_matching(\"auto\")).is_ok() {",430]],"useCount":12070},{"word":"is_some","context":[["if self.devtools_chan.is_some() {",126],["while self.port.try_recv_compositor_msg().is_some() {}",129],["if opts::get().output_file.is_some() || opts::get().exit_after_load {",132],["assert!(dest.is_some());",154],["*found = item.is_some();",154],["assert!(it.next().is_some());",169],["let args = if os::getenv(\"RUST_BENCH\").is_some() {",200],["if arg_name.is_some() && flag.is_some() {",268],["if result.is_some() {",283],["if arg_name.is_some() && flag.is_some() {",268]],"useCount":24296},{"word":"isize","context":[["FragmentIndex(fragment_index as isize));",103],["//             data: self.as_ptr().offset(begin as isize),",88],["x: isize,",211],["//                 end: slice_offset!(p, self.len() as isize),",188],["///    let x: &mut isize = ...;",123],["env.t_fn(&[t_rptr_bound1], env.tcx().types.isize));",119],["//         transmute(self.repr().data.offset(index as isize))",94],["a: isize,",92],["//         transmute((self.repr().data as *mut T).offset(index as isize))",94],["y: isize,",111]],"useCount":20636},{"word":"issues","context":[["err.issues.push(field_err);",2021],["let last_errc = err.issues.len();",2021],["if err.issues.len() > last_errc {",2021],["err.issues.remove(last_errc);",2021],["err.issues.push(CLIError::UnknownParameter(key.to_string(),",5447],["assert!(err.issues.len() == 0);",5447],["// TODO: remove elaborted bounds. Blocked on rust/issues#20671",204],["err.issues.push(CLIError::MissingCommandError);",268],["if err.issues.len() > 0 {",269],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896]],"useCount":24510},{"word":"it","context":[["it.span,",480],["// If field is not initialized, it is initialized with default value first.",1368],["match it.node {",1230],["/// assert!(it.next().is_none());",862],["assert_eq!(it.next(), None);",792],["assert!(it.next().is_none());",764],["it.next();",676],["* Otherwise, it stores the error if any.",546],["fn check_item(&mut self, cx: &Context, it: &ast::Item) {",485],["assert_eq!(it.size_hint(), (0, Some(0)));",401]],"useCount":220704},{"word":"item","context":[["item: &ast::Item,",536],["match item.node {",3571],["item.id,",1349],["let item = self.mk_item(lo,",1013],["item.span,",744],["visit::walk_item(self, item);",578],["fn visit_item(&mut self, item: &ast::Item) {",573],["Some(item) => {",556],["item.ident,",548],["match item {",505]],"useCount":110340},{"word":"items","context":[["for item in m.items.iter() {",194],["for item in &m.items {",172],["// Table items contribute table flow construction results.",588],["/// Fields common to all display items.",470],["items: items,",373],["items: items,",373],["items",302],["//! The API is structured into the following primary items:",276],["for item in items {",230],["for item in items.iter() {",207]],"useCount":37144},{"word":"iter","context":[["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["b.iter(|| {",9620],[".iter()",6704],["v.extend(self.gp.iter().map(|v|*v));",5447],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["use std::iter::repeat;",1335],["for kvarg in opt.values_of(\"kv\").unwrap_or(Vec::new()).iter() {",1299]],"useCount":239676},{"word":"iterator","context":[["let (lower, _) = iterator.size_hint();",287],["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]",1058],["iterator: &mut FragmentBorderBoxIterator,",601],["* @return  The iterator pointing to the last element",392],["* Set the current element in the iterator to the last element.",392],["* Get the next element of the iterator",392],["* Get the next element in the iterator. The member rem is",392],["* Return the iterator pointing to the last element",392],["/// An iterator over substrings of `self`, separated by characters",319],["sequential::iterate_through_flow_tree_fragment_border_boxes(layout_root, &mut iterator);",307]],"useCount":40130},{"word":"its","context":[["// reached its containing block.",116],["/// If the pattern allows a reverse search but its results might differ",116],["/// Iterates over this node and all its descendants, in preorder.",118],["// function here because the child has already translated floats past its border",120],["// its scope.",128],["/// messages on its port.",138],["/// An inline fragment that establishes an absolute containing block for its descendants (i.e.",152],["/// When called on this context, the context has had its inline-size set by the parent context.",247],["//!         // You can also just use its `Debug`, `Display` or `Error` traits",274],["reason = \"unsure about its place in the world\")]",295]],"useCount":34000},{"word":"itself","context":[["//         /// itself..",256],["// positioned, it would return a reference to itself in",115],["// color on an iframe element, while the iframe content itself has a default",103],["/// Any color value form computed values (except for the 'color' property itself)",97],["#[doc = \"Specifies whether this node has descendants (inclusive of itself) which \\",96],["Element,    // The first focus message - focus the element itself",96],["/// The element that has most recently requested focus for itself.",125],["//         /// a case, this function returns `MIN` itself.",256],["/// indices from `[mid, len)` (excluding the index `len` itself).",129],["/// the index `mid` itself) and the second will contain all",129]],"useCount":13137},{"word":"j","context":[["j -= 1;",477],["//             j -= 1;",188],["let mut j = 0;",383],["j += 1;",466],["if i == j {",125],["//         let mut j = self.len() - 1;",188],["//             j = b;",176],["//         let mut j = 0;",176],["($j:expr, $shift:expr) => {{",150],["let mut j = i;",127]],"useCount":17557},{"word":"join","context":[["assert_that(&p.root().join(\"target/doc\"), existing_dir());",151],["}).join();",713],["let input = tmpdir.join(\"in.txt\");",272],["let out = tmpdir.join(\"out.txt\");",272],["assert_that(p.process(cargo_dir().join(\"cargo\")).arg(\"build\"),",236],["t.join().ok().unwrap();",185],["thread.join();",171],["t.join();",171],["}).join().ok().unwrap();",170],["(s: $path:expr, $join:expr, $exp:expr) => (",158]],"useCount":28672},{"word":"js","context":[["use dom::bindings::js::JS;",203],["use dom::bindings::js::{Root, RootedReference};",232],["use js::jsval::JSVal;",290],["use dom::bindings::js::RootedReference;",312],["use dom::bindings::js::{JS, MutNullableHeap, Root};",374],["use js::rust::Runtime;",409],["use js::jsval::UndefinedValue;",462],["use dom::bindings::js::{JS, Root};",476],["use dom::bindings::js::{JSRef, Temporary};",684],["use dom::bindings::js::Root;",1755]],"useCount":16683},{"word":"json","context":[["\"headers\": {\"Content-Type\": \"application/json\"},",161],["use rustc_serialize::json::Json;",425],["use serde_json as json;",228],["/// Encodes a json value into a string",203],["use rustc_serialize::json::{Json, ToJson};",186],["use serialize::json;",448],["use rustc_serialize::json;",1069],["let mut object = json::value::Value::Object(Default::default());",2021],["let mut value = json::value::to_value(&output_schema);",4800],["json::to_writer_pretty(&mut ostream, &value).unwrap();",4800]],"useCount":24352},{"word":"just","context":[["/// ISize has already been calculated. We now calculate the margins just",136],["// Right now, just print to the console",126],["/// If no reflow has happened yet, this will just return the lock in",111],["/// If the lock was just used, and has been returned since there has been",111],["// so this can afford to be naive and just shut down the",136],["/// Calculate used value of inline-size just like we do for inline replaced elements.",306],["// Instead of pre-determining this, we just disable the lint. It's manually tuned to not have any",276],["//!         // You can also just use its `Debug`, `Display` or `Error` traits",274],["// For synchronous requests, this should not fire any events, and just store data",184],["// Don't warn about generated blocks, that'll just pollute the output.",152]],"useCount":32725},{"word":"k","context":[["key: k,",148],["k += 1;",235],["self.insert(k, v);",219],["for (k, v) in iter {",203],["match k {",157],["//         /// Returns `true` iff `self == 2^k` for some `k`.",128],["//         /// Returns `true` iff `self == 2^k` for some `k`.",128],["// 15 would be great, but we will definitely get 2^k - 1, for k >= 4, or else",131],["// 15 would be great, but we will definitely get 2^k - 1, for k >= 4, or else",131],["assert_eq!(*k, n);",149]],"useCount":27107},{"word":"key","context":[["match key {",6269],["let (key, value) = parse_kv_arg(&*parg, err, false);",5447],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["if let Err(field_err) = temp_cursor.set(&*key) {",2021],["let (key, value) = parse_kv_arg(&*kvarg, err, false);",2021],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["err.issues.push(CLIError::UnknownParameter(key.to_string(),",5447],["if key == *param {",5447]],"useCount":101484},{"word":"kid","context":[["self.set_flow_construction_result(&kid, ConstructionResult::None)",213],["for kid in node.children() {",832],["let kid_base = flow::mut_base(kid);",767],["for kid in self.base.child_iter() {",545],["for kid in self.children() {",335],["match kid.swap_out_construction_result() {",303],["for kid in self.block_flow.base.child_iter() {",282],["for kid in self.base.child_iter_mut() {",239],["self.used_crates.insert(kid);",201],["kid.assign_block_size_for_inorder_child_if_necessary(layout_context, thread_id);",183]],"useCount":17908},{"word":"kind","context":[["\"kind\" => Some((\"kind\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",1113],["kind,",346],["kind: ReportKind::ExplicitJemallocHeapSize,",380],["match field.node.kind {",499],["match variant.node.kind {",504],["kind: kind,",993],["kind: kind,",993],["match self.kind {",995],["match kind {",1094],["\"kind\" => Some((\"kind\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",1113]],"useCount":49743},{"word":"krate","context":[["visit::walk_crate(&mut visitor, krate);",408],["let cdata = cstore.get_crate_data(def.krate);",818],["if did.krate == ast::LOCAL_CRATE {",272],["if id.krate == ast::LOCAL_CRATE {",260],["krate: &ast::Crate,",249],["krate",230],["if def_id.krate == ast::LOCAL_CRATE {",224],["let krate = tcx.map.krate();",206],["let krate = tcx.map.krate();",206],["let cdata = cstore.get_crate_data(def_id.krate);",184]],"useCount":27341},{"word":"l","context":[["HandlerPriority::new(&mut self.h[l])",183],["fn visit_local(&mut self, l: &ast::Local) {",157],["Some(l) => {",158],["SpecifiedValue::Specified(l) => l.to_css(dest),",289],["SpecifiedValue::Specified(l) => l.to_css(dest),",289],["SpecifiedValue::Specified(l) =>",233],["Some(l) => l.to_css(dest),",233],["Some(l) => l.to_css(dest),",233],["computed_value::T(Some(l.to_computed_value(context)))",222],["let l = self.h.len()-1;",183]],"useCount":28541},{"word":"lang","context":[["#[lang=\"eh_personality\"]",183],["#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",264],["html_root_url = \"http://doc.rust-lang.org/nightly/\",",364],["html_root_url = \"http://doc.rust-lang.org/nightly/\")]",400],["html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",",441],["html_playground_url = \"http://play.rust-lang.org/\")]",486],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896],["html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",",1051],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["#[lang = \"panic_fmt\"]",134]],"useCount":16188},{"word":"last","context":[["scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);",457],["* last element.",392],["* Set the current element in the iterator to the last element.",392],["* @return  The iterator pointing to the last element",392],[".last()",450],["* Return the iterator pointing to the last element",392],["return Err(Error::Sys(Errno::last()));",341],["/// The last element returned, if any, will contain the remainder of the",140],["/// Initiate a new round of checking for elements requesting focus. The last element to call",125],["/// Reassign the focus context to the element that last requested focus during this",125]],"useCount":27569},{"word":"last_span","context":[["let lo = self.last_span.lo;",566],["hi = self.last_span.hi;",724],["last_span.hi,",950],["let last_span = self.last_span;",2204],["let last_span = self.last_span;",2204],["self.span_err(last_span,",545],["let hi = self.last_span.hi;",463],["span: mk_sp(lo, self.last_span.hi),",207],["let span = self.last_span;",178],["self.last_span.hi,",167]],"useCount":11998},{"word":"layer","context":[["// Set the size of the root layer.",95],["// Adjust the layer dimensions as necessary to correspond to the size of the window.",103],["/// The scrolling policy of this layer.",107],["/// Returns a layer ID for the given fragment.",109],["Some(ref mut layer) => {",118],["// layer the element belongs to, and have it send the scroll message to the",131],["for kid in &*layer.children() {",158],["if let Some(ref layer) = self.scene.root {",184],["layer: Rc<Layer<CompositorData>>,",267],["Some(ref layer) => {",271]],"useCount":17578},{"word":"layout","context":[["let page = layout::Page {",154],["/// Starts at zero, and increased by one every time a layout completes.",157],["/// Returns the interior of this node as a `LayoutJS`. This is highly unsafe for layout to",162],["let layout_data = layout_data_ref.as_mut().expect(\"no layout data\");",197],["/// Creates a new layout node with the same lifetime as this layout node.",199],["/// Creates a new layout node with the same lifetime as this layout node.",199],["use capnp::private::layout;",202],["/// This corresponds to `Reflow()` in Gecko and `layout()` in WebKit/Blink and should be",234],["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264],["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264]],"useCount":33047},{"word":"layout_context","context":[["pub layout_context: &'a LayoutContext<'a>,",449],["layout_context,",1807],["layout_context: &LayoutContext,",1337],["layout_context);",421],["let layout_context = LayoutContext::new(shared_layout_context);",384],["layout_context: &'a LayoutContext<'a>,",345],["let mut layout_context = self.build_shared_layout_context(&*rw_data,",336],["layout_context: &LayoutContext) {",326],["fn build_display_list(&mut self, layout_context: &LayoutContext) {",302],["layout_context: &LayoutContext)",537]],"useCount":18939},{"word":"left","context":[["for side in ['top', 'right', 'bottom', 'left'])}\">",157],["left: left,",183],["left: left,",183],["let left;",141],["left = right.clone();",194],["//         /// Panic-free bitwise shift-left; yields `self >> mask(rhs)`,",256],["//         /// Panic-free bitwise shift-left; yields `self << mask(rhs)`,",256],["//         /// Shifts the bits to the left by a specified amount, `n`,",256],["let left: ($($T,)+) = ($($T::default(),)+);",336],["% for side in [\"top\", \"right\", \"bottom\", \"left\"]:",968]],"useCount":31614},{"word":"len","context":[["my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;",844],["len: uint,",688],["pub fn len(&self) -> usize {",1483],["let len = value.compute_size();",871],["my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;",844],["let len = self.len();",1888],["assert!(err.issues.len() == 0);",5447],["let last_errc = err.issues.len();",2021],["if err.issues.len() > last_errc {",2021],["let len = self.len();",1888]],"useCount":226606},{"word":"length","context":[["length: 0,",352],["pub length :          u32,",415],["pub length :         u16,",852],["length: usize,",238],["length:",200],["length: *mut u32,",199],["self.length -= 1;",187],["use euclid::length::Length;",183],["self.length += 1;",175],["let mut length = 0;",319]],"useCount":42790},{"word":"let","context":[["let mut value = json::value::to_value(&output_schema);",4800],["let mut ostream = match writer_from_opts(opt.value_of(\"out\")) {",4816],["let protocol = CallType::Standard;",5346],["{let mut v = Vec::new();",5447],["let (key, value) = parse_kv_arg(&*parg, err, false);",5447],["let (tx, rx) = channel();",5539],["let mut found = false;",6098],["let x = m!(1 => 2);",3231],["let mut i = 0;",6438],["let p = project(\"foo\")",7347]],"useCount":2102195},{"word":"level","context":[["// refer to the AUTHORS file at the top-level directory of this distribution.",242],["level: level,",315],["level: level,",315],["level: StackingLevel,",476],["// file at the top-level directory of this distribution.",628],["level,",728],["level: i32,",630],["level: u32,",188],["// file at the top-level directory of this distribution and at",59409],["match level {",239]],"useCount":89178},{"word":"lhs","context":[["try!(self.print_expr(&**lhs));",128],["lhs: ValueRef,",955],["if cx.unreachable.get() { return _Undef(lhs); }",364],["lhs",267],["return _Undef(lhs);",244],["ast::ExprBinary(op, ref lhs, ref rhs) => {",243],["ast::ExprAssign(ref lhs, ref rhs) => {",163],["lhs: &ast::Expr,",132],["constrain_call(rcx, expr, Some(&**lhs),",151],["cast_shift_rhs(op, lhs, rhs,",162]],"useCount":19281},{"word":"lib","context":[[".file(\"a/src/lib.rs\", \"\");",346],[".file(\"a/src/lib.rs\", \"\")",401],[".file(\"bar/src/lib.rs\", r#\"",403],[".file(\"src/lib.rs\", \"",698],["#[crate_type = \"lib\"];",343],[".file(\"src/lib.rs\", \"\");",796],["#![crate_type = \"lib\"]",821],[".file(\"src/lib.rs\", r#\"",1427],["[lib]",2071],[".file(\"src/lib.rs\", \"\")",2196]],"useCount":26782},{"word":"libc","context":[["::libc::c_uint =",734],["-> *mut ::libc::c_void;",962],["use std::libc;",567],["use libc::c_int;",1038],["-> ::libc::c_int>,",1683],["-> ::libc::c_int;",4464],["use libc;",4906],["extern crate libc;",5198],["use libc::c_void;",665],["::libc::c_int;",592]],"useCount":119990},{"word":"library","context":[["//! To use this library, you would put the following lines into your `Cargo.toml` file:",276],["* to any user-written call in the code) into the runtime library, to perform",79],["&OpensslError::UnknownError { ref library, ref function, ref reason } => {",89],["//~^ WARNING use of unstable library feature",91],["//~^ ERROR use of unstable library feature 'test_feature': text",91],["// For a library crate, this is always none",109],["#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",",114],["//! library.",133],["//~^ ERROR use of unstable library feature",212],["//! All structures provided by this library are made to be [enocodable](trait.RequestValue.html) and",276]],"useCount":12184},{"word":"lifetime","context":[["// This transmute is used to cheat the lifetime restriction.",111],["lifetime: None,",133],["//! tree, and manages the entire lifetime of pages in the frame tree from initial request to",116],["let lifetime = self.get_lifetime();",202],["/// Creates a new layout node with the same lifetime as this layout node.",199],["lifetime: Option<ast::Lifetime>,",113],["//! a simple whitelist of allowed operations, along with some lifetime magic to prevent nodes from",108],["lifetime,",108],["lifetime: ast::Lifetime,",261],["let lifetime = this.parse_lifetime();",110]],"useCount":30784},{"word":"lifetimes","context":[["lifetimes: lifetimes,",503],["lifetimes: opt_vec::Empty,",112],["lifetimes: Vec<ast::Lifetime>,",125],["pub lifetimes: Vec<LifetimeDef>,",128],["lifetimes: lifetime_defs,",139],["lifetimes: f.lifetimes.clone(),",144],["lifetimes: f.lifetimes.clone(),",144],["pub lifetimes: Vec<Lifetime>,",214],["lifetimes: Vec::new(),",917],["lifetimes: lifetimes,",503]],"useCount":13313},{"word":"like","context":[["/// Additional libraries might provide more complex patterns like",204],["/// Calculate used value of inline-size just like we do for inline replaced elements.",306],["//! Generally speaking, you can invoke *Activities* like this:",276],["/// like for non-replaced blocks.",139],["/// - Unix-like systems (Linux, Android, Mac OSX): read directly from",120],["// inefficient. What we really want is something like \"nearest ancestor element that",110],["/// like concatenating ill-formed UTF-16 strings effectively would.",104],["// This makes things like contentDocument work correctly.",102],["/// as having reached their containing block. This is needed in order to handle cases like:",96],["uses it like a function name\",",95]],"useCount":32985},{"word":"line","context":[["let mut line = String::new();",363],["loc.line as c_uint,",378],["line: &Line,",232],["for fragment_index in line.range.each_index() {",237],["scan_char(line, ':', &mut i) &&",244],["scan_integer(line, &mut i) &&",244],["// check-tidy: no specs after this line",348],["line: line,",361],["line: line,",361],["for line in reader.lines() {",228]],"useCount":48226},{"word":"lines","context":[["for line in reader.lines() {",228],["lines: Vec::new(),",205],["self.lines.len());",171],["self.lines.len(),",160],["for line in file.lines() {",158],["self.lines = Vec::new();",149],["for line in lines {",144],["for line in input.lines() {",118],["let fm = &*lines.file;",109],["//! To use this library, you would put the following lines into your `Cargo.toml` file:",276]],"useCount":18322},{"word":"link","context":[["// https://html.spec.whatwg.org/multipage/#selector-link",162],["use rustc_trans::back::link;",153],["#[link(name = \"rust_test_helpers\")]",143],["match self.link {",143],["#[link(name = \"c\")]",142],["use back::link;",198],["#[phase(plugin, link)]",280],["--emit=dep-info,link \\",403],["\"self-link\" => Some((\"selfLink\", JsonTypeInfo { jtype: JsonType::String, ctype: ComplexType::Pod })),",442],["#[phase(plugin, link)] extern crate log;",174]],"useCount":17283},{"word":"link_name","context":[["#[link_name = \"_fileno\"]",76],["#[link_name = \"_creat\"]",76],["#[link_name = \"_lseek\"]",76],["#[link_name =",7539],["#[link_name = \"kernel32\"]",122],["#[link_name = \"m\"]",102],["#[link_name = \"_execve\"]",76],["#[link_name = \"_open\"]",76],["#[link_name = \"_read\"]",76],["#[link_name = \"_getpid\"]",76]],"useCount":19648},{"word":"lint","context":[["lint::LevelSource>>,",73],["&mut |id, sp, stab| self.lint(cx, id, sp, stab));",101],["pub mod lint;",71],["pub use rustc::lint;",68],["use middle::lint;",68],["Available lint options:",68],[".add_lint(lint::builtin::UNREACHABLE_CODE,",154],["use rustc::lint;",160],["use lint;",466],["// Instead of pre-determining this, we just disable the lint. It's manually tuned to not have any",276]],"useCount":11734},{"word":"list","context":[["list",138],["/// list if necessary.",195],["/// The list of fragments.",146],["// child list yet, causing the find() to fail.",126],["list: &mut DisplayList,",118],["/// A list of data pertaining to loads that have not yet received a network response",116],["(\"list\", Some(opt)) => {",788],["(\"list\",",788],["let q = &list.media_queries[0];",776],["assert!(list.media_queries.len() == 1, css.to_owned());",670]],"useCount":43781},{"word":"little","context":[["Mary had a little lamb, Little lamb",397],["let data = \"\\nMรคry hรคd รค little lรคmb\\nLittle lรคmb\\n\";",331],["let s = \"เธจเนเธเธขไธญๅViแปt Nam; Mary had a little lamb, Little lamb\";",447],["//         /// On big endian this is a no-op. On little endian the bytes are",512],["//         /// On little endian this is a no-op. On big endian the bytes are",512],["//         /// if cfg!(target_endian = \"little\") {",512],["let s = \"Mary had a little lamb, Little lamb, little-lamb.\";",296],["let s = \"Mary had a little lamb, Little lamb, little-lamb.\";",296],["//             if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }",256],["//             if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }",256]],"useCount":12985},{"word":"lldb","context":[["// min-lldb-version: 310",552],["// lldb-command:print a",234],["// lldb-command:print *self",261],["// lldb-command:print y",375],["// lldb-command:print arg2",452],["// lldb-command:print arg1",455],["// lldb-command:print z",217],["// lldb-command:run",592],["// lldb-command:print x",723],["// lldb-command:continue",1995]],"useCount":13293},{"word":"llfn","context":[["llvm::SetLinkage(llfn, llvm::ExternalLinkage);",111],["pub llfn: ValueRef,",117],["fn apply_llfn(&self, idx: c_uint, llfn: ValueRef) {",117],["add_argument_attributes(&tys, llfn);",130],["llfn: ValueRef) {",133],["return llfn;",155],["set_inline_hint(llfn);",165],["llfn: ValueRef,",265],["llfn,",740],["llfn",1036]],"useCount":11602},{"word":"llvm","context":[["//             // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)",128],["use lib::llvm::llvm;",219],["if cx.unreachable.get() { return llvm::LLVMGetUndef(dest_ty.to_ref()); }",437],["if cx.unreachable { return llvm::LLVMGetUndef(DestTy.to_ref()); }",133],["llvm::LLVMDIBuilderCreateTemplateTypeParameter(",134],["return llvm::LLVMGetUndef(Type::nil(cx.ccx()).to_ref());",161],["use llvm::ValueRef;",162],["llvm::LLVMSetGlobalConstant(g, True);",177],["use lib::llvm::llvm;",219],["use llvm;",836]],"useCount":54971},{"word":"ln","context":[["x => (x + ((x * x) - 1.0).sqrt()).ln(),",125],["/// ln(2.0)",161],["/// ln(10.0)",161],["assert!(ln.is_valid());",180],["let ln = self.len();",186],["ln: LiveNode,",330],["let ln = self.live_node(expr.id, expr.span);",396],["self.init_from_succ(ln, succ);",135],["/// let abs_difference = (e.ln() - 1.0).abs();",132],["/// // ln(e) - 1 == 0",132]],"useCount":15376},{"word":"lo","context":[["let lo = span.lo + BytePos(1);",340],["let lo = self.span.lo;",2821],["let lo = self.span.lo;",2821],["let item = self.mk_item(lo,",1013],["span: mk_sp(lo, hi),",782],["let lo = self.last_span.lo;",566],["let lo = self.last_span.lo;",566],["span: mk_sp(lo, hi)",410],["let lo = span.lo + BytePos(1);",340],["lo: BytePos,",335]],"useCount":32352},{"word":"load","context":[["if let Some(ref mut load) = loads.iter_mut().find(|load| load.pipeline_id == id) {",391],["let idx = self.incomplete_loads.borrow().iter().position(|load| {",201],["let _ = load(&load_data,",174],["let t = self.top.load(SeqCst);",172],["let _ = load(",157],["let a = self.array.load(SeqCst);",144],["/// For communicating load url messages to the constellation",137],["let load = self.incomplete_loads.borrow_mut().remove(idx);",223],["if let Some(ref mut load) = loads.iter_mut().find(|load| load.pipeline_id == id) {",391],["if let Some(ref mut load) = loads.iter_mut().find(|load| load.pipeline_id == id) {",391]],"useCount":26080},{"word":"load_data","context":[["let mut load_data = LoadData::new(LoadContext::Browsing, url.clone(), &HttpTest);",161],["load_data: LoadData) {",162],["load_data: LoadData,",385],["body: <[_]>::to_vec(&*load_data.data.unwrap())",171],["let _ = load(&load_data,",174],["load_data.method = Method::Post;",175],["load_data,",195],["let load_data = LoadData::new(LoadContext::Browsing, url.clone(), &HttpTest);",218],["load_data.url.clone());",232],["load_data.data = Some(<[_]>::to_vec(\"Yay!\".as_bytes()));",285]],"useCount":14153},{"word":"local","context":[["local: local,",195],["local: local,",195],["let local = at(time);",232],["ast::DeclLocal(ref local) => {",139],["use rt::local::Local;",323],["local: false,",163],["let p = project(\"local\")",167],["match local.init {",309],["name = \"local\"",170],["use std::rt::local::Local;",188]],"useCount":31425},{"word":"local_def","context":[["let method_def_id = ast_util::local_def(id);",124],["Some(local_def(item.id)),",117],["stability: get_stability(cx, ast_util::local_def(self.id)),",123],["def_id: ast_util::local_def(self.id),",702],["use syntax::ast_util::local_def;",291],["let def_id = ast_util::local_def(id);",115],["let def_id = local_def(item.id);",170],["id: ast_util::local_def(ast_variant.node.id),",166],["let def_id = local_def(it.id);",130],["local_def(it.id),",127]],"useCount":12051},{"word":"local_name","context":[["assert!(&**local_name == local_name.to_ascii_lowercase());",248],["local_name.make_ascii_lowercase();",145],["let (namespace, prefix, local_name) =",150],["if xml_name_type(&local_name) == InvalidXMLName {",228],["assert!(*local_name == local_name.to_ascii_lowercase());",287],["assert!(*local_name == local_name.to_ascii_lowercase());",287],["local_name: Atom,",291],["match attr.local_name() {",935],["assert!(&**local_name == local_name.to_ascii_lowercase());",248],["let (namespace, prefix, local_name) = try!(validate_and_extract(namespace,",152]],"useCount":17324},{"word":"location","context":[["props.location, is_repeating, is_composing,",98],["location searched: registry file://[..]",108],["// Compute location of the baseline.",89],["bind_texture_uniform(ctxt, &**texture, sampler, location, program, texture_bind_points)",295],["use dom::location::Location;",262],["// If this is an iframe, send a mozbrowser location change event.",204],["location: Default::default(),",191],["props.location,",152],["Referenced variable location is not an alloca!\");",113],["location: MutNullableHeap<JS<Location>>,",109]],"useCount":13668},{"word":"lock","context":[["assert_eq!(*lock, 1);",178],["lock.cond.wait();",182],["let mut actors = actors.lock().unwrap();",161],["let _rw_data = possibly_locked_rw_data.lock();",186],["assert_eq!(*lock, 2);",217],["let mut rw_data = possibly_locked_rw_data.lock();",388],["let rw_data = rw_data.lock().unwrap();",420],["lock: ::protobuf::lazy::ONCE_INIT,",2066],["let mut stdout = stdout.lock();",157],["let actors = actors.lock().unwrap();",151]],"useCount":29287},{"word":"log","context":[["fn log(&self, record: &LogRecord) {",184],["/// This sort is `O(n log n)` worst-case and stable, but allocates",105],["#[cfg(test)] #[phase(plugin, link)] extern crate log;",109],["#[phase(plugin, link)] extern crate log;",174],["use log;",282],["#[macro_use] extern crate log;",1122],["extern crate log;",2476],["#[cfg(test)] #[macro_use] extern crate log;",150],["if log_enabled!(log::LogLevel::Info) {",146],["let log = Log::new();",118]],"useCount":11565},{"word":"longhands","context":[["use super::longhands;",116],["% for prop in data.longhands:",129],["longhands::position::SpecifiedValue::absolute |",134],["% for property in style_struct.longhands:",156],["root_font_size: longhands::font_size::get_initial_value(),",158],["use properties::longhands;",224],["pub fn clone_${ident}(&self) -> longhands::${ident}::computed_value::T {",238],["pub fn set_${ident}(&mut self, v: longhands::${ident}::computed_value::T) {",238],["% for longhand in style_struct.longhands:",458],["% for property in data.longhands:",616]],"useCount":13524},{"word":"loop","context":[["loop;",295],["loop",182],["loop {}",331],["'outer: loop {",411],["loop {",31964],["// loop {",138],["'main: loop {",167],["// FIXME(eddyb) #12808 Integrate privacy into this auto-deref loop.",139],["//     loop {",124],["//! loop {",123]],"useCount":49599},{"word":"m","context":[["out.push(m);",620],["check_links(&m);",624],["let mut m = HashMap::new();",1157],["Ok(ref m) => {",1271],["Ok(m) => m,",1319],["Ok(m) => m,",1319],["let x = m!(1 => 2);",3231],["let mut m = TreeMap::new();",557],["match m {",570],["m",601]],"useCount":114002},{"word":"macro","context":[["// apply a given mark to the given item. Used following the expansion of a macro.",108],["&format!(\"macro undefined: '{}!'\",",93],["Found unexpanded macro.\");",91],["\"macro expression remains after expansion\");",161],["// // The values are interleaved, so the macro invocation for",120],["ast::ExprMac(_) => tcx.sess.bug(\"unexpanded macro\"),",85],["// item macro.",83],["// FIXME #5668: this will occur for a macro invocation:",81],["ast::StmtMac(..) => fcx.ccx.tcx.sess.bug(\"unexpanded macro\")",80],["/// This macro will yield an expression of type `&'static str` which is the",88]],"useCount":17017},{"word":"macro_rules","context":[["#[feature(macro_rules)];",160],["macro_rules! t(",1069],["macro_rules! t {",922],["// macro_rules! array_impls {",594],["#![feature(macro_rules)]",578],["macro_rules! test {",175],["macro_rules! Iterator_impl {",157],["macro_rules! iterator {",129],["// macro_rules! uint_impl {",128],["// macro_rules! int_impl {",128]],"useCount":27733},{"word":"macro_use","context":[["#![macro_use]",189],["/// # #[macro_use]",197],["#[macro_use] extern crate lazy_static;",158],["/// # #[macro_use] extern crate nom;",311],["/// # #[macro_use] extern crate diesel;",166],["#[macro_use] extern crate log;",1122],["/// #[macro_use] extern crate vexyz_math;",310],["#[macro_use] extern crate bitflags;",255],["#[macro_use] extern crate syntax;",233],["#[macro_use]",11406]],"useCount":17677},{"word":"main","context":[["fn main() {",33529],["pub fn main() {",13348],["/// # fn main() {",2215],["fn main() {}",4341],["/// fn main() {",2054],["void main() {",1889],[".file(\"src/main.rs\", r#\"",1527],["//! fn main() {",1449],["fn main() { }",1297],[".file(\"src/main.rs\", \"fn main() {}\");",972]],"useCount":91373},{"word":"make","context":[["// Although we have a mutable reference to `self`, we cannot make",90],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["// shift everything to the right, to make space to",124],["// make a vector of booleans initially false, set to true when used",95],["// Arena allocate something with drop glue to make sure it",108],["/// as RPC calls don't make sense until then. Use this in combination with",111],["//         /// implementation artifacts make `x % y` illegal for `MIN /",256],["/// would also make any pointers to it invalid.",146],["// FIXME(pcwalton): Sometimes excessively fancy glyphs can make us draw outside our border",88],["/// Virtual methods that make up a float context.",87]],"useCount":20908},{"word":"map","context":[["/// let mut map = BTreeMap::new();",314],["v.extend(self.gp.iter().map(|v|*v));",5447],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["map",766],["let mut map = HashMap::new();",724],["for kvarg in opt.values_of(\"kv\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",722],["/// let mut map = HashMap::new();",559],["/// map.insert(1, \"a\");",556],["let mut map = BTreeMap::new();",339]],"useCount":158825},{"word":"margin","context":[["MaybeAuto::from_style(margin.inline_start,",222],["MaybeAuto::from_style(margin.inline_end,",222],["let margin = self.style().logical_margin();",188],["let margin = style.logical_margin();",180],["// For the rest of the cases, auto values for margin are set to 0",176],["/// block-start + block-end + block-size + margin-block-start + margin-block-end",170],["/// block-start + block-end + block-size + margin-block-start + margin-block-end",170],["/// inline-start + inline-end + inline-size + margin-inline-start + margin-inline-end",170],["/// inline-start + inline-end + inline-size + margin-inline-start + margin-inline-end",170],["margin: LogicalMargin::zero(writing_mode),",245]],"useCount":15752},{"word":"marker","context":[["marker: PhantomData,",605],["use std::marker::PhantomData;",2029],["marker: marker::PhantomData,",174],["//                 _marker: marker::PhantomData",188],["_: ::std::marker::PhantomData<()>,",246],["use marker::Sized;",323],["use std::marker;",354],["pub _phantom0: ::std::marker::PhantomData<T>,",441],["pub _phantom_1: ::std::marker::PhantomData<U>,",1239],["pub _phantom_0: ::std::marker::PhantomData<T>,",1498]],"useCount":20444},{"word":"match","context":[["match key {",6269],["match self {",13203],["match *self {",37759],["match match protocol {",5447],["match match protocol {",5447],["let mut ostream = match writer_from_opts(opt.value_of(\"out\")) {",4816],["match item.node {",3571],["match result {",3506],["match ty.sty {",3053],["match self.token {",2741]],"useCount":584573},{"word":"matches","context":[["match Engine::new(matches) {",268],["#[unstable = \"matches collection reform specification, waiting for dust to settle\"]",940],["let matches = match opts.parse(&args[1..]) {",500],["reason = \"matches collection reform specification, waiting for dust to settle\")]",346],["if matches.opt_present(\"help\") {",339],["if matches.opt_present(\"version\") {",309],["if matches.opt_present(\"h\") {",300],["let matches =",287],["let matches = app.get_matches();",287],["let debug = matches.is_present(\"debug\");",270]],"useCount":29707},{"word":"matching","context":[["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["/// Returns the style results for the given node. If CSS selector matching",82],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["/// Performs CSS selector matching and style resolution.",86],["// Perform CSS selector matching and flow construction.",115],["use selectors::matching::DeclarationBlock;",171],["/// Instead, prefer to use pattern matching and handle the `None`",111],["// otherwise find just the matching page and exit all sub-pages",97],["/// Repaint the scene, without performing style matching. This is typically",96],["/// `Some` containing the byte index of the last matching character",92]],"useCount":15473},{"word":"max","context":[["is_valid(norm_binop, lit_val, min, max)",166],["\"max-results\" => {",833],["call = call.max_results(arg_from_str(value.unwrap_or(\"-0\"), err, \"max-results\", \"integer\"));",827],["use std::cmp::max;",609],["use std::cmp::{max, min};",418],["use std::cmp::{min, max};",212],["match max {",204],["v.extend([\"page-token\", \"max-results\"].iter().map(|v|*v));",198],["v.extend([\"filter\", \"page-token\", \"max-results\"].iter().map(|v|*v));",187],["max(computation.content_intrinsic_sizes.preferred_inline_size,",195]],"useCount":28133},{"word":"mc","context":[["let mc = mc::MemCategorizationContext::new(rcx);",176],["let mc = mc::MemCategorizationContext::new(rcx);",176],["mc::cat_deref(_, _, mc::UnsafePtr(..)) |",195],["mc::cat_static_item |",201],["mc::cat_deref(_, _, mc::UnsafePtr(..)) |",195],["let mc = mc::MemCategorizationContext::new(rcx.fcx);",193],["let mc = mc::MemCategorizationContext::new(rcx.fcx);",193],["cmt: mc::cmt,",358],["use middle::mem_categorization as mc;",408],["cmt: mc::cmt<'tcx>,",599]],"useCount":15577},{"word":"means","context":[["This means that during inferencing you should use `fcx.write_ty()`",95],["// been collected yet). Forcing a GC here means that",96],["// Being here means either there are no pending frames, or none of the pending",125],["//                 // Note that the #[inline] above means that the overflow",128],["//         /// means that code in debug mode will trigger a panic on this case and",128],["/// In general, this means converting from bound parameters to",85],["/// the method inside trait definition (this means that if the given def ID",84],["/// Check whether a type is representable. This means it cannot contain unboxed",81],["//! // Get an ApplicationSecret instance by some means. It contains the `client_id` and",276],["// cannot be found, this means the page exists in a different",79]],"useCount":12389},{"word":"mem","context":[["use std::mem::transmute;",1076],["unsafe { ::std::mem::zeroed() }",947],["use core::mem;",1116],["fn default() -> Self { unsafe { ::std::mem::zeroed() } }",4004],["self.c_object as usize == mem::POST_DROP_USIZE {",1267],["use std::mem;",8613],["::std::mem::transmute(raw.offset(0))",2371],["use mem;",2164],["::std::mem::transmute(((self._bitfield_1 &",1248],["let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);",2268]],"useCount":104859},{"word":"memory","context":[["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264],["/// A channel to the memory profiler thread.",217],["/// The channel on which messages can be sent to the memory profiler.",197],[": \"memory\"",197],["pub mod memory;",150],["/// are no reachable, owning pointers to the DOM memory, so it never gets freed by default",128],["/// memory.",109],["// none should point to the same backing memory",109],["/// A channel through which messages can be sent to the memory profiler.",105],["/// `store` takes an `Ordering` argument which describes the memory ordering of this operation.",104]],"useCount":18427},{"word":"message","context":[["match message {",660],["// message fields",711],["ROUTER.add_route(action_receiver.to_opaque(), box move |message| {",311],["// processed this message.",235],["message: String,",208],["debug!(\"constellation got get root pipeline message\");",195],["message: message,",189],["message: message,",189],["println!(\"{}\", message);",189],["for message in messages {",195]],"useCount":35168},{"word":"messages","context":[["/// The channel on which messages can be sent to the time profiler.",213],["// Compute sizes of nested messages",958],["/// messages on its port.",138],["/// The channel on which messages can be sent to the constellation.",308],["// Drain compositor port, sometimes messages contain channels that are blocking",143],["/// The port on which we receive messages.",150],["for message in messages {",195],["/// The channel on which messages can be sent to the memory profiler.",197],["/// The channel on which the image cache can send messages to ourself.",205],["/// The port on which we receive messages from the image cache",205]],"useCount":14612},{"word":"metadata","context":[["metadata: metadata,",529],["metadata: metadata,",529],["use metadata::csearch;",798],["return metadata;",187],["/// Adds the created metadata nodes directly to the crate's IR.",360],["use metadata::cstore;",326],["use metadata::decoder;",325],["-C metadata=[..] \\",255],["Some(metadata) => {",221],["use rustc::metadata::csearch;",219]],"useCount":32779},{"word":"method","context":[["Some(method) => {",639],["panic!(\"called a CEF method on a null object\")",3537],["use hyper::method::Method;",952],["// This method intentionally does nothing",412],["\"method\": \"POST\",",386],["method: Method::Get,",337],["match method {",301],["for method in methods.iter() {",297],["method: None,",279],["pub method: Method,",277]],"useCount":82702},{"word":"methods","context":[["for method in methods.iter() {",297],["/// methods.",139],["methods: vec!(",285],["//! `doit(...)` methods, which are then named `upload(...)` and `upload_resumable(...)` respectively.",276],["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276],["//! the doit() methods, or handed as possibly intermediate results to either the",276],["// of disambiguating methods.",231],["// For any methods that use a default implementation, add them to",191],["<div class='methods'>",176],["for m in methods.iter() {",162]],"useCount":25932},{"word":"middle","context":[["use middle::region;",476],["use middle::ty;",3088],["use middle::infer;",631],["use middle::typeck;",638],["use middle::trans::type_::Type;",650],["use middle::traits;",683],["use middle::trans::common::*;",685],["use middle::ty::{self, Ty};",1079],["use middle::def;",1106],["use middle::subst;",1136]],"useCount":45413},{"word":"might","context":[["/// Additional libraries might provide more complex patterns like",204],["// Modifying the `style` attribute might change style.",124],["//! // into the respective structure. Some of the parts shown here might not be applicable !",117],["/// If the pattern allows a reverse search but its results might differ",116],["eventually be resolved to some concrete type (which might itself be",95],["// and statement context, but we might as well do write the code only once",93],["// The function given by the user might panic.",90],["// If we're not going to overflow the green zone vertically, we might still do so",85],["// as the inline-size of our parent. We might be smaller and we might be larger if we",85],["// as the inline-size of our parent. We might be smaller and we might be larger if we",85]],"useCount":12351},{"word":"min","context":[["use std::cmp::min;",431],["match min {",142],["// min-lldb-version: 310",552],["//             let min = Self::min_value(); !min",128],["min",128],["/// Compute the used value of inline-size, taking care of min-inline-size and max-inline-size.",134],["CEnum(ity, min, max) => {",140],["is_valid(norm_binop, lit_val, min, max)",166],["use std::cmp::{min, max};",212],["use std::cmp::{max, min};",418]],"useCount":21518},{"word":"mod","context":[["pub mod posix88 {",1194],["pub mod posix01 {",1535],["pub mod computed_value {",3531],["mod test {",6309],["mod tests {",13461],["pub mod c99 {",910],["mod imp {",951],["pub mod c95 {",983],["mod bench {",1006],["pub mod extra {",1178]],"useCount":155403},{"word":"mode","context":[["match config.mode {",216],["match self.mode {",210],["if v.mode != Mode::Var {",237],["mode: mode,",206],["match mode {",1123],["if mode.is_vertical() {",676],["self.debug_writing_mode.check(mode);",572],["debug_writing_mode: DebugWritingMode::new(mode),",311],["mode: mode,",206],["// indent-tabs-mode: nil",169]],"useCount":31405},{"word":"module","context":[["// into this module.",145],["Rc::new(Resolver::create_name_bindings_from_module(module));",125],["Some(module) => {",241],["let module = self.current_module.clone();",152],["match module.def_id.get() {",147],["module: &Module,",138],["/// For more information on formatters, see [the module-level documentation][module].",135],["/// For more information on formatters, see [the module-level documentation][module].",135],["/// Use with the `std::iter` module.",272],["//     #[unstable(feature = \"hash\", reason = \"module was recently redesigned\")]",682]],"useCount":40326},{"word":"more","context":[["// and check for more resize events. If there are no events pending, we'll move",126],["return; // reported an error, no sense in reporting more.",136],["/// For more information, see `TcpStream::set_timeout`",141],["/// error. This produces a more accurate result with better performance than",167],["/// Additional libraries might provide more complex patterns like",204],["/// See `error_reporting.rs` for more details",224],["// more information.",226],["// No more reflow required",136],["/// For more information on formatters, see [the module-level documentation][module].",135],["// The `width` field is more of a `min-width` parameter at this point.",128]],"useCount":30717},{"word":"move","context":[["spawn(move || {",167],["Thread::spawn(move|| {",287],["move || {",237],["let handler = move |_: HyperRequest, response: HyperResponse| {",177],["let handler = move |request: HyperRequest, mut response: HyperResponse| {",177],["thread::spawn(move|| {",966],["thread::spawn(move || {",1918],["let _t = thread::spawn(move|| {",2255],["ROUTER.add_route(action_receiver.to_opaque(), box move |message| {",311],["let _t = Thread::spawn(move|| {",636]],"useCount":23962},{"word":"msg","context":[["self.ipc_renderer.send(msg).unwrap();",554],["Some(pipeline) => pipeline.script_chan.send(msg),",305],["use msg::constellation_msg::Msg as ConstellationMsg;",445],["msg: &str,",406],["Err(msg) => {",341],["use msg::constellation_msg::ConstellationChan;",335],["use msg::constellation_msg::PipelineId;",681],["extern crate msg;",833],["stream.write_json_packet(&msg);",872],["match msg {",1574]],"useCount":54662},{"word":"mt","context":[["ty::ty_rptr(r, mt) => {",140],["ty::mk_ptr(tcx, ty::mt {",515],["match mt {",168],["Some(mt) => {",202],["Some(mt) => mt.ty,",208],["Some(mt) => mt.ty,",208],["mt: mt {",131],["mt: mt {",131],["match mt.mutbl {",133],["mt {",136]],"useCount":21790},{"word":"multipage","context":[["// https://html.spec.whatwg.org/multipage/#dom-document-bgcolor",194],["// https://html.spec.whatwg.org/multipage/#submit-button-state-(type=submit):activation-behavior",198],["// https://html.spec.whatwg.org/multipage/#reset-button-state-(type=reset):activation-behavior",198],["// https://html.spec.whatwg.org/multipage/#globaleventhandlers",217],["// https://html.spec.whatwg.org/multipage/#dom-context-2d-strokestyle",220],["// https://html.spec.whatwg.org/multipage/#dom-context-2d-drawimage",220],["// https://html.spec.whatwg.org/multipage/#attr-fe-name",220],["// https://html.spec.whatwg.org/multipage/#dom-windowtimers-setinterval",288],["// https://html.spec.whatwg.org/multipage/#dom-fe-disabled",238],["// https://html.spec.whatwg.org/multipage/#dom-document-cookie",220]],"useCount":35323},{"word":"must","context":[["// Lengths must be specified.",156],["// The resulting string must be freed by calling cef_string_userfree_free().",790],["* The returned value must be freed by the caller using free().",546],["* The parameter @p e supplied to this function must be NULL if",546],["/// `Hash` and `Eq` on the borrowed form *must* match those for",254],["//    * Redistributions in binary form must reproduce the above",224],["/// `n` must be between 1 and 8, inclusive.",212],["/// f must consume tokens until reaching the next separator or",180],["// NB: must keep 4 fns in sync:",166],["/// on the borrowed form *must* match the ordering on the key type.",156]],"useCount":44989},{"word":"mut","context":[["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["let mut i = 0;",6438],["fn drop(&mut self) {",13433],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["let mut found = false;",6098],["let mut value = json::value::to_value(&output_schema);",4800],["remove_json_null_values(&mut value);",4813],["Ok(mut f) => f,",4816],["let mut ostream = match writer_from_opts(opt.value_of(\"out\")) {",4816],["{let mut v = Vec::new();",5447]],"useCount":1376927},{"word":"mutable","context":[["if self.mutable() /* and document owner is fully active */ {",98],["//     /// Converts the array to mutable slice",594],["/// Returns a mutable reference to the value corresponding to the key.",134],["// https://html.spec.whatwg.org/multipage/#concept-fe-mutable",110],["/// with mutable references to the values.",106],["// Although we have a mutable reference to `self`, we cannot make",90],["/// This type does not expose the ability to get a mutable reference to the",93],["//             // Can't take two mutable loans from one vector, so instead just cast",94],["// from a given thingy and puts them in a mutable",94],["/// Gets a mutable reference to the value in the entry.",100]],"useCount":14223},{"word":"mutbl","context":[["mutbl: ast::MutImmutable",496],["if mutbl == ast::MutMutable {",237],["mutbl: ast::Mutability,",148],["mutbl: ast::MutImmutable,",157],["let mutbl = self.parse_mutability();",171],["match mutbl {",205],["mutbl: ast::MutMutable",227],["mutbl: ast::Mutability)",331],["mutbl: base_cmt.mutbl.inherit(),",243],["mutbl: base_cmt.mutbl.inherit(),",243]],"useCount":15707},{"word":"n","context":[["/// let n = 0x0123456789ABCDEFu64;",584],["match n {",549],["\\r\\n\\",519],["//         /// let n = 0b0101000u16;",512],["//         /// let n = 0b01001100u8;",512],["//         /// let n = 0x0123456789ABCDEFu64;",1792],["n -= 1;",501],["writeln!(io::stderr(), \"{}\\n\", opt.usage()).ok();",1167],["n",672],["let mut n = 0;",608]],"useCount":171695},{"word":"name","context":[["name = \"foo\"",9749],["name: String,",2593],["name = \"a\"",1038],["match name {",1526],["name: &str,",2100],["name,",2475],["pub name: String,",2684],["name = \"bar\"",2725],["name: name,",3168],["name: name,",3168]],"useCount":291388},{"word":"names","context":[["// https://html.spec.whatwg.org/multipage/#dom-tree-accessors:supported-property-names",94],["for name in names.iter() {",98],["let mut names = Vec::new();",161],["names: &[&str],",129],["for nm in names.iter() {",110],["for name in names {",106],["// new region names that appear inside of the fn decl are bound to",105],["names.sort();",92],["// FIXME #12808: strange names to try to avoid interfering with",93],["self.read_enum_variant(names, f)",93]],"useCount":13437},{"word":"namespace","context":[["match attr.namespace {",266],["namespace: Namespace,",841],["match namespace {",625],["namespace: Option<DOMString>,",556],["namespace,",502],["namespace: Namespace)",392],["<%namespace name=\"helpers\" file=\"/helpers.mako.rs\" />",375],["namespace);",298],["if namespace == TypeNS {",249],["let namespace = namespace_from_domstring(namespace);",248]],"useCount":22623},{"word":"necessary","context":[["// representable negative number doesn't necessary have an",100],["/// Adds the display items necessary to paint the borders of this fragment to a display list if",98],["// necessary.",450],["/// necessary.",267],["/// if necessary.",198],["/// list if necessary.",195],["// Parse traits, if necessary.",112],["// Build the display list if necessary, and send it to the painter.",105],["// Adjust the layer dimensions as necessary to correspond to the size of the window.",103],["self.join_layout(); //FIXME: is this necessary, or is layout_rpc's mutex good enough?",100]],"useCount":14400},{"word":"need","context":[["// need to propagate the background color from the root HTML/Body",103],["// This will likely need to be done by pushing down definite sizes during selector",186],["// This shouldn't need to recompute the return type,",125],["// find where to insert, we need to do strict <,",124],["/// data that will need to be present when the document and frame tree entry are created,",116],["// We only need to move the clip rect if the viewport is getting near the edge of",110],["// LSetDOMProperty. Those constants need to be changed accordingly if this value",110],["// If we didn't have a clip rect, the previous display doesn't need rebuilding",110],["try!(self.end()); // need to close a box",107],["// When we are shutting_down, we need to avoid performing operations",103]],"useCount":35035},{"word":"needs","context":[["// still needs to be shut down.",97],["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["#[experimental = \"needs review\"]",336],["// FIXME (Manishearth): support document owners (needs ability to get parent browsing context)",144],["// Really what needs to happen is that this needs to go through layout to ask which",131],["/// This needs to be protected by a mutex so we can do fast RPCs.",96],["// Really what needs to happen is that this needs to go through layout to ask which",131],["//! // As the method needs a request, you would usually fill it with the desired information",117],["// NB: This module needs to be declared first so diagnostics are",109],["#[doc = \"Specifies whether this node needs style recalc on next reflow.\"]",98]],"useCount":12121},{"word":"never","context":[["--color WHEN             Coloring: auto, always, never",116],["#[inline(never)] #[fixed_stack_segment]",127],["/// are no reachable, owning pointers to the DOM memory, so it never gets freed by default",128],["/// benchmarked against those two. It is marked `#[inline(never)]` to aid profiling.",234],["//         /// Such wrap-around never actually occurs mathematically;",256],["//!         * never directly used in *Activities*",276],["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["#[fixed_stack_segment] #[inline(never)]",719],["#[fixed_stack_segment]; #[inline(never)];",1069],["#[inline(never)]",2550]],"useCount":18962},{"word":"new","context":[["let mut result = Vec::new();",1364],["{let mut v = Vec::new();",5447],["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["pub fn new() -> Self {",1818],["let mut s = String::new();",1818],["let mut v = Vec::new();",1579],["reflector_: Reflector::new(),",1467]],"useCount":540946},{"word":"next","context":[["fn next(&mut self) -> Option<A> {",963],["fn next(&mut self) -> Option<Self::Item> {",1217],["/// assert!(it.next().is_none());",862],[".next()",857],["match self.iter.next() {",806],["assert_eq!(it.next(), None);",792],["fn next(&mut self) -> Option<T> {",774],["assert!(it.next().is_none());",764],["it.next();",676],["assert_eq!(next(st), '|');",663]],"useCount":110057},{"word":"no","context":[["//         /// On little endian this is a no-op. On big endian the bytes are",512],["return; // reported an error, no sense in reporting more.",136],["// no-prefer-dynamic",150],["// if e.trace() is a no-op (e.g it is an no_jsmanaged_fields type)",156],["// The default implementation is a no-op.",159],["// XXXManishearth Check if the following three are optimized to no-ops",162],["//         /// On big endian this is a no-op. On little endian the bytes are",512],["// check-tidy: no specs after this line",348],["let layout_data = layout_data_ref.as_mut().expect(\"no layout data\");",197],["/// Returns true if this flow has no children.",174]],"useCount":59777},{"word":"node","context":[["match node.type_id() {",1363],["node: node,",1153],["match pat.node {",1559],["match expr.node {",2569],["match item.node {",3571],["let node = self.upcast::<Node>();",1292],["match it.node {",1230],["let node = NodeCast::from_ref(self);",1161],["node: node,",1153],["match e.node {",1136]],"useCount":237545},{"word":"node_id","context":[["self.operation.visit_id(node_id);",145],["node_id: String,",165],["id: node_id,",206],["let item = lookup_item(node_id, cdata.data());",209],["node_id: ast::NodeId,",860],["node_id: ast::NodeId)",480],["node_id,",473],["node_id = id;",285],["fcx.write_error(node_id);",230],["id: ast::node_id,",227]],"useCount":17498},{"word":"nodes","context":[["/// Adds the created metadata nodes directly to the crate's IR.",360],["for node in &inline_context.nodes {",136],["let node = try!(self.owner_doc().node_from_nodes_and_strings(nodes));",178],["/// An iterator over a frame tree, returning nodes in depth-first order.",125],["/// Note that this iterator should _not_ be used to mutate nodes _during_",125],["/// normally. If we do exit, we will tear down the DOM nodes, possibly at a point",131],["self.upcast::<Node>().prepend(nodes)",133],["self.upcast::<Node>().append(nodes)",133],["fn Prepend(&self, nodes: Vec<NodeOrString>) -> ErrorResult {",159],["fn Append(&self, nodes: Vec<NodeOrString>) -> ErrorResult {",159]],"useCount":19432},{"word":"non","context":[["// non-auto value.",176],["panic!(\"called column_intrinsic_inline_sizes() on non-table flow\")",142],["/// like for non-replaced blocks.",139],["/// but non-ASCII letters are unchanged.",182],["#[ignore_heap_size_of = \"Because it is non-owning\"]",206],["// Use a non-null pointer value",270],["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["/// being non-none",118],["// on and execute the sequential non-resize events we've seen.",126],["/// inline(always) because this is only ever called by in-order or non-in-order top-level",134]],"useCount":30611},{"word":"none","context":[["list_style_type: Some(list_style_type::SpecifiedValue::none),",201],["float::T::none => {}",178],["/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none",200],["/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none",200],["return dest.write_str(\"none\")",278],["assert!(!act.none() && !act.all());",300],["try!(dest.write_str(\"none\"));",448],["parameters: ast::PathParameters::none(),",526],["assert_eq!(None, none);",801],["if input.try(|input| input.expect_ident_matching(\"none\")).is_ok() {",944]],"useCount":17806},{"word":"normal","context":[["/// the corresponding normal color will be used instead.",94],["if self.style().get_effects().mix_blend_mode != mix_blend_mode::T::normal {",88],["mix_blend_mode::T::normal,",97],["declarations.normal",112],["SpecifiedValue::normal |",120],["// a `&T` pointer.  We can then proceed down the normal",132],["None => dest.write_str(\"normal\"),",178],["SpecifiedValue::Normal => dest.write_str(\"normal\"),",275],["if input.try(|input| input.expect_ident_matching(\"normal\")).is_ok() {",372],["effects.mix_blend_mode != mix_blend_mode::T::normal ||",83]],"useCount":12071},{"word":"not","context":[["// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)",519],["#[cfg(not(test))]",4555],["#[cfg(not(target_os = \"android\"))]",528],["* This form can be used only if the request will not cause",584],["#[cfg(not(target_os = \"windows\"))]",590],["#[cfg(not(any()))]",696],["#[cfg(not(stage0))]",1081],["#[cfg(not(windows))]",1091],["#[cfg(not(target_os=\"android\"))]",1158],["// If field is not initialized, it is initialized with default value first.",1368]],"useCount":194197},{"word":"now","context":[["panic!(\"Unscanned text fragments should have been scanned by now!\")",379],["* None right now.",360],["// This is now the only absolute flow in the subtree which hasn't yet",204],["/// ISize has already been calculated. We now calculate the margins just",136],["let start = PreciseTime::now();",130],["let now = Instant::now();",129],["let now = Instant::now();",129],["// Right now, just print to the console",126],["/// default: 'now()'",124],["default: Some(Operand::Value(Value::String(\"'now()'\".to_owned()))),",126]],"useCount":21291},{"word":"ns","context":[["ns: *mut nsIAtom, name: *mut nsIAtom,",263],["let value = self.parse_attribute(&ns!(\"\"), &name, value);",99],["None => ns!(\"\"),",103],["ns!(),",112],["if attr.namespace() == &ns!() {",117],["node.namespace() == &ns!(svg) && node.local_name() == &atom!(\"title\")",122],["match elem.get_attribute(&ns!(), &atom!(\"id\")) {",122],["None => ns!(),",141],["match elem.get_attribute(&ns!(), &atom!(\"name\")) {",183],["NamespaceConstraint::Specific(ref ns) => {",223]],"useCount":12390},{"word":"null","context":[["panic!(\"called a CEF method on a null object\")",3537],["null,\\",350],["// Use a non-null pointer value",270],["ptr::null()",236],["ptr::null());",230],["None => ptr::null()",227],["ptr::null(),",216],["pNext: ptr::null(),",156],["return ptr::null();",153],["{ \"c\": {\"d\": null} }",152]],"useCount":20685},{"word":"num","context":[["/// use std::num::Float;",783],["extern crate num;",1339],["/// * num - The float value",567],["/// use std::num::Int;",486],["use std::num;",456],["use num;",456],["use std::num::Float;",427],["use num::Float;",396],["use std::num::Int;",295],["use dom::bindings::num::Finite;",384]],"useCount":27293},{"word":"number","context":[["/// Returns the logarithm of the number with respect to an arbitrary base.",166],["/// The number of bytes returned is system-dependent.",164],["/// Returns the natural logarithm of the number.",167],["/// Returns the base 10 logarithm of the number.",167],["/// Returns the base 2 logarithm of the number.",167],["/// Returns the number of children that this flow possesses.",168],["//         /// Returns the number of ones in the binary representation of `self`.",256],["//         /// Returns the number of leading zeros in the binary representation",256],["//         /// Returns the number of trailing zeros in the binary representation",256],["//         /// Returns the number of zeros in the binary representation of `self`.",256]],"useCount":47152},{"word":"o","context":[["Some(r##\"o\"##),",4816],["match o {",358],["self.form_owner().map(|o| {",174],["stack: &TraitObligationStack<'o, 'tcx>)",168],["Some(Ok(o)) => o,",160],["Some(Ok(o)) => o,",160],["stack: &TraitObligationStack<'o, 'tcx>,",145],["///   e.g. `\"FILE\"` for a `-o FILE` option",132],["$crate::IResult::Done(i,o)     => {",125],["Some(o) => {",123]],"useCount":33549},{"word":"obj","context":[["Ok(obj)",1781],["obj: HandleObject,",788],["params.put(name, obj);",710],["let obj = try!(characters(stack));",687],["obj:",675],["obj,",547],["BucketNameWriter::write_params(params, &(prefix.to_string() + \"Bucket\"), &obj.bucket);",284],["obj.bucket = try!(BucketNameParser::parse_xml(\"Bucket\", stack));",207],["for element in obj.iter() {",172],["let mut obj = Vec::new();",166]],"useCount":27308},{"word":"object","context":[["// If the image argument is an HTMLImageElement object that is in the broken state,",130],["panic!(\"called a CEF method on a null object\")",3537],["FieldCursor::from(field_cursor_str).set_json_value(&mut object, value.unwrap(), type_info, err, &temp_cursor);",2021],["let mut object = json::value::Value::Object(Default::default());",2021],["use glib::object::Downcast;",540],["use glib::object::IsA;",432],["//!     * a central object to maintain state and allow accessing all *Activities*",276],["/// object.",245],["// Get the raw representation of the trait object",216],["object: HandleObject,",155]],"useCount":46046},{"word":"obligation","context":[["obligation: &TraitObligation<'tcx>,",839],["obligation.cause.span,",475],["obligation.repr(self.tcx()));",272],["obligation,",263],["obligation: &ProjectionTyObligation<'tcx>,",229],["obligation);",222],["obligation.repr(self.tcx()),",217],["obligation: &TraitObligation<'tcx>)",211],["obligation.cause.clone(),",192],["obligation.recursion_depth + 1,",218]],"useCount":15403},{"word":"of","context":[["// This Source Code Form is subject to the terms of the Mozilla Public",794],["// file at the top-level directory of this distribution and at",59409],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["// This file is part of Parity.",1469],["//         /// wrapping around at the boundary of the type.",1280],["// Compute sizes of nested messages",958],["// file at the top-level directory of this distribution.",628],["* This file is part of the uutils coreutils package.",625],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584]],"useCount":626539},{"word":"offset","context":[["offset: ComputedMemberOffset,",466],["let mut offset = 0;",451],["offset: offset,",429],["offset: offset,",429],["offset: 0,",410],["offset: FixedMemberOffset { bytes: 0 },",288],["offset,",286],["offset += 1;",244],["offset: usize,",209],["::std::mem::transmute(raw.offset(0))",2371]],"useCount":43711},{"word":"ok","context":[["writeln!(io::stderr(), \"{}\\n\", opt.usage()).ok();",1167],["writeln!(io::stderr(), \"{:#?}\", err).ok();",192],["test foo ... ok",251],["writeln!(io::stderr(), \"Failed to open output file '{}': {}\", path, err).ok();",268],["writeln!(io::stderr(), \"{}\\n\", self.opt.usage()).ok();",268],["test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured",488],["writeln!(io::stderr(), \"{}\", err).ok();",538],["test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured",720],[".ok()",851],["test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured",1156]],"useCount":22215},{"word":"old","context":[["// If we have an old root layer, release all old tiles before replacing it.",92],["/// the old value.",85],["let old = self.ptr;",172],["old",146],["old,",143],["f(cx, span, old, new)",112],["// Suspend the old pipeline, and resume the new one.",105],["// The new pipeline is replacing an old one.",95],["/// If the return value is equal to `old` then the value was updated.",93],["// If we have an old root layer, release all old tiles before replacing it.",92]],"useCount":11336},{"word":"on","context":[["/// Specifies the file extension used for shared libraries on this",276],["/// Specifies the filename suffix used for shared libraries on this",276],["//! retry on failure.",276],["/// Specifies the filename prefix used for shared libraries on this",276],["//! // what's going on. You probably want to bring in your own `TokenStorage` to persist tokens and",276],["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["/// The channel on which messages can be sent to the constellation.",308],["/// Specifies the filename suffix used for executable binaries on this",311],["// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)",519],["panic!(\"called a CEF method on a null object\")",3537]],"useCount":127733},{"word":"one","context":[["fn one() -> Self;",190],["check(One::one(), 1);",172],["/// Fused multiply-add. Computes `(self * a) + b` with only one rounding",168],["//         /// The only case where such wrapping can occur is when one",512],["* decreased by one. The member data points to the next",392],["// If only one is Auto, solve for it",352],["//             let mut acc = Self::one();",256],["let one: BigInt = One::one();",200],["let one: BigInt = One::one();",200],["// If the currently focused pipeline is the one being changed (or a child",198]],"useCount":64628},{"word":"only","context":[["* This form can be used only if the request will not cause",584],["* This form can be used only if the request will cause",546],["//         /// The only case where such wrapping can occur is when one",512],["// Extra data. This will only be present for Rust instances!",407],["// The reference count. This will only be present for Rust instances!",407],["// If only one is Auto, solve for it",352],["// compile-flags: -Z parse-only",348],["// This is now the only absolute flow in the subtree which hasn't yet",204],["//         // These cases only have 1 permutation each, so we can't do anything.",188],["/// Fused multiply-add. Computes `(self * a) + b` with only one rounding",168]],"useCount":62715},{"word":"op","context":[["// The default implementation is a no-op.",159],["cast_shift_rhs(op, lhs, rhs,",162],["match op {",1378],["//         /// On big endian this is a no-op. On little endian the bytes are",512],["//         /// On little endian this is a no-op. On big endian the bytes are",512],["op: ast::BinOp,",427],["ast::ExprBinary(op, ref lhs, ref rhs) => {",243],["match op.node {",230],["op => {",222],["let cmp = match op {",175]],"useCount":22097},{"word":"open","context":[["open: c_int,",1934],["/// let mut f = try!(File::open(\"foo.txt\"));",276],["writeln!(io::stderr(), \"Failed to open output file '{}': {}\", path, err).ok();",268],["let mut file = match File::open(&path) {",161],["// https://xhr.spec.whatwg.org/#the-open()-method",156],["let mut read_stream = check!(File::open(filename));",150],["// OpenAOE: An open source reimplementation of Age of Empires (1997)",127],["let repo = git2::Repository::open(&git_project.root()).unwrap();",126],["let mut file = try!(File::open(path));",125],["File::open(&toml).unwrap().read_to_string(&mut contents).unwrap();",115]],"useCount":15946},{"word":"operation","context":[["self.operation.visit_id(node_id);",145],["/// The operation to perform. Return true to continue or false to stop.",325],["//         /// if `other == 0` or the operation results in underflow or overflow.",256],["/// This operation should compute in O(1) time.",197],["/// a separate multiplication operation followed by an add.",168],["match *operation {",154],["//TODO determine if this operation is allowed",142],["/// This is an O(n) operation as it requires copying every element in the",124],["for operation in &self.0 {",120],["/// The workers that we use for parallel operation.",116]],"useCount":12826},{"word":"ops","context":[["use std::ops::{Deref, DerefMut};",863],["use std::ops::Deref;",1290],["use std::ops::Mul;",197],["use std::ops::Index;",290],["use cargo::ops;",334],["use std::ops::Range;",339],["use ops;",370],["use std::ops::Add;",376],["use std::ops;",394],["use ops::Drop;",475]],"useCount":19346},{"word":"opt","context":[["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for kvarg in opt.values_of(\"kv\").unwrap_or(Vec::new()).iter() {",1299],["writeln!(io::stderr(), \"{}\\n\", opt.usage()).ok();",1167],["match opt.subcommand() {",1167],["(\"list\", Some(opt)) => {",788],["let mut ostream = match writer_from_opts(opt.value_of(\"out\")) {",4816]],"useCount":43258},{"word":"option","context":[["::std::option::Option<unsafe extern \"C\" fn(cx: *mut JSContext,",828],["use option::Option;",727],["::std::option::Option<extern \"C\" fn",718],["use option::{Option, Some, None};",607],["use std::option::Option;",405],["use option::{Some, None};",331],["::std::option::Option<unsafe extern \"C\" fn",328],["use option::{None, Option, Some};",319],["use option::Option::{self, Some, None};",314],["::std::option::Option<unsafe extern \"C\" fn(arg1:",283]],"useCount":24315},{"word":"optional","context":[["optional: true,",144],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276],["//! // You can configure optional parameters by calling the respective setters at will, and",274],["/// For providing instructions to an optional devtools server.",224],["optional = true",161],["/// For receiving commands from an optional devtools server. Will be ignored if",126],["/// A bottom-up traversal, with a optional in-order pass.",125],["//! check_optional(&optional);",106],["/// information are both optional due to the possibility of them being whitespace.",88]],"useCount":13099},{"word":"options","context":[["pub fn execute(options: Options, config: &Config) -> CliResult<Option<()>> {",294],["options: *const ReadOnlyCompileOptions,",340],["options:",232],["options: options,",187],["options: options,",187],["jobs: options.flag_jobs,",155],["no_default_features: options.flag_no_default_features,",150],["options.flag_quiet,",131],["features: &options.flag_features,",128],["try!(config.shell().set_verbosity(options.flag_verbose, options.flag_quiet));",128]],"useCount":20642},{"word":"opts","context":[["let rs = getopts(&args, &opts);",306],["use util::opts;",1496],["let mut opts = Options::new();",650],["let rs = getopts(args, opts);",520],["let matches = match opts.parse(&args[1..]) {",500],["let rs = getopts(args.as_slice(), opts.as_slice());",476],["let opts = vec!(optflagmulti(\"v\", \"verbose\", \"verbosity\"));",258],["if opts::get().show_debug_fragment_borders {",279],["let mut opts = getopts::Options::new();",293],["if opts::get().is_running_problem_test {",340]],"useCount":37958},{"word":"or","context":[["/// Return true if the traversal is to continue or false to stop.",292],["//! the doit() methods, or handed as possibly intermediate results to either the",276],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["//! the server to indicate either the set parts of the request or the desired parts in the response.",276],["/// The pattern can be a simple `&str`, `char`, or a closure that",310],["/// The operation to perform. Return true to continue or false to stop.",325],["// copied, modified, or distributed except according to those terms.",350],["// Redistribution and use in source and binary forms, with or without",478],["// KIND, either express or implied.",696],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",704]],"useCount":124745},{"word":"order","context":[["match order {",561],["//         /// Reverses the byte order of the integer.",256],["//         /// where `mask` removes any high-order bits of `rhs` that",512],["unsafe { atomic_store(self.v.get(), val, order); }",127],["/// inline(always) because this is only ever called by in-order or non-in-order top-level",134],["/// inline(always) because this is only ever called by in-order or non-in-order top-level",134],["assert!(order::equals(ra.gen_ascii_chars().take(100),",195],["// Declarations are already stored in reverse order.",197],["iter::order::partial_cmp(self.iter(), other.iter())",199],["iter::order::cmp(self.iter(), other.iter())",204]],"useCount":29422},{"word":"org","context":[["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.3",1448],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.10",1205],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",",1051],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.9",946],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.8",586],["html_playground_url = \"http://play.rust-lang.org/\")]",486],["html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",",441],["html_root_url = \"http://doc.rust-lang.org/nightly/\")]",400],["html_root_url = \"http://doc.rust-lang.org/nightly/\",",364]],"useCount":95688},{"word":"origin","context":[["origin: SubregionOrigin,",224],["let (_, origin) = self.client_window();",213],["origin: origin,",723],["origin: origin,",723],["origin: TypeOrigin,",443],["origin,",418],["origin: SubregionOrigin<'tcx>,",352],["let origin = Origin::Origin(url.origin());",309],["let origin = Origin::Origin(url.origin());",309],["match origin {",252]],"useCount":42261},{"word":"os","context":[["use std::os;",2497],["-> ::std::os::raw::c_int;",1850],["use types::os::arch::c95::c_int;",1333],["let args = os::args();",883],["use os;",875],["try!(os.write_unknown_fields(self.get_unknown_fields()));",795],["fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {",785],["try!(os.write_raw_varint32(v.get_cached_size()));",763],["try!(v.write_to_with_cached_sizes(os));",763],["pub mod os {",693]],"useCount":113667},{"word":"ostream","context":[["ostream) != nread {",11],["write_with_spaces(word, slen, args.ostream);",12],["assert_eq!(libc::fclose(ostream), (0u as libc::c_int));",14],["write_newline(args.indent_str, args.ostream);",16],["ostream);",24],["assert!((ostream as uint != 0u));",25],["io::copy(&mut response, &mut ostream).unwrap();",63],["json::to_writer_pretty(&mut ostream, &value).unwrap();",4800],["ostream.flush().unwrap();",4801],["let mut ostream = match writer_from_opts(opt.value_of(\"out\")) {",4816]],"useCount":14615},{"word":"other","context":[["Some(self.cmp(other))",669],["//                 fn ge(&self, other: &[T; $N]) -> bool {",594],["//                     PartialOrd::gt(&&self[..], &&other[..])",594],["//                     PartialOrd::lt(&&self[..], &&other[..])",594],["//                 fn cmp(&self, other: &[T; $N]) -> Ordering {",594],["//                 fn lt(&self, other: &[T; $N]) -> bool {",594],["//                 fn gt(&self, other: &[T; $N]) -> bool {",594],["match (self, other) {",643],["self.unknown_fields == other.unknown_fields",911],["//                     PartialOrd::partial_cmp(&&self[..], &&other[..])",594]],"useCount":135954},{"word":"otherwise","context":[["// otherwise find just the matching page and exit all sub-pages",97],["/// otherwise.",947],["/// If this is a table cell flow, returns the underlying object. Fails otherwise.",114],["// otherwise some LLVM optimization passes don't work as expected",115],["//         /// `None` is returned, otherwise the power of two is wrapped in `Some`.",128],["/// inline-sizes. Fails otherwise.",144],["/// false otherwise.",187],["//                         // would have otherwise (i.e. signal any exception",256],["//                         // it would have otherwise).",256],["/// Returns None otherwise.",559]],"useCount":16495},{"word":"our","context":[["// Box shadows cause us to draw outside our border box.",88],["// After, grab the position and use that to set our position.",94],["// What is our res?",102],["// the rest of our resources.",103],["// The inline-start margin edge of the child flow is at our inline-start content edge,",109],["// and its inline-size is our content inline-size.",109],["// our preexisting clip rect. We use half of the size of the viewport as a heuristic",110],["// Drop our references to the JSContext and DOM objects.",116],["// If any of our input sources has an event pending, we'll perform another iteration",126],["// Wait until our mock resource task has sent the image to the image cache",190]],"useCount":15372},{"word":"out","context":[["let out = tmpdir.join(\"out.txt\");",272],["let out = tmpdir.join(\"out.txt\");",272],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["(Some(r##\"out\"##),",4816],["let mut ostream = match writer_from_opts(opt.value_of(\"out\")) {",4816],["out",1286],["out.push(m);",620],["let mut out = Vec::new();",546],["return out;",356],["out,",320]],"useCount":73683},{"word":"output","context":[["output",455],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["output: output,",580],["output: output,",580],[".output()",533],["output.pop();",326],["output: ret_ty,",291],["writeln!(io::stderr(), \"Failed to open output file '{}': {}\", path, err).ok();",268],["let mut output = String::new();",247],["let output = opts.out_file.clone();",241]],"useCount":60295},{"word":"over","context":[["/// An iterator over substrings of `self`, separated by characters",319],["//             // Protect against undefined behaviour for over-long bit shifts",256],["/// Returns an iterator over subslices separated by elements that match",215],["/// Returns an iterator over this node's children.",180],["// Values are over-constrained.",176],["// Values are over-constrained. Ignore value for 'block-end'.",170],["/// An iterator over a frame tree, returning nodes in depth-first order.",125],["/// An iterator over subslices separated by elements that match a predicate",124],["/// Iterates over this node and all its descendants, in preorder.",118],["// Perform the primary layout passes over the flow tree to compute the locations of all",123]],"useCount":24732},{"word":"overflow","context":[[".expect(\"capacity overflow\");",212],["//         /// if overflow occurred.",256],["//         /// `i32`, and attempting to calculate it will cause an overflow. This",128],["//                 // Note that the #[inline] above means that the overflow",128],["//         /// Unspecified behavior on overflow.",128],["// overflow.",170],["overflow",177],["//                         // ensure overflow occurs in the same manner it",256],["//         /// if `other == 0` or the operation results in underflow or overflow.",256],["//         /// `None` if underflow or overflow occurred.",256]],"useCount":20372},{"word":"p","context":[["Some(r##\"p\"##),",5447],["assert_that(p.cargo_process(\"build\").arg(\"-v\"),",938],["assert_that(p.cargo_process(\"build\"),",1783],["let p = project(\"foo\")",7347],["p.build();",1444],["assert_that(p.cargo(\"build\"),",1072],["match p.node {",917],["safe_assert!(start <= p && p < end);",896],["safe_assert!(start <= p && p < end);",896],["p",939]],"useCount":159408},{"word":"package","context":[["If the --package argument is given, then SPEC is a package id specification",112],["assert_that(p.cargo(\"package\"),",68],["[[package]]",69],["If the --package argument is given, then SPEC is a package id specification",112],["assert_that(p.cargo_process(\"package\"),",122],["(Some(r##\"package-name\"##),",153],["let doc = package.as_document();",215],["let package = Package::new();",271],["* This file is part of the uutils coreutils package.",625],["[package]",8406]],"useCount":17751},{"word":"page","context":[["for page in page.iter() {",248],["let window = page.window();",953],["\"page-token\" => {",844],["let document = page.document();",766],["let page = self.root_page();",593],["let page = get_page(&self.root_page(), pipeline_id);",522],["let doc = page.document();",495],["let page = self.page.borrow();",267],["let page = self.page.borrow();",267],["for page in page.iter() {",248]],"useCount":28256},{"word":"panic","context":[["Ok(..) => panic!(),",517],["_ => panic!()",2300],["None => panic!(),",190],["Err(e) => panic!(\"{}\", e),",246],["_ => panic!(\"wrong expression type\"),",272],["panic!(\"Unscanned text fragments should have been scanned by now!\")",379],["panic!(\"called a CEF method on a null object\")",3537],["panic!()",647],["_ => panic!(),",769],["panic!();",1378]],"useCount":50646},{"word":"param","context":[["* @param c      The connection",546],["* @param e      The generic_error supplied",546],["* @param cookie The cookie",546],["ty: param(ccx, 0),",575],["* @param c The connection",2260],["for param in &self.gp {",5447],["if key == *param {",5447],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["(Id, \"param\"),",398],["param(ccx, 0)),",281]],"useCount":29186},{"word":"parameter","context":[["can't create a parameter environment \\",199],["/// The volatile parameter parameter is set to `true`, so it will not be optimized out.",138],["/// The volatile parameter parameter is set to `true`, so it will not be optimized out.",138],["\"this function takes {} parameter{} but {} parameter{} supplied\",",134],["\"this function takes {} parameter{} but {} parameter{} supplied\",",134],["// This was an attempt to use a type parameter outside",128],["can't create a parameter \\",128],["// The `width` field is more of a `min-width` parameter at this point.",128],["/// the ones passed as parameter.",108],["* The parameter @p e supplied to this function must be NULL if",546]],"useCount":18866},{"word":"parameters","context":[["// Look up the number of type parameters and the raw type, and",123],["// If applicable, create a rib for the type parameters.",128],["parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {",136],["parameters: ast::PathParameters::none()",139],["// parameters.",148],["// Resolve the type parameters.",178],["parameters: ast::PathParameters::none(),",526],["parameters: vec![]",764],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["//! // You can configure optional parameters by calling the respective setters at will, and",274]],"useCount":33080},{"word":"params","context":[["let mut params = ActionParams::default();",231],["params.put(name, obj);",710],["let result = validate(rules, params);",448],["let mut params = Map::new();",418],["let mut params = Params::new();",339],["request.set_params(params);",294],["BucketNameWriter::write_params(params, &(prefix.to_string() + \"Bucket\"), &obj.bucket);",284],["params.gas = U256::from(100_000);",195],["let params = glium::DrawParameters {",193],["let mut params = HashMap::new();",187]],"useCount":12036},{"word":"parent","context":[["/// When called on this context, the context has had its inline-size set by the parent context.",247],["parent: None,",705],["Some(parent) => parent,",610],["Some(parent) => parent,",610],["parent: Some(\"\"),",357],["parent",295],["self.parent = old_parent;",280],["parent: parent,",233],["parent: parent,",233],["parent.clone()",233]],"useCount":48936},{"word":"parse","context":[["use syntax::parse::token;",2693],["use parse::token;",1432],["pub fn parse(_context: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue, ()> {",1378],["pub fn parse(_: &ParserContext, input: &mut Parser) -> Result<SpecifiedValue,()> {",804],["use syntax::parse::token::InternedString;",767],["let url = Url::parse(\"http://mozilla.com\").unwrap();",685],["use parse;",620],["let matches = match opts.parse(&args[1..]) {",500],["use syntax::parse;",476],["pub fn parse(_context: &ParserContext, input: &mut Parser)",386]],"useCount":55353},{"word":"parser","context":[["parser.parse_sync();",158],["parser.bump();",159],["match parser.next() {",165],["let key = try_validate!(parser.get_vec(1), \"Invalid key\");",171],["assert!(parser.end());",175],["use selectors::parser::PseudoElement;",179],["use parse::parser::Parser;",271],["mod parser;",292],["pub mod parser;",297],["use parser::ParserContext;",362]],"useCount":17906},{"word":"part","context":[["* This file is part of the uutils coreutils package.",625],["// If this pipeline is already part of the current frame tree,",97],["// No more digits to calculate for the non-fractional part -> break",102],["/// https://html.spec.whatwg.org/multipage/#the-indicated-part-of-the-document",128],["// This file is part of rust-web/twig",132],["part:",154],["// Please note that this call will fail if any part of the opt can't be handled",269],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["// This file is part of rgtk.",492],["// This file is part of Parity.",1469]],"useCount":16838},{"word":"pass","context":[["format!(\"can't pass {} to variadic \\",146],["/// since last time and avoid performing a complete layout pass.",96],["// Convert a frame to a sendable form to pass to the compositor",105],["// Calculate non-auto block size to pass to children.",105],["// FIXME: pass appropriate relatedTarget",110],["use pass::Pass;",117],["// and pass the event to that script thread.",118],["/// A bottom-up traversal, with a optional in-order pass.",125],["/// We have gotten a window.close from script, which we pass on to the compositor.",131],["- main: the main pass does the lion's share of the work: it",95]],"useCount":13970},{"word":"passed","context":[["//! * strings are passed as `&str`",276],["/// the ones passed as parameter.",108],["// array (passed in to the traversal)",111],["/// Returns the arguments which this program was started with (normally passed",135],["\"test passed\".to_string()",172],["execs().with_stdout(\"test passed\\n\"));",190],["test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured",488],["test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured",720],["test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured",1156],["// Param is passed by value, moved",3078]],"useCount":14127},{"word":"pat","context":[["//         let mut matcher = pat.into_searcher(self);",264],["match pat.node {",1559],["pat.span,",502],["scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);",457],["pat: pat,",448],["pat: pat,",448],["node: pat,",427],["fcx.write_error(pat.id);",324],["pat: &ast::Pat,",302],["let pat = self.parse_pat();",286]],"useCount":46344},{"word":"path","context":[["use std::path::Path;",5036],["use std::path::PathBuf;",1961],["use std::path::{Path, PathBuf};",1758],["path: path,",1194],["path: path,",1194],["let path = Path::new($path);",1126],["let path = Path::new($path);",1126],["path = \"bar\"",1001],["path.span,",757],["path,",697]],"useCount":179367},{"word":"paths","context":[["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["for path in paths {",138],["let mut paths = Vec::new();",137],["use support::paths::CargoPathExt;",106],["let foo = git::repo(&paths::root().join(\"override\"))",98],["let subpats = self.create_subpatterns(cx, paths, mutbl);",91],["for path in paths.iter() {",86],["// Potential trouble: if we allow macros with paths instead of",82],["/// TODO(pcwalton): Add some more fast paths, like toggling `display: none`, adding block kids",77],["/// module (like paths in an import).",76]],"useCount":14168},{"word":"pattern","context":[["// pattern.",147],["self.resolve_error(pattern.span,",168],["pattern,",186],["pattern.span,",199],["match pattern.node {",251],["// error-pattern:fail",270],["//! [builder-pattern]: http://en.wikipedia.org/wiki/Builder_pattern",276],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276],["/// The pattern can be a simple `&str`, `char`, or a closure that",310],["self.record_def(pattern.id, def);",128]],"useCount":28862},{"word":"pcwalton","context":[["// FIXME(pcwalton): This has not been updated to handle the stacking context relative",134],["/// TODO(pcwalton): Only wait for style recalc, since we have off-main-thread layout.",142],["/// TODO(pcwalton): Make this private. It will let us avoid borrow flag checks in some cases.",144],["// TODO(pcwalton): Multiple transitions.",160],["/// TODO(pcwalton): Elliptical radii.",164],["// FIXME(pcwalton, #2742): Implement scrolling for `scroll` and `auto`.",168],["// FIXME(pcwalton): Percentages should be relative to any definite size per CSS-SIZING.",186],["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264],["// FIXME(pcwalton, #2795): Get the real container size.",356],["// TODO(pcwalton): Allocation of this buffer is expensive. Consider a small-vector",126]],"useCount":12976},{"word":"pipeline","context":[["let pipeline = self.pipeline(pipeline_id);",225],["// Find the script channel for the given parent pipeline,",202],["let pipeline = self.pipeline(pipeline_id);",225],["pipeline: pipeline,",293],["pipeline: pipeline,",293],["Some(pipeline) => pipeline.script_chan.send(msg),",305],["Some(pipeline) => pipeline.script_chan.send(msg),",305],["Some(pipeline) => pipeline,",310],["Some(pipeline) => pipeline,",310],["pipeline: PipelineId,",545]],"useCount":36512},{"word":"pipeline_id","context":[["let result = match self.pipelines.get(&pipeline_id) {",230],["let pipeline = self.pipeline(pipeline_id);",225],["pub pipeline_id: PipelineId,",285],["pipeline_id: PipelineId,",2553],["pipeline_id,",744],["let page = get_page(&self.root_page(), pipeline_id);",522],["if let Some(ref mut load) = loads.iter_mut().find(|load| load.pipeline_id == id) {",391],["self.handle_send_error(pipeline_id, e);",353],["pipeline_id: pipeline_id,",299],["pipeline_id: pipeline_id,",299]],"useCount":46008},{"word":"point","context":[["point: Point2D<f32>) {",226],["/// The entry point to document loading. Defines bindings, sets up the window and document",138],["use euclid::point::Point2D;",1143],["use geom::point::Point2D;",410],["// are supported in floating-point literals",224],["point,",202],["if let Some(result) = self.find_topmost_layer_at_point(point / self.scene.scale) {",176],["result.point.to_untyped()));",176],["point: Point2D<f32>)",152],["let point = Point2D::new(x, y);",143]],"useCount":40022},{"word":"pointer","context":[["/// Returns the index pointer for code point `code` in this index.",100],["/// then ensures that the lifetime of the resulting pointer is",104],["pointer: tmp",113],["self.pointer",115],["// same pointer.",132],["// a `&T` pointer.  We can then proceed down the normal",132],["/// Does not validate the pointer type.",158],["// Extract the data pointer",216],["// Use a non-null pointer value",270],["// Mutable pointer to the field.",1874]],"useCount":32858},{"word":"pop","context":[["stack.pop();",209],["pub fn pop(&mut self) -> Option<T> {",234],["match self.queue.pop() {",235],["self.value_ribs.pop();",253],["output.pop();",326],["self.stack.pop();",351],["match (stack.pop().unwrap(), stack.pop().unwrap()) {",403],["match (stack.pop().unwrap(), stack.pop().unwrap()) {",403],["path.pop();",404],["match self.stack.pop() {",502]],"useCount":19469},{"word":"port","context":[["port.recv();",296],["let (chan, port) = channel();",745],["port: port,",721],["port: port,",721],["let port = addr.port;",537],["let port = addr.port;",537],["port: Receiver<Msg>,",281],["let (chan, port) = ipc::channel().unwrap();",206],["/// The port on which we receive messages from the image cache",205],["let mut acceptor = TcpListener::bind(ip_str.as_slice(), port).listen();",204]],"useCount":23573},{"word":"pos","context":[["let mut pos = 0;",743],["pos += 1;",564],["Ok(pos)",507],["pos: pos,",429],["pos: pos,",429],["let (v, pos) = item;",410],["pos: 0,",371],["pos: usize,",368],["Matched(pos,",364],["let got = find_definition(src, &path, pos, &core::Session::from_path(&cache, &path, &path)).unwrap();",356]],"useCount":43384},{"word":"position","context":[["position: [f32; 2],",203],["// Use a dummy value for `block_start`, since it has the static position.",210],["position: 0,",223],["attribute vec2 position;",243],["position: position,",252],["position: position,",252],["list_style_position: position,",335],["position: ArgumentIs(3),",336],["position: ArgumentNext,",444],["gl_Position = vec4(position, 0.0, 1.0);",339]],"useCount":49004},{"word":"possible","context":[["// The following things are possible to see here:",79],["/// with an immutable reference while that same node is being laid out, causing possible iterator",81],["// Check that it is possible to represent this type. This call identifies",81],["// Check that it is possible to instantiate this enum:",86],["/// can be expensive to compute, so if possible use the `border_padding` field instead.",94],["// shortest lifetime possible so as to avoid spurious borrowck",95],["// resolution is possible, then an error is reported.",95],["/// Some possible values:",96],["// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.",257],["// Find the pipeline that corresponds to this rectangle. It's possible that this",97]],"useCount":13210},{"word":"prefix","context":[["prefix: prefix,",265],["/// Specifies the filename prefix used for shared libraries on this",276],["BucketNameWriter::write_params(params, &(prefix.to_string() + \"Bucket\"), &obj.bucket);",284],["prefix: &str,",356],["prefix,",423],["self.prefix,",502],["if prefix != \"\" { prefix.push_str(\".\"); }",779],["if prefix != \"\" { prefix.push_str(\".\"); }",779],["let mut prefix = name.to_string();",786],["prefix: Option<DOMString>,",2224]],"useCount":31555},{"word":"prelude","context":[["use iron::prelude::*;",343],["use std::io::prelude::*;",3576],["use std::os::unix::prelude::*;",240],["pub mod prelude;",240],["use prelude::*;",2542],["use prelude::v1::*;",2463],["use core::prelude::*;",1948],["/// use std::io::prelude::*;",615],["use std::prelude::*;",546],["use io::prelude::*;",413]],"useCount":17046},{"word":"prev","context":[["prev",219],["Some(prev) => {",204],["self.tail = prev.prev;",129],["self.tail = prev.prev;",129],["if prev == PreviousCharacter::LF || prev == PreviousCharacter::SPHT {",108],["prev = PreviousCharacter::SPHT;",108],["if prev == PreviousCharacter::LF || prev == PreviousCharacter::SPHT {",108],["prev: vec!(),",105],["prev = next;",104],["//         return multibyte_char_range_at_reverse(self, prev);",88]],"useCount":11852},{"word":"print","context":[["// gdb-command:print x",866],["// lldb-command:print x",723],["// gdb-command:print arg1",537],["// gdb-command:print arg2",521],["// lldb-command:print arg1",455],["// lldb-command:print arg2",452],["// gdb-command:print y",413],["use print::pprust;",409],["// debugger:print x",408],["use syntax::print::pprust;",875]],"useCount":31249},{"word":"println","context":[["println!(\"{}\", x);",274],["println!(\"\");",2790],["///     println!(\"{}\", x);",823],["println!(\"{} {}\", NAME, VERSION);",472],["println!(\"{:?}\", expected);",421],["println!(\"{:?}\", actual);",421],["println!(\"{}\", s);",286],["//!     Ok(res) => println!(\"Success: {:?}\", res),",274],["//!         |Error::JsonDecodeError(_, _) => println!(\"{}\", e),",274],["println!(\"{} bytes read, but {} expected ...\",",250]],"useCount":47008},{"word":"process","context":[["fn process(&self, flow: &mut Flow) {",398],["use std::process::Command;",1041],["#[stable(feature = \"process\", since = \"1.0.0\")]",897],["use std::process;",771],["process::exit(1);",757],["use std::process::exit;",371],["std::process::exit(exit_status);",274],["process::exit(0);",254],["assert_that(p.process(cargo_dir().join(\"cargo\")).arg(\"build\"),",236],["std::process::exit(1);",391]],"useCount":31222},{"word":"program","context":[["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["run_program(&program[..], &mut cpu);",151],["print_usage(&program, opts);",159],["match program {",159],["let program = glium::Program::from_source(&display,",169],["let program = args[0].clone();",238],["bind_texture_uniform(ctxt, &**texture, sampler, location, program, texture_bind_points)",295],["if let Some(program) = program {",460],["if let Some(program) = program {",460],["let (vb, ib, program) = support::build_fullscreen_red_pipeline(&display);",145]],"useCount":17081},{"word":"project","context":[["let baz = project(\"baz\")",179],["// at your option. All files in the project carrying such",198],["let bar = project(\"bar\")",288],["project",308],["project.file(\"Cargo.toml\", r#\"",384],["let foo = project(\"foo\")",762],["(Some(r##\"project\"##),",999],["[project]",6589],["let p = project(\"foo\")",7347],["let mut p = project(\"foo\");",486]],"useCount":24660},{"word":"properties","context":[["let serialization = shorthand_properties_to_string(properties);",456],["properties::modify_style_for_replaced_content(&mut whitespace_style);",128],["properties::modify_style_for_replaced_content(&mut style);",148],["// Do not allow stylesheets to set derived properties.",173],["use style::properties::ServoComputedValues;",190],["use properties::longhands;",224],["//!         * a collection of properties",276],["//!     * a collection of properties and *Parts*",276],["let mut properties = Vec::new();",497],["use style::properties::ComputedValues;",636]],"useCount":17476},{"word":"property","context":[["% for property in LONGHANDS:",485],["% if not property.derived_from:",417],["(Some(r##\"web-property-id\"##),",175],["% if property.derived_from is None:",523],["% for property in data.longhands:",616],["if seen.get_${property.ident}() {",243],["% for property in data.shorthands:",206],["/// The 'position' property of this flow.",196],["seen.set_${property.ident}();",168],["PropertyDeclaration::${property.camel_case}(..) => {",178]],"useCount":23073},{"word":"protobuf","context":[["return ::std::result::Result::Err(::protobuf::ProtobufError::WireError(\"unexpected wire type\".to_string()));",1115],["static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {",898],["fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {",903],["fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {",903],["static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {",898],["ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,",908],["my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());",913],["unknown_fields: ::protobuf::UnknownFields,",913],["if wire_type != ::protobuf::wire_format::WireTypeVarint {",1054],["lock: ::protobuf::lazy::ONCE_INIT,",2066]],"useCount":29341},{"word":"protocol","context":[["/// The Iterator protocol states that an iterator yields a (potentially-empty,",69],["/// it's finished. The Iterator protocol does not define behavior after `None`",69],["// https://html.spec.whatwg.org/multipage/#javascript-protocol",75],["mod protocol;",98],["Some(r##\"Specify the upload protocol (simple|resumable) and the file to upload\"##),",101],["let protocol = calltype_from_str(vals[0], [\"simple\", \"resumable\"].iter().map(|&v| v.to_string()).collect(), err);",101],["use protocol::*;",167],["use protocol::JsonPacketStream;",187],["let protocol = CallType::Standard;",5346],["match match protocol {",5447]],"useCount":13706},{"word":"provided","context":[["/// Remove any existing association between the provided id and any elements in this document.",132],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["//! All structures provided by this library are made to be [enocodable](trait.RequestValue.html) and",276],["// in the documentation and/or other materials provided with the",225],["//   the documentation and/or other materials provided with the",192],["/// Associate an element present in this document with the provided id.",132],["*       documentation and/or other materials provided with the distribution.",101],["// Send a message to the parent of the provided pipeline (if it exists)",99],["/// This function will return an error if the provided `path` doesn't exist, if",96],["// If this method is provided, we need to know where it came from",85]],"useCount":14163},{"word":"ptr","context":[["use std::ptr;",4827],["use syntax::ptr::P;",1741],["use ptr;",1309],["use ptr::P;",1073],["ptr::null_mut(),",910],["ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,",908],["use core::ptr;",866],["if ptr.is_null() {",513],["None => ptr::null_mut(),",511],["ptr",502]],"useCount":78415},{"word":"pub","context":[["pub _address: u8,",3706],["pub _phantom_0: ::std::marker::PhantomData<T>,",1498],["pub fn is_empty(&self) -> bool {",1513],["pub mod posix01 {",1535],["pub fn new() -> Self {",1818],["pub span: Span,",2315],["pub fn get_initial_value() -> computed_value::T {",2455],["pub name: String,",2684],["pub mod computed_value {",3531],["pub fn main() {",13348]],"useCount":1550554},{"word":"push","context":[["err.issues.push(CLIError::UnknownParameter(key.to_string(),",5447],["reports.push(Report {",499],["err.issues.push(field_err);",2021],["hints.push(from_declaration(",1269],["v.push(ClassMethodField {",1185],["tt.push(::syntax::tokenstream::TokenTree::Token(_sp,",676],["out.push(m);",620],["fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(",526],["v.push(ClassMethod {",502],["fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(",391]],"useCount":123027},{"word":"push_str","context":[["unique_type_id.push_str(&inner_type_id[..]);",120],["url.push_str(\"/\");",117],["result.push_str(to);",118],["name_to_append_suffix_to.push_str(\",\");",134],["indent.push_str(\"| \")",139],["m.push_str(\": \");",161],["output.push_str(\", \");",163],["s.push_str(filename);",164],["s.push_str(\"::\");",182],["if prefix != \"\" { prefix.push_str(\".\"); }",779]],"useCount":22454},{"word":"queue","context":[["let mut queue = VecDeque::new();",121],["// Squash any pending resize, reflow, animation tick, and mouse-move events in the queue.",94],["assert_eq!(parser.queue(), &queue);",102],["let queue = vec![",85],["run_queue_with_custom_work_data_type(queue, |queue| {",76],["assert_eq!(parser.queue(), &queue);",102],["queue.push(WorkUnit {",127],["/// events in the event queue.",127],["match self.queue.pop() {",235],["* placed in the event queue.",546]],"useCount":11391},{"word":"r","context":[["Some(r##\"p\"##),",5447],["Some(r##\"r\"##),",2021],["Some(r##\"r\"##),",2021],["r",3152],["(Some(r##\"out\"##),",4816],["Some(r##\"o\"##),",4816],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["(Some(r##\"v\"##),",5447],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],[".file(\"Cargo.toml\", r#\"",9158]],"useCount":232097},{"word":"rand","context":[["/// use std::rand;",222],["use rand::random;",239],["use rand::{thread_rng, Rng};",252],["use rand::{self, Rng};",263],["use std::rand::Rng;",305],["use std::rand;",505],["use rand;",594],["let mut rng = rand::thread_rng();",798],["use rand::Rng;",1200],["extern crate rand;",3039]],"useCount":16328},{"word":"range","context":[["let pos = range.start;",239],["for fragment_index in line.range.each_index() {",237],["Err(range) => {",240],["convert.update(range);",524],["for _ in range(0, stress_factor()) {",240],["range: range,",249],["range: range,",249],["for _ in range(0u, 1000) {",254],["use range::Range;",288],["% for weight in range(100, 901, 100):",419]],"useCount":46150},{"word":"raw","context":[["val: ::std::os::raw::c_uint) {",300],["-> raw::c_int;",355],["name: *const ::std::os::raw::c_char,",381],["*mut ::std::os::raw::c_void,",503],["*mut ::std::os::raw::c_void)",536],["-> ::std::os::raw::c_int;",1850],["let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);",2268],["::std::mem::transmute(raw.offset(0))",2371],["-> *mut ::std::os::raw::c_char;",331],["*mut ::std::os::raw::c_void)>;",314]],"useCount":99765},{"word":"rbml_w","context":[["rbml_w,",372],["encode_name(rbml_w, item.ident.name);",372],["encode_visibility(rbml_w, vis);",405],["add_to_index(item, rbml_w, index);",412],["encode_def_id(rbml_w, def_id);",414],["rbml_w.id(id);",671],["encode_stability(rbml_w, stab);",789],["rbml_w.start_tag(tag_items_data_item);",800],["rbml_w: &mut Encoder,",1478],["rbml_w.end_tag();",3952]],"useCount":33707},{"word":"rc","context":[["use std::rc::Rc;",7351],["use rc::Rc;",117],["/// use std::rc::Rc;",802],["Some(rc) => match *rc {",303],["Some(rc) => match *rc {",303],["use std::rc::{Rc, Weak};",208],["//! use std::rc::Rc;",137],["Err(rc)",83],["pub mod rc;",81],["pub use alloc::rc;",74]],"useCount":12295},{"word":"rcx","context":[["let repeating_scope = rcx.set_repeating_scope(body.id);",140],["let mc = mc::MemCategorizationContext::new(rcx.fcx);",193],["rcx.set_repeating_scope(repeating_scope);",201],["visit::walk_expr(rcx, expr, ());",232],["let tcx = rcx.fcx.tcx();",282],["visit::walk_expr(rcx, expr);",570],["let mc = mc::MemCategorizationContext::new(rcx);",176],["let tcx = rcx.fcx.ccx.tcx;",174],["constrain_call(rcx, expr, Some(&**lhs),",151],["let expr_ty = rcx.resolve_node_type(expr.id);",117]],"useCount":12123},{"word":"re","context":[["// Now that we know the label we're going to,",122],["b.iter(|| re.is_match(text));",94],["/// Dumps the flow tree for debugging, with a prefix to indicate that we're at the given level.",94],["// Don't clip if we're text.",95],["Ok(re) => re,",98],["Ok(re) => re,",98],["// If we're painting in headless mode, schedule a recomposite.",104],["//! list building, as the actual painting does not happen hereโonly deciding *what* we're going to",93],["// so we're doing it this way.",93],["//                 // semantics of this negation depend on the crate we're being",128]],"useCount":28918},{"word":"read","context":[["fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {",526],["fn read(&mut self, buf: &mut [u8]) -> Result<usize> {",316],["self.inner.read(buf)",268],["fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",1051],["println!(\"{} bytes read, but {} expected ...\",",250],["let mut read = 0;",243],["check!(read_stream.read(&mut read_mem));",220],["stream.read(buf).unwrap();",208],["let nread = reader.read(&mut buf);",195],["let data: Vec<Vec<(u8, u8, u8, u8)>> = texture.read();",191]],"useCount":39790},{"word":"reader","context":[["for line in reader.lines() {",228],["assert_eq!(reader.read(&mut buf).unwrap(), 0);",190],["reader: reader,",165],["reader: reader,",165],["let mut stack = XmlResponseFromAws::new(reader.events().peekable());",158],["let mut reader = EventReader::new(result);",155],["match reader.read(&mut buf) {",190],["let nread = reader.read(&mut buf);",195],["let nd = reader::get_doc(meta_item_doc, tag_meta_item_name);",204],["res = reader::vuint_at(data, res.next).unwrap();",280]],"useCount":28579},{"word":"reason","context":[["#[unstable(feature = \"core\", reason = \"likely to be removed\")]",146],["//                        reason = \"should ideally be implemented for all fixed-sized arrays\")]",1188],["//     #[unstable(feature = \"hash\", reason = \"module was recently redesigned\")]",682],["#[unstable(feature = \"core\", reason = \"trait is experimental\")]",364],["reason = \"matches collection reform specification, waiting for dust to settle\")]",346],["reason = \"unsure about its place in the world\")]",295],["reason = \"pending integer conventions\")]",208],["reason = \"likely to be replaced by range notation and adapters\")]",172],["reason,",144],["/// calling them individually, since there is no reason not to perform both operations.",132]],"useCount":22585},{"word":"receiver","context":[["let (sender, receiver) = ipc::channel().unwrap();",2080],["receiver: HandleObject,",164],["box receiver as Box<CompositorReceiver>)",168],["let (sender, receiver) = channel();",568],["receiver.recv().unwrap()",470],["match receiver.recv().unwrap() {",380],["let result = receiver.recv().unwrap();",239],["receiver: receiver,",216],["receiver: receiver,",216],["receiver,",182]],"useCount":16393},{"word":"rect","context":[["if let Some(rect) = self.create_drawable_rect(x, y, width, height) {",165],["let child_origin = Point2D::new(rect.X() as f32, rect.Y() as f32);",174],["let rect = iframe.upcast::<Element>().GetBoundingClientRect();",174],["let child_origin = Point2D::new(rect.X() as f32, rect.Y() as f32);",174],["let rect = node.get_bounding_content_box();",186],["Some(rect) => {",219],["rect",258],["use geom::rect::Rect;",401],["use euclid::rect::Rect;",713],["Some(rect) => rect,",158]],"useCount":24049},{"word":"recv","context":[["assert_eq!(rx.recv().unwrap(), 1);",344],["assert_eq!(rx.recv(), 1);",302],["let _ = rx.recv();",346],["match receiver.recv().unwrap() {",380],["rx_done.recv().unwrap();",393],["rx2.recv();",415],["rx2.recv().unwrap();",420],["receiver.recv().unwrap()",470],["rx.recv().unwrap();",1884],["rx.recv();",1894]],"useCount":28813},{"word":"ref","context":[["ast::ItemEnum(ref enum_definition, _) => {",384],["if let Some(ref mut load) = loads.iter_mut().find(|load| load.pipeline_id == id) {",391],["ast::ExprBlock(ref blk) => {",420],["ast::ExprLit(ref lit) => {",447],["let &LayoutRPCImpl(ref rw_data) = self;",448],["ref s => {",607],["let ConstellationChan(ref chan) = self.constellation_chan;",669],["Ok(ref m) => {",1271],["if let Some(ref s) = self.super_type() {",1777],["Some(ref s) => {",348]],"useCount":263345},{"word":"reference","context":[["/// Gets a mutable reference to the value in the entry.",100],["/// Gets a reference to the value in the entry.",99],["// The reference count. This will only be present for Rust instances!",407],["// owning reference.",138],["/// Returns a reference to the value corresponding to the key.",137],["/// Returns a mutable reference to the value corresponding to the key.",134],["// positioned, it would return a reference to itself in",115],["// `abs_descendants` and would lead to a circular reference.",115],["/// Gets a reference to the underlying writer.",112],["// cow0 should have a unique reference",109]],"useCount":28649},{"word":"region","context":[["match region {",337],["// not recurse on a line if nothing in it can intersect the dirty region.",107],["region,",114],["(Some(r##\"region\"##),",120],["region: region,",137],["region: region,",137],["region",202],["let region =",218],["region: ty::Region,",289],["use middle::region;",476]],"useCount":33262},{"word":"regions","context":[["match self.regions {",91],["match substs.regions {",249],["subst::NonerasedRegions(ref regions) => {",290],["types looking for regions and making sure that they did not escape",95],["method.generics.regions.get_slice(subst::FnSpace)",98],["for &r in regions.iter() {",104],["let mut regions = VecPerParamSpace::empty();",110],["self.regions.repr(tcx))",118],["let regions =",158],["// cannot add constraints once regions are resolved",212]],"useCount":19556},{"word":"registry","context":[["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.3",1448],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.10",1205],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.9",946],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.8",586],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.5",358],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.11",226],["{updating} registry `[..]`",215],["registry: &ActorRegistry,",212],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.7",205],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.6",205]],"useCount":14783},{"word":"remove","context":[["if remove {",153],["self.base.flags.remove(IMPACTED_BY_RIGHT_FLOATS);",141],["flags.remove(RETRY_AT_CHARACTER_BOUNDARIES);",176],["flags.remove(flag);",198],["// TODO: remove elaborted bounds. Blocked on rust/issues#20671",204],["let load = self.incomplete_loads.borrow_mut().remove(idx);",223],["jdb.remove(&foo);",245],["self.base.restyle_damage.remove(REFLOW_OUT_OF_FLOW | REFLOW);",362],["// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)",519],["err.issues.remove(last_errc);",2021]],"useCount":25861},{"word":"replace","context":[["//! // unless you replace  `None` with the desired Flow.",276],["let tmp = mem::replace(&mut self.v, &mut []);",275],["mem::replace(inline_fragment_accumulator,",162],["substs.mut_regions().replace(",136],["mem::replace(",119],["/// Commence a new URL load which will either replace this window or scroll to a fragment.",116],["replace(&mut self.next, vec!())",105],["/// FIXME(pcwalton): Just replace with the clear type from the style module for speed?",100],["[replace]",149],["use std::mem::replace;",828]],"useCount":16506},{"word":"repr","context":[["fn repr(&self, tcx: &ctxt) -> String {",864],["#[repr(i8)]",958],["#[repr(packed)]",1054],["fn repr(&self, _tcx: &ctxt) -> String {",1069],["#[repr(u8)]",1442],["fn repr(&self, tcx: &ctxt<'tcx>) -> String {",1481],["#[repr(i32)]",1762],["#[repr(u32)]",5018],["#[repr(C)] #[derive(Clone, Copy, Debug)]",6870],["#[repr(C)]",59021]],"useCount":129985},{"word":"request","context":[["//! the server to indicate either the set parts of the request or the desired parts in the response.",276],["request.set_params(params);",294],["match request {",359],["Some(r##\"Project ID for this request.\"##),",395],["* Returns the reply of the request asked by",546],["* This form can be used only if the request will cause",546],["* This form can be used only if the request will not cause",584],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["* Delivers a request to the X server.",2064],["//! * [request values](trait.RequestValue.html) are moved",275]],"useCount":33005},{"word":"required","context":[["if let &Some(required) = required {",268],["if let &Some(required) = required {",268],["for &(ref arg_name, ref flag, ref desc, ref required, ref multi) in args {",268],["arg = arg.required(required);",268],["arg = arg.required(required);",268],[".required(true)",424],["// No more reflow required",136],[".required(true))",238],[".required();",104],[".required(false)",192]],"useCount":14061},{"word":"res","context":[["Ok(res)",795],["match res {",1332],["res",3422],["let mut res = Vec::new();",588],["return res;",550],["Ok(res) => res,",544],["Ok(res) => res,",544],["assert!(res.is_err());",482],["let res = unsafe {",433],["assert!(res.is_ok());",357]],"useCount":40137},{"word":"resolve","context":[["// We failed to resolve the name. Report an error.",148],["match self.resolve(fcx) {",146],["let renamed = mtwt::resolve(ident);",117],["// work around bizarre resolve errors",124],["use rustc_resolve as resolve;",125],["/// Try to resolve the type for the given node.",133],["let renamed = mtwt::resolve(label);",136],["def_map: resolve::DefMap,",140],["// caught in resolve.",143],["use middle::resolve;",244]],"useCount":15566},{"word":"response","context":[["Ok(mut response) => {",684],["Ok((mut response, output_schema)) => {",4800],["match response {",256],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["//! the server to indicate either the set parts of the request or the desired parts in the response.",276],["response.send(MESSAGE).unwrap();",285],["response: None,",303],["return response;",303],["response",511],["use net_traits::response::HttpsState;",228]],"useCount":31653},{"word":"result","context":[["return result;",1733],["Ok(result)",1222],["let mut result = Vec::new();",1364],["test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured",1156],["return ::std::result::Result::Err(::protobuf::ProtobufError::WireError(\"unexpected wire type\".to_string()));",1115],["assert!(result.is_err());",1069],["assert!(result.is_ok());",979],["match result {",3506],["result",8567],["::std::result::Result::Ok(())",2231]],"useCount":130894},{"word":"results","context":[["\"max-results\" => {",833],["call = call.max_results(arg_from_str(value.unwrap_or(\"-0\"), err, \"max-results\", \"integer\"));",827],["v.extend([\"page-token\", \"max-results\"].iter().map(|v|*v));",198],["// Table items contribute table flow construction results.",588],["//! the doit() methods, or handed as possibly intermediate results to either the",276],["results",230],["let mut results = vec![];",221],["v.extend([\"filter\", \"page-token\", \"max-results\"].iter().map(|v|*v));",187],["let mut results = Vec::new();",135],["//         /// if `other == 0` or the operation results in underflow or overflow.",256]],"useCount":11931},{"word":"ret","context":[["if ret != 0 {",375],["match ret {",354],["let mut ret = None;",414],["Some(ret)",580],["if ret == 0 {",619],["Ok(ret)",735],["let mut ret = Vec::new();",772],["let ret = unsafe {",965],["return ret;",1788],["ret",5547]],"useCount":35146},{"word":"return","context":[["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["return",10047],["return true;",7978],["return Ok(());",4418],["return None",4074],["None => return None,",3990],["return false;",12981],["return None;",14440],["return;",29826],["None => return,",3733]],"useCount":375060},{"word":"returned","context":[["//         /// `None` is returned, otherwise the power of two is wrapped in `Some`.",128],["// returned.",120],["/// The borrow lasts until the returned `Ref` exits scope. Multiple",122],["/// The last element returned, if any, will contain the remainder of the",140],["/// The number of bytes returned is system-dependent.",164],["/// is returned by the iterator and should be handled by the caller.",235],["/// returned.",375],["/// type cannot be represented by this value, the `None` is returned.",536],["* The returned value must be freed by the caller using free().",546],["* a reply to be generated. Any returned error will be",1130]],"useCount":21346},{"word":"returns","context":[["//! The `doit()` method performs the actual communication with the server and returns the respective result.",276],["/// In other words, remove all elements `e` such that `f(&e)` returns false.",102],["/// Optionally returns the filesystem path to the current executable which is",102],["/// If this is a table cell flow, returns the underlying object, borrowed mutably. Fails",104],["/// If this is a table cell flow, returns the underlying object. Fails otherwise.",114],["/// returns it.",146],["/// function returns, or else it will end up pointing to garbage.",146],["//         /// minimal value). In such a case, this function returns `0`.",256],["//         /// in the type. In such a case, this function returns `MIN`",256],["//         /// a case, this function returns `MIN` itself.",256]],"useCount":23715},{"word":"rhs","context":[["//         pub fn wrapping_add(self, rhs: Self) -> Self {",256],["rhs: ValueRef,",925],["//         /// where `mask` removes any high-order bits of `rhs` that",512],["//                 intrinsics::overflowing_sub(self, rhs)",256],["//         pub fn wrapping_shr(self, rhs: u32) -> Self {",256],["//             self.overflowing_rem(rhs).0",256],["//         pub fn wrapping_mul(self, rhs: Self) -> Self {",256],["//         pub fn wrapping_rem(self, rhs: Self) -> Self {",256],["//                 intrinsics::overflowing_mul(self, rhs)",256],["//         pub fn wrapping_div(self, rhs: Self) -> Self {",256]],"useCount":31497},{"word":"right","context":[["let right: ($($T,)+) = ($($T::default(),)+);",288],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276],["//         /// Shifts the bits to the right by a specified amount, `n`,",256],["right: right,",205],["right: right,",205],["left = right.clone();",194],["let right: ($($T,)+) = ($($T::default() + 1 as $T,)+);",168],["for side in ['top', 'right', 'bottom', 'left'])}\">",157],["% for side in [\"top\", \"right\", \"bottom\", \"left\"]:",968],["* None right now.",360]],"useCount":33009},{"word":"rng","context":[["fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {",278],["let mut rng = ::test::rng();",250],["let mut rng = ::test::rng();",250],["fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }",241],["let mut rng = task_rng();",319],["let mut r = rng();",511],["let mut rng = thread_rng();",628],["let mut rng = rand::thread_rng();",798],["let mut rng = weak_rng();",1051],["fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }",241]],"useCount":19009},{"word":"root","context":[["let window = self.window.root();",1537],["/// See the docs in the crate root file.",352],["let document = self.addr.root();",347],["let root = NodeCast::from_ref(self);",581],["let window = window_from_node(self).root();",373],["p.root().move_into_the_past().unwrap();",408],["let global = self.global.root();",433],["let root = self.upcast::<Node>();",449],["SCRIPT_THREAD_ROOT.with(|root| {",462],["match self.scene.root {",497]],"useCount":61804},{"word":"rs","context":[[".file(\"src/lib.rs\", \"\")",2196],["let rs = getopts(args, opts);",520],[".file(\"src/lib.rs\", \"",698],[".file(\"src/lib.rs\", \"\");",796],[".file(\"build.rs\", r#\"",885],[".file(\"src/main.rs\", \"fn main() {}\");",972],[".file(\"src/lib.rs\", r#\"",1427],[".file(\"src/main.rs\", r#\"",1527],["match rs {",1672],["build = \"build.rs\"",2144]],"useCount":49642},{"word":"rt","context":[["use std::rt;",236],["use rt::task::Task;",226],["use rt::local::Local;",323],["try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));",413],["return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));",559],["use std::rt::rtio;",277],["my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;",844],["my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());",913],["use rt;",206],["use std::rt::local::Local;",188]],"useCount":17561},{"word":"run","context":[["run(proc() {",166],["loop_.run();",172],[".run()",179],["text_fragment_info.run.character_slices_in_range(&text_fragment_info.range);",184],["pub fn run(&mut self) {",257],["fn run(&mut self) {",324],["// debugger:run",482],["// lldb-command:run",592],["// gdb-command:run",854],["procsrv::run(\"\",",294]],"useCount":32208},{"word":"running","context":[["running = RUNNING,",238],["running 1 test",1724],["running 0 tests",732],["\", compiling = COMPILING, running = RUNNING)));",338],["{running} target[..]foo-[..]",298],["{running} [..] -C opt-level=3 [..]",108],["{running} target[..]release[..]foo-[..]",114],["{running} `rustc [..] --crate-name foo [..]`",119],["compiling = COMPILING, running = RUNNING,",281],["{running} `[..]build-script-build[..]`",122]],"useCount":14336},{"word":"rust","context":[["/* automatically generated by rust-bindgen */",646],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896],["// FIXME(https://github.com/rust-lang/rust/issues/23338)",896],["html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",",1051],["```rust",1158],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["//! ```rust",2020],["//         /// ```rust",3968],["/// ```rust",11799]],"useCount":48314},{"word":"rust1","context":[["#[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]",39],["#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]",40],["#[stable(feature = \"rust1\", since = \"1.0.0\")]",58569],["//         #[stable(feature = \"rust1\", since = \"1.0.0\")]",7781],["//             #[stable(feature = \"rust1\", since = \"1.0.0\")]",5555],["#[stable(feature = \"rust1\", since = \"1.0.0\", reason = \"text\")]",48],["//                 #[stable(feature = \"rust1\", since = \"1.0.0\")]",120],["// #[stable(feature = \"rust1\", since = \"1.0.0\")]",204],["#![stable(feature = \"rust1\", since = \"1.0.0\")]",1328],["//     #[stable(feature = \"rust1\", since = \"1.0.0\")]",2402]],"useCount":76230},{"word":"rustc","context":[["use rustc::hir;",169],["use rustc::metadata::csearch;",219],["use rustc::ast_map;",200],["use rustc::session::Session;",176],["[RUNNING] `rustc [..]`",173],["use rustc::middle::ty;",282],["extern crate rustc;",822],["use rustc::plugin::Registry;",344],["extern crate \"rustc-serialize\" as rustc_serialize;",159],["use rustc::lint;",160]],"useCount":18305},{"word":"rx","context":[["drop(rx);",810],["rx.recv().unwrap();",1884],["let (tx, rx) = channel::<int>();",680],["let (tx, rx) = sync_channel::<int>(0);",579],["let (tx, rx) = channel::<i32>();",486],["let (tx, rx) = channel::<()>();",425],["rx.recv();",1894],["let (tx, rx) = channel();",5539],["let (tx, rx) = sync_channel::<i32>(0);",375],["let (tx, rx) = mpsc::channel();",359]],"useCount":28420},{"word":"s","context":[["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["try!(space(&mut self.s));",3400],["s",2100],["let mut s = String::new();",1818],["if let Some(ref s) = self.super_type() {",1777],["Some(s) => {",1269],["match s {",1223],["fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {",1143],["Some(s) => s,",921],["Some(s) => s,",921]],"useCount":380270},{"word":"same","context":[["// between cross origin iframes in the same TLD.",104],["// none should point to the same backing memory",109],["// cow1 and cow2 should share the same contents",109],["// repeated byte. This way each interpretation of the union should look the same, no matter if",112],["/// immutable borrows can be taken out at the same time.",122],["// Compare the pipeline's url to the new url. If the origin is the same,",122],["// same pointer.",132],["/// Creates a new layout node with the same lifetime as this layout node.",199],["//                         // ensure overflow occurs in the same manner it",256],[".help(\"Output all server communication to standard error. `tx` and `rx` are placed into the same stream.\")",268]],"useCount":30911},{"word":"scope","context":[["let scope = self.upcast::<WorkerGlobalScope>();",154],["pub scope: NodeId,",159],["scope = s;",176],["scope: scope,",218],["scope: scope,",218],[".long(\"scope\")",222],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["call = call.add_scope(scope);",5223],["scope.clear_cached_exits();",136]],"useCount":41503},{"word":"script","context":[["script.execute();",304],["/// Creates a new script chan.",145],["\"debugger.script\");",129],["/// We have gotten a window.close from script, which we pass on to the compositor.",131],["if !script.is_ready_to_be_executed() {",231],["script: MutableHandleScript) -> bool;",216],["// Find the script channel for the given parent pipeline,",202],["extern crate script;",173],["let debugger_script = make_out_name(config, testfile, \"debugger.script\");",156],["/// Window was resized, but this script was not active, so don't reflow yet",137]],"useCount":28485},{"word":"search","context":[["/// Sent when a link to a search engine is found.",77],["// limit search to 5 to reduce the number",77],["/// We're doing a name search in order to resolve a path type, a path",78],["if search.matches(c) { return Some(index); }",78],["if search.only_ascii() {",78],["// Found it. Stop the search here.",84],["if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase",115],["/// If the pattern allows a reverse search but its results might differ",116],["// Finally, search through external children.",148],["continue 'search;",192]],"useCount":11619},{"word":"see","context":[["* @see nsTAString",124],["/// Handles a mozbrowser event, for example see:",113],["// see codegen.rs for the explanation why impl Sync explicitly",423],["//! * Do not call any methods on DOM nodes without checking to see whether they use borrow flags.",108],["// see above",154],["/// For more information, see `TcpStream::set_timeout`",141],["// see comment on lvalues in",139],["/// For more information on formatters, see [the module-level documentation][module].",135],["// shrink to fit algorithm (see CSS 2.1 ยง 10.3.9)",128],["// NB see the slice::hack module in slice.rs for more information",114]],"useCount":20137},{"word":"self","context":[["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["match *self {",37759],["fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",18048],["self",14935],["fn drop(&mut self) {",13433],["fn clone(&self) -> Self { *self }",13205],["fn clone(&self) -> Self { *self }",13205],["match self {",13203],["self.bump();",12356],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447]],"useCount":3001849},{"word":"self_ty","context":[["self_ty,",478],["self_ty: self_ty,",142],["self_ty: Ty<'tcx>,",315],["self_ty: None,",313],["self_ty: Option<Ty<'tcx>>,",244],["self_ty: ty::t,",235],["match self_ty.sty {",205],["self_ty: Ty<'tcx>)",174],["pub fn self_ty(&self) -> Ty<'tcx> {",166],["self_ty: Ident,",145]],"useCount":12554},{"word":"send","context":[["tx.send(());",1467],["tx.send(()).unwrap();",1173],["chan.send(event).unwrap();",600],["tx.send(1).unwrap();",573],["self.ipc_renderer.send(msg).unwrap();",554],["tx2.send(());",544],["tx.send(1);",508],["tx2.send(()).unwrap();",498],["tx1.send(());",375],["chan.send(());",363]],"useCount":61032},{"word":"sender","context":[["let sender = self.devtools_marker_sender.borrow();",127],["return drop(sender.send(Err(BluetoothError::NotFound)));",168],["let mut adapter = get_adapter_or_return_error!(self, sender);",169],["sender: self.sender.clone(),",211],["sender: self.sender.clone(),",211],["sender: action_sender,",225],["sender: sender,",433],["sender: sender,",433],["let (sender, receiver) = channel();",568],["let (sender, receiver) = ipc::channel().unwrap();",2080]],"useCount":20561},{"word":"serialize","context":[["fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>",706],["extern crate serialize;",944],["use serialize::json;",448],["use serialize::Encoder;",306],["use serialize;",253],["value.serialize(self)",171],["extern crate \"rustc-serialize\" as rustc_serialize;",159],["use serialize::{Encodable, Decodable, Encoder, Decoder};",143],["use serialize::Encodable;",139],["fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {",139]],"useCount":11655},{"word":"server","context":[["mod server;",131],["* Delivers a request to the X server.",2064],["let _ = server.close();",505],["let (mut server, url) = make_server(handler);",481],["//! the server to indicate either the set parts of the request or the desired parts in the response.",276],["//! The `doit()` method performs the actual communication with the server and returns the respective result.",276],[".help(\"Output all server communication to standard error. `tx` and `rx` are placed into the same stream.\")",268],["/// For providing instructions to an optional devtools server.",224],["pub mod server;",167],["/// no devtools server",127]],"useCount":19910},{"word":"sess","context":[["sess: sess,",767],["self.tcx.sess.span_bug(",559],["self.tcx.sess.span_err(",1375],["self.tcx.sess.span_note(",1197],["sess.abort_if_errors();",893],["tcx.sess.span_err(",868],["self.tcx().sess.span_bug(",812],[".sess",794],["tcx.sess.span_bug(",781],["sess: sess,",767]],"useCount":102593},{"word":"session","context":[["use rustc::session::Session;",176],["use session::Session;",683],["use session::config;",187],["session.abort_if_errors();",195],["session: session,",227],["session: session,",227],["self.session",276],["session: &'a Session,",295],["use driver::session;",392],["use driver::session::Session;",561]],"useCount":14962},{"word":"set","context":[["/// present in the set.",345],["if let Err(field_err) = temp_cursor.set(&*key) {",2021],["self.cached_size.set(my_size);",913],["* The member rem is set to 0. The member data points to the",392],["set",379],["act.set(3u, true);",320],["/// set.insert(2);",298],["//! the server to indicate either the set parts of the request or the desired parts in the response.",276],["self.send_flag.set(false);",270],["let mut set = HashSet::new();",257]],"useCount":92951},{"word":"should","context":[["//                        reason = \"should ideally be implemented for all fixed-sized arrays\")]",1188],["// For synchronous requests, this should not fire any events, and just store data",184],["// FIXME(pcwalton): Percentages should be relative to any definite size per CSS-SIZING.",186],["/// This operation should compute in O(1) time.",197],["// This file was generated by the CEF translator tool and should not be edited",224],["/// This corresponds to `Reflow()` in Gecko and `layout()` in WebKit/Blink and should be",234],["/// is returned by the iterator and should be handled by the caller.",235],["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["panic!(\"Unscanned text fragments should have been scanned by now!\")",379]],"useCount":66203},{"word":"sig","context":[["if sig.inputs.len() > 0 {",100],["sig: ty::Binder(ty::FnSig {",252],["if sig.variadic {",189],["ast::MethodImplItem(ref sig, ref body) => {",169],["match sig.output {",136],["sig: ty::FnSig {",130],["enc_fn_sig(w, cx, &ft.sig);",118],["ast::MethodImplItem(ref sig, _) => {",108],["sig: ty::Binder(FnSig {",107],["pub sig: PolyFnSig<'tcx>,",104]],"useCount":16292},{"word":"since","context":[["#[stable(feature = \"rust1\", since = \"1.0.0\")]",58569],["//         #[stable(feature = \"rust1\", since = \"1.0.0\")]",7781],["//             #[stable(feature = \"rust1\", since = \"1.0.0\")]",5555],["//     #[stable(feature = \"rust1\", since = \"1.0.0\")]",2402],["#[stable(feature = \"raw_ext\", since = \"1.1.0\")]",2051],["#![stable(feature = \"rust1\", since = \"1.0.0\")]",1328],["//         #[unstable(feature = \"core\", since = \"1.0.0\")]",1280],["#[stable(feature = \"process\", since = \"1.0.0\")]",897],["#[stable(feature = \"env\", since = \"1.0.0\")]",836],["#[stable(feature = \"core\", since = \"1.6.0\")]",437]],"useCount":102756},{"word":"single","context":[["//! These will always take a single argument, for which the following statements are true.",276],["/// correspond to a single DOM text node. Split text fragments are implemented by referring to",96],["/// A scanned text fragment represents a single run of text with a distinct style. A `TextFragment`",96],["// TODO(bjz): this should only need to be a single character index, but both values are",96],["// This test checks that every single combination of tail position, length, and",97],["/// many times for a single page.",103],["/// Stores the navigation context for a single frame in the frame tree.",105],["/// `f32`s are 4 byte, IEEE754 single-precision floating point numbers.",106],["Err(e) => return Err(InvalidOptionsError::single(e, 4))",269],["Err(e) => return Err(InvalidOptionsError::single(e, 3)),",269]],"useCount":13525},{"word":"size","context":[["abs_bounds.size.width),",356],["// FIXME(pcwalton, #2795): Get the real container size.",356],["self.border_box.size.inline =",426],["use geom::size::Size2D;",434],["size: usize,",522],["size: size,",592],["size: size,",592],["use euclid::size::Size2D;",966],["size,",353],["size",342]],"useCount":135263},{"word":"size_hint","context":[["fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }",314],["assert_eq!(it.size_hint(), (1, Some(1)));",366],["assert_eq!(it.size_hint(), (0, Some(0)));",401],["fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }",406],["fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }",406],["let (_, upper) = self.iter.size_hint();",457],["self.iter.size_hint()",762],["fn size_hint(&self) -> (uint, Option<uint>) {",2194],["fn size_hint(&self) -> (usize, Option<usize>) {",3425],["fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }",314]],"useCount":18069},{"word":"size_of","context":[["/// a size of `count` * `size_of::<T>()` and an alignment of",134],["if size_of::<$SrcT>() <= size_of::<$DstT>() {",138],["if size_of::<$SrcT>() <= size_of::<$DstT>() {",138],["let size = mem::size_of::<T>();",182],["//             let p = if mem::size_of::<T>() == 0 {",188],["use mem::size_of;",192],["use core::mem::size_of;",210],["if mem::size_of::<T>() != 0 {",236],["use std::mem::size_of;",587],["if mem::size_of::<T>() == 0 {",630]],"useCount":24598},{"word":"size_t","context":[["len: size_t,",201],["pub type size_t = u64;",363],["use types::os::arch::c95::{c_int, size_t};",336],["-> size_t;",279],["pub type sighandler_t = size_t;",253],["pub type size_t = u32;",232],["use libc::size_t;",211],["size: size_t,",211],["pub const SIG_IGN: size_t = 1;",170],["pub gl_pathc:  size_t,",164]],"useCount":16585},{"word":"slice","context":[["let slice: &[T] = &[11, 12, 12, 13, 14, 15, 16];",188],["use core::slice::SliceExt;",193],["use slice::SliceExt;",215],["//         /// Converts a string slice in a given base to an integer.",256],["use std::slice::Iter;",336],["use core::slice;",349],["use slice;",511],["//     /// Converts the array to immutable slice",594],["//     /// Converts the array to mutable slice",594],["use std::slice;",1973]],"useCount":44401},{"word":"so","context":[["// take a copy of substs so that we own the vectors inside",288],["//! Methods supporting uploads can do so using up to 2 different protocols:",276],["// Not the primary fragment, so we do not take the noncontent size into account.",264],["pub const DLL_SUFFIX: &'static str = \".so\";",247],["pub const DLL_EXTENSION: &'static str = \"so\";",244],["/// platform that goes after the dot: in this case, `so`.",191],["/// platform: in this case, `.so`.",191],["//         // These cases only have 1 permutation each, so we can't do anything.",188],["// furnished to do so, subject to the following conditions:",748],["// This is a bit slow, but this is rare so it shouldn't",173]],"useCount":72250},{"word":"some","context":[["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["\"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\", \"some\",",162],["//! // Get an ApplicationSecret instance by some means. It contains the `client_id` and",276],["//             // NOTE: some less important impls are omitted to reduce code bloat",594]],"useCount":36818},{"word":"source","context":[["source,",276],["source: self.whence.clean(cx),",545],["// Redistribution and use in source and binary forms, with or without",478],["source: source,",346],["source: source,",346],["source: String,",330],["source: Span::empty(),",284],["source: DocumentSource,",240],["source: self.span.clean(cx),",222],["* file that was distributed with this source code.",562]],"useCount":36992},{"word":"sp","context":[["sp: span,",316],["let typ_s = structurally_resolved_type(fcx, sp, typ);",198],["type_span: Some(sp),",206],["let sp = self.span;",239],["cx.expr_method_call(sp,",263],["return DummyResult::expr(sp);",283],["sp);",395],["span: sp,",554],["sp,",666],["sp: Span,",4197]],"useCount":53942},{"word":"space","context":[["pub space: subst::ParamSpace,",286],["space: space,",324],["try!(pp::space(&mut s.s));",324],["space: space,",324],["space(s.s);",389],["space: subst::ParamSpace,",422],["space,",454],["space: ParamSpace,",473],["match space {",178],["try!(space(&mut self.s));",3400]],"useCount":27585},{"word":"span","context":[["let span = self.span;",1334],["span: Span,",11174],["span,",7813],["span: span,",4040],["span: span,",4040],["let lo = self.span.lo;",2821],["expr.span,",2689],["pub span: Span,",2315],["span: Span)",1356],["let span = self.span;",1334]],"useCount":231743},{"word":"span_bug","context":[["self.tcx().sess.span_bug(",812],["bcx.tcx().sess.span_bug(content_expr.span,",140],["tcx.sess.span_bug(span,",142],["self.tcx.sess.span_bug(expr.span,",144],["pub fn span_bug(&self, sp: Span, msg: &str) -> ! {",153],[".span_bug(span,",166],["bcx.tcx().sess.span_bug(",493],["self.tcx.sess.span_bug(",559],["tcx.sess.span_bug(",781],["cx.sess.span_bug(",184]],"useCount":16323},{"word":"span_err","context":[["self.tcx.sess.span_err(",1375],["tcx.sess.span_err(",868],["self.span_err(last_span,",545],["self.span_err(span,",446],["self.bccx.span_err(",379],["tcx.sess.span_err(span,",213],["self.span_err(",184],["fld.cx.span_err(pth.span,",174],["fld.cx.span_err(",223],["tcx.ty_ctxt().sess.span_err(count_expr.span,",172]],"useCount":24591},{"word":"spawn","context":[["do spawn {",567],["do task::spawn {",487],["Thread::spawn(move|| {",287],["let _t = Thread::spawn(move|| {",636],["task::spawn(proc() {",676],["thread::spawn(move|| {",966],["thread::spawn(move || {",1918],["let _t = thread::spawn(move|| {",2255],["spawn(proc() {",4216],["do task::spawn || {",251]],"useCount":21982},{"word":"spec","context":[["// https://html.spec.whatwg.org/multipage/#attr-fe-name",220],["// https://html.spec.whatwg.org/multipage/#dom-document-cookie",220],["// https://html.spec.whatwg.org/multipage/#dom-context-2d-strokestyle",220],["// https://html.spec.whatwg.org/multipage/#dom-context-2d-drawimage",220],["// https://html.spec.whatwg.org/multipage/#dom-fe-disabled",238],["// https://html.spec.whatwg.org/multipage/#dom-windowtimers-setinterval",288],["// https://dom.spec.whatwg.org/#dom-parentnode-queryselector",291],["// https://dom.spec.whatwg.org/#dom-parentnode-append",291],["// https://dom.spec.whatwg.org/#dom-parentnode-prepend",291],["// https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall",291]],"useCount":68090},{"word":"specific","context":[["/// is going to be tested, it is generally faster to use the specific",129],["specific: SpecificFragmentInfo)",131],["let specific = SpecificFragmentInfo::TableColumn(TableColumnFragmentInfo::new(node));",148],["if let SpecificFragmentInfo::ScannedText(ref text_fragment_info) = self.specific {",220],["specific: specific,",247],["specific: specific,",247],["/// A string describing the specific operating system in use: in this",310],["match fragment.specific {",426],["match self.specific {",2258],["/// Returns the platform-specific value of errno",118]],"useCount":14937},{"word":"specified","context":[["use values::specified;",503],["//         /// Shifts the bits to the right by a specified amount, `n`,",256],["//         /// Shifts the bits to the left by a specified amount, `n`,",256],["specified::LengthOrPercentage::zero(),",256],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276],["specified::Length::parse_non_negative(input).map(SpecifiedValue::Specified)",278],["if let Ok(value) = input.try(specified::CSSColor::parse) {",292],["// take inline-size to be specified as the value computed here.",306],["if let Ok(value) = input.try(specified::Length::parse) {",308],["let theta = try!(specified::Angle::parse(input));",347]],"useCount":40599},{"word":"split","context":[["iter: self.split(pred),",112],["split.reverse();",324],["/// determines the split.",229],["let len = s.split(' ').count();",206],["//                 iter: self.split(pred),",188],["} = split;",172],["let split = InlineBlockSplit {",167],["assert!(split.len() >= 2, \"Atomic intrinsic not correct format\");",147],[".split(' ')",124],["for split in splits {",116]],"useCount":17371},{"word":"src","context":[["let src=\"",710],["write_file(&path, src);",420],[".file(\"src/foo.rs\", r#\"",438],[".file(\"src/main.rs\", \"",479],[".file(\"src/lib.rs\", \"",698],[".file(\"src/lib.rs\", \"\");",796],[".file(\"src/main.rs\", \"fn main() {}\");",972],[".file(\"src/lib.rs\", r#\"",1427],[".file(\"src/main.rs\", r#\"",1527],[".file(\"src/lib.rs\", \"\")",2196]],"useCount":58147},{"word":"st","context":[["assert_eq!(next(st), '|');",663],["let node_id = parse_uint(st) as ast::NodeId;",128],["st.measured += 1",132],["st.pos = st.pos + 1u;",197],["st.pos = st.pos + 1u;",197],["match st {",232],["assert_eq!(next(st), ']');",347],["let mut st = parse_state_from_data(data, crate_num, pos, tcx);",349],["match next(st) {",537],["assert_eq!(next(st), '[');",596]],"useCount":22622},{"word":"stable","context":[["#[stable(feature = \"rust1\", since = \"1.0.0\")]",58569],["#[stable(feature = \"core\", since = \"1.6.0\")]",437],["#[stable(feature = \"env\", since = \"1.0.0\")]",836],["#[stable(feature = \"process\", since = \"1.0.0\")]",897],["#![stable(feature = \"rust1\", since = \"1.0.0\")]",1328],["#[stable(feature = \"raw_ext\", since = \"1.1.0\")]",2051],["//     #[stable(feature = \"rust1\", since = \"1.0.0\")]",2402],["//             #[stable(feature = \"rust1\", since = \"1.0.0\")]",5555],["#[stable]",6674],["//         #[stable(feature = \"rust1\", since = \"1.0.0\")]",7781]],"useCount":96145},{"word":"stack","context":[["self.stack.pop();",351],["match (stack.pop().unwrap(), stack.pop().unwrap()) {",403],["match (stack.pop().unwrap(), stack.pop().unwrap()) {",403],["// Zinc, the bare metal stack for rust.",478],["} else { return Err(\"stack is empty\".to_string()) },",500],["match self.stack.pop() {",502],["let obj = try!(characters(stack));",687],["let current_name = try!(peek_at_name(stack));",714],["try!(start_element(tag_name, stack));",1577],["try!(end_element(tag_name, stack));",1582]],"useCount":47033},{"word":"start","context":[["safe_assert!(start <= p && p < end);",896],["/// Compute inline-start and inline-end margins and inline-size.",272],["stack.next(); // xml start tag",286],["start: usize,",330],["(start, end)",332],["start: start,",342],["start: start,",342],["#[start]",429],["doc.start,",441],["let pos = range.start;",239]],"useCount":63889},{"word":"state","context":[["let state = self.state.borrow();",356],["let state = self.state.borrow();",356],["state,",493],["//                 fn hash<H: hash::Hasher>(&self, state: &mut H) {",594],["//                     Hash::hash(&self[..], state)",594],["match state {",652],["fn hash<H: Hasher>(&self, state: &mut H) {",761],["fn hash(&self, state: &mut S) {",832],["match self.state {",899],["state: &mut DisplayListBuildState,",1312]],"useCount":73229},{"word":"static","context":[["let type_info: Option<(&'static str, JsonTypeInfo)> =",2021],["static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {",898],["fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {",864],["name: &'static str,",550],["pub const USAGE: &'static str = \"",419],["-> Box<base::MacResult+'static> {",391],["fn header_name() -> &'static str {",382],["fn name(&self) -> &'static str {",381],["&'static [BigDigit],",364],["pub const FAMILY: &'static str = \"unix\";",335]],"useCount":146531},{"word":"status","context":[["if !proc_res.status.success() {",714],["match status {",686],["status: *mut c_int)",509],["use hyper::status::StatusCode;",463],["status: status,",294],["status: status,",294],["assert!(status.success());",259],["use iron::status;",230],[".status()",193],["let status = result.status.to_u16();",173]],"useCount":26494},{"word":"std","context":[["use std::path::Path;",5036],["use std::fs::File;",5120],["use std::sync::Arc;",5368],["use std::env;",6176],["use std::io;",7031],["use std::rc::Rc;",7351],["use std::collections::HashMap;",7983],["use std::mem;",8613],["use std::fmt;",12450],["use std::ptr;",4827]],"useCount":456001},{"word":"stdout","context":[["-q, --quiet              No output printed to stdout",113],["let stdout = stdout();",134],["stdout: out,",160],["let mut stdout = stdout.lock();",157],["let mut stdout = stdout.lock();",157],[".stdout(Stdio::piped())",156],["io::stdout().flush().unwrap();",151],["stdout.flush().unwrap();",143],["let stdout = stdout();",134],["let output = str::from_utf8(&output.stdout).unwrap();",112]],"useCount":11652},{"word":"store","context":[["store: store,",135],["// For synchronous requests, this should not fire any events, and just store data",184],["match store {",146],["store: store,",135],["/// FIXME(pcwalton): The fact that image fragments store the cache in the fragment makes little",94],["GlyphInfo::Detail(store, entry_i, detail_j) => {",99],["self.ignore_further_async_events.store(true, Ordering::Relaxed);",100],["/// `store` takes an `Ordering` argument which describes the memory ordering of this operation.",104],["store: ty::TraitStore,",107],["store,",128]],"useCount":14176},{"word":"str","context":[["use util::str::DOMString;",2221],["fn description(&self) -> &str {",2591],["use std::str::FromStr;",2817],["use std::str;",4004],["use servo_util::str::DOMString;",707],["name: &str,",2100],["let type_info: Option<(&'static str, JsonTypeInfo)> =",2021],["use dom::bindings::str::DOMString;",1185],["use str;",1184],["use std::str::from_utf8;",724]],"useCount":163076},{"word":"stream","context":[["stream.read(buf).unwrap();",208],["let mut stream = TcpStream::connect(addr);",236],[".help(\"Output all server communication to standard error. `tx` and `rx` are placed into the same stream.\")",268],["match stream {",290],["let mut stream = stream;",373],["let mut stream = stream;",373],["let mut stream = acceptor.accept();",437],["t!(stream.read(&mut buf));",184],["stream.write_json_packet(&msg);",872],["Ok(stream) => {",175]],"useCount":28583},{"word":"string","context":[["/// platform: in this case, the empty string.",310],["/// string.",296],["// The resulting string must be freed by calling cef_string_userfree_free().",790],["use std::string::String;",784],["use string::String;",643],["let mut string = Wtf8Buf::new();",442],["use std::string;",374],["let mut string = String::new();",325],["match string {",316],["/// A string describing the specific operating system in use: in this",310]],"useCount":68999},{"word":"struct","context":[["struct Foo {",1140],["struct Foo;",1121],["struct Factory;",667],["struct Vertex {",508],["pub struct stat {",516],["struct Struct {",517],["struct Bar;",557],["/// struct Foo;",593],["pub struct Window {",636],["pub struct Config {",500]],"useCount":229429},{"word":"structs","context":[["// structs, which wouldn't result in this error.)",72],["// matches on regular structs while excluding tuple- and enum-like",72],["/// The initial values for all style structs as defined by the specification.",97],["use gecko_bindings::structs::nsStyleImageLayers_LayerType as LayerType;",110],["// in one of these make sure it is propagated properly to containing structs",81],["/// structural recursion. This check is needed for structs and enums.",81],["/// * For newtype structs, iterates through the node ID of the constructor.",68],["/// Examples of Rust types to use this are: structs, tuples, boxes, vecs, and enums.",70],["use gecko_bindings::structs;",71],["// (The pattern matching def_tys where the id is in self.structs",72]],"useCount":12312},{"word":"structure","context":[["///   * `shareable`: Whether the `ComputedValues` structure to be constructed should be considered",85],["/// The data structure to keep track of all the information that typechecker",86],["//! // into the respective structure. Some of the parts shown here might not be applicable !",117],["/// Do not add fields to this structure unless they're really really mega necessary! Fragments get",92],["// A helper data structure for gradients.",92],["// AST structure in libsyntax/ast.rs as well.",96],["// The basic Node structure",111],["let msg = format!(\"`{}` does not name a structure\",",114],["// Base structure.",466],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021]],"useCount":13044},{"word":"sty","context":[["match get(ty).sty {",1379],["match ty::get(t).sty {",913],["match t.sty {",897],["match self.sty {",654],["match ty::get(ty).sty {",565],["match ty.sty {",3053],["match get(fty).sty {",249],["match fty.sty {",246],["match *sty {",213],["match self_ty.sty {",205]],"useCount":25713},{"word":"style","context":[["&*self.style,",397],["style,",981],["style: &ComputedValues,",828],["let mut style = Arc::make_mut(style);",739],["let mut style = Arc::make_mut(style);",739],["use style::properties::ComputedValues;",636],["style: &ServoComputedValues,",598],["style: style,",485],["style: style,",485],["extern crate style;",376]],"useCount":91238},{"word":"sub","context":[["match sub {",103],["// iterate the entire tree, or a specific frame id to iterate only that sub-tree.",105],["sub.repr(self.tcx),",105],["sub: Ty<'tcx>,",119],["sub: ty::t,",120],["use middle::typeck::infer::sub::Sub;",150],["let sub = self.parse_pat();",151],["/// assert_eq!(set.is_superset(&sub), false);",164],["sub: Region,",328],["sub,",602]],"useCount":13630},{"word":"subject","context":[["// This Source Code Form is subject to the terms of the Mozilla Public",794],["This API is completely unstable and subject to change.",75],["furnished to do so, subject to the following conditions:",88],["* furnished to do so, subject to the following conditions:",91],["\"intrinsics are subject to change\")",100],["stable enough for use and is subject to change\");",129],["//! This API is completely unstable and subject to change.",181],["// subject to the following conditions:",251],["// furnished to do so, subject to the following conditions:",748],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948]],"useCount":20982},{"word":"subst","context":[["use middle::subst::Subst;",304],["substs: &subst::Substs<'tcx>)",571],["-> subst::Substs<'tcx> {",189],["-> subst::Substs<'tcx>",235],["use middle::subst::VecPerParamSpace;",242],["pub space: subst::ParamSpace,",286],["subst::NonerasedRegions(ref regions) => {",290],["use middle::subst;",1136],["use middle::subst::Substs;",318],["space: subst::ParamSpace,",422]],"useCount":19829},{"word":"substs","context":[["substs: &Substs<'tcx>)",468],["ty::ty_struct(did, ref substs) => {",302],["substs: substs,",301],["substs: substs,",301],["// take a copy of substs so that we own the vectors inside",288],["substs: &Substs<'tcx>,",272],["match substs.regions {",249],["let tp_ty = *substs.types.get(FnSpace, 0);",487],["substs: &subst::Substs<'tcx>)",571],["substs,",576]],"useCount":41411},{"word":"such","context":[["//         /// The only case where such wrapping can occur is when one",512],["//! If such a method also supports a [Response Result](trait.ResponseResult.html), it will return that by default.",276],["//! noting when they pertain to ongoing loads (such as resizes/viewport adjustments). When the",116],["/// no such server exists.",126],["/// This function accepts strings such as",145],["/// call and as such is marked `unsafe`.",173],["// at your option. All files in the project carrying such",198],["//         /// minimal value). In such a case, this function returns `0`.",256],["//         /// in the type. In such a case, this function returns `MIN`",256],["//         /// value that is too large to represent in the type. In such",256]],"useCount":16907},{"word":"sum","context":[["let sum = inline_start + inline_end + inline_size + margin_end;",170],["sum += r;",196],["(available_block_size - sum, block_size, margin_block_start, margin_block_end)",210],["let sum = inline_start + inline_size + margin_start + margin_end;",190],["(available_inline_size - sum, inline_size, margin_start, margin_end)",210],["let sum = inline_end + inline_size + margin_start + margin_end;",255],[".sum()",342],["sum",381],["let mut sum = 0;",621],["let sum = block_end + block_size + margin_block_start + margin_block_end;",255]],"useCount":12600},{"word":"super","context":[["use super::super::*;",243],["use super::util;",157],["use super::HashMap;",177],["-1 => Err(super::last_error()),",214],["use super::{",218],["use super::super::*;",243],["pub type T = super::SpecifiedValue;",269],["return Err(super::last_error())",372],["Err(super::last_error())",513],["use super::*;",7491]],"useCount":38720},{"word":"sure","context":[["// We also need to make sure we at least write the ty of the other",85],["// Make sure no pending page would be overridden.",125],["// Arena allocate something with drop glue to make sure it",108],["types looking for regions and making sure that they did not escape",95],["// Make sure the programmer specified all the fields.",95],["// Make sure to give a type to the field even if there's",94],["// FIXME(#3908, pcwalton): Make sure later stops can't be behind earlier stops.",92],["// make sure there is a line break at the end.",83],["// Make sure a digit follows the exponent place.",83],["// Before we touch LLVM, make sure that multithreading is enabled.",82]],"useCount":14395},{"word":"sync","context":[["use std::sync::mpsc::{channel, Sender};",388],["use sync::Arc;",405],["use std::sync::atomic::{AtomicUsize, Ordering};",420],["use std::sync::mpsc;",555],["use std::sync::Mutex;",562],["/// use std::sync::Arc;",684],["use std::sync::mpsc::Sender;",775],["use std::sync::mpsc::channel;",1005],["use std::sync::{Arc, Mutex};",1823],["use std::sync::Arc;",5368]],"useCount":28121},{"word":"syntax","context":[["use syntax::ast;",5966],["use syntax::codemap::Span;",3090],["use syntax::parse::token;",2693],["use syntax::visit::Visitor;",1006],["use syntax::abi;",1051],["use syntax::ast_util;",1118],["extern crate syntax;",1151],["use syntax::attr;",1297],["use syntax::visit;",1424],["use syntax::ptr::P;",1741]],"useCount":55851},{"word":"system","context":[["/// A string describing the specific operating system in use: in this",310],["//! All errors produced by the system are provided either as [Result](enum.Result.html) enumeration as return value of",276],["//! makes the system potentially resilient to all kinds of errors.",276],["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276],["// buffer-file-coding-system: utf-8-unix",169],["/// The number of bytes returned is system-dependent.",164],["/// the operating system. Platform sources:",120],["/// * `dirty`: The dirty rectangle in the coordinate system of the owning flow.",109],["let mut cmd = Command::new(\"/system/bin/sh\");",107],["extern \"system\" {",1597]],"useCount":13258},{"word":"t","context":[["($($t:ty)*) => ($(",977],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["match t {",1350],["t",1100],["macro_rules! t(",1069],["macro_rules! t {",922],["match ty::get(t).sty {",913],["match t.sty {",897],["Ok(t) => t,",856]],"useCount":336983},{"word":"table","context":[["// Table items contribute table flow construction results.",588],["/// Returns true if this flow is a table colgroup flow.",166],["/// Returns true if this flow is one of table-related flows.",166],["/// Returns true if this flow is a table rowgroup flow.",166],["/// Returns true if this flow is a table row flow.",166],["// TODO: Implement anonymous table objects for missing parents",168],["/// A table formatting context.",177],["try!(write!(w, \"</table>\"));",216],["table! {",228],["//! CSS table formatting contexts.",283]],"useCount":34530},{"word":"tail","context":[["match tail {",279],["let mut tail: $crate::result::Result<Vec<$crate::il::Statement>> = { rreil!( $($cdr)*) };",240],["let tail = self.tail;",203],["let tail = self.tail;",203],["tester.tail = tail_pos;",165],["tail: self.tail,",163],["tail: self.tail,",163],["if self.tail == self.head {",148],["deq.tail = 0;",148],["Some(tail) => {",134]],"useCount":16292},{"word":"take","context":[["let __sym0 = __sym0.take().unwrap();",359],["let scheduler: ~Scheduler = Local::take();",191],["let opt_chan = self.webdriver_script_chan.borrow_mut().take();",192],["assert!(order::equals(ra.gen_ascii_chars().take(100),",195],["rb.gen_ascii_chars().take(100)));",226],["// Not the primary fragment, so we do not take the noncontent size into account.",264],["//! These will always take a single argument, for which the following statements are true.",276],["// take a copy of substs so that we own the vectors inside",288],["// take inline-size to be specified as the value computed here.",306],["let current = match self.current.take() {",634]],"useCount":25549},{"word":"target","context":[["Some(target) => {",300],["event.fire(target);",836],["[FINISHED] debug [unoptimized + debuginfo] target(s) in [..]",729],["target,",542],["let target = alternate();",370],["{running} target[..]foo-[..]",298],["target: target,",272],["target: target,",272],["let mut target = display.draw();",261],["//         /// Converts `self` to big endian from the target's endianness.",256]],"useCount":60129},{"word":"target_arch","context":[["#[cfg(target_arch = \"x86_64\")]",2155],["#[cfg(target_arch = \"x86\")]",1929],["#[cfg(target_arch = \"arm\")]",813],["#[cfg_attr(all(target_os = \"macos\", target_arch = \"x86\"),",497],["#[cfg(target_arch = \"mips\")]",478],["// #[cfg(target_arch = \"x86_64\")]",474],["target_arch = \"arm\",",376],["#[cfg(any(target_arch = \"x86\",",301],["target_arch = \"aarch64\",",294],["target_arch = \"x86_64\",",282]],"useCount":15667},{"word":"target_os","context":[["#[cfg(target_os = \"macos\")]",2625],["#[cfg(target_os = \"linux\")]",2666],["#[cfg(target_os = \"android\")]",2004],["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]",1460],["#[cfg(any(target_os = \"linux\", target_os = \"android\"))]",1460],["#[cfg(target_os = \"freebsd\")]",1345],["#[cfg(not(target_os=\"android\"))]",1158],["#[cfg(target_os = \"windows\")]",1134],["#[cfg(target_os=\"linux\")]",945],["#[cfg(target_os=\"macos\")]",1071]],"useCount":40319},{"word":"task","context":[["use task;",254],["task::spawn(proc() {",676],["use std::task;",1094],["pub mod task;",201],["use rt::task::Task;",226],["#[ignore_heap_size_of = \"task sources are hard\"]",240],["task::deschedule();",247],["do task::spawn || {",251],["do task::spawn {",487],["use util::task::spawn_named;",505]],"useCount":41820},{"word":"tcx","context":[["-> Block<'blk, 'tcx> {",2367],["tcx: tcx,",1659],["tcx: tcx,",1659],["self.tcx,",1615],["let tcx = bcx.tcx();",1553],["let tcx = bcx.tcx();",1553],["let tcx = ccx.tcx;",1503],["let tcx = ccx.tcx;",1503],["fn repr(&self, tcx: &ctxt<'tcx>) -> String {",1481],["fn repr(&self, tcx: &ctxt<'tcx>) -> String {",1481]],"useCount":517604},{"word":"terms","context":[["// except according to those terms.",61702],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["// This Source Code Form is subject to the terms of the Mozilla Public",794],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584],["// copied, modified, or distributed except according to those terms.",350],["// according to those terms.",220],["// modified, or distributed except according to those terms.",195],["or distributed except according to those terms.",91],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.1.  This, along with the",84],["* except according to those terms.",79]],"useCount":83782},{"word":"test","context":[["#[test]",246423],["test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured",1156],["#![feature(test)]",1280],["use test::Bencher;",1387],["running 1 test",1724],["extern crate test;",2986],["#[cfg(not(test))]",4555],["mod test {",6309],["#[cfg(test)]",28031],["fn test() {",807]],"useCount":374919},{"word":"tests","context":[["pub mod tests {",115],["// This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'",128],["let mut tests = Vec::new();",131],["let filtered = filter_tests(&opts, tests);",167],["for t in tests.iter() {",178],["let tests = vec![",191],["mod tests;",348],["running 0 tests",732],["mod tests {",13461],["tests",183]],"useCount":29595},{"word":"text","context":[["text: String,",218],["use text;",220],["let text = r#\"",220],["/// ```text",717],["file.write_zop(&ZOP::PrintOps{text: \"\\'\".to_string()}, false);",600],["//! ```text",515],["use dom::text::Text;",482],["panic!(\"Unscanned text fragments should have been scanned by now!\")",379],["content_type: (\"text\", \"html\"),",289],["text",310]],"useCount":48859},{"word":"than","context":[["/// Any error other than `EndOfFile` that is produced by the underlying Reader",235],["/// If `len` is greater than the vector's current length, this has no",118],["/// If `i` is greater than the length of the string.",122],["// rather than <=, to maintain stability.",124],["/// Using this function is generally faster than using `powf`",126],["//         /// the next power of two is greater than the type's maximum value,",128],["//         /// Returns the smallest power of two greater than or equal to `n`. If",128],["//         /// Returns the smallest power of two greater than or equal to `self`.",128],["/// If `i` is greater than or equal to the length of the string.",139],["/// error. This produces a more accurate result with better performance than",167]],"useCount":26235},{"word":"that","context":[["//         /// where `mask` removes any high-order bits of `rhs` that",512],["/// The pattern can be a simple `&str`, `char`, or a closure that",310],["/// FIXME(pcwalton): Stop leaking this `FlowRef` to layout; that is not memory safe because layout",264],["// take a copy of substs so that we own the vectors inside",288],["* file that was distributed with this source code.",562],["//! If such a method also supports a [Response Result](trait.ResponseResult.html), it will return that by default.",276],["//!     * primary types that you can apply *Activities* to",276],["//         /// Returns the largest value that can be represented by this integer type.",256],["//         /// Returns the smallest value that can be represented by this integer type.",256],["// Please note that this call will fail if any part of the opt can't be handled",269]],"useCount":283248},{"word":"the","context":[["// file at the top-level directory of this distribution and at",59409],["// Mutable pointer to the field.",1874],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["* Delivers a request to the X server.",2064],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948]],"useCount":1603766},{"word":"their","context":[["// send a message to free their layout data to the",96],["/// `bar()` will each have their own `FnCtxt`, but they will",95],["/// as having reached their containing block. This is needed in order to handle cases like:",96],["// TODO(#228): Once we form lines and have their cached bounds, we can be smarter and",97],["/// Log GC passes and their durations.",102],["/// their direct absolute descendants.",146],["/// called on this flow, all child flows have had their minimum and preferred inline-sizes set.",162],["//! Not what you are looking for ? Find all other Google APIs in their Rust [documentation index](../index.html).",276],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["type variables with their final inferred types.  These final types",95]],"useCount":16242},{"word":"them","context":[["// Find all font-face rules and notify the font cache of them.",112],["//! // retrieve them from storage.",276],["//! All *structures* are marked with applicable traits to further categorize them and ease browsing.",276],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["// For any methods that use a default implementation, add them to",191],["// Gather them first to avoid a double mut borrow on self.",136],["/// calling them individually, since there is no reason not to perform both operations.",132],["/// where layout is still accessing them.",131],["// them.",127],["//  remove them from input.\"",114]],"useCount":21870},{"word":"then","context":[["// of the pipeline being changed) then update the focus pipeline to be",198],["// then",538],["//! `doit(...)` methods, which are then named `upload(...)` and `upload_resumable(...)` respectively.",276],["//then",158],["/// Traverse all your direct absolute descendants, who will then traverse",146],["// a `&T` pointer.  We can then proceed down the normal",132],["// then throw an InvalidStateError exception",130],["// \"and then must apply the base64 algorithm to that sequence of",114],["// \"If the length of input divides by 4 leaving no remainder, then:",114],["If the --package argument is given, then SPEC is a package id specification",112]],"useCount":50219},{"word":"there","context":[["/// Returns `Err(())` on JSAPI failure (there is a pending exception), and",106],["// and issue an iframe load through there.",105],["// not loaded, so there is nothing to save yet.",97],["// FIXME(zwarich): Remove this when UFCS lands and there is a better way",231],["// If there is already a pending page (self.pending_frames), it will not be overridden;",196],["// TODO(tkuehn): currently there is only one window,",136],["/// calling them individually, since there is no reason not to perform both operations.",132],["// and check for more resize events. If there are no events pending, we'll move",126],["// Being here means either there are no pending frames, or none of the pending",125],["/// If the lock was just used, and has been returned since there has been",111]],"useCount":45939},{"word":"these","context":[["/// The address of a node. Layout sends these back. They must be validated via",89],["//  throw an InvalidCharacterError exception and abort these steps.\"",114],["// FIXME #6993: change to Option<Name> ... or not, if these are hygienic.",162],["// these.",153],["//  exception and abort these steps:",114],["//!    onto these objects and cause use-after-free.",108],["// For these types, we cannot define any additional",102],["// matches what the compositor has painted. If all these conditions",97],["these type variables through the subtyping relationships requested",95],["// Just ignore these messages at this point.",92]],"useCount":20946},{"word":"they","context":[["// FIXME: This causes a lot of background colors to be displayed when they are clearly not",110],["// epoch matches what the compositor has drawn. If they match",97],["/// Checks the state of all script and layout pipelines to see if they are idle",97],["// From now on, if we destroy the buffers, they will leak.",101],["//! * Do not call any methods on DOM nodes without checking to see whether they use borrow flags.",108],["//! exploitable, but they'll result in brokenness nonetheless.)",108],["// registered before they are used.",109],["// boolean SSA values are i1, but they have to be stored in i8 slots,",115],["//! noting when they pertain to ongoing loads (such as resizes/viewport adjustments). When the",116],["// any child pipelines, they can be removed from the parent pipeline correctly.",97]],"useCount":23626},{"word":"this","context":[["// file at the top-level directory of this distribution.",628],["let tcx = this.tcx();",621],["this: &AstConv<'tcx>,",584],["* file that was distributed with this source code.",562],["* The parameter @p e supplied to this function must be NULL if",546],["/// type cannot be represented by this value, the `None` is returned.",536],["//         /// On big endian this is a no-op. On little endian the bytes are",512],["//         /// On little endian this is a no-op. On big endian the bytes are",512],["this: &AC,",461],["// file at the top-level directory of this distribution and at",59409]],"useCount":405061},{"word":"those","context":[["/// benchmarked against those two. It is marked `#[inline(never)]` to aid profiling.",234],["/// `Hash` and `Eq` on the borrowed form *must* match those for",254],["// exits. Without this, those remaining objects try to",96],["// those DOM objects will be able to call dispose()",96],["* those of the authors and should not be interpreted as representing official",101],["* Includes only those bits that still apply",118],["// modified, or distributed except according to those terms.",195],["// according to those terms.",220],["// copied, modified, or distributed except according to those terms.",350],["// except according to those terms.",61702]],"useCount":72528},{"word":"thread","context":[["thread::spawn(move || {",1918],["thread::yield_now();",231],["//! use std::thread;",262],["use std::thread::Thread;",392],["/// use std::thread;",419],["use util::thread::spawn_named;",456],["use thread;",497],["thread::spawn(move|| {",966],["let _t = thread::spawn(move|| {",2255],["use std::thread;",3848]],"useCount":48195},{"word":"through","context":[["// Really what needs to happen is that this needs to go through layout to ask which",131],["// Finally, search through external children.",148],["fall-through case: {:?}\",",140],["/// Loops through the entire iterator, collecting all of the elements into",117],["/// A channel through which messages can be sent to the font cache.",112],["/// A channel through which messages can be sent to the developer tools.",112],["// and issue an iframe load through there.",105],["/// A channel (the implementation of which is port-specific) through which messages can be sent",112],["/// A channel through which messages can be sent to the time profiler.",112],["_ => {/* fall through */ }",118]],"useCount":17050},{"word":"time","context":[["time_profiler_chan: time::ProfilerChan,",1054],["pub mod time;",264],["pub time_profiler_chan: time::ProfilerChan,",270],["let time = Timespec::new(1234567890, 54321);",298],["use profile_traits::time;",309],["this.interpolate(other, time).and_then(|value| {",314],["use time::Duration;",622],["use time;",1193],["use std::time::Duration;",2143],["extern crate time;",2485]],"useCount":46824},{"word":"tm","context":[["let mut tm = empty_tm();",104],["match *tm {",103],["match tm {",288],["Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }",120],["fn dom_last_modified(tm: &Tm) -> String {",119],["tm.to_local().strftime(\"%m/%d/%Y %H:%M:%S\").unwrap().to_string()",113],["tm",112],["Ok(ref tm) => {",107],["headers.get().map(|&LastModified(HttpDate(ref tm))| dom_last_modified(tm))",107],["headers.get().map(|&LastModified(HttpDate(ref tm))| dom_last_modified(tm))",107]],"useCount":11551},{"word":"tmpdir","context":[["let file = &tmpdir.join(\"fileinfo_check_exists_b_and_a.txt\");",68],["let tmpdir = tmpdir();",2531],["let tmpdir = tmpdir();",2531],["let out = tmpdir.join(\"out.txt\");",272],["let input = tmpdir.join(\"in.txt\");",272],["let out = tmpdir.join(\"out\");",136],["let path = tmpdir.join(\"in.txt\");",136],["let path = tmpdir.join(\"file\");",80],["let tmpdir = TempDir::new(\"rustc\").ok().expect(\"needs a temp dir\");",70],["let output = tmpdir.join(\"out\");",68]],"useCount":12076},{"word":"to","context":[["// except according to those terms.",61702],["// This Source Code Form is subject to the terms of the Mozilla Public",794],["// Nothing to do.",874],["#[unstable = \"matches collection reform specification, waiting for dust to settle\"]",940],["* a reply to be generated. Any returned error will be",1130],["// FIXME (#9639): This needs to handle non-utf8 paths",1587],["// Mutable pointer to the field.",1874],["* Delivers a request to the X server.",2064],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["/* This Source Code Form is subject to the terms of the Mozilla Public",16948]],"useCount":780194},{"word":"to_css","context":[["try!(shadow.to_css(dest));",508],["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["try!(self.offset_y.to_css(dest));",278],["try!(self.offset_x.to_css(dest));",278],["try!(filter.to_css(dest));",280],["SpecifiedValue::Specified(l) => l.to_css(dest),",289],["try!(value.to_css(dest));",296],["self.0.to_css(dest)",422],["fn to_css<W>(&self, dest: &mut W) -> text_writer::Result where W: TextWriter {",446],["try!(self.horizontal.to_css(dest));",503]],"useCount":18346},{"word":"to_owned","context":[["qitem(Mime(TopLevel::Application, SubLevel::Ext(\"xhtml+xml\".to_owned()), vec![])),",189],["assert!(list.media_queries.len() == 1, css.to_owned());",670],["name: name.to_owned(),",190],["assert!(q.qualifier == None, css.to_owned());",308],["assert!(q.qualifier == Some(Qualifier::Not), css.to_owned());",324],["DEFAULT_USER_AGENT.to_owned(),",330],["db_data_type: \"uuid\".to_owned(),",362],["assert!(q.media_type == MediaQueryType::All, css.to_owned());",372],["assert!(q.expressions.len() == 0, css.to_owned());",534],["\"\".to_owned()",552]],"useCount":34066},{"word":"to_string","context":[["err.issues.push(CLIError::UnknownParameter(key.to_string(),",5447],["match &temp_cursor.to_string()[..] {",2021],["} else { return Err(\"stack is empty\".to_string()) },",500],["type_: \"application\".to_string(),",588],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["file.write_zop(&ZOP::PrintOps{text: \"\\'\".to_string()}, false);",600],["\"\".to_string()",620],["let mut prefix = name.to_string();",786],["name: name.to_string(),",864],["return ::std::result::Result::Err(::protobuf::ProtobufError::WireError(\"unexpected wire type\".to_string()));",1115]],"useCount":119468},{"word":"token","context":[["token: __lookahead,",790],["match self.token {",2741],["use syntax::parse::token;",2693],["use parse::token;",1432],["\"page-token\" => {",844],["use syntax::parse::token::InternedString;",767],["match token {",684],["seq_sep_trailing_allowed(token::Comma),",485],["&token::CloseDelim(token::Paren),",449],["&token::CloseDelim(token::Paren),",449]],"useCount":135107},{"word":"toml","context":[[".file(\"Cargo.toml\", &format!(r#\"",724],["use toml;",346],["//! ```toml",479],[".file(\"Cargo.toml\", &basic_bin_manifest(\"foo\"))",467],[".file(\"b/Cargo.toml\", r#\"",453],["project.file(\"Cargo.toml\", r#\"",384],["extern crate toml;",493],[".file(\"a/Cargo.toml\", r#\"",907],[".file(\"bar/Cargo.toml\", r#\"",1174],[".file(\"Cargo.toml\", r#\"",9158]],"useCount":21403},{"word":"top","context":[["// file at the top-level directory of this distribution and at",59409],["% for side in [\"top\", \"right\", \"bottom\", \"left\"]:",968],["// file at the top-level directory of this distribution.",628],["/// Recursively (top-down) determines the actual inline-size of child contexts and fragments.",291],["// refer to the AUTHORS file at the top-level directory of this distribution.",242],["bottom = top.clone();",194],["let t = self.top.load(SeqCst);",172],["for side in ['top', 'right', 'bottom', 'left'])}\">",157],["// refer to the Cargo.toml file at the top-level directory of this distribution.",153],["// T = top, B = bottom, L = left, R = right",134]],"useCount":84495},{"word":"trace","context":[["fn trace(&self, trc: *mut JSTracer) {",1278],["trace.origin.span(),",135],["fn trace(&self, _: *mut JSTracer) {",473],["let trace = TypeTrace {",344],["(**self).trace(trc)",215],["use dom::bindings::trace::RootedVec;",207],["fn trace(&self, _trc: *mut JSTracer) {",182],["e.trace(trc);",173],["// if e.trace() is a no-op (e.g it is an no_jsmanaged_fields type)",156],["use dom::bindings::trace::JSTraceable;",532]],"useCount":13038},{"word":"trait","context":[["//! The [delegate trait](trait.Delegate.html) is default-implemented, allowing you to customize it with minimal effort.",276],["//! [Method Builder](trait.CallBuilder.html) before making the final `doit()` call.",276],["//! If such a method also supports a [Response Result](trait.ResponseResult.html), it will return that by default.",276],["//! The [delegate trait](trait.Delegate.html) is default-implemented, allowing you to customize it with minimal effort.",276],["//!     * creates [*Method Builders*](trait.MethodsBuilder.html) which in turn",276],["trait Trait {",330],["#[unstable(feature = \"core\", reason = \"trait is experimental\")]",364],["// pub trait FixedSizeArray<T> {",594],["trait Foo {",826],["//! All structures provided by this library are made to be [enocodable](trait.RequestValue.html) and",276]],"useCount":88311},{"word":"trait_ref","context":[["trait_ref,",337],["Some(ref trait_ref) => {",127],["match *trait_ref {",140],["trait_ref: &ty::TraitRef<'tcx>,",154],["trait_ref.path.span,",157],["ref trait_ref,",170],["trait_ref.def_id,",195],["trait_ref: trait_ref,",240],["trait_ref: trait_ref,",240],["let trait_ref =",297]],"useCount":23226},{"word":"traits","context":[["//! All *structures* are marked with applicable traits to further categorize them and ease browsing.",276],["/// use num::traits::Float;",218],["selection_cache: traits::SelectionCache::new(),",200],["code: traits::ObligationCauseCode<'tcx>)",124],["use middle::traits;",683],["//!         // You can also just use its `Debug`, `Display` or `Error` traits",274],["traits::ObligationCause::new(",135],["pub mod traits;",147],["::capnp::traits::FromStructReader::new(self.builder.as_reader())",150],["self.trait_map.insert(expr.id, traits);",180]],"useCount":25026},{"word":"trans","context":[["use middle::trans::common::*;",685],["use middle::trans::type_::Type;",650],["use trans::type_::Type;",600],["use trans::common::*;",487],["use middle::trans::callee;",360],["use middle::trans::build::*;",458],["use trans::type_of;",418],["use middle::trans::base::*;",365],["use middle::trans::type_of;",390],["use trans::build::*;",362]],"useCount":28647},{"word":"transmute","context":[["use std::cast::transmute;",230],["use mem::transmute;",252],["::std::mem::transmute(raw.offset(0))",2371],["let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);",2268],["::std::mem::transmute(((self._bitfield_1 &",1248],["use std::mem::transmute;",1076],["::std::mem::transmute(&self._bindgen_data_)",423],["unsafe { ::std::mem::transmute(self) }",422],["unsafe { mem::transmute(v) }",334],["unsafe { mem::transmute(self) }",285]],"useCount":32814},{"word":"tree","context":[["// Perform the primary layout passes over the flow tree to compute the locations of all",123],["/// Traverses the tree in postorder.",205],["/// An iterator over a frame tree, returning nodes in depth-first order.",125],["/// Returns true if this flow contains fragments that are roots of an absolute flow tree.",126],["// Assign block-sizes for all flows in this absolute flow tree.",142],["// eat a matched-delimiter token tree:",144],["/// Traverse the Absolute flow tree in postorder.",146],["/// Traverse the Absolute flow tree in preorder.",146],["/// Traverses the tree in preorder.",174],["/// Dumps the flow tree for debugging.",176]],"useCount":17019},{"word":"true","context":[["any = true;",1139],["_ => true",1356],["true",23606],["let mut first = true;",1874],["return true",2162],["true,",2652],["found = true;",5934],["Some(true)),",7569],["return true;",7978],["Some(true),",10554]],"useCount":255353},{"word":"try","context":[["try!(dest.write_str(\" \"));",2863],["try!(self.bump());",1957],["try!(input.parse_nested_block(|input| {",1832],["try!(dest.write_str(\", \"));",1677],["try!(end_element(tag_name, stack));",1582],["try!(start_element(tag_name, stack));",1577],["try!(input.expect_comma());",1374],["try!(self.popen());",1011],["try!(space(&mut self.s));",3400],["try!(f(self));",957]],"useCount":206306},{"word":"two","context":[["/// benchmarked against those two. It is marked `#[inline(never)]` to aid profiling.",234],["//         /// `None` is returned, otherwise the power of two is wrapped in `Some`.",128],["//         /// the next power of two is greater than the type's maximum value,",128],["//         /// Returns the smallest power of two greater than or equal to `self`.",128],["//             // emits two conditional moves on x86_64. By promoting the value to",128],["/// The positive difference of two numbers.",125],["//! Page loads follow a two-step process. When a request for a new page load is received, the",116],["//         /// Returns the smallest power of two greater than or equal to `n`. If",128],["//  if input ends with one or two U+003D EQUALS SIGN (=) characters,",114],["// The first two lengths must be specified.",156]],"useCount":25919},{"word":"tx","context":[["let tx2 = tx.clone();",605],["let (tx, rx) = channel();",5539],["let (tx, rx) = sync_channel::<int>(0);",579],["tx.send(1).unwrap();",573],["let (tx, rx) = channel::<int>();",680],["drop(tx);",1828],["tx.send(());",1467],["tx.send(()).unwrap();",1173],["let tx = tx.clone();",767],["let tx = tx.clone();",767]],"useCount":30962},{"word":"txt","context":[["/// let mut p = Path::new(\"abc/def.txt\");",96],["file_name: Some(\"foo.txt\"),",135],["let path = tmpdir.join(\"in.txt\");",136],["/// let mut f = try!(File::create(\"foo.txt\"));",137],["/// let mut f = try!(File::open(\"foo.txt\"));",276],["/// let p = Path::new(\"/some/file/path.txt\");",96],["let out = tmpdir.join(\"out.txt\");",272],["let input = tmpdir.join(\"in.txt\");",272],["// by hand. See the translator.README.txt file in the tools directory for",224],["extension: Some(\"txt\")",189]],"useCount":13684},{"word":"ty","context":[["use middle::ty;",3088],["ty,",1208],["match get(ty).sty {",1379],["match ty {",1231],["tcx: &ty::ctxt<'tcx>,",1113],["ty: ty,",1304],["ty: ty,",1304],["ty: Ty<'tcx>,",1448],["use middle::ty::{self, Ty};",1079],["match ty.sty {",3053]],"useCount":447419},{"word":"typ","context":[["typ: &ast::Ty,",128],["fcx.write_ty(id, typ);",311],["match typ.sty {",119],["return typ;",124],["typ,",209],["let typ_s = structurally_resolved_type(fcx, sp, typ);",198],["match ty::get(typ).sty {",124],["match typ.node {",155],["visitor.visit_ty(&**typ);",148],["typ",140]],"useCount":12694},{"word":"type","context":[["type T = i32;",1042],["type Output;",774],["type Item = &'a T;",876],["type Target = T;",933],["return ::std::result::Result::Err(::protobuf::ProtobufError::WireError(\"unexpected wire type\".to_string()));",1115],["//         /// wrapping around at the boundary of the type.",1280],["type Item = T;",1372],["type ComputedValue = computed_value::T;",2319],["type R = MockRequest;",757],["type Item = Root<Node>;",645]],"useCount":301250},{"word":"type_id","context":[["type_id: type_id,",125],["match node.type_id() {",1363],["match parent.type_id() {",145],["match child.type_id() {",162],["fn type_id() -> u64 { _private::TYPE_ID }",212],["match *self.type_id() {",285],["*self.type_id() ==",471],["match self.type_id {",585],["fn type_id(&self) -> ::std::any::TypeId {",795],["match self.type_id() {",835]],"useCount":11650},{"word":"type_of","context":[["let llty = type_of::type_of(bcx.ccx(), const_ty);",153],["use trans::type_of;",418],["let llty = type_of::type_of(bcx.ccx(), const_ty);",153],["use trans::type_of::*;",160],["let llunitty = type_of::type_of(cx, unit_ty);",165],["let llunitty = type_of::type_of(cx, unit_ty);",165],["use middle::trans::type_of::*;",191],["let lltp_ty = type_of::type_of(ccx, tp_ty);",332],["let lltp_ty = type_of::type_of(ccx, tp_ty);",332],["use middle::trans::type_of;",390]],"useCount":14455},{"word":"typeck","context":[["use middle::typeck::astconv::AstConv;",147],["use middle::typeck::infer::sub::Sub;",150],["use middle::typeck::infer::to_str::InferStr;",132],["use middle::typeck::MethodCall;",143],["use middle::typeck::infer::InferCtxt;",142],["use middle::typeck::infer::lub::Lub;",140],["// See [Note-Type-error-reporting] in middle/typeck/infer/mod.rs",162],["method_map: typeck::method_map,",321],["use middle::typeck::infer;",405],["use middle::typeck;",638]],"useCount":11748},{"word":"types","context":[["use types::os::arch::c95::{c_char, c_int};",399],["types: OwnedSlice::empty(),",442],["pub base: types::cef_base_t,",407],["let tp_ty = *substs.types.get(FnSpace, 0);",487],["//~^ ERROR mismatched types",550],["use types::common::c95::c_void;",598],["use types::common::c95::{c_void};",870],["use types::os::arch::c95::c_int;",1333],["eutil::add_ref(self.c_object as *mut types::cef_base_t);",407],["use types::os::arch::posix88::{mode_t, off_t};",406]],"useCount":101562},{"word":"u","context":[["Ok(u) => u,",119],["output: v(u(16), 4),",110],["if input.chars().any(|c: char| c > '\\u{FF}') {",108],["output: v(u(8), 16),",114],["assert!(n < u);",118],["output: v(u(32), 2),",118],["Ok(u) => u,",119],["output: v(u(8), 8),",142],["match u {",159],["'u' => {",177]],"useCount":120252},{"word":"u16","context":[["pub sequence :        u16,",525],["pub length :         u16,",852],["pub type c_ushort = u16;",537],["fn ReadyState(&self) -> u16 {",150],["self.ready_state.get() as u16",181],["#[repr(u16)]",182],["pub s6_addr: [u16; 8]",198],["pub type in_port_t = u16;",332],["pub type nlink_t = u16;",370],["pub type mode_t = u16;",452]],"useCount":36796},{"word":"u32","context":[["fn has_regions_escaping_depth(&self, depth: u32) -> bool {",835],["#[repr(u32)]",5018],["0x00000000 as u32,",1402],["cached_size: ::std::cell::Cell<u32>,",913],["fn compute_size(&self) -> u32 {",913],["fn get_cached_size(&self) -> u32 {",913],["fn next_u32(&mut self) -> u32 {",639],["pub type useconds_t = u32;",612],["pub type c_uint = u32;",537],["u32,",536]],"useCount":136240},{"word":"u64","context":[["pub type size_t = u64;",363],["pub type ino_t = u64;",264],["pub type uintptr_t = u64;",267],["pub _bindgen_data_: u64,",272],["pub type uintmax_t = u64;",322],["pub type c_ulong = u64;",331],["b.bytes = src_len as u64;",333],["pub bindgen_union_field: u64,",368],["fn next_u64(&mut self) -> u64 {",474],["pub type c_ulonglong = u64;",537]],"useCount":79102},{"word":"u8","context":[["-> u8 {",689],["pub minor_opcode :   u8,",743],["fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",750],["pub major_opcode :   u8,",955],["fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",1051],["-> u8;",1145],["#[repr(u8)]",1442],["s2: *const u8,",1936],["let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);",2268],["pub _address: u8,",3706]],"useCount":141621},{"word":"uint","context":[["col: uint,",435],["fn len(&self) -> uint {",391],["use uint;",460],["fn indexable(&self) -> uint {",473],["fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {",526],["len: uint,",688],["use std::uint;",886],["idx: uint,",1116],["fn size_hint(&self) -> (uint, Option<uint>) {",2194],["fn size_hint(&self) -> (uint, Option<uint>) {",2194]],"useCount":129677},{"word":"unit","context":[["// unit-like structs. For binding patterns (let), matching",67],["Token::Dimension(ref value, ref unit) if context.is_ok(value.value) =>",268],["// This is a unit-like struct. Nothing to do here.",68],["// public so that it can be used from the rustc_driver unit tests",68],["for the function trait is neither a tuple nor unit\");",69],["// depends on whether an enum variant or unit-like struct",76],["// might be unit-struct construction; check for recoverableinput error.",77],["* reference to. This means \"we don't have the thing in this compilation unit,",79],["// `a += b` has a unit result.",81],["match_ignore_ascii_case! { unit,",120]],"useCount":11766},{"word":"unix","context":[["#[cfg(unix)]",4209],["pub const FAMILY: &'static str = \"unix\";",335],["/// # #[cfg(unix)] fn foo() {",742],["use std::os::unix::io::AsRawFd;",130],["use std::os::unix::ffi::OsStrExt;",131],["// buffer-file-coding-system: utf-8-unix",169],["use std::os::unix::io::RawFd;",233],["use std::os::unix::prelude::*;",240],["if cfg!(unix) {",300],["#[cfg(all(unix, not(target_os=\"android\")))]",321]],"useCount":11992},{"word":"unreachable","context":[["None => unreachable!()",289],["_ => unreachable!()",9062],["unreachable!();",1537],["unreachable!()",1155],["if cx.unreachable.get() {",1116],["if cx.unreachable.get() { return llvm::LLVMGetUndef(dest_ty.to_ref()); }",437],["if cx.unreachable.get() { return _Undef(lhs); }",364],["if cx.unreachable.get() { return; }",330],["if bcx.unreachable.get() {",327],["_ => unreachable!(),",2663]],"useCount":26532},{"word":"unsafe","context":[["unsafe",755],["let ret = unsafe {",965],["unsafe {",129213],["fn default() -> Self { unsafe { ::std::mem::zeroed() } }",4004],["unsafe{",1093],["//             unsafe {",1005],["unsafe { ::std::mem::zeroed() }",947],["::std::option::Option<unsafe extern \"C\" fn(cx: *mut JSContext,",828],["//         unsafe {",802],["pub _gtk_reserved2: Option<unsafe extern \"C\" fn()>,",731]],"useCount":263619},{"word":"unsafe_code","context":[["#[cfg(feature = \"gecko\")] #[allow(unsafe_code)] pub mod gecko_bindings;",14],["#[allow(unsafe_code)]",11104],["#![deny(unsafe_code)]",1332],["#![allow(unsafe_code)]",564],["unknown_lints, unsafe_code, unused, unused_allocation, unused_attributes,",39],["unsafe_code,",37],["#[deny(unsafe_code)]",29],["#[allow(unrooted_must_root, unsafe_code)]",20],["#[allow(unsafe_code, unrooted_must_root)]",17],["#![allow(unsafe_code)] // #6376",14]],"useCount":13241},{"word":"unstable","context":[["//         #[unstable(feature = \"core\", since = \"1.0.0\")]",1280],["#[unstable(feature = \"core\")]",975],["#[unstable(feature = \"core\",",984],["//             #[unstable(feature = \"array_as_ref\",",1188],["#[unstable]",1253],["#[unstable = \"matches collection reform specification, waiting for dust to settle\"]",940],["//             #[unstable(feature = \"core\")]",594],["#[unstable(feature = \"collections\",",1312],["//     #[unstable(feature = \"hash\", reason = \"module was recently redesigned\")]",682],["#[unstable(feature = \"std_misc\",",795]],"useCount":30513},{"word":"until","context":[["// We have to use from_str until base-2 exponents",224],["// Tell the layout thread to begin shutting down, and wait until it",120],["/// The borrow lasts until the returned `RefMut` exits scope. The value",118],["/// argument until a notification is received that the fetch is complete.",117],["// Tell the layout task to begin shutting down, and wait until it",115],["until the borrow ends\",",114],["/// as RPC calls don't make sense until then. Use this in combination with",111],["/// f must consume tokens until reaching the next separator or",180],["/// The borrow lasts until the returned `Ref` exits scope. Multiple",122],["// Wait until our mock resource task has sent the image to the image cache",190]],"useCount":11375},{"word":"unwrap","context":[[".unwrap()",5154],["}).unwrap()",1576],["ostream.flush().unwrap();",4801],[").unwrap();",1466],["json::to_writer_pretty(&mut ostream, &value).unwrap();",4800],["}).unwrap();",2885],["let (sender, receiver) = ipc::channel().unwrap();",2080],["FieldCursor::from(field_cursor_str).set_json_value(&mut object, value.unwrap(), type_info, err, &temp_cursor);",2021],["rx.recv().unwrap();",1884],[".unwrap();",7340]],"useCount":275986},{"word":"unwrap_or","context":[["call = call.max_results(arg_from_str(value.unwrap_or(\"-0\"), err, \"max-results\", \"integer\"));",827],["call = call.page_token(value.unwrap_or(\"\"));",844],["for kvarg in opt.values_of(\"kv\").unwrap_or(Vec::new()).iter() {",1299],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["Err(io_err) => return Err(DoitError::IoError(opt.value_of(\"out\").unwrap_or(\"-\").to_string(), io_err)),",4816],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447]],"useCount":54074},{"word":"up","context":[["/// A bottom-up traversal, with a optional in-order pass.",125],["// Look up the number of type parameters and the raw type, and",123],["// If the unsafe block didn't drop things properly, we blow up here.",122],["/// constellation to shut down the pipeline, which will clean everything up",131],["/// The entry point to document loading. Defines bindings, sets up the window and document",138],["/// function returns, or else it will end up pointing to garbage.",146],["/// Recursively (bottom-up) determine the flow's minimum and preferred inline-sizes. When",162],["//! ## Setting up your Project",276],["//! Methods supporting uploads can do so using up to 2 different protocols:",276],["//! specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.",276]],"useCount":36991},{"word":"upcast","context":[["self.upcast::<Node>()",265],["let root = self.upcast::<Node>();",449],["(*self.upcast::<Element>().unsafe_get())",297],["let el = self.upcast::<Element>();",373],["self.upcast::<Node>().dirty(NodeDamage::OtherNodeDamage);",391],["let node = self.upcast::<Node>();",1292],["HTMLCollection::create(&self.window, self.upcast(), filter)",539],["Some(self.upcast::<HTMLElement>() as &VirtualMethods)",646],["let element = self.upcast::<Element>();",939],["let root = root.upcast::<Node>();",233]],"useCount":25505},{"word":"url","context":[["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["use url::Url;",4424],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["extern crate url;",1642],["url: Url,",1623],["url: url,",1367],["url: url,",1367],["let url = Url::parse(\"http://mozilla.com\").unwrap();",685],["dir = p.url())));",551],["pub url: Url,",545]],"useCount":82993},{"word":"use","context":[["use std::fs::File;",5120],["use std::sync::Arc;",5368],["use syntax::ast;",5966],["use std::env;",6176],["use std::io;",7031],["use std::rc::Rc;",7351],["use super::*;",7491],["use std::collections::HashMap;",7983],["use std::mem;",8613],["use std::fmt;",12450]],"useCount":1111834},{"word":"used","context":[["/// Specifies the file extension, if any, used for executable binaries",311],["* This form can be used only if the request will cause",546],["/// Specifies the filename suffix used for executable binaries on this",311],["/// Calculate used value of inline-size just like we do for inline replaced elements.",306],["//!         * never directly used in *Activities*",276],["// We don't warn about this, as depending on the API, some data structures or facilities are never used.",276],["/// Specifies the filename suffix used for shared libraries on this",276],["/// Specifies the filename prefix used for shared libraries on this",276],["/// Specifies the file extension used for shared libraries on this",276],["* This form can be used only if the request will not cause",584]],"useCount":59013},{"word":"user","context":[["user: user,",100],["user: String,",106],["/// to the end user.",102],["(Some(r##\"user-id\"##),",286],["(\"quota-user\", \"quotaUser\"),",268],["(\"user-ip\", \"userIp\"),",223],["gp: vec![\"alt\", \"fields\", \"key\", \"oauth-token\", \"pretty-print\", \"quota-user\", \"user-ip\"],",223],["gp: vec![\"alt\", \"fields\", \"key\", \"oauth-token\", \"pretty-print\", \"quota-user\", \"user-ip\"],",223],["::mock_user(&mut req, ::user(\"foo\"));",132],["// \"Otherwise, the user agent must convert that argument to a",114]],"useCount":16822},{"word":"using","context":[["/// Formats the value using the given formatter.",626],["* The returned value must be freed by the caller using free().",546],["//! Methods supporting uploads can do so using up to 2 different protocols:",276],["//! // execute the final call using `doit()`.",262],["//         /// Raises self to the power of `exp`, using exponentiation by squaring.",256],["/// manually using this function can expose a DoS attack vector.",134],["// This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'",128],["/// Using this function is generally faster than using `powf`",126],["// determine the `self` type, using fresh variables for all variables",125],["/// - Windows: calls `CryptGenRandom`, using the default cryptographic",120]],"useCount":24058},{"word":"usize","context":[["fn size_hint(&self) -> (usize, Option<usize>) {",3425],["len: usize,",592],["fn len(&self) -> usize {",643],["index: usize,",673],["fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",750],["fn heap_size_of_children(&self) -> usize {",1031],["fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",1051],["self.c_object as usize == mem::POST_DROP_USIZE {",1267],["pub fn len(&self) -> usize {",1483],["fn size_hint(&self) -> (usize, Option<usize>) {",3425]],"useCount":138672},{"word":"util","context":[["use util::opts;",1496],["use util::str::DOMString;",2221],["use util::task::spawn_named;",505],["use util::common::indenter;",517],["use util::ppaux;",655],["use util;",814],["mod util;",816],["extern crate util;",1082],["use util::geometry::Au;",1289],["use util::ppaux::Repr;",1385]],"useCount":36551},{"word":"v","context":[["(Some(r##\"v\"##),",5447],["let mut v = Vec::new();",1579],["v } ));",5447],["v.extend(self.gp.iter().map(|v|*v));",5447],["v.extend(self.gp.iter().map(|v|*v));",5447],["{let mut v = Vec::new();",5447],["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["v",2955],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["v.extend(self.gp.iter().map(|v|*v));",5447]],"useCount":275007},{"word":"v0","context":[["{compiling} foo v0.0.1 ([..])",131],["//         compress!(v0, v1, v2, v3);",474],["{compiling} foo v0.0.1 ({dir})",699],["//             compress!(self.v0, self.v1, self.v2, self.v3);",316],["{} foo v0.5.0 ({})\\n\",",275],["[COMPILING] foo v0.0.1 ({dir})",272],["compress!(v0, v1, v2, v3);",264],["{compiling} foo v0.5.0 (file://[..])",255],["compress!(self.v0, self.v1, self.v2, self.v3);",184],["{} foo v0.0.1 ({})",140]],"useCount":12602},{"word":"v1","context":[["v1.push_front(1u8);",120],["v1.dedup();",122],["let v1 = vec![1, 2, 3, 4];",132],["check_sort(v1, v2);",154],["compress!(self.v0, self.v1, self.v2, self.v3);",184],["use std::prelude::v1::*;",240],["compress!(v0, v1, v2, v3);",264],["//             compress!(self.v0, self.v1, self.v2, self.v3);",316],["//         compress!(v0, v1, v2, v3);",474],["use prelude::v1::*;",2463]],"useCount":12697},{"word":"val","context":[["val: ValueRef,",1112],["val",1184],["match val {",621],["Some(val) => val,",537],["Some(val) => val,",537],["return val;",471],["let val = &[",490],["check(val, summ);",518],["Ok(val) => val,",503],["Ok(val) => val,",503]],"useCount":84685},{"word":"valid","context":[["//! are valid.",276],["valid = false;",304],["CSS_INVALID if the input is not valid",110],["/// If `i` is not an index following a valid UTF-8 character.",106],["if valid {",120],["/// If `i` is not the index of the beginning of a valid UTF-8 character.",123],["//         /// `Err(ParseIntError)` if the string did not represent a valid number.",128],["let mut valid = true;",234],["//             // Searcher is known to return valid indices",264],["debug!(\"Not a valid element name\");",279]],"useCount":16422},{"word":"value","context":[["remove_json_null_values(&mut value);",4813],["call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&(\"\", key)).1, value.unwrap_or(\"unset\"));",5447],["let (key, value) = parse_kv_arg(&*parg, err, false);",5447],["let mut value = json::value::to_value(&output_schema);",4800],["json::to_writer_pretty(&mut ostream, &value).unwrap();",4800],["let mut value = json::value::to_value(&output_schema);",4800],["// Param is passed by value, moved",3078],["if value.is_none() {",2056],["FieldCursor::from(field_cursor_str).set_json_value(&mut object, value.unwrap(), type_info, err, &temp_cursor);",2021],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447]],"useCount":299379},{"word":"values","context":[["use values::computed::{ToComputedValue, Context};",284],["use values::computed::Context;",1071],["use values::computed::ComputedValueAsSpecified;",1004],["use values::CSSFloat;",641],["values.found)",543],["values.expected,",526],["use values::specified;",503],["use values::AuExtensionMethods;",460],["use values::NoViewportPercentage;",380],["use values::LocalToCss;",292]],"useCount":57851},{"word":"values_of","context":[["for parg in opt.values_of(\"v\").unwrap_or(Vec::new()).iter() {",3519],["/// let files: Vec<_> = m.values_of(\"file\").unwrap().collect();",21],["for scope in self.opt.values_of(\"url\").unwrap_or(Vec::new()).iter() {",3377],["for parg in opt.values_of(\"v\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1928],["for scope in self.opt.values_of(\"url\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",1846],["for kvarg in opt.values_of(\"kv\").unwrap_or(Vec::new()).iter() {",1299],["for kvarg in opt.values_of(\"kv\").map(|i|i.collect()).unwrap_or(Vec::new()).iter() {",722],["let vals = opt.values_of(\"mode\").unwrap();",68],["assert_eq!(m.values_of(\"option\").unwrap().collect::<Vec<_>>(), [\"val1\", \"val2\", \"val3\"]);",41],["let vals = opt.values_of(\"mode\").unwrap().collect::<Vec<&str>>();",33]],"useCount":12884},{"word":"variable","context":[["let var = self.variable(nid, expr.span);",150],["// infer the variable's type",95],["substituted for a fresh type variable `N`.  This variable will",95],["/// Fetches the environment variable `n` from the current process, returning",96],["variable and pattern binding.",95],["fn variable(&self, node_id: NodeId, span: Span) -> Variable {",96],["/// environment variable.",110],["Referenced variable location is not an alloca!\");",113],["/// None if the variable isn't set.",117],["let var = self.variable(p_id, sp);",122]],"useCount":20766},{"word":"variables","context":[["// variables.",177],["// determine the `self` type, using fresh variables for all variables",125],["// determine the `self` type, using fresh variables for all variables",125],["// https://drafts.csswg.org/css-variables/#variables-in-shorthands",108],["// https://drafts.csswg.org/css-variables/#variables-in-shorthands",108],["variables, are stored directly into the `tcx` tables.",95],["// Create type variables for each argument.",95],["/// environment variables of the current process.",101],["type variables with their final inferred types.  These final types",95],["these type variables through the subtyping relationships requested",95]],"useCount":11675},{"word":"variant","context":[["match variant.node.kind {",504],["// N-ary variant.",211],["\\\"variant\\\":\\\"TTTok\\\",\\",198],["variant.node.id,",191],["// Nullary variant.",180],["&**variant,",157],["ast_map variant: {:?}\",",140],["for variant in enum_definition.variants.iter() {",128],["variant,",121],["variant: &ast::Variant,",119]],"useCount":26750},{"word":"variants","context":[["variants: variants,",121],["variants: variants,",121],["for variant in variants.iter() {",115],["/// Common variants associated with the script messages",114],["let variants = enum_variants(cx, did);",107],["for variant in &enum_definition.variants {",107],["variants: &[P<ast::Variant>],",100],["for variant in variants {",98],["for variant in enum_definition.variants.iter() {",128],["let mut variants = Vec::new();",136]],"useCount":13155},{"word":"various","context":[["Some(r##\"Set various fields of the request structure, matching the key=value form\"##),",2021],["Some(r##\"Set various optional parameters, matching the key=value form\"##),",5447],["/// miscellaneous analysis passes on the crate. Return various",64],["/// have the various decoration flags turned on afterward.",100],["final assignments of the various region variables if there is some",95],["In the process of checking, various constraints will be placed on",95],["//! Code that is useful in various trans modules.",76],["/// Stores the types for various nodes in the AST.  Note that this table",75],["// from the various alternatives.",70],["The type checker is defined into various submodules which are documented",67]],"useCount":13074},{"word":"vec","context":[["expected: vec![],",843],["use vec::Vec;",1469],["use std::vec;",1414],["assertions: vec![],",1090],["vec!(",989],["use std::vec::Vec;",884],["vec![]",832],["parameters: vec![]",764],["vec![",8002],["let mut fields = ::std::vec::Vec::new();",812]],"useCount":155715},{"word":"vector","context":[["/// Here is an example which increments every integer in a vector,",108],["vector",232],["if *ctx >= vector.len() {",199],["token = &vector[*ctx];",146],["/// manually using this function can expose a DoS attack vector.",134],["// TODO(pcwalton): Allocation of this buffer is expensive. Consider a small-vector",126],["/// If `len` is greater than the vector's current length, this has no",118],["/// Returns an iterator over the subslices of the vector which are",103],["*  'vector' -  Vector of tokens to process.",102],["*  'ctx' -  Pointer to vector iteration context.",102]],"useCount":29452},{"word":"version","context":[["#pragma version(1)",643],["version = \"0.5.0\"",5408],["version = \"0.0.0\"",1546],["version = \"0.1.0\"",1052],["version: version,",353],["#version 140",479],["// min-lldb-version: 310",552],["#version 110",574],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584],["version = \"0.0.1\"",7152]],"useCount":45839},{"word":"vis","context":[["pub vis: ast::Visibility,",476],["visibility: self.vis.clean(cx),",627],["vis: vis,",813],["vis: vis,",813],["pub vis: Visibility,",327],["vis: ast::Inherited,",323],["vis: ast::Public,",294],["vis: item.vis,",283],["vis: item.vis,",283],["encode_visibility(rbml_w, vis);",405]],"useCount":16739},{"word":"visit","context":[["use syntax::visit;",1424],["visit::walk_item(self, item);",578],["visit::walk_expr(rcx, expr);",570],["visit::walk_crate(&mut visitor, krate);",408],["visit::walk_expr(self, expr);",385],["visit::walk_item(self, i);",321],["visit::walk_item(self, item, ());",309],["use syntax::visit::{self, Visitor};",306],["use visit;",288],["use syntax::visit::Visitor;",1006]],"useCount":27718},{"word":"visitor","context":[["try!(visitor.end());",291],["visitor.visit_attribute(attr);",235],["visitor.visit_expr(&**subexpression);",203],["visit::walk_crate(&mut visitor, krate, ());",183],["visitor.visit_ty(&**typ);",148],["visitor.visit_generics(generics);",134],["visitor);",133],["self.deserialize(visitor)",124],["visitor,",114],["visit::walk_crate(&mut visitor, krate);",408]],"useCount":23007},{"word":"w","context":[["try!(write!(w, \"    \"));",210],["mywrite!(w, \"]\");",409],["w.write_line(\"\");",326],["try!(write!(w, \"",302],["MaybeAuto::Specified(w) => w,",244],["MaybeAuto::Specified(w) => w,",244],["try!(write!(w, \"</div>\"));",240],["drop(w);",224],["try!(write!(w, \"</table>\"));",216],["document(w, it)",213]],"useCount":50411},{"word":"want","context":[["// want to update this check.",98],["//! // what's going on. You probably want to bring in your own `TokenStorage` to persist tokens and",276],["// NB: If you change this, you'll probably want to change the corresponding",176],["// We want to restore state only if the element had been changed in the first place",144],["// a box will be closed by print_expr, but we didn't want an overall",129],["// inefficient. What we really want is something like \"nearest ancestor element that",110],["// we want them in decreasing order here.",103],["// is to use for resulting pointer.  We want to use the",95],["// We want to batch requests for each pipeline to avoid race conditions",93],["// The first byte is special, only want bottom 5 bits for width 2, 4 bits",113]],"useCount":15996},{"word":"was","context":[["// This file was generated by the CEF translator tool and should not be edited",224],["* file that was distributed with this source code.",562],["// This file was generated automatically from 'src/mako/api/lib.rs.mako'",276],["// This file was generated automatically from 'src/mako/cli/main.rs.mako'",269],["/// was previously in the map.",217],["// This file was generated by gir (5e8c56e) from gir-files (71d73f0)",204],["// file that was distributed with this source code.",172],["// This file was generated by gir (4d68d19) from gir-files (11e0e6d)",168],["// Our inline-size was set to the inline-size of the containing block by the flow's parent.",163],["//     #[unstable(feature = \"hash\", reason = \"module was recently redesigned\")]",682]],"useCount":32794},{"word":"way","context":[["//! // Provide your own `AuthenticatorDelegate` to adjust the way it operates and get feedback about",276],["// XXXManishearth Find a way to track partial progress of the send (onprogresss for XHRUpload)",92],["/// Do not use this method if the inline direction margins are to be computed some other way",93],["/// Do not use this method if the block direction margins are to be computed some other way",93],["// so we're doing it this way.",93],["// way the block can be warned about instead of ignoring this",93],["// right way to do this.",95],["// We do this in a pretty awful way: first we typecheck any arguments",95],["// repeated byte. This way each interpretation of the union should look the same, no matter if",112],["// FIXME(zwarich): Remove this when UFCS lands and there is a better way",231]],"useCount":14039},{"word":"we","context":[["// Receive at least one message so we don't spinloop.",136],["/// Calculate used value of inline-size just like we do for inline replaced elements.",306],["// take a copy of substs so that we own the vectors inside",288],["// for unique ptrs, we inherit mutability from the",136],["/// TODO(pcwalton): Only wait for style recalc, since we have off-main-thread layout.",142],["/// The port on which we receive messages.",150],["//         // These cases only have 1 permutation each, so we can't do anything.",188],["/// The port on which we receive messages from the image cache",205],["// Not the primary fragment, so we do not take the noncontent size into account.",264],["// Instead of pre-determining this, we just disable the lint. It's manually tuned to not have any",276]],"useCount":196253},{"word":"what","context":[["// Decide what sign to put in front",100],["// Really what needs to happen is that this needs to go through layout to ask which",131],["// this test isn't covering what it wants to",131],["// can't guarantee we got 15, so have to get what we got.",131],["// is not opaque, what shows through is UA-dependent.\" is handled by rust-layers",103],["//!         // The Error enum provides details about what exactly happened.",274],["//! Not what you are looking for ? Find all other Google APIs in their Rust [documentation index](../index.html).",276],["//! // what's going on. You probably want to bring in your own `TokenStorage` to persist tokens and",276],["/// and compares the current layout state to what the compositor has. This is used",97],["// matches what the compositor has painted. If all these conditions",97]],"useCount":16534},{"word":"whatwg","context":[["// https://html.spec.whatwg.org/multipage/#dom-windowtimers-setinterval",288],["// https://dom.spec.whatwg.org/#dom-parentnode-queryselectorall",291],["// https://dom.spec.whatwg.org/#dom-parentnode-prepend",291],["// https://dom.spec.whatwg.org/#dom-parentnode-queryselector",291],["// https://dom.spec.whatwg.org/#dom-parentnode-append",291],["// https://html.spec.whatwg.org/multipage/#dom-fe-disabled",238],["// https://html.spec.whatwg.org/multipage/#dom-context-2d-strokestyle",220],["// https://html.spec.whatwg.org/multipage/#dom-document-cookie",220],["// https://html.spec.whatwg.org/multipage/#dom-context-2d-drawimage",220],["// https://html.spec.whatwg.org/multipage/#attr-fe-name",220]],"useCount":63086},{"word":"when","context":[["/// Called when the window is resized.",121],["// Layout will let us know when it's done.",124],["/// This is called when the call operator is used.",144],["// however *when* we do it is up to us",121],["// when",534],["//         /// The only case where such wrapping can occur is when one",512],["// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.",257],["// FIXME(zwarich): Remove this when UFCS lands and there is a better way",231],["//when",158],["// the size of the discriminant value is machine dependent, this has be taken into account when",147]],"useCount":54228},{"word":"where","context":[["fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {",6602],["fn to_css<W>(&self, dest: &mut W) -> text_writer::Result where W: TextWriter {",446],["where",835],["//         where P::Searcher: ReverseSearcher<'a>",704],["where P::Searcher: ReverseSearcher<'a>",576],["where E: Error,",531],["where V: de::Visitor,",519],["//         /// The only case where such wrapping can occur is when one",512],["//         /// where `mask` removes any high-order bits of `rhs` that",512],["where W: ::std::io::Write",505]],"useCount":94079},{"word":"whether","context":[["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276],["// FIXME: It should also check whether the browser context is top-level or not",119],["/// Return whether scripting is enabled or not",117],["// depending on whether the property is inherited.",97],["#[doc = \"Specifies whether this node needs style recalc on next reflow.\"]",98],["/// Tracks whether we are in the process of shutting down, or have shut down and should close",100],["#[doc = \"Specifies whether this node is in a document.\"]",101],["/// Specifies whether children must be recursively cloned or not.",103],["//! * Do not call any methods on DOM nodes without checking to see whether they use borrow flags.",108],["// Look up a field ID, whether or not it's local",112]],"useCount":21848},{"word":"which","context":[["/// The port on which we receive messages from the image cache",205],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],["/// The channel on which messages can be sent to the time profiler.",213],["/// The channel on which messages can be sent to the constellation.",308],["//! Most optionals are are considered [Parts](trait.Part.html) which are identifiable by name, which will be sent to",276],["//! `doit(...)` methods, which are then named `upload(...)` and `upload_resumable(...)` respectively.",276],["//! Most optionals are are considered [Parts](trait.Part.html) which are identifiable by name, which will be sent to",276],["//!     * creates [*Method Builders*](trait.MethodsBuilder.html) which in turn",276],["//! If a method supports downloads, the response body, which is part of the [Result](enum.Result.html), should be",276],["//! These will always take a single argument, for which the following statements are true.",276]],"useCount":81233},{"word":"while","context":[["while !try!(is.eof()) {",914],["while i < len {",372],["while i < n {",320],["while !self.eof() {",295],["while self.token != token::CloseDelim(token::Brace) {",295],["while i > 0 {",279],["while n > 0 {",269],["//             while exp > 0 {",256],["while i < data.len() {",214],["while i < 100000 {",231]],"useCount":41298},{"word":"width","context":[["width: width,",747],["width: width,",747],["&mut bounds.size.width,",198],["width: i32,",217],["pub width: u32,",338],["width: usize,",345],["abs_bounds.size.width),",356],["width: u32,",475],["width: CountImplied,",544],["width,",556]],"useCount":55835},{"word":"will","context":[["//! Most optionals are are considered [Parts](trait.Part.html) which are identifiable by name, which will be sent to",276],["//! If such a method also supports a [Response Result](trait.ResponseResult.html), it will return that by default.",276],["//! Arguments will always be copied or cloned into the builder, to make them independent of their original life times.",276],["//! These will always take a single argument, for which the following statements are true.",276],["//! Respective methods will be called to provide progress information, as well as determine whether the system should",276],["// Extra data. This will only be present for Rust instances!",407],["// The reference count. This will only be present for Rust instances!",407],["* This form can be used only if the request will cause",546],["* a reply to be generated. Any returned error will be",1130],["* This form can be used only if the request will not cause",584]],"useCount":106780},{"word":"window","context":[["let window = self.window.root();",1537],["let window = window_from_node(self);",2081],["let window = document.window();",566],["#[cfg(feature = \"window\")]",828],["let window = window.r();",868],["let window = window.r();",868],["let window = page.window();",953],["let window = page.window();",953],["use dom::window::Window;",1067],["let window = self.window.root();",1537]],"useCount":78242},{"word":"windows","context":[["#[test] #[should_fail] #[ignore(cfg(windows))]",167],["/// # #[cfg(windows)] fn foo() {}",742],["#[cfg(target_os = \"windows\")]",1134],["#[cfg(windows)]",5558],["#[cfg(target_os=\"windows\")]",192],["#![cfg(windows)]",205],["#[ignore(cfg(windows))]",321],["if cfg!(windows) {",458],["#[cfg(not(windows))]",1091],["#[cfg(not(target_os = \"windows\"))]",590]],"useCount":22871},{"word":"with","context":[["//! // unless you replace  `None` with the desired Flow.",276],["//! All *structures* are marked with applicable traits to further categorize them and ease browsing.",276],["//! The `doit()` method performs the actual communication with the server and returns the respective result.",276],["SCRIPT_TASK_ROOT.with(|root| {",327],["DROP_VECTOR.with(|v| {",429],["SCRIPT_THREAD_ROOT.with(|root| {",462],["// Redistribution and use in source and binary forms, with or without",478],["* file that was distributed with this source code.",562],["// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the",584],["// If field is not initialized, it is initialized with default value first.",1368]],"useCount":166201},{"word":"with_capacity","context":[["let mut m = HashMap::with_capacity(4);",283],["let mut reader = BufferedReader::with_capacity(2, inner);",74],["let mut v = Vec::with_capacity(1);",227],["let mut tester = VecDeque::with_capacity(15);",135],["let mut result = String::with_capacity(len);",131],["let mut v = Vec::with_capacity(n);",88],["let mut v = Vec::with_capacity(len);",83],["let mut res = String::with_capacity(lit.len());",78],["/// let mut vec = Vec::with_capacity(10);",77],["let mut v = Vec::with_capacity(2);",75]],"useCount":11412},{"word":"with_status","context":[["execs().with_status(0));",4329],["execs().with_status(0).with_stderr(\"\\",294],["execs().with_status(0).with_stdout(\"\"));",296],[".with_status(101)",326],["execs().with_status(0).with_stdout(format!(\"\\",375],["assert_that(p.cargo_process(\"build\"), execs().with_status(0));",427],["execs().with_status(0).with_stdout(&format!(\"\\",795],["execs().with_status(101).with_stderr(\"\\",798],["execs().with_status(101)",914],["execs().with_status(0)",2393]],"useCount":13345},{"word":"within","context":[["nodes within the function.",95],["/// The range of text within the text run.",93],["expressions, blocks, and so forth contained within the function are",95],["// expects the types within the function to be consistent.",93],["/// The image held within this fragment.",96],["/// The range within the above text run that this represents.",100],["//~^ ERROR the type placeholder `_` is not allowed within types on item signatures",112],["- writeback: writes the final types within a function body, replacing",95],["/// closures defined within the function.  For example:",95],["// by value.  However, within the fn body itself, we want to always",85]],"useCount":11891},{"word":"without","context":[["// Perform an abbreviated style recalc that operates without access to the DOM.",97],["// without changing capitalization, this will actually sidestep rust-http's type system",92],["/// Repaint the scene, without performing style matching. This is typically",96],["// without port",100],["//! * Do not call any methods on DOM nodes without checking to see whether they use borrow flags.",108],["* Redistribution and use in source and binary forms, with or without",114],["//             // u16 and setting bit 8, we get better code without any conditional",128],["//         /// optimized code will return `i32::min_value()` without a panic.",128],["// Simple test of closing without sending",206],["// Redistribution and use in source and binary forms, with or without",478]],"useCount":14993},{"word":"word","context":[["try!(word(&mut self.s, \"]\"));",413],["try!(word(&mut self.s, \"{\"));",210],["try!(word(&mut self.s, \";\"));",735],["try!(word(&mut self.s, \",\"));",605],["try!(word(&mut self.s, \")\"));",204],["try!(word(&mut self.s, \"[\"));",413],["try!(word(&mut self.s, \" \"));",329],["try!(word(&mut self.s, \"&\"));",288],["try!(word(&mut self.s, \"..\"));",244],["try!(word(&mut self.s, \">\"));",238]],"useCount":19173},{"word":"work","context":[["// FIXME(#2261, pcwalton): This won't work well for inlines: is this OK?",96],["- main: the main pass does the lion's share of the work: it",95],["// have been reported, we will skip regionck and other work that",93],["// This makes things like contentDocument work correctly.",102],["// Give ourselves some scratch space to work with",104],["// otherwise some LLVM optimization passes don't work as expected",115],["// work around bizarre resolve errors",124],["/// FIXME(#2261, pcwalton): This won't work well for inlines: is this OK?",93],["/// FIXME(#2262, pcwalton): I think this method is pretty bogus, because it won't work for",96],["work: *mut ::libc::c_double,",176]],"useCount":14527},{"word":"would","context":[["//! To use this library, you would put the following lines into your `Cargo.toml` file:",276],["//                         // would have otherwise (i.e. signal any exception",256],["//                         // it would have otherwise).",256],["// if not overloaded, would be RvalueDatumExpr",253],["//         /// would cause the shift to exceed the bitwidth of the type.",512],["/// would also make any pointers to it invalid.",146],["// vectors with 0-size elements this would return the",132],["// 15 would be great, but we will definitely get 2^k - 1, for k >= 4, or else",131],["// avoiding this panic would require a mechanism for dealing",131],["// Make sure no pending page would be overridden.",125]],"useCount":24459},{"word":"write","context":[["try!(write!(dest, \" \"));",244],["Some(r##\"Specify the file into which to write the program's output\"##),",4816],[".write(true)",249],["if i != 0 { try!(write!(f, \", \")); }",287],["try!(write!(w, \"",302],["try!(write!(self.writer, \"\\n\"));",338],["fn write(&mut self, buf: &[u8]) -> IoResult<()> {",443],["try!(write!(w, \"</div>\"));",240],["write!(f,",714],["fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",750]],"useCount":85734},{"word":"write_str","context":[["try!(dest.write_str(\"auto, \"));",280],["fn write_str(&mut self, s: &str) -> fmt::Result {",210],["try!(dest.write_str(\", \"))",259],["SpecifiedValue::Normal => dest.write_str(\"normal\"),",275],["return dest.write_str(\"none\")",278],["try!(dest.write_str(\" \"));",2863],["try!(dest.write_str(\"none\"));",448],["try!(dest.write_str(\")\"));",494],["dest.write_str(\")\")",685],["try!(dest.write_str(\", \"));",1677]],"useCount":20446},{"word":"writer","context":[["let mut writer = Vec::new();",210],["try!(write!(self.writer, \",\\n\"));",205],["writer: writer,",192],["i = rbml_w.writer.tell().unwrap();",216],["i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();",235],["writer.flush().unwrap();",260],["let mut writer = MemWriter::new();",318],["try!(write!(self.writer, \"\\n\"));",338],["try!(spaces(self.writer, self.curr_indent));",375],["ebml_w: &mut writer::Encoder,",468]],"useCount":27440},{"word":"writing_mode","context":[["let writing_mode = self.base.floats.writing_mode;",226],["let writing_mode = self.base.floats.writing_mode;",226],["border_padding: LogicalMargin::zero(writing_mode),",245],["margin: LogicalMargin::zero(writing_mode),",245],["writing_mode: WritingMode,",245],["border_box: LogicalRect::zero(writing_mode),",245],["writing_mode: writing_mode,",246],["writing_mode: writing_mode,",246],["pub writing_mode: WritingMode,",251],["LogicalMargin::from_physical(self.writing_mode, SideOffsets2D::new(",370]],"useCount":16682},{"word":"www","context":[["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.6",205],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.3",1448],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.10",1205],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.11",226],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.8",586],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.9",946],["html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",",1051],["#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",1204],["// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.5",358],["#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",",264]],"useCount":13581},{"word":"x","context":[["Some(x) => x,",1334],["Some(x) => x,",1334],["match x {",1857],["let x = m!(1 => 2);",3231],["x",993],["Some(x) => {",890],["// gdb-command:print x",866],["///     println!(\"{}\", x);",823],["// lldb-command:print x",723],["x: int,",593]],"useCount":270421},{"word":"xs","context":[["let xs = [1, 2, 3, 4, 5, 6];",189],["let xs = [1i, 2, 3, 4, 5];",150],["let xs: &[int] = &[];",176],["let xs = [1, 2, 3, 4, 5];",316],["let mut it = xs.iter();",244],["xs",182],["assert!(xs.is_disjoint(&ys));",318],["assert!(ys.is_disjoint(&xs));",318],["let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];",188],["assert_eq!(String::from_utf8_lossy(xs),",187]],"useCount":16476},{"word":"y","context":[["let y = x.clone();",360],["// gdb-command:print y",413],["y: y,",332],["// lldb-command:print y",375],["y: 0.0,",373],["y: i32,",367],["y: y,",332],["y: 1.0,",339],["y: int,",312],["//         /// implementation artifacts make `x % y` illegal for `MIN /",256]],"useCount":82917},{"word":"yet","context":[["// Send resize message to any pending pipelines that aren't loaded yet.",105],["// not loaded, so there is nothing to save yet.",97],["// The compositor doesn't know about this pipeline yet.",97],["// Assume it hasn't rendered yet.",97],["// If there is no root frame yet, the initial page has",97],["/// If no reflow has happened yet, this will just return the lock in",111],["/// A list of data pertaining to loads that have not yet received a network response",116],["// child list yet, causing the find() to fail.",126],["/// Window was resized, but this script was not active, so don't reflow yet",137],["// This is now the only absolute flow in the subtree which hasn't yet",204]],"useCount":12540},{"word":"you","context":[["//!     * primary types that you can apply *Activities* to",276],["//! Not what you are looking for ? Find all other Google APIs in their Rust [documentation index](../index.html).",276],["//! Generally speaking, you can invoke *Activities* like this:",276],["//! The [delegate trait](trait.Delegate.html) is default-implemented, allowing you to customize it with minimal effort.",276],["//! // unless you replace  `None` with the desired Flow.",276],["//! To use this library, you would put the following lines into your `Cargo.toml` file:",276],["//! // Instantiate the authenticator. It will choose a suitable authentication flow for you,",276],["// NB: If you change this, you'll probably want to change the corresponding",176],["// NB: If you change this, you'll probably want to change the corresponding",176],["panic!(\"Link to containing block not established; perhaps you forgot to call \\",121]],"useCount":27509},{"word":"z","context":[["/// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',",92],["fn inty() -> i32 { z!() }\".to_string();",96],["// Step 3: Positioned descendants with negative z-indices.",104],["return z;",104],["(c >= 'a' && c <= 'z')",118],["'z' => {",126],["let result: Option<(&uint, & &'static str)> = z.next();",132],["z: 3,",168],["// gdb-command:print z",200],["// lldb-command:print z",217]],"useCount":16997},{"word":"zero","context":[["border_padding: LogicalMargin::zero(writing_mode),",245],["fn zero() -> Self;",205],["margin: LogicalMargin::zero(writing_mode),",245],["border_box: LogicalRect::zero(writing_mode),",245],["//                 None if other >= Self::zero() => Self::max_value(),",256],["specified::LengthOrPercentage::zero(),",256],["//                 None if other >= Self::zero() => Self::min_value(),",256],["return SmallVector::zero();",432],["let container_size = Size2D::zero();",478],["let zero: BigInt = Zero::zero();",192]],"useCount":32335},{"word":"~","context":[["let config_dir = match cmn::assure_config_dir_exists(opt.value_of(\"folder\").unwrap_or(\"~/.google-service-cli\")) {",268],["~\"\"",786],["//~^ ERROR mismatched types",550],["//~^ ERROR use of deprecated item",420],["let mut result = ~[];",317],["~[",300],["//~^ ERROR use of unstable library feature",212],["let mut v = ~[];",209],["} else { return Err(~\"stack is empty\") },",200],["//~| ERROR E0277",170]],"useCount":70451},{"word":"~str","context":[["name: ~str,",301],["fn to_str(&self) -> ~str {",704],["fn repr(&self, tcx: ctxt) -> ~str {",310],["pub fn new(localName: ~str, document: AbstractDocument) -> AbstractNode {",70],["name : ~str,",70],["fn repr(&self, tcx: &ty::ctxt) -> ~str {",71],["fn to_str_radix(&self, radix: uint) -> ~str {",108],["let v: ~str = Decodable::decode(&mut decoder);",108],["fn repr(&self, tcx: ty::ctxt) -> ~str {",154],["fn repr(&self, tcx: &ctxt) -> ~str {",168]],"useCount":12994}]