[{"word":"0L","context":[["var sum = 0L",457],["0L",223],["recoveryPoint = 0L,",168],["0L,",98],["var count = 0L",110],["var received = 0L",105],["var total = 0L",100],["@SerialVersionUID(0L)",924],["assertEquals(hw, hwFile1.read.getOrElse(TopicAndPartition(topic, 0), 0L))",98],["var offset = 0L",99]],"useCount":7244},{"word":"1L","context":[["@SerialVersionUID(1L)",2351],[".setStart(1L)",104],["assert(1L === 1)",100],["assert(1 === 1L)",80],["assert(!(1L !== 1))",80],["assert(!(1 !== 1L))",64],["-1L",55],["* scala&gt; 1 === 1L",54],["count shouldEqual 1L",46],["Mat.nflops += 1L * a.length",44]],"useCount":7339},{"word":"A","context":[["describe(\"A subject\") {",252],["class A",350],["* @tparam A",794],["|class A {",486],["object A {",468],["\"A Stack\" when {",283],["class A {",1230],["* A \"Related Module\" means a set of sources files including their",1872],["\"A subject\" - {",252],["* Shadowsocks - A shadowsocks client for Android",266]],"useCount":123683},{"word":"API","context":[["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["System.err.println(\"* Warning: Semantics of the DOM API function '\"+fun+\"' are not defined.\")",98],["* @param messagesApi The Play messages API.",134],["**     ________ ___   / /  ___     Scala API                            **",1001],["* INTERNAL API",843],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["*     Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr> - initial API and implementation",231],["* Java API",204],["**     ________ ___   / /  ___      __ ____  Scala.js API               **",179],["* Java API.",134]],"useCount":7235},{"word":"Action","context":[["import play.api.mvc.{Controller, Action}",68],["def present = Action { implicit request =>",102],["def login = Action { implicit request =>",79],["object Action {",104],["def index = Action { implicit request =>",162],["def index = Action {",880],["import play.api.mvc.{Action, Controller}",722],["import play.api.mvc.Action",627],["Action {",178],["Action.async {",102]],"useCount":6964},{"word":"Actor","context":[["extends Actor",255],["import akka.actor.Actor",2890],["import scala.actors.Actor",352],["import scala.actors.Actor._",318],["import akka.actor.{Actor, Props}",309],["import akka.actor.{Actor, ActorRef}",305],["import akka.actor.{Actor, ActorLogging}",281],["import akka.actor.Actor.Receive",207],["override def receive: Actor.Receive = {",195],["import akka.actor.{Actor, ActorRef, Props}",257]],"useCount":11302},{"word":"ActorRef","context":[["import akka.actor.{ActorRef, Actor}",176],["import akka.actor.{ ActorRef, ActorSystem, Props }",143],["import akka.actor.{Actor, ActorLogging, ActorRef, Props}",158],["import akka.actor.{ActorRef, Props}",267],["import akka.actor.{ActorRef, ActorSystem, Props}",274],["import akka.actor.{Actor, ActorRef}",305],["import akka.actor.{ActorRef, ActorSystem}",308],["import akka.actor.ActorRef",3240],["import akka.actor.{ ActorRef, ActorSystem }",216],["import akka.actor.{Actor, ActorRef, Props}",257]],"useCount":9852},{"word":"ActorSystem","context":[["implicit val system = ActorSystem()",565],["implicit val system: ActorSystem",195],["import akka.actor.{ ActorRef, ActorSystem }",216],["import akka.actor.ActorSystem",6330],["import akka.actor.{ActorSystem, Props}",783],["system: ActorSystem,",454],["import akka.actor.{Props, ActorSystem}",393],["import akka.actor.{ActorRef, ActorSystem}",308],["import akka.actor.{ActorRef, ActorSystem, Props}",274],["val system = ActorSystem()",227]],"useCount":15316},{"word":"Any","context":[["override def equals(other: Any): Boolean = other match {",959],["override def equals(other: Any) = other match {",602],["override def equals(that: Any) = that match {",576],["style: U[js.Any] = undefined,",485],["override def equals(that: Any): Boolean = that match {",447],["override def equals(other: Any): Boolean = {",389],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["override def equals(other: Any): Boolean =",341],["override def equals(o: Any) = o match {",320]],"useCount":39108},{"word":"AnyRef","context":[["override def process(msg: AnyRef) {",498],["|      }.asInstanceOf[AnyRef]",70],["override def process(theMsg: AnyRef) {",216],["var postBody: AnyRef = null",135],["implicitly[ClassTag[AnyRef]].asInstanceOf[ClassTag[T]]",108],["implicitly[ClassManifest[AnyRef]].asInstanceOf[ClassManifest[T]]",98],["}.asInstanceOf[AnyRef]",78],["private def readResolve: AnyRef = {",72],["override def get(i: Int): AnyRef = i match {",67],["if (outmat.asInstanceOf[AnyRef] != null || !Mat.useCache) {",72]],"useCount":9579},{"word":"AppDefinition","context":[["val app = AppDefinition(",774],["AppDefinition(",400],["import mesosphere.marathon.state.AppDefinition",167],["val store = new MarathonStore[AppDefinition](state, metrics, () => AppDefinition(), \"app:\")",85],["app: AppDefinition,",103],["import mesosphere.marathon.state.{ AppDefinition, PathId }",106],["val app = AppDefinition(id = \"test-app\".toPath, instances = 1)",114],["val app = AppDefinition(\"/myApp\".toPath, instances = 5)",71],["app = AppDefinition(",84],["val store = new MarathonStore[AppDefinition](state, metrics, () => AppDefinition(), \"app:\")",85]],"useCount":6491},{"word":"Arbitrary","context":[["Arbitrary(for {",172],["import org.scalacheck.Arbitrary",767],["import org.scalacheck.{Arbitrary, Gen}",442],["import org.scalacheck.Arbitrary._",524],["import org.scalacheck.{ Arbitrary, Gen }",134],["import org.scalacheck.{Gen, Arbitrary}",118],["import Arbitrary.arbitrary",272],["import org.scalacheck.Arbitrary.arbitrary",338],["import Arbitrary._",370],["Arbitrary {",410]],"useCount":6545},{"word":"Args","context":[["a.run(None, Args(repA))",247],["protected override def runTest(testName: String, args: Args): Status = {",183],["s.run(None, Args(SilentReporter))",173],["s.run(None, Args(rep))",345],["a.run(None, Args(SilentReporter))",370],["override def run(testName: Option[String], args: Args): Status = {",391],["* @param args the <code>Args</code> for this run",396],["val status = suite.run(None, Args(reporter))",752],["a.run(None, Args(rep))",666],["val status = suite.run(None, Args(reporter = rep))",419]],"useCount":7893},{"word":"Array","context":[["def main(args: Array[String]) {",11494],["Array(",1160],["def main(args: Array[String]): Unit = {",6748],["def main(args: Array[String]) = {",1296],["|  def main(args: Array[String]) {",1041],["var resBytes = Array.ofDim[Byte](rBytes.length)",627],["@ApiImplicitParams(Array(",513],["import scala.Array.canBuildFrom",334],["@ApiResponses(Array(",397],["def main(args : Array[String]) {",410]],"useCount":86325},{"word":"ArrayBuffer","context":[["val buf = new ArrayBuffer[String]",63],["ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,",117],["ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,",117],["import scala.collection.mutable.{ArrayBuffer, ListBuffer}",118],["import scala.collection.mutable.{ArrayBuffer, HashMap, HashSet}",119],["import scala.collection.mutable.{ArrayBuffer, HashMap}",158],["import collection.mutable.ArrayBuffer",560],["val cmd = new ArrayBuffer[String]",77],["import _root_.scala.collection.mutable.ArrayBuffer",78],["import scala.collection.mutable.ArrayBuffer",7092]],"useCount":12870},{"word":"Assert","context":[["import org.testng.Assert._",108],["import junit.framework.Assert",133],["import org.junit.Assert._",4383],["import junit.framework.Assert._",642],["import org.junit.Assert",497],["import Assert._",452],["import org.junit.Assert.assertEquals",395],["import org.junit.{Assert, Test}",303],["import org.junit.Assert.assertTrue",244],["Assert.assertTrue(resp.isDefined)",91]],"useCount":9781},{"word":"Await","context":[["import scala.concurrent.Await",4064],["import scala.concurrent.{Await, Future}",1151],["import com.twitter.util.Await",668],["import com.twitter.util.{Await, Future}",542],["Await.result(",539],["val result = Await.result(future,duration)",492],["import scala.concurrent.{ Await, Future }",376],["Await.result(service(123))",289],["val result = Await.result(response, awaitMax)",250],["import scala.concurrent.{Await, ExecutionContext, Future}",250]],"useCount":26011},{"word":"B","context":[["def equalInferredTypes[A,B](a: A, b: B)(implicit eq: A =:= B) {}",125],["def equalInferredTypes[A,B](a: A, b: B)(implicit eq: A =:= B) {}",125],["|class B extends A {",132],["* @tparam B The type of the request body.",153],["class B",158],["class B {",160],["class B extends A {",195],["b: B Or Every[ERR],",200],["|class B {",217],["* @tparam B",237]],"useCount":37801},{"word":"Boolean","context":[["val enabledOuter: js.UndefOr[Boolean] = enabled",415],["val enabled: js.UndefOr[Boolean] = js.undefined",415],["override val enabled: js.UndefOr[Boolean] = enabledOuter",415],["override def equals(that: Any): Boolean = that match {",447],["draggable: U[Boolean] = undefined,",452],["override def equals(other: Any): Boolean = {",389],["spellCheck: U[Boolean] = undefined,",452],["hidden: U[Boolean] = undefined,",453],["override def equals(other: Any): Boolean = other match {",959],["def isEmpty: Boolean",457]],"useCount":81090},{"word":"Byte","context":[["var resBytes = Array.ofDim[Byte](rBytes.length)",627],["// Short +- Byte",188],["def toByteArray: Array[Byte] = {",334],["val res = new Array[Byte](getSerializedSize)",316],["// Byte +- Byte",251],["// Byte +- Byte",251],["def apply(args: Seq[Array[Byte]]) = {",207],["val bytes = new Array[Byte](CAPACITY)",200],["val a1 = new Array[Byte](400)",198],["// Int +- Byte",188]],"useCount":20331},{"word":"ByteBuffer","context":[["import java.nio.{ByteOrder, ByteBuffer}",48],["value: Option[ByteBuffer],",70],["val bb = ByteBuffer.wrap(bytes)",70],["import java.nio.{ByteBuffer, ByteOrder}",157],["def writeTo(buffer: ByteBuffer) {",250],["import java.nio.ByteBuffer",4897],["import java.nio.{ ByteBuffer, ByteOrder }",46],["def hexString(buffer: ByteBuffer): String = {",42],["val buffer = ByteBuffer.allocate(size).put(Array.tabulate[Byte](size)(x => x.toByte))",61],["import java.nio.{ByteBuffer, MappedByteBuffer}",50]],"useCount":9304},{"word":"C","context":[["def partial1[A,B,C](a: A, f: (A,B) => C): B => C =",79],["class C {",287],["type S = String; type I = Int; type D = Double; type C = Char",219],["c: C Or Every[ERR],",190],["class C",156],["object C {",113],["// write the return type as `A => B => C`",94],["mergeValue: (C, V) => C,",92],["mergeValue: (C, V) => C,",92],["def partial1[A,B,C](a: A, f: (A,B) => C): B => C =",79]],"useCount":18679},{"word":"Class","context":[["Map.empty[String, Seq[Class[Exception]]],",196],["/// Class Imports",121],["valueClass: Class[V],",149],["keyClass: Class[K],",173],["Class.forName(\"org.h2.Driver\")",191],["keyClass: Class[_],",203],["valueClass: Class[_],",205],["val possibleResponseTypes: Map[Int,Class[_ <: Any]] = Map(",82],["import java.lang.Class",99],["kClass: Class[K],",82]],"useCount":8634},{"word":"ClassTag","context":[["import scala.reflect.ClassTag",7121],["import scala.reflect.{ClassTag, classTag}",248],["implicit val cm: ClassTag[T] =",77],["implicitly[ClassTag[AnyRef]].asInstanceOf[ClassTag[T]]",108],["implicitly[ClassTag[AnyRef]].asInstanceOf[ClassTag[T]]",108],["import scala.reflect.{classTag, ClassTag}",102],["(implicit tagT: ClassTag[T])",100],["implicit val man = ClassTag[V](data.getClass.getComponentType.asInstanceOf[Class[V]])",81],["(msg: Input)(fn: Output => FOutput)(implicit tag: ClassTag[Output], ec: ExecutionContext) : Future[FOutput] = {",77],["import reflect.ClassTag",155]],"useCount":11996},{"word":"Config","context":[["import com.typesafe.config.{Config, ConfigFactory}",779],["import org.apache.samza.config.Config",179],["* @author Highcharts Config Generator by Karasiq",1311],["import com.typesafe.config.Config",3441],["import utils.helpers.Config",206],["import com.typesafe.config.{ConfigFactory, Config}",255],["import com.typesafe.config.{ Config, ConfigFactory }",187],["import play.api.db.slick.Config.driver.simple._",569],["config: Config,",484],["object Config {",430]],"useCount":14476},{"word":"ConfigFactory","context":[["val config = ConfigFactory.load()",526],["import com.typesafe.config.ConfigFactory",4975],["import com.typesafe.config.{Config, ConfigFactory}",779],["val config = ConfigFactory.parseString(",318],["import com.typesafe.config.{ConfigFactory, Config}",255],["import com.typesafe.config.{ Config, ConfigFactory }",187],["val conf = ConfigFactory.load()",150],["ConfigFactory.parseString(",143],["private val config = ConfigFactory.load()",139],["val config = ConfigFactory.parseString(\"\"\"",122]],"useCount":10584},{"word":"Configuration","context":[["/** ********* Log Configuration ***********/",156],["import org.apache.hadoop.conf.Configuration",2106],["import play.api.Configuration",384],["* val configuration = Configuration.load()",149],["/** ********* Zookeeper Configuration ***********/",153],["/** ********* Socket Server Configuration ***********/",156],["/** ********* General Configuration ***********/",156],["configuration: Configuration,",157],["val conf = new Configuration()",212],["@Configuration",309]],"useCount":9693},{"word":"Cons","context":[["case Cons(h, t) =>",348],["val loc_cons = newSystemRecentLoc(name + \"Cons\")",282],["else Cons(as.head, apply(as.tail: _*))",179],["case Cons(0.0, _) => 0.0",149],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(2, Cons(4, _))) => x",144],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145]],"useCount":7421},{"word":"Context","context":[["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["import scala.reflect.macros.Context",577],["import android.content.Context",955],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["import play.mvc.Http.Context.Implicit._",320],["import scala.reflect.macros.whitebox.Context",292],["import scala.reflect.macros.blackbox.Context",651],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import lila.api.Context",219],["val context = new Context",205]],"useCount":27881},{"word":"Create","context":[["/** Create a one vector (all elements are one) of length 'size'.",63],["// Create temp directory",150],["/** Create a matrix and assign values from the Scala `Vector` of vectors 'u'.",65],["* Create a hexidecimal string for the given bytes",70],["/** Create a matrix by reading from a text file, e.g., a CSV file.",72],["* Create a select box based on the list with a default value and the function",64],["// Create Wiki repository",59],["/** Create a matrix and assign values from the array of vectors 'u'.",59],["*     // Create the reader needed by the test",60],["* Create a test config for the given node id",61]],"useCount":7250},{"word":"Created","context":[["response.status should be equalTo Created",90],["result.code should be (201) //Created",118],["* Created by MrTJP.",102],["* Created by Jim Plush",87],["* Created By:      Brian Ruttenberg (bruttenberg@cra.com)",147],["* Created with IntelliJ IDEA.",1203],["* Created By:      Avi Pfeffer (apfeffer@cra.com)",478],["* Created by chandrasekharkode .",103],["* Created by Roman Bartusiak (roman.bartusiak@pwr.edu.pl http://riomus.github.io).",103],["* Created by IntelliJ IDEA.",753]],"useCount":8571},{"word":"D","context":[["type S = String; type I = Int; type D = Double; type C = Char",219],["d: D Or Every[ERR],",180],["d should be < D",60],["*  @param q  the query graph Q(U, D, k)",58],["val D = manifest[Double]",57],["assertTypedEquals[D :: C :: I :: S :: HNil](2.0 :: 'a' :: 1 :: \"foo\" :: HNil, r7)",48],["assertTypedSame[I :: S :: D :: HNil](in3, r4)",48],["assertTypedSame[I :: S :: D :: C :: HNil](in4, r7)",48],["assertTypedSame[I :: S :: D :: C :: HNil](in4, r8)",48],["assertTypedSame[I :: S :: D :: HNil](in3, r6)",48]],"useCount":6537},{"word":"DStream","context":[["* Return a new DStream by applying `reduceByKey` to each RDD. The values for each key are",72],["other: DStream[(K, W)],",74],["* Return a new DStream in which each RDD is generated by applying a function",116],["import org.apache.spark.streaming.dstream.DStream",497],["* Return a new \"state\" DStream where the state for each key is updated by applying",81],["* Save each RDD in `this` DStream as a Hadoop file. The file name at each batch interval is",96],["): DStream[T] = {",97],["*                       the new DStream will generate RDDs); must be a multiple of this",321],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["*                       DStream's batching interval",321]],"useCount":7669},{"word":"Date","context":[["* Creation Date:   Jan 1, 2009",358],["timeStamp: Long = (new Date).getTime",140],["import java.util.{Calendar, Date}",149],["* Date: 28.02.2008",120],["import java.util.{Date, UUID}",356],["import java.sql.Date",312],["* Date: 06.03.2008",240],["* Date: 22.02.2008",229],["import java.sql.{Date, Timestamp}",122],["import java.util.Date",6599]],"useCount":18148},{"word":"DateTime","context":[["import org.joda.time.DateTime",8580],["import org.joda.time.{DateTime, DateTimeZone}",655],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["import org.joda.time.{DateTimeZone, DateTime}",285],["createdAt: DateTime,",281],["val now = DateTime.now",209],["val date = new DateTime",207],["import org.joda.time.{DateTime, LocalDate}",153],["val now = new DateTime",132],["startTime: Option[DateTime] = None,",123]],"useCount":18849},{"word":"Double","context":[["regParam: Double,",222],["override val lineWidth: js.UndefOr[Double] = lineWidthOuter",319],["val lineWidth: js.UndefOr[Double] = js.undefined",319],["val lineWidthOuter: js.UndefOr[Double] = lineWidth",319],["stepSize: Double,",376],["Double.NaN,",481],["// Double +- Double",244],["// Double +- Double",244],["def cleanupIteration(lastIteration: Boolean, execTimeMillis: Double) {",230],["override def applyForDouble(p: Point): Double =",225]],"useCount":51461},{"word":"Duration","context":[["import scala.concurrent.duration.Duration",3344],["slideDuration: Duration,",139],["import com.twitter.util.{Duration, Future}",148],["), Duration.Inf)",169],["import scala.concurrent.duration.Duration.Zero",174],["import java.time.Duration",215],["import org.joda.time.Duration",221],["windowDuration: Duration,",251],["import com.twitter.util.Duration",405],["import akka.util.Duration",179]],"useCount":12933},{"word":"E","context":[["def apply[A](it: Iteratee[E, A]): Future[Iteratee[E, A]] = {",57],["def flatMap[EE >: E, B](f: A => Either[EE, B]): Either[EE, B] = this match {",60],["e: E Or Every[ERR],",170],["* @param equality <a href=\"../../scalactic/Equality.html\"><code>Equality</code></a> of type <code>E</code>",86],["E-mail: met-api@met.no",70],["case class Left[+E](get: E) extends Either[E,Nothing]",78],["case class Left[+E](get: E) extends Either[E,Nothing]",78],["case class Left[+E](get: E) extends Either[E,Nothing]",78],["sealed trait Either[+E,+A] {",81],["def map[B](f: A => B): Either[E, B] = this match {",66]],"useCount":9595},{"word":"Empty","context":[["NodeSeq.Empty",619],["else Empty",139],["case Empty => Empty",149],["case Empty => Empty",149],["case None => NodeSeq.Empty",203],["case Empty => None",236],["case _ => NodeSeq.Empty",293],["case Empty =>",317],["Empty",414],["case _ => Empty",487]],"useCount":9686},{"word":"Equality","context":[["\"should use an explicitly provided Equality\" in {",286],["new Equality[Every[String]] {",116],["implicit val e = new Equality[String] {",126],["def `should use an explicitly provided Equality` {",1594],["def `should use the implicit Equality in scope` {",1594],["it(\"should use an explicitly provided Equality\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["new Equality[String] {",460],["import org.scalactic.Equality",356],["\"should use the implicit Equality in scope\" in {",286]],"useCount":8917},{"word":"Error","context":[["* - 500 Internal Server Error",96],["object Error {",122],["val expectedErrorMessage = \"Error\"",123],["extends Error",153],["it(\"should propagate out Errors that are direct subtypes of Error in JDK 1.5, other than \" +",177],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["case Error(e) => throw e",79],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["import scalation.util.Error",342],["extends Predictor with Error",67]],"useCount":8400},{"word":"Every","context":[["b: B Or Every[ERR],",200],["a: A Or Every[ERR],",210],["j: J Or Every[ERR],",120],["i: I Or Every[ERR],",130],["h: H Or Every[ERR],",140],["g: G Or Every[ERR],",150],["f: F Or Every[ERR],",160],["e: E Or Every[ERR],",170],["d: D Or Every[ERR],",180],["c: C Or Every[ERR],",190]],"useCount":6305},{"word":"Exception","context":[["@scala.throws[Exception](classOf[Exception])",306],["@scala.throws[Exception](classOf[Exception])",306],["case e:Exception =>",333],["case e: Exception =>",5480],["case e: Exception => {",3905],["@throws(classOf[Exception])",1579],["case ex: Exception =>",1086],["case e: Exception => e.printStackTrace()",421],["import scala.util.control.Exception._",439],["intercept[Exception] {",1037]],"useCount":31598},{"word":"ExecutionContext","context":[["import scala.concurrent.ExecutionContext",3290],["import scala.concurrent.{ExecutionContext, Future, Promise}",205],["import scala.concurrent.{Await, ExecutionContext, Future}",250],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import scala.concurrent.{ExecutionContext, Future}",2561],["import scala.concurrent.{ ExecutionContext, Future }",1246],["import ExecutionContext.Implicits.global",982],["import scala.concurrent.{Future, ExecutionContext}",501],["* @param ec ExecutionContext for async processing",273]],"useCount":25828},{"word":"F","context":[["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540]],"useCount":22932},{"word":"Failure","context":[["import scala.util.{ Try, Success, Failure }",527],["case Failure(t) =>",527],["import scala.util.{Try, Success, Failure}",605],["import scala.util.{ Failure, Success, Try }",715],["import scala.util.{Failure, Success, Try}",2670],["import scala.util.{Failure, Success}",2054],["case Failure(e) =>",1514],["import scala.util.{ Failure, Success }",578],["case Failure(ex) =>",857],["import scala.util.Failure",1304]],"useCount":25597},{"word":"File","context":[["* To change this template use File | Settings | File Templates.",967],["import java.io.{File, PrintWriter}",329],["import java.io.File",17855],["* To change this template use File | Settings | File Templates.",967],["import java.io.{File, IOException}",240],["val file = new File(path)",232],["import java.io.{File => JFile}",191],["new File(tempEmptyDir).mkdirs()",182],["TestUtils.deleteRecursively(new File(tempEmptyDir))",176],["import java.io.{File, FileInputStream}",170]],"useCount":42899},{"word":"Filter","context":[["a.run(None, rep, new Stopper {}, Filter(), Map(), None, new Tracker())",366],["assert(a.expectedTestCount(Filter()) === 2)",215],["assert(c.expectedTestCount(Filter(None, Set(\"org.scalatest.FastAsLight\"))) === 1)",195],["assert(b.expectedTestCount(Filter()) === 1)",187],["assert(f.expectedTestCount(Filter()) === 10)",184],["assert(d.expectedTestCount(Filter()) === 3)",182],["assert(e.expectedTestCount(Filter()) === 2)",181],["a.run(None, SilentReporter, new Stopper {}, Filter(), Map(), None, new Tracker())",252],["assert(d.expectedTestCount(Filter(None, Set(\"org.scalatest.SlowAsMolasses\"))) === 1)",179],["import org.opengis.filter.Filter",435]],"useCount":10520},{"word":"FixtureParam","context":[["* <li>define the type of the fixture parameter by specifying type <code>FixtureParam</code></li>",63],["def testTheOther(fixture: FixtureParam, info: Informer) { theTestTheOtherCalled = true }",70],["def ignore(testFun: FixtureParam => Any) {",60],["* by methods that require a test function that takes a <code>FixtureParam</code>.",72],["def testThat(fixture: FixtureParam, info: Informer) = ()",74],["def in(testFun: FixtureParam => Any) {",74],["def testThis(fixture: FixtureParam) = ()",74],["def testThis(fixture: FixtureParam) { theTestThisCalled = true }",170],["def testThat(fixture: FixtureParam, info: Informer) { theTestThatCalled = true }",170],["type FixtureParam = String",7797]],"useCount":9856},{"word":"FlatSpec","context":[["import org.scalatest.{FlatSpec, MustMatchers}",346],["import org.scalatest.FlatSpec",3371],["import org.scalatest.{FlatSpec, Matchers}",2434],["import org.scalatest.{Matchers, FlatSpec}",1134],["* in the main documentation for trait <code>FlatSpec</code>.",405],["import org.scalatest.{ FlatSpec, Matchers }",363],["* for trait <code>FlatSpec</code>.",351],["val a = new FlatSpec {",236],["extends FlatSpec",288],["new FlatSpec {",276]],"useCount":14694},{"word":"Float","context":[["// Float +- Int",188],["// Float +- Float",251],["// Float +- Float",251],["// Float +- Byte",188],["// Float +- Short",188],["// Double +- Float",188],["// Float +- Long",188],["override def applyForFloat(p: Point): Float =",139],["// Float plusOrMinus Short",60],["// Float plusOrMinus Float",60]],"useCount":8130},{"word":"For","context":[["*  For further information, please contact Hanns Holger Rutz at",539],["* For example, this method supports syntax such as the following:",501],["* For more information, consult the wiki.",260],["* For example:",1064],["* For more information, please contact Digimead Team at this",540],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["\"\"\").openOrThrowException(\"For tests\"),",149],["* bytefrog: a tracing framework for the JVM. For more information",176],["* For more information see",197],["*\tFor further information, please contact Hanns Holger Rutz at",209]],"useCount":12917},{"word":"Full","context":[["case Full(x) => x",68],["Full(() => LiftRules.jsArtifacts.hide(\"ajax-loader\").cmd)",98],["AndroidFirefox    -> Set(Full),",83],["import net.liftweb.common.Full",361],["case Full(n) => n",102],["AndroidChrome     -> Set(Full),",80],["case None => Full(\"OK\")",76],["case Full(x) =>",89],["} else Full(\"ok\")",100],["Full(() => LiftRules.jsArtifacts.show(\"ajax-loader\").cmd)",98]],"useCount":6721},{"word":"FunSpec","context":[["class TestSpec extends FunSpec {",148],["val a = new FunSpec {",157],["class MySpec extends FunSpec with ShouldMatchers {",150],["new FunSpec {",174],["import org.scalatest.{Matchers, FunSpec}",228],["class MySpec extends FunSpec {",239],["import org.scalatest.{FunSpec, Matchers, ParallelTestExecution}",556],["import org.scalatest.{FunSpec, Matchers}",636],["import org.scalatest.FunSpec",1726],["import org.scalatest.{ FunSpec, Matchers }",144]],"useCount":6477},{"word":"FunSuite","context":[["new FunSuite {",192],["import org.scalatest.{FunSuite, Matchers}",771],["import org.scalatest.FunSuite",10421],["import org.scalatest.{BeforeAndAfter, FunSuite}",387],["import org.scalatest.{Matchers, FunSuite}",317],["extends FunSuite",257],["class MySuite extends FunSuite {",227],["import org.scalatest.{OneInstancePerTest, FunSuite}",221],["import org.scalatest.{BeforeAndAfterAll, FunSuite}",206],["val a = new FunSuite {",178]],"useCount":16283},{"word":"Function","context":[["override val mouseOver: js.UndefOr[js.Function] = mouseOverOuter",201],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Function\")))),",266],["override val click: js.UndefOr[js.Function] = clickOuter",204],["val clickOuter: js.UndefOr[js.Function] = click",204],["val mouseOverOuter: js.UndefOr[js.Function] = mouseOver",201],["val mouseOver: js.UndefOr[js.Function] = js.undefined",201],["val mouseOut: js.UndefOr[js.Function] = js.undefined",201],["override val mouseOut: js.UndefOr[js.Function] = mouseOutOuter",201],["val mouseOutOuter: js.UndefOr[js.Function] = mouseOut",201],["val click: js.UndefOr[js.Function] = js.undefined",204]],"useCount":7563},{"word":"Future","context":[["Future {",4545],["import com.twitter.util.Future",1912],["import scala.concurrent.{ExecutionContext, Future}",2561],["import scala.concurrent.{Future, ExecutionContext}",501],["import scala.concurrent.{ ExecutionContext, Future }",1246],["import scala.concurrent.{Await, Future}",1151],["import scala.concurrent.{Future, Promise}",685],["import com.twitter.util.{Await, Future}",542],["import scala.concurrent.Future",15060],["Future.Done",495]],"useCount":70983},{"word":"GET","context":[["* Required GET params:",101],["request.method === HttpMethods.GET",105],["GET,",114],["val request = FakeRequest(\"GET\", \"/\").withFormUrlEncodedBody(",126],["<method name=\"GET\">",138],["route(FakeRequest(GET, \"/boum\")) must beNone",159],["val home = route(FakeRequest(GET, \"/\")).get",187],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["<method name=\"GET\"/>",490],["@GET",1108]],"useCount":7200},{"word":"Gen","context":[["import org.scalacheck.{Gen, Arbitrary}",118],["import org.scalacheck.Gen",1198],["import org.scalacheck.{ Arbitrary, Gen }",134],["): Gen[R] = arbitrary[T1] flatMap {",95],["Gen.frequency(",65],["object Gen {",88],["import org.scalacheck.Gen._",297],["Gen.oneOf(",223],["import org.scalacheck.{Arbitrary, Gen}",442],["import Gen._",340]],"useCount":8070},{"word":"Get","context":[["/** Get 'this' vector's elements within the given range (vector slicing).",52],["import org.apache.hadoop.hbase.client.Get",52],["/** Get 'this' matrix's element at the 'i,j'-th index position.",56],["/** Get a slice 'this' matrix row-wise on range 'ir' and column-wise on range 'jr'.",56],["import com.twitter.finagle.http.Method.Get",56],["* Get an RDD for a given Hadoop file with an arbitrary new API InputFormat",63],["// Get the current controller info. This is to ensure we use the most recent info to issue the",63],["/** Get column 'col' from the matrix, returning it as a vector.",65],["// Get components of this node.",68],["* Get the JDBC SQL Type for this field",108]],"useCount":6467},{"word":"Group","context":[["val origGroup = Group(PathId(\"/foo/bar\"), Set(app))",82],["val plan = DeploymentPlan(Group.empty, group)",86],["object Group {",91],["Group(\"/test\".toPath, groups = Set(",119],[".group(Group.fromCluster(mycluster1))",170],["Group(",215],[".group(Group.fromCluster(mycluster2))",170],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["val group = Group(PathId(\"/foo/bar\"), Set(app))",78],["whenReady(db.run(persist.Group.find(groupOutPeer.groupId))) { group ⇒",66]],"useCount":6451},{"word":"H","context":[["*     minute:\"%A, %b %e, %H:%M\",",70],["type Out = H",54],["*     hour:\"%A, %b %e, %H:%M\",",70],["*     second:\"%A, %b %e, %H:%M:%S\",",70],["def apply(c: H :+: T) = c match {",43],["init: Random => ForStoreClusterRunner [H]",45],["forAll { (q: H) =>",50],["def apply(c: H :+: T): Out = c match {",51],["h: H Or Every[ERR],",140],["*     millisecond:\"%A, %b %e, %H:%M:%S.%L\",",70]],"useCount":6618},{"word":"HList","context":[["type Out <: HList",281],["type Prefix <: HList",91],["type Suffix <: HList",91],["import shapeless.HList",77],["import HList._",73],["* evidence that this `HList` has at least ''n'' elements.",50],["Repr <: HList,",49],["AsParameters <: HList",48],["* of this `HList`.",47],["def apply[L <: HList, N <: Nat]",41]],"useCount":13118},{"word":"HNil","context":[["HNil",235],["type Out = HNil",419],["def product(l: L): Prefix :: Suffix :: HNil",78],["assertTypedEquals[HNil](HNil, r1)",80],["assertTypedEquals[HNil](HNil, r1)",80],["val l1 = 1 :: \"foo\" :: 2 :: 3 :: HNil",93],["assertTypedSame[I :: S :: HNil](in2, r3)",96],["import shapeless.HNil",114],["val sn1 = 23 :: 3.0 :: \"foo\" :: () :: \"bar\" :: true :: 5L :: HNil",117],["assertTypedSame[I :: HNil](in1, r2)",96]],"useCount":22154},{"word":"HashMap","context":[["import scala.collection.immutable.HashMap",841],["import scala.collection.mutable.{ArrayBuffer, HashMap}",158],["import java.util.{HashMap => JHashMap}",138],["val map2 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val formParams = new HashMap[String, String]",196],["val queryParams = new HashMap[String, String]",202],["val headerParams = new HashMap[String, String]",202],["import collection.mutable.HashMap",412],["import java.util.HashMap",507],["import scala.collection.mutable.HashMap",2382]],"useCount":10918},{"word":"Helpers","context":[["import util.Helpers._",212],["// Helpers",124],["import _root_.net.liftweb.util.Helpers._",181],["object Helpers {",126],["override lazy val __nameSalt = Helpers.nextFuncName",135],["import net.liftweb.util.Helpers",219],["import net.liftweb.util.Helpers._",917],["import play.api.test.Helpers._",2015],["import net.liftweb.util.Helpers.tryo",116],["import Helpers._",1415]],"useCount":6985},{"word":"I","context":[["assertTypedSame[I :: S :: HNil](in2, r3)",96],["// The order I want is order of appearance in the file.",159],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["i: I Or Every[ERR],",130],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["I.prj(expr) collect {",110],["assertTypedSame[I :: HNil](in1, r2)",96],["type S = String; type I = Int; type D = Double; type C = Char",219],["val in1 = Coproduct[I :+: CNil](1)",75],["*  Takes '[a | b]' to '[I | x]'.",78]],"useCount":15007},{"word":"ID","context":[["def id = column[Long](\"ID\", O.PrimaryKey, O.AutoInc)",116],["* @param queryString the string with which to search, first by ID then by name",93],["* @return The found user or None if no user for the given ID could be found.",83],["id: ID,",52],["def id = column[Int](\"ID\", O.PrimaryKey, O.AutoInc)",60],["* Finds a user by its user ID.",79],["* @param userID The ID of the user to find.",79],["type ID = String",77],["assert(csReq.getHeader(\"X-DEVICE-ID\") == null)",74],["* @param idGenerator The ID generator implementation.",73]],"useCount":6739},{"word":"IO","context":[["import akka.io.{ IO, Tcp }",68],["IO.write(file, contents)",66],["import org.workcraft.scala.effects.IO",131],["import sbt.io.IO",73],["* provided for `Task`, `IO`, and stdlib `Future`; and `transK[M]` is provided as syntax.",91],["import org.workcraft.scala.effects.IO._",103],["import scalaz.effect.IO",300],["import akka.io.{IO, Tcp}",122],["object IO {",129],["import akka.io.IO",1055]],"useCount":7502},{"word":"IOException","context":[["* @throws IOException",123],["import java.io.IOException;",144],["case ioe: IOException =>",144],["case ex: IOException =>",187],["@throws[IOException]",201],["import java.io.{File, IOException}",240],["case e: IOException => {",278],["case e: IOException =>",749],["@throws(classOf[IOException])",1799],["import java.io.IOException",2487]],"useCount":9756},{"word":"If","context":[["* will register the passed string for forwarding later during test execution. If invoked while this",263],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["* the current reporter immediately. If invoked at any other time, it will",263],["case If(cond, thenp, elsep) =>",249],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["* If the field is not a {@code ChronoField}, then the result of this method",138],["If(",120]],"useCount":22416},{"word":"IllegalArgumentException","context":[["val ex = new IllegalArgumentException(\"Unsupported message: \" + message)",288],["intercept[IllegalArgumentException] {",4388],["throw new IllegalArgumentException(",1220],["val e = intercept[IllegalArgumentException] {",587],["throw new IllegalArgumentException",355],["@Test(expected = classOf[IllegalArgumentException])",195],["an [IllegalArgumentException] should be thrownBy {",199],["case _ => throw new IllegalArgumentException",200],["throw new IllegalArgumentException()",235],["case e: IllegalArgumentException =>",309]],"useCount":16589},{"word":"Implicits","context":[["object Implicits {",600],["import Implicits._",439],["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556],["import play.api.libs.concurrent.Execution.Implicits._",1360],["import ExecutionContext.Implicits.global",982],["import concurrent.ExecutionContext.Implicits.global",179],["import gitbucket.core.util.Implicits._",179],["import mesosphere.mesos.protos.Implicits._",272],["import GraphDSL.Implicits._",294]],"useCount":19216},{"word":"In","context":[["* sent to the reporter when running the test can appear in the report of a test run. (In other words,",86],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["test.c: In function 'main':",906],["test.c: In function 'x':",318],["test.c: In function ‘foo’:",173],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["* in descending order. In other words, the head of the resulting list should",76],["* need to be able to say which of two tweets is larger, or if they are equal). In",70],["protected type In = Any",69]],"useCount":11413},{"word":"Int","context":[["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],[".failureAccrualParams(Int.MaxValue, 0.seconds)",408],["key: U[String | Int] = undefined,",452],["tabIndex: U[Int] = undefined,",452],["override def hashCode: Int = {",479],["id: Int,",521],["new Gauge[Int] {",531],["port: Int,",585],["override def hashCode(): Int = {",645],["var i: Int = 0",1330]],"useCount":178105},{"word":"Integer","context":[["3: Integer,",114],[".ofType(classOf[java.lang.Integer])",1023],["classOf[Integer]",67],["1: Integer,",126],["classOf[Integer],",735],["5: Integer,",102],["7: Integer,",90],["9: Integer,",78],["val message = new Message(Integer.toString(42).getBytes())",72],["val part = Integer.valueOf(topicPartition.split(\"-\").last).intValue",69]],"useCount":6983},{"word":"Iterator","context":[["Iterator.empty",389],["def fn = (x: Iterator[T]) => asScalaIterator(f.apply(asJavaIterator(x)).iterator())",56],["Iterator(",57],["Iterator()",65],["new Iterator[String] {",70],["new Iterator[T] {",80],["Iterator",86],["import scala.collection.Iterator",87],["import java.util.Iterator",125],["func: (TaskContext, Iterator[T]) => U,",128]],"useCount":6548},{"word":"JUnitRunner","context":[["import org.specs2.runner.JUnitRunner",2178],["//@RunWith(classOf[JUnitRunner])",66],["@RunWith(classOf[org.scalatest.junit.JUnitRunner])",48],["@RunWith (classOf[JUnitRunner])",46],["@org.junit.runner.RunWith(classOf[org.specs2.runner.JUnitRunner])",33],["import _root_.org.scalatest.junit.JUnitRunner",26],["@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])",147],["import org.scalatest.junit.{AssertionsForJUnit, JUnitRunner}",165],["import org.scalatest.junit.JUnitRunner",7883],["@RunWith(classOf[JUnitRunner])",11522]],"useCount":22209},{"word":"JavaConversions","context":[["import scala.collection.JavaConversions.iterableAsScalaIterable",96],["import scala.collection.JavaConversions._",15808],["import collection.JavaConversions",103],["import scala.collection.JavaConversions.asScalaIterator",107],["import scala.collection.JavaConversions.mapAsScalaMap",125],["import collection.JavaConversions._",1806],["import scala.collection.JavaConversions",629],["import scala.collection.JavaConversions.asScalaBuffer",400],["import JavaConversions._",308],["import scala.collection.JavaConversions.seqAsJavaList",139]],"useCount":20425},{"word":"JavaConverters","context":[["import scala.collection.JavaConverters._",13821],["import collection.JavaConverters._",1371],["import scala.collection.JavaConverters.asScalaBufferConverter",229],["import scala.collection.JavaConverters.mapAsScalaMapConverter",99],["import scala.collection.JavaConverters.mapAsJavaMapConverter",97],["import scala.collection.JavaConverters.seqAsJavaListConverter",89],["import scala.collection.JavaConverters.asScalaSetConverter",58],["import _root_.scala.collection.JavaConverters._",64],["import JavaConverters._",79],["import scala.collection.JavaConverters",89]],"useCount":16288},{"word":"Json","context":[["val json = Json.obj(",172],["import play.api.libs.json.Json._",227],["import play.api.libs.json.Json",4321],["play.api.libs.json.Json.obj(\"value\" -> play.api.libs.json.JsString(obj.toString))",189],["case None => play.api.libs.json.Json.obj()",723],["play.api.libs.json.Json.obj(",812],["Json.obj(",2456],["val js = Json.toJson(",328],["import play.api.libs.json.{JsValue, Json}",327],["Ok(Json.obj(",192]],"useCount":22657},{"word":"K","context":[["\"(1 / 2) * K() * (FXP * nx() + FYP * ny()) * s()^2) >= 0 \"),",141],["* @tparam K",131],["k: K Or Every[ERR],",110],["\"(K() * (fx() * nx() + fy() * ny() + fz() * nz()) * s() + \" +",94],["): JavaPairDStream[K, V] = {",81],["\"(1 / 2) * K() * (FXP * nx() + FYP * ny() + FZP * nz()) * s()^2) >= 0 \"),",94],["): RDD[(K, V)] = {",88],["kClass: Class[K],",82],["\"(K() * (fx() * nx() + fy() * ny()) * s() + \" +",142],["keyClass: Class[K],",173]],"useCount":15973},{"word":"KafkaConfig","context":[["val cfg = KafkaConfig.fromProps(props)",172],["import kafka.server.KafkaConfig",348],["val serverConfig = KafkaConfig.fromProps(props)",158],["import kafka.server.{KafkaConfig, KafkaServer}",93],["KafkaConfig.fromProps(props)",88],["props.put(KafkaConfig.ZkConnectProp, \"localhost:2181\")",72],["props.put(KafkaConfig.BrokerIdProp, \"1\")",72],["val config = KafkaConfig.fromProps(props)",64],["this.serverConfig.setProperty(KafkaConfig.OffsetsTopicPartitionsProp, \"1\")",54],["val config: KafkaConfig,",50]],"useCount":7968},{"word":"Key","context":[["import com.intellij.openapi.util.Key",211],["* can provide significant performance wins. (Key in a hash map for instance)",55],["import org.apache.accumulo.core.data.Key",53],["import org.apache.accumulo.core.data.{Key, Mutation, Value}",58],["Key.verbose -> true",59],[") with Key {",67],["object Key {",75],["import org.apache.accumulo.core.data.{Key, Value}",178],["import Key._",94],["override def init(source: SortedKeyValueIterator[Key, Value],",76]],"useCount":8652},{"word":"Keys","context":[["object Keys {",142],["import bintray.Keys._",67],["import com.typesafe.sbt.packager.Keys._",64],["import android.Keys._",53],["request.setAttribute(Keys.Request.Ajax, \"true\")",94],["import sbt._, Keys._",197],["import sbt.Keys._",2951],["import Keys._",4144],["Keys.name := id,",49],["if(request.hasAttribute(Keys.Request.Ajax)){",44]],"useCount":8899},{"word":"L","context":[["* #L%",204],["* @tparam L",66],["* #%L",204],["l: L Or Every[ERR],",100],["type Out = L",100],["def apply(l : L) : Out",94],["def apply(l: L): Out = toTuple2(product(l))",91],["def product(l: L): Prefix :: Suffix :: HNil",78],["slice: Slice[L, P],",73],["*     millisecond:\"%A, %b %e, %H:%M:%S.%L\",",70]],"useCount":13550},{"word":"LINE","context":[["// @LINE:6",663],["// @LINE:9",522],["// @LINE:7",488],["// @LINE:8",398],["// @LINE:13",324],["// @LINE:10",315],["// @LINE:12",287],["// @LINE:11",248],["// @LINE:14",229],["// @LINE:5",217]],"useCount":9524},{"word":"Left","context":[["case Left(e) => Left(e)",193],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["case Left(e) =>",152],["catch { case e: Exception => Left(e) }",157],["case Left(e) => processErrors(e)",173],["case Left(e) => Left(e)",193],["case Left(error) =>",230],["Left(partialMessage)",296],["horizontalAlignment = Alignment.Left",135],["case Left(x) => fail(x)",124]],"useCount":8337},{"word":"Level","context":[["import org.apache.log4j.{Level, Logger}",565],["import java.util.logging.{Level, Logger}",380],["import org.apache.log4j.Level",366],["import java.util.logging.Level",346],["import ch.qos.logback.classic.{Level, LoggerContext}",297],["// DOM Level 1",293],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"TRACE\"))",285],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"DEBUG\"))",285],["Logger.getRootLogger.setLevel(Level.WARN)",161],["requestHandlerLogger.setLevel(Level.ERROR)",159]],"useCount":6649},{"word":"List","context":[["val expected = List(",437],["List(",6349],["List(),",587],["case _ => List()",540],["private val prop_proto: List[(String, AbsProperty)] = List(",529],["private val prop_proto: List[(String, AbsProperty)] = List(",529],["import java.util.List",454],["import scala.collection.immutable.List",385],["import java.util.{List => JList}",358],["List()",1157]],"useCount":118989},{"word":"ListBuffer","context":[["import collection.mutable.ListBuffer",854],["import mutable.ListBuffer",68],["* Start of: A ListBuffer",84],["* End of: A ListBuffer",84],["import scala.collection.mutable.{ArrayBuffer, ListBuffer}",118],["val buffer = new ListBuffer[String]",170],["* import scala.collection.mutable.ListBuffer",172],["*   val buffer = new ListBuffer[String]",245],["* import collection.mutable.ListBuffer",393],["import scala.collection.mutable.ListBuffer",4804]],"useCount":11015},{"word":"Logger","context":[["import org.apache.log4j.Logger",1455],["import play.Logger",380],["import grizzled.slf4j.Logger",394],["import com.typesafe.scalalogging.Logger",421],["import org.slf4j.Logger",443],["import org.slf4j.{Logger, LoggerFactory}",543],["import org.apache.log4j.{Level, Logger}",565],["import com.twitter.logging.Logger",682],["import java.util.logging.Logger",877],["import play.api.Logger",2664]],"useCount":19586},{"word":"LoggerFactory","context":[["private val logger = LoggerFactory.getLogger(this.getClass)",151],["val logger = LoggerFactory.getLogger(this.getClass)",167],["import org.slf4j.{LoggerFactory, Logger}",273],["val context: LoggerContext = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]",288],["val logger = LoggerFactory.getLogger(getClass)",304],["private val log = LoggerFactory.getLogger(getClass)",336],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["val log = LoggerFactory.getLogger(getClass)",453],["import org.slf4j.{Logger, LoggerFactory}",543],["import org.slf4j.LoggerFactory",6978]],"useCount":12950},{"word":"Logging","context":[["import org.apache.samza.util.Logging",172],["val log = Logging(context.system, this)",280],["import kafka.utils.Logging",292],["with Logging {",687],["import grizzled.slf4j.Logging",842],["import com.typesafe.scalalogging.slf4j.Logging",1010],["import akka.event.Logging",1161],["import org.apache.spark.Logging",1524],["trait Logging {",295],["extends Logging {",421]],"useCount":14681},{"word":"Long","context":[["limit: Long = 25,",459],["def onNext(elem: Long) = {",428],["id: Long,",707],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["offset: Long = 0",267],["// Long +- Long",251],["// Long +- Long",251],["offset: Long = 0,",222],[".ofType(classOf[java.lang.Long])",208],["endTs: Long,",194]],"useCount":40819},{"word":"M","context":[["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["*     hour:\"%A, %b %e, %H:%M\",",70],["* provided for `Task`, `IO`, and stdlib `Future`; and `transK[M]` is provided as syntax.",91],["*     second:\"%A, %b %e, %H:%M:%S\",",70],["*     minute:\"%A, %b %e, %H:%M\",",70],["*     millisecond:\"%A, %b %e, %H:%M:%S.%L\",",70],["def marshalledReq = M.marshall(amzReq)",82],["m: M Or Every[ERR],",90],["* exception-trapping (`Catchable`) and effect-capturing (`Capture`) monad `M`. Such evidence is",91]],"useCount":11433},{"word":"Map","context":[["val headers_http_authenticated = Map(",299],["Map()",1300],["import scala.collection.mutable.Map",1265],["immutable$Map(",384],["Map(),",412],["Map.empty",490],["Map(",5223],["import scala.collection.Map",807],["import scala.collection.immutable.Map",501],["a.run(None, rep, new Stopper {}, Filter(), Map(), None, new Tracker())",366]],"useCount":68029},{"word":"Matchers","context":[["import Matchers._",1064],["import org.scalatest.{Matchers, FlatSpec}",1134],["import org.scalatest.{Matchers, WordSpec}",1480],["with Matchers",1514],["import org.scalatest.{FlatSpec, Matchers}",2434],["import org.scalatest.Matchers",3073],["import org.mockito.Matchers._",965],["import org.scalatest.{FunSuite, Matchers}",771],["import org.scalatest.Matchers._",765],["import org.scalatest.{FunSpec, Matchers}",636]],"useCount":24195},{"word":"Message","context":[["* Responses are one of (Code, Message)",99],["extends Message {",193],["object Message {",190],["import kafka.message.Message",136],["sealed trait Message",128],["override def process(theMsg: FilterBankConfig.Message) {",119],["import Message._",115],["import com.google.protobuf.Message",103],["val message = new Message(Integer.toString(42).getBytes())",72],["override def parse(m: Message, b: BotCommand, r: ServerResponder): Unit = {",58]],"useCount":6928},{"word":"Mockito","context":[["import org.mockito.Mockito.{times, verify, when}",105],["import org.mockito.Mockito._",2720],["import org.mockito.{Matchers, Mockito}",118],["import mesosphere.marathon.test.Mockito",122],["import org.mockito.Mockito.verify",125],["import org.mockito.Mockito.when",337],["import org.specs.mock.Mockito",348],["import org.mockito.Mockito",451],["Mockito.reset(mockAwsWrapper, mockDataManager, mockInfluxClientFactory)",482],["import org.specs2.mock.Mockito",1192]],"useCount":8169},{"word":"Module","context":[["* A \"Related Module\" means a set of sources files including their",1872],["* licence, when you create a Related Module, this Related Module is",1268],["* licence, when you create a Related Module, this Related Module is",1268],["import com.intellij.openapi.module.Module",196],["import scaldi.Module",114],["*     Module: net.modelbased.sensapp",76],["Module:     PIDE",71],["import se.culvertsoft.mgen.api.model.Module",70],["import com.google.inject.Module",58],["object Module {",53]],"useCount":6543},{"word":"N","context":[["for (i <- 0 until N) {",60],["while (i < N) {",153],["val N = 30",83],["val sentMessages = 0 until N * 10 map { i => \"message %d\".format(i) }",82],["for (_ <- 0 until N) b()",81],["n: N Or Every[ERR],",80],["while (r < N) {",78],["// N.B. INCLUDED IN SURFACE",64],["var N = data.length;",63],["val N = 3",59]],"useCount":15027},{"word":"Name","context":[["dest: Name,",73],["name := Name,",152],["s.withProfile(PureDebugProfile.Name)",128],["(\"Name\" -> o.name) ~",116],["name: Name,",103],["object Name {",95],["NonEmptyList(MapExpr(JsFn(Name(\"x\"),",89],["import tiny.names.Name",86],["Selector.Doc(BsonField.Name(\"bar\") ->",77],["$simpleMap(NonEmptyList(MapExpr(JsFn(Name(\"x\"), obj(",70]],"useCount":9673},{"word":"Nil","context":[["Nil,",2745],["Nil",5243],["case Nil =>",2409],["case _ => Nil",2070],["case Nil => Nil",1219],["requestHeaders: Seq[(String, String)] = Nil",1107],["else Nil",826],["case Nil => None",699],["children = Nil,",620],["case Nil => Nil",1219]],"useCount":55675},{"word":"Node","context":[["import Node._",254],["import org.w3c.dom.Node",197],["object Node {",176],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["import org.neo4j.graphdb.Node",139],["override def getInsList(node: Node): List[(String, PropValue)] = node match {",130],["def render(request: HttpServletRequest): Seq[Node] = {",118],["import scala.xml.Node",644],["override def createQueryBuilder(n: Node, state: CompilerState): QueryBuilder = new QueryBuilder(n, state)",90],["Node(",109]],"useCount":10130},{"word":"NodeSeq","context":[["NodeSeq.Empty",619],["case _ => NodeSeq.Empty",293],["scope: scala.xml.NamespaceBinding, typeAttribute: Boolean): scala.xml.NodeSeq =",186],["case None => NodeSeq.Empty",203],["__scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =",165],["import xml.NodeSeq",152],["import scala.xml.{NodeSeq, Text}",123],["else NodeSeq.Empty",109],["import scala.xml.NodeSeq.seqToNodeSeq",72],["import scala.xml.NodeSeq",1195]],"useCount":6653},{"word":"NonFatal","context":[["case NonFatal(_) =>",71],["case NonFatal(_) => None",76],["case NonFatal(e) => {",105],["import com.twitter.util.NonFatal",112],["import scala.util.control.NonFatal",3207],["case NonFatal(e) =>",1174],["case NonFatal(ex) =>",531],["case NonFatal(e) ⇒",218],["case NonFatal(t) ⇒",218],["case NonFatal(t) =>",121]],"useCount":6797},{"word":"None","context":[["} else None",2570],["case None ⇒",2309],["None",24437],["case None =>",22089],["case _ => None",19486],["None,",6957],["else None",3784],["case None => None",3773],["case None => None",3773],["case None => {",3313]],"useCount":203759},{"word":"NotAllowedException","context":[["val e1 = intercept[exceptions.NotAllowedException] {",2223],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["val e2 = intercept[exceptions.NotAllowedException] {",553],["val e = intercept[exceptions.NotAllowedException] {",320],["intercept[NotAllowedException] {",247],["val e = intercept[NotAllowedException] {",211],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["import org.scalatest.exceptions.NotAllowedException",132],["* @throws NotAllowedException if <code>testName</code> had been registered previously",76]],"useCount":6493},{"word":"O","context":[["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["object O {",344],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["def id = column[Int](\"id\", O.PrimaryKey)",215],["* @author Brian S O'Neill",125],["def id = column[Long](\"ID\", O.PrimaryKey, O.AutoInc)",116],["def id = column[Long](\"ID\", O.PrimaryKey, O.AutoInc)",116],["* O---oo-o o--O |  o-o o-o-o     o   o o-o-o   o  o o-o   o",111]],"useCount":13061},{"word":"OK","context":[["status(result) must equalTo(OK)",561],["status should be(OK)",450],["result.status should be (StatusCodes.OK)",153],["\"OK\"",163],["status === OK",196],["status shouldBe StatusCodes.OK",214],["status(home) must equalTo(OK)",231],["status mustBe OK",260],["status(result) should be(OK)",286],["status shouldBe OK",337]],"useCount":8612},{"word":"OR","context":[["* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",103],["* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",104],["* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",114],["* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",114],["* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",180],["* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",287],["* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",287],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1367],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1367],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1367]],"useCount":6843},{"word":"Object","context":[["override val lineColor: js.UndefOr[String | js.Object] = lineColorOuter",221],["(\"@class\",    PropValue(AbsString.alpha(\"Object\"))),",228],["override val fillColor: js.UndefOr[String | js.Object] = fillColorOuter",284],["val fillColor: js.UndefOr[String | js.Object] = js.undefined",284],["val fillColorOuter: js.UndefOr[String | js.Object] = fillColor",284],["override val color: js.UndefOr[String | js.Object] = colorOuter",300],["val colorOuter: js.UndefOr[String | js.Object] = color",300],["val color: js.UndefOr[String | js.Object] = js.undefined",300],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Object\")))),",335],["val lineColor: js.UndefOr[String | js.Object] = js.undefined",221]],"useCount":12955},{"word":"Observable","context":[["Observable.jObsOfListToScObsOfSeq(oJava.asInstanceOf[rx.Observable[_ <: java.util.List[T]]])",88],["val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]]",88],["Observable.jObsOfListToScObsOfSeq(oJava.asInstanceOf[rx.Observable[_ <: java.util.List[T]]])",88],[": Observable[Observable[T]] // SI-7818",93],[": Observable[Observable[T]] // SI-7818",93],["Observable.unsafeCreate { subscriber =>",97],["*         the source Observable.",110],["* the source Observable.",127],["import monix.reactive.Observable",216],["import rx.lang.scala.Observable",530]],"useCount":15173},{"word":"Ok","context":[["andExpect = Ok,",592],["resp should matchPattern { case Ok(_) ⇒ }",152],["Ok(views.html.common.resultOfCommand(",156],["Ok(views.html.index(\"Your new application is ready.\"))",175],["resp should matchPattern { case Ok(ResponseStartPhoneAuth(_, false)) ⇒ }",186],["Ok(Json.obj(",192],["Ok(",371],["case Ok(ResponseInviteUrl(url)) ⇒",135],["Ok",457],["Ok(views.html.index())",248]],"useCount":8783},{"word":"OneArgTest","context":[["override def withFixture(test: OneArgTest): Outcome = {",143],["*   def withFixture(test: OneArgTest) {",153],["def withFixture(test: OneArgTest): Outcome = {",653],["def withFixture(test: OneArgTest): Outcome = Succeeded",795],["def withFixture(test: OneArgTest) {",862],["def withFixture(test: OneArgTest) {}",1259],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["it(\"should pass the correct config map in the OneArgTest passed to withFixture\") {",97],["// Shouldn't be called, but just in case don't invoke a OneArgTest",102]],"useCount":8365},{"word":"Option","context":[["override def run(testName: Option[String], args: Args): Status = {",391],["description: Option[String],",350],["suiteClassName: Option[String],",306],["val baseURL = Option(System.getProperty(\"baseURL\")) getOrElse \"\"\"http://127.0.0.1:8080\"\"\"",284],["name: Option[String],",277],["name: Option[String] = None,",252],["val targetNamespace: Option[String] = None",248],["id: Option[String] = None,",230],["description: Option[String] = None,",215],["configMap: Map[String, Any], distributor: Option[Distributor], tracker: Tracker) {",204]],"useCount":71093},{"word":"Out","context":[["type Out = (Prefix, Suffix)",91],["def apply(l: L): Out = toTuple2(product(l))",91],["def apply(l : L) : Out",94],["type Out = L",100],["type Out",184],["type Out = tp.Out",189],["type Out = tp.Out",189],["type Out = Out0",253],["type Out <: HList",281],["type Out = HNil",419]],"useCount":11500},{"word":"P","context":[["type R <: P with Q",128],["p: P => Prop,",224],[".render(P => {",275],[".check(headerRegex(\"Set-Cookie\", \"CSRF-TOKEN=(.*); [P,p]ath=/\").saveAs(\"csrf_token\")))",353],[".render((P, S, B) => {",115],["P <: Nat,",81],["type Prefix = P",78],["slice: Slice[L, P],",73],["val pack: P",66],["* @tparam P Predicted result class",63]],"useCount":9025},{"word":"Parser","context":[["object Parser {",190],["import Parser._",173],["import complete.Parser",74],["val ast = new Parser().parse(path)",59],["import sbt.complete.Parser",59],["val parser = new Parser()",40],["val parser = new Parser",39],["case class ParserOps[A](p: Parser[A]) {",38],["trait Parser {",37],["import io.buoyant.config.Parser",37]],"useCount":6433},{"word":"Path","context":[["import org.apache.hadoop.fs.{FileSystem, Path}",356],["import java.nio.file.Path",1084],["import org.apache.hadoop.fs.Path",1128],["import Path._",298],["import java.nio.file.{Files, Path}",258],["import scalax.file.Path",245],["import pathy.Path._",174],["import javax.ws.rs.Path",173],["import java.nio.file.{Path, Paths}",171],["object Path {",158]],"useCount":11631},{"word":"Play","context":[["val messagesApi = play.api.Play.current.injector.instanceOf[MessagesApi]",91],["import play.Play.autoImport._",78],["import play.Play",78],["import play.api.Play.current",3657],["import play.api.Play",949],["* @param configuration The Play configuration.",312],["import play.api.Play._",159],["* @param messagesApi The Play messages API.",134],["import Play.current",85],["import play.api.{Logger, Play}",93]],"useCount":7022},{"word":"Process","context":[["val buildRev = Process(\"git\" :: \"rev-parse\" :: \"HEAD\" :: Nil).!!.trim",48],["import scalaz.stream.Process.Halt",38],["val branch = Process(\"git\" :: \"rev-parse\" :: \"--abbrev-ref\" :: \"HEAD\" :: Nil).!!.trim",45],["import fr.inria.powerapi.core.Process",46],["import Process._",363],["import scalaz.stream.Process",293],["import scalaz.stream.Process._",159],["import scala.sys.process.Process",152],["object Process {",78],["val src = Process.range(0,3).toSource",51]],"useCount":7050},{"word":"Project","context":[["val extracted = Project.extract(state)",187],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["lazy val root = Project(",332],["* The SIRIS Project is a cooperation between Beuth University, Berlin and the",338],["val main = play.Project(appName, appVersion, appDependencies).settings(",406],["import play.Project._",467],["Project(",623],["settings = Project.defaultSettings ++",1018],["import com.intellij.openapi.project.Project",1985],["// Project OrcScala",153]],"useCount":16228},{"word":"Promise","context":[["val promise = Promise[T]()",159],["import scala.concurrent.Promise",741],["import scala.concurrent.{Promise, Future}",174],["import scala.concurrent.{Future, Promise}",685],["val promise = Promise[Unit]()",652],["val promise = Promise[EventRecordingReporter]",635],["import scala.concurrent.{ExecutionContext, Future, Promise}",205],["val p = new Promise[Unit]",201],["import scala.concurrent.{ Future, Promise }",200],["val promise = Promise[Ack]()",184]],"useCount":9560},{"word":"PropValue","context":[["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"CallbackObject\")))),",208],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["(\"@class\",    PropValue(AbsString.alpha(\"Object\"))),",228],["(\"@extensible\", PropValue(BoolTrue)),",250],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Function\")))),",266],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Object\")))),",335],["(\"@extensible\", AbsConstValue(PropValue(BoolTrue))),",426],["(\"length\", AbsConstValue(PropValue(ObjectValue(Value(AbsNumber.alpha(0)), F, F, F)))),",204],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540]],"useCount":7136},{"word":"Properties","context":[["import java.util.Properties",3916],["val config = new Properties()",129],["val properties = new Properties",166],["/** @group Properties */",173],["val logProps = new Properties()",267],["val properties = new Properties()",279],["import scala.util.Properties",299],["val props = new Properties",455],["import org.scalacheck.Properties",574],["val props = new Properties()",1495]],"useCount":13263},{"word":"Props","context":[["import akka.actor.{Actor, ActorLogging, Props}",189],["import akka.actor.{Actor, ActorRef, Props}",257],["import akka.actor.{ActorRef, Props}",267],["import akka.actor.{ActorRef, ActorSystem, Props}",274],["import akka.actor.{Actor, Props}",309],["Props(",375],["import akka.actor.{Props, ActorSystem}",393],["import akka.actor.{ActorSystem, Props}",783],["import akka.actor.{ ActorSystem, Props }",166],["import akka.actor.Props",2251]],"useCount":12186},{"word":"PsiElement","context":[["def isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean = {",141],["elemType: IStubElementType[_ <: StubElement[_ <: PsiElement], _ <: PsiElement],",90],["elemType: IStubElementType[_ <: StubElement[_ <: PsiElement], _ <: PsiElement])",100],["elemType: IStubElementType[_ <: StubElement[_ <: PsiElement], _ <: PsiElement])",100],["import com.intellij.psi.{PsiElement, PsiFile}",113],["import com.intellij.psi.{PsiDocumentManager, PsiElement}",119],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["place: PsiElement): Boolean = {",209],["lastParent: PsiElement,",212],["import com.intellij.psi.PsiElement",1303]],"useCount":7784},{"word":"Query","context":[["EmptyEvaluationInfo, Query, EmptyActualResult] {",79],["import org.geotools.data.{DataStoreFinder, Query}",71],["import com.normation.rudder.domain.queries.Query",102],["case class Query(",103],["* @param query the <code>Query</code> with which to search",115],["object Query {",149],["query: Query,",162],["import org.geotools.data.Query",241],["Query.",427],["val query = new Query(sftName, Filter.INCLUDE)",74]],"useCount":6277},{"word":"R","context":[["): Gen[R] = arbitrary[T1] flatMap {",95],["case android.R.id.home =>",78],["for (_ <- 0 until R) bal()",78],["* |  _ \\  |  _ \\  | ____|  / ___|  / _/    / ___|        Precog (R)",574],["import chat.tox.antox.R",179],["* @tparam R",110],["R,",109],["val fJava: Func1[rx.Observable[T], rx.Observable[R]] =",83],["val deserializer: ByteStringDeserializer[R] = deserializerR",88],["type R <: P with Q",128]],"useCount":13838},{"word":"RDD","context":[["input: RDD[LabeledPoint],",264],["input : RDD[Example],",109],["* Return a new DStream in which each RDD is generated by applying a function",116],["import spark.RDD",142],["* Return an RDD with the elements from `this` that are not in `other`.",151],["* @param input RDD of (label, array of features) pairs.",178],["rdd: RDD[T],",211],["import org.apache.spark.rdd.RDD",7440],["/** Distribute a local Scala collection to form an RDD. */",100],["* Return a new RDD containing the distinct elements in this RDD.",98]],"useCount":27211},{"word":"Random","context":[["import scala.util.Random",7340],["val random = new Random",165],["val messageId = Random.nextLong()",173],["val rand = new Random",174],["val sessionId = Random.nextLong()",199],["val rand = new Random()",244],["val random = new Random()",275],["import util.Random",313],["import java.util.Random",1558],["val rn = new Random ()",181]],"useCount":17583},{"word":"Rep","context":[["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["def test(x: Rep[Int]) = {",154],["next: ServiceFactory[Req, Rep]",119],["): ClientBuilder[Req, Rep, Yes, HasCodec, HasHostConnectionLimit] =",119],["): ServiceFactory[Req, Rep] = {",118],["underlying: ServiceFactory[Req, Rep],",91],["val id: Rep[Int] = column[Int](\"id\", O.AutoInc, O.PrimaryKey)",71],["override def getDefaultRep: Rep[To] = ???",71],["override def convert(x: Rep[Def[_]]) = {",67]],"useCount":8758},{"word":"Req","context":[["underlying: ServiceFactory[Req, Rep],",91],["): ServiceFactory[Req, Rep] = {",118],["): ClientBuilder[Req, Rep, Yes, HasCodec, HasHostConnectionLimit] =",119],["next: ServiceFactory[Req, Rep]",119],["import net.liftweb.http.Req",129],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["factory: ServiceFactory[Req, Rep],",64],["def apply(request: Req, service: Service[Req, Rep]): Future[Rep] = {",55],["LiftRules.htmlProperties.default.set((r: Req) =>",81]],"useCount":7607},{"word":"Request","context":[["import com.twitter.finagle.http.{Request, Response, Status}",138],["val request = Request()",372],["import com.twitter.finagle.http.{Request, Response}",363],["import play.api.mvc.Request",328],["val req = Request()",309],["import com.twitter.finagle.http.Request",276],["def apply(request: Request) = {",210],["pub ! ActorPublisherMessage.Request(1)",172],["Service.mk[Request, Renderer] { req =>",128],["object Request {",153]],"useCount":13040},{"word":"Response","context":[["val response = Response()",293],["object Response {",128],["Future.value(Response())",128],["val service = new Service[Request, Response] {",107],["import com.twitter.finagle.http.{Request, Response}",363],["import com.ning.http.client.Response",146],["import javax.ws.rs.core.Response",143],["@Context req: HttpServletRequest): Response = authenticated(req) { implicit identity =>",142],["import com.twitter.finagle.http.{Request, Response, Status}",138],["import kafka.network.RequestChannel.Response",132]],"useCount":10814},{"word":"Result","context":[["object Result {",104],["override def apply(lar: LoanApplicationRegister): Result = {",92],["import org.apache.hadoop.hbase.client.Result",76],["println(\"Result as Json String => \\n\" + apiResult)",78],["Future.successful(AuthenticatorResult(a.asInstanceOf[Array[Any]](1).asInstanceOf[Result]))",104],["Result(",118],["import hmda.validation.dsl.Result",142],["import org.specs2.execute.Result",199],["import play.api.mvc.Result",390],["req.setAttribute(ASSERT_FUNCTION, (csReq: CheckerServletRequest, csResp: CheckerServletResponse, res: Result) => {",146]],"useCount":8999},{"word":"Return","context":[["* Return a new RDD that is reduced into `numPartitions` partitions.",82],["* Return a new RDD by applying a function to each partition of this RDD.",73],["* Return an RDD containing all pairs of elements with matching keys in `this` and `other`. Each",81],["* Return a new \"state\" DStream where the state for each key is updated by applying",81],["flatMap(f andThen (Return(_)))",88],["* Return an RDD created by piping elements to a forked external process.",91],["* Return a new RDD containing the distinct elements in this RDD.",98],["* Return a new DStream in which each RDD is generated by applying a function",116],["* Return an RDD with the elements from `this` that are not in `other`.",151],["case Return(_) =>",180]],"useCount":10051},{"word":"Returns","context":[["/** Returns `true` if this value is less than x, `false` otherwise. */",150],["/** Returns `true` if this value is greater than x, `false` otherwise. */",150],["/** Returns `true` if this value is greater than or equal to x, `false` otherwise. */",149],["/** Returns the difference of this value and `x`. */",149],["/** Returns the quotient of this value and `x`. */",149],["/** Returns the product of this value and `x`. */",149],["/** Returns `true` if this value is less than or equal to x, `false` otherwise. */",149],["* Returns a user friendly string for this suite, composed of the",98],["/** Returns the remainder of the division of this value by `x`. */",149],["/** Returns the sum of this value and `x`. */",149]],"useCount":10750},{"word":"Right","context":[["partialMessage.toComplete.map(Right(_)).getOrElse({",296],["try Right(a)",83],["Right(xs.sum / xs.length)",89],["Right(None)",93],["case Right(a) => f(a)",96],["import scala.Right",103],["case Right(_) =>",122],["case Right(x) => x",170],["Right(",179],["Right(())",222]],"useCount":6993},{"word":"Row","context":[["import org.apache.spark.sql.Row",1241],["Row(\"1\"),",916],["Row(1),",725],["import com.datastax.driver.core.Row",252],["Row(\"6\"),",228],["Row(\"yidong\"),",228],["Row(\"liantong\"),",216],["Row(\"7\"),",212],["import org.apache.spark.sql.{Row, SQLContext}",208],["import org.apache.spark.sql.{DataFrame, Row}",206]],"useCount":24825},{"word":"RunWith","context":[["@RunWith(classOf[Testkit])",148],["@RunWith(classOf[JUnitRunner])",11522],["import org.junit.runner.RunWith",11532],["@RunWith(classOf[Cucumber])",75],["@RunWith(classOf[Theories])",67],["@RunWith(classOf[BlockJUnit4ClassRunner])",151],["//@RunWith(classOf[JUnitRunner])",66],["* Adding the `@RunWith` annotation enables the test suite to be executed",65],["@RunWith(classOf[JUnitSuiteRunner])",64],["@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])",147]],"useCount":24595},{"word":"S","context":[["assertTypedSame[I :: S :: HNil](in2, r3)",96],["* @tparam S State type",98],[".render((P, S, B) => {",115],["* @author Brian S O'Neill",125],["S.initIfUninitted(session) {",146],["\"IT'S SHOWTIME\\n\" +",170],["struct S { int x; int y; };",192],["type S = String; type I = Int; type D = Double; type C = Char",219],["import S._",288],["import net.liftweb.http.S",303]],"useCount":22885},{"word":"Scala","context":[["**     ________ ___   / /  ___     Scala API                            **",1001],["// Scala",767],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["** Scala Quantities and Units of Measure Library and DSL                **",415],["// Scala (test only)",222],["**     ________ ___   / /  ___      __ ____  Scala.js tools             **",207],["active-learning-scala: Active Learning library for Scala",193],["// Generated by the Scala Plugin for the Protocol Buffer Compiler.",191],["/* NSC -- new Scala compiler",184],["* Scala Version",182]],"useCount":12793},{"word":"Scalaz","context":[["// Scalaz",706],["import scalaz.Scalaz._",1113],["import scalaz.{Failure => _, _}, Scalaz._",59],["resolvers += \"Scalaz Bintray Repo\" at \"http://dl.bintray.com/scalaz/releases\",",50],["import scalaz._, Scalaz._, scalaz.concurrent.Task",32],["import autolift.Scalaz._",30],["import scalaz._, Scalaz._",1560],["import Scalaz._",3177],["*         Scalaz Validation",23],["* @return a Scalaz ValidatedString containing either",26]],"useCount":7133},{"word":"Scope","context":[["\"Scope 1\" - {",99],["import org.specs2.specification.Scope",772],["@State(Scope.Thread)",336],["@State(Scope.Benchmark)",302],["implicit scope: Scope): TailRec[Tree] = {",157],["trait Context extends Scope {",134],["import org.springframework.context.annotation.Scope",122],["import eu.cdevreeze.yaidom.core.Scope",104],["implicit scope: Scope, pos: Position): TailRec[Tree] = {",100],["import org.orbeon.oxf.xforms.xbl.Scope",100]],"useCount":8610},{"word":"See","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["* See the project homepage at: https://monix.io",820],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["* See the project homepage at: http://www.monifu.org",633],["* See the LICENCE.txt file distributed with this work for additional",344],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["* See the NOTICE file distributed with this work for additional information",112]],"useCount":8204},{"word":"Select","context":[["val e1 = Select(0.25 -> 0.3, 0.25 -> 0.5, 0.25 -> 0.7, 0.25 -> 0.9)",168],["val e3 = Select(0.7 -> 1, 0.2 -> 2, 0.1 -> 3)",114],["val e2 = Select(0.1 -> 1, 0.9 -> 2)",114],["val a = If(f, Select(0.3 -> 1, 0.7 -> 2), Constant(2))",113],["val u = Select(0.25 -> 0.3, 0.25 -> 0.5, 0.25 -> 0.7, 0.25 -> 0.9)",79],["val e3 = Select(0.2 -> \"a\", 0.3 -> \"b\", 0.5 -> \"c\")",68],["val e1 = Select(0.2 -> \"a\", 0.3 -> \"b\", 0.5 -> \"c\")",66],["case Select(qualifier, item) =>",64],["/** Select a subset of elements of 'this' vector corresponding to a 'basis'.",59],["Select(",734]],"useCount":6439},{"word":"Seq","context":[["Seq()",1375],["Seq(",8371],["libraryDependencies ++= Seq(",3788],["val expected = Seq(",526],["resolvers ++= Seq(",559],["val appDependencies = Seq(",603],["case _ => Seq.empty",788],["Seq.empty",959],["requestHeaders: Seq[(String, String)] = Nil",1107],["import scala.collection.immutable.Seq",1718]],"useCount":115122},{"word":"Service","context":[["val service = new Service[Request, Response] {",107],["import com.twitter.finagle.Service",1058],["val service = new Service[String, String] {",87],["import com.twitter.finagle.{Service, SimpleFilter}",230],["import org.springframework.stereotype.Service",180],["@Service",135],["val service = mock[Service[String, String]]",132],["Service.mk[Request, Renderer] { req =>",128],["import com.twitter.finagle.{Http, Service}",115],["import com.twitter.finagle.{Filter, Service}",108]],"useCount":8264},{"word":"Set","context":[["Set[WebAPIException](TypeMismatchError)",1537],["Set(",758],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["val col = colFun(Set(1, 2, 3))",518],["import scala.collection.mutable.Set",401],["ConfigMap.empty, None, new Tracker, Set.empty))",369],[".check(headerRegex(\"Set-Cookie\", \"CSRF-TOKEN=(.*); [P,p]ath=/\").saveAs(\"csrf_token\")))",353],["import scala.collection.Set",309],["import scala.collection.immutable.Set",304]],"useCount":54486},{"word":"Short","context":[["// Float +- Short",188],["// Int +- Short",188],["// Long +- Short",188],["// Short +- Byte",188],["// Double +- Short",188],["var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null",209],["_passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]",209],["var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null",209],["// Short +- Short",251],["// Short +- Short",251]],"useCount":6981},{"word":"SlowAsMolasses","context":[["// SlowAsMolasses is included, one test should be excluded",225],["@SlowAsMolasses",1022],["// SlowAsMolasses is included, and both tests should be included",225],["// SlowAsMolasses included, FastAsLight excluded",225],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["assert(e.expectedTestCount(Filter(None, Set(\"org.scalatest.SlowAsMolasses\"))) === 0)",179],["assert(d.expectedTestCount(Filter(None, Set(\"org.scalatest.SlowAsMolasses\"))) === 1)",179],["assert(e.expectedTestCount(Filter(Some(Set(\"org.scalatest.SlowAsMolasses\")), Set(\"org.scalatest.FastAsLight\"))) === 1)",179],["assert(d.expectedTestCount(Filter(Some(Set(\"org.scalatest.SlowAsMolasses\")), Set(\"org.scalatest.FastAsLight\"))) === 1)",179],["// No tagsToInclude set, SlowAsMolasses excluded",164]],"useCount":10495},{"word":"Some","context":[["import scala.Some",1694],["Some(",2167],["val Some(result) = route(",737],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["Some(LocationV1(",804],["assert(caught1.failedCodeFileName === Some(fileName))",810],["ny = Some(128),",814],["e.failedCodeFileName should be (Some(fileName))",824],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280]],"useCount":151459},{"word":"Source","context":[["import scala.io.Source",5744],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* documentation that, without modification of the Source Code, enables",1872],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["import akka.stream.scaladsl.Source",445],["import io.Source",333],["/* This Source Code Form is subject to the terms of the Mozilla Public",246],["import scala.io.Source._",138],["import akka.stream.scaladsl.{Sink, Source}",135],["* JBoss, Home of Professional Open Source",123]],"useCount":15186},{"word":"SparkConf","context":[["val conf = new SparkConf()",1023],["import org.apache.spark.SparkConf",1822],["import org.apache.spark.{SparkConf, SparkContext}",2037],["import org.apache.spark.{SparkContext, SparkConf}",636],["val sparkConf = new SparkConf()",288],["val conf = new SparkConf",162],["conf: SparkConf,",162],["new SparkConf()",130],["import org.apache.spark.{ SparkConf, SparkContext }",111],["import org.apache.spark.{Logging, SparkConf}",110]],"useCount":8563},{"word":"SparkContext","context":[["import org.apache.spark.{SparkContext, SparkConf}",636],["sc = new SparkContext(\"local\", \"test\")",878],["val sc = new SparkContext(sparkConf)",543],["sc = new SparkContext(conf)",302],["sc: SparkContext,",972],["import org.apache.spark.{SparkConf, SparkContext}",2037],["val sc = new SparkContext(conf)",2072],["import org.apache.spark.SparkContext._",2295],["import org.apache.spark.SparkContext",4498],["import spark.SparkContext._",218]],"useCount":21602},{"word":"Specification","context":[["import org.specs.Specification",510],["import org.specs2.mutable.Specification",6153],["import org.specs2.Specification",615],["extends Specification",290],["class ApplicationSpec extends Specification {",237],["class IntegrationSpec extends Specification {",170],["import org.specs2.{ScalaCheck, Specification}",105],["* <h3>Specification for implementors</h3>",99],["import org.specs2.{Specification, ScalaCheck}",96],["* ====Specification====",73]],"useCount":9077},{"word":"Stack","context":[["object `A Stack` {",92],["* \"A Stack\" when { ... }",81],["import collection.mutable.Stack",118],["val stack = new Stack[Int]",144],["import com.twitter.finagle.Stack",146],["describe(\"A Stack\") {",153],["params: Stack.Params = this.params",196],["*     val stack = new Stack[Int]",210],["\"A Stack\" when {",283],["import scala.collection.mutable.Stack",305]],"useCount":8066},{"word":"State","context":[["class Backend(t: BackendScope[Props, State]) {",118],["import chat.tox.antox.data.State",150],[".initialState(State())",178],["import State._",183],["val db = State.db",224],["Map[Int, State](",258],["sealed trait State",290],["@State(Scope.Benchmark)",302],["object State {",335],["@State(Scope.Thread)",336]],"useCount":12830},{"word":"Status","context":[["Status.DRIVER_RUNNING",201],["status: Status,",130],["}.getOrElse(Status(406)(\"The server doesn't support any of the requested mime types\"))",131],["object Status {",134],["import com.twitter.finagle.http.{Request, Response, Status}",138],["Status(rn.code)(rn.toJson(true))",163],["def answer(invocation: InvocationOnMock): Status = {",170],["protected override def runTest(testName: String, args: Args): Status = {",183],["import akka.actor.Status.Failure",188],["override def run(testName: Option[String], args: Args): Status = {",391]],"useCount":8874},{"word":"Stream","context":[["trait Stream[+A] {",123],["case object Empty extends Stream[Nothing]",134],["def apply[A](as: A*): Stream[A] =",138],["object Stream {",193],["import Stream._",207],["def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {",128],["def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {",128],["case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]",130],["case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]",130],["def empty[A]: Stream[A] = Empty",134]],"useCount":6550},{"word":"String","context":[["def main(args: Array[String]) {",11494],["id: String,",1564],[".ofType(classOf[String])",1561],["path: String,",1322],["def main(args: Array[String]) = {",1296],["def name: String",1791],["override def toString: String = {",2286],["name: String,",4715],["def main(args: Array[String]): Unit = {",6748],["type FixtureParam = String",7797]],"useCount":357535},{"word":"StringBuilder","context":[["*   val builder = new StringBuilder",201],["val s: StringBuilder = new StringBuilder",219],["val s: StringBuilder = new StringBuilder",219],["val buf = new StringBuilder",363],["val builder = new StringBuilder",453],["val sb = new StringBuilder()",591],["val sb = new StringBuilder",1196],["val builder = new StringBuilder()",189],["val out = new StringBuilder",169],["import java.lang.StringBuilder",153]],"useCount":8935},{"word":"Success","context":[["import scala.util.{ Failure, Success, Try }",715],["case Success(_) =>",668],["import scala.util.{Try, Success, Failure}",605],["import scala.util.{ Failure, Success }",578],["import scala.util.{ Try, Success, Failure }",527],["import scala.util.{Success, Try}",406],["import scala.util.{Success, Failure}",401],["import scala.util.Success",2120],["import scala.util.{Failure, Success, Try}",2670],["import scala.util.{Failure, Success}",2054]],"useCount":25951},{"word":"Suite","context":[["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["import org.scalatest.Suite",539],["val a = new Suite {",285],["this: Suite =>",195],["*     exists in this <code>Suite</code>",138],["* Suite style name.",137],["import org.scalatest.{BeforeAndAfterAll, Suite}",124],["* @param configMap a <code>Map</code> of key-value pairs that can be used by the executing <code>Suite</code> of tests.",117],["theSuite: Suite,",101],["override def nestedSuites = Vector(new Suite {})",101]],"useCount":6793},{"word":"Symbol","context":[["owner: Symbol,",115],["symbol: Symbol,",104],["import sana.tiny.symbols.Symbol",85],["privateWithin: Symbol = NoSymbol,",63],["type OptionMap = Map[Symbol, Any]",54],["ownerIfExists: Symbol,",45],["import tiny.symbols.Symbol",38],["symbol: Option[Symbol] = None,",37],["Key <: Symbol,",34],["type OptionMap = Map[Symbol, String]",31]],"useCount":8383},{"word":"SyntheticEvent","context":[["onKeyPress: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onCopy: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragEnd: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onPaste: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onCompositionUpdate: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onKeyUp: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onTouchStart: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onTouchEnd: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onMouseMove: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onSubmit: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452]],"useCount":19180},{"word":"System","context":[["* La Trobe University - Distributed Deep Learning System",704],["val start = System.currentTimeMillis()",755],["System.exit(0)",1347],["System.exit(1)",3108],["System.err.println(",386],["System.gc()",388],["val startTime = System.currentTimeMillis()",676],["val start = System.currentTimeMillis",665],["val startTime = System.currentTimeMillis",537],["System.exit(-1)",515]],"useCount":32741},{"word":"T","context":[["type T",253],["* @tparam T",632],["new Matcher[T] {",373],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["rdd: RDD[T],",211],["val ts = TableQuery[T]",209],["(\"@extensible\",          AbsConstValue(PropValue(T))),",203],["def apply(left: T): MatchResult = {",231],["(name, AbsConstValue(PropValue(ObjectValue(loc_cons, T, F, T))))",200],["(name, AbsConstValue(PropValue(ObjectValue(loc_cons, T, F, T))))",200]],"useCount":84602},{"word":"TODO","context":[["//TODO",310],["// TODO test for resources etc.",99],["// TODO: revisit this once we have trivia in place",94],["//TODO: probably replace",93],["//TODO: fix style issue and enable this scalastyle check",77],["* TODO: Add description.",143],["// TODO:",247],["* TODO",313],["// TODO",1110],["//TODO: not yet implemented",124]],"useCount":8720},{"word":"Task","context":[["* // Unfolding into a Task",91],["object Task {",88],["import Task._",90],["* val ta: Task[A] = a.transK[Task].run(s)",91],["* val ta: Task[A] = a.transK[Task].run(s)",91],["* provided for `Task`, `IO`, and stdlib `Future`; and `transK[M]` is provided as syntax.",91],["Task {",116],["Task.delay {",166],["import mesosphere.marathon.core.task.Task",486],["import scalaz.concurrent.Task",1487]],"useCount":8378},{"word":"Test","context":[["@Test",36920],["import org.junit.Test",6088],["object Test {",2134],["object Test extends dotty.runtime.LegacyApp {",832],["publishArtifact in Test := false,",777],["parallelExecution in Test := false,",642],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["class Test {",371],["import org.testng.annotations.Test",367],["object Test extends App {",335]],"useCount":66353},{"word":"TestFailedException","context":[["intercept[TestFailedException] {",4645],["val e = intercept[exceptions.TestFailedException] {",946],["val e2 = intercept[exceptions.TestFailedException] {",1046],["val e = intercept[TestFailedException] {",1269],["val caught4 = intercept[TestFailedException] {",1419],["val e2 = intercept[TestFailedException] {",3429],["val caught3 = intercept[TestFailedException] {",4858],["val caught2 = intercept[TestFailedException] {",5192],["val caught1 = intercept[TestFailedException] {",6788],["val e1 = intercept[TestFailedException] {",7354]],"useCount":56627},{"word":"TestProbe","context":[["val testProbe = TestProbe()",119],["val probe = TestProbe()",1503],["import akka.testkit.TestProbe",830],["val sender = TestProbe()",141],["import akka.testkit.{ImplicitSender, TestKit, TestProbe}",133],["val arbiter = TestProbe()",105],["implicit val probe = TestProbe()",94],["import akka.testkit.{TestKit, TestProbe}",94],["val parent = TestProbe()",81],["val receiverProbe = TestProbe()",75]],"useCount":6509},{"word":"TestUtils","context":[["val props = TestUtils.createBrokerConfig(0, TestUtils.MockZkConnect, port = 8181)",284],["val props = TestUtils.createBrokerConfig(0, TestUtils.MockZkConnect, port = 8181)",284],["import kafka.utils.TestUtils",311],["TestUtils.waitUntilTrue(() => {",417],["implicit val config = TestUtils.NO_IMAGE_CONFIG",255],["import kafka.utils.TestUtils._",241],["TestUtils.waitUntilTrue(() =>",187],["TestUtils.deleteRecursively(new File(tempEmptyDir))",176],["import org.jetbrains.plugins.scala.util.TestUtils",152],["val set = TestUtils.singleMessageSet(\"test\".getBytes())",148]],"useCount":9226},{"word":"The","context":[["And(\"The following assertions should also hold:\")",275],["* @param configuration The Play configuration.",312],["* @param request The request header.",321],["* @return The result to display.",327],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["* The SIRIS Project is a cooperation between Beuth University, Berlin and the",338],["* @param httpLayer The HTTP layer implementation.",386],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["* The interactive user interfaces in modified source and object code versions",539],["* <p>The default implementation does nothing.</p>",254]],"useCount":73701},{"word":"This","context":[["* This file is part of Neo4j.",1823],["// This project",570],["* This method enables the following syntax:",3913],["* This file is part of Rudder.",604],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* This instance is immutable and unaffected by this method call.",998]],"useCount":58355},{"word":"Thread","context":[["Thread.sleep(500)",1014],["Thread.sleep(10000)",333],["@State(Scope.Thread)",336],["Thread.sleep(200)",369],["Thread.sleep(10)",429],["Thread.sleep(3000)",433],["Thread.sleep(1000)",2451],["Thread.sleep(5000)",763],["Thread.sleep(2000)",810],["Thread.sleep(100)",1358]],"useCount":18812},{"word":"Throwable","context":[["case t: Throwable => {",336],["var errorThrown: Throwable = null",304],["def onError(ex: Throwable): Unit = {",403],["case _: Throwable =>",405],["case ex: Throwable =>",581],["case e: Throwable => {",592],["case t: Throwable =>",1712],["case e: Throwable =>",3671],["def onError(ex: Throwable) = {",299],["case e2: Throwable => throw e2",284]],"useCount":24211},{"word":"Time","context":[["def close(deadline: Time): Future[Unit] = {",111],["import com.twitter.util.Time",374],["val now = Time.now",113],["def close(deadline: Time) = Future.Done",278],["Time.withCurrentTimeFrozen { ctl =>",270],["Time.withCurrentTimeFrozen { timeControl =>",229],["import com.twitter.util.{Future, Time}",186],["override def close(deadline: Time) =",179],["// Joda-Time",159],["Time.withCurrentTimeFrozen { tc =>",462]],"useCount":9810},{"word":"TimeUnit","context":[["assert(latch.await(5, TimeUnit.SECONDS), \"latch.await should have succeeded\")",106],["import java.util.concurrent.TimeUnit",4323],["import java.util.concurrent.{CountDownLatch, TimeUnit}",180],["TimeUnit.MILLISECONDS,",114],[".convertDurationsTo(TimeUnit.MILLISECONDS)",88],["@OutputTimeUnit(TimeUnit.SECONDS)",86],["@OutputTimeUnit(TimeUnit.NANOSECONDS)",86],[".convertRatesTo(TimeUnit.SECONDS)",85],["import java.util.concurrent.TimeUnit._",162],["assertTrue(f.get(timeout, TimeUnit.SECONDS).booleanValue)",118]],"useCount":8591},{"word":"Timeout","context":[["import akka.util.Timeout",5496],["implicit val timeout = Timeout(10.seconds)",82],["implicit val timeout = Timeout(1 second)",98],["implicit val timeout = Timeout(5 seconds)",410],["implicit val timeout = Timeout(5.seconds)",390],["implicit val timeout = Timeout(2 seconds)",70],["import akka.util.{ByteString, Timeout}",77],["import org.scalatest.concurrent.PatienceConfiguration.Timeout",82],["timeout: Timeout,",172],["implicit val timeout = Timeout(10 seconds)",146]],"useCount":9705},{"word":"TopicAndPartition","context":[["assertEquals(hw, hwFile1.read.getOrElse(TopicAndPartition(topic, 0), 0L))",98],["val topicAndPartition = TopicAndPartition(topic, 0)",93],[".format(localBrokerId, correlationId, controllerId, epoch, TopicAndPartition(state._1.topic, state._1.partitionId)))",85],["assertEquals(hw, hwFile2.read.getOrElse(TopicAndPartition(topic, 0), 0L))",70],["val topicAndPartition = TopicAndPartition(\"test\", 0)",65],["def selectLeader(topicAndPartition: TopicAndPartition, currentLeaderAndIsr: LeaderAndIsr): (LeaderAndIsr, Seq[Int]) = {",59],["import kafka.common.{ErrorMapping, TopicAndPartition}",106],["import kafka.common.TopicAndPartition",606],["val topicAndPartition = TopicAndPartition(topic, partition)",217],["val topicAndPartition = TopicAndPartition(topic, partitionToBeReassigned)",115]],"useCount":7380},{"word":"Tree","context":[["sealed trait Tree[+A]",170],["implicit pos: Position): js.Tree = {",433],["object Tree {",221],["implicit val pos: Position) extends Tree {",219],["override def inspect(tree: Tree): Unit = {",134],["implicit scope: Scope): TailRec[Tree] = {",157],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["case class Leaf[A](value: A) extends Tree[A]",169]],"useCount":23648},{"word":"Try","context":[["Try {",2600],["import scala.util.{ Try, Success, Failure }",527],["import scala.util.{Try, Success, Failure}",605],["import scala.util.{ Failure, Success, Try }",715],["import scala.util.{Success, Try}",406],["import scala.util.{Failure, Success, Try}",2670],["import scala.util.{Failure, Try}",351],["import scala.util.Try",8033],["import scala.util.{Try, Failure, Success}",147],["import scala.util.{Success, Failure, Try}",259]],"useCount":23167},{"word":"Type","context":[[".header(\"Content-Type\", \"application/json\")",172],["* Get the JDBC SQL Type for this field",108],[".setType(Value.Type.SCALAR)",111],["* Type in expressions to have them evaluated.",140],["* Type :help for more information.",140],["import org.objectweb.asm.Type",160],["import java.lang.reflect.Type",162],["object Type {",164],["Seq() :+ (\"Accept\" -> acceptHeader) :+ (\"Content-Type\" -> contentType)",174],["s\"Content-Type = $acceptHeader\" |: (requestContentType_(path) ?= Some(acceptHeader)),",176]],"useCount":25921},{"word":"U","context":[["style: U[js.Any] = undefined,",485],["hidden: U[Boolean] = undefined,",453],["title: U[String] = undefined,",455],["onDragEnter: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onClick: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onAnimationIteration: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragStart: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onCompositionEnd: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDoubleClick: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onMouseLeave: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452]],"useCount":44423},{"word":"URI","context":[["import java.net.URI",3076],["import java.net.{URI, URL}",128],["val uri = new URI(path)",54],["uri: URI,",54],["import java.net.{ URI, URL }",54],["val uri = new java.net.URI(getFileUrl(datasetId))",48],["val uri = new URI(url)",45],["* Hadoop-supported file system URI, and return it as an RDD of Strings.",43],["new URI(",40],["* Creates a new MongoConnection from URI.",39]],"useCount":6414},{"word":"URL","context":[["assert(checker,Start, URL(\"x\"),  Method(\"POST\"),",84],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["import java.net.URL",3544],["import java.net.{URL, URLClassLoader}",166],["import java.net.{URI, URL}",128],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), WellXML, ContentFail)",124],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), WellXML, ContentFail)",124],["import java.net.{HttpURLConnection, URL}",115],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), ContentFail)",103],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), ContentFail)",103]],"useCount":9178},{"word":"UUID","context":[["guid: _root_.java.util.UUID,",246],["apiRequestID = UUID.randomUUID",113],["(__ \\ \"guid\").read[_root_.java.util.UUID] and",120],["object id extends UUIDColumn(this) with PartitionKey[UUID]",132],["private val TestRequestId = java.util.UUID.randomUUID().toString",160],["id: UUID,",170],["val id = gen[UUID]",222],["import java.util.UUID.randomUUID",112],["import java.util.{Date, UUID}",356],["import java.util.UUID",7625]],"useCount":14792},{"word":"UndefOr","context":[["val enabled: js.UndefOr[Boolean] = js.undefined",415],["val lineWidthOuter: js.UndefOr[Double] = lineWidth",319],["override val lineWidth: js.UndefOr[Double] = lineWidthOuter",319],["val lineWidth: js.UndefOr[Double] = js.undefined",319],["override val color: js.UndefOr[String | js.Object] = colorOuter",300],["val color: js.UndefOr[String | js.Object] = js.undefined",300],["val colorOuter: js.UndefOr[String | js.Object] = color",300],["override val fillColor: js.UndefOr[String | js.Object] = fillColorOuter",284],["val enabledOuter: js.UndefOr[Boolean] = enabled",415],["override val enabled: js.UndefOr[Boolean] = enabledOuter",415]],"useCount":31911},{"word":"Unit","context":[["val promise = Promise[Unit]()",652],["override def afterAll(): Unit = {",761],["override def beforeAll(): Unit = {",781],["override def postStop(): Unit = {",916],["def run(): Unit = {",1011],["): Unit = {",1046],["override def preStart(): Unit = {",1102],["override def run(): Unit = {",1540],[": Unit = {",1637],["def main(args: Array[String]): Unit = {",6748]],"useCount":84217},{"word":"User","context":[["import models.User",768],["user: User,",177],["* User: mihais",202],["import lila.user.{ User, UserRepo }",230],["* User: Dmitry Naydanov",247],["case class User(",256],["import lila.user.User",326],["* User: Alefas",174],["object User {",351],["* User: Alexander Podkhalyuzin",1076]],"useCount":15157},{"word":"Utils","context":[["import kafka.utils.Utils",89],["if (Utils.isLollipopOrAbove) {",87],["println(Utils.stackTrace(e))",75],["val tempDir = Utils.createTempDir()",92],["Utils.deleteRecursively(tempDir)",101],["Utils.runInSwingThread {",220],["import org.apache.kafka.common.utils.Utils",270],["import Utils._",408],["object Utils {",490],["import org.apache.spark.util.Utils",895]],"useCount":8298},{"word":"V","context":[["object V {",273],["valueClass: Class[V],",149],["* @tparam V",275],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["reduceFunc: (V, V) => V,",101]],"useCount":29145},{"word":"Value","context":[["((Helper.ReturnStore(h, Value(UndefTop)), ctx), (he, ctxe))",95],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"length\", AbsConstValue(PropValue(ObjectValue(Value(AbsNumber.alpha(0)), F, F, F)))),",204],["import org.apache.accumulo.core.data.{Key, Value}",178],["(\"@hasinstance\", AbsConstValue(PropValue(Value(NullTop)))),",144],[".setType(Value.Type.SCALAR)",111],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(HTMLElement.loc_proto), F, F, F)))),",110],["type Type = Value",84],["((Helper.ReturnStore(h, Value(NumTop)), ctx), (he, ctxe))",82],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540]],"useCount":11802},{"word":"Vector","context":[["val nils: Vector[List[Int]] = Vector(Nil, Nil, Nil)",104],["Vector.empty",110],["Vector,",113],["import scala.Vector",150],["Vector.empty,",161],["Vector(),",168],["import org.apache.spark.mllib.linalg.{Vector, Vectors}",230],["import org.apache.spark.mllib.linalg.Vector",373],["Vector(",648],["children = Vector(",739]],"useCount":16881},{"word":"We","context":[["* We represent a set by its characteristic function, i.e.",90],["* all returns a list of all the valid, known values. We use",218],["* We use all CAPS for the variable name to avoid collisions",217],["* generated. We want to make it easy and obvious for users of",217],["// We can't have the ensureTopicExists check here since the controller sends it as an advisory to all brokers so they",111],["val d = ds(mid2) // We index into an array using the same",88],["InternalServerError(s\"Oops. There seems to be a problem ($e) with the server. We are working on it!\")",89],["// We can generalize `formatAbs` and `formatFactorial` to",96],["Note that we can go back and forth between the two forms. We can curry",94],["null, // We can't predict the event_id",92]],"useCount":9822},{"word":"When","context":[["} When {",135],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["// When",775],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["When(\"The app is deployed\")",154],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["//When",351],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["When(\"the wadl is translated\")",428]],"useCount":8807},{"word":"WordSpec","context":[["import org.scalatest.WordSpec",1188],["class TestSpec extends WordSpec {",733],["import org.scalatest.{ Matchers, WordSpec }",334],["val a = new WordSpec {",232],["* import org.scalatest.WordSpec",180],["import org.scalatest.{WordSpec, Matchers}",152],["class MySpec extends WordSpec {",226],["new WordSpec {",196],["extends WordSpec",145],["import org.scalatest.{Matchers, WordSpec}",1480]],"useCount":7558},{"word":"X","context":[["\"X-TESTO\"->List(\"boo\"))),response,chain)",166],["class X {",329],["|class X {",313],[".userAgentHeader(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:33.0) Gecko/20100101 Firefox/33.0\")",285],["X",121],["assert(csReq.getHeader(\"X-SUB-RESOURCE2\") == null)",114],["ruledera(Sequenta(Structure_Freevar(List('X')),",211],["\"X-CSRF-TOKEN\" -> \"${csrf_token}\"",198],["object X {",177],["\"Mac OS X\",",137]],"useCount":9894},{"word":"_","context":[["import org.scalatest._",9769],["import play.api.libs.json._",6149],["import akka.actor._",6520],["import sbt._",9410],["import scala.collection.JavaConversions._",15808],["case _ =>",58102],["case _ => None",19486],["case _ => false",19294],["import scala.collection.JavaConverters._",13821],["import scala.concurrent.duration._",18263]],"useCount":1094946},{"word":"_1","context":[["assert(statement._2.namespace._1 == gaapNS, \"Concept must belong to gaap namespace\")",389],["}._1",152],["}.collect.toSeq.sortBy(_._1)",215],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["val addr_env = (cp._1._1, set_addr.head)",260],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267],[".map(_._1)",207],["if (!t._1) {",226],[".groupBy(_._1)",226],["val addr_env = (cp._1._1, set_addr.head)",260]],"useCount":25014},{"word":"_2","context":[["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._2._2",380],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._2._2",380],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["undefinedSubst = t._2",299],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["assert(statement._2.namespace._1 == gaapNS, \"Concept must belong to gaap namespace\")",389],[".map(_._2)",274],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267]],"useCount":23333},{"word":"__","context":[["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["/*                     __                                               *\\",2275],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945]],"useCount":43259},{"word":"___","context":[["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["* |  _ \\  |  _ \\  | ____|  / ___|  / _/    / ___|        Precog (R)",574],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["**     ________ ___   / /  ___     Scala API                            **",1001],["*  ____    ____    _____    ____    ___     ____",574],["* |  _ \\  |  _ \\  | ____|  / ___|  / _/    / ___|        Precog (R)",574],["** /____/\\___/_/ |_/____/_/ | |                                         **",1011],["1t1i   .;;   .1tf       ___/ //___// /  / // /_/ // /__ / / / /",389],["**     ________ ___   / /  ___     Scala API                            **",1001]],"useCount":15823},{"word":"____","context":[["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["*  ____    ____    _____    ____    ___     ____",574],["*  ____    ____    _____    ____    ___     ____",574],["** /____/\\___/_/ |_/____/_/ | |                                         **",1011],["** /____/\\___/_/ |_/____/_/ | |                                         **",1011],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["**                          |/____/                                     **",1264],["*  ____    ____    _____    ____    ___     ____",574]],"useCount":16482},{"word":"_root_","context":[["guid: _root_.java.util.UUID,",246],["import _root_.net.liftweb.util._",560],["import _root_.net.liftweb.common._",405],["_root_.scala.None,",351],["_root_.scala.None",241],["import _root_.scala.xml._",209],["import _root_.io.gatling.core.scenario.Simulation",278],["import _root_.net.liftweb.http._",265],["import _root_.net.liftweb.mapper._",180],["import _root_.net.liftweb.util.Helpers._",181]],"useCount":12514},{"word":"a","context":[["val a = new MySpec",696],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["return a;",954],["a match {",1102],["val a = 1",680],["* licence, when you create a Related Module, this Related Module is",1268],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["* A \"Related Module\" means a set of sources files including their",1872],["a",1595]],"useCount":353747},{"word":"a1","context":[["println (\"Test direct: a1 = \" + a1.deep)",143],["println (\"Test direct: a1 = \" + a1.deep)",143],["val ( ( a1 :: Nil ) :: Nil ) = r.aux",138],["val a1 = new Array[Byte](400)",198],["a1 match {",126],["def append[A](a1: List[A], a2: List[A]): List[A] =",122],["Some( ( r.uProof, r.root, a1, p1 ) )",105],["a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty,",90],["f(a1.asInstanceOf[T1],",84],["store.putSingle(\"a1\", a1, StorageLevel.MEMORY_ONLY)",83]],"useCount":6371},{"word":"abstract","context":[["* Question: Should we implment this method here, or should it remain abstract",178],["abstract override def withFixture(test: NoArgTest) = {",73],["*   abstract override def withFixture(test: NoArgTest) {",68],["|abstract class A {",67],["abstract class CodeTree",66],["sealed abstract class Tree",62],["abstract class TweetSet {",80],["// the HttpService trait defines only one abstract member, which",100],["|abstract class b {",140],["sealed abstract class List",142]],"useCount":6490},{"word":"ac","context":[["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517]],"useCount":8826},{"word":"action","context":[["action:",1145],[".action((x, c) => c.copy(input = x))",117],["import org.orbeon.oxf.xforms.action.XFormsAPI._",146],["assetHelper.withCleaner(wsk.action, name) {",172],["action",377],["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["action match {",324],["action { (_, c) =>",258],["val action = for {",172],["put(entityStore, action)",155]],"useCount":13678},{"word":"actor","context":[["import akka.actor.actorRef2Scala",378],["import akka.actor.ActorSystem",6330],["import akka.actor.{ActorSystem, Props}",783],["import akka.actor.ActorLogging",801],["import akka.actor.Props",2251],["import akka.actor.Actor",2890],["import akka.actor.ActorRef",3240],["import akka.actor._",6520],["import akka.actor.{Props, ActorSystem}",393],["import im.actor.server.db.DbExtension",390]],"useCount":55776},{"word":"actual","context":[["actual should be (expected)",3093],["assert(actual === expected)",683],["actual should be(expected)",378],["assert(actual == expected)",159],["val actual =",105],["actual.sql(true, null)._2 should be (Nil)",147],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["assertEquals(expected, actual)",126],["assert(expected === actual)",111],["actual.sql(true, null)._1 should be ('empty)",123]],"useCount":11772},{"word":"add","context":[["*  @param u  the vector to add",206],["pr.add(e1)",257],["*  @param b  the matrix to add (requires leDimensions)",213],["*  @param x  the scalar to add",237],["*  @param b  the vector to add",244],["*  @param s  the scalar to add",288],["pr.add(e2)",282],["pr.add(e3)",264],["* add your integration spec here.",149],["pr.add(e4)",164]],"useCount":19357},{"word":"additional","context":[["distributed with this work for additional information",106],["* See the NOTICE file distributed with this work for additional information",112],["* @param extraArguments Any additional arguments to provide to the request",138],["* distributed with this work for additional information",4340],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["* or visit www.oracle.com if you need additional information or have any",372],["* See the LICENCE.txt file distributed with this work for additional",344],["* @param extraArguments The additional JDI arguments to provide",238]],"useCount":9492},{"word":"address","context":[["address = Some(LastAddress(",79],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["expectMsg(address)",96],[".bindTo(address)",102],["* address: ezh@ezh.msk.ru",541],["address: String,",104],["\"address\" ->",75],["null, // No geo-location for this IP address",72],["r.header.headers.get(LOCATION) should equal(Some(VehicleLookupPage.address))",63],["address = Some(PartialAddress(",61]],"useCount":6558},{"word":"after","context":[["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["//                                     ------------------after sgp4   :---------------",118],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["after {",1403],["val after =",449],["doTextTest(before, after)",427],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["* that were added by the server after this library was",217],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346]],"useCount":14194},{"word":"akka","context":[["import akka.actor.ActorSystem",6330],["import akka.stream.ActorMaterializer",1378],["import akka.util.ByteString",2074],["import akka.actor.Props",2251],["import akka.pattern.ask",3987],["import akka.actor._",6520],["import akka.event.Logging",1161],["import akka.actor.Actor",2890],["import akka.actor.ActorRef",3240],["import akka.util.Timeout",5496]],"useCount":87024},{"word":"all","context":[["import scalatags.JsDom.all._",475],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["* We use all CAPS for the variable name to avoid collisions",217],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e.message should be (Some(\"'all' inspection failed, because: \\n\" +",307],["// Log all HTTP requests",285],["import scalatags.Text.all._",221],["// This object has all properties of the HTMLElement object",218],["* all returns a list of all the valid, known values. We use",218],["* all returns a list of all the valid, known values. We use",218]],"useCount":38397},{"word":"also","context":[["And(\"The following assertions should also hold:\")",275],["// These are meant to be typed into the REPL. You can also run",150],["// also check partition ownership",128],["* Merge the values for each key using an associative reduce function. This will also perform",113],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["it(\"should also work with asOpt\") {",102],["it(\"should also work with validate\") {",102],["*  main diagonal.  Should also equal the sum of the eigenvalues.",96]],"useCount":6890},{"word":"an","context":[["it(\"should use an explicitly provided Equality\") {",1196],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["/** Maps whole row to an option. Useful for outer joins. */",399],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* Here's an example:",334],["\"should use an explicitly provided Equality\" in {",286],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["def `should use an explicitly provided Equality` {",1594]],"useCount":65282},{"word":"analysis","context":[["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.models._",466]],"useCount":7411},{"word":"and","context":[["* Redistribution and use in source and binary forms, with or without",3573],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* documentation and/or other materials provided with the distribution.",943],["* which accompanies this distribution, and is available at",935],["* This instance is immutable and unaffected by this method call.",998],["* accompanies this distribution and is available at",1026],["*    and/or other materials provided with the distribution.",906],["* which accompanies this distribution and is available at",1232],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["* Redistribution and use in source and binary forms, with or without",3573]],"useCount":162183},{"word":"android","context":[["import android.os.Bundle",840],["import android.content.Context",955],["import android.widget._",237],["import android.widget.Toast",203],["import android.util.Log",651],["import android.app.Activity",545],["import android.view.View",495],["import android.content.Intent",423],["import android.net.Uri",265],["import android.preference.PreferenceManager",265]],"useCount":14232},{"word":"annotation","context":[["import annotation.tailrec",707],["@scala.annotation.tailrec",603],["import scala.scalajs.js.annotation.ScalaJSDefined",482],["import scala.annotation.StaticAnnotation",456],["import org.apache.spark.annotation.DeveloperApi",435],["import org.springframework.beans.factory.annotation.Autowired",795],["import scala.annotation.implicitNotFound",962],["@js.annotation.ScalaJSDefined",1291],["@annotation.tailrec",2207],["import scala.annotation.tailrec",7796]],"useCount":28902},{"word":"annotations","context":[["import org.kiji.annotations.ApiAudience",200],["import org.jetbrains.annotations.NotNull",106],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["import org.intellij.lang.annotations.Language",115],["import org.kiji.annotations.ApiStability",120],["import org.jetbrains.annotations.Nullable",128],["import io.swagger.annotations._",97],["import org.testng.annotations.Test",367],["import org.openjdk.jmh.annotations._",331],["import com.wordnik.swagger.annotations._",138]],"useCount":6377},{"word":"any","context":[["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["* @param specText the specification text, which will be combined with the descText of any surrounding describers",247],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["* the current reporter immediately. If invoked at any other time, it will",263],["* Unauthorized copying of this file, via any medium is strictly prohibited.",234],["import org.mockito.Matchers.any",370],["* or visit www.oracle.com if you need additional information or have any",372],["* underlying futures complete. It fails immediately if any of them",396],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["*             On any error.",228]],"useCount":23251},{"word":"apache","context":[["import org.apache.spark.rdd.RDD",7440],["import org.apache.log4j.Logger",1455],["import org.apache.spark.sql.types._",1484],["import org.apache.commons.io.FileUtils",1486],["import org.apache.spark.Logging",1524],["import org.apache.spark.SparkConf",1822],["import org.apache.spark.{SparkConf, SparkContext}",2037],["import org.apache.hadoop.conf.Configuration",2106],["import org.apache.spark.SparkContext._",2295],["import org.apache.spark.SparkContext",4498]],"useCount":134709},{"word":"api","context":[["import play.api.mvc._",5405],["import play.api.libs.json._",6149],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556],["import play.api.Play.current",3657],["import play.api.libs.json.Json",4321],["import play.api.Logger",2664],["import play.api._",2272],["import play.api.data.Forms._",2020],["import play.api.test.Helpers._",2015],["import play.api.libs.functional.syntax._",1600]],"useCount":138590},{"word":"app","context":[["app,",616],["import cc.factorie.app.nlp._",215],["val app = AppDefinition(",774],["import android.app.Activity",545],["register(\"test://app/src/test/resources/xsd/test-urlxsd.xsd\",",337],["package app",319],["import lila.app._",298],["import com.twitter.app.App",242],["Given(\"a new app\")",294],["override def onStart(app: Application) {",274]],"useCount":32678},{"word":"appId","context":[["val appId = testBasePath / \"app\"",101],["appId = 1,",110],["appId,",135],["appId: Int,",137],["appId = dsp.appId,",160],["val appId = PathId(\"/app\")",101],["appId = dsp.appId,",160],["appId: PathId,",191],["appId = appId,",228],["appId = appId,",228]],"useCount":7923},{"word":"append","context":[["log.append(set)",328],["sb.append(\"\\n\")",215],["buf.append(\",\")",240],["def append[A](a1: List[A], a2: List[A]): List[A] =",122],["LiftRules.early.append(_.setCharacterEncoding(\"UTF-8\"))",130],["*       builder.append(\"fun!\")",143],["*       builder.append(\"easy!\")",144],["sb.append('\"')",146],["*     builder.append(\"ScalaTest is \")",163],["dataFileWriter.append(record);",168]],"useCount":24869},{"word":"application","context":[["respondWithMediaType(`application/json`) {",370],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["\"Accept\" -> \"\"\"application/json\"\"\",",327],["<representation mediaType=\"application/json\"/>",851],["<representation mediaType=\"application/xml\"/>",767],["</application>",609],["\"Accept\" -> \"\"\"application/json\"\"\"",353],["<application xmlns=\"http://wadl.dev.java.net/2009/02\"",583],["* serving files in a web or/and network application,",540],["import com.intellij.openapi.application.ApplicationManager",395]],"useCount":19961},{"word":"apply","context":[["def apply() = component()",369],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["def apply(",2624],["} // apply",849],["def apply() = {",726],["def apply(left: T): MatchResult = {",231],["val new_p = apply( p, name, rewriterules, proofSize, version, ProofLinkPassing )",234],["def apply(event: Event) {",565],["def apply() {",249],["}.update.apply()",253]],"useCount":57764},{"word":"are","context":[["* Detailed contributors are listed in the CONTRIBUTOR.md",477],["* are met:",168],["* Checks that all required fields are non-null.",167],["* Return an RDD with the elements from `this` that are not in `other`.",151],["// These are meant to be typed into the REPL. You can also run",150],["* @param name name of collection we are crawling for",142],["it(\"should propagate out Errors that are direct subtypes of Error in JDK 1.5, other than \" +",177],["* The following methods are already implemented",209],["* UNDEFINED captures values that are sent either in error or",217],["* @throws NullPointerException if any of the passed values are <code>null</code>",392]],"useCount":35767},{"word":"arg","context":[["arg[String](\"<input>\")",94],["for (arg <- args) {",92],[".arg(\"output\", \"fakeOutput\")",76],["for (arg <- args)",80],["System.err.println(\"Missing required argument \\\"\" + arg + \"\\\"\")",80],["it(\"should pass a NoArgTest that invokes the no-arg test when the \" +",91],["if(!options.has(arg)) {",87],["arg",265],["arg match {",479],["\"NoArgTest's no-arg apply method is invoked\") {",101]],"useCount":11772},{"word":"args","context":[["def main(args: Array[String]): Unit = {",6748],["def main(args: Array[String]) = {",1296],["|  def main(args: Array[String]) {",1041],["args match {",577],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["def main(args : Array[String]) {",410],["if (args.length == 0) {",402],["* @param args the <code>Args</code> for this run",396],["def main(args: Array[String]) {",11494]],"useCount":66804},{"word":"argument","context":[["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112],["System.err.println(\"Missing required argument \\\"\" + arg + \"\\\"\")",80],["* syntax, i.e. `{ argument }` instead of parentheses `(argument)`.",61],["* syntax, i.e. `{ argument }` instead of parentheses `(argument)`.",61],["* throws an `IllegalArgumentException` if its argument is `0`.",61],["* passing {@code this} as the argument.",78],["* for creating the fixture argument and passing it to the test function.",63],["* The string argument of \"assert\" is a message that is printed in case",62],["* In Scala, it is allowed to pass an argument to a method using the block",61],["test(\"intNotZero throws an exception if its argument is 0\") {",61]],"useCount":6718},{"word":"arguments","context":[["* @param extraArguments Any additional arguments to provide to the request",138],["* @param extraArguments The additional JDI arguments to provide",238],["/* arguments */",332],["arguments: _*",200],["val arguments = Seq(mock[JDIRequestArgument])",102],["*         requests from extra arguments",110],["val boundParams = params.validate(arguments)",134],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["params.validate(arguments)",118],["val arguments = Seq(mock[JDIArgument])",108]],"useCount":8615},{"word":"array","context":[["case ArraySelect(array, index) =>",92],["type: array",103],["val d = ds(mid2) // We index into an array using the same",88],["*  @param a  the array to be sorted",280],["* @param input RDD of (label, array of features) pairs.",178],["*  @param u  the 2D array of values to assign",166],["// test indirect sorting (will not modify the data array)",143],["array",459],["// test direct sorting (will modify the data array)",143],["case ArrayLength(array) =>",80]],"useCount":13533},{"word":"as","context":[["// Same as previous, except Ignore specifically mentioned in excludes set",225],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* of this program must display Appropriate Legal Notices, as required under",540],["* For example, this method supports syntax such as the following:",501],["as match {",345],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["else Cons(as.head, apply(as.tail: _*))",179],["else Cons(as.head, apply(as.tail: _*))",179],["* the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.",172]],"useCount":54432},{"word":"asInstanceOf","context":[["val ip = event.asInstanceOf[InfoProvided]",222],["f(props, children.toJsArray).asInstanceOf[ReactComponentU_]",163],["f(toJs, js.Array(children: _*)).asInstanceOf[ReactComponentU_]",165],["f(props).asInstanceOf[ReactComponentU_]",171],["val fs = ds.getFeatureSource(sftName).asInstanceOf[AccumuloFeatureStore]",206],["val foo = (new Foo).asInstanceOf[js.Dynamic]",319],["ScalaFileType.SCALA_FILE_TYPE, text).asInstanceOf[ScalaFile]",308],["val context: LoggerContext = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]",288],["val dyn = foo.asInstanceOf[js.Dynamic]",192],["val trce = testFailedEvents(0).throwable.get.asInstanceOf[TestRegistrationClosedException]",222]],"useCount":38257},{"word":"assert","context":[["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(1 === 1)",1115],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(",2592],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(e.failedCodeFileName === (Some(fileName)))",581],["assert(actual === expected)",683],["assert(caught4.failedCodeLineNumber === Some(thisLineNumber - 4))",726],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(1 + 1 === 2)",1075]],"useCount":158357},{"word":"assertEquals","context":[["assertEquals(rBytes(i), resBytes(i))",355],["assertEquals(errorThrown, DummyException(\"dummy\"))",257],["import org.junit.Assert.assertEquals",395],["assertEquals(received, 1)",239],["assertEquals(f.value, None)",213],["assertEquals(received, 0)",181],["assertEquals(Errors.NONE.code, joinGroupErrorCode)",157],["assertEquals(result.toString, c)",144],["assertEquals(sum, (0 until 9999).sum)",130],["assertEquals(",800]],"useCount":24622},{"word":"assertResult","context":[["assertResult(1) {",208],["assertResult(Set(EName(ns, \"root\"), EName(ns, \"child\"))) {",134],["assertResult(Set(",145],["assertResult(StatusCodes.OK) {",150],["assertResult(2) {",161],["assertResult(None) {",165],["assertResult(true) {",652],["assertResult(inst) {",313],["assertResult(false) {",238],["assertResult(",308]],"useCount":6647},{"word":"ast","context":[["import slick.ast._",314],["import ast._",297],["import ast.Trees._",246],["import ast.tpd._",221],["package ast",173],["stmt\"${(q.ast: Ast).token}\" mustEqual",123],["import djinni.ast._",163],["ast match {",155],["import com.twitter.scrooge.ast._",128],["import scala.slick.ast._",180]],"useCount":9794},{"word":"at","context":[["* accompanies this distribution and is available at",1026],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["*  For further information, please contact Hanns Holger Rutz at",539],["* For more information, please contact Digimead Team at this",540],["* See the project homepage at: http://www.monifu.org",633],["* See the project homepage at: https://monix.io",820],["import at.logic.gapt.expr._",828],["* which accompanies this distribution, and is available at",935],["Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")",509],["* which accompanies this distribution and is available at",1232]],"useCount":35009},{"word":"atomic","context":[["import java.util.concurrent.atomic._",411],["import java.util.concurrent.atomic.{AtomicBoolean, AtomicInteger}",95],["import com.cra.figaro.library.atomic.continuous._",115],["import java.util.concurrent.atomic.AtomicInteger",2154],["import java.util.concurrent.atomic.AtomicBoolean",1277],["ListSet(atomic.get.testNamesList.toArray: _*)",130],["val oldBundle = atomic.get",224],["import java.util.concurrent.atomic.AtomicReference",1044],["import java.util.concurrent.atomic.AtomicLong",951],["atomic { implicit txn =>",261]],"useCount":8625},{"word":"auth","context":[["import io.megam.auth.funnel.FunnelErrors._",93],["* @param authInfoRepository The auth info repository implementation.",90],["import com.amazonaws.auth.AWSCredentials",88],["val req = auth.request",200],["auth.authenticated = true",137],["import com.amazonaws.auth.BasicAWSCredentials",135],["import com.amazonaws.auth.AWSCredentialsProvider",96],["auth.authorized = false",135],["* @param loginInfo The login info for which the auth info should be saved.",131],["import org.apache.kafka.common.security.auth.KafkaPrincipal",97]],"useCount":8108},{"word":"author","context":[["/** @author Stephen Samuel */",1861],["@author Andrew McCallum */",896],["* @author Highcharts Config Generator by Karasiq",1311],["* @author Miles Sabin",1419],["* @author dramage",888],["/** @author  John Miller",886],["* @author Bill Venners",2968],["* @author Alexander Podkhalyuzin",1729],["* @author dlwh",1644],["*  @author Philip Stutz",797]],"useCount":57138},{"word":"available","context":[["*  (AGPL) version 3.0 which accompanies this distribution, and is available in",130],["*   <td>The series object. The series name is available",77],["// wait a bit for produced message to be available",54],["* accompanies this distribution and is available at",1026],["* which accompanies this distribution and is available at",1232],["// decompose to blocks (use vslice method if available)",51],["// Makes our SBT app settings available from within the app",47],["*   <td>The point object. The point name, if defined, is available",77],["* which accompanies this distribution, and is available at",935],["it should \"be available\" in {",103]],"useCount":7266},{"word":"await","context":[["import scala.async.Async.{async, await}",115],["}.await.totalHits shouldBe 1",92],["assert(latch.await(5, TimeUnit.SECONDS), \"latch.await should have succeeded\")",106],["assert(latch.await(5, TimeUnit.SECONDS), \"latch.await should have succeeded\")",106],["await(",142],["await(server.close())",172],["w.await()",175],["@SuppressWarnings(Array(\"all\")) // async/await",208],["latch.await()",267],["}.await",934]],"useCount":7140},{"word":"awt","context":[["import java.awt.event.ActionEvent",177],["import java.awt.Font",199],["import java.awt.event.MouseEvent",177],["import java.awt.event._",205],["import java.awt.BorderLayout",226],["import java.awt.Graphics2D",292],["import java.awt._",326],["import java.awt.Dimension",356],["import java.awt.Color",1084],["import java.awt.image.BufferedImage",761]],"useCount":8606},{"word":"b","context":[["require(b.length == a.length, \"Vectors must be the same length!\")",373],["assert(b.theTestThisCalled)",383],["b.result",392],["b.result()",518],["val bNumber = new BigDecimal(new BigInteger(b), bScale)",350],["for (j <- b.range2) {",373],["<resource path=\"/a/b\">",525],["b match {",751],["b = foo();",1091],["b",1157]],"useCount":97697},{"word":"bar","context":[[".map { bar =>",92],["Await.result(client.set(\"foo\", Buf.Utf8(\"bar\")))",94],["val origGroup = Group(PathId(\"/foo/bar\"), Set(app))",82],["val group = Group(PathId(\"/foo/bar\"), Set(app))",78],["(bar.id.get, bar.fooId.get, bar.bar.getAsString)",77],["(bar.id.get, bar.fooId.get, bar.bar.getAsString)",77],["bar",103],["makeOffer(\"foohost\", Set(TextAttribute(\"foo\", \"bar\"), TextAttribute(\"rackid\", \"rack-1\"))),",116],["val sn1 = 23 :: 3.0 :: \"foo\" :: () :: \"bar\" :: true :: 5L :: HNil",117],["val ns = \"urn:foo:bar\"",96]],"useCount":11552},{"word":"base","context":[["import org.jetbrains.plugins.scala.lang.psi.api.base.patterns.ScBindingPattern",221],["package base",511],["base =>",291],["base = file(\".\"),",796],["import com.google.common.base.Charsets",273],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["import org.jetbrains.plugins.scala.lang.psi.api.base.types.ScTypeElement",259],["import mesosphere.marathon.core.base.Clock",230],["<resources base=\"https://test.api.openstack.com\">",786]],"useCount":24648},{"word":"be","context":[["e.failedCodeFileName should be (Some(fileName))",824],["tfe.failedCodeFileName should be (Some(\"InspectorShorthandsSpec.scala\"))",572],["tfe.getCause should be (null)",602],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["actual should be (expected)",3093],["e1.failedCodeFileName.get should be (fileName)",1428],["e.message should be (",824],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278]],"useCount":141257},{"word":"because","context":[["e.message should be (Some(\"'all' inspection failed, because: \\n\" +",307],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["\"'all' inspection failed, because: \\n\" +",199],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["* Throws <code>UnsupportedOperationException</code>, because this method is unused by this",128],["* because the \"name\" provided to a JUnit <code>org.junit.runner.Description</code> appears to usually include",86],["* the code of a pending test is executed just like any other test.) However, because the test completes abruptly",85],["// we don't implement our route structure directly in the service actor because",83],["* The suite class name parameter is optional, because suites in ScalaTest are an abstraction that",79]],"useCount":8132},{"word":"been","context":[["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["Then(\"A success event is send and the application has been started\")",56],["* The documentation about this has not yet been written; please consider contributing!",60],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["describe(\"(when a nesting rule has been violated)\") {",145],["// has not been invalidated underneath (first call will always be",108],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["* @throws NotAllowedException if <code>testName</code> had been registered previously",76],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91]],"useCount":7165},{"word":"before","context":[["* out before tests are written to verify that behavior (and often, before the behavior of",70],["* out before tests are written to verify that behavior (and often, before the behavior of",70],["doTextTest(before)",77],["// scopeOpened should be invoked before the other method",113],["* the merging locally on each mapper before sending results to a reducer, similarly to a",113],["// scopeOpened should be invoked before the this method",113],["before() {",336],["doTextTest(before, after)",427],["val before =",526],["before {",2286]],"useCount":13137},{"word":"binary","context":[["import org.apache.commons.codec.binary.Base64",696],["Redistribution and use in source and binary forms, with or without",639],["* Redistribution and use in source and binary forms, with or without modification,",339],["import org.apache.commons.codec.binary.Hex",174],["2.  Redistributions in binary form must reproduce the above",163],["// Redistribution and use in source and binary forms, with or without",113],["* // in binary:   11110000",105],["// First, a binary search implementation, specialized to `Double`,",89],["* Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known",85],["* Redistribution and use in source and binary forms, with or without",3573]],"useCount":9022},{"word":"bind","context":[["ref.bind() match {",193],["import javax.xml.bind.DatatypeConverter",167],["import org.springframework.web.bind.annotation._",99],["it should \"display any errors on unsuccessful bind\" in {",88],["def bind(key: String, data: Map[String, String]) = {",72],["bind[IDGenerator].toInstance(new SecureRandomIDGenerator())",67],["bind",65],["import org.springframework.web.bind.annotation.RequestMapping",65],["bind[EventBus].toInstance(EventBus())",64],["bind[CacheLayer].to[PlayCacheLayer]",63]],"useCount":7230},{"word":"block","context":[["import net.minecraft.block.Block",563],["//END SNIPPET: block",81],["block\"\"\"",92],["import net.minecraft.block.state.IBlockState",96],["val result = block",114],["import scorex.block.Block",142],["block {",212],["import net.minecraft.block.material.Material",272],["block",814],["//START SNIPPET: block",80]],"useCount":11523},{"word":"body","context":[["</body>",994],["* @tparam B The type of the request body.",153],["try body",154],["it(\"should generate a TestPending message when the test body is (pending)\") {",177],["def apply(body: Any = Unit, headers: Map[String, String] = Map.empty, reason: String = \"\") =",180],["lazy val doc = Jsoup.parse(view.body)",231],["body match {",252],["implicit val req = ctx.body",314],["body",877],["<body>",948]],"useCount":24783},{"word":"border","context":[["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420]],"useCount":6265},{"word":"breeze","context":[["import breeze.linalg.DenseMatrix",369],["package breeze.stats.distributions",140],["import breeze.generic.UFunc",206],["import breeze.math._",144],["import breeze.linalg.{DenseMatrix, DenseVector}",151],["import breeze.macros.expand",157],["package breeze.linalg",416],["import breeze.numerics._",485],["import breeze.linalg.DenseVector",752],["import breeze.linalg._",1279]],"useCount":8313},{"word":"broker","context":[["case Some(broker) =>",68],["prevController = broker",63],["throw new NotLeaderForPartitionException(\"Leader not local for partition [%s,%d] on broker %d\"",58],["props.put(\"metadata.broker.list\", TestUtils.getBrokerListStrFromConfigs(configs))",54],["// create topic with 1 partition, 2 replicas, one on each broker",84],["Try(broker.shutdown())",95],["props.put(\"metadata.broker.list\", brokerList)",117],["// send some messages to each broker",195],["throw new IllegalStateException(\"Controller to broker state change requests batch is not empty while creating a \" +",53],["* Represents the lifecycle of a single Kafka broker. Handles all functionality required",49]],"useCount":9247},{"word":"buf","context":[["buf += 99 // Mutate to make sure no other test sees this",240],["buf.size must_== 1",107],["buf.append(\",\")",240],["buf(\"\")",244],["val buf = new StringBuilder",363],["buf.toString",372],["buf",604],["buf.toList",205],["def decode(buf: BitVector) = {",118],["buf(\"  \")",182]],"useCount":16141},{"word":"buffer","context":[["buffer.onComplete()",444],["import io.netty.buffer.ByteBuf",429],["import org.jboss.netty.buffer.ChannelBuffer",606],["buffer",828],["(0 until 9999).foreach(x => buffer.onNext(x))",260],["import org.jboss.netty.buffer.{ChannelBuffer, ChannelBuffers}",318],["*       assert(buffer.isEmpty)",319],["buffer.clear()",337],["buffer.rewind()",366],["import org.jboss.netty.buffer.ChannelBuffers",394]],"useCount":29928},{"word":"build","context":[[".build()",5037],[".build",3568],[".build())",639],["builder.build()",376],["builder.build",237],[".build(service)",205],["build",188],["//This class was generated by build script, please don't change this",186],["override def build(source: XContentBuilder): Unit = {",170],["}).build",164]],"useCount":22710},{"word":"builder","context":[["def parse(builder: ScalaPsiBuilder): Boolean = {",357],["builder.build()",376],["builder.toString",381],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439],["val builder = new StringBuilder",453],["builder.advanceLexer()",521],["builder",710],["builder.result()",783],["builder.getTokenType match {",1216],["val _builder = builder",353]],"useCount":35877},{"word":"but","context":[["// this actor only runs our route, but you could add",92],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["* if the code is anything but DONTCARE_EXIT, assert the code is as expected",120],["// This is safer, but we lose the error information as it returns",102],["// Shouldn't be called, but just in case don't invoke a OneArgTest",102],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91],["* @return true, but false when elided",89],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606]],"useCount":13146},{"word":"by","context":[["*  @param x  the scalar to divide by",242],["*  @param x  the scalar to multiply by",242],["* supplementary functions or services in addition to those offered by",1872],["* @author Highcharts Config Generator by Karasiq",1311],["* This instance is immutable and unaffected by this method call.",998],["* Created by IntelliJ IDEA.",753],["*  @param u  the vector to multiply by",407],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* / /_/ / /_/ /  __/ / / / /_/ / / / /_/ /_/ / /       contributed by tegonal *",275]],"useCount":57382},{"word":"bytes","context":[["bytes.rewind()",89],["val in = new ByteArrayInputStream(bytes)",94],["buffer.get(bytes)",105],["val bytes = new Array[Byte](length)",119],["out.write(bytes)",123],["* @param bytes",126],["val bcb = new BufChannelBuffer(Buf.ByteArray.Owned(bytes))",168],["val wrapped = ChannelBuffers.wrappedBuffer(bytes)",180],["val bytes = new Array[Byte](CAPACITY)",200],["bytes",708]],"useCount":15211},{"word":"c","context":[["c += 1",1075],["<resource path=\"/c\">",455],["c match {",643],["DB.withConnection { implicit c =>",720],["**    / __/ __// _ | / /  / _ | __ / // __/  (c) 2013, LAMP/EPFL        **",756],["test.c: In function 'main':",906],["var c = 0",1033],["assert(c.theTestThisCalled)",383],["import c.universe._",4608],["c",5888]],"useCount":90624},{"word":"cache","context":[["// Memoized request function first checks to make sure the cache",108],["import play.api.cache.CacheApi",111],["cache.clear()",121],["cache",145],["import play.api.cache.Cache",208],[".cache()",242],["}.cache()",389],[".check(headerRegex(\"Cache-Control\", \"no-cache\")))",105],[".cache",99],["import com.google.common.cache.{CacheBuilder, CacheLoader}",96]],"useCount":14002},{"word":"call","context":[["call {",586],["* This instance is immutable and unaffected by this method call.",998],[".call",92],["//Show the spinny image when an Ajax call starts",86],["// has not been invalidated underneath (first call will always be",108],["// call web hook",112],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["*  It can be used to solve 'a * x = b': augment 'a' with 'b' and call reduce.",78],["it(\"should wrap the unsafe call in a Try\") {",72],["case call: ScMethodCall =>",141]],"useCount":12523},{"word":"called","context":[["// Shouldn't be called, but just in case don't invoke a OneArgTest",102],["it(\"should execute one test when run is called with a defined testName\") {",193],["it(\"should execute all tests when run is called with testName None\") {",193],["var called = false",157],["called = true",141],["* print to the standard output. This method can be called safely by any thread.",132],["* This method can be called safely by any thread.",132],["* throw an exception. This method can be called safely by any thread.",131],["// This must be called by the event handler thread",90],["* @param msg  the message object. `toString()` is called to convert it",80]],"useCount":7210},{"word":"can","context":[["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["import spray.can.Http",1147],["* You can mock out a whole application including requests, plugins etc.",261],["// Set a known test id so we can validate the unique property is added",162],["// These are meant to be typed into the REPL. You can also run",150],["* print to the standard output. This method can be called safely by any thread.",132],["* This method can be called safely by any thread.",132],["* throw an exception. This method can be called safely by any thread.",131],["* @param configMap a <code>Map</code> of key-value pairs that can be used by the executing <code>Suite</code> of tests.",117]],"useCount":27276},{"word":"case","context":[["case e: Throwable =>",3671],["case _ =>",58102],["case None =>",22089],["case _ => None",19486],["case _ => false",19294],["case e: Exception =>",5480],["case _ => {",4988],["case e: Exception => {",3905],["case None => None",3773],["case None => {",3313]],"useCount":648707},{"word":"catch","context":[["//    } catch {",120],["} catch {",54067],["catch {",12830],["}catch{",557],["}catch {",541],["catch{",287],["catch",256],["catch { case e: Exception => Left(e) }",157],["catch { case _: Exception => fail(\"it shouldn't trown an exception\") }",140],["} catch{",96]],"useCount":72730},{"word":"caught1","context":[["assert(caught1.getMessage === \"lengthy did not have length 3, but lengthy had length 2\")",66],["val caught1 = intercept[TestFailedException] {",6788],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(caught1.getMessage === \"lengthy did not have length 5\")",66],["assert(caught1.getMessage === \"lengthy had length 2, and lengthy had length 2\")",122],["assert(caught1.getMessage.startsWith(\"Map(\"))",120],["assert(caught1.getMessage === \"lengthy did not have length 55, and lengthy did not have length 22\")",66],["assert(caught1.failedCodeFileName === Some(\"ShouldBeShorthandForAllSpec.scala\"))",71],["assert(caught1.getMessage === \"sizey had size 2, and sizey had size 2\")",108]],"useCount":12878},{"word":"caught2","context":[["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught2.getMessage === \"lengthy did not have length 55, and lengthy did not have length 22\")",66],["assert(caught2.getMessage === \"lengthy did not have length 3, but lengthy had length 2\")",66],["assert(caught2.getMessage === \"lengthy did not have length 5\")",66],["assert(caught2.getMessage === \"sizey had size 2, and sizey had size 2\")",108],["assert(caught2.getMessage === \"lengthy had length 2, and lengthy had length 2\")",122],["assert(caught2.getMessage === \"a test tag was null\")",137],["val caught2 = intercept[NullPointerException] {",138],["assert(caught2.failedCodeFileName === Some(fileName))",456],["val caught2 = intercept[TestFailedException] {",5192]],"useCount":9131},{"word":"caught3","context":[["val caught3 = intercept[TestFailedException] {",4858],["assert(caught3.getMessage === \"sizey did not have size 3, but sizey had size 2\")",60],["assert(caught3.getMessage === \"sizey did not have size 5\")",60],["assert(caught3.getMessage === \"lengthy did not have length 55, and lengthy did not have length 22\")",66],["assert(caught3.getMessage === \"lengthy did not have length 5\")",66],["assert(caught3.getMessage === \"lengthy did not have length 3, but lengthy had length 2\")",66],["assert(caught3.getMessage === \"sizey had size 2, and sizey had size 2\")",108],["assert(caught3.getMessage === \"lengthy had length 2, and lengthy had length 2\")",122],["assert(caught3.failedCodeFileName === Some(fileName))",444],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792]],"useCount":8248},{"word":"cause","context":[["val cause = e.getCause",56],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["val causeThrowable = e.cause.get",211],["assert(e.cause.isDefined)",211],["cause match {",123],["assert(cause.failedCodeLineNumber.get == thisLineNumber - 15)",80],["if (cause == null)",79],["override def exceptionCaught(ctx: ChannelHandlerContext, cause: Throwable): Unit = {",77],["val cause = causeThrowable.asInstanceOf[DuplicateTestNameException]",76],["cause: Option[Throwable],",72]],"useCount":6249},{"word":"cc","context":[["val c3 = cc(e3)",338],["val cc = new ComponentCollection",595],["val c2 = cc(e2)",386],["val c1 = cc(e1)",354],["import cc.factorie._",346],["val pr = new Problem(cc)",327],["import cc.factorie.variable._",256],["val c4 = cc(e4)",224],["import cc.factorie.app.nlp._",215],["import cc.factorie.la._",204]],"useCount":9639},{"word":"cfg","context":[["import kr.ac.kaist.jsaf.analysis.cfg.CFG",129],["import kr.ac.kaist.jsaf.analysis.cfg._",124],["override def getInstance(cfg: CFG): Option[Loc] = Some(newRecentLoc())",149],["cfg",172],["val cfg = KafkaConfig.fromProps(props)",172],["val addr2 = cfg.getAPIAddress(addr_env, 1)",200],["val PureLocalLoc = cfg.getPureLocal(cp)",438],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["val addr1 = cfg.getAPIAddress(addr_env, 0)",482]],"useCount":6577},{"word":"ch","context":[["import ch.usi.inf.l3.sana",361],["import ch.openolitor.core.models._",79],["import ch.openolitor.stammdaten.models._",76],["ch",119],["import ch.qos.logback.classic.spi.ILoggingEvent",128],["ch match {",194],["* \\____/ .___/\\___/_/ /_/\\____/_/_/\\__/\\____/_/        http://openolitor.ch   *",275],["import ch.qos.logback.classic.{Level, LoggerContext}",297],["import ch.qos.logback.classic.Level",113],["putChar(ch)",319]],"useCount":10612},{"word":"chain","context":[["val chain = for {",727],["chain.successful {",412],["beWorkflow(chain(",334],["beWorkflow(chain[Workflow](",297],["header.checkStep (req2, response, chain, 1)",266],["header.checkStep (req1, response, chain, 0)",266],["validator.validate(req, response, chain)",190],["chain(",151],["\"X-TESTO\"->List(\"boo\"))),response,chain)",166],["),response,chain), 400)",150]],"useCount":7381},{"word":"change","context":[["</change>",60],["* @param force if the change has to be forced. A running upgrade process will be halted and the new one is started.",64],["\"controller was elected with epoch %d. Aborting state change by this controller\".format(controllerEpoch))",70],["* To change this template, choose Tools | Templates",93],["* To change this template use File | Settings | File Templates.",967],["//This class was generated by build script, please don't change this",186],["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["change match {",129],["* To change this template file, choose Tools | Templates",118],["* To change this template, choose Tools | Template Manager",113]],"useCount":7292},{"word":"channel","context":[["import io.netty.channel.ChannelHandler.Sharable",132],["import io.netty.channel.nio.NioEventLoopGroup",165],["import org.jboss.netty.channel._",480],["channel.disconnect()",239],["channel.close()",237],["channel = null",137],["import io.netty.channel._",230],["import io.netty.channel.socket.SocketChannel",161],["if (channel != null) {",138],["import io.netty.channel.ChannelHandlerContext",144]],"useCount":9135},{"word":"charset","context":[["import java.nio.charset._",116],["header(\"Content-Type\") should equal(\"application/json; charset=utf-8\")",94],["import java.nio.charset.{Charset, StandardCharsets}",82],["<representation mediaType=\"text/plain;charset=UTF8\"/>",75],["header(\"Content-Type\") should equal(\"application/xml; charset=utf-8\")",74],["import java.nio.charset.CodingErrorAction",58],["import java.nio.charset.StandardCharsets.UTF_8",253],["charset: Option[String] = None,",113],["import java.nio.charset.StandardCharsets",1071],["import java.nio.charset.Charset",1952]],"useCount":6763},{"word":"check","context":[["bets.check",455],[".check(status.is(200))",569],[".check(status.is(200)))",656],["check(",733],["check {",1185],[".check(status.is(201))",390],[".check(headerRegex(\"Set-Cookie\", \"CSRF-TOKEN=(.*); [P,p]ath=/\").saveAs(\"csrf_token\")))",353],[".check(status.is(401))",199],[".check(",283],["// check",289]],"useCount":26817},{"word":"checkAnswer","context":[["def checkAnswer(df: DataFrame, expectedAnswer: Seq[Row]): Option[String] = {",12],["def checkAnswer(df: DataFrame, expectedAnswer: java.util.List[Row]): String = {",11],["checkAnswer(df, expectedAnswer.collect())",12],["checkAnswer(df, Seq(expectedAnswer))",13],["checkAnswer(TestHbase.sql(\"select * from testblk\"),",20],["checkAnswer(sql(",84],["checkAnswer(",6628]],"useCount":6780},{"word":"checker","context":[["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281]],"useCount":12678},{"word":"children","context":[["f(toJs, js.Array(children: _*)).asInstanceOf[ReactComponentU_]",165],["children = Vector(",739],["@exclude extraAttributes: U[js.Object] = undefined)(children: ReactNode*) : ReactElement  = {",97],["for (child <- children) {",119],["f(props, children.toJsArray).asInstanceOf[ReactComponentU_]",163],["def apply(children: TagMod*): ReactComponentU_ = {",164],["children = Nil,",620],["} children(",208],["def apply(children: ReactNode*) = {",208],["extraAttributes: U[js.Object] = undefined)(children: ReactNode*)  = {",194]],"useCount":7967},{"word":"chk","context":[["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281]],"useCount":8178},{"word":"class","context":[["class TestSpec extends WordSpec {",733],["class MyReporter extends Reporter {",553],["class A {",1230],["|class A {",486],["class Foo {",543],["* <pre class=\"stREPL\">",1661],["* <pre class=\"stHighlight\">",15662],["class A",350],["class Fixture {",362],["class Test {",371]],"useCount":124267},{"word":"classOf","context":[["@throws(classOf[InterruptedException])",610],["@throws(classOf[Exception])",1579],[".ofType(classOf[String])",1561],["@throws(classOf[IOException])",1799],["@RunWith(classOf[JUnitRunner])",11522],[".ofType(classOf[java.lang.Integer])",1023],["classOf[String],",794],["@scala.throws[Exception](classOf[Exception])",306],["@throws(classOf[TimeoutException])",332],["classOf[Integer],",735]],"useCount":47566},{"word":"clazz","context":[["if (clazz != null) {",57],["if (!isInheritor(clazz, fqn)) return None",63],["case Some((clazz, subst)) =>",69],["findChildrenByClass[T](clazz)",45],["clazz",74],["val MetaDataItem(qualified, nullable, clazz) = meta",96],["case Some(clazz) =>",114],["case clazz: PsiClass =>",119],["case clazz: ScClass =>",86],["clazz match {",598]],"useCount":7282},{"word":"clear","context":[["cache.clear()",121],["override def clear() {",125],["buffer.clear",123],["def clear() = {",121],["em.clear()",164],["out.clear",200],["def clear(): Unit = {",266],["buffer.clear()",337],["clear()",450],["def clear() {",513]],"useCount":10757},{"word":"client","context":[["import spray.client.pipelining._",566],["withRedisClient { client =>",662],["client.execute {",859],["client",446],["client =>",438],["val resp = client.execute {",360],["import org.elasticsearch.client.Client",343],["implicit client =>",337],["import net.minecraft.client.Minecraft",334],["client.close()",1201]],"useCount":44151},{"word":"close","context":[["server.close()",534],["stream.close()",541],["def close() {",1051],["client.close()",1201],["out.close()",1403],["in.close()",843],["writer.close()",1976],["close()",758],["producer.close()",752],["reader.close()",688]],"useCount":49414},{"word":"cls","context":[["if (cls ne null) ctx.append(\" class=\\\"\"+h(cls)+\"\\\"\")",106],["if (cls ne null) ctx.append(\" class=\\\"\"+h(cls)+\"\\\"\")",106],["case New(cls, ctor, args) =>",91],["case AsInstanceOf(expr, cls) =>",80],["case IsInstanceOf(expr, cls) =>",68],["case StoreModule(cls, value) =>",67],["cls",116],["case ApplyStatically(receiver, cls, method, args) =>",64],["case ApplyStatic(cls, method, args) =>",64],["mixType(cls)",62]],"useCount":8219},{"word":"cluster","context":[["freshRack, // list of tasks register in the cluster",111],["// create my cluster client solely based on a zk client and a path",258],["package spark.scheduler.cluster",93],["import akka.cluster.ClusterEvent._",137],["cluster.close()",114],["val cluster = Cluster(context.system)",129],["Await.result(mycluster1.ready) // give it sometime for the cluster to get the initial set of memberships",187],["Await.result(mycluster2.ready) // give it sometime for the cluster to get the initial set of memberships",187],["import akka.cluster.Cluster",411],["import kafka.cluster.Broker",315]],"useCount":10903},{"word":"cmd","context":[["val cmd = new ArrayBuffer[String]",77],["Full(() => LiftRules.jsArtifacts.hide(\"ajax-loader\").cmd)",98],["executor = \"//cmd\",",276],["Full(() => LiftRules.jsArtifacts.show(\"ajax-loader\").cmd)",98],["cmd match {",173],["cmd = Some(\"true\"),",104],["if (BuildConfig.DEBUG) Log.d(TAG, cmd.mkString(\" \"))",105],["cmd = Some(\"cmd\"),",110],["cmd = Some(\"foo\"),",161],["cmd = Some(\"cmd\"),",110]],"useCount":7975},{"word":"code","context":[["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["val code = \"\"\"",462],["* in the main documentation for trait <code>FlatSpec</code>.",405],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["compileCodeSnippet(code)",525],["* The interactive user interfaces in modified source and object code versions",539],["* disclosing the source code of your own applications.",540],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["val code =",1046]],"useCount":138476},{"word":"codec","context":[[".clientBuilder(ClientBuilder().hostConnectionLimit(1).codec(Memcached()).failFast(false))",480],["import org.jboss.netty.handler.codec.http._",433],["import org.apache.commons.codec.binary.Base64",696],["import org.apache.commons.codec.digest.DigestUtils",194],["import org.apache.commons.codec.binary.Hex",174],[".codec(Http())",173],[".codec(codec)",158],["package com.twitter.finagle.http.codec",134],[".codec(codec)",158],["def codec[Req1, Rep1](",132]],"useCount":9889},{"word":"col","context":[["\"val col = \" + col + \"\\n\" +",292],["\"val col = \" + col + \"\\n\" +",292],["col += 1",261],["var col = 0",235],["\"in \" + col))",211],["\"in \" + decorateToStringValue(prettifier, col)))",160],["val itr = col.toIterator",125],["*  @param col  the column to set",122],["\"in \" + decorateToStringValue(col)))",306],["val col = colFun(Set(1, 2, 3))",518]],"useCount":10500},{"word":"collect","context":[["}.collect {",145],[".collect()",1150],["val result2 = result collect {",571],["}.collect()",253],[".collect {",215],["}.collect.toSeq.sortBy(_._1)",215],["val result = someCass.collect",213],[".collect",196],["import com.google.common.collect.Lists",165],["val leftSide = source.collect",146]],"useCount":12333},{"word":"collection","context":[["import scala.collection.JavaConverters._",13821],["import scala.collection.immutable.Seq",1718],["import collection.JavaConversions._",1806],["import scala.collection._",2144],["import scala.collection.mutable.HashMap",2382],["import scala.collection.mutable.ListBuffer",4804],["import scala.collection.mutable.ArrayBuffer",7092],["import scala.collection.mutable",12078],["import scala.collection.JavaConversions._",15808],["import scala.collection.immutable",1689]],"useCount":114809},{"word":"color","context":[["val colorOuter: js.UndefOr[String | js.Object] = color",300],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["color: Color,",136],["val color: js.UndefOr[String | js.Object] = js.undefined",300],["override val color: js.UndefOr[String | js.Object] = colorOuter",300],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192]],"useCount":7083},{"word":"column","context":[["def name = column[String](\"name\")",363],["def id = column[Int](\"id\")",354],["*  @param jr  the column range",349],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["def title = column[String](\"title\")",144],["def a = column[Int](\"a\")",158],["*  last column augmented by 1.",190],["def id = column[Int](\"id\", O.PrimaryKey)",215],["*  @param j  the column index",275]],"useCount":21747},{"word":"com","context":[["import com.intellij.openapi.project.Project",1985],["import com.twitter.util.Future",1912],["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["import com.typesafe.scalalogging.LazyLogging",1793],["import com.intellij.psi._",1694],["import com.highcharts.HighchartsUtils._",1316],["import com.highcharts.CleanJsObject",1312],["import com.typesafe.config.Config",3441],["import com.typesafe.config.ConfigFactory",4975],["import com.twitter.conversions.time._",2236]],"useCount":322339},{"word":"command","context":[["* Companion object that does initialization of the command.",70],["command match {",273],["|  command {",238],["val command =",156],["* @param expectedExitCode (optional) the expected exit code for the command",120],["command.getType match {",98],["import com.intellij.openapi.command.CommandProcessor",97],["* @param callback The command result callback",88],["command.getEnvironment.getVariablesList.asScala.toList.map(v => v.getName -> v.getValue).toMap",84],["* Invoked when some partitions are reassigned by the admin command",74]],"useCount":8902},{"word":"common","context":[["package common",665],["import net.liftweb.common._",1874],["import common._",2095],["import kafka.common.TopicAndPartition",606],["import com.google.common.io.Files",554],["import kafka.common._",484],["import net.liftweb.common.Box",426],["import net.liftweb.common.Loggable",406],["import _root_.net.liftweb.common._",405],["import net.liftweb.common.Full",361]],"useCount":41143},{"word":"commons","context":[["import org.apache.commons.lang.StringUtils",215],["package com.avsystem.commons",259],["import com.mongodb.casbah.commons.MongoDBObject",266],["import org.beangle.commons.collection.Collections",353],["import org.beangle.commons.lang.Strings",357],["import org.apache.commons.lang3.StringUtils",508],["import org.apache.commons.codec.binary.Base64",696],["import org.apache.commons.io.IOUtils",873],["import org.apache.commons.io.FileUtils",1486],["import org.apache.commons.logging.LogFactory",201]],"useCount":14426},{"word":"compiler","context":[["import org.neo4j.cypher.internal.compiler.v2_3._",376],["import org.neo4j.cypher.internal.compiler.v2_3.test_helpers.CypherFunSuite",348],["compiler.scapegoat.feedback.warnings.size shouldBe 0",268],["package compiler",247],["/* NSC -- new Scala compiler",184],["import org.neo4j.cypher.internal.compiler.v2_3.symbols._",178],["package com.asakusafw.spark.compiler",174],["compiler.scapegoat.feedback.warnings.size shouldBe 1",172],["package jgo.tools.compiler",129],["* The main purpose of this method implementation is to render a compiler error an attempt",128]],"useCount":12215},{"word":"complete","context":[["val complete = new CountDownLatch(1)",96],["complete(",103],["case Failure(ex) => complete(InternalServerError, s\"An error occurred: ${ex.getMessage}\")",103],["def complete(denot: SymDenotation)(implicit ctx: Context): Unit = {",105],["complete {",2727],["* underlying futures complete. It fails immediately if any of them",396],["val (activeLookup, _) = complete(1, CompletionType.BASIC)",301],["val (activeLookup, _) = complete(1, CompletionType.SMART)",116],["import complete.DefaultParsers._",116],["promise.complete(Success(succeed))",113]],"useCount":11188},{"word":"concurrent","context":[["import java.util.concurrent.atomic.AtomicInteger",2154],["import scala.concurrent.Future",15060],["import scala.concurrent.duration._",18263],["import scala.concurrent.{ExecutionContext, Future}",2561],["import scala.concurrent._",2924],["import scala.concurrent.ExecutionContext",3290],["import scala.concurrent.duration.Duration",3344],["import scala.concurrent.Await",4064],["import java.util.concurrent.TimeUnit",4323],["import scala.concurrent.ExecutionContext.Implicits.global",8774]],"useCount":108369},{"word":"conf","context":[["val conf = new SparkConf",162],["import org.apache.hadoop.conf.Configuration",2106],["val sc = new SparkContext(conf)",2072],["val conf = new SparkConf()",1023],["conf",327],["sc = new SparkContext(conf)",302],["val conf = new Configuration()",212],["p.println(conf)",169],["import org.apache.hadoop.hive.conf.HiveConf",230],["conf: SparkConf,",162]],"useCount":22018},{"word":"config","context":[["val config = ConfigFactory.load()",526],["config",551],["config,",580],["import com.typesafe.config._",633],["package com.highcharts.config",679],["import com.typesafe.config.{Config, ConfigFactory}",779],["import com.typesafe.config.Config",3441],["import com.typesafe.config.ConfigFactory",4975],["config: Config,",484],["package com.highstock.config",468]],"useCount":61758},{"word":"configuration","context":[["* @param configuration The Play configuration.",312],["* of client application activation, with optional configuration parameters",97],["* @param configuration The Play configuration.",312],["/** ********* Consumer coordinator configuration ***********/",102],["import com.signalcollect.configuration.ExecutionMode",122],["* val configuration = Configuration.load()",149],["/** ********* Offset management configuration ***********/",156],["/** ********* Controlled shutdown configuration ***********/",156],["/** ********* Replication configuration ***********/",156],["configuration: Configuration,",157]],"useCount":9610},{"word":"conn","context":[["val stmt = conn.createStatement()",125],["conn.withSessionDo { session =>",790],["conn.close()",488],["conn,",94],["conn.setDoOutput(true)",95],["conn.setAutoCommit(false)",106],["conn =>",122],["conn.commit()",250],["implicit conn =>",146],["conn",138]],"useCount":7882},{"word":"connection","context":[["connection expectMsg subscribeTo",108],["DB.withConnection { implicit connection =>",656],["val connection = sender()",100],["backend.connection.setAutoCommit(false)",100],["connection.close()",389],[".connection(\"keep-alive\")",328],["connection expectMsg readEvents(0)",222],["implicit connection =>",161],["connection",152],["connection =>",109]],"useCount":11618},{"word":"constructor","context":[["case object Nil extends List[Nothing] // A `List` data constructor representing the empty list",100],["} // constructor",406],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["/* constructor or object*/",197],["// 4) constructor and deconstructor",196],["// 6) smart constructor and deconstructor",196],["* @constructor",180],["/* constructor */",175],["} // primary constructor",107],["* The <code>run</code> method takes a <code>Filter</code>, whose constructor takes an optional",61]],"useCount":6281},{"word":"consumer","context":[["consumer",98],["import org.apache.kafka.clients.consumer.ConsumerConfig",93],["val response = consumer.fetch(request)",98],["// create a consumer",126],["import kafka.consumer.ConsumerConfig",185],["import kafka.consumer._",190],["import org.apache.kafka.clients.consumer.KafkaConsumer",76],["consumer.close()",201],["import kafka.consumer.SimpleConsumer",261],["package kafka.consumer",289]],"useCount":9506},{"word":"contain","context":[["it(\"should do nothing when RHS contain duplicated value\") {",114],["features must contain(\"bill\", \"bob\")",93],["* resulting RDD will either contain all pairs (k, (v, Some(w))) for w in `other`, or the",96],["* resulting RDD will either contain all pairs (k, (Some(v), w)) for v in `this`, or the",96],["features must contain(\"alice\", \"bill\")",102],["features must contain(\"bill\", \"bob\", \"charles\")",125],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["it(\"should allow RHS to contain duplicated value\") {",270]],"useCount":17558},{"word":"contains","context":[["def contains(s: Set, elem: Int): Boolean = s(elem)",87],["* contains nested suites, the result of invoking <code>toString</code> on each",98],["// Funnel the data through the parent pipeline that contains data to",120],["\"Response Code is allowed\" |: (possibleResponseTypes.contains(expectedCode) ?= true),",88],["s\"Contains error: $m in ${contentAsString(path)}\" |:(contentAsString(path).contains(m) ?= true)",88],["* Indicates whether a set contains a given element.",89],["* its `contains` predicate.",90],["* For each key k in `this` or `other`, return a resulting RDD that contains a tuple with the",96],["* For each key k in `this` or `other1` or `other2`, return a resulting RDD that contains a",96],["val xs = for (i <- -bound to bound if contains(s, i)) yield i",88]],"useCount":20245},{"word":"content","context":[["import android.content.Context",955],["Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")",509],["import android.content.Intent",423],["val content =",290],["content",249],["content: String,",236],["import android.content.{Context, Intent}",164],["import android.content.DialogInterface",122],["content,",123],["import android.content._",161]],"useCount":15835},{"word":"context","context":[["context.stop(self)",2351],["implicit val system = context.system",312],["import context.system",335],["context",372],["def actorRefFactory = context",380],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["context stop self",636],["import context._",846],["import context.dispatcher",2066],["implicit val ec = context.dispatcher",317]],"useCount":44003},{"word":"control","context":[["import scala.util.control.ControlThrowable",171],["import scala.util.control.Exception.catching",108],["package org.orbeon.oxf.xforms.control",112],["import scala.util.control.Breaks",124],["package org.orbeon.oxf.xforms.control.controls",127],["import scala.util.control.Exception.allCatch",169],["import scala.util.control.NoStackTrace",346],["import scala.util.control.Exception._",439],["import scala.util.control.Breaks._",662],["import scala.util.control.NonFatal",3207]],"useCount":9995},{"word":"controller","context":[["package gitbucket.core.controller",157],["package controller",186],["package skinny.controller.feature",162],["import io.prediction.controller.Params",159],["val controllerContext = controller.controllerContext",157],["package skinny.controller",140],["import uk.gov.hmrc.play.frontend.controller.FrontendController",115],["import org.apache.predictionio.controller.Params",117],["import kafka.controller.KafkaController",133],["package kafka.controller",138]],"useCount":12301},{"word":"controllers","context":[["import collins.controllers.actions.SecureAction",99],["import collins.controllers.actions.RequestDataHolder",102],["package controllers.api",133],["package controllers.admin",134],["import de.zalando.play.controllers.WriteableWrapper.anyContentAsMultipartFormWritable",176],["import controllers.routes",195],["import controllers.helpers.FakeRequestHelper",220],["import controllers._",537],["package controllers",6274],["import collins.controllers.SecureController",97]],"useCount":11909},{"word":"convert","context":[["import org.neo4j.cypher.internal.compiler.v2_3.ast.convert.commands.ExpressionConverters",70],["import scala.collection.convert.decorateAsScala._",71],["import scala.collection.convert.WrapAsScala._",77],["* @param msg  the message object. `toString()` is called to convert it",80],["import scala.collection.convert.wrapAsScala._",80],["// This is the least safe way to convert as an error is thrown if it fails",108],["val converted = UpConverter.convert(xml)",119],["it should \"properly convert to all supported Units of Measure\" in {",133],["\"convert to the correct string\" in {",144],["convert(\"\"\"",189]],"useCount":6251},{"word":"copy","context":[["def copy(",349],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["copy(",386],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["compareTokenCodes(tree, tree.copy())",513],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",260],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",224],["def copyWithContext(c: Context) = copy(ctx = c)",196],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",180],["copy",144]],"useCount":24195},{"word":"core","context":[["package core",1081],["import io.gatling.core.Predef._",1016],["import core._",852],["import mesosphere.marathon.core.task.Task",486],["import com.yammer.metrics.core.Gauge",336],["import org.openmole.core.workflow.data._",236],["import play.core.j.PlayMagicForJava._",317],["import _root_.io.gatling.core.scenario.Simulation",278],["import com.datastax.driver.core.Row",252],["import securesocial.core._",255]],"useCount":64316},{"word":"correct","context":[["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should have correct negated MatcherResult\") {",111],["\"convert to the correct string\" in {",144],["\"associate the correct error message to the error\" in {",169],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["it(\"should return the correct test count from its expectedTestCount method\") {",193],["def `should have correct MatcherResult` {",261],["def `should have correct negated MatcherResult` {",261],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["correct(\"\"\"",1138]],"useCount":12505},{"word":"count","context":[["assert(data.count() === 1000)",252],["var count = 0",2464],["count += 1",2249],["count",787],["count = count + 1",322],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["count = count + 1",322]],"useCount":33487},{"word":"cra","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["import com.cra.figaro.language._",599],["* See http://www.cra.com or email figaro@cra.com for information.",856],["* Created By:      Avi Pfeffer (apfeffer@cra.com)",478],["* Created By:      Brian Ruttenberg (bruttenberg@cra.com)",147],["import com.cra.figaro.algorithm.factored._",175],["import com.cra.figaro.library.compound._",189],["import com.cra.figaro.algorithm.sampling._",208],["import com.cra.figaro.util._",229],["import com.cra.figaro.algorithm._",268]],"useCount":6846},{"word":"create","context":[["// create topic",344],["* licence, when you create a Related Module, this Related Module is",1268],["def create(",385],[".create()",284],["// create my cluster client solely based on a zk client and a path",258],["// create path and map variables",245],["// create the topic",237],["// create brokers",217],["dataFileWriter.create(record.getSchema(), file);",167],["* Given the driver type, return the string required to create the column in the database",139]],"useCount":21251},{"word":"created","context":[["\"when created\" - {",132],["// fill the created matrix with values",103],["describe(\"when created\") {",133],["Then(\"The app is created\")",127],["// NOTE: Expect the request to be created with a unique id",124],["* Return an RDD created by piping elements to a forked external process.",91],["<created-by>{creatorString}</created-by>",89],["<created-by>{creatorString}</created-by>",89],["*        or a <code>Throwable</code> created to capture stack trace information about the problem.",139],["* that is created or manipulated using TA Buddy.",534]],"useCount":8194},{"word":"ct","context":[["import uk.gov.hmrc.ct.box._",641],["package uk.gov.hmrc.ct.computations",492],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219],["package uk.gov.hmrc.ct.ct600.v2",209],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176]],"useCount":8592},{"word":"ctx","context":[["implicit ctx => {",376],["val (h_1, ctx_1) = Helper.Oldify(h, ctx, addr1)",354],["implicit val req = ctx.body",314],["ctx",259],["visitChildren(ctx)",227],["* @param ctx the parse tree",446],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["val ctx = new Ctx",587],["import ctx._",1379]],"useCount":48899},{"word":"current","context":[["* the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.",172],["current match {",137],["* the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.",172],["db = lila.db.Env.current,",148],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["val current = get",434],["if (!compareAndSet(current, update))",488],["current",503],["import play.api.Play.current",3657],["* the current reporter immediately. If invoked at any other time, it will",263]],"useCount":22609},{"word":"currentTimeMillis","context":[["val t1 = System.currentTimeMillis",166],["val t0 = System.currentTimeMillis()",172],["val time = System.currentTimeMillis()",199],["val end = System.currentTimeMillis()",261],["val now = System.currentTimeMillis",298],["val now = System.currentTimeMillis()",360],["val startTime = System.currentTimeMillis",537],["val start = System.currentTimeMillis",665],["val startTime = System.currentTimeMillis()",676],["val start = System.currentTimeMillis()",755]],"useCount":11418},{"word":"d","context":[["case Def(d) => unapply(d)",1722],["case Def(d) => unapply(d)",1722],["d match {",323],["assert(d.theTestThatCalled)",211],["val f = new Suites(a, b, c, d, e)",196],["assert(!d.theTestThisCalled)",383],["assert(d.expectedTestCount(Filter(None, Set(\"org.scalatest.SlowAsMolasses\"))) === 1)",179],["d: D Or Every[ERR],",180],["assert(d.expectedTestCount(Filter()) === 3)",182],["d",599]],"useCount":46907},{"word":"data","context":[["val ad = a.data",330],["import play.api.data.Forms._",2020],["import play.api.data.Field",326],["data",1085],["import play.api.data.Form",1258],["import play.api.data._",1159],["data match {",344],["import play.api.data.validation.ValidationError",485],["import cats.data.Xor",537],["import play.data._",325]],"useCount":76142},{"word":"date","context":[["*  @date    Sun Sep 16 14:09:25 EDT 2012",73],["// Type: date-time-iso8601",74],["date\"\"\"",77],["* @throws CalendricalException if the result exceeds the supported date range",79],["\"be equivalent to inputType with date type\" in {",97],["date,",228],["val date = new DateTime",207],["date",177],["* @throws DateTimeException if the result exceeds the supported date range",132],["val date = new Date()",100]],"useCount":9283},{"word":"db","context":[["db.close()",418],["import lila.db.dsl._",292],["package db",353],["db.withSession { implicit session =>",588],["import play.api.db.slick.Config.driver.simple._",569],["import play.api.db._",457],["$read(Collection(\"db\", \"zips\")),",448],["import play.api.db.DB",436],["import im.actor.server.db.DbExtension",390],["$read(collection(\"db\", \"zips\")),",420]],"useCount":24804},{"word":"de","context":[["package de.sciss.fscape",265],["* contact@sciss.de",79],["import de.unihamburg.vsis.sddf.reading.Tuple",81],["* @author <a href=\"mailto:chr_reisinger@yahoo.de\">Christian Reisinger</a>",98],["import de.sciss.file._",133],["import de.zalando.play.controllers.WriteableWrapper.anyContentAsMultipartFormWritable",176],["*\tcontact@sciss.de",209],["* @author Florian Leibert (flo@leibert.de)",220],["*  contact@sciss.de",539],["* @author Chris de Vreeze",681]],"useCount":10885},{"word":"debug","context":[["logger.debug(\"\\nStackTrace:\" + stackTrace)",125],["package org.scalaide.debug.internal.expression",134],["logger.debug(",152],["log.debug(",188],["if (debug) {",267],["logger.debug(\"\", e)",305],["logger.debug(\"StackTrace:\"+stackTrace)",122],["var debug = false",80],["import org.scalaide.debug.internal.expression.Names.Java",79],["logger.debug(s\"Successfully inserted with LastError: $lastError\")",77]],"useCount":11900},{"word":"def","context":[["def main(args: Array[String]) {",11494],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def name: String",1791],["def run() {",1874],["override def toString = {",2182],["override def toString: String = {",2286],["override def run() {",2601],["def apply(",2624],["def receive = {",6615],["def main(args: Array[String]): Unit = {",6748]],"useCount":717785},{"word":"default","context":[["import reactivemongo.api.collections.default.BSONCollection",176],["private val prettifier = Prettifier.default",265],["default = None)",191],["case None => default",274],["case default => if (in.skipField(default) == true) doParse(partialMessage)",296],["import upickle.default._",211],["case default => if (in.skipField(default) == true) doParse(partialMessage)",296],["case _ => default",521],["default",618],["* <p>The default implementation does nothing.</p>",254]],"useCount":23279},{"word":"defined","context":[["* <code>tagsToExclude</code> <code>Set</code>. If <code>tagsToInclude</code> is defined, only tests",76],["items shouldBe defined",60],["if (! isSquare) flaw (\"~^\", \"only defined on square matrices\")",55],["* the two functions defined above.",66],["defined(",63],["it(\"should execute one test when run is called with a defined testName\") {",193],["if (propertyList.isEmpty) throw new IllegalStateException(s\"No 'produces' defined for the $url\")",176],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["System.err.println(\"* Warning: Semantics of the DOM API function '\"+fun+\"' are not defined.\")",98],["*   <td>The point object. The point name, if defined, is available",77]],"useCount":7781},{"word":"delete","context":[["def delete() {",121],["delete {",302],["f.delete()",234],["file.delete",157],["Await.result(client.delete(\"foo\"))",100],["* @param requestId The id of the request used to retrieve and delete it",98],["tempFile.delete()",81],[".delete",84],["dir.delete()",97],["file.delete()",583]],"useCount":11463},{"word":"depth","context":[["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS is empty\") {",68],["depth += 1",74],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["it(\"should fire TestFailed event with correct stack depth info when test failed\") {",86],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["def `should throw TestFailedException with correct stack depth when xs is not sorted` {",86],["var depth = 0",55],["*  professionals having in-depth computer knowledge. Users are therefore",53],["depth: Int,",86]],"useCount":7145},{"word":"description","context":[["def description: String",165],["description,",233],["* No description given",175],["description: Option[String] = None,",215],["description: Option[String],",350],["(__ \\ \"description\").readNullable[String] and",153],["description: _root_.scala.Option[String] = None,",146],["case Some(x) => play.api.libs.json.Json.obj(\"description\" -> play.api.libs.json.JsString(x))",145],["* TODO: Add description.",143],["description: String,",913]],"useCount":11150},{"word":"dir","context":[["if (dir ne null) ctx.append(\" dir=\\\"\"+h(dir)+\"\\\"\")",106],["withTempDir { dir =>",103],["dir: U[String] = undefined,",452],["dir.foreach(v => props.updateDynamic(\"dir\")(v))",339],["dir.foreach(v => props.updateDynamic(\"dir\")(v))",339],["dir",279],["dir.mkdirs()",276],["withTempPath { dir =>",122],["if (dir ne null) ctx.append(\" dir=\\\"\"+h(dir)+\"\\\"\")",106],["if (dir ne null) ctx.append(\" dir=\\\"\"+h(dir)+\"\\\"\")",106]],"useCount":9888},{"word":"dispatcher","context":[["implicit val executionContext = system.dispatcher",180],["implicit lazy val ec = App.system.dispatcher",88],["implicit val ec: ExecutionContext = system.dispatcher",149],["override implicit val ec: ExecutionContext = actorSystem.dispatcher",119],["import actorSystem.dispatcher",102],["implicit val ec = system.dispatcher",420],["import context.dispatcher",2066],["import system.dispatcher",1267],["implicit val ec = context.dispatcher",317],["implicit val executor = system.dispatcher",95]],"useCount":7487},{"word":"distributed","context":[["* See the NOTICE file distributed with this work for additional",769],["import org.apache.spark.mllib.linalg.distributed.RowMatrix",121],["* See the LICENCE.txt file distributed with this work for additional",344],["* See the notice.md file distributed with this work for additional",637],["* See the NOTICE file distributed with this work for additional information",112],["// Jubatus: Online machine learning framework for distributed environment",111],["distributed with this work for additional information",106],["// v. 2.0. If a copy of the MPL was not distributed with this file, You can",106],["* distributed with this work for additional information",4340],["// See the LICENCE.txt file distributed with this work for additional",740]],"useCount":8590},{"word":"distribution","context":[["<distribution>repo</distribution>",450],["*    and/or other materials provided with the distribution.",906],["* which accompanies this distribution, and is available at",935],["* documentation and/or other materials provided with the distribution.",943],["* accompanies this distribution and is available at",1026],["* which accompanies this distribution and is available at",1232],["*       documentation and/or other materials provided with the distribution.",322],["documentation and/or other materials provided with the distribution.",300],["<distribution>repo</distribution>",450],["*     documentation and/or other materials provided with the distribution.",491]],"useCount":10715},{"word":"div","context":[["div(",304],["|</div>",160],["</div>",6204],["<.div(",965],["<div class=\"container\">",132],["<div>",915],["<div class=\"row-fluid\">",189],["<div class=\"row\">",167],["<div class=\"span12\">",212],["<div class=\"evloglmargin\">",246]],"useCount":15673},{"word":"do","context":[["* Automatically generated file. Please do not edit.",1311],["* do.",417],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["do {",2558],["* furnished to do so, subject to the following conditions:",2674],["// do nothing",238],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["case _ => // do nothing",253],["furnished to do so, subject to the following conditions:",262],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286]],"useCount":31814},{"word":"doc","context":[["writeDoc(w, doc)",105],["* @tparam T type of the doc",89],["val sizeElemOption = (doc.documentElement \\\\ (_.localName == \"size\")).headOption",88],["</doc>",468],["<doc>",456],["def doc =",456],["doc",372],["lazy val doc = Jsoup.parse(view.body)",231],["lazy val doc = Jsoup.parse(bodyOf(result))",111],["val doc =",79]],"useCount":10763},{"word":"documentation","context":[["*     documentation and/or other materials provided with the distribution.",491],["*       documentation and/or other materials provided with the distribution.",322],["* in the main documentation for trait <code>FlatSpec</code>.",405],["documentation and/or other materials provided with the distribution.",300],["* of the main documentation for class <code>Or</code>.",130],["*    documentation and/or other materials provided with the distribution.",127],["* <a href=\"#sharedFixtures\">Shared fixtures</a> section in the main documentation for this trait.",124],["* documentation and/or other materials provided with the distribution.",943],["* documentation that, without modification of the Source Code, enables",1872],["* documentation and/or other materials provided with the",106]],"useCount":7590},{"word":"does","context":[["<console>:15: error: org.scalatest.words.NewContainWord does not take parameters",100],["it(\"should throw TestFailedException if object length does not match specified length\") {",72],["* method that allows a subclass of a class which does not",77],["* to a class, and when it does, the fully qualified name of that class should be reported by passing a",86],["require(__field.getContainingType() == descriptor, \"FieldDescriptor does not match message type.\")",97],["\"the key does not exist\" should {",130],["require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), \"FieldDescriptor does not match message type.\")",172],["* <p>The default implementation does nothing.</p>",254],["it(\"should throw TestFailedException if object size does not match specified size\") {",72],["it(\"should do nothing if object size does not match and used with should not\") {",72]],"useCount":11070},{"word":"domain","context":[["import com.normation.inventory.domain.NodeId",519],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import com.normation.inventory.domain._",178],["import com.normation.cfclerk.domain._",191],["import com.normation.rudder.domain.policies.DirectiveId",213],["import com.normation.rudder.domain.policies.RuleId",240],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import com.normation.rudder.domain.policies._",259],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331]],"useCount":12666},{"word":"driver","context":[["import slick.driver.PostgresDriver.api._",712],["import driver.api._",814],["import slick.driver.JdbcProfile",621],["import play.api.db.slick.Config.driver.simple._",569],["import driver.simple._",494],["* @param driver the <code>WebDriver</code> with which to drive the browser",350],["driver,",340],["import scala.slick.driver.H2Driver.simple._",327],["import slick.driver.H2Driver.api._",294],["System.clearProperty(\"spark.driver.port\")",252]],"useCount":16846},{"word":"duration","context":[["import concurrent.duration._",459],["duration: Option[Long],",179],["import akka.util.duration._",441],["import scala.concurrent.duration.Duration.Zero",174],["val result = Await.result(future,duration)",492],["duration = 0,",864],["import scala.concurrent.duration._",18263],["import scala.concurrent.duration.Duration",3344],["import scala.concurrent.duration.FiniteDuration",1647],["import scala.concurrent.duration.DurationInt",1076]],"useCount":35172},{"word":"e","context":[["case e: Exception => {",3905],["throw e",4110],["case e: Throwable =>",3671],["case e =>",1735],["case Failure(e) =>",1514],["case e: Exception =>",5480],["case NonFatal(e) =>",1174],["val e = intercept[TestFailedException] {",1269],["e match {",1295],["e.printStackTrace()",1487]],"useCount":148154},{"word":"e1","context":[["e1.message should be (",216],["pr.add(e1)",257],["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["val e1 = intercept[exceptions.NotAllowedException] {",2223],["e1.failedCodeFileName.get should be (fileName)",1428],["val e1 = intercept[exceptions.TestFailedException] {",781],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["val c1 = cc(e1)",354],["e1.failedCodeLineNumber should be (Some(thisLineNumber - 4))",279],["val e1 = intercept[TestFailedException] {",7354]],"useCount":27244},{"word":"e2","context":[["case e2: Throwable => throw e2",284],["val c2 = cc(e2)",386],["e2.failedCodeLineNumber should be (Some(thisLineNumber - 3))",285],["e2.getCause match {",290],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e2.failedCodeFileName.get should be (fileName)",534],["val e2 = intercept[TestFailedException] {",3429],["val e2 = intercept[exceptions.TestFailedException] {",1046],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["val e2 = intercept[exceptions.NotAllowedException] {",553]],"useCount":15565},{"word":"each","context":[["* @param stepSize Step size to be used for each iteration of gradient descent.",101],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["* contains nested suites, the result of invoking <code>toString</code> on each",98],["// send some messages to each broker",195],["* of the concatenation of the text of each surrounding describer, in order from outside in, and the text of the",122],["* Return a new DStream in which each RDD is generated by applying a function",116],["* from outside in, and the test's  spec text, with one space placed between each item. (See the documenation",99],["* the merging locally on each mapper before sending results to a reducer, similarly to a",113],["* For each test in the <code>testName</code> <code>Set</code>, in the order",111],["* Merge the values for each key using an associative reduce function. This will also perform",113]],"useCount":17894},{"word":"ec","context":[["* @param ec ExecutionContext for async processing",273],["implicit val ec = apiExecutionContext",408],["val pec = ec.prepare()",158],["implicit val ec = system.dispatcher",420],["implicit val ec = context.dispatcher",317],["ec: ExecutionContext,",161],[")(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]",150],[")(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {",150],["implicit val ec = longRunningExecutionContext",237],["ec:      ExecutionContext",151]],"useCount":6714},{"word":"eclipse","context":[["* http://www.eclipse.org/legal/epl-v10.html",689],["import org.eclipse.swt.SWT",265],["import org.eclipse.jgit.api.Git",404],["import org.eclipse.jface.text.IDocument",136],["import org.eclipse.swt.widgets.Composite",144],["import org.eclipse.jetty.webapp.WebAppContext",152],["import org.eclipse.jgit.lib._",155],["import org.eclipse.jetty.server.Server",229],["import org.eclipse.core.runtime.IProgressMonitor",164],["import org.eclipse.core.resources.IFile",142]],"useCount":12514},{"word":"editor","context":[["import com.intellij.openapi.editor.Document",147],["//</editor-fold>",117],["val document = editor.getDocument",132],["PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument)",133],["def isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean = {",141],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["val offset = editor.getCaretModel.getOffset",197],["* and open the template in the editor.",324],["// </editor-fold>",504],["import com.intellij.openapi.editor.Editor",713]],"useCount":7147},{"word":"edu","context":[["import edu.latrobe._",528],["import edu.latrobe.blaze._",388],["import edu.gemini.spModel.core._",165],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import edu.gemini.spModel.obs.context.ObsContext",196],["import edu.gemini.spModel.target.SPTarget",199],["import edu.rice.habanero.benchmarks.{Benchmark, BenchmarkRunner}",328],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["import edu.berkeley.nlp.futile.util.Logger",175]],"useCount":20603},{"word":"elem","context":[["// elem for concrete class",196],["elem match {",607],["elem(",582],["sum += elem",434],["def onNext(elem: Long) = {",428],["elem",263],["def onNext(elem: Int) = {",212],["def onNext(elem: Int): Future[Ack] = {",206],["case elem: scala.xml.Elem =>",136],["received += elem",152]],"useCount":11882},{"word":"element","context":[["* Perform a right outer join of `this` and `other`. For each element (k, w) in `other`, the",96],["element match {",1054],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["val k = partialPivoting (b, i)  // find the maxiumum element below pivot",182],["val k = partialPivoting (u, i)   // find the maxiumum element below pivot",102],["element",148],["def isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean = {",141],["val element = positionFromParameters(parameters)",106],["__elementLabel getOrElse { sys.error(\"missing element label.\") },",131],["element.getParent match {",122]],"useCount":22390},{"word":"elements","context":[["/** Filter the elements of 'this' vector based on the predicate 'p', returning",104],["* the sets of all elements that are in either `s` or `t`.",90],["* Return an RDD created by piping elements to a forked external process.",91],["* Return a new RDD containing the distinct elements in this RDD.",98],["/** Set 'this' vector's elements over the given range (vector slicing).",104],["* the set of all elements of `s` that are not in `t`.",90],["// so long as we have some way of comparing elements of the `Array`",89],["* Return an RDD with the elements from `this` that are not in `other`.",151],["package elements",217],["* @param p the predicate used to test elements.",85]],"useCount":14779},{"word":"else","context":[["else",57438],["else None",3784],["} else",5117],["else {",42318],["} else None",2570],["}else{",2160],["else TizenHelper.TizenExceptionBot",1759],["else{",1444],["} else {",150371],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594]],"useCount":346708},{"word":"email","context":[["\"email\" -> email,",174],["\"email\" -> email,",174],["* by email Sergey Kotlov, sergey.kotlov@happymelly.com or",114],["email = email,",122],["* See http://www.cra.com or email figaro@cra.com for information.",856],["email: String,",452],["val email = buildEmail(gmail)",210],["whenReady(startEmailAuth(email)) { resp ⇒",190],["email = email,",122],["email: Option[String],",189]],"useCount":9169},{"word":"empty","context":[["Map.empty",490],["Seq.empty",959],["val partialMessage = doParse(Partial.empty)",296],["Set.empty",277],["import ReverseRouteContext.empty",313],["case None => Seq.empty",340],["ConfigMap.empty, None, new Tracker, Set.empty))",369],["case _ => Seq.empty",788],["ConfigMap.empty, None, new Tracker, Set.empty))",369],["Iterator.empty",389]],"useCount":52721},{"word":"enables","context":[["* This method enables syntax such as the following:",1148],["* This class is enables the following syntax:",72],["* This method enables the following syntax:",3913],["* documentation that, without modification of the Source Code, enables",1872],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This class enables syntax such as the following:",155],["* This field enables the following syntax:",120],["* This class enables syntax such as the following test registration:",88],["* For example, this method enables syntax such as the following:",73],["* This field enables syntax such as the following:",72]],"useCount":9702},{"word":"end","context":[["*  @param end   the end column of the slice (exclusive)",104],["*  @param end   the end row of the slice (exclusive)",98],["while (i < end) {",110],["val end = System.currentTimeMillis()",261],["end",1004],[".end",119],["val end = System.currentTimeMillis",150],["val end = readNat() + readIndex",176],["/*end*/",202],["*  @param end   the end column of the slice (exclusive)",104]],"useCount":16495},{"word":"entity","context":[["import simx.core.entity.Entity",93],["entity match {",148],["result.entity.data should not be empty",156],["entity(as[String]) { body =>",96],["import net.minecraft.entity.EntityLivingBase",163],["result.entity should not be empty",156],["import net.minecraft.entity.player.EntityPlayer",929],["entity",288],["import net.minecraft.entity.Entity",265],["|           <code>{Text(entity)}</code>",134]],"useCount":9389},{"word":"entry","context":[["</entry>",75],["entry",188],["case entry: java.util.Map.Entry[_, _] =>",147],["val entry = iter.next()",114],["entry match {",109],["entry =>",103],["if (entry != null) {",77],["case Some(entry) =>",78],["(entry.getKey, entry.getValue) match {",97],["(entry.getKey, entry.getValue) match {",97]],"useCount":7707},{"word":"env","context":[["SparkEnv.set(env)",152],["* @param env The Silhouette environment.",216],["env.execute()",176],["env",250],["implicit val env = env0",165],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["val env = ExecutionEnvironment.getExecutionEnvironment",311],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["env,",253]],"useCount":14913},{"word":"eq","context":[["when(gettable.get(Matchers.eq(0), any[TCodec])).thenReturn(jValue)",62],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["if (mutatedInfo eq null) tree",233],["def equalInferredTypes[A,B](a: A, b: B)(implicit eq: A =:= B) {}",125],["import spire.syntax.eq._",121],["eq match {",103],["val eq = eqocc.formula",72],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), Matchers.any[DateTime])(Matchers.any[ExecutionContext]))",70],["verify(settable).set(Matchers.eq(0), Matchers.eq(jValue), any[TCodec])",62],["verify(settable).set(Matchers.eq(0), Matchers.eq(jValue), any[TCodec])",62]],"useCount":8400},{"word":"equal","context":[["// |______\\__, |\\__,_|\\__,_|_| https://github.com/svenjacobs/equal",261],["} should equal(",198],["|      status should equal(200)",185],["status should equal (200)",162],["result should equal (expectedResult)",156],["/** Returns `true` if this value is less than or equal to x, `false` otherwise. */",149],["/** Returns `true` if this value is greater than or equal to x, `false` otherwise. */",149],["status should equal(200)",1130],["import scalaz.syntax.equal._",145],["s should equal (\"hi\")",125]],"useCount":22043},{"word":"equals","context":[["override def equals(other: Any): Boolean = {",389],["override def equals(that: Any): Boolean =",181],["override def equals(that: Any): Boolean = that match {",447],["override def equals(that: Any): Boolean = {",220],["override def equals(that: Any) = that match {",576],["override def equals(obj: Any): Boolean = {",285],["override def equals(other: Any) = other match {",602],["override def equals(other: Any): Boolean = other match {",959],["override def equals(other: Any): Boolean =",341],["override def equals(o: Any) = o match {",320]],"useCount":10398},{"word":"err","context":[["err",124],["System.err.println(",386],["ex.printStackTrace(System.err)",351],["if (err != 0) {",303],["case Failure(err) =>",248],["case err: play.api.libs.json.JsError => err",190],["case err: play.api.libs.json.JsError => err",190],["val rn: FunnelResponse = new HttpReturningError(err)",162],["parser.printHelpOn(System.err)",148],["checkStreams(out, err, {",143]],"useCount":10198},{"word":"error","context":[["case Left(error) =>",230],["sys.error(\"todo\")",518],["case Failure(error) =>",305],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["logger.error(msg)",239],["if (ERR.get == types.error.ESUCCESS) {",232],["error(\"\"\"",1233],["*             On any error.",228],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594]],"useCount":47156},{"word":"errors","context":[["errors",177],["form.errors.length shouldBe 1",193],["errors => {",203],["tree.errors must beEmpty",377],["tree.errors mustEqual Set(OperationOnUnrelatedSets)",166],["hasErrors.errors.size should be(2)",157],["form.errors.size shouldBe 1",125],["case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)",116],["val errors = l2pBox.validate(boxRetriever)",102],["case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)",98]],"useCount":10694},{"word":"es","context":[["import es.weso.rdf._",113],["package es.weso.shex",86],["import es.weso.rdf.nodes._",124],["es => {",127],["val (h_e, ctx_e) = Helper.RaiseException(h, ctx, es)",80],["(es: ExecutorService) => {",78],["val (h_e, ctx_e) = TizenHelper.TizenRaiseException(h, ctx, es ++ est)",77],["es => new Future[A] {",129],["es =>",96],["val es =",369]],"useCount":7221},{"word":"event","context":[["import akka.event.LoggingAdapter",564],["event match {",1411],["for (event <- recordedEvents) {",237],["import scala.swing.event._",249],["*        how to present this event to the user",376],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["import akka.event.EventStream",547],["def apply(event: Event) {",565],["import akka.event.LoggingReceive",631],["import akka.event.Logging",1161]],"useCount":30364},{"word":"events","context":[["assert(events.size === 12)",96],["it(\"should send InfoProvided events with aboutAPendingTest set to true for info \" +",94],["*        other events reported during the same run",562],["import org.scalatest.events._",569],["it(\"should send InfoProvided events with aboutAPendingTest set to false for info \" +",94],["import org.scaladebugger.api.lowlevel.events.data.JDIEventDataResult",164],["import events.TestFailed",82],["import org.scalatest.events.Event",101],["events",115],["package org.scalatest.events",110]],"useCount":12814},{"word":"ex","context":[["ex.printStackTrace()",444],["case NonFatal(ex) =>",531],["case ex: Exception => {",289],["case ex: Throwable =>",581],["def onError(ex: Throwable) = {",299],["ex.printStackTrace(System.err)",351],["def onError(ex: Throwable): Unit = {",403],["case Failure(ex) =>",857],["case ex: Exception =>",1086],["throw ex",1157]],"useCount":23167},{"word":"example","context":[["* For example, this method supports syntax such as the following:",501],["// $example on$",536],["// $example off$",537],["* @example {{{",607],["package example",663],["* For example:",1064],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["* @example",264],["* Here's an example:",334],["package com.example",404]],"useCount":15687},{"word":"examples","context":[["examples = Seq(",111],["val examples =",188],["package org.apache.spark.examples.ml",193],["forAll(examples) { colFun =>",693],["package examples",393],["package org.apache.spark.examples.mllib",216],["package org.apache.spark.examples",215],["forAll (examples) { e =>",105],["* For examples of test registration, see the <a href=\"FlatSpec.html\">main documentation</a>",101],["package spark.examples",102]],"useCount":8935},{"word":"exception","context":[["case e: Exception => Future.exception(e)",152],["case t:IllegalArgumentException => Future.exception(new ClientError(t.getMessage))",170],["throw exception",243],["catch { case _: Exception => fail(\"it shouldn't trown an exception\") }",140],["* throw an exception. This method can be called safely by any thread.",131],["import org.I0Itec.zkclient.exception.ZkNodeExistsException",158],["case Failure(exception) =>",152],["_localctx.exception = re",125],["it(\"should throw an exception if there is no underlying profile\") {",122],["* particular file as subject to the \"Classpath\" exception as provided",106]],"useCount":14759},{"word":"exceptions","context":[["val e2 = intercept[exceptions.TestFailedException] {",1046],["case tfe: exceptions.TestFailedException =>",614],["val e2 = intercept[exceptions.NotAllowedException] {",553],["val e4 = intercept[exceptions.TestFailedException] {",492],["val e5 = intercept[exceptions.TestFailedException] {",420],["val e = intercept[exceptions.TestFailedException] {",946],["val e1 = intercept[exceptions.TestFailedException] {",781],["import org.scalatest.exceptions.TestFailedException",629],["val e3 = intercept[exceptions.TestFailedException] {",754],["val e1 = intercept[exceptions.NotAllowedException] {",2223]],"useCount":15277},{"word":"execute","context":[["client.execute {",859],[".execute()",430],["env.execute()",176],["it(\"should execute all tests when run is called with testName None\") {",193],["val resp = client.execute {",360],["it(\"should execute one test when run is called with a defined testName\") {",193],["import org.specs2.execute.Result",199],[").execute()",241],["session.execute(",272],["processor.execute()",322]],"useCount":16247},{"word":"exists","context":[["file.exists must_==true",144],["def exists(p: A => Boolean): Boolean =",108],["assert(new File(outputPath).exists())",119],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["*     exists in this <code>Suite</code>",138],["if (!file.exists()) {",140],["if (file.exists()) {",325],["exists",107],["if (file.exists) {",200],["if (exists) {",107]],"useCount":16715},{"word":"exit","context":[["sys.exit(0)",324],["sys.exit()",180],["System.exit(-1)",515],["exit",141],["System.exit(0)",1347],["exit(1)",110],["sys.exit(1)",1327],["exit()",1035],["* @param expectedExitCode (optional) the expected exit code for the command",120],["System.exit(1)",3108]],"useCount":10613},{"word":"expect","context":[["expect(Map()) {",103],["expect(obj).toBeDefined",91],["expect(resScale).toEqual(result.scale())",107],[".expect",112],["expect(result.signum()).toEqual(1)",135],["expect(c).toEqual(result.toString)",144],["expect(resBytes(i)).toEqual(rBytes(i))",277],["expect(None) {",279],["expect {",619],["expect(js.typeOf(accessor)).toEqual(\"function\")",89]],"useCount":7784},{"word":"expected","context":[["val expected = None",312],["actual should be(expected)",378],["val expected = List(",437],[".returning(expected).once()",437],["val expected = true",493],["val expected = Seq(",526],["actual should be (expected)",3093],["val expected =",912],["assert(actual === expected)",683],["val expected = false",530]],"useCount":26152},{"word":"expr","context":[["expr match {",961],["expr()",111],["case Block(stats, expr) =>",119],["import org.orbeon.saxon.expr.XPathContext",129],["case Throw(expr) =>",148],["expr",149],["import org.jetbrains.plugins.scala.lang.psi.api.expr.ScExpression",271],["package expr",420],["import at.logic.gapt.expr._",828],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868]],"useCount":17373},{"word":"expression","context":[["it(\"should do nothing when object size doesn't match and used in a logical-and expression with not\") {",72],["def `should do nothing when object length matches and used in a logical-and expression` {",72],["def `should throw an assertion error when object size doesn't match and used in a logical-or expression` {",72],["expression match {",85],["def `should do nothing when object length doesn't match and used in a logical-or expression with not` {",72],["it(\"should do nothing when object length matches and used in a logical-or expression\") {",72],["it(\"should throw an assertion error when object length doesn't match and used in a logical-and expression\") {",72],["import org.scalaide.debug.internal.expression.Names.Java",79],["it(\"should throw an assertion error when object size matches and used in a logical-or expression with not\") {",72],["package org.scalaide.debug.internal.expression",134]],"useCount":11913},{"word":"extends","context":[["extends Serializable {",407],["object Test extends dotty.runtime.LegacyApp {",832],["object Application extends Controller {",779],["class TestSpec extends WordSpec {",733],["object ApplicationBuild extends Build {",701],["class MyReporter extends Reporter {",553],["extends Logging {",421],["object Main extends App {",1221],["object Global extends GlobalSettings {",345],["object Test extends App {",335]],"useCount":88946},{"word":"f","context":[["case Some(f) =>",271],["import f._",455],["f match {",623],["f.verifyNoMoreInteractions()",447],["f()",282],["assert(!f.isDefined)",292],["* @param f",344],["val f = fixture",435],["f",2937],["val f = new Fixture",1701]],"useCount":93841},{"word":"factorie","context":[["import cc.factorie._",346],["import cc.factorie.variable._",256],["import cc.factorie.app.nlp._",215],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import cc.factorie.la._",204],["http://factorie.cs.umass.edu, http://code.google.com/p/factorie/",104],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["package cc.factorie.util",170],["http://factorie.cs.umass.edu, http://code.google.com/p/factorie/",104],["package cc.factorie.variable",135]],"useCount":6878},{"word":"factory","context":[["Await.result(factory())",86],["import org.springframework.beans.factory.annotation.Autowired",795],["import org.geotools.factory.Hints",396],["assert(factory.isAvailable)",221],["assert(!factory.isAvailable)",208],["import org.geotools.factory.CommonFactoryFinder",203],["val documentSet = factory.documentSet()",133],["import org.springframework.beans.factory.config.BeanDefinition",113],["* All factory methods throw <code>NullPointerException</code> if any of the passed values are <code>null</code>.",84],["import org.geotools.factory.{CommonFactoryFinder, Hints}",78]],"useCount":7765},{"word":"fail","context":[["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["case _ => fail()",807],["case Left(x) => fail(x)",124],["catch { case _: Exception => fail(\"it shouldn't trown an exception\") }",140],["fail(",144],["success => fail(\"Should have errored out\")",147],["fail(\"Unexpected behavior\")",169],["case _ => fail",174],["fail",252],["fail()",588]],"useCount":15534},{"word":"failed","context":[["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["(req:HttpRequest) => Future.failed(mockFailureResponse)",123],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e.message should be (Some(\"'all' inspection failed, because: \\n\" +",307],["// Log failed HTTP requests",285],["\"'all' inspection failed, because: \\n\" +",199],["failed = true",173],["var failed = false",169],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112]],"useCount":11537},{"word":"failedCodeFileName","context":[["tfe.failedCodeFileName should be (Some(\"InspectorShorthandsSpec.scala\"))",572],["assert(e.failedCodeFileName === (Some(fileName)))",581],["assert(caught1.failedCodeFileName === Some(fileName))",810],["e.failedCodeFileName should be (Some(fileName))",824],["e1.failedCodeFileName.get should be (fileName)",1428],["e2.failedCodeFileName.get should be (fileName)",534],["assert(caught2.failedCodeFileName === Some(fileName))",456],["assert(caught4.failedCodeFileName === Some(fileName))",444],["assert(caught3.failedCodeFileName === Some(fileName))",444],["assert(e.failedCodeFileName == (Some(fileName)))",375]],"useCount":16526},{"word":"failedCodeLineNumber","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["e.failedCodeLineNumber should be (Some(thisLineNumber - 14))",444],["tfe.failedCodeLineNumber should be (Some(thisLineNumber - 11))",517],["assert(e.failedCodeLineNumber === (Some(thisLineNumber - 4)))",543],["e.failedCodeLineNumber should be (Some(thisLineNumber - 3))",563],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["assert(caught4.failedCodeLineNumber === Some(thisLineNumber - 4))",726],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280]],"useCount":17635},{"word":"failure","context":[["failure",222],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["// Check to make sure the error message \"short circuits\" (i.e., just reports the left side's failure)",137],["promise.failure(e)",101],["case Failure(f) => p failure f",79],["case Failure(ex) => p.failure(ex)",73],["describe(\"when failure happens\") {",73],["generateEntry(id, failure, {",70],["\"means the current controller with epoch %d went through a soft failure and another \".format(epoch) +",69],["* @return On success the build social profile, otherwise a failure.",68]],"useCount":7931},{"word":"false","context":[["return false",5622],["false",15502],["var theTestThatCalled = false",3518],["case _ => false",19294],["case false =>",1185],["false,",1586],["var theTestThisCalled = false",3518],["else false",1197],["case None => false",1499],["var theTestTheOtherCalled = false",1511]],"useCount":171753},{"word":"feature","context":[["\"-feature\",",441],["import org.opengis.feature.simple.SimpleFeatureType",495],["import org.opengis.feature.simple.SimpleFeature",287],["import org.geotools.feature.simple.SimpleFeatureBuilder",187],["import org.opengis.feature.simple.{SimpleFeature, SimpleFeatureType}",535],["import org.geotools.feature.DefaultFeatureCollection",158],["package org.apache.spark.ml.feature",168],["package skinny.controller.feature",162],["package feature",159],["describe(\"a feature\") {",144]],"useCount":10172},{"word":"features","context":[["features must haveLength(2)",265],["features must haveLength(1)",193],[".setInputCol(\"features\")",115],["import org.locationtech.geomesa.features.ScalaSimpleFeature",182],["* @param input RDD of (label, array of features) pairs.",178],["features must contain(\"bill\", \"bob\", \"charles\")",125],["features must haveSize(1)",113],[".setOutputCol(\"features\")",104],["package epic.features",118],["features must haveLength(3)",176]],"useCount":11449},{"word":"field","context":[["field.map { field =>",145],["field.map { field =>",145],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["import scala.annotation.meta.field",186],["field match {",258],["field.setAccessible(true)",286],["field =>",145],["* If the field is not a {@code ChronoField}, then the result of this method",138],["field",326]],"useCount":24329},{"word":"fields","context":[["\"fields\": [",177],["val fields = XMLDataFields(xml)",109],["val fields = line.split(\"\\t\")",116],["fields",121],["fields:",128],["* Checks that all required fields are non-null.",167],["{{#fields}}",353],["{{/fields}}",298],["for (f <- r.fields) {",214],["|   fields = [",177]],"useCount":13080},{"word":"file","context":[["import java.nio.file.Files",763],["* See the NOTICE file distributed with this work for additional",769],["base = file(\".\"),",796],["import java.nio.file.Paths",841],["// See the LICENCE.txt file distributed with this work for additional",740],["* This file is part of Neo4j.",1823],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* Automatically generated file. Please do not edit.",1311],["import java.nio.file.Path",1084],["protocol = \"file\",",854]],"useCount":73693},{"word":"fileName","context":[["assert(caught2.failedCodeFileName === Some(fileName))",456],["e1.failedCodeFileName should be (Some(fileName))",216],["assert(caught3.failedCodeFileName === Some(fileName))",444],["assert(caught4.failedCodeFileName === Some(fileName))",444],["assert(e.failedCodeFileName == (Some(fileName)))",375],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(e.failedCodeFileName === (Some(fileName)))",581],["e2.failedCodeFileName.get should be (fileName)",534],["e1.failedCodeFileName.get should be (fileName)",1428],["e.failedCodeFileName should be (Some(fileName))",824]],"useCount":10681},{"word":"files","context":[["import better.files._",299],["files",161],["val files: Seq[FilePart[TemporaryFile]] = Nil",170],["for (file <- files) {",113],["val form = new MultipartFormData(data, files, Nil, Nil)",176],["* A \"Related Module\" means a set of sources files including their",1872],["* serving files in a web or/and network application,",540],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["/** This file is part of TextCompose, a program for producing PDF from text files.",110],["IMPORTANT NOTE: All patches (modifications to existing files and/or the addition of new files) submitted for inclusion",104]],"useCount":10996},{"word":"filter","context":[["val options = splitter.getQueryOptions(filter)",273],["filter match {",195],["import org.geotools.filter.text.ecql.ECQL",464],["import org.locationtech.geomesa.filter._",123],["import org.opengis.filter.Filter",435],["assertEquals(1, filter.count())",124],["package com.sksamuel.scrimage.filter",129],["eventsReceived filter {",135],[".filter {",138],["import org.geotools.filter.identity.FeatureIdImpl",160]],"useCount":28524},{"word":"finagle","context":[["package com.twitter.finagle",560],["* import com.twitter.finagle.Http",295],["package com.twitter.finagle.service",309],["package com.twitter.finagle.http",300],["import com.twitter.finagle.builder.ClientBuilder",346],["import com.twitter.finagle.http.{Request, Response}",363],["import com.twitter.finagle.stats.StatsReceiver",435],["import com.twitter.finagle.transport.Transport",627],["import com.twitter.finagle._",921],["import com.twitter.finagle.Service",1058]],"useCount":31815},{"word":"final","context":[["final class Env(",258],["final def apply()",209],["final override def serializedSize: Int = {",152],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["@inline final",103],["final def find(f: A => Boolean): Option[A] = this match {",91],["final def apply()(implicit ctx: Html5RenderCtx): Unit = apply(\"\")",90],["final",83],["* @param end The final bound of the range to make.",69],["final val logger = LoggerFactory.getLogger(this.getClass)",81]],"useCount":19725},{"word":"finally","context":[["*   finally {",76],["try { op(p) } finally { p.close() }",91],["*     finally writer.close() // clean up the fixture",98],["}finally{",104],["}finally {",125],["finally",346],["} finally {",15662],["finally {",3404],["} finally",181],["*     finally {",279]],"useCount":23212},{"word":"find","context":[["val k = partialPivoting (u, i)   // find the maxiumum element below pivot",102],["val k = partialPivoting (b, i)  // find the maxiumum element below pivot",182],["whenReady(db.run(persist.HistoryMessage.find(user1.id, models.Peer.group(groupOutPeer.groupId)))) { serviceMessages ⇒",91],["* @param loginInfo The login info of the user to find.",90],["refs.find(c.ty)",90],["val valuesFor2 = groups.find(_._1 == 2).get._2",97],["final def find(f: A => Boolean): Option[A] = this match {",91],["case Cons(h, t) => if (f(h())) Some(h()) else t().find(f)",89],["coll.find(",89],["go to (host + \"find-select.html\")",84]],"useCount":11800},{"word":"first","context":[["// has not been invalidated underneath (first call will always be",108],["// Memoized request function first checks to make sure the cache",108],["var r = firstRow // the first row of the matrix that this thread processes",104],["if (first) {",171],["first = false",371],["*  @param u  the vector to multiply by (requires same first dimensions)",104],["// This is the safest as it collects all error information (not just first error) and reports it",102],["* @param queryString the string with which to search, first by ID then by name",93],["override val theTestNames = Vector(\"can first test\", \"can second test\")",90],["var first = true",467]],"useCount":19683},{"word":"fixture","context":[["assert(fixture === hello)",514],["\"test that\" taggedAs(mytags.SlowAsMolasses) in { fixture => theTestThatCalled = true }",161],["val f = fixture",435],["package org.scalatest.fixture",351],["* import org.scalatest.fixture",202],["\"should blow up\" in { fixture =>",199],["val f = fixture()",186],["ignore(\"test this\") { fixture =>",180],["def testThis(fixture: FixtureParam) { theTestThisCalled = true }",170],["def testThat(fixture: FixtureParam, info: Informer) { theTestThatCalled = true }",170]],"useCount":20852},{"word":"flatMap","context":[["userService.retrieve(loginInfo).flatMap {",93],["lazy val validations = errors flatMap { _.messages } map { m =>",88],["): Gen[R] = arbitrary[T1] flatMap {",95],["params(\"id\").toIntOpt.flatMap{ issueId =>",99],["val words = lines.flatMap(_.split(\" \"))",147],["elem.attributes.toList flatMap {",127],["}.flatMap {",165],["} flatMap {",187],[".flatMap {",370],["}.flatMap { _ =>",191]],"useCount":17833},{"word":"flush","context":[["em.flush()",181],["out.flush",222],["flush()",325],["def flush() {",150],["os.flush()",150],["pw.flush()",152],["oos.flush()",164],["writer.flush",137],["out.flush()",717],["writer.flush()",800]],"useCount":8247},{"word":"fold","context":[["_.fold(",114],["loginForm.bindFromRequest.fold(",116],["}).fold(succ = { a: Result => a }, fail = { t: Throwable => Status(BAD_REQUEST)(t.getMessage) })",63],["result.fold(",69],["form.bindFromRequest.fold(",141],["result.fold(cancel(\"expected result not computed\")) { item =>",152],[").fold(",165],[".fold(",84],["//</editor-fold>",117],["// </editor-fold>",504]],"useCount":6410},{"word":"following","context":[["And(\"The following assertions should also hold:\")",275],["furnished to do so, subject to the following conditions:",262],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This method enables the following syntax:",3913],["* furnished to do so, subject to the following conditions:",2674],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* For example, this method supports syntax such as the following:",501],["* subject to the following conditions:",295],["* so, subject to the following conditions:",224]],"useCount":18175},{"word":"foo","context":[["val methodName: String = \"foo\"",170],["$read(Collection(\"db\", \"foo\")),",153],["$read(collection(\"db\", \"foo\")),",120],["val dyn = foo.asInstanceOf[js.Dynamic]",192],["val foo = (new Foo).asInstanceOf[js.Dynamic]",319],["b = foo();",1091],["cmd = Some(\"foo\"),",161],["foo",170],["int * foo();",150],["\"\"\"foo(",190]],"useCount":30481},{"word":"for","context":[["* distributed with this work for additional information",4340],["} // for",6254],["for {",33005],["// See the LICENCE.txt file distributed with this work for additional",740],["(for {",3647],["for (",1556],["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["* See http://www.cra.com or email figaro@cra.com for information.",856],["* See the NOTICE file distributed with this work for additional",769],["val result = for {",921]],"useCount":229798},{"word":"forAll","context":[["forAll(mapExamples) { colFun =>",108],["forAll(nullableExamples) { colFun =>",153],["forAll(traversableExamples) { colFun =>",116],["forAll(seqExamples) { colFun =>",172],["val prop = forAll ($famousArgs$) { ($namesAndTypes$) =>",120],["forAll(larGen) { lar =>",140],["forAll {",431],["import org.scalacheck.Prop.forAll",475],["forAll(examples) { colFun =>",693],["forAll (examples) { e =>",105]],"useCount":9451},{"word":"foreach","context":[["onAnimationEnd.foreach(v => props.updateDynamic(\"onAnimationEnd\")(v))",339],["onSelect.foreach(v => props.updateDynamic(\"onSelect\")(v))",339],["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["onFocus.foreach(v => props.updateDynamic(\"onFocus\")(v))",339],["onBlur.foreach(v => props.updateDynamic(\"onBlur\")(v))",339],["onDragStart.foreach(v => props.updateDynamic(\"onDragStart\")(v))",339],["onDragExit.foreach(v => props.updateDynamic(\"onDragExit\")(v))",339],["onCopy.foreach(v => props.updateDynamic(\"onCopy\")(v))",339],["onTouchMove.foreach(v => props.updateDynamic(\"onTouchMove\")(v))",339],["onTouchStart.foreach(v => props.updateDynamic(\"onTouchStart\")(v))",339]],"useCount":54277},{"word":"form","context":[["\"raise 1 form error\" in {",178],["def `should work on parallel form` {",184],["form.errors.length shouldBe 1",193],["if(contentType.startsWith(\"multipart/form-data\")) {",196],["form.hasErrors shouldBe true",309],["</form>",451],["* you must retain the producer line in every report, form or document",540],["\"raise form error\" in {",197],["val form = Form(",236],["* to form the test name",274]],"useCount":20737},{"word":"format","context":[["// format: OFF",374],["package format",171],["// format: ON",216],["import org.joda.time.format.ISODateTimeFormat",675],["val format = RmFormat",178],["import org.joda.time.format.DateTimeFormat",932],["format match {",274],["val format = RegRmFormat",190],["import java.time.format.DateTimeFormatter",354],["import org.joda.time.format.DateTimeFormatter",192]],"useCount":32151},{"word":"formatter","context":[["import scalariform.formatter.preferences._",501],["import formatter._",137],["formatter: Option[Formatter],",171],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["formatter match {",531],["throw new NullPointerException(\"formatter was null\")",132],["if (formatter == null)",132],["formatter: Option[Formatter] = None,",126],["case ScopeOpened(ordinal, message, nameInfo, formatter, location, payload, threadName, timeStamp) =>",125]],"useCount":6426},{"word":"forms","context":[["* Redistribution and use in source and binary forms, with or without",3573],["import io.github.gitbucket.scalatra.forms._",84],["package forms",176],["import jp.sf.amateras.scalatra.forms._",227],["Note that we can go back and forth between the two forms. We can curry",94],["// Redistribution and use in source and binary forms, with or without",113],["* Redistribution and use in source and binary forms, with or without modification,",339],["import forms._",95],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["Redistribution and use in source and binary forms, with or without",639]],"useCount":6450},{"word":"found","context":[["* @return The found user or None if no user for the given ID could be found.",83],["var found = false",419],["found = true",414],["found",196],["* @return The found user or None if no user for the given ID could be found.",83],["assert(file != null, \"file \" + filePath + \" not found\")",80],["* @param default The default value to use if the property is not found",79],["* @return The found user or None if no user for the given login info could be found.",92],["* @return The found user or None if no user for the given login info could be found.",92],["* of the set can be found quickly. If you want to learn more you can take a look",71]],"useCount":8110},{"word":"from","context":[["*  @param from  the position to start extracting from",123],["from",525],["* from the passthroughFields map, if present.",181],["it(\"should return the correct test count from its expectedTestCount method\") {",193],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["when(\"one is subracted from the other\")",253],["it should \"provide implicit conversion from Double\" in {",133],["* Return an RDD with the elements from `this` that are not in `other`.",151],["\"calls made from a test that is pending\") {",134],["it should \"create values from properly formatted Strings\" in {",134]],"useCount":58981},{"word":"fs","context":[["fs.addFeatures(featureCollection)",103],["conv.assertArityMatches(fs._1)",116],["val fs = FileSystem.get(conf)",118],["import org.apache.hadoop.fs.{ FileSystem, Path }",92],["import org.apache.hadoop.fs.Path",1128],["import org.apache.hadoop.fs.{FileSystem, Path}",356],["package com.pavelfatin.fs",120],["import org.apache.hadoop.fs.FileSystem",281],["val fs = ds.getFeatureSource(sftName).asInstanceOf[AccumuloFeatureStore]",206],["import quasar.fs._",128]],"useCount":9382},{"word":"fun","context":[["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["fun match {",163],["*       assert(builder.toString === \"ScalaTest is fun!\")",143],["*       builder.append(\"fun!\")",143],["case Apply(fun, args) =>",117],["fun",196],["val sym = fun.symbol",106],["*     assert(builder.toString === \"ScalaTest is fun!\")",102],["case fun: ScFunction =>",240],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485]],"useCount":10864},{"word":"function","context":[["* @param testFun the test function",571],["test.c: In function 'x':",318],["* @param reduceFunc associative reduce function",177],["test.c: In function ‘foo’:",173],["*  @param f  the function to apply",150],["package monocle.function",144],["function() {",597],["test.c: In function 'main':",906],["package org.orbeon.oxf.xforms.function.xxforms",143],["import monocle.function._",138]],"useCount":27977},{"word":"functions","context":[["it(\"should work with test functions whose inferred result type is not Unit\") {",81],["* supplementary functions or services in addition to those offered by",1872],["import org.apache.spark.sql.functions._",557],["object List { // `List` companion object. Contains functions for creating and working with lists.",97],["// Some examples of anonymous functions:",96],["// Polymorphic functions are often so constrained by their type",95],["* The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.",77],["import functions._",83],["def foldRight[A,B](as: List[A], z: B)(f: (A, B) => B): B = // Utility functions",82],["package org.neo4j.cypher.internal.compiler.v2_3.functions",80]],"useCount":6890},{"word":"future","context":[["Await.result(future, timeout.duration)",146],["promise.future",1341],["val resp = Await.result(future, 3.seconds)",140],["Await.result(promise.future, 5.seconds)",209],["future {",253],[".future()",284],["future",321],["val result = Await.result(future,duration)",492],["promise.future.map { repo =>",602],["p.future",1206]],"useCount":15364},{"word":"g","context":[["*  @param rowIndex  the row index positions (e.g., (0, 2, 5))",121],["g.tags",124],["g: G Or Every[ERR],",150],["assert(!g.theTestThisCalled)",211],["assert(!g.theTestTheOtherCalled)",211],["assert(g.theTestThatCalled)",211],["*  @param k  how far above the main diagonal, e.g., (-1, 0, 1) for (sub, main, super)",228],["g",283],["super.paintComponent(g)",115],["*  @param colIndex  the column index positions (e.g., (0, 2, 5))",121]],"useCount":17081},{"word":"game","context":[["val game: Game = Game(cols, rows)",69],["import lila.game.Game",64],["import lila.game.tube.gameTube",58],["it(\"should lead the whole game\") {}",56],["package lila.game",177],["val game = ChessGame.fromGridString(",96],["case game =>",91],["package game",70],["game: Game,",77],["import lila.game.{ Game, GameRepo }",84]],"useCount":6490},{"word":"gatling","context":[["import io.gatling.commons.validation._",127],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"DEBUG\"))",285],["import _root_.io.gatling.core.scenario.Simulation",278],["import io.gatling.jdbc.Predef._",199],["import io.gatling.core.config.GatlingConfiguration",184],["import io.gatling.core.session.Session",133],["import io.gatling.core.session._",126],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"TRACE\"))",285],["import io.gatling.http.Predef._",891],["import io.gatling.core.Predef._",1016]],"useCount":6776},{"word":"gen","context":[["val sample = gen[ThriftTest]",132],["val gen = new Generator(SpecificRecord)",115],["gen.writeStartObject()",110],["val id = gen[UUID]",222],["import com.twitter.zipkin.gen",273],["gen.writeEndObject()",132],["val sample2 = gen[ThriftTest]",117],["val row = gen[Primitive]",162],["val recipe = gen[Recipe]",175],["val row = gen[JodaRow]",188]],"useCount":8218},{"word":"generate","context":[["def nextInt: (Int, RNG) // Should generate a random `Int`. We'll later define other functions in terms of `nextInt`.",75],["\"generate confirmation mustache model with correctly rendered values and correct URLs\" in {",68],["* generate the RDDs with Spark's default number of partitions.",79],["* Hash partitioning is used to generate the RDDs with `numPartitions` partitions.",104],["def generate(mv: MethodVisitor, symbolTable: SymbolTable) {",114],["it(\"should generate a TestPending message when the test body is (pending)\") {",177],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["*                       the new DStream will generate RDDs); must be a multiple of this",321],["// An Ignored test that was both included and excluded should not generate a TestIgnored event",225],["// An Ignored test that was not included should not generate a TestIgnored event",225]],"useCount":6637},{"word":"generated","context":[["//This class was generated by build script, please don't change this",186],["package generated",183],["* Return a new DStream in which each RDD is generated by applying a function",116],["package generated.scala",189],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["*  results of that function by feeding it with arbitrarily generated input",113],["* generated based on `prefix` and `suffix`: \"prefix-TIME_IN_MS.suffix\".",96],["* generated. We want to make it easy and obvious for users of",217],["* Automatically generated file. Please do not edit.",1311],["* @param fun the property check function to apply to the generated arguments",80]],"useCount":6539},{"word":"geomesa","context":[["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["import org.locationtech.geomesa.utils.geotools.Conversions._",276],["package org.locationtech.geomesa.accumulo.index",212],["package org.locationtech.geomesa.accumulo.iterators",191],["import org.locationtech.geomesa.features.ScalaSimpleFeature",182],["package org.locationtech.geomesa.accumulo.data",153],["import org.locationtech.geomesa.filter._",123],["import org.locationtech.geomesa.accumulo.data._",119],["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683]],"useCount":9942},{"word":"geotools","context":[["import org.locationtech.geomesa.utils.geotools.Conversions._",276],["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import org.geotools.factory.Hints",396],["import org.geotools.filter.text.ecql.ECQL",464],["import org.geotools.data.Query",241],["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import org.geotools.factory.CommonFactoryFinder",203],["import org.geotools.data._",189],["import org.geotools.feature.simple.SimpleFeatureBuilder",187],["import org.geotools.geometry.jts.ReferencedEnvelope",182]],"useCount":6306},{"word":"get","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],[".get",495],["get {",2738],["e1.failedCodeFileName.get should be (fileName)",1428],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["}.get",573],[".get(\"/api/account\")",570],["e2.failedCodeFileName.get should be (fileName)",534],["val current = get",434],["resp.toOption.get.transactionHash",412]],"useCount":101679},{"word":"getClass","context":[["val logger = LoggerFactory.getLogger(this.getClass)",167],["val loggerName = this.getClass.getName",167],["val log = LoggerFactory.getLogger(getClass)",453],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["val logger = LoggerFactory.getLogger(getClass)",304],["log.fatal(\"Unknown item \" + unknown.getClass())",170],["val log = Logger.getLogger(getClass.getName)",173],["assert(testFailedEvents(0).throwable.get.getClass() === classOf[TestRegistrationClosedException])",215]],"useCount":13503},{"word":"getInstance","context":[["val calendar = Calendar.getInstance()",95],["PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument)",133],["override def getInstance(cfg: CFG): Option[Loc] = Some(newRecentLoc())",149],["val cal = Calendar.getInstance",158],["val cal = Calendar.getInstance()",194],["CarbonProperties.getInstance()",264],["val dummyFile = PsiFileFactory.getInstance(manager.getProject).",360],["PsiDocumentManager.getInstance(project).commitAllDocuments()",112],["PsiDocumentManager.getInstance(project).commitDocument(document)",86],["EventBusFactory.getInstance.post(new ProjectEvent.GotoMyProject(this, chain))",99]],"useCount":6513},{"word":"getLogger","context":[["private[this] val log = LoggerFactory.getLogger(getClass)",391],["val log = LoggerFactory.getLogger(getClass)",453],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["val logger = LoggerFactory.getLogger(getClass)",304],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"DEBUG\"))",285],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"TRACE\"))",285],["val log = Logger.getLogger(getClass.getName)",173],["val logger = LoggerFactory.getLogger(this.getClass)",167],["private val logger = LoggerFactory.getLogger(this.getClass)",151]],"useCount":7606},{"word":"getMessage","context":[["assert(caught.getMessage === \"a test tag was null\")",137],["println(e.getMessage)",168],["error(e.getMessage)",160],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["e.getMessage match {",159],["log.error(e.getMessage, e)",156],["case t:IllegalArgumentException => Future.exception(new ClientError(t.getMessage))",170],["assert(e.getMessage == \"on purpose\")",270],["assert(caught2.getMessage === \"a test tag was null\")",137]],"useCount":16956},{"word":"getName","context":[["val log = Logger.getLogger(getClass.getName)",173],["private val log = Logger.getLogger(getClass.getName)",98],["encoder = classOf[StringEncoder].getName,",228],["val loggerName = this.getClass.getName",167],["private val log = Logger.getLogger(this.getClass.getName)",107],["threadName: String = Thread.currentThread.getName,",141],["keyEncoder = classOf[StringEncoder].getName,",120],["def getName = name",93],["val name = file.getName",98],["private[this] val log = Logger.getLogger(getClass.getName)",338]],"useCount":10836},{"word":"getOrElse","context":[["}.getOrElse(\"\")",199],["}.getOrElse(Nil)",190],["} getOrElse {",1968],["}.getOrElse {",1651],["} getOrElse NotFound",965],["partialMessage.toComplete.map(Right(_)).getOrElse({",296],["val baseURL = Option(System.getProperty(\"baseURL\")) getOrElse \"\"\"http://127.0.0.1:8080\"\"\"",284],["}.getOrElse(false)",270],["} getOrElse NotFound()",229],[".getOrElse {",224]],"useCount":25769},{"word":"git","context":[["val inserter = git.getRepository.newObjectInserter()",99],["using(Git.open(Directory.getWikiRepositoryDir(owner, repository))){ git =>",81],["getPathObjectId(git, path, revCommit).map { objectId =>",84],["using(Git.open(getRepositoryDir(owner, name))){ git =>",78],["* saved in git. Else, no modification in git are saved.",76],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["* @param git the Git object",210],["using(new RevWalk(git.getRepository)){ revWalk =>",187],["using(new TreeWalk(git.getRepository)){ treeWalk =>",127],["git: www.github.com/code-helix/slatekit",132]],"useCount":7962},{"word":"github","context":[["package com.github.shadowsocks",220],["*  @https://github.com/scouter-project/scouter",182],["package com.github.tminglei.slickpg",205],["url: https://github.com/kishorereddy/scala-slate",172],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import com.github.nscala_time.time.Imports._",892],["// |______\\__, |\\__,_|\\__,_|_| https://github.com/svenjacobs/equal",261],["\\* *  http://github.com/alexcab  * * * * * * * * * * * * * * * * * * * * * * * * * */",271],["* https://github.com/jeffheaton/aifh",341],["git: www.github.com/code-helix/slatekit",132]],"useCount":23705},{"word":"given","context":[["*  @param r  the given range",174],["//given",611],["given()",101],["/** Set 'this' vector's elements over the given range (vector slicing).",104],["*  @param i  the given index",116],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["given(\"two integers\")",257],["* No description given",175],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["// given",1894]],"useCount":24587},{"word":"global","context":[["import scala.concurrent.ExecutionContext.Implicits.global",8774],["implicit val ec = ExecutionContext.Implicits.global",79],["val global: Global",92],["implicit val context = scala.concurrent.ExecutionContext.Implicits.global",102],["import com.novus.salat.global._",129],["import context.global._",139],["import concurrent.ExecutionContext.Implicits.global",179],["/* global */",211],["import global._",845],["import ExecutionContext.Implicits.global",982]],"useCount":14925},{"word":"go","context":[["def go(n: Int, acc: Int): Int =",112],["go",117],["presenter.go(projectView, data)",117],["go(n, 1)",118],["go()",99],["else go(mid2 + 1, mid2, high)",178],["def go(low: Int, mid: Int, high: Int): Int = {",178],["go to (host + \"click.html\")",420],["go to BeforeYouStartPage",539],["go(0)",129]],"useCount":7213},{"word":"google","context":[["def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {",168],["import com.google.common.collect.Lists",165],["import com.google.inject.{Inject, Singleton}",181],["import com.google.inject.AbstractModule",270],["import com.google.common.base.Charsets",273],["import com.google.protobuf.ByteString",309],["def writeTo(out: com.google.protobuf.CodedOutputStream) {",316],["val out = com.google.protobuf.CodedOutputStream.newInstance(res)",316],["import com.google.common.io.Files",554],["import com.google.inject.Inject",1108]],"useCount":13037},{"word":"gov","context":[["import uk.gov.hmrc.play.test.{UnitSpec, WithFakeApplication}",352],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["import uk.gov.hmrc.play.http.HeaderCarrier",258],["package uk.gov.hmrc.ct.ct600.v3",244],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.play.test.UnitSpec",221],["import uk.gov.hmrc.ct.box._",641],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219],["package uk.gov.hmrc.ct.computations",492]],"useCount":15930},{"word":"graph","context":[["package graph",340],["graph",256],["val graph = new ComputeGraph(Optimize) with RefTestInterface {",226],["graph.shutdown",185],["graph.inTx {",123],["val graph = new OperatorGraph(Seq(",94],["graph.awaitIdle",95],["import org.digimead.tabuddy.model.graph.Graph",112],["* @param lineWidth Pixel with of the graph line.",90],["import graph._",400]],"useCount":10286},{"word":"group","context":[["* @group numbers",271],["* @group param",377],["/** @group getParam */",397],["* @group combinators",413],["* @group Algebra",560],["* @group collection",568],["/** @group setParam */",823],["$group(",410],["* @group Constructors (Primitives)",4661],["* @group Constructors (Lifting)",848]],"useCount":37217},{"word":"h","context":[["h",342],["case Cons(h, t) =>",348],["val (h_1, ctx_1) = Helper.Oldify(h, ctx, addr1)",354],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._2._2",380],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["import h._",792]],"useCount":24939},{"word":"hadoop","context":[["import org.apache.hadoop.fs.FileSystem",281],["import org.apache.hadoop.conf.Configuration",2106],["import org.apache.hadoop.fs.Path",1128],["import org.apache.hadoop.io.Text",666],["import org.apache.hadoop.hbase.util.Bytes",494],["import org.apache.hadoop.mapred.JobConf",433],["import org.apache.hadoop.fs.{FileSystem, Path}",356],["import org.apache.hadoop.mapreduce.Job",305],["package hadoop",285],["import org.apache.hadoop.io.Writable",292]],"useCount":17096},{"word":"handler","context":[["handler: SecureController",128],["// This must be called by the event handler thread",90],["* @throws XNIException Thrown by handler to signal an error.",90],["// start a new HTTP server on port 8080 with our service actor as the handler",96],["import org.jboss.netty.handler.codec.http.HttpMethod",109],["handler",112],["import org.jboss.netty.handler.codec.http._",433],["handler =>",180],["package com.twitter.server.handler",121],["import io.netty.handler.codec.http._",131]],"useCount":9524},{"word":"has","context":[["if(!options.has(arg)) {",87],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91],["// NB: The `Function2` trait has a `curried` method already",96],["describe(\"(when a nesting rule has been violated)\") {",145],["// This object has all properties of the HTMLElement object",218],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["// has not been invalidated underneath (first call will always be",108]],"useCount":19647},{"word":"hasNext","context":[["while (iter.hasNext) {",1010],["override def hasNext: Boolean = {",283],["while (it.hasNext) {",755],["if (it.hasNext)",281],["if (iter.hasNext) {",214],["while(iter.hasNext) {",208],["while (iterator.hasNext) {",805],["while (itr.hasNext) {",202],["if (it.hasNext) {",196],["while(it.hasNext) {",188]],"useCount":12573},{"word":"have","context":[["nmr should have (",292],["def `should have pretty toString` {",375],["* or visit www.oracle.com if you need additional information or have any",372],["result should have length 3",313],["mr should have (",298],["result should have length 2",198],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["def `should have correct MatcherResult` {",261],["def `should have correct negated MatcherResult` {",261],["result should have length 1",279]],"useCount":53215},{"word":"head","context":[["}.head",203],["\"\"\").head",822],["<head>",733],["case head :: tail =>",418],["statement = rest.head",399],["val addr_env = (cp._1._1, set_addr.head)",260],["val addr_env = set_addr.head",233],["options.head.filters must haveLength(1)",230],[".head",217],["</head>",755]],"useCount":29651},{"word":"header","context":[[".header(\"Content-Type\", \"application/json\")",172],["header:         Int,",121],["val header = update.header",138],["val header = update.header",138],["serviceMessage.header,",170],["header.checkStep (req2, response, chain, 1)",266],["header.checkStep (req1, response, chain, 0)",266],["* @param request The request header.",321],["header match {",120],["UpdateMessageSent.header,",111]],"useCount":12027},{"word":"headers","context":[[".headers(headers_0),",259],["headers: Map[String, String] = Map.empty,",176],["def apply(body: Any = Unit, headers: Map[String, String] = Map.empty, reason: String = \"\") =",180],[".headers(headers_2),",186],["val headers =",218],[".headers(headers)",224],[".headers(headers)",224],[".headers(headers_http_authenticated)",1058],[".headers(headers_http_authenticated))",570],[".headers(headers_http)",285]],"useCount":10073},{"word":"here","context":[["* Add your spec here.",234],["\"stop here\"",88],["* If the field is a {@link ChronoField} then the query is implemented here.",96],["// We can't have the ensureTopicExists check here since the controller sends it as an advisory to all brokers so they",111],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["* add your integration spec here.",149],["|    \"stop here\"",213],["* Question: Should we implment this method here, or should it remain abstract",178],["// Add your own project settings here",301],["// Add your project dependencies here,",293]],"useCount":8129},{"word":"hi","context":[["a.run(None, Args(SilentReporter, Stopper.default, Filter(), ConfigMap(\"hi\" -> \"there\"), None, new Tracker, Set.empty))",112],["s should equal (\"hi\")",125],["assert(alertList(0).message == \"hi there\")",176],["assert(noteList(0).message == \"hi there\")",176],["val msg = \"hi there, dude\"",250],["test(\"hi\")",298],["\"hi there\"",341],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["correctConfigMapWasPassed = (test.configMap == Map(\"hi\" -> 7))",96],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727]],"useCount":12327},{"word":"hmrc","context":[["import uk.gov.hmrc.play.test.{UnitSpec, WithFakeApplication}",352],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219],["import uk.gov.hmrc.play.test.UnitSpec",221],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.play.http.HeaderCarrier",258],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["package uk.gov.hmrc.ct.computations",492],["import uk.gov.hmrc.ct.box._",641]],"useCount":11476},{"word":"host","context":[["host: String,",553],["host = Some(\"host.mega.corp\"),",84],["val host: String,",90],["props.put(\"host\", \"localhost\")",102],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["// we need an ActorSystem to host our application in",134],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["host,",154],["go to (host + \"click.html\")",420],["val host = \"localhost\"",91]],"useCount":10847},{"word":"href","context":[["* @author <a href=\"steffen.krause@soabridge.com\">Steffen Krause</a>",112],["* @author <a href=\"mailto:sroy@k-state.edu\">Sankardas Roy</a>",135],["* @author <a href=\"mailto:maxime.colmant@gmail.com\">Maxime Colmant</a>",155],["* @author <a href=\"mailto:fgwei521@gmail.com\">Fengguo Wei</a>",398],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["* @author <a href=\"http://hiramchirino.com\">Hiram Chirino</a>",494],["* <a href=\"WebBrowser.html\"><code>WebBrowser</code></a> for an overview of the Selenium DSL.",123],["// Generated by <a href=\"http://scalaxb.org/\">scalaxb</a>.",127],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["* <a href=\"#sharedFixtures\">Shared fixtures</a> section in the main documentation for this trait.",124]],"useCount":6580},{"word":"html","context":[["Ok(views.html.index())",248],["* http://www.eclipse.org/legal/epl-v10.html",689],["<html>",746],["</html>",798],["import views.html._",480],["ref: U[(_ <: dom.html.Element) => _] = undefined,",452],["go to (host + \"click.html\")",420],["contentType(home) must beSome.which(_ == \"text/html\")",195],["contentType = \"text/html\"",337],["package views.html",315]],"useCount":17530},{"word":"http","context":[["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["import io.gatling.http.Predef._",891],["import akka.http.scaladsl.server.Directives._",877],["import spray.http._",1353],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["* See http://www.cra.com or email figaro@cra.com for information.",856],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["import javax.servlet.http.HttpServletRequest",1274]],"useCount":79598},{"word":"https","context":[["* Derivative work: Silhouette (https://github.com/mohiva/play-silhouette)",106],["* See the project homepage at: https://monix.io",820],["<resources base=\"https://test.api.openstack.com\">",786],["val nexus = \"https://oss.sonatype.org/\"",630],["* https://github.com/jeffheaton/aifh",341],["// |______\\__, |\\__,_|\\__,_|_| https://github.com/svenjacobs/equal",261],["*  @https://github.com/scouter-project/scouter",182],["url: https://github.com/kishorereddy/scala-slate",172],["* Original work: SecureSocial (https://github.com/jaliss/securesocial)",120],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92]],"useCount":10385},{"word":"i","context":[["i -= 1",955],["i += 1",18646],["var i = 0",15521],["var i: Int = 0",1330],["i = i + 1",1215],["i = i + 1",1215],["var i = 1",1018],["i = 0",963],["i",905],["while (i < len) {",863]],"useCount":176200},{"word":"id","context":[["id = id,",551],["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["id: U[String] = undefined,",452],["id: Int,",521],["id = id,",551],["* @param id",553],["id: Long,",707],["id: String,",1564],["id,",789],["id",926]],"useCount":107658},{"word":"idx","context":[["v1(idx) = currTriple; idx += 1",70],["v1(idx) = currTriple; idx += 1",70],["override val index: Int = idx",129],["computeTo(sessionId, idx)",90],["if (idx >= 0) {",79],["idx += 1",865],["endIndex = idx",74],["idx: Int,",56],["var idx = 0",639],["idx",132]],"useCount":6743},{"word":"if","context":[["} // if",2658],["//remove if not needed",407],["if (_passthroughFields == null)",418],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["if (value == null) {",420],["if (result != null) return",472],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["if (!compareAndSet(current, update))",488],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["if (stub != null) {",511]],"useCount":309373},{"word":"ignore","context":[["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["* methods <code>test</code> and <code>ignore</code>.",125],["ignore(\"test this\") { fixture =>",180],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["case _ => // ignore",144],["ignore(\"test this\") {}",161],["// ignore",252],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { fixture => theTestThisCalled = true }",123],["it(\"should ignore a test marked as ignored if run is invoked with that testName\") {",149]],"useCount":10986},{"word":"im","context":[["package im.actor.server",151],["import im.actor.server.{ models, persist }",147],["import im.actor.server.db.ActorPostgresDriver.api._",133],["import im.actor.api.rpc.messaging._",142],["import im.actor.server.models",163],["package im.actor.server.api.rpc.service",145],["import im.actor.server._",166],["import im.actor.server.acl.ACLUtils",169],["import im.actor.api.rpc._",356],["import im.actor.server.db.DbExtension",390]],"useCount":11216},{"word":"immutable","context":[["import scala.collection.immutable.Seq",1718],["* This instance is immutable and unaffected by this method call.",998],["immutable$Map(",384],["import scala.collection.immutable.List",385],["import scala.collection.immutable.Map",501],["import scala.collection.immutable.HashSet",526],["import scala.collection.immutable.Queue",561],["import scala.collection.immutable.ListMap",566],["import scala.collection.immutable.HashMap",841],["import scala.collection.immutable",1689]],"useCount":19721},{"word":"impl","context":[["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiManager",240],["import com.mohiva.play.silhouette.impl.providers._",291],["import com.mohiva.play.silhouette.impl.authenticators.CookieAuthenticator",166],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["package impl",1433],["import com.mohiva.play.silhouette.impl.authenticators.JWTAuthenticator",99],["import org.apache.http.impl.client.DefaultHttpClient",118],["import com.mohiva.play.silhouette.impl.daos.DelegableAuthInfoDAO",165],["import org.jetbrains.plugins.scala.lang.psi.impl.{ScalaPsiElementFactory, ScalaPsiManager}",92],["import com.mohiva.play.silhouette.impl.authenticators.SessionAuthenticator",94]],"useCount":13210},{"word":"implementation","context":[["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* The main purpose of this method implementation is to render a compiler error an attempt",128],["* <p>The default implementation returns the result of calling",125],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["* @param stateProvider The OAuth2 state provider implementation.",123],["* @param userService The user service implementation.",155],["* implementation.",140],["* @param httpLayer The HTTP layer implementation.",386],["* <p>The default implementation does nothing.</p>",254],["*     Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr> - initial API and implementation",231]],"useCount":8528},{"word":"implicit","context":[["implicit val formats = DefaultFormats",1174],["implicit",2293],["it(\"should use the implicit Equality in scope\") {",1196],["implicit request =>",1351],["def `should use the implicit Equality in scope` {",1594],["implicit val ise = upperCaseStringEquality",2774],["(implicit",1053],[")(implicit",902],["implicit val tid = transid()",760],["DB.withConnection { implicit c =>",720]],"useCount":118782},{"word":"implicitConversions","context":[["import language.implicitConversions",690],["import scala.language.{implicitConversions, reflectiveCalls}",91],["import scala.language.{implicitConversions, postfixOps}",129],["import scala.language.{higherKinds, implicitConversions}",133],["import scala.language.{implicitConversions, existentials}",36],["import scala.language.{implicitConversions, higherKinds}",36],["\"-language:implicitConversions\",",188],["import scala.languageFeature.implicitConversions",52],["|import scala.language.implicitConversions",36],["import scala.language.implicitConversions",6306]],"useCount":7901},{"word":"import","context":[["import scala.collection.JavaConverters._",13821],["import sbt._",9410],["import org.scalatest._",9769],["import org.scalatest.FunSuite",10421],["import org.junit.runner.RunWith",11532],["import scala.concurrent.duration._",18263],["import java.io.File",17855],["import scala.collection.JavaConversions._",15808],["import scala.concurrent.Future",15060],["import scala.collection.mutable",12078]],"useCount":1949199},{"word":"in","context":[["* supplementary functions or services in addition to those offered by",1872],["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["publishArtifact in Test := false,",777],["in.close()",843],["in match {",925],["it(\"should use the implicit Equality in scope\") {",1196],["def `should use the implicit Equality in scope` {",1594],["\"serialize and deserialize correctly\" in {",758],["in.nextToken()",658],["* Redistribution and use in source and binary forms, with or without",3573]],"useCount":226677},{"word":"include","context":[["contentAsString(result) should include(",85],["res should include regex (\"\\\"Status Code\\\" : 0\")",79],["contentAsString(result) should include(\"Please answer this question\")",72],["* These activities include: offering paid services to customers,",539],["* bit of behavior required by the system being tested. The test can also include some code that",85],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["* because the \"name\" provided to a JUnit <code>org.junit.runner.Description</code> appears to usually include",86],["caught.getMessage should include (\"Passed length\")",120],["it(\"should include the comm_id in the message\") {",65],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177]],"useCount":7701},{"word":"index","context":[["index += 1",1070],["def index = Action {",880],["index",324],["Ok(views.html.index())",248],["*  @param j  the column index",275],["var index = 0",800],["*  @param e  the ending index (exclusive) for the search",516],["*  @param e  the ending row index (exclusive) for the search",244],["index: Int,",217],["*  @param i  the row index",661]],"useCount":37166},{"word":"info","context":[["info",173],["def testThat(fixture: FixtureParam, info: Informer) { theTestThatCalled = true }",170],["case Some(info) =>",168],["info(",182],["* @param loginInfo The linked login info.",187],["val trans = info.transformers(cur)",224],["if (cur < info.transformers.length) {",268],["logger.info(",174],["log.info(",354],["info(msg)",600]],"useCount":38888},{"word":"information","context":[["* or visit www.oracle.com if you need additional information or have any",372],["* distributed with this work for additional information",4340],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* For more information, consult the wiki.",260],["*\tFor further information, please contact Hanns Holger Rutz at",209],["* For more information see",197],["* bytefrog: a tracing framework for the JVM. For more information",176],["* See http://www.cra.com or email figaro@cra.com for information.",856],["* For more information, please contact Digimead Team at this",540],["*  For further information, please contact Hanns Holger Rutz at",539]],"useCount":14833},{"word":"init","context":[["def init = {",135],["init()",644],["def init() {",410],["init",316],["def init(): Unit = {",223],["override def init(context: ServletContext) {",185],["def init() = {",180],["import net.minecraft.init.Blocks",178],["override def init() {",130],["init,",126]],"useCount":10043},{"word":"inject","context":[["import javax.inject.{Inject, Singleton}",545],["import com.google.inject.Inject",1108],["import javax.inject.Singleton",364],["import javax.inject._",394],["import javax.inject.Inject",2351],["import com.google.inject.{Inject, Singleton}",181],["import com.twitter.inject.Test",182],["import javax.inject.Named",183],["import com.google.inject.AbstractModule",270],["users.inject(rampUsers(100) over (1 minutes))",285]],"useCount":10456},{"word":"inline","context":[["@inline",8225],["@inline private def imed3 (rk: Array [Int], i: Int, j: Int, k: Int): Int =",35],["@inline private def iswap (rk: Array [Int], i: Int, j: Int)",35],["@inline final def auto = this := \"auto\"",36],["@inline private def swap (i: Int, j: Int) { val t = a(i); a(i) = a(j); a(j) = t }",38],["@inline private def med3 (i: Int, j: Int, k: Int): Int =",38],["@inline final def none = this := \"none\"",42],["/* Override the inline-styles of the root element.*/",57],["@inline final",103],["@inline private def bss = GlobalStyles.bootstrapStyles",134]],"useCount":10538},{"word":"input","context":[["val input = \"\"\"",423],["input: double",285],["val input =",961],["val result = testEval(input)",523],["val t = new Tester(input)",480],["input: string",266],["input: \"null\"",382],["run(input)",370],["input",362],["input match {",266]],"useCount":28589},{"word":"instance","context":[["* This instance is immutable and unaffected by this method call.",998],["xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",137],["import mesosphere.marathon.core.instance.Instance",128],["* @param clock The clock instance.",121],["* instance.",145],["/* list of properties in the instance object */",155],["* @return the [[JQLite instance]]",170],["</xf:instance>",174],["instance",237],["/* instance */",304]],"useCount":14254},{"word":"int","context":[["input: int",104],[".value(_.intColumn, row.int)",132],["struct T { int x; int y; int z; };",147],["struct T { int x; int y; int z; };",147],["int * foo();",150],["struct T { int x; int y; int z; };",147],["typedef struct { int x; } struct_anonymous;",147],["output: int",234],["struct S { int x; int y; };",192],["struct S { int x; int y; };",192]],"useCount":8020},{"word":"intellij","context":[["import com.intellij.openapi.application.ApplicationManager",395],["import com.intellij.psi._",1694],["import com.intellij.openapi.project.Project",1985],["import com.intellij.psi.PsiElement",1303],["import com.intellij.psi.util.PsiTreeUtil",1108],["import com.intellij.lang.ASTNode",1023],["import com.intellij.psi.search.GlobalSearchScope",365],["import com.intellij.openapi.util.text.StringUtil",369],["import com.intellij.openapi.editor.Editor",713],["import com.intellij.openapi.util.TextRange",566]],"useCount":25641},{"word":"intercept","context":[["val caught2 = intercept[TestFailedException] {",5192],["val caught1 = intercept[TestFailedException] {",6788],["val e1 = intercept[TestFailedException] {",7354],["val caught3 = intercept[TestFailedException] {",4858],["intercept[TestFailedException] {",4645],["intercept[IllegalArgumentException] {",4388],["val e2 = intercept[TestFailedException] {",3429],["val e1 = intercept[exceptions.NotAllowedException] {",2223],["val caught4 = intercept[TestFailedException] {",1419],["val e = intercept[TestFailedException] {",1269]],"useCount":78196},{"word":"internal","context":[["import org.neo4j.cypher.internal.compiler.v2_3.test_helpers.CypherFunSuite",348],["package monix.reactive.internal.operators",191],["package monix.streams.internal.operators",118],["import org.neo4j.cypher.internal.compiler.v2_3.symbols._",178],["import org.apache.spark.internal.Logging",163],["import org.trustedanalytics.sparktk.frame.internal.rdd.FrameRdd",149],["package org.scalaide.debug.internal.expression",134],["package sbt.internal.util",127],["import org.neo4j.cypher.internal.compiler.v2_3._",376],["package internal",497]],"useCount":15731},{"word":"interval","context":[["val interval = new Interval(timestamp.minusDays(1), timestamp.plusDays(1))",71],["* @param batchDuration The time interval at which streaming data will be divided into batches",82],["* Save each RDD in `this` DStream as a Hadoop file. The file name at each batch interval is",96],["eventually(timeout(1000 milliseconds), interval(10 milliseconds)) {",105],["*                       DStream's batching interval",321],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["*                       batching interval",371],["interval = 60.seconds,",69],["props.put(\"auto.commit.interval.ms\", \"1000\")",67]],"useCount":6491},{"word":"into","context":[["* // Unfolding into a Task",91],["\"set into BoundStatement\" in {",93],["// These are meant to be typed into the REPL. You can also run",150],["* @param batchDuration The time interval at which streaming data will be divided into batches",82],["* Return a new RDD that is reduced into `numPartitions` partitions.",82],["*  Ex: Can be used to divide a matrix into a basis and a non-basis.",84],["* Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.",85],["/** Converts a function into a universally quantified property */",88],["// 1. Parse XML file into Elem",86],["val d = ds(mid2) // We index into an array using the same",88]],"useCount":12408},{"word":"io","context":[["import java.io.IOException",2487],["import java.io.File",17855],["import java.io._",6140],["import scala.io.Source",5744],["import java.io.InputStream",1955],["import java.io.PrintWriter",1521],["import org.apache.commons.io.FileUtils",1486],["import com.twitter.io.Buf",1267],["import java.io.FileInputStream",1200],["import java.io.ByteArrayOutputStream",1070]],"useCount":116787},{"word":"is","context":[["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* This file is part of Rudder.",604],[".check(status.is(200)))",656],["* which accompanies this distribution, and is available at",935],["* This instance is immutable and unaffected by this method call.",998],["* accompanies this distribution and is available at",1026],["* which accompanies this distribution and is available at",1232],["* licence, when you create a Related Module, this Related Module is",1268],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This file is part of Neo4j.",1823]],"useCount":184193},{"word":"isDefined","context":[["assert(!f.isDefined)",292],["response.isDefined mustEqual true",221],["assert(task.isDefined)",276],["assert(f.isDefined)",248],["assert(repB.lastEvent.isDefined)",191],["if(extraAttributes.isDefined && extraAttributes != null) addJsObjects(props,extraAttributes.get)",339],["assert(repC.lastEvent.isDefined)",191],["}.isDefined",145],["assert(repD.lastEvent.isDefined)",191],["assert(e.cause.isDefined)",211]],"useCount":14147},{"word":"isEmpty","context":[["if (propertyList.isEmpty) throw new IllegalStateException(s\"No 'produces' defined for the $url\")",176],["def isEmpty: Boolean",457],["*       assert(buffer.isEmpty)",319],["def isEmpty = false",251],["newProgram.script.isEmpty must be (true)",219],["*     assert(buffer.isEmpty)",207],["def isEmpty = true",194],["assert(buffer.isEmpty)",182],["if (isEmpty)",173],["assert(timer.tasks.isEmpty)",171]],"useCount":23008},{"word":"isInstanceOf","context":[["assert (req2.contentError.isInstanceOf[Exception])",248],["assert(recordedEvent.isInstanceOf[MarkupProvided])",96],["assert(backend.connect().isInstanceOf[java.sql.Connection] )",97],["if (field.isInstanceOf[ChronoField]) {",98],["assert(!rep.eventsReceived.exists(_.isInstanceOf[TestFailed]))",106],["assert(recordedEvent.isInstanceOf[InfoProvided])",96],["e.getCause.isInstanceOf[org.openqa.selenium.NoSuchElementException] should be (true)",96],["assert(causeThrowable.isInstanceOf[DuplicateTestNameException])",76],["class Fruit { override def equals(o: Any) = o.isInstanceOf[Fruit] }",170],["assert (req1.contentError.isInstanceOf[Exception])",248]],"useCount":9040},{"word":"it","context":[["* the current reporter immediately. If invoked at any other time, it will",263],["it(\"should allow RHS to contain duplicated value\") {",270],["if (it.hasNext)",281],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["it should \"work\" in {",441],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["while (it.hasNext) {",755],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["it(\"should use an explicitly provided Equality\") {",1196]],"useCount":95528},{"word":"item","context":[["item",273],["import net.minecraft.item.Item",275],["import net.minecraft.item.ItemStack",945],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["item match {",245],["log.fatal(\"Unknown item \" + unknown.getClass())",170],["result.fold(cancel(\"expected result not computed\")) { item =>",152],["item.getItemId match {",130],["import net.minecraft.item.{Item, ItemStack}",127],["</item>",126]],"useCount":13405},{"word":"items","context":[["items",89],["items.isDefined shouldBe true",80],["* Returns an Observable that emits items that are the results of invoking a specified selector on items",70],["* Returns an Observable that emits items that are the results of invoking a specified selector on items",70],["* @return an Observable that emits items that are the results of invoking the selector on items emitted by",70],["EName(nsOrd, \"items\"),",68],["* @return an Observable that emits items that are the results of invoking the selector on items emitted by",70],["case JSArrayConstr(items) =>",91],["* of items, as you do not have the option to unsubscribe.",110],["items => {",261]],"useCount":8330},{"word":"iter","context":[["if (iter.hasNext) {",214],["while(iter.hasNext) {",208],["iter",191],["iter += 1",185],["iter.remove()",162],["var iter = 0",145],["iter.next()",143],["iter: Int,",124],["val entry = iter.next()",114],["while (iter.hasNext) {",1010]],"useCount":8334},{"word":"iterator","context":[["while(iterator.hasNext) {",115],["val it = args.iterator",102],["val (_, n) = iterator.next()",78],["b.testNames.iterator.toList",216],["iterator.next()",78],[".iterator",117],["* iterator will return those names in the order in which the tests were registered. Each test's name is composed",128],["c.testNames.iterator.toList",203],["a.testNames.iterator.toList",216],["while (iterator.hasNext) {",805]],"useCount":12282},{"word":"its","context":[["* Finds a user by its login info.",90],["* Returns a <code>Documenter</code> that during test execution will forward strings passed to its",98],["* We represent a set by its characteristic function, i.e.",90],["* its `contains` predicate.",90],["* Returns an <code>Informer</code> that during test execution will forward strings (and other objects) passed to its",88],["* Finds a user by its user ID.",79],["*  * Neither the name of JSR-310 nor the names of its contributors",331],["it(\"should return the correct test count from its expectedTestCount method\") {",193],["* known, it is reverted to its default value; if the field is unknown, it is removed",120],["* its tests.",128]],"useCount":10985},{"word":"j","context":[["assert(!j.theTestThatCalled)",211],["j",220],["for (j <- range2) {",226],["var j = 0;",238],["*  @param j  the column index",275],["import play.core.j.PlayMagicForJava._",317],["j = 0",358],["for (j <- b.range2) {",373],["var j = 0",2153],["j += 1",3062]],"useCount":35768},{"word":"jackson","context":[["import com.fasterxml.jackson.core.JsonGenerator",163],["import com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper",133],["import com.fasterxml.jackson.databind.ObjectMapper",774],["import org.json4s.jackson.JsonMethods._",1416],["import com.fasterxml.jackson.module.scala.DefaultScalaModule",585],["import org.json4s.jackson.JsonMethods",141],["import com.fasterxml.jackson.core.JsonParseException",151],["import org.json4s.jackson.Serialization",267],["import com.fasterxml.jackson.databind.JsonNode",215],["import com.fasterxml.jackson.annotation.JsonProperty",188]],"useCount":7807},{"word":"java","context":[["import java.util",4979],["import java.nio.ByteBuffer",4897],["import java.util.concurrent.TimeUnit",4323],["import java.util.Properties",3916],["import java.net.URL",3544],["import java.net.URI",3076],["import java.io._",6140],["import java.util.Date",6599],["import java.io.File",17855],["import java.util.UUID",7625]],"useCount":225565},{"word":"javax","context":[["import javax.swing._",555],["import javax.inject.{Inject, Singleton}",545],["import javax.servlet.ServletContext",484],["import javax.inject._",394],["import javax.sql.DataSource",392],["import javax.ws.rs._",386],["import javax.imageio.ImageIO",563],["import javax.servlet.http.HttpServletRequest",1274],["import javax.inject.Inject",2351],["import javax.inject.Singleton",364]],"useCount":23256},{"word":"jetbrains","context":[["package org.jetbrains.plugins.scala",5764],["import org.jetbrains.plugins.scala.extensions._",1579],["import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes",1189],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672],["import org.jetbrains.plugins.scala.lang.psi.api.statements._",521],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439]],"useCount":43122},{"word":"joda","context":[["import org.joda.time.DateTime",8580],["import org.joda.time._",961],["import org.joda.time.format.DateTimeFormat",932],["import org.joda.time.{DateTime, DateTimeZone}",655],["import org.joda.time.DateTimeZone",349],["import org.joda.time.{DateTimeZone, DateTime}",285],["import org.joda.time.LocalDateTime",236],["import org.joda.time.Duration",221],["import org.joda.time.LocalDate",726],["import org.joda.time.format.ISODateTimeFormat",675]],"useCount":19749},{"word":"join","context":[["server.join",63],["\"join tuples with the same key\" in {",60],["/***** start 5 more memcached servers and join the cluster ******/",70],["* Perform a right outer join of `this` and `other`. For each element (k, w) in `other`, the",96],["* (k, v2) is in `other`. Performs a hash join across the cluster.",64],["server.join()",177],["thread.join()",125],["* Perform a left outer join of `this` and `other`. For each element (k, v) in `this`, the",96],["Future.join(",76],["t.join()",92]],"useCount":7051},{"word":"js","context":[["style: U[js.Any] = undefined,",485],["import scala.scalajs.js",5558],["@js.native",5665],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["@js.annotation.ScalaJSDefined",1291],["import scalajs.js, js.`|`",1311],["import scalajs.js, js.`|`",1311],["import scala.scalajs.js.annotation.ScalaJSDefined",482],["implicit pos: Position): js.Tree = {",433]],"useCount":104488},{"word":"jsaf","context":[["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165]],"useCount":6337},{"word":"json","context":[["val json =",696],["case None => play.api.libs.json.Json.obj()",723],["play.api.libs.json.Json.obj(",812],["import play.api.libs.json.JsObject",658],["import play.api.libs.json.JsValue",960],["<representation mediaType=\"application/json\"/>",851],["import net.liftweb.json._",1200],["import spray.json._",3067],["import play.api.libs.json.Json",4321],["import play.api.libs.json._",6149]],"useCount":63664},{"word":"json4s","context":[["package org.json4s",249],["// json4s",419],["import org.json4s.native.JsonMethods._",597],["import org.json4s.JsonDSL._",1401],["import org.json4s.DefaultFormats",397],["import org.json4s.jackson.Serialization",267],["import org.json4s.JsonAST._",274],["import org.json4s.jackson.JsonMethods._",1416],["import org.json4s._",2679],["import org.json4s.JValue",344]],"useCount":12468},{"word":"junit","context":[["import org.scalatest.junit.JUnitRunner",7883],["import org.junit.Test",6088],["import org.junit.runner.RunWith",11532],["import org.junit._",1167],["import org.junit.Assert",497],["import junit.framework.Assert._",642],["import org.junit.runner._",721],["import org.scalatest.junit.JUnitSuite",751],["import org.scalatest.junit.AssertionsForJUnit",791],["import org.junit.Assert._",4383]],"useCount":43656},{"word":"k","context":[["for (k <- 0 until 20) {",362],["for (k <- 0 until dim1 if k != i) {",242],["for (k <- 0 until dim1 if k != i) {",242],["k += 1",1009],["var k = 0",749],["case (k, v) =>",497],["*  @param k  how far above the main diagonal, e.g., (-1, 0, 1) for (sub, main, super)",228],["case (k: String, v: String) => Entry(k.toUpperCase, v.toUpperCase)",222],["case (k: String, v: String) => Entry(k.toUpperCase, v.toUpperCase)",222],["k",220]],"useCount":31260},{"word":"kafka","context":[["import kafka.message._",538],["import kafka.common.TopicAndPartition",606],["import kafka.utils._",1122],["package kafka.server",705],["import kafka.common._",484],["import kafka.server.KafkaConfig",348],["import kafka.admin.AdminUtils",350],["import kafka.zk.ZooKeeperTestHarness",359],["import kafka.api._",400],["package kafka.api",459]],"useCount":29791},{"word":"kaist","context":[["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331]],"useCount":6419},{"word":"key","context":[["key match {",386],["* @param key",660],["key: String,",566],["key.foreach(v => props.updateDynamic(\"key\")(v))",339],["key.foreach(v => props.updateDynamic(\"key\")(v))",339],["key: U[String | Int] = undefined,",452],["case (key, value) =>",295],["\"the key does not exist\" should {",130],["key",198],["key,",268]],"useCount":54727},{"word":"keys","context":[["require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), \"FieldDescriptor does not match message type.\")",172],[".keys",139],["for (key <- keys) {",93],["keyAtPosition = keys(position)",84],["var keyAtPosition = keys(position)",84],["* Return an RDD containing all pairs of elements with matching keys in `this` and `other`. Each",81],["if (nrows != keys.nrows || ncols != keys.ncols)",78],["if (nrows != keys.nrows || ncols != keys.ncols)",78],["val keysOuter: js.UndefOr[js.Array[String]] = keys",72],["override val keys: js.UndefOr[js.Array[String]] = keysOuter",72]],"useCount":9080},{"word":"kr","context":[["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165],["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517]],"useCount":6430},{"word":"l","context":[["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["collectCutFormulas(l) ++ collectCutFormulas(r)",124],["Tuple2 (l, u)",132],["case _ => l",145],["List(\"-l\", \"SlowTests\"),",149],["case l =>",189],["case Some(l) =>",201],["l",498],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["l match {",889]],"useCount":33992},{"word":"label","context":[["label: String",105],["def label: String",86],["* @param input RDD of (label, array of features) pairs.",178],["label,",111],["label match {",112],["label",122],["__elementLabel getOrElse { sys.error(\"missing element label.\") },",131],["val Label(label) = params[Label]",156],["label: String,",315],["</label>",183]],"useCount":15819},{"word":"lang","context":[["package lang",3070],["import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes",1189],[".ofType(classOf[java.lang.Integer])",1023],["import com.intellij.lang.ASTNode",1023],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672]],"useCount":63514},{"word":"language","context":[["import scala.language.implicitConversions",6306],["import scala.language.postfixOps",4928],["import language.higherKinds",395],["import language.experimental.macros",397],["import com.cra.figaro.language._",599],["import language.implicitConversions",690],["import scala.language.existentials",1156],["import scala.language.reflectiveCalls",2077],["import scala.language.experimental.macros",1886],["import scala.language.higherKinds",1550]],"useCount":25265},{"word":"last","context":[["*  @param u  the vector to be concatenated as the new last row in matrix",75],["last match {",81],["* it should \"pop values in last-in-first-out order\" in { ... }",84],["* ignore should \"pop values in last-in-first-out order\" in { ... }",84],["val part = Integer.valueOf(topicPartition.split(\"-\").last).intValue",69],["* The value up to where the zone extends, if undefined the zones stretches to the last value in the series.",72],["last",95],["// the last row of the matrix that this thread processes",107],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["*  last column augmented by 1.",190]],"useCount":10427},{"word":"lazy","context":[["lazy val root = Project(",332],["lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](",150],["override lazy val settings = super.settings :+ {",151],["override lazy val projectSettings = Seq(",158],["lazy val doc = Jsoup.parse(view.body)",231],["override lazy val tag = {",251],["lazy val tag = {",215],["lazy val target = setupTarget(None)",179],["lazy val structAnnotations: immutable$Map[String, String] =",159],["@transient lazy val logger = Logger[this.type]",261]],"useCount":31628},{"word":"leader","context":[["* Return the leader for each partition.",60],["// wait until leader is elected",96],["WaitTestSupport.waitUntil(\"a leader has been elected\", 30.seconds) { marathon.leader().code == 200 }",56],["WaitTestSupport.waitUntil(\"a leader has been elected\", 30.seconds) { marathon.leader().code == 200 }",56],["* Wait until the leader is elected and the metadata is propagated to all brokers.",60],["var leader: Option[Int] = None",65],["leader",65],["// refresh leader and isr from zookeeper again",69],["info(\"%d/%d replicas have caught up with the leader for partition %s being reassigned.\"",72],["scheduler.leader.set(true)",91]],"useCount":10265},{"word":"left","context":[["*  @param p   the left cursor",187],["def allErrMsg(index: Int, message: String, lineNumber: Int, left: Any): String =",178],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["left",190],["def apply(left: T): MatchResult = {",231],["*  @param p  the left cursor",257],["(left, right) match {",174],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["left,",481]],"useCount":20607},{"word":"len","context":[["check((len: Int) => throwsTestFailedException(new Lengthy(len) should have length (len + 1)))",144],["check((len: Int) => returnsNormally(new Sizey(len) should have size (len)))",144],["check((len: Int) => throwsTestFailedException(new Sizey(len) should have size (len + 1)))",144],["check((len: Int) => throwsTestFailedException(new Lengthy(len) should have length (len + 1)))",144],["check((len: Int) => returnsNormally(new Lengthy(len) should have length (len)))",144],["check((len: Int) => throwsTestFailedException(new Lengthy(len) should have length (len + 1)))",144],["check((len: Int) => returnsNormally(new Lengthy(len) should have length (len)))",144],["check((len: Int) => returnsNormally(new Sizey(len) should have size (len)))",144],["val len = data.length",229],["while (i < len) {",863]],"useCount":8320},{"word":"length","context":[["while (i < length) {",626],["result should have length 3",313],["if (args.length < 2) {",333],["length",354],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["if (args.length == 0) {",402],["var resBytes = Array.ofDim[Byte](rBytes.length)",627],["for (i <- 0 until resBytes.length) {",634]],"useCount":67525},{"word":"level","context":[["level = 1,",125],["* @param storageLevel  Storage level to use for storing the received objects",129],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["level: Int,",114],["level = 2,",384],["level = 3,",166],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["level match {",163],["level += 1",99]],"useCount":10329},{"word":"lhs","context":[["(lhs, rhs) match {",614],["lhs",67],["lhs match {",144],["val lhs = c.prefix.tree",72],["case BinaryOp(op, lhs, rhs) =>",87],["case UnaryOp(op, lhs) =>",87],["case JSBinaryOp(op, lhs, rhs) =>",90],["case Assign(lhs, rhs) =>",142],["val mr = mt(lhs)",116],["case JSUnaryOp(op, lhs) =>",90]],"useCount":6445},{"word":"li","context":[["*   to this method</li>",83],["* @author zepeng.li@gmail.com",182],["<li>",498],["</li>",785],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["*   </li>",83],["* <li><code>testName</code> - the <code>String</code> value of the <code>testName</code> <code>Option</code> passed",83],["* </li>",94],["</a></li>",149]],"useCount":10668},{"word":"lib","context":[["import org.digimead.digi.lib.DependencyInjection",95],["import lib.Text._",100],["import org.eclipse.jgit.lib._",155],["import org.digimead.digi.lib.api.XDependencyInjection",159],["import org.digimead.digi.lib.aop.log",172],["package lib",276],["import org.digimead.digi.lib.log.api.XLoggable",392],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92],["import org.apache.hadoop.mapreduce.lib.input.FileInputFormat",93],["import org.eclipse.jgit.lib.ObjectId",97]],"useCount":7126},{"word":"libraryDependencies","context":[["libraryDependencies ++= provided(play.api, RM, PRM)",222],["libraryDependencies ++= provided(",183],["libraryDependencies ++= Seq(",3788],["libraryDependencies <++= (scalaVersion) { scalaVersion => Seq(",170],["libraryDependencies ++=",161],["libraryDependencies ++= {",108],["libraryDependencies ++= appDependencies,",106],[".settings(libraryDependencies ++=",86],["libraryDependencies ++= jacksonLibs",85],["libraryDependencies ++= testDependencies,",82]],"useCount":7354},{"word":"libs","context":[["import play.api.libs.concurrent.Execution.Implicits._",1360],["import play.api.libs.functional.syntax._",1600],["import play.api.libs.json.JsValue",960],["play.api.libs.json.Json.obj(",812],["import play.api.libs.json.Json",4321],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556],["case None => play.api.libs.json.Json.obj()",723],["import play.api.libs.json.JsObject",658],["import play.api.libs.iteratee._",612],["import play.api.libs.json._",6149]],"useCount":32653},{"word":"liftweb","context":[["import _root_.net.liftweb.util._",560],["import net.liftweb.json._",1200],["package net.liftweb",1060],["import net.liftweb.util.Helpers._",917],["import net.liftweb.common._",1874],["import net.liftweb._",725],["import net.liftweb.util._",700],["import net.liftweb.http._",641],["package net.liftweb {",619],["import net.liftweb.common.Box",426]],"useCount":21269},{"word":"lila","context":[["import lila.user.User",326],["import lila.app._",298],["import lila.db.dsl._",292],["import lila.user.{ User, UserRepo }",230],["import lila.api.Context",219],["package lila.tournament",217],["import lila.common.PimpedConfig._",193],["import lila.common.PimpedJson._",227],["package lila.game",177],["import lila.db.api._",174]],"useCount":11530},{"word":"limit","context":[["Some(\"limit\" -> limit.toString),",151],["limit: Long = 25,",459],["limit: Option[Int] = None,",133],["limit: Int,",137],["Some(\"limit\" -> limit.toString),",151],["limit: Int",173],["// scalastyle:off line.size.limit",174],["| limit 100",188],["limit = limit,",263],["limit = limit,",263]],"useCount":8571},{"word":"linalg","context":[["import org.apache.spark.mllib.linalg.distributed.RowMatrix",121],["import org.apache.spark.mllib.linalg._",185],["import breeze.linalg._",1279],["import org.apache.spark.mllib.linalg.Vectors",757],["import org.apache.spark.mllib.linalg.Vector",373],["import breeze.linalg.DenseVector",752],["import breeze.linalg.DenseMatrix",369],["import org.apache.spark.mllib.linalg.{Vector, Vectors}",230],["package breeze.linalg",416],["import breeze.linalg.{DenseMatrix, DenseVector}",151]],"useCount":7196},{"word":"line","context":[["line",290],["while (line != null) {",258],["for (line <- lines) {",197],["println(line)",175],["// scalastyle:off line.size.limit",174],["var line: String = null",149],["line =>",151],["val line = Line(1, 1, \"\")",387],["* you must retain the producer line in every report, form or document",540],["line match {",333]],"useCount":17818},{"word":"list","context":[["* all returns a list of all the valid, known values. We use",218],["* @param testTags the optional list of tags for this test",316],["import scalaz.std.list._",421],["* @param xs A list of natural numbers",162],["/* list of properties in the instance object */",155],["props.put(\"metadata.broker.list\", brokerList)",117],["list",614],["list match {",610],[".list",423],["freshRack, // list of tasks register in the cluster",111]],"useCount":30204},{"word":"load","context":[["private val config = ConfigFactory.load()",139],["* val configuration = Configuration.load()",149],["val conf = ConfigFactory.load()",150],[".load()",151],["val textCaseXml = XML.load(source)",270],["ConfigFactory.load()",78],["val conf = ConfigFactory.load(\"test01\")",89],["val config = ConfigFactory.load",93],["val config = ConfigFactory.load()",526],["load()",91]],"useCount":7966},{"word":"local","context":[["sc = new SparkContext(\"local\", \"test\")",878],["Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")",265],["Some(\"releases\" at nexus + \"service/local/staging/deploy/maven2\")",246],[".setMaster(\"local[*]\")",152],[".setMaster(\"local\")",125],["sc = new SparkContext(\"local\", \"test\", conf)",92],["// A definition of factorial, using a local, tail recursive function",98],["/** Distribute a local Scala collection to form an RDD. */",100],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["val output = runInterpreter(\"local\",",115]],"useCount":10670},{"word":"locationtech","context":[["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["package org.locationtech.geomesa.utils.geotools",119],["import org.locationtech.geomesa.filter._",123],["package org.locationtech.geomesa.accumulo.data",153],["import org.locationtech.geomesa.features.ScalaSimpleFeature",182],["package org.locationtech.geomesa.accumulo.iterators",191],["package org.locationtech.geomesa.accumulo.index",212],["import org.locationtech.geomesa.utils.geotools.Conversions._",276]],"useCount":9730},{"word":"log","context":[["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private[this] val log = Logger.getLogger(getClass.getName)",338],["log.info(",354],["private val log = LoggerFactory.getLogger(getClass)",336],["val log = streams.value.log",308],["import org.digimead.digi.lib.log.api.XLoggable",392],["package kafka.log",285],["val log = streams.value.log",308],["log.append(set)",328],["val log = LoggerFactory.getLogger(getClass)",453]],"useCount":42600},{"word":"logger","context":[["logger.debug(\"\", e)",305],["val logger = LoggerFactory.getLogger(getClass)",304],["@transient lazy val logger = Logger[this.type]",261],["logger.error(msg)",239],["if (logger.isDebugEnabled) {",213],["logger.info(",174],["val logger = LoggerFactory.getLogger(this.getClass)",167],["logger.finest(",640],["logger.debug(",152],["if (logger.isDebugEnabled)",159]],"useCount":16565},{"word":"logging","context":[["import java.util.logging.Level",346],["import org.apache.logging.log4j._",152],["import org.apache.commons.logging.LogFactory",201],["import org.scalaide.logging.HasLogger",249],["import java.util.logging.{Level, Logger}",380],["import com.twitter.logging.Logger",682],["import java.util.logging.Logger",877],["import org.apache.logging.log4j.{ Logger, LogManager }",152],["util(\"logging\"),",118],["import org.scalajs.core.tools.logging._",136]],"useCount":8437},{"word":"loop","context":[["def loop(): Unit = {",75],["loop()",912],["loop {",387],["// ending loop",132],["loop(this)",78],["loop.done",96],["// Another implementation of `factorial`, this time with a `while` loop",97],["loop",129],["def loop() {",129],["loop(0)",164]],"useCount":6584},{"word":"m","context":[["case Some(m) =>",494],["m",1383],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["for (m <- i.methods) {",136],["m =>",148],["sentMessages.zipWithIndex foreach { case (m, i) =>",159],["if (dim2 != dim1 + 1) flaw (\"nullspace\", \"requires n (columns) = m (rows) + 1\")",174],["case m =>",187],["*  FIX: remove the 'n = m+1' restriction.",190],["m match {",411]],"useCount":31264},{"word":"macros","context":[["import chandu0101.macros.tojs.JSMacro",316],["import scala.reflect.macros._",139],["import breeze.macros.expand",157],["import scala.reflect.macros.whitebox",233],["import scala.reflect.macros.whitebox.Context",292],["import scala.reflect.macros.blackbox",308],["import language.experimental.macros",397],["import scala.reflect.macros.Context",577],["import scala.reflect.macros.blackbox.Context",651],["import scala.language.experimental.macros",1886]],"useCount":6940},{"word":"main","context":[["def main(args: Array[String]) {",11494],["def main(): Unit = {",304],["* in the main documentation for trait <code>FlatSpec</code>.",405],["val main = play.Project(appName, appVersion, appDependencies).settings(",406],["def main(args : Array[String]) {",410],["test.c: In function 'main':",906],["|  def main(args: Array[String]) {",1041],["def main(args: Array[String]) = {",1296],["void main() {",1437],["def main(args: Array[String]): Unit = {",6748]],"useCount":36664},{"word":"make","context":[["buf += 99 // Mutate to make sure no other test sees this",240],["* This method just provides syntax sugar intended to make the intent of the code clearer.",65],["* @param end The final bound of the range to make.",69],["// At end of previous describe, buf equaled List(1). Now doing it again to make",88],["// Memoized request function first checks to make sure the cache",108],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["// Check to make sure the error message \"short circuits\" (i.e., just reports the left side's failure)",137],["* generated. We want to make it easy and obvious for users of",217],["def make(",239],["vec :+= 99 // Mutate to make sure no other test sees this",288]],"useCount":8232},{"word":"manager","context":[["import kafka.manager.features.ClusterFeatures",75],["package kafka.manager",195],["config.put(kafka.manager.utils.logkafka82.LogConfig.TopicProp, createLogkafkaTopic)",76],["def manager = IdleManager",63],["val manager = new TaskSetManager(sched, taskSet, MAX_TASK_FAILURES, clock)",58],["import mesosphere.marathon.core.matcher.manager.OfferMatcherManager",57],["manager.stop()",84],["import org.infinispan.manager.DefaultCacheManager",86],["package kafka.manager.utils",95],["val dummyFile = PsiFileFactory.getInstance(manager.getProject).",360]],"useCount":7092},{"word":"map","context":[["// create path and map variables",245],[".map(_._2)",274],["partialMessage.toComplete.map(Right(_)).getOrElse({",296],["val authorizedAction = requireAuth(clientData).map { implicit client ⇒",303],["__obj.attributes.toList map {",325],["promise.future.map { repo =>",602],["} map {",632],["}.map {",644],["map",932],[".map {",1125]],"useCount":105849},{"word":"marathon","context":[["import mesosphere.marathon.Protos.MarathonTask",363],["package mesosphere.marathon",761],["import mesosphere.marathon.state.PathId._",497],["import mesosphere.marathon.core.task.Task",486],["import mesosphere.marathon.state._",440],["package mesosphere.marathon.upgrade",261],["package mesosphere.marathon.api.v2",303],["import mesosphere.marathon.api.v2.json.Formats._",322],["package mesosphere.marathon.state",355],["import mesosphere.marathon.metrics.Metrics",394]],"useCount":19928},{"word":"match","context":[["e match {",1295],["event match {",1411],["builder.getTokenType match {",1216],["other match {",1213],["t match {",1803],["this match {",1881],["result match {",1883],["value match {",2570],["tree match {",2031],["} match {",1997]],"useCount":188354},{"word":"matches","context":[["matches",88],["'matches (false),",316],["'matches (true),",310],["if (result.matches != shouldBeTrue)",109],["it(\"should do nothing when object size matches and used in a logical-or expression\") {",72],["def `should throw an assertion error when object length matches and used in a logical-and expression with not` {",72],["mr.matches shouldBe true",76],["if (result.matches != shouldBeTrue) {",82],["if (matcherResult.matches != shouldBeTrue) {",84],["def `should do nothing when object size matches and used in a logical-and expression` {",72]],"useCount":6874},{"word":"math","context":[["import scala.math.BigInt",192],["import scala.math",204],["import spire.math.Rational",207],["import scala.math.abs",226],["import java.math.BigDecimal",251],["import spire.math._",310],["import math._",446],["import java.math.BigInteger",679],["import scala.math._",1277],["import scala.math.Ordering",179]],"useCount":14682},{"word":"matrix","context":[["*  @param b  the matrix to multiply by (requires sameCrossDimensions)",139],["*  @param b  the matrix to add (requires leDimensions)",213],["*  @param u  the upper triangular matrix",130],["*  @param q  the size of identity matrix Iq",117],["*  @param col   the column to extract from the matrix",121],["*  @param p  the size of identity matrix Ip",124],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["*  @param b  the matrix to subtract (requires leDimensions)",182],["if (dim2 != b.dim1) flaw (\"*\", \"matrix * matrix - incompatible cross dimensions\")",175],["if (dim2 != b.dim1) flaw (\"*\", \"matrix * matrix - incompatible cross dimensions\")",175]],"useCount":20907},{"word":"max","context":[["val (j, l) = (math.max (-k, 0), math.min (dim1-k, dim1))",66],["var max = 0.0",69],["* @author max talanov",75],["import scala.math.max",173],["max",195],["} // max",206],["}.max",66],["var max = Double.MinValue",64],[".check(headerRegex(\"Cache-Control\", \"max-age=864000, public\")))",63],["* sure your `sum` and `max` methods work as expected.",62]],"useCount":9200},{"word":"mesosphere","context":[["import mesosphere.marathon.state.PathId._",497],["import mesosphere.marathon.core.task.Task",486],["import mesosphere.marathon.state._",440],["import mesosphere.marathon.metrics.Metrics",394],["import mesosphere.marathon.Protos.MarathonTask",363],["package mesosphere.marathon.state",355],["import mesosphere.marathon.api.v2.json.Formats._",322],["package mesosphere.marathon.api.v2",303],["import mesosphere.mesos.protos.Implicits._",272],["package mesosphere.marathon",761]],"useCount":20657},{"word":"message","context":[["e.message should be (",824],["case message =>",435],["message match {",531],["import kafka.message._",538],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["message: String,",631],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594]],"useCount":59826},{"word":"messages","context":[["messages.clear()",93],["override def validate(name: String, value: String, messages: Messages): Option[String] = {",98],["messages",224],["// send some messages to each broker",195],["assertMatches(messages(code)) {",165],["override def validate(name: String, value: String, messages: Messages): Option[String] =",146],["* @param messagesApi The Play messages API.",134],["// send some messages",126],["val messages = configureMessageReader(handle)",118],["* The error messages.",102]],"useCount":15087},{"word":"meta","context":[["import djinni.meta._",153],["import scala.annotation.meta.field",186],["import scala.slick.jdbc.meta.MTable",134],["import slick.jdbc.meta.MTable",126],["</meta>",112],["import scala.meta._",480],["import scala.meta.dialects.Scala211",382],["package scala.meta",377],["val resp = meta()",247],["val meta = Http(req)",247]],"useCount":7124},{"word":"metadata","context":[["import com.ligadata.kamanja.metadata.MdMgr._",55],["import com.ligadata.kamanja.metadata._",174],["props.put(\"metadata.broker.list\", brokerList)",117],["import org.beangle.commons.entity.metadata.Model",66],["// wait until the update metadata request for new topic reaches all servers",63],["val metadata = DefaultParamsReader.loadMetadata(path, sc, className)",60],["* Wait until the leader is elected and the metadata is propagated to all brokers.",60],["assertEquals(\"Expecting metadata for 1 partition\", 1, partitionMetadata.size)",57],["DefaultParamsReader.getAndSetParams(model, metadata)",56],["metadata,",74]],"useCount":8975},{"word":"method","context":[["<method name=\"PUT\">",459],["<method name=\"GET\"/>",490],["* For example, this method supports syntax such as the following:",501],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This instance is immutable and unaffected by this method call.",998],["* This method supports syntax such as the following:",1004],["* This method enables syntax such as the following:",1148],["<method name=\"POST\">",1293],["</method>",2285],["* This method enables the following syntax:",3913]],"useCount":48689},{"word":"methods","context":[["* All factory methods throw <code>NullPointerException</code> if any of the passed values are <code>null</code>.",84],["* methods. The name of the test will be a concatenation of the text of all surrounding describers,",129],["for (m <- i.methods) {",136],["import org.apache.http.client.methods.HttpGet",144],["* The following methods are already implemented",209],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["import org.apache.http.client.methods.HttpPost",109],["* This class is used in conjunction with an implicit conversion to enable <code>should</code> methods to",100],["* to enable <code>should</code> methods to be invokable on that object.",99],["* methods <code>test</code> and <code>ignore</code>.",125]],"useCount":8146},{"word":"metrics","context":[["implicit val metrics = new Metrics(new MetricRegistry)",123],["metrics: Metrics,",128],["import org.apache.kafka.common.metrics.Metrics",137],["metrics",137],["metrics,",142],["import com.codahale.metrics.annotation.Timed",172],["import kafka.metrics.KafkaMetricsGroup",333],["import com.yammer.metrics.core.Gauge",336],["import mesosphere.marathon.metrics.Metrics",394],["import com.codahale.metrics.MetricRegistry",548]],"useCount":8634},{"word":"minecraft","context":[["import net.minecraft.item.ItemStack",945],["import net.minecraft.block.material.Material",272],["import net.minecraft.item.Item",275],["import net.minecraft.client.Minecraft",334],["import net.minecraft.tileentity.TileEntity",407],["import net.minecraft.nbt.NBTTagCompound",484],["import net.minecraft.block.Block",563],["import net.minecraft.world.World",850],["import net.minecraft.entity.player.EntityPlayer",929],["import net.minecraft.entity.Entity",265]],"useCount":9932},{"word":"mkString","context":[["}.mkString(\",\")",198],["}.mkString(\"\")",102],["if (BuildConfig.DEBUG) Log.d(TAG, cmd.mkString(\" \"))",105],[".mkString",123],[".mkString(\"\\n\")",130],["}).mkString(\"\\n\")",147],[").mkString(\"\\n\")",214],["}.mkString(\", \")",227],["}.mkString",248],["}.mkString(\"\\n\")",498]],"useCount":14310},{"word":"mllib","context":[["import org.apache.spark.mllib.linalg.distributed.RowMatrix",121],["import org.apache.spark.mllib.regression.LabeledPoint",896],["import org.apache.spark.mllib.linalg.Vectors",757],["import org.apache.spark.mllib.linalg.Vector",373],["import org.apache.spark.mllib.util.MLUtils",347],["import org.apache.spark.mllib.linalg.{Vector, Vectors}",230],["package org.apache.spark.examples.mllib",216],["import org.apache.spark.mllib.linalg._",185],["import org.apache.spark.mllib.util.MLlibTestSparkContext",182],["import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics",123]],"useCount":7993},{"word":"mock","context":[["val storage = mock[Storage]",201],["val requestHolder = mock[WSRequest]",230],["* You can mock out a whole application including requests, plugins etc.",261],["import org.scalatest.mock.MockitoSugar",3559],["import org.specs2.mock.Mockito",1192],["val protocol = mock[TProtocol]",407],["import org.specs.mock.Mockito",348],["val response = mock[WSResponse]",317],["val extraArguments = Seq(mock[JDIRequestArgument])",309],["val driver = mock[SchedulerDriver]",193]],"useCount":23821},{"word":"mockito","context":[["import org.mockito.Matchers.any",370],["import org.mockito.Mockito._",2720],["import org.mockito.Matchers._",965],["import org.mockito.Mockito",451],["import org.mockito.Matchers",433],["import org.mockito.invocation.InvocationOnMock",375],["import org.mockito.stubbing.Answer",365],["import org.mockito.Mockito.when",337],["import org.mockito.ArgumentCaptor",232],["import org.scalatest.mockito.MockitoSugar",179]],"useCount":8583},{"word":"mode","context":[["mode match {",482],["if (ctx.mode is Mode.Type)",58],[".mode(SaveMode.Append)",64],["override def createTap(readOrWrite: AccessMode)(implicit mode: Mode): Tap[_, _, _] = {",66],["|      \"mode\": \"RW\"",80],["mode = Mode.RO",80],["def runStats(conf: Config, mode: Mode, cache: EvalCache)(implicit cec: ConcurrentExecutionContext) =",82],["mode: SaveMode,",88],[".mode(SaveMode.Overwrite)",92],["mode: Mode,",122]],"useCount":6533},{"word":"model","context":[["import rpgboss.model._",188],["package model",1129],["import model._",582],["model",515],["import akka.http.scaladsl.model._",506],["import akka.http.scaladsl.model.StatusCodes._",340],["import akka.http.scaladsl.model.StatusCodes",324],["import hmda.model.fi.lar.LoanApplicationRegister",253],["package io.swagger.client.model",193],["model,",206]],"useCount":36353},{"word":"models","context":[["import collins.models.Asset",176],["package models",3595],["import models._",2342],["import models.User",768],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["package models.daos",249],["import im.actor.server.models",163],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172]],"useCount":24920},{"word":"modify","context":[["* to modify lift's environment",175],["* modify, merge, publish, distribute, sublicense, and/or sell copies",112],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",180],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",224],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",260],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["// test indirect sorting (will not modify the data array)",143],["// test direct sorting (will modify the data array)",143]],"useCount":6605},{"word":"module","context":[["val module = new AbstractModule with ScalaModule {",86],["<exclude module=\"jmxtools\"/>",76],["import com.esofthead.mycollab.module.user.domain.SimpleUser",77],["<exclude module=\"jms\"/>",76],["<exclude module=\"jmxri\"/>",76],["import com.fasterxml.jackson.databind.module.SimpleModule",115],["import com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper",133],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["import com.intellij.openapi.module.Module",196],["import com.fasterxml.jackson.module.scala.DefaultScalaModule",585]],"useCount":9212},{"word":"more","context":[["* more details.                                                               *",352],["// And more",119],["* Type :help for more information.",140],["* bytefrog: a tracing framework for the JVM. For more information",176],["*  FIX: need a more robust algorithm for computing nullspace (@see Fac_QR.scala).",190],["* For more information see",197],["* For more information, consult the wiki.",260],["* Code Pulse: A real-time code coverage testing tool. For more information",106],["* For more information, please contact Digimead Team at this",540],["* more details.",387]],"useCount":11176},{"word":"msg","context":[["info(msg)",600],["msg match {",1011],["override def process(msg: AnyRef) {",498],["println(msg)",404],["case msg =>",312],["msg",305],["val msg =",258],["val msg = \"hi there, dude\"",250],["logger.error(msg)",239],["* @param msg",123]],"useCount":21300},{"word":"must","context":[["*                       the new DStream will generate RDDs); must be a multiple of this",321],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["contentAsString(result) must equalTo(\"\")",292],["options must haveLength(1)",287],["status(result) must equalTo(OK)",561],["* of this program must display Appropriate Legal Notices, as required under",540],["* you must retain the producer line in every report, form or document",540],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["tree.errors must beEmpty",377],["assert(statement._2.namespace._1 == gaapNS, \"Concept must belong to gaap namespace\")",389]],"useCount":50678},{"word":"mustEqual","context":[["res.successful mustEqual true",98],["testContext.run(q).string mustEqual",361],["actual mustEqual expected",102],["status(result) mustEqual OK",102],["status(result) mustEqual BAD_REQUEST",105],["stmt\"${(q.ast: Ast).token}\" mustEqual",123],["decoded.asScala mustEqual orig",126],["tree.errors mustEqual Set(OperationOnUnrelatedSets)",166],["response.isDefined mustEqual true",221],["tree.provenance mustEqual NullProvenance",247]],"useCount":10553},{"word":"mutable","context":[["import scala.collection.mutable",12078],["import collection.mutable.ListBuffer",854],["import scala.collection.mutable.Buffer",929],["import scala.collection.mutable.Map",1265],["import collection.mutable",1419],["import scala.collection.mutable.HashMap",2382],["import org.specs2.mutable._",4558],["import scala.collection.mutable.ListBuffer",4804],["import org.specs2.mutable.Specification",6153],["import scala.collection.mutable.ArrayBuffer",7092]],"useCount":67371},{"word":"mvc","context":[["import play.api.mvc.Request",328],["import play.mvc.Http.Context.Implicit._",320],["import play.api.mvc._",5405],["import play.api.mvc.{Action, Controller}",722],["import play.api.mvc.Action",627],["import play.api.mvc.Results._",592],["import play.api.mvc.Controller",565],["import play.api.mvc.RequestHeader",540],["import play.api.mvc.Result",390],["import play.mvc._",335]],"useCount":13541},{"word":"mytags","context":[["\"test that\" taggedAs(mytags.SlowAsMolasses) in { fixture => theTestThatCalled = true }",161],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { theTestThisCalled = true }",84],["registerTest(\"test that\", mytags.SlowAsMolasses) { theTestThatCalled = true }",84],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.FastAsLight) in { fixture => theTestThisCalled = true }",92],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.FastAsLight) in { fixture => theTestThisCalled = true }",92],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.WeakAsAKitten) is (pending)",98],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.WeakAsAKitten) is (pending)",98],["\"test that\" taggedAs(mytags.SlowAsMolasses) in { theTestThatCalled = true }",105],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { fixture => theTestThisCalled = true }",123],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { fixture => theTestThisCalled = true }",123]],"useCount":8664},{"word":"n","context":[["case n =>",416],["\"\"\".stripMargin.replaceAll(\"\\n\", \" \"))",430],["}.mkString(\"\\n\")",498],["var n = 0",553],["n += 1",604],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["fast\"Hello, World!${start}blahblah$i${p1}\\n${p2}blahblah\" ->",640],["n match {",676],["n",825],["while (i < n) {",836]],"useCount":79175},{"word":"name","context":[["name = name,",557],["name: String,",4715],["def name: String",1791],["name",1302],["<method name=\"POST\">",1293],["name,",1234],["val name: String",758],["name match {",741],["name = name,",557],["val name: String,",700]],"useCount":165424},{"word":"names","context":[["it(\"should return the test names in order of registration from testNames\") {",69],["*  o Neither the name of AIOTrade Computing Co. nor the names of",414],["* iterator will return those names in the order in which the tests were registered. Each test's name is composed",128],["names",119],["import tiny.names.Name",86],["* * Neither the name of the authors nor the names of their",85],["* Neither the name \"<PRODUCT NAME>\" nor the names of its contributors",73],["*  Neither the name of the project \"Reachability\" nor the names of its",70],["*   Neither the name of the Radboud University Nijmegen nor the names of its",61],["*  * Neither the name of JSR-310 nor the names of its contributors",331]],"useCount":7878},{"word":"native","context":[["@native",646],["import org.json4s.native.JsonMethods._",597],["import org.json4s.native.Serialization",242],["import org.json4s.native.Serialization.write",154],["import org.json4s.native.Serialization._",133],["var name: String = js.native",79],["import org.json4s.native.JsonMethods.parse",74],["import org.json4s.native.Serialization.read",73],["var y: Double = js.native",72],["@js.native",5665]],"useCount":12008},{"word":"need","context":[["* need not necessarily correspond to one class. Nevertheless, it most cases each suite will correspond",65],["* or visit www.oracle.com if you need additional information or have any",372],["*  FIX: need a more robust algorithm for computing nullspace (@see Fac_QR.scala).",190],["// we need an ActorSystem to host our application in",134],["* constructs. You might need to define an auxiliary method.",81],["* need to be able to say which of two tweets is larger, or if they are equal). In",70],["* To run this on your local machine, you need to first run a Netcat server",59],["* If the fixture you want to pass into your tests consists of multiple objects, you will need to combine",68],["* to <code>Builder</code>, you need only switch the order you mix them together, like this:",62],["* `Lists` that need to be implemented as part of this assignment. A test",62]],"useCount":7539},{"word":"net","context":[["import net.liftweb.common._",1874],["import net.liftweb.util.Helpers._",917],["import net.minecraft.entity.player.EntityPlayer",929],["import net.minecraft.item.ItemStack",945],["package net.liftweb",1060],["import net.liftweb.json._",1200],["import java.net.InetAddress",1356],["import java.net.InetSocketAddress",2570],["import java.net.URI",3076],["import java.net.URL",3544]],"useCount":63715},{"word":"netty","context":[["import io.netty.buffer.ByteBuf",429],["import org.jboss.netty.buffer.ChannelBuffer",606],["import org.jboss.netty.channel._",480],["import org.jboss.netty.handler.codec.http._",433],["import io.netty.channel.socket.SocketChannel",161],["import io.netty.channel.nio.NioEventLoopGroup",165],["import io.netty.channel._",230],["import org.jboss.netty.buffer.{ChannelBuffer, ChannelBuffers}",318],["import org.jboss.netty.buffer.ChannelBuffers",394],["import io.netty.buffer.Unpooled",156]],"useCount":9557},{"word":"new","context":[["val rep = new EventRecordingReporter",2459],["val sc = new SparkContext(conf)",2072],["val f = new Fixture",1701],["val props = new Properties()",1495],["throw new IllegalArgumentException(",1220],["val sb = new StringBuilder",1196],["val conf = new SparkConf()",1023],["val spec = new MySpec",997],["val reporter = new EventRecordingReporter",977],["throw new UnsupportedOperationException",927]],"useCount":397905},{"word":"next","context":[["iter.next()",143],["override def next() = {",150],["while (rs.next()) {",171],["next match {",245],["val result = ri.next()",249],["val sameRecord = dataFileReader.next()",264],["def next = {",348],["def next() = {",459],["next()",649],["next",511]],"useCount":22034},{"word":"nio","context":[["import java.nio.file.{Files, Paths}",354],["import java.nio.channels._",373],["import java.nio.file._",385],["import java.nio._",567],["import java.nio.file.Files",763],["import java.nio.charset.Charset",1952],["import java.nio.file.Paths",841],["import java.nio.charset.StandardCharsets",1071],["import java.nio.ByteBuffer",4897],["import java.nio.file.Path",1084]],"useCount":18125},{"word":"no","context":[["* Contact: SINTEF ICT <nicolas.ferry@sintef.no>",146],[".check(headerRegex(\"Cache-Control\", \"no-cache\")))",105],["// no function",118],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["it(\"should throw an exception if there is no underlying profile\") {",122],["\"TestScheduler should have no pending tasks\")",130],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["buf += 99 // Mutate to make sure no other test sees this",240],["vec :+= 99 // Mutate to make sure no other test sees this",288],["* Federal Ministry of Education and Research (grant no. 17N4409).",338]],"useCount":18487},{"word":"node","context":[["* @param node",125],["// update config data node, which triggers the pool update",126],["scala.collection.immutable.ListMap((node match {",125],["case Some(node) =>",124],["def this(node: ASTNode) = {this(null, null, node)}",128],["def this(node: ASTNode) = {this(null, null, node)}",128],["override def getInsList(node: Node): List[(String, PropValue)] = node match {",130],["override def getInsList(node: Node): List[(String, PropValue)] = node match {",130],["node",609],["node match {",865]],"useCount":21254},{"word":"nodes","context":[["import org.jsoup.nodes.Document",142],["import com.normation.rudder.domain.nodes.NodeInfo",153],["import org.jsoup.nodes.Element",151],["import kr.ac.kaist.jsaf.scala_src.nodes._",149],["import com.normation.rudder.domain.nodes.NodeGroupId",130],["clusterClient.nodes returns nodeSet",145],["import es.weso.rdf.nodes._",124],["import kr.ac.kaist.jsaf.nodes._",108],["import com.normation.rudder.domain.nodes._",107],["import com.normation.rudder.domain.nodes.NodeGroup",102]],"useCount":7339},{"word":"non","context":[["* Mark the RDD as non-persistent, and remove all blocks for it from memory and disk.",55],["/** Check whether 'this' matrix is bidiagonal (has non-zreo elements only in",60],["case _ => throw new RuntimeException(\"Got a non-SpecReport\")",69],["* Note that only non-bottom states are included in the map, which means empty map is returned",72],["* binary, for any purpose, commercial or non-commercial, and by any",81],["*  Ex: Can be used to divide a matrix into a basis and a non-basis.",84],["/* (non-Javadoc)",55],["* Checks that all required fields are non-null.",167],["\"non-empty errors\" |: (errors.nonEmpty ?= true),",88],["*     Given a non-empty stack",85]],"useCount":7732},{"word":"nonEmpty","context":[["while (rest.nonEmpty) {",56],["if (result.failures.nonEmpty) {",59],["def nonEmpty: Boolean = !isEmpty",62],["if (_passthroughFields.nonEmpty) {",64],["result.list.nonEmpty",65],["if (keys.nonEmpty) {",68],["require( s.nonEmpty, \"Unary rule needs at least one sequent for lookup!\" )",70],["\"non-empty errors\" |: (errors.nonEmpty ?= true),",88],[".filter(_.nonEmpty)",122],["if (errors.nonEmpty) {",54]],"useCount":6769},{"word":"normation","context":[["import com.normation.rudder.domain.policies._",259],["import com.normation.inventory.domain.NodeId",519],["import com.normation.eventlog.ModificationId",427],["import com.normation.cfclerk.domain._",191],["import com.normation.rudder.domain.policies.DirectiveId",213],["import com.normation.rudder.repository._",228],["import com.normation.rudder.domain.policies.RuleId",240],["import com.normation.utils.HashcodeCaching",394],["import com.normation.utils.StringUuidGenerator",281],["import com.normation.eventlog.EventActor",289]],"useCount":14822},{"word":"not","context":[["* Automatically generated file. Please do not edit.",1311],["// An Ignored test that was not included should not generate a TestIgnored event",225],["// An Ignored test that was not included should not generate a TestIgnored event",225],["// An Ignored test that was both included and excluded should not generate a TestIgnored event",225],["break //todo: break is not supported",236],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["and CONFIG_X86_LOCAL_APIC and not(CONFIG_NEED_MULTIPLE_NODES)",307],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["//remove if not needed",407],["and not((CONFIG_X86_LOCAL_APIC and CONFIG_NEED_MULTIPLE_NODES)",423]],"useCount":89688},{"word":"nothing","context":[["//do nothing",122],["it(\"should do nothing when RHS contain duplicated value\") {",114],["// Do nothing",118],["case _ => //do nothing",135],["// do nothing",238],["case _ => // do nothing",253],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["* <p>The default implementation does nothing.</p>",254]],"useCount":15004},{"word":"now","context":[["timestamp: String = Timestamp.now().toString)",120],["val now = DateTime.now()",106],["clock.now returns now",106],["val now = Time.now",113],["val now = Time.now",113],["val now = new DateTime",132],["val now = DateTime.now",209],["val now = DateTime.now",209],["val now = System.currentTimeMillis()",360],["val now = System.currentTimeMillis",298]],"useCount":12401},{"word":"null","context":[["null,",4174],["null",8073],["case _ => null",2374],["null, //",2242],["return null",1926],["case null =>",1244],["else null",873],["case null => None",704],["case null => null",671],["case null => null",671]],"useCount":136620},{"word":"number","context":[["number += 1",405],["// scalastyle:off magic.number",214],["*        number of milliseconds since the standard base time known as \"the epoch\":  January 1, 1970, 00:00:00 GMT",166],["var number = 0",154],["//scalastyle:off magic.number",146],["*  @param stream  the random number stream",127],["case None => fail(\"Didn't produce a file name and line number string: \", caught)",109],["// validate the total number of query-hits",108],["// Exercise 1: Write a function to compute the nth fibonacci number",96],["number: Int,",88]],"useCount":20055},{"word":"o","context":[["class Fruit { override def equals(o: Any) = o.isInstanceOf[Fruit] }",170],["o match {",668],["*  o Neither the name of AIOTrade Computing Co. nor the names of",414],["override def equals(o: Any) = o match {",320],["override def equals(o: Any) = o match {",320],["o",257],["Sample(o, count(sourceCount), sum(sourceCount), Zero, Zero)",207],["case o: ScObject =>",177],["class Fruit { override def equals(o: Any) = o.isInstanceOf[Fruit] }",170],["override def equals(o: Any): Boolean = o match {",163]],"useCount":28575},{"word":"obj","context":[["obj match {",947],["val pckl = obj.pickle",203],["Ok(Json.obj(",192],["Json.obj(",2456],["play.api.libs.json.Json.obj(",812],["case None => play.api.libs.json.Json.obj()",723],["obj(",315],["override def equals(obj: Any): Boolean = {",285],["val resolved = resolve(obj)",216],["obj",436]],"useCount":36502},{"word":"object","context":[["object Solution {",580],["* The interactive user interfaces in modified source and object code versions",539],["object Implicits {",600],["object ApplicationBuild extends Build {",701],["object Application extends Controller {",779],["object Test extends dotty.runtime.LegacyApp {",832],["object Main extends App {",1221],["object Dependencies {",1241],["object Main {",1680],["object Test {",2134]],"useCount":127634},{"word":"of","context":[["* disclosing the source code of your own applications.",540],["* This file is part of Rudder.",604],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This file is part of Neo4j.",1823],["* A \"Related Module\" means a set of sources files including their",1872],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* documentation that, without modification of the Source Code, enables",1872]],"useCount":228386},{"word":"off","context":[["// scalastyle:off",635],["val off = Mat.oneBased",95],["off += 1",97],["//scalastyle:off",122],["//scalastyle:off magic.number",146],["// scalastyle:off null",162],["// scalastyle:off line.size.limit",174],["// scalastyle:off magic.number",214],["// $example off$",537],["// scalastyle:off println",784]],"useCount":6383},{"word":"offset","context":[["offset",192],["offset = offset",148],["var aoff = a.offset",194],["offset: Long = 0,",222],["offset: Long = 0",267],["val offset = editor.getCaretModel.getOffset",197],["var offset = 0",445],["offset = offset",148],["offset: Int,",132],["offset += 1",359]],"useCount":22958},{"word":"on","context":[["assert(e.getMessage == \"on purpose\")",270],[").on(",325],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["// $example on$",536],["// create my cluster client solely based on a zk client and a path",258],["// scalastyle:on",620],["// scalastyle:on println",767],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["* Spectrum Finance is based in part on:",234],["\"\"\").on(",200]],"useCount":52966},{"word":"once","context":[[").returning(expected).once()",125],["// scala -Xnojline < repl-session.scala to run them all at once.",149],[".returning(expected).once()",437],[".returning(Nil).once()",243],[".once()",220],[".returning(requests).once()",108],[".returning(true).once()",97],[".returning(false).once()",160],[".returning(Some(mockDebugProfile)).once()",161],["(mockProfileManager.retrieve _).expects(*).returning(None).once()",165]],"useCount":6274},{"word":"one","context":[["* This method will register the test for later execution via an invocation of one of the <code>execute</code>",145],["* This method will register the test for later ignoring via an invocation of one of the <code>execute</code>",134],["* @param testName the name of one test to execute.",151],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["it(\"should execute one test when run is called with a defined testName\") {",193],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["// SlowAsMolasses is included, one test should be excluded",225],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["when(\"one is subracted from the other\")",253]],"useCount":28657},{"word":"only","context":[["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["// Scala (test only)",222],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["// ensureTopicExists is only for client facing requests",114],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["// the HttpService trait defines only one abstract member, which",100],["// that they only have one implementation! Here's an example:",96],["// this actor only runs our route, but you could add",92]],"useCount":17978},{"word":"op","context":[["case BinaryOp(op, lhs, rhs) =>",87],["op",232],["op match {",573],["case UnaryOp(op, lhs) =>",87],["case JSUnaryOp(op, lhs) =>",90],["case JSBinaryOp(op, lhs, rhs) =>",90],["try { op(p) } finally { p.close() }",91],["op(repr, b)",112],["val op = (for {",136],["val generatedCode = cleanString(codeGenerator.emitNode(op))",137]],"useCount":14158},{"word":"openapi","context":[["import com.intellij.openapi.util.Key",211],["import com.intellij.openapi.diagnostic.Logger",219],["import com.intellij.openapi.vfs.VirtualFile",228],["import com.intellij.openapi.util.io.FileUtil",269],["import com.intellij.openapi.progress.ProgressManager",305],["import com.intellij.openapi.util.text.StringUtil",369],["import com.intellij.openapi.application.ApplicationManager",395],["import com.intellij.openapi.util.TextRange",566],["import com.intellij.openapi.project.Project",1985],["import com.intellij.openapi.editor.Editor",713]],"useCount":9448},{"word":"operation","context":[["*     When returning columns from an INSERT operation, only a single column",64],["* operation.",70],["package operation",69],["* @param operation The binary opcode for this operation.",68],["* @param operation The binary opcode for this operation.",68],["* @return the operation status",79],["operation match {",101],["operation.successful {",235],["val operation = for {",245],["* @return Observable which performs the throttle operation.",66]],"useCount":7709},{"word":"option","context":[["/** Maps whole row to an option. Useful for outer joins. */",399],["import scalaz.std.option._",277],["import scalaz.syntax.std.option._",249],["option match {",157],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* of items, as you do not have the option to unsubscribe.",110],["<config option=\"enablePreProcessExtension\" value=\"true\"/>",80],["<config option=\"enableIgnoreJSONSchemaExtension\" value=\"true\"/>",80],["<config option=\"enableIgnoreXSDExtension\" value=\"true\"/>",80]],"useCount":7052},{"word":"optional","context":[["* @param testName an optional name of one test to execute. If <code>None</code>, all relevant tests should be executed.",92],["* is known and not optional and set to None, then the field is serialized and returned.",85],["{{/optional}}",112],["* @param expectedExitCode (optional) the expected exit code for the command",120],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["* @param testTags the optional list of tags for this test",316],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* of client application activation, with optional configuration parameters",97]],"useCount":6798},{"word":"options","context":[["package options",127],["def run(state: State, options: Options): State = {",103],["(context, options) =>",105],["val topic = options.valueOf(topicOpt)",110],["options.head.filters.head.secondary must beNone",155],["options.head.filters must haveLength(1)",230],["options",260],["val options = splitter.getQueryOptions(filter)",273],["options must haveLength(1)",287],["val options = parser.parse(args : _*)",300]],"useCount":15359},{"word":"opts","context":[["new ADAGrad(opts),",61],["opts.batchSize = math.min(100000, mat0.ncols/30 + 1)",65],["val opts = new xopts",96],["settings = opts)",97],["opts, mkUpdater _,",101],["opts.dim = d",102],["opts",110],["opts.parse(args)",160],["opts)",240],["(nn, opts)",319]],"useCount":8021},{"word":"or","context":[["* that is created or manipulated using TA Buddy.",534],["* Redistribution and use in source and binary forms, with or without",3573],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* supplementary functions or services in addition to those offered by",1872],["* documentation and/or other materials provided with the distribution.",943],["*    and/or other materials provided with the distribution.",906],["* See http://www.cra.com or email figaro@cra.com for information.",856],["Redistribution and use in source and binary forms, with or without",639],["* serving files in a web or/and network application,",540],["* you must retain the producer line in every report, form or document",540]],"useCount":68135},{"word":"orbeon","context":[["import org.orbeon.oxf.xforms.action.XFormsAPI._",146],["package org.orbeon.oxf.fr",149],["import org.orbeon.oxf.xforms.xbl.XBLContainer",169],["import org.orbeon.oxf.xforms._",174],["import org.orbeon.oxf.xml.dom4j.Dom4jUtils",211],["import org.orbeon.oxf.util.ScalaUtils._",446],["import org.orbeon.oxf.common.OXFException",219],["import org.orbeon.saxon.om.NodeInfo",229],["import org.orbeon.oxf.xforms.XFormsConstants._",317],["import org.orbeon.scaxon.XML._",357]],"useCount":11802},{"word":"order","context":[["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["var rk: Array [Int] = null                              // to hold rank order",143],["* Field information in declaration order.",156],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["// The order I want is order of appearance in the file.",159],["// The order I want is order of appearance in the file.",159],["order by",160],["*  Sort in decreasing order.",175],["*  @param rk  the rank order",263],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520]],"useCount":12602},{"word":"org","context":[["import org.junit.Test",6088],["package org.jetbrains.plugins.scala",5764],["import org.specs2.mutable.Specification",6153],["import org.slf4j.LoggerFactory",6978],["import org.apache.spark.rdd.RDD",7440],["import org.scalatest.junit.JUnitRunner",7883],["import org.joda.time.DateTime",8580],["import org.scalatest._",9769],["import org.scalatest.FunSuite",10421],["import org.junit.runner.RunWith",11532]],"useCount":598051},{"word":"other","context":[["case other =>",1754],["* documentation and/or other materials provided with the distribution.",943],["*    and/or other materials provided with the distribution.",906],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["override def equals(other: Any): Boolean = other match {",959],["override def equals(other: Any): Boolean = other match {",959],["case other => other",1086],["case other => other",1086],["other match {",1213]],"useCount":40359},{"word":"out","context":[["val out = new ByteArrayOutputStream()",367],["out.close",455],["out.flush()",717],["out.close()",1403],["out",2717],["writeTo(out)",317],["val out = com.google.protobuf.CodedOutputStream.newInstance(res)",316],["out.checkNoSpaceLeft()",316],["def writeTo(out: com.google.protobuf.CodedOutputStream) {",316],["* You can mock out a whole application including requests, plugins etc.",261]],"useCount":37118},{"word":"output","context":[["output",611],[".write(Tsv(args(\"output\")))",157],["output: string",173],[".write(Tsv(\"output\"))",185],["assertDoesNotContain(\"error:\", output)",188],["assertDoesNotContain(\"Exception\", output)",202],["|  output {",211],["output: int",234],["output.close()",306],["output: double",315]],"useCount":21534},{"word":"override","context":[["override def toString =",1478],["override def preStart(): Unit = {",1102],["override def run() {",2601],["override def toString: String = {",2286],["override def toString = {",2182],["override def receive: Receive = {",1714],["override",1569],["override def run(): Unit = {",1540],["override def receive = {",1182],["override def toString: String =",1055]],"useCount":205604},{"word":"owner","context":[["owner,",174],["val owner = repository.owner",143],["val owner = repository.owner",143],["owner: String,",156],["owner: Window,",163],["* @param userName the user name of the repository owner",165],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["def owner = rec",221]],"useCount":25283},{"word":"oxf","context":[["import org.orbeon.oxf.xforms.xbl.XBLContainer",169],["package org.orbeon.oxf.fr",149],["import org.orbeon.oxf.xforms.action.XFormsAPI._",146],["package org.orbeon.oxf.xforms.function.xxforms",143],["import org.orbeon.oxf.xforms._",174],["package org.orbeon.oxf.xforms.analysis",134],["import org.orbeon.oxf.util.ScalaUtils._",446],["import org.orbeon.oxf.xforms.XFormsConstants._",317],["import org.orbeon.oxf.xml.dom4j.Dom4jUtils",211],["import org.orbeon.oxf.common.OXFException",219]],"useCount":9650},{"word":"p","context":[["* </p>",27669],["p^",401],["<p>",442],["p match {",662],["* <p>",37352],["p",2027],["* <p/>",1632],["*  <p>",1330],["p.future",1206],["</p>",571]],"useCount":136423},{"word":"package","context":[["package controllers",6274],["package impl",1433],["package org.jetbrains.plugins.scala",5764],["package util",1420],["package test",1389],["package psi",1971],["package sbt",1995],["package org.scalatest",2203],["package lang",3070],["package models",3595]],"useCount":348596},{"word":"page","context":[["page",108],["\"go to page\" should {",80],["val page       = IssueSearchCondition.page(request)",77],["val page       = IssueSearchCondition.page(request)",77],["val pageName = StringUtil.urlDecode(params(\"page\"))",103],["project home page at:",106],["it should \"display the page\" in {",112],["page,",115],["page fillPageWith claim",157],["page goToThePage()",301]],"useCount":6432},{"word":"param","context":[["@param expr1 : a value",480],["* @param ctx the parse tree",446],["*  @param i  the row index",661],["* @param value",508],["*  @param e  the ending index (exclusive) for the search",516],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["* @param id",553],["* @param testFun the test function",571],["* @param key",660],["@param expr2 : a value",480]],"useCount":148039},{"word":"parameter","context":[["* The suite class name parameter is optional, because suites in ScalaTest are an abstraction that",79],["* the <code>PatienceConfig</code> passed implicitly as the last parameter.",68],["* This function is passed as an implicit parameter to a <code>should</code> method",84],["// accept a _function_ as a parameter",95],["* @param regParam Regularization parameter.",97],["* The parameter `trees` of this function is a list of code trees ordered",67],["// Every table needs a * projection with the same type as the table's type parameter",102],["* This method takes a <code>testName</code> parameter that optionally specifies a test to invoke.",111],["* The parameter `chars` is an arbitrary text. This function extracts the character",66],["* on the two parameter code tables.",66]],"useCount":8995},{"word":"parameters","context":[["|\"parameters\": {",128],["def addCompletions(parameters: CompletionParameters, context: ProcessingContext, result: CompletionResultSet) {",129],["* of client application activation, with optional configuration parameters",97],["*  parameters. */",113],["val element = positionFromParameters(parameters)",106],["<console>:15: error: org.scalatest.words.NewContainWord does not take parameters",100],["def addCompletions(parameters: CompletionParameters, context: ProcessingContext,",94],["* @param parameters 参数 ，Mongo不需要",88],["parameters: Map[String, String]): BaseRelation = {",79],["parameters: Map[String, String],",151]],"useCount":10381},{"word":"params","context":[["implicit val prettify = restExtractor.extractPrettify(req.params)",156],["protected override def handlePage(params: String*) {",367],["val userName = params(\"userName\")",349],["import org.jetbrains.plugins.scala.lang.psi.api.statements.params._",180],["val params = Map(",194],["params: Stack.Params = this.params",196],["params: Stack.Params = this.params",196],["import org.jetbrains.plugins.scala.lang.psi.api.statements.params.ScParameter",212],["params",223],["// query params",245]],"useCount":25899},{"word":"parent","context":[["override def getView(position: Int, convertView: View, parent: ViewGroup): View = {",91],["parent = parent.getParent",126],["parent = parent.getParent",126],["parent",160],["if (parent != null) {",122],["// Funnel the data through the parent pipeline that contains data to",120],["override def slideDuration: Duration = parent.slideDuration",107],["def this(parent: StubElement[ParentPsi],",91],["while (parent != null) {",86],["parent match {",422]],"useCount":11642},{"word":"parse","context":[["parser.parse(args)",144],["import dhg.ccg.parse._",156],["opts.parse(args)",160],["val json = parse(",219],["lazy val doc = Jsoup.parse(view.body)",231],["val options = parser.parse(args : _*)",300],["parse(tail)",328],["def parse(builder: ScalaPsiBuilder): Boolean = {",357],["* @param ctx the parse tree",446],["parser.parse(args, defaultParams).map { params =>",130]],"useCount":16903},{"word":"parser","context":[["parser.printHelpOn(System.err)",148],["parser(\"\"\"",161],["def parserWithPrefix(prefix: String, sep: String = \"_\") = parser(",206],["def parser(",224],["val options = parser.parse(args : _*)",300],["val parser = new OptionParser",341],["import org.jetbrains.plugins.scala.lang.parser.ScalaElementTypes",381],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439],["package parser",794],["parser.parse(args)",144]],"useCount":15942},{"word":"part","context":[["// This file is part of the Equal application suite.",261],["* This file is part of mycollab-web.",278],["* This file is part of Scrupal, a Scalable Reactive Web Application Framework for Content Management                 *",309],["* This file is part of Kiama.",317],["* This file is part of JANDOM: JVM-based Analyzer for Numerical DOMains",356],["* This file is part of the TA Buddy project.",535],["* This file is part of Rudder.",604],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This file is part of Neo4j.",1823],["* This file is a part of PowerAPI.",253]],"useCount":19545},{"word":"partition","context":[["// reassign partition 0",130],["// also check partition ownership",128],["partition",122],["stateChangeLogger.trace(\"Controller %d epoch %d changed state of replica %d for partition %s from %s to %s\"",120],["info(\"Leader %s for partition %s being reassigned, \".format(currentLeader, topicAndPartition) +",111],["partition: Int,",167],["case Some(partition) =>",183],["val topicAndPartition = TopicAndPartition(topic, partition)",217],["partitionsToMakeFollower.foreach { partition =>",103],["// create topic with 1 partition, 2 replicas, one on each broker",84]],"useCount":25571},{"word":"partitions","context":[["* Invoked when some partitions are reassigned by the admin command",74],["case Some(m) => m.asInstanceOf[Map[String, Any]].get(\"partitions\") match {",75],["* generate the RDDs with Spark's default number of partitions.",79],["* Return a new RDD that is reduced into `numPartitions` partitions.",82],["partitions",87],["* Hash partitioning is used to generate the RDDs with `numPartitions` partitions.",104],["* partitions.",120],["info(\"Auto creation of topic %s with %d partitions and replication factor %d is successful!\"",68],["partitions: Seq[Int],",148],["partitions: Int,",196]],"useCount":11985},{"word":"passed","context":[["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["* appears in any <code>Bad</code>s passed to <code>withGood</code>).",105],["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112],["* will register the passed string for forwarding later during test execution. If invoked from inside a scope,",120],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* @throws NullPointerException if <code>specText</code> or any passed test tag is <code>null</code>",223],["* will register the passed string for forwarding later during test execution. If invoked while this",263],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248]],"useCount":10800},{"word":"path","context":[["path match {",323],["val path =",250],["// create my cluster client solely based on a zk client and a path",258],["/* Add configs to resource path for ConfigSpec */",260],["path: String,",1322],["<resource path=\"/a/b\">",525],["path",459],["<resource path=\"/c\">",455],["meq(path),",284],["path,",296]],"useCount":42349},{"word":"pattern","context":[["pattern match {",99],["import akka.contrib.pattern.DistributedPubSubExtension",120],["import akka.pattern.gracefulStop",88],["import akka.pattern.AskTimeoutException",90],["import akka.pattern.{ask, pipe}",136],["import akka.pattern.{ ask, pipe }",286],["def sum(ints: List[Int]): Int = ints match { // A function that uses pattern matching to add up a list of integers",96],["import akka.pattern._",610],["import akka.pattern.pipe",778],["import akka.pattern.ask",3987]],"useCount":11373},{"word":"pending","context":[["\"test that\" is (pending)",98],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.WeakAsAKitten) is (pending)",98],["\"test this\" is (pending)",98],["\"TestScheduler should have no pending tasks\")",130],["\"calls made from a test that is pending\") {",134],["it(\"should generate a TestPending message when the test body is (pending)\") {",177],["pending",2195],["\"calls made from a test that is not pending\") {",94],["* pending tests is to facilitate a style of testing in which documentation of behavior is sketched",91],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91]],"useCount":7836},{"word":"pipeline","context":[["// Data to be run through pipeline",154],["pipeline.addLast(",173],["val pipeline = Channels.pipeline()",396],["val pipeline = Channels.pipeline()",396],["pipeline",528],["import org.orbeon.oxf.pipeline.api.PipelineContext",103],["// Funnel the data through the parent pipeline that contains data to",120],["// mapping on top of the pipeline containing the data",120],["// demonstrate that the pipeline with just the event is merely a",120],["val responseFuture = pipeline {",137]],"useCount":6911},{"word":"play","context":[["import play.api.libs.json.Json",4321],["import play.api.Play.current",3657],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556],["import play.api.Logger",2664],["import play.api._",2272],["import play.api.data.Forms._",2020],["import play.api.test.Helpers._",2015],["import play.api.libs.functional.syntax._",1600],["import play.api.libs.json._",6149],["import play.api.mvc._",5405]],"useCount":96087},{"word":"plugins","context":[["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672],["package org.jetbrains.plugins.scala",5764],["import org.jetbrains.plugins.scala.extensions._",1579],["import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes",1189],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.statements._",521],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439]],"useCount":44199},{"word":"point","context":[["* @param lineWidth The width of the point marker's outline.",192],["* The width of the point marker's outline.",192],["* @param radius The radius of the point marker.",112],["* The radius of the point marker.",112],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192]],"useCount":7573},{"word":"port","context":[["port,",145],["props.put(\"port\", port.toString)",114],[".port (port)",116],[".port (port)",116],["val port: Int,",131],["port: Int,",585],["val props = TestUtils.createBrokerConfig(0, TestUtils.MockZkConnect, port = 8181)",284],["System.clearProperty(\"spark.driver.port\")",252],["|            \"port\" : 345",117],["// To avoid Akka rebinding to the same port, since it doesn't unbind immediately on shutdown",168]],"useCount":14112},{"word":"pos","context":[["implicit val pos = tree.pos",717],["pos += 1",854],["implicit val pos = tree.pos",717],["var pos = 0",532],["implicit pos: Position): js.Tree = {",433],["pos",277],["implicit val pos: Position) extends Tree {",219],["reporter.error(pos,",125],["pos: Option[Position] = None,",113],["doCollected(collected, xs, original, prettifier, pos) { e =>",111]],"useCount":17363},{"word":"position","context":[["position = 1,",114],["position = 0,",133],["var position = 0",142],["position += 1",145],[".toList.sortBy(_.position) shouldBe result1",146],["*  @param from  the position to start extracting from",123],["override def getView(position: Int, convertView: View, parent: ViewGroup): View = {",91],["position = 2,",96],["position = (position + 1) & mask",84],["position.relative,",87]],"useCount":12526},{"word":"post","context":[["} ~ post {",72],["post {",1409],[".post(\"/api/authentication\")",203],["post(\"/api/signout\") { checkStatus() }",172],["def post(",151],["post(\"/api/signin\", dummyUserLoginParams) { checkStatus() }",76],[".post(\"/api/authenticate\")",68],["EventBusFactory.getInstance().post(new ProjectEvent.GotoMyProject(this, chain))",75],["EventBusFactory.getInstance.post(new ProjectEvent.GotoMyProject(this, chain))",99],["override def post(",140]],"useCount":6404},{"word":"pre","context":[["* <pre class=\"stHighlight\">",15662],["* </pre>",22063],["* <pre>",3233],["</pre>",128],["* <pre name=\"code\" class=\"scala\">",149],["* <pre name=\"code\" class=\"scala\" >",174],["* }</pre>",175],["* Example:<pre>",263],["* <pre class=\"stREPL\">",1661],["* <pre class=\"stExamples\">",308]],"useCount":50090},{"word":"prefix","context":[["id = s\"$prefix${sep}id\",",79],["val underlying = q\"${c.prefix}.underlying\"",88],["prefix: String,",274],["override def prefix = REX.W(true)",130],["prefix",72],["* generated based on `prefix` and `suffix`: \"prefix-TIME_IN_MS.suffix\".",96],["* generated based on `prefix` and `suffix`: \"prefix-TIME_IN_MS.suffix\".",96],["val prefix = \"http://example.org/\"",104],["def parserWithPrefix(prefix: String, sep: String = \"_\") = parser(",206],["val lhs = c.prefix.tree",72]],"useCount":11067},{"word":"print","context":[["wordCounts.print()",111],["print(')')",104],["* print to the standard output. This method can be called safely by any thread.",132],["print(\"\\nEnter your choice: \")",112],["print(\"\\n\")",116],["print(\".\")",135],["print(pascal(col, row) + \" \")",98],["val str = dateTime.print(x)",86],["print(\" \")",101],["print(\")\")",63]],"useCount":8288},{"word":"println","context":[["System.err.println(",386],["println()",3548],["println",1230],["// scalastyle:off println",784],["println(",769],["// scalastyle:on println",767],["println (\"--------------------------------------------------------------\")",739],["println(result)",653],["println(\"\")",560],["println(msg)",404]],"useCount":50603},{"word":"private","context":[["private[cogx]",408],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["private[this]",293],["private val prop_cons: List[(String, AbsProperty)] = List(",288],["private[spark]",792],["private[streaming]",544],["private val prop_proto: List[(String, AbsProperty)] = List(",529],["private",428]],"useCount":78946},{"word":"process","context":[["import scala.sys.process._",913],["override def process(msg: AnyRef) {",498],["import sys.process._",370],["def process = {",113],["stateOpProcessor.process(update).futureValue",117],["override def process(theMsg: AnyRef) {",216],["process.destroy()",178],["override def process(theMsg: FilterBankConfig.Message) {",119],["process.waitFor()",126],["import scala.sys.process.Process",152]],"useCount":10620},{"word":"producer","context":[["package kafka.producer",205],["props.put(\"serializer.class\", \"kafka.producer.StringSerializer\")",99],["producer.close()",752],["* you must retain the producer line in every report, form or document",540],["import kafka.producer._",172],["import org.apache.kafka.clients.producer.ProducerConfig",153],["val producer = new SyncProducer(new SyncProducerConfig(props))",140],["producer.flush()",131],["producer.close",193],["props.put(\"producer.type\", \"async\")",105]],"useCount":8470},{"word":"project","context":[["* HCI Group at the University of Würzburg. The project is funded by the German",336],["* This file is part of the TA Buddy project.",535],["// Add your own project settings here",301],["// Add your project dependencies here,",293],["$project(Reshape(ListMap(",247],["* See the project homepage at: http://www.monifu.org",633],["// This project",570],["$project(",954],["import com.intellij.openapi.project.Project",1985],["* See the project homepage at: https://monix.io",820]],"useCount":21047},{"word":"promise","context":[["promise",359],["val promise = Promise[Ack]()",184],["Await.result(promise.future, 5.seconds)",209],["status whenCompleted { _ => promise.success(rep) }",262],["val promise = Promise[Unit]()",652],["status whenCompleted { _ => promise.success(reporter) }",373],["val promise = Promise[T]()",159],["promise.future",1341],["val promise = Promise[EventRecordingReporter]",635],["promise.future.map { repo =>",602]],"useCount":9833},{"word":"prop","context":[["import org.scalatest.prop.Checkers",689],["import org.scalatest.prop._",309],["import org.scalatest.prop.TableDrivenPropertyChecks",186],["import org.scalatest.prop.TableDrivenPropertyChecks._",183],["import prop._",122],["import org.scalatest.prop.PropertyChecks",690],["import org.scalatest.prop.GeneratorDrivenPropertyChecks",830],["val prop = checkOrderUnsafe(f.getExpression1, f.getExpression2)",108],["import org.scalatest.prop._;",114],["val prop = forAll ($famousArgs$) { ($namesAndTypes$) =>",120]],"useCount":7105},{"word":"properties","context":[["logger.error(s\"Failed to get properties ${properties} of\" +",88],["|  \"properties\": {",79],[")(sc).map { case (entityId, properties) =>",76],["\"properties\": {",140],["logger.error(s\"Failed to get properties ${properties} of\" +",88],["/* list of properties in the instance object */",155],["val properties = new Properties",166],["// This object has all properties of the HTMLElement object",218],["properties",238],["val properties = new Properties()",279]],"useCount":6526},{"word":"props","context":[["contextMenu.foreach(v => props.updateDynamic(\"contextMenu\")(v))",339],["onAnimationIteration.foreach(v => props.updateDynamic(\"onAnimationIteration\")(v))",339],["onMouseDown.foreach(v => props.updateDynamic(\"onMouseDown\")(v))",339],["val props = new Properties()",1495],["props",763],["val props = new Properties",455],["onFocus.foreach(v => props.updateDynamic(\"onFocus\")(v))",339],["onMouseUp.foreach(v => props.updateDynamic(\"onMouseUp\")(v))",339],["onDrop.foreach(v => props.updateDynamic(\"onDrop\")(v))",339],["onDragExit.foreach(v => props.updateDynamic(\"onDragExit\")(v))",339]],"useCount":42155},{"word":"protected","context":[["protected def copy1(",240],["override protected def doEquals(other: Equatable)",221],["override protected def doCopy()",211],["override protected def afterAll() {",144],["override protected def afterAll() = {",165],["protected override def runTest(testName: String, args: Args): Status = {",183],["protected override def handlePage(params: String*) {",367],["protected override def insert(source: XContentBuilder): Unit = {",400],["override protected def beforeAll(): Unit = {",404],["override protected def afterAll(): Unit = {",622]],"useCount":28799},{"word":"protocol","context":[["endWrite(e, protocol)",240],["protocol = \"file\",",854],["import org.apache.thrift.protocol.TBinaryProtocol",225],["import org.apache.kafka.common.protocol.Errors",162],["import com.twitter.finagle.redis.protocol._",134],["package com.twitter.finagle.redis.protocol",133],["import org.apache.kafka.common.protocol.SecurityProtocol",279],["val protocol = mock[TProtocol]",407],["endRead(e, protocol)",252],["import org.apache.thrift.protocol._",263]],"useCount":13379},{"word":"provided","context":[["def `should use an explicitly provided Equality` {",1594],["* and/or other materials provided with the distribution.",226],["*   other materials provided with the distribution.",279],["\"should use an explicitly provided Equality\" in {",286],["documentation and/or other materials provided with the distribution.",300],["*       documentation and/or other materials provided with the distribution.",322],["*     documentation and/or other materials provided with the distribution.",491],["*    and/or other materials provided with the distribution.",906],["* documentation and/or other materials provided with the distribution.",943],["it(\"should use an explicitly provided Equality\") {",1196]],"useCount":14329},{"word":"provider","context":[["* @param authInfo The auth info received from the provider.",70],["failed[ProfileRetrievalException](provider.retrieveProfile(oAuthInfo.as[OAuth2Info])) {",69],["package scalaoauth2.provider",79],["* The provider to test.",78],["val provider = WhiskPackage(namespace, aname)",75],["put(entityStore, provider)",120],["* @param stateProvider The OAuth2 state provider implementation.",123],["* @param socialProviderRegistry The social provider registry.",93],["* @param tokenSecretProvider The token secret provider implementation.",68],["import org.bouncycastle.jce.provider.BouncyCastleProvider",86]],"useCount":6394},{"word":"psi","context":[["import com.intellij.psi._",1694],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672],["import com.intellij.psi.util.PsiTreeUtil",1108],["import com.intellij.psi.PsiElement",1303],["package psi",1971],["import org.jetbrains.plugins.scala.lang.psi.api.statements._",521],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704]],"useCount":33033},{"word":"publish","context":[["* copy, modify, merge, publish, distribute, sublicense, and/or sell",180],["env.eventBus.publish(LoginEvent(user, request, request2Messages))",92],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100],["* modify, merge, publish, distribute, sublicense, and/or sell copies",112],["publish := (),",124],["publish := {},",127],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",224],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",260],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556]],"useCount":7010},{"word":"put","context":[["put(entityStore, action)",155],["props.put(\"serializer.class\", \"kafka.serializer.StringEncoder\")",155],["props.put(\"host\", \"localhost\")",102],["mp.put(\"ONE\", \"one\")",104],["props.put(\"producer.type\", \"async\")",105],["props.put(\"request.required.acks\", \"1\")",106],["props.put(\"port\", port.toString)",114],["props.put(\"metadata.broker.list\", brokerList)",117],["put(entityStore, provider)",120],["put {",223]],"useCount":20541},{"word":"q","context":[["val q = quote {",1173],["val q = for {",183],["q",224],[".acceptLanguageHeader(\"fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3\")",308],[".acceptLanguageHeader(\"fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3\")",308],["q\"\"\"",2089],[".acceptLanguageHeader(\"fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3\")",308],["testContext.run(q).string mustEqual",361],["val q =",153],["stmt\"${(q.ast: Ast).token}\" mustEqual",123]],"useCount":18714},{"word":"query","context":[["* @param query",123],["val query = \"\"\"",131],["package com.twitter.zipkin.query",132],["query {",149],["query: Query,",162],["val query = for {",241],["// query params",245],["paramType = \"query\"),",261],["query",305],["val query =",397]],"useCount":24015},{"word":"queue","context":[["import scala.scalajs.concurrent.JSExecutionContext.Implicits.queue",173],["queue.clear()",89],["test(\"should do onError only after all the queue was drained, test2\") { implicit s =>",65],["test(\"should do onError only after the queue was drained\") { implicit s =>",65],["test(\"should do onComplete only after all the queue was drained, test2\") { implicit s =>",65],["val queue = mock[LaunchQueue]",70],["while (!queue.isEmpty) {",66],["queue,",358],["test(\"should do onComplete only after all the queue was drained\") { implicit s =>",65],["if (queue.isEmpty) {",69]],"useCount":6750},{"word":"r","context":[["} yield r",500],["var r = 0",545],["\"\"\".stripMargin('|').replaceAll(\"\\r\", \"\").trim()",494],["whenReady(result) { r =>",473],["\"\"\".replace(\"\\r\", \"\")",418],["r",2826],["r match {",648],["\"\"\".stripMargin.replaceAll(\"\\r\", \"\").trim()",684],["\"\"\".stripMargin.replace(\"\\r\", \"\")",529],["r += 1",871]],"useCount":59984},{"word":"random","context":[["implicit val random = new scala.util.Random(0)",154],["import org.apache.commons.math3.random.MersenneTwister",192],["*  @param stream  the random number stream",127],["random.nextBytes(value)",91],["import org.apache.commons.math3.random.RandomGenerator",88],["(n, nextRNG) // The return value is a tuple containing both a pseudo-random integer and the next `RNG` state.",81],["random.setSeed(seed)",252],["val random = new Random()",275],["implicit val scheduler = StubScheduler.random()",132],["val random = new Random",165]],"useCount":7205},{"word":"range","context":[["* @throws CalendricalException if the result exceeds the supported date range",79],["*  @param ir  the row range",349],["*  @param jr  the column range",349],["*  @param r  the given range",174],["val rk = Array.range (0, n)                   // rank order",140],["for (i <- range) {",141],["* @throws DateTimeException if the result exceeds the supported date range",132],["/** Set 'this' vector's elements over the given range (vector slicing).",104],["val partitionAssignmentStrategy = \"range\"",84],["val v1Vals = Variable(v1).range",84]],"useCount":10985},{"word":"rdd","context":[["import org.apache.spark.rdd.RDD",7440],["import org.bdgenomics.adam.rdd.ADAMContext._",608],["import org.apache.spark.rdd._",403],["rdd",318],["package org.apache.spark.rdd",291],["rdd: RDD[T],",211],["import org.trustedanalytics.sparktk.frame.internal.rdd.FrameRdd",149],["package org.bdgenomics.adam.rdd",117],["val frame = new Frame(rdd, schema)",102],["package spark.rdd",99]],"useCount":22265},{"word":"reactivemongo","context":[["import reactivemongo.api.collections.bson.BSONCollection",122],["import reactivemongo.bson._",1142],["import reactivemongo.bson.BSONObjectID",377],["import play.modules.reactivemongo.json.collection.JSONCollection",268],["import reactivemongo.core.commands._",119],["import play.modules.reactivemongo.json.BSONFormats._",155],["import reactivemongo.api.collections.default.BSONCollection",176],["import reactivemongo.bson.BSONDocument",267],["import reactivemongo.api._",299],["import play.modules.reactivemongo.MongoController",157]],"useCount":7420},{"word":"read","context":[[".read",527],["$read(Collection(\"db\", \"zips\")),",448],["(__ \\ \"id\").read[String] and",156],["\"read\" in { cycle => import cycle._",156],["def read(value: JsValue) = value match {",215],["$read(collection(\"db\", \"zips\")),",420],["(__ \\ \"name\").read[String] and",246],["read",311],["read()",180],["_passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))",209]],"useCount":25791},{"word":"reader","context":[["var line = reader.readLine()",90],["val line = reader.readLine()",64],["if (reader != null) {",69],["line = reader.readLine",88],["reader.read()",87],["val sameRecords = reader.read(filename)",80],["reader",96],["line = reader.readLine()",144],["reader.close",144],["reader.close()",688]],"useCount":8232},{"word":"receive","context":[["override def receive: Actor.Receive = {",195],["def receive = {",6615],["override def receive: Receive = {",1714],["override def receive = {",1182],["def receive: Receive = {",1047],["def receive = LoggingReceive {",304],["Then(\"we receive a NotAuthenticated response\")",270],["override def receive: Receive = LoggingReceive {",101],["def receive: Actor.Receive = {",185],["receive {",233]],"useCount":15938},{"word":"record","context":[["</record>",98],["<record>",94],["// record activity",185],["package record",202],["import record._",102],["type: record",127],["record",149],["dataFileWriter.create(record.getSchema(), file);",167],["dataFileWriter.append(record);",168],["sameRecord must ===(record)",273]],"useCount":9766},{"word":"ref","context":[["def ref: this.type = this",429],["watch(ref)",428],["expectTerminated(ref)",409],["ref.foreach(v => props.updateDynamic(\"ref\")(v))",339],["ref match {",263],["ref.foreach(v => props.updateDynamic(\"ref\")(v))",339],["ref",310],["case ref: ScReferenceExpression =>",265],["import scala.ref.WeakReference",199],["ref: U[(_ <: dom.html.Element) => _] = undefined,",452]],"useCount":20298},{"word":"reflect","context":[["import scala.reflect.macros.Context",577],["import scala.reflect.macros.blackbox",308],["import scala.reflect.Manifest",350],["import scala.reflect.runtime.universe.TypeTag",358],["import scala.reflect.runtime.{universe => ru}",376],["import java.lang.reflect.Method",598],["import scala.reflect.macros.blackbox.Context",651],["import scala.reflect._",775],["import scala.reflect.runtime.universe._",2130],["import scala.reflect.ClassTag",7121]],"useCount":23323},{"word":"regex","context":[["* The regular expression passed following the <code>regex</code> token can be either a <code>String</code>",55],["val rightRegex = resultOfRegexWordApplication.regex",55],["package gnieh.regex",51],["import java.util.regex.Pattern",1519],["import java.util.regex.Matcher",135],["import java.util.regex._",130],["res should include regex (\"\\\"Status Code\\\" : 0\")",79],["import java.util.regex.{Matcher, Pattern}",78],[".describedAs(\"Java regex (String)\")",66],["val regex = parser.getCaseInsensitiveRegex(metricName)",58]],"useCount":6846},{"word":"remove","context":[["// remove content type in case it was set through an action",90],["*  FIX: remove the 'n = m+1' restriction.",190],["iter.remove()",162],["//remove if not needed",407],["override val remove: js.UndefOr[js.Function] = removeOuter",120],["val removeOuter: js.UndefOr[js.Function] = remove",120],["else if (elem.text < tw.text) new NonEmpty(elem, left, right.remove(tw))",78],["def remove(tw: Tweet): TweetSet =",78],["val remove: js.UndefOr[js.Function] = js.undefined",120],["if (tw.text < elem.text) new NonEmpty(elem, left.remove(tw), right)",79]],"useCount":9514},{"word":"rep","context":[["assert(rep.testSucceededEventsReceived(0).testName == \"test 1\")",193],["val tp = rep.testPendingEventsReceived",210],["status whenCompleted { _ => promise.success(rep) }",262],["val testFailedEvents = rep.testFailedEventsReceived",287],["s.run(None, Args(rep))",345],["a.run(None, rep, new Stopper {}, Filter(), Map(), None, new Tracker())",366],["val status = suite.run(None, Args(reporter = rep))",419],["a.run(None, Args(rep))",666],["val rep = new EventRecordingReporter",2459],["val tf = rep.testFailedEventsReceived",283]],"useCount":12283},{"word":"replica","context":[["* 5. Starts the replica state machine",37],["reassignedReplicas.foreach { replica =>",37],["debug(\"Updated path %s with %s for replica assignment\".format(zkPath, jsonPartitionMap))",38],["props.put(\"replica.socket.timeout.ms\", \"1500\")",47],["// kill the server hosting the preferred replica",50],["// inconsistent replica state",132],["// read the partitions and their new replica list",52],["// in sync replicas should not have any replica that is not in the new assigned replicas",52],["stateChangeLogger.trace(\"Controller %d epoch %d changed state of replica %d for partition %s from %s to %s\"",120],["* This callback is invoked by the replica state machine's broker change listener with the list of failed brokers",37]],"useCount":6901},{"word":"replicas","context":[["info(\"%d/%d replicas have caught up with the leader for partition %s being reassigned.\"",72],["// create the test topic with all the brokers as replicas",66],["\"New replicas should exist on brokers\")",64],[".filter { case(topicAndPartition, replicas) => replicas.contains(brokerId) }",59],[".filter { case(topicAndPartition, replicas) => replicas.contains(brokerId) }",59],["case(topicPartition, replicas) => {",59],[".map { case(topicAndPartition, replicas) =>",57],["assertEquals(1, partitionMetadata.head.replicas.size)",55],["// in sync replicas should not have any replica that is not in the new assigned replicas",52],["// create topic with 1 partition, 2 replicas, one on each broker",84]],"useCount":6452},{"word":"repo","context":[["when(repo.store(any())).thenReturn(Future.successful(app))",84],["when(repo.allIds()).thenReturn(Future.successful(Seq(app.id.toString)))",64],["\"Snowplow Analytics Maven snapshot repo\" at \"http://maven.snplow.com/snapshots/\",",70],["\"Typesafe Repository\" at \"http://repo.typesafe.com/typesafe/releases/\",",71],["for ((summaryItem, repo) <- summariesMap) {",80],["repo",99],["repo: String,",123],["repo,",162],["<distribution>repo</distribution>",450],["promise.future.map { repo =>",602]],"useCount":6931},{"word":"report","context":[["\"should report warning\" in {",125],["it(\"should report as ignored, and not run, tests marked ignored\") {",158],["assert(testSucceededReportHadCorrectSpecText, lastSpecText match { case Some(s) => s; case None => \"No report\"})",69],["it(\"should, when the info appears in the body before a test, report the info before the test\") {",69],["val report = ivyUpdate(m)",69],["report",70],["report: Reporter,",71],["* will collect and report information about the running suite of tests.",81],["* sent to the reporter when running the test can appear in the report of a test run. (In other words,",86],["* you must retain the producer line in every report, form or document",540]],"useCount":6338},{"word":"reporter","context":[["* @param reporter the <code>Reporter</code> to which results will be reported",202],["val status = suite.run(None, Args(reporter))",752],["val reporter = new EventRecordingReporter",977],["val status = suite.run(None, Args(reporter = rep))",419],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["status whenCompleted { _ => promise.success(reporter) }",373],["* the current reporter immediately. If invoked at any other time, it will",263],["val infoList = reporter.infoProvidedEventsReceived",197],["val testSucceededList = reporter.testSucceededEventsReceived",192],["val markupList = reporter.markupProvidedEventsReceived",176]],"useCount":9032},{"word":"repository","context":[["defining(repository.owner, repository.name){ case (owner, name) =>",254],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["import com.normation.rudder.repository._",228],["* @param repositoryName the repository name",165],["* @param userName the user name of the repository owner",165],["repository,",314],["* Code repository:",341],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["repository)",156]],"useCount":29527},{"word":"req","context":[["implicit val prettify = restExtractor.extractPrettify(req.params)",156],["val req = auth.request",200],["val req = search in \"music\" types \"bands\" aggs {",150],["validator.validate(req, response, chain)",190],["implicit val req = ctx.body",314],["val req = Request()",309],["req",283],["val meta = Http(req)",247],["val req = search in \"music\" types \"bands\" postFilter {",200],["(req:HttpRequest) => Future.apply(mockResponse)",186]],"useCount":15810},{"word":"request","context":[["request match {",343],["request",344],["val request = Request()",372],["implicit val request = FakeRequest()",373],["val request = FakeRequest()",439],["request =>",664],["implicit request =>",1351],["<request>",1837],["* @param request The request header.",321],["</request>",1891]],"useCount":59620},{"word":"requests","context":[["// Log all HTTP requests",285],["import org.scaladebugger.api.lowlevel.requests.JDIRequestArgument",349],["// Log failed HTTP requests",285],["* You can mock out a whole application including requests, plugins etc.",261],["val requests = Seq(",147],["// ensureTopicExists is only for client facing requests",114],["*         requests from extra arguments",110],[".returning(requests).once()",108],["import com.aristocrat.mandrill.requests.MandrillRequest",87],["assert(sr.counters(Seq(\"client\", \"requests\")) == 1)",62]],"useCount":6547},{"word":"require","context":[["require(value != null)",190],["require(bookstore.name == \"Bookstore\")",84],["require(__field.getContainingType() == descriptor, \"FieldDescriptor does not match message type.\")",97],["GUI_Thread.require {}",122],["require(sourceCount > 0, \"sourceCount should be strictly positive\")",144],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), \"FieldDescriptor does not match message type.\")",172],["require(bookstore.localName == \"Bookstore\")",184],["require(retVars.size == 1)",200],["require(",1061]],"useCount":11512},{"word":"required","context":[["System.err.println(\"Missing required argument \\\"\" + arg + \"\\\"\")",80],["* of this program must display Appropriate Legal Notices, as required under",540],["required = false,",414],["required = true,",279],[".required()",231],["* Checks that all required fields are non-null.",167],["* Given the driver type, return the string required to create the column in the database",139],["props.put(\"request.required.acks\", \"1\")",106],["* bit of behavior required by the system being tested. The test can also include some code that",85],["\"fullName\"    -> trim(label(\"Full Name\"    , text(required, maxlength(100)))),",60]],"useCount":9209},{"word":"res","context":[["} yield res",292],["val out = com.google.protobuf.CodedOutputStream.newInstance(res)",316],["} ensuring { res =>",233],["import res._",247],["res",7155],["res match {",570],["res => {",521],["val res =",346],["val res = for {",331],["val res = new Array[Byte](getSerializedSize)",316]],"useCount":33189},{"word":"reset","context":[["Mockito.reset(mockAwsWrapper, mockDataManager, mockInfluxClientFactory)",482],["EasyMock.reset(offsetManager)",140],["fragment.reset()",159],["reset",189],["def reset(): Unit = {",204],["codegen.reset",227],["override def reset(): Unit = {",256],["EasyMock.reset(replicaManager)",335],["def reset() {",400],["reset()",459]],"useCount":7900},{"word":"resource","context":[["<resource path=\"/v\">",75],["<resource path=\"/any\">",75],["<resource path=\"/text\">",75],["resource.close()",113],["import rpgboss.model.resource._",118],["import resource._",233],["/* Add configs to resource path for ConfigSpec */",260],["<resource path=\"/c\">",455],["<resource path=\"/a/b\">",525],["</resource>",2020]],"useCount":9247},{"word":"resources","context":[["// TODO test for resources etc.",99],["import org.eclipse.core.resources.IProject",104],["import org.eclipse.core.resources.IResource",118],["import org.eclipse.core.resources.IFile",142],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["XML.loadFile(\"src/test/resources/xsd/test-urlxsd.xsd\"))",337],["register(\"test://app/src/test/resources/xsd/test-urlxsd.xsd\",",337],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["<resources base=\"https://test.api.openstack.com\">",786],["</resources>",855]],"useCount":6793},{"word":"resp","context":[["inside(resp) {",874],["resp should matchPattern {",560],["resp.toOption.get.transactionHash",412],["resp should matchPattern { case Ok(ResponseStartPhoneAuth(_, false)) ⇒ }",186],["resp",203],["val resp = meta()",247],["whenReady(startPhoneAuth(phoneNumber)) { resp ⇒",256],["val resp = client.execute {",360],["whenReady(startEmailAuth(email)) { resp ⇒",190],["resp should matchPattern { case Ok(_) ⇒ }",152]],"useCount":10163},{"word":"response","context":[["response",1266],["response =>",277],["Then(\"we receive a NotAuthenticated response\")",270],["header.checkStep (req1, response, chain, 0)",266],["response match {",471],["response.status match {",292],["import unfiltered.response._",320],["Future.value(response)",359],["val response = mock[WSResponse]",317],["val response = Response()",293]],"useCount":31737},{"word":"rest","context":[["rest = rest.tail",458],["case Cons(x,xs) => x + sum(xs) // The sum of a list starting with `x` is `x` plus the sum of the rest of the list.",93],["rest match {",140],["mutable = false, rest = false)",90],["rest = rest.tail",458],["statement = rest.head",399],["import net.liftweb.http.rest.RestHelper",142],["// The rest should not compile",170],["import com.normation.rudder.web.rest.RestExtractorService",75],["package rest",88]],"useCount":7713},{"word":"result","context":[["result",13922],["result match {",1883],["val result =",1508],["result.toSet",967],["println(result)",653],["val result = for {",921],["} yield result",868],["builder.result()",783],["val Some(result) = route(",737],["return result",655]],"useCount":130561},{"word":"results","context":[["* @param reporter the <code>Reporter</code> to which results will be reported",202],["assert(results.size === numCars)",103],["results",570],["val results =",202],["assert(results === Map(0 -> 42))",132],["val results = new CsvParser()",125],["*  results of that function by feeding it with arbitrarily generated input",113],["val results = evalE(input)",94],["* the merging locally on each mapper before sending results to a reducer, similarly to a",113],["results should have length 2",110]],"useCount":14152},{"word":"ret","context":[["ret",3153],["val ret = for {",116],["val ret =",102],["ret.toList",100],["var ret = 0",82],["ret.toMap",76],["toActionResult(ret)",72],["val ret = new mutable.HashMap[Int, List[Int]]()",69],["m.ret.foreach(refs.find)",64],["return ret",199]],"useCount":8211},{"word":"return","context":[["return result",655],["return false;",766],["return this",864],["return a;",954],["return None",1864],["return null",1926],["return true",4399],["return false",5622],["return",9514],["* @return",17086]],"useCount":119377},{"word":"returns","context":[["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["requestHolder.get() returns Future.successful(response)",212],["* all returns a list of all the valid, known values. We use",218],["networkClient.clusterIoClient.nodesChanged(nodeSet) returns endpoints",117],["mockFailureResponse.getMessage returns expectedErrorMessage",123],["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["* <p>The default implementation returns the result of calling",125],["clusterClient.nodes returns nodeSet",145],["clusterClient.isConnected returns true",148],["mockResponse.status returns mockStatus",187]],"useCount":13071},{"word":"rhs","context":[["rhs match {",263],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["case _ => super.emitNode(sym, rhs)",410],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = {",98],["case JSBinaryOp(op, lhs, rhs) =>",90],["case BinaryOp(op, lhs, rhs) =>",87],["val rhs = readTreeRef()",80],["(lhs, rhs) match {",614],["case Assign(lhs, rhs) =>",142]],"useCount":9171},{"word":"right","context":[["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["*  @param r   the right cursor",187],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["*  @param r  the right cursor",184],["(left, right) match {",174],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["def equaled(left: Any, right: Any): String =",147],["right match {",253],["right",269]],"useCount":19556},{"word":"root","context":[["lazy val root =",114],["lazy val root = Project(",332],["root",181],["( new_proof, computeMap( p.root.antecedent ++ p.root.succedent, proof, new_proof, new_parent._2 ) )",162],["( new_proof, computeMap( p.root.antecedent ++ p.root.succedent, proof, new_proof, new_parent._2 ) )",162],["assertResult(Set(EName(ns, \"root\"), EName(ns, \"child\"))) {",134],["val result = root.findAllElemsOrSelf map { e => e.resolvedName }",134],["List(\"-w\", \"com.example.root\"),",121],["lazy val root: Project = Project(",113],["Some( ( r.uProof, r.root, a1, p1 ) )",105]],"useCount":10253},{"word":"row","context":[["*  @param i  the row index",661],["val row = gen[JodaRow]",188],["<div class=\"row-fluid\">",189],[".value(_.pkey, row.pkey)",202],["var row = 0",220],["*  @param e  the ending row index (exclusive) for the search",244],["row",287],["row += 1",297],["*  @param ir  the row range",349],["/** Maps whole row to an option. Useful for outer joins. */",399]],"useCount":21666},{"word":"rows","context":[["// printRows(rows)",158],["if (dim2 != dim1 + 1) flaw (\"nullspace\", \"requires n (columns) = m (rows) + 1\")",174],["val rdd = sparkContext.parallelize(rows)",86],["while(r < a.rows) {",146],["b.swap (i, k, i)                // in b, swap rows i and k from column i",120],["if (dim2 < dim1) flaw (\"reduce\", \"requires n (columns) >= m (rows)\")",114],["\"not write any bad rows\" in {",108],["rows",107],["var rowsPerThread = ((Nrows - 1) / nthreads).toInt + 1 // how many rows the thread processes",98],["val rows = runSql(sql)",338]],"useCount":10776},{"word":"rs","context":[["import javax.ws.rs._",386],["}.map { rs =>",150],["rs.close()",157],["while (rs.next()) {",171],["import javax.ws.rs.core.MediaType",217],[".map(rs => rs.long(\"count\")).single.apply().get",198],[".map(rs => rs.long(\"count\")).single.apply().get",198],["val (rs, result) = getMocks",138],["import javax.ws.rs.core.Response",143],["import javax.ws.rs.Path",173]],"useCount":7059},{"word":"rudder","context":[["import com.normation.rudder.domain.policies.Rule",116],["import com.normation.rudder.web.model.CurrentUser",168],["import com.normation.rudder.domain.policies.DirectiveId",213],["import com.normation.rudder.domain.policies.RuleId",240],["import com.normation.rudder.domain.policies._",259],["import com.normation.rudder.domain.nodes.NodeInfo",153],["import com.normation.rudder.domain.nodes.NodeGroupId",130],["import com.normation.rudder.domain.workflows.ChangeRequestId",116],["import com.normation.rudder.domain.eventlog._",111],["import com.normation.rudder.repository._",228]],"useCount":9162},{"word":"run","context":[["def run {",424],["a.run(None, Args(rep))",666],["val status = suite.run(None, Args(reporter))",752],["def run(): Unit = {",1011],["override def run(): Unit = {",1540],[".run",1729],["def run() {",1874],["override def run() {",2601],["*        other events reported during the same run",562],["override def run() = {",576]],"useCount":55332},{"word":"runner","context":[["val runner = framework.runner(Array.empty, Array.empty, testClassLoader)",84],["* because the \"name\" provided to a JUnit <code>org.junit.runner.Description</code> appears to usually include",86],["package org.specs.runner",114],["runner.done()",126],["@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])",147],["import org.specs.runner._",239],["import org.specs2.runner._",708],["import org.junit.runner._",721],["import org.specs2.runner.JUnitRunner",2178],["import org.junit.runner.RunWith",11532]],"useCount":18327},{"word":"running","context":[["running(fakeApplication) {",132],["while (running) {",114],["* sent to the reporter when running the test can appear in the report of a test run. (In other words,",86],["if (running) {",103],["running(app) {",162],["running = true",163],["running = false",245],["running(FakeApplication(additionalConfiguration = inMemoryDatabase())) {",358],["running(FakeApplication()) {",1598],["running.set(false)",109]],"useCount":8287},{"word":"runtime","context":[["object Test extends dotty.runtime.LegacyApp {",832],["import com.asakusafw.runtime.model.DataModel",145],["import scala.reflect.runtime.{currentMirror => cm}",175],["import scala.reflect.runtime.universe",299],["override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)",162],["import org.eclipse.core.runtime.IProgressMonitor",164],["override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)",165],["import scala.reflect.runtime.universe.TypeTag",358],["import scala.reflect.runtime.{universe => ru}",376],["import scala.reflect.runtime.universe._",2130]],"useCount":12384},{"word":"s","context":[["s",2295],["s\"\"\"",7044],["s.tick()",1365],["s match {",806],["case Some(s) =>",521],["val scheduler = s",451],["case s: String =>",435],["s.toString",353],["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["* @param windowDuration width of the window; must be a multiple of this DStream's",371]],"useCount":187563},{"word":"same","context":[["*  @param u  the vector to multiply by (requires same first dimensions)",104],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["// To avoid Akka rebinding to the same port, since it doesn't unbind immediately on shutdown",168],["// Every table needs a * projection with the same type as the table's type parameter",102],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["we say that they are _isomorphic_ (\"iso\" = same; \"morphe\" = shape, form),",94],["* '''Note:''' Because Hadoop's RecordReader class re-uses the same Writable object for each",93],["*        other events reported during the same run",562],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350]],"useCount":11989},{"word":"sb","context":[["val sb = new StringBuilder",1196],["val sb = new StringBuffer()",102],["sb.clear()",106],["sb.append(\")\")",114],["sb.append('\"')",146],["val sb = new StringBuffer",147],["sb.append(\"\\n\")",215],["sb.toString()",547],["val sb = new StringBuilder()",591],["sb.toString",1295]],"useCount":12752},{"word":"sbt","context":[["/* sbt -- Simple Build Tool",1679],["object Build extends sbt.Build {",176],["import sbt.Keys._",2951],["package sbt",1995],["package org.jetbrains.sbt",292],["import sbt._",9410],["import com.typesafe.sbt.SbtScalariform._",229],["import sbt._, Keys._",197],["import org.scalatra.sbt._",141],["package com.typesafe.sbt",179]],"useCount":26661},{"word":"sc","context":[["sc = null",226],["sc = new SparkContext(conf)",302],["sc.stop",336],["sc,",354],["sc = new SparkContext(\"local\", \"test\")",878],["val sqlContext = new SQLContext(sc)",888],["sc: SparkContext,",972],["val sc = new SparkContext(conf)",2072],["sc.stop()",2170],["val sc = new SparkContext(sparkConf)",543]],"useCount":29369},{"word":"scala","context":[["import scala.collection.JavaConversions._",15808],["import scala.reflect.ClassTag",7121],["import scala.util.Random",7340],["import scala.annotation.tailrec",7796],["import scala.util.Try",8033],["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import scala.collection.mutable",12078],["import scala.collection.JavaConverters._",13821],["import scala.concurrent.Future",15060],["import scala.concurrent.duration._",18263]],"useCount":413765},{"word":"scalacheck","context":[["import org.scalacheck.{Arbitrary, Gen}",442],["import org.scalacheck.Arbitrary.arbitrary",338],["import org.scalacheck.Prop.forAll",475],["import org.scalacheck.Gen._",297],["import org.scalacheck.Properties",574],["import org.scalacheck.Arbitrary",767],["import org.scalacheck.Prop._",1058],["import org.scalacheck.Gen",1198],["import org.scalacheck.Arbitrary._",524],["import org.scalacheck._",1623]],"useCount":10080},{"word":"scaladsl","context":[["import akka.http.scaladsl.server.Directives._",877],["import akka.http.scaladsl.server._",236],["import akka.http.scaladsl.Http",799],["import akka.stream.scaladsl._",540],["import akka.http.scaladsl.model._",506],["import akka.stream.scaladsl.Source",445],["import akka.http.scaladsl.server.Route",395],["import akka.http.scaladsl.model.StatusCodes._",340],["import akka.http.scaladsl.model.StatusCodes",324],["import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._",250]],"useCount":9513},{"word":"scalajs","context":[["import scala.scalajs.js.annotation.JSExport",407],["import org.scalajs.jasminetest.JasmineTest",291],["import scala.scalajs.js.annotation.JSName",410],["import scala.scalajs.js.annotation.ScalaJSDefined",482],["import japgolly.scalajs.react.vdom.prefix_<^._",1147],["import scala.scalajs.js",5558],["import org.scalajs.dom",1192],["import scalajs.js, js.`|`",1311],["import japgolly.scalajs.react._",1371],["import org.scalajs.dom._",294]],"useCount":25997},{"word":"scalastyle","context":[["// scalastyle:off println",784],["// scalastyle:on println",767],["// scalastyle:off",635],["// scalastyle:on",620],["// scalastyle:off magic.number",214],["package org.scalastyle.scalariform",184],["// scalastyle:off line.size.limit",174],["//scalastyle:on",172],["// scalastyle:off null",162],["//scalastyle:off magic.number",146]],"useCount":6938},{"word":"scalatest","context":[["import org.scalatest.FunSpec",1726],["package org.scalatest",2203],["import org.scalatest.{FlatSpec, Matchers}",2434],["import org.scalatest.matchers.ShouldMatchers",2560],["import org.scalatest.Matchers",3073],["import org.scalatest.FlatSpec",3371],["import org.scalatest.mock.MockitoSugar",3559],["import org.scalatest.FunSuite",10421],["import org.scalatest._",9769],["import org.scalatest.junit.JUnitRunner",7883]],"useCount":103415},{"word":"scalaz","context":[["import scalaz.stream._",318],["import scalaz.syntax.monad._",347],["#+scalaz",389],["#-scalaz",389],["import scalaz._",5295],["import scalaz._, Scalaz._",1560],["import scalaz.concurrent.Task",1487],["import scalaz.Scalaz._",1113],["import scalaz.\\/",455],["import scalaz.std.list._",421]],"useCount":23811},{"word":"scheduler","context":[["import subscriber.{scheduler => s}",197],["package org.apache.spark.scheduler",258],["package spark.scheduler",128],["* This file is part of mycollab-scheduler.",173],["val scheduler = s",451],["scheduler,",319],["import org.apache.spark.scheduler._",128],["scheduler: Scheduler,",177],["* @param scheduler",160],["implicit val scheduler = StubScheduler.random()",132]],"useCount":10772},{"word":"schema","context":[["val schema =",208],["schema,",192],["schema",186],["schema: StructType,",179],["package org.kiji.schema.shell.ddl",122],["val schema = StructType(",120],["import sangria.schema._",114],["import org.kiji.schema.shell.Environment",109],["val schema = new DataFileReader(file, new GenericDatumReader[GenericRecord]).getSchema",222],["override def transformSchema(schema: StructType): StructType = {",240]],"useCount":13677},{"word":"scope","context":[["def `should use the implicit Equality in scope` {",1594],["it(\"should use the implicit Equality in scope\") {",1196],["\"should use the implicit Equality in scope\" in {",286],["import com.intellij.psi.scope.PsiScopeProcessor",186],["scope: scala.xml.NamespaceBinding, typeAttribute: Boolean): scala.xml.NodeSeq =",186],["implicit scope: Scope): TailRec[Tree] = {",157],["val ns = elem.scope.getURI(pre)",127],["* will register the passed string for forwarding later during test execution. If invoked from inside a scope,",120],["Helper.stringToXML(obj.toString, namespace, elementLabel, scope)",120],["scope",110]],"useCount":14709},{"word":"sealed","context":[["sealed trait State",290],["sealed trait Tree[+A]",170],["sealed trait Option[+A] {",148],["sealed trait List[+A] // `List` data type, parameterized on a type, `A`",100],["sealed trait Command",108],["sealed trait Input",118],["sealed trait Data",119],["sealed abstract class List",142],["sealed trait Message",128],["sealed trait Event",122]],"useCount":6448},{"word":"search","context":[["*  @param e  the ending row index (exclusive) for the search",244],["*  @param e  the ending index (exclusive) for the search",516],["val req = search in \"music\" types \"bands\" postFilter {",200],["// where to search snippet",163],["val req = search in \"music\" types \"bands\" aggs {",150],["import com.intellij.psi.search.searches.ReferencesSearch",121],["* @param query the <code>Query</code> with which to search",115],["val req = search in \"*\" types(\"users\", \"tweets\") limit 5 query {",114],["val req = search in \"school\" types \"student\" aggs {",108],["import com.intellij.psi.search.GlobalSearchScope",365]],"useCount":7378},{"word":"second","context":[["Await.result(offerProcessor.processOffer(offer), 1.second)",79],["val deadline: Timestamp = clock.now() + 1.second",79],["\"second test\" ignore { s => }",80],["tc.advance(1.second)",184],["s.tick(1.second)",175],["implicit val timeout = Timeout(1 second)",98],["override val theTestNames = Vector(\"can first test\", \"can second test\")",90],["override val theTestNames = Vector(\"should first test\", \"should second test\")",90],["override val theTestNames = Vector(\"must first test\", \"must second test\")",90],["\"second test\" ignore {}",90]],"useCount":9735},{"word":"seconds","context":[["implicit val timeout = Timeout(10 seconds)",146],["Await.result(promise.future, 5.seconds)",209],["}.get(10.seconds)()",140],["implicit val timeout = Timeout(5 seconds)",410],[".failureAccrualParams(Int.MaxValue, 0.seconds)",408],["implicit val timeout = Timeout(5.seconds)",390],[".pause(10 seconds, 20 seconds)",285],[".pause(10 seconds, 20 seconds)",285],["within(30 seconds) {",130],["val resp = Await.result(future, 3.seconds)",140]],"useCount":12944},{"word":"section","context":[["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["section(\"unit\")",163],["* <a href=\"#sharedFixtures\">Shared fixtures</a> section in the main documentation for this trait.",124],["section = ReferenceSection,",110],["* <a href=\"#howItExecutes\">How it executes</a> section in the main documentation for this trait.",70],["section(\"functional\")",62],["</section-1>",50],["</section>",254],["<section-1>",50],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872]],"useCount":7128},{"word":"security","context":[["import org.apache.hadoop.security.UserGroupInformation",142],["import java.security.MessageDigest",903],["import java.security.SecureRandom",365],["import org.apache.kafka.common.security.JaasUtils",113],["import com.precog.common.security._",110],["import org.apache.accumulo.core.client.security.tokens.PasswordToken",227],["import java.security.cert.X509Certificate",206],["import org.apache.accumulo.core.security.Authorizations",185],["package security",150],["import java.security.Principal",151]],"useCount":6412},{"word":"see","context":[["*  @see Eigen.scala",122],["* @see [[LoggingAdapter]]",125],["* @see [[http://api.highcharts.com/highmaps]]",151],["* @see [[http://api.highcharts.com/highcharts]]",687],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["* see http://code-pulse.com/bytefrog",176],["*  FIX: need a more robust algorithm for computing nullspace (@see Fac_QR.scala).",190],["* For more information see",197],["* @see [[http://api.highcharts.com/highstock]]",476],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317]],"useCount":12814},{"word":"select","context":[["select",764],[".select(\"year\")",215],["} yield select",212],["</select>",137],["override val select: js.UndefOr[js.Function] = selectOuter",120],["val select: js.UndefOr[js.Function] = js.undefined",120],["val selectOuter: js.UndefOr[js.Function] = select",120],["|select",116],["| select",96],[".select(",85]],"useCount":10852},{"word":"self","context":[["self match {",165],["private val self = this",113],["// MUST BE synchronized by `self`",165],["self,",219],["val self = this",265],["self",393],["self ! PoisonPill",539],["context stop self",636],["self =>",1061],["context.stop(self)",2351]],"useCount":20328},{"word":"send","context":[["l.send(new BarClose(new DateTime))",92],["application.tracker.send(new HitBuilders.EventBuilder()",93],["it(\"should send InfoProvided events with aboutAPendingTest set to false for info \" +",94],["it(\"should send InfoProvided events with aboutAPendingTest set to true for info \" +",94],["exchange.getResponseSender.send(JsObject(",98],["// send event",103],["l.send(EmptyMessage)",109],["// send some messages",126],["* @return The result to send to the client.",160],["// send some messages to each broker",195]],"useCount":11287},{"word":"seq","context":[["DBIO.seq(",545],["seq",181],["seq match {",146],["seq(",144],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["var seq = 0",139],["tryruleT(seq)*,",128],["seq += 1",106],["println(\"[\" + seq + \"] Main Menu\")",74],["case Some(seq) =>",72]],"useCount":6531},{"word":"sequence","context":[["* code tree, the sequence of bits representing that character.",66],["package im.actor.server.sequence",67],["import im.actor.server.sequence.SeqUpdatesExtension",68],["import im.actor.server.api.rpc.service.sequence.{ SequenceServiceConfig, SequenceServiceImpl }",77],["Future.sequence(",77],["* @return a new object with value added to the sequence",85],["import com.normation.utils.Control.sequence",162],["Future.sequence {",142],["sequence(",125],["* returns a new object with value added to the sequence",86]],"useCount":7616},{"word":"server","context":[["server.httpGet(",939],["package kafka.server",705],["import akka.http.scaladsl.server.Directives._",877],["server.start()",616],["server.close()",534],["server.stop()",462],["import akka.http.scaladsl.server.Route",395],["import im.actor.server.db.DbExtension",390],["import kafka.server.KafkaConfig",348],["server.shutdown()",308]],"useCount":37522},{"word":"service","context":[["assert(service.isAvailable)",188],["package com.twitter.finagle.service",309],["service.close()",289],["Await.result(service(123))",289],["service(request)",272],["Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")",265],["Some(\"releases\" at nexus + \"service/local/staging/deploy/maven2\")",246],[".build(service)",205],["import service._",322],["package service",553]],"useCount":25697},{"word":"services","context":[["* These activities include: offering paid services to customers,",539],["* This file is part of mycollab-services.",112],["sealRoute(services.adminRoutes) ~>",114],["import com.normation.cfclerk.services.TechniqueRepository",121],["sealRoute(services.workspaceRoutes) ~>",126],["import com.amazonaws.services.s3.AmazonS3Client",191],["import models.services.UserService",104],["* supplementary functions or services in addition to those offered by",1872],["package services",785],["import services._",131]],"useCount":11151},{"word":"servlet","context":[["import javax.servlet.http.HttpServletRequest",1274],["import javax.servlet.ServletContext",484],["import javax.servlet.http.HttpServletResponse",338],["import javax.servlet._",268],["import javax.servlet.http.{HttpServletResponse, HttpServletRequest}",235],["import javax.servlet.http.{HttpServletRequest, HttpServletResponse}",216],["import javax.servlet.http._",195],["import javax.servlet.http.{ HttpServletRequest, HttpServletResponse }",182],["package servlet",150],["import javax.servlet.http.HttpServlet",136]],"useCount":6512},{"word":"session","context":[["session {",950],["implicit session =>",398],["conn.withSessionDo { session =>",790],["db.withSession { implicit session =>",588],["session.close()",381],["session",316],["session.execute(",272],["DB autoCommit { implicit session =>",191],["db.withTransaction { implicit session =>",173],["DB withSession { implicit session =>",160]],"useCount":17599},{"word":"set","context":[["set",322],["* A \"Related Module\" means a set of sources files including their",1872],["log.append(set)",328],["// vim: set ts=4 sw=4 et:",284],["// No tagsToInclude set, FastAsLight excluded",225],["// set up",205],["*      nullspace (a) = set of orthogonal vectors v s.t. a * v = 0",190],["// Same as previous, except Ignore specifically mentioned in excludes set",225],["Await.result(mycluster1.ready) // give it sometime for the cluster to get the initial set of memberships",187],["Await.result(mycluster2.ready) // give it sometime for the cluster to get the initial set of memberships",187]],"useCount":44549},{"word":"settings","context":[[").settings(",2170],[".settings(",1649],["settings = Project.defaultSettings ++",1018],["settings = defaultSettings",584],["val main = play.Project(appName, appVersion, appDependencies).settings(",406],["settings = defaultSettings ++ Seq(",334],["import settings._",311],["// Add your own project settings here",301],["settings = Defaults.coreDefaultSettings ++",297],["settings = buildSettings ++ Seq(",285]],"useCount":28956},{"word":"sft","context":[["val packed   = StatSerializer(sft).serialize(stat)",97],["val sf = new ScalaSimpleFeature(\"fakeid\", sft)",101],["* @param sft simple feature type",119],["sft: SimpleFeatureType,",90],["val fs = loadFeatures(ds, sft, encodedFeatures)",86],["sft",81],["val featureCollection = new DefaultFeatureCollection(sftName, sft)",128],["val unpacked = StatSerializer(sft).deserialize(packed)",134],["* @param sft",147],["ds.createSchema(sft)",303]],"useCount":7686},{"word":"should","context":[["e1.failedCodeFileName.get should be (fileName)",1428],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["it(\"should use an explicitly provided Equality\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["def `should use an explicitly provided Equality` {",1594],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["def `should use the implicit Equality in scope` {",1594],["actual should be (expected)",3093],["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278]],"useCount":212070},{"word":"shouldBe","context":[["status shouldBe StatusCodes.OK",214],["contentType shouldBe `application/json`",170],["status(result) shouldBe SEE_OTHER",358],["status(result) shouldBe 200",353],["status shouldBe OK",337],["status(result) shouldBe 303",329],["form.errors.length shouldBe 1",193],["compiler.scapegoat.feedback.warnings.size shouldBe 1",172],["form.hasErrors shouldBe true",309],["compiler.scapegoat.feedback.warnings.size shouldBe 0",268]],"useCount":20799},{"word":"shutdown","context":[["server.shutdown()",308],["actorSystem.shutdown()",303],["context.system.shutdown()",265],["def shutdown() = {",224],["servers.foreach(_.shutdown())",314],["def shutdown(): Unit = {",343],["shutdown()",448],["def shutdown() {",792],["system.shutdown()",1414],["system.shutdown",201]],"useCount":15314},{"word":"simple","context":[["import org.opengis.feature.simple.SimpleFeature",287],["import play.api.db.slick.Config.driver.simple._",569],["import profile.simple._",325],["import scala.slick.driver.MySQLDriver.simple._",243],["import org.opengis.feature.simple.{SimpleFeature, SimpleFeatureType}",535],["import org.opengis.feature.simple.SimpleFeatureType",495],["import driver.simple._",494],["import scala.slick.driver.H2Driver.simple._",327],["import scala.slick.driver.PostgresDriver.simple._",138],["import org.geotools.feature.simple.SimpleFeatureBuilder",187]],"useCount":8976},{"word":"since","context":[["* @since 1.4.0",490],["* @since 1.0",871],["* @since 1.2.0",763],["* @since 1.3.0",704],["* @since 3.0",608],["* @since 4.1.0",493],["* @since   0.1",375],["* @since 4.0",490],["* @since 1.5.0",289],["* @since 2.2",315]],"useCount":17680},{"word":"single","context":[["// single proxy for each type family",77],["}.map(_.long(1)).single.apply().get",79],["* Properties for each single point",81],["* @param point Properties for each single point",81],["* @param events Events for each single point",81],["* Events for each single point",81],["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112],["it should \"provide aliases for single unit values\" in {",130],[".map(rs => rs.long(\"count\")).single.apply().get",198],["}.map(_.long(1)).single().apply().get",69]],"useCount":7108},{"word":"size","context":[["for (i <- 0 until size) {",209],["size",247],["assert(testFailedEvents.size === 1)",267],["compiler.scapegoat.feedback.warnings.size shouldBe 0",268],["assert(tp.size === 2)",302],["def size: Int",352],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["while (i < size) {",581],["assert(recordedEvents.size === 3)",237]],"useCount":88458},{"word":"sleep","context":[["Thread.sleep(500)",1014],["Thread.sleep(10000)",333],["Thread.sleep(200)",369],["Thread.sleep(10)",429],["Thread.sleep(3000)",433],["Thread.sleep(5000)",763],["Thread.sleep(2000)",810],["Thread.sleep(100)",1358],["Thread.sleep(1000)",2451],["Thread.sleep(50)",289]],"useCount":13849},{"word":"slf4j","context":[["import akka.event.slf4j.SLF4JLogging",218],["import org.slf4j.LoggerFactory",6978],["import com.typesafe.scalalogging.slf4j.Logging",1010],["import grizzled.slf4j.Logging",842],["import com.typesafe.scalalogging.slf4j.LazyLogging",700],["import org.slf4j.{Logger, LoggerFactory}",543],["import org.slf4j.Logger",443],["import grizzled.slf4j.Logger",394],["import com.typesafe.scalalogging.slf4j.StrictLogging",366],["import org.slf4j.{LoggerFactory, Logger}",273]],"useCount":14471},{"word":"slick","context":[["import slick.driver.JdbcProfile",621],["import slick.dbio.DBIO",235],["import play.api.db.slick.DatabaseConfigProvider",241],["import scala.slick.driver.MySQLDriver.simple._",243],["import slick.SlickException",262],["import slick.driver.H2Driver.api._",294],["import slick.ast._",314],["import scala.slick.driver.H2Driver.simple._",327],["import play.api.db.slick.Config.driver.simple._",569],["import slick.driver.PostgresDriver.api._",712]],"useCount":15812},{"word":"so","context":[["assert(so.size === 1)",180],["* furnished to do so, subject to the following conditions:",2674],["furnished to do so, subject to the following conditions:",262],["* so, subject to the following conditions:",224],["val so = rep.scopeOpenedEventsReceived",97],["// Set a known test id so we can validate the unique property is added",162],["@return true if this is so, else false",160],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["// We can't have the ensureTopicExists check here since the controller sends it as an advisory to all brokers so they",111],["// furnished to do so, subject to the following conditions:",100]],"useCount":15500},{"word":"some","context":[["* Here are some examples:",87],["* bit of behavior required by the system being tested. The test can also include some code that",85],["// so long as we have some way of comparing elements of the `Array`",89],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["List(\"-b\", \"some/path/file.xml\"),",95],["// send some messages",126],["val testClassName = \"some.class.name\"",170],["val className = \"some.class.name\"",175],["// send some messages to each broker",195],["// Read the avro file and do some processing",83]],"useCount":11417},{"word":"source","context":[["source.endObject()",366],["protected override def insert(source: XContentBuilder): Unit = {",400],["val source =",391],["* Redistribution and use in source and binary forms, with or without",3573],["Redistribution and use in source and binary forms, with or without",639],["* disclosing the source code of your own applications.",540],["* The interactive user interfaces in modified source and object code versions",539],["* shipping TA Buddy with a closed source product.",534],["source.close()",492],["val source = \"\"\"",462]],"useCount":31224},{"word":"span","context":[["* <p>Defaults to <code>&lt;span style=\"font-size: 10px\"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>",78],["<span class=\"icon-bar\"></span>",63],["* <p>Defaults to <code>&lt;span style=\"font-size: 10px\"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>",78],["/** <span class=\"badge badge-ecma6\" style=\"float: right;\">ECMAScript 6</span>",89],["/** <span class=\"badge badge-ecma6\" style=\"float: right;\">ECMAScript 6</span>",89],["val span = getSpan(info)",93],["<span>",198],["</span>",626],["\"\"\"<span class=\"stImport\">import org.scalatest._</span>",65],["\"\"\"<span class=\"stImport\">import org.scalatest._</span>",65]],"useCount":8429},{"word":"spark","context":[["import org.apache.spark.sql.Row",1241],["import org.apache.spark.storage.StorageLevel",1362],["import org.apache.spark._",1402],["import org.apache.spark.sql.types._",1484],["import org.apache.spark.Logging",1524],["import org.apache.spark.SparkConf",1822],["import org.apache.spark.{SparkConf, SparkContext}",2037],["import org.apache.spark.SparkContext._",2295],["import org.apache.spark.SparkContext",4498],["import org.apache.spark.rdd.RDD",7440]],"useCount":95592},{"word":"spec","context":[["val spec = new ExampleSpec",190],["val status = spec.run(None, Args(reporter = rep))",144],["val spec = new MySuite",164],["* add your integration spec here.",149],["import scala.{specialized => spec}",201],["import javax.crypto.spec.SecretKeySpec",223],["* Add your spec here.",234],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["ensureTestFailedEventReceived(spec, \"should blow up\")",864],["val spec = new MySpec",997]],"useCount":10534},{"word":"specified","context":[["it(\"should throw TestFailedException with normal error message if specified length is negative\") {",86],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["def `should throw TestFailedException with normal error message if specified size is negative` {",156],["def `should throw TestFailedException with normal error message if specified length is negative` {",108],["* Run a test. This trait's implementation runs the test registered with the name specified by",114],["* Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field",85],["it(\"should throw TestFailedException with normal error message if specified size is negative\") {",116],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["* of iterations of gradient descent using the specified step size. Each iteration uses",82],["def `should throw TestFailedException if object size does not match specified size` {",72]],"useCount":11095},{"word":"specs2","context":[["import org.specs2.Specification",615],["import org.specs2.ScalaCheck",560],["import org.specs2.mutable.Specification",6153],["import org.specs2.mutable._",4558],["import org.specs2.runner.JUnitRunner",2178],["import org.specs2.mock.Mockito",1192],["import org.specs2._",787],["import org.specs2.specification.Scope",772],["import org.specs2.runner._",708],["import org.specs2.mutable.SpecificationWithJUnit",344]],"useCount":24122},{"word":"split","context":[["val fields = line.split(\"\\t\")",116],["val columns = line.split(\"\\\\|\")",90],["val Array(from, to) = params(\"commitId\").split(\"\\\\.\\\\.\\\\.\")",64],["val (m, n) = (lines.length, lines(0).split (sp).length)",65],["val words = lines.flatMap(_.split(\" \"))",147],["val topic = topicPartition.split(\"-\").head",85],["_.split(\":\") match {",79],["val part = Integer.valueOf(topicPartition.split(\"-\").last).intValue",69],[".flatMap(_.split(\"\\\\s+\"))",66],["override def getPreferredLocations(split: Partition): Seq[String] = {",116]],"useCount":10376},{"word":"spray","context":[["import spray.json.DefaultJsonProtocol",603],["import spray.json._",3067],["import spray.http._",1353],["import spray.can.Http",1147],["import spray.routing._",935],["import spray.json.DefaultJsonProtocol._",656],["import spray.http.StatusCodes",403],["import spray.http.StatusCodes._",528],["import spray.client.pipelining._",566],["import spray.httpx.SprayJsonSupport._",617]],"useCount":20954},{"word":"sql","context":[["import org.apache.spark.sql.functions._",557],["sql(",2872],["import java.sql.Timestamp",1512],["import org.apache.spark.sql.types._",1484],["import org.apache.spark.sql.Row",1241],["import org.apache.spark.sql.SQLContext",1119],["import java.sql.Connection",744],["sql\"\"\"",670],["import org.apache.spark.sql.DataFrame",647],["import org.apache.spark.sql.types.StructType",570]],"useCount":35707},{"word":"sqlContext","context":[["override def run(sqlContext: SQLContext): Seq[Row] = {",105],["def run(sqlContext: SQLContext): Seq[Row] = {",99],["val ssc = sqlContext; import ssc.implicits._",87],["import sqlContext.implicits._",771],["implicit val sqlContext = new SQLContext(sc)",107],["val sqlContext = SQLContext.getOrCreate(sc)",139],["val sqlContext = new org.apache.spark.sql.SQLContext(sc)",206],["sqlContext.sql(",309],["val sqlContext = new SQLContext(sc)",888],["sqlContext: SQLContext,",366]],"useCount":6332},{"word":"src","context":[["src",67],["src.close()",87],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["register(\"test://app/src/test/resources/xsd/test-urlxsd.xsd\",",337],["XML.loadFile(\"src/test/resources/xsd/test-urlxsd.xsd\"))",337],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["case ShapePreservingBuilderF(src, inputs, op) =>",53],["def reparent[B](newSrc: B) = copy(src = newSrc)",52],["src,",76]],"useCount":6997},{"word":"ssc","context":[["ssc.checkpoint(checkpointDir)",96],["if (ssc != null) {",69],["val ssc = sqlContext; import ssc.implicits._",87],["val ssc = sqlContext; import ssc.implicits._",87],["ssc",102],["val clock = ssc.scheduler.clock.asInstanceOf[ManualClock]",104],["ssc: StreamingContext,",134],["ssc.stop()",431],["ssc.start()",1282],["ssc.awaitTermination()",627]],"useCount":6409},{"word":"stHighlight","context":[["* <pre class=\"stHighlight\">testing",14],["* <pre class=\"stHighlight\">",15662]],"useCount":15676},{"word":"stack","context":[["val program = ScriptProgram(TestUtil.testProgram, stack,script)",300],["*     val stack = new Stack[Int]",210],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["*       val size = stack.size",159],["stack",135],["*        or a <code>Throwable</code> created to capture stack trace information about the problem.",139],["val stack = new Stack[Int]",144],["*     stack",159],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659]],"useCount":17142},{"word":"start","context":[["thread.start()",420],["}.start()",529],["start()",537],["server.start()",616],["fast\"Hello, World!${start}blahblah$i${p1}\\n${p2}blahblah\" ->",640],["val start = System.currentTimeMillis",665],["alg.start()",679],["def start() {",686],["val start = System.currentTimeMillis()",755],["ssc.start()",1282]],"useCount":39517},{"word":"state","context":[["// state representation type",196],["state match {",1110],["state",955],["import mesosphere.marathon.state.PathId._",497],["import mesosphere.marathon.state._",440],["import mesosphere.marathon.state.Timestamp",198],["package mesosphere.marathon.state",355],["val extracted = Project.extract(state)",187],["import mesosphere.marathon.state.PathId",173],["import state._",201]],"useCount":36948},{"word":"stats","context":[["import com.twitter.finagle.stats.{DefaultStatsReceiver, StatsReceiver}",166],["import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}",213],["import com.twitter.finagle.stats.InMemoryStatsReceiver",252],["package com.twitter.finagle.stats",260],["import com.twitter.finagle.stats.StatsReceiver",435],["import breeze.stats._",121],["package breeze.stats.distributions",140],["import com.twitter.finagle.stats.{StatsReceiver, NullStatsReceiver}",156],["import com.twitter.ostrich.stats.Stats",176],["import com.twitter.finagle.stats.NullStatsReceiver",157]],"useCount":11373},{"word":"status","context":[["status(result) must equalTo(OK)",561],[".check(status.is(200))",569],["status(result) should be(SEE_OTHER)",452],[".check(status.is(200)))",656],["status.waitUntilCompleted()",740],["val status = suite.run(None, Args(reporter))",752],["status should be(OK)",450],["val status = suite.run(None, Args(reporter = rep))",419],["status",822],["status should equal(200)",1130]],"useCount":37971},{"word":"step","context":[["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["step(1)",208],["(step: StepExecutor) => {",179],["step",426],["step {",661],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["import step.ctx._",183]],"useCount":13936},{"word":"stop","context":[["sc.stop()",2170],["def stop(): Unit = {",322],["sc.stop",336],["ssc.stop()",431],["server.stop()",462],["Nested Timer(stop)",465],["stop()",550],["context stop self",636],["def stop() {",790],["context.stop(self)",2351]],"useCount":19538},{"word":"storage","context":[["import mesosphere.marathon.io.storage.StorageProvider",226],["import org.apache.spark.storage.StorageLevel",1362],["import breeze.storage.Zero",137],["import spark.storage.StorageLevel",134],["package com.twitter.zipkin.storage.cassandra",134],["package org.apache.spark.storage",186],["storage,",197],["storage: StorageProvider,",134],["val storage = mock[Storage]",201],["import com.twitter.conversions.storage._",198]],"useCount":10731},{"word":"store","context":[["assert(store.getSingle(\"a2\") != None, \"a2 was not in store\")",99],["assert(store.getSingle(\"a2\") != None, \"a2 was not in store\")",99],["val store = new MarathonStore[AppDefinition](state, metrics, () => AppDefinition(), \"app:\")",85],["// create the data store",100],["store: PersistentStore,",101],["store.stop()",115],["store = null",116],["store",125],["when(repo.store(any())).thenReturn(Future.successful(app))",84],["store = new BlockManager(\"<driver>\", actorSystem, master, serializer, 1200)",84]],"useCount":12339},{"word":"str","context":[["val str = dateTime.print(x)",86],["JsString(str)",88],["* @param str",94],["println(str)",103],["var str = \"\"",106],["val str =",108],["str match {",199],["str",430],["case Some(str) =>",85],["dateTimeParser.parseDateTime(str)",84]],"useCount":8502},{"word":"stream","context":[["import akka.stream.scaladsl.Source",445],["import akka.stream._",267],["import scalaz.stream.Process",293],["import akka.stream.ActorMaterializer",1378],["import akka.stream.Materializer",607],["stream.close()",541],["package scalaz.stream",315],["import scalaz.stream._",318],["import akka.stream.scaladsl.Flow",219],["import akka.stream.scaladsl._",540]],"useCount":20430},{"word":"streaming","context":[["import org.apache.spark.streaming._",394],["private[streaming]",544],["import org.apache.spark.streaming.StreamingContext",446],["import org.apache.spark.streaming.dstream.DStream",497],["import org.apache.spark.streaming.{Seconds, StreamingContext}",368],["import org.apache.spark.streaming.StreamingContext._",195],["package org.apache.spark.streaming",174],["package org.apache.spark.streaming.dstream",165],["import org.apache.spark.streaming.receiver.Receiver",152],["import org.apache.spark.streaming.Seconds",141]],"useCount":6707},{"word":"string","context":[["* Given the driver type, return the string required to create the column in the database",139],["\"convert to the correct string\" in {",144],["testContext.run(q).string mustEqual",361],["input: string",266],["* will register the passed string for forwarding later during test execution. If invoked while this",263],["* will register the passed string for forwarding later during test execution. If invoked from inside a scope,",120],["\"type\": \"string\",",118],["import scalaz.std.string._",180],["dataType = \"string\",",157],["output: string",173]],"useCount":20040},{"word":"stripMargin","context":[["\"\"\".stripMargin)",4948],["\"\"\".stripMargin",10690],["\"\"\".stripMargin),",572],["\"\"\".stripMargin.replaceAll(\"\\r\", \"\").trim()",684],["\"\"\".stripMargin,",761],["\"\"\".stripMargin.trim()",797],["\"\"\".stripMargin.trim",813],["|\"\"\".stripMargin)",862],["|}\"\"\".stripMargin",1492],["|\"\"\".stripMargin",3448]],"useCount":34659},{"word":"style","context":[["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["style: U[js.Any] = undefined,",485],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["style.foreach(v => props.updateDynamic(\"style\")(v))",339],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",144],["* <table style=\"border-collapse: collapse; border: 1px solid black\">",161],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["style.foreach(v => props.updateDynamic(\"style\")(v))",339],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169]],"useCount":8902},{"word":"subject","context":[["* subject to the following conditions:",295],["behavior of \"A subject\"",180],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* furnished to do so, subject to the following conditions:",2674],["furnished to do so, subject to the following conditions:",262],["describe(\"A subject\") {",252],["\"A subject\" - {",252],["/* This Source Code Form is subject to the terms of the Mozilla Public",246],["* so, subject to the following conditions:",224],["\"A subject\" when {",180]],"useCount":9163},{"word":"success","context":[["success",1953],["success,",122],["promise.success(())",129],["startConsuming.success(Continue)",130],["success => fail(\"Should have errored out\")",147],["promise.success(Continue)",151],["if (success) {",168],["status whenCompleted { _ => promise.success(rep) }",262],["success => {",349],["status whenCompleted { _ => promise.success(reporter) }",373]],"useCount":11747},{"word":"successful","context":[["Future.successful {",368],["Future.successful(())",494],["chain.successful {",412],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["Future.successful(None)",248],["operation.successful {",235],["requestHolder.get() returns Future.successful(response)",212],["Future.successful(",208],["case None => Future.successful(None)",166],["* @return Success(id) if successful, otherwise Failure",162]],"useCount":11599},{"word":"such","context":[["* This field enables syntax such as the following:",72],["* For example, this method enables syntax such as the following:",73],["* agrees to be fully responsible for the fact that any such",77],["* This class enables syntax such as the following test registration:",88],["* for library developers. End users will prefer a safer, higher-level API such as that provided",91],["* This field supports syntax such as the following:",92],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* For example, this method supports syntax such as the following:",501],["* This class enables syntax such as the following:",155]],"useCount":7673},{"word":"suite","context":[["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["* The suite class name parameter is optional, because suites in ScalaTest are an abstraction that",79],["* will collect and report information about the running suite of tests.",81],["* Returns a user friendly string for this suite, composed of the",98],["* @return a user-friendly string for this suite",98],["// This file is part of the Equal application suite.",261],["val suite = new MySuite",812],["val status = suite.run(None, Args(reporter))",752],["val status = suite.run(None, Args(reporter = rep))",419],["val suite = new ExampleSpec",381]],"useCount":7779},{"word":"sum","context":[["sum",1273],["/** Returns the sum of this value and `x`. */",149],["Sample(o, count(sourceCount), sum(sourceCount), Zero, Zero)",207],[".sum",370],["var sum = _0",409],["sum += elem",434],["}.sum",452],["var sum = 0L",457],["var sum = 0",666],["var sum = 0.0",1064]],"useCount":18370},{"word":"super","context":[["super.afterAll()",1101],["case _ => super.accept(visitor)",390],["case _ => super.emitNode(sym, rhs)",410],["super.tearDown()",431],["super.withFixture(test)",452],["super.preStart()",615],["super.postStop()",616],["super.onCreate(savedInstanceState)",632],["super.setUp()",635],["super.beforeAll()",1308]],"useCount":30598},{"word":"swing","context":[["import javax.swing.JLabel",141],["import javax.swing.JComponent",179],["import javax.swing.JFrame",186],["import javax.swing.SwingUtilities",191],["import swing._",215],["import javax.swing.Icon",230],["import scala.swing.event._",249],["import javax.swing.JPanel",281],["import javax.swing._",555],["import scala.swing._",893]],"useCount":8236},{"word":"sym","context":[["val sym = tpe.typeSymbol",93],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = {",98],["val sym = fun.symbol",106],["implicit val pos = sym.pos",110],["val sym = cd.symbol",143],["val sym = tp.symbol",176],["sym",217],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["val sym = tree.symbol",356],["case _ => super.emitNode(sym, rhs)",410]],"useCount":15979},{"word":"symbol","context":[["val sym = tp.symbol",176],["val symbol: js.UndefOr[String] = js.undefined",115],["val symbolOuter: js.UndefOr[String] = symbol",115],["val sym = fun.symbol",106],["symbol: Symbol,",104],["symbol match {",89],["override val symbol: js.UndefOr[String] = symbolOuter",115],["<constantatomformula symbol=\"A\"/>",120],["val sym = tree.symbol",356],["val sym = cd.symbol",143]],"useCount":12673},{"word":"synchronized","context":[["this synchronized {",140],["// MUST BE synchronized by `self`",165],["brokerLock synchronized {",135],["lazy val targetTypeTag = TypeTag.synchronized {",114],["self.synchronized {",107],["synchronized {",3141],["this.synchronized {",1184],["lock.synchronized {",603],["lock synchronized {",491],["group synchronized {",186]],"useCount":11308},{"word":"syntax","context":[["import io.circe.syntax._",315],["import scalaz.syntax.std.option._",249],["import spire.syntax.cfor._",327],["* This method enables the following syntax:",3913],["import play.api.libs.functional.syntax._",1600],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["import scalaz.syntax.monad._",347],["* For example, this method supports syntax such as the following:",501]],"useCount":20335},{"word":"sys","context":[["__elementLabel getOrElse { sys.error(\"missing element label.\") },",131],["sys.exit(-1)",109],["import scala.sys.process.Process",152],["sys.exit()",180],["sys.exit(0)",324],["import sys.process._",370],["sys.exit(1)",1327],["import scala.sys.process._",913],["sys.error(\"todo\")",518],["sys.addShutdownHook {",123]],"useCount":9287},{"word":"system","context":[["import context.system",335],["system.shutdown()",1414],["import system.dispatcher",1267],["TestKit.shutdownActorSystem(system)",627],["implicit val system = ActorSystem()",565],["implicit val system = context.system",312],["system: ActorSystem,",454],["system.terminate()",453],["implicit val ec = system.dispatcher",420],["def actorRefFactory = system",320]],"useCount":26584},{"word":"t","context":[["case t: Throwable => {",336],["case Cons(h, t) =>",348],["t",1839],["case Some(t) =>",355],["val t = new Tester(input)",480],["case Failure(t) =>",527],["t match {",1803],["case t: Throwable =>",1712],["throw t",590],["case t =>",573]],"useCount":94585},{"word":"t1","context":[["t1",62],["t1;::;1,",389],["val t1 = System.currentTimeMillis",166],["val t1 = System.nanoTime()",231],["val lapse = (t1 - t0) / 1000000;",77],["val t1 = System.currentTimeMillis()",165],["val r1 = obj.reduce(t1.get, t2.get)",120],[".filter { case (t1, t2) =>",65],["val t1 = obj.prepare(cell1)",85],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79]],"useCount":8825},{"word":"t2","context":[["val t2 = System.currentTimeMillis",124],["val r1 = obj.reduce(t1.get, t2.get)",120],["val t2 = obj.prepare(cell2)",85],["case t2: Tuple2[_, _] =>",84],["left._1 == t2._1 &&",84],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],[".filter { case (t1, t2) =>",65],["val t2 = System.currentTimeMillis()",62]],"useCount":7488},{"word":"table","context":[["table,",286],["* <table>",114],["* <table><tr><td class=\"usage\">",130],["* </table>",258],["<table>",240],["table",222],["table: String,",203],["* </td></tr></table>",130],["* <table style=\"border-collapse: collapse; border: 1px solid black\">",161],["</table>",871]],"useCount":15063},{"word":"tag","context":[["override lazy val tag = {",251],["* @throws NullPointerException if <code>specText</code> or any passed test tag is <code>null</code>",223],["tag match {",155],["val tag = readByte()",191],["it(\"should throw NullPointerException if a null test tag is provided\") {",132],["assert(caught.getMessage === \"a test tag was null\")",137],["assert(caught2.getMessage === \"a test tag was null\")",137],["implicit val tagA = eA.tag",148],["} tag UnitTest",191],["lazy val tag = {",215]],"useCount":11011},{"word":"tags","context":[["* @param testTags the optional list of tags for this test",316],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["d.tags",175],["e.tags",150],["f.tags",150],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["a.tags",183],["c.tags",182],["g.tags",124],["b.tags",182]],"useCount":8347},{"word":"tail","context":[["case class Cons[+A](head: A, tail: List[A]) extends List[A]",125],["case head :: tail =>",418],["stack = stack.tail",102],["else cons(as.head, apply(as.tail: _*))",124],["rest = rest.tail",458],["Cons(() => head, () => tail)",134],["lazy val tail = tl",138],["args = tail",176],["else Cons(as.head, apply(as.tail: _*))",179],["parse(tail)",328]],"useCount":11220},{"word":"tailrec","context":[["@inline @tailrec",30],["import scala.annotation.{ switch, tailrec }",44],["import scala.annotation.{switch, tailrec}",96],["@scala.annotation.tailrec",603],["import annotation.tailrec",707],["@annotation.tailrec",2207],["import scala.annotation.tailrec",7796],["@tailrec",9640],["// @annotation.tailrec",23],["@tailrec final",22]],"useCount":21586},{"word":"take","context":[["* of the set can be found quickly. If you want to learn more you can take a look",71],["it(\"should not pass a NoArgTest to withFixture for tests that take a Fixture\") {",81],["it(\"should pass a NoArgTest to withFixture for tests that take no fixture\") {",81],[".take(1)",62],["it(\"should allow both tests that take fixtures and tests that don't\") {",93],["<console>:15: error: org.scalatest.words.NewContainWord does not take parameters",100],["def take(n: Int): Stream[A] = this match {",69],["assertEquals(\"jan\", filter.select(\"tag\").take(1)(0)(0))",54],["* <li>write tests that take a fixture parameter</li>",59],["* <li>(You can also define tests that don't take a fixture parameter.)</li>",59]],"useCount":8487},{"word":"target","context":[["\"-target:jvm-1.8\",",99],["target",265],["def this(target: XFormsEventTarget) = this(target, EmptyGetter)",204],["val env = TargetEnvironment.create(target)",98],["def this(target: XFormsEventTarget) = this(target, EmptyGetter)",204],["import edu.gemini.spModel.target.SPTarget",199],["val target = new SPTarget(ra.toDegrees, dec.toDegrees)",93],["target,",115],["lazy val target = setupTarget(None)",179],["target match {",184]],"useCount":11382},{"word":"task","context":[["assert(task.isDefined)",276],["import mesosphere.marathon.core.task.Task",486],["val task = tasks(0)",111],["case Some(task) =>",114],["val f = task.runAsync",115],["val task: Option[(TaskInfo, Seq[Long])] = buildIfMatches(",115],["val (taskInfo, taskPorts) = task.get",163],["import mesosphere.marathon.core.task.tracker.TaskTracker",193],["task.cancel()",215],["task",235]],"useCount":16513},{"word":"tasks","context":[["for (task <- tasks) {",69],["assert(tasks.size === 1)",95],["assert(timer.tasks.size === 1)",109],["package mesosphere.marathon.tasks",134],["freshRack, // list of tasks register in the cluster",111],["val task = tasks(0)",111],["\"TestScheduler should have no pending tasks\")",130],["import mesosphere.marathon.tasks.TaskTracker",204],["assert(s.state.get.tasks.isEmpty,",162],["assert(timer.tasks.isEmpty)",171]],"useCount":8110},{"word":"td","context":[["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",144],["* </td>",1497],["</td>",1475],["<td>",920],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   </td>",507],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284]],"useCount":13566},{"word":"template","context":[["* To change this template, choose Tools | Template Manager",113],["useCassandraConfig(Seq(\"cassandra-default.yaml.template\"))",126],["* and open the template in the editor.",324],["* To change this template file, choose Tools | Templates",118],["* To change this template use File | Settings | File Templates.",967],["</xsl:template>",84],["* To change this template, choose Tools | Templates",93],["* If you use it as a template to create your own app, please use `spark-submit` to submit your app.",111],["package org.template.recommendation",110],["package org.template.similarproduct",94]],"useCount":6533},{"word":"terms","context":[["* @param timeStamp a <code>Long</code> indicating the time this event was reported, expressed in terms of the",166],["*   The precise terms and conditions for copying, distribution and",47],["*     source code, which must be distributed under the terms of Sections",47],["* distribute such modifications or work under the terms of Section 1",47],["* This source code is distributed under the terms of",67],["def nextInt: (Int, RNG) // Should generate a random `Int`. We'll later define other functions in terms of `nextInt`.",75],["/* This Source Code Form is subject to the terms of the Mozilla Public",246],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872]],"useCount":6766},{"word":"test","context":[["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["import play.api.test.Helpers._",2015],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["package test",1389],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["import play.api.test._",1554],["test.c: In function 'main':",906],["def withFixture(test: OneArgTest) {}",1259],["test(",1226]],"useCount":153043},{"word":"testName","context":[["val testName = \"test name\"",173],["testName: String,",232],["super.run(testName, args)",180],["protected override def runTest(testName: String, args: Args): Status = {",183],["it(\"should execute all tests when run is called with testName None\") {",193],["assert(rep.testSucceededEventsReceived(0).testName == \"test 1\")",193],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["it(\"should execute one test when run is called with a defined testName\") {",193],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["override def run(testName: Option[String], args: Args): Status = {",391]],"useCount":11624},{"word":"testkit","context":[["import akka.http.scaladsl.testkit.ScalatestRouteTest",192],["import akka.testkit.TestProbe",830],["import spray.testkit.Specs2RouteTest",208],["package com.typesafe.slick.testkit.tests",213],["import spray.testkit.ScalatestRouteTest",281],["import akka.testkit.ImplicitSender",301],["import akka.testkit.TestActorRef",367],["import akka.testkit.{ImplicitSender, TestKit}",420],["import akka.testkit.TestKit",628],["import akka.testkit._",689]],"useCount":7832},{"word":"tests","context":[["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["it(\"should report as ignored, and not run, tests marked ignored\") {",158],["it(\"should execute all tests when run is called with testName None\") {",193],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["val tests = TestSuite {",198],["package com.typesafe.slick.testkit.tests",213],["// SlowAsMolasses is included, and both tests should be included",225],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["val tests = Table(",247],["package tests",299]],"useCount":17497},{"word":"text","context":[["doTest(text, resultText)",367],["import java.text.SimpleDateFormat",2725],["text: String,",323],["contentType = \"text/html\"",337],["import com.intellij.openapi.util.text.StringUtil",369],["val text =",866],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["import org.geotools.filter.text.ecql.ECQL",464],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["import org.locationtech.geomesa.utils.text.WKTUtils",375]],"useCount":38412},{"word":"than","context":[["/** Returns `true` if this value is greater than or equal to x, `false` otherwise. */",149],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["it(\"should propagate out Errors that are direct subtypes of Error in JDK 1.5, other than \" +",177],["/** Returns `true` if this value is greater than x, `false` otherwise. */",150],["/** Returns `true` if this value is less than x, `false` otherwise. */",150],["/** Returns `true` if this value is less than or equal to x, `false` otherwise. */",149],["*               method. If Security and/or Audit are configured, this value must be a value other than None.",105],["// a function for testing whether an `A` is greater than another `A`.",90],["* If `trees` is a list of less than two elements, that list should be returned",67]],"useCount":8180},{"word":"that","context":[["* that is created or manipulated using TA Buddy.",534],["* documentation that, without modification of the Source Code, enables",1872],["that match {",577],["override def equals(that: Any) = that match {",576],["override def equals(that: Any) = that match {",576],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["override def equals(that: Any): Boolean = that match {",447],["override def equals(that: Any): Boolean = that match {",447],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336]],"useCount":94587},{"word":"the","context":[["def `should use the implicit Equality in scope` {",1594],["it(\"should use the implicit Equality in scope\") {",1196],["* This method enables syntax such as the following:",1148],["* This method enables the following syntax:",3913],["* furnished to do so, subject to the following conditions:",2674],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* documentation that, without modification of the Source Code, enables",1872],["* This method supports syntax such as the following:",1004],["* the matchers DSL.",1119]],"useCount":557678},{"word":"theTestThatCalled","context":[["assert(e.theTestThatCalled)",211],["assert(b.theTestThatCalled)",344],["assert(d.theTestThatCalled)",211],["assert(!i.theTestThatCalled)",211],["assert(c.theTestThatCalled)",211],["assert(!a.theTestThatCalled)",286],["var theTestThatCalled = false",3518],["assert(a.theTestThatCalled)",383],["assert(h.theTestThatCalled)",211],["assert(!j.theTestThatCalled)",211]],"useCount":11027},{"word":"theTestThisCalled","context":[["assert(b.theTestThisCalled)",383],["var theTestThisCalled = false",3518],["assert(!k.theTestThisCalled)",211],["assert(!f.theTestThisCalled)",211],["assert(!j.theTestThisCalled)",211],["assert(!i.theTestThisCalled)",211],["assert(!e.theTestThisCalled)",391],["assert(!d.theTestThisCalled)",383],["assert(c.theTestThisCalled)",383],["assert(a.theTestThisCalled)",555]],"useCount":10922},{"word":"then","context":[["* If the field is a {@link ChronoField} then the query is implemented here.",96],["* @param queryString the string with which to search, first by ID then by name",93],["* @param updateFunc State update function. If `this` function returns None, then",88],["* is known and not optional and set to None, then the field is serialized and returned.",85],["//then",749],["fails to comply with the standard, then your patches will be rejected. For further information, please visit the coding",106],["* If the field is not a {@code ChronoField}, then the result of this method",138],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["then(\"the result is the difference between the two numbers\")",253],["// then",2079]],"useCount":11882},{"word":"thenReturn","context":[["when(underlying.close(any[Time])) thenReturn Future.Done",65],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["when(repo.allIds()).thenReturn(Future.successful(Seq(app.id.toString)))",64],["when(mockInfluxClientFactory.getClient(None)).thenReturn(mockClient -> mockContext)",63],[".thenReturn(Future.successful(getData))",74],["when(tracker.count(app.id)).thenReturn(0)",78],["when(mockDataManager.getOrganization(GiltName)).thenReturn(Success(Some(GiltOrg)))",314],["when(repo.store(any())).thenReturn(Future.successful(app))",84],["when(tracker.get(app.id)).thenReturn(Set.empty[MarathonTask])",88],["when(mockDataManager.getTeam(GiltOrg, GiltTeamName)).thenReturn(Success(Some(GiltTeam)))",143]],"useCount":7174},{"word":"there","context":[["\"hi there\"",341],["alert(\"hi there\")",96],["markup(\"hi there\")",96],["info(\"hi there\")",96],["And(\"there are no more interactions\")",103],["a.run(None, Args(SilentReporter, Stopper.default, Filter(), ConfigMap(\"hi\" -> \"there\"), None, new Tracker, Set.empty))",112],["it(\"should throw an exception if there is no underlying profile\") {",122],["assert(noteList(0).message == \"hi there\")",176],["assert(alertList(0).message == \"hi there\")",176],["val msg = \"hi there, dude\"",250]],"useCount":10184},{"word":"this","context":[["* distributed with this work for additional information",4340],["this",25786],["this()",2192],["this match {",1881],["* licence, when you create a Related Module, this Related Module is",1268],["* which accompanies this distribution and is available at",1232],["this.synchronized {",1184],["* accompanies this distribution and is available at",1026],["def this() = this(???)",1012],["def this() = this(???)",1012]],"useCount":255698},{"word":"thisLineNumber","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["e.failedCodeLineNumber should be (Some(thisLineNumber - 3))",563],["assert(e.failedCodeLineNumber === (Some(thisLineNumber - 4)))",543],["tfe.failedCodeLineNumber should be (Some(thisLineNumber - 11))",517],["e.failedCodeLineNumber should be (Some(thisLineNumber - 14))",444],["assert(caught4.failedCodeLineNumber === Some(thisLineNumber - 4))",726],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280]],"useCount":20291},{"word":"thread","context":[["thread.setDaemon(true)",151],["* print to the standard output. This method can be called safely by any thread.",132],["thread {",437],["* This method can be called safely by any thread.",132],["* throw an exception. This method can be called safely by any thread.",131],["thread.join()",125],["thread.start",137],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["thread",227],["thread.start()",420]],"useCount":9740},{"word":"thrift","context":[["org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field_header.`type`)",106],["import org.apache.thrift.TApplicationException",134],["import com.twitter.zipkin.conversions.thrift._",231],["package com.twitter.finagle.zipkin.thrift",93],["import org.apache.thrift.protocol.TProtocolFactory",93],["import org.apache.thrift.protocol.TBinaryProtocol",225],["package com.twitter.finagle.thrift",252],["import org.apache.thrift.protocol._",263],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92]],"useCount":6282},{"word":"throw","context":[["throw new UnsupportedOperationException",927],["throw e",4110],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["throw newTestFailedException(",1208],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["throw ex",1157],["throw new IllegalArgumentException(",1220],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["throw t",590]],"useCount":65286},{"word":"throws","context":[["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["@throws(classOf[IOException])",1799],["@throws(classOf[Exception])",1579],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["@throws(classOf[TimeoutException])",332],["* @throws ArithmeticException if numeric overflow occurs",332],["@scala.throws[Exception](classOf[Exception])",306],["* @throws Exception",281],["@throws(classOf[InterruptedException])",610]],"useCount":18880},{"word":"time","context":[["import org.joda.time.LocalDate",726],["import org.joda.time.DateTime",8580],["import com.twitter.conversions.time._",2236],["import org.joda.time._",961],["import org.joda.time.format.DateTimeFormat",932],["import com.github.nscala_time.time.Imports._",892],["import java.time.LocalDate",366],["import org.joda.time.{DateTime, DateTimeZone}",655],["import org.joda.time.format.ISODateTimeFormat",675],["import java.time.Instant",795]],"useCount":53343},{"word":"timeout","context":[["Await.result(future, timeout.duration)",146],["timeout: Timeout,",172],["val result = Await.result(response.get, timeout)",217],["expectMsgPF(timeout) {",330],["implicit val timeout = Timeout(10 seconds)",146],["eventually(timeout(1000 milliseconds), interval(10 milliseconds)) {",105],["implicit val timeout = Timeout(1 second)",98],["implicit val timeout = Timeout(5.seconds)",390],["implicit val timeout = Timeout(5 seconds)",410],["assertTrue(f.get(timeout, TimeUnit.SECONDS).booleanValue)",118]],"useCount":14806},{"word":"timestamp","context":[["timestamp: Long,",168],["timestamp: String = Timestamp.now().toString)",120],["timestamp,",117],[".value(_.timestamp, row.bi)",132],["timestamp: String = Timestamp.now().toString) extends UpgradeEvent",105],["val timestamp = new DateTime()",95],["timestamp",67],["val interval = new Interval(timestamp.minusDays(1), timestamp.plusDays(1))",71],["val interval = new Interval(timestamp.minusDays(1), timestamp.plusDays(1))",71],["val timestamp = System.currentTimeMillis()",89]],"useCount":6655},{"word":"title","context":[["title: U[String] = undefined,",455],["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["title: Option[String] = None,",130],["title = title,",138],["title = title,",138],["def title = column[String](\"title\")",144],["def title = column[String](\"title\")",144],["title,",260],["title: String,",873]],"useCount":10103},{"word":"to","context":[["go to BeforeYouStartPage",539],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* furnished to do so, subject to the following conditions:",2674],["* furnished to do so, subject to the following conditions:",2674],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* supplementary functions or services in addition to those offered by",1872],["* These activities include: offering paid services to customers,",539],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520]],"useCount":273823},{"word":"toArray","context":[["}.toArray",778],[".toArray",426],["}).toArray",345],["val arr: Array[Any] = tuple.productIterator.toArray",204],["res.toArray",168],["ListSet(atomic.get.testNamesList.toArray: _*)",130],["result.toArray",105],[").toArray",98],["buf.toArray",88],["buffer.toArray",88]],"useCount":7174},{"word":"toInt","context":[["val es__ = (0 until n.toInt).foldLeft(TizenHelper.TizenExceptionBot)((_e, i) => {",92],["val tag = bytes(index(i)).toInt",64],["case (ids, SDecimal(d)) if ids.length == 1 => d.toInt",96],["var rowsPerThread = ((Nrows - 1) / nthreads).toInt + 1 // how many rows the thread processes",98],["defining(params(\"id\").toInt){ issueId =>",57],["val maxHeaderSizeInBytes = _maxHeaderSize.inBytes.toInt",63],["val n = readLine.toInt",61],["test[Int](_.toInt)",72],["log.append(message(log.logEndOffset.toInt, log.logEndOffset.toInt))",81],["log.append(message(log.logEndOffset.toInt, log.logEndOffset.toInt))",81]],"useCount":10884},{"word":"toList","context":[["buf.toList",205],["b.testNames.iterator.toList",216],["a.testNames.iterator.toList",216],["result.toList",263],[").toList",321],["__obj.attributes.toList map {",325],["}).toList",841],[".toList",1218],["}.toList",1874],["c.testNames.iterator.toList",203]],"useCount":22581},{"word":"toMap","context":[["val byName = all.map(x => x.toString.toLowerCase -> x).toMap",213],["result.toMap",104],[").toMap",262],["} toMap",280],[".toMap",873],["}).toMap",989],["}.toMap",3432],["}.toMap)",137],["map.toMap",123],["val outMap = outputBuffer.toMap",116]],"useCount":10893},{"word":"toSeq","context":[["buffer.toSeq",147],["}.collect.toSeq.sortBy(_._1)",215],["}).toSeq",339],[".toSeq",677],["}.toSeq",1220],[").toSeq",102],["}.toSeq)",143],["} toSeq",84],[".setJars(SparkContext.jarOfClass(this.getClass).toSeq)",80],["result.toSeq",77]],"useCount":8519},{"word":"toSet","context":[["TestUtils.waitUntilTrue(() => getBrokersWithPartitionDir(servers, topic, 0) == newReplicas.toSet,",64],[").toSet",72],["}.flatten.toSet",105],["assert(carsCopy.collect.map(_.toString).toSet == cars.collect.map(_.toString).toSet)",106],["assert(carsCopy.collect.map(_.toString).toSet == cars.collect.map(_.toString).toSet)",106],["assert(joined.toSet === Set(",111],["}).toSet",237],[".toSet",500],["}.toSet",754],["result.toSet",967]],"useCount":8552},{"word":"toString","context":[["override def toString: String = {",2286],["override def toString = {",2182],["override def toString = name",550],["sb.toString()",547],["apiResult.toString()",467],["override def toString =",1478],["sb.toString",1295],["override def toString: String =",1055],["override def toString(): String = {",1028],["override def toString() = {",459]],"useCount":60639},{"word":"token","context":[["* @param tokenSecretProvider The token secret provider implementation.",68],["token = STRINGLIT",68],["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["token",209],["token match {",194],["stmt\"${(q.ast: Ast).token}\" mustEqual",123],["in.token match {",106],["token: String,",143],["case Some(token) =>",79],["token,",70]],"useCount":10371},{"word":"tools","context":[["import scala.tools.nsc._",322],["import scala.tools.nsc.Global",193],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["**     ________ ___   / /  ___      __ ____  Scala.js tools             **",207],["import scala.tools.reflect.ToolBox",243],["package kafka.tools",278],["import scala.tools.nsc.Settings",301],["package org.scalatest.tools",354],["package dotty.tools.dotc",548],["package dotty.tools",674]],"useCount":12344},{"word":"topic","context":[["val topic = topicAndPartition.topic",156],["val topic = topicAndPartition.topic",156],["val topic = \"topic\"",165],["val topic = \"topic\"",165],[".describedAs(\"topic\")",192],["val topicAndPartition = TopicAndPartition(topic, partition)",217],["// create the topic",237],["// create topic",344],["val topic = \"test\"",458],["topic: String,",481]],"useCount":37140},{"word":"topicAndPartition","context":[[".format(controllerId, controller.epoch, replicaId, topicAndPartition, currState, targetState))",90],["val topicAndPartition = TopicAndPartition(topic, partition)",217],["val reassignPartitionsCommand = new ReassignPartitionsCommand(zkClient, Map(topicAndPartition -> newReplicas))",97],["val topic = topicAndPartition.topic",156],["val topicAndPartition = TopicAndPartition(topic, partitionToBeReassigned)",115],["partitionStateMachine.handleStateChanges(Set(topicAndPartition), OnlinePartition, reassignedPartitionLeaderSelector)",74],["controllerContext.partitionsBeingReassigned.remove(topicAndPartition)",74],["val topicAndPartition = TopicAndPartition(topic, 0)",93],[".format(caughtUpReplicas.size, reassignedReplicas.size, topicAndPartition) +",72],["info(\"Leader %s for partition %s being reassigned, \".format(currentLeader, topicAndPartition) +",111]],"useCount":10923},{"word":"tp","context":[["case tp: TypeProxy =>",238],["tp match {",923],["tp",553],["case tp: TypeRef =>",349],["case tp: RefinedType =>",341],["assert(tp.size === 2)",302],["case _ => tp",298],["case tp =>",256],["case tp: ClassInfo =>",218],["val tp = rep.testPendingEventsReceived",210]],"useCount":28048},{"word":"tparam","context":[["* @tparam S State type",98],["* @tparam B The type of the request body.",153],["* @tparam B",237],["* @tparam K",131],["* @tparam V",275],["* @tparam T type of the doc",89],["* @tparam Q Input query class.",82],["* @tparam T",632],["* @tparam A",794],["* @tparam R",110]],"useCount":9149},{"word":"tpe","context":[["case ArrayValue(tpe, elems) =>",103],["writeType(tree.tpe)",84],["tpe match {",559],["mixType(tree.tpe)",85],["val tpe = weakTypeOf[T]",153],["val sym = tpe.typeSymbol",93],["tpe",143],["val tpe = AnyType",119],["case tpe =>",90],["case NewArray(tpe, lengths) =>",103]],"useCount":14719},{"word":"tr","context":[["tr(",71],["tr.shutdown",122],["<.tr(",82],["* <tbody><tr>",68],["<tr>",1236],["</tr>",1638],["* </tr>",1380],["* <tr>",1268],["* <table><tr><td class=\"usage\">",130],["* </td></tr></table>",130]],"useCount":9048},{"word":"trait","context":[["trait Logger {",149],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* in the main documentation for trait <code>FlatSpec</code>.",405],["* for trait <code>FlatSpec</code>.",351],["trait Logging {",295],["sealed trait State",290],["trait A",197],["sealed trait Tree[+A]",170],["trait Prog extends DSL {",158],["trait Crunchy",170]],"useCount":31700},{"word":"transform","context":[["import scala.xml.transform._",78],["super.transform(tree)",383],["package transform",331],["override def transform(tree: Tree): Tree = tree match {",109],["import javax.xml.transform.stream.StreamSource",107],["override def transform(dataset: DataFrame): DataFrame = {",100],["override def transform(tree: Tree): Tree = {",88],["case _ => super.transform(tree)",88],["import javax.xml.transform.stream.StreamResult",85],["def apply(plan: LogicalPlan): LogicalPlan = plan transform {",80]],"useCount":7375},{"word":"tree","context":[["val sym = tree.symbol",356],["tree match {",2031],["tree",1070],["implicit val pos = tree.pos",717],["compareTokenCodes(tree, tree.copy())",513],["compareTokenCodes(tree, tree.copy())",513],["* @param ctx the parse tree",446],["super.transform(tree)",383],["tree.errors must beEmpty",377],["import com.intellij.psi.tree.IElementType",359]],"useCount":44977},{"word":"trim","context":[["\"\"\".stripMargin('|').replaceAll(\"\\r\", \"\").trim()",494],["override def setFilter = notNull _ :: trim _ :: Nil",214],["\"\"\".trim.stripMargin)",418],["\"\"\".stripMargin.trim)",355],["|\"\"\".stripMargin.trim",154],["\"\"\".trim",144],["if (v.trim.endsWith(\"SNAPSHOT\"))",359],["\"\"\".stripMargin.replaceAll(\"\\r\", \"\").trim()",684],["\"\"\".stripMargin.trim()",797],["\"\"\".stripMargin.trim",813]],"useCount":12493},{"word":"true","context":[["assertResult(true) {",652],["done = true",541],["else true",601],["publishMavenStyle := true,",933],["true,",1118],["case true =>",1287],["while (true) {",1900],["case _ => true",2765],["return true",4399],["true",19727]],"useCount":171274},{"word":"try","context":[["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["try {",74766],["//    try {",168],["*     try {",465],["try body",154],["val result = try {",147],["//      try {",121],["else try {",111],["try{",1924],["try",1336]],"useCount":87048},{"word":"tuple","context":[["import scalaz.std.tuple._",88],["* For each key k in `this` or `other`, return a resulting RDD that contains a tuple with the",96],["* tuple with the list of values for that key in `this`, `other1` and `other2`.",96],["import cascading.tuple.Tuple",103],["tuple",105],["val arr: Array[Any] = tuple.productIterator.toArray",204],["import cascading.tuple.TupleEntry",246],["tuple(",275],["import cascading.tuple.Fields",485],["tuple =>",89]],"useCount":6697},{"word":"twitter","context":[["import com.twitter.util.Future",1912],["import com.twitter.logging.Logger",682],["import com.twitter.util.Await",668],["package com.twitter.scalding",700],["import com.twitter.util._",847],["import com.twitter.finagle._",921],["import com.twitter.finagle.Service",1058],["import com.twitter.scalding._",1157],["import com.twitter.io.Buf",1267],["import com.twitter.conversions.time._",2236]],"useCount":68347},{"word":"two","context":[["given(\"two integers\")",257],["then(\"the result is the difference between the two numbers\")",253],["val map1 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val map1 = mutable.Map(\"one\" -> 1, \"two\" -> 2)",132],["val map2 = mutable.Map(\"one\" -> 1, \"two\" -> 2)",132],["val map3 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val map2 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val map3 = mutable.Map(\"one\" -> 1, \"two\" -> 2)",132],["val left4 = javaMap(Entry(1, \"one\"), Entry(2, \"two\"), Entry(3, \"three\"))",113],["Note that we can go back and forth between the two forms. We can curry",94]],"useCount":13990},{"word":"type","context":[["@transient lazy val logger = Logger[this.type]",261],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["type Out <: HList",281],["type FixtureParam = String",7797],["_field.`type` match {",569],["def ref: this.type = this",429],["type Out = HNil",419],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283]],"useCount":94340},{"word":"typed","context":[["typed[Double](v4)",54],["typed[Double](at1)",47],["// These are meant to be typed into the REPL. You can also run",150],["typed[Int](v1)",134],["typed[String](v2)",105],["typed[Boolean](v3)",84],["typed[_0](empty.length)",78],["import com.twitter.scalding.typed.TypedSink",72],["package com.twitter.scalding.typed",133],["typed[BBBB](l7)",49]],"useCount":10245},{"word":"types","context":[["import org.apache.spark.sql.types._",1484],["import org.jetbrains.plugins.scala.lang.psi.types.result.{Success, TypingContext}",234],["import org.jetbrains.plugins.scala.lang.psi.api.base.types.ScTypeElement",259],["import types._",342],["import org.jetbrains.plugins.scala.lang.psi.types.ScType",359],["import org.jetbrains.plugins.scala.lang.psi.types.result.TypingContext",416],["package types",509],["import org.bson.types.ObjectId",1070],["import org.apache.spark.sql.types.StructType",570],["import org.jetbrains.plugins.scala.lang.psi.types._",704]],"useCount":23367},{"word":"typesafe","context":[["import com.typesafe.scalalogging.Logger",421],["import com.typesafe.scalalogging.slf4j.StrictLogging",366],["import com.typesafe.config._",633],["import com.typesafe.scalalogging.slf4j.LazyLogging",700],["import com.typesafe.scalalogging.StrictLogging",747],["import com.typesafe.config.{Config, ConfigFactory}",779],["import com.typesafe.scalalogging.slf4j.Logging",1010],["import com.typesafe.scalalogging.LazyLogging",1793],["import com.typesafe.config.Config",3441],["import com.typesafe.config.ConfigFactory",4975]],"useCount":22165},{"word":"u","context":[["*  @param u  the vector to multiply by",407],["val f = Flip(u)",132],["u",309],["*  @param u  the vector value to assign",243],["*  @param u  the vector to add",206],["*  @param u  the 2D array of values to assign",166],["for (i <- u.range1) {",150],["for (k <- i + 1 until u.dim1) {",147],["*  @param u  the vector to subtract",142],["Tuple2 (l, u)",132]],"useCount":19147},{"word":"uk","context":[["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219],["import uk.gov.hmrc.ct.box._",641],["package uk.gov.hmrc.ct.computations",492],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.play.test.{UnitSpec, WithFakeApplication}",352],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["import uk.gov.hmrc.play.http.HeaderCarrier",258],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.play.test.UnitSpec",221]],"useCount":18271},{"word":"ul","context":[["</ul>",1065],["*  <ul>",62],["*  </ul>",72],["}</ul>",74],["* </ul><p>",86],["<ul class=\"unstyled\">",107],["<ul class=\"evlogviewpad\">",213],["<ul>",331],["* <ul>",1825],["* </ul>",1856]],"useCount":6806},{"word":"undefined","context":[["spellCheck: U[Boolean] = undefined,",452],["onMouseEnter: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["className: U[String] = undefined,",452],["onSubmit: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragLeave: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDrop: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onFocus: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["hidden: U[Boolean] = undefined,",453],["style: U[js.Any] = undefined,",485],["title: U[String] = undefined,",455]],"useCount":40937},{"word":"underlying","context":[["underlying: ServiceFactory[Req, Rep],",91],["val underlying = new Observer[Int] {",189],["val underlying = q\"${c.prefix}.underlying\"",88],["val underlying = q\"${c.prefix}.underlying\"",88],["val underlying = mock[ServiceFactory[Int, Int]]",100],["it(\"should invoke the underlying profile method\") {",100],["it(\"should throw an exception if there is no underlying profile\") {",122],["underlying",122],["* underlying futures complete. It fails immediately if any of them",396],["it(\"should invoke the method on the underlying profile\") {",148]],"useCount":10495},{"word":"unit","context":[["it should \"provide aliases for single unit values\" in {",130],["section(\"unit\")",163],["* Non-strict unit for capturing effects.",104],["unit match {",89],["package org.deepdive.test.unit",72],["import org.elasticsearch.common.unit.TimeValue",74],["def unit[A](a: A): Rand[A] =",93],["def unit[A](a: => A): F[A]",76],["package unit",76],["}.unit",76]],"useCount":7910},{"word":"universe","context":[["import scala.reflect.runtime.universe",299],["import scala.reflect.runtime.universe.TypeTag",358],["import scala.reflect.runtime.{universe => ru}",376],["val universe = Universe.createNew()",386],["import scala.reflect.runtime.universe._",2130],["import c.universe._",4608],["import context.universe._",146],["c.universe.reify(",123],["val universe = Universe.createNew",172],["import universe._",160]],"useCount":11953},{"word":"until","context":[["0.until(CAPACITY - BLOCK_SIZE + 1, BLOCK_SIZE) foreach { i =>",200],["for (i <- 0 until n) aa(i) = rn.nextDouble ()",175],["for (i <- 0 until size) {",209],["while (i < until) {",209],["for (i <- 0 until 10) {",214],["for (k <- 0 until dim1 if k != i) {",242],["(0 until 9999).foreach(x => buffer.onNext(x))",260],["for (i <- 0 until resBytes.length) {",634],["for (k <- 0 until 20) {",362],["for (i <- 0 until n) {",303]],"useCount":26749},{"word":"up","context":[["it(\"should blow up\") {",112],["ensureTestFailedEventReceived(spec, \"should blow up\")",864],["*     finally writer.close() // clean up the fixture",98],["// set up",205],["\"should blow up\" in { fixture =>",199],["it should \"blow up\" in { fixture =>",90],["def sum(ints: List[Int]): Int = ints match { // A function that uses pattern matching to add up a list of integers",96],["\"should blow up\" in {",192],["* An integration test will fire up a whole play application in a real (or headless) browser",150],["ensureTestFailedEventReceived(spec, \"Scenario: should blow up\")",138]],"useCount":11399},{"word":"update","context":[["update",353],["if (!compareAndSet(current, update))",488],["}.update().apply()",193],["update()",312],["}.update.apply()",253],["} // update",217],["val serializedData = update.toByteArray",138],["val header = update.header",138],["ref = update",146],["update(\"@class\", PropValue(AbsString.alpha(\"Object\"))).",151]],"useCount":22567},{"word":"updateDynamic","context":[["onInput.foreach(v => props.updateDynamic(\"onInput\")(v))",339],["accessKey.foreach(v => props.updateDynamic(\"accessKey\")(v))",339],["tabIndex.foreach(v => props.updateDynamic(\"tabIndex\")(v))",339],["onMouseMove.foreach(v => props.updateDynamic(\"onMouseMove\")(v))",339],["onTouchMove.foreach(v => props.updateDynamic(\"onTouchMove\")(v))",339],["onMouseEnter.foreach(v => props.updateDynamic(\"onMouseEnter\")(v))",339],["onDragLeave.foreach(v => props.updateDynamic(\"onDragLeave\")(v))",339],["is.foreach(v => props.updateDynamic(\"is\")(v))",339],["onSelect.foreach(v => props.updateDynamic(\"onSelect\")(v))",339],["lang.foreach(v => props.updateDynamic(\"lang\")(v))",339]],"useCount":21637},{"word":"uri","context":[["implicit val conn = Datomic.connect(uri)",61],["* @param uri",56],["uri: String,",219],["get(uri.getPath) {",149],["uri,",70],["uri",65],["IO.assertAbsolute(uri)",54],["import com.netaporter.uri.Uri",123],["uri: URI,",54],["import com.netaporter.uri.dsl._",56]],"useCount":6415},{"word":"url","context":[["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["url,",125],["url = url,",114],["url should startWith(groupInviteConfig.baseUrl)",135],["url: https://github.com/kishorereddy/scala-slate",172],["case Ok(ResponseInviteUrl(url)) ⇒",135],["url: www.slatekit.com",132],["if (propertyList.isEmpty) throw new IllegalStateException(s\"No 'produces' defined for the $url\")",176],["url",212],["url: String,",569]],"useCount":17161},{"word":"use","context":[["it(\"should use an explicitly provided Equality\") {",1196],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["* Redistribution and use in source and binary forms, with or without modification,",339],["Redistribution and use in source and binary forms, with or without",639],["* Redistribution and use in source and binary forms, with or without",3573],["* To change this template use File | Settings | File Templates.",967],["it(\"should use the implicit Equality in scope\") {",1196],["def `should use the implicit Equality in scope` {",1594],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["def `should use an explicitly provided Equality` {",1594]],"useCount":34748},{"word":"used","context":[["* @param miniBatchFraction Fraction of data to be used per iteration.",104],["* Hash partitioning is used to generate the RDDs with `numPartitions` partitions.",104],["* @param configMap a <code>Map</code> of key-value pairs that can be used by the executing <code>Suite</code> of tests.",117],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* concepts and algorithms presented in \"Scala for Machine Learning\". It should not be used to",131],["* @param stepSize Step size to be used for each iteration of gradient descent.",101],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336]],"useCount":28897},{"word":"user","context":[["user: String,",268],["user",311],["import lila.user.User",326],["*        how to present this event to the user",376],["case Some(user) =>",403],["* The interactive user interfaces in modified source and object code versions",539],["import lila.user.{ User, UserRepo }",230],["* @param user The user to save.",170],["user: User,",177],["* @param message a localized message suitable for presenting to the user",198]],"useCount":31984},{"word":"userName","context":[["repository.originUserName.getOrElse(repository.userName),",81],["getAccountByUserName(userName).map { account =>",80],["whenReady(service.handleSignUp(transactionHash, userName, userSex)) { resp ⇒",80],["val userName = params(\"userName\")",349],["val userName = params(\"userName\")",349],["userName: String,",180],["* @param userName the user name of the repository owner",165],["val userName = \"Rock Jam\"",138],["Activities insert Activity(userName, repositoryName, activityUserName,",89],["getAccountByUserName(userName).map { x =>",83]],"useCount":10053},{"word":"using","context":[["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["// A definition of factorial, using a local, tail recursive function",98],["* Merge the values for each key using an associative reduce function. This will also perform",113],["using(new TreeWalk(git.getRepository)){ treeWalk =>",127],["it should \"create values using UOM factories\" in {",133],["* that is created or manipulated using TA Buddy.",534],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["using(",262],["using(new RevWalk(git.getRepository)){ revWalk =>",187]],"useCount":16169},{"word":"util","context":[["import java.util.concurrent.TimeUnit",4323],["import java.util",4979],["import akka.util.Timeout",5496],["import java.util.Date",6599],["import scala.util.Random",7340],["import java.util.UUID",7625],["import scala.util.Try",8033],["import scala.util.control.NonFatal",3207],["import scala.util.{Failure, Success, Try}",2670],["import java.util.Properties",3916]],"useCount":210620},{"word":"utils","context":[["import kafka.utils.Logging",292],["import org.locationtech.geomesa.utils.geotools.Conversions._",276],["import com.normation.utils.StringUuidGenerator",281],["import kafka.utils._",1122],["package utils",1031],["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import com.normation.utils.HashcodeCaching",394],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import kafka.utils.TestUtils",311]],"useCount":21615},{"word":"v","context":[["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["case Some(v) => v",356],["case Some(v) => v",356],["if (v.trim.endsWith(\"SNAPSHOT\"))",359],["onClick.foreach(v => props.updateDynamic(\"onClick\")(v))",339],["onContextMenu.foreach(v => props.updateDynamic(\"onContextMenu\")(v))",339],["onMouseLeave.foreach(v => props.updateDynamic(\"onMouseLeave\")(v))",339],["v",1392],["v match {",1133],["case (k, v) =>",497]],"useCount":95862},{"word":"v1","context":[["val v1Vals = Variable(v1).range",84],["val tp1 = p1.toTypedPipe[(Int, Int, Double)](('x1, 'y1, 'v1))",90],["assertEquals(23, v1)",94],["val p1: Pipe = Tsv(\"mat1\", ('x1, 'y1, 'v1)).read",99],[".source(Tsv(\"mat1\", ('x1, 'y1, 'v1)), List((1, 1, 1.0), (2, 2, 3.0), (1, 2, 4.0)))",118],["typed[Int](v1)",134],["val v1 = Variable(e1)",165],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["v1(idx) = currTriple; idx += 1",70]],"useCount":6724},{"word":"v2","context":[["package uk.gov.hmrc.ct.ct600.v2",209],["package mesosphere.marathon.api.v2",303],["* Questo file è proprietà del gruppo ProTech, viene rilasciato sotto licenza Apache v2.",145],["import mesosphere.marathon.api.v2.json.Formats._",322],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["import mesosphere.marathon.api.v2.Validation._",96],["package uk.gov.hmrc.ct.ct600e.v2",96],["typed[String](v2)",105],["val v2 = Variable(e2)",149],["package mesosphere.marathon.api.v2.json",122]],"useCount":6939},{"word":"val","context":[["val e1 = intercept[TestFailedException] {",7354],["val sc = new SparkContext(conf)",2072],["val f = new Fixture",1701],["val e1 = intercept[exceptions.NotAllowedException] {",2223],["val rep = new EventRecordingReporter",2459],["implicit val ise = upperCaseStringEquality",2774],["val e2 = intercept[TestFailedException] {",3429],["val caught1 = intercept[TestFailedException] {",6788],["val caught2 = intercept[TestFailedException] {",5192],["val caught3 = intercept[TestFailedException] {",4858]],"useCount":1269545},{"word":"valid","context":[["\"return a valid form with no errors\" in {",68],["if (valid) {",77],["\"do something with valid data\" in new WithApplication {",88],["valid",93],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["case Good(validFun) => Good(validFun(valid))",105],["case Good(valid) =>",105],["* all returns a list of all the valid, known values. We use",218]],"useCount":9387},{"word":"validate","context":[["// Set a known test id so we can validate the unique property is added",162],["override def validate(boxRetriever: Frs102AccountsBoxRetriever): Set[CtValidation] = {",215],["(js \\ \"value\").validate[String] match {",190],["// validate the total number of query-hits",108],["params.validate(arguments)",118],["val boundParams = params.validate(arguments)",134],["assertResultFailed(validator.validate(request(\"POST\", \"/a/b\", \"application/xml\", goodXML_XSD1, false,",146],["override def validate(name: String, value: String, messages: Messages): Option[String] =",146],["validate()",156],["validator.validate(req, response, chain)",190]],"useCount":7356},{"word":"value","context":[["* @param value",508],["Future.value(response)",359],["@param expr1 : a value",480],["if (value == null) {",420],["@param expr2 : a value",480],["case _ => value",628],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["value",1899],["value match {",2570]],"useCount":133201},{"word":"values","context":[["*  @param u  the 2D array of values to assign",166],["val values = findValues",187],["* with the camel cased values above.",217],["* lower case to avoid collisions with the camel cased values",218],["* all returns a list of all the valid, known values. We use",218],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["values",405],[".values",415],["infoValues(values)",168],["* UNDEFINED captures values that are sent either in error or",217]],"useCount":29213},{"word":"var","context":[["var i = 1",1018],["var c = 0",1033],["var sum = 0.0",1064],["var i: Int = 0",1330],["var theTestTheOtherCalled = false",1511],["var j = 0",2153],["var count = 0",2464],["var theTestThisCalled = false",3518],["var theTestThatCalled = false",3518],["var i = 0",15521]],"useCount":151283},{"word":"variable","context":[["* @param solver Solver where the variable will be used",60],["val c1Index5 = c1.variable.range.indexOf(Regular(0.5))",56],["val c1Index3 = c1.variable.range.indexOf(Regular(0.3))",56],["val c1Index9 = c1.variable.range.indexOf(Regular(0.9))",56],["val c4Index1 = c4.variable.range.indexOf(Regular(1))",56],["val c1IndexF = c1.variable.range.indexOf(Regular(false))",58],["val c1IndexT = c1.variable.range.indexOf(Regular(true))",58],["package cc.factorie.variable",135],["* We use all CAPS for the variable name to avoid collisions",217],["import cc.factorie.variable._",256]],"useCount":6243},{"word":"vector","context":[["*  @param u  the vector to multiply by",407],["*  @param b  the vector to add",244],["*  @param u  the vector value to assign",243],["*  @param u  the vector to add",206],["*  @param b  the other vector",314],["*  @param u    the vector to assign to the column",123],["*  @param u  the vector to subtract",142],["*  @param u  the vector to set the diagonal to",121],["*  @param size  the size of the vector (upper bound = size - 1)",119],["*  @param b  the constant vector",168]],"useCount":16741},{"word":"verify","context":[["verify(mockClown, times(2)).hasBigRedNose",105],["verify(mockClown, times(1)).hasBigRedNose",119],["import org.mockito.Mockito.{times, verify, when}",105],["import org.mockito.Mockito.verify",125],[".verify",144],["verify(offerMatcher).matchOffer(deadline, offer)",79],["// verify",171],["verify(",259],["import org.mockito.Mockito.{verify, when}",78],["verify()",290]],"useCount":8292},{"word":"version","context":[["version: Int,",241],["val new_p = apply( p, name, rewriterules, proofSize, version, ProofLinkPassing )",234],["version,",222],["publishTo <<= version { (v: String) =>",208],["|        \"version\":0",192],["version := Version,",188],["version match {",177],["*  @version 1.2",1113],["* @version 1.0",492],["version: String,",417]],"useCount":23173},{"word":"view","context":[["import android.view.View",495],["import android.view.LayoutInflater",138],["lazy val doc = Jsoup.parse(view.body)",231],["view",211],["import android.view._",183],["import android.view.ViewGroup",162],["import android.view.{LayoutInflater, View, ViewGroup}",96],["import android.view.View.OnClickListener",111],["import android.view.MenuItem",119],["package view",125]],"useCount":7187},{"word":"w","context":[["w",159],["w.braced {",158],["writeDoc(w, doc)",105],["w.await()",175],["w.wl",1626],["w.wl(\";\")",240],["w.dismiss()",213],["val w = new Waiter",121],["List(\"-w\", \"com.example.root\"),",121],["w.close()",124]],"useCount":19482},{"word":"was","context":[["throw new NullPointerException(\"threadName was null\")",144],["// An Ignored test that was not included should not generate a TestIgnored event",225],["* that were added by the server after this library was",217],["//This class was generated by build script, please don't change this",186],["* @param timeStamp a <code>Long</code> indicating the time this event was reported, expressed in terms of the",166],["throw new NullPointerException(\"ordinal was null\")",144],["throw new NullPointerException(\"payload was null\")",140],["assert(caught.getMessage === \"a test tag was null\")",137],["* @param threadName a name for the <code>Thread</code> about whose activity this event was reported",166],["// An Ignored test that was both included and excluded should not generate a TestIgnored event",225]],"useCount":15767},{"word":"we","context":[["// TODO: revisit this once we have trivia in place",94],["a term we inherit from category theory.",94],["Then(\"we receive a NotAuthenticated response\")",270],["* Question: Should we implment this method here, or should it remain abstract",178],["// Set a known test id so we can validate the unique property is added",162],["* @param name name of collection we are crawling for",142],["// we need an ActorSystem to host our application in",134],["// Now we can use our general `formatResult` function",97],["// This is safer, but we lose the error information as it returns",102],["// Let's read out what we wrote.",106]],"useCount":27153},{"word":"web","context":[["\"web\",",125],["* Magmanics Licensing. This web application allows for centralized control",97],["// call web hook",112],["package com.twitter.zipkin.web",137],["import com.normation.rudder.web.model.CurrentUser",168],["/* - Coeus web framework -------------------------",250],["* This file is part of mycollab-web.",278],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["* serving files in a web or/and network application,",540],["import org.springframework.web.bind.annotation._",99]],"useCount":7494},{"word":"when","context":[["when(\"one is subracted from the other\")",253],["when(mockDataManager.getOrganization(GiltName)).thenReturn(Success(Some(GiltOrg)))",314],["import org.mockito.Mockito.when",337],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["//when",778],["* licence, when you create a Related Module, this Related Module is",1268],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["// when",2056],["\"A Stack\" when {",283]],"useCount":53889},{"word":"where","context":[["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["where = where,",78],["where = where,",78],["* Return a new \"state\" DStream where the state for each key is updated by applying",81],["|where",91],["where(",92],["def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {",134],["// where to search snippet",163],[".where",272],["where",426]],"useCount":11003},{"word":"which","context":[["* which accompanies this distribution, and is available at",935],["*  (AGPL) version 3.0 which accompanies this distribution, and is available in",130],["* iterator will return those names in the order in which the tests were registered. Each test's name is composed",128],["* which accompanies this distribution and is available at",1232],["* @param loginInfo The login info for which the auth info should be saved.",131],["contentType(home) must beSome.which(_ == \"text/html\")",195],["* @param reporter the <code>Reporter</code> to which results will be reported",202],["* @param specText the specification text, which will be combined with the descText of any surrounding describers",247],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["* @param driver the <code>WebDriver</code> with which to drive the browser",350]],"useCount":26558},{"word":"while","context":[["while (i >= 0) {",458],["while (i < n) {",836],["while(true) {",493],["while (i < size) {",581],["while (i < length) {",626],["while (it.hasNext) {",755],["while (true) {",1900],["while (iter.hasNext) {",1010],["while (i < len) {",863],["while (iterator.hasNext) {",805]],"useCount":39967},{"word":"width","context":[["val width: js.UndefOr[Double] = js.undefined",141],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["* The width of the point marker's outline.",192],["* @param lineWidth The width of the point marker's outline.",192],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",144]],"useCount":7255},{"word":"will","context":[["* will register the passed string for forwarding later during test execution. If invoked while this",263],["// test direct sorting (will modify the data array)",143],["* This method will register the test for later execution via an invocation of one of the <code>execute</code>",145],["* An integration test will fire up a whole play application in a real (or headless) browser",150],["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["* @param reporter the <code>Reporter</code> to which results will be reported",202],["* @param stopper the <code>Stopper</code> that will be consulted to determine whether to stop execution early.",202],["* @param specText the specification text, which will be combined with the descText of any surrounding describers",247],["* the current reporter immediately. If invoked at any other time, it will",263],["*                       the new DStream will generate RDDs); must be a multiple of this",321]],"useCount":31796},{"word":"with","context":[["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* Redistribution and use in source and binary forms, with or without",3573],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["*    and/or other materials provided with the distribution.",906],["* documentation and/or other materials provided with the distribution.",943],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["with Matchers",1514],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["* Created with IntelliJ IDEA.",1203],["* distributed with this work for additional information",4340]],"useCount":151566},{"word":"withFixture","context":[["override def withFixture(test: NoArgTest): Outcome = {",454],["def withFixture(test: OneArgAsyncTest): FutureOutcome =",624],["def withFixture(test: OneArgTest): Outcome = {",653],["def withFixture(test: OneArgTest): Outcome = Succeeded",795],["def withFixture(test: OneArgTest) {",862],["def withFixture(test: OneArgTest) {}",1259],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["super.withFixture(test)",452],["override def withFixture(test: NoArgTest) {",295]],"useCount":12932},{"word":"without","context":[["* Redistribution and use in source and binary forms, with or without",3573],["*    list `xs` without its `head` element",64],["// we want to be able to test it independently, without having to spin up an actor",85],["// *without* having to give it a name",95],["* ''without'' the following capabilities:",102],["// Redistribution and use in source and binary forms, with or without",113],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["* Redistribution and use in source and binary forms, with or without modification,",339],["Redistribution and use in source and binary forms, with or without",639],["* documentation that, without modification of the Source Code, enables",1872]],"useCount":11668},{"word":"work","context":[["* distributed with this work for additional information",4340],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["* See the NOTICE file distributed with this work for additional",769],["it should \"work\" in {",441],["* See the LICENCE.txt file distributed with this work for additional",344],["def `should work on parallel form` {",184],["callInfo() // This should work fine",154],["* in behavior would very likely not work.",128],["* Original work: SecureSocial (https://github.com/jaliss/securesocial)",120]],"useCount":14230},{"word":"write","context":[["new Span().write",243],[".write(Tsv(\"output\"))",185],["override def write(out: DataOutput): Unit = {",166],["FormatUtils.newLink(img, link).write",158],[".write(Tsv(args(\"output\")))",157],["import org.json4s.native.Serialization.write",154],["_item.write(_oproto)",152],["override def write(_oprot: TProtocol): Unit = {",140],["\"write\" in { cycle => import cycle._",126],["org.json4s.jackson.Serialization.write(",123]],"useCount":20139},{"word":"writer","context":[["writer.flush()",800],["val writer = Reader.writable()",126],["package com.datastax.spark.connector.writer",133],["writer.flush",137],["val writer = new StringWriter",165],["writer.close()",1976],["writer.newLine()",166],["writer.toString",171],["val writer = new StringWriter()",171],["writer.close",381]],"useCount":13244},{"word":"www","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["* http://www.eclipse.org/legal/epl-v10.html",689],["* See the project homepage at: http://www.monifu.org",633],["* or visit www.oracle.com if you need additional information or have any",372],["* http://www.jeffheaton.com",341],["* http://www.aifh.org",341],["xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">",270],["* http://www.joa-ebert.com/",218],["xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"",208],["* http://www.oculusinfo.com/",185]],"useCount":12084},{"word":"x","context":[["var x = 0",417],["case x => x",1230],["case x => x",1230],["x",2047],["case x =>",1226],["x match {",1017],["case Some(x) => x",736],["case Some(x) => x",736],["case Some(x) =>",606],["x += 1",516]],"useCount":120987},{"word":"xml","context":[["import scala.xml.Text",298],["var attr: scala.xml.MetaData  = scala.xml.Null",312],["var attr: scala.xml.MetaData  = scala.xml.Null",312],["val xml =",343],["import scala.xml.Node",644],["import scala.xml.Elem",766],["<representation mediaType=\"application/xml\"/>",767],["import scala.xml.XML",783],["import scala.xml.NodeSeq",1195],["import scala.xml._",2235]],"useCount":27673},{"word":"xs","context":[["* @param xs A list of natural numbers",162],["if (xs.isEmpty) None",126],["else Some(xs.sum / xs.length)",126],["case x :: xs =>",251],["if (xs.isEmpty)",144],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["xs match {",301],["xs",155],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["else Some(xs.sum / xs.length)",126]],"useCount":13743},{"word":"y","context":[["struct S { int x; int y; };",192],["y",308],["y += 1",294],["x + y",211],["var y = 0",198],["struct T { int x; int y; int z; };",147],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["override val y: js.UndefOr[Double] = yOuter",130],["val y: js.UndefOr[Double] = js.undefined",130]],"useCount":26426},{"word":"yield","context":[["} yield r",500],[") yield {",639],["} yield result",868],["yield {",411],["} yield res",292],["} yield a",217],["yield",217],["} yield",1030],["} yield ()",2639],["} yield {",14113]],"useCount":34302},{"word":"you","context":[["`Function.uncurried` that you can use for uncurrying.",98],["Thank you for your interest in the Facsimile project!",106],["* of items, as you do not have the option to unsubscribe.",110],["* If you use it as a template to create your own app, please use `spark-submit` to submit your app.",111],["* or visit www.oracle.com if you need additional information or have any",372],["* you must retain the producer line in every report, form or document",540],["* licence, when you create a Related Module, this Related Module is",1268],["// this actor only runs our route, but you could add",92],["* you will learn during the class.",81],["* For this example assignment you can use the following methods in class",81]],"useCount":17859},{"word":"z","context":[["as.foldLeft(z)(f)",75],["case Nil => z",334],["def foldRight[A,B](as: List[A], z: B)(f: (A, B) => B): B = // Utility functions",82],["def pf (z: Double): Double =",89],["val rdd2 = sc.parallelize(Array((1, 'x'), (2, 'y'), (2, 'z'), (4, 'w')))",102],["flag(\"z\").value shouldBe false",111],["case _ => z",137],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["struct T { int x; int y; int z; };",147],["z",307]],"useCount":10824},{"word":"zero","context":[["maybeCounts = Some(TaskCounts.zero),",69],["zero",132],["def zero: A",99],["*  Note: If the frequency of some character is zero, then that character should not be",51],["*  and has no zero-entries.",52],["/** Use partial pivoting to find a maximal non-zero pivot and return its row",55],["*  them to zero.  Iterative algorithms give approximate values and if very close",59],["if (x == 0) throw new IllegalArgumentException(\"zero is not allowed\")",61],["def zero = 0",61],["val r = Atomic(zero)",81]],"useCount":6774},{"word":"zipkin","context":[["package com.twitter.zipkin.storage.cassandra",134],["package com.twitter.zipkin.query",132],["package com.twitter.zipkin.web",137],["import com.twitter.zipkin.Constants",137],["BuildProperties.buildPropertiesPackage := \"com.twitter.zipkin\",",139],["finagle(\"zipkin\"),",139],["import com.twitter.zipkin.gen",273],["import com.twitter.zipkin.common.Span",238],["import com.twitter.zipkin.common._",209],["import com.twitter.zipkin.conversions.thrift._",231]],"useCount":7291},{"word":"zkClient","context":[["val zkClient = controller.controllerContext.zkClient",90],["AdminUtils.deleteTopic(zkClient, topic)",89],["val partitionsBeingReassigned = ZkUtils.getPartitionsBeingReassigned(zkClient)",69],["val controllerId = ZkUtils.getController(zkClient)",72],["EasyMock.replay(zkClient)",78],["zkClient.close()",209],["AdminUtils.createOrUpdateTopicPartitionAssignmentPathInZK(zkClient, topic, expectedReplicaAssignment)",117],["var zkClient: ZkClient = null",113],["val reassignPartitionsCommand = new ReassignPartitionsCommand(zkClient, Map(topicAndPartition -> newReplicas))",97],["val zkClient = controller.controllerContext.zkClient",90]],"useCount":7613},{"word":"~","context":[["} ~",4347],["{ case p1 ~ p2 ~ p3 =>",109],["{ case p1 ~ p2 ~ p3 =>",109],["sealRoute(services.adminRoutes) ~>",114],[".withHeaders(ownerAuthHeader) ~>",114],["(\"Name\" -> o.name) ~",116],["} ~> check {",122],["sealRoute(services.workspaceRoutes) ~>",126],["} // ~^",144],["sealRoute(routes) ~>",207]],"useCount":28526},{"word":"⇒","context":[["case _ ⇒",2484],["case None ⇒",2309],["case _ ⇒ false",431],["case e ⇒",333],["case _ ⇒ None",310],["val authorizedAction = requireAuth(clientData).map { implicit client ⇒",303],["whenReady(startPhoneAuth(phoneNumber)) { resp ⇒",256],["case NonFatal(e) ⇒",218],["case NonFatal(t) ⇒",218],["case e: Throwable ⇒",209]],"useCount":28532}]