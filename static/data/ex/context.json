[{"word":"3rd","context":[["# Or configure a 3rd-party app:",857],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857]],"useCount":1714},{"word":"A","context":[["{:ok, agent} = A.start_link(stack)",102],["# needed by services started subsequently.  A last resort is to",143],["docbook-xsl. A description of the parameters you can use can be found in the",210],["manual page with: nroff -man <package>.<section> | less'. A typical entry",210],["less'.  A typical entry in a Makefile or Makefile.am is:",254],["A summary of options is included below.",279],["A module providing Internationalization with a gettext-based API.",296],["with long options starting with two dashes (`-').  A summary of",507],["displayName: A",74],["A module that keeps using definitions for controllers,",575]],"useCount":3451},{"word":"ALSO","context":[["<title>SEE ALSO</title>",506],[".SH SEE ALSO",280]],"useCount":786},{"word":"API","context":[["A module providing Internationalization with a gettext-based API.",296],["# Public API",88],["# Client API",38],["## Client API",65],["# API",61],["# External API",43],["## Endpoint API",41],["## API",77],["via HTML forms. If you are providing an API, there",33],["#### Plug API",40]],"useCount":1208},{"word":"Adapters","context":[["Ecto.Adapters.SQL.rollback_test_transaction(TestRepo)",36],["[`Plug.Adapters.Cowboy`](http://hexdocs.pm/plug/Plug.Adapters.Cowboy.html).",60],["[`Plug.Adapters.Cowboy`](http://hexdocs.pm/plug/Plug.Adapters.Cowboy.html).",60],["adapter: Ecto.Adapters.MySQL,",77],["test_begin: \"Ecto.Adapters.SQL.begin_test_transaction(#{module}.Repo)\",",30],["assert_file \"custom_path/config/test.exs\", [~r/Ecto.Adapters.MySQL/, ~r/username: \"root\"/, ~r/password: \"\"/]",30],["adapter: Ecto.Adapters.Postgres,",1153],["pool: Ecto.Adapters.SQL.Sandbox",411],["test: [database: \"db/#{app}_test.sqlite\", pool: Ecto.Adapters.SQL.Sandbox],",31],["~r/Ecto.Adapters.SQL.restart_test_transaction/",132]],"useCount":2604},{"word":"Alternatively","context":[["# Alternatively, you can configure exactly which server to",549],["Alternatively use the xmlto command/package. That will also automatically",210],["Alternatively, you could invoke only the Endpoint, and Router:",14]],"useCount":773},{"word":"And","context":[["And no spaces</p>",16],["# And vice versa",12],["And now you can use it in accepts too:",19],["And no spaces",20],["# And this if it cann",49],["# And access this configuration in your application as:",857]],"useCount":973},{"word":"Application","context":[["Application.put_env(:phoenix, Endpoint, [",29],["outer = Application.app_dir(endpoint.config(:otp_app), inner)",29],["Application.put_env(:pco_api, :endpoint_base, \"http://localhost:#{bypass.port}/\")",30],["Application.get_env(:phoenix, :format_encoders)",36],["Mix.raise \"Application name must start with a letter and have only lowercase \" <>",44],["use Application",1417],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["use Application.Behaviour",77],["assert_raise Mix.Error, ~r\"Application name must start with a letter and \", fn ->",74],["# See http://elixir-lang.org/docs/stable/Application.Behaviour.html",53]],"useCount":3012},{"word":"Applications","context":[["# for more information on OTP Applications",840]],"useCount":840},{"word":"ArgumentError","context":[["ArgumentError ->",56],["assert_raise ArgumentError, msg, fn ->",29],["raise ArgumentError, \"an adapter was given to :pubsub but no :name was defined, \" <>",39],["raise ArgumentError, \"\"\"",45],["assert_raise ArgumentError, fn ->",290],["raise ArgumentError,",215],["raise ArgumentError, \"static_path/2 expects a path starting with / as argument\"",32],["raise ArgumentError, message: \"flash not fetched, call fetch_flash/2\"",34],["raise ArgumentError, \"expected :to or :external option in redirect/2\"",36],["raise ArgumentError, message:",37]],"useCount":1165},{"word":"B","context":[["node: \"B\",",15],[".B \\-h, \\-\\-help",285],[".B \\-v, \\-\\-version",285],[".B bar",569]],"useCount":1154},{"word":"Bar","context":[["Fall of a Fooish Bar</citetitle> available via the",296],[".IR \"The Rise and Fall of a Fooish Bar\" ,",284],["defmodule Bar do",12],["~s(<option value=\"bar\">Bar</option>) <>",22],["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210],["Mix.raise \"Module name must be a valid Elixir alias (for example: Foo.Bar), got: #{inspect name}\"",46]],"useCount":870},{"word":"Case","context":[["use ExUnit.Case, async: true",3311],["use PhoenixTokenAuth.Case",20],["use Protobuf.Case",29],["use Dynamo.HTTP.Case",33],["use MixTest.Case",42],["use ExUnit.Case, async: true",45],["mixin ExUnit::Case",50],["use ExUnit.Case",51],["use ExUnit.Case, async: false",765],["use ExUnit.Case",5884]],"useCount":10376},{"word":"CaseTemplate","context":[["use ExUnit.CaseTemplate",86],["your `ExUnit.CaseTemplate`. Once used, this module",22],["use ExUnit.CaseTemplate",1548]],"useCount":1656},{"word":"Changeset","context":[["import Ecto.Changeset",1126],["import Ecto.Changeset",111],["alias Ecto.Changeset",73],["|> Ecto.Changeset.change",68],["Ecto.Changeset.traverse_errors(changeset, &translate_error/1)",60],["See `Ecto.Changeset.traverse_errors/2` and",59],["assert f.impl == Phoenix.HTML.FormData.Ecto.Changeset",22],["%Ecto.Changeset{valid?: true, changes: %{password: pass}} ->",21],["%Ecto.Changeset{valid?: true, changes: %{password: password}} ->",18],["`form_for/4` receives the `Ecto.Changeset` and converts it",15]],"useCount":1588},{"word":"Channel","context":[["Phoenix.Channel.Server.broadcast_from(@pubsub_server, from, topic, event, msg)",36],["case Phoenix.Channel.Server.join(socket, msg.payload) do",32],["use Phoenix.Channel",698],["use Phoenix.Channel",85],["{:ok, _, socket} = join(socket(), Channel, \"foo:ok\")",64],["Phoenix.Channel.Server.broadcast(@pubsub_server, topic, event, msg)",36],["Phoenix.Channel.Server.broadcast_from!(@pubsub_server, from, topic, event, msg)",36],["alias Phoenix.Channel.Server",36],["socket = subscribe_and_join!(socket(), Channel, \"foo:ok\")",42],["Phoenix.Channel.Server.broadcast!(@pubsub_server, topic, event, msg)",36]],"useCount":1717},{"word":"ChannelTest","context":[["defmodule Phoenix.ChannelTest do",14],["use Phoenix.ChannelTest",495],["Such tests rely on `Phoenix.ChannelTest` and also",492],["import Phoenix.ChannelTest",14],["transport: Phoenix.ChannelTest,",16],["serializer: Phoenix.ChannelTest.NoopSerializer",16],["assert socket.transport == Phoenix.ChannelTest",11],["defmodule Phoenix.Test.ChannelTest do",11],["use Phoenix.ChannelTest",14],["pubsub_server: Phoenix.Test.ChannelTest.PubSub,",16]],"useCount":1132},{"word":"Check","context":[["{Credo.Check.Consistency.TabsOrSpaces},",37],["{Credo.Check.Warning.IExPry},",35],["{Credo.Check.Readability.VariableNames},",35],["{Credo.Check.Consistency.ExceptionNames},",36],["# Check that the user exists (if we set a user)",49],["# Check if it's running first",49],["use Credo.Check, base_priority: :high",50],["# Check if the process is running looking at /proc",97],["# Check if a given process pid's cmdline matches a given name",97],["# Check `Plug.SSL` for all available options in `force_ssl`.",427]],"useCount":2434},{"word":"Client","context":[["# Client API",38],["alias Tentacat.Client",82],["## Client API",65],["defmodule Client do",43],["defmodule Client do",42],["@spec list(binary, binary, Client.t) :: Tentacat.response",26],["# Client",31],["{:ok, client} = Client.start_link as: \"dmoreno@serverboards.io\"",25],["## Remote Client",25],["|> OAuth2.Client.authorize_url!(params)",24]],"useCount":732},{"word":"Code","context":[["Code.require_file \"test_helper.exs\", __DIR__",178],["<segtitle>Code</segtitle>",210],["Code.load_file(\"example.exs\")",165],["# Code reloading can be explicitly enabled under the",569],["Code.require_file \"../test_helper.exs\", __DIR__",116],["Code.require_file \"../../../installer/test/mix_helper.exs\", __DIR__",67],["Code.eval_string \"\"\"",61],["if Code.ensure_loaded?(name) do",55],["Code.eval_quoted(quote do",44],["# Code reloading will only work if the :code_reloader key of",43]],"useCount":2257},{"word":"CodeReloader","context":[["alias Phoenix.CodeReloader.Proxy",16],["[name: Module.concat(mod, CodeReloader)]]",28],["[worker(Phoenix.CodeReloader.Server, args)]",28],["defmodule Phoenix.CodeReloader.Server do",16],["if reload?, do: Phoenix.CodeReloader.reload!(endpoint)",16],["|> Phoenix.CodeReloader.call(opts)",14],["# The GenServer used by the CodeReloader.",14],["\"server was started. Be sure to move `plug Phoenix.CodeReloader` inside \" <>",12],["plug Phoenix.CodeReloader",631],["defmodule Phoenix.CodeReloader do",12]],"useCount":787},{"word":"Config","context":[["use Mix.Config",4572],["Obelisk.Config.reload",39],["user_schema = Config.user_schema",37],["use Mix.Config",36],["%Config{} = result -> result",35],["Phoenix.Config.cache(__MODULE__, {:__phoenix_static__, path},",35],["defmodule Config do",35],["Phoenix.Config.cache(__MODULE__,",107],["the Phoenix.Config layer knows how to cache it.",111],["# and its dependencies with the aid of the Mix.Config module.",1768]],"useCount":7382},{"word":"Configuration","context":[["# Configuration for the OTP application",2109],["# Configuration from the imported file will override the ones defined",1036],["# Configuration for the OTP application.",405],["## Configuration",93],["exchange_id: Configuration.get_current_exchange_id,",33],["Configuration requires a `:paths` option which should be a list of",29],["Configuration either requires a `:name` of the registered pubsub",21],["Configuration either requires a `:name` of the registered pubsub server",19],["alias OpenAperture.Overseer.Configuration",14],["alias OpenAperture.Manager.Configuration",14]],"useCount":3799},{"word":"Configure","context":[["# Configure phoenix generators",295],["# Configure your database",1056],["# Configure your database",126],["# Configure phoenix generators",23],["# Configure guardian",13]],"useCount":1513},{"word":"Configures","context":[["# Configures the router",12],["# Configures the namespace used by Phoenix generators",22],["# Configures the endpoint",613],["# Configures Elixir's Logger",631]],"useCount":1278},{"word":"Conn","context":[["%Plug.Conn{",61],["Plug.Conn.resp(conn, 200, json)",50],["alias Plug.Conn",55],["import Plug.Conn",660],["raise Plug.Conn.AlreadySentError",93],["Raises `Plug.Conn.AlreadySentError` if the conn was already sent.",155],["Plug.Conn.resp(conn, 200, Fixture.dummy)",95],["alias Plug.Conn",140],["assert_raise Plug.Conn.AlreadySentError, fn ->",78],["import Plug.Conn",76]],"useCount":5346},{"word":"ConnTest","context":[["use Phoenix.ConnTest",59],["defmodule Phoenix.ConnTest do",22],["`Phoenix.ConnTest` typically works against endpoints. That's",22],["Such tests rely on `Phoenix.ConnTest` and also",544],["import Phoenix.ConnTest",22],["use Phoenix.ConnTest",554],["{:ok, conn: Phoenix.ConnTest.conn()}",177],["defmodule Phoenix.Test.ConnTest do",13],["{:ok, conn: Phoenix.ConnTest.build_conn()}",137],["Phoenix.ConnTest.dispatch(unquote(conn), @endpoint, unquote(method),",22]],"useCount":1572},{"word":"Controller","context":[["use Phoenix.Controller",873],["defmodule Phoenix.Controller do",37],["* `Phoenix.Controller` - functions provided by Phoenix",36],["|> Phoenix.Naming.unsuffix(\"Controller\")",36],["Check `Phoenix.Controller.Pipeline` for more information on `plug/2`",34],["plug :put_new_view, Phoenix.Controller.__view__(__MODULE__)",33],["import Phoenix.Controller",41],["use Phoenix.Controller",100],["import Phoenix.Controller",153],["import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]",515]],"useCount":2562},{"word":"Creates","context":[["assert output =~ \"Creates a new Phoenix project.\"",11],["Creates a connection to be used in upcoming requests",22],["Creates a connection to be used in upcoming requests.",22],["Creates a new Phoenix project.",42],["Creates a changeset based on the `model` and `params`.",651],["Creates a `GenServer` representing Docker host cluster.",11]],"useCount":759},{"word":"Credo","context":[["use Credo.Check, base_priority: :high",50],["{Credo.Check.Consistency.TabsOrSpaces},",37],["alias Credo.SourceFile",37],["{Credo.Check.Readability.PredicateFunctionNames},",34],["{Credo.Check.Refactor.MatchInCondition},",34],["{Credo.Check.Warning.UnusedStringOperation},",34],["{Credo.Check.Readability.VariableNames},",35],["{Credo.Check.Warning.IExPry},",35],["use Credo.TestHelper",92],["{Credo.Check.Consistency.ExceptionNames},",36]],"useCount":1916},{"word":"DAEMON","context":[["--exec $DAEMON -- $DAEMON_OPTS",129],["--exec $DAEMON",143],["start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON",142],["status_of_proc \"$DAEMON\" \"$NAME\" && exit 0 || exit $?",142],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\",141],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\",141],["#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \\",138],["test -x $DAEMON || exit 0",121],["[ -x $DAEMON ] || exit 0",85],["/var/run/$NAME.pid --exec $DAEMON",85]],"useCount":1754},{"word":"DEBHELPER","context":[["#DEBHELPER#",1139]],"useCount":1139},{"word":"DESC","context":[["echo -n \"Restarting $DESC: \"",78],["log_daemon_msg \"Restarting $DESC\" \"$NAME\"",192],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Stopping $DESC\" \"$NAME\"",143],["#log_daemon_msg \"Reloading $DESC\" \"$NAME\"",143],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC \" \"$NAME\"",85],["# echo \"Reloading $DESC configuration files.\"",78],["echo -n \"Starting $DESC: \"",78],["echo -n \"Stopping $DESC: \"",78],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC\" \"$NAME\"",58],["# log_daemon_msg \"Reloading $DESC configuration files\" \"$NAME\"",49]],"useCount":1260},{"word":"DESCRIPTION","context":[["DESCRIPTION:Let's go see Star Wars.",20],["<title>DESCRIPTION</title>",507],[".SH DESCRIPTION",281]],"useCount":808},{"word":"Debian","context":[["<!ENTITY debian      \"<productname>Debian</productname>\">",293],["<para>This manual page was written for the Debian distribution",210],["<para>This manual page was written for the Debian system",210],["<contrib>Wrote this manpage for the Debian system.</contrib>",210],["#\t\tModified for Debian",72]],"useCount":995},{"word":"Dependencies","context":[["# Dependencies listed here are available only for this project",38],["# Dependencies can be hex.pm packages:",45],["# Dependencies can be Hex packages:",1439],["# Dependencies",12]],"useCount":1534},{"word":"Do","context":[["message: \"Do not use = in if or unless.\",",24],["Do NOT define functions inside the quoted expressions",556],["# Do not print debug messages in production",539],["# Do release",12],["# Do not include metadata nor timestamps in development logs",590],["# Do not configure such in production as keeping",368],["# Do not pring debug messages in production",21],["# Do NOT \"set -e\"",58]],"useCount":2168},{"word":"ENTITY","context":[["<!ENTITY dhusername  \"root\">",17],["<!ENTITY dhusername  \"unknown\">",24],["<!ENTITY dhusername  \"to_be_fill\">",30],["<!ENTITY dhsurname   \"SURNAME\">",210],["<!ENTITY dhfirstname \"FIRSTNAME\">",210],["<!ENTITY dhsection   \"SECTION\">",210],["<!ENTITY debian      \"<productname>Debian</productname>\">",293],["<!ENTITY dhsurname   \"<surname>SURNAME</surname>\">",295],["<!ENTITY dhsection   \"<manvolnum>SECTION</manvolnum>\">",296],["<!ENTITY dhfirstname \"<firstname>FIRSTNAME</firstname>\">",295]],"useCount":1952},{"word":"ENV","context":[["</SOAP-ENV:Envelope>",71],["</SOAP-ENV:Header>",71],["</SOAP-ENV:Body>",71],["<SOAP-ENV:Body>",71],["<SOAP-ENV:Header>",71],["\\t</SOAP-ENV:Body>",67],["\\t<SOAP-ENV:Body>",67],["\\t<SOAP-ENV:Header>",67],["</SOAP-ENV:Envelope>|",67],["\\t</SOAP-ENV:Header>",67]],"useCount":899},{"word":"Ecto","context":[["use Ecto.Migration",1871],["# Start the Ecto repository",452],["use Ecto.Schema",482],["import Ecto.Query",864],["import Ecto.Query, only: [from: 2]",969],["import Ecto",1510],["import Ecto.Model",1121],["import Ecto.Changeset",1126],["adapter: Ecto.Adapters.Postgres,",1153],["import Ecto.Query, only: [from: 1, from: 2]",1336]],"useCount":15620},{"word":"Elixir","context":[["name = Module.concat(Elixir, name)",55],["assert_raise Mix.Error, ~r\"Module name must be a valid Elixir alias\", fn ->",37],["import Elixir$ElixirScript$Kernel from '../elixir/Elixir.ElixirScript.Kernel';",37],["defmodule Programming.Elixir do",37],["import Elixir$ElixirScript$Kernel from '../elixir/Elixir.ElixirScript.Kernel';",37],["Mix.raise \"Module name must be a valid Elixir alias (for example: Foo.Bar), got: #{inspect name}\"",46],["# This will make Elixir unable to track the dependency",47],["# Configures Elixir's Logger",631],["# Excerpted from \"Programming Elixir 1.2\",",124],["# Excerpted from \"Programming Elixir 1.2\",",83]],"useCount":1448},{"word":"Endpoint","context":[["config :hello_phoenix, HelloPhoenix.Endpoint,",80],["config :<%= application_name %>, <%= application_module %>.Endpoint,",49],["config :hello, Hello.Endpoint,",44],["YourApp.Endpoint.config(:port)",41],["defmodule YourApp.Endpoint do",41],["defmodule Phoenix.Endpoint do",41],["## Endpoint API",41],["defmodule Endpoint do",111],["use Phoenix.Endpoint, otp_app: :phoenix",105],["config :your_app, YourApp.Endpoint,",49]],"useCount":3167},{"word":"Enum","context":[["|> Enum.at(0)",129],["|> Enum.to_list",114],["|> Enum.join(\"\\n\")",117],["|> Enum.reverse",368],["|> Enum.into(%{})",277],["|> Enum.join(\" \")",104],["|> Enum.uniq",165],["|> Enum.with_index",131],["|> Enum.join",129],["|> Enum.sort",119]],"useCount":7005},{"word":"Error","context":[["%Error{",471],["assert_raise Mix.Error, fn ->",196],["%Error{",160],["alias Dogma.Error",123],["%Alembic.Error{",72],["assert_raise Mix.Error, ~r\"Application name must start with a letter and \", fn ->",74],["{:error, %HTTPoison.Error{reason: reason}} ->",76],["alias Dogma.Error",103],["assert_raise Mix.Error, ~r\"Module name \\w+ is already taken\", fn ->",105],["...>   %Alembic.Error{",111]],"useCount":2002},{"word":"ExUnit","context":[["use ExUnit.Case, async: true",3311],["error in [ExUnit.AssertionError] ->",67],["use ExUnit.CaseTemplate",86],["ExUnit.configure exclude: :pending, trace: true",222],["import ExUnit.CaptureIO",232],["ExUnit.start()",378],["use ExUnit.Case, async: false",765],["ExUnit.start",1269],["use ExUnit.CaseTemplate",1548],["use ExUnit.Case",5884]],"useCount":14273},{"word":"Example","context":[["Example:",182],["##Example",24],["title: Example",33],["# Example init.d script with LSB support.",49],["defmodule Example do",52],["### Example",73],["## Example:",162],["# Example",184],["# Example watch control file for uscan",276],["## Example",1840]],"useCount":3000},{"word":"Examples","context":[["## Examples",6756],["# Examples",127],["% ## Examples",144],["### Examples",34],["Examples",36],["##### Examples",37],["## Examples:",97],["Examples:",102],["## Examples",171]],"useCount":7504},{"word":"FIRSTNAME","context":[["<!-- Fill in your name for FIRSTNAME and SURNAME. -->",506],["<!ENTITY dhfirstname \"<firstname>FIRSTNAME</firstname>\">",295],["<!ENTITY dhfirstname \"FIRSTNAME\">",210]],"useCount":1011},{"word":"FLAVOR","context":[["FLAVOR=$1",288],["ELCDIR=/usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["echo install/${PACKAGE}: Handling install for emacsen flavor ${FLAVOR}",144],["echo install/${PACKAGE}: install Info links for ${FLAVOR}",144],["rm -rf /usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144],["echo remove/${PACKAGE}: purging byte-compiled files for ${FLAVOR}",144],["${FLAVOR} ${FLAGS} ${FILES}",144],["#FLAVORTEST=`echo $FLAVOR | cut -c-6`",144],["if [ ${FLAVOR} != emacs ]; then",144]],"useCount":1872},{"word":"Fall","context":[["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210],["Fall of a Fooish Bar</citetitle> available via the",296],[".IR \"The Rise and Fall of a Fooish Bar\" ,",284]],"useCount":790},{"word":"File","context":[["project_path = Path.join(File.cwd!, \"custom_path\")",206],[":meck.new(File, [:unstick])",110],[":meck.unload(File)",96],["|> File.read!",95],["|> File.read!",67],["File.exists?(Path.join(umbrella, \"mix.exs\")) &&",43],["File.write!(file, File.read!(file) <> contents)",44],["File.write!(file, File.read!(file) <> contents)",44],["File.mkdir_p!(target)",46],[":meck.expect(File, :exists?, fn _ -> true end)",61]],"useCount":2909},{"word":"Finally","context":[["Finally, Phoenix ships with a `mix phoenix.routes` task that nicely",30],["# Finally import the config/prod.secret.exs",478],["# Finally, we also include the path to a manifest",503],["Finally, if the test case interacts with the database,",1503],["Finally, every time a message is pushed to the channel,",14],["Finally, a diff of presence join and leave events will be sent to the",18]],"useCount":2546},{"word":"Fooish","context":[["Fall of a Fooish Bar</citetitle> available via the",296],[".IR \"The Rise and Fall of a Fooish Bar\" ,",284],["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210]],"useCount":790},{"word":"For","context":[["# watchers to your application. For example, we use it",570],["# For production, we configure the host to read the PORT",527],["options is included below.  For a complete description, see the",507],["# For example, to create, migrate and run the seeds file at once:",350],["For a complete description, see the Info files.",285],["For example:",180],["# For development, we disable any cache and enable",572],["# directory. For example, you can emulate configuration per environment",1035],["# file won't be loaded nor affect the parent project. For this reason,",1055],["it cannot be async. For this reason, every test runs",1504]],"useCount":7635},{"word":"GET","context":[["user_path  GET    /users           UserController.index/2",31],["req = request(method: :GET,",33],["assert conn.method == \"GET\"",49],["assert \"GET\" == conn.method",123],["test \"GET /\", %{conn: conn} do",202],["test \"GET /\" do",222],["user_path  GET    /users/new       UserController.new/2",31],["user_path  GET    /users/:id       UserController.show/2",31],["user_path  GET    /users/:id/edit  UserController.edit/2",31],["page_path  GET    /pages/:id       PageController.show/2",31]],"useCount":1144},{"word":"GenServer","context":[["use GenServer",1566],["GenServer.start_link(__MODULE__, %{}, name: __MODULE__)",41],["GenServer.start_link(__MODULE__, [], name: __MODULE__)",42],["use GenServer",86],["use GenServer.Behaviour",81],["GenServer.start_link(__MODULE__, :ok, opts)",33],["The `state` option is the GenServer's state",32],["# GenServer callbacks",67],["# GenServer implementation",32],["GenServer.start_link(__MODULE__, :ok, name: __MODULE__)",31]],"useCount":2704},{"word":"Generates","context":[["Generates an Ecto model in your Phoenix application.",20],["Generates the path information when routing to this endpoint.",38],["Generates a Phoenix resource.",39],["Generates the endpoint base URL without any path information.",39],["Generates tag for inlined form input errors.",269],["Generates a route to a static file in `priv/static`.",38],["Generates the static URL without any path information.",37],["Generates a route to handle a #{verb} request to the given path.",30],["Generates the endpoint base URL but as a `URI` struct.",26],["@shortdoc \"Generates an Ecto model\"",19]],"useCount":982},{"word":"Gettext","context":[["import Rumbl.Gettext",17],["defmodule MyApp.Gettext do",15],["# call the Gettext module passing our Gettext backend. We",295],["import XAdmin.Gettext",18],["import ExAdmin.Gettext",28],["See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.",89],["By using [Gettext](https://hexdocs.pm/gettext),",89],["By using [Gettext](http://hexdocs.pm/gettext),",205],["See the [Gettext Docs](http://hexdocs.pm/gettext) for detailed usage.",206],["# call the Gettext module passing our Gettext backend. We",295]],"useCount":1348},{"word":"Guardian","context":[["plug Guardian.Plug.LoadResource",70],["config :guardian, Guardian,",106],["{:ok, jwt, _full_claims} = user |> Guardian.encode_and_sign(:token)",21],["use Guardian.Phoenix.Controller",22],["import Guardian.TestHelper",24],["plug Guardian.Plug.VerifySession",28],["case Guardian.Plug.claims(conn, key) do",33],["plug Guardian.Plug.VerifyHeader",36],["user = Guardian.Plug.current_resource(conn)",37],["@behaviour Guardian.Serializer",49]],"useCount":884},{"word":"HTML","context":[["with a 500 error during a HTML request, `render(\"500.html\", assigns)`",39],["use Phoenix.HTML",915],["# Use all HTML functionality (forms, tags, etc)",533],["# Use Phoenix.HTML to import all HTML functions (forms, tags, etc)",59],["# Use Phoenix.HTML to import all HTML functions (forms, tags, etc)",59],["import Phoenix.HTML.Tag",47],["import Phoenix.HTML",44],["import Phoenix.HTML",43],["The form should either be a `Phoenix.HTML.Form` emitted",35],["All other options are forwarded to the underlying HTML tag.",40]],"useCount":2666},{"word":"HTTP","context":[["assert 401 == elem(result, 0) # HTTP code",19],["Helper method to maintain token session state when making HTTP requests.",23],["* `:http` - the configuration for the HTTP server. Currently uses",40],["Underlying HTTP connection",96],["The `conn` option defines the underlying HTTP connection.",114],["The `options` option defines any extra HTTP options (optional).",242],["use Dynamo.HTTP.Case",33],["\"protocols\" => [\"HTTP\"],",32],["macros are named after HTTP verbs. For example:",30],["* `:method` - the HTTP method. If the method is not \"get\" nor \"post\",",24]],"useCount":862},{"word":"HTTPoison","context":[["alias HTTPoison.Response",29],["{:ok, %HTTPoison.Response{status_code: 404}} ->",33],["{:ok, %HTTPoison.Response{status_code: 200, body: body}} ->",65],["|> HTTPoison.get(@user_agent)",33],["%HTTPoison.Response{ status_code: 200,",36],["|> HTTPoison.get",37],["HTTPoison.start",55],["{:error, %HTTPoison.Error{reason: reason}} ->",76],["HTTPoison.start",92],["use HTTPoison.Base",187]],"useCount":938},{"word":"Hello","context":[["|> subject(\"Hello, Avengers!\")",37],["render conn, \"show.html\", message: \"Hello\"",72],["render conn, :show, message: \"Hello\"",72],["#=> {:safe, \"Hello John Doe\"}",66],["assert conn.resp_body =~ ~r\"<title>Hello</title>\"",48],["|> html_body(\"<h1>Hello</h1>\")",36],["config :hello, Hello.Endpoint,",44],["Hello <%= @name %>",42],["assert view_module(conn) == Hello",39],["assert conn.resp_body == \"Hello\\n\"",87]],"useCount":1522},{"word":"Helpers","context":[["Phoenix automatically generates a module `Helpers` inside your router",30],["## Helpers",231],["use Hound.Helpers",58],["# Helpers",53],["import <%= application_module %>.Router.Helpers",40],["Helpers.integer(opts)",33],["import ExAdmin.Helpers",33],["### Helpers",31],["Helpers are automatically generated based on the controller name.",30],["MyApp.Router.Helpers.page_url(conn_or_endpoint, :show, \"hello\", some: \"query\")",28]],"useCount":3172},{"word":"Here","context":[["# Here we use delete! (with a bang) because we expect",380],["# Here you could define other workers and supervisors as children",443],["gettext \"Here is the string to translate\"",297],["ngettext \"Here is the string to translate\",",297],["dgettext \"errors\", \"Here is the error message to translate\"",297],["\"Here are the strings to translate\",",297],["Here is a quick introduction into Phoenix templates terms:",15],["builder option. Here is an example from EEx:",15],["Here's an example of receiving an incoming `\"new_msg\"` event from one client,",23],["automatically generated in your endpoint. Here is a summary of all the",40]],"useCount":2117},{"word":"Hex","context":[["Code.ensure_loaded?(Hex) and Hex.start",32],["Code.ensure_loaded?(Hex) and Hex.start",32],["# Dependencies can be Hex packages:",1439],["hex?: Code.ensure_loaded?(Hex),",38],["maybe_cmd \"mix deps.get\", true, install? && Code.ensure_loaded?(Hex)",39],["# Hex",65],["# Credo automatically checks for updates, like e.g. Hex does.",12]],"useCount":1657},{"word":"IO","context":[["|> IO.inspect",264],["|> IO.puts",184],["IO.puts \"\"",164],["IO.puts \"\"\"",150],["IO.puts \".\"",70],["IO.puts \"\"",66],["IO.puts message",57],["|> IO.iodata_to_binary",52],["IO.puts \"Nothing happened as far as I am concerned\"",41],["|> IO.puts",123]],"useCount":2331},{"word":"If","context":[["<para>If used, the defined file is used as configuration",210],["# If the above conditions are not satisfied then add some other code",143],["# If the daemon can reload its configuration without",143],["# If the \"reload\" option is implemented then remove the",143],["# We don't run a server during test. If one is required,",545],["# If you are doing OTP releases, you need to instruct Phoenix",549],["If no params are provided, an invalid changeset is returned",587],["# to this project. If another project depends on this project, this",1080],["# If do_reload() is not implemented then leave this commented out",143],["# If this value is set too low you might not",97]],"useCount":5680},{"word":"Import","context":[["# Import all HTML functions (forms, tags, etc)",19],["# Import environment specific config. Note, this must remain at the bottom of",21],["# Import common functionality",59],["# Import URL helpers from the router",254],["# Import conveniences for testing with connections",544],["# Import convenience functions from controllers",565],["# Import environment specific config. This must remain at the bottom",630],["# Import conveniences for testing with channels",494]],"useCount":2586},{"word":"In","context":[["<!-- In alpabetical order. -->",210],["# In this file, we keep production configuration that",89],["In the assertion above, we don't particularly care about",42],["In the previous section, we have used the `config/2` function which is",39],["name, or false. In case a previous layout is set, `put_layout` also",37],["In order for the example above to work, we need to do content negotiation with",36],["# In case there is a header, we need to parse it.",36],["# In case there is no accept header or the header is */*",32],["to help define plugs. In the example above, `fetch_session/2`",30],["# In case no render clause matches or no",532]],"useCount":1337},{"word":"Info","context":[["available via the Info system.",284],["For a complete description, see the Info files.",285],["<application>Info</application> system.</para>",296],["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144],["echo install/${PACKAGE}: install Info links for ${FLAVOR}",144],["<application>Info</application> format; see below.</para>",296],["<application>Info</application> files.</para>",297],["alias Ueberauth.Auth.Info",20],["%Info{",16]],"useCount":1782},{"word":"It","context":[["# It's ok, the server started and is running",49],["# It is not running after we did start",40],["web application start. It is also the interface your",41],["It receives a connection, a list of formats that the server",36],["It expects the path of the project as argument.",44],["It uses the configured `:format_encoders` under the `:phoenix`",40],["* `:watchers` - a set of watchers to run alongside your server. It",39],["It will fallback to `url` if no option is provided. Accepts the same",37],["It uses the configuration under `:url` to generate such.",52],["# It is also possible to import configuration files, relative to this",1035]],"useCount":1968},{"word":"Keyword","context":[["|> Keyword.merge(opts)",40],["phoenix_path = phoenix_path(path, Keyword.get(opts, :dev, false))",32],["|> Keyword.put_new(:id, id_from(form, field))",64],["|> Keyword.put_new(:name, name_from(form, field))",69],["if given = Keyword.get(opts, :namespace) do",31],["ecto = Keyword.get(opts, :ecto, true)",42],["brunch = Keyword.get(opts, :brunch, true)",42],["db = Keyword.get(opts, :database, \"postgres\")",39],["|> Keyword.get(:json, Poison)",36],["application_name = Keyword.fetch!(binding, :application_name)",46]],"useCount":2212},{"word":"List","context":[["|> List.flatten",268],["if List.keyfind(resp_headers, \"content-type\", 0) do",37],["{_, location} = List.keyfind(conn.resp_headers, \"location\", 0)",48],["assert List.keymember?(conn.resp_headers, \"location\", 0)",50],["|> List.to_string",52],["|> List.to_tuple",73],["|> List.wrap",76],["|> List.first",99],["|> List.last",125],["|> List.first",246]],"useCount":1771},{"word":"LiveReloader","context":[["plug Phoenix.LiveReloader",541],["socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket",470],["&refute(&1 =~ ~r\"Phoenix.LiveReloader\")",16],["&refute(&1 =~ ~r\"Phoenix.LiveReloader.Socket\")",16]],"useCount":1043},{"word":"Logger","context":[["Logger.flush()",84],["require Logger",2561],["# Configures Elixir's Logger",631],["require Logger",223],["Logger.disable(self())",107],["plug Plug.Logger",685],["import Logger",66],["Logger.error(error_msg)",44],["Logger.remove_backend(:console)",35],["Logger.debug msg",31]],"useCount":5156},{"word":"Makefile","context":[["less'.  A typical entry in a Makefile or Makefile.am is:",254],["less'.  A typical entry in a Makefile or Makefile.am is:",254],["in a Makefile or Makefile.am is:",210],["in a Makefile or Makefile.am is:",210],["typical entry in a Makefile or Makefile.am is:",40],["typical entry in a Makefile or Makefile.am is:",40],["\"Makefile\",",11]],"useCount":1019},{"word":"ManagerApi","context":[["alias OpenAperture.ManagerApi",116],["SystemEvent.create_system_event!(ManagerApi.get_api, event)",50],["alias OpenAperture.ManagerApi.Response",41],["import OpenAperture.ManagerApi.Resource",38],[":meck.new(OpenAperture.ManagerApi.MessagingExchange, [:passthrough])",26],[":meck.unload(OpenAperture.ManagerApi.MessagingExchange)",26],["alias OpenAperture.ManagerApi.SystemEvent",19],[":meck.expect(OpenAperture.ManagerApi.MessagingExchange, :exchange_has_modules_of_type?, fn _, _ -> true end)",18],["Returns the OpenAperture.ManagerApi.Response struct.",120],["The `api` option defines the OpenAperture.ManagerApi used for connection.",242]],"useCount":766},{"word":"Map","context":[["case Map.fetch(args, \"q\") do",38],["case Map.get(private, :phoenix_layout, false) do",37],["|> Map.get(:boolean)",40],["|> Map.from_struct",46],["|> Map.keys",53],["|> Map.to_list",59],["|> Map.put(:status, 200)",60],["|> Map.put(:resp_body, \"\")",63],["session = Map.take(resp.body, [\"token\", \"sig\"])",89],["|> Map.put(:state, :set)",106]],"useCount":2594},{"word":"Message","context":[["refute_receive %Message{event: \"new_msg\"}",64],["assert_receive %Message{event: \"phx_reply\", ref: \"1\", payload: %{\"response\" => %{}, \"status\" => \"ok\"}}",36],["assert_receive %Message{event: \"phx_reply\", payload: %{\"response\" => %{\"reason\" => \"unmatched topic\"}}}",32],["Dispatches `Phoenix.Socket.Message` to a channel.",25],["abiding by the `Phoenix.Socket.Message` format.",25],["`Phoenix.Socket.Message` and `Phoenix.Socket.Reply`. Those",25],["alias Phoenix.Socket.Message",126],["alias Phoenix.Socket.Message",60],["assert_receive %Message{event: \"phx_reply\",",52],["assert_receive %Message{event: \"joined\"}",39]],"useCount":1215},{"word":"Migration","context":[["use Ecto.Migration",1871],["use Ecto.Migration",28],["alias Ecto.Migration.Table",19],["alias Ecto.Migration.Index",19],["alias Ecto.Migration.Reference",15]],"useCount":1952},{"word":"Mix","context":[["#     import_config \"#{Mix.env}.exs\"",921],["use Mix.Config",4572],["# and its dependencies with the aid of the Mix.Config module.",1768],["import_config \"#{Mix.env}.exs\"",847],["build_embedded: Mix.env == :prod,",2423],["use Mix.Project",4287],["elixirc_paths: elixirc_paths(Mix.env),",714],["use Mix.Task",666],["# See the documentation for `Mix` for more info on aliases.",350],["start_permanent: Mix.env == :prod,",2442]],"useCount":24828},{"word":"Model","context":[["params = %Model{ id: 1 }",20],["import Ecto.Model",1121],["use Ecto.Model",421],["use Ecto.Model",57],["Mix.Tasks.Phoenix.Gen.Model.run [\"Post\", \"posts\"]",22],["alias FinTex.Model.Dialog",21],["Model",21],["use Ecto.Integration.Model",20],["defmodule Mix.Tasks.Phoenix.Gen.Model do",19],["Mix.Tasks.Phoenix.Gen.Model.run [\"Admin.User\", \"users\", \"name:string\"]",18]],"useCount":1921},{"word":"Module","context":[["Module.register_attribute(__MODULE__, :plugs, accumulate: true)",68],["Module.concat([unquote(alias)|unquote(t)])",47],["Mix.raise \"Module name must be a valid Elixir alias (for example: Foo.Bar), got: #{inspect name}\"",46],["|> Module.concat()",67],["name = Module.concat(Elixir, name)",55],["Mix.raise \"Module name #{inspect name} is already taken, please choose another name\"",55],["|> Module.split()",43],["|> Module.split",86],["plugs = Module.get_attribute(env.module, :plugs)",50],["assert_raise Mix.Error, ~r\"Module name \\w+ is already taken\", fn ->",105]],"useCount":1416},{"word":"MyApp","context":[["plug :put_view, MyApp.SpecialView",36],["use MyApp.Web, :controller",77],["channel \"rooms:*\", MyApp.RoomChannel",40],["|> MyApp.RequireAuthentication.call([])",42],["user = %MyApp.User{}",48],["defmodule MyApp.UserController do",174],["defmodule MyApp.Router do",110],["controller. For example, `MyApp.UserController` will render templates inside",36],["The example above renders a template \"show.html\" from the `MyApp.UserView`",36],["|> put_view(MyApp.SpecialView)",36]],"useCount":2203},{"word":"NAME","context":[["PIDFILE=/var/run/$NAME.pid",240],["log_daemon_msg \"Restarting $DESC\" \"$NAME\"",192],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144],["start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME",142],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Stopping $DESC\" \"$NAME\"",143],["SCRIPTNAME=/etc/init.d/$NAME",143],[".SH NAME",286],["echo \"$NAME.\"",282],[".\\\" First parameter, NAME, should be all caps",280],["#log_daemon_msg \"Reloading $DESC\" \"$NAME\"",143]],"useCount":3907},{"word":"NOT","context":[["test \"it should NOT report expected code\" do",57],["Do NOT define functions inside the quoted expressions",556],["# Do NOT \"set -e\"",58],["# This is an expensive and private operation. DO NOT USE IT IN PROD.",14],["# cases NOT raising issues",52]],"useCount":737},{"word":"New","context":[["Mix.Tasks.Phoenix.New.run([project_path, \"--app\", @app_name, \"--module\", \"PhoteuxBlog\"])",31],["Mix.Tasks.Phoenix.New.run [\"valid\", \"--app\", \"007invalid\"]",32],["Mix.Tasks.Phoenix.New.run [\"valid\", \"--module\", \"String\"]",30],["Mix.Tasks.Phoenix.New.run [\"valid\", \"--module\", \"not.valid\"]",32],["Mix.Tasks.Phoenix.New.run [\"007invalid\"]",32],["Mix.Tasks.Phoenix.New.run []",32],["defmodule Mix.Tasks.Phoenix.New do",44],["assert html_response(conn, 200) =~ \"New post\"",55],["Mix.Tasks.Phoenix.New.run([@app_name])",64],["assert html_response(conn, 200) =~ \"New user\"",100]],"useCount":886},{"word":"OPTIONS","context":[["Issues an OPTIONS request to the given url.",11],["Issues a OPTIONS request to the given url, raising an exception in case of",11],["defp dispatch(%{method: \"OPTIONS\"} = conn, _, _, _, _) do",11],["use HTTParrot.Cowboy, methods: ~w(GET HEAD OPTIONS)",25],[".SH OPTIONS",286],["<title>OPTIONS</title>",507]],"useCount":851},{"word":"OTP","context":[["# We use :os.cmd/1 because there is a bug in OTP",38],["* `--app` - the name of the OTP application",43],["# If you are doing OTP releases, you need to instruct Phoenix",549],["# Erlang/OTP 19 [erts-8.1] [source-4cc2ce3] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]",15],["# Configuration for the OTP application.",405],["# for more information on OTP Applications",840],["# Configuration for the OTP application",2109]],"useCount":3999},{"word":"OpenAperture","context":[[":meck.expect(QueueBuilder, :build, fn _,_,_ -> %OpenAperture.Messaging.Queue{name: \"\"} end)",44],["alias OpenAperture.Messaging.AMQP.QueueBuilder",38],["alias OpenAperture.Manager.Repo",66],["alias OpenAperture.ManagerApi",116],["Returns the OpenAperture.ManagerApi.Response struct.",120],["The `api` option defines the OpenAperture.ManagerApi used for connection.",242],["use OpenAperture.Manager.Web, :controller",44],["alias OpenAperture.ManagerApi.Response",41],["import OpenAperture.ManagerApi.Resource",38],["use OpenAperture.Messaging",38]],"useCount":1624},{"word":"Options","context":[["## Options",1896],["defmodule Options do",11],["# Options",39],["### Options",47],["Options:",84]],"useCount":2077},{"word":"Or","context":[["Or an endpoint that returns it:",14],["Or even assert something was broadcast into pubsub:",14],["Or only invoke the Endpoint's plugs:",14],["# Or git/path repositories:",1475],["# Or configure a 3rd-party app:",857],["<!-- Or use this section to tell about upstream BTS. -->",210]],"useCount":2584},{"word":"PACKAGE","context":[["echo install/${PACKAGE}: install Info links for ${FLAVOR}",144],["rm -rf /usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["NAME=#PACKAGE              # Introduce the short server's name here",34],["echo install/${PACKAGE}: Handling install for emacsen flavor ${FLAVOR}",144],["install-info-altdir --quiet --section \"\" \"\" --dirname=${FLAVOR} /usr/share/info/${PACKAGE}.info.gz",118],["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144],["ELDIR=/usr/share/emacs/site-lisp/${PACKAGE}",144],["ELCDIR=/usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["echo remove/${PACKAGE}: purging byte-compiled files for ${FLAVOR}",144],["DESC=#PACKAGE              # Introduce a short description here",34]],"useCount":1234},{"word":"PG2","context":[["adapter: Phoenix.PubSub.PG2],",11],["[adapter: Phoenix.PubSub.PG2]",18],["adapter: Phoenix.PubSub.PG2]",577],["config = [pubsub: [adapter: Phoenix.PubSub.PG2,",11],["* `Phoenix.PubSub.PG2` - uses Distributed Elixir,",12],["pubsub: [adapter: Phoenix.PubSub.PG2, name: :endpoint_pub]]",15],["pubsub: [adapter: Phoenix.PubSub.PG2, name: __MODULE__]",19],["Application.put_env(:phoenix, :pubsub_test_adapter, Phoenix.PubSub.PG2)",11],["your PubSub adapter. See `Phoenix.PubSub.PG2` implementation for examples.",12],["[adapter: Phoenix.PubSub.PG2, name: MyApp.PubSub]",21]],"useCount":718},{"word":"PIDFILE","context":[["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\",141],["start-stop-daemon --stop --quiet --pidfile $PIDFILE \\",106],["#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \\",138],["rm -f $PIDFILE",239],["[ ! -f \"$PIDFILE\" ] && return 1",146],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144],["start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME",142],["PIDFILE=/var/run/$NAME.pid",240],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\",141],["start-stop-daemon --start --quiet --pidfile $PIDFILE \\",106]],"useCount":1848},{"word":"PORT","context":[["# to set PORT=80 before running your server.",527],["port: System.get_env(\"PORT\"),",33],["`{:system, \"ENV_VAR\"}`. When given a tuple like `{:system, \"PORT\"}`,",39],["# For production, we configure the host to read the PORT",527],["port: System.get_env(\"PORT\") || 4001,",18],["http: [port: System.get_env(\"PORT\") || 4001]",33],["http: [port: {:system, \"PORT\"}],",503],["http: [port: System.get_env(\"PORT\")],",71],["http: [port: System.get_env(\"PORT\") || 4000],",48],["the port will be referenced from `System.get_env(\"PORT\")` at runtime",39]],"useCount":1867},{"word":"Page","context":[["%{errors: %{detail: \"Page not found\"}}",29],["page = Repo.insert! %Page{}",22],["use Elixytics.Report.Page",17],["%{errors: %{detail: \"Page not found\"}}",30],["\"Page not found - 404\"",59],["http://www.tldp.org/HOWTO/Man-Page/q2.html). -->",210],["man(1), man(7), http://www.tldp.org/HOWTO/Man-Page/",210],["\"Page not found\"",446],["\"Page not found\"",455],["http://www.tldp.org/HOWTO/Man-Page/q2.html. -->",210]],"useCount":1767},{"word":"PageController","context":[["get \"/\", PageController, :index",444],["get \"/pages/:page\", PageController, :show",60],["get \"/pages/:id\", PageController, :show",61],["get \"/\", PageController, :root, as: :page",19],["dispatches it to the show action in the `PageController`.",30],["and will dispatch to `:show` action in `API.V1.PageController`. A named",30],["get \"/pages/:page\", PageController, :show, as: :special_page",30],["page_path  GET    /pages/:id       PageController.show/2",31],["resources \"/pages\", PageController, only: [:show]",31],["~r/defmodule PhotoBlog.PageController/",32]],"useCount":794},{"word":"Parsers","context":[["raise Plug.Parsers.UnsupportedMediaTypeError, media_type: \"foo/bar\"",11],["import Combine.Parsers.Text",11],["@plug_parsers Plug.Parsers.init(parsers: [:json], json_decoder: Poison)",11],["|> Plug.Parsers.call(Plug.Parsers.init(parsers: [:json], json_decoder: Poison))",13],["|> Plug.Parsers.call(Plug.Parsers.init(parsers: [:json], json_decoder: Poison))",13],["import Combine.Parsers.Base",16],["@behaviour Plug.Parsers",16],["plug Plug.Parsers,",25],["...> import Combine.Parsers.Text",73],["plug Plug.Parsers,",636]],"useCount":825},{"word":"Path","context":[["root: Path.dirname(__DIR__),",452],["File.exists?(Path.join(umbrella, \"mix.exs\")) &&",43],["umbrella = Path.expand(Path.join [app_path, \"..\", \"..\"])",43],["file = Path.join(path, file)",44],["assert [migration] = Path.wildcard(\"priv/repo/migrations/*_create_post.exs\")",54],["|> Path.wildcard",75],["cd: Path.expand(\"../\", __DIR__)]]",79],["|> Path.join",84],["@external_resource Path.join(root, source)",43],["project_path = Path.join(File.cwd!, \"custom_path\")",206]],"useCount":3082},{"word":"Phoenix","context":[["use Phoenix.Channel",698],["use Phoenix.View, root: \"web/templates\"",611],["plug Phoenix.CodeReloader",631],["# If you are doing OTP releases, you need to instruct Phoenix",549],["use Phoenix.Router",755],["use Phoenix.Controller",873],["use Phoenix.HTML",915],["use Phoenix.ConnTest",554],["# Tell Phoenix to update the endpoint configuration",570],["adapter: Phoenix.PubSub.PG2]",577]],"useCount":25391},{"word":"Please","context":[["Please remember that if you create the nroff version in one of the",252],["Please check `Phoenix.Template.Engine` for more information on",13],["\"Please ensure you have listed :phoenix under :applications in your \" <>",13],["Please verify that you assign to \"conn\" after a request:",20],["docbook-xsl-doc-* packages. Please remember that if you create the nroff",210],["# Please read this init.d carefully and modify the sections to",49],["XSL files are in docbook-xsl.  Please remember that if you",40],["\"Please set `plug :accepts, %w(html json ...)` in your pipeline.\"",26],[".\\\" Please adjust this date whenever revising the manpage.",280],["<!-- Please adjust the date whenever revising the manpage. -->",296]],"useCount":1247},{"word":"Plug","context":[["plug Plug.Session,",626],["plug Plug.Logger",685],["import Plug.Conn",660],["plug Plug.Head",639],["plug Plug.Parsers,",636],["plug Plug.MethodOverride",633],["plug Plug.Static,",629],["plug Plug.RequestId",518],["# Check `Plug.SSL` for all available options in `force_ssl`.",427],["use Plug.Test",408]],"useCount":12274},{"word":"Poison","context":[["case Poison.decode(body) do",37],["{:ok, decoded} = Poison.decode \"\"\"",34],["|> Keyword.get(:json, Poison)",36],["json = Poison.encode!(job)",44],["|> Poison.decode!",60],["|> Poison.decode!",91],["|> Poison.encode!",102],["body = Poison.decode!(conn.resp_body)",149],["@derive [Poison.Encoder]",180],["json_decoder: Poison",644]],"useCount":2039},{"word":"Post","context":[["%Post{id: pid1} = TestRepo.insert!(%Post{title: \"1\"})",40],["changeset = Post.changeset(%Post{}, @valid_attrs)",35],["changeset = Post.changeset(%Post{}, attrs)",46],["%Post{id: pid1} = TestRepo.insert!(%Post{title: \"1\"})",40],["changeset = Post.changeset(%Post{}, attrs)",46],["p2 = TestRepo.insert!(%Post{title: \"2\"})",59],["assert Repo.get_by(Post, @valid_attrs)",63],["p1 = TestRepo.insert!(%Post{title: \"1\"})",66],["post = Repo.get!(Post, id)",83],["post = Repo.insert! %Post{}",126]],"useCount":1756},{"word":"Postgres","context":[["{:postgrex, Ecto.Adapters.Postgres, db_config(app, \"postgres\", \"postgres\")}",11],["use Ecto.Repo, adapter: Ecto.Adapters.Postgres",16],["{:postgrex, Ecto.Adapters.Postgres, db_config(app, module, \"postgres\", \"postgres\")}",22],["adapter: Ecto.Adapters.Postgres,",26],["adapter: Ecto.Adapters.Postgres,",1153]],"useCount":1228},{"word":"Process","context":[["ref = Process.monitor(pid)",81],["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["refute Process.alive?(pid)",46],["Process.flag(:trap_exit, true)",241],["# Process died after we tried to reload",49],["Process.monitor(channel)",54],["ref = Process.monitor(pid)",56],["Process.exit(pid, :kill)",59],["_ = Process.flag(:trap_exit, true)",66],["Process.flag(:trap_exit, true)",147]],"useCount":2160},{"word":"Project","context":[["Mix.Project.compile_path",20],["use Mix.Project",4287],["@version Mix.Project.config[:version]",62],["if Mix.Project.umbrella? do",54],["path = Mix.Project.config[:apps_path]",44],["Mix.Project.in_project(app, opts[:path], config, fn _ -> do_run(args) end)",20],["Mix.Project.get!",19],["use Mix.Project",32],["Mix.Project.in_project(:umbrella_check, umbrella, fn _ ->",43],["config = [build_path: Mix.Project.build_path]",19]],"useCount":4966},{"word":"PubSub","context":[["|> Module.concat(PubSub)",40],["adapter: Phoenix.PubSub.PG2]",577],["alias Phoenix.PubSub",48],["[name: :my_pubsub, adapter: Phoenix.PubSub.Redis,",39],["Phoenix.PubSub.subscribe(@pubsub_server, pid, topic, opts)",36],["alias Phoenix.PubSub.Local",29],["alias Phoenix.PubSub",28],["Raises `Phoenix.PubSub.BroadcastError` if broadcast fails.",28],["See `Phoenix.PubSub.subscribe/4` for options.",27],["Phoenix.PubSub.unsubscribe(@pubsub_server, pid, topic)",27]],"useCount":1567},{"word":"Query","context":[["import Ecto.Query, only: [from: 1, from: 2]",1336],["import RethinkDB.Query",25],["import Ecto.Query, only: [from: 2]",969],["import Ecto.Query",864],["import Ecto.Query",103],["require Ecto.Query",66],["%Query{",60],["## Query",31],["alias Ecto.Query.Builder",29],["alias Ecto.Query.JoinExpr",27]],"useCount":3761},{"word":"Repo","context":[["case Repo.insert(changeset) do",538],["user = Repo.insert! %User{}",263],["user = Repo.get!(User, id)",232],["|> Repo.one",135],["post = Repo.insert! %Post{}",126],["config :#{binding[:application_name]}, #{binding[:application_module]}.Repo,",120],["assert Repo.get_by(User, @valid_attrs)",113],["|> Repo.all",262],["|> Repo.insert!",275],["case Repo.update(changeset) do",465]],"useCount":7537},{"word":"Response","context":[["alias OpenAperture.ManagerApi.Response",41],["%HTTPoison.Response{ status_code: 200,",36],["Response.extract_identifier_from_location_header(response)",65],["{:ok, %HTTPoison.Response{status_code: 200, body: body}} ->",65],["assert Response.extract_identifier_from_location_header(response) == \"1\"",34],["Returns the OpenAperture.ManagerApi.Response struct.",120],["{:ok, %HTTPoison.Response{status_code: 404}} ->",33],["alias HTTPoison.Response",29],["|> Placid.Response.RenderingTest.Router.call([])",22],["%HTTPoison.Response{",18]],"useCount":698},{"word":"Return","context":[["## Return values",207],["# Return",287],["## Return Value",101],["Return a tuple of `{ user, project, count }`, or `:help` if help was given.",12],["## Return Values",698]],"useCount":1305},{"word":"Returns","context":[["Returns `default` if the key does not exist.",39],["Returns a previously set flash message or nil.",34],["Returns the router module as an atom, raises if unavailable.",34],["Returns the endpoint module as an atom, raises if unavailable.",34],["Returns the controller module as an atom, raises if unavailable.",34],["# Returns the list of dependencies in the format:",196],["## Returns",89],["Returns `{:ok, response}` if the request is successful, `{:error, reason}`",79],["Returns the endpoint configuration for `key`",41],["Returns the OpenAperture.ManagerApi.Response struct.",120]],"useCount":1248},{"word":"Rise","context":[["<para>The programs are documented fully by <citetitle>The Rise and",506],[".IR \"The Rise and Fall of a Fooish Bar\" ,",284]],"useCount":790},{"word":"Router","context":[["alias Phoenix.Router.Route",59],["use Maru.Router",113],["use Plug.Router",143],["defmodule Router do",149],["use Phoenix.Router",177],["use Phoenix.Router",755],["defmodule MyApp.Router do",110],["|> Sugar.RouterTest.Router.call([])",57],["use Plug.Router",94],["assert_raise Phoenix.Router.NoRouteError, fn ->",59]],"useCount":3281},{"word":"SECTION","context":[["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506],["<!ENTITY dhsection   \"<manvolnum>SECTION</manvolnum>\">",296],[".\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection",280],["<!ENTITY dhsection   \"SECTION\">",210]],"useCount":1292},{"word":"SEE","context":[[".SH SEE ALSO",280],["<title>SEE ALSO</title>",506]],"useCount":786},{"word":"SH","context":[[".SH NAME",286],[".SH AUTHOR",176],[".SH SEE ALSO",280],[".SH DESCRIPTION",281],[".SH OPTIONS",286],[".SH SYNOPSIS",286]],"useCount":1595},{"word":"SOAP","context":[["<SOAP-ENV:Body>",71],["</SOAP-ENV:Header>",71],["<SOAP-ENV:Header>",71],["</SOAP-ENV:Envelope>",71],["</SOAP-ENV:Body>",71],["\\t</SOAP-ENV:Body>",67],["\\t<SOAP-ENV:Body>",67],["\\t</SOAP-ENV:Header>",67],["\\t<SOAP-ENV:Header>",67],["</SOAP-ENV:Envelope>|",67]],"useCount":948},{"word":"SQL","context":[["pool: Ecto.Adapters.SQL.Sandbox",411],["assert SQL.all(query) ==",26],["~r/Ecto.Adapters.SQL.restart_test_transaction/",132],["Ecto.Adapters.SQL.rollback_test_transaction(TestRepo)",36],["# SQL spec, they are case insensitive unless quoted, which",34],["test: [database: \"db/#{app}_test.sqlite\", pool: Ecto.Adapters.SQL.Sandbox],",31],["test_begin: \"Ecto.Adapters.SQL.begin_test_transaction(#{module}.Repo)\",",30],["test_restart: \"Ecto.Adapters.SQL.restart_test_transaction(#{module}.Repo, [])\",",24],["Ecto.Adapters.SQL.begin_test_transaction(TestRepo)",24],["pool: Ecto.Adapters.SQL.Sandbox],",25]],"useCount":968},{"word":"SSL","context":[["|> Plug.SSL.init()",22],["# Check `Plug.SSL` for all available options in `force_ssl`.",427],["# ## SSL Support",571],["# To get SSL working, you will need to add the `https` key",531],["to https. It expects a list of options which are forwarded to `Plug.SSL`.",24],["Plug.SSL.call(conn, force_ssl)",22],["plug Plug.SSL,",19],["header checks and ensuring only SSL connections are allowed.",25],["Forces SSL in the socket connection.",25],["# To get SSL working, you will need to set:",38]],"useCount":1728},{"word":"SURNAME","context":[["<!ENTITY dhsurname   \"SURNAME\">",210],["<!ENTITY dhsurname   \"<surname>SURNAME</surname>\">",295],["<!-- Fill in your name for FIRSTNAME and SURNAME. -->",506]],"useCount":1011},{"word":"SYM","context":[["verb\tverb_aux\tSYM\tpnoun\tverb_aux;",410],["noun\tverb\tverb_aux\tSYM\tverb_aux;",701],["verb\tverb_aux\tverb_aux\tSYM\tverb_aux;",356],["noun\tverb\tSYM\tpnoun\tverb_aux;",295],["adjective\tverb\tverb_aux\tSYM\tverb_aux;",264],["cm\tnoun\tverb_aux\tSYM\tverb;",200],["cm\tverb\tverb_aux\tSYM\tverb_aux;",188],["noun\tverb\tSYM\tpn\tverb_aux;",168],["verb\tverb_aux\tSYM\tpn\tverb_aux;",236],["verb\tverb_aux\tSYM\tadjective\tverb_aux;",146]],"useCount":8252},{"word":"Schema","context":[["use Ecto.Integration.Schema",23],["use Ecto.Schema",140],["alias ExAdmin.Schema",27],["{:ok, result} = execute(StarWars.Schema.schema, query)",18],["schema = Schema.new(%{",19],["use Ecto.Schema",482],["alias GraphQL.Schema",19],["import Ecto.Schema",21],["__meta__: %Ecto.Schema.Metadata{",15],["id = Map.get(resource, Schema.primary_key(resource))",14]],"useCount":825},{"word":"Script","context":[["alias Dogma.Script",109],["script |> Script.walk( &check_node(&1, &2) )",60],["alias Dogma.Script",108],["# Site\t\tDirectory\t\tPattern\t\t\tVersion\tScript",18],["## Script name",16],["%Script{ source: \"defmodule App do\\n  @moduledoc false\\nend\\n\" },",16],["script |> Script.walk( &check_ast(&1, &2) )",16],["line: Dogma.Script.line(pos),",24],["# Script for populating the database. You can run it as:",380],["\"\"\" |> Script.parse!(\"\")",188]],"useCount":977},{"word":"See","context":[["See `text_input/3` for example and docs.",129],["# See `Phoenix.Token` documentation for examples in",430],["See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.",89],["See the [Gettext Docs](http://hexdocs.pm/gettext) for detailed usage.",206],["# See uscan(1) for format",258],["# See the documentation for `Mix` for more info on aliases.",350],["behaviour of <application>&dhpackage;</application>. See",420],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["your model tests. See `errors_on/2`'s definition as reference.",445]],"useCount":5036},{"word":"Server","context":[["LOGFILE=$LOGDIR/$NAME.log  # Server logfile",49],["\"Server internal error\"",384],["Phoenix.Channel.Server.broadcast_from!(@pubsub_server, from, topic, event, msg)",36],["Phoenix.Channel.Server.broadcast_from(@pubsub_server, from, topic, event, msg)",36],["Phoenix.Channel.Server.broadcast!(@pubsub_server, topic, event, msg)",36],["Phoenix.Channel.Server.broadcast(@pubsub_server, topic, event, msg)",36],["\"Server internal error - 500\"",59],["## Server Callbacks",60],["\"Server internal error\"",744],["%{errors: %{detail: \"Server internal error\"}}",37]],"useCount":2139},{"word":"Session","context":[["Session.url :test, \"http://localhost:8888/page_2.html\"",16],["plug Plug.Session,",19],["expected_status = %Session.Status{init_status |",23],["Session.url :cdtest, \"http://localhost:8888/page_1.html\"",52],["Session.url :test, \"http://localhost:8888/page_1.html\"",52],["Session.url :fftest, \"http://localhost:8888/page_1.html\"",60],["plug Plug.Session,",626],["Session.url :fftest, \"http://localhost:8888/page_2.html\"",16],["Session.url :cdtest, \"http://localhost:8888/page_2.html\"",14],["@session Plug.Session.init(",12]],"useCount":913},{"word":"Set","context":[["# Set the verbosity level",12],["# Set up initial scope",30],["# Set a higher stacktrace during development.",369],["# Set a higher stacktrace during development. Avoid configuring such",93],["# Set :encryption_salt if you would also like to encrypt it.",90],["# Set a higher stacktrace during test",62],["assert Set.equal?(",62],["# Set upgrade flag if this is an upgrade release",12],["# Set location header",28]],"useCount":758},{"word":"Show","context":[["<para>Show version of program.</para>",506],["Show version of program.",285],["<para>Show summary of options.</para>",506],["Show summary of options.",285],["assert html_response(conn, 200) =~ \"Show post\"",27],["assert file =~ ~S|assert html_response(conn, 200) =~ \"Show user\"|",18],["assert html_response(conn, 200) =~ \"Show user\"",49]],"useCount":1676},{"word":"Socket","context":[["alias Phoenix.Socket.Broadcast",80],["alias Phoenix.Socket",142],["alias Phoenix.Socket.Message",126],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["# Socket params are passed from the client and can",442],["{:stop, reason :: term, Socket.t} |",67],["{:noreply, Socket.t} |",110],["assert_receive %Phoenix.Socket.Broadcast{",91],["use Phoenix.Socket",509],["socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket",470]],"useCount":4323},{"word":"Spec","context":[["import Supervisor.Spec, warn: false",927],["import Supervisor.Spec",343]],"useCount":1270},{"word":"Specifies","context":[["# Specifies which paths to compile per environment.",407],["# Specifies your project dependencies",232],["# Specifies your project dependencies.",400],["# Specifies which paths to compile per environment",205]],"useCount":1244},{"word":"Start","context":[["# Start the supervision tree",11],["# Start the Ecto repository",452],["# Start with a clean slate",12],["# Should-Start:      $named",49],["# Required-Start:    $local_fs $network $remote_fs $syslog",58],["# Required-Start:    $network $local_fs",134],["# Start the process using the wrapper",49],["# Default-Start:     2 3 4 5",198],["# Start the endpoint when the application starts",549]],"useCount":1512},{"word":"String","context":[["|> String.downcase",149],["id: String.t,",51],["|> String.split(\"\\n\", trim: true)",55],["|> String.to_atom",106],["|> String.split(\"\\n\")",80],["|> Enum.map(&String.strip/1)",63],["|> String.strip",146],["|> String.split(\",\")",60],["|> String.split(\".\")",166],["secret_key_base: String.duplicate(\"abcdefgh\", 8),",51]],"useCount":4303},{"word":"Such","context":[["Such transformations are defined via plugs, as defined",30],["Such tests rely on `Phoenix.ChannelTest` and also",492],["controller or another process. Such can be done via your endpoint:",17],["Such tests rely on `Phoenix.ConnTest` and also",544]],"useCount":1083},{"word":"Supervisor","context":[["Supervisor.start_link(__MODULE__, [])",54],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["use Supervisor",709],["import Supervisor.Spec, warn: false",927],["import Supervisor.Spec",343],["use Supervisor.Behaviour",89],["Supervisor.start_link(__MODULE__, [], name: __MODULE__)",81],["# See http://elixir-lang.org/docs/stable/Supervisor.Behaviour.html",60],["Supervisor.start_link(__MODULE__, :ok)",60],["Supervisor.start_link(children, opts)",999]],"useCount":4460},{"word":"System","context":[["#            certfile: System.get_env(\"SOME_APP_SSL_CERT_PATH\")]",104],["System.halt(0)",105],["#            keyfile: System.get_env(\"SOME_APP_SSL_KEY_PATH\"),",104],["stacktrace = System.stacktrace",84],["url: System.get_env(\"DATABASE_URL\"),",110],["secret_key_base: System.get_env(\"SECRET_KEY_BASE\")",126],["if System.get_env(\"EXERCISM_TEST_EXAMPLES\") do",165],["if !System.get_env(\"EXERCISM_TEST_EXAMPLES\") do",228],["#               certfile: System.get_env(\"SOME_APP_SSL_CERT_PATH\")]",428],["#               keyfile: System.get_env(\"SOME_APP_SSL_KEY_PATH\"),",428]],"useCount":2880},{"word":"Task","context":[["use Mix.Task",666],["<tasks xsi:type=\"exercise:Task\">",141],["Mix.Task.clear",94],["Task.async(fn ->",77],["use Mix.Task",47],["|> Enum.map(&Task.await/1)",31],["Mix.Task.run \"ecto.migrate\", [\"--quiet\"]",218],["Mix.Task.run \"ecto.create\", [\"--quiet\"]",214],["brunch && Task.await(brunch, :infinity)",30],["mix    && Task.await(mix, :infinity)",30]],"useCount":1893},{"word":"Tasks","context":[["Mix.Tasks.Phoenix.New.run [\"valid\", \"--module\", \"not.valid\"]",32],["Mix.Tasks.Phoenix.New.run([project_path, \"--app\", @app_name, \"--module\", \"PhoteuxBlog\"])",31],["Mix.Tasks.Phoenix.New.run [\"valid\", \"--app\", \"mix\"]",30],["Mix.Tasks.Phoenix.New.run [\"valid\", \"--module\", \"String\"]",30],["Mix.Tasks.Phoenix.New.run([@app_name])",64],["defmodule Mix.Tasks.Phoenix.New do",44],["Mix.Tasks.Phoenix.New.run []",32],["defmodule Mix.Tasks.Phoenix.NewTest do",41],["Mix.Tasks.Phoenix.New.run [\"007invalid\"]",32],["Mix.Tasks.Phoenix.New.run [\"valid\", \"--app\", \"007invalid\"]",32]],"useCount":1309},{"word":"Test","context":[["defmodule Test do",61],["defdelegate put_req_cookie(conn, key, value), to: Plug.Test",22],["title: \"Test\",",44],["import Plug.Test",43],["|> Plug.Adapters.Test.Conn.conn(method, path, params_or_body)",22],["use Plug.Test",408],["# Test dependencies",65],["defmodule Test do",84],["expected = %{\"title\" => \"Test\",",87],["title: Test",399]],"useCount":1493},{"word":"TestRepo","context":[["%Comment{} = TestRepo.insert!(%Comment{post_id: pid1, author_id: uid2})",26],["p1 = TestRepo.insert!(%Post{title: \"1\"})",66],["p2 = TestRepo.insert!(%Post{title: \"2\"})",59],["alias Ecto.Integration.TestRepo",53],["|> TestRepo.insert()",52],["%Comment{} = TestRepo.insert!(%Comment{post_id: pid1, author_id: uid1})",52],["%Post{id: pid1} = TestRepo.insert!(%Post{title: \"1\"})",40],["Ecto.Adapters.SQL.rollback_test_transaction(TestRepo)",36],["TestRepo.transaction(fn() ->",36],["%Post{id: pid2} = TestRepo.insert!(%Post{title: \"2\"})",35]],"useCount":1113},{"word":"The","context":[[".IR \"The Rise and Fall of a Fooish Bar\" ,",284],["The docbook-to-man binary is found in the docbook-to-man package.",252],["The `options` option defines any extra HTTP options (optional).",242],["The programs are documented fully by",284],["<para>The programs are documented fully by <citetitle>The Rise and",506],["The `api` option defines the OpenAperture.ManagerApi used for connection.",242],["<para>The programs are documented fully by <citetitle>The Rise and",506],["The definitions below will be executed for every view,",556],["# The watchers configuration can be used to run external",570],["# The default endpoint for testing",1051]],"useCount":12307},{"word":"This","context":[["<para>This manual page was written by &dhusername; &dhemail; for",297],["# containing the digested version of static files. This",503],["# This file is responsible for configuring your application",1793],["This module defines the test case to be used by",1506],["<para>This manual page documents briefly the",507],["This can be used in your application as:",577],["<para>This manual page was written for the &debian; distribution",296],["# This configuration is loaded before any dependency and is restricted",1055],["# This configuration file is loaded before any dependency and",632],["# Import environment specific config. This must remain at the bottom",630]],"useCount":10925},{"word":"To","context":[["To authorize a socket in `join/3`, return `{:ok, socket}`.",24],["To push a message on join, send to self and handle in handle_info/2, ie:",23],["# To get SSL working, you will need to add the `https` key",531],["# To specify particular versions, regardless of the tag, do:",89],["# To depend on another app inside the umbrella:",88],["| Vicious Circle | Welcome To Shanktown | 2007 |",38],["# To get SSL working, you will need to set:",38],["on the request. To do so, you can pass the template name as an atom (without",36],["Channels can reply, synchronously, to any `handle_in/3` event. To match",25],["# To deny connection, return `:error`.",431]],"useCount":1491},{"word":"Transports","context":[["`Phoenix.Transports.Serializer`.",25],["transport :websocket, Phoenix.Transports.WebSocket",465],["## Transports",450],["# transport :longpoll, Phoenix.Transports.LongPoll",418],["transport :websocket, Phoenix.Transports.WebSocket,",49],["transport :longpoll, Phoenix.Transports.LongPoll",41],["transport :websocket, Phoenix.Transports.WebSocket,",29],["transport :longpoll, Phoenix.Transports.LongPoll,",27],["defmodule Phoenix.Transports.WebSocket do",22],["@behaviour Phoenix.Transports.Serializer",20]],"useCount":1815},{"word":"Type","context":[["# Type \"mix help deps\" for more examples and options.",27],["# Type `mix help deps` for examples and options",232],["# Type `mix help deps` for examples and options.",401],["# Type `mix help compile.app` for more information.",405],["# Type \"mix help deps\" for more examples and options",699],["# Type \"mix help compile.app\" for more information",749],["@behaviour Ecto.Type",80],["# Type `mix help compile.app` for more information",1061],["# Type `mix help deps` for more examples and options",755],["title: \"Type is wrong\"",28]],"useCount":4760},{"word":"URL","context":[["# Import URL helpers from the router",254],["# <Webpage URL> <string match>",252],["Generates the endpoint base URL without any path information.",39],["option to redirect to any URL.",36],["* `url(path)` - returns the URL for this endpoint with the given path",21],["Generates the endpoint base URL but as a `URI` struct.",26],["URL helpers.",26],["Generates the static URL without any path information.",37],["* `url()` - generates the endpoint base URL without any path information",20],["* `static_url()` - generates the static URL without any path information",20]],"useCount":851},{"word":"Uncomment","context":[["# Uncomment to find new files on GooglePages",214],["# Uncomment to find new files on sourceforge, for devscripts >= 2.9",210],["# Uncomment to find new files on sourceforge, for debscripts >= 2.9",39],["# Uncomment the lines below to enable the cookie session store",13],["# Uncomment to examine a Webserver directory",252],["# Uncomment to examine a Webpage",252]],"useCount":980},{"word":"Usage","context":[["echo \"Usage: $N {start|stop|force-stop|restart|force-reload|status}\" >&2",49],["# echo \"Usage: $N {start|stop|restart|reload|force-reload}\" >&2",78],["Usage:",102],["echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" >&2",143],["echo \"Usage: $N {start|stop|restart|force-reload|status|force-stop}\" >&2",48],["## Usage",181],["echo \"Usage: $N {start|stop|restart|force-reload}\" >&2",30],["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["Usage example:",21],["# Usage",11]],"useCount":806},{"word":"Use","context":[["# Use all HTML functionality (forms, tags, etc)",533],["<!-- Use the variablelist.term.separator and the",210],["pipe_through :browser # Use the default browser stack",498],["size: 1 # Use a single connection for transactional tests",34],["line. Use the <option>--verbose</option> option, to get more info.",210],["# Use Phoenix.HTML to import all HTML functions (forms, tags, etc)",59],["# Use this if you want the user to explicitly set 'RUN' in",49],["# Use this if the daemon cannot reload",49],["raise \"cannot render template #{inspect template} without format. Use an atom if the \" <>",36],["For security, `:to` only accepts paths. Use the `:external`",36]],"useCount":1856},{"word":"User","context":[["Given a User model that lists `:name` as a required field and validates",297],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328],["iex> changeset = User.changeset(%User{}, password: \"password\")",376],["iex> changeset = User.changeset(%User{}, password: \"password\")",376],["user = Repo.insert! %User{}",263],["user = Repo.get!(User, id)",232],["<!-- TITLE should be something like \"User commands\" or similar (see",210],["iex> errors_on(%User{}, %{password: \"password\"})",328],["changeset = User.changeset(%User{}, @valid_attrs)",142],["changeset = User.changeset(%User{}, @valid_attrs)",142]],"useCount":6458},{"word":"UserController","context":[["user_path  GET    /users           UserController.index/2",31],["defmodule MyApp.UserController do",174],["user_path  POST   /users           UserController.create/2",31],["user_path  GET    /users/new       UserController.new/2",31],["PUT    /users/:id       UserController.update/2",31],["will invoke the `show/2` action in the `MyApp.UserController`:",31],["user_path  GET    /users/:id/edit  UserController.edit/2",31],["assert file =~ \"defmodule Phoenix.UserController\"",33],["controller. For example, `MyApp.UserController` will render templates inside",36],["resources \"/users\", UserController",95]],"useCount":997},{"word":"Utils","context":[["alias ElixirScript.Translator.Utils",23],["case Plug.Conn.Utils.content_type(header) do",22],["import XAdmin.Utils",22],["update_in conn.script_name, &(&1 ++ unquote(Plug.Router.Utils.split(script_name)))",26],["namespaced?: Mix.Utils.camelize(app) != mod]",27],["{value, rest} = Parser.Utils.read_uint32(data)",23],["{value, rest} = Parser.Utils.read_uint16(data)",24],["mod = opts[:module] || Mix.Utils.camelize(app)",29],["import ExAdmin.Utils",68],["case Plug.Conn.Utils.media_type(h) do",37]],"useCount":797},{"word":"VERBOSE","context":[["0|1) [ \"$VERBOSE\" != no ] && log_end_msg 0 ;;",286],["# Load the VERBOSE setting and other rcS variables",143],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC \" \"$NAME\"",85],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC\" \"$NAME\"",58],["2) [ \"$VERBOSE\" != no ] && log_end_msg 1 ;;",286],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Stopping $DESC\" \"$NAME\"",143]],"useCount":1001},{"word":"Values","context":[["Values can be `mysql`, `mssql` or `sqlite`. Defaults to `postgres`",11],["## Return Values",698],["## Option Values",130],["Values are expected to be an Enumerable containing two-item tuples",25],["Values can be `postgres` `mysql`, `mssql`, `sqlite` or",16]],"useCount":880},{"word":"View","context":[["use Phoenix.View",23],["import Phoenix.View",24],["use Phoenix.View, root: \"web/templates\"",611],["use Phoenix.View, root: \"test/fixtures/templates\"",24],["use YourApp.View",24],["import Phoenix.View",501],["Phoenix.View.render(YourApp.UserView, \"index.html\", name: \"John Doe\")",66],["|> Kernel.<>(\"View\")",44],["Mix.Phoenix.check_module_name_availability!(binding[:module] <> \"View\")",32],["with `Phoenix.View.render/3` in the long term. The former expects",32]],"useCount":1741},{"word":"We","context":[["# We make no guarantees that this code is fit for any purpose.",122],["# We use :os.cmd/1 because there is a bug in OTP",38],["# We don't run a server during test. If one is required,",545],["# We also recommend setting `force_ssl`, ensuring no data is",426],["# We recommend using the bang functions (`insert!`, `update!`",373],["# call the Gettext module passing our Gettext backend. We",295],[";; We have to add this to the load-path:",144],["# We make no guarantees that this code is fit for any purpose.",135],["# We will politely say not.",43],["We are all set! Run your Phoenix application:",42]],"useCount":2534},{"word":"Web","context":[["use Vutuv.Web, :controller",38],["assert file =~ \"use Phoenix.Web, :view\"",82],["use MyApp.Web, :controller",77],["assert file =~ \"use Phoenix.Web, :model\"",69],["assert file =~ \"use Phoenix.Web, :controller\"",66],["use OpenAperture.Manager.Web, :controller",44],["use Vutuv.Web, :view",42],["use Pan.Web, :controller",41],["use Apiv4.Web, :controller",37],["use Apiv4.Web, :view",40]],"useCount":2400},{"word":"WebSocket","context":[["defmodule Phoenix.Transports.WebSocket do",22],["Phoenix includes a JavaScript client for WebSocket and Longpolling",25],["assert_receive %Message{event: \"new_msg\", payload: %{\"transport\" => \"Phoenix.Transports.WebSocket\", \"body\" => \"hi!\"}}",16],["transport :websocket_slow_clients, Phoenix.Transports.WebSocket,",15],["* `transport` - The socket's transport, for example: `Phoenix.Transports.WebSocket`",14],["See `Phoenix.Transports.WebSocket` for an example transport server implementation.",13],["transport :websocket, Phoenix.Transports.WebSocket",13],["transport :websocket, Phoenix.Transports.WebSocket,",29],["transport :websocket, Phoenix.Transports.WebSocket,",49],["transport :websocket, Phoenix.Transports.WebSocket",465]],"useCount":709},{"word":"When","context":[["# When encoded, the changeset returns its errors",88],["When used, dispatch to the appropriate controller/view/etc.",588],["files to watch. When these files change, it will trigger a reload.",29],["* `:log` - the level to log. When false, disables controller",29],["When the file exists, it includes a timestamp. When it doesn't exist,",30],["When the file exists, it includes a timestamp. When it doesn't exist,",30],["When used, the controller supports the following options:",31],["for static asset building. When choosing this",32],["`{:system, \"ENV_VAR\"}`. When given a tuple like `{:system, \"PORT\"}`,",39],["* `:log` - When false, does not log the query",47]],"useCount":1271},{"word":"You","context":[["# You will also need to set the application root to `.` in order",236],["body = \"<html><body>You are being <a href=\\\"#{html}\\\">redirected</a>.</body></html>\"",36],["You would then write your assertion like:",63],["You can also create the changeset manually and retrieve the errors",377],["You can configure it to whatever build tool or command you want:",39],["# Script for populating the database. You can run it as:",380],["You could then write your assertion like:",381],["# You should also configure the url host to something",527],["# You should set gzip to true if you are running phoenix.digest",545],["# You can configure for your application as:",858]],"useCount":3837},{"word":"_","context":[["def init(_) do",305],["_ ->",237],["{:error, _} ->",232],["_ -> false",221],["defmacro __using__(_) do",614],["defp elixirc_paths(_),     do: [\"lib\", \"web\"]",616],["_ ->",2758],["{:ok, _} ->",175],["def run(_) do",150],["_ -> nil",383]],"useCount":17760},{"word":"__DIR__","context":[["Code.require_file \"../test_helper.exs\", __DIR__",116],["cd: Path.expand(\"../\", __DIR__)]]",79],["embed_text :phoenix_png, from_file: Path.expand(\"../../priv/static/phoenix.png\", __DIR__)",39],["embed_text :phoenix_js, from_file: Path.expand(\"../../priv/static/phoenix.js\", __DIR__)",39],["@phoenix Path.expand(\"../..\", __DIR__)",40],["Code.require_file \"../../test_helper.exs\", __DIR__",41],["root = Path.expand(\"../templates\", __DIR__)",41],["Code.require_file \"../../../installer/test/mix_helper.exs\", __DIR__",67],["Code.require_file \"test_helper.exs\", __DIR__",178],["root: Path.dirname(__DIR__),",452]],"useCount":1449},{"word":"__MODULE__","context":[["@type t :: %__MODULE__{",431],[":supervisor.start_link(__MODULE__, [])",95],["alias __MODULE__",114],["Phoenix.Config.cache(__MODULE__,",107],["apply(__MODULE__, which, [])",600],["@type t :: %__MODULE__{}",156],["iex> import #{__MODULE__}",166],["@before_compile unquote(__MODULE__)",169],["%__MODULE__{",201],["import unquote(__MODULE__)",242]],"useCount":7093},{"word":"__using__","context":[["defmacro __using__(which) when is_atom(which) do",600],["defmacro __using__(_) do",42],["defmacro __using__([]) do",37],["defmacro __using__(_options) do",67],["defmacro __using__(_) do",614],["defmacro __using__(_opts) do",27],["defmacro __using__(_opts) do",352],["defmacro __using__(opts) do",322],["defmacro __using__(opts \\\\ []) do",35],["defmacro __using__(options) do",60]],"useCount":2210},{"word":"_args","context":[["resolve: fn (obj, _args, _info) ->",12],["def main(_args) do",15],["def init(_args) do",12],["def start_link(_args) do",17],["def __on_definition__(_env, _kind, _name, _args, _guards, _body) do",19],["resolve: fn(_obj, _args, _info) ->",12],["def init(_args) do",70],["def start(_type, _args) do",1397],["def run(_args) do",75]],"useCount":1629},{"word":"_assigns","context":[["def render(\"scripts.show.html\", _assigns) do",16],["def render(\"500.html\", _assigns) do",523],["def render(\"404.html\", _assigns) do",518],["def render(\"500.json\", _assigns) do",47],["def render(\"scripts.html\", _assigns) do",16],["def render(\"scripts.index.html\", _assigns) do",16],["def render(\"404.json\", _assigns) do",45]],"useCount":1181},{"word":"_opts","context":[["defmacro __using__(_opts \\\\ []) do",22],["defmacro __using__(_opts) do",352],["def call(conn, _opts) do",138],["def check_origin(%Plug.Conn{halted: true} = conn, _handler, _endpoint, _opts, _sender),",22],["def force_ssl(%Plug.Conn{halted: true} = conn, _socket, _endpoint, _opts) do",22],["def start_link(_opts \\\\ []) do",24],["defmacro __using__(_opts) do",27],[":meck.expect(OpenAperture.Manager.Plugs.Authentication, :authenticate_user, fn conn, _opts -> conn end)",30],["def fetch_flash(conn, _opts \\\\ []) do",34],["def init(_opts) do",47]],"useCount":925},{"word":"_params","context":[["def create(conn, _params) do",30],["def index(conn, _params) do",1239],["def connect(_params, socket) do",432],["def new(conn, _params) do",428],["def show(conn, _params) do",228],["def delete(conn, _params) do",57],["def unauthenticated(conn, _params) do",43],["def index(conn, _params, user) do",36],["def index(conn, _params), do: text(conn, \"index\")",26],["{:ok, part, subpart, _params} ->",22]],"useCount":2788},{"word":"_socket","context":[["def id(_socket), do: nil",447],["def handle_in(\"boom\", _message, _socket) do",36],["def terminate(_reason, _socket), do: :ok",23],["def connect(%{\"reject\" => \"true\"}, _socket) do",45],["def force_ssl(%Plug.Conn{halted: true} = conn, _socket, _endpoint, _opts) do",22],["defp handle_reply(_socket, _reply, _other) do",21],["defp handle_reply(_socket, reply, :handle_in) do",21],["def dispatch(%{ref: ref, topic: \"phoenix\", event: \"heartbeat\"}, _channels, _socket) do",17],["defp do_dispatch(channel_pid, msg, _socket) do",17],["def __on_definition__(env, :def, :handle_out, [event, _payload, _socket], _, _)",18]],"useCount":730},{"word":"_type","context":[["* `:permanent` - if `_type` terminates, all other applications and the entire",12],["def init(_type, req, []) do",11],["* `:transient` - if `_type` terminates with `:normal` reason, it is reported",12],["In case you want to automatically  load **and start** all of `_type`'s dependencies,",12],["returned, where `_type` is the name of the missing application.",12],["def start(_type, args) do",15],["def parse(conn, _type, _subtype, _headers, _opts) do",21],["def start(_type, _args) do",1397],["If the `_type` is not loaded, the application will first be loaded using `load/1`.",12],["* `:temporary` - if `_type` terminates, it is reported but no other",12]],"useCount":1527},{"word":"a","context":[["inside a transaction which is reset at the beginning",1502],["# Or configure a 3rd-party app:",857],["Creates a changeset based on the `model` and `params`.",651],["tests that require setting up a connection.",545],["# We don't run a server during test. If one is required,",545],["because the original program does not have a manual page.",524],["options is included below.  For a complete description, see the",507],["<para><command>&dhpackage;</command> is a program that...</para>",505],["# Finally, we also include the path to a manifest",503],["# Would allow you to broadcast a \"disconnect\" event and terminate",444]],"useCount":30323},{"word":"abort","context":[["#        * <new-postrm> `abort-install'",283],["abort-upgrade|abort-remove|abort-deconfigure)",268],["abort-upgrade|abort-remove|abort-deconfigure)",268],["abort-upgrade|abort-remove|abort-deconfigure)",268],["purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)",283],["#        * <new-postrm> `abort-install' <old-version>",283],["purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)",283],["#        * <new-postrm> `abort-upgrade' <old-version>",283],["#        * <old-preinst> `abort-upgrade' <new-version>",295],["abort-upgrade)",295]],"useCount":3949},{"word":"above","context":[["to help define plugs. In the example above, `fetch_session/2`",30],["# option to the \"reload\" entry above. If not, \"force-reload\" is",34],["The example above renders a template \"show.html\" from the `MyApp.UserView`",36],["In order for the example above to work, we need to do content negotiation with",36],["In the assertion above, we don't particularly care about",42],["#\toption to the \"reload\" entry above. If not, \"force-reload\" is",48],["# The above code will not work for interpreted scripts, use the next",69],["# If the above conditions are not satisfied then add some other code",143],["# of this file so it overrides the configuration defined above.",633],["routes included in the router above:",30]],"useCount":1369},{"word":"acc","context":[["Enum.reduce(param, %{}, fn({k, v}, acc) ->",33],["acc",48],["parse_header_accept(conn, t, [{-q, exts}|acc], accepted)",36],["Enum.reverse(acc)",38],["do: acc",54],["acc",501],["parse_header_accept(conn, t, acc, accepted)",36],["defp parse_header_accept(conn, [h|t], acc, accepted) do",36],["defp parse_header_accept(conn, [], acc, accepted) do",36],["Map.put(acc, k, scrub_param(v))",33]],"useCount":1614},{"word":"accepted","context":[["* the accepted list of arguments contains the \"html\" format",36],["\"expected one of #{inspect accepted}\"",44],["handle_header_accept(conn, get_req_header(conn, \"accept\"), accepted)",36],["defp handle_header_accept(conn, [header|_], accepted) do",36],["def accepts(conn, [_|_] = accepted) do",36],["handle_params_accept(conn, format, accepted)",36],["defp handle_params_accept(conn, format, accepted) do",36],["defp parse_header_accept(conn, [h|t], acc, accepted) do",36],["parse_header_accept(conn, t, acc, accepted)",36],["parse_header_accept(conn, String.split(header, \",\"), [], accepted)",36]],"useCount":881},{"word":"accepts","context":[["plug :accepts, ~w(html json)",40],["plug :accepts, [\"html\"]",601],["plug :accepts, [\"json\"]",549],["render_errors: [accepts: ~w(html json)],",349],["cowboy and accepts all options as defined by",76],["plug :accepts, ~w(html)",44],["plug :accepts, ~w(json)",39],["plug :accepts, [\"html\", \"json\"]",38],["accepts the layout name to be given as a string or as an atom. If a",37],["def accepts(conn, [_|_] = accepted) do",36]],"useCount":2843},{"word":"access","context":[["# And access this configuration in your application as:",857],["|> put_resp_header(\"access-control-allow-origin\", \"*\")",45],["* `config(key, default)` - access the endpoint configuration given by key",41],["on transports that, at some point, have access to a `Plug.Conn`.",25],["|> put_resp_header(\"access-control-max-age\", \"3600\")",20],["|> put_resp_header(\"access-control-allow-methods\", \"get, post, options\")",18],["headers = get_req_header(conn, \"access-control-request-headers\") |> Enum.join(\", \")",18],["and wanted quick access to the user for every action in your controller:",19],["assert get_resp_header(conn, \"access-control-allow-origin\") == [\"*\"]",20],["|> put_resp_header(\"access-control-allow-headers\", headers)",20]],"useCount":1202},{"word":"action","context":[["plug :action",300],["plug :scrub_params, \"user\" when action in [:create, :update]",64],["|> action",55],["plug :scrub_params, \"data\" when action in [:create, :update]",53],["plug Autox.AutoPaginatePlug when action in [:index]",51],["Returns the action name as an atom, raises if unavailable.",34],["An action is just a regular function that receives the connection",34],["plug :action",35],["specified by the current action with the given assigns.",36],["def action(conn, _) do",40]],"useCount":2032},{"word":"adapter","context":[["raise ArgumentError, \"an adapter was given to :pubsub but no :name was defined, \" <>",39],["* `--database` - specify the database adapter for ecto.",39],["* `:pubsub` - configuration for this endpoint's pubsub adapter.",40],["adapter: Ecto.Adapters.MySQL,",77],["use ExVCR.Mock, adapter: ExVCR.Adapter.Hackney",159],["adapter: Phoenix.PubSub.PG2]",577],["adapter: Ecto.Adapters.Postgres,",1153],["adapter: #{inspect binding[:adapter_module]}#{kw_to_config adapter_config[:dev]},",33],["(if var!(config)[:pubsub][:adapter] do",38],["[name: :my_pubsub, adapter: Phoenix.PubSub.Redis,",39]],"useCount":3214},{"word":"add","context":[["add :description, :string",68],["add :user_id, references(:users, on_delete: :nothing)",58],["add :name, :string, null: false",63],["add :description, :text",64],["add :title, :string",118],["add :email, :string",135],["# If the above conditions are not satisfied then add some other code",143],[";; We have to add this to the load-path:",144],["add :name, :string",368],["# To get SSL working, you will need to add the `https` key",531]],"useCount":3257},{"word":"address","context":[["%{name: user.name, address: user.address}",22],["address = AuthorizeNet.Address.new(",11],["[head|tail] = address",16],["%{name: user.name, address: user.address}",22],["</address>",507],["<address>",507],["get_city(address, backup, city, true)",12],["address",11],["detail, data, address, temp, volt, dio, aio0, aio1, hw, fw), _ctx)",11]],"useCount":1119},{"word":"adjective","context":[["pnoun\tcm\tnoun\tcm\tadjective;",110],["adjective\tnoun\tnoun\tcm\tcm;",104],["adjective\tverb\tSYM\tpnoun\tverb_aux;",97],["noun\tverb\tSYM\tadjective\tverb_aux;",94],["cm\tadjective\tverb_aux\tverb_aux\tverb;",92],["noun\tadjective\tverb_aux\tverb_aux\tverb;",88],["noun\tcm\tnoun\tcm\tadjective;",111],["adjective\tnoun\tnoun\tverb\tcm;",112],["verb\tverb_aux\tSYM\tadjective\tverb_aux;",146],["adjective\tverb\tverb_aux\tSYM\tverb_aux;",264]],"useCount":5466},{"word":"admin","context":[["{@admin, @domain,",64],["@tag authenticated: :admin",44],["socket \"/ws/admin\", UserSocket",32],["socket \"/ws/admin\", MyApp.AdminUserSocket",32],["user = build(:user, admin: true)",31],["<option value=\"admin\">Admin</option>",30],["test \"returns true when user is an admin\" do",29],["assert_file \"web/controllers/admin/user_controller.ex\", fn file ->",26],["@tag admin: true",26],["assert message =~ ~s(resources \"/admin/users\", Admin.UserController)",26]],"useCount":1131},{"word":"affect","context":[["affect anything (the error is caught) but the failure will be logged. Note",15],["# file won't be loaded nor affect the parent project.",25],["# file won't be loaded nor affect the parent project. For this reason,",1055]],"useCount":1095},{"word":"after","context":[["after",1063],["# for the new static assets to be served after a hot upgrade:",236],["# which you typically run after static files are built.",503],["after",621],["right after outputting the requested information. -->",210],["# Process died after we tried to reload",49],["# NOTE: Some servers might die some time after they start,",49],["after 1000 ->",58],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143],["variablelist.term.break.after parameters to",210]],"useCount":3606},{"word":"aid","context":[["The function `on_exit_message/2` should aid with that.",19],["# and its dependencies with the aid of the Mix.Config module.",1768]],"useCount":1787},{"word":"alias","context":[["alias Plug.Conn",140],["alias Phoenix.Socket.Message",126],["alias Dogma.Error",123],["alias OpenAperture.ManagerApi",116],["alias __MODULE__",114],["alias Dogma.Script",109],["alias Dogma.Script",108],["# and leave 'force-reload' as an alias for 'restart'.",143],["alias Phoenix.Socket",142],["# 'force-reload' alias",143]],"useCount":8520},{"word":"aliases","context":[["# See the documentation for `Mix` for more info on aliases.",350],["aliases: aliases,",316],["aliases: aliases,",316],["aliases: aliases(),",95],["defp aliases do",431],["on imports, uses and aliases.",556],["aliases: aliases(),",95],["# add some aliases",32],["# This block is expanded within all views for aliases, imports, etc",24],["mostly focused on imports, uses and aliases.",21]],"useCount":2327},{"word":"all","context":[["# Use all HTML functionality (forms, tags, etc)",533],["# that waits for the process to drop all resources that could be",143],["|> Repo.all",262],[".\\\" First parameter, NAME, should be all caps",280],["test \"lists all entries on index\", %{conn: conn} do",422],["# Check `Plug.SSL` for all available options in `force_ssl`.",427],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["# the socket that will be set for all channels, ie",442],["# all active sockets and channels for a given user:",444],["# to start the server for all endpoints:",549]],"useCount":6380},{"word":"allow","context":[["Most use-cases will use the \"topic:*\" pattern to allow more versatile topic",24],["# Would allow you to broadcast a \"disconnect\" event and terminate",444],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["|> put_resp_header(\"access-control-allow-origin\", \"*\")",45],["# Use put_new to allow custom dispatches",16],["assert :acl.access_matches(rules, %{usr: {\"user1\", \"server1\", \"res1\"}}, :global) == :allow",12],["Channels allow you to route pubsub events to channel handlers in your application.",12],["|> put_resp_header(\"access-control-allow-methods\", \"get, post, options\")",18],["assert get_resp_header(conn, \"access-control-allow-origin\") == [\"*\"]",20],["|> put_resp_header(\"access-control-allow-headers\", headers)",20]],"useCount":1083},{"word":"allowed","context":[["allowed: see man(7), man(1) and",210],["allowed: see man(7), man(1). -->",296],[".\\\" other parameters are allowed: see man(7), man(1)",280],["Only alphanumeric characters and underscore are allowed in the",28],["Checks the origin request header against the list of allowed origins.",25],["header checks and ensuring only SSL connections are allowed.",25],["If the origin header matches the allowed origins, no origin header was",25],["allowed origins",23],["are allowed:",22],["The allowed values are:",22]],"useCount":1108},{"word":"already","context":[["Raises `Plug.Conn.AlreadySentError` if the conn was already sent.",155],["#   1 if daemon was already running",143],["assert_raise Mix.Error, ~r\"Module name \\w+ is already taken\", fn ->",105],["Mix.raise \"Module name #{inspect name} is already taken, please choose another name\"",55],["log_progress_msg \"apparently already running\"",49],["#   1 if daemon was already stopped",143],["Raises a `Plug.Conn.AlreadySentError` if the connection has already been",35],["#   daemon isn't already running.",35],["# daemon isn't already running.",30],["test \"name is already defined\" do",39]],"useCount":1018},{"word":"also","context":[["Alternatively use the xmlto command/package. That will also automatically",210],["# You will also need to set the application root to `.` in order",236],["# also use the \"errors\" domain as translations are placed",295],["You can also create the changeset manually and retrieve the errors",377],["# We also recommend setting `force_ssl`, ensuring no data is",426],["Such tests rely on `Phoenix.ChannelTest` and also",492],["# Finally, we also include the path to a manifest",503],["# You should also configure the url host to something",527],["Such tests rely on `Phoenix.ConnTest` and also",544],["# It is also possible to import configuration files, relative to this",1035]],"useCount":6252},{"word":"always","context":[["* `:force_ssl` - ensures no data is ever sent via http, always redirecting",31],["The second plug will always run, except for the index action.",12],["templates, `@inner` will be always marked as safe.",14],["# ever sent via http, always redirecting to https:",426],["The callback must return a changeset and always runs inside",12],["# it to always work (and if it does not, it will raise).",382],["On the other hand, close is always sync and it will",14],["Note that it is always possible to stop an application explicitly by calling",13],["#   # it to always work (and if it does not, it will raise).",13],["sgml-always-quote-attributes:t",257]],"useCount":1196},{"word":"an","context":[["If no params are provided, an invalid changeset is returned",587],["generator, an endpoint was automatically generated as",41],["# Where those two env variables return an absolute path to",427],["Translates an error message using gettext.",290],["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["# and leave 'force-reload' as an alias for 'restart'.",143],["The `params` option defines an array of arguments.",112],["If `params` are nil, an invalid changeset is returned",60],["Overall, an endpoint has three responsibilities:",41],["Process this file with an XSLT processor: `xsltproc \\",40]],"useCount":4690},{"word":"and","context":[["to build and query models.",1037],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["# This configuration is loaded before any dependency and is restricted",1055],["# and its dependencies with the aid of the Mix.Config module.",1768],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["# for other strategies and supported options",818],["# Type `mix help deps` for more examples and options",755],["# Type \"mix help deps\" for more examples and options",699],["Creates a changeset based on the `model` and `params`.",651],["# This configuration file is loaded before any dependency and",632]],"useCount":40572},{"word":"another","context":[["\"//another.com:888\", \"//other.com\"]",22],["controller or another process. Such can be done via your endpoint:",17],["another layer that requires a connection for processing.",22],["Mix.raise \"Module name #{inspect name} is already taken, please choose another name\"",55],["# To depend on another app inside the umbrella:",88],["# to this project. If another project depends on this project, this",1080],["Note, however, that we don't advise forwarding to another",17],["process and do the clean up from another process.  Similar to GenServer,",16],["another process and reply when finished by generating a reference to the push",13]],"useCount":1330},{"word":"any","context":[["Generates the endpoint base URL without any path information.",39],["# This configuration is loaded before any dependency and is restricted",1055],["# For development, we disable any cache and enable",572],["test \"render any other\" do",488],["# Inside the script, you can read and write to any of your",373],["The `options` option defines any extra HTTP options (optional).",242],["# We make no guarantees that this code is fit for any purpose.",135],["# We make no guarantees that this code is fit for any purpose.",122],["of the generated resource followed by any number of attributes:",62],["# This configuration file is loaded before any dependency and",632]],"useCount":5139},{"word":"api","context":[["#   pipe_through :api",363],["pipe_through :api",306],["The `api` option defines the OpenAperture.ManagerApi used for connection.",242],["path: [\"api\", @command],",33],["\"/api\" <> path",32],["\"https://example.com/api/posts/5\"",32],["\"https://example.com/api/\"",32],["scope \"/api/v1\", as: :api_v1, alias: API.V1 do",30],["scope \"/api/v1\", as: :api_v1 do",29],["pipeline :api do",635]],"useCount":2449},{"word":"app","context":[["# Type `mix help compile.app` for more information",1061],["# Or configure a 3rd-party app:",857],["# Type \"mix help compile.app\" for more information",749],["# Type `mix help compile.app` for more information.",405],["# To depend on another app inside the umbrella:",88],["[app: :phoenix,",47],["from the path, unless `--module` or `--app` is given.",44],["run(app, mod, path, opts)",43],["def run(app, mod, path, opts) do",43],["app = opts[:app] || Path.basename(Path.expand(path))",43]],"useCount":6254},{"word":"application","context":[["# This file is responsible for configuring your application",1793],["# Start the endpoint when the application starts",549],["# You can configure for your application as:",858],["# if you want to provide default values for your application for",858],["# And access this configuration in your application as:",857],["This can be used in your application as:",577],["# watchers to your application. For example, we use it",570],["# whenever the application is updated.",569],["# Configuration for the OTP application",2109],["def application do",3944]],"useCount":19130},{"word":"applications","context":[["[applications: [:logger]]",969],["applications: [:phoenix, :phoenix_html, :cowboy, :logger,",174],["[applications: []]",169],["[applications: [:logger],",153],["applications: [",134],["applications: [:phoenix, :phoenix_html, :cowboy, :logger, :gettext,",121],["[applications: [:logger, :httpoison]]",119],["applications: [:phoenix, :phoenix_pubsub, :phoenix_html, :cowboy, :logger, :gettext,",60],["applications: [:plug, :poison, :logger, :eex],",43],["applications: [:logger],",39]],"useCount":2630},{"word":"apply","context":[["case apply(m, f, a) do",18],["apply(__MODULE__, which, [])",600],["apply(__MODULE__, action_name(conn), [conn,",19],["Using a given stripe key to apply against the account associated.",15],["apply(__MODULE__, action, [conn, conn.params])",15],["Returns the HTML5 validations that would apply to",14],["@spec apply(Ecto.Queryable.t, term) :: Ecto.Query.t",13],["apply(mod, fun, args)",12],["apply(resource.__struct__, :display_name, [resource])",11]],"useCount":717},{"word":"are","context":[["If no params are provided, an invalid changeset is returned",587],["# which you typically run after static files are built.",503],["# If you are doing OTP releases, you need to instruct Phoenix",549],["# You should set gzip to true if you are running phoenix.digest",545],["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506],["<para>The programs are documented fully by <citetitle>The Rise and",506],["# Socket params are passed from the client and can",442],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["\"Here are the strings to translate\",",297],["# also use the \"errors\" domain as translations are placed",295]],"useCount":9706},{"word":"arg","context":[["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg><option>--example <replaceable>that</replaceable></option></arg>",295],["<arg><option>-e <replaceable>this</replaceable></option></arg>",295],["<arg><option>-e <replaceable>this</replaceable></option></arg>",295],["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg choice=\"plain\">",420],["<arg choice=\"plain\"><option>--example</option></arg>",420],["<arg choice=\"opt\">",420],["<arg choice=\"plain\"><option>--example</option></arg>",420],["</arg>",840]],"useCount":8065},{"word":"args","context":[["args: %{",61],["def run(args) do",379],["defp parse_args(args) do",46],["defp validate_args!([_, plural | _] = args) do",54],["def init(args) do",65],["def start_link(args) do",44],["case args do",70],["job = %Verk.Job{class: \"Class\", args: []}",44],["args",130],["def main(args) do",97]],"useCount":2516},{"word":"argument","context":[["The `channel` macro accepts topic patterns in two flavors. A splat argument",24],["echo \"preinst called with unknown argument \\`$1'\" >&2",295],["echo \"prerm called with unknown argument \\`$1'\" >&2",291],["echo \"postrm called with unknown argument \\`$1'\" >&2",283],["echo \"postinst called with unknown argument \\`$1'\" >&2",267],["It expects the path of the project as argument.",44],["The first argument is the module name followed by",39],["raise ArgumentError, \"static_path/2 expects a path starting with / as argument\"",32],["One can also pass a router explicitly as an argument to the task:",30],["assert function.(argument)   == expected_from_function",24]],"useCount":1786},{"word":"as","context":[["your model tests. See `errors_on/2`'s definition as reference.",445],["# template is found, let's render it as 500",532],["# Do not configure such in production as keeping",368],["# Here you could define other workers and supervisors as children",443],["# Script for populating the database. You can run it as:",380],["This can be used in your application as:",577],["# And access this configuration in your application as:",857],["# You can configure for your application as:",858],["of the test unless the test case is marked as async.",1504],["# and so on) as they will fail if something goes wrong.",371]],"useCount":13004},{"word":"assert","context":[["assert [] == errors",258],["assert conn.status == 200",1025],["assert 1 + 1 == 2",918],["assert changeset.valid?",865],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328],["assert conn.status == 404",326],["assert json_response(conn, 422)[\"errors\"] != %{}",306],["assert html_response(conn, 200) =~ \"Welcome to Phoenix!\"",301],["assert result == expected",248],["assert conn.state == :sent",213]],"useCount":33408},{"word":"assert_file","context":[["assert_file \"custom_path/test/support/model_case.ex\",",44],["assert_file migration, fn file ->",107],["assert_file \"photo_blog/priv/static/images/phoenix.png\"",36],["assert_file \"web/controllers/user_controller.ex\", fn file ->",37],["assert_file \"photo_blog/mix.exs\", fn file ->",38],["assert_file \"test/controllers/user_controller_test.exs\", fn file ->",39],["assert_file \"photo_blog/mix.exs\", fn(file) ->",39],["assert_file \"web/views/user_view.ex\", fn file ->",43],["assert_file \"custom_path/test/support/channel_case.ex\",",44],["assert_file \"custom_path/test/support/conn_case.ex\",",44]],"useCount":3012},{"word":"assert_raise","context":[["assert_raise RuntimeError, message, fn ->",62],["assert_raise Mix.Error, fn ->",196],["assert_raise RuntimeError,",175],["assert_raise Ecto.NoResultsError, fn ->",168],["assert_raise Mix.Error, ~r\"Module name \\w+ is already taken\", fn ->",105],["assert_raise FunctionClauseError, fn ->",90],["assert_raise Plug.Conn.AlreadySentError, fn ->",78],["assert_raise Mix.Error, ~r\"Application name must start with a letter and \", fn ->",74],["assert_raise RuntimeError, fn ->",74],["assert_raise ArgumentError, fn ->",290]],"useCount":2219},{"word":"assert_receive","context":[["assert_receive %Message{event: \"phx_reply\",",52],["assert_receive {:EXIT, ^pid, :shutdown}",47],["assert_receive {:terminate, :shutdown}",44],["assert_receive %Message{event: \"joined\"}",39],["assert_receive {:connect, 1}",38],["assert_receive {:on_event, _event}",37],["assert_receive %Phoenix.Socket.Broadcast{",91],["assert_receive %Message{event: \"phx_reply\", ref: \"1\", payload: %{\"response\" => %{}, \"status\" => \"ok\"}}",36],["assert_receive %{channel: ^channel,",36],["assert_receive %Message{event: \"phx_reply\", payload: %{\"response\" => %{\"reason\" => \"unmatched topic\"}}}",32]],"useCount":1320},{"word":"assign","context":[["|> assign(:current_user, user)",28],["socket(\"user_id\", %{some: :assign})",27],["assign(conn, :current_user, user)",27],["def render_to_iodata(module, template, assign) do",23],["render(module, template, assign) |> encode(template)",23],["def render_to_string(module, template, assign) do",22],["def assign(socket = %Socket{}, key, value) do",22],["render_to_iodata(module, template, assign) |> IO.iodata_to_binary",22],["{:ok, assign(socket, :user_id, params[\"user_id\"])}",45],["#     {:ok, assign(socket, :user_id, verified_user_id)}",443]],"useCount":970},{"word":"assigns","context":[["defp to_map(assigns) when is_list(assigns), do: :maps.from_list(assigns)",55],["defp to_map(assigns) when is_map(assigns), do: assigns",55],["assigns = to_map(assigns)",87],["# verification, you can put default assigns into",442],["#     def id(socket), do: \"users_socket:#{socket.assigns.user_id}\"",444],["def template_not_found(_template, assigns) do",522],["render \"500.html\", assigns",527],["defp to_map(assigns) when is_map(assigns), do: assigns",55],["defp to_map(assigns) when is_map(assigns), do: assigns",55],["assigns = to_map(assigns)",87]],"useCount":4992},{"word":"ast","context":[["def run(%SourceFile{ast: ast} = source_file, params \\\\ []) do",22],["{ast, issues}",121],["ast",101],["|> result(ast)",45],["{:ok, ast} = \"\"\"",41],["{ast, errors}",39],["defp traverse(ast, issues, _issue_meta) do",26],["ast =",24],["def run(%SourceFile{ast: ast} = source_file, params \\\\ []) do",22],["map = for {key, value} <- ast, into: %{} do",21]],"useCount":1003},{"word":"async","context":[["use CodeCorps.ConnCase, async: true",25],["it cannot be async. For this reason, every test runs",1504],["of the test unless the test case is marked as async.",1504],["unless tags[:async] do",1343],["use ExUnit.Case, async: false",765],["Task.async(fn ->",77],["use ExSpec, async: true",47],["use ExUnit.Case, async: true",45],["Task.async fn ->",15],["use ExUnit.Case, async: true",3311]],"useCount":8797},{"word":"at","context":[["inside a transaction which is reset at the beginning",1502],[";; Originally contributed by Nils Naumann <naumann@unileoben.ac.at>",144],["|> Enum.at(0)",129],["# Check if the process is running looking at /proc",97],["|> Enum.at(0)",62],["at <ulink url=\"http://bugzilla.foo.tld\"/>.</para>",210],["<!-- Keep this comment at the end of the file",257],["# For example, to create, migrate and run the seeds file at once:",350],["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["# Import environment specific config. This must remain at the bottom",630]],"useCount":5051},{"word":"atom","context":[["@spec put_view(Plug.Conn.t, atom) :: Plug.Conn.t",36],["@spec action_name(Plug.Conn.t) :: atom",36],["@spec controller_module(Plug.Conn.t) :: atom",36],["raise \"cannot render template #{inspect template} without format. Use an atom if the \" <>",36],["@spec view_module(Plug.Conn.t) :: atom",36],["false    -> raise \"cannot use put_layout/2 with atom/binary when layout is false, use a tuple instead\"",37],["string, it must contain the format. Passing an atom means the layout",37],["by `form_for` or an atom.",39],["datatype: :atom,",52],["accepts the layout name to be given as a string or as an atom. If a",37]],"useCount":1917},{"word":"attributes","context":[["information on attributes and namespaced resources.",33],["test \"changeset with valid attributes\" do",673],["test \"changeset with invalid attributes\" do",671],["sgml-minimize-attributes:nil",257],["sgml-always-quote-attributes:t",257],["\"attributes\" => %{",75],["of the generated resource followed by any number of attributes:",62],["attributes: %{",34],["attributes",32],["\"attributes\": {",21]],"useCount":2253},{"word":"attrs","context":[["changeset = User.changeset(%User{}, attrs)",26],["attrs",30],["attrs: [",31],["Enum.into attrs, %{}, fn",56],["attrs   = Mix.Phoenix.attrs(attrs)",39],["attrs   = Mix.Phoenix.attrs(attrs)",39],["attrs   = Mix.Phoenix.attrs(attrs)",39],["changeset = Post.changeset(%Post{}, attrs)",46],["def handle_in(\"create:post\", attrs, socket) do",46],["[singular, plural | attrs] = validate_args!(parsed)",54]],"useCount":849},{"word":"author","context":[["</author>",494],["<author>",494],["assert c3.author.id == uid2",19],["assert c1.author.id == uid1",19],["add :author, :string",17],["@author \"mremond@process-one.net\"",15],["field :author, :string",15],["@author \"jsautret@process-one.net\"",26]],"useCount":1099},{"word":"automatically","context":[["automatically generated in your endpoint. Here is a summary of all the",40],["generator, an endpoint was automatically generated as",41],["# We could use Mix.shell.cmd/1 but that automatically",38],["# dh_installdeb will replace this with shell code automatically",1136],["Alternatively use the xmlto command/package. That will also automatically",210],["Notes for using docbook2x: docbook2x-man does not automatically create the",210],["functions that are automatically defined in your endpoint.",40],["Phoenix automatically generates a module `Helpers` inside your router",30],["task automatically sets this to `true`.",40],["\"priv/static/manifest.json\" which is the file automatically generated",38]],"useCount":2157},{"word":"available","context":[["The default value is extracted from the model if a model is available",33],["Performs content negotiation based on the available formats.",33],["# the static_url configuration. If one is not available,",35],["# Include defaults if available",49],["# Functions defined here are available to all other views/templates",63],["# Check `Plug.SSL` for all available options in `force_ssl`.",427],["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210],["# Dependencies listed here are available only for this project",38],["available via the Info system.",284],["Fall of a Fooish Bar</citetitle> available via the",296]],"useCount":1734},{"word":"b","context":[[".\\\" .ad b      justify to both left and right margins",280],["Date: <%= b.(:day, []) %> / <%= b.(:month, []) %> / <%= b.(:hour, []) %>",24],["Date: <%= b.(:day, []) %> / <%= b.(:month, []) %> / <%= b.(:hour, []) %>",24],["b",42],["assert Minesweeper.annotate(clean(b)) == b",35],["Date: <%= b.(:day, []) %> / <%= b.(:month, []) %> / <%= b.(:hour, []) %>",24],["b = quote do",29],["Time: <%= b.(:hour, []) %> : <%= b.(:min, []) %>",24],["assert_expands_to a, b, __ENV__",29],["assert Minesweeper.annotate(clean(b)) == b",35]],"useCount":1134},{"word":"bang","context":[["# We recommend using the bang functions (`insert!`, `update!`",373],["#   # Here we use delete! (with a bang) because we expect",13],["# Here we use delete! (with a bang) because we expect",380]],"useCount":766},{"word":"bar","context":[["|> json(%{foo: \"bar\"})",36],["assert conn.resp_body == ~s({\"foo\":\"bar\"})",40],["bar",40],["\"bar\"",43],["<refentrytitle>bar</refentrytitle>",210],[".BR bar (1),",279],["<para>bar (1), baz (1).</para>",296],["assert conn.resp_body == \"{\\\"foo\\\":\\\"bar\\\"}\"",81],[".B bar",569],["<command>&dhpackage;</command> and <command>bar</command>",505]],"useCount":3373},{"word":"base","context":[["# Depend on lsb-base (>= 3.2-14) to ensure that this file is present",58],["base: \"Phoenix\",",37],["Generates the endpoint base URL without any path information.",39],["the layout view. By default it uses the base alias",31],["Generates the endpoint base URL but as a `URI` struct.",26],["use <%= base %>.ConnCase",30],["base to the same controller. For example:",27],["* `:secret_key_base` - a secret key used as a base to generate secrets",40],["* `--module` - the name of the base module in",43],["# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.",85]],"useCount":734},{"word":"based","context":[["Builds a changeset based on the `struct` and `params`.",169],["\"template format is meant to be set dynamically based on the request format\"",36],["Helpers are automatically generated based on the controller name.",30],["Renders the given `template` and `assigns` based on the `conn` information.",36],["Performs content negotiation based on the available formats.",33],["negotiation based on the request information. If the client",33],["to do content negotiation and render templates based on",32],["A module providing Internationalization with a gettext-based API.",296],["# Domain-based translation",297],["Creates a changeset based on the `model` and `params`.",651]],"useCount":1861},{"word":"baz","context":[["conn = conn(:get, \"/?foo[bar]=++&foo[baz]=&foo[bat]=ok\")",17],["assert conn.params[\"baz\"] == \"\"",17],["conn = conn(:get, \"/?foo=bar&baz=\")",17],["assert conn.params[\"foo\"] == %{\"bar\" => nil, \"baz\" => nil, \"bat\" => \"ok\"}",17],["<refentrytitle>baz</refentrytitle>",210],["<para>bar (1), baz (1).</para>",296],[".BR baz (1).",279],["conn = accepts with_accept(\"foo/bar, bar baz, application/json\"), ~w(html json)",20],["assert conn.params[\"foo\"] == %{\"bar\" => %{\"baz\" => nil}}",17],["conn = conn(:get, \"/?foo[bar][baz]=\")",17]],"useCount":1015},{"word":"be","context":[["This module defines the test case to be used by",1506],["# Dependencies can be Hex packages:",1439],["# summary of how this script can be called:",1135],["it cannot be async. For this reason, every test runs",1504],["# file won't be loaded nor affect the parent project. For this reason,",1055],["The definitions below will be executed for every view,",556],["# Code reloading can be explicitly enabled under the",569],["# The watchers configuration can be used to run external",570],["This can be used in your application as:",577],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857]],"useCount":21762},{"word":"because","context":[["# Here we use delete! (with a bang) because we expect",380],["# We lowercase the database name because according to the",34],["# We use :os.cmd/1 because there is a bug in OTP",38],["raise \"cannot render template #{inspect template} because conn.params[\\\"_format\\\"] is not set. \" <>",22],["`{:shutdown, :left}`. Similarly, if we are terminating because the",22],["template is safe and that we don't need to escape its contents because",22],["If we are terminating because the client left, the reason will be",22],["When a resource needs to be looked up without referencing an ID, because",21],["because the original program does not have a manual page.",524],["# But before we check for */* because if one exists and we serve html,",36]],"useCount":1235},{"word":"before","context":[["before do",77],["# But before we check for */* because if one exists and we serve html,",36],["`Phoenix.Socket.Message` before being forwarded to a channel.",25],["before action",28],["# to set PORT=80 before running your server.",527],["# This configuration file is loaded before any dependency and",632],["# This configuration is loaded before any dependency and is restricted",1055],["# Note this file is loaded before any dependency and is restricted",25],["the accepts plug before rendering. You can do so by adding the following to your",36],["Should be called by transports before connecting when appropriate.",25]],"useCount":2850},{"word":"beginning","context":[["inside a transaction which is reset at the beginning",1502]],"useCount":1502},{"word":"behaviour","context":[["@behaviour Plug",256],["@behaviour Ecto.Type",80],["@behaviour Guardian.Serializer",49],["@behaviour unquote(__MODULE__)",84],["@behaviour :cowboy_websocket_handler",41],["@behaviour Dogma.Rule",112],["to support rendering, and other Phoenix specific behaviour",36],["behaviour of <application>&dhpackage;</application>. See",420],["@behaviour Phoenix.Socket.Transport",26],["@behaviour Geonames.Endpoint",37]],"useCount":1563},{"word":"below","context":[["below.",563],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["when the server is enabled. For example, the watcher below will run",39],["# six lines below instead (Ref: #643337, start-stop-daemon(8) )",69],["</citerefentry> format; see below.</para>",210],["A summary of options is included below.",279],["<application>Info</application> format; see below.</para>",296],["options is included below.  For a complete description, see the",507],["# you can enable the server option below.",545],["The definitions below will be executed for every view,",556]],"useCount":4279},{"word":"bin","context":[["#!/bin/sh",1252],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["PATH=/sbin:/usr/sbin:/bin:/usr/bin",143],["PATH=/sbin:/usr/sbin:/bin:/usr/bin",143],["#! /bin/sh -e",144],["#!/bin/sh -e",144],["#! /bin/sh",170],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\"]]",246]],"useCount":3166},{"word":"binary","context":[[":jsx.decode(binary)",31],["datatype: :binary,",115],["def decode(binary) do",32],["defp flash_key(binary) when is_binary(binary), do: binary",33],["defp flash_key(binary) when is_binary(binary), do: binary",33],["defp flash_key(binary) when is_binary(binary), do: binary",33],["The xsltproc binary is found in the xsltproc package.  The",40],["The xsltproc binary is found in the xsltproc package. The XSL files are in",210],["The docbook-to-man binary is found in the docbook-to-man package.",252],["false    -> raise \"cannot use put_layout/2 with atom/binary when layout is false, use a tuple instead\"",37]],"useCount":2301},{"word":"binary_id","context":[["assert file =~ ~r/@primary_key {:id, :binary_id, autogenerate: true}/",34],["@foreign_key_type :binary_id",38],["assert file =~ ~r/@foreign_key_type :binary_id/",34],["add :id, :binary_id, primary_key: true",20],["binary_id: :boolean, html: :boolean]",21],["assert file =~ \"add :id, :binary_id, primary_key: true\"",22],["* `--binary-id` - use `binary_id` as primary key type",23],["binary_id: true,",23],["@primary_key {:id, :binary_id, autogenerate: true}",73],["binary_id: false",300]],"useCount":808},{"word":"binding","context":[["quote bind_quoted: binding do",55],["config :#{binding[:application_name]}, #{binding[:application_module]}.Repo,",120],["if binding[:ecto] do",75],["config :#{binding[:application_name]}, #{binding[:application_module]}.Repo,",120],["binding = [application_name: app,",43],["path    = binding[:path]",48],["contents = EEx.eval_string(render(source), binding, file: source)",43],["binding = Mix.Phoenix.inflect(singular)",45],["application_name = Keyword.fetch!(binding, :application_name)",46],["defp copy_from(target_dir, binding, mapping) when is_list(mapping) do",48]],"useCount":1752},{"word":"block","context":[["# This block is expanded within all views for aliases, imports, etc",24],["test \"resources without block generates named routes for :index, :edit, :show, :new\" do",20],["block =",36],["block",21],["{\"x-xss-protection\", \"1; mode=block\"},",25],["* x-xss-protection - set to \"1; mode=block\" to improve XSS",25],["defmacro pipeline(plug, do: block) do",30],["unquote(block)",271],["content_tag :span, translate_error(error), class: \"help-block\"",264],["# The quoted expression returned by this block is applied",39]],"useCount":852},{"word":"body","context":[["session = Map.take(resp.body, [\"token\", \"sig\"])",89],["{:ok, body} ->",71],["body = response(conn, status)",68],["assert resp.body[\"status\"] == 200",185],["response.body",113],["assert resp.body[\"status\"] == 410",123],["unquote(body)",132],["body:",138],["body = Poison.decode!(conn.resp_body)",149],["body",319]],"useCount":5813},{"word":"br","context":[[".br",564],[".\\\" .br        insert line break",280],["#=> {:safe, \"Hello John&lt;br /&gt;Doe\"}",22],["Phoenix.View.render(YourApp.UserView, \"index.html\", name: \"John<br />Doe\")",22],["join: p in assoc(br, :project),",11]],"useCount":899},{"word":"briefly","context":[["<para>This manual page documents briefly the",507],["This manual page documents briefly the",284]],"useCount":791},{"word":"broadcast","context":[["* `broadcast(topic, event, msg)` - broadcasts a `msg` with as `event`",35],["assert_push \"broadcast\", %{\"some\" => \"data\"}",33],["broadcast_from! socket, \"broadcast\", %{\"some\" => \"data\"}",33],["broadcast socket, \"user_entered\", %{user: message[\"user\"]}",31],["# Would allow you to broadcast a \"disconnect\" event and terminate",444],["def broadcast(topic, event, msg) do",39],["def broadcast!(topic, event, msg) do",39],["Phoenix.Channel.Server.broadcast(@pubsub_server, topic, event, msg)",36],["Phoenix.Channel.Server.broadcast!(@pubsub_server, topic, event, msg)",36],["* `broadcast!(topic, event, msg)` - broadcasts a `msg` with as `event`",35]],"useCount":1826},{"word":"broadcast_from","context":[["* `broadcast_from!(from, topic, event, msg)` - broadcasts a `msg` from",37],["* `broadcast_from(from, topic, event, msg)` - broadcasts a `msg` from",37],["iex> broadcast_from socket, \"new_message\", %{id: 1, content: \"hello\"}",36],["Phoenix.Channel.Server.broadcast_from!(@pubsub_server, from, topic, event, msg)",36],["def broadcast_from(socket, event, message) do",36],["def broadcast_from!(from, topic, event, msg) do",39],["def broadcast_from(from, topic, event, msg) do",39],["Phoenix.Channel.Server.broadcast_from(@pubsub_server, from, topic, event, msg)",36],["def broadcast_from!(socket, event, message) do",36],["broadcast_from! socket, \"broadcast\", %{\"some\" => \"data\"}",33]],"useCount":889},{"word":"browser","context":[["# we unfortunately need to assume it is a browser sending us a request.",36],["pipe_through [:browser, :admin]",23],["# browser related routes and resources",30],["pipe_through :browser",169],["Put headers that improve browser security.",25],["pipeline :browser do",25],["pipe_through :browser # Use the default browser stack",498],["pipe_through :browser # Use the default browser stack",498],["# Watch static and templates for browser reloading.",527],["pipeline :browser do",613]],"useCount":2595},{"word":"brunch","context":[["brunch = Keyword.get(opts, :brunch, true)",42],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\"]]",246],["# with brunch.io to recompile .js and .css sources.",567],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\"]]",60],["* `--no-brunch` - do not generate brunch files",42],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\"]]",246],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\",",76],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\",",76],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\"]]",60],["* `--no-brunch` - do not generate brunch files",42]],"useCount":2621},{"word":"build","context":[["the \"watch\" mode of the brunch build tool when the server starts.",39],["Phoenix uses an optional assets build tool called brunch.io",38],[":meck.expect(QueueBuilder, :build, fn _,_,_ -> %OpenAperture.Messaging.Queue{name: \"\"} end)",44],["# skeleton\texample file to build /etc/init.d/ scripts.",78],["version in one of the debian/rules file targets (such as build), you will need",210],["debian/rules file targets (such as build), you will need to include",252],["to build and query models.",1037],["You can configure it to whatever build tool or command you want:",39],["targets (such as build), you will need to include xsltproc",40],["maybe_cmd \"npm install && node node_modules/brunch/bin/brunch build\",",35]],"useCount":2158},{"word":"build_embedded","context":[["build_embedded: Mix.env == :prod,",2423],["build_embedded:  Mix.env == :prod,",42]],"useCount":2465},{"word":"but","context":[["raise ArgumentError, \"an adapter was given to :pubsub but no :name was defined, \" <>",39],["# We could use Mix.shell.cmd/1 but that automatically",38],["# this means its contents can be read but not tampered with.",90],[";; removed but not purged, and we should skip the setup.",132],["Watchers are guaranteed to run in the application directory but only",37],["Same as `broadcast_from/3` but raises if broadcast fails.",30],["# downstream but one could filter or change the event.",30],["Broadcasts message to all but `from_pid` on given topic.",24],["want to listen to. The topic is just an identifier, but by convention it is",25],["Generates the endpoint base URL but as a `URI` struct.",26]],"useCount":901},{"word":"by","context":[["# manifest is generated by the mix phoenix.digest task",503],["<para>This manual page was written by &dhusername; &dhemail; for",297],["The programs are documented fully by",284],["# from the install scripts for gettext by Santiago Vila",144],[";; Modified by Dirk Eddelbuettel <edd@debian.org>",144],[";; Originally contributed by Nils Naumann <naumann@unileoben.ac.at>",144],["<para>The programs are documented fully by <citetitle>The Rise and",506],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["# generated by other debhelper scripts.",1136],["This module defines the test case to be used by",1506]],"useCount":9669},{"word":"bypass","context":[["test \".list requests the v2 endpoint\", %{bypass: bypass} do",18],["Bypass.expect(bypass, fn conn ->",17],["test \".list requests the v2 endpoint\", %{bypass: bypass} do",18],["Application.put_env(:pco_api, :endpoint_base, \"http://localhost:#{bypass.port}/\")",30],["{:ok, bypass: bypass}",46],["{:ok, bypass: bypass}",46],["bypass: bypass,",69],["bypass: bypass,",69],["bypass = Bypass.open",89],["Bypass.expect bypass, fn conn ->",374]],"useCount":825},{"word":"c","context":[["ok: CHECKFAIL(DI(i < 1 && i <= 10)) DI.c:83",40],["#FLAVORTEST=`echo $FLAVOR | cut -c-6`",144],["assert (c[:c] |> R.hset \"myhash\", \"field1\", \"Hello\") == 1",18],["ok: CHECKEMPTY(DI(i < 10)) DI.c:72",40],["assert issues == ~w{a b c}",18],["[\"a\", \"b\", \"c\"]",20],["{:content, \"c\"},",21],["assert res == c",24],["ok: CHECKFAIL(DI(i >= 10)) DI.c:81",40],["ok: CHECKEMPTY(DI(1 <= i && i <= 10)) DI.c:74",40]],"useCount":799},{"word":"cache","context":[["Phoenix.Config.cache(__MODULE__,",107],["the Phoenix.Config layer knows how to cache it.",111],["The result is wrapped in a `{:cache, value}` tuple so",79],["cache",73],["# create a test cache",50],["configuration cache and possibly the servers for handling requests",41],["ConCache.put(cache, :a, 1)",36],["Phoenix.Config.cache(__MODULE__, {:__phoenix_static__, path},",35],["with_cache(fn(cache) ->",33],["# For development, we disable any cache and enable",572]],"useCount":1753},{"word":"call","context":[["# call the Gettext module passing our Gettext backend. We",295],["def call(conn, opts) do",163],["def call(conn, _opts) do",138],["defoverridable [init: 1, call: 2]",87],["Dbg.trace([:call])",74],["|> Sugar.RouterTest.Router.call([])",57],["call = fn ->",50],["|> Router.call(@opts)",44],["def call(conn, _) do",43],["defoverridable [call: 2]",42]],"useCount":2497},{"word":"callback","context":[["handle_reply(socket, reply, callback)",42],["Callback that changes the configuration from the app callback.",29],["callback name. Otherwise an exception is raised.",28],["defp jsonp_body(data, callback) do",28],["\"/**/ typeof #{callback} === 'function' && #{callback}(#{body});\"",28],["\"/**/ typeof #{callback} === 'function' && #{callback}(#{body});\"",28],["for invoking the `Phoenix.Socket.connect/2` callback and acting",25],["topic from the `id/1` callback.",25],["`connect/2` callback and returns the result.",25],["Your channels must implement a `join/3` callback that authorizes the socket",25]],"useCount":1221},{"word":"called","context":[["will be called in the view given to `:render_errors`. Defaults to:",39],["echo \"postinst called with unknown argument \\`$1'\" >&2",267],["Phoenix uses an optional assets build tool called brunch.io",38],["# summary of how this script can be called:",1135],["Every time `pipe_through/1` is called, the new pipelines",30],["Should be called by transports before connecting when appropriate.",25],["echo \"preinst called with unknown argument \\`$1'\" >&2",295],["echo \"prerm called with unknown argument \\`$1'\" >&2",291],["echo \"postrm called with unknown argument \\`$1'\" >&2",283],["The `.eex` extension is called a template engine which tells Phoenix how",20]],"useCount":2681},{"word":"can","context":[["# directory. For example, you can emulate configuration per environment",1035],["# summary of how this script can be called:",1135],["# verification, you can put default assigns into",442],["# You can configure for your application as:",858],["This can be used in your application as:",577],["# The watchers configuration can be used to run external",570],["# Code reloading can be explicitly enabled under the",569],["# Alternatively, you can configure exactly which server to",549],["# you can enable the server option below.",545],["# Dependencies can be Hex packages:",1439]],"useCount":14007},{"word":"cannot","context":[["raise \"cannot define plug at the router level, plug must be defined inside a pipeline\"",30],["it cannot be async. For this reason, every test runs",1504],["# Use this if the daemon cannot reload",49],["log_warning_msg \"cannot re-read the config file (use restart).\"",49],["# and cannot be accessed from applications inside the apps folder",38],["# where we cannot execute .cmd files on Windows.",38],["false    -> raise \"cannot use put_layout/2 with atom/binary when layout is false, use a tuple instead\"",37],["with status 406, whenever the server cannot serve a response in any",36],["raise \"cannot render template #{inspect template} without format. Use an atom if the \" <>",36],["raise \"cannot pipe_through inside a pipeline\"",30]],"useCount":1922},{"word":"case","context":[["case \"$1\" in",1413],["case Repo.update(changeset) do",465],["Finally, if the test case interacts with the database,",1503],["of the test unless the test case is marked as async.",1504],["This module defines the test case to be used by",1506],["case \"$?\" in",572],["case Repo.insert(changeset) do",538],["# In case no render clause matches or no",532],["|> case do",387],["case result do",334]],"useCount":14496},{"word":"cast","context":[["|> cast(params, ~w(password), [])",17],["|> cast(params, @params_update_req, @params_update_opt)",17],["def cast(_),",20],["GenServer.cast(pid, :close)",23],["cast(model_or_changeset,  params, @required_fields, @optional_fields)",25],["def cast(_), do: :error",36],["|> cast(params, @create_fields, @optional_fields)",36],["|> cast(params, @required_fields ++ @optional_fields)",37],["|> cast(params, @required_fields, @optional_fields)",55],["|> cast(params, @required_fields, @optional_fields)",710]],"useCount":1073},{"word":"catch","context":[["catch",861],["catch",121],["test \"accepts/2 uses first accepts on empty or catch-all header\" do",20],["# render/2 to be reported in case the user has defined a catch all",13],["# This module is used to catch failures and render them using a view.",12]],"useCount":1027},{"word":"change","context":[["|> Ecto.Changeset.change",68],["def change do",1634],["# if we are using a daemonuser then change the user id",49],["to change the layout, similar to how `put_view/2` can be used to change",36],["Invoked to warm up caches on start and config change.",29],["After this change, you must recompile plug:",19],["to change the layout, similar to how `put_view/2` can be used to change",36],["# downstream but one could filter or change the event.",30],["def change do",18],["files to watch. When these files change, it will trigger a reload.",29]],"useCount":2029},{"word":"changed","context":[["keys except `:path` can be changed at runtime. Defaults to:",20],["res = Phoenix.Config.config_change(endpoint, changed, removed)",29],["def config_change(endpoint, changed, removed) do",29],["the `MyApp.UserView`. This information can be changed any time by using",31],["def config_change(changed, _new, removed) do",586],["Phoenix.Endpoint.Adapter.config_change(__MODULE__, changed, removed)",37],["* `config_change(changed, removed)` - reload the endpoint configuration",40],["def config_change(changed, removed) do",41],["keys except the `:path` one can be changed at runtime. Defaults to:",19]],"useCount":832},{"word":"changeset","context":[["def changeset(model, params \\\\ :empty) do",584],["Creates a changeset based on the `model` and `params`.",651],["render(conn, \"new.html\", changeset: changeset)",553],["render(conn, \"new.html\", changeset: changeset)",553],["If no params are provided, an invalid changeset is returned",587],["test \"changeset with invalid attributes\" do",671],["test \"changeset with valid attributes\" do",673],["assert changeset.valid?",865],["refute changeset.valid?",988],["{:error, changeset} ->",1092]],"useCount":16348},{"word":"channel","context":[["assert_receive %{channel: ^channel,",36],["channel \"rooms:*\", MyApp.RoomChannel",40],["assert_receive %{channel: ^channel,",36],["def channel do",568],["channel: channel,",53],["channel tests.",492],["channel = make_ref()",65],["Process.monitor(channel)",54],["channel: channel,",53],["assert channel",50]],"useCount":3837},{"word":"channels","context":[["# Import conveniences for testing with channels",494],["# all active sockets and channels for a given user:",444],["# the socket that will be set for all channels, ie",442],["{:eex,  \"new/web/channels/user_socket.ex\",               \"web/channels/user_socket.ex\"},",33],["assert File.exists?(\"photo_blog/web/channels\")",32],["refute File.exists?(\"photo_blog/web/channels/.keep\")",32],["The transport sits between the socket and channels, forwarding client",25],["{:keep, \"new/test/channels\",                             \"test/channels\"},",39],["{:eex,  \"new/web/channels/user_socket.ex\",               \"web/channels/user_socket.ex\"},",33],["{:keep, \"new/test/channels\",                             \"test/channels\"},",39]],"useCount":2026},{"word":"check","context":[["@explanation [check: @moduledoc]",79],["Mix.Task.run \"compile\", [\"--no-deps-check\"]",22],["case check do",22],["* `:check_origin` - if we should check the origin of requests when the",23],["it will check against the host value in `YourApp.Endpoint.config(:url)[:host]`.",23],["Could not check origin for Phoenix.Socket transport.",24],["# You can also customize the exit_status of each check.",27],["# But before we check for */* because if one exists and we serve html,",36],["# check wether $DAEMON is running. If so, restart",65],["# to check for upstream updates and more.",276]],"useCount":882},{"word":"check_origin","context":[["check_origin: [\"https://example.com\",",22],["def check_origin(conn, handler, endpoint, opts, sender) do",22],["2. pass the :check_origin option when configuring your",22],["check_origin = check_origin_config(handler, endpoint, opts)",22],["def check_origin(conn, handler, endpoint, opts, sender \\\\ &Plug.Conn.send_resp/1)",22],["check_origin: true,",23],["* `:check_origin` - if we should check the origin of requests when the",23],["check_origin: [\"//example.com\"]",26],["case Keyword.get(opts, :check_origin, endpoint.config(:check_origin)) do",22],["check_origin: false,",471]],"useCount":966},{"word":"children","context":[["# Here you could define other workers and supervisors as children",443],["children = [",1549],["Supervisor.start_link(children, opts)",999],["supervise(children, strategy: :one_for_one)",302],["# Wait for children to finish too if this is a daemon that forks",143],["supervise(children, strategy: :simple_one_for_one)",123],["children =",57],["supervise children, strategy: :one_for_one",48],["children = []",45],["Supervisor.start_link(children, strategy: :one_for_one)",37]],"useCount":3948},{"word":"choice","context":[["<group choice=\"req\">",1050],["<arg choice=\"opt\">",420],["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg choice=\"plain\"><option>-e <replaceable>this</replaceable></option></arg>",210],["<arg choice=\"plain\"><option>--example</option></arg>",420],["<arg choice=\"plain\">",420],["<arg choice=\"plain\"><option>--version</option></arg>",210],["<arg choice=\"plain\"><replaceable>this</replaceable></arg>",210],["<arg choice=\"plain\"><option>--help</option></arg>",210],["<arg choice=\"plain\"><replaceable>that</replaceable></arg>",210]],"useCount":4632},{"word":"chosen","context":[["test \"deletes chosen resource\", %{conn: conn} do",381],["test \"shows chosen resource\", %{conn: conn} do",419],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["test \"renders form for editing chosen resource\", %{conn: conn} do",247],["test \"updates chosen resource and redirects when data is valid\", %{conn: conn} do",240],["test \"updates and renders chosen resource when data is valid\", %{conn: conn} do",133],["based on the chosen strategy.",18],["assert file =~ ~S|test \"shows chosen resource\"|",30],["assert file =~ ~S|test \"deletes chosen resource\"|",30],["assert file =~ ~S|test \"does not update chosen resource and renders errors when data is invalid\"|",30]],"useCount":1954},{"word":"citerefentry","context":[["<citerefentry>",630],["<para><citerefentry>",210],["</citerefentry> for further details.</para>",420],["</citerefentry>, <citerefentry>",420],["</citerefentry>, <citerefentry>",420],["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210],["</citerefentry></para>",210],["</citerefentry> files.</para>",210],["</citerefentry> system.</para>",210],["</citerefentry> format; see below.</para>",210]],"useCount":3150},{"word":"citetitle","context":[["Fall of a Fooish Bar</citetitle> available via the",296],["<para>The programs are documented fully by <citetitle>The Rise and",506],["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210]],"useCount":1012},{"word":"class","context":[["<replaceable class=\"option\">this</replaceable>",210],["content_tag :span, translate_error(error), class: \"help-block\"",264],["on <filename class=\"devicefile\">stderr</filename>:</para>",210],["job = %Verk.Job{class: \"Class\", args: []}",44],["assert file =~ ~s(<%= text_input f, :name, class: \"form-control\" %>)",32],["class, reason ->",23],["class: ~x\"./@class\",",20],["class: ~x\"./@class\",",20],["%{class: 'third', data_attr: nil, text: 'Third'}",20],["json = %Verk.Job{class: \"Class\", args: []} |> Poison.encode!",18]],"useCount":1197},{"word":"clause","context":[["\"before\" clause to the \"after\" clause when instrumenting. For example, an",12],["\"before\" clause to the \"after\" clause when instrumenting. For example, an",12],["#### \"Before\" clause",17],["#### \"After\" clause",17],["# render/2 clause.",13],["# In case no render clause matches or no",532],["~r{no function clause matching the guard in},",28],["as the first argument; see the \"After clause\" section below.",17],["argument; see the \"Before clause\" section below.",17],["* `result_of_before_callback` is the return value of the \"before\" clause of",17]],"useCount":693},{"word":"clean","context":[["assert Minesweeper.annotate(clean(b)) == b",35],["want to clean something up, it is better to monitor your channel",16],["def clean do",16],["Keep the definitions in this module short and clean,",21],["def clean, do: Erlang.clean(manifest())",19],["controller, etc, so keep them short and clean, focused",556],["def clean, do: Erlang.clean(manifest())",19],["|> clean",11],["# Start with a clean slate",12],["process and do the clean up from another process.  Similar to GenServer,",16]],"useCount":721},{"word":"client","context":[["client",119],["# by sending replies to requests from the client",36],["information sent by the client. Read `render/3` to learn more.",36],["# Socket params are passed from the client and can",442],["client = meta[:handle]",120],["def get_token(client, params, headers) do",63],["def authorize_url(client, params) do",55],["{:ok, 200, \"headers\", :client}}])",51],["content type) and the data is sent to the client with default status of 200.",36],["of the formats expected by the client.",36]],"useCount":2621},{"word":"cm","context":[["cm\tnoun\tverb_aux\tSYM\tverb;",200],["cm\tnoun\tverb_aux\tverb_aux\tverb;",392],["noun\tcm\tverb\tconj\tnoun;",112],["cm\tverb\tverb_aux\tSYM\tverb_aux;",188],["cm\tnoun\tconj\tpnoun\tverb;",176],["cm\tnoun\tconj\tpn\tverb;",148],["noun\tcm\tnoun\tcm\tadjective;",111],["noun\tcm\tnoun\tcm\tadjective;",111],["adjective\tnoun\tnoun\tverb\tcm;",112],["noun\tcm\tverb_aux\tverb_aux\tverb;",146]],"useCount":14088},{"word":"cmd","context":[["defp cmd(cmd) do",40],["defp cmd(cmd) do",40],["Mix.shell.info [:green, \"* running \", :reset, cmd]",40],["# We could use Mix.shell.cmd/1 but that automatically",38],["defp maybe_cmd(cmd, should_run?, can_run?) do",38],["# where we cannot execute .cmd files on Windows.",38],["[ \"$cmd\" != \"$name\" ] &&  return 1",97],["cmd=`cat /proc/$pid/cmdline | tr \"\\000\" \"\\n\"|head -n 1 |cut -d : -f 1`",97],["# We use :os.cmd/1 because there is a bug in OTP",38],[":os.cmd(String.to_char_list(cmd))",35]],"useCount":786},{"word":"cmdsynopsis","context":[["</cmdsynopsis>",718],["<cmdsynopsis>",718]],"useCount":1436},{"word":"code","context":[["# dh_installdeb will replace this with shell code automatically",1136],["# On your own code and templates, depending on whether you",114],["# debugging and code reloading.",572],["# in the errors.po file. On your own code and templates,",181],[";; xemacs19, emacs20, xemacs20...).  The compiled code is then",144],["# Add code here, if necessary, that waits for the process to be ready",143],["# If the above conditions are not satisfied then add some other code",143],["# We make no guarantees that this code is fit for any purpose.",135],["# We make no guarantees that this code is fit for any purpose.",122],["# The above code will not work for interpreted scripts, use the next",69]],"useCount":3744},{"word":"code_reloader","context":[["config :phoenix, :code_reloader,",39],["var!(code_reloading?) = var!(config)[:code_reloader]",39],["* `:code_reloader` - when `true`, enables code reloading functionality",39],["code_reloader: false,",30],["config :phoenix, :code_reloader, true",54],["# Code reloading will only work if the :code_reloader key of",43],["# :code_reloader configuration of your endpoint.",569],["* `:code_reloader` - optionally override the default `:code_reloader` value",16],["if conf[:code_reloader] do",29],["code_reloader: true,",584]],"useCount":1490},{"word":"com","context":[["#       url: [host: \"example.com\", port: 443],",427],["url: [host: \"example.com\", port: 80],",326],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",83],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["url: [host: \"example.com\"],",68],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["\"http://example.com/pages/hello?some=query\"",46],["source_url: \"https://github.com/phoenixframework/phoenix\",",44],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",124]],"useCount":4287},{"word":"command","context":[["Alternatively use the xmlto command/package. That will also automatically",210],["# Rename this file to \"watch\" and then you can run the \"uscan\" command",276],["<command>&dhpackage;</command> and <command>bar</command>",505],["<command>&dhpackage;</command> and <command>bar</command>",505],["<command>&dhpackage;</command> and <command>bar</command>",505],["<para><command>&dhpackage;</command> is a program that...</para>",505],["<command>&dhpackage;</command> and <command>bar</command>",505],["<para><command>&dhpackage;</command> is a program that...</para>",505],["<command>&dhpackage;</command>",716],["<command>&dhpackage;</command>",716]],"useCount":5802},{"word":"commands","context":[["refute Enum.member? commands, version3",36],["refute Enum.member? commands, version1",48],["<!-- TITLE should be something like \"User commands\" or similar (see",210],["commands.",284],["commands = :ejabberd_commands.list_commands",21],["commands.</para>",505],["assert Enum.member? commands, version3",24],["* `:root` - the root of your application for running external commands.",35],["commands = :ejabberd_commands.list_commands 1",18],["commands = :ejabberd_commands.list_commands 3",18]],"useCount":1211},{"word":"comments","context":[["\"/users/99/comments/1/files\"",40],["schema \"comments\" do",43],["\"/users/88/comments/1/files/new\"",40],["\"/users/88/comments/1/files/2/edit\"",40],["<%= if comments do %>",28],["\"/users/123/comments/1/files/2\"",40],["assert conn.resp_body == \"show comments\"",23],["# If you don't want TODO comments to cause `mix credo` to fail, just",27],["resources \"/comments\", CommentController do",28],["create table(:comments) do",24]],"useCount":798},{"word":"compile","context":[["is loaded only at compile-time.",39],["{conn, body} = Plug.Builder.compile(env, plugs, [])",37],["# Type `mix help compile.app` for more information",1061],["# Type \"mix help compile.app\" for more information",749],["# Specifies which paths to compile per environment.",407],["# Type `mix help compile.app` for more information.",405],["# Specifies which paths to compile per environment",205],["FLAGS=\"${SITEFLAG} -q -batch -l path.el -f batch-byte-compile\"",144],["(setq load-path (cons \".\" load-path) byte-compile-warnings nil)",130],["and changing it at runtime has no effect. The compile-time",41]],"useCount":3914},{"word":"compilers","context":[["compilers: [:phoenix, :gettext] ++ Mix.compilers,",322],["compilers: [:asn1] ++ Mix.compilers,",19],["compilers: [:phoenix, :gettext] ++ Mix.compilers,",322],["compilers: [:asn1] ++ Mix.compilers,",19],["compilers: [:elixir, :dynamo, :app],",16],["all = Mix.Project.config[:compilers] || Mix.compilers",11],["compilers: [:phoenix] ++ Mix.compilers,",347],["compilers: [:phoenix] ++ Mix.compilers,",347],["all = Mix.Project.config[:compilers] || Mix.compilers",11]],"useCount":1414},{"word":"complete","context":[["For a complete description, see the Info files.",285],["options is included below.  For a complete description, see the",507],[":meck.expect(Workflow, :complete?, fn _ -> true end)",15],["* template path - is the complete path of the template",15]],"useCount":822},{"word":"concat","context":[["|> Module.concat(\"ErrorView\")",33],["|> Module.concat(PubSub)",40],["Module.concat([unquote(alias)|unquote(t)])",47],["args = [conf[:otp_app], mod, [name: Module.concat(mod, Server)]]",28],["[name: Module.concat(mod, CodeReloader)]]",28],["args = [app, mod, conf, [name: Module.concat(mod, Config)]]",21],["name = Module.concat(Elixir, name)",55],["|> Module.concat()",67],["(let ((package-dir (concat \"/usr/share/\"",136],["Module.concat(namespace, \"LayoutView\")",31]],"useCount":754},{"word":"cond","context":[["message: \"Always use :else as the last condition of a cond statement\",",12],["result = cond do",18],["cond do",2359],["cond do",432]],"useCount":2821},{"word":"conf","context":[["defp pubsub_children(mod, conf) do",30],["<refentrytitle>foo.conf</refentrytitle>",630],["<term><filename>/etc/foo.conf</filename></term>",210],["<term><filename>${HOME}/.foo.conf</filename></term>",210],["_                  -> conf",35],["Enum.reduce plugins, config, fn plugin, conf ->",35],["Enum.map(conf[:watchers], fn {cmd, args} ->",31],["pubsub_children(mod, conf) ++",30],["pub_conf = conf[:pubsub]",30],["conf = config(otp_app, mod)",30]],"useCount":1866},{"word":"config","context":[["#     config :logger, level: :info",848],["config :logger, :console,",815],["#     config :phoenix, :serve_endpoints, true",527],["# Finally import the config/prod.secret.exs",478],["config",350],["config :logger, :console, format: \"[$level] $message\\n\"",603],["config :logger, level: :warn",593],["# Import environment specific config. This must remain at the bottom",630],["config :logger, level: :info",578],["config :phoenix, :stacktrace_depth, 20",533]],"useCount":14907},{"word":"config_change","context":[["def config_change(endpoint, changed, removed) do",29],["assert Endpoint.config_change([{Endpoint, @config}], []) == :ok",11],["res = Phoenix.Config.config_change(endpoint, changed, removed)",29],["Phoenix.Endpoint.Adapter.config_change(__MODULE__, changed, removed)",37],["assert Endpoint.config_change([{Endpoint, config}], []) == :ok",40],["* `config_change(changed, removed)` - reload the endpoint configuration",40],["def config_change(changed, removed) do",41],["def config_change(changed, _new, removed) do",586]],"useCount":813},{"word":"configuration","context":[["<para>The system-wide configuration file to control the",210],["# :code_reloader configuration of your endpoint.",569],["# The watchers configuration can be used to run external",570],["# Tell Phoenix to update the endpoint configuration",570],["# This configuration file is loaded before any dependency and",632],["# of this file so it overrides the configuration defined above.",633],["# This configuration is loaded before any dependency and is restricted",1055],["# directory. For example, you can emulate configuration per environment",1035],["# It is also possible to import configuration files, relative to this",1035],["# And access this configuration in your application as:",857]],"useCount":11001},{"word":"configure","context":[["# Alternatively, you can configure exactly which server to",549],["# Or configure a 3rd-party app:",857],["# ExUnit.configure exclude: :pending, trace: true",56],["ExUnit.configure exclude: :pending, trace: true",222],["#        * <postinst> `configure' <most-recently-configured-version>",267],["configure)",268],["# You can configure for your application as:",858],["# You should also configure the url host to something",527],["# For production, we configure the host to read the PORT",527],["# Do not configure such in production as keeping",368]],"useCount":4761},{"word":"configuring","context":[["# This file is responsible for configuring your application",1793],["endpoint or when configuring the transport in your",22],["2. pass the :check_origin option when configuring your",22],["# Set a higher stacktrace during development. Avoid configuring such",93]],"useCount":1930},{"word":"conj","context":[["cm\tverb\tverb_aux\tconj\tverb_aux;",96],["cm\tverb\tconj\tpn\tverb_aux;",108],["noun\tverb\tverb_aux\tconj\tverb_aux;",236],["pnoun\tcm\tverb\tconj\tnoun;",108],["noun\tcm\tverb\tconj\tnoun;",112],["noun\tverb\tconj\tpn\tverb_aux;",117],["verb\tverb_aux\tverb_aux\tconj\tverb_aux;",140],["verb\tverb_aux\tconj\tpn\tverb_aux;",143],["cm\tnoun\tconj\tpn\tverb;",148],["cm\tnoun\tconj\tpnoun\tverb;",176]],"useCount":5183},{"word":"conn","context":[["conn",465],["def delete(conn, %{\"id\" => id}) do",463],["conn =",431],["def new(conn, _params) do",428],["render conn, \"index.html\"",476],["def show(conn, %{\"id\" => id}) do",542],["render(conn, \"new.html\", changeset: changeset)",553],["assert conn.status == 200",1025],["def index(conn, _params) do",1239],["conn",6292]],"useCount":59970},{"word":"connect","context":[["def connect(_params, socket) do",432],["Logger.error \"#{inspect handler}.connect/2 returned invalid value #{inspect invalid}. \" <>",25],["iex> collection = Mongo.connect! |> Mongo.db(\"test\") |> Mongo.Db.collection(\"anycoll\")",28],["def connect(%{\"token\" => token}, socket) do",35],["assert_receive {:connect, 1}",38],["def connect(%{\"reject\" => \"true\"}, _socket) do",45],["def connect(params, socket) do",52],["@http_methods [:get, :post, :put, :patch, :delete, :options, :connect, :trace, :head]",52],["connect: [_],",55],["# performing token verification on connect.",430]],"useCount":1706},{"word":"connection","context":[["The `api` option defines the OpenAperture.ManagerApi used for connection.",242],["The `conn` option defines the underlying HTTP connection.",114],["Underlying HTTP connection",96],["- conn: User connection for REST holding auth info",56],["# To deny connection, return `:error`.",431],["tests that require setting up a connection.",545],["assigns are merged and have higher precedence than the connection assigns",36],["connection",51],["the connection",36],["a connection and relies on content negotiation while the latter is",36]],"useCount":3525},{"word":"connections","context":[["size: 10 # The amount of database connections in the pool",56],["# Disconnect all user's socket connections and their multiplexed channels",12],["* `:timeout` - the timeout for keeping websocket connections",12],["connections, often to a particular user, allowing us to force disconnections.",12],["This operation can only be performed on connections to a database. To learn",18],["# Import conveniences for testing with connections",544],["size: 20 # The amount of database connections in the pool",21],["## Socket connections",25],["header checks and ensuring only SSL connections are allowed.",25]],"useCount":725},{"word":"console","context":[["Logger.remove_backend :console",12],["config :logger, :console, format: \"[$level] $message\\n\"",603],["#     config :logger, :console,",152],["Logger.remove_backend(:console)",35],["backends: [:console],",19],["Logger.add_backend(:console)",14],["Logger.add_backend(:console, flush: true)",13],["config :logger, :console,",815]],"useCount":1663},{"word":"containing","context":[["* a binary - containing a request body. For such cases, `:headers`",24],["Values are expected to be an Enumerable containing two-item tuples",25],["containing cookies and relevant information from the given one.",22],["* a map or list - containing the parameters which will automatically",24],["expects a list of tuples containing the executable and its arguments.",39],["test \"statement containing question mark\" do",26],["* `:as` - a string or atom containing the named helper scope",30],["* `:alias` - an alias (atom) containing the controller scope",30],["* `:path` - a string containing the path scope",30],["# containing the digested version of static files. This",503]],"useCount":860},{"word":"contains","context":[["which contains named helpers to help developers generate and keep",30],["String.contains?(plural, \":\") ->",28],["if String.contains?(plural, \":\") do",27],["The `state_data` option contains the default state data of the :gen_fsm server",26],["# This module contains the logic used by most functions",32],["refute File.read!(\"photo_blog/.gitignore\") |> String.contains?(\"/node_modules\")",32],["* the accepted list of arguments contains the \"html\" format",36],["* `:cache_static_manifest` - a path to a json manifest file that contains",38],["# Assuming form contains a User schema",40],["# Assuming form contains a User model",100]],"useCount":733},{"word":"content","context":[["@valid_attrs %{name: \"some content\"}",99],["assert content =~ ~s(<option selected=\"selected\" value=\"11\">11</option>)",77],["assert content =~ ~s(<select id=\"search_datetime_hour\" name=\"search[datetime][hour]\">)",66],["assert content =~ ~s(<option selected=\"selected\" value=\"4\">April</option>)",66],["content",58],["assert content =~ ~s(<option selected=\"selected\" value=\"2020\">2020</option>)",110],["assert content =~ ~s(<option selected=\"selected\" value=\"13\">13</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"2\">02</option>)",121],["assert content =~ ~s(<select id=\"search_datetime_year\" name=\"search[datetime][year]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_day\" name=\"search[datetime][day]\">)",55]],"useCount":2954},{"word":"contents","context":[["contents = EEx.eval_string(render(source), binding, file: source)",43],["contents =",152],["assert contents ==",125],["# this means its contents can be read but not tampered with.",90],["create_file(target, contents)",49],["contents.(ext_name)",45],["File.write!(file, File.read!(file) <> contents)",44],["unquote(contents)",36],["# Optional contents",41],["defp append_to(path, file, contents) do",43]],"useCount":966},{"word":"context","context":[["parse(t, context, output)",46],["conn = context[:conn]",49],["a1 = context[:a1]",51],["env = context[:pe1]",55],["product = context[:product]",252],["setup context do",246],["Og.context(__ENV__, :debug)",103],["do_scope(options, context)",90],["context",77],["in_tmp context.test, fn ->",58]],"useCount":2025},{"word":"control","context":[["and docbook-xsl in your Build-Depends control field.",40],["docbook-to-man in your Build-Depends control field.",252],["<para>The system-wide configuration file to control the",210],["control the term elements. -->",210],["to include xsltproc and docbook-xsl in your Build-Depends control field.",210],["# your version control system.",88],["<para>The per-user configuration file to control the",210],["# Example watch control file for uscan",276],["assert file =~ ~s(<%= text_input f, :name, class: \"form-control\" %>)",32],["|> put_resp_header(\"access-control-allow-origin\", \"*\")",45]],"useCount":1862},{"word":"controller","context":[["* test files for generated model and controller",39],["* a controller in web/controllers",40],["use Pan.Web, :controller",41],["{:eex, \"controller.ex\",       \"web/controllers/#{path}_controller.ex\"},",39],["use OpenAperture.Manager.Web, :controller",44],["assert file =~ \"use Phoenix.Web, :controller\"",66],["use MyApp.Web, :controller",77],["controller, etc, so keep them short and clean, focused",556],["def controller do",596],["When used, dispatch to the appropriate controller/view/etc.",588]],"useCount":3968},{"word":"controllers","context":[["{:eex,  \"new/web/controllers/page_controller.ex\",        \"web/controllers/page_controller.ex\"},",39],["A module that keeps using definitions for controllers,",575],["# Import convenience functions from controllers",565],["* a controller in web/controllers",40],["{:eex,  \"new/web/controllers/page_controller.ex\",        \"web/controllers/page_controller.ex\"},",39],["{:eex,  \"new/test/controllers/page_controller_test.exs\", \"test/controllers/page_controller_test.exs\"},",39],["{:eex,  \"new/test/controllers/page_controller_test.exs\", \"test/controllers/page_controller_test.exs\"},",39],["assert_file \"test/controllers/user_controller_test.exs\", fn file ->",39],["{:eex, \"controller.ex\",       \"web/controllers/#{path}_controller.ex\"},",39],["{:eex, \"controller_test.exs\", \"test/controllers/#{path}_controller_test.exs\"},",38]],"useCount":1916},{"word":"conveniences","context":[["functionality and adds some extra conveniences.",12],["This module provides conveniences for reading all files from a",15],["The view layer also contains conveniences for rendering templates,",22],["# Import conveniences for testing with connections",544],["# Import conveniences for testing with channels",494]],"useCount":1087},{"word":"cookie","context":[["{resp, cookie} = poll(:get, cookie)",16],["assert get_req_header(conn, \"cookie\") == [\"foo=bar\"]",13],["# The session will be stored in the cookie and signed,",90],["store: :cookie,",628],["store: :cookie,",40],["assert get_req_header(conn, \"cookie\") == []",26],["Puts a request cookie.",24],["Deletes a request cookie.",24],["Browsers implement a storage by using cookies. When a cookie",22],["{resp, cookie} = poll(:get, cookie)",16]],"useCount":925},{"word":"could","context":[["# Here you could define other workers and supervisors as children",443],["You could then write your assertion like:",381],["# Either we could not start it",40],["# need the message to be pluralized or not, this could be",114],["#   2 if daemon could not be started",143],["#   2 if daemon could not be stopped",143],["# that waits for the process to drop all resources that could be",143],["<!-- dhusername could also be set to \"&dhfirstname; &dhsurname;\". -->",180],["# this could be written simply as:",181],["<!-- These are several examples, how syntaxes could look -->",210]],"useCount":2290},{"word":"count","context":[["|> Enum.count",25],["unquote(Enum.count(list))",26],["|> Enum.take(count)",35],["@data_count Enum.count(@data)",35],["|> Enum.count",51],["# Ecto will pass the :count keyword if the error message is",114],["#     dngettext \"errors\", \"1 file\", \"%{count} files\", count",295],["if count = opts[:count] do",118],["#     dngettext \"errors\", \"1 file\", \"%{count} files\", count",295],["if count = opts[:count] do",118]],"useCount":1709},{"word":"cowboy","context":[["[{:cowboy, \"~> 1.0\", optional: true},",52],["cowboy and accepts all options as defined by",76],["{:cowboy, \"~> 1.0.0\"},",68],[":cowboy,",76],["applications: [:phoenix, :phoenix_html, :cowboy, :logger, :gettext,",121],["applications: [:phoenix, :phoenix_html, :cowboy, :logger,",174],["applications: [:phoenix, :phoenix_pubsub, :phoenix_html, :cowboy, :logger, :gettext,",60],["[{:cowboy, \"~> 1.0.0\"},",27],["{:cowboy, \"~> 1.0\"}]",300],["{:cowboy, \"~> 1.0\"},",363]],"useCount":1526},{"word":"create","context":[["docbook-xsl-doc-* packages. Please remember that if you create the nroff",210],["Notes for using docbook2x: docbook2x-man does not automatically create the",210],["Mix.Task.run \"ecto.create\", [\"--quiet\"]",214],["Please remember that if you create the nroff version in one of the",252],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["You can also create the changeset manually and retrieve the errors",377],["create table(:users) do",199],["def create(conn, params) do",115],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["# For example, to create, migrate and run the seeds file at once:",350]],"useCount":5233},{"word":"css","context":[["assert_file \"photo_blog/priv/static/css/app.css\"",32],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif)$},",95],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},",423],["only: ~w(css fonts images js favicon.ico robots.txt)",449],["only: ~w(css images js favicon.ico robots.txt)",87],["# with brunch.io to recompile .js and .css sources.",567],["{:text, \"static/app.css\",         \"priv/static/css/app.css\"},",33],["{:text, \"static/app.css\",         \"priv/static/css/app.css\"},",33],["{:text, \"static/app.css\",         \"priv/static/css/app.css\"},",33],["assert_file \"photo_blog/priv/static/css/app.css\"",32]],"useCount":2114},{"word":"current","context":[["config file for your current environment (recommended)",24],["Retrieves the current layout.",36],["specified by the current action with the given assigns.",36],["Retrieves current layout formats.",36],["Retrieves the current view.",36],["# Aliases are shortcuts or tasks specific to the current project.",85],["When used, defines the current module as a main view module.",20],["Dispatches to the current endpoint.",22],["# Aliases are shortcut or tasks specific to the current project.",265],["# client asks for their current rank, push sent directly as a new event.",23]],"useCount":706},{"word":"custom","context":[["# Use put_new to allow custom dispatches",16],["Phoenix supports custom template engines. Engines tell",15],["# Bring render/3 and render_to_string/3 for testing custom views",485],["# We can also recycle manually in case we want custom headers",22],["all data was already encoded so far. Let's try to inject custom code:",20],["## Overriding `action/2` for custom arguments",19],["It is possible to add custom media types to your Phoenix application.",19],["test \"form_for/4 with custom options\" do",16],["assert config[:custom] == true",15],["the API required to be implemented by custom engines.",15]],"useCount":738},{"word":"custom_path","context":[["assert_file \"custom_path/config/test.exs\", ~r/Tds.Ecto/",31],["project_path = Path.join(File.cwd!, \"custom_path\")",206],["assert_file \"custom_path/mix.exs\", ~r/:tds_ecto/",31],["assert_file \"custom_path/config/prod.secret.exs\", ~r/Tds.Ecto/",31],["assert_file \"custom_path/test/support/channel_case.ex\",",44],["assert_file \"custom_path/test/support/conn_case.ex\",",44],["assert_file \"custom_path/test/support/model_case.ex\",",44],["assert_file \"custom_path/.gitignore\"",34],["assert_file \"custom_path/lib/photo_blog/endpoint.ex\", ~r/app: :photo_blog/",32],["assert_file \"custom_path/mix.exs\", ~r/app: :photo_blog/",32]],"useCount":1025},{"word":"d","context":[["cmd=`cat /proc/$pid/cmdline | tr \"\\000\" \"\\n\"|head -n 1 |cut -d : -f 1`",97],["install -m 755 -d ${ELCDIR}",144],["SCRIPTNAME=/etc/init.d/$NAME",143],["N=/etc/init.d/$NAME",127],["[ ! -d /proc/$pid ] &&  return 1",97],["#\t\tThis file should be used to construct scripts for /etc/init.d.",78],["# skeleton\texample file to build /etc/init.d/ scripts.",78],["# Please read this init.d carefully and modify the sections to",49],["# Example init.d script with LSB support.",49],["\". The application name is inferred from the path, if you'd like to \" <>",44]],"useCount":1431},{"word":"daemon","context":[["#   1 if daemon was already running",143],["# and if the daemon is only ever run from this initscript.",143],["# Function that sends a SIGHUP to the daemon/service",143],["# Function that stops the daemon/service",143],["#   0 if daemon has been stopped",143],["#   0 if daemon has been started",143],["# If the daemon can reload its configuration without",143],["# Wait for children to finish too if this is a daemon that forks",143],["#   2 if daemon could not be started",143],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144]],"useCount":3965},{"word":"dashes","context":[["with long options starting with two dashes (`-').  A summary of",507],["options starting with two dashes (`-').",284]],"useCount":791},{"word":"data","context":[["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["Helper for returning list of errors in model when passed certain data.",361],["def errors_on(model, data) do",346],["model.__struct__.changeset(model, data).errors",345],["# Alias the data repository and import query/model functions",300],["data",270],["sgml-indent-data:t",257],["test \"creates resource and redirects when data is valid\", %{conn: conn} do",248],["# We also recommend setting `force_ssl`, ensuring no data is",426]],"useCount":8558},{"word":"database","context":[["# We lowercase the database name because according to the",34],["db = Keyword.get(opts, :database, \"postgres\")",39],["Finally, if the test case interacts with the database,",1503],["# Configure your database",1056],["# Script for populating the database. You can run it as:",380],["# Configure your database",126],["# Create the database, run migrations, and start the test transaction.",61],["size: 10 # The amount of database connections in the pool",56],["* `--database` - specify the database adapter for ecto.",39],["* `--database` - specify the database adapter for ecto.",39]],"useCount":4149},{"word":"date","context":[["<!-- Please adjust the date whenever revising the manpage. -->",296],["format: \"$date $time [$level] $metadata$message\\n\",",23],["datetime = { date, time }",24],["their routes up to date.",30],["date = Date.from({2013,8,18})",36],["date = {2013,3,5}",42],["date",49],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],[".\\\" Please adjust this date whenever revising the manpage.",280],["defp value_to_type(:date), do: Ecto.Date",21]],"useCount":1940},{"word":"datetime","context":[["assert content =~ ~s(<select id=\"search_datetime_hour\" name=\"search[datetime][hour]\">)",66],["assert content =~ ~s(<select id=\"search_datetime_year\" name=\"search[datetime][year]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_month\" name=\"search[datetime][month]\">)",55],["datetime = { date, time }",24],["datetime",21],["assert content =~ ~s(<select id=\"search_datetime_day\" name=\"search[datetime][day]\">)",55],["\"nicks:array:text\", \"famous:boolean\", \"born_at:datetime\",",31],["assert content =~ ~s(<select id=\"search_datetime_sec\" name=\"search[datetime][sec]\">)",36],["unchanged = datetime |> Date.from",42],["assert content =~ ~s(<select id=\"search_datetime_min\" name=\"search[datetime][min]\">)",54]],"useCount":861},{"word":"day","context":[["do: from_parts(to_i(year), to_i(month), to_i(day))",25],["do: %{year: year, month: month, day: day}",76],["do: %{year: year, month: month, day: day}",76],["assert content =~ ~s(<select id=\"search_datetime_day\" name=\"search[datetime][day]\">)",55],["defp date_value(%{year: year, month: month, day: day}),",19],["from_parts(to_i(year), to_i(month), to_i(day),",31],["do: %{year: nil, month: nil, day: nil}",19],[":day, opts when date != nil ->",19],["{year, month, day}",22],["Date: <%= b.(:day, []) %> / <%= b.(:month, []) %> / <%= b.(:hour, []) %>",24]],"useCount":906},{"word":"debhelper","context":[["# generated by other debhelper scripts.",1136]],"useCount":1136},{"word":"debian","context":[["# the debian-policy package",1106],["# Written by Jim Van Zandt <jrv@debian.org>, borrowing heavily",132],["<para>This manual page was written for the &debian; distribution",296],["<!ENTITY debian      \"<productname>Debian</productname>\">",293],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# <sanvila@ctv.es> and octave by Dirk Eddelbuettel <edd@debian.org>.",144],[";; Modified by Dirk Eddelbuettel <edd@debian.org>",144],["version in one of the debian/rules file targets (such as build), you will need",210],["debian/rules file targets (such as build), you will need to include",252]],"useCount":5110},{"word":"debug","context":[["Logger.debug \"No supported media type in accept header in plug :accepts, \" <>",21],["# Do not print debug messages in production",539],["Og.context(__ENV__, :debug)",103],["level: :debug",59],["level: :debug,",41],["Logger.debug msg",31],["config :logger, level: :debug",29],["* active-debug: it's going to be active, with verbose debugging information",29],["defp debug(msg) do",23],["Logger.debug \"Unknown format #{inspect format} in plug :accepts, \" <>",21]],"useCount":1128},{"word":"debug_errors","context":[["* `:debug_errors` - when `true`, uses `Plug.Debugger` functionality for",40],["debug_errors: true,",602],["debug_errors: false,",140],["debug_errors: true",33],["http: [port: \"4808\"], debug_errors: true)",11],["if var!(config)[:debug_errors] do",39],["debug_errors: false,",36],["debug_errors: false",28]],"useCount":929},{"word":"decode","context":[["body = Poison.decode!(conn.resp_body)",149],["def decode(binary) do",32],["{:ok, decoded} = Poison.decode \"\"\"",34],["case Poison.decode(body) do",37],["def decode(message), do: %{message: message, remainder: <<>>}",42],["product_name = URI.decode(product_name)",42],["|> Poison.decode!",60],["%{message: decoded_message, remainder: rest} = Decoder.decode(encoded_bytes)",90],["|> Poison.decode!",91],[":jsx.decode(binary)",31]],"useCount":1087},{"word":"deconfigure","context":[["abort-upgrade|abort-remove|abort-deconfigure)",268],["remove|upgrade|deconfigure)",291],["#        * <deconfigured's-prerm> `deconfigure' `in-favour'",290],["#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'",267]],"useCount":1116},{"word":"def","context":[["def application do",3944],["def change do",1634],["def start(_type, _args) do",1397],["def index(conn, _params) do",1239],["def start_link do",978],["def view do",616],["def model do",599],["def controller do",596],["def config_change(changed, _new, removed) do",586],["def project do",4308]],"useCount":48465},{"word":"default","context":[["[# These are the default files included in the package",86],["if [ -f /etc/default/$NAME ] ; then",49],["[ -r /etc/default/$NAME ] && . /etc/default/$NAME",142],["[ -r /etc/default/$NAME ] && . /etc/default/$NAME",142],["# if you want to provide default values for your application for third-",191],["sgml-default-dtd-file:nil",257],["# verification, you can put default assigns into",442],["pipe_through :browser # Use the default browser stack",498],["# if you want to provide default values for your application for",858],["# The default endpoint for testing",1051]],"useCount":6059},{"word":"defaults","context":[["defp defaults(otp_app, module) do",34],["in_tmp \"new defaults to pg adapter\", fn ->",33],["# Include defaults if available",49],["The timeout is in milliseconds and defaults to 100ms.",39],["test \"new without defaults\" do",36],["which formats support/require layout rendering (defaults to \"html\" only).",36],["in_tmp \"new without defaults\", fn ->",36],["test \"new with defaults\" do",35],["in_tmp \"new with defaults\", fn ->",34],["test \"new defaults to pg adapter\" do",33]],"useCount":767},{"word":"define","context":[["Do NOT define functions inside the quoted expressions",556],["# Here you could define other workers and supervisors as children",443],["* to define an initial plug pipeline where requests",38],["to help define plugs. In the example above, `fetch_session/2`",30],["raise \"cannot define plug at the router level, plug must be defined inside a pipeline\"",30],["the time you will want to define (at least) two separate clauses for each",17],["We can use the definition above to define any view in your application:",20],["This module is used to define the application main view, which",20],["def define(env, routes) do",19],["# Because we define protocols on the fly to test",19]],"useCount":1297},{"word":"defined","context":[["cowboy and accepts all options as defined by",76],["# Configuration from the imported file will override the ones defined",1036],["# of this file so it overrides the configuration defined above.",633],["# Because error messages were defined within Ecto, we must",295],["<para>If used, the defined file is used as configuration",210],["# Functions defined here are available to all other views/templates",63],["An endpoint is simply a module defined with the help",41],["# Embed all defined templates",41],["the defined plug pipeline)",40],["functions that are automatically defined in your endpoint.",40]],"useCount":2999},{"word":"defines","context":[["The `id` option defines the MessagingExchange id.",34],["The `message` option defines the message to publish",25],["The `token` option defines the EtcdCluster token.",28],["The `params` option defines an array of arguments.",112],["The `conn` option defines the underlying HTTP connection.",114],["The `headers` option defines the header values (optional).",242],["The `options` option defines any extra HTTP options (optional).",242],["The `queryparams` option defines the query parameters (optional).",242],["The `api` option defines the OpenAperture.ManagerApi used for connection.",242],["This module defines the test case to be used by",1506]],"useCount":3172},{"word":"defining","context":[["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["on defining socket handlers.",32],["# defining the add_route definition only once and",15],["The entry point for defining forms in Phoenix is with",14],["# affects compilation. We work around it by defining",12],["Useful for defining routes not included in the builtin macros:",11]],"useCount":1119},{"word":"definitions","context":[["definitions: [%{kind: :OperationDefinition, loc: %{start: 0},",15],["Keep the definitions in this module short and clean,",21],["Defines a mount-point for a Socket module to handle channel definitions.",32],["definitions: [%{kind: :OperationDefinition,",67],["The definitions below will be executed for every view,",556],["A module that keeps using definitions for controllers,",575]],"useCount":1266},{"word":"defmacro","context":[["defmacro __using__(_options) do",67],["defmacro __before_compile__(_) do",52],["defmacro __using__(which) when is_atom(which) do",600],["defmacro __using__(_opts) do",352],["defmacro plug(plug, opts \\\\ []) do",59],["defmacro __using__(options) do",60],["defmacro __before_compile__(_env) do",101],["defmacro __before_compile__(env) do",201],["defmacro __using__(opts) do",322],["defmacro __using__(_) do",614]],"useCount":3427},{"word":"defmodule","context":[["defmodule Sample do",61],["defmodule Test do",84],["defmodule MyApp.UserController do",174],["defmodule User do",93],["defmodule CredoSampleModule do",358],["defmodule MyApp.Router do",110],["defmodule Endpoint do",111],["defmodule Router do",149],["defmodule MyList do",142],["defmodule State do",135]],"useCount":6796},{"word":"defp","context":[["defp put_script_name(conn) do",78],["defp description do",826],["defp elixirc_paths(_),     do: [\"lib\", \"web\"]",616],["defp elixirc_paths(:test), do: [\"lib\", \"web\", \"test/support\"]",609],["defp raise_with_help do",71],["defp error(pos) do",72],["defp docs do",160],["defp aliases do",431],["defp package do",1536],["defp deps do",3911]],"useCount":18235},{"word":"defstruct","context":[["defstruct \\",24],["defstruct(",55],["defstruct sid: nil,",34],["defstruct id: nil",27],["defstruct []",26],["defstruct name: nil,",25],["defstruct name: \"\",",20],["defstruct [instance: nil,",16],["defstruct id: nil,",68],["defstruct [",474]],"useCount":820},{"word":"delete","context":[["def delete(conn, _) do",41],["@http_methods [:get, :post, :put, :patch, :delete, :options, :connect, :trace, :head]",52],["def delete(conn, _params) do",57],["conn = delete conn, user_path(conn, :delete, user)",63],["conn = delete conn, user_path(conn, :delete, user)",63],["Repo.delete!(user)",69],["conn = delete conn(), path",89],["# Many daemons don't delete their pidfiles when they exit.",143],["# Here we use delete! (with a bang) because we expect",380],["def delete(conn, %{\"id\" => id}) do",463]],"useCount":2544},{"word":"demonstrative","context":[["pnoun\tcm\tnoun\tcm\tdemonstrative;",88],["verb_aux\tconj\tnoun\tcm\tdemonstrative;",44],["verb\tconj\tnoun\tcm\tdemonstrative;",48],["demonstrative\tnoun\tadjective\tnoun\tcm;",48],["verb\tverb_aux\tconj\tdemonstrative\tverb_aux;",64],["demonstrative\tnoun\tnoun\tverb\tcm;",64],["cm\tnoun\tconj\tdemonstrative\tverb;",72],["verb_aux\tSYM\tnoun\tcm\tdemonstrative;",76],["noun\tcm\tnoun\tcm\tdemonstrative;",84],["verb\tverb_aux\tSYM\tdemonstrative\tverb_aux;",104]],"useCount":1648},{"word":"dependencies","context":[["# Returns the list of dependencies in the format:",196],["# Specifies your project dependencies.",400],["# Specifies your project dependencies",232],["# Docs dependencies",70],["# Test dependencies",65],["install? = Mix.shell.yes?(\"\\nFetch and install dependencies?\")",40],["After npm is installed, install your brunch dependencies by",38],["assert_received {:mix_shell, :yes?, [\"\\nFetch and install dependencies?\"]}",32],["# Install dependencies?",32],["# and its dependencies with the aid of the Mix.Config module.",1768]],"useCount":2983},{"word":"dependency","context":[["# Note this file is loaded before any dependency and is restricted",25],["# This configuration is loaded before any dependency and is restricted",1055],["# This configuration file is loaded before any dependency and",632],["# This will make Elixir unable to track the dependency",47]],"useCount":1759},{"word":"depends","context":[["# to this project. If another project depends on this project, this",1080],["testing as a controller often depends on the pipelines invoked",22]],"useCount":1102},{"word":"deps","context":[["deps: deps]",2208],["deps: deps ]",250],["deps: deps]",2208],["defp deps do",3911],["deps: deps,",966],["deps: deps,",966],["# Type `mix help deps` for more examples and options",755],["# Type \"mix help deps\" for more examples and options",699],["# Type `mix help deps` for examples and options.",401],["deps: deps ]",250]],"useCount":15035},{"word":"description","context":[["options is included below.  For a complete description, see the",507],["field :description, :string",125],["description: \"\"\"",175],["<refsect1 id=\"description\">",210],["docbook-xsl. A description of the parameters you can use can be found in the",210],["For a complete description, see the Info files.",285],["description: description,",741],["description: description,",741],["defp description do",826],["description: description(),",111]],"useCount":5340},{"word":"details","context":[["# for details, see https://www.debian.org/doc/debian-policy/ or",24],["See `Phoenix.PubSub.broadcast/3` for usage details.",15],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["</citerefentry> for further details.</para>",420],["# for details, see /usr/share/doc/packaging-manual/",12]],"useCount":1553},{"word":"dev","context":[["if Mix.env == :dev do",50],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["{:phoenix_live_reload, \"~> 1.0\", only: :dev},",445],["{:earmark, \"~> 0.1\", only: :dev},",264],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\",141],["{:ex_doc, \"~> 0.11\", only: :dev},",110],["#\t--name $NAME --test > /dev/null \\",69],["[{:earmark, \"~> 0.1\", only: :dev},",59],["{:ex_doc, \"~> 0.7\", only: :dev},",57],["{:mix_test_watch, \"~> 0.2\", only: :dev},",57]],"useCount":3975},{"word":"development","context":[["# Set a higher stacktrace during development.",369],["# For development, we disable any cache and enable",572],["# Set a higher stacktrace during development. Avoid configuring such",93],["# Enables code reloading for development",47],["only in development as it allows listing of the application source",43],["If you are using a tool like [pow](http://pow.cx) in development,",38],["files. For example, in development the host is configured",24],["# Do not include metadata nor timestamps in development logs",590]],"useCount":1776},{"word":"dh_installdeb","context":[["# dh_installdeb will replace this with shell code automatically",1136],["# see: dh_installdeb(1)",1140]],"useCount":2276},{"word":"dhemail","context":[["&dhemail;",297],["<email>&dhemail;</email>",210],["<!ENTITY dhemail     \"<email>to_be_fill@debian</email>\">",15],["<!ENTITY dhemail     \"to_be_fill@debian\">",15],["<para>This manual page was written by &dhusername; &dhemail; for",297]],"useCount":834},{"word":"dhfirstname","context":[["<!ENTITY dhfirstname \"<firstname>FIRSTNAME</firstname>\">",295],["&dhfirstname;",284],["<!ENTITY dhfirstname \"FIRSTNAME\">",210],["<firstname>&dhfirstname;</firstname>",210],["<!-- dhusername could also be set to \"&dhfirstname; &dhsurname;\". -->",180]],"useCount":1179},{"word":"dhpackage","context":[["<para><command>&dhpackage;</command> is a program that...</para>",505],["<command>&dhpackage;</command> and <command>bar</command>",505],["behaviour of <application>&dhpackage;</application>. See",420],["<productname>&dhpackage;</productname>",210],["<para><command>&dhpackage;</command> provides some return codes, that can",210],["<command>&dhpackage;</command>",716],["<refname>&dhpackage;</refname>",507]],"useCount":3073},{"word":"dhsection","context":[["&dhsection;",297],["<!ENTITY dhsection   \"SECTION\">",210],["<manvolnum>&dhsection;</manvolnum>",210],["<!ENTITY dhsection   \"<manvolnum>SECTION</manvolnum>\">",296]],"useCount":1013},{"word":"dhsurname","context":[["&dhsurname;",284],["<surname>&dhsurname;</surname>",210],["<!ENTITY dhsurname   \"<surname>SURNAME</surname>\">",295],["<!ENTITY dhsurname   \"SURNAME\">",210],["<!-- dhusername could also be set to \"&dhfirstname; &dhsurname;\". -->",180]],"useCount":1179},{"word":"dhusername","context":[["<!-- dhusername could also be set to \"&dhfirstname; &dhsurname;\". -->",180],["<para>This manual page was written by &dhusername; &dhemail; for",297],["<!-- dhusername could also be set to \"&firstname; &surname;\". -->",30],["<!ENTITY dhusername  \"to_be_fill\">",30],["<!ENTITY dhusername  \"unknown\">",24],["<holder>&dhusername;</holder>",507],["<!ENTITY dhusername  \"root\">",17],["<!ENTITY dhusername  \"Basil Stotz\">",16]],"useCount":1101},{"word":"digest","context":[["\"Run \\\"mix phoenix.digest\\\" after building your static files \" <>",23],["by `mix phoenix.digest`.",38],["# You should set gzip to true if you are running phoenix.digest",545],["# manifest is generated by the mix phoenix.digest task",503],["digest: digest,",20],["digest: digest,",20],["digest = Keyword.get(opts, :key_digest, :sha256)",18],["digest: :sha256,",13]],"useCount":1180},{"word":"directly","context":[["# client asks for their current rank, push sent directly as a new event.",23],["By default, broadcasted events are pushed directly to the client, but",18],["then the message is pushed directly to the client:",17],["You can also directly pass the selector as a tuple.",20],["you can also reply directly to a client event for request/response style",23],["You can also push a message directly down the socket:",23],["#\tdirectly anyway, make this a do-nothing entry.",48],["# directly anyway, make this a do-nothing entry.",83],["# repositories directly:",373],["field directly:",377]],"useCount":1121},{"word":"directory","context":[["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["Imagine you have a directory with templates:",15],["Mix.raise \"--dev project must be inside Phoenix directory\"",22],["Returns the static path of a file in the static root directory.",32],["# Serve at \"/\" the given assets from \"priv/static\" directory",36],["Watchers are guaranteed to run in the application directory but only",37],["(when (file-directory-p package-dir)",136],[";; installed in a subdirectory of the respective site-lisp directory.",144],["# Uncomment to examine a Webserver directory",252],["# directory. For example, you can emulate configuration per environment",1035]],"useCount":2342},{"word":"disable","context":[["Logger.disable(self())",107],["Logger.disable(self)",24],[".\\\" .nh        disable hyphenation",280],["# For development, we disable any cache and enable",572],["# Phoenix.Param, we need to disable consolidation",19],["# To disable a check put `false` as second element:",12],["# You can disable this behaviour below:",12],["\"disable code reloading\"",11],[".\\\" .nf        disable filling",280]],"useCount":1317},{"word":"disconnect","context":[["test \"shuts down when receiving disconnect broadcasts on socket's id\" do",29],["{:disconnect, _, _} = dis ->",60],["# Would allow you to broadcast a \"disconnect\" event and terminate",444],["Endpoint.broadcast(\"user_sockets:1001\", \"disconnect\", %{})",17],["{:disconnect, err, s}",18],["Endpoint.broadcast(\"user_sockets:456\", \"disconnect\", %{})",18],["MyApp.Endpoint.broadcast(\"users_socket:\" <> user.id, \"disconnect\", %{})",19],["{:error | :disconnect, Exception.t, new_state :: any}",19],["{:disconnect, err, state} ->",22],["On subscribed, the transport must be able to handle \"disconnect\"",25]],"useCount":784},{"word":"dispatch","context":[["When used, dispatch to the appropriate controller/view/etc.",588],["plug :dispatch",182],["plug :dispatch",99],["defp dispatch(conn, []) do",32],["Handle the command line parsing and the dispatch to",24],["dispatch = :cowboy_router.compile([",26],["broadcast_from!(state, client_ref, {:dispatch, ref})",27],["unquote(exprs.dispatch)",27],["that dispatch to specific controllers and actions. Those",30],["and will dispatch to `:show` action in `API.V1.PageController`. A named",30]],"useCount":1547},{"word":"do","context":[["defp package do",1536],["using do",1580],["def change do",1634],["try do",1900],["setup do",2180],["cond do",2359],["quote do",9669],["def project do",4308],["defp deps do",3911],["def application do",3944]],"useCount":138752},{"word":"doc","context":[["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["@doc \"\"\"",36282],["@doc false",5038],["@doc ~S\"\"\"",1632],["@doc \"\"\"",1323],["@doc\"\"\"",319],["found in the docbook-xsl-doc-html package.",210],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210],["docbook-xsl-doc-* packages. Please remember that if you create the nroff",210]],"useCount":47273},{"word":"docbook","context":[["docbook-to-man in your Build-Depends control field.",252],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],["docbook-to-man $< > $@",254],["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["found in the docbook-xsl-doc-html package.",210],["The docbook-to-man binary is found in the docbook-to-man package.",252],["The docbook-to-man binary is found in the docbook-to-man package.",252],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210],["pull in xsltproc and docbook-xsl.",210],["\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" [",210]],"useCount":4438},{"word":"docs","context":[["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["# See http://elixir-lang.org/docs/stable/Application.Behaviour.html",53],["docs: docs,",58],["defp docs do",160],["See `text_input/3` for example and docs.",129],["{:earmark, \"~> 0.1\", only: :docs},",101],["docs: [",88],["# See http://elixir-lang.org/docs/stable/Supervisor.Behaviour.html",60],["docs: docs,",58]],"useCount":2959},{"word":"document","context":[["granted to copy, distribute and/or modify this document under",295],["sgml-parent-document:nil",257],["{:ok, document} = Document.from_json(decoded, error_template)",35],["assert document == %Document{",33],["# You should document the content of this",16],["iex> {:ok, document} = Alembic.Document.from_json(",12],["res = PodcastFeeds.parse(document)",13],["assert_idempotent document, error_template",34],["render a section of script tags in the head of the document. Some views",16]],"useCount":711},{"word":"documentation","context":[["`Phoenix.Endpoint.instrument/4` macro. Refer to its documentation for more",17],["See the `Phoenix.Channel.Transport` documentation for more information on writing",12],["See the \"Shared options\" section at the module documentation.",12],["# See `Phoenix.Token` documentation for examples in",430],["# See the documentation for `Mix` for more info on aliases.",350],["General documentation about man-pages and man-page-formatting:",210],["Read the documentation for `phoenix.gen.model` for more",33],["convenience or a documentation on such steps.",25],["See the module documentation for examples of using this function.",25],["more about format encoders in `Phoenix.Template` documentation.",22]],"useCount":1148},{"word":"documented","context":[["<para>The programs are documented fully by <citetitle>The Rise and",506],["The programs are documented fully by",284]],"useCount":790},{"word":"documents","context":[["This manual page documents briefly the",284],["<para>This manual page documents briefly the",507]],"useCount":791},{"word":"does","context":[["* `:log` - When false, does not log the query",47],["because the original program does not have a manual page.",524],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["# it to always work (and if it does not, it will raise).",382],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["Notes for using docbook2x: docbook2x-man does not automatically create the",210],["# Install-info-altdir does not actually exist.",144],["test \"does not show resource and instead throw error when id is nonexistent\", %{conn: conn} do",113],["If the request does not fail, the response is returned.",77],["log_failure_msg \"The user $DAEMONUSER, required to run $NAME does not exist.\"",49]],"useCount":2737},{"word":"domain","context":[["assert {:version3, @user, @domain} ==",24],[":ejabberd_commands.execute_command(:get_last, [@user, @domain])",20],["EjabberdSmMock.connect_resource @user, @domain, @resource<>\"2\"",20],["fn(user, domain) when is_binary(user) and is_binary(domain) ->",22],["fn(user, domain) when is_binary(user) and is_binary(domain) ->",22],["host: @domain)",42],["{@user, @domain,",64],["{@admin, @domain,",64],["[@user, @domain])",75],["# also use the \"errors\" domain as translations are placed",295]],"useCount":910},{"word":"don","context":[["In the assertion above, we don't particularly care about",42],["If you don't want brunch.io, you can re-run this generator",38],["Note, however, that we don't advise forwarding to another",17],["Notice that in order to render JSON data, we don't need to explicitly",22],["template is safe and that we don't need to escape its contents because",22],["# If you don't want TODO comments to cause `mix credo` to fail, just",27],["# We don't run a server during test. If one is required,",545],["# Many daemons don't delete their pidfiles when they exit.",143],["# If it's not running don't do anything",49],["# outputs to the terminal and we don't want that.",38]],"useCount":1020},{"word":"done","context":[["controller or another process. Such can be done via your endpoint:",17],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# Setting the shared mode must be done only after checkout",16],["Validation can be done using: `xmllint -''-noout -''-valid manpage.xml`",210],["# party users, it should be done in your mix.exs file.",196],["of your application supervision tree too (which is again done by",39],["* `:noreply` - Nothing to be done by the transport",25],["done writing a solution it can be checked and verified using the",18],[":ok -> {:ok, :done}",19],["{:done, acc}",23]],"useCount":1491},{"word":"during","context":[["# We don't run a server during test. If one is required,",545],["# Set a higher stacktrace during development.",369],["# Print only warnings and errors during test",569],["# Set a higher stacktrace during development. Avoid configuring such",93],["# Set a higher stacktrace during test",62],["configuration means the configuration is read during compilation",43],["code during debugging. Defaults to `false`.",40],["Runtime configuration, instead, is accessed during or",40],["with a 500 error during a HTML request, `render(\"500.html\", assigns)`",39],["during their tests.",14]],"useCount":1825},{"word":"e","context":[["set -e",1270],["<term><option>-e <replaceable>this</replaceable></option></term>",210],["#! /bin/sh -e",144],["<arg><option>-e <replaceable>this</replaceable></option></arg>",295],["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg choice=\"plain\"><option>-e <replaceable>this</replaceable></option></arg>",210],["#!/bin/sh -e",144],["e ->",111],["# Do NOT \"set -e\"",58],["[ ! -e \"$PIDFILE\" ] && return",49]],"useCount":3598},{"word":"each","context":[["When an event is broadcasted with `broadcast/3`, each channel subscriber can",17],["functions where the name of each function is the name of an event. For",19],["example, if someone instruments the `:render_view` event, then each",19],["# Explicitly get a connection before each test",19],["Enum.each values, fn({fun, list}) ->",24],["Enum.with_index(list) |> Enum.each fn({el, index}) ->",24],["# You can also customize the exit_status of each check.",27],["# If this value is set each time the server is",40],["Enum.each resource.actions, fn",55],[";; byte-compiles its elisp files for each 'emacs flavor' (emacs19,",144]],"useCount":785},{"word":"easier","context":[["imports other functionalities to make it easier",18],["import other functionality to make it easier",183],["imports other functionality to make it easier",835],["it easier to follow.",12]],"useCount":1048},{"word":"echo","context":[["echo \"preinst called with unknown argument \\`$1'\" >&2",295],["echo \"prerm called with unknown argument \\`$1'\" >&2",291],["echo \"postrm called with unknown argument \\`$1'\" >&2",283],["echo \"$NAME.\"",282],["echo \"postinst called with unknown argument \\`$1'\" >&2",267],["echo install/${PACKAGE}: install Info links for ${FLAVOR}",144],["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144],["FILES=`echo *.el`",144],["#FLAVORTEST=`echo $FLAVOR | cut -c-6`",144],["echo install/${PACKAGE}: Handling install for emacsen flavor ${FLAVOR}",144]],"useCount":3470},{"word":"ecto","context":[["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"]]",233],["#     $ mix ecto.setup",348],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"],",128],["Mix.Task.run \"ecto.create\", [\"--quiet\"]",214],["Mix.Task.run \"ecto.migrate\", [\"--quiet\"]",218],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"]]",233],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"]]",233]],"useCount":4232},{"word":"edit","context":[["* `:only` - a list of actions to generate routes for, for example: `[:show, :edit]`",30],["user_path  GET    /users/:id/edit  UserController.edit/2",31],["user_path  GET    /users/:id/edit  UserController.edit/2",31],["\"/users/88/comments/1/files/2/edit\"",40],["conn = get conn, user_path(conn, :edit, user)",44],["render(conn, \"edit.html\", post: post, changeset: changeset)",50],["render(conn, \"edit.html\", user: user, changeset: changeset)",107],["def edit(conn, %{\"id\" => id}) do",291],["* `GET /users/:id/edit` => `:edit`",29],["* `GET /users/:id/edit` => `:edit`",29]],"useCount":1496},{"word":"eex","context":[["applications: [:plug, :poison, :logger, :eex],",43],[":eex  ->",44],["{:eex,  \"new/web/templates/page/index.html.eex\",         \"web/templates/page/index.html.eex\"},",39],["{:eex,  \"new/web/views/error_view.ex\",                   \"web/views/error_view.ex\"},",39],["{:eex,  \"new/mix.exs\",                                   \"mix.exs\"},",39],["{:eex,  \"new/test/views/error_view_test.exs\",            \"test/views/error_view_test.exs\"},",39],["{:eex,  \"new/web/views/page_view.ex\",                    \"web/views/page_view.ex\"},",39],["{:eex,  \"new/config/prod.secret.exs\",                    \"config/prod.secret.exs\"},",39],["~r{web/templates/.*(eex)$}",514],["{:eex,  \"ecto/model_case.ex\",        \"test/support/model_case.ex\"},",39]],"useCount":2795},{"word":"el","context":[["rm -f *.el path.el",127],["FILES=`echo *.el`",144],["FLAGS=\"${SITEFLAG} -q -batch -l path.el -f batch-byte-compile\"",144],["cat << EOF > path.el",144],["rm -f *.el path.el",127],["Enum.with_index(list) |> Enum.each fn({el, index}) ->",24],["unquote(el)",11],["el(\"Text\", nil, [name])",11],["ln -sf ${ELRELDIR}/*.el .",14],["rm -f path.el",17]],"useCount":763},{"word":"elixir","context":[["elixir: \"~> 1.1\",",376],["elixir: \"~> 1.0\",",1784],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["elixir: \"~> 1.3\",",347],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["elixir: \"~> 1.2\",",689],["```elixir",383]],"useCount":9191},{"word":"elixirc_paths","context":[["elixirc_paths: elixirc_paths(Mix.env),",714],["elixirc_paths: elixirc_paths(Mix.env),",714],["defp elixirc_paths(_),     do: [\"lib\", \"web\"]",616],["defp elixirc_paths(_), do: [\"lib\"]",25],["defp elixirc_paths(:test), do: [\"lib\", \"web\", \"test/support\"]",609],["elixirc_paths: [\"lib\", \"web\"],",75],["defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]",65],["defp elixirc_paths(_),     do: [\"lib\"]",47],["elixirc_paths: [\"lib\"],",23]],"useCount":2888},{"word":"else","context":[[":else ->",52],["else",11421],["else",1225],["#else",146],["# else",59],["<% else %>",22],["sign = if sign1 == sign2, do: 1, else: -1",27],["} else {",27],["if scrub?(param), do: nil, else: param",34],["static_script_name = if static_script_name == \"/\", do: \"\", else: static_script_name",35]],"useCount":13248},{"word":"emacs","context":[["ELRELDIR=../../../emacs/site-lisp/${PACKAGE}",14],["(symbol-name debian-emacs-flavor)",14],["if [ ${FLAVOR} != emacs ]; then",144],[";; byte-compiles its elisp files for each 'emacs flavor' (emacs19,",144],["if [ ${FLAVOR} = emacs ]; then exit 0; fi",144],["ELDIR=/usr/share/emacs/site-lisp/${PACKAGE}",144],[";; -*-emacs-lisp-*-",144]],"useCount":748},{"word":"email","context":[["<email>&dhemail;</email>",210],["create unique_index(:users, [:email])",59],["user_luke = TestCommon.create_user(Repo, @default_user.username, @default_user.password, @default_user.email)",59],["email",57],["<email>&dhemail;</email>",210],["field :email, :string",212],["add :email, :string",135],["|> unique_constraint(:email)",76],["|> validate_format(:email, ~r/@/)",75],["email =",52]],"useCount":2083},{"word":"empty","context":[["def create_changeset(model, params\\\\:empty) do",41],["{:empty, _} ->",19],["test \"accepts/2 uses first accepts on empty or catch-all header\" do",20],["test \"accepts/2 on non-empty */*\" do",20],["This function is useful to remove empty strings sent",29],["* Changes empty parameters of `required_key` (recursively) to nils",33],["def update_changeset(model, params\\\\:empty) do",41],[".\\\" .sp <n>    insert n+1 empty lines",280],["def changeset(model, params \\\\ :empty) do",584],["def changeset(user, params \\\\ :empty) do",18]],"useCount":1399},{"word":"emulate","context":[["# directory. For example, you can emulate configuration per environment",1035],["To emulate this behaviour, this module provides the idea of",22]],"useCount":1057},{"word":"enable","context":[["Dynamo.Loader.enable",29],["# For development, we disable any cache and enable",572],["#    log_failure_msg \"and then set RUN to 'yes' in /etc/default/$NAME to enable it.\"",49],["This module also provides functions to enable a secure environment",25],["# Uncomment the lines below to enable the cookie session store",13],[".\\\" .hy        enable hyphenation",280],[".\\\" .fi        enable filling",280],["# you can enable the server option below.",545]],"useCount":1793},{"word":"enabled","context":[["# Code reloading can be explicitly enabled under the",569],["# Now with cache enabled",12],["warning: you have enabled :force_ssl but your host is currently set to localhost.",12],["if enabled? do",13],["enabled: false",14],["args = if IO.ANSI.enabled?, do: [\"--color\"|args], else: [\"--no-color\"|args]",14],["enabled: true",27],["are enabled.",35],["when the server is enabled. For example, the watcher below will run",39]],"useCount":735},{"word":"encode","context":[["def encode(type_info, value, _, _) do",35],["def encode(map), do: :jsx.encode(map)",30],["def encode(map), do: :jsx.encode(map)",30],["|> Poison.encode!",34],["to encode cookies, session and friends. Defaults to `nil` as it must",35],["|> OSC.Encoder.encode(options)",38],["def encode(message) do",42],["json = Poison.encode!(job)",44],["encoded_bytes = Packet.encode message",45],["|> Poison.encode!",102]],"useCount":890},{"word":"end","context":[["end",172024],["end,",210],["end if",225],["<!-- Keep this comment at the end of the file",257],["# end",429],["# end",886],["end)",3524],["end)",6725],["end",295720],["<% end %>",203]],"useCount":485437},{"word":"endpoint","context":[["# Start the endpoint when the application starts",549],["# start per endpoint:",549],["# :code_reloader configuration of your endpoint.",569],["# Tell Phoenix to update the endpoint configuration",570],["# Configures the endpoint",613],["# The default endpoint for testing",1051],["Starts the endpoint supervision tree.",73],["# endpoint (alongside the whole project ) whenever the",47],["# between endpoint <-> socket and avoid recompiling the",47],["endpoint.url",58]],"useCount":9447},{"word":"entry","context":[["entry = entry_xml |> parse",23],["typical entry in a Makefile or Makefile.am is:",40],["#\toption to the \"reload\" entry above. If not, \"force-reload\" is",48],["#\tdirectly anyway, make this a do-nothing entry.",48],["# option to the \"reload\" entry above. If not, \"force-reload\" is",34],["entry",28],["\"show.json\" entry to `render/2` in our view:",22],["# directly anyway, make this a do-nothing entry.",83],["manual page with: nroff -man <package>.<section> | less'. A typical entry",210],["less'.  A typical entry in a Makefile or Makefile.am is:",254]],"useCount":1025},{"word":"env","context":[["start_permanent: Mix.env == :prod,",2442],["#     import_config \"#{Mix.env}.exs\"",921],["import_config \"#{Mix.env}.exs\"",847],["elixirc_paths: elixirc_paths(Mix.env),",714],["# Where those two env variables return an absolute path to",427],["defmacro __before_compile__(env) do",201],["# Where those two env variables point to a file on",142],["\"\"\", env)",63],["build_embedded: Mix.env == :prod,",2423],["env",60]],"useCount":10642},{"word":"environment","context":[["as a workaround for releases where environment specific information",39],["# directory. For example, you can emulate configuration per environment",1035],["# Import environment specific config. This must remain at the bottom",630],["# from the system environment. Therefore, you will need",527],["# Specifies which paths to compile per environment.",407],["This module also provides functions to enable a secure environment",25],["<refsect1 id=\"environment\">",210],["# Specifies which paths to compile per environment",205],["Reloads the configuration given the application environment changes.",41],["All endpoints are configured in your application environment.",41]],"useCount":3394},{"word":"err","context":[["err -> err",41],["err ->",40],["err -> err",41],["raise err",41],["err",60],["{:error, err} ->",61],["{:error, _} = err -> err",114],["{:error, _} = err -> err",114],["{:error, err} -> flunk err",109],["{:error, err} -> flunk err",109]],"useCount":1073},{"word":"errcode","context":[["stop_server || errcode=$?",80],["errcode=$?",178],["errcode=0",120],["log_end_msg $errcode",120],["return $errcode",98],["force_stop || errcode=$?",40],["running || errcode=$?",40],["start_server || errcode=$?",40],["errcode=$",18]],"useCount":734},{"word":"error","context":[[":error ->",792],["# To deny connection, return `:error`.",431],["{:error, changeset} ->",1092],["{:error, reason} ->",836],[":error",612],["\"Server internal error\"",744],["error",307],["dgettext \"errors\", \"Here is the error message to translate\"",297],["# Because error messages were defined within Ecto, we must",295],["\"Server internal error\"",384]],"useCount":17899},{"word":"errorcode","context":[["<seg><errorcode>1</errorcode></seg>",210],["<seg><errorcode>1</errorcode></seg>",210],["<seg><errorcode>0</errorcode></seg>",210],["<seg><errorcode>0</errorcode></seg>",210]],"useCount":840},{"word":"errors","context":[["model.__struct__.changeset(model, data).errors",345],["assert json_response(conn, 422)[\"errors\"] != %{}",306],["dgettext \"errors\", \"Here is the error message to translate\"",297],["Helper for returning list of errors in model when passed certain data.",361],["You can also create the changeset manually and retrieve the errors",377],["iex> {:password, \"is unsafe\"} in changeset.errors",378],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["errors = \"\"\"",468],["# Print only warnings and errors during test",569]],"useCount":7790},{"word":"errors_on","context":[["def errors_on(struct, data) do",97],["iex> errors_on(%User{}, password: \"password\")",113],["def errors_on(model, data) do",346],["your model tests. See `errors_on/2`'s definition as reference.",445],["iex> errors_on(%User{}, %{password: \"password\"})",328],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328],["assert {:password, \"is unsafe\"} in errors_on(%User{}, password: \"password\")",113]],"useCount":1770},{"word":"esac","context":[["esac",1988]],"useCount":1988},{"word":"etc","context":[["controller, etc, so keep them short and clean, focused",556],["When used, dispatch to the appropriate controller/view/etc.",588],["# Use all HTML functionality (forms, tags, etc)",533],["<term><filename>/etc/foo.conf</filename></term>",210],["SCRIPTNAME=/etc/init.d/$NAME",143],["[ -r /etc/default/$NAME ] && . /etc/default/$NAME",142],["[ -r /etc/default/$NAME ] && . /etc/default/$NAME",142],["N=/etc/init.d/$NAME",127],["# skeleton\texample file to build /etc/init.d/ scripts.",78],["#\t\tThis file should be used to construct scripts for /etc/init.d.",78]],"useCount":2967},{"word":"event","context":[["refute_receive %Message{event: \"new_msg\"}",64],["event: event,",125],["event: event,",125],["when is_binary(topic) and is_binary(event) and is_map(payload) do",105],["[event|events] = events",99],["event",92],["\"event\" => \"phx_join\",",66],["# Would allow you to broadcast a \"disconnect\" event and terminate",444],["assert_receive %Message{event: \"phx_reply\",",52],["\"event\" => \"new_msg\",",51]],"useCount":4827},{"word":"events","context":[["be fired on instrumentation events. Read more on instrumentation in the",19],["[event|events] = events",99],["[event|events] = events",99],["Clients must join a channel to send and receive PubSub events on that channel.",25],["After a client has successfully joined a channel, incoming events from the",25],["* \"heartbeat\" events in the \"phoenix\" topic - should just emit",25],["events and subscribing to the given name. Defaults to:",21],["way these modules express their interest in events is by exporting public",19],["to instrument generic events. This macro is responsible for measuring the time",19],["Usually, users should prefer to instrument events using the `instrument/3`",19]],"useCount":688},{"word":"every","context":[["# token will be different every time, so verify static token",24],["and wanted quick access to the user for every action in your controller:",19],["macro defined in every Phoenix endpoint. This macro should only be used for",19],["it cannot be async. For this reason, every test runs",1504],["The definitions below will be executed for every view,",556],["* `call(conn, opts)` - invoked on every request (simply dispatches to",40],["Callback invoked by Plug on every request.",30],["# This is invoked every time a notification is being broadcast",30],["pushes with replies, clients must include a unique `ref` with every",25],["# for every socket subscribing to this topic, append an `is_editable`",24]],"useCount":2296},{"word":"ex","context":[["{:eex,  \"new/test/support/conn_case.ex\",                 \"test/support/conn_case.ex\"},",39],["{:eex,  \"new/web/controllers/page_controller.ex\",        \"web/controllers/page_controller.ex\"},",39],["{:eex,  \"new/web/views/error_view.ex\",                   \"web/views/error_view.ex\"},",39],["{:eex,  \"new/web/views/error_view.ex\",                   \"web/views/error_view.ex\"},",39],["{:eex,  \"ecto/model_case.ex\",        \"test/support/model_case.ex\"},",39],["assert_file \"web/views/user_view.ex\", fn file ->",43],["assert_file \"custom_path/test/support/conn_case.ex\",",44],["assert_file \"custom_path/test/support/model_case.ex\",",44],["assert_file \"custom_path/test/support/channel_case.ex\",",44],["~r{web/views/.*(ex)$},",531]],"useCount":3157},{"word":"ex_doc","context":[["{:ex_doc, \"~> 0.11\", only: :dev},",110],["{:ex_doc, \"~> 0.7\", only: :dev},",57],["{:ex_doc, \">= 0.0.0\", only: :dev},",37],["{:ex_doc, \"~> 0.11\", only: :dev}]",36],["{:ex_doc, \"~> 0.7\", only: :docs},",25],["{:ex_doc, \"~> 0.7\", only: :dev}]",25],["{:ex_doc, \"~> 0.14\", only: :dev},",28],["{:ex_doc, \"~> 0.10\", only: :docs},",31],["{:ex_doc, \"~> 0.11\", only: :docs},",28],["{:ex_doc, \"~> 0.11\", only: :dev}",30]],"useCount":692},{"word":"examine","context":[["# Uncommment to examine a FTP server",256],["# Uncomment to examine a Webpage",252],["# Uncomment to examine a Webserver directory",252]],"useCount":760},{"word":"example","context":[["# for example \"priv/ssl/server.key\".",427],["# watchers to your application. For example, we use it",570],["# directory. For example, you can emulate configuration per environment",1035],["# For example, to create, migrate and run the seeds file at once:",350],["<arg choice=\"opt\"><option>--example=<parameter>that</parameter></option></arg>",210],["#       url: [host: \"example.com\", port: 443],",427],["your module gains a set of macros for translations, for example:",294],["<arg><option>--example <replaceable>that</replaceable></option></arg>",295],["url: [host: \"example.com\", port: 80],",326],["<arg choice=\"plain\"><option>--example</option></arg>",420]],"useCount":7960},{"word":"examples","context":[["See the module documentation for examples of using this function.",25],["# Type \"mix help deps\" for more examples and options.",27],["## Expressions examples",32],["## Keywords examples",36],["<!-- These are several examples, how syntaxes could look -->",210],["# Type `mix help deps` for examples and options",232],["# Type `mix help deps` for more examples and options",755],["# Type \"mix help deps\" for more examples and options",699],["# See `Phoenix.Token` documentation for examples in",430],["# Type `mix help deps` for examples and options.",401]],"useCount":2882},{"word":"exception","context":[["def exception(opts) do",106],["exception ->",74],["def message(exception) do",72],["reraise exception, stacktrace",48],["exception =",47],["err = RuntimeError.exception(\"oops\")",30],["callback name. Otherwise an exception is raised.",28],["{:error, exception} ->",28],["assert exception.message =~ \"The changeset has not defined any constraint.\"",21],["def exception(msg) do",25]],"useCount":1010},{"word":"exec","context":[["/var/run/$NAME.pid --exec $DAEMON \\",65],["#\t/var/run/$NAME.pid --exec $DAEMON",48],["--exec $DAEMON",143],["/var/run/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS",71],["/var/run/$NAME.pid --exec $DAEMON",85],["--exec $DAEMON -- $DAEMON_OPTS",129],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\",141],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\",141],["start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON",142],["#       /var/run/$NAME.pid --exec $DAEMON",30]],"useCount":1026},{"word":"executed","context":[["The definitions below will be executed for every view,",556],["Stores a plug to be executed as part of the pipeline.",40],["executed with no instrumentation",38],["# Because those macros are executed multiple times,",27],["Stores a plug with the given options to be executed as part of",15],["Stores a plug to be executed as part of the plug pipeline.",15]],"useCount":691},{"word":"exists","context":[["assert File.exists?(\"photo_blog/web/models\")",32],[":meck.expect(File, :exists?, fn _ -> true end)",61],["# Check that the user exists (if we set a user)",49],["File.exists?(Path.join(umbrella, \"mix.exs\")) &&",43],["refute File.exists?(\"photo_blog/lib/photo_blog/repo.ex\")",32],["# But before we check for */* because if one exists and we serve html,",36],["File.exists?(\"brunch-config.js\"), install? && System.find_executable(\"npm\")",36],["assert File.exists?(\"photo_blog/web/channels\")",32],["refute File.exists? \"photo_blog/priv/static/js/app.js\"",32],["refute File.exists?(\"photo_blog/web/models/.keep\")",32]],"useCount":1202},{"word":"exit","context":[["[ -x $DAEMON ] || exit 0",85],["exit(:normal)",87],["test -x $DAEMON || exit 0",121],["status_of_proc \"$DAEMON\" \"$NAME\" && exit 0 || exit $?",142],["exit 0",1582],["exit 1",1444],["if [ ${FLAVOR} = emacs ]; then exit 0; fi",144],["exit 3",143],["# Many daemons don't delete their pidfiles when they exit.",143],["status_of_proc \"$DAEMON\" \"$NAME\" && exit 0 || exit $?",142]],"useCount":5000},{"word":"expect","context":[[":meck.expect(Workflow, :failed?, fn _ -> false end)",31],[":meck.expect(ConnectionOptionsResolver, :get_for_broker, fn _, _ -> %AMQPConnectionOptions{} end)",31],[":meck.expect(EtcdClusterQuery, :get_by_etcd_token, fn token -> %EtcdCluster{etcd_token: token} end)",38],[":meck.expect(Workflow, :save, fn _ -> :ok end)",39],[":meck.expect(QueueBuilder, :build, fn _,_,_ -> %OpenAperture.Messaging.Queue{name: \"\"} end)",44],[":meck.expect(ConnectionPools, :get_pool, fn _ -> %{} end)",48],["expect(:hackney, :body, 1, {:ok, \"response\"})",51],["# Here we use delete! (with a bang) because we expect",380],["Bypass.expect bypass, fn conn ->",374],[":meck.expect(File, :exists?, fn _ -> true end)",61]],"useCount":2231},{"word":"expected","context":[["assert expected == received",161],["expected = \"\"\"",252],["assert result == expected",248],["expected = %{",163],["assert Erl2ex.convert_str!(input, @opts) == expected",111],["expected = [",93],["expected = %{\"title\" => \"Test\",",87],["test \"it should NOT report expected code\" do",57],["# Is this the expected server",49],["assert expected == actual",48]],"useCount":2940},{"word":"explicitly","context":[["Notice that in order to render JSON data, we don't need to explicitly",22],["# Code reloading can be explicitly enabled under the",569],["# Use this if you want the user to explicitly set 'RUN' in",49],["Note that it is always possible to stop an application explicitly by calling",13],["# No recycling as we did it explicitly",21],["UserSocket module, explicitly outlining which origins",22],["Before being used, an endpoint must be explicitly started as part",38],["\"explicitly name the application then use the `--app APP` option.\"",43],["One can also pass a router explicitly as an argument to the task:",30],["Furthermore, all applications listed in the `:applications` key must be explicitly",13]],"useCount":820},{"word":"exs","context":[["import_config \"prod.secret.exs\"",431],["# Finally import the config/prod.secret.exs",478],["import_config \"#{Mix.env}.exs\"",847],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["#     mix run priv/repo/seeds.exs",380],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["# party users, it should be done in your mix.exs file.",196],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["#     import_config \"#{Mix.env}.exs\"",921]],"useCount":10727},{"word":"external","context":[["iex> redirect conn, external: \"http://elixir-lang.org\"",36],["external = opts[:external] ->",36],["raise ArgumentError, \"expected :to or :external option in redirect/2\"",36],["# The watchers configuration can be used to run external",570],["external = opts[:external] ->",36],["For security, `:to` only accepts paths. Use the `:external`",36],["external",36],["* `:root` - the root of your application for running external commands.",35],["@tag :external",31],["## Broadcasting to an external topic",25]],"useCount":985},{"word":"f","context":[["[ ! -f \"$PIDFILE\" ] && return",48],["assert f.errors == []",59],["cmd=`cat /proc/$pid/cmdline | tr \"\\000\" \"\\n\"|head -n 1 |cut -d : -f 1`",97],["rm -f *.el path.el",127],["FLAGS=\"${SITEFLAG} -q -batch -l path.el -f batch-byte-compile\"",144],["if [ -f /etc/default/$NAME ] ; then",49],["text_input f, :body",55],["[ ! -f \"$PIDFILE\" ] && return 1",146],["text_input f, :url",55],["rm -f $PIDFILE",239]],"useCount":1735},{"word":"failed","context":[["assert json_response(conn, 401)[\"errors\"][\"title\"] == \"Authentication failed\"",17],["Logger.error [info(scheme, endpoint, config), \" failed, port already in use\"]",12],[":meck.expect(Workflow, :failed?, fn _ -> false end)",31],["#          <failed-install-package> <version> `removing'",267],["error_prefix = \"Instrumenter #{inspect inst}.#{event}/3 failed.\\n\"",16],["A `ConnectionError` exception is raised if a connection attempt to the venue failed.",13],["purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)",283],["#        * <new-postrm> `failed-upgrade' <old-version>",283],["#        * <new-prerm> `failed-upgrade' <old-version>",290],["failed-upgrade)",292]],"useCount":1549},{"word":"false","context":[["@doc false",5038],["@moduledoc false",2257],["cache_static_lookup: false,",316],["binary_id: false",300],["check_origin: false,",471],["server: false",532],["false ->",557],["use ExUnit.Case, async: false",765],["import Supervisor.Spec, warn: false",927],["false",1378]],"useCount":18366},{"word":"favour","context":[["#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>",290],["#        * <deconfigured's-prerm> `deconfigure' `in-favour'",290],["#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'",267],["#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>",267]],"useCount":1114},{"word":"fetch","context":[["Keyword.fetch!(opts, :repo)",26],["case Map.fetch(assigns, :layout) do",34],["case Map.fetch(conn.query_params, callback) do",24],["application_name = Keyword.fetch!(binding, :application_name)",46],["case Map.fetch(args, \"q\") do",38],["Issues.GithubIssues.fetch(user, project)",26],["conn   = Keyword.fetch!(opts, :conn)",30],["router = Keyword.fetch!(opts, :router)",30],["def fetch(user, project) do",32],["defp find_format(\"*/*\", accepted), do: Enum.fetch!(accepted, 0)",33]],"useCount":902},{"word":"fetch_flash","context":[["plug :fetch_flash",15],["plug :fetch_flash",562],["defdelegate fetch_flash(conn), to: Phoenix.Controller",22],["@spec fetch_flash(Conn.t) :: Conn.t",22],["raise ArgumentError, message: \"flash not fetched, call fetch_flash/2\"",34],["def fetch_flash(conn, _opts \\\\ []) do",34]],"useCount":689},{"word":"fetch_session","context":[["plug :fetch_session",637],["to help define plugs. In the example above, `fetch_session/2`",30],["conn = fetch_session(conn)",21],["plug :fetch_session",20],["|> fetch_session",18]],"useCount":726},{"word":"fi","context":[["# fi",49],["fi",1489],[".\\\" .fi        enable filling",280],["#fi",193],["if [ ${FLAVOR} = emacs ]; then exit 0; fi",144],["#    fi",49],["#        fi",19]],"useCount":2223},{"word":"field","context":[["field :name, :string",479],["field :email, :string",212],["docbook-to-man in your Build-Depends control field.",252],["if error = form.errors[field] do",266],["def error_tag(form, field) do",269],["Given a User model that lists `:name` as a required field and validates",297],["field directly:",377],["to include xsltproc and docbook-xsl in your Build-Depends control field.",210],["field :title, :string",157],["field :description, :string",125]],"useCount":5701},{"word":"fields","context":[["fields",45],["fields: %{",41],[":io.format(format, fields)",21],["The resource fields are given using `name:type` syntax",22],["%JOSE.JWK{fields: %{}, keys: :undefined,",26],["and use the fields described in \"Custom Error Messages,\" below.",27],["Its fields are:",35],["{:ok, msg_error(fields: fields), buffer} ->",36],["{:ok, msg_error(fields: fields), buffer} ->",36],["fields: %{",144]],"useCount":726},{"word":"file","context":[["# Configuration from the imported file will override the ones defined",1036],["# This configuration file is loaded before any dependency and",632],["# For example, to create, migrate and run the seeds file at once:",350],["#     dngettext \"errors\", \"1 file\", \"%{count} files\", count",295],["# Example watch control file for uscan",276],["# of this file so it overrides the configuration defined above.",633],["# Rename this file to \"watch\" and then you can run the \"uscan\" command",276],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# file won't be loaded nor affect the parent project. For this reason,",1055],["# This file is responsible for configuring your application",1793]],"useCount":18250},{"word":"filename","context":[["<term><filename>/etc/foo.conf</filename></term>",210],["extension = Path.extname(file.filename)",11],["filename",17],["filename",43],["<term><filename>${HOME}/.foo.conf</filename></term>",210],["<term><filename>${HOME}/.foo.conf</filename></term>",210],["on <filename class=\"devicefile\">stderr</filename>:</para>",210],["on <filename class=\"devicefile\">stderr</filename>:</para>",210],["<term><filename>/etc/foo.conf</filename></term>",210],["if File.exists?(filename) do",11]],"useCount":1342},{"word":"files","context":[["#     dngettext \"errors\", \"1 file\", \"%{count} files\", count",295],["For a complete description, see the Info files.",285],["sgml-local-ecat-files:nil",257],["# It is also possible to import configuration files, relative to this",1035],["<application>Info</application> files.</para>",297],[".RI [ options ] \" files\" ...",558],["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["# which you typically run after static files are built.",503],["# containing the digested version of static files. This",503],["# when deploying your static files in production.",545]],"useCount":8092},{"word":"find","context":[["|> Finder.find(@testfiles)",18],["Logger.error \"Could not find static manifest at #{inspect outer}. \" <>",28],["@spec find(binary, binary, binary | integer, Client.t) :: Tentacat.response",18],["* `:root` - the template root to find templates",20],["# If you find anything wrong or unclear in this file, please report an",25],["defp find_format(exts, accepted),  do: Enum.find(exts, &(&1 in accepted))",33],["the \"accept\" header and find a matching format accordingly.",36],["# Uncomment to find new files on sourceforge, for debscripts >= 2.9",39],["# Uncomment to find new files on sourceforge, for devscripts >= 2.9",210],["# Uncomment to find new files on GooglePages",214]],"useCount":834},{"word":"first","context":[["defp handle_header_accept(conn, header, [first|_]) when header == [] or header == [\"*/*\"] do",36],["# we use the first format specified in the accepts list.",36],["to namespace the first argument of the generator:",22],["|> List.first",246],["|> List.first",99],["# Check if it's running first",49],["put_format(conn, first)",22],["location = Conn.get_resp_header(conn, \"location\") |> List.first",22],["a1 = List.first(context[:authorities])",35],["The first argument is the module name followed by",39]],"useCount":1102},{"word":"firstname","context":[["<firstname>&dhfirstname;</firstname>",210],["<firstname>&dhfirstname;</firstname>",210],["<!ENTITY dhfirstname \"<firstname>FIRSTNAME</firstname>\">",295],["<!ENTITY dhfirstname \"<firstname>FIRSTNAME</firstname>\">",295],["<!-- dhusername could also be set to \"&firstname; &surname;\". -->",30]],"useCount":1040},{"word":"fn","context":[["assert_raise Ecto.NoResultsError, fn ->",168],["assert capture_log(fn ->",116],["on_exit fn ->",393],["Bypass.expect bypass, fn conn ->",374],["assert_raise ArgumentError, fn ->",290],["assert_error_sent 404, fn ->",255],["assert_raise Mix.Error, fn ->",196],["assert capture_io(fn ->",173],["capture_log fn ->",125],["fn",140]],"useCount":12096},{"word":"foo","context":[["defp foo() do",50],["socket = subscribe_and_join!(socket(), Channel, \"foo:ok\")",42],["assert conn.resp_body == ~s({\"foo\":\"bar\"})",40],["<term><filename>/etc/foo.conf</filename></term>",210],["<refentrytitle>foo.conf</refentrytitle>",630],["<term><filename>${HOME}/.foo.conf</filename></term>",210],["at <ulink url=\"http://bugzilla.foo.tld\"/>.</para>",210],["|> scrub_params(\"foo\")",101],["assert conn.resp_body == \"{\\\"foo\\\":\\\"bar\\\"}\"",81],["{:ok, _, socket} = join(socket(), Channel, \"foo:ok\")",64]],"useCount":4504},{"word":"foobar","context":[["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["assert conn.resp_body == \"foobar\"",100],["conn = redirect(conn(:get, \"/\"), to: \"/<foobar>\")",20],["with the <package>foobar</package> library.</para>",210],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["# { :foobar, \"0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",40],["# { :foobar, \"0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",40],["conn = html(conn, \"foobar\")",20]],"useCount":930},{"word":"for","context":[["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# Type `mix help compile.app` for more information",1061],["# This file is responsible for configuring your application",1793],["# The default endpoint for testing",1051],["# for other strategies and supported options",818],["# for more information on OTP Applications",840],["# You can configure for your application as:",858],["# if you want to provide default values for your application for",858],["# if you want to provide default values for your application for",858],["# Configuration for the OTP application",2109]],"useCount":40889},{"word":"force","context":[["# echo \"Usage: $N {start|stop|restart|reload|force-reload}\" >&2",78],["#reload|force-reload)",142],["restart|force-reload)",209],["# and leave 'force-reload' as an alias for 'restart'.",143],["# 'force-reload' alias",143],["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" >&2",143],["force-stop)",97],["echo \"Usage: $N {start|stop|force-stop|restart|force-reload|status}\" >&2",49],["force-reload)",65]],"useCount":1689},{"word":"force_ssl","context":[["def force_ssl(conn, socket, endpoint, opts) do",22],["def force_ssl(%Plug.Conn{halted: true} = conn, _socket, _endpoint, _opts) do",22],["Phoenix.Config.cache(endpoint, {:force_ssl, socket}, fn _ ->",25],["* `:force_ssl` - ensures no data is ever sent via http, always redirecting",31],["#       force_ssl: [hsts: true]",427],["# Check `Plug.SSL` for all available options in `force_ssl`.",427],["# We also recommend setting `force_ssl`, ensuring no data is",426],["force_ssl",35],["force_ssl: [rewrite_on: [:x_forwarded_proto]],",63],["Plug.SSL.call(conn, force_ssl)",22]],"useCount":1761},{"word":"form","context":[["|> Keyword.put_new(:id, id_from(form, field))",64],["|> Keyword.put_new(:name, name_from(form, field))",69],["# Assuming form contains a User model",100],["test \"renders form for editing chosen resource\", %{conn: conn} do",247],["Generates tag for inlined form input errors.",269],["def error_tag(form, field) do",269],["if error = form.errors[field] do",266],["test \"renders form for new resources\", %{conn: conn} do",257],["# Assuming form contains a User schema",40],["div \".form-group\" do",36]],"useCount":3765},{"word":"format","context":[["format: \"$time $metadata[$level] $message\\n\",",656],["config :logger, :console, format: \"[$level] $message\\n\"",603],["assert conn.params[\"format\"] == \"json\"",130],["</citerefentry> format; see below.</para>",210],["# See uscan(1) for format",258],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],["# Returns the list of dependencies in the format:",196],["<application>Info</application> format; see below.</para>",296],["put_format(conn, format)",66],["case format do",72]],"useCount":5664},{"word":"forms","context":[["to create forms based only on connection information.",15],["# Use all HTML functionality (forms, tags, etc)",533],["# Use Phoenix.HTML to import all HTML functions (forms, tags, etc)",59],["via HTML forms. If you are providing an API, there",33],["The entry point for defining forms in Phoenix is with",14],["This is useful when you are creating forms that are not backed",15],["forms via the `phoenix_ecto` package.",15],["# Import all HTML functions (forms, tags, etc)",19],["Helpers related to producing HTML forms.",16]],"useCount":719},{"word":"found","context":[["# template is found, let's render it as 500",532],["\"Page not found\"",455],["\"Page not found\"",446],["\"Page not found - 404\"",59],["test \"renders page not found when id is nonexistent\", %{conn: conn} do",286],["The docbook-to-man binary is found in the docbook-to-man package.",252],["docbook-xsl. A description of the parameters you can use can be found in the",210],["The xsltproc binary is found in the xsltproc package. The XSL files are in",210],["<para>The upstreams <acronym>BTS</acronym> can be found",210],["found in the docbook-xsl-doc-html package.",210]],"useCount":3458},{"word":"from","context":[["# from the system environment. Therefore, you will need",527],["# Configuration from the imported file will override the ones defined",1036],["# Import convenience functions from controllers",565],["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["# Socket params are passed from the client and can",442],["# Import URL helpers from the router",254],["import Ecto.Query, only: [from: 2]",969],["import Ecto.Query, only: [from: 1, from: 2]",1336],["import Ecto.Query, only: [from: 1, from: 2]",1336],["# from the install scripts for gettext by Santiago Vila",144]],"useCount":11644},{"word":"fully","context":[["The programs are documented fully by",284],["<para>The programs are documented fully by <citetitle>The Rise and",506]],"useCount":790},{"word":"fun","context":[["fun.()",80],["Enum.each values, fn({fun, list}) ->",24],["fun.(conn)",24],["assert Connection.call(pid, fun) === 1",24],["fun = fn(_parent, _debug) ->",24],["defp unquote(String.to_atom(\"#{fun}_count\"))(unquote(String.to_atom(lang))) do",26],["fun = fn(n) ->",28],["fun.()",186],["{:ok, pid} = Connection.start_link(EvalConn, fun)",45],["fun = fn() ->",53]],"useCount":1226},{"word":"function","context":[["This function raises `Phoenix.NotAcceptableError`, which is rendered",36],["%{function: function, derivative: derivative}",35],["sent bad accept headers. For this reason, this function will",36],["end function",126],["This function is a shortcut for:",60],["`accepts/2` can be invoked as a function:",36],["%{function: function, derivative: derivative}",35],["An action is just a regular function that receives the connection",34],["In the previous section, we have used the `config/2` function which is",39],["`config/2` function:",43]],"useCount":1977},{"word":"functionality","context":[["* `:code_reloader` - when `true`, enables code reloading functionality",39],["* `:debug_errors` - when `true`, uses `Plug.Debugger` functionality for",40],["# Import common functionality",59],["Controllers are used to group common functionality in the same",36],["# Define common model functionality",77],["imports other functionality to make it easier",835],["# Use all HTML functionality (forms, tags, etc)",533],["import other functionality to make it easier",183],["This is only required if the watchers or code reloading functionality",29],["integrate with the `Phoenix.PubSub` layer for soft-realtime functionality.",24]],"useCount":1913},{"word":"functions","context":[["A controller by default provides many convenience functions for",36],["# Use Phoenix.HTML to import all HTML functions (forms, tags, etc)",59],["# Define LSB log_* functions.",143],[". /lib/lsb/init-functions",192],["# Alias the data repository and import query/model functions",300],["# We recommend using the bang functions (`insert!`, `update!`",373],["Do NOT define functions inside the quoted expressions",556],["* `Phoenix.Controller` - functions provided by Phoenix",36],["# Import convenience functions from controllers",565],["functions that are automatically defined in your endpoint.",40]],"useCount":2929},{"word":"generate","context":[["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["assert(CWMP.Protocol.Generator.generate!(",41],["* `:only` - a list of actions to generate routes for, for example: `[:show, :edit]`",30],["to generate \"RESTful\" routes to a given resource:",30],["It uses the configuration under `:url` to generate such.",52],["* `--no-ecto` - do not generate ecto files for",42],["* `--no-brunch` - do not generate brunch files",42],["* `:secret_key_base` - a secret key used as a base to generate secrets",40],["def generate(req) do",39],["which contains named helpers to help developers generate and keep",30]],"useCount":912},{"word":"generated","context":[["of the generated resource followed by any number of attributes:",62],["default in generated applications):",39],["automatically generated in your endpoint. Here is a summary of all the",40],["The generated resource will contain:",41],["generator, an endpoint was automatically generated as",41],["* test files for generated model and controller",39],["# generated by other debhelper scripts.",1136],["\"priv/static/manifest.json\" which is the file automatically generated",38],["the generated skeleton",43],["# manifest is generated by the mix phoenix.digest task",503]],"useCount":2443},{"word":"generates","context":[["test \"resources without block generates named routes for :index, :edit, :show, :new\" do",20],["* `static_url()` - generates the static URL without any path information",20],["* `url()` - generates the endpoint base URL without any path information",20],["in_tmp \"generates nested resource\", fn ->",35],["test \"generates nested resource\" do",35],["Phoenix automatically generates a module `Helpers` inside your router",30],["If the connection was successful, generates `Phoenix.PubSub`",25],["test \"1-Level nested resources generates nested named routes for :index, :edit, :show, :new\" do",20],["test \"resources generates named routes for :index, :edit, :show, :new\" do",20],["* `static_path(path)` - generates a route to a static file in `priv/static`",20]],"useCount":746},{"word":"generating","context":[["when generating the encryption and signing keys. Defaults to 32;",32],["when generating the encryption and signing keys. Defaults to 1000;",32],["* `:static_url` - configuration for generating URLs for static files.",37],["The router provides a set of macros for generating routes",30],["# we end-up generating a huge scope that drastically",27],["when generating the encryption and signing keys. Defaults to `:sha256';",27],["* `:name` - the name to be used when generating input fields",15],["* `:url` - configuration for generating URLs throughout the app.",43],["the various functions that end up generating a",15],["# meaningful, we use this information when generating URLs.",527]],"useCount":821},{"word":"generators","context":[["config :phoenix, :generators,",20],["refute file =~ \"config :phoenix, :generators\"",20],["Parses the attrs as received by generators.",15],["Phoenix generators expect the table to be given to #{key}:references.",14],["# Configures the namespace used by Phoenix generators",22],["# Configure phoenix generators",23],["config :phoenix, :generators,",310],["generators: [],",24],["default_opts = Application.get_env(:phoenix, :generators, [])",26],["# Configure phoenix generators",295]],"useCount":836},{"word":"get","context":[["conn = get conn(), path",144],["conn = get conn(), \"/\"",205],["line. Use the <option>--verbose</option> option, to get more info.",210],["get:",164],["conn = get conn, \"/\"",216],["# To get SSL working, you will need to add the `https` key",531],["conn(:get, \"/\")",142],["user = Repo.get!(User, id)",232],["conn = conn(:get, \"/\")",303],["get \"/\", PageController, :index",444]],"useCount":9444},{"word":"get_env","context":[["#               certfile: System.get_env(\"SOME_APP_SSL_CERT_PATH\")]",428],["http: [port: System.get_env(\"PORT\") || 4000],",48],["http: [port: System.get_env(\"PORT\")],",71],["#            certfile: System.get_env(\"SOME_APP_SSL_CERT_PATH\")]",104],["#            keyfile: System.get_env(\"SOME_APP_SSL_KEY_PATH\"),",104],["url: System.get_env(\"DATABASE_URL\"),",110],["secret_key_base: System.get_env(\"SECRET_KEY_BASE\")",126],["if System.get_env(\"EXERCISM_TEST_EXAMPLES\") do",165],["if !System.get_env(\"EXERCISM_TEST_EXAMPLES\") do",228],["#               keyfile: System.get_env(\"SOME_APP_SSL_KEY_PATH\"),",428]],"useCount":2531},{"word":"get_flash","context":[["import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]",515],["iex> get_flash(conn, :info)",54],["iex> get_flash(conn)",34],["def get_flash(conn, key) do",34],["defdelegate get_flash(conn), to: Phoenix.Controller",22],["defdelegate get_flash(conn, key), to: Phoenix.Controller",22],["@spec get_flash(Conn.t, term) :: Conn.t",22],["def get_flash(conn) do",34],["get_flash(conn)[flash_key(key)]",33],["persist_flash(conn, Map.put(get_flash(conn), flash_key(key), message))",33]],"useCount":868},{"word":"gettext","context":[["applications: [:phoenix, :phoenix_html, :cowboy, :logger, :gettext,",121],["compilers: [:phoenix, :gettext] ++ Mix.compilers,",322],["gettext \"Here is the string to translate\"",297],["A module providing Internationalization with a gettext-based API.",296],["Translates an error message using gettext.",290],["# from the install scripts for gettext by Santiago Vila",144],["{:gettext, \"~> 0.9\"},",203],["~r{priv/gettext/.*(po)$},",273],["See the [Gettext Docs](http://hexdocs.pm/gettext) for detailed usage.",206],["By using [Gettext](http://hexdocs.pm/gettext),",205]],"useCount":2864},{"word":"git","context":[["# { :foobar, \"0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",40],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1\"}",42],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1\"}",42],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["# Or git/path repositories:",1475]],"useCount":4917},{"word":"github","context":[["# { :foobar, \"0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",40],["{:websocket_client, git: \"https://github.com/jeremyong/websocket_client.git\", only: :test}]",33],["links: %{github: \"https://github.com/phoenixframework/phoenix\"},",39],["links: %{github: \"https://github.com/phoenixframework/phoenix\"},",39],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1\"}",42],["source_url: \"https://github.com/phoenixframework/phoenix\",",44],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["# { :barbat, \"~> 0.1\", github: \"elixir-lang/barbat\" }",72],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430]],"useCount":2213},{"word":"given","context":[["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["Broadcasts on the given pubsub server with the given",84],["# all active sockets and channels for a given user:",444],["from the path, unless `--module` or `--app` is given.",44],["# Check if a given process pid's cmdline matches a given name",97],["Broadcasts on the given pubsub server with the given",84],["Helper for returning list of errors in a struct when given certain data.",82],["given",52],["DAEMON_OPTS=\"\"          # Additional options given to the server",49],["# Check if a given process pid's cmdline matches a given name",97]],"useCount":4797},{"word":"group","context":[["<group choice=\"opt\">",210],["</group>",1260],["<group choice=\"req\">",1050],["div \".form-group\" do",36],["Controllers are used to group common functionality in the same",36],["group = Repo.get!(Group, id)",20],["group = Repo.insert! %Group{}",20],["group by facid",18],["This prevents N query problems and gives you a single place to group",18]],"useCount":2668},{"word":"h","context":[["alias = {:__aliases__, meta, [h]}",47],["<term><option>-h</option>",296],[".B \\-h, \\-\\-help",285],["<term><option>-h</option></term>",210],["<arg choice=\"plain\"><option>-h</option></arg>",210],["case Plug.Conn.Utils.media_type(h) do",37],["h",42],["<<to_lower_char(h)>> <> do_underscore(t, h)",42],["<<to_lower_char(h)>> <> do_underscore(t, h)",42],["defp tear_alias({:__aliases__, meta, [h|t]}) do",47]],"useCount":1993},{"word":"halt","context":[["conn |> send_resp(406, \"\") |> halt()",44],["conn |> redirect(Router.root_path) |> halt",23],["|> halt",210],["|> halt()",105],["System.halt(0)",105],["|> Plug.Conn.halt",26],["System.halt(1)",35],["System.halt(2)",47],["_, :halt -> :ok",21],["halt(conn)",17]],"useCount":710},{"word":"handle","context":[["On subscribed, the transport must be able to handle \"disconnect\"",25],["|> process( connection_handle.handle )",151],["must trap exists and correctly handle the `{:EXIT, _, _}` messages",19],["To push a message on join, send to self and handle in handle_info/2, ie:",23],["# to handle requests from services started subsequently which depend",143],["Generates a route to handle a #{verb} request to the given path.",30],["Defines a mount-point for a Socket module to handle channel definitions.",32],["option, you will need to manually handle",32],["def handle(req, state) do",37],["client = meta[:handle]",120]],"useCount":699},{"word":"handle_in","context":[["In addition to pushing messages out when you receive a `handle_in` event,",23],["client are routed through the channel's `handle_in/3` callbacks. Within these",25],["Channels can reply, synchronously, to any `handle_in/3` event. To match",25],["def handle_in(\"publish\", %{\"id\" => id}, socket) do",28],["def handle_in(\"new_msg\", message, socket) do",31],["def handle_in(\"shout\", payload, socket) do",32],["def handle_in(\"ping\", payload, socket) do",34],["def handle_in(\"boom\", _message, _socket) do",36],["def handle_in(\"create:post\", attrs, socket) do",46],["def handle_in(\"new_msg\", %{\"uid\" => uid, \"body\" => body}, socket) do",51]],"useCount":821},{"word":"handler","context":[["handler: handler,",43],["within the Socket handler. See `Phoenix.Socket` for more information",32],["handler: handler,",43],["Logger.error \"#{inspect handler}.id/1 returned invalid identifier #{inspect invalid}. \" <>",25],["def connect(endpoint, handler, transport_name, transport, serializer, params) do",25],["case handler.id(socket) do",28],["Logger.error \"#{inspect handler}.connect/2 returned invalid value #{inspect invalid}. \" <>",25],["case handler.connect(params, socket) do",25],["{_, opts} = handler.__transport__(transport)",23],["if channel = socket.handler.__channel__(topic, socket.transport_name) do",23]],"useCount":899},{"word":"has","context":[["After a client has successfully joined a channel, incoming events from the",25],["#   0 if daemon has been stopped",143],["#   0 if daemon has been started",143],["Overall, an endpoint has three responsibilities:",41],["and changing it at runtime has no effect. The compile-time",41],["Raises a `Plug.Conn.AlreadySentError` if the connection has already been",35],["Checks if Endpoint's web server has been configured to start.",33],["Given a User model that has validation for the presence of a value for the",63],["to the endpoint, unless the connection has already been",22],["noop if the connection has been halted.",25]],"useCount":994},{"word":"have","context":[["because the original program does not have a manual page.",524],[";; We have to add this to the load-path:",144],["Mix.raise \"Application name must start with a letter and have only lowercase \" <>",44],["However, different from routers, controllers have a single pipeline:",31],["As with routers, controllers also have their own plug pipeline.",31],["Sets which formats have a layout when rendering.",36],["assigns are merged and have higher precedence than the connection assigns",36],["It is important to notice that browsers have historically",36],["of `Phoenix.Endpoint`. If you have used the `mix phoenix.new`",39],["In the previous section, we have used the `config/2` function which is",39]],"useCount":1583},{"word":"header","context":[["defp handle_header_accept(conn, header, [first|_]) when header == [] or header == [\"*/*\"] do",36],["defp handle_header_accept(conn, header, [first|_]) when header == [] or header == [\"*/*\"] do",36],["defp handle_header_accept(conn, header, [first|_]) when header == [] or header == [\"*/*\"] do",36],["parse_header_accept(conn, String.split(header, \",\"), [], accepted)",36],["the \"accept\" header and find a matching format accordingly.",36],["defp handle_header_accept(conn, [header|_], accepted) do",36],["if header =~ \"*/*\" and \"html\" in accepted do",36],["* the accept header specified more than one media type preceeded",33],["# In case there is a header, we need to parse it.",36],["The `headers` option defines the header values (optional).",242]],"useCount":1342},{"word":"headers","context":[["headers:",34],["def get_token(client, params, headers) do",63],["headers: \"headers\",",35],["headers = [",33],["headers: headers,",32],["headers: \"headers\",",35],["sent bad accept headers. For this reason, this function will",36],["{:ok, 200, \"headers\", :client}}])",51],["headers",43],["The `headers` option defines the header values (optional).",242]],"useCount":2213},{"word":"hello","context":[["|> put_req_header(\"hello\", \"world\")",52],["\"/pages/hello\"",60],["\"http://example.com/pages/hello?some=query\"",46],["config :hello, Hello.Endpoint,",44],["assert get_req_header(conn, \"hello\") == [\"world\"]",39],["|> post(:hello)",39],["assert get_req_header(conn, \"hello\") == []",39],["do_call(:hello)",38],["{:safe, \"<hello>\"}",36],["iex> broadcast_from socket, \"new_message\", %{id: 1, content: \"hello\"}",36]],"useCount":1527},{"word":"help","context":[["# Type `mix help compile.app` for more information",1061],["# Type `mix help deps` for examples and options",232],["content_tag :span, translate_error(error), class: \"help-block\"",264],[".B \\-h, \\-\\-help",285],["# Type \"mix help compile.app\" for more information",749],["# Type \"mix help deps\" for more examples and options",699],["# Type `mix help compile.app` for more information.",405],["# Type `mix help deps` for examples and options.",401],["<option>--help</option>",295],["# Type `mix help deps` for more examples and options",755]],"useCount":6591},{"word":"here","context":[["#\tfor example by sending it SIGHUP, do it here.",48],["# Add authorization logic here as required.",33],["DESC=#PACKAGE              # Introduce a short description here",34],["# Dependencies listed here are available only for this project",38],["# Functions defined here are available to all other views/templates",63],["# for example by sending it SIGHUP, do it here.",83],["# Add code here, if necessary, that waits for the process to be ready",143],["# then implement that here.",143],["# here (which is why it is important to import them last).",1036],["NAME=#PACKAGE              # Introduce the short server's name here",34]],"useCount":1836},{"word":"holder","context":[["<holder>&dhusername;</holder>",507],["<holder>&dhusername;</holder>",507]],"useCount":1014},{"word":"host","context":[["host: @domain)",42],["url: [host: \"localhost\"],",638],["# You should also configure the url host to something",527],["# For production, we configure the host to read the PORT",527],["#       url: [host: \"example.com\", port: 443],",427],["url: [host: \"example.com\", port: 80],",326],["url: [host: \"example.com\"],",68],["host: \"localhost\",",59],["* to host web specific configuration for your",40],["host: \"192.168.100.1\"]",40]],"useCount":4092},{"word":"hostname","context":[["hostname: System.get_env(\"HOSTNAME\")",30],["test: [username: user, password: pass, database: \"#{app}_test\", hostname: \"localhost\",",25],["hostname: \"localhost\"",15],["[dev:  [username: user, password: pass, database: \"#{app}_dev\", hostname: \"localhost\"],",25],["hostname = \"#{UUID.uuid1()}\"",11],["updated_route = %{hostname: \"test_updated\"}",12],["hostname: \"localhost\",",694],["hostname: \"localhost\"",39]],"useCount":851},{"word":"hour","context":[["assert content =~ ~s(<select id=\"search_datetime_hour\" name=\"search[datetime][hour]\">)",66],["do: %{hour: hour, min: min, sec: sec}",64],["do: %{hour: hour, min: min, sec: sec}",64],["Time: <%= b.(:hour, []) %> : <%= b.(:min, []) %>",24],["Date: <%= b.(:day, []) %> / <%= b.(:month, []) %> / <%= b.(:hour, []) %>",24],["defp time_value({hour, min, sec}),",19],[":hour, opts when time != nil ->",19],["defp time_value({_, {hour, min, sec, _msec}}),",19],["defp time_value(%{\"hour\" => hour, \"min\" => min} = map),",19],["defp time_value({_, {hour, min, sec}}),",19]],"useCount":834},{"word":"how","context":[["# summary of how this script can be called:",1135],["<!-- These are several examples, how syntaxes could look -->",210],["the Phoenix.Config layer knows how to cache it.",111],["to change the layout, similar to how `put_view/2` can be used to change",36],["and how to customize the plug pipeline.",34],["The `.eex` extension is called a template engine which tells Phoenix how",20],["* `:builder` - specify how the select can be build. It must be a function",15],["Phoenix how to convert a template path into quoted expressions.",15],["* `:pubsub_timeout_ms` - how long a request can wait for the",14],["* `:window_ms` - how long the client can wait for new messages",14]],"useCount":1615},{"word":"html","context":[["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["test \"renders 404.html\" do",443],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["plug :accepts, [\"html\"]",601],["render(conn, \"new.html\", changeset: changeset)",553],["render \"500.html\", assigns",527],["def render(\"500.html\", _assigns) do",523],["def render(\"404.html\", _assigns) do",518],["render conn, \"index.html\"",476],["test \"render 500.html\" do",450]],"useCount":12860},{"word":"html_response","context":[["assert html_response(conn, 302)",83],["assert html_response(conn, 200) =~ \"Welcome to Phoenix!\"",301],["assert html_response?(conn)",120],["assert html_response(conn, 200) =~ \"New user\"",100],["assert html_response(conn, 200) =~ \"Edit user\"",97],["assert html_response(conn, 200) =~ \"Listing users\"",49],["assert html_response(conn, 200) =~ \"Show user\"",49],["assert html_response(conn, 200) =~ \"Edit post\"",55],["assert html_response(conn, 200)",72],["assert html_response(conn, 200) =~ \"New post\"",55]],"useCount":1321},{"word":"http","context":[["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["http: [port: 4001],",568],["http: [port: 4000],",556],["http: [port: {:system, \"PORT\"}],",503],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# ever sent via http, always redirecting to https:",426],["\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" [",210],["http://www.tldp.org/HOWTO/Man-Page/q2.html). -->",210],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["at <ulink url=\"http://bugzilla.foo.tld\"/>.</para>",210]],"useCount":8827},{"word":"https","context":[["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["# To get SSL working, you will need to add the `https` key",531],["# ever sent via http, always redirecting to https:",426],["#       https: [port: 443,",424],["#    https: [port: 443,",104],["def config(:https), do: false",49],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.",89],["By using [Gettext](https://hexdocs.pm/gettext),",89]],"useCount":4439},{"word":"i","context":[["i: 14 t: 8",200],["i: 17 t: 4",200],["i: 0 t: 10",200],["i: 7 t: 2",200],["i: 15 t: 18;",200],["i: 6 t: 12",200],["i: 1 t: 5",200],["i: 2 t: 18;",200],["i: 3 t: 6",200],["i: 8 t: 1",200]],"useCount":4288},{"word":"id","context":[["def show(conn, %{\"id\" => id}) do",542],["def show(conn, %{\"id\" => id}) do",542],["def delete(conn, %{\"id\" => id}) do",463],["def delete(conn, %{\"id\" => id}) do",463],["def id(_socket), do: nil",447],["#     def id(socket), do: \"users_socket:#{socket.assigns.user_id}\"",444],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["def edit(conn, %{\"id\" => id}) do",291],["def edit(conn, %{\"id\" => id}) do",291],["test \"renders page not found when id is nonexistent\", %{conn: conn} do",286]],"useCount":15029},{"word":"iex","context":[["iex> conn = put_flash(conn, :info, \"Welcome Back!\")",81],["iex> changeset = User.changeset(%User{}, password: \"password\")",376],["iex> use Timex",87],["iex> errors_on(%User{}, password: \"password\")",113],["iex> layout(conn)",144],["iex> errors_on(%User{}, %{password: \"password\"})",328],["iex> import #{__MODULE__}",166],["iex> {:password, \"is unsafe\"} in changeset.errors",378],["iex> get_flash(conn, :info)",54],["iex> layout_formats conn",72]],"useCount":3430},{"word":"if","context":[["if code_reloading? do",585],["# You should set gzip to true if you are running phoenix.digest",545],["# it to always work (and if it does not, it will raise).",382],["if running ; then",379],["Finally, if the test case interacts with the database,",1503],["# if you want to provide default values for your application for",858],["# and so on) as they will fail if something goes wrong.",371],["if error = form.errors[field] do",266],["if changeset.valid? do",318],["if test -x /usr/sbin/install-info-altdir; then",288]],"useCount":17066},{"word":"image","context":[["assert image.format == :png",49],["assert image.interlace_method == 0",58],["assert image.height == 32",53],["assert image.width == 32",53],["assert image.mime_type == \"image/png\"",49],["assert image.mime_type == \"image/png\"",49],["assert image.mask == nil",49],["assert image.compression == :zlib",49],["assert image.color_format == :palette",44],["assert image.color_type == 3",44]],"useCount":827},{"word":"images","context":[["assert_file \"photo_blog/priv/static/images/phoenix.png\"",36],["create_file Path.join(path, \"web/static/assets/images/phoenix.png\"), phoenix_png_text()",36],["create_file Path.join(path, \"priv/static/images/phoenix.png\"), phoenix_png_text()",43],["only: ~w(css images js favicon.ico robots.txt)",87],["only: ~w(css fonts images js favicon.ico robots.txt)",449],["\"/api/images/foo.png\"",16],["assert Helpers.static_path(__MODULE__, \"/images/foo.png\") == \"/images/foo.png\"",18],["assert Helpers.static_url(__MODULE__, \"/images/foo.png\") == url",18],["assert Helpers.static_path(__MODULE__, \"/images/foo.png\") == \"/images/foo.png\"",18],["assert_file \"photo_blog/web/static/assets/images/phoenix.png\"",28]],"useCount":934},{"word":"import","context":[["import Ecto.Changeset",1126],["import Ecto",1510],["import Ecto.Query, only: [from: 1, from: 2]",1336],["import Plug.Conn",660],["import Ecto.Query",864],["import Supervisor.Spec, warn: false",927],["import Ecto.Query, only: [from: 2]",969],["# It is also possible to import configuration files, relative to this",1035],["# here (which is why it is important to import them last).",1036],["import Ecto.Model",1121]],"useCount":18126},{"word":"import_config","context":[["import_config \"test.exs\"",11],["import_config \"#{Mix.env}.secret.exs\"",12],["import_config \"../apps/*/config/config.exs\"",12],["#import_config \"prod.secret.exs\"",14],["import_config \"dev.secret.exs\"",31],["# import_config \"prod.secret.exs\"",32],["import_config \"prod.secret.exs\"",431],["import_config \"#{Mix.env}.exs\"",847],["#     import_config \"#{Mix.env}.exs\"",921]],"useCount":2311},{"word":"important","context":[["configuration, so it's important to not copy this information outside of the",13],["# here (which is why it is important to import them last).",1036],["It is important to notice that browsers have historically",36],["It is also important to not confuse `Phoenix.Controller.render/3`",32],["|> Filter.important(config)",15]],"useCount":1132},{"word":"imported","context":[["# Configuration from the imported file will override the ones defined",1036],["Those functions are imported from two modules:",36],["`Plug.Conn.halt/1` (which is by default imported into controllers).",14],["# automatically imported) and so shouldn't be used either.",11]],"useCount":1097},{"word":"imports","context":[["`Phoenix.Router` imports functions from both `Plug.Conn` and `Phoenix.Controller`",29],["# This block is expanded within all views for aliases, imports, etc",24],["automatically imports all functions defined here as",22],["mostly focused on imports, uses and aliases.",21],["# we need our imports",21],["imports other functionalities to make it easier",18],["imports other functionality to make it easier",835],["on imports, uses and aliases.",556]],"useCount":1526},{"word":"in","context":[["# See `Phoenix.Token` documentation for examples in",430],["<!-- Fill in your name for FIRSTNAME and SURNAME. -->",506],["# Do not print debug messages in production",539],["# when deploying your static files in production.",545],["case \"$?\" in",572],["This can be used in your application as:",577],["# Do not include metadata nor timestamps in development logs",590],["# And access this configuration in your application as:",857],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["case \"$1\" in",1413]],"useCount":24514},{"word":"include","context":[["Record.defrecord :xmlElement, Record.extract(:xmlElement, from_lib: \"xmerl/include/xmerl.hrl\")",20],["include an input tag with name `_csrf_token`. When set to false, this",24],["pushes with replies, clients must include a unique `ref` with every",25],["targets (such as build), you will need to include xsltproc",40],["will include routes to the following actions:",35],["# Do not include metadata nor timestamps in development logs",590],["# Finally, we also include the path to a manifest",503],["debian/rules file targets (such as build), you will need to include",252],["to include xsltproc and docbook-xsl in your Build-Depends control field.",210],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143]],"useCount":2025},{"word":"included","context":[["included: [\"lib/\", \"src/\", \"web/\", \"apps/\"],",23],["options is included below.  For a complete description, see the",507],["Any included application, defined in the `:included_applications` key of the",13],["A summary of options is included below.",279],["[# These are the default files included in the package",86],["routes included in the router above:",30],["Useful for defining routes not included in the builtin macros:",11],["# these are the files included in the analysis",26],["\"included\" => [%{",12]],"useCount":987},{"word":"index","context":[["Phoenix.View.render(YourApp.UserView, \"index.html\", name: \"John Doe\")",66],["conn = get conn, user_path(conn, :index)",73],["|> redirect(to: page_path(conn, :index))",87],["assert redirected_to(conn) == user_path(conn, :index)",106],["def index(conn, params) do",113],["|> redirect(to: user_path(conn, :index))",126],["get \"/\", PageController, :index",444],["test \"lists all entries on index\", %{conn: conn} do",422],["def index(conn, _params) do",1239],["render conn, \"index.html\"",476]],"useCount":5483},{"word":"info","context":[["#     config :logger, level: :info",848],["<refentrytitle>info</refentrytitle>",630],["config :logger, level: :info",578],["# See the documentation for `Mix` for more info on aliases.",350],["if test -x /usr/sbin/install-info-altdir; then",288],["line. Use the <option>--verbose</option> option, to get more info.",210],["Mix.shell.info \"\"\"",203],["#       level: :info,",155],["# Install-info-altdir does not actually exist.",144],["install-info-altdir --quiet --section \"\" \"\" --dirname=${FLAVOR} /usr/share/info/${PACKAGE}.info.gz",118]],"useCount":5350},{"word":"information","context":[["See `request!/5` for more detailed information.",78],["See `request/5` for more detailed information.",77],["# Type `mix help compile.app` for more information",1061],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",83],["# Type \"mix help compile.app\" for more information",749],["# for more information on OTP Applications",840],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",124],["right after outputting the requested information. -->",210],["# Type `mix help compile.app` for more information.",405],["# meaningful, we use this information when generating URLs.",527]],"useCount":5465},{"word":"init","context":[["N=/etc/init.d/$NAME",127],["def init(state) do",102],["defoverridable [init: 1, call: 2]",87],["def init(_) do",305],["def init([]) do",330],["def init(:ok) do",349],["def init(opts) do",413],["SCRIPTNAME=/etc/init.d/$NAME",143],[". /lib/init/vars.sh",143],[". /lib/lsb/init-functions",192]],"useCount":3756},{"word":"input","context":[["input",89],["Generates tag for inlined form input errors.",269],["input = \"\"\"",144],["assert Erl2ex.convert_str!(input, @opts) == expected",111],["def is_valid?(input) do",31],["tag(:input, opts)",68],["case input do",46],["~s(<input name=\"search[key]\" type=\"hidden\" value=\"false\">) <>",42],["assert Markdown.parse(input) == expected",36],["assert expected == basic_html_sanitize(input)",34]],"useCount":2199},{"word":"insert","context":[["case Repo.insert(changeset) do",538],["post = Repo.insert! %Post{}",126],["|> Repo.insert!",102],["organization = insert(:organization)",85],["user = insert(:user)",131],["user = Repo.insert! %User{}",263],["|> Repo.insert!",275],[".\\\" .br        insert line break",280],[".\\\" .sp <n>    insert n+1 empty lines",280],["# We recommend using the bang functions (`insert!`, `update!`",373]],"useCount":4535},{"word":"inside","context":[["# the key and cert in disk or a relative path inside priv,",427],["Templates are often rendered inside layouts. By default, Phoenix",36],["controller. For example, `MyApp.UserController` will render templates inside",36],["in_tmp \"new inside umbrella\", fn ->",36],["test \"new inside umbrella\" do",37],["# and cannot be accessed from applications inside the apps folder",38],["running inside your app:",39],["# To depend on another app inside the umbrella:",88],["Do NOT define functions inside the quoted expressions",556],["inside a transaction which is reset at the beginning",1502]],"useCount":3149},{"word":"inspect","context":[["raise \"cannot render template #{inspect template} without format. Use an atom if the \" <>",36],["\"expected one of #{inspect accepted}\"",44],["|> IO.inspect",264],["adapter: #{inspect binding[:adapter_module]}#{kw_to_config adapter_config[:test]}",33],["Mix.raise \"Module name #{inspect name} is already taken, please choose another name\"",55],["Mix.raise \"Module name must be a valid Elixir alias (for example: Foo.Bar), got: #{inspect name}\"",46],["got #{inspect result}",45],["\"letters, numbers and underscore, got: #{inspect name}\" <> extra",43],["|> IO.inspect",37],["IO.inspect reason",38]],"useCount":2042},{"word":"install","context":[["#        * <new-postrm> `abort-install' <old-version>",283],["#        * <new-preinst> `install'",295],["# from the install scripts for gettext by Santiago Vila",144],["echo install/${PACKAGE}: Handling install for emacsen flavor ${FLAVOR}",144],["#          <failed-install-package> <version> `removing'",267],["purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)",283],["#        * <new-postrm> `abort-install'",283],["if test -x /usr/sbin/install-info-altdir; then",288],["#        * <new-preinst> `install' <old-version>",295],["install|upgrade)",295]],"useCount":3797},{"word":"integer","context":[["* `packet_id` : An integer of value upto 65536 (2 bytes) representing packet identifier",24],["@spec json_response(Conn.t, status :: integer | atom) :: map | no_return",22],["@spec response(Conn.t, status :: integer | atom) :: binary | no_return",22],["@spec html_response(Conn.t, status :: integer | atom) :: String.t | no_return",22],["\"type\" => \"integer\"",76],["datatype: :integer,",48],["add :user_id, :integer",37],["@spec text_response(Conn.t, status :: integer | atom) :: String.t | no_return",22],["Helpers.integer(opts)",33],["|> Map.get(:integer)",30]],"useCount":921},{"word":"interacts","context":[["Finally, if the test case interacts with the database,",1503]],"useCount":1503},{"word":"internal","context":[["\"Server internal error\"",384],["# as it contains internal routing information.",18],["\"Server internal error\"",744],["* `:queue` - Whether to block waiting in an internal queue for the",19],["%{errors: %{detail: \"Server internal error\"}}",23],["%{errors: %{detail: \"Server internal error\"}}",37],["\"Server internal error - 500\"",59]],"useCount":1284},{"word":"into","context":[["messages are encoded in the channel into a format defined by",25],["Util.send_error(conn, Enum.into(changeset.errors, %{}))",23],["# verification, you can put default assigns into",442],["|> Enum.into(%{})",277],["Enum.into attrs, %{}, fn",56],["Endpoint configuration is split into two categories. Compile-time",40],["opts = Enum.into(opts, %{})",32],["* `:private` - a map of private data to merge into the connection when a route matches",27],["chooses. Those messages must be decoded in the transport into a",25],["Returns a response with body decoded into JSON map.",25]],"useCount":1528},{"word":"invalid","context":[["test \"new with invalid database adapter\" do",33],["in_tmp \"new with invalid database adapter\", fn ->",33],["assert_raise Mix.Error, ~s(Unknown database \"invalid\"), fn ->",33],["test \"new with invalid args\" do",37],["If `params` are nil, an invalid changeset is returned",60],["#     dgettext \"errors\", \"is invalid\"",113],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["If no params are provided, an invalid changeset is returned",587],["test \"changeset with invalid attributes\" do",671]],"useCount":2853},{"word":"invalid_attrs","context":[["@invalid_attrs %{}",1095],["conn = post conn, post_path(conn, :create), post: @invalid_attrs",25],["conn = put conn, post_path(conn, :update, post), post: @invalid_attrs",24],["assert file =~ ~S|conn = put conn, user_path(conn, :update, user), user: @invalid_attrs|",30],["assert file =~ ~S|conn = post conn, user_path(conn, :create), user: @invalid_attrs|",30],["changeset = Post.changeset(%Post{}, @invalid_attrs)",32],["assert file =~ ~S|@invalid_attrs %{}|",48],["conn = put conn, user_path(conn, :update, user), user: @invalid_attrs",53],["conn = post conn, user_path(conn, :create), user: @invalid_attrs",56],["changeset = User.changeset(%User{}, @invalid_attrs)",131]],"useCount":1651},{"word":"io","context":[["# with brunch.io to recompile .js and .css sources.",567],["{:ok, client} = Test.Client.start_link as: \"dmoreno@serverboards.io\"",11],["\"Category-href\" => \"http://webscraper.io/test-sites/e-commerce/static/computers\",",12],["assert io =~ ~r/#PID<\\d+\\.\\d+\\.\\d+> sends to #PID<\\d+\\.\\d+\\.\\d+>:\\n    :hello/",14],[":io.format(format, fields)",21],["{:ok, client} = Client.start_link as: \"dmoreno@serverboards.io\"",25],["If you don't want brunch.io, you can re-run this generator",38],["Phoenix uses an optional assets build tool called brunch.io",38],["io = capture_dbg(fn() ->",56]],"useCount":782},{"word":"is","context":[["# This configuration file is loaded before any dependency and",632],["# is restricted to this project.",632],["# It is also possible to import configuration files, relative to this",1035],["# here (which is why it is important to import them last).",1036],["# here (which is why it is important to import them last).",1036],["# This file is responsible for configuring your application",1793],["# This configuration is loaded before any dependency and is restricted",1055],["# This configuration is loaded before any dependency and is restricted",1055],["inside a transaction which is reset at the beginning",1502],["of the test unless the test case is marked as async.",1504]],"useCount":34355},{"word":"is_atom","context":[["def render(conn, template) when is_binary(template) or is_atom(template) do",36],["defmacro __using__(which) when is_atom(which) do",600],["when is_atom(view) and is_binary(template) or is_atom(template) do",48],["when is_atom(view) and is_binary(template) or is_atom(template) do",48],["defp template_name(name, format) when is_atom(name), do:",37],["defp flash_key(atom) when is_atom(atom), do: Atom.to_string(atom)",33],["def server?(otp_app, endpoint) when is_atom(otp_app) and is_atom(endpoint) do",33],["def server?(otp_app, endpoint) when is_atom(otp_app) and is_atom(endpoint) do",33],["defp scrub_param(%{__struct__: mod} = struct) when is_atom(mod) do",32],["alias when is_atom(alias) -> [path: path, alias: alias]",30]],"useCount":1435},{"word":"is_binary","context":[["when is_binary(topic) and is_binary(event) and is_map(payload) do",105],["when is_atom(view) and is_binary(template) or is_atom(template) do",48],["and is_binary( key )",71],["when is_binary(topic) and is_binary(event) and is_map(payload) do",105],["when is_binary(topic) and is_map(payload) do",43],["defp template_name(name, _format) when is_binary(name), do:",37],["def render(conn, template) when is_binary(template) or is_atom(template) do",36],["defp flash_key(binary) when is_binary(binary), do: binary",33],["def scrub_params(conn, required_key) when is_binary(required_key) do",33],["def static_path(_endpoint, path) when is_binary(path) do",32]],"useCount":1141},{"word":"it","context":[["it cannot be async. For this reason, every test runs",1504],["# it to always work (and if it does not, it will raise).",382],["# it to always work (and if it does not, it will raise).",382],["# it to always work (and if it does not, it will raise).",382],["# template is found, let's render it as 500",532],["# watchers to your application. For example, we use it",570],["# of this file so it overrides the configuration defined above.",633],["imports other functionality to make it easier",835],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# here (which is why it is important to import them last).",1036]],"useCount":13092},{"word":"its","context":[["# When encoded, the changeset returns its errors",88],["* `start_link()` - starts the Endpoint supervision tree, including its",41],["#\tIf the daemon responds to changes in its config file",48],["#\tIf the daemon can reload its config files on the fly",48],["# If the daemon can reload its config files on the fly",83],["# If the daemon responds to changes in its config file",83],["# this means its contents can be read but not tampered with.",90],["# If the daemon can reload its configuration without",143],[";; byte-compiles its elisp files for each 'emacs flavor' (emacs19,",144],["# and its dependencies with the aid of the Mix.Config module.",1768]],"useCount":2962},{"word":"join","context":[["|> Enum.join(\" \")",104],["|> Enum.join(\", \")",93],["|> Path.join",84],["|> Enum.join(\"\\n\")",117],["|> Enum.join",129],["project_path = Path.join(File.cwd!, \"custom_path\")",206],["|> Enum.join(\",\")",50],["# join",53],["{:ok, _, socket} = join(socket(), Channel, \"foo:ok\")",64],["|> Enum.join",82]],"useCount":3521},{"word":"js","context":[["~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},",423],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif)$},",95],["# with brunch.io to recompile .js and .css sources.",567],["only: ~w(css fonts images js favicon.ico robots.txt)",449],["only: ~w(css images js favicon.ico robots.txt)",87],["create_file Path.join(path, \"priv/static/js/phoenix.js\"), phoenix_js_text()",40],["create_file Path.join(path, \"priv/static/js/phoenix.js\"), phoenix_js_text()",40],["embed_text :phoenix_js, from_file: Path.expand(\"../../priv/static/phoenix.js\", __DIR__)",39],["node.js, which includes npm, can be found at http://nodejs.org.",39],["that requires node.js and npm. Installation instructions for",38]],"useCount":2855},{"word":"json","context":[["parsers: [:urlencoded, :multipart, :json],",621],["plug :accepts, [\"json\"]",549],["cache_static_manifest: \"priv/static/manifest.json\"",380],["render_errors: [accepts: ~w(html json)],",349],["|> put_resp_content_type(\"application/json\")",62],["assert get_format(conn) == \"json\"",72],["def render(\"error.json\", %{changeset: changeset}) do",107],["{:ok, conn: put_req_header(conn, \"accept\", \"application/json\")}",111],["cache_static_manifest: \"priv/static/manifest.json\",",123],["assert conn.params[\"format\"] == \"json\"",130]],"useCount":6219},{"word":"json_decoder","context":[["@plug_parsers Plug.Parsers.init(parsers: [:json], json_decoder: Poison)",11],["json_decoder: Poison,",11],["|> Plug.Parsers.call(Plug.Parsers.init(parsers: [:json], json_decoder: Poison))",13],["json_decoder: Poison",27],["json_decoder: Poison",644]],"useCount":706},{"word":"json_response","context":[["|> json_response(200)",78],["assert json_response(conn, 200)[\"data\"][\"id\"]",153],["assert json_response(conn, 201)[\"data\"][\"id\"]",138],["def json_response(conn, status) do",22],["if json_response?(conn) do",24],["defp json_response?(conn) do",24],["assert json_response(conn, 200)",30],["|> resp(200, \"{}\") |> json_response(:ok) == %{}",49],["assert json_response(conn, 200)[\"data\"] == []",133],["assert json_response(conn, 422)[\"errors\"] != %{}",306]],"useCount":1168},{"word":"k","context":[["Map.put(acc, k, scrub_param(v))",33],["headers = for {k, v} <- headers, k in copy, do: {k, v}",22],["{k, :boolean}  -> {k, \", default: false\"}",22],["k",26],["{k, _}         -> {k, \"\"}",29],["{k, _}         -> {k, \"\"}",29],["case k do",31],["Enum.reduce(param, %{}, fn({k, v}, acc) ->",33],["Enum.map(kw, fn {k, v} ->",33],["\",\\n  #{k}: #{inspect v}\"",33]],"useCount":697},{"word":"keep","context":[["quote location: :keep do",338],["controller, etc, so keep them short and clean, focused",556],["# you likely want to automate and keep it away from",89],["# In this file, we keep production configuration that",89],[":keep ->",44],["quote location: :keep, unquote: false do",44],["unless format == :keep do",43],["{:keep, \"new/web/models\",                                \"web/models\"},",39],["{:keep, \"ecto/test/models\",          \"test/models\"},",39],["{:keep, \"new/test/channels\",                             \"test/channels\"},",39]],"useCount":1579},{"word":"key","context":[["key: Mandrill.key,",71],["and is_binary( key )",71],["key: Mandrill.key,",71],["key",84],["|> Enum.flat_map(fn {key, errors} -> for msg <- errors, do: {key, msg} end)",94],["|> Enum.flat_map(fn {key, errors} -> for msg <- errors, do: {key, msg} end)",94],["# disk for the key and cert.",142],["# the key and cert in disk or a relative path inside priv,",427],["# for example \"priv/ssl/server.key\".",427],["# To get SSL working, you will need to add the `https` key",531]],"useCount":5415},{"word":"kind","context":[["kind, reason ->",152],["selectionSet: %{kind: :SelectionSet,",132],["%{kind: :Document,",127],["selections: [%{kind: :Field,",110],["selectionSet: %{kind: :SelectionSet, loc: %{start: 0},",90],["type: %{kind: :NamedType,",85],["name: %{kind: :Name, loc: %{start: 0},",84],["definitions: [%{kind: :OperationDefinition,",67],["kind",54],[":erlang.raise(kind, reason, stack)",46]],"useCount":1896},{"word":"lang","context":[["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["# { :barbat, \"~> 0.1\", github: \"elixir-lang/barbat\" }",72],["# See http://elixir-lang.org/docs/stable/Supervisor.Behaviour.html",60],["# { :foobar, \"0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",40],["# { :foobar, \"~> 0.1\", git: \"https://github.com/elixir-lang/foobar.git\" }",58],["# See http://elixir-lang.org/docs/stable/Application.Behaviour.html",53],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1\"}",42]],"useCount":3514},{"word":"last","context":[["# on this one.  As a last resort, sleep for some time.",143],["# here (which is why it is important to import them last).",1036],["table of the last _n_ issues in a github project",18],["request body or parameters as last argument:",22],["The `current_state` option contains the last state of the :gen_fsm server",24],["can be provided as the last character to indicate a \"topic:subtopic\" match. If",24],["|> List.last()",29],["|> List.last",32],["|> List.last",125],["# needed by services started subsequently.  A last resort is to",143]],"useCount":1726},{"word":"layout","context":[["{mod, layout} -> {mod, template_name(layout, format)}",37],["iex> layout(conn)",144],["assert layout(conn) == false",79],["false    -> raise \"cannot use put_layout/2 with atom/binary when layout is false, use a tuple instead\"",37],["{mod, _} -> Map.put(private, :phoenix_layout, {mod, layout})",37],["{mod, layout} -> {mod, template_name(layout, format)}",37],["accepts the layout name to be given as a string or as an atom. If a",37],["string, it must contain the format. Passing an atom means the layout",37],["Stores the layout for rendering.",37],["assert layout(conn) == {AppView, \"app.html\"}",39]],"useCount":2233},{"word":"left","context":[[".\\\" .ad b      justify to both left and right margins",280],[".\\\" .ad l      left justify",280],["If we are terminating because the client left, the reason will be",22],["`{:shutdown, :left}`. Similarly, if we are terminating because the",22],["handle_result({:stop, {:shutdown, :left}, :ok, put_in(socket.ref, ref)}, :handle_in)",21],["{:shutdown, :left | :closed} |",21],["expr(left, sources, query) <> \" IN (\" <> args <> \")\"",19],["If there is no coffee left then money should be refunded",17],["Given there are 1 coffees left in the machine",14],["[left, right] = args",13]],"useCount":788},{"word":"length","context":[["length: length,",20],["assert f.source.validations == [url: {:length, min: 3}]",38],["defp random_string(length) do",46],[":crypto.strong_rand_bytes(length) |> Base.encode64 |> binary_part(0, length)",50],[":crypto.strong_rand_bytes(length) |> Base.encode64 |> binary_part(0, length)",50],["<<message_bytes::bytes-size(length), remainder::binary>> = from_third_byte",20],["assert f.source.validations == [body: {:length, min: 3}]",38],["assert length(body) == 0",29],["|> length",23],["assert length(body) == 2",22]],"useCount":722},{"word":"let","context":[["If you are interested in providing your own adapter,  let's",12],["defp eval_bindings(_bindings, _env), do: throw({:error, \"Unbalanced let* bindings\"})",19],["# let some servers to die gracefully and",97],["defp eval_list([{:symbol, \"let*\"}, {list_type, bindings, _}, body], env, _)",19],["let :json do",21],["(let ((package-dir (concat \"/usr/share/\"",136],["# template is found, let's render it as 500",532]],"useCount":836},{"word":"level","context":[["config :logger, level: :info",578],["#     config :logger, level: :info",848],["format: \"$time $metadata[$level] $message\\n\",",656],["level: :info,",46],["level: :info",56],["level: :debug",59],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],["#       level: :info,",155],["config :logger, :console, format: \"[$level] $message\\n\"",603],["config :logger, level: :warn",593]],"useCount":4257},{"word":"lib","context":[["{:eex,  \"new/lib/application_name.ex\",                   \"lib/application_name.ex\"},",38],["defp elixirc_paths(_),     do: [\"lib\", \"web\"]",616],["defp elixirc_paths(:test), do: [\"lib\", \"web\", \"test/support\"]",609],[". /lib/lsb/init-functions",192],["{:eex,  \"ecto/repo.ex\",              \"lib/application_name/repo.ex\"},",38],["defp elixirc_paths(_),     do: [\"lib\"]",47],["defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]",65],["elixirc_paths: [\"lib\", \"web\"],",75],[". /lib/init/vars.sh",143],["{:eex,  \"new/lib/application_name.ex\",                   \"lib/application_name.ex\"},",38]],"useCount":2451},{"word":"like","context":[["# Set :encryption_salt if you would also like to encrypt it.",90],["`{:system, \"ENV_VAR\"}`. When given a tuple like `{:system, \"PORT\"}`,",39],["If you are using a tool like [pow](http://pow.cx) in development,",38],["the extension too, like \"index.json\"",36],["\". The application name is inferred from the path, if you'd like to \" <>",44],["You would then write your assertion like:",63],["# courses, books, articles, and the like. Contact us if you are in doubt.",122],["You could then write your assertion like:",381],["<!-- TITLE should be something like \"User commands\" or similar (see",210],["# courses, books, articles, and the like. Contact us if you are in doubt.",135]],"useCount":1455},{"word":"line","context":[[".\\\" .br        insert line break",280],["quote line: -1 do",52],["line: 2,",67],["line: 1",72],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["## Command line options",96],["# Compulsory line, this is a version 3 file",253],["line: 1,",223],["line. Use the <option>--verbose</option> option, to get more info.",210],["|> set_pos(line)",180]],"useCount":3399},{"word":"links","context":[["links: %{github: \"https://github.com/phoenixframework/phoenix\"},",39],["links: %{",307],["echo install/${PACKAGE}: install Info links for ${FLAVOR}",144],["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144],["\"links\": {",18],["{:links, links} = Process.info(self, :links)",18],["{:links, links} = Process.info(self, :links)",18],["{:links, links} = Process.info(self, :links)",18],["links = Floki.find html, \"td.td-actions a\"",16],["assert Enum.at(links, 0) |> Floki.text == \"View\"",16]],"useCount":854},{"word":"lisp","context":[["ELDIR=/usr/share/emacs/site-lisp/${PACKAGE}",144],[";; -*-emacs-lisp-*-",144],["rm -rf /usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["ELCDIR=/usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],[";; installed in a subdirectory of the respective site-lisp directory.",144],["ELRELDIR=../../../emacs/site-lisp/${PACKAGE}",14]],"useCount":734},{"word":"list","context":[["list",38],["# Returns the list of dependencies in the format:",196],["list",230],["Helper for returning list of errors in model when passed certain data.",361],["Helper for returning list of errors in a struct when given certain data.",82],["def list do",51],["|> list",44],["expects a list of tuples containing the executable and its arguments.",39],["when list_type == :list or list_type == :vector do",36],["# we use the first format specified in the accepts list.",36]],"useCount":3199},{"word":"listitem","context":[["</listitem>",2070],["<listitem>",2070]],"useCount":4140},{"word":"lists","context":[["Given a User model that lists `:name` as a required field and validates",297],["test \"lists all entries on index\", %{conn: conn} do",422],["Given a User schema that lists `:name` as a required field and validates",82],["assert file =~ ~S|test \"lists all entries on index\"|",30],["other lists or maps and all entries will be normalized to string",24],["(like maps and keyword lists) or any Enumerable where the element",19],["{bins, vars} = :lists.unzip(exprs.binding)",17],["pairs  = :lists.zip(keys, vals)",16],["keys   = :lists.map(&elem(&1, 0), record)",16],["vals   = :lists.map(&{&1, [], nil}, keys)",16]],"useCount":1085},{"word":"live_reload","context":[["live_reload: [",535],["live_reload: [",13],["* `:live_reload` - configuration for the live reload option.",38],["socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket",470]],"useCount":1056},{"word":"load","context":[["def load(_), do: :error",42],["(setq load-path (cons package-dir load-path))",118],["(setq load-path (cons package-dir load-path))",118],["(setq load-path (cons \".\" load-path) byte-compile-warnings nil)",130],["(setq load-path (cons \".\" load-path) byte-compile-warnings nil)",130],[";; We have to add this to the load-path:",144],["# load and run the solution checker",19],["# Locate and load and perhaps start the users solution.",19],["will automatically load all templates at \"web/template/user\" and include them",17],["(debian-pkg-add-load-path-item package-dir)",14]],"useCount":908},{"word":"loaded","context":[["# file won't be loaded nor affect the parent project.",25],["for %Mix.Dep{app: app, opts: opts} <- Mix.Dep.Umbrella.loaded do",35],["is loaded only at compile-time.",39],["# This configuration file is loaded before any dependency and",632],["# file won't be loaded nor affect the parent project. For this reason,",1055],["# Note this file is loaded before any dependency and is restricted",25],["`.app` file will also be loaded, but they won't be started.",13],["# them here, so they can be loaded by Credo before running the analysis.",12],["# This configuration is loaded before any dependency and is restricted",1055],["If the `_type` is not loaded, the application will first be loaded using `load/1`.",12]],"useCount":2926},{"word":"loc","context":[["%{kind: :Field, loc: %{start: 0},",36],["name: %{kind: :Name, loc: %{start: 0}, value: \"id\"},",16],["name: %{kind: :Name, loc: %{start: 0},",84],["selectionSet: %{kind: :SelectionSet, loc: %{start: 0},",90],["loc: %{start: 0},",914],["selections: [%{kind: :Field, loc: %{start: 0},",30],["type: %{kind: :NamedType, loc: %{start: 0},",21],["selections: [%{kind: :FragmentSpread, loc: %{start: 0},",20],["name: %{kind: :Name, loc: %{start: 0}, value: \"myQuery\"},",18],["name: %{kind: :Name, loc: %{start: 0}, value: \"user\"},",18]],"useCount":1287},{"word":"local","context":[["If the mode is local, the session will point to a local",15],["# We do this to trick dialyzer to not complain about non-local returns.",14],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["If the mode is local, the session will point to a local",15],[":supervisor.start_link({:local, __MODULE__}, __MODULE__, [])",22],["local = {{2013,3,5},{23,25,19}}",29],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["sgml-local-catalogs:nil",257],["sgml-local-ecat-files:nil",257],["for mode <- [:local, :pubsub] do",15]],"useCount":910},{"word":"localhost","context":[["Session.url :test, \"http://localhost:8888/page_1.html\"",52],["Session.url :cdtest, \"http://localhost:8888/page_1.html\"",52],["navigate_to(\"http://localhost:9090/page1.html\")",40],["{:ok, pid} = FleetApi.Direct.start_link(\"http://localhost:7002\")",40],["[host: \"localhost\", path: \"/\"]",39],["host: \"localhost\",",59],["Session.url :fftest, \"http://localhost:8888/page_1.html\"",60],["navigate_to \"http://localhost:9090/page1.html\"",114],["url: [host: \"localhost\"],",638],["hostname: \"localhost\",",694]],"useCount":2215},{"word":"location","context":[["|> put_resp_header(\"location\", url)",36],["# Set location header",28],["|> put_resp_header(\"location\", \"new location\")",39],["|> put_resp_header(\"location\", \"new location\")",39],["quote location: :keep, unquote: false do",44],["{_, location} = List.keyfind(conn.resp_headers, \"location\", 0)",48],["{_, location} = List.keyfind(conn.resp_headers, \"location\", 0)",48],["quote location: :keep do",338],["|> put_resp_header(\"location\", path)",71],["assert List.keymember?(conn.resp_headers, \"location\", 0)",50]],"useCount":1030},{"word":"log_daemon_msg","context":[["log_daemon_msg \"Stopping $DESC\" \"$NAME\"",49],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Stopping $DESC\" \"$NAME\"",143],["#log_daemon_msg \"Reloading $DESC\" \"$NAME\"",143],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC \" \"$NAME\"",85],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC\" \"$NAME\"",58],["# log_daemon_msg \"Reloading $DESC configuration files\" \"$NAME\"",49],["log_daemon_msg \"Starting $DESC \" \"$NAME\"",49],["log_daemon_msg \"Restarting $DESC\" \"$NAME\"",192],["log_daemon_msg \"Stopping (force) $DESC\" \"$NAME\"",49],["log_daemon_msg \"Checking status of $DESC\" \"$NAME\"",49]],"useCount":866},{"word":"log_end_msg","context":[["#log_end_msg $?",143],["0|1) [ \"$VERBOSE\" != no ] && log_end_msg 0 ;;",286],["2) [ \"$VERBOSE\" != no ] && log_end_msg 1 ;;",286],["log_end_msg 1",281],["log_end_msg 0",196],["*) log_end_msg 1 ;; # Failed to start",143],["1) log_end_msg 1 ;; # Old process is still running",143],["0) log_end_msg 0 ;;",143],["log_end_msg $errcode",120],["#       log_end_msg 1",49]],"useCount":1866},{"word":"logger","context":[[":logger,",150],["#     config :logger, :console,",152],["[applications: [:logger],",153],["applications: [:phoenix, :phoenix_html, :cowboy, :logger,",174],["config :logger, level: :info",578],["config :logger, level: :warn",593],["config :logger, :console, format: \"[$level] $message\\n\"",603],["config :logger, :console,",815],["#     config :logger, level: :info",848],["[applications: [:logger]]",969]],"useCount":5851},{"word":"long","context":[["with long options starting with two dashes (`-').  A summary of",507],["with long-polling fallback. The transports can be configured",41],["with `Phoenix.View.render/3` in the long term. The former expects",32],["the data being sent, as long as something was sent.",28],["to a JSONP as long as the callback field is present in",24],["test \"very long list\" do",22],["Returns the content type as long as it matches the given format.",22],["Joins a long poll socket.",15],["Returns the long polling session token.",15],["the data being sent, as long as something was replied.",14]],"useCount":782},{"word":"macros","context":[[".\\\" Some roff macros, for reference:",280],[".\\\" for manpage-specific macros, see man(7)",280],["macros are named after HTTP verbs. For example:",30],["The router provides a set of macros for generating routes",30],["# Because those macros are executed multiple times,",27],["Useful for defining routes not included in the builtin macros:",11],["your module gains a set of macros for translations, for example:",294]],"useCount":952},{"word":"make","context":[["imports other functionality to make it easier",835],["# We make no guarantees that this code is fit for any purpose.",122],["# directly anyway, make this a do-nothing entry.",83],[";; Adapted for dh-make by Jim Van Zandt <jrv@debian.org>",132],["#\tdirectly anyway, make this a do-nothing entry.",48],["# We make no guarantees that this code is fit for any purpose.",135],["import other functionality to make it easier",183],["-''-param make.year.ranges \"1\" \\",210],["-''-param make.single.year.ranges \"1\" \\",210],["<!-- Normally the help and version options make the programs stop",210]],"useCount":2329},{"word":"man","context":[["docbook-to-man $< > $@",254],["allowed: see man(7), man(1). -->",296],["allowed: see man(7), man(1). -->",296],[".\\\" other parameters are allowed: see man(7), man(1)",280],[".\\\" for manpage-specific macros, see man(7)",280],[".\\\" other parameters are allowed: see man(7), man(1)",280],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],["docbook-to-man in your Build-Depends control field.",252]],"useCount":5344},{"word":"manifest","context":[["defp manifest, do: Path.join(Mix.Project.manifest_path, @manifest)",19],["Erlang.compile(manifest(), mappings, :asn1, :erl, opts[:force], fn",19],["@manifest \".compile.asn1\"",19],["# manifest is generated by the mix phoenix.digest task",503],["cache_static_manifest: \"priv/static/manifest.json\"",380],["* `:cache_static_manifest` - a path to a json manifest file that contains",38],["\"priv/static/manifest.json\" which is the file automatically generated",38],["# Finally, we also include the path to a manifest",503],["Logger.error \"Could not find static manifest at #{inspect outer}. \" <>",28],["cache_static_manifest: \"priv/static/manifest.json\",",123]],"useCount":1739},{"word":"manpage","context":[["manpage.1: manpage.sgml",254],["<contrib>Wrote this manpage for the Debian system.</contrib>",210],["<!-- Please adjust the date whenever revising the manpage. -->",296],[".\\\" for manpage-specific macros, see man(7)",280],[".\\\" Please adjust this date whenever revising the manpage.",280],["manpage.1: manpage.xml",210],["manpage.1: manpage.xml",210],["manpage.1: manpage.sgml",254],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],["manpage.xml'",210]],"useCount":2788},{"word":"manpages","context":[["/usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \\",45],["/usr/share/xml/docbook/stylesheet/docbook-xsl/manpages/docbook.xsl \\",165],["manpages/docbook.xsl manpage.dbk'.  A manual page",40],["manpages/docbook.xsl",40],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/nwalsh/manpages/docbook.xsl",45],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/docbook-xsl/manpages/docbook.xsl",165],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210]],"useCount":710},{"word":"manual","context":[["because the original program does not have a manual page.",524],["<para>This manual page documents briefly the",507],["<para>This manual page was written by &dhusername; &dhemail; for",297],["<para>This manual page was written for the &debian; distribution",296],["This manual page documents briefly the",284],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["<para>This manual page was written for the Debian system",210],["manual page with: nroff -man <package>.<section> | less'. A typical entry",210],["<para>This manual page was written for the Debian distribution",210]],"useCount":3164},{"word":"manvolnum","context":[["<manvolnum>1</manvolnum>",1050],["<manvolnum>5</manvolnum>",630],["<manvolnum>5</manvolnum>",630],["<manvolnum>1</manvolnum>",1050],["<!ENTITY dhsection   \"<manvolnum>SECTION</manvolnum>\">",296],["<manvolnum>&dhsection;</manvolnum>",210],["<!ENTITY dhsection   \"<manvolnum>SECTION</manvolnum>\">",296],["<manvolnum>&dhsection;</manvolnum>",210]],"useCount":4372},{"word":"map","context":[["|> Enum.map(fn",91],["|> Enum.map(",33],["|> Enum.map(",33],["Enum.map(kw, fn {k, v} ->",33],["|> Enum.map(fn _ -> \"..\" end)",34],["Enum.map(users, fn user ->",36],["The event's message must be a serializable map.",44],["|> Enum.map(&String.strip/1)",63],["Enum.map(param, &scrub_param/1)",33],["map",90]],"useCount":2636},{"word":"marked","context":[["templates, `@inner` will be always marked as safe.",14],["when the checkbox is not marked.",15],["of the test unless the test case is marked as async.",1504]],"useCount":1533},{"word":"match","context":[["Channels can reply, synchronously, to any `handle_in/3` event. To match",25],["# <Webpage URL> <string match>",252],["plug :match",147],["plug :match",98],["match _ do",85],["match _ do",34],["Routes can also match glob-like patterns, routing any path with a common",27],["# if we are using a daemonuser then look for process that match",49],["Calls the Endpoint and bypasses Router match.",25],["can be provided as the last character to indicate a \"topic:subtopic\" match. If",24]],"useCount":1373},{"word":"matches","context":[["* `:assigns` - a map of data to merge into the connection when a route matches",23],["No plug is invoked in case no matches were found.",28],["assert matches == []",43],["# Check if a given process pid's cmdline matches a given name",97],["# In case no render clause matches or no",532],["* `:private` - a map of private data to merge into the connection when a route matches",27],["If the origin header matches the allowed origins, no origin header was",25],["Returns the content type as long as it matches the given format.",22],["All paths that matches the forwarded prefix will be sent to",16],["# This action only matches if a param is missing",16]],"useCount":879},{"word":"maybe","context":[["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506],[".\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection",280]],"useCount":786},{"word":"meck","context":[[":meck.unload(Workflow)",110],[":meck.new(File, [:unstick])",110],[":meck.new(Workflow, [:passthrough])",110],[":meck.new(ConnectionPools, [:passthrough])",50],[":meck.unload",101],["import :meck",96],[":meck.unload(File)",96],[":meck.expect(File, :exists?, fn _ -> true end)",61],[":meck.expect(ConnectionPools, :get_pool, fn _ -> %{} end)",48],[":meck.unload(ConnectionPools)",50]],"useCount":3252},{"word":"merge","context":[["* `:private` - a map of private data to merge into the connection when a route matches",27],["opts = Keyword.merge(default_opts, opts)",27],["push socket, \"joined\", Map.merge(%{status: \"connected\"}, socket.assigns)",32],["* `:assigns` - a map of data to merge into the connection when a route matches",23],["defp to_map(assigns), do: Dict.merge(%{}, assigns)",45],["push socket, \"new_msg\", Map.merge(msg,",22],["# this file to properly merge your previous config entries.",21],["& &1 |> Map.merge(assigns) |> Map.put(:layout, layout)",34],["Map.merge(@default_arguments, provided_arguments)",37],["|> Keyword.merge(opts)",40]],"useCount":698},{"word":"message","context":[["assert decoded_message == message",90],["# need the message to be pluralized or not, this could be",114],["# Ecto will pass the :count keyword if the error message is",114],["message",143],["format: \"$time $metadata[$level] $message\\n\",",656],["config :logger, :console, format: \"[$level] $message\\n\"",603],["dgettext \"errors\", \"Here is the error message to translate\"",297],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],["Translates an error message using gettext.",290],["defexception [:message]",261]],"useCount":8103},{"word":"messages","context":[["# It is also common to receive messages from the client and",34],["* Handling of outgoing messages",25],["Custom error messages (in EEx format), provided as :message, can use the following values:",26],["iex> Process.info(self)[:messages]",32],["Clears all flash messages.",34],["# poll without messages sends 204 no_content",35],["resources \"/messages\", MessageController",40],["# Do not print debug messages in production",539],["# Because error messages were defined within Ecto, we must",295],["Conveniences for translating and building error messages.",294]],"useCount":2524},{"word":"metadata","context":[["metadata: [:request_id]",671],["# value for client metadata.",24],["metadata: [:user_id]",29],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],["#       metadata: [:user_id]",154],["format: \"$date $time [$level] $metadata$message\\n\",",23],["# Do not include metadata nor timestamps in development logs",590],["* `compile_metadata` is a map of compile-time metadata about the environment",17],["controller. The map of runtime metadata passed to instrumentation",17],["format: \"$time $metadata[$level] $message\\n\",",656]],"useCount":2402},{"word":"method","context":[["req = request(method: :GET,",33],["method: :get,",32],["%NoRouteError{message: \"no route found for #{conn.method} #{path} (#{inspect router})\",",30],["case method do",28],["def conn(method, path, params_or_body \\\\ nil) do",26],["\"method\" => \"get\"",35],["assert conn.method == \"GET\"",49],["assert conn.method == \"POST\"",74],["assert \"POST\" == conn.method",81],["assert \"GET\" == conn.method",123]],"useCount":1459},{"word":"migrate","context":[["\"test\": [\"ecto.create --quiet\", \"ecto.migrate\", \"test\"]]",103],["$ mix ecto.migrate",34],["Mix.Task.run \"ecto.migrate\", [\"--quiet\"]",218],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["# For example, to create, migrate and run the seeds file at once:",350],["\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",14]],"useCount":1062},{"word":"migration","context":[["* a migration file for the repository",60],["migration: true,",304],["migration = String.replace(path, \"/\", \"_\")",15],["assert [migration] = Path.wildcard(\"priv/repo/migrations/*_create_admin_user.exs\")",19],["assert file =~ ~r/migration: false/",19],["This will result in a migration with an `:integer` column",19],["assert_file migration, fn file ->",107],["if opts[:migration] != false do",19],["assert [migration] = Path.wildcard(\"priv/repo/migrations/*_create_post.exs\")",54],["assert [migration] = Path.wildcard(\"priv/repo/migrations/*_create_user.exs\")",19]],"useCount":833},{"word":"min","context":[["Time: <%= b.(:hour, []) %> : <%= b.(:min, []) %>",24],["do: %{hour: hour, min: min, sec: sec}",64],["do: %{hour: hour, min: min, sec: sec}",64],["assert content =~ ~s(<select id=\"search_datetime_min\" name=\"search[datetime][min]\">)",54],["assert f.source.validations == [body: {:length, min: 3}]",38],["assert f.source.validations == [url: {:length, min: 3}]",38],["timezone: %Timex.TimezoneInfo{abbreviation: \"UTC\", from: :min,",29],["defp time_value(%{hour: hour, min: min} = map),",19],["div \".box\", style: \"min-height: 400px\" do",20],["|> validate_length(:password, min: 5)",23]],"useCount":898},{"word":"mix","context":[["# Type `mix help deps` for examples and options.",401],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# Type `mix help compile.app` for more information",1061],["# Type `mix help deps` for more examples and options",755],["# Type \"mix help compile.app\" for more information",749],["# Type \"mix help deps\" for more examples and options",699],["# manifest is generated by the mix phoenix.digest task",503],["# Type `mix help compile.app` for more information.",405],["#     mix run priv/repo/seeds.exs",380],["#     $ mix ecto.setup",348]],"useCount":8988},{"word":"mod","context":[["[mod: {Phoenix, []},",47],["{mod, _} -> Map.put(private, :phoenix_layout, {mod, layout})",37],["{mod, _} -> Map.put(private, :phoenix_layout, {mod, layout})",37],["{mod, layout} -> {mod, template_name(layout, format)}",37],["{mod, layout} -> {mod, template_name(layout, format)}",37],["check_module_name_validity!(mod)",41],["run(app, mod, path, opts)",43],["application_module: mod,",43],["def run(app, mod, path, opts) do",43],["check_module_name_availability!(mod)",41]],"useCount":1466},{"word":"model","context":[["model",1066],["Creates a changeset based on the `model` and `params`.",651],["def model do",599],["def changeset(model, params \\\\ :empty) do",584],["def errors_on(model, data) do",346],["Helper for returning list of errors in model when passed certain data.",361],["your model tests. See `errors_on/2`'s definition as reference.",445],["model tests.",465],["model.__struct__.changeset(model, data).errors",345],["model.__struct__.changeset(model, data).errors",345]],"useCount":8372},{"word":"models","context":[["{:keep, \"new/web/models\",                                \"web/models\"},",39],["{:keep, \"ecto/test/models\",          \"test/models\"},",39],["{:keep, \"new/web/models\",                                \"web/models\"},",39],["* a model in web/models",42],["to build and query models.",1037],["{:keep, \"ecto/test/models\",          \"test/models\"},",39],["refute File.exists?(\"photo_blog/web/models/.keep\")",32],["assert File.exists?(\"photo_blog/web/models\")",32],["assert_file \"test/models/user_test.exs\"",35],["assert_file \"web/models/user.ex\"",35]],"useCount":1589},{"word":"module","context":[["plugs = Module.get_attribute(env.module, :plugs)",50],["# and its dependencies with the aid of the Mix.Config module.",1768],["This module defines the test case to be used by",1506],["A module that keeps using definitions for controllers,",575],["A module providing Internationalization with a gettext-based API.",296],["# call the Gettext module passing our Gettext backend. We",295],["your module gains a set of macros for translations, for example:",294],["module",170],["module = tear_alias(module)",47],["This module is used to test:",54]],"useCount":9926},{"word":"moduledoc","context":[["@moduledoc false",142],["@moduledoc\"\"\"",51],["@moduledoc \"\"\"",474],["@moduledoc ~S\"\"\"",543],["@explanation [check: @moduledoc]",79],["@moduledoc false",2257],["@moduledoc \"\"\"",11544],["Mambo.Bot.send_msg(<<?\\n, @moduledoc>>, cid)",22],["@moduledoc ~s\"\"\"",32],["@moduledoc :false",77]],"useCount":15336},{"word":"month","context":[["do: %{year: year, month: month, day: day}",76],["Date: <%= b.(:day, []) %> / <%= b.(:month, []) %> / <%= b.(:hour, []) %>",24],["assert content =~ ~s(<select id=\"search_datetime_month\" name=\"search[datetime][month]\">)",55],["do: %{year: year, month: month, day: day}",76],["from_parts(to_i(year), to_i(month), to_i(day),",31],["do: from_parts(to_i(year), to_i(month), to_i(day))",25],["{year, month, day}",22],["do: %{year: nil, month: nil, day: nil}",19],[":month, opts when date != nil ->",19],["{value, opts} = datetime_options(:month, @months, id, name, parent, date, opts)",19]],"useCount":987},{"word":"more","context":[["# for more information on OTP Applications",840],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",124],["line. Use the <option>--verbose</option> option, to get more info.",210],["# to check for upstream updates and more.",276],["# See the documentation for `Mix` for more info on aliases.",350],["# Type `mix help compile.app` for more information.",405],["# Type \"mix help deps\" for more examples and options",699],["# Type \"mix help compile.app\" for more information",749],["# Type `mix help deps` for more examples and options",755],["# Type `mix help compile.app` for more information",1061]],"useCount":6752},{"word":"msg","context":[["def translate_error(msg) do",186],["|> Enum.flat_map(fn {key, errors} -> for msg <- errors, do: {key, msg} end)",94],["|> Enum.flat_map(fn {key, errors} -> for msg <- errors, do: {key, msg} end)",94],["msg",91],["msg ->",90],["{:ok, msg, buffer} ->",50],["reply_ignore(msg, socket)",49],["def handle_info(msg, state) do",47],["def broadcast_from(from, topic, event, msg) do",39],["def translate_error({msg, opts}) do",301]],"useCount":3237},{"word":"multipart","context":[["parsers: [:urlencoded, :multipart, :json],",621],["\"to be configured with multipart: true\"",15],["* `:multipart` - when true, sets enctype to \"multipart/form-data\".",24],["* `:multipart` - when true, sets enctype to \"multipart/form-data\".",24],["assert f.options[:multipart] == true",11],["parsers: [:urlencoded, :multipart, :json],",14],["assert form =~ ~s(<form accept-charset=\"UTF-8\" action=\"/\" enctype=\"multipart/form-data\" method=\"post\">)",21],["|> put_req_header(\"content-type\", \"mixed/multipart\")",16],["if match?(%Form{}, form) and !form.options[:multipart] do",15],["It requires the given form to be configured with `multipart: true`",15]],"useCount":776},{"word":"must","context":[["The layout must be a tuple, specifying the layout view and the layout",37],["Before being used, an endpoint must be explicitly started as part",38],["Mix.raise \"Application name must start with a letter and have only lowercase \" <>",44],["# Import environment specific config. This must remain at the bottom",630],["assert_raise Mix.Error, ~r\"Module name must be a valid Elixir alias\", fn ->",37],["The event's message must be a serializable map.",44],["Mix.raise \"Module name must be a valid Elixir alias (for example: Foo.Bar), got: #{inspect name}\"",46],["message: \"Function Pipe Chains must start with a bare value\",",64],["# Because error messages were defined within Ecto, we must",295],["assert_raise Mix.Error, ~r\"Application name must start with a letter and \", fn ->",74]],"useCount":2239},{"word":"mydep","context":[["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["#   {:mydep, \"~> 0.3.0\"}",1473],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1\"}",42],["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1\"}",42]],"useCount":4417},{"word":"n","context":[["|> Enum.join(\"\\n\")",117],[".\\\" .sp <n>    insert n+1 empty lines",280],["format: \"$time $metadata[$level] $message\\n\",",656],["config :logger, :console, format: \"[$level] $message\\n\"",603],[".\\\" .sp <n>    insert n+1 empty lines",280],["[ -n \"$DODTIME\" ] && sleep \"$DODTIME\"s",96],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],["assert conn.resp_body == \"Hello\\n\"",87],["cmd=`cat /proc/$pid/cmdline | tr \"\\000\" \"\\n\"|head -n 1 |cut -d : -f 1`",97],["cmd=`cat /proc/$pid/cmdline | tr \"\\000\" \"\\n\"|head -n 1 |cut -d : -f 1`",97]],"useCount":4589},{"word":"name","context":[["name",172],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144],["start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME",142],["(symbol-name flavor)",130],["name",176],["Given a User model that lists `:name` as a required field and validates",297],["add :name, :string",368],["[password: \"is unsafe\", name: \"is blank\"]",380],["<!-- Fill in your name for FIRSTNAME and SURNAME. -->",506],["field :name, :string",479]],"useCount":14465},{"word":"need","context":[["# If you are doing OTP releases, you need to instruct Phoenix",549],["debian/rules file targets (such as build), you will need to include",252],["# from the system environment. Therefore, you will need",527],["# To get SSL working, you will need to add the `https` key",531],["# You will also need to set the application root to `.` in order",236],["version in one of the debian/rules file targets (such as build), you will need",210],["# need the message to be pluralized or not, this could be",114],["# Wait some sensible amount, some server need this",49],["targets (such as build), you will need to include xsltproc",40],["# To get SSL working, you will need to set:",38]],"useCount":2945},{"word":"neg","context":[["neg\tverb\tSYM\tpnoun\tverb_aux;",64],["neg\tverb\tverb_aux\tSYM\tverb_aux;",32],["neg\tverb\tSYM\tpn\tverb_aux;",40],["cm\tnoun\tverb\tverb_aux\tneg;",52],["noun\tneg\tverb_aux\tSYM\tverb;",52],["adjective\tneg\tSYM\tpnoun\tverb;",32],["neg\tverb\tverb_aux\tconj\tverb_aux;",28],["neg\tverb\tconj\tpn\tverb_aux;",28],["cm\tadjective\tverb\tSYM\tneg;",28],["adjective\tneg\tverb_aux\tSYM\tverb;",32]],"useCount":884},{"word":"new","context":[["#        * <new-prerm> `failed-upgrade' <old-version>",290],["#        * <old-postrm> `upgrade' <new-version>",283],["#        * <old-prerm> `upgrade' <new-version>",290],["#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>",290],["#        * <new-preinst> `upgrade' <old-version>",295],["#        * <old-preinst> `abort-upgrade' <new-version>",295],["#        * <new-preinst> `install' <old-version>",295],["#        * <new-preinst> `install'",295],["def new(conn, _params) do",428],["render(conn, \"new.html\", changeset: changeset)",553]],"useCount":12278},{"word":"new_msg","context":[["refute_receive %Message{event: \"new_msg\"}",64],["def handle_in(\"new_msg\", %{\"uid\" => uid, \"body\" => body}, socket) do",51],["\"event\" => \"new_msg\",",51],["WebsocketClient.send_event(sock, \"rooms:lobby1\", \"new_msg\", %{body: \"Should ignore\"})",36],["push socket, \"new_msg\", Map.put(payload, \"transport\", inspect(socket.transport))",31],["def handle_out(\"new_msg\", payload, socket) do",31],["def handle_in(\"new_msg\", message, socket) do",31],["def handle_out(\"new_msg\", payload, socket) do",31],["broadcast! socket, \"new_msg\", message",31],["intercept [\"new_msg\"]",31]],"useCount":754},{"word":"nil","context":[["sgml-local-ecat-files:nil",257],["nil",1435],["nil ->",1264],["def id(_socket), do: nil",447],["# Returning `nil` makes this socket anonymous.",445],["_ -> nil",383],["sgml-exposed-tags:nil",257],["sgml-minimize-attributes:nil",257],["nil -> nil",282],["nil -> nil",282]],"useCount":13313},{"word":"no","context":[["# In case no render clause matches or no",532],["#    SITEFLAG=\"--no-site-file\"",144],["#    SITEFLAG=\"-no-site-file\"",144],["0|1) [ \"$VERBOSE\" != no ] && log_end_msg 0 ;;",286],["2) [ \"$VERBOSE\" != no ] && log_end_msg 1 ;;",286],["# We also recommend setting `force_ssl`, ensuring no data is",426],["[ \"$VERBOSE\" != no ] && log_daemon_msg \"Stopping $DESC\" \"$NAME\"",143],["# In case no render clause matches or no",532],["with no validation performed.",647],["If no params are provided, an invalid changeset is returned",587]],"useCount":5895},{"word":"node","context":[["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\"]]",246],["{node, errors}",146],["node: %{",28],["maybe_cmd \"npm install && node node_modules/brunch/bin/brunch build\",",35],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\",",76],["defp check_node(node, errors) do",68],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\"]]",60],["node",40],["node.js, which includes npm, can be found at http://nodejs.org.",39],["that requires node.js and npm. Installation instructions for",38]],"useCount":1073},{"word":"nor","context":[["# file won't be loaded nor affect the parent project. For this reason,",1055],["# Do not include metadata nor timestamps in development logs",590],["# file won't be loaded nor affect the parent project.",25],["* `:method` - the HTTP method. If the method is not \"get\" nor \"post\",",24],["`terminate/2`, however, won't be invoked in case of errors nor in",16]],"useCount":1710},{"word":"noreply","context":[["{:noreply, socket}",660],["{:noreply, state}",1508],["{:noreply, socket}",158],["{:noreply, config}",29],["{:noreply, s}",121],["{:noreply, Socket.t} |",110],["{:noreply, new_state}",95],["{:noreply, nil}",55],["{:noreply, nil}",54],["{:noreply, state}",30]],"useCount":3329},{"word":"not","context":[["# Do not configure such in production as keeping",368],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["# it to always work (and if it does not, it will raise).",382],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["\"Page not found\"",446],["\"Page not found\"",455],["because the original program does not have a manual page.",524],["# Do not print debug messages in production",539],["# Do not include metadata nor timestamps in development logs",590],["test \"renders page not found when id is nonexistent\", %{conn: conn} do",286]],"useCount":9040},{"word":"not_found","context":[["|> put_status(:not_found)",204],["def not_found(conn, _params) do",20],["|> json ResponseBodyFormatter.error_body(:not_found, \"ProductEnvironmentalVariable\")",22],[":not_found",32],["nil -> {:error, :not_found}",33],["{:error, :not_found} ->",43],["{:error, :not_found}",50],[":not_found ->",71],["resp(conn, :not_found, \"\")",19],[":not_found -> throw({:error, \"'#{symbol}' not found\"})",19]],"useCount":799},{"word":"noun","context":[["noun\tverb\tverb_aux\tconj\tverb_aux;",236],["cm\tnoun\tverb_aux\tSYM\tverb;",200],["cm\tnoun\tconj\tpnoun\tverb;",176],["noun\tverb\tSYM\tpn\tverb_aux;",168],["cm\tnoun\tconj\tpn\tverb;",148],["noun\tverb\tverb_aux\tSYM\tverb_aux;",701],["cm\tnoun\tverb_aux\tverb_aux\tverb;",392],["noun\tverb\tSYM\tpnoun\tverb_aux;",295],["noun\tverb\tverb_aux\tverb_aux\tverb_aux;",260],["noun\tcm\tverb_aux\tverb_aux\tverb;",146]],"useCount":17409},{"word":"nroff","context":[["Please remember that if you create the nroff version in one of the",252],["manual page with: nroff -man <package>.<section> | less'. A typical entry",210],["docbook-xsl-doc-* packages. Please remember that if you create the nroff",210],["create the nroff version in one of the debian/rules file",40],["manual page with: nroff -man <package>.<section> | less'.  A",40],["<!-- Process this file with docbook-to-man to generate an nroff manual",254],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],[".\\\"                                      Hey, EMACS: -*- nroff -*-",280]],"useCount":1540},{"word":"of","context":[["<para>Show version of program.</para>",506],["# containing the digested version of static files. This",503],["behaviour of <application>&dhpackage;</application>. See",420],["<para>Show summary of options.</para>",506],["with long options starting with two dashes (`-').  A summary of",507],["# :code_reloader configuration of your endpoint.",569],["# of this file so it overrides the configuration defined above.",633],["# and its dependencies with the aid of the Mix.Config module.",1768],["# summary of how this script can be called:",1135],["of the test unless the test case is marked as async.",1504]],"useCount":18443},{"word":"ok","context":[["{:reply, :ok, state}",258],["{:ok, user} ->",248],["{:ok, socket}",754],[":ok ->",464],["{:ok, state}",807],[":ok",1807],[":ok",4713],["#     {:ok, assign(socket, :user_id, verified_user_id)}",443],["def init(:ok) do",349],["{:ok, pid}",260]],"useCount":25648},{"word":"old","context":[["#        * <new-postrm> `failed-upgrade' <old-version>",283],["#        * <new-postrm> `abort-upgrade' <old-version>",283],["#        * <new-postrm> `abort-install' <old-version>",283],["#        * <old-postrm> `upgrade' <new-version>",283],["#        * <old-postinst> `abort-upgrade' <new version>",267],["#        * <old-prerm> `upgrade' <new-version>",290],["#        * <new-prerm> `failed-upgrade' <old-version>",290],["#        * <new-preinst> `install' <old-version>",295],["#        * <new-preinst> `upgrade' <old-version>",295],["#        * <old-preinst> `abort-upgrade' <new-version>",295]],"useCount":2952},{"word":"on","context":[["Creates a changeset based on the `model` and `params`.",651],["# performing token verification on connect.",430],["test \"lists all entries on index\", %{conn: conn} do",422],["# and so on) as they will fail if something goes wrong.",371],["Such tests rely on `Phoenix.ChannelTest` and also",492],["Such tests rely on `Phoenix.ConnTest` and also",544],["on imports, uses and aliases.",556],["views and so on.",577],["# to this project. If another project depends on this project, this",1080],["# for more information on OTP Applications",840]],"useCount":10426},{"word":"one","context":[["returns the response body if one was set or sent.",45],["case Repo.one(query) do",39],["# We don't run a server during test. If one is required,",545],["Please remember that if you create the nroff version in one of the",252],["version in one of the debian/rules file targets (such as build), you will need",210],["# on this one.  As a last resort, sleep for some time.",143],["|> Repo.one",135],["\"expected one of #{inspect accepted}\"",44],["Repo.one(query)",40],["create the nroff version in one of the debian/rules file",40]],"useCount":2620},{"word":"ones","context":[["\"strict-transport-security\" header for https ones.",30],["applications or even break a big router into smaller ones.",16],["are appended to the ones previously given.",30],["# Configuration from the imported file will override the ones defined",1036]],"useCount":1112},{"word":"only","context":[["# Print only warnings and errors during test",569],["import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]",515],["only: ~w(css fonts images js favicon.ico robots.txt)",449],["{:phoenix_live_reload, \"~> 1.0\", only: :dev},",445],["{:earmark, \"~> 0.1\", only: :dev},",264],["<para>The program is currently limited to only work",210],["# and if the daemon is only ever run from this initscript.",143],["import Ecto.Query, only: [from: 2]",969],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143],["import Ecto.Query, only: [from: 1, from: 2]",1336]],"useCount":8437},{"word":"opt","context":[["case opt do",12],["for opt <- collection do",18],["<arg choice=\"opt\">",420],["<arg choice=\"opt\"><option>--example=<parameter>that</parameter></option></arg>",210],["<group choice=\"opt\">",210]],"useCount":870},{"word":"option","context":[["<option>--help</option>",295],["<term><option>-h</option>",296],["<term><option>-h</option>",296],["<term><option>-v</option>",297],["<term><option>-v</option>",297],["# you can enable the server option below.",545],["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg choice=\"plain\"><option>--example</option></arg>",420],["<arg choice=\"plain\"><option>--example</option></arg>",420]],"useCount":17179},{"word":"optional","context":[["verify_issuer: true, # optional",24],["The `queryparams` option defines the query parameters (optional).",242],["* `opts` - The optional list of options, see below",24],["verify_module: Guardian.JWT,  # optional",19],["* `opts` - The optional list of options. Supported options",17],["* a map containing the `hour` and `min` keys and an optional `sec` key (either as strings or atoms)",15],["The `options` option defines any extra HTTP options (optional).",242],["Phoenix uses an optional assets build tool called brunch.io",38],["The `headers` option defines the header values (optional).",242],["[{:cowboy, \"~> 1.0\", optional: true},",52]],"useCount":952},{"word":"optional_fields","context":[["|> cast(params, @required_fields, @optional_fields)",710],["@optional_fields ~w()",486],["|> cast(params, @required_fields, @optional_fields)",55],["|> cast(params, @required_fields ++ @optional_fields)",37],["|> cast(params, @create_fields, @optional_fields)",36],["@optional_fields ~w()",30],["cast(model_or_changeset,  params, @required_fields, @optional_fields)",25],["@optional_fields ~w(encrypted_password)",11],["@optional_fields []",11]],"useCount":1401},{"word":"options","context":[["Show summary of options.",285],["with long options starting with two dashes (`-').  A summary of",507],["options is included below.  For a complete description, see the",507],["<para>Show summary of options.</para>",506],["# for other strategies and supported options",818],["# Type `mix help deps` for more examples and options",755],["# Type \"mix help deps\" for more examples and options",699],[".RI [ options ] \" files\" ...",558],["# Check `Plug.SSL` for all available options in `force_ssl`.",427],["# Type `mix help deps` for examples and options.",401]],"useCount":11616},{"word":"opts","context":[["def init(opts) do",413],["def start_link(opts \\\\ []) do",159],["if count = opts[:count] do",118],["assert Erl2ex.convert_str!(input, @opts) == expected",111],["opts",580],["Supervisor.start_link(children, opts)",999],["defmacro __using__(opts) do",322],["def translate_error({msg, opts}) do",301],["opts =",239],["def call(conn, opts) do",163]],"useCount":11388},{"word":"or","context":[["# the key and cert in disk or a relative path inside priv,",427],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# In case no render clause matches or no",532],["# need the message to be pluralized or not, this could be",114],["granted to copy, distribute and/or modify this document under",295],["# Aliases are shortcut or tasks specific to the current project.",265],["less'.  A typical entry in a Makefile or Makefile.am is:",254],["<!-- TITLE should be something like \"User commands\" or similar (see",210],["in a Makefile or Makefile.am is:",210],["# Aliases are shortcuts or tasks specific to the current project.",85]],"useCount":6415},{"word":"org","context":[["http://www.tldp.org/HOWTO/Man-Page/q2.html. -->",210],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" [",210],["http://www.tldp.org/HOWTO/Man-Page/q2.html). -->",210],["man(1), man(7), http://www.tldp.org/HOWTO/Man-Page/",210],["# <sanvila@ctv.es> and octave by Dirk Eddelbuettel <edd@debian.org>.",144],[";; Modified by Dirk Eddelbuettel <edd@debian.org>",144],["# Written by Jim Van Zandt <jrv@debian.org>, borrowing heavily",132]],"useCount":4751},{"word":"origin","context":[["If the origin header matches the allowed origins, no origin header was",25],["|> put_resp_header(\"access-control-allow-origin\", \"*\")",45],["through iframes unless in the same origin",25],["Checks the origin request header against the list of allowed origins.",25],["sent or no origin was configured, it will return the given connection.",25],["If the origin header matches the allowed origins, no origin header was",25],["Could not check origin for Phoenix.Socket transport.",24],["origin header is present. It defaults to true and, in such cases,",23],["* `:check_origin` - if we should check the origin of requests when the",23],["defp parse_origin(origin) do",22]],"useCount":703},{"word":"other","context":[["other -> other",191],["other -> other",191],["other ->",248],["# generated by other debhelper scripts.",1136],["imports other functionality to make it easier",835],[".\\\" other parameters are allowed: see man(7), man(1)",280],["# for other strategies and supported options",818],["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506],["test \"render any other\" do",488],["# Here you could define other workers and supervisors as children",443]],"useCount":6659},{"word":"otp_app","context":[["def server?(otp_app, endpoint) when is_atom(otp_app) and is_atom(endpoint) do",33],["use Phoenix.Endpoint, otp_app: :phoenix",105],["def config(:otp_app), do: :phoenix",38],["use Phoenix.Endpoint, otp_app: :your_app",40],["Phoenix.Config.from_env(otp_app, endpoint, defaults(otp_app, endpoint))",32],["def server?(otp_app, endpoint) when is_atom(otp_app) and is_atom(endpoint) do",33],["[otp_app: otp_app,",34],["[otp_app: otp_app,",34],["defp defaults(otp_app, module) do",34],["Phoenix.Config.from_env(otp_app, endpoint, defaults(otp_app, endpoint))",32]],"useCount":1187},{"word":"override","context":[["# Configuration from the imported file will override the ones defined",1036],["{:poison, \"~> 1.4.0\", override: true},",14],["{:timex, \"~> 0.13.3\", override: true},",14],["* durability: possible values are hard and soft. This option will override the",12],["defp phoenix_dep(\"deps/phoenix\"), do: ~s[{:phoenix, github: \"phoenixframework/phoenix\", override: true}]",12],["{:exvcr, github: \"parroty/exvcr\", override: true},",11],["{:fleet_api, \"~> 0.0.15\", override: true},",11],["# an environment's settings will override those of a release",16],["* `:code_reloader` - optionally override the default `:code_reloader` value",16],["defp phoenix_dep(path), do: ~s[{:phoenix, path: #{inspect path}, override: true}]",33]],"useCount":1175},{"word":"p","context":[["start_daemon -p $PIDFILE $DAEMON $DAEMON_OPTS",31],["(when (file-directory-p package-dir)",136],["from p in query,",50],["killproc -p $PIDFILE $DAEMON",40],["<p>No1</p>",20],["<p>No1</p>",20],["iex> doc = \"<body><header><p>Message</p><ul><li>One</li><li><a>Two</a></li></ul></header></body>\"",20],["Repo.all from p in Post,",20],["iex> doc = \"<body><header><p>Message</p><ul><li>One</li><li><a>Two</a></li></ul></header></body>\"",20],["p",25]],"useCount":725},{"word":"package","context":[["defp package do",1536],["package: package,",1196],["package: package,",1196],["# the debian-policy package",1106],["#          <conflicting-package> <version>",557],["#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>",290],["#          <package-being-installed> <version> `removing'",290],["#          <failed-install-package> <version> `removing'",267],["#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>",267],["The docbook-to-man binary is found in the docbook-to-man package.",252]],"useCount":10162},{"word":"packages","context":[["upgrading, and controlling release packages for your application.",12],["# Dependencies can be hex.pm packages:",45],["docbook-xsl-doc-* packages. Please remember that if you create the nroff",210],["# Dependencies can be Hex packages:",1439]],"useCount":1706},{"word":"page","context":[["because the original program does not have a manual page.",524],["<para>This manual page documents briefly the",507],["<para>This manual page was written by &dhusername; &dhemail; for",297],["<para>This manual page was written for the &debian; distribution",296],["test \"renders page not found when id is nonexistent\", %{conn: conn} do",286],["This manual page documents briefly the",284],["the manual page with: `docbook-to-man manpage.sgml | nroff -man |",254],["<para>This manual page was written for the Debian system",210],["manual page with: nroff -man <package>.<section> | less'. A typical entry",210],["<para>This manual page was written for the Debian distribution",210]],"useCount":3986},{"word":"para","context":[["<para><command>&dhpackage;</command> is a program that...</para>",505],["</para>",785],["<para>This manual page documents briefly the",507],["<para>Show version of program.</para>",506],["<para>Show version of program.</para>",506],["<para>Show summary of options.</para>",506],["<para>Show summary of options.</para>",506],["<para>The programs are documented fully by <citetitle>The Rise and",506],["commands.</para>",505],["<para><command>&dhpackage;</command> is a program that...</para>",505]],"useCount":12529},{"word":"param","context":[["-''-param man.charmap.use.subset \"0\" \\",210],["defp scrub_param(param) when is_list(param) do",33],["defp scrub_param(param) when is_list(param) do",33],["unless param do",33],["XP     = xsltproc -''-nonet -''-param man.charmap.use.subset \"0\"",210],["defp scrub_param(param) do",33],["if scrub?(param), do: nil, else: param",34],["if scrub?(param), do: nil, else: param",34],["-''-param make.single.year.ranges \"1\" \\",210],["-''-param make.year.ranges \"1\" \\",210]],"useCount":1443},{"word":"parameter","context":[["<arg choice=\"opt\"><option>--example=<parameter>that</parameter></option></arg>",210],[".\\\" First parameter, NAME, should be all caps",280],[".\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection",280],["<arg choice=\"opt\"><option>--example=<parameter>that</parameter></option></arg>",210],["and as the prefix for the parameter in nested resources. The default value",30],["\"_format\" parameter is available, this function will parse",22],["If the request contains a \"_format\" parameter, it is",22],["assert_raise(RamlParseError, ~r(parameter name already used: 'param1'), fn ->",27],["With the configuration above, Phoenix will filter any parameter",20],["assert_raise(RamlParseError, ~r(parameter property already used: 'enum'), fn ->",19]],"useCount":1195},{"word":"parameters","context":[["The `queryparams` option defines the query parameters (optional).",242],[".\\\" other parameters are allowed: see man(7), man(1)",280],["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506],["docbook-xsl. A description of the parameters you can use can be found in the",210],["variablelist.term.break.after parameters to",210],["parameters: [%{",132],["and the request parameters as arguments. The connection is a",36],["Scrubs the parameters from the request.",33],["* Changes empty parameters of `required_key` (recursively) to nils",33],["# For others you can set parameters",26]],"useCount":1941},{"word":"params","context":[["Creates a changeset based on the `model` and `params`.",651],["If no params are provided, an invalid changeset is returned",587],["|> cast(params, @required_fields, @optional_fields)",710],["def changeset(model, params \\\\ :empty) do",584],["# Socket params are passed from the client and can",442],["params",170],["Builds a changeset based on the `struct` and `params`.",169],["def changeset(model, params \\\\ %{}) do",137],["assert conn.params[\"format\"] == \"json\"",130],["def changeset(struct, params \\\\ %{}) do",175]],"useCount":8333},{"word":"parent","context":[["parent",28],["# file won't be loaded nor affect the parent project. For this reason,",1055],["sgml-parent-document:nil",257],["parent = self()",227],["opts = [agent: agent, parent: self()]",52],["send(parent, {ref, reply})",42],["send(parent, {:terminate, m})",38],["parent = self()",30],["send(parent, n)",26],["# file won't be loaded nor affect the parent project.",25]],"useCount":2414},{"word":"parse","context":[["case parse do",73],["# In case there is a header, we need to parse it.",36],["assert(CWMP.Protocol.Parser.parse(@sample) == @sample_result)",48],["{opts, argv, _} = OptionParser.parse(argv, switches: @switches)",36],["{ref, 0} = System.cmd(\"git\", [\"rev-parse\", \"--verify\", \"--quiet\", \"HEAD\"])",35],["\"\"\" |> Script.parse!(\"\")",188],["conn = parse(conn)",33],["parse(t, context, output)",46],["case Float.parse(float) do",38],["assert Markdown.parse(input) == expected",36]],"useCount":1401},{"word":"parsers","context":[["defp convert_parsers(parsers) do",24],["@plug_parsers Plug.Parsers.init(parsers: [:json], json_decoder: Poison)",11],["parsers = [",11],["parsers: [:urlencoded, :multipart, :json],",621],["for parser <- parsers do",16],["parsers: [:urlencoded, :multipart, :json],",14],["|> Plug.Parsers.call(Plug.Parsers.init(parsers: [:json], json_decoder: Poison))",13]],"useCount":710},{"word":"party","context":[["# Or configure a 3rd-party app:",857],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# party users, it should be done in your mix.exs file.",196]],"useCount":1910},{"word":"pass","context":[["on the request. To do so, you can pass the template name as an atom (without",36],["One can also pass a router explicitly as an argument to the task:",30],["\"please pass the :name option accordingly\"",39],["# as a JSON object. So we just pass it forward.",89],["# Ecto will pass the :count keyword if the error message is",114],["pass: [\"*/*\"],",637],["test: [username: user, password: pass, database: \"#{app}_test\", hostname: \"localhost\",",25],["[dev:  [username: user, password: pass, database: \"#{app}_dev\", hostname: \"localhost\"],",25],["the transport. That's why transports are required to pass a",25],["password: \"pass\",",24]],"useCount":1430},{"word":"passed","context":[["* `:key_digest` - option passed to `Plug.Crypto.KeyGenerator`",32],["test \"scrub_params/2 ignores the keys that don't match the passed in key\" do",17],["* `:key_iterations` - option passed to `Plug.Crypto.KeyGenerator`",32],["test \"scrub_params/2 nils out all empty values for the passed in key if it is a list\" do",17],["controller. The map of runtime metadata passed to instrumentation",17],["* `:key_length` - option passed to `Plug.Crypto.KeyGenerator`",32],["# Additional options that are passed to the Daemon.",235],["# Socket params are passed from the client and can",442],["Helper for returning list of errors in model when passed certain data.",361],["passed in these runtime data so that instrumenters know which view is",17]],"useCount":1346},{"word":"passthrough","context":[[":meck.new(ConnectionPools, [:passthrough])",50],[":meck.new(Workflow, [:passthrough])",110],[":meck.new(ConnectionPool, [:passthrough])",47],[":meck.new(QueueBuilder, [:passthrough])",46],[":meck.new(ConnectionOptionsResolver, [:passthrough])",46],[":meck.new(OpenAperture.Manager.Plugs.Authentication, [:passthrough])",30],[":meck.new(Git, [:passthrough])",29],[":meck.new(OpenAperture.ManagerApi.MessagingExchange, [:passthrough])",26],[":meck.new(SubscriptionHandler, [:passthrough])",26],[":meck.new(ComponentStatusMgr, [:passthrough])",24]],"useCount":807},{"word":"password","context":[["password: \"postgres\",",726],["[password: \"is unsafe\", name: \"is blank\"]",380],["`:password` to be safe, it would return:",379],["iex> {:password, \"is unsafe\"} in changeset.errors",378],["iex> changeset = User.changeset(%User{}, password: \"password\")",376],["iex> changeset = User.changeset(%User{}, password: \"password\")",376],["iex> errors_on(%User{}, %{password: \"password\"})",328],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328]],"useCount":6368},{"word":"path","context":[["conn = get conn(), path",144],["# Finally, we also include the path to a manifest",503],["# Where those two env variables return an absolute path to",427],["# the key and cert in disk or a relative path inside priv,",427],["path",182],["\"in\" => \"path\",",162],["cat << EOF > path.el",144],["FLAGS=\"${SITEFLAG} -q -batch -l path.el -f batch-byte-compile\"",144],[";; We have to add this to the load-path:",144],["# Or git/path repositories:",1475]],"useCount":12773},{"word":"paths","context":[["defp paths do",47],["Mix.Phoenix.copy_from paths(), \"priv/templates/phoenix.gen.html\", \"\", binding, [",16],["Returns the hash of all template paths in the given root.",16],["The namespace is used to calculate paths. For example, if you are in",16],["* `:namespace` - the namespace to consider when calculating view paths",20],["paths: [Path.expand(\"priv/static/js/phoenix.js\")]]",29],["Configuration requires a `:paths` option which should be a list of",29],["For security, `:to` only accepts paths. Use the `:external`",36],["# Specifies which paths to compile per environment",205],["# Specifies which paths to compile per environment.",407]],"useCount":971},{"word":"payload","context":[["assert(@payload == decoded_payload)",87],["payload: payload",98],["payload",61],["payload: unquote(payload)}, unquote(timeout)",60],["payload: unquote(payload)}, unquote(timeout)",60],["payload: payload",98],["when is_binary(topic) and is_binary(event) and is_map(payload) do",105],["payload = %{",122],["\"payload\" => %{}",122],["payload: %{\"response\" => %{}, \"status\" => \"ok\"},",52]],"useCount":3419},{"word":"pending","context":[["test \"returns false when user is pending member of organization\" do",11],["ExUnit.configure(exclude: :pending)",11],["# ExUnit.configure exclude: :pending, trace: true",56],["ExUnit.configure exclude: :pending, trace: true",222],["# @tag :pending",740],["@tag :pending",1808]],"useCount":2848},{"word":"per","context":[["#   per helper module anyway.",19],["# directory. For example, you can emulate configuration per environment",1035],["# start per endpoint:",549],["# Specifies which paths to compile per environment.",407],["<para>The per-user configuration file to control the",210],["# Specifies which paths to compile per environment",205],["be set per application.",38],["Once a pipeline is defined, it can be piped through per scope.",30],["including support for layouts and encoders per format.",22],["# * Helper modules are quite uncommon, typically one per project.",19]],"useCount":2565},{"word":"performed","context":[["with no validation performed.",647],["This emulates behaviour performed by browsers where cookies",22],["This operation can only be performed on connections to a database. To learn",18]],"useCount":687},{"word":"phoenix","context":[["# You should set gzip to true if you are running phoenix.digest",545],["# manifest is generated by the mix phoenix.digest task",503],["socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket",470],["compilers: [:phoenix] ++ Mix.compilers,",347],["config :phoenix, :stacktrace_depth, 20",533],["compilers: [:phoenix, :gettext] ++ Mix.compilers,",322],["config :phoenix, :generators,",310],["# Configure phoenix generators",295],["applications: [:phoenix, :phoenix_html, :cowboy, :logger,",174],["#     config :phoenix, :serve_endpoints, true",527]],"useCount":7634},{"word":"phoenix_ecto","context":[["assert_file \"photo_blog/mix.exs\", &refute(&1 =~ ~r\":phoenix_ecto\")",32],["assert_file \"photo_blog/mix.exs\", ~r\"{:phoenix_ecto,\"",19],["{:phoenix_ecto, \"~> 1.1\"},",125],["{:phoenix_ecto, \"~> 3.0\"},",108],[":phoenix_ecto,",44],["{:phoenix_ecto, \"~> 0.4\"},",34],[":phoenix_ecto, :postgrex, :comeonin]]",33],["{:phoenix_ecto, \"~> 2.0\"},",157],[":phoenix_ecto, :postgrex]]",222],[":phoenix_ecto, <%= inspect adapter_app %><% end %>]]",25]],"useCount":888},{"word":"phoenix_html","context":[[":phoenix_html,",47],["{:phoenix_html, \"~> 2.0\"},",30],["{:phoenix_html, \"~> 1.0\"},",35],["applications: [:phoenix, :phoenix_pubsub, :phoenix_html, :cowboy, :logger, :gettext,",60],["{:phoenix_html, \"~> 2.3\"},",70],["{:phoenix_html, \"~> 2.6\"},",109],["{:phoenix_html, \"~> 2.4\"},",128],["applications: [:phoenix, :phoenix_html, :cowboy, :logger, :gettext,",121],["{:phoenix_html, \"~> 2.1\"},",133],["applications: [:phoenix, :phoenix_html, :cowboy, :logger,",174]],"useCount":1013},{"word":"photo_blog","context":[["assert_file \"photo_blog/mix.exs\", fn file ->",38],["assert_file \"photo_blog/priv/static/images/phoenix.png\"",36],["assert_file \"photo_blog/config/config.exs\", fn file ->",35],["@app_name \"photo_blog\"",33],["assert_file \"custom_path/mix.exs\", ~r/app: :photo_blog/",32],["refute File.exists?(\"photo_blog/web/channels/.keep\")",32],["assert_file \"photo_blog/lib/photo_blog.ex\", ~r/defmodule PhotoBlog do/",32],["assert file =~ \"app: :photo_blog\"",32],["config = ~r/config :photo_blog, PhotoBlog.Repo,/",64],["assert_file \"photo_blog/mix.exs\", fn(file) ->",39]],"useCount":2378},{"word":"pid","context":[["# Check if a given process pid's cmdline matches a given name",97],["kill -9 $pid",97],["pid=`cat $PIDFILE`",97],["[ ! -d /proc/$pid ] &&  return 1",97],["[ -z \"$pid\" ] && return 1",97],["assert close(pid) === :ok",112],["{:ok, pid} ->",151],["pid",224],["{:ok, pid}",260],["PIDFILE=/var/run/$NAME.pid",240]],"useCount":6758},{"word":"pidfile","context":[["# start-stop-daemon --stop --signal 1 --quiet --pidfile \\",78],["# No pidfile, probably no daemon present",97],["start-stop-daemon --start --quiet --pidfile $PIDFILE \\",106],["start-stop-daemon --stop --quiet --pidfile $PIDFILE \\",106],["#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \\",138],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\",141],["start-stop-daemon --start --quiet --pidfile \\",78],["start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME",142],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\",141],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144]],"useCount":1373},{"word":"pipe_through","context":[["Every time `pipe_through/1` is called, the new pipelines",30],["pipe_through [:browser, :admin]",23],["defmacro pipe_through(pipes) do",30],["raise \"cannot pipe_through inside a pipeline\"",30],["pipe_through :secure",21],["Scope.pipe_through(__MODULE__, unquote(pipes))",30],["pipe_through :browser",169],["pipe_through :api",306],["#   pipe_through :api",363],["pipe_through :browser # Use the default browser stack",498]],"useCount":1594},{"word":"pipeline","context":[["* to define an initial plug pipeline where requests",38],["the defined plug pipeline)",40],["Stores a plug to be executed as part of the pipeline.",40],["if pipeline = @phoenix_pipeline do",60],["See `pipeline/2` for more information.",60],["pipeline (in the router):",36],["## Plug pipeline",36],["pipeline :browser do",613],["and how to customize the plug pipeline.",34],["pipeline :api do",635]],"useCount":2287},{"word":"plain","context":[["<arg choice=\"plain\">",420],["<arg choice=\"plain\"><option>--example</option></arg>",420],["<arg choice=\"plain\"><option>-e</option></arg>",420],["<arg choice=\"plain\"><option>--version</option></arg>",210],["<arg choice=\"plain\"><option>-h</option></arg>",210],["<arg choice=\"plain\"><option>--help</option></arg>",210],["<arg choice=\"plain\"><option>-e <replaceable>this</replaceable></option></arg>",210],["<arg choice=\"plain\"><replaceable>that</replaceable></arg>",210],["<arg choice=\"plain\"><replaceable>this</replaceable></arg>",210],["<arg choice=\"plain\"><option>-v</option></arg>",210]],"useCount":3000},{"word":"plug","context":[["plug :accepts, [\"html\"]",601],["plug Plug.Parsers,",636],["plug Plug.MethodOverride",633],["plug Phoenix.CodeReloader",631],["plug Plug.Static,",629],["plug Plug.Session,",626],["plug :fetch_flash",562],["plug :fetch_session",637],["plug Plug.Head",639],["plug Plug.Logger",685]],"useCount":13476},{"word":"pm","context":[["# and environments, visit https://hexdocs.pm/distillery/configuration.html",16],["[`Plug.Adapters.Cowboy`](https://hexdocs.pm/plug/Plug.Adapters.Cowboy.html).",20],["# Dependencies can be hex.pm packages:",45],["[`Plug.Adapters.Cowboy`](http://hexdocs.pm/plug/Plug.Adapters.Cowboy.html).",60],["By using [Gettext](https://hexdocs.pm/gettext),",89],["See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.",89],["By using [Gettext](http://hexdocs.pm/gettext),",205],["See the [Gettext Docs](http://hexdocs.pm/gettext) for detailed usage.",206]],"useCount":730},{"word":"pn","context":[["cm\tverb\tconj\tpn\tverb_aux;",108],["pn\tnoun\tnoun\tverb\tcm;",52],["pn\tverb\tverb_aux\tconj\tverb_aux;",44],["noun\tverb\tverb_aux\tpn\tverb_aux;",84],["noun\tverb\tpn\tnoun\tverb_aux;",60],["verb\tverb_aux\tSYM\tpn\tverb_aux;",236],["noun\tverb\tSYM\tpn\tverb_aux;",168],["cm\tnoun\tconj\tpn\tverb;",148],["verb\tverb_aux\tconj\tpn\tverb_aux;",143],["noun\tverb\tconj\tpn\tverb_aux;",117]],"useCount":3370},{"word":"png","context":[["create_file Path.join(path, \"web/static/assets/images/phoenix.png\"), phoenix_png_text()",36],["assert_file \"photo_blog/web/static/assets/images/phoenix.png\"",28],["{\"src\", \"http://twitter.com/logo.png\"},",25],["assert_file \"photo_blog/priv/static/images/phoenix.png\"",36],["embed_text :phoenix_png, from_file: Path.expand(\"../../priv/static/phoenix.png\", __DIR__)",39],["create_file Path.join(path, \"priv/static/images/phoenix.png\"), phoenix_png_text()",43],["assert image.mime_type == \"image/png\"",49],["assert image.format == :png",49],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif)$},",95],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},",423]],"useCount":1150},{"word":"pnoun","context":[["verb\tverb_aux\tSYM\tpnoun\tverb_aux;",410],["noun\tverb\tSYM\tpnoun\tverb_aux;",295],["cm\tnoun\tconj\tpnoun\tverb;",176],["pnoun\tcm\tnoun\tcm\tadjective;",110],["pnoun\tcm\tverb\tconj\tnoun;",108],["pnoun\tpnoun\tnoun\tcm\tcm;",104],["adjective\tverb\tSYM\tpnoun\tverb_aux;",97],["cm\tverb\tSYM\tpnoun\tverb_aux;",82],["pnoun\tcm\tnoun\tcm\tdemonstrative;",88],["pnoun\tpnoun\tnoun\tcm\tcm;",104]],"useCount":5878},{"word":"policy","context":[["# for details, see https://www.debian.org/doc/debian-policy/ or",24],["# the debian-policy package",1106],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["# See the policy manual",14]],"useCount":2226},{"word":"poll","context":[["# poll without messages sends 204 no_content",35],["resp = poll :post, \"/ws/poll\", session, %{",41],["resp = poll :post, \"/ws/poll\", session, %{",41],["resp = poll(:get, \"/ws/poll\", session)",48],["resp = poll(:get, \"/ws/poll\", session)",48],["# poll",24],["poll :post, \"/ws\", session, %{",21],["resp = poll :get, \"/ws\", %{\"reject\" => \"true\"}, %{}",18],["resp = poll(:get, \"/ws\", session)",105],["resp = poll :post, \"/ws\", session, %{",113]],"useCount":761},{"word":"pool","context":[["pool: Ecto.Adapters.SQL.Sandbox",411],["{:ok, pool} = P.start_link(opts)",88],["size: 10 # The amount of database connections in the pool",56],["size: 20 # The amount of database connections in the pool",21],["synchronous call to the pool (default: `5_000`)",19],["assert P.transaction(pool, fn(conn) ->",17],["pool: Ecto.Adapters.SQL.Sandbox,",22],["pool: Ecto.Adapters.SQL.Sandbox],",25],[":poolboy.checkin(pool, worker)",28],["test: [database: \"db/#{app}_test.sqlite\", pool: Ecto.Adapters.SQL.Sandbox],",31]],"useCount":820},{"word":"pool_size","context":[["pool_size: 10,",16],["assert_file \"custom_path/config/test.exs\", [~r/Mongo.Ecto/, ~r/pool_size: 1/]",17],["test: [database: \"#{app}_test\", pool_size: 1],",23],["pool_size: String.to_integer(System.get_env(\"POOL_SIZE\") || \"10\"),",27],["pubsub: [pool_size: 1],",16],["pool_size: 20",29],["pool_size: 10",32],["@tag pool_size: size",47],["pool_size: 20",92],["pool_size: 10",402]],"useCount":714},{"word":"port","context":[["http: [port: 4001],",568],["http: [port: 4000],",556],["http: [port: System.get_env(\"PORT\")],",71],["# to the previous section and set your `:url` port to 443:",427],["#       url: [host: \"example.com\", port: 443],",427],["{:ok, sock} = WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket\")",56],["#    https: [port: 443,",104],["url: [host: \"example.com\", port: 80],",326],["#       https: [port: 443,",424],["http: [port: {:system, \"PORT\"}],",503]],"useCount":5157},{"word":"possible","context":[["It is also possible to use `Phoenix.PubSub` directly",12],["# It is also possible to import configuration files, relative to this",1035],["If possible, it does all calculations at compile time to avoid",25],["* durability: possible values are hard and soft. This option will override the",12],["Note that it is always possible to stop an application explicitly by calling",13],["content if possible.",14],["Invoke this function for each possible value you to be",15],["it would also be possible `:trap_exit` to guarantee that `terminate/2`",16],["possible.",18],["It is possible to add custom media types to your Phoenix application.",19]],"useCount":1179},{"word":"post","context":[["assert html_response(conn, 200) =~ \"Edit post\"",55],["assert html_response(conn, 200) =~ \"New post\"",55],["conn = post conn, user_path(conn, :create), user: @invalid_attrs",56],["render(conn, \"edit.html\", post: post, changeset: changeset)",50],["@http_methods [:get, :post, :put, :patch, :delete, :options, :connect, :trace, :head]",52],["conn = post conn, user_path(conn, :create), user: @valid_attrs",53],["post = Repo.insert! %Post{}",126],["post:",72],["post = Repo.get!(Post, id)",83],["resp = poll :post, \"/ws\", session, %{",113]],"useCount":2497},{"word":"post_path","context":[["get conn, post_path(conn, :show, -1)",24],["assert redirected_to(conn) == post_path(conn, :index)",47],["|> redirect(to: post_path(conn, :index))",43],["conn = get conn, post_path(conn, :index)",26],["conn = get conn, post_path(conn, :show, post)",25],["conn = delete conn, post_path(conn, :delete, post)",25],["conn = post conn, post_path(conn, :create), post: @valid_attrs",25],["conn = post conn, post_path(conn, :create), post: @invalid_attrs",25],["conn = put conn, post_path(conn, :update, post), post: @valid_attrs",24],["conn = put conn, post_path(conn, :update, post), post: @invalid_attrs",24]],"useCount":711},{"word":"postgres","context":[["password: \"postgres\",",726],["db = Keyword.get(opts, :database, \"postgres\")",39],["password: \"postgres\",",23],["username: \"postgres\",",768],["username: \"postgres\",",23],["defp get_ecto_adapter(\"postgres\", app, module) do",22],["{:postgrex, Ecto.Adapters.Postgres, db_config(app, module, \"postgres\", \"postgres\")}",22],["{:postgrex, Ecto.Adapters.Postgres, db_config(app, module, \"postgres\", \"postgres\")}",22],["err = Postgrex.Error.exception(postgres: fields)",21],["`mongodb`. Defaults to `postgres`",21]],"useCount":1747},{"word":"postgrex","context":[["{:postgrex, \">= 0.0.0\"},",437],[":phoenix_ecto, :postgrex]]",222],[":postgrex,",45],[":phoenix_ecto, :postgrex, :comeonin]]",33],["{:postgrex, Ecto.Adapters.Postgres, db_config(app, \"postgres\", \"postgres\")}",11],["{:postgrex, Ecto.Adapters.Postgres, db_config(app, module, \"postgres\", \"postgres\")}",22],["assert_file \"custom_path/mix.exs\", ~r/:postgrex/",31]],"useCount":801},{"word":"postinst","context":[["#        * <postinst> `abort-remove'",246],["#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'",267],["#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>",267],["echo \"postinst called with unknown argument \\`$1'\" >&2",267],["#        * <old-postinst> `abort-upgrade' <new version>",267],["#        * <postinst> `configure' <most-recently-configured-version>",267]],"useCount":1581},{"word":"postrm","context":[["#        * <postrm> `purge'",283],["#        * <new-postrm> `abort-upgrade' <old-version>",283],["echo \"postrm called with unknown argument \\`$1'\" >&2",283],["#        * <new-postrm> `failed-upgrade' <old-version>",283],["#        * <disappearer's-postrm> `disappear' <r>overwrit>r> <new-version>",24],["#        * <disappearer's-postrm> `disappear' <overwriter>",259],["#        * <postrm> `remove'",283],["#        * <new-postrm> `abort-install'",283],["#        * <new-postrm> `abort-install' <old-version>",283],["#        * <old-postrm> `upgrade' <new-version>",283]],"useCount":2547},{"word":"posts","context":[["assert html_response(conn, 200) =~ \"Listing posts\"",24],["schema \"posts\" do",77],["schema \"posts\" do",22],["\"/posts/1\",",22],["assert file =~ \"create table(:posts) do\"",31],["render(conn, \"index.html\", posts: posts)",26],["render(conn, \"index.html\", posts: posts)",26],["assert file =~ \"schema \\\"posts\\\" do\"",31],["\"https://example.com/api/posts/5\"",32],["create table(:posts) do",46]],"useCount":1073},{"word":"preinst","context":[["#        * <new-preinst> `install'",295],["#        * <new-preinst> `install' <old-version>",295],["#        * <old-preinst> `abort-upgrade' <new-version>",295],["echo \"preinst called with unknown argument \\`$1'\" >&2",295],["#        * <new-preinst> `upgrade' <old-version>",295]],"useCount":1475},{"word":"prerm","context":[["echo \"prerm called with unknown argument \\`$1'\" >&2",291],["#        * <old-prerm> `upgrade' <new-version>",290],["#        * <new-prerm> `failed-upgrade' <old-version>",290],["#        * <prerm> `remove'",290],["#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>",290],["#        * <deconfigured's-prerm> `deconfigure' `in-favour'",290]],"useCount":1741},{"word":"previous","context":[["In the previous section, we have used the `config/2` function which is",39],["previous value of that header with `value`.",14],["they were sent as part of a previous request",15],["# this file to properly merge your previous config entries.",21],["in the previous section we have rendered the \"index.html\" template:",22],["`conn/0` with all the response cookies from the previous",22],["# to the previous section, and set your `:url` port to 443",23],["name, or false. In case a previous layout is set, `put_layout` also",37],["# to the previous section:",81],["# to the previous section and set your `:url` port to 443:",427]],"useCount":701},{"word":"print","context":[["DAEMONUID=`getent passwd |grep \"^$DAEMONUSER:\" | awk -F : '{print $3}'`",49],["conn = put_layout conn, :print",20],["assert layout(conn) == {AppView, :print}",20],["defp print(value) do",22],["Game.print",26],["iex> conn = put_layout :print",27],["# Do not print debug messages in production",539],["{AppView, :print}",36],["|> print",41],["DAEMONGID=`getent passwd |grep \"^$DAEMONUSER:\" | awk -F : '{print $4}'`",49]],"useCount":1041},{"word":"priv","context":[["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif)$},",95],["cache_static_manifest: \"priv/static/manifest.json\",",123],["~r{priv/gettext/.*(po)$},",273],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["#     mix run priv/repo/seeds.exs",380],["cache_static_manifest: \"priv/static/manifest.json\"",380],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},",423],["# the key and cert in disk or a relative path inside priv,",427],["# for example \"priv/ssl/server.key\".",427]],"useCount":4704},{"word":"private","context":[["update_in conn.private, fn private ->",36],["def action_name(conn), do: conn.private.phoenix_action",34],["def endpoint_module(conn), do: conn.private.phoenix_endpoint",34],["Map.get(conn.private, :phoenix_layout_formats, ~w(html))",36],["def layout(conn), do: conn.private |> Map.get(:phoenix_layout, false)",36],["{mod, _} -> Map.put(private, :phoenix_layout, {mod, layout})",37],["case Map.get(private, :phoenix_layout, false) do",37],["refute conn.private.phoenix_recycled",36],["conn.private.phoenix_view",36],["update_in conn.private, fn private ->",36]],"useCount":1443},{"word":"process","context":[["1) log_end_msg 1 ;; # Old process is still running",143],["# if we are using a daemonuser then look for process that match",49],["def process(:help) do",69],["# Force the process to die killing it manually",49],["|> process",77],["# Check if a given process pid's cmdline matches a given name",97],["# Check if the process is running looking at /proc",97],["# Add code here, if necessary, that waits for the process to be ready",143],["# that waits for the process to drop all resources that could be",143],["|> process( connection_handle.handle )",151]],"useCount":2089},{"word":"prod","context":[["{:eex,  \"new/config/prod.secret.exs\",                    \"config/prod.secret.exs\"},",39],["{:eex,  \"new/config/prod.exs\",                           \"config/prod.exs\"},",39],["append_to path, \"config/prod.secret.exs\", \"\"\"",41],["{:eex,  \"new/config/prod.secret.exs\",                    \"config/prod.secret.exs\"},",39],["import_config \"prod.secret.exs\"",431],["start_permanent: Mix.env == :prod,",2442],["build_embedded: Mix.env == :prod,",2423],["# Finally import the config/prod.secret.exs",478],["{:eex,  \"new/config/prod.exs\",                           \"config/prod.exs\"},",39],["build_embedded:  Mix.env == :prod,",42]],"useCount":6517},{"word":"production","context":[["# Do not configure such in production as keeping",368],["# when deploying your static files in production.",545],["# Do not print debug messages in production",539],["# For production, we configure the host to read the PORT",527],["# Do not pring debug messages in production",21],["# In this file, we keep production configuration that",89]],"useCount":2089},{"word":"productname","context":[["<productname>&dhpackage;</productname>",210],["<!ENTITY debian      \"<productname>Debian</productname>\">",293],["<productname>&dhpackage;</productname>",210],["<!ENTITY debian      \"<productname>Debian</productname>\">",293]],"useCount":1006},{"word":"program","context":[["<para><command>&dhpackage;</command> is a program that...</para>",505],["<refpurpose>program to do something</refpurpose>",505],["<para>Show version of program.</para>",506],["because the original program does not have a manual page.",524],["# First try to stop gracefully the program",49],["# adjust it to the program you want to run.",49],["Show version of program.",285],["<para>The program is currently limited to only work",210]],"useCount":2633},{"word":"programs","context":[["The programs are documented fully by",284],["<!-- Normally the help and version options make the programs stop",210],["<para>The programs are documented fully by <citetitle>The Rise and",506]],"useCount":1000},{"word":"project","context":[["def project do",4308],["# Specifies your project dependencies.",400],["# file won't be loaded nor affect the parent project. For this reason,",1055],["# Aliases are shortcut or tasks specific to the current project.",265],["# is restricted to this project.",632],["# to this project. If another project depends on this project, this",1080],["# Specifies your project dependencies",232],["# Aliases are shortcuts or tasks specific to the current project.",85],["# to this project. If another project depends on this project, this",1080],["# to this project. If another project depends on this project, this",1080]],"useCount":11401},{"word":"provide","context":[["# overrides `call/2` to provide rendering. Once the error is",12],["# Merge project config with either the user-provided config, or the default sys.config we provide.",12],["provide convenience functions for escaping and marking",13],["To specify the endpoint that will provide instrumentation, the first argument",19],["Channels provide a means for bidirectional communication from clients that",25],["* to provide a wrapper for starting and stopping the",40],["# if you want to provide default values for your application for third-",191],["# if you want to provide default values for your application for",858],["call it `Phoenix.PubSub.MyQueue`, the first step is to provide",12]],"useCount":1182},{"word":"provided","context":[["It will fallback to `url` if no option is provided. Accepts the same",37],["If no params are provided, an invalid changeset is returned",587],["can be provided as the last character to indicate a \"topic:subtopic\" match. If",24],["* `Phoenix.Controller` - functions provided by Phoenix",36],["Custom error messages (in EEx format), provided as :message, can use the following values:",26],["One of the main features provided by controllers is the ability",36],["Instruments the given function using the instrumentation provided by",19],["the endpoint's supervision tree. If no name is provided, the name",19],["`Phoenix.Channel.Transport.protocol_version/0`. If no version is provided, the",21],["The functionality provided by this module help with doing \"origin\"",21]],"useCount":1028},{"word":"pubsub","context":[["raise ArgumentError, \"an adapter was given to :pubsub but no :name was defined, \" <>",39],["Broadcasts on the given pubsub server with the given",84],["unquote(pubsub())",39],["defp pubsub() do",39],["@pubsub_server var!(config)[:pubsub][:name] ||",38],["(if var!(config)[:pubsub][:adapter] do",38],["pub_conf = conf[:pubsub]",30],["pubsub: [name: HelloPhoenix.PubSub,",24],["* `:pubsub` - configuration for this endpoint's pubsub adapter.",40],["* `:pubsub` - configuration for this endpoint's pubsub adapter.",40]],"useCount":830},{"word":"pubsub_server","context":[["Phoenix.Channel.Server.broadcast(@pubsub_server, topic, event, msg)",36],["Phoenix.PubSub.subscribe(@pubsub_server, pid, topic, opts)",36],["pubsub_server: pubsub_server,",47],["pubsub_server: pubsub_server,",47],["%{pubsub_server: pubsub_server, topic: topic, channel_pid: channel_pid} = assert_joined!(socket)",44],["%{pubsub_server: pubsub_server, topic: topic} = assert_joined!(socket)",44],["%{pubsub_server: pubsub_server, topic: topic} = assert_joined!(socket)",44],["%{pubsub_server: pubsub_server, topic: topic, channel_pid: channel_pid} = assert_joined!(socket)",44],["def __pubsub_server__, do: @pubsub_server",39],["@pubsub_server var!(config)[:pubsub][:name] ||",38]],"useCount":1178},{"word":"push","context":[["push socket, \"shout\", %{\"hello\" => \"all\"}",31],["push socket, \"broadcast\", %{\"foo\" => \"bar\"}",25],["push socket, event, payload",26],["Scope.push(__MODULE__, unquote(options))",30],["# to the client. The default implementation is just to push it",30],["push socket, \"new_msg\", Map.put(payload, \"transport\", inspect(socket.transport))",31],["push socket, \"you_left\", %{message: \"bye!\"}",31],["push socket, \"joined\", Map.merge(%{status: \"connected\"}, socket.assigns)",32],["ref = push socket, \"ping\", %{\"hello\" => \"there\"}",32],["iex> push socket, \"new_message\", %{id: 1, content: \"hello\"}",36]],"useCount":1137},{"word":"put","context":[["|> Map.put(:status, 200)",60],["|> Map.put(:resp_body, \"\")",63],["conn = put conn, user_path(conn, :update, user), user: @invalid_attrs",53],["|> Map.put(:state, :set)",106],["# verification, you can put default assigns into",442],["@http_methods [:get, :post, :put, :patch, :delete, :options, :connect, :trace, :head]",52],["conn = put conn, user_path(conn, :update, user), user: @valid_attrs",51],["{mod, _} -> Map.put(private, :phoenix_layout, {mod, layout})",37],["ConCache.put(cache, :a, 1)",36],["& &1 |> Map.merge(assigns) |> Map.put(:layout, layout)",34]],"useCount":2152},{"word":"put_status","context":[["conn = conn(:get, \"/\") |> put_status(400)",60],["|> put_status(:not_found)",204],["|> put_status(:bad_request)",130],["|> put_status(:internal_server_error)",81],["|> put_status(status)",35],["|> put_status(401)",38],["|> put_status(200)",50],["|> put_status(:ok)",53],["|> put_status(:created)",225],["|> put_status(:unprocessable_entity)",397]],"useCount":1686},{"word":"puts","context":[["IO.puts \"Nothing happened as far as I am concerned\"",41],["|> UI.puts",87],["IO.puts \".\"",70],["IO.puts \"\"",66],["|> IO.puts",123],["IO.puts \"\"\"",150],["IO.puts \"\"",164],["|> IO.puts",184],["IO.puts message",57],["import IO, only: [gets: 1, puts: 1]",39]],"useCount":1463},{"word":"q","context":[["{:ok, %Record{data: data}} = run q",21],["FLAGS=\"${SITEFLAG} -q -batch -l path.el -f batch-byte-compile\"",144],["if getent passwd | grep -q \"^$DAEMONUSER:\"; then",49],["%Record{data: data} = run q",40],["case Map.fetch(args, \"q\") do",38],["if q === 1.0 && (format = find_format(exts, accepted)) do",26],["q: [nokey: \"\"],",33],["q    = parse_q(args)",36],["parse_header_accept(conn, t, [{-q, exts}|acc], accepted)",36],["run(q)",38]],"useCount":854},{"word":"query","context":[["to build and query models.",1037],["query = \"\"\"",125],["operation: :query,",84],["query =",76],["Repo.all(query)",66],["{query, params} =",65],["query",202],["The `queryparams` option defines the query parameters (optional).",242],["from p in query,",50],["# Alias the data repository and import query/model functions",300]],"useCount":3623},{"word":"quiet","context":[["start-stop-daemon --stop --quiet --pidfile $PIDFILE \\",106],["Mix.Task.run \"ecto.migrate\", [\"--quiet\"]",218],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\",141],["#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \\",138],["start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\",141],["Mix.Task.run \"ecto.create\", [\"--quiet\"]",214],["install-info-altdir --quiet --section \"\" \"\" --dirname=${FLAVOR} /usr/share/info/${PACKAGE}.info.gz",118],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144],["start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON",142],["start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME",142]],"useCount":2179},{"word":"quote","context":[["quote location: :keep do",338],["quote do",438],["ex_ast = quote do",277],["sgml-always-quote-attributes:t",257],["quote unquote: false do",69],["options = quote do",60],["quote bind_quoted: binding do",55],["quote bind_quoted: [opts: opts] do",53],["quote line: -1 do",52],["quote do",9669]],"useCount":11783},{"word":"quoted","context":[["Do NOT define functions inside the quoted expressions",556],["{:ok, quoted} = data |> Code.string_to_quoted",21],["quoted = quote_name(key)",22],["Builds a quoted expression.",23],["quoted = quote do",32],["# SQL spec, they are case insensitive unless quoted, which",34],["unquote(quoted)",35],["# The quoted expression returned by this block is applied",39],["quoted =",23],["The quoted expression should evaluate to a query at runtime.",25]],"useCount":978},{"word":"raise","context":[["raise ArgumentError,",215],["raise \"\"\"",231],["# it to always work (and if it does not, it will raise).",382],["Mix.raise \"\"\"",143],[":erlang.raise(kind, reason, stack)",46],["raise AlreadySentError",91],["raise \"oops\"",71],["{:error, error} -> raise error",57],["Mix.raise \"Module name #{inspect name} is already taken, please choose another name\"",55],["raise Plug.Conn.AlreadySentError",93]],"useCount":3297},{"word":"read","context":[["# For production, we configure the host to read the PORT",527],["# Inside the script, you can read and write to any of your",373],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210],["|> File.read!",95],["# this means its contents can be read but not tampered with.",90],["|> File.read!",67],["log_warning_msg \"cannot re-read the config file (use restart).\"",49],["# Please read this init.d carefully and modify the sections to",49],["File.write!(file, File.read!(file) <> contents)",44],["def render(unquote(source)), do: unquote(File.read!(Path.join(root, source)))",43]],"useCount":2089},{"word":"reason","context":[["{:error, reason}",287],["{:error, reason} -> {:error, reason}",203],["{:error, reason} -> {:error, reason}",203],["kind, reason ->",152],["Returns `{:ok, response}` if the request is successful, `{:error, reason}`",79],["{:error, %HTTPoison.Error{reason: reason}} ->",76],["{:error, %HTTPoison.Error{reason: reason}} ->",76],["{:error, reason} ->",836],["it cannot be async. For this reason, every test runs",1504],["# file won't be loaded nor affect the parent project. For this reason,",1055]],"useCount":7217},{"word":"receive","context":[["# It is also common to receive messages from the client and",34],["receive do: ({:DOWN, ^ref, _, _, _} -> :ok)",26],["Clients must join a channel to send and receive PubSub events on that channel.",25],["In addition to pushing messages out when you receive a `handle_in` event,",23],["The channel that owns the socket will not receive the published",22],["receive do: ({^ref, reply} -> {:error, reply})",21],["receive do: ({^ref, reply} -> {:ok, reply, pid})",21],["receive do: (:ready -> :ok)",19],["receive do",1259],["receive do",684]],"useCount":2200},{"word":"recommend","context":[["# We recommend using the bang functions (`insert!`, `update!`",373],["In practice, we recommend you to create your own helper with your default",15],["# We also recommend setting `force_ssl`, ensuring no data is",426]],"useCount":814},{"word":"redirect","context":[["|> redirect(to: user_path(conn, :index))",126],["|> redirect(to: page_path(conn, :index))",87],["|> redirect(to: user_path(conn, :show, user))",52],["|> redirect(to: \"/\")",174],["|> redirect(to: post_path(conn, :index))",43],["redirect conn, to: \"/\"",37],["raise ArgumentError, \"expected :to or :external option in redirect/2\"",36],["option to redirect to any URL.",36],["def redirect(conn, opts) when is_list(opts) do",36],["Sends redirect response to the given url.",36]],"useCount":1231},{"word":"redirected_to","context":[["assert redirected_to(conn) == <%= singular %>_path(conn, :index)",26],["assert redirected_to(conn) == user_path(conn, :show, user)",39],["assert redirected_to(conn) =~ \"/foo/bar\"",22],["@spec redirected_to(Conn.t, status :: non_neg_integer) :: Conn.t",22],["location || raise \"no location header was set on redirected_to\"",22],["assert redirected_to(conn) == user_path(conn, :index)",106],["assert redirected_to(conn) == page_path(conn, :index)",58],["assert redirected_to(conn) == post_path(conn, :index)",47],["|> redirected_to()",39],["assert redirected_to(conn) == post_path(conn, :show, post)",23]],"useCount":704},{"word":"ref","context":[["assert_reply ref, :ok",49],["\"ref\" => \"123\",",106],["ref = make_ref()",102],["ref = make_ref()",88],["ref = Process.monitor(pid)",81],["ref = Process.monitor(pid)",56],["ref = :erlang.make_ref()",47],["send(parent, {ref, reply})",42],["ref",42],["{:DOWN, ^ref, _, _, _} -> :ok",52]],"useCount":2884},{"word":"refentry","context":[["<refentry>",507],["</refentry>",507],["<!doctype refentry PUBLIC \"-//OASIS//DTD DocBook V4.1//EN\" [",255],["<!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\"",210],["<!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.2//EN\"",40]],"useCount":1519},{"word":"refentryinfo","context":[["<refentryinfo>",505],["</refentryinfo>",505]],"useCount":1010},{"word":"refentrytitle","context":[["<refentrytitle>&dhucpackage;</refentrytitle>",210],["<refentrytitle>info</refentrytitle>",630],["<refentrytitle>info</refentrytitle>",630],["<refentrytitle>foo.conf</refentrytitle>",630],["<refentrytitle>foo.conf</refentrytitle>",630],["<refentrytitle>baz</refentrytitle>",210],["<refentrytitle>bar</refentrytitle>",210],["<refentrytitle>bar</refentrytitle>",210],["<refentrytitle>&dhucpackage;</refentrytitle>",210],["<refentrytitle>baz</refentrytitle>",210]],"useCount":3780},{"word":"reference","context":[["another process and reply when finished by generating a reference to the push",13],["your model tests. See `errors_on/2`'s definition as reference.",445],[".\\\" Some roff macros, for reference:",280],["assert reference       |> is_reference",11],["See also `diff/2` if you want to specify an arbitrary reference date.",14],["pid_of_reference = :global.whereis_name(reference)",20],["a reference is returned. We can use this reference to",14],["a reference is returned. We can use this reference to",14],["reference",14],["reference which you can use to check for a reply:",14]],"useCount":839},{"word":"refmeta","context":[["</refmeta>",507],["<refmeta>",507]],"useCount":1014},{"word":"refname","context":[["<refname>&dhpackage;</refname>",507],["<refname>&dhpackage;</refname>",507]],"useCount":1014},{"word":"refnamediv","context":[["</refnamediv>",507],["<refnamediv>",507]],"useCount":1014},{"word":"refpurpose","context":[["<refpurpose>program to do something</refpurpose>",505],["<refpurpose>program to do something</refpurpose>",505]],"useCount":1010},{"word":"refsect1","context":[["<refsect1 id=\"options\">",210],["<refsect1 id=\"diagnostics\">",210],["<refsect1> ... </refsect1>.",210],["<refsect1>",1188],["</refsect1>",2658],["<refsect1 id=\"files\">",210],["<refsect1 id=\"see_also\">",210],["<refsect1> ... </refsect1>.",210],["<refsect1 id=\"description\">",210],["<refsect1 id=\"bugs\">",210]],"useCount":5736},{"word":"refsynopsisdiv","context":[["<refsynopsisdiv>",507],["</refsynopsisdiv>",507]],"useCount":1014},{"word":"refute","context":[["refute Process.alive?(pid)",46],["refute file =~ \"lockfile: \\\"../../mix.lock\\\"\"",34],["refute Repo.get(Post, post.id)",35],["refute conn.private.phoenix_recycled",36],["refute Enum.member? commands, version3",36],["refute conn.assigns[:catch_all]",40],["refute Enum.member? commands, version1",48],["refute Repo.get(User, user.id)",69],["refute conn.halted",244],["refute changeset.valid?",988]],"useCount":2646},{"word":"relative","context":[["if absolute == relative do",34],["relative",34],["# the key and cert in disk or a relative path inside priv,",427],["# It is also possible to import configuration files, relative to this",1035],["The `path` option represents the relative url path",11],["relative: false,",21],["relative = Path.relative_to(absolute, @phoenix)",33]],"useCount":1595},{"word":"releases","context":[["# Generate release configuration for historical releases",12],["# If you are doing OTP releases, you need to instruct Phoenix",549],["# For a full list of config options for both releases",16],["as a workaround for releases where environment specific information",39],["# ## Using releases",551],["source_boot = rel_dest_path([name, \"releases\", version, \"#{name}.boot\"])",12],["config = case releases do",12],["|> String.replace(@_RELEASES, releases)",12],["releases = get_releases(name)",12],["dest_boot   = rel_dest_path([name, \"releases\", version, \"start.boot\"])",12]],"useCount":1293},{"word":"reload","context":[["echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" >&2",143],["restart|force-reload)",209],["# and leave 'force-reload' as an alias for 'restart'.",143],["# If the daemon can reload its configuration without",143],["# 'force-reload' alias",143],["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["# If the \"reload\" option is implemented then remove the",143],["#reload|force-reload)",142],["#reload|force-reload)",142]],"useCount":2850},{"word":"reloading","context":[["# Enable code reloading on test cases",17],["# Code reloading will only work if the :code_reloader key of",43],["\"disable code reloading\"",11],["# Enables code reloading for development",47],["# Watch static and templates for browser reloading.",527],["# Code reloading can be explicitly enabled under the",569],["This is only required if the watchers or code reloading functionality",29],["* `:code_reloader` - when `true`, enables code reloading functionality",39],["# debugging and code reloading.",572],["\"inside config/config.exs in order to use code reloading or watchers\"",26]],"useCount":1891},{"word":"rely","context":[["# This test case needs to be sync because we rely on",13],["Such tests rely on `Phoenix.ChannelTest` and also",492],["Such tests rely on `Phoenix.ConnTest` and also",544]],"useCount":1049},{"word":"remove","context":[["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144],["echo remove/${PACKAGE}: purging byte-compiled files for ${FLAVOR}",144],["purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)",283],["#        * <postrm> `remove'",283],["#        * <prerm> `remove'",290],["#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>",290],["remove|upgrade|deconfigure)",291],["#        * <postinst> `abort-remove'",246],["#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>",267],["abort-upgrade|abort-remove|abort-deconfigure)",268]],"useCount":2774},{"word":"removed","context":[["custom field removed.",13],["def config_change(changed, _new, removed) do",586],[";; removed but not purged, and we should skip the setup.",132],["* `config_change(changed, removed)` - reload the endpoint configuration",40],["res = Phoenix.Config.config_change(endpoint, changed, removed)",29],["def config_change(changed, removed) do",41],["def config_change(endpoint, changed, removed) do",29],["Phoenix.Endpoint.Adapter.config_change(__MODULE__, changed, removed)",37]],"useCount":907},{"word":"removing","context":[["#          <package-being-installed> <version> `removing'",290],["#          <failed-install-package> <version> `removing'",267],["echo remove/${PACKAGE}: removing Info links for ${FLAVOR}",144]],"useCount":701},{"word":"render","context":[["# In case no render clause matches or no",532],["test \"render any other\" do",488],["def render(\"404.html\", _assigns) do",518],["def render(\"500.html\", _assigns) do",523],["render \"500.html\", assigns",527],["test \"render 500.html\" do",450],["# Bring render/3 and render_to_string/3 for testing custom views",485],["render conn, \"index.html\"",476],["# template is found, let's render it as 500",532],["render(conn, \"new.html\", changeset: changeset)",553]],"useCount":9149},{"word":"renders","context":[["test \"renders 404.html\" do",443],["test \"renders form for editing chosen resource\", %{conn: conn} do",247],["test \"renders form for new resources\", %{conn: conn} do",257],["test \"renders page not found when id is nonexistent\", %{conn: conn} do",286],["test \"creates and renders resource when data is valid\", %{conn: conn} do",159],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["test \"updates and renders chosen resource when data is valid\", %{conn: conn} do",133],["The example above renders a template \"show.html\" from the `MyApp.UserView`",36],["test \"renders 404.json\" do",35]],"useCount":2739},{"word":"replace","context":[["|> String.replace(<<0x2029::utf8>>, \"\\\\u2029\")",28],["String.replace(target_path, \"application_name\", application_name))",40],["# dh_installdeb will replace this with shell code automatically",1136],["|> String.replace(<<0x2028::utf8>>, \"\\\\u2028\")",28],["|> String.replace(@_NAME, name)",24],["|> String.replace(@_VERSION, version)",24],["actual = Regex.replace(~r/(^\\s*)|(\\s+$)|(\\n)/m, EEx.eval_string(render(@haml), []), \"\")",16],["bin |> String.replace(\"_\", \" \") |> String.capitalize",16],["migration = String.replace(path, \"/\", \"_\")",15],["expected_results = Regex.replace(~r/(^\\s*)|(\\s+$)|(\\n)/m, ~s{",14]],"useCount":1470},{"word":"replaceable","context":[["<arg><option>-e <replaceable>this</replaceable></option></arg>",295],["<term><option>--example=<replaceable>that</replaceable></option></term>",210],["<arg><option>--example <replaceable>that</replaceable></option></arg>",295],["<term><option>--example=<replaceable>that</replaceable></option></term>",210],["<arg><option>-e <replaceable>this</replaceable></option></arg>",295],["<arg><option>--example <replaceable>that</replaceable></option></arg>",295],["<replaceable class=\"option\">this</replaceable>",210],["<arg choice=\"plain\"><replaceable>that</replaceable></arg>",210],["<arg choice=\"plain\"><replaceable>that</replaceable></arg>",210],["<replaceable class=\"option\">this</replaceable>",210]],"useCount":3700},{"word":"reply","context":[["{:reply, state, state}",56],["{:reply, response, state}",51],["handle_reply(socket, reply, callback)",42],["send(parent, {ref, reply})",42],["{:reply, reply, state}",40],["{:reply, {:ok, payload}, socket}",40],["{:reply, reply, state}",40],["{:reply, result, state}",78],["{:reply, :ok, state}",258],["{:reply, :ok, socket}",69]],"useCount":2545},{"word":"repo","context":[["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["refute File.exists?(\"photo_blog/lib/photo_blog/repo.ex\")",32],["assert [migration] = Path.wildcard(\"priv/repo/migrations/*_create_post.exs\")",54],["assert [_] = Path.wildcard(\"priv/repo/migrations/*_create_user.exs\")",42],["#     mix run priv/repo/seeds.exs",380],["{:eex,  \"ecto/repo.ex\",              \"lib/application_name/repo.ex\"},",38],["{:eex,  \"ecto/repo.ex\",              \"lib/application_name/repo.ex\"},",38],["{:keep, \"ecto/priv/repo/migrations\", \"priv/repo/migrations\"},",33],["{:eex,  \"ecto/seeds.exs\",            \"priv/repo/seeds.exs\"}",33],["{:keep, \"ecto/priv/repo/migrations\", \"priv/repo/migrations\"},",33]],"useCount":1675},{"word":"repositories","context":[["# repositories directly:",373],["# Or git/path repositories:",1475]],"useCount":1848},{"word":"repository","context":[["and then update your repository by running migrations:",21],["# Start the Ecto repository",452],["# Alias the data repository and import query/model functions",300],["* a migration file for the repository",60],["# Alias the data repository as a convenience",14],["# Load up the repository, start it, and run migrations",11]],"useCount":858},{"word":"req","context":[["terminate(reason, req, stack)",27],["{[{{\"application\", \"json\", []}, :get_json}], req, state}",25],["result = :mod_http_api.process([@command], req)",33],["{true, req, state}",33],["req = request(method: :GET,",33],["def handle(req, state) do",37],["def generate(req) do",39],["def content_types_provided(req, state) do",52],["{:ok, req, state}",100],["<group choice=\"req\">",1050]],"useCount":1998},{"word":"request","context":[["Returns `{:ok, response}` if the request is successful, `{:error, reason}`",79],["See `request!/5` for more detailed information.",78],["# Channels can be used in a request/response fashion",36],["# we unfortunately need to assume it is a browser sending us a request.",36],["on the request. To do so, you can pass the template name as an atom (without",36],["\"template format is meant to be set dynamically based on the request format\"",36],["with a 500 error during a HTML request, `render(\"500.html\", assigns)`",39],["* `call(conn, opts)` - invoked on every request (simply dispatches to",40],["If the request does not fail, the response is returned.",77],["See `request/5` for more detailed information.",77]],"useCount":2447},{"word":"requests","context":[["# to handle requests from services started subsequently which depend",143],["The endpoint is the boundary where all requests to your",41],["configuration cache and possibly the servers for handling requests",41],["* to define an initial plug pipeline where requests",38],["# by sending replies to requests from the client",36],["will render layouts for html requests. For example:",36],["By default, it redirects http requests and sets the",30],["pattern matching for matching routes and serving requests.",30],["for serving web requests.",30],["* `:csrf_token` - for \"post\" requests, the form tag will automatically",24]],"useCount":699},{"word":"require","context":[["require IEx",73],["require Record",67],["require EEx",75],["require Lager",77],["require Logger",2561],["tests that require setting up a connection.",545],["require Record",188],["require Logger",223],["require Integer",49],["require Ecto.Query",66]],"useCount":4263},{"word":"required","context":[["Specific start_link implementation (required by the supervisor)",30],["This is only required if the watchers or code reloading functionality",29],["Callback required by Plug that initializes the router",30],["required_abbr required",31],["# Add authorization logic here as required.",33],["log_failure_msg \"The user $DAEMONUSER, required to run $NAME does not exist.\"",49],["Given a User schema that lists `:name` as a required field and validates",82],["\"required\" => true,",206],["Given a User model that lists `:name` as a required field and validates",297],["# We don't run a server during test. If one is required,",545]],"useCount":1627},{"word":"required_fields","context":[["@required_fields ~w(name email)",13],["|> cast(params, @required_fields, @optional_fields)",710],["@required_fields ~w(name)",69],["|> cast(params, @required_fields, @optional_fields)",55],["|> validate_required(@required_fields)",51],["|> cast(params, @required_fields ++ @optional_fields)",37],["@required_fields ~w()",31],["@required_fields ~w(name)",25],["cast(model_or_changeset,  params, @required_fields, @optional_fields)",25],["@required_fields ~w(email password)",11]],"useCount":1027},{"word":"rescue","context":[["rescue",330],["rescue",1031],["rescue e ->",19],["rescue _ -> IO.puts \"\" end",17],["rescue e in _ ->",16]],"useCount":1413},{"word":"reset","context":[["IO.puts IO.ANSI.reset",20],["Directory.add(:'reset@undead', \"router\")",15],["UI.edge([outer_color, :faint]), :reset,",16],["assert file =~ \"ecto.reset\"",17],["IO.puts IO.ANSI.yellow() <> msg <> IO.ANSI.reset()",21],["def reset do",21],["Mix.shell.info [:green, \"* running \", :reset, cmd]",40],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"],",128],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"]]",233],["inside a transaction which is reset at the beginning",1502]],"useCount":2168},{"word":"resource","context":[["test \"updates and renders chosen resource when data is valid\", %{conn: conn} do",133],["test \"creates and renders resource when data is valid\", %{conn: conn} do",159],["test \"does not show resource and instead throw error when id is nonexistent\", %{conn: conn} do",113],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["test \"deletes chosen resource\", %{conn: conn} do",381],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["test \"creates resource and redirects when data is valid\", %{conn: conn} do",248],["test \"renders form for editing chosen resource\", %{conn: conn} do",247],["test \"shows chosen resource\", %{conn: conn} do",419],["test \"updates chosen resource and redirects when data is valid\", %{conn: conn} do",240]],"useCount":4706},{"word":"resources","context":[["# that waits for the process to drop all resources that could be",143],["See `resources/4`.",82],["resources \"/users\", UserController",95],["test \"renders form for new resources\", %{conn: conn} do",257],["defmacro resources(path, controller) do",31],["resources \"/#{route}\", #{binding[:scoped]}Controller",32],["information on attributes and namespaced resources.",33],["its plural name (used for resources and schema).",39],["resources \"/messages\", MessageController",40],["resources \"/files\", FileController",41]],"useCount":1529},{"word":"resp","context":[["assert resp.body[\"status\"] == 200",185],["assert resp.body[\"status\"] == 410",123],["assert resp.status == 200",171],["resp = poll :post, \"/ws\", session, %{",113],["resp = poll(:get, \"/ws\", session)",105],["Plug.Conn.resp(conn, 200, Fixture.dummy)",95],["session = Map.take(resp.body, [\"token\", \"sig\"])",89],["{:ok, resp} ->",69],["|> resp :no_content, \"\"",52],["Plug.Conn.resp(conn, 200, json)",50]],"useCount":2562},{"word":"resp_body","context":[["assert conn.resp_body == \"{\\\"foo\\\":\\\"bar\\\"}\"",81],["assert conn.resp_body == ~s({\"foo\":\"bar\"})",40],["response.resp_body",35],["assert conn.resp_body == \"\"",35],["|> Map.put(:resp_body, \"\")",63],["assert conn.resp_body =~ \"Welcome!\"",44],["body = Poison.decode!(conn.resp_body)",149],["assert conn.resp_body =~ ~r\"<title>Hello</title>\"",48],["assert conn.resp_body == \"foobar\"",100],["assert conn.resp_body == \"Hello\\n\"",87]],"useCount":1259},{"word":"response","context":[["response.body",113],["assert response.success? == true",124],["assert response.status == 200",134],["assert response(conn, 204)",148],["Returns `{:ok, response}` if the request is successful, `{:error, reason}`",79],["response",110],["case response do",104],["assert response != nil",203],["if response.success? do",163],["If the request does not fail, the response is returned.",77]],"useCount":4644},{"word":"responsible","context":[["Once a connection is established, the transport is responsible",25],["to instrument generic events. This macro is responsible for measuring the time",19],["* `:render_errors` - responsible for rendering templates whenever there",39],["A transport is responsible for:",25],["This module implements the controller pipeline responsible for handling requests.",14],["Format encoders work per format and are responsible for encoding a",15],["which is responsible for dispatching the appropriate action",16],["# This file is responsible for configuring your application",1793]],"useCount":1946},{"word":"restart","context":[["# echo \"Usage: $N {start|stop|restart|reload|force-reload}\" >&2",78],["# 'restart' will not work",97],["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" >&2",143],["# and leave 'force-reload' as an alias for 'restart'.",143],["restart|force-reload)",209],["restart)",65],["log_warning_msg \"cannot re-read the config file (use restart).\"",49],["# check wether $DAEMON is running. If so, restart",65],["&& $0 restart \\",65]],"useCount":1333},{"word":"restricted","context":[["# Note this file is loaded before any dependency and is restricted",25],["# is restricted to this project.",632],["# This configuration is loaded before any dependency and is restricted",1055]],"useCount":1712},{"word":"result","context":[["result =",104],["result =",116],["{:reply, result, state}",78],["The result is wrapped in a `{:cache, value}` tuple so",79],["result",90],["assert desired_result == result",146],["{:ok, result} = parse_string(str)",186],["result",543],["case result do",334],["assert result == expected",248]],"useCount":4605},{"word":"return","context":[["|| return 2",142],["return \"$RETVAL\"",142],["return 0",404],["# Where those two env variables return an absolute path to",427],["`:password` to be safe, it would return:",379],["<para><command>&dhpackage;</command> provides some return codes, that can",210],["[ ! -f \"$PIDFILE\" ] && return 1",146],["|| return 1",142],["[ \"$RETVAL\" = 2 ] && return 2",142],["# To deny connection, return `:error`.",431]],"useCount":4132},{"word":"returned","context":[["If the request does not fail, the response is returned.",77],["# The quoted expression returned by this block is applied",39],["If `params` are nil, an invalid changeset is returned",60],["just the static path is returned.",32],["test \":help returned by option parsing with -h and --help options\" do",31],["In case a JSON response is returned, it will be converted",24],["Logger.error \"#{inspect handler}.id/1 returned invalid identifier #{inspect invalid}. \" <>",25],["If no params are provided, an invalid changeset is returned",587],["Logger.error \"#{inspect handler}.connect/2 returned invalid value #{inspect invalid}. \" <>",25],["test \"three values returned if three given\" do",28]],"useCount":1115},{"word":"returns","context":[["returns the response body if one was set or sent.",45],["* `default_config/0` - returns the default transport configuration",25],["* `handlers/0` - returns a map of handlers. For example, if the",25],["The following returns must be handled by transports:",25],["test \"returns OK\" do",27],["It returns `{:ok, reply, socket}` or `{:error, reply}`.",28],["`argv` can be -h or --help, which returns :help.",28],["test \"returns true when user is an admin\" do",29],["# When encoded, the changeset returns its errors",88],["test \"returns the version\" do",31]],"useCount":963},{"word":"reverse","context":[["|> Enum.reverse()",74],["|> Enum.reverse",368],["In general, `underscore` can be thought of as the reverse of",13],["for scope <- Enum.reverse(stack),",13],["routes   = env.module |> Module.get_attribute(:phoenix_routes) |> Enum.reverse",15],["routes = env.module |> Module.get_attribute(:phoenix_routes) |> Enum.reverse",15],["|> String.reverse",19],["list -> Enum.reverse list",20],["Enum.reverse(acc)",38],["|> Enum.reverse",49]],"useCount":744},{"word":"rooms","context":[["session = join(\"/ws\", \"rooms:lobby\", @mode)",33],["channel = Process.whereis(:\"rooms:lobby\")",24],["\"ref\" => nil, \"topic\" => \"rooms:lobby\"}",28],["channel \"rooms:*\", RoomChannel",31],["WebsocketClient.send_event(sock, \"rooms:lobby1\", \"new_msg\", %{body: \"Should ignore\"})",36],["channel \"rooms:*\", RoomChannel",34],["\"topic\" => \"rooms:lobby\",",111],["channel \"rooms:*\", MyApp.RoomChannel",40],["session = join(\"/ws\", \"rooms:lobby\")",40],["WebsocketClient.join(sock, \"rooms:lobby\", %{})",24]],"useCount":960},{"word":"root","context":[["def render(unquote(source)), do: unquote(File.read!(Path.join(root, source)))",43],["root = Path.expand(\"../templates\", __DIR__)",41],["use Phoenix.View, root: \"web/templates\"",611],["root = \"/var/www/templates\"",36],["root: Path.dirname(__DIR__),",452],["# You will also need to set the application root to `.` in order",236],["username: \"root\",",57],["assert Template.template_path_to_name(path, root) ==",36],["# Tear the alias to simply store the root in the AST.",47],["@external_resource Path.join(root, source)",43]],"useCount":2850},{"word":"route","context":[["assert extract_defhelper(route, 0) == String.strip \"\"\"",38],["resources \"/#{route}\", #{binding[:scoped]}Controller",32],["opts = resource.route",33],["assert extract_defhelper(route, 1) == String.strip \"\"\"",38],["Generates a route to a static file in `priv/static`.",38],["route   = String.split(path, \"/\") |> Enum.drop(-1) |> Kernel.++([plural]) |> Enum.join(\"/\")",39],["For example, the route:",83],["Exception raised when no route is found.",31],["the route:",30],["Generates a route to handle a #{verb} request to the given path.",30]],"useCount":1138},{"word":"router","context":[["raise \"cannot define plug at the router level, plug must be defined inside a pipeline\"",30],["router = Keyword.fetch!(opts, :router)",30],["conn: conn, router: router}",30],["conn: conn, router: router}",30],["pipeline (in the router):",36],["def router do",558],["# Import URL helpers from the router",254],["{:eex,  \"new/web/router.ex\",                             \"web/router.ex\"},",39],["{:eex,  \"new/web/router.ex\",                             \"web/router.ex\"},",39],["Returns the router module as an atom, raises if unavailable.",34]],"useCount":2096},{"word":"routes","context":[["routes included in the router above:",30],["Finally, Phoenix ships with a `mix phoenix.routes` task that nicely",30],["to generate \"RESTful\" routes to a given resource:",30],["their routes up to date.",30],["Defines a scope in which routes can be nested.",30],["The router provides a set of macros for generating routes",30],["* `:only` - a list of actions to generate routes for, for example: `[:show, :edit]`",30],["# browser related routes and resources",30],["will include routes to the following actions:",35],["$ mix phoenix.routes",35]],"useCount":901},{"word":"run","context":[["def run(args) do",379],["# The watchers configuration can be used to run external",570],["# We don't run a server during test. If one is required,",545],["# which you typically run after static files are built.",503],["# Script for populating the database. You can run it as:",380],["#     mix run priv/repo/seeds.exs",380],["PIDFILE=/var/run/$NAME.pid",240],["# Rename this file to \"watch\" and then you can run the \"uscan\" command",276],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["# For example, to create, migrate and run the seeds file at once:",350]],"useCount":8090},{"word":"running","context":[["if running ; then",379],["running() {",49],["# check wether $DAEMON is running. If so, restart",65],["# Check if the process is running looking at /proc",97],["log_progress_msg \"apparently not running\"",98],["#   1 if daemon was already running",143],["1) log_end_msg 1 ;; # Old process is still running",143],["if running ;  then",146],["# to set PORT=80 before running your server.",527],["# You should set gzip to true if you are running phoenix.digest",545]],"useCount":3333},{"word":"runs","context":[["it cannot be async. For this reason, every test runs",1504],["The callback must return a changeset and always runs inside",12],["# The environment this Dynamo runs on",14],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143]],"useCount":1673},{"word":"s","context":[["# template is found, let's render it as 500",532],["s",122],["#        * <disappearer's-postrm> `disappear' <overwriter>",259],["#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'",267],["#        * <deconfigured's-prerm> `deconfigure' `in-favour'",290],["#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>",290],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["# Configures Elixir's Logger",631],["your model tests. See `errors_on/2`'s definition as reference.",445],["#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>",267]],"useCount":6286},{"word":"safe","context":[["{:safe, ~s(<input name=\"search[key]\" type=\"hidden\" value=\"false\">) <>",24],["#=> {:safe, \"Hello John&lt;br /&gt;Doe\"}",22],["template is safe and that we don't need to escape its contents because",22],["we got: `{:safe, \"Hello John Doe\"}`. The safe tuple annotates that our",22],["markup safe: true do",48],["`:name` field and validation that `:password` is \"safe\":",63],["#=> {:safe, \"Hello John Doe\"}",66],["we got: `{:safe, \"Hello John Doe\"}`. The safe tuple annotates that our",22],["`:password` to be safe, it would return:",379],["{:safe, \"<hello>\"}",36]],"useCount":1067},{"word":"sbin","context":[["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["if test -x /usr/sbin/install-info-altdir; then",288],["PATH=/sbin:/usr/sbin:/bin:/usr/bin",143],["PATH=/sbin:/usr/sbin:/bin:/usr/bin",143],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124],["PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",124]],"useCount":946},{"word":"schema","context":[["Given a User schema that lists `:name` as a required field and validates",82],["schema \"posts\" do",77],["schema \"comments\" do",43],["schema",42],["# Assuming form contains a User schema",40],["schema \"users\" do",39],["its plural name (used for resources and schema).",39],["assert file =~ \"schema \\\"users\\\" do\"",38],["assert file =~ \"schema \\\"posts\\\" do\"",31],["schema \"users\" do",264]],"useCount":1147},{"word":"scope","context":[["unquote(scope)",39],["Once a pipeline is defined, it can be piped through per scope.",30],["# Set up initial scope",30],["scope path: path do",30],["scope \"/api/v1\", as: :api_v1, alias: API.V1 do",30],["defmacro scope(path, options, do: context) do",30],["scope path: path, alias: alias do",30],["scope resource.member, do: unquote(context)",39],["scope =",39],["scope \"/\" do",87]],"useCount":1279},{"word":"script","context":[["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143],["assert [] == Rule.test( @rule, script )",103],["script = \"\"\"",218],["# Inside the script, you can read and write to any of your",373],["# summary of how this script can be called:",1135],["assert expected_errors == Rule.test( @rule, script )",71],["def test(script, _config = [] \\\\ []) do",70],["script |> Script.walk( &check_node(&1, &2) )",60],["# Example init.d script with LSB support.",49],["script",41]],"useCount":2783},{"word":"scripts","context":[["# from the install scripts for gettext by Santiago Vila",144],["def render(\"scripts.html\", _assigns) do",16],["def render(\"scripts.index.html\", _assigns) do",16],["def render(\"scripts.show.html\", _assigns) do",16],["scripts",21],["# The above code will not work for interpreted scripts, use the next",69],["#\t\tThis file should be used to construct scripts for /etc/init.d.",78],["# skeleton\texample file to build /etc/init.d/ scripts.",78],["be used in scripts:</para>",210],["# generated by other debhelper scripts.",1136]],"useCount":1812},{"word":"search","context":[["assert content =~ ~s(<select id=\"search_datetime_month\" name=\"search[datetime][month]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_hour\" name=\"search[datetime][hour]\">)",66],["assert content =~ ~s(<select id=\"search_datetime_year\" name=\"search[datetime][year]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_day\" name=\"search[datetime][day]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_min\" name=\"search[datetime][min]\">)",54],["~s(<input name=\"search[key]\" type=\"hidden\" value=\"false\">) <>",42],["assert content =~ ~s(<select id=\"search_datetime_sec\" name=\"search[datetime][sec]\">)",36],["~s(<select id=\"search_key\" multiple=\"\" name=\"search[key][]\">) <>",33],["{:safe, ~s(<input name=\"search[key]\" type=\"hidden\" value=\"false\">) <>",24],["~s(<select id=\"search_key\" name=\"search[key]\">) <>",39]],"useCount":1002},{"word":"secret","context":[["{:eex,  \"new/config/prod.secret.exs\",                    \"config/prod.secret.exs\"},",39],["# Finally import the config/prod.secret.exs",478],["import_config \"prod.secret.exs\"",431],["append_to path, \"config/prod.secret.exs\", \"\"\"",41],["* `:secret_key_base` - a secret key used as a base to generate secrets",40],["{:eex,  \"new/config/prod.secret.exs\",                    \"config/prod.secret.exs\"},",39],["assert_file \"photo_blog/config/prod.secret.exs\", config",32],["# import_config \"prod.secret.exs\"",32],["assert_file \"photo_blog/config/prod.secret.exs\", &refute(&1 =~ config)",32],["assert_file \"custom_path/config/prod.secret.exs\", ~r/Tds.Ecto/",31]],"useCount":1597},{"word":"section","context":[["manual page with: nroff -man <package>.<section> | less'.  A",40],["more about the connection type, look at the \"Connection type\" section in the",24],["install-info-altdir --quiet --section \"\" \"\" --dirname=${FLAVOR} /usr/info/${PACKAGE}.info.gz",26],["section: \"Service\",",37],["# to the previous section and set your `:url` port to 443:",427],["manual page with: nroff -man <package>.<section> | less'. A typical entry",210],["<!-- Or use this section to tell about upstream BTS. -->",210],["install-info-altdir --quiet --section \"\" \"\" --dirname=${FLAVOR} /usr/share/info/${PACKAGE}.info.gz",118],["# to the previous section:",81],["In the previous section, we have used the `config/2` function which is",39]],"useCount":1407},{"word":"see","context":[["For a complete description, see the Info files.",285],["<application>Info</application> format; see below.</para>",296],["allowed: see man(7), man(1). -->",296],["allowed: see man(7), man(1) and",210],["file (see also <xref linkend=\"files\"/>).</para>",210],[".\\\" other parameters are allowed: see man(7), man(1)",280],["# see: dh_installdeb(1)",1140],["options is included below.  For a complete description, see the",507],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],[".\\\" for manpage-specific macros, see man(7)",280]],"useCount":5247},{"word":"seeds","context":[["#     mix run priv/repo/seeds.exs",380],["# For example, to create, migrate and run the seeds file at once:",350],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343],["{:eex,  \"ecto/seeds.exs\",            \"priv/repo/seeds.exs\"}",33],["{:eex,  \"ecto/seeds.exs\",            \"priv/repo/seeds.exs\"}",33],["assert_file \"photo_blog/priv/repo/seeds.exs\", ~r\"PhotoBlog.Repo.insert!\"",23],["\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",14]],"useCount":1176},{"word":"seg","context":[["<seg><errorcode>0</errorcode></seg>",210],["<seg><errorcode>1</errorcode></seg>",210],["<seg><errorcode>1</errorcode></seg>",210],["<seg><errorcode>0</errorcode></seg>",210],["<seg>The configuration file seems to be broken.</seg>",210],["<seg>The configuration file seems to be broken.</seg>",210],["<seg>Program exited successfully.</seg>",210],["<seg>Program exited successfully.</seg>",210]],"useCount":1680},{"word":"seglistitem","context":[["<seglistitem>",420],["</seglistitem>",420]],"useCount":840},{"word":"segtitle","context":[["<segtitle>Diagnostic</segtitle>",210],["<segtitle>Code</segtitle>",210],["<segtitle>Diagnostic</segtitle>",210],["<segtitle>Code</segtitle>",210]],"useCount":840},{"word":"select","context":[["~s(<select id=\"search_key\" name=\"search[key]\">) <>",39],["~s(</select>)",87],["</select>",67],["assert content =~ ~s(<select id=\"search_datetime_hour\" name=\"search[datetime][hour]\">)",66],["assert content =~ ~s(<select id=\"search_datetime_day\" name=\"search[datetime][day]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_month\" name=\"search[datetime][month]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_year\" name=\"search[datetime][year]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_min\" name=\"search[datetime][min]\">)",54],["~s(<select id=\"search_key\" multiple=\"\" name=\"search[key][]\">) <>",33],["assert content =~ ~s(<select id=\"search_datetime_sec\" name=\"search[datetime][sec]\">)",36]],"useCount":1481},{"word":"selected","context":[["assert content =~ ~s(<option selected=\"selected\" value=\"13\">13</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"2\">02</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"2\">02</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"13\">13</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"2020\">2020</option>)",110],["assert content =~ ~s(<option selected=\"selected\" value=\"11\">11</option>)",77],["assert content =~ ~s(<option selected=\"selected\" value=\"11\">11</option>)",77],["assert content =~ ~s(<option selected=\"selected\" value=\"4\">April</option>)",66],["assert content =~ ~s(<option selected=\"selected\" value=\"4\">April</option>)",66],["assert content =~ ~s(<option selected=\"selected\" value=\"2020\">2020</option>)",110]],"useCount":1655},{"word":"self","context":[["me = self",35],["worker = self",36],["me = self",44],["transport_pid: self(),",47],["opts = [agent: agent, parent: self()]",52],["send self(), {:mix_shell_input, :yes?, false}",54],["send(self, :after_join)",55],["{:ok, sock} = WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket\")",56],["Logger.disable(self())",107],["parent = self()",227]],"useCount":1688},{"word":"send","context":[["send(pid, msg)",35],["send(parent, {:terminate, m})",38],["Defines a pipeline to send the connection through.",30],["send(fastlane_pid, encoded_msg)",30],["send(self, {:after_join, message})",29],["send(self(), :hello)",28],["send(parent, n)",26],["send(parent, {ref, reply})",42],["send self(), {:mix_shell_input, :yes?, false}",54],["send(self, :after_join)",55]],"useCount":1253},{"word":"send_resp","context":[["send_resp(conn, conn.status || 200, content_type, data)",33],["|> send_resp(conn.status || 302, \"text/html\", body)",33],["def check_origin(conn, handler, endpoint, opts, sender \\\\ &Plug.Conn.send_resp/1)",22],["defp send_resp(conn, default_status, default_content_type, body) do",37],["conn |> send_resp(406, \"\") |> halt()",44],["send_resp(conn, :no_content, \"\")",149],["send_resp(conn, conn.status || 200, \"application/json\", encoder.encode_to_iodata!(data))",34],["send_resp(conn, conn.status || 200, \"text/plain\", to_string(data))",36],["send_resp(conn, conn.status || 200, \"text/html\", data)",36],["|> send_resp(conn.status || default_status, body)",36]],"useCount":795},{"word":"sent","context":[["content type) and the data is sent to the client with default status of 200.",36],["returns the response body if one was set or sent.",45],["assert conn.state === :sent",119],["are sent through;",38],["@already_sent {:plug_conn, :sent}",41],["assert_received {:plug_conn, :sent}",54],["# restarting (for example, when it is sent a SIGHUP),",143],["Raises `Plug.Conn.AlreadySentError` if the conn was already sent.",155],["assert conn.state == :sent",213],["# ever sent via http, always redirecting to https:",426]],"useCount":2265},{"word":"server","context":[["Broadcasts on the given pubsub server with the given",84],["\"Internal server error\"",144],["# Uncommment to examine a FTP server",256],["# for example \"priv/ssl/server.key\".",427],["# to set PORT=80 before running your server.",527],["server: false",532],["# you can enable the server option below.",545],["# We don't run a server during test. If one is required,",545],["# to start the server for all endpoints:",549],["# Alternatively, you can configure exactly which server to",549]],"useCount":6887},{"word":"session","context":[["resp = poll(:get, \"/ws\", session)",105],["to encode cookies, session and friends. Defaults to `nil` as it must",35],["resp = poll :post, \"/ws\", session, %{",113],["# The session will be stored in the cookie and signed,",90],["session = Map.take(resp.body, [\"token\", \"sig\"])",89],["session",76],["resp = poll(:get, \"/ws/poll\", session)",48],["resp = poll :post, \"/ws/poll\", session, %{",41],["session = join(\"/ws\", \"rooms:lobby\")",40],["session = join(\"/ws\", \"rooms:lobby\", @mode)",33]],"useCount":1114},{"word":"set","context":[["# If this value is set too low you might not",97],["set -e",1270],["# You should set gzip to true if you are running phoenix.digest",545],["# to set PORT=80 before running your server.",527],["# the socket that will be set for all channels, ie",442],["# to the previous section and set your `:url` port to 443:",427],["your module gains a set of macros for translations, for example:",294],["# You will also need to set the application root to `.` in order",236],["<!-- dhusername could also be set to \"&dhfirstname; &dhsurname;\". -->",180],["|> Map.put(:state, :set)",106]],"useCount":6391},{"word":"setting","context":[["tests that require setting up a connection.",545],["# We also recommend setting `force_ssl`, ensuring no data is",426],["# Load the VERBOSE setting and other rcS variables",143],["raise ArgumentError, \"a content-type header is required when setting \" <>",22],["# You can turn off static assets by setting it to false",15]],"useCount":1151},{"word":"setup","context":[["setup do",59],["#     $ mix ecto.setup",348],["setup tags do",1507],["setup do",2180],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"],",128],[";; removed but not purged, and we should skip the setup.",132],["setup %{conn: conn} do",167],["\"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"]]",233],["setup context do",246],["[\"ecto.setup\": [\"ecto.create\", \"ecto.migrate\", \"run priv/repo/seeds.exs\"],",343]],"useCount":5649},{"word":"setup_all","context":[["setup_all do",907],["setup_all _context do",27]],"useCount":934},{"word":"sgml","context":[["mode: sgml",257],["sgml-always-quote-attributes:t",257],["sgml-shorttag:t",257],["sgml-indent-step:2",257],["sgml-local-catalogs:nil",257],["sgml-default-dtd-file:nil",257],["sgml-exposed-tags:nil",257],["sgml-local-ecat-files:nil",257],["sgml-omittag:t",257],["sgml-parent-document:nil",257]],"useCount":3882},{"word":"sh","context":[["#!/bin/sh",1252],["#! /bin/sh",170],["#! /bin/sh -e",144],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143],[". /lib/init/vars.sh",143],["#!/bin/sh -e",144]],"useCount":1996},{"word":"share","context":[["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/docbook-xsl/manpages/docbook.xsl",165],["/usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \\",45],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/nwalsh/manpages/docbook.xsl",45],["install-info-altdir --quiet --section \"\" \"\" --dirname=${FLAVOR} /usr/share/info/${PACKAGE}.info.gz",118],["(let ((package-dir (concat \"/usr/share/\"",136],["ELDIR=/usr/share/emacs/site-lisp/${PACKAGE}",144],["ELCDIR=/usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["rm -rf /usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["/usr/share/xml/docbook/stylesheet/docbook-xsl/manpages/docbook.xsl \\",165],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210]],"useCount":1424},{"word":"shell","context":[["# This is a POSIX shell fragment",235],["Mix.shell.info \"\"\"",203],["install? = Mix.shell.yes?(\"\\nFetch and install dependencies?\")",40],["Mix.shell.info \"Phoenix v#{@version}\"",40],["Mix.shell.info [:green, \"* running \", :reset, cmd]",40],["# We could use Mix.shell.cmd/1 but that automatically",38],["# dh_installdeb will replace this with shell code automatically",1136],["Mix.shell.info result",38],["# The shell asks to install deps.",32],["Mix.shell(Mix.Shell.Process)",28]],"useCount":1905},{"word":"short","context":[["DESC=#PACKAGE              # Introduce a short description here",34],["NAME=#PACKAGE              # Introduce the short server's name here",34],["# Short-Description: <Enter a short description of the sortware>",105],["controller, etc, so keep them short and clean, focused",556],["short: true",14],["# rendering a short string.",13],["for these functions and a short description.",11],["Keep the definitions in this module short and clean,",21]],"useCount":788},{"word":"should","context":[["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# You should also configure the url host to something",527],["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506],["# which should be versioned separately.",481],[".\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection",280],[".\\\" First parameter, NAME, should be all caps",280],["<!-- TITLE should be something like \"User commands\" or similar (see",210],["# party users, it should be done in your mix.exs file.",196],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143],["# You should set gzip to true if you are running phoenix.digest",545]],"useCount":5199},{"word":"show","context":[["conn = get conn, user_path(conn, :show, user)",65],["render conn, \"show.html\", message: \"Hello\"",72],["def render(\"show.json\", %{user: user}) do",61],["def show(conn, %{\"id\" => id}) do",542],["get \"/pages/:page\", PageController, :show",60],["get \"/pages/:id\", PageController, :show",61],["test \"does not show resource and instead throw error when id is nonexistent\", %{conn: conn} do",113],["render conn, :show, message: \"Hello\"",72],["def show(conn, params) do",76],["def show(conn, _params) do",228]],"useCount":4208},{"word":"shutdown","context":[["client connection was closed, the reason will be `{:shutdown, :closed}`.",22],["exit(:shutdown)",40],["assert_receive {:terminate, :shutdown}",44],["assert_receive {:EXIT, ^pid, :shutdown}",47],["handle_result({:stop, {:shutdown, :left}, :ok, put_in(socket.ref, ref)}, :handle_in)",21],["`{:shutdown, :left}`. Similarly, if we are terminating because the",22],["{:stop, :shutdown, socket}",22],["handle_result({:stop, {:shutdown, :closed}, socket}, :handle_in)",21],["Process.exit(pid, :shutdown)",21],["{:stop, :shutdown, {:error, %{}}, socket}",21]],"useCount":802},{"word":"singular","context":[["conn = get conn, <%= singular %>_path(conn, :index)",25],["conn = delete conn, <%= singular %>_path(conn, :delete, <%= singular %>)",23],["<%= singular %> = Repo.insert! %<%= alias %>{}",76],["[singular, plural | attrs] = validate_args!(parsed)",54],["<%= singular %> = Repo.get!(<%= alias %>, id)",49],["binding = Mix.Phoenix.inflect(singular)",45],["singular: \"user\",",28],["<%= singular %> = Repo.insert %<%= alias %>{}",27],["assert redirected_to(conn) == <%= singular %>_path(conn, :index)",26],["|> redirect(to: <%= singular %>_path(conn, :index))",25]],"useCount":1158},{"word":"site","context":[["\"Page Title\" => \"E-commerce training site\",",13],["ELRELDIR=../../../emacs/site-lisp/${PACKAGE}",14],["site: \"https://api.github.com\",",16],["rm -rf /usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["ELDIR=/usr/share/emacs/site-lisp/${PACKAGE}",144],["#    SITEFLAG=\"-no-site-file\"",144],[";; installed in a subdirectory of the respective site-lisp directory.",144],["ELCDIR=/usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["#    SITEFLAG=\"--no-site-file\"",144]],"useCount":907},{"word":"size","context":[["size: 1 # Use a single connection for transactional tests",34],["@tag pool_size: size",47],["size: 10 # The amount of database connections in the pool",56],["assert 2 == size",32],["<<id::size(16)>>",32],["size = complexity_of do",32],["<< opaque :: size(32) >>,",31],["category: type, size: 3,",29],["size: 1,",26],["category: type, size: 2,",29]],"useCount":780},{"word":"sleep","context":[["sleep \"$DIETIME\"s",98],[":timer.sleep(100)",173],["[ -n \"$DIETIME\" ] && sleep $DIETIME",49],[":timer.sleep(500)",55],["sleep 500",58],[":timer.sleep(10)",58],[":timer.sleep(1000)",83],["[ -n \"$DODTIME\" ] && sleep \"$DODTIME\"s",96],["# sleep for some time.",143],["# on this one.  As a last resort, sleep for some time.",143]],"useCount":1846},{"word":"so","context":[["# token will be different every time, so verify static token",24],["Uses the endpoint configuration to decide so. It is a",25],["on the request. To do so, you can pass the template name as an atom (without",36],["the accepts plug before rendering. You can do so by adding the following to your",36],["views and so on.",577],["controller, etc, so keep them short and clean, focused",556],["# check wether $DAEMON is running. If so, restart",65],["# and so on) as they will fail if something goes wrong.",371],["The result is wrapped in a `{:cache, value}` tuple so",79],["# of this file so it overrides the configuration defined above.",633]],"useCount":2737},{"word":"socket","context":[["{:ok, socket}",754],["{:noreply, socket}",660],["socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket",470],["socket \"/phoenix/live_reload/socket\", Phoenix.LiveReloader.Socket",470],["# Returning `nil` makes this socket anonymous.",445],["def connect(_params, socket) do",432],["# the socket that will be set for all channels, ie",442],["#     {:ok, assign(socket, :user_id, verified_user_id)}",443],["#     def id(socket), do: \"users_socket:#{socket.assigns.user_id}\"",444],["#     def id(socket), do: \"users_socket:#{socket.assigns.user_id}\"",444]],"useCount":13999},{"word":"sockets","context":[["Returns all sockets configured in this endpoint.",30],["sockets",22],["sockets = HashDict.new",18],["sockets: HashDict.new,",15],["# all active sockets and channels for a given user:",444],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["Transport.dispatch(message, sockets, self, Router, :phx_pub, WebSocket)",12],["sockets = Module.get_attribute(env.module, :phoenix_sockets)",33],["def __sockets__, do: unquote(sockets)",30],["{:ok, sockets} = Transport.dispatch(message, HashDict.new, self, Router, :phx_pub, WebSocket)",12]],"useCount":1066},{"word":"some","context":[["\"http://example.com/pages/hello?some=query\"",46],["@valid_attrs %{name: \"some content\"}",99],["# let some servers to die gracefully and",97],["# Wait some sensible amount, some server need this",49],["# Wait some sensible amount, some server need this",49],["# NOTE: Some servers might die some time after they start,",49],["# If the above conditions are not satisfied then add some other code",143],["# on this one.  As a last resort, sleep for some time.",143],["# sleep for some time.",143],["<para><command>&dhpackage;</command> provides some return codes, that can",210]],"useCount":1817},{"word":"something","context":[["test \"stating something\" do",26],["something",50],["want to clean something up, it is better to monitor your channel",16],["Or even assert something was broadcast into pubsub:",14],["the data being sent, as long as something was replied.",14],["the data being sent, as long as something was sent.",28],["# You should also configure the url host to something",527],["<refpurpose>program to do something</refpurpose>",505],["# and so on) as they will fail if something goes wrong.",371],["<!-- TITLE should be something like \"User commands\" or similar (see",210]],"useCount":1772},{"word":"source","context":[["def render(unquote(source)), do: unquote(File.read!(Path.join(root, source)))",43],["contents = EEx.eval_string(render(source), binding, file: source)",43],["only in development as it allows listing of the application source",43],["create_file(target, render(source))",43],["@external_resource Path.join(root, source)",43],["contents = EEx.eval_string(render(source), binding, file: source)",43],["def render(unquote(source)), do: unquote(File.read!(Path.join(root, source)))",43],["for {format, source, target_path} <- mapping do",45],["source: %Alembic.Source{",72],["...>     source: %Alembic.Source{",104]],"useCount":1223},{"word":"sources","context":[["{join, name, _model} = elem(sources, ix)",11],["# with brunch.io to recompile .js and .css sources.",567],["end) || raise \"could not find #{source_file_path} in any of the sources\"",12],["calls `mix compile` for sources exclusive to the `web` directory.",11],["sources = create_names(query)",25],["\"(\" <> expr(expr, sources, query) <> \")\"",20],["expr(left, sources, query) <> \" IN (\" <> args <> \")\"",19],["{table, name, _model} = elem(sources, 0)",19],["{_, name, _} = elem(sources, idx)",13]],"useCount":697},{"word":"spec","context":[["@spec view_module(Plug.Conn.t) :: atom",36],["@spec put_view(Plug.Conn.t, atom) :: Plug.Conn.t",36],["@spec layout_formats(Plug.Conn.t) :: [String.t]",36],["@spec html(Plug.Conn.t, iodata) :: Plug.Conn.t",36],["@spec router_module(Plug.Conn.t) :: atom",36],["@spec start_link() :: {:ok, pid} | {:error, String.t()}",36],["@spec action_name(Plug.Conn.t) :: atom",36],["@spec json(Plug.Conn.t, term) :: Plug.Conn.t",36],["@spec recycle(Conn.t) :: Conn.t",36],["@spec start_link() :: {:ok, pid} | {:error, String.t}",42]],"useCount":2149},{"word":"specific","context":[["This is useful when a specific connection is required",22],["representation specific to the template format. In the example above,",22],["that dispatch to specific controllers and actions. Those",30],["to support rendering, and other Phoenix specific behaviour",36],["as a workaround for releases where environment specific information",39],["* to host web specific configuration for your",40],["# Aliases are shortcuts or tasks specific to the current project.",85],["# Aliases are shortcut or tasks specific to the current project.",265],["# Import environment specific config. This must remain at the bottom",630],[".\\\" for manpage-specific macros, see man(7)",280]],"useCount":1525},{"word":"split","context":[["route   = String.split(path, \"/\") |> Enum.drop(-1) |> Kernel.++([plural]) |> Enum.join(\"/\")",39],["|> String.split(\",\")",60],["|> String.split(\"\\n\")",80],["|> Module.split",86],["|> String.split(\".\")",166],["|> String.split(\"\\n\", trim: true)",55],["|> Module.split()",43],["Endpoint configuration is split into two categories. Compile-time",40],["|> Path.split",40],["|> String.split",38]],"useCount":1084},{"word":"stable","context":[["# See http://elixir-lang.org/docs/stable/Supervisor.Behaviour.html",60],["# See http://elixir-lang.org/docs/stable/elixir/Supervisor.html",757],["# See http://elixir-lang.org/docs/stable/elixir/Application.html",782],["# See http://elixir-lang.org/docs/stable/Application.Behaviour.html",53]],"useCount":1652},{"word":"stack","context":[["pipe_through :browser # Use the default browser stack",498],["{:ok, agent} = A.start_link(stack)",102],["stack = System.stacktrace()",68],["terminate(reason, req, stack)",27],[":erlang.raise(kind, reason, stack)",46],["reason = Exception.normalize(kind, reason, stack)",20],["stack = [",83],["# and are meant to test the full stack.",16],["%{conn: conn, kind: kind, reason: reason, stack: stack} = wrapper",16],["%{conn: conn, kind: kind, reason: reason, stack: stack} = wrapper",16]],"useCount":1542},{"word":"stacktrace","context":[["# Set a higher stacktrace during development.",369],["stack = System.stacktrace()",68],["# Set a higher stacktrace during test",62],["reraise exception, stacktrace",48],["reason = {{:nocatch, value}, System.stacktrace()}",20],[":erlang.raise(kind, reason, stacktrace)",16],[":erlang.raise(:error, {:nocatch, value}, System.stacktrace())",15],["stacktrace = System.stacktrace",84],["stacktrace = System.stacktrace",84],["# Set a higher stacktrace during development. Avoid configuring such",93]],"useCount":908},{"word":"start","context":[["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144],["def start do",199],["start)",274],["ExUnit.start()",378],["# to start the server for all endpoints:",549],["def start(_type, _args) do",1397],["# start per endpoint:",549],["loc: %{start: 0},",914],["ExUnit.start",1269]],"useCount":10259},{"word":"start_link","context":[["Supervisor.start_link(children, opts)",999],["def start_link do",978],["def start_link() do",311],["def start_link(opts \\\\ []) do",159],["{:ok, agent} = A.start_link(stack)",102],[":supervisor.start_link(__MODULE__, [])",95],["def start_link(opts) do",95],["{:ok, pool} = P.start_link(opts)",88],["Supervisor.start_link(__MODULE__, [], name: __MODULE__)",81],["Supervisor.start_link(__MODULE__, :ok)",60]],"useCount":5327},{"word":"start_permanent","context":[["start_permanent: Mix.env == :prod,<%= if ecto do %>",13],["start_permanent: Mix.env == :prod,",2442]],"useCount":2455},{"word":"started","context":[["#   0 if daemon has been started",143],["#   2 if daemon could not be started",143],["# to handle requests from services started subsequently which depend",143],["# needed by services started subsequently.  A last resort is to",143],["# It's ok, the server started and is running",49],["# started (on start or restart) the script will",40],["after your application is started and can be read and written through the",40],["Before being used, an endpoint must be explicitly started as part",38],["Code.ensure_loaded?(IEx) && IEx.started?",19],["name pair will be started as part of the supervision tree. if",21]],"useCount":842},{"word":"starting","context":[["options starting with two dashes (`-').",284],["* to provide a wrapper for starting and stopping the",40],["* `init(opts)` - invoked when starting the endpoint server",41],["raise ArgumentError, \"static_path/2 expects a path starting with / as argument\"",32],["# in Phoenix.Endpoint as well the supervisor for starting",32],["match on all topics starting with a given prefix:",17],["The configuration above takes care of starting the",12],["with long options starting with two dashes (`-').  A summary of",507]],"useCount":965},{"word":"starts","context":[["the \"watch\" mode of the brunch build tool when the server starts.",39],["or a `:name`, `:adapter`, and options which starts the adapter in",19],["test \"adapters starts on configured port and serves requests and stops for dev\" do",13],["test \"adapters starts on configured port and serves requests and stops for prod\" do",13],["supervision tree starts. Defaults to `false`. The `mix phoenix.server`",40],["* `:server` - when `true`, starts the web server when the endpoint",40],["* `start_link()` - starts the Endpoint supervision tree, including its",41],["# Function that starts the daemon/service",143],["# Start the endpoint when the application starts",549]],"useCount":897},{"word":"state","context":[["{:ok, req, state}",100],["{:ok, state}",807],["assert conn.state === :sent",119],["{:noreply, state}",1508],["|> Map.put(:state, :set)",106],["def init(state) do",102],["{:stop, :normal, state}",138],["assert conn.state == :sent",213],["{:reply, :ok, state}",258],["state",715]],"useCount":8987},{"word":"static","context":[["# containing the digested version of static files. This",503],["# which you typically run after static files are built.",503],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},",423],["cache_static_manifest: \"priv/static/manifest.json\"",380],["# for the new static assets to be served after a hot upgrade:",236],["cache_static_manifest: \"priv/static/manifest.json\",",123],["# Watch static and templates for browser reloading.",527],["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["# Serve at \"/\" the static files from \"priv/static\" directory.",546],["# when deploying your static files in production.",545]],"useCount":6798},{"word":"status","context":[["assert resp.status == 200",171],["status)",240],["assert conn.status == 400",197],["assert resp.body[\"status\"] == 200",185],["echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" >&2",143],["assert conn.status == 204",136],["assert resp.body[\"status\"] == 410",123],["assert conn.status == 200",1025],["assert conn.status == 404",326],["assert response.status == 200",134]],"useCount":7174},{"word":"stop","context":[["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144],["stop)",274],["<!-- Normally the help and version options make the programs stop",210],["start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON",142],["start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON",142],["start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME",142],["#echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2",143],["# Failed to stop",143],["echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" >&2",143],["start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME",144]],"useCount":5560},{"word":"store","context":[["# Tear the alias to simply store the root in the AST.",47],["store: :cookie,",40],["Go to the store and buy some more, 99 bottles of beer on the wall.",21],["# Uncomment the lines below to enable the cookie session store",13],["session: [store: :cookie,",13],["store",11],["store: :cookie,",628]],"useCount":773},{"word":"str","context":[["str = \"\"\"",612],["do: str",25],["parse_string!(str)",371],["{:error, error} = parse_string(str)",27],["def printable(str) when is_binary(str), do: str",19],["def printable(str) when is_binary(str), do: str",19],["def printable(str) when is_binary(str), do: str",19],["str",37],["str",84],["{:ok, result} = parse_string(str)",186]],"useCount":1498},{"word":"strategies","context":[["# for other strategies and supported options",818],["Valid selector strategies are `:css`, `:class`, `:id`, `:name`, `:tag`, `:xpath`, `:link_text` and `:partial_link_text`",16]],"useCount":834},{"word":"strategy","context":[["based on the chosen strategy.",18],["opts = [strategy: :one_for_one, name: __MODULE__]",27],["supervise(children, strategy: :one_for_one)",302],["supervise(children, strategy: :simple_one_for_one)",123],["case Supervisor.start_link(children, strategy: :one_for_one, name: mod) do",29],["supervise [], strategy: :one_for_one",29],["supervise child_processes, strategy: :one_for_one",17],["supervise children, strategy: :one_for_one",48],["strategy: __MODULE__,",39],["Supervisor.start_link(children, strategy: :one_for_one)",37]],"useCount":735},{"word":"string","context":[["field :name, :string",479],["gettext \"Here is the string to translate\"",297],["field :email, :string",212],["# <Webpage URL> <string match>",252],["ngettext \"Here is the string to translate\",",297],["add :name, :string",368],["field :title, :string",157],["add :email, :string",135],["string",126],["field :description, :string",125]],"useCount":6192},{"word":"struct","context":[["Returns the OpenAperture.ManagerApi.Response struct.",120],["struct",348],["def changeset(struct, params \\\\ %{}) do",175],["* `conn` - the `Plug.Conn` struct",36],["`Plug.Conn` struct, as specified by the Plug library.",36],["Helper for returning list of errors in a struct when given certain data.",82],["Builds a changeset based on the `struct` and `params`.",169],["struct.__struct__.changeset(struct, data)",93],["struct.__struct__.changeset(struct, data)",93],["def errors_on(struct, data) do",97]],"useCount":1769},{"word":"subsection","context":[[".\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection",280],["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506]],"useCount":786},{"word":"such","context":[["targets (such as build), you will need to include xsltproc",40],["# Set a higher stacktrace during development. Avoid configuring such",93],["version in one of the debian/rules file targets (such as build), you will need",210],["debian/rules file targets (such as build), you will need to include",252],["# Do not configure such in production as keeping",368],["It uses the configuration under `:url` to generate such.",52],["convenience or a documentation on such steps.",25],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["* a binary - containing a request body. For such cases, `:headers`",24],["such. It fallsback to `:url` if `:static_url` is not set.",24]],"useCount":2369},{"word":"summary","context":[["# summary of how this script can be called:",1135],["with long options starting with two dashes (`-').  A summary of",507],["<para>Show summary of options.</para>",506],["Show summary of options.",285],["A summary of options is included below.",279],["automatically generated in your endpoint. Here is a summary of all the",40],["Returns a summary of counts by nucleotide.",16],["field :summary, :string",13]],"useCount":2781},{"word":"supervisors","context":[["# Define workers and child supervisors to be supervised",348],["# Here you could define other workers and supervisors as children",443]],"useCount":791},{"word":"support","context":[["assert_file \"custom_path/test/support/conn_case.ex\",",44],["{:eex,  \"ecto/model_case.ex\",        \"test/support/model_case.ex\"},",39],["{:eex,  \"new/test/support/conn_case.ex\",                 \"test/support/conn_case.ex\"},",39],["{:eex,  \"new/test/support/conn_case.ex\",                 \"test/support/conn_case.ex\"},",39],["which formats support/require layout rendering (defaults to \"html\" only).",36],["defp elixirc_paths(:test), do: [\"lib\", \"web\", \"test/support\"]",609],["defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]",65],["# Example init.d script with LSB support.",49],["assert_file \"custom_path/test/support/model_case.ex\",",44],["assert_file \"custom_path/test/support/channel_case.ex\",",44]],"useCount":1383},{"word":"supported","context":[["supported by your database, although it requires the",21],["# for other strategies and supported options",818],["where type are the types supported by Ecto. Ommitting",16],["The following values are supported as date:",15],["The following values are supported as time:",15],["Logger.debug \"No supported media type in accept header in plug :accepts, \" <>",21],["Check `datetime_select/3` for more information on options and supported values.",30],["The supported options are:",31]],"useCount":967},{"word":"surname","context":[["<!-- dhusername could also be set to \"&firstname; &surname;\". -->",30],["<surname>&dhsurname;</surname>",210],["<!ENTITY dhsurname   \"<surname>SURNAME</surname>\">",295],["<!ENTITY dhsurname   \"<surname>SURNAME</surname>\">",295],["<surname>&dhsurname;</surname>",210]],"useCount":1040},{"word":"system","context":[["available via the Info system.",284],["<contrib>Wrote this manpage for the Debian system.</contrib>",210],["</citerefentry> system.</para>",210],["<application>Info</application> system.</para>",296],["<para>The system-wide configuration file to control the",210],["`{:system, \"ENV_VAR\"}`. When given a tuple like `{:system, \"PORT\"}`,",39],["# your version control system.",88],["http: [port: {:system, \"PORT\"}],",503],["<para>This manual page was written for the Debian system",210],["# from the system environment. Therefore, you will need",527]],"useCount":2719},{"word":"t","context":[["i: 2 t: 18;",200],["sgml-indent-data:t",257],["sgml-always-quote-attributes:t",257],["i: 3 t: 6",200],["@type t :: %__MODULE__{",431],["i: 15 t: 18;",200],["# We don't run a server during test. If one is required,",545],["# file won't be loaded nor affect the parent project. For this reason,",1055],["sgml-omittag:t",257],["sgml-shorttag:t",257]],"useCount":13100},{"word":"table","context":[["assert file =~ \"create table(:posts) do\"",31],["create table(:users) do",199],["alter table(:users) do",103],["table",36],["assert file =~ \"create table(:users) do\"",38],["create table(:posts) do",46],["table",52],["assert file =~ \"create table(:posts, primary_key: false) do\"",22],["alter table(:posts) do",22],["create table(:comments) do",24]],"useCount":873},{"word":"tag","context":[["#   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}",1430],["@tag disabled: false",70],["@tag :authenticated",77],["# To specify particular versions, regardless of the tag, do:",89],["# { :foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\" }",92],["# @tag :skip",142],["# @tag :pending",740],["@tag :pending",1808],["Generates tag for inlined form input errors.",269],["@tag :skip",133]],"useCount":6304},{"word":"tags","context":[["schema \"tags\" do",17],["create table(:tags) do",17],["# Import all HTML functions (forms, tags, etc)",19],["tags",20],["script and style tags to be sent with proper content type",25],["# Use Phoenix.HTML to import all HTML functions (forms, tags, etc)",59],["setup tags do",1507],["unless tags[:async] do",1343],["# Use all HTML functionality (forms, tags, etc)",533],["sgml-exposed-tags:nil",257]],"useCount":3934},{"word":"task","context":[["@task \"\"\"",20],["{:ok, task}   -> task",26],["{:ok, task}  -> {task, []}",26],["One can also pass a router explicitly as an argument to the task:",30],["Finally, Phoenix ships with a `mix phoenix.routes` task that nicely",30],["{:ok, task}   -> task",26],["{:ok, task}  -> {task, []}",26],["# manifest is generated by the mix phoenix.digest task",503],["{:ok, task} = Task.start_link(fn ->",16],["task automatically sets this to `true`.",40]],"useCount":878},{"word":"template","context":[["when is_atom(view) and is_binary(template) or is_atom(template) do",48],["# template is found, let's render it as 500",532],["template",63],["Once the template is rendered, the template format is set as the response",36],["case Path.extname(template) do",37],["format will be found at rendering time, similar to the template in",37],["render view, template, assign_model(assigns, view, model)",37],["|> render(template, assigns)",38],["def render(conn, template, assigns)",38],["when is_atom(view) and is_binary(template) or is_atom(template) do",48]],"useCount":3842},{"word":"templates","context":[["use Phoenix.View, root: \"web/templates\"",611],["~r{web/templates/.*(eex)$}",514],["# in the errors.po file. On your own code and templates,",181],["# Watch static and templates for browser reloading.",527],["# On your own code and templates, depending on whether you",114],["# Functions defined here are available to all other views/templates",63],["{:eex,  \"new/web/templates/page/index.html.eex\",         \"web/templates/page/index.html.eex\"},",39],["* `:render_errors` - responsible for rendering templates whenever there",39],["root = Path.expand(\"../templates\", __DIR__)",41],["# Embed all defined templates",41]],"useCount":3363},{"word":"term","context":[["</term>",600],["<term><filename>${HOME}/.foo.conf</filename></term>",210],["<term><option>--version</option></term>",210],["<term><option>-h</option></term>",210],["<term><filename>${HOME}/.foo.conf</filename></term>",210],["<term><option>-e <replaceable>this</replaceable></option></term>",210],["<term><option>-e <replaceable>this</replaceable></option></term>",210],["<term><option>-h</option></term>",210],["<term><option>-h</option>",296],["<term><option>-v</option>",297]],"useCount":6729},{"word":"terminate","context":[["# Would allow you to broadcast a \"disconnect\" event and terminate",444],["def terminate(reason, socket) do",33],["terminate(reason, req, stack)",27],["def terminate(_reason, socket) do",35],["def terminate(_reason, _state) do",68],["send(parent, {:terminate, m})",38],["def terminate(reason, state) do",54],["assert_receive {:terminate, :shutdown}",44],["terminate = fn(m) ->",38],["def terminate(_reason, state) do",33]],"useCount":1175},{"word":"test","context":[["test \"changeset with valid attributes\" do",673],["test \"the truth\" do",1017],["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035],["defp elixirc_paths(:test), do: [\"lib\", \"web\", \"test/support\"]",609],["test \"changeset with invalid attributes\" do",671],["Finally, if the test case interacts with the database,",1503],["of the test unless the test case is marked as async.",1504],["it cannot be async. For this reason, every test runs",1504],["This module defines the test case to be used by",1506],["of the test unless the test case is marked as async.",1504]],"useCount":30987},{"word":"testing","context":[["testing. While endpoint testing is preferred over controller",22],["## Views testing",22],["# The default endpoint for testing",1051],["## Endpoint testing",22],["testing. While endpoint testing is preferred over controller",22],["Conveniences for testing Phoenix endpoints and",22],["# Bring render/3 and render_to_string/3 for testing custom views",485],["# Import conveniences for testing with channels",494],["# Import conveniences for testing with connections",544],["for testing a plug or a particular function.",22]],"useCount":2987},{"word":"tests","context":[["tests that require setting up a connection.",545],["Such tests rely on `Phoenix.ConnTest` and also",544],["channel tests.",492],["Such tests rely on `Phoenix.ChannelTest` and also",492],["model tests.",465],["your model tests. See `errors_on/2`'s definition as reference.",445],["Allowed in guard tests. Inlined by the compiler.",50],["size: 1 # Use a single connection for transactional tests",34],["## Integration tests",19],["## Unit tests",19]],"useCount":3170},{"word":"text","context":[["add :description, :text",64],["{:text, \"static/robots.txt\",              \"web/static/assets/robots.txt\"},",36],["@spec text(Plug.Conn.t, String.Chars.t) :: Plug.Conn.t",36],["send_resp(conn, conn.status || 200, \"text/html\", data)",36],["def text(conn, data) do",36],["assert get_resp_content_type(conn) == \"text/html\"",41],["text",96],[":text ->",46],["assert get_resp_content_type(conn) == \"text/plain\"",41],["{:text, \"static/brunch/.gitignore\",       \".gitignore\"},",38]],"useCount":2660},{"word":"that","context":[["A module that keeps using definitions for controllers,",575],["tests that require setting up a connection.",545],["<para><command>&dhpackage;</command> is a program that...</para>",505],["# the socket that will be set for all channels, ie",442],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["Given a User model that lists `:name` as a required field and validates",297],["<arg><option>--example <replaceable>that</replaceable></option></arg>",295],["Please remember that if you create the nroff version in one of the",252],["# Additional options that are passed to the Daemon.",235],["<term><option>--example=<replaceable>that</replaceable></option></term>",210]],"useCount":9122},{"word":"the","context":[["# Configuration for the OTP application",2109],["of the test unless the test case is marked as async.",1504],["This module defines the test case to be used by",1506],["# and its dependencies with the aid of the Mix.Config module.",1768],["# and its dependencies with the aid of the Mix.Config module.",1768],["# the debian-policy package",1106],["inside a transaction which is reset at the beginning",1502],["Finally, if the test case interacts with the database,",1503],["of the test unless the test case is marked as async.",1504],["Finally, if the test case interacts with the database,",1503]],"useCount":91925},{"word":"them","context":[["# them here, so they can be loaded by Credo before running the analysis.",12],["Then expect them in the test:",14],["will automatically load all templates at \"web/template/user\" and include them",17],["controller, etc, so keep them short and clean, focused",556],["# This module is used to catch failures and render them using a view.",12],["particular directory and embedding them into a single module.",12],["# here (which is why it is important to import them last).",1036],["overridden (by redefining them). The following list also shows the typespecs",11]],"useCount":1670},{"word":"then","context":[[";; xemacs19, emacs20, xemacs20...).  The compiled code is then",144],["if running ;  then",146],["if [ ${FLAVOR} = emacs ]; then exit 0; fi",144],["#if [ ${FLAVORTEST} = xemacs ] ; then",144],["if [ ${FLAVOR} != emacs ]; then",144],["# If do_reload() is not implemented then leave this commented out",143],["You could then write your assertion like:",381],["if running ; then",379],["if test -x /usr/sbin/install-info-altdir; then",288],["# Rename this file to \"watch\" and then you can run the \"uscan\" command",276]],"useCount":3711},{"word":"they","context":[["As controllers are plugs, they implement both `init/1` and",16],["# and so on) as they will fail if something goes wrong.",371],["# Many daemons don't delete their pidfiles when they exit.",143],["# NOTE: Some servers might die some time after they start,",49],["# SQL spec, they are case insensitive unless quoted, which",34],["Phoenix, they are:",22],["Clients are expected to send the Channel Transport protocol version that they",21],["notified of the event so that they can perform their respective actions.",19],["client as they happen in real-time with the \"presence_diff\" event.",18],["Like routers, controllers are plugs, but they are wired to dispatch",16]],"useCount":806},{"word":"this","context":[["# And access this configuration in your application as:",857],["# dh_installdeb will replace this with shell code automatically",1136],["it cannot be async. For this reason, every test runs",1504],["# summary of how this script can be called:",1135],["# to this project. If another project depends on this project, this",1080],["# file won't be loaded nor affect the parent project. For this reason,",1055],["# It is also possible to import configuration files, relative to this",1035],["# of this file so it overrides the configuration defined above.",633],["# to this project. If another project depends on this project, this",1080],["# to this project. If another project depends on this project, this",1080]],"useCount":19951},{"word":"those","context":[["# Where those two env variables point to a file on disk",12],["`:sec`. All options given to those keys will be forwarded to the",12],["a whole HTML file, it is common to put those files in the file",13],["like writing to the database, and verify those side-effects",14],["# an environment's settings will override those of a release",16],["The first step is to teach Plug about those new media types in",19],["Most of those messages are user messages except by:",21],["# Because those macros are executed multiple times,",27],["# Where those two env variables point to a file on",142],["# Where those two env variables return an absolute path to",427]],"useCount":715},{"word":"time","context":[["# If this value is set each time the server is",40],["and changing it at runtime has no effect. The compile-time",41],["format: \"$time $metadata[$level] $message\\n\",",656],["time",40],["[ -n \"$STARTTIME\" ] && sleep $STARTTIME # Wait some time",40],["#       format: \"$date $time [$level] $metadata$message\\n\",",153],["# sleep for some time.",143],["time = {23,23,23}",42],["# NOTE: Some servers might die some time after they start,",49],["# on this one.  As a last resort, sleep for some time.",143]],"useCount":2471},{"word":"timeout","context":[["The timeout is in milliseconds and defaults to 100ms.",39],["timeout = fn :timeout ->",31],["timeout = fn :timeout ->",31],["* `:timeout` - The time in milliseconds to wait for the call to finish,",38],["timeout ->",57],["payload: unquote(payload)}, unquote(timeout)",60],["* `:timeout` - operation timeout in milliseconds. If this timeout expires,",28],["* `:timeout` - operation timeout in milliseconds. If this timeout expires,",28],["* `:timeout` - operation timeout in milliseconds. If this timeout expires,",28],["{:error, :timeout}",28]],"useCount":1307},{"word":"timer","context":[["import :timer, only: [ sleep: 1 ]",38],[":timer.sleep(1)",40],[":timer.sleep(100)",173],[":timer.sleep(1000)",83],[":timer.sleep(10)",58],[":timer.sleep(500)",55],[":timer.sleep(50)",36],[":timer.sleep(20)",37],["{elapsed_time, sleep_time} = :timer.tc(fn ->",36],[":timer.sleep 100",36]],"useCount":1185},{"word":"timestamps","context":[["timestamps()",184],["# Do not include metadata nor timestamps in development logs",590],["timestamps",958],["timestamps",1007],["timestamps()",195],["assert file =~ \"timestamps\"",39]],"useCount":2973},{"word":"title","context":[["<title>DIAGNOSTICS</title>",210],["<title>OPTIONS</title>",507],["<title>DESCRIPTION</title>",507],["<title>OPTIONS</title>",507],["<title>DESCRIPTION</title>",507],["<title>SEE ALSO</title>",506],["<title>SEE ALSO</title>",506],["title: Test",399],["<title>AUTHOR</title>",297],["<title>AUTHOR</title>",297]],"useCount":7779},{"word":"to","context":[["This module defines the test case to be used by",1506],["When used, dispatch to the appropriate controller/view/etc.",588],["# is restricted to this project.",632],["imports other functionality to make it easier",835],["# if you want to provide default values for your application for",858],["# It is also possible to import configuration files, relative to this",1035],["# It is also possible to import configuration files, relative to this",1035],["# here (which is why it is important to import them last).",1036],["to build and query models.",1037],["# to this project. If another project depends on this project, this",1080]],"useCount":52143},{"word":"to_string","context":[["Atom.to_string(name) <> \".\" <> format",37],["defp flash_key(atom) when is_atom(atom), do: Atom.to_string(atom)",33],["|> List.to_string",52],["|> Atom.to_string()",33],["|> to_string",30],["|> Atom.to_string",101],["|> to_string",239],["send_resp(conn, conn.status || 200, \"text/plain\", to_string(data))",36],["import Kernel, except: [to_string: 1]",34],["defp pad(i), do: to_string(i)",37]],"useCount":1371},{"word":"token","context":[["# performing token verification on connect.",430],["token = \"token\"",37],["token = \"token\"",37],[":meck.expect(EtcdClusterQuery, :get_by_etcd_token, fn token -> %EtcdCluster{etcd_token: token} end)",38],[":meck.expect(EtcdClusterQuery, :get_by_etcd_token, fn token -> %EtcdCluster{etcd_token: token} end)",38],["case token do",41],["session = Map.take(resp.body, [\"token\", \"sig\"])",89],["|> token",88],["token",72],["iex> socket.assigns[:token]",44]],"useCount":2160},{"word":"topic","context":[["`from`, `topic`, `event` and `payload`.",42],["when is_binary(topic) and is_map(payload) do",43],["%{pubsub_server: pubsub_server, topic: topic, channel_pid: channel_pid} = assert_joined!(socket)",44],["topic: topic,",117],["%{pubsub_server: pubsub_server, topic: topic} = assert_joined!(socket)",44],["%{pubsub_server: pubsub_server, topic: topic, channel_pid: channel_pid} = assert_joined!(socket)",44],["%{pubsub_server: pubsub_server, topic: topic} = assert_joined!(socket)",44],["when is_binary(topic) and is_binary(event) and is_map(payload) do",105],["\"topic\" => \"rooms:lobby\",",111],["topic: topic,",117]],"useCount":5449},{"word":"transaction","context":[["result = Repo.transaction(fn ->",30],["Repo.transaction fn ->",31],[":poolboy.transaction(",33],["TestRepo.transaction(fn() ->",36],["Amnesia.transaction do",36],["Repo.transaction(fn ->",46],["# Create the database, run migrations, and start the test transaction.",61],["PoolRepo.transaction(fn ->",62],["inside a transaction which is reset at the beginning",1502],["transaction",18]],"useCount":1991},{"word":"translate","context":[["dgettext \"errors\", \"Here is the error message to translate\"",297],["ngettext \"Here is the string to translate\",",297],["gettext \"Here is the string to translate\"",297],["\"Here are the strings to translate\",",297],["Translator.translate(quoted, env)",11]],"useCount":1199},{"word":"translate_error","context":[["content_tag :span, translate_error(error), class: \"help-block\"",264],["def translate_error(msg) do",186],["def translate_error({msg, opts}) do",301],["Ecto.Changeset.traverse_errors(changeset, &translate_error/1)",60]],"useCount":811},{"word":"translation","context":[["# Simple translation",297],["# Domain-based translation",297],["# Plural translation",297]],"useCount":891},{"word":"transport","context":[["# transport :longpoll, Phoenix.Transports.LongPoll",418],["transport :websocket, Phoenix.Transports.WebSocket",465],["transport :websocket, Phoenix.Transports.WebSocket,",49],["transport :longpoll, Phoenix.Transports.LongPoll",41],["push socket, \"new_msg\", Map.put(payload, \"transport\", inspect(socket.transport))",31],["transport :websocket, Phoenix.Transports.WebSocket,",29],["push socket, \"new_msg\", Map.put(payload, \"transport\", inspect(socket.transport))",31],["transport: transport,",29],["\"  Transport:  #{inspect socket.transport}\\n\" <>",29],["\"strict-transport-security\" header for https ones.",30]],"useCount":2491},{"word":"true","context":[["migration: true,",304],["true",1981],["#       force_ssl: [hsts: true]",427],["#     config :phoenix, :serve_endpoints, true",527],["# You should set gzip to true if you are running phoenix.digest",545],["true ->",1860],["use ExUnit.Case, async: true",3311],["Process.flag(:trap_exit, true)",241],["code_reloader: true,",584],["debug_errors: true,",602]],"useCount":17919},{"word":"truth","context":[["test \"the truth\" do",1017]],"useCount":1017},{"word":"try","context":[["# stall to try to determine if it is running",40],["result = try do",27],["all data was already encoded so far. Let's try to inject custom code:",20],["If you are confused you could try `mix workshop.hint`. Otherwise ask your",19],["try do",1900],["_ -> {:error, \"Release step failed. Please fix any errors and try again.\"}",11],["try do",588],["# If it's still running try to kill it more forcefully",49],["# First try to stop gracefully the program",49]],"useCount":2703},{"word":"two","context":[["# Where those two env variables point to a file on",142],["The transport requires two functions:",25],["Values are expected to be an Enumerable containing two-item tuples",25],["often made of two parts: `\"topic:subtopic\"`. Using the `\"topic:subtopic\"`",25],["This process is two-fold:",33],["Those functions are imported from two modules:",36],["Endpoint configuration is split into two categories. Compile-time",40],["options starting with two dashes (`-').",284],["# Where those two env variables return an absolute path to",427],["with long options starting with two dashes (`-').  A summary of",507]],"useCount":1806},{"word":"txt","context":[["{:text, \"static/robots.txt\",              \"web/static/assets/robots.txt\"},",36],["fixture = tmp_path(\"tmp_test.txt\")",16],["dest = tmp_path(\"tmp_test.txt\")",15],["gzippable_exts: ~w(.js .css .txt .text .html .json)]]",28],["result = Path.join(__DIR__, \"input.txt\")",29],["only: ~w(css fonts images js favicon.ico robots.txt)",449],["only: ~w(css images js favicon.ico robots.txt)",87],["{:text, \"static/robots.txt\",      \"priv/static/robots.txt\"},",30],["{:text, \"static/robots.txt\",      \"priv/static/robots.txt\"},",30],["{:text, \"static/robots.txt\",              \"web/static/assets/robots.txt\"},",36]],"useCount":793},{"word":"type","context":[["type: %{kind: :NamedType,",85],["@type t :: %__MODULE__{",431],["\"type\" => \"integer\"",76],["type: type,",68],["<tasks xsi:type=\"exercise:Task\">",141],["@type t :: %__MODULE__{}",156],["case type do",107],["\"type\" => \"string\"",105],["type: type,",68],["type",59]],"useCount":5321},{"word":"uncommenting","context":[["# by uncommenting the line below and defining dev.exs, test.exs and such.",1035]],"useCount":1035},{"word":"under","context":[["granted to copy, distribute and/or modify this document under",295],["It uses the configuration under `:url` to generate such.",52],["It uses the configured `:format_encoders` under the `:phoenix`",40],["It uses the configuration under `:static_url` to generate",26],["Puts the given value under key in the flash storage.",22],["However there are keys under assigns that are specially handled by",20],["instrumentation is happening (under the `:module` key), the file and line",17],["is happening (under `:function`). This information can be used arbitrarely",15],["# need to set the @endpoint to the router under test.",15],["# Code reloading can be explicitly enabled under the",569]],"useCount":1136},{"word":"unknown","context":[["Phoenix.Token.sign(Endpoint, Atom.to_string(__MODULE__), {:v1, \"unknown\", pid, topic})}",15],["assert {:stale, \"/images/unknown.png\"} =",14],["<!ENTITY dhusername  \"unknown\">",24],["echo \"postrm called with unknown argument \\`$1'\" >&2",283],["unknown         float",35],["echo \"postinst called with unknown argument \\`$1'\" >&2",267],["echo \"preinst called with unknown argument \\`$1'\" >&2",295],["echo \"prerm called with unknown argument \\`$1'\" >&2",291],["Adapter.static_path(HTTPEndpoint, \"/images/unknown.png\")",13],["{:ok, resp} = HTTPClient.request(:get, \"http://127.0.0.1:#{@prod}/unknown\", %{})",13]],"useCount":1297},{"word":"unless","context":[["of the test unless the test case is marked as async.",1504],["unless tags[:async] do",1343],["unless name =~ ~r/^[A-Z]\\w*(\\.[A-Z]\\w*)*$/ do",45],["from the path, unless `--module` or `--app` is given.",44],["unless name =~ ~r/^[a-z][\\w_]*$/ do",44],["unless format == :keep do",43],["message: \"Do not use = in if or unless.\",",24],["through iframes unless in the same origin",25],["unless param do",33],["# SQL spec, they are case insensitive unless quoted, which",34]],"useCount":3404},{"word":"unload","context":[[":meck.unload(Git)",33],["on_exit fn -> :meck.unload end",34],[":meck.unload(QueueBuilder)",44],[":meck.unload(ConnectionPool)",46],[":meck.unload(ConnectionOptionsResolver)",46],[":meck.unload(ConnectionPools)",50],["on_exit fn -> unload end",81],[":meck.unload(File)",96],[":meck.unload",101],[":meck.unload(Workflow)",110]],"useCount":1118},{"word":"unquote","context":[["payload: unquote(payload)}, unquote(timeout)",60],["@behaviour unquote(__MODULE__)",84],["payload: unquote(payload)}, unquote(timeout)",60],["quote unquote: false do",69],["Module.concat([unquote(alias)|unquote(t)])",47],["Module.concat([unquote(alias)|unquote(t)])",47],["unquote(body)",132],["@before_compile unquote(__MODULE__)",169],["import unquote(__MODULE__)",242],["unquote(block)",271]],"useCount":4821},{"word":"unsafe","context":[["[password: \"is unsafe\", name: \"is blank\"]",380],["iex> {:password, \"is unsafe\"} in changeset.errors",378],["assert {:password, \"is unsafe\"} in errors_on(%User{}, %{password: \"password\"})",328],["@type unsafe  :: Phoenix.HTML.Safe.t",11],["assert {:password, \"is unsafe\"} in errors_on(%User{}, password: \"password\")",113],["[{:password, \"is unsafe\"}, {:name, \"is blank\"}]",63],["Keyword.t, (t -> Phoenix.HTML.unsafe)) :: Phoenix.HTML.safe",15],["@spec html_escape(unsafe) :: safe",11]],"useCount":1299},{"word":"up","context":[["Clears up the flash storage.",22],["* `:singleton` - defines routes for a singleton resource that is looked up by",21],["When a resource needs to be looked up without referencing an ID, because",21],["# we end-up generating a huge scope that drastically",27],["Invoked to warm up caches on start and config change.",29],["their routes up to date.",30],["# Set up initial scope",30],["application for `:json` to pick up the encoder module.",40],["def up do",239],["tests that require setting up a connection.",545]],"useCount":1260},{"word":"update","context":[["case Repo.update(changeset) do",465],["plug :scrub_params, \"data\" when action in [:create, :update]",53],["# Tell Phoenix to update the endpoint configuration",570],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["# We recommend using the bang functions (`insert!`, `update!`",373],["|> Repo.update!",69],["def update(conn, %{\"id\" => id, \"user\" => user_params}) do",68],["plug :scrub_params, \"user\" when action in [:create, :update]",64],["Repo.update!(changeset)",63],[":update  ->",59]],"useCount":3489},{"word":"updated","context":[["updated = %{name: \"new test name\", value: \"new test value\"}",14],["updated = Utils.merge(relx_config, overlays)",15],["conn = put conn(), path, updated",22],["|> put_flash(:info, \"Post updated successfully.\")",28],["# verify the hooks were updated with the message",12],["# whenever the application is updated.",569],["|> put_flash(:info, \"User updated successfully.\")",52],["Returns the updated connection.",34]],"useCount":746},{"word":"updates","context":[["test \"updates and renders chosen resource when data is valid\", %{conn: conn} do",133],["test \"updates chosen resource and redirects when data is valid\", %{conn: conn} do",240],["# to check for upstream updates and more.",276],["for(%{expr: expr} <- updates,",12],["# Credo automatically checks for updates, like e.g. Hex does.",12],["assert file =~ ~S|test \"updates and renders chosen resource when data is valid\"|",14],["assert file =~ ~S|test \"updates chosen resource and redirects when data is valid\"|",16],["assert file =~ ~r/updates.*when data is valid.*?assert Repo\\.get_by\\(User, @valid_attrs\\).*?end/s",30]],"useCount":733},{"word":"upgrade","context":[["install|upgrade)",295],["failed-upgrade)",292],["abort-upgrade)",295],["#        * <old-postrm> `upgrade' <new-version>",283],["remove|upgrade|deconfigure)",291],["#        * <old-preinst> `abort-upgrade' <new-version>",295],["#        * <new-preinst> `upgrade' <old-version>",295],["#        * <new-prerm> `failed-upgrade' <old-version>",290],["#        * <old-prerm> `upgrade' <new-version>",290],["#        * <new-postrm> `failed-upgrade' <old-version>",283]],"useCount":4973},{"word":"url","context":[["# You should also configure the url host to something",527],["# to the previous section and set your `:url` port to 443:",427],["url: [host: \"example.com\", port: 80],",326],["at <ulink url=\"http://bugzilla.foo.tld\"/>.</para>",210],["url",111],["url: System.get_env(\"DATABASE_URL\"),",110],["#       url: [host: \"example.com\", port: 443],",427],["url: [host: \"example.com\"],",68],["url: [host: \"localhost\"],",638],["Session.url :fftest, \"http://localhost:8888/page_1.html\"",60]],"useCount":6538},{"word":"urlencoded","context":[["parsers: [:urlencoded, :multipart, :json],",621],["application/x-www-form-urlencoded:",23],["ctype = 'application/x-www-form-urlencoded'",23],["|> put_req_header(\"content-type\", \"application/x-www-form-urlencoded\")",15],["parsers: [:urlencoded, :multipart, :json],",14]],"useCount":696},{"word":"uscan","context":[["# See uscan(1) for format",258],["# Example watch control file for uscan",276],["# Rename this file to \"watch\" and then you can run the \"uscan\" command",276]],"useCount":810},{"word":"use","context":[["use Ecto.Migration",1871],["use GenServer",1566],["use ExUnit.CaseTemplate",1548],["use Application",1417],["use Phoenix.HTML",915],["use Phoenix.Controller",873],["use ExUnit.Case, async: true",3311],["use Mix.Project",4287],["use Mix.Config",4572],["use ExUnit.Case",5884]],"useCount":48329},{"word":"used","context":[["#\t\tThis file should be used to construct scripts for /etc/init.d.",78],["This module defines the test case to be used by",1506],["When used, dispatch to the appropriate controller/view/etc.",588],["This can be used in your application as:",577],["# The watchers configuration can be used to run external",570],["# be used to verify and authenticate a user. After",442],["The `api` option defines the OpenAperture.ManagerApi used for connection.",242],["be used in scripts:</para>",210],["<para>If used, the defined file is used as configuration",210],["<para>If used, the defined file is used as configuration",210]],"useCount":6313},{"word":"user","context":[["user = Repo.insert! %User{}",263],["# all active sockets and channels for a given user:",444],["# be used to verify and authenticate a user. After",442],["user = insert(:user)",131],["user = Repo.get!(User, id)",232],["{:ok, user} ->",248],["# Socket id's are topics that allow you to identify all sockets for a given user:",438],["<para>The per-user configuration file to control the",210],["user",140],["user = insert(:user)",131]],"useCount":11266},{"word":"user_id","context":[["user_id: user_id",44],["add :user_id, references(:users, on_delete: :nothing)",58],["add :user_id, references(:users)",50],["#     def id(socket), do: \"users_socket:#{socket.assigns.user_id}\"",444],["{:ok, assign(socket, :user_id, params[\"user_id\"])}",45],["#     {:ok, assign(socket, :user_id, verified_user_id)}",443],["#       metadata: [:user_id]",154],["if id = socket.assigns.user_id, do: \"user_sockets:#{id}\"",45],["{:ok, assign(socket, :user_id, params[\"user_id\"])}",45],["user_id: user_id",44]],"useCount":2216},{"word":"user_path","context":[["conn = delete conn, user_path(conn, :delete, user)",63],["|> redirect(to: user_path(conn, :show, user))",52],["conn = put conn, user_path(conn, :update, user), user: @invalid_attrs",53],["|> redirect(to: user_path(conn, :index))",126],["assert redirected_to(conn) == user_path(conn, :index)",106],["get conn, user_path(conn, :show, -1)",53],["conn = post conn, user_path(conn, :create), user: @valid_attrs",53],["conn = get conn, user_path(conn, :index)",73],["conn = post conn, user_path(conn, :create), user: @invalid_attrs",56],["conn = get conn, user_path(conn, :show, user)",65]],"useCount":1531},{"word":"username","context":[["add :username, :string",35],["username: \"postgres\",",768],["username: \"user\",",27],["field :username, :string",70],["user_luke = TestCommon.create_user(Repo, @default_user.username, @default_user.password, @default_user.email)",59],["username: \"root\",",57],["assert_file \"custom_path/config/dev.exs\", [~r/Ecto.Adapters.MySQL/, ~r/username: \"root\"/, ~r/password: \"\"/]",30],["assert_file \"custom_path/config/prod.secret.exs\", [~r/Ecto.Adapters.MySQL/, ~r/username: \"root\"/, ~r/password: \"\"/]",30],["assert_file \"custom_path/config/test.exs\", [~r/Ecto.Adapters.MySQL/, ~r/username: \"root\"/, ~r/password: \"\"/]",30],["if get_session(conn, :username) in options[:usernames] do",36]],"useCount":1544},{"word":"users","context":[["# (works for all users)",97],["alter table(:users) do",103],["# party users, it should be done in your mix.exs file.",196],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["schema \"users\" do",264],["resources \"/users\", UserController",95],["create table(:users) do",199],["users = Repo.all(User)",81],["add :user_id, references(:users, on_delete: :nothing)",58],["create unique_index(:users, [:email])",59]],"useCount":4550},{"word":"uses","context":[["It uses the configuration under `:url` to generate such.",52],["mostly focused on imports, uses and aliases.",21],["It uses the configuration under `:static_url` to generate",26],["the layout view. By default it uses the base alias",31],["Phoenix uses an optional assets build tool called brunch.io",38],["* `:https` - the configuration for the HTTPS server. Currently uses",40],["It uses the configured `:format_encoders` under the `:phoenix`",40],["* `:http` - the configuration for the HTTP server. Currently uses",40],["* `:debug_errors` - when `true`, uses `Plug.Debugger` functionality for",40],["on imports, uses and aliases.",556]],"useCount":1047},{"word":"using","context":[["Validation can be done using: `xmllint -''-noout -''-valid manpage.xml`",210],["# Stop the process using the wrapper",49],["# if we are using a daemonuser then change the user id",49],["By using [Gettext](https://hexdocs.pm/gettext),",89],["By using [Gettext](http://hexdocs.pm/gettext),",205],["Notes for using docbook2x: docbook2x-man does not automatically create the",210],["Translates an error message using gettext.",290],["# We recommend using the bang functions (`insert!`, `update!`",373],["A module that keeps using definitions for controllers,",575],["using do",1580]],"useCount":4354},{"word":"usr","context":[["ELCDIR=/usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["ELDIR=/usr/share/emacs/site-lisp/${PACKAGE}",144],["PATH=/sbin:/usr/sbin:/bin:/usr/bin",143],["PATH=/sbin:/usr/sbin:/bin:/usr/bin",143],["if test -x /usr/sbin/install-info-altdir; then",288],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/docbook-xsl/manpages/docbook.xsl",165],["/usr/share/xml/docbook/stylesheet/docbook-xsl/manpages/docbook.xsl \\",165],["rm -rf /usr/share/${FLAVOR}/site-lisp/${PACKAGE}",144],["# PATH should only include /usr/* if it runs after the mountnfs.sh script",143]],"useCount":2739},{"word":"v","context":[["Enum.reduce(param, %{}, fn({k, v}, acc) ->",33],["<arg choice=\"plain\"><option>-v</option></arg>",210],["<term><option>-v</option></term>",210],[".B \\-v, \\-\\-version",285],["<term><option>-v</option>",297],["Mix.shell.info \"Phoenix v#{@version}\"",40],["source_ref: \"v#{@version}\",",84],["v",75],["\",\\n  #{k}: #{inspect v}\"",33],["def run([version]) when version in ~w(-v --version) do",43]],"useCount":2009},{"word":"val","context":[["val ->",39],["val -> val",49],["val -> val",49],["case val do",58],["val",94],["[{^key, val}] -> val",46],["[{^key, val}] -> val",46],["assert val === \"0\"",34],["event: \"event1\", payload: %{key: :val}, topic: \"sometopic\"}",33],["event: \"event2\", payload: %{key: :val}, topic: \"sometopic\"}",26]],"useCount":885},{"word":"valid","context":[["test \"updates chosen resource and redirects when data is valid\", %{conn: conn} do",240],["test \"creates and renders resource when data is valid\", %{conn: conn} do",159],["Mix.raise \"Module name must be a valid Elixir alias (for example: Foo.Bar), got: #{inspect name}\"",46],["Validation can be done using: `xmllint -''-noout -''-valid manpage.xml`",210],["test \"updates and renders chosen resource when data is valid\", %{conn: conn} do",133],["test \"creates resource and redirects when data is valid\", %{conn: conn} do",248],["refute changeset.valid?",988],["assert changeset.valid?",865],["test \"changeset with valid attributes\" do",673],["if changeset.valid? do",318]],"useCount":4443},{"word":"valid_attrs","context":[["changeset = User.changeset(%User{}, @valid_attrs)",142],["assert Repo.get_by(User, @valid_attrs)",113],["@valid_attrs %{name: \"some content\"}",99],["@valid_attrs %{",70],["assert Repo.get_by(Post, @valid_attrs)",63],["conn = post conn, user_path(conn, :create), user: @valid_attrs",53],["@valid_attrs %{}",52],["conn = put conn, user_path(conn, :update, user), user: @valid_attrs",51],["assert file =~ ~S|@valid_attrs %{age: 42|",43],["assert Repo.get_by(<%= alias %>, @valid_attrs)",42]],"useCount":1193},{"word":"validate","context":[["assert validate JSEX",35],["assert validate :cowboy_req",110],["if validate? do",60],["assert validate :hackney",59],["assert validate SortedSet",52],["assert validate PusherEvent",51],["assert validate :gproc",50],["assert :meck.validate @module",24],["assert :meck.validate :ejabberd_auth",33],["assert validate JSX",36]],"useCount":887},{"word":"validation","context":[["with no validation performed.",647],["Given a User model that has validation for the presence of a value for the",63],["`:name` field and validation that `:password` is \"safe\":",63]],"useCount":773},{"word":"value","context":[["assert content =~ ~s(<option selected=\"selected\" value=\"2020\">2020</option>)",110],["# If this value is set too low you might not",97],["{:ok, value} ->",92],["{:ok, value} -> value",82],["assert content =~ ~s(<option selected=\"selected\" value=\"2\">02</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"13\">13</option>)",121],["{:ok, value} -> value",82],["assert content =~ ~s(<option selected=\"selected\" value=\"11\">11</option>)",77],["The result is wrapped in a `{:cache, value}` tuple so",79],["value",320]],"useCount":6303},{"word":"values","context":[["# if you want to provide default values for your application for third-",191],["# if you want to provide default values for your application for",858],["The `headers` option defines the header values (optional).",242],["## Return values",207],["values: _",28],["test \"three values returned if three given\" do",28],["# Priority values are: `low, normal, high, higher`",30],["Check `datetime_select/3` for more information on options and supported values.",30],["values given to `scope/2` option.",30],["|> Map.values",31]],"useCount":2202},{"word":"var","context":[["script_name = var!(config)[:url][:path]",39],["if var!(config)[:debug_errors] do",39],["var!(code_reloading?) = var!(config)[:code_reloader]",39],["_ = var!(code_reloading?)",39],["var!(code_reloading?) = var!(config)[:code_reloader]",39],["#\t/var/run/$NAME.pid --exec $DAEMON",48],["/var/run/$NAME.pid --exec $DAEMON \\",65],["/var/run/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS",71],["PIDFILE=/var/run/$NAME.pid",240],["/var/run/$NAME.pid --exec $DAEMON",85]],"useCount":1643},{"word":"variablelist","context":[["variablelist.term.break.after parameters to",210],["</variablelist>",1137],["<variablelist>",1137],["<!-- Use the variablelist.term.separator and the",210]],"useCount":2694},{"word":"variables","context":[["Those guards work like regular Elixir guards and the only variables accessible",16],["# Where those two env variables point to a file on disk",12],["# Assert endpoint variables",14],["#\tconfiguration variables for the example",34],["# Where those two env variables point to a file on",142],["# Load the VERBOSE setting and other rcS variables",143],["Local variables:",257],["# Where those two env variables return an absolute path to",427]],"useCount":1045},{"word":"varlistentry","context":[["<varlistentry>",2070],["</varlistentry>",2070]],"useCount":4140},{"word":"verb","context":[["verb\tverb_aux\tverb_aux\tSYM\tverb_aux;",356],["cm\tnoun\tverb_aux\tSYM\tverb;",200],["verb\tverb_aux\tSYM\tpn\tverb_aux;",236],["adjective\tverb\tverb_aux\tSYM\tverb_aux;",264],["noun\tverb\tSYM\tpnoun\tverb_aux;",295],["cm\tnoun\tverb_aux\tverb_aux\tverb;",392],["verb\tverb_aux\tSYM\tpnoun\tverb_aux;",410],["noun\tverb\tverb_aux\tconj\tverb_aux;",236],["noun\tverb\tverb_aux\tverb_aux\tverb_aux;",260],["noun\tverb\tverb_aux\tSYM\tverb_aux;",701]],"useCount":16923},{"word":"verb_aux","context":[["cm\tnoun\tverb_aux\tverb_aux\tverb;",392],["verb\tverb_aux\tverb_aux\tSYM\tverb_aux;",356],["noun\tverb\tSYM\tpnoun\tverb_aux;",295],["verb\tverb_aux\tverb_aux\tSYM\tverb_aux;",356],["cm\tnoun\tverb_aux\tverb_aux\tverb;",392],["verb\tverb_aux\tSYM\tpnoun\tverb_aux;",410],["verb\tverb_aux\tSYM\tpnoun\tverb_aux;",410],["verb\tverb_aux\tverb_aux\tSYM\tverb_aux;",356],["noun\tverb\tverb_aux\tSYM\tverb_aux;",701],["noun\tverb\tverb_aux\tSYM\tverb_aux;",701]],"useCount":20771},{"word":"verification","context":[["# performing token verification on connect.",430],["# verification, you can put default assigns into",442]],"useCount":872},{"word":"verify","context":[["case MessageVerifier.verify(token, secret) do",14],["case Phoenix.Token.verify(socket, \"user\", token, max_age: 1209600) do",17],["Phoenix.Token.verify(Endpoint, Atom.to_string(__MODULE__), session[\"token\"])",15],["Please verify that you assign to \"conn\" after a request:",20],["# token will be different every time, so verify static token",24],["|> verify(hs256(\"test\"))",25],["|> verify(hs256(\"secret\"))",25],["formats all routes in a given router. We can use it to verify all",30],["{ref, 0} = System.cmd(\"git\", [\"rev-parse\", \"--verify\", \"--quiet\", \"HEAD\"])",35],["# be used to verify and authenticate a user. After",442]],"useCount":778},{"word":"version","context":[["#        * <new-preinst> `upgrade' <old-version>",295],["version: @version,",443],["version: \"0.1.0\",",326],["<option>--version</option>",295],["version: \"0.0.1\",",1978],["#          <conflicting-package> <version>",557],["<para>Show version of program.</para>",506],["# containing the digested version of static files. This",503],["version: @version,",443],["#        * <new-preinst> `install' <old-version>",295]],"useCount":14596},{"word":"via","context":[["filesystem via the `static_path` function are cached. Defaults to `true`.",27],["Such transformations are defined via plugs, as defined",30],["* `:force_ssl` - ensures no data is ever sent via http, always redirecting",31],["via HTML forms. If you are providing an API, there",33],["* `:via` - the transport adapters to accept on this channel.",24],["to the controller via the `render_to_iodata/3` function. The",22],["Fall of a Fooish Bar</citetitle> available via the <citerefentry>",210],["available via the Info system.",284],["# ever sent via http, always redirecting to https:",426],["Fall of a Fooish Bar</citetitle> available via the",296]],"useCount":1660},{"word":"view","context":[["use Apiv4.Web, :view",40],["def view do",616],["When used, dispatch to the appropriate controller/view/etc.",588],["The definitions below will be executed for every view,",556],["assert file =~ \"use Phoenix.Web, :view\"",82],["when is_atom(view) and is_binary(template) or is_atom(template) do",48],["use Vutuv.Web, :view",42],["|> put_view(view)",40],["* a view in web/views",40],["will be called in the view given to `:render_errors`. Defaults to:",39]],"useCount":4267},{"word":"views","context":[["~r{web/views/.*(ex)$},",531],["# Bring render/3 and render_to_string/3 for testing custom views",485],["{:eex, \"view.ex\",             \"web/views/#{path}_view.ex\"},",39],["# Functions defined here are available to all other views/templates",63],["assert_file \"web/views/user_view.ex\", fn file ->",43],["* a view in web/views",40],["views and so on.",577],["{:eex,  \"new/web/views/page_view.ex\",                    \"web/views/page_view.ex\"},",39],["{:eex,  \"new/test/views/error_view_test.exs\",            \"test/views/error_view_test.exs\"},",39],["{:eex,  \"new/test/views/page_view_test.exs\",             \"test/views/page_view_test.exs\"},",39]],"useCount":2810},{"word":"w","context":[["w",13],["\"Please set `plug :accepts, %w(html json ...)` in your pipeline.\"",26],["unless name =~ ~r/^[A-Z]\\w*(\\.[A-Z]\\w*)*$/ do",45],["unless name =~ ~r/^[A-Z]\\w*(\\.[A-Z]\\w*)*$/ do",45],["assert_raise Mix.Error, ~r\"Module name \\w+ is already taken\", fn ->",105],[".\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection",280],["<!-- SECTION should be 1-8, maybe w/ subsection other parameters are",506]],"useCount":1020},{"word":"want","context":[["want to listen to. The topic is just an identifier, but by convention it is",25],["# if you want to provide default values for your application for third-",191],["# If you don't want TODO comments to cause `mix credo` to fail, just",27],["If you don't want brunch.io, you can re-run this generator",38],["# outputs to the terminal and we don't want that.",38],["You can configure it to whatever build tool or command you want:",39],["# Use this if you want the user to explicitly set 'RUN' in",49],["# you likely want to automate and keep it away from",89],["# if you want to provide default values for your application for",858],["# adjust it to the program you want to run.",49]],"useCount":1717},{"word":"warn","context":[["import Supervisor.Spec, warn: false",927],["config :logger, level: :warn",593],["data = %{log: :warn}",16],["def warn(message),  do: IO.puts \"==> #{IO.ANSI.yellow}#{message}#{IO.ANSI.reset}\"",14]],"useCount":1550},{"word":"warnings","context":[["# We are using line -1 because we don't want warnings coming from",12],["(setq byte-compile-warnings nil)",14],["# Print only warnings and errors during test",569],["(setq load-path (cons \".\" load-path) byte-compile-warnings nil)",130],["# Avoid unused variable warnings",39],["# We are using -1 to avoid warnings in case a path has already been defined.",20],["# line: -1 is used here to avoid warnings if forwarding to root path",16]],"useCount":800},{"word":"was","context":[["<para>This manual page was written for the &debian; distribution",296],["<para>This manual page was written by &dhusername; &dhemail; for",297],["<para>This manual page was written for the Debian system",210],["Raises `Plug.Conn.AlreadySentError` if the conn was already sent.",155],["raise ArgumentError, \"an adapter was given to :pubsub but no :name was defined, \" <>",39],["generator, an endpoint was automatically generated as",41],["returns the response body if one was set or sent.",45],["<para>This manual page was written for the Debian distribution",210],["#   1 if daemon was already stopped",143],["#   1 if daemon was already running",143]],"useCount":2479},{"word":"watch","context":[["[{\"node\", [\"node_modules/brunch/bin/brunch\", \"watch\"]}]",16],["# Example watch control file for uscan",276],["# Rename this file to \"watch\" and then you can run the \"uscan\" command",276],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\"]]",246],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\",",76],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\"]]",60],["the \"watch\" mode of the brunch build tool when the server starts.",39],["files to watch. When these files change, it will trigger a reload.",29],["[node: [\"node_modules/brunch/bin/brunch\", \"watch\"]]",21]],"useCount":1039},{"word":"watchers","context":[["* `:watchers` - a set of watchers to run alongside your server. It",39],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\",",76],["Enum.map(conf[:watchers], fn {cmd, args} ->",31],["assert_file \"photo_blog/config/dev.exs\", ~r/watchers: \\[\\]/",32],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\"]]",60],["watchers: [node: [\"node_modules/brunch/bin/brunch\", \"watch\", \"--stdin\"]]",246],["* `:watchers` - a set of watchers to run alongside your server. It",39],["watchers: []",94],["# watchers to your application. For example, we use it",570],["# The watchers configuration can be used to run external",570]],"useCount":1882},{"word":"we","context":[["# For production, we configure the host to read the PORT",527],["# watchers to your application. For example, we use it",570],["# For development, we disable any cache and enable",572],[";; removed but not purged, and we should skip the setup.",132],["# In this file, we keep production configuration that",89],["# Finally, we also include the path to a manifest",503],["# Here we use delete! (with a bang) because we expect",380],["# Here we use delete! (with a bang) because we expect",380],["# Because error messages were defined within Ecto, we must",295],["# meaningful, we use this information when generating URLs.",527]],"useCount":5732},{"word":"web","context":[["* a model in web/models",42],["application provides to the underlying web servers.",41],["web application start. It is also the interface your",41],["defp elixirc_paths(_),     do: [\"lib\", \"web\"]",616],["use Phoenix.View, root: \"web/templates\"",611],["defp elixirc_paths(:test), do: [\"lib\", \"web\", \"test/support\"]",609],["~r{web/templates/.*(eex)$}",514],["elixirc_paths: [\"lib\", \"web\"],",75],["~r{web/views/.*(ex)$},",531],["assert_file \"web/views/user_view.ex\", fn file ->",43]],"useCount":6386},{"word":"websocket","context":[["transport :websocket, Phoenix.Transports.WebSocket",465],["# customize default `:websocket` transport options",15],["{:ok, sock} = WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket\")",56],["transport :websocket, Phoenix.Transports.WebSocket,",49],["By default, the given path is a websocket upgrade endpoint,",41],["transport :websocket, Phoenix.Transports.WebSocket,",29],["# define separate transport, using websocket handler",15],["{:ok, sock} = WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket?user_id=1001\")",26],["WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket\",",16],["channel \"topic2:*\", MyChannel, via: [:websocket]",15]],"useCount":880},{"word":"when","context":[["# when deploying your static files in production.",545],["# meaningful, we use this information when generating URLs.",527],["test \"does not create resource and renders errors when data is invalid\", %{conn: conn} do",404],["test \"does not update chosen resource and renders errors when data is invalid\", %{conn: conn} do",380],["Helper for returning list of errors in model when passed certain data.",361],["test \"renders page not found when id is nonexistent\", %{conn: conn} do",286],["# Start the endpoint when the application starts",549],["defmacro __using__(which) when is_atom(which) do",600],["test \"creates resource and redirects when data is valid\", %{conn: conn} do",248],["test \"updates chosen resource and redirects when data is valid\", %{conn: conn} do",240]],"useCount":10292},{"word":"whenever","context":[["# whenever the application is updated.",569],["Returns true whenever the list of templates changes in the filesystem.",13],["# Used whenever a router fails. We default to simply",13],["with status 406, whenever the server cannot serve a response in any",36],["default to \"html\" format whenever:",36],["* `:render_errors` - responsible for rendering templates whenever there",39],["# endpoint (alongside the whole project ) whenever the",47],[".\\\" Please adjust this date whenever revising the manpage.",280],["<!-- Please adjust the date whenever revising the manpage. -->",296]],"useCount":1329},{"word":"which","context":[["defmacro __using__(which) when is_atom(which) do",600],["# Specifies which paths to compile per environment.",407],["# which should be versioned separately.",481],["# which you typically run after static files are built.",503],["# Alternatively, you can configure exactly which server to",549],["apply(__MODULE__, which, [])",600],["# here (which is why it is important to import them last).",1036],["inside a transaction which is reset at the beginning",1502],["# Specifies which paths to compile per environment",205],["defmacro __using__(which) when is_atom(which) do",600]],"useCount":7631},{"word":"why","context":[["I don't know why she swallowed the fly. Perhaps she'll die.",12],["the transport. That's why transports are required to pass a",25],["# here (which is why it is important to import them last).",1036]],"useCount":1073},{"word":"will","context":[["debian/rules file targets (such as build), you will need to include",252],["# To get SSL working, you will need to add the `https` key",531],["# from the system environment. Therefore, you will need",527],["# the socket that will be set for all channels, ie",442],["# it to always work (and if it does not, it will raise).",382],["# and so on) as they will fail if something goes wrong.",371],["# You will also need to set the application root to `.` in order",236],["The definitions below will be executed for every view,",556],["# Configuration from the imported file will override the ones defined",1036],["# dh_installdeb will replace this with shell code automatically",1136]],"useCount":9568},{"word":"with","context":[["# and its dependencies with the aid of the Mix.Config module.",1768],["with long options starting with two dashes (`-').  A summary of",507],["with long options starting with two dashes (`-').  A summary of",507],["Finally, if the test case interacts with the database,",1503],["# dh_installdeb will replace this with shell code automatically",1136],["test \"changeset with valid attributes\" do",673],["test \"changeset with invalid attributes\" do",671],["with no validation performed.",647],["# with brunch.io to recompile .js and .css sources.",567],["# Import conveniences for testing with connections",544]],"useCount":17230},{"word":"without","context":[["the client without referencing an ID. Read below for more information",21],["Generates the static URL without any path information.",37],["Generates the endpoint base URL without any path information.",39],["# If the daemon can reload its configuration without",143],["in_tmp \"new without defaults\", fn ->",36],["test \"new without defaults\" do",36],["on the request. To do so, you can pass the template name as an atom (without",36],["raise \"cannot render template #{inspect template} without format. Use an atom if the \" <>",36],["# poll without messages sends 204 no_content",35],["When a resource needs to be looked up without referencing an ID, because",21]],"useCount":791},{"word":"won","context":[["# file won't be loaded nor affect the parent project. For this reason,",1055],["# file won't be loaded nor affect the parent project.",25],["`terminate/2`, however, won't be invoked in case of errors nor in",16],["`.app` file will also be loaded, but they won't be started.",13]],"useCount":1109},{"word":"work","context":[["# Code reloading will only work if the :code_reloader key of",43],["# it to always work (and if it does not, it will raise).",382],["<para>The program is currently limited to only work",210],["# 'restart' will not work",97],["runtime work.",25],["work.",23],["no adapter is specified, the pubsub system will work by sending",21],["# The above code will not work for interpreted scripts, use the next",69],["* `Plug.Conn` - a bunch of low-level functions to work with",32],["In order for the example above to work, we need to do content negotiation with",36]],"useCount":1060},{"word":"workers","context":[["# Here you could define other workers and supervisors as children",443],["# Define workers and child supervisors to be supervised",348]],"useCount":791},{"word":"write","context":[["You would then write your assertion like:",63],["File.write!(file, File.read!(file) <> contents)",44],["IO.write :stderr, \"\"\"",37],["# Maybe somebody will write it.",144],["# Inside the script, you can read and write to any of your",373],["You could then write your assertion like:",381],["File.write! \"mix.exs\", umbrella_mixfile_contents",32],["IO.write(:stdio, \"user> \")",21],["IO.write \"#{Path.relative_to(env.file, File.cwd!)}:#{env.line}: [warning] \" <>",18],["|> IO.write",16]],"useCount":1168},{"word":"written","context":[["<para>This manual page was written for the Debian distribution",210],["# this could be written simply as:",181],["# written simply as:",114],["after your application is started and can be read and written through the",40],["# wait to ensure data was written",21],["#    twitterBot, a simple twitter Bot written in Elixir",12],["<para>This manual page was written for the &debian; distribution",296],["<para>This manual page was written by &dhusername; &dhemail; for",297],["<para>This manual page was written for the Debian system",210]],"useCount":1381},{"word":"ws","context":[["socket \"/ws\", UserSocket",34],["session = join(\"/ws\", \"rooms:lobby\")",40],["resp = poll :post, \"/ws/poll\", session, %{",41],["resp = poll(:get, \"/ws/poll\", session)",48],["{:ok, sock} = WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket\")",56],["{:ok, sock} = WebsocketClient.start_link(self, \"ws://127.0.0.1:#{@port}/ws/websocket\")",56],["resp = poll(:get, \"/ws\", session)",105],["resp = poll :post, \"/ws\", session, %{",113],["session = join(\"/ws\", \"rooms:lobby\", @mode)",33],["socket \"/ws/admin\", MyApp.AdminUserSocket",32]],"useCount":1159},{"word":"www","context":[["\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" [",210],["# for details, see http://www.debian.org/doc/debian-policy/ or",1082],["man(1), man(7), http://www.tldp.org/HOWTO/Man-Page/",210],["xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"",46],["homepage_url: \"http://www.phoenixframework.org\",",46],["xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",49],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",83],["# Visit http://www.pragmaticprogrammer.com/titles/elixir12 for more book information.",124],["http://www.tldp.org/HOWTO/Man-Page/q2.html). -->",210],["http://www.tldp.org/HOWTO/Man-Page/q2.html. -->",210]],"useCount":2477},{"word":"x","context":[["x -> x",50],["x -> x",50],["[ -x \"$DAEMON\" ] || exit 0",58],["x -> x",64],["case x do",57],["x -> x",64],["x",71],["[ -x $DAEMON ] || exit 0",85],["test -x $DAEMON || exit 0",121],["if test -x /usr/sbin/install-info-altdir; then",288]],"useCount":1981},{"word":"xml","context":[["Validation can be done using: `xmllint -''-noout -''-valid manpage.xml`",210],["/usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl \\",45],["\"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd\" [",40],["<?xml version='1.0' encoding='ISO-8859-1'?>",40],["xml",39],["manpage.1: manpage.xml",210],["/usr/share/xml/docbook/stylesheet/docbook-xsl/manpages/docbook.xsl \\",165],["\"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" [",210],["manpage.xml'",210],["<?xml version='1.0' encoding='UTF-8'?>",210]],"useCount":1503},{"word":"xsl","context":[["/usr/share/xml/docbook/stylesheet/docbook-xsl/manpages/docbook.xsl \\",165],["docbook-xsl. A description of the parameters you can use can be found in the",210],["to include xsltproc and docbook-xsl in your Build-Depends control field.",210],["read /usr/share/doc/docbook-xsl/doc/manpages/authors.html. This file can be",210],["docbook-xsl-doc-* packages. Please remember that if you create the nroff",210],["found in the docbook-xsl-doc-html package.",210],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/docbook-xsl/manpages/docbook.xsl",165],["pull in xsltproc and docbook-xsl.",210],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/docbook-xsl/manpages/docbook.xsl",165],["DB2MAN = /usr/share/sgml/docbook/stylesheet/xsl/docbook-xsl/manpages/docbook.xsl",165]],"useCount":2460},{"word":"xsltproc","context":[["The xsltproc binary is found in the xsltproc package.  The",40],["XP=xsltproc -''-nonet",40],["targets (such as build), you will need to include xsltproc",40],["Process this file with an XSLT processor: `xsltproc \\",40],["The xsltproc binary is found in the xsltproc package. The XSL files are in",210],["XP     = xsltproc -''-nonet -''-param man.charmap.use.subset \"0\"",210],["pull in xsltproc and docbook-xsl.",210],["to include xsltproc and docbook-xsl in your Build-Depends control field.",210],["`xsltproc -''-nonet \\",210],["The xsltproc binary is found in the xsltproc package. The XSL files are in",210]],"useCount":1460},{"word":"year","context":[["<year>2003</year>",275],["text_input f, :year",40],["assert content =~ ~s(<select id=\"search_datetime_year\" name=\"search[datetime][year]\">)",55],["do: %{year: year, month: month, day: day}",76],["do: %{year: year, month: month, day: day}",76],["-''-param make.year.ranges \"1\" \\",210],["-''-param make.single.year.ranges \"1\" \\",210],["<year>2007</year>",223],["<year>2007</year>",223],["<year>2003</year>",275]],"useCount":2436},{"word":"you","context":[["# You should set gzip to true if you are running phoenix.digest",545],["# if you want to provide default values for your application for",858],["# you can enable the server option below.",545],["# To get SSL working, you will need to add the `https` key",531],["# from the system environment. Therefore, you will need",527],["# which you typically run after static files are built.",503],["# directory. For example, you can emulate configuration per environment",1035],["# Alternatively, you can configure exactly which server to",549],["# If you are doing OTP releases, you need to instruct Phoenix",549],["# If you are doing OTP releases, you need to instruct Phoenix",549]],"useCount":12414},{"word":"your","context":[["# :code_reloader configuration of your endpoint.",569],["This can be used in your application as:",577],["# This file is responsible for configuring your application",1793],["# Configure your database",1056],["# if you want to provide default values for your application for",858],["# You can configure for your application as:",858],["# And access this configuration in your application as:",857],["# 3rd-party users, it should be done in your \"mix.exs\" file.",857],["# when deploying your static files in production.",545],["# watchers to your application. For example, we use it",570]],"useCount":15614},{"word":"~","context":[["elixir: \"~> 1.2\",",689],["{:phoenix_live_reload, \"~> 1.0\", only: :dev},",445],["#   {:mydep, \"~> 0.3.0\"}",1473],["elixir: \"~> 1.0\",",1784],["elixir: \"~> 1.1\",",376],["{:cowboy, \"~> 1.0\"},",363],["elixir: \"~> 1.3\",",347],["{:earmark, \"~> 0.1\", only: :dev},",264],["assert html_response(conn, 200) =~ \"Welcome to Phoenix!\"",301],["{:cowboy, \"~> 1.0\"}]",300]],"useCount":17609},{"word":"~S","context":[["assert file =~ ~S|conn = delete conn, user_path(conn, :delete, user)|",34],["assert file =~ ~S|conn = post conn, user_path(conn, :create), user: @invalid_attrs|",30],["assert file =~ ~S|test \"shows chosen resource\"|",30],["errors = ~S\"\"\"",32],["assert file =~ ~S|conn = get conn, user_path(conn, :index)|",34],["assert file =~ ~S|@valid_attrs %{age: 42|",43],["assert file =~ ~S|@invalid_attrs %{}|",48],["@doc ~S\"\"\"",1632],["@moduledoc ~S\"\"\"",543],["~S(",74]],"useCount":3115},{"word":"~r","context":[["~r{web/templates/.*(eex)$}",514],["~r{web/views/.*(ex)$},",531],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},",423],["assert_raise Mix.Error, ~r\"Module name \\w+ is already taken\", fn ->",105],["~r/Ecto.Adapters.SQL.restart_test_transaction/",132],["assert_raise Mix.Error, ~r\"Application name must start with a letter and \", fn ->",74],["config = ~r/config :photo_blog, PhotoBlog.Repo,/",64],["~r{priv/static/.*(js|css|png|jpeg|jpg|gif)$},",95],["~r{priv/gettext/.*(po)$},",273],["|> validate_format(:email, ~r/@/)",75]],"useCount":4519},{"word":"~s","context":[["assert content =~ ~s(<option selected=\"selected\" value=\"2\">02</option>)",121],["@doc ~s\"\"\"",132],["assert content =~ ~s(<option selected=\"selected\" value=\"13\">13</option>)",121],["assert content =~ ~s(<option selected=\"selected\" value=\"2020\">2020</option>)",110],["~s(</select>)",87],["assert content =~ ~s(<option selected=\"selected\" value=\"11\">11</option>)",77],["assert content =~ ~s(<option selected=\"selected\" value=\"4\">April</option>)",66],["assert content =~ ~s(<select id=\"search_datetime_hour\" name=\"search[datetime][hour]\">)",66],["assert content =~ ~s(<select id=\"search_datetime_year\" name=\"search[datetime][year]\">)",55],["assert content =~ ~s(<select id=\"search_datetime_day\" name=\"search[datetime][day]\">)",55]],"useCount":3098},{"word":"~w","context":[["render_errors: [accepts: ~w(html json)],",349],["Map.get(conn.private, :phoenix_layout_formats, ~w(html))",36],["plug :accepts, ~w(json)",39],["plug :accepts, ~w(html json)",40],["def run([version]) when version in ~w(-v --version) do",43],["plug :accepts, ~w(html)",44],["@required_fields ~w(name)",69],["only: ~w(css images js favicon.ico robots.txt)",87],["only: ~w(css fonts images js favicon.ico robots.txt)",449],["@optional_fields ~w()",486]],"useCount":2516}]