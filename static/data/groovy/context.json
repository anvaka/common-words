[{"word":"A","context":[["then:\"A redirect is issues to the show action\"",486],["class A {",2722],["then:\"A 404 error is returned\"",1946],["then:\"A model is populated containing the domain instance\"",1296],["then:\"A redirect is issued to the show action\"",815],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"A domain instance is created\"",656],["then:\"A 404 is returned\"",651],["when:\"A domain instance is passed to the show action\"",650],["when:\"A domain instance is passed to the edit action\"",646]],"useCount":21543},{"word":"ALLOC","context":[["// \"SUB-ALLOC-PA\"",61],["syncUpdate(getTransient(\"ALLOC-PA\") + \"override: denis,override1\")",66],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: owner3\\npassword: hm\\npassword: lir\")",67],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80],["syncUpdate(getTransient(\"RIR-ALLOC-25\") + \"password: hm\\npassword: owner3\")",84],["syncUpdate(getTransient(\"ALLOC-PI\") + \"password: owner3\\npassword: hm\")",116],["// \"ALLOC-PA\"",156],["syncUpdate(getTransient(\"RIR-ALLOC-20\") + \"password: owner3\\npassword: hm\")",201],["syncUpdate(getTransient(\"ALLOC-UNS\") + \"password: owner3\\npassword: hm\")",280],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330]],"useCount":2458},{"word":"API","context":[["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["public <T extends JComponent & UriGettable> T createPage(API api) {",29],["* @return a reference to this, so the API can be used fluently",427],["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365],["* See the API for {@link grails.test.mixin.web.GroovyPageUnitTestMixin} for usage instructions",127],["import org.jd.gui.api.API",109],["import jd.gui.api.API",71],["API api",30]],"useCount":6508},{"word":"After","context":[["input \"sunriseOffsetDir\", \"enum\", title: \"Before or After\", required: false, options: [\"Before\",\"After\"]",17],["import static cucumber.api.groovy.Hooks.After",13],["selectPartialText(\"After\")",13],["// After that, retrieve all data entries for the children",16],["import org.junit.After",1139],["import org.junit.After;",110],["@After",1223],["input \"sunsetOffsetDir\", \"enum\", title: \"Before or After\", required: false, options: [\"Before\",\"After\"]",20],["input \"sunsetOffsetDir\", \"enum\", title: \"Before or After\", required: false, options: [\"Before\",\"After\"]",20],["input \"sunriseOffsetDir\", \"enum\", title: \"Before or After\", required: false, options: [\"Before\",\"After\"]",17]],"useCount":2600},{"word":"Almiray","context":[["* @author Andres Almiray",1721],["name: 'Andres Almiray',",220],["* @author Andres Almiray <aalmiray@users.sourceforge.net>",217],["* @author Andres Almiray <aalmiray@users.sourceforge.com>",78],["* @author Andres.Almiray",51],["*  o Neither the name of Effects - Andres Almiray nor the names of",22],["speaker 'Andr√©s Almiray'",14],["[id: 2, name: 'Andres', lastname: 'Almiray'],",11]],"useCount":2334},{"word":"Andres","context":[["* @author Andres Almiray",1721],["name: 'Andres Almiray',",220],["* @author Andres Almiray <aalmiray@users.sourceforge.net>",217],["* @author Andres Almiray <aalmiray@users.sourceforge.com>",78],["* @author Andres.Almiray",51],["*  o Neither the name of Effects - Andres Almiray nor the names of",22],["[id: 2, name: 'Andres', lastname: 'Almiray'],",11]],"useCount":2320},{"word":"ArrayList","context":[["ArrayList<Filter> filterSet = new ArrayList<Filter>();",175],["ArrayList<String> member = new ArrayList<String>();",72],["import java.util.ArrayList;",373],["ArrayList<Filter> filterSet = new ArrayList<Filter>();",175],["ArrayList<String> member = new ArrayList<String>()",112],["ArrayList<String> member = new ArrayList<String>()",112],["import java.util.ArrayList",102],["ArrayList<String> instancesSet = new ArrayList<String>();",85],["ArrayList<String> instancesSet = new ArrayList<String>();",85],["ArrayList<String> member = new ArrayList<String>();",72]],"useCount":6596},{"word":"Assert","context":[["import static org.junit.Assert.assertThat",499],["import static org.junit.Assert.fail",370],["import static org.junit.Assert.assertNotNull",492],["import static org.junit.Assert.*;",379],["import org.junit.Assert",902],["import static org.junit.Assert.*",2429],["import static org.junit.Assert.assertEquals",1366],["import static org.junit.Assert.assertTrue",1009],["import static org.junit.Assert.assertNull",184],["import static org.junit.Assert.assertFalse",358]],"useCount":11284},{"word":"Author","context":[["* @author $Author: mmcduffie $",310],["* Last modified by $Author: $",136],["class Author {",111],["Author author",64],["* Author:",57],["*  $Author$",54],["* Author: chris grzegorczyk <grze@eucalyptus.com>",51],["/* Author Phesus        //////////////////////////////",39],["* $Author$",150],["*  Author: SmartThings",334]],"useCount":2246},{"word":"Autowired","context":[["@Autowired ListingUriBuilder.Factory listingUriBuilderFactory",13],["@Autowired StubFinder stubFinder",13],["@Autowired(required=false)",13],["@Autowired ProfileRestService profileRestService",14],["@Autowired ProfileUriBuilder.Factory profileUriBuilderFactory",14],["@Autowired ObjectMapper mapper",16],["@Autowired",6485],["import org.springframework.beans.factory.annotation.Autowired;",125],["@Autowired(required = false)",189],["import org.springframework.beans.factory.annotation.Autowired",4308]],"useCount":11225},{"word":"B","context":[["class B {",439],["class B extends A {",293],["predefinedProp(\"B\",'${BUILD_NUMBER}')",194],["def b = new B()",117],["trait B {",94],["class B extends A{",92],["aggregateNode.jobs[0].value() == 'project-A, project-B'",64],["public class B {",57],["class B extends A {}",51],["stringParam(\"B\",\"\",\"Build Number\")",186]],"useCount":3678},{"word":"Bar","context":[["final PsiFile bar = myFixture.addFileToProject(\"Bar.groovy\", \"class Bar {\" +",42],["final PsiFile bar = myFixture.addFileToProject(\"Bar.groovy\", \"class Bar {\" +",42],["class Bar{",48],["class Bar {}",58],["class Foo extends Bar {",70],["class Bar extends Foo {",75],["assertOutput(\"Bar\", \"239\");",88],["public class Bar {",91],["class Bar {{",120],["class Bar {",454]],"useCount":3592},{"word":"Bean","context":[["import org.springframework.context.annotation.Bean;",45],["@Bean",2600],["import org.springframework.context.annotation.Bean",942],["class Bean {",75],["import org.gerzog.spock.modelcitizen.test.data.Bean",16],["new Bean()",69],["class Bean { }",32],["import org.jbrat.core.data.abstracts.Bean",29],["import script.groovy.annotation.Bean",19],["import io.rhiot.bootstrap.classpath.Bean",17]],"useCount":3989},{"word":"Before","context":[["import org.junit.Before",3308],["import org.junit.Before;",256],["sunsetOffsetValue ? (sunsetOffsetDir == \"Before\" ? \"-$sunsetOffsetValue\" : sunsetOffsetValue) : null",26],["import net.sourceforge.stripes.action.Before",22],["sunriseOffsetValue ? (sunriseOffsetDir == \"Before\" ? \"-$sunriseOffsetValue\" : sunriseOffsetValue) : null",21],["@Before void setUp() {",20],["input \"sunsetOffsetDir\", \"enum\", title: \"Before or After\", required: false, options: [\"Before\",\"After\"]",20],["@Before void before(){",20],["input \"sunsetOffsetDir\", \"enum\", title: \"Before or After\", required: false, options: [\"Before\",\"After\"]",20],["@Before",3692]],"useCount":7497},{"word":"BeforeClass","context":[["import org.testng.annotations.BeforeClass",40],["@BeforeClass",1289],["import org.junit.BeforeClass",1068],["import org.junit.BeforeClass;",116]],"useCount":2513},{"word":"Boolean","context":[["Boolean isTruncated;",102],["return Boolean.FALSE",72],["return Boolean.TRUE",68],["Boolean deleteOnTermination;",41],["Boolean res = false;",40],["Boolean active",39],["assert validator.isValid(test) instanceof Boolean",36],["if (conf.rejectIfNoRule instanceof Boolean) {",35],["mailerPublisher.sendToIndividuals[0].value() as Boolean == false",32],["mailerPublisher.dontNotifyEveryUnstableBuild[0].value() as Boolean == false",32]],"useCount":2418},{"word":"Build","context":[["Utilities.addGithubPRTriggerForBranch(job, branch, \"${os} ${architecture} ${configuration} Build and Test\")",75],["import grails.buildtestdata.mixin.Build",254],["stringParam(\"PARENT_BUILD\",\"\",\"Parent Build Job\")",186],["stringParam('CORECLR_BUILD', '', \"Build number to copy CoreCLR ${osGroup} binaries from\")",50],["// Build Timeout",54],["// Build the mscorlib for the other OS's",54],["// Build the input jobs in parallel",56],["writeDescription('Build failed due to timeout after {0} minutes')",56],["stringParam('CORECLR_WINDOWS_BUILD', '', 'Build number to copy CoreCLR windows test binaries from')",58],["stringParam(\"B\",\"\",\"Build Number\")",186]],"useCount":2397},{"word":"Builder","context":[["def credentials = new GoogleNamedAccountCredentials.Builder().project(PROJECT_NAME).compute(computeMock).build()",187],["def builder = QueryByCriteria.Builder.<ParameterBo>create()",112],["<T extends Execution<T>> void taskGraph(Stage<T> stage, TaskNode.Builder builder) {",70],["new RestAdapter.Builder()",61],["user = new User.Builder(meta: meta).build()",60],["user = new User.Builder().build()",55],["@Builder",72],["GenericQueryResults.Builder builder = GenericQueryResults.Builder.create();",102],["GenericQueryResults.Builder builder = GenericQueryResults.Builder.create();",102],["import groovy.transform.builder.Builder",221]],"useCount":3139},{"word":"C","context":[["class C {",283],["assertEquals(\"C\", clazz.qualifiedName)",55],["batchFile(\"C:\\\\Packer\\\\Packer.exe .\\\\bin\\\\build.pack .\\\\bin\")",85],["def c = new C()",70],["</C:comp-filter>",59],["checkResultByText(\"class C {\\n\" +",36],["import static C.abc",55],["def String parameterType = \"C\"",47],["def cmdScale = cmd.scale == 1 ? \"F\" : \"C\"",42],["// GCStress=C is currently not supported on OS X",46]],"useCount":2721},{"word":"Canonical","context":[["@Canonical class IntPair {",36],["@groovy.transform.Canonical class Foo {",42],["import groovy.transform.Canonical",1234],["@Canonical class Baz {",18],["@Canonical class Bar {",18],["@Canonical(excludes='foo, baz')",24],["@groovy.transform.Canonical",28],["@Canonical class Foo {",24],["import groovy.transform.Canonical;",17],["@Canonical",1711]],"useCount":3202},{"word":"Checked","context":[["//Skip configs that aren't Checked or Release (so just Debug, for now)",110],["def static configurationList = ['Debug', 'Checked', 'Release']",46],["// For CentOS, we only want Checked/Release pri1 builds.",36],["else if (configuration != 'Checked' && Constants.r2rJitStressScenarios.indexOf(scenario) != -1) {",26],["if (configuration == 'Checked' || configuration == 'Release') {",246],["if (configuration == 'Release' || configuration == 'Checked') {",1512],["if (configuration != 'Checked') {",150],["if (configuration != 'Checked' && configuration != 'Release') {",146],["if (configuration == 'Checked') {",138],["// and configuration is not Checked, bail out.",52]],"useCount":2540},{"word":"Class","context":[["Class type",49],["_ as Class,",37],["Class clazz",39],["Class value()",49],["Class testClass = loader.parseClass(\"\"\"",56],["* Methods of the Domain Class",63],["//-- Class fields ---------------------------",70],["Class clazz = new GroovyClassLoader().parseClass(\"\"\"",70],["Class clazz = new GroovyClassLoader().parseClass('''",80],["//-- Class variables ------------------------",80]],"useCount":2701},{"word":"Closure","context":[["@DslContext(StaticAnalysisContext) Closure staticAnalysisClosure = null) {",110],["c.resolveStrategy = Closure.DELEGATE_FIRST",96],["@DslContext(CloneWorkspaceContext) Closure cloneWorkspaceClosure) {",64],["Closure requestClosure) {",70],["callable.resolveStrategy = Closure.DELEGATE_FIRST",70],["body.resolveStrategy = Closure.DELEGATE_FIRST",80],["code.resolveStrategy = Closure.DELEGATE_ONLY",95],["closure.resolveStrategy = Closure.DELEGATE_FIRST",266],["import groovy.lang.Closure;",196],["cl.resolveStrategy = Closure.DELEGATE_FIRST",189]],"useCount":8675},{"word":"Command","context":[["def zwaveEvent(physicalgraph.zwave.Command cmd) {",160],["Command.addTextField(result, \"Note\", \"Operation successful\");",42],["import org.opendolphin.core.comm.Command",44],["import org.geocommands.Command",51],["def result = p.commandResult(Command.DataType.form);",58],["import org.crsh.cli.Command",76],["public void handleCommand(ChannelUID channelUID, Command command) {",84],["import org.eclipse.smarthome.core.types.Command",113],["def result = p.commandResult(Command.DataType.result)",129],["@Command",262]],"useCount":2261},{"word":"CompileStatic","context":[["new GroovyShell().evaluate '''import groovy.transform.CompileStatic",30],["@CompileStatic(extensions='groovy/transform/sc/MixedMode.groovy')",33],["@groovy.transform.CompileStatic(TypeCheckingMode.SKIP)",38],["@CompileStatic",11284],["import groovy.transform.CompileStatic",8289],["@groovy.transform.CompileStatic",889],["@CompileStatic(TypeCheckingMode.SKIP)",357],["import groovy.transform.CompileStatic;",268],["assertScript '''import groovy.transform.CompileStatic",92],["//@CompileStatic",66]],"useCount":21472},{"word":"Component","context":[["@Component",2200],["import org.pillarone.riskanalytics.core.components.Component",155],["import java.awt.Component",185],["import org.springframework.stereotype.Component",2455],["import com.vaadin.ui.Component",61],["import org.springframework.stereotype.Component;",59],["import org.apache.pivot.wtk.Component",52],["print Component",37],["import org.rioproject.config.Component",94],["AS:Component: sess-man",89]],"useCount":5989},{"word":"Compute","context":[["def forwardingRulesGet = Mock(Compute.ForwardingRules.Get)",98],["def computeMock = Mock(Compute)",302],["def forwardingRules = Mock(Compute.ForwardingRules)",125],["import com.google.api.services.compute.Compute",114],["def globalOperations = Mock(Compute.GlobalOperations)",111],["def globalForwardingRules = Mock(Compute.GlobalForwardingRules)",92],["def targetPools = Mock(Compute.TargetPools)",75],["def backendServices = Mock(Compute.BackendServices)",74],["def regionOperations = Mock(Compute.RegionOperations)",73],["def globalForwardingRulesGet = Mock(Compute.GlobalForwardingRules.Get)",65]],"useCount":3034},{"word":"Configuration","context":[["stringParam(\"ConfigFile\",\"\",\"Path to Configuration File\")",123],["Configuration configuration = new Configuration().with {",65],["import io.dropwizard.Configuration",79],["import org.apache.hadoop.conf.Configuration",80],["import org.gradle.api.artifacts.Configuration",635],["import org.springframework.context.annotation.Configuration",1262],["@Configuration",1805],["Configuration",105],["capability \"Configuration\"",240],["import org.eclipse.smarthome.config.core.Configuration",157]],"useCount":6891},{"word":"Constants","context":[["import test.groovy.platformservices.utils.dataUtils.Constants",57],["class Constants {",126],["assert (os == 'Windows_NT') || (os in Constants.crossList)",1423],["if (Constants.jitStressModeScenarios.containsKey(scenario)) {",203],["import org.fundacionjala.gradle.plugins.enforce.utils.Constants",136],["Constants.configurationList.each { configuration ->",92],["Constants.jitStressModeScenarios[scenario].each{ k, v ->",82],["import org.rioproject.config.Constants",79],["Constants.r2rJitStressScenarios.indexOf(scenario) != -1) {",78],["group: Constants.DEFAULT_TRIGGERS_GROUP,",71]],"useCount":4240},{"word":"ContextHelper","context":[["import static javaposse.jobdsl.dsl.ContextHelper.executeInContext",87],["ContextHelper.executeInContext(staticAnalysisClosure, staticAnalysisContext)",117],["import javaposse.jobdsl.dsl.ContextHelper",365],["ContextHelper.executeInContext(publishOverSshClosure, publishOverSshContext)",55],["ContextHelper.executeInContext(downstreamClosure, downstreamContext)",55],["ContextHelper.executeInContext(closure, context)",1019],["ContextHelper.executeInContext(closure, stepContext)",53],["ContextHelper.executeInContext(envClosure, envContext)",52],["ContextHelper.executeInContext(postBuildClosure, postBuildContext)",45],["ContextHelper.executeInContext(plotsClosure, plotsContext)",32]],"useCount":3537},{"word":"Convenience","context":[["iconX3Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\",",38],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",57],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",57],["iconX3Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",160],["iconX3Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",160],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\",",220],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\",",220],["category: \"Convenience\",",348],["iconUrl: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png\",",365],["iconUrl: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png\",",365]],"useCount":2236},{"word":"Create","context":[["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.255\" }",93],["ack.errorMessagesFor(\"Create\", \"[inetnum] 192.100.0.0 - 192.200.255.255\") ==",218],["ack.successes.any { it.operation == \"Create\" && it.key == \"[person] FP1-TEST   First Person\" }",95],["ack.successes.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.255\" }",86],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["ack.successes.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",107],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.127\" }",112],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",123],["ack.errorMessagesFor(\"Create\", \"[inetnum] 192.168.0.0 - 192.168.255.255\") ==",115],["ack.errorMessagesFor(\"Create\", \"[inetnum] 192.168.200.0 - 192.168.200.127\") ==",112]],"useCount":4977},{"word":"Created","context":[["println \"Created new artifact ${FilenameUtils.normalize(destFile.path)}\"",40],["* Created by Duncan on 2/2/14.",35],["* Created by tomwallace on 12/7/15.",43],["* Created by Arasthel on 16/08/14.",46],["* Created by vtajzich",86],["* Created on: 02/08/2009",260],["* Created by IntelliJ IDEA.",457],["* Created with IntelliJ IDEA.",752],["* Created by think on 2015/1/27.",35],["* Created by javaConductor on 10/5/2014.",31]],"useCount":3170},{"word":"D","context":[["</D:propstat>",110],["* @author Hamlet D'Arcy",628],["<D:prop>",162],["</D:prop>",162],["<D:propstat>",110],["<D:status>HTTP/1.1 200 OK</D:status>",86],["<D:multistatus xmlns:D=\"DAV:\">",76],["<D:status>HTTP/1.1 200 OK</D:status>",86],["</D:response>",93],["<D:response>",93]],"useCount":2781},{"word":"DELETE","context":[["executeUpdate 'DELETE FROM UserRole WHERE role=:role', [role: role]",74],["removedViewAction[0].value() == 'DELETE'",46],["removedJobAction[0].value() == 'DELETE'",46],["executeUpdate 'DELETE FROM UserRole WHERE user=:user', [user: user]",72],["removeViewAction('DELETE')",56],["RemovedViewAction.DELETE,",48],["static allowedMethods = [save: \"POST\", update: \"PUT\", delete: \"DELETE\"]",866],["request.method = 'DELETE'",558],["@DELETE",41],["RemovedJobAction.DELETE,",66]],"useCount":2501},{"word":"Date","context":[["Date lastUpdated",1007],["Date dateCreated",1287],["* $Date: $",136],["def date = new Date()",137],["* $Date$",150],["Date date",170],["Date now = new Date()",199],["Date now = new Date()",199],["import java.util.Date;",356],["def now = new Date()",457]],"useCount":12193},{"word":"DomainClassUnitTestMixin","context":[["@TestMixin(DomainClassUnitTestMixin)",52],["import grails.test.mixin.domain.DomainClassUnitTestMixin",87],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521]],"useCount":2660},{"word":"DslContext","context":[["import javaposse.jobdsl.dsl.DslContext",448],["void publishOverSsh(@DslContext(PublishOverSshContext) Closure publishOverSshClosure) {",55],["@DslContext(CopyArtifactSelectorContext) Closure copyArtifactClosure) {",52],["void archiveArtifacts(@DslContext(ArchiveArtifactsContext) Closure artifactsClosure) {",32],["void steps(@DslContext(StepContext) Closure closure) {",36],["@DslContext(DownstreamTriggerContext) Closure downstreamTriggerClosure = null) {",45],["@DslContext(StaticAnalysisContext) Closure staticAnalysisClosure = null) {",110],["@DslContext(CloneWorkspaceContext) Closure cloneWorkspaceClosure) {",64],["@DslContext(EmailContext) Closure emailClosure = null) {",58],["void downstreamParameterized(@DslContext(DownstreamContext) Closure downstreamClosure) {",55]],"useCount":4457},{"word":"DslScriptException","context":[["thrown(DslScriptException)",2735],["import javaposse.jobdsl.dsl.DslScriptException",189],["Exception e = thrown(DslScriptException)",186],["Exception exception = thrown(DslScriptException)",29]],"useCount":3139},{"word":"END","context":[["certif:       -----END CERTIFICATE-----",84],["*    END OF TERMS AND CONDITIONS",98],["-----END PGP SIGNATURE-----",69],["mnt-by:       RIPE-NCC-END-MNT",119],["// \"ASS-END\"",127],["mnt-by:         RIPE-NCC-END-MNT",224],["mnt-by:       END-USER-MNT",318],["END IF;",57],["certif:         -----END PGP PUBLIC KEY BLOCK-----",61],["END:VCALENDAR",59]],"useCount":2391},{"word":"Entity","context":[["@Entity",1661],["import grails.persistence.Entity",291],["import javax.persistence.Entity",394],["*       \"Legal Entity\" shall mean the union of the acting entity and all",98],["import com.stewsters.dusk.core.entity.Entity",45],["import javax.persistence.Entity;",46],["import groovyx.gaelyk.datastore.Entity",49],["*       \"You\" (or \"Your\") shall mean an individual or Legal Entity",98],["*       or by an individual or Legal Entity authorized to submit on behalf of",98],["*       \"Contributor\" shall mean Licensor and any individual or Legal Entity",98]],"useCount":3219},{"word":"Environment","context":[["if (Environment.current == Environment.DEVELOPMENT) {",68],["import griffon.util.Environment",46],["Environment.initializeIfEmpty()",47],["void run(Configuration configuration, Environment environment) throws Exception {",49],["if(Environment.current == Environment.DEVELOPMENT && attrs.debug){",50],["import grails.util.Environment",844],["import io.dropwizard.setup.Environment",126],["import org.springframework.core.env.Environment",115],["if (Environment.current == Environment.DEVELOPMENT) {",68],["if(Environment.current == Environment.DEVELOPMENT && attrs.debug){",50]],"useCount":2526},{"word":"EqualsAndHashCode","context":[["@EqualsAndHashCode(includeFields = true)",45],["@AnnotationCollector([ToString, EqualsAndHashCode, Immutable])",31],["@EqualsAndHashCode(callSuper = true)",32],["@EqualsAndHashCode(includes='username')",35],["@EqualsAndHashCode(includes='authority')",36],["import groovy.transform.EqualsAndHashCode;",38],["@AnnotationCollector([EqualsAndHashCode, Immutable])",23],["import groovy.transform.EqualsAndHashCode",1214],["@EqualsAndHashCode",966],["EqualsAndHashCode",91]],"useCount":2711},{"word":"Exception","context":[["catch(Exception e) {",526],["notThrown(Exception)",260],["protected void configure(AuthenticationManagerBuilder auth) throws Exception {",266],["} catch (Exception e) {",5515],["catch (Exception e) {",1426],["} catch (Exception ex) {",902],["protected void configure(HttpSecurity http) throws Exception {",697],["} catch(Exception e) {",647],["catch (Exception e)",565],["}catch(Exception e){",493]],"useCount":23519},{"word":"FROM","context":[["FROM",219],["String sqlt = \"SELECT * FROM observation_fact WHERE CONCEPT_CD = ?\";",69],["executeUpdate 'DELETE FROM UserRole WHERE user=:user', [user: user]",72],["executeUpdate 'DELETE FROM UserRole WHERE role=:role', [role: role]",74],["r = \"SELECT \" + columns + \" FROM (\" + s1 +",74],["r = \"SELECT \" + columns + \" FROM (\" +",74],["r = \"SELECT \" + columns + \" FROM (\" + s2 +",74],["s.append(\"FROM DE_SUBJECT_PROTEIN_DATA a, DE_pathway_gene c, de_pathway p, \");",84],["FROM qt_patient_set_collection",91],["* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",265]],"useCount":2616},{"word":"File","context":[["includeTargets << new File(\"$databaseMigrationPluginDir/scripts/_DatabaseMigrationCommon.groovy\")",183],["String replaced(File parent, def search, def replace) {",147],["void createFile(File parent) {",147],["File asFile(File parent) {",147],["import java.io.File",256],["* To change this template use File | Settings | File Templates.",879],["File asFile(File parent) {",147],["void createCommand(File parent) {",147],["* To change this template use File | Settings | File Templates.",879],["import java.io.File;",382]],"useCount":20128},{"word":"Foo","context":[["def f = new Foo()",80],["class Foo {{",346],["public class Foo {",315],["def foo = new Foo()",196],["class Foo {",3502],["class Foo {}",169],["new Foo()",135],["def builder = new HibernateMappingBuilder(\"Foo\")",120],["myFixture.addFileToProject('Foo.groovy', '''\\",118],["myFixture.configureByText \"a.java\", \"class Foo {{ <caret> }}\"",90]],"useCount":12833},{"word":"GET","context":[["method 'GET'",172],["case 'GET':",133],["redirect action: \"index\", method: \"GET\"",941],["@RequestMapping(method = RequestMethod.GET)",126],["redirect action:\"index\", method:\"GET\"",658],["@GET",483],["import javax.ws.rs.GET",224],["method: \"GET\",",192],["method \"GET\"",146],[".withMethod(\"GET\")",141]],"useCount":5202},{"word":"Grails","context":[["* @author Graeme Rocher (Grails 0.4)",55],["// Uncomment and edit the following lines to start using Grails encoding & escaping improvements",73],["// This script is executed by Grails after plugin was installed to project.",79],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["* A service class encapsulates the core business logic of a Grails application",49],["// the version or versions of Grails the plugin is designed for",529],["*  Nimble, an extensive application base for Grails",133],["*  from Wholly Grails.",270],["// inherit Grails' default dependencies",1209],["* Builds a Grails project.",48]],"useCount":4038},{"word":"Groovy","context":[["* Executes Groovy scripts after a build.",44],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["//  Gant -- A Groovy way of scripting Ant tasks.",90],["// Groovy Script: http://www.groovy-lang.org/syntax.html",39],["acmeGroovyNode.groovyName[0].value() == 'Groovy 2.0'",82],["groovyNode.name() == 'hudson.plugins.groovy.Groovy'",46],["Groovy script",48],["import static ratpack.groovy.Groovy.ratpack",61],["* Executes a Groovy script.",64],["acmeGroovyNode.name() == 'hudson.plugins.groovy.Groovy'",82]],"useCount":2677},{"word":"HomePage","context":[["waitFor {  browser.at HomePage }",22],["browser.at HomePage",23],["at HomePage",117],["waitFor{at HomePage}",200],["import test.groovy.platformservices.gebPages.homePage.HomePage",90],["waitFor { at HomePage }",1532],["class HomePage extends Page {",35],["to HomePage",24],["waitFor { browser.at HomePage }",24],["waitFor {at HomePage}",306]],"useCount":2431},{"word":"HttpServletResponse","context":[["response.status == HttpServletResponse.SC_OK",193],["response.status == HttpServletResponse.SC_UNAUTHORIZED",81],["import javax.servlet.http.HttpServletResponse;",81],["return apiService.renderErrorFormat(response, [status: HttpServletResponse.SC_BAD_REQUEST,",95],["response.status == HttpServletResponse.SC_MOVED_TEMPORARILY",95],["response.sendError HttpServletResponse.SC_UNAUTHORIZED",112],["response.status == HttpServletResponse.SC_FORBIDDEN",135],["status: HttpServletResponse.SC_BAD_REQUEST,",143],["response.sendError(HttpServletResponse.SC_NOT_FOUND)",145],["import javax.servlet.http.HttpServletResponse",1241]],"useCount":3998},{"word":"HttpStatus","context":[["import static org.springframework.http.HttpStatus.*",1095],["import static org.springframework.http.HttpStatus.OK",90],["import org.apache.http.HttpStatus",82],["@ResponseStatus(HttpStatus.NOT_FOUND)",69],["import static org.springframework.http.HttpStatus.NOT_FOUND",56],["response.status == HttpStatus.NOT_FOUND.value()",55],["import org.springframework.http.HttpStatus",746],["response.status == HttpStatus.OK.value()",205],["render status: HttpStatus.UNAUTHORIZED",152],["render status: HttpStatus.NOT_FOUND",69]],"useCount":3525},{"word":"I","context":[["then: \"I can see that the values are populated correctly\"",27],["@interface I {",30],["interface I {",99],["/*If I already have this subject mark it in the subset column as belonging to both subsets*/",94],["when: 'I call the interceptor'",84],["\"I call invoke\"",50],["then: 'I get the correct turnover'",40],["if (tablein.containsRow(subject)) /*should contain all subjects already if I ran the demographics first*/ {",40],["interface I {}",37],["when: 'I import the portlet'",33]],"useCount":2248},{"word":"IN","context":[["\") PIVOT (avg(zscore) for subject_id IN (\" + subjects +",69],["s.append(\"b.concept_code IN (\" + quoteCSV(concepts) + \") and \");",56],["s.append(\"b.TIMEPOINT_CD IN (\" + quoteCSV(timepoint) + \") and \");",56],["*    BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY, WHICH IN",85],["\") PIVOT (avg(value) for subject_id IN (\" + subjects +",69],["sqlt += \"PATIENT_ID IN (\" + listToIN(subids) + \") AND \"",70],["* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",77],["* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",265],["*   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",141],["PATIENT_NUM IN (select distinct patient_num",88]],"useCount":2601},{"word":"IOException","context":[["} catch (IOException e) {",781],["* @throws IOException",167],["catch (IOException e) {",172],["thrown(IOException)",62],["catch( IOException e ) {",88],["} catch (IOException ioe) {",89],["} catch (IOException ex) {",91],["import java.io.IOException;",265],["import java.io.IOException",96],["void close() throws IOException {",139]],"useCount":3511},{"word":"Id","context":[["* $Id: $",78],["import org.springframework.data.annotation.Id",86],["* @version $Id$",284],["@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"@class\")",70],["import javax.persistence.Id;",46],["import com.netflix.spectator.api.Id",25],["then: 'Id is not empty'",22],["* $Id$",324],["import javax.persistence.Id",354],["@Id",674]],"useCount":2474},{"word":"If","context":[["*       (d) If the Work includes a \"NOTICE\" text file as part of its",98],["// If unspecified, controllers are prototype scoped.",358],["* If there are multiple, search by concept_code. Return none to multiple defaults.",46],["*       with the Work to which such Contribution(s) was submitted. If You",98],["// If this is a stress scenario, there isn't any difference in the build job",46],["/*If I already have this subject mark it in the subset column as belonging to both subsets*/",94],["// If the architecture is x64, do not add that info into the build name.",54],["// If this is a r2r jitstress, jitstressregs, jitminopts or forcerelocs scenario",50],["// Adds a trigger for the PR build if one is needed.  If isFlowJob is true, then this is the",48],["// If we are running a stress mode, we should write out the set of key",46]],"useCount":3018},{"word":"Ignore","context":[["@Ignore",1196],["@Ignore // Excluding not working in grails>2.4.3",21],["// Ignore empty lines",21],["@Ignore // Including not working in grails>2.4.3",21],["import groovyx.gaelyk.datastore.Ignore",29],["// Ignore",41],["import spock.lang.Ignore;",46],["import org.junit.Ignore;",83],["import org.junit.Ignore",480],["import spock.lang.Ignore",702]],"useCount":2734},{"word":"IllegalArgumentException","context":[["@Test(expected=IllegalArgumentException.class)",1164],["throw new IllegalArgumentException(",201],["} catch (IllegalArgumentException e) {",408],["shouldFail(IllegalArgumentException) {",458],["shouldFail(IllegalArgumentException.class) {",473],["catch (IllegalArgumentException e)",549],["* @throws IllegalArgumentException",165],["thrown IllegalArgumentException",705],["@Test(expected = IllegalArgumentException.class)",738],["thrown(IllegalArgumentException)",1819]],"useCount":9101},{"word":"Implement","context":[["// TODO Implement additions to web.xml (optional), this event occurs before",323],["// TODO Implement runtime spring config (optional)",309],["// TODO Implement post initialization spring config (optional)",357],["// TODO Implement registering dynamic methods to classes (optional)",359],["// TODO Implement code that is executed when the project configuration changes.",398],["fail \"Implement me\"",1103],["// TODO Implement code that is executed when the application shuts down (optional)",264],["// fail \"Implement me\"",45],["// TODO Implement additions to web.xml (optional)",34],["// TODO Implement code that is executed when any artefact that this plugin is",380]],"useCount":3585},{"word":"Inject","context":[["@${c.name('Inject')}",64],["import com.google.inject.Inject",273],["import javax.inject.Inject",1214],["import org.apache.tapestry5.ioc.annotations.Inject",24],["@Inject private Config config",29],["import org.elasticsearch.common.inject.Inject",30],["@Inject",2449],["import com.manydesigns.portofino.di.Inject",47],["import javax.inject.Inject;",30],["@Inject(DatabaseModule.PERSISTENCE)",46]],"useCount":4283},{"word":"Input","context":[["cli.i(longOpt: 'input', args:1, required: true, 'Input file')",12],["* Input params required for the R script are parentDir and subjectIdsStr",11],["@Input String appId",11],["@Input",2863],["import org.gradle.api.tasks.Input",824],["import greenmoonsoftware.tidewater.step.Input",15],["import com.esotericsoftware.kryo.io.Input",16],["assertTrue(\"Input file not found\", fs.exists(inFile));",20],["@Input @Optional",262]],"useCount":4034},{"word":"Integer","context":[["def foo(Integer a) {",180],["def index(Integer max) {",929],["Integer.parseInt(hex,16)",124],["Integer maxItems;",80],["Integer a, b",79],["int intDateMin = Integer.parseInt(dateMin)",75],["private Integer convertHexToInt(hex) {",126],["def list(Integer max) {",409],["Integer id",183],["Integer age",129]],"useCount":9156},{"word":"JSON","context":[["render([error: 'access denied'] as JSON)",118],["render([error: msg] as JSON)",117],["def json = request.JSON",110],["render([success: false] as JSON)",109],["render results as JSON",189],["render([success: true] as JSON)",211],["def json = JSON.parse(result.data)",303],["render result as JSON",539],["import grails.converters.JSON",2966],["import static groovyx.net.http.ContentType.JSON",170]],"useCount":9893},{"word":"JSONObject","context":[["JSONObject result = new JSONObject()",103],["JSONObject updateFeatureContainer = createJSONFeatureContainer();",54],["import org.codehaus.groovy.grails.web.json.JSONObject",472],["import org.json.JSONObject",173],["assert json instanceof JSONObject",132],["JSONObject obj = new JSONObject();",55],["JSONObject result = new JSONObject()",103],["import net.sf.json.JSONObject",75],["requestHandlingService.addTranscript(JSON.parse(addTranscriptString) as JSONObject)",56],["JSONObject obj = new JSONObject();",55]],"useCount":3065},{"word":"JVM","context":[["// uncomment (and adjust settings) to fork the JVM to isolate classpaths",145],["* @param mavenOpts JVM options needed when launching Maven",20],["// configure settings for the run-war JVM",590],["// configure settings for the Console UI JVM",589],["* Additionally for JavaProcessJobs, you can specify JVM properties by using the syntax",16],["// configure settings for the test-app JVM, uses the daemon by default",589],["// configure settings for the run-app JVM",587],["* Specifies the JVM options needed when launching Maven as an external process.",20],["// we use './temp' since this is per JVM and tests are forbidden from writing to CWD",32],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582]],"useCount":3315},{"word":"JsonSlurper","context":[["def slurper = new JsonSlurper()",269],["def jsonSlurper = new JsonSlurper()",121],["import net.sf.json.groovy.JsonSlurper",36],["JsonSlurper jsonSlurper = new JsonSlurper()",97],["import groovy.json.JsonSlurper",1694],["JsonSlurper jsonSlurper = new JsonSlurper()",97],["JsonSlurper slurper = new JsonSlurper()",81],["import groovy.json.JsonSlurper;",64],["def json = new JsonSlurper().parseText(jsonText)",80],["JsonSlurper slurper = new JsonSlurper()",81]],"useCount":3075},{"word":"LIR","context":[["mnt-by:       LIR-MNT",1356],["status:       LIR-PARTITIONED PA",162],["org-type:     LIR",115],["mnt-by:      LIR-MNT",88],["mnt-lower:    LIR-MNT",1452],["mnt-by:         LIR-MNT",368],["status:       AGGREGATED-BY-LIR",196],["status:       LIR-PARTITIONED PI",86],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: owner3\\npassword: hm\\npassword: lir\")",67],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80]],"useCount":4697},{"word":"List","context":[["Void operate(List priorOutputs) {",157],["List toolkits = ['swing']",99],["List toolkits = []",104],["public List<Step> buildSteps(Stage stage) {",119],["List platforms = []",217],["import java.util.List;",992],["import java.util.List",367],["* Written by:\tMarkus List",313],["List authors = [",233],["List pluginIncludes = []",223]],"useCount":16849},{"word":"Log","context":[["import org.apache.commons.logging.Log",733],["import groovy.util.logging.Log",372],["@Log",519],["import groovy.util.logging.Log;",88],["// log: a handler to the Log facility",76],["import org.apache.commons.logging.Log;",60],["setup: \"Log in as a test user\"",46],["myFixture.addClass 'package foo; public class Log {}'",45],["import android.util.Log",69],["setup: \"Log in as an admin user and open up the analytics template page\"",42]],"useCount":2725},{"word":"Logger","context":[["public static final Logger log = LoggerFactory.getLogger(MODULE);",61],["import org.slf4j.Logger",2552],["import org.apache.log4j.Logger",981],["import org.gradle.api.logging.Logger",521],["import java.util.logging.Logger",302],["import org.apache.log4j.Logger;",194],["import org.slf4j.Logger;",125],["Logger logger",63],["import org.apache.logging.log4j.Logger",74],["import org.codehaus.groovy.tools.shell.util.Logger",86]],"useCount":6414},{"word":"LoggerFactory","context":[["import org.slf4j.LoggerFactory",2759],["import org.slf4j.LoggerFactory;",129],["import static org.slf4j.LoggerFactory.getLogger",22],["public static final Logger log = LoggerFactory.getLogger(MODULE);",61],["protected final Logger log = LoggerFactory.getLogger(getClass())",40],["public static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MODULE);",40],["private static final Logger LOG = LoggerFactory.getLogger(this)",38],["private final log = LoggerFactory.getLogger(getClass())",23],["Logger logger = LoggerFactory.getLogger(getClass())",25],["import gtri.logging.LoggerFactory",27]],"useCount":3346},{"word":"LoginPage","context":[["waitFor {at LoginPage}",71],["to LoginPage",1259],["at LoginPage",630],["waitFor { at LoginPage }",185],["import test.groovy.platformservices.gebPages.accountManagement.LoginPage",138],["import uk.co.mdc.pages.authentication.LoginPage",44],["class LoginPage extends Page {",42],["import pages.LoginPage",34],["import Pages.SugarCRM.LoginPage",16],["if(!browser.at(LoginPage) ){",13]],"useCount":2432},{"word":"Long","context":[["def edit(Long id) {",397],["def update(Long id, Long version) {",360],["def update(Long id, Long version) {",360],["Long id",1594],["def Long versionNumber = new Long(1)",188],["def Long versionNumber = new Long(1)",188],["Long id;",105],["Long version",996],["def show(Long id) {",427],["def delete(Long id) {",398]],"useCount":10645},{"word":"MNT","context":[["mnt-by: TEST-MNT",549],["mnt-by:       lir-MNT",347],["mnt-by:       RIPE-NCC-HM-MNT",1137],["mnt-lower:    LIR-MNT",1452],["mnt-by:       LIR-MNT",1356],["mnt-by:         LIR-MNT",368],["mnt-by:       END-USER-MNT",318],["mnt-by:  OWNER-MNT",332],["mnt-lower:    RIPE-NCC-HM-MNT",333],["mnt-lower:    liR-MNT",347]],"useCount":12732},{"word":"Map","context":[["Map<String, String> getTransients() {",133],["Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes) {",127],["Map output = [:]",123],["public static final Map JSP_TAGS = new HashMap()",138],["AtomicOperation convertOperation(Map input) {",185],["import java.util.Map;",748],["public Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes) {",120],["assert (result[VersionControl.BRANCH_RESTORES] as Map).size() == 0",115],["Map resultMap = [:]",115],["import java.util.Map",232]],"useCount":17290},{"word":"Math","context":[["params.max = Math.min(max ?: 10, 100)",1252],["params.max = Math.min(params.max ? params.int('max') : 10, 100)",507],["params.max = Math.min(params.max ? params.int('max') : 25, 100)",99],["params.max = Math.min(params.max ? params.int('max') : 20, 100)",60],["def s = new BigInteger(Math.round(value).toString()).toString(16)",51],["Math.max(a, b) == c",44],["new BigInteger(Math.round(value).toString()).toString(16)",42],["import static java.lang.Math.*",41],["int beginstep = currentstep - Math.round(maxsteps / 2) + (maxsteps % 2)",40],["int endstep = currentstep + Math.round(maxsteps / 2) - 1",40]],"useCount":3087},{"word":"Maven","context":[["mavenInstallation('Maven 3.3.3')",31],["// from public Maven repositories",409],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["mavenStep.name() == 'hudson.tasks.Maven'",69],["mavenStep2.mavenName[0].value() == 'Maven 2.0.1'",23],["name() == 'hudson.tasks.Maven'",50],["* Invokes a Maven build.",32],["// uncomment these to enable remote dependency resolution from public Maven repositories",50],["mavenInstallation(\"ADOP Maven\")",208]],"useCount":2583},{"word":"Message","context":[["import net.ripe.db.whois.spec.domain.Message",52],["def message = send new Message(",2571],["import ca.uhn.hl7v2.model.Message",64],["and: 'Check Save Message'",44],["import javax.mail.Message",51],["import spec.domain.Message",63],["\"Mime-Version: 1.0 (Apple Message framework v1283)\\n\" +",49],["class Message {",49],["import javax.jms.Message",36],["import com.stanfy.helium.model.Message",38]],"useCount":3829},{"word":"Mock","context":[["def errors = Mock(Errors)",414],["import grails.test.mixin.Mock",733],["def forwardingRules = Mock(Compute.ForwardingRules)",125],["Item item = Mock(Item)",143],["controller.apiService=Mock(ApiService){",152],["TaskRepository.threadLocalTask.set(Mock(Task))",155],["controller.frameworkService=Mock(FrameworkService){",155],["JobManagement jobManagement = Mock(JobManagement)",192],["@Mock",285],["def computeMock = Mock(Compute)",302]],"useCount":12597},{"word":"NCC","context":[["address:      RIPE NCC",132],["address:         RIPE NCC",185],["mnt-by:         RIPE-NCC-END-MNT",224],["mnt-lower:    RIPE-NCC-HM-MNT",333],["netname: RIPE-NCC",337],["mnt-by:       RIPE-NCC-HM-MNT",1137],["mnt-by:       RIPE-NCC-END-MNT",119],["mnt-by: RIPE-NCC-HM-MNT",97],["org-name:     Ripe NCC organisation",85],["mnt-lower:      RIPE-NCC-LOCKED-MNT",124]],"useCount":3352},{"word":"NCubeManager","context":[["NCubeManager.copyBranch(HEAD, BRANCH1)",72],["assertEquals(1, NCubeManager.getRevisionHistory(branch1, \"TestBranch\").size())",71],["assertEquals(2, NCubeManager.getRevisionHistory(branch1, \"TestBranch\").size())",80],["cube = NCubeManager.getCube(head, \"TestBranch\")",89],["dtos = NCubeManager.getBranchChangesFromDatabase(branch1)",91],["assertEquals(1, NCubeManager.getRevisionHistory(branch1, \"TestAge\").size())",103],["cube = NCubeManager.getCube(branch1, \"TestBranch\")",105],["assertNull(NCubeManager.getCube(branch1, \"TestBranch\"))",113],["assertEquals(1, NCubeManager.getRevisionHistory(head, \"TestAge\").size())",133],["assertEquals(1, NCubeManager.getRevisionHistory(head, \"TestBranch\").size())",138]],"useCount":4247},{"word":"Node","context":[["Node root = view.node",376],["configure { Node project ->",252],["Node step = context.stepNodes[0]",216],["Node xUnitNode = context.publisherNodes[0]",199],["withXmlActions << WithXmlAction.create { Node project ->",521],["Node publisherNode = context.publisherNodes[0]",437],["Node publisherHtmlNode = context.publisherNodes[0]",153],["Node aggregateNode = context.publisherNodes[0]",128],["protected void addExtensionNode(Node node) {",145],["Node jacocoNode = context.publisherNodes[0]",128]],"useCount":7287},{"word":"NodeBuilder","context":[["NodeBuilder nodeBuilder = new NodeBuilder()",92],["buildParameterNodes[parameterName] = NodeBuilder.newInstance().",55],["Node emailNode = new NodeBuilder().'hudson.plugins.emailext.ExtendedEmailPublisher' {",37],["publisherNodes << new NodeBuilder().'hudson.plugins.tasks.TasksPublisher' {",32],["publisherNodes << new NodeBuilder().'hudson.plugins.cloneworkspace.CloneWorkspacePublisher' {",32],["publisherNodes << new NodeBuilder().'org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder' {",32],["publisherNodes << new NodeBuilder().'com.cloudbees.jenkins.GitHubCommitNotifier'()",32],["publisherNodes << new NodeBuilder().'hudson.plugins.jacoco.JacocoPublisher' {",32],["publisherNodes << new NodeBuilder().'hudson.plugins.s3.S3BucketPublisher' {",32],["NodeBuilder nodeBuilder = new NodeBuilder()",92]],"useCount":3590},{"word":"ORG","context":[["org:          ORG-RIR1-TEST",62],["org: ORG-TOL1-TEST",62],["queryObjectNotFound(\"-r -T organisation ORG-FO1-TEST\", \"organisation\", \"ORG-FO1-TEST\")",69],["queryObjectNotFound(\"-r -T organisation ORG-FO1-TEST\", \"organisation\", \"ORG-FO1-TEST\")",69],["org:          ORG-OFA10-TEST",81],["sponsoring-org: ORG-LIRA-TEST",106],["org:            ORG-OTO1-TEST",322],["org:          ORG-LIR1-TEST",1668],["org:     ORG-OTO1-TEST",53],["org:          ORG-OTO1-TEST",58]],"useCount":4041},{"word":"Object","context":[["Object actual = unmarshaller.unmarshal(new StringReader(xml))",135],["public Object getDelegate() {",266],["boolean equals(Object obj) {",207],["protected Object newInstance(ParameterList parameters, String value) {",184],["public Object run() {",171],["new Object()",161],["public boolean equals(Object obj) {",145],["//Object result = expr.evaluate(doc, XPathConstants.NODESET);",138],["void setChild(FactoryBuilderSupport builder, Object parent, Object child) {",135],["void setChild(FactoryBuilderSupport builder, Object parent, Object child) {",135]],"useCount":16062},{"word":"ObjectMapper","context":[["ObjectMapper objectMapper = new ObjectMapper()",78],["def mapper = new ObjectMapper()",58],["ObjectMapper objectMapper = new ObjectMapper()",78],["import com.fasterxml.jackson.databind.ObjectMapper",1343],["ObjectMapper mapper = new ObjectMapper()",250],["ObjectMapper mapper = new ObjectMapper()",250],["ObjectMapper objectMapper",178],["import org.codehaus.jackson.map.ObjectMapper",101],["final ObjectMapper objectMapper",94],["ObjectMapper objectMapper,",89]],"useCount":3174},{"word":"Optional","context":[["* @param options Optional named parameters:",20],["return Optional.absent()",21],["@Optional",1472],["import org.gradle.api.tasks.Optional",335],["@Input @Optional",262],["Optional.of( new NetworkConfiguration(",22],["* @param callback (Optional) Callback to call when the request is complete.",67],["return Optional.empty()",94],["* @param errorHandler (Optional) Callback to handle errors.",101],["import com.google.common.base.Optional",206]],"useCount":2776},{"word":"Override","context":[["@Override",80474],["@Override protected LightProjectDescriptor getProjectDescriptor() {",22],["@Override void apply(Project project) {",25],["@Override public void run() {",29],["//            @Override",30],["@Override protected void setUp() {",35],["//    @Override",56],["//\t@Override\t// Override toString for a nicer / more descriptive UI",50],["@Override String toString() {",43],["//\t@Override\t// Override toString for a nicer / more descriptive UI",50]],"useCount":81346},{"word":"PA","context":[["status:       ASSIGNED PA",527],["status:       ALLOCATED PA",334],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330],["status:       LIR-PARTITIONED PA",162],["// \"ALLOC-PA\"",156],["status:       SUB-ALLOCATED PA",130],["status: SUB-ALLOCATED PA",83],["syncUpdate(getTransient(\"ALLOC-PA\") + \"override: denis,override1\")",66],["// \"SUB-ALLOC-PA\"",61],["syncUpdate(getTransient(\"ALLOC-PA-A\") + \"password: owner3\\npassword: hm\")",54]],"useCount":2788},{"word":"POST","context":[["request.method = 'POST'",806],["request.method='POST'",137],["case 'POST':",149],["@POST",164],["// the delete, save and update actions only accept POST requests",194],["request.method = \"POST\"",354],["static allowedMethods = [save: \"POST\", update: \"PUT\", delete: \"DELETE\"]",866],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928]],"useCount":8150},{"word":"PROJECT_NAME","context":[["def credentials = new GoogleCredentials(PROJECT_NAME, computeMock)",57],["def hcmApp = \"ssh://jenkins@gerrit:29418/${PROJECT_NAME}/HCM_App_Repo\"",70],["def projectFolderName = \"${PROJECT_NAME}\"",84],["def credentials = new GoogleNamedAccountCredentials.Builder().project(PROJECT_NAME).compute(computeMock).build()",187],["env('PROJECT_NAME',projectFolderName)",301],["1 * forwardingRules.get(PROJECT_NAME, REGION, LOAD_BALANCER_NAME) >> forwardingRulesGet",65],["def hcmCoreConfig = \"ssh://jenkins@gerrit:29418/${PROJECT_NAME}/HCM-Core_Config\"",60],["private static final PROJECT_NAME = \"my_project\"",58],["1 * regions.list(PROJECT_NAME) >> regionsList",54],["1 * forwardingRules.delete(PROJECT_NAME, REGION, LOAD_BALANCER_NAME) >> forwardingRulesDelete",48]],"useCount":2300},{"word":"Pattern","context":[["import java.util.regex.Pattern;",107],["import java.util.regex.Pattern",1414],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[0].type[0].value() == 'INCLUDE'",80],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[0].pattern[0].value() == 'foo'",64],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[2].type[0].value() == 'EXCLUDE'",64],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[1].type[0].value() == 'INCLUDE'",64],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[2].pattern[0].value() == 'foo'",64],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'.size() == 4",64],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[3].pattern[0].value() == 'bar'",64],["patterns[0].'hudson.plugins.ws__cleanup.Pattern'[3].type[0].value() == 'EXCLUDE'",64]],"useCount":2460},{"word":"Person","context":[["def p1 = new Person(firstName: 'Jack', lastName: 'Nicholson')",125],["ack.successes.any { it.operation == \"Create\" && it.key == \"[person] FP1-TEST   First Person\" }",95],["class Person { }",68],["\"person:  First Person\\n\" +",73],["import ozone.owf.grails.domain.Person",86],["Person person",77],["class Person {",1263],["person:  First Person",293],["queryObjectNotFound(\"-r -T person FP1-TEST\", \"person\", \"First Person\")",77],["def p = new Person()",74]],"useCount":5164},{"word":"Plugin","context":[["import com.projectmadcow.engine.plugin.Plugin",31],["import org.gradle.api.Plugin",2065],["* SonarQube Puppet Plugin",112],["import grails.plugins.Plugin",106],["import org.gradle.api.Plugin;",72],["group = \"Hadoop Plugin\";",67],["class BuildPlugin implements Plugin<Project> {",32],["def title = \"Plugin summary/headline\"",26],["String actionName = pluginTaskName('install', plugin.getKey(), 'Plugin')",24],["* If the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Any+Build+Step+Plugin\">Any Build Step Plugin</a> is",22]],"useCount":3049},{"word":"Project","context":[["Project project",1035],["import be.cytomine.project.Project",144],["* This file is part of the Coporate Semantic Web Project.",165],["public void apply(Project project) {",204],["private final Project project",206],["import org.gradle.api.Project;",261],["private Project project",373],["void apply(Project project) {",1643],["import org.gradle.api.Project",5797],["Project project = ProjectBuilder.builder().build()",711]],"useCount":15008},{"word":"ProjectBuilder","context":[["Project project = ProjectBuilder.builder().build();",54],["def project = ProjectBuilder.builder().build()",132],["project = ProjectBuilder.builder().withProjectDir(projectDir).build()",161],["project = ProjectBuilder.builder().build()",575],["Project project = ProjectBuilder.builder().withProjectDir(",50],["def project = ProjectBuilder.builder().withProjectDir(repo.dir).build()",40],["Project project = ProjectBuilder.builder().withProjectDir(new File(\"\").absoluteFile).build()",35],["project = ProjectBuilder.builder().withName(desc.methodName).build()",33],["import org.gradle.testfixtures.ProjectBuilder",1660],["Project project = ProjectBuilder.builder().build()",711]],"useCount":3769},{"word":"Properties","context":[["Properties properties = new Properties()",182],["def props = new Properties()",234],["def properties = new Properties()",208],["Properties properties = new Properties()",182],["Properties props = new Properties()",168],["Properties props = new Properties()",168],["Properties properties = new Properties();",65],["Properties properties = new Properties();",65],["// Properties",64],["Properties p = new Properties()",62]],"useCount":2346},{"word":"PsiElement","context":[["PsiElement(:)(':')",48],["PsiElement resolved = ref.resolve();",662],["final PsiElement element = ref.resolve();",56],["final PsiElement resolved = ref.resolve();",193],["PsiElement resolved = ref.resolve()",139],["import com.intellij.psi.PsiElement",112],["PsiElement(.)('.')",88],["PsiElement(()('(')",78],["PsiElement())(')')",60],["final PsiElement resolved = resolve(\"A.groovy\")",53]],"useCount":2232},{"word":"RIPE","context":[["address:         RIPE NCC",185],["mnt-lower:      RIPE-NCC-LOCKED-MNT",124],["admin-c: TEST-RIPE",129],["address:      RIPE NCC",132],["mnt-by:         RIPE-DBM-MNT",172],["mnt-by:       RIPE-NCC-HM-MNT",1137],["mnt-by:         RIPE-NCC-END-MNT",224],["mnt-lower:    RIPE-NCC-HM-MNT",333],["netname: RIPE-NCC",337],["netname:      RIPE-NET1",547]],"useCount":5207},{"word":"Release","context":[["['Debug', 'Release'].each { configurationGroup ->",170],["if (configuration == 'Checked' || configuration == 'Release') {",246],["if (configuration == 'Release') {",567],["assert configuration == 'Release'",125],["if (configuration != 'Release') {",206],["if (configuration != 'Checked' && configuration != 'Release') {",146],["//Skip configs that aren't Checked or Release (so just Debug, for now)",110],["['Debug', 'Release'].each { configuration ->",72],["if (configuration == 'Release'){",66],["if (configuration == 'Release' || configuration == 'Checked') {",1512]],"useCount":4059},{"word":"RequiresPlugin","context":[["@RequiresPlugin(id = 'clone-workspace-scm')",107],["@RequiresPlugin(id = 'groovy')",106],["@RequiresPlugin(id = 'ant')",68],["@RequiresPlugin(id = 'vsphere-cloud')",66],["@RequiresPlugin(id = 'envinject')",65],["@RequiresPlugin(id = 'email-ext')",63],["@RequiresPlugin(id = 'git')",63],["@RequiresPlugin(id = 'grails')",53],["@RequiresPlugin(id = 'config-file-provider')",107],["import javaposse.jobdsl.dsl.RequiresPlugin",326]],"useCount":4750},{"word":"Role","context":[["static void removeAll(Role role) {",82],["role == Role.load(r.id)",201],["static boolean remove(User u, Role r, boolean flush = false) {",128],["static void removeAll(Role r, boolean flush = false) {",107],["role validator: { Role r, UserRole ur ->",102],["role == Role.load(roleId)",215],["Role role",281],["Set<Role> getAuthorities() {",240],["class Role {",222],["static UserRole create(User user, Role role, boolean flush = false) {",204]],"useCount":3425},{"word":"Rule","context":[["import org.codenarc.rule.Rule",519],["protected Rule createRule() {",498],["logger.info(\"Rule created: \"+rule.getUID())",62],["import org.junit.Rule;",60],["<sld:Rule>",36],["</sld:Rule>",36],["@Rule",1661],["import org.junit.Rule",2142],["//WAIT until Rule modules types are parsed and the rule becomes IDLE",31],["import org.eclipse.smarthome.automation.Rule",31]],"useCount":5483},{"word":"RuntimeException","context":[["throw new RuntimeException()",161],["throw new RuntimeException(",68],["} catch (RuntimeException re) {",82],["catch (RuntimeException e)",76],["} catch (RuntimeException e) {",190],["RuntimeException e = thrown()",216],["throw new RuntimeException(e)",121],["throw new RuntimeException(e);",130],["thrown(RuntimeException)",137],["throw new RuntimeException(e.toString())",155]],"useCount":2593},{"word":"SELECT","context":[["validationQuery = \"SELECT 1\"",312],["SELECT",199],["validationQuery=\"SELECT 1\"",182],["r = \"SELECT \" + columns + \" FROM (\" +",74],["r = \"SELECT \" + columns + \" FROM (\" + s2 +",74],["r = \"SELECT \" + columns + \" FROM (\" + s1 +",74],["String sqlt = \"SELECT * FROM observation_fact WHERE CONCEPT_CD = ?\";",69],["s.append(\"SELECT distinct t1.ANTIGEN_NAME, t1.GENE_SYMBOL, t1.zscore as value, '\");",56],["s.append(\"SELECT distinct a.component, a.GENE_SYMBOL, a.zscore, '\");",56],["SELECT DISTINCT",71]],"useCount":2377},{"word":"SOURCE","context":[["assertViolations(SOURCE,",301],["@Retention(RetentionPolicy.SOURCE)",226],["assertNoViolations(SOURCE)",1422],["final SOURCE = '''",3058],["final SOURCE = \"\"\"",219],["assertTwoViolations(SOURCE,",211],["final SOURCE = '''\\",52],["assertNoViolations SOURCE",51],["final SOURCE = new File(testFile.toURI()).text",44],["assertSingleViolation(SOURCE)",41]],"useCount":5824},{"word":"SUCCESS","context":[["entry[1].'com.flowdock.jenkins.BuildResult'[0].value() == 'SUCCESS'",224],["result.task(\":showVersion\").outcome == SUCCESS",54],["second.condition[0].value() == 'SUCCESS'",50],["condition(\"SUCCESS\")",186],["import static org.gradle.testkit.runner.TaskOutcome.SUCCESS",97],["insertResponse =~ /SUCCESS/",72],["response =~ /SUCCESS/",226],["third.condition[0].value() == 'SUCCESS'",68],["assert SUCCESS == flow.result",60],["freeStyleBuild.result == SUCCESS",242]],"useCount":2311},{"word":"ScheduledExecution","context":[["new ScheduledExecution(",237],["//try to do update of the ScheduledExecution",213],["ScheduledExecution se = (ScheduledExecution) list[0]",127],["ScheduledExecution se = (ScheduledExecution) list[0]",127],["def se = new ScheduledExecution(",127],["ScheduledExecution se = new ScheduledExecution(",85],["final ScheduledExecution execution = scheduledExecution",104],["assertTrue(obj instanceof ScheduledExecution)",127],["import rundeck.ScheduledExecution",124],["assertTrue(scheduledExecution instanceof ScheduledExecution)",112]],"useCount":3315},{"word":"Secured","context":[["import org.springframework.security.access.annotation.Secured",248],["@Secured(['ROLE_ADMIN'])",530],["@Secured(['ROLE_USER'])",277],["import grails.plugin.springsecurity.annotation.Secured",788],["@Secured(['ROLE_NCI-FREDERICK_CAHUB_SUPER','ROLE_ADMIN'])",203],["@Secured(['IS_AUTHENTICATED_REMEMBERED'])",136],["import grails.plugins.springsecurity.Secured",667],["@Secured(['IS_AUTHENTICATED_FULLY'])",135],["@Secured(['ROLE_SCIENTIST', 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])",81],["@Secured('ROLE_ADMIN')",79]],"useCount":4420},{"word":"See","context":[["* See the API for {@link grails.test.mixin.web.GroovyPageUnitTestMixin} for usage instructions",127],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* agreements. See the NOTICE file distributed with this work",122],["// See http://grails.org/doc/latest/guide/conf.html#dataSource for documentation",201],["// accepts Markdown syntax. See http://daringfireball.net/projects/markdown/ for details",87],["// See http://logback.qos.ch/manual/groovy.html for details on configuration",59],["* See the file \"CONTRIBUTORS\" for complete list of contributors.",203],["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893]],"useCount":6589},{"word":"Set","context":[["// Set up standard options.",409],["Set<Role> getAuthorities() {",240],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["] as Set",204],["import java.util.Set;",169],["// Set a push trigger",144],["// Set a periodic trigger",143],["// Set PR trigger.",138],["def admins = (Set)adminsSet",127],[".produces(['application/xml', 'application/json'] as Set)",119]],"useCount":7603},{"word":"Shared","context":[["import spock.lang.Shared;",83],["import spock.lang.Shared",2531],["@Shared",3840],["@Shared @AutoCleanup(\"deleteDir\") def tapeRoot = Files.createTempDir()",72],["@Shared HugsAPICallsPage hugsApi",54],["@Shared def user = new ListofUsers().getUserDetails('epmsecuser1')",53],["@Shared def data = new CommonTestData()",52],["@Shared def epmProperties",52],["@Shared EPMCallsPage epm",52],["@Shared String epmExerciseName",49]],"useCount":7356},{"word":"Slf4j","context":[["// slf4jVersion:   bundled Slf4j",29],["@groovy.util.logging.Slf4j('logger')",11],["@groovy.util.logging.Slf4j",27],["@Slf4j('logger')",13],["import groovy.util.logging.Slf4j as Log",18],["import groovy.util.logging.Slf4j;",67],["import groovy.util.logging.Slf4j",3701],["@Slf4j",3808]],"useCount":7674},{"word":"Specification","context":[["class UserSpec extends Specification {",103],["extends Specification {",34],["class Foo extends Specification {",40],["class UserControllerSpec extends Specification {",89],["class FooSpec extends spock.lang.Specification {",33],["class PersonSpec extends Specification {",31],["class PublisherContextSpec extends Specification {",32],["extends Specification",129],["import spock.lang.Specification;",464],["import spock.lang.Specification",21191]],"useCount":23106},{"word":"SpringSecurityUtils","context":[["import org.codehaus.groovy.grails.plugins.springsecurity.SpringSecurityUtils",343],["import grails.plugin.springsecurity.SpringSecurityUtils",403],["def config = SpringSecurityUtils.securityConfig",300],["if (SpringSecurityUtils.securityConfigType == 'Annotation') {",32],["String usernameFieldName = SpringSecurityUtils.securityConfig.userLookup.usernamePropertyName",47],["SpringSecurityUtils.resetSecurityConfig()",75],["redirect uri: SpringSecurityUtils.securityConfig.logout.filterProcessesUrl // '/j_spring_security_logout'",94],["response.setHeader 'Location', SpringSecurityUtils.securityConfig.auth.ajaxLoginFormUrl",102],["redirect uri: SpringSecurityUtils.securityConfig.successHandler.defaultTargetUrl",174],["def conf = SpringSecurityUtils.securityConfig",280]],"useCount":2299},{"word":"Sql","context":[["def sql = new Sql(dataSource)",161],["Sql sql = new Sql(dataSource)",472],["import groovy.sql.Sql",1427],["Sql sql = new Sql(dataSource);",691],["Sql sql = new Sql(dataSource);",691],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource)",410],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource)",410],["Sql sql = new Sql(dataSource)",472]],"useCount":7778},{"word":"String","context":[["public String toString() {",2014],["String title",1102],["String username",1009],["public static void main(String[] args) {",988],["String password",946],["String firstName",915],["String id",877],["String description",1490],["String name",6076],["String toString() {",3142]],"useCount":163330},{"word":"StringBuffer","context":[["StringBuffer sampleInfoBuf = new StringBuffer();",93],["StringBuffer sampleInfoBuf = new StringBuffer();",93],["StringBuffer geneBuf = new StringBuffer();",73],["StringBuffer geneBuf = new StringBuffer();",73],["StringBuffer sb = new StringBuffer()",130],["StringBuffer sb = new StringBuffer()",130],["StringBuffer buf = new StringBuffer();",170],["StringBuffer buf = new StringBuffer();",170],["def sb = new StringBuffer()",55],["StringBuffer snpBuf = new StringBuffer();",50]],"useCount":2486},{"word":"StringBuilder","context":[["StringBuilder s = new StringBuilder()",124],["StringBuilder sb = new StringBuilder();",139],["StringBuilder builder = new StringBuilder()",132],["StringBuilder builder = new StringBuilder()",132],["StringBuilder s = new StringBuilder();",455],["StringBuilder sb = new StringBuilder();",139],["def sb = new StringBuilder()",179],["StringBuilder sb = new StringBuilder()",313],["StringBuilder sb = new StringBuilder()",313],["StringBuilder s = new StringBuilder();",455]],"useCount":5384},{"word":"StringWriter","context":[["StringWriter sw = new StringWriter()",412],["def sw = new StringWriter()",391],["StringWriter writer = new StringWriter()",323],["StringWriter writer = new StringWriter()",323],["new StringWriter().with { w ->",247],["final StringWriter sw = new StringWriter()",100],["final StringWriter sw = new StringWriter()",100],["StringWriter rendered = new StringWriter()",94],["StringWriter sw = new StringWriter()",412],["def writer = new StringWriter()",564]],"useCount":4413},{"word":"Subject","context":[["final subject = new Subject()",145],["@Subject",842],["import spock.lang.Subject",1072],["import org.apache.shiro.subject.Subject",101],["@Subject def operation = new DeleteGoogleLoadBalancerAtomicOperation(description)",38],["@Subject def operation = new DeleteGoogleHttpLoadBalancerAtomicOperation(description)",38],["import javax.security.auth.Subject",39],["tablein.putColumn(\"subject\", new ExportColumn(\"subject\", \"Subject\", \"\", \"string\"));",40],["@Subject def operation = new UpsertGoogleLoadBalancerAtomicOperation(description)",45],["\"Subject: NEW\\n\" +",87]],"useCount":3131},{"word":"SuppressWarnings","context":[["@SuppressWarnings(\"unchecked\")",161],["@SuppressWarnings('MethodName')",236],["@SuppressWarnings(\"GroovyAccessibility\")",136],["@SuppressWarnings(\"GroovyUnusedDeclaration\")",305],["@SuppressWarnings(\"GroovyAssignabilityCheck\")",253],["@SuppressWarnings(\"GrMethodMayBeStatic\")",122],["@SuppressWarnings(['ClosureAsLastMethodParameter', 'UnnecessaryReturnKeyword'])",118],["@SuppressWarnings('NoDef')",109],["@SuppressWarnings(\"rawtypes\")",86],["@SuppressWarnings('DuplicateStringLiteral')",76]],"useCount":3095},{"word":"System","context":[["long startTime = System.currentTimeMillis()",165],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["System.exit(1)",556],["// if (System.properties[\"${appName}.config.location\"]) {",522],["System.exit(0)",457],["System.out.println();",383],["System.exit(-1)",221],["jBilling - The Enterprise Open Source Billing System",206],["System.err.println(it);",189],["long start = System.currentTimeMillis()",171]],"useCount":12444},{"word":"T","context":[["queryObject(\"-r -T inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",218],["queryObject(\"-r -T inet6num 2001::/20\", \"inet6num\", \"2001::/20\")",213],["queryObjectNotFound(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",169],["queryObject(\"-r -T inet6num 2001:600::/30\", \"inet6num\", \"2001:600::/30\")",159],["queryObjectNotFound(\"-r -T inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",229],["queryObject(\"-GBr -T inetnum 192.168.128.0 - 192.168.255.255\", \"inetnum\", \"192.168.128.0 - 192.168.255.255\")",142],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.169.255.255\", \"inetnum\", \"192.168.0.0 - 192.169.255.255\")",520],["queryObject(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",249],["queryObjectNotFound(\"-r -T inetnum 192.100.0.0 - 192.200.255.255\", \"inetnum\", \"192.100.0.0 - 192.200.255.255\")",480],["queryObject(\"-r -T inetnum 192.0.0.0 - 192.255.255.255\", \"inetnum\", \"192.0.0.0 - 192.255.255.255\")",436]],"useCount":10181},{"word":"TEST","context":[["tech-c:       TP1-TEST",3512],["source:       TEST",3460],["admin-c:      TP1-TEST",3457],["org:          ORG-LIR1-TEST",1668],["source:         TEST",1478],["netname:      TEST-NET-NAME",1457],["descr:        TEST network",1353],["source: TEST",1013],["admin-c:        TP1-TEST",620],["source:  TEST",1304]],"useCount":31736},{"word":"TODO","context":[["// TODO: grails.serverURL = \"http://www.changeme.com\"",466],["// TODO: Populate valid properties like...",1018],["// TODO Auto-generated method stub",424],["//TODO: add invalid values to params object",314],["// TODO Implement additions to web.xml (optional), this event occurs before",323],["// TODO Fill in these fields",343],["// TODO Implement post initialization spring config (optional)",357],["// TODO Implement registering dynamic methods to classes (optional)",359],["// TODO Implement code that is executed when any artefact that this plugin is",380],["// TODO Implement code that is executed when the project configuration changes.",398]],"useCount":7013},{"word":"TP1","context":[["tech-c:      TP1-TEST",123],["tech-c:       TP1-TEST",3512],["admin-c:      TP1-TEST",3457],["admin-c:        TP1-TEST",620],["admin-c: TP1-TEST",99],["tech-c:         TP1-TEST",609],["admin-c:     TP1-TEST",481],["zone-c:         TP1-TEST",186],["nic-hdl: TP1-TEST",43],["tech-c:  TP1-TEST",68]],"useCount":9345},{"word":"Task","context":[["Task existingTask = null) {",105],["import org.gradle.api.Task",1245],["import com.netflix.spinnaker.clouddriver.data.task.Task",349],["import com.netflix.spinnaker.orca.Task",208],["private static Task getTask() {",200],["Task task = project.tasks.create(name: ASCIIDOCTOR, type: AsciidoctorTask) {",175],["import be.cytomine.utils.Task",61],["TaskRepository.threadLocalTask.set(Mock(Task))",155],["import com.netflix.spinnaker.kato.data.task.Task",132],["import org.gradle.api.Task;",70]],"useCount":4879},{"word":"TaskAction","context":[["@TaskAction",2443],["import org.gradle.api.tasks.TaskAction",2252],["import org.gradle.api.tasks.TaskAction;",77]],"useCount":4772},{"word":"Test","context":[["import org.junit.Test",10298],["void \"Test that the show action returns the correct model\"() {",734],["@Test(expected = IllegalArgumentException.class)",738],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["@Test",55755],["class Test {",1433],["@Test(expected=IllegalArgumentException.class)",1164],["void \"Test the save action correctly persists an instance\"() {",744],["void \"Test the index action returns the correct model\"() {",739]],"useCount":81887},{"word":"TestFor","context":[["@TestFor(User)",99],["import griffon.core.test.TestFor",54],["@TestFor(BookController)",31],["@TestFor(UserController)",118],["import grails.test.mixin.TestFor",4744],["@TestFor(AdminController)",31],["@TestFor(Person)",37],["@TestFor(HomeController)",40],["@TestFor(LoginController)",33],["@TestFor(UserService)",33]],"useCount":5985},{"word":"The","context":[["then:\"The create view is rendered again with the correct model\"",676],["when:\"The index action is executed\"",661],["then:\"The model is correctly created\"",648],["when:\"The save action is executed with an invalid instance\"",658],["then:\"The instance is deleted\"",656],["when:\"The save action is executed with a valid instance\"",656],["when:\"The delete action is called for a null instance\"",656],["when:\"The domain instance is passed to the delete action\"",656],["then:\"The model is correct\"",648],["then:\"The edit view is rendered again with the invalid instance\"",650]],"useCount":23019},{"word":"This","context":[["*\tThis file is part of MIRACLE.",127],["*   This file is part of 'Nextflow'.",1092],["* This file is part of transmart-core-db.",452],["// This loop is used to gain time.",269],["* This file is part of iceScrum.",249],["* This file is part of the Coporate Semantic Web Project.",165],["/* This file is part of VoltDB.",173],["*\tThis file is part of OpenLabFramework.",186],["* This file is part of sklintyg (https://github.com/sklintyg).",194],["This file is part of jbilling.",206]],"useCount":10106},{"word":"Thread","context":[["Thread.sleep(100)",220],["Thread.sleep(5000)",63],["Thread.sleep(10)",65],["Thread.sleep(500);",91],["Thread.sleep(2000)",94],["Thread.start {",495],["new Thread(imutHoldPenetrator).start()",238],["Thread.sleep(1000)",229],["Thread.sleep(500)",182],["new Thread(ab).start()",148]],"useCount":3386},{"word":"Throwable","context":[["catch (Throwable e) {",226],["} catch(Throwable e) {",46],["} catch (Throwable ex) {",50],["catch(Throwable th)",57],["catch(Throwable e){",60],["} catch(Throwable t) {",72],["} catch (Throwable e) {",481],["} catch (Throwable t) {",694],["catch (Throwable t) {",172],["catch(Throwable t) {",115]],"useCount":7145},{"word":"ToString","context":[["@ToString(includePackage = false)",69],["@ToString(includePackage = false, includeNames = true)",57],["import groovy.transform.ToString;",71],["@ToString(cache=true, includeNames=true, includePackage=false)",80],["@ToString(includePackage=false)",83],["@ToString(includeNames = true)",302],["@ToString(includeNames=true)",691],["@ToString",706],["import groovy.transform.ToString",1908],["ast(ToString)",54]],"useCount":4577},{"word":"Transactional","context":[["import org.springframework.transaction.annotation.Transactional;",31],["import grails.transaction.Transactional;",34],["import javax.transaction.Transactional",45],["import com.google.inject.persist.Transactional",56],["@Transactional(readOnly=true)",60],["@Transactional(readOnly = false)",73],["import org.springframework.transaction.annotation.Transactional",385],["@Transactional(readOnly = true)",1387],["import grails.transaction.Transactional",2296],["@Transactional",5467]],"useCount":9937},{"word":"Type","context":[["header 'Content-Type': 'text/plain'",44],["import java.lang.reflect.Type",152],["header 'Content-Type': 'application/json'",104],["import com.stanfy.helium.model.Type",77],["import org.hibernate.annotations.Type",75],["Type type",71],["import org.chai.kevin.data.Type;",68],["@Type(type=\"yes_no\")",62],["headers['Content-Type'] = 'application/json'",50],["\"Content-Type: text/plain;\\n\" +",42]],"useCount":2606},{"word":"TypeChecked","context":[["import groovy.transform.TypeChecked",1143],["@TypeChecked",1220],["@TypeChecked(TypeCheckingMode.SKIP)",175],["@groovy.transform.TypeChecked",124],["@TypeChecked(SKIP)",51],["import groovy.transform.TypeChecked;",34],["|@groovy.transform.TypeChecked",18],["@CompileStatic @TypeChecked",14],["//@TypeChecked",13],["assertScript '''import groovy.transform.TypeChecked",11]],"useCount":2803},{"word":"URL","context":[["// URL where documentation can be found",212],["// URL where source can be found",215],["return doGET(URL, username, password)",248],["// What URL patterns should be processed by the resources plugin",348],["'org.codehaus.groovy.grails.web.mapping', // URL mapping",390],["'org.codehaus.groovy.grails.web.mapping',        // URL mapping",510],["// URL to the plugin's documentation",517],["// URL Mapping Cache Max Size, defaults to 5000",625],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904],["URL getResource() {",130]],"useCount":6256},{"word":"UTF","context":[["public static final String CONTENT_TYPE = 'text/html;charset=UTF-8'",134],["grails.converters.encoding = \"UTF-8\"",690],["encoding = 'UTF-8'",461],["grails.views.gsp.encoding = \"UTF-8\"",332],["grails.views.gsp.encoding=\"UTF-8\"",180],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",137],["grails.converters.encoding=\"UTF-8\"",77],["ext.pid = \"${ -> node.pidFile.getText('UTF-8').trim()}\"",48],["PrintStream captureStream = new PrintStream(node.buffer, true, \"UTF-8\")",48],["response.setContentType(\"application/json; charset=UTF-8\")",44]],"useCount":3472},{"word":"Unroll","context":[["@Unroll",7462],["import spock.lang.Unroll",4126],["import spock.lang.Unroll;",236],["@Unroll()",14],["@Unroll(\"#featureName `#input`\")",12],["@Unroll(\"#featureName: #field\")",12]],"useCount":11862},{"word":"User","context":[["class User {",435],["User user",505],["static UserRole create(User user, Role role, boolean flush = false) {",204],["user == User.load(userId) &&",197],["* User: lrollus",169],["def user = new User(params)",167],["as-name:        End-User-1",162],["def user = new User()",161],["static boolean remove(User u, Role r, boolean flush = false) {",128],["* User: dima",137]],"useCount":10917},{"word":"UserRole","context":[["class UserRole implements Serializable {",217],["role validator: { Role r, UserRole ur ->",102],["UserRole.where {",388],["if (flush) { UserRole.withSession { it.flush() } }",240],["static UserRole get(long userId, long roleId) {",216],["if (!(other instanceof UserRole)) {",211],["static UserRole create(User user, Role role, boolean flush = false) {",204],["UserRole.findAllByUser(this).collect { it.role } as Set",110],["new UserRole(user: user, role: role).save(flush: flush, insert: true)",109],["UserRole.withNewSession {",103]],"useCount":2989},{"word":"Utilities","context":[["Utilities.addArchival(newJob, \"bin/Product/**\")",180],["Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")",234],["Utilities.addGithubPushTrigger(job)",282],["Utilities.addPeriodicTrigger(newJob, '@daily')",155],["Utilities.addPeriodicTrigger(job, '@daily')",152],["import jobs.generation.Utilities;",146],["Utilities.addGithubPushTrigger(newJob)",142],["Utilities.setJobTimeout(newJob, 240)",105],["Utilities.addPeriodicTrigger(job, '@weekly')",95],["Utilities.addPeriodicTrigger(job, 'H H/12 * * *')",92]],"useCount":6058},{"word":"W","context":[["\"(?i).*test\\\\W+${os}\\\\W+${scenario}.*\")",1149],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["* @author Schalk W. Cronj√©",156],["\"(?i).*test\\\\W+${os}\\\\W+${architecture}\\\\W+${configuration}\\\\W+${scenario}.*\")",30],["\"(?i).*test\\\\W+${os}\\\\W+${architecture}\\\\W+${configuration}\\\\W+${scenario}.*\")",30],["\"(?i).*test\\\\W+${os}\\\\W+${scenario}.*\")",1149],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201]],"useCount":4006},{"word":"Windows_NT","context":[["if (isFlowJob || os == 'Windows_NT') {",166],["assert (os == 'Windows_NT')",205],["assert (os == 'Windows_NT') || (os in Constants.crossList)",1423],["if (os == 'Windows_NT') {",471],["if (os == 'Windows_NT'){",343],["if (os != 'Windows_NT') {",245],["Utilities.setMachineAffinity(newJob, 'Windows_NT', 'latest-or-auto')",89],["'Windows_NT':'Windows_NT',",102],["'Windows_NT':'Windows_NT',",102],["case 'Windows_NT':",158]],"useCount":4684},{"word":"Work","context":[["*       use, offer to sell, sell, import, and otherwise transfer the Work,",98],["*       agreed to in writing, Licensor provides the Work (and each",98],["* Work on LensKit has been funded by the National Science Foundation under",332],["*       with the Work to which such Contribution(s) was submitted. If You",98],["*           attribution notices from the Source form of the Work,",98],["*       appropriateness of using or redistributing the Work and assume any",98],["*       reproduction, and distribution of the Work otherwise complies with",98],["*       form, that is based on (or derived from) the Work and for which the",98],["*       Licensor for the purpose of discussing and improving the Work, but",98],["*       the original version of the Work and any modifications or additions",98]],"useCount":2670},{"word":"X","context":[["class X {}",40],["final X x = new X()",32],["final X x = new X()",32],["new X().fo<caret>o('abc')''', PsiMethod)",30],["class X{}",29],["// GCStress=C is currently not supported on OS X",46],["class X{",51],["new X ()",66],["@interface X {",135],["class X {",596]],"useCount":2681},{"word":"You","context":[["*       modifications, and in Source or Object form, provided that You",98],["*       with the Work to which such Contribution(s) was submitted. If You",98],["* You should have received a copy of the CC0 Public Domain Dedication",200],["*           stating that You changed the files; and",98],["*           notices within Derivative Works that You distribute, alongside",98],["*       (c) You must retain, in the Source form of any Derivative Works",98],["*       by You to the Licensor shall be under the terms and conditions of",98],["*       PARTICULAR PURPOSE. You are solely responsible for determining the",98],["*           distribution, then any Derivative Works that You distribute must",98],["*    5. Submission of Contributions. Unless You explicitly state otherwise,",98]],"useCount":2308},{"word":"_","context":[["myFixture.configureByText('_.groovy', '''\\",124],["0 * _",1057],["1 * requireVersion(_,_,14) >> true",109],["1 * requireVersion(_,_,14) >> true",109],["0 * errorsMock._",133],["1 * getAuthContextForSubject(_) >> null",104],["0 * _._",449],["0 * _._",449],["0 * errors._",283],["(1.._) * mockJobManagement.requireMinimumPluginVersion('subversion', '2.1')",155]],"useCount":11268},{"word":"a","context":[["* @author <a href='mailto:burt@burtbeckwith.com'>Burt Beckwith</a>",1308],["* @author <a href='mailto:burt@burtbeckwith.com'>Burt Beckwith</a>",1308],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["myFixture.configureByText(\"a.java\", \"\"\"",704],["when:\"The save action is executed with a valid instance\"",656],["when:\"The delete action is called for a null instance\"",656],["when:\"Update is called for a domain instance that doesn't exist\"",656],["myFixture.configureByText 'a.java', '''",481],["when:\"The edit action is executed with a null domain\"",646],["when:\"The show action is executed with a null domain\"",647]],"useCount":59961},{"word":"access","context":[["import org.springframework.security.web.access.intercept.FilterSecurityInterceptor",76],["import org.springframework.security.access.annotation.Secured",248],["// use 'ant' to access a global instance of AntBuilder",79],["import org.springframework.security.access.ConfigAttribute",79],["//return access levels for the children of this path that have them",81],["import org.springframework.security.web.access.ExceptionTranslationFilter",89],["return access;",96],["import org.springframework.security.access.prepost.PreAuthorize",101],["render([error: 'access denied'] as JSON)",118],["import org.springframework.security.access.AccessDeniedException",154]],"useCount":3844},{"word":"account","context":[["String account",156],["String account) {",77],["this.account = account",63],["this.account = account",63],["String account = 'test'",52],["account = 'test'",52],["String account = getCredentials(stage)",49],["return account",48],["@Path(\"account\") String account,",47],["@Path(\"account\") String account,",47]],"useCount":2956},{"word":"ack","context":[["def ack = ackFor message",2652],["def ack = new AckResponse(\"\", message)",736],["ack.success",756],["ack.summary.assertSuccess(1, 1, 0, 0, 0)",1250],["ack.summary.assertErrors(1, 1, 0, 0)",1475],["ack.countErrorWarnInfo(1, 0, 0)",1495],["ack.countErrorWarnInfo(0, 0, 0)",1527],["ack.summary.assertSuccess(0, 0, 0, 0, 0)",1788],["ack.summary.assertErrors(0, 0, 0, 0)",2163],["ack.summary.nrFound == 1",3662]],"useCount":24932},{"word":"ackFor","context":[["def ack = ackFor message",2652],["def ack2 = ackFor message2",11],["ackFor message",11]],"useCount":2674},{"word":"action","context":[["redirect(action: \"list\")",5000],["void \"Test that the show action returns the correct model\"() {",734],["void \"Test the create action returns the correct model\"() {",731],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["redirect(action: \"list\", params: params)",974],["redirect action: \"index\", method: \"GET\"",941],["void \"Test the index action returns the correct model\"() {",739],["void \"Test the save action correctly persists an instance\"() {",744],["then:\"A redirect is issued to the show action\"",815]],"useCount":40200},{"word":"actions","context":[["fwkControl.demand.authorizeProjectJobAll { framework, resource, actions, project -> return true }",113],["* A controller class handles incoming web requests and performs actions such as redirects, rendering views and so on.",163],["// the delete, save and update actions only accept POST requests",194],["actions {",98],["// List of actions with specific request types",94],["swing.actions {",84],["def actions = [",64],["import io.github.javaconductor.gserv.actions.ResourceAction",59],["for (a1 in 0..actions) {",54],["authorizeProjectResourceAll { framework, resource, actions, project -> return true }",52]],"useCount":2930},{"word":"active","context":[["params.active = true",74],["\"active\": false,",87],["<active>true</active>",91],["<active>true</active>",91],["if (!conf || !conf.active) {",98],["<active>${ACTIVE}</active>",100],["<active>${ACTIVE}</active>",100],["active: true,",119],["def ed = new EntityDescriptor(organization:org, active:true, approved:true)",141],["def org = new Organization(active:true, approved:true)",155]],"useCount":3723},{"word":"actual","context":[["String actual = editor.asText",66],["Assert.assertEquals(expected, actual)",119],["actual == expected",222],["assertSyntaxTree([expected.expression], [actual.expression])",102],["assertEquals expected.wkt, actual.wkt",86],["expected == actual",84],["def actual = findIds(Company.class, criteria)",74],["assert expected == actual",67],["assertEquals expected, actual",73],["Object actual = unmarshaller.unmarshal(new StringReader(xml))",135]],"useCount":2718},{"word":"add","context":[["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["missions.add(new Mission(text: \"\"\"",486],["cleanupTasks.add {",121],["builder.add(\"3\", \"1\")",3150],["// Uncomment these (or add new ones) to enable additional resources capabilities",370],["//TODO: add invalid values to params object",314],["cleanupTasks.add{",206],["managedThingProvider.add(thing)",159],["managedThingProvider.add(THING)",158],["ruleRegistry.add(rule)",93]],"useCount":20422},{"word":"addClass","context":[["myFixture.addClass(\"package foo; public class Abcdefg {}\")",79],["myFixture.addClass(\"\"\"",100],["myFixture.addClass(\"\"\"package foo;",115],["myFixture.addClass '''",120],["myFixture.addClass(\"package bar; public class Abcdefg {}\")",52],["myFixture.addClass('''\\",293],["myFixture.addClass 'package bar; public class Inner {}'",72],["myFixture.addClass 'package foo; public class Outer { public class Inner {} }'",72],["myFixture.addClass('class Inh extends Base{}')",70],["myFixture.addClass('class Base extends SuperBase {}')",56]],"useCount":4012},{"word":"addFileToProject","context":[["myFixture.addFileToProject('pack/Const.groovy', '''\\",55],["myFixture.addFileToProject(\"Usage.groovy\", \"\"\"",28],["def psiFile = myFixture.addFileToProject(\"Foo.java\", \"class Foo {}\")",44],["def fooIndex = myFixture.addFileToProject(\"foo/index.html\", \"foo\")",43],["myFixture.addFileToProject \"Foo.groovy\", \"\"\"",43],["def foo = myFixture.addFileToProject('Foo.groovy', 'class Foo {}')",36],["def used = myFixture.addFileToProject('Used.groovy', 'class Used { }')",39],["myFixture.addFileToProject(\"a.groovy\", \"\"\"class Foo {",60],["final PsiFile bar = myFixture.addFileToProject(\"Bar.groovy\", \"class Bar {\" +",42],["myFixture.addFileToProject('Foo.groovy', '''\\",118]],"useCount":2420},{"word":"additional","context":[["* distributed with this work for additional information",3045],["There's no additional configuration required.",33],["// Any additional developers beyond the author specified above.",284],["*           that such additional attribution notices cannot be construed",98],["// Uncomment these to enable additional asset-pipeline capabilities",334],["// Uncomment these (or add new ones) to enable additional resources capabilities",370],["* additional information or have any questions.",768],["distributed with this work for additional information",37],["*  distributed with this work for additional information",2945],["*  if you need additional information or have any questions.",85]],"useCount":8218},{"word":"address","context":[["address: St James Street",534],["address:      RIPE NCC",132],["String address",140],["address:         RIPE NCC",185],["\"address: UK\\n\" +",82],["address: Burnley",544],["address: UK",638],["Address address",112],["address:      street 5",93],["address:      Singel 258",108]],"useCount":4235},{"word":"admin","context":[["admin-c:      TP1-TEST",3457],["admin-c:        TP1-TEST",620],["admin-c:     TP1-TEST",481],["admin-c: TEST-PN",477],["admin-c:      SR1-TEST",76],["admin-c: TP1-TEST",99],["admin-c:         TEST-PN",120],["admin-c: TEST-RIPE",129],["package tigase.admin",156],["admin-c:        AP1-TEST",188]],"useCount":8569},{"word":"after","context":[["after = \"descending\"",127],["interceptor.after()",71],["void after() {",76],["if ( before.equals(\"ascending\") && after.equals(\"descending\") )",77],["// This script is executed by Grails after plugin was installed to project.",79],["after = { Map model ->",88],["// set \"singleSession = false\" OSIV mode in hibernate configuration after enabling",277],["String after  = \"\"",133],["* Callback after a failed login. Redirects to the auth page with a warning message.",130],["after = \"ascending\"",127]],"useCount":2805},{"word":"agent","context":[["import com.netflix.spinnaker.cats.agent.AgentDataType",105],["import com.netflix.spinnaker.cats.agent.CacheResult",126],["[agent: 'a1', mountPoint: 'c1', parent: 'p1', script: 's1'],",46],["import static com.netflix.spinnaker.cats.agent.AgentDataType.Authority.AUTHORITATIVE",102],["import com.netflix.spinnaker.cats.agent.CachingAgent",79],["import com.netflix.spinnaker.cats.agent.DefaultCacheResult",67],["import org.linkedin.glu.agent.api.MountPoint",60],["import com.netflix.spinnaker.cats.agent.Agent",60],["m([agent: 'a1', mountPoint: 'p1', script: 's1'],",56],["import com.netflix.spinnaker.cats.agent.AccountAware",53]],"useCount":2362},{"word":"all","context":[["all:           '*/*', // 'all' maps to '*' or the first available format in withFormat",275],["// Toolkit compatibility. No value means compatible with all",219],["// escapes all not-encoded output at final stage of outputting",443],["all: '*/*',",287],["all:           '*/*', // 'all' maps to '*' or the first available format in withFormat",275],["// Platform compatibility. No value means compatible with all",217],["all:           '*/*',",204],["} catch (all) {",106],["allDiscoveryResults = inbox.all",99],["List<DiscoveryResult> allDiscoveryResults = inbox.all",99]],"useCount":8922},{"word":"allowedMethods","context":[["static allowedMethods = [delete: 'POST', save: 'POST', update: 'POST']",63],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928],["static allowedMethods = [delete:'POST', save:'POST', update:'POST']",44],["static Map allowedMethods = [delete: 'POST', save: 'POST', update: 'POST']",33],["static allowedMethods = [create: ['GET', 'POST'], edit: ['GET', 'POST'], delete: 'POST']",33],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"DELETE\"]",29],["static allowedMethods = [save: 'POST', update: 'PUT', delete: 'DELETE']",25],["def static allowedMethods = [",21],["static allowedMethods = [",98],["static allowedMethods = [save: \"POST\", update: \"PUT\", delete: \"DELETE\"]",866]],"useCount":2297},{"word":"amazonaws","context":[["import com.amazonaws.services.ec2.AmazonEC2",165],["\"class\": \"com.amazonaws.services.ec2.model.Tag\",",265],["iconUrl: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png\",",365],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\",",220],["import com.amazonaws.services.autoscaling.model.AutoScalingGroup",217],["import com.amazonaws.AmazonServiceException",183],["import com.amazonaws.auth.AWSCredentialsProvider",115],["\"class\": \"com.amazonaws.services.ec2.model.Volume\",",126],["iconX3Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",160],["import com.amazonaws.auth.BasicAWSCredentials",166]],"useCount":7228},{"word":"an","context":[["// DroidMate, an automated execution generator for Android apps.",407],["* LensKit, an open source recommender systems toolkit.",327],["*  Nimble, an extensive application base for Grails",133],["*       Contributor provides its Contributions) on an \"AS IS\" BASIS,",98],["*           or as an addendum to the NOTICE text from the Work, provided",98],["*       (an example is provided in the Appendix below).",98],["when:\"The save action is executed with an invalid instance\"",658],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["void \"Test the save action correctly persists an instance\"() {",744]],"useCount":8876},{"word":"and","context":[["* documentation and/or other materials provided with the distribution.",673],["and:",10269],["* Redistribution and use in source and binary forms, with or without",1343],["* Redistribution and use in source and binary forms, with or without",1343],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291],["and {",714],["// event.application, event.manager, event.ctx, and event.plugin.",392],["* which accompanies this distribution, and is available at",548],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],[".and()",694]],"useCount":45106},{"word":"android","context":[["import com.android.build.gradle.integration.common.fixture.GradleTestProject",195],["project.android {",183],["project.apply plugin: 'com.android.application'",175],["import android.os.Bundle",159],["import android.view.View",151],["import android.content.Context",142],["import com.android.build.gradle.AppPlugin",121],["android {",116],["import android.app.Activity",102],["import com.android.builder.model.AndroidProject",104]],"useCount":4926},{"word":"annotation","context":[["import org.springframework.context.annotation.Configuration",1262],["import org.springframework.context.annotation.Bean",942],["import org.springframework.web.bind.annotation.RequestMapping",802],["import grails.plugin.springsecurity.annotation.Secured",788],["import org.springframework.beans.factory.annotation.Value",596],["import org.springframework.beans.factory.annotation.Autowired",4308],["import org.springframework.web.bind.annotation.RestController",514],["import org.springframework.web.bind.annotation.RequestMethod",516],["import java.lang.annotation.Retention",586],["import java.lang.annotation.RetentionPolicy",534]],"useCount":25299},{"word":"annotations","context":[["*       editorial revisions, annotations, elaborations, or other modifications",98],["import test.groovy.platformservices.spock.custom.annotations.Test",140],["import net.sourceforge.jfacets.annotations.FacetKey",138],["import com.manydesigns.portofino.buttons.annotations.*",84],["import org.jetbrains.annotations.Nullable",213],["import org.testng.annotations.BeforeMethod",236],["import org.jetbrains.annotations.NotNull",426],["import org.testng.annotations.Test",557],["import org.testng.annotations.AfterMethod",120],["import com.google.common.annotations.VisibleForTesting",104]],"useCount":4556},{"word":"anrisoftware","context":[["import static com.anrisoftware.globalpom.utils.TestUtils.*",408],["import com.anrisoftware.propertiesutils.ContextProperties",179],["import com.anrisoftware.sscontrol.httpd.domain.Domain",128],["import com.anrisoftware.resources.templates.api.TemplateResource",94],["import com.anrisoftware.resources.templates.api.TemplatesFactory",82],["import com.anrisoftware.sscontrol.httpd.webservice.WebService",73],["import com.anrisoftware.sscontrol.testutils.resources.ResourcesUtils",68],["import com.anrisoftware.globalpom.utils.TestUtils",70],["import com.anrisoftware.sscontrol.core.service.LinuxScript",69],["import com.anrisoftware.globalpom.utils.TestFrameUtil",60]],"useCount":2315},{"word":"ant","context":[["@RequiresPlugin(id = 'ant')",68],["import org.apache.tools.ant.Task",39],["import org.apache.tools.ant.BuildException",74],["// use 'ant' to access a global instance of AntBuilder",79],["import org.apache.tools.ant.Project",59],["ant.sequential {",60],["def ant = new AntBuilder()",303],["(1.._) * jobManagement.requirePlugin('ant')",60],["import org.apache.tools.ant.taskdefs.condition.Os",113],["//    ant.mkdir(dir:\"${basedir}/grails-app/jobs\")",64]],"useCount":3134},{"word":"any","context":[["* additional information or have any questions.",768],["} catch (any) {",106],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673],["*           excluding those notices that do not pertain to any part of",98],["// TODO Implement code that is executed when any artefact that this plugin is",380],["* @throws NullPointerException if any parameter is {@code null}",328],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",123],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.127\" }",112],["ack.successes.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",107]],"useCount":9182},{"word":"apache","context":[["import org.apache.commons.logging.LogFactory",1085],["import org.apache.log4j.Logger",981],["import org.apache.commons.lang.StringUtils",784],["import org.apache.commons.io.FileUtils",782],["import org.apache.commons.logging.Log",733],["import org.apache.commons.lang.builder.HashCodeBuilder",587],["import org.apache.commons.io.IOUtils",349],["import org.apache.commons.io.FilenameUtils",325],["import org.apache.shiro.SecurityUtils",325],["import static org.apache.commons.io.FileUtils.*",273]],"useCount":23515},{"word":"api","context":[["import org.gradle.api.Task",1245],["import org.gradle.api.GradleException",1197],["import org.gradle.api.tasks.Input",824],["import org.gradle.api.file.FileCollection",657],["import org.gradle.api.Plugin",2065],["import org.gradle.api.tasks.TaskAction",2252],["import org.gradle.api.Project",5797],["import org.gradle.api.artifacts.Configuration",635],["import org.gradle.api.logging.Logger",521],["import org.gradle.api.DefaultTask",1810]],"useCount":42379},{"word":"app","context":[["app:grailsApplication,",112],["import android.app.Activity",102],["// configure settings for the test-app JVM, uses the daemon by default",589],["package app",82],["app:grailsApplication",127],["1 * app.console.render { View view ->",150],["// configure settings for the run-app JVM",587],["\"grails-app/views/error.gsp\"",415],["package la.kosmos.app",229],["\"grails-app/views/error.gsp\",",119]],"useCount":7857},{"word":"appName","context":[["//                             \"file:${userHome}/.grails/${appName}-config.groovy\"]",627],["//grails.project.war.file = \"target/${appName}-${appVersion}.war\"",873],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["//                             \"classpath:${appName}-config.groovy\",",630],["//                             \"file:${userHome}/.grails/${appName}-config.properties\",",628],["// grails.config.locations = [ \"classpath:${appName}-config.properties\",",623],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["// if (System.properties[\"${appName}.config.location\"]) {",522],["grails.serverURL = \"http://localhost:8080/${appName}\"",200],["// if(System.properties[\"${appName}.config.location\"]) {",140]],"useCount":6405},{"word":"append","context":[["if (role) builder.append(role.id)",249],["if (user) builder.append(user.id)",249],["s.append(\"WHERE c.pathway_id= p.id and \");",112],["s.append(\"'\");",216],["append = true",145],["s.append(prefix + \"' || a.patient_ID as subject_id \");",112],["s.append(\" p.pathway_uid='\" + pathwayName + \"' and \");",112],["s.append(\"a.gene_symbol = c.gene_symbol and \");",112],["buf.append(\"</table>\");",97],["s.append(\",\");",93]],"useCount":11971},{"word":"application","context":[["atom: 'application/atom+xml',",294],["rss:           'application/rss+xml',",481],["atom:          'application/atom+xml',",480],["form:          'application/x-www-form-urlencoded',",480],["json:          ['application/json', 'text/json'],",462],["html:          ['text/html','application/xhtml+xml'],",459],["xml:           ['text/xml', 'application/xml']",450],["// event.application, event.manager, event.ctx, and event.plugin.",392],["hal:           ['application/hal+json','application/hal+xml'],",327],["hal:           ['application/hal+json','application/hal+xml'],",327]],"useCount":18389},{"word":"apply","context":[["void apply(Project project) {",1643],["// apply constraints here",692],["apply plugin: 'java'",669],["public void apply(Project project) {",204],["project.apply plugin: 'java'",181],["project.apply plugin: 'com.android.application'",175],["* @attr apply",141],["sut.apply(operationContext)",140],["project.apply plugin: org.openbakery.XcodePlugin",135],["plugin.apply(project)",132]],"useCount":9080},{"word":"architecture","context":[["assert architecture == 'x64'",149],["if (architecture == 'x64') {",103],["println(\"Unknown architecture: ${architecture}\");",239],["println(\"Unknown architecture: ${architecture}\");",239],["switch (architecture) {",298],["if (architecture != 'x64') {",304],["} // architecture",101],["setMachineAffinity(newJob, os, architecture)",96],["if (architecture == 'x64' || !isPR) {",92],["--testNativeBinDir=\\\"\\$(pwd)/clr/bin/obj/${osGroup}.${architecture}.${configuration}/tests\\\" \\\\",85]],"useCount":4984},{"word":"are","context":[["// use sorted map to be able to predict the order in which tag attributes are generated",140],["* are met:",707],["// resources that are excluded from plugin packaging",508],["// If unspecified, controllers are prototype scoped.",358],["// Valid values are:",217],["// resources that are included in plugin packaging",217],["// Valid values are: swing, javafx, swt, pivot, gtk",193],["* provided that the following conditions are met:",178],["*   following conditions are met:",141],["*       by such Contributor that are necessarily infringed by their",98]],"useCount":8979},{"word":"arg","context":[["* @param i  my arg",32],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340],["for (arg in args) {",35],["return arg",44],["for (Closure a : arg) {",52],["arg.delegate = target",110],["arg()",136],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340]],"useCount":2850},{"word":"args","context":[["static void main(String[] args) {",860],["public static void main(String[] args) {",988],["flash.args = [params.id]",652],["static main(args) {",363],["def methodMissing(String name, args) {",363],["static void main(args) {",270],["GrailsApp.run(Application, args)",223],["def options = cli.parse(args)",198],["* @param args",183],["controller.apiService.messageSource = mockWith(MessageSource) { getMessage { code, args, locale -> code } }",138]],"useCount":15746},{"word":"artifact","context":[["<artifactId>artifact-two</artifactId>",166],["import griffon.core.artifact.GriffonModel",52],["<artifactId>artifact-one</artifactId>",156],["import griffon.core.artifact.GriffonController",57],["class @artifact.name@ {",89],["@artifact.package@",72],["import griffon.core.artifact.GriffonView",69],["@artifact.package@class @artifact.name@ {",61],["@artifact.package@class @artifact.name@ {",61],["artifact {",66]],"useCount":2255},{"word":"artifactId","context":[["<artifactId>maven-compiler-plugin</artifactId>",63],["<artifactId>artifact-two</artifactId>",166],["<artifactId>artifact-two</artifactId>",166],["<artifactId>maven-compiler-plugin</artifactId>",63],["<artifactId>parent</artifactId>",76],["<artifactId>parent</artifactId>",76],["<artifactId>project</artifactId>",77],["<artifactId>artifact-one</artifactId>",156],["<artifactId>artifact-one</artifactId>",156],["<artifactId>project</artifactId>",77]],"useCount":2494},{"word":"artifacts","context":[["import org.gradle.api.artifacts.ResolvedArtifact",113],["import org.gradle.api.artifacts.ResolvedDependency",55],["artifacts {",57],["import org.gradle.api.artifacts.dsl.RepositoryHandler",58],["import org.gradle.api.artifacts.ConfigurationContainer",60],["import org.gradle.api.artifacts.ModuleVersionIdentifier",94],["artifacts[0].value() == 'include/*'",104],["import org.gradle.api.artifacts.Configuration",635],["import org.gradle.api.artifacts.Dependency",217],["import org.gradle.api.artifacts.ProjectDependency",124]],"useCount":3551},{"word":"as","context":[["* and other contributors as indicated by the @author tags.",260],["import org.springframework.security.core.context.SecurityContextHolder as SCH",226],["] as EventSubscriber",178],["render([success: true] as JSON)",211],["build(this as DslFactory)",347],["// The event is the same as for 'onChange'.",404],["render result as JSON",539],["descr:        test as-set",211],["] as Set",204],["render results as JSON",189]],"useCount":29335},{"word":"asgard","context":[["import com.netflix.asgard.model.AutoScalingGroupData",55],["package com.netflix.asgard",634],["package com.netflix.asgard.model",124],["import com.netflix.asgard.mock.Mocks",88],["import com.netflix.asgard.model.Subnets",62],["import com.netflix.asgard.cache.CacheInitializer",61],["import com.netflix.asgard.model.InstanceTypeData",56],["package com.netflix.asgard.mock",55],["import com.netflix.asgard.model.ApplicationInstance",49],["import com.netflix.asgard.UserContext",65]],"useCount":2586},{"word":"assert","context":[["assert (os == 'Windows_NT') || (os in Constants.crossList)",1423],["assert true",741],["assert lookup",824],["assert params != null",1177],["assert 200 == result.code",1284],["assert !lookup",531],["assert controller.flash.message != null",377],["assert rule.priority == 2",352],["assert false",2346],["assert flash.message != null",2293]],"useCount":63177},{"word":"assertEquals","context":[["assertEquals(1, dtos.length)",170],["assertEquals(1, resp.data.size())",181],["assertEquals(3, cube.getCellMap().size())",171],["import static org.junit.Assert.assertEquals",1366],["assertEquals(200, response.status)",1240],["assertEquals(200, resp.status)",1107],["assertEquals(",508],["assertEquals(201, response.status)",498],["assertEquals(400, exception.response.status)",286],["assertEquals 'testProject', project",246]],"useCount":30128},{"word":"assertErrors","context":[["ack.summary.assertErrors(1, 1, 0, 0)",1475],["ack.summary.assertErrors(1, 0, 1, 0)",223],["ack.summary.assertErrors(1, 0, 0, 1)",117],["ack2.summary.assertErrors(0, 0, 0, 0)",15],["ack.summary.assertErrors(0, 0, 0, 0)",2163]],"useCount":3993},{"word":"assertFalse","context":[["assertFalse(ret == null);",171],["assertFalse( \"Group scaling required\", group.scalingRequired )",84],["Assert.assertFalse(immutable.equals(bo))",94],["Assert.assertFalse(bo.equals(immutable))",96],["assertFalse file.exists()",102],["assertFalse(execution.errors.hasErrors())",132],["import static org.junit.Assert.assertFalse",358],["assertFalse succeeded",45],["assertFalse dataFile.exists()",45],["assertFalse(command.validate())",62]],"useCount":3090},{"word":"assertNotNull","context":[["assertNotNull(ref.resolve());",215],["assertNotNull se.id",259],["assertNotNull xmlstr",222],["assertNotNull jobs",267],["assertNotNull(ref.resolve())",268],["assertNotNull(execution)",172],["assertNotNull doc",276],["import static org.junit.Assert.assertNotNull",492],["assertNotNull result",161],["assertNotNull(execution.errors)",156]],"useCount":9927},{"word":"assertNull","context":[["assertNull sec.response.redirectedUrl",46],["assertNull res.@'$list'",47],["assertNull result.error",72],["assertNull(NCubeManager.getCube(branch1, \"TestAge\"))",66],["assertNull(ref.resolve());",101],["assertNull(myFixture.lookupElements);",45],["assertNull(getLookup());",43],["assertNull(ref.resolve())",76],["import static org.junit.Assert.assertNull",184],["assertNull(NCubeManager.getCube(branch1, \"TestBranch\"))",113]],"useCount":2244},{"word":"assertScript","context":[["assertScript '''import groovy.transform.stc.ClosureParams",26],["assertScript('''",48],["assertScript '''import groovy.transform.CompileStatic",92],["assertScript '''",6625],["assertScript '''\\",37],["assertScript '''import org.codehaus.groovy.transform.stc.ExtensionMethodNode",23],["assertScript('''\\",24],["assertScript '''import groovy.transform.ASTTest",25],["assertScript '''interface Upper { String getName() }",30],["assertScript \"\"\"",1772]],"useCount":8889},{"word":"assertSuccess","context":[["assertSuccess pi",23],["ack.summary.assertSuccess(2, 0, 2, 0, 0)",36],["ack.summary.assertSuccess(0, 0, 0, 0, 0)",1788],["ack.summary.assertSuccess(1, 1, 0, 0, 0)",1250],["ack.summary.assertSuccess(1, 0, 1, 0, 0)",484],["ack.summary.assertSuccess(2, 1, 1, 0, 0)",37],["ack.summary.assertSuccess(2, 2, 0, 0, 0)",58],["ack.summary.assertSuccess(3, 3, 0, 0, 0)",17],["ack.summary.assertSuccess(1, 0, 0, 0, 1)",69],["ack.summary.assertSuccess(1, 0, 0, 1, 0)",196]],"useCount":3974},{"word":"assertThat","context":[["assertThat inbox.getAll().size(), is(0)",78],["assertThat itemProvider.getAll().size(), is(0)",81],["import static org.junit.Assert.assertThat",499],["import static org.hamcrest.MatcherAssert.assertThat",387],["assertThat allDiscoveryResults.size(), is(0)",121],["import static org.assertj.core.api.Assertions.assertThat",117],["assertThat text, is(notNullValue())",116],["waitForAssert {assertThat receivedEvent, not(null)}",100],["assertThat(",87],["assertThat itemRegistry.getItems().size(), is(0)",83]],"useCount":9306},{"word":"assertTrue","context":[["assertTrue(resolved instanceof GrGdkMethod);",111],["assertTrue(response.data.contains([",110],["import static org.junit.Assert.assertTrue",1009],["assertTrue(resolved instanceof PsiMethod);",392],["assertTrue xmlstr instanceof String",222],["assertTrue(resolved instanceof GrMethod);",176],["assertTrue output.contains(",165],["assertTrue file.exists()",146],["assertTrue(obj instanceof ScheduledExecution)",127],["assertTrue(scheduledExecution instanceof ScheduledExecution)",112]],"useCount":10413},{"word":"asset","context":[["//compile \":less-asset-pipeline:1.5.3\"",71],["//compile \":sass-asset-pipeline:1.9.0\"",199],["//compile \":coffee-asset-pipeline:1.8.0\"",200],["//compile \":less-asset-pipeline:1.10.0\"",198],["compile \":asset-pipeline:1.9.9\"",110],["// An alternative to the default resources plugin is the asset-pipeline plugin",82],["//compile \":coffee-asset-pipeline:1.5.0\"",82],["//compile \":handlebars-asset-pipeline:1.3.0.1\"",71],["// Uncomment these to enable additional asset-pipeline capabilities",334],["//compile \":handlebars-asset-pipeline:1.3.0.3\"",245]],"useCount":2871},{"word":"ast","context":[["import org.codehaus.groovy.ast.stmt.BlockStatement",233],["import org.codehaus.groovy.ast.stmt.Statement",165],["import org.codehaus.groovy.ast.stmt.ExpressionStatement",172],["import org.codehaus.groovy.ast.*",177],["import org.codehaus.groovy.ast.ClassHelper",190],["import org.codehaus.groovy.ast.expr.ConstantExpression",204],["import org.codehaus.groovy.ast.expr.MethodCallExpression",234],["import org.codehaus.groovy.ast.ASTNode",244],["import org.codehaus.groovy.ast.ClassNode",502],["import org.codehaus.groovy.ast.MethodNode",287]],"useCount":7160},{"word":"at","context":[["at AdminPage",575],["at LoginPage",630],["waitFor { at ConceptEditor }",662],["* which accompanies this distribution, and is available at",548],["// plugins needed at runtime but not for compilation",458],["waitFor { at ProjectHomePage }",691],["waitFor { at HomePage }",1532],["static at = {",449],["// escapes all not-encoded output at final stage of outputting",443],["* Contact: \tmlist'at'health'.'sdu'.'dk",313]],"useCount":17960},{"word":"attr","context":[["* @attr mold",138],["* @attr stubonly",138],["* @attr draggable",137],["* @attr visible",138],["* @attr id",178],["* @attr width",158],["* @attr apply",141],["* @attr left",140],["* @attr top",140],["* @attr height",148]],"useCount":6865},{"word":"attribute","context":[["third.configs[0].attribute('class') == 'java.util.Collections$EmptyList'",86],["acmeScriptSourceNode.attribute('class') == 'hudson.plugins.groovy.StringScriptSource'",82],["condition[0].attribute('class') == 'org.jenkins_ci.plugins.run_condition.core.AlwaysRun'",69],["configs[0].attribute('class') == 'java.util.Collections$EmptyList'",68],["// configure passing transaction's read-only attribute to Hibernate session, queries and criterias",277],["import java.nio.file.attribute.BasicFileAttributes",63],["step.runner[0].attribute('class') == 'org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail'",59],["runner[0].attribute('class') == 'org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail'",95],["context.scmNodes[0].browser[0].attribute('class') == 'hudson.plugins.git.browser.GithubWeb'",104],["condition[0].attribute('class') == 'org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition'",127]],"useCount":4040},{"word":"attributes","context":[["// process remaining attributes",95],["* @param attributes to match",96],["// TODO: subscribe to attributes, devices, locations, etc.",115],["Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes) {",127],["String instanceValue = attributes.remove('value')",134],["public Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes) {",120],["instance = super.newInstance(builder, name, value, attributes)",268],["// parse events into attributes",193],["attributes.put('value', instanceValue)",134],["// use sorted map to be able to predict the order in which tag attributes are generated",140]],"useCount":5266},{"word":"attrs","context":[["attrs : [\"Value\"] as String[],",54],["linkTagAttrs.controller = attrs.controller",48],["if(Environment.current == Environment.DEVELOPMENT && attrs.debug){",50],["def id = attrs.id ?: name",51],["attrs,",83],["def value = attrs.remove('value')",77],["tag.call(attrs)",74],["attrs.each { k, v ->",67],["def value = attrs.value",62],["linkTagAttrs.id = attrs.id",51]],"useCount":4854},{"word":"aut","context":[["aut-num:        AS123",77],["queryObject(\"-r -T aut-num AS123\", \"aut-num\", \"AS123\")",109],["queryObjectNotFound(\"-r -T aut-num AS123\", \"aut-num\", \"AS123\")",49],["queryObject(\"-r -T aut-num AS123\", \"aut-num\", \"AS123\")",109],["aut-num:        AS250",58],["queryObject(\"-rBT aut-num AS123\", \"aut-num\", \"AS123\")",69],["queryObject(\"-rBT aut-num AS123\", \"aut-num\", \"AS123\")",69],["queryObject(\"-r -T aut-num AS10000\", \"aut-num\", \"AS10000\")",70],["queryObject(\"-r -T aut-num AS10000\", \"aut-num\", \"AS10000\")",70],["aut-num:        AS400",70]],"useCount":2571},{"word":"auth","context":[["* Default action; redirects to 'defaultTargetUrl' if logged in, /login/auth otherwise.",129],["* Callback after a failed login. Redirects to the auth page with a warning message.",130],["auth:   MD5-PW \\$1\\$fU9ZMQN9\\$QQtm3kRqZXWAuLpeOiLN7. # update",132],["def auth = {",117],["render view: 'auth', params: params,",137],["import com.amazonaws.auth.BasicAWSCredentials",166],["redirect action: 'auth', params: params",192],["String view = 'auth'",116],["protected void configure(AuthenticationManagerBuilder auth) throws Exception {",266],["auth",324]],"useCount":5013},{"word":"authentication","context":[["import org.springframework.security.authentication.DisabledException",153],["import org.springframework.security.authentication.LockedException",150],["import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",175],["authenticationTrustResolver.isRememberMe(SCH.context?.authentication)) {",121],["model: [hasCookie: authenticationTrustResolver.isRememberMe(SCH.context?.authentication),",121],["import org.springframework.security.authentication.AccountExpiredException",145],["import org.springframework.security.authentication.CredentialsExpiredException",142],["import org.springframework.security.authentication.UsernamePasswordAuthenticationToken",232],["import org.springframework.security.authentication.AuthenticationManager",184],["import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder",180]],"useCount":4326},{"word":"author","context":[["* @author <a href='mailto:burt@burtbeckwith.com'>Burt Beckwith</a>",1308],["* @author Andres Almiray",1721],["* @author Graeme Rocher",2037],["* @author Paolo Di Tommaso <paolo.ditommaso@gmail.com>",945],["* @author Erwin Mueller, erwin.mueller@deventm.org",849],["* @author Vyacheslav Rusakov",828],["* @author Chris Mair",785],["* @author Jared Erickson",782],["* @author Hamlet D'Arcy",628],["* @author peter",476]],"useCount":37805},{"word":"awt","context":[["import java.awt.Color",499],["import java.awt.BorderLayout",174],["import java.awt.event.ActionEvent",163],["import java.awt.event.KeyEvent",135],["import java.awt.event.ActionListener",120],["import java.awt.Point",114],["import java.awt.Component",185],["import java.awt.Dimension",204],["import java.awt.image.BufferedImage",371],["import java.awt.*",385]],"useCount":4590},{"word":"b","context":[["Integer a, b",79],["s.append(\"DE_subject_sample_mapping b \");",84],["private static final ZONE = \"us-central1-b\"",78],["b.with {",93],["return b",99],["type '\\b'",171],["reflexiveEquals(a, b, configuration[a.class])",152],["argString: '-a b -c d',",140],["def b = new B()",117],["*       (b) You must cause any modified files to carry prominent notices",98]],"useCount":10532},{"word":"bar","context":[["def bar",109],["void bar() {",114],["bar()",115],["'register', 'bar', 'Meta',",123],["bar {",125],["condition[0].arg2[0].value() == 'bar'",127],["bar(a)",180],["def bar(String s) {}",191],["stringsMatch('foo', 'bar', false)",218],["def bar() {",465]],"useCount":9936},{"word":"base","context":[["import com.google.common.base.Preconditions",110],["*  Nimble, an extensive application base for Grails",133],["import com.google.common.base.Function",166],["import com.ulcjava.base.application.event.ActionEvent",188],["import com.google.common.base.Optional",206],["import org.ofbiz.base.util.*;",237],["import com.ulcjava.base.application.ULCTableTree",130],["import com.google.common.base.Predicate",113],["import com.google.common.base.Strings",111],["import com.google.common.base.Charsets",106]],"useCount":6848},{"word":"basic","context":[["import com.hearthsim.card.basic.minion.BloodfenRaptor",55],["import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.Duration.DurationChoices;",96],["package org.codenarc.rule.basic",96],["// rulesets/basic.xml",87],["import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.EccP256CurvePoint.EccP256CurvePointChoices;",75],["import com.hearthsim.card.basic.minion.WarGolem",69],["package org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic",53],["'http-basic'()",69],["// Define the basic inner loop builds for PR and commit.  This is basically just the set",56],["import com.hearthsim.card.basic.spell.TheCoin",56]],"useCount":2611},{"word":"be","context":[["// config files can either be Java properties files or ConfigSlurper scripts",205],["// configuration for plugin testing - will not be included in the plugin zip",172],["// URL where documentation can be found",212],["// URL where source can be found",215],["*   along with this program. It can be found at the root of the project page.",313],["import be.cytomine.test.Infos",169],["import be.cytomine.project.Project",144],["// What URL patterns should be processed by the resources plugin",348],["* @return a reference to this, so the API can be used fluently",427],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495]],"useCount":15986},{"word":"bean","context":[["return bean",65],["bean",69],["bean.autowire = true",80],["bean.autowire = \"byName\"",91],["bean.lazyInit = true",112],["* @param name name of bean or provider",60],["def field = factory.create(bean, fieldName)",124],["// packages to include in Spring bean scanning",685],["bean.scope = \"prototype\"",51],["grails.spring.bean.packages = []",711]],"useCount":4484},{"word":"beans","context":[["import org.springframework.beans.factory.annotation.Value",596],["import org.springframework.beans.factory.annotation.Autowired",4308],["beans = {",374],["import org.springframework.beans.factory.InitializingBean",340],["import groovy.beans.Bindable",276],["bb.beans {",190],["import java.beans.PropertyEditor",176],["import java.beans.PropertyChangeListener",160],["import org.springframework.beans.factory.annotation.Qualifier",144],["beans {",128]],"useCount":9529},{"word":"before","context":[["before = \"ascending\"",143],["def before = '''\\",66],["if ( before.equals(\"ascending\") && after.equals(\"descending\") )",77],["def setup() { // called before each test",95],["String before = \"\"",135],["// The alert processing happens async, so give it a little time before failing...",61],["before = \"descending\"",143],["void before() {",183],["// TODO Implement additions to web.xml (optional), this event occurs before",323],["before = {",564]],"useCount":3288},{"word":"bin","context":[["//The bin folder where to find the generated scripts.",99],["#!/usr/bin/env groovy",366],["shell('''#!/bin/bash",192],["#!/usr/bin/groovy",182],["Utilities.addArchival(newJob, \"bin/Product/**\")",180],["#!/bin/bash",129],["--testNativeBinDir=\\\"\\$(pwd)/clr/bin/obj/${osGroup}.${architecture}.${configuration}/tests\\\" \\\\",85],["Utilities.addXUnitDotNETResults(newJob, 'bin/tests/**/testResults.xml')",86],["Utilities.addArchival(newJob, \"fx/bin/tests/**/testResults.xml\")",85],["batchFile(\"C:\\\\Packer\\\\Packer.exe .\\\\bin\\\\build.pack .\\\\bin\")",85]],"useCount":5289},{"word":"bind","context":[["import org.springframework.web.bind.annotation.RequestParam",164],["import org.springframework.web.bind.annotation.RequestMapping",802],["import org.springframework.web.bind.annotation.RequestMethod",516],["import org.springframework.web.bind.annotation.RestController",514],["import org.springframework.web.bind.annotation.PathVariable",319],["import javax.xml.bind.JAXBContext",215],["import org.springframework.web.bind.annotation.RequestBody",211],["import org.springframework.web.bind.annotation.ResponseStatus",148],["import javax.xml.bind.annotation.XmlAccessorType",148],["import javax.xml.bind.Unmarshaller",150]],"useCount":5933},{"word":"binding","context":[["import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder",90],["def binding = [",72],["import com.eucalyptus.binding.HttpEmbedded",72],["import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory",68],["result1 == binding.get()",66],["import com.eucalyptus.binding.HttpParameterMapping",92],["def binding = new Binding()",117],["import org.eclipse.smarthome.core.thing.binding.ThingHandler",123],["Binding binding = new Binding()",121],["@Category(org.openhab.binding.systeminfo.test.PlatformDependentTestsInterface.class)",182]],"useCount":3843},{"word":"blank","context":[["//blank threadcount",34],["name(blank:false)",36],["authority blank: false, unique: true",305],["username blank: false, unique: true",276],["name(blank: false)",38],["name blank: false",107],["name blank: false, unique: true",57],["name(nullable: false, blank: false)",50],["name nullable: false, blank: false",39],["password blank: false",297]],"useCount":2276},{"word":"block","context":[["descr:          ARIN ASN block",80],["queryObject(\"-r -T as-block AS0 - AS4294967295\", \"as-block\", \"AS0 - AS4294967295\")",78],["queryObject(\"-r -T as-block AS0 - AS4294967295\", \"as-block\", \"AS0 - AS4294967295\")",78],["block.isEmpty()",83],["queryObject(\"-rGBT as-block AS222 - AS333\", \"as-block\", \"AS222 - AS333\")",90],["block {",326],["<error descr=\"Ambiguous code block\">{",105],["queryObject(\"-rGBT as-block AS0 - AS4294967295\", \"as-block\", \"AS0 - AS4294967295\")",96],["queryObject(\"-rGBT as-block AS0 - AS4294967295\", \"as-block\", \"AS0 - AS4294967295\")",96],["queryObject(\"-rGBT as-block AS222 - AS333\", \"as-block\", \"AS222 - AS333\")",90]],"useCount":3343},{"word":"bo","context":[["import org.kuali.rice.krad.bo.PersistableBusinessObjectBase",174],["bo.versionNumber = im.versionNumber",93],["return bo;",87],["* @return the mutable bo",88],["* @param bo the mutable business object",94],["Assert.assertFalse(immutable.equals(bo))",94],["return bo",95],["bo.versionNumber = immutable.versionNumber",71],["Assert.assertFalse(bo.equals(immutable))",96],["if (bo == null) { return null }",117]],"useCount":2370},{"word":"body","context":[["body(",213],["body: \"\"\"\\",2451],["out << body()",653],["body {",564],["body: [",354],["</body>",351],["<body>",341],["body()",183],["body",157],["String body",98]],"useCount":11302},{"word":"boolean","context":[["boolean equals(o) {",370],["boolean enabled = true",282],["boolean passwordExpired",316],["boolean accountExpired",319],["boolean condition() {",318],["boolean accountLocked",320],["boolean transactional = true",251],["boolean enabled",222],["boolean quickFix(){",212],["boolean equals(other) {",544]],"useCount":18901},{"word":"boot","context":[["import grails.boot.GrailsApp",317],["import org.springframework.boot.SpringApplication",386],["import grails.boot.config.GrailsAutoConfiguration",336],["import org.springframework.boot.test.SpringApplicationContextLoader",317],["import org.springframework.boot.autoconfigure.EnableAutoConfiguration",244],["import org.springframework.boot.autoconfigure.SpringBootApplication",238],["import org.springframework.boot.test.SpringApplicationConfiguration",167],["import org.springframework.boot.context.properties.ConfigurationProperties",155],["import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty",153],["import org.springframework.boot.test.IntegrationTest",117]],"useCount":3407},{"word":"br","context":[["*         <br>",218],["*         <br><br>",654],["<br/>",262],["*         <br/>",268],["br()",360],["*         <br><br>",654],["sponsorLogo = \"<br/>\"",167],["footer = \"<br/><br/>Made with Griffon (@griffon.version@)\"",151],["*         <br/><br/>",804],["*         <br/><br/>",804]],"useCount":6631},{"word":"branch","context":[["def branch = GithubBranchName",108],["// The input branch name (e.g. master)",97],["Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")",234],["//  create the branch (TestAge, TestBranch)",79],["branch,",76],["preloadCubes(head, \"test.branch.1.json\", \"test.branch.age.1.json\")",97],["preloadCubes(head, \"test.branch.1.json\", \"test.branch.age.1.json\")",97],["branch(\"*/master\")",308],["// load cube with same name, but different structure in TEST branch",214],["preloadCubes(BRANCH2, \"test.branch.1.json\")",91]],"useCount":5382},{"word":"break","context":[["if (entryCount > neededCount) break;",18],["default: break",16],["break outerloop",30],["// Have to break up the inserts so as not to exceed the java max method length",37],["if (order == 0) break",39],["//                break",41],["break // TCO",110],["break;",6649],["break",27887],["if (isEmpty) { outValue = null; break }",24]],"useCount":34994},{"word":"build","context":[["build(this as DslFactory)",347],[".build()",3444],["Project project = ProjectBuilder.builder().build()",711],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["public void build() {",356],[".build())",367],["project = ProjectBuilder.builder().build()",575],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522],["// plugins for the build system only",467],[".build();",437]],"useCount":33460},{"word":"buildFile","context":[["buildFile << '''",225],["buildFile << \"\"\"\\",176],["buildFile << APKBuildFile.populate(/",105],["File buildFile",76],["buildFile.text = \"\"\"",68],["buildFile << '''\\",50],["buildFile << BUILD_GRADLE",49],["buildFile = testProjectDir.newFile('build.gradle')",47],["project.buildFile << \"\"\"",47],["buildFile << \"\"\"",2020]],"useCount":3622},{"word":"buildParameterNodes","context":[["context.buildParameterNodes['myParameterName'].name() == 'hudson.model.TextParameterDefinition'",45],["context.buildParameterNodes['myParameterName'].name.text() == 'myParameterName'",245],["context.buildParameterNodes != null",512],["context.buildParameterNodes.size() == 1",536],["context.buildParameterNodes['myParameterName'].name() == 'hudson.model.BooleanParameterDefinition'",45],["with(context.buildParameterNodes['myParameterName']) {",177],["context.buildParameterNodes['myParameterName'].description.text() == ''",141],["buildParameterNodes[parameterName] = definitionNode",57],["buildParameterNodes[parameterName] = NodeBuilder.newInstance().",55],["checkArgument(!buildParameterNodes.containsKey(parameterName), 'parameter $parameterName already defined')",49]],"useCount":3109},{"word":"builder","context":[["instance = super.newInstance(builder, name, value, attributes)",268],["if (user) builder.append(user.id)",249],["grails.json.legacy.builder = false",688],["Project project = ProjectBuilder.builder().build()",711],["def builder = new HashCodeBuilder()",441],["import org.apache.commons.lang.builder.HashCodeBuilder",587],["builder.toHashCode()",445],["project = ProjectBuilder.builder().build()",575],["if (role) builder.append(role.id)",249],["builder.add(\"3\", \"1\")",3150]],"useCount":24704},{"word":"but","context":[["*       to the Licensor or its representatives, including but not limited to",98],["// We run pal tests on all OS but generate mscorlib (and thus, nuget packages)",40],["// as Windows_NT but without the tests.",46],["// We generally only have a distinct set of default triggers but a bunch of on-demand ones.",47],["// plugins needed at runtime but not for compilation",458],["// load cube with same name, but different structure in TEST branch",214],["*       Licensor for the purpose of discussing and improving the Work, but",98],["// have cookie but the page is guarded with IS_AUTHENTICATED_FULLY",142],["* Login page for users with a remember-me cookie but accessing a IS_AUTHENTICATED_FULLY page.",138],["*       transformation or translation of a Source form, including but",98]],"useCount":2311},{"word":"by","context":[["mnt-by:  OWNER-MNT",332],["mnt-by:       RIPE-NCC-HM-MNT",1137],["mnt-by:       lir-MNT",347],["// What URL patterns should be processed by the resources plugin",348],["mnt-by:         LIR-MNT",368],["* Created by IntelliJ IDEA.",457],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["mnt-by:       LIR-MNT",1356],["mnt-by: TEST-MNT",549],["// configure settings for the test-app JVM, uses the daemon by default",589]],"useCount":21619},{"word":"c","context":[["admin-c: TEST-PN",477],["admin-c:     TP1-TEST",481],["tech-c: TEST-PN",387],["c.call()",290],["c()",227],["tech-c:         TP1-TEST",609],["admin-c:        TP1-TEST",620],["//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",703],["admin-c:      TP1-TEST",3457],["tech-c:       TP1-TEST",3512]],"useCount":24158},{"word":"cache","context":[["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory'",190],["compile ':cache:1.1.8'",191],["import com.netflix.spinnaker.cats.cache.CacheData",247],["cache.use_query_cache = false",510],["cache true",760],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["grails.hibernate.cache.queries = false",533],["cache.use_second_level_cache = true",609],["//grails.urlmapping.cache.maxsize = 1000",625]],"useCount":9824},{"word":"call","context":[["baseElement.call(",71],["tag.call(attrs)",74],["void visitMethodCallExpression(MethodCallExpression call) {",77],["tag.call(attributes)",81],["when: 'I call the interceptor'",84],["callable.call()",113],["registry.allServices.each { it.call() }",264],["c.call()",290],["closure.call()",307],["* @param handler Handler for the result of this call.",408]],"useCount":13363},{"word":"called","context":[["// called only for a 404 (not found) status code:",55],["assert obj.called",64],["def foo() { called = true }",64],["when: \"The delete action is called for a null instance\"",90],["when: \"Update is called for a domain instance that doesn't exist\"",91],["def setup() { // called before each test",95],["when:\"Update is called for a domain instance that doesn't exist\"",656],["called = true",97],["boolean called = false",172],["when:\"The delete action is called for a null instance\"",656]],"useCount":3818},{"word":"can","context":[["* @return a reference to this, so the API can be used fluently",427],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["// This script is a Gant script so you can use all special variables provided",90],["GETL is a set of libraries of pre-built classes and objects that can be used to solve problems unpacking,",108],["// For example you can create directory under project tree:",138],["// config files can either be Java properties files or ConfigSlurper scripts",205],["// URL where documentation can be found",212],["// URL where source can be found",215],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["*   along with this program. It can be found at the root of the project page.",313]],"useCount":5550},{"word":"capability","context":[["capability \"Sensor\"",483],["capability \"Refresh\"",428],["capability \"Switch\"",398],["capability \"Actuator\"",342],["capability \"Polling\"",285],["capability \"Configuration\"",240],["capability \"Battery\"",180],["capability \"Switch Level\"",166],["capability \"Temperature Measurement\"",162],["capability \"Relative Humidity Measurement\"",86]],"useCount":5254},{"word":"caret","context":[["{ <caret> }",207],["it<caret>",56],["print a<caret>a",61],["toString()<caret>;",64],["fo<caret>o()",67],["def ref = configureByText('new Fo<caret>o(2, 3)')",75],["myFixture.configureByText \"a.java\", \"class Foo {{ <caret> }}\"",90],["do<caret>Smth()",120],["new _a().do<caret>Smth()",135],["<caret>",937]],"useCount":11046},{"word":"case","context":[["case 'arm64':",308],["case 'x64':",308],["case 'pri1':",287],["case 2:",376],["case 1:",492],["case 'default':",281],["case 3:",275],["case 'pri1r2r':",256],["case 'ilrt':",251],["case 0:",249]],"useCount":20963},{"word":"catch","context":[["} catch (IOException e) {",781],["} catch (Throwable t) {",694],["catch (e) {",607],["catch (DataIntegrityViolationException e) {",683],["} catch(Exception e) {",647],["} catch(geb.waiting.WaitTimeoutException e) {",883],["} catch (Exception ex) {",902],["} catch (e) {",1392],["} catch (Exception e) {",5515],["catch (Exception e) {",1426]],"useCount":36868},{"word":"category","context":[["String category",66],["import com.android.build.gradle.integration.common.category.DeviceTests",49],["category: \"Green Living\",",74],["category: \"Safety & Security\",",115],["import org.jfree.data.category.DefaultCategoryDataset",57],["category: \"SmartThings Labs\",",116],["category: \"My Apps\",",280],["category: \"Convenience\",",348],["labels: [{category: 'val', name: 'val', value: 'val'}, {category: 'val', name: 'val', value: 'val'}],",44],["labels: [{category: 'val', name: 'val', value: 'val'}, {category: 'val', name: 'val', value: 'val'}],",44]],"useCount":2270},{"word":"certif","context":[["certif:",94],["certif:       MIID/DCCA2WgAwIBAgICAIQwDQYJKoZIhvcNAQEEBQAwcTELMAkGA1UEBhMCRVUx",67],["certif:       gZsGA1UdIwSBkzCBkIAUHpLUfvaBVfxXVCcT0kh9NJeH7ouhdaRzMHExCzAJBgNV",67],["certif:       BAIwADARBglghkgBhvhCAQEEBAMCBaAwCwYDVR0PBAQDAgXgMBoGCWCGSAGG+EIB",67],["certif:       BAYTAkVVMRAwDgYDVQQIEwdIb2xsYW5kMRAwDgYDVQQKEwduY2NERU1PMR0wGwYD",67],["certif:       -----BEGIN CERTIFICATE-----",82],["certif:       ZnR3YXJlIFBLSSBUZXN0aW5nMR8wHQYJKoZIhvcNAQkBFhBzb2Z0aWVzQHJpcGUu",77],["certif:       EDAOBgNVBAgTB0hvbGxhbmQxEDAOBgNVBAoTB25jY0RFTU8xHTAbBgNVBAMTFFNv",77],["certif:       c0ByaXBlLm5ldIIBADANBgkqhkiG9w0BAQQFAAOBgQCEve6deqF0nvHKFJ0QfEJS",67],["certif:       -----END CERTIFICATE-----",84]],"useCount":3332},{"word":"ch","context":[["import ch.qos.logback.core.rolling.RollingFileAppender",89],["import ch.qos.logback.classic.encoder.PatternLayoutEncoder",301],["import ch.qos.logback.core.ConsoleAppender",298],["import ch.qos.logback.classic.Level",100],["* @author <a href=\"mailto:herzog@raffael.ch\">Raffael Herzog</a>",92],["import static ch.qos.logback.classic.Level.*",83],["import static ch.qos.logback.classic.Level.DEBUG",82],["import static ch.qos.logback.classic.Level.INFO",75],["import ch.qos.logback.core.rolling.TimeBasedRollingPolicy",69],["package ch.acropyx",62]],"useCount":2387},{"word":"change","context":[["* To change this template use File | Settings | File Templates.",879],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["assertThat(change)",64],["* To change this template file, choose Tools | Templates",60],["assert change.checkStatus(database).status == ChangeStatus.Status.complete",60],["* To change this template, choose Tools | Templates",168],["import liquibase.change.Change",66],["//To change body of implemented methods use File | Settings | File Templates.",71],["return null  //To change body of implemented methods use File | Settings | File Templates.",86],["// Automatically generated. Make future change here.",292]],"useCount":4262},{"word":"changed","context":[["changed:      dbtest@ripe.net 20120101",111],["changed: ripe@test.net 20120505",115],["changed = true",118],["changed: denis@ripe.net 20121016",181],["changed: ripe@test.net 20091015",228],["changed:      dbtest@ripe.net 20130101",237],["changed:     dbtest@ripe.net",279],["changed:      dbtest@ripe.net",325],["changed:        noreply@ripe.net 20120101",339],["changed:      dbtest@ripe.net 20020101",955]],"useCount":4607},{"word":"check","context":[["then:\"check elements\"",63],["then: 'check if text is present'",54],["def 'call publishOverSsh with minimal configuration and check the default values'() {",55],["check {",74],["then: 'check if text is correct'",91],["then: 'check descending'",154],["then: 'check ascending'",154],["// test parameter check",84],["then: 'check if row count is in ascending'",54],["then: 'check if row count is in descending'",54]],"useCount":3683},{"word":"checkResult","context":[["checkResult();",235],["myFixture.checkResult('''\\",106],["myFixture.checkResult '''",401],["myFixture.checkResult \"\"\"\\",174],["TestRun.checkResult(buildResult, code, name)",67],["myFixture.checkResult \"\"\"",612],["checkResult()",1002],["myFixture.checkResult '''\\",44],["myFixture.checkResult(result)",54],["myFixture.checkResult(\"\"\"\\",54]],"useCount":3829},{"word":"children","context":[["children().size() == 9",355],["children().size() == 8",605],["children().size() == 3",1344],["children().size() == 5",340],["children().size() == 7",388],["children().size() == 6",527],["children().size() == 1",1889],["children().size() == 2",1428],["children().size() == 4",583],["children().size() == 12",541]],"useCount":15835},{"word":"chrom","context":[["// Organize the GeneWithSnp by chrom",54],["geneSnpMapByChrom.put(gene.chrom, genes);",54],["if (gene.chrom == null) {",54],["// Get the snp association and chrom mapping",54],["SnpProbeSortedDef probeDef = probeDefMap.get(chrom);",58],["// Get the compacted SNP data and insert them into the map, organized by chrom, and further ordered by chrom position",62],["for (String chrom : neededChroms) {",89],["String chrom = row.chrom;",81],["String chrom = row.chrom;",81],["// Get the compacted SNP data and insert them into the map, organized by chrom, and further ordered by chrom position",62]],"useCount":2479},{"word":"cl","context":[["def code = cl.rehydrate(that, this, this)",53],["cl()",413],["cl.resolveStrategy = DELEGATE_FIRST",43],["cl.resolveStrategy = Closure.DELEGATE_FIRST",189],["cl() as int",58],["cl.commandName == 'run-app'",43],["cl.delegate = new Delegate()",60],["cl.delegate = this",69],["cl.call()",70],["def cl = {",168]],"useCount":2502},{"word":"class","context":[["class Person {",1263],["@Test(expected=IllegalArgumentException.class)",1164],["class UrlMappings {",829],["class BootStrap {",741],["class Foo {",3502],["class A {",2722],["class MyClass {",1438],["class Test {",1433],["grails.project.test.class.dir = \"target/test-classes\"",1328],["grails.project.class.dir = \"target/classes\"",1327]],"useCount":72060},{"word":"className","context":[["String className",75],["col = fieldSet.findElement(By.className('col-l'))",47],["def ${propertyName} = ${className}.get(id)",50],["def classNameLower = WordUtils.uncapitalize( className )",54],["def dataSheet = driver.findElement(By.className('data-sheet'))",54],["def className",56],["class ${className}Controller {",64],["col = fieldSet.findElement(By.className('col-r'))",75],["def ${propertyName} = new ${className}(params)",89],["def ${propertyName} = ${className}.get(params.id)",95]],"useCount":2478},{"word":"classes","context":[["grails.project.test.class.dir = 'target/test-classes'",49],["@ContextConfiguration(classes = [Application], loader = SpringApplicationContextLoader)",73],["grails.project.class.dir = \"target/classes\"",1327],["grails.project.test.class.dir = \"target/test-classes\"",1328],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["// TODO Implement registering dynamic methods to classes (optional)",359],["grails.project.class.dir = 'target/classes'",50],["resources 'test-classes/'",48],["GETL is a set of libraries of pre-built classes and objects that can be used to solve problems unpacking,",108],["the work with Java classes.",108]],"useCount":5099},{"word":"classpath","context":[["classpath('/foo/acme.jar')",128],["systemGroovyNode.classpath.size() == 1",46],["systemGroovyNode.classpath[0].value() == ''",46],["FileCollection classpath",57],["classpath {",145],["rm -f $WORKSPACE/.classpath $WORKSPACE/.project",180],["// in the classpath in ConfigSlurper format",494],["// grails.config.locations = [ \"classpath:${appName}-config.properties\",",623],["//                             \"classpath:${appName}-config.groovy\",",630],["classpath('/foo/test.jar')",128]],"useCount":3517},{"word":"clazz","context":[["this.clazz = clazz",41],["assertNotNull(clazz)",120],["* @param clazz",85],["Class clazz = new GroovyClassLoader().parseClass('''",80],["assert builder.triggers[triggerName]?.clazz == CustomTriggerFactoryBean",40],["this.clazz = clazz",41],["Class clazz = new GroovyClassLoader().parseClass(\"\"\"",70],["assertEquals(\"C\", clazz.qualifiedName)",55],["PsiClass clazz = method.containingClass",66],["clazz.newInstance().run()",69]],"useCount":2864},{"word":"cleanup","context":[["@RequiresPlugin(id = 'ws-cleanup')",47],["// TODO: Refactor and cleanup code so Codenarc check passes",52],["def cleanup()",61],["cleanup: \"delete created project\"",77],["cleanup: \"Delete the concept\"",83],["1 * jobManagement.requirePlugin('ws-cleanup')",96],["cleanup: \"Delete the project\"",113],["void cleanup() {",284],["def cleanup() {",4815],["cleanup:",2626]],"useCount":9156},{"word":"clear","context":[["sessionFactory.currentSession.clear()",101],["session.clear()",704],["cache.clear()",43],["grailsApplication.config.clear()",176],["output.clear()",99],["loompService.clear()",73],["coord.clear()",91],["calendar.clear()",97],["void clear() {",98],["clear()",98]],"useCount":2817},{"word":"cli","context":[["def opt = cli.parse(args)",89],["def cli = new CliBuilder()",82],["import org.crsh.cli.Command",76],["import org.crsh.cli.Usage",75],["cli.with {",190],["def options = cli.parse(args)",198],["cli.usage()",382],["cli.close();",62],["package nextflow.cli",85],["def cli = new CLI(j.URL)",58]],"useCount":3008},{"word":"click","context":[["when: \"click redo\"",105],["when: \"click undo\"",108],["when: 'click name'",112],["when: 'click the Admin link (if needed)'",116],["page.advanced.click()",147],["when: 'click close button'",162],["when: 'click Display Preference button'",166],["when:\"click undo\"",180],["when:\"click redo\"",200],["projectsHomePage.manageCollaboratorClose.click()",126]],"useCount":6267},{"word":"client","context":[["import org.apache.http.client.methods.HttpGet",141],["import org.apache.http.impl.client.DefaultHttpClient",104],["import org.elasticsearch.client.Client",107],["client",111],["import grails.plugins.rest.client.RestBuilder",114],["\":rest-client-builder:1.0.3\") {",121],["import org.apache.http.client.methods.HttpPost",128],["import org.apache.http.client.HttpClient",136],["import retrofit.client.Response",159],["import org.springframework.web.client.RestTemplate",196]],"useCount":10143},{"word":"close","context":[["connection.close()",129],["stream.close()",135],["void close() throws IOException {",139],["reader.close()",159],["db.close()",148],["when: 'click close button'",162],["sql.close()",563],["writer.close()",310],["out.close()",268],["void close() {",243]],"useCount":7976},{"word":"closure","context":[["* @param closure",226],["closure()",609],["ContextHelper.executeInContext(closure, context)",1019],["closure.call()",307],["closure.resolveStrategy = Closure.DELEGATE_FIRST",266],["* @param configure The configuration closure",244],["closure.delegate = this",165],["if (closure) {",145],["def closure = {",123],["}// End of closure",69]],"useCount":8691},{"word":"clouddriver","context":[["import com.netflix.spinnaker.clouddriver.data.task.TaskRepository",330],["import com.netflix.spinnaker.clouddriver.security.AccountCredentialsProvider",324],["import com.netflix.spinnaker.clouddriver.aws.security.AmazonClientProvider",196],["import com.netflix.spinnaker.clouddriver.aws.security.NetflixAmazonCredentials",158],["import com.netflix.spinnaker.clouddriver.orchestration.AtomicOperation",285],["import com.netflix.spinnaker.clouddriver.orchestration.AtomicOperations",238],["import com.netflix.spinnaker.clouddriver.google.security.GoogleNamedAccountCredentials",205],["import com.netflix.spinnaker.orca.clouddriver.KatoService",158],["import com.netflix.spinnaker.clouddriver.security.AbstractAtomicOperationsCredentialsSupport",142],["import com.netflix.spinnaker.clouddriver.data.task.Task",349]],"useCount":10159},{"word":"cluster","context":[["cluster.restorestatus.isDisplayed()",36],["String cluster",50],["waitFor(waitTime) { page.cluster.resumebutton.isDisplayed() }",43],["cluster",39],["cluster.restorebutton.click()",36],["def cluster = zigbee.parse(description)",34],["waitFor(waitTime) { page.cluster.pausebutton.isDisplayed() }",31],["cluster('cluster')",31],["cluster('cluster')",31],["boolean clusterMode =  Boolean.valueOf( System.getProperty(\"cluster-mode\", false.toString()) );",31]],"useCount":2447},{"word":"cmd","context":[["result = zwaveEvent(cmd)",79],["def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {",95],["cmd.validate()",130],["def zwaveEvent(physicalgraph.zwave.Command cmd) {",160],["if (cmd.hasErrors()) {",160],["cmd.execute(options, new StringReader(\"\"), new StringWriter())",88],["cmd",85],["def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {",83],["if (cmd) {",187],["map.value = cmd.batteryLevel",75]],"useCount":7784},{"word":"co","context":[["@Grab(\"nz.co.skepticalhumorist:pdf-builder:latest.release\")",135],["import uk.co.mdc.pages.authentication.LoginPage",44],["import co.freeside.betamax.Recorder",44],["package co.freeside.betamax.tape",47],["package za.co.nico.cms",71],["* @author Anthony Campbell (anthonycampbell.co.uk)",72],["package nz.co.skepticalhumorist.pdfbuilder",74],["import uk.co.cacoethes.util.NameType",53],["import nz.co.skepticalhumorist.pdfbuilder.PDFBuilder",135],["package co.dedalus.tiempos",87]],"useCount":2407},{"word":"code","context":[["String code",351],["* @throws NullPointerException if any parameter is {@code null}",328],["// TODO Implement code that is executed when any artefact that this plugin is",380],["// TODO Implement code that is executed when the project configuration changes.",398],["assert 404 == result.code",275],["// TODO Implement code that is executed when the application shuts down (optional)",264],["// Place your Spring DSL code here",232],["* @return Never {@code null}.",416],["assert 200 == result.code",1284],["// Online location of the plugin's browseable source code.",295]],"useCount":19778},{"word":"codec","context":[["def codec = new JsonCodec()",28],["import org.jboss.netty.handler.codec.http.HttpVersion",30],["grails.views.default.codec=\"none\" // none, html, base64",167],["import org.jboss.netty.handler.codec.http.HttpResponseStatus",37],["import org.apache.commons.codec.digest.DigestUtils",65],["import org.apache.commons.codec.binary.Base64",94],["grails.views.default.codec = \"none\" // none, html, base64",313],["// Legacy setting for codec used to encode data with ${}",359],["grails.views.default.codec = \"html\"",366],["// The default codec used to encode data with ${}",401]],"useCount":2357},{"word":"codehaus","context":[["//mavenRepo \"http://repository.codehaus.org\"",1027],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904],["import org.codehaus.groovy.grails.commons.GrailsApplication",712],["'org.codehaus.groovy.grails.commons',            // core / classloading",511],["'org.codehaus.groovy.grails.plugins',            // plugins",511],["'org.codehaus.groovy.grails.web.sitemesh',       // layouts",510],["'org.codehaus.groovy.grails.web.mapping',        // URL mapping",510],["'org.codehaus.groovy.grails.web.pages',          // GSP",509],["'org.codehaus.groovy.grails.orm.hibernate',      // hibernate integration",505],["import org.codehaus.groovy.ast.ClassNode",502]],"useCount":33592},{"word":"codenarc","context":[["import org.codenarc.rule.AbstractRuleTestCase",482],["import org.codenarc.test.AbstractTestCase",76],["codenarc.reports = {",77],["package org.codenarc.rule.groovyism",95],["package org.codenarc.rule.basic",96],["package org.codenarc.rule.unnecessary",114],["import org.codenarc.util.AstUtil",182],["import org.codenarc.rule.AbstractAstVisitor",196],["import org.codenarc.rule.AbstractAstVisitorRule",338],["import org.codenarc.rule.Rule",519]],"useCount":3576},{"word":"collect","context":[["import com.google.common.collect.Lists",372],["import com.google.common.collect.Multimap",112],["import com.google.common.collect.Sets",231],["import com.google.common.collect.Maps",171],["import com.google.common.collect.ImmutableMap",145],["}.collect {",141],["allNodes = path.depthFirst().collect{ it }",112],["import com.google.common.collect.Iterables",116],["import com.google.common.collect.ImmutableSet",140],["import com.google.common.collect.ImmutableList",113]],"useCount":4558},{"word":"color","context":[["[value: 44, color: \"#1e9cbb\"],",167],["[value: 74, color: \"#44b621\"],",174],["[value: 84, color: \"#f1d801\"],",167],["[value: 96, color: \"#bc2323\"]",152],["[value: 59, color: \"#90d2a7\"],",167],["publisherNode.threshold[0].color[0].value() == 'BLUE'",50],["String color",53],["color[0].value() == colorValue",65],["[value: 31, color: \"#153591\"],",140],["[value: 95, color: \"#d04e00\"],",149]],"useCount":2500},{"word":"column","context":[["column(name: \"version\", valueNumeric: \"0\")",628],["column(name: \"visible\", valueBoolean: \"true\")",360],["column(autoIncrement: \"true\", name: \"id\", type: \"bigint\") {",323],["column(name: \"version\", type: \"bigint\") {",316],["password column: '`password`'",294],["column(name: \"id\", type: \"int8\") {",134],["column {",129],["column(name: \"modified_date\", type: '${datetime.type}')",96],["column(name: \"version\", type: \"int8\") {",121],["column(name: \"created_date\", type: '${datetime.type}')",96]],"useCount":9322},{"word":"columns","context":[["r = \"SELECT \" + columns + \" FROM (\" + s2 +",74],["r = \"SELECT \" + columns + \" FROM (\" +",74],["return columns",78],["root.columns.size() == 1",110],["view.columns {",126],["r = \"SELECT \" + columns + \" FROM (\" + s1 +",74],["columns {",591],["root.columns[0].value().size() == 1",66],["\"columns\": [",45],["*  Compose a list of columns used by Heatmap and then trim average value",43]],"useCount":2550},{"word":"com","context":[["package com.netflix.asgard",634],["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["import com.netflix.spinnaker.orca.ExecutionStatus",484],["// TODO: grails.serverURL = \"http://www.changeme.com\"",466],["* @author John DeRegnaucourt (jdereg@gmail.com)",454],["* @author Paolo Di Tommaso <paolo.ditommaso@gmail.com>",945],["import com.netflix.spinnaker.orca.pipeline.model.Stage",677],["import com.fasterxml.jackson.databind.ObjectMapper",1343],["* @author <a href='mailto:burt@burtbeckwith.com'>Burt Beckwith</a>",1308],["//mavenRepo \"http://repository.jboss.com/maven2/\"",1030]],"useCount":132199},{"word":"command","context":[["import com.intellij.openapi.command.WriteCommandAction",131],["command.validate()",105],["<sequence><command><exec>test</exec></command></sequence>",207],["<command>",209],["</command>",209],["<sequence><command><exec>test</exec></command></sequence>",207],["command.execute()",143],["execCommand[0].value() == 'command'",110],["fwkControl.demand.getCommand { project, type, command, framework ->",136],["execCommand('command')",111]],"useCount":13443},{"word":"commands","context":[["workflow: new Workflow(keepgoing: true, commands: [new JobExec(",82],["commands: [",76],["assertEquals 1, wf.commands.size()",76],["def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {",83],["def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {",95],["commands:",135],["package org.codehaus.groovy.tools.shell.commands",141],["workflow: new Workflow(commands: [new CommandExec(adhocExecution: true, adhocRemoteString: 'a remote string')]).save()",160],["// handle commands",166],["// commands",65]],"useCount":4889},{"word":"common","context":[["import com.google.common.collect.ImmutableMap",145],["import com.google.common.collect.Maps",171],["import com.android.build.gradle.integration.common.fixture.GradleTestProject",195],["import com.google.common.base.Optional",206],["import com.google.common.collect.Sets",231],["import com.google.common.io.Files",236],["import net.ripe.db.whois.common.IntegrationTest",154],["import com.google.common.base.Function",166],["import com.google.common.collect.Lists",372],["import org.certificateservices.custom.c2x.common.BaseStructSpec;",142]],"useCount":9414},{"word":"commons","context":[["'org.codehaus.groovy.grails.commons', // core / classloading",410],["import org.codehaus.groovy.grails.commons.GrailsApplication",712],["import org.apache.commons.logging.Log",733],["import org.apache.commons.io.FileUtils",782],["import org.apache.commons.lang.StringUtils",784],["import org.apache.commons.logging.LogFactory",1085],["'org.codehaus.groovy.grails.commons',            // core / classloading",511],["import org.apache.commons.io.IOUtils",349],["import org.apache.commons.lang.builder.HashCodeBuilder",587],["import org.codehaus.groovy.grails.commons.ConfigurationHolder",368]],"useCount":13164},{"word":"compile","context":[["//  compile: [maxMemory: 256, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",608],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["compile \":scaffolding:2.1.2\"",262],["// plugins for the compile step",458],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522],["//compile \":handlebars-asset-pipeline:1.3.0.3\"",245],["//compile \":coffee-asset-pipeline:1.8.0\"",200],["//compile \":sass-asset-pipeline:1.9.0\"",199],["compile ':cache:1.1.8'",191],["//compile \":less-asset-pipeline:1.10.0\"",198]],"useCount":9361},{"word":"component","context":[["context: { c -> c.putAll( [ component: c.item.component, module: c.item.module] ) } ) {",77],["package net.fortuna.ical4j.model.component",48],["switch (component) {",51],["import com.eucalyptus.component.annotation.ComponentMessage",52],["package ee.mdd.model.component",55],["s.append(\"select distinct a.component, a.GENE_SYMBOL, a.zscore, '\");",56],["s.append(\"SELECT distinct a.component, a.GENE_SYMBOL, a.zscore, '\");",56],["return component",62],["import org.osgi.service.component.ComponentContext",62],["context: { c -> c.putAll( [ component: c.item.component, module: c.item.module] ) } ) {",77]],"useCount":2547},{"word":"concept","context":[["setup: \"Login as Affinnova user and upload a concept\"",80],["cleanup: \"Delete the concept\"",83],["setup: \"Login and create a concept\"",31],["* Gets the access level for a list of concept keys",46],["setup: \"Login as AS user and upload a concept\"",67],["* Gets the distinct patient counts for the children of a parent concept key",46],["cleanup: \"delete the uploaded concept\"",45],["*  Gets the data associated with a value type concept from observation fact table",43],["/*Analyze each concept in subsets*/",33],["when: \"Create a project and import a test concept\"",35]],"useCount":2383},{"word":"concept_key","context":[["String fullname = concept_key.substring(concept_key.indexOf(\"\\\\\", 2), concept_key.length());",115],["String concept_cd=getConceptCodeFromKey(concept_key);",50],["String concept_cd = getConceptCodeFromKey(concept_key);",53],["String fullname=concept_key.substring(concept_key.indexOf(\"\\\\\",2), concept_key.length());",60],["String fullname=concept_key.substring(concept_key.indexOf(\"\\\\\",2), concept_key.length());",60],["String fullname = concept_key.substring(concept_key.indexOf(\"\\\\\", 2), concept_key.length());",115],["String fullname=concept_key.substring(concept_key.indexOf(\"\\\\\",2), concept_key.length());",60],["String fullname = concept_key.substring(concept_key.indexOf(\"\\\\\", 2), concept_key.length());",115],["int i = getLevelFromKey(concept_key) + 1;",82],["int i=getLevelFromKey(concept_key)+1;",66]],"useCount":2300},{"word":"concurrent","context":[["import java.util.concurrent.ExecutorService",258],["import java.util.concurrent.atomic.AtomicBoolean",158],["import java.util.concurrent.atomic.AtomicLong",236],["import java.util.concurrent.TimeUnit",1324],["import java.util.concurrent.Callable",493],["import java.util.concurrent.Executors",441],["import java.util.concurrent.CountDownLatch",407],["import java.util.concurrent.ConcurrentHashMap",370],["import java.util.concurrent.atomic.AtomicInteger",365],["import java.util.concurrent.Future",205]],"useCount":7091},{"word":"condition","context":[["import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty",153],["condition[0].value() == 'ALWAYS'",164],["import org.apache.tools.ant.taskdefs.condition.Os",113],["Node condition = step.runCondition[0]",124],["condition[0].arg2[0].value() == 'bar'",127],["condition[0].arg1[0].value() == 'foo'",127],["condition[0].attribute('class') == 'org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition'",127],["condition {",521],["boolean condition() {",318],["condition(\"SUCCESS\")",186]],"useCount":5230},{"word":"conditions","context":[["*       meet the following conditions:",98],["* furnished to do so, subject to the following conditions:",1420],["* the following conditions:",457],["* following conditions:",364],["* provided that the following conditions are met:",178],["*  furnished to do so, subject to the following conditions:",142],["*   following conditions are met:",141],["furnished to do so, subject to the following conditions:",134],["* so, subject to the following conditions:",115],["*       by You to the Licensor shall be under the terms and conditions of",98]],"useCount":3988},{"word":"conf","context":[["if (!conf || !conf.active) {",98],["import org.apache.hadoop.conf.Configuration",80],["change this setting by adding a configuration flag in `griffon-app/conf/Config.groovy`",50],["conf",54],["path: \"griffon-app/conf\")",50],["def conf = SpringSecurityUtils.securityConfig",280],["if (conf.rejectIfNoRule instanceof Boolean) {",35],["rejectIfNoRule = conf.rejectIfNoRule",35],["// See http://grails.org/doc/latest/guide/conf.html#dataSource for documentation",201],["if (!conf || !conf.active) {",98]],"useCount":3098},{"word":"config","context":[["//                             \"file:${userHome}/.grails/${appName}-config.properties\",",628],["//                             \"file:${userHome}/.grails/${appName}-config.groovy\"]",627],["// grails.config.locations = [ \"classpath:${appName}-config.properties\",",623],["// grails.config.locations = [ \"classpath:${appName}-config.properties\",",623],["// if (System.properties[\"${appName}.config.location\"]) {",522],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["// locations to search for config files that get merged into the main config;",493],["//                             \"classpath:${appName}-config.groovy\",",630],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661]],"useCount":28841},{"word":"configs","context":[["configs[0].value().empty",96],["configs[0].'hudson.plugins.git.GitRevisionBuildParameters'[0].combineQueuedCommits[0].value() == false",83],["configs[0].'hudson.plugins.parameterizedtrigger.SubversionRevisionBuildParameters'[0] instanceof Node",83],["configs[0].'hudson.plugins.parameterizedtrigger.FileBuildParameters'[0].propertiesFile[0].value() ==",83],["configs.size() == 1",131],["configs[0].'hudson.plugins.parameterizedtrigger.CurrentBuildParameters'[0] instanceof Node",116],["third.configs[0].attribute('class') == 'java.util.Collections$EmptyList'",86],["//Skip configs that aren't Checked or Release (so just Debug, for now)",110],["configs[0].'hudson.plugins.parameterizedtrigger.PredefinedBuildParameters'[0].'properties'[0].value() ==",115],["configs[0].'hudson.plugins.parameterizedtrigger.PredefinedBuildParameters'.size() == 1",115]],"useCount":2514},{"word":"configuration","context":[["if (configuration == 'Checked' || configuration == 'Release') {",246],["* @param configure The configuration closure",244],["if (configuration == 'Checked' || configuration == 'Release') {",246],["// set \"singleSession = false\" OSIV mode in hibernate configuration after enabling",277],["// TODO Implement code that is executed when the project configuration changes.",398],["if (configuration == 'Release') {",567],["// scaffolding templates configuration",683],["// log4j configuration",714],["if (configuration == 'Release' || configuration == 'Checked') {",1512],["if (configuration == 'Release' || configuration == 'Checked') {",1512]],"useCount":18456},{"word":"configure","context":[["configure text",347],["configure {",354],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["// configure settings for the run-app JVM",587],["// configure settings for the test-app JVM, uses the daemon by default",589],["configure()",2025],["// configure settings for the Console UI JVM",589],["// configure settings for the run-war JVM",590],["protected void configure(HttpSecurity http) throws Exception {",697]],"useCount":13267},{"word":"configureByFile","context":[["configureByFile();",69],["configureByFile(\"ProtectedFromSuper.java\");",42],["configureByFile(\"PreferLongerNamesOption.java\");",42],["configureByFile(\"MethodLookup2.java\");",42],["myFixture.configureByFile(getTestName(false) + \".groovy\")",53],["myFixture.configureByFile(getTestName(false) + \".java\");",56],["configureByFile(getTestName(false) + \".java\");",319],["configureByFile(getTestName(false) + \".java\")",110],["myFixture.configureByFile(getTestName(false) + \".xml\");",72],["myFixture.configureByFile(getTestName(false) + \".groovy\");",61]],"useCount":3158},{"word":"configureByText","context":[["myFixture.configureByText \"a.java\", \"\"\"",422],["myFixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE, \"\"\"",195],["myFixture.configureByText(\"a.groovy\", \"\"\"",213],["def ref = configureByText('''\\",386],["myFixture.configureByText 'a.groovy', '''",117],["myFixture.configureByText 'a.java', '''",481],["myFixture.configureByText(\"a.java\", \"\"\"",704],["myFixture.configureByText('_.groovy', '''\\",124],["myFixture.configureByText \"a.java\", '''",141],["myFixture.configureByText \"a.groovy\", \"\"\"",149]],"useCount":6243},{"word":"connection","context":[["def sql = new Sql(connection);",40],["package net.menthor.ontouml.rules.connection",74],["connection.disconnect()",70],["connection.responseCode == HTTP_OK",63],["connection.connect()",110],["connection.close()",129],["sql = new Sql(helper.connection)",61],["connection.getHeaderField(VIA) == \"Betamax\"",46],["def sql = new Sql(ds.connection)",44],["import org.irods.jargon.core.connection.IRODSAccount",42]],"useCount":2357},{"word":"console","context":[["console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]",598],["//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",703],["// Example of changing the log pattern for the default console",515],["1 * app.console.render { View view ->",150],["// Example of changing the log pattern for the default console appender:",469],["console name: 'stdout', layout: pattern(conversionPattern: '%d [%t] %-5p %c - %m%n')",226],["import jline.console.completer.Completer",106],["// Add timestamps to console log",56],["// Color Support to console log",56],["console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",49]],"useCount":4197},{"word":"constraints","context":[["import javax.validation.constraints.NotNull",271],["static constraints = {",9400],["constraints(nullable: \"false\")",3732],["constraints {",932],["// apply constraints here",692],["constraints(nullable: false)",376],["constraints: \"\",",75],["static\tconstraints = {",81],["import org.hibernate.validator.constraints.NotEmpty",85],["constraints(nullable: \"true\")",94]],"useCount":16818},{"word":"contact","context":[["import com.sapienter.jbilling.server.user.contact.db.ContactDTO",46],["import org.ofbiz.party.contact.*;",40],["subscribe(contact, \"contact.open\", eventHandler)",41],["subscribe(contact, \"contact.open\", eventHandler)",41],["|from contact",42],["subscribe(contact1, \"contact.open\", contactOpenHandler)",45],["*  Please contact Eucalyptus Systems, Inc., 130 Castilian",85],["input(\"recipients\", \"contact\", title: \"Send notifications to\") {",101],["* @author SamYStudiO ( contact@samystudio.net )",115],["* Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta",767]],"useCount":2532},{"word":"container","context":[["<div class=\"container\">",46],["\"</container>\",",53],["import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer",73],["new TestFrameUtil(title, container).withFixture({ FrameFixture fixture ->",73],["def container = field.getAWTComponent()",123],["grails.servlet.version = \"2.5\" // Change depending on target container compliance (2.5 or 3.0)",241],["grails.servlet.version = \"3.0\" // Change depending on target container compliance (2.5 or 3.0)",496],["\"  </container>\" +",40],["package com.bmuschko.gradle.docker.tasks.container",35],[".container {",35]],"useCount":2254},{"word":"contains","context":[["// watching is modified and reloaded. The event contains: event.source,",391],["parent.referencedViews.contains(view)",285],["result = days.contains(day)",84],["contains(",95],["contains.name(),",96],["assertTrue(response.data.contains([",110],["def isServiceAdmin = admins.contains(stanzaFromBare)",113],["parent.referencedConfigFiles.contains(configFile)",115],["assertTrue output.contains(",165],["parent.referencedJobs.contains(job)",201]],"useCount":8735},{"word":"content","context":[["import android.content.Context",142],["content.toString()",179],["static content = {",1380],["def content = render( thing )",121],["content",114],["def xml = XML.parse content",106],["String content",176],["content << \"${tab()}}${comment('method')}\\n\\n\"",91],["*       origin of the Work and reproducing the content of the NOTICE file.",98],["div(id: 'content', class: 'page-1') {",103]],"useCount":7907},{"word":"contentType","context":[["assert response.contentType == 'application/json'",78],["String contentType;",82],["response.contentType = 'application/json'",131],["render(contentType:\"text/json\"){",259],["render(contentType: \"application/json\") {",188],[".contentType(MediaType.APPLICATION_JSON)",169],["String contentType",90],["contentType: JSON)",82],["request.contentType = FORM_CONTENT_TYPE",1834],["controller.request.contentType = \"text/json\"",306]],"useCount":6354},{"word":"context","context":[["with(context.publisherNodes[0]) {",3044],["context.publisherNodes.size() == 1",2157],["import org.springframework.context.annotation.Configuration",1262],["with(context.stepNodes[0]) {",1210],["context.stepNodes.size() == 1",1147],["ContextHelper.executeInContext(closure, context)",1019],["context.git {",996],["import org.springframework.context.annotation.Bean",942],["import org.springframework.context.ApplicationContext",881],["import org.springframework.test.context.ContextConfiguration",805]],"useCount":70819},{"word":"continue","context":[["continue; // don't exclude the dependency itself!",21],["if (!sampleCd) continue",20],["webTitle: \"Tunisia protests continue in pictures \",",19],["* Whether or not to allow the build to continue if there are warnings.",16],["if (!patientNum) continue",14],["if (restApiDir.exists() == false) continue",24],["if (gene.chrom == null || gene.snpMap == null || gene.snpMap.size() == 0) continue;",26],["continue // we did not make this dep non-transitive",28],["continue;",691],["continue",1830]],"useCount":2800},{"word":"control","context":[["import org.codehaus.groovy.control.customizers.ImportCustomizer",108],["import org.codehaus.groovy.control.CompilerConfiguration",416],["*       communication on electronic mailing lists, source code control systems,",98],["*       control with that entity. For the purposes of this definition,",98],["import org.codehaus.groovy.control.SourceUnit",401],["import org.codehaus.groovy.control.CompilePhase",393],["import org.codehaus.groovy.control.MultipleCompilationErrorsException",206],["import org.codehaus.groovy.control.CompilationFailedException",139],["import org.codehaus.groovy.control.customizers.ASTTransformationCustomizer",119],["*       other entities that control, are controlled by, or are under common",98]],"useCount":3999},{"word":"controller","context":[["controller.delete()",895],["controller.edit(null)",734],["controller.flash.message != null",736],["controller.show(null)",743],["controller.update(null)",747],["controller.delete(null)",749],["controller.create()",808],["controller.save()",943],["controller.index()",1420],["controller.update()",1676]],"useCount":24127},{"word":"controllers","context":[["render message(code: 'fedreg.controllers.namevalue.missing')",95],["package ozone.owf.grails.controllers",46],["error 'org.codehaus.groovy.grails.web.servlet',  //  controllers",48],["package com.netflix.spinnaker.clouddriver.controllers",56],["render message(code: 'controllers.fr.generic.namevalue.missing')",77],["package rundeck.controllers",94],["error  'org.codehaus.groovy.grails.web.servlet',  //  controllers",336],["// If unspecified, controllers are prototype scoped.",358],["grails.controllers.defaultScope = 'singleton'",360],["error  'org.codehaus.groovy.grails.web.servlet',        // controllers",443]],"useCount":2500},{"word":"converters","context":[["package com.netflix.spinnaker.clouddriver.aws.deploy.converters",49],["package com.netflix.spinnaker.kato.gce.deploy.converters",43],["package com.netflix.spinnaker.clouddriver.google.deploy.converters",46],["import grails.converters.JSON",2966],["grails.converters.encoding = \"UTF-8\"",690],["import grails.converters.XML",361],["import grails.converters.*",281],["import grails.converters.JSON;",91],["grails.converters.encoding=\"UTF-8\"",77],["import org.codehaus.groovy.grails.web.converters.exceptions.ConverterException",56]],"useCount":5008},{"word":"coord","context":[["def coord = [:]",284],["coord.clear()",91],["assert ncube.containsCell(coord)",72],["ncube.getCell coord, output",68],["coord.put(\"state\", \"OH\")",40],["ncube.getCell(coord)",62],["coord.put(\"type\", \"good\")",52],["ncube.getCell(coord, output)",49],["coord.put(\"type\", \"bad\")",48],["assertTrue(\"ABC\".equals(ncube.getCell(coord)))",44]],"useCount":2475},{"word":"copy","context":[["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",115],["stringParam('CORECLR_WINDOWS_BUILD', '', 'Build number to copy CoreCLR windows test binaries from')",58],["return copy",64],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",77],["*           include a readable copy of the attribution notices contained",98],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",134],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",142],["* You should have received a copy of the CC0 Public Domain Dedication",200],["project.copy {",393],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291]],"useCount":3834},{"word":"core","context":[["'org.codehaus.groovy.grails.commons',            // core / classloading",511],["import ch.qos.logback.core.ConsoleAppender",298],["import org.springframework.security.core.context.SecurityContextHolder",312],["import org.springframework.core.io.Resource",313],["import griffon.core.GriffonApplication",323],["import javax.ws.rs.core.MediaType",326],["import javax.ws.rs.core.Response",288],["import org.springframework.security.core.Authentication",367],["'org.codehaus.groovy.grails.commons', // core / classloading",410],["* This file is part of transmart-core-db.",452]],"useCount":38058},{"word":"correct","context":[["then:\"The response is correct\"",106],["then:\"The create view is rendered again with the correct model\"",676],["then: \"The model is correct\"",93],["void \"Test that the edit action returns the correct model\"() {",729],["void \"Test the create action returns the correct model\"() {",731],["void \"Test that the show action returns the correct model\"() {",734],["void \"Test the index action returns the correct model\"() {",739],["then: 'check if text is correct'",91],["then: \"The create view is rendered again with the correct model\"",89],["then:\"The model is correct\"",648]],"useCount":5351},{"word":"count","context":[["assert Gene.count == 1",285],["count++",1521],["int count = 0",1123],["while(count<numberOfTrials) {",985],["count = 0",745],["for(count=0; count<numberOfTrials; count++) {",197],["return count",198],["count ++",258],["assert MRNA.count == 1",235],["def count = 0",327]],"useCount":14474},{"word":"countErrorWarnInfo","context":[["ack.countErrorWarnInfo(0, 2, 0)",110],["ack.countErrorWarnInfo(0, 0, 2)",34],["ack.countErrorWarnInfo(3, 0, 0)",41],["ack.countErrorWarnInfo(0, 1, 2)",67],["ack.countErrorWarnInfo(0, 1, 0)",67],["ack.countErrorWarnInfo(1, 2, 0)",77],["ack.countErrorWarnInfo(2, 0, 0)",121],["ack.countErrorWarnInfo(0, 0, 1)",266],["ack.countErrorWarnInfo(1, 0, 0)",1495],["ack.countErrorWarnInfo(0, 0, 0)",1527]],"useCount":3884},{"word":"country","context":[["remarks:      The country is really worldwide.",22],["data.add(exp.country)",22],["1 * countryDao.add({ AddCountryDbDto country ->",28],["Country country",36],["country:    DK",56],["country: ES",60],["String country",129],["country: DK",273],["country:      NL",2066],["country:      EU",799]],"useCount":3897},{"word":"create","context":[["void \"Test the create action returns the correct model\"() {",731],["then:\"The create view is rendered again with the correct model\"",676],["view == 'create'",733],["def create() {",1677],["def create = {",771],["controller.create()",808],["when:\"The create action is executed\"",648],["withXmlActions << WithXmlAction.create { Node project ->",521],["def model = controller.create()",447],["dbCreate = \"create-drop\" // one of 'create', 'create-drop', 'update', 'validate', ''",299]],"useCount":18559},{"word":"created","context":[["when:\"A domain instance is created\"",656],["!created",43],["then: 'Should create and return created values'",44],["logger.info(\"Rule created: \"+rule.getUID())",62],["println(\"Configuration created\")",64],["cleanup: \"delete created project\"",77],["// Attempt to clean up anything we created",85],["when: \"A domain instance is created\"",90],["then: \"The model is correctly created\"",96],["then:\"The model is correctly created\"",648]],"useCount":3374},{"word":"credentials","context":[["* details about handling credentials in DSL scripts.",77],["credentials(\"adop-jenkins-master\")",298],["credentials: credentials)",264],["credentials: credentials)",264],["def credentials = new GoogleNamedAccountCredentials.Builder().project(PROJECT_NAME).compute(computeMock).build()",187],["with(credentials[0]) {",110],["converted.credentials = getCredentialsObject(input.credentials as String)",90],["converted.credentials = getCredentialsObject(input.credentials as String)",90],["credentialsRepo.save(ACCOUNT_NAME, credentials)",90],["credentials {",86]],"useCount":4033},{"word":"css","context":[["css:           'text/css',",479],["css:           'text/css',",479],["grails.resources.adhoc.patterns = ['/images/*', '/css/*', '/js/*', '/plugins/*']",330],["css: 'text/css',",295],["css: 'text/css',",295],["grails.resources.adhoc.includes = ['/images/**', '/css/**', '/js/**', '/plugins/**']",55],["css          : 'text/css',",46],["css          : 'text/css',",46],["<style type=\"text/css\">",43],["builder.link(rel: \"stylesheet\", type: \"text/css\", href: \"${applicationResourcePath}/css/${attrs.skin}.css\")",28]],"useCount":2662},{"word":"csv","context":[["csv: 'text/csv',",278],["csv: 'text/csv',",278],["fileType[0].value() == 'csv'",320],["csv:           'text/csv',",479],["csv:           'text/csv',",479],["csvFileName[0].value() == 'some.csv'",480],["plot('my group', 'some.csv') {",512],["plot('my group', 'test.csv') {",64],["csv          : 'text/csv',",46],["csv          : 'text/csv',",46]],"useCount":4084},{"word":"ctx","context":[["// event.application, event.manager, event.ctx, and event.plugin.",392],["def doWithDynamicMethods = { ctx ->",504],["storageTreeWithContext { ctx ->",44],["def doWithApplicationContext = { ctx ->",218],["jobServiceWithAuthContext { ctx ->",64],["def ctx = bb.createApplicationContext()",62],["def ctx  = bb.createApplicationContext()",56],["def springConfig = new WebRuntimeSpringConfiguration(ctx)",39],["void convertToCamel(ctx){",36],["def marge = ctx.getBean(\"marge\")",36]],"useCount":2928},{"word":"cube","context":[["assertEquals(3, cube.getCellMap().size())",171],["assertEquals(\"BAZ\", cube.getCell([Code : 10.0]))",52],["assertEquals(\"ZZZ\", cube.getCell([Code : 10.0]))",55],["x = cube.getCell(input)",65],["// load cube with same name, but different structure in TEST branch",214],["assertEquals(3, cube.cellMap.size())",118],["assertEquals(\"GHI\", cube.getCell([Code : 10.0]))",117],["cube = NCubeManager.getCube(branch1, \"TestBranch\")",105],["cube = NCubeManager.getCube(head, \"TestBranch\")",89],["NCube cube = NCubeManager.getNCubeFromResource(\"delta.json\")",68]],"useCount":2502},{"word":"current","context":[["if (Environment.current == Environment.PRODUCTION) {",32],["return current",32],["if (JavaVersion.current().isJava7()) {",32],["* Returns true if the current page is a SchemaPage and the current tab",30],["* current context elements.",38],["// with a long tail, since we do most of our reads at current-time, and",38],["if((grails.util.Environment.current.name == 'development') && true) {",43],["if(Environment.current == Environment.DEVELOPMENT && attrs.debug){",50],["* This tag only writes its body to the output if the current user",61],["if (Environment.current == Environment.DEVELOPMENT) {",68]],"useCount":2779},{"word":"currentTimeMillis","context":[["long start = System.currentTimeMillis()",171],["long startTime = System.currentTimeMillis()",165],["def start = System.currentTimeMillis()",127],["long now = System.currentTimeMillis()",114],["ts = System.currentTimeMillis();",84],["def startTime = System.currentTimeMillis()",73],["def now = System.currentTimeMillis()",71],["start = System.currentTimeMillis()",65],["endCall = System.currentTimeMillis();",49],["startCall = System.currentTimeMillis();",49]],"useCount":2300},{"word":"custom","context":[["You can use this as a template for your own custom RuleSet.",38],["package org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic",53],["import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.cert.SubjectPermissions.SubjectPermissionsChoices;",61],["import org.certificateservices.custom.c2x.asn1.coer.COEREncodeHelper;",73],["import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.EccP256CurvePoint.EccP256CurvePointChoices;",75],["import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.Duration.DurationChoices;",96],["import org.certificateservices.custom.c2x.common.crypto.DefaultCryptoManagerParams;",121],["import test.groovy.platformservices.spock.custom.annotations.Test",140],["import org.certificateservices.custom.c2x.common.BaseStructSpec;",142],["import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.Signature.SignatureChoices;",38]],"useCount":2510},{"word":"cytomine","context":[["import be.cytomine.test.BasicInstanceBuilder",115],["import be.cytomine.security.SecUser",112],["package be.cytomine",84],["import be.cytomine.CytomineDomain",81],["import be.cytomine.project.Project",144],["import be.cytomine.test.Infos",169],["import be.cytomine.utils.JSONUtils",64],["import be.cytomine.image.ImageInstance",78],["import be.cytomine.api.RestController",71],["import be.cytomine.security.User",67]],"useCount":2243},{"word":"d","context":[["\"d\":\"STAT6\",",80],["pattern = \"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\"",68],["\\t\"d\":\"BRCA2\",",68],["def d = getChildDevice(dni)",59],["randomName.text() =~ /choice-parameter-\\d+/",76],["\\t\"d\":\"MYC\",",80],["*       (d) If the Work includes a \"NOTICE\" text file as part of its",98],["argString: '-a b -c d',",140],["def d = new Date()",72],["console name: 'stdout', layout: pattern(conversionPattern: '%d [%t] %-5p %c - %m%n')",226]],"useCount":3888},{"word":"dao","context":[["import org.springframework.security.authentication.dao.DaoAuthenticationProvider",49],["import org.springframework.dao.DataIntegrityViolationException",867],["catch (org.springframework.dao.DataIntegrityViolationException e) {",393],["dao.close()",61],["dao.startTransaction()",60],["dao.endTransaction()",55],["import com.jtbdevelopment.games.dao.AbstractPlayerRepository",48],["import org.springframework.dao.DataAccessException",44],["config.bind(EventDAO).to(dao)",41],["config.bind(EventDAO.class).to(dao)",40]],"useCount":2829},{"word":"data","context":[["data: [",561],["* tranSMART - translational medicine data mart",1157],["multipartForm: 'multipart/form-data',",549],["import com.netflix.spinnaker.clouddriver.data.task.TaskRepository",330],["return data",320],["csvFile('data.prop') {",320],["file[0].value() == 'data.prop'",480],["// The default codec used to encode data with ${}",401],["// Legacy setting for codec used to encode data with ${}",359],["import com.netflix.spinnaker.clouddriver.data.task.Task",349]],"useCount":27490},{"word":"dataSource","context":[["Sql sql = new Sql(dataSource)",472],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource)",410],["def dataSource",370],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648],["Sql sql = new Sql(dataSource);",691],["dataSource {",3028],["// See http://grails.org/doc/latest/guide/conf.html#dataSource for documentation",201],["def sql = new Sql(dataSource)",161],["DataSource dataSource",87],["Sql sql = Sql.newInstance(dataSource)",86]],"useCount":7260},{"word":"database","context":[["runtime \":database-migration:1.3.8\"",101],["runtime \":database-migration:1.3.2\"",101],["import liquibase.sdk.database.MockDatabase",93],["import com.manydesigns.portofino.model.database.*",84],["* A domain class describes the data object and it's mapping to the database",110],["import liquibase.database.Database",127],["runtime \":database-migration:1.4.0\"",316],["package net.calit2.archaeology.database",70],["remarks:        whois database: whois.arin.net or",70],["def database = new MockDatabase()",69]],"useCount":3150},{"word":"dataquery","context":[["import org.transmartproject.core.dataquery.highdim.projections.Projection",186],["import org.transmartproject.core.dataquery.assay.Assay",90],["import org.transmartproject.core.dataquery.TabularResult",178],["import org.transmartproject.core.dataquery.highdim.AssayColumn",167],["import org.transmartproject.core.dataquery.highdim.HighDimensionDataTypeResource",105],["import org.transmartproject.core.dataquery.highdim.assayconstraints.AssayConstraint",99],["import org.transmartproject.core.dataquery.highdim.HighDimensionResource",92],["import org.transmartproject.core.dataquery.highdim.dataconstraints.DataConstraint",61],["import org.transmartproject.db.dataquery.highdim.DeSubjectSampleMapping",63],["import org.transmartproject.core.dataquery.DataRow",87]],"useCount":2347},{"word":"date","context":[["* @param date",57],["\"date\": \"2016-03-17T20:21:20.368Z\"",43],["Date date = new Date();",48],["return date",58],["println(\"FAIL: Date of Max is less than that of date of Min for same month\")",78],["Date date = new Date()",83],["Date date",170],["def date = new Date()",137],["*       as of the date such litigation is filed.",98],["println(\"FAIL: Date of Max is more than that of date of Min for new month\")",85]],"useCount":2632},{"word":"db","context":[["import com.sapienter.jbilling.server.user.db.CompanyDTO",168],["db.addVinyl(vinylA)",73],["import net.ripe.db.whois.common.IntegrationTest",154],["* This file is part of transmart-core-db.",452],["db.close()",148],["package net.ripe.db.whois.spec.update",107],["import tigase.db.*",105],["import org.transmartproject.db.i2b2data.PatientDimension",82],["import org.transmartproject.db.test.RuleBasedIntegrationTestMixin",82],["import net.ripe.db.whois.spec.BaseQueryUpdateSpec",68]],"useCount":5703},{"word":"dbCreate","context":[["//            dbCreate = \"update\"",19],["dbCreate = \"\"",18],["dbCreate = \"none\"",48],["dbCreate = 'update'",60],["dbCreate = \"update\" // one of 'create', 'create-drop','update'",76],["dbCreate = \"create-drop\" // one of 'create', 'create-drop','update'",104],["dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', ''",134],["dbCreate = \"create-drop\"",189],["dbCreate = \"create-drop\" // one of 'create', 'create-drop', 'update', 'validate', ''",299],["dbCreate = \"update\"",1166]],"useCount":2262},{"word":"dbtest","context":[["changed:      dbtest@ripe.net",325],["changed:      dbtest@ripe.net 20020101",955],["changed:      dbtest@ripe.net 20130101",237],["changed:     dbtest@ripe.net",279],["changed:      dbtest@ripe.net 20120101",111],["e-mail:  dbtest@ripe.net",120],["notify:       dbtest@ripe.net",127],["e-mail:       dbtest@ripe.net",156],["upd-to: dbtest@ripe.net",165],["e-mail:          dbtest@ripe.net",207]],"useCount":3767},{"word":"de","context":[["package de.gesellix.gradle.docker.tasks",135],["import de.iteratec.osm.measurement.schedule.JobGroup",148],["* http://www.mi.fu-berlin.de/en/inf/groups/ag-csw/",165],["* http://www.corporate-semantic-web.de/",165],["// email: jamrozik@st.cs.uni-saarland.de",407],["package de.iteratec.osm.csi",131],["import de.iteratec.osm.measurement.environment.Browser",125],["import de.iteratec.osm.measurement.environment.Location",107],["package de.ddb.next",95],["import de.iteratec.osm.measurement.schedule.ConnectivityProfile",89]],"useCount":7051},{"word":"debug","context":[["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",537],["if (debug) {",182],["test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",469],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",509],["log.debug \"Updated with settings: ${settings}\"",515],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["//  compile: [maxMemory: 256, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",608],["console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]",598],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log.debug \"Installed with settings: ${settings}\"",523]],"useCount":15815},{"word":"def","context":[["def foo() {",1433],["def index = {",1399],["def create() {",1677],["def grailsApplication",1860],["def index() {",2026],["def message = send new Message(",2571],["def ack = ackFor message",2652],["def cleanup() {",4815],["def setup() {",9159],["def setupSpec() {",1451]],"useCount":341456},{"word":"default","context":[["// The default codec used to encode data with ${}",401],["default:",4521],["// inherit Grails' default dependencies",1209],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["// configure settings for the test-app JVM, uses the daemon by default",589],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["// Example of changing the log pattern for the default console",515],["// Example of changing the log pattern for the default console appender:",469],["grails.views.default.codec = \"html\"",366],["grails.views.default.codec = \"none\" // none, html, base64",313]],"useCount":19341},{"word":"definition","context":[["definition (",31],["def definition = {",175],["def definition = new QueryDefinition([",105],["*       control with that entity. For the purposes of this definition,",98],["Set set = builder.build(definition)",79],["SchemaRecord record = builder.build(definition)",67],["definition {",60],["service.buildPatientSetQuery(resultInstance, definition)",44],["definition(",1053],["'Invalid Option definition: {0}'",42]],"useCount":2455},{"word":"delegate","context":[["delegate.@class == 'jenkins.plugins.publish_over_ssh.BapSshRetry'",110],["delegate.@class == 'jenkins.plugins.publish_over_ssh.BapSshCredentials'",110],["arg.delegate = target",110],["delegate.@class == 'jenkins.plugins.publish_over_ssh.BapSshPublisherLabel'",110],["addStaticAnalysisContextAndPattern(delegate, staticAnalysisContext, pattern)",117],["with(delegate.'jenkins.plugins.publish__over__ssh.BapSshTransfer'[0]) {",154],["with(delegate.delegate[0]) {",156],["with(delegate.delegate[0]) {",156],["closure.delegate = this",165],["return delegate;",270]],"useCount":7785},{"word":"delete","context":[["void \"Test that the delete action deletes an instance if it exists\"() {",739],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928],["controller.delete()",895],["def delete = {",878],["static allowedMethods = [save: \"POST\", update: \"PUT\", delete: \"DELETE\"]",866],["controller.delete(null)",749],["when:\"The delete action is called for a null instance\"",656],["when:\"The domain instance is passed to the delete action\"",656],["def delete() {",529],["file.delete()",422]],"useCount":13935},{"word":"demand","context":[["fwkControl.demand.getFrameworkFromUserSession { session, request -> return null }",347],["dataObjectServiceMockFor.demand.findMatching(1) {",64],["// Set up appropriate triggers.  PR on demand, otherwise nightly",65],["mockBoService.demand.save(1..1) {",90],["fwkControl.demand.getRundeckFramework {-> return null }",257],["fwkControl.demand.existsFrameworkProject { project, framework ->",207],["fwkControl.demand.getCommand { project, type, command, framework ->",136],["mockDataObjectService.demand.save(1..1) {",125],["fwkControl.demand.getAuthContextForSubjectAndProject { subject,proj -> testUserAndRolesContext() }",120],["fwkControl.demand.authorizeProjectJobAll { framework, resource, actions, project -> return true }",113]],"useCount":4431},{"word":"dependencies","context":[["</dependencies>",316],["<dependencies>",313],["// inherit Griffon' default dependencies",60],["dependencies.each {",59],["dependencies.add(dependency)",55],["dependencies {",3477],["// inherit Grails' default dependencies",1209],["project.dependencies {",633],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522]],"useCount":9420},{"word":"dependency","context":[["// uncomment the below to enable remote dependency resolution",409],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["grails.project.dependency.resolution = {",1694],["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["grails.project.dependency.resolver = \"maven\" // or ivy",633],["grails.project.dependency.resolver = 'maven'",80],["grails.project.dependency.resolver = \"maven\"",147],["griffon.project.dependency.resolution = {",224],["<dependency>",329],["</dependency>",360]],"useCount":6894},{"word":"deploy","context":[["import com.netflix.spinnaker.clouddriver.deploy.DescriptionValidator",83],["import com.netflix.spinnaker.clouddriver.openstack.deploy.exception.OpenstackProviderException",73],["package com.netflix.spinnaker.clouddriver.aws.deploy.ops",69],["package com.netflix.spinnaker.clouddriver.google.deploy.ops",65],["import com.netflix.spinnaker.clouddriver.google.deploy.GoogleOperationPoller",64],["package com.netflix.spinnaker.clouddriver.aws.deploy.validators",59],["package com.netflix.spinnaker.kato.aws.deploy.validators",59],["import com.netflix.spinnaker.clouddriver.google.deploy.SafeRetry",55],["package com.netflix.spinnaker.kato.aws.deploy.ops",55],["import com.netflix.spinnaker.clouddriver.google.deploy.GCEUtil",86]],"useCount":2644},{"word":"descr","context":[["descr:        TEST network",1353],["descr:          Route",294],["descr:        test as-set",211],["descr:          reverse domain",181],["descr: Test route",166],["descr: description",330],["descr:        /24 assigned",467],["descr:          description",500],["descr:        European Regional Registry",788],["descr:       MNTNER for test",149]],"useCount":7910},{"word":"description","context":[["validator.validate([], description, errors)",371],["this.description = description",409],["String description",1490],["this.description = description",409],["descr: description",330],["def parse(String description) {",684],["descr:          description",500],["def description = '''\\",451],["<description></description>",243],["String description;",314]],"useCount":22563},{"word":"details","context":[["json { new JSON(details).render(response) }",84],["* details about handling credentials in DSL scripts.",77],["* for details.",66],["* Contact: mschneider@rapideca.org for further details.                       *",62],["*  details.",85],["// accepts Markdown syntax. See http://daringfireball.net/projects/markdown/ for details",87],["xml { new XML(details).render(response) }",84],["* details.",1087],["* for more details.",902],["*  for more details.",103]],"useCount":3496},{"word":"device","context":[["def hubAction = new physicalgraph.device.HubAction(",274],["def linkText = getLinkText(device)",239],["device.deviceNetworkId = \"$hosthex:$porthex\"",169],["log.debug \"The device id configured is: $device.deviceNetworkId\"",154],["log.debug \"The device id configured is: $device.deviceNetworkId\"",154],["// Parse incoming device messages to generate events",146],["def isStateChange = isStateChange(device, name, value)",130],["standardTile(\"switch\", \"device.switch\", width: 2, height: 2, canChangeIcon: true) {",129],["standardTile(\"refresh\", \"device.switch\", inactiveLabel: false, decoration: \"flat\") {",112],["tileAttribute (\"device.switch\", key: \"PRIMARY_CONTROL\") {",87]],"useCount":6199},{"word":"dir","context":[["grails.project.class.dir = \"target/classes\"",1327],["'dir/my.properties'",83],["// by Gant (such as 'baseDir' which points on project base dir). You can",90],["if (!dir.exists()) {",95],["//create a git dir",96],["grails.project.work.dir = 'target'",209],["dir.mkdirs()",221],["grails.project.work.dir = \"target/work\"",482],["grails.project.test.reports.dir = \"target/test-reports\"",1264],["grails.project.test.class.dir = \"target/test-classes\"",1328]],"useCount":8386},{"word":"directory","context":[["\"--directory=\": [\"<OUT>\"]",47],["output.dir = directory",50],["import org.tsaap.directory.User",52],["// Zip up the tests directory so that we don't use so much space/time copying",52],["remoteDirectory('directory')",55],["remoteDirectory[0].value() == 'directory'",55],["//Run the R command to set the working directory to our temp directory.",74],["//Run the R command to set the working directory to our temp directory.",74],["//Set the working directory to be our temporary location.",69],["// For example you can create directory under project tree:",138]],"useCount":3025},{"word":"disable","context":[["// disable bulk index on startup",16],["grails.web.disable.multipart = false",58],[".csrf().disable()",47],["if(System.getProperty('idea.disable.gradle.resource.filtering', 'false').toBoolean()) {",18],["grails.mime.disable.accept.header.userAgents = ['Gecko', 'WebKit', 'Presto', 'Trident']",343],["// uncomment to disable ehcache",496],["grails.web.disable.multipart=false",534],["// whether to disable processing of multi part requests",574],["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["post('job/' + missingJob.jobName + '/disable')",16]],"useCount":2948},{"word":"displayed","context":[["map.displayed = false",48],["while (waitFor('averagewait') { survey.questionText.displayed }) {",47],["then: 'The login page is displayed'",46],["then: 'Error messages are displayed'",52],["println(\"Test Pass: The change is displayed\")",54],["when: 'Delete Configuration is displayed'",58],["displayed: displayed(description, isStateChange)",64],["displayed: displayed(description, isStateChange)",64],["displayed: false",80],["when: 'Edit button is displayed'",86]],"useCount":3016},{"word":"distributed","context":[["* distributed with this work for additional information",3045],["* agreements. See the NOTICE file distributed with this work",122],["*  distributed with this work for additional information",2945],["*           of the following places: within a NOTICE text file distributed",98],["* file that was distributed with this source code.",83],["distributed with this work for additional information",37],["* v.2.0. If a copy of the MPL was not distributed with this file, You can",31],["// distributed with this work for additional information",20],["* See the NOTICE file distributed with",13],["*             of the following places: within a NOTICE text file distributed",12]],"useCount":6406},{"word":"distribution","context":[["* documentation and/or other materials provided with the distribution.",673],["*       and distribution as defined by Sections 1 through 9 of this document.",98],["*           distribution, then any Derivative Works that You distribute must",98],["*       reproduction, and distribution of the Work otherwise complies with",98],["//   documentation and/or other materials provided with the distribution.",113],["*    and/or other materials provided with the distribution.",131],["* which accompanies this distribution, and is available at",548],["* and/or other materials provided with the distribution.",193],["*     distribution.",141],["*       for use, reproduction, or distribution of Your modifications, or",98]],"useCount":3464},{"word":"div","context":[["div(id: 'content', class: 'page-1') {",103],["</div>",644],["div {",161],["div(class: 'row') {",117],["div(class: 'row-fluid') {",110],["out << \"</div>\"",105],["div(class: 'col-lg-8 col-lg-pull-0') {",99],["div(class: 'col-lg-3') {",95],["div(class: \"row\") {",72],["out << '</div>'",56]],"useCount":2774},{"word":"do","context":[["//try to do update of the ScheduledExecution",213],["* furnished to do so, subject to the following conditions:",1420],["// do nothing",226],["*  furnished to do so, subject to the following conditions:",142],["new _a().do<caret>Smth()",135],["furnished to do so, subject to the following conditions:",134],["do<caret>Smth()",120],["\"target 'IOS-APP' do\",",100],["*           within such NOTICE file, excluding those notices that do not",98],["*           excluding those notices that do not pertain to any part of",98]],"useCount":4792},{"word":"doTest","context":[["doTest('''",144],["private void doTest() throws Exception {",53],["doTest(IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE, false, false);",55],["doTest \"\"\"",56],["doTest '''\\",90],["doTest();",1280],["doTest('''\\",520],["doTest()",464],["doTest(",351],["doTest('\\n')",175]],"useCount":7117},{"word":"doc","context":[["//Object result = expr.evaluate(doc, XPathConstants.NODESET);",138],["assertNotNull doc",276],["// See http://grails.org/doc/latest/guide/conf.html#dataSource for documentation",201],["doc {",183],["def doc = yaml.load(ymlstr)",57],["assertEquals \"missing sequence\", 1, doc.job.sequence.size()",58],["assertEquals \"missing job\", 1, doc.job.size()",58],["Document doc = builder.parse(new InputSource(new StringReader(xml)));",69],["Document doc = builder.parse(new InputSource(new StringReader(xmlrequest)));",70],["def doc = parser.parse(new StringReader(xmlstr))",189]],"useCount":3815},{"word":"document","context":[["def document = new Parser().parseDocument(input)",52],["import de.oio.jpdfunit.document.util.TextSearchType",52],["document,",61],["documentInstance.errorMessage(code: 'document.line.message', args: [num, temp], default: \"Line ${num}: ${temp}\")",62],["*       and distribution as defined by Sections 1 through 9 of this document.",98],["defaultBuilder.document() {",52],["new PDFBuilder(new FileOutputStream(RESULT)).document() {",46],["new IText2Builder(new FileOutputStream(RESULT)).document() {",46],["'org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService': [",66],["document.newPage()",78]],"useCount":2635},{"word":"documentation","context":[["// URL to the plugin's documentation",517],["import springfox.documentation.spi.service.contexts.OperationContext",156],["* documentation and/or other materials provided with the distribution.",673],["import springfox.documentation.spi.DocumentationType",261],["import springfox.documentation.spring.web.plugins.DocumentationContextSpec",243],["import springfox.documentation.spring.web.mixins.RequestMappingSupport",230],["String documentation = ''",229],["// See http://grails.org/doc/latest/guide/conf.html#dataSource for documentation",201],["*     in the documentation and/or other materials provided with the",141],["// URL where documentation can be found",212]],"useCount":7525},{"word":"domain","context":[["when:\"An invalid domain instance is passed to the update action\"",655],["when:\"The show action is executed with a null domain\"",647],["when:\"A domain instance is passed to the show action\"",650],["when:\"A domain instance is created\"",656],["when:\"The domain instance is passed to the delete action\"",656],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["then:\"A model is populated containing the domain instance\"",1296],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"Update is called for a domain instance that doesn't exist\"",656]],"useCount":22511},{"word":"dsl","context":[["import javaposse.jobdsl.dsl.RequiresPlugin",326],["import javaposse.jobdsl.dsl.AbstractContext",274],["package javaposse.jobdsl.dsl",271],["package javaposse.jobdsl.dsl.helpers.publisher",300],["import javaposse.jobdsl.dsl.Context",344],["import javaposse.jobdsl.dsl.ContextHelper",365],["import javaposse.jobdsl.dsl.Item",409],["import javaposse.jobdsl.dsl.DslContext",448],["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["import javaposse.jobdsl.dsl.JobManagement",851]],"useCount":12854},{"word":"dtolabs","context":[["import com.dtolabs.rundeck.plugins.scm.ScmOperationContext",51],["package com.dtolabs.rundeck.app.support",45],["import com.dtolabs.rundeck.core.authorization.AuthContext",101],["import com.dtolabs.rundeck.core.common.Framework",95],["import com.dtolabs.rundeck.server.authorization.AuthConstants",78],["import com.dtolabs.rundeck.core.authorization.UserAndRolesAuthContext",63],["import com.dtolabs.rundeck.core.logging.LogEvent",58],["import com.dtolabs.rundeck.core.plugins.views.BasicInputView",52],["import com.dtolabs.rundeck.core.plugins.configuration.Validator",45],["import com.dtolabs.rundeck.core.plugins.configuration.PropertyScope",51]],"useCount":2650},{"word":"e","context":[["e.printStackTrace()",1614],["catch (e) {",607],["} catch(Exception e) {",647],["catch (DataIntegrityViolationException e) {",683],["} catch (IOException e) {",781],["} catch(geb.waiting.WaitTimeoutException e) {",883],["throw e",1292],["} catch (e) {",1392],["catch (Exception e) {",1426],["} catch (Exception e) {",5515]],"useCount":47303},{"word":"each","context":[["data.each {",175],["[true, false].each { isPR ->",300],["['Debug', 'Release'].each { configurationGroup ->",170],["}.each {",165],["scheduledExecution.errors.allErrors.each {",125],["buildCommands.each { buildCommand ->",120],["list.each {",115],["].each {",109],["commitPullList.each { isPr ->",105],["registry.allServices.each { it.call() }",264]],"useCount":17158},{"word":"ec2","context":[["\"class\": \"com.amazonaws.services.ec2.model.Snapshot\",",60],["\"class\": \"com.amazonaws.services.ec2.model.Tag\",",265],["import com.amazonaws.services.ec2.AmazonEC2",165],["\"class\": \"com.amazonaws.services.ec2.model.Volume\",",126],["import com.amazonaws.services.ec2.model.Image",115],["import com.amazonaws.services.ec2.model.SecurityGroup",100],["import com.amazonaws.services.ec2.model.Instance",87],["import com.amazonaws.services.ec2.AmazonEC2Client",80],["\"class\": \"com.amazonaws.services.ec2.model.VolumeAttachment\",",76],["import com.amazonaws.services.ec2.model.Tag",67]],"useCount":2675},{"word":"echo","context":[["shell('echo Test')",88],["echo 'VERSION INFO'  1>&2 &&",66],["echo '============= task output =================='",62],["echo '============= task environment ============='",62],["|echo \"=.=.=.=.=.=.=.=.=.=.=.=.\"",60],["echo Hello world!",52],["echo '/VERSION INFO' 1>&2 &&",50],["shell('echo hello')",138],["buildCommands += \"\"\"echo \\\"Using rootfs in /opt/arm-liux-genueabihf-root\\\"",48],["stepScript += \"echo Setting ${k}=${v}\\r\\n\"",46]],"useCount":2364},{"word":"eclipse","context":[["* http://www.eclipse.org/legal/epl-v10.html",555],["import org.eclipse.smarthome.core.thing.binding.ThingHandler",123],["import org.eclipse.smarthome.core.thing.ManagedThingProvider",134],["import org.eclipse.smarthome.core.thing.Thing",147],["import org.eclipse.jgit.api.Git",155],["import org.eclipse.smarthome.config.core.Configuration",157],["import org.eclipse.smarthome.core.thing.ThingTypeUID",193],["import org.eclipse.smarthome.core.thing.ThingUID",210],["import org.eclipse.smarthome.test.OSGiTest",352],["import org.eclipse.smarthome.core.types.Command",113]],"useCount":10001},{"word":"edit","context":[["def edit = {",843],["controller.edit(null)",734],["view == 'edit'",733],["void \"Test that the edit action returns the correct model\"() {",729],["then:\"The edit view is rendered again with the invalid instance\"",650],["when:\"The edit action is executed with a null domain\"",646],["when:\"A domain instance is passed to the edit action\"",646],["controller.edit()",435],["def edit() {",402],["def edit(Long id) {",397]],"useCount":8728},{"word":"editor","context":[["editor.value = value",69],["value == editor.value",85],["import com.intellij.openapi.editor.Editor",94],["new ListTemplatesHandler().invoke(project, editor, myFixture.file);",102],["editor.value = literal",111],["def foldingModel = myFixture.editor.foldingModel as FoldingModelImpl",132],["//</editor-fold>",142],["editor.value = format",219],["* and open the template in the editor.",226],["def regions = myFixture.editor.foldingModel.allFoldRegions.sort { it.startOffset }",85]],"useCount":3692},{"word":"ehcache","context":[["// uncomment to disable ehcache",496],["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["'net.sf.ehcache.hibernate'",892],["cache.region.factory_class = 'org.hibernate.cache.ehcache.EhCacheRegionFactory' // Hibernate 4",145],["//    cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory' // Hibernate 3",143],["cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory' // Hibernate 3",118],["//    cache.region.factory_class = 'org.hibernate.cache.ehcache.EhCacheRegionFactory' // Hibernate 4",103],["cache.provider_class = 'net.sf.ehcache.hibernate.EhCacheProvider'",88],["cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory'",190],["// excludes 'ehcache'",1161]],"useCount":4494},{"word":"either","context":[["// specify dependencies here under either 'build', 'compile', 'runtime' or 'test' scopes eg.",21],["* file parsers, the key is the name of the parser and the value defines the files to scan. The parser are either",22],["either express or implied.",22],["// Make sure the build configuration is either of debug or release",22],["6. Go to the path where the `lombok.jar` was copied. This path is either found",32],["// config files can either be Java properties files or ConfigSlurper scripts",205],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667]],"useCount":2972},{"word":"elasticsearch","context":[["import org.xbib.elasticsearch.webapp.Constants",56],["import org.elasticsearch.client.Client",107],["package org.elasticsearch.gradle.test",101],["import org.elasticsearch.common.logging.ESLogger",59],["import org.elasticsearch.gradle.VersionProperties",55],["import org.elasticsearch.common.logging.ESLoggerFactory",50],["import org.elasticsearch.gradle.BuildPlugin",44],["package org.elasticsearch.gradle",43],["package org.elasticsearch.gradle.precommit",41],["import org.elasticsearch.common.settings.Settings",142]],"useCount":2965},{"word":"element","context":[["Reference element",112],["assert ((GrNewExpression) ref.element.parent).advancedResolve().element instanceof PsiMethod",60],["assert ((GrNewExpression) ref.element.parent).advancedResolve().element instanceof PsiMethod",60],["final PsiElement element = ref.resolve();",56],["//test project element",54],["PsiMethod resolved = ((GrNewExpression)ref.element.parent).resolveMethod();",52],["* @throws geb.error.SingleElementNavigatorOnlyMethodException when called on a multi element navigator",50],["return element",48],["//If the list of subids does not have any elements, or it has only one element which is \"ALL\"",46],["* Cannot be called on multi element Navigators.",44]],"useCount":2628},{"word":"else","context":[["else{",1194],["} else",585],["} else {",58118],["}else{",5952],["else",9703],["else {",22251],["} else{",284],["}  else {",145],["else if (exception instanceof LockedException) {",112],["}else {",544]],"useCount":106237},{"word":"email","context":[["email {",73],["String email",664],["// email: jamrozik@st.cs.uni-saarland.de",407],["email: 'aalmiray@yahoo.com'",220],["//    def developers = [ [ name: \"Joe Bloggs\", email: \"joe@bloggs.net\" ]]",209],["@RestApiParam(name=\"username\", type=\"email\", paramType = RestApiParamType.QUERY)",122],["@RestApiParam(name = \"username\", type = \"email\", paramType = RestApiParamType.QUERY)",66],["* Sends customizable email notifications.",65],["to user.email",64],["@RequiresPlugin(id = 'email-ext')",63]],"useCount":3970},{"word":"empty","context":[["title[0].value().empty",448],["empty: false",88],["return Optional.empty()",94],["stashUserName[0].value().empty",96],["configs[0].value().empty",96],["stashUserPassword[0].value().empty",96],["stashServerBaseUrl[0].value().empty",96],["label[0].value().empty",384],["numBuilds[0].value().empty",448],["yaxis[0].value().empty",448]],"useCount":6952},{"word":"enable","context":[["this.objectMapper = objectMapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)",31],["// need to be set to actually enable that stress mode.  The key of the map is the stress mode and",46],["// enable query caching by default",48],["// uncomment these to enable remote dependency resolution from public Maven repositories",50],["// enable Sitemesh preprocessing of GSP pages",329],["// Uncomment these to enable additional asset-pipeline capabilities",334],["// Uncomment these (or add new ones) to enable additional resources capabilities",370],["// uncomment the below to enable remote dependency resolution",409],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["grails.enable.native2ascii = true",780]],"useCount":3442},{"word":"enabled","context":[["// display steps when steps are enabled and laststep is not firststep",49],["enabled: true,",60],["enabled: true",63],["if (enabled) {",70],["enabled = true",155],["enabled = true;",214],["boolean enabled",222],["boolean enabled = true",282],["enabled = false",309],["// enabled native2ascii conversion of i18n properties files",765]],"useCount":3968},{"word":"encoding","context":[["grails.converters.encoding = \"UTF-8\"",690],["encoding = 'UTF-8'",461],["<?xml version=\"1.0\" encoding=\"utf-8\"?>",56],["publisherNode.config[0].encoding[0].value() == 'default'",64],["String encoding",65],["// Uncomment and edit the following lines to start using Grails encoding & escaping improvements",73],["grails.converters.encoding=\"UTF-8\"",77],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",137],["grails.views.gsp.encoding=\"UTF-8\"",180],["grails.views.gsp.encoding = \"UTF-8\"",332]],"useCount":3363},{"word":"end","context":[["remarks:        to ARIN members and end-users in the ARIN region.",74],["xml.end()",81],["end: start.plusMinutes(4).millis,",88],["} // end of class",96],["} // end of method",100],["} // end of if",121],["\"end\"]",130],["\"end\",",133],["password: end",248],[".end()",326]],"useCount":4056},{"word":"engine","context":[["LenskitRecommenderEngine engine = LenskitRecommenderEngine.build(config)",46],["assertThat(engine, notNullValue())",48],["import org.pillarone.riskanalytics.core.simulation.engine.SimulationScope",52],["def engine = LenskitRecommenderEngine.build(config)",59],["MarkupTemplateEngine engine = new MarkupTemplateEngine(new TemplateConfiguration())",64],["engine.remoteSession {",65],["LenskitRecommenderEngine engine =",66],["import org.hibernate.engine.SessionImplementor",66],["def template = engine.createTemplate '''",80],["def engine = new SimpleTemplateEngine()",158]],"useCount":2440},{"word":"entity","context":[["import org.ofbiz.entity.condition.*;",84],["import org.ofbiz.entity.*;",188],["import org.ofbiz.entity.util.EntityUtil;",131],["import org.ofbiz.entity.util.*;",88],["import org.ofbiz.entity.condition.EntityCondition;",97],["*       institute patent litigation against any entity (including a",98],["*       outstanding shares, or (iii) beneficial ownership of such entity.",98],["*       direction or management of such entity, whether by contract or",98],["*       control with that entity. For the purposes of this definition,",98],["*       \"Legal Entity\" shall mean the union of the acting entity and all",98]],"useCount":4876},{"word":"entry","context":[["entry[3].'com.flowdock.jenkins.BuildResult'[0].value() == 'UNSTABLE'",224],["entry[5].'com.flowdock.jenkins.BuildResult'[0].value() == 'NOT_BUILT'",224],["entry[4].boolean[0].value() == true",192],["entry[2].boolean[0].value() == true",192],["entry[4].'com.flowdock.jenkins.BuildResult'[0].value() == 'FAILURE'",224],["entry[2].'com.flowdock.jenkins.BuildResult'[0].value() == 'FIXED'",224],["notifyMap[0].entry.size() == 6",224],["entry[0].'com.flowdock.jenkins.BuildResult'[0].value() == 'ABORTED'",224],["entry {",331],["entry[1].'com.flowdock.jenkins.BuildResult'[0].value() == 'SUCCESS'",224]],"useCount":7979},{"word":"env","context":[["EnvVars env = new EnvVars()",53],["env('WORKSPACE_NAME',workspaceFolderName)",307],["#!/usr/bin/env groovy",366],["testEnvOpt = \"--test-env=\" + scriptFileName",57],["env | sort | sed \"s/\\\\(.*\\\\)AWS\\\\(.*\\\\)=\\\\(.\\\\{6\\\\}\\\\).*/\\\\1AWS\\\\2=\\\\3xxxxxxxxxxxxx/\"",62],["def env = System.getenv()",78],["import org.springframework.core.env.Environment",115],["Ant.property(environment:\"env\")",133],["grailsHome = Ant.antProject.properties.\"env.GRAILS_HOME\"",147],["env('PROJECT_NAME',projectFolderName)",301]],"useCount":4046},{"word":"environment","context":[["// environment specific settings",654],["TransactionToken transaction, String environment) throws TException {",325],["AccessToken creds, TransactionToken transaction, String environment)",225],["// set per-environment serverURL stem for creating absolute links",193],["String environment) throws TException {",166],["transaction, environment);",160],["Ant.property(environment:\"env\")",133],["environment);",130],["import de.iteratec.osm.measurement.environment.Browser",125],["import de.iteratec.osm.measurement.environment.Location",107]],"useCount":4409},{"word":"environments","context":[["environments {",2247],["This block can be used inside the `environments()` block in the same way as the",31],["assertRelationshipExists(\"environments/$environmentId/relationships\",",30],["assertRelationshipJsonldExists(\"environments/$environmentId/relationships\",",30],["// required for custom environments",20],["/*environments {",18],["environments { development {",17],["def 'environments work with map arg'() {",15],["def 'environments work with context'() {",15],["def 'environments work with combination'() {",15]],"useCount":2476},{"word":"equals","context":[["if(result.equals(\"seconds\")) {",85],["boolean equals(other) {",544],["boolean equals(o) {",370],["if(graphView.text().equals(\"\")) {",265],["boolean equals(Object obj) {",207],["public boolean equals(Object obj) {",145],["waitFor { currentDatabase.text().equals(newDatabaseName) }",118],["Assert.assertFalse(bo.equals(immutable))",96],["Assert.assertFalse(immutable.equals(bo))",94],["boolean equals(Object o) {",87]],"useCount":6799},{"word":"error","context":[["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["then:\"A 404 error is returned\"",1946],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["\"500\"(view:'/error')",566],["error  'org.codehaus.groovy.grails.web.servlet',        // controllers",443],["\"grails-app/views/error.gsp\"",415],["error  'org.codehaus.groovy.grails.web.servlet',  //  controllers",336],["} catch(geb.error.RequiredPageContentNotPresent e) {",302],["then: \"A 404 error is returned\"",270]],"useCount":21203},{"word":"errors","context":[["if (scheduledExecution && scheduledExecution.errors.hasErrors()) {",125],["validator.validate([], description, errors)",371],["scheduledExecution.errors.allErrors.each {",125],["assertFalse(execution.errors.hasErrors())",132],["Errors errors",143],["assertNotNull(execution.errors)",156],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["ack.errors",239],["0 * errors._",283],["def errors = Mock(Errors)",414]],"useCount":9033},{"word":"escapes","context":[["taglib = 'none' // escapes output from taglibs",444],["// escapes all not-encoded output at final stage of outputting",443],["staticparts = 'none' // escapes output from static template parts",442],["scriptlet = 'html' // escapes output from scriptlets in GSPs",366],["expression = 'html' // escapes values inside ${}",362],["expression = 'html' // escapes values inside null",80],["scriptlet = 'none' // escapes output from scriptlets in GSPs",77],["// argument are wrapped in an ExecArgWrapper that escapes commas",13]],"useCount":2227},{"word":"eucalyptus","context":[["import edu.ucsb.eucalyptus.msgs.GroovyAddClassUUID",110],["package com.eucalyptus.tests.awssdk",52],["import edu.ucsb.eucalyptus.msgs.EucalyptusData;",53],["import com.eucalyptus.binding.HttpParameterMapping;",56],["package com.eucalyptus.network",63],["import com.eucalyptus.binding.HttpEmbedded",72],["package edu.ucsb.eucalyptus.msgs",80],["import edu.ucsb.eucalyptus.msgs.BaseMessage",80],["import edu.ucsb.eucalyptus.msgs.EucalyptusData",89],["import com.eucalyptus.binding.HttpParameterMapping",92]],"useCount":3687},{"word":"evaluate","context":[["shell.evaluate \"\"\"",68],["def target = evaluate('''",69],["shell.evaluate(\"import com.jidesoft.swing.JideSplitButton; JideSplitButton.class\")",72],["new GroovyShell().evaluate \"\"\"",93],["def toString = evaluate(\"\"\"",98],["evaluate \"\"\"",114],["def mapping = builder.evaluate {",118],["project.evaluate()",742],["shell.evaluate(\"\"\"",229],["//Object result = expr.evaluate(doc, XPathConstants.NODESET);",138]],"useCount":3553},{"word":"event","context":[["def onChange = { event ->",573],["def onConfigChange = { event ->",454],["// The event is the same as for 'onChange'.",404],["// event.application, event.manager, event.ctx, and event.plugin.",392],["// event.application, event.manager, event.ctx, and event.plugin.",392],["// event.application, event.manager, event.ctx, and event.plugin.",392],["// event.application, event.manager, event.ctx, and event.plugin.",392],["// watching is modified and reloaded. The event contains: event.source,",391],["// watching is modified and reloaded. The event contains: event.source,",391],["// TODO Implement additions to web.xml (optional), this event occurs before",323]],"useCount":12035},{"word":"events","context":[["import org.eclipse.smarthome.core.events.EventSubscriber",79],["Map events = [",46],["events.add(event);",56],["import org.eclipse.smarthome.core.items.events.ItemEventFactory",62],["// parse events into attributes",193],["// Parse incoming device messages to generate events",146],["import org.eclipse.smarthome.core.events.EventPublisher",85],["import org.eclipse.smarthome.core.events.Event",81],["events {",80],["def events = []",64]],"useCount":2249},{"word":"evt","context":[["if (evt.value == \"active\") {",41],["takeAction(evt)",93],["def modeChangeHandler(evt) {",61],["log.debug \"Contact is in ${evt.value} state\"",58],["def eventHandler(evt) {",54],["log.debug \"$evt.name: $evt.value\"",54],["log.debug \"$evt.name: $evt.value\"",54],["def locationHandler(evt) {",51],["def hub = evt?.hubId",44],["def description = evt.description",44]],"useCount":2517},{"word":"ex","context":[["catch(Exception ex)",86],["} catch (IOException ex) {",91],["catch (ex) {",97],["ex.printStackTrace();",101],["catch (Exception ex) {",102],["} catch(Exception ex) {",115],["ex.printStackTrace()",269],["} catch (ex) {",286],["throw ex",309],["} catch (Exception ex) {",902]],"useCount":5047},{"word":"example","context":[["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["context.httpRequest('http://www.example.com') {",69],["url[0].value() == 'http://www.example.com'",69],["package org.example",71],["* For example:",85],["def changeSet = new ChangeSet(new DatabaseChangeLog(\"com/example/test.xml\"))",91],["package com.example",91],["*       (an example is provided in the Appendix below).",98],["// For example you can create directory under project tree:",138],["job('example') {",231]],"useCount":3978},{"word":"exception","context":[["assertEquals(400, exception.response.status)",286],["if (exception) {",169],["if (exception instanceof AccountExpiredException) {",136],["def exception = session[WebAttributes.AUTHENTICATION_EXCEPTION]",113],["else if (exception instanceof CredentialsExpiredException) {",112],["else if (exception instanceof LockedException) {",112],["else if (exception instanceof DisabledException) {",112],["throw exception",109],["} catch(geb.waiting.WaitTimeoutException exception) {",107],["fail('should always exception');",106]],"useCount":5461},{"word":"exceptions","context":[["*\t\t4.\tThe above listed exceptions to the original licensing do not apply to the holder of the",52],["// request parameters to mask when logging exceptions",610],["import org.codehaus.groovy.grails.web.taglib.exceptions.GrailsTagException",196],["*\tThe original licensing applies, with the following exceptions:",53],["import org.codehaus.groovy.grails.web.converters.exceptions.ConverterException",56],["import org.transmartproject.core.exceptions.NoSuchResourceException",68],["exceptions {}",72],["// rulesets/exceptions.xml",87],["import defpackage.exceptions.ResourceNotFound",115],["import org.transmartproject.core.exceptions.InvalidArgumentsException",128]],"useCount":2377},{"word":"excludes","context":[["excludes[0].value() == ''",55],["// excludes 'ehcache'",1161],["excludes[0].value() == 'exclude/*'",72],["excludes(artifactsContext.excludes)",32],["excludes[0].value().empty",33],["return [includes, excludes, filterReaders]",36],["excludes[0].value() == 'foo.xml, foo.txt'",46],["[includes: includes, excludes: excludes]",46],["[includes: includes, excludes: excludes]",46],["excludes[0].value() == 'exclude files'",55]],"useCount":2751},{"word":"exec","context":[["seServiceControl.demand.scheduleTempJob { auth, exec ->",60],["super.exec()",59],["jacocoNode.execPattern[0].value() == '**/target/**.exec'",64],["assertNotNull exec.save()",118],["def exec = new Execution(",144],["void exec() {",153],["<sequence><command><exec>test</exec></command></sequence>",207],["<sequence><command><exec>test</exec></command></sequence>",207],["project.exec {",240],["exec \"\"\"",470]],"useCount":3719},{"word":"execute","context":[["command.execute()",143],["} execute()",122],["execute {",164],["def result = task.execute(stage)",181],[".execute()",192],["TaskResult execute(Stage stage) {",253],["void execute() {",294],["def execute() {",378],["task.execute()",489],["sql.execute \"\"\"",116]],"useCount":9655},{"word":"executeInContext","context":[["ContextHelper.executeInContext(staticAnalysisClosure, staticAnalysisContext)",117],["ContextHelper.executeInContext(postBuildClosure, postBuildContext)",45],["executeInContext(closure, context)",48],["ContextHelper.executeInContext(envClosure, envContext)",52],["ContextHelper.executeInContext(closure, stepContext)",53],["ContextHelper.executeInContext(publishOverSshClosure, publishOverSshContext)",55],["ContextHelper.executeInContext(downstreamClosure, downstreamContext)",55],["import static javaposse.jobdsl.dsl.ContextHelper.executeInContext",87],["ContextHelper.executeInContext(closure, context)",1019],["ContextHelper.executeInContext(flexiblePublishClosure, context)",32]],"useCount":3240},{"word":"executed","context":[["when: \"The index action is executed\"",95],["// TODO Implement code that is executed when the application shuts down (optional)",264],["// TODO Implement code that is executed when any artefact that this plugin is",380],["// TODO Implement code that is executed when the project configuration changes.",398],["when:\"The edit action is executed with a null domain\"",646],["when:\"The show action is executed with a null domain\"",647],["when:\"The create action is executed\"",648],["when:\"The save action is executed with a valid instance\"",656],["when:\"The save action is executed with an invalid instance\"",658],["when:\"The index action is executed\"",661]],"useCount":6321},{"word":"execution","context":[["// DroidMate, an automated execution generator for Android apps.",407],["assertEquals 1, execution.workflow.commands.size()",60],["assertNotNull(execution)",172],["assertNotNull(execution.errors)",156],["assertFalse(execution.errors.hasErrors())",132],["final ScheduledExecution execution = scheduledExecution",104],["</execution>",89],["//test execution",86],["<execution>",70],["final ScheduledExecution execution = results.scheduledExecution",64]],"useCount":4093},{"word":"exists","context":[["assertTrue file.exists()",146],["existing = UserRole.exists(ur.user.id, r.id)",96],["assertFalse file.exists()",102],["static boolean exists(long userId, long roleId) {",108],["assert file.exists()",118],["return 'userRole.exists'",138],["if (!file.exists()) {",271],["if (file.exists()) {",325],["then:\"It exists\"",658],["void \"Test that the delete action deletes an instance if it exists\"() {",739]],"useCount":8094},{"word":"exit","context":[["System.exit(2)",50],["System.exit(1)",556],["System.exit(0)",457],["exit(1)",305],["exit 1",257],["System.exit(-1)",221],["System.exit(1);",141],["System.exit 1",132],["System.exit(0);",111],["shell(\"unzip -q -o ./bin/tests/tests.zip -d ./bin/tests/Windows_NT.${architecture}.${configuration} || exit 0\")",56]],"useCount":2912},{"word":"expect","context":[["expect:\"fix me\"",461],["expect: false",60],["// expect:",80],["expect: 'Display Preference button exists'",95],["import static spock.util.matcher.HamcrestSupport.expect",97],["expect: 'at Admin Page'",163],["expect: true",188],["expect:",28952],["expectedException.expect(InvalidUserDataException.class)",56],["// We don't expect to see a job generated except in these scenarios",54]],"useCount":31314},{"word":"expected","context":[["@Test(expected=IllegalArgumentException.class)",1164],["@Test(expected = IllegalArgumentException.class)",738],["AstAssert.assertSyntaxTree([expected], result)",335],["expected: '''\\",287],["result == expected",252],["@Test(expected = RiceIllegalStateException.class)",233],["actual == expected",222],["def expected = new BlockStatement(",121],["def expected = [",168],["def expected = '''\\",168]],"useCount":9927},{"word":"export","context":[["import com.recomdata.transmart.data.export.util.FileWriterUtil",54],["beans = builder.export {",48],["package org.transmartproject.export",62],["when: 'Expand export'",53],["export TMPDIR=/jobdir/\\${LSB_JOBID};",70],["export TOOL_DEPENDENCIES=$TOOL_DEPENDENCIES &&",72],["package com.recomdata.transmart.data.export",142],["mp-export:      afi ipv6.unicast to AS1 announce AS2",240],["export:         to AS1 announce AS2",241],["export = false",1113]],"useCount":3259},{"word":"expr","context":[["import org.codehaus.groovy.ast.expr.ArgumentListExpression",108],["import org.codehaus.groovy.ast.expr.BinaryExpression",87],["import org.codehaus.groovy.ast.expr.ClosureExpression",109],["//XPathExpression expr  = xpath.compile(\"item\");",138],["//Object result = expr.evaluate(doc, XPathConstants.NODESET);",138],["import org.codehaus.groovy.ast.expr.*",146],["import org.codehaus.groovy.ast.expr.VariableExpression",155],["import org.codehaus.groovy.ast.expr.Expression",158],["import org.codehaus.groovy.ast.expr.ConstantExpression",204],["import org.codehaus.groovy.ast.expr.MethodCallExpression",234]],"useCount":2467},{"word":"expression","context":[["expression = 'html' // escapes values inside ${}",362],["assertNotNull(expression);",54],["//  For most cases, GenePattern server cannot accept gct file with empty expression ratio.",69],["expression {",72],["expression?.expression?.visit this",77],["expression?.expression?.visit this",77],["expression = 'html' // escapes values inside null",80],["assertSyntaxTree([expected.expression], [actual.expression])",102],["assertSyntaxTree([expected.expression], [actual.expression])",102],["Reference expression",174]],"useCount":3024},{"word":"ext","context":[["import javax.ws.rs.ext.Provider",208],["ext {",46],["ext.pid = \"${ -> node.pidFile.getText('UTF-8').trim()}\"",48],["J2objcConfig ext = new J2objcConfig(proj)",53],["import io.vertx.groovy.ext.unit.TestContext",55],["import io.vertx.groovy.ext.web.Router",56],["@RequiresPlugin(id = 'email-ext')",63],["((io.vertx.core.Handler) this.delegate).handle((io.vertx.ext.web.RoutingContext)arg0.getDelegate());",82],["package io.vertx.groovy.ext.web.handler;",98],["import io.vertx.groovy.ext.web.RoutingContext",133]],"useCount":2551},{"word":"extends","context":[["class MyTest extends TestCase {",82],["class Application extends GrailsAutoConfiguration {",325],["class B extends A {",293],["extends Specification",129],["class Inheritor extends Base {",112],["class UserSpec extends Specification {",103],["class B extends A{",92],["extends CommandSupport",90],["class UserControllerSpec extends Specification {",89],["class MyServiceTests extends GriffonUnitTestCase {",82]],"useCount":8014},{"word":"extensions","context":[["context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'.size() == 1",54],["grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format",401],["grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format",401],["extensions {",296],["extensions[0].children().size() == 1",114],["extensions.size() == 1",114],["context.scmNodes[0].extensions.size() == 1",84],["with(context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'[0]) {",69],["with(context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'[0]) {",69],["context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'.size() == 1",54]],"useCount":2720},{"word":"f","context":[["if (f.exists()) {",96],["f.textbox()",268],["def f = namespace(lib.FormTagLib);",121],["* @author f.lautenschlager",110],["f.setTimeZone(location.timeZone ?: timeZone(time))",91],["def f = new java.text.SimpleDateFormat(fmt)",92],["f.format(t)",93],["def f",138],["rm -f $WORKSPACE/.classpath $WORKSPACE/.project",180],["f.checkbox()",153]],"useCount":7258},{"word":"factory","context":[["import org.springframework.beans.factory.annotation.Value",596],["def field = factory.create(bean, fieldName)",124],["package groovy.swing.factory",115],["package griffon.builder.pivot.factory",111],["import org.springframework.beans.factory.annotation.Autowired;",125],["XPath xpath = factory.newXPath();",139],["XPathFactory factory = XPathFactory.newInstance();",139],["import org.springframework.beans.factory.annotation.Qualifier",144],["import org.springframework.beans.factory.InitializingBean",340],["import org.springframework.beans.factory.annotation.Autowired",4308]],"useCount":9210},{"word":"fail","context":[["fail()",1728],["fail \"Implement me\"",1103],["import static org.junit.Assert.fail",370],["fail();",150],["fail 'should not make it here'",116],["fail('should always exception');",106],["msg = g.message(code: \"springSecurity.errors.login.fail\")",101],["fail(e)",68],["then: 'validation should fail'",75],["fail(\"IllegalArgumentException not thrown\");",79]],"useCount":5997},{"word":"failOnError","context":[["questionnaire.save(failOnError:true)",47],["author.save(flush: true, failOnError: true)",54],["it.save(failOnError:true)",50],[".save(failOnError: true)",94],[".save(flush: true, failOnError: true)",42],["failOnError[0].value() == false",94],["failOnError[0].value() == true",94],["failOnError()",96],[").save(failOnError:true)",147],[").save(failOnError: true)",501]],"useCount":2289},{"word":"failed","context":[["context.publisherNodes[0].regexpForFailed[0].value() == 'failed'",96],["writeDescription('Build failed due to timeout after {0} minutes')",56],["if (result.failed) {",44],["failed = result.failed",42],["failed = result.failed",42],["boolean failed = false",40],["failed = true;",82],["* Callback after a failed login. Redirects to the auth page with a warning message.",130],["ack.failed",257],["failed = true",288]],"useCount":2736},{"word":"false","context":[["assert false",2346],["return false;",2631],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["grails.json.legacy.builder = false",688],["static transactional = false",798],["export = false",1113],["false",1360],["version false",1438],["return false",10051],["constraints(nullable: \"false\")",3732]],"useCount":96047},{"word":"fasterxml","context":[["import com.fasterxml.jackson.databind.ObjectMapper",1343],["import com.fasterxml.jackson.annotation.JsonTypeInfo",86],["import com.fasterxml.jackson.databind.SerializationFeature",94],["import com.fasterxml.jackson.annotation.JsonIdentityInfo",98],["import com.fasterxml.jackson.core.type.TypeReference",101],["import com.fasterxml.jackson.annotation.JsonInclude",107],["import com.fasterxml.jackson.annotation.JsonIgnoreProperties",110],["import com.fasterxml.jackson.annotation.JsonIgnore",240],["import com.fasterxml.classmate.TypeResolver",275],["import com.fasterxml.jackson.annotation.JsonProperty",286]],"useCount":3740},{"word":"field","context":[["field(commonField)",65],["def field = factory.create(bean, fieldName)",124],["def container = field.getAWTComponent()",123],["fields.each { field ->",72],["return field",69],["String field",68],["field.accessible = true",61],["<error descr=\"Cannot assign a value to final field 'foo'\">foo</error> = 2",56],["field.setAccessible(true)",51],["return field;",46]],"useCount":3420},{"word":"file","context":[["*   This file is part of 'Nextflow'.",1092],["import java.nio.file.Paths",980],["import java.nio.file.Path",933],["//grails.project.war.file = \"target/${appName}-${appVersion}.war\"",873],["import java.nio.file.Files",801],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["import org.gradle.api.file.FileCollection",657],["//                             \"file:${userHome}/.grails/${appName}-config.properties\",",628],["//                             \"file:${userHome}/.grails/${appName}-config.groovy\"]",627],["file[0].value() == 'data.prop'",480]],"useCount":38366},{"word":"files","context":[["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["// enabled native2ascii conversion of i18n properties files",765],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["// locations to search for config files that get merged into the main config;",493],["// config files can either be Java properties files or ConfigSlurper scripts",205],["// config files can either be Java properties files or ConfigSlurper scripts",205],["// locations to search for config files that get merged into the main config",204],["return files",132],["def files = []",121],["*       (b) You must cause any modified files to carry prominent notices",98]],"useCount":7527},{"word":"filter","context":[["def gfilter = filter.globalFilter",117],["'filter-mapping' {",99],["configs[0].'hudson.plugins.parameterizedtrigger.matrix.MatrixSubsetBuildParameters'[0].filter[0].value() ==",83],["'filter' {",77],["descr:        This filter contains customers",68],["filters.each { filter ->",64],["</C:comp-filter>",59],["if (filter) {",59],["addToCriteria(filter.getRestrictions());",59],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904]],"useCount":6603},{"word":"final","context":[["private final Project project",206],["private static final long serialVersionUID = 1",508],["public final GriffonUnitRule griffon = new GriffonUnitRule()",179],["final SOURCE = '''",3058],["final PsiElement resolved = ref.resolve();",193],["final SOURCE = \"\"\"",219],["private static final long serialVersionUID = 1L;",253],["final TemplateManager manager = TemplateManager.getInstance(getProject());",310],["final String name",313],["// escapes all not-encoded output at final stage of outputting",443]],"useCount":25144},{"word":"finally","context":[["} finally {",5334],["finally {",2240],["finally",342],["}finally{",181],["finally{",54],["}finally {",34],["} finally{",30],["} finally {}",24],["checkPreferredItems(0, \"finally\", \"final\");",16],["} finally\t{",16]],"useCount":8327},{"word":"find","context":[["find 'from UserRole where user.id=:userId and role.id=:roleId',",73],["if (matcher.find()) {",94],["then: 'Should not find'",88],["assert m.find()",70],["throw new FileNotFoundException( \"Could not find the generated repository. \" + fileRepoFolder );",65],["throw new FileNotFoundException( \"Could not find the generated jar. \" + jarFileRepoFolder );",58],["assertThat(\"Expected to find entries in the HAR\", har.getLog().getEntries(), not(empty()))",54],["//The bin folder where to find the generated scripts.",99],["pathAndValues.find {",171],["assert osGroup != null : \"Could not find os group for ${os}\"",56]],"useCount":4483},{"word":"first","context":[["if (first) {",97],["grails.mime.types = [ // the first one is the default format",306],["all:           '*/*', // 'all' maps to '*' or the first available format in withFormat",275],["first = false",191],["String first",151],["String first, last",146],["boolean first = true",136],["strategy: node-first",118],["if (!first) {",95],["// Unzip the tests first.  Exit with 0",88]],"useCount":5912},{"word":"firstName","context":[["assert p1.firstName == p2.firstName",70],["assert p1.firstName == p2.firstName",70],["String firstName;",37],["Scientist scientistInstance = new Scientist(firstName: \"Test\", lastName: \"User\", email:\"my@email.com\", password:\"test\")",62],["assert person.firstName == \"Robert\"",52],["def p = new Person(firstName: 'Jack', lastName: 'Nicholson')",50],["obj2.setProperty(\"firstName\", \"wilma\")",42],["obj.setProperty(\"firstName\", \"fred\")",80],["def p1 = new Person(firstName: 'Jack', lastName: 'Nicholson')",125],["String firstName",915]],"useCount":2324},{"word":"fixtures","context":[["import org.gradle.integtests.fixtures.WellBehavedPluginTest",45],["import org.gradle.integtests.fixtures.TestResources",50],["import com.intellij.testFramework.fixtures.LightCodeInsightFixtureTestCase",426],["import org.gradle.test.fixtures.file.TestFile",268],["import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider",214],["import org.gradle.integtests.fixtures.AbstractIntegrationSpec",198],["import com.intellij.testFramework.fixtures.JavaCodeInsightFixtureTestCase",72],["package org.gradle.integtests.fixtures",64],["import com.intellij.testFramework.fixtures.DefaultLightProjectDescriptor",62],["import org.gradle.integtests.fixtures.AbstractIntegrationTest",56]],"useCount":2431},{"word":"flash","context":[["flash.args = [params.id]",652],["controller.flash.message != null",736],["assert flash.message != null",2293],["flash.message != null",2894],["assert controller.flash.message != null",377],["flash.message = message(",285],["flash.message = msg",185],["viewUtils.resolveException(flash, session.locale, e)",140],["flash.type=\"error\"",133],["flash.type = \"error\"",132]],"useCount":12425},{"word":"flowdock","context":[["context.flowdock('another-token') {",160],["@RequiresPlugin(id = 'jenkins-flowdock-plugin')",52],["entry[4].'com.flowdock.jenkins.BuildResult'[0].value() == 'FAILURE'",224],["entry[3].'com.flowdock.jenkins.BuildResult'[0].value() == 'UNSTABLE'",224],["entry[1].'com.flowdock.jenkins.BuildResult'[0].value() == 'SUCCESS'",224],["entry[0].'com.flowdock.jenkins.BuildResult'[0].value() == 'ABORTED'",224],["name() == 'com.flowdock.jenkins.FlowdockNotifier'",224],["entry[2].'com.flowdock.jenkins.BuildResult'[0].value() == 'FIXED'",224],["entry[5].'com.flowdock.jenkins.BuildResult'[0].value() == 'NOT_BUILT'",224],["1 * jobManagement.requirePlugin('jenkins-flowdock-plugin')",205]],"useCount":2736},{"word":"flush","context":[["writer.flush()",326],["response.outputStream.flush()",242],["session.flush()",387],["instance.save(flush: flush, insert: true)",154],[".save(flush:true)",171],[").save(flush: true)",200],["static UserRole create(User user, Role role, boolean flush = false) {",204],["if (flush) { UserRole.withSession { it.flush() } }",240],["if (flush) { UserRole.withSession { it.flush() } }",240],["instance.save(flush: flush, insert: true)",154]],"useCount":7591},{"word":"folder","context":[["//The bin folder where to find the generated scripts.",99],["names.sort() // needs to sort as there is no guarantee on the order within a folder",78],["Folder folder = jenkinsRule.jenkins.createProject(Folder, 'folder')",112],["Folder folder = jenkinsRule.jenkins.createProject(Folder, 'folder')",112],["public TemporaryFolder folder = new TemporaryFolder()",119],["def folder = Files.createTempDirectory('test')",136],["* along with this program. Look for COPYING file in the top folder.",156],["folder?.deleteDir()",160],["folder.resolve('.command.sh').text ==",58],["@WithPlugin('cloudbees-folder.hpi')",56]],"useCount":3702},{"word":"following","context":[["* following conditions:",364],["*       meet the following conditions:",98],["* so, subject to the following conditions:",115],["furnished to do so, subject to the following conditions:",134],["*   following conditions are met:",141],["*  furnished to do so, subject to the following conditions:",142],["* provided that the following conditions are met:",178],["* the following conditions:",457],["*           of the following places: within a NOTICE text file distributed",98],["* furnished to do so, subject to the following conditions:",1420]],"useCount":4353},{"word":"foo","context":[["def foo() {}",167],["def foo() {",1433],["void foo() {",721],["void foo() {}",165],["foo()",468],["def foo",404],["def foo(){}",260],["stringsMatch('foo', 'bar', false)",218],["def foo = new Foo()",196],["def foo(Integer a) {",180]],"useCount":28321},{"word":"for","context":[["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["* distributed with this work for additional information",3045],["*  distributed with this work for additional information",2945],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["* for more details.",902]],"useCount":62311},{"word":"form","context":[["form:          'application/x-www-form-urlencoded',",480],["* @attr form",135],["form multipartForm {",2826],["form {",647],["multipartForm: 'multipart/form-data',",549],["form:          'application/x-www-form-urlencoded',",480],["form: 'application/x-www-form-urlencoded',",271],["'form-login'()",111],["form: 'application/x-www-form-urlencoded',",271],["multipartForm: 'multipart/form-data'",249]],"useCount":9455},{"word":"format","context":[["editor.value = format",219],["// in the classpath in ConfigSlurper format",494],["def day = df.format(new Date())",118],["response.format='json'",121],["import org.joda.time.format.DateTimeFormatter",128],["import org.joda.time.format.DateTimeFormat",153],["all:           '*/*', // 'all' maps to '*' or the first available format in withFormat",275],["\"/$controller/$action?/$id?(.$format)?\"{",297],["grails.mime.types = [ // the first one is the default format",306],["grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format",401]],"useCount":7776},{"word":"found","context":[["*   along with this program. It can be found at the root of the project page.",313],["assert quote == 'not found :('",72],["if (found) {",79],["boolean found = false",80],["flash.message = message(code: 'default.not.found.message', args: [",86],["if (!found) {",101],["code: 'default.not.found.message',",104],["found = true",178],["// URL where documentation can be found",212],["// URL where source can be found",215]],"useCount":4913},{"word":"framework","context":[["fwkControl.demand.authorizeProjectJobAll { framework, resource, actions, project -> return true }",113],["import org.osgi.framework.Bundle",78],["import static junit.framework.Assert.assertEquals",81],["import org.osgi.framework.BundleContext",87],["* @param framework",121],["import junit.framework.TestCase",130],["fwkControl.demand.getCommand { project, type, command, framework ->",136],["Framework framework = frameworkService.getRundeckFramework()",137],["import junit.framework.Assert",152],["fwkControl.demand.existsFrameworkProject { project, framework ->",207]],"useCount":3505},{"word":"frameworkService","context":[["service.frameworkService = Stub(FrameworkService) {",43],["controller.frameworkService = mockWith(FrameworkService) {",52],["sec.frameworkService = mockWith(FrameworkService){",54],["service.frameworkService = Mock(FrameworkService)",56],["frameworkService.authResourceForProject(project),",68],["AuthContext authContext = frameworkService.getAuthContextForSubjectAndProject(session.subject,params.project)",71],["Framework framework = frameworkService.getRundeckFramework()",137],["controller.frameworkService=Mock(FrameworkService){",155],["AuthContext authContext = frameworkService.getAuthContextForSubject(session.subject)",206],["sec.frameworkService = fwkControl.createMock()",304]],"useCount":2586},{"word":"from","context":[["grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format",401],["scriptlet = 'html' // escapes output from scriptlets in GSPs",366],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["*  from Wholly Grails.",270],["// from public Maven repositories",409],["staticparts = 'none' // escapes output from static template parts",442],["taglib = 'none' // escapes output from taglibs",444],["// resources that are excluded from plugin packaging",508],["mp-import:      afi ipv6.unicast from AS1 accept ANY",244],["inherits true // Whether to inherit repository definitions from plugins",728]],"useCount":15159},{"word":"fwkControl","context":[["fwkControl.demand.getRundeckFramework {-> return null }",257],["def fwkControl = mockFor(FrameworkService, true)",381],["fwkControl.demand.projects {return []}",50],["fwkControl.demand.authorizeProjectJobAll {framework, resource, actions, project -> return true}",50],["fwkControl.demand.existsFrameworkProject { project, framework ->",207],["fwkControl.demand.getCommand { project, type, command, framework ->",136],["fwkControl.demand.getAuthContextForSubjectAndProject { subject,proj -> testUserAndRolesContext() }",120],["fwkControl.demand.authorizeProjectJobAll { framework, resource, actions, project -> return true }",113],["sec.frameworkService = fwkControl.createMock()",304],["fwkControl.demand.getFrameworkFromUserSession { session, request -> return null }",347]],"useCount":2458},{"word":"g","context":[["\"\"\", g)",59],["msg = g.message(code: \"springSecurity.errors.login.fail\")",101],["msg = g.message(code: \"springSecurity.errors.login.disabled\")",99],["msg = g.message(code: \"springSecurity.errors.login.passwordExpired\")",98],["msg = g.message(code: \"springSecurity.errors.login.expired\")",98],["// The input branch name (e.g. master)",97],["new ScriptTraversal<>(g, \"gremlin-groovy\", \"\"\"",121],["g.V.match(",127],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["msg = g.message(code: \"springSecurity.errors.login.locked\")",92]],"useCount":3914},{"word":"geb","context":[["import geb.Module",279],["} catch(geb.error.RequiredPageContentNotPresent e) {",302],["import geb.Page",564],["} catch (geb.waiting.WaitTimeoutException e) {",221],["import geb.Browser",198],["} catch (geb.error.RequiredPageContentNotPresent e) {",178],["import geb.navigator.Navigator",169],["import geb.spock.GebSpec",148],["import geb.spock.GebReportingSpec",229],["} catch(geb.waiting.WaitTimeoutException e) {",883]],"useCount":5656},{"word":"gene","context":[["SortedMap<Long, Map<Long, GeneWithSnp>> genes = geneSnpMapByChrom.get(gene.chrom);",54],["geneSnpMapByChrom.put(gene.chrom, genes);",54],["geneEntrezIdMap.put(gene.entrezId, gene);",54],["gene.name = row.keyword;",54],["gene.snpMap.put(chromPos, snpInfo);",54],["gene.chrom = chrom;",54],["if (gene.chrom.equals(chrom) == false) {",54],["gene.chrom + \" and \" + chrom);",54],["GeneWithSnp gene = geneEntry.getValue();",108],["Long chromPosGene = gene.snpMap.firstKey();",81]],"useCount":2434},{"word":"generated","context":[["//Check the existence of the generated repository.",70],["assert false, \"TODO: Provide a populateValidParams() implementation for this generated test suite\"",90],["// Check the existence of the generated unix script",88],["// TODO Auto-generated method stub",424],["// Automatically generated. Make future change here.",292],["// use sorted map to be able to predict the order in which tag attributes are generated",140],["//The bin folder where to find the generated scripts.",99],["*       not limited to compiled object code, generated documentation,",98],["*           within a display generated by the Derivative Works, if and",98],["* The closure parameter expects a configure block for direct manipulation of the generated XML. The {@code scm}",68]],"useCount":2727},{"word":"geoscript","context":[["import geoscript.layer.Raster",100],["import geoscript.feature.Field",109],["import geoscript.geom.Point",115],["import geoscript.proj.Projection",119],["import geoscript.geom.Geometry",119],["import geoscript.feature.Schema",133],["import geoscript.layer.Shapefile",158],["import geoscript.feature.Feature",148],["import geoscript.geom.Bounds",168],["import geoscript.layer.Layer",321]],"useCount":3004},{"word":"get","context":[["def theCard = root.data_.getCurrentPlayer().getHand().get(0)",451],["get {",112],["}.get()",168],["// locations to search for config files that get merged into the main config;",493],[".get()",260],["response = hawkularMetrics.get(",248],["TaskRepository.threadLocalTask.get()",232],["FreeStyleBuild freeStyleBuild = job.scheduleBuild2(0).get()",219],["static UserRole get(long userId, long roleId) {",216],["// locations to search for config files that get merged into the main config",204]],"useCount":23085},{"word":"getInstance","context":[["final boolean old = CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET;",63],["final TemplateManager manager = TemplateManager.getInstance(getProject());",310],["CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET = old;",63],["CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET = false;",63],["PsiDocumentManager.getInstance(project).commitAllDocuments()",121],["final TemplateManager manager = TemplateManager.getInstance(getProject())",117],["LookupManager.getInstance(project).hideActiveLookup()",93],["CodeInsightSettings.getInstance().COMPLETION_CASE_SENSITIVE = CodeInsightSettings.NONE;",92],["Calendar calendar = Calendar.getInstance()",65],["Calendar cal = Calendar.getInstance()",63]],"useCount":3716},{"word":"getName","context":[["assertScript '''interface Upper { String getName() }",30],["public String getName() {",226],["final String getName() { NAME }",37],["abstract String getName()",36],["String getName()",249],["String getName() {",822],["def getName('B');",30],["Assert.assertEquals(ORG_NAME, myDef.getName())",30],["def jobName = jobDetail.getName()",36],["def getName() {",34]],"useCount":2663},{"word":"getTransient","context":[["syncUpdate(getTransient(\"RIR-ALLOC-20\") + \"password: owner3\\npassword: hm\")",201],["dbfixture(getTransient(\"ASN123\"))",138],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: owner3\\npassword: hm\\npassword: lir\")",67],["syncUpdate(getTransient(\"ALLOC-PI\") + \"password: owner3\\npassword: hm\")",116],["syncUpdate(getTransient(\"P-LOW\") + \"password: hm\\npassword: owner3\")",113],["dbfixture(getTransient(\"ASB16\"))",106],["syncUpdate(getTransient(\"RIR-ALLOC-25\") + \"password: hm\\npassword: owner3\")",84],["syncUpdate(getTransient(\"ALLOC-UNS\") + \"password: owner3\\npassword: hm\")",280],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330]],"useCount":4470},{"word":"git","context":[["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["context.git {",996],["1 * mockJobManagement.logPluginDeprecationWarning('git', '2.2.6')",307],["git {",422],["1 * mockJobManagement.requirePlugin('git')",443],["1 * mockJobManagement.requireMinimumPluginVersion('git', '2.2.6')",230],["rm -rf $WORKSPACE/.git $WORKSPACE/.settings",180],["git{",272],["1 * jobManagement.logPluginDeprecationWarning('git', '2.2.6')",145],["1 * jobManagement.requirePlugin('git')",126]],"useCount":8408},{"word":"github","context":[["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["* This file is part of sklintyg (https://github.com/sklintyg).",194],["import com.github.zafarkhaja.semver.Version",88],["* @see <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/The-Configure-Block\">The Configure Block</a>",79],["context.scmNodes[0].browser[0].url[0].value() == 'https://github.com/jenkinsci/job-dsl-plugin/'",78],["* <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/Handling-Credentials\">Handling Credentials</a> for",77],["package com.github.dfrommi.pandoc.types",71],["root.'properties'[0].'com.coravy.hudson.plugins.github.GithubProjectProperty'[0].projectUrl[0].value() ==",65],["import io.github.javaconductor.gserv.GServ",66],["buildCommands += \"git clone https://github.com/dotnet/corefx fx\"",69]],"useCount":6837},{"word":"given","context":[["* Process the given node",51],["*\t\t\tleased, or anything other than freely given.",53],["given:",45207],["// given",129],["given: \"a record builder without a schema\"",59],["given: \"a set model builder without a schema\"",65],["given:\"A bunch of people\"",98],["//given",119],["// given:",119],["given()",124]],"useCount":48866},{"word":"global","context":[["inherits \"global\"",178],["// use 'ant' to access a global instance of AntBuilder",79],["inherits(\"global\")",96],["inherits(\"global\") {",1219],["inherits( \"global\" ) {",72],["inherits(\"global\") {}",42],["assertEquals new File(\"$defaultWorkPath/global-plugins\"), settings.globalPluginsDir",42],["import org.pillarone.riskanalytics.domain.pc.global.GlobalParameters",34],["GroovyMock(OpenstackProviderFactory, global: true)",38],["inherits 'global'",210]],"useCount":2504},{"word":"gmail","context":[["author: \"mphoeppner@gmail.com\"",64],["* @author <a href='mailto:donbeave@gmail.com'>Alexey Zhokhov</a>",66],["* @author Paolo Ciccarese <paolo.ciccarese@gmail.com>",74],["* @author <a href='mailto:benjamin.muschko@gmail.com'>Benjamin Muschko</a>",74],["* @author Ben Manes (ben.manes@gmail.com)",80],["context.publishJabber('me@gmail.com') {",81],["* @author <a href=\"mailto:jaredsburrows@gmail.com\">Jared Burrows</a>",97],["def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",",111],["* @author John DeRegnaucourt (jdereg@gmail.com)",454],["* @author Paolo Di Tommaso <paolo.ditommaso@gmail.com>",945]],"useCount":3256},{"word":"google","context":[["import com.google.common.base.Optional",206],["import com.google.common.base.Function",166],["import com.google.common.collect.Sets",231],["import com.google.common.io.Files",236],["import com.google.inject.Injector",247],["import com.google.inject.Inject",273],["import com.google.common.collect.Lists",372],["import com.netflix.spinnaker.clouddriver.google.security.GoogleNamedAccountCredentials",205],["import com.google.inject.Guice",199],["import com.google.common.collect.Maps",171]],"useCount":10154},{"word":"gradle","context":[["import org.gradle.testfixtures.ProjectBuilder",1660],["import org.gradle.api.Task",1245],["import org.gradle.api.GradleException",1197],["import org.gradle.api.tasks.Input",824],["import org.gradle.api.file.FileCollection",657],["import org.gradle.api.artifacts.Configuration",635],["import org.gradle.api.DefaultTask",1810],["import org.gradle.api.tasks.TaskAction",2252],["import org.gradle.api.Plugin",2065],["import org.gradle.api.Project",5797]],"useCount":51852},{"word":"grails","context":[["import grails.converters.JSON",2966],["import grails.test.mixin.TestFor",4744],["import grails.test.mixin.*",2946],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["import grails.transaction.Transactional",2296],["grails.project.dependency.resolution = {",1694],["import grails.test.*",1514],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["grails.project.test.class.dir = \"target/test-classes\"",1328],["grails.project.class.dir = \"target/classes\"",1327]],"useCount":97009},{"word":"grailsApplication","context":[["def config = grailsApplication.config",92],["app:grailsApplication,",112],["grailsApplication.config.clear()",176],["grailsApplication = ref('grailsApplication')",117],["grailsApplication = ref('grailsApplication')",117],["def grailsApplication",1860],["app:grailsApplication",127],["GrailsApplication grailsApplication",366],["this.grailsApplication = grailsApplication",66],["this.grailsApplication = grailsApplication",66]],"useCount":5046},{"word":"griffon","context":[["footer = \"<br/><br/>Made with Griffon (@griffon.version@)\"",151],["package griffon.builder.pivot.factory",111],["import griffon.core.GriffonApplication",323],["griffon {",248],["import griffon.metadata.ArtifactProviderFor",170],["public final GriffonUnitRule griffon = new GriffonUnitRule()",179],["import griffon.core.test.GriffonUnitRule",186],["warn  'griffon'",209],["error 'org.codehaus.griffon',",212],["griffon.project.dependency.resolution = {",224]],"useCount":6576},{"word":"groovy","context":[["import groovy.transform.TypeChecked",1143],["package groovy.bugs",1215],["import groovy.transform.EqualsAndHashCode",1214],["import groovy.transform.Canonical",1234],["import groovy.sql.Sql",1427],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904],["import groovy.json.JsonSlurper",1694],["import groovy.transform.ToString",1908],["import groovy.util.logging.Slf4j",3701],["import groovy.transform.CompileStatic",8289]],"useCount":99970},{"word":"groovyx","context":[["import groovyx.net.http.RESTClient",512],["import static groovyx.net.http.Method.*",146],["import static groovyx.net.http.ContentType.JSON",170],["import groovyx.net.http.*",173],["import static groovyx.net.http.ContentType.*",197],["'groovyx.net'",212],["import groovyx.net.http.ContentType",307],["import groovyx.net.http.HTTPBuilder",402],["import groovyx.gpars.dataflow.DataflowQueue",135],["import groovyx.net.http.Method",130]],"useCount":4208},{"word":"group","context":[["<groupId>group-one</groupId>",203],["autoScalingGroupName: group.autoScalingGroupName,",114],["if (!group) {",156],["<groupId>group-two</groupId>",166],["group[0].value() == 'my group'",480],["group[0].value() == 'my group'",480],["plot('my group', 'some.csv') {",512],["autoScalingGroup: group,",114],["group 'build'",103],["String group",91]],"useCount":9250},{"word":"groupId","context":[["<groupId>test</groupId>",127],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["<groupId>group-one</groupId>",203],["<groupId>group-one</groupId>",203],["<groupId>group-two</groupId>",166],["<groupId>group-two</groupId>",166],["<groupId>test</groupId>",127],["String groupId",90],["String groupId;",74],["<groupId>junit</groupId>",63]],"useCount":3488},{"word":"hamcrest","context":[["import static org.hamcrest.Matchers.notNullValue",83],["import static org.hamcrest.CoreMatchers.is",67],["import org.hamcrest.Matchers",81],["import static org.hamcrest.Matchers.is",83],["import static org.hamcrest.CoreMatchers.equalTo",101],["import org.hamcrest.Matcher",161],["import static org.hamcrest.Matchers.equalTo",203],["import static org.hamcrest.MatcherAssert.assertThat",387],["import static org.hamcrest.CoreMatchers.*",541],["import static org.hamcrest.Matchers.*",561]],"useCount":3188},{"word":"handler","context":[["* @param handler Handler for the result of this call.",408],["handler.handle(io.vertx.core.Future.succeededFuture((List<Object>)InternalHelper.wrapObject(ar.result())));",60],["return handler",60],["* Create a handler",66],["// log: a handler to the Log facility",76],["handler.handle(io.vertx.core.Future.failedFuture(ar.cause()));",83],["package io.vertx.groovy.ext.web.handler;",98],["* @param handler",119],["* @return the handler",175],["handler.handle(description, [])",58]],"useCount":3655},{"word":"has","context":[["map.descriptionText = \"${device.displayName} has a low battery\"",39],["[\"Supplied attribute 'status' has been replaced with a generated value\"]",40],["assertNotNull( \"Scaling activity \"+(i+1)+\" has end date\", scalingActivities.get(i).endTime )",42],["//If the list of subids does not have any elements, or it has only one element which is \"ALL\"",46],["log.warn(\"${jobName} has been cancelled\")",57],["[\"Referenced organisation has wrong \\\"org-type\\\". Allowed values are [LIR, OTHER]\"]",65],["[\"This update has only passed one of the two required hierarchical authorisations\"]",67],["//4) get the access levels this user has and unlock the locked resources available to him",69],["*       on behalf of whom a Contribution has been received by Licensor and",98],["* Work on LensKit has been funded by the National Science Foundation under",332]],"useCount":3047},{"word":"hashCode","context":[["assert p1.hashCode() == p2.hashCode()",54],["int hashCode() { value == 'abc' ? -1 : _hashCode() }",26],["int hashCode() {",1324],["public int hashCode() {",282],["int hashCode()",60],["public int hashCode( ) {",54],["assert p1.hashCode() == p2.hashCode()",54],["return name.hashCode()",34],["result = 31 * result + (name != null ? name.hashCode() : 0)",31],["def \"Verify hashCode and equals\"(){",26]],"useCount":3333},{"word":"have","context":[["fail(\"IllegalArgumentException should have been thrown.\");",61],["then: \"we should have the expected sequences\"",69],["//return access levels for the children of this path that have them",81],["assertEquals \"shouldn't have skipped jobs: ${result.skipjobs}\", 0, result.skipjobs.size()",58],["*  if you need additional information or have any questions.",85],["/*If I already have this subject mark it in the subset column as belonging to both subsets*/",94],["// have cookie but the page is guarded with IS_AUTHENTICATED_FULLY",142],["* additional information or have any questions.",768],["assertContentContains 'you have ROLE_ADMIN'",226],["* You should have received a copy of the CC0 Public Domain Dedication",200]],"useCount":4980},{"word":"head","context":[["cube = NCubeManager.getCube(head, \"TestBranch\")",89],["assertEquals(1, NCubeManager.getRevisionHistory(head, \"TestAge\").size())",133],["preloadCubes(head, \"test.branch.1.json\")",71],["head {",253],["</head>",241],[".head()",50],["preloadCubes(head, \"test.branch.1.json\", \"test.branch.age.1.json\")",97],["<head>",233],["testValuesOnBranch(head)",161],["assertEquals(1, NCubeManager.getRevisionHistory(head, \"TestBranch\").size())",138]],"useCount":2294},{"word":"header","context":[["header.popupClose.click()",52],["grails.mime.use.accept.header = false",349],["// Page header",56],["// Write the header column",70],[".header(\"Depth\", \"1\"))",74],["header.logoutPopupOkButton.isDisplayed()",88],["header.logoutPopupCancelButton.isDisplayed()",88],["header.popupClose.isDisplayed()",91],["header 'Content-Type': 'application/json'",104],["grails.mime.disable.accept.header.userAgents = ['Gecko', 'WebKit', 'Presto', 'Trident']",343]],"useCount":4348},{"word":"headers","context":[["log.debug \"The Header is $headers\"",154],["headers: [(tenantHeaderName): tenantId],",457],["], headers: [(tenantHeaderName): tenantId])",345],["def headers = [:]",229],["headers: headers",228],["headers: headers",228],["headers: [",224],["headers.put(\"Authorization\", userpass)",192],["headers {",490],["headers: [(tenantHeaderName): tenantId]",125]],"useCount":5627},{"word":"hearthsim","context":[["import com.hearthsim.card.basic.minion.WarGolem",69],["package com.hearthsim.test.groovy.card.goblinsvsgnomes.minion",58],["import static com.hearthsim.model.PlayerSide.WAITING_PLAYER",138],["package com.hearthsim.test.groovy.card.classic.minion",139],["import com.hearthsim.card.CharacterIndex",188],["import static com.hearthsim.model.PlayerSide.CURRENT_PLAYER",295],["import com.hearthsim.model.BoardModel",300],["import com.hearthsim.util.tree.HearthTreeNode",317],["import com.hearthsim.test.groovy.card.CardSpec",318],["import com.hearthsim.test.helpers.BoardModelBuilder",319]],"useCount":2711},{"word":"helpers","context":[["import javaposse.jobdsl.dsl.helpers.LocalRepositoryLocation",54],["import javaposse.jobdsl.dsl.helpers.common.PublishOverSshContext",55],["import javaposse.jobdsl.dsl.helpers.AbstractExtensibleContext",70],["import javaposse.jobdsl.dsl.helpers.step.StepContext",74],["package javaposse.jobdsl.dsl.helpers.wrapper",87],["package javaposse.jobdsl.dsl.helpers.triggers",92],["package javaposse.jobdsl.dsl.helpers",103],["package javaposse.jobdsl.dsl.helpers.step",204],["package javaposse.jobdsl.dsl.helpers.publisher",300],["import com.hearthsim.test.helpers.BoardModelBuilder",319]],"useCount":2741},{"word":"here","context":[["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["// Setup logic here",114],["fail 'should not make it here'",116],["// TODO: define status and reply messages here",135],["// Tear down logic here",139],["// Place your Spring DSL code here",232],["// Automatically generated. Make future change here.",292],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["// apply constraints here",692]],"useCount":5520},{"word":"hibernate","context":[["'net.sf.ehcache.hibernate'",892],["'org.hibernate',",932],["hibernate {",791],["grails.hibernate.cache.queries = false",533],["'org.codehaus.groovy.grails.orm.hibernate',      // hibernate integration",505],["'org.codehaus.groovy.grails.orm.hibernate',      // hibernate integration",505],["'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration",395],["'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration",395],["package org.codehaus.groovy.grails.orm.hibernate",394],["grails.hibernate.pass.readonly = false",283]],"useCount":11330},{"word":"hm","context":[["syncUpdate(getTransient(\"P-LOW\") + \"password: hm\\npassword: owner3\")",113],["password: hm",1093],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330],["syncUpdate(getTransient(\"ALLOC-UNS\") + \"password: owner3\\npassword: hm\")",280],["mnt-by:       ripe-ncc-hm-MNT",250],["syncUpdate(getTransient(\"RIR-ALLOC-20\") + \"password: owner3\\npassword: hm\")",201],["password:   hm",148],["syncUpdate(getTransient(\"ALLOC-PI\") + \"password: owner3\\npassword: hm\")",116],["syncUpdate(getTransient(\"RIR-ALLOC-25\") + \"password: hm\\npassword: owner3\")",84],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80]],"useCount":3734},{"word":"host","context":[["host = \"smtp.gmail.com\"",44],["String host = args[0]",37],["IRODSAccount irodsAccount = IRODSAccount.instance(\"host\", 1247, \"user\", \"password\", \"\", \"zone\", \"\")",40],["this.host = host",44],["this.host = host",44],["host = \"localhost\"",63],["headers.put(\"HOST\", \"$host:$state.cameraPort\")",118],["def host = state.cameraIP",118],["def hosthex = convertIPtoHex(host)",145],["String host",157]],"useCount":2413},{"word":"href","context":[["* @author <a href='mailto:limcheekin@vobject.com'>Lim Chee Kin</a>",150],["* @author <a href='mailto:burt@burtbeckwith.com'>Burt Beckwith</a>",1308],["* @author <a href=\"mailto:jason@planet57.com\">Jason Dillon</a>",335],["* @author <a href=\"mailto:james@coredevelopers.net\">James Strachan</a>",111],["* @author <a href=\"mailto:jaredsburrows@gmail.com\">Jared Burrows</a>",97],["* @author <a href=\"http://www.grouplens.org\">GroupLens Research</a>",95],["* @author <a href=\"mailto:herzog@raffael.ch\">Raffael Herzog</a>",92],["* User: Greg Schueler <a href=\"mailto:greg@dtosolutions.com\">greg@dtosolutions.com</a>",88],["* @see <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/The-Configure-Block\">The Configure Block</a>",79],["* <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/Handling-Credentials\">Handling Credentials</a> for",77]],"useCount":3776},{"word":"html","context":[["html:          ['text/html','application/xhtml+xml'],",459],["* http://www.eclipse.org/legal/epl-v10.html",555],["html:          ['text/html','application/xhtml+xml'],",459],["String html = (new Html() {",322],["expression = 'html' // escapes values inside ${}",362],["scriptlet = 'html' // escapes output from scriptlets in GSPs",366],["grails.views.default.codec = \"html\"",366],["</html>",384],["<html>",427],["html {",750]],"useCount":11760},{"word":"http","context":[["import javax.servlet.http.HttpServletResponse",1241],["import javax.servlet.http.HttpServletRequest",1177],["import static org.springframework.http.HttpStatus.*",1095],["//mavenRepo \"http://download.java.net/maven/2/\"",1031],["//mavenRepo \"http://repository.jboss.com/maven2/\"",1030],["//mavenRepo \"http://repository.codehaus.org\"",1027],["http",842],["import org.springframework.http.HttpStatus",746],["protected void configure(HttpSecurity http) throws Exception {",697],["* http://www.eclipse.org/legal/epl-v10.html",555]],"useCount":32654},{"word":"https","context":[["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["iconUrl: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png\",",365],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\",",220],["* This file is part of sklintyg (https://github.com/sklintyg).",194],["iconX3Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",160],["* @see <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/The-Configure-Block\">The Configure Block</a>",79],["context.scmNodes[0].browser[0].url[0].value() == 'https://github.com/jenkinsci/job-dsl-plugin/'",78],["* <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/Handling-Credentials\">Handling Credentials</a> for",77],["buildCommands += \"git clone https://github.com/dotnet/corefx fx\"",69],["github_project_property.appendNode('projectUrl').setValue(\"https://github.com/${project.repo}\")",62]],"useCount":3912},{"word":"hudson","context":[["with(series[0].'hudson.plugins.plot.CSVSeries'[0]) {",320],["aggregateNode.name() == 'hudson.tasks.test.AggregatedTestResultPublisher'",128],["import hudson.model.*",129],["name() == 'au.com.centrumsystems.hudson.plugin.buildpipeline.trigger.BuildPipelineTrigger'",130],["name() == 'hudson.tasks.ArtifactArchiver'",152],["context.publisherNodes[0].name() == 'hudson.plugins.descriptionsetter.DescriptionSetterPublisher'",160],["context.publisherNodes[0].name() == 'hudson.plugins.textfinder.TextFinderPublisher'",160],["import hudson.util.VersionNumber",236],["name() == 'hudson.plugins.plot.PlotPublisher'",480],["with(plots.'hudson.plugins.plot.Plot'[0]) {",480]],"useCount":22268},{"word":"i","context":[["def i = 1",216],["\"(?i).*test\\\\W+${os}\\\\W+${scenario}.*\")",1149],["i++",789],["int i = 0",477],["int i = 0;",341],["i++;",307],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["return i;",165],["return i",108],["def i = 0",284]],"useCount":20932},{"word":"id","context":[["Long id",1594],["String id",877],["flash.args = [params.id]",652],["redirect(action: \"show\", id: params.id)",604],["redirect(action: \"show\", id: params.id)",604],["def show(Long id) {",427],["def delete(Long id) {",398],["def edit(Long id) {",397],["redirect(action: \"show\", id: id)",372],["redirect(action: \"show\", id: id)",372]],"useCount":54346},{"word":"if","context":[["if (log.debugEnabled) {",807],["if (configuration == 'Release' || configuration == 'Checked') {",1512],["if (params.version) {",852],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["if (configuration == 'Release') {",567],["// if (System.properties[\"${appName}.config.location\"]) {",522],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["if (os == 'Windows_NT') {",471],["if (version != null) {",466]],"useCount":128988},{"word":"image","context":[["import com.bmuschko.gradle.docker.tasks.image.Dockerfile",56],["iconImage: imageIcon('/griffon-icon-48x48.png').image,",63],["String image",67],["imageIcon('/griffon-icon-16x16.png').image]) {",71],["import be.cytomine.image.ImageInstance",78],["import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage",78],["iconImages: [imageIcon('/griffon-icon-48x48.png').image,",79],["imageIcon('/griffon-icon-32x32.png').image,",80],["image = '$DEFAULT_IMAGE'",141],["import java.awt.image.BufferedImage",371]],"useCount":3123},{"word":"impl","context":[["import com.intellij.codeInsight.lookup.impl.LookupImpl",111],["import org.moqui.impl.StupidUtilities",54],["context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'.size() == 1",54],["import org.apache.http.impl.client.HttpClients",57],["with(context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'[0]) {",69],["import com.intellij.psi.impl.source.PostprocessReformattingAspect",93],["package org.jetbrains.intellij.build.impl",103],["import org.apache.http.impl.client.DefaultHttpClient",104],["package org.kuali.rice.krms.impl.repository",121],["import org.apache.http.impl.client.HttpClientBuilder",50]],"useCount":4087},{"word":"import","context":[["import org.junit.Test",10298],["import groovy.transform.CompileStatic",8289],["import org.gradle.api.Project",5797],["import grails.test.mixin.TestFor",4744],["import org.springframework.beans.factory.annotation.Autowired",4308],["import spock.lang.Unroll",4126],["import groovy.util.logging.Slf4j",3701],["import org.junit.Before",3308],["import grails.converters.JSON",2966],["import spock.lang.Specification",21191]],"useCount":593532},{"word":"in","context":[["assert (os == 'Windows_NT') || (os in Constants.crossList)",1423],["* Center for Excellence in Nanomedicine (NanoCAN)",313],["// TODO Fill in these fields",343],["// test invalid parameters in update",364],["scriptlet = 'html' // escapes output from scriptlets in GSPs",366],["// in the classpath in ConfigSlurper format",494],["// in the classpath in ConfigSlurper format",494],["// packages to include in Spring bean scanning",685],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["* Redistribution and use in source and binary forms, with or without",1343]],"useCount":31175},{"word":"include","context":[["// packages to include in Spring bean scanning",685],["artifacts[0].value() == 'include/*'",104],["*       replaced with your own identifying information. (Don't include",98],["*           include a readable copy of the attribution notices contained",98],["include template: 'includes/contribute-button.groovy'",80],["@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"@class\")",70],["testResults[0].value() == 'include/*'",68],["#include \"hello.h\"",48],["pattern('include/*')",40],["#include <iostream>",39]],"useCount":2602},{"word":"index","context":[["def index(Integer max) {",929],["\"/\"(view:\"/index\")",307],["redirect action:\"index\", method:\"GET\"",658],["when:\"The index action is executed\"",661],["void \"Test the index action returns the correct model\"() {",739],["def index() {",2026],["controller.index()",1420],["def index = {",1399],["redirect action: \"index\", method: \"GET\"",941],["redirect action: 'index'",285]],"useCount":16800},{"word":"inet6num","context":[["queryObject(\"-r -T inet6num 2001::/20\", \"inet6num\", \"2001::/20\")",213],["queryObject(\"-r -T inet6num 2001::/20\", \"inet6num\", \"2001::/20\")",213],["queryObject(\"-r -T inet6num 2001:600::/30\", \"inet6num\", \"2001:600::/30\")",159],["queryObject(\"-r -T inet6num 2001:600::/30\", \"inet6num\", \"2001:600::/30\")",159],["inet6num:     2001:600::/25",158],["queryObject(\"-r -T inet6num 2001:600::/25\", \"inet6num\", \"2001:600::/25\")",136],["queryObject(\"-r -T inet6num 2001:600::/25\", \"inet6num\", \"2001:600::/25\")",136],["inet6num:     2001:600::/32",123],["queryObjectNotFound(\"-r -T inet6num 2001:600::/25\", \"inet6num\", \"2001:600::/25\")",108],["queryObjectNotFound(\"-r -T inet6num 2001:600::/25\", \"inet6num\", \"2001:600::/25\")",108]],"useCount":4392},{"word":"inetnum","context":[["queryObject(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",249],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.169.255.255\", \"inetnum\", \"192.168.0.0 - 192.169.255.255\")",520],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.169.255.255\", \"inetnum\", \"192.168.0.0 - 192.169.255.255\")",520],["queryObjectNotFound(\"-r -T inetnum 192.100.0.0 - 192.200.255.255\", \"inetnum\", \"192.100.0.0 - 192.200.255.255\")",480],["queryObjectNotFound(\"-r -T inetnum 192.100.0.0 - 192.200.255.255\", \"inetnum\", \"192.100.0.0 - 192.200.255.255\")",480],["queryObject(\"-r -T inetnum 192.0.0.0 - 192.255.255.255\", \"inetnum\", \"192.0.0.0 - 192.255.255.255\")",436],["queryObject(\"-r -T inetnum 192.0.0.0 - 192.255.255.255\", \"inetnum\", \"192.0.0.0 - 192.255.255.255\")",436],["inetnum:      192.168.200.0 - 192.168.200.255",413],["inetnum:      192.168.0.0 - 192.168.255.255",332],["inetnum:      192.100.0.0 - 192.200.255.255",282]],"useCount":12659},{"word":"info","context":[["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["* e-mail: info _at_ motrice.se",180],["log.info \"Run service again to ensure that configuration is not set double.\"",130],["assert info",90],["package info.shelfunit.DNS",79],["log.info(\"Describing items in ${agentType}\")",78],["logger.info(\"start\")",72],["log.info(message)",70],["assert info != null",65],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667]],"useCount":7606},{"word":"information","context":[["* distributed with this work for additional information",3045],["*  distributed with this work for additional information",2945],["* additional information or have any questions.",768],["* NOTICE:  All information contained herein is, and remains",224],["* Dissemination of this information or reproduction of this material",224],["* Revision information:",196],["*       replaced with your own identifying information. (Don't include",98],["*  if you need additional information or have any questions.",85],["remarks:        Authoritative registration information for AS",70],["* Contact information: kozzeluc@gmail.com.",45]],"useCount":8604},{"word":"inherits","context":[["inherits(\"global\") {",1219],["inherits true // Whether to inherit repository definitions from plugins",728],["inherits 'global'",210],["inherits \"global\"",178],["inherits(\"global\")",96],["inherits( \"global\" ) {",72],["inherits(\"global\") {}",42],["inherits true",42],["inherits \"global\" // inherit Grails' default dependencies",30],["inherits \"test\"",25]],"useCount":2751},{"word":"init","context":[["public void init() {",92],["def init = { servletContext ->",769],["void init() {",433],["init()",290],["protected void init() {",177],["def init() {",116],["init(",82],["'init-param' {",80],["model.init()",78],["super.init()",54]],"useCount":3810},{"word":"initialize","context":[["initialize()",1475],["def initialize() {",674],["void initialize() {",110],["emc.initialize()",91],["def request = initialize()",86],["initialize: {},",84],["metaClass.initialize()",74],["mc.initialize()",60],["public void initialize() {",50],["plugin.initialize(ctxt)",49]],"useCount":3608},{"word":"inject","context":[["import javax.inject.Singleton",56],["import com.google.inject.AbstractModule",145],["import com.google.inject.Guice",199],["import com.google.inject.Injector",247],["import com.google.inject.Inject",273],["import javax.inject.Inject",1214],["import com.google.inject.persist.Transactional",56],["import javax.inject.Named",62],["import javax.inject.Provider",66],["@javax.inject.Singleton",110]],"useCount":3261},{"word":"input","context":[["input(\"recipients\", \"contact\", title: \"Send notifications to\") {",101],["AtomicOperation convertOperation(Map input) {",185],["def description = converter.convertDescription(input)",167],["// The input branch name (e.g. master)",97],["input(",92],["converted.credentials = getCredentialsObject(input.credentials as String)",90],["def input = [",89],["input {",86],["* @param input",86],["return input",85]],"useCount":7503},{"word":"instance","context":[["then:\"A model is populated containing the domain instance\"",1296],["void \"Test the save action correctly persists an instance\"() {",744],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["when:\"The save action is executed with an invalid instance\"",658],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"The delete action is called for a null instance\"",656],["when:\"A domain instance is created\"",656],["when:\"Update is called for a domain instance that doesn't exist\"",656],["when:\"The save action is executed with a valid instance\"",656]],"useCount":22060},{"word":"instanceof","context":[["view instanceof ListView",115],["configs[0].'hudson.plugins.parameterizedtrigger.CurrentBuildParameters'[0] instanceof Node",116],["assertTrue(obj instanceof ScheduledExecution)",127],["assertTrue(resolved instanceof PsiMethod);",392],["assert json instanceof JSONObject",132],["if (exception instanceof AccountExpiredException) {",136],["assertTrue(resolved instanceof GrMethod);",176],["assert json.collection instanceof JSONArray",193],["if (!(other instanceof UserRole)) {",211],["assertTrue xmlstr instanceof String",222]],"useCount":10780},{"word":"instructions","context":[["package org.bearleft.bit.instructions.immediate",11],["yield 'Follow the instructions on-screen to complete installation.'",12],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365],["* See the API for {@link grails.test.mixin.web.GroovyPageUnitTestMixin} for usage instructions",127],["Follow the instructions found in [Annotation Processors Support in the NetBeans",33],["import org.gradlefx.cli.instructions.CompilerInstructionsBuilder",17]],"useCount":5399},{"word":"int","context":[["int count = 0",1123],["int hashCode() {",1324],["public int hashCode() {",282],["int x",290],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340],["int i = 0;",341],["int result",262],["int age",382],["int i = 0",477],["params.max = Math.min(params.max ? params.int('max') : 10, 100)",507]],"useCount":26892},{"word":"integration","context":[["package org.apache.tapestry5.integration.app1",44],["import com.android.build.gradle.integration.common.utils.ModelHelper",66],["import com.android.build.gradle.integration.common.category.DeviceTests",49],["package ozone.owf.grails.test.integration",58],["import com.android.build.gradle.integration.common.fixture.GradleTestProject",195],["package com.android.build.gradle.integration.application",83],["import grails.test.mixin.integration.IntegrationTestMixin",157],["'org.codehaus.groovy.grails.orm.hibernate',      // hibernate integration",505],["'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration",395],["import grails.test.mixin.integration.Integration",288]],"useCount":3005},{"word":"intellij","context":[["import com.intellij.openapi.util.text.StringUtil",136],["import com.intellij.testFramework.LightProjectDescriptor",224],["import com.intellij.testFramework.fixtures.LightCodeInsightFixtureTestCase",426],["import com.intellij.openapi.vfs.VirtualFile",175],["import com.intellij.openapi.application.ApplicationManager",174],["import com.intellij.psi.PsiClass",166],["import com.intellij.psi.PsiFile",158],["import com.intellij.codeInsight.CodeInsightSettings",144],["import com.intellij.JavaTestUtil",138],["import com.intellij.psi.PsiMethod",137]],"useCount":10392},{"word":"interface","context":[["interface Run {",42],["@Target(ElementType.TYPE_USE) @interface TA { }",40],["@interface X {",135],["interface A {",108],["@interface A {",104],["interface I {",99],["@interface Alias {}",69],["@interface Int {",45],["interface Base<T>{}",44],["interface Foo {",44]],"useCount":2750},{"word":"internal","context":[["import org.gradle.internal.reflect.Instantiator",258],["import org.gradle.internal.reflect.DirectInstantiator",62],["* @throws RuntimeException When internal state requires transaction rollback",64],["import org.gradle.internal.jvm.Jvm",65],["package com.jayway.restassured.internal",71],["import org.gradle.api.internal.ConventionTask",75],["import org.gradle.api.internal.file.FileResolver",196],["import org.gradle.api.internal.project.ProjectInternal",163],["import org.gradle.internal.os.OperatingSystem",126],["import com.amazonaws.internal.StaticCredentialsProvider",82]],"useCount":5114},{"word":"into","context":[["// locations to search for config files that get merged into the main config;",493],["into 'libs'",68],["//for each of the ones that were found with access put their access levels into the object",69],["//1)put all the children into the access list with default unlocked",69],["* node is passed into the configure block.",74],["* use the project into a commercial product",75],["insert into person(version, name, street1, street2, zipcode)",98],["// parse events into attributes",193],["// locations to search for config files that get merged into the main config",204],["grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format",401]],"useCount":3411},{"word":"invalid","context":[["when:\"An invalid domain instance is passed to the update action\"",655],["then: \"The edit view is rendered again with the invalid instance\"",91],["when: \"An invalid domain instance is passed to the update action\"",91],["when: \"The save action is executed with an invalid instance\"",93],["//TODO: add invalid values to params object",314],["// test invalid parameters in update",364],["target('invalid', h, u, f)",64],["then:\"The edit view is rendered again with the invalid instance\"",650],["'scheduledExecution.options.invalid.message',",42],["when:\"The save action is executed with an invalid instance\"",658]],"useCount":4125},{"word":"io","context":[["import org.springframework.core.io.Resource",313],["import java.io.File",256],["import io.vertx.lang.groovy.InternalHelper",264],["import java.io.IOException;",265],["import static org.apache.commons.io.FileUtils.*",273],["import groovy.io.FileType",356],["import org.apache.commons.io.FileUtils",782],["import java.io.File;",382],["import org.apache.commons.io.FilenameUtils",325],["import org.apache.commons.io.IOUtils",349]],"useCount":16647},{"word":"is","context":[["when:\"The index action is executed\"",661],["then:\"The create view is rendered again with the correct model\"",676],["then:\"A redirect is issued to the show action\"",815],["*   This file is part of 'Nextflow'.",1092],["then:\"A model is populated containing the domain instance\"",1296],["then:\"A 404 error is returned\"",1946],["then:\"The instance is deleted\"",656],["when:\"The domain instance is passed to the delete action\"",656],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"The save action is executed with an invalid instance\"",658]],"useCount":61136},{"word":"isDisplayed","context":[["page.overview.save.isDisplayed()",77],["page.ascending.isDisplayed()",75],["page.descending.isDisplayed()",75],["waitFor { buttonAddDatabase.isDisplayed() }",83],["page.overview.addProperty.isDisplayed()",71],["page.overview.cancel.isDisplayed()",76],["header.logoutPopupCancelButton.isDisplayed()",88],["waitFor(waitTime) { page.overview.securityValue.isDisplayed() }",88],["header.popupClose.isDisplayed()",91],["header.logoutPopupOkButton.isDisplayed()",88]],"useCount":4370},{"word":"isPR","context":[["if (isPR) {",358],["[true, false].each { isPR ->",300],["Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")",234],["} // isPR",103],["if (architecture == 'x64' || !isPR) {",92],["def newFlowJob = buildFlowJob(Utilities.getFullJobName(project, flowJobName, isPR)) {",56],["def newJob = job(Utilities.getFullJobName(project, newJobName, isPR)) {",76],["def isPR = (branchName == 'pr')",84],["if (!isPR) {",78],["Utilities.standardJobSetup(newJob, project, isPR, getFullBranchName(branchName))",78]],"useCount":2565},{"word":"it","context":[["it.delete()",284],["return it",181],["System.err.println(it);",189],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["if (flush) { UserRole.withSession { it.flush() } }",240],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["it",541],["println it",405],["registry.allServices.each { it.call() }",264]],"useCount":28472},{"word":"item","context":[["for (final LookupElement item : myItems) {",81],["return item",111],["import org.pillarone.riskanalytics.core.simulation.item.parameter.ParameterHolder",75],["context: { c -> c.putAll( [ component: c.item.component, module: c.item.module] ) } ) {",77],["context: { c -> c.putAll( [ component: c.item.component, module: c.item.module] ) } ) {",77],["import org.pillarone.riskanalytics.core.simulation.item.Parameterization",190],["//XPathExpression expr  = xpath.compile(\"item\");",138],["import org.pillarone.riskanalytics.core.simulation.item.Simulation",138],["super(jobManagement, item)",176],["Item item = Mock(Item)",143]],"useCount":7054},{"word":"items","context":[["items: [",116],["log.info(\"Describing items in ${agentType}\")",78],["lookup.currentItem = lookup.items[1]",55],["return items",55],["import org.eclipse.smarthome.core.items.events.ItemEventFactory",62],["import org.eclipse.smarthome.core.library.items.SwitchItem",76],["import org.eclipse.smarthome.core.items.ItemRegistry",104],["def items = myFixture.completeBasic()",110],["</items>",83],["def items = []",112]],"useCount":4671},{"word":"iteratec","context":[["import de.iteratec.osm.csi.Page",81],["import de.iteratec.osm.measurement.schedule.Job",86],["import de.iteratec.osm.measurement.schedule.JobGroup",148],["import de.iteratec.osm.measurement.schedule.ConnectivityProfile",89],["import de.iteratec.osm.measurement.environment.Location",107],["import de.iteratec.osm.measurement.environment.Browser",125],["package de.iteratec.osm.csi",131],["import de.iteratec.osm.measurement.environment.WebPageTestServer",79],["package de.iteratec.osm.result",70],["import de.iteratec.osm.result.EventResult",66]],"useCount":2765},{"word":"jackson","context":[["import com.fasterxml.jackson.databind.SerializationFeature",94],["import com.fasterxml.jackson.annotation.JsonTypeInfo",86],["import com.fasterxml.jackson.annotation.JsonIdentityInfo",98],["import com.fasterxml.jackson.core.type.TypeReference",101],["import com.fasterxml.jackson.databind.ObjectMapper",1343],["import org.codehaus.jackson.map.ObjectMapper",101],["import com.fasterxml.jackson.annotation.JsonInclude",107],["import com.fasterxml.jackson.annotation.JsonIgnoreProperties",110],["import com.fasterxml.jackson.annotation.JsonIgnore",240],["import com.fasterxml.jackson.annotation.JsonProperty",286]],"useCount":3592},{"word":"jar","context":[["AbcMetric   // Requires the GMetrics jar",60],["throw new FileNotFoundException( \"Could not find the generated jar. \" + jarFileRepoFolder );",58],["CyclomaticComplexity   // Requires the GMetrics jar",65],["import java.util.jar.JarEntry",74],["import java.util.jar.Manifest",80],["acmeGroovyNode.classPath[0].value() == \"/foo/acme.jar${File.pathSeparator}/foo/test.jar\"",82],["acmeGroovyNode.classPath[0].value() == \"/foo/acme.jar${File.pathSeparator}/foo/test.jar\"",82],["classpath('/foo/test.jar')",128],["classpath('/foo/acme.jar')",128],["import java.util.jar.JarFile",158]],"useCount":3141},{"word":"java","context":[["import java.util.concurrent.TimeUnit",1324],["import java.text.SimpleDateFormat",1275],["//mavenRepo \"http://download.java.net/maven/2/\"",1031],["import java.util.List;",992],["import java.nio.file.Paths",980],["import java.nio.file.Path",933],["import java.nio.file.Files",801],["import java.util.regex.Pattern",1414],["import java.util.Map;",748],["myFixture.configureByText(\"a.java\", \"\"\"",704]],"useCount":60689},{"word":"javaposse","context":[["package javaposse.jobdsl.dsl.helpers.publisher",300],["import javaposse.jobdsl.dsl.JobManagement",851],["import javaposse.jobdsl.dsl.Item",409],["import javaposse.jobdsl.dsl.ContextHelper",365],["import javaposse.jobdsl.dsl.Context",344],["import javaposse.jobdsl.dsl.RequiresPlugin",326],["import javaposse.jobdsl.dsl.AbstractContext",274],["package javaposse.jobdsl.dsl",271],["import javaposse.jobdsl.dsl.Job",212],["import javaposse.jobdsl.dsl.DslContext",448]],"useCount":8715},{"word":"javax","context":[["import javax.annotation.Nonnull",353],["import javax.ws.rs.core.MediaType",326],["import javax.persistence.Id",354],["import javax.persistence.Entity",394],["import javax.servlet.http.HttpServletResponse",1241],["import javax.inject.Inject",1214],["import javax.servlet.http.HttpServletRequest",1177],["import javax.annotation.PostConstruct",450],["import javax.sql.DataSource",410],["import javax.swing.*",402]],"useCount":23729},{"word":"jbilling","context":[["import com.sapienter.jbilling.server.user.UserWS",51],["import com.sapienter.jbilling.server.util.Constants",53],["import com.sapienter.jbilling.client.util.DownloadHelper",48],["package jbilling",316],["This file is part of jbilling.",206],["import com.sapienter.jbilling.server.user.db.CompanyDTO",168],["import com.sapienter.jbilling.common.SessionInternalError",132],["import com.sapienter.jbilling.client.util.SortableCriteria",70],["import com.sapienter.jbilling.server.user.db.UserDTO",68],["import com.sapienter.jbilling.server.item.CurrencyBL",65]],"useCount":2433},{"word":"jdbc","context":[["url = \"jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000\"",77],["import org.springframework.jdbc.core.JdbcTemplate",72],["url = \"jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000\"",68],["// rulesets/jdbc.xml",79],["url = \"jdbc:hsqldb:mem:testDb\"",81],["url = \"jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE\"",142],["url = \"jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE\"",160],["url = \"jdbc:h2:mem:testDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE\"",202],["driverClassName = \"com.mysql.jdbc.Driver\"",333],["url = \"jdbc:h2:mem:testDb;MVCC=TRUE;LOCK_TIMEOUT=10000\"",106]],"useCount":2428},{"word":"jenkins","context":[["entry[1].'com.flowdock.jenkins.BuildResult'[0].value() == 'SUCCESS'",224],["entry[4].'com.flowdock.jenkins.BuildResult'[0].value() == 'FAILURE'",224],["entry[3].'com.flowdock.jenkins.BuildResult'[0].value() == 'UNSTABLE'",224],["entry[5].'com.flowdock.jenkins.BuildResult'[0].value() == 'NOT_BUILT'",224],["entry[2].'com.flowdock.jenkins.BuildResult'[0].value() == 'FIXED'",224],["credentials(\"adop-jenkins-master\")",298],["sshAgent(\"adop-jenkins-master\")",335],["name() == 'com.flowdock.jenkins.FlowdockNotifier'",224],["entry[0].'com.flowdock.jenkins.BuildResult'[0].value() == 'ABORTED'",224],["1 * jobManagement.requirePlugin('jenkins-flowdock-plugin')",205]],"useCount":8365},{"word":"jenkinsci","context":[["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["def skippedThresholds = xUnitNode.thresholds[0].'org.jenkinsci.plugins.xunit.threshold.SkippedThreshold'[0]",167],["def failedThresholds = xUnitNode.thresholds[0].'org.jenkinsci.plugins.xunit.threshold.FailedThreshold'[0]",167],["name() == 'org.jenkinsci.plugins.stashNotifier.StashNotifier'",96],["name() == 'org.jenkinsci.plugins.vsphere.VSphereBuildStepContainer'",92],["* @see <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/The-Configure-Block\">The Configure Block</a>",79],["name() == 'org.jenkinsci.plugins.ghprb.GhprbPullRequestMerge'",80],["name() == 'org.jenkinsci.plugins.postbuildscript.PostBuildScript'",80],["step.name() == 'org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder'",82],["def entry = utc.entries[0].'org.jenkinsci.plugins.urltrigger.URLTriggerEntry'[0]",84]],"useCount":4253},{"word":"jetbrains","context":[["import org.jetbrains.plugins.groovy.GroovyLightProjectDescriptor",121],["import org.jetbrains.annotations.NotNull",426],["import org.jetbrains.plugins.groovy.util.TestUtils",378],["package org.jetbrains.intellij.build.impl",103],["package org.jetbrains.plugins.groovy.lang.resolve",105],["import org.jetbrains.plugins.groovy.GroovyFileType",108],["import org.jetbrains.plugins.groovy.codeInspection.assignment.GroovyAssignabilityCheckInspection",111],["import org.jetbrains.plugins.groovy.lang.psi.GroovyFile",113],["import org.jetbrains.annotations.Nullable",213],["import org.jetbrains.plugins.groovy.LightGroovyTestCase",214]],"useCount":4405},{"word":"job","context":[["Utilities.addGithubPushTrigger(job)",282],["FreeStyleProject job = jenkinsRule.createFreeStyleProject('seed')",272],["job('example') {",231],["FreeStyleBuild freeStyleBuild = job.scheduleBuild2(0).get()",219],["job.name == 'test'",206],["parent.referencedJobs.contains(job)",201],["job.with {",284],["<job>",361],["</job>",361],["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603]],"useCount":21283},{"word":"jobManagement","context":[["1 * jobManagement.requirePlugin('ircbot')",178],["1 * jobManagement.requireMinimumPluginVersion('plot', '1.9')",486],["super(jobManagement)",413],["jobManagement.logDeprecationWarning()",300],["1 * jobManagement.requirePlugin('conditional-buildstep')",248],["1 * jobManagement.requirePlugin('parameterized-trigger')",238],["1 * jobManagement.requirePlugin('groovy')",207],["1 * jobManagement.requirePlugin('jenkins-flowdock-plugin')",205],["1 * jobManagement.requirePlugin('xunit')",199],["JobManagement jobManagement = Mock(JobManagement)",192]],"useCount":15000},{"word":"jobName","context":[["jobName: 'monkey1', project: 'testProject', description: 'blah',",80],["jobName:'test job 1',",105],["addRoslynJob(myJob, jobName, branchName, isPr, triggerPhraseExtra, triggerPhraseOnly)",105],["def myJob = job(jobName) {",126],["jobName: 'blue',",136],["String jobName",62],["String jobName = params.jobName",58],["String jobName = params.jobName",58],["jobName: 'a Job',",58],["jobName: 'test job 1',",185]],"useCount":5248},{"word":"jobdsl","context":[["import javaposse.jobdsl.dsl.JobManagement",851],["import javaposse.jobdsl.dsl.Job",212],["import javaposse.jobdsl.dsl.DslContext",448],["import javaposse.jobdsl.dsl.AbstractContext",274],["import javaposse.jobdsl.dsl.Item",409],["package javaposse.jobdsl.dsl",271],["import javaposse.jobdsl.dsl.ContextHelper",365],["import javaposse.jobdsl.dsl.Context",344],["package javaposse.jobdsl.dsl.helpers.publisher",300],["import javaposse.jobdsl.dsl.RequiresPlugin",326]],"useCount":8715},{"word":"jobs","context":[["import javaposse.jobdsl.dsl.jobs.FreeStyleJob",104],["assertNotNull jobs",267],["assertEquals \"incorrect size\", 1, jobs.size()",158],["import jobs.generation.Utilities;",146],["jobs {",86],["assertNotNull \"incorrect workflow\", jobs[0].workflow",68],["view.jobs {",80],["package javaposse.jobdsl.dsl.jobs",73],["//Flow jobs should be Windows, Ubuntu, OSX, or CentOS",72],["// For x86, only add per-commit jobs for Windows",72]],"useCount":5748},{"word":"joda","context":[["import org.joda.time.*",104],["import org.joda.time.Duration",162],["import org.joda.time.DateTimeZone",160],["import org.joda.time.Period",83],["import org.joda.time.format.DateTimeFormat",153],["import org.joda.time.LocalDateTime",132],["import org.joda.time.format.DateTimeFormatter",128],["import org.joda.time.LocalDate",214],["import org.joda.time.format.ISODateTimeFormat",114],["import org.joda.time.DateTime",1143]],"useCount":2877},{"word":"join","context":[["\"Clone Workspace Criteria needs to be one of these values: ${validCloneWorkspaceCriteria.join(',')}\"",45],["}.join('\\n')",44],["}.join(\"\\n\")",50],["// Create a build flow to join together the build and tests required to run this",56],["t.join()",57],["String hex = ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join()",63],["}.join()",57],["[convertHexToInt(hex[0..1]),convertHexToInt(hex[2..3]),convertHexToInt(hex[4..5]),convertHexToInt(hex[6..7])].join(\".\")",103],["1 * jobManagement.requireMinimumPluginVersion('join', '1.15')",62],["name() == 'join.JoinTrigger'",62]],"useCount":3018},{"word":"js","context":[["js           : 'text/javascript',",46],["type: 'js',",60],["waitFor {js.('document.readyState') == 'complete'}",44],["grails.resources.adhoc.includes = ['/images/**', '/css/**', '/js/**', '/plugins/**']",55],["resource url:'js/application.js'",80],["waitFor {js.('jQuery.active') == 0}",31],["resource url:'js/application.js'",80],["js: 'text/javascript',",293],["grails.resources.adhoc.patterns = ['/images/*', '/css/*', '/js/*', '/plugins/*']",330],["js:            'text/javascript',",480]],"useCount":2301},{"word":"json","context":[["import groovy.json.JsonBuilder",659],["import groovy.json.JsonOutput",480],["hal:           ['application/hal+json','application/hal+xml'],",327],["json {",464],["grails.json.legacy.builder = false",688],["import groovy.json.JsonSlurper",1694],["import org.codehaus.groovy.grails.web.json.JSONObject",472],["json:          ['application/json', 'text/json'],",462],["json:          ['application/json', 'text/json'],",462],["json:          ['application/json', 'text/json'],",462]],"useCount":24135},{"word":"junit","context":[["import org.junit.Assert",902],["import org.junit.*",2039],["import static org.junit.Assert.assertEquals",1366],["import org.junit.After",1139],["import org.junit.BeforeClass",1068],["import static org.junit.Assert.assertTrue",1009],["import org.junit.Test",10298],["import org.junit.Before",3308],["import static org.junit.Assert.*",2429],["import org.junit.Rule",2142]],"useCount":37020},{"word":"key","context":[["* @param key Key string",222],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["byte[] key = randomKey()",203],["String key;",170],["String key",169],["* @param key",146],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.127\" }",112],["key[0].value() == 'key'",119],["key[0].value() == 'key'",119],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",123]],"useCount":15158},{"word":"kuali","context":[["import org.kuali.rice.kim.api.test.JAXBAssert",65],["* @author Kuali Rice Team (rice.collab@kuali.org)",266],["import org.kuali.rice.krad.bo.PersistableBusinessObjectBase",174],["package org.kuali.rice.krms.impl.repository",121],["import org.kuali.rice.core.test.JAXBAssert",104],["</org.kuali.rice.krad.devtools.maintainablexml.TestGlobalDetail>",102],["import org.kuali.rice.core.api.config.property.ConfigContext",74],["<org.kuali.rice.krad.devtools.maintainablexml.TestGlobalDetail>",102],["import org.kuali.rice.krad.service.BusinessObjectService",66],["import org.kuali.rice.core.api.resourceloader.GlobalResourceLoader",64]],"useCount":3836},{"word":"label","context":[["'label==\"${TARGET}\"'",83],["label[0].value().empty",384],["String label",157],["state \"default\", label:'', action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",122],["state \"default\", label:\"\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",120],["def phrases = location.helloHome?.getPhrases()*.label",116],["state \"battery\", label:'${currentValue}% battery', unit:\"\"",115],["with(label[0]) {",110],["label[0].value() == ''",90],["state \"default\", label:'${currentValue}'",84]],"useCount":6653},{"word":"lang","context":[["import java.lang.annotation.Retention",586],["import spock.lang.Specification",21191],["import spock.lang.Unroll",4126],["import spock.lang.Shared",2531],["import org.apache.commons.lang.builder.HashCodeBuilder",587],["import java.lang.reflect.Method",590],["import spock.lang.Ignore",702],["import org.apache.commons.lang.StringUtils",784],["import spock.lang.Subject",1072],["import spock.lang.*",2195]],"useCount":47879},{"word":"layer","context":[["package geoscript.layer",88],["import geoscript.layer.Raster",100],["assertEquals 4, layer.count",49],["layer.eachFeature { f ->",51],["* @param layer The Layer",66],["import geoscript.layer.Shapefile",158],["assertEquals 3, layer.count",61],["assertEquals \"Polygon\", layer.schema.geom.typ",53],["package geoscript.layer.io",69],["import geoscript.layer.Layer",321]],"useCount":2520},{"word":"length","context":[["if (ids1 != null && ids1.length() > 0) {",137],["assertEquals(2, dtos.length)",68],["assertEquals(1, dtos.length)",170],["assert x.length == 3",64],["if (ids2 != null && ids2.length() > 0) {",164],["assert type.genericsTypes.length == 2",112],["String fullname=concept_key.substring(concept_key.indexOf(\"\\\\\",2), concept_key.length());",60],["String fullname = concept_key.substring(concept_key.indexOf(\"\\\\\", 2), concept_key.length());",115],["assertEquals(3, myItems.length);",63],["if (subjectIds2 != null && subjectIds2.length() != 0) {",77]],"useCount":7399},{"word":"level","context":[["grails.project.source.level = 1.7",97],["state \"level\", action:\"switch level.setLevel\"",98],["pattern = \"%level %logger - %msg%n\"",121],["@RequiresPermissions(level = AccessLevel.VIEW)",178],["grails.project.target.level = 1.7",98],["state \"level\", action:\"switch level.setLevel\"",98],["grails.project.target.level = 1.6",766],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["grails.project.source.level = 1.6",731]],"useCount":5148},{"word":"li","context":[["* </li>",78],["li {",395],["writer << '</li>'",93],["*     <li>",35],["li(class: 'active') {",42],["out << \"<li>\"",69],["* <li>",49],["out << \"</li>\"",80],["</li>",43],["out << '</li>'",46]],"useCount":2587},{"word":"line","context":[["String line;",125],["line = line.trim()",71],["line = line.trim()",71],["file.eachLine { line ->",78],["def line",81],["query = query + line + \"\\n\"",86],["line.errors.rejectValue('accountCode', null)",87],["String line",71],["style[0].value() == 'line'",448],["remove this line */",69]],"useCount":5673},{"word":"link","context":[["* {@link String}",89],["when: 'click the Admin link (if needed)'",116],["*       separable from, or merely link (or bind by name) to the interfaces of,",98],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365],["* @param self The {@code this} reference for the {@link Client}",189],["* @param self The {@code this} reference for the {@link IndicesAdminClient}.",165],["* See the API for {@link grails.test.mixin.web.GroovyPageUnitTestMixin} for usage instructions",127]],"useCount":10653},{"word":"linkedin","context":[["* @author ypujante@linkedin.com",153],["* @author ypujante@linkedin.com */",120],["package com.linkedin.gradle.hadoopdsl.job;",52],["import org.linkedin.groovy.util.json.JsonUtils",54],["import com.linkedin.gradle.hadoopdsl.NamedScope;",56],["import org.linkedin.glu.provisioner.core.model.SystemModel",57],["import org.linkedin.util.clock.Timespan",72],["import org.linkedin.glu.agent.api.MountPoint",60],["import org.linkedin.util.io.resource.Resource",57],["package com.linkedin.gradle.hadoopdsl;",57]],"useCount":2866},{"word":"lir","context":[["mnt-by:       lir-MNT",347],["password: lir",1599],["mnt-lower:    lir-MNT",64],["syncUpdate(getTransient(\"SUB-ALLOC-PA\") + \"password: owner3\\npassword: lir\")",53],["syncUpdate(getTransient(\"ASS-END\") + \"password: lir\\npassword: end\\npassword: owner3\")",45],["syncUpdate(getTransient(\"PART-PA\") + \"password: lir\")",38],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: owner3\\npassword: hm\\npassword: lir\")",67],["mnt-by:       lir-mnt",67],["password:   lir",78],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80]],"useCount":2911},{"word":"list","context":[["def list(Integer max) {",409],["redirect action: 'list'",375],["return list",356],["def list = {",1105],["def model = controller.list()",428],["def list = []",486],["redirect(action: \"list\")",5000],["redirect(action: \"list\", params: params)",974],["redirect(action: list)",660],["def list() {",606]],"useCount":25669},{"word":"load","context":[["def doc = yaml.load(ymlstr)",57],["parameterization.load()",75],["user == User.load(u.id)",96],["user == User.load(u.id) &&",97],["user == User.load(userId) &&",197],["role == Role.load(r.id)",201],["// load cube with same name, but different structure in TEST branch",214],["role == Role.load(roleId)",215],["Gremlin.load();",63],["load()",55]],"useCount":3021},{"word":"location","context":[["String location",118],["def phrases = location.helloHome?.getPhrases()*.label",116],["if (location.contactBookEnabled) {",110],["if (location.timeZone) {",135],["location('url')",299],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["// if (System.properties[\"${appName}.config.location\"]) {",522],["// Online location of the plugin's browseable source code.",295],["// if(System.properties[\"${appName}.config.location\"]) {",140],["df.setTimeZone(location.timeZone)",139]],"useCount":6549},{"word":"locations","context":[["grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",36],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["// grails.config.locations = [ \"classpath:${appName}-config.properties\",",623],["grails.config.locations = [",83],["locations[0].'hudson.scm.SubversionSCM_-ModuleLocation'.size() == 1",26],["//This will be the array of text file locations.",52],["grails.config.locations = []",42],["// locations to search for config files that get merged into the main config;",493],["// locations to search for config files that get merged into the main config",204],["// TODO: subscribe to attributes, devices, locations, etc.",115]],"useCount":2871},{"word":"log","context":[["if (log.debugEnabled) {",807],["log \"warn\"",359],["// Example of changing the log pattern for the default console appender:",469],["// Example of changing the log pattern for the default console",515],["log.debug \"Updated with settings: ${settings}\"",515],["log.debug \"Installed with settings: ${settings}\"",523],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667]],"useCount":28459},{"word":"log4j","context":[["import org.apache.logging.log4j.Logger",74],["// log4j configuration",714],["log4j.main = {",229],["import org.apache.log4j.Logger;",194],["import org.apache.log4j.Level",111],["import org.apache.log4j.Logger",981],["log4j = {",1127],["import org.apache.log4j.*",95],["import org.apache.logging.log4j.LogManager",86],["log4j {",85]],"useCount":4726},{"word":"logger","context":[["logger.info(\"start\")",72],["pattern = \"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\"",68],["logger {",64],["Logger logger",63],["logger.info(\"Rule created: \"+rule.getUID())",62],["logger.info(\"Event: \" + e.topic)",55],["Logger logger = Mock()",54],["this.logger = logger",110],["this.logger = logger",110],["pattern = \"%level %logger - %msg%n\"",121]],"useCount":3003},{"word":"logging","context":[["import org.gradle.api.logging.Logging",342],["import groovy.util.logging.Slf4j",3701],["import org.apache.commons.logging.Log",733],["grails.logging.jul.usebridge = true",729],["// request parameters to mask when logging exceptions",610],["grails.logging.jul.usebridge = false",585],["import groovy.util.logging.Log4j",566],["import org.gradle.api.logging.Logger",521],["import groovy.util.logging.Log",372],["import org.apache.commons.logging.LogFactory",1085]],"useCount":13288},{"word":"login","context":[["login()",331],["* Show the login page.",139],["* Callback after a failed login. Redirects to the auth page with a warning message.",130],["redirect(controller: \"login\", action: \"denied\")",129],["* Default action; redirects to 'defaultTargetUrl' if logged in, /login/auth otherwise.",129],["request.servletPath = \"/login\"",123],["'form-login'()",111],["msg = g.message(code: \"springSecurity.errors.login.fail\")",101],["msg = g.message(code: \"springSecurity.errors.login.disabled\")",99],["msg = g.message(code: \"springSecurity.errors.login.passwordExpired\")",98]],"useCount":4362},{"word":"long","context":[["static boolean exists(long userId, long roleId) {",108],["long id",106],["static boolean exists(long userId, long roleId) {",108],["long now = System.currentTimeMillis()",114],["long startTime = System.currentTimeMillis()",165],["long start = System.currentTimeMillis()",171],["static UserRole get(long userId, long roleId) {",216],["static UserRole get(long userId, long roleId) {",216],["private static final long serialVersionUID = 1L;",253],["private static final long serialVersionUID = 1",508]],"useCount":5389},{"word":"lookup","context":[["assert !lookup",531],["def results = lookup.lookup(ParameterBo.class, builder.build());",100],["import com.intellij.codeInsight.lookup.LookupElement",109],["import com.intellij.codeInsight.lookup.impl.LookupImpl",111],["import com.intellij.codeInsight.lookup.LookupElementPresentation",112],["assert !lookup.calculating",118],["import com.intellij.codeInsight.lookup.LookupManager",119],["incUseCount(lookup, 1)",128],["assert lookup.focused",145],["assert lookup",824]],"useCount":5459},{"word":"lower","context":[["mnt-lower:    RIPE-NCC-HM-MNT",333],["mnt-lower:    liR-MNT",347],["mnt-lower:    LIR-MNT",1452],["mnt-lower:      owner2-mnt",34],["mnt-lower:    LIR2-MNT",247],["mnt-lower:      RIPE-NCC-LOCKED-MNT",124],["mnt-lower:    LiR-MNT",107],["mnt-lower:      RIPE-NCC-HM-MNT",29],["mnt-lower:    lir-MNT",64],["* headers returned: converted to lower case, to upper case, or as-is.",56]],"useCount":3041},{"word":"m","context":[["def bytecode = compile([method:'m'],'''",90],["if (m.matches()) {",97],["if (m) {",110],["assert m",116],["void m() {",124],["//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",703],["return m",129],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340],["console name: 'stdout', layout: pattern(conversionPattern: '%d [%t] %-5p %c - %m%n')",226],["def m = [:]",163]],"useCount":5868},{"word":"mail","context":[["* @author Nikolay Lagutko (nikolay.lagutko@mail.com)",89],["e-mail:        bitbucket@ripe.net",69],["import javax.mail.internet.MimeMessage",66],["e-mail:       org1@test.com",93],["e-mail:  dbtest@ripe.net",120],["e-mail:          dbtest@ripe.net",207],["* e-mail: info _at_ motrice.se",180],["mail {",144],["* mail: Motrice AB, L√•ngsj√∂v√§gen 8, SE-131 33 NACKA, SWEDEN",147],["e-mail:       dbtest@ripe.net",156]],"useCount":2424},{"word":"mailto","context":[["* @author <a href='mailto:limcheekin@vobject.com'>Lim Chee Kin</a>",150],["* @author <a href=\"mailto:jason@planet57.com\">Jason Dillon</a>",335],["* @author <a href='mailto:burt@burtbeckwith.com'>Burt Beckwith</a>",1308],["* @author <a href='mailto:burt@agileorbit.com'>Burt Beckwith</a>",52],["* @author <a href=\"mailto:james@coredevelopers.net\">James Strachan</a>",111],["* @author <a href=\"mailto:jaredsburrows@gmail.com\">Jared Burrows</a>",97],["* @author <a href=\"mailto:herzog@raffael.ch\">Raffael Herzog</a>",92],["* User: Greg Schueler <a href=\"mailto:greg@dtosolutions.com\">greg@dtosolutions.com</a>",88],["* @author <a href='mailto:benjamin.muschko@gmail.com'>Benjamin Muschko</a>",74],["* @author <a href='mailto:donbeave@gmail.com'>Alexey Zhokhov</a>",66]],"useCount":2798},{"word":"main","context":[["setDefaultTarget(main)",114],["main \"switch\"",153],["main {",181],["public static void main(String[] args) {",988],["static void main(String[] args) {",860],["// locations to search for config files that get merged into the main config;",493],["static main(args) {",363],["static void main(args) {",270],["log4j.main = {",229],["// locations to search for config files that get merged into the main config",204]],"useCount":7700},{"word":"make","context":[["assert type == make(HashMap)",112],["make()",111],["GroovyDsl contractDsl = GroovyDsl.make {",173],["assertEmpty(make())",150],["io.codearte.accurest.dsl.GroovyDsl.make {",100],["assertEmpty make()",561],["GroovyDsl groovyDsl = GroovyDsl.make {",128],["assertEmpty(make());",177],["startingBoard = new BoardModelBuilder().make {",316],["fail 'should not make it here'",116]],"useCount":4243},{"word":"manager","context":[["def manager = new IvyDependencyManager(\"test\", \"0.1\")",46],["manager.loadPlugins()",48],["TemplateManager manager = TemplateManager.getInstance(getProject())",57],["final Template template = manager.createTemplate(\"frm\", \"user\", '$VAR$');",54],["final TemplateManager manager = TemplateManager.getInstance(getProject());",310],["doScaling( scalingActivities, manager )",66],["// event.application, event.manager, event.ctx, and event.plugin.",392],["def manager = new IvyDependencyManager(\"test\", \"0.1\",settings)",109],["manager.parseDependencies {",171],["final TemplateManager manager = TemplateManager.getInstance(getProject())",117]],"useCount":2684},{"word":"map","context":[["map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]",112],["def map = [:]",865],["map",549],["return map",533],["createEvent(map)",152],["// use sorted map to be able to predict the order in which tag attributes are generated",140],["assert map",130],["Map map = [:]",113],["package org.apache.tinkerpop.gremlin.process.traversal.step.map",87],["import org.codehaus.jackson.map.ObjectMapper",101]],"useCount":11341},{"word":"mapping","context":[["'org.codehaus.groovy.grails.web.mapping', // URL mapping",390],["'org.codehaus.groovy.grails.web.mapping', // URL mapping",390],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904],["static mapping = {",5079],["'org.codehaus.groovy.grails.web.mapping',        // URL mapping",510],["def mapping = builder.evaluate {",118],["* A domain class describes the data object and it's mapping to the database",110],["static\tmapping = {",104],["'org.codehaus.groovy.grails.web.mapping',        // URL mapping",510]],"useCount":11487},{"word":"maven","context":[["//mavenRepo \"http://download.java.net/maven/2/\"",1031],["grails.project.dependency.resolver = \"maven\" // or ivy",633],["maven {",336],["maven{",195],["1 * jobManagement.requirePlugin('maven-plugin')",97],["grails.project.dependency.resolver = \"maven\"",147],["context.maven {",118],["mavenRepo \"http://download.java.net/maven/2/\"",106],["maven { url \"${mavenRepo.uri}\" }",105],["import org.gradle.api.publish.maven.MavenPublication",86]],"useCount":5489},{"word":"mavenCentral","context":[["repos.mavenCentral()",31],["repositories { mavenCentral() }",85],["//mavenCentral()",217],["mavenCentral()",1926]],"useCount":2259},{"word":"mavenRepo","context":[["mavenRepo \"http://snapshots.repository.codehaus.org\"",54],["//mavenRepo \"http://repository.jboss.com/maven2/\"",1030],["//mavenRepo \"http://download.java.net/maven/2/\"",1031],["mavenRepo \"http://download.java.net/maven/2/\"",106],["//mavenRepo \"http://repository.codehaus.org\"",1027],["//mavenRepo \"http://snapshots.repository.codehaus.org\"",496],["maven { url \"${mavenRepo.uri}\" }",105],["mavenRepo \"http://repo.spring.io/milestone/\"",48],["mavenRepo \"http://repository.codehaus.org\"",76],["mavenRepo \"http://repository.jboss.com/maven2/\"",74]],"useCount":4340},{"word":"max","context":[["def list(Integer max) {",409],["params.max = Math.min(max ?: 10, 100)",1252],["def index(Integer max) {",929],["params.max = Math.min(params.max ? params.int('max') : 10, 100)",507],["params.max = Math.min(params.max ? params.int('max') : 10, 100)",507],["params.max = params?.max?.toInteger() ?: pagination.max",127],["params.max = Math.min(max ?: 10, 100)",1252],["params.max = Math.min(params.max ? params.int('max') : 10, 100)",507],["params.max = params?.max?.toInteger() ?: pagination.max",127],["params.max = params?.max?.toInteger() ?: pagination.max",127]],"useCount":10869},{"word":"maxMemory","context":[["war    : [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",27],["console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]",598],["//  compile: [maxMemory: 256, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",608],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",27],["test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon: true],",27],["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",28],["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",537],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",509],["test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",469],["//   run: [maxMemory:1024, minMemory:64, debug:false, maxPerm:256]",141]],"useCount":3177},{"word":"maxPerm","context":[["//  compile: [maxMemory: 256, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",608],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",509],["console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]",598],["war    : [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",27],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",27],["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",28],["maxPerm  : 384,",32],["//   run: [maxMemory:1024, minMemory:64, debug:false, maxPerm:256]",141],["test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",469],["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",537]],"useCount":3166},{"word":"me","context":[["shell('look at me')",171],["targetNode.value[0].value() == 'me@gmail.com'",38],["// fail \"Implement me\"",45],["childStep.command[0].value() == 'look at me'",46],["context.publishJabber('me@gmail.com') {",81],["javaOpts(['me', 'too'])",82],["acmeGroovyNode.javaOpts[0].value() == 'test me too'",82],["fail \"Implement me\"",1103],["expect:\"fix me\"",461],["* Login page for users with a remember-me cookie but accessing a IS_AUTHENTICATED_FULLY page.",138]],"useCount":2965},{"word":"merge","context":[["/* This function merge the sorted snp in sorted gene, organized by chromosome",27],["def config = one.merge(two)",34],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291],["config.merge(newConfig)",44],["SpecificationMerger.merge(merge, with)",72],["SpecificationMerger.merge(merge, with)",72],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",77],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",115],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",134],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",142]],"useCount":2378},{"word":"message","context":[["def ack = ackFor message",2652],["controller.flash.message != null",736],["def ack = new AckResponse(\"\", message)",736],["def message = syncUpdate(\"\"\"\\",525],["super(message)",378],["assert controller.flash.message != null",377],["assert flash.message != null",2293],["def message = send new Message(",2571],["flash.message != null",2894],["String message",319]],"useCount":31305},{"word":"metadata","context":[["applyMetadata(metadata)",72],["package io.spring.initializr.metadata",75],["<metadata>",69],["import griffon.metadata.ArtifactProviderFor",170],["request.resolve(metadata)",161],["def metadata = InitializrMetadataTestBuilder.withDefaults()",157],["import org.codehaus.groovy.grails.plugins.metadata.GrailsPlugin",145],["// simulator metadata",188],["// Extra (optional) plugin metadata",275],["metadata {",896]],"useCount":4188},{"word":"method","context":[["request.method = 'POST'",806],["request.method = \"POST\"",354],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["redirect action: \"index\", method: \"GET\"",941],["}// End of method",283],["method: \"GET\",",192],["redirect action:\"index\", method:\"GET\"",658],["request.method = 'DELETE'",558],["request.method = 'PUT'",543],["// TODO Auto-generated method stub",424]],"useCount":16245},{"word":"methods","context":[["import org.apache.http.client.methods.HttpPost",128],["//-- Non-public methods ---------------------",109],["//-- Feature methods ------------------------",86],["// exercise service methods",82],["return null  //To change body of implemented methods use File | Settings | File Templates.",86],["//To change body of implemented methods use File | Settings | File Templates.",71],["import org.apache.http.client.methods.CloseableHttpResponse",50],["import org.apache.http.client.methods.HttpGet",141],["// TODO Implement registering dynamic methods to classes (optional)",359],["//-- Public methods -------------------------",197]],"useCount":3135},{"word":"mime","context":[["import org.apache.http.entity.mime.content.StringBody",37],["import retrofit.mime.TypedString",52],["import grails.web.mime.MimeType",96],["grails.mime.types = [ html: ['text/html','application/xhtml+xml'],",205],["grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format",401],["grails.mime.use.accept.header = false",349],["grails.mime.disable.accept.header.userAgents = ['Gecko', 'WebKit', 'Presto', 'Trident']",343],["grails.mime.types = [ // the first one is the default format",306],["grails.mime.types = [",246],["grails.mime.use.accept.header = true",34]],"useCount":2485},{"word":"min","context":[["params.max = Math.min(max ?: 10, 100)",1252],["params.max = Math.min(params.max ? params.int('max') : 25, 100)",99],["params.max = Math.min(params.max ? params.int('max') : 10, 100)",507],["params.max = Math.min(params.max ? params.int('max') : 20, 100)",60],["params.max = Math.min(params.max ? params.int('max') : 30, 100)",33],["checkstyleNode.'hudson.plugins.violations.TypeConfig'[0].min[0].value() == '10'",32],["typeConfigNode.min[0].value() == '10'",32],["findbugsNode.'hudson.plugins.violations.TypeConfig'[0].min[0].value() == '12'",32],["jslintNode.'hudson.plugins.violations.TypeConfig'[0].min[0].value() == '10'",32],["min(violationsEntry.min.toString())",32]],"useCount":2985},{"word":"minMemory","context":[["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",28],["//  compile: [maxMemory: 256, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",608],["//   run: [maxMemory:1024, minMemory:64, debug:false, maxPerm:256]",141],["console: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256]",598],["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",537],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",509],["test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon:true],",469],["war    : [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",27],["test: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, daemon: true],",27],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve: false],",27]],"useCount":3166},{"word":"mixin","context":[["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["import grails.test.mixin.TestMixin",764],["import grails.test.mixin.*",2946],["import grails.test.mixin.Mock",733],["import grails.test.mixin.support.GrailsUnitTestMixin",458],["import grails.test.mixin.integration.Integration",288],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["import grails.test.mixin.TestFor",4744]],"useCount":16642},{"word":"mnt","context":[["mnt-by:       END-USER-MNT",318],["mnt-lower:    LIR-MNT",1452],["mnt-by:       RIPE-NCC-HM-MNT",1137],["mnt-by:       LIR-MNT",1356],["mnt-by:       lir-MNT",347],["mnt-lower:    RIPE-NCC-HM-MNT",333],["mnt-by:  OWNER-MNT",332],["mnt-lower:    liR-MNT",347],["mnt-by:         LIR-MNT",368],["mnt-by: TEST-MNT",549]],"useCount":13889},{"word":"mock","context":[["import org.springframework.mock.web.MockHttpServletRequest",366],["def dataObjectService = mock.proxyDelegateInstance()",91],["def boService = mock.proxyDelegateInstance()",112],["import groovy.mock.interceptor.MockFor",308],["import org.springframework.mock.web.MockHttpServletResponse",298],[".to('mock:output')",198],["mock.verify(boService)",158],["import static org.mockito.Mockito.mock",153],["import org.springframework.mock.web.MockFilterChain",143],["import org.springframework.mock.web.MockServletContext",129]],"useCount":4927},{"word":"mockJobManagement","context":[["1 * mockJobManagement.requirePlugin('urltrigger')",126],["1 * mockJobManagement.requireMinimumPluginVersion('build-timeout', '1.12')",118],["1 * mockJobManagement.logPluginDeprecationWarning('git', '2.5.3')",101],["1 * mockJobManagement.requirePlugin('gerrit-trigger')",70],["1 * mockJobManagement.logDeprecationWarning()",69],["1 * mockJobManagement.requirePlugin('git')",443],["1 * mockJobManagement.logPluginDeprecationWarning('git', '2.2.6')",307],["1 * mockJobManagement.requirePlugin('subversion')",236],["(1.._) * mockJobManagement.requireMinimumPluginVersion('subversion', '2.1')",155],["1 * mockJobManagement.requireMinimumPluginVersion('git', '2.2.6')",230]],"useCount":3611},{"word":"mode","context":[["input \"modes\", \"mode\", title: \"Only when mode is\", multiple: true, required: false",63],["def result = !modes || modes.contains(location.mode)",77],["input \"modes\", \"mode\", title: \"Only when mode is\", multiple: true, required: false",63],["flush.mode = 'manual' // OSIV session flush mode outside of transactional context",149],["flush.mode = 'manual' // OSIV session flush mode outside of transactional context",149],["singleSession = true // configure OSIV singleSession mode",232],["// set \"singleSession = false\" OSIV mode in hibernate configuration after enabling",277],["// configure passing read-only to OSIV session by default, requires \"singleSession = false\" OSIV mode",277],["mode title: \"Set for specific mode(s)\", required: false",55],["mode title: \"Set for specific mode(s)\", required: false",55]],"useCount":3308},{"word":"model","context":[["void \"Test the index action returns the correct model\"() {",739],["def model = controller.create()",447],["then:\"The model is correct\"",648],["then:\"The model is correctly created\"",648],["then:\"The create view is rendered again with the correct model\"",676],["import com.netflix.spinnaker.orca.pipeline.model.Stage",677],["void \"Test that the edit action returns the correct model\"() {",729],["void \"Test the create action returns the correct model\"() {",731],["then:\"A model is populated containing the domain instance\"",1296],["void \"Test that the show action returns the correct model\"() {",734]],"useCount":41854},{"word":"module","context":[["module {",96],["</module>",55],["module.ver = getVersion()",48],["\"</module>\"",48],["module.ivy.expectGet()",47],["module.publish()",56],["assert module.valid",59],["context: { c -> c.putAll( [ component: c.item.component, module: c.item.module] ) } ) {",77],["import com.intellij.openapi.module.Module",96],["context: { c -> c.putAll( [ component: c.item.component, module: c.item.module] ) } ) {",77]],"useCount":4378},{"word":"msg","context":[["flash.message = msg",185],["msg = g.message(code: \"springSecurity.errors.login.disabled\")",99],["msg = g.message(code: \"springSecurity.errors.login.fail\")",101],["super( msg );",104],["render([error: msg] as JSON)",117],["pattern = \"%level %logger - %msg%n\"",121],["String msg = ''",135],["sendPush(msg)",169],["msg = g.message(code: \"springSecurity.errors.login.passwordExpired\")",98],["msg = g.message(code: \"springSecurity.errors.login.expired\")",98]],"useCount":5517},{"word":"multipartForm","context":[["form multipartForm {",2826],["multipartForm: 'multipart/form-data',",549],["multipartForm: 'multipart/form-data'",249]],"useCount":3624},{"word":"multiple","context":[["input \"days\", \"enum\", title: \"Only on certain days of the week\", multiple: true, required: false,",68],["multiple:   true,",363],["@HttpEmbedded(multiple=true)",256],["@HttpEmbedded( multiple = true )",211],["multiple:   false,",178],["* @throws EnumerationNotUnique if the input parameter mapps to multiple values",40],["* If there are multiple, search by concept_code. Return none to multiple defaults.",46],["@HttpEmbedded(multiple = true)",70],["* If there are multiple, search by concept_code. Return none to multiple defaults.",46],["input \"modes\", \"mode\", title: \"Only when mode is\", multiple: true, required: false",63]],"useCount":3500},{"word":"must","context":[["* @param domain Domain that must be filled",45],["*       (a) You must give any other recipients of the Work or",98],["*       (b) You must cause any modified files to carry prominent notices",98],["*       (c) You must retain, in the Source form of any Derivative Works",98],["*           distribution, then any Derivative Works that You distribute must",98],["* are met: 1) Redistributions of source code must retain the above",79],["checkNotNullOrEmpty(name, 'name must be specified')",58],["*\t\t3.\tTo clarify 1 and 2 above, if you use these modifications, it must be a free project, and",53],["// For Pri 1 tests, we must shorten the output test binary path names.",43],["checkNotNullOrEmpty(filePath, 'filePath must not be null or empty')",42]],"useCount":2588},{"word":"my","context":[["plot('my group', 'some.csv') {",512],["group[0].value() == 'my group'",480],["//    def organization = [ name: \"My Company\", url: \"http://www.my-company.com/\" ]",194],["'dir/my.properties'",83],["plot('my group', 'test.csv') {",64],["configName[0].value() == 'my-server-02'",55],["server('my-server-01') {",56],["server('my-server-02') {",56],["propertiesFile('dir/my.properties') // Parameters from properties file",58],["Scientist scientistInstance = new Scientist(firstName: \"Test\", lastName: \"User\", email:\"my@email.com\", password:\"test\")",62]],"useCount":3357},{"word":"myFixture","context":[["myFixture.addClass('''\\",293],["myFixture.completeBasic()",1587],["myFixture.configureByText(\"a.java\", \"\"\"",704],["myFixture.checkResult \"\"\"",612],["myFixture.configureByText 'a.java', '''",481],["myFixture.configureByText \"a.java\", \"\"\"",422],["myFixture.checkResult '''",401],["myFixture.type('\\n')",318],["myFixture.complete(CompletionType.BASIC, 2)",317],["myFixture.configureByText(\"a.groovy\", \"\"\"",213]],"useCount":28127},{"word":"myParameterName","context":[["context.buildParameterNodes['myParameterName'].name() == 'hudson.model.BooleanParameterDefinition'",45],["context.labelParam('myParameterName') {",60],["context.buildParameterNodes['myParameterName'].description.text() == ''",141],["name.text() == 'myParameterName'",147],["with(context.buildParameterNodes['myParameterName']) {",177],["context.buildParameterNodes['myParameterName'].name.text() == 'myParameterName'",245],["context.buildParameterNodes['myParameterName'].name.text() == 'myParameterName'",245],["context.buildParameterNodes['myParameterName'].name() == 'hudson.model.StringParameterDefinition'",45],["context.buildParameterNodes['myParameterName'].name() == 'hudson.model.RunParameterDefinition'",45],["context.buildParameterNodes['myParameterName'].name() == 'hudson.model.TextParameterDefinition'",45]],"useCount":2232},{"word":"mysql","context":[["// runtime 'mysql:mysql-connector-java:5.1.27'",182],["// runtime 'mysql:mysql-connector-java:5.1.27'",182],["// runtime 'mysql:mysql-connector-java:5.1.5'",108],["// runtime 'mysql:mysql-connector-java:5.1.24'",64],["// runtime 'mysql:mysql-connector-java:5.1.22'",82],["// runtime 'mysql:mysql-connector-java:5.1.22'",82],["// runtime 'mysql:mysql-connector-java:5.1.29'",212],["// runtime 'mysql:mysql-connector-java:5.1.29'",212],["driverClassName = \"com.mysql.jdbc.Driver\"",333],["// runtime 'mysql:mysql-connector-java:5.1.5'",108]],"useCount":2566},{"word":"n","context":[["doTest('\\n')",175],["\"  }\\n\" +",118],["pattern = \"%level %logger - %msg%n\"",121],["myFixture.type '\\n'",135],["type '\\n'",214],["console name: 'stdout', layout: pattern(conversionPattern: '%d [%t] %-5p %c - %m%n')",226],["dataWriter.write(\"\\n\");",259],["myFixture.type('\\n')",318],["//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",703],["\"\\n\" +",1133]],"useCount":18723},{"word":"name","context":[["//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",703],["String name",6076],["this.name = name",1174],["String name;",642],["column(name: \"version\", valueNumeric: \"0\")",628],["name",603],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673],["//params[\"name\"] = 'someValidName'",995],["this.name = name",1174]],"useCount":96242},{"word":"names","context":[["return names",99],["*       names, trademarks, service marks, or product names of the Licensor,",98],["* 3. Neither the name of the Smithsonian Astrophysical Observatory nor the names of its contributors",84],["names.sort() // needs to sort as there is no guarantee on the order within a folder",78],["names = []",68],["*       names, trademarks, service marks, or product names of the Licensor,",98],["assert names == expected",117],["def names = []",129],["* Neither the name of Stockholm University nor the names of its contributors",167],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673]],"useCount":3604},{"word":"namespace","context":[["def f=namespace(lib.FormTagLib)",59],["namespace: \"JAMAPPS\",",57],["def collection = new MongoCollectionImpl(namespace, Document, codecRegistry, readPreference, writeConcern, executor)",52],["String namespace",73],["def f = namespace(lib.FormTagLib);",121],["namespace: \"\",",52],["namespace: \"smartthings\",",231],["import javax.xml.namespace.QName",122],["namespace: \"MichaelStruck\",",51],["namespace: \"mrnohr\",",50]],"useCount":2662},{"word":"ncube","context":[["ncube.addAxis(axis)",114],["package com.cedarsoftware.ncube",209],["parse(ncube, '''",48],["ncube.getCell(coord, output)",49],["assert ncube.containsCell(coord)",72],["ret = ncube.getCell(input, output)",69],["ncube.getCell coord, output",68],["ncube.getCell(coord)",62],["NCubeManager.addCube(ncube.applicationID, ncube)",52],["NCubeManager.addCube(ncube.applicationID, ncube)",52]],"useCount":2894},{"word":"net","context":[["changed:      dbtest@ripe.net 20130101",237],["changed:      dbtest@ripe.net",325],["'net.sf.ehcache.hibernate'",892],["changed:      dbtest@ripe.net 20020101",955],["//mavenRepo \"http://download.java.net/maven/2/\"",1031],["import groovyx.net.http.HTTPBuilder",402],["changed:        noreply@ripe.net 20120101",339],["import groovyx.net.http.ContentType",307],["import groovyx.net.http.RESTClient",512],["changed:     dbtest@ripe.net",279]],"useCount":22654},{"word":"netflix","context":[["import com.netflix.spinnaker.orca.pipeline.model.Pipeline",322],["import com.netflix.spinnaker.clouddriver.security.AccountCredentialsProvider",324],["import com.netflix.spinnaker.clouddriver.orchestration.AtomicOperation",285],["import com.netflix.spinnaker.clouddriver.data.task.Task",349],["import com.netflix.spinnaker.clouddriver.data.task.TaskRepository",330],["import com.netflix.spinnaker.orca.ExecutionStatus",484],["package com.netflix.asgard",634],["import com.netflix.spinnaker.orca.pipeline.model.Stage",677],["import com.netflix.spinnaker.orca.pipeline.model.PipelineStage",292],["import com.netflix.spinnaker.orca.DefaultTaskResult",299]],"useCount":23627},{"word":"netname","context":[["netname: EXACT-INETNUM",17],["netname:      RIPE-NET1",547],["netname: RIPE-NCC",337],["netname:      TEST-NET-NAME",1457],["netname:      EU-ZZ-2001-600",28],["netname:      IANA-BLK",30],["netname:      EU-ZZ-2001-0600",756],["netname:      RIPE-NET",18],["\"netname: RIPE-NCC\\n\" +",32],["netname:    RIPE-NCC",68]],"useCount":3319},{"word":"new","context":[["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["def writer = new StringWriter()",564],["missions.add(new Mission(text: \"\"\"",486],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["Sql sql = new Sql(dataSource)",472],["Sql sql = new Sql(dataSource);",691],["def ack = new AckResponse(\"\", message)",736],["throw new UnsupportedOperationException()",925],["def message = send new Message(",2571],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648]],"useCount":174991},{"word":"newInstance","context":[["clazz.newInstance().run()",69],["GroovyObject obj = domainClass.newInstance()",71],["instance = super.newInstance(builder, name, value, attributes)",268],["protected Object newInstance(ParameterList parameters, String value) {",184],["DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();",139],["XPathFactory factory = XPathFactory.newInstance();",139],["Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes) {",127],["public Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes) {",120],["Sql sql = Sql.newInstance(dataSource)",86],["def p = personClass.newInstance()",66]],"useCount":3809},{"word":"newJob","context":[["setMachineAffinity(newJob, os, architecture)",96],["Utilities.addGithubPushTrigger(newJob)",142],["Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")",234],["Utilities.addPeriodicTrigger(newJob, '@daily')",155],["Utilities.setJobTimeout(newJob, 240)",105],["Utilities.setMachineAffinity(newJob, 'Windows_NT', 'latest-or-auto')",89],["Utilities.addXUnitDotNETResults(newJob, 'bin/tests/**/testResults.xml')",86],["Utilities.addArchival(newJob, \"fx/bin/tests/**/testResults.xml\")",85],["Utilities.addArchival(newJob, \"bin/Product/**\")",180],["setTestJobTimeOut(newJob, scenario)",222]],"useCount":3521},{"word":"next","context":[["package de.ddb.next",95],["while(rs.next()){",41],["context.buildPipelineTrigger('next') {",64],["on(\"next\") {",64],["iterator.next()",70],["rs.next()",74],["// display next link when not on laststep",40],["cursor.next()",37],["downstreamProjectNames[0].value() == 'next'",96],["while (rs.next()) {",181]],"useCount":2807},{"word":"nextflow","context":[["package nextflow.util",122],["package nextflow.executor",138],["import nextflow.Session",157],["import nextflow.processor.TaskRun",114],["import nextflow.file.FileHelper",84],["package nextflow.cli",85],["import nextflow.Channel",88],["package nextflow.processor",98],["import nextflow.exception.AbortOperationException",100],["import nextflow.util.Duration",106]],"useCount":2642},{"word":"nio","context":[["import java.nio.file.attribute.BasicFileAttributes",63],["import java.nio.file.FileSystems",106],["import java.nio.file.StandardCopyOption",99],["import java.nio.file.NoSuchFileException",51],["import java.nio.file.Paths",980],["import java.nio.charset.StandardCharsets",158],["import java.nio.ByteBuffer",177],["import java.nio.charset.Charset",324],["import java.nio.file.Files",801],["import java.nio.file.Path",933]],"useCount":4522},{"word":"no","context":[["names.sort() // needs to sort as there is no guarantee on the order within a folder",78],["throw new IllegalArgumentException('no.valid.id')",69],["'no-comparator'()",64],[".addHeader(\"Cache-Control\", \"no-cache\")",40],["// This should be the same instance and no changes",42],["// no instance",54],["*       worldwide, non-exclusive, no-charge, royalty-free, irrevocable",196],["// no-op",175],["fax-no:  +44 282 411140",92],["// Basic archiving of the build, no pal tests",108]],"useCount":4457},{"word":"node","context":[["Node root = view.node",376],["node",95],["view.node.description[0].text() == 'foo'",118],["strategy: node-first",118],["for (NodeInfo node : nodes) {",120],["configure { node ->",121],["protected void addExtensionNode(Node node) {",145],["return node",195],["node {",213],["project / node",283]],"useCount":13413},{"word":"nodes","context":[["//iterate over all the nodes",69],["NodeList nodes = (NodeList) result;",70],["for (NodeInfo node : nodes) {",120],["import org.jsoup.nodes.Document",123],["void visit(ASTNode[] nodes, SourceUnit source) {",66],["The following nodes will become available on a View script upon installing this plugin",62],["for (int i = 0; i < nodes.getLength(); i++) {",62],["import org.jsoup.nodes.Element",52],["//NodeList nodes = (NodeList) result;",69],["def nodes = []",41]],"useCount":2237},{"word":"none","context":[["public static final String TAGLIB_CODEC = 'none'",138],["public static final String STATIC_CODEC = 'none'",138],["assert swing.ii.description == '<none>'",108],["grails.views.default.codec = \"none\" // none, html, base64",313],["grails.views.default.codec=\"none\" // none, html, base64",167],["grails.views.default.codec = \"none\" // none, html, base64",313],["staticparts = 'none' // escapes output from static template parts",442],["taglib = 'none' // escapes output from taglibs",444],["\"protein_target\" : \"none\"",83],["grails.views.default.codec=\"none\" // none, html, base64",167]],"useCount":3482},{"word":"not","context":[["fail 'should not make it here'",116],["// escapes all not-encoded output at final stage of outputting",443],["// plugins needed at runtime but not for compilation",458],["not {",267],["// configuration for plugin testing - will not be included in the plugin zip",172],["log.info \"Run service again to ensure that configuration is not set double.\"",130],["code: 'default.not.found.message',",104],["waitForAssert {assertThat receivedEvent, not(null)}",100],["*           within such NOTICE file, excluding those notices that do not",98],["*       not limited to compiled object code, generated documentation,",98]],"useCount":15554},{"word":"notFound","context":[["def notFound() {",11],["notFound params.id",15],["flash.error = message(code: 'spring.security.ui.forgotPassword.user.notFound')",11],["\"404\"(view: '/notFound')",18],["redirect(controller: 'error', action: 'notFound')",25],["\"404\"(view:'/notFound')",92],["protected void notFound() {",890],["notFound()",2712]],"useCount":3774},{"word":"now","context":[["def now = new Date()",457],["now,",83],["Date now = new Date()",199],["def currTime = now()",123],["long now = System.currentTimeMillis()",114],["//Skip configs that aren't Checked or Release (so just Debug, for now)",110],["Date now = new Date();",102],["// Only x64 for now",94],["def now = Instant.now()",82],["def now = Instant.now()",82]],"useCount":3912},{"word":"npassword","context":[["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: lir\\npassword: hm\\npassword: owner3\")",80],["syncUpdate(getTransient(\"RIR-ALLOC-25\") + \"password: hm\\npassword: owner3\")",84],["syncUpdate(getTransient(\"P-LOW\") + \"password: hm\\npassword: owner3\")",113],["syncUpdate(getTransient(\"ALLOC-PI\") + \"password: owner3\\npassword: hm\")",116],["syncUpdate(getTransient(\"RIR-ALLOC-20\") + \"password: owner3\\npassword: hm\")",201],["syncUpdate(getTransient(\"ALLOC-UNS\") + \"password: owner3\\npassword: hm\")",280],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: owner3\\npassword: hm\\npassword: lir\")",67],["syncUpdate(getTransient(\"LIR-ALLOC-30\") + \"password: owner3\\npassword: hm\\npassword: lir\")",67]],"useCount":2973},{"word":"nrFound","context":[["ack.summary.nrFound == 1",3662],["ack2.summary.nrFound == 1",17],["ack.summary.nrFound == 2",215],["ack.summary.nrFound == 3",60],["ack.summary.nrFound == 4",35],["ack.summary.nrFound == 0",31],["ack.summary.nrFound == 5",19]],"useCount":4039},{"word":"null","context":[["return null;",2182],["assert params != null",1177],["null,",1813],["controller.update(null)",747],["context.scmNodes[0] != null",786],["controller.delete(null)",749],["assert flash.message != null",2293],["return null",9897],["flash.message != null",2894],["null",2512]],"useCount":97692},{"word":"nullable","context":[["name(nullable: false, blank: false)",50],["dateCreated(nullable:true)",53],["lastUpdated(nullable:true)",62],["@Column(nullable = false)",67],["constraints(nullable: false)",376],["nullable = false;",79],[".buildColumn().name(\"id\").columnType(\"int\").nullable(false).end()",49],["description nullable: true",89],["constraints(nullable: \"true\")",94],["constraints(nullable: \"false\")",3732]],"useCount":7087},{"word":"num","context":[["queryObject(\"-r -T aut-num AS123\", \"aut-num\", \"AS123\")",109],["documentInstance.errorMessage(code: 'document.line.message', args: [num, temp], default: \"Line ${num}: ${temp}\")",62],["queryObject(\"-rBT aut-num AS123\", \"aut-num\", \"AS123\")",69],["queryObject(\"-rBT aut-num AS123\", \"aut-num\", \"AS123\")",69],["aut-num:        AS400",70],["queryObject(\"-r -T aut-num AS123\", \"aut-num\", \"AS123\")",109],["aut-num:        AS123",77],["documentInstance.errorMessage(code: 'document.line.message', args: [num, temp], default: \"Line ${num}: ${temp}\")",62],["queryObject(\"-r -T aut-num AS10000\", \"aut-num\", \"AS10000\")",70],["queryObject(\"-r -T aut-num AS10000\", \"aut-num\", \"AS10000\")",70]],"useCount":3275},{"word":"number","context":[["//test outdated version number",356],["[COREFX_BUILD: coreFXBuild.build.number,",43],["int number",47],["assertEquals \"wrong number of jobs\",1,doc.job.size()",47],["build(params + [CORECLR_BUILD: coreclrBuildJob.build.number,",48],["stringParam('CORECLR_BUILD', '', \"Build number to copy CoreCLR ${osGroup} binaries from\")",50],["String number",109],["type:       \"number\",",81],["stringParam('CORECLR_WINDOWS_BUILD', '', 'Build number to copy CoreCLR windows test binaries from')",58],["CORECLR_WINDOWS_BUILD: windowsBuildJob.build.number], '${fullTestJobName}')",55]],"useCount":2821},{"word":"o","context":[["boolean equals(o) {",370],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673],["done < <(ps -e -o pid= -o ppid=)",74],["def ref = configureByText('new Fo<caret>o(2, 3)')",75],["boolean equals(Object o) {",87],["print o.foo()",91],["def bar(Object o) {",91],["return o",136],["if (getClass() != o.class) return false",219],["if (this.is(o)) return true",322]],"useCount":7237},{"word":"obj","context":[["def obj = list[0]",127],["obj.setProperty(\"firstName\", \"fred\")",80],["--testNativeBinDir=\\\"\\$(pwd)/clr/bin/obj/${osGroup}.${architecture}.${configuration}/tests\\\" \\\\",85],["securityCode(validator: {val, obj ->",92],["return obj",92],["obj.invokeMethod(\"save\", null)",93],["if (obj == null)",75],["assertTrue(obj instanceof ScheduledExecution)",127],["boolean equals(Object obj) {",207],["public boolean equals(Object obj) {",145]],"useCount":4852},{"word":"object","context":[["* @return the immutable object",88],["//TODO: add invalid values to params object",314],["def object = new MockManagedObject()",133],["* A domain class describes the data object and it's mapping to the database",110],["* @return possible object is",107],["* @param value allowed object is",107],["*       not limited to compiled object code, generated documentation,",98],["* @param im immutable object",94],["* @param bo the mutable business object",94],["//\tstatic\thasOne\t\t= []\t// tells GORM to associate another domain object as an owner in a 1-1 mapping",72]],"useCount":6377},{"word":"of","context":[["// enabled native2ascii conversion of i18n properties files",765],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["// the version or versions of Grails the plugin is designed for",529],["UserContext userContext = UserContext.of(request)",552],["// whether to disable processing of multi part requests",574],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673],["*   This file is part of 'Nextflow'.",1092]],"useCount":42814},{"word":"off","context":[["state \"off\", label: '${name}', action: \"switch.on\", icon: \"st.switches.switch.off\", backgroundColor: \"#ffffff\"",51],["def off() {",419],["sendEvent(name: \"switch\", value: \"off\")",187],["lights.off()",93],["// @formatter:off",77],["state.lastStatus = \"off\"",67],["theswitch.off()",58],["state \"on\", label: '${name}', action: \"switch.off\", icon: \"st.switches.switch.on\", backgroundColor: \"#79b821\"",56],["switches.off()",60],["state \"off\", label: '${name}', action: \"switch.on\", icon: \"st.switches.switch.off\", backgroundColor: \"#ffffff\"",51]],"useCount":2978},{"word":"offset","context":[["params.offset = params?.offset?.toInteger() ?: pagination.offset",130],["params.offset = params?.offset?.toInteger() ?: pagination.offset",130],["params.offset = params?.offset?.toInteger() ?: pagination.offset",130],["offset: params.offset",117],["offset: params.offset",117],["linkParams.offset = offset - max",80],["linkParams.offset = offset - max",80],["linkParams.offset = offset + max",62],["linkParams.offset = offset + max",62],["t.assertRowEquals(offset, pageFooter)",57]],"useCount":3883},{"word":"on","context":[["// the other plugins this plugin depends on",449],["checksums true // Whether to verify checksums on resolve",740],["grails.servlet.version = \"3.0\" // Change depending on target container compliance (2.5 or 3.0)",496],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["sendEvent(name: \"switch\", value: \"on\")",182],["log.debug \"Hit Exception $e on $hubAction\"",175],["grails.servlet.version = \"2.5\" // Change depending on target container compliance (2.5 or 3.0)",241],["* Created on: 02/08/2009",260],["* Work on LensKit has been funded by the National Science Foundation under",332],["def on() {",374]],"useCount":15820},{"word":"one","context":[["dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', ''",134],["grails.mime.types = [ // the first one is the default format",306],["dbCreate = \"create-drop\" // one of 'create', 'create-drop', 'update', 'validate', ''",299],["// Details of company behind the plugin (if there is one)",277],["<groupId>group-one</groupId>",203],["<version>version-one</version>",202],["<artifactId>artifact-one</artifactId>",156],["*           pertain to any part of the Derivative Works, in at least one",98],["dbCreate = \"create-drop\" // one of 'create', 'create-drop','update'",104],["context.booleanParam('one')",156]],"useCount":5427},{"word":"only","context":[["[\"This update has only passed one of the two required hierarchical authorisations\"]",67],["// configure passing transaction's read-only attribute to Hibernate session, queries and criterias",277],["assertEquals \"There should be one and only one opstring\", 1, opstrings.size()",69],["// For x86, only add per-commit jobs for Windows",72],["*           of the NOTICE file are for informational purposes only and",98],["*       of any other Contributor, and only if You agree to indemnify,",98],["// the delete, save and update actions only accept POST requests",194],["then: 'only executed when requested'",67],["// configure passing read-only to OSIV session by default, requires \"singleSession = false\" OSIV mode",277],["// plugins for the build system only",467]],"useCount":4766},{"word":"openapi","context":[["import com.intellij.openapi.application.ApplicationManager",174],["import com.intellij.openapi.vfs.VirtualFile",175],["import com.intellij.openapi.command.WriteCommandAction",131],["import com.intellij.openapi.util.io.FileUtil",124],["import com.intellij.openapi.actionSystem.IdeActions",111],["import com.intellij.openapi.project.Project",108],["import com.intellij.openapi.module.Module",96],["import com.intellij.openapi.editor.Editor",94],["import com.intellij.openapi.roots.ContentEntry",82],["import com.intellij.openapi.util.text.StringUtil",136]],"useCount":3088},{"word":"openqa","context":[["import org.openqa.selenium.chrome.ChromeDriver",118],["import org.openqa.selenium.remote.DesiredCapabilities",103],["import org.openqa.selenium.Keys",97],["} catch (org.openqa.selenium.ElementNotVisibleException e) {",183],["import org.openqa.selenium.WebDriver",179],["import org.openqa.selenium.firefox.FirefoxDriver",145],["} catch(org.openqa.selenium.StaleElementReferenceException e) {",434],["} catch (org.openqa.selenium.StaleElementReferenceException e) {",261],["import org.openqa.selenium.WebElement",251],["import org.openqa.selenium.By",199]],"useCount":2813},{"word":"operation","context":[["operation.operate([])",455],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.100.0.0 - 192.200.255.255\" }",218],["operation.googleOperationPoller =",182],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",123],["def operation = operationContext.operationBuilder().build()",165],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.127\" }",112],["ack.successes.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.0.0 - 192.168.255.255\" }",107],["ack.successes.any { it.operation == \"Create\" && it.key == \"[person] FP1-TEST   First Person\" }",95],["ack.errors.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.255\" }",93],["ack.successes.any { it.operation == \"Create\" && it.key == \"[inetnum] 192.168.200.0 - 192.168.200.255\" }",86]],"useCount":5604},{"word":"optional","context":[["optional[0].value() == true",46],["optional()",48],["* @return local + optional external selectors",81],["// TODO Implement registering dynamic methods to classes (optional)",359],["// TODO Implement post initialization spring config (optional)",357],["// TODO Implement additions to web.xml (optional), this event occurs before",323],["// TODO Implement runtime spring config (optional)",309],["// Extra (optional) plugin metadata",275],["// TODO Implement code that is executed when the application shuts down (optional)",264],["// TODO Implement additions to web.xml (optional)",34]],"useCount":2870},{"word":"options","context":[["options: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]",85],["cmd.execute(options, new StringReader(\"\"), new StringWriter())",88],["def options = [",88],["this.options = options",108],["this.options = options",108],["def options = cli.parse(args)",198],["<options>",221],["</options>",225],["// Set up standard options.",409],["if (!options) {",85]],"useCount":9756},{"word":"or","context":[["grails.project.dependency.resolver = \"maven\" // or ivy",633],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["* documentation and/or other materials provided with the distribution.",673],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["or {",716],["* additional information or have any questions.",768],["* Redistribution and use in source and binary forms, with or without",1343]],"useCount":25220},{"word":"orca","context":[["import com.netflix.spinnaker.orca.DefaultTaskResult",299],["import com.netflix.spinnaker.orca.Task",208],["import com.netflix.spinnaker.orca.clouddriver.KatoService",158],["import com.netflix.spinnaker.orca.pipeline.model.Execution",155],["import com.netflix.spinnaker.orca.clouddriver.tasks.MonitorKatoTask",136],["import com.netflix.spinnaker.orca.TaskResult",281],["import com.netflix.spinnaker.orca.pipeline.model.PipelineStage",292],["import com.netflix.spinnaker.orca.pipeline.model.Pipeline",322],["import com.netflix.spinnaker.orca.pipeline.model.Stage",677],["import com.netflix.spinnaker.orca.ExecutionStatus",484]],"useCount":6468},{"word":"order","context":[["def order = params.order",53],["params.order = params?.order ?: pagination.order",75],["params.order = params?.order ?: pagination.order",75],["params.order = params?.order ?: pagination.order",75],["names.sort() // needs to sort as there is no guarantee on the order within a folder",78],["// use sorted map to be able to predict the order in which tag attributes are generated",140],["params.order = 'desc'",98],["order(\"dateCreated\", \"desc\")",72],["order('id', 'desc')",67],["order(\"id\", \"desc\")",54]],"useCount":4549},{"word":"org","context":[["import org.springframework.stereotype.Component",2455],["import static org.junit.Assert.*",2429],["import org.slf4j.Logger",2552],["import org.slf4j.LoggerFactory",2759],["import org.junit.Before",3308],["import org.springframework.beans.factory.annotation.Autowired",4308],["import org.gradle.api.Project",5797],["import org.junit.Test",10298],["import org.junit.Rule",2142],["import org.gradle.api.tasks.TaskAction",2252]],"useCount":322835},{"word":"os","context":[["if (os != 'Windows_NT') {",245],["assert (os == 'Windows_NT') || (os in Constants.crossList)",1423],["assert (os == 'Windows_NT') || (os in Constants.crossList)",1423],["if (isFlowJob || os == 'Windows_NT') {",166],["switch (os) {",171],["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["assert (os == 'Windows_NT')",205],["\"(?i).*test\\\\W+${os}\\\\W+${scenario}.*\")",1149],["if (os == 'Windows_NT') {",471],["if (os == 'Windows_NT'){",343]],"useCount":13314},{"word":"osm","context":[["import de.iteratec.osm.measurement.schedule.JobGroup",148],["package de.iteratec.osm.csi",131],["import de.iteratec.osm.measurement.environment.Browser",125],["import de.iteratec.osm.measurement.environment.Location",107],["import de.iteratec.osm.measurement.schedule.ConnectivityProfile",89],["import de.iteratec.osm.measurement.schedule.Job",86],["import de.iteratec.osm.csi.Page",81],["import de.iteratec.osm.measurement.environment.WebPageTestServer",79],["package de.iteratec.osm.result",70],["import de.iteratec.osm.result.EventResult",66]],"useCount":2765},{"word":"other","context":[["org-type:        other",147],["other.role?.id == role?.id",183],["other.user?.id == user?.id &&",186],["* and/or other materials provided with the distribution.",193],["if (!(other instanceof UserRole)) {",211],["* and other contributors as indicated by the @author tags.",260],["// the other plugins this plugin depends on",449],["*  o Neither the name of Ben Fortuna nor the names of any other contributors",673],["* documentation and/or other materials provided with the distribution.",673],["boolean equals(other) {",544]],"useCount":8012},{"word":"out","context":[["out",137],["out << \"</div>\"",105],["return out",119],["out.flush()",125],["out << body()",653],["System.out.println();",383],["out << \"\"\"",303],["out.close()",268],["out.println()",187],["Writer out = getOut()",144]],"useCount":10886},{"word":"output","context":[["import org.pillarone.riskanalytics.core.output.SimulationRun",127],["println result.output",134],["return output",162],["assertTrue output.contains(",165],["output.write(valueDelimiter);",181],[".to('mock:output')",198],["scriptlet = 'html' // escapes output from scriptlets in GSPs",366],["staticparts = 'none' // escapes output from static template parts",442],["// escapes all not-encoded output at final stage of outputting",443],["taglib = 'none' // escapes output from taglibs",444]],"useCount":10800},{"word":"overview","context":[["if(page.overview.securityValue.text().equals(\"Off\"))",79],["page.overview.save.isDisplayed()",77],["page.overview.editExportConfiguration.click()",76],["when: 'go to overview tab'",123],["page.overview.cancel.isDisplayed()",76],["waitFor(waitTime) { page.overview.securityValue.isDisplayed() }",88],["page.overview.confirmyesbtn.click()",73],["page.overview.save.click()",86],["then: 'at overview tab'",123],["page.overview.openAddConfigurationPopup()",116]],"useCount":3773},{"word":"owner","context":[["String owner",54],["this.owner = owner",49],["this.owner = owner",49],["password:       owner",62],["//\tstatic\thasOne\t\t= []\t// tells GORM to associate another domain object as an owner in a 1-1 mapping",72],["password: owner",401],["mnt-by:         owner-MNT",196],["password:   owner",141],["mnt-by:  owner-mnt",126],["+ \"password: owner\")",95]],"useCount":2281},{"word":"owner3","context":[["mnt-ref:      owner3-mnt",104],["password: owner3",1334],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330],["syncUpdate(getTransient(\"ALLOC-UNS\") + \"password: owner3\\npassword: hm\")",280],["mnt-ref:         owner3-mnt",204],["syncUpdate(getTransient(\"RIR-ALLOC-20\") + \"password: owner3\\npassword: hm\")",201],["syncUpdate(getTransient(\"RIR-ALLOC-25\") + \"password: hm\\npassword: owner3\")",84],["password:   owner3",96],["syncUpdate(getTransient(\"ALLOC-PI\") + \"password: owner3\\npassword: hm\")",116],["syncUpdate(getTransient(\"P-LOW\") + \"password: hm\\npassword: owner3\")",113]],"useCount":4029},{"word":"p","context":[["* </pre></blockquote></p>",253],["p {",406],["* <p/>",1321],["* </p>",1515],["* <p>",5204],["* @author Philip Vendil, p.vendil@cgi.com",172],["</p>",309],["<p>",308],["* <p><blockquote><pre>",254],["* <p>Flack",223]],"useCount":20059},{"word":"package","context":[["package test",332],["package jbilling",316],["package org.bbop.apollo",378],["package org.codehaus.groovy.grails.orm.hibernate",394],["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["package com.netflix.asgard",634],["package groovy",655],["package groovy.bugs",1215],["package javaposse.jobdsl.dsl.helpers.publisher",300],["package marketplace",296]],"useCount":95026},{"word":"page","context":[["page.savePreferences()",159],["page.runQuery()",160],["page.chooseGraphView(\"Seconds\")",167],["String result = page.compareTime(stringMax, stringMin)",170],["page.openDisplayPreference()",171],["page.preferencesTitleDisplayed()",174],["page.popupCloseDisplayed()",174],["page.savePreferencesBtnDisplayed()",174],["page.openSchemaPageSizeWorksheetTab()",154],["*   along with this program. It can be found at the root of the project page.",313]],"useCount":17302},{"word":"pages","context":[["package vmcTest.pages",99],["import org.codehaus.groovy.grails.web.pages.GroovyPagesTemplateEngine",39],["import uk.co.mdc.pages.authentication.LoginPage",44],["package pages",99],["import org.codehaus.groovy.grails.web.pages.GroovyPage",153],["// enable Sitemesh preprocessing of GSP pages",329],["import vmcTest.pages.*",100],["'org.codehaus.groovy.grails.web.pages', //  GSP",405],["'org.codehaus.groovy.grails.web.pages',          // GSP",509],["package org.codehaus.groovy.grails.web.pages",54]],"useCount":2729},{"word":"param","context":[["* @param configure The configuration closure",244],["* @param service",508],["* @param handler Handler for the result of this call.",408],["* @param name",401],["* @param domain",345],["* @param project The Gradle project",329],["* @param params",239],["* @param user",237],["* @param closure",226],["* @param key Key string",222]],"useCount":28011},{"word":"parameter","context":[["package net.fortuna.ical4j.model.parameter",99],["* @parameter",116],["@HttpParameterMapping (parameter = \"Filter\")",163],["rememberMeParameter: config.rememberMe.parameter]",92],["// test parameter check",84],["randomName.text() =~ /choice-parameter-\\d+/",76],["* @throws NullPointerException if any parameter is {@code null}",328],["@HttpParameterMapping(parameter=\"member\")",347],["* The closure parameter expects a configure block for direct manipulation of the generated XML. The {@code scm}",68],["import org.pillarone.riskanalytics.core.simulation.item.parameter.ParameterHolder",75]],"useCount":4736},{"word":"parameters","context":[["// test invalid parameters in update",364],["// request parameters to mask when logging exceptions",610],["parameters {",983],["parameters{",321],["protected Object newInstance(ParameterList parameters, String value) {",184],["request.parameters.api_type = \"json\"",109],["acmeGroovyNode.parameters.size() == 1",82],["acmeGroovyNode.parameters[0].value() == 'foo bar baz'",82],["throw new Exception(\"No heatmap data for the specified parameters.\");",60],["currentBuild() // Current build parameters",58]],"useCount":7274},{"word":"params","context":[["def version = params.version.toLong()",1029],["flash.args = [params.id]",652],["if (params.version) {",852],["redirect(action: \"list\", params: params)",974],["redirect(action: \"list\", params: params)",974],["//params[\"name\"] = 'someValidName'",995],["populateValidParams(params)",6322],["params.max = Math.min(max ?: 10, 100)",1252],["assert params != null",1177],["def populateValidParams(params) {",1160]],"useCount":54893},{"word":"parent","context":[["resources.createFile parent",130],["resources.createCommand parent",130],["resources.replaced parent, search, replace",130],["void setChild(FactoryBuilderSupport builder, Object parent, Object child) {",135],["File asFile(File parent) {",147],["String replaced(File parent, def search, def replace) {",147],["void createFile(File parent) {",147],["void createCommand(File parent) {",147],["parent.referencedJobs.contains(job)",201],["parent.referencedViews.contains(view)",285]],"useCount":7768},{"word":"parse","context":[["def xml = XML.parse content",106],["def doc = parser.parse(new StringReader(xmlstr))",189],["// parse events into attributes",193],["new GroovyShell().parse \"\"\"",94],["json = JSON.parse(result.data)",93],["def json = JSON.parse content",73],["def json = JSON.parse(result.data)",303],["def opt = cli.parse(args)",89],["def parse(String description) {",684],["def options = cli.parse(args)",198]],"useCount":5933},{"word":"part","context":[["/* This file is part of VoltDB.",173],["* This file is part of the Coporate Semantic Web Project.",165],["*\tThis file is part of OpenLabFramework.",186],["* This file is part of sklintyg (https://github.com/sklintyg).",194],["This file is part of jbilling.",206],["* This file is part of iceScrum.",249],["* This file is part of transmart-core-db.",452],["def valueString = part.split(\":\")[1].trim()",201],["// whether to disable processing of multi part requests",574],["*   This file is part of 'Nextflow'.",1092]],"useCount":8386},{"word":"passed","context":[["when:\"The domain instance is passed to the delete action\"",656],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"An invalid domain instance is passed to the update action\"",655],["when:\"A domain instance is passed to the show action\"",650],["when:\"A domain instance is passed to the edit action\"",646],["when: \"An invalid domain instance is passed to the update action\"",91],["when: \"A domain instance is passed to the show action\"",91],["when: \"A domain instance is passed to the edit action\"",90],["when: \"A valid domain instance is passed to the update action\"",90],["when: \"The domain instance is passed to the delete action\"",90]],"useCount":4323},{"word":"password","context":[["logIn(username, password)",364],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330],["password: owner",401],["password: update",826],["password: hm",1093],["grails.exceptionresolver.params.exclude = ['password']",616],["password = \"\"",704],["password: lir",1599],["password: owner3",1334],["String password",946]],"useCount":23036},{"word":"path","context":[["String path",309],["resources.path",130],["* @param path",143],["path: path,",307],["path: path,",307],["return path",184],["log.debug \"path is: $path\"",169],["log.debug \"path is: $path\"",169],["this.path = path",152],["this.path = path",152]],"useCount":12883},{"word":"pattern","context":[["pattern = \"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\"",68],["pattern {",85],["pattern : false,",88],["addStaticAnalysisContextAndPattern(delegate, staticAnalysisContext, pattern)",117],["//    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')",703],["// Example of changing the log pattern for the default console",515],["// Example of changing the log pattern for the default console appender:",469],["console name: 'stdout', layout: pattern(conversionPattern: '%d [%t] %-5p %c - %m%n')",226],["pattern",190],["pattern = \"%level %logger - %msg%n\"",121]],"useCount":6164},{"word":"persistence","context":[["import grails.persistence.*",215],["import javax.persistence.JoinColumn",122],["import com.netflix.spinnaker.orca.pipeline.persistence.ExecutionRepository",125],["import javax.persistence.*",168],["import javax.persistence.GeneratedValue",197],["import grails.persistence.Entity",291],["import javax.persistence.Column",318],["import javax.persistence.Id",354],["import javax.persistence.Table",243],["import javax.persistence.Entity",394]],"useCount":4372},{"word":"person","context":[["insert into person(version, name, street1, street2, zipcode)",98],["if (person) {",75],["\"person:  First Person\\n\" +",73],["person.validate()",72],["Person person",77],["queryObjectNotFound(\"-r -T person FP1-TEST\", \"person\", \"First Person\")",77],["person:  First Person",293],["person = \"homer\"",82],["ack.successes.any { it.operation == \"Create\" && it.key == \"[person] FP1-TEST   First Person\" }",95],["queryObjectNotFound(\"-r -T person FP1-TEST\", \"person\", \"First Person\")",77]],"useCount":5291},{"word":"pillarone","context":[["import org.pillarone.riskanalytics.core.model.Model",171],["import org.pillarone.riskanalytics.core.simulation.item.Parameterization",190],["import org.pillarone.riskanalytics.application.ui.util.UIUtils",140],["import org.pillarone.riskanalytics.core.components.Component",155],["import org.pillarone.riskanalytics.core.packets.PacketList",145],["import org.pillarone.riskanalytics.core.simulation.item.Simulation",138],["import org.pillarone.riskanalytics.core.output.SimulationRun",127],["import org.pillarone.riskanalytics.application.util.LocaleResources",109],["import org.pillarone.riskanalytics.domain.pc.claims.Claim",100],["import org.pillarone.riskanalytics.core.ParameterizationDAO",96]],"useCount":8042},{"word":"pipeline","context":[["//compile \":handlebars-asset-pipeline:1.3.0.3\"",245],["1 * jobManagement.requirePlugin('build-pipeline-plugin')",177],["//compile \":sass-asset-pipeline:1.9.0\"",199],["import com.netflix.spinnaker.orca.pipeline.model.Execution",155],["//compile \":coffee-asset-pipeline:1.8.0\"",200],["import com.netflix.spinnaker.orca.pipeline.model.PipelineStage",292],["import com.netflix.spinnaker.orca.pipeline.model.Pipeline",322],["// Uncomment these to enable additional asset-pipeline capabilities",334],["import com.netflix.spinnaker.orca.pipeline.model.Stage",677],["//compile \":less-asset-pipeline:1.10.0\"",198]],"useCount":7087},{"word":"plot","context":[["plot('my group', 'some.csv') {",512],["1 * jobManagement.requireMinimumPluginVersion('plot', '1.9')",486],["name() == 'hudson.plugins.plot.PlotPublisher'",480],["with(plots.'hudson.plugins.plot.Plot'[0]) {",480],["with(series[0].'hudson.plugins.plot.XMLSeries'[0]) {",64],["import org.jfree.chart.plot.PlotOrientation",41],["NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();",42],["plot('my group', 'test.csv') {",64],["with(series[0].'hudson.plugins.plot.CSVSeries'[0]) {",320],["with(series[0].'hudson.plugins.plot.PropertiesSeries'[0]) {",96]],"useCount":3443},{"word":"plugin","context":[["// the other plugins this plugin depends on",449],["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["// event.application, event.manager, event.ctx, and event.plugin.",392],["import grails.plugin.springsecurity.SpringSecurityUtils",403],["import grails.plugin.springsecurity.annotation.Secured",788],["apply plugin: 'java'",669],["// resources that are excluded from plugin packaging",508],["// URL to the plugin's documentation",517],["// the version or versions of Grails the plugin is designed for",529],["// the plugin version",649]],"useCount":27120},{"word":"plugins","context":[["// plugins for the compile step",458],["plugins {",2074],["inherits true // Whether to inherit repository definitions from plugins",728],["import grails.plugins.springsecurity.Secured",667],["'org.codehaus.groovy.grails.plugins',            // plugins",511],["'org.codehaus.groovy.grails.plugins',            // plugins",511],["with(plots.'hudson.plugins.plot.Plot'[0]) {",480],["name() == 'hudson.plugins.plot.PlotPublisher'",480],["// plugins for the build system only",467],["// plugins needed at runtime but not for compilation",458]],"useCount":46042},{"word":"populateValidParams","context":[["populateValidParams(params)",6322],["def populateValidParams(params) {",1160],["assert false, \"TODO: Provide a populateValidParams() implementation for this generated test suite\"",90],["//        populateValidParams(params)",15]],"useCount":7587},{"word":"port","context":[["this.port = port",79],["private String convertPortToHex(port) {",86],["int port",124],["this.port = port",79],["return ip + \":\" + port",77],["def port = convertHexToInt(parts[1])",65],["String hexport = port.toString().format( '%04x', port.toInteger() )",64],["String hexport = port.toString().format( '%04x', port.toInteger() )",64],["ProxyServerTest.getNewHttpClient(proxy.port).withCloseable {",59],["Integer port",63]],"useCount":2883},{"word":"post","context":[["response = hawkularMetrics.post(path: 'gauges', body: [",46],["readFileFromWorkspace('maintenance/jenkins-seed', 'common/groovy/post-build-set-commit-status.groovy')",48],["// TODO Implement post initialization spring config (optional)",357],["def response = hawkularMetrics.post(",193],["response = hawkularMetrics.post(",128],[".post()",106],["if (!request.post) {",75],["import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post",71],["if (request.post) {",55],["resp = client.post(path: \"triggers\", body: testTrigger)",50]],"useCount":2818},{"word":"pre","context":[["* <pre>",1565],["* </pre>",1611],["</pre>",53],["// TODO put any pre-logout code here",64],["* <pre autoTested=''>",75],["* <pre><code>",92],["* </code></pre>",94],["GETL is a set of libraries of pre-built classes and objects that can be used to solve problems unpacking,",108],["* </pre></blockquote></p>",253],["* <p><blockquote><pre>",254]],"useCount":4981},{"word":"print","context":[["print aa",85],["print ')'",90],["print a<caret>a",61],["print abc",61],["expressionOut.print(it.radio)",68],["print o.foo()",91],["print a",94],["print foo",135],["private void print( String text ) {",77],["print 2",255]],"useCount":6031},{"word":"printStackTrace","context":[["t.printStackTrace();",86],["ex.printStackTrace();",101],["e.printStackTrace();",536],["t.printStackTrace()",141],["ex.printStackTrace()",269],["//e.printStackTrace()",48],["exc.printStackTrace( );",41],["e.printStackTrace(System.err)",40],["ScriptUtils.printStackTrace e",34],["e.printStackTrace()",1614]],"useCount":3231},{"word":"println","context":[["println '***************************'",246],["println(\"Unknown architecture: ${architecture}\");",239],["println it",405],["System.out.println();",383],["println \"hello\"",341],["println(\"WaitTimeoutException\")",255],["println(\"PASS\")",254],["println \"\"\"",246],["println \"\"",713],["println()",909]],"useCount":21425},{"word":"private","context":[["private static final long serialVersionUID = 1L;",253],["private",288],["private String name",139],["private static final String XML = \"\"\"",147],["private static final ACCOUNT_NAME = \"auto\"",150],["private static final log = LogFactory.getLog(this)",165],["private static Task getTask() {",200],["private final Project project",206],["private static final long serialVersionUID = 1",508],["private Project project",373]],"useCount":18697},{"word":"process","context":[["process.waitFor()",315],["import org.apache.tinkerpop.gremlin.process.traversal.Traversal",200],["import org.gradle.process.ExecResult",149],[".process {",113],["import org.apache.tinkerpop.gremlin.process.traversal.util.ScriptTraversal",106],["// process remaining attributes",95],["package org.apache.tinkerpop.gremlin.process.traversal.step.map",87],["import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper",87],["output = process.text",89],["process hola {",92]],"useCount":4756},{"word":"profile","context":[["<profile>",109],[".append(\"profile name\", getProfile()).toString();",66],["setupUbuntuProperties profile, tmpdir",55],["</profile>",111],["loader.loadService profile.resource, null",164],["def profile = registry.getService(\"profile\")[0]",189],["<id>profile-1</id>",81],["def profile = registry.getService(\"profile\")[0]",189],["context.s3('profile') {",85],["profileName[0].value() == 'profile'",85]],"useCount":2395},{"word":"project","context":[["void apply(Project project) {",1643],["grails.project.test.reports.dir = \"target/test-reports\"",1264],["this.project = project",1076],["this.project = project",1076],["grails.project.class.dir = \"target/classes\"",1327],["grails.project.test.class.dir = \"target/test-classes\"",1328],["Project project",1035],["//grails.project.war.file = \"target/${appName}-${appVersion}.war\"",873],["grails.project.target.level = 1.6",766],["grails.project.dependency.resolution = {",1694]],"useCount":65699},{"word":"prop","context":[["<tr class=\"prop\">",33],["propertiesFile('data.prop') {",32],["file[0].value() == 'data.prop'",480],["csvFile('data.prop') {",320],["Properties prop = new Properties();",45],["<D:prop>",162],["</D:prop>",162],["propertiesFile('data.prop')",160],["prop('one', 'two')",82],["def prop",34]],"useCount":2372},{"word":"properties","context":[["def properties = new Properties()",208],["properties: [",223],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["// if (System.properties[\"${appName}.config.location\"]) {",522],["// grails.config.locations = [ \"classpath:${appName}-config.properties\",",623],["// TODO: Populate valid properties like...",1018],["//                             \"file:${userHome}/.grails/${appName}-config.properties\",",628],["//    grails.config.locations << \"file:\" + System.properties[\"${appName}.config.location\"]",661],["// enabled native2ascii conversion of i18n properties files",765],["properties {",914]],"useCount":17031},{"word":"property","context":[["<property>",104],["</property>",141],["Ant.property(environment:\"env\")",133],["package net.fortuna.ical4j.model.property",186],["package net.fortuna.ical4j.vcard.property",95],["built.\"$property\" == value",91],["import org.kuali.rice.core.api.config.property.ConfigContext",74],["//\tstatic\tmappedBy\t= []\t// specifies which property should be used in a mapping",73],["@JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"@class\")",70],["@JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")",70]],"useCount":4830},{"word":"propertyName","context":[["assert response.redirectedUrl == '/${propertyName}/list'",50],["def ${propertyName} = ${className}.get(params.id)",95],["def ${propertyName} = new ${className}(params)",89],["if (${propertyName} == null) {",87],["${propertyName}.properties = params",72],["def ${propertyName} = ${className}.get(id)",50],["${propertyName}.save flush:true",50],["respond ${propertyName}",52],["if (${propertyName}.hasErrors()) {",51],["if (!${propertyName}) {",113]],"useCount":2943},{"word":"props","context":[["* @param props",71],["def props = new Properties()",234],["Properties props = new Properties()",168],["props.put(\"property1\", \"property1value1\")",99],["props.put(\"property2\", \"property2value1\")",99],["props(downstreamProperties)",95],["Map<String, Object> props = new HashMap<>()",88],["def props = [:]",87],["props([three: 'four', five: 'six'])",82],["props {",79]],"useCount":3779},{"word":"protected","context":[["protected void setUp() throws Exception {",205],["protected void configure(AuthenticationManagerBuilder auth) throws Exception {",266],["protected void encodePassword() {",296],["protected String getBasePath() {",341],["protected void setUp() {",2174],["protected void onSetUp() {",404],["protected Rule createRule() {",498],["protected void configure(HttpSecurity http) throws Exception {",697],["protected void notFound() {",890],["protected void tearDown() {",2026]],"useCount":15753},{"word":"provided","context":[["* documentation and/or other materials provided with the distribution.",673],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["* and/or other materials provided with the distribution.",193],["* provided that the following conditions are met:",178],["*     in the documentation and/or other materials provided with the",141],["*    and/or other materials provided with the distribution.",131],["//   documentation and/or other materials provided with the distribution.",113],["*           documentation, if provided along with the Derivative Works; or,",98],["*       modifications, and in Source or Object form, provided that You",98]],"useCount":4497},{"word":"provider","context":[["GetObjectResponseType response = provider.getObject(request)",40],["import com.netflix.spinnaker.cats.provider.ProviderCache",156],["@RequiresPlugin(id = 'config-file-provider')",107],["1 * jobManagement.requirePlugin('config-file-provider')",101],["* @param service provider service",60],["* @param name name of bean or provider",60],["package org.opentele.server.provider.model",55],["import com.netflix.spinnaker.clouddriver.google.provider.view.GoogleClusterProvider",50],["1 * mockJobManagement.requirePlugin('config-file-provider')",48],["bucket = OsgBucketFactory.getFactory().createBucket(provider, bucket, UUID.randomUUID().toString(), user)",39]],"useCount":2874},{"word":"psi","context":[["import com.intellij.psi.*",104],["import com.intellij.psi.PsiClass",166],["import com.intellij.psi.PsiFile",158],["import com.intellij.psi.PsiMethod",137],["import com.intellij.psi.codeStyle.CodeStyleSettingsManager",115],["import org.jetbrains.plugins.groovy.lang.psi.GroovyFile",113],["import com.intellij.psi.PsiElement",112],["import com.intellij.psi.PsiDocumentManager",102],["import com.intellij.psi.search.GlobalSearchScope",101],["import com.intellij.psi.util.PsiTreeUtil",94]],"useCount":2984},{"word":"public","context":[["public void build() {",356],["public String toString() {",2014],["public static void main(String[] args) {",988],["public void run() {",680],["public static void doSmth(Script u) {",300],["public class Foo {",315],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["public int m(arg) { return arg.arg111 + arg.arg222 + arg.arg333; }",340],["// from public Maven repositories",409],["public void setUp() {",401]],"useCount":46020},{"word":"publish","context":[["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",134],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",142],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",115],[".publish()",102],["1 * jobManagement.requirePlugin('flexible-publish')",95],["import org.gradle.api.publish.maven.MavenPublication",86],["1 * jobManagement.requireMinimumPluginVersion('flexible-publish', '0.13')",79],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",77],["jobManagement.getPluginVersion('flexible-publish') >> new VersionNumber('0.12')",76],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291]],"useCount":4001},{"word":"publisherNode","context":[["publisherNode.criteria[0].value() == 'Not Failed'",64],["def typeConfigsNode = publisherNode.config[0].typeConfigs[0]",64],["publisherNode.archiveMethod[0].value() == 'ZIP'",64],["Node publisherNode = context.publisherNodes[0]",437],["publisherNode.name() == 'be.certipost.hudson.plugin.SCPRepositoryPublisher'",64],["publisherNode.childProjects[0].value() == 'THE-JOB'",64],["publisherNode.overrideDefaultExcludes[0].value() == true",64],["publisherNode.name() == 'hudson.tasks.BuildTrigger'",82],["publisherNode.name() == 'hudson.plugins.cloneworkspace.CloneWorkspacePublisher'",96],["publisherNode.workspaceGlob[0].value() == '*/**'",96]],"useCount":2816},{"word":"publisherNodes","context":[["context.publisherNodes[0].regexp[0].value() == 'foo'",160],["context.publisherNodes[0].name() == 'hudson.plugins.descriptionsetter.DescriptionSetterPublisher'",160],["with(context.publisherNodes[0]) {",3044],["context.publisherNodes.size() == 1",2157],["Node publisherNode = context.publisherNodes[0]",437],["context.publisherNodes != null",399],["Node xUnitNode = context.publisherNodes[0]",199],["context.publisherNodes[0].name() == 'hudson.plugins.textfinder.TextFinderPublisher'",160],["context.publisherNodes[0].regexp[0].value() == 'success'",160],["publisherNodes << createDefaultStaticAnalysisNode(",185]],"useCount":14014},{"word":"put","context":[["//for each of the ones that were found with access put their access levels into the object",69],["newrow.put(\"subject\", subject);",90],["props.put(\"property1\", \"property1value1\")",99],["props.put(\"property2\", \"property2value1\")",99],["headers.put(\"HOST\", \"$host:$state.cameraPort\")",118],["attributes.put('value', instanceValue)",134],["headers.put(\"Authorization\", userpass)",192],["put(SERIAL_NUMBER, \"testSerialNumber\")",73],[".put()",72],["//1)put all the children into the access list with default unlocked",69]],"useCount":8239},{"word":"pw","context":[["ChartUtilities.writeImageMap(pw, filename7, info7, false);",50],["pw.flush();",115],["PrintWriter pw = new PrintWriter(sw)",106],["def pw = new PrintWriter(sw)",100],["final PrintWriter pw = new PrintWriter(sw)",66],["PrintWriter pw = new PrintWriter(response.getOutputStream());",65],["withTag(\"sortableColumn\", pw) { tag ->",64],["w.writeTo(pw)",62],["pw.write(\"<hr>\");",54],["pw = new PrintWriter(sw)",53]],"useCount":2283},{"word":"query","context":[["query = query + line + \"\\n\"",86],["String query = \"\"",93],["query = query + line + \"\\n\"",86],["// Get SQL query String for all the subject IDs",93],["return query",120],["query: [",128],["then: 'run the query'",136],["def query = \"\"\"",257],["query.createGlobalFilterCriteria(gfilter);",76],["* @param query",71]],"useCount":9431},{"word":"queryObject","context":[["queryObject(\"-r -T inetnum 192.0.0.0 - 192.255.255.255\", \"inetnum\", \"192.0.0.0 - 192.255.255.255\")",436],["queryObject(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",249],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",218],["queryObject(\"-r -T inet6num 2001::/20\", \"inet6num\", \"2001::/20\")",213],["queryObject(\"-r -T inet6num 2001:600::/30\", \"inet6num\", \"2001:600::/30\")",159],["queryObject(\"-GBr -T inetnum 192.168.128.0 - 192.168.255.255\", \"inetnum\", \"192.168.128.0 - 192.168.255.255\")",142],["queryObject(\"-r -T inet6num 2001:600::/25\", \"inet6num\", \"2001:600::/25\")",136],["queryObject(\"-rBG -T inetnum 192.168.0.0 - 192.169.255.255\", \"inetnum\", \"192.168.0.0 - 192.169.255.255\")",113],["queryObject(\"-r -T aut-num AS123\", \"aut-num\", \"AS123\")",109],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.169.255.255\", \"inetnum\", \"192.168.0.0 - 192.169.255.255\")",520]],"useCount":5399},{"word":"queryObjectNotFound","context":[["queryObjectNotFound(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",169],["queryObjectNotFound(\"-rGBT route 99.13.0.0/16\", \"route\", \"99.13.0.0/16\")",86],["queryObjectNotFound(\"-rGBT route 192.168.0.0/16\", \"route\", \"192.168.0.0/16\")",87],["queryObjectNotFound(\"-r -T inet6num 2001:600::/25\", \"inet6num\", \"2001:600::/25\")",108],["queryObjectNotFound(\"-rGBT inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",118],["queryObjectNotFound(\"-r -T inetnum 192.168.200.0 - 192.168.200.127\", \"inetnum\", \"192.168.200.0 - 192.168.200.127\")",132],["queryObjectNotFound(\"-rGBT inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",105],["queryObjectNotFound(\"-r -T inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",229],["queryObjectNotFound(\"-r -T inetnum 192.100.0.0 - 192.200.255.255\", \"inetnum\", \"192.100.0.0 - 192.200.255.255\")",480],["queryObjectNotFound(\"-rGBT inetnum 192.168.200.0 - 192.168.200.127\", \"inetnum\", \"192.168.200.0 - 192.168.200.127\")",113]],"useCount":3358},{"word":"r","context":[["queryObject(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",249],["queryObject(\"-r -T inet6num 2001:600::/30\", \"inet6num\", \"2001:600::/30\")",159],["queryObjectNotFound(\"-r -T inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",169],["role == Role.load(r.id)",201],["queryObject(\"-r -T inet6num 2001::/20\", \"inet6num\", \"2001::/20\")",213],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",218],["queryObjectNotFound(\"-r -T inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",229],["queryObject(\"-r -T inetnum 192.0.0.0 - 192.255.255.255\", \"inetnum\", \"192.0.0.0 - 192.255.255.255\")",436],["queryObjectNotFound(\"-r -T inetnum 192.100.0.0 - 192.200.255.255\", \"inetnum\", \"192.100.0.0 - 192.200.255.255\")",480],["queryObject(\"-r -T inetnum 192.168.0.0 - 192.169.255.255\", \"inetnum\", \"192.168.0.0 - 192.169.255.255\")",520]],"useCount":10457},{"word":"rGBT","context":[["queryObject(\"-rGBT inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",102],["queryObjectNotFound(\"-rGBT inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",105],["queryObject(\"-rGBT as-block AS0 - AS4294967295\", \"as-block\", \"AS0 - AS4294967295\")",96],["queryObject(\"-rGBT as-block AS222 - AS333\", \"as-block\", \"AS222 - AS333\")",90],["queryObjectNotFound(\"-rGBT inetnum 192.168.200.0 - 192.168.200.127\", \"inetnum\", \"192.168.200.0 - 192.168.200.127\")",113],["queryObjectNotFound(\"-rGBT inetnum 192.168.0.0 - 192.168.255.255\", \"inetnum\", \"192.168.0.0 - 192.168.255.255\")",118],["query_object_matches(\"-rGBT route 20.13.0.0/16\", \"route\", \"20.13.0.0/16\", \"AS3000\")",90],["queryObjectNotFound(\"-rGBT route 192.168.0.0/16\", \"route\", \"192.168.0.0/16\")",87],["queryObject(\"-rGBT inetnum 192.168.200.0 - 192.168.200.255\", \"inetnum\", \"192.168.200.0 - 192.168.200.255\")",87],["queryObjectNotFound(\"-rGBT route 99.13.0.0/16\", \"route\", \"99.13.0.0/16\")",86]],"useCount":2430},{"word":"read","context":[["Layer layer = reader.read(csv)",34],["(description - \"read attr - \").split(\",\").inject([:]) { map, param ->",33],["else if (description?.startsWith('read attr -')) {",36],["// Odds of performing a read op per iteration (1 = 100%)",38],["def models = sut.read(context)",55],["cache usage:'read-only'",62],["while read P PP;do",74],["* Use {@link javaposse.jobdsl.dsl.DslFactory#readFileFromWorkspace(java.lang.String) readFileFromWorkspace} to read",77],["// configure passing transaction's read-only attribute to Hibernate session, queries and criterias",277],["// configure passing read-only to OSIV session by default, requires \"singleSession = false\" OSIV mode",277]],"useCount":2238},{"word":"redirect","context":[["redirect action: \"index\", method: \"GET\"",941],["redirect(action: \"list\", params: params)",974],["redirect(action: \"show\", id: id)",372],["redirect action: 'list'",375],["then:\"A redirect is issues to the show action\"",486],["redirect(action: \"show\", id: params.id)",604],["redirect action:\"index\", method:\"GET\"",658],["redirect(action: list)",660],["then:\"A redirect is issued to the show action\"",815],["redirect(action: \"list\")",5000]],"useCount":19063},{"word":"ref","context":[["PsiElement resolved = ref.resolve();",662],["def ref = configureByText('''\\",386],["assertNotNull(ref.resolve())",268],["grailsApplication = ref('grailsApplication')",117],["final PsiElement resolved = ref.resolve();",193],["def resolved = ref.resolve()",250],["def ref = findReference()",240],["assertNotNull(ref.resolve());",215],["mnt-ref:         owner3-mnt",204],["PsiElement resolved = ref.resolve()",139]],"useCount":9071},{"word":"reference","context":[["* @return a reference to this, so the API can be used fluently",427],["* @param self The {@code this} reference for the {@link Client}",189],["* @param self The {@code this} reference for the {@link IndicesAdminClient}.",165],["hostConfigurationAccess[0].@reference == '../..'",110],["package com.nimble.domain.reference",67],["* @return a reference to this for fluency",65],["* @param self The {@code this} reference for the {@link ClusterAdminClient}.",54],["import com.nimble.domain.reference.*",51],["// Add a reference to the input jobs for report purposes",34],["reference.size() == 0",30]],"useCount":2390},{"word":"reflect","context":[["import org.gradle.internal.reflect.DirectInstantiator",62],["import java.lang.reflect.InvocationHandler",46],["import java.lang.reflect.ParameterizedType",77],["import java.lang.reflect.InvocationTargetException",84],["import java.lang.reflect.Constructor",109],["import java.lang.reflect.Type",152],["import java.lang.reflect.Field",385],["import java.lang.reflect.Modifier",392],["import java.lang.reflect.Method",590],["import org.gradle.internal.reflect.Instantiator",258]],"useCount":2556},{"word":"refresh","context":[["def refresh() {",407],["driver.navigate().refresh()",202],["state \"default\", label:'', action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",122],["state \"default\", label:'', action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",122],["standardTile(\"refresh\", \"device.switch\", inactiveLabel: false, decoration: \"flat\") {",112],["state \"default\", label:\"\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",120],["state \"default\", label:\"\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",120],["state \"default\", label:\"\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",120],["state \"default\", label:'', action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",122],["refresh()",207]],"useCount":3285},{"word":"regex","context":[["import java.util.regex.Pattern",1414],["import java.util.regex.Matcher",623],["// TODO: More elaborate regex trigger?",65],["* @param regex URI paths that begin with a match for this regex will match",60],["* @param regex URI paths that begin with a match for this regex will match",60],["// Removing the regex will cause this to run on each PR.",35],["<option name=\"buildstamp\" value=\"789\" values=\"123,456,789\" enforcedvalues=\"false\" regex=\"abc\"/>",32],["import java.util.regex.Pattern;",107],["import java.util.regex.Matcher;",78],["import java.util.regex.*",70]],"useCount":3291},{"word":"region","context":[["this.region = region",86],["String region",283],["region: REGION,",201],["cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory'",190],["String region,",171],["cache.region.factory_class = 'org.hibernate.cache.ehcache.EhCacheRegionFactory' // Hibernate 4",145],["//    cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory' // Hibernate 3",143],["* @param region",129],["cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory' // Hibernate 3",118],["//    cache.region.factory_class = 'org.hibernate.cache.ehcache.EhCacheRegionFactory' // Hibernate 4",103]],"useCount":4288},{"word":"release","context":[["release {",69],["import pl.allegro.tech.build.axion.release.domain.scm.ScmPosition",51],["build ':release:2.2.1', ':rest-client-builder:1.0.3', {",56],["package net.researchgate.release",73],["package pl.allegro.tech.build.axion.release.domain",80],["* This file is part of the gradle-release plugin.",83],["build(\":release:3.0.1\",",92],["release = '1'",94],["@Grab(\"nz.kamura:kamura-groovy-itext2:latest.release\")",135],["@Grab(\"nz.co.skepticalhumorist:pdf-builder:latest.release\")",135]],"useCount":2911},{"word":"remote","context":[["if (mediator.remotes.size() == 0) return \"Please add a remote first with [connect]\"",32],["remote{",272],["workflow: new Workflow(commands: [new CommandExec(adhocExecution: true, adhocRemoteString: 'a remote string')]).save()",160],["import org.openqa.selenium.remote.DesiredCapabilities",103],["import org.openqa.selenium.remote.RemoteWebDriver",50],["// uncomment these to enable remote dependency resolution from public Maven repositories",50],["// uncomment the below to enable remote dependency resolution",409],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["remote {",1060],["remote process main {",32]],"useCount":3547},{"word":"remove","context":[["// remove if it exists",69],["String instanceValue = attributes.remove('value')",134],["static boolean remove(User u, Role r, boolean flush = false) {",128],["void remove() {",111],["managedThingProvider.remove(it.getUID())",77],["def value = attrs.remove('value')",77],["static boolean remove(User user, Role role, boolean flush = false) {",76],["iter.remove()",66],["/* remove this line",69],["remove this line */",69]],"useCount":3438},{"word":"render","context":[["'*'{ render status: NOT_FOUND }",743],["render(contentType: \"application/json\") {",188],["render results as JSON",189],["render status: NOT_FOUND",208],["'*'{ render status: NO_CONTENT }",688],["render([success: true] as JSON)",211],["render(",234],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["render result as JSON",539],["render(contentType:\"text/json\"){",259]],"useCount":12182},{"word":"repo","context":[["context.hg('http://selenic.com/repo/hello') {",65],["github_project_property.appendNode('projectUrl').setValue(\"https://github.com/${project.repo}\")",62],["def fileRepoFolder = new File( basedir, \"target/appassembler/repo\");",61],["repo.close()",83],["source[0].text() == 'http://selenic.com/repo/hello'",90],["repo.with {",59],["* @DSLDoc http://repo.openehealth.org/confluence/display/ipf2/Extensions+to+HAPI",55],["repositories { maven { url '${Fixture.repo}' } }",49],["mavenRepo \"http://repo.spring.io/milestone/\"",48],["this.repo = repo",48]],"useCount":2664},{"word":"report","context":[["import de.iteratec.osm.report.chart.CsiAggregation",61],["report('build/*') {",149],["reportFileName[0].value() == 'report.html'",70],["import de.iteratec.osm.report.chart.AggregatorType",66],["return report",37],["package org.codenarc.report",39],["report",40],["package de.iteratec.osm.report.chart",55],["import de.iteratec.osm.report.chart.CsiAggregationInterval",59],["mockMvc.perform(report(\"/dav/{email}/calendar/\", USER01)",62]],"useCount":2402},{"word":"reports","context":[["** execute reports designed with the Birt Report Designer. See",51],["grails.project.test.reports.dir = 'target/test-reports'",46],["grails.project.test.reports.dir\t= \"target/test-reports\"",68],["grails.project.test.reports.dir\t= \"target/test-reports\"",68],["outputPath[0].value() == 'target/robotframework-reports'",70],["codenarc.reports = {",77],["grails.project.test.reports.dir = \"target/test-reports\"",1264],["grails.project.test.reports.dir = \"target/test-reports\"",1264],["grails.project.test.reports.dir = 'target/test-reports'",46],["* Generates reports from static code violations detectors.",44]],"useCount":3792},{"word":"repositories","context":[["project.repositories { maven { url Fixture.repo } }",37],["// from public Maven repositories",409],["project.repositories {",169],["repositories { mavenCentral() }",85],["// uncomment these to enable remote dependency resolution from public Maven repositories",50],["repositories { maven { url '${Fixture.repo}' } }",49],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["repositories {",2994],["repositories { jcenter() }",32],["RepositoryHandler repos = project.repositories",31]],"useCount":4966},{"word":"repository","context":[["package org.kuali.rice.krms.impl.repository",121],["//mavenRepo \"http://repository.jboss.com/maven2/\"",1030],["//mavenRepo \"http://repository.codehaus.org\"",1027],["inherits true // Whether to inherit repository definitions from plugins",728],["//mavenRepo \"http://snapshots.repository.codehaus.org\"",496],["This file is part of Cuanto, a test results repository and analysis program.",108],["mavenRepo \"http://repository.codehaus.org\"",76],["import org.springframework.data.repository.CrudRepository",75],["mavenRepo \"http://repository.jboss.com/maven2/\"",74],["import org.springframework.data.jpa.repository.JpaRepository",114]],"useCount":6748},{"word":"request","context":[["request.method = 'DELETE'",558],["request {",695],["request.method = 'POST'",806],["springSecurityFilterChain.doFilter(request,response,chain)",814],["request.contentType = FORM_CONTENT_TYPE",1834],["request.withFormat {",3352],["// request parameters to mask when logging exceptions",610],["UserContext userContext = UserContext.of(request)",552],["request.method = 'PUT'",543],["import org.springframework.web.context.request.RequestContextHolder",413]],"useCount":28690},{"word":"requireMinimumPluginVersion","context":[["1 * mockJobManagement.requireMinimumPluginVersion('build-timeout', '1.12')",118],["(1.._) * mockJobManagement.requireMinimumPluginVersion('subversion', '2.1')",155],["1 * mockJobManagement.requireMinimumPluginVersion('git', '2.2.6')",230],["1 * jobManagement.requireMinimumPluginVersion('plot', '1.9')",486],["1 * jobManagement.requireMinimumPluginVersion('rubyMetrics', '1.6.3')",92],["1 * jobManagement.requireMinimumPluginVersion('parameterized-trigger', '2.26')",87],["1 * jobManagement.requireMinimumPluginVersion('flexible-publish', '0.13')",79],["1 * jobManagement.requireMinimumPluginVersion('jira', '1.39')",77],["1 * jobManagement.requireMinimumPluginVersion('copyartifact', '1.31')",71],["(1.._) * mockJobManagement.requireMinimumPluginVersion('git', '2.2.6')",65]],"useCount":4013},{"word":"requirePlugin","context":[["1 * jobManagement.requirePlugin('parameterized-trigger')",238],["1 * jobManagement.requirePlugin('conditional-buildstep')",248],["1 * mockJobManagement.requirePlugin('subversion')",236],["1 * jobManagement.requirePlugin('groovy')",207],["1 * jobManagement.requirePlugin('jenkins-flowdock-plugin')",205],["1 * jobManagement.requirePlugin('xunit')",199],["1 * jobManagement.requirePlugin('ircbot')",178],["1 * jobManagement.requirePlugin('build-pipeline-plugin')",177],["1 * mockJobManagement.requirePlugin('git')",443],["1 * jobManagement.requirePlugin('text-finder')",160]],"useCount":8008},{"word":"required","context":[["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["required:   false",498],["@Autowired(required = false)",189],["* @required",184],["required: false, displayDuringSetup: true",118],["*       except as required for reasonable and customary use in describing the",98],["required: true, displayDuringSetup: true",97],["required: false,",78],["label title: \"Assign a name\", required: false",80],["assertFalse( \"Group scaling required\", group.scalingRequired )",84]],"useCount":6580},{"word":"res","context":[["def res = evaluate(\"\"\"",63],["return res",643],["return res;",235],["res",412],["def res = []",161],["def res = [:]",72],["def res = new ByteArrayResource(mappingScript.bytes)",75],["def mappings = evaluator.evaluateMappings(res)",118],["res << new RateData(",76],["def res",78]],"useCount":4571},{"word":"reset","context":[["mockDefinition.reset()",39],["public void reset() {",40],["response.reset()",4661],["reset()",260],["void reset() {",100],["def reset() {",91],["controller.response.reset()",70],["command \"reset\"",44],["// and reset the os to Windows_NT",46],["// reset",48]],"useCount":6175},{"word":"resolution","context":[["grails.project.dependency.resolution = {",1694],["// delay the resolution of the uri by wrapping in a closure, so it is not used until read for tests",14],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["// uncomment the below to enable remote dependency resolution",409],["griffon.project.dependency.resolution = {",224],["// uncomment these to enable remote dependency resolution from public Maven repositories",50],["// so that the file name resolution for installing the plugin will be setup",21],["settings.config.grails.test.dependency.resolution = {",18],["// wrap source file in closure to delay resolution to execution time",16],["settings.config.griffon.test.dependency.resolution = {",12]],"useCount":3097},{"word":"resolve","context":[["checksums true // Whether to verify checksums on resolve",740],["PsiElement resolved = ref.resolve();",662],["package org.jetbrains.plugins.groovy.lang.resolve",105],["assertNull(ref.resolve());",101],["PsiElement resolved = ref.resolve()",139],["request.resolve(metadata)",161],["final PsiElement resolved = ref.resolve();",193],["assertNotNull(ref.resolve());",215],["def resolved = ref.resolve()",250],["assertNotNull(ref.resolve())",268]],"useCount":5714},{"word":"resolved","context":[["def resolved = ref.resolve();",88],["PsiElement resolved = ref.resolve();",662],["assertTrue(resolved instanceof PsiMethod);",392],["def resolved = ref.resolve()",250],["final PsiElement resolved = ref.resolve();",193],["assertTrue(resolved instanceof GrMethod);",176],["PsiElement resolved = ref.resolve()",139],["assertTrue(resolved instanceof GrGdkMethod);",111],["assertInstanceOf(resolved, PsiMethod.class);",100],["assertNotNull(resolved);",84]],"useCount":4223},{"word":"resolver","context":[["def typeNameExtractor = new TypeNameExtractor(resolver,  modelNameRegistry)",23],["def resolver = Mock(SourceResolver)",28],["def sut = new HandlerMethodResolver(resolver)",30],["JcrUtil.manageResourceResolver(resourceResolverFactory) { ResourceResolver resolver ->",45],["grails.project.dependency.resolver = 'maven'",80],["def resolver = new TypeResolver()",103],["grails.project.dependency.resolver = \"maven\"",147],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["grails.project.dependency.resolver = \"maven\" // or ivy",633],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667]],"useCount":2778},{"word":"resource","context":[["resource url:'js/application.js'",80],["this.resource = resource;",348],["this.resource = resource;",348],["assertValidBindingXml(resource)",190],["loader.loadService profile.resource, null",164],["this.resources = new ResourcesUtils(path: path, resource: resource)",130],["this.resources = new ResourcesUtils(path: path, resource: resource)",130],["fwkControl.demand.authorizeProjectJobAll { framework, resource, actions, project -> return true }",113],["return resource",85],["resources.resource",130]],"useCount":5121},{"word":"resources","context":[["//runtime \":cached-resources:1.1\"",168],["// resources that are excluded from plugin packaging",508],["// Uncomment these (or add new ones) to enable additional resources capabilities",370],["// What URL patterns should be processed by the resources plugin",348],["grails.resources.adhoc.patterns = ['/images/*', '/css/*', '/js/*', '/plugins/*']",330],["//runtime \":yui-minify-resources:0.1.5\"",277],["// resources that are included in plugin packaging",217],["//runtime \":zipped-resources:1.0.1\"",169],["//runtime \":zipped-resources:1.0\"",195],["//runtime \":cached-resources:1.0\"",195]],"useCount":8683},{"word":"resp","context":[["assertEquals(1, resp.data.size())",181],["response.success = { resp ->",84],["assert(200 == resp.status || 404 == resp.status)",95],["assert(200 == resp.status || 404 == resp.status)",95],["response.failure = { resp ->",196],["assertEquals(200, resp.status)",1107],["response.success = { resp, json ->",236],["assert resp.status == 200",107],["response.success = { resp, reader ->",110],["return resp",178]],"useCount":5527},{"word":"response","context":[["response {",685],["springSecurityFilterChain.doFilter(request,response,chain)",814],["assertEquals(201, response.status)",498],["return response",443],["response.status = 500",443],["response.status == 200",404],["response.setStatus(500)",318],["response.reset()",4661],["response.status == 404",1549],["assertEquals(200, response.status)",1240]],"useCount":40988},{"word":"rest","context":[["package org.hawkular.metrics.rest",88],["\":rest-client-builder:1.0.3\") {",121],["import grails.plugins.rest.client.RestBuilder",114],["import wslite.rest.RESTClient",100],["import grails.rest.*",59],["\":rest-client-builder:2.1.1\") {",64],["package marketplace.rest",84],["import grails.rest.Resource",71],["package marketplace.rest.writer",66],["import grails.rest.RestfulController",134]],"useCount":2943},{"word":"result","context":[["return result;",1385],["* @param handler Handler for the result of this call.",408],["def result = null",489],["def result = []",1034],["result",3597],["return result",5630],["render result as JSON",539],["def result = [:]",619],["def result",969],["assert 200 == result.code",1284]],"useCount":53484},{"word":"results","context":[["return results",527],["def results = []",463],["results",316],["context.emma('coverage-results/coverage.xml') {",256],["def results = [:]",109],["def results",127],["def results = c.list {",131],["// Add the unit test results",149],["render results as JSON",189],["return results;",234]],"useCount":10119},{"word":"ret","context":[["def ret = []",87],["def ret = theCard.useOn(CURRENT_PLAYER, 0, root)",102],["assertFalse(ret == null);",171],["def ret = theCard.useOn(CURRENT_PLAYER, CharacterIndex.HERO, root)",204],["ret != null",334],["ret",386],["return ret",425],["assertBoardDelta(copiedBoard, ret.data_) {",570],["return ret;",1251],["def ret",71]],"useCount":5988},{"word":"return","context":[["return;",2599],["return null",9897],["return false",10051],["return",31966],["return true",10062],["return false;",2631],["return true;",2822],["return this",3618],["return result",5630],["* @return",9503]],"useCount":171594},{"word":"returned","context":[["then:\"A 404 is returned\"",651],["then: \"A 404 error is returned\"",270],["log.debug \"Parse returned ${result?.descriptionText}\"",131],["then: \"A 404 is returned\"",90],["then:\"The correct results are returned\"",69],["then:\"A 404 error is returned\"",1946],["* headers returned: converted to lower case, to upper case, or as-is.",56],["assertEquals \"Unexpected flash OAuth message returned!\", \"\", flashOAuthError",52],["* returned.",52],["assertEquals \"Unexpected flash message returned!\", \"\", flashMessage",50]],"useCount":4272},{"word":"returns","context":[["void \"Test that the edit action returns the correct model\"() {",729],["void \"Test the create action returns the correct model\"() {",731],["void \"Test that the show action returns the correct model\"() {",734],["void \"Test the index action returns the correct model\"() {",739],["* @return whatever the closure returns",55],["def \"returns a success status with the kato task id\"() {",38],["// The tuples (LinuxARMEmulator, other architectures) are not handled and control returns",32],["- script: A Monkey returns",29],["* -missing because we have tons of missing @returns and @param.",26],["/** Runs the given javascript using jjs from the jdk, and returns the output */",26]],"useCount":3697},{"word":"rice","context":[["package org.kuali.rice.krms.impl.repository",121],["import org.kuali.rice.core.test.JAXBAssert",104],["<org.kuali.rice.krad.devtools.maintainablexml.TestGlobalDetail>",102],["</org.kuali.rice.krad.devtools.maintainablexml.TestGlobalDetail>",102],["import org.kuali.rice.core.api.config.property.ConfigContext",74],["import org.kuali.rice.krad.service.BusinessObjectService",66],["import org.kuali.rice.kim.api.test.JAXBAssert",65],["import org.kuali.rice.core.api.resourceloader.GlobalResourceLoader",64],["* @author Kuali Rice Team (rice.collab@kuali.org)",266],["import org.kuali.rice.krad.bo.PersistableBusinessObjectBase",174]],"useCount":3836},{"word":"ripe","context":[["upd-to: dbtest@ripe.net",165],["changed:      dbtest@ripe.net 20020101",955],["changed:        noreply@ripe.net 20120101",339],["changed:      dbtest@ripe.net",325],["e-mail:          dbtest@ripe.net",207],["changed:     dbtest@ripe.net",279],["mnt-by:       ripe-ncc-hm-MNT",250],["changed: denis@ripe.net 20121016",181],["changed:      dbtest@ripe.net 20130101",237],["changed: ripe@test.net 20091015",228]],"useCount":7351},{"word":"riskanalytics","context":[["import org.pillarone.riskanalytics.application.ui.util.UIUtils",140],["import org.pillarone.riskanalytics.core.packets.PacketList",145],["import org.pillarone.riskanalytics.core.components.Component",155],["import org.pillarone.riskanalytics.core.simulation.item.Simulation",138],["import org.pillarone.riskanalytics.core.output.SimulationRun",127],["import org.pillarone.riskanalytics.application.util.LocaleResources",109],["import org.pillarone.riskanalytics.domain.pc.claims.Claim",100],["import org.pillarone.riskanalytics.core.ParameterizationDAO",96],["import org.pillarone.riskanalytics.core.simulation.item.Parameterization",190],["import org.pillarone.riskanalytics.core.model.Model",171]],"useCount":8042},{"word":"role","context":[["role == Role.load(r.id)",201],["id composite: ['role', 'user']",172],["other.role?.id == role?.id",183],["other.role?.id == role?.id",183],["if (role) builder.append(role.id)",249],["if (role) builder.append(role.id)",249],["Role role",281],["static UserRole create(User user, Role role, boolean flush = false) {",204],["role == Role.load(roleId)",215],["UserRole.findAllByUser(this).collect { it.role } as Set",110]],"useCount":6233},{"word":"root","context":[["root.columns.size() == 1",110],["*   along with this program. It can be found at the root of the project page.",313],["HearthTreeNode root",293],["def ret = theCard.useOn(CURRENT_PLAYER, CharacterIndex.HERO, root)",204],[".withProjectDir(testProjectDir.root)",174],["def theCard = root.data_.getCurrentPlayer().getHand().get(0)",451],["Node root = view.node",376],["root = new HearthTreeNode(startingBoard)",320],["root {",316],["username = \"root\"",140]],"useCount":7136},{"word":"route","context":[["query_object_matches(\"-rGBT route 20.13.0.0/16\", \"route\", \"20.13.0.0/16\", \"AS3000\")",90],["descr: Test route",166],["query_object_matches(\"-rGBT route 20.13.0.0/16\", \"route\", \"20.13.0.0/16\", \"AS3000\")",90],["queryObjectNotFound(\"-rGBT route 192.168.0.0/16\", \"route\", \"192.168.0.0/16\")",87],["queryObjectNotFound(\"-rGBT route 192.168.0.0/16\", \"route\", \"192.168.0.0/16\")",87],["* @return the route",174],["queryObjectNotFound(\"-rGBT route 99.13.0.0/16\", \"route\", \"99.13.0.0/16\")",86],["route:          192.168.0.0/16",79],["queryObjectNotFound(\"-rGBT route 99.13.0.0/16\", \"route\", \"99.13.0.0/16\")",86],["descr:        test route-set",81]],"useCount":2623},{"word":"row","context":[["String chrom = row.chrom;",81],["assert row != null",86],["], {row ->",93],["row {",98],["sql.eachRow(sqlt, {row->",100],["sql.eachRow(sqlStr) { row ->",177],["div(class: 'row-fluid') {",110],["], { row ->",113],["div(class: 'row') {",117],["sql.eachRow(sqlt, { row ->",209]],"useCount":11798},{"word":"rs","context":[["import javax.ws.rs.POST",86],["import javax.ws.rs.Path",266],["import javax.ws.rs.Produces",270],["import javax.ws.rs.core.Response",288],["import javax.ws.rs.core.MediaType",326],["import javax.ws.rs.Consumes",123],["rs.close()",97],["import javax.ws.rs.ext.Provider",208],["import javax.ws.rs.GET",224],["while (rs.next()) {",181]],"useCount":4396},{"word":"rule","context":[["package org.codenarc.rule.unnecessary",114],["package org.codenarc.rule.basic",96],["package org.codenarc.rule.groovyism",95],["assert rule.priority == 3",136],["import org.codenarc.rule.AbstractAstVisitor",196],["import org.codenarc.rule.AbstractAstVisitorRule",338],["assert rule.priority == 2",352],["import org.codenarc.rule.AbstractRuleTestCase",482],["import org.codenarc.rule.Rule",519],["ruleRegistry.add(rule)",93]],"useCount":5048},{"word":"rules","context":[["rules: [",65],["import net.menthor.ontouml.rules.SyntacticalRule",226],["package net.menthor.ontouml.rules.connection",74],["import net.menthor.ontouml.rules.GenericCondition",203],["import org.junit.rules.TestName",147],["import org.junit.rules.ExternalResource",55],["import net.menthor.ontouml.rules.generic.GenericCondition",97],["import org.junit.rules.ExpectedException",95],["import org.junit.rules.TestRule",78],["import org.junit.rules.TemporaryFolder",764]],"useCount":2932},{"word":"rulesets","context":[["// rulesets/unnecessary.xml",88],["// rulesets/unused.xml",88],["// rulesets/imports.xml",88],["// rulesets/naming.xml",87],["// rulesets/exceptions.xml",87],["// rulesets/braces.xml",87],["// rulesets/junit.xml",86],["// rulesets/basic.xml",87],["// rulesets/concurrency.xml",86],["// rulesets/design.xml",86]],"useCount":2871},{"word":"run","context":[["public void run() {",680],["objectUnderTest.run()",170],["public Object run() {",171],["void run() {",1013],["// configure settings for the run-war JVM",590],["// configure settings for the run-app JVM",587],["script.run()",181],["def run() {",220],["GrailsApp.run(Application, args)",223],["run: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",509]],"useCount":12583},{"word":"rundeck","context":[["package rundeck",99],["import com.dtolabs.rundeck.core.authorization.AuthContext",101],["import com.dtolabs.rundeck.core.common.Framework",95],["import rundeck.ScheduledExecution",124],["package rundeck.services",171],["import rundeck.Execution",95],["package rundeck.controllers",94],["import rundeck.services.FrameworkService",85],["import com.dtolabs.rundeck.server.authorization.AuthConstants",78],["package org.rundeck.plugin.scm.git",68]],"useCount":5437},{"word":"runner","context":[["import org.junit.runner.RunWith",810],["runner.run()",110],["import org.junit.runner.Description",106],["import org.gradle.testkit.runner.BuildResult",209],["import au.com.ps4impact.madcow.runner.webdriver.WebDriverStepRunner",100],["import static org.gradle.testkit.runner.TaskOutcome.SUCCESS",97],["runner[0].attribute('class') == 'org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail'",95],["import org.gradle.testkit.runner.GradleRunner",197],["runner('Fail')",124],["import org.gradle.testkit.runner.TaskOutcome",117]],"useCount":4041},{"word":"runtime","context":[["import org.codehaus.groovy.runtime.InvokerHelper",279],["//runtime \":yui-minify-resources:0.1.5\"",277],["// runtime 'org.postgresql:postgresql:9.3-1101-jdbc41'",231],["// runtime 'mysql:mysql-connector-java:5.1.29'",212],["runtime \":jquery:1.11.1\"",300],["// plugins needed at runtime but not for compilation",458],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.",522],["// specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes e.g.",581],["// TODO Implement runtime spring config (optional)",309],["runtime \":database-migration:1.4.0\"",316]],"useCount":9296},{"word":"s","context":[["// configure passing transaction's read-only attribute to Hibernate session, queries and criterias",277],["// URL to the plugin's documentation",517],["StringBuilder s = new StringBuilder();",455],["return s.toString();",332],["// Online location of the plugin's browseable source code.",295],["// Location of the plugin's issue tracker.",290],["return s",279],["s.append(\"'\");",216],["def bar(String s) {}",191],["s",125]],"useCount":16247},{"word":"s3","context":[["import com.amazonaws.services.s3.AmazonS3Client",68],["iconUrl: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png\",",365],["context.s3('test') {",64],["context.s3('profile') {",85],["name() == 'hudson.plugins.s3.S3BucketPublisher'",85],["with(entries[0].'hudson.plugins.s3.Entry'[0]) {",85],["iconX3Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\")",160],["iconX2Url: \"https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png\",",220],["with(userMetadata[0].'hudson.plugins.s3.MetadataPair'[0]) {",64],["userMetadata[0].'hudson.plugins.s3.MetadataPair'.size() == 1",64]],"useCount":2873},{"word":"save","context":[[").save()",487],[").save(failOnError: true)",501],["controller.save()",943],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928],["def save() {",901],["def save = {",897],["static allowedMethods = [save: \"POST\", update: \"PUT\", delete: \"DELETE\"]",866],["void \"Test the save action correctly persists an instance\"() {",744],["when:\"The save action is executed with an invalid instance\"",658],["when:\"The save action is executed with a valid instance\"",656]],"useCount":20496},{"word":"sb","context":[["StringBuilder sb = new StringBuilder()",313],["return sb.toString()",278],["sb.deleteCharAt(sb.length() - 1);//remove last comma",52],["def sb = new StringBuffer()",55],["sb.append(\"'\");",81],["sb.toString()",99],["StringBuffer sb = new StringBuffer()",130],["StringBuilder sb = new StringBuilder();",139],["return sb.toString();",156],["def sb = new StringBuilder()",179]],"useCount":2735},{"word":"scenario","context":[["\"(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+${jit}\\\\W+${configuration}\\\\W+${scenario}.*\")",201],["// the default scenario build",170],["if (scenario == 'coverage') {",160],["if (Constants.jitStressModeScenarios.containsKey(scenario)) {",203],["assert scenario == 'default'",213],["println(\"Unknown scenario: ${scenario}\");",141],["println(\"Unknown scenario: ${scenario}\");",141],["setTestJobTimeOut(newJob, scenario)",222],["switch (scenario) {",338],["\"(?i).*test\\\\W+${os}\\\\W+${scenario}.*\")",1149]],"useCount":8623},{"word":"scheduledExecution","context":[["assertNotNull(scheduledExecution)",112],["scheduledExecution.errors.allErrors.each {",125],["if (scheduledExecution && scheduledExecution.errors.hasErrors()) {",125],["if (scheduledExecution && scheduledExecution.errors.hasErrors()) {",125],["assertTrue(scheduledExecution instanceof ScheduledExecution)",112],["final ScheduledExecution execution = scheduledExecution",104],["scheduledExecution.errors.rejectValue(",84],["def scheduledExecution = results.scheduledExecution",69],["def scheduledExecution = results.scheduledExecution",69],["scheduledExecution.project",68]],"useCount":4138},{"word":"schema","context":[["then: 'at schema tab'",108],["when: 'go to schema tab'",114],["Schema schema = loadSchema('testdata/EMPSCHM version 100.schema')",62],["package springfox.documentation.schema",99],["import springfox.documentation.schema.mixins.TypesForTestingSupport",98],["import static springfox.documentation.spi.schema.contexts.ModelContext.*",87],["import springfox.documentation.schema.DefaultGenericTypeNamingStrategy",70],["given: \"a set model builder without a schema\"",65],["id(schema:'ii')",62],["Schema schema = loadSchema('testdata/EMPSCHM version 100.schema')",62]],"useCount":3932},{"word":"scm","context":[["//    def scm = [ url: \"http://svn.codehaus.org/grails-plugins/\" ]",178],["name() == 'scm'",99],["scm{",272],["def gitdir = new File(tempdir, 'scm')",103],["@RequiresPlugin(id = 'clone-workspace-scm')",107],["name() == 'hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition'",87],["1 * jobManagement.requirePlugin('clone-workspace-scm')",77],["version = scm.version.version",69],["* The closure parameter expects a configure block for direct manipulation of the generated XML. The {@code scm}",68],["scm {",549]],"useCount":4562},{"word":"scmNodes","context":[["context.scmNodes[0].browser[0].attribute('class') == 'hudson.plugins.git.browser.GithubWeb'",104],["context.scmNodes[0].userRemoteConfigs[0].'hudson.plugins.git.UserRemoteConfig'[0].url[0].value() ==",78],["isValidSvnScmNode(context.scmNodes[0])",351],["context.scmNodes[0] != null",786],["with(context.scmNodes[0]) {",382],["context.scmNodes[0].extensions.size() == 1",84],["context.scmNodes[0].browser[0].url[0].value() == 'https://github.com/jenkinsci/job-dsl-plugin/'",78],["context.scmNodes[0].branches[0].'hudson.plugins.git.BranchSpec'[0].name[0].value() == 'master'",91],["context.scmNodes[0].@class == 'hudson.plugins.mercurial.MercurialSCM'",90],["with(context.scmNodes[0].extensions[0].'hudson.plugins.git.extensions.impl.PreBuildMerge'[0]) {",69]],"useCount":4205},{"word":"script","context":[["def script = '''",117],["this.script = script",121],["this.script = script",121],["String result = compileToScript(script, CompilePhase.SEMANTIC_ANALYSIS)",128],["String script = '''",132],["script = \"\"\"",181],["script.run()",181],["</script>",196],["script {",115],["with(script[0]) {",108]],"useCount":9046},{"word":"scripts","context":[["* Processes Job DSL scripts.",48],["// config files can be ConfigSlurper scripts, Java properties files, or classes",495],["// config files can either be Java properties files or ConfigSlurper scripts",205],["includeTargets << new File(\"$databaseMigrationPluginDir/scripts/_DatabaseMigrationCommon.groovy\")",183],["//The bin folder where to find the generated scripts.",99],["* details about handling credentials in DSL scripts.",77],["* Executes Groovy scripts after a build.",44],["import com.anrisoftware.sscontrol.scripts.unix.InstallPackagesFactory",42],["scriptSourceNode.scriptFile[0].value() == 'scripts/hello.groovy'",46],["package org.kuali.rice.scripts",48]],"useCount":2624},{"word":"se","context":[["package se.inera.statistics.spec",95],["def se = new ScheduledExecution(",127],["ScheduledExecution se = new ScheduledExecution(",85],["def (Option option, ScheduledExecution se) = setupExpandUrlJob(controller)",81],["def ScheduledExecution se = new ScheduledExecution()",72],["ScheduledExecution se = new ScheduledExecution()",65],["ScheduledExecution se = (ScheduledExecution) list[0]",127],["se.save()",282],["assertNotNull se.id",259],["* e-mail: info _at_ motrice.se",180]],"useCount":5429},{"word":"search","context":[["String replaced(File parent, def search, def replace) {",147],["def search() {",69],["import com.intellij.psi.search.GlobalSearchScope",101],["column(name: \"class_name\", value: \"au.org.emii.search.index.DiskCachingFeatureTypeRequest\")",47],["resources.replaced parent, search, replace",130],["def search = {",140],["new TokenTemplate(search, replace)",167],["// locations to search for config files that get merged into the main config",204],["// locations to search for config files that get merged into the main config;",493],["case \"search\":",55]],"useCount":3220},{"word":"sec","context":[["setupFormTokens(sec)",60],["def sec = controller",61],["sec.frameworkService = mockWith(FrameworkService){",54],["sec.executionService = eServiceControl.createMock()",55],["sec.scheduledExecutionService = seServiceControl.createMock()",92],["sec.frameworkService = fwkControl.createMock()",304],["def sec = new ScheduledExecutionService()",156],["def sec = new ScheduledExecutionController()",130],["sec.params.putAll(params)",96],["sec.request.setAttribute(\"subject\", subject)",120]],"useCount":2300},{"word":"section","context":[["</section>",118],["section {",712],["<section>",81],["section(\"\"){",83],["section{",83],["section() {",324],["section([mobileOnly:true]) {",52],["section([title:\"Options\", mobileOnly:true]) {",58],["section( \"Notifications\" ) {",65],["section(\"Name your scenario\") {",69]],"useCount":3414},{"word":"security","context":[["import java.security.MessageDigest",253],["import com.netflix.spinnaker.clouddriver.google.security.GoogleNamedAccountCredentials",205],["import org.springframework.security.core.context.SecurityContextHolder",312],["import com.netflix.spinnaker.clouddriver.security.AccountCredentialsProvider",324],["import org.springframework.security.core.Authentication",367],["import org.springframework.security.access.annotation.Secured",248],["import org.springframework.security.authentication.UsernamePasswordAuthenticationToken",232],["import org.springframework.security.config.annotation.BaseSpringSpec",229],["import org.springframework.security.core.context.SecurityContextHolder as SCH",226],["import org.springframework.security.core.userdetails.UserDetails",218]],"useCount":17290},{"word":"see","context":[["* @see geb.Page#to(java.util.Map, java.lang.Object)",50],["* @see #getDefaultProperties()",274],["* @see <a href=\"https://github.com/jenkinsci/job-dsl-plugin/wiki/The-Configure-Block\">The Configure Block</a>",79],["* For example see docs for {@link IdeaModule}",65],["* @param file ({@see #toResource(Object)} for possible values)",59],["* @see #page(geb.Page)",56],["// For the true branch, see SnoopInstructionMethodAdapter",56],["* @see #AbstractBuildFormItem",55],["// We don't expect to see a job generated except in these scenarios",54],["* For examples see docs for {@link EclipseWtp}",50]],"useCount":2712},{"word":"select","context":[["WHERE t.PATIENT_NUM IN (select distinct patient_num",46],["Select select = adhoc.buildSelect()",47],["import org.jsoup.select.Elements",47],["s.append(\"select distinct a.component, a.GENE_SYMBOL, a.zscore, '\");",56],["select",66],["out.println '</select>'",71],["pathwayS.append(\" select  distinct bm.primary_external_id as gene_id from \")",79],["PATIENT_NUM IN (select distinct patient_num",88],[".select()",172],["f.select()",53]],"useCount":2469},{"word":"selenium","context":[["} catch(org.openqa.selenium.StaleElementReferenceException e) {",434],["import org.openqa.selenium.Keys",97],["import org.openqa.selenium.remote.DesiredCapabilities",103],["import org.openqa.selenium.chrome.ChromeDriver",118],["import org.openqa.selenium.firefox.FirefoxDriver",145],["import org.openqa.selenium.WebDriver",179],["} catch (org.openqa.selenium.ElementNotVisibleException e) {",183],["import org.openqa.selenium.WebElement",251],["} catch (org.openqa.selenium.StaleElementReferenceException e) {",261],["import org.openqa.selenium.By",199]],"useCount":3186},{"word":"send","context":[["def msg = send(endpointUri, body)",49],["def message = send \"From: noreply@ripe.net\\n\" +",44],["def message = send new Message(",2571],["send(endpointUri, body)",38],["private send(msg) {",83],["send(message)",82],["\"send 0x${device.deviceNetworkId} 1 1\", \"delay 1500\",",45],["import com.github.otbproject.otbproject.messages.send.MessagePriority",44],["\"send 0x${device.deviceNetworkId} 1 1\", \"delay 500\",",39],["SOAPResponse response = client.send {",44]],"useCount":3957},{"word":"sequence","context":[["sequence:",132],["<sequence>",144],["</sequence>",153],["<sequence><command><exec>test</exec></command></sequence>",207],[", sequence: sequence",98],[", sequence: sequence",98],["id generator:'sequence', params:[sequence:'SEQ_BIO_DATA_ID']",88],["id generator:'sequence', params:[sequence:'SEQ_BIO_DATA_ID']",88],["when: \"we request for the FASTA sequence\"",69],["<sequence><command><exec>test</exec></command></sequence>",207]],"useCount":2873},{"word":"server","context":[["server('server-name') {",166],["server.start()",329],["import com.sapienter.jbilling.server.user.db.CompanyDTO",168],["import org.opentele.server.model.Patient",106],["server {",130],["server.resetExpectations()",141],["import tigase.server.*",151],["server('server-name') {",166],["package org.opentele.server.model",186],["server.stop()",194]],"useCount":9883},{"word":"service","context":[["service {",320],["log.info \"Run service again to ensure that configuration is not set double.\"",130],["AgendaBoService service = new AgendaBoServiceImpl()",132],["service.setBusinessObjectService(bos)",140],["*       names, trademarks, service marks, or product names of the Licensor,",98],["MethodSecurityService service = context.getBean(MethodSecurityService)",97],["service.setDataObjectService(dataObjectService)",155],["import springfox.documentation.spi.service.contexts.OperationContext",156],["* @param service",508],["*            the service {@link Domain} domain.",84]],"useCount":11418},{"word":"services","context":[["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["import com.amazonaws.services.autoscaling.model.AutoScalingGroup",217],["package rundeck.services",171],["import com.amazonaws.services.ec2.AmazonEC2",165],["\"class\": \"com.amazonaws.services.ec2.model.Volume\",",126],["import com.amazonaws.services.ec2.model.Image",115],["\"class\": \"com.amazonaws.services.ec2.model.Tag\",",265],["// Injected services",96],["import com.amazonaws.services.ec2.model.SecurityGroup",100],["import com.google.api.services.compute.Compute",114]],"useCount":8904},{"word":"servlet","context":[["import javax.servlet.http.HttpServletRequest",1177],["import javax.servlet.http.HttpSession",215],["grails.servlet.version = \"2.5\" // Change depending on target container compliance (2.5 or 3.0)",241],["import javax.servlet.ServletException",297],["import javax.servlet.ServletContext",322],["error  'org.codehaus.groovy.grails.web.servlet',  //  controllers",336],["import javax.servlet.FilterChain",195],["import javax.servlet.http.HttpServletResponse",1241],["error  'org.codehaus.groovy.grails.web.servlet',        // controllers",443],["grails.servlet.version = \"3.0\" // Change depending on target container compliance (2.5 or 3.0)",496]],"useCount":10516},{"word":"session","context":[["def exception = session[WebAttributes.AUTHENTICATION_EXCEPTION]",113],["// configure passing read-only to OSIV session by default, requires \"singleSession = false\" OSIV mode",277],["AuthContext authContext = frameworkService.getAuthContextForSubject(session.subject)",206],["flush.mode = 'manual' // OSIV session flush mode outside of transactional context",149],["viewUtils.resolveException(flash, session.locale, e)",140],["viewUtils.resolveException(flash, session.locale, e);",125],["session.clear()",704],["session.flush()",387],["fwkControl.demand.getFrameworkFromUserSession { session, request -> return null }",347],["// configure passing transaction's read-only attribute to Hibernate session, queries and criterias",277]],"useCount":9747},{"word":"set","context":[["TaskRepository.threadLocalTask.set(Mock(Task))",155],["// set \"singleSession = false\" OSIV mode in hibernate configuration after enabling",277],["as-set:       AS-TEST",86],["when: \"building the set\"",87],["// Write out the set itself to the script file`",92],["GETL is a set of libraries of pre-built classes and objects that can be used to solve problems unpacking,",108],["set +e",123],["descr:        test as-set",211],["log.info \"Run service again to ensure that configuration is not set double.\"",130],["// set per-environment serverURL stem for creating absolute links",193]],"useCount":10938},{"word":"setUp","context":[["void setUp(){",75],["static void setUp() {",190],["void setUp() {",2315],["super.setUp()",2641],["protected void setUp() {",2174],["public void setUp() {",401],["super.setUp();",255],["public void setUp() throws Exception {",230],["protected void setUp() throws Exception {",205],["public static void setUp() {",99]],"useCount":9101},{"word":"settings","context":[["log.debug \"Installed with settings: ${settings}\"",523],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["// configure settings for the run-app JVM",587],["// configure settings for the Console UI JVM",589],["// configure settings for the test-app JVM, uses the daemon by default",589],["// configure settings for the run-war JVM",590],["log.debug \"Updated with settings: ${settings}\"",515],["log.debug \"Updated with settings: ${settings}\"",515],["log.debug \"Installed with settings: ${settings}\"",523],["// environment specific settings",654]],"useCount":10368},{"word":"setup","context":[["super.setup()",259],["setup:",17981],["void setup() {",1388],["import io.dropwizard.setup.Bootstrap",118],["import io.dropwizard.setup.Environment",126],["def setup()",130],["import org.springframework.test.web.servlet.setup.MockMvcBuilders",151],["def setup() {",9159],["public void setup() {",251],["def setup(){",236]],"useCount":33930},{"word":"sh","context":[["if (sh.getRet() == 0) {",166],["sh.getRet() == 0);",117],["Files.exists(folder.resolve('.command.sh'))",53],["buildCommands += \"./build.sh verbose ${lowerConfiguration} ${architecture}\"",56],["def scriptFileName = \"\\$WORKSPACE/set_stress_test_env.sh\"",57],["folder.resolve('.command.sh').text ==",58],["shell(\"./cibuild.sh --nocache --debug\")",64],["assertEquals(\"Unexpected error from running mahout\", 0, sh.getRet());",69],["logError(sh)",76],["shell(\"\"\"./clr/tests/runtest.sh \\\\",85]],"useCount":2456},{"word":"shell","context":[["shell('look at me')",171],["package org.codehaus.groovy.tools.shell.commands",141],["def shell = new GroovyShell(configuration)",146],["shell('echo hello')",138],["import org.codehaus.groovy.tools.shell.Groovysh",188],["shell('''#!/bin/bash",192],["import org.apache.bigtop.itest.shell.Shell",194],["shell.evaluate(\"\"\"",229],["GroovyShell shell = new GroovyShell()",233],["def shell = new GroovyShell()",268]],"useCount":6911},{"word":"should","context":[["then: \"we should have the expected sequences\"",69],["//Flow jobs should be Windows, Ubuntu, OSX, or CentOS",72],["//\tstatic\tmappedBy\t= []\t// specifies which property should be used in a mapping",73],["then: 'validation should fail'",75],["*       the brackets!)  The text should be enclosed in the appropriate",98],["fail('should always exception');",106],["fail 'should not make it here'",116],["then: 'should be on Admin page'",119],["* You should have received a copy of the CC0 Public Domain Dedication",200],["// What URL patterns should be processed by the resources plugin",348]],"useCount":6484},{"word":"shouldFail","context":[["shouldFail(IllegalArgumentException.class) {",473],["shouldFail {",516],["shouldFail(IllegalArgumentException) {",458],["shouldFail(UnsupportedOperationException) {",188],["shouldFail(CompilationFailedException) {",178],["shouldFail(NoSuchElementException) {",141],["private final shouldFail = new GroovyTestCase().&shouldFail",137],["private final shouldFail = new GroovyTestCase().&shouldFail",137],["shouldFail(MissingMethodException) {",125],["shouldFail(IllegalStateException.class) {",115]],"useCount":4680},{"word":"show","context":[["when:\"The show action is executed with a null domain\"",647],["then:\"A redirect is issues to the show action\"",486],["def show() {",529],["controller.show()",575],["redirect(action: \"show\", id: params.id)",604],["def show = {",959],["then:\"A redirect is issued to the show action\"",815],["controller.show(null)",743],["void \"Test that the show action returns the correct model\"() {",734],["when:\"A domain instance is passed to the show action\"",650]],"useCount":10819},{"word":"since","context":[["* @since 1.16",345],["* @since 1.30",450],["* @since 1.0",1862],["* @since 1.31",486],["* @since 1.17",476],["* @since 1.23",265],["* @since 1.26",279],["* @since 3.0",295],["* @since 0.4",316],["* @since 1.33",326]],"useCount":13023},{"word":"size","context":[["children().size() == 8",605],["children().size() == 6",527],["context.buildParameterNodes.size() == 1",536],["children().size() == 12",541],["children().size() == 4",583],["context.stepNodes.size() == 1",1147],["children().size() == 3",1344],["children().size() == 2",1428],["children().size() == 1",1889],["context.publisherNodes.size() == 1",2157]],"useCount":49544},{"word":"sleep","context":[["sleep(100)",120],["Thread.sleep(500)",182],["sleep(1000)",191],["Thread.sleep(100)",220],["Thread.sleep(1000)",229],["sleep(500)",108],["sleep 100",95],["Thread.sleep(2000)",94],["Thread.sleep(500);",91],["sleep 1000",115]],"useCount":3539},{"word":"slf4j","context":[["import org.slf4j.*",24],["artifactId 'slf4j-api'",23],["import org.slf4j.LoggerFactory",2759],["import org.slf4j.Logger",2552],["import org.slf4j.MDC",28],["public static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MODULE);",40],["System.setProperty('org.slf4j.simpleLogger.defaultLogLevel', 'trace')",134],["import org.slf4j.LoggerFactory;",129],["public static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MODULE);",40],["import org.slf4j.Logger;",125]],"useCount":6150},{"word":"smarthome","context":[["import org.eclipse.smarthome.core.types.Command",113],["import org.eclipse.smarthome.core.thing.ThingUID",210],["import org.eclipse.smarthome.test.OSGiTest",352],["import org.eclipse.smarthome.core.thing.ThingTypeUID",193],["import org.eclipse.smarthome.config.core.Configuration",157],["import org.eclipse.smarthome.core.thing.Thing",147],["import org.eclipse.smarthome.core.thing.ManagedThingProvider",134],["import org.eclipse.smarthome.core.thing.binding.ThingHandler",123],["import org.eclipse.smarthome.core.thing.ThingRegistry",110],["import org.eclipse.smarthome.core.thing.ChannelUID",107]],"useCount":5665},{"word":"so","context":[["// Zip up the tests directory so that we don't use so much space/time copying",52],["* furnished to do so, subject to the following conditions:",1420],["* @return a reference to this, so the API can be used fluently",427],["* A controller class handles incoming web requests and performs actions such as redirects, rendering views and so on.",163],["*  furnished to do so, subject to the following conditions:",142],["furnished to do so, subject to the following conditions:",134],["* so, subject to the following conditions:",115],["//Skip configs that aren't Checked or Release (so just Debug, for now)",110],["// This script is a Gant script so you can use all special variables provided",90],["// The alert processing happens async, so give it a little time before failing...",61]],"useCount":4615},{"word":"some","context":[["url('http://www.example.com/some/other/url') {",56],["\"name\": \"some.metric\",",65],["targets[0].value() == 'some-dsl.groovy\\nsome-other-dsl.groovy\\nstill-another-dsl.groovy'",69],["String templateUrl = 'http://some.url/api/objects/{objectId}'",80],["Utilities.addPeriodicTrigger(job, 'H H * * 3,6') // some time every Wednesday and Saturday",85],["as-name:        some-name",118],["descr: some descr",119],["groupPath: 'some/where',",143],["csvFileName[0].value() == 'some.csv'",480],["plot('my group', 'some.csv') {",512]],"useCount":4508},{"word":"something","context":[["void \"test something\"() {",3127],["* This file is generated. If you change something in this file, the changes are gone away after the next running of the",23],["// do something",42],["void \"test something\"()",26],["something      Do something.",24],["something      Do something.",24],["somethingElse  Do something else.",24],["shell('echo something outside')",46],["rootprop = 'something'",22],["// we now know we have something to exclude, so add the exclusion elements",21]],"useCount":3744},{"word":"sort","context":[["params.sort = params?.sort ?: pagination.sort",75],["names.sort() // needs to sort as there is no guarantee on the order within a folder",78],["names.sort() // needs to sort as there is no guarantee on the order within a folder",78],["params.sort = params?.sort ?: pagination.sort",75],["SortableCriteria.sort(params, delegate)",70],["if (params.sort) {",67],["env | sort | sed \"s/\\\\(.*\\\\)AWS\\\\(.*\\\\)=\\\\(.\\\\{6\\\\}\\\\).*/\\\\1AWS\\\\2=\\\\3xxxxxxxxxxxxx/\"",62],["def regions = myFixture.editor.foldingModel.allFoldRegions.sort { it.startOffset }",85],["phrases.sort()",106],["params.sort = params?.sort ?: pagination.sort",75]],"useCount":3242},{"word":"source","context":[["source:  TEST",1304],["source:       TEST",3460],["source:         TEST",1478],["* Redistribution and use in source and binary forms, with or without",1343],["source: TEST",1013],["grails.project.source.level = 1.6",731],["source:      TEST",611],["source:          TEST",393],["// watching is modified and reloaded. The event contains: event.source,",391],["* LensKit, an open source recommender systems toolkit.",327]],"useCount":18165},{"word":"spec","context":[["package se.inera.statistics.spec",95],["spec[0].value().empty",80],["import net.ripe.db.whois.spec.BaseSpec",64],["import spec.domain.Message",63],["import org.springframework.cloud.contract.spec.Contract",63],["import javax.crypto.spec.SecretKeySpec",75],["org.springframework.cloud.contract.spec.Contract.make {",56],["spec()",55],["package net.ripe.db.whois.spec.update",107],["import net.ripe.db.whois.spec.BaseQueryUpdateSpec",68]],"useCount":2704},{"word":"spinnaker","context":[["import com.netflix.spinnaker.orca.DefaultTaskResult",299],["import com.netflix.spinnaker.clouddriver.data.task.TaskRepository",330],["import com.netflix.spinnaker.clouddriver.security.AccountCredentialsProvider",324],["import com.netflix.spinnaker.orca.ExecutionStatus",484],["import com.netflix.spinnaker.clouddriver.data.task.Task",349],["import com.netflix.spinnaker.orca.pipeline.model.Pipeline",322],["import com.netflix.spinnaker.orca.pipeline.model.PipelineStage",292],["import com.netflix.spinnaker.clouddriver.orchestration.AtomicOperation",285],["import com.netflix.spinnaker.orca.TaskResult",281],["import com.netflix.spinnaker.orca.pipeline.model.Stage",677]],"useCount":19482},{"word":"split","context":[["(description - \"read attr - \").split(\",\").inject([:]) { map, param ->",33],["description.split(\",\").inject([:]) { map, param ->",48],["def valueString = part.split(\":\")[1].trim()",201],["def nameAndValue = param.split(\":\")",120],["def parts = description.split(',')",98],["def parts = device.deviceNetworkId.split(\":\")",79],["def idArray = ids1.split(\",\")",66],["def idArray = ids2.split(\",\")",66],["def pair = description.split(\":\")",60],["String[] ts = t.split(\",\");",54]],"useCount":2301},{"word":"spock","context":[["import spock.lang.*",2195],["import spock.lang.Shared",2531],["import spock.lang.Unroll",4126],["import spock.lang.Specification",21191],["import spock.lang.Subject",1072],["import spock.lang.Ignore",702],["import spock.lang.Specification;",464],["import spock.lang.Issue",454],["import spock.lang.Unroll;",236],["import spock.lang.Stepwise",299]],"useCount":37025},{"word":"spring","context":[["import org.apache.camel.spring.SpringRouteBuilder",117],["// TODO Implement post initialization spring config (optional)",357],["grails.spring.bean.packages = []",711],["import springfox.documentation.spring.web.mixins.RequestMappingSupport",230],["// TODO Implement runtime spring config (optional)",309],["import springfox.documentation.spring.web.mixins.ServicePluginsSupport",83],["package io.spring.initializr.metadata",75],["import grails.spring.BeanBuilder",93],["compile \":spring-security-core:2.0-RC4\"",60],["import springfox.documentation.spring.web.plugins.DocumentationContextSpec",243]],"useCount":4794},{"word":"springSecurityService","context":[["if (springSecurityService.isLoggedIn()) {",346],["password = springSecurityService.encodePassword(password)",140],["* Dependency injection for the springSecurityService.",152],["def user = AuthUser.findByUsername(springSecurityService.getPrincipal().username)",190],["static transients = ['springSecurityService']",197],["def user = springSecurityService.currentUser",229],["transient springSecurityService",319],["password = springSecurityService?.passwordEncoder ? springSecurityService.encodePassword(password) : password",138],["password = springSecurityService?.passwordEncoder ? springSecurityService.encodePassword(password) : password",138],["def springSecurityService",1369]],"useCount":5334},{"word":"springfox","context":[["import static springfox.documentation.spi.schema.contexts.ModelContext.*",87],["import springfox.documentation.builders.ParameterBuilder",87],["import springfox.documentation.spi.DocumentationType",261],["import springfox.documentation.builders.OperationBuilder",95],["import springfox.documentation.schema.mixins.TypesForTestingSupport",98],["package springfox.documentation.schema",99],["import springfox.documentation.spring.web.mixins.ServicePluginsSupport",83],["import springfox.documentation.spi.service.contexts.OperationContext",156],["import springfox.documentation.spring.web.mixins.RequestMappingSupport",230],["import springfox.documentation.spring.web.plugins.DocumentationContextSpec",243]],"useCount":4759},{"word":"springframework","context":[["import org.springframework.context.annotation.Configuration",1262],["import org.springframework.web.bind.annotation.RequestMapping",802],["import org.springframework.test.context.ContextConfiguration",805],["import org.springframework.dao.DataIntegrityViolationException",867],["import org.springframework.context.ApplicationContext",881],["import static org.springframework.http.HttpStatus.*",1095],["import org.springframework.stereotype.Component",2455],["'org.springframework',",1200],["import org.springframework.beans.factory.annotation.Autowired",4308],["import org.springframework.context.annotation.Bean",942]],"useCount":54738},{"word":"springsecurity","context":[["import grails.plugins.springsecurity.Secured",667],["package grails.plugin.springsecurity.acl",62],["grails.plugin.springsecurity.logout.postOnly = false",70],["import grails.plugins.springsecurity.SpringSecurityService",73],["import org.codehaus.groovy.grails.plugins.springsecurity.SpringSecurityUtils",343],["import grails.plugin.springsecurity.annotation.Secured",788],["import grails.plugin.springsecurity.SpringSecurityService",143],["package grails.plugin.springsecurity",145],["grails.plugin.springsecurity.controllerAnnotations.staticRules = [",196],["import grails.plugin.springsecurity.SpringSecurityUtils",403]],"useCount":4585},{"word":"sql","context":[["sql.close()",563],["Sql sql = new Sql(dataSource)",472],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource)",410],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource)",410],["import javax.sql.DataSource",410],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648],["groovy.sql.Sql sql = new groovy.sql.Sql(dataSource);",648],["Sql sql = new Sql(dataSource);",691],["import groovy.sql.Sql",1427]],"useCount":17058},{"word":"sqlt","context":[["sql.eachRow(sqlt, { row ->",209],["sql.eachRow(sqlt, [",206],["log.trace(sqlt);",202],["sql.eachRow(sqlt, {row->",100],["String sqlt =",97],["sqlt += \"PATIENT_ID IN (\" + listToIN(subids) + \") AND \"",70],["sql.eachRow(sqlt, [fullname.asLikeLiteral() + \"%\", i], { row ->",69],["String sqlt = \"SELECT * FROM observation_fact WHERE CONCEPT_CD = ?\";",69],["sql.eachRow(sqlt, {row ->",60],["sql.eachRow(sqlt) { row ->",58]],"useCount":2817},{"word":"src","context":[["def src = {",87],["File srcDir = new File(projectDir, 'src')",126],["BufferedReader br = new BufferedReader(new FileReader(\"src/resources/exportDetails.txt\"))",133],["'src/docs/**',",42],["BufferedReader br = new BufferedReader(new FileReader(\"src/resources/securityUsers.txt\"))",42],["def config = invoke( src )",46],["rakeWorkingDir[0].value() == 'src'",46],["def config = RestConfig.parse( grailsApplication, src )",52],["def src =",57],["BufferedReader br = new BufferedReader(new FileReader(\"src/resources/sqlQueryDbMonitor.txt\"));",68]],"useCount":2677},{"word":"st","context":[["// email: jamrozik@st.cs.uni-saarland.de",407],["state \"default\", label:'', action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",122],["state \"default\", label:\"\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",120],["state \"on\", label: '${name}', action: \"switch.off\", icon: \"st.switches.switch.on\", backgroundColor: \"#79b821\"",56],["state \"configure\", label:'', action:\"configuration.configure\", icon:\"st.secondary.configure\"",53],["attributeState(\"restarting\", label: \"Connecting\", icon: \"st.camera.dlink-indoor\", backgroundColor: \"#53a7c0\")",52],["state \"off\", label: '${name}', action: \"switch.on\", icon: \"st.switches.switch.off\", backgroundColor: \"#ffffff\"",51],["state \"toggle\", label:'toggle', action: \"\", icon: \"st.motion.motion.inactive\", backgroundColor: \"#53a7c0\"",43],["st.close()",42],["state \"default\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",59]],"useCount":2486},{"word":"stage","context":[["import javafx.stage.Stage",64],["String account = getCredentials(stage)",49],["task.execute(stage.asImmutable())",62],["String cloudProvider = getCloudProvider(stage)",64],["// escapes all not-encoded output at final stage of outputting",443],["TaskResult execute(Stage stage) {",253],["def result = task.execute(stage)",181],["public List<Step> buildSteps(Stage stage) {",119],["task.execute(stage)",113],["<T extends Execution<T>> void taskGraph(Stage<T> stage, TaskNode.Builder builder) {",70]],"useCount":2795},{"word":"start","context":[["stopWatch.start();",146],["new Thread(ab).start()",148],["long start = System.currentTimeMillis()",171],[".start()",188],["new Thread(imutHoldPenetrator).start()",238],["void start() {",274],["def start() {",138],["server.start()",329],["Thread.start {",495],["proxy.start()",128]],"useCount":10835},{"word":"state","context":[["String state",147],["headers.put(\"HOST\", \"$host:$state.cameraPort\")",118],["def userpassascii = \"${state.cameraUser}:${state.cameraPassword}\"",118],["def userpassascii = \"${state.cameraUser}:${state.cameraPassword}\"",118],["def host = state.cameraIP",118],["state \"default\", label:\"\", action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",120],["String state;",121],["return state",121],["state \"default\", label:'', action:\"refresh.refresh\", icon:\"st.secondary.refresh\"",122],["assert !state.finished",127]],"useCount":9923},{"word":"static","context":[["import static org.springframework.http.HttpStatus.*",1095],["public static void main(String[] args) {",988],["import static org.junit.Assert.assertTrue",1009],["static mappings = {",1044],["import static org.junit.Assert.assertEquals",1366],["static content = {",1380],["static {",1585],["import static org.junit.Assert.*",2429],["static mapping = {",5079],["static constraints = {",9400]],"useCount":78704},{"word":"status","context":[["assertEquals(201, response.status)",498],["response.status = 500",443],["response.status == 200",404],["'*'{ render status: NOT_FOUND }",743],["'*'{ render status: NO_CONTENT }",688],["assertEquals(200, resp.status)",1107],["assertEquals(200, response.status)",1240],["status 200",589],["response.status == 404",1549],["status:       ASSIGNED PA",527]],"useCount":28018},{"word":"step","context":[["step {",121],["// plugins for the compile step",458],["Node step = context.stepNodes[0]",216],["package javaposse.jobdsl.dsl.helpers.step",204],["Node condition = step.runCondition[0]",124],["import au.com.ps4impact.madcow.step.MadcowStep",112],["package org.apache.tinkerpop.gremlin.process.traversal.step.map",87],["step.name() == 'org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder'",82],["import javaposse.jobdsl.dsl.helpers.step.StepContext",74],["\"step\": [",72]],"useCount":3838},{"word":"stepNodes","context":[["def prerequisiteStep = context.stepNodes[0]",92],["Node step = context.stepNodes[0]",216],["context.stepNodes.size() == 3",115],["def rakeStep = context.stepNodes[0]",115],["context.stepNodes != null",466],["context.stepNodes.size() == 1",1147],["context.stepNodes.size() == 2",207],["def mavenStep = context.stepNodes[0]",69],["def sbtStep = context.stepNodes[0]",69],["with(context.stepNodes[0]) {",1210]],"useCount":5787},{"word":"steps","context":[["steps {",2224],["package jobs.steps.helpers",50],["def steps = maxsteps > 0",42],["steps",43],["if (steps && laststep > firststep) {",46],["// Calculate the build steps, archival, and xunit results",48],["// display paginate steps",49],["// display steps when steps are enabled and laststep is not firststep",49],["// display steps when steps are enabled and laststep is not firststep",49],["// builds will do a couple extra steps.",56]],"useCount":3711},{"word":"stereotype","context":[["import org.springframework.stereotype.Controller;",23],["import org.springframework.stereotype.Service;",32],["import org.springframework.stereotype.Component",2455],["import org.springframework.stereotype.Service",508],["import org.springframework.stereotype.Controller",278],["import org.springframework.stereotype.Repository",124],["import org.springframework.stereotype.Component;",59]],"useCount":3479},{"word":"stop","context":[["server.stop()",194],["void stop() {",247],["def stop() {",109],["stop()",95],["public void stop() {",94],["result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start",111],["result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start",111],["def stop = timeToday(ending).time",77],["//stop the server",48],["result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start",111]],"useCount":2413},{"word":"string","context":[["* @param string deviceID",74],["string[1].value() == 'bar'",74],["'empty string' | ''",81],["column(name: \"created_by\", type: '${string.type}')",86],["column(name: \"modified_by\", type: '${string.type}')",86],["t.addColumn(\"grid_id\", \"string\")",105],["string[0].value() == 'foo'",138],["workflow: new Workflow(commands: [new CommandExec(adhocExecution: true, adhocRemoteString: 'a remote string')]).save()",160],["* @param key Key string",222],["\"type\": \"string\",",176]],"useCount":5531},{"word":"stripIndent","context":[["}\"\"\".stripIndent()",67],["getFixtures().get(\"OWNER-MNT\").stripIndent().",89],["}'''.stripIndent()",104],[".stripIndent().leftTrim()",317],["\"\"\".stripIndent()))",612],["'''.stripIndent()",718],["\"\"\".stripIndent())",939],["\"\"\".stripIndent()",4890],["\"\"\".stripIndent().trim()",51],[".stripIndent()",56]],"useCount":8224},{"word":"subject","context":[["* furnished to do so, subject to the following conditions:",1420],["subject: \"\",",2366],["AuthContext authContext = frameworkService.getAuthContextForSubject(session.subject)",206],["final subject = new Subject()",145],["*  furnished to do so, subject to the following conditions:",142],["subject.principals << new Username('test')",135],["furnished to do so, subject to the following conditions:",134],["fwkControl.demand.getAuthContextForSubjectAndProject { subject,proj -> testUserAndRolesContext() }",120],["sec.request.setAttribute(\"subject\", subject)",120],["sec.request.setAttribute(\"subject\", subject)",120]],"useCount":8794},{"word":"success","context":[["response.success = { resp, json ->",236],["ack.success",756],["render([success: true] as JSON)",211],["success()",192],["context.publisherNodes[0].regexp[0].value() == 'success'",160],["* The Ajax success redirect url.",129],["success = false",118],["on(\"success\").to(\"build\")",113],["response.success = { resp, reader ->",110],["render([success: false] as JSON)",109]],"useCount":7053},{"word":"summary","context":[["ack.summary.assertErrors(0, 0, 0, 0)",2163],["ack.summary.assertSuccess(0, 0, 0, 0, 0)",1788],["ack.summary.assertErrors(1, 1, 0, 0)",1475],["ack.summary.assertSuccess(1, 1, 0, 0, 0)",1250],["ack.summary.assertSuccess(1, 0, 1, 0, 0)",484],["ack.summary.assertErrors(1, 0, 1, 0)",223],["ack.summary.nrFound == 2",215],["ack.summary.assertSuccess(1, 0, 0, 1, 0)",196],["Brief summary/description of the plugin.",133],["ack.summary.nrFound == 1",3662]],"useCount":12863},{"word":"super","context":[["super(jobManagement, item)",176],["super.setUp();",255],["super.setup()",259],["super.setUp()",2641],["super.tearDown()",2103],["instance = super.newInstance(builder, name, value, attributes)",268],["super();",285],["super()",952],["super(message)",378],["super(jobManagement)",413]],"useCount":14857},{"word":"support","context":[["import ru.vyarus.guice.persist.orient.support.model.Model",80],["test \"org.grails:grails-datastore-test-support:1.0-grails-2.4\"",87],["import org.springframework.web.context.support.WebApplicationContextUtils",89],["import org.springframework.core.io.support.PathMatchingResourcePatternResolver",117],["import org.springframework.web.servlet.support.RequestContextUtils as RCU",122],["import org.springframework.web.servlet.support.RequestContextUtils",128],["import grails.test.mixin.support.GrailsUnitTestMixin",458],["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365],["import grails.test.mixin.support.*",200],["test \"org.grails:grails-datastore-test-support:1.0.2-grails-2.4\"",164]],"useCount":4776},{"word":"swing","context":[["swing.edt {",159],["import groovy.swing.SwingBuilder",412],["// Valid values are: swing, javafx, swt, pivot, gtk",193],["assert swing.ii != null",216],["import javax.swing.JPanel",138],["import javax.swing.JComponent",124],["import javax.swing.*",402],["def swing = new SwingBuilder()",384],["package groovy.swing.factory",115],["import javax.swing.JFrame",139]],"useCount":7408},{"word":"switch","context":[["switch (request.method) {",148],["main \"switch\"",153],["sendEvent(name: \"switch\", value: \"off\")",187],["standardTile(\"switch\", \"device.switch\", width: 2, height: 2, canChangeIcon: true) {",129],["switch (scenario) {",338],["switch (type) {",318],["switch (architecture) {",298],["standardTile(\"switch\", \"device.switch\", width: 2, height: 2, canChangeIcon: true) {",129],["switch (os) {",171],["sendEvent(name: \"switch\", value: \"on\")",182]],"useCount":6427},{"word":"syncUpdate","context":[["syncUpdate(getTransient(\"ALLOC-PI\") + \"password: owner3\\npassword: hm\")",116],["def response = syncUpdate create",159],["def message = syncUpdate(\"\"\"\\",525],["def response = syncUpdate new SyncUpdate(data: \"\"\"\\",121],["syncUpdate(getTransient(\"ALLOC-PA\") + \"password: owner3\\npassword: hm\")",330],["syncUpdate(getTransient(\"ALLOC-UNS\") + \"password: owner3\\npassword: hm\")",280],["syncUpdate(getTransient(\"RIR-ALLOC-20\") + \"password: owner3\\npassword: hm\")",201],["def message = syncUpdate(\"\"\"",168],["def response = syncUpdate(new SyncUpdate(data: \"\"\"\\",125],["def response = syncUpdate update",146]],"useCount":6038},{"word":"t","context":[["return t",120],["console name: 'stdout', layout: pattern(conversionPattern: '%d [%t] %-5p %c - %m%n')",226],["when:\"Update is called for a domain instance that doesn't exist\"",656],["} catch (Throwable t) {",694],["throw t",185],["t.printStackTrace()",141],["catch (Throwable t) {",172],["println(\"FAIL: Test didn't pass in \" + numberOfTrials + \" trials\")",163],["myFixture.type('\\t')",211],["t.addVersionColumn()",213]],"useCount":14776},{"word":"table","context":[["// original + 2 Liquibase + new person table",59],["Table table",59],["buf.append(\"<table class='AnalysisResults'>\")",53],["table 'myTable'",69],["buf.append(\"</table>\");",97],["<table>",118],["table.addCell(cell)",48],["table {",133],["</table>",149],["import jobs.table.Table",48]],"useCount":3973},{"word":"tag","context":[["* This tag only writes its body to the output if the current user",61],["tag('tag1')",64],["assert info.tag == null",54],["withTag(\"sortableColumn\", pw) { tag ->",64],["tag.call(attrs)",74],["tag = \"${createUniqueImageId()}\"",52],["// close tag",50],["tag.call(attributes)",81],["String tag",98],["// use sorted map to be able to predict the order in which tag attributes are generated",140]],"useCount":3282},{"word":"tags","context":[["tags: ['type': 'cpu_usage', 'host': 'server1', 'env': 'stage']",31],["def 'flowdock with tags'() {",32],["tagsToPush(context.tags)",32],["tags: ['type': 'counter_cpu_usage', 'host': 'server1', 'env': 'stage']",35],["context.listTagsParam('myParameterName', 'http://kenai.com/svn/myProject/tags', '^mytagsfilterregex', true,",36],["tags('tag1', 'tagTwo')",32],["tags {",36],["tagsDir.text() == 'http://kenai.com/svn/myProject/tags'",87],["\"tags\":",240],["* and other contributors as indicated by the @author tags.",260]],"useCount":2316},{"word":"target","context":[["grails.servlet.version = \"3.0\" // Change depending on target container compliance (2.5 or 3.0)",496],["grails.project.work.dir = \"target/work\"",482],["grails.servlet.version = \"2.5\" // Change depending on target container compliance (2.5 or 3.0)",241],["grails.project.work.dir = 'target'",209],["cp -avr $WORKSPACE/target/screenshots/* .",180],["grails.project.test.reports.dir = \"target/test-reports\"",1264],["grails.project.class.dir = \"target/classes\"",1327],["grails.project.test.class.dir = \"target/test-classes\"",1328],["//grails.project.war.file = \"target/${appName}-${appVersion}.war\"",873],["grails.project.target.level = 1.6",766]],"useCount":15022},{"word":"task","context":[["return task",148],["Task task = project.tasks.create(name: ASCIIDOCTOR, type: AsciidoctorTask) {",175],["import com.netflix.spinnaker.clouddriver.data.task.Task",349],["def result = task.execute(stage)",181],["import com.netflix.spinnaker.clouddriver.data.task.TaskRepository",330],["task.execute()",489],["import com.netflix.spinnaker.kato.data.task.Task",132],["task,",142],["def task",113],["import com.netflix.spinnaker.kato.data.task.TaskRepository",128]],"useCount":13194},{"word":"tasks","context":[["import org.gradle.api.tasks.OutputDirectory",352],["import org.gradle.api.tasks.Optional",335],["import org.gradle.api.tasks.InputFiles",308],["import org.gradle.api.tasks.bundling.Jar",223],["import org.gradle.api.tasks.Copy",193],["import org.gradle.api.tasks.OutputFile",233],["import org.gradle.api.tasks.*",230],["import org.gradle.api.tasks.SourceSet",357],["import org.gradle.api.tasks.TaskAction",2252],["import org.gradle.api.tasks.Input",824]],"useCount":16356},{"word":"td","context":[["</td>",142],["snpData[4] + \"</td><td>\" + snpData[5] + \"</td><td>\" + geneBuf.toString() + \"</td></tr>\");",46],["def findbugsErrors = path.body.div.findAll {it.@id == 'bodyColumn'}.div[1].table.tr[1].td[1].toInteger()",47],["<td>",64],["pw.write(\"</td>\");",44],["td {",529],["snpData[4] + \"</td><td>\" + snpData[5] + \"</td><td>\" + geneBuf.toString() + \"</td></tr>\");",46],["snpData[4] + \"</td><td>\" + snpData[5] + \"</td><td>\" + geneBuf.toString() + \"</td></tr>\");",46],["snpData[4] + \"</td><td>\" + snpData[5] + \"</td><td>\" + geneBuf.toString() + \"</td></tr>\");",46],["snpData[4] + \"</td><td>\" + snpData[5] + \"</td><td>\" + geneBuf.toString() + \"</td></tr>\");",46]],"useCount":3455},{"word":"tearDown","context":[["protected void tearDown() {",2026],["super.tearDown()",2103],["static void tearDown() {",50],["public void tearDown()",59],["public static void tearDown() {",107],["public void tearDown() throws Exception {",113],["protected void tearDown() throws Exception {",120],["super.tearDown();",127],["public void tearDown() {",178],["void tearDown() {",866]],"useCount":5998},{"word":"tech","context":[["tech-c:       TP1-TEST",3512],["tech-c:         TP1-TEST",609],["tech-c: TEST-PN",387],["tech-c:         AP1-TEST",188],["tech-c:      TP1-TEST",123],["tech-c:          TEST-PN",120],["package pl.allegro.tech.build.axion.release.domain",80],["tech-c:  TP1-TEST",68],["tech-c:     TEST-PN",64],["import pl.allegro.tech.build.axion.release.domain.scm.ScmPosition",51]],"useCount":5708},{"word":"template","context":[["staticparts = 'none' // escapes output from static template parts",442],["startTemplate(template);",198],["def template = engine.createTemplate '''",80],["include template: 'includes/contribute-button.groovy'",80],["def template = '''",81],["CodeInsightTestUtil.addTemplate(template, testRootDisposable)",90],["startTemplate(template)",135],["* and open the template in the editor.",226],["* To change this template, choose Tools | Templates",168],["* To change this template use File | Settings | File Templates.",879]],"useCount":8547},{"word":"tenantId","context":[["], headers: [(tenantHeaderName): tenantId])",345],["(tenantHeaderName): tenantId,",54],["headers: [(tenantHeaderName): tenantId],",457],["String tenantId = nextTenantId()",251],["def tenantId = nextTenantId()",146],["headers: [(tenantHeaderName): tenantId]",125],["tenantId: tenantId,",102],["tenantId: tenantId,",102],["headers: [(tenantHeaderName): tenantId])",79],["eq('tenantId', tenant)",46]],"useCount":2291},{"word":"test","context":[["void \"test something\"() {",3127],["test {",1306],["grails.project.test.reports.dir = \"target/test-reports\"",1264],["grails.project.test.class.dir = \"target/test-classes\"",1328],["grails.project.test.class.dir = \"target/test-classes\"",1328],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["import grails.test.*",1514],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["import grails.test.mixin.*",2946],["import grails.test.mixin.TestFor",4744]],"useCount":80437},{"word":"testHighlighting","context":[["testHighlighting('''\\",1560],["myFixture.testHighlighting(false, false, false, getTestName(false) + \".java\");",26],["myFixture.testHighlighting(\"pluginWithModules.xml\");",28],["myFixture.testHighlighting(false, false, false)",30],["testHighlighting(\"\"\"",48],["myFixture.testHighlighting(true, false, false)",54],["myFixture.testHighlighting(true, false, true)",64],["testHighlighting '''",64],["testHighlighting '''\\",126],["testHighlighting('''",435]],"useCount":2674},{"word":"testSomething","context":[["void testSomething()",22],["void testSomething() {",2779]],"useCount":2801},{"word":"tests","context":[["--testRootDir=\\\"\\$(pwd)/clr/bin/tests/Windows_NT.${architecture}.${configuration}\\\" \\\\",75],["Utilities.addArchival(newJob, \"fx/bin/tests/**/testResults.xml\")",85],["package vmcTest.tests",110],["// Basic archiving of the build, no pal tests",108],["setup: \"Login as a tests user\"",101],["// Unzip the tests first.  Exit with 0",88],["Utilities.addXUnitDotNETResults(newJob, 'bin/tests/**/testResults.xml')",86],["shell(\"\"\"./clr/tests/runtest.sh \\\\",85],["Utilities.addXUnitDotNETResults(newJob, 'fx/bin/tests/**/testResults.xml')",85],["--testNativeBinDir=\\\"\\$(pwd)/clr/bin/obj/${osGroup}.${architecture}.${configuration}/tests\\\" \\\\",85]],"useCount":6269},{"word":"text","context":[["json:          ['application/json', 'text/json'],",462],["csv:           'text/csv',",479],["css:           'text/css',",479],["js:            'text/javascript',",480],["text:          'text/plain',",481],["text:          'text/plain',",481],["missions.add(new Mission(text: \"\"\"",486],["import java.text.SimpleDateFormat",1275],["xml:           ['text/xml', 'application/xml']",450],["html:          ['text/html','application/xhtml+xml'],",459]],"useCount":36256},{"word":"that","context":[["void \"Test that the delete action deletes an instance if it exists\"() {",739],["void \"Test that the show action returns the correct model\"() {",734],["void \"Test that the edit action returns the correct model\"() {",729],["when:\"Update is called for a domain instance that doesn't exist\"",656],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["// resources that are excluded from plugin packaging",508],["// locations to search for config files that get merged into the main config;",493],["// TODO Implement code that is executed when the project configuration changes.",398],["// TODO Implement code that is executed when any artefact that this plugin is",380],["// TODO Implement code that is executed when any artefact that this plugin is",380]],"useCount":15736},{"word":"the","context":[["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["void \"Test the index action returns the correct model\"() {",739],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* furnished to do so, subject to the following conditions:",1420],["then:\"A model is populated containing the domain instance\"",1296],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["then:\"A redirect is issued to the show action\"",815],["void \"Test the save action correctly persists an instance\"() {",744],["void \"Test that the delete action deletes an instance if it exists\"() {",739],["void \"Test the update action performs an update on a valid domain instance\"() {",739]],"useCount":127399},{"word":"then","context":[["then:\"A model is populated containing the domain instance\"",1296],["then:\"A 404 error is returned\"",1946],["then:",121948],["then:\"The model is correctly created\"",648],["then:\"The edit view is rendered again with the invalid instance\"",650],["then:\"A 404 is returned\"",651],["then:\"The instance is deleted\"",656],["then:\"It exists\"",658],["then:\"The create view is rendered again with the correct model\"",676],["then:\"A redirect is issued to the show action\"",815]],"useCount":142578},{"word":"these","context":[["// Uncomment these (or add new ones) to enable additional resources capabilities",370],["*\t\t3.\tTo clarify 1 and 2 above, if you use these modifications, it must be a free project, and",53],["// We don't expect to see a job generated except in these scenarios",54],["// Set the affinity.  All of these run on the target",86],["// Set the affinity.  All of these run on Windows currently.",89],["// Uncomment these to enable additional asset-pipeline capabilities",334],["// TODO Fill in these fields",343],["*\t\t\twith these modifications.",53],["// uncomment these to enable remote dependency resolution from public Maven repositories",50],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628]],"useCount":2968},{"word":"thing","context":[["managedThingProvider.add(thing)",159],["import org.eclipse.smarthome.core.thing.ThingTypeUID",193],["import org.eclipse.smarthome.core.thing.ThingUID",210],["import org.eclipse.smarthome.core.thing.Thing",147],["import org.eclipse.smarthome.core.thing.ManagedThingProvider",134],["import org.eclipse.smarthome.core.thing.binding.ThingHandler",123],["def content = render( thing )",121],["protected ThingHandler createHandler(Thing thing) {",95],["import org.eclipse.smarthome.core.thing.ChannelUID",107],["import org.eclipse.smarthome.core.thing.ThingRegistry",110]],"useCount":4190},{"word":"this","context":[["grails.project.groupId = appName // change this to alter the default package name and Maven publishing destination",601],["return this",3618],["this",3173],["* distributed with this work for additional information",3045],["*  distributed with this work for additional information",2945],["return this;",1734],["this.name = name",1174],["this.project = project",1076],["* To change this template use File | Settings | File Templates.",879],["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672]],"useCount":61401},{"word":"throw","context":[["throw new RuntimeException(e.toString())",155],["throw new IllegalArgumentException(",201],["throw e;",220],["throw new UnsupportedOperationException();",276],["throw ex",309],["throw new UnsupportedOperationException()",925],["throw e",1292],["throw t",185],["throw new RuntimeException()",161],["throw new RuntimeException(e);",130]],"useCount":10707},{"word":"thrown","context":[["thrown(Exception)",220],["RuntimeException e = thrown()",216],["Exception e = thrown(DslScriptException)",186],["IllegalArgumentException e = thrown()",159],["thrown(UnsupportedOperationException)",230],["thrown(NullPointerException)",282],["thrown(IllegalStateException)",399],["thrown IllegalArgumentException",705],["thrown(IllegalArgumentException)",1819],["thrown(DslScriptException)",2735]],"useCount":14173},{"word":"throws","context":[["throws TException {",260],["protected void setUp() throws Exception {",205],["* @throws IOException",167],["protected void configure(HttpSecurity http) throws Exception {",697],["* @throws NullPointerException if any parameter is {@code null}",328],["TransactionToken transaction, String environment) throws TException {",325],["* @throws Exception",244],["public void setUp() throws Exception {",230],["String environment) throws TException {",166],["protected void configure(AuthenticationManagerBuilder auth) throws Exception {",266]],"useCount":14528},{"word":"time","context":[["import java.time.LocalDateTime",293],["import java.time.LocalDate",181],["// This loop is used to gain time.",269],["import org.joda.time.LocalDate",214],["import java.time.Instant",184],["import groovy.time.TimeCategory",184],["import org.joda.time.format.DateTimeFormat",153],["import org.joda.time.DateTimeZone",160],["import org.joda.time.Duration",162],["import org.joda.time.DateTime",1143]],"useCount":8691},{"word":"timestamp","context":[["long timestamp = System.currentTimeMillis() - 100000",38],["String timestamp, AccessToken creds, TransactionToken transaction,",65],["[timestamp: start.plusMinutes(1).millis, value: \"up\"]",61],["long timestamp, AccessToken creds, TransactionToken transaction,",60],["Date timestamp;",50],["[timestamp: start.millis, value: \"down\"],",42],["[timestamp: start.millis, value: \"up\"],",40],["vd['timestamp'] = s?.isoDate",39],["), timestamp )",38],["timestamp: start.millis,",38]],"useCount":2945},{"word":"title","context":[["title[0].value().empty",448],["then: 'display title and save button of preferences'",166],["input(\"recipients\", \"contact\", title: \"Send notifications to\") {",101],["input \"days\", \"enum\", title: \"Only on certain days of the week\", multiple: true, required: false,",68],["this.title = title",73],["new TestFrameUtil(title, container).withFixture({ FrameFixture fixture ->",73],["this.title = title",73],["// Report title",78],["label title: \"Assign a name\", required: false",80],["String title",1102]],"useCount":8367},{"word":"to","context":[["* furnished to do so, subject to the following conditions:",1420],["* furnished to do so, subject to the following conditions:",1420],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291],["to LoginPage",1259],["then:\"A redirect is issued to the show action\"",815],["checksums true // Whether to verify checksums on resolve",740],["inherits true // Whether to inherit repository definitions from plugins",728],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["// packages to include in Spring bean scanning",685]],"useCount":66334},{"word":"toLowerCase","context":[["def lowerConfiguration = configuration.toLowerCase()",123],["def newJobName = \"outerloop_${osShortName[os]}_${configurationGroup.toLowerCase()}\"",45],["baseName = architecture.toLowerCase() + '_cross_' + configuration.toLowerCase() + '_' + os.toLowerCase()",47],["baseName = configuration.toLowerCase() + '_' + os.toLowerCase()",47],["baseName = architecture.toLowerCase() + '_' + configuration.toLowerCase() + '_' + os.toLowerCase()",56],["baseName = architecture.toLowerCase() + '_cross_' + configuration.toLowerCase() + '_' + os.toLowerCase()",47],["baseName = configuration.toLowerCase() + '_' + os.toLowerCase()",47],["baseName = architecture.toLowerCase() + '_cross_' + configuration.toLowerCase() + '_' + os.toLowerCase()",47],["baseName = architecture.toLowerCase() + '_' + configuration.toLowerCase() + '_' + os.toLowerCase()",56],["baseName = architecture.toLowerCase() + '_' + configuration.toLowerCase() + '_' + os.toLowerCase()",56]],"useCount":2763},{"word":"toString","context":[["String toString() {",3142],["public String toString() {",2014],["String toString(){",626],["return s.toString();",332],["return sb.toString()",278],["def userpass = \"Basic \" + userpassascii.encodeAsBase64().toString()",193],["content.toString()",179],[".toString()",161],["return builder.toString()",157],["return writer.toString()",156]],"useCount":23585},{"word":"token","context":[["if (token) {",40],["def registrationCode = token ? RegistrationCode.findByToken(token) : null",37],["def registrationCode = token ? RegistrationCode.findByToken(token) : null",37],["String token = params.t",38],["context.flowdock('another-token') {",160],["* For security reasons, do not use a hard-coded token. See",56],["token[0].value() == ''",63],["return token",66],["String token",112],["flowToken[0].value() == 'another-token'",160]],"useCount":3234},{"word":"tools","context":[["package org.codehaus.groovy.tools.shell.completion",59],["import org.codehaus.groovy.tools.shell.Groovysh",188],["package org.codehaus.groovy.tools.shell.commands",141],["package org.codehaus.groovy.tools.stubgenerator",125],["import org.apache.tools.ant.BuildException",74],["import org.codehaus.groovy.tools.shell.util.Preferences",85],["import org.codehaus.groovy.tools.shell.util.Logger",86],["import org.codehaus.groovy.tools.shell.CommandSupport",95],["import org.apache.tools.ant.taskdefs.condition.Os",113],["package org.codehaus.groovy.tools.shell",114]],"useCount":3403},{"word":"tr","context":[["tr {",686],["def findbugsErrors = path.body.div.findAll {it.@id == 'bodyColumn'}.div[1].table.tr[1].td[1].toInteger()",47],["snpData[4] + \"</td><td>\" + snpData[5] + \"</td><td>\" + geneBuf.toString() + \"</td></tr>\");",46],["buf.append(\"</tr>\")",55],["tr() {",77],["tr{",96],["buf.append(\"<tr>\")",44],["<tr><td colspan='2'><input name=\"submit\" type=\"submit\" value=\"Login\"/></td></tr>",38],["<tr>",245],["</tr>",325]],"useCount":3491},{"word":"trace","context":[["UtilService.trace('delete', this)",78],["log.trace \"daysOk = $result\"",75],["log.trace \"modeOk = $result\"",72],["UtilService.trace('insert', this)",78],["log.trace(sqlt);",202],["UtilService.trace('update', this)",78],["log.trace \"timeOk = $result\"",86],["if (settings.trace) {",115],["System.setProperty('org.slf4j.simpleLogger.defaultLogLevel', 'trace')",134],["log.trace(\"***********************\");",138]],"useCount":3756},{"word":"transaction","context":[["// configure passing transaction's read-only attribute to Hibernate session, queries and criterias",277],["import grails.transaction.Transactional",2296],["import org.springframework.transaction.TransactionStatus",83],["creds, transaction, environment);",96],["import grails.transaction.*",98],["import org.springframework.transaction.annotation.Transactional",385],["TransactionToken transaction, String environment) throws TException {",325],["AccessToken creds, TransactionToken transaction, String environment)",225],["transaction, environment);",160],["import grails.transaction.Rollback",127]],"useCount":5387},{"word":"transform","context":[["@groovy.transform.CompileStatic",889],["import groovy.transform.Canonical",1234],["import groovy.transform.EqualsAndHashCode",1214],["import groovy.transform.ToString",1908],["import groovy.transform.InheritConstructors",654],["import groovy.transform.CompileStatic",8289],["import groovy.transform.TypeChecked",1143],["import groovy.transform.*",637],["import groovy.transform.PackageScope",776],["import groovy.transform.Immutable",805]],"useCount":25649},{"word":"transmart","context":[["import org.transmart.searchapp.AccessLog",92],["* This file is part of transmart-core-db.",452],["package com.recomdata.transmart.data.export",142],["package org.transmart",102],["package org.transmart.biomart",156],["import org.transmart.searchapp.AuthUser",97],["import org.transmart.biomart.Experiment",63],["package org.transmart.searchapp",71],["package com.recomdata.transmart.data.association",93],["import org.transmart.searchapp.SearchKeyword",92]],"useCount":3264},{"word":"transmartproject","context":[["import org.transmartproject.core.dataquery.assay.Assay",90],["import org.transmartproject.core.dataquery.highdim.HighDimensionResource",92],["import org.transmartproject.core.dataquery.DataRow",87],["import org.transmartproject.core.dataquery.TabularResult",178],["import org.transmartproject.core.dataquery.highdim.projections.Projection",186],["import org.transmartproject.core.dataquery.highdim.AssayColumn",167],["import org.transmartproject.core.ontology.OntologyTerm",98],["import org.transmartproject.core.dataquery.highdim.assayconstraints.AssayConstraint",99],["import org.transmartproject.core.dataquery.highdim.HighDimensionDataTypeResource",105],["import org.transmartproject.core.exceptions.InvalidArgumentsException",128]],"useCount":4155},{"word":"trigger","context":[["1 * jobManagement.logPluginDeprecationWarning('parameterized-trigger', '2.26')",141],["1 * jobManagement.requireMinimumPluginVersion('parameterized-trigger', '2.26')",87],["trigger('Project3') {",100],["1 * jobManagement.requirePlugin('parameterized-trigger')",238],["name() == 'au.com.centrumsystems.hudson.plugin.buildpipeline.trigger.BuildPipelineTrigger'",130],["trigger('Project1, Project2') {",130],["// Default trigger",156],["// Set a periodic trigger",143],["// Set a push trigger",144],["// Set PR trigger.",138]],"useCount":5158},{"word":"triggers","context":[["rule.triggers = triggers",50],["triggers {",349],["static triggers = {",254],["package javaposse.jobdsl.dsl.helpers.triggers",92],["resp = client.post(path: \"triggers\", body: testTrigger)",50],["Node emailDefault = triggers.children()[0].email[0]",58],["Node triggers = emailPublisher.configuredTriggers[0]",87],["// Set up triggers",84],["// Set up appropriate triggers.  PR on demand, otherwise nightly",65],["triggers.children().size() == 2",58]],"useCount":2851},{"word":"trim","context":[["map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]",112],["def valueString = part.split(\":\")[1].trim()",201],["def valueString = part.trim()",125],["\"\"\".stripIndent().trim()",51],["part = part.trim()",104],["map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]",112],["String geneEntrezIdStr = unique_id.substring(idx + 1).trim();",77],["\"\"\".trim()",74],["line = line.trim()",71],["'''.trim()",70]],"useCount":2877},{"word":"true","context":[["true",2671],["@Transactional(readOnly = true)",1387],["return true",10062],["return true;",2822],["pooled = true",1122],["while (true) {",786],["grails.enable.native2ascii = true",780],["checksums true // Whether to verify checksums on resolve",740],["assert true",741],["cache true",760]],"useCount":104219},{"word":"try","context":[["//try to do update of the ScheduledExecution",213],["try {}",105],["//        try {",63],["//try to do api job run",50],["try\t{",44],["try{",2574],["try",3638],["try {",41588],["//            try {",23],["assertTrue 'try' in strings",25]],"useCount":48809},{"word":"txt","context":[["filter[0].value() == '*.xml, *.txt'",46],["excludePatterns('foo.xml', 'foo.txt')",46],["includePatterns('*.xml', '*.txt')",46],["myFixture.configureByText \"a.txt\", \"<caret>\"",43],["jenkinsRule.instance.rootPath.child('userContent').child('foo.txt').exists()",48],["BufferedReader br = new BufferedReader(new FileReader(\"src/resources/securityUsers.txt\"))",42],["excludes[0].value() == 'foo.xml, foo.txt'",46],["BufferedReader br = new BufferedReader(new FileReader(\"src/resources/sqlQueryDbMonitor.txt\"));",68],["context.publisherNodes[0].fileSet[0].value() == '*.txt'",128],["BufferedReader br = new BufferedReader(new FileReader(\"src/resources/exportDetails.txt\"))",133]],"useCount":2296},{"word":"type","context":[["switch (type) {",318],["String type",584],["myFixture.type('\\t')",211],["type '\\n'",214],["type '.'",218],["this.type = type",275],["this.type = type",275],["column(autoIncrement: \"true\", name: \"id\", type: \"bigint\") {",323],["myFixture.type('\\n')",318],["column(name: \"version\", type: \"bigint\") {",316]],"useCount":32339},{"word":"types","context":[["<types>",176],["// List of actions with specific request types",94],["grails.mime.types = [ // the first one is the default format",306],["</types>",178],["import org.bson.types.ObjectId",272],["grails.mime.types = [",246],["*       and conversions to other media types.",98],["import org.eclipse.smarthome.core.types.Command",113],["package com.github.dfrommi.pandoc.types",71],["grails.mime.types = [ html: ['text/html','application/xhtml+xml'],",205]],"useCount":4643},{"word":"ui","context":[["package org.pillarone.riskanalytics.application.ui.main.action",64],["import org.pillarone.riskanalytics.application.ui.util.I18NAlert",56],["import com.vaadin.ui.Component",61],["import org.springframework.ui.Model",62],["import com.intellij.util.ui.UIUtil",63],["import org.pillarone.riskanalytics.application.ui.base.action.ResourceBasedAction",64],["import org.pillarone.riskanalytics.application.ui.base.model.SimpleTableTreeNode",64],["package org.pillarone.riskanalytics.application.ui.main.view",69],["import org.pillarone.riskanalytics.application.ui.UlcSessionScope",71],["import org.pillarone.riskanalytics.application.ui.util.UIUtils",140]],"useCount":4326},{"word":"ul","context":[["ul(class: 'nav-sidebar') {",59],["out << \"</ul>\"",55],["</ul>",90],["ul {",174],["* <ul>",2056],["* </ul>",2062],["*     </ul>",25],["*     <ul>",29],["out << \"<ul>\"",34],["<ul>",46]],"useCount":4785},{"word":"uncomment","context":[["// uncomment the below to enable remote dependency resolution",409],["// specify dependency exclusions here; for example, uncomment this to disable ehcache:",672],["// uncomment these (or add new ones) to enable remote dependency resolution from public Maven repositories",628],["// uncomment to disable ehcache",496],["// uncomment (and adjust settings) to fork the JVM to isolate classpaths",145],["// uncomment these to enable remote dependency resolution from public Maven repositories",50]],"useCount":2400},{"word":"up","context":[["// Set up the copies",58],["void up() {",1117],["// Set up standard options.",409],["// Attempt to clean up anything we created",85],["// Set up triggers",84],["void up(){",75],["// Set up appropriate triggers.  PR on demand, otherwise nightly",65],["// Package up the results.",64],["[timestamp: start.plusMinutes(1).millis, value: \"up\"]",61],["// Need to change around some systems and other builds to pick up the right builds",54]],"useCount":3880},{"word":"update","context":[["def update = {",753],["controller.update(null)",747],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["when:\"A valid domain instance is passed to the update action\"",657],["controller.update()",1676],["dbCreate = \"update\"",1166],["static allowedMethods = [save: \"POST\", update: \"POST\", delete: \"POST\"]",928],["static allowedMethods = [save: \"POST\", update: \"PUT\", delete: \"DELETE\"]",866],["password: update",826]],"useCount":17163},{"word":"updated","context":[["* @param field that is being updated",29],["// Only Branch \"TestBranch\" has been updated.",25],["flash.message = message(code: 'default.updated.message', args: [",25],["\"Another user has updated this User while you were editing\")",30],["updated: {old, updated ->",30],["updated: {old, updated ->",30],["thingUpdated = true; updatedThing = updated}",30],["def updated(){",44],["def updated()",157],["def updated() {",1048]],"useCount":2299},{"word":"uri","context":[["maven { url \"${mavenRepo.uri}\" }",105],["redirect uri: config.successHandler.defaultTargetUrl",138],["redirect uri: SpringSecurityUtils.securityConfig.successHandler.defaultTargetUrl",174],["redirect uri: SpringSecurityUtils.securityConfig.logout.filterProcessesUrl // '/j_spring_security_logout'",94],["* Index action. Redirects to the Spring security logout uri.",114],["* @param uri",117],["def uri",75],["String uri",72],["return uri",62],["redirect uri: '/'",62]],"useCount":3633},{"word":"url","context":[["String url",489],["url[0].value() == ''",320],["location('url')",299],["url('https://github.com/jenkinsci/job-dsl-plugin.git')",603],["//    def issueManagement = [ system: \"JIRA\", url: \"http://jira.grails.org/browse/GPMYPLUGIN\" ]",206],["url = \"jdbc:h2:mem:testDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE\"",202],["//    def organization = [ name: \"My Company\", url: \"http://www.my-company.com/\" ]",194],["url(hcmApp)",186],["url = \"jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE\"",160],["//    def scm = [ url: \"http://svn.codehaus.org/grails-plugins/\" ]",178]],"useCount":12665},{"word":"usage","context":[["cache usage:'read-only'",62],["* See the API for {@link grails.test.mixin.web.GroovyPageUnitTestMixin} for usage instructions",127],["usage()",57],["* See the API for {@link grails.test.mixin.domain.DomainClassUnitTestMixin} for usage instructions",2521],["@Cache( usage = CacheConcurrencyStrategy.READ_WRITE )",54],["cli.usage();",39],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["* See the API for {@link grails.test.mixin.services.ServiceUnitTestMixin} for usage instructions",893],["cli.usage()",382],["* See the API for {@link grails.test.mixin.support.GrailsUnitTestMixin} for usage instructions",365]],"useCount":6704},{"word":"use","context":[["grails.mime.use.accept.header = false",349],["* Redistribution and use in source and binary forms, with or without",1343],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1291],["* To change this template use File | Settings | File Templates.",879],["// Set to false to use the new Grails 1.2 JSONBuilder in the render method",687],["htmlcodec = 'xml' // use xml escaping instead of HTML4 escaping",444],["// use sorted map to be able to predict the order in which tag attributes are generated",140],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",142],["use(TimeCategory) {",145],["groovyshMocker.use {",156]],"useCount":12066},{"word":"used","context":[["//\tstatic\tmappedBy\t= []\t// specifies which property should be used in a mapping",73],["\"Authorisation override used\"]",102],["GETL is a set of libraries of pre-built classes and objects that can be used to solve problems unpacking,",108],["// This loop is used to gain time.",269],["// Legacy setting for codec used to encode data with ${}",359],["// The default codec used to encode data with ${}",401],["* @return a reference to this, so the API can be used fluently",427],["*  Compose a list of columns used by Heatmap and then trim average value",43],["descr:       used to maintain other MNTNERs",48],["descr:       used for route tests",65]],"useCount":4042},{"word":"user","context":[["if (user) builder.append(user.id)",249],["ScriptHelper.runCommand(commandStr, sArgs.user, sArgs.channel, sArgs.destinationChannel, MessagePriority.HIGH);",244],["def user = springSecurityService.currentUser",229],["user.save()",233],["* @param user",237],["User user",505],["userUpdater.update(user, userEntity)",240],["if (user) builder.append(user.id)",249],["if (user) {",262],["if (!user) {",420]],"useCount":25914},{"word":"userId","context":[["static UserRole get(long userId, long roleId) {",216],["user == User.load(userId) &&",197],["super( userId );",111],["static boolean exists(long userId, long roleId) {",108],["[userId: userId, roleId: roleId]",79],["[userId: userId, roleId: roleId]",79],["String userId",76],["find 'from UserRole where user.id=:userId and role.id=:roleId',",73],["private static DetachedCriteria criteriaFor(long userId, long roleId) {",50],["criteriaFor(userId, roleId).get()",50]],"useCount":2334},{"word":"userInstance","context":[["render(view: \"edit\", model: [userInstance: userInstance])",68],["render(view: \"edit\", model: [userInstance: userInstance])",68],["def userInstance = User.get(id)",66],["assert model.userInstance != null",79],["if (userInstance.hasErrors()) {",79],["if (!userInstance.save(flush: true)) {",68],["def userInstance = User.get(params.id)",84],["model.userInstance == user",95],["if (!userInstance) {",150],["if (userInstance == null) {",134]],"useCount":2250},{"word":"username","context":[["username blank: false, unique: true",276],["String username",1009],["username = \"sa\"",602],["logIn(username, password)",364],["this.username = username",177],["return doGET(URL, username, password)",248],["def user = AuthUser.findByUsername(springSecurityService.getPrincipal().username)",190],["@RestApiParam(name=\"username\", type=\"email\", paramType = RestApiParamType.QUERY)",122],["username = \"root\"",140],["this.username = username",177]],"useCount":10226},{"word":"util","context":[["import groovy.util.logging.Log4j",566],["import grails.util.GrailsUtil",542],["import groovy.util.logging.Slf4j",3701],["import java.util.regex.Pattern",1414],["import java.util.concurrent.TimeUnit",1324],["import java.util.List;",992],["import grails.util.Environment",844],["import grails.util.Holders",799],["import java.util.Map;",748],["import java.util.regex.Matcher",623]],"useCount":46823},{"word":"utils","context":[["import test.groovy.platformservices.utils.pageUtils.BaseHelper",143],["import test.groovy.platformservices.utils.dataUtils.user.ListofUsers",140],["import org.fundacionjala.gradle.plugins.enforce.utils.Constants",136],["import org.fundacionjala.gradle.plugins.enforce.utils.Util",151],["import test.groovy.platformservices.utils.dataUtils.FrameworkConstants",142],["import org.fundacionjala.gradle.plugins.enforce.utils.salesforce.MetadataComponents",113],["import test.groovy.platformservices.utils.pageUtils.BasePage",112],["import getl.utils.*",84],["import org.pillarone.riskanalytics.domain.utils.DistributionType",77],["import static com.anrisoftware.globalpom.utils.TestUtils.*",408]],"useCount":5091},{"word":"v","context":[["attrs.each { k, v ->",67],["return v",93],["if (v != null) {",43],["displayStr += ' ' + modeName + '=' + v",44],["stepScript += \"echo set ${k}=${v} >> ${stepScriptLocation}\\r\\n\"",46],["stepScript += \"echo Setting ${k}=${v}\\n\"",46],["stepScript += \"echo Setting ${k}=${v}\\r\\n\"",46],["frame.push(v)",48],["stressModeVars.each{ k, v ->",92],["Constants.jitStressModeScenarios[scenario].each{ k, v ->",82]],"useCount":2715},{"word":"val","context":[["def val",63],["val == value",55],["} else if (val) {",61],["securityCode(validator: {val, obj ->",92],["return val",136],["if (val) {",148],["result.val == Channel.STOP",161],["String val = row.getAt(count);",51],["s.append(val);",51],["val = null",55]],"useCount":3849},{"word":"valid","context":[["def valid = true",77],["valid = false",677],["void \"Test the update action performs an update on a valid domain instance\"() {",739],["// TODO: Populate valid properties like...",1018],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"The save action is executed with a valid instance\"",656],["if (valid) {",260],["when: \"The save action is executed with a valid instance\"",93],["when: \"A valid domain instance is passed to the update action\"",90],["return valid",80]],"useCount":5892},{"word":"validate","context":[["if (!user.validate()) {",140],["user.validate()",139],["dbCreate = \"create-drop\" // one of 'create', 'create-drop', 'update', 'validate', ''",299],["command.validate()",105],["validator.validate([], description, errors)",371],["assertTrue(command.validate())",76],["void validate() {",89],["person.validate()",72],["dbCreate = \"update\" // one of 'create', 'create-drop', 'update', 'validate', ''",134],["cmd.validate()",130]],"useCount":4327},{"word":"validation","context":[["import org.springframework.validation.BindingResult",86],["import grails.validation.Validateable",352],["import org.springframework.validation.Errors",513],["import grails.validation.ValidationException",180],["import javax.validation.Valid",144],["then: 'validation should fail'",75],["import org.codehaus.groovy.grails.validation.ConstrainedProperty",72],["import javax.validation.constraints.NotNull",271],["* @param string validation md5 sum",70],["import org.springframework.validation.BeanPropertyBindingResult",66]],"useCount":3784},{"word":"value","context":[["logarithmic[0].value() == false",448],["csvLastModification[0].value() == 0",480],["file[0].value() == 'data.prop'",480],["style[0].value() == 'line'",448],["keepRecords[0].value() == false",448],["exclZero[0].value() == false",448],["csvFileName[0].value() == 'some.csv'",480],["group[0].value() == 'my group'",480],["return value",1040],["String value",621]],"useCount":110701},{"word":"values","context":[["expression = 'html' // escapes values inside ${}",362],["expression = 'html' // escapes values inside null",80],["values.add(row.NVAL_NUM);",67],["values (0, 'test.name', 'test.street1', 'test.street2', '12345')",73],["// Validate values",77],["return values",99],["def values = []",172],["// Valid values are: swing, javafx, swt, pivot, gtk",193],["// Valid values are:",217],["//TODO: add invalid values to params object",314]],"useCount":8128},{"word":"verbose","context":[["verbose[0].value() == true",132],["verbose()",82],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["if (io.verbose) {",77],["verbose[0].value() == false",69],["if (verbose) {",62],["buildCommands += \"./build.sh verbose ${lowerConfiguration} ${architecture}\"",56],["verbose(true)",55],["ROOTFS_DIR=/opt/arm-linux-genueabihf-root ./build.sh skipmscorlib arm cross verbose ${lowerConfiguration}\"\"\"",48]],"useCount":2486},{"word":"verify","context":[["businessObjectServiceMockFor.verify(bos)",72],["mockBoService.verify(boService)",80],["mock.verify(boService)",158],["verifyUtil.verify(util.verifyElementPresent {",185],["checksums true // Whether to verify checksums on resolve",740],["mockBusinessObjectService.verify(bos)",140],["mockProjectExec.verify()",81],["verify()",112],["mock.verify(dataObjectService)",91],["mockDataObjectService.verify(dataObjectService)",147]],"useCount":3483},{"word":"version","context":[["* later version.",567],["// the plugin version",649],["column(name: \"version\", valueNumeric: \"0\")",628],["// the version or versions of Grails the plugin is designed for",529],["if (params.version) {",852],["Long version",996],["version false",1438],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["def version = params.version.toLong()",1029],["def version = params.version.toLong()",1029]],"useCount":26357},{"word":"vertx","context":[["((io.vertx.core.Handler) this.delegate).handle((io.vertx.ext.web.RoutingContext)arg0.getDelegate());",82],["import io.vertx.lang.groovy.InternalHelper",264],["import io.vertx.core.Handler",211],["import io.vertx.core.json.JsonObject",187],["import io.vertx.groovy.ext.web.RoutingContext",133],["import io.vertx.groovy.core.Vertx",100],["* @param vertx the Vert.x instance",77],["((io.vertx.core.Handler) this.delegate).handle((io.vertx.ext.web.RoutingContext)arg0.getDelegate());",82],["package io.vertx.groovy.ext.web.handler;",98],["handler.handle(io.vertx.core.Future.failedFuture(ar.cause()));",83]],"useCount":3233},{"word":"view","context":[["view == 'edit'",733],["import android.view.View",151],["parent.referencedViews.contains(view)",285],["\"/\"(view:\"/index\")",307],["view == 'create'",733],["then:\"The create view is rendered again with the correct model\"",676],["then:\"The edit view is rendered again with the invalid instance\"",650],["\"500\"(view:'/error')",566],["Node root = view.node",376],["view.name == 'test'",288]],"useCount":13073},{"word":"views","context":[["views {",480],["\"grails-app/views/error.gsp\"",415],["grails.views.default.codec = \"html\"",366],["grails.views.gsp.sitemesh.preprocess = true",343],["grails.views.gsp.encoding = \"UTF-8\"",332],["grails.views.default.codec = \"none\" // none, html, base64",313],["\"grails-app/views/error.gsp\",",119],["* A controller class handles incoming web requests and performs actions such as redirects, rendering views and so on.",163],["grails.views.default.codec=\"none\" // none, html, base64",167],["grails.views.gsp.encoding=\"UTF-8\"",180]],"useCount":4508},{"word":"void","context":[["void setUp() {",2315],["void setup() {",1388],["void \"test something\"() {",3127],["void testSomething() {",2779],["public static void main(String[] args) {",988],["void run() {",1013],["void up() {",1117],["protected void setUp() {",2174],["protected void tearDown() {",2026],["void apply(Project project) {",1643]],"useCount":106792},{"word":"waitFor","context":[["waitFor { at QuestionsHomePage }",216],["waitFor{at ConceptEditor}",261],["waitFor {",877],["waitFor(waitTime) {",1049],["waitFor { at HomePage }",1532],["waitFor { at ProjectHomePage }",691],["waitFor { at ConceptEditor }",662],["process.waitFor()",315],["waitFor {at HomePage}",306],["waitFor { at NavBarPage }",265]],"useCount":14278},{"word":"waitTime","context":[["waitFor(waitTime) { header.usernameInHeader.isDisplayed() }",33],["waitFor(waitTime) { page.cluster.resumebutton.isDisplayed() }",43],["waitTime = 10",44],["waitFor(waitTime) { page.overview.addProperty.isDisplayed() }",50],["waitFor(waitTime) { page.overview.cancel.isDisplayed() }",50],["waitFor(waitTime) { page.overview.save.isDisplayed() }",50],["waitFor(waitTime) { !page.overview.confirmyesbtn.isDisplayed() }",69],["waitFor(waitTime) { page.overview.securityValue.isDisplayed() }",88],["waitFor(waitTime){",104],["waitFor(waitTime) {",1049]],"useCount":2510},{"word":"war","context":[["//grails.project.war.file = \"target/${appName}-${appVersion}.war\"",873],["war: [maxMemory: 768, minMemory: 64, debug: false, maxPerm: 256, forkReserve:false],",537],["// configure settings for the run-war JVM",590],["grails.project.war.file = \"target/${appName}.war\"",73],["//grails.project.war.file = \"target/${appName}-${appVersion}.war\"",873],["apply plugin: 'war'",48],["grails.project.war.file = \"target/${appName}.war\"",73],["grails.war.resources = { stagingDir ->",45],["request.packaging = 'war'",36],["war()",34]],"useCount":3396},{"word":"warn","context":[["log 'warn'",225],["warn   'org.mortbay.log'",221],["log \"warn\"",359],["releaseChecksumPolicy[0].value() == 'warn'",46],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["log \"warn\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",591],["snapshotChecksumPolicy[0].value() == 'warn'",46],["log \"error\" // log level of Ivy resolver, either 'error', 'warn', 'info', 'debug' or 'verbose'",667],["log.warn(\"${jobName} has been cancelled\")",57],["warn  'griffon'",209]],"useCount":4039},{"word":"was","context":[["gitRevision(false) // Pass-through Git commit that was built",58],["This source was modified by Web Data Technologies LLP (www.webdatatechnologies.in) since 15 Nov 2015.",103],["*       with the Work to which such Contribution(s) was submitted. If You",98],["* file that was distributed with this source code.",83],["log.warn(\"User identified by id '$params.id' was not located\")",44],["6. Go to the path where the `lombok.jar` was copied. This path is either found",32],["* v.2.0. If a copy of the MPL was not distributed with this file, You can",31],["result.put(\"error\", \"No subject was selected\");",30],["//If the only thing submitted was \"ALL\" we return an empty string just like there was nothinbg in the box.",29],["// This script is executed by Grails after plugin was installed to project.",79]],"useCount":2378},{"word":"we","context":[["then: \"we should have the expected sequences\"",69],["// Attempt to clean up anything we created",85],["// Write out what we are writing to the script file",92],["//This is the list of patient_nums we return.",69],["// For now we leave x64 off of the name for compatibility with other jobs",48],["// Coreclr build we are trying to test",58],["// Zip up the tests directory so that we don't use so much space/time copying",52],["when: \"we request for the FASTA sequence\"",69],["//This is the SQL statement we run.",69],["//This is the SQL object we use to gather our data.",69]],"useCount":6110},{"word":"web","context":[["import org.springframework.web.bind.annotation.RequestMapping",802],["'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping",904],["* See the API for {@link grails.test.mixin.web.ControllerUnitTestMixin} for usage instructions",1420],["import org.springframework.web.bind.annotation.RequestMethod",516],["import org.springframework.web.bind.annotation.RestController",514],["'org.codehaus.groovy.grails.web.mapping',        // URL mapping",510],["'org.codehaus.groovy.grails.web.sitemesh',       // layouts",510],["'org.codehaus.groovy.grails.web.pages',          // GSP",509],["import org.codehaus.groovy.grails.web.json.JSONObject",472],["grails.web.disable.multipart=false",534]],"useCount":30241},{"word":"when","context":[["when:\"An invalid domain instance is passed to the update action\"",655],["when:\"The domain instance is passed to the delete action\"",656],["when:\"The save action is executed with a valid instance\"",656],["when:\"Update is called for a domain instance that doesn't exist\"",656],["when:\"The delete action is called for a null instance\"",656],["when:\"A domain instance is created\"",656],["when:\"A valid domain instance is passed to the update action\"",657],["when:\"The save action is executed with an invalid instance\"",658],["when:\"The index action is executed\"",661],["when:",119628]],"useCount":142924},{"word":"where","context":[["//The bin folder where to find the generated scripts.",99],["where",101],["where result_instance_id = ?)\"\"\";",107],["where:",19902],["int rowCount = UserRole.where {",95],["UserRole.where {",388],["// URL where source can be found",215],["// URL where documentation can be found",212],["* @param userContext who, where, why",161],["groupPath: 'some/where',",143]],"useCount":23416},{"word":"which","context":[["//\tstatic\tmappedBy\t= []\t// specifies which property should be used in a mapping",73],["*       with the Work to which such Contribution(s) was submitted. If You",98],["* @param sqp - the SqlQueryPage on which to run the query.",54],["* @param colHeaderFormat - the case in which you want the table's column",48],["// Additional scenario which can alter behavior",47],["//If the list of subids does not have any elements, or it has only one element which is \"ALL\"",46],["// use sorted map to be able to predict the order in which tag attributes are generated",140],["* which accompanies this distribution, and is available at",548],["*       form, that is based on (or derived from) the Work and for which the",98],["// by Gant (such as 'baseDir' which points on project base dir). You can",90]],"useCount":2941},{"word":"while","context":[["while (iter.hasNext()) {",97],["while (it.hasNext()) {",70],["while (true) {",786],["while(true) {",363],["while(count<numberOfTrials) {",985],["while read P PP;do",74],["while (rs.next()) {",181],["while (count < numberOfTrials) {",150],["while (i.hasNext())",80],["while (iterator.hasNext()) {",86]],"useCount":5291},{"word":"width","context":[["carouselTile(\"cameraDetails\", \"device.image\", width: 3, height: 2) { }",52],["* @attr width",158],["standardTile(\"switch\", \"device.switch\", width: 2, height: 2, canChangeIcon: true) {",129],["\"width\": 123,",74],["private hex(value, width=2) {",41],["Integer width",41],["width  = '64'",44],["while (s.size() < width) {",46],["multiAttributeTile(name:\"switch\", type: \"lighting\", width: 6, height: 4, canChangeIcon: true){",50],["valueTile(\"temperature\", \"device.temperature\", width: 2, height: 2) {",51]],"useCount":2264},{"word":"will","context":[["* @param regex URI paths that begin with a match for this regex will match",60],["// configuration for plugin testing - will not be included in the plugin zip",172],["The following nodes will become available on a View script upon installing this plugin",62],["* @param path URI paths that begin with this path will match",60],["// builds will do a couple extra steps.",56],["//This will be the array of text file locations.",52],["//This will be the array of image links.",50],["* @param printMessage Flag if client will print or not confirm message",45],["The following events will be triggered by this addon",41],["// these will be injected by Griffon",38]],"useCount":3497},{"word":"with","context":[["* distributed with this work for additional information",3045],["with(context.wrapperNodes[0]) {",658],["with(context.publisherNodes[0]) {",3044],["*  distributed with this work for additional information",2945],["* Redistribution and use in source and binary forms, with or without",1343],["with(context.stepNodes[0]) {",1210],["* Created with IntelliJ IDEA.",752],["then:\"The create view is rendered again with the correct model\"",676],["* documentation and/or other materials provided with the distribution.",673],["when:\"The save action is executed with an invalid instance\"",658]],"useCount":52730},{"word":"withFormat","context":[["return withFormat{",13],["request.withFormat {",3352],["all:           '*/*', // 'all' maps to '*' or the first available format in withFormat",275],["withFormat{",163],["all          : '*/*', // 'all' maps to '*' or the first available format in withFormat",29],["withFormat {",1044],["return withFormat {",29]],"useCount":4905},{"word":"without","context":[["* Redistribution and use in source and binary forms, with or without modification,",93],["given: \"a set model builder without a schema\"",65],["given: \"a record builder without a schema\"",59],["def 'call publishOverSsh without transferSet'() {",55],["def 'call publishOverSsh without server'() {",55],["def 'call publishOverSsh without sourceFiles and execCommand'() {",55],["*       Work or Derivative Works thereof in any medium, with or without",98],["// Redistribution and use in source and binary forms, with or without",120],["* Redistribution and use in source and binary forms, with or without",1343],["// as Windows_NT but without the tests.",46]],"useCount":3164},{"word":"work","context":[["*       represent, as a whole, an original work of authorship. For the purposes",98],["*  distributed with this work for additional information",2945],["*       \"Contribution\" shall mean any work of authorship, including",98],["*       \"Derivative Works\" shall mean any work, whether in Source or Object",98],["the work with Java classes.",108],["* agreements. See the NOTICE file distributed with this work",122],["grails.project.work.dir = 'target'",209],["grails.project.work.dir = \"target/work\"",482],["grails.project.work.dir = \"target/work\"",482],["* distributed with this work for additional information",3045]],"useCount":9054},{"word":"workflow","context":[["workflow: new Workflow(commands: [new CommandExec(adhocExecution: true, adhocRemoteString: 'a remote string')]).save()",160],["assertNotNull execution.workflow",60],["assertEquals 1, execution.workflow.commands.size()",60],["assertNotNull \"incorrect workflow\", cmd1",64],["assertNotNull \"incorrect workflow\", jobs[0].workflow",68],["assertNotNull \"incorrect workflow\", jobs[0].workflow",68],["BuildResult result = build('workflow')",78],["task workflow {",80],["workflow: new Workflow(keepgoing: true, commands: [new JobExec(",82],["workflow: new Workflow(",136]],"useCount":3829},{"word":"write","context":[["// If we are running a stress mode, we should write out the set of key",46],["assertEquals(\"sqoop import did not write expected data\",",48],["pw.write(\"<hr>\");",54],["dataWriter.write(\"SNP\\tChromosome\\tPhysicalPosition\");",54],["dataWriter.write(\"\\t\" + datasetName + \"\\t\" + datasetName + \" Call\");",54],["for (Write write : writes) {",55],["dataWriter.write(\"\\t2.0\\tNC\");",135],["records.add(write.record);",45],["dataWriter.write(\"\\n\");",259],["output.write(valueDelimiter);",181]],"useCount":4496},{"word":"writer","context":[["def builder = new MarkupBuilder(writer)",110],["writer.flush()",326],["StringWriter writer = new StringWriter()",323],["writer.close()",310],["def writer = out",95],["writer.toString()",107],["def writer = new StringWriter()",564],["writer.println()",115],["return writer.toString()",156],["def xml = new MarkupBuilder(writer)",182]],"useCount":5700},{"word":"ws","context":[["import javax.ws.rs.POST",86],["import javax.ws.rs.PathParam",81],["import javax.ws.rs.Path",266],["1 * jobManagement.requirePlugin('ws-cleanup')",96],["import javax.ws.rs.Consumes",123],["import javax.ws.rs.ext.Provider",208],["import javax.ws.rs.GET",224],["import javax.ws.rs.Produces",270],["import javax.ws.rs.core.Response",288],["import javax.ws.rs.core.MediaType",326]],"useCount":3037},{"word":"www","context":[["* http://www.eclipse.org/legal/epl-v10.html",555],["form:          'application/x-www-form-urlencoded',",480],["// TODO: grails.serverURL = \"http://www.changeme.com\"",466],["// web: www.droidmate.org",407],["form: 'application/x-www-form-urlencoded',",271],["//    def organization = [ name: \"My Company\", url: \"http://www.my-company.com/\" ]",194],["* Web:\t\thttp://www.nanocan.org",184],["* http://www.mi.fu-berlin.de/en/inf/groups/ag-csw/",165],["* http://www.corporate-semantic-web.de/",165],["* Web:\t\t\thttp://www.nanocan.org/miracle/",127]],"useCount":5526},{"word":"x","context":[["form:          'application/x-www-form-urlencoded',",480],["int x",290],["form: 'application/x-www-form-urlencoded',",271],["x",144],["def x = 1",131],["def x",131],["println x",130],["x++",111],["def x = 0",108],["assert x == null",93]],"useCount":11652},{"word":"x64","context":[["['x64'].each { architecture ->",53],["if (architecture != 'x64') {",304],["assert architecture == 'x64'",149],["if (architecture == 'x64') {",103],["// Only x64 for now",94],["if (architecture == 'x64' && configuration == 'Release') {",50],["// If the architecture is x64, do not add that info into the build name.",54],["// For windows, pull full test results and test drops for x86/x64",65],["if (architecture == 'x64' || !isPR) {",92],["case 'x64':",308]],"useCount":2258},{"word":"xml","context":[["html:          ['text/html','application/xhtml+xml'],",459],["import groovy.xml.MarkupBuilder",802],["def doWithWebDescriptor = { xml ->",483],["rss:           'application/rss+xml',",481],["atom:          'application/atom+xml',",480],["xml:           ['text/xml', 'application/xml']",450],["xml:           ['text/xml', 'application/xml']",450],["xml:           ['text/xml', 'application/xml']",450],["htmlcodec = 'xml' // use xml escaping instead of HTML4 escaping",444],["htmlcodec = 'xml' // use xml escaping instead of HTML4 escaping",444]],"useCount":26540},{"word":"y","context":[["def y",56],["int x, y",74],["def y = 2",55],[".nodeSelector(makeSelector(\"x y\", 1, false))",49],["this.y = y",39],["this.y = y",39],["private int x, y",37],["#$ -j y",37],["int y",77],["\"y\": 0,",78]],"useCount":2683},{"word":"you","context":[["*  if you need additional information or have any questions.",85],["// configure settings for compilation JVM, note that if you alter the Groovy version forked compilation is required",582],["// configure auto-caching of queries by default (if false you can cache individual queries with 'cache: true')",517],["assertContentContains 'you have ROLE_ADMIN'",226],["// For example you can create directory under project tree:",138],["// This script is a Gant script so you can use all special variables provided",90],["// These methods are called more than you think.  Internally, these cube call",42],["*\t\t3.\tTo clarify 1 and 2 above, if you use these modifications, it must be a free project, and",53],["assertContentContains \"Sorry, you're not authorized to view this page.\"",48],["* @param colHeaderFormat - the case in which you want the table's column",48]],"useCount":3275},{"word":"zwave","context":[["def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {",51],["zwave.basicV1.basicSet(value: 0xFF).format(),",52],["zwave.switchBinaryV1.switchBinaryGet().format(),",54],["zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()",55],["zwave.switchBinaryV1.switchBinaryGet().format()",62],["def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {",63],["def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {",65],["def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {",83],["def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {",95],["def zwaveEvent(physicalgraph.zwave.Command cmd) {",160]],"useCount":2884}]