[{"word":"A","context":[["fun(A) when is_atom(A) -> A end,",332],["fun(A) when is_atom(A) -> A end,",332],["fun(A) when is_atom(A) -> A end,",332],["case A of",392],["A.",435],["A",496],["A;",697],["%%   A list of key/value pairs, holding the test case configuration.",795],["xmerl:export([A],xmerl_test).",1781],["?line xmerl:export([A],xmerl_test).",7124]],"useCount":114809},{"word":"API","context":[["%% External API",442],["%% API",14547],["%% API functions",3310],["%% API Function Definitions",559],["%% Internal API",561],["%% API Function Exports",668],["%%% API functions",728],["%% API.",1145],["%% Public API",1420],["%%% API",4587]],"useCount":37786},{"word":"Acc","context":[["lists:reverse(Acc).",1215],["Acc",4044],["lists:reverse(Acc);",3874],["Acc.",2739],["{lists:reverse(Acc), Bytes};",2180],["| Acc]).",1978],["{lists:reverse(Acc),Bytes};",1259],["Acc;",7519],["_ -> Acc",899],["(_, Acc) ->",751]],"useCount":164934},{"word":"AccBytes","context":[["'enc_ActionRequest_commandRequests_components'([H|T],AccBytes, AccLen) ->",84],["'enc_StatisticsDescriptor_components'([], AccBytes, AccLen) ->",84],["'enc_TransactionResponseAck_components'(T,[EncBytes|AccBytes], AccLen + EncLen).",84],["'enc_TransactionReply_transactionResult_actionReplies_components'(T,[EncBytes|AccBytes], AccLen + EncLen).",84],["'enc_SeqSigList_signalList_components'([H|T],AccBytes, AccLen) ->",84],["'enc_ObservedEvent_eventParList_components'([], AccBytes, AccLen) ->",84],["AccBytes, AccLen) ->",116],["{dynamicsort_SETOF(AccBytes),AccLen};",120],["{lists:reverse(AccBytes), AccLen};",131],["{lists:reverse(AccBytes),AccLen};",3635]],"useCount":14319},{"word":"AccLen","context":[["{dynamicsort_SETOF(AccBytes),AccLen};",120],["{lists:reverse(AccBytes), AccLen};",131],["'enc_LocalControlDescriptor_propertyParms_components'([H|T],AccBytes, AccLen) ->",84],["'enc_TerminationID_wildcard_components'([H|T],AccBytes, AccLen) ->",84],["'enc_AmmRequest_descriptors_components'([], AccBytes, AccLen) ->",84],["'enc_ActionReply_commandReply_components'([H|T],AccBytes, AccLen) ->",84],["AccBytes, AccLen) ->",116],["AccLen + EncLen).",125],["AccLen) ->",129],["{lists:reverse(AccBytes),AccLen};",3635]],"useCount":14519},{"word":"Access","context":[["case acl:match_rule(Host, Access, From) of",151],["access = Access,",209],["create_node_permission(Host, ServerHost, Node, ParentNode, Owner, Access) ->",173],["Allow = acl:match_rule(LServer, Access, From),",90],["gen_fsm:start_link(?MODULE, [Host, ServerHost, Access, Room, HistorySize,",94],["Access = case lists:keysearch(access, 1, Opts) of",94],["Access = get_access(Host),",95],["Access     :: atom(),",96],["Access = get_access(global),",114],["case acl:match_rule(global, Access, From) of",150]],"useCount":8360},{"word":"Action","context":[["Action = fun(#pubsub_node{type = Type, id = NodeId}) ->",153],["case transaction(Host, Node, Action, sync_dirty) of",1546],["case Action of",462],["Action =",175],["Action = fun (#pubsub_node{type = Type, id = Nidx}) ->",158],["Action = fun (#pubsub_node{type = Type, id = NodeId}) ->",150],["action = Action,",141],["Action;",100],["all_tests(Action, Function, PostData, Response).",110],["case transaction(Host, Node, Action, transaction) of",140]],"useCount":13977},{"word":"Addr","context":[["Addr = undefined,",139],["Name = make_name(Addr, Port),",141],["{Addr, Port, Dir} = lookup_common(DirData),",135],["Addr;",127],["{ok, Addr} ->",109],["Addr = undefined, % Assumed to be on the same host",108],["Name = make_name(Addr, Port, Profile),",89],["Name = make_name(Addr,Port),",88],["serviceChangeAddress = Addr,",77],["inet_parse:ntoa(Addr);",75]],"useCount":8258},{"word":"Address","context":[["mod(Opts, Address);",60],["Xdata, Misc, Address, Instructions, Text, Last,",396],["Xdata, Misc, Address, Instructions, Text, Last, First,",220],["decode_register_els(_els, Zip, Misc, Address,",190],["address = Address,",128],["Address = {portNumber, ?DEFAULT_PORT},",106],["Zip, Misc, Address, Instructions, Text, Last, First,",100],["{ok, Address} ->",96],["Address :: string(),",76],["case Address of",67]],"useCount":6641},{"word":"Affiliation","context":[["{ok, Affiliation} -> Affiliation;",141],["set_affiliation(NodeId, Owner, Affiliation) ->",154],["case Affiliation of",378],["Affiliation = GenState#pubsub_state.affiliation,",112],["{ok, Affiliation} ->",113],["Affiliation;",114],["Affiliation = get_affiliation(JID, StateData),",129],["set_affiliation(Nidx, Owner, Affiliation) ->",139],["{ok, Affiliation} -> Affiliation;",141],["SAffiliation = affiliation_to_list(Affiliation),",144]],"useCount":6971},{"word":"Alice","context":[["F = fun(Alice, Bob) ->",200],["escalus:assert(is_iq_result, escalus:wait_for_stanza(Alice)),",215],["escalus:send(Alice, stanza_muc_enter_room(?config(room, Config), <<\"alice\">>)),",248],["escalus:story(Config, [{alice, 1}, {bob, 1}], fun(Alice, Bob) ->",251],["%% Alice joins room",252],["escalus:story(Config, [{alice, 1}], fun(Alice) ->",309],["[Alice | _] = ?config(escalus_users, Config),",359],["F = fun(Alice) ->",374],["escalus:wait_for_stanzas(Alice, 2),",388],["escalus:wait_for_stanza(Alice),",578]],"useCount":12039},{"word":"App","context":[["case application:start(App) of",402],["{error, {already_started, App}} ->",257],["end)(App)",111],["io_lib:format(\"~p.\\n\", [App]).",98],["App = {application, Name,",98],["App <-",92],["case code:lib_dir(App) of",92],["{ok, App} ->",80],["application:load(App),",74],["ensure_started(App) ->",264]],"useCount":8531},{"word":"Arg","context":[["new_do_shell_prompt(IO, N, Order, Arg, More);",54],["throw({error, {invalid_option_arg, {Name, Arg}}})",52],["element(3,Arg);",56],["Arg",73],["deliver_dyn_file(CliSock, Bin2, T, Arg, UT, N);",75],["'dialyzer-suppressions'(Arg) ->",76],["Arg.",103],["Arg;",153],["case Arg of",273],["Req = Arg#arg.req,",55]],"useCount":11892},{"word":"Args","context":[["%% @spec init(Args) -> {ok, State} |",888],["Args :: [term()].",239],["%% @spec init(Args) -> {ok, {SupFlags, [ChildSpec]}} |",244],["Arity = length(Args),",265],["case Args of",300],["%% Args:",364],["%% Args        \t: DB\t  - The Database",400],["init(Args) ->",524],["start_link(Args) ->",532],["%% Function: init(Args) -> {ok, State} |",880]],"useCount":48077},{"word":"Arity","context":[["case Arity of",57],["Arity = length(Args),",265],["Arity = length(As),",212],["Arity = length(A),",149],["yeccpars0([], {{fun M:F/Arity, A}, no_line}, 0, [], []).",140],["Arity :: arity().",120],["io:fwrite(\"Function: ~w/~w\\n\", [Name,Arity]),",92],["Arity = context_arity(Context),",88],["[TypeName, gen_type_paren(Arity)]);",63],["Arity :: arity(),",56]],"useCount":10185},{"word":"As","context":[["Ar = length(As),",95],["A = length(As),",142],["As ->",153],["As.",160],["Arity = length(As),",212],["visit_application_final(F, As, Tree, St0)",99],["%% Req. As many mibs all possible",92],["transform_spawn_call(F, As, Env, St);",88],["case As of",78],["decode_As(Vsn, As, setelement(AField, R, X), Flags, Tail2);",96]],"useCount":16261},{"word":"Attrs","context":[["{false, Attrs, StateData}",339],["Lang = xml:get_attr_s(<<\"xml:lang\">>, Attrs),",448],["case xml:get_attr_s(<<\"xmlns\">>, Attrs) of",521],["case xml:get_attr_s(<<\"type\">>, Attrs) of",624],["Attrs);",321],["{SRes, Attrs, State};",304],["case xml:get_attr_s(\"type\", Attrs) of",275],["Attrs),",264],["#xmlel{attrs = Attrs} = Packet,",237],["#xmlel{name = Name, attrs = Attrs,",211]],"useCount":25085},{"word":"Author","context":[["%%% Author  : Thorsten Schuett <schuett@zib.de>",110],["%%% Author  : Magnus Henoch <henoch@dtek.chalmers.se>",112],["%%% Author  : Badlop <badlop@process-one.net>",138],["%% Author  : Robert Virding",126],["%%% Author  : Ulf Angermann uaforum1@googlemail.com",148],["%%% Author  : Christophe Romain <christophe.romain@process-one.net>",145],["%%% Author  : Evgeniy Khramtsov <ekhramtsov@process-one.net>",142],["%%% Author  : Evgeniy Khramtsov <xram@jabber.ru>",141],["%%% Author  : Mickael Remond <mremond@process-one.net>",183],["%%% Author  : Alexey Shchepin <alexey@process-one.net>",2669]],"useCount":7411},{"word":"B","context":[["B;",580],["case B of",1394],["%% Sections: B.",1908],["fun(B) when is_boolean(B) -> B end,",266],["fun(B) when is_boolean(B) -> B end,",266],["fun(B) when is_boolean(B) -> B end,",266],["case tokenize(B, S) of",272],["B.",312],["IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,",390],["IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,",390]],"useCount":59314},{"word":"B1","context":[["{B1,B2,B3}.",63],["equiv(B1, B2) when is_binary(B1), is_binary(B2) -> B1 == B2;",61],["equiv(B1, B2) when is_binary(B1), is_binary(B2) -> B1 == B2;",61],["equiv(B1, B2) when is_binary(B1), is_binary(B2) -> B1 == B2;",61],["not_equal('DigitMapValue_digitMapBody', B1, B2)",60],["{ok,[{delay_send,B1}]}=inet:getopts(S,[delay_send]),",54],["[B1|T];",51],["encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->",46],["B1,",220],["encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->",46]],"useCount":7006},{"word":"BadOpt","context":[["(BadOpt, _) -> erlang:error({badoption, BadOpt}) end,",3443],["(BadOpt, _) -> erlang:error({badoption, BadOpt}) end,",3443]],"useCount":6886},{"word":"Base","context":[["D = I0 rem Base,",60],["Base = State#state.base,",62],["I1 = I0 div Base,",62],["Base :: 2..36.",66],["Base = get_base_path(Host, cluster),",66],["hipe_rtl:mk_store(Base, TmpOffset, Tmp1, byte),",72],["make_menu_items(Lang, {Base, <<\"\">>, HookItems});",78],["Base ->",78],["L = build_iolist(N div 2, Base),",56],["Base;",54]],"useCount":7903},{"word":"Bin","context":[["case Bin of",977],["case decode_tag_and_length(Bin) of",435],["{ok, Bin};",514],["Bin.",670],["fix_convertor_utils:bin_to_num(Bin);",768],["binary_to_list(Bin);",863],["Bin;",896],["Bin when is_binary(Bin) ->",955],["{ok, Bin} ->",1243],["Bin when is_binary(Bin) ->",955]],"useCount":41733},{"word":"Binary","context":[["?BIN_LIB:decode_message(EC, Binary, AsnMod, TransMod, binary);",226],["Binary ->",72],["Binary when is_binary(Binary) ->",103],["Binary when is_binary(Binary) ->",103],["Binary;",106],["Binary.",115],["Binary :: binary(),",131],["{ok, Binary} ->",204],["Binary :: binary().",77],["case Binary of",91]],"useCount":6330},{"word":"Bob","context":[["F = fun(Alice, Bob) ->",200],["escalus:wait_for_stanza(Bob),",544],["%% @author Bob Ippolito <bob@mochimedia.com>",425],["escalus:send(Bob, stanza_muc_enter_room(?config(room, Config), <<\"bob\">>)),",364],["%% Bob joins room",360],["escalus:wait_for_stanzas(Bob, 3),",353],["escalus:wait_for_stanzas(Bob, 2),",268],["escalus:story(Config, [{alice, 1}, {bob, 1}], fun(Alice, Bob) ->",251],["escalus_assert:has_no_stanzas(Bob),",164],["escalus:story(Config, [{alice, 1}, {bob, 1}, {kate, 1}], fun(Alice, Bob, Kate) ->",177]],"useCount":9631},{"word":"Body","context":[["case Body of",748],["Body;",433],["Body =",404],["{ok, Body} ->",345],["throw({error, {invalid_messageBody, Body}})",268],["Body",185],["{ok, Body};",145],["messageBody = Body},",165],["Body.",151],["Body ->",127]],"useCount":23707},{"word":"Bool","context":[["%%\tkeyrelease\t\t[Bool | {Bool, Data}]",93],["%%\tkeypress\t\t[Bool | {Bool, Data}]",93],["%%\tkeypress\t\t[Bool | {Bool, Data}]",93],["%%\tbuttonrelease\t\t[Bool | {Bool, Data}]",93],["%%\tenter\t\t\t[Bool | {Bool, Data}]",93],["%%\tkeyrelease\t\t[Bool | {Bool, Data}]",93],["%%\tbuttonpress\t\t[Bool | {Bool, Data}]",93],["%%\tenter\t\t\t[Bool | {Bool, Data}]",93],["%%\tbuttonpress\t\t[Bool | {Bool, Data}]",93],["case is_bool(Bool) of",376]],"useCount":6140},{"word":"Bs","context":[["?line Be = Bs,",40],["{match,Bs};",40],["expand_parts(T, Bs, [Val|Ack]);",36],["binding(Name,Bs);",42],["choose(Bs,Acc, ArchiveExt);",42],["bindir = Bs,",55],["<<Bs:Sz/bits,_/bits>> = Bs0,",75],["Bs;",254],["Bs",76],["{match,Bs} ->",45]],"useCount":6112},{"word":"Buf1","context":[["{V1@V0,V1@Buf1} = case Bytes1 of",414],["<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,",375],["{{asn1_ExtAlt,V2@V0},V2@Buf1}",381],["{V3@V0,V3@Buf1}",417],["{V2@V0,V2@Buf1} = case Bytes2 of",446],["<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,",464],["{V2@V0,V2@Buf1}",1344],["{V1@V0,V1@Buf1} = case Bytes of",1558],["<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,",1823],["{V1@V0,V1@Buf1}",3417]],"useCount":24555},{"word":"Buf2","context":[["<<1:1,V5@Buf2/bitstring>> ->",365],["{V5@V3,V5@Buf4} = case V5@Buf2 of",365],["V4@Pad6 = bit_size(V4@Buf2) band 7,",375],["<<1:1,V4@Buf2/bitstring>> ->",414],["{V4@V3,V4@Buf4} = case V4@Buf2 of",414],["V1@Pad6 = bit_size(V1@Buf2) band 7,",381],["<<1:1,V3@Buf2/bitstring>> ->",543],["<<1:1,V1@Buf2/bitstring>> ->",641],["{V1@V3,V1@Buf4} = case V1@Buf2 of",641],["{V3@V3,V3@Buf4} = case V3@Buf2 of",543]],"useCount":6841},{"word":"Buf4","context":[["<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->",381],["<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,",381],["{V4@V3,V4@Buf4}",384],["{V4@V3,V4@Buf4} = case V4@Buf2 of",414],["{V3@Add5,V3@Buf4};",423],["<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->",423],["{V3@V3,V3@Buf4} = case V3@Buf2 of",543],["{V3@V3,V3@Buf4}",574],["{V1@V3,V1@Buf4} = case V1@Buf2 of",641],["{V1@V3,V1@Buf4};",381]],"useCount":11524},{"word":"Buf7","context":[["<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->",123],["{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),",123],["<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,",260],["{V1@V6,V1@Buf7} = case V1@Buf5 of",260],["<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->",260],["{V1@V6,V1@Buf7};",260],["{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),",445],["<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->",449],["<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->",1222],["{V1@V6,V1@Buf7}",1226]],"useCount":7275},{"word":"Buf9","context":[["{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),",445],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["{V3@V8,V3@Buf9};",435],["<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->",381],["<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->",375],["{V5@V8,V5@Buf9};",365],["{V4@V8,V4@Buf9};",453],["{V1@V8,V1@Buf9};",489],["{V2@V8,V2@Buf9};",609],["{V2@V8,V2@Buf9}",449]],"useCount":8604},{"word":"Buffer","context":[["Buffer/binary>>) ->",81],["Bytes2 = align(Buffer),",53],["decode_length(Buffer) ->",56],["case Buffer of",129],["case match_and_collect(Buffer, Tags) of",56],["%% Buffer early messages",59],["buffer = Buffer,",61],["%%    (Buffer, Range, HasTag, TotalLen) -> {String, Remain, RemovedBytes}",64],["case getbit(Buffer) of",70],["nomatch when byte_size(Buffer) > MaxLength ->",75]],"useCount":6205},{"word":"Bytes","context":[["{lists:reverse(Acc), Bytes};",2180],["{Ext,Bytes1} = ?RT_PER:getext(Bytes),",2700],["{V1@V0,V1@Buf1} = case Bytes of",1558],["V1@Pad3 = bit_size(Bytes) band 7,",1298],["{lists:reverse(Acc),Bytes};",1259],["case Bytes of",695],["Tlv = tlv_format(Bytes),",674],["{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),",2152],["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,",1823]],"useCount":73318},{"word":"Bytes1","context":[["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),",2152],["{Ext,Bytes1} = ?RT_PER:getext(Bytes),",2700],["{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),",522],["{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),",477],["<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,",464],["{Ext,Bytes1} = begin",1517],["{Ext,Bytes1} = ?RT_PER:getbit(Bytes),",666],["{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),",1351],["{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),",828]],"useCount":29630},{"word":"Bytes2","context":[["{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),",828],["{asn1_NOVALUE,Bytes2}",804],["{Opt,Bytes2} = begin",1087],["{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),",1351],["0 ->{asn1_NOVALUE,Bytes2}",1405],["{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),",477],["{V2@V0,V2@Buf1} = case Bytes2 of",446],["_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}",444],["{Choice,Bytes2} =",762],["{Term1,Bytes2} = begin",504]],"useCount":28200},{"word":"Bytes3","context":[["0 -> {<<>>,Bytes3};",289],["0 ->{asn1_NOVALUE,Bytes3}",1584],["{Term1,Bytes3,Rb2} = case Bytes2 of",346],["{Term1,Bytes3} = case Opt band (1 bsl 2) of",369],["{Term1,Bytes3} = begin",389],["{Term2,Bytes3} = case Opt band (1 bsl 0) of",423],["{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),",513],["{Term2,Bytes4,Rb3} = case Bytes3 of",682],["{ asn1_NOVALUE, Bytes3, 0 }",680],["{asn1_NOVALUE,Bytes3}",926]],"useCount":18192},{"word":"Bytes4","context":[["{ asn1_NOVALUE, Bytes4, 0 }",477],["Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)",450],["{Term2,Bytes4,Rb3} = case Bytes3 of",682],["{Term2,Bytes4} = case Opt band (1 bsl 0) of",477],["{Term3,Bytes5,Rb4} = case Bytes4 of",477],["{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),",513],["{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),",603],["{Term2,Bytes4} = case Opt band (1 bsl 1) of",684],["{asn1_NOVALUE,Bytes4}",785],["0 ->{asn1_NOVALUE,Bytes4}",1215]],"useCount":14885},{"word":"Bytes5","context":[["Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)",450],["{Term3,Bytes5} = case Opt band (1 bsl 0) of",954],["{Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),",330],["{Extensions,Bytes5} = case Ext of",342],["{Term3,Bytes5,Rb4} = case Bytes4 of",477],["0 -> {<<>>,Bytes5};",500],["{Term3,Bytes5} = case Opt band 1 of",531],["Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)",540],["{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),",603],["{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),",900]],"useCount":12336},{"word":"Bytes6","context":[["{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),",369],["{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),",900],["Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)",684],["Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)",540],["Bytes6= skipextensions(Bytes5, 1, Extensions),",306],["{Extensions,Bytes6} = case Ext of",500],["{asn1_NOVALUE,Bytes6}",432],["Bytes7= skipextensions(Bytes6, 1, Extensions),",380],["{Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),",240],["{TmpVal4,Trem4}=?RT_PER:decode_open_type(Bytes6,[]),",216]],"useCount":8753},{"word":"BytesSoFar","context":[["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],",86],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],",365],["BytesSoFar = [EncBytes1],",454],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],",979],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],",1603],["?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).",2652],["encode_tags(TagIn, BytesSoFar, LenSoFar).",3455],["BytesSoFar = [EncBytes1, EncBytes2],",3580],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],",80]],"useCount":15061},{"word":"C","context":[["fun(C) ->",913],["C ->",259],["?C(<<\" \">>),",266],["<<_:O/binary, C, _/binary>> when C >= $0 andalso C =< $9 ->",272],["<<_:O/binary, C, _/binary>> when C >= $0 andalso C =< $9 ->",272],["<<_:O/binary, C, _/binary>> when C >= $0 andalso C =< $9 ->",272],["case is_name_start(C) of",375],["C.",435],["C;",507],["case C of",1045]],"useCount":107476},{"word":"C1","context":[["C2 = lists:keydelete(vsn, 1, C1),",129],["if 1 =< C1, C1 =< 64 ->",127],["fload(FD, server_auth, GC, C1, Lno+1, ?NEXTLINE);",130],["if C1 =:= 2 ->",270],["lists:keydelete(vsn, 1, C1).",322],["fload(FD, server, GC, C1, Lno+1, ?NEXTLINE);",432],["delete_files(C1),",451],["C1 = stop_agent(Config),",451],["if C1 =:= 4 ->",545],["C1 = byte_size(Val1),",1305]],"useCount":13134},{"word":"C2","context":[["C2 >= 128, C2 =< 191 ->",103],["C2 = byte_size(Val2),",205],["C2 >= 128, C2 =< 191 ->",103],["C2);",108],["fload(FD, server, GC, C2, Cs, Lno+1, Next);",290],["lists:keydelete(agent_opts, 1, C2).",215],["C2 band 16#C0 =:= 16#80,",110],["C2 = lists:keydelete(vsn, 1, C1),",129],["C2 >= 128, C2 =< 191,",206],["C2 >= 128, C2 =< 191,",206]],"useCount":7404},{"word":"CLASS","context":[["?CLASS(ParentT,wxWindow),",1037],["?CLASS(ThisT,wxTreeCtrl),",560],["?CLASS(ThisT,wxDC),",609],["?CLASS(ThisT,wxListCtrl),",639],["?CLASS(ThisT,wxTextCtrl),",382],["?CLASS(ThisT,wxImage),",420],["?CLASS(ThisT,wxAuiPaneInfo),",521],["?CLASS(ThisT,wxStyledTextCtrl),",3521],["?CLASS(ThisT,wxGrid),",1432],["?CLASS(ThisT,wxWindow),",1275]],"useCount":23871},{"word":"CR","context":[["CR    = cre_cmdReq(CMD),",245],["case CR of",574],["cre_actionReq(Cid, [CR]).",482],["CR =",399],["msg71b(CR).",390],["CR    = cre_cmdReply(SCR),",194],["#'CommandRequest'{command = Cmd} = CR,",152],["cre_actionReply(Cid, [CR]).",312],["CR      = cre_cmdReq(CMD),",259],["CR    = cre_cmdReply(NR),",148]],"useCount":7323},{"word":"CSock","context":[["socket:active_once(CSock),",1360],["fun({CSock, _Pid}) ->",312],["receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,",272],["receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,",272],["receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,",262],["receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,",262],["socket:send(CSock, \"EHLO somehost.com\\r\\n\"),",220],["{tcp, CSock, \"250-\"++_Packet3} ->",189],["{tcp, CSock, _} ->",171],["{tcp, CSock, \"250 \"++_Packet3} ->",180]],"useCount":6448},{"word":"Case","context":[["\"~n   Case:   ~p\"",81],["init_per_testcase(Case, Config) when is_list(Config) ->",80],["init_per_testcase(Case, Config) when is_atom(Case), is_list(Config) ->",80],["t(Case) -> megaco_test_lib:t({?MODULE, Case}).",119],["t(Case) -> megaco_test_lib:t({?MODULE, Case}).",119],["end_per_testcase(Case, Config) ->",236],["megaco_test_lib:end_per_testcase(Case, Config).",98],["%% Case - atom()",304],["init_per_testcase(Case, Config) ->",406],["%% Test Case",10884]],"useCount":17553},{"word":"Cat","context":[["yeccpars2_15(_S, Cat, Ss, Stack, T, Ts, Tzr);",830],["yeccpars2_18(_S, Cat, Ss, Stack, T, Ts, Tzr);",863],["yeccpars2_21(_S, Cat, Ss, Stack, T, Ts, Tzr);",969],["yeccpars2_cont_4(S, Cat, Ss, Stack, T, Ts, Tzr).",1005],["yeccpars2_22(_S, Cat, Ss, Stack, T, Ts, Tzr);",1015],["yeccpars2_17(17, Cat, Ss, Stack, T, Ts, Tzr);",815],["yeccpars2_26(_S, Cat, Ss, Stack, T, Ts, Tzr);",837],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284]],"useCount":316106},{"word":"Cdata","context":[["Cdata.",1039],["Cdata) ->",1455],["<<Cdata/binary, _data/binary>>);",1282],["[{xmlcdata, _data} | _els], Cdata) ->",1041],["[_ | _els], Cdata) ->",927],["Cdata).",827],["_els, Cdata).",196],["_els, <<Cdata/binary, _data/binary>>);",196],["[], Cdata) ->",119],["decode_value_els(__TopXMLNS, __IgnoreEls, _els, Cdata,",33]],"useCount":11838},{"word":"Check","context":[["%% @doc Check if the user and password can login in server.",139],["%% Check if privacy rules allow this delivery",108],["[\"Check that you can block an active server. The strategy \"",76],["\"Check the ejabberd guide for details about changing the~n\"",71],["ticket_check_decode_only_error_reason(R, Check).",70],["%% @doc <p>Check if a notification must be delivered or not based on",69],["case Check of",69],["%% @doc Check if this non participant can send message to room.",63],["%% Check from attributes",62],["[\"Check that you can block/unblock an idle server. The strategy \"",57]],"useCount":7302},{"word":"Child","context":[["removeChild(This,Child) -> wxWindow:removeChild(This,Child).",606],["case do_start_child(State#state.name, Child) of",72],["Child =",62],["removeChild(This,Child) -> wxWindow:removeChild(This,Child).",606],["%% Child :: {Id,StartFunc,Restart,Shutdown,Type,Modules}",285],["NState = replace_child(Child#child{pid = Pid}, State),",96],["wait_dynamic_children(Child, ?SETS:del_element(Pid, Pids), Sz-1,",91],["{ok, Child} ->",82],["NState = state_del_child(Child, State),",73],["Child = spawn_link(",65]],"useCount":6605},{"word":"Cindex1","context":[["{EncBytes1,EncLen1} = ?RT_BER:encode_octet_string([], Cindex1, [<<128>>]),",620],["{_,Cindex1} = Val,",357],["{EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),",435],["{EncBytes1,EncLen1} = 'enc_TerminationIDList'(Cindex1, [<<160>>]),",484],["{EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<128>>]),",510],["{EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),",625],["{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,",779],["{_,Cindex1, Cindex2} = Val,",2709],["{EncBytes1,EncLen1} =  case Cindex1 of",1367],["{_,Cindex1, Cindex2, Cindex3} = Val,",1205]],"useCount":13073},{"word":"Cindex2","context":[["{EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),",145],["{_,Cindex1, Cindex2, Cindex3} = Val,",1205],["{_,Cindex1, Cindex2} = Val,",2709],["{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,",779],["?RT_BER:encode_integer([], Cindex2, [<<129>>])",420],["encode_integer(Cindex2, [<<129>>])",355],["{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,",287],["{EncBytes2,EncLen2} =  case Cindex2 of",2709],["{_, Cindex1, Cindex2} = Val,",233],["?RT_BER:encode_null(Cindex2, [<<129>>])",168]],"useCount":13587},{"word":"Cindex3","context":[["{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,",287],["?RT_BER:encode_integer([], Cindex3, [<<130>>])",150],["{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,",779],["?RT_BER:encode_null(Cindex3, [<<130>>])",138],["{_,Cindex1, Cindex2, Cindex3} = Val,",1205],["{EncBytes3,EncLen3} =  case Cindex3 of",1855],["'enc_NonStandardData'(Cindex3, [<<162>>])",132],["encode_integer(Cindex3, [<<130>>])",130],["encode_null(Cindex3, [<<130>>])",115],["{_, Cindex1, Cindex2, Cindex3} = Val,",113]],"useCount":7108},{"word":"Class","context":[["Class:Exception when Class =:= error; Class =:= exit ->",162],["Class:Exception when Class =:= error; Class =:= exit ->",162],["Class:Exception when Class =:= error; Class =:= exit ->",162],["Class:Reason ->",522],["catch Class:Reason ->",645],["Adr, Class, Categories, Desc, Uid, Prodid, Jabberid,",836],["erlang:raise(Class, Reason, Stacktrace)",155],["Mailer, Adr, Class, Categories, Desc, Uid, Prodid,",211],["decode_vcard_els(_els, Mailer, Adr, Class, Categories,",275],["Class:Error ->",276]],"useCount":9158},{"word":"Client","context":[["ssl_test_lib:close(Client).",1435],["Client = ssl_test_lib:start_client([{node, ServerNode}, {port, Port},",449],["when is_map(Client), is_map(Input) ->",523],["when is_map(Client), is_map(Input), is_list(Options) ->",523],["Client = ?config(client, Config),",725],["ssl_test_lib:check_result(Server, ok, Client, ok),",938],["Client = ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",1201],["[self(), Client, Server]),",409],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400],["ssl_test_lib:close(Client),",355]],"useCount":17614},{"word":"ClientNode","context":[["ssl_test_lib:start_client([{node, ClientNode},",342],["ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",249],["{ClientNode, _, Hostname} = ssl_test_lib:run_where(Config),",163],["?line {ServerNode, ClientNode} = start_client_and_server(),",149],["Client = ssl_test_lib:start_client_error([{node, ClientNode}, {port, Port},",146],["{ok, ClientNode, _ClientHost} =",145],["orber_test_lib:remote_apply(ClientNode, corba, string_to_object,",99],["Server = ssl_test_lib:start_server([{node, ClientNode}, {port, 0},",449],["Client = ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",1201],["{ClientNode, ServerNode, Hostname} = ssl_test_lib:run_where(Config),",2430]],"useCount":6729},{"word":"Cmd","context":[["ED3       = cre_ErrDesc(Cmd),",120],["case Cmd of",439],["Cmd =",255],["{notifyReq, NR} = Cmd,",175],["#'CommandRequest'{command = Cmd} = CR,",152],["[SSHRef,ref(Srv,SSHRef),mod(Cmd)]),",125],["Err = {invalid_command, Cmd},",84],["Cmd when is_list(Cmd) ->",93],["Cmd when is_list(Cmd) ->",93],["Err3      = {invalid_command, Cmd},",120]],"useCount":7919},{"word":"Code","context":[["%% The Initial Developer of the Original Code is GoPivotal, Inc.",171],["{halt, Code} -> respond(Code);",163],["{halt, Code} -> respond(Code);",163],["%% The Original Code is RabbitMQ.",176],["case Code of",309],["%%% The Initial Developer of the Original Code is Eötvös Loránd University.",358],["%%% The Original Code is RefactorErl.",366],["%%% The Initial Developer of the Original Code is ProcessOne.",422],["%% The Initial Developer of the Original Code is Ericsson AB.",646],["%% The Initial Developer of the Original Code is Ericsson Utvecklings AB.",1133]],"useCount":18734},{"word":"Col","context":[["{more,{Cs,Col,Toks,Line,[],fun scan/6}};",182],["when is_integer(Row),is_integer(Col) ->",180],["{Col1, Delta1} = ?NEXT_COL(Col, Delta, 1),",128],["Attrs = attributes(Line, Col, St, Ncs),",60],["when is_integer(Col) ->",103],["This::wxGrid(), Row::integer(), Col::integer().",112],["column = Col",114],["<<ThisRef:32/?UI,Row:32/?UI,Col:32/?UI>>).",126],["{Yline, Col + if Dline =:= 0 -> Column; true -> 1 end};",124],["Col = byte_size(lists:last(Parts)),",124]],"useCount":9864},{"word":"Command","context":[["case Command of",103],["fun(Command) ->",125],["encode_disp('Command',Data) -> 'enc_Command'(Data);",150],["#'CommandRequest'{command = Command} ->",234],["Command;",240],["decode_disp('Command',Data) -> 'dec_Command'(Data);",96],["Command ->",92],["io_lib:format(\"Command to kill this process: kill ~s ~w\",",90],["%%  Command",84],["run_sql_cmd(Command, From, State, Timestamp);",84]],"useCount":6076},{"word":"Conf","context":[["ConfDir = ?config(manager_conf_dir, Conf),",215],["DbDir = ?config(manager_db_dir, Conf),",185],["[?EC_V3,Conf], B) of",160],["Conf.",160],["OldProto =  Conf#config.proto_opts,",125],["lists:foldl( fun parse/2, Conf#config{proto_opts=NewProto},",125],["Decode = fun(B) -> decode_message(Codec, false, Conf, B) end,",140],["Conf = flex_scanner_conf(Config),",1264],["Dir = ?privdir(Conf),",351],["PrivDir = priv_dir(Conf),",242]],"useCount":10847},{"word":"Config","context":[["init_per_group(_GroupName, Config) ->",3082],["{ClientNode, ServerNode, Hostname} = ssl_test_lib:run_where(Config),",2430],["Config;",2543],["end_per_group(_GroupName, Config) ->",2921],["?ACQUIRE_NODES(1, Config),",3733],["init_per_suite(Config) ->",4683],["?line file:set_cwd(?config(data_dir,Config)),",7211],["?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",8015],["Config.",13754],["{_SaNode, _MgrNode, _MibDir} = init_case(Config),",2024]],"useCount":298921},{"word":"Config1","context":[["Config1 = start_room(Config, Alice, <<\"alicesroom\">>, <<\"alice\">>, []),",132],["%% Config0 = Config1 = [tuple()]",1915],["%%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}",814],["%%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}",814],["%%               void() | {save_config,Config1}",431],["escalus:init_per_testcase(CaseName, Config1);",336],["%% Function: end_per_suite(Config0) -> void() | {save_config,Config1}",214],["AliceSpec = given_fresh_spec(Config1, alice),",185],["%%      Config0 = Config1 = [tuple()]",165],["%%      {save_config, Config1} | {skip_and_save, Reason, Config1}",123]],"useCount":8407},{"word":"Connection","context":[["\"Connection: Upgrade\\r\\n\"",221],["{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),",183],["Connection) ->",165],["protocol_cb = Connection,",110],["{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),",183],["%%%      Connection = ct_telnet:connection()",81],["\"Connection: ~p~n\"",88],["RespConn = response_connection(Headers, Connection),",96],["{{replies, [Reply]}, Connection};",96],["case get_handle(Connection) of",109]],"useCount":9758},{"word":"Content","context":[["{ok, Content} ->",74],["< Content-Type: application/json",65],["\"Content-type: text/plain\\r\\nContent-length: 14\\r\\n\\r\\n\"",72],["Content = case get_option(NodeOptions, deliver_payloads) of",126],["%% @doc Receive the body of the HTTP request (defined by Content-Length).",117],["\"Content-Type: text/plain\\r\\n\"",106],["case Content of",95],["\"Content-Type: application/sdp\\r\\n\"",71],["{Content, ReqData, Context}.",73],["[E#xmlElement{content=Content}];",80]],"useCount":9221},{"word":"Context","context":[["Context = - {",736],["{false, ReqData, Context}.",650],["{true, ReqData, Context}.",449],["Context = 2000 {",384],["Context = 5000 {",224],["{undefined, ReqData, Context}.",217],["content_types_provided(ReqData, Context) ->",210],["Context;",173],["allowed_methods(ReqData, Context) ->",167],["{[], ReqData, Context}.",165]],"useCount":14679},{"word":"Count","context":[["Count;",250],["SSL, Count+1);",203],["Count.",151],["case Count of",145],["Count",105],["Count = if MaxOfflineMsgs =/= infinity ->",101],["{NextLine, Count} = get_number(Rest),",76],["{updated, Count} = odbc:param_query(Ref, \"INSERT INTO \" ++ Table ++",77],["take_without_spaces(Tail, Count, Acc);",92],["true = odbc_test_lib:check_row_count(2, Count),",98]],"useCount":9290},{"word":"Cs","context":[["fload(FD, GC, Cs, Lno+1, ?NEXTLINE);",113],["Tab = Cs#cstruct.name,",321],["fload(FD, server, GC, C2, Cs, Lno+1, Next);",290],["C, Cs, Lno+1, Next);",240],["Cs = mnesia_schema:list2cs(TabDef),",202],["{more,{Cs,Col,Toks,Line,[],fun scan/6}};",182],["Cs ->",166],["Cs = list2cs(TabDef),",128],["ensure_active(Cs),",124],["Cs = incr_version(val({Tab, cstruct})),",121]],"useCount":26302},{"word":"Ctx","context":[["{false, RD, Ctx}",83],["Ctx};",77],["Ctx.",73],["validate_bs_get(Fail, Ctx, Live, Dst, Vst);",84],["content_types_provided(RD, Ctx) ->",99],["{true, RD, Ctx};",108],["invoke_pi_reply(PI, Obj, Ctx, Func, {'EXCEPTION', Exc}),",72],["Ctx}",110],["top_down -> Fun(ST, Ctx);",381],["bottom_up -> Ctx",382]],"useCount":7227},{"word":"D","context":[["btb_reaches_match_1(Is, Regs, D);",107],["handle_connection_msg(Msg, StateName, D);",112],["fun(D) ->",114],["{\"C\", [{\"D\", \"2\", []}]}]}",117],["D ->",123],["D;",508],["live_opt(Is, Regs, D, [I|Acc]);",319],["\"D  = [0-9]\\n\"",256],["D.",244],["D",214]],"useCount":33966},{"word":"DBG","context":[["?DBG(\"loop_it_2 -> ~n\"",102],["?DBG(\"await response\",[]),",401],["?DBG(\"snmp_standard_mib -> std_mib_a\", []),",98],["?DBG(\"sa_register -> unload mibs\", []),",98],["?DBG(\"varm_mib_start -> stop the agent\", []),",86],["?DBG(\"loop_mib_1 -> entry\",[]),",74],["\"*DBG* ~p got timer ~p in state ~w~n\",",70],["?DBG(\"ma_v2_inform -> await notification\",[]),",68],["?DBG(\"ma_v2_inform -> send notification: testTrapv22\",[]),",68],["?DBG(\"ma_v2_inform -> await targets\",[]),",68]],"useCount":11708},{"word":"DEBUG","context":[["?DEBUG(\"sending to process ~p~n\", [Pid]),",181],["?DEBUG(\"restarted: ~p\", [{StateData#state.myname,",69],["%%-define(DEBUG, true).",72],["?DEBUG(\"C2: ~p~n\", [LIJID]),",85],["?DEBUG(\"C1: ~p~n\", [LIJID]),",85],["?DEBUG(\"presence_update(~p,~n\\t~p,~n\\t~p)\",",85],["?DEBUG(\"query: ~p\", [Query]),",166],["-ifdef(DEBUG).",503],["?DEBUG(\"Send XML on stream = ~p\", [Text]),",111],["?DEBUG(\"from unavail = ~p~n\", [FromUnavail]),",85]],"useCount":10160},{"word":"Data","context":[["Data = \"From openssl to erlang\",",345],["{ok, Data} ->",1408],["case Data of",900],["Data;",674],["Data ->",427],["Data.",396],["data = Data",231],["{Port, {data, Data}} ->",274],["Data",368],["Data) ->",273]],"useCount":144352},{"word":"DataDir","context":[["DataDir = proplists:get_value(data_dir, Config),",514],["?line DataDir = ?config(data_dir, Config),",279],["DataDir = ?config(data_dir, Config),",1744],["DataDir = ?config(data_dir,Config),",696],["{ok,Client} = open_success(DataDir),",246],["?line DataDir = ?config(data_dir,Config),",201],["DataDir = filename:absname(?copydir),",195],["\"-I\" ++ DataDir}] ),",110],["fname([DataDir, lib, kernel, ebin]),",101],["fname([DataDir, lib, stdlib, ebin]),",101]],"useCount":7555},{"word":"Db","context":[["Db;",64],["}=Req, Db, DDoc) ->",65],["Db,",67],["couch_db:close(Db)",69],["{ok, Info} = couch_db:get_db_info(Db),",82],["{ok, Db} = couch_db:open_int(DbName, []),",103],["couch_db:close(Db),",180],["{ok, Db} ->",221],["Db = State#state.db,",63],["} = Db,",57]],"useCount":10653},{"word":"Default","context":[["Default.",148],["_ -> Default",281],["case lists:keysearch(Default, 1, Lists) of",168],["parse_header(Name, Req, Default,",181],["Default;",865],["undefined -> Default;",196],["false -> Default",207],["Default",737],["% Default timetrap timeout (set in init_per_testcase).",153],["case Default of",129]],"useCount":12622},{"word":"Desc","context":[["Desc, Uid, Prodid, Jabberid, Sound, Note, Role,",251],["Desc       = cre_ObsEvsDesc(1235,[Event]),",78],["desc = Desc,",92],["{item, Desc} ->",92],["Desc = get_content(description, Es),",113],["description = Desc,",134],["Desc ->",185],["Mailer, Adr, Class, Categories, Desc, Uid, Prodid,",211],["erlang:raise(error, {yecc_bug, ?CODE_VERSION, Desc},",221],["Adr, Class, Categories, Desc, Uid, Prodid, Jabberid,",836]],"useCount":7308},{"word":"Description","context":[["%% Description: Handling cast messages",1159],["%% Description: Handling call messages",1119],["%% Description: Convert process state when code is changed",1100],["%%% Description :",1071],["%% Description: Starts the server",994],["%% Description: This function is called by a gen_server when it is about to",931],["%% Description: Shutdown the server",293],["%% Description:",3753],["%% Description: Initiates the server",1203],["%% Description: Handling all non call/cast messages",1167]],"useCount":23152},{"word":"Dir","context":[["Dir = ?config(priv_dir, Config),",175],["case file:list_dir(Dir) of",508],["Dir ->",454],["Dir = ?privdir(Conf),",351],["Dir = ?privdir,",188],["case Dir of",188],["Dir",186],["{ok, Dir} = file:get_cwd(),",186],["Dir.",180],["case filelib:is_dir(Dir) of",146]],"useCount":32034},{"word":"Doc","context":[["Doc),",60],["Doc ->",53],["{ok, Doc} ->",1835],["Doc",245],["Doc;",140],["erlcloud_xml:decode(Attributes, Doc).",100],["Doc = couch_doc:from_json_obj({[",77],["transfer_fields(Rest, Doc);",68],["case couch_doc:has_stubs(Doc) of",67],["validate_attachment_names(Doc),",63]],"useCount":9644},{"word":"Dog","context":[["[{watchdog, Dog} | Config].",193],["?line test_server:timetrap_cancel(Dog),",1199],["test_server:timetrap_cancel(Dog),",979],["Dog = ?config(watchdog, Config),",813],["[{watchdog, Dog}|Config].",687],["?t:timetrap_cancel(Dog),",452],["Dog=?config(watchdog, Config),",408],["?line Dog = test_server:timetrap(test_server:seconds(10)),",404],["?line Dog = test_server:timetrap(test_server:seconds(5)),",354],["?line Dog=test_server:timetrap(?default_timeout),",213]],"useCount":8411},{"word":"E","context":[["E ->",1241],["<<\"etsc(fun(E) ->",1028],["E;",750],["E",712],["{error, E} ->",456],["ets:delete(E)\">>,",384],["etsc(fun(E) ->",370],["{'EXCEPTION', E} ->",321],["E -> E",278],["E -> E",278]],"useCount":49157},{"word":"E1","context":[["{E1,Eps,St1} = expr(E0, St0),",72],["Head = 40 * E1 + E2,",72],["E1:E2 ->",81],["E1 when E1 =< E2 ->",96],["E1 when E1 =< E2 ->",96],["E2 when E1 =< E2 ->",96],["ets:delete(E1),",121],["E1 = expr(E0,St),",130],["E1 = expr(E0),",131],["E1 ->",190]],"useCount":8177},{"word":"EXIT","context":[["{'EXIT', _} ->",4381],["{'EXIT', Reason} ->",3622],["{'EXIT',Reason} ->",1645],["{'EXIT', _Reason} ->",1177],["{'EXIT',_} ->",876],["{'EXIT', Pid, Reason} ->",798],["{'EXIT', R} ->",512],["{'EXIT',{error,Reason}} ->",400],["?line {'EXIT', {badarg, _}} =",366],["{'EXIT', Parent, Reason} ->",304]],"useCount":34272},{"word":"El","context":[["El,",154],["El ->",158],["send_element(StateData, El) ->",181],["case jlib:iq_query_info(El) of",235],["process_unauthenticated_stanza(StateData, El),",249],["El;",355],["case El of",494],["#xmlel{name = Name, attrs = Attrs, children = Els} = El,",135],["send_element(StateData, El),",138],["Err = jlib:make_error_reply(El, ?ERR_NOT_ALLOWED),",142]],"useCount":17967},{"word":"Els","context":[["#xmlel{children = Els} = SubEl,",328],["case xml:remove_cdata(Els) of",463],["Els),",234],["end, Els),",166],["ClientIn = jlib:decode_base64(xml:get_cdata(Els)),",140],["#xmlel{name = Name, attrs = Attrs, children = Els} = El,",135],["#xmlel{name = Name, attrs = Attrs, children = Els} =",116],["Item2 = process_item_els(Item1, Els),",115],["false, Els).",99],["ejabberd_web:make_xhtml(HeadEls, Els)}.",96]],"useCount":13189},{"word":"Else","context":[["Else -> Else",629],["Else ->",8921],["exit({error,{asn1,{invalid_choice_type,Else}}})",2006],["Else",1774],["exit({error,{asn1,{invalid_choice_tag,Else}}})",912],["exit({unexpected_decode_result, Else})",831],["\"~n   Else: ~p~n\", [Else]),",776],["\"~n   Else: ~p~n\", [Else]),",776],["{error, Else, ok}.",717],["Else -> Else",629]],"useCount":25170},{"word":"Enc1","context":[["Enc1@len < 16384 ->",1175],["Enc1@len = length(Val),",1082],["Enc1@len];",1080],["[align|<<2:2,Enc1@len:14>>]",1080],["[if Enc1@len < 128 ->",1080],["Enc1@element = element(2, Val),",916],["Enc1@element = element(3, Val),",721],["Enc1@len = byte_size(Enc1@bin),",395],["Enc1@len = byte_size(Enc1@bin),",395],["if Enc1@element =:= asn1_NOVALUE ->",1741]],"useCount":12900},{"word":"Enc2","context":[["Enc2@len < 16384 ->",170],["Enc2@len = byte_size(Enc2@bin),",184],["Enc2@len = byte_size(Enc2@bin),",184],["if Enc2@element =:= asn1_NOVALUE ->",1311],["Enc2@element = element(2, Val),",691],["Enc2@element = element(3, Val),",460],["Enc2@element = element(4, Val),",297],["exit({error,{asn1,{illegal_value,Enc2@element}}})",233],["Enc3@bin = iolist_to_binary(Enc2@element),",215],["[align|<<2:2,Enc2@len:14>>]",130]],"useCount":6701},{"word":"EncBytes","context":[["encode_tags(TagIn, EncBytes, EncLen).",2683],["?RT_BER:encode_tags(TagIn, EncBytes, EncLen).",2229],["{EncBytes,EncLen} = case element(1,Val) of",2006],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).",390],["{EncBytes,EncLen} = 'enc_PropertyParm'(H, [<<48>>]),",308],["{EncBytes,EncLen} = 'enc_EventParameter'(H, [<<48>>]),",264],["{EncBytes,EncLen} = 'enc_IndAudPropertyParm'(H, [<<48>>]),",209],["{EncBytes, EncLen} =",133],["{EncBytes,EncLen} = 'enc_TerminationID'(H, [<<48>>]),",132]],"useCount":18642},{"word":"EncBytes1","context":[["BytesSoFar = [EncBytes1],",454],["{EncBytes1,EncLen1} = 'enc_TerminationIDList'(Cindex1, [<<160>>]),",484],["{EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<128>>]),",510],["{EncBytes1,EncLen1} = ?RT_BER:encode_octet_string([], Cindex1, [<<128>>]),",620],["{EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),",625],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],",979],["{EncBytes1,EncLen1} =  case Cindex1 of",1367],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],",1603],["BytesSoFar = [EncBytes1, EncBytes2],",3580],["{EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),",435]],"useCount":14124},{"word":"EncBytes2","context":[["{EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,streamID) of",120],["{EncBytes2,EncLen2} = 'enc_Value'(Cindex2, [<<161>>]),",132],["{EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], Cindex2, [<<129>>]),",138],["{EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),",145],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],",365],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],",979],["{EncBytes2, EncLen2} = case Cindex2 of",130],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],",1603],["{EncBytes2,EncLen2} =  case Cindex2 of",2709],["BytesSoFar = [EncBytes1, EncBytes2],",3580]],"useCount":13188},{"word":"EncBytes3","context":[["{EncBytes3, EncLen3} = case Cindex3 of",77],["{EncBytes3,EncLen3} = 'enc_TransactionReply_transactionResult'(Cindex3, [<<162>>]),",66],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3,",77],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],",80],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],",365],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],",979],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],",1603],["{EncBytes3,EncLen3} =  case Cindex3 of",1855],["{EncBytes3,EncLen3} = 'enc_ObservedEvent_eventParList'(Cindex3, [<<162>>]),",66],["BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],",86]],"useCount":6314},{"word":"EncLen","context":[["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["{EncBytes,EncLen} = 'enc_TerminationID'(H, [<<48>>]),",132],["{EncBytes, EncLen} =",133],["{EncBytes,EncLen} = 'enc_IndAudPropertyParm'(H, [<<48>>]),",209],["{EncBytes,EncLen} = 'enc_EventParameter'(H, [<<48>>]),",264],["{EncBytes,EncLen} = 'enc_PropertyParm'(H, [<<48>>]),",308],["?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).",390],["{EncBytes,EncLen} = case element(1,Val) of",2006],["?RT_BER:encode_tags(TagIn, EncBytes, EncLen).",2229],["encode_tags(TagIn, EncBytes, EncLen).",2683]],"useCount":18720},{"word":"EncLen1","context":[["{EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),",435],["LenSoFar = EncLen1,",454],["{EncBytes1,EncLen1} = 'enc_TerminationIDList'(Cindex1, [<<160>>]),",484],["{EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<128>>]),",510],["{EncBytes1,EncLen1} = ?RT_BER:encode_octet_string([], Cindex1, [<<128>>]),",620],["{EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),",625],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,",1010],["{EncBytes1,EncLen1} =  case Cindex1 of",1367],["LenSoFar = EncLen1 + EncLen2 + EncLen3,",1603],["LenSoFar = EncLen1 + EncLen2,",3580]],"useCount":14181},{"word":"EncLen2","context":[["{EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,streamID) of",120],["LenSoFar = EncLen1 + EncLen2,",3580],["{EncBytes2,EncLen2} =  case Cindex2 of",2709],["LenSoFar = EncLen1 + EncLen2 + EncLen3,",1603],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,",1010],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,",365],["{EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),",145],["{EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], Cindex2, [<<129>>]),",138],["{EncBytes2,EncLen2} = 'enc_Value'(Cindex2, [<<161>>]),",132],["{EncBytes2, EncLen2} = case Cindex2 of",130]],"useCount":13245},{"word":"EncLen3","context":[["{EncBytes3,EncLen3} = 'enc_ObservedEvent_eventParList'(Cindex3, [<<162>>]),",66],["{EncBytes3,EncLen3} =  case Cindex3 of",1855],["LenSoFar = EncLen1 + EncLen2 + EncLen3,",1603],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,",1010],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,",365],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,",86],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,",80],["{EncBytes3, EncLen3} = case Cindex3 of",77],["{EncBytes3,EncLen3} = 'enc_TransactionReply_transactionResult'(Cindex3, [<<162>>]),",66],["{EncBytes3,EncLen3} = 'enc_Message_messageBody'(Cindex3, [<<162>>]),",66]],"useCount":6371},{"word":"End","context":[["Filter = prepare_filter(UserID, UserJID, Borders, Start, End, WithJID),",70],["when Start =< TS, End >= TS,",63],["Start, End, Now, WithJID,",58],["Filter = prepare_filter(RoomID, Borders, Start, End, WithJID),",55],["%%% End:",493],["Start, End, _Now, WithJID,",138],["is_integer(End) ->",78],["%% End of Module.",75],["End;",72],["%%% End of BIFs",71]],"useCount":6222},{"word":"Env","context":[["init(Env) ->",726],["oe_create(Env, RegName) ->",696],["Instructions], Env) ->",108],["wx:set_env(Env),",112],["[], Env#env.verbosity),",121],["report({Env#env.file, erl_syntax:get_pos(F),",143],["{ann_bindings(Tree1, Env, Bound, Free), Bound, Free}.",209],["oe_create(Env) ->",696],["oe_create_link(Env) ->",696],["oe_create_link(Env, RegName) ->",696]],"useCount":18384},{"word":"Erlang","context":[["expect(1, [{[sysDescr,0], \"Erlang SNMP agent\"},",129],["\"Erlang code.\\n\"",139],["%%% ARE DISCLAIMED. IN NO EVENT SHALL Erlang Training and Consulting Ltd. BE",158],["%%%    * Neither the name of Erlang Training and Consulting Ltd. nor the",158],["%%  Excerpted from \"Programming Erlang\",",160],["% Nitrogen Web Framework for Erlang",725],["%% rebar: Erlang Build Tools",551],["%%  Excerpted from \"Programming Erlang, Second Edition\",",236],["Erlang code.",209],["%% @author Erlang Solutions Ltd. <openflow@erlang-solutions.com>",185]],"useCount":9997},{"word":"Err","context":[["Err",2492],["ejabberd_router:route(To, From, Err)",950],["Err = jlib:make_error_reply(Packet,",1613],["Err = jlib:make_error_reply(",1126],["ejabberd_router:route(To, From, Err);",1063],["Err ->",4067],["send_element(StateData, Err),",649],["Err -> Err",807],["Err -> Err",807],["From, Err),",899]],"useCount":29600},{"word":"Error","context":[["%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}",817],["%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}",908],["Error;",1602],["{error, Error}",1933],["{error, _} = Error ->",2468],["Error ->",16916],["Error",13304],["{error, Error} ->",5201],["Error -> Error",3230],["Error -> Error",3230]],"useCount":97835},{"word":"Es","context":[["Desc = get_content(description, Es),",113],["Es;",96],["{error,Es,Ws} ->",90],["list_errors(F, Es);",85],["{error, Es, Ws} ->",77],["++ sees(Es)",71],["case Es of",118],["end, Es)",185],["Es = mnesia:select(",196],["{error,St#compile{errors=St#compile.errors ++ Es}}",250]],"useCount":15931},{"word":"Event","context":[["handle_call({OE_THIS, OE_Context, callAny, [Event, Stat]}, OE_From, OE_State) ->",80],["callAny(OE_THIS, OE_Options, Event, Stat) ->",80],["corba:call(OE_THIS, callAny, [Event, Stat], ?MODULE).",80],["callAny(OE_THIS, Event, Stat) ->",80],["corba:call(OE_THIS, callAny, [Event, Stat], ?MODULE, OE_Options).",80],["[Name, Event, StateName]);",105],["?CRASH_LOG(Event),",126],["%state_name(Event, From, StateData) ->",170],["handle_event(Event, State) ->",185],["case Event of",295]],"useCount":11181},{"word":"EventType","context":[["connect(This,EventType, Options) -> wxEvtHandler:connect(This,EventType, Options).",633],["\"EventType\",",840],["\"IDL:omg.org/CosNotification/EventType:1.0\",",744],["disconnect(This,EventType, Options) -> wxEvtHandler:disconnect(This,EventType, Options).",633],["disconnect(This,EventType, Options) -> wxEvtHandler:disconnect(This,EventType, Options).",633],["connect(This,EventType, Options) -> wxEvtHandler:connect(This,EventType, Options).",633],["disconnect(This,EventType) -> wxEvtHandler:disconnect(This,EventType).",633],["disconnect(This,EventType) -> wxEvtHandler:disconnect(This,EventType).",633],["connect(This,EventType) -> wxEvtHandler:connect(This,EventType).",633],["connect(This,EventType) -> wxEvtHandler:connect(This,EventType).",633]],"useCount":7262},{"word":"Ext","context":[["{Ext,Bytes1} = ?RT_PER:getext(Bytes),",2700],["{Ext,Bytes1} = begin",1517],["{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),",900],["{Ext,Bytes1} = ?RT_PER:getbit(Bytes),",666],["{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),",603],["{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),",513],["{Extensions,Bytes6} = case Ext of",500],["{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),",369],["{Extensions,Bytes5} = case Ext of",342],["{Extensions,Bytes4} = case Ext of",289]],"useCount":13370},{"word":"Extensions","context":[["{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),",900],["%% Extensions",1519],["?RT_PER:setext(Extensions =/= []), Opt,",441],["Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)",450],["{Extensions,Bytes6} = case Ext of",500],["Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)",684],["{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),",603],["Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)",540],[",Extensions",522],["{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),",513]],"useCount":15848},{"word":"External","context":[["%% attribute terminationID(1)   External megaco_ber_media_gateway_control_prev3a:TerminationIDList",70],["%% External exports",3418],["%% External functions",1115],["%% External API",442],["%% External interface functions",149],["-include(\"External.hrl\").",102],["%%% External exports",76],["%% attribute terminationID(1)   External megaco_ber_media_gateway_control_v1:TerminationIDList",70],["%% attribute terminationID(1)   External megaco_ber_media_gateway_control_prev3c:TerminationIDList",70],["%% attribute terminationID(1)   External megaco_ber_media_gateway_control_v3:TerminationIDList",70]],"useCount":12217},{"word":"Extra","context":[["{extra, Extra}",56],["%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}",1010],["%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}",904],["code_change(OldVsn, State, Extra) ->",843],["Extra :: term()) ->",148],["Extra ->",82],["{ok, Pid, Extra} ->",76],["case Extra of",62],["-spec code_change(OldVsn, State :: term(), Extra :: term()) -> Result when",61],["Extra = {?SNMPM_EXTRA_INFO_TAG, Fun},",56]],"useCount":6057},{"word":"F","context":[["F;",283],["F = fun() ->",3523],["F = fun () ->",1580],["mnesia:transaction(F).",865],["mnesia:transaction(F);",808],["case mnesia:transaction(F) of",786],["fw(F,",705],["file:close(F),",394],["F = fun(Alice) ->",374],["{error, ?F(\"Expect true|false at line ~w\", [Lno])}",362]],"useCount":99390},{"word":"Fd","context":[["{ok, Fd} ->",1219],["close(Fd),",206],["_ = file:close(Fd),",208],["emit(Fd, \"    return oe_error_code;\\n  }\\n\");",224],["emit(Fd, \"  if ((oe_error_code = \"",224],["emit(Fd, \"      return oe_error_code;\\n    }\\n\");",248],["ok = file:close(Fd),",308],["file:close(Fd).",309],["nl(Fd),",503],["file:close(Fd),",900]],"useCount":23067},{"word":"Fields","context":[["Fields ->",754],["Fields;",81],["Fields) ->",84],["case lists:keysearch(Name,1,Fields) of",86],["Fields, Vals),",86],["[\"FIELD\"] = odbc_test_lib:to_upper(Fields),",99],["Fields),",104],["decode_xdata_els(__TopXMLNS, __IgnoreEls, _els, Fields,",110],["end, Fields),",143],["{ok, Fields} ->",63]],"useCount":9470},{"word":"File","context":[["case file:read_file(File) of",533],["?line del(File, No),",230],["file:delete(File),",771],["case file:read_file_info(File) of",336],["case file:consult(File) of",333],["File;",330],["case filename:extension(File) of",325],["{ok, File} ->",280],["?line {ok, n} = disk_log:open([{name, n}, {file, File}, {type, wrap},",260],["File ->",269]],"useCount":42544},{"word":"FileName","context":[["{ok, Data} = file:read_file(FileName).",65],["case file:read_file_info(FileName) of",134],["case file:read_file(FileName) of",130],["FileName ->",119],["FileName = filename:join(PrivDir, \"test.txt\"),",119],["FileName = ?config(filename, Config),",108],["file_error(FileName, Error)",104],["ssh_sftp:write_file(Sftp, FileName, [Data]),",74],["case file:open(FileName, [read]) of",71],["{ok, Handle} = ssh_sftp:open(Sftp, FileName, [read]),",49]],"useCount":7494},{"word":"Filename","context":[["yecc:file(Filename, Ret),",370],["Filename ->",102],["case file:read_file(Filename) of",105],["?line ok = file:write_file(Filename, <<\"",112],["case file:read_file_info(Filename) of",125],["leex:file(Filename, Ret),",157],["Filename :: name_all(),",169],["file:delete(Filename),",181],["?line ok = file:write_file(Filename,",482],["Text1 = lists:flatten(\"Problem loading ejabberd config file \" ++ Filename),",135]],"useCount":9090},{"word":"Filter","context":[["get_filter(OE_THIS, OE_Options, Filter) ->",136],["NewList = Filter(List),",119],["corba:call(OE_THIS, remove_filter, [Filter], ?MODULE).",136],["remove_filter(OE_THIS, Filter) ->",136],["corba:call(OE_THIS, get_filter, [Filter], ?MODULE).",136],["corba:call(OE_THIS, remove_filter, [Filter], ?MODULE, OE_Options).",136],["corba:call(OE_THIS, get_filter, [Filter], ?MODULE, OE_Options).",136],["get_filter(OE_THIS, Filter) ->",136],["remove_filter(OE_THIS, OE_Options, Filter) ->",136],["Params = list_to_ec2_filter(Filter),",150]],"useCount":6678},{"word":"Flags","context":[["Flags = [],",101],["Flags),",90],["flags = Flags,",208],["MOpts = fun({flags, Flags}, Acc) -> [<<1:32/?UI,Flags:32/?UI>>|Acc];",106],["MOpts = fun({flags, Flags}, Acc) -> [<<1:32/?UI,Flags:32/?UI>>|Acc];",106],["createStdDialogButtonSizer(This,Flags) -> wxDialog:createStdDialogButtonSizer(This,Flags).",96],["createButtonSizer(This,Flags) -> wxDialog:createButtonSizer(This,Flags).",96],["createButtonSizer(This,Flags) -> wxDialog:createButtonSizer(This,Flags).",96],["decode_As(Vsn, As, setelement(AField, R, X), Flags, Tail2);",96],["createStdDialogButtonSizer(This,Flags) -> wxDialog:createStdDialogButtonSizer(This,Flags).",96]],"useCount":6469},{"word":"From","context":[["Activity = get_user_activity(From, StateData),",384],["ejabberd_router:route(To, From,",499],["%% From wxWindow",606],["%% From wxEvtHandler",633],["%% @spec handle_call(Request, From, State) ->",659],["%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |",770],["From, Err),",899],["ejabberd_router:route(To, From, Err)",950],["ejabberd_router:route(To, From, Err);",1063],["From,",1065]],"useCount":97637},{"word":"Fs","context":[["rm_files(Fs);",84],["case Fs of",59],["{ok, Fs} ->",60],["is_stacktrace(Fs);",62],["Fs",69],["Fs),",75],["{Fs, Ts} = ejabberd_hooks:run_fold(",82],["Fs;",98],["{ok,{Mod,Exp,Attr,Fs,Lc}}.",116],["Fs1 = [LJID | Fs],",162]],"useCount":9006},{"word":"Fun","context":[["Fun = fun() ->",686],["Fun =",566],["top_down -> Fun(ST, Ctx);",381],["bottom_up -> Fun(ST, NewCtx1)",309],["Fun(),",296],["Fun = fun (X) ->",245],["case Fun() of",206],["Fun()",199],["Fun ->",198],["case Fun of",144]],"useCount":36798},{"word":"Func","context":[["%% Func: code_change/3",452],["%% Func: handle_sync_event/4",444],["%% Func: terminate/2",374],["%% Func: handle_event/3",363],["%% Func: terminate/3",359],["%% Func: handle_info/3",355],["%% Func: StateName/2",342],["%% Func: handle_info/2",342],["%% Func: init/1",873],["%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}",904]],"useCount":14215},{"word":"Function","context":[["%% API Function Definitions",559],["%% API Function Exports",668],["%% Function for fetching the interface type ID.",696],["%% Function: init(Args) -> {ok, State} |",880],["%% Function: handle_cast(Msg, State) -> {noreply, State} |",904],["%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}",908],["%% Function:",909],["%% Function: handle_info(Info, State) -> {noreply, State} |",910],["%% Function: terminate(Reason, State) -> void()",963],["%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |",770]],"useCount":29703},{"word":"G","context":[["Fd = ic_genobj:stubfiled(G),",196],["ic_cbe:emit_decoding_stmt(G, N, Fd,",80],["} ; RTP profile for G.723.1 is 4",96],["G = digraph:new(),",103],["case ic_genobj:is_hrlfile_open(G) of",104],["case ic_genobj:is_stubfile_open(G) of",111],["G.",130],["S = ic_genobj:pragmatab(G),",134],["{\"G\",[]}]},",174],["gen(G, N, Xs);",188]],"useCount":13486},{"word":"GET","context":[["{ok, Client3} = cowboy_client:request(<<\"GET\">>,",67],["{[<<\"GET\">>], Req, State}.",57],["{['GET'], Req, State}.",68],["{<<\":method\">>, <<\"GET\">>},",68],["{ok, Response} = lhttpc:request(URL, \"GET\", [], 1000),",73],["{ok, Client2} = cowboyku_client:request(<<\"GET\">>,",82],["GET /",90],["send_method_not_allowed(Req, \"GET,HEAD\").",123],["'GET' ->",140],["{ok, Client2} = cowboy_client:request(<<\"GET\">>,",381]],"useCount":6296},{"word":"Group","context":[["%% GroupsAndTestCases = [Group | {group,GroupName} | TestCase]",298],["%% Group = {GroupName,Properties,GroupsAndTestCases}",298],["fun(Group) ->",204],["SGroup = ejabberd_odbc:escape(Group),",198],["get_group_users(LServer, Group)",124],["init_per_group(Group, Config) ->",115],["%% Function: groups() -> [Group]",211],["GroupOpts = proplists:get_value(Group, GroupsOpts, []),",115],["Group),",110],["%% RT-Synthesis Research Group",93]],"useCount":13123},{"word":"H","context":[["H;",425],["isExposed(This,X,Y,W,H) -> wxWindow:isExposed(This,X,Y,W,H).",606],["isExposed(This,X,Y,W,H) -> wxWindow:isExposed(This,X,Y,W,H).",606],["case H of",604],["[H|T] ->",404],["| {size, {W::integer(), H::integer()}}",352],["{EncBytes,EncLen} = 'enc_PropertyParm'(H, [<<48>>]),",308],["H = get(outh),",274],["{EncBytes,EncLen} = 'enc_EventParameter'(H, [<<48>>]),",264],["throw({asn1_error,{get_line(H),get(asn1_module),",264]],"useCount":68371},{"word":"H1","context":[["{[H1, M1], true} = check_list([{H, 12}, {M, 60}]),",49],["Hour=list_to_integer([H1,H2]),",51],["validate(fun() -> chk_PropertyParm(H1, H2) end,",52],["% H1 =< H2. Inlined.",60],["validate(fun() -> chk_IndAudPropertyParm(H1, H2) end,",60],["{cons,Line,H1,T1};",68],["validate(fun() -> chk_EventParameter(H1, H2) end,",80],["lists:reverse(T1, [H1 | M]).",86],["case element(I, H1) of",96],["case Fun(H1, H2) of",96]],"useCount":11653},{"word":"H2","context":[["H2 = H#outh{",96],["H2;",170],["case Fun(H1, H2) of",96],["case element(I, H2) of",96],["put(outh, H2).",124],["lists:reverse(T2, [H2 | M]).",158],["validate(fun() -> chk_EventParameter(H1, H2) end,",80],["{N + 1, H2};",70],["{H2, []} ->",60],["validate(fun() -> chk_IndAudPropertyParm(H1, H2) end,",60]],"useCount":11463},{"word":"HTTP","context":[["<<\"HTTP/1.1 \">>.",77],["{version, \"HTTP/1.0\"}]),",330],["\"HTTP/1.1 200 OK\\r\\n\"",242],["{version, \"HTTP/1.0\"},",91],["%% @doc Start the HTTP response by sending the Code HTTP response and",117],["%% @doc Start the HTTP response by sending the Code HTTP response and",117],["%% @doc Receive the body of the HTTP request (defined by Content-Length).",117],["\" HTTP/1.0\\r\\n\\r\\n\",",126],["\"HTTP/1.0\\r\\n\\r\\n\",",128],["<<\"HTTP/1.0 \">>;",77]],"useCount":7013},{"word":"Handle","context":[["{ok, <<?SSH_FXP_HANDLE, ?UINT32(ReqId), Handle/binary>>, _} =",61],["?line {ok, Handle} = ?PRIM_FILE:start(),",72],["?line ok = ?PRIM_FILE:stop(Handle),",72],["{ok, Handle} = ct_telnet:open(telnet_server_conn1),",82],["ok = ct_telnet:close(Handle),",92],["{ok,Handle} = ssh_sftp:open_tar(ChPid2, TarFileName, [write]),",93],["ok = erl_tar:close(Handle),",131],["recv(Handle).",132],["{ok, Handle} ->",156],["Handle1 = get_handle(Handle),",211]],"useCount":6281},{"word":"Handling","context":[["%%% Handling of warnings.",39],["%% @doc Handling cast messages",67],["%% Description: Handling all non call/cast messages",1167],["%% Description: Handling cast messages",1159],["%% Description: Handling call messages",1119],["%% Handling cast messages",831],["%% Handling all non call/cast messages",826],["%% Handling call messages",811],["%% @doc Handling call messages",79],["%% @doc Handling all non call/cast messages",174]],"useCount":6598},{"word":"Hdrs","context":[["request(URL, Method, Hdrs, Body, Timeout,",33],["Hdrs",44],["add_content_headers(Hdrs, Body, PartialUpload);",43],["Hdrs;",40],["lists:foldl(F, [<<\"\\r\\n\">>], mochiweb_headers:to_list(Hdrs)).",38],["Hdrs = case mochiweb_headers:get_value(\"date\", WithSrv) of",38],["{_, ToURI, _} = esip:get_hdr('to', Hdrs),",35],["Hdrs, ReqState#wm_reqstate.reqdata)}};",70],["%%   Hdrs = [{Header, Value}]",94],["%%   Result = {ok, {{StatusCode, ReasonPhrase}, Hdrs, ResponseBody}}",101]],"useCount":6629},{"word":"Head","context":[["case Head of",196],["[Head|Tail] ->",153],["LocalName = lists:reverse(Head),",110],["Hd = lists:reverse(Head),",110],["Head;",108],["{Head, ok};",94],["{lists:reverse(Head), T, State};",88],["{ok, Head} ->",82],["Head = 40 * E1 + E2,",72],["<<_:O/binary, Head:Length/binary, _/binary>> = B,",66]],"useCount":10326},{"word":"Headers","context":[["headers = Headers,",155],["Headers;",261],["= lists:keyfind(\"sec-websocket-accept\", 1, Headers),",177],["Headers = [",254],["{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),",183],["{'Upgrade', \"websocket\"} = lists:keyfind('Upgrade', 1, Headers),",178],["headers=Headers,",99],["[Headers, <<>>] = websocket_headers(",115],["{response, nofin, 200, Headers} = gun:await(ConnPid, Ref),",146],["Headers =",128]],"useCount":14459},{"word":"Height","context":[["setClientSize(This,Width,Height) -> wxWindow:setClientSize(This,Width,Height).",606],["when is_integer(Width),is_integer(Height) ->",84],["when is_integer(Width),is_integer(Height),is_list(Options) ->",72],["setSize(This,Width,Height) -> wxWindow:setSize(This,Width,Height).",606],["setSize(This,Width,Height) -> wxWindow:setSize(This,Width,Height).",606],["setClientSize(This,Width,Height) -> wxWindow:setClientSize(This,Width,Height).",606],["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606]],"useCount":7060},{"word":"Host","context":[["set_xoption(Host,",475],["case transaction(Host, Node, Action, sync_dirty) of",1546],["stop(Host) ->",1509],["Proc = gen_mod:get_module_proc(Host, ?PROCNAME),",1284],["start(Host, Opts) ->",1215],["process_admin(Host,",637],["ok = httpd_test_lib:verify_request(Type, Host, Port, Node,",570],["Host,",569],["Host = To#jid.lserver,",543],["start_link(Host, Opts) ->",481]],"useCount":134153},{"word":"Hostname","context":[["Hostname;",56],["{ClientNode, ServerNode, Hostname} = ssl_test_lib:run_where(Config),",2430],["{host, Hostname},",2387],["{port, Port}, {host, Hostname},",384],["{ok, Hostname} = inet:gethostname(),",307],["{ClientNode, _, Hostname} = ssl_test_lib:run_where(Config),",163],["ServerNode, Hostname).",135],["{_, ServerNode, Hostname} = ssl_test_lib:run_where(Config),",74],["\"** Hostname ~s is illegal **~n\",",64],["{port, Port1}, {host, Hostname},",60]],"useCount":7490},{"word":"I","context":[["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["id(I) -> I.",464],["case I of",1051],["id(I) -> I.",464],["fun(I) when is_integer(I), I>0 -> I end,",429],["fun(I) when is_integer(I), I>0 -> I end,",429],["I;",662],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056]],"useCount":65209},{"word":"ID","context":[["ID = term_to_id(ACL),",123],["oe_get_module(OE_IFR, OE_Parent, ID, Name, Version) ->",166],["%% Entity is subscribed but specifies an invalid subscription ID",124],["%% Entity has multiple subscriptions to the node but does not specify a subscription ID",124],["orber_ifr:'ModuleDef_create_module'(OE_Parent, ID, Name, Version);",166],["oe_get_top_module(OE_IFR, ID, Name, Version) ->",166],["case orber_ifr:'Repository_lookup_id'(OE_IFR, ID) of",332],["%% Function for fetching the interface type ID.",696],["{<<\"label\">>, ?T(Lang, <<\"Jabber ID\">>)},",112],["orber_ifr:'Repository_create_module'(OE_IFR, ID, Name, Version);",166]],"useCount":11651},{"word":"IDL","context":[["\"IDL:omg.org/CosNotification/Property:1.0\",",624],["\"IDL:omg.org/CosFileTransfer/File:1.0\",",208],["\"IDL:omg.org/CosTransactions/Coordinator:1.0\",",224],["\"IDL:omg.org/CosNotification/FixedEventHeader:1.0\",",240],["], [orber_ifr:lookup_id(OE_IFR,\"IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0\")], []),",248],["\"IDL:omg.org/CosPropertyService/PropertyModeType:1.0\",",248],["\"IDL:omg.org/CosNaming/NameComponent:1.0\",",264],["\"IDL:omg.org/CosNotifyFilter/ConstraintExp:1.0\",",296],["\"IDL:omg.org/CosNotification/EventType:1.0\",",744],["\"IDL:omg.org/CosNotification/PropertyRange:1.0\",",168]],"useCount":13004},{"word":"IMPLICIT","context":[["?RT_BER:decode_integer(Bytes3,{0,65535},[{tag,128,1,'IMPLICIT',0}], mandatory);",174],["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["{EncBytes1,EncLen1} = 'enc_TerminationIDList'(?RT_BER:cindex(2,Val,terminationID), [{tag,128,0,'IMPLICIT',0}]),",126],["{Term1,Bytes3,Rb2} = 'dec_TerminationIDList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),",132],["{Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,4294967295},[{tag,128,0,'IMPLICIT',0}], mandatory),",135],["?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,streamID), [{tag,128,1,'IMPLICIT',0}])",120],["?RT_BER:decode_null(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory);",84],["{Term1,Bytes3,Rb2} = ?RT_BER:decode_octet_string(Bytes2,4,[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),",222],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331]],"useCount":14098},{"word":"INFO_MSG","context":[["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad format)\",",126],["?INFO_MSG(\"(~w) Forbidden legacy authentication \"",82],["?INFO_MSG(\"(~w) Accepted authentication for ~s \"",120],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad \"",114],["?INFO_MSG(\"~nThe process ~p in node ~p ran a hook in node ~p.~n\"",96],["?INFO_MSG(\"(~w) Opened session for ~s\",",85],["?INFO_MSG(\"(~w) Replaced session for ~s\",",85],["?INFO_MSG(\"(~w) Forbidden session for ~s\",",85],["?INFO_MSG(\"(~w) Close session for ~s\",",84],["?INFO_MSG(",212]],"useCount":6504},{"word":"INTEGER","context":[["%%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]",393],["%% attribute portNumber(2) with type INTEGER OPTIONAL",396],["%% attribute number 2 with type INTEGER OPTIONAL",420],["%% attribute number 4 with type INTEGER",531],["%% attribute version(1) with type INTEGER",539],["%% attribute transactionId(1) with type INTEGER",540],["%% attribute number 3 with type INTEGER",759],["%% attribute streamID(2) with type INTEGER OPTIONAL",880],["%% attribute number 2 with type INTEGER",2145],["%% attribute number 1 with type INTEGER",3265]],"useCount":17546},{"word":"IP","context":[["IP = case SockMod of",83],["{ok, Client} = gen_tcp:connect(IP, Port, [{active,false},list],1000),",87],["IP = orber_test_lib:get_host(),",293],["[IP] = ?match([_], orber:host()),",169],["spawn(?MODULE, do_connect, [IP, Port, [{active, false}]]),",160],["corba:string_to_object(\"corbaloc::1.2@\"++IP++\":\"++integer_to_list(ServerPort)++\"/NameService\")),",109],["case IP of",106],["IP;",97],["{ip_address, IP}])),",92],["IP = ?config(server_ip, Config),",87]],"useCount":10573},{"word":"IQ","context":[["IQ#iq{type = result,",1054],["IQ#iq{type = error,",973],["ResIQ = IQ#iq{type = result,",318],["jlib:iq_to_xml(IQ#iq{type = result,",179],["case IQ of",216],["IQ = jlib:iq_query_info(Packet),",313],["IQ#iq{type = error, sub_el = [SubEl, Error]}",322],["IQ ->",341],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_NOT_ALLOWED]};",438],["Res = IQ#iq{type = result,",505]],"useCount":16260},{"word":"Id","context":[["%% Child :: {Id,StartFunc,Restart,Shutdown,Type,Modules}",285],["when is_integer(Id),is_list(Options) ->",288],["Id.",406],["id = Id,",487],["%%     $Id$",645],["-vsn('$Id$').",1029],["%% @version $Id$",1217],["get_item_name(Host, Node, Id) ->",256],["New_dict = dict:erase(Id, Dict),",257],["case Id of",263]],"useCount":34940},{"word":"If","context":[["%% If ?CR is is missing RFC2616 section-19.3",105],["%% of the application. If the application is structured according to the",65],["{\"If-None-Match\", proplists:get_value(if_none_match, Options)}],",67],["%%  If a non-zero named buffer object is bound to the `?GL_PIXEL_PACK_BUFFER' target",72],["{\"If-Match\", proplists:get_value(if_match, Options)},",72],["{\"If-Unmodified-Since\", proplists:get_value(if_unmodified_since, Options)},",72],["%% <tt>pubsub_state</tt> table. If a plugin stores its data in the same",96],["%% application. If the application is structured according to the OTP",135],["%%  If a non-zero named buffer object is bound to the `?GL_PIXEL_UNPACK_BUFFER' target",144],["%%% along with RefactorErl.  If not, see <http://plc.inf.elte.hu/erlang/>.",358]],"useCount":16055},{"word":"Index","context":[["fun(Input, Index) ->",180],["fun(Input, Index)->",60],["case P(Inp, Index) of",60],["<<ThisRef:32/?UI,Index:32/?UI>>).",60],["case P(Input,Index) of",60],["case P(Input, Index) of",90],["I = integer_to_list(Index),",116],["when is_integer(Index) ->",162],["Index;",74],["Index ->",218]],"useCount":10008},{"word":"Info","context":[["%% @spec handle_info(Info, State) -> {noreply, State} |",894],["%% Function: handle_info(Info, State) -> {noreply, State} |",910],["handle_info(Info, State) ->",1755],["Info;",422],["%% Info = [tuple()]",389],["{ok, Info} ->",388],["Info",289],["case Info of",275],["%% Function: suite() -> Info",240],["Info#user.jid,",235]],"useCount":23687},{"word":"Input","context":[["Input.",84],["Input;",94],["case P(Input, Index) of",90],["when is_map(Client), is_map(Input), is_list(Options) ->",523],["%% Input:    Rest = string() | binary()",500],["Input ->",234],["fun(Input, Index) ->",180],["Input",170],["when is_map(Client), is_map(Input) ->",523],["case Input of",142]],"useCount":9399},{"word":"Int","context":[["Int ->",173],["Int.",180],["Int;",241],["erlang:integer_to_list(Int);",374],["Int",128],["case (catch list_to_integer(Int)) of",108],["case Int of",78],["Int when is_integer(Int) ->",108],["Int when is_integer(Int) ->",108],["{{const, list_to_integer(Int)}, S1};",68]],"useCount":8369},{"word":"Internal","context":[["%% Internal.",304],["%% Internal application API",386],["%% Internal Functions",504],["%% Internal Function Definitions",519],["%% Internal API",561],["%% Internal",672],["%% Internal exports",1483],["%%% Internal",243],["%% Internal functions",5202],["%%% Internal functions",7411]],"useCount":21173},{"word":"Is","context":[["opt(Is, [I|Acc], label_used(Lbl, St));",56],["frame_size_branch(L, Is, Safe);",62],["false -> check_liveness(R, Is, St)",48],["remap(Is, Map, [I|Acc]);",103],["Err  -> throw(Err)              % QQQ Is this too drastic?",63],["frame_size(Is, Safe);",63],["check_liveness(R, Is, St);",65],["live_opt(Is, Regs, D, [I|Acc]);",319],["btb_reaches_match_1(Is, Regs, D);",107],["_ -> check_liveness(R, Is, St)",103]],"useCount":10249},{"word":"It","context":[["%% It also includes additional configuration files and replaces macros.",69],["%% It tries to reuse a previous connection.",72],["%% plugin. It can be used for example by the developer to create the specific",79],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108],["%% implement this function. It can return anything.</p>",113],["%% This function is called whenever an application has stopped. It",131],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% and can be changed without notice. It can't be used for comparsion",1461],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108]],"useCount":8124},{"word":"Item","context":[["case Item of",1909],["when is_integer(Item) ->",389],["Item.",161],["Item;",157],["[extract_tag_item(Item)",156],["This::wxTreeCtrl(), Item::integer().",251],["<<ThisRef:32/?UI,0:32,Item:64/?UI>>).",256],["Constraint = fun(Item) -> tr_PkgdName(Item, State) end,",268],["Constraint = fun(Item) -> tr_PkgdName(Item, State) end,",268],["set_item(Item) ->",263]],"useCount":27734},{"word":"ItemId","context":[["delete_item(NodeId, Publisher, PublishModel, ItemId) ->",143],["get_item(Host, Node, ItemId) ->",72],["get_item(NodeId, ItemId) ->",156],["delete_item(Nidx, Publisher, PublishModel, ItemId) ->",131],["get_item(Nidx, ItemId) ->",139],["ItemId = xml:get_attr_s(<<\"id\">>, ItemAttrs),",74],["get_item(NodeId, ItemId, JID, AccessModel, PresenceSubscription, RosterGroup, SubId) ->",105],["publish_item(NodeId, Publisher, Model, MaxItems, ItemId, Payload) ->",105],["get_item(Nidx, ItemId, JID, AccessModel, PresenceSubscription, RosterGroup, SubId) ->",108],["set_cached_item(Host, NodeId, ItemId, Publisher, Payload),",111]],"useCount":6220},{"word":"Items","context":[["{result, Items} ->",181],["decode_pubsub_els(__TopXMLNS, __IgnoreEls, _els, Items,",176],["Items ->",152],["Items)",147],["Items).",144],["lists:reverse(Items);",141],["end, Items),",135],["Items, Lang, StateData,",186],["Items) ->",200],["Items = case Acc of",346]],"useCount":13195},{"word":"JID","context":[["JID ->",177],["case JID of",186],["LJID = jid:tolower(JID),",191],["%%\t JID = jid()",196],["J = encode_jid(JID),",219],["Subscriber = case jlib:string_to_jid(JID) of",170],["%% Bad JID in database:",166],["get_state(NodeId, JID) ->",150],["JID,",254],["LJID = jlib:jid_tolower(JID),",712]],"useCount":34444},{"word":"K","context":[["L = K + M - 1,",72],["State = crypto:stream_init(aes_ctr, K, IV),",132],["case K of",131],["{ok, Ssh#ssh{encrypt_keys = K,",126],["F = fun ({K, V}, Acc) ->",120],["lists:foreach(fun(K) ->",154],["fun(K) ->",92],["{ok, Ssh#ssh{decrypt_keys = K,",90],["K ->",87],["O=riakc_obj:new(<<\"bucket\">>, K),",78]],"useCount":15474},{"word":"Key","context":[["Org, Bday, Key, Tz, Url, Email, Tel, Label, Fn, Version,",275],["key = Key,",247],["case lists:keysearch(Key, 1, List) of",260],["Name, Username, Remove, Key, City, Nick, Url,",290],["Key;",303],["Username, Remove, Key, City, Nick, Url, Email) ->",353],["Key ->",466],["Key :: term(),",478],["Sort_string, Org, Bday, Key, Tz, Url, Email, Tel,",491],["case Key of",601]],"useCount":67943},{"word":"L","context":[["L when is_list(L) ->",728],["L.",961],["L;",1338],["L when is_list(L) ->",728],["L ->",512],["L",365],["case L of",352],["P=10003{C=2000{A=a4444,A=a4445{M{ST=1{L{",230],["{ok, L} ->",227],["{test,I,L,Args};",212]],"useCount":74392},{"word":"L1","context":[["equiv_list([V1 | L1], [V2 | L2]) ->",78],["equiv_list(L1, L2);",91],["Pairs = lists:zip(L1, L2),",97],["L1 = gexpr(L0),",72],["L1 when is_list(L1) ->",70],["{XX,X} <- L1,",88],["[L1,L2]),",105],["%% Take L1 apart.",98],["L1 = lists:keysort(1, Props1),",106],["case L1 == L2 of",121]],"useCount":11203},{"word":"L2","context":[["L2 = lists:keysort(1, Props2),",106],["case L1 == L2 of",121],["[L1,L2]),",105],["Pairs = lists:zip(L1, L2),",97],["equiv_list(L1, L2);",91],["{Y,YY} <- L2,",88],["equiv_list([V1 | L1], [V2 | L2]) ->",78],["%% Take L2 apart.",74],["{Bytes2,L2} = encode_length(LenSoFar),",67],["equiv(L1, L2) when is_list(L1), is_list(L2) ->",62]],"useCount":8123},{"word":"LINE","context":[["Other2 -> exit({?LINE, Other2})",92],["Other1 -> exit({?LINE, Other1})",92],["not_loaded(?LINE).",104],["{line, ?LINE}, {body, Cause}]),",132],["[?LINE, What], ?DEBUG_LEVEL),",138],["-define(line, put(line, ?LINE), ).",141],["30000 -> ct:fail(\"timeout ~p:~p\",[?MODULE,?LINE])",151],["{line, ?LINE},",179],["10000 -> ct:fail(\"timeout ~p:~p\",[?MODULE,?LINE])",216],["ok = megaco_test_lib:start_nodes([MgcNode, MgNode], ?FILE, ?LINE),",270]],"useCount":6750},{"word":"LJID","context":[["LJID = jid:tolower(JID),",191],["SJID = ejabberd_odbc:escape(jlib:jid_to_string(LJID)),",163],["LJID,",190],["LJIDs = case LJID of",162],["LJID = jid:to_lower(JID),",119],["LJID = jlib:jid_tolower(JID),",712],["#roster{usj = {LUser, LServer, LJID},",260],["Fs1 = [LJID | Fs],",162],["Ts1 = [LJID | Ts],",162],["us = {LUser, LServer}, jid = LJID};",146]],"useCount":9945},{"word":"LServer","context":[["LServer = jid:nameprep(Server),",914],["case gen_mod:is_loaded(LServer, mod_adhoc) of",305],["DBType = gen_mod:db_type(LServer, ?MODULE),",306],["when LServer == Host ->",358],["US = {LUser, LServer},",2065],["LServer,",2180],["LServer = jlib:nameprep(Server),",2143],["Mod = gen_mod:db_mod(LServer, ?MODULE),",402],["gen_mod:db_type(LServer, ?MODULE)).",571],["ejabberd_odbc:sql_query(LServer,",849]],"useCount":44377},{"word":"LUser","context":[["Username = ejabberd_odbc:escape(LUser),",1965],["US = {LUser, LServer},",2065],["LUser = jlib:nodeprep(User),",1558],["LUser = jid:nodeprep(User),",756],["LUser ->",299],["#roster{usj = {LUser, LServer, LJID},",260],["#jid{luser = LUser, lserver = LServer} = From,",197],["us = {LUser, LServer},",183],["LUS = {LUser, LServer},",180],["USR = {LUser, LServer, LResource},",168]],"useCount":26853},{"word":"Label","context":[["Label_UC = unicode:characters_to_binary([Label,0]),",218],["-define(XFIELD(Type, Label, Var, Val),",194],["Sort_string, Org, Bday, Key, Tz, Url, Email, Tel, Label,",227],["setLabel(This,Label) -> wxWindow:setLabel(This,Label).",267],["setLabel(This,Label) -> wxWindow:setLabel(This,Label).",267],["Org, Bday, Key, Tz, Url, Email, Tel, Label, Fn, Version,",275],["setLabel(This,Label) -> wxControl:setLabel(This,Label).",299],["setLabel(This,Label) -> wxControl:setLabel(This,Label).",299],["Label, Fn, Version, N, Photo, Logo, Geo)",319],["{<<\"label\">>, translate:translate(Lang, Label)},",335]],"useCount":11015},{"word":"Lang","context":[["lang = Lang}) ->",304],["translate:translate(Lang,",1224],["{error, ?ERRT_FORBIDDEN(Lang, ErrText)}",267],["<<(translate:translate(Lang,",268],["?INFO_COMMAND(Lang, Node);",300],["Lang,",713],["Lang) ->",672],["Lang = xml:get_attr_s(<<\"xml:lang\">>, Attrs),",448],["Lang = StateData#state.lang,",410],["{<<\"label\">>, translate:translate(Lang, Label)},",335]],"useCount":38274},{"word":"Len","context":[["Len = O - Start,",167],["Len ->",138],["<Len>16</Len>",240],["<<_:Start/binary, Raw:Len/binary, _/binary>> = Bin,",144],["{Len,Bytes2} = decode_length(Bytes,undefined),",158],["<Len>16</Len>",240],["{{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),",390],["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),",1351],["Len = byte_size(Bin),",121]],"useCount":25610},{"word":"LenSoFar","context":[["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,",86],["encode_tags(TagIn, BytesSoFar, LenSoFar).",3455],["?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).",2652],["LenSoFar = EncLen1 + EncLen2 + EncLen3,",1603],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,",1010],["LenSoFar = EncLen1,",454],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,",365],["LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,",80],["LenSoFar = EncLen1 + EncLen2,",3580]],"useCount":15189},{"word":"Length","context":[["V:Length/binary,",120],["Length = O1 - O,",132],["case Length of",135],["%% Length",160],["Length ->",179],["%% Length with constraint no",1210],["Bodies = lists:zipwith(fun ({Skip, Length}, PartialBody) ->",76],["[{Skip, Skip + Length - 1, PartialBody} | Acc]",76],["%% @doc Receive the body of the HTTP request (defined by Content-Length).",117],["{Skip, Length} ->",82]],"useCount":12983},{"word":"Line","context":[["Line ->",366],["return_error(Line, Message) ->",209],["throw({error, {Line, ?MODULE, Message}}).",195],["{more,{Cs,Col,Toks,Line,[],fun scan/6}};",182],["<<ThisRef:32/?UI,Line:32/?UI>>).",168],["when is_integer(Line) ->",168],["yecc_end(Line), [], {no_func, Line});",165],["yecc_end(Line), [], {no_func, Line});",165],["yecc_end(Line) ->",165],["Line = yecctoken_end_location(Token0),",165]],"useCount":43351},{"word":"List","context":[["List ->",790],["List.",246],["List",250],["{ok, List} ->",250],["case lists:keysearch(Key, 1, List) of",260],["List when is_list(List) ->",349],["List when is_list(List) ->",349],["case List of",244],["List;",590],["List = [",190]],"useCount":28182},{"word":"M","context":[["case M of",249],["{ok, M};",404],["M;",463],["M ->",488],["fun(M) ->",769],["fun(Codec, DD, Ver, EC, M) ->",263],["M.",1024],["\"~n   M:  ~s\"",244],["exit({decode_failed, M, Else})",244],["B = list_to_binary(M),",244]],"useCount":57926},{"word":"M1","context":[["chk_MegacoMessage(M1, M2) ->",52],["Bin = list_to_binary(M1),",54],["#{1:=42,2:=100,3.0:=c,4:=[a,b,c],5:=e} = M1,",50],["Min=list_to_integer([M1,M2]),",51],["Bin1 = list_to_binary(M1),",50],["{?M1,init_per_group},",51],["\"~n   M1: ~p\", [M, M1]),",244],["\"~n   M1: ~p\", [M, M1]),",244],["{ok, M1} when is_record(M1,'MegacoMessage') ->",198],["{ok, M1} when is_record(M1,'MegacoMessage') ->",198]],"useCount":6322},{"word":"MA","context":[["%%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA",2426],["snmpa:send_trap(MA,testTrapv22,\"standard trap\",[{sysContact,\"pelle\"}]),",98],["MA = whereis(snmp_master_agent),",744],["%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307",312],["%%%  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.",306],["snmpa:send_trap(MA, testTrapv22, \"standard trap\"),",135],["{ma_v2_trap1, [MA]},",129],["{v3_inform_sync, [MA]}]],",129],["snmpa:verbosity(MA,trace),",126],["rpc:call(SaNode, snmp, unregister_subagent, [MA, ?klas1]),",98]],"useCount":8343},{"word":"MIB","context":[["?line load_master_std(\"SNMP-VIEW-BASED-ACM-MIB\"),",362],["%% Req. SNMP-STANDARD-MIB | SNMPv2-MIB",392],["?line load_master_std(\"SNMP-NOTIFICATION-MIB\"),",356],["?line load_master_std(\"SNMP-TARGET-MIB\"),",356],["?line load_master_std(\"SNMP-FRAMEWORK-MIB\"),",313],["?line load_master_std(\"SNMP-COMMUNITY-MIB\"),",313],["?line load_master(\"OLD-SNMPEA-MIB\"),",450],["%% Req. SNMP-STANDARD-MIB | SNMPv2-MIB",392],["?line unload_master(\"OLD-SNMPEA-MIB\").",303],["?line {ok, SA} = start_subagent(SaNode, ?sa, \"SA-MIB\"),",282]],"useCount":10422},{"word":"MODULE","context":[["supervisor:start_link({local, ?MODULE}, ?MODULE, []).",2753],["atom_to_list(?MODULE)",588],["gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).",1637],["gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).",1637],["supervisor:start_link({local, ?MODULE}, ?MODULE, []).",2753],["-define(SERVER, ?MODULE).",3629],["?MODULE, remove_user, 50),",869],["supervisor:start_link({local, ?SERVER}, ?MODULE, []).",877],["gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).",1087],["parent_class(_Class) -> erlang:error({badtype, ?MODULE}).",1461]],"useCount":97527},{"word":"Map","context":[["MapJ = join_maps_begin(Map),",55],["{I2, Map, Data}.",57],["Map",56],["remap(Is, Map, [I|Acc]);",103],["DstType = lookup_type(Dst, Map),",60],["NewSrc = ra_temp(Src, Map),",64],["fun(Map) ->",78],["NewDst = ra_temp(Dst, Map),",90],["Map;",111],["Map.",168]],"useCount":9056},{"word":"Max","context":[["Max;",259],["Max when is_integer(Max) -> Max;",211],["FirstN = Max,",78],["-define(SET_INTEGER_XOPT(Opt, Val, Min, Max),",68],["Max when is_integer(Max) -> Max;",211],["Max when is_integer(Max) -> Max;",211],["-author('Max Lapshin <max@maxidoors.ru>').",148],["%%% @author     Max Lapshin <max@maxidoors.ru> [http://erlyvideo.org]",109],["\"Max-Forwards: 70\\r\\n\"",86],["{_Min,Max} ->",102]],"useCount":10948},{"word":"Message","context":[["return_error(Line, Message) ->",209],["\\\"Message\\\": {",215],["throw({error, {Line, ?MODULE, Message}}).",195],["io_lib:write(Message)",213],["case io_lib:deep_char_list(Message) of",218],["format_error(Message) ->",220],["{'Message', Term1, Term2, Term3}.",250],["Message ->",325],["Message;",350],["{'Message',",355]],"useCount":15177},{"word":"Method","context":[["Res = case Method of",85],["method = Method,",210],["Method = Restart,",160],["%%   Method = string() | atom()",82],["Method = wrq:method(RD),",78],["case Method of",379],["method=Method,",73],["{Method, Req2} = cowboy_req:method(Req),",105],["Method,",100],["Method ->",87]],"useCount":10620},{"word":"Mid","context":[["Mess    = cre_message(?VERSION, Mid, cre_transactions([Trans])),",134],["Mess  = cre_message(?VERSION, Mid, cre_transactions([Trans])),",404],["{megaco_start_user, Mid, RI, []},",325],["msg50(Mid, APT).",234],["Mess     = cre_Msg(Mid, [Trans]),",220],["mId         = Mid,",205],["Mid      = ?MG1_MID,",200],["SCRP  = cre_serviceChangeResParm(Mid),",188],["Mid = {deviceName,\"ctrl\"},",166],["Mid = {deviceName,\"mg\"},",144]],"useCount":7924},{"word":"Mod","context":[["Mod",408],["Mod = gen_mod:db_mod(LServer, ?MODULE),",402],["Mod  ->",332],["code:purge(Mod),",250],["Mod ->",148],["Mod;",140],["Mod = obj2mod(Objref),",185],["Mod = get_sm_backend(),",191],["{ok, Mod} ->",191],["{Mod, Tid, Ts} ->",249]],"useCount":41238},{"word":"Module","context":[["module = Module,",214],["Module :: atom(),",220],["[{_, Module, Function, Opts}] ->",211],["%% Module start with or without supervisor:",174],["Module :: module().",166],["Module:send(",291],["Module,",568],["Module :: module(),",726],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076]],"useCount":40545},{"word":"Msg","context":[["%% @spec handle_cast(Msg, State) -> {noreply, State} |",783],["{Level, _, Msg,Metadata} = pop(),",315],["fun(Msg) ->",385],["{ok, Msg} ->",425],["handle_call(Msg, _From, State) ->",445],["handle_info(Msg, State) ->",618],["case Msg of",631],["%% Function: handle_cast(Msg, State) -> {noreply, State} |",904],["handle_cast(Msg, State) ->",1201],["Msg ->",1450]],"useCount":44505},{"word":"N","context":[["<<ThisRef:32/?UI,N:32/?UI>>).",360],["count(Rest, N + 1, Config);",1401],["N;",1083],["N ->",955],["N.",547],["N when is_integer(N) ->",518],["N when is_integer(N) ->",518],["when is_integer(N) ->",482],["fun(N) ->",432],["case N of",378]],"useCount":108195},{"word":"N14","context":[["N33, 33, N20, [N20, N14], N42, [N42, N50], true, true),",168],["N33, N14, [N14], N14, [N14], true, true),",75],["N33, N20, [N20, N14], N42, [N42, N50], true, true),",168],["N33, 33, N20, [N20, N14, N8], N42, [N42, N50, N66], true, true),",108],["N33, 33, N20, [N20, N14, N8, N66], N42, [N42, N50, N66, N8], true, true),",108],["N33, N20, [N20, N14, N8], N42, [N42, N50, N66], true, true),",108],["N33, 33, N14, [N14], N14, [N14], true, true),",75],["N33, N14, [N14, N8, N50], N50, [N50, N8, N14], true, true),",75],["N33, N14, [N14, N8, N50], N50, [N50, N8, N14], true, true),",75],["N33, N20, [N20, N14, N8, N66], N42, [N42, N50, N66, N8], true, true),",108]],"useCount":6486},{"word":"NULL","context":[["%% attribute optional(2) with type NULL OPTIONAL",132],["{'NULL',Bytes2}",134],["{'NULL',Bytes3}",140],["%% attribute number 2 with type NULL OPTIONAL",168],["%% attribute immAckRequired(2) with type NULL OPTIONAL",193],["%% attribute number 1 with type NULL",253],["%% attribute number 3 with type NULL",529],["%% attribute number 2 with type NULL",644],["%% attribute number 3 with type NULL OPTIONAL",138],["%% attribute number 5 with type NULL",138]],"useCount":9163},{"word":"Name","context":[["Name ->",618],["rebar_test_utils:create_app(AppDir, Name, Vsn, [kernel, stdlib]),",503],["setName(This,Name) -> wxWindow:setName(This,Name).",606],["setName(This,Name) -> wxWindow:setName(This,Name).",606],["Name;",932],["case Name of",1585],["case whereis(Name) of",498],["Record, Name, Val)",489],["Record1 = lists:foldr(fun ({_FNum, Name, Val},",465],["name = Name,",693]],"useCount":136626},{"word":"New","context":[["New = sets:from_list([Name || {Name, _, _, _, _, _} <- Specs]),",116],["Stack = {New, Max},",44],["#userlist{name = NewName} = New) ->",57],["\">New place</a></BODY></HTML>\",",60],["New.",64],["{New,St1} = new_var_name(St0),",66],["New = acceptor(GS2),",72],["Kill = sets:subtract(Old, New),",122],["New;",138],["New ->",146]],"useCount":6511},{"word":"NewBytes","context":[["{{sublist,Val},NewBytes}",90],["{{range,Val},NewBytes};",90],["{{relation,Val},NewBytes};",90],["{NewBytes, NewContState} ->",81],["{Cname,{Val,NewBytes}} = case Choice + Ext*2 of",117],["{Cname,{Val,NewBytes}} = case Choice + Ext*3 of",126],["{Cname,{Val,NewBytes}} = case Choice + Ext*8 of",162],["{Cname,{Val,NewBytes}} = case Choice of",477],["{{Cname,Val},NewBytes}.",1143],["{Val,NewBytes} = begin",2828]],"useCount":7917},{"word":"NewStack","context":[["yeccgoto_auditReturnParameter(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",576],["yeccgoto_sigParameter(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",320],["yeccgoto_type(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",240],["yeccgoto_streamModes(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",240],["yeccgoto_servChgReplyParm(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",240],["yeccgoto_indAudauditReturnParameter(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",280],["yeccgoto_import_stuff(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",276],["yeccgoto_ammParameter(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",416],["yeccgoto_serviceChangeParm(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",504],["yeccgoto_auditReturnItem(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",624]],"useCount":58649},{"word":"NewState","context":[["{reply, ok, NewState};",491],["NewState =",570],["{ok, NewState} ->",490],["{noreply, NewState :: #state{}} |",321],["%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}",1010],["{noreply, NewState};",999],["%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}",904],["%% Returns: {ok, NewState}",402],["{ok, NewState};",381],["{reply, Reply, NewState};",357]],"useCount":24157},{"word":"NewStateData","context":[["%%%        {stop, Reason, NewStateData}",175],["NewStateData.",166],["%%%        {next_state, NewStateName, NewStateData, Timeout}",175],["%%%    ==> {next_state, NewStateName, NewStateData}",175],["NewStateData =",230],["%%          {stop, Reason, NewStateData}                          |",651],["%%          {stop, Reason, Reply, NewStateData}",653],["%%          {stop, Reason, NewStateData}",1064],["send_text(NewStateData,",154],["NewStateData#state.server,",127]],"useCount":9097},{"word":"NextStateName","context":[["%%          {next_state, NextStateName, NextStateData, Timeout} |",1039],["%%          {reply, Reply, NextStateName, NextStateData, Timeout} |",647],["%%          {next_state, NextStateName, NextStateData, Timeout}   |",647],["%% Returns: {next_state, NextStateName, NextStateData}            |",647],["%%          {reply, Reply, NextStateName, NextStateData}          |",647],["%%                   {next_state, NextStateName, NextState, Timeout} |",215],["%%                   {next_state, NextStateName, NextState} |",215],["%%                   {reply, Reply, NextStateName, NextState, Timeout} |",84],["%% Returns: {next_state, NextStateName, NextStateData}          |",1039],["%%                   {reply, Reply, NextStateName, NextState} |",84]],"useCount":6480},{"word":"Nick","context":[["nick = Nick,",266],["Name, Username, Remove, Key, City, Nick, Url,",290],["Username, Remove, Key, City, Nick, Url, Email) ->",353],["Nick),",565],["RoomShaper, Creator, Nick, DefRoomOpts],",117],["Creator, Nick, DefRoomOpts) ->",126],["Nick = Info#user.nick,",168],["jlib:jid_replace_resource(StateData#state.jid, Nick),",169],["case Nick of",215],["ejabberd_router:route % TODO: s/Nick/\"\"/",215]],"useCount":14023},{"word":"Nidx","context":[["set_subscriptions(Nidx, Owner, Subscription, SubId) ->",139],["get_node_subscriptions(Nidx) ->",139],["delete_item(Nidx, Publisher, PublishModel, ItemId) ->",131],["set_affiliation(Nidx, Owner, Affiliation) ->",139],["get_item(Nidx, ItemId) ->",139],["Nidx = TNode#pubsub_node.id,",168],["get_states(Nidx) ->",139],["create_node(Nidx, Owner) ->",139],["Action = fun (#pubsub_node{type = Type, id = Nidx}) ->",158],["Owners = node_owners_call(Host, Type, Nidx, O),",210]],"useCount":10765},{"word":"No","context":[["{type, wrap}, {size, {50, No}},",72],["?line No = 4,",75],["?fatal_error(State, \"No more bytes\");",75],["No",76],["No.",77],["%% No response has been generated!",84],["%% No status code has been generated!",99],["No + 1,",105],["No;",175],["?line del(File, No),",230]],"useCount":7648},{"word":"Node","context":[["ok = httpd_test_lib:verify_request(Type, Host, Port, Node,",570],["Node;",407],["stop_node(Node),",471],["case transaction(Host, Node, Action, sync_dirty) of",1546],["case unwrap(Node) of",1146],["case Node of",913],["Node ->",779],["Node",675],["Pos = get_pos(Node),",615],["node = Node,",529]],"useCount":102339},{"word":"NodeId","context":[["get_state(NodeId, JID) ->",150],["NodeId = TNode#pubsub_node.id,",358],["get_node_subscriptions(NodeId) ->",156],["get_item(NodeId, ItemId) ->",156],["remove_extra_items(NodeId, MaxItems, ItemIds) ->",154],["set_affiliation(NodeId, Owner, Affiliation) ->",154],["Action = fun(#pubsub_node{type = Type, id = NodeId}) ->",153],["Action = fun (#pubsub_node{type = Type, id = NodeId}) ->",150],["%%\t NodeId = mod_pubsub:pubsubNodeId()",191],["broadcast_stanza(Host, Node, NodeId, Type,",215]],"useCount":13621},{"word":"Nodes","context":[["Nodes;",147],["?verify_mnesia(Nodes, []).",846],["Nodes),",291],["end, Nodes),",225],["[Node1] = Nodes = ?acquire_nodes(1, Config),",222],["Nodes = ?acquire_nodes(3, Config ++ [{tc_timeout, timer:minutes(2)}]),",187],["[Coord, Part1, Part2] = Nodes,",180],["[Node1, Node2, Node3] = Nodes = ?acquire_nodes(3, Config),",176],["Nodes.",149],["end, Nodes).",135]],"useCount":15157},{"word":"Note","context":[["%% <p>Note: this is equivalent to",65],["%% Note: This directive should only be used in test suites.",581],["Sound, Note, Role, Title, Nickname, Rev,",542],["%% Note: This function is free to add any key/value pairs to the Config",367],["Sound, Note, Role, Title, Nickname, Rev, Sort_string,",275],["Desc, Uid, Prodid, Jabberid, Sound, Note, Role,",251],["Jabberid, Sound, Note, Role, Title, Nickname, Rev,",243],["%% Note:",87],["%% Note: The suite/0 function is only meant to be used to return",71],["%% Note prefix: oe_ei",68]],"useCount":7319},{"word":"Now","context":[["{Date, Time}   = calendar:now_to_datetime(Now),",87],["Now = os:timestamp(),",352],["Now = now(),",205],["Now = chef_object_base:sql_date(now),",167],["Now,",145],["Now = now_to_usec(now()),",141],["Now = nksip_lib:timestamp(),",102],["Now = calendar:local_time(),",102],["Now = erlang:now(),",99],["format_timestamp({_N1, _N2, N3} = Now) ->",85]],"useCount":6570},{"word":"Nss","context":[["yeccgoto_type(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",240],["[_,_|Nss] = Ss,",6475],["[_|Nss] = Ss,",2876],["[_,_,_|Nss] = Ss,",2240],["[_,_,_,_|Nss] = Ss,",1556],["[_,_,_,_,_|Nss] = Ss,",957],["[_,_,_,_,_,_|Nss] = Ss,",461],["yeccgoto_sigParameter(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",320],["yeccgoto_sigParameter(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",320],["yeccgoto_type(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",240]],"useCount":39721},{"word":"Num","context":[["e_object_element(Num) when Num < 128 ->",57],["'dec_MediaDescriptor_streams_multiStream_components'(Num, Bytes1, telltype, []).",54],["'dec_RequestedEvent_evParList_components'(Num, Bytes1, telltype, []).",54],["'dec_SeqSigList_signalList_components'(Num, Bytes1, telltype, []).",54],["'dec_PropertyGroup_components'(Num, Bytes1, telltype, []).",54],["Num ->",150],["Num;",107],["Num",61],["e_object_element(Num) when Num < 128 ->",57],["{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),",2152]],"useCount":15534},{"word":"O","context":[["Length = O1 - O,",132],["<<_:O/binary, ?Q, _/binary>> ->",134],["<<_:O/binary, E, _/binary>> when E =:= $e orelse E =:= $E ->",136],["<<_:O/binary>> ->",262],["<<_:O/binary, C, _/binary>> when C >= $0 andalso C =< $9 ->",272],["<<_:O/binary, C, _/binary>> when ?IS_WHITESPACE(C) ->",145],["Len = O - Start,",167],["Owners = node_owners_call(Host, Type, Nidx, O),",210],["<<_:O/binary, C, _/binary>> ->",218],["O ->",249]],"useCount":18454},{"word":"OCTET","context":[["%% attribute number 2 with type OCTET STRING",703],["%% attribute number 1 with type OCTET STRING",3301],["%% attribute eventName(1) with type OCTET STRING",374],["%% attribute pkgdName(1) with type OCTET STRING",264],["%% attribute address(1) with type OCTET STRING",264],["%% attribute digitMapName(1) with type OCTET STRING OPTIONAL",242],["%% attribute statName(1) with type OCTET STRING",242],["%% attribute name(1) with type OCTET STRING",242],["%% attribute signalName(1) with type OCTET STRING",242],["%% attribute packageName(1) with type OCTET STRING",242]],"useCount":8593},{"word":"OE_Options","context":[["corba:call(OE_THIS, validate_qos, [Required_qos], ?MODULE, OE_Options).",152],["corba:call(OE_THIS, get_qos, [], ?MODULE, OE_Options).",152],["corba:call(OE_THIS, set_qos, [Qos], ?MODULE, OE_Options).",152],["validate_qos(OE_THIS, OE_Options, Required_qos) ->",152],["set_qos(OE_THIS, OE_Options, Qos) ->",152],["get_qos(OE_THIS, OE_Options) ->",152],["corba:call(OE_THIS, remove_filter, [Filter], ?MODULE, OE_Options).",136],["corba:call(OE_THIS, get_all_filters, [], ?MODULE, OE_Options).",136],["get_all_filters(OE_THIS, OE_Options) ->",136],["remove_all_filters(OE_THIS, OE_Options) ->",136]],"useCount":8912},{"word":"OE_THIS","context":[["validate_qos(OE_THIS, OE_Options, Required_qos) ->",152],["get_qos(OE_THIS) ->",152],["corba:call(OE_THIS, set_qos, [Qos], ?MODULE, OE_Options).",152],["get_qos(OE_THIS, OE_Options) ->",152],["corba:call(OE_THIS, set_qos, [Qos], ?MODULE).",152],["corba:call(OE_THIS, validate_qos, [Required_qos], ?MODULE, OE_Options).",152],["corba:call(OE_THIS, get_qos, [], ?MODULE).",152],["corba:call(OE_THIS, get_qos, [], ?MODULE, OE_Options).",152],["set_qos(OE_THIS, OE_Options, Qos) ->",152],["validate_qos(OE_THIS, Required_qos) ->",152]],"useCount":23196},{"word":"OF","context":[["%% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",1101],["%% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",1101],["%% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",1101],["%% attribute number 2 with type SEQUENCE OF",1694],["%% attribute eventParList(3) with type SEQUENCE OF",264],["%% attribute evParList(4) with type SEQUENCE OF",264],["%% attribute number 4 with type SEQUENCE OF",987],["%% attribute number 1 with type SEQUENCE OF",841],["%% attribute number 3 with type SEQUENCE OF",487],["%% attribute eventList(2) with type SEQUENCE OF",264]],"useCount":14947},{"word":"OPTIONAL","context":[["%% attribute parameters(2) with type typefieldType OPTIONAL",222],["%% attribute digitMapName(1) with type OCTET STRING OPTIONAL",242],["%% attribute streams(2) with type CHOICE OPTIONAL",242],["%% attribute number 2 with type INTEGER OPTIONAL",420],["%% attribute portNumber(2) with type INTEGER OPTIONAL",396],["%% attribute extraInfo(3) with type CHOICE OPTIONAL",396],["%% attribute requestID(1) with type INTEGER OPTIONAL",330],["%% attribute keepActive(1) with type BOOLEAN OPTIONAL",264],["%% attribute serviceChangeVersion(3) with type INTEGER OPTIONAL",264],["%% attribute streamID(2) with type INTEGER OPTIONAL",880]],"useCount":16620},{"word":"OR","context":[["%%% LIABLE SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR",158],["%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR",153],["%%% LIABLE SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR",158],["%%% LIABLE SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR",158],["%% WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",197],["%% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",1101],["%% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",1101],["%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",226],["%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",226],["%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",226]],"useCount":6306},{"word":"Obj","context":[["invoke_pi_reply(PI, Obj, Ctx, Func, {'EXCEPTION', Exc}),",72],["Obj.",75],["destroy(Obj=#wx_ref{type=Type}) ->",1017],["wxe_util:destroy(?DESTROY_OBJECT,Obj),",871],["{ok, Obj} ->",177],["Obj;",102],["Obj = ?match({'IOP_IOR',\"IDL:omg.org/orber_test/server:1.0\",_},",86],["Obj = {struct, Props},",83],["F = fun(Obj, A) -> A++[Obj] end,",80],["F = fun(Obj, A) -> A++[Obj] end,",80]],"useCount":6966},{"word":"Op","context":[["case erl_eval:partial_eval(Op) of",80],["case Op of",605],["opt(Op, [{Op, Value}|_]) ->",48],["_ = erlang:port_control(Port,Op,Args),",48],["do_apply_op(Op, From, Head, N);",50],["RaceVarMap, Op);",54],["Used = union(op_vars(Op), lit_list_vars(As)),",58],["Op ->",71],["#reddy_op{name=Op,",76],["{ok, Op} ->",78]],"useCount":9446},{"word":"Opaques","context":[["fun (_) -> t_nil() end, Opaques);",86],["case t_is_nil(L, Opaques) of",135],["case t_is_cons(L, Opaques) of",105],["case t_is_cons(List, Opaques) of",105],["LhsMin = number_min(Lhs, Opaques),",90],["RhsMax = number_max(Rhs, Opaques),",90],["LhsMax = number_max(Lhs, Opaques),",90],["RhsMin = number_min(Rhs, Opaques),",90],["Opaques = State#state.opaques,",199],["end, Opaques);",754]],"useCount":16039},{"word":"Operation","context":[["%%%% Operation: set_qos",304],["%%%% Operation: destroy",224],["%%%% Operation: offer_change",224],["%%%% Operation: get_filter",272],["%%%% Operation: remove_filter",272],["%%%% Operation: add_filter",272],["%%%% Operation: remove_all_filters",272],["%%%% Operation: get_all_filters",272],["%%%% Operation: get_qos",304],["%%%% Operation: validate_qos",304]],"useCount":12992},{"word":"Opt","context":[["{Opt,Bytes2} = begin",1087],["?RT_PER:setext(false), Opt,",1494],["{Term3,Bytes5} = case Opt band (1 bsl 0) of",954],["{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),",828],["Opt,",691],["{Term2,Bytes4} = case Opt band (1 bsl 1) of",684],["{Val1,Opt} = ?RT_PER:fixoptionals([3],1,Val),",648],["Opt;",631],["handle_option(Rest, SocketOptions, [handle_ssh_option(Opt) | SshOptions]);",593],["{Term3,Bytes5} = case Opt band 1 of",531]],"useCount":33674},{"word":"OptOrMand","context":[["case {get_object_field(Name,ObjectFields),OptOrMand} of",104],["{{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),",390],["case OptOrMand of",283],["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["?RT_BER:decode_octet_string(Bytes,4,TagIn++[], no_length, OptOrMand).",90],["?RT_BER:decode_integer(Bytes,{0,4294967295},TagIn++[], OptOrMand).",54],["check_tags_i(Tags, Buffer, OptOrMand),",52],["OptOrMand),",52],["?RT_BER:decode_integer(Bytes,{0,65535},TagIn++[], OptOrMand).",48],["gen_enc_line(Erules,TopType,Cname,Type,Element,Indent,OptOrMand,",45]],"useCount":11039},{"word":"Option","context":[["Options :: [Option] | Option,",77],["-spec create(This, Parent, [Option]) -> boolean() when",83],["Option :: {id, integer()}",88],["-spec create(This, Parent, Id, [Option]) -> boolean() when",91],["%%   Options = [Option]",92],["Option :: {'pos', {X::integer(), Y::integer()}}",141],["Option :: {pos, {X::integer(), Y::integer()}}",188],["Options :: [Option],",341],["case Option of",391],["%% Args        \t: Option  - An option tuple",93]],"useCount":7158},{"word":"Options","context":[["disconnect(This,EventType, Options) -> wxEvtHandler:disconnect(This,EventType, Options).",633],["refreshRect(This,Rect, Options) -> wxWindow:refreshRect(This,Rect, Options).",606],["setScrollPos(This,Orient,Pos, Options) -> wxWindow:setScrollPos(This,Orient,Pos, Options).",606],["setScrollPos(This,Orient,Pos, Options) -> wxWindow:setScrollPos(This,Orient,Pos, Options).",606],["centre(This, Options) -> wxWindow:centre(This, Options).",606],["disconnect(This,EventType, Options) -> wxEvtHandler:disconnect(This,EventType, Options).",633],["connect(This,EventType, Options) -> wxEvtHandler:connect(This,EventType, Options).",633],["connect(This,EventType, Options) -> wxEvtHandler:connect(This,EventType, Options).",633],["when is_list(Options) ->",1452],["BinOpt = list_to_binary(lists:foldl(MOpts, [<<0:32>>], Options)),",3443]],"useCount":87394},{"word":"Opts","context":[["start(Host, Opts) ->",1215],["init(Host, ServerHost, Opts) ->",286],["| Opts],",676],["Opts),",506],["start_link(Host, Opts) ->",481],["Opts;",456],["init([Host, Opts]) ->",373],["IQDisc = gen_mod:get_opt(iqdisc, Opts, one_queue),",352],["IQDisc = gen_mod:get_opt(iqdisc, Opts, fun gen_iq_handler:check_type/1,",315],["?line try_test(use_no_rights, [], Opts),",301]],"useCount":84567},{"word":"Orient","context":[["getScrollRange(This,Orient) -> wxWindow:getScrollRange(This,Orient).",606],["getScrollRange(This,Orient) -> wxWindow:getScrollRange(This,Orient).",606],["setScrollPos(This,Orient,Pos) -> wxWindow:setScrollPos(This,Orient,Pos).",606],["setScrollPos(This,Orient,Pos) -> wxWindow:setScrollPos(This,Orient,Pos).",606],["getScrollThumb(This,Orient) -> wxWindow:getScrollThumb(This,Orient).",606],["getScrollPos(This,Orient) -> wxWindow:getScrollPos(This,Orient).",606],["setScrollPos(This,Orient,Pos, Options) -> wxWindow:setScrollPos(This,Orient,Pos, Options).",606],["setScrollPos(This,Orient,Pos, Options) -> wxWindow:setScrollPos(This,Orient,Pos, Options).",606],["hasScrollbar(This,Orient) -> wxWindow:hasScrollbar(This,Orient).",606],["getScrollThumb(This,Orient) -> wxWindow:getScrollThumb(This,Orient).",606]],"useCount":8617},{"word":"Other","context":[["io_lib:write(Other).",213],["yecctoken2string(Other) ->",213],["Other -> {error, Other}",226],["Other -> {error, Other}",226],["{error, Other}",329],["Other.",475],["Other -> Other",1933],["Other -> Other",1933],["Other",2995],["Other ->",9861]],"useCount":29797},{"word":"Owner","context":[["set_subscriptions(NodeId, Owner, Subscription, SubId) ->",148],["create_node(NodeId, Owner) ->",146],["Owner :: jid())",150],["SubKey = jid:tolower(Owner),",151],["set_affiliation(NodeId, Owner, Affiliation) ->",154],["create_node_permission(Host, ServerHost, Node, ParentNode, Owner, Access) ->",173],["get_entity_affiliations(Host, Owner) ->",256],["get_entity_subscriptions(Host, Owner) ->",257],["SubKey = jlib:jid_tolower(Owner),",293],["get_pending_nodes(Host, Owner) ->",304]],"useCount":12738},{"word":"P","context":[["case P of",200],["P=10003{C=2000{A=a4444,A=a4445{M{ST=1{L{",230],["P",271],["?line runner:recv_eot(P),",284],["P when is_pid(P) ->",298],["P when is_pid(P) ->",298],["P = ?config(props, Config),",334],["unlink(P),",206],["P ->",365],["P;",460]],"useCount":40766},{"word":"Packet","context":[["handle_info({route, From, To, Packet}, State) ->",256],["?assertMatch(\"220 localhost\"++_Stuff,  Packet),",270],["receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,",272],["IQ = jlib:iq_query_info(Packet),",313],["Packet)",332],["[Reason, {From, To, Packet}]);",332],["case catch do_route(From, To, Packet) of",335],["case jlib:iq_query_info(Packet) of",340],["Packet,",716],["Err = jlib:make_error_reply(Packet,",1613]],"useCount":37242},{"word":"Pad3","context":[["<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->",123],["V1@Pad3 = bit_size(Bytes) band 7,",1298],["<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->",1222],["<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->",1222],["<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->",449],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->",445],["V2@Pad3 = bit_size(Bytes2) band 7,",416],["<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->",123],["<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->",123]],"useCount":8402},{"word":"Params","context":[["Params = [{\"delimiter\", proplists:get_value(delimiter, Options)},",73],["Params = Req:parse_qs(),",68],["case Params of",77],["#server_key_params{params = Params,",84],["{'EXIT',{badarg,odbc,param_query,'Params'}} =",91],["Params = [{\"uid\", RootUid},",104],["Params =",137],["Params = list_to_ec2_filter(Filter),",150],["Params = Req:parse_post(),",163],["Params = [",348]],"useCount":9935},{"word":"Parent","context":[["Parent::wxWindow:wxWindow(),",158],["Parent = self(),",1760],["{'EXIT', Parent, Reason} ->",304],["?line Parent = self(),",300],["proc_lib:init_ack(Parent, {ok, self()}),",235],["new(Parent, []).",193],["when is_record(Parent, wx_ref) ->",192],["new(Parent)",192],["%% @equiv new(Parent, [])",188],["Parent::wxWindow:wxWindow().",158]],"useCount":18677},{"word":"Password","context":[["Password, Registered, Date, Phone, State, Name,",379],["First, Password, Registered, Date, Phone, State,",356],["%% @spec (User::string(), Server::string(), Password::string()) ->",150],["%%     Password = string()",152],["Password;",161],["Password)",162],["Instructions, Text, Last, First, Password,",171],["remove_user(User, Server, Password) ->",182],["set_password(User, Server, Password) ->",210],["check_password(User, Server, Password) ->",220]],"useCount":14859},{"word":"Path","context":[["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["case Path of",252],["path_to_node(Path) ->",262],["Path;",301],["case file:read_file_info(Path) of",314],["[filename:absname(Path), node(), Reason]),",338],["Path",404],["Path ->",657],["%%    ?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",945],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587]],"useCount":39015},{"word":"Pid","context":[["Pid;",925],["%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}",908],["%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}",817],["Pid.",1019],["Pid when is_pid(Pid) ->",1050],["Pid when is_pid(Pid) ->",1050],["{ok, Pid};",1232],["Pid ->",1848],["{ok, Pid} ->",2264],["{ok, Pid} = start_link(test_ip(), test_port()),",804]],"useCount":105395},{"word":"Port","context":[["Client = ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",1201],["Port = ssl_test_lib:inet_port(Server),",2272],["port = Port,",639],["ok = httpd_test_lib:verify_request(Type, Host, Port, Node,",570],["Client = ssl_test_lib:start_client([{node, ServerNode}, {port, Port},",449],["ssh_test_lib:connect(Host, Port, [{silently_accept_hosts, true},",438],["Port :: port() | atom(),",426],["{port, Port}, {host, Hostname},",384],["Port;",349],["{port, Port},",334]],"useCount":60911},{"word":"Pos","context":[["setScrollPos(This,Orient,Pos) -> wxWindow:setScrollPos(This,Orient,Pos).",606],["setScrollbar(This,Orient,Pos,ThumbVisible,Range) -> wxWindow:setScrollbar(This,Orient,Pos,ThumbVisible,Range).",598],["when is_integer(Pos) ->",317],["Pos;",272],["<<ThisRef:32/?UI,Pos:32/?UI>>).",257],["setScrollPos(This,Orient,Pos, Options) -> wxWindow:setScrollPos(This,Orient,Pos, Options).",606],["setScrollPos(This,Orient,Pos) -> wxWindow:setScrollPos(This,Orient,Pos).",606],["setScrollPos(This,Orient,Pos, Options) -> wxWindow:setScrollPos(This,Orient,Pos, Options).",606],["Pos = get_pos(Node),",615],["setScrollbar(This,Orient,Pos,ThumbVisible,Range) -> wxWindow:setScrollbar(This,Orient,Pos,ThumbVisible,Range).",598]],"useCount":20396},{"word":"Prefix","context":[["%% Namespaces = list of {Prefix, URI} (prefix can be []).",78],["case Prefix of",114],["Pf = lists:reverse(Prefix),",110],["%%           Prefix = string()",100],["bundle_instance(InstanceID, Bucket, Prefix, AccessKeyID, UploadPolicy,",78],["{prefix, \"Prefix\", text},",78],["Suffix, Prefix, Family, Given) ->",66],["redirect({node, Page}, Prefix);",66],["Prefix;",62],["case lists:keysearch(Prefix, 1, Ns) of",59]],"useCount":9097},{"word":"PrivDir","context":[["PrivDir = ?config(priv_dir, Config),",1565],["PrivDir = proplists:get_value(priv_dir, Config),",632],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["?line PrivDir = ?config(priv_dir, Config),",331],["PrivDir = priv_dir(Conf),",242],["{priv_dir, PrivDir} = lists:keyfind(priv_dir, 1, Config),",186],["PrivDir = ?config(priv_dir,Config),",176],["PrivDir = ?privdir,",142],["{user_dir, PrivDir},",136],["PrivDir =  ?config(priv_dir, Config),",232]],"useCount":7858},{"word":"Proc","context":[["gen_server:start_link({local, Proc}, ?MODULE,",190],["ChildSpec = {Proc, {?MODULE, start_link, [Host, Opts]},",223],["{Proc,",171],["{wait, Proc}.",107],["gen_server:start_link({local, Proc}, ?MODULE, [Host, Opts], []).",244],["supervisor:terminate_child(ejabberd_sup, Proc),",363],["Proc = gen_mod:get_module_proc(Host, ?MODULE),",383],["gen_server:call(Proc, stop),",396],["supervisor:delete_child(ejabberd_sup, Proc).",499],["Proc = gen_mod:get_module_proc(Host, ?PROCNAME),",1284]],"useCount":7393},{"word":"Props","context":[["json_encode_proplist(Props, State);",147],["Props;",142],["U = proplists:get_value(username, Props, <<>>),",109],["Props.",103],["obj_from_list(Props) ->",98],["{ok, Props, ServerOut} ->",92],["[$, | Acc1] = lists:foldl(F, \"{\", Props),",86],["Props ->",86],["Props = [PP],",225],["{ok, Props} ->",252]],"useCount":6747},{"word":"Pt","context":[["screenToClient(This,Pt) -> wxWindow:screenToClient(This,Pt).",606],["drawEllipse(This,Pt,Sz) -> wxDC:drawEllipse(This,Pt,Sz).",54],["drawEllipse(This,Pt,Sz) -> wxDC:drawEllipse(This,Pt,Sz).",54],["move(This,Pt) -> wxWindow:move(This,Pt).",606],["move(This,Pt) -> wxWindow:move(This,Pt).",606],["isExposed(This,Pt) -> wxWindow:isExposed(This,Pt).",606],["screenToClient(This,Pt) -> wxWindow:screenToClient(This,Pt).",606],["clientToScreen(This,Pt) -> wxWindow:clientToScreen(This,Pt).",606],["isExposed(This,Pt) -> wxWindow:isExposed(This,Pt).",606],["clientToScreen(This,Pt) -> wxWindow:clientToScreen(This,Pt).",606]],"useCount":6788},{"word":"Purpose","context":[["%% Purpose    \t: Take care of options",98],["%% Purpose    \t: Read one option from a widget",98],["%%% Purpose :",454],["%% Purpose: Convert process state when code is changed",431],["%% Purpose: Shutdown the fsm",358],["%% Purpose: Shutdown the server",300],["%% Purpose :",200],["%% Purpose: Prepare the state to be printed on error log",183],["%% Purpose   :",174],["%% Purpose:",148]],"useCount":8912},{"word":"Q","context":[["[] = qlc:e(Q),",208],["false = lookup_keys(Q)",344],["?Q ->",204],["case queue:out(Q) of",173],["<<\"Q = qlc:q([{XX,YY} ||",120],["Q;",127],["[?Q, L, ?Q];",130],["[?Q, L, ?Q];",130],["<<_:O/binary, ?Q, _/binary>> ->",134],["Q = qlc:q([X || {X} <- ets:table(E),",152]],"useCount":14907},{"word":"Query","context":[["Query)",180],["q = Query,",252],["?DEBUG(\"query: ~p\", [Query]),",166],["case lists:keysearch(<<\"delete\">>, 1, Query) of",146],["1, Query),",125],["1, Query)",100],["Query),",101],["auth = {_, _Auth, AJID}, q = Query, lang = Lang}) ->",104],["Query = case SubKey of",108],["case Query of",116]],"useCount":10826},{"word":"R","context":[["check_result(R, \"not-wf\").",1061],["?line check_result(R, \"not-wf\").",5305],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["%%    ?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",945],["R ->",973],["R.",1090],["case R of",1244],["R;",1259],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587],["?line check_result(R, \"valid\").",1695]],"useCount":87381},{"word":"RT_BER","context":[["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),",5277],["?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).",2652],["?RT_BER:encode_tags(TagIn, EncBytes, EncLen).",2229],["{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),",1351],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["{EncBytes1,EncLen1} = ?RT_BER:encode_octet_string([], Cindex1, [<<128>>]),",620],["{EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<128>>]),",510],["Term1 = ?RT_BER:decode_octet_string(V1,4,[131072]),",444]],"useCount":45082},{"word":"RT_PER","context":[["{Ext,Bytes1} = ?RT_PER:getext(Bytes),",2700],["?RT_PER:encode_length(undefined,length(Val)),",2152],["{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),",2152],["?RT_PER:setext(false), Opt,",1494],["{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),",900],["{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),",828],["Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)",684],["?RT_PER:setext(false),",684],["{Ext,Bytes1} = ?RT_PER:getbit(Bytes),",666],["{Val1,Opt} = ?RT_PER:fixoptionals([3],1,Val),",648]],"useCount":52656},{"word":"Reason","context":[["%%                                      {stop, Reason, State}",1836],["{error, Reason} ->",18938],["{error, Reason}",5882],["{'EXIT', Reason} ->",3622],["{error, Reason};",2698],["{error,Reason} ->",1936],["case Reason of",1666],["%% Reason = term()",1648],["{'EXIT',Reason} ->",1645],["%%          {stop, Reason, State}            (terminate/2 is called)",1468]],"useCount":160529},{"word":"Record","context":[["render_element(Record) ->",656],["svg_core(Record),",74],["svg_core(Record)-> [",74],["{Record, State} = next_record(State0),",77],["Type = element(1, Record),",86],["Record;",99],["render_action(Record) ->",131],["| encode_extensions(Record)];",289],["Record) ->",469],["Record, Name, Val)",489]],"useCount":10112},{"word":"Ref","context":[["{ok, Ref} ->",372],["erlang:demonitor(Ref),",333],["Ref = make_ref(),",2397],["Ref ->",561],["Ref = erlang:monitor(process, Pid),",525],["Ref = ?config(connection_ref, Config),",502],["odbc:sql_query(Ref,  \"CREATE TABLE \" ++ Table ++",349],["odbc:sql_query(Ref,",348],["orber_ifr:destroy(Ref),",340],["reply(From, Res, Ref),",328]],"useCount":30567},{"word":"Remain","context":[["{Term,Remain} = 'dec_TerminationID'(Bytes,telltype),",108],["{Term,Remain} = 'dec_PropertyParm'(Bytes,telltype),",252],["{Term,Remain} = 'dec_EventParameter'(Bytes,telltype),",216],["{Term,Remain} = 'dec_IndAudPropertyParm'(Bytes,telltype),",171],["{Term,Remain} = dec_PropertyParm(Bytes),",140],["{Term,Remain} = begin",130],["{Term,Remain} = dec_EventParameter(Bytes),",120],["{Term,Remain} = dec_IndAudPropertyParm(Bytes),",95],["%%    (Buffer, Range, HasTag, TotalLen) -> {String, Remain, RemovedBytes}",64],["{Term,Remain} = ?RT_PER:decode_octet_string(Bytes,[]),",72]],"useCount":7395},{"word":"Reply","context":[["%%                                   {stop, Reason, Reply, State} |",659],["Reply;",664],["Reply =",696],["%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |",770],["Reply",845],["%%                                      {stop, Reason, Reply, State} |",937],["%%                                      {reply, Reply, State, Timeout} |",955],["{reply, Reply, State}.",1674],["{reply, Reply, State};",2510],["Reply = ok,",2782]],"useCount":42982},{"word":"Req","context":[["%% Req. system group, Klas1, OLD-SNMPEA-MIB",245],["Req;",247],["init(Req, Opts) ->",262],["when Req::cowboy_req:req().",265],["%% Req. Test1",282],["content_types_provided(Req, State) ->",368],["%% Req. SNMP-STANDARD-MIB | SNMPv2-MIB",392],["handle(Req, State) ->",408],["allowed_methods(Req, State) ->",537],["{ok, Req, State}.",435]],"useCount":66480},{"word":"Req2","context":[["{ok, Req2, HandlerState2} ->",95],["{stop, Req2, HandlerState} ->",77],["terminate(Req2, State#state{handler_state=HandlerState});",261],["{ok, Req2, State}.",236],["{halt, Req2, HandlerState} ->",184],["{undefined, Req2} ->",145],["{ok, Req2, HandlerState} ->",110],["{ok, undefined, Req2} ->",109],["{Method, Req2} = cowboy_req:method(Req),",105],["Req2.",96]],"useCount":8337},{"word":"ReqData","context":[["process_post(ReqData, Context) ->",97],["resource_exists(ReqData, Context) ->",150],["{[], ReqData, Context}.",165],["allowed_methods(ReqData, Context) ->",167],["content_types_provided(ReqData, Context) ->",210],["{undefined, ReqData, Context}.",217],["{true, ReqData, Context}.",449],["{false, ReqData, Context}.",650],["is_authorized(ReqData, Context) ->",132],["charsets_provided(ReqData, Context) ->",102]],"useCount":7637},{"word":"ReqState","context":[["{Reply, ReqState};",105],["Hdrs, ReqState#wm_reqstate.reqdata)}};",70],["case ReqState#wm_reqstate.bodyfetch of",70],["{stream_conflict, ReqState};",70],["put(reqstate, ReqState),",68],["{wrq:get_req_header(K, ReqState#wm_reqstate.reqdata), ReqState};",55],["{wrq:get_req_header(K, ReqState#wm_reqstate.reqdata), ReqState};",55],["{ReqState#wm_reqstate.peer, ReqState}",45],["{ReqState#wm_reqstate.peer, ReqState}",45],["{ok, ReqState} = set_reqdata(ReqData, #wm_reqstate{}),",40]],"useCount":7030},{"word":"Request","context":[["adhoc:produce_response(Request,",263],["case Request of",160],["%%            Request = #request{}",186],["Request,",190],["handle_cast(Request, State) ->",198],["handle_call(Request, From, State) ->",296],["handle_call(Request, _From, State) ->",453],["%% @spec handle_call(Request, From, State) ->",659],["%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |",770],["Request) ->",159]],"useCount":18031},{"word":"Res","context":[["Res -> Res",724],["Res -> Res",724],["Res ->",1319],["Res.",2309],["Res",2379],["Res;",2735],["case Res of",3968],["Res =",720],["Res = IQ#iq{type = result,",505],["send_element(StateData, Res),",363]],"useCount":50627},{"word":"Resource","context":[["LResource = jlib:resourceprep(Resource),",205],["LResource = jid:resourceprep(Resource),",129],["jlib:make_jid(User, Server, Resource),",117],["case Resource of",108],["{User, Server, Resource} = jlib:jid_tolower(JID),",106],["JID = jlib:make_jid(User, Server, Resource),",100],["Resource),",95],["Resource = StateData#state.resource,",94],["Resource = get(resource),",91],["lists:foreach(fun(Resource) ->",92]],"useCount":7277},{"word":"Response","context":[["Response;",140],["input_tests(Response, Tests).",426],["Response = \"",327],["Response.",275],["Response",265],["case Response of",225],["?assertEqual({200, \"OK\"}, status(Response)),",209],["Response ->",196],["{ok, Response} ->",143],["adhoc:produce_response(Response);",345]],"useCount":8298},{"word":"Rest","context":[["count(Rest, N + 1, Config);",1401],["%% Parameters: Rest = string() | binary()",1050],["case Rest of",837],["handle_option(Rest, SocketOptions, [handle_ssh_option(Opt) | SshOptions]);",593],["%% Result    : {Rest, State}",575],["%% Input:    Rest = string() | binary()",500],["NewRest = Push ++ Rest,",396],["Rest;",381],["validate_config_params(Rest);",362],["{lists:reverse(Acc), Rest};",337]],"useCount":89504},{"word":"Result","context":[["Result -> Result",753],["Result",2639],["Result -> Result",753],["{result, Result};",588],["%% Result    : {Rest, State}",575],["case Result of",3317],["Result =",912],["Result;",1919],["Result ->",2285],["Result.",2312]],"useCount":52645},{"word":"Ret","context":[["?assertEqual(Expected, Ret)",92],["Ret =",119],["leex:file(Filename, Ret),",157],["(Ret == In) and (Out == In).",192],["Ret ->",224],["Ret.",309],["case Ret of",354],["Ret;",387],["Ret",401],["yecc:file(Filename, Ret),",370]],"useCount":7552},{"word":"RetVal","context":[["%%   Returns: RetVal",10332],["%%   Returns: RetVal, Available_qos",528],["%%   Returns: RetVal, Has_event",144],["%%   Returns: RetVal, Nproperties",80],["%%   Returns: RetVal, Property_names, Rest",64],["%%   Returns: RetVal, Nproperties, Rest",64],["%%   Returns: RetVal, Id",64],["%%   Returns: RetVal, Proxy_id",64],["%%   Returns: RetVal, Property_modes",48],["%%   Returns: RetVal, Property_defs",48]],"useCount":12019},{"word":"Return","context":[["Return -> Return",319],["Return;",119],["case Return of",123],["%% Return \t: [true | {bad_result, Reason}]",156],["%% Return    :",174],["{Return, State}.",177],["Return = erlcloud_ddb_impl:request(",188],["Return -> Return",319],["%% Return Value:",419],["%% Return {ok, DeepIoList} | {error, Reason}",438]],"useCount":10320},{"word":"Returns","context":[["%% Returns: {next_state, NextStateName, NextStateData}            |",647],["%%   Returns: RetVal",10332],["%% Returns  :",1192],["%% Returns: {next_state, NextStateName, NextStateData}          |",1039],["%% Returns: {noreply, State}          |",961],["%% Returns:",922],["%%   Returns: RetVal, Available_qos",528],["%% Returns: {ok, State}          |",506],["%% Returns: {reply, Reply, State}          |",491],["%% Returns: any (ignored by gen_server)",482]],"useCount":31147},{"word":"Role","context":[["Desc, Uid, Prodid, Jabberid, Sound, Note, Role,",251],["Jabberid, Sound, Note, Role, Title, Nickname, Rev,",243],["case Role of",195],["role = Role,",188],["SRole = role_to_list(Role),",96],["set_role(JID, Role, StateData) ->",65],["Sound, Note, Role, Title, Nickname, Rev, Sort_string,",275],["add_online_user(JID, Nick, Role, StateData) ->",64],["search_role(Role, StateData) ->",64],["Sound, Note, Role, Title, Nickname, Rev,",542]],"useCount":6842},{"word":"Room","context":[["#iq{type = set, to = Room,",81],["RoomAddr = room_address(Room),",81],["gen_fsm:start_link(?MODULE, [Host, ServerHost, Access, Room, HistorySize,",94],["case mnesia:dirty_read(muc_online_room, {Room, Host}) of",99],["room = Room,",101],["register_room(Host, Room, Pid),",105],["Room = StateData#state.room,",128],["Room = muc_room_jid(Config),",136],["Room, HistorySize,",164],["Room = ?config(room, Config),",170]],"useCount":6758},{"word":"Rs","context":[["{ok, Rs} ->",311],["end, Rs)",108],["end, Rs);",115],["Rs",134],["{atomic, Rs} ->",150],["Rs ->",194],["Rs when is_list(Rs) ->",225],["Rs when is_list(Rs) ->",225],["Rs);",121],["Rs;",133]],"useCount":10722},{"word":"S","context":[["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108],["S.",1472],["{noreply, S};",1238],["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["S;",2044],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587]],"useCount":402280},{"word":"S1","context":[["US1 = {U1, S1},",191],["fun(S1) -> ?fatal(unexpected_end, S1) end,",248],["S1;",179],["{_,T1,S1} = mandatory_strip(T,S),",171],["V = make_object({struct, lists:reverse(Acc)}, S1),",142],["{start_object, S1} ->",136],["{comma, S1} ->",136],["{end_object, S1} ->",136],["{end_array, S1} ->",136],["fun(S1) -> ?fatal(unexpected_end, S1) end,",248]],"useCount":16640},{"word":"S2","context":[["noreply(S2);",318],["S2 =",77],["S2",83],["{error, Reason, S2}",83],["[unihex(S1), unihex(S2)].",86],["S2 = 16#dc00 bor (N band 16#3ff),",86],["decode_array(B, S2#decoder{state=comma}, [Array | Acc]);",130],["{ok, S2};",134],["S2;",139],["gen_tcp:close(S2),",70]],"useCount":9918},{"word":"SC","context":[["put(sc, SC),",53],["case SC#sconf.ssl of",53],["SC2 = SC#sconf{docroot = hd(SC#sconf.xtra_docroots),",54],["SC2 = SC#sconf{docroot = hd(SC#sconf.xtra_docroots),",54],["xtra_docroots = tl(SC#sconf.xtra_docroots)},",54],["SC;",55],["SC",96],["SC = get(sc),",256],["SC=get(sc),",280],["case ets:lookup(SC#sconf.ets, Key) of",54]],"useCount":6295},{"word":"SEQUENCE","context":[["%% attribute actions(2) with type SEQUENCE OF",193],["%% attribute number 3 with type SEQUENCE OF",487],["%% attribute number 1 with type SEQUENCE OF",841],["%% attribute eventList(2) with type SEQUENCE OF",264],["%% attribute evParList(4) with type SEQUENCE OF",264],["%% attribute number 4 with type SEQUENCE OF",987],["%% attribute number 2 with type SEQUENCE OF",1694],["%% attribute number 5 with type SEQUENCE OF",185],["%% attribute eventParList(3) with type SEQUENCE OF",264],["%% attribute propertyParms(1) with type SEQUENCE OF",242]],"useCount":9549},{"word":"SERVER","context":[["supervisor:start_link({local, ?SERVER}, ?MODULE, []).",877],["gen_server:start_link({local, ?SERVER}, ?MODULE,",47],["%% TEST SERVER CALLBACK FUNCTIONS",171],["gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).",1087],["-define(SERVER, ?MODULE).",3629],["gen_server:call(?SERVER, stop).",120],["gen_server:cast(?SERVER, stop).",103],["case whereis(?SERVER) of",69],["gen_server:start({local, ?SERVER}, ?MODULE, [], []).",54],["gen_event:start_link({local, ?SERVER}).",47]],"useCount":7722},{"word":"SNMP","context":[["?line unload_master(\"SNMP-FRAMEWORK-MIB\"),",221],["?line unload_master(\"SNMP-NOTIFICATION-MIB\"),",264],["%% Req. SNMP-STANDARD-MIB | SNMPv2-MIB",392],["?line unload_master(\"SNMP-VIEW-BASED-ACM-MIB\"),",264],["?line load_master_std(\"SNMP-VIEW-BASED-ACM-MIB\"),",362],["?line load_master_std(\"SNMP-TARGET-MIB\"),",356],["?line load_master_std(\"SNMP-NOTIFICATION-MIB\"),",356],["?line load_master_std(\"SNMP-COMMUNITY-MIB\"),",313],["?line load_master_std(\"SNMP-FRAMEWORK-MIB\"),",313],["?line unload_master(\"SNMP-TARGET-MIB\"),",264]],"useCount":8109},{"word":"STRING","context":[["%% attribute digitMapName(1) with type OCTET STRING OPTIONAL",242],["%% attribute pkgdName(1) with type OCTET STRING",264],["%% attribute address(1) with type OCTET STRING",264],["%% attribute eventName(1) with type OCTET STRING",374],["%% attribute number 2 with type OCTET STRING",703],["%% attribute number 1 with type OCTET STRING",3301],["%% attribute name(1) with type OCTET STRING",242],["%% attribute statName(1) with type OCTET STRING",242],["%% attribute signalName(1) with type OCTET STRING",242],["%% attribute packageName(1) with type OCTET STRING",242]],"useCount":12784},{"word":"Sections","context":[["%% Sections: 3.4",228],["%% Sections: 2.2",204],["%% Sections: 3.3.1",510],["%% Sections: 2.8",486],["%% Sections: 2.3",402],["%% Sections: 2.2 [2]",336],["%% Sections: 3",234],["%% Sections: 3.1",252],["%% Sections: 4.1",306],["%% Sections: B.",1908]],"useCount":10572},{"word":"See","context":[["%% See {@link texCoord1d/1}",120],["%% See {@link color3b/3}",120],["%% Returns    : See cosProperty application.",152],["%%% See the NOTICE for more information.",240],["%%      See the MapReduce documentation for explanation of behavior.",120],["%% See {@link programUniform1i/3}",392],["%% See {@link uniform1f/2}",392],["%% See {@link vertexAttrib1d/2}",272],["%%\tSee `clause' for documentation on `erl_parse' clauses.",99],["%% See {@link multiTexCoord1d/2}",120]],"useCount":7185},{"word":"Self","context":[["{trace,Self,exception_from,",42],["?line trace_info(Self, flags),",56],["Fun   = fun() -> Self ! Msg end,",56],["Self  = self(),",62],["Self ->",63],["%% Arguments: Self  - its own object reference.",76],["?line Self = self(),",252],["Self = self(),",3598],["Self ! done",40],["{trace,Self,exception_from,{erlang,error,1},",36]],"useCount":6288},{"word":"Server","context":[["Server =",601],["LServer = jlib:nameprep(Server),",2143],["ssl_test_lib:close(Server),",1947],["Server = ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",1159],["Port = ssl_test_lib:inet_port(Server),",2272],["ssl_test_lib:check_result(Server, ok, Client, ok),",938],["LServer = jid:nameprep(Server),",914],["Server,",733],["remove_user(User, Server) ->",649],["%% Server functions",460]],"useCount":63553},{"word":"ServerHost","context":[["ets:insert(gen_mod:get_module_proc(ServerHost, config),",175],["create_node_permission(Host, ServerHost, Node, ParentNode, Owner, Access) ->",173],["{ok, ServerNode, ServerHost} =",156],["LServer = jlib:nameprep(ServerHost),",152],["ServerHost,",151],["#state{host = Host, server_host = ServerHost,",147],["ServerHost :: binary(),",294],["init(Host, ServerHost, Opts) ->",286],["terminate(Host, ServerHost) ->",285],["server_host = ServerHost,",222]],"useCount":19031},{"word":"ServerNode","context":[["?match(ok, orber_test_lib:remote_apply(ServerNode, orber_test_lib,",199],["Client = ssl_test_lib:start_client([{node, ServerNode}, {port, Port},",449],["Server = ssl_test_lib:start_server_error([{node, ServerNode}, {port, 0},",192],["ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",508],["Server = ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",1159],["{ClientNode, ServerNode, Hostname} = ssl_test_lib:run_where(Config),",2430],["{_, ServerNode, _} = ssl_test_lib:run_where(Config),",161],["{ok, ServerNode, ServerHost} =",156],["ServerPort = orber_test_lib:remote_apply(ServerNode, orber, iiop_port, []),",326],["{ok, ServerNode, _ServerHost} =",267]],"useCount":7746},{"word":"ServerOpts","context":[["{options, [{active, false} | ServerOpts]}]),",160],["| ServerOpts]}]),",194],["CertFile = proplists:get_value(certfile, ServerOpts),",198],["ServerOpts = ssl_test_lib:ssl_options(server_opts, Config),",878],["KeyFile = proplists:get_value(keyfile, ServerOpts),",159],["ServerOpts]}]),",144],["{ssl_options, ServerOpts}]),",99],["ServerOpts = ?config(server_verification_opts, Config),",130],["{options, ServerOpts}]),",1033],["ServerOpts = ?config(server_opts, Config),",1257]],"useCount":6257},{"word":"Session","context":[["%%    Session = pid()",109],["\"^ *< Session-Id\",",70],["{ok, Session} ->",90],["activate_once(Session),",89],["session = Session,",84],["[Session] ->",75],["Session ->",74],["Session = lists:max(Ss),",254],["Pid = element(2, Session#session.sid),",140],["Session;",132]],"useCount":6710},{"word":"Set","context":[["Set ->",81],["Set",190],["_ -> Set",116],["Set.",80],["pack_jid_set(Set, Pack) ->",79],["Set;",77],["%% Set some paths",104],["lists:sublist(Set, Start, Limit)",72],["Set = lists:keysort(1, Users),",72],["remove_element(E, Set) ->",97]],"useCount":8782},{"word":"Size","context":[["setVirtualSize(This,Size) -> wxWindow:setVirtualSize(This,Size).",606],["cacheBestSize(This,Size) -> wxWindow:cacheBestSize(This,Size).",606],["cacheBestSize(This,Size) -> wxWindow:cacheBestSize(This,Size).",606],["setClientSize(This,Size) -> wxWindow:setClientSize(This,Size).",606],["setClientSize(This,Size) -> wxWindow:setClientSize(This,Size).",606],["Size ->",354],["setVirtualSize(This,Size) -> wxWindow:setVirtualSize(This,Size).",606],["case Size of",303],["Size.",203],["shaper:update(StateData#state.room_shaper, Size),",190]],"useCount":22500},{"word":"Sizer","context":[["setSizer(This,Sizer) -> wxWindow:setSizer(This,Sizer).",606],["setSizer(This,Sizer, Options) -> wxWindow:setSizer(This,Sizer, Options).",606],["setSizer(This,Sizer) -> wxWindow:setSizer(This,Sizer).",606],["setSizerAndFit(This,Sizer, Options) -> wxWindow:setSizerAndFit(This,Sizer, Options).",606],["setContainingSizer(This,Sizer) -> wxWindow:setContainingSizer(This,Sizer).",606],["setContainingSizer(This,Sizer) -> wxWindow:setContainingSizer(This,Sizer).",606],["setSizer(This,Sizer, Options) -> wxWindow:setSizer(This,Sizer, Options).",606],["setSizerAndFit(This,Sizer) -> wxWindow:setSizerAndFit(This,Sizer).",606],["setSizerAndFit(This,Sizer, Options) -> wxWindow:setSizerAndFit(This,Sizer, Options).",606],["setSizerAndFit(This,Sizer) -> wxWindow:setSizerAndFit(This,Sizer).",606]],"useCount":7233},{"word":"Sock","context":[["gen_tcp:close(Sock),",391],["?line ok   = close(Sock),",92],["ok = gen_tcp:close(Sock).",107],["inet:setopts(Sock, [{active, once}]),",107],["?line {ok,Sock} = connect(),",117],["ok = gen_tcp:close(Sock),",134],["{ok,Sock} ->",147],["?line {ok, {101, _}} = wsopen(Sock, Key, WSPath, \"http://localhost\", 13),",160],["?line {ok, Sock}     = open(\"localhost\", 8000),",176],["{ok, Sock} ->",481]],"useCount":9012},{"word":"Socket","context":[["socket:active_once(Socket),",283],["= gen_tcp:recv(Socket, 0, 6000),",327],["Socket = StateData#state.socket,",282],["ok = gen_tcp:send(Socket, [",272],["{ok, Socket} ->",1454],["gen_tcp:close(Socket),",739],["socket = Socket,",722],["{tcp_closed, Socket} ->",434],["inet:setopts(Socket, [{active, once}]),",345],["Socket,",366]],"useCount":46262},{"word":"Source","context":[["blit(This,DestPt,Sz,Source,SrcPt, Options) -> wxDC:blit(This,DestPt,Sz,Source,SrcPt, Options).",54],["blit(This,DestPt,Sz,Source,SrcPt) -> wxDC:blit(This,DestPt,Sz,Source,SrcPt).",54],["blit(This,DestPt,Sz,Source,SrcPt, Options) -> wxDC:blit(This,DestPt,Sz,Source,SrcPt, Options).",54],["[Source, SMFA]);",60],["case Source of",65],["%% This Source Code Form is subject to the terms of",75],["%% This Source Code Form is subject to the terms of the Mozilla Public",96],["source = Source,",101],["%%% This Source Code Form is subject to the terms of the Mozilla Public",101],["%%   This Source Code Form is subject to the terms of the Mozilla Public",141]],"useCount":6519},{"word":"Src","context":[["assert_term(Src, Vst),",223],["case Src of",122],["btb_ensure_not_used([Src], I, Regs),",60],["Src = conv_opnd(Src0, FPoff, Context),",60],["NewSrc = ra_temp(Src, Map),",64],["pp_src(Dev, Src),",64],["float_op(Src, Dst, Vst);",70],["assert_term(Src, Vst0),",70],["NewSrc = do_reg(Src),",81],["pp_temp(Dev, Src),",107]],"useCount":6202},{"word":"Ss","context":[["[_,_,_,_|Nss] = Ss,",1556],["[_,_|Nss] = Ss,",6475],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["[_|Nss] = Ss,",2876],["[_,_,_|Nss] = Ss,",2240],["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188],["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108]],"useCount":465529},{"word":"St","context":[["{error,St#compile{errors=St#compile.errors ++ Es}}",250],["St;",403],["St",328],["{ok, St}.",324],["wait_req_scan(St)",128],["{noreply, St}.",156],["St.",281],["{error,St#compile{errors=St#compile.errors ++ Es}}",250],["{noreply, St};",242],["E1 = expr(E0,St),",130]],"useCount":38842},{"word":"St0","context":[["visit_application_final(F, As, Tree, St0)",99],["run_test_case_msgloop(St0);",84],["{E1,Eps,St1} = expr(E0, St0),",72],["{New,St1} = new_var_name(St0),",66],["{V,St1} = new_var(St0),",57],["St0",104],["{Evt,St1} = expr(E, Vt, St0),",77],["{E,St1} = expr(E0, St0),",90],["St0) ->",88],["{Es1,St1} = exprs(Es0, St0),",72]],"useCount":16839},{"word":"St1","context":[["{E,St1} = expr(E0, St0),",90],["St1",77],["{Es1,St1} = exprs(Es0, St0),",72],["{E1,Eps,St1} = expr(E0, St0),",72],["{Evt,St1} = expr(E, Vt, St0),",77],["St1;",68],["{New,St1} = new_var_name(St0),",66],["{V,St1} = new_var(St0),",57],["{Cs,St1} = clauses(Cs0, St0),",56],["Comment0, {St0,St1}) ->",55]],"useCount":13221},{"word":"Stack","context":[["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccpars1(S, 17, Ss, Stack, T, Ts, Tzr);",1027],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108],["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188],["yeccpars2_22(_S, Cat, Ss, Stack, T, Ts, Tzr);",1015],["yeccpars1(S, 52, Ss, Stack, T, Ts, Tzr);",1084],["yeccpars1(S, 23, Ss, Stack, T, Ts, Tzr);",1053],["yeccpars1(S, 18, Ss, Stack, T, Ts, Tzr);",1051]],"useCount":451639},{"word":"Start","context":[["%% Start the MGC and MGs",79],["?debugFmt(\"wwe debugging fold/5 ===> Start ~p~n ST: ~p~n\", [Lvl, ST]),",267],["Len = O - Start,",167],["<<_:Start/binary, Raw:Len/binary, _/binary>> = Bin,",144],["%% Start a slave node",83],["Start = now(),",108],["%% @doc Start the HTTP response by sending the Code HTTP response and",117],["Start, End, _Now, WithJID,",138],["pos_bof(Fd,Start),",136],["Start = os:timestamp(),",125]],"useCount":10830},{"word":"State","context":[["handle_info(_Info, State) ->",4789],["{ok, State};",3998],["code_change(_OldVsn, State, _Extra) ->",7882],["{noreply, State};",9981],["{ok, State}.",13032],["{noreply, State}.",16117],["State;",6909],["handle_call(_Request, _From, State) ->",3050],["{stop, normal, State};",3432],["handle_cast(_Msg, State) ->",3622]],"useCount":417473},{"word":"State0","context":[["#connection{channel_cache = Cache}} = State0) ->",109],["Connection:send_handshake(Msg, State0);",72],["connection_states = ConnectionStates0} = State0) ->",70],["State0, Connection) ->",72],["State0;",73],["{Record, State} = next_record(State0),",77],["} = State0, Connection) ->",80],["negotiated_version = Version} = State0, Connection) ->",80],["State1 = State0#state{file_state = FS1},",125],["State0",103]],"useCount":6067},{"word":"State1","context":[["{Name, Rest1, State1} = parse_name(Rest, State, [C]),",200],["{noreply, State1};",461],["{ok, State1}.",354],["yeccpars2(State, '$end', [State1 | States], [Token0 | Vstack],",330],["{_WS, Rest, State1} = whitespace(Bytes, State, []),",325],["State1 =",281],["{ok, State1} ->",230],["State1;",213],["{_WS, Rest1, State1} = whitespace(Rest, State, []),",200],["yeccpars2(State, element(1, Token), [State1 | States],",193]],"useCount":17033},{"word":"State2","context":[["noreply(State2);",134],["State2",126],["loop(State2);",116],["{noreply, State2};",413],["{Char, Tail2, State2} = decodeChar(Tail, State),",330],["State2 =",203],["State3 =  event_callback(endDocument, State2),",165],["{_WS, Rest2, State2} = whitespace(Rest1, State1, []),",150],["{ok, State2} ->",150],["{ok, State2};",130]],"useCount":13070},{"word":"StateData","context":[["StateData#state.server,",1322],["{stop, normal, StateData}.",1177],["StateData",1039],["[StateData#state.myname, StateData#state.server]),",1046],["[StateData#state.myname, StateData#state.server]),",1046],["{stop, normal, StateData};",4491],["StateData) ->",2224],["StateData;",2165],["send_trailer(StateData),",1675],["send_element(StateData,",1635]],"useCount":139035},{"word":"StateName","context":[["code_change(_OldVsn, StateName, StateData, _Extra) ->",520],["{ok, StateName, State}.",488],["{next_state, StateName, StateData}.",665],["{next_state, StateName, State}.",797],["code_change(_OldVsn, StateName, State, _Extra) ->",470],["{ok, StateName, StateData}.",543],["{next_state, StateName, StateData};",424],["handle_event(_Event, StateName, StateData) ->",398],["%%          {ok, StateName, StateData, Timeout} |",349],["%% Returns: {ok, StateName, StateData}          |",349]],"useCount":24236},{"word":"Status","context":[["fun(Type, {Status, Acc}) ->",96],["Status,",93],["?assertEqual({200, \"OK\"}, Status),",91],["{data, [{\"Status\", SysState},",98],["status      = Status,",129],["Status ->",131],["Status",142],["status = Status,",202],["case Status of",530],["Result = lists:foldl(fun (Type, {Status, Acc}) ->",112]],"useCount":12747},{"word":"Str","context":[["eqc:on_output(fun(Str, Args) -> io:format(user, Str, Args) end, P)).",103],["{text, Str} = erl_scan:token_info(Token, text),",123],["Parts = re:split(Str, \"\\n\"),",124],["case Str of",219],["Str = \"1234567890\",",162],["Str;",127],["Str ->",141],["Str.",150],["{error, Str} ->",287],["{error, ?F(\"~s at line ~w\", [Str, Lno])}",253]],"useCount":11585},{"word":"String","context":[["getTextExtent(This,String) -> wxWindow:getTextExtent(This,String).",606],["getTextExtent(This,String) -> wxWindow:getTextExtent(This,String).",606],["{value, {_, [String]}} ->",145],["String ->",151],["String;",169],["getTextExtent(This,String, Options) -> wxWindow:getTextExtent(This,String, Options).",606],["getTextExtent(This,String, Options) -> wxWindow:getTextExtent(This,String, Options).",606],["String :: string(),",277],["String.",187],["String",138]],"useCount":18877},{"word":"Style","context":[["({style, Style}, Acc) -> [<<3:32/?UI,Style:32/?UI>>|Acc];",392],["({style, Style}, Acc) -> [<<4:32/?UI,Style:32/?UI>>|Acc];",308],["setBackgroundStyle(This,Style) -> wxWindow:setBackgroundStyle(This,Style).",606],["({style, Style}, Acc) -> [<<4:32/?UI,Style:32/?UI>>|Acc];",308],["({style, Style}, Acc) -> [<<3:32/?UI,Style:32/?UI>>|Acc];",392],["setWindowStyle(This,Style) -> wxWindow:setWindowStyle(This,Style).",598],["setWindowStyleFlag(This,Style) -> wxWindow:setWindowStyleFlag(This,Style).",596],["setWindowStyleFlag(This,Style) -> wxWindow:setWindowStyleFlag(This,Style).",596],["setWindowStyle(This,Style) -> wxWindow:setWindowStyle(This,Style).",598],["setBackgroundStyle(This,Style) -> wxWindow:setBackgroundStyle(This,Style).",606]],"useCount":6367},{"word":"Sub","context":[["?line [{snmp_sup, {Sup, self()}}, {snmp_sub, Sub} | Config].",42],["{<<\"subscription\">>, subscription_to_string(Sub)}",57],["Notify = fun (JID, Sub, _SubId) ->",43],["is_bool_expr(B, Sub);",45],["As1 = expr_list(As0, value, Sub),",48],["{<<\"subscription\">>, subscription_to_string(Sub)}]}];",57],["case Sub of",108],["lists:foldl(fun ({Sub, SubId}, Acc2) ->",73],["Sub = lists:sublist(SUsers, N1, N2 - N1 + 1),",72],["Sub);",60]],"useCount":7194},{"word":"SubEl","context":[["sub_el = SubEl} =",111],["SubEl      :: xmlel(),",120],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_NOT_ALLOWED]}.",123],["SubEl ->",167],["IQ#iq{type = error, sub_el = [SubEl, Error]}",322],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_BAD_REQUEST]}",105],["XDataEl = find_xdata_el(SubEl),",107],["Node = xml:get_tag_attr_s(<<\"node\">>, SubEl),",110],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_NOT_ALLOWED]};",438],["#xmlel{children = Els} = SubEl,",328]],"useCount":9567},{"word":"SubId","context":[["set_subscriptions(Nidx, Owner, Subscription, SubId) ->",139],["set_subscriptions(NodeId, Owner, Subscription, SubId) ->",148],["SubId = xml:get_attr_s(<<\"subid\">>, Attrs),",110],["get_items(Nidx, JID, AccessModel, PresenceSubscription, RosterGroup, SubId, RSM) ->",108],["PresenceSubscription, RosterGroup, SubId).",158],["unsubscribe_node(Nidx, Sender, Subscriber, SubId) ->",130],["get_items(NodeId, JID, AccessModel, PresenceSubscription, RosterGroup, SubId) ->",115],["PresenceSubscription, RosterGroup, SubId, RSM).",108],["get_item(NodeId, ItemId, JID, AccessModel, PresenceSubscription, RosterGroup, SubId) ->",105],["get_item(Nidx, ItemId, JID, AccessModel, PresenceSubscription, RosterGroup, SubId) ->",108]],"useCount":6098},{"word":"Suite","context":[["%% basho_bench: Benchmarking Suite",99],["post_init_per_suite(Suite,Config,Return,State) ->",63],["%%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",85],["Suite;",115],["%% Suite configuration",191],["%%%  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.",306],["%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307",312],["%%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA",2426],["pre_end_per_suite(Suite,Config,State) ->",63],["post_end_per_suite(Suite,Config,Return,State) ->",64]],"useCount":9033},{"word":"Supervisor","context":[["%% Supervisor callbacks",4519],["Supervisor = gen_mod:get_module_proc(ServerHost, ejabberd_mod_muc_sup),",105],["Supervisor, [Host, ServerHost, Access, Room, HistorySize, RoomShaper,",73],["%% Supervisor behaviour callbacks",40],["supervisor:start_child(Supervisor,",40],["%% Application and Supervisor callbacks",30],["call(Supervisor, Req) ->",26],["%%% Supervisor callbacks",559],["%% Supervisor callback",132],["%%%  Supervisor callback",137]],"useCount":6429},{"word":"Sz","context":[["convertDialogToPixels(This,Sz) -> wxWindow:convertDialogToPixels(This,Sz).",606],["au_mem_data(Mem#memory{total = Tot+Sz,",101],["wait_dynamic_children(Child, ?SETS:del_element(Pid, Pids), Sz-1,",91],["Sz = size(Bin0),",117],["convertPixelsToDialog(This,Sz) -> wxWindow:convertPixelsToDialog(This,Sz).",606],["convertDialogToPixels(This,Sz) -> wxWindow:convertDialogToPixels(This,Sz).",606],["Sz = blocks_size(Data, 0),",85],["<<0:3,Bin:Sz/binary,31:5>> = id(Bin1),",78],["convertPixelsToDialog(This,Sz) -> wxWindow:convertPixelsToDialog(This,Sz).",606],["Sz;",159]],"useCount":10105},{"word":"T","context":[["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["yeccpars1(S, 17, Ss, Stack, T, Ts, Tzr);",1027],["yeccpars1(S, 18, Ss, Stack, T, Ts, Tzr);",1051],["yeccpars1(S, 23, Ss, Stack, T, Ts, Tzr);",1053],["yeccpars1(S, 52, Ss, Stack, T, Ts, Tzr);",1084],["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108],["yeccerror(T).",12831],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188]],"useCount":595786},{"word":"T1","context":[["case T1 of",77],["{_,T1,S1} = mandatory_strip(T,S),",171],["T1 = erlang:monotonic_time(),",79],["{T1, T2, T3} = now(),",84],["lists:reverse(T1, [H1 | M]).",86],["T1 = os:timestamp(),",95],["T1 = mk_temp(),",95],["{PERefName, T1, S1} = scan_pe_reference(T, S),",108],["T1 ->",133],["T1;",130]],"useCount":22936},{"word":"T2","context":[["lists:reverse(T2, [H2 | M]).",158],["{_,T2,S2} = strip(ExpRef ++ T1,S1),",45],["T2 ->",83],["T2 = now(),",46],["iolist_to_binary(io_lib:fwrite(\"~.16B~.16B~.16B\", [T1, T2, T3])).",69],["T2;",59],["T2 = mk_temp(),",55],["ets:delete(T2),",49],["T2 = os:timestamp(),",46],["{T1, T2, T3} = now(),",84]],"useCount":19110},{"word":"TEST","context":[["%% TEST FUNCTIONS",49],["%% COMMON TEST CALLBACK FUNCTIONS",103],["p(\"BEGIN TEST-CASE\"),",52],["-ifdef(TEST).",6106],["put(sname,     \"TEST\"),",435],["-endif. % TEST",272],["%% TEST CASES",251],["%% TEST SERVER CALLBACK FUNCTIONS",171],["%%% TEST EVENTS",134],["%% TEST",67]],"useCount":8354},{"word":"Tab","context":[["Cs = incr_version(val({Tab, cstruct})),",121],["Tab;",132],["ets:delete(Tab),",194],["?line true = ets:delete(Tab),",207],["true = ets:delete(Tab),",217],["ok = dets:close(Tab),",234],["?match({atomic, ok}, mnesia:create_table(Tab, Def)),",316],["Tab = Cs#cstruct.name,",321],["abort({bad_type, Tab}).",329],["Tab :: tab(),",355]],"useCount":43507},{"word":"Table","context":[["{updated, 1} = odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++",126],["\"CREATE TABLE \" ++ Table ++",385],["odbc:sql_query(Ref,  \"CREATE TABLE \" ++ Table ++",349],["odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++\" VALUES(\" ++",273],["odbc:sql_query(Ref,\"SELECT FIELD FROM \" ++ Table),",261],["odbc:sql_query(Ref, \"SELECT * FROM \" ++ Table),",197],["Table = ?config(tableName, Config),",578],["{aborted,{no_exists,Table}} ->",120],["loop(SurviveLinks, Table);",113],["ets:delete(Table),",111]],"useCount":12861},{"word":"Tag","context":[["EI = {Tag, B},",128],["{Tag, Req};",140],["-spec(handle_call(Request :: term(), From :: {pid(), Tag :: term()},",97],["{Tag, Rep};",140],["Tag;",151],["{Tag, Val} ->",156],["Tag = make_ref(),",218],["{Tag, Val2}.",332],["lists:member(Tag, Tags).",392],["case Tag of",785]],"useCount":24852},{"word":"TagIn","context":[["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331],["Tlv1 = match_tags(Tlv, TagIn),",6359],["encode_restricted_string(Val, TagIn).",553],["Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),",5277],["encode_tags(TagIn, BytesSoFar, LenSoFar).",3455],["encode_tags(TagIn, EncBytes, EncLen).",2683],["?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).",2652],["?RT_BER:encode_tags(TagIn, EncBytes, EncLen).",2229],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063]],"useCount":76518},{"word":"Tail","context":[["Tail;",139],["take_without_spaces(Tail, Count, Acc);",92],["validate_options(Tail, [Opt | Acc]);",96],["?EMPTY -> ?CF3(Tail, State, fun decodeChar/2);",100],["?CF3(Tail, State, fun decodeChar/2);",132],["case Tail of",429],["{Char, Tail2, State2} = decodeChar(Tail, State),",330],["Tail.",195],["[Head|Tail] ->",153],["decodeChar(Tail, State) ->",122]],"useCount":27000},{"word":"Target","context":[["{Root, _} = elvis_file:parse_tree(Config, Target),",88],["case Target of",58],["%% Slogan: Target mib tag list check invalid",58],["ok = filelib:ensure_dir(Target),",54],["target = Target,",90],["mnesia:traverse_backup(Source, Target, Convert, switched).",50],["Target,",49],["mnesia_change_nodename(FromString, ToString, Source, Target) ->",49],["Target.",49],["{Src, _} = elvis_file:src(Target),",48]],"useCount":6778},{"word":"Term","context":[["%%%              Reason = normal | shutdown | Term terminate(State) is called",232],["{ok, Term} ->",224],["Term :: term(),",186],["Term",194],["{Term,Remain} = 'dec_EventParameter'(Bytes,telltype),",216],["case Term of",409],["Term ->",408],["{Term,Remain} = 'dec_PropertyParm'(Bytes,telltype),",252],["Term.",299],["Term :: term().",390]],"useCount":18897},{"word":"Term1","context":[["{Term1,Bytes2} = begin",504],["Term1 = decode_object_identifier(V1, [6]),",320],["Term1 = ?RT_BER:decode_integer(V1,{0,4294967295},[131072]),",342],["{Term1,Bytes3,Rb2} = case Bytes2 of",346],["{Term1,Bytes3} = case Opt band (1 bsl 2) of",369],["{Term1,Bytes3} = begin",389],["{Term1,Tlv2} = case Tlv1 of",1555],["Term1 = ?RT_BER:decode_octet_string(V1,4,[131072]),",444],["Term1 = begin",1292],["Term1 = 'dec_TerminationIDList'(V1, [131072]),",484]],"useCount":26213},{"word":"Term2","context":[["{'Message', Term1, Term2, Term3}.",250],["{'MegacoMessage', Term1, Term2}.",249],["{Term2,Bytes4} = case Opt band (1 bsl 0) of",477],["{Term2,Bytes3} = case Opt band (1 bsl 0) of",423],["{Term2,Bytes4} = case (Opt bsr 1) band 1 of",380],["Term2 = begin",295],["{Term2,Bytes4} = case Opt band 1 of",271],["{Term2,Bytes4,Rb3} = case Bytes3 of",682],["{Term2,Bytes4} = case Opt band (1 bsl 1) of",684],["{Term2,Tlv3} = case Tlv2 of",2691]],"useCount":24369},{"word":"Term3","context":[["{'Message', Term1, Term2, Term3}.",250],["{Term3,Tlv4} = case Tlv3 of",1860],["{Term3,Bytes5,Rb4} = case Bytes4 of",477],["{Term3,Bytes5} = case Opt band 1 of",531],["{Term3,Bytes5} = case Opt band (1 bsl 0) of",954],["{Term3,Bytes4} = case Opt band (1 bsl 0) of",162],["Term3 = {'Message_messageBody',V3},",122],["{Term3,Bytes5} = case Opt band (1 bsl 1) of",99],["{Term3,Bytes4} = case Opt band 1 of",94],["{'TransactionReply', Term1, Term2, Term3, Term4, Term5}.",88]],"useCount":11881},{"word":"Term4","context":[["{Term4,Tlv5} = case Tlv4 of",838],["{Term4,Bytes7} = case Extensions of",336],["{Term4,Bytes6,Rb5} = case Bytes5 of",204],["{Term4,Bytes6} = case Opt band (1 bsl 0) of",153],["{'TransactionReply', Term1, Term2, Term3, Term4, Term5}.",88],["{Term4,Bytes6} = case Opt band 1 of",86],["{{'LocalControlDescriptor',Term1,Term2,Term3,Term4},Bytes8}.",84],["{{'ActionRequest',Term1,Term2,Term3,Term4},Bytes5}.",84],["{{'ActionReply',Term1,Term2,Term3,Term4},Bytes5}.",84],["{{'H221NonStandard',Term1,Term2,Term3,Term4},Bytes7}.",84]],"useCount":6075},{"word":"Test","context":[["%% Test Cases",1145],["lager:log(error, self(), \"Test message1\"),",152],["%%% Test functions",268],["%% Test Cases --------------------------------------------------------",265],["%% Common Test interface functions -----------------------------------",317],["%% Test cases starts here.",219],["%% Test cases",332],["%% Test functions",371],["%% Test Case",10884],["%% Test server callbacks",212]],"useCount":30600},{"word":"Tests","context":[["%% Unit Tests",131],["Tests = [?_iam_test(",115],["Tests = [?_kms_test(",104],["%% Tests.",269],["input_tests(Response, Tests).",426],["Tests =",997],["{ok, T} = Tests,",101],["%% Tests",1129],["Tests = [",1349],["%%% Tests",187]],"useCount":9772},{"word":"Text","context":[["decode_error_els(__TopXMLNS, __IgnoreEls, _els, Text,",506],["handle_info({send_text, Text}, StateName, StateData) ->",230],["send_text(StateData, Text),",232],["Xdata, Misc, Address, Instructions, Text, Last,",396],["Text,",415],["Text, Reason)",418],["Text_UC = unicode:characters_to_binary([Text,0]),",465],["setHelpText(This,Text) -> wxWindow:setHelpText(This,Text).",606],["setHelpText(This,Text) -> wxWindow:setHelpText(This,Text).",606],["Text, Reason) ->",910]],"useCount":16341},{"word":"The","context":[["%% with Reason. The return value is ignored.",854],["%%% The Initial Developer of the Original Code is Eötvös Loránd University.",358],["%%% The Original Code is RefactorErl.",366],["%% Args        \t: DB\t  - The Database",400],["%%\t\t  Gstkid   - The gstkid of the widget",417],["%%% The Initial Developer of the Original Code is ProcessOne.",422],["%%  published by The Pragmatic Bookshelf.",423],["%% The Initial Developer of the Original Code is Ericsson Utvecklings AB.",1133],["%% The return value is ignored.",1091],["%% The Initial Developer of the Original Code is Ericsson AB.",646]],"useCount":40532},{"word":"This","context":[["\"This is a relatively long body, that we send to the client... \"",660],["connect(This,EventType) -> wxEvtHandler:connect(This,EventType).",633],["This::wxStyledTextCtrl().",1477],["%% This file is generated DO NOT EDIT",1492],["%% This file is automatically generated. DO NOT EDIT IT.",1952],["connect(This,EventType) -> wxEvtHandler:connect(This,EventType).",633],["%% <p>This class is derived (and can use functions) from:",1132],["%% Description: This function is called by a gen_server when it is about to",931],["%% This function is called by a gen_server when it is about to",863],["when is_record(This, wx_ref) ->",755]],"useCount":305770},{"word":"ThisRef","context":[["<<ThisRef:32/?UI,SizeW:32/?UI,SizeH:32/?UI>>).",154],["<<ThisRef:32/?UI, 0:32,BinOpt/binary>>).",762],["<<ThisRef:32/?UI>>).",8415],["<<ThisRef:32/?UI,N:32/?UI>>).",360],["<<ThisRef:32/?UI,Row:32/?UI,Col:32/?UI>>).",126],["<<ThisRef:32/?UI,PtX:32/?UI,PtY:32/?UI>>).",150],["<<ThisRef:32/?UI,Pos:32/?UI>>).",257],["<<ThisRef:32/?UI,0:32,Item:64/?UI>>).",256],["<<ThisRef:32/?UI,X:32/?UI,Y:32/?UI>>).",203],["<<ThisRef:32/?UI,Line:32/?UI>>).",168]],"useCount":21346},{"word":"ThisT","context":[["?CLASS(ThisT,wxTreeCtrl),",560],["?CLASS(ThisT,wxAuiPaneInfo),",521],["?CLASS(ThisT,wxImage),",420],["?CLASS(ThisT,wxTextCtrl),",382],["?CLASS(ThisT,wxToolBar),",370],["?CLASS(ThisT,wxWindow),",1275],["?CLASS(ThisT,wxGrid),",1432],["?CLASS(ThisT,wxDC),",609],["?CLASS(ThisT,wxListCtrl),",639],["?CLASS(ThisT,wxStyledTextCtrl),",3521]],"useCount":26024},{"word":"Tid","context":[["Tid = #megaco_term_id{id = [\"00000000\",\"00000000\",\"01101101\"]},",139],["mnesia_locker:release_tid(Tid),",114],["case Tid of",369],["NR      = cre_notifyReq([Tid], EvsDesc),",265],["{Mod, Tid, Ts} ->",249],["{?DEFAULT_ACCESS, Tid, Ts} ->",224],["case element(1, Tid) of",205],["Err = {invalid_termination_id, Tid},",162],["[{tid, Tid}]),",151],["#'NotifyRequest'{terminationID = [Tid],",132]],"useCount":12540},{"word":"Time","context":[["{Hour,Min,Sec} = Time,",95],["Time",75],["Time :: time(),",80],["Time :: non_neg_integer(),",86],["{Date, Time}   = calendar:now_to_datetime(Now),",87],["Time, Comment, Style);",97],["Time;",95],["Time :: integer(),",171],["timer:sleep(Time),",122],["after Time ->",259]],"useCount":10599},{"word":"Timeout","context":[["%%                                   {noreply, State, Timeout} |",1454],["%%                                      {noreply, State, Timeout} |",1849],["after Timeout ->",1455],["%%                                  {noreply, State, Timeout} |",736],["%%          {next_state, NextStateName, NextStateData, Timeout} |",1039],["%%          {noreply, State, Timeout} |",1007],["%%                                       {noreply, State, Timeout} |",969],["%%                     {ok, State, Timeout} |",865],["%%                         {ok, State, Timeout} |",881],["%%                                      {reply, Reply, State, Timeout} |",955]],"useCount":36172},{"word":"Tlen","context":[["yystate(9, Ics, Line, Tlen+1, 7, Tlen);",153],["yystate(16, Ics, Line, Tlen+1, 4, Tlen);",89],["yystate(16, Ics, Line, Tlen+1, 4, Tlen);",89],["yystate(45, Ics, Line, Tlen+1, 23, Tlen);",94],["yystate(45, Ics, Line, Tlen+1, 23, Tlen);",94],["yystate(30, Ics, Line, Tlen+1, 4, Tlen);",100],["yystate(30, Ics, Line, Tlen+1, 4, Tlen);",100],["yystate(24, Ics, Line, Tlen+1, 15, Tlen);",143],["yystate(24, Ics, Line, Tlen+1, 15, Tlen);",143],["yystate(9, Ics, Line, Tlen+1, 7, Tlen);",153]],"useCount":7154},{"word":"Tlv","context":[["case decode_integer(Tlv, TagIn) of",270],["Tlv1 = match_tags(Tlv, TagIn),",6359],["Val = match_tags(Tlv, Tags),",156],["Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),",5277],["{Tlv,Rest} = decode_primitive(Bin),",156],["?RT_BER:decode_octet_string(Tlv,4,TagIn).",180],["Tlv = tlv_format(Bytes),",674],["Tlv;",129],["Val1 = decode_restricted_string(Tlv, TagIn),",370],["Val1 = decode_integer(Tlv, TagIn),",234]],"useCount":45403},{"word":"Tlv1","context":[["case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of",1803],["Tlv1 = match_tags(Tlv, TagIn),",6359],["Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),",5277],["['dec_EventParameter'(V1, [16]) || V1 <- Tlv1].",264],["['dec_PropertyParm'(V1, [16]) || V1 <- Tlv1].",308],["[V1 | Tlv2] = Tlv1,",338],["{ asn1_NOVALUE, Tlv1}",1540],["{Term1,Tlv2} = case Tlv1 of",1555],["[V1|Tlv2] = Tlv1,",4532],["case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of",1803]],"useCount":26389},{"word":"Tlv2","context":[["{Term1,Tlv2} = case Tlv1 of",1555],["case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped",177],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed",180],["case Tlv2 of",181],["[V2 | Tlv3] = Tlv2,",280],["[V1 | Tlv2] = Tlv1,",338],["[V1|Tlv2] = Tlv1,",4532],["[V2|Tlv3] = Tlv2,",2949],["{ asn1_NOVALUE, Tlv2}",2753],["{Term2,Tlv3} = case Tlv2 of",2691]],"useCount":16183},{"word":"Tlv3","context":[["{Term2,Tlv3} = case Tlv2 of",2691],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639],["{ asn1_NOVALUE, Tlv3}",1865],["[V2|Tlv3] = Tlv2,",2949],["case Tlv3 of",1864],["{Term3,Tlv4} = case Tlv3 of",1860],["{asn1, {unexpected, Tlv3}}}) % extra fields not allowed",212],["[V2 | Tlv3] = Tlv2,",280],["[V3|Tlv4] = Tlv3,",927],["case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped",1304]],"useCount":16140},{"word":"Tlv4","context":[["case Tlv4 of",460],["[V4|Tlv5] = Tlv4,",534],["{ asn1_NOVALUE, Tlv4}",826],["{Term4,Tlv5} = case Tlv4 of",838],["[V3|Tlv4] = Tlv3,",927],["case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped",1090],["{Term3,Tlv4} = case Tlv3 of",1860],["[V3 | Tlv4] = Tlv3,",114],["{asn1, {unexpected, Tlv4}}}) % extra fields not allowed",121],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed",335]],"useCount":7318},{"word":"Tmpval1","context":[["Tmpval1 ->",2159],["[[10,8,Tmpval1],[10,8,Tmpval2]]",123],["'enc_ErrorDescriptor'(Tmpval1)",162],["?RT_PER:encode_null(Tmpval1)",186],["?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],Tmpval1)",189],["Tmpval1 when Tmpval1 == 4 -> [2,20,Tmpval1,element(2,Val1)];",206],["Tmpval1 when Tmpval1 == 4 -> [2,20,Tmpval1,element(2,Val1)];",206],["Tmpval1 when Tmpval1 == 4 -> [2,20,Tmpval1,element(2,Val1)];",206],["case Tmpval1 of",226],["?RT_PER:encode_integer([{'ValueRange',{0,65535}}],Tmpval1)",354]],"useCount":6189},{"word":"To","context":[["To :: ejabberd:jid(),",380],["[Reason, {From, To, Packet}]);",332],["case catch do_route(From, To, Packet) of",335],["ejabberd_router:route(To, From, Res);",357],["From, To,",359],["ejabberd_router:route(To,",367],["ejabberd_router:route(To, From, Err);",1063],["ejabberd_router:route(To, From, Err)",950],["Host = To#jid.lserver,",543],["ejabberd_router:route(To, From,",499]],"useCount":43374},{"word":"Token","context":[["yeccpars1(State1, State, States, Vstack, Token0, [Token | Tokens], Tzr) ->",165],["[Token0 | Vstack], Token, Tokens, Tzr);",165],["yeccpars2(State, element(1, Token), States, Vstack, Token, Tokens, Tzr);",165],["yeccpars2(State, element(1, Token), States, Vstack, Token, Tokens, Tzr);",165],["yeccpars1([Token | Tokens], Tzr, State, States, Vstack) ->",165],["yecctoken_to_string(Token) ->",165],["yecctoken_location(Token) ->",165],["Text = yecctoken_to_string(Token),",165],["yeccpars2(State, element(1, Token), [State1 | States],",193],["yeccerror(Token) ->",213]],"useCount":7201},{"word":"Tokens","context":[["case (catch parse_or(Tokens,Flist)) of",195],["{ok, Tokens, _} ->",389],["case erl_parse:parse_term(Tokens) of",295],["parse(Tokens) ->",229],["{ok, Tokens, Endline} ->",166],["-spec parse(Tokens :: list()) -> yecc_ret().",165],["yeccpars0(Tokens, {no_func, no_line}, 0, [], []).",165],["yeccpars1([Token | Tokens], Tzr, State, States, Vstack) ->",165],["[Token0 | Vstack], Token, Tokens, Tzr);",165],["throw({asn1_error,{get_line(hd(Tokens)),get(asn1_module),",344]],"useCount":9173},{"word":"Toks","context":[["{more,{Cs,Col,Toks,Line,[],fun scan/6}};",182],["case erl_parse:parse_term(Toks) of",46],["end, Toks),",44],["scan_based_int([C|Cs], St, Line, Col, Toks, {B,Ncs,Bcs})",42],["scan_based_int(Cs, St, Line, Col, Toks, {B,[C|Ncs],Bcs});",42],["scan_variable(Cs, St, Line, Col, Toks, [C]);",42],["[_, _|_] = Toks ->",40],["{ok, Port2} = erl_parse:parse_term(Toks),",39],["scan_after_int(Cs, Ncs, Toks, Pos, Pos1).",34],["case erl_parse:parse_exprs(Toks) of",38]],"useCount":7308},{"word":"Transport","context":[["Transport = ?config(transport, Config),",112],["Transport:close(Socket),",135],["Transport,",82],["start_link(Ref, Socket, Transport, Opts) ->",132],["Transport:send(Socket, BinMsg),",91],["Transport:setopts(Socket, [{active, once}]),",147],["case recv(Socket, Transport, Until) of",101],["transport = Transport,",119],["transport_cb = Transport,",191],["Transport = ranch_tcp,",80]],"useCount":7216},{"word":"Tree","context":[["{ok, Tree} ->",81],["case Tree of",75],["case erl_syntax:subtrees(Tree) of",86],["case cerl:type(Tree) of",87],["case erl_syntax:type(Tree) of",90],["_ -> {Tree, false}",90],["visit_application_final(F, As, Tree, St0)",99],["Tree.",103],["Tree",105],["Tree;",124]],"useCount":10793},{"word":"Ts","context":[["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188],["yeccpars1(S, 52, Ss, Stack, T, Ts, Tzr);",1084],["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["yeccpars1(S, 23, Ss, Stack, T, Ts, Tzr);",1053],["yeccpars1(S, 18, Ss, Stack, T, Ts, Tzr);",1051],["yeccpars1(S, 17, Ss, Stack, T, Ts, Tzr);",1027],["yeccpars2_22(_S, Cat, Ss, Stack, T, Ts, Tzr);",1015],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657]],"useCount":454031},{"word":"Type","context":[["type = Type,",656],["%% Type identification function",696],["destroy(Obj=#wx_ref{type=Type}) ->",1017],["%% Type: invalid",1032],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["%% Type: valid",2346],["case Type of",4332],["%% Type: not-wf",7380],["Type ->",587]],"useCount":105655},{"word":"Types","context":[["%% Types:",253],["%% Exported Types",59],["case lists:keyfind(FNum, 1, Types) of",58],["%%% Types/Specs/Records",68],["%% Types    :",97],["%%%_* Types ====================================================================",122],["decode(Rest1, Types,",126],["%%% Types",134],["%% Types",672],["Decoded = decode(Bytes, Types, Defaults),",470]],"useCount":7694},{"word":"Tzr","context":[["yeccpars1(S, 18, Ss, Stack, T, Ts, Tzr);",1051],["yeccpars1(S, 17, Ss, Stack, T, Ts, Tzr);",1027],["yeccpars1(S, 23, Ss, Stack, T, Ts, Tzr);",1053],["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108],["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188],["yeccpars1(S, 52, Ss, Stack, T, Ts, Tzr);",1084],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccpars2_22(_S, Cat, Ss, Stack, T, Ts, Tzr);",1015]],"useCount":439320},{"word":"U","context":[["[true, U, StateData#state.server,",128],["U;",152],["case ejabberd_sm:get_session_pid(U, S, R) of",146],["case U of",145],["SUsers = lists:sort([{S, U} || {U, S} <- Users]),",144],["SUsers = lists:sort([{S, U} || {U, S} <- Users]),",144],["%%  U.C.Engine - Unified Collaboration Engine",119],["U = StateData#state.user,",125],["user = U});",162],["[U, StateData#state.server]),",206]],"useCount":22993},{"word":"UI","context":[["<<ThisRef:32/?UI, 0:32,BinOpt/binary>>).",762],["<<ThisRef:32/?UI>>).",8415],["({style, Style}, Acc) -> [<<3:32/?UI,Style:32/?UI>>|Acc];",392],["({style, Style}, Acc) -> [<<3:32/?UI,Style:32/?UI>>|Acc];",392],["({size, {SizeW,SizeH}}, Acc) -> [<<2:32/?UI,SizeW:32/?UI,SizeH:32/?UI,0:32>>|Acc];",390],["({size, {SizeW,SizeH}}, Acc) -> [<<2:32/?UI,SizeW:32/?UI,SizeH:32/?UI,0:32>>|Acc];",390],["({size, {SizeW,SizeH}}, Acc) -> [<<2:32/?UI,SizeW:32/?UI,SizeH:32/?UI,0:32>>|Acc];",390],["MOpts = fun({pos, {PosX,PosY}}, Acc) -> [<<1:32/?UI,PosX:32/?UI,PosY:32/?UI,0:32>>|Acc];",384],["MOpts = fun({pos, {PosX,PosY}}, Acc) -> [<<1:32/?UI,PosX:32/?UI,PosY:32/?UI,0:32>>|Acc];",384],["MOpts = fun({pos, {PosX,PosY}}, Acc) -> [<<1:32/?UI,PosX:32/?UI,PosY:32/?UI,0:32>>|Acc];",384]],"useCount":36867},{"word":"US","context":[["[US])),",76],["SJID = make_jid_s(US),",88],["mnesia:delete({offline_msg, US}),",88],["Host = element(2, US),",72],["mnesia:delete({passwd, US}),",90],["case catch mnesia:dirty_read({passwd, US}) of",95],["Rs = mnesia:wread({offline_msg, US}),",100],["us = US,",147],["DisplayedGroups = get_user_displayed_groups(US),",222],["US = {LUser, LServer},",2065]],"useCount":8496},{"word":"Url","context":[["Sort_string, Org, Bday, Key, Tz, Url, Email, Tel,",491],["url = Url,",63],["Nickname, Rev, Sort_string, Org, Bday, Key, Tz, Url,",69],["Url, Email);",73],["Remove, Key, City, Nick, Url, Email)",100],["Tz, Url, Email, Tel, Label, Fn, Version, N, Photo,",182],["Sort_string, Org, Bday, Key, Tz, Url, Email, Tel, Label,",227],["Org, Bday, Key, Tz, Url, Email, Tel, Label, Fn, Version,",275],["Name, Username, Remove, Key, City, Nick, Url,",290],["Username, Remove, Key, City, Nick, Url, Email) ->",353]],"useCount":6999},{"word":"User","context":[["LUser = jid:nodeprep(User),",756],["LUser = jlib:nodeprep(User),",1558],["User = StateData#state.user,",214],["[User, Server]),",215],["case jlib:nodeprep(User) of",213],["check_password(User, Server, Password) ->",220],["set_password(User, Server, Password) ->",210],["is_user_exists(User, Server) ->",247],["remove_user(User, Server) ->",649],["%%     User = string()",248]],"useCount":43077},{"word":"Username","context":[["Username = ejabberd_odbc:escape(LUser),",1965],["Username, Remove, Key, City, Nick, Url, Email) ->",353],["Name, Username, Remove, Key, City, Nick, Url,",290],["Username = ejabberd_odbc:escape(User),",180],["{error, Error, Username} ->",177],["Registered, Date, Phone, State, Name, Username,",152],["Username,",134],["Username, <<\"';\">>]).",126],["\"      where username='\", Username, \"' \"",125],["case catch odbc_queries:get_roster(LServer, Username) of",118]],"useCount":15362},{"word":"V","context":[["V;",1116],["{reply, {V, V}, State}.",288],["V",695],["{V,x4},",240],["V -> V",228],["V.",622],["V ->",556],["case V of",403],["{reply, {V, V}, State}.",288],["V -> V",228]],"useCount":55214},{"word":"V0","context":[["<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,",375],["<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,",464],["{V2@V0,V2@Buf1} = case Bytes2 of",446],["{V3@V0,V3@Buf1}",417],["{V1@V0,V1@Buf1}",3417],["{V2@V0,V2@Buf1}",1344],["{V1@V0,V1@Buf1} = case Bytes1 of",414],["{{asn1_ExtAlt,V2@V0},V2@Buf1}",381],["{V1@V0,V1@Buf1} = case Bytes of",1558],["<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,",1823]],"useCount":24531},{"word":"V1","context":[["[V1|Tlv2] = Tlv1,",4532],["{V1@V0,V1@Buf1}",3417],["<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,",1823],["{131073, V1} ->",1637],["[{131072,V1}|TempTlv2] ->",1513],["{V1@V0,V1@Buf1} = case Bytes of",1558],["<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,",1823],["{V1@V0,V1@Buf1}",3417],["{V1@V0,V1@Buf1} = case Bytes of",1558],["{131072, V1} ->",1657]],"useCount":101077},{"word":"V11","context":[["{V1@V11,V1@Buf12}",393],["<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,",375],["{V3@V11,V3@Buf12}",339],["<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,",338],["<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,",319],["{V5@V11,V5@Buf12}",319],["<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->",260],["<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->",260],["{V4@V11,V4@Buf12}",375],["<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,",381]],"useCount":6435},{"word":"V2","context":[["{V2@V8,V2@Buf9};",609],["{V2@V0,V2@Buf1}",1344],["{V2@V0,V2@Buf1}",1344],["[V2|Tlv3] = Tlv2,",2949],["[{131073,V2}|TempTlv3] ->",2589],["{V2@V8,V2@Buf9};",609],["<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,",464],["<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,",464],["<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->",449],["<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->",449]],"useCount":50242},{"word":"V3","context":[["{V3@V3,V3@Buf4} = case V3@Buf2 of",543],["[{131074,V3}|TempTlv4] ->",1766],["[V3|Tlv4] = Tlv3,",927],["{V1@V3,V1@Buf4} = case V1@Buf2 of",641],["{V3@V3,V3@Buf4}",574],["{V3@V3,V3@Buf4}",574],["{V3@V3,V3@Buf4}",574],["{V3@V3,V3@Buf4} = case V3@Buf2 of",543],["<<1:1,V3@Buf2/bitstring>> ->",543],["{V3@V3,V3@Buf4} = case V3@Buf2 of",543]],"useCount":49376},{"word":"V4","context":[["{V4@V8,V4@Buf9};",453],["<<1:1,V4@Buf2/bitstring>> ->",414],["{V4@V3,V4@Buf4} = case V4@Buf2 of",414],["{V4@V3,V4@Buf4} = case V4@Buf2 of",414],["{V4@V3,V4@Buf4} = case V4@Buf2 of",414],["{V4@V3,V4@Buf4}",384],["{V4@V3,V4@Buf4}",384],["{V4@V8,V4@Buf9};",453],["[V4|Tlv5] = Tlv4,",534],["[{131075,V4}|TempTlv5] ->",779]],"useCount":23186},{"word":"V5","context":[["[{131076,V5}|TempTlv6] ->",456],["{V5@V3,V5@Buf4} = case V5@Buf2 of",365],["{V5@V3,V5@Buf4} = case V5@Buf2 of",365],["{V1@V5,V1@Buf6};",1223],["{V5@V8,V5@Buf9};",365],["{V5@V8,V5@Buf9};",365],["<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->",445],["<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->",445],["<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->",1222],["<<1:1,V5@Buf2/bitstring>> ->",365]],"useCount":21627},{"word":"V6","context":[["<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->",1222],["{V1@V6,V1@Buf7}",1226],["<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->",449],["{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),",445],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["{V6@V8,V6@Buf9};",268],["{V6@V8,V6@Buf9};",268],["<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->",260],["{V1@V6,V1@Buf7} = case V1@Buf5 of",260]],"useCount":19598},{"word":"V7","context":[["{V7@V8,V7@Buf9}",116],["{V7@V7,V7@Buf8};",115],["{V7@V7,V7@Buf8};",115],["{V7@V7,V7@Buf8};",115],["{V7@V8,V7@Buf9}",116],["<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->",123],["{V6@V7,V6@Buf8};",153],["{V3@V7,V3@Buf8};",182],["<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->",445],["{V2@V7,V2@Buf8};",449]],"useCount":7700},{"word":"V8","context":[["{V2@V8,V2@Buf9};",609],["{V1@V8,V1@Buf9};",489],["{V4@V8,V4@Buf9};",453],["{V2@V8,V2@Buf9}",449],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),",445],["<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->",381],["<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->",375],["<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->",381],["{V3@V8,V3@Buf9};",435]],"useCount":13384},{"word":"V9","context":[["<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->",338],["<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->",381],["{V5@V9,V5@Buf10}",319],["{V1@V9,V1@Buf10}",381],["<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->",375],["<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->",375],["{V4@V9,V4@Buf10}",375],["<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->",338],["{V3@V9,V3@Buf10}",338],["<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->",381]],"useCount":7459},{"word":"Val","context":[["Enc1@len = length(Val),",1082],["{{Cname,Val},NewBytes}.",1143],["case element(1,Val) of",1143],["{_,Cindex1, Cindex2, Cindex3} = Val,",1205],["Val;",1314],["{EncBytes,EncLen} = case element(1,Val) of",2006],["case Val of",2090],["?RT_PER:encode_length(undefined,length(Val)),",2152],["{Val,NewBytes} = begin",2828],["{_,Cindex1, Cindex2} = Val,",2709]],"useCount":199519},{"word":"Val1","context":[["C1 = byte_size(Val1),",1305],["if 0 =< Val1, Val1 =< 4294967295 ->",450],["binary_to_list(Val1);",1299],["if 0 =< Val1, Val1 =< 4294967295 ->",450],["case element(4,Val1) of",465],["Val1 = decode_integer(V1, [131072]),",555],["case element(3,Val1) of",666],["Val1 = decode_restricted_string(V1, [131072]),",590],["{Val1,Opt} = ?RT_PER:fixoptionals([3],1,Val),",648],["Val1;",1147]],"useCount":29174},{"word":"Val2","context":[["if 0 =< Val2, Val2 =< 65535 ->",305],["Val2 =",365],["Val2;",513],["{Tag, Val2}.",332],["Val2 = decode_integer(V2, []),",325],["Val2 = decode_integer(V2, [131073]),",90],["Val2 = decode_restricted_string(V1, []),",135],["C2 = byte_size(Val2),",205],["binary_to_list(Val2);",258],["if 0 =< Val2, Val2 =< 65535 ->",305]],"useCount":8136},{"word":"Value","context":[["Value -> Value",600],["Value;",2402],["{ok, Value} ->",707],["Value",1201],["Value -> Value",600],["Value.",1153],["%% Return Value:",419],["{updated, _} =  % Value == 0 || -1 driver dependent!",391],["Value ->",1167],["case Value of",764]],"useCount":66400},{"word":"ValueRange","context":[["_Opt2 when _Opt2 > 0 ->?RT_PER:decode_integer(Bytes3,[{'ValueRange',{0,65535}}]);",240],["?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],Val).",162],["{Term1,Bytes2} = ?RT_PER:decode_integer(Bytes1,[{'ValueRange',{0,4294967295}}]),",192],["%%INTEGER with effective constraint: [{'ValueRange',{0,4294967295}}]",270],["?RT_PER:encode_integer([{'ValueRange',{0,65535}}],Tmpval1)",354],["%%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]",393],["?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],Tmpval1)",189],["?RT_PER:decode_enumerated(Bytes1,[{'ValueRange',{0,2}}],{{greaterThan,smallerThan,unequalTo},{}})};",162],["'greaterThan' -> [{bit,0},?RT_PER:encode_integer([{'ValueRange',{0,2}}], 0)];",144],["'unequalTo' -> [{bit,0},?RT_PER:encode_integer([{'ValueRange',{0,2}}], 2)];",144]],"useCount":9641},{"word":"Var","context":[["-define(STRINGXFIELD(Label, Var, Val),",119],["{<<\"var\">>, Var}],",460],["-define(XFIELD(Type, Label, Var, Val),",194],["(iolist_to_binary(atom_to_list(Var)))/binary>>,",175],["{\"var\", Var}],",148],["-define(BOOLXFIELD(Label, Var, Val),",119],["<<\"pubsub#\", (atom_to_binary(Var, latin1))/binary>>,",133],["val(Var) ->",134],["-define(TLFIELD(Type, Label, Var),",110],["case ?catch_val(Var) of",143]],"useCount":11295},{"word":"Vars","context":[["case lists:keysearch(Variable,1,Vars) of",36],["Vars;",61],["subst_var([C| Rest], Vars, Result, []);",78],["{MungedExprL, Vars2} = munge_expr(ExprL, Vars),",41],["Vars.",103],["get_req(Id, Vars) ->",51],["evaluate(Str, Vars) ->",42],["Vars = [",104],["{MungedExpr, Vars2} = munge_expr(Expr, Vars),",126],["get_next_req(Vars) ->",51]],"useCount":6250},{"word":"Version","context":[["%% Version: 1",380],["case Version of",177],["Tz, Url, Email, Tel, Label, Fn, Version, N, Photo,",182],["Fn, Version, N, Photo, Logo, Geo) ->",211],["Version;",231],["Version = tls_record:protocol_version(tls_record:highest_protocol_version([])),",234],["Version = ssl_test_lib:protocol_version(Config),",248],["Org, Bday, Key, Tz, Url, Email, Tel, Label, Fn, Version,",275],["Label, Fn, Version, N, Photo, Logo, Geo)",319],["negotiated_version = Version,",427]],"useCount":21701},{"word":"Vsn","context":[["Vsn;",117],["OldVsn :: Vsn | {down, Vsn},",84],["OldVsn :: Vsn | {down, Vsn},",84],["decode_As(Vsn, As, setelement(AField, R, X), Flags, Tail2);",96],["[mk_ip(ManagerIp, Vsn),",102],["case Vsn of",115],["[(fun({Name, Vsn}) ->",73],["Vsn.",144],["rebar_test_utils:create_app(AppDir, Name, Vsn, [kernel, stdlib]),",503],["Vsn = rebar_test_utils:create_random_vsn(),",628]],"useCount":8291},{"word":"Vst","context":[["bsm_validate_context(Ctx, Vst),",56],["set_type_reg(term, Dst, Vst);",58],["Vst = branch_state(Fail, Vst0),",64],["set_type_reg(binary, Dst, Vst);",66],["float_op(Src, Dst, Vst);",70],["validate_bs_get(Fail, Ctx, Live, Dst, Vst);",84],["kill_state(Vst);",141],["branch_state(Fail, Vst);",157],["assert_term(Src, Vst),",223],["Vst;",265]],"useCount":6188},{"word":"W","context":[["isExposed(This,X,Y,W,H) -> wxWindow:isExposed(This,X,Y,W,H).",606],["isExposed(This,X,Y,W,H) -> wxWindow:isExposed(This,X,Y,W,H).",606],["| {'size', {W::integer(), H::integer()}}",264],["| {size, {W::integer(), H::integer()}}",352],["[W,SrcR1,SrcR2,DstR] = resolve_args(Args),",99],["case W of",80],["W",52],["W;",61],["[W | _] = ?config(op_worker_nodes, Config),",62],["split_stat(Stat, R, W, P);",63]],"useCount":7887},{"word":"We","context":[["%%  We make no guarantees that this code is fit for any purpose.",423],["%% We should still have access...",49],["%% BUG: We should not receive any sub_els!",88],["%% Open the server to listening. We then need to send data for the",83],["%% We hibernate the process to reduce memory consumption after a",83],["%% We do not block on send anymore.",80],["%% We get an exit signal if server dies",55],["%% @todo We probably need to check that the user doing the query has the right",70],["%% Note: NYI! We need a way to tell the test server that we need",49],["%% We're supposed to have access now...",49]],"useCount":7741},{"word":"What","context":[["\"Reason: ~p\", [?LINE, What], ?DEBUG_LEVEL),",52],["{error,What} ->",54],["case What of",194],["[?LINE, What], ?DEBUG_LEVEL),",138],["{error, What} ->",198],["\\\"S\\\": \\\"I want to update multiple items in a single API call. What's the best way to do that?\\\"",72],["route_blocking(What, StateData) ->",70],["Type:What ->",61],["What ->",465],["{'EXIT', What} ->",215]],"useCount":6605},{"word":"Width","context":[["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606],["when is_integer(Width),is_integer(Height) ->",84],["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606],["setClientSize(This,Width,Height) -> wxWindow:setClientSize(This,Width,Height).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["setClientSize(This,Width,Height) -> wxWindow:setClientSize(This,Width,Height).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["setSize(This,Width,Height) -> wxWindow:setSize(This,Width,Height).",606],["setSize(This,Width,Height) -> wxWindow:setSize(This,Width,Height).",606],["Width = inf_max([Width1, Width2]),",104]],"useCount":7913},{"word":"X","context":[["case X of",728],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["fun(X) ->",968],["X ->",1296],["X.",920],["X;",730],["X",659],["X -> X",653],["X -> X",653],["setVirtualSize(This,X,Y) -> wxWindow:setVirtualSize(This,X,Y).",606]],"useCount":125905},{"word":"X1","context":[["-define(STR7_T(X1, X2, X3, X4, X5, X6, X7, Y), <<X1, X2, X3, X4, X5, X6, X7, Y/binary>>).",46],["-define(STR7_T(X1, X2, X3, X4, X5, X6, X7, Y), <<X1, X2, X3, X4, X5, X6, X7, Y/binary>>).",46],["-define(STR8_T(X1, X2, X3, X4, X5, X6, X7, X8, Y), <<X1, X2, X3, X4, X5, X6, X7, X8, Y/binary>>).",46],["X1) ->",50],["Max1 = number_max(X1, Opaques),",69],["Min1 = number_min(X1, Opaques),",69],["X1);",80],["fun ([X1, X2]) ->",247],["-define(STR8_T(X1, X2, X3, X4, X5, X6, X7, X8, Y), <<X1, X2, X3, X4, X5, X6, X7, X8, Y/binary>>).",46],["-define(STR5(X1, X2, X3, X4, X5), <<X1, X2, X3, X4, X5>>).",46]],"useCount":6418},{"word":"XE","context":[["?XE(<<\"td\">>,",1145],["?XE(<<\"li\">>,",208],["[?XE(<<\"thead\">>,",203],["[?XE(<<\"td\">>,",203],["[?XE(<<\"tbody\">>,",198],["?XE(\"tr\",",346],["[?XE(<<\"tr\">>,",520],["?XE(<<\"tr\">>,",919],["?XE(<<\"tbody\">>,",186],["[?XE(\"tr\",",263]],"useCount":6926},{"word":"Xs","context":[["body=#c_case{arg=Xs, clauses=[C1, C2, C3]}},",70],["C3 = #c_clause{pats=[Xs], guard=#c_literal{val=true},",70],["Xs = #c_var{name='Xs'},",70],["strict2(Xs, Ans);",90],["gen(G, N, Xs);",188],["Xs = #c_var{name='Xs'},",70],["case Xs of",41],["Fun = #c_fun{vars=[Xs],",42],["gen(G3, N, Xs);",50],["C1 = #c_clause{pats=[#c_cons{hd=X, tl=Xs}], guard=#c_literal{val=true},",70]],"useCount":9217},{"word":"Y","context":[["move(This,X,Y, Options) -> wxWindow:move(This,X,Y, Options).",606],["popupMenu(This,Menu,X,Y) -> wxWindow:popupMenu(This,Menu,X,Y).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["popupMenu(This,Menu,X,Y) -> wxWindow:popupMenu(This,Menu,X,Y).",606],["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606],["warpPointer(This,X,Y) -> wxWindow:warpPointer(This,X,Y).",606],["warpPointer(This,X,Y) -> wxWindow:warpPointer(This,X,Y).",606],["setVirtualSize(This,X,Y) -> wxWindow:setVirtualSize(This,X,Y).",606],["setVirtualSize(This,X,Y) -> wxWindow:setVirtualSize(This,X,Y).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606]],"useCount":42781},{"word":"Z","context":[["zlib:close(Z),",94],["Z = zlib:open(),",189],["case element(I, Z) of",132],["(C >= $A andalso C =< $Z) orelse",108],["[Z] ->",108],["H >= $A, $Z >= H ->",59],["?line Z = zlib:open(),",60],["case Fun(X, Z) of",72],["case Fun(Y, Z) of",84],["Z :: zstream(),",97]],"useCount":11172},{"word":"_","context":[["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["{error, _} ->",3681],["{'EXIT', _} ->",4381],["_ -> []",4640],["_ -> false",6462],["[_,_|Nss] = Ss,",6475],["[_,_|Nss] = Ss,",6475],["_ -> ok",6940],["_ ->",180691],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935]],"useCount":926096},{"word":"_Config","context":[["end_per_group(_Group, _Config) ->",85],["end_per_group(_GroupName, _Config) ->",347],["end_per_testcase(_, _Config) ->",107],["init(_Config) ->",107],["init_per_suite(_Config) ->",110],["_Config.",176],["init_resource_state(_Config) ->",190],["end_per_testcase(_Case, _Config) ->",244],["end_per_testcase(_TestCase, _Config) ->",574],["end_per_suite(_Config) ->",3141]],"useCount":7518},{"word":"_Extra","context":[["code_change(_OldVersion, State, _Extra) -> {ok, State}.",95],["code_change(_OldVsn, StateName, StateData, _Extra) ->",520],["code_change(_OldVsn, State, _Extra) -> {ok, State}.",1003],["code_change(_OldVsn, State, _Extra) ->",7882],["code_change(_OldVsn, StateName, State, _Extra) ->",470],["code_change(_OldVersion, State, _Extra) ->",72],["{ok, Pid, _Extra} ->",74],["code_change(_OldVsn, St, _Extra) ->",78],["code_change(_OldVsn, S, _Extra) ->",82],["code_change(_Vsn, State, _Extra) ->",127]],"useCount":11206},{"word":"_From","context":[["_From,",248],["handle_call(_Request, _From, State) ->",3050],["handle_call(stop, _From, State) ->",1314],["handle_call(Request, _From, State) ->",453],["handle_call(Msg, _From, State) ->",445],["handle_call(_Msg, _From, State) ->",354],["handle_sync_event(_Event, _From, StateName, State) ->",282],["handle_call(_Req, _From, State) ->",244],["handle_sync_event(_Event, _From, StateName, StateData) ->",251],["handle_call(Req, _From, State) ->",194]],"useCount":18228},{"word":"_GroupName","context":[["end_per_group(_GroupName, Config) ->",2921],["init_per_group(_GroupName, Config) ->",3082],["init_per_group(_GroupName, Config) -> Config.",41],["end_per_group(_GroupName, _Config) ->",347],["end_per_group(_GroupName, Config) -> Config.",24],["group(_GroupName) ->",18]],"useCount":6433},{"word":"_Info","context":[["handle_info(_Info, StateName, StateData) ->",149],["handle_info(_Info, State) -> {noreply, State}.",501],["websocket_info(_Info, Req, State) ->",113],["handle_info(_Info, StateName, State) ->",209],["{'DOWN', Ref, process, Pid, _Info} ->",46],["{'DOWN', MonitorReference, _Type, _Object, _Info} ->",81],["handle_info(_Info, _StateName, StateData) ->",48],["handle_info(_Info, S) ->",46],["handle_info(_Info, State) -> {ok, State}.",46],["handle_info(_Info, State) ->",4789]],"useCount":6768},{"word":"_Msg","context":[["?TRACE1(_Msg, MyState),",62],["handle_call(_Msg, _From, State) ->",354],["handle_info(_Msg, State) -> {noreply, State}.",64],["{ok, _Msg} ->",80],["handle_cast(_Msg, State) -> {noreply, State}.",532],["?TRACE_JOIN1(_Msg, JoinState),",80],["_Msg ->",148],["handle_cast(_Msg, State) ->",3622],["?TRACE1(_Msg, State),",164],["handle_info(_Msg, State) ->",327]],"useCount":6386},{"word":"_OldVsn","context":[["code_change(_OldVsn, State, _Extra) -> {ok, State}.",1003],["code_change(_OldVsn, StateName, StateData, _Extra) ->",520],["code_change(_OldVsn, StateName, State, _Extra) ->",470],["code_change(_OldVsn, State, _Extra) ->",7882],["code_change(_OldVsn, S, _Extra) ->",82],["code_change(_OldVsn, St, _Extra) ->",78],["system_code_change(State, _Module, _OldVsn, _Extra) ->",69],["code_change(_OldVsn, Data, _Extra) ->",57],["code_change (_OldVsn, State, _Extra) ->",49],["code_change(_OldVsn, StateName, State, _Extra) -> {ok, StateName, State}.",44]],"useCount":10698},{"word":"_Reason","context":[["terminate(_Reason, _State) -> ok.",558],["terminate(_Reason, _Req, _State) ->",449],["terminate(_Reason, State) ->",1051],["{'EXIT', _Reason} ->",1177],["{error, _Reason} ->",2273],["terminate(_Reason, _State) ->",5811],["{error, _Reason} = Error ->",415],["{badrpc, _Reason} ->",401],["{error,_Reason} = Error ->",325],["{error,_Reason} ->",222]],"useCount":19151},{"word":"_S","context":[["yeccpars2_16(_S, Cat, Ss, Stack, T, Ts, Tzr);",647],["yeccpars2_19(_S, Cat, Ss, Stack, T, Ts, Tzr);",639],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccpars2_22(_S, Cat, Ss, Stack, T, Ts, Tzr);",1015],["yeccpars2_21(_S, Cat, Ss, Stack, T, Ts, Tzr);",969],["yeccpars2_18(_S, Cat, Ss, Stack, T, Ts, Tzr);",863],["yeccpars2_26(_S, Cat, Ss, Stack, T, Ts, Tzr);",837],["yeccpars2_15(_S, Cat, Ss, Stack, T, Ts, Tzr);",830],["yeccpars2_14(_S, Cat, Ss, Stack, T, Ts, Tzr);",727],["yeccpars2_25(_S, Cat, Ss, Stack, T, Ts, Tzr);",709]],"useCount":115164},{"word":"_State","context":[["malformed_request_message(Any, _Req, _State) ->",143],["stop(_State) -> ok.",140],["websocket_terminate(_Reason, _Req, _State) ->",119],["terminate(normal, _State) ->",110],["terminate(_Reason, _StateName, _State) ->",207],["terminate(Reason, _State) ->",257],["terminate(_Reason, _Req, _State) ->",449],["terminate(_Reason, _State) -> ok.",558],["stop(_State) ->",3178],["terminate(_Reason, _State) ->",5811]],"useCount":16289},{"word":"__1","context":[["[__3,__2,__1 | __Stack] = __Stack0,",6475],["[__1 | __Stack] = __Stack0,",12300],["[ __1 | __3 ]",402],["[ __1 | __2 ]",413],["[__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",461],["[ __1 ]",742],["[__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",957],["[__5,__4,__3,__2,__1 | __Stack] = __Stack0,",1556],["[__4,__3,__2,__1 | __Stack] = __Stack0,",2240],["[__2,__1 | __Stack] = __Stack0,",2876]],"useCount":38993},{"word":"__2","context":[["[__3,__2,__1 | __Stack] = __Stack0,",6475],["[__2,__1 | __Stack] = __Stack0,",2876],["[__4,__3,__2,__1 | __Stack] = __Stack0,",2240],["[ __2 | __3 ]",1918],["[__5,__4,__3,__2,__1 | __Stack] = __Stack0,",1556],["[__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",957],["[__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",461],["[ __1 | __2 ]",413],["# 'PropertyParm' { value = [ __2 ] ,",120],["__2",855]],"useCount":20534},{"word":"__3","context":[["[__3,__2,__1 | __Stack] = __Stack0,",6475],["[ __3 | __4 ]",368],["[__4,__3,__2,__1 | __Stack] = __Stack0,",2240],["[ __2 | __3 ]",1918],["[__5,__4,__3,__2,__1 | __Stack] = __Stack0,",1556],["[__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",461],["[ __1 | __3 ]",402],["__3",354],["[ __3 | __1 ]",132],["[__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",957]],"useCount":19376},{"word":"__4","context":[["terminationAudit = __4 } }",48],["[__4,__3,__2,__1 | __Stack] = __Stack0,",2240],["[__5,__4,__3,__2,__1 | __Stack] = __Stack0,",1556],["[__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",957],["[__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",461],["actions = [ __4 | __5 ] }",48],["{ notify_completion , [ __4 | __5 ] }",48],["auditDescriptor = __4 } )",96],["[ __3 | __4 ]",368],["[__8,__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",107]],"useCount":7085},{"word":"__IgnoreEls","context":[["decode_vcard_els(__TopXMLNS, __IgnoreEls,",319],["__IgnoreEls,",1351],["decode_vcard_els(__TopXMLNS, __IgnoreEls, _els, Mailer,",638],["decode_stream_error_els(__TopXMLNS, __IgnoreEls, _els,",583],["__IgnoreEls, _els, <<>>),",526],["decode_error_els(__TopXMLNS, __IgnoreEls, _els, Text,",506],["decode_sm_failed_els(__TopXMLNS, __IgnoreEls, _els,",495],["decode_register_els(__TopXMLNS, __IgnoreEls, _els, Zip,",462],["decode_vcard_ADR_els(__TopXMLNS, __IgnoreEls, _els,",330],["decode_vcard_TEL_els(__TopXMLNS, __IgnoreEls, _els,",330]],"useCount":27810},{"word":"__Stack","context":[["[__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",461],["[__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",957],["end | __Stack].",27182],["[__1 | __Stack] = __Stack0,",12300],["[__3,__2,__1 | __Stack] = __Stack0,",6475],["yeccpars2(yeccgoto(single_expression, hd(__Ss)), __Cat, __Ss, [__Val | __Stack], __T, __Ts, __Tzr);",51],["[__8,__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",107],["[__2,__1 | __Stack] = __Stack0,",2876],["[__4,__3,__2,__1 | __Stack] = __Stack0,",2240],["[__5,__4,__3,__2,__1 | __Stack] = __Stack0,",1556]],"useCount":54323},{"word":"__Stack0","context":[["[__1 | __Stack] = __Stack0,",12300],["end | __Stack0].",7538],["[__3,__2,__1 | __Stack] = __Stack0,",6475],["yeccpars2_0_(__Stack0) ->",95],["[__2,__1 | __Stack] = __Stack0,",2876],["[__4,__3,__2,__1 | __Stack] = __Stack0,",2240],["[__5,__4,__3,__2,__1 | __Stack] = __Stack0,",1556],["[__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",957],["[__8,__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",107],["[__7,__6,__5,__4,__3,__2,__1 | __Stack] = __Stack0,",461]],"useCount":67357},{"word":"__TopXMLNS","context":[["decode_register_els(__TopXMLNS, __IgnoreEls, _els, Zip,",462],["decode_vcard_els(__TopXMLNS, __IgnoreEls,",319],["decode_vcard_ADR_els(__TopXMLNS, __IgnoreEls, _els,",330],["decode_vcard_TEL_els(__TopXMLNS, __IgnoreEls, _els,",330],["decode_sm_failed_els(__TopXMLNS, __IgnoreEls, _els,",495],["decode_error_els(__TopXMLNS, __IgnoreEls, _els, Text,",506],["decode_stream_error_els(__TopXMLNS, __IgnoreEls, _els,",583],["__TopXMLNS}});",611],["decode_vcard_els(__TopXMLNS, __IgnoreEls, _els, Mailer,",638],["if _xmlns == <<>>; _xmlns == __TopXMLNS ->",2560]],"useCount":45433},{"word":"_acc","context":[["[{<<\"xml:lang\">>, _val} | _acc].",160],["[{<<\"name\">>, _val} | _acc].",160],["| _acc]).",224],["[{<<\"jid\">>, enc_jid(_val)} | _acc].",252],["| _acc].",243],["[{<<\"node\">>, _val} | _acc].",245],["_acc;",1066],["| _acc];",1132],["[{xmlcdata, _val} | _acc].",1453],["_acc) ->",1617]],"useCount":30310},{"word":"_attrs","context":[["_attrs = _xmlns_attrs,",3997],["_xmlns = get_attr(<<\"xmlns\">>, _attrs),",4548],["_attrs, undefined),",110],["{xmlel, <<\"query\">>, _attrs, _els}) ->",139],["{xmlel, <<\"item\">>, _attrs, _els}.",143],["{xmlel, <<\"query\">>, _attrs, _els}.",195],["_attrs, _} =",247],["_xmlns = xml:get_attr_s(<<\"xmlns\">>, _attrs),",270],["_attrs, _els}) ->",342],["| _attrs],",343]],"useCount":28161},{"word":"_el","context":[["_el));",1053],["_el",1145],["IgnoreEls, _el);",2039],["case is_known_tag(_el) of",79],["__IgnoreEls, _el),",88],["__IgnoreEls, _el));",110],["__IgnoreEls, _el)",121],["_el)",291],["_el);",395],["_el),",674]],"useCount":12043},{"word":"_els","context":[["_els, <<>>),",658],["_els = [],",2175],["| _els],",2107],["_els}) ->",1052],["[{xmlcdata, _data} | _els], Cdata) ->",1041],["[_ | _els], Cdata) ->",927],["decode_vcard_els(__TopXMLNS, __IgnoreEls, _els, Mailer,",638],["decode_stream_error_els(__TopXMLNS, __IgnoreEls, _els,",583],["__IgnoreEls, _els, <<>>),",526],["decode_error_els(__TopXMLNS, __IgnoreEls, _els, Text,",506]],"useCount":38126},{"word":"_val","context":[["[{<<\"name\">>, _val} | _acc].",160],["case catch dec_enum(_val,",174],["[{xmlcdata, _val} | _acc].",1453],["_val.",628],["case catch dec_int(_val, 0, infinity) of",179],["[{<<\"node\">>, _val} | _acc].",245],["[{<<\"jid\">>, enc_jid(_val)} | _acc].",252],["_val) ->",286],["_val);",300],["case catch dec_jid(_val) of",489]],"useCount":17061},{"word":"_xmlns","context":[["_xmlns = xml:get_attr_s(<<\"xmlns\">>, _attrs),",270],["if _xmlns == <<>>; _xmlns == <<\"jabber:iq:register\">> ->",100],["if _xmlns == <<>>; _xmlns == __TopXMLNS ->",2560],["if _xmlns == <<>>; _xmlns == __TopXMLNS ->",2560],["_xmlns = get_attr(<<\"xmlns\">>, _attrs),",4548],["if _xmlns == <<>>; _xmlns == <<\"vcard-temp\">> ->",475],["if _xmlns == <<>>; _xmlns == <<\"vcard-temp\">> ->",475],["if _xmlns == <<>>;",309],["if _xmlns == <<>>; _xmlns == <<\"jabber:iq:register\">> ->",100],["if _xmlns ==",1048]],"useCount":14091},{"word":"_xmlns_attrs","context":[["encode_vcard_POBOX(Cdata, _xmlns_attrs) ->",16],["_attrs = _xmlns_attrs,",3997],["_xmlns_attrs) ->",2329],["_xmlns_attrs),",484],["_xmlns_attrs))),",222],["_xmlns_attrs)),",178],["_xmlns_attrs)))),",109],["_xmlns_attrs))))),",59],["encode_error_redirect({redirect, Uri}, _xmlns_attrs) ->",16],["encode_vcard_PAGER(true, _xmlns_attrs) ->",16]],"useCount":10120},{"word":"a","context":[["true = ets:insert(E, [{1,a},{2,b},{3,c}]),",168],["%% @doc This function is called by a gen_server when it is about to",167],["?line ok = disk_log:close(a),",175],["%% Description: This function is called by a gen_server when it is about to",931],["%% This function is called by a gen_server when it is about to",863],["\"This is a relatively long body, that we send to the client... \"",660],["a(g6",419],["%% Whenever a supervisor is started using supervisor:start_link/[2,3],",329],["a(g208",304],["a=ptime:30",289]],"useCount":152235},{"word":"about","context":[["%% Description: This function is called by a gen_server when it is about to",931],["\"Check the ejabberd guide for details about changing the~n\"",71],["%% XXX: notify about subscription state change, section 12.11",70],["%%     Further information about Reactored and it's ideas can be found at",65],["%% to find out about restart strategy, maximum restart frequency and child",112],["%%          A comment about the case to be printed in the log.",123],["%% @doc This function is called by a gen_server when it is about to",167],["%%   Name of the test case that is about to be run.",248],["%% this function is called by the new process to find out about",329],["%% This function is called by a gen_server when it is about to",863]],"useCount":6126},{"word":"access","context":[["Access = case lists:keysearch(access, 1, Opts) of",94],["access,",221],["access = Access,",209],["\"ejabberd needs read and write access in the directory:~n   ~s~n\"",71],["%% Node has whitelist access model and entity lacks required affiliation",69],["StateData#state.access,",158],["%% Ensure that we access the intended Mnesia",150],["[{{access, '$1', '$2'}}]}]),",121],["mod_opt_type(access) ->",99],["%%<li>The node has an access model of \"whitelist\" and the requesting entity is not on the whitelist.</li>",69]],"useCount":7349},{"word":"active","context":[["spawn(?MODULE, do_connect, [IP, Port, [{active, false}]]),",160],["ok = inet:setopts(Socket, [{active, once}]),",128],["{options, [{active, true}, binary,",130],["inet:setopts(Socket, [{active, once}]),",345],["{active, false},",298],["[binary, {active, false}, {packet, raw}]),",244],["ssl:setopts(Socket, [{active, once}]),",167],["Transport:setopts(Socket, [{active, once}]),",147],["{options, [{active, false} | ClientOpts]}]),",154],["{options, [{active, false} | ServerOpts]}]),",160]],"useCount":12998},{"word":"add","context":[["ejabberd_hooks:add(disco_sm_features, Host, ?MODULE,",93],["wxSizer:add(Sizer, create_box(Parent), [{proportion, 0}, {flag, ?wxEXPAND}]),",130],["ejabberd_hooks:add(remove_user, Host, ?MODULE,",153],["ejabberd_hooks:add(remove_user, Host,",246],["%% Note: This function is free to add any key/value pairs to the Config",367],["ejabberd_hooks:add(roster_in_subscription, Host,",166],["add/2,",99],["ejabberd_hooks:add(anonymous_purge_hook, Host,",107],["ejabberd_hooks:add(roster_out_subscription, Host,",112],["ejabberd_hooks:add(roster_get_subscription_lists, Host,",112]],"useCount":14623},{"word":"affiliation","context":[["[{<<\"affiliation\">>, SAffiliation},",108],["Affiliation = GenState#pubsub_state.affiliation,",112],["[{<<\"affiliation\">>,",261],["affiliation, owner, _ServiceAf) ->",154],["[#xmlel{name = <<\"affiliation\">>,",113],["affiliation, none, _ServiceAf)",126],["affiliation, admin, _ServiceAf) ->",154],["\"outcast-affiliation\",",118],["affiliation, outcast, _ServiceAf)",126],["affiliation, member, _ServiceAf)",126]],"useCount":6665},{"word":"after","context":[["after 1000 ->",1589],["after 2000 ->",614],["after 10000 ->",1050],["after",7269],["after Timeout ->",1455],["after 3000 ->",335],["after 0 -> ok",362],["after 100 ->",393],["after 0 ->",3001],["after 5000 ->",1618]],"useCount":31038},{"word":"alexey","context":[["%%% Created : 16 Nov 2002 by Alexey Shchepin <alexey@process-one.net>",155],["%%% Created : 12 Dec 2004 by Alexey Shchepin <alexey@process-one.net>",138],["-author('alexey@process-one.net').",2663],["%%% Created : 31 Jan 2003 by Alexey Shchepin <alexey@process-one.net>",126],["%%% Created :  6 Dec 2002 by Alexey Shchepin <alexey@process-one.net>",119],["%%% Author  : Alexey Shchepin <alexey@process-one.net>",2669],["%%% Created : 19 Mar 2003 by Alexey Shchepin <alexey@process-one.net>",116],["-author('alexey@sevcom.net').",106],["%%% Author  : Alexey Shchepin <alexey@sevcom.net>",105],["%%% Created : 23 Nov 2002 by Alexey Shchepin <alexey@process-one.net>",93]],"useCount":8361},{"word":"align","context":[["align|Enc2@element@bin]",101],["text-align: center;",124],["align|Enc3@element@bin]",126],["align|Val@bin]",91],["[align|<<2:2,Enc2@len:14>>]",130],["[align|Enc1@bin]",150],["Bytes3 = align(Bytes2),",172],["align,",664],["[align|<<2:2,Enc1@len:14>>]",1080],["[align,",2325]],"useCount":9377},{"word":"all","context":[["-export([all/0]).",370],["all ->",465],["%% Handling all non call/cast messages",826],["all/0,",355],["%% Description: Handling all non call/cast messages",1167],["-export([all/0, suite/0,groups/0,init_per_suite/1, end_per_suite/1,",1398],["all() ->",5912],["-spec all() -> [atom()].",232],["all;",303],["all() -> [",222]],"useCount":42738},{"word":"allow","context":[["%%<li>The requesting entity is anonymous and the service does not allow anonymous entities to subscribe.</li>",69],["allow ->",2313],["%% Check if privacy rules allow this delivery",108],["allow;",383],["allow,",245],["allow -> true;",163],["%%  <li>allow it, but perform the needed persistance operations.</li></ul>",96],["allow -> owner;",70],["%% language tags MUST allow for",75],["allow ==",139]],"useCount":7469},{"word":"allowed","context":[["Txt = <<\"Value 'set' of 'type' attribute is not allowed\">>,",98],["{asn1, {unexpected, Tlv4}}}) % extra fields not allowed",121],["<<\"Only occupants are allowed to send messages \"",99],["true; % pubsub service always allowed",118],["%% Method not allowed.",71],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed",199],["{asn1, {unexpected, Tlv3}}}) % extra fields not allowed",212],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed",335],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed",180]],"useCount":7553},{"word":"an","context":[["%% @doc Returns <code>true</code> if <code>Node</code> is an abstract",247],["%% include directives. yecc will otherwise assume that an old",185],["%% To be used in grammar files to throw an error message to the parser",162],["%% This function is called whenever an application has stopped. It",131],["%% This function is called whenever an application is started using",131],["%% Entity is subscribed but specifies an invalid subscription ID",124],["%% Whenever a gen_fsm receives an event sent using",119],["%% state name. Whenever a gen_fsm receives an event sent using",116],["%% Create an object from a list of Key/Value pairs.",99],["%% Entity is not an owner",97]],"useCount":31178},{"word":"and","context":[["%% decode tag and length",11784],["%% and can be changed without notice. It can't be used for comparsion",1461],["%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1271],["%% <p>This class is derived (and can use functions) from:",1132],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",968],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% TypeCode Functions and inheritance",696],["%% Redistribution and use in source and binary forms, with or without",630],["%% Redistribution and use in source and binary forms, with or without",630]],"useCount":107423},{"word":"andalso","context":[["andalso",1095],["<<_:O/binary, C, _/binary>> when C >= $0 andalso C =< $9 ->",272],["is_opt_StreamID(SID) andalso",116],["(C >= $0 andalso C =< $9) orelse",112],["(C >= $A andalso C =< $Z) orelse",108],["when is_list(N) andalso",108],["((LFrom /= LBFrom) andalso",101],["C =/= $\\r andalso C =/= $\\n andalso C =/= $",76],["C =/= $\\r andalso C =/= $\\n andalso C =/= $",76],["(TLSEnabled == false) andalso",71]],"useCount":23489},{"word":"anno","context":[["LAnno = #a{anno=LA},",48],["module=#c_literal{anno=LineAnno,val=erlang},",46],["Ec = #iclause{anno=#a{anno=[compiler_generated]},",32],["Anno :: anno().",32],["anno = get_ann(Node)}.",35],["{#c_receive{anno=A#a.anno,",36],["{#c_receive{anno=A#a.anno,",36],["{Cl1#iclause{anno=A},St1}.",36],["{#icall{anno=#a{anno=LineAnno},\t\t%Must have an #a{}",36],["{#icall{anno=#a{anno=LineAnno},\t\t%Must have an #a{}",36]],"useCount":6018},{"word":"any","context":[["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% Returns: any (ignored by gen_server)",482],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% Returns: any",445],["lists:any(",441],["ok | {error, any()}).",425],["%%  We make no guarantees that this code is fit for any purpose.",423],["%% variable, but should NOT alter/remove any existing entries.",367],["%% Note: This function is free to add any key/value pairs to the Config",367],["-spec format_error(any()) -> iolist().",326]],"useCount":44182},{"word":"application","context":[["-behaviour(application).",3578],["%% Internal application API",386],["case application:start(App) of",402],["application:start(crypto),",431],["application:start(sasl),",219],["application:load(lager),",230],["application:stop(crypto),",243],["application:stop(lager),",244],["application:start(public_key),",249],["application ->",271]],"useCount":31418},{"word":"apply","context":[["apply(M,F,A);",51],["{Tag,apply(rpc, Call, Args)}",54],["ok = apply(Mod, test, Args),",55],["%% If not in suboptions, item can be delivered, case doesn't apply",64],["%% This is the timeout to apply between event when starting a new",65],["{apply, Module, Function} ->",73],["case catch apply(M, F, A) of",96],["case apply(Module, Function, Args) of",101],["apply ->",201],["case apply(F, A) of",230]],"useCount":6118},{"word":"are","context":[["% that the following conditions are met:",103],["%%% The suites used for the test are located in the data directory.",84],["%%% <p>PubSub plugin nodes are using the {@link gen_pubsub_node} behaviour.</p>",84],["<<\"Only occupants are allowed to send messages \"",99],["%%  courses, books, articles, and the like. Contact us if you are in doubt.",423],["%%% are met:",220],["%% Async Events are handled in handle_event as in handle_info",140],["%% Create two rows, check that they are get-nexted in correct order.",147],["% are met:",179],["%% are met:",206]],"useCount":28940},{"word":"args","context":[["args = [], result = {res, rescode}},",204],["args=Args,",77],["args = [{host, binary}, {days, integer}],",78],["args = [{host, binary}],",88],["args = [{file, string}],",102],["[{args, \"-pa \" ++ PA}]),",111],["args = Args,",123],["args = [{file, string}], result = {res, restuple}},",241],["args = [],",366],["args = [{user, binary}, {host, binary}],",175]],"useCount":8993},{"word":"as","context":[["%% Callbacks handled as normal gen_server callbacks",139],["%% Async Events are handled in handle_event as in handle_info",140],["%% design principles as a supervision tree, this means starting the",134],["%% as a byte offset into the buffer object's data store.",128],["%%% you should have received as part of this distribution. The terms",110],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108],["%% compare unequal as erlang terms, so we need to carefully recurse",97],["%% table, it should return an empty list, as the affiliation will be read by",96],["%% <p>The mechanism works as follow:",96],["%% them, not as the real erlang messages.  Use trace for that.",89]],"useCount":24313},{"word":"asn1","context":[["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed",335],["{error,{asn1,Reason}};",398],["exit({error,{asn1,bad_range}})",3584],["exit({error,{asn1,{invalid_choice_type,Else}}})",2006],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639],["EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})",1134],["Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})",1024],["exit({error,{asn1,{invalid_choice_tag,Else}}})",912],["Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})",575],["exit({error,{asn1,{illegal_value,Val}}})",478]],"useCount":19714},{"word":"asn1_NOVALUE","context":[["asn1_NOVALUE -> [];",5919],["0 ->{asn1_NOVALUE,Bytes4}",1215],["if Enc2@element =:= asn1_NOVALUE ->",1311],["0 ->{asn1_NOVALUE,Bytes2}",1405],["{ asn1_NOVALUE, Tlv1}",1540],["0 ->{asn1_NOVALUE,Bytes3}",1584],["if Enc1@element =:= asn1_NOVALUE ->",1741],["asn1_NOVALUE -> {<<>>,0};",9925],["{ asn1_NOVALUE, Tlv3}",1865],["{ asn1_NOVALUE, Tlv2}",2753]],"useCount":59555},{"word":"assert","context":[["?assert(lists:keymember(stdlib, 1, AppSpecs)),",152],["?assert(lists:keymember(kernel, 1, AppSpecs)),",144],["escalus:assert(is_iq_result, escalus:wait_for_stanza(Alice)),",215],["?assert(false)",336],["?assert(lists:member({non_goal_1, \"0.0.1\"}, AppSpecs)),",124],["?assert(lists:member({non_goal_2, \"0.0.1\"}, AppSpecs)),",117],["?assert(",431],["?assert(lists:member({goal_app_1, \"0.0.1\"}, AppSpecs)),",110],["?assert(lists:member({goal_app_2, \"0.0.1\"}, AppSpecs)),",95],["escalus:assert(is_stanza_from,",462]],"useCount":7152},{"word":"assertEqual","context":[["?assertEqual({200, \"OK\"}, status(Response)),",209],["?assertEqual(0, count()),",226],["?assertEqual(",5127],["?assertEqual(Expected, lists:flatten(Msg))",189],["?assertEqual(self(),proplists:get_value(pid,Metadata)),",378],["?assertEqual(1, count()),",150],["?assertEqual(ExpectedDecisionTrace, get_decision_ids()),",189],["?assertEqual(lager_util:level_to_num(error),Level),",203],["?assertEqual(true, Foo(Foo, false)),",160],["?assertEqual(Expect, Res).",162]],"useCount":26335},{"word":"at","context":[["{error, ?F(\"Expect integer at line ~w\", [Lno])}",217],["{error, ?F(\"~s at line ~w\", [Str, Lno])}",253],["{error, ?F(\"Expect true|false at line ~w\", [Lno])}",362],["%%% retrieved via the world wide web at http://www.erlang.org/.",491],["%% at http://www.mozilla.org/MPL/",182],["{error, ?F(\"Unexpected input ~p at line ~w\", [[H|T], Lno])};",131],["%% language tags of at least 35 characters.",75],["%%<p>ote: node creation is a particular case, error return code is evaluated at many places:</p>",70],["%% retrieved via the world wide web at http://www.erlang.org/.",1056],["%% retrieved online at http://www.erlang.org/.",6836]],"useCount":20207},{"word":"atom","context":[["atom ->",689],["%% GroupName = atom()",1189],["%% TestCase = atom()",1174],["%% Case - atom()",304],["Function :: atom(),",526],["Port :: port() | atom(),",426],["-spec all() -> [atom()].",232],["Module :: atom(),",220],["yecctoken2string({atom, _, A}) -> io_lib:write(A);",213],["-type config() :: [{atom(), term()}].",192]],"useCount":43873},{"word":"atom_to_list","context":[["[{description, atom_to_list(Name)},",98],["case split_node(atom_to_list(Node), $@, []) of",100],["case atom_to_list(F) of",188],["atom_to_list(?MODULE)",588],["(iolist_to_binary(atom_to_list(Var)))/binary>>,",175],["atom_to_list(Atom);",145],["M = from($@, atom_to_list(node())),",139],["case atom_to_list(A) of",104],["L = atom_to_list(A),",114],["atom_to_list(X);",108]],"useCount":13401},{"word":"atomic","context":[["{atomic, ok} = mnesia:create_table(",203],["{atomic, Rs} ->",150],["?match({atomic,ok},",167],["{atomic, Result} ->",211],["{atomic, ok} -> ok;",230],["{atomic, _} ->",251],["?match({atomic, ok}, mnesia:create_table(Tab, Def)),",316],["{atomic, ok} ->",1215],["?match({atomic, ok},",593],["{atomic, ok}.",143]],"useCount":11856},{"word":"attribute","context":[["%% attribute number 1 with type OCTET STRING",3301],["%% attribute number 1 with type INTEGER",3265],["%% attribute number 2 with type INTEGER",2145],["%% attribute number 2 with type SEQUENCE OF",1694],["%% attribute number 4 with type SEQUENCE OF",987],["%% attribute streamID(2) with type INTEGER OPTIONAL",880],["%% attribute number 1 with type SEQUENCE OF",841],["%% attribute number 3 with type CHOICE",762],["%% attribute number 3 with type INTEGER",759],["%% attribute number 2 with type OCTET STRING",703]],"useCount":67638},{"word":"attributes","context":[["{attributes,",380],["{attributes, [key, attr1, attr2]}],",126],["case lists:keysearch(attributes,1,MI) of",114],["Def = [{attributes, [key, value]},{ram_copies, [Part2]},{disc_copies, [Coord, Part1]}],",100],["{attributes, [a1,a2,a3]}]),",86],["case ?MODULE:module_info(attributes) of",85],["{attributes, record_info(fields, offline_msg)}]),",75],["{attributes, record_info(fields, local_config)}]),",72],["%% Common SVG attributes",72],["[{attributes,",70]],"useCount":8263},{"word":"attrs","context":[["attrs =",6480],["attrs = [{<<\"xmlns\">>, ?NS_SASL}],",595],["attrs = [{<<\"type\">>, <<\"unavailable\">>}],",254],["#xmlel{name = <<\"instructions\">>, attrs = [],",257],["#xmlel{name = <<\"title\">>, attrs = [],",320],["attrs",338],["attrs = [{<<\"xmlns\">>, ?NS_XDATA}],",430],["attrs = [{<<\"xmlns\">>, ?NS_PUBSUB}],",440],["[#xmlel{name = <<\"value\">>, attrs = [],",1195],["attrs = [],",1505]],"useCount":31879},{"word":"auth","context":[["{auth, ID, Type,",78],["{auth_user_file, filename:join(Root, \"auth/passwd\")},",99],["{auth_group_file, filename:join(Root, \"auth/group\")},",99],["{auth, _ID, set, {U, P, D, R}} ->",82],["auth = {_, _Auth, AJID}, q = Query, lang = Lang}) ->",104],["{auth, _ID, get, {U, _, _, _}} ->",77],["auth = {_, _Auth, AJID},",185],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["auth = Auth,",81],["auth = {_, _Auth, AJID}, lang = Lang})",78]],"useCount":7091},{"word":"author","context":[["%% @author Bob Ippolito <bob@mochimedia.com>",425],["%% @author Marc Worrell <marc@worrell.nl>",650],["%% @author Couchbase <info@couchbase.com>",421],["-author('alexey@process-one.net').",2663],["%% @author Thorsten Schuett <schuett@zib.de>",548],["-author('schuett@zib.de').",584],["%% @author Northscale <info@northscale.com>",331],["-author('bob@mochimedia.com').",326],["-author('Carlos Gonzalez <carlosj.gf@gmail.com>').",602],["-author('christophe.romain@process-one.net').",447]],"useCount":32767},{"word":"aws_config","context":[["#aws_config{",208],["#aws_config{access_key_id=AccessKeyID,",241],["Config :: aws_config()) ->",259],["when is_record(Config, aws_config) ->",1700],["put(aws_config, new(AccessKeyID, SecretAccessKey)),",180],["put(aws_config, new(AccessKeyID, SecretAccessKey, Host)),",175],["-spec new(string(), string()) -> aws_config().",94],["-spec(new/2 :: (string(), string()) -> aws_config()).",93],["-spec(new/3 :: (string(), string(), string()) -> aws_config()).",93],["-spec new(string(), string(), string()) -> aws_config().",93]],"useCount":9383},{"word":"b","context":[["PO = riakc_obj:new(<<\"b\">>, <<\"key\">>, <<\"value\">>),",98],["<<\"L = [{1,a},{2,b},{3,c}],",96],["end(#r{a = 1, b = 2}),",84],["O0 = riakc_obj:new(<<\"b\">>, <<\"k\">>),",81],["%%b",204],["true = ets:insert(E, [{1,a},{2,b},{3,c}]),",168],["t(<<\"rd(foo,{bar}), [X || X <- [#foo{bar=3},x,[],{a,b}],\"",108],["$\\b ->",214],["[$b, $\\\\ | Acc];",72],["true = ets:insert(E, [{1,a},{2,b}]),",80]],"useCount":20900},{"word":"bad","context":[["try_test(std_mib_read, [], [{community, \"bad community\"}]),",86],["{error, 'bad-request'}",155],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad format)\",",126],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad \"",114],["{error, 'bad-request'};",109],["?line \"exception error: bad argument\" =",78],["bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,",77],["bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,",77],["bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,",77],["bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,bad,",77]],"useCount":6851},{"word":"badarg","context":[["erlang:error(badarg).",515],["{error, badarg}.",647],["error:badarg ->",1120],["{error, badarg}",450],["erlang:error(badarg)",429],["badarg,",414],["?line {'EXIT', {badarg, _}} =",366],["catch error:badarg ->",326],["{'EXIT', {badarg, _}} ->",301],["{error, badarg};",464]],"useCount":18201},{"word":"band","context":[["{Term3,Bytes5} = case Opt band (1 bsl 0) of",954],["V1@Pad3 = bit_size(Bytes) band 7,",1298],["V1@Pad6 = bit_size(V1@Buf2) band 7,",381],["V3@Pad2 = bit_size(Bytes2) band 7,",382],["V2@Pad3 = bit_size(Bytes2) band 7,",416],["{Term2,Bytes3} = case Opt band (1 bsl 0) of",423],["{Term2,Bytes4} = case Opt band (1 bsl 1) of",684],["{Term3,Bytes5} = case Opt band 1 of",531],["{Term2,Bytes4} = case Opt band (1 bsl 0) of",477],["V1@Pad2 = bit_size(Bytes) band 7,",431]],"useCount":21941},{"word":"bar","context":[["{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),",76],["t(<<\"rd(foo,{bar}), [X || X <- [#foo{bar=3},x,[],{a,b}],\"",108],["t(<<\"rd(foo,{bar}), [X || X <- [#foo{bar=3},x,[],{a,b}],\"",108],["{load,{bar,soft_purge,soft_purge}},",100],["odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++ \" VALUES(1,'bar')\"),",100],["\"{\\\"foo\\\":[],\\\"bar\\\":{\\\"baz\\\":true},\\\"alice\\\":\\\"bob\\\"}\"},",96],["\"{\\\"foo\\\":{\\\"bar\\\":true}}\"},",95],["\"{\\\"foo\\\":\\\"bar\\\",\\\"baz\\\":123}\"},",94],["case bar of",84],["\"[-123,\\\"foo\\\",{\\\"bar\\\":[]},null]\"}",77]],"useCount":9168},{"word":"be","context":[["%% Guard bif, needs to be here.",582],["%% Note: This directive should only be used in test suites.",581],["%%   Name of the test case that is about to be run.",248],["%% Clean close down!   Server needs to be closed first !!",221],["%% yeccpars1/7 can be found by parsing the file without following",185],["%% Purpose: Prepare the state to be printed on error log",183],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% and can be changed without notice. It can't be used for comparsion",1461],["%% and can be changed without notice. It can't be used for comparsion",1461]],"useCount":49296},{"word":"before","context":[["i(\"wait some time before starting the MG simulation\"),",239],["% The parser generator will insert appropriate declarations before this line.%",197],["{error, {Location, ?MODULE, [\"syntax error before: \", Text]}}.",165],["%% Description: Initiation before each test case",102],["i(\"wait some time before starting the MG simulator\"),",204],["i(\"wait some time before starting the MGC simulation\"),",204],["return_error ( element ( 2 , __1 ) , \"syntax error before: ')'\" ) ;",95],["return_error ( element ( 2 , __1 ) , \"syntax error before: ','\" )",95],["%% Description: Initiation before the whole suite",78],["%% {@link model_behaviour} callback before/4.",62]],"useCount":7616},{"word":"begin","context":[["?_test(begin",1705],["end|begin",1951],["{Val,NewBytes} = begin",2828],["{Ext,Bytes1} = begin",1517],["Term1 = begin",1292],["{begin",1092],["{Opt,Bytes2} = begin",1087],["[ begin",540],["[begin",39028],["begin",18810]],"useCount":78729},{"word":"behaviour","context":[["-behaviour(gen_pubsub_node).",331],["-behaviour(cowboy_http_handler).",312],["-behaviour(provider).",347],["-behaviour(ejabberd_config).",466],["-behaviour(gen_server).",9470],["-behaviour(supervisor).",5514],["-behaviour(application).",3578],["-behaviour(gen_event).",753],["-behaviour(gen_fsm).",895],["-behaviour(gen_mod).",1426]],"useCount":29835},{"word":"big","context":[["D:16/big-unsigned-integer>>),",59],["$`:8/integer-unit:1-unsigned-big,",175],["[CodePoint] = xmerl_ucs:from_utf16be(<<C:16/big-unsigned-integer,",59],["$0:8/integer-unit:1-unsigned-big,",60],["$\\n:8/integer-unit:1-unsigned-big,",75],["{belong,novalue,big,4},",332],["$\\000:8/integer-unit:1-unsigned-big,",285],["{beshort,novalue,big,2},",75],["big ->",104],["$a:8/integer-unit:1-unsigned-big,",105]],"useCount":6483},{"word":"bin","context":[["Enc3@len = byte_size(Enc3@bin),",249],["Enc2@len = byte_size(Enc2@bin),",184],["Enc5@len = byte_size(Enc5@bin),",195],["Enc1@len = byte_size(Enc1@bin),",395],["Enc4@len = byte_size(Enc4@bin),",300],["Enc1@bin = iolist_to_binary(Val),",270],["Enc4@bin = iolist_to_binary(Enc3@element),",260],["Enc4@bin",260],["#!/usr/bin/env escript",254],["Enc3@bin = iolist_to_binary(Enc2@element),",215]],"useCount":11139},{"word":"binary","context":[["<<Cdata/binary, _data/binary>>);",1282],["<<2:2,_:1,1:5,_/binary>> ->",1064],["%% Parameters: Rest = string() | binary()",1050],["<<ThisRef:32/?UI, 0:32,BinOpt/binary>>).",762],["<<2:2,_:1,0:5,_/binary>> ->",736],["%%% Redistribution and use in source and binary forms, with or without",597],["%% Redistribution and use in source and binary forms, with or without",630],["binary().",680],["<<2:2,_:1,2:5,_/binary>> ->",716],["<<Cdata/binary, _data/binary>>);",1282]],"useCount":132962},{"word":"binary_to_list","context":[["binary_to_list(",213],["V2@Conv2 = binary_to_list(V2@V0),",200],["{error, binary_to_list(Error)}",143],["V2@Conv4 = binary_to_list(V2@V0),",115],["{binary_to_list(XTerm),XBytes}",222],["V1@Conv4 = binary_to_list(V1@V0),",235],["binary_to_list(Val2);",258],["V3@Conv4 = binary_to_list(V3@V0),",260],["binary_to_list(Bin);",863],["binary_to_list(Val1);",1299]],"useCount":15245},{"word":"bit_size","context":[["V3@Pad6 = bit_size(V3@Buf2) band 7,",338],["V4@Pad6 = bit_size(V4@Buf2) band 7,",375],["V1@Pad6 = bit_size(V1@Buf2) band 7,",381],["V5@Pad6 = bit_size(V5@Buf2) band 7,",319],["V1@Pad9 = bit_size(V1@Buf5) band 7,",260],["V3@Pad2 = bit_size(Bytes2) band 7,",382],["V2@Pad3 = bit_size(Bytes2) band 7,",416],["V1@Pad2 = bit_size(Bytes) band 7,",431],["V4@Pad2 = bit_size(Bytes3) band 7,",228],["V1@Pad3 = bit_size(Bytes) band 7,",1298]],"useCount":8063},{"word":"bitstring","context":[["<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->",449],["<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,",464],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["<<1:1,V3@Buf2/bitstring>> ->",543],["<<1:1,V1@Buf2/bitstring>> ->",641],["<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->",1222],["<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->",445],["<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->",423],["<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->",1222],["<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,",1823]],"useCount":32374},{"word":"body","context":[["?assertEqual(<<>>, body(Response)).",97],["body=[",106],["?assertEqual(<<?DEFAULT_STRING>>, body(Response)).",108],["body() ->",171],["\"This is a relatively long body, that we send to the client... \"",660],["body = [#text{data = Subject}]}),",117],["%% @doc Receive the body of the HTTP request (defined by Content-Length).",117],["body =",127],["{line, ?LINE}, {body, Cause}]),",132],["[#xmlel{name = <<\"body\">>, attrs = [],",157]],"useCount":18284},{"word":"boolean","context":[["-spec check_config() -> boolean().",223],["%%   SslFlag = boolean()",96],["boolean().",393],["-spec create(This, Parent, Id, [Option]) -> boolean() when",91],["PresenceSubscription :: boolean(),",79],["?XFIELD(<<\"boolean\">>, Label, Var,",80],["-spec create(This, Parent, [Option]) -> boolean() when",83],["-spec create(This, Parent) -> boolean() when",83],["-spec create(This, Parent, Id) -> boolean() when",91],["boolean ->",83]],"useCount":13940},{"word":"bor","context":[["bor",282],["(d(Sextet1) bsl 18) bor",183],["(d(Sextet2) bsl 12) bor",122],["S2 = 16#dc00 bor (N band 16#3ff),",86],["S1 = 16#d800 bor ((N bsr 10) band 16#3ff),",86],["?match({ok,_,_}, orber_test_lib:js_node([{flags, (?ORB_ENV_USE_IPV6 bor",85],["[{border, 2}, {flag, ?wxALL bor ?wxEXPAND}]),",70],["B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)",70],["B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)",70],["B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)",70]],"useCount":7826},{"word":"both","context":[["<<\"B\">> -> both;",98],["subscription = both,",98],["both -> true;",224],["both ->",237],["IsFrom = (ISubscription == both) or (ISubscription == from),",74],["<<\"both\">> ->",74],["\"B\" -> both;",64],["RosterItem#roster{subscription = both, ask = none,",63],["in_state_change(none, both, unsubscribed) -> {none, in};",63],["if F and T -> both;",78]],"useCount":7389},{"word":"br","context":[["%% <br />{@link wxWindow}",606],["%% <br />{@link wxEvent}",275],["%% <br />{@link wxControl}",323],["%% <br /> Also:<br />",578],["%% <br /> Also:<br />",578],["%% <br />{@link wxCommandEvent}",123],["io_lib:format(\"<font class=\\\"mk\\\">~s ~s</font><br/>\",",140],["%% <br />{@link wxEvtHandler}",633],["#br{},",160],["%% <br />{@link wxTopLevelWindow}",152]],"useCount":8343},{"word":"bsl","context":[["{Term1,Bytes3} = case Opt band (1 bsl 2) of",369],["{Term4,Bytes6} = case Opt band (1 bsl 0) of",153],["{Term1,Bytes3} = case Opt band (1 bsl 1) of",162],["{Term3,Bytes4} = case Opt band (1 bsl 0) of",162],["(d(Sextet1) bsl 18) bor",183],["{Term1,Bytes3} = case Opt band (1 bsl 0) of",189],["{Term2,Bytes3} = case Opt band (1 bsl 0) of",423],["{Term2,Bytes4} = case Opt band (1 bsl 0) of",477],["{Term2,Bytes4} = case Opt band (1 bsl 1) of",684],["{Term3,Bytes5} = case Opt band (1 bsl 0) of",954]],"useCount":12484},{"word":"bsr","context":[["if Val bsr 16 =:= 0 ->",81],["{Term2,Bytes4} = case (Opt bsr 1) band 1 of",380],["{Term1,Bytes3} = case (Opt bsr 2) band 1 of",205],["if Enc1@element bsr 16 =:= 0 ->",110],["if Enc2@element bsr 32 =:= 0 ->",101],["{Term1,Bytes3} = case (Opt bsr 1) band 1 of",93],["if Val bsr 32 =:= 0 ->",91],["Enc6@element bsr 16 =:= 0 ->",100],["Enc4@element bsr 16 =:= 0 ->",90],["S1 = 16#d800 bor ((N bsr 10) band 16#3ff),",86]],"useCount":7182},{"word":"but","context":[["%%   (this makes code cleaner, but execution a little bit longer)",60],["BroadcastAll = get_option(NodeOptions, broadcast_all_resources), %% XXX this is not standard, but usefull",65],["%%<li>The requesting entity has multiple subscriptions to the node but does not specify a subscription ID.</li>",69],["%% Used to be one message, but now one per wrapped file.",96],["%% variable, but should NOT alter/remove any existing entries.",367],["%% Entity has multiple subscriptions to the node but does not specify a subscription ID",124],["%% Entity is subscribed but specifies an invalid subscription ID",124],["\"but it is better to fix your config: \"",109],["%%  <li>allow it, but perform the needed persistance operations.</li></ul>",96],["\" - but not equal\", []),",83]],"useCount":10788},{"word":"by","context":[["%%% Portions created  by Eötvös Loránd University and ELTE-Soft Ltd.",358],["%% this function is called by the new process to find out about",329],["%% yeccpars1/7 can be found by parsing the file without following",185],["%%  published by The Pragmatic Bookshelf.",423],["%% Returns: any (ignored by gen_server)",482],["%% This function is called by a gen_server when it is about to",863],["%% @doc This function is called by a gen_server when it is about to",167],["%% Description: This function is called by a gen_server when it is about to",931],["%%% Created : 12 Dec 2004 by Alexey Shchepin <alexey@process-one.net>",138],["%%% Created : 16 Nov 2002 by Alexey Shchepin <alexey@process-one.net>",155]],"useCount":32094},{"word":"byte_size","context":[["Col = byte_size(lists:last(Parts)),",124],["C1 = byte_size(Val1),",1305],["Enc1@len = byte_size(Enc1@bin),",395],["Enc4@len = byte_size(Enc4@bin),",300],["{Bin,byte_size(Bin)};",267],["Enc3@len = byte_size(Enc3@bin),",249],["C2 = byte_size(Val2),",205],["Enc5@len = byte_size(Enc5@bin),",195],["Enc2@len = byte_size(Enc2@bin),",184],["Enc3@element@bin_size0 = byte_size(Enc3@element@bin),",128]],"useCount":10257},{"word":"c","context":[["%% C    = cre_PropParm(\"c\", \"IN IP4 $ \"),",52],["c=TN RFC2543 -",483],["c=IN IP4 124.124.124.222",289],["#c_fit{c = C1} ->",54],["v=0 o=- 7736844526 7736842807 IN IP4 125.125.125.111 s=- t= 0 0 c=IN IP4 125.125.125.111 m=audio 1111 RTP/AVP 4",64],["?line c:nl(?MODULE),",77],["%% <p><c>",206],["true = ets:insert(E, [{1,a},{2,b},{3,c}]),",168],["<<\"L = [{1,a},{2,b},{3,c}],",96],["C     = cre_PropParm(\"c\", [$I,$N,$ ,$I,$P,$4,$ ,$$,$ ]),",52]],"useCount":14975},{"word":"call","context":[["?line false = rpc:call(MaNode, snmp, enum_to_int,",331],["call ->",327],["ok = rpc:call(Node, release_handler, install_file,",279],["?line pong = rpc:call(Victim, net_adm, ping, [Offender]),",240],["gen_server:call(Proc, stop),",396],["%%%% Standard gen_server call handle",696],["%% Handling call messages",811],["%% Handling all non call/cast messages",826],["%% Description: Handling call messages",1119],["%% Description: Handling all non call/cast messages",1167]],"useCount":54877},{"word":"callback","context":[["%% @doc gen_server callback.",133],["callback = Callback,",79],["callback=Callback,",93],["%% Test server callback functions",102],["-callback init(Args :: term()) ->",104],["%% @doc     autotest callback",126],["%% Supervisor callback",132],["%%%  Supervisor callback",137],["%% @doc supervisor callback.",164],["callback({abort, {Code, Text}}, Config, Callback, Req),",96]],"useCount":6517},{"word":"callbacks","context":[["%% Application callbacks",3257],["%% gen_mod callbacks",382],["%% gen_event callbacks",453],["%% supervisor callbacks",457],["%%% Supervisor callbacks",559],["behaviour_info(callbacks) ->",692],["%% gen_fsm callbacks",774],["%%% gen_server callbacks",1692],["%% Supervisor callbacks",4519],["%% gen_server callbacks",6580]],"useCount":24654},{"word":"called","context":[["%% @doc This function is called by a gen_server when it is about to",167],["%% Description: This function is called by a gen_server when it is about to",931],["%% This function is called whenever an application is started using",131],["%% This function is called whenever an application has stopped. It",131],["%% yeccpars1/7 is called from generated code.",185],["%%%              Reason = normal | shutdown | Term terminate(State) is called",232],["%% this function is called by the new process to find out about",329],["%%          {stop, Reason, Reply, State}   | (terminate/2 is called)",511],["%% This function is called by a gen_server when it is about to",863],["%%          {stop, Reason, State}            (terminate/2 is called)",1468]],"useCount":11303},{"word":"can","context":[["%% and can be changed without notice. It can't be used for comparsion",1461],["%% and can be changed without notice. It can't be used for comparsion",1461],["%% <p>This class is derived (and can use functions) from:",1132],["%% yeccpars1/7 can be found by parsing the file without following",185],["%% @doc Check if the user and password can login in server.",139],["%% implement this function. It can return anything.</p>",113],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108],["%%%  contributors (their names can be found in the CONTRIBUTORS file).",105],["%can be constructed",90],["%% they can implement this function like this:",86]],"useCount":18536},{"word":"case","context":[["{Term2,Tlv3} = case Tlv2 of",2691],["{EncBytes,EncLen} = case element(1,Val) of",2006],["{EncBytes2,EncLen2} =  case Cindex2 of",2709],["case Result of",3317],["case Res of",3968],["case Type of",4332],["case os:type() of",2161],["case SubItem of",2148],["case Val of",2090],["case",2306]],"useCount":506680},{"word":"cast","context":[["io:format(\"Got cast ~p~n\",[Msg]),",127],["gen_server:cast(Pid, stop).",144],["cast(Msg) ->",146],["gen_server:cast(?MODULE, stop).",170],["%% @doc Handling all non call/cast messages",174],["%%%% Standard gen_server cast handle",696],["%% Handling all non call/cast messages",826],["%% Handling cast messages",831],["%% Description: Handling cast messages",1159],["%% Description: Handling all non call/cast messages",1167]],"useCount":9230},{"word":"catch","context":[["catch Class:Reason ->",645],["{reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.",696],["catch",25114],["catch _:_ ->",1741],["case catch do_route(From, To, Packet) of",335],["case catch",628],["case catch dec_jid(_val) of",489],["case catch ejabberd_odbc:sql_query(LServer,",208],["AcTuAlReS = (catch (Expr)),",237],["catch error:badarg ->",326]],"useCount":71462},{"word":"cerl","context":[["%%     Definitions = [{cerl(), cerl()}]",50],["[Arg1, Arg2] = cerl:call_args(Guard),",70],["Args = cerl:call_args(Guard),",68],["case cerl:type(NewVars2) of",60],["Body = cerl:clause_body(Clause),",58],["case cerl:type(Tree) of",87],["case cerl:type(E) of",89],["%%           cerl()",142],["cerl:c_let(",58],["Ann = cerl:get_ann(Tree),",54]],"useCount":8805},{"word":"check","context":[["{A1,Alen1,[],L1,S1} ->                  % Need more chars to check",64],["{A1,Alen1,Tlen1,[],L1,S1} ->            % Need more chars to check",64],["%% Instruct the Clients to pull the events and check if they match.",65],["?line check(",210],["%% @todo We probably need to check that the user doing the query has the right",70],["check() ->",78],["%% check that we got a trap",92],["%% Create two rows, check that they are get-nexted in correct order.",147],["check(fun() ->",260],["?line check(fun() ->",494]],"useCount":9618},{"word":"check_result","context":[["check_result(R, \"not-wf\").",1061],["ssl_test_lib:check_result(Client, ok),",198],["ssl_test_lib:check_result(Server, ok),",209],["%%    ?line check_result(R, \"valid\").",210],["check_result(R, \"valid\").",339],["%%    ?line check_result(R, \"not-wf\").",720],["?line check_result(R, \"invalid\").",855],["ssl_test_lib:check_result(Server, ok, Client, ok),",938],["?line check_result(R, \"valid\").",1695],["?line check_result(R, \"not-wf\").",5305]],"useCount":13439},{"word":"children","context":[["children = []}),",322],["#xmlel{children = Els} = SubEl,",328],["children = []}]},",329],["children = []}];",355],["children",424],["children = []}",950],["children = []},",953],["%% Helper macro for declaring children of supervisor",1257],["children =",9780],["children = [",318]],"useCount":32195},{"word":"cindex","context":[["case ?RT_PER:cindex(2,Val1,requestID) of",90],["'enc_TerminationIDList'(?RT_PER:cindex(2,Val1,terminationID)),",252],["case ?RT_PER:cindex(3,Val1,streamID) of",240],["{EncBytes1,EncLen1} = 'enc_TerminationIDList'(?RT_BER:cindex(2,Val,terminationID), [{tag,128,0,'IMPLICIT',0}]),",126],["?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,streamID), [{tag,128,1,'IMPLICIT',0}])",120],["{EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,streamID) of",120],["case ?RT_PER:cindex(4,Val1,extraInfo) of",108],["case ?RT_PER:cindex(3,Val1,portNumber) of",108],["?RT_PER:encode_octet_string([{'SizeConstraint',4}],?RT_PER:cindex(2,Val1,eventName)),",102],["?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],?RT_PER:cindex(2,Val1,transactionId)),",78]],"useCount":12602},{"word":"class","context":[["[{<<\"class\">>,",144],["?XAE(<<\"td\">>, [{<<\"class\">>, <<\"valign\">>}],",80],["%% <p>This class is derived (and can use functions) from:",1132],["?XAC(<<\"td\">>, [{<<\"class\">>, <<\"alignright\">>}],",182],["?XAC(\"td\", [{\"class\", \"valign\"}],",78],["<<\"<div class=\\\"rcot\\\">\",",88],["class = Class,",94],["io_lib:format(\"<font class=\\\"mk\\\">~s ~s</font><br/>\",",140],["?XAC(\"td\", [{\"class\", \"alignright\"}],",108],["io_lib:format(\"<font class=\\\"mrcm\\\">~s</font><br/>\",",97]],"useCount":8716},{"word":"clause","context":[["%%\tClause = {clause, ...}",124],["erl_syntax:clause(",121],["%%\tSee `clause' for documentation on `erl_parse' clauses.",99],["%% Count number of records in a table given a where clause",64],["%% Handle upgrade from old releases. Please, remove this clause in next release.",60],["{Acc, [], State}; %% stop clause when parsing references",50],["%% TODO : add a catch clause",43],["[erl_syntax:clause(",154],["%% @see clause/3",184],["clause ->",215]],"useCount":6109},{"word":"client","context":[["<<\"You need an x:data capable client to \"",87],["Client = ?config(client, Config),",725],["\"This is a relatively long body, that we send to the client... \"",660],["Client :: client(),",170],["key_exchange(#state{role = client,",118],["client ->",100],[", #parameterdescription{name=\"client\", type={tk_objref,",96],["client = From});",90],["{client,Client} = lists:keyfind(client, 1, Config),",88],["{client,Client} = lists:keyfind(client, 1, Config),",88]],"useCount":12425},{"word":"close","context":[["close(This, Options) -> wxWindow:close(This, Options).",606],["ssl_test_lib:close(Client).",1435],["?NS:expect_do_reply('close-session',close,ok),",460],["?NS:expect_do_reply('close-session',close,ok),",460],["close(This) -> wxWindow:close(This).",606],["close(This, Options) -> wxWindow:close(This, Options).",606],["close(This) -> wxWindow:close(This).",606],["gen_tcp:close(Socket),",739],["file:close(Fd),",900],["ssl_test_lib:close(Server),",1947]],"useCount":42675},{"word":"closed","context":[["{Port, closed} ->",156],["{error, closed}",127],["stream_established(closed, StateData) ->",145],["{error, closed} ->",828],["{error, closed};",257],["%% Clean close down!   Server needs to be closed first !!",221],["closed ->",211],["{error, closed} = gen_tcp:recv(Socket, 0, 6000),",209],["wait_for_stream(closed, StateData) ->",205],["closed;",164]],"useCount":8509},{"word":"code","context":[["%% Description: Convert process state when code is changed",1100],["%% returns type code",1066],["%% Convert process state when code is changed",954],["%% Feel free to use, reuse and abuse the code in this file.",437],["%% Purpose: Convert process state when code is changed",431],["%%  We make no guarantees that this code is fit for any purpose.",423],["Pa = filename:dirname(code:which(?MODULE)),",318],["code:purge(Mod),",250],["%% @doc Returns <code>true</code> if <code>Node</code> is an abstract",247],["%% @doc Returns <code>true</code> if <code>Node</code> is an abstract",247]],"useCount":49088},{"word":"code_change","context":[["code_change(_OldVsn, State, _Extra) -> {ok, State}.",1003],["%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}",1010],["code_change/3]).",1974],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",1005],["%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}",904],["code_change(OldVsn, State, Extra) ->",843],["-export([handle_cast/2, handle_info/2, code_change/3]).",713],["code_change/3",686],["terminate/2, code_change/3]).",3309],["code_change(_OldVsn, State, _Extra) ->",7882]],"useCount":29095},{"word":"com","context":[["%%% @author Andrew Bennett <andrew@pixid.com>",225],["%% @author Northscale <info@northscale.com>",331],["-author('bob@mochimedia.com').",326],["%% @author Justin Sheehy <justin@basho.com>",263],["%% @author Richard Carlsson <carlsson.richard@gmail.com>",259],["-author('Justin Sheehy <justin@basho.com>').",243],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang2 for more book information.",236],["%% @author Couchbase <info@couchbase.com>",421],["%% @author Bob Ippolito <bob@mochimedia.com>",425],["-author('Carlos Gonzalez <carlosj.gf@gmail.com>').",602]],"useCount":20433},{"word":"command","context":[["Port2 ! {Parent, {command, \"\"}},",144],["Port ! {Parent, {command, \"\"}},",144],["#'CommandRequest'{command = Cmd} = CR,",152],["{ command , __1 }",192],["?DEBUG(\"Couldn't process ad hoc command:~n~p\", [Other]),",68],["CR = #'CommandRequest'{command = {modReq, AMMR}},",96],["command=#job_conf_command{cmd_facility_id=\"node1\",",85],["#'CommandRequest'{command = Cmd} ->",84],["#'CommandRequest'{command = Command} ->",234],["\"Valid command line options:~n\"",77]],"useCount":8586},{"word":"compile","context":[["-compile(inline).",183],["{error,St#compile{errors=St#compile.errors ++ Es}}",250],["%-compile(export_all).",210],["-compile({no_auto_import,[error/1]}).",237],["{error,St#compile{errors=St#compile.errors ++ Es}}",250],["%%-compile(export_all).",253],["Dispatch = cowboy_router:compile([",286],["-compile([{parse_transform, lager_transform}]).",362],["-compile([export_all]).",1246],["-compile(export_all).",9767]],"useCount":55530},{"word":"config","context":[["config = controller,max_entries = 16777216,active_count = 0,",759],["init = ?config(suite,Config),",790],["Dog = ?config(watchdog, Config),",813],["StateData#state{config =",907],["AppDir = ?config(apps, Config),",1075],["ClientOpts = ?config(client_opts, Config),",1129],["ServerOpts = ?config(server_opts, Config),",1257],["PrivDir = ?config(priv_dir, Config),",1565],["DataDir = ?config(data_dir, Config),",1744],["?line file:set_cwd(?config(data_dir,Config)),",7211]],"useCount":82717},{"word":"connect","context":[["connect(This,EventType) -> wxEvtHandler:connect(This,EventType).",633],["%% <dl><dt>Use {@link wxEvtHandler:connect/3.} with EventType:</dt>",269],["connect(This,EventType) -> wxEvtHandler:connect(This,EventType).",633],["ssh_test_lib:connect(Host, Port, [{silently_accept_hosts, true},",438],["close/1,close/2,connect/2,connect/3,convertDialogToPixels/2,convertPixelsToDialog/2,",305],["connect(This,EventType, Options) -> wxEvtHandler:connect(This,EventType, Options).",633],["connect(This,EventType, Options) -> wxEvtHandler:connect(This,EventType, Options).",633],["connect/2,connect/3,convertDialogToPixels/2,convertPixelsToDialog/2,",285],["close/1,close/2,connect/2,connect/3,convertDialogToPixels/2,convertPixelsToDialog/2,",305],["connect/2,connect/3,convertDialogToPixels/2,convertPixelsToDialog/2,",285]],"useCount":15482},{"word":"connection","context":[["#connection{channel_cache = Cache} = Connection0, _) ->",108],["Conn = State#state.connection,",71],["%% It tries to reuse a previous connection.",72],["%%%      Connection = ct_telnet:connection()",81],["%%% Purpose : Serve C2S connection",84],["#connection{channel_cache = Cache}} = State0) ->",109],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad \"",114],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad format)\",",126],["service = \"ssh-connection\",",134],["%%%      SSH = connection()",360]],"useCount":11650},{"word":"content","context":[["Element#xmlElement.content);",354],["{content_type, proplists:get_value(\"content-type\", Headers)},",70],["{content_length, proplists:get_value(\"content-length\", Headers)},",70],["%% @doc  Infer body length from transfer-encoding and content-length headers.",76],["[E#xmlElement{content=Content}];",80],["#alternative{content=",90],["[#alternative{content=",102],["[{<<\"content-type-params\">>,",118],["#chain{content=",235],["[{\"content-disposition\",",290]],"useCount":9643},{"word":"corba","context":[["-include_lib(\"orber/include/corba.hrl\").",1237],["corba:call(OE_THIS, get_qos, [], ?MODULE).",152],["corba:call(OE_THIS, validate_qos, [Required_qos], ?MODULE, OE_Options).",152],["corba:call(OE_THIS, get_qos, [], ?MODULE, OE_Options).",152],["corba:call(OE_THIS, set_qos, [Qos], ?MODULE).",152],["corba:call(OE_THIS, validate_qos, [Required_qos], ?MODULE).",152],["corba:call(OE_THIS, set_qos, [Qos], ?MODULE, OE_Options).",152],["corba:raise(#'BAD_PARAM'{completion_status=?COMPLETED_NO}).",265],["corba:raise(#'INTERNAL'{completion_status=?COMPLETED_NO})",271],["{reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.",696]],"useCount":17248},{"word":"count","context":[["count() ->",57],["iter2(count(), fun(N) ->",56],["count = 0,",57],["count(Rest, N + 1, Config);",1401],["?assertEqual(0, count()),",226],["?assertEqual(1, count()),",150],["?assertEqual(1, lager_test_backend:count()),",106],["?assertEqual(0, lager_test_backend:count()),",97],["iter(count(), fun() ->",70],["count = Count,",64]],"useCount":6876},{"word":"create","context":[["create() ->",136],["State1 = rebar_state:add_provider(State, providers:create([{name, ?PROVIDER},",150],["throw, 'cannot create a neighborhood() with a neighbor newer than the node itself'),",132],["Provider = providers:create([",125],["[], any:create(orber_tc:null(), null)),",120],["create(This,Parent)",108],["create(This,Parent, []).",108],["value=any:create(orber_tc:short(),",170],["d(\"[MGC] create the event sequence\"),",204],["d(\"[MG] create the event sequence\"),",239]],"useCount":12020},{"word":"crypto","context":[["ok = application:start(crypto),",135],["application:start(crypto),",431],["crypto:start(),",313],["application:stop(crypto),",243],["try crypto:start() of",218],["ensure_started(crypto),",176],["catch crypto:stop(),",167],["application:stop(crypto).",165],["{deprecated, {crypto, block_decrypt, 4}};",143],["{deprecated, {crypto, block_encrypt, 4}};",143]],"useCount":9630},{"word":"ct","context":[["ct:timetrap({seconds,Timeout}),",185],["ct:sleep(500),",241],["-include_lib(\"common_test/include/ct.hrl\").",4020],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400],["ct:sleep(?SLEEP),",384],["CommandProvider = providers:get_provider(ct, Providers, Namespace),",258],["10000 -> ct:fail(\"timeout ~p:~p\",[?MODULE,?LINE])",216],["Error  -> ct:fail(Error)",213],["-include(\"ct.hrl\").",210],["%% ct.",201]],"useCount":19126},{"word":"d","context":[["(d(Sextet2) bsl 12) bor",122],["(d(Sextet1) bsl 18) bor",183],["d(\"await the generator reply(s)\"),",192],["d(\"[MGC] start the simulation\"),",198],["d(\"[MGC] start the simulator \"),",198],["d(\"[MGC] create the event sequence\"),",204],["d(\"[MG] start the simulator (generator)\"),",204],["d(\"[MG] start the simulation\"),",233],["d(\"[MG] create the event sequence\"),",239],["d(\"start nodes: \"",278]],"useCount":19384},{"word":"data","context":[["body = [#text{data = Subject}]}),",117],["{Port, {data, Bytes}} ->",129],["%% as a byte offset into the buffer object's data store.",128],["{Port, {data, Data}} ->",274],["{proceed,Info#mod.data}",154],["%% attribute data(2) with type OCTET STRING",132],["data = Data",231],["{proceed,Info#mod.data};",218],["data(Node1)",183],["data = Data},",178]],"useCount":26479},{"word":"data_dir","context":[["Data = proplists:get_value(data_dir, Config),",188],["?line file:set_cwd(?config(data_dir,Config)),",7211],["DataDir = ?config(data_dir, Config),",1744],["DataDir = ?config(data_dir,Config),",696],["DataDir = proplists:get_value(data_dir, Config),",514],["?line DataDir = ?config(data_dir, Config),",279],["SysDir = ?config(data_dir, Config),",228],["?line DataDir = ?config(data_dir,Config),",201],["?line Path = ?config(data_dir, Config),",199],["SystemDir = ?config(data_dir, Config),",192]],"useCount":14415},{"word":"dbg","context":[["%% put(encode_debug,dbg),",96],["%% put(dbg,true),",1182],["%% erase(dbg),",1083],["?dbg(\"cont()...~n\", []),",520],["%% put(dbg,      true),",198],["%%     put(dbg,true),",195],["%%     erase(dbg),",170],["%%     put(dbg,      true),",130],["dbg:tracer(),",128],["%% put(decode_debug,dbg),",96]],"useCount":10840},{"word":"debug","context":[["%-define(debug, true).",126],["-ifdef(debug).",411],["{debug, true},",278],["%% Format debug messages.  Print them as the call-back module sees",88],["EvSeq = [{debug,  true},",80],["debug ->",79],["-define(FSMOPTS, [{debug, [trace]}]).",380],["-include(\"debug.hrl\").",77],["%% exports for console debug manual use",70],["debug,",70]],"useCount":7189},{"word":"decode","context":[["Decoded = decode(Bytes, Types, Defaults),",470],["%% decode tag and length",11784],["erlcloud_xml:decode(Attributes, Node).",100],["-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).",115],["decode(Rest1, Types,",126],["{decode, DecodeFun},",148],["Res = of_msg_lib:decode(Msg),",163],["decode(Bin) ->",185],["decode(Type,Data) ->",199],["erlcloud_xml:decode(",526]],"useCount":24195},{"word":"decode_disp","context":[["decode_disp('StreamParms',Data) -> 'dec_StreamParms'(Data);",96],["decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).",198],["-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).",115],["decode_disp('Name',Data) -> 'dec_Name'(Data);",101],["decode_disp('Message',Data) -> 'dec_Message'(Data);",97],["decode_disp('MuxType',Data) -> 'dec_MuxType'(Data);",96],["decode_disp('MId',Data) -> 'dec_MId'(Data);",96],["decode_disp('ContextID',Data) -> 'dec_ContextID'(Data);",96],["decode_disp('EventBufferControl',Data) -> 'dec_EventBufferControl'(Data);",96],["decode_disp('ObservedEventsDescriptor',Data) -> 'dec_ObservedEventsDescriptor'(Data);",96]],"useCount":21223},{"word":"decode_integer","context":[["case decode_integer(Tlv, TagIn) of",270],["Val1 = decode_integer(V1, [131072]),",555],["{?RT_BER:decode_integer(V2,{0,65535},[]), TempTlv3};",348],["Term1 = ?RT_BER:decode_integer(V1,{0,4294967295},[131072]),",342],["Val2 = decode_integer(V2, []),",325],["_Opt2 when _Opt2 > 0 ->?RT_PER:decode_integer(Bytes3,[{'ValueRange',{0,65535}}]);",240],["Val1 = decode_integer(Tlv, TagIn),",234],["Val1 = decode_integer(V1, []),",207],["{Term1,Bytes2} = ?RT_PER:decode_integer(Bytes1,[{'ValueRange',{0,4294967295}}]),",192],["?RT_BER:decode_integer(Bytes3,{0,65535},[{tag,128,1,'IMPLICIT',0}], mandatory);",174]],"useCount":8312},{"word":"default","context":[["default,",276],["default -> {result, Reply};",462],["%% 2 tests (ct:run_test + script_start) is default",126],["ElvisConfig = elvis_config:default(),",147],["default;",165],["{result, {default, broadcast}};",118],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108],["{result, default};",165],["{result, {_, default}} ->",182],["default ->",329]],"useCount":16345},{"word":"define","context":[["-define(TRACE(X,Y), ok).",205],["-define(FSMOPTS, [{debug, [trace]}]).",380],["-define(FSMOPTS, []).",376],["-define(XFIELD(Type, Label, Var, Val),",194],["-define(SERVER, ?MODULE).",3629],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["-define(default_timeout, ?t:minutes(1)).",242],["%-define(DBGFSM, true).",268],["-define(GEN_FSM, p1_fsm).",172],["-define(DICT, dict).",181]],"useCount":59817},{"word":"delete","context":[["file:delete(Fname),",549],["delete/2,",298],["delete/1,",277],["ets:delete(E),",223],["ets:delete(E)\">>,",384],["?line true = ets:delete(Tab),",207],["delete(Key) ->",208],["true = ets:delete(Tab),",217],["ets:delete(T),",209],["file:delete(File),",771]],"useCount":35200},{"word":"destroy","context":[["s([{NewKeyc5, ?destroy}]),",233],["orber_ifr:destroy(Ref),",340],["wxe_util:destroy(?DESTROY_OBJECT,Obj),",871],["destroy(Obj=#wx_ref{type=Type}) ->",1017],["%%%% Operation: destroy",224],["destroy/1,",146],["corba:call(OE_THIS, destroy, [], ?MODULE).",112],["wxDialog:destroy(Dialog),",136],["destroy(OE_THIS, OE_Options) ->",112],["corba:call(OE_THIS, destroy, [], ?MODULE, OE_Options).",112]],"useCount":9643},{"word":"dets","context":[["ok = dets:close(TabRef),",198],["ok = dets:close(Tab),",234],["ok = dets:close(T),",239],["dets_utils:mkeysort(1, dets:match_object(Tab, '_')),",72],["?line ok = dets:close(Tab),",76],["{ok, _} = dets:open_file(TabRef, Args),",144],["dets:close(TabRef),",80],["dets:safe_fixtable(T, true),",98],["true = dets:member(T, Key),",114],["ok = dets:sync(T),",103]],"useCount":6051},{"word":"dict","context":[["case dict:is_key(Key, Dict) of",64],["New_dict = dict:erase(Id, Dict),",257],["dict:new(),",197],["-define(DICT, dict).",181],["dict:fold(",166],["case dict:find(Key, Dict) of",137],["{reply, Reply, From, S#eldap{dict = New_dict}};",137],["dict:new().",99],["case catch dict:update(Chan,",72],["case dict:find(Id, Dict) of",70]],"useCount":9685},{"word":"dir","context":[["?DBG(\"init_all -> application mnesia: set_env dir on node ~p\",[SaNode]),",42],["{config, [{verbosity, trace}, {dir, ConfDir}, {db_dir, DbDir}]}],",272],["{dir,    LogDir},",78],["{dir, Dir},",57],["AppDir = rebar_app_info:dir(AppInfo),",56],["SearchPaths::[dir()], TabWidth::integer()) ->",42],["?line application_controller:set_env(mnesia, dir,",42],["MOpts = fun({dir, Dir}, Acc) -> [<<1:32/?UI,Dir:32/?UI>>|Acc];",48],["Dir = mnesia_lib:dir(),",45],["String = io_lib:format(\"Can't import jabberd14 spool dir ~p at node ~p: ~p\",",43]],"useCount":6197},{"word":"directory","context":[["%%     ChicagoBoss Team and contributors, see AUTHORS file in root directory",92],["{ok, #file_info{type = directory}} ->",223],["directory ->",97],["%% Args: Dir is the directory where the configuration files are found.",62],["MnesiaDirectory = mnesia:system_info(directory),",71],["\"ejabberd needs read and write access in the directory:~n   ~s~n\"",71],["%%% The suites used for the test are located in the data directory.",84],["{ok, #file_info{type=directory}} ->",93],["{ok,#file_info{type=directory}} ->",86],["%%     See AUTHORS file in root directory",92]],"useCount":6235},{"word":"disconnect","context":[["disconnect(This,EventType) -> wxEvtHandler:disconnect(This,EventType).",633],["disconnect(This) -> wxEvtHandler:disconnect(This).",633],["disconnect(This,EventType, Options) -> wxEvtHandler:disconnect(This,EventType, Options).",633],["disconnect(Config).",1210],["destroyChildren/1,disable/1,disconnect/1,disconnect/2,disconnect/3,",486],["disconnect(This,EventType, Options) -> wxEvtHandler:disconnect(This,EventType, Options).",633],["destroyChildren/1,disable/1,disconnect/1,disconnect/2,disconnect/3,",486],["destroyChildren/1,disable/1,disconnect/1,disconnect/2,disconnect/3,",486],["disconnect(This) -> wxEvtHandler:disconnect(This).",633],["disconnect(This,EventType) -> wxEvtHandler:disconnect(This,EventType).",633]],"useCount":9213},{"word":"div","context":[["</div>",113],["MegaSecs1 = S div 1000000,",126],["[],[true]}]) div F,",75],["<<\"<div class=\\\"rcot\\\">\",",88],["TimeStamp = {Shift div 1000000,",80],["OptText/binary, \"</div>\">>;",88],["\"\\\"</div>\">>;",88],["Timeout = max(StateData#state.mgmt_timeout - Diff div 1000, 1),",74],["A*1000000000+B*1000+(C div 1000).",66],["div 1000,",71]],"useCount":7550},{"word":"do","context":[["%% furnished to do so, subject to the following conditions:",1401],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% @doc Destroys this object, do not use object again",1017],["%%% furnished to do so, subject to the following conditions:",982],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["do(State) ->",420],["-spec do(rebar_state:t()) -> {ok, rebar_state:t()} | {error, string()}.",365],["do/1,",348],["\\\"S\\\": \\\"Amazon DynamoDB#How do I update multiple items?\\\"",132],["%% is intended to be the opposite of Module:start/2 and should do",132]],"useCount":15136},{"word":"doc","context":[["%% @doc API for starting the supervisor.",181],["%% @doc Handling all non call/cast messages",174],["%% @doc This function is called by a gen_server when it is about to",167],["%% @doc Starts the server",164],["%% @doc",27954],["%% @doc Convert process state when code is changed",204],["%% @doc Returns <code>true</code> if <code>Node</code> is an abstract",247],["%%% @doc For info and other types, see ssh_sftp(3).",300],["%% @doc Destroys this object, do not use object again",1017],["%%% @doc",6497]],"useCount":80204},{"word":"does","context":[["%%<li>The request does not specify a node.</li>",69],["%%<li>The specified node does not exist.</li>",207],["%%<li>The node does not exist.</li>",207],["%% Entity has multiple subscriptions to the node but does not specify a subscription ID",124],["%%<li>The service does not support node configuration.</li>",117],["false; %% Account does not exist",104],["%% module database schema if it does not exists yet.</p>",79],["%%<li>The requesting entity does not have sufficient privileges to purge the node.</li>",69],["%%<li>The request does not include an <item/> element or the <item/> element does not specify an ItemId.</li>",69],["%%<li>The requesting entity does not have sufficient privileges to configure the node.</li>",69]],"useCount":8293},{"word":"done","context":[["{done,{ok,T,Line},Rest};",76],["done;",904],["done ->",563],["done",489],["0 -> {<<>>, done};",74],["{ok, done};",103],["done.",471],["%% {more,Continuation} | {done,ReturnVal,RestChars}.",160],["i(\"done\", []),",347],["p(\"done\"),",205]],"useCount":12809},{"word":"e","context":[["Endsymbol e.",104],["%%e",205],["<<_:O/binary, E, _/binary>> when E =:= $e orelse E =:= $E ->",136],["qlc:e(Q)",89],["R = qlc:e(Q),",72],["tokenize_number(B, esign, ?INC_COL(S), [$e, $0, $. | Acc]);",68],["err = qlc:e(Q)\">>,",72],["tokenize_number(B, esign, ?INC_COL(S), [$e | Acc]);",68],["%%<li>The requesting entity is blocked from subscribing (e.g., because having an affiliation of outcast).</li>",69],["[] = qlc:e(Q),",208]],"useCount":13685},{"word":"each","context":[["%% This function is called for each installed event handler when",56],["%% There should be one instance of this function for each possible",95],["%% and sorted to ensure that each module is initialized only once.</p>",66],["%% @doc Call the init/1 function for each plugin declared in the config file.",70],["%% Description: Cleanup after each test case",109],["%% Description: Initialization before each test case",62],["%% For each contact with Subscription:",59],["%% Description: Initiation before each test case",102],["% This should return a list of pairs where each pair is of the form {Mediatype, Handler}",56],["% This must be a list of pairs where in each pair Encoding is a string naming a valid",55]],"useCount":6345},{"word":"eh","context":[["{?eh,tc_done,",1000],["[{?eh,tc_done,{repeat_1_SUITE,",330],["{?eh,tc_start,",344],["[{?eh,tc_start,",394],["{?eh,tc_done,{repeat_1_SUITE,",390],["{?eh,test_done,{'DEF','STOP_TIME'}},",683],["{?eh,tc_auto_skip,",317],["{?eh,test_start,{'DEF',{'START_TIME','LOGDIR'}}},",679],["{?eh,start_logging,{'DEF','RUNDIR'}},",631],["{?eh,stop_logging,[]}",446]],"useCount":19128},{"word":"ejabberd","context":[["From :: ejabberd:jid(),",199],["-include_lib(\"ejabberd/include/jlib.hrl\").",94],["case ejabberd:get_pid_file() of",116],["Text1 = lists:flatten(\"Problem loading ejabberd config file \" ++ Filename),",135],["User :: ejabberd:user(),",157],["%%% ejabberd commands",166],["LServer :: ejabberd:lserver(),",206],["Server :: ejabberd:server(),",328],["To :: ejabberd:jid(),",380],["-include(\"ejabberd.hrl\").",4106]],"useCount":19552},{"word":"ejabberd_hooks","context":[["ejabberd_hooks:delete(remove_user, Host,",163],["ejabberd_hooks:add(remove_user, Host,",246],["ejabberd_hooks:run(c2s_loop_debug, [{route, From, To, Packet}]),",157],["ejabberd_hooks:delete(anonymous_purge_hook, Host,",176],["ejabberd_hooks:delete(remove_user, Host, ?MODULE,",184],["ejabberd_hooks:run(roster_out_subscription,",207],["case ejabberd_hooks:run_fold(",254],["ejabberd_hooks:run(c2s_auth_result, StateData#state.server,",256],["ejabberd_hooks:run_fold(",408],["ejabberd_hooks:add(roster_in_subscription, Host,",166]],"useCount":18931},{"word":"ejabberd_odbc","context":[["ejabberd_odbc:sql_transaction(LServer, F).",220],["SName = ejabberd_odbc:escape(Name),",329],["ejabberd_odbc:sql_query_t(",578],["case catch ejabberd_odbc:sql_query(LServer,",208],["SGroup = ejabberd_odbc:escape(Group),",198],["SHost = ejabberd_odbc:escape(Host),",197],["case catch ejabberd_odbc:sql_query_t(",187],["ejabberd_odbc:sql_query(LServer,",849],["ejabberd_odbc:sql_query(",1352],["Username = ejabberd_odbc:escape(LUser),",1965]],"useCount":13455},{"word":"ejabberd_router","context":[["ejabberd_router:route % TODO: s/Nick/\"\"/",215],["ejabberd_router:route(To, From, Err),",305],["ejabberd_router:route(To, From, Err)",950],["ejabberd_router:route(jlib:jid_replace_resource(StateData#state.jid,",539],["ejabberd_router:route(To, From,",499],["ejabberd_router:route(To,",367],["ejabberd_router:route(To, From, Err);",1063],["ejabberd_router:route(",2103],["ejabberd_router:route(To, From, Res);",357],["ejabberd_router:route(StateData#state.jid, From, Err),",306]],"useCount":11636},{"word":"element","context":[["Enc1@element = element(3, Val),",721],["if Enc2@element =:= asn1_NOVALUE ->",1311],["if Enc1@element =:= asn1_NOVALUE ->",1741],["{EncBytes,EncLen} = case element(1,Val) of",2006],["Enc2@element = element(2, Val),",691],["if Enc4@element =:= asn1_NOVALUE ->",696],["Enc1@element = element(3, Val),",721],["Enc1@element = element(2, Val),",916],["Enc1@element = element(2, Val),",916],["case element(1,Val) of",1143]],"useCount":84123},{"word":"else","context":[["%% If we have an end_token or error then return done, else if we have",32],["else",55],["%% We are using v3 here, so crypto must be supported or else...",43],["%% If we have a token or error then return done, else if we have a",32],["\"-else.\\n\"",130],["-else.",4046],["} else {",30],["Terminals i t else.",32],["%% a token then save it and continue, else if we have a skip_token",32],["e -> i e t e else e.",32]],"useCount":6086},{"word":"em","context":[["em:strict(M, gen_tcp, send,",43],["%% <em>C1</em>; ...; <em>Cn</em> end</code>\". More exactly, if each",45],["%% <em>C1</em>; ...; <em>Cn</em> end</code>\". More exactly, if each",45],["M = em:new(),",61],["%% <em>node_plugin</em>. The 'node_' prefix is mandatory.</p>",70],["%% <em>C1</em>; ...; <em>Cn</em> end</code>\". More exactly, if each",45],["%% <em>node_plugin</em>. The 'node_' prefix is mandatory.</p>",70],["%% <em>This is a potentially expensive operation and should not be used in production.</em>",74],["%% <em>This is a potentially expensive operation and should not be used in production.</em>",74],["%% <em>C1</em>; ...; <em>Cn</em> end</code>\". More exactly, if each",45]],"useCount":12570},{"word":"emit","context":[["emit({\";\",nl}),",102],["emit(Fd, \"      return oe_error_code;\\n    }\\n\");",248],["emit([\".\",nl])",121],["emit(Fd, \"    return oe_error_code;\\n  }\\n\"),",132],["emit({\"-export([\",nl}),",144],["emit([\";\",nl]);",104],["emit(Fd, \"    return oe_error_code;\\n  }\\n\");",224],["emit([\";\",nl]),",107],["emit(Fd,",168],["emit(Fd, \"  if ((oe_error_code = \"",224]],"useCount":12950},{"word":"empty","context":[["{empty, _} ->",327],["%% table, it should return an empty list, as the affiliation will be read by",96],["empty() ->",132],["empty,",135],["%% An empty empty descriptor is removed",88],["%% An empty empty descriptor is removed",88],["gb_trees:empty().",161],["empty;",213],["empty -> []",226],["empty ->",581]],"useCount":9660},{"word":"encode","context":[["{asn1_ExtAlt, ?RT_BER:encode(Else)}",400],["encode/1,",127],["encode(Any) ->",84],["{asn1_ExtAlt, ?RT_BER:encode(Else,nif)}",84],["-export([encode/2,decode/2]).",84],["encode(Type, Data) ->",94],["-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).",115],["encode(Type,Data) ->",118],["encode(List) ->",126],["{encode, EncodeFun},",148]],"useCount":12975},{"word":"encode_disp","context":[["encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).",198],["encode_disp('EventsDescriptor',Data) -> 'enc_EventsDescriptor'(Data);",150],["encode_disp('ContextID',Data) -> 'enc_ContextID'(Data);",150],["encode_disp('ErrorDescriptor',Data) -> 'enc_ErrorDescriptor'(Data);",150],["encode_disp('StatisticsParameter',Data) -> 'enc_StatisticsParameter'(Data);",150],["encode_disp('WildcardField',Data) -> 'enc_WildcardField'(Data);",150],["encode_disp('NotifyCompletion',Data) -> 'enc_NotifyCompletion'(Data);",150],["encode_disp('TransactionAck',Data) -> 'enc_TransactionAck'(Data);",150],["encode_disp('Name',Data) -> 'enc_Name'(Data);",156],["encode_disp('Message',Data) -> 'enc_Message'(Data);",151]],"useCount":21218},{"word":"encode_integer","context":[["?RT_BER:encode_integer([], Cindex2, [<<129>>])",420],["?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],Tmpval1)",189],["?RT_PER:encode_integer([{'ValueRange',{0,65535}}],Tmpval1)",354],["encode_integer(Val, TagIn).",238],["encode_integer(Cindex2, [<<129>>])",355],["?RT_BER:encode_integer([], Val, TagIn).",208],["?RT_BER:encode_integer([], Cindex1, [<<128>>])",192],["{EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),",435],["{EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<128>>]),",510],["encode_integer(Cindex1, [<<128>>])",165]],"useCount":11549},{"word":"encode_tags","context":[["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).",390],["encode_tags(TagIn, OctetList, length(OctetList)).",118],["encode_tags(TagIn, <<0>>, 1);",116],["encode_tags(TagIn, [Unused|OctetList], Len + 1);",99],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331],["?RT_BER:encode_tags(TagIn, EncBytes, EncLen).",2229],["?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).",2652],["encode_tags(TagIn, EncBytes, EncLen).",2683],["encode_tags(TagIn, BytesSoFar, LenSoFar).",3455]],"useCount":17491},{"word":"encoding","context":[["ScriptStr = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>",72],["% content encoding and Encoder is a callable function in the resource which will be called",55],["% is needed to support gzip content encoding.",55],["% the encoding of class of tag bits 8 and 7",53],["%% @doc  Infer body length from transfer-encoding and content-length headers.",76],["throw({error, \"Decoding error: illegal UTF-8 encoding\"})",88],["%% test utf8 encoding",52],["Enc = encoding(Db, Table),",52],["{<<\"accept-encoding\">>, <<\"gzip, deflate\">>},",48],["andalso (false =:= lists:keyfind(<<\"transfer-encoding\">>,",46]],"useCount":6115},{"word":"end","context":[["end",153628],["end),",12510],["end,",369462],["end.",363917],["end;",240370],["%% @end",46352],["%%% @end",10357],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["end).",12944],["end | __Stack].",27182]],"useCount":1413122},{"word":"end_per_group","context":[["{?M2,end_per_group}}],",159],["init_per_group/2,end_per_group/2,",840],["init_per_group/2,end_per_group/2]).",429],["end_per_group(_GroupName, _Config) ->",347],["-export([all/0, suite/0,groups/0,init_per_group/2,end_per_group/2,",212],["%% Function: end_per_group(GroupName, Config0) ->",201],["end_per_group(_, Config) ->",174],["{?M2,end_per_group}},",93],["end_per_group/2,",93],["end_per_group(_GroupName, Config) ->",2921]],"useCount":9785},{"word":"end_per_suite","context":[["end_per_suite(_Config) ->",3141],["-export([end_per_suite/1]).",136],["ct_test_support:end_per_suite(Config).",149],["end_per_suite(Config) ->",1672],["-export([all/0, suite/0,groups/0,init_per_suite/1, end_per_suite/1,",1398],["end_per_suite/1,",305],["escalus:end_per_suite(Config).",153],["%% Function: end_per_suite(Config0) -> void() | {save_config,Config1}",214],["init_per_suite/1, end_per_suite/1,",246],["end_per_suite(Config) when is_list(Config) ->",292]],"useCount":11204},{"word":"end_per_testcase","context":[["escalus:end_per_testcase(CaseName, Config);",335],["end_per_testcase(_Case, Config) ->",811],["end_per_testcase(_TestCase, _Config) ->",574],["-export([init_per_testcase/2, end_per_testcase/2]).",487],["end_per_testcase(_TestCase, Config) ->",369],["end_per_testcase(_, Config) ->",353],["end_per_testcase(_Case, _Config) ->",244],["init_per_testcase/2,end_per_testcase/2,",258],["end_per_testcase(_Func, Config) ->",270],["init_per_testcase/2, end_per_testcase/2]).",318]],"useCount":8698},{"word":"endif","context":[["-endif.",15485],["-endif. % TEST",272],["\"-endif.\\n\">>,",53],["%%-endif.",74],["%-endif.",68],["-endif. % EQC",89],["\"-endif.\\n\"",106],["-endif.\t% NO_UNUSED",129],["\"-endif.\">>,",63],["emit(Fd, \"#endif\\n\"),",48]],"useCount":17053},{"word":"entry","context":[["%%% Modify an entry. Given an entry a number of modification",77],["?d(\"start_link -> entry with\"",83],["<entry>",117],["</entry>",117],["?LOG(\"init_mib_storage_ets -> entry\", []),",154],["%%% Test entry points",68],["?d(\"init -> entry with\"",71],["?DBG(\"loop_mib_1 -> entry\",[]),",74],["%%% Modify an entry. Given an entry a number of modification",77],["d(\"compact_otp4085_msg1 -> entry\", []),",64]],"useCount":11680},{"word":"eof","context":[["{eof, S}",68],["eof;",415],["eof ->",1794],["{Port,eof} ->",71],["eof",164],["file:position(Fid, eof),",136],["eof],",107],["{eof, _} ->",89],["{eof, Endline} ->",176],["{Port, eof} ->",269]],"useCount":8394},{"word":"erase","context":[["erase(decode_debug),",100],["erase(encode_debug),",100],["erase(current_func),",70],["%%     erase(dbg),",170],["New_dict = dict:erase(Id, Dict),",257],["Robots = (?DICT):erase(From, StateData#state.robots),",70],["%% erase(severity),",1073],["%% erase(dbg),",1083],["erase(),",124],["%%     erase(severity),",170]],"useCount":6317},{"word":"erl","context":[["\".erl\" ->",107],["%%% File    : ejabberd_c2s.erl",84],["%% of the generated .erl file by the HiPE compiler.  Please do not remove.",81],["%% Copied from ejabberd_socket.erl",78],["%%% File    : ejabberd_config.erl",71],["%%% File    : mod_muc_room.erl",65],["%%% File    : mod_vcard.erl",64],["%%% File    : ejabberd_app.erl",61],["%%% File    : mod_offline.erl",61],["%% Function copied from ejabberd_logger_h.erl and customized",61]],"useCount":10101},{"word":"erl_syntax","context":[["report({Env#env.file, erl_syntax:get_pos(F),",143],["case erl_syntax:type(Node) of",237],["erl_syntax:application(",200],["[erl_syntax:clause(",154],["erl_syntax:function(",154],["case erl_syntax:type(F) of",153],["[erl_syntax:variable(\"__TopXMLNS\"),",78],["case erl_syntax:subtrees(Tree) of",86],["case erl_syntax:type(Tree) of",90],["erl_syntax:clause(",121]],"useCount":11024},{"word":"erl_type","context":[["-spec t_integer(integer()) -> erl_type().",20],["t_map_mandatoriness(), erl_type(),",24],["-opaque erl_type() :: ?any | ?none | ?unit | #c{}.",20],["erl_types:erl_type().",25],["-spec t_bitstr_base(erl_type()) -> non_neg_integer().",20],["-spec t_list() -> erl_type().",20],["-spec t_unopaque(erl_type()) -> erl_type().",20],["-spec t_non_neg_integer() -> erl_type().",20],["arg_types  :: [erl_types:erl_type()],",22],["'error' | {'ok', [{atom(), parse_form(), erl_type()}]}.",28]],"useCount":6981},{"word":"erlang","context":[["erlang:nif_error(undef).",850],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil -*-",898],["%% retrieved via the world wide web at http://www.erlang.org/.",1056],["%% -*- erlang-indent-level: 2 -*-",1099],["parent_class(_Class) -> erlang:error({badtype, ?MODULE}).",1461],["erlang:error({xmpp_codec,",1979],["(BadOpt, _) -> erlang:error({badoption, BadOpt}) end,",3443],["erlang:nif_error(undefined).",3858],["%% retrieved online at http://www.erlang.org/.",6836],["erlang:garbage_collect(),",748]],"useCount":103705},{"word":"error","context":[["{error, _} ->",3681],["{error, Error} ->",5201],["(BadOpt, _) -> erlang:error({badoption, BadOpt}) end,",3443],["error;",3121],["{error,",2912],["error",5778],["exit({error,{asn1,bad_range}})",3584],["{error, Reason} ->",18938],["error ->",10888],["{error, Reason}",5882]],"useCount":331382},{"word":"error_logger","context":[["error_logger:error_report(Report),",148],["error_logger:error_msg(\"~p,~p,~p,~p~n\",",174],["error_logger:format(",200],["error_logger:tty(true)",164],["error_logger:info_msg(",209],["error_logger:info_report(Report),",89],["error_logger:warning_msg(",102],["error_logger:error_msg(",425],["error_logger:tty(false),",484],["_ = gen_event:which_handlers(error_logger),",629]],"useCount":6999},{"word":"escalus","context":[["escalus:wait_for_stanzas(Bob, 2),",268],["escalus:assert(is_stanza_from,",462],["escalus:wait_for_stanzas(Alice, 2),",388],["escalus:send(Bob, stanza_muc_enter_room(?config(room, Config), <<\"bob\">>)),",364],["escalus:wait_for_stanzas(Bob, 3),",353],["escalus:wait_for_stanza(Alice),",578],["escalus:wait_for_stanza(Bob),",544],["escalus:story(Config, [{alice, 1}], fun(Alice) ->",309],["escalus:end_per_testcase(CaseName, Config);",335],["escalus:init_per_testcase(CaseName, Config1);",336]],"useCount":17987},{"word":"escape","context":[["escape/1,",81],["SGroup = ejabberd_odbc:escape(Group),",198],["SHost = ejabberd_odbc:escape(Host),",197],["Username = ejabberd_odbc:escape(User),",180],["SJID = ejabberd_odbc:escape(jlib:jid_to_string(LJID)),",163],["Pass = ejabberd_odbc:escape(Password),",112],["H = ?PUBSUB:escape(Host),",93],["SName = ejabberd_odbc:escape(Name),",329],["Username = ejabberd_odbc:escape(LUser),",1965],["LXMLNS = ejabberd_odbc:escape(XMLNS),",79]],"useCount":9201},{"word":"ets","context":[["ets:delete_all_objects(RemovedNodesTab),",555],["ets:delete(E)\">>,",384],["ets ->",273],["ets:delete(E),",223],["true = ets:delete(Tab),",217],["ets:delete(T),",209],["?line true = ets:delete(Tab),",207],["ets:delete(Tab),",194],["ets:delete(RefTable),",190],["ets:insert(gen_mod:get_module_proc(ServerHost, config),",175]],"useCount":36732},{"word":"eunit","context":[["-include_lib(\"eunit/include/eunit.hrl\").",10822],["-include(\"eunit.hrl\").",168],["-include_lib(\"eunit/include/eunit.hrl\").",10822],["%% @see eunit",126],["-include_lib (\"eunit/include/eunit.hrl\").",60],["%% but eunit does not allow",56],["-include_lib (\"eunit/include/eunit.hrl\").",60],["\"-include_lib(\\\"eunit/include/eunit.hrl\\\").\\n\",",59],["\"-include_lib(\\\"eunit/include/eunit.hrl\\\").\\n\",",59],["%% output_tests converts a list of output_test specifiers into an eunit test generator",57]],"useCount":23754},{"word":"event","context":[["%% this function is called to initialize the event handler.",102],["{true, #event{detail_level = DetailLevel,",121],["event(DB, Gstkid, Etype, Edata, Args) ->",103],["?CT_EVMGR_REF, #event{ name = cth, node = node(),",103],["%% state name. Whenever a gen_fsm receives an event sent using",116],["d(\"[MG] create the event sequence\"),",239],["d(\"[MGC] create the event sequence\"),",204],["%% the event.",126],["<<\"http://jabber.org/protocol/pubsub#event\">>} ->",124],["%% Whenever a gen_fsm receives an event sent using",119]],"useCount":10450},{"word":"event_fun","context":[["event_fun=CbFun,",25],["%%R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",20],["event_fun = Event},",36],["%%    ?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",945],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["%%?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",100],["%%    R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",189],["event_fun = Event,",36],["%%           OptTag = event_state | event_fun | continuation_state |",12]],"useCount":10885},{"word":"exit","context":[["exit({error,{asn1,bad_range}})",3584],["exit({error,{asn1,{invalid_choice_tag,Else}}})",912],["exit(Reason)",974],["Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})",1024],["EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})",1134],["exit(Reason);",1428],["exit(normal);",2012],["exit({error,{asn1,{invalid_choice_type,Else}}})",2006],["exit(normal)",1713],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639]],"useCount":56474},{"word":"expect","context":[["?line expect(1, {inform, true},",105],["?line expect(3, [{[fname,0], \"test set\"}]),",215],["?line expect(4, v2trap, [{[sysUpTime, 0], any},",162],["expect(1, [{[sysDescr,0], \"Erlang SNMP agent\"},",129],["?line ?v1_2(expect(2, noSuchName, 1, any),",86],["?line expect(51, [{[sysDescr,0], \"Erlang SNMP agent\"},",86],["?line expect(5, [{[sysLocation, 0], \"new_value\"}]),",86],["?line ?v1_2(expect(1, noSuchName, [3,5], any),",86],["?line expect(3, v2trap, [{[sysUpTime, 0], any},",122],["?line expect(1, [{[sysDescr,0], \"Erlang SNMP agent\"},",129]],"useCount":18749},{"word":"export","context":[["-export([start_link/0]).",4330],["-export([init/1]).",5211],["?line xmerl:export([A],xmerl_test).",7124],["-export([",11580],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2,",3306],["-export([init/1,",3024],["-export([start/2, stop/1]).",2350],["-export([start_link/1]).",1223],["-export([all/0, suite/0,groups/0,init_per_suite/1, end_per_suite/1,",1398],["xmerl:export([A],xmerl_test).",1781]],"useCount":121703},{"word":"export_all","context":[["%-compile(export_all).",210],["-compile(export_all).",9767],["-compile([export_all]).",1246],["%%-compile(export_all).",253],["%% -compile(export_all).",111],["-compile (export_all).",106],["{[]},\t\t\t\t%Tuple indicates no 'export_all'.",99],["\"-compile(export_all).\\n\"",63],["case lists:member(export_all, List) of",40],["%% -compile([export_all]).",40]],"useCount":12511},{"word":"exports","context":[["%% External exports",3418],["%% exports for console debug manual use",70],["%%% External exports",76],["%% internal exports",120],["%% gen_server exports",137],["%% Internal exports.",146],["%% Test server specific exports",149],["%% inherited exports",1461],["%% Internal exports",1483],["%% API exports",270]],"useCount":9724},{"word":"expr","context":[["E1 = expr(E0,St),",130],["E1 = expr(E0),",131],["case get_content(expr, Es1) of",45],["E1 = expr(E0, false),",47],["Val1 = expr(Val0),",49],["Rec1 = expr(Rec0),",60],["Field1 = expr(Field0),",60],["{E1,Eps,St1} = expr(E0, St0),",72],["{E,St1} = expr(E0, St0),",90],["{Evt,St1} = expr(E, Vt, St0),",77]],"useCount":6279},{"word":"extra","context":[["case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped",322],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed",335],["{asn1, {unexpected, Tlv3}}}) % extra fields not allowed",212],["case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped",570],["case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped",1090],["case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped",1304],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed",199],["case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped",177],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed",180]],"useCount":8331},{"word":"f","context":[["$\\f ->",214],["[$f, $\\\\ | Acc];",72],["rpc:call(N1,f,f1,[]),",74],["f(begin",86],["tokenize_string(B, ?ADV_COL(S, 2), [$\\f | Acc]);",68],["f = F,",66],["(C >= $a andalso C =< $f) orelse",64],["{<<\"\\\" \\b\\f\\r\\n\\t\\\"\">>, \"\\\"\\\\\\\" \\\\b\\\\f\\\\r\\\\n\\\\t\\\\\\\"\\\"\"},",62],["<<_:O/binary, \"\\\\f\", _/binary>> ->",68],["f() ->",137]],"useCount":7976},{"word":"fail","context":[["{fail, Reason};",252],["fail",247],["?line ?t:fail()",245],["10000 -> ct:fail(\"timeout ~p:~p\",[?MODULE,?LINE])",216],["?t:fail()",214],["fail ->",259],["{fail, Reason} ->",358],["Error  -> ct:fail(Error)",213],["fail;",158],["30000 -> ct:fail(\"timeout ~p:~p\",[?MODULE,?LINE])",151]],"useCount":13429},{"word":"failed","context":[["{failed,{timetrap_timeout,{'$approx',500}}}}},",76],["failed;",332],["{failed,{timetrap_timeout,{'$approx',1000}}}}},",74],["ct:fail(failed)",86],["{failed,",119],["failed",215],["failed ->",306],["{failed,{error,failing_this_time}}}},",90],["{failed,{timetrap_8_SUITE,init_per_group,",72],["?WARNING_MSG(\"Access of ~p from ~p failed with error: ~p\",",72]],"useCount":10023},{"word":"false","context":[["false ->",107532],["_ -> false",6462],["false.",10158],["false",13726],["false;",16228],["false -> ok",2793],["false -> false",1541],["false -> false",1541],["false -> []",1841],["false,",1837]],"useCount":303826},{"word":"field","context":[["[#xmlel{name = <<\"field\">>,",136],["#xmlel{ns = ?NS_DATA_FORMS, name = 'field', attrs =",117],["#xmlel{name = <<\"field\">>,",1688],["{xmlelement, \"field\", [{\"type\", Type},",137],["exit({error,{asn1,{\"missing mandatory field in object\",",92],["% icky hack of field values - compactor_pid used to store clients",78],["%%% by the subscriptions field of pubsub_state. For information on",69],["name     = <<\"field\">>,",65],["#xmlel{name = <<\"field\">>, attrs = [{<<\"var\">>, Var}],",63],["{xmlelement, \"field\",",319]],"useCount":7525},{"word":"fields","context":[["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed",199],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639],["case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped",1304],["{asn1, {unexpected, Tlv3}}}) % extra fields not allowed",212],["fields =",226],["case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped",322],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed",335],["set_record_field(record_info(fields,",359],["case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped",570],["case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped",1090]],"useCount":12710},{"word":"file","context":[["?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",8015],["?line file:set_cwd(?config(data_dir,Config)),",7211],["%% This file is generated DO NOT EDIT",1492],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587],["file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",1603],["file:set_cwd(datadir(Config)),",1801],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["-include_lib(\"kernel/include/file.hrl\").",2326],["%% Implementation stub file",1952],["%% This file is automatically generated. DO NOT EDIT IT.",1952]],"useCount":122323},{"word":"filename","context":[["ConfigFile = filename:join([LibDir1, \"relx.config\"]),",173],["?line NewDir = filename:join(RootDir,",164],["DataDir = filename:absname(?copydir),",195],["(filename:join(HomeDir,",208],["SystemDir = filename:join(?config(priv_dir, Config), system),",306],["Pa = filename:dirname(code:which(?MODULE)),",318],["case filename:extension(File) of",325],["[filename:absname(Path), node(), Reason]),",338],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["?line Name = filename:join(RootDir,",156]],"useCount":39833},{"word":"files","context":[["%% It also includes additional configuration files and replaces macros.",69],["%% Stop the agent (without deleting the stored files)",86],["%% Application files",90],["%% Include files",1481],["%% To be used in grammar files to throw an error message to the parser",162],["%% @doc Include additional configuration files in the list of terms.",69],["%% IFR registration checks for included idl files.",96],["files() ->",143],["?ERROR_MSG(\"Error reading Mnesia database spool files:~n\"",70],["%% No included idl-files detected.",70]],"useCount":6971},{"word":"filter","context":[["{filter, EldapFilter},",107],["lists:filter(",899],["case lists:filter(",76],["?assertEqual(1, Mod:info(filter)),",73],["%% @todo Probably filter Opts?",66],["case lists:filter(Filter, Plugins) of",68],["TLSOpts1 = lists:filter(fun ({certfile, _}) -> true;",66],["lists:filter(fun filelib:is_dir/1,",61],["?assertEqual(0, Mod:info(filter)),",60],["FEls = lists:filter(",59]],"useCount":8000},{"word":"find","context":[["find/2,",71],["?DICT:find(LJID, StateData#state.users),",87],["case (?DICT):find(Nick, StateData#state.nicks) of",101],["% find this output by clicking on the test name, then case name in test/index.html",70],["NewState = case (?DICT):find(From,",70],["%% this function is called by the new process to find out about",329],["case dict:find(Key, Dict) of",137],["%% to find out about restart strategy, maximum restart frequency and child",112],["{ok, #user{nick = OldNick}} = (?DICT):find(LJID,",65],["case dict:find(Id, Dict) of",70]],"useCount":7469},{"word":"first","context":[["% an Accept header with a value that does not appear as a first element in any of the",56],["%% element in the first response (which there isn't in our",53],["%% Get the first page of size 5.",56],["%% in positioning in list the first element is 0, the second 1 etc.., but",50],["%% Returns a sublist of Terms with only the ones which first element is",69],["first ->",62],["%% Clean close down!   Server needs to be closed first !!",221],["%% Returns a sublist of Terms without the ones which first element is",69],["%% This is the first time we see this temp...",52],["?TLFIELD(<<\"text-single\">>, <<\"Name\">>, <<\"first\">>),",52]],"useCount":9741},{"word":"flatten","context":[["Text1 = lists:flatten(\"Problem loading ejabberd config file \" ++ Filename),",135],["lists:flatten(io_lib:format(",80],["lists:flatten(Acc);",80],["lists:flatten([",134],["{error, lists:flatten(",99],["lists:flatten(lists:reverse(Acc));",104],["ET = lists:flatten(io_lib:format(\"~w\",[T])),",106],["lists:flatten(",1949],["lists:flatten(FormatDate).",106],["?assertEqual(Expected, lists:flatten(Msg))",189]],"useCount":14139},{"word":"float","context":[["%% @type json_number() = integer() | float()",81],["{{float, lists:reverse(Acc)}, S}",136],["float;",98],["float ->",211],["yecctoken2string({float,_,F}) -> io_lib:write(F);",213],["{{float, Float}, S1} ->",68],["true = <<Int:64/float>> =:= <<(float(Int)):64/float>>",58],["true = <<Int:64/float>> =:= <<(float(Int)):64/float>>",58],["true = <<Int:64/float>> =:= <<(float(Int)):64/float>>",58],["<<BigDenorm/float>> = <<0,15,255,255,255,255,255,255>>,",48]],"useCount":8785},{"word":"foldl","context":[["lists:foldl(fun transform_options/2, [], Opts).",109],["Result = lists:foldl(",104],["Result = lists:foldl(fun (Type, {Status, Acc}) ->",112],["ets:foldl(",114],["lists:foldl( fun parse/2, Conf#config{proto_opts=NewProto},",125],["lists:foldl(fun",303],["mnesia:foldl(",604],["lists:foldl(fun parse/2,",109],["lists:foldl(",4998],["BinOpt = list_to_binary(lists:foldl(MOpts, [<<0:32>>], Options)),",3443]],"useCount":22158},{"word":"foo","context":[["<<\"{\\\"foo\\\":1}\">>,",246],["foo;",154],["[{release, {foo, \"0.0.1\"},",155],["foo() ->",148],["{load,{foo,soft_purge,soft_purge}},",145],["?line ?MODULE:foo(),",114],["-define(config(X,Y), foo).",109],["?line rpc:call(OtherNode,?MODULE,foo,[]),",108],["{user, \"foo\"},",365],["case foo of",174]],"useCount":20641},{"word":"for","context":[["%% Function for fetching the interface type ID.",696],["%%% See the NOTICE for more information.",240],["%% Helper macro for declaring children of supervisor",1257],["%% stored on disc or distributed for use on other nodes.",1461],["%% and can be changed without notice. It can't be used for comparsion",1461],["%%  We make no guarantees that this code is fit for any purpose.",423],["%% Avoid warning for local function error/1 clashing with autoimported BIF.",170],["%% @doc API for starting the supervisor.",181],["% Nitrogen Web Framework for Erlang",725],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang2 for more book information.",236]],"useCount":61835},{"word":"foreach","context":[["lists:foreach(fun(K) ->",154],["lists:foreach(",7809],["lists:foreach(fun(R) ->",153],["foreach,",174],["foreach(",180],["lists:foreach(fun(Node) ->",219],["lists:foreach(fun(E) ->",257],["lists:foreach(fun",447],["{foreach,",1031],["lists:foreach(fun(N) ->",122]],"useCount":22819},{"word":"form","context":[["%% Alice receives form",60],["%% User requests form",56],["%% 2. Redistributions in binary form must reproduce the above",63],["%% @doc <p>Send a subscription approval form to Owner for all pending",68],["[?XAE(<<\"form\">>,",409],["{<<\"type\">>, <<\"form\">>}],",234],["\"application/x-www-form-urlencoded\" ++ _ ->",71],["?XAE(<<\"form\">>,",111],["[{<<\"xmlns\">>, ?NS_XDATA}, {<<\"type\">>, <<\"form\">>}],",118],["[?XAE(\"form\", [{\"action\", \"\"}, {\"method\", \"post\"}],",200]],"useCount":7129},{"word":"format","context":[["io_lib:format(",1252],["io:format(",358],["error -> [?XREST(<<\"Bad format\">>)];",326],["io:format(\"~n\"),",312],["io_lib:format(\"~p\", [Reason]).",312],["io:format(Dev, \", \", []),",259],["io:format(Dev, \"\\n\", []);",229],["error -> [?XREST(\"Bad format\")];",200],["error_logger:format(",200],["?line io:format(GL,\"Okej~n\",[]),",216]],"useCount":60301},{"word":"format_error","context":[["format_error(Error) ->",85],["++ file:format_error(Reason)),",86],["-export([init/1, do/1, format_error/1]).",86],["format_error(Message) ->",220],["-spec format_error(any()) -> iolist().",326],["-export([format_error/1]).",147],["-spec format_error(any()) -> [char() | list()].",162],["-export([parse/1, parse_and_scan/1, format_error/1]).",197],["format_error/1]).",431],["format_error(Reason) ->",375]],"useCount":8318},{"word":"from","context":[["%% yeccpars1/7 is called from generated code.",185],["{from, self()},",5090],["%%% Callback functions from gen_fsm",392],["from = From,",221],["%%  Excerpted from \"Programming Erlang, Second Edition\",",236],["%% <p>This class is derived (and can use functions) from:",1132],["Pid = proplists:get_value(from, Opts),",187],["{from, self()},  {options, ClientOpts}]),",323],["%% Probably thrown from return_error/2:",165],["%%% Callback functions from gen_server",363]],"useCount":52095},{"word":"fun","context":[["F = fun() ->",3523],["<<\"etsc(fun(E) ->",1028],["fun(_) ->",1381],["F = fun () ->",1580],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587],["spawn(fun() ->",1616],["fun () ->",4482],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["fun() ->",15462],["fun",993]],"useCount":226031},{"word":"function","context":[["{deprecated,\"deprecated function not available in wxWidgets-2.9 and later\"};",198],["%% Idl file dependency list function",166],["%% @doc This function is called by a gen_server when it is about to",167],["%% Avoid warning for local function error/1 clashing with autoimported BIF.",170],["%% This function is called by a gen_server when it is about to",863],["%% Note: This function is free to add any key/value pairs to the Config",367],["%% this function is called by the new process to find out about",329],["function ->",308],["%% Description: This function is called by a gen_server when it is about to",931],["%% Type identification function",696]],"useCount":33602},{"word":"functions","context":[["%%% Internal functions",7411],["%% Interface functions",981],["%% API functions",3310],["%% Internal functions",5202],["%% External functions",1115],["%% <p>This class is derived (and can use functions) from:",1132],["%% Object creation functions.",696],["%% Object interface functions.",696],["%% Init & terminate functions.",696],["%%% API functions",728]],"useCount":39330},{"word":"g","context":[["g([[fname,0]]),",86],["g([[friendsEntry, [2, 3]],",92],["g([[sysDescr, 0], [tDescr,0]]), % Outside mibview",86],["g([NewKeyc5]),",227],["g([[sysUpTime,0]]),",215],["g([NewKeyc4]),",190],["g([[xDescr,0]]),",147],["g([[multiStr,0]]),",86],["g([[test2]]),",86],["g([[xDescr2,0]]),",98]],"useCount":9030},{"word":"gen_fsm","context":[["%% state name. Whenever a gen_fsm receives an event sent using",116],["-behaviour(gen_fsm).",895],["%% gen_fsm callbacks",774],["%% gen_fsm:send_all_state_event/2, this function is called to handle",95],["%% necessary cleaning up. When it returns, the gen_fsm terminates with",97],["gen_fsm:reply(From, ok),",119],["%% Whenever a gen_fsm receives an event sent using",119],["gen_fsm:sync_send_all_state_event(FsmRef,",144],["%%% gen_fsm callbacks",168],["%%% Callback functions from gen_fsm",392]],"useCount":7555},{"word":"gen_mod","context":[["Proc = gen_mod:get_module_proc(Host, ?MODULE),",383],["case gen_mod:is_loaded(LServer, mod_adhoc) of",305],["DBType = gen_mod:db_type(LServer, ?MODULE),",306],["IQDisc = gen_mod:get_opt(iqdisc, Opts, fun gen_iq_handler:check_type/1,",315],["IQDisc = gen_mod:get_opt(iqdisc, Opts, one_queue),",352],["%% gen_mod callbacks",382],["Mod = gen_mod:db_mod(LServer, ?MODULE),",402],["gen_mod:db_type(LServer, ?MODULE)).",571],["Proc = gen_mod:get_module_proc(Host, ?PROCNAME),",1284],["-behaviour(gen_mod).",1426]],"useCount":16967},{"word":"gen_server","context":[["%% This function is called by a gen_server when it is about to",863],["%% necessary cleaning up. When it returns, the gen_server terminates",855],["%%%% Standard gen_server handles",696],["-behaviour(gen_server).",9470],["%% gen_server callbacks",6580],["%%% gen_server callbacks",1692],["gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).",1637],["gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).",1087],["%% cleaning up. When it returns, the gen_server terminates with Reason.",1079],["%% Description: This function is called by a gen_server when it is about to",931]],"useCount":45019},{"word":"gen_tcp","context":[["{error, closed} = gen_tcp:recv(Socket, 0, 6000),",209],["gen_tcp:close(Socket),",739],["gen_tcp:close(S),",218],["{ok, Socket} = gen_tcp:connect(\"localhost\", Port,",247],["ok = gen_tcp:send(Socket, [",272],["{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),",214],["= gen_tcp:recv(Socket, 0, 6000),",327],["gen_tcp ->",364],["gen_tcp:close(Sock),",391],["gen_tcp:close(Socket).",188]],"useCount":17157},{"word":"get","context":[["H = get(outh),",274],["SC=get(sc),",280],["get/2,",302],["dump_stack(Dump, get(Pid), Trace),",270],["throw({asn1_error,{get_line(H),get(asn1_module),",264],["SC = get(sc),",256],["throw({asn1_error,{get_line(hd(Tokens)),get(asn1_module),",344],["get ->",930],["case get(mnesia_activity_state) of",376],["CurrMod = get(currmod),",244]],"useCount":41873},{"word":"get_attr_s","context":[["case {xml:get_attr_s(<<\"xmlns\">>, Attrs), Name} of",143],["case xml:get_attr_s(<<\"type\">>, Attrs) of",624],["case xml:get_attr_s(<<\"xmlns\">>, Attrs) of",521],["Lang = xml:get_attr_s(<<\"xml:lang\">>, Attrs),",448],["case xml:get_attr_s(\"type\", Attrs) of",275],["_xmlns = xml:get_attr_s(<<\"xmlns\">>, _attrs),",270],["Type = xml:get_attr_s(<<\"type\">>, Attrs),",194],["Lang = xml:get_attr_s(\"xml:lang\", Attrs),",166],["case xml:get_attr_s(\"xmlns\", Attrs) of",165],["JID = xml:get_attr_s(<<\"jid\">>, Attrs),",148]],"useCount":8107},{"word":"get_data_dir","context":[["file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",1603],["?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",8015],["%%    ?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",945],["%%    file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",189],["%%?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",100],["%%file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",20],["get_data_dir(Config) ->",15],["get_data_dir(Mod) ->",12],["Dir = test_lib:get_data_dir(Config),",12]],"useCount":10911},{"word":"get_option","context":[["AllowedGroups = get_option(Options, roster_groups_allowed, []),",202],["PublishModel = get_option(Options, publish_model),",160],["case get_option(NodeOptions, notify_retract) of",128],["Content = case get_option(NodeOptions, deliver_payloads) of",126],["AccessModel = get_option(Options, access_model),",204],["| case get_option(Options, title) of",114],["get_option(Opt, F, undefined).",114],["case get_option(Options, send_last_published_item) of",99],["case ejabberd_config:get_option(",299],["ejabberd_config:get_option(",434]],"useCount":6550},{"word":"get_text","context":[["{state, get_text(\"state\", Node)},",150],["{vpc_id, get_text(\"vpcId\", Node)},",144],["{instance_type, get_text(\"instanceType\", Node)},",131],["ErrCode = erlcloud_xml:get_text(\"/Error/Code\", XML),",94],["ErrMsg = erlcloud_xml:get_text(\"/Error/Message\", XML),",94],["{owner_id, get_text(\"ownerId\", Node)},",126],["{instance_id, get_text(\"instanceId\", Node)},",83],["{kernel_id, get_text(\"kernelId\", Node)},",79],["{availability_zone, get_text(\"availabilityZone\", Node)},",97],["{ramdisk_id, get_text(\"ramdiskId\", Node)},",79]],"useCount":7319},{"word":"get_value","context":[["Node = proplists:get_value(node, Opts),",190],["Port = proplists:get_value(port, Opts),",190],["Data = proplists:get_value(data_dir, Config),",188],["Pid = proplists:get_value(from, Opts),",187],["KeyFile = proplists:get_value(keyfile, ServerOpts),",159],["CertFile = proplists:get_value(certfile, ServerOpts),",198],["LibDir1 = proplists:get_value(lib1, Config),",211],["?assertEqual(self(),proplists:get_value(pid,Metadata)),",378],["DataDir = proplists:get_value(data_dir, Config),",514],["PrivDir = proplists:get_value(priv_dir, Config),",632]],"useCount":29962},{"word":"given","context":[["%% @doc Decode the given iolist to Erlang terms.",84],["given     = Given,    lgiven     = LGiven,",68],["%% Count number of records in a table given a where clause",64],["%% @doc Create an encoder/1 with the given options.",84],["%% @doc Create a decoder/1 with the given options.",84],["%% @doc <p>Return the maximum number of items for a given node.</p>",70],["%% @doc Encode the given as JSON to an iolist.",84],["%% @doc <p>Return the items of a given node.</p>",70],["%% given",382],["%% millions of items on a given node. This should be addressed in a new",70]],"useCount":7082},{"word":"global","context":[["?COMMANDS_RESULT(global, From, To, Request);",115],["case acl:match_rule(global, Access, From) of",150],["global:sync(),",143],["?line OrigNames = global:registered_names(),",140],["%global",137],["case global:whereis_name(Name) of",136],["global ->",135],["get_permission_level(From) == global,",126],["Access = get_access(global),",114],["process_admin(global,",106]],"useCount":9753},{"word":"group","context":[["%% Req. system group, Klas1, OLD-SNMPEA-MIB",245],["?ERR_EXTENDED((?ERR_NOT_AUTHORIZED), <<\"not-in-roster-group\">>)};",79],["{auth_group_file, filename:join(Root, \"auth/group\")},",99],["%%   A list of key/value pairs, holding configuration data for the group.",100],["[{group,p}].",128],["push_vlan,pop_vlan,push_mpls,pop_mpls,set_queue,group,",1530],["[output,group,set_queue,set_mpls_ttl,",420],["group ->",75],["%% GroupsAndTestCases = [{group,GroupName} | TestCase]",305],["%% GroupsAndTestCases = [Group | {group,GroupName} | TestCase]",298]],"useCount":15274},{"word":"groups","context":[["-export([all/0, suite/0,groups/0,init_per_suite/1, end_per_suite/1,",1398],["-export([all/0, suite/0,groups/0,init_per_group/2,end_per_group/2, cases/0,",63],["%% @spec groups() -> [Group]",68],["%% get the list of groups displayed",68],["-export([all/0, suite/0,groups/0,init_per_group/2,end_per_group/2]).",85],["-export([groups/0]).",95],["groups/0,",173],["%% Function: groups() -> [Group]",211],["-export([all/0, suite/0,groups/0,init_per_group/2,end_per_group/2,",212],["groups() ->",4313]],"useCount":9849},{"word":"handle","context":[["%% as an rest instead of giving and error to let the user handle",84],["%%%% Standard gen_server call handle",696],["handle/2,",82],["-export([init/3, handle/2, terminate/2]).",60],["%% gen_fsm:send_all_state_event/2, this function is called to handle",95],["gen_iq_handler:handle(Host, Module, Function, Opts,",98],["-export([init/3, handle/2, terminate/3]).",187],["-export([handle/2]).",281],["handle(Req, State) ->",408],["%%%% Standard gen_server cast handle",696]],"useCount":7305},{"word":"handle_call","context":[["-export([init/1, terminate/2, handle_call/3]).",720],["%% @spec handle_call(Request, From, State) ->",659],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2,",3306],["handle_call(_Request, _From, State) ->",3050],["handle_call/3,",2354],["handle_call(stop, _From, State) ->",1314],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",1005],["handle_call(_, _, State) ->",912],["%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |",770],["handle_call(stop, _, State) ->",723]],"useCount":36254},{"word":"handle_cast","context":[["%% @spec handle_cast(Msg, State) -> {noreply, State} |",783],["handle_cast(_Msg, State) ->",3622],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2,",3306],["handle_cast/2,",2357],["handle_cast(stop, State) ->",1344],["handle_cast(Msg, State) ->",1201],["-export([handle_cast/2, handle_info/2, code_change/3]).",713],["handle_cast(_, State) ->",1169],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",1005],["%% Function: handle_cast(Msg, State) -> {noreply, State} |",904]],"useCount":25446},{"word":"handle_event","context":[["handle_info/2, handle_call/3, handle_cast/2, handle_event/2]).",114],["%% Async Events are handled in handle_event as in handle_info",140],["handle_event/3,",558],["handle_event/2,",174],["handle_event(Event, State) ->",185],["-export([init/1, handle_event/2, handle_call/2,",191],["handle_event(_Event, State) ->",299],["handle_event(_Event, StateName, State) ->",309],["%% Func: handle_event/3",363],["handle_event(_Event, StateName, StateData) ->",398]],"useCount":6140},{"word":"handle_info","context":[["handle_info(Info, State) ->",1755],["handle_info(Msg, State) ->",618],["handle_info(_Info, State) ->",4789],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2,",3306],["-export([handle_cast/2, handle_info/2, code_change/3]).",713],["%% @spec handle_info(Info, State) -> {noreply, State} |",894],["handle_info(_, State) ->",898],["%% Function: handle_info(Info, State) -> {noreply, State} |",910],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",1005],["handle_info/2,",2534]],"useCount":37218},{"word":"has","context":[["%% This function is called whenever an application has stopped. It",131],["%%<li>The requesting entity has a pending subscription.</li>",69],["%% Also, add \"replyto\" if entity has presence subscription to the account owner",70],["%% No response has been generated!",84],["%% No status code has been generated!",99],["%% A status code has been generated!",114],["%% Entity has multiple subscriptions to the node but does not specify a subscription ID",124],["%% @todo We probably need to check that the user doing the query has the right",70],["%% A response has been generated or sent!",76],["%%<li>The node has no configuration options.</li>",69]],"useCount":10913},{"word":"have","context":[["%%<li>The requesting entity does not have sufficient privileges to purge the node.</li>",69],["%% The atom must have all characters in uppercase.",69],["%%<li>The publisher does not have sufficient privileges to delete the requested item.</li>",69],["%% toplevel. Doesn't have to be exported!",162],["%%<li>The requesting entity does not have sufficient privileges to publish.</li>",69],["%%<li>The requesting entity does not have sufficient privileges to delete the node.</li>",69],["%%% you should have received as part of this distribution. The terms",110],["%% Collect all replies that already have arrived",84],["%%<li>The requesting entity does not have sufficient privileges to unsubscribe the specified JID.</li>",69],["%%<li>create_node asks node plugin if entity have sufficient privilege</li>",69]],"useCount":10619},{"word":"hd","context":[["yeccgoto_auditReturnItem(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",624],["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccgoto_type(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",240],["yeccgoto_import_stuff(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",276],["yeccgoto_sigParameter(hd(Nss), Cat, Nss, NewStack, T, Ts, Tzr).",320],["yeccgoto_serviceChangeParm(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",504],["yeccgoto_auditReturnParameter(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",576],["yeccgoto_ammParameter(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",416],["throw({asn1_error,{get_line(hd(Tokens)),get(asn1_module),",344],["yeccgoto_indAudauditReturnParameter(hd(Ss), Cat, Ss, NewStack, T, Ts, Tzr).",280]],"useCount":40189},{"word":"header","context":[["[#xmlel{name = <<\"header\">>,",69],["[header(),",73],["{header, \"Date\"},",76],["header() ->",78],["{header, \"Server\"},",92],["[{header, Header},",110],["{header,2}|ServerOpts]}]),",57],["Hdr = header() ++ Comment,",174],["[{\"header\",",208],["{header, \"WWW-Authenticate\"}]),",241]],"useCount":8640},{"word":"headers","context":[["Expect = [{headers,",109],["%% Determine if the stanza should have SHIM ('SubID' and 'name') headers",58],["headers = RequestHeaders,",60],["-type headers() :: [{string(), string()}].",63],["%% Place of <headers/> changed at the bottom of the stanza",64],["%% @doc  Infer body length from transfer-encoding and content-length headers.",76],["headers=Headers,",99],["headers = Headers,",155],["{headers,",181],["H = ARG#arg.headers,",185]],"useCount":11656},{"word":"here","context":[["%% Don't decode the query string here, that is parsed separately.",57],["%% Guard bif, needs to be here.",582],["%% Test cases starts here.",219],["%% Supervised init can occur here  ...",77],[") when port(Port) -> % TODO: Add additional constraints here",71],["%% No need to replace active privacy list here,",70],["%%  N.B. Field names are full expressions here but only atoms are allowed",55],["% here as Webmachine will add the correct elements of those automatically depending on resource behavior.",55],["%% Be careful here to make the termination collapse if necessary.",53],["%% They are defined here so that other interfaces can use them too",51]],"useCount":6664},{"word":"hexstr2bin","context":[["hexstr2bin(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\"),",176],["{aes_gcm, hexstr2bin(\"feffe9928665731c6d6a8f9467308308\"             %% Key",85],["hexstr2bin(\"\"),                                                    %% AAD",85],["hexstr2bin(\"feedfacedeadbeeffeedfacedeadbeef\"                      %% AAD",95],["hexstr2bin(",120],["hexstr2bin(\"30c81c46a35ce411e5fbc1191a0a52ef\")},",121],["hexstr2bin(\"d9313225f88406e5a55909c5aff5269a\"                      %% PlainText",125],["hexstr2bin(\"ae2d8a571e03ac9c9eb76fac45af8e51\")},",132],["hexstr2bin(\"6bc1bee22e409f96e93d7e117393172a\")},",132],["hexstr2bin(\"2b7e151628aed2a6abf7158809cf4f3c\"),",152]],"useCount":6156},{"word":"hidden","context":[["%%@hidden",151],["% @hidden",89],["input(\"hidden\", \"node\", Page),",66],["[{<<\"type\">>, <<\"hidden\">>},",46],["hidden;",42],["%% @hidden   Not official yet",42],["%% @hidden",135744],["%%% @hidden",391],["%@hidden",171],["{<<\"type\">>, <<\"hidden\">>}],",154]],"useCount":137959},{"word":"hipe_rtl","context":[["hipe_rtl:mk_alu(Dst, Dst, 'or', Tmp1),",88],["Tmp1 = hipe_rtl:mk_new_reg_gcsafe(),",71],["hipe_rtl:mk_store(Base, TmpOffset, Tmp1, byte),",72],["[hipe_rtl:mk_goto(FalseLblName)];",76],["hipe_rtl:mk_alu(Offset, Offset, add, hipe_rtl:mk_imm(1)),",88],["hipe_rtl:mk_alu(Offset, Offset, add, hipe_rtl:mk_imm(1)),",88],["[test_is_boxed(X, hipe_rtl:label_name(HalfTrueLab), FalseLab, Pred),",102],["hipe_rtl:mk_goto(TrueLblName)].",109],["HalfTrueLab = hipe_rtl:mk_new_label(),",110],["Tmp = hipe_rtl:mk_new_reg_gcsafe(),",221]],"useCount":7645},{"word":"host","context":[["{port, Port}, {host, Hostname},",384],["StateData#state.host,",302],["Host = State#state.host,",275],["%%\t Host = host()",392],["host = Host,",451],["{host, Hostname},",2387],["%%     Host = mod_pubsub:host()",189],["Host = ?config(host, Config),",198],["?config(host, Config),",235],["host,",200]],"useCount":24623},{"word":"hrl","context":[["-include_lib(\"orber/include/corba.hrl\").",1237],["-include(\"logger.hrl\").",2044],["-include_lib(\"test_server/include/test_server.hrl\").",1574],["-include_lib(\"eunit/include/eunit.hrl\").",10822],["-include(\"wxe.hrl\").",1513],["-include_lib(\"kernel/include/file.hrl\").",2326],["-include(\"jlib.hrl\").",2897],["-include_lib(\"common_test/include/ct.hrl\").",4020],["-include(\"ejabberd.hrl\").",4106],["-include(\"scalaris.hrl\").",971]],"useCount":90327},{"word":"html","context":[["\"text/html\";",129],["%% href=\"http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html\">Managing",66],["{end_tag,<<\"html\">>}],",69],["{<<\"html\">>, [],",124],["print(html,",108],["{<<\"html\">>,[],[",93],["integer_to_list(Port) ++ \"/dummy.html\",",90],["Request  = {url(group_name(Config), \"/dummy.html\", Config), []},",89],["#xmlel{name = <<\"html\">>,",70],["% find this output by clicking on the test name, then case name in test/index.html",70]],"useCount":10111},{"word":"http","context":[["%%%   [http://www.process-one.net/]",371],["= erlang:decode_packet(http, Handshake, []),",197],["%%% along with RefactorErl.  If not, see <http://plc.inf.elte.hu/erlang/>.",358],["<<\"http://jabber.org/protocol/pubsub\">>} ->",341],["<<\"http://jabber.org/protocol/muc#user\">>} ->",248],["%%% retrieved via the world wide web at http://www.erlang.org/.",491],["%% retrieved via the world wide web at http://www.erlang.org/.",1056],["%% retrieved online at http://www.erlang.org/.",6836],["<<\"http://jabber.org/protocol/compress\">>} ->",217],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang2 for more book information.",236]],"useCount":27585},{"word":"i","context":[["{i,\".\"},",98],["i(\"wait some time before starting the MGC simulation\"),",204],["i(\"[MGC] stop generator\"),",228],["i(\"wait some time before starting the MG simulation\"),",239],["s([{[tDescr2, 0], i, 4}]),",86],["i(\"[MG] stop generator\"),",245],["i(\"starting\"),",388],["i(\"wait some time before starting the MG simulator\"),",204],["s([{[1,3,7,0], i, 4}]),",86],["i(\"done\", []),",347]],"useCount":14034},{"word":"ibm","context":[["'ibm-not-wf-P69-ibm69n02'(Config) ->",11],["'ibm-not-wf-P71-ibm71n06'(Config) ->",11],["'ibm-not-wf-P85-ibm85n46'(Config) ->",11],["'ibm-not-wf-P79-ibm79n01'(Config) ->",11],["'ibm-valid-P58-ibm58v02'(Config) ->",11],["'ibm-valid-P10-ibm10v05'(Config) ->",11],["'ibm-not-wf-P44-ibm44n03'(Config) ->",11],["'ibm-not-wf-P04-ibm04n11'(Config) ->",11],["'ibm-not-wf-P85-ibm85n106'(Config) ->",11],["'ibm-not-wf-P04-ibm04n17'(Config) ->",11]],"useCount":9493},{"word":"id","context":[["NodeId = TNode#pubsub_node.id,",358],["To2   = #megaco_term_id{id = [\"11111111\", \"00001111\", \"00001111\"]},",485],["id(I) -> I.",464],["%% returns id",1066],["From1 = #megaco_term_id{id = [\"11111111\", \"00000000\", \"00000000\"]},",505],["From2 = #megaco_term_id{id = [\"11111111\", \"00001111\", \"00000000\"]},",505],["id = Id,",487],["Root  = #megaco_term_id{id = [\"root\"]},",484],["-export([tc/0,id/0,name/0]).",1066],["To1   = #megaco_term_id{id = [\"11111111\", \"00000000\", \"00001111\"]},",485]],"useCount":40250},{"word":"ietf","context":[["<<\"urn:ietf:params:xml:ns:xmpp-streams\">> ->",416],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>}])",416],["xsi:schemaLocation=\\\"urn:ietf:params:xml:ns:cpl cpl.xsd \\\">",111],["<<\"urn:ietf:params:xml:ns:xmpp-tls\">>} ->",124],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>} ->",527],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>}])",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">> ->",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>} ->",713],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>} ->",806],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>}]);",112]],"useCount":6350},{"word":"if","context":[["if Enc6@element =:= asn1_NOVALUE ->",544],["if C1 =:= 4 ->",545],["if Enc3@element =:= asn1_NOVALUE ->",652],["if Enc4@element =:= asn1_NOVALUE ->",696],["if _xmlns ==",1048],["[if Enc1@len < 128 ->",1080],["if",26599],["if _xmlns == <<>>; _xmlns == __TopXMLNS ->",2560],["if Enc1@element =:= asn1_NOVALUE ->",1741],["if Enc2@element =:= asn1_NOVALUE ->",1311]],"useCount":100386},{"word":"ifdef","context":[["-ifdef(DEBUG).",503],["-ifdef(HIPE_AMD64).",205],["-ifdef(with_export_type_support).",258],["-ifdef(DBGFSM).",380],["-ifdef(EUNIT).",381],["-ifdef(megaco_hipe_special).",383],["-ifdef(debug).",411],["-ifdef(use_specs).",291],["-ifdef(TEST).",6106],["-ifdef(EQC).",471]],"useCount":13404},{"word":"ignore","context":[["%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}",908],["%%                     ignore |",1059],["ignore",2107],["ignore;",2204],["%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}",817],["ignore ->",713],["ignore,",516],["ignore.",513],["%%          ignore               |",435],["%%                         ignore               |",879]],"useCount":18398},{"word":"in","context":[["%% Feel free to use, reuse and abuse the code in this file.",437],["%% Redistribution and use in source and binary forms, with or without",630],["%%% Redistribution and use in source and binary forms, with or without",597],["%% Note: This directive should only be used in test suites.",581],["%%  courses, books, articles, and the like. Contact us if you are in doubt.",423],["% Redistribution and use in source and binary forms, with or without",248],["{deprecated,\"deprecated function not available in wxWidgets-2.9 and later\"};",198],["in ->",196],["%% Bad JID in database:",166],["%% To be used in grammar files to throw an error message to the parser",162]],"useCount":80725},{"word":"include","context":[["-include_lib(\"orber/include/corba.hrl\").",1237],["-include(\"scalaris.hrl\").",971],["-include(\"wxe.hrl\").",1513],["-include_lib(\"test_server/include/test_server.hrl\").",1574],["-include(\"logger.hrl\").",2044],["-include_lib(\"kernel/include/file.hrl\").",2326],["-include(\"jlib.hrl\").",2897],["-include_lib(\"common_test/include/ct.hrl\").",4020],["-include(\"ejabberd.hrl\").",4106],["-include_lib(\"eunit/include/eunit.hrl\").",10822]],"useCount":93520},{"word":"include_lib","context":[["-include_lib(\"public_key/include/public_key.hrl\").",617],["-include_lib(\"kernel/include/file.hrl\").",2326],["-include_lib(\"common_test/include/ct.hrl\").",4020],["-include_lib(\"eunit/include/eunit.hrl\").",10822],["-include_lib(\"couch/include/couch_db.hrl\").",493],["-include_lib(\"xmerl/include/xmerl.hrl\").",519],["-include_lib(\"n2o/include/wf.hrl\").",542],["-include_lib(\"webmachine/include/webmachine.hrl\").",551],["-include_lib(\"test_server/include/test_server.hrl\").",1574],["-include_lib(\"orber/include/corba.hrl\").",1237]],"useCount":38490},{"word":"indent","context":[["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-",555],["%% -*- mode: erlang; tab-width: 4; indent-tabs-mode: 1; st-rulers: [70] -*-",322],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil -*-",898],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil -*-",898],["%% -*- erlang-indent-level: 2 -*-",1099],["%%% erlang-indent-level: 2",453],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-",555],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92-*-",332],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92-*-",332],["%%% -*- erlang-indent-level: 2 -*-",288]],"useCount":9878},{"word":"inet","context":[["{ok, Port} = inet:port(L),",112],["gen_tcp -> inet:peername(Socket);",117],["{ok,Host} = inet:gethostname(),",173],["{ok, Hostname} = inet:gethostname(),",307],["{ok, Host} = inet:gethostname(),",183],["Port :: inet:port_number(),",186],["inet:peername(Socket);",166],["-include_lib(\"kernel/include/inet.hrl\").",331],["inet:setopts(Socket, [{active, once}]),",345],["ok = inet:setopts(Socket, [{active, once}]),",128]],"useCount":12692},{"word":"infinity","context":[["infinity",201],["receive after infinity -> ok end",250],["infinity;",421],["infinity -> infinity;",207],["infinity ->",502],["infinity,",802],["infinity -> infinity;",207],["{ok, ChannelId} = ssh_connection:session_channel(ConnectionRef, infinity),",184],["Timeout :: non_neg_integer() | infinity.",186],["infinity).",199]],"useCount":13523},{"word":"info","context":[["p(\"manager info: ~p~n\", [mgr_info(ManagerNode)]),",189],["?assertEqual(lager_util:level_to_num(info),Level),",115],["0 = ets:info(T,size),",121],["false = ets:info(E, safe_fixed),",136],["info/1,",148],["-export([info/0]).",237],["%%% @doc For info and other types, see ssh_sftp(3).",300],["%% @author Northscale <info@northscale.com>",331],["%% @author Couchbase <info@couchbase.com>",421],["info() ->",504]],"useCount":18445},{"word":"init","context":[["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["init() ->",1811],["init/1,",1674],["-export([init/1,",3024],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2,",3306],["-export([init/1]).",5211],["init([]) ->",8448],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% @spec init(Args) -> {ok, State} |",888],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",1005]],"useCount":67554},{"word":"init_per_group","context":[["%% Function: init_per_group(GroupName, Config0) ->",201],["init_per_group(_GroupName, Config) ->",3082],["init_per_group/2,end_per_group/2,",840],["init_per_group/2,end_per_group/2]).",429],["{?M2,init_per_group},",294],["init_per_group(_, Config) ->",241],["-export([all/0, suite/0,groups/0,init_per_group/2,end_per_group/2,",212],["init_per_group/2,",127],["init_per_group(Group, Config) ->",115],["init_per_group(GroupName, Config) ->",132]],"useCount":10251},{"word":"init_per_suite","context":[["init_per_suite(Config) ->",4683],["-spec init_per_suite(config()) -> config().",154],["-export([init_per_suite/1]).",167],["%% Function: init_per_suite(Config0) ->",216],["init_per_suite/1, end_per_suite/1,",246],["init_per_suite(Config0) ->",129],["init_per_suite,",127],["init_per_suite(Config) when is_list(Config) ->",305],["init_per_suite/1,",420],["-export([all/0, suite/0,groups/0,init_per_suite/1, end_per_suite/1,",1398]],"useCount":11568},{"word":"init_per_testcase","context":[["init_per_testcase(TestCase, Config) ->",349],["init_per_testcase/2,end_per_testcase/2,",258],["init_per_testcase(_, Config) ->",370],["init_per_testcase/2,",387],["init_per_testcase(Case, Config) ->",406],["-export([init_per_testcase/2, end_per_testcase/2]).",487],["init_per_testcase(_TestCase, Config) ->",745],["init_per_testcase(_Case, Config) ->",1065],["init_per_testcase/2, end_per_testcase/2]).",318],["escalus:init_per_testcase(CaseName, Config1);",336]],"useCount":9285},{"word":"inline","context":[["-compile({inline,yeccpars2_109_/1}).",64],["-compile({inline,yeccpars2_16_/1}).",65],["-compile({inline,yeccpars2_22_/1}).",65],["-compile({inline,yeccpars2_158_/1}).",66],["-compile({inline,yeccpars2_131_/1}).",74],["-compile(inline).",183],["-compile({inline,yeccpars2_0_/1}).",86],["-compile({inline,yeccpars2_1_/1}).",80],["-compile({inline,yeccpars2_3_/1}).",76],["-compile({inline,yeccpars2_7_/1}).",75]],"useCount":30024},{"word":"insert","context":[["ets:insert(hooks, {{Hook, Host}, NewLs}),",133],["ets:insert(gen_mod:get_module_proc(Host, config),",100],["insert/2,",98],["ets:insert(E, [{1},{2}]),",96],["true = ets:insert(E, [{1,a},{2,b},{3,c}]),",168],["true = ets:insert(E, [{1,a},{2,b}]),",80],["insert/3,",85],["insert(Tab, 50),",91],["% The parser generator will insert appropriate declarations before this line.%",197],["ets:insert(gen_mod:get_module_proc(ServerHost, config),",175]],"useCount":12226},{"word":"integer","context":[["%% Shuffle = shuffle | {shuffle,{integer(),integer(),integer()}}",247],["%% Shuffle = shuffle | {shuffle,{integer(),integer(),integer()}}",247],["This::wxTreeCtrl(), Item::integer().",251],["| {size, {W::integer(), H::integer()}}",352],["| {size, {W::integer(), H::integer()}}",352],["%% N = integer() | forever",298],["| {'size', {W::integer(), H::integer()}}",264],["| {'size', {W::integer(), H::integer()}}",264],["integer ->",276],["$\\000:8/integer-unit:1-unsigned-big,",285]],"useCount":42605},{"word":"integer_to_list","context":[["corba:string_to_object(\"corbaloc::1.2@\"++IP++\":\"++integer_to_list(ServerPort)++\"/NameService\")),",109],["erlang:integer_to_list(Int);",374],["integer_to_list(I);",197],["I = integer_to_list(Index),",116],["integer_to_list(Port) ++ \"/dummy.html\",",90],["[?Q, integer_to_list(I), ?Q];",66],["Line2 = [integer_to_list(CurrLine), \": \" | Data],",68],["[\":\", erlang:integer_to_list(Port)].",80],["integer_to_list(Val);",85],["integer_to_list(X),",96]],"useCount":12842},{"word":"internal","context":[["?ERROR_MSG(\"transaction return internal error: ~p~n\",",75],["%% for internal use only",166],["%% internal exports",120],["%% For internal use only.",162],["-include(\"internal.hrl\").",174],["%% internal functions",223],["{format, internal}]),",72],["%% internal",326],["0 -> internal;",80],["% internal",106]],"useCount":7204},{"word":"into","context":[["%% application_controller to get into deadlock",150],["%% as a byte offset into the buffer object's data store.",128],["%% Convert a list of ActionRequest record's into a binary",90],["%% Convert a binary into a 'MegacoMessage' record",58],["%% @doc Split Terms into normal terms and macro definitions.",69],["%% if you do insert directly into HTML then you need to",70],["%% possible when JSON is inserted into a HTML document",70],["%% Convert a action reply into a deep io list",81],["%% Convert a 'MegacoMessage' record into a binary",90],["%% Convert a ActionRequest record into a binary",90]],"useCount":6737},{"word":"invalid","context":[["%% Type: invalid",1032],["?line check_result(R, \"invalid\").",855],["_ -> invalid",209],["invalid ->",675],["%% invalid arg type",213],["invalid",182],["check_result(R, \"invalid\").",171],["invalid -> {error, ?ERR_BAD_REQUEST};",169],["invalid;",154],["%% Entity is subscribed but specifies an invalid subscription ID",124]],"useCount":9961},{"word":"io","context":[["io:format(Dev, \"    \", []),",159],["io:format(IoDevice,",167],["io:format(Fd,",194],["?line io:format(GL,\"Okej~n\",[]),",216],["io:format(Dev, \"\\n\", []);",229],["io:format(Dev, \", \", []),",259],["io:nl(),",279],["io:format(\"~n\"),",312],["-author(\"Feng Lee <feng@emqtt.io>\").",322],["io:format(",358]],"useCount":37273},{"word":"io_lib","context":[["io_lib:format(\"~p\", [Reason]).",312],["yecctoken2string({var,_,V}) -> io_lib:format(\"~s\", [V]);",191],["yecctoken2string({char,_,C}) -> io_lib:write_char(C);",213],["yecctoken2string({integer,_,N}) -> io_lib:write(N);",213],["io_lib:format(",1252],["io_lib:write(Other).",213],["case io_lib:deep_char_list(Message) of",218],["yecctoken2string({atom, _, A}) -> io_lib:write(A);",213],["yecctoken2string({float,_,F}) -> io_lib:write(F);",213],["io_lib:write(Message)",213]],"useCount":21515},{"word":"iolist_to_binary","context":[["iolist_to_binary(",612],["mod_opt_type(host) -> fun iolist_to_binary/1;",100],["fun iolist_to_binary/1,",522],["Enc1@bin = iolist_to_binary(Val),",270],["Enc4@bin = iolist_to_binary(Enc3@element),",260],["Enc3@bin = iolist_to_binary(Enc2@element),",215],["(iolist_to_binary(atom_to_list(Var)))/binary>>,",175],["iolist_to_binary(S)},",163],["fun iolist_to_binary/1;",135],["Enc5@bin = iolist_to_binary(Enc4@element),",100]],"useCount":14920},{"word":"iq","context":[["IQ#iq{type = error, sub_el = [SubEl, ?ERR_NOT_ALLOWED]};",438],["Res = IQ#iq{type = result,",505],["#iq{type = result, sub_els = []} =",530],["#iq{type = set,",652],["IQ#iq{type = error,",973],["IQ#iq{type = result,",1054],["IQ#iq{type = error, sub_el = [SubEl, Error]}",322],["ResIQ = IQ#iq{type = result,",318],["<<\"iq\">> ->",227],["#iq{type = result,",343]],"useCount":22213},{"word":"is","context":[["%% This file is automatically generated. DO NOT EDIT IT.",1952],["%% This file is generated DO NOT EDIT",1492],["%%          {stop, Reason, State}            (terminate/2 is called)",1468],["%% The Initial Developer of the Original Code is Ericsson Utvecklings AB.",1133],["%% <p>This class is derived (and can use functions) from:",1132],["%% Description: This function is called by a gen_server when it is about to",931],["%% Convert process state when code is changed",954],["%% The return value is ignored.",1091],["%% purpose with or without fee is hereby granted, provided that the above",1107],["%% Description: Convert process state when code is changed",1100]],"useCount":129418},{"word":"is_atom","context":[["fun(A) when is_atom(A) -> A end,",332],["init_per_testcase(Func, Config) when is_atom(Func), is_list(Config) ->",158],["when is_atom(Name) ->",145],["Atom when is_atom(Atom) ->",129],["A when is_atom(A) ->",94],["when is_atom(Tab), Tab /= schema ->",90],["init_per_testcase(Case, Config) when is_atom(Case), is_list(Config) ->",80],["erlang:is_atom(M),",80],["fun (A) when is_atom(A) -> A end;",179],["yecctoken2string({Other, _}) when is_atom(Other) ->",209]],"useCount":15990},{"word":"is_binary","context":[["%    when is_binary(Node) ->",126],["make_code(Io) when is_list(Io); is_binary(Io) ->",77],["when is_binary(Password) ->",99],["Binary when is_binary(Binary) ->",103],["{ok, Bin} when is_binary(Bin) ->",116],["when is_binary(Host) ->",140],["when is_binary(Bytes) ->",159],["when is_binary(Bin) ->",175],["{asn1_OPENTYPE,Bin} when is_binary(Bin) ->",223],["Bin when is_binary(Bin) ->",955]],"useCount":14211},{"word":"is_integer","context":[["I when is_integer(I) ->",395],["when is_integer(X),is_integer(Y) ->",211],["when is_integer(X),is_integer(Y) ->",211],["when is_integer(Id),is_list(Options) ->",288],["N when is_integer(N) ->",518],["when is_integer(N) ->",482],["when is_integer(Item) ->",389],["when is_integer(Pos) ->",317],["fun(I) when is_integer(I), I>0 -> I end,",429],["fun (I) when is_integer(I), I > 0 -> I end;",415]],"useCount":34644},{"word":"is_list","context":[["SubsByDepth when is_list(SubsByDepth) ->",258],["when is_list(Name) ->",283],["when is_integer(Id),is_list(Options) ->",288],["end_per_suite(Config) when is_list(Config) ->",292],["when is_list(Options) ->",1452],["init_per_suite(Config) when is_list(Config) ->",305],["List when is_list(List) ->",349],["when is_list(Records) ->",230],["when is_map(Client), is_map(Input), is_list(Options) ->",523],["L when is_list(L) ->",728]],"useCount":63771},{"word":"is_pid","context":[["Pid when is_pid(Pid) ->",1050],["case is_pid(Pid) of",78],["is_pid;",76],["P when is_pid(P) ->",298],["stop(Pid) when is_pid(Pid) ->",67],["when is_pid(Pid) ->",222],["when is_pid(Pid),",84],["is_pid(Pid) ->",91],["{ok, Pid} when is_pid(Pid) ->",105],["C2SPid when is_pid(C2SPid) ->",108]],"useCount":6321},{"word":"is_record","context":[["when is_record(This, wx_ref),is_record(Parent, wx_ref),is_integer(Id) ->",104],["when is_record(This, wx_ref),is_record(Parent, wx_ref) ->",116],["when is_record(Config, aws_config) ->",1700],["{ok, M1} when is_record(M1,'MegacoMessage') ->",198],["when is_record(Parent, wx_ref) ->",192],["when is_record(Parent, wx_ref),is_integer(Id) ->",152],["when is_record(Scram, scram) ->",135],["is_record;",124],["when is_record(This, wx_ref),is_record(Parent, wx_ref) ->",116],["when is_record(This, wx_ref) ->",755]],"useCount":14179},{"word":"it","context":[["%% cleaning up. When it returns, the gen_server terminates with Reason.",1079],["\"but it is better to fix your config: \"",109],["%% necessary cleaning up. When it returns, the gen_fsm terminates with",97],["%% This function is called by a gen_server when it is about to",863],["%% necessary cleaning up. When it returns, the gen_server terminates",855],["%% @doc This function is called by a gen_server when it is about to",167],["%% @author Richard Carlsson <richardc@it.uu.se>",155],["%% during startup since it will cause the",150],["%%% @author   Fredrik Thulin <ft@it.su.se>",137],["%% Description: This function is called by a gen_server when it is about to",931]],"useCount":28885},{"word":"item","context":[["<item>",127],["</item>",126],["[elvis_result:item()].",164],["[{xmlelement, \"item\",",127],["|| Item <- xmerl_xpath:string(\"tagSet/item\", Node)]}",135],["#xmlel{name = <<\"item\">>,",736],["<<\"item\">>,",257],["[#xmlel{name = <<\"item\">>,",239],["{xmlelement, \"item\",",228],["{xmlel, <<\"item\">>, _attrs, _els}.",143]],"useCount":11399},{"word":"items","context":[["\\\"S\\\": \\\"How do I update multiple items?\\\"",101],["[#xmlel{name = <<\"items\">>, attrs = nodeAttr(Node),",200],["[#roster{items = [#roster_item{",112],["sub_els = [#roster{items = [#roster_item{",196],["PersistentFeature = lists:member(<<\"persistent-items\">>, Features),",138],["\"retract-items\",",107],["NodeOptions, SubsByDepth, items, Stanza, true),",116],["\"persistent-items\",",118],["\\\"S\\\": \\\"Amazon DynamoDB#How do I update multiple items?\\\"",132],["[{xmlelement, \"items\", nodeAttr(Node),",133]],"useCount":9809},{"word":"jabber","context":[["%%% Author  : Evgeniy Khramtsov <xram@jabber.ru>",141],["<<\"http://jabber.org/protocol/muc#admin\">>} ->",120],["-author('xram@jabber.ru').",138],["<<\"http://jabber.org/protocol/pubsub\">>} ->",341],["<<\"http://jabber.org/protocol/bytestreams\">>} ->",124],["<<\"http://jabber.org/protocol/muc#owner\">>} ->",124],["<<\"http://jabber.org/protocol/pubsub#event\">>} ->",124],["<<\"http://jabber.org/protocol/pubsub\">>}]);",160],["<<\"http://jabber.org/protocol/muc#user\">>} ->",248],["<<\"http://jabber.org/protocol/compress\">>} ->",217]],"useCount":10722},{"word":"jid","context":[["LServer = jid:nameprep(Server),",914],["LUser = jid:nodeprep(User),",756],["[{<<\"jid\">>,",702],["StateData#state.jid,",656],["Host = To#jid.lserver,",543],["ejabberd_router:route(jlib:jid_replace_resource(StateData#state.jid,",539],["To :: ejabberd:jid(),",380],["ejabberd_router:route(StateData#state.jid, From, Err),",306],["From = StateData#state.jid,",255],["[{<<\"jid\">>, enc_jid(_val)} | _acc].",252]],"useCount":45816},{"word":"jlib","context":[["LServer = jlib:nameprep(Server),",2143],["-include(\"jlib.hrl\").",2897],["Err = jlib:make_error_reply(Packet,",1613],["GenKey = jlib:jid_remove_resource(SubKey),",463],["ejabberd_router:route(jlib:jid_replace_resource(StateData#state.jid,",539],["LJID = jlib:jid_tolower(JID),",712],["Err = jlib:make_error_reply(",1126],["LUser = jlib:nodeprep(User),",1558],["case jlib:iq_query_info(Packet) of",340],["IQ = jlib:iq_query_info(Packet),",313]],"useCount":49723},{"word":"join","context":[["code:add_pathz(filename:join(filename:dirname(Path), \"idl_output\")),",117],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["FileName = filename:join(PrivDir, \"test.txt\"),",119],["?line Name = filename:join(RootDir,",156],["File = filename:join(Dir, \"a.LOG\"),",145],["?line NewDir = filename:join(RootDir,",164],["SystemDir = filename:join(?config(priv_dir, Config), system),",306],["{join,merge}),",240],["(filename:join(HomeDir,",208],["ConfigFile = filename:join([LibDir1, \"relx.config\"]),",173]],"useCount":30482},{"word":"kernel","context":[["rlx_test_utils:create_app(LibDir1, \"goal_app_1\", \"0.0.1\", [stdlib,kernel,non_goal_1], []),",122],["-include_lib(\"kernel/include/file.hrl\").",2326],["rebar_test_utils:create_app(AppDir, Name, Vsn, [kernel, stdlib]),",503],["-include_lib(\"kernel/include/inet.hrl\").",331],["{app,kernel,[{incl_cond,include}]},",164],["?assert(lists:keymember(kernel, 1, AppSpecs)),",144],["rlx_test_utils:create_app(LibDir1, \"non_goal_2\", \"0.0.1\", [stdlib,kernel], []),",127],["rlx_test_utils:create_app(LibDir1, \"non_goal_1\", \"0.0.1\", [stdlib,kernel], [lib_dep_1]),",122],["rlx_test_utils:create_app(LibDir1, \"goal_app_2\", \"0.0.1\", [stdlib,kernel,goal_app_1,non_goal_2], []),",122],["rlx_test_utils:create_app(LibDir1, \"lib_dep_1\", \"0.0.1\", [stdlib,kernel], []),",116]],"useCount":7146},{"word":"key","context":[["%%          A list of key/value pairs configuring the case.",151],["key,",145],["#{ second => small, map => key } => \"small map key 2\",",128],["key = Key,",247],["%% Note: This function is free to add any key/value pairs to the Config",367],["#{ second => small, map => key } => \"small map key 2\",",128],["19=>a9,29=>b9,39=>\"c9\",\"49\"=>\"d9\",<<\"59\">>=>\"e9\",{[\"09\"]}=>\"19\" } => \"large map key 1\",",128],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["#{ third => small, map => key } => \"small map key 3\",",128],["%%   A list of key/value pairs, holding the test case configuration.",795]],"useCount":20973},{"word":"keyfind","context":[["{port, Port} = lists:keyfind(port, 1, Config),",261],["{priv_dir, PrivDir} = lists:keyfind(priv_dir, 1, Config),",186],["{'Upgrade', \"websocket\"} = lists:keyfind('Upgrade', 1, Headers),",178],["= lists:keyfind(\"sec-websocket-accept\", 1, Headers),",177],["{client,Client} = lists:keyfind(client, 1, Config),",88],["case lists:keyfind(asn1_info, 1, Attributes) of",85],["= lists:keyfind(<<\"connection\">>, 1, RespHeaders),",65],["{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),",183],["case lists:keyfind(Key, 1, Opts) of",96],["case lists:keyfind(Key, 1, List) of",119]],"useCount":6543},{"word":"keysearch","context":[["{value,{_,_,StdlibVer}} = lists:keysearch(stdlib,1,Apps),",101],["{value,{_,_,KernelVer}} = lists:keysearch(kernel,1,Apps),",101],["case lists:keysearch(Key, 1, List) of",260],["Shaper = case lists:keysearch(shaper, 1, Opts) of",101],["case lists:keysearch(max_fsm_queue, 1, Opts) of",111],["case lists:keysearch(asn1_info,1,Attributes) of",114],["case lists:keysearch(attributes,1,MI) of",114],["case lists:keysearch(<<\"delete\">>, 1, Query) of",146],["case lists:keysearch(Default, 1, Lists) of",168],["case lists:keysearch(Opt, 1, Opts) of",172]],"useCount":12249},{"word":"label","context":[["[{label,1},",116],["[{<<\"label\">>, translate:translate(Lang, Label)},",66],["{label = ?CSI_MsgType_MTEstablishContext,",98],["contents     = [{label, Label},",101],["label        = Label,",107],["{<<\"label\">>, ?T(Lang, <<\"Jabber ID\">>)},",112],["{\"label\", translate:translate(Lang, Label)},",136],["{<<\"label\">>, translate:translate(Lang, Label)},",335],["[{<<\"label\">>,",341],["{<<\"label\">>,",575]],"useCount":7049},{"word":"lang","context":[["#adhoc_request{lang = Lang,",127],["auth = {_, _Auth, AJID}, q = Query, lang = Lang}) ->",104],["case StateData#state.lang of",124],["[{<<\"xml:lang\">>, _val} | _acc].",160],["Lang = xml:get_attr_s(\"xml:lang\", Attrs),",166],["lang = Lang,",214],["%% <pre lang=\"erlang\">",256],["lang = Lang}) ->",304],["Lang = StateData#state.lang,",410],["Lang = xml:get_attr_s(<<\"xml:lang\">>, Attrs),",448]],"useCount":8422},{"word":"last","context":[["case lists:last(Ops) of",66],["%% @todo use cache-last-item feature",69],["%%%% last item cache handling",69],["%% Get the last page of size 5.",90],["last,",95],["Col = byte_size(lists:last(Parts)),",124],["string:strip(lists:last(string:tokens(Hosts, \",\")))",125],["%% (i.e., as the last child of the <message/> stanza)\".",64],["lists:duplicate(Left, lists:last(Hist));",58],["last ->",51]],"useCount":8362},{"word":"len","context":[["Enc1@len < 16384 ->",1175],["Enc1@len = length(Val),",1082],["[if Enc1@len < 128 ->",1080],["[align|<<2:2,Enc1@len:14>>]",1080],["Enc1@len];",1080],["Enc1@len = byte_size(Enc1@bin),",395],["Enc4@len = byte_size(Enc4@bin),",300],["Enc3@len = byte_size(Enc3@bin),",249],["Enc5@len = byte_size(Enc5@bin),",195],["Enc2@len = byte_size(Enc2@bin),",184]],"useCount":12854},{"word":"length","context":[["?RT_PER:encode_length(undefined,length(Val)),",2152],["{Val,length(Val)}",133],["A = length(As),",142],["Arity = length(A),",149],["%% Illegal: length",160],["Arity = length(As),",212],["case length(element(2,Val1)) of",240],["Arity = length(Args),",265],["Enc1@len = length(Val),",1082],["%% decode tag and length",11784]],"useCount":40010},{"word":"level","context":[["handle_call(get_loglevel, #state{level=Level} = State) ->",69],["%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-",137],["%% -*- erlang-indent-level: 2 -*-",1099],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil -*-",898],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-",555],["%%% erlang-indent-level: 2",453],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92-*-",332],["%%% -*- erlang-indent-level: 2 -*-",288],["%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-",170],["%% -*- erlang-indent-level: 4; indent-tabs-mode: nil; fill-column: 80 -*-",155]],"useCount":8808},{"word":"li","context":[["%%%   </li>",160],["%%   </li>",267],["?XE(<<\"li\">>,",208],["%%<li>The specified node does not exist.</li>",207],["%%<li>The specified node does not exist.</li>",207],["%%<li>The node does not exist.</li>",207],["%%<li>The node does not exist.</li>",207],["%%          </li>",170],["%% <li>",147],["%% </li>",125]],"useCount":14018},{"word":"line","context":[["%%    ?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",945],["%%    ?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",945],["?line test_server:timetrap_cancel(Dog),",1199],["?line receive",1373],["?line check_result(R, \"valid\").",1695],["?line check_result(R, \"not-wf\").",5305],["?line xmerl:export([A],xmerl_test).",7124],["?line file:set_cwd(?config(data_dir,Config)),",7211],["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",8015]],"useCount":173890},{"word":"link","context":[["%% <br />{@link wxEvtHandler}",633],["%%%  link the code of this program with any library released under",236],["%% <dl><dt>Use {@link wxEvtHandler:connect/3.} with EventType:</dt>",269],["%% See {@link vertexAttrib1d/2}",272],["%% <br />{@link wxEvent}",275],["%% <br />{@link wxControl}",323],["%% See {@link programUniform1i/3}",392],["%% See {@link uniform1f/2}",392],["link(Pid),",592],["%% <br />{@link wxWindow}",606]],"useCount":14291},{"word":"list","context":[["-spec format_error(any()) -> [char() | list()].",162],["%%          A list of key/value pairs configuring the case.",151],["%%   A list of key/value pairs, holding the test case configuration.",795],["list ->",612],["%% @see list/2",195],["[{<<\"type\">>, <<\"list-single\">>},",192],["%%%      Args = list()",182],["%% Idl file dependency list function",166],["list() ->",165],["-spec parse(Tokens :: list()) -> yecc_ret().",165]],"useCount":49205},{"word":"list_to_atom","context":[["Node = list_to_atom(NodeStr),",88],["list_to_atom(",88],["ClientAtom = list_to_atom(ClientName),",76],["Name = list_to_atom(atom_to_list(?MODULE)",67],["Module = list_to_atom(?PLUGIN_PREFIX++Type),",57],["Rtmod = list_to_atom(lists:concat([\"asn1ct_gen_\",erule(Erules),",55],["?line true = lists:member(list_to_atom(NodeStr), [node() | nodes()]),",55],["To = list_to_atom(ToString),",49],["From = list_to_atom(FromString),",49],["Table = list_to_atom(STable),",48]],"useCount":7045},{"word":"list_to_binary","context":[["B = list_to_binary(M),",244],["BinOpt = list_to_binary(lists:foldl(MOpts, [<<0:32>>], Options)),",3443],["list_to_binary(",357],["Bin0 = list_to_binary(Msg0),",340],["Bin = erlang:list_to_binary(DeepIoList),",313],["list_to_binary([",217],["case catch binary_to_term(list_to_binary([?VERSION_MAGIC,",160],["HostB = list_to_binary(Host),",156],["list_to_binary(Value);",133],["list_to_binary(lists:reverse(Acc));",196]],"useCount":17736},{"word":"list_to_integer","context":[["D = erlang:list_to_integer([D3,D2,D1,D0], 16),",58],["{list_to_integer(S), none}",55],["case (catch list_to_integer(Val)) of",183],["{list_to_integer(S1), list_to_integer(S2)};",55],["{list_to_integer(S1), list_to_integer(S2)};",55],["Int_len = list_to_integer(Len),",64],["{{const, list_to_integer(Int)}, S1};",68],["C = erlang:list_to_integer([C3, C2, C1, C0], 16),",68],["case catch list_to_integer(Val) of",96],["case (catch list_to_integer(Int)) of",108]],"useCount":6073},{"word":"lists","context":[["{lists:reverse(Acc),Bytes};",1259],["lists:flatmap(",1303],["lists:reverse(Acc);",3874],["lists:flatten(",1949],["{lists:reverse(Acc), Bytes};",2180],["BinOpt = list_to_binary(lists:foldl(MOpts, [<<0:32>>], Options)),",3443],["{lists:reverse(AccBytes),AccLen};",3635],["lists:map(",3712],["lists:foldl(",4998],["lists:foreach(",7809]],"useCount":208025},{"word":"load","context":[["application:load(ssl),",126],["?assert(lists:member({lib_dep_1, \"0.0.1\", load}, AppSpecs)).",79],["#load{} ->",82],["application:load(orber),",85],["application:load(sasl),",94],["{load,{bar,soft_purge,soft_purge}},",100],["load() ->",130],["{load,{foo,soft_purge,soft_purge}},",145],["?ERROR_MSG(\"Can't load config file: \"",210],["application:load(lager),",230]],"useCount":6694},{"word":"local","context":[["gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).",1637],["gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).",1087],["supervisor:start_link({local, ?SERVER}, ?MODULE, []).",877],["gen_server:start_link({local, Proc}, ?MODULE, [Host, Opts], []).",244],["supervisor:start_link({local, ?MODULE}, ?MODULE, []).",2753],["local ->",221],["gen_server:start_link({local, Proc}, ?MODULE,",190],["%% Avoid warning for local function error/1 clashing with autoimported BIF.",170],["gen_server:start({local, ?MODULE}, ?MODULE, [], []).",160],["[local]}})).",121]],"useCount":15794},{"word":"log","context":[["{ok, Bin} = file:read_file(\"test.log\"),",155],["-include_lib(\"lager/include/log.hrl\").",117],["Log :: log(),",120],["%%          A comment about the case to be printed in the log.",123],["reply(From, {error, {blocked_log, L#log.name}}, S);",140],["lager:log(error, self(), \"Test messageis64bytes\"),",140],["lager:log(error, self(), \"Test message1\"),",152],["%% Purpose: Prepare the state to be printed on error log",183],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400],["-include(\"log.hrl\").",438]],"useCount":18042},{"word":"lookup","context":[["lookup(Key) ->",125],["case ets:lookup(?IQTABLE, {XMLNS, Host}) of",66],["case catch ets:lookup(gen_mod:get_module_proc(Host,",75],["case ets:lookup(local_config, Opt) of",76],["case ets:lookup(?EXOMETER_REPORTERS, Reporter) of",77],["case gb_trees:lookup(String, Pack) of",79],["case gb_trees:lookup(Jid, Pack) of",79],["Reply = case ets:lookup(hooks, {Hook, Host}) of",85],["lookup/2,",133],["case ets:lookup(sm_iqtable, {XMLNS, Host}) of",110]],"useCount":11170},{"word":"loop","context":[["loop();",870],["loop(State);",840],["loop(S);",645],["loop() ->",444],["loop()",296],["loop().",262],["loop(State) ->",236],["loop(State)",219],["loop(State).",157],["loop(Parent, Name, NStateName, NStateData,",144]],"useCount":13245},{"word":"lserver","context":[["Host = To#jid.lserver,",543],["LServer :: ejabberd:lserver(),",206],["#jid{luser = LUser, lserver = LServer} = From,",197],["To#jid.lserver,",155],["(JID#jid.lserver == FromJID#jid.lserver) and",142],["(JID#jid.lserver == FromJID#jid.lserver) and",142],["Server = JID#jid.lserver,",134],["LServer = JID#jid.lserver,",116],["#jid{luser = LUser, lserver = LServer} = To,",98],["Server = To#jid.lserver,",89]],"useCount":6823},{"word":"make","context":[["%% When using the {includefile, Includefile} option, make sure that",185],["%% Create a mapping for another sec model, and make sure it dosn't",49],["%%% We should *at least* try to GET all variables, just to make",49],["ReqData = #wm_reqdata{req_headers = mochiweb_headers:make([])},",50],["%% make rsa certs using oppenssl",53],["%% Be careful here to make the termination collapse if necessary.",53],["%% fsm_next_state_gc: Garbage collect the process heap to make use of",59],["HResponse = mochiweb_headers:make(ResponseHeaders),",167],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["%%  We make no guarantees that this code is fit for any purpose.",423]],"useCount":6986},{"word":"mandatory","context":[["{Term1,Bytes3,Rb2} = ?RT_BER:decode_octet_string(Bytes2,4,[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),",222],["?RT_BER:decode_integer(Bytes3,{0,65535},[{tag,128,1,'IMPLICIT',0}], mandatory);",174],["mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});",168],["prop=mandatory},",144],["{Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,4294967295},[{tag,128,0,'IMPLICIT',0}], mandatory),",135],["{Term1,Bytes3,Rb2} = 'dec_TerminationIDList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),",132],["mandatory ->",127],["exit({error,{asn1,{\"missing mandatory field in object\",",92],["{Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory),",84],["?RT_BER:decode_null(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory);",84]],"useCount":14682},{"word":"map","context":[["map ->",120],["lists:map(fun (N) ->",122],["#{ second => small, map => key } => \"small map key 2\",",128],["#{ third => small, map => key } => \"small map key 3\",",128],["lists:map(",3712],["#{ third => small, map => key } => \"small map key 3\",",128],["19=>a9,29=>b9,39=>\"c9\",\"49\"=>\"d9\",<<\"59\">>=>\"e9\",{[\"09\"]}=>\"19\" } => \"large map key 1\",",128],["{lists:map(fun item_to_xml/1,",195],["lists:map(fun",136],["#{ second => small, map => key } => \"small map key 2\",",128]],"useCount":20244},{"word":"match","context":[["match =",879],["?match({ok, _},",171],["?match(ok, orber_test_lib:remote_apply(ServerNode, orber_test_lib,",199],["[IP] = ?match([_], orber:host()),",169],["?match(ok, orber_test_lib:remote_apply(Node, orber_test_lib,",168],["?match({atomic, ok}, mnesia:create_table(Tab, Def)),",316],["{match, _} ->",319],["?match({'EXCEPTION',{'MARSHAL',_,_,_}},",404],["match ->",550],["?match({atomic, ok},",593]],"useCount":31071},{"word":"match_tags","context":[["match_tags(V, Tt);",124],["match_tags([{T,V}], [T|Tt]) ->",54],["match_tags({T,V}, [T]) ->",54],["Val = match_tags(Tlv, TagIn),",64],["match_tags({T,V}, [T|Tt]) ->",71],["match_tags(Tlv, []) ->",73],["Val = match_tags(Tlv, TagsIn),",98],["Val = match_tags(Tlv, Tags),",156],["Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),",5277],["Tlv1 = match_tags(Tlv, TagIn),",6359]],"useCount":12906},{"word":"max","context":[["Timeout = max(StateData#state.mgmt_timeout - Diff div 1000, 1),",74],["\"max sequence number celing is about to be reached. Although\"",64],["%% {megaco_trace, max},",64],["#lqueue{queue = Q3, len = Max, max = Max};",65],["{megaco_trace, max},",68],["{\"max-keys\", proplists:get_value(max_keys, Options)},",72],["%%% @author     Max Lapshin <max@maxidoors.ru> [http://erlyvideo.org]",109],["-author('Max Lapshin <max@maxidoors.ru>').",148],["process_flag(priority, max),",153],["Session = lists:max(Ss),",254]],"useCount":6244},{"word":"megaco_term_id","context":[["From1 = #megaco_term_id{id = [\"11111111\", \"00000000\", \"00000000\"]},",505],["To2   = #megaco_term_id{id = [\"11111111\", \"00001111\", \"00001111\"]},",485],["To1   = #megaco_term_id{id = [\"11111111\", \"00000000\", \"00001111\"]},",485],["Root  = #megaco_term_id{id = [\"root\"]},",484],["#megaco_term_id{contains_wildcards = false, id = [\"root\"]} ->",207],["#megaco_term_id{contains_wildcards = false,",174],["Tid = #megaco_term_id{id = [\"00000000\",\"00000000\",\"01101101\"]},",139],["From2 = #megaco_term_id{id = [\"11111111\", \"00001111\", \"00000000\"]},",505],["NotifyReq2 = cre_NotifyReq([#megaco_term_id{id = ?A5556}],Desc),",78],["TermID = {megaco_term_id, true, [[$*]] },",96]],"useCount":6111},{"word":"member","context":[["case lists:member(v3, Vsns) of",126],["?assert(lists:member({non_goal_2, \"0.0.1\"}, AppSpecs)),",117],["?assert(lists:member({non_goal_1, \"0.0.1\"}, AppSpecs)),",124],["case lists:member(?PEPNODE, Plugins) of",138],["lists:member(Tag, Tags).",392],["</member>",346],["<member>",346],["PersistentFeature = lists:member(<<\"persistent-items\">>, Features),",138],["case lists:member(LServer, ?MYHOSTS) of",138],["affiliation, member, _ServiceAf)",126]],"useCount":22971},{"word":"message","context":[["[#message{from = Peer,",96],["\"message\" ->",102],["#message{from = MyBareJID, to = MyJID, type = chat,",96],["%% (or a system message).",103],["lager:log(error, self(), \"Test message\"),",105],["lager:error(\"Test message\"),",115],["Packet = Activity#activity.message,",128],["%% To be used in grammar files to throw an error message to the parser",162],["<<\"message\">> ->",256],["#xmlel{name = <<\"message\">>,",403]],"useCount":20152},{"word":"messages","context":[["<<\"Only occupants are allowed to send messages \"",99],["%% them, not as the real erlang messages.  Use trace for that.",89],["%% Description: Handling cast messages",1159],["%% Description: Handling all non call/cast messages",1167],["%% Description: Handling call messages",1119],["%% Handling cast messages",831],["%% Handling all non call/cast messages",826],["%% Handling call messages",811],["%% @doc Handling all non call/cast messages",174],["%% Callback functions for system messages handling.",100]],"useCount":12900},{"word":"method","context":[["method = Method,",210],["[{<<\"action\">>, <<\"\">>}, {<<\"method\">>, <<\"post\">>}],",441],["[?XAE(\"form\", [{\"action\", \"\"}, {\"method\", \"post\"}],",200],["{Method, Req2} = cowboy_req:method(Req),",105],["case MochiReq:get(method) of",84],["Method = wrq:method(RD),",78],["method=Method,",73],["case Req:get(method) of",73],["children = [#xmlel{name = <<\"method\">>,",72],["case wrq:method(Req) of",71]],"useCount":8697},{"word":"mfa","context":[["{mfa, {?MODULE, connection_info_result, []}},",189],["{mfa,",174],["{mfa, {?MODULE, erlang_ssl_receive, [Data]}},",157],["{mfa, {ssl_test_lib, ReceiveFunction, []}},",131],["{mfa, {ssl_test_lib, session_info_result, []}},",292],["{mfa, {ssl_test_lib,",294],["{mfa, {ssl_test_lib, send_recv_result, []}},",321],["{mfa, {ssl_test_lib, send_recv_result_active, []}},",487],["{mfa, {?MODULE,",492],["{mfa, {ssl_test_lib, no_result, []}},",586]],"useCount":6053},{"word":"mnesia","context":[["mnesia:dirty_write(",277],["mnesia:transaction(fun() ->",304],["mnesia:write(",291],["?match({atomic, ok}, mnesia:create_table(Tab, Def)),",316],["mnesia:start(),",363],["mnesia:foldl(",604],["mnesia ->",622],["case mnesia:transaction(F) of",786],["mnesia:transaction(F);",808],["mnesia:transaction(F).",865]],"useCount":51029},{"word":"mod_pubsub","context":[["Node :: mod_pubsub:nodeId(),",214],["Host       :: mod_pubsub:host(),",185],["%%\t Host = mod_pubsub:host()",149],["%%\t NodeId = mod_pubsub:pubsubNodeId()",191],["NodeIdx :: mod_pubsub:nodeIdx(),",142],["%%     Host = mod_pubsub:host()",189],["Host :: mod_pubsub:host(),",133],["%%     Node = mod_pubsub:pubsubNode()",121],["Host          :: mod_pubsub:host(),",126],["Host  :: mod_pubsub:host(),",128]],"useCount":7716},{"word":"mode","context":[["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil -*-",898],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-",555],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92-*-",332],["%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-",170],["%% -*- mode: nitrogen -*-",160],["%% -*- erlang-indent-level: 4; indent-tabs-mode: nil; fill-column: 80 -*-",155],["%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-",170],["%% -*- mode: erlang; tab-width: 4; indent-tabs-mode: 1; st-rulers: [70] -*-",322],["%% -*- mode: erlang; tab-width: 4; indent-tabs-mode: 1; st-rulers: [70] -*-",322],["0}), mode='PARAM_IN'}",288]],"useCount":9846},{"word":"module","context":[["| {suspend, module(), atom(), [any()]}",161],["module ->",231],["module = Module,",214],["-export([module/2]).",209],["[{module, ?MODULE_STRING},",197],["%% Fetch top module reference, register if unregistered.",166],["%% Fetch module reference, register if unregistered.",166],["Module :: module().",166],["{module, ?MODULE},",532],["Module :: module(),",726]],"useCount":46734},{"word":"modules","context":[["{modules, []},",156],["\"  {modules, []},\\n\"",140],["tags = [admin,modules],",112],["-include(\"modules/datastore/datastore_specific_models_def.hrl\").",111],["modules() ->",87],["-include(\"modules/fslogic/fslogic_common.hrl\").",82],["{modules, Host},",76],["%% @doc <p>Called during pubsub modules initialisation. Any pubsub plugin must",79],["%% <p>The modules are initialized in alphetical order and the list is checked",66],["{modules, Modules},",75]],"useCount":7461},{"word":"more","context":[["%%% See the NOTICE for more information.",240],["{more,{Cs,Col,Toks,Line,[],fun scan/6}};",182],["more;",209],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang2 for more book information.",236],["?fatal_error(State, \"No more bytes\");",75],["{more, State2} ->",76],["{more, _} ->",110],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang for more book information.",160],["%% {more,Continuation} | {done,ReturnVal,RestChars}.",160],["more ->",254]],"useCount":9473},{"word":"move","context":[["move/2,move/3,move/4,moveAfterInTabOrder/2,moveBeforeInTabOrder/2,",122],["layout/1,lineDown/1,lineUp/1,lower/1,makeModal/1,makeModal/2,move/2,",264],["move/3,move/4,moveAfterInTabOrder/2,moveBeforeInTabOrder/2,navigate/1,",272],["move/3,move/4,moveAfterInTabOrder/2,moveBeforeInTabOrder/2,navigate/1,",272],["move(This,Pt) -> wxWindow:move(This,Pt).",606],["move(This,Pt) -> wxWindow:move(This,Pt).",606],["move(This,X,Y, Options) -> wxWindow:move(This,X,Y, Options).",606],["move(This,X,Y) -> wxWindow:move(This,X,Y).",606],["move(This,X,Y) -> wxWindow:move(This,X,Y).",606],["move(This,X,Y, Options) -> wxWindow:move(This,X,Y, Options).",606]],"useCount":7646},{"word":"must","context":[["% This must be a list of pairs where in each pair Encoding is a string naming a valid",55],["% The Result is ignored, so any effect of this function must be by returning a modified ReqData",55],["% If this is anything other than the atom no_charset, it must be a list of pairs where",55],["?line [Value2] = get_req(1, [NOid]), % must not be same",80],["%% @doc <p>Called during pubsub modules initialisation. Any pubsub plugin must",79],["%% The atom must have all characters in uppercase.",69],["%% @doc <p>Check if a notification must be delivered or not based on",69],["%% 2. Redistributions in binary form must reproduce the above",63],["%% The original stanza must be slightly modified.",61],["%% Continuation Kv must accept (Value, Chars)",54]],"useCount":9125},{"word":"n","context":[["\"\\n\"",883],["\"\\n\",",606],["\"Host: localhost\\r\\n\"",347],["?line {ok, n} = disk_log:open([{name, n}, {file, File}, {type, wrap},",260],["<<\"Definitions.\\n\"",321],["$\\n ->",345],["\"}\\n\"",595],["?line ok = disk_log:close(n),",450],["\"\\r\\n\"",378],["\"Rules.\\n\"",382]],"useCount":100046},{"word":"name","context":[["-export([tc/0,id/0,name/0]).",1066],["[#xmlel{name = <<\"value\">>, attrs = [],",1195],["[#xmlel{name = <<\"query\">>,",1088],["%% returns name",1067],["#xmlel{name = <<\"field\">>,",1688],["[#xmlel{name =",606],["name = Name,",693],["#xmlel{name = <<\"item\">>,",736],["#xmlel{name = <<\"feature\">>,",809],["[#xmlel{name = <<\"x\">>,",1063]],"useCount":96290},{"word":"net","context":[["%%% @author Evgeny Khramtsov <ekhramtsov@process-one.net>",222],["%%% @author Christophe Romain <christophe.romain@process-one.net>",296],["%%%   [http://www.process-one.net/]",371],["-author('christophe.romain@process-one.net').",447],["-author('alexey@process-one.net').",2663],["%%% Author  : Alexey Shchepin <alexey@process-one.net>",2669],["%% @author Arjan Scherpenisse <arjan@scherpenisse.net>",156],["%%% Author  : Mickael Remond <mremond@process-one.net>",183],["-author('badlop@process-one.net').",211],["-author('elbrujohalcon@inaka.net').",216]],"useCount":14056},{"word":"new","context":[["new/1,",184],["new() ->",1542],["%% this function is called by the new process to find out about",329],["-export([new/1,",234],["dict:new(),",197],["new(Parent, []).",193],["Sizer = wxBoxSizer:new(?wxVERTICAL),",186],["%% @equiv new(Parent, [])",188],["new(#wx_ref{type=ParentT,ref=ParentRef}, Options)",192],["new(Parent)",192]],"useCount":40713},{"word":"next_state","context":[["{next_state, normal_state, StateData};",346],["%%          {next_state, NextStateName, NextStateData, Timeout} |",1039],["{next_state, StateName, StateData};",424],["{next_state, StateName, State};",285],["%% Returns: {next_state, NextStateName, NextStateData}            |",647],["%% Returns: {next_state, NextStateName, NextStateData}          |",1039],["{next_state, StateName, State}.",797],["{next_state, StateName, StateData}.",665],["%%          {next_state, NextStateName, NextStateData, Timeout}   |",647],["{next_state, normal_state, StateData}",441]],"useCount":16713},{"word":"nil","context":[["nil.",75],["%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-",137],["%% -*- erlang-indent-level: 4; indent-tabs-mode: nil; fill-column: 80 -*-",155],["%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-",170],["nil;",283],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92-*-",332],["nil",403],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-",555],["nil ->",868],["%% -*- erlang-indent-level: 4;indent-tabs-mode: nil -*-",898]],"useCount":9476},{"word":"nl","context":[["emit([\";\",nl]);",104],["-author(\"Marc Worrell <marc@worrell.nl\").",116],["emit([\".\",nl])",121],["%% @author Marc Worrell <marc@worrell.nl>",650],["nl(Fd),",503],["io:nl(),",279],["-author(\"Marc Worrell <marc@worrell.nl>\").",255],["emit({\"-export([\",nl}),",144],["emit([\";\",nl]),",107],["ic_codegen:nl(Fd),",152]],"useCount":10538},{"word":"no","context":[["no",331],["false -> no",132],["{no, Reason} ->",130],["{[]},\t\t\t\t%Tuple indicates no 'export_all'.",99],["%%   no further persistance operation will be performed. This case is used,",96],["no.",138],["%%  We make no guarantees that this code is fit for any purpose.",423],["no;",473],["%% Length with constraint no",1210],["no ->",1455]],"useCount":20093},{"word":"node","context":[["node = Node,",529],["Client = ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",1201],["ssl_test_lib:start_client([{node, ClientNode},",342],["[{disc_only_copies, [node()]},",438],["Server = ssl_test_lib:start_server([{node, ClientNode}, {port, 0},",449],["Client = ssl_test_lib:start_client([{node, ServerNode}, {port, Port},",449],["ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",508],["[{ram_copies, [node()]},",585],["[{disc_copies, [node()]},",679],["Server = ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",1159]],"useCount":51219},{"word":"nodes","context":[["%% stored on disc or distributed for use on other nodes.",1461],["d(\"start nodes: \"",278],["% remove non-existing nodes and pids:",180],["NodeOptions, SubsByDepth, nodes, Stanza, false),",174],["% remove existing nodes:",150],["[<<\"running nodes\">>, ENode, <<\"backup\">>,",108],["\"purge-nodes\",",107],["\"delete-nodes\",",83],["%%% <p>PubSub plugin nodes are using the {@link gen_pubsub_node} behaviour.</p>",84],["\"instant-nodes\",",83]],"useCount":13717},{"word":"non","context":[["%% After a non-accepting state, maybe reach accept state later.",66],["%% @doc Check if this non participant can send message to room.",63],["%%  If a non-zero named buffer object is bound to the `?GL_PIXEL_PACK_BUFFER' target",72],["%%  If a non-zero named buffer object is bound to the `?GL_PIXEL_UNPACK_BUFFER' target",144],["%% @doc Handling all non call/cast messages",174],["%% Handling all non call/cast messages",826],["% remove non-existing nodes and pids:",180],["%%  If a non-zero named buffer object is bound to the `?GL_ARRAY_BUFFER' target  (see  {@link gl:bindBuffer/2}",64],["%% Description: Handling all non call/cast messages",1167],["%% User updates his presence (non-directed presence packet)",62]],"useCount":6444},{"word":"non_neg_integer","context":[["non_neg_integer(),",246],["Timeout :: non_neg_integer() | infinity.",186],["non_neg_integer().",98],["Timeout :: non_neg_integer() | infinity,",95],["-> {ok, non_neg_integer()} | {error, atom()}.",94],["N :: non_neg_integer(),",93],["Time :: non_neg_integer(),",86],["Bytes :: non_neg_integer();",64],["Number :: non_neg_integer(),",65],["Size :: non_neg_integer().",70]],"useCount":9193},{"word":"none","context":[["?none -> ?none;",298],["none),",343],["none,",581],["none -> none;",282],["?none -> ?none;",298],["_ -> none",752],["none ->",5452],["none;",1343],["none",942],["none.",341]],"useCount":53972},{"word":"noreply","context":[["%%                                       {noreply, State, Timeout} |",969],["{noreply, State}.",16117],["%% Returns: {noreply, State}          |",961],["{noreply, NewState};",999],["%%          {noreply, State, Timeout} |",1007],["{noreply, S};",1238],["%%                                   {noreply, State, Timeout} |",1454],["{noreply, State}",1504],["%%                                      {noreply, State, Timeout} |",1849],["{noreply, State};",9981]],"useCount":63146},{"word":"normal","context":[["normal ->",661],["{stop, normal, ok, State}.",483],["{stop, normal, State}.",658],["{stop, normal, StateData}",910],["{stop, normal, StateData}.",1177],["{stop, normal, ok, State};",1581],["{stop, normal, StateData};",4491],["{stop, normal, State};",3432],["exit(normal);",2012],["exit(normal)",1713]],"useCount":29830},{"word":"not","context":[["check_result(R, \"not-wf\").",1061],["%% Type: not-wf",7380],["?line check_result(R, \"not-wf\").",5305],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed",1639],["not PersistentFeature ->",210],["%% @doc Destroys this object, do not use object again",1017],["{asn1, {unexpected, Tlv3}}}) % extra fields not allowed",212],["[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed",335],["%%% along with RefactorErl.  If not, see <http://plc.inf.elte.hu/erlang/>.",358],["%%    ?line check_result(R, \"not-wf\").",720]],"useCount":81158},{"word":"not_found","context":[["{not_found, Name} ->",127],["not_found",564],["{error, not_found}",595],["{error, not_found} ->",690],["not_found;",822],["not_found ->",2013],["{error, not_found};",478],["not_found |",184],["[] -> not_found;",155],["_ -> not_found",128]],"useCount":11093},{"word":"now","context":[["TimeStamp = now(),",116],["{A, B, C} = now(),",129],["{A,B,C} = erlang:now(),",134],["{A,B,C} = now(),",136],["Now = now_to_usec(now()),",141],["test_server:comment(io_lib:format(\"~p\",[now()])),",160],["Now = chef_object_base:sql_date(now),",167],["{MegaSecs, Secs, _MicroSecs} = now(),",179],["Now = now(),",205],["random:seed(now()),",271]],"useCount":9496},{"word":"ns","context":[["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">> ->",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>}])",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>} ->",713],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>}])",416],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>} ->",527],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">> ->",416],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>} ->",806],["#xmlel{ns = ?NS_DATA_FORMS, name = 'field', attrs =",117],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>}]);",112],["<<\"urn:ietf:params:xml:ns:xmpp-tls\">>} ->",124]],"useCount":8919},{"word":"null","context":[["json_encode(null, _State) ->",84],["\"null\";",107],["<<\"null\">>;",113],["null ->",351],["[], any:create(orber_tc:null(), null)),",120],["[], any:create(orber_tc:null(), null)),",120],["null",123],["{V, S1#decoder{state=null}};",128],["{lists:reverse(Acc), S1#decoder{state=null}};",130],["null;",308]],"useCount":7251},{"word":"number","context":[["%% attribute number 1 with type OCTET STRING",3301],["%% attribute number 1 with type INTEGER",3265],["%% attribute number 2 with type SEQUENCE OF",1694],["%% attribute number 4 with type SEQUENCE OF",987],["%% attribute number 1 with type SEQUENCE OF",841],["%% attribute number 3 with type CHOICE",762],["%% attribute number 3 with type INTEGER",759],["%% attribute number 2 with type OCTET STRING",703],["%% attribute number 2 with type INTEGER",2145],["%% attribute number 2 with type NULL",644]],"useCount":40677},{"word":"o","context":[["[{<<\"prefix\">>,<<\"o\">>},",75],["%% o  try boundaries",49],["%% o  Bad community uses/name is tested already",49],["%% o  Test engine boots / time",49],["%% o  Test add/deletion of rows.",49],["%% o  add/delete views and try them",49],["%%%    \"cn=Bill Valentine, ou=people, o=Bluetail AB, dc=bluetail, dc=com\",",60],["v=0 o=- 7736844526 7736842807 IN IP4 125.125.125.111 s=- t= 0 0 c=IN IP4 125.125.125.111 m=audio 1111 RTP/AVP 4",64],["\"from pubsub_state i, pubsub_node n, pubsub_node_option o \"",74],["o=- 2890844526 2890842807 IN IP4 124.124.124.222",289]],"useCount":6400},{"word":"object","context":[["%% @doc Destroys this object, do not use object again",1017],["%%  If a non-zero named buffer object is bound to the `?GL_PIXEL_UNPACK_BUFFER' target",144],["%% as a byte offset into the buffer object's data store.",128],["object ->",164],["%% Create an object from a list of Key/Value pairs.",99],["exit({error,{asn1,{\"missing mandatory field in object\",",92],["%% 'object'",84],["%% Arguments: Self  - its own object reference.",76],["%%  If a non-zero named buffer object is bound to the `?GL_PIXEL_PACK_BUFFER' target",72],["%% @doc Destroys this object, do not use object again",1017]],"useCount":8249},{"word":"odbc","context":[["odbc) ->",127],["{updated, 1} = odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++",126],["odbc:sql_query(Ref, \"SELECT * FROM \" ++ Table),",197],["odbc ->",243],["remove_user(LUser, LServer, odbc) ->",140],["ok = odbc:commit(Ref, commit),",117],["odbc:sql_query(Ref,  \"CREATE TABLE \" ++ Table ++",349],["odbc:sql_query(Ref,",348],["odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++\" VALUES(\" ++",273],["odbc:sql_query(Ref,\"SELECT FIELD FROM \" ++ Table),",261]],"useCount":7171},{"word":"oe_tc","context":[["{\"set_qos\", 'CosNotification_QoSAdmin':oe_tc(set_qos)},",144],["oe_tc(validate_qos) -> 'CosNotification_QoSAdmin':oe_tc(validate_qos);",144],["oe_tc(set_qos) -> 'CosNotification_QoSAdmin':oe_tc(set_qos);",144],["oe_tc(validate_qos) -> 'CosNotification_QoSAdmin':oe_tc(validate_qos);",144],["{\"validate_qos\", 'CosNotification_QoSAdmin':oe_tc(validate_qos)},",144],["oe_tc(get_qos) -> 'CosNotification_QoSAdmin':oe_tc(get_qos);",144],["{\"get_qos\", 'CosNotification_QoSAdmin':oe_tc(get_qos)},",144],["oe_tc(_) -> undefined.",696],["-export([oe_tc/1, oe_is_a/1, oe_get_interface/0]).",696],["oe_tc(set_qos) -> 'CosNotification_QoSAdmin':oe_tc(set_qos);",144]],"useCount":10850},{"word":"of","context":[["{Term2,Tlv3} = case Tlv2 of",2691],["{EncBytes2,EncLen2} =  case Cindex2 of",2709],["case Result of",3317],["case Res of",3968],["case os:type() of",2161],["case Type of",4332],["case SubItem of",2148],["case Val of",2090],["{EncBytes,EncLen} = case element(1,Val) of",2006],["of",15395]],"useCount":597923},{"word":"ok","context":[["false -> ok",2793],["true -> ok",2944],["{ok, _} ->",3234],["{ok, State};",3998],["_ -> ok",6940],["{ok, State}.",13032],["ok ->",20693],["ok",44003],["ok;",68861],["ok.",110729]],"useCount":720340},{"word":"omg","context":[["\"IDL:omg.org/CosNotification/EventType:1.0\",",744],["\"IDL:omg.org/CosNotification/PropertyRange:1.0\",",168],["\"IDL:omg.org/CosNotification/Property:1.0\",",624],["\"IDL:omg.org/CosNotification/FixedEventHeader:1.0\",",240],["], [orber_ifr:lookup_id(OE_IFR,\"IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0\")], []),",248],["\"IDL:omg.org/CosPropertyService/PropertyModeType:1.0\",",248],["\"IDL:omg.org/CosNaming/NameComponent:1.0\",",264],["\"IDL:omg.org/CosNotifyFilter/ConstraintExp:1.0\",",296],["\"IDL:omg.org/CosTransactions/Coordinator:1.0\",",224],["\"IDL:omg.org/CosFileTransfer/File:1.0\",",208]],"useCount":12005},{"word":"on","context":[["%% stored on disc or distributed for use on other nodes.",1461],["%% stored on disc or distributed for use on other nodes.",1461],["%% Purpose: Prepare the state to be printed on error log",183],["Name2  = \"al/on\",",90],["%% <p>The selected behaviour depends on the return parameter:",96],["%% instance, the tests need to be performed on a separate node (or",139],["%%\tSee `clause' for documentation on `erl_parse' clauses.",99],["%% @doc <p>Accepts or rejects subcription requests on a PubSub node.</p>",118],["?DEBUG(\"Send XML on stream = ~p\", [Text]),",111],["Addr = undefined, % Assumed to be on the same host",108]],"useCount":25117},{"word":"one","context":[["%% yeccpre.hrl is included (one which defines yeccpars1/5).",185],["%%% Author  : Mickael Remond <mremond@process-one.net>",183],["%%% @author Christophe Romain <christophe.romain@process-one.net>",296],["%%% Created : 16 Nov 2002 by Alexey Shchepin <alexey@process-one.net>",155],["-author('badlop@process-one.net').",211],["%%% @author Evgeny Khramtsov <ekhramtsov@process-one.net>",222],["-author('alexey@process-one.net').",2663],["-author('christophe.romain@process-one.net').",447],["%%%   [http://www.process-one.net/]",371],["%%% Author  : Alexey Shchepin <alexey@process-one.net>",2669]],"useCount":23984},{"word":"online","context":[["%%% Serve queries about user last online",49],["case lists:member(Show, ShowValues) of %andalso Show =/= \"online\" of",43],["{_, _, <<\"available\">>, _} -> <<\"online\">>;",46],["<<\"Send announcement to all online users \"",36],["%%% retrieved online at http://www.erlang.org/.",41],["online ->",53],["%%% Purpose : Support for online configuration of ejabberd",54],["_ -> %% online",66],["%% retrieved online at http://www.erlang.org/.",6836],["?NS_ADMINL(<<\"get-online-users-num\">>) ->",54]],"useCount":8584},{"word":"only","context":[["%% @doc Keep from the list only the allowed terms.",69],["%% Note: The suite/0 function is only meant to be used to return",71],["%% Returns a sublist of Terms with only the ones which first element is",69],["%% against \"</script>\" injection attacks which are only",70],["%% Escaping solidus is only useful when trying to protect",70],["s([{[tDescr3,0], s, \"read-only\"}]),",86],["%% and sorted to ensure that each module is initialized only once.</p>",66],["%% For internal use only.",162],["%% for internal use only",166],["%% Note: This directive should only be used in test suites.",581]],"useCount":12726},{"word":"open","context":[["Z = zlib:open(),",189],["?line {ok, Sock}     = open(\"localhost\", 8000),",176],["case file:open(File, [read]) of",171],["Fd = open(File),",150],["disk_log:open([{name, n}, {file, File}, {type, wrap},",114],["?line {ok, n} = disk_log:open([{name, n}, {file, File}, {type, wrap},",260],["{access_model, open},",95],["Conn = pgsql_connection:open(\"test\", \"test\"),",109],["?line {ok, n} = disk_log:open([{name, n}, {file, File}, {type, halt},",100],["ok = auth_status(auth_request(\"/\" ++ AuthPrefix ++ \"open/\",",99]],"useCount":13967},{"word":"option","context":[["%% When using the {includefile, Includefile} option, make sure that",185],["%% Purpose    \t: Read one option from a widget",98],["%%\t\t  Opt     - An option to read",94],["#xmlel{name = <<\"option\">>,",396],["[#xmlel{name = <<\"option\">>,",100],["%% Return \t: The value of the option or invalid_option",98],["%% Purpose    \t: Take care of a read option",93],["%% Args        \t: Option  - An option tuple",93],["\"The option is still supported \"",79],["-type options() :: [option()].",79]],"useCount":9419},{"word":"options","context":[["{options, ServerOpts}]),",1033],["{options, ClientOpts}]),",689],["options() ->",480],["{options,",443],["Options = TNode#pubsub_node.options,",439],["{from, self()},  {options, ClientOpts}]),",323],["{options, [{active, false} | ClientOpts]}]),",154],["{options, [{active, false} | ServerOpts]}]),",160],["-export([init/3, terminate/2, options/0, features/0,",193],["Args#doc_query_args{options=Options};",237]],"useCount":23030},{"word":"opts","context":[["GetOptSpec = providers:opts(CommandProvider),",258],["-export_type([opts/0]).",94],["opts = Opts,",96],["State#state.opts]};",103],["opts=[]}]}]).",108],["State#state{opts = [#local_config{key = Opt, value = Val} |",73],["[{scheme, <<\"http\">>}, {port, Port}, {opts, []},",72],["R = #sr_group{group_host = {Group, Host}, opts = Opts},",72],["{opts, []}])),",113],["{[], DdbOpts} = opts([], Opts),",66]],"useCount":7827},{"word":"or","context":[["%%%      documentation and/or other materials provided with the distribution.",222],["when (FAffiliation == owner) or (FAffiliation == admin) ->",239],["% Redistribution and use in source and binary forms, with or without",248],["%% Redistribution and use in source and binary forms, with or without",630],["%%% Redistribution and use in source and binary forms, with or without",597],["when (FAffiliation == owner) or",280],["%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",968],["%% purpose with or without fee is hereby granted, provided that the above",1107],["%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1271],["%% stored on disc or distributed for use on other nodes.",1461]],"useCount":46143},{"word":"orelse","context":[["(C =:= $\\s orelse C =:= $\\t orelse C =:= $\\r orelse C =:= $\\n)).",104],["orelse",763],["<<_:O/binary, E, _/binary>> when E =:= $e orelse E =:= $E ->",136],["(C >= $0 andalso C =< $9) orelse",112],["true = Server == Host orelse",108],["(C >= $A andalso C =< $Z) orelse",108],["when ((Block =:= true) orelse (Block =:= false)) ->",105],["(C =:= $\\s orelse C =:= $\\t orelse C =:= $\\r orelse C =:= $\\n)).",104],["case is_user_online(From, StateData) orelse",96],["(C =:= $\\s orelse C =:= $\\t orelse C =:= $\\r orelse C =:= $\\n)).",104]],"useCount":13609},{"word":"org","context":[["%% retrieved online at http://www.erlang.org/.",6836],["\"IDL:omg.org/CosNotification/Property:1.0\",",624],["], [orber_ifr:lookup_id(OE_IFR,\"IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0\")], []),",248],["\"IDL:omg.org/CosNotifyFilter/ConstraintExp:1.0\",",296],["%%% retrieved via the world wide web at http://www.erlang.org/.",491],["<<\"http://jabber.org/protocol/pubsub\">>} ->",341],["{yamerl_str,yamerl_node_str,\"tag:yaml.org,2002:str\",",304],["\"IDL:omg.org/CosNaming/NameComponent:1.0\",",264],["\"IDL:omg.org/CosNotification/EventType:1.0\",",744],["%% retrieved via the world wide web at http://www.erlang.org/.",1056]],"useCount":33217},{"word":"os","context":[["case os:version() of",107],["Now = os:timestamp(),",352],["case os:type() of",2161],["?line case os:type() of",180],["Diff = timer:now_diff(os:timestamp(), StateData#state.mgmt_pending_since),",74],["os:cmd(Cmd).",77],["StartTime = os:timestamp(),",82],["random:seed(os:timestamp()),",87],["T1 = os:timestamp(),",95],["Start = os:timestamp(),",125]],"useCount":9877},{"word":"other","context":[["%%%    documentation and/or other materials provided with the distribution.",109],["%%  documentation and/or other materials provided with the distribution.",102],["%%%      documentation and/or other materials provided with the distribution.",222],["%%% @doc For info and other types, see ssh_sftp(3).",300],["%% stored on disc or distributed for use on other nodes.",1461],["%%       documentation and/or other materials provided with the distribution.",180],["%    documentation and/or other materials provided with the distribution.",128],["[{positions, scalar},{output, other}],",110],["%%   and/or other materials provided with the distribution.",85],["%% documentation and/or other materials provided with the distribution.",90]],"useCount":10943},{"word":"out","context":[["%% this function is called by the new process to find out about",329],["out ->",234],["case queue:out(Q) of",173],["case queue:out(Queue) of",105],["case privacy_check_packet(StateData, From, FJID, Packet, out) of",97],["ask_to_pending(subscribe) -> out;",95],["{_, Reqs_1} = queue:out(Reqs),",89],["JIDs2 = format_and_check_privacy(From, StateData, Packet, JIDs, out),",86],["%% to find out about restart strategy, maximum restart frequency and child",112],["case queue:out(StateData#state.room_queue) of",128]],"useCount":10263},{"word":"output","context":[["Output = [Packet | StateData#state.output],",72],["%% uncomment the following case or escape the output of encode.",70],["% find this output by clicking on the test name, then case name in test/index.html",70],["\"failed with return code ~w and the following output:~n\"",62],["[{positions, scalar},{output, other}],",110],["%% An output test lists provides a list of response bodies and the expected return.",58],["[output,group,set_queue,set_mpls_ttl,",420],["?ERROR_MSG(\"Failed to process an output from \\\"~s\\\": ~p\",",54],["rlx_test_utils:create_random_name(\"relx-output\")]),",163],["[output,copy_ttl_out,copy_ttl_in,set_mpls_ttl,dec_mpls_ttl,",1530]],"useCount":7097},{"word":"owner","context":[["when (FAffiliation == owner) or",280],["%% Entity is not an owner",97],["owner ->",300],["can_change_ra(owner, _FRole,",290],["<<\"http://jabber.org/protocol/muc#owner\">>} ->",124],["Affiliation /= owner ->",88],["{owner, \"Owner\", fun extract_user/1}],",75],["affiliation, owner, _ServiceAf) ->",154],["when (FAffiliation == owner) or (FAffiliation == admin) ->",239],["{result, owner} ->",259]],"useCount":7321},{"word":"p","context":[["p(\"starting with Config: ~p~n\", [Config]),",378],["%% <p>",472],["%% <p>This class is derived (and can use functions) from:",1132],["%% </p>",2218],["%% <p><c>",206],["p(\"end\"),",195],["p(\"manager info: ~p~n\", [mgr_info(ManagerNode)]),",189],["#p{},",374],["p(\"start\"),",317],["p(\"done\"),",205]],"useCount":32096},{"word":"packet","context":[["[binary, {active, false}, {packet, raw},",85],["{packet, raw},",89],["[binary, {active, false}, {packet, raw}]),",244],["[binary, {packet, 0}, {active, false}]),",87],["Connack = packet:gen_connack(0),",299],["{ok, Socket} = packet:do_client_connect(Connect, Connack, []),",248],["{packet, 0},",170],["mochiweb_socket:setopts(Socket, [{packet, raw}]),",74],["ok = packet:expect_packet(Socket, \"suback\", Suback),",144],["{packet, 4},",91]],"useCount":9746},{"word":"params","context":[["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>} ->",806],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>} ->",713],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>}])",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">> ->",632],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>} ->",527],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">> ->",416],["<<\"urn:ietf:params:xml:ns:xmpp-tls\">>} ->",124],["[{<<\"content-type-params\">>,",118],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>}]);",112],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>}])",416]],"useCount":7473},{"word":"parse","context":[["mochiweb_html:parse(D0)),",81],["F = fun iso8601:parse/1,",79],["parse(",105],["-spec parse(Tokens :: list()) -> yecc_ret().",165],["-export([parse/1, parse_and_scan/1, format_error/1]).",197],["parse(Tokens) ->",229],["lists:foldl(fun parse/2,",109],["-export([parse/1]).",119],["lists:foldl( fun parse/2, Conf#config{proto_opts=NewProto},",125],["parse/2,",140]],"useCount":7901},{"word":"password","context":[["%% @doc Check if the user and password can login in server.",139],["{password, \"morot\"},",626],["password = Password,",148],["#xmlel{name = <<\"password\">>,",108],["{password, \"morot\"}]),",91],["password ->",78],["password = \"\"",77],["[#passwd{password = Scram}]",71],["State#state.password, State#state.tls_options),",70],["%% @doc Remove user if the provided password is correct.",70]],"useCount":10212},{"word":"path","context":[["path = Path,",169],["path= <<\"/path\">>, qs= <<>>, pid=self()}),",95],["path= <<\"/path\">>, qs= <<>>, pid=self()}),",95],["case lists:keysearch(<<\"path\">>, 1, XData) of",80],["path,",71],["<<\"path\">>, <<\"\">>)]}]};",80],["%% And returns an absolute path to the configuration file.",69],["%% Input is an absolute or relative path to an ejabberd configuration file.",69],["%% @doc Convert configuration filename to absolute path.",69],["%% Input is an absolute or relative path to an ejabberd config file.",69]],"useCount":11747},{"word":"pid","context":[["pid = Pid})",157],["Pid :: pid().",168],["{ok, pid()} | {error, term()}.",180],["{ok, Pid :: pid()} | ignore | {error, Reason :: term()}).",195],["%%\tPid = pid()",275],["pid = Pid,",293],["Pid :: pid(),",378],["?assertEqual(self(),proplists:get_value(pid,Metadata)),",378],["-spec start_link() -> {ok, pid()}.",413],["Pid = R#route.pid,",126]],"useCount":20571},{"word":"port","context":[["port = Port,",639],["Client = ssl_test_lib:start_client([{node, ServerNode}, {port, Port},",449],["Port :: port() | atom(),",426],["Client = ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",1201],["{port, Port}, {host, Hostname},",384],["Server = ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",1159],["{port, Port},",334],["port,",307],["Server = ssl_test_lib:start_server([{node, ClientNode}, {port, 0},",449],["ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",508]],"useCount":22006},{"word":"presence","context":[["%% Skip Kate's presence",160],["%% Skip Bob's presence",100],["<<\"presence\">>,",84],["send(Config, #presence{}),",345],["#xmlel{name = <<\"presence\">>,",306],["<<\"presence\">> ->",202],["{access_model, presence},",92],["{xmlelement, \"presence\",",95],["Packet = #xmlel{name = <<\"presence\">>,",252],["#xmlel{name = <<\"presence\">>, attrs = Attrs,",96]],"useCount":11588},{"word":"priv_dir","context":[["?line PrivDir = ?config(priv_dir, Config),",331],["PrivDir = ?config(priv_dir, Config),",1565],["PrivDir = proplists:get_value(priv_dir, Config),",632],["UserDir = ?config(priv_dir, Config),",447],["SystemDir = filename:join(?config(priv_dir, Config), system),",306],["?line true = code:add_patha(?config(priv_dir,Config)),",243],["PrivDir = priv_dir(Conf),",242],["?line RootDir = ?config(priv_dir,Config),",232],["PrivDir =  ?config(priv_dir, Config),",232],["?config(priv_dir, Config),",208]],"useCount":9460},{"word":"private","context":[["%% private",215],["KeyFile = filename:join(PrivDir, \"otpCA/private/key.pem\"),",70],["private,",83],["%%% private",84],["%@private",89],["%% private functions",92],["% @private",494],["%%@private",564],["%%% @private",724],["%% @private",31859]],"useCount":37789},{"word":"process","context":[["Ref = erlang:monitor(process, Pid),",525],["%% this function is called by the new process to find out about",329],["%% Purpose: Convert process state when code is changed",431],["erlang:monitor(process, Pid),",330],["%%%   [http://www.process-one.net/]",371],["-author('christophe.romain@process-one.net').",447],["%% Convert process state when code is changed",954],["%% Description: Convert process state when code is changed",1100],["-author('alexey@process-one.net').",2663],["%%% Author  : Alexey Shchepin <alexey@process-one.net>",2669]],"useCount":35397},{"word":"process_flag","context":[["process_flag(trap_exit, false),",406],["?line process_flag(trap_exit, true),",267],["process_flag(trap_exit, false).",224],["OldFl = process_flag(trap_exit, true),",158],["process_flag(trap_exit, OldFl),",158],["process_flag(trap_exit,true),",571],["process_flag(trap_exit, true),",7224],["erlang:process_flag(trap_exit, true),",216],["process_flag(priority, max),",153],["process_flag(priority, high),",191]],"useCount":11925},{"word":"proplist","context":[["{ok, proplists:proplist()} | gui_error:error_result().",36],["{?eh,cth,{'_',pre_end_per_suite,[ct_cth_empty_SUITE,'$proplist',[]]}},",35],["{?eh,cth,{'_',post_init_per_suite,[ct_cth_empty_SUITE,'$proplist','$proplist',[]]}},",35],["{?eh,cth,{'_',pre_init_per_suite,[ct_cth_empty_SUITE,'$proplist',[]]}},",63],["-type config() :: proplists:proplist().",41],["{?eh,cth,{'_',post_end_per_testcase,[test_case,'$proplist',ok,[]]}},",54],["{?eh,cth,{'_',pre_init_per_testcase,[test_case,'$proplist',[]]}},",61],["proplists:proplist().",65],["%%          <li>A non-empty raw proplist will be encoded as an object as long",34],["{?eh,cth,{'_',post_init_per_suite,[ct_cth_empty_SUITE,'$proplist','$proplist',[]]}},",35]],"useCount":6768},{"word":"proplists","context":[["PrivDir = proplists:get_value(priv_dir, Config),",632],["Pid = proplists:get_value(from, Opts),",187],["KeyFile = proplists:get_value(keyfile, ServerOpts),",159],["Data = proplists:get_value(data_dir, Config),",188],["Port = proplists:get_value(port, Opts),",190],["Node = proplists:get_value(node, Opts),",190],["CertFile = proplists:get_value(certfile, ServerOpts),",198],["LibDir1 = proplists:get_value(lib1, Config),",211],["?assertEqual(self(),proplists:get_value(pid,Metadata)),",378],["DataDir = proplists:get_value(data_dir, Config),",514]],"useCount":30149},{"word":"protocol","context":[["<<\"http://jabber.org/protocol/muc#user\">>} ->",248],["<<\"http://jabber.org/protocol/pubsub#event\">>} ->",124],["<<\"http://jabber.org/protocol/muc#owner\">>} ->",124],["<<\"http://jabber.org/protocol/pubsub\">>} ->",341],["<<\"http://jabber.org/protocol/bytestreams\">>} ->",124],["<<\"http://jabber.org/protocol/muc#admin\">>} ->",120],["<<\"http://jabber.org/protocol/compress\">>} ->",217],["<<\"http://jabber.org/protocol/pubsub\">>}]);",160],["{upgrade, protocol, cowboy_websocket}.",129],["{upgrade, protocol, cowboy_rest}.",268]],"useCount":8758},{"word":"public","context":[["ets:new(table, [public, named_table]),",104],["try_test(std_mib_write, [], [{community, \"public\"}]),",86],["%% public api",118],["public,",119],["%% public",151],["Key1c4 = [intCommunityEntry,[4],get(mip),is(\"public\")],",196],["Key1c3 = [intCommunityEntry,[3],get(mip),is(\"public\")],",196],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["%% public API",84],["[named_table, ordered_set, public]),",104]],"useCount":6132},{"word":"pubsub","context":[["true; % pubsub service always allowed",118],["-include(\"pubsub.hrl\").",580],["[#xmlel{name = <<\"pubsub\">>,",464],["<<\"http://jabber.org/protocol/pubsub\">>} ->",341],["<<\"pubsub#\",",175],["<<\"http://jabber.org/protocol/pubsub\">>}]);",160],["<<\"pubsub#\", (atom_to_binary(Var, latin1))/binary>>,",133],["[{<<\"category\">>, <<\"pubsub\">>},",125],["<<\"http://jabber.org/protocol/pubsub#event\">>} ->",124],["attrs = [{<<\"category\">>, <<\"pubsub\">>},",115]],"useCount":8062},{"word":"pubsub_node","context":[["Options = TNode#pubsub_node.options,",439],["NodeId = TNode#pubsub_node.id,",358],["Type = TNode#pubsub_node.type,",483],["Action = fun (#pubsub_node{type = Type, id = NodeId}) ->",150],["Action = fun(#pubsub_node{type = Type, id = NodeId}) ->",153],["Action = fun (#pubsub_node{type = Type, id = Nidx}) ->",158],["Nidx = TNode#pubsub_node.id,",168],["Action = fun (#pubsub_node{id = Idx, type = Type,",100],["Action = fun (#pubsub_node{options = Options, type = Type, id = NodeId}) ->",87],["{RH, RN} = RNode#pubsub_node.nodeid,",116]],"useCount":7265},{"word":"put","context":[["%% put(severity,trc),",1170],["put(aws_config, new(AccessKeyID, SecretAccessKey, Host)),",175],["put(aws_config, new(AccessKeyID, SecretAccessKey)),",180],["%%     put(severity,trc),",195],["%%     put(dbg,true),",195],["%% put(dbg,      true),",198],["%% put(severity, trc),",210],["put(verbosity, ?TEST_VERBOSITY),",389],["put(sname,     \"TEST\"),",435],["%% put(dbg,true),",1182]],"useCount":21703},{"word":"q","context":[["Q = qlc:q(",64],["q = Query,",252],["Q = qlc:q([{XX,YY} ||",56],["q = LQuery,",63],["Q = qlc:q([X || {X} <- ets:table(E),",152],["<<\"Q = qlc:q([{XX,YY} ||",120],["auth = {_, _Auth, AJID}, q = Query, lang = Lang}) ->",104],["q = Query, lang = Lang} =",97],["qlc:q([{XX,YY} ||",96],["Q = qlc:q([{X,Y} ||",120]],"useCount":7360},{"word":"qlc","context":[["Q = qlc:q([{X,Y} ||",120],["-include_lib(\"stdlib/include/qlc.hrl\").",348],["[] = qlc:e(Q),",208],["Q = qlc:q([X || {X} <- ets:table(E),",152],["{qlc,_,",128],["<<\"Q = qlc:q([{XX,YY} ||",120],["{generate,_,{qlc,_,",104],["qlc:q([{XX,YY} ||",96],["{qlc,_,[{generate,_,{list,[1,2]}},",96],["qlc:e(Q)",89]],"useCount":8679},{"word":"query","context":[["{<<\"query\">>,",148],["\"query\",",140],["{xmlel, <<\"query\">>, _attrs, _els}) ->",139],["?DEBUG(\"query: ~p\", [Query]),",166],["sub_el = [#xmlel{name = <<\"query\">>,",186],["sub_el = [{xmlelement, \"query\",",340],["[#xmlel{name = <<\"query\">>,",1088],["{xmlel, <<\"query\">>, _attrs, _els}.",195],["%% @todo We probably need to check that the user doing the query has the right",70],["<<\"query\">>,",92]],"useCount":6562},{"word":"queue","context":[["RoomQueueEmpty = queue:is_empty(StateData#state.room_queue),",93],["{_, Reqs_1} = queue:out(Reqs),",89],["StateData#state{queue = queue:new()}};",86],["case queue:out(Queue) of",105],["StateData#state{queue = queue:new()}};",86],["send_queue(StateData, StateData#state.queue),",86],["case queue:out(StateData#state.room_queue) of",128],["Queue = queue:new(),",84],["case queue:out(Q) of",173],["case queue:is_empty(Q) of",73]],"useCount":6640},{"word":"r","context":[["?assertMatch(\"250-localhost\\r\\n\",  Packet2),",230],["\"\\r\\n\",",236],["$\\r ->",226],["\"Connection: Upgrade\\r\\n\"",221],["socket:send(CSock, \"EHLO somehost.com\\r\\n\"),",220],["\"Upgrade: websocket\\r\\n\"",206],["\"HTTP/1.1 200 OK\\r\\n\"",242],["\"Host: localhost\\r\\n\"",347],["\"\\r\\n\"",378],["\"\\r\\n\"]),",240]],"useCount":31310},{"word":"raise","context":[["erlang:raise(Class, Reason, Stacktrace)",155],["popEventHandler/2,popupMenu/2,popupMenu/3,popupMenu/4,raise/1,refresh/1,",152],["catch _:_ -> erlang:raise(error, Error, Stacktrace)",193],["erlang:raise(error, {yecc_bug, ?CODE_VERSION, Desc},",221],["corba:raise(#'BAD_PARAM'{completion_status=?COMPLETED_NO}).",265],["corba:raise(#'INTERNAL'{completion_status=?COMPLETED_NO})",271],["popupMenu/2,popupMenu/3,popupMenu/4,raise/1,refresh/1,refresh/2,refreshRect/2,",318],["raise(This) -> wxWindow:raise(This).",606],["{reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.",696],["raise(This) -> wxWindow:raise(This).",606]],"useCount":6956},{"word":"read","context":[["%%\t\t  Opt     - An option to read",94],["ssl_record:pending_connection_state(ConnectionStates0, read),",114],["read(DB, Gstkid, Opt) ->",107],["%% Purpose    \t: Take care of a read option",93],["case mnesia:read({privacy, {LUser, LServer}}) of",143],["(read) ->",146],["read ->",157],["case file:open(File, [read]) of",171],["%% Function   \t: read/3",98],["%% table, it should return an empty list, as the affiliation will be read by",96]],"useCount":14092},{"word":"reason","context":[["[#xmlel{name = <<\"reason\">>,",78],["{error, reason()}.",82],["{<<\"reason\">>,",86],["\"   for the reason ~p:~p~n\"",103],["reason = Reason,",115],["%%   The reason for skipping the test case.",130],["{ok, #sslsocket{}} | {error, reason()}.",131],["%%          The reason for skipping this case.",135],["{reason, Reason},",194],["{error, [{reason, Reason}|_]} ->",198]],"useCount":8603},{"word":"receive","context":[["receive after 100 -> ok end,",241],["receive go -> ok end,",247],["receive after infinity -> ok end",250],["receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,",262],["ok = receive",229],["receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,",272],["receive after 1000 -> ok end,",273],["?line receive after 1000 -> ok end,",281],["receive",43724],["?line receive",1373]],"useCount":59311},{"word":"record","context":[["%% record definitions",111],["%% <p>In the default plugin module, the record is unchanged.</p>",96],["-record(socket_state, {sockmod, socket, receiver}).",93],["%% Convert a ActionRequest record into a binary",90],["-record(state, {",2800],["-record(state,",1164],["-record(state, {}).",1115],["-record(state, {socket,",167],["-record(st, {",161],["%% Convert a list of ActionRequest record's into a binary",90]],"useCount":24137},{"word":"recv","context":[["case recv(Socket, Transport, Until) of",101],["case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of",87],["{ok, << 1:1, 0:3, 8:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000),",120],["recv(Handle).",132],["case gen_tcp:recv(Sock, 0) of",88],["= gen_tcp:recv(Socket, 0, 6000),",327],["{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),",214],["{error, closed} = gen_tcp:recv(Socket, 0, 6000),",209],["case gen_tcp:recv(Socket, 0) of",182],["?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),",144]],"useCount":8347},{"word":"ref","context":[["getSelection(#wx_ref{type=ThisT,ref=ThisRef}) ->",121],["getValue(#wx_ref{type=ThisT,ref=ThisRef}) ->",95],["create(#wx_ref{type=ThisT,ref=ThisRef},#wx_ref{type=ParentT,ref=ParentRef}, Options)",108],["[SSHRef,ref(Srv,SSHRef),mod(Cmd)]),",125],["new(#wx_ref{type=ParentT,ref=ParentRef},Id, Options)",152],["new(#wx_ref{type=ParentT,ref=ParentRef}, Options)",192],["ref = Ref,",112],["create(#wx_ref{type=ThisT,ref=ThisRef},#wx_ref{type=ParentT,ref=ParentRef}, Options)",108],["create(#wx_ref{type=ThisT,ref=ThisRef},#wx_ref{type=ParentT,ref=ParentRef},Id, Options)",104],["create(#wx_ref{type=ThisT,ref=ThisRef},#wx_ref{type=ParentT,ref=ParentRef},Id, Options)",104]],"useCount":9277},{"word":"register","context":[["%% Build complete code and final stack/register state.",84],["%% Fetch top module reference, register if unregistered.",166],["ok = couch_config:register(",92],["if _xmlns == <<>>; _xmlns == <<\"jabber:iq:register\">> ->",100],["%% This tests that the race condition detection between whereis/register",80],["register(Name, self()),",101],["register(gen_mod:get_module_proc(Host, ?PROCNAME),",114],["register(?MODULE, self()),",130],["%% Fetch module reference, register if unregistered.",166],["sub_els = [#register{}]}),",73]],"useCount":7517},{"word":"remove_user","context":[["remove_user/3,",164],["remove_user/2,",385],["ejabberd_hooks:add(remove_user, Host,",246],["ejabberd_hooks:delete(remove_user, Host, ?MODULE,",184],["remove_user(User, Server, Password) ->",182],["ejabberd_hooks:add(remove_user, Host, ?MODULE,",153],["ejabberd_hooks:delete(remove_user, Host,",163],["remove_user, 50),",435],["remove_user(User, Server) ->",649],["?MODULE, remove_user, 50),",869]],"useCount":6448},{"word":"reply","context":[["{reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.",696],["{reply, ok, State};",2446],["{reply, Reply, State};",2510],["{reply, ok, State}.",1764],["{reply, Reply, State}.",1674],["%%                                      {reply, Reply, State, Timeout} |",955],["%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |",770],["%%                                   {reply, Reply, State} |",659],["%%                                   {reply, Reply, State, Timeout} |",656],["%%          {reply, Reply, NextStateName, NextStateData, Timeout} |",647]],"useCount":50621},{"word":"request","context":[["{error, 'bad-request'};",109],["%% @doc Receive the body of the HTTP request (defined by Content-Length).",117],["{ok, Client2} = cowboy_client:request(<<\"GET\">>,",381],["Return = erlcloud_ddb_impl:request(",188],["%%            Request = #request{}",186],["{error, 'bad-request'}",155],["#request{us = _US,",93],["%% create request",88],["Request = State#state.request,",87],["%% proxy to get the request and contact a back-end",83]],"useCount":25012},{"word":"response","context":[["%% @doc Start the HTTP response by sending the Code HTTP response and",117],["#pdu{type='get-response', error_status=noError, error_index=0,",108],["%% {ok,{response,",114],["%% @doc Start the HTTP response by sending the Code HTTP response and",117],["?DBG(\"await response\",[]),",401],["{response, nofin, 200, Headers} = gun:await(ConnPid, Ref),",146],["{response, nofin, 200, _} = gun:await(ConnPid, Ref),",143],["{ok, 200, _, Client3} = cowboy_client:response(Client2),",140],["#pdu{type         = 'get-response',",127],["Req, #sip{type = response,",85]],"useCount":9308},{"word":"result","context":[["IQ#iq{type = result,",1054],["default -> {result, Reply};",462],["Res = IQ#iq{type = result,",505],["{result, []};",1196],["{result, false}",525],["#iq{type = result, sub_els = []} =",530],["_ -> {result, Result}",533],["{result, Result};",588],["result = {res, rescode}},",775],["{result,",2139]],"useCount":46604},{"word":"retrieved","context":[["%% Eldap server ID and base DN for the query are both retrieved from the State",17],["%% Save the body so it can be retrieved later",18],["%%% retrieved online at http://www.erlang.org/.",41],["%%          data is to be retrieved.",12],["%% callbacks since the state is retrieved from ?STATE_TABLE from",11],["%%% retrieved via the world wide web at http://www.erlang.org/.",491],["%% retrieved via the world wide web at http://www.erlang.org/.",1056],["%% retrieved online at http://www.erlang.org/.",6836],["%% All output is stored as messages in the message queue until retrieved",11]],"useCount":8493},{"word":"return","context":[["%% The return value is ignored.",1091],["%% any necessary cleaning up. The return value is ignored.",134],["emit(Fd, \"    return oe_error_code;\\n  }\\n\"),",132],["%% implement this function. It can return anything.</p>",113],["{ok, State} = rebar_test_utils:run_and_check(Config, RebarConfig, [\"compile\"], return),",111],["%% return",104],["return(From,ok),",204],["emit(Fd, \"    return oe_error_code;\\n  }\\n\");",224],["emit(Fd, \"      return oe_error_code;\\n    }\\n\");",248],["%% with Reason. The return value is ignored.",854]],"useCount":18824},{"word":"returns","context":[["%% cleaning up. When it returns, the gen_server terminates with Reason.",1079],["%% returns name",1067],["%% returns id",1066],["%% returns type code",1066],["%% necessary cleaning up. When it returns, the gen_server terminates",855],["%% necessary cleaning up. When it returns, the gen_fsm terminates with",97],["%% Special case becase we returns everything after a legal document",84],["%% returns invalid-from|NewElement",62],["%% And returns an absolute path to the configuration file.",69],["%% returns State",60]],"useCount":10501},{"word":"reverse","context":[["lists:reverse(Result);",203],["lists:reverse(Acc);",3874],["{lists:reverse(AccBytes),AccLen};",3635],["{lists:reverse(Acc), Bytes};",2180],["{lists:reverse(Acc),Bytes};",1259],["lists:reverse(Acc).",1215],["{lists:reverse(Acc), Rest};",337],["{ok, lists:reverse(Acc)};",265],["lists:reverse(",214],["reverse(L).",211]],"useCount":46196},{"word":"role","context":[["role, visitor, _ServiceAf) ->",280],["role, participant, _ServiceAf) ->",280],["role = Role,",188],["{<<\"role\">>,",153],["key_exchange(#state{role = client,",118],["#state{role = server,",82],["{<<\"role\">>, SRole},",72],["{<<\"role\">>, SRole}]",72],["items = [#muc_item{role = participant,",75],["{<<\"role\">>, <<\"none\">>}],",75]],"useCount":6640},{"word":"room","context":[["escalus:send(Kate, stanza_muc_enter_room(?config(room, Config), <<\"kate\">>)),",166],["?config(room, Config),",120],["escalus:send(Bob, stanza_muc_enter_room(?config(room, Config), <<\"bob\">>)),",364],["%% Bob joins room",360],["Room = StateData#state.room,",128],["%% Alice joins room",252],["escalus:send(Alice, stanza_muc_enter_room(?config(room, Config), <<\"alice\">>)),",248],["%% Kate joins room",170],["Room = ?config(room, Config),",170],["escalus:send(Bob, stanza_muc_enter_room(?config(room, Config), escalus_utils:get_username(Bob))),",150]],"useCount":11014},{"word":"roster","context":[["Attrs2 = case Item#roster.name of",94],["roster ->",90],["Attrs3 = case Item#roster.subscription of",89],["(AccessModel == roster) and not RosterGroup ->",86],["[#roster{items = [#roster_item{",112],["Item#roster.ask == in ->",115],["case Item2#roster.subscription of",116],["sub_els = [#roster{items = [#roster_item{",196],["#roster{usj = {LUser, LServer, LJID},",260],["Item#roster.ask,",93]],"useCount":10861},{"word":"route","context":[["ejabberd_router:route(StateData#state.jid, From, Err),",306],["ejabberd_router:route(",2103],["ejabberd_router:route(To, From, Err);",1063],["ejabberd_router:route(To, From, Err)",950],["ejabberd_router:route(jlib:jid_replace_resource(StateData#state.jid,",539],["ejabberd_router:route(To, From,",499],["ejabberd_router:route(To,",367],["ejabberd_router:route(To, From, Res);",357],["ejabberd_router:route(To, From, Err),",305],["handle_info({route, From, To, Packet}, State) ->",256]],"useCount":15675},{"word":"rpc","context":[["?line false = rpc:call(MaNode, snmp, int_to_enum,",98],["?line false = rpc:call(MaNode, snmp, enum_to_int,",331],["rpc:call(SaNode, snmp, unregister_subagent, [MA, SA]),",92],["rpc:call(SaNode, snmp, unregister_subagent, [MA, ?klas1]),",98],["rpc:call(Node, ejabberd_admin,",99],["= rpc:call(Victim, erlang, process_info, [P, message_queue_len]),",100],["?line rpc:call(OtherNode,?MODULE,foo,[]),",108],["pong = rpc:call(Victim, net_adm, ping, [Offender]),",160],["?line pong = rpc:call(Victim, net_adm, ping, [Offender]),",240],["ok = rpc:call(Node, release_handler, install_file,",279]],"useCount":13738},{"word":"run","context":[["-export([run/0]).",169],["ejabberd_hooks:run(roster_out_subscription,",207],["[] = run(Config, Ts),",224],["ok = ct_test_support:run(Opts, Config),",247],["%%   Name of the test case that is about to be run.",248],["ejabberd_hooks:run(c2s_auth_result, StateData#state.server,",256],["?line [] = run(Config, Ts),",330],["?line run(Config, Ts),",333],["run() ->",405],["ejabberd_hooks:run(c2s_loop_debug, [{route, From, To, Packet}]),",157]],"useCount":13654},{"word":"s","context":[["s([{[sysLocation, 0], \"new_value\"}]),",129],["?line s(Vbs1),",129],["s(Vbs1),",129],["%% Skip Kate's presence",160],["d(\"await the generator reply(s)\"),",192],["ejabberd_router:route % TODO: s/Nick/\"\"/",215],["s([{NewKeyc5, ?destroy}]),",233],["s([{[fname,0], s, \"test set\"}]),",239],["s([{[fname,0], s, \"test set\"}]),",239],["s=-",289]],"useCount":32004},{"word":"same","context":[["'same' -> 'same';",211],["%% This is exactly the same tests as 'big', but with the",49],["%% Try the same in other table",49],["% same with an updated node:",60],["% same with the node's pids:",60],["%% Would be the same as calling",72],["?line [Value2] = get_req(1, [NOid]), % must not be same",80],["%% <tt>pubsub_state</tt> table. If a plugin stores its data in the same",96],["'same' -> 'same';",211],["Addr = undefined, % Assumed to be on the same host",108]],"useCount":6716},{"word":"seconds","context":[["?line Dog = test_server:timetrap(test_server:seconds(10)),",404],["ct:timetrap({seconds, ?BASE_TIMEOUT_SECONDS * ?SOME_SCALE}),",71],["?line Dog = test_server:timetrap(test_server:seconds(5)),",354],["ct:timetrap({seconds,Timeout}),",185],["timer:sleep(timer:seconds(1)),",182],["ct:timetrap({seconds, 5}),",137],["[{timetrap,{seconds,30}}].",134],["Dog = test_server:timetrap(test_server:seconds(10)),",91],["{report_interval, timer:seconds(10)},",84],["timer:seconds(20) -> ?error(\"Operation timed out\", [])",77]],"useCount":6487},{"word":"see","context":[["%% @see comment/2",180],["%% @see c_bitstr/5",132],["%% @see is_literal/1",133],["%% @see c_cons/2",143],["%% @see get_ann/1",152],["%%% along with RefactorErl.  If not, see <http://plc.inf.elte.hu/erlang/>.",358],["%% @see type/1",193],["%% @see list/2",195],["%%% @doc For info and other types, see ssh_sftp(3).",300],["%% @see clause/3",184]],"useCount":25897},{"word":"select","context":[["?line {'EXIT',{badarg,_}} = (catch ets:select(C2)),",56],["Es = mnesia:select(",196],["SelectFun = fun(MS) -> cb(ets:select(Tab, MS, Limit)) end,",96],["ets:select(ejabberd_modules,",91],["[<<\"select host, node, type, i.nodeid, jid, \"",60],["case catch ets:select(muc_online_users,",51],["{'EXIT',{badarg,_}} = (catch ets:select(C2)),",49],["select/2,",49],["?line {_,C} = ets:select(T,MS,5),",48],["?line {[true,true,true,true,true],_} = ets:select(C),",48]],"useCount":7755},{"word":"self","context":[["Pid = self(),",696],["?line Parent = self(),",300],["{from, self()},  {options, ClientOpts}]),",323],["?assertEqual(self(),proplists:get_value(pid,Metadata)),",378],["{from, self()},",5090],["Self = self(),",3598],["Parent = self(),",1760],["Me = self(),",535],["[self(), Client, Server]),",409],["proc_lib:init_ack({ok, self()}),",382]],"useCount":44400},{"word":"send","context":[["send(Config, #presence{}),",345],["Module:send(",291],["escalus:send(Kate, stanza_muc_enter_room(?config(room, Config), <<\"kate\">>)),",166],["ssl:send(Socket, \"Hello world\"),",186],["socket:send(CSock, \"EHLO somehost.com\\r\\n\"),",220],["escalus:send(Alice, stanza_muc_enter_room(?config(room, Config), <<\"alice\">>)),",248],["ok = gen_tcp:send(Socket, [",272],["\"This is a relatively long body, that we send to the client... \"",660],["escalus:send(Bob, stanza_muc_enter_room(?config(room, Config), <<\"bob\">>)),",364],["send/2,",348]],"useCount":30887},{"word":"send_element","context":[["send_element(StateData,",1635],["send_element(StateData, ?INVALID_XML_ERR),",662],["send_element(StateData, Err),",649],["send_element(",84],["send_element(StateData, Res),",363],["send_element(StateData, El) ->",181],["send_element(StateData, ?SERR_SYSTEM_SHUTDOWN),",142],["send_element(StateData, El),",138],["send_element(StateData, ?INVALID_NS_ERR),",127],["send_element/2,",102]],"useCount":6172},{"word":"seq","context":[["seq ->",186],["Body = list_to_binary(io_lib:format(\"~p\", [lists:seq(1, 100)])),",120],["|| _ <- lists:seq(1, 100)]],",111],["lists:seq(1, N, M))",44],["L = lists:seq(1,10),",45],["A <- lists:seq(1,N),",47],["L2 = [{a,Y} || Y <- lists:seq(1, 10000)],",48],["end, lists:seq(1, 5)),",91],["end || _ <- lists:seq(1,100)],",55],["LNumbers = lists:seq(TargetNumber-PreContext, TargetNumber+PostContext),",67]],"useCount":7721},{"word":"server","context":[["%% Used to start server",696],["StateData#state.server]),",435],["%% Description: Initiates the server",1203],["[StateData#state.myname, StateData#state.server]),",1046],["StateData#state.server,",1322],["%% Description: Starts the server",994],["%% Starts the server",774],["%% Initializes the server",771],["%% gen server export stuff",696],["%% Object server implementation.",696]],"useCount":40533},{"word":"session","context":[["?INFO_MSG(\"(~w) Opened session for ~s\",",85],["tags = [session],",210],["?NS:expect_do_reply('close-session',close,ok),",460],["session,",224],["-include(\"session.hrl\").",141],["Pid = element(2, Session#session.sid),",140],["?INFO_MSG(\"(~w) Forbidden session for ~s\",",85],["?INFO_MSG(\"(~w) Replaced session for ~s\",",85],["session = Session,",84],["%% Make sure session is registered",153]],"useCount":12554},{"word":"set","context":[["#iq{type = set, to = pubsub_jid(Config),",112],["set ->",984],["#iq{type = set,",652],["s([{[fname,0], s, \"test set\"}]),",239],["?line expect(3, [{[fname,0], \"test set\"}]),",215],["{type, set},",154],["% Default timetrap timeout (set in init_per_testcase).",153],["{[fname,0], \"test set\"},",147],["IQType     :: 'get' | 'set',",132],["set/3,",104]],"useCount":25631},{"word":"setSize","context":[["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["setSize(This,X,Y,Width,Height, Options) -> wxWindow:setSize(This,X,Y,Width,Height, Options).",606],["setSize(This,Width,Height) -> wxWindow:setSize(This,Width,Height).",606],["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606],["setSize(This,X,Y,Width,Height) -> wxWindow:setSize(This,X,Y,Width,Height).",606],["setSize(This,Rect) -> wxWindow:setSize(This,Rect).",606],["setSize(This,Rect) -> wxWindow:setSize(This,Rect).",606],["setSize/2,setSize/3,setSize/5,setSize/6,setSizeHints/2,setSizeHints/3,",410],["setSize/2,setSize/3,setSize/5,setSize/6,setSizeHints/2,setSizeHints/3,",410],["setSize(This,Width,Height) -> wxWindow:setSize(This,Width,Height).",606]],"useCount":7314},{"word":"set_cwd","context":[["file:set_cwd(Cwd),",164],["?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",8015],["?line file:set_cwd(?config(data_dir,Config)),",7211],["file:set_cwd(datadir(Config)),",1801],["file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",1603],["%%    ?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",945],["ok = file:set_cwd(OldDir),",254],["ok = file:set_cwd(LatestDir),",224],["%%    file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",189],["%   ?line file:set_cwd(?config(data_dir,Config)),",116]],"useCount":22364},{"word":"setup","context":[["?line setup(Config),",101],["{setup,",1802],["setup() ->",828],["fun setup/0,",508],["setup,",427],["setup(),",298],["{ setup,",173],["setup(Test, Config) ->",118],["{setup, spawn,",111],["fun setup/0, fun teardown/1,",96]],"useCount":7816},{"word":"should","context":[["%% is intended to be the opposite of Module:start/2 and should do",132],["%% variable, but should NOT alter/remove any existing entries.",367],["%% There should be one instance of this function for each possible",95],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%% Note: This directive should only be used in test suites.",581],["%% the default PubSub module. Otherwise, it should return its own affiliation,",96],["%% table, it should return an empty list, as the affiliation will be read by",96],["%%% you should have received as part of this distribution. The terms",110],["%% application:start/[1,2], and should start the processes of the",132]],"useCount":14545},{"word":"show","context":[["wxFrame:show(Frame),",179],["show(This) -> wxDialog:show(This).",97],["show(This) -> wxDialog:show(This).",97],["show(This) -> wxWindow:show(This).",494],["show(This, Options) -> wxWindow:show(This, Options).",494],["show(This, Options) -> wxWindow:show(This, Options).",494],["show(This) -> wxWindow:show(This).",494],["wxWindow:show(Frame),",121],["show/1,show/2,thaw/1,transferDataFromWindow/1,transferDataToWindow/1,",344],["show/1,show/2,thaw/1,transferDataFromWindow/1,transferDataToWindow/1,",344]],"useCount":6185},{"word":"shutdown","context":[["?shutdown(Node)",170],["?shutdown(no_node)",149],["?shutdown(Node);",123],["-spec(terminate(Reason :: (normal | shutdown | {shutdown, term()} | term()),",99],["-spec(terminate(Reason :: (normal | shutdown | {shutdown, term()} | term()),",99],["exit(Pid, shutdown),",196],["{stop, shutdown, State};",220],["%%%              Reason = normal | shutdown | Term terminate(State) is called",232],["exit(shutdown);",275],["shutdown ->",384]],"useCount":8657},{"word":"single","context":[["[{<<\"type\">>, <<\"jid-single\">>},",96],["{\"type\", \"text-single\"},",64],["?XFIELD(<<\"text-single\">>, <<\"Path to File\">>,",64],["% will be sent. Note that these are all-caps and are atoms. (single-quoted)",55],["\"Start a single user process, \"",66],["\\\"S\\\": \\\"I want to update multiple items in a single API call. What's the best way to do that?\\\"",72],["[{<<\"type\">>, <<\"text-single\">>},",79],["?XFIELD(<<\"text-single\">>, Label, Var, Val)).",80],["{<<\"type\">>, <<\"text-single\">>},",163],["[{<<\"type\">>, <<\"list-single\">>},",192]],"useCount":6615},{"word":"size","context":[["Sz = size(Bin0),",117],["| {'size', {W::integer(), H::integer()}}",264],["({size, {SizeW,SizeH}}, Acc) -> [<<2:32/?UI,SizeW:32/?UI,SizeH:32/?UI,0:32>>|Acc];",390],["Size = 1 + size(Data),",186],["| {size, {W::integer(), H::integer()}}",352],["_ when size(Extensions) >= 1,element(1,Extensions) == 1 ->",348],["({size, {SizeW,SizeH}}, Acc) -> [<<3:32/?UI,SizeW:32/?UI,SizeH:32/?UI,0:32>>|Acc];",292],["0 = ets:info(T,size),",121],["_ when size(Extensions) >= 2,element(2,Extensions) == 1 ->",156],["font-size: 10pt;",177]],"useCount":20223},{"word":"skip","context":[["{skip, \"Crypto did not start\"}",198],["%% Function: all() -> GroupsAndTestCases | {skip,Reason}",199],["skip ->",208],["skip(This, Options) -> wxEvent:skip(This, Options).",275],["skip(This, Options) -> wxEvent:skip(This, Options).",275],["skip(This) -> wxEvent:skip(This).",275],["skip",275],["skip(This) -> wxEvent:skip(This).",275],["skip;",420],["%%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}",814]],"useCount":9786},{"word":"sleep","context":[["timer:sleep(50),",361],["ct:sleep(?SLEEP),",384],["{sleep, 1000},",488],["timer:sleep(100),",1776],["timer:sleep(1000),",1661],["timer:sleep(500),",869],["sleep(1000),",820],["timer:sleep(2000),",617],["timer:sleep(5000),",574],["timer:sleep(10),",456]],"useCount":17593},{"word":"so","context":[["% on the produced body in a GET and ensure that it is so encoded. One useful setting is to",55],["%% Subid supplied, so use that.",61],["%% If so, return true to kick the participant.",64],["%% in-line. mochijson2 does not protect you from this, so",68],["%% compare unequal as erlang terms, so we need to carefully recurse",97],["%%% furnished to do so, subject to the following conditions:",982],["%% furnished to do so, subject to the following conditions:",1401],["% The Result is ignored, so any effect of this function must be by returning a modified ReqData",55],["%% Wait for a while so we are sure that all events have been delivered as far",55],["% and a single one cannot be automatically chosen, so a 300 Multiple Choices will be sent instead of a 200.",55]],"useCount":9202},{"word":"socket","context":[["socket:active_once(CSock),",1360],["receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,",262],["socket = Socket,",722],["[StateData#state.socket,",670],["socket,",327],["socket:active_once(Socket),",283],["Socket = StateData#state.socket,",282],["receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,",272],["(StateData#state.sockmod):send_xml(StateData#state.socket,",224],["Socket :: socket(),",244]],"useCount":23186},{"word":"some","context":[["i(\"wait some time before starting the MG simulation\"),",239],["%%   the Constraint must then have some information of the",50],["%%   it's possible not to define some function at all",60],["_ -> % some strange constraint that we don't support yet",53],["i(\"wait some time before starting the MG simulator\"),",204],["i(\"wait some time before starting the MGC simulation\"),",204],["%% Set some paths",104],["<<\"some\">>,",59],["<<\"some.conference.org\">>,",58],["%% This function will crash if finds some error in the configuration file.",69]],"useCount":6039},{"word":"sort","context":[["SUsers = lists:sort([{S, U} || {U, S} <- Users]),",144],["lists:sort(L);",72],["lists:sort(io:getopts(RFile)),",72],["NameBins = lists:sort(",65],["true = lists:sort(ets:tab2list(T)) =:=",60],["histogram(lists:sort(Values), Integral, 0, 0, []).",58],["lists:sort(",496],["%% Use the sledgehammer and sort property lists.",97],["lists:sort(Ack).",80],["STables = lists:sort(Tables),",72]],"useCount":8859},{"word":"spawn","context":[["Pid = spawn(Fun),",73],["spawn(A).",71],["SendLoop = spawn(?MODULE, send_loop, [State]),",74],["{setup, spawn,",111],["{spawn,",144],["spawn(?MODULE, do_connect, [IP, Port, [{active, false}]]),",160],["Pid = spawn(fun() ->",254],["spawn(fun () ->",308],["spawn(",344],["spawn(fun() ->",1616]],"useCount":9475},{"word":"spec","context":[["%% @spec terminate(Reason, State) -> void()",960],["%% @spec handle_info(Info, State) -> {noreply, State} |",894],["%% @spec init(Args) -> {ok, State} |",888],["%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}",817],["%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}",1010],["%% @spec handle_cast(Msg, State) -> {noreply, State} |",783],["%% @spec handle_call(Request, From, State) ->",659],["-spec start_link() -> {ok, pid()}.",413],["%% @spec",639],["-spec init(rebar_state:t()) -> {ok, rebar_state:t()}.",433]],"useCount":99843},{"word":"sql_query","context":[["{updated, 1} = odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++",126],["odbc:sql_query(Ref,  \"CREATE TABLE \" ++ Table ++",349],["ejabberd_odbc:sql_query(",1352],["ejabberd_odbc:sql_query(LServer,",849],["case catch ejabberd_odbc:sql_query(",122],["odbc:sql_query(Ref, \"SELECT * FROM \" ++ Table),",197],["case catch ejabberd_odbc:sql_query(LServer,",208],["odbc:sql_query(Ref,\"SELECT FIELD FROM \" ++ Table),",261],["odbc:sql_query(Ref, \"INSERT INTO \" ++ Table ++\" VALUES(\" ++",273],["odbc:sql_query(Ref,",348]],"useCount":6267},{"word":"ssh","context":[["service = \"ssh-connection\",",134],["ssh:stop(),",163],["ssh:stop_daemon(Pid).",411],["ssh:stop_daemon(Pid),",298],["-include(\"ssh.hrl\").",209],["ssh:close(ConnectionRef),",209],["ssh:start(),",194],["{ok, Ssh#ssh{encrypt_keys = K,",126],["ssh:connect(Host, Port, [{silently_accept_hosts, true},",115],["{ok, Ssh#ssh{decrypt_keys = K,",90]],"useCount":8303},{"word":"ssl","context":[["ssl:start(),",488],["ssl:stop(),",288],["ssl ->",232],["application:start(ssl),",216],["ssl:send(Socket, \"Hello world\"),",186],["ssl:setopts(Socket, [{active, once}]),",167],["Ssl = State#client_state.ssl,",132],["{ssl, Socket, \"H\"} ->",109],["application:stop(ssl),",117],["application:load(ssl),",126]],"useCount":16681},{"word":"ssl_test_lib","context":[["Server = ssl_test_lib:start_server([{node, ServerNode}, {port, 0},",1159],["Client = ssl_test_lib:start_client([{node, ClientNode}, {port, Port},",1201],["ssl_test_lib:close(Server),",1947],["ssl_test_lib:close(Client).",1435],["{mfa, {ssl_test_lib, no_result, []}},",586],["ClientOpts = ssl_test_lib:ssl_options(client_opts, Config),",807],["ServerOpts = ssl_test_lib:ssl_options(server_opts, Config),",878],["ssl_test_lib:check_result(Server, ok, Client, ok),",938],["Port = ssl_test_lib:inet_port(Server),",2272],["{ClientNode, ServerNode, Hostname} = ssl_test_lib:run_where(Config),",2430]],"useCount":26007},{"word":"start","context":[["start(Host, Opts) ->",1215],["start() ->",5759],["-export([start/2, stop/1]).",2350],["start(_StartType, _StartArgs) ->",2118],["-export([start/0]).",989],["-export([start/2,",809],["%% Used to start server",696],["start(_Type, _Args) ->",576],["start/2,",539],["ssl:start(),",488]],"useCount":60532},{"word":"start_link","context":[["%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}",908],["start_link() ->",9604],["-export([start_link/0]).",4330],["supervisor:start_link({local, ?MODULE}, ?MODULE, []).",2753],["gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).",1637],["-export([start_link/1]).",1223],["supervisor:start_link({local, ?SERVER}, ?MODULE, []).",877],["gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).",1087],["-define(CHILD(I, Type), {I, {I, start_link, []}, permanent, 5000, Type, [I]}).",1056],["-export([start_link/0,",956]],"useCount":53128},{"word":"state","context":[["{ok, #state{}}.",1689],["StateData#state.server,",1322],["-record(state,",1164],["-record(state, {}).",1115],["%% Description: Convert process state when code is changed",1100],["[StateData#state.myname, StateData#state.server]),",1046],["[StateData#state.myname, StateData#state.server]),",1046],["StateData#state.user,",984],["%% Convert process state when code is changed",954],["-record(state, {",2800]],"useCount":172140},{"word":"status","context":[["#adhoc_response{status = canceled});",121],["status      = Status,",129],["#adhoc_response{status = executing,",173],["status = Status,",202],["?assertEqual({200, \"OK\"}, status(Response)),",209],["status() ->",211],["[#xmlel{name = <<\"status\">>,",234],["%% A status code has been generated!",114],["status/1,",113],["<<\"status\">>,",103]],"useCount":14127},{"word":"stop","context":[["{stop, normal, StateData};",4491],["stop(Host) ->",1509],["{stop, normal, ok, State};",1581],["%%                                      {stop, Reason, State}",1836],["-export([start/2, stop/1]).",2350],["stop(_State) ->",3178],["{stop, normal, State};",3432],["stop() ->",3550],["stop ->",1482],["%%          {stop, Reason, State}            (terminate/2 is called)",1468]],"useCount":95900},{"word":"stream","context":[["-define(STREAM_TRAILER, <<\"</stream:stream>\">>).",119],["#xmlel{name = <<\"stream:features\">>,",193],["-define(STREAM_TRAILER, <<\"</stream:stream>\">>).",119],["?DEBUG(\"Send XML on stream = ~p\", [Text]),",111],["<<\"<?xml version='1.0'?><stream:stream \"",96],["<<\"<?xml version='1.0'?><stream:stream \"",96],["\"xmlns:stream='http://etherx.jabber.org/streams' \"",85],["{<<\"xmlns:stream\">>,",81],["%% multipple docs on a stream.",84],["\"application/octet-stream\";",71]],"useCount":8121},{"word":"string","context":[["%%             Acc = string()",350],["String :: string(),",277],["string)},",278],["%%     Server = string()",310],["{struct, [{1, string},",349],["-spec do(rebar_state:t()) -> {ok, rebar_state:t()} | {error, string()}.",365],["string),",401],["%% Input:    Rest = string() | binary()",500],["{string,[]},",528],["%% Parameters: Rest = string() | binary()",1050]],"useCount":76319},{"word":"struct","context":[["{struct, [{1, i32},",88],["V = make_object({struct, lists:reverse(Acc)}, S1),",142],["{struct,",220],["{struct, [",236],["%%         [{struct,",114],["{struct, []}",339],["{struct, [{1, string},",349],["{struct, [{1, string}]}",110],["{struct, []};",110],["{struct, []}.",91]],"useCount":8003},{"word":"sub_el","context":[["sub_el =",1489],["IQ#iq{type = result, sub_el = []};",128],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_NOT_ALLOWED]}.",123],["sub_el = SubEl} =",111],["sub_el = [#xmlel{name = <<\"query\">>,",186],["IQ#iq{type = error, sub_el = [SubEl, Error]}",322],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_BAD_REQUEST]}",105],["sub_el = [{xmlelement,",141],["sub_el = [{xmlelement, \"query\",",340],["IQ#iq{type = error, sub_el = [SubEl, ?ERR_NOT_ALLOWED]};",438]],"useCount":9352},{"word":"sub_els","context":[["sub_els = [#roster{items = [#roster_item{",196],["#iq{type = result, id = I1, sub_els = []}),",84],["sub_els =",714],["#iq{type = result, sub_els = []} =",530],["%% BUG: We should not receive any sub_els!",88],["sub_els = [#vcard_xupdate{},",152],["sub_els = [#privacy{",112],["sub_els = [#muc_user{",108],["body = [Txt], sub_els = []},",96],["sub_els = [#carbons_private{}]}),",96]],"useCount":6200},{"word":"subscribe","context":[["\"subscribe\",",72],["{subscribe, true},",228],["<<\"subscribe\">> ->",182],["<<\"server\">>, <<\"subscribe\">>, <<\"type\">>],",166],["mnesia:subscribe(system),",130],["\"askmessage\", \"server\", \"subscribe\", \"type\"],",105],["ask_to_pending(subscribe) -> out;",95],["subscribe),",85],["subscribe/2,",79],["{<<\"type\">>, <<\"subscribe\">>}],",77]],"useCount":6699},{"word":"subscription","context":[["<<\"subscription\">>, <<\"ask\">>, <<\"askmessage\">>,",168],["[#xmlel{name = <<\"subscription\">>,",248],["{<<\"subscription\">>,",229],["I1#listitem{type = subscription,",160],["[{xmlelement, \"subscription\",",174],["<<\"subscription\">>,",178],["subscription ->",127],["%% Entity is subscribed but specifies an invalid subscription ID",124],["%% Entity has multiple subscriptions to the node but does not specify a subscription ID",124],["case Item2#roster.subscription of",116]],"useCount":10654},{"word":"suite","context":[["escalus:suite().",166],["-export([suite/0,",186],["-export([all/0, suite/0,groups/0,init_per_group/2,end_per_group/2,",212],["%% Function: suite() -> Info",240],["%% Description: Cleanup after the whole suite",110],["all(suite) ->",103],["-export([all/0, suite/0,groups/0,init_per_suite/1, end_per_suite/1,",1398],["suite() ->",1810],["suite() -> [{ct_hooks,[ts_install_cth]}].",2015],["init = ?config(suite,Config),",790]],"useCount":22655},{"word":"supervisor","context":[["%% Starts the supervisor",334],["supervisor:terminate_child(ejabberd_sup, Proc),",363],["%% supervisor callbacks",457],["%% Helper macro for declaring children of supervisor",1257],["supervisor:delete_child(ejabberd_sup, Proc).",499],["supervisor:start_child(ejabberd_sup, ChildSpec).",545],["supervisor:start_link({local, ?SERVER}, ?MODULE, []).",877],["supervisor,",884],["-behaviour(supervisor).",5514],["supervisor:start_link({local, ?MODULE}, ?MODULE, []).",2753]],"useCount":24044},{"word":"syntaxTree","context":[["%%\tName = syntaxTree()",66],["%% data(Node) = [syntaxTree()]",36],["%%                {ok, syntaxTree()} |",38],["%% data(Node) = syntaxTree()",51],["%%\tBody = [syntaxTree()]",60],["erl_syntax:syntaxTree().",70],["%%       Forms = [erl_syntax:syntaxTree()]",72],["syntaxTree().",79],["%%\tClauses = [syntaxTree()]",124],["%%           syntaxTree()",173]],"useCount":8354},{"word":"t","context":[["%% and can be changed without notice. It can't be used for comparsion",1461],["t() ->",941],["?t:timetrap_cancel(Dog),",452],["-spec init(rebar_state:t()) -> {ok, rebar_state:t()}.",433],["-spec init(rebar_state:t()) -> {ok, rebar_state:t()}.",433],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["-export([t/0]).",408],["%%% allout-layout: t",401],["-spec do(rebar_state:t()) -> {ok, rebar_state:t()} | {error, string()}.",365],["-spec do(rebar_state:t()) -> {ok, rebar_state:t()} | {error, string()}.",365]],"useCount":39002},{"word":"table","context":[["[?XAE(<<\"table\">>, [],",104],["%% <tt>pubsub_state</tt> table. If a plugin stores its data in the same",96],["%% table, it should return an empty list, as the affiliation will be read by",96],["%% <tt>pubsub_state</tt> table.</p>",96],["ets:new(table, [public, named_table]),",104],["table(",107],["%% </table>",109],["exit({'Type not compatible with table constraint',Reason1});",121],["table),",148],["Q = qlc:q([X || {X} <- ets:table(E),",152]],"useCount":14566},{"word":"tag","context":[["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).",1331],["?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).",732],["?RT_BER:decode_integer(Bytes3,{0,65535},[{tag,128,1,'IMPLICIT',0}], mandatory);",174],["{yamerl_str,yamerl_node_str,\"tag:yaml.org,2002:str\",",304],["{Term1,Bytes3,Rb2} = ?RT_BER:decode_octet_string(Bytes2,4,[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),",222],["TempNewDef#newt{tag=",212],["{{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand),",2063],["%% decode tag and length",11784],["{Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,4294967295},[{tag,128,0,'IMPLICIT',0}], mandatory),",135],["{Term1,Bytes3,Rb2} = 'dec_TerminationIDList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),",132]],"useCount":33337},{"word":"tc_done","context":[["{?eh,tc_done,",1000],["{?eh,tc_done,{t22_SUITE,end_per_suite,ok}},",111],["[{?eh,tc_done,{repeat_1_SUITE,",330],["{?eh,tc_done,{repeat_1_SUITE,tc_ok_1,ok}},",200],["{?eh,tc_done,{t12_SUITE,end_per_suite,ok}},",117],["{?eh,tc_done,{t12_SUITE,init_per_suite,ok}},",117],["{?eh,tc_done,{t22_SUITE,init_per_suite,ok}},",114],["{?eh,tc_done,{repeat_1_SUITE,",390],["{?eh,tc_done,{t11_SUITE,end_per_suite,ok}},",96],["{?eh,tc_done,{t11_SUITE,init_per_suite,ok}},",96]],"useCount":6239},{"word":"td","context":[["[?XCT(<<\"td\">>, <<\"Online Users:\">>),",78],["?XE(<<\"td\">>,",1145],["%%          <td></td>",78],["?XAE(<<\"td\">>, [{<<\"class\">>, <<\"valign\">>}],",80],["[?X(\"td\"),",82],["?XAC(\"td\", [{\"class\", \"alignright\"}],",108],["?XAC(<<\"td\">>,",124],["[?XCT(<<\"td\">>,",182],["?XAC(<<\"td\">>, [{<<\"class\">>, <<\"alignright\">>}],",182],["[?XE(<<\"td\">>,",203]],"useCount":20199},{"word":"telltype","context":[["'dec_IP4Address'(Bytes2,telltype)};",108],["{Term2,Bytes4} = 'dec_Value'(Bytes3,telltype),",108],["'dec_AmmRequest'(Bytes2,telltype)};",162],["'dec_ErrorDescriptor'(Bytes1,telltype)};",162],["{Term,Remain} = 'dec_IndAudPropertyParm'(Bytes,telltype),",171],["{Term1,Bytes2} = 'dec_TerminationIDList'(Bytes1,telltype),",180],["'dec_AmmsReply'(Bytes2,telltype)};",216],["{Term1,Bytes3} = 'dec_TerminationIDList'(Bytes2,telltype),",216],["{Term,Remain} = 'dec_EventParameter'(Bytes,telltype),",216],["{Term,Remain} = 'dec_PropertyParm'(Bytes,telltype),",252]],"useCount":15711},{"word":"term","context":[["term().",319],["{stop, Reason :: term(), NewState :: #state{}}).",274],["T :: term().",337],["Term :: term().",390],["Key :: term(),",478],["%%%      Reason = term()",552],["{error, term()}.",575],["ok | {error, term()}.",627],["Reason :: term().",867],["%% Reason = term()",1648]],"useCount":44929},{"word":"terminate","context":[["%%          {stop, Reason, State}            (terminate/2 is called)",1468],["terminate/2,",2426],["terminate/2, code_change/3]).",3309],["terminate(Reason, State) ->",1219],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% @spec terminate(Reason, State) -> void()",960],["%% Function: terminate(Reason, State) -> void()",963],["terminate(_Reason, _State) ->",5811],["-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",1005],["terminate(_Reason, State) ->",1051]],"useCount":42937},{"word":"test","context":[["test() ->",1578],["NewKeyc3 = [intCommunityEntry,[3],get(mip),is(\"test\")],",196],["-export([test/0]).",658],["%%   A list of key/value pairs, holding the test case configuration.",795],["%% Note: This directive should only be used in test suites.",581],["\"test\",",276],["%%   Name of the test case that is about to be run.",248],["s([{[fname,0], s, \"test set\"}]),",239],["?line expect(3, [{[fname,0], \"test set\"}]),",215],["{test,I,L,Args};",212]],"useCount":35082},{"word":"test_server","context":[["?line Dog = test_server:timetrap(test_server:seconds(10)),",404],["test_server:sleep(1000),",181],["?line Dog=test_server:timetrap(?default_timeout),",213],["?line Dog = test_server:timetrap(test_server:seconds(5)),",354],["?line Dog = test_server:timetrap(test_server:seconds(5)),",354],["test_server:timetrap_cancel(Dog),",979],["?line test_server:timetrap_cancel(Dog),",1199],["-include_lib(\"test_server/include/test_server.hrl\").",1574],["-include_lib(\"test_server/include/test_server.hrl\").",1574],["?line Dog = test_server:timetrap(test_server:seconds(10)),",404]],"useCount":14492},{"word":"tests","context":[["tests() ->",88],["%% EUnit tests",350],["%% tests",147],["%% instance, the tests need to be performed on a separate node (or",139],["%% 2 tests (ct:run_test + script_start) is default",126],["%% This tests that the race condition detection between whereis/register",80],["%% io:format(\"~p tests passed~n\", [N-1]),",75],["tests = [#'CosNotification_Property'",70],["%%%_* Unit tests ===============================================================",67],["%% Unit tests",60]],"useCount":6541},{"word":"text","context":[["body = [#text{data = Subject}]}),",117],["{<<\"type\">>, <<\"text-single\">>},",163],["\"text/html\";",129],["text-align: center;",124],["{text, Txt} -> Txt;",123],["case catch erl_scan:token_info(Token, text) of",123],["{text, Str} = erl_scan:token_info(Token, text),",123],["{text, Str} = erl_scan:token_info(Token, text),",123],["Attributes = [{key, \"Key\", text},",112],["text ->",111]],"useCount":22650},{"word":"that","context":[["%% purpose with or without fee is hereby granted, provided that the above",1107],["\"This is a relatively long body, that we send to the client... \"",660],["%%  We make no guarantees that this code is fit for any purpose.",423],["%%   Name of the test case that is about to be run.",248],["%%% purpose with or without fee is hereby granted, provided that the above",128],["%% Create two rows, check that they are get-nexted in correct order.",147],["%% Ensure that we access the intended Mnesia",150],["%% include directives. yecc will otherwise assume that an old",185],["%% When using the {includefile, Includefile} option, make sure that",185],["% that the following conditions are met:",103]],"useCount":39636},{"word":"the","context":[["%% terminate. It should be the opposite of Module:init/1 and do any",906],["%%% furnished to do so, subject to the following conditions:",982],["%% Description: Starts the server",994],["%% retrieved via the world wide web at http://www.erlang.org/.",1056],["%% terminate. It should be the opposite of Module:init/1 and do any necessary",1076],["%% cleaning up. When it returns, the gen_server terminates with Reason.",1079],["%% purpose with or without fee is hereby granted, provided that the above",1107],["%% The Initial Developer of the Original Code is Ericsson Utvecklings AB.",1133],["%% furnished to do so, subject to the following conditions:",1401],["%% Description: Initiates the server",1203]],"useCount":269922},{"word":"then","context":[["% If this returns true, then it is assumed that multiple representations of the response are possible",55],["%% then",347],["%% Open the server to listening. We then need to send data for the",83],["%% if you do insert directly into HTML then you need to",70],["% find this output by clicking on the test name, then case name in test/index.html",70],["%% client did not specify a limit using RSM then the server should return",57],["% return tuples, then a 406 Not Acceptable will be sent.",56],["% then this should return true.",55],["% processing, then this function should return true. If it does return true,",55],["% then",192]],"useCount":6933},{"word":"this","context":[["%% @doc Destroys this object, do not use object again",1017],["%% Feel free to use, reuse and abuse the code in this file.",437],["%%  We make no guarantees that this code is fit for any purpose.",423],["%% this function is called by the new process to find out about",329],["%%%  link the code of this program with any library released under",236],["% The parser generator will insert appropriate declarations before this line.%",197],["%% distributed with this work for additional information",142],["%%          The reason for skipping this case.",135],["%% design principles as a supervision tree, this means starting the",134],["%% implement this function. It can return anything.</p>",113]],"useCount":29444},{"word":"throw","context":[["throw({error, {invalid_messageBody, Body}})",268],["throw({error, {invalid_transactions, Trans}})",250],["throw(Error)",815],["throw(syntax_error)",474],["throw:Error ->",391],["throw({asn1_error,{get_line(hd(Tokens)),get(asn1_module),",344],["throw(submitted);",275],["throw({asn1_error,{get_line(H),get(asn1_module),",264],["throw({error, {invalid_Message, Mess}})",258],["throw(error)",234]],"useCount":29887},{"word":"time","context":[["Time :: time(),",80],["%%% @version {@vsn}, {@date} {@time}",455],["i(\"wait some time before starting the MG simulation\"),",239],["i(\"wait some time before starting the MG simulator\"),",204],["i(\"wait some time before starting the MGC simulation\"),",204],["%% @version {@vsn}, {@date} {@time}",182],["%% attribute time(2) with type IA5String",132],["time,",108],["[{\"time\",tk_ulonglong},",96],["%%% Run-time functions.",85]],"useCount":9878},{"word":"timeout","context":[["{error, timeout};",294],["{noreply, NewState :: #state{}, timeout() | hibernate} |",320],["Timeout :: timeout(),",356],["handle_info(timeout, State) ->",433],["timeout ->",520],["{error, timeout} ->",821],["{error, timeout}",916],["exit(timeout)",291],["timeout",944],["10000 -> ct:fail(\"timeout ~p:~p\",[?MODULE,?LINE])",216]],"useCount":26956},{"word":"timer","context":[["timer:sleep(1),",282],["timer:sleep(200),",321],["timer:sleep(50),",361],["cancel_timer(StateData#state.timer),",378],["timer:sleep(10),",456],["timer:sleep(5000),",574],["timer:sleep(2000),",617],["timer:sleep(500),",869],["timer:sleep(1000),",1661],["timer:sleep(100),",1776]],"useCount":17959},{"word":"timestamp","context":[["Diff = timer:now_diff(os:timestamp(), StateData#state.mgmt_pending_since),",74],["Start = os:timestamp(),",125],["Now = nksip_lib:timestamp(),",102],["timestamp = TimeStamp,",132],["T1 = os:timestamp(),",95],["random:seed(os:timestamp()),",87],["StartTime = os:timestamp(),",82],["timestamp = Timestamp,",79],["timestamp() ->",399],["Now = os:timestamp(),",352]],"useCount":7334},{"word":"to","context":[["%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1271],["%% furnished to do so, subject to the following conditions:",1401],["%% This function is called by a gen_server when it is about to",863],["%% furnished to do so, subject to the following conditions:",1401],["%%% furnished to do so, subject to the following conditions:",982],["%%% furnished to do so, subject to the following conditions:",982],["%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",968],["%% Used to start server",696],["%% Call to implementation init",696],["%% Description: This function is called by a gen_server when it is about to",931]],"useCount":135956},{"word":"tokens","context":[["_ -> str:tokens(SNode, <<\"!\">>)",46],["Ranges = string:tokens(RangeString, \",\"),",46],["[_,Host] = string:tokens(atom_to_list(node()), \"@\"),",52],["case string:tokens(R, \"-\") of",56],["case string:tokens(PackageItem, [$/]) of",56],["string:tokens(",59],["case string:tokens(binary_to_list(Option), ?COMMAND_DELIMITER) of",63],["[FromUser | _] = string:tokens(From, \"!\"),",87],["[FromUser | _] = str:tokens(From, <<\"!\">>),",104],["string:strip(lists:last(string:tokens(Hosts, \",\")))",125]],"useCount":8109},{"word":"tr","context":[["[?XE(<<\"tr\">>,",520],["?XE(\"tr\",",346],["%%  </tr><tr>",308],["%%  </tr><tr>",308],["%%      </tr>",305],["%%      <tr>",305],["[?XE(\"tr\",",263],["{tr, [],",136],["%%%   <tr>",127],["?XE(<<\"tr\">>,",919]],"useCount":7469},{"word":"trace","context":[["SymStoreVerbosity    = {snmp_symbolic_store_verbosity, trace},",111],["-define(FSMOPTS, [{debug, [trace]}]).",380],["{config, [{verbosity, trace}, {dir, ConfDir}, {db_dir, DbDir}]}],",272],["{note_store, [{verbosity, trace}]},",168],["{net_if, [{verbosity, trace}]},",149],["snmpa:verbosity(MA,trace),",126],["Opts = [{server, [{verbosity, trace}]},",126],["put(verbosity,trace),",118],["MibsVerbosity        = {snmp_mibserver_verbosity,      trace},",111],["MasterAgentVerbosity = {snmp_master_agent_verbosity,   trace},",111]],"useCount":7748},{"word":"transaction","context":[["mnesia:transaction(F)",182],["mnesia:transaction(",172],["mnesia:transaction(F2),",199],["mnesia:transaction(F1),",199],["mnesia:transaction(F),",264],["mnesia:transaction(fun() ->",304],["case mnesia:transaction(F) of",786],["mnesia:transaction(F);",808],["mnesia:transaction(F).",865],["case transaction(Host, Node, Action, sync_dirty) of",1546]],"useCount":12605},{"word":"translate","context":[["translate:translate(Lang,",1224],["translate:translate(",532],["translate:translate(Lang,",1224],["{\"label\", translate:translate(Lang, Label)},",136],["{\"label\", translate:translate(Lang, Label)},",136],["<<(translate:translate(Lang,",268],["<<(translate:translate(Lang,",268],["{<<\"label\">>, translate:translate(Lang, Label)},",335],["{<<\"label\">>, translate:translate(Lang, Label)},",335],["translate:translate(",532]],"useCount":9887},{"word":"trap_exit","context":[["process_flag(trap_exit, Flag),",139],["Flag = process_flag(trap_exit, true),",112],["OldFl = process_flag(trap_exit, true),",158],["process_flag(trap_exit, OldFl),",158],["erlang:process_flag(trap_exit, true),",216],["process_flag(trap_exit, false).",224],["?line process_flag(trap_exit, true),",267],["process_flag(trap_exit, false),",406],["process_flag(trap_exit,true),",571],["process_flag(trap_exit, true),",7224]],"useCount":10981},{"word":"tree","context":[["#tree{attr = Attr} ->",135],["%% @doc <p>Virtual node tree does not handle parent/child. Child list is empty.</p>",56],["tree(Rest, append_stack_child(T, S));",60],["%% upgrade vs. new tree",63],["%% OTP design principles as a supervision tree, this means starting the",64],["%%% <p>PubSub node tree plugins are using the {@link gen_nodetree} behaviour.</p>",68],["%% @doc <p>node tree plugin call.</p>",70],["NodeTree = mod_pubsub:tree(Host),",78],["%% design principles as a supervision tree, this means starting the",134],["%% top supervisor of the tree.",199]],"useCount":6290},{"word":"true","context":[["true -> true;",1691],["true ->",157409],["true;",31195],["process_flag(trap_exit, true),",7224],["true",6531],["true.",4023],["true -> ok",2944],["true -> ok;",2185],["_ -> true",2041],["true -> true;",1691]],"useCount":425683},{"word":"try","context":[["try",18769],["try odbc_queries:get_password(LServer, Username) of",76],["Result = try",89],["try begin",98],["p(\"try starting manager\"),",107],["ok = try",108],["try yeccpars1(Tokens, Tzr, State, States, Vstack)",165],["try yecc_error_type(Error, Stacktrace) of",193],["'try' ->",218],["try crypto:start() of",218]],"useCount":30407},{"word":"try_test","context":[["?line try_test(use_no_rights, [], Opts),",301],["try_test(unreg_test),",215],["try_test(load_test_sa),",129],["try_test(v3_sync, [[{v2_proc, []},",129],["try_test(v3_sync, [[{usm_use_user, []}]],",129],["Bad = try_test(std_mib_b, [InBadVsns]),",86],["try_test(api_test3),",86],["try_test(undo_test),",129],["try_test(std_mib_read),",129],["InBadVsns = try_test(std_mib_a),",129]],"useCount":6969},{"word":"tuple","context":[["ok | {skip, any()} | {comment, any()} | {save_config, [tuple()]} |",97],["{skip_and_save, any(), [tuple()]}).",97],["%% Return \t: A tuple {OptionType, OptionCmd}",98],["%%      IPT = tuple()",129],["Tuple :: tuple().",153],["%%      Config0 = Config1 = [tuple()]",165],["%% Info = [tuple()]",389],["%% Config - [tuple()]",464],["tuple ->",538],["%% Config0 = Config1 = [tuple()]",1915]],"useCount":17016},{"word":"type","context":[["%% attribute number 2 with type SEQUENCE OF",1694],["%% attribute number 1 with type OCTET STRING",3301],["%% attribute number 1 with type INTEGER",3265],["case os:type() of",2161],["%% attribute number 2 with type INTEGER",2145],["IQ#iq{type = error,",973],["%% returns type code",1066],["IQ#iq{type = result,",1054],["destroy(Obj=#wx_ref{type=Type}) ->",1017],["%% attribute number 4 with type SEQUENCE OF",987]],"useCount":167463},{"word":"ul","context":[["?XE(<<\"ul\">>,",152],["%% </ul>",837],["%%       </ul>",157],["%%      <ul>",167],["%%      </ul>",176],["%%% </ul>",490],["%%% <ul>",495],["%% <ul>",977],["%%</ul>",713],["%%<ul>",704]],"useCount":7149},{"word":"undefined","context":[["undefined ->",30114],["undefined;",8079],["undefined",3892],["erlang:nif_error(undefined).",3858],["undefined.",2226],["?RT_PER:encode_length(undefined,length(Val)),",2152],["{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),",2152],["undefined -> [];",1692],["_ -> undefined",1499],["undefined,",1416]],"useCount":140288},{"word":"unicode","context":[["Title_UC = unicode:characters_to_binary([Title,0]),",184],["Text_UC = unicode:characters_to_binary([Text,0]),",465],["Value_UC = unicode:characters_to_binary([Value,0]),",74],["case unicode:characters_to_list(Bytes, Enc) of",75],["Message_UC = unicode:characters_to_binary([Message,0]),",78],["Str_UC = unicode:characters_to_binary([Str,0]),",92],["unicode:characters_to_binary(",110],["Choices_UCA = [unicode:characters_to_binary([ChoicesTemp,0]) ||",63],["Label_UC = unicode:characters_to_binary([Label,0]),",218],["Name_UC = unicode:characters_to_binary([Name,0]),",298]],"useCount":6705},{"word":"unit","context":[["<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->",445],["<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->",445],["<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,",381],["<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,",375],["<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,",338],["<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,",319],["<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,",220],["<<_:V3@Pad2,V3@V0:4/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,",230],["<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,",260],["$\\000:8/integer-unit:1-unsigned-big,",285]],"useCount":15656},{"word":"unknown","context":[["\"unknown:[]\\n\"",76],["%% Object representation and traversal order is unknown.",97],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108],["unknown.",127],["{unknown, UserState};",128],["unknown;",179],["_ -> unknown",196],["unknown",301],["unknown ->",573],["{ constant , unknown , vertex , __1 }",96]],"useCount":7436},{"word":"unsigned","context":[["<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,",164],["$\\000:8/integer-unit:1-unsigned-big,",285],["<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,",220],["<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,",200],["<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,",192],["<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,",181],["<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,",177],["<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,",175],["$`:8/integer-unit:1-unsigned-big,",175],["<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,",163]],"useCount":7815},{"word":"up","context":[["{listen, up} ->",81],["%% cleaning up. When it returns, the gen_server terminates with Reason.",1079],["%% necessary cleaning up. When it returns, the gen_server terminates",855],["%% Clean up.",173],["%% any necessary cleaning up. The return value is ignored.",134],["Pid ! {listen, up},",112],["%% do any necessary cleaning up.",109],["%% necessary cleaning up. When it returns, the gen_fsm terminates with",97],["%% Clean up",89],["%% should do any necessary cleaning up. The return value is ignored.",65]],"useCount":7557},{"word":"update","context":[["\\\"S\\\": \\\"Amazon DynamoDB#How do I update multiple items?\\\"",132],["\\\"S\\\": \\\"How do I update multiple items?\\\"",101],["Users = (?DICT):update(LJID,",110],["update(This) -> wxWindow:update(This).",598],["update(This) -> wxWindow:update(This).",598],["transferDataToWindow/1,update/1,updateWindowUI/1,updateWindowUI/2,",120],["update/1,updateWindowUI/1,updateWindowUI/2,validate/1,warpPointer/3]).",353],["update/2,",145],["Ts = update(I, Ts0),",153],["shaper:update(StateData#state.room_shaper, Size),",190]],"useCount":9516},{"word":"urn","context":[["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>} ->",527],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>}]);",112],["<<\"urn:ietf:params:xml:ns:xmpp-tls\">>} ->",124],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">> ->",416],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>}])",416],["xsi:schemaLocation=\\\"urn:ietf:params:xml:ns:cpl cpl.xsd \\\">",111],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">> ->",632],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>} ->",806],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>} ->",713],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>}])",632]],"useCount":8172},{"word":"us","context":[["us = {LUser, LServer},",183],["us = US,",147],["us = {LUser, LServer}, jid = LJID};",146],["<<\"us\">>, {LUser, LServer}) of",119],["#request{us = _US,",93],["%%% useable and useful as is. Please, send us comments, feedback and",84],["us = {User, Server}});",76],["#offline_msg{us = {LUser, LServer},",72],["#muc_online_users{us = US, resource = LResource,",70],["%%  courses, books, articles, and the like. Contact us if you are in doubt.",423]],"useCount":8551},{"word":"use","context":[["% Redistribution and use in source and binary forms, with or without",248],["%% stored on disc or distributed for use on other nodes.",1461],["%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1271],["%% <p>This class is derived (and can use functions) from:",1132],["%% @doc Destroys this object, do not use object again",1017],["%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",968],["%% Redistribution and use in source and binary forms, with or without",630],["%%% Redistribution and use in source and binary forms, with or without",597],["%% Feel free to use, reuse and abuse the code in this file.",437],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417]],"useCount":19012},{"word":"used","context":[["% icky hack of field values - compactor_pid used to store clients",78],["%% <p>This function is mainly used to trigger the setup task necessary for the",79],["%% plugin. It can be used for example by the developer to create the specific",79],["%%% The suites used for the test are located in the data directory.",84],["%%   no further persistance operation will be performed. This case is used,",96],["%%% <p>It is used as a default for all unknown PubSub node type.  It can serve",108],["%% To be used in grammar files to throw an error message to the parser",162],["%% Note: This directive should only be used in test suites.",581],["%% and can be changed without notice. It can't be used for comparsion",1461],["[] -> %% The result is not used.",126]],"useCount":15648},{"word":"user","context":[["[{sec_level, authPriv}, {user, \"newUser\"}]),",258],["[{sec_level, authPriv}, {user, \"privDES\"}]),",258],["StateData#state.user,",984],["{user, \"foo\"},",365],["<<\"http://jabber.org/protocol/muc#user\">>} ->",248],["Info#user.jid,",235],["User = StateData#state.user,",214],["args = [{user, binary}, {host, binary}],",175],["Nick = Info#user.nick,",168],["user = U});",162]],"useCount":29113},{"word":"username","context":[["username = UserName,",67],["%% If the provided JID does not have username,",63],["%\t\tU = xml:get_attr_s(username, Props),",64],["\"where username='\">>, Username, <<\"' \"",66],["\"where username='\", Username, \"';\"]).",80],["[#xmlel{name = <<\"username\">>,",92],["U = proplists:get_value(username, Props, <<>>),",109],["\"      where username='\", Username, \"' \"",125],["[<<\"username\">>, <<\"jid\">>, <<\"nick\">>,",168],["\"username='\">>,",240]],"useCount":7075},{"word":"users","context":[["end, ?DICT:to_list(StateData#state.users)).",130],["{megaco_system_info, users},",253],["StateData#state{users = Users}.",169],["(?DICT):to_list(StateData#state.users)).",154],["StateData#state{users = Users, nicks = Nicks}.",118],["\"blocking and unblocking of users - \"",110],["case (?DICT):is_key(LJID, StateData#state.users) of",105],["[], StateData#state.users);",105],["end, StateData#state.users),",90],["StateData#state.users),",717]],"useCount":9524},{"word":"using","context":[["%% Description: Whenever a supervisor is started using",78],["%% Description: Whenever a gen_fsm receives an event sent using",78],["%%% <p>PubSub plugin nodes are using the {@link gen_pubsub_node} behaviour.</p>",84],["%% state name. Whenever a gen_fsm receives an event sent using",116],["%% Whenever a gen_fsm receives an event sent using",119],["%% This function is called whenever an application is started using",131],["%% When using the {includefile, Includefile} option, make sure that",185],["%% Whenever a supervisor is started using supervisor:start_link/[2,3],",329],["%%% Register the name using the Rfunc function",73],["%%% <p>PubSub node tree plugins are using the {@link gen_nodetree} behaviour.</p>",68]],"useCount":6754},{"word":"val","context":[["val(Var) ->",134],["case val({Tab, setorbag}) of",96],["module=#c_literal{val=erlang},",122],["Cs = incr_version(val({Tab, cstruct})),",121],["# t_atom { val = tok_val ( __1 ) }",105],["case val({Tab, where_to_read}) of",102],["Cs = val({Tab, cstruct}),",81],["Active = val({Tab, active_replicas}),",75],["C1 = #c_clause{pats=[#c_cons{hd=X, tl=Xs}], guard=#c_literal{val=true},",70],["C3 = #c_clause{pats=[Xs], guard=#c_literal{val=true},",70]],"useCount":9814},{"word":"valid","context":[["[] -> %% no valid ranges",76],["%%      valid.",114],["valid;",117],["valid ->",156],["{valid, UserState};",172],["%%    ?line check_result(R, \"valid\").",210],["check_result(R, \"valid\").",339],["?line check_result(R, \"valid\").",1695],["%% Type: valid",2346],["{valid, UserState}",105]],"useCount":12350},{"word":"validate","context":[["updateWindowUI/2,validate/1,warpPointer/3]).",127],["validate(fun() -> chk_TerminationIDList(Tids1, Tids2) end,",80],["validate(fun() -> chk_EventParameter(H1, H2) end,",80],["validate(fun() ->",84],["?assertEqual(true, meck:validate(Mod)).",97],["validate/1,warpPointer/3]).",120],["validate(",200],["update/1,updateWindowUI/1,updateWindowUI/2,validate/1,warpPointer/3]).",353],["validate(This) -> wxWindow:validate(This).",606],["validate(This) -> wxWindow:validate(This).",606]],"useCount":8243},{"word":"value","context":[["[{\"name\",{tk_string,0}},{\"value\",tk_any}]},",280],["{value, _} ->",1477],["[#xmlel{name = <<\"value\">>, attrs = [],",1195],["%% The return value is ignored.",1091],["%% with Reason. The return value is ignored.",854],["%%   A list of key/value pairs, holding the test case configuration.",795],["{\"value\",tk_any}]},",624],["[#xmlel{name = <<\"value\">>,",375],["%% Note: This function is free to add any key/value pairs to the Config",367],["{value, {_, Val}} ->",354]],"useCount":63745},{"word":"values","context":[["% icky hack of field values - compactor_pid used to store clients",78],["%% additional process_cpl_script values",74],["%% default data values, not perform any other operations.",71],["%% @doc Replace the macros with their defined values.",69],["%% Possible return values not used now.",69],["%% If the JID is not a participant, return values for a service message.",63],["%% @doc Get information of this participant, or default values.",63],["%% attribute values(2) with type SET OF",90],["%% Return values:",111],["values ->",324]],"useCount":8849},{"word":"var","context":[["attrs = [{<<\"type\">>, Type}, {<<\"var\">>, Var}],",75],["{<<\"var\">>, Var}],",460],["attrs = [{<<\"var\">>, ?NS_MUC}], children = []},",77],["{<<\"var\">>, <<\"accountjid\">>}],",96],["when Type =:= atom; Type =:= var ->",105],["[{<<\"var\">>, <<\"FORM_TYPE\">>},",111],["{\"var\", Var}],",148],["yecctoken2string({var,_,V}) -> io_lib:format(\"~s\", [V]);",191],["var ->",429],["[{<<\"var\">>,",198]],"useCount":10460},{"word":"vcard","context":[["if _xmlns == <<>>; _xmlns == <<\"vcard-temp\">> ->",475],["mnesia:delete({vcard, US}),",39],["?INFO_MSG(\"Recreating vcard table\", []),",39],["Fields = record_info(fields, vcard),",39],["module_tables(mod_vcard) -> [vcard, vcard_search];",48],["<<\"vcard-temp\">>;",55],["{attributes, record_info(fields, vcard)}]),",56],["send_recv(Config, #iq{type = get, sub_els = [#vcard{}]}),",56],["vcard,",76],["[{<<\"xmlns\">>, <<\"vcard-temp\">>}]);",160]],"useCount":6541},{"word":"version","context":[["%%% @version {@version}",153],["%%% @version {@version}",153],["%% @version {@version}",157],["%% @version {@version}",157],["%% @version {@vsn}, {@date} {@time}",182],["version() ->",227],["{version, \"HTTP/1.0\"}]),",330],["%%% @version {@vsn}, {@date} {@time}",455],["%% attribute version(1) with type INTEGER",539],["%% @version $Id$",1217]],"useCount":20292},{"word":"vsn","context":[["%% IC vsn: 4.3.6",478],["-vsn('$Id$').",1029],["%% @version {@vsn}, {@date} {@time}",182],["%% IC vsn: 4.2.26",249],["%% IC vsn: 4.3.5",249],["%% IC vsn: 4.2.31",249],["%% IC vsn: 4.2.19",249],["lists:keydelete(vsn, 1, C1).",322],["%%% @version {@vsn}, {@date} {@time}",455],["%% IC vsn: 4.4",478]],"useCount":8099},{"word":"w","context":[["w(\" int * ~sLen = (int *) bp; bp += 4;~n\", [N]),",131],["w(\"%% This file is generated DO NOT EDIT~n~n\", []),",85],["%%% Author contact: w.a.de.jong@gmail.com",69],["{align, w},",61],["w(\" rt.add(~s);~n\", [Name]);",59],["%% 2nd, 3rd, or 4th byte of a multi-byte sequence w/o leading byte",48],["%%\tanchor\t\t\tn,w,s,e,nw,se,ne,sw,center",53],["w(\"%% @hidden~n\", []),",52],["%% disable authentication failure traps.  (otherwise w'd get many of",49],["w(\"   rt.addTupleCount(2);~n\"),",48]],"useCount":7059},{"word":"we","context":[["%% Special case becase we returns everything after a legal document",84],["%% in case we change transaction to sync_dirty...",70],["%% @todo In practice, the current data structure means that we cannot manage",70],["%% could be 416, for now we'll just return 200",76],["%% by ensuring that we re-use strings and Jids wherever possible.",79],["%% check that we got a trap",92],["%% compare unequal as erlang terms, so we need to carefully recurse",97],["%% Ensure that we access the intended Mnesia",150],["UserDir = filename:join(PrivDir, nopubkey), % to make sure we don't use public-key-auth",417],["\"This is a relatively long body, that we send to the client... \"",660]],"useCount":20888},{"word":"wf","context":[["%% Type: not-wf",7380],["-include_lib(\"nitrogen_core/include/wf.hrl\").",167],["-include(\"wf.hrl\").",196],["-include (\"wf.inc\").",244],["-include_lib (\"wf.hrl\").",364],["-include_lib(\"n2o/include/wf.hrl\").",542],["%%    ?line check_result(R, \"not-wf\").",720],["check_result(R, \"not-wf\").",1061],["?line check_result(R, \"not-wf\").",5305],["%%    check_result(R, \"not-wf\").",144]],"useCount":26892},{"word":"when","context":[["when is_record(This, wx_ref) ->",755],["when",763],["%% This function is called by a gen_server when it is about to",863],["%% Description: This function is called by a gen_server when it is about to",931],["%% Convert process state when code is changed",954],["Bin when is_binary(Bin) ->",955],["Pid when is_pid(Pid) ->",1050],["%% Description: Convert process state when code is changed",1100],["when is_list(Options) ->",1452],["when is_record(Config, aws_config) ->",1700]],"useCount":245675},{"word":"where","context":[["%% @where",144],["%% \t    <dd>where `Info =",72],["%% where",1714],["\"      where username='\", Username, \"' \"",125],["where",91],["\"where nodeid='\", NodeId, \"' \"",80],["\"where username='\", Username, \"';\"]).",80],["%% where Host = global | string()",77],["%% where Path = [string()]",76],["%%  where",74]],"useCount":11655},{"word":"which","context":[["case code:which(Mod) of",114],["?line PA = filename:dirname(code:which(?MODULE)),",106],["Pa = filename:dirname(code:which(?MODULE)),",318],["Path = code:which(?MODULE),",234],["%% yeccpre.hrl is included (one which defines yeccpars1/5).",185],["Dir = filename:dirname(code:which(?MODULE)),",141],["case code:which(Module) of",135],["EbinDir = filename:dirname(code:which(?MODULE)),",133],["% Drop any stanza, which isn't IQ stanza",77],["PA = filename:dirname(code:which(?MODULE)),",90]],"useCount":10627},{"word":"will","context":[["%% that will be added to the affiliation stored in the main",96],["%% This function will crash if finds some error in the configuration file.",69],["\"and will not be accepted:~n~p\", [NA])",69],["%% Escape character that will confuse an SQL engine",82],["% The parser generator will insert appropriate declarations before this line.%",197],["%% include directives. yecc will otherwise assume that an old",185],["%% during startup since it will cause the",150],["%% there will be clashes with logging processes etc).",139],["%%   no further persistance operation will be performed. This case is used,",96],["%% table, it should return an empty list, as the affiliation will be read by",96]],"useCount":16883},{"word":"with","context":[["%% attribute number 1 with type INTEGER",3265],["%% attribute number 2 with type INTEGER",2145],["%% attribute number 2 with type SEQUENCE OF",1694],["%% Length with constraint no",1210],["%% purpose with or without fee is hereby granted, provided that the above",1107],["%% cleaning up. When it returns, the gen_server terminates with Reason.",1079],["%% attribute number 4 with type SEQUENCE OF",987],["%% attribute streamID(2) with type INTEGER OPTIONAL",880],["%% with Reason. The return value is ignored.",854],["%% attribute number 1 with type OCTET STRING",3301]],"useCount":99320},{"word":"without","context":[["%% Redistribution and use in source and binary forms, with or without modification,",104],["%%  Redistribution and use in source and binary forms, with or without",112],["%%% purpose with or without fee is hereby granted, provided that the above",128],["%% Module start with or without supervisor:",174],["%% yeccpars1/7 can be found by parsing the file without following",185],["% Redistribution and use in source and binary forms, with or without",248],["%%% Redistribution and use in source and binary forms, with or without",597],["%% Redistribution and use in source and binary forms, with or without",630],["%% purpose with or without fee is hereby granted, provided that the above",1107],["%% and can be changed without notice. It can't be used for comparsion",1461]],"useCount":7363},{"word":"write","context":[["mnesia:write(",291],["yecctoken2string({reserved_symbol, _, A}) -> io_lib:write(A);",165],["TidTs = get_tid_ts_and_lock(schema, write),",169],["write ->",180],["io_lib:write(Message)",213],["io_lib:write(Other).",213],["yecctoken2string({float,_,F}) -> io_lib:write(F);",213],["yecctoken2string({atom, _, A}) -> io_lib:write(A);",213],["yecctoken2string({integer,_,N}) -> io_lib:write(N);",213],["io_lib:write(Other);",165]],"useCount":15437},{"word":"www","context":[["%%%   [http://www.process-one.net/]",371],["%% retrieved online at http://www.erlang.org/.",6836],["{<<\"www-authenticate\">>, <<\"Basic realm=\\\"session\\\"\">>} =",76],["%% retrieved via the world wide web at http://www.erlang.org/.",1056],["%%% retrieved via the world wide web at http://www.erlang.org/.",491],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang2 for more book information.",236],["%% at http://www.mozilla.org/MPL/",182],["%%  Visit http://www.pragmaticprogrammer.com/titles/jaerlang for more book information.",160],["xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"",111],["%%  StrikeAd LLC http://www.strikead.com",102]],"useCount":13805},{"word":"wxDC","context":[["maxX(This) -> wxDC:maxX(This).",54],["crossHair(This,Pt) -> wxDC:crossHair(This,Pt).",54],["drawBitmap(This,Bmp,Pt) -> wxDC:drawBitmap(This,Bmp,Pt).",54],["drawLine(This,Pt1,Pt2) -> wxDC:drawLine(This,Pt1,Pt2).",54],["deviceToLogicalY(This,Y) -> wxDC:deviceToLogicalY(This,Y).",54],["deviceToLogicalX(This,X) -> wxDC:deviceToLogicalX(This,X).",54],["drawEllipse(This,Pt,Sz) -> wxDC:drawEllipse(This,Pt,Sz).",54],["?CLASS(DcT,wxDC),",76],["This::wxDC().",174],["?CLASS(ThisT,wxDC),",609]],"useCount":6326},{"word":"wxStyledTextCtrl","context":[["This::wxStyledTextCtrl(), Mode::integer().",35],["This::wxStyledTextCtrl().",1477],["This::wxStyledTextCtrl(), Line::integer().",147],["%% @spec (This::wxStyledTextCtrl()) -> ok",114],["This::wxStyledTextCtrl(), Pos::integer().",105],["%% @spec (This::wxStyledTextCtrl()) -> integer()",56],["This::wxStyledTextCtrl(), Text::unicode:chardata().",49],["This::wxStyledTextCtrl(), PixelWidth::integer().",35],["?CLASS(ThisT,wxStyledTextCtrl),",3521],["%% @spec (This::wxStyledTextCtrl()) -> bool()",32]],"useCount":6128},{"word":"wxWindow","context":[["setSizeHints(This,MinW,MinH, Options) -> wxWindow:setSizeHints(This,MinW,MinH, Options).",606],["?CLASS(ThisT,wxWindow),",1275],["?CLASS(ParentT,wxWindow),",1037],["%% From wxWindow",606],["makeModal(This) -> wxWindow:makeModal(This).",606],["clientToScreen(This,Pt) -> wxWindow:clientToScreen(This,Pt).",606],["isShown(This) -> wxWindow:isShown(This).",606],["setPalette(This,Pal) -> wxWindow:setPalette(This,Pal).",606],["moveBeforeInTabOrder(This,Win) -> wxWindow:moveBeforeInTabOrder(This,Win).",606],["cacheBestSize(This,Size) -> wxWindow:cacheBestSize(This,Size).",606]],"useCount":114842},{"word":"wx_ref","context":[["destroy(Obj=#wx_ref{type=Type}) ->",1017],["when is_record(This, wx_ref) ->",755],["when is_record(Parent, wx_ref) ->",192],["new(#wx_ref{type=ParentT,ref=ParentRef}, Options)",192],["new(#wx_ref{type=ParentT,ref=ParentRef},Id, Options)",152],["when is_record(Parent, wx_ref),is_integer(Id) ->",152],["getSelection(#wx_ref{type=ThisT,ref=ThisRef}) ->",121],["when is_record(This, wx_ref),is_record(Parent, wx_ref) ->",116],["when is_record(This, wx_ref),is_record(Parent, wx_ref) ->",116],["create(#wx_ref{type=ThisT,ref=ThisRef},#wx_ref{type=ParentT,ref=ParentRef}, Options)",108]],"useCount":10668},{"word":"x","context":[["[#xmlel{name = <<\"x\">>,",1063],["#xmlel{name = <<\"x\">>,",303],["{result, [{xmlelement, \"x\", [{\"xmlns\", ?NS_XDATA}],",197],["[{xmlelement, \"x\", [{\"xmlns\", ?NS_MUC_USER}],",179],["[#xmlel{name = <<\"x\">>} = XEl] ->",178],["<<\"-export([x/1]).",121],["t(<<\"rd(foo,{bar}), [X || X <- [#foo{bar=3},x,[],{a,b}],\"",108],["name = <<\"x\">>,",105],["[{xmlelement, \"x\",",104],["<<\"x\">>,",103]],"useCount":15820},{"word":"xmerl","context":[["xmerl:export([A],xmerl_test).",1781],["?line xmerl:export([A],xmerl_test).",7124],["-include_lib(\"xmerl/include/xmerl.hrl\").",519],["Text = xmerl:export_simple([XML], xmerl_html, []),",33],["list_to_binary(xmerl:export_simple([XML], xmerl_xml))",36],["XMLText = list_to_binary(xmerl:export_simple([XML], xmerl_xml)),",37],["POSTData = list_to_binary(xmerl:export_simple([XML], xmerl_xml)),",37],["%   ?line xmerl:export([A],xmerl_test).",112],["-include(\"xmerl.hrl\").",191],["-include_lib(\"xmerl/include/xmerl.hrl\").",519]],"useCount":10747},{"word":"xmerl_sax_parser","context":[["?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",7935],["R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",1587],["%%    ?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",945],["%%    R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",189],["%%?line R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",100],["-include(\"xmerl_sax_parser.hrl\").",31],["continuation_fun=fun xmerl_sax_parser:default_continuation_cb/1,",25],["%%R = xmerl_sax_parser:file(Path, [{event_fun, fun(_,_,S) -> S end}]),",20]],"useCount":10832},{"word":"xmerl_test","context":[["%   xmerl:export([A],xmerl_test).",28],["?line xmerl:export([A],xmerl_test).",7124],["xmerl:export([A],xmerl_test).",1781],["%   ?line xmerl:export([A],xmerl_test).",112]],"useCount":9045},{"word":"xmerl_test_lib","context":[["%%    file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",189],["%%file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",20],["%%?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",100],["%%    ?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",945],["file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",1603],["?line file:set_cwd(xmerl_test_lib:get_data_dir(Config)),",8015]],"useCount":10872},{"word":"xml","context":[["Lang = xml:get_attr_s(<<\"xml:lang\">>, Attrs),",448],["Lang = xml:get_attr_s(<<\"xml:lang\">>, Attrs),",448],["case xml:remove_cdata(Els) of",463],["case xml:get_attr_s(<<\"xmlns\">>, Attrs) of",521],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>} ->",527],["case xml:get_attr_s(<<\"type\">>, Attrs) of",624],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>} ->",806],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>} ->",713],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>}])",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">> ->",632]],"useCount":29255},{"word":"xmlcdata","context":[["[{xmlcdata, Reason}]}]",94],["[{xmlcdata, ?EJABBERD_URI}]},",93],["[{xmlcdata, S}]}",88],["[{xmlcdata,",2918],["[{xmlelement, \"value\", [], [{xmlcdata, Val}]}]}).",104],["children = [{xmlcdata, ?EJABBERD_URI}]},",177],["children = [{xmlcdata, Value}]};",289],["children = [{xmlcdata, Val}]}]}).",299],["[{xmlcdata, _data} | _els], Cdata) ->",1041],["[{xmlcdata, _val} | _acc].",1453]],"useCount":13000},{"word":"xmlel","context":[["#xmlel{name = <<\"item\">>,",736],["| {error, xmlel()}",707],["[#xmlel{name =",606],["[#xmlel{name = <<\"pubsub\">>,",464],["#xmlel{name = <<\"feature\">>,",809],["[#xmlel{name = <<\"x\">>,",1063],["[#xmlel{name = <<\"query\">>,",1088],["[#xmlel{name = <<\"value\">>, attrs = [],",1195],["#xmlel{name = <<\"field\">>,",1688],["#xmlel{",443]],"useCount":58577},{"word":"xmlelement","context":[["sub_el = [{xmlelement,",141],["{result, [{xmlelement, \"x\", [{\"xmlns\", ?NS_XDATA}],",197],["{xmlelement, \"item\",",228],["{xmlelement, \"field\",",319],["[{xmlelement, \"x\", [{\"xmlns\", ?NS_MUC_USER}],",179],["[{xmlelement, \"value\", [],",178],["sub_el = [{xmlelement, \"query\",",340],["[{xmlelement, \"subscription\",",174],["{xmlelement, \"title\", [],",167],["{xmlelement, \"instructions\", [],",155]],"useCount":12135},{"word":"xmlns","context":[["attrs = [{<<\"xmlns\">>, ?NS_SASL}],",595],["attrs = [{<<\"xmlns\">>, ?NS_MUC_USER}],",227],["{result, [{xmlelement, \"x\", [{\"xmlns\", ?NS_XDATA}],",197],["attrs = [{<<\"xmlns\">>, XMLNS}],",197],["_xmlns = xml:get_attr_s(<<\"xmlns\">>, _attrs),",270],["attrs = [{<<\"xmlns\">>, ?NS_XDATA}],",430],["attrs = [{<<\"xmlns\">>, ?NS_PUBSUB}],",440],["case xml:get_attr_s(<<\"xmlns\">>, Attrs) of",521],["[{<<\"xmlns\">>,",2733],["_xmlns = get_attr(<<\"xmlns\">>, _attrs),",4548]],"useCount":26312},{"word":"xmpp","context":[["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>} ->",806],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>} ->",713],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">> ->",632],["<<\"urn:ietf:params:xml:ns:xmpp-stanzas\">>}])",632],["-include(\"xmpp.hrl\").",154],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>} ->",527],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">> ->",416],["<<\"urn:ietf:params:xml:ns:xmpp-streams\">>}])",416],["<<\"urn:ietf:params:xml:ns:xmpp-tls\">>} ->",124],["<<\"urn:ietf:params:xml:ns:xmpp-sasl\">>}]);",112]],"useCount":9219},{"word":"yeccerror","context":[["yeccerror(Token);",32],["-compile({nowarn_unused_function, yeccerror/1}).",158],["yeccerror(Token) ->",213],["yeccerror(__T);",609],["yeccerror(T).",12831]],"useCount":13843},{"word":"yeccgoto_safeToken2","context":[["yeccgoto_safeToken2(hd(Ss), Cat, Ss, Stack, T, Ts, Tzr).",6284],["yeccgoto_safeToken2(130=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",29],["yeccgoto_safeToken2(372=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",29],["yeccgoto_safeToken2(313=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",31],["yeccgoto_safeToken2(466=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",31],["yeccgoto_safeToken2(298=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",33],["yeccgoto_safeToken2(299=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",37],["yeccgoto_safeToken2(563=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",38],["yeccgoto_safeToken2(6=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",55],["yeccgoto_safeToken2(4=_S, Cat, Ss, Stack, T, Ts, Tzr) ->",55]],"useCount":9368},{"word":"yeccpars1","context":[["yeccpars1(S, 41, Ss, Stack, T, Ts, Tzr);",855],["yeccpars1(S, 43, Ss, Stack, T, Ts, Tzr);",833],["yeccpars1(S, 51, Ss, Stack, T, Ts, Tzr);",935],["yeccpars1(S, 68, Ss, Stack, T, Ts, Tzr);",950],["yeccpars1(S, 17, Ss, Stack, T, Ts, Tzr);",1027],["yeccpars1(S, 18, Ss, Stack, T, Ts, Tzr);",1051],["yeccpars1(S, 23, Ss, Stack, T, Ts, Tzr);",1053],["yeccpars1(S, 52, Ss, Stack, T, Ts, Tzr);",1084],["yeccpars1(S, 21, Ss, Stack, T, Ts, Tzr);",1108],["yeccpars1(S, 22, Ss, Stack, T, Ts, Tzr);",1188]],"useCount":95146},{"word":"yeccpars2","context":[["yeccpars2(Other, _, _, _, _, _, _) ->",193],["yeccpars2(State, element(1, Token), [State1 | States],",193],["yeccpars2(0=S, Cat, Ss, Stack, T, Ts, Tzr) ->",193],["%% yeccpars2(1=S, Cat, Ss, Stack, T, Ts, Tzr) ->",192],["%% yeccpars2(2=S, Cat, Ss, Stack, T, Ts, Tzr) ->",166],["yeccpars2(State, '$end', States, Vstack, yecc_end(Endline), [],",165],["yeccpars2(State, '$end', States, Vstack, yecc_end(Line), [],",165],["yeccpars2(State, element(1, Token), States, Vstack, Token, Tokens, Tzr);",165],["yeccpars2(46=S, Cat, Ss, Stack, T, Ts, Tzr) ->",147],["yeccpars2(State, '$end', [State1 | States], [Token0 | Vstack],",330]],"useCount":69016},{"word":"yeccpars2_4","context":[["yeccpars2_4(4, Cat, Ss, Stack, T, Ts, Tzr).",86],["%%  yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",314],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr);",3302],["yeccpars2_4(_S, Cat, Ss, Stack, T, Ts, Tzr) ->",76],["yeccpars2_4(_S, Cat, Ss, Stack, T, Ts, Tzr);",162],["yeccpars2_4(4, Cat, Ss, Stack, T, Ts, Tzr);",179],["yeccpars2_4(S, 'MgcIdToken', Ss, Stack, T, Ts, Tzr) ->",56],["%% yeccpars2_6: see yeccpars2_4",56],["yeccpars2_4(S, Cat, Ss, Stack, T, Ts, Tzr) ->",62],["yeccpars2_4(479, Cat, Ss, Stack, T, Ts, Tzr);",63]],"useCount":7129},{"word":"yeccpars2_7","context":[["yeccpars2_7(_, _, _, _, T, _, _) ->",49],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr);",5657],["yeccpars2_7(_S, '$end', _Ss, Stack, _T, _Ts, _Tzr) ->",16],["yeccpars2_7(S, '(', Ss, Stack, T, Ts, Tzr) ->",16],["yeccpars2_7(7, Cat, Ss, Stack, T, Ts, Tzr).",26],["yeccpars2_7(S, Cat, Ss, Stack, T, Ts, Tzr);",66],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr).",74],["yeccpars2_7(7, Cat, Ss, Stack, T, Ts, Tzr);",78],["yeccpars2_7(_S, Cat, Ss, Stack, T, Ts, Tzr) ->",133],["%%  yeccpars2_7(S, Cat, Ss, Stack, T, Ts, Tzr);",136]],"useCount":6265},{"word":"yrl","context":[["-file(\"xref_parser.yrl\", 101).",86],["-file(\"megaco_text_parser_v3.yrl\", 486).",77],["-file(\"megaco_text_parser_prev3b.yrl\", 476).",77],["-file(\"icparse.yrl\", 258).",135],["-file(\"icparse.yrl\", 262).",93],["-file(\"xref_parser.yrl\", 62).",110],["-file(\"xmerl_b64Bin.yrl\", 0).",112],["-file(\"src/aleppo/aleppo_parser.yrl\", 118).",266],["-file(\"icparse.yrl\", 261).",135],["Filename = filename:join(Dir, \"file.yrl\"),",80]],"useCount":7716},{"word":"~n","context":[["\"~n   TargetName: ~p\"",291],["\"~n   Else: ~p~n\", [Else]),",776],["?dbg(\"cont()...~n\", []),",520],["\"~n   AR: ~p~n\", [AR]),",469],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400],["\"~n   Else: ~w\", [Else]),",396],["\"~n\"",326],["\"~n   MgcNode: ~p\"",313],["io:format(\"~n\"),",312],["?debugFmt(\"wwe debugging fold/5 ===> ~n RT: ~p~n\", [RT]),",287]],"useCount":46084},{"word":"~p","context":[["\"~n   Config: ~p\", [Config]),",235],["\"~n   MgNode:  ~p\",",272],["\"~n   M1: ~p\", [M, M1]),",244],["\"~n   TargetName: ~p\"",291],["io_lib:format(\"~p\", [Reason]).",312],["\"~n   MgcNode: ~p\"",313],["?ERROR_MSG(\"~p~nwhen processing: ~p\",",361],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400],["ct:log(\"Testcase ~p, Client ~p  Server ~p ~n\",",400]],"useCount":86994},{"word":"~p~n","context":[["\"~n   CH: ~p~n\", [CH]),",265],["?DEBUG(\"sending to process ~p~n\", [Pid]),",181],["p(\"manager info: ~p~n\", [mgr_info(ManagerNode)]),",189],["?debugFmt(\"wwe debugging fold/5 ===> ~n RT: ~p~n\", [RT]),",287],["\"~n   Else: ~p~n\", [Else]),",776],["?debugFmt(\"wwe debugging fold/5 ===> Start ~p~n ST: ~p~n\", [Lvl, ST]),",267],["p(\"starting with Config: ~p~n\", [Config]),",378],["\"  ~p~n\"",407],["\"~n   AR: ~p~n\", [AR]),",469],["?debugFmt(\"wwe debugging fold/5 ===> Start ~p~n ST: ~p~n\", [Lvl, ST]),",267]],"useCount":22881},{"word":"~s","context":[["{error, ?F(\"~s at line ~w\", [Str, Lno])}",253],["?emit_c_enc_rpt(Fd, \"    \", \"~s\", [LName]),",132],["io_lib:format(\"<font class=\\\"mk\\\">~s ~s</font><br/>\",",140],["\"~n   M:  ~s\"",244],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad format)\",",126],["yecctoken2string({var,_,V}) -> io_lib:format(\"~s\", [V]);",191],["?INFO_MSG(\"(~w) Accepted authentication for ~s \"",120],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad \"",114],["?INFO_MSG(\"Closing s2s connection: ~s -> ~s (bad format)\",",126],["io_lib:format(\"<font class=\\\"mk\\\">~s ~s</font><br/>\",",140]],"useCount":34381},{"word":"~w","context":[["{error, ?F(\"Expect integer at line ~w\", [Lno])}",217],["\"~n   Else: ~w\"",110],["ET = lists:flatten(io_lib:format(\"~w\",[T])),",106],["\"~n   Else: ~w\", [Else]),",396],["{error, ?F(\"Expect true|false at line ~w\", [Lno])}",362],["{error, ?F(\"~s at line ~w\", [Str, Lno])}",253],["?INFO_MSG(\"(~w) Accepted authentication for ~s \"",120],["io:fwrite(\"Function: ~w/~w\\n\", [Name,Arity]),",92],["\"~n   Reason: ~w\", [Reason]),",149],["{error, ?F(\"Unexpected input ~p at line ~w\", [[H|T], Lno])};",131]],"useCount":19236}]