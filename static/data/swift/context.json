[{"word":"0xfffd","context":[["[ 0xfffd, 0xfffd, 0xfffd ],",248],["[ 0xfffd, 0xfffd, 0xfffd ],",248],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",152],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",152],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",152],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",152],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",112],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",112],["[ 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd, 0xfffd ],",112],["[ 0xfffd, 0xfffd, 0xfffd ],",248]],"useCount":4600},{"word":"A","context":[["//  A port of MPAndroidChart for iOS",2193],["enum A {",1497],["class A",879],["protocol A{",704],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["class A{",1632],["struct A {",2695],["class A {",6653],["protocol A {",5272],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310]],"useCount":75250},{"word":"Alamofire","context":[["Alamofire.request(.GET, URLString, parameters: [\"foo\": \"bar\"])",104],["Alamofire.request(.GET, URLString)",225],["Alamofire.request(.GET, request, parameters: [\"fo\": \"ba\"]).responseJSON  {response in",174],["Alamofire.request(.GET, URL)",156],["Alamofire.upload(",137],["Alamofire.request(.GET, url)",123],["Alamofire.request(request)",107],["// Alamofire.swift",97],["var method: Alamofire.Method {",98],["import Alamofire",4954]],"useCount":8818},{"word":"An","context":[["An initializer that initializes the object with a NSCoder object.",100],["// An empty implementation adversely affects performance during animation.",884],["/// An unspecified error.",643],["- parameter indexPath:      An index path locating an item in the view.",81],["- parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",326],["/// - parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",164],["/// An object that keeps the elements stored in this buffer alive.",115],["/// - Parameter path: An optional String specifying the pattern that needs to be",108],["///   * `IndexOutOfBounds`: An index `path` is outside the bounds of a",83],["or an `Array` with one object for each persisted property. An exception will be",82]],"useCount":10715},{"word":"Any","context":[["override func prepare(for segue: UIStoryboardSegue, sender: Any?) {",958],["guard let jsDataCast = jsonData as? Dictionary<String,Any> else {",553],["override public func encode() throws -> Dictionary<String,Any> {",544],["var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()",511],["var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()",511],["public static func _getObjectiveCType() -> Any.Type {",236],["var parameters = Dictionary<String, Any>()",957],["] as [String : Any]",193],["var value: Any { return data.value }",119],["var valueType: Any.Type { return data.valueType }",119]],"useCount":17325},{"word":"AnyObject","context":[["var result: AnyObject?",272],["override func setValue(value: AnyObject?, forUndefinedKey key: String) {",288],["override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) {",305],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {",364],["func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {",370],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",10988],["var dict = [String: AnyObject]()",1334],["var parameters = Dictionary<String, AnyObject>()",834],["override func awakeWithContext(context: AnyObject?) {",825],["override var representedObject: AnyObject? {",430]],"useCount":62877},{"word":"AppDelegate","context":[["class AppDelegate: NSObject, NSApplicationDelegate {",1529],["let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate",648],["//  AppDelegate.swift",21866],["class AppDelegate: UIResponder, UIApplicationDelegate {",20499],["let appDelegate = UIApplication.sharedApplication().delegate as AppDelegate",109],["if let appDelegate = UIApplication.sharedApplication().delegate as? AppDelegate {",129],["let appDelegate = NSApplication.sharedApplication().delegate as! AppDelegate",133],["class AppDelegate: UIResponder, UIApplicationDelegate",160],["extension AppDelegate {",170],["class AppDelegate: UIResponder, UIApplicationDelegate, UISplitViewControllerDelegate {",428]],"useCount":48071},{"word":"Array","context":[["extension Array {",1474],["case .Array:",798],["case (.Array, .Array):",577],["case (.Array, .Array):",577],["var pairs = Array<(Int, Int)>()",293],["case Array",145],["public extension Array {",175],["// MARK: - Array",187],["if self.type == .Array {",226],["XCTFail(\"Array wasn't decoded correctly\")",223]],"useCount":16903},{"word":"AudioKit","context":[["import AudioKit",1093],["//  AudioKit",1255],["AudioKit.start()",844],["AudioKit.output = generator",57],["AudioKit.output = mixer",53],["AudioKit.output = filter",54],["AudioKit.output = effect",57],["AudioKit.output = reverb",100],["AudioKit.engine.attach(self.avAudioNode)",140],["AudioKit.engine.attachNode(self.avAudioNode)",302]],"useCount":4458},{"word":"B","context":[["struct B{",494],["class B : A {",225],["enum B {",432],["class B {",1375],["struct B {",804],["class B",704],["class B{",649],["protocol B {",630],["struct B",526],["typealias B",295]],"useCount":18814},{"word":"Base","context":[["// Base View",54],["public class Base {",56],["/// Base-class of LineChart, BarChart, ScatterChart and CandleStickChart.",64],["class Base {}",71],["class Derived : Base {",84],["internal var _base: Base",103],["public init(_ base: Base) {",127],["// MARK: - JSON Base",142],["class Base {",159],["/// Locales: Base",184]],"useCount":4592},{"word":"Bool","context":[["override func viewWillAppear(animated: Bool) {",7024],["var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)",1443],["func textFieldShouldReturn(textField: UITextField) -> Bool {",1492],[") -> Bool {",1527],["override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {",1578],["override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {",2166],["override func viewWillDisappear(animated: Bool) {",2403],["override func setSelected(selected: Bool, animated: Bool) {",3113],["override func setSelected(selected: Bool, animated: Bool) {",3113],["override func viewDidAppear(animated: Bool) {",4971]],"useCount":113814},{"word":"Builtin","context":[["utf8CodeUnitCount: Builtin.Word,",143],["Builtin.int_trap()",131],["// CHECK-NEXT: %0 = integer_literal $Builtin.Int1, 0",113],["// CHECK-NEXT: %0 = integer_literal $Builtin.Int1, -1",110],["isASCII: Builtin.Int1",103],["// CHECK: integer_literal $Builtin.Int8, 0",187],["Builtin.unreachable()",747],["return Builtin.castReference(o)",85],["return Builtin.bridgeFromRawPointer(p)",87],["_builtinExtendedGraphemeClusterLiteral start: Builtin.RawPointer,",101]],"useCount":12777},{"word":"C","context":[["class C {}",362],["// CHECK: return [[C]]",162],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181],["// expected-note@-2 {{Swift structs cannot be represented in Objective-C}}",192],["import Darwin.C",262],["protocol C {",940],["class C {",596],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["//  and Objective-C and various other programming languages.",504],["/// appropriately interpreted by C varargs.",272]],"useCount":20572},{"word":"CGColor","context":[["layer.shadowColor = UIColor.blackColor().CGColor",92],["CGContextSetFillColorWithColor(context, UIColor.whiteColor().CGColor)",69],["CGContextSetFillColorWithColor(context, color.CGColor)",305],["CGContextSetFillColorWithColor(context, dataSet.colorAt(j).CGColor)",141],["CGContextSetStrokeColorWithColor(context, dataSet.colorAt(j).CGColor)",69],["layer.fillColor = UIColor.clearColor().CGColor",86],["CGContextSetStrokeColorWithColor(context, set.highlightColor.CGColor)",86],["CGContextSetFillColorWithColor(context, dataSet.barShadowColor.CGColor)",87],["CGContextSetStrokeColorWithColor(context, color.CGColor)",109],["layer.borderColor = borderColor.CGColor",153]],"useCount":6310},{"word":"CGFloat","context":[["alpha: CGFloat(1.0)",212],["func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {",1553],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {",1197],["func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {",506],["override func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {",382],["let render = {(f: CGFloat) in",290],["func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {",228],["func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {",220],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310]],"useCount":74939},{"word":"CGPoint","context":[["point: CGPoint(",458],["return CGPoint(x: x, y: y)",189],["var pt = CGPoint()",183],["extension CGPoint {",150],["var position = CGPoint(x: 0.0, y: 0.0)",237],["return CGPoint(",136],["public extension CGPoint {",111],["CGPoint(",102],["var position = CGPoint(x: 0.0, y: 0.0);",75],["override func hitTest(point: CGPoint, withEvent event: UIEvent?) -> UIView? {",97]],"useCount":14758},{"word":"CGRect","context":[["public override init(frame: CGRect) {",1044],["public override init(frame: CGRect)",226],["extension CGRect {",236],["override public func drawRect(rect: CGRect) {",248],["override func draw(_ rect: CGRect) {",340],["super.init(frame: CGRect.zero)",470],["override public init(frame: CGRect) {",654],["override func drawRect(rect: CGRect) {",2236],["override init(frame: CGRect) {",6875],["public override func drawRect(rect: CGRect) {",225]],"useCount":26744},{"word":"CGSize","context":[["override func intrinsicContentSize() -> CGSize {",259],["func setUpAnimationInLayer(layer: CALayer, size: CGSize, color: UIColor) {",117],["override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {",128],["return CGSize.zero",133],["extension CGSize {",134],["public override func intrinsicContentSize() -> CGSize {",155],["self.preferredContentSize = CGSize(width: 320.0, height: 600.0)",173],["override init(size: CGSize) {",180],["override func collectionViewContentSize() -> CGSize {",185],["return CGSize(width: width, height: height)",190]],"useCount":7562},{"word":"CHECK","context":[["// CHECK: {{.*}}DocCommentAsXML=none",475],["// CHECK: }",1318],["// CHECK-NEXT: @end",807],["// CHECK-NEXT: }",779],["// CHECK: bb0",751],["// CHECK-NEXT: return",657],["// CHECK-NEXT: init",546],["// CHECK:   br [[CONT]]",525],["// CHECK-NEXT:    dealloc_stack [[SELF_BOX]]",506],["// CHECK: return",2495]],"useCount":159878},{"word":"CLLocationManager","context":[["let locationManager = CLLocationManager()",358],["let manager = CLLocationManager()",158],["if CLLocationManager.locationServicesEnabled() {",135],["let status = CLLocationManager.authorizationStatus()",131],["var locationManager = CLLocationManager()",125],["func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {",168],["func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {",192],["func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {",217],["locationManager = CLLocationManager()",218],["func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {",356]],"useCount":4372},{"word":"CONTRIBUTORS","context":[["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// See CONTRIBUTORS.txt for the list of SMUD project authors",65],["//  DISCLAIMED. IN NO EVENT SHALL OVH SAS AND CONTRIBUTORS BE LIABLE FOR ANY",46]],"useCount":15363},{"word":"Cancel","context":[["case Cancel",88],["let cancelAction = UIAlertAction(title: \"Cancel\", style: .Cancel, handler: nil)",159],["let cancelAction = UIAlertAction(title: \"Cancel\", style: .Cancel) { (action) in",81],["tester().tapViewWithAccessibilityLabel(\"Cancel\")",282],["decisionHandler(WKNavigationActionPolicy.Cancel)",237],["let cancelAction = UIAlertAction(title: \"Cancel\", style: .Cancel, handler: nil)",159],["decisionHandler(.Cancel)",134],["case .Cancel:",111],["alertController.addAction(UIAlertAction(title: CancelString, style: UIAlertActionStyle.Cancel, handler: { _ in",92],["style: .Cancel,",91]],"useCount":4564},{"word":"Center","context":[["style.alignment = .Center",63],["paragraphStyle.alignment = .Center",121],["imageView.contentMode = .Center",65],["titleLabel.textAlignment = NSTextAlignment.Center",156],["align: .Center,",199],["titleLabel.textAlignment = .Center",215],["case Center",223],["case .Center:",417],["label.textAlignment = NSTextAlignment.Center",454],["label.textAlignment = .Center",741]],"useCount":5462},{"word":"Cocoa","context":[["See our [Cocoa guide](http://realm.io/docs/cocoa) for more details.",38],["*    - https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Streams/Articles/ReadingInputStreams.html",25],["/// `UIControl`), with KVO, or with Cocoa Bindings.",26],["/// Get a Set<NSObject> (Set<TestObjCKeyTy>) backed by Cocoa storage",34],["//import Cocoa",38],["// FIXME: Uses explicit coordinates to avoid coupling a particular Cocoa type.",42],["/// Initializes a Cocoa action that will invoke the given Action by",43],["// See https://github.com/WebKit/webkit/blob/master/Source/WebKit2/UIProcess/Cocoa/NavigationState.mm#L390",52],["// FIXME: Uses an Any to avoid coupling a particular Cocoa type.",118],["import Cocoa",10766]],"useCount":11562},{"word":"Code","context":[["// MARK: Status Code",39],["extension CocoaError.Code {",36],["// Code generated by PaintCode",42],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120],["// This Source Code Form is subject to the terms of the Mozilla Public",266],["/* Code for drawing the urlbar curve */",74],["print(\"                -> Code: \\(status) - \" + SDError.errorMessageFromCode(Int(status)))",56],["println(\"                -> Code: \\(status) - \" + SDError.errorMessageFromCode(Int(status)))",56],["public enum Code: Int {",35],["/// Get the Nth UTF-16 Code Unit stored.",34]],"useCount":6874},{"word":"Configure","context":[["// Configure the view for the selected state",2954],["// Configure menu item label font if font is set by user",25],["// Configure side menu container",28],["// Configure tracker from GoogleService-Info.plist.",30],["// Configure the page view controller and add it as a child view controller.",38],["// Configure the cell...",1504],["// Configure interface objects here.",672],["// Configure the view.",356],["// Configure the cell",254],["// Configure controller scroll view content size",50]],"useCount":6091},{"word":"Content","context":[["request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",186],["if mutableURLRequest.valueForHTTPHeaderField(\"Content-Type\") == nil {",82],["\"Content-Type\": \"application/json\",",86],["request.setValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")",95],["mutableURLRequest.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",116],["\"Content-Type: image/png\\(CRLF)\\(CRLF)\"",80],["\"Content-Disposition: form-data; name=\\\"unicorn\\\"; filename=\\\"unicorn.png\\\"\\(CRLF)\" +",80],["XCTAssertNil(URLRequest.valueForHTTPHeaderField(\"Content-Type\"), \"Content-Type should be nil\")",80],["XCTAssertNil(URLRequest.valueForHTTPHeaderField(\"Content-Type\"), \"Content-Type should be nil\")",80],["request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",322]],"useCount":4561},{"word":"Core","context":[["// The directory the application uses to store the Core Data store file.",23],["/// The `Boolean` type declared in MacTypes.h and used throughout Core",24],["// Core Data",27],["//  Core.swift",32],["// MARK: - Core Data Saving and Undo support",47],["// #pragma mark - Core Data stack",52],["import Core",98],["//  Choose \"Create NSManagedObject Subclass…\" from the Core Data editor menu",759],["// MARK: - Core Data Saving support",1458],["// MARK: - Core Data stack",1454]],"useCount":4105},{"word":"CoreData","context":[["@_exported import CoreData",11],["CoreData.sessionNamed(CoreDataTests.name).saveContext()",11],["//  CoreData",13],["CoreData.sharedInstance.saveContext()",13],["//  CoreData.swift",17],["//import CoreData",20],["// MARK: - CoreData",11],["import CoreData",10127],["CoreData.sessionNamed(SMCoreData.name).saveContext()",54]],"useCount":10277},{"word":"Create","context":[["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["// Create the coordinator and store",1472],["//  Choose \"Create NSManagedObject Subclass…\" from the Core Data editor menu",759],["/// Create a native array buffer containing the elements of `self`,",68],["case .Create:",71],["//  Create a done button to show on keyboard to resign it. Adding a selector to resign it.",77],["// Create a new predicate that filters out any object that",97],["/// Create an instance initialized with `nil`.",104],["/// Create an instance initialized to `value`.",554]],"useCount":7981},{"word":"Created","context":[["//  Created by Daniel Cohen Gindi on 26/2/15.",209],["//  Created by JP Simard on 2015-05-16.",204],["//  Created by Daniel Cohen Gindi on 3/3/15.",209],["//  Created by Jesse Squires",235],["//  Created by Carlos Butron on 02/12/14.",237],["//  Created by Daniel Cohen Gindi on 4/3/15.",592],["//  Created by Daniel Cohen Gindi on 23/2/15.",432],["//  Created by ___FULLUSERNAME___ on ___DATE___.",293],["//  Created by Carlos Butron on 07/12/14.",181],["//  Created by Aurelius Prochazka, revision history on Github.",875]],"useCount":51098},{"word":"Creates","context":[["Creates a JSON from a [String: JSON]",84],["/// Creates a Signal from the producer, then adds exactly one observer to",87],["Creates a download request using the shared manager instance for the specified method and URL string.",88],["/// Creates an array of numbers (positive and/or negative) progressing from start up to but not including end.",91],["Creates a request for uploading a stream to the specified URL request.",104],["Creates a request for uploading a file to the specified URL request.",104],["Creates a request for uploading data to the specified URL request.",104],["Creates a JSON from a [JSON]",110],["Creates a JSON using the object.",142],["Creates a JSON using the data.",142]],"useCount":5736},{"word":"D","context":[["struct D{",65],["struct D {",190],["F = (B & C) | ((~B) & D)",60],["class D : B {",70],["F = B ^ C ^ D",71],["// CHECK: metatype $@thick D.Type",72],["struct D : C {",94],["D = C",119],["class C<D> {",137],["init <A: A where A.B == D>(e: A.B) {",137]],"useCount":4132},{"word":"DAG","context":[["// CHECK-DAG: [[LOAD:%[0-9]+]] = load [[STACK_D]]",18],["// CHECK-DAG: [[STACK_D:%[0-9]+]] = alloc_stack $D",18],["// CHECK-64-DAG: .swift:[[@LINE-1]]:{{[0-9]+}}: error: division by zero{{$}}",40],["// CHECK-32-DAG: .swift:[[@LINE-1]]:{{[0-9]+}}: error: shift amount is greater than or equal to type size in bits{{$}}",40],["// CHECK-32-DAG: .swift:[[@LINE-1]]:{{[0-9]+}}: error: division by zero{{$}}",40],["// CHECK-64-DAG: .swift:[[@LINE-1]]:{{[0-9]+}}: error: shift amount is greater than or equal to type size in bits{{$}}",40],["// CHECK-DAG: !private \"V4main20OtherFileEnumWrapper\"",39],["// PLAYGROUND-DAG: \"fatal error\"",24],["// DEBUG-DAG: \"fatal error\"",24],["// CHECK-DAG: - \"bar\"",18]],"useCount":5394},{"word":"Data","context":[["// MARK: - Data functions and accessors",324],["// MARK: Data",200],["// MARK: - Core Data stack",1454],["//  Choose \"Create NSManagedObject Subclass…\" from the Core Data editor menu",759],["// MARK: - Core Data Saving support",1458],["return Data()",91],["// MARK: Resume Data",156],["- returns: Data task which requests search to reddit.com.",183],["extension Data {",174],["// Data",108]],"useCount":9766},{"word":"Decl","context":[["// AUTOCLOSURE_STRING: Decl[InstanceVar]/CurrNominal:      characters[#String.CharacterView#]",26],["// AUTOCLOSURE_STRING: Decl[InstanceVar]/CurrNominal:      utf16[#String.UTF16View#]",26],["// AUTOCLOSURE_STRING: Decl[InstanceVar]/CurrNominal:      utf8[#String.UTF8View#]",26],["// PROTOCOL_EXT_DEDUP_2: Decl[Subscript]/CurrNominal:        [{#Self.T#}][#Self.T#]; name=[Self.T]",32],["// FOO_OBJECT_DOT-NEXT: Decl[InstanceVar]/CurrNominal:    instanceVar[#Int#]{{; name=.+$}}",24],["// FOO_OBJECT_DOT-NEXT: Decl[InstanceMethod]/CurrNominal: instanceFunc0()[#Void#]{{; name=.+$}}",24],["// OMIT_KEYWORD4-NOT:    Decl[InstanceMethod]",22],["// OMIT_KEYWORD3-NOT:    Decl[InstanceVar]/Super:            var protoAVarRW: Int{{; name=.+$}}",21],["// OMIT_KEYWORD2-NOT:    Decl[InstanceVar]/Super:            var protoAVarRW: Int{{; name=.+$}}",21],["// OMIT_KEYWORD2-NOT:    Decl[Constructor]",20]],"useCount":5747},{"word":"Default","context":[["style: UIAlertActionStyle.Default,",170],["style: .Default,",227],["toolbar.barStyle = UIBarStyle.Default",359],["case .Default:",363],["case Default",378],["alert.addAction(UIAlertAction(title: \"OK\", style: UIAlertActionStyle.Default, handler: nil))",198],["ac.addAction(UIAlertAction(title: \"OK\", style: .Default, handler: nil))",138],["alert.addAction(UIAlertAction(title: \"OK\", style: .Default, handler: nil))",140],["alert.addAction(UIAlertAction(title: \"Ok\", style: UIAlertActionStyle.Default, handler: nil))",124],["alertController.addAction(UIAlertAction(title: OKString, style: UIAlertActionStyle.Default, handler: { _ in",138]],"useCount":9913},{"word":"Delete","context":[["case NSFetchedResultsChangeType.Delete:",56],["// Delete the row from the data source",1654],["if editingStyle == .Delete {",2208],["case .Delete:",707],["if editingStyle == UITableViewCellEditingStyle.Delete {",145],["if (editingStyle == UITableViewCellEditingStyle.Delete) {",107],["return .Delete",91],["case Delete",88],["// Delete",72],["return UITableViewCellEditingStyle.Delete",68]],"useCount":6185},{"word":"Dictionary","context":[["override public func encode() throws -> Dictionary<String,Any> {",544],["guard let jsDataCast = jsonData as? Dictionary<String,Any> else {",553],["case (.Dictionary, .Dictionary):",577],["case (.Dictionary, .Dictionary):",577],["return .Dictionary(output)",627],["case .Dictionary(let dict):",660],["return .Dictionary(d)",1589],["var parameters = Dictionary<String, Any>()",957],["var parameters = Dictionary<String, AnyObject>()",834],["case .Dictionary:",785]],"useCount":19745},{"word":"DispatchQueue","context":[["DispatchQueue.main.async { [weak self] in",117],["DispatchQueue.global(qos: .default).async {",76],["DispatchQueue.main.async",79],["DispatchQueue.global(qos: DispatchQoS.QoSClass.default).async(execute: { () -> Void in",95],["DispatchQueue.main.async { () -> Void in",106],["queue: DispatchQueue? = nil,",126],["DispatchQueue.global().async {",180],["DispatchQueue.main.async(execute: { () -> Void in",393],["DispatchQueue.main.async(execute: {",737],["DispatchQueue.main.async {",2077]],"useCount":5690},{"word":"Disposable","context":[["func run() -> Disposable {",459],["let createView: () -> (UICollectionView, Disposable) = {",95],["/// Returns a Disposable which can be used to interrupt the work associated",103],["let createView: () -> (UITableView, Disposable) = {",108],["- returns: Disposable object that can be used to unbind.",111],["var connection: Disposable! = nil",128],["var subscription: Disposable! = nil",158],["var disposable: Disposable!",175],["-> Disposable {",211],["init(parent: Parent, observer: O, cancel: Disposable) {",240]],"useCount":4812},{"word":"Dispose","context":[["// Dispose of any resources that can be recreated.",24097],["// Dispose of any resources that can be recreated",53],["// Dispose only after notifying the Signal, so disposal",34],["// Dispose only after notifying observers, so disposal logic",28],["//        // Dispose of any resources that can be recreated.",27]],"useCount":24239},{"word":"Do","context":[["/// Internal class. Do not use directly.",89],["// Do any additional setup after loading the view, typically from a nib.",9879],["// Do view setup here.",278],["// Do any additional setup after loading the view.",6596],["This method is exposed since the compiler requests. Do not call it.",86],["/// different invocations of the same program.  Do not persist the",70],["// Do nothing",236],["// Do Not Edit Directly!",144],["///   different invocations of the same program.  Do not persist the",101],["// Do any additional setup after loading the view from its nib.",89]],"useCount":19063},{"word":"Double","context":[["func delay(delay:Double, closure:()->()) {",154],["public extension Double {",175],["public var rampTime: Double = AKSettings.rampTime {",190],["var results = [Double](count: x.count, repeatedValue: 0.0)",202],["public var double: Double? {",222],["public var doubleValue: Double {",225],["yValue: Double,",265],["extension Double {",378],["Int64(delay * Double(NSEC_PER_SEC))",318],["return Double(self)",149]],"useCount":31566},{"word":"E","context":[["throw E.X",164],["func g<T where T.E == F>(f: B<T>) {",121],["-> Driver<E> {",114],["typealias E = O.E",112],["typealias E = O.E",112],["typealias R = O.E",133],["func on(event: Event<E>) {",159],["typealias E",177],["} //F.E.",255],["-> Observable<E> {",549]],"useCount":7662},{"word":"Element","context":[["associatedtype Element",365],["public typealias Element = T",155],["typealias Element = T",162],["case .Element(let elem):",165],["typealias Element",173],["public mutating func next() -> Element? {",183],["func on(event: Event<Element>) {",195],["typealias Element = ElementType",126],["let source: Observable<Element>",127],["typealias Element = Int",153]],"useCount":17965},{"word":"Error","context":[["case .Error(let error):",861],["case .Error:",716],["XCTAssertNil(error, \"Error\")",364],["case Error",293],["print(\"Error: \\(error)\")",245],["case Error(NSError)",176],["public enum Error: ErrorType {",181],["// MARK: - Error",190],["print(\"Error: \\(error.localizedDescription)\")",200],["case let .Error(error):",237]],"useCount":21551},{"word":"FIXME","context":[["// FIXME: alignof differs from the ABI alignment on some architectures",80],["// FIXME: Unsupported",84],["// FIXME: use LifetimeTracked.",84],["// FIXME: the test is too slow when the standard library is not optimized.",96],["// FIXME: rdar://problem/19648117 Needs splitting objc parts out",106],["// FIXME: END -enable-source-import hackaround",112],["// FIXME: extra reallocation, should be expectEqual()",80],["// FIXME: Uses an Any to avoid coupling a particular Cocoa type.",118],["// FIXME: BEGIN -enable-source-import hackaround",112],["// FIXME: we should print the non-API param name rdar://20962472",80]],"useCount":6497},{"word":"Failed","context":[["case Failed",103],["case .Failed:",322],["case .Failed(_):",57],["dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\" as AnyObject?",70],["case .Failed, .Interrupted:",75],["completion(.Failed(error))",87],["// If an error is encountered, use NCUpdateResult.Failed",125],["case let .Failed(error):",265],["fatalError(\"Failed to deserialize\")",962],["dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\"",1439]],"useCount":6216},{"word":"Failure","context":[["print(\"Failure to save context: \\(error)\")",133],["case .Failure(let err):",180],["case .Failure(_):",177],["guard error == nil else { return .Failure(error!) }",123],["case Failure(NSError)",115],["completion(.Failure(error))",107],["case let .Failure(error):",304],["return .Failure(error)",398],["case .Failure:",601],["case .Failure(let error):",1787]],"useCount":6878},{"word":"FileCheck","context":[["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.dl.txt",127],["// RUN: %target-swift-frontend -emit-silgen %s | %FileCheck %s",163],["// RUN: %FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",164],["// RUN: %FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",195],["// RUN: %target-swift-frontend %s -emit-ir -g -o - | FileCheck %s",156],["// RUN: %target-swift-frontend -emit-silgen %s | FileCheck %s",274],["// RUN: %target-run-simple-swift | FileCheck %s",421],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["// RUN: %target-run-simple-swift | %FileCheck %s",132]],"useCount":5977},{"word":"Float","context":[["var result: Float = 0.0",84],["public var float: Float? {",188],["amplitudeParameter?.setValue(Float(newValue), originator: token!)",82],["extension Float {",115],["internalAU?.amplitude = Float(amplitude)",102],["self.updatePriority(Float(priority))",88],["self.updateOffset(Float(amount))",88],["// MARK: - Int, Double, Float, Int8, Int16, Int32, Int64",143],["var results = [Float](count: x.count, repeatedValue: 0.0)",182],["public var floatValue: Float {",185]],"useCount":14464},{"word":"Foo","context":[["case Foo",49],["return Foo()",55],["associatedtype Foo",59],["class Foo {",223],["let foo = Foo()",77],["class Foo<T>: NSObject {",53],["typealias Foo = Int",81],["import Foo",84],["extension Foo {",96],["struct Foo {",128]],"useCount":6647},{"word":"For","context":[["/// means the are no items in that collection. For strings, it is an empty string.",60],["For example:",177],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["For more information take a look at `DelegateProxyType`.",164],["/// For example:",146],["// For great debugging!",126],["/// A Nimble matcher that succeeds when a value is \"empty\". For collections, this",69],["For more information take a look at `DelegateProxyType` protocol documentation.",112],["For example,",94],["@inline(__always) // For performance reasons.",105]],"useCount":4161},{"word":"Form","context":[["let options = navigationOptions ?? Form.defaultNavigationOptions",36],["extension Form {",21],["/// contents using Form KC.",24],["/// contents using Form D.",24],["/// contents using Form KD.",24],["/// contents using Form C.",24],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120],["// This Source Code Form is subject to the terms of the Mozilla Public",266],["case .Form:",46],["let form = Form()",46]],"useCount":4050},{"word":"Foundation","context":[["import Foundation",119213],["//import Foundation",272],["//: # Swift Foundation",41],["import Foundation;",58],["import Foundation.NSError",63],["/// - Experiment: This is a draft API currently under consideration for official import into Foundation",75],["// Foundation not needed",82],["//Confirming to the protocol CustomStringConvertible of Foundation",100],["public // SPI(Foundation)",102],["@_exported import Foundation // Clang module",174]],"useCount":121164},{"word":"GET","context":[["return .GET",483],["Alamofire.request(.GET, url)",123],["/// GET",128],["Alamofire.request(.GET, URL)",156],["manager.request(.GET, URL)",173],["Alamofire.request(.GET, request, parameters: [\"fo\": \"ba\"]).responseJSON  {response in",174],["Alamofire.request(.GET, URLString)",225],["case GET = \"GET\"",285],["case GET = \"GET\"",285],["request.HTTPMethod = \"GET\"",354]],"useCount":7193},{"word":"Get","context":[["Get the public key from a certificate",43],["/// Get all Entry objects at the given index across all DataSets.",50],["Get the delegate implementation.",73],["/// Get the image URL binded to this image view.",48],["/// :param indexes Get elements from these indexes",43],["Get the certificate chain for the trust",43],["/// Get the first object in the wrapper object.",91],["// Get the new view controller using [segue destinationViewController].",848],["// Get the new view controller using segue.destinationViewController.",6255],["Get the public key from a certificate data",43]],"useCount":9813},{"word":"Given","context":[["/// Given a version like this, though,",16],["* Given an angle in radians, creates a vector of length 1.0 and returns the",17],["// Given the SO answer and caveats presented there, we'll call layoutIfNeeded() instead.",25],["// Given I have an SDK",36],["// Given, When, Then",40],["//Given",41],["Given the following code:",42],["// Given, When",166],["// Given",6310],["//  Given",28]],"useCount":6811},{"word":"HTTP","context":[[":param: success The block that is run on a sucessful HTTP Request.",65],["XCTAssertEqual(response!.statusCode, HTTPStatusCode.OK, \"HTTP Status code was \\(response!.statusCode)\")",70],["HTTP method definitions.",75],["Associates an HTTP Basic credential with the request.",73],[":param: failure The block that is run on a failed HTTP Request.",74],["import HTTP",314],[":param: method The HTTP method.",310],[":param: parameters The parameters are HTTP parameters you would like to send.",131],["- parameter method:    The HTTP method.",123],["- parameter headers:   The HTTP headers. `nil` by default.",123]],"useCount":5121},{"word":"HTTPMethod","context":[["request.HTTPMethod = \"POST\"",783],["request.HTTPMethod = \"GET\"",354],["public var method: HTTPMethod {",188],["method: HTTPMethod = .post,",84],["public enum HTTPMethod: String {",92],["req.HTTPMethod = \"POST\"",98],["var method: HTTPMethod {",104],["request.HTTPMethod = method",108],["request.HTTPMethod = method.rawValue",112],["mutableURLRequest.HTTPMethod = method.rawValue",141]],"useCount":4157},{"word":"Hello","context":[["print(\"Hello\")",48],["print(\"Hello world\")",1202],["var str = \"Hello, playground\"",706],["print(\"Hello, World!\")",78],["println(\"Hello, World!\")",65],["expectEqual(\"Hello, world!%42\", String(format: \"Hello, %@!%%%ld\",",58],["expectEqual(\"Hello, world!%42\", String(format: \"Hello, %@!%%%ld\",",58],["obj.show(\"Hello world!\")",56],["var greeting = \"Hello!\"",52],["greeting = \"Hello, \\(name)\"",49]],"useCount":4066},{"word":"I","context":[["// U+0049 LATIN CAPITAL LETTER I",164],["// U+0069 LATIN SMALL LETTER I",372],["// CHECK: [[I:%[0-9]+]] = load [[IADDR]]",198],["// U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE",173],["/// I.e. [2, 3] will paint [--   --   ]",70],["///     // Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"",56],["///     let line = \"BLANCHE:   I don't want realism. I want magic!\"",56],["///     let line = \"BLANCHE:   I don't want realism. I want magic!\"",56],["///     // Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"",56],["///     // Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"",56]],"useCount":4803},{"word":"IBAction","context":[["// MARK: - IBAction",93],["@IBAction func login(sender: AnyObject) {",76],["@IBAction func onTap(sender: AnyObject) {",80],["@IBAction func operate(sender: UIButton) {",82],["@IBAction",183],["@IBAction func cancel(sender: AnyObject) {",122],["@IBAction func save(sender: AnyObject) {",87],["@IBAction func appendDigit(sender: UIButton) {",87],["@IBAction func enter() {",83],["@IBAction func cancel(sender: UIBarButtonItem) {",82]],"useCount":5499},{"word":"IBInspectable","context":[["@IBInspectable var cornerRadius: CGFloat = 0 {",71],["@IBInspectable public var borderColor: UIColor? {",120],["@IBInspectable",1384],["@IBInspectable public var borderWidth: CGFloat = 0 {",67],["@IBInspectable var borderColor: UIColor? {",67],["@IBInspectable var borderWidth: CGFloat = 0 {",66],["@IBInspectable public var cornerRadius: CGFloat = 0 {",64],["@IBInspectable public var shadowColor: UIColor? {",58],["@IBInspectable public var placeholderColor: UIColor? {",54],["@IBInspectable var cornerRadius: CGFloat {",82]],"useCount":5996},{"word":"IBOutlet","context":[["@IBOutlet weak var webView: UIWebView!",392],["@IBOutlet weak var label: UILabel!",458],["@IBOutlet weak var window: NSWindow!",514],["@IBOutlet weak var mapView: MKMapView!",492],["@IBOutlet weak var collectionView: UICollectionView!",529],["@IBOutlet weak var scrollView: UIScrollView!",531],["@IBOutlet weak var nameLabel: UILabel!",945],["@IBOutlet weak var imageView: UIImageView!",1102],["@IBOutlet weak var tableView: UITableView!",2091],["@IBOutlet weak var titleLabel: UILabel!",1163]],"useCount":37510},{"word":"If","context":[["//If can't set InputAccessoryView. Then return",155],["//  If you use these solutions in your apps, you can give attribution to",504],["/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.",244],["/// If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",196],["/// If `sub` is `Int`, return `subscript(index:)`; If `sub` is `String`,  return `subscript(key:)`.",142],["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["If validation fails, subsequent calls to response handlers will have an associated error.",245],["//  If you have any questions, you can contact me directly",504],["/// If `sub` is `Int`, return `subscript(index:)`; If `sub` is `String`,  return `subscript(key:)`.",142],["/// If `animate(...)` is called, no further calling of `invalidate()` is necessary to refresh the chart.",484]],"useCount":18899},{"word":"In","context":[["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["/// In an empty collection, `startIndex == endIndex`.",134],["// In future, we'll want to link to /settings and an upgrade page, respectively.",70],["/// In other words, this will create a new SignalProducer which will apply",70],["// In the simplest, most efficient, case, reload the table view.",63],["/// In order to decode a code unit sequence completely, this function should",61],["/// There are two ways we can enable reader mode. In the simplest case we open a URL to our internal reader mode",56],["/// case we simply open a new page with the original url. In the more complicated page, the non-readerized version",56],["/// Disabling reader mode can mean two things. In the simplest case we were opened from the reading list, which",56]],"useCount":14579},{"word":"Index","context":[["public func index(before i: Index) -> Index {",117],["public func index(before i: Index) -> Index {",117],["var startIndex: Index { get }",94],["// MARK: Index Retrieval",133],["public typealias Index = Int",161],["public func index(after i: Index) -> Index {",168],["public func index(after i: Index) -> Index {",168],["public var startIndex: Index {",236],["var endIndex: Index { get }",84],["public var endIndex: Index {",239]],"useCount":10333},{"word":"IndexPath","context":[["func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {",404],["func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",491],["func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {",228],["override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {",208],["func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {",166],["override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {",140],["public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",99],["func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",817],["override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",982],["override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",630]],"useCount":6270},{"word":"Initialization","context":[["// MARK: - Initialization -",31],["// Initialization",117],["//MARK: Initialization",103],["//MARK: - Initialization",66],["/// MARK: Initialization/Deinitialization",38],["/*  Singleton Object Initialization. */",25],["// MARK: - Initialization Tests",21],["// MARK: Initialization",1206],["// MARK: - Initialization",1500],["// Initialization code",3175]],"useCount":6418},{"word":"Insert","context":[["// Insert a new key-value pair.",197],["// Insert code here to add functionality to your managed object subclass",538],["case .Insert:",593],["// Insert code here to initialize your application",895],["// Insert code here to tear down your application",1167],["} else if editingStyle == .Insert {",1760],["case NSFetchedResultsChangeType.Insert:",56],["/// Insert `newElement` at index `i`.",49],["// Insert",42],["case Insert",45]],"useCount":6228},{"word":"Int","context":[["public var hashValue: Int {",1327],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["override func numberOfSectionsInTableView(tableView: UITableView) -> Int {",4481],["func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",1580],["func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",1580],["var hashCode:Int = 7",1447],["func numberOfSectionsInTableView(tableView: UITableView) -> Int {",2424],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933]],"useCount":240497},{"word":"Int32","context":[["var serialize_size:Int32 = memoizedSerializedSize",1447],["override public func serializedSize() -> Int32 {",918],["override internal func serializedSize() -> Int32 {",529],["var a: Int32 = 0",210],["public var int32: Int32? {",145],["public var int32Value: Int32 {",144],["// MARK: - Int, Double, Float, Int8, Int16, Int32, Int64",143],["if let fd:Int32=self.fd{",89],["var limit:Int32 = input.pushLimit(length)",90],["var length:Int32 = input.readRawVarint32()",98]],"useCount":14418},{"word":"Int64","context":[["private var expectedContentLength: Int64?",82],["// MARK: - Int, Double, Float, Int8, Int16, Int32, Int64",143],["public func progress(closure: ((Int64, Int64, Int64) -> Void)? = nil) -> Self {",84],["Int64(delay * Double(NSEC_PER_SEC))",318],["public var int64: Int64? {",152],["public var int64Value: Int64 {",144],["public func progress(closure: ((Int64, Int64, Int64) -> Void)? = nil) -> Self {",84],["public func progress(closure: ((Int64, Int64, Int64) -> Void)? = nil) -> Self {",84],["let popTime = dispatch_time(DISPATCH_TIME_NOW, Int64( Double(NSEC_PER_SEC) * seconds ))",89],["///     let id = Expression<Int64>(\"id\")",104]],"useCount":11098},{"word":"JSON","context":[["extension JSON {",1559],["- returns: The created JSON",385],["throw ProtocolBuffersError.InvalidProtocolBuffer(\"Invalid JSON data\")",202],["let json = JSON(data: data)",214],["let json = JSON(value)",218],["var r = JSON.null",225],["public init(json: JSON) throws {",432],["throw ProtocolBuffersError.invalidProtocolBuffer(\"Invalid JSON data\")",553],["var d = [String : JSON]()",704],["var d = [String: JSON]()",1982]],"useCount":37738},{"word":"Key","context":[["- parameter key: Key for the image.",85],["- parameter key:               Key for the image.",75],["// MARK: Key-Value Coding",70],["// Key:",69],["var result = [Key: NewValue](minimumCapacity:source.count)",66],["if _isBridgedVerbatimToObjectiveC(Key.self) &&",52],["let headerWSKeyName         = \"Sec-WebSocket-Key\"",52],["- parameter key: Key used in JSON for decoded value.",130],["public init(dictionaryLiteral elements: (Key, Value)...) {",50],["self.updateValue(v as! Value, forKey: k as! Key)",48]],"useCount":4507},{"word":"LABEL","context":[["// CHECK-LABEL: sil hidden @_TF8builtins16isUniqueOrPinned",68],["// CHECK-LABEL:   #Foo.init!initializer.1:   _TFC7dynamic3Fooc",26],["// CHECK-LABEL: sil hidden @_TF8builtins8isUnique",85],["// CHECK-LABEL: sil @main",56],["// CHECK-LABEL: nil",54],["// CHECK-LABEL: sil hidden @_TFC8lifetime3FooC{{.*}} :",42],["// CHECK-LABEL: sil hidden @_TFC7dynamic3FooC",39],["// CHECK-LABEL: sil hidden @_TFC11objc_thunks19DesignatedOverridesc{{.*}}",34],["// CHECK-LABEL: sil hidden [thunk] @_TToFC7dynamic3Fooc",26],["// CHECK-LABEL: sil hidden @_TFC8lifetime3Fooc{{.*}} :",33]],"useCount":15599},{"word":"Left","context":[["getTransformer(.Left).pixelToValue(&pt)",86],["return .Left",78],["case .Left, .Right:",76],["case .Left:",797],["case Left",576],["attribute: NSLayoutAttribute.Left,",100],["attribute: .Left,",146],["if (axis == .Left)",162],["if (which == .Left)",302],["align: .Left,",188]],"useCount":6575},{"word":"MARK","context":[["// MARK: - Actions",1398],["// MARK: - Navigation",7959],["// MARK: -",6323],["// MARK: - Table view data source",3458],["// MARK: Properties",3383],["// MARK: - Properties",2954],["// MARK: - Initialization",1500],["// MARK: - Core Data Saving support",1458],["// MARK: Initialization",1206],["// MARK: - Core Data stack",1454]],"useCount":138439},{"word":"Map","context":[["required public init?(_ map: Map) {",246],["required init?(map: Map) {",129],["public mutating func mapping(map: Map) {",141],["required init?(map: Map){",142],["override func mapping(map: Map) {",186],["required init?(_ map: Map){",190],["mutating func mapping(map: Map) {",233],["required init?(_ map: Map) {",241],["public func mapping(map: Map) {",314],["func mapping(map: Map) {",846]],"useCount":5289},{"word":"Methods","context":[["// MARK: - View Methods",82],["// MARK: - Instance Methods",89],["// MARK: Helper Methods",91],["// MARK: Public Methods",204],["// MARK: - Public Methods",315],["// MARK: Private Methods",318],["// MARK: - Methods",324],["// MARK: Delegate Methods",327],["// MARK: Methods",360],["// MARK: - Private Methods",368]],"useCount":5319},{"word":"NEXT","context":[["// CHECK-NEXT:    dealloc_stack [[SELF_BOX]]",506],["// CHECK-NEXT: init",546],["// CHECK-NEXT: @end",807],["// CHECK-NEXT: return",657],["// CHECK-NEXT: }",779],["// CHECK-NEXT: return %1",223],["// CHECK-NEXT: true",232],["// CHECK-NEXT:    return [[NEW_SELF]]",231],["// CHECK-NEXT:    try_apply [[UNWRAP_FN]](%0)",231],["// CHECK-NEXT: apply",226]],"useCount":55075},{"word":"NOT","context":[["// CHECK-NOT: release [[C]]",140],["// CHECK-NOT: unconditional_checked_cast archetype_to_archetype",121],["// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!",127],["// TESTABLE-NOT: :[[@LINE-3]]:{{[^:]+}}:",132],["// CHECK-NOT:     release_value [[SELF]]",154],["// CHECK-NOT: checked_cast",152],["// CHECK-NOT: release",146],["// CHECK-NOT: release [[OBJ]]",140],["// CHECK-NOT:     destroy_addr [[SELF_ADDR]]",280],["// CHECK-NOT: unconditional_checked",304]],"useCount":10926},{"word":"NSArray","context":[["return lhs.rawArray as NSArray == rhs.rawArray as NSArray",225],["return lhs.rawArray as NSArray == rhs.rawArray as NSArray",225],["if let _ = value as? NSArray {",75],["let keyValue:NSArray = (value as? NSArray)!",79],["let keyValue:NSArray = (value as? NSArray)!",79],["- parameter data:  The NSData used to convert to json.Top level object in data is an NSArray or NSDictionary",90],["return NSArray()",97],["extension NSArray {",115],["return (lhs.object as! NSArray) == (rhs.object as! NSArray)",153],["return (lhs.object as! NSArray) == (rhs.object as! NSArray)",153]],"useCount":5466},{"word":"NSBundle","context":[["public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",145],["let storyboard = UIStoryboard(name: \"Main\", bundle: NSBundle.mainBundle())",83],["if let info = NSBundle.mainBundle().infoDictionary {",93],["override init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!) {",99],["override public init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",114],["if let path = NSBundle.mainBundle().pathForResource(file, ofType: \"sks\") {",120],["let appVersion = NSBundle.mainBundle().objectForInfoDictionaryKey(\"CFBundleShortVersionString\") as! String",126],["let bundle = NSBundle(forClass: self.dynamicType)",401],["let bundle = NSBundle.mainBundle()",409],["override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",796]],"useCount":5165},{"word":"NSCoder","context":[["required init?(coder aDecoder: NSCoder) {",11632],["required init(coder: NSCoder) {",332],["func encodeWithCoder(aCoder: NSCoder) {",548],["public required init(coder aDecoder: NSCoder) {",841],["required init?(coder: NSCoder) {",890],["required public init(coder aDecoder: NSCoder) {",1034],["public required init?(coder aDecoder: NSCoder) {",1812],["required public init?(coder aDecoder: NSCoder) {",3041],["required init(coder aDecoder: NSCoder) {",5213],["required init?(coder aDecoder: NSCoder)",328]],"useCount":30624},{"word":"NSColor","context":[["import AppKit.NSColor",21],[":returns: The NSColor object",2155],["typealias SWColor = NSColor",22],["typealias Color = NSColor",27],["NSColor.whiteColor().set()",32],["layer1.strokeColor = NSColor(red: 0, green: 0, blue:0, alpha: 1).cgColor",34],["NSColor.blackColor().set()",49],["public typealias Color = NSColor",51],["extension NSColor {",86],["- returns: The NSColor object",1501]],"useCount":4334},{"word":"NSData","context":[["if let data = NSData(contentsOfFile: path) {",115],["let sampleData = target.sampleData as NSData",120],["fragBuffer = NSData(bytes: buffer, length: bufferLen)",123],["func URLSession(session: NSURLSession, dataTask: NSURLSessionDataTask, didReceiveData data: NSData) {",126],["return NSData()",174],["let data = NSData(bytes: bytes, length: bytes.count)",186],["let data = NSData()",219],["func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {",261],["var data: NSData?",312],["extension NSData {",1426]],"useCount":14272},{"word":"NSDate","context":[["extension NSDate {",610],["let now = NSDate()",577],["let date: NSDate",110],["let start = NSDate()",118],["let today = NSDate()",161],["let object = objects[indexPath.row] as! NSDate",171],["let tIn : NSTimeInterval = NSDate.timeIntervalSinceReferenceDate()",182],["return NSDate()",193],["public extension NSDate {",235],["let date = NSDate()",567]],"useCount":14900},{"word":"NSDateFormatter","context":[["let dateFormatter: NSDateFormatter = NSDateFormatter()",72],["let dateFormatter = NSDateFormatter()",1905],["let formatter = NSDateFormatter()",1608],["var dateFormatter = NSDateFormatter()",232],["let df = NSDateFormatter()",174],["var formatter = NSDateFormatter()",132],["let dateFormatter: NSDateFormatter = NSDateFormatter()",72],["dateFormatter = NSDateFormatter()",114],["let fmt = NSDateFormatter()",102],["let format = NSDateFormatter()",83]],"useCount":5949},{"word":"NSDictionary","context":[["public required init(json:NSDictionary?) {",604],["public func toJSON() -> NSDictionary {",608],["return (lhs.object as! NSDictionary) == (rhs.object as! NSDictionary)",154],["func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: NSDictionary?) -> Bool {",493],["func application(application: UIApplication!, didFinishLaunchingWithOptions launchOptions: NSDictionary!) -> Bool {",387],["- parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",326],["return lhs.rawDictionary as NSDictionary == rhs.rawDictionary as NSDictionary",225],["return lhs.rawDictionary as NSDictionary == rhs.rawDictionary as NSDictionary",225],["/// - parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",164],["return (lhs.object as! NSDictionary) == (rhs.object as! NSDictionary)",154]],"useCount":10543},{"word":"NSError","context":[["} catch let error1 as NSError {",797],["var error:NSError?",503],["var err: NSError?",578],["var error: NSError?",3652],["} catch let error as NSError {",3604],["var error: NSError? = nil",2343],["let nserror = error as NSError",1086],["dict[NSUnderlyingErrorKey] = error as NSError",818],["let wrappedError = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",811],["catch let error as NSError {",597]],"useCount":35571},{"word":"NSFileManager","context":[["NSFileManager.defaultManager().moveItemAtURL(location, toURL: destination, error: &fileManagerError)",44],["let urls = NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask)",1545],["let fileManager = NSFileManager.defaultManager()",1391],["let fm = NSFileManager.defaultManager()",306],["let manager = NSFileManager.defaultManager()",200],["let fileManager = NSFileManager()",113],["extension NSFileManager {",93],["if NSFileManager.defaultManager().fileExistsAtPath(path) {",76],["try NSFileManager.defaultManager().removeItemAtPath(path)",62],["try NSFileManager.defaultManager().removeItemAtPath(filePath)",54]],"useCount":5260},{"word":"NSIndexPath","context":[["public func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",365],["func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {",873],["override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {",1197],["func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {",1553],["override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {",1578],["override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {",2166],["override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2792],["func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2927],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915]],"useCount":33964},{"word":"NSLayoutConstraint","context":[["NSLayoutConstraint.activateConstraints([",89],["NSLayoutConstraint.constraints(",103],["NSLayoutConstraint.activateConstraints(constraints)",127],["let constraint = NSLayoutConstraint(",141],["var cons = [NSLayoutConstraint]()",167],["NSLayoutConstraint.activate([",179],["addConstraints(NSLayoutConstraint.constraints(",267],["var constraints = [NSLayoutConstraint]()",327],["NSLayoutConstraint.constraintsWithVisualFormat(",357],["NSLayoutConstraint(",500]],"useCount":5049},{"word":"NSLog","context":[["NSLog(\"Error: %@\", isError)",85],["NSLog(\"Unresolved error \\(error), \\(error!.userInfo)\")",1252],["NSLog(\"%@ did deactivate\", self)",66],["NSLog(\"%@ will activate\", self)",63],["NSLog(\"\\(error)\")",59],["NSLog(\"There is an error here! The JSON object is nil or type is error\")",50],["NSLog(\"Device Motion is not available\")",47],["NSLog(\"Unresolved error \\(error), \\(error.userInfo), \\(error.localizedDescription)\")",133],["NSLog(\"Unresolved error \\(wrappedError), \\(wrappedError.userInfo)\")",811],["NSLog(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")",858]],"useCount":5823},{"word":"NSManagedObjectContext","context":[["lazy var managedObjectContext: NSManagedObjectContext = {",846],["var managedObjectContext = NSManagedObjectContext(concurrencyType: .MainQueueConcurrencyType)",814],["override init(entity: NSEntityDescription, insertIntoManagedObjectContext context: NSManagedObjectContext?) {",118],["lazy var managedObjectContext: NSManagedObjectContext? = {",664],["extension NSManagedObjectContext {",119],["var managedObjectContext = NSManagedObjectContext()",633],["var managedObjectContext: NSManagedObjectContext!",90],["var managedObjectContext: NSManagedObjectContext {",64],["var managedObjectContext: NSManagedObjectContext? = nil",89],["var managedObjectContext = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)",75]],"useCount":5076},{"word":"NSNotification","context":[["func windowWillClose(notification: NSNotification) {",66],["func applicationDidFinishLaunching(aNotification: NSNotification) {",1223],["func applicationWillTerminate(aNotification: NSNotification) {",1037],["func keyboardWillShow(notification: NSNotification) {",242],["func keyboardWillHide(notification: NSNotification) {",238],["func tableViewSelectionDidChange(notification: NSNotification) {",102],["func applicationDidFinishLaunching(aNotification: NSNotification?) {",87],["func notificationReceived(notification: NSNotification) {",85],["func applicationWillTerminate(aNotification: NSNotification?) {",66],["override func controlTextDidChange(obj: NSNotification) {",52]],"useCount":5172},{"word":"NSNotificationCenter","context":[["let center = NSNotificationCenter.defaultCenter()",225],["NSNotificationCenter.defaultCenter()",145],["NSNotificationCenter.defaultCenter().postNotification(notification)",150],["NSNotificationCenter.defaultCenter().removeObserver(self)",2256],["let notificationCenter = NSNotificationCenter.defaultCenter()",546],["NSNotificationCenter.defaultCenter().addObserver(self,",474],["NSNotificationCenter.defaultCenter().addObserver(",392],["NSNotificationCenter.defaultCenter().postNotificationName(",229],["let nc = NSNotificationCenter.defaultCenter()",203],["NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillHideNotification, object: nil)",154]],"useCount":6874},{"word":"NSNull","context":[["case let null as NSNull:",78],["self.object = NSNull()",1280],["self.object =  NSNull()",1136],["self.init(NSNull())",278],["if v is NSNull {",247],["return NSNull()",213],["public var null: NSNull? {",146],["self.object = newValue?.absoluteString ?? NSNull()",124],["case  _ as NSNull:",83],["public static var null: JSON { get { return JSON(NSNull()) } }",75]],"useCount":5820},{"word":"NSNumber","context":[["public init(_ number: NSNumber) {",149],["_ x: NSNumber,",152],["public var numberValue: NSNumber {",152],["// MARK: - NSNumber: Comparable",152],["case let o as NSNumber:",166],["public var number: NSNumber? {",171],["kCIAttributeClass: \"NSNumber\",",172],["case let number as NSNumber:",188],["return NSNumber(double: 0.0)",196],["self.object = NSNumber(value: newValue)",658]],"useCount":14422},{"word":"NSObject","context":[["// MARK: NSObject",189],["func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {",200],["var s = Set<NSObject>(minimumCapacity: 32)",136],["var d = Dictionary<NSObject, AnyObject>(minimumCapacity: 32)",144],["extension NSObject {",395],["class AppDelegate: NSObject, NSApplicationDelegate {",1529],["public extension NSObject {",144],["override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {",293],["class ExtensionDelegate: NSObject, WKExtensionDelegate {",238],["if superclass != NSObject.self {",211]],"useCount":15076},{"word":"NSString","context":[["return NSString(data: data, encoding: encoding) as? String",86],["_XCTRegisterFailure(false, _XCTFailureDescription(assertionType, 1, reason as NSString), message, file, line)",232],["message = NSString(data: response.data, encoding: NSUTF8StringEncoding) as? String",92],["self.object = NSString(string:newValue!)",94],["let data1 = (result as NSString).dataUsingEncoding(NSUTF8StringEncoding)",100],["class func unarchiveFromFile(file : NSString) -> SKNode? {",107],["if \"\\(value)\" as NSString != \"<null>\" {",153],["// - (NSString *)",179],["self.object = NSString(string:newValue)",187],["extension NSString {",225]],"useCount":14984},{"word":"NSTimeInterval","context":[["func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {",416],["let tIn : NSTimeInterval = NSDate.timeIntervalSinceReferenceDate()",182],["func transitionDuration(transitionContext: UIViewControllerContextTransitioning) -> NSTimeInterval {",143],["public func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {",141],["let timeout: NSTimeInterval = 120",84],["NSThread.sleepForTimeInterval(NSTimeInterval(testDuration))",84],["duration: NSTimeInterval,",147],["var duration: NSTimeInterval = Double(SlideMenuOptions.animationDuration)",80],["private var _decelerationLastTime: NSTimeInterval = 0.0",78],["override func update(currentTime: NSTimeInterval) {",69]],"useCount":5944},{"word":"NSURL","context":[["return urls[urls.count-1] as! NSURL",266],["lazy var applicationDocumentsDirectory: NSURL = {",1395],["return urls[urls.count-1] as NSURL",286],["public func kf_setImageWithURL(URL: NSURL,",264],["let url = NSURL(string: urlString)",198],["extension NSURL {",180],["UIApplication.sharedApplication().openURL(NSURL(string: UIApplicationOpenSettingsURLString)!)",135],["if let url = NSURL(string: urlString) {",180],["public var URL: NSURL? {",150],["var url: NSURL?",140]],"useCount":15947},{"word":"NSURLRequest","context":[["var request: NSURLRequest?",376],["let request = NSURLRequest(URL: url)",302],["let request = NSURLRequest(URL: url!)",230],["case File(NSURLRequest, NSURL)",65],["let URLRequest = NSURLRequest(URL: URL)",65],["case Data(NSURLRequest, NSData)",65],["let request = NSURLRequest(URL: URL)",68],["var redirectRequest: NSURLRequest? = request",73],["webView.loadRequest(NSURLRequest(URL: url))",96],["let requestVerifier: ((NSURLRequest) -> Void) = {(request) in",107]],"useCount":4668},{"word":"NSURLSession","context":[["let session = NSURLSession(configuration: config)",85],["let session = NSURLSession(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())",122],["public func URLSession(session: NSURLSession, dataTask: NSURLSessionDataTask, didReceiveData data: NSData) {",96],["let session = NSURLSession.sharedSession()",820],["var session = NSURLSession.sharedSession()",108],["public func URLSession(session: NSURLSession, task: NSURLSessionTask, didCompleteWithError error: NSError?) {",121],["func URLSession(session: NSURLSession, dataTask: NSURLSessionDataTask, didReceiveData data: NSData) {",126],["func URLSession(session: NSURLSession, task: NSURLSessionTask, didCompleteWithError error: NSError?) {",144],["public let session: NSURLSession",153],["session: NSURLSession,",547]],"useCount":5877},{"word":"NSUTF8StringEncoding","context":[["let responseString = NSString(data: data, encoding: NSUTF8StringEncoding) as String!",61],["encoding: NSUTF8StringEncoding)",134],["let data1 = (result as NSString).dataUsingEncoding(NSUTF8StringEncoding)",100],["message = NSString(data: response.data, encoding: NSUTF8StringEncoding) as? String",92],["self.dataEncoding = NSUTF8StringEncoding",89],["let str = self.cStringUsingEncoding(NSUTF8StringEncoding)",76],["let dataString = NSString(data: data, encoding: NSUTF8StringEncoding)",69],[").dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!",184],["guard let data = subject.bridge().dataUsingEncoding(NSUTF8StringEncoding) else {",64],["if let encodedString_ = self.object.stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding) {",66]],"useCount":5357},{"word":"NSUserDefaults","context":[["let ud = NSUserDefaults.standardUserDefaults()",109],["var userDefaults = NSUserDefaults.standardUserDefaults()",74],["extension NSUserDefaults {",142],["var defaults = NSUserDefaults.standardUserDefaults()",144],["let userDefaults = NSUserDefaults.standardUserDefaults()",563],["NSUserDefaults.standardUserDefaults().synchronize()",1088],["let defaults = NSUserDefaults.standardUserDefaults()",1544],["let userDefault = NSUserDefaults.standardUserDefaults()",85],["return NSUserDefaults.standardUserDefaults()",75],["let prefs = NSUserDefaults.standardUserDefaults()",66]],"useCount":5574},{"word":"Navigation","context":[["// MARK: - Navigation",7959],["// MARK: Navigation",260],["// #pragma mark - Navigation",135],["//    // MARK: - Navigation",17],["//MARK: Navigation Methods",19],["// Navigation Title",20],["// Navigation Avatar",20],["* Navigation through the folder hierarchy produces a sequence of models.",22],["//MARK: Navigation",26],["//MARK: - Navigation",57]],"useCount":8648},{"word":"Next","context":[["@param nextAction Next button action name. Usually 'nextAction:(id)item'.",110],["//: [TOC](Table%20Of%20Contents) | [Previous](@previous) | [Next](@next)",942],["//: [Next](@next)",833],["case let .Next(value):",761],["case .Next:",352],["case .Next(let value):",337],["//: [Previous](@previous) | [Next](@next)",170],["hotObservable.on(.Next(2))",140],["case .Next(let element):",110],["hotObservable.on(.Next(1))",121]],"useCount":6638},{"word":"Nimble","context":[["import Nimble",5306],["/// expectations will still go through to the default Nimble handler.",18],["/// @param silently expectations are no longer send to the default Nimble",18],["/// A Nimble matcher that succeeds when the actual value is an instance of the given class.",19],["/// A Nimble matcher that succeeds when the actual set is equal to the expected set.",22],["/// A Nimble matcher that succeeds when the actual value is equal to the expected value.",24],["/// A Nimble matcher that succeeds when the actual string contains the expected substring.",25],["//import Nimble",27],["/// A Nimble matcher that succeeds when a value is close to another. This is used for floating",34],["/// A Nimble matcher that succeeds when a value is \"empty\". For collections, this",69]],"useCount":5855},{"word":"NoError","context":[["let (signal, observer) = Signal<Int, NoError>.pipe()",206],["let signal: Signal<Int, NoError> = Signal { observer in",85],["let (baseSignal, observer) = Signal<Int, NoError>.pipe()",100],["SignalProducer<Int, NoError>(value: 42)",120],["var signal: Signal<Int, NoError>!",136],["var producer: SignalProducer<Int, NoError>!",92],["import enum Result.NoError",186],["var observer: Signal<Int, NoError>.Observer!",328],["let (baseSignal, incomingObserver) = Signal<Int, NoError>.pipe()",83],["let producer = SignalProducer<Int, NoError>.never",88]],"useCount":7273},{"word":"None","context":[["cell.accessoryType = .None",399],["selectionStyle = .None",417],["cell.selectionStyle = .None",562],["case None",922],["cell.selectionStyle = UITableViewCellSelectionStyle.None",350],["tableView.separatorStyle = UITableViewCellSeparatorStyle.None",244],["self = .None",166],["tableView.separatorStyle = .None",363],["case .None:",1247],["return .None",1448]],"useCount":13091},{"word":"Normal","context":[["case .Normal:",238],["case Normal",169],["button.setTitle(title, forState: .Normal)",115],["forState: .Normal)",105],["priority: NSOperationQueuePriority = .Normal,",96],["btn.setTitle(title, forState: .Normal)",81],["button.setTitleColor(UIColor.whiteColor(), forState: .Normal)",73],["if code == statusCode.Normal.rawValue {",71],["setTitle(title, forState: .Normal)",66],["btn.setBackgroundImage(UIImage(named: \"common_button_white_disable\"), forState: UIControlState.Normal)",65]],"useCount":5377},{"word":"Note","context":[["/// - Note: To print without a trailing newline, pass `terminator: \"\"`",53],["//  Note.swift",55],["/// - Note: The hash value is not guaranteed to be stable across",63],["/// - Note:",67],["- Note:",69],["/// **Note:** the hash value is not guaranteed to be stable across",70],["Note:",84],["// Note: Don't move braces to a different line here.",90],["// Note:",91],["- Note: 无",107]],"useCount":4414},{"word":"O","context":[["/// Complexity: O(1)",216],["/// - Complexity: O(1).",622],["/// - Complexity: O(1)",582],["//  These example codes are written for O'Reilly's iOS 8 Swift Programming Cookbook",504],["//  report them to O'Reilly at the following URL:",504],["init(parent: Parent, observer: O, cancel: Disposable) {",240],["init(parent: Parent, observer: O) {",182],["/// - Complexity: O(1) if the collection conforms to",164],["/// - Complexity: O(log(`count`))",155],["/// - Complexity: O(N).",135]],"useCount":9392},{"word":"OSX","context":[["#if os(OSX) || os(iOS)",506],["#if os(OSX)",2325],["@available(OSX, unavailable)",225],["#if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)",323],["if #available(OSX 10.10, *) {",325],["@available(OSX 10.10, iOS 8.0, *)",339],["@available(OSX 10.11, iOS 9.0, *)",369],["@available(OSX, introduced: 10.51)",518],["#if !os(OSX)",642],["#elseif os(OSX)",1209]],"useCount":12753},{"word":"Object","context":[[":returns: Returns The Color Object",197],["/// Object in JSON",143],["// MARK: Object Retrieval",117],["// MARK: Object lifecycle",86],["if let type = type as? Object.Type {",80],["- parameter property: Object to encode to JSON.",80],["class Dog: Object {",60],["import ObjectMapper //Use this to generate Object",50],["import SwiftyJSON\t//Use this to verify the JSON Object",50],["or any other enumerable SequenceType which generates Object.",49]],"useCount":5110},{"word":"Observable","context":[["let source3: Observable<E3>",142],["extension Observable {",139],["return Observable.create { observer in",159],["let source2: Observable<E2>",163],["let source1: Observable<E1>",163],["let items: Observable<[Int]> = Observable.just([1, 2, 3])",199],["let items: Observable<[Int]> = Observable.just([1, 2, 3])",199],["-> Observable<R> {",260],["-> Observable<E> {",549],["let res = scheduler.start { () -> Observable<Int> in",606]],"useCount":8228},{"word":"Optional","context":[["//Optional [String : JSON]",142],["//Optional URL",143],["//Optional string",143],["extension Optional {",150],["//Optional bool",143],["//Optional number",143],["return Optional.None",99],["//Optional [AnyObject]",128],["//Optional [String : AnyObject]",130],["//Optional [JSON]",142]],"useCount":8732},{"word":"Override","context":[["//    @Override",45],["// Override point for customization after application launch.",16653],["// Override to support editing the table view.",1677],["// Override to support conditional editing of the table view.",1645],["// Override to support conditional rearranging of the table view.",1611],["// Override to support rearranging the table view.",1601],["// MARK: Override Closures",300],["// MARK: - Override",95],["// Override me.",47],["// MARK: Override",43]],"useCount":24203},{"word":"P","context":[["protocol P {",2575],["// CHECK: [[POPENED:%[0-9]+]] = open_existential_addr [[P]] : $*P1 to $*@opened([[UUID:\".*\"]]) P1",62],["let t: P {",68],["enum S<T> : P {",71],["} //P.E.",75],["protocol P",75],["var P {",89],["let P {",151],["protocol P {}",188],["protocol P{",280]],"useCount":6734},{"word":"POST","context":[["request.HTTPMethod = \"POST\"",783],["req.HTTPMethod = \"POST\"",98],["case POST = \"POST\"",289],["case POST = \"POST\"",289],["return .POST",221],["request.httpMethod = \"POST\"",158],[".POST,",147],["/// POST",125],["case POST",117],["case .POST:",105]],"useCount":4615},{"word":"Parameter","context":[["- Parameter child: A child UIView to layout.",111],["/// - Parameter path: An optional String specifying the pattern that needs to be",108],["/// - Parameter other: A set of the same type as the current set.",102],["- Parameter aDecoder: A NSCoder instance.",100],["/// - Parameter index: The index that's used to subscript the receiver.",94],["- Parameter touches: A set of UITouch objects.",88],["- Parameter event: A UIEvent object.",88],["/// - Parameter i: A valid index of the collection. `i` must be less than",80],["- Parameter frame: A CGRect instance.",72],["/// - Parameter key: The key that's used to subscript the receiver.",188]],"useCount":6699},{"word":"Parameters","context":[["parameters: Parameters?, completionHandler: ResponseClosure? = nil) -> Task {",43],["/// - Parameters:",4406],["- Parameters:",1671],["*   Parameters     :",103],["parameters: Parameters? = nil,",46],["//  Parameters:",38],["*  - Parameters:",36],["/// - Parameters",35],["struct Parameters {",24],["// MARK: Parameters",23]],"useCount":6779},{"word":"Pass","context":[["XCTAssert(true, \"Pass\")",9334],["// Pass the selected object to the new view controller.",7085],["XCTAssert(pass, \"Pass\")",53],["//        XCTAssert(true, \"Pass\")",42],["/// - Parameter leftover: The remaining range. Pass `nil` If you do",23],["///   buffer. Pass `nil` if you do not need this value.",23],["XCTAssert(theObject == result, \"Pass\")",25],["//        // Pass the selected object to the new view controller.",27],["Pass NULL for a NSInteger pointer parameter if you don't care about that value.",27],["// Trigger cleanup. Pass in the account in case we want to try to remove",39]],"useCount":17130},{"word":"Pods","context":[["//  Pods",4926],["// Pods",11]],"useCount":4937},{"word":"Private","context":[["import Realm.Private",199],["// MARK: - Private",1050],["// MARK: Private",956],["// MARK: - Private Methods",368],["// MARK: Private Methods",318],["// MARK: - Private Properties",296],["// MARK: - Private methods",289],["// MARK: Private methods",254],["// MARK: Private Properties",241],["// MARK: - Private properties",204]],"useCount":9151},{"word":"Properties","context":[["// MARK: Public Properties",192],["// Properties",161],["// MARK: - Instance Properties",82],["//MARK: - Properties",202],["// MARK: Private Properties",241],["// MARK: - Private Properties",296],["//MARK: Properties",323],["// MARK: - Public Properties",247],["// MARK: Properties",3383],["// MARK: - Properties",2954]],"useCount":9628},{"word":"Public","context":[["// MARK: - Public Properties",247],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120],["// MARK: Public",422],["// MARK: - Public Methods",315],["// MARK: - Public",303],["// This Source Code Form is subject to the terms of the Mozilla Public",266],["// MARK: - Public properties",253],["// MARK: - Public methods",210],["// MARK: Public Methods",204],["// MARK: Public methods",200]],"useCount":8273},{"word":"Put","context":[["//        // Put teardown code here. This method is called after the invocation of each test method in the class.",45],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Put the code you want to measure the time of here.",14709],["//        // Put setup code here. This method is called before the invocation of each test method in the class.",42],["// Put incoming elements into a ring buffer to save space. Once all",22],["// Put incoming elements from this sequence in a holding tank, a ring buffer",22],["// Put these decls after code completion points to ensure that delayed",15],["//            // Put the code you want to measure the time of here.",132],["case Put = \"PUT\"",16]],"useCount":57072},{"word":"Quick","context":[["This is useful for using the Quick test metadata (like its name) at",15],["//import Quick",27],["import Quick",4593],["// https://github.com/Quick/Quick",366],["// https://github.com/Quick/Quick",366],["A collection of state Quick builds up in order to work its magic.",15],["be mutated to change Quick's behavior.",16],["Note that, since Quick makes no guarantee as to the order in which",20],["//  Quick",22],["// MARK: - Quick reference",23]],"useCount":5518},{"word":"R","context":[["-> Observable<R> {",260],["override func getResult() throws -> R {",133],["typealias R = O.E",133],["extension R {",99],[") -> R {",100],[") rethrows -> R? {",101],["//  R.swift",114],["//  From: https://github.com/mac-cain13/R.swift",75],["// Implemented [R & M]",150],[") rethrows -> R {",217]],"useCount":4796},{"word":"REQUIRES","context":[["// REQUIRES: OS=macosx",366],["// REQUIRES: CPU=i386_or_x86_64",53],["// REQUIRES: OS=ios",47],["// REQUIRES: swift_repl",31],["// REQUIRES: CPU=x86_64",268],["// REQUIRES: executable_test",2444],["// REQUIRES: swift_interpreter",76],["// REQUIRES: optimized_stdlib",118],["// REQUIRES: objc_interop",2697],["// REQUIRES: asserts",784]],"useCount":7068},{"word":"RUN","context":[["// RUN: not %target-swift-frontend %s -typecheck",5223],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["// RUN: mkdir -p %t",648],["// RUN: rm -rf %t && mkdir -p %t",649],["// RUN: %target-run-simple-swift",724],["// RUN: rm -rf %t",938],["// RUN: %target-parse-verify-swift",1640],["// RUN: not --crash %target-swift-frontend %s -parse",1830],["// RUN: not %target-swift-frontend %s -parse",10778]],"useCount":34344},{"word":"Realm","context":[["try! Realm().beginWrite()",169],["components that integrate with Realm. If you are simply building an app on Realm, it is",111],["try! Realm().commitWrite()",119],["let realm = try! Realm()",1025],["import Realm",951],["let realm = Realm()",308],["import Realm.Dynamic",214],["import Realm.Private",199],["let realm = try Realm()",191],["Realm().beginWrite()",139]],"useCount":10963},{"word":"Request","context":[["//  Request.swift",177],["public func upload(URLRequest: URLRequestConvertible, file: NSURL) -> Request {",107],["extension Request {",705],["-> Request",243],["} else if let delegate = self[downloadTask] as? Request.DownloadTaskDelegate {",147],["public func request(URLRequest: URLRequestConvertible) -> Request {",127],["// MARK: - Request",117],["public func upload(URLRequest: URLRequestConvertible, stream: NSInputStream) -> Request {",107],["public func upload(URLRequest: URLRequestConvertible, data: NSData) -> Request {",107],["public class Request {",101]],"useCount":7895},{"word":"Result","context":[["import enum Result.NoError",186],["public enum Result<T> {",72],["extension Result {",74],["associatedtype Result",81],[") -> Result {",85],["let results: [Result<Int, TestError>] = [",92],["/// - Throws: `Result.Error` if query execution fails.",107],[") rethrows -> Result {",118],["//  Result.swift",142],["import Result",1571]],"useCount":7231},{"word":"Return","context":[[":returns: Return a json found by the path or a null json with error",98],["/// Return a *generator* over the elements of this *sequence*.",179],["- returns: Return a json found by the path or a null json with error",186],["// Return NO if you do not want the item to be re-orderable.",525],["// Return NO if you do not want the specified item to be editable.",528],["// Return the number of sections.",762],["// Return the number of rows in the section.",763],["// Return false if you do not want the item to be re-orderable.",1078],["// Return false if you do not want the specified item to be editable.",1475],["//#warning Incomplete method implementation -- Return the number of items in the section",73]],"useCount":8513},{"word":"Returns","context":[["/// - Returns:  Nothing.",102],["/// Returns a Disposable which can be used to interrupt the work associated",103],["/// - Returns: The resolved service type instance, or nil if no registration for the service type,",111],["/// - Returns: The resolved service type instance, or nil if no registration for the service type",111],["/// Returns the next consecutive value after `self`.",127],["/// - Returns:",133],["- Returns: The current Layout instance.",150],[":returns: Returns The Color Object",197],["Returns the index of the first object matching the given predicate,",198],["/// Returns a mirror that reflects `self`.",215]],"useCount":18502},{"word":"Right","context":[["presentSignInViewController() // TODO UX Right now the flow for sign in and create account is the same",102],["@param action Right button action name. Usually 'doneAction:(IQBarButtonItem*)item'.",80],["case .Right:",926],["return .Right",76],["case .Left, .Right:",76],["Helper function to add Right button on keyboard.",80],["case Right",577],["attribute: .Right,",136],["align: .Right,",132],["attribute: NSLayoutAttribute.Right,",120]],"useCount":5431},{"word":"RxSwift","context":[["// https://github.com/ReactiveX/RxSwift/issues/907",15],["// This file is autogenerated. Take a look at `Preprocessor` target in RxSwift project",24],["## Why use RxSwift?",14],["// Take a look at `Preprocessor` target in RxSwift project",25],["1. Build the **RxSwift-OSX** scheme (**Product** → **Build**).",28],["//  RxSwift",615],["print(RxSwift.resourceCount)",14],["2. Build `RxSwift-OSX` scheme",14],["1. Build the **RxSwift-macOS** scheme (**Product** → **Build**).",12],["import RxSwift",4200]],"useCount":4995},{"word":"S","context":[["struct S {",1456],["enum S {",874],["struct S<T {",116],["// CHECK:       bb0({{.*}} [[SELF_ADDR:%.*]] : $*S):",126],["struct S {}",153],["struct S{",309],["// CHECK: metatype $@thick S.Type",216],["struct S",208],["enum S{",204],["enum S",156]],"useCount":11521},{"word":"See","context":[["See also:",75],["/// See https://github.com/groue/GRDB.swift/#the-query-interface",81],["// See 1159373 - Disable long press back/forward for backforward list",82],["// See the use restrictions at http://help.arcgis.com/en/sdk/10.0/usageRestrictions.htm",96],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["* See source code files for contributors.",370],["- parameter optionsInfo:       A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",212],["See http://tools.ietf.org/html/rfc7231#section-4.3",139]],"useCount":18322},{"word":"Self","context":[["func +(lhs: Self, rhs: Self) -> Self",61],["func +(lhs: Self, rhs: Self) -> Self",61],["-> Self",273],["- returns: Self, allowing method chaining",100],["func +(lhs: Self, rhs: Self) -> Self",61],["public func validate() -> Self {",62],["public func authenticate(usingCredential credential: NSURLCredential) -> Self {",68],["return Self(results)",80],["public func progress(closure: ((Int64, Int64, Int64) -> Void)? = nil) -> Self {",84],["-> Self {",93]],"useCount":7732},{"word":"Serialization","context":[["let path = Serialization._StringSerializer.deserialize(dict[\"path\"] ?? .Null)",109],["\"cursor\": Serialization._StringSerializer.serialize(value.cursor),",85],["\"shared_folder_id\": Serialization._StringSerializer.serialize(value.sharedFolderId),",85],["responseSerializer: Serialization._VoidSerializer,",79],["let path = Serialization._StringSerializer.deserialize(dict[\"path\"] ?? .null)",72],["\"cursor\": NullableSerializer(Serialization._StringSerializer).serialize(value.cursor),",62],["\"path\": Serialization._StringSerializer.serialize(value.path),",181],["\"name\": Serialization._StringSerializer.serialize(value.name),",114],["\"url\": Serialization._StringSerializer.serialize(value.url),",61],["let tag = Serialization.getTag(d)",1011]],"useCount":4607},{"word":"Set","context":[["let s1 = Set([1010, 2020, 3030])",316],["override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",445],["override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {",308],["override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {",298],["override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {",293],["let s2 = Set([1010, 2020, 3030])",272],["//: User Interface Set up",245],["let s1 = Set([1010, 2020, 3030, 4040, 5050, 6060])",561],["override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",1186],["/* Set the scale mode to scale to fit the window */",363]],"useCount":19526},{"word":"Signal","context":[["/// Creates a Signal from the producer, then adds exactly one observer to",87],["return Signal { observer in",953],["var observer: Signal<Int, NoError>.Observer!",328],["let (signal, observer) = Signal<Int, NoError>.pipe()",206],["var signal: Signal<Int, NoError>!",136],["var observer: Signal<Int, TestError>.Observer!",111],["let (baseSignal, observer) = Signal<Int, NoError>.pipe()",100],["return signal.observe(Signal.Observer { event in",97],["let signal: Signal<Int, NoError> = Signal { observer in",85],["let signal: Signal<Int, NoError> = Signal { observer in",85]],"useCount":10033},{"word":"SignalProducer","context":[["typealias Inner = SignalProducer<Int, NoError>",72],["SignalProducer<Int, NoError>(value: 42)",120],["return SignalProducer { observer, disposable in",338],["return SignalProducer.empty",112],["return SignalProducer { observer, outerDisposable in",105],["return SignalProducer { observer, compositeDisposable in",105],["var producer: SignalProducer<Int, NoError>!",92],["let producer = SignalProducer<Int, NoError>.never",88],["typealias Inner = SignalProducer<Int, TestError>",72],["let original = SignalProducer.attemptWithResults(results)",72]],"useCount":7766},{"word":"Source","context":[["// Data Source",33],["// MARK: - Page View Controller Data Source",47],["// MARK: UITableView Data Source",30],["// See https://github.com/WebKit/webkit/blob/master/Source/WebKit2/UIProcess/Cocoa/NavigationState.mm#L390",52],["//  Source: https://github.com/hilen/TimedSilver",54],["// MARK: - Table View Data Source",66],["* JBoss, Home of Professional Open Source.",196],["// This Source Code Form is subject to the terms of the Mozilla Public",266],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120],["// MARK: Table View Data Source Methods",24]],"useCount":4193},{"word":"Static","context":[["return Static.instance",783],["dispatch_once(&Static.token) {",269],["private struct Static { static var AssociationKey: UInt8 = 0 }",74],["private struct Static {",58],["return Static.cache",45],["struct Static",40],["// Static member of extension returning Self)",30],["dispatch_once(&Static.onceToken) {",792],["return Static.instance!",875],["struct Static {",2180]],"useCount":6008},{"word":"String","context":[["public var description: String {",6709],["extension String {",3994],["var description: String {",2595],["let name: String",2029],["var d = [String: JSON]()",1982],["public var debugDescription: String {",1739],["override init(style: UITableViewCellStyle, reuseIdentifier: String?) {",1654],["var name: String",1188],["public var description : String {",1262],["var dict = [String: AnyObject]()",1334]],"useCount":246587},{"word":"Subscription","context":[["Subscription(200, 250)",395],["XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])",201],["Subscription(200, 220)",209],["Subscription(200, 210)",226],["Subscription(200, 400)",230],["Subscription(200, 300)",233],["Subscription(200, 230)",234],["XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])",244],["Subscription(200, 225)",248],["Subscription(200, 1000)",375]],"useCount":9064},{"word":"Success","context":[["case .Success(let value):",424],["case .Success:",1321],["case Success",219],["return .Success",200],["// Success",166],["case .Success(_):",154],["case .Success(let data):",149],["case .Success(let box):",140],["case let .Success(value):",127],["case Success(T)",118]],"useCount":9287},{"word":"Swift","context":[["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// This source file is part of the Swift.org open source project",14622],["//  Socket.IO-Client-Swift",216],["//  These example codes are written for O'Reilly's iOS 8 Swift Programming Cookbook",504],["//  You can purchase \"iOS 8 Swift Programming Cookbook\" from",504],["//  at http://vandadnp.wordpress.com for daily tips and tricks in Swift",504],["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["This source file is part of the Swift.org open source project",551],["import Swift",755],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954]],"useCount":44159},{"word":"SwiftyJSON","context":[["import SwiftyJSON",3782],["@testable import SwiftyJSON",19],["- parameter json: JSON object from SwiftyJSON.",22],["// MARK: SwiftyJSON Initalizers",22],["let myjson = SwiftyJSON.JSON(JSON!)",24],["//import SwiftyJSON",34],["//Reference https://github.com/SwiftyJSON/SwiftyJSON",50],["//Reference https://github.com/SwiftyJSON/SwiftyJSON",50],["import SwiftyJSON\t//Use this to verify the JSON Object",50],["//  SwiftyJSON.swift",148]],"useCount":4328},{"word":"T","context":[["let ew0 = try T(from: vw0)",684],["fileprivate func < <T : Comparable>(lhs: T?, rhs: T?) -> Bool {",269],["throw Abort.invalidParameter(\"w0\", T.self)",684],["fileprivate func < <T : Comparable>(lhs: T?, rhs: T?) -> Bool {",269],["fileprivate func < <T : Comparable>(lhs: T?, rhs: T?) -> Bool {",269],["// CHECK: metatype $@thick G<T>.Type",216],["func markUsed<T>(_ t: T) {}",210],["func markUsed<T>(_ t: T) {}",210],["var value: T",187],["init(_ value: T) {",174]],"useCount":61770},{"word":"T0","context":[["// CHECK-NEXT: [[SELF:%.*]] = upcast [[T0]] : $Derived to $Base",52],["// CHECK-NEXT: [[T1:%.*]] = load i8*, i8** [[T0]]",51],["// CHECK-NEXT: [[T0:%.*]] = load %2 : $*Derived",48],["// CHECK-NEXT:  apply [[T0]]<Cat>([[ARRAY]])",48],["// CHECK-NEXT:  [[T0:%.*]] = function_ref @_TFs29_deallocateUninitializedArray",48],["// CHECK-NEXT: return [[T0]]",46],["// CHECK:   [[T1:%.*]] = apply [[T0]]([[SELF]])",60],["// CHECK:   [[T1:%.*]] = pointer_to_address [[T0]] : $Builtin.RawPointer to $*Int32",80],["// CHECK:   [[T0:%.*]] = struct_extract [[PTR]]",104],["// CHECK:   [[T0:%.*]] = apply [[ADDRESSOR]]([[SELF]])",130]],"useCount":5026},{"word":"TODO","context":[["// TODO:",189],["return false//TODO",147],["presentSignInViewController() // TODO UX Right now the flow for sign in and create account is the same",102],["// TODO: recognize .NotStarted.",79],["// TODO: Error handling.",78],["// TODO: @auto_string expression1",236],["// TODO: @auto_string expression2",236],["return 0//TODO",388],["// TODO",527],["//TODO",665]],"useCount":7302},{"word":"Table","context":[["[Table of Contents](Table%20of%20Contents) | [Previous](@previous) | [Next](@next)",92],["// #pragma mark - Table view data source",55],["// MARK: - Table View Data Source",66],["// MARK: - Table View Delegate",72],["[Table of Contents](Table%20of%20Contents) | [Previous](@previous) | [Next](@next)",92],["// MARK: - Table view data source",3458],["//: [TOC](Table%20Of%20Contents) | [Previous](@previous) | [Next](@next)",942],["// MARK: - Table View",678],["///     let users = Table(\"users\")",229],["// MARK: - Table view delegate",172]],"useCount":7314},{"word":"Test","context":[["println(\"Test complete!\")",77],["//  Test",66],["// CHECK: strong_release %0 : $Test",70],["struct Test: Mappable {",80],["addCompletionBlockToTestOperation(operation, withExpectation: expectationWithDescription(\"Test: \\(#function)\"))",86],["// Test",120],["let expectation = expectationWithDescription(\"Test: \\(#function)\")",123],["XCTFail(\"Test encountered unexpected error: \\(error)\")",130],["// Test case found by fuzzing",36402],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558]],"useCount":77088},{"word":"TestBridgedKeyTy","context":[["expectTrue(s.contains(TestBridgedKeyTy(1010)))",220],["expectTrue(s.contains(TestBridgedKeyTy(2020)))",176],["expectTrue(s.contains(TestBridgedKeyTy(3030)))",176],["expectTrue(s1.contains(TestBridgedKeyTy(1010)))",108],["assert(d1[TestBridgedKeyTy(10)]!.value == 1010)",90],["var v = dVV[TestBridgedKeyTy(10)]",72],["v = dVC[TestBridgedKeyTy(20)]",72],["v = dVV[TestBridgedKeyTy(20)]",72],["v = dVC[TestBridgedKeyTy(30)]",72],["var v = dVC[TestBridgedKeyTy(10)]",72]],"useCount":4971},{"word":"TestError","context":[["var error: TestError?",274],["var observer: Signal<Int, TestError>.Observer!",111],["let (baseSignal, observer) = Signal<Int, TestError>.pipe()",73],["expect(error).to(equal(TestError.Default))",108],["observer.sendFailed(TestError.Default)",97],["let results: [Result<Int, TestError>] = [",92],["expect(error) == TestError.Default",79],["expect(error) == TestError.default",78],["let (signal, observer) = Signal<Int, TestError>.pipe()",77],["expect(result?.error).to(equal(TestError.Default))",77]],"useCount":4209},{"word":"TestObjCKeyTy","context":[["d[TestObjCKeyTy(30)] = TestObjCValueTy(1030)",212],["expectTrue(s.contains(TestObjCKeyTy(2020)))",85],["expectTrue(s.contains(TestObjCKeyTy(3030)))",85],["expectTrue(s.contains(TestObjCKeyTy(1010)))",102],["let kv = ((key as! TestObjCKeyTy).value, (value as! TestObjCValueTy).value)",180],["s.insert(TestObjCKeyTy(i))",187],["d[TestObjCKeyTy(10)] = TestObjCValueTy(1010)",212],["d[TestObjCKeyTy(20)] = TestObjCValueTy(1020)",212],["{ ($0 as! TestObjCKeyTy).value })",238],["{ ($0 as! TestObjCKeyTy).value },",288]],"useCount":6731},{"word":"TestScheduler","context":[["/// Initializes a TestScheduler with the given start date.",20],["lock.name = \"org.reactivecocoa.ReactiveCocoa.TestScheduler\"",17],["let scheduler = TestScheduler()",90],["var scheduler: TestScheduler!",80],["scheduler = TestScheduler()",61],["var testScheduler: TestScheduler!",105],["let testScheduler = TestScheduler()",251],["let scheduler = TestScheduler(initialClock: 0)",4898],["let startScheduler = TestScheduler()",23],["testScheduler = TestScheduler()",103]],"useCount":5776},{"word":"The","context":[["- returns: The request.",495],["/// :param array The array to source from.",325],["- returns: The created JSON",385],[":returns: The created upload request.",408],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["* <p>The default implementation does nothing.</p>",562],[":returns: The request.",663],["- returns: The NSColor object",1501],[":returns: The UIColor object",2155],[":returns: The NSColor object",2155]],"useCount":77846},{"word":"Then","context":[["// Then I should receive an error",36],["//Then",35],["import Then",31],["//  Then",29],["// Given, When, Then",40],["/// during the encoding process. Then the result is uploaded as data or as a stream depending on which encoding",46],["during the encoding process. Then the result is uploaded as data or as a stream depending on which encoding",50],["// are going to a about:reader page. Then we keep it on screen: it will change status",60],["//If can't set InputAccessoryView. Then return",155],["// Then",6472]],"useCount":7166},{"word":"This","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// This method is called when watch view controller is no longer visible",832],["// This method is called when watch view controller is about to be visible to user",793],["This source file is part of the Swift.org open source project",551],["// Also import modules which are used by StdlibUnittest internally. This",343],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// This is an example of a performance test case.",14731],["// This source file is part of the Swift.org open source project",14622],["// This is an example of a functional test case.",14616],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120]],"useCount":111249},{"word":"Type","context":[["override internal func classMetaType() -> GeneratedMessage.Type {",520],["fatalError(\"Type error deserializing\")",1322],["override public func classMetaType() -> GeneratedMessage.Type {",374],["request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",322],["public static func _getObjectiveCType() -> Any.Type {",236],["// CHECK: metatype $@thick G<T>.Type",216],["// CHECK: metatype $@thick S.Type",216],["// CHECK-32: Type reference:",195],["serviceType: Service.Type,",193],["// CHECK-64: Type reference:",196]],"useCount":19946},{"word":"U","context":[["throw Abort.invalidParameter(\"w1\", U.self)",504],["// U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE",173],["let ew1 = try U(from: vw1)",504],["// U+0041 LATIN CAPITAL LETTER A",415],["// U+0069 LATIN SMALL LETTER I",372],["// U+0307 COMBINING DOT ABOVE",248],["// U+0061 LATIN SMALL LETTER A",180],["// U+D800 (high-surrogate)",188],["// U+DC00 (low-surrogate)",188],["// U+1F425 FRONT-FACING BABY CHICK",204]],"useCount":14818},{"word":"UI","context":[["in order to maintain consitency across UI objects.",53],["// MARK: UI",87],["//This is good for UI applications as it might saves RAM which is very expensive in mobile devices",100],["// UI",125],["// Use recording to get started writing UI tests.",3490],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["// MARK: - UI",85],["//: Handle UI Events",80],["//: UI Elements we'll need to be able to access",76],["// Dispatch to the main thread to update the UI",56]],"useCount":9009},{"word":"UIAlertAction","context":[["UIAlertAction in",101],["let cancelAction = UIAlertAction(title: \"Cancel\", style: .Cancel) { (action) in",81],["alertController.addAction(UIAlertAction(title: CancelString, style: UIAlertActionStyle.Cancel, handler: { _ in",92],["(alert: UIAlertAction!) -> Void in",110],["alert.addAction(UIAlertAction(title: \"Ok\", style: UIAlertActionStyle.Default, handler: nil))",124],["alertController.addAction(UIAlertAction(title: OKString, style: UIAlertActionStyle.Default, handler: { _ in",138],["ac.addAction(UIAlertAction(title: \"OK\", style: .Default, handler: nil))",138],["alert.addAction(UIAlertAction(title: \"OK\", style: .Default, handler: nil))",140],["alert.addAction(UIAlertAction(title: \"OK\", style: UIAlertActionStyle.Default, handler: nil))",198],["let cancelAction = UIAlertAction(title: \"Cancel\", style: .Cancel, handler: nil)",159]],"useCount":4834},{"word":"UIApplication","context":[["func applicationWillResignActive(_ application: UIApplication) {",2452],["func applicationWillTerminate(_ application: UIApplication) {",2465],["func applicationDidBecomeActive(application: UIApplication) {",15532],["func applicationDidEnterBackground(application: UIApplication) {",15509],["func applicationWillTerminate(application: UIApplication) {",15506],["func applicationWillResignActive(application: UIApplication) {",15474],["func applicationWillEnterForeground(application: UIApplication) {",15453],["func applicationDidEnterBackground(_ application: UIApplication) {",2472],["func applicationDidBecomeActive(_ application: UIApplication) {",2466],["func applicationWillEnterForeground(_ application: UIApplication) {",2466]],"useCount":105990},{"word":"UIApplicationDelegate","context":[["class AppDelegate: UIResponder, UIApplicationDelegate",160],["class AppDelegate: UIResponder, UIApplicationDelegate, UISplitViewControllerDelegate {",428],["class AppDelegate: UIResponder, UIApplicationDelegate {",20499],["// MARK: UIApplicationDelegate",60],["final class AppDelegate: UIResponder, UIApplicationDelegate {",41],["class AppDelegate: UIResponder, UIApplicationDelegate, CLLocationManagerDelegate {",38],["The background completion handler closure provided by the UIApplicationDelegate",32],["extension AppDelegate: UIApplicationDelegate {",25],["// MARK: - UIApplicationDelegate",77],["class AppDelegate: UIResponder, UIApplicationDelegate, TVApplicationControllerDelegate {",23]],"useCount":21508},{"word":"UIApplicationMain","context":[["@UIApplicationMain",21738],["//@UIApplicationMain",22],["@UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate {",11]],"useCount":21771},{"word":"UIBezierPath","context":[["extension UIBezierPath {",55],["sideMenuContainerView.layer.shadowPath = UIBezierPath(rect: sideMenuContainerView.bounds).CGPath",51],["let bezier2Path = UIBezierPath()",90],["var bezierPath = UIBezierPath()",56],["let path = UIBezierPath(",63],["let checkmarkShapePath = UIBezierPath()",65],["let bezier3Path = UIBezierPath()",66],["var path = UIBezierPath()",71],["let path = UIBezierPath()",1096],["let bezierPath = UIBezierPath()",283]],"useCount":4047},{"word":"UIButton","context":[["@IBOutlet weak var playButton: UIButton!",94],["let button = UIButton()",909],["let btn = UIButton()",491],["extension UIButton {",414],["public extension UIButton {",178],["@IBOutlet weak var loginButton: UIButton!",176],["@IBOutlet weak var button: UIButton!",170],["let button = UIButton(type: .Custom)",139],["let button = UIButton(type: .System)",107],["@IBOutlet weak var cancelButton: UIButton!",101]],"useCount":11847},{"word":"UICollectionView","context":[["func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {",873],["@IBOutlet weak var collectionView: UICollectionView!",529],["func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",1580],["public func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",227],["override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {",273],["func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {",404],["override func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {",416],["func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",419],["func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {",654],["override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",762]],"useCount":10450},{"word":"UIColor","context":[["cell.backgroundColor = UIColor.clearColor()",317],["extension UIColor {",1405],[":returns: The UIColor object",2155],["self.backgroundColor = UIColor.clearColor()",983],["self.view.backgroundColor = UIColor.whiteColor()",867],["view.backgroundColor = UIColor.whiteColor()",743],["static var instance : UIColor? = nil",453],["backgroundColor = UIColor.clearColor()",667],["self.backgroundColor = UIColor.whiteColor()",379],["label.textColor = UIColor.whiteColor()",429]],"useCount":49534},{"word":"UIEvent","context":[["override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",1186],["override func touchesEnded(touches: Set<NSObject>, withEvent event: UIEvent) {",129],["override func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?) {",132],["public override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",159],["override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {",293],["override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {",298],["override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {",308],["override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {",160],["override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {",290],["override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",445]],"useCount":6609},{"word":"UIFont","context":[["import UIKit.UIFont",47],["private func placeholderFontFromFont(font: UIFont) -> UIFont! {",91],["private func placeholderFontFromFont(font: UIFont) -> UIFont! {",91],["public extension UIFont {",90],["label.font = UIFont.systemFontOfSize(12)",71],["label.font = UIFont.systemFontOfSize(13)",62],["titleLabel.font = UIFont.preferredFontForTextStyle(UIFontTextStyleBody)",59],["label.font = UIFont.boldSystemFontOfSize(17.0)",55],["label.font = UIFont.systemFontOfSize(14)",92],["extension UIFont {",183]],"useCount":4264},{"word":"UIGraphicsEndImageContext","context":[["//    UIGraphicsEndImageContext()",18],["//        UIGraphicsEndImageContext()",18],["defer { UIGraphicsEndImageContext() }",44],["UIGraphicsEndImageContext();",493],["UIGraphicsEndImageContext()",4019]],"useCount":4592},{"word":"UIImage","context":[["var images = [UIImage]()",121],["let fetcher = NetworkFetcher<UIImage>(URL: URL)",119],["self.navigationController?.navigationBar.shadowImage = UIImage()",116],["placeholderImage: UIImage?,",439],["var image: UIImage? {",197],["let image = UIImage.imageWithColor(UIColor.greenColor())",232],["var image: UIImage?",318],["public extension UIImage {",341],["extension UIImage {",1015],["let image = UIImage(data: data)",192]],"useCount":15511},{"word":"UIImageView","context":[["var imageView: UIImageView!",180],["@IBOutlet weak var imageView: UIImageView!",1102],["let imageView = UIImageView()",760],["extension UIImageView {",384],["public extension UIImageView {",194],["let imageView = UIImageView(image: image)",190],["@IBOutlet weak var iconImageView: UIImageView!",174],["@IBOutlet var imageView: UIImageView!",174],["@IBOutlet weak var image: UIImageView!",145],["imageView = UIImageView()",140]],"useCount":9114},{"word":"UIKit","context":[["import UIKit",164732],["Or `UIKit` is one of the categories imported by the umbrella pod:",24],["//import UIKit",255],["import UIKit;",113],["import UIKit.UIGestureRecognizerSubclass",81],["import UIKit.UIImage",55],["import UIKit.UIFont",47],["import UIKit.UIColor",43],["pod \"PromiseKit/UIKit\"",24],["XCTAssertEqual(format.diskCapacity, HanekeGlobals.UIKit.DefaultFormat.DiskCapacity)",24]],"useCount":165616},{"word":"UILabel","context":[["@IBOutlet weak var timeLabel: UILabel!",308],["@IBOutlet weak var descriptionLabel: UILabel!",241],["@IBOutlet weak var detailDescriptionLabel: UILabel!",251],["extension UILabel {",316],["let titleLabel = UILabel()",329],["@IBOutlet weak var dateLabel: UILabel!",344],["@IBOutlet weak var label: UILabel!",458],["@IBOutlet weak var nameLabel: UILabel!",945],["@IBOutlet weak var titleLabel: UILabel!",1163],["let label = UILabel()",1828]],"useCount":21268},{"word":"UIResponder","context":[["class AppDelegate: UIResponder, UIApplicationDelegate, UISplitViewControllerDelegate {",428],["class AppDelegate: UIResponder, UIApplicationDelegate {",20499],["class AppDelegate: UIResponder, UIApplicationDelegate",160],["final class AppDelegate: UIResponder, UIApplicationDelegate {",41],["class AppDelegate: UIResponder, UIApplicationDelegate, CLLocationManagerDelegate {",38],["// MARK: - UIResponder",27],["class AppDelegate: UIResponder, UIApplicationDelegate, WCSessionDelegate {",23],["class AppDelegate: UIResponder, UIApplicationDelegate, TVApplicationControllerDelegate {",23],["// MARK: UIResponder",22],["extension UIResponder {",27]],"useCount":21469},{"word":"UIScreen","context":[["self.window = UIWindow(frame: UIScreen.mainScreen().bounds)",753],["let width = UIScreen.mainScreen().bounds.width",83],["return UIScreen.mainScreen().bounds.size.width",77],["window = UIWindow(frame: UIScreen.mainScreen().bounds)",756],["window = UIWindow(frame: UIScreen.main.bounds)",183],["let screenSize: CGRect = UIScreen.mainScreen().bounds",83],["view.frame = UIScreen.mainScreen().bounds",84],["let window = UIWindow(frame: UIScreen.mainScreen().bounds)",121],["let scale = UIScreen.mainScreen().scale",181],["let screenSize = UIScreen.mainScreen().bounds.size",178]],"useCount":5680},{"word":"UIScrollView","context":[["func scrollViewDidScroll(scrollView: UIScrollView) {",876],["func scrollViewDidEndDragging(scrollView: UIScrollView, willDecelerate decelerate: Bool) {",196],["extension UIScrollView {",198],["public func scrollViewDidEndDecelerating(scrollView: UIScrollView) {",201],["func scrollViewDidScroll(_ scrollView: UIScrollView) {",204],["func scrollViewWillBeginDragging(scrollView: UIScrollView) {",257],["public func scrollViewDidScroll(scrollView: UIScrollView) {",261],["func viewForZoomingInScrollView(scrollView: UIScrollView) -> UIView? {",263],["func scrollViewDidEndDecelerating(scrollView: UIScrollView) {",412],["@IBOutlet weak var scrollView: UIScrollView!",531]],"useCount":7555},{"word":"UIStoryboardSegue","context":[["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {",364],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",10988],["override func prepare(for segue: UIStoryboardSegue, sender: Any?) {",958],["override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) {",305],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)",269],["override func prepareForSegue(segue: UIStoryboardSegue?, sender: AnyObject?) {",127],["//    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",74],["override func prepare(for segue: UIStoryboardSegue, sender: AnyObject?) {",70],["override public func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",65],["public override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",61]],"useCount":13865},{"word":"UITableView","context":[["override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2792],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["override func numberOfSectionsInTableView(tableView: UITableView) -> Int {",4481],["func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2927],["func numberOfSectionsInTableView(tableView: UITableView) -> Int {",2424],["override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {",2166],["@IBOutlet weak var tableView: UITableView!",2091]],"useCount":69576},{"word":"UITableViewCell","context":[["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",982],["func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",817],["return UITableViewCell()",602],["public func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",365],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell",245],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell",240],["let cell = UITableViewCell()",214],["let cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath) as UITableViewCell",204]],"useCount":20844},{"word":"UITextField","context":[["func textFieldShouldReturn(textField: UITextField) -> Bool {",1492],["let textField = UITextField()",182],["func textFieldDidEndEditing(textField: UITextField) {",390],["func textFieldDidBeginEditing(textField: UITextField) {",354],["@IBOutlet weak var textField: UITextField!",347],["if let textField = self as? UITextField {",287],["@IBOutlet weak var passwordTextField: UITextField!",283],["func textFieldShouldReturn(_ textField: UITextField) -> Bool {",271],["@IBOutlet weak var passwordField: UITextField!",225],["@IBOutlet weak var nameTextField: UITextField!",204]],"useCount":9797},{"word":"UITouch","context":[["func gestureRecognizer(gestureRecognizer: UIGestureRecognizer, shouldReceiveTouch touch: UITouch) -> Bool {",117],["override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",1186],["override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",445],["override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {",308],["override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {",298],["override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {",160],["public override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",159],["override func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?) {",132],["public override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",123],["public func gestureRecognizer(gestureRecognizer: UIGestureRecognizer, shouldReceiveTouch touch: UITouch) -> Bool {",118]],"useCount":5279},{"word":"UIView","context":[["tableView.tableFooterView = UIView()",465],["UIView.commitAnimations()",388],["UIView.animateWithDuration(0.2, animations: { () -> Void in",391],["UIView.animateWithDuration(0.3, animations: {",442],["UIView.animateWithDuration(0.2, animations: {",448],["UIView.animateWithDuration(0.3, animations: { () -> Void in",510],["UIView.animateWithDuration(",641],["public extension UIView {",698],["let view = UIView()",986],["extension UIView {",1592]],"useCount":36104},{"word":"UIViewController","context":[["func animationControllerForDismissedController(dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {",344],["class ViewController: UIViewController {",10586],["extension UIViewController {",990],["class DetailViewController: UIViewController {",575],["class GameViewController: UIViewController {",507],["public extension UIViewController {",382],["class SecondViewController: UIViewController {",358],["class LoginViewController: UIViewController {",348],["class FirstViewController: UIViewController {",272],["class MainViewController: UIViewController {",272]],"useCount":25389},{"word":"UIWindow","context":[["self.window = UIWindow(frame: UIScreen.main.bounds)",74],["var window: UIWindow?",21574],["window = UIWindow(frame: UIScreen.mainScreen().bounds)",756],["self.window = UIWindow(frame: UIScreen.mainScreen().bounds)",753],["window = UIWindow(frame: UIScreen.main.bounds)",183],["let window = UIWindow(frame: UIScreen.mainScreen().bounds)",121],["window = UIWindow()",108],["var window: UIWindow!",77],["let window = UIWindow()",115],["let window = UIWindow(frame: UIScreen.main.bounds)",56]],"useCount":24556},{"word":"UInt","context":[["internal var _objCTaggedPointerBits: UInt {",85],["internal var _objectPointerSpareBits: UInt {",85],["file: StaticString = #file, line: UInt = #line",102],["public var uIntValue: UInt {",141],["var b: UInt = 42",143],["public var uInt: UInt? {",145],["public let rawValue: UInt",160],["public let rawValue : UInt",249],["file: String = #file, line: UInt = #line",307],["public init(rawValue: UInt) { self.rawValue = rawValue }",331]],"useCount":8867},{"word":"UInt32","context":[["var value: UInt32 = 0",60],["let isReachable = (flags.rawValue & UInt32(kSCNetworkFlagsReachable)) != 0",60],["let needsConnection = (flags.rawValue & UInt32(kSCNetworkFlagsConnectionRequired)) != 0",63],["var int = UInt32()",53],["let j = Int(arc4random_uniform(UInt32(count - i))) + i",72],["extension UInt32 {",96],["var count: UInt32 = 0",101],["public var uInt32Value: UInt32 {",141],["public var uInt32: UInt32? {",144],["version: UInt32.max)",324]],"useCount":6554},{"word":"UInt64","context":[["public var unsignedLongLongValue: UInt64 {",69],["public var uInt64: UInt64? {",145],["public var uInt64Value: UInt64 {",141],["encodingMemoryThreshold: UInt64 = Manager.MultipartFormDataEncodingMemoryThreshold,",102],["offset += sizeof(UInt64)",90],["extension UInt64 {",72],["public var unsignedLongLong: UInt64? {",67],["let length = UInt64(data.length)",66],["len = UInt64(bufferLen-offset)",52],["var dataLength = UInt64(payloadLen)",52]],"useCount":4438},{"word":"UInt8","context":[["zeroAddress.sin_len = UInt8(sizeofValue(zeroAddress))",197],["var result = [UInt8]()",62],["public var unsignedChar: UInt8? {",67],["required init(inout bytes: [UInt8]) {",69],["public var unsignedCharValue: UInt8 {",69],["private struct Static { static var AssociationKey: UInt8 = 0 }",74],["return identifier + String(UnicodeScalar(UInt8(value)))",76],["extension UInt8 {",104],["public var uInt8Value: UInt8 {",141],["public var uInt8: UInt8? {",144]],"useCount":8810},{"word":"URL","context":[["//  report them to O'Reilly at the following URL:",504],["let request = NSMutableURLRequest(URL: url)",346],["let expectation = expectationWithDescription(\"\\(URL)\")",334],["try coordinator.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)",721],["//  the following URL:",504],["let request = NSURLRequest(URL: url!)",230],[":param: URLRequest The URL request",234],["let request = NSURLRequest(URL: url)",302],[":param: URLString The URL string.",312],["public func kf_setImageWithURL(URL: NSURL,",264]],"useCount":30991},{"word":"URLRequest","context":[[":param: URLRequest The URL request",234],["let (URLRequest, error) = self.encoding.encode(self.URLRequest, parameters: parameters)",258],["let (URLRequest, error) = self.encoding.encode(self.URLRequest, parameters: parameters)",258],["let request = URLRequest(url: url)",111],["public func request(URLRequest: URLRequestConvertible) -> Request {",127],["let mutableURLRequest = URLRequest(method, URLString, headers: headers)",131],["- parameter URLRequest: The URL request.",140],[":param: URLRequest The URL request.",158],["let (URLRequest, _) = encoding.encode(self.URLRequest, parameters: parameters)",225],["let (URLRequest, _) = encoding.encode(self.URLRequest, parameters: parameters)",225]],"useCount":7922},{"word":"URLString","context":[[":param: URLString The URL string.",312],["_ URLString: URLStringConvertible,",345],["Alamofire.request(.GET, URLString)",225],["URLString,",165],["- parameter URLString: The URL string.",156],["let URLString = \"https://httpbin.org/get\"",152],["let URLString = testKeys[0]",145],["let URLString = \"https://httpbin.org/post\"",144],["let mutableURLRequest = URLRequest(method, URLString, headers: headers)",131],["public var URLString: String {",232]],"useCount":6124},{"word":"Unknown","context":[["case .Unknown: return \"Unknown\"",100],["case Unknown",590],["case .Unknown:",582],["return .Unknown",397],["fatalError(\"Unknown tag \\(tag)\")",395],["return \"Unknown\"",201],["_type = .Unknown",115],["if JSON(rawValue).type == .Unknown {",109],["case .Unknown: return \"Unknown\"",100],["let os: AnyObject = NSProcessInfo.processInfo().operatingSystemVersionString ?? \"Unknown\"",73]],"useCount":4550},{"word":"UnsafeMutablePointer","context":[["let result = UnsafeMutablePointer<CUnsignedChar>.alloc(digestLen)",91],["contentsEnd: UnsafeMutablePointer<Index>,",76],["end: UnsafeMutablePointer<Index>,",76],["let status = withUnsafeMutablePointer(&result) { SecItemCopyMatching(query, UnsafeMutablePointer($0)) }",66],["let dest = UnsafeMutablePointer<UTF16.CodeUnit>(buffer.start)",64],["}, unsafeBitCast(box, UnsafeMutablePointer<Void>.self))",60],["browser: UnsafeMutablePointer<cef_browser_t>,",60],[") -> UnsafeMutablePointer<Element> {",58],["initializing target: UnsafeMutablePointer<Element>",58],["_ start: UnsafeMutablePointer<Index>,",54]],"useCount":6225},{"word":"Use","context":[["// Use recording to get started writing UI tests.",3490],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// Use this method to pause ongoing tasks, disable timers, etc.",240],["@available(*, deprecated, message: \"Extensions directly deprecated. Use `UIColor.OM.*` instead.\")",155],["/// Use this method to tell the data set that the underlying data has changed",82],["import SwiftyJSON\t//Use this to verify the JSON Object",50],["import ObjectMapper //Use this to generate Object",50],["/// Use this function to perform a cheap range check for QoI purposes when",48],["//        // Use XCTAssert and related functions to verify your tests produce the correct results.",44],["Use certs from main app bundle",43]],"useCount":14697},{"word":"User","context":[["Creates default values for the \"Accept-Encoding\", \"Accept-Language\" and \"User-Agent\" headers.",68],["case .User:",76],["extension User {",90],["class User {",112],["class User: NSObject {",127],["struct User {",136],["let user = User()",142],["var user: User?",191],["//: User Interface Set up",245],["//  User.swift",566]],"useCount":4385},{"word":"Value","context":[["// MARK: Key-Value Coding",70],["case .Value:",65],["XCTFail(\"Value returned successfully when it shouldn't have\")",66],["public var value: Value? {",68],["associatedtype Value",276],["var value: Value {",59],["public var value: Value {",86],["- returns: Value decoded from JSON.",80],["public init(_ value: Value) {",73],["typealias Value",90]],"useCount":10220},{"word":"View","context":[["// MARK: - View Lifecycle",269],["// MARK: - Table View",678],["// MARK: View Life Cycle",302],["// MARK: View Lifecycle",228],["// MARK: - View lifecycle",163],["// MARK: - View life cycle",117],["// MARK: - View Life Cycle",109],["// MARK: View lifecycle",102],["// MARK: - View Methods",82],["let v1 = View()",81]],"useCount":5546},{"word":"ViewController","context":[["class ViewController: UITableViewController {",317],["extension ViewController: UITableViewDataSource {",142],["class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {",143],["class ViewController: UIViewController",171],["class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {",200],["class ViewController: UIViewController, UITextFieldDelegate {",221],["extension ViewController {",435],["class ViewController: NSViewController {",494],["//  ViewController.swift",16235],["class ViewController: UIViewController {",10586]],"useCount":31414},{"word":"Void","context":[["DispatchQueue.main.async(execute: { () -> Void in",393],["UIView.animateWithDuration(0.2, animations: { () -> Void in",391],["dispatch_async(dispatch_get_main_queue(), { () -> Void in",2723],["}, completion: { (finished) -> Void in",620],["animations: { () -> Void in",550],["Void{",538],["UIView.animateWithDuration(0.3, animations: { () -> Void in",510],["dispatch_async(dispatch_get_main_queue()) { () -> Void in",474],["}) { (finished) -> Void in",455],["}, failure: {(error:NSError!) -> Void in",410]],"useCount":45707},{"word":"We","context":[["//  We are unable to get textField object while keyboard showing on UIWebView's textField.  (Bug ID: #11)",52],["// We have positive values only, stay in the positive zone",55],["// We can stop dragging right now, and let the scroll view take control",58],["// We reached the edge, stop",58],["//  keyboard is not showing(At the beginning only). We should save rootViewRect.",55],["// objc_msgSend() for instances of CoreFoundation types.  We can't do that",60],["// Clear *after* making an attempt to open. We're making a bet that",49],["// the currently loaded page can be turned into reading mode or if the page already is in reading mode. We",51],["// We should only manipulate y.",52],["// We're the new top bar in the stack, so make sure we ignore ourself",52]],"useCount":4930},{"word":"When","context":[["// When",6324],["// Given, When",166],["Prepares the view instance when intialized. When subclassing,",155],["When 'update' is 'true', the object must have a primary key. If no objects exist in",97],["When setting this property in conjunction with the shape property having a",90],["When passing in an `Array`, all properties must be present,",57],["// When this happens, the URL is nil, so try restoring the page upon selection.",52],["//When",45],["/// the Event itself and then complete. When an Interrupted event is received,",41],["// Given, When, Then",40]],"useCount":8748},{"word":"X","context":[["// expected-error@-1 {{'ClassAvailableOn10_51' is only available on OS X 10.51 or newer}}",90],["throw E.X",164],["func b(b: X.Type) {",93],["struct X<Y> : A {",96],["// expected-error@-1 {{'functionAvailableOn10_51()' is only available on OS X 10.51 or newer}}",100],["struct X {",107],["struct X { }",112],["case X",167],["class X {",117],["struct X {}",119]],"useCount":7723},{"word":"XCTAssert","context":[["XCTAssert(true, \"Pass\")",9334],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["XCTAssert(ar.elementsEqual(de))",126],["XCTAssert(false)",1004],["XCTAssert(n == a, \"Mismatch\")",551],["XCTAssert(true)",361],["XCTAssert(",222],["XCTAssert(xs.subscriptions == [SubscribedToHotObservable])",185],["XCTAssert(xs.subscriptions == [UnsunscribedFromHotObservable])",132],["XCTAssert(Defaults[key] == nil)",131]],"useCount":31024},{"word":"XCTAssertEqual","context":[["XCTAssertEqual(res.messages, correctMessages)",313],["XCTAssertEqual(res.messages, correct)",311],["XCTAssertEqual(nEvents, 1)",310],["XCTAssertEqual(xs2.subscriptions, [",328],["XCTAssertEqual(xs1.subscriptions, [",328],["XCTAssertEqual(xs.subscriptions, correctSubscriptions)",528],["XCTAssertEqual(res.events, [",1264],["XCTAssertEqual(res.messages, [",1610],["XCTAssertEqual(",2823],["XCTAssertEqual(xs.subscriptions, [",2088]],"useCount":55588},{"word":"XCTAssertFalse","context":[["XCTAssertFalse(serverTrustIsValid, \"server trust should not pass evaluation\")",315],["XCTAssertFalse(fetch.hasSucceeded)",130],["XCTAssertFalse(url.hasDirectoryPath, \"did not expect URL with directory path: \\(url)\")",98],["XCTAssertFalse(fileManager.fileExistsAtPath(path))",80],["XCTAssertFalse(result!)",76],["XCTAssertFalse(true)",69],["XCTAssertFalse(fired)",69],["XCTAssertFalse(stream.hasBytesAvailable)",66],["XCTAssertFalse(fetch.hasFailed)",150],["XCTAssertFalse(result)",203]],"useCount":4172},{"word":"XCTAssertNil","context":[["XCTAssertNil(string)",109],["XCTAssertNil(error, \"error should be nil\")",818],["XCTAssertNil(error)",1418],["XCTAssertNil(error, \"\\(error)\")",645],["XCTAssertNil(error, \"Error\")",364],["XCTAssertNil(result)",125],["XCTAssertNil(result.value)",128],["XCTAssertNil(result.value, \"result value should be nil\")",145],["XCTAssertNil(result.error)",160],["XCTAssertNil(request.response, \"response should be nil\")",170]],"useCount":9527},{"word":"XCTAssertNotNil","context":[["XCTAssertNotNil(data)",153],["XCTAssertNotNil(request, \"request should not be nil\")",457],["XCTAssertNotNil(result.error)",164],["XCTAssertNotNil(request.request, \"request should not be nil\")",170],["XCTAssertNotNil(result)",198],["XCTAssertNotNil(mappedObject)",212],["XCTAssertNotNil(data, \"data should not be nil\")",273],["XCTAssertNotNil(error, \"error should not be nil\")",291],["XCTAssertNotNil(response, \"response should not be nil\")",433],["XCTAssertNotNil(error)",469]],"useCount":10289},{"word":"XCTAssertTrue","context":[["XCTAssertTrue(false)",246],["XCTAssertTrue(latest == nil)",431],["XCTAssertTrue(operation.finished)",209],["XCTAssertTrue(success)",247],["XCTAssertTrue(serverTrustIsValid, \"server trust should pass evaluation\")",495],["XCTAssertTrue(result)",278],["XCTAssertTrue(true)",298],["XCTAssertTrue(2 == val.count, \"\")",310],["XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])",201],["XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])",201]],"useCount":16814},{"word":"XCTFail","context":[["XCTFail(self.exceptionNotExpected())",233],["XCTFail(\"error should not be nil\")",347],["XCTFail()",4325],["XCTFail(\"\\(error)\")",496],["XCTFail(\"Encoding failed due to error: \\(error)\")",465],["XCTFail(\"Kuzzle not initialized\")",391],["XCTFail(\"Unable to convert string to data\")",202],["XCTFail(\"Array wasn't decoded correctly\")",223],["XCTFail(\"Unexpected error: \\(error)\")",228],["XCTFail(\"Decoding failed due to error: \\(error)\")",232]],"useCount":18038},{"word":"XCTest","context":[["// Reduced example from XCTest overlay, involves a TupleShuffleExpr",18],["@_exported import XCTest // Clang module",14],["behave. These are like \"tests\" in XCTest.",14],["// In order to avoid revlock/submission issues between XCTest and the Swift XCTest overlay,",14],["/// XCTest.",12],["import XCTest",42429],["//import XCTest",44],["// Set the XCTest Class as the delegate.",31],["// In order to avoid revlock/submission issues between XCTest and the Swift XCTest overlay,",14],["extension XCTest {",21]],"useCount":42644},{"word":"XCUIApplication","context":[["let query = XCUIApplication().statusBars.children(matching: .other).element(boundBy: 1).children(matching: .other)",16],["func setLanguage(_ app: XCUIApplication) {",13],["var app: XCUIApplication!",19],["func setupSnapshot(app: XCUIApplication) {",20],["class func setLaunchArguments(app: XCUIApplication) {",20],["app = XCUIApplication()",20],["class func setLanguage(app: XCUIApplication) {",23],["func setLanguage(app: XCUIApplication) {",23],["XCUIApplication().launch()",3657],["let app = XCUIApplication()",761]],"useCount":4643},{"word":"_","context":[["override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",1013],["override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",982],["override func viewWillAppear(_ animated: Bool) {",1189],["} catch _ {",2289],["func applicationWillResignActive(_ application: UIApplication) {",2452],["func applicationWillTerminate(_ application: UIApplication) {",2465],["func applicationDidEnterBackground(_ application: UIApplication) {",2472],["func applicationWillEnterForeground(_ application: UIApplication) {",2466],["func applicationDidBecomeActive(_ application: UIApplication) {",2466],["func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",858]],"useCount":124167},{"word":"_value","context":[["// CHECK-32:       (field name=_value offset=0",104],["// CHECK-64:       (field name=_value offset=0",107],["_value = value",137],["// CHECK-32-NEXT:           (field name=_value offset=0",76],["return _value != nil",99],["return _value",317],["// CHECK-64-NEXT:           (field name=_value offset=0",80],["self._value = value",138],["switch _value {",362],["_value = newValue",95]],"useCount":4063},{"word":"_viewPortHandler","context":[["_viewPortHandler.refresh(newMatrix: matrix, chart: self, invalidate: false)",124],["_viewPortHandler.centerViewPort(pt: pt, chart: self)",124],["let valsInView = getDeltaY(axis) / _viewPortHandler.scaleY",132],["if (_viewPortHandler.hasChartDimens)",186],["location.x = location.x - _viewPortHandler.offsetLeft",104],["_viewPortHandler.refresh(newMatrix: matrix, chart: self, invalidate: true)",112],["location.y = -(location.y - _viewPortHandler.offsetTop)",104],["_viewPortHandler.restrainViewPort(",90],["_viewPortHandler.setChartDimens(width: bounds.size.width, height: bounds.size.height)",80],["if (_viewPortHandler === nil)",110]],"useCount":4747},{"word":"a","context":[["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["func a",2792],["protocol a {",3794],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["let a {",4888],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["// Do any additional setup after loading the view, typically from a nib.",9879],["// This is an example of a functional test case.",14616],["// This is an example of a performance test case.",14731]],"useCount":259860},{"word":"aDecoder","context":[["required init?(coder aDecoder: NSCoder) {",11632],["super.init(coder: aDecoder)",11022],["required init(coder aDecoder: NSCoder) {",5213],["public required init?(coder aDecoder: NSCoder) {",1812],["required public init?(coder aDecoder: NSCoder) {",3041],["required public init(coder aDecoder: NSCoder) {",1034],["public required init(coder aDecoder: NSCoder) {",841],["super.init(coder: aDecoder)!",537],["super.init(coder:aDecoder)",363],["required init?(coder aDecoder: NSCoder)",328]],"useCount":39329},{"word":"abort","context":[["// CHECK: abort()",83],["abort()",3816],["TestFormat.abort(String(describing: callError))",136],["_setTestSuiteFailedCallback() { print(\"abort()\") }",62],["guard let t = a else { abort() }",41],["if  (obj as? SwiftSubPort) != nil   { abort() }",36],["return \"Callback routine requested an abort\"",37],["if  (obj as? NSArray) != nil        { abort() }",36],["if  (obj as? SwiftSuperPort) != nil { abort() }",36],["TestFormat.abort(String(callError))",68]],"useCount":4827},{"word":"account","context":[["let account = FirefoxAccount.fromConfigurationAndJSON(profile.accountConfiguration, data: data)!",69],["self.account = account",168],["self.account = account",168],["presentSignInViewController() // TODO UX Right now the flow for sign in and create account is the same",102],["cs?.queryItems?.append(NSURLQueryItem(name: \"email\", value: account.email))",82],["let account: String",77],["if let account = self.profile.getAccount() {",66],["if let account = profile.getAccount() {",169],["return account",204],["switch account.actionNeeded {",113]],"useCount":5208},{"word":"action","context":[["action()",608],["alert.addAction(action)",544],["self.action = action",474],["self.action = action",474],["observer.action(event)",370],["XCTAssertEqual(action.paths.app.queryParameters, [:])",181],["- parameter state: State passed to the action to be executed.",191],["return action",203],["switch action {",241],["action in",294]],"useCount":21236},{"word":"add","context":[["// expected-note@-3 {{add 'if #available' version check}}",120],["//  // Change lRet here and add your code",162],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["// expected-note@-1 {{add @available attribute to enclosing class}}",224],["// expected-note@-1 {{add 'if #available' version check}}",363],["// Insert code here to add functionality to your managed object subclass",538],["// expected-note@-1 {{add @available attribute to enclosing global function}}",764],["// expected-note@-2 {{add 'if #available' version check}}",804],["func add() {",109],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619]],"useCount":12990},{"word":"addAction","context":[["alert.addAction(cancelAction)",274],["alertController.addAction(cancelAction)",792],["alert.addAction(action)",544],["alertController.addAction(okAction)",343],["alert.addAction(okAction)",211],["alert.addAction(UIAlertAction(title: \"OK\", style: UIAlertActionStyle.Default, handler: nil))",198],["alertController.addAction(OKAction)",175],["alert.addAction(UIAlertAction(title: \"OK\", style: .Default, handler: nil))",140],["ac.addAction(UIAlertAction(title: \"OK\", style: .Default, handler: nil))",138],["alertController.addAction(UIAlertAction(title: OKString, style: UIAlertActionStyle.Default, handler: { _ in",138]],"useCount":7778},{"word":"addSubview","context":[["addSubview(titleLabel)",325],["self.addSubview(label)",304],["contentView.addSubview(titleLabel)",392],["addSubview(AKPropertySlider(",468],["view.addSubview(tableView)",488],["addSubview(label)",262],["addSubview(view)",267],["self.view.addSubview(tableView)",271],["addSubview(imageView)",298],["view.addSubview(collectionView)",303]],"useCount":29358},{"word":"additional","context":[["Allows specifying an additional border to draw on the clipped image.",42],["- parameter params: Optional additional URL parameters",24],["// Do any additional setup after loading the view, typically from a nib.",9879],["// Do any additional setup after loading the view.",6596],["/* Sprite Kit applies additional optimizations to improve rendering performance */",362],["*  distributed with this work for additional information",48],["* distributed with this work for additional information",34],["when a task is cancelled. See `NSURLSession -downloadTaskWithResumeData:` for additional",29],["- parameter identifier: The additional identifier to append to the image's unique identifier.",24],["// Do any additional setup after loading the view from its nib.",89]],"useCount":17706},{"word":"address","context":[["if address == self.frequencyParameter!.address {",66],["return address",66],["var address: String?",71],["} else if address == self.amplitudeParameter!.address {",80],["} else if address == self.amplitudeParameter!.address {",80],["// CHECK-64: Instance pointer in child address space: 0x{{[0-9a-fA-F]+}}",155],["// CHECK-32: Instance pointer in child address space: 0x{{[0-9a-fA-F]+}}",159],["self.address = address",186],["self.address = address",186],["address, value in",342]],"useCount":4653},{"word":"after","context":[["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Override point for customization after application launch.",16653],["// Do any additional setup after loading the view, typically from a nib.",9879],["// Do any additional setup after loading the view.",6596],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90],["/// Whether to start requests immediately after being constructed. `true` by default.",90],["let expectation = expectationWithDescription(\"Expected after time\")",115],["/// Returns the next consecutive value after `self`.",127],["if after {",135],["public func index(after i: Index) -> Index {",168]],"useCount":62760},{"word":"alert","context":[["presentViewController(alert, animated: true, completion: nil)",684],["self.presentViewController(alert, animated: true, completion: nil)",1870],["alert.show()",1040],["let alert = NSAlert()",642],["alert.addAction(action)",544],["alert.runModal()",370],["self.present(alert, animated: true, completion: nil)",322],["alert.addAction(cancelAction)",274],["alert.addButtonWithTitle(\"OK\")",242],["let alert = UIAlertView()",227]],"useCount":13805},{"word":"alertController","context":[["let alertController = UIAlertController(title: title, message: message, preferredStyle: .Alert)",177],["self.presentViewController(alertController, animated: true, completion: nil)",1033],["alertController.addAction(cancelAction)",792],["presentViewController(alertController, animated: true, completion: nil)",654],["alertController.addAction(okAction)",343],["self.present(alertController, animated: true, completion: nil)",222],["alertController.addAction(OKAction)",175],["alertController.addAction(UIAlertAction(title: OKString, style: UIAlertActionStyle.Default, handler: { _ in",138],["alertController.addAction(action)",130],["let alertController = UIAlertController(",202]],"useCount":7186},{"word":"alignment","context":[["tzStackView.alignment = .Fill",58],["paragraphStyle.alignment = .Center",121],["switch alignment {",88],["// FIXME: alignof differs from the ABI alignment on some architectures",80],["// CHECK-32-NEXT:     (struct size=4 alignment=4 stride=4 num_extra_inhabitants=0",53],["/// Returns the required alignment in bytes of",65],["style.alignment = .Center",63],["tzStackView.alignment = .Bottom",53],["// CHECK-64-NEXT:         (struct size=8 alignment=8 stride=8 num_extra_inhabitants=0",56],["tzStackView.alignment = .Center",57]],"useCount":4386},{"word":"all","context":[["// StdlibUnittest with -sil-serialize-all.",343],["// workaround is needed to link all required libraries in case we compile",343],["/// Zips the values of all the given signals, in the manner described by",338],["/// Zips the values of all the given producers, in the manner described by",348],["/// Combines the values of all the given signals, in the manner described by",337],["/// Invalidates all indices with respect to `self`.",245],["/// if set to true, all values are drawn above their bars, instead of below their top",116],["var resiliencyChecks = CollectionMisuseResiliencyChecks.all",192],["/// Function to start, play, or activate the node, all do the same thing",530],["/// Combines the values of all the given producers, in the manner described by",359]],"useCount":16943},{"word":"alpha","context":[[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["self.alpha = 0",377],["self.alpha = 1",254],["alpha: CGFloat(1.0)",212],["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["self.alpha = 0.0",219],["self.alpha = 1.0",225],["view.alpha = 0",253]],"useCount":29351},{"word":"an","context":[["// Find an existing key.",159],["// This is an example of a functional test case.",14616],["- parameter failure: A function executed if an error occurs.",169],["If validation fails, subsequent calls to response handlers will have an associated error.",245],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["//  Similarly, if you find an error in these sample codes, simply",504],["/// Create an instance initialized to `value`.",554],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["// This is an example of a performance test case.",14731]],"useCount":72855},{"word":"and","context":[["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["//  to delete and recreate this implementation file for your updated model.",759],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["// Create the coordinator and store",1472],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602]],"useCount":99386},{"word":"animate","context":[["public func animate() {",72],["/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.",244],["UIView.animate(",210],["UIView.animate(withDuration: 0.3, animations: {",142],["UIView.animate(withDuration: 0.25, animations: {",132],["/// If `animate(...)` is called, no further calling of `invalidate()` is necessary to refresh the chart.",484],["UIView.animate(withDuration: 0.2, animations: {",124],["UIView.animate(withDuration: 0.5, animations: {",100],["animate()",81],["UIView.animate(withDuration: duration, animations: {",77]],"useCount":4406},{"word":"animateWithDuration","context":[["UIView.animateWithDuration(0.3, animations: { () -> Void in",510],["UIView.animateWithDuration(",641],["UIView.animateWithDuration(0.2, animations: {",448],["UIView.animateWithDuration(0.3, animations: {",442],["UIView.animateWithDuration(0.2, animations: { () -> Void in",391],["UIView.animateWithDuration(0.25, animations: { () -> Void in",355],["UIView.animateWithDuration(0.5, animations: {",334],["UIView.animateWithDuration(0.5, animations: { () -> Void in",319],["UIView.animateWithDuration(0.25, animations: {",287],["UIView.animateWithDuration(duration, animations: {",214]],"useCount":9901},{"word":"animated","context":[["tableView.deselectRowAtIndexPath(indexPath, animated: true)",2103],["super.viewWillAppear(animated)",7292],["override func viewWillAppear(animated: Bool) {",7024],["override func viewDidAppear(animated: Bool) {",4971],["super.viewDidAppear(animated)",4816],["super.setSelected(selected, animated: animated)",3634],["super.setSelected(selected, animated: animated)",3634],["override func setSelected(selected: Bool, animated: Bool) {",3113],["super.viewWillDisappear(animated)",2617],["override func viewWillDisappear(animated: Bool) {",2403]],"useCount":79979},{"word":"animation","context":[["/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.",198],["/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.",198],["animation.repeatCount = HUGE",211],["animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)",216],["animation.fillMode = kCAFillModeForwards",237],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326],["animation.duration = duration",402],["animation.removedOnCompletion = false",504],["return animation",624],["// An empty implementation adversely affects performance during animation.",884]],"useCount":15359},{"word":"animations","context":[["UIView.animateWithDuration(0.25, animations: {",287],["UIView.animateWithDuration(0.5, animations: { () -> Void in",319],["animations: {",1915],["animations: { () -> Void in",550],["UIView.animateWithDuration(0.3, animations: { () -> Void in",510],["UIView.animateWithDuration(0.2, animations: {",448],["UIView.animateWithDuration(0.3, animations: {",442],["UIView.animateWithDuration(0.2, animations: { () -> Void in",391],["UIView.animateWithDuration(0.25, animations: { () -> Void in",355],["UIView.animateWithDuration(0.5, animations: {",334]],"useCount":12671},{"word":"animator","context":[["let animator = animator",130],["let animator = animator",130],["return animator",143],["animator.removeAllBehaviors()",144],["let phaseX = animator.phaseX",157],["super.init(animator: animator, viewPortHandler: viewPortHandler)",228],["super.init(animator: animator, viewPortHandler: viewPortHandler)",228],["animator = animator",281],["animator = animator",281],["let phaseY = animator.phaseY",342]],"useCount":4882},{"word":"any","context":[["// Perform any setup necessary in order to update the view.",146],["// Perform any final initialization of your application.",230],["// Report any error we got.",1486],["// Do any additional setup after loading the view.",6596],["// Dispose of any resources that can be recreated.",24097],["// Do any additional setup after loading the view, typically from a nib.",9879],["//  If you have any questions, you can contact me directly",504],["// Release any cached data, images, etc that aren't in use.",419],["the existing object is updated with any changed values.",116],["- parameter resultSelector: Function to invoke whenever any of the sources produces an element.",131]],"useCount":51771},{"word":"app","context":[["self.app = app",132],["let app = XCUIApplication()",761],["app: Path(",223],["XCTAssertEqual(action.paths.app.queryParameters, [:])",181],["app.launch()",163],["pathComponents: [\"app\"],",146],["XCTAssertEqual(action.paths.app.pathComponents, [\"app\"])",144],["XCTAssertEqual(action.paths.app.pathComponents, [\"app\"])",144],["app {",136],["self.app = app",132]],"useCount":6396},{"word":"append","context":[["items.append(item)",461],["mergedArray.append(value)",553],["baseElements.append(contentsOf: elements)",288],["values.append(value)",358],["items.append(title)",157],["f.append(w); f.append(w); f.append(w);",164],["f.append(w); f.append(w); f.append(w);",164],["f.append(w); f.append(w); f.append(w);",164],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["pairs.append(kv)",234]],"useCount":32895},{"word":"application","context":[["// Override point for customization after application launch.",16653],["func applicationDidBecomeActive(application: UIApplication) {",15532],["func applicationDidEnterBackground(application: UIApplication) {",15509],["func applicationWillTerminate(application: UIApplication) {",15506],["func applicationWillResignActive(application: UIApplication) {",15474],["func applicationWillEnterForeground(application: UIApplication) {",15453],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["func applicationDidEnterBackground(_ application: UIApplication) {",2472],["func applicationDidBecomeActive(_ application: UIApplication) {",2466],["func applicationWillEnterForeground(_ application: UIApplication) {",2466]],"useCount":137187},{"word":"applicationDidBecomeActive","context":[["public func applicationDidBecomeActive(application: UIApplication) {",23],["func applicationDidBecomeActive(application: UIApplication)",70],["func applicationDidBecomeActive() {",294],["func applicationDidBecomeActive(application: UIApplication!) {",348],["func applicationDidBecomeActive(_ application: UIApplication) {",2466],["func applicationDidBecomeActive(application: UIApplication) {",15532],["func applicationDidBecomeActive(notification: NSNotification) {",39],["func applicationDidBecomeActive(application: UIApplication) {}",37],["func applicationDidBecomeActive()",21],["override func applicationDidBecomeActive(_ application: UIApplication) {",15]],"useCount":18955},{"word":"applicationDidEnterBackground","context":[["func applicationDidEnterBackground(_ application: UIApplication) {",2472],["func applicationDidEnterBackground(application: UIApplication) {",15509],["func applicationDidEnterBackground(application: UIApplication!) {",349],["func applicationDidEnterBackground(application: UIApplication)",71],["func applicationDidEnterBackground(application: UIApplication) {}",36],["public func applicationDidEnterBackground(application: UIApplication) {",24],["func applicationDidEnterBackground()",21],["func applicationDidEnterBackground() {",37],["func applicationDidEnterBackground(application: UIApplication) { }",13],["public func applicationDidEnterBackground(aNotification: NSNotification) {",13]],"useCount":18568},{"word":"applicationWillEnterForeground","context":[["func applicationWillEnterForeground(application: UIApplication!) {",350],["func applicationWillEnterForeground(application: UIApplication) {",15453],["func applicationWillEnterForeground(_ application: UIApplication)",11],["func applicationWillEnterForeground(application: UIApplication) { }",17],["func applicationWillEnterForeground() {",22],["public func applicationWillEnterForeground(application: UIApplication) {",24],["func applicationWillEnterForeground(application: UIApplication) {}",40],["func applicationWillEnterForeground(application: UIApplication)",63],["func applicationWillEnterForeground(_ application: UIApplication) {",2466]],"useCount":18446},{"word":"applicationWillResignActive","context":[["func applicationWillResignActive(application: UIApplication) {",15474],["func applicationWillResignActive(_ application: UIApplication) {",2452],["func applicationWillResignActive(application: UIApplication!) {",349],["func applicationWillResignActive() {",252],["func applicationWillResignActive(application: UIApplication)",61],["func applicationWillResignActive(application: UIApplication) {}",39],["public func applicationWillResignActive(application: UIApplication) {",25],["func applicationWillResignActive(notification: NSNotification) {",19],["super.applicationWillResignActive(application)",17],["override func applicationWillResignActive(_ application: UIApplication) {",13]],"useCount":18750},{"word":"applicationWillTerminate","context":[["func applicationWillTerminate(application: UIApplication) {",15506],["func applicationWillTerminate(_ application: UIApplication) {",2465],["func applicationWillTerminate(aNotification: NSNotification) {",1037],["func applicationWillTerminate(application: UIApplication!) {",351],["func applicationWillTerminate(_ aNotification: Notification) {",203],["func applicationWillTerminate(application: UIApplication)",72],["func applicationWillTerminate(aNotification: NSNotification?) {",66],["func applicationWillTerminate(application: UIApplication) {}",31],["func applicationWillTerminate(aNotification: NSNotification)",29],["public func applicationWillTerminate(application: UIApplication) {",18]],"useCount":19858},{"word":"apply","context":[["// CHECK-NEXT:    apply",96],["// CHECK: apply",329],["// CHECK-NEXT: apply",226],["// CHECK: = apply [[INNER]](%0)",102],["// CHECK: = apply [[SUPER_METHOD]]([[SUPER]])",107],["// CHECK: apply [[METHOD]]<{{.*}}>([[VALUE]])",116],["// CHECK: apply [[DOFOO]]([[PARTIAL_APPLY]]) : $@convention(thin) (@owned @callee_owned () -> ()) -> ()",118],["// CHECK: apply [[BAR]](",120],["// CHECK:   [[T0:%.*]] = apply [[ADDRESSOR]]([[SELF]])",130],["//  This file was generated by the Clean Swift Xcode Templates so you can apply",132]],"useCount":10340},{"word":"are","context":[[":param: parameters The parameters are HTTP parameters you would like to send.",131],["/// if set to true, all values are drawn above their bars, instead of below their top",116],["components that integrate with Realm. If you are simply building an app on Realm, it is",111],["thrown if any required properties are not present and no default is set.",82],["/// Function to stop or bypass the node, both are equivalent",524],["// if values are drawn",150],["/// Ramp Time represents the speed at which parameters are allowed to change",289],["// Also import modules which are used by StdlibUnittest internally. This",343],["//  These example codes are written for O'Reilly's iOS 8 Swift Programming Cookbook",504],["Possible errors returned by this function are:",256]],"useCount":19156},{"word":"args","context":[["if(args.count <= 0){ args.append(nil); }",122],["if(args.count <= 0){ args.append(nil); }",122],["return errorOut(0, args[0]);",122],["return args",124],["var args = args!;",137],["self.callEndpointGetArgs(outgoingMessage, { (error, args) in",137],["var args = args!;",137],["let args: Args = [",145],["var args = [AnyObject?]()",173],["let args: Args = [guid]",192]],"useCount":10915},{"word":"argument","context":[["/// that emitted value as the second argument. The result is emitted from the",46],["/// first argument when the next value is emitted, and so on.",46],["/// endIndex is not a valid argument to subscript, and is always reachable from startIndex by",47],["///   - arg1:        An argument to the factory closure as Arg1 type.",48],["///   sequence as its argument and returns a Boolean value indicating",53],["switch argument {",57],["/// greater than the last valid subscript argument.",59],["// expected-note {{call is to 'rethrows' function, but argument function can throw}}",91],["/// format string as a template into which the remaining argument",96],["/// `endIndex` is not a valid argument to `subscript`, and is always",246]],"useCount":6286},{"word":"arguments","context":[["self.arguments = arguments",94],["let result = sut?.match(arguments: firstArgument, withArguments: secondArgument)",106],["///     - arguments: Optional statement arguments.",60],["///     - arguments: Optional statement arguments.",60],["of arguments.",66],["let arg1 = try state.evaluator.evaluate(state.arguments[0], substitutions: state.substitutions)",68],["task.arguments = arguments",69],["task.arguments = arguments",69],["- parameter predicateFormat: The predicate format string which can accept variable arguments.",89],["self.arguments = arguments",94]],"useCount":4624},{"word":"array","context":[["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["fatalError(\"Modifying proxy array is not supported!\")",224],["for elem in array {",227],["Find a json in the complex data structuresby using the Int/String's array.",238],["for value in array {",260],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["return array",1185],["set (array) {",635],["/// :param array The array to source from.",325],["/// :param array The array to source from.",325]],"useCount":36395},{"word":"as","context":[["catch let error as NSError",333],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["} catch let error as NSError {",3604],["let nserror = error as NSError",1086],["dict[NSUnderlyingErrorKey] = error as NSError",818],["} catch let error1 as NSError {",797],["let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate",648],["catch let error as NSError {",597],["guard let jsDataCast = jsonData as? Dictionary<String,Any> else {",553],["return valueForKey(\"inputImage\") as? CIImage",474]],"useCount":126849},{"word":"assert","context":[["assert(identity1 == d._rawIdentifier())",396],["assert(false)",562],["assert(isNativeDictionary(d))",540],["assert(identity1 == unsafeBitCast(d, to: Int.self))",462],["CoreStore.assert(",653],["assert(d1.count == 3)",360],["assert(v!.value == 1020)",378],["assert(NSThread.isMainThread())",381],["assert(d.count == 3)",379],["assert(v!.value == 1030)",378]],"useCount":22553},{"word":"async","context":[["DispatchQueue.global().async {",180],["DispatchQueue.global(qos: DispatchQoS.QoSClass.default).async(execute: { () -> Void in",95],["DispatchQueue.main.async { () -> Void in",106],["SafeDispatch.async { [weak self] in",110],["DispatchQueue.main.async { [weak self] in",117],["SafeDispatch.async {",188],["queue.async {",232],["DispatchQueue.main.async(execute: { () -> Void in",393],["DispatchQueue.main.async(execute: {",737],["DispatchQueue.main.async {",2077]],"useCount":7095},{"word":"at","context":[["/// Ramp Time represents the speed at which parameters are allowed to change",289],["For more information take a look at `DelegateProxyType`.",164],["Retrieves the object at `path` from `json` and decodes it according to the return type",326],["tableView.deselectRow(at: indexPath, animated: true)",434],["- parameter placeholderImage:  A placeholder image when retrieving the image at URL.",180],["/// Retrieves the object at `path` from `json` and decodes it according to the return type",164],["//  at vandad.np@gmail.com",504],["//  at http://vandadnp.wordpress.com for daily tips and tricks in Swift",504],["//  report them to O'Reilly at the following URL:",504],["- parameter placeholderImage: A placeholder image when retrieving the image at URL.",142]],"useCount":17779},{"word":"attribute","context":[["attribute: NSLayoutAttribute.Top,",229],["// expected-note@-1 {{add @available attribute to enclosing global function}}",764],["attribute: .Bottom,",250],["// expected-note@-1 {{add @available attribute to enclosing class}}",224],["attribute: .Height,",203],["attribute: NSLayoutAttribute.Height,",198],["attribute: NSLayoutAttribute.Width,",189],["attribute: attribute,",177],["attribute: attribute,",177],["attribute: .Top,",280]],"useCount":11421},{"word":"attributes","context":[["super.init(attributes: attributes)",101],["super.init(attributes: attributes)",101],["attributes: nil)",113],["self.attributes = attributes",122],["self.attributes = attributes",122],["attributes: [",149],["let attributes = [",180],["attributes: [NSFontAttributeName: l.valueFont, NSForegroundColorAttributeName: l.valueTextColor])",254],["///  - attrs: the optional extra attributes to set before calling the remote service.",422],["return attributes",511]],"useCount":8725},{"word":"authors","context":[["// implementations in protocols.  Library authors should ensure",16],["* @authors                 Tyler Brockett, Shikha Mehta, Tam Le",21],["let authors = self.sampleAuthors()",24],["XCTAssertEqual(authors.value, [",28],["// See AUTHORS.txt for the list of the project authors",42],["//  of the authors and should not be interpreted as representing official policies,",44],["// See CONTRIBUTORS.txt for the list of SMUD project authors",65],["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954]],"useCount":15506},{"word":"available","context":[["@available(iOS 9, *)",377],["@available(OSX 10.11, iOS 9.0, *)",369],["@available(OSX, introduced: 10.51)",518],["if #available(iOS 8.0, *) {",548],["if #available(iOS 9, *) {",553],["// expected-note@-1 {{add @available attribute to enclosing global function}}",764],["@available(iOS 8.0, *)",1580],["if #available(iOS 9.0, *) {",996],["// expected-note@-2 {{add 'if #available' version check}}",804],["@available(iOS 9.0, *)",779]],"useCount":25742},{"word":"awakeFromNib","context":[["super.awakeFromNib()",7271],["public override func awakeFromNib() {",401],["//    override func awakeFromNib() {",16],["override func awakeFromNib()",238],["override public func awakeFromNib() {",358],["override func awakeFromNib(){",28],["super.awakeFromNib();",54],["override open func awakeFromNib() {",92],["open override func awakeFromNib() {",137],["override func awakeFromNib() {",7192]],"useCount":15802},{"word":"axis","context":[["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["tzStackView.axis = .Horizontal",191],["tzStackView.axis = .Vertical",194],["/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.",198],["/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.",198],["switch axis {",244],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326],["/// - parameter yAxisDuration: duration for animating the y axis",352],["/// - parameter xAxisDuration: duration for animating the x axis",352]],"useCount":11402},{"word":"b","context":[["return b",465],["class b",513],["func b{",347],["b",341],["b()",323],["func b {",558],["var b {",967],["enum b {",1456],["func b",1493],["protocol b {",1729]],"useCount":44966},{"word":"background","context":[["addChild(background)",131],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["DispatchQueue.global(qos: .background).async {",64],["/// draws the grid background",64],["// draw the grid background",64],["/// flag indicating if the grid background should be drawn or not",64],["/// the color for the background of the chart-drawing area (everything behind the grid lines).",64],["self.addChild(background)",67],["/// The image to use as a background image.",90],["Async.background {",122]],"useCount":5143},{"word":"backgroundColor","context":[["view.backgroundColor = UIColor.whiteColor()",743],["backgroundColor = UIColor.clearColor()",667],["self.backgroundColor = UIColor.whiteColor()",379],["cell.backgroundColor = UIColor.clearColor()",317],["backgroundColor = UIColor.whiteColor()",297],["self.window!.backgroundColor = UIColor.whiteColor()",276],["view.backgroundColor = UIColor.clearColor()",240],["self.backgroundColor = UIColor.clear",236],["self.view.backgroundColor = UIColor.whiteColor()",867],["self.backgroundColor = UIColor.clearColor()",983]],"useCount":21638},{"word":"bar","context":[["for bar in bars {",118],["bar.removeFromSuperview()",118],["// if drawing the bar shadow is enabled",119],["func bar() {",119],["func bar() {}",130],["next(210, \"bar\"),",135],["bar(x);",195],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["bar()",117],["bar.hide()",112]],"useCount":12083},{"word":"base","context":[["base: base,",291],["public init(_ base: Base) {",127],["// handled in base",129],["return base",175],["self.base = base",235],["self.base = base",235],["let startIndex = base.index(",288],["let endIndex = base.index(",288],["base: base,",291],["base.startIndex,",576]],"useCount":8227},{"word":"based","context":[["/// Returns an Endpoint based on the token, method, and parameters by invoking the endpointsClosure.",26],["/// Returns a `Range`-based view of `self`.",26],["// Forced downcast based on context.",27],["/// - Note: This method only works for CG-based image.",28],["/// Required coder-based initialization (for use with Interface Builder)",28],["- parameter proposedResponse:  The default caching behavior. This behavior is determined based on the current",29],["/// :return Array of elements based on the sequence.",30],["/// :return Array of elements based on the sequence that is incremented by 1",30],["/// Maps each element to new value based on the map function passed",36],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403]],"useCount":8775},{"word":"bb0","context":[["// CHECK-NEXT: bb0:",76],["// CHECK: bb0:",283],["// CHECK:       bb0({{.*}} [[SELF_ADDR:%.*]] : $*S):",126],["// CHECK: bb0(%0 : $*T):",116],["// CHECK: bb0(%0 : $Int):",111],["// CHECK:       bb0(%0 : $Int, %1 : $@thin ThrowStruct.Type):",110],["// CHECK: bb0([[THIS:%.*]] : $Hoozit):",92],["// CHECK:       bb0(%0 : $Int, %1 : $ThrowDerivedClass):",88],["// CHECK: bb0([[VALUE:%.*]] : $Gizmo, [[THIS:%.*]] : $Hoozit):",84],["// CHECK: bb0",751]],"useCount":6728},{"word":"be","context":[["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["// Return NO if you do not want the specified item to be editable.",528],["Adds a handler to be called once the request has finished.",657],["// This method is called when watch view controller is about to be visible to user",793],["XCTAssertNil(error, \"error should be nil\")",818],["// Return false if you do not want the item to be re-orderable.",1078],["fatalError(\"unavailable function can't be called\")",1217],["fatalError(\"unavailable accessor can't be called\")",1359],["// Return false if you do not want the specified item to be editable.",1475],["// Dispose of any resources that can be recreated.",24097]],"useCount":96511},{"word":"beNil","context":[["expect(failureValue).to(beNil())",127],["expect(aFilter(kevinBaconCiImage)).toNot(beNil())",98],["expect(value).to(beNil())",104],["expect(r.json).toNot(beNil())",113],["expect(signal).to(beNil())",130],["expect(mappedObject).notTo(beNil())",144],["expect(successValue).to(beNil())",192],["expect(result).to(beNil())",465],["expect(error).to(beNil())",523],["expect(lastValue).to(beNil())",977]],"useCount":6277},{"word":"because","context":[["// But because the whole string is converted to uppercase, we get U+0049",45],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["// expected-note@-3 {{inferring '@objc' because the declaration is a member of an '@objc' protocol}}",76],["// expected-error@-1 {{method cannot be marked @objc because its result type cannot be represented in Objective-C}}",59],["// because we consider that failures differentiations could be done by the caller.",54],["// ignore the result because we are being called back asynchronous when the readermode status changes.",51],["// because that event wil not always fire due to unreliable page caching. This will either let us know that",51],["// expected-error@-1{{method cannot be marked @objc because its result type cannot be represented in Objective-C}}",49],["// Re-show any components that might have been hidden because they were being displayed",47],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181]],"useCount":4669},{"word":"been","context":[["func foo(element: T) {} // expected-error {{'T' has been renamed to 'Element'}} {{21-22=Element}}",112],["// Called when nothing has been selected or an \"un-select\" has been made.",51],["/// If `sampler` fires before a value has been observed on `self`, nothing",52],["// `nil` has historically been used as a stand-in for an empty",53],["/// - Precondition: `next()` has not been applied to a copy of `self`",54],["//  Although reasonable care has been taken to  ensure  the  correctness  of  this",62],["/// flag that indicates if a custom viewport offset has been set",64],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90],["//        fatalError(\"init(coder:) has not been implemented\")",93],["fatalError(\"init(coder:) has not been implemented\")",11614]],"useCount":15673},{"word":"before","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["// Saves changes in the application's managed object context before the application terminates.",1424],["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["///  - attrs: the optional extra attributes to set before calling the remote service.",422],["/* Called before each frame is rendered */",319],["/// If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",196],["if before {",135],["public func index(before i: Index) -> Index {",117],["/// Returns the previous consecutive value before `self`.",99]],"useCount":37509},{"word":"beforeEach","context":[["beforeEach()",27],["public func beforeEach(closure: BeforeExampleClosure) {",22],["beforeEach({ () -> () in",25],["beforeEach { () -> () in",29],["beforeEach{",38],["beforeEach",47],["beforeEach() { () -> () in",66],["beforeEach({",116],["beforeEach() {",173],["beforeEach {",7778]],"useCount":8392},{"word":"best","context":[["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["// best case scenario, it's already decoded an in memory",16],["/// Do our best to print a value that cannot be printed directly.",17],["/// In most cases, it's best to ignore this protocol and use the",18],["/// In most cases, it's best to ignore this protocol and use the `Collection`",19],["use in other studies beyond this one, it is best practice to get",26],["// best effort",29],["// This file is part of SmartGas, an iOS app to find the best gas station nearby.",31],["/// Implementation of the RadarChart, a \"spidernet\"-like chart. It works best",31],["- returns: The disposable object used to cancel the scheduled action (best effort).",171]],"useCount":4129},{"word":"between","context":[["// Uncomment the following line to preserve selection between presentations",1628],["/// :param step The number of elements to progress between each partition. Set to n if not supplied.",48],["// Add pages in between current and tapped page if necessary",50],["/// seconds pass between each, then forwards them on the given scheduler.",60],["// we still draw stacked bars, but there is one non-stacked in between",66],["/// A type that can represent the number of steps between pairs of",70],["//This value is for serializer like message pack to identify the versions match between",100],["// this is the space between the legend and the chart",130],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310]],"useCount":10541},{"word":"blackColor","context":[["return UIColor.blackColor()",113],["label.textColor = UIColor.blackColor()",126],["self.backgroundColor = UIColor.blackColor()",100],["layer.shadowColor = UIColor.blackColor().CGColor",92],["backgroundColor = UIColor.blackColor()",85],["titleLabel.textColor = UIColor.blackColor()",82],["view.backgroundColor = UIColor.blackColor()",173],["UIColor.blackColor().setStroke()",82],["self.layer.shadowColor = UIColor.blackColor().CGColor",56],["self.view.backgroundColor = UIColor.blackColor()",182]],"useCount":4058},{"word":"block","context":[["dispatch_async(dispatch_get_main_queue(), block)",92],["it(\"should start a signal then block until completion\") {",69],[":param: failure The block that is run on a failed HTTP Request.",74],["return block",104],["block(self)",123],["try block()",138],["self.block = block",266],["self.block = block",266],["// After populating your dynamic notification interface call the completion block.",362],["block()",911]],"useCount":12209},{"word":"blue","context":[["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["blue  = CGFloat(hexValue & 0x0000FF)           / 255.0",123],["blue  = CGFloat(hexValue & 0x00F)              / 15.0",123],["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["var blue:  CGFloat = 0.0",125],["var blue: CGFloat = 0",125],["blue  = CGFloat((hexValue & 0x0000FF00) >> 8)  / 255.0",151],["self.init(red:red, green:green, blue:blue, alpha:alpha)",179],["self.init(red:red, green:green, blue:blue, alpha:alpha)",179],["blue: CGFloat(rgbValue & 0x0000FF) / 255.0,",193]],"useCount":11638},{"word":"body","context":[["let body = try response!.readString()",93],["- parameter multipartFormData:       The closure used to append body parts to the `MultipartFormData`.",86],["return try body(",93],["XCTFail(\"No response body\")",98],["request.HTTPBody = body",99],["messageBody: body",90],["self.body = body",252],["self.body = body",252],["The body part data will be encoded using the following format:",175],["return body",144]],"useCount":9209},{"word":"bottom","context":[["case .bottom:",241],["make.bottom.equalTo(self.view)",87],["public var bottom: CGFloat {",87],["make.bottom.equalTo(self.toolbar?.snp_top ?? self.view.snp_bottom)",97],["case bottom",115],["make.left.right.bottom.equalTo(self.view)",186],["barRect.size.height = bottom - top",153],["attribute: .bottom,",142],["bottom *= phaseY",102],["make.bottom.equalTo(self)",139]],"useCount":7170},{"word":"bounds","context":[["override public func textRectForBounds(bounds: CGRect) -> CGRect {",140],["window = UIWindow(frame: UIScreen.mainScreen().bounds)",756],["self.window = UIWindow(frame: UIScreen.mainScreen().bounds)",753],["bounds: startIndex..<endIndex)",288],["window = UIWindow(frame: UIScreen.main.bounds)",183],["let screenSize = UIScreen.mainScreen().bounds.size",178],["override public var bounds: CGRect {",162],["let bounds = self.bounds",161],["let bounds = self.bounds",161],["// Set the color for the currently drawn value. If the index is out of bounds, reuse colors.",127]],"useCount":22309},{"word":"br","context":[["// CHECK-NEXT: br bb3",66],["// CHECK:   br [[CONT]]",525],["// CHECK:   br [[CONT:bb[0-9]+]]",266],["// CHECK-NEXT:    br bb8",198],["// CHECK-NEXT:    br bb2",132],["// CHECK-NEXT:    br bb1",110],["// CHECK-NEXT:    br bb5([[ERROR]] : $ErrorType)",85],["// CHECK: br [[EPILOG]]",80],["// CHECK: br",70],["// CHECK: br [[CONT]]",70]],"useCount":4379},{"word":"break","context":[["default: break;",98],["//            break",105],["//                break",111],["default:    break",143],["break loop",157],["break fields",163],["default:break",214],["default: break",3405],["break;",4741],["break",42295]],"useCount":54414},{"word":"btn","context":[["btn.sizeToFit()",193],["let btn = addButton(title)",70],["contentView.addSubview(btn)",71],["btn.backgroundColor = viewColor",73],["btn.addTarget(self, action:Selector(\"buttonTapped:\"), forControlEvents:.TouchUpInside)",75],["btn.setTitle(title, forState: .Normal)",81],["for btn in buttons {",86],["btn.layer.masksToBounds = true",90],["let btn = UIButton()",491],["return btn",742]],"useCount":5094},{"word":"buffer","context":[["free(buffer)",89],["XCTAssertEqual(buffer.filledLength, BufferLength)",85],["let data = response.buffer! //local copy so it is perverse for writing",86],["XCTAssert(reader.read(buffer))",93],["self.buffer = buffer",99],["self.buffer = buffer",99],["/// An object that keeps the elements stored in this buffer alive.",115],["// Generated by the protocol buffer compiler.  DO NOT EDIT!",119],["fragBuffer = NSData(bytes: buffer, length: bufferLen)",123],["return buffer",284]],"useCount":14230},{"word":"build","context":[["// RUN: %target-build-swift %s -o %t/a.out",59],["public func build() {",87],["build()",116],["tracker.send(builder.build() as [NSObject : AnyObject])",119],["// RUN: %build-irgen-test-overlays",127],[".build()",147],["unknownFields = unknownFieldsBuilder.build()",547],["self.unknownFields = unknownFieldsBuilder.build()",547],["self.unknownFields = try unknownFieldsBuilder.build()",900],["unknownFields = try unknownFieldsBuilder.build()",900]],"useCount":4889},{"word":"builderResult","context":[["builderResult.options = value",146],["builderResult.hasOptions = true",178],["return builderResult",2648],["return builderResult.name",111],["builderResult.options = optionsBuilder_.getMessage()",100],["builderResult.name = value",111],["builderResult.name = \"\"",102],["builderResult.hasName = false",102],["builderResult.hasName = true",102],["return builderResult.hasName",102]],"useCount":16541},{"word":"bundle","context":[["let bundle = Bundle(for: type(of: self))",132],["let bundle = NSBundle.mainBundle()",409],["let storyboard = UIStoryboard(name: \"Main\", bundle: nil)",701],["override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",796],["super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)",1516],["super.init(nibName: nil, bundle: nil)",2029],["let bundle = NSBundle(forClass: self.dynamicType)",401],["self.init(nibName: nil, bundle: nil)",288],["override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {",172],["public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",145]],"useCount":12080},{"word":"but","context":[["// we still draw stacked bars, but there is one non-stacked in between",66],["// cursor land on the correct initial element, but if not followed by LayoutChanged,",60],["// forward/backward. Strange, but LayoutChanged fixes that.",60],["// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.",52],["// The following is not required by the GeneratorType protocol, but",70],["//   is available through the extraOffsets, but changing it can mean",89],["/// Creates an array of numbers (positive and/or negative) progressing from start up to but not including end.",91],["// expected-note {{call is to 'rethrows' function, but argument function can throw}}",91],["// The following is not required by the IteratorProtocol protocol, but",176],["// expected-error {{call can throw, but it is not marked with 'try' and the error is not handled}} \\",91]],"useCount":7039},{"word":"button","context":[["addSubview(button)",199],["self.view.addSubview(button)",209],["for button in buttons {",245],["button.sizeToFit()",262],["button.translatesAutoresizingMaskIntoConstraints = false",285],["let button = UIButton()",909],["return button",1371],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["view.addSubview(button)",172],["@IBOutlet weak var button: UIButton!",170]],"useCount":18657},{"word":"by","context":[["/// Combines the values of all the given producers, in the manner described by",359],["/// Zips the values of all the given producers, in the manner described by",348],["// Also import modules which are used by StdlibUnittest internally. This",343],["/// Zips the values of all the given signals, in the manner described by",338],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["// Test case found by fuzzing",36402],["//  Created by Aurelius Prochazka, revision history on Github.",875],["//  Created by Daniel Cohen Gindi on 4/3/15.",592],["//  Created by Daniel Cohen Gindi on 23/2/15.",432],["/// Combines the values of all the given signals, in the manner described by",337]],"useCount":151270},{"word":"bytes","context":[["XCTAssertGreaterThan(byteValue.bytes, 0, \"reported bytes should always be greater than 0\")",79],["XCTAssertGreaterThan(byteValue.bytes, 0, \"reported bytes should always be greater than 0\")",79],["byteValues.append(bytes)",82],["- parameter encodingMemoryThreshold: The encoding memory threshold in bytes.",82],["var byteValues: [(bytes: Int64, totalBytes: Int64, totalBytesExpected: Int64)] = []",82],["fragBuffer = NSData(bytes: buffer, length: bufferLen)",123],["let data = NSData(bytes: bytes, length: bytes.count)",186],["let data = NSData(bytes: bytes, length: bytes.count)",186],["let data = NSData(bytes: bytes, length: bytes.count)",186],["return bytes",268]],"useCount":9121},{"word":"c","context":[["case c,",4784],["case c",338],["switch c {",373],["c()",442],["func c",479],["struct c",533],["return c",607],["class c {",837],["struct c {",1015],["protocol c {",1499]],"useCount":40304},{"word":"cache","context":[["self.cache = cache",96],["return cache",133],["let cache = Shared.imageCache",110],["self.cache = cache",96],["// Edit the section name key path and cache name if appropriate.",92],["cache.removeAll()",89],["cache.addFormat(format)",65],["Clean expired disk cache. This is an async operation.",67],["cache.clear()",73],["it(\"should forward the call to the internal cache\") {",84]],"useCount":5122},{"word":"call","context":[["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250],["// After populating your dynamic notification interface call the completion block.",362],["This method is exposed since the compiler requests. Do not call it.",86],["// expected-note {{call is to 'rethrows' function, but argument function can throw}}",91],["it(\"should not call the failure closure\") {",96],["it(\"should not call the success closure\") {",106],["// expected-error {{call can throw, but it is not marked with 'try' and the error is not handled}} \\",91],["XCTFail(\"api call failed with error: \\(error)\")",110],["- parameter completion: The completion handler to call when the load request is complete.",174],["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506]],"useCount":13581},{"word":"callback","context":[["callback()",478],["self.callback = callback",447],["callback(nil)",148],["callback(response)",106],["guard let callback = callback else {",97],["guard let callback = callback else {",97],["callback: { (data: NSDictionary) -> Void in",96],["callback(false)",96],["self.callback = callback",447],["callback(nil, error)",92]],"useCount":10438},{"word":"called","context":[["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// This method is called when watch view controller is no longer visible",832],["// This method is called when watch view controller is about to be visible to user",793],["Adds a handler to be called once the request has finished.",657],["fatalError(\"unavailable function can't be called\")",1217],["/// If `animate(...)` is called, no further calling of `invalidate()` is necessary to refresh the chart.",484],["var called = false",539],["fatalError(\"unavailable accessor can't be called\")",1359],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783]],"useCount":56958},{"word":"can","context":[["//  If you have any questions, you can contact me directly",504],["// Dispose of any resources that can be recreated.",24097],["//: Playground - noun: a place where people can play",1899],["fatalError(\"unavailable accessor can't be called\")",1359],["fatalError(\"unavailable function can't be called\")",1217],["// Playground - noun: a place where people can play",875],["//  If you use these solutions in your apps, you can give attribution to",504],["//  You can purchase \"iOS 8 Swift Programming Cookbook\" from",504],["it(\"can read\") {",434],["it(\"can do maths\") {",414]],"useCount":50585},{"word":"cancel","context":[["init(parent: Parent, observer: O, cancel: Disposable) {",240],["func cancel()",156],["cancel()",183],["super.cancel()",220],["super.init(observer: observer, cancel: cancel)",356],["super.init(observer: observer, cancel: cancel)",356],["public func cancel() {",382],["func cancel() {",409],["task.cancel()",427],["- returns: The disposable object used to cancel the scheduled action (best effort).",171]],"useCount":8221},{"word":"cannot","context":[["// expected-note@-2 {{generic type parameters cannot be represented in Objective-C}}",133],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["// expected-note@-2 {{Swift structs cannot be represented in Objective-C}}",192],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181],["// expected-error@+1{{extension of a generic Objective-C class cannot access the class's generic parameters}}",130],["///   * `UnexpectedSubscript`: A `path` item cannot be used with the",84],["// expected-note@-2 {{classes not annotated with @objc cannot be represented in Objective-C}}",76],["}(), \"drawerSide cannot be .None\")",70]],"useCount":9389},{"word":"capacity","context":[["let originalCapacity = d._variantStorage.asNative.capacity",48],["self.capacity = capacity",94],["self.capacity = capacity",94],["public var capacity: Int {",91],["let capacity: Int",68],["let buf = NSMutableData(capacity: BUFFER_MAX)",52],["var _values1: Queue<E1> = Queue(capacity: 2)",49],["var _values2: Queue<E2> = Queue(capacity: 2)",49],["assert(d._variantStorage.asNative.capacity < originalCapacity)",48],["assert(d._variantStorage.asNative.capacity == originalCapacity)",48]],"useCount":4696},{"word":"case","context":[["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["case",3379],["case 2:",3674],["case c,",4784],["case 1:",5352],["case 0:",6403],["case ,",8759],["// Test case found by fuzzing",36402],["// This is an example of a performance test case.",14731],["// This is an example of a functional test case.",14616]],"useCount":394452},{"word":"catch","context":[["catch",648],["}catch{",743],["} catch let error1 as NSError {",797],["} catch {}",989],["} catch _ {",2289],["} catch let error {",2306],["catch {",3084],["} catch let error as NSError {",3604],["} catch {",20498],["} catch let e {",627]],"useCount":44948},{"word":"cell","context":[["return cell",19541],["cell.accessoryType = .None",399],["return cell;",401],["let cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath)",438],["let cell = tableView.dequeueReusableCellWithIdentifier(\"reuseIdentifier\", forIndexPath: indexPath)",556],["cell.selectionStyle = .None",562],["cell.delegate = self",674],["return cell!",1718],["// Configure the cell...",1504],["if cell == nil {",912]],"useCount":59663},{"word":"cellForRowAtIndexPath","context":[["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915],["public func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",365],["func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell! {",101],["let cell = super.tableView(tableView, cellForRowAtIndexPath: indexPath)",107],["if let cell = tableView.cellForRowAtIndexPath(indexPath) {",108],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{",158],["let cell = tableView.cellForRowAtIndexPath(indexPath)",232],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell",240],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell",245]],"useCount":13409},{"word":"center","context":[["self.center = center",160],["label.textAlignment = .center",287],["let center = NSNotificationCenter.defaultCenter()",225],["self.center = center",160],["case .center:",139],["center: center,",122],["center: center,",122],["make.center.equalTo(self)",111],["case center",103],["let center = chart.centerOffsets",95]],"useCount":9854},{"word":"change","context":[["case .change(let change):",66],["super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)",302],["super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)",302],["/// Ramp Time represents the speed at which parameters are allowed to change",289],["super.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)",112],["super.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)",112],["switch change {",100],["case .change(let change):",66],["let indexSet = change![NSKeyValueChangeIndexesKey] as! NSIndexSet",75],["// expected-note @+1 {{change 'let' to 'var' to make it mutable}} {{3-6=var}}",84]],"useCount":4504},{"word":"changes","context":[["(op, changes) -> Bool in",72],["switch changes {",90],["// Saves changes in the application's managed object context before the application terminates.",1424],["that changes made to the Realm on different threads do not modify or delete the",42],["- returns: a `ListMonitor` instance that monitors changes to the list",44],["/// Call this whenever the page URL changes.",46],["// Finish any pending viewport changes",50],["// Save changes in the application's managed object context before the application terminates.",50],["// ignore the result because we are being called back asynchronous when the readermode status changes.",51],["Actions taken in this method are asynchronous and changes will be eventually consistent.",52]],"useCount":4286},{"word":"characters","context":[["switch (hex.characters.count) {",69],["return self.characters.count",174],["let range = NSRange(location: 0, length: string.characters.count)",43],["return String.Index(self, within: characters)",46],["/// Returns a new string containing the characters of the",48],["if (label.characters.count > 0)",48],["return characters.count",55],["switch hex.characters.count {",64],["print(\"Invalid RGB string, number of characters after '#' should be either 3, 4, 6 or 8\")",58],["/// characters.",85]],"useCount":6031},{"word":"chart","context":[["// this is the space between the legend and the chart",130],["/// If `animate(...)` is called, no further calling of `invalidate()` is necessary to refresh the chart.",484],["/// Set an offset in dp that allows the user to drag the chart over it's",128],["/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.",198],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326],["self.chart = chart",246],["self.chart = chart",246],["/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.",244],["/// This also refreshes the chart by calling setNeedsDisplay().",207],["/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.",198]],"useCount":11687},{"word":"check","context":[["// expected-note@-2 {{add 'if #available' version check}}",804],["// check bounds",78],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.dl.txt",127],["// expected-note@-3 {{add 'if #available' version check}}",120],["// RUN: %FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",164],["// RUN: %FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",195],["// expected-note@-1 {{add 'if #available' version check}}",363],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: FileCheck %s -check-prefix=WITH_PA < %t.txt",88],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517]],"useCount":10903},{"word":"children","context":[["let count = mirror.children.count",82],["for child in children {",284],["self.children = children",190],["self.children = children",190],["for setting in children {",78],["for obj in listing.children {",69],["expectEqual(\"a\", a.children.first!.label)",65],["if children.count > 0 {",61],["let identifier = machineMirror.children.reduce(\"\") { identifier, element in",54],["return Mirror(self, children: c, displayStyle: Mirror.DisplayStyle.struct)",49]],"useCount":4948},{"word":"class","context":[["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["class AppDelegate: UIResponder, UIApplicationDelegate {",20499],["class",14457],["class ViewController: UIViewController {",10586],["class A{",1632],["class AppDelegate: NSObject, NSApplicationDelegate {",1529],["class A {",6653],["class a {",2545],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248]],"useCount":206339},{"word":"className","context":[["override internal class func className() -> String {",529],["return className",67],["// FIXME: use T.className()",51],["override public class func className() -> String {",918],["override public func className() -> String {",920],["if update && schema[className]?.primaryKeyProperty == nil {",49],["throwRealmException(\"'\\(className)' does not have a primary key and can not be updated\")",49],["let className = dynamicTypeString.componentsSeparatedByString(\".\").last",50],["override internal func className() -> String {",529],["throwRealmException(\"'\\(object.objectSchema.className)' does not have a primary key and can not be updated\")",41]],"useCount":4693},{"word":"clearColor","context":[["label.backgroundColor = UIColor.clearColor()",169],["backgroundColor = .clearColor()",122],["view.backgroundColor = UIColor.clearColor()",240],["self.view.backgroundColor = UIColor.clearColor()",190],["tableView.backgroundColor = UIColor.clearColor()",181],["layer.fillColor = UIColor.clearColor().CGColor",86],["collectionView.backgroundColor = UIColor.clearColor()",123],["backgroundColor = UIColor.clearColor()",667],["cell.backgroundColor = UIColor.clearColor()",317],["self.backgroundColor = UIColor.clearColor()",983]],"useCount":5728},{"word":"client","context":[["self.client = client",296],["return client.request(route, serverArgs: serverArgs)",478],["self.client = client",296],["client.close()",116],["let client = MockCKIClient()",74],["client?.engineDidClose(reason)",71],["return URLRequest(url: url, bearer: self.client.bearerToken)",57],["client?.engineDidClose(\"Disconnect\")",51],["URLQueryItem(name: \"api_key\", value: self.client.apiKey),",64],["URLQueryItem(name: \"site_token\", value: self.client.project)",60]],"useCount":5727},{"word":"close","context":[["db.close()",119],["stream.close()",225],["bezierPath.close()",125],["public func close() {",348],["close()",345],["func close() {",370],["path.close()",226],["SQLiteDB.sharedInstance.close()",301],["self.close()",260],["client.close()",116]],"useCount":7011},{"word":"closure","context":[["it(\"should not call the success closure\") {",106],["- returns: A closure of type `Filter`",112],["- parameter destination: The closure used to determine the destination of the downloaded file.",152],["func delay(delay:Double, closure:()->()) {",154],["//create task closure",155],[":param: destination The closure used to determine the destination of the downloaded file.",217],["self.closure = closure",278],["self.closure = closure",278],["dispatch_get_main_queue(), closure)",289],["closure()",692]],"useCount":17036},{"word":"code","context":[["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Put the code you want to measure the time of here.",14709],["// Initialization code",3175],["// Replace this implementation with code to handle the error appropriately.",1739],["// Replace this with code to handle the error appropriately.",1404],["// Insert code here to tear down your application",1167],["// Insert code here to initialize your application",895],["// Drawing code",830],[".code {",816]],"useCount":90192},{"word":"coder","context":[["required init?(coder aDecoder: NSCoder) {",11632],["required init?(coder: NSCoder) {",890],["super.init(coder: coder)",778],["fatalError(\"init(coder:) has not been implemented\")",11614],["required public init?(coder aDecoder: NSCoder) {",3041],["public required init?(coder aDecoder: NSCoder) {",1812],["required public init(coder aDecoder: NSCoder) {",1034],["public required init(coder aDecoder: NSCoder) {",841],["super.init(coder: aDecoder)",11022],["required init(coder aDecoder: NSCoder) {",5213]],"useCount":56037},{"word":"collection","context":[["/// - Complexity: O(1) if the collection conforms to",164],["collection: [1010, 2020, 3030, 4040, 5050],",206],["/// The position of the first element in a non-empty collection.",268],["/// The collection's \"past the end\" position.",272],["collection: [1010],",166],["var c = makeWrappedCollection(test.collection)",188],["/// In an empty collection, `startIndex == endIndex`.",134],["self.collection = collection.map(OpaqueValue.init)",125],["collection: [],",190],["self.collection = collection",125]],"useCount":12048},{"word":"collectionView","context":[["func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",1580],["func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {",873],["collectionView.dataSource = self",665],["func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {",654],["self.collectionView.reloadData()",643],["func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {",873],["func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",1580],["collectionView.reloadData()",765],["override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",762],["override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",762]],"useCount":29560},{"word":"color","context":[["self.color = color",576],["self.color = color",576],["return color",361],["color.setFill()",466],["CGContextSetFillColorWithColor(context, color.CGColor)",305],["color.setStroke()",223],["color: AKColor.greenColor()",170],["color.set()",158],["// Set the color for the currently drawn value. If the index is out of bounds, reuse colors.",127],["var color: UIColor?",126]],"useCount":15944},{"word":"column","context":[["return get(column)",198],["return namespace(column)",184],["self.column = column",141],["self.column = column",141],["XCTFail(\"Missing column \\(key) in fetched row\")",98],["for column in 0..<NumColumns {",97],["• marks the row/column indicator for the shape",80],["assert(indexIsValidForRow(row, column: column), \"Index out of range\")",76],["assert(indexIsValidForRow(row, column: column), \"Index out of range\")",76],["column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, collate)",70]],"useCount":7930},{"word":"com","context":[["//  https://github.com/danielgindi/ios-charts",1360],["//  https://github.com/danielgindi/Charts",908],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["//  at vandad.np@gmail.com",504],["//  http://www.oreilly.com/catalog/errata.csp?isbn=0636920034254",504],["<mailto:ferran.vila.conesa@gmail.com>",370],["//  Asset Flow, https://github.com/Camvergence/AssetFlow",480],["//  at http://vandadnp.wordpress.com for daily tips and tricks in Swift",504],["//  http://shop.oreilly.com/product/0636920034254.do",504],["<http://github.com/fnva>",370]],"useCount":57043},{"word":"command","context":[["let dcId = command.argumentAtIndex(1) as! Int",60],["let pcId = command.argumentAtIndex(0) as! Int",173],["self.emit(command.callbackId, result: result)",98],["self.emit(command.callbackId,",182],["switch command {",97],["let id = command.argumentAtIndex(0) as! String",84],["self.commandDelegate!.sendPluginResult(pluginResult, callbackId:command.callbackId)",78],["let id = command.argumentAtIndex(0) as! Int",62],["XCTAssertEqual(components[3..<5], [\"-X\", \"POST\"], \"command should contain explicit -X flag\")",60],["self.commandDelegate!.send(pluginResult, callbackId:command.callbackId)",71]],"useCount":4048},{"word":"comment","context":[["comment: \"\")",54],["self.loc = SourceLoc(file, line, comment: \"test data\" + comment)",52],["comment: \"Unsuccessfull attempt\"),",74],["self.loc = SourceLoc(file, line, comment: \"test data\")",181],["self.loc = SourceLoc(file, line, comment: \"test data\" + comment)",52],["let cancelButton = NSLocalizedString(\"Cancel\", comment: \"Cancel button title\")",52],["comment: String = \"\"",52],["let copyTitle = NSLocalizedString(\"Copy Link\", comment: \"Context menu item for copying a link URL to the clipboard\")",51],["// TODO: same comment as for SyncAuthState.swift!",60],["let saveImageTitle = NSLocalizedString(\"Save Image\", comment: \"Context menu item for saving an image\")",51]],"useCount":6858},{"word":"complete","context":[["/// This timer will never complete naturally, so all invocations of start() must",56],["it(\"should complete when both inputs have completed\") {",116],["- parameter encodingCompletion:      The closure called when the `MultipartFormData` encoding is complete.",86],["println(\"Test complete!\")",77],["complete()",67],["XCTAssertTrue(imageDownloadComplete, \"image download complete should be true\")",60],["// Using variadics (in-order, complete)",59],["- parameter completion: The completion handler to call when the load request is complete.",174],["}) { (complete) -> Void in",55],["case \"complete\":",59]],"useCount":4308},{"word":"completed","context":[["}, completed: {",502],["completed(400)",987],["expect(completed) == false",1087],["completed = true",1224],["expect(completed) == true",808],["completed(230)",700],["completed(300)",530],["var completed = false",1411],["completed(250)",1303],["case .completed:",712]],"useCount":21444},{"word":"completion","context":[["presentViewController(alert, animated: true, completion: nil)",684],["}, completion: { _ in",850],["completion?()",927],["self.presentViewController(alertController, animated: true, completion: nil)",1033],["}, completion: { finished in",1196],["completion()",1322],["self.presentViewController(alert, animated: true, completion: nil)",1870],["dismissViewControllerAnimated(true, completion: nil)",2490],["self.dismissViewControllerAnimated(true, completion: nil)",3087],["}, completion: nil)",3462]],"useCount":57046},{"word":"completionHandler","context":[["- parameter completionHandler: Called when the image retrieved and set.",203],["completionHandler(nil, error)",198],["self.completionHandler = completionHandler",275],["self.completionHandler = completionHandler",275],["completionHandler(nil)",246],["completionHandler: completionHandler",285],["completionHandler: completionHandler",285],["completionHandler: CompletionHandler?) -> RetrieveImageTask",331],["completionHandler(.Custom)",366],["completionHandler()",447]],"useCount":16483},{"word":"completions","context":[["// A: Begin completions",23],["// FOO_OBJECT_DOT-NEXT: End completions",26],["// PROTOCOL_EXT_DIDCONFORMP3: Begin completions",16],["// PROTOCOL_EXT_P3: Begin completions",16],["// Global completions",17],["// A: End completions",23],["// PLAIN_TOP_LEVEL: End completions",24],["// PLAIN_TOP_LEVEL: Begin completions",24],["// FOO_OBJECT_DOT: Begin completions",26],["// ERROR_COMMON-NOT: Begin completions",25]],"useCount":4088},{"word":"component","context":[["switch component {",211],["func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {",118],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {",262],["assert(blue >= 0 && blue <= 255, \"Invalid blue component\")",97],["assert(red >= 0 && red <= 255, \"Invalid red component\")",98],["if component == 0 {",101],["for component in components {",111],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String! {",140],["func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {",379],["func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {",482]],"useCount":4817},{"word":"components","context":[["components.second = 0",161],["let components = NSDateComponents()",400],["var components: [(String, String)] = []",330],["var components: [String] = []",178],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["components.append(\"-H \\\"\\(field): \\(value)\\\"\")",156],["var components = DateComponents()",150],["return components",447],["let components = cURLCommandComponents(request)",133],["components.minute = 0",145]],"useCount":13048},{"word":"conditions","context":[["//  the following conditions:",133],["//    subject to the following conditions:",150],["//furnished to do so, subject to the following conditions:",151],["//\tfurnished to do so, subject to the following conditions:",174],["//  subject to the following conditions:",202],["//    furnished to do so, subject to the following conditions:",253],["* furnished to do so, subject to the following conditions:",1134],["furnished to do so, subject to the following conditions:",1597],["//  furnished to do so, subject to the following conditions:",7834],["// furnished to do so, subject to the following conditions:",8143]],"useCount":21181},{"word":"configuration","context":[["try coordinator.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)",721],["let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()",405],["configuration: configuration,",344],["configuration: configuration,",344],["return configuration",331],["self.configuration = configuration",310],["self.configuration = configuration",310],["let session = NSURLSession(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())",122],["let configuration = WKWebViewConfiguration()",136],["let configuration = URLSessionConfiguration.default",163]],"useCount":11926},{"word":"connection","context":[["scheduler.scheduleAt(300) { connection = ys.connect() }",116],["//open database connection",144],["self.connection = connection",121],["self.connection = connection",121],["scheduler.scheduleAt(500) { connection = ys.connect() }",128],["scheduler.scheduleAt(800) { connection.dispose() }",128],["var connection: Disposable! = nil",128],["scheduler.scheduleAt(400) { connection.dispose() }",128],["XCTAssertTrue(connection.didRead)",196],["// in connection with the web services and APIs provided by Facebook.",158]],"useCount":6612},{"word":"constant","context":[["multiplier: 1, constant: 0))",142],["constant: 0)",540],["* @constant",315],["constant: 0))",218],["constant: 0.0)",189],["self.constant = amount",157],["constant: 0",157],["self.constant = constant",111],["self.constant = constant",111],["constant: 0),",88]],"useCount":5922},{"word":"constraint","context":[["for constraint in constraints {",277],["return constraint",371],["XCTAssertTrue(contains(returnedConstraints, expected), \"The applied constraint should be returned to the caller\")",84],["constraint.priority = priority",81],["// Add the constraint",70],["constraint.constant = constant",70],["let constraint = NSLayoutConstraint(",141],["XCTAssertTrue(returnedConstraints.contains(expected), \"The applied constraint should be returned to the caller\")",84],["view.addConstraint(constraint)",87],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90]],"useCount":4472},{"word":"constraints","context":[["return constraints",435],["var constraints = [NSLayoutConstraint]()",327],["NSLayoutConstraint.activateConstraints(constraints)",127],["// constraints)",62],["addConstraints(NSLayoutConstraint.constraints(",267],["for constraint in constraints {",277],["let constraints = [",117],["NSLayoutConstraint.constraints(",103],["XCTAssertEqual(returnedConstraints.count, 2, \"There should be two total constraints returned\")",68],["removeConstraints(constraints)",65]],"useCount":5216},{"word":"container","context":[["return container",189],["let container = UIView()",76],["container.register(AnimalType.self) { _ in Cat() }",79],["self.container.addSubview(v2)",80],["self.container.addSubview(v1)",81],["self.container = container",105],["container.addSubview(toView)",91],["self.container = container",105],["toItem: container,",140],["let container = transitionContext.containerView()",113]],"useCount":5811},{"word":"containerView","context":[["containerView.addSubview(toView)",164],["make.centerX.equalTo(containerView)",127],["let containerView = UIView()",117],["let container = transitionContext.containerView()",113],["let containerView = transitionContext.containerView",89],["let containerView = transitionContext.containerView",89],["@IBOutlet weak var containerView: UIView!",222],["let containerView = transitionContext.containerView()",224],["let containerView = transitionContext.containerView()",224],["containerView.addSubview(toViewController.view)",86]],"useCount":4760},{"word":"containing","context":[["Returns an Array containing the results of invoking `valueForKey(_:)` using key on each of the collection's objects.",61],["/// Create a native array buffer containing the elements of `self`,",68],["- parameter header: A dictionary containing all the addional headers",73],["- parameter parameters: A dictionary containing all necessary options",73],["/// containing the same number of elements as `self`, return it.",76],["@param request APIRequest object containing method name and parameters.",85],["- returns: `Results` containing collection elements that match the given predicate.",92],["Returns `Results` containing collection elements that match the given predicate.",96],["/// Produces an array of arrays, each containing n elements, each offset by step.",57],["- returns: Array containing the results of invoking `valueForKey(_:)` using key on each of the collection's objects.",55]],"useCount":4583},{"word":"contains","context":[["if self.parent.childs.contains(self) == false {",179],["expectTrue(s.contains(TestBridgedKeyTy(3030)))",176],["expectTrue(s.contains(TestBridgedKeyTy(1010)))",220],["expectTrue(s.contains(TestBridgedKeyTy(2020)))",176],["expectTrue(s1.contains(1010))",126],["expectTrue(s.contains(TestObjCKeyTy(3030)))",85],["expectTrue(s1.contains(TestKeyTy(1010)))",102],["expectTrue(s.contains(TestObjCKeyTy(1010)))",102],["expectTrue(s1.contains(TestBridgedKeyTy(1010)))",108],["- parameter resource:          Resource object contains information such as `cacheKey` and `downloadURL`.",125]],"useCount":9721},{"word":"content","context":[["return content",127],["self.content = content",295],["self.content = content",295],["limitTransAndScale(matrix: &_touchMatrix, content: _contentRect)",96],["let content = try String(",112],["content: T.Type = T.self,",105],["content: content,",98],["content: content,",98],["let url = NSURL(string: (imageModel?.content)!)",76],["var content: String?",77]],"useCount":7348},{"word":"contentView","context":[["toItem: self.contentView,",85],["contentView.addSubview(titleLabel)",392],["contentView.addSubview(imageView)",253],["addSubview(contentView)",136],["toItem: contentView,",127],["contentView.translatesAutoresizingMaskIntoConstraints = false",122],["@IBOutlet weak var contentView: UIView!",103],["contentView.addSubview(textField)",79],["contentView.addSubview(label)",84],["contentView.layer.masksToBounds = true",99]],"useCount":9720},{"word":"context","context":[["context: context,",534],["CGContextSaveGState(context)",1801],["CGContextRestoreGState(context)",1734],["let context = UIGraphicsGetCurrentContext()",1697],["// Saves changes in the application's managed object context before the application terminates.",1424],["CGContextBeginPath(context)",456],["super.awakeWithContext(context)",831],["override func awakeWithContext(context: AnyObject?) {",825],["CGContextStrokePath(context)",582],["context: context,",534]],"useCount":56697},{"word":"continue","context":[["guard let e = dataSet.entryForIndex(j) else { continue }",87],["guard let formatter = dataSet.valueFormatter else { continue }",124],["else { continue }",174],["continue;",662],["if errno == EINTR { continue }",41],["if line == \"\" { continue }",51],["continue",7955],["guard i != j else { continue }",62],["/// Start or continue decoding a UTF sequence.",56],["guard let e = dataSet.entryForIndex(j) as? BarChartDataEntry else { continue }",63]],"useCount":10592},{"word":"controller","context":[["func controllerDidChangeContent(controller: NSFetchedResultsController) {",381],["return controller",653],["controller.delegate = self",347],["controller.navigationItem.leftItemsSupplementBackButton = true",328],["// This method is called when watch view controller is about to be visible to user",793],["// This method is called when watch view controller is no longer visible",832],["// Get the new view controller using [segue destinationViewController].",848],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["// Get the new view controller using segue.destinationViewController.",6255],["// Pass the selected object to the new view controller.",7085]],"useCount":30326},{"word":"convenience","context":[["convenience init()",87],["convenience init(){",83],["convenience init(red: Int, green: Int, blue: Int) {",103],["convenience override init() {",121],["convenience init (",123],["public convenience init(",133],["required convenience init?(coder aDecoder: NSCoder) {",146],["public convenience override init() {",184],["public convenience init() {",812],["convenience init() {",1113]],"useCount":8580},{"word":"coordinator","context":[["coordinator = nil",671],["return coordinator",1610],["super.viewWillTransition(to: size, with: coordinator)",157],["super.viewWillTransitionToSize(size, withTransitionCoordinator: coordinator)",438],["let coordinator = self.persistentStoreCoordinator",1601],["managedObjectContext.persistentStoreCoordinator = coordinator",1563],["// Create the coordinator and store",1472],["let coordinator = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)",841],["try coordinator.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)",721],["if coordinator == nil {",711]],"useCount":11644},{"word":"copy","context":[["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["return copy",702],["public override func copy() -> AnyObject {",139],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160]],"useCount":26347},{"word":"cornerRadius","context":[["layer.cornerRadius = cornerRadius",320],["layer.cornerRadius = cornerRadius",320],["return layer.cornerRadius",150],["layer.cornerRadius = newValue",122],["self.layer.cornerRadius = cornerRadius",102],["self.layer.cornerRadius = cornerRadius",102],["@IBInspectable var cornerRadius: CGFloat {",82],["radius: self.cornerRadius,",72],["mkLayer.setMaskLayerCornerRadius(cornerRadius)",71],["@IBInspectable var cornerRadius: CGFloat = 0 {",71]],"useCount":5344},{"word":"correct","context":[["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["it(\"should have the correct raw value\") {",870],["it(\"should reveal the correct suffix\"){",60],["// cursor land on the correct initial element, but if not followed by LayoutChanged,",60],["// calculate the correct offset depending on the draw position of the value",118],["it(\"returns the correct text\") {",120],["XCTAssertEqual(res.messages, correct)",311],["let correct = [",236],["let correct: [Recorded<Int>] = [",190],["XCTAssertEqual(res.events, correct)",143]],"useCount":12920},{"word":"count","context":[["if count == 0 {",557],["count += 1",1032],["return count",1067],["var count = 0",1682],["var count: Int {",570],["count++",633],["for i in 0..<count {",636],["public var count: Int {",825],["return urls[urls.count-1]",930],["return items.count",507]],"useCount":90319},{"word":"create","context":[["return create { observer in",80],["return Disposables.create()",360],["return Observable.create { observer in",159],["//create task closure",155],["return create",107],["presentSignInViewController() // TODO UX Right now the flow for sign in and create account is the same",102],["return Disposables.create {",85],["let path = \"lists/subscribers/create.json\"",81],["/// In other words, this will create a new SignalProducer which will apply",70],["// create",66]],"useCount":6445},{"word":"createHotObservable","context":[["let e3 = scheduler.createHotObservable([",219],["let ys = scheduler.createHotObservable([",199],["let e2 = scheduler.createHotObservable([",336],["let xs1 = scheduler.createHotObservable([",301],["let xs2 = scheduler.createHotObservable([",287],["let e1 = scheduler.createHotObservable([",667],["let e0 = scheduler.createHotObservable([",667],["let xs = scheduler.createHotObservable([",2361],["let l = scheduler.createHotObservable([",244],["let r = scheduler.createHotObservable([",236]],"useCount":7778},{"word":"created","context":[["- returns: The created request.",129],[":returns: The created JSON",138],["/// - returns: The created `UploadRequest`.",126],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90],["- returns: The created JSON",385],["- returns: The created download request.",136],[":returns: The created upload request.",408],[":returns: The created request.",174],[":returns: The created download request.",217],["- returns: The created upload request.",289]],"useCount":5615},{"word":"credential","context":[["if credential != nil {",97],["success: { credential, response, parameters in",90],["delegate.credential = credential",94],["delegate.credential = credential",94],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["credential, response, parameters in",200],["var credential: NSURLCredential?",199],["credential, response in",193],["completionHandler(disposition, credential)",186]],"useCount":4718},{"word":"ctx","context":[["ctx.saveGState()",544],["ctx.closePath()",569],["ctx.restoreGState()",538],["let parser = ctx.parser",117],["CGContextFillPath(ctx)",122],["CGContextSaveGState(ctx)",132],["CGContextStrokePath(ctx)",151],["let ctx = UIGraphicsGetCurrentContext()",284],["ctx.drawPath(using: .eoFill)",377],["- ctx: the parse tree",558]],"useCount":6332},{"word":"current","context":[["let calendar = Calendar.current",272],["PlaygroundPage.current.needsIndefiniteExecution = true",183],["- Returns: The current Layout instance.",150],["/// - Parameter other: A set of the same type as the current set.",102],["return current",136],["//Getting index of current textField.",116],["PlaygroundPage.current.liveView = PlaygroundView()",93],["/// This will also recalculate the current minimum and maximum values of the DataSet and the value-sum.",91],["// Must be called in `playgroundPrologue()` to update with the current page contents.",80],["// Call the handler with the current timeline entry",73]],"useCount":8254},{"word":"cursor","context":[["parameters[\"cursor\"] ??= cursor",72],["\"cursor\": Serialization._StringSerializer.serialize(value.cursor),",85],["\"cursor\": Serialization._StringSerializer.serialize(value.cursor),",85],["self.cursor = cursor",181],["self.cursor = cursor",181],["parameters[\"cursor\"] = cursor!",252],["parameters[\"cursor\"] = cursor!",252],["if cursor != nil {",213],[">>== { cursor in",63],["parameters[\"cursor\"] ??= cursor",72]],"useCount":4327},{"word":"customization","context":[["- parameter options: Dictionary holding any customization options user might want to set",12],[":param: options Dictionary holding any customization options user might want to set",13],["///   customization, an override of `customMirror` should pass",14],["// Override point for customization after application launch.",16653],["// customization using delegate",13],["In case some customization need to be made on it before usage,",12],["// so normal delegate customization can also be used",12],["// MARK: Object customization",11]],"useCount":16740},{"word":"d","context":[["return .dictionary(d)",2004],["var d {",1355],["return .Dictionary(d)",1589],["var d = [String: JSON]()",1982],["protocol d {",546],["class d",618],["class d {",628],["var d = [String : JSON]()",704],["return d",880],["let tag = Serialization.getTag(d)",1011]],"useCount":55595},{"word":"d1","context":[["var d2 = d1",345],["var d1 = getCOWSlowDictionary()",144],["var d1 = getCOWFastDictionary()",162],["var identity1 = d1._rawIdentifier()",162],["var identity1 = unsafeBitCast(d1, to: Int.self)",189],["_fixLifetime(d1)",234],["assert(identity1 == unsafeBitCast(d1, Int.self))",240],["assert(identity1 == d1._rawIdentifier())",288],["assert(d1.count == 3)",360],["assert(identity1 == unsafeBitCast(d1, to: Int.self))",336]],"useCount":5146},{"word":"d2","context":[["var identity2 = unsafeBitCast(d2, Int.self)",75],["assert(identity2 == d2._rawIdentifier())",78],["assert(isNativeDictionary(d2))",144],["assert(d2.count == 0)",144],["_fixLifetime(d2)",216],["assert(identity1 == unsafeBitCast(d2, to: Int.self))",84],["var identity2 = d2._rawIdentifier()",90],["var d2 = d1",345],["var identity2 = unsafeBitCast(d2, to: Int.self)",105],["assert(identity2 == unsafeBitCast(d2, to: Int.self))",91]],"useCount":4210},{"word":"data","context":[["dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\"",1439],["if let data = data {",857],["if let data = data {",857],["self.data = data",953],["self.data = data",953],["return data",1320],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["// Delete the row from the data source",1654],["// MARK: - Table view data source",3458],["let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))",553]],"useCount":88948},{"word":"dataSet","context":[["let valueFont = dataSet.valueFont",170],["CGContextSetFillColorWithColor(context, dataSet.barShadowColor.CGColor)",87],["var entries = dataSet.yVals",88],["if !dataSet.isDrawValuesEnabled || dataSet.entryCount == 0",103],["if !dataSet.isDrawValuesEnabled || dataSet.entryCount == 0",103],["for dataSet in _dataSets",117],["guard let formatter = dataSet.valueFormatter else { continue }",124],["CGContextSetFillColorWithColor(context, dataSet.colorAt(j).CGColor)",141],["let trans = dataProvider.getTransformer(dataSet.axisDependency)",177],["let entryCount = dataSet.entryCount",232]],"useCount":9250},{"word":"dataSource","context":[["self.dataSource = dataSource",151],["return dataSource.count",141],["tableView.dataSource = dataSource",155],["self.dataSource = self",231],["dataSource = self",248],["self.tableView.dataSource = self",496],["tableView.dataSource = self",1519],["collectionView.dataSource = self",665],["self.dataSource = dataSource",151],["tableView.dataSource = dataSource",155]],"useCount":9250},{"word":"date","context":[["let date = NSDate()",567],["var date = NSDate()",105],["return formatter.stringFromDate(date)",109],["let date: NSDate",110],["var date: NSDate?",110],["let date = Date()",138],["return dateFormatter.stringFromDate(date)",170],["self.date = date",444],["self.date = date",444],["return date",497]],"useCount":15827},{"word":"dateFormatter","context":[["let dateFormatter = NSDateFormatter()",1905],["let dateFormatter = DateFormatter()",477],["return dateFormatter",323],["var dateFormatter = NSDateFormatter()",232],["dateFormatter.dateFormat = \"yyyy-MM-dd\"",210],["return dateFormatter.stringFromDate(date)",170],["dateFormatter.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")",149],["return dateFormatter.stringFromDate(self)",159],["dateFormatter.dateFormat = format",142],["dateFormatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"",130]],"useCount":8689},{"word":"db","context":[["try record.insert(db)",249],["db.close()",119],["self.db = db",129],["let db = ALBNoSQLDB.sharedInstance",95],["self.db = db",129],["let db = BrowserDB(filename: \"browser.db\", files: files)",135],["let db = BrowserDB(filename: \"browser.db\", files: files)",135],["try db.execute(",170],["try dbQueue.inTransaction { db in",276],["try dbQueue.inDatabase { db in",1145]],"useCount":10796},{"word":"debug","context":[["Logger.debug()",195],["//debug or log, using + is faster than \\(var).",100],["if debug {",105],["//>>includeStart('debug', pragmas.debug);",187],["log.debug(\"BVC done.\")",65],["log.debug {",64],["BCLogger.debug()",56],["//>>includeStart('debug', pragmas.debug);",187],["//>>includeEnd('debug');",189],["case .debug:",51]],"useCount":5212},{"word":"declaration","context":[["// workaround `Class declaration cannot close over value 'observer' defined in outer scope`",45],["// Members declaration",46],["* // GLSL declaration",46],["// expected-note@-3 {{inferring '@objc' because the declaration is a member of an '@objc' protocol}}",76],["//Nested type declaration end",208],["//Nested type declaration start",208],["//Enum type declaration end",286],["//Enum type declaration start",286],["//Meta information declaration start",1447],["//Meta information declaration end",1447]],"useCount":5273},{"word":"default","context":[["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["default:",52301],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["default: break",3405],["default: return nil",1881],["default: ()",548],["* <p>The default implementation does nothing.</p>",562],["default :",588],["NotificationCenter.default.removeObserver(self)",637],["default: return false",855]],"useCount":85456},{"word":"defaultCenter","context":[["NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillHideNotification, object: nil)",154],["NSNotificationCenter.defaultCenter().postNotification(notification)",150],["NSNotificationCenter.defaultCenter()",145],["let nc = NSNotificationCenter.defaultCenter()",203],["NSNotificationCenter.defaultCenter().removeObserver(self)",2256],["let notificationCenter = NSNotificationCenter.defaultCenter()",546],["NSNotificationCenter.defaultCenter().addObserver(self,",474],["let center = NSNotificationCenter.defaultCenter()",225],["NSNotificationCenter.defaultCenter().addObserver(",392],["NSNotificationCenter.defaultCenter().postNotificationName(",229]],"useCount":6795},{"word":"defaultManager","context":[["let urls = NSFileManager.defaultManager().URLsForDirectory(.ApplicationSupportDirectory, inDomains: .UserDomainMask)",41],["if NSFileManager.defaultManager().fileExistsAtPath(path) {",76],["NSFileManager.defaultManager().moveItemAtURL(location, toURL: destination, error: &fileManagerError)",44],["try NSFileManager.defaultManager().removeItemAtPath(filePath)",54],["let urls = NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask)",1545],["let fileManager = NSFileManager.defaultManager()",1391],["let fm = NSFileManager.defaultManager()",306],["let manager = NSFileManager.defaultManager()",200],["try NSFileManager.defaultManager().removeItemAtPath(path)",62],["let theme = SettingsManager.defaultManager.currentTheme",196]],"useCount":5146},{"word":"defaults","context":[["let defaults:NSUserDefaults = NSUserDefaults.standardUserDefaults()",44],["self.defaults.synchronize()",52],["let defaults = NSUserDefaults.standardUserDefaults();",51],["let defaults = NSUserDefaults.standardUserDefaults()",1544],["defaults.synchronize()",838],["let defaults = UserDefaults.standard",312],["var defaults = NSUserDefaults.standardUserDefaults()",144],[":param: queue A dispatch_queue_t, defaults to the main queue.",86],["/// Initialize the oscillator with defaults",62],["private let defaults = NSUserDefaults.standardUserDefaults()",57]],"useCount":4564},{"word":"defer","context":[["debugLog(\"BEGIN \\(#function)\"); defer { debugLog(\"END \\(#function)\") }",110],["defer { disposable.dispose() }",78],["defer { CEFStringPtrRelease(cefStrPtr) }",118],["defer { _fixLifetime(self) }",156],["_lock.lock(); defer { _lock.unlock() }",197],["defer {",2646],["lock.lock(); defer { lock.unlock() }",103],["defer {objc_sync_exit(self)}",48],["defer{",59],["defer { lock.unlock() }",72]],"useCount":5284},{"word":"deinit","context":[["deinit {",13294],["deinit{",939],["deinit",596],["deinit {}",169],["//    deinit {",60],["// PASS_COMMON-NEXT: {{^}}    @objc deinit{{$}}",36],["func `deinit`() {",34],["//\tdeinit {",37],["// CHECK: @objc deinit",38],["deinit { }",39]],"useCount":15944},{"word":"delay","context":[["func delay(delay:Double, closure:()->()) {",154],["animation.beginTime = CACurrentMediaTime() + CFTimeInterval(delay)",134],["func delay(delay:Double, closure:()->()) {",154],["delay: 0,",777],["delay: delay,",173],["delay: 0.0,",448],["delay: delay,",173],["Int64(delay * Double(NSEC_PER_SEC))",318],["self.delay = delay",104],["self.delay = delay",104]],"useCount":7549},{"word":"delegate","context":[["let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate",648],["tableView.delegate = self",1496],["self.delegate = delegate",1260],["delegate = self",530],["for delegate in delegates {",564],["collectionView.delegate = self",592],["self.delegate = self",597],["self.delegate = delegate",1260],["cell.delegate = self",674],["locationManager.delegate = self",632]],"useCount":52154},{"word":"describe","context":[["describe(\"these will fail\") {",207],["describe(\"positive match\") {",107],["describe(\"negative match\") {",95],["describe(\"init\") {",68],["describe(\"trailing closure\") {",61],["describe(\"#init\") {",56],["describe(\"combinePrevious\") {",44],["describe(\"take\") {",51],["describe(\"map\") {",54],["describe(\"observeOn\") {",57]],"useCount":4188},{"word":"description","context":[["self.description = description",447],["self.description = description",447],["open var description: String {",458],["override var description: String {",739],["override public var description: String {",342],["public override var description: String {",404],["public var description: String {",6709],["var description: String {",2595],["public var description : String {",1262],["return description",829]],"useCount":36070},{"word":"destination","context":[[":param: destination The closure used to determine the destination of the downloaded file.",217],["return Manager.sharedInstance.download(data, destination: destination)",67],[":param: destination The closure used to determine the destination of the downloaded file.",217],["- parameter destination: The closure used to determine the destination of the downloaded file.",152],["self.destination = destination",90],["public func download(URLRequest: URLRequestConvertible, destination: Request.DownloadFileDestination) -> Request {",90],["self.destination = destination",90],["return Manager.sharedInstance.download(data, destination: destination)",67],["to destination: DownloadRequest.DownloadFileDestination? = nil)",65],["- parameter destination: The closure used to determine the destination of the downloaded file.",152]],"useCount":4346},{"word":"destinationViewController","context":[["//    let l<#View Controller#> = pSegue.destinationViewController as! <#View Controller#>",28],["(segue.destinationViewController as DetailViewController).detailItem = object",30],["let detailViewController = segue.destinationViewController as! DetailViewController",28],["let navController = segue.destinationViewController as! UINavigationController",29],["guard let rowVC = segue.destinationViewController as? VCType else {",33],["let controller = (segue.destinationViewController as UINavigationController).topViewController as DetailViewController",40],["sourceViewController.presentViewController(destinationViewController, animated: true, completion: nil)",48],["let navigationController = segue.destinationViewController as! UINavigationController",113],["// Get the new view controller using [segue destinationViewController].",848],["// Get the new view controller using segue.destinationViewController.",6255]],"useCount":7884},{"word":"dict","context":[["case .Dictionary(let dict):",660],["case .dictionary(let dict):",691],["dict[NSUnderlyingErrorKey] = error",656],["error = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",490],["let wrappedError = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",811],["dict[NSUnderlyingErrorKey] = error as NSError",818],["return dict",1098],["var dict = [String: AnyObject]()",1334],["dict[NSLocalizedFailureReasonErrorKey] = failureReason",1429],["dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\"",1439]],"useCount":19586},{"word":"dictionary","context":[["case .dictionary(let d):",542],["return .dictionary(output)",680],["case .dictionary:",183],["- parameter optionsInfo:       A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",212],["case .dictionary(let dict):",691],["return dictionary",790],["if let dictionary = value as? [String: AnyObject] {",143],["for (nestedKey, value) in dictionary {",154],["for (key, value) in dictionary {",242],["return .dictionary(d)",2004]],"useCount":18187},{"word":"didReceiveMemoryWarning","context":[["override public func didReceiveMemoryWarning() {",174],["super.didReceiveMemoryWarning()",28335],["override func didReceiveMemoryWarning() {",27430],["override func didReceiveMemoryWarning()",609],["public override func didReceiveMemoryWarning() {",77],["override open func didReceiveMemoryWarning() {",69],["//        super.didReceiveMemoryWarning()",39],["//    override func didReceiveMemoryWarning() {",35],["super.didReceiveMemoryWarning();",29],["override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }",24]],"useCount":56882},{"word":"didSelectRowAtIndexPath","context":[["func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2927],["override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2792],["public func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",277],["func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {",65],["super.tableView(tableView, didSelectRowAtIndexPath: indexPath)",38],["public override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",94],["override func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {",41],["override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)",136],["func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)",116],["func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath){",63]],"useCount":6863},{"word":"didSet","context":[["didSet",439],["didSet { }",102],["didSet { setNeedsDisplay() }",212],["didSet { reloadAllComponents() }",47],["//        didSet {",47],["didSet { updateTextStorage(parseText: false) }",55],["didSet {}",345],["didSet(oldValue) {",80],["didSet {",36249],["didSet{",4063]],"useCount":42835},{"word":"discardableResult","context":[["// PRINT-NEXT:    @discardableResult",11],["@discardableResult",10616],["// PASS_PRINT_AST: @discardableResult",20]],"useCount":10647},{"word":"dismiss","context":[["picker.dismiss(animated: true, completion: nil)",53],["@IBAction func dismiss(sender: AnyObject) {",51],["dismiss()",259],["func dismiss() {",210],["self.dismiss()",174],["public func dismiss() {",82],["controller.dismiss(animated: true, completion: nil)",56],["dismiss(animated: true, completion: nil)",469],["self.dismiss(animated: true, completion: nil)",488],["SVProgressHUD.dismiss()",1115]],"useCount":4051},{"word":"dismissViewControllerAnimated","context":[["self.dismissViewControllerAnimated(true, completion: { () -> Void in",113],["controller.dismissViewControllerAnimated(true, completion: nil)",260],["self.dismissViewControllerAnimated(false, completion: nil)",151],["picker.dismissViewControllerAnimated(true, completion: nil)",359],["dismissViewControllerAnimated(true, completion: nil)",2490],["self.dismissViewControllerAnimated(true, completion: nil)",3087],["alert.dismissViewControllerAnimated(true, completion: nil)",114],["self.presentingViewController?.dismissViewControllerAnimated(true, completion: nil)",108],["self.navigationController?.dismissViewControllerAnimated(true, completion: nil)",92],["presentingViewController?.dismissViewControllerAnimated(true, completion: nil)",118]],"useCount":8883},{"word":"dispatch_async","context":[["dispatch_async(dispatch_get_main_queue(),{",357],["dispatch_async(dispatch_get_main_queue()) {",6362],["dispatch_async(dispatch_get_global_queue(priority, 0)) {",231],["dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), {",241],["dispatch_async(dispatch_get_main_queue(), {",3005],["dispatch_async(self.queue) {",281],["dispatch_async(dispatch_get_main_queue(), { () -> Void in",2723],["dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {",636],["dispatch_async(dispatch_get_main_queue()) { () -> Void in",474],["dispatch_async(queue) {",448]],"useCount":20295},{"word":"dispatch_get_main_queue","context":[["dispatch_async(dispatch_get_main_queue()) { () -> Void in",474],["dispatch_async(dispatch_get_main_queue())",137],["dispatch_after(time, dispatch_get_main_queue()) {",171],["dispatch_async(dispatch_get_main_queue()){",220],["dispatch_after(delayTime, dispatch_get_main_queue()) {",279],["dispatch_get_main_queue(), closure)",289],["dispatch_async(dispatch_get_main_queue(),{",357],["dispatch_async(dispatch_get_main_queue(), { () -> Void in",2723],["dispatch_async(dispatch_get_main_queue(), {",3005],["dispatch_async(dispatch_get_main_queue()) {",6362]],"useCount":17687},{"word":"disposable","context":[["disposable = innerDisposable",127],["disposable.addDisposable(addedDisposable)",119],["let disposable = SimpleDisposable()",124],["disposable.dispose()",966],["return disposable",703],["let disposable = CompositeDisposable()",344],["return SignalProducer { observer, disposable in",338],["var disposable: Disposable!",175],["- returns: The disposable object used to cancel the scheduled action (best effort).",171],["sink.disposable = sink.run()",146]],"useCount":9199},{"word":"dispose","context":[["subscription.dispose()",205],["self.dispose()",522],["dataSourceSubscription.dispose()",124],["public func dispose() {",320],["d.dispose()",272],["func dispose() {",270],["scheduler.scheduleAt(400) { connection.dispose() }",128],["scheduler.scheduleAt(800) { connection.dispose() }",128],["dispose()",657],["disposable.dispose()",966]],"useCount":6661},{"word":"distribute","context":[["// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",84],["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174],["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",67]],"useCount":19921},{"word":"do","context":[["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["do{",1645],["furnished to do so, subject to the following conditions:",1597],["// Return false if you do not want the specified item to be editable.",1475],["* furnished to do so, subject to the following conditions:",1134],["do",1119],["// Return false if you do not want the item to be re-orderable.",1078],["do {",53881],["// furnished to do so, subject to the following conditions:",8143],["//  furnished to do so, subject to the following conditions:",7834]],"useCount":94784},{"word":"does","context":[["XCTAssertEqual(image.size, expectedSize, \"image size does not match expected value\")",62],["* <p>The default implementation does nothing.</p>",562],["/// is dragging enabled? (moving the chart with the finger) for the chart (this does not affect scaling).",125],["// Try to delete a key that does not exist.",53],["// Try to find a key that does not exist.",53],["///     instance does not match the decoded value.",84],["// Bartlby does not currenlty discriminate status codes 100 & 101",54],["/// If the component does not exist, nil is returned.",56],["/// is scaling enabled? (zooming in and out by gesture) for the chart (this does not affect dragging).",64],["///   * `KeyNotFound`: A key `path` does not exist inside a descendant",83]],"useCount":6360},{"word":"domain","context":[["self.domain = domain",66],["let wrappedError = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",811],["self.domain = domain",66],["if let domain = server.host {",69],["return (nil, Error(code: ErrorCode.ParsingError.code, domain: JSValueErrorDomain, userInfo: info))",70],["return .Error(NSError(domain: \"SWXMLDomain\", code: 1000, userInfo: userInfo))",80],["XCTAssertEqual(error.domain, Error.Domain, \"error domain should match expected value\")",100],["XCTAssertEqual(error.domain, Error.Domain, \"error domain should match expected value\")",100],["///Error domain",141],["error = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",490]],"useCount":8358},{"word":"don","context":[["// so we don't expcitly unset it.",52],["fatalError(\"don't call this initializer\")",44],["// make sure the circles don't do shitty things outside bounds",45],["// We don't know what share action the user has chosen so we simply always",45],["// If we still don't have a valid URL, something is broken. Give up.",59],["// make sure the lines don't do shitty things outside bounds",76],["///     // Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"",56],["///     let line = \"BLANCHE:   I don't want realism. I want magic!\"",56],["///     // Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"",56],["// We don't want to connect when on 3G.",47]],"useCount":4128},{"word":"done","context":[["done = true",245],["expect(\"time\").toEventually( equal(\"done\") )",196],["var done = false",164],["done in",128],["waitUntil(timeout: 5) { done in",94],["func done() {",82],["expect(time) == \"done\"",210],["done()",1724],["waitUntil { done in",1014],["time = \"done\"",212]],"useCount":8400},{"word":"drawRect","context":[["override func drawRect(dirtyRect: NSRect) {",397],["super.drawRect(rect)",629],["super.drawRect(dirtyRect)",314],["override public func drawRect(rect: CGRect) {",248],["public override func drawRect(rect: CGRect) {",225],["public override func drawRect(rect: CGRect)",162],["override func drawRect(rect: CGRect)",161],["super.drawRect(rect);",39],["override func drawRect(rect: CGRect) {",2236],["// Only override drawRect: if you perform custom drawing.",839]],"useCount":5519},{"word":"duration","context":[["self.duration = duration",331],["animation.duration = duration",402],["animation.duration = duration",402],["/// - parameter xAxisDuration: duration for animating the x axis",352],["/// - parameter yAxisDuration: duration for animating the y axis",352],["self.duration = duration",331],["/// - parameter duration: the duration of the animation in seconds",189],["return duration",313],["UIView.animateWithDuration(duration, animations: {",214],["/// - parameter duration: the duration of the animation in seconds",189]],"useCount":15714},{"word":"dynamic","context":[["// After populating your dynamic notification interface call the completion block.",362],["dynamic var boolCol = false",64],["dynamic var title = \"\"",62],["dynamic var name: String?",59],["dynamic var intCol = 0",73],["dynamic var age = 0",97],["dynamic var name: String = \"\"",110],["dynamic var name = \"\"",261],["// Populate your dynamic notification interface as quickly as possible.",322],["// Implement it if you use a dynamic notification interface.",362]],"useCount":5397},{"word":"e","context":[["typealias e",446],["} catch let e {",627],["e.fulfill()",826],["enum e {",574],["switch e {",556],["let e = self.expectation()",470],["typealias e : e",372],["typealias e : e",372],["protocol e {",390],["if let e = error {",403]],"useCount":31268},{"word":"each","context":[["// evaluate each expression exactly once",236],["- parameter onNext: Action to invoke for each element in the observable sequence.",75],["each {",80],["or an `Array` with one object for each persisted property. An exception will be",82],["/// Maps each event from `signal` to a new signal, then flattens the",92],["- parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.",138],["/// Maps each event from `self` to a new producer, then flattens the",86],["/* Called before each frame is rendered */",319],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248]],"useCount":50143},{"word":"editing","context":[["NSLog(\"\\(NSStringFromClass(self.dynamicType)) unable to commit editing to terminate\")",41],["if tableView.editing {",42],["NSLog(\"\\(NSStringFromClass(self.dynamicType)) unable to commit editing before saving\")",40],["tableView.editing = false",37],["if !editing {",43],["if editing {",125],["override func setEditing(editing: Bool, animated: Bool) {",146],["super.setEditing(editing, animated: animated)",180],["// Override to support editing the table view.",1677],["// Override to support conditional editing of the table view.",1645]],"useCount":4653},{"word":"editingStyle","context":[["commitEditingStyle editingStyle: UITableViewCellEditingStyle,",35],["if editingStyle == .Delete",40],["if (editingStyle == .Delete) {",43],["switch editingStyle {",65],["} else if editingStyle == .Insert {",1760],["if editingStyle == .delete {",163],["} else if editingStyle == .insert {",87],["if editingStyle == .Delete {",2208],["if editingStyle == UITableViewCellEditingStyle.Delete {",145],["if (editingStyle == UITableViewCellEditingStyle.Delete) {",107]],"useCount":4780},{"word":"element","context":[["/// Advance to the next element and return it, or `nil` if no next",200],["/// Valid indices consist of the position of every element and a",113],["/// Access the element at `position`.",138],["- parameter resultSelector: Function to invoke whenever any of the sources produces an element.",131],["for element in elements {",209],["return element",565],["for element in self {",332],["/// The position of the first element in a non-empty collection.",268],["/// element exists.",224],["func foo(element: T) {} // expected-error {{'T' has been renamed to 'Element'}} {{21-22=Element}}",112]],"useCount":17529},{"word":"elements","context":[["baseElements.append(contentsOf: elements)",288],["public init(dictionaryLiteral elements: (String, AnyObject)...) {",138],["- parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.",138],["makeCollectionOfEquatable: { (elements: [MinimalEquatableValue]) in",120],["self.init(elements)",260],["offsetBy: numericCast(prefix.count + elements.count))",288],["for element in elements {",209],["/// Return a *generator* over the elements of this *sequence*.",179],["/// elements.",161],["public init(arrayLiteral elements: AnyObject...) {",138]],"useCount":17981},{"word":"else","context":[["else {",33969],["} else {",174103],["else",16072],["}else{",13684],["#else",10971],["else{",4435],["}else {",3890],["} else if editingStyle == .Insert {",1760],["else { return }",1388],["else { return nil }",845]],"useCount":312562},{"word":"empty","context":[["collection is empty.",115],["return Observable.empty()",117],["/// In an empty collection, `startIndex == endIndex`.",134],["// An empty implementation adversely affects performance during animation.",884],["/// The position of the first element in a non-empty collection.",268],["return .empty",221],["return RACSignal.empty()",141],["return SignalProducer.empty",112],["/// Identical to endIndex in an empty collection.",89],["failureMessage.postfixMessage = \"be empty\"",88]],"useCount":9393},{"word":"enabled","context":[["if enabled {",260],["_pinchGestureRecognizer.enabled = _pinchZoomEnabled || _scaleXEnabled || _scaleYEnabled",220],["self.enabled = true",127],["/// is dragging enabled? (moving the chart with the finger) for the chart (this does not affect scaling).",125],["// if drawing the bar shadow is enabled",119],["// if drawing the limit-value label is enabled",111],["enabled = true",111],["enabled = false",111],["sender.enabled = false",106],["self.navigationItem.rightBarButtonItem?.enabled = false",97]],"useCount":9881},{"word":"encode","context":[["override public func encode() throws -> Dictionary<String,Any> {",544],["open func encode(with aCoder: NSCoder) {",77],["public func encode(with aCoder: NSCoder) {",79],["let urlRequest = try encoding.encode(self.urlRequest, with: parameters)",79],["- parameter key:      JSON key for value to encode.",80],["- parameter property: Object to encode to JSON.",80],["func encode(with aCoder: NSCoder) {",106],["override public func encode() throws -> Dictionary<String,AnyObject> {",202],["let (URLRequest, _) = encoding.encode(self.URLRequest, parameters: parameters)",225],["let (URLRequest, error) = self.encoding.encode(self.URLRequest, parameters: parameters)",258]],"useCount":4517},{"word":"encoding","context":[["//     encoding:(NSStringEncoding)encoding",138],["let (URLRequest, error) = self.encoding.encode(self.URLRequest, parameters: parameters)",258],["let (URLRequest, _) = encoding.encode(self.URLRequest, parameters: parameters)",225],["encoding: encoding,",164],["encoding: encoding,",164],["//     encoding:(NSStringEncoding)enc",161],["encoding: ParameterEncoding = .URL,",151],["self.encoding = encoding",150],["self.encoding = encoding",150],["//     encoding:(NSStringEncoding)encoding",138]],"useCount":11324},{"word":"end","context":[["calcMinMax(start: _lastStart, end: _lastEnd)",204],["//Meta information declaration end",1447],["// CHECK-NEXT: @end",807],["//Enum type declaration end",286],["//#-end-hidden-code",279],["let end = [ {",273],["/// The collection's \"past the end\" position.",272],["let end = [Void{",209],["//Nested type declaration end",208],["let end = {",171]],"useCount":14882},{"word":"endIndex","context":[["bounds: startIndex..<endIndex)",288],["var endIndex = d.endIndex",108],["var endIndex = d.endIndex",108],["/// In an empty collection, `startIndex == endIndex`.",134],["///   `position != endIndex`.",162],["_fixLifetime(endIndex)",210],["public var endIndex: Int {",228],["public var endIndex: Index {",239],["/// `endIndex` is not a valid argument to `subscript`, and is always",246],["let endIndex = base.index(",288]],"useCount":10779},{"word":"endif","context":[["#endif  // expected-error 2 {{expected '}' at end of closure}}",20],["#endif",29568],["//#endif",69],["//        #endif",63],["#endif // _runtime(_ObjC)",50],["// CHECK: <#kw>#endif</#kw>",48],["//    #endif",21],["// expected-error@+1{{expected #else or #endif at end of conditional compilation block}}",20],["// CHECK-NEXT: #endif",13],["// PASS_PRINT_AST: #endif",12]],"useCount":29907},{"word":"entry","context":[["return entry",126],["// CHECK-NEXT: entry:",157],["/// - parameter e: the entry to add",81],["let maxx = min(max(minx + 2, dataSet.entryIndex(entry: entryTo) + 1), entryCount)",76],["// Call the handler with the current timeline entry",73],["entry: e,",65],["/// - returns: the array-index of the specified entry",64],["for entry in entries {",63],["let minx = max(dataSet.entryIndex(entry: entryFrom) - diff, 0)",63],["entries.append(entry)",96]],"useCount":6668},{"word":"enum","context":[["enum k {",351],["import enum Result.NoError",186],["public enum Action {",186],["enum S{",204],["enum b{",253],["enum B {",432],["enum e {",574],["enum S {",874],["enum b {",1456],["enum A {",1497]],"useCount":22022},{"word":"equal","context":[["XCTAssertEqual(byteValues.count, progressValues.count, \"byteValues count should equal progressValues count\")",79],["relatedBy: .equal,",603],["expect(\"time\").toEventually( equal(\"done\") )",196],["relatedBy: NSLayoutRelation.equal,",140],["XCTAssertEqual(byteValueFractionalCompletion, 1.0, \"byte value fractional completion should equal 1.0\")",79],["expect(lastValue).to(equal(1))",115],["expect(lastValue).to(equal(2))",115],["expect(error).to(equal(TestError.Default))",108],["XCTAssertEqual(components[0..<3], [\"$\", \"curl\", \"-i\"], \"components should be equal\")",89],["XCTAssertEqual(components.last ?? \"\", \"\\\"\\(URLString)\\\"\", \"URL component should be equal\")",85]],"useCount":10896},{"word":"equalTo","context":[["make.centerX.equalTo(self)",253],["make.left.right.bottom.equalTo(self.view)",186],["make.trailing.equalTo(self)",195],["make.edges.equalTo(self)",209],["make.size.equalTo(UIConstants.ToolbarHeight)",212],["make.height.equalTo(20)",225],["make.height.equalTo(UIConstants.ToolbarHeight)",259],["make.edges.equalTo(self.view)",261],["make.left.right.equalTo(self.view)",345],["make.centerY.equalTo(self)",465]],"useCount":17254},{"word":"err","context":[["if let err = err {",315],["if let err = err {",315],["if let err = error {",375],["var err: NSError? = nil",414],["if err != nil {",443],["error = err",576],["var err: NSError?",578],["if let err = SQLiteDB.sharedInstance.open() {",241],["err = error",221],["return err",214]],"useCount":11628},{"word":"error","context":[["} catch let error as NSError {",3604],["case .Failure(let error):",1787],["if error == nil {",2129],["} catch let error {",2306],["var error: NSError? = nil",2343],["var error: NSError?",3652],["print(error)",4084],["if let error = error {",4176],["if let error = error {",4176],["if error != nil {",4494]],"useCount":212677},{"word":"errors","context":[["Possible errors returned by this function are:",256],["- SQLite errors (0 - 101)",241],["/// - throws: One of the following errors contained in `JSON.Error`:",94],["XCTAssertTrue(errors.isEmpty, \"Expected no errors on operation finish\")",44],["errors.append(error)",44],["/// Returns the result of applying `transform` to `Success`es’ values, or re-wrapping `Failure`’s errors.",45],["possible errors, omit the argument, or pass in `nil`.",46],["// I got really weird EXC_BAD_ACCESS errors on a non-null reference when I made this a getter.",48],["XCTAssertEqual(operation.errors.count, 0)",52],["/// If the conversion fails, the signal errors.",52]],"useCount":4219},{"word":"event","context":[["override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {",298],["super.touchesEnded(touches, withEvent: event)",303],["override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {",308],["signal.observe { event in",341],["observer.action(event)",370],["override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",445],["return self.observe { event in",469],["super.touchesBegan(touches, withEvent: event)",539],["override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",1186],["switch event {",3396]],"useCount":23771},{"word":"events","context":[["return ControlEvent(events: source)",291],["events.append(event)",61],["/// `Interrupted` events on inner producers will be treated like `Completed`",65],["/// events on inner producers.",65],["XCTAssertEqual(res.events, [])",92],["for event in events {",125],["XCTAssertEqual(res.events, correct)",143],["XCTAssertEqual(res.events, messages)",183],["XCTAssertEqual(res.events, [",1264],["XCTAssertEqual(res.events, correctMessages)",215]],"useCount":7228},{"word":"example","context":[["This method is useful only in specialized circumstances, for example, when building",106],["// This is an example of a performance test case.",14731],["// This is an example of a functional test case.",14616],["//  These example codes are written for O'Reilly's iOS 8 Swift Programming Cookbook",504],["* @example",277],["For example:",177],["example:",152],["/// For example:",146],["//        // This is an example of a performance test case.",133],["This file shows an example of implementing the OperationCondition protocol.",104]],"useCount":36146},{"word":"execute","context":[["DispatchQueue.global(qos: DispatchQoS.QoSClass.default).async(execute: { () -> Void in",95],["execute()",74],["public override func execute() {",69],["DispatchQueue.main.async(execute: { () -> Void in",393],["// execute request",116],["// execute REST request",131],["func execute() {",152],["override func execute() {",273],["try db.execute(",170],["DispatchQueue.main.async(execute: {",737]],"useCount":6087},{"word":"expect","context":[["expect(error).to(beNil())",523],["expect(completed) == true",808],["expect(lastValue).to(beNil())",977],["expect(completed) == false",1087],["expect(observed) == 4",288],["expect(lastValue) == 1",294],["expect(completed).to(beTruthy())",312],["expect(completed).to(beFalsy())",355],["expect(result).to(beNil())",465],["expect.fulfill()",492]],"useCount":33695},{"word":"expectEqual","context":[["expectEqual(identity1, s1._rawIdentifier())",383],["expectEqual(identity1, unsafeBitCast(s1, Int.self))",385],["expectEqual(identity1, unsafeBitCast(s, to: Int.self))",427],["expectEqual(identity1, unsafeBitCast(s1, to: Int.self))",539],["expectEqual(expected, output)",722],["expectEqual(3, s1.count)",323],["expectEqual(identity1, unsafeBitCast(s, Int.self))",305],["expectEqual(",1886],["expectEqual(identity1, s._rawIdentifier())",305],["expectEqual(1, 2)",294]],"useCount":22247},{"word":"expectTrue","context":[["expectTrue(checkDecodeUTF8(",784],["expectTrue(isNativeSet(s2))",136],["expectTrue(a.subjectType == A.self)",169],["expectTrue(s.contains(TestBridgedKeyTy(3030)))",176],["expectTrue(s.contains(TestBridgedKeyTy(2020)))",176],["expectTrue(b.subjectType == B.self)",195],["expectTrue(false)",200],["expectTrue(s.contains(TestBridgedKeyTy(1010)))",220],["expectTrue(isCocoaSet(s))",255],["expectTrue(isNativeSet(s))",493]],"useCount":11631},{"word":"expectation","context":[["expectation.fulfill()",10966],["let e = self.expectation()",470],["expectation?.fulfill()",364],["let expectation = self.expectationWithDescription(self.name)",334],["let expectation = expectationWithDescription(\"\\(URL)\")",334],["let expectation = self.expectation(description: description)",258],["let expectation = self.expectation(description: description)",258],["let expectation = expectationWithDescription(description)",239],["let readyExpectation = expectation()",236],["let expectation = expectationWithDescription(\"\")",195]],"useCount":21274},{"word":"expectationWithDescription","context":[["let expectation = expectationWithDescription(\"\\(URL)\")",334],["let readyExpectation = self.expectationWithDescription(\"ready\")",96],["let expectation = self.expectationWithDescription(self.name)",334],["let ex = expectationWithDescription(\"\")",325],["let expect = self.expectationWithDescription(__FUNCTION__)",243],["let expectation = expectationWithDescription(description)",239],["let expectation = expectationWithDescription(\"\")",195],["let expectation = expectationWithDescription(\"Test: \\(#function)\")",123],["let expectation = expectationWithDescription(\"Expected after time\")",115],["let completionExpectation = expectationWithDescription(\"Completion expectation\")",112]],"useCount":6751},{"word":"expected","context":[["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["let expected =",688],["// expected-note@-1 {{add 'if #available' version check}}",363],["self.expected = expected",358],["self.expected = expected",358],["asyncHelper(input: input, expected: expected)",910],["asyncHelper(input: input, expected: expected)",910],["// expected-note@-2 {{add 'if #available' version check}}",804],["// expected-note@-1 {{add @available attribute to enclosing global function}}",764],["expectEqual(expected, output)",722]],"useCount":53244},{"word":"expression","context":[["// evaluate the expression exactly once",56],["// evaluate each expression exactly once",236],["let expression = query.expression",100],["let expression = query.expression",100],["try expression()",69],["let expr = Expression(expression: actualBlock, location: location)",60],["// -- func expression",57],["self.expression = expression",56],["self.expression = expression",56],["switch { // expected-error {{expected expression in 'switch' statement}}",60]],"useCount":4644},{"word":"extension","context":[["extension UIColor {",1405],["extension UIImage {",1015],["extension NSSet {",1012],["extension UIViewController {",990],["public extension String {",803],["extension JSON {",1559],["extension UIView {",1592],["extension Array {",1474],["extension String {",3994],["extension NSData {",1426]],"useCount":79907},{"word":"extensionRegistry","context":[["return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())",555],["try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)",234],["return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())",551],["if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {",547],["if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {",547],["return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())",350],["extensionRegistry = ExtensionRegistry()",246],["try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)",234],["input.readMessage(subBuilder, extensionRegistry:extensionRegistry)",206],["input.readMessage(subBuilder, extensionRegistry:extensionRegistry)",206]],"useCount":5715},{"word":"f","context":[["return f",330],["func f",348],["func f {",411],["protocol f {",451],["func f() {",471],["let render = {(f: CGFloat) in",290],["f",281],["return f(x)",234],["let f = [Void{",222],["let f = {",224]],"useCount":26386},{"word":"fail","context":[["fetch.fail(error)",80],["fail()",257],["describe(\"these will fail\") {",207],["it(\"will eventually fail\") {",202],["it(\"should fail with a sensible failure message\") {",161],[".crashOutputMatches(\"this should fail\")",72],["* return success or fail with message",71],["try self.init(fail: ())",66],["it(\"should fail\") {",57],[".crashOutputMatches(_isDebugAssertConfiguration() ? \"this should fail\" : \"\")",56]],"useCount":4141},{"word":"failed","context":[["XCTFail(\"Parsing version string \\\"\\(str)\\\" unexpectedly failed with error: \\(err)\")",63],["XCTFail(\"Encoding failed due to error: \\(error)\")",465],["XCTFail(\"Decoding failed due to error: \\(error)\")",232],["case .failed:",179],["default: throw ProtocolBuffersError.invalidProtocolBuffer(\"Conversion String to Enum has failed.\")",118],["case let .failed(error):",112],["XCTFail(\"api call failed with error: \\(error)\")",110],["case .failed, .interrupted:",90],["XCTAssertEqual(encrypted, expected, \"encryption failed\")",73],[":param: failure The block that is run on a failed HTTP Request.",74]],"useCount":6405},{"word":"failure","context":[["failure: { error in",303],["}, failure: { error in",315],["failure(error)",317],["case .failure:",388],["}, failure: {(error:NSError!) -> Void in",410],["failure?(error)",432],["case .failure(let error):",751],["}, failure: failure)",1942],["}, failure: failure)",1942],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633]],"useCount":22545},{"word":"failureReason","context":[["let failureReason = \"Failed to read from input stream: \\(inputStream)\"",52],["let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason)",53],["let error = Error.errorWithCode(.JSONSerializationFailed, failureReason: failureReason)",47],["let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason)",53],["let failureReason = \"Data could not be serialized. Input data was nil.\"",63],["dict[NSLocalizedFailureReasonErrorKey] = failureReason as AnyObject?",68],["let userInfo = [NSLocalizedFailureReasonErrorKey: failureReason]",162],["dict[NSLocalizedFailureReasonErrorKey] = failureReason",1429],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["let error = Error.errorWithCode(.JSONSerializationFailed, failureReason: failureReason)",47]],"useCount":4680},{"word":"false","context":[["continueAfterFailure = false",3840],["return false",45770],["UIApplication.sharedApplication().networkActivityIndicatorVisible = false",944],["XCTAssert(false)",1004],["// Return false if you do not want the item to be re-orderable.",1078],["expect(completed) == false",1087],["var completed = false",1411],["// Return false if you do not want the specified item to be editable.",1475],["return false;",1555],["// self.clearsSelectionOnViewWillAppear = false",1578]],"useCount":165291},{"word":"fatalError","context":[["fatalError(\"Type error deserializing\")",1322],["fatalError(\"Unknown tag \\(tag)\")",395],["fatalError(\"not implemented\")",611],["fatalError(\"Failed to deserialize\")",962],["fatalError(\"unavailable function can't be called\")",1217],["fatalError(\"unavailable accessor can't be called\")",1359],["fatalError(\"Modifying proxy array is not supported!\")",224],["fatalError(\"NSCoding not supported\")",370],["fatalError()",2746],["fatalError(\"init(coder:) has not been implemented\")",11614]],"useCount":27099},{"word":"field","context":[["if let field = field {",130],["field = value",79],["// CHECK-64-NEXT:           (field name=_value offset=0",80],["// CHECK-64-NEXT:       (field name=some offset=0",90],["// CHECK-32:       (field name=_value offset=0",104],["components.append(\"-H \\\"\\(field): \\(value)\\\"\")",156],["return field",106],["// CHECK-64:       (field name=_value offset=0",107],["switch field {",188],["if let field = field {",130]],"useCount":6150},{"word":"fieldCheck","context":[["fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))",68],["var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)",1443],["return fieldCheck",900],["fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",900],["fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",900],["return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",543],["fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)",102],["fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)",102],["fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))",68],["fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)",64]],"useCount":7388},{"word":"file","context":[["// This source file is part of the Swift.org open source project",14622],["file: String = #file, line: UInt = #line",307],["This source file is part of the Swift.org open source project",551],["//  to delete and recreate this implementation file for your updated model.",759],["let player = try AKAudioPlayer(file: file)",236],["file: String = #file, line: UInt = #line",307],["_XCTRegisterFailure(true, _XCTFailureDescription(assertionType, 2), message, file, line)",292],["let player = try AKAudioPlayer(file: file)",236],["_XCTRegisterFailure(false, _XCTFailureDescription(assertionType, 1, reason as NSString), message, file, line)",232],[":param: destination The closure used to determine the destination of the downloaded file.",217]],"useCount":38715},{"word":"filter","context":[["sliderUpdateCallback: {(filter, sliderValue) in",467],["filter: nil,",101],["filter: filter,",103],["filter.setDefaults()",103],["filter: filter,",103],[".filter { $0 != nil }",103],["camera.addTarget(filter)",101],["/// Initialize this filter node",112],["self.filter = filter",101],["self.filter = filter",101]],"useCount":8772},{"word":"final","context":[["return final",45],["final public class Builder : ExtendableMessageBuilder {",60],["final",72],["// Perform any final initialization of your application.",230],["final internal class Builder : GeneratedMessageBuilder {",295],["final public class Builder : GeneratedMessageBuilder {",806],["XCTAssertNotNil(final)",50],["/// The final example passes `false` for the `omittingEmptySubsequences`",44],["final func foo() { } // okay",45],["/// Like `scan`, but sends only the final value and then immediately completes.",46]],"useCount":7952},{"word":"finished","context":[["XCTAssertTrue(operation.finished)",209],["}, completion: { (finished) in",212],["finished = true",193],["}) { (finished) in",159],["if finished {",648],["completion: { finished in",311],["}) { (finished) -> Void in",455],["}, completion: { (finished) -> Void in",620],["}, completion: { finished in",1196],["Adds a handler to be called once the request has finished.",657]],"useCount":10258},{"word":"first","context":[["}.first",181],["first = false",183],["var first = true",187],["Returns the index of the first object matching the given predicate,",198],["if let touch = touches.first {",236],["/// The position of the first element in a non-empty collection.",268],["atDate: glucose.first!.startDate,",136],["let initial = first.map { [$0] }",114],["- returns: The index of the first matching object, or `nil` if no objects match.",116],["if let first = generator.next() {",144]],"useCount":16322},{"word":"flags","context":[["return isReachableWithTest({ (flags: SCNetworkReachabilityFlags) -> (Bool) in",117],["var flags: SCNetworkReachabilityFlags = 0",66],["let flags = SecAccessControlCreateFlags(rawValue: policy.rawValue)",90],["var flags = SCNetworkReachabilityFlags()",89],["let needsConnection = (flags.rawValue & UInt32(kSCNetworkFlagsConnectionRequired)) != 0",63],["let accessControl = SecAccessControlCreateWithFlags(kCFAllocatorDefault, accessibility.rawValue, flags, &error)",72],["flags: _fatalErrorFlags())",72],["return flags",72],["self.flags = flags",63],["self.flags = flags",63]],"useCount":4905},{"word":"following","context":[["//  the following URL:",504],["// furnished to do so, subject to the following conditions:",8143],["//  furnished to do so, subject to the following conditions:",7834],["// Uncomment the following line to preserve selection between presentations",1628],["* furnished to do so, subject to the following conditions:",1134],["//  report them to O'Reilly at the following URL:",504],["//    furnished to do so, subject to the following conditions:",253],["furnished to do so, subject to the following conditions:",1597],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["//  subject to the following conditions:",202]],"useCount":27004},{"word":"font","context":[["let labelSettings = ChartLabelSettings(font: ExamplesDefaults.labelFont)",135],["self.font = font",238],[":param: size The size of the font",246],["- parameter size: The size of the font",258],["return font",114],["label.font = font",166],["label.font = font",166],["font: valueFont,",198],["self.font = font",238],["size: self.font.pointSize,",104]],"useCount":9456},{"word":"foo","context":[["func foo() {",337],["func foo()",182],["func foo() {}",407],["foo",111],["func foo() { }",132],["func foo(element: T) {} // expected-error {{'T' has been renamed to 'Element'}} {{21-22=Element}}",112],["next(250, \"foo\"),",135],["foo()",621],["return foo()",136],["expectationForHTTPRequest(httpServer, path: \"/foo\") { request, completionHandler in",160]],"useCount":14249},{"word":"for","context":[["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// Override point for customization after application launch.",16653],["//  A port of MPAndroidChart for iOS",2193],["//  to delete and recreate this implementation file for your updated model.",759],["for item in items {",763],["// Configure the view for the selected state",2954],["override func prepare(for segue: UIStoryboardSegue, sender: Any?) {",958],["for {",1422]],"useCount":178402},{"word":"forKey","context":[["setValue(newValue, forKey: \"inputImage\")",316],["super.setValue(value, forKey: key)",177],["self.setValue(v, forKey: keyName)",158],["setValue(newValue, forKey:\"inputImage\")",158],["setValue(newValue, forKey: \"inputCenter\")",88],["public override func setValue(value: AnyObject?, forKey key: String) {",90],["aCoder.encodeObject(access_token, forKey: \"access_token\")",90],["circle.addAnimation(animation, forKey: \"animation\")",99],["aCoder.encodeObject(name, forKey: \"name\")",106],["override func setValue(value: AnyObject?, forKey key: String) {",116]],"useCount":10156},{"word":"forState","context":[["forState: .Normal)",105],["setTitle(title, forState: UIControlState.Normal)",62],["button.setImage(image, forState: .Normal)",62],["button.setImage(image, forState: UIControlState.Normal)",63],["forState state: UIControlState,",293],["btn.setBackgroundImage(UIImage(named: \"common_button_white_disable\"), forState: UIControlState.Normal)",65],["setTitle(title, forState: .Normal)",66],["button.setTitleColor(UIColor.whiteColor(), forState: .Normal)",73],["button.setTitle(title, forState: .Normal)",115],["btn.setTitle(title, forState: .Normal)",81]],"useCount":5466},{"word":"form","context":[["return form",76],["\"Content-Disposition: form-data; name=\\\"unicorn\\\"; filename=\\\"unicorn.png\\\"\\(CRLF)\" +",80],["let expectation = expectationWithDescription(\"multipart form data upload should succeed\")",82],["form.addFormSection(section)",332],["self.form = form",189],["self.form = form",189],["- Multipart form boundary",175],["let form : XLFormDescriptor",83],["request.setValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")",95],["contentType: \"application/x-www-form-urlencoded\",",95]],"useCount":6610},{"word":"format","context":[["self.format = format",111],["formatter.dateFormat = format",210],["The body part data will be encoded using the following format:",175],["dateFormatter.dateFormat = format",142],["switch format {",139],["self.format = format",111],["format: \"%0.3f\",",104],["/// format string as a template into which the remaining argument",96],["- parameter predicateFormat: The predicate format string which can accept variable arguments.",89],["let format = NSDateFormatter()",83]],"useCount":10258},{"word":"formatter","context":[["formatter.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")",148],["var formatter = NSDateFormatter()",132],["return formatter",926],["let formatter = DateFormatter()",527],["let formatter = NSNumberFormatter()",369],["formatter.dateFormat = format",210],["return formatter.stringFromDate(self)",199],["let formatter = NumberFormatter()",183],["let formatter = NSDateFormatter()",1608],["formatter.dateFormat = \"yyyy-MM-dd\"",162]],"useCount":11602},{"word":"found","context":[["if !found {",117],["/// - returns: the first Entry object found at the given xIndex with binary search.",59],["- returns: Return a json found by the path or a null json with error",186],["if found {",61],["var found = false",204],["found = true",204],["return found",121],["// Test case found by fuzzing",36402],[":returns: Return a json found by the path or a null json with error",98],["/// If the no Entry at the specifed x-index is found, this method returns the Entry at the closest x-index.",69]],"useCount":41566},{"word":"frame","context":[["super.init(frame: frame)",10316],["self.frame = frame",762],["super.init(frame: CGRectZero)",955],["super.init(frame: frame)",10316],["override init(frame: CGRect) {",6875],["override public init(frame: CGRect) {",654],["self.frame = frame",762],["window = UIWindow(frame: UIScreen.mainScreen().bounds)",756],["self.window = UIWindow(frame: UIScreen.mainScreen().bounds)",753],["public override init(frame: CGRect) {",1044]],"useCount":82215},{"word":"from","context":[["//  Choose \"Create NSManagedObject Subclass…\" from the Core Data editor menu",759],["// Delete the row from the data source",1654],["/// :param array The array to source from.",325],["- parameter from: a `From` clause indicating the entity type",313],["// Do any additional setup after loading the view, typically from a nib.",9879],["let ew0 = try T(from: vw0)",684],["//  You can purchase \"iOS 8 Swift Programming Cookbook\" from",504],["let ew1 = try U(from: vw1)",504],["Retrieves the object at `path` from `json` and decodes it according to the return type",326],["- parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",326]],"useCount":52115},{"word":"frontend","context":[["// RUN: %target-swift-frontend %s -emit-ir -g -o - | %FileCheck %s",55],["// RUN: %target-swift-frontend %s -emit-ir -g -o - | FileCheck %s",156],["// RUN: %target-swift-frontend %s -emit-ir",80],["// RUN: %target-swift-frontend -emit-silgen %s | %FileCheck %s",163],["// RUN: not --crash %target-swift-frontend %s -emit-ir",171],["// RUN: not %target-swift-frontend %s -parse",10778],["// RUN: not %target-swift-frontend %s -emit-ir",54],["// RUN: not %target-swift-frontend %s -typecheck",5223],["// RUN: not --crash %target-swift-frontend %s -parse",1830],["// RUN: %target-swift-frontend -emit-silgen %s | FileCheck %s",274]],"useCount":20355},{"word":"fulfill","context":[["exp.fulfill()",778],["ex.fulfill()",543],["readyExpectation.fulfill()",502],["expect.fulfill()",492],["expectation.fulfill()",10966],["e.fulfill()",826],["expectation?.fulfill()",364],["return Promise { fulfill, reject in",335],["expectation1.fulfill()",322],["expectation2.fulfill()",319]],"useCount":20746},{"word":"func","context":[["override func viewDidLoad() {",52244],["override func didReceiveMemoryWarning() {",27430],["override func setUp() {",27985],["func testExample() {",18001],["func applicationWillTerminate(application: UIApplication) {",15506],["func applicationWillResignActive(application: UIApplication) {",15474],["func applicationDidBecomeActive(application: UIApplication) {",15532],["func applicationWillEnterForeground(application: UIApplication) {",15453],["func applicationDidEnterBackground(application: UIApplication) {",15509],["override func tearDown() {",25219]],"useCount":814910},{"word":"function","context":[["expect(function() {",161],["print(#function)",215],["TestFormat.printSubTestEnd(#function)",198],["/// - parameter easingOption: the easing function for the animation",132],["- parameter failure: A function executed if an error occurs.",169],["TestFormat.printSubTestBegin(#function)",186],["fatalError(\"unavailable function can't be called\")",1217],["/// - parameter easing: an easing function for the animation",132],["Possible errors returned by this function are:",256],["// expected-note@-1 {{add @available attribute to enclosing global function}}",764]],"useCount":20234},{"word":"function_ref","context":[["// CHECK-NEXT:   // function_ref",210],["// CHECK:   function_ref @_TF6switch1cFT_T_",195],["// CHECK:   function_ref @_TF6switch1aFT_T_",213],["// CHECK:   function_ref @_TF6switch1bFT_T_",195],["// CHECK: function_ref @_TZFE19protocol_extensionsPS_2P1g16staticReadWrite2VS_3Box",216],["// CHECK: function_ref @_TZFE19protocol_extensionsPS_2P1s16staticReadWrite1Si",216],["// CHECK-NEXT: function_ref",220],["// CHECK:         [[UNWRAP_FN:%.*]] = function_ref @_TF35definite_init_failable_initializers6unwrapFzSiSi",253],["// CHECK: function_ref @_TZFE19protocol_extensionsPS_2P1s16staticReadWrite2VS_3Box",324],["// CHECK: function_ref @{{.*}}_bridgeToObjectiveC",192]],"useCount":10698},{"word":"functional","context":[["//  $ - A functional tool-belt for Swift Language",18],["// This is an example of a functional test case.",14616],["//        // This is an example of a functional test case.",75],["This makes it very suitable as a building block for more functional methods.",27],["/// This method exists to help with functional-style chaining, e.g.:",16],["functional tests.",15]],"useCount":14767},{"word":"functions","context":[["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// MARK: - Class functions -",80],["// MARK: - Instance functions -",89],["// MARK: - Private functions",101],["// MARK: Private functions",103],["@param delegate The delegate implementing platform specific functions.",146],["// MARK: - Styling functions and accessors",301],["try s.call(noraise) // expected-warning {{no calls to throwing functions occur within 'try'}}",78],["// MARK: - Data functions and accessors",324],["try s.callAC(noraise()) // expected-warning {{no calls to throwing functions occur within 'try'}}",78]],"useCount":12739},{"word":"furnished","context":[["// furnished to do so, subject to the following conditions:",8143],["//    furnished to do so, subject to the following conditions:",253],["//\tfurnished to do so, subject to the following conditions:",174],["//furnished to do so, subject to the following conditions:",151],["*  furnished to do so, subject to the following conditions:",67],["is furnished to do so, subject to the following conditions:",36],["*   furnished to do so, subject to the following conditions:",29],["* furnished to do so, subject to the following conditions:",1134],["//  furnished to do so, subject to the following conditions:",7834],["furnished to do so, subject to the following conditions:",1597]],"useCount":19452},{"word":"fuzzing","context":[["// Test case found by fuzzing",36402]],"useCount":36402},{"word":"g","context":[["protocol g {",225],["func g",345],["func g {",805],["extension g {",211],["struct g {",191],["g) {",164],["func g{",141],["struct d<f : e, g: e where g.h == f.h> {",161],["struct d<f : e, g: e where g.h == f.h> {",161],["// RUN: %target-swift-frontend %s -emit-ir -g -o - | FileCheck %s",156]],"useCount":17027},{"word":"get","context":[["get {",66368],["var name: String { get }",253],["@objc get {}",1293],["get { return 0 }",795],["get {}",814],["var count: Int { get }",249],["get{",3456],["//\t\tget {",225],["// Use recording to get started writing UI tests.",3490],["get",3012]],"useCount":106379},{"word":"github","context":[["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["//  https://github.com/danielgindi/ios-charts",1360],["//  https://github.com/danielgindi/Charts",908],["//  Asset Flow, https://github.com/Camvergence/AssetFlow",480],["// https://github.com/hackiftekhar/IQKeyboardManager",179],["// https://github.com/swagger-api/swagger-codegen",192],["//  Eureka ( https://github.com/xmartlabs/Eureka )",213],["// https://github.com/Quick/Quick",366],["<http://github.com/carloslozano>",370],["<http://github.com/fnva>",370]],"useCount":44951},{"word":"given","context":[["// given",1953],["Returns `Results` with elements sorted by the given sort descriptors.",97],["/// values), according to the semantics of the given strategy.",179],["//given",193],["Returns the index of the first object matching the given predicate,",198],["/// semantics of the given strategy.",222],["/// Combines the values of all the given signals, in the manner described by",337],["/// Zips the values of all the given signals, in the manner described by",338],["/// Zips the values of all the given producers, in the manner described by",348],["/// Combines the values of all the given producers, in the manner described by",359]],"useCount":21180},{"word":"green","context":[["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["green = CGFloat((hexValue & 0x0F0) >> 4)       / 15.0",127],["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["var green: CGFloat = 0",125],["var green: CGFloat = 0.0",206],["green: CGFloat((rgbValue & 0x00FF00) >> 8) / 255.0,",199],["self.init(red:red, green:green, blue:blue, alpha:alpha)",179],["self.init(red:red, green:green, blue:blue, alpha:alpha)",179],["green = CGFloat((hexValue & 0x00FF0000) >> 16) / 255.0",161],["green = CGFloat((hexValue & 0x00FF00) >> 8)    / 255.0",127]],"useCount":11741},{"word":"group","context":[["let group = dispatch_group_create()",337],["return group",232],["let group = DispatchGroup()",164],["group.leave()",161],["group.enter()",158],["dispatch_group_wait(group, DISPATCH_TIME_FOREVER)",146],["self.group = group",97],["self.group = group",97],["dispatch_group_enter(group)",320],["dispatch_group_leave(group)",344]],"useCount":6492},{"word":"guard","context":[["guard error == nil else {",670],["guard",1742],["guard let",1370],["guard let vw1 = request.parameters[\"w1\"] else {",539],["guard let strongSelf = self else { return }",506],["guard let cw0 = ew0 else {",761],["guard let vw0 = request.parameters[\"w0\"] else {",761],["guard isInitialized() else {",755],["guard let jsDataCast = jsonData as? Dictionary<String,Any> else {",553],["guard let cw1 = ew1 else {",539]],"useCount":32790},{"word":"guid","context":[["\"id\": guid,",59],["self.guid = guid",91],["\"guid TEXT NOT NULL UNIQUE, \" +",67],["self.guid = guid",91],["super.init(guid: guid, title: title)",49],["super.init(guid: guid, title: title)",49],["\" WHERE guid = ?\"",50],["let guid = row[\"guid\"] as! String",107],["let guid = row[\"guid\"] as! String",107],["let args: Args = [guid]",192]],"useCount":4616},{"word":"h","context":[["return h",193],["typealias h",125],["struct d<f : e, g: e where g.h == f.h> {",161],["struct d<f : e, g: e where g.h == f.h> {",161],["h  }",170],["if (h !== nil)",120],["class b<h : c, i : c where h.g == i> : a {",95],["class b<h : c, i : c where h.g == i> : a {",95],["self.lastHighlighted = h",107],["self.highlightValue(highlight: h, callDelegate: true)",125]],"useCount":11365},{"word":"handle","context":[["Replace this implementation with code to handle the error appropriately.",38],["// Replace this implementation with code to handle the error appropriately.",1739],["// Replace this with code to handle the error appropriately.",1404],["// handle error",80],["self.handle = handle",70],["self.handle = handle",70],["handle.remove()",66],["return handle",45],["self.authorize_url_handler.handle(queryURL)",37],["- parameter dataSource:     The data source that handle the event.",38]],"useCount":6090},{"word":"handler","context":[["waitForExpectations(timeout: 5, handler: nil)",565],["Adds a handler to be called once the request has finished.",657],["waitForExpectationsWithTimeout(1, handler: nil)",1044],["waitForExpectationsWithTimeout(timeout, handler: nil)",843],["self.waitForExpectationsWithTimeout(2, handler: nil)",528],["waitForExpectationsWithTimeout(2, handler: nil)",429],["waitForExpectationsWithTimeout(10, handler: nil)",462],["waitForExpectationsWithTimeout(5, handler: nil)",469],["handler(nil)",490],["waitForExpectations(timeout: timeout, handler: nil)",513]],"useCount":27546},{"word":"has","context":[["fatalError(\"init(coder:) has not been implemented\")",11614],["//        fatalError(\"init(coder:) has not been implemented\")",93],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90],["Adds a handler to be called once the request has finished.",657],["/// - parameter completionHandler: A closure to be executed once the request has finished.",89],[":param: completionHandler The code to be executed once the request has finished.",88],["default: throw ProtocolBuffersError.invalidProtocolBuffer(\"Conversion String to Enum has failed.\")",118],["func foo(element: T) {} // expected-error {{'T' has been renamed to 'Element'}} {{21-22=Element}}",112],["/// Adds a handler to be called once the request has finished.",98],["/// Use this method to tell the data set that the underlying data has changed",82]],"useCount":24477},{"word":"hashCode","context":[["var hashCode:Int = 7",1447],["return hashCode",1470],["hashCode = (hashCode &* 31) &+  unknownFields.hashValue",1447],["hashCode = (hashCode &* 31) &+  unknownFields.hashValue",1447],["hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))",68],["hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))",68],["hashCode = (hashCode &* 31) &+ value.hashValue",77],["hashCode = (hashCode &* 31) &+ value.hashValue",77],["hashCode = (hashCode &* 31) &+ name.hashValue",102],["hashCode = (hashCode &* 31) &+ name.hashValue",102]],"useCount":10193},{"word":"hashValue","context":[["var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)",1443],["public var hashValue: Int {",1327],["var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)",1443],["override public var hashValue:Int {",918],["var hashValue: Int {",763],["override internal var hashValue:Int {",529],["var hashValue: Int { return rawValue }",284],["return lhs.hashValue == rhs.hashValue",245],["return lhs.hashValue == rhs.hashValue",245],["hashCode = (hashCode &* 31) &+  unknownFields.hashValue",1447]],"useCount":13504},{"word":"have","context":[["it(\"should complete when both inputs have completed\") {",116],["// doesn't have a title of \"Best Language\" exactly.",95],["When 'update' is 'true', the object must have a primary key. If no objects exist in",97],["/// All views passed to this function will have",102],["// You should have received a copy of the CC0 Public Domain Dedication along with",119],["/// If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",196],["If validation fails, subsequent calls to response handlers will have an associated error.",245],["//  If you have any questions, you can contact me directly",504],["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["it(\"should have the correct raw value\") {",870]],"useCount":12995},{"word":"header","context":[["//verify header",114],["make.top.equalTo(self.header.snp_bottom)",59],["/** Common part for hash calculation. Prepare header data. */",60],["- parameter header: A dictionary containing all the addional headers",73],["let header: UITableViewHeaderFooterView = view as! UITableViewHeaderFooterView",76],["XCTAssertEqual(authorizationHeader, \"123456\", \"Authorization header is incorrect\")",76],["make.edges.equalTo(self.header)",78],["return header",278],["self.header = header",122],["self.header = header",122]],"useCount":4553},{"word":"headers","context":[["self.headers = headers",202],["self.headers = headers",202],["headers: [String: String]? = nil,",225],["headers: headers,",272],["headers: headers,",272],["let headers = [",177],["headers: [String: String]? = nil)",138],["for (key, value) in headers {",134],["let mutableURLRequest = URLRequest(method, URLString, headers: headers)",131],["let mutableURLRequest = URLRequest(method, URLString, headers: headers)",131]],"useCount":9063},{"word":"height","context":[["// multiply the height of the rect with the phase",243],["make.height.equalTo(20)",225],["make.height.equalTo(UIConstants.ToolbarHeight)",259],["self.height = height",396],["self.height = height",396],["return height",523],["self.preferredContentSize = CGSize(width: 320.0, height: 600.0)",173],["return CGSize(width: width, height: height)",190],["make.height.equalTo(40)",185],["return CGSize(width: width, height: height)",190]],"useCount":33612},{"word":"here","context":[["// Put the code you want to measure the time of here.",14709],["// Initialize variables here.",203],["//  // Your code here",236],["// Do view setup here.",278],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Insert code here to add functionality to your managed object subclass",538],["// Insert code here to tear down your application",1167],["// Insert code here to initialize your application",895],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Configure interface objects here.",672]],"useCount":68291},{"word":"hidden","context":[["view.hidden = false",101],["hidden = false",168],["if hidden {",101],["override var hidden: Bool {",130],["view.hidden = true",166],["self.hidden = false",185],["hidden = true",219],["self.hidden = true",256],["//#-end-hidden-code",279],["//#-hidden-code",279]],"useCount":20490},{"word":"history","context":[["* Favicons, history, and bookmarks are all stored in one intermeshed",59],["let expectation = self.expectationWithDescription(\"Wait for history\")",75],["//  Created by Jeff Cooper, revision history on Github.",87],["\"SELECT history.url AS url, icons.iconID AS iconID FROM \" +",48],["// Tracking navigation items to record history types.",52],["history.setTopSitesNeedsInvalidation()",51],["//  Created by Aurelius Prochazka, revision history on Github.",875],["let history = SQLiteHistory(db: db, prefs: prefs)!",91],["\"\\(ViewWidestFaviconsForSites) ON history.id = \\(ViewWidestFaviconsForSites).siteID \"",48],["history.clearHistory().value",47]],"useCount":4257},{"word":"host","context":[["let title = frame.request.URL!.host",120],["return host",79],["let host = challenge.protectionSpace.host",80],["let host = \"test.alamofire.org\"",810],["let serverTrustIsValid = serverTrustPolicy.evaluateServerTrust(serverTrust, isValidForHost: host)",594],["attrs: [\"host\": \"api\",",482],["let host = challenge.protectionSpace.host",80],["self.host = host",175],["self.host = host",175],["let serverTrustIsValid = serverTrustPolicy.evaluate(serverTrust, forHost: host)",216]],"useCount":6600},{"word":"http","context":[["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["//  at http://vandadnp.wordpress.com for daily tips and tricks in Swift",504],["// @warn_unused_result(message:\"http://git.io/rxs.uo\")",469],["<http://github.com/fnva>",370],["<http://twitter.com/ferran_vila>",370],["//  http://www.oreilly.com/catalog/errata.csp?isbn=0636920034254",504],["//  http://shop.oreilly.com/product/0636920034254.do",504],["@warn_unused_result(message=\"http://git.io/rxs.uo\")",963],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["<http://github.com/carloslozano>",370]],"useCount":22069},{"word":"https","context":[["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// https://github.com/hackiftekhar/IQKeyboardManager",179],["// https://github.com/swagger-api/swagger-codegen",192],["https://coteditor.com",210],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["//  Eureka ( https://github.com/xmartlabs/Eureka )",213],["// https://github.com/Quick/Quick",366],["//  Asset Flow, https://github.com/Camvergence/AssetFlow",480],["//  https://github.com/danielgindi/Charts",908],["//  https://github.com/danielgindi/ios-charts",1360]],"useCount":54198},{"word":"i","context":[["for i in 0..<count {",636],["i++",592],["if i == 0 {",354],["for i in 0..<3 {",343],["for i in [1010, 2020, 3030] {",255],["case .UNRECOGNIZED(let i): return String(i)",246],["case .UNRECOGNIZED(let i): return String(i)",246],["return i",1204],["i += 1",1508],["var i = 0",1571]],"useCount":69805},{"word":"i8","context":[["// CHECK-32:   }, { i8*, i8*, i8* } {",60],["// CHECK-NEXT: [[WITNESS_FN:%.*]] = bitcast i8* [[WITNESS]]",74],["// CHECK-NEXT: [[T1:%.*]] = load i8*, i8** [[T0]]",51],["// CHECK:   i8* null,",93],["// CHECK:     { i8*, i8*, i8* } {",96],["// CHECK:     { i8*, i8*, i8* } {",96],["// CHECK:     { i8*, i8*, i8* } {",96],["// CHECK-NEXT: [[T1:%.*]] = load i8*, i8** [[T0]]",51],["// CHECK-32:   }, { i8*, i8*, i8* } {",60],["// CHECK-32:   }, { i8*, i8*, i8* } {",60]],"useCount":6657},{"word":"iOS","context":[["if #available(iOS 9.0, *) {",996],["if #available(iOS 8.0, *) {",548],["#if os(OSX) || os(iOS)",506],["//  You can purchase \"iOS 8 Swift Programming Cookbook\" from",504],["@available(iOS 8.0, *)",1580],["//  A port of MPAndroidChart for iOS",2193],["#if os(iOS)",4573],["@available(iOS 9.0, *)",779],["if #available(iOS 9, *) {",553],["#if os(iOS) || os(tvOS)",1106]],"useCount":24825},{"word":"id","context":[["public let id: String",221],["var id: String?",251],["self.id = id",1686],["self.id = id",1686],["let id: Int",421],["let id: String",326],["return lhs.id == rhs.id",252],["\"id INTEGER PRIMARY KEY AUTOINCREMENT, \" +",268],["return lhs.id == rhs.id",252],["return id",301]],"useCount":26237},{"word":"identifier","context":[["switch identifier {",408],["let identifier: String",168],["public let identifier: String",170],["if let identifier = segue.identifier {",266],["if let identifier = segue.identifier {",266],["return lhs.identifier == rhs.identifier",157],["if segue.identifier == \"showDetail\" {",478],["self.identifier = identifier",599],["self.identifier = identifier",599],["return lhs.identifier == rhs.identifier",157]],"useCount":13178},{"word":"identity1","context":[["assert(identity1 == unsafeBitCast(d1, to: Int.self))",336],["expectEqual(identity1, s1._rawIdentifier())",383],["expectEqual(identity1, unsafeBitCast(s1, Int.self))",385],["assert(identity1 == d._rawIdentifier())",396],["expectEqual(identity1, unsafeBitCast(s, to: Int.self))",427],["assert(identity1 == unsafeBitCast(d, Int.self))",330],["var identity1 = unsafeBitCast(s, to: Int.self)",329],["assert(identity1 == unsafeBitCast(d, to: Int.self))",462],["expectEqual(identity1, unsafeBitCast(s1, to: Int.self))",539],["var identity1 = unsafeBitCast(d, to: Int.self)",364]],"useCount":8971},{"word":"idx","context":[["idx += 1",193],["idx++",73],["for idx in 0..<cnt {",52],["for idx in 0..<count {",85],["return idx",103],["index = idx",99],["if (idx == 0) {",69],["for idx in 0..<range.length {",54],["removeObjectAtIndex(idx)",54],["var idx = 0",229]],"useCount":5116},{"word":"if","context":[["#if os(OSX)",2325],["if let error = error {",4176],["#if os(Linux)",2285],["if editingStyle == .Delete {",2208],["if error == nil {",2129],["#if DEBUG",2052],["#if _runtime(_ObjC)",1870],["if error != nil {",4494],["#if os(iOS)",4573],["if true {",5627]],"useCount":444377},{"word":"image","context":[["self.image = image",1027],["return image",1957],["self.image = image",1027],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["let image = UIGraphicsGetImageFromCurrentImageContext()",925],["if let image = image {",447],["if let image = image {",447],["imageView.image = image",661],["imageView.image = image",661]],"useCount":47412},{"word":"imageView","context":[["imageView.contentMode = .ScaleAspectFit",249],["imageView.image = image",661],["imageView.clipsToBounds = true",447],["addSubview(imageView)",298],["imageView.contentMode = .ScaleAspectFill",268],["contentView.addSubview(imageView)",253],["imageView.translatesAutoresizingMaskIntoConstraints = false",238],["return imageView",1149],["@IBOutlet weak var imageView: UIImageView!",1102],["let imageView = UIImageView()",760]],"useCount":16650},{"word":"immediately","context":[["/// producer will forward that error immediately.",69],["/// - Returns: The index value immediately after `i`.",55],["If the image is cached locally, the image is set immediately. Otherwise the specified placehoder image will be",77],["set immediately, and then the remote image will be set once the image request is finished.",77],["/// Whether to start requests immediately after being constructed. `true` by default.",90],["/// Creates a producer for a Signal that will immediately send one value",63],["//\tand the Perfect Additional Terms that immediately follow the terms and",104],["The super.prepareView method should always be called immediately",114],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["/// Returns the position immediately after the given index.",66]],"useCount":6626},{"word":"implementation","context":[["Get the delegate implementation.",73],["// #warning Incomplete implementation, return the number of items",93],["// #warning Potentially incomplete method implementation.",553],["// #warning Incomplete method implementation.",558],["* <p>The default implementation does nothing.</p>",562],["//  to delete and recreate this implementation file for your updated model.",759],["// An empty implementation adversely affects performance during animation.",884],["// #warning Incomplete implementation, return the number of rows",1124],["// #warning Incomplete implementation, return the number of sections",1130],["// Replace this implementation with code to handle the error appropriately.",1739]],"useCount":10128},{"word":"implemented","context":[["fatalError(\"not implemented\")",611],["/// *optional feature, can return `false` ifnot implemented*",35],["//TODO: not implemented yet.",36],["/// implemented lazily.",42],["/// *optional feature, can return false if not implemented*",54],["// TODO: should be implemented",60],["fatalError(\"Not implemented\");",61],["//        fatalError(\"init(coder:) has not been implemented\")",93],["fatalError(\"Not implemented\")",130],["fatalError(\"init(coder:) has not been implemented\")",11614]],"useCount":14265},{"word":"import","context":[["import XCTest",42429],["import Cocoa",10766],["import Alamofire",4954],["import Foundation",119213],["import CoreData",10127],["import AVFoundation",3785],["import RxSwift",4200],["import Quick",4593],["import Nimble",5306],["import UIKit",164732]],"useCount":509790},{"word":"in","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["dispatch_async(dispatch_get_main_queue(), { () -> Void in",2723],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["return Signal { observer in",953],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["waitUntil { done in",1014],["try dbQueue.inDatabase { db in",1145],["}, completion: { finished in",1196],["json, response in",1297],["// Saves changes in the application's managed object context before the application terminates.",1424]],"useCount":313930},{"word":"indent","context":[["override public func getDescription(indent:String) throws -> String {",776],["output += \"\\(indent) }\\n\"",590],["unknownFields.writeDescriptionTo(&output, indent:indent)",662],["unknownFields.writeDescriptionTo(&output, indent:indent)",662],["override public func writeDescriptionTo(inout output:String, indent:String) {",114],["output += unknownFields.getDescription(indent)",232],["override internal func writeDescriptionTo(inout output:String, indent:String) {",433],["output += \"\\(indent)}\\n\"",496],["output += unknownFields.getDescription(indent: indent)",553],["output += unknownFields.getDescription(indent: indent)",553]],"useCount":8503},{"word":"index","context":[["var index = 0",1398],["index += 1",1035],["return index",856],["index++",737],["if index == 0 {",473],["switch index {",406],["self.index = index",318],["let startIndex = base.index(",288],["index = 0",303],["self.index = index",318]],"useCount":51578},{"word":"indexPath","context":[["func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {",1553],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2927],["override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {",2792],["override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {",2166],["tableView.deselectRowAtIndexPath(indexPath, animated: true)",2103],["tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Fade)",1967],["override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {",1578],["override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {",1197]],"useCount":67738},{"word":"info","context":[["func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {",370],["self.info = info",93],["if let info = NSBundle.mainBundle().infoDictionary {",93],["self.info = info",93],["var info = [NSObject: AnyObject]()",98],["case .info:",111],["let render = { (info: RenderingInfo) -> Rendering in",127],["return info",153],["// CHECK-64: Type info:",168],["// CHECK-32: Type info:",168]],"useCount":7686},{"word":"information","context":[["- parameter resource:         Resource object contains information such as `cacheKey` and `downloadURL`.",68],["For more information take a look at `DelegateProxyType` protocol documentation.",112],["- parameter resource:          Resource object contains information such as `cacheKey` and `downloadURL`.",125],["For more information take a look at `DelegateProxyType`.",164],["//Meta information declaration start",1447],["/// For more information take a look at `DelegateProxyType`.",57],["information.",52],["/// values are substituted according to given locale information.",48],["*  distributed with this work for additional information",48],["//Meta information declaration end",1447]],"useCount":5159},{"word":"init","context":[["fatalError(\"init(coder:) has not been implemented\")",11614],["required init?(coder aDecoder: NSCoder) {",11632],["super.init()",23518],["self.init()",4895],["required init(coder aDecoder: NSCoder) {",5213],["override init() {",5692],["init() {",7326],["super.init(frame: frame)",10316],["super.init(coder: aDecoder)",11022],["override init(frame: CGRect) {",6875]],"useCount":253179},{"word":"initialClock","context":[["let scheduler = TestScheduler(initialClock: 0)",4898],["let scheduler = TestScheduler(initialClock: 0);",12],["_ = TestScheduler(initialClock: 0)",11]],"useCount":4921},{"word":"initialize","context":[["// Insert code here to initialize your application",895],["to initialize property values and other setup operations.",155],["dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\"",1439],["initialize()",850],["super.initialize()",318],["self.initialize()",262],["internal override func initialize()",259],["func initialize() {",212],["override class func initialize() {",204],["private func initialize() {",178]],"useCount":6453},{"word":"initialized","context":[["/// Create an instance initialized with `elements`.",57],["XCTFail(\"Kuzzle not initialized\")",391],["/// Create an instance initialized with `nil`.",104],["/// Returns a `String` object initialized by using a given",96],["/// just-initialized memory.",60],["/// Create an instance initialized to `value`.",554],["- returns: The initialized Ji document object or nil if the object could not be initialized.",56],["- returns: The initialized Ji document object or nil if the object could not be initialized.",56],["/// Returns the fully-initialized buffer. `self` is reset to contain an",42],["initialized = true",43]],"useCount":4132},{"word":"inline","context":[["@inline(never)",3846],["@inline(__always)",1200],["showHomePanelController(inline: false)",58],["@inline(__always) get {",68],["@inline(never) @_semantics(\"stdlib_binary_only\") // Hide the CF dependency",91],["homePanelIsInline = inline",55],["@inline(__always) get { return 0 }",110],["@inline(__always) // For performance reasons.",105],["@inline(__always) get { return 0x4000_0000_0000_0000 }",40],["@inline(never) mutating",55]],"useCount":6219},{"word":"inout","context":[["override internal func writeDescriptionTo(inout output:String, indent:String) {",433],["public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {",626],["required init(inout bytes: [UInt8]) {",69],["result: inout Dictionary?",74],["result: inout Array?",74],["override internal func writeDescriptionTo(inout output:String, indent:String) throws {",87],["override public func writeDescriptionTo(inout output:String, indent:String) {",114],["func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {",112],["string.add(\"potato\") { (inout a: Attributes) in",106],["func traverse(visitor: inout SwiftProtobuf.Visitor) throws {",112]],"useCount":7429},{"word":"input","context":[["input.addConnectionPoint(self)",303],["asyncHelper(input: input, expected: expected)",910],["asyncHelper(input: input, expected: expected)",910],["return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())",551],["if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {",547],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["var tag = input.readTag()",521],["///   - input: Input node to process",362],["while let value = try parseFromDelimitedFromInputStream(input) {",347],["return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())",350]],"useCount":17815},{"word":"insert","context":[["s.insert(TestObjCKeyTy(i))",187],["try person.insert(db)",62],["self.parent.childs.insert(self)",179],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["case .insert:",120],["try record.insert(db)",249],["objects.insert(NSDate(), atIndex: 0)",87],["} else if editingStyle == .insert {",87],["_keys.insert(key)",63]],"useCount":7082},{"word":"instance","context":[["return NopDisposable.instance",823],["return Static.instance!",875],["let settings = Settings.instance",215],["return Static.instance",783],["return instance",783],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["/// Create an instance initialized to `value`.",554],["static var instance : UIColor? = nil",453],["return Singleton.instance",429],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215]],"useCount":18835},{"word":"int","context":[["int a;",50],["if let version = json[\"version\"].int {",50],["var int = UInt32()",53],["XCTAssertNil(int)",53],["return int",64],["public var int: Int? {",200],["self.object = NSNumber(int: newValue)",132],["self.object = NSNumber(int: newValue!)",94],["@availability(*, unavailable, renamed=\"int\")",92],["let int: Int",75]],"useCount":4627},{"word":"interface","context":[["// Populate your dynamic notification interface as quickly as possible.",322],["// After populating your dynamic notification interface call the completion block.",362],["self.interface = interface",40],["// Implement it if you use a dynamic notification interface.",362],["// Configure interface objects here.",672],["/// See https://github.com/groue/GRDB.swift/#the-query-interface",81],["/// A type that provides the sequence's iteration interface and",40],["// Update the user interface for the detail item.",368],["/// MARK: Public interface",38],["self.interface = interface",40]],"useCount":4190},{"word":"internal","context":[["override internal func className() -> String {",529],["required override internal init () {",529],["override internal func classMetaType() -> GeneratedMessage.Type {",520],["override internal func serializedSize() -> Int32 {",529],["override internal class func className() -> String {",529],["internal override class func classBuilder() -> MessageBuilder {",520],["override internal func isInitialized() -> Bool {",529],["override internal var hashValue:Int {",529],["required internal init() {",529],["internal override func classBuilder() -> MessageBuilder {",520]],"useCount":27137},{"word":"internalAU","context":[["return internalAU!.isPlaying()",349],["guard let tree = internalAU?.parameterTree else { return }",337],["self.internalAU!.start()",351],["if internalAU!.isSetUp() {",755],["internalAU!,",99],["internalAU?.amplitude = Float(amplitude)",102],["internalAU,",189],["internalAU?.rampTime = newValue",289],["internalAU?.setUpParameterRamp()",290],["self.internalAU!.stop()",325]],"useCount":4877},{"word":"interval","context":[["// at least 10% of the timer interval.",56],["/// Throttle values sent by the receiver, so that at least `interval`",60],["self.interval = interval",61],["self.interval = interval",61],["precondition(interval >= 0)",165],["/// Schedules a recurring action at the given interval, beginning at the",63],["let date = scheduler.currentDate.dateByAddingTimeInterval(interval)",65],["manager.deviceMotionUpdateInterval = interval",66],["let interval = self.timeIntervalSinceDate(date)",84],["let interval = date.timeIntervalSinceDate(self)",87]],"useCount":4172},{"word":"into","context":[["// Here we're just printing out the preset so it can be copy and pasted into code",65],["// FIXME: Should go into the standard library.",67],["/// resulting signals (into a signal of values), according to the",69],["/// This is how much (in pixels) into the dash pattern are we starting from.",70],["// take the current angle of the chart into consideration",64],["/// - Experiment: This is a draft API currently under consideration for official import into Foundation",75],["/// format string as a template into which the remaining argument",96],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["/// Transform `self` into a series of machine words that can be",338],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619]],"useCount":9447},{"word":"invalidate","context":[["/// If `animate(...)` is called, no further calling of `invalidate()` is necessary to refresh the chart.",484],["/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.",244],["self.timer?.invalidate()",225],["_viewPortHandler.refresh(newMatrix: matrix, chart: self, invalidate: false)",124],["_viewPortHandler.refresh(newMatrix: matrix, chart: self, invalidate: true)",112],["self.timer.invalidate()",110],["pingTimer?.invalidate()",109],["timer?.invalidate()",601],["timer.invalidate()",882],["public func invalidate() {",108]],"useCount":4787},{"word":"invocation","context":[["/// for each invocation of start().",28],["/// requests, where each invocation of start() will create a new underlying",28],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["/// Returns a Disposable which can be used to stop the invocation of the",89],["//        // Put teardown code here. This method is called after the invocation of each test method in the class.",45],["//        // Put setup code here. This method is called before the invocation of each test method in the class.",42],["/// each invocation of start().",41],["///            invocation of the callback. Disposing of the Disposable will",31],["// Test the cost of polymorphic method invocation",30]],"useCount":42507},{"word":"is","context":[["// This method is called when watch view controller is about to be visible to user",793],["// This method is called when watch view controller is no longer visible",832],["// This method is called when watch view controller is no longer visible",832],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// This is an example of a functional test case.",14616],["// This source file is part of the Swift.org open source project",14622],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["// This is an example of a performance test case.",14731],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783]],"useCount":195849},{"word":"isEmpty","context":[["if isEmpty {",115],["func isEmpty() -> Bool {",129],["var isEmpty: Bool { get }",130],["if name.isEmpty {",142],["if text.isEmpty {",159],["var isEmpty: Bool {",205],["where parser.isEmpty",435],["public var isEmpty: Bool {",601],["if !title.isEmpty {",104],["if !text.isEmpty {",107]],"useCount":11762},{"word":"it","context":[["Retrieves the object at `path` from `json` and decodes it according to the return type",326],["// Implement it if you use a dynamic notification interface.",362],["it(\"can do maths\") {",414],["// it is a nice QoI.",246],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["it(\"will eventually fail\") {",202],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["it(\"can read\") {",434],["it(\"should have the correct raw value\") {",870],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633]],"useCount":47278},{"word":"item","context":[["for item in self {",340],["return item",746],["// Return NO if you do not want the specified item to be editable.",528],["// Return NO if you do not want the item to be re-orderable.",525],["items.append(item)",461],["// Update the user interface for the detail item.",368],["for item in items {",763],["// Return false if you do not want the specified item to be editable.",1475],["switch item {",203],["// Return false if you do not want the item to be re-orderable.",1078]],"useCount":24890},{"word":"items","context":[["for item in items {",763],["return self.items.count",176],["toolbar.items = items",187],["toolbar.items = items",187],["let items: Observable<[Int]> = Observable.just([1, 2, 3])",199],["self.items = items",350],["self.items = items",350],["return items",366],["items.append(item)",461],["return items.count",507]],"useCount":15181},{"word":"its","context":[["*\t*\tNeither the name of Material nor the names of its",261],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["//Causes the view (or one of its embedded text fields) to resign the first responder status.",71],["// Do any additional setup after loading the view from its nib.",89],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90],["/// encapsulates its iteration state.",97],["*\t*\tNeither the name of CosmicMind nor the names of its",164],["*\t*\tNeither the name of MaterialKit nor the names of its",69],["Convert current enum to its string representation value.",66],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181]],"useCount":7170},{"word":"j","context":[["for (var j = 0; j < entries.count; j++)",129],["switch j {",157],["j += 1",229],["for (var j = 0; j < entries.count; j++)",129],["for (var j = 0; j < entries.count; j++)",129],["CGContextSetFillColorWithColor(context, dataSet.colorAt(j).CGColor)",141],["class j {",126],["var j = 0",156],["swap(&self[i], &self[j])",115],["j++",107]],"useCount":14580},{"word":"json","context":[["switch json {",2641],["- parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",326],["request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",322],["success?(user: json.object)",417],["public init(json: JSON) throws {",432],["return json",541],["public required init(json:NSDictionary?) {",604],["if json==nil { return }",604],["json, response in",1297],["Retrieves the object at `path` from `json` and decodes it according to the return type",326]],"useCount":40065},{"word":"k","context":[["protocol k {",250],["for (k, v) in right {",108],["self.k++",175],["return k",148],["enum k {",351],["if(self.k == 4){",87],["self.k = 1",87],["class k {",99],["var k = 0",106],["k  }",108]],"useCount":9855},{"word":"key","context":[["let key = \"key\"",320],["for (key, value) in self {",377],["let key = \"key\"",320],["- parameter path: A null-separated key-path string. Can be generated with `\"keyA\" => \"keyB\"`",326],["self.key = key",776],["self.key = key",776],["VOHelper.setJSONValue(ret, value:self.jclsName, key:\"jclsName\")",604],["switch key {",476],["return key",425],["let key = self.name",415]],"useCount":56174},{"word":"keyPath","context":[["let anim = CABasicAnimation(keyPath: \"transform.rotation\")",84],["let animation = CABasicAnimation(keyPath: \"opacity\")",61],["let opacityAnimation = CAKeyframeAnimation(keyPath: \"opacity\")",63],["let scaleAnimation = CABasicAnimation(keyPath: \"transform.scale\")",63],["switch keyPath {",83],["let scaleAnimation = CAKeyframeAnimation(keyPath: \"transform.scale\")",109],["super.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)",112],["self.keyPath = keyPath",142],["self.keyPath = keyPath",142],["super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)",302]],"useCount":5226},{"word":"keys","context":[["/// - throws: `DecodingError.typeMismatch, `.other(error, metadata)` or possible `.missingKeyError` on required keys",69],["for key in keys {",305],["return keys",127],["return NSMutableDictionary(objects: values, forKeys: keys)",72],["keys.append(key)",98],["/// Return all the exposed instance variables keys. (Exposed == public and modifiable).",68],["for k in keys {",61],["let keys = Array(d.keys.map { TestObjCKeyTy($0) })",54],["super.init(objects: objects, forKeys: keys, count: count)",54],["for key in sorted(Array(parameters.keys), <) {",54]],"useCount":5439},{"word":"l","context":[["XCTAssertEqual(l.subscriptions, [",197],["return l",226],["let l = scheduler.createHotObservable([",244],["attributes: [NSFontAttributeName: l.valueFont, NSForegroundColorAttributeName: l.valueTextColor])",254],["attributes: [NSFontAttributeName: l.valueFont, NSForegroundColorAttributeName: l.valueTextColor])",254],["let l = 1",278],["let l = 2",283],["return l < r",330],["case let (l?, r?):",635],["return l > r",201]],"useCount":12110},{"word":"label","context":[["label.textAlignment = NSTextAlignment.Center",454],["label.translatesAutoresizingMaskIntoConstraints = false",451],["label.textColor = UIColor.whiteColor()",429],["text: label,",369],["return label",2245],["@IBOutlet weak var label: UILabel!",458],["label.sizeToFit()",577],["let label = UILabel()",1828],["label.textAlignment = .Center",741],["label.numberOfLines = 0",711]],"useCount":27771},{"word":"last","context":[["var last = newValue",63],["previousLast[sub:sub] = last",63],["webView.goToBackForwardListItem(backList.last!)",112],["return NSStringFromClass(self).componentsSeparatedByString(\".\").last!",68],["lastByteValue = byteValues.last,",70],["var response = readStack.last",70],["return last",73],["XCTAssertEqual(components.last ?? \"\", \"\\\"\\(URLString)\\\"\", \"URL component should be equal\")",85],["XCTFail(\"last item in bytesValues and progressValues should not be nil\")",82],["lastProgressValue = progressValues.last",79]],"useCount":6883},{"word":"launch","context":[["task.launch()",406],["XCUIApplication().launch()",3657],["// Track an app open here if we launch with a push, unless",53],["// Override point for customization after application launch.",16653],["SalesforceSDKManager.sharedManager().launch()",16],["// In case restore fails, launch at least one tab",20],["process.launch()",36],["app.launch()",163],["self.task.launch()",14],["- parameter viewController:    A view controller from which to launch the OAuth modal dialog",16]],"useCount":21093},{"word":"layer","context":[["layer.masksToBounds = true",377],["self.layer.masksToBounds = true",344],["layer.cornerRadius = cornerRadius",320],["return layer",415],["let layer = CAShapeLayer()",264],["layer.borderWidth = borderWidth",245],["let layer = CALayer()",212],["layer.addSublayer(circle)",178],["layer.borderColor = borderColor.CGColor",153],["return layer.cornerRadius",150]],"useCount":26201},{"word":"layout","context":[["- Parameter child: A child UIView to layout.",111],["layout.scrollDirection = .Horizontal",99],["return layout",140],["layout(view) { view in",152],["layout collectionViewLayout: UICollectionViewLayout,",166],["super.init(collectionViewLayout: layout)",174],["override init(frame: CGRect, collectionViewLayout layout: UICollectionViewLayout) {",98],["layout.minimumInteritemSpacing = 0",207],["layout.minimumLineSpacing = 0",233],["let layout = UICollectionViewFlowLayout()",576]],"useCount":6808},{"word":"layoutIfNeeded","context":[["containerView.layoutIfNeeded()",64],["self.view.layoutIfNeeded()",1871],["self.layoutIfNeeded()",873],["layoutIfNeeded()",598],["view.layoutIfNeeded()",537],["cell.layoutIfNeeded()",211],["window.layoutIfNeeded()",208],["ctrler.view.layoutIfNeeded()",88],["parentView.layoutIfNeeded()",78],["self?.view.layoutIfNeeded()",62]],"useCount":5851},{"word":"layoutSubviews","context":[["override func layoutSubviews() {",3421],["public override func layoutSubviews() {",831],["override public func layoutSubviews() {",580],["layoutSubviews()",274],["open override func layoutSubviews() {",273],["override open func layoutSubviews() {",189],["override func layoutSubviews()",113],["self.layoutSubviews()",98],["super.layoutSubviews();",68],["super.layoutSubviews()",4801]],"useCount":11056},{"word":"lazy","context":[["lazy var applicationDocumentsDirectory: NSURL = {",1395],["lazy var managedObjectModel: NSManagedObjectModel = {",1504],["lazy var managedObjectContext: NSManagedObjectContext = {",846],["lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator = {",828],["lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator? = {",681],["lazy var tableView: UITableView = {",115],["lazy var titleLabel: UILabel = {",109],["lazy var managedObjectContext: NSManagedObjectContext? = {",664],["private lazy var iconView: UIImageView = {",102],["//lazy load for all the properties",100]],"useCount":12237},{"word":"left","context":[["return left",226],["case .left:",282],["return left == right",319],["make.left.right.equalTo(self.view)",345],["associativity left",491],["make.left.right.bottom.equalTo(self.view)",186],["associativity: left",183],["case left",179],["barRect.origin.x = left",153],["barRect.size.width = right - left",152]],"useCount":18330},{"word":"length","context":[["self.length = length",151],["let limit = try codedInputStream.pushLimit(byteLimit: length)",164],["let data = NSData(bytes: bytes, length: bytes.count)",186],["let length = Int(try codedInputStream.readRawVarint32())",193],["var length: Int {",210],["fragBuffer = NSData(bytes: buffer, length: bufferLen)",123],["var length = 0",120],["for i in 0..<length {",137],["public var length: Int {",146],["self.length = length",151]],"useCount":17959},{"word":"let","context":[["let label = UILabel()",1828],["let scheduler = TestScheduler(initialClock: 0)",4898],["let a {",4888],["let xs = scheduler.createHotObservable([",2361],["let dateFormatter = NSDateFormatter()",1905],["if let error = error {",4176],["} catch let error as NSError {",3604],["let name: String",2029],["} catch let error {",2306],["let res = scheduler.start {",2900]],"useCount":766060},{"word":"level","context":[["self.level = level",143],["self.level = level",143],["switch level {",97],["//higher level API we will cut over to at some point",52],["- parameter data:  The NSData used to convert to json.Top level object in data is an NSArray or NSDictionary",90],["level = 1",46],["/// This is the most appropriate method for doing user-level string searches,",46],["let length = 1 << level",46],["//  file found in the top level of this distribution and at",43],[":param: data  The NSData used to convert to json.Top level object in data is an NSArray or NSDictionary",49]],"useCount":4065},{"word":"lhs","context":[["switch (lhs.isBool, rhs.isBool) {",720],["return !(lhs == rhs)",410],["return lhs",469],["return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",543],["return infix(lhs, rhs)",672],["fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",900],["switch (lhs.type, rhs.type) {",965],["var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)",1443],["if (lhs === rhs) {",1444],["switch (lhs, rhs) {",1737]],"useCount":39180},{"word":"line","context":[["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["file: String = #file, line: UInt = #line",307],["// Uncomment the following line to preserve selection between presentations",1628],["file: String = #file, line: UInt = #line",307],["self.line = line",131],["self.line = line",131],["self.loc = SourceLoc(file, line, comment: \"test data\")",181],["for line in lines {",192],["_XCTRegisterFailure(false, _XCTFailureDescription(assertionType, 1, reason as NSString), message, file, line)",232],["_XCTRegisterFailure(true, _XCTFailureDescription(assertionType, 2), message, file, line)",292]],"useCount":17406},{"word":"list","context":[["success?(list: json.object)",90],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["///   - bindings: A list of parameters to bind to the statement.",91],["for item in list {",109],["case .List(let list):",110],["let name = json[9,\"list\",\"person\",\"name\"]",142],["let path = [9,\"list\",\"person\",\"name\"]",142],["The same as: let name = json[9][\"list\"][\"person\"][\"name\"]",284],["return list",523],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954]],"useCount":25011},{"word":"little","context":[["//  a little bit with Cocoa.  Because we want to keep the core",16],["/** Array of bytes with optional padding (little-endian) */",55],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["/// Returns the little-endian representation of the integer, changing the",24],["//    // In a storyboard-based application, you will often want to do a little preparation before navigation",24],["/// Creates an integer from its little-endian representation, changing the",25],["/* Just a little method to help us display alert dialogs to the user */",33],["/** array of bytes, little-endian representation */",45],["case .little:",21],["/** Int with array bytes (little-endian) */",20]],"useCount":7721},{"word":"load","context":[["load()",93],["let a3 = raceData.a3.load()",90],["//lazy load for all the properties",100],["let a2 = raceData.a2.load()",110],["let a1 = raceData.a1.load()",120],["// CHECK: [[C:%[0-9]+]] = load [[CADDR]]",124],["// CHECK: [[J:%[0-9]+]] = load [[JADDR]]",128],["- parameter completion: The completion handler to call when the load request is complete.",174],["// CHECK: [[I:%[0-9]+]] = load [[IADDR]]",198],["// CHECK: load",345]],"useCount":8001},{"word":"loading","context":[["var loading = false",69],["private let KVOLoading = \"loading\"",60],["if loading {",126],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["// Do any additional setup after loading the view.",6596],["loading = true",136],["// Do any additional setup after loading the view, typically from a nib.",9879],["// Do any additional setup after loading the view from its nib.",89],["self.loading = false",149],["case .loading:",81]],"useCount":20090},{"word":"locale","context":[["cal.locale = locale",84],["dateFormatter.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")",149],["formatter.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")",148],["XCTAssertEqual(locale.languageIdentifier, \"en\")",133],["formatter.locale = NSLocale.currentLocale()",72],["formatter.locale = locale",93],["formatter.locale = locale",93],["/// locale.",110],["cal.locale = locale",84],["// to lower case in Turkish locale:",80]],"useCount":4158},{"word":"localizedDescription","context":[["print(\"\\(error.localizedDescription)\")",51],["var localizedDescription: String {",52],["println(\"Error: \" + error.localizedDescription)",71],["NSLog(\"Unresolved error \\(error), \\(error.userInfo), \\(error.localizedDescription)\")",133],["print(error!.localizedDescription)",147],["XCTFail(error.localizedDescription)",165],["print(\"Error: \\(error.localizedDescription)\")",200],["print(error?.localizedDescription)",175],["println(error.localizedDescription)",243],["print(error.localizedDescription)",826]],"useCount":4320},{"word":"location","context":[["location.y = -(location.y - _viewPortHandler.offsetTop)",104],["location.x = location.x - _viewPortHandler.offsetLeft",104],["self.location = location",315],["self.location = location",315],["let location = touch.locationInNode(self)",242],["if range.location != NSNotFound {",123],["node.position = location",119],["location.y = -(location.y - _viewPortHandler.offsetTop)",104],["location.x = location.x - _viewPortHandler.offsetLeft",104],["let location = touch.locationInView(self)",94]],"useCount":11171},{"word":"locationManager","context":[["locationManager = CLLocationManager()",218],["func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {",217],["locationManager.desiredAccuracy = kCLLocationAccuracyBest",277],["locationManager.requestAlwaysAuthorization()",287],["func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {",356],["let locationManager = CLLocationManager()",358],["locationManager.stopUpdatingLocation()",359],["locationManager.requestWhenInUseAuthorization()",450],["locationManager.delegate = self",632],["locationManager.startUpdatingLocation()",635]],"useCount":7645},{"word":"lock","context":[["OSSpinLockUnlock(&lock)",158],["_lock.lock()",107],["OSSpinLockLock(&lock)",116],["condition.lock()",121],["lock.performLocked {",159],["lock()",183],["_lock.lock(); defer { _lock.unlock() }",197],["lock.unlock()",748],["lock.lock()",760],["lock.lock()",760]],"useCount":6855},{"word":"log","context":[["log.warning(\"Received unexpected notification \\(notification.name)\")",85],["let log = XCGLogger.defaultInstance()",98],["return log",70],["private let log = Logger.browserLogger",293],["private let log = Logger.syncLogger",284],["private let log = XCGLogger.defaultInstance()",187],["/// - Complexity: O(log(`count`))",155],["response.log()",130],["CoreStore.log(",84],["//debug or log, using + is faster than \\(var).",100]],"useCount":10612},{"word":"m","context":[["m += 1",69],["return m",228],["protocol m {",93],["let m = model!",92],["m \"\"",91],["low = m + 1",64],["s m {",69],["m  }",75],["return m( {",87],["let m = GameModel(dimension: 5, threshold: 2048, delegate: self)",90]],"useCount":8985},{"word":"main","context":[["DispatchQueue.main.async(execute: {",737],["//  main.swift",1361],["DispatchQueue.main.async(execute: { () -> Void in",393],["DispatchQueue.main.async {",2077],["window = UIWindow(frame: UIScreen.main.bounds)",183],["main {",333],["Async.main {",307],["override func main() {",298],["main()",228],["func main() {",178]],"useCount":12254},{"word":"mainScreen","context":[["return UIScreen.mainScreen().bounds.size.width",77],["window = UIWindow(frame: UIScreen.mainScreen().bounds)",756],["self.window = UIWindow(frame: UIScreen.mainScreen().bounds)",753],["let scale = UIScreen.mainScreen().scale",181],["let screenSize = UIScreen.mainScreen().bounds.size",178],["let window = UIWindow(frame: UIScreen.mainScreen().bounds)",121],["view.frame = UIScreen.mainScreen().bounds",84],["let width = UIScreen.mainScreen().bounds.width",83],["let screenSize: CGRect = UIScreen.mainScreen().bounds",83],["let screenWidth = UIScreen.mainScreen().bounds.width",74]],"useCount":4789},{"word":"make","context":[["(make) in",189],["make.left.right.equalTo(self.view)",345],["make.centerY.equalTo(self)",465],["make.edges.equalTo(self.view)",261],["make.height.equalTo(UIConstants.ToolbarHeight)",259],["make.centerX.equalTo(self)",253],["make.height.equalTo(20)",225],["make.size.equalTo(UIConstants.ToolbarHeight)",212],["make.trailing.equalTo(self)",195],["make.edges.equalTo(self)",209]],"useCount":25309},{"word":"managedObjectContext","context":[["if let moc = self.managedObjectContext {",675],["try managedObjectContext.save()",1098],["var managedObjectContext = NSManagedObjectContext()",633],["lazy var managedObjectContext: NSManagedObjectContext = {",846],["if managedObjectContext.hasChanges {",837],["return managedObjectContext",1678],["var managedObjectContext = NSManagedObjectContext(concurrencyType: .MainQueueConcurrencyType)",814],["managedObjectContext.persistentStoreCoordinator = coordinator",1563],["try self.managedObjectContext.save()",183],["lazy var managedObjectContext: NSManagedObjectContext? = {",664]],"useCount":13174},{"word":"manager","context":[["func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {",356],["self.manager = manager",161],["self.manager = manager",161],["func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {",168],["manager.request(.GET, URL)",173],["let manager = Manager(",177],["func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {",192],["let manager = NSFileManager.defaultManager()",200],["func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {",217],["return manager",253]],"useCount":10199},{"word":"map","context":[[".map(repack)",956],["let (map, transform) = right",264],["public func mapping(map: Map) {",314],["func mapping(map: Map) {",846],["|> map(repack)",304],[".map(randomArray)",304],["c.map { extractValue($0).value },",272],["required public init?(_ map: Map) {",246],["required init?(_ map: Map) {",241],[".map { a in",426]],"useCount":30335},{"word":"mapView","context":[["self.view = mapView",109],["marker.map = mapView",134],["mapView.setRegion(region, animated: true)",166],["mapView.showsUserLocation = true",184],["func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView? {",194],["func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView? {",194],["mapView.delegate = self",347],["mapView.addAnnotation(annotation)",126],["@IBOutlet weak var mapView: MKMapView!",492],["func mapView(mapView: MKMapView!, viewForAnnotation annotation: MKAnnotation!) -> MKAnnotationView! {",105]],"useCount":5677},{"word":"mapping","context":[["func mapping(map: Map) {",846],["public override func mapping(map: Map) {",82],["super.mapping(map: map)",104],["public mutating func mapping(map: Map) {",141],["override func mapping(map: Map) {",186],["mapping(map)",213],["super.mapping(map)",214],["mutating func mapping(map: Map) {",233],["public func mapping(map: Map) {",314],["mapping(map:map)",75]],"useCount":4220},{"word":"match","context":[["//This value is for serializer like message pack to identify the versions match between",100],["describe(\"positive match\") {",107],["Returns `Results` containing collection elements that match the given predicate.",96],["describe(\"negative match\") {",95],["XCTAssertEqual(error.domain, Error.Domain, \"error domain should match expected value\")",100],["let result = sut?.match(arguments: firstArgument, withArguments: secondArgument)",106],["for match in matches {",157],["switch self.match {",109],["- returns: The index of the first matching object, or `nil` if no objects match.",116],["or `nil` if no objects match.",125]],"useCount":7250},{"word":"max","context":[["self.max = max",64],["let minx = max(dataSet.entryIndex(entry: entryFrom) - diff, 0)",63],["maxSplits: Int.max,",232],["self.max = max",64],["maxSplit: Int = Int.max,",64],["maxSplit: Int.max,",66],["let phaseX = max(0.0, min(1.0, animator.phaseX))",66],["let maxx = min(max(minx + 2, dataSet.entryIndex(entry: entryTo) + 1), entryCount)",76],["return max",155],["version: UInt32.max)",324]],"useCount":8216},{"word":"measure","context":[["self.measure {",1051],["// Put the code you want to measure the time of here.",14709],["self.measure() {",789],["measure {",310],["//            // Put the code you want to measure the time of here.",132],["measure.addNote(Note(noteDuration: .eighth, tone: Tone(noteLetter: .c, octave: .octave1)))",45],["public static func measure<",13],["return perflib.measure(samples, iterations) {",16],["- parameter string: The text string to measure.",18],["self.measure{",20]],"useCount":17125},{"word":"measureBlock","context":[["self.measureBlock { () -> Void in",28],["self.measureBlock({ () -> Void in",30],["measureBlock {",274],["//        self.measureBlock() {",78],["//        self.measureBlock {",76],["measureBlock() {",51],["self.measureBlock{",33],["self.measureBlock {",4681],["self.measureBlock() {",9282],["self.measureBlock() {}",80]],"useCount":14626},{"word":"member","context":[["/// are a tuple whose first member is the previous value and whose second member",47],["while let member = iter.next() {",36],["/// are a tuple whose first member is the previous value and whose second member",47],["/// is the current value. `initial` is supplied as the first member when `self`",43],["members.append((member as! TestObjCKeyTy).value)",51],["members.append(member.value)",51],["// expected-note@-3 {{inferring '@objc' because the declaration is a member of an '@objc' protocol}}",76],["for member in members {",77],["self.member = member",37],["self.member = member",37]],"useCount":4455},{"word":"memory","context":[["error.memory = error1",60],["// The web view can go gray if it was zombified due to memory pressure.",52],["/// just-initialized memory.",60],["- parameter encodingMemoryThreshold: The encoding memory threshold in bytes.",82],["stop.memory = true",133],["error.memory = aError",51],["encoding takes place in-memory. If the content length exceeds the threshold, the data is streamed to disk",50],["return ptr.memory",50],["payload is small, encoding the data in-memory and directly uploading to a server is the by far the most",50],["be terminated. Larger payloads must first be written to disk using input and output streams to keep the memory",50]],"useCount":4617},{"word":"merge","context":[["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["_ = try merge(unknownField: other.unknownFields)",384],["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["try merge(unknownField: other.unknownFields)",169],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174]],"useCount":21607},{"word":"message","context":[["Reactive wrapper for `delegate` message.",268],["_XCTRegisterFailure(true, _XCTFailureDescription(assertionType, 2), message, file, line)",292],["var message: String?",338],["return message",356],["// @warn_unused_result(message:\"http://git.io/rxs.uo\")",469],["self.message = message",599],["self.message = message",599],["@warn_unused_result(message=\"http://git.io/rxs.uo\")",963],["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250],["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506]],"useCount":29414},{"word":"messages","context":[["XCTAssertEqual(observer.messages, [",171],["XCTAssertEqual(res.events, messages)",183],["XCTAssertEqual(res.messages, messages)",195],["XCTAssertEqual(res.messages, messages)",195],["let messages = [",259],["XCTAssertEqual(res.messages, correct)",311],["XCTAssertEqual(res.messages, correctMessages)",313],["XCTAssertEqual(res.messages, [",1610],["return messages.count",107],["let messages: [Recorded<Int>] = [",147]],"useCount":5161},{"word":"method","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// This method is called when watch view controller is about to be visible to user",793],["// This method is called when watch view controller is no longer visible",832],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],[":param: method The HTTP method.",310],["method: Method,",314],["// #warning Potentially incomplete method implementation.",553],["// #warning Incomplete method implementation.",558]],"useCount":112209},{"word":"methods","context":[["// MARK: Class methods",78],["// MARK: Private methods",254],["// MARK: - Private methods",289],["// MARK: Init methods",66],["// MARK: - Helper methods",76],["// MARK: Protocol methods",79],["// MARK: - Life cycle methods",77],["// MARK: - Public methods",210],["// MARK: Public methods",200],["// MARK: - Misc methods",79]],"useCount":6592},{"word":"min","context":[["let phaseX = max(0.0, min(1.0, animator.phaseX))",66],["let maxx = min(max(minx + 2, dataSet.entryIndex(entry: entryTo) + 1), entryCount)",76],["return CGFloat.min",85],["return Int(arc4random_uniform(UInt32((max - min) + 1))) + min",51],["return min",104],["return min(content.width / 2.0, content.height / 2.0)",54],["offsetLeft += min(_legend.neededWidth, _viewPortHandler.chartWidth * _legend.maxSizePercent) + _legend.xOffset * 2.0",51],["self.min = min",53],["/// calcualtes the y-min and y-max value and the y-delta and x-delta value",51],["self.min = min",53]],"useCount":6429},{"word":"mode","context":[["// Change the reader mode style on all tabs that have reader mode active",57],["switch mode {",393],["/* Set the scale mode to scale to fit the window */",363],["self.mode = mode",138],["self.mode = mode",138],["hud.mode = .Text",85],["_ mode: mode_t",80],["// If this reader mode availability state change is for the tab that we currently show, then update",60],["// If we are going to navigate to a new page, hide the reader mode button. Unless we",60],["// Change the reader mode style on all tabs that have reader mode active",57]],"useCount":4560},{"word":"model","context":[["self.model = model",304],["// FIXME: swift-3-indexing-model: range check i?",67],["switch model.type {",77],["// TODO: swift-3-indexing-model - review the following",77],["self.model = model",304],["models.append(model)",83],["return model",481],["let m = model!",92],["assert(model != nil)",97],["//  to delete and recreate this implementation file for your updated model.",759]],"useCount":8962},{"word":"modify","context":[["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["fatalError(\"Attempting to modify a ConstraintDescription after its constraint has been created.\")",90],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",84]],"useCount":21247},{"word":"more","context":[["For more information take a look at `DelegateProxyType` protocol documentation.",112],["// Allow more callbacks.",98],["/// If this is e.g. set to 10, no more than 10 values on the x-axis can be viewed at once without scrolling.",79],["// No more reallocations are expected.",78],["- parameter optionsInfo:      A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",71],["/// - parameter path: 0 or more `String` or `Int` that subscript the `JSON`",127],["//\tPerfect Additional Terms, for more details.",104],["For more information take a look at `DelegateProxyType`.",164],["- parameter optionsInfo:       A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",212],["/// reachable from `startIndex` by zero or more applications of",246]],"useCount":5388},{"word":"multiplier","context":[["multiplier:1.0,",62],["/// Frequency detuning multiplier",62],["multiplier: 1.0, constant: 0.0",70],["multiplier: 1.0,",1367],["multiplier: 1,",999],["///   - detuningMultiplier: Frequency detuning multiplier",82],["self.multiplier = multiplier",101],["self.multiplier = multiplier",101],["multiplier: 1, constant: 0))",142],["multiplier:1,",106]],"useCount":4419},{"word":"must","context":[["/// The value passed as `n` must not offset `i` beyond the `endIndex` or",58],["// must be followed by LayoutChanged, as ScreenChanged will make VoiceOver",60],["preconditionFailure(\"This method must be overridden\")",59],["must display the following acknowledgement:",62],["- parameter completionHandler: A handler that your delegate method must call providing the disposition and credential.",58],["// The cell that is returned must be retrieved from a call to -dequeueReusableCellWithReuseIdentifier:forIndexPath:",62],["When 'update' is 'true', the object must have a primary key. If no objects exist in",97],["///   - n: The distance to offset `i`. `n` must not be negative unless the",90],["/// - Parameter i: A valid index of the collection. `i` must be less than",80],["//      * Redistributions in binary form must reproduce the above",65]],"useCount":6470},{"word":"mutating","context":[["public mutating func next() -> T? {",66],["mutating func pop() -> T {",78],["mutating func adjust() {",81],["public mutating func removeAll() {",82],["private mutating func _uniqueStorage() -> _StorageClass {",114],["public mutating func mapping(map: Map) {",141],["public mutating func next() -> Element? {",183],["mutating func mapping(map: Map) {",233],["mutating",1272],["mutating func push(item: T) {",66]],"useCount":8711},{"word":"n","context":[["latest = n",225],["output += \"\\(indent) }\\n\"",590],["XCTAssert(n == a, \"Mismatch\")",551],["protocol n {",156],["class n {",161],["var n = 0",181],["print(\"\\n\")",182],["\"\\n\" +",203],["output += \"\\(indent)}\\n\"",496],["return n",336]],"useCount":36592},{"word":"name","context":[["var name: String?",938],["var name: String",1188],["let name: String",2029],["self.name = name",4462],["self.name = name",4462],["switch name {",500],["/// Java class name",604],["return name",678],["let storyboard = UIStoryboard(name: \"Main\", bundle: nil)",701],["public let name: String",835]],"useCount":83148},{"word":"named","context":[["btn.setBackgroundImage(UIImage(named: \"common_button_white_disable\"), forState: UIControlState.Normal)",65],["marker.icon = UIImage(named:\"\\(kk).png\")",86],["btn.setImage(UIImage(named: \"tabbar_compose_icon_add\"), forState: UIControlState.Normal)",45],["vc.tabBarItem.image = UIImage(named: imageName)",46],["///   - bindings: A dictionary of named parameters to bind to the statement.",46],["btn.setImage(UIImage(named: imageName), forState: UIControlState.Normal)",47],["imageView.image = UIImage(named: \"emptySync\")",48],["return UIImage(named: \"defaultFavicon\")!",56],["if let dbv: DatabaseValue = row.value(named: key) {",51],["let image = UIImage(named: imageName)",51]],"useCount":4754},{"word":"navigation","context":[["func webView(webView: WKWebView, didFinishNavigation navigation: WKNavigation!) {",276],["func webView(webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {",179],["func webView(webView: WKWebView, didFailNavigation navigation: WKNavigation!, withError error: NSError) {",166],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["//add the source code button item to the right of navigation bar",69],["func webView(webView: WKWebView, didCommitNavigation navigation: WKNavigation!) {",101],["MainAppTheme.navigation.applyStatusBar()",146],["func webView(webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: NSError) {",117],["self.ignoreNavigationInTab(tab, navigation: nav)",104]],"useCount":12051},{"word":"navigationController","context":[["navigationController?.popViewControllerAnimated(true)",556],["override func onClick(navigationController: UINavigationController?) {",608],["self.navigationController?.pushViewController(vc, animated: true)",422],["self.navigationController?.popToRootViewControllerAnimated(true)",359],["navigationController?.pushViewController(vc, animated: true)",317],["navigationController?.pushViewController(viewController, animated: true)",294],["self.navigationController?.navigationBarHidden = true",217],["self.navigationController?.pushViewController(controller, animated: true)",209],["navigationController.topViewController!.navigationItem.leftBarButtonItem = splitViewController.displayModeButtonItem()",197],["self.navigationController?.popViewControllerAnimated(true)",1577]],"useCount":14244},{"word":"navigationItem","context":[["self.navigationItem.rightBarButtonItem = nil",110],["// self.navigationItem.rightBarButtonItem = self.editButtonItem()",1397],["controller.navigationItem.leftItemsSupplementBackButton = true",328],["self.navigationItem.rightBarButtonItem?.enabled = false",97],["navigationItem.rightBarButtonItem = nil",120],["navigationController.topViewController!.navigationItem.leftBarButtonItem = splitViewController.displayModeButtonItem()",197],["self.navigationItem.rightBarButtonItem = addButton",252],["self.navigationItem.leftBarButtonItem = self.editButtonItem()",280],["controller.navigationItem.leftBarButtonItem = self.splitViewController?.displayModeButtonItem()",287],["self.navigationItem.hidesBackButton = true",114]],"useCount":6611},{"word":"never","context":[["XCTFail(\"Should never reach here.\")",39],["@inline(never) mutating",55],["/// This timer will never complete naturally, so all invocations of start() must",56],["return .never",65],["@_semantics(\"optimize.sil.never\")",79],["let producer = SignalProducer<Int, NoError>.never",88],["@inline(never) @_semantics(\"stdlib_binary_only\") // Hide the CF dependency",91],["@inline(never)",3846],["// clear any prior runs of parse... expected that this won't be necessary, but you never know",38],["public static var never: SignalProducer {",35]],"useCount":6544},{"word":"new","context":[["// Pass the selected object to the new view controller.",7085],["// Get the new view controller using segue.destinationViewController.",6255],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["// Get the new view controller using [segue destinationViewController].",848],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["set(new) {",136],["return new",139],["// Insert a new key-value pair.",197],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215]],"useCount":27816},{"word":"newValue","context":[["internalAU?.rampTime = newValue",289],["setValue(newValue, forKey: \"inputImage\")",316],["if newValue {",314],["switch newValue {",305],["if newValue != nil {",1553],["set(newValue) {",1289],["willSet(newValue) {",320],["if let newValue = newValue {",988],["if let newValue = newValue {",988],["self.object = NSNumber(value: newValue)",658]],"useCount":28054},{"word":"next","context":[["next(210, 2),",1483],["next(220, 3),",1046],["next(150, 1),",4606],["//: [TOC](Table%20Of%20Contents) | [Previous](@previous) | [Next](@next)",942],["//: [Next](@next)",833],["next(220, 2),",810],["next(150, 1)",722],["next(210, 1),",608],["next(340, 8),",586],["next(210, 9),",571]],"useCount":67000},{"word":"nib","context":[["struct nib {",30],["let nib = UINib(nibName: identifier, bundle: nil)",28],["// Returns the nib file name of the document",28],["let nib = UINib(nibName: nibName, bundle: nil)",25],["let nib = UINib(nibName: nibName, bundle: bundle)",37],["let view = nib.instantiateWithOwner(self, options: nil)[0] as! UIView",64],["// Do any additional setup after loading the view from its nib.",89],["// Do any additional setup after loading the view, typically from a nib.",9879],["static var nib: UINib {",21],["let view = nib.instantiate(withOwner: self, options: nil)[0] as! UIView",18]],"useCount":10566},{"word":"nibName","context":[["override var nibName: String? {",87],["override init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!) {",99],["super.init(nibName: nil, bundle: nil)",2029],["override public init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",114],["public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",145],["super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)",1516],["override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {",172],["self.init(nibName: nil, bundle: nil)",288],["override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: NSBundle?) {",796],["super.init(nibName:nibNameOrNil, bundle:nibBundleOrNil)",108]],"useCount":6755},{"word":"nil","context":[["return nil",68582],["default: return nil",1881],["super.init(nibName: nil, bundle: nil)",2029],["super.init(nibName: nil, bundle: nil)",2029],["if error == nil {",2129],["var error: NSError? = nil",2343],["dismissViewControllerAnimated(true, completion: nil)",2490],["self.dismissViewControllerAnimated(true, completion: nil)",3087],["}, completion: nil)",3462],["if error != nil {",4494]],"useCount":312354},{"word":"no","context":[["/// Advance to the next element and return it, or `nil` if no next",200],["// If there's no update required, use NCUpdateResult.NoData",138],["or `nil` if no objects match.",125],["- returns: The index of the first matching object, or `nil` if no objects match.",116],["/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.",244],["/// Zero (0.0) means there's no maximum width",112],["/// - Returns: The resolved service type instance, or nil if no registration for the service type,",111],["/// - Returns: The resolved service type instance, or nil if no registration for the service type",111],["/// If `animate(...)` is called, no further calling of `invalidate()` is necessary to refresh the chart.",484],["// This method is called when watch view controller is no longer visible",832]],"useCount":15577},{"word":"node","context":[["node.removeFromParent()",117],["node.position = location",119],["addChild(node)",186],["/// Function to start, play, or activate the node, all do the same thing",530],["/// Function to stop or bypass the node, both are equivalent",524],["/// Tells whether the node is processing (ie. started, playing, or active)",477],["return node",450],["///   - input: Input node to process",362],["/// - parameter input: Input node to process",271],["for node in nodes {",256]],"useCount":8432},{"word":"non","context":[["/// The position of the first element in a non-empty collection.",268],["/// case we simply open a new page with the original url. In the more complicated page, the non-readerized version",56],["// FIXME: we should print the non-API param name rdar://20962472",80],["// we still draw stacked bars, but there is one non-stacked in between",66],["The examples provided by Facebook are for non-commercial testing and evaluation",64],["XCTFail(\"Unexpected non-commutative login field.\")",63],["_precondition(n >= 0, \"number of elements to remove should be non-negative\")",60],["// Consider refactoring the code to use the non-optional operators.",60],["// Temporary work around for covering the non-clipped web view content",52],["_sanityCheckFailure(\"subscript: non-native string without objc runtime\")",51]],"useCount":4955},{"word":"none","context":[["selectionStyle = .none",122],["case .none:",668],["tableView.separatorStyle = .none",85],["case none",485],["// CHECK: {{.*}}DocCommentAsXML=none",475],["return .none",382],["associativity none",227],["cell.accessoryType = .none",78],["cell.selectionStyle = .none",130],["self = .none",94]],"useCount":4808},{"word":"not","context":[["fatalError(\"init(coder:) has not been implemented\")",11614],["// RUN: not %target-swift-frontend %s -parse",10778],["// RUN: not %target-swift-frontend %s -typecheck",5223],["// Return false if you do not want the specified item to be editable.",1475],["// Return false if you do not want the item to be re-orderable.",1078],["fatalError(\"not implemented\")",611],["// Return NO if you do not want the specified item to be editable.",528],["// Return NO if you do not want the item to be re-orderable.",525],["XCTAssertNotNil(request, \"request should not be nil\")",457],["// RUN: not --crash %target-swift-frontend %s -parse",1830]],"useCount":81698},{"word":"note","context":[["// expected-note@-3 {{add 'if #available' version check}}",120],["// expected-note@-1 {{add @available attribute to enclosing global function}}",764],["// expected-note@-2 {{protocol 'PlainProtocol' is not '@objc'}}",133],["// expected-note@-2 {{generic type parameters cannot be represented in Objective-C}}",133],["- note:",155],["// expected-note@-2 {{Swift structs cannot be represented in Objective-C}}",192],["// expected-note@-1 {{add @available attribute to enclosing class}}",224],["// expected-note@-1 {{add 'if #available' version check}}",363],["/// - note: This value is interpreted in the context of the calendar with which it is used",110],["// expected-note@-2 {{add 'if #available' version check}}",804]],"useCount":11725},{"word":"notification","context":[["UIApplication.sharedApplication().scheduleLocalNotification(notification)",161],["// Implement it if you use a dynamic notification interface.",362],["// Populate your dynamic notification interface as quickly as possible.",322],["let notification = UILocalNotification()",267],["func keyboardWillShow(notification: NSNotification) {",242],["func keyboardWillHide(notification: NSNotification) {",238],["// This method is called when a remote notification needs to be presented.",179],["if let userInfo = notification.userInfo {",212],["// This method is called when a local notification needs to be presented.",179],["// After populating your dynamic notification interface call the completion block.",362]],"useCount":10137},{"word":"null","context":[["- parameter path: A null-separated key-path string. Can be generated with `\"keyA\" => \"keyB\"`",326],["return \"null\"",277],["case .null:",238],["var r = JSON.null",225],["- returns: Return a json found by the path or a null json with error",186],["if \"\\(value)\" as NSString != \"<null>\" {",153],["public var null: NSNull? {",146],["return .null",145],["/// The static null json",130],["case null",130]],"useCount":6330},{"word":"number","context":[["case let number as NSNumber:",188],["expect(\"number\") == \"string\"",196],["self.number = number",201],["self.number = number",201],["return number",216],["for number in numbers {",289],["// Return the number of sections.",762],["// Return the number of rows in the section.",763],["// #warning Incomplete implementation, return the number of rows",1124],["// #warning Incomplete implementation, return the number of sections",1130]],"useCount":21849},{"word":"numberOfRowsInSection","context":[["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int",232],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933],["override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",1013],["func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",858],["public func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",375],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int",253],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int{",121],["func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int {",111],["override func tableView(tableView: UITableView?, numberOfRowsInSection section: Int) -> Int {",99]],"useCount":14933},{"word":"numberOfSectionsInTableView","context":[["//    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {",39],["override func numberOfSectionsInTableView(tableView: UITableView) -> Int {",4481],["override public func numberOfSectionsInTableView(tableView: UITableView) -> Int {",67],["override func numberOfSectionsInTableView(tableView:UITableView) -> Int {",68],["override func numberOfSectionsInTableView(tableView: UITableView?) -> Int {",68],["public override func numberOfSectionsInTableView(tableView: UITableView) -> Int {",78],["func numberOfSectionsInTableView(tableView: UITableView) -> Int",96],["override func numberOfSectionsInTableView(tableView: UITableView) -> Int",195],["public func numberOfSectionsInTableView(tableView: UITableView) -> Int {",241],["func numberOfSectionsInTableView(tableView: UITableView) -> Int {",2424]],"useCount":7912},{"word":"o","context":[["// RUN: %target-swift-frontend %s -emit-ir -g -o - | FileCheck %s",156],["return o",238],["func f<o>() -> (o, o -> o) -> o {",75],["o) {",75],["r = JSON(o)",75],["func f<o>() -> (o, o -> o) -> o {",75],["func f<o>() -> (o, o -> o) -> o {",75],["return Builtin.castReference(o)",85],["switch String.fromCString(o.objCType)! {",154],["case let o as NSNumber:",166]],"useCount":8584},{"word":"obj","context":[["reflect(object: obj)",97],["XCTAssertEqual(obj.year, 2015, \"The year should match\")",93],["var obj = obj",100],["var obj = obj",100],["for obj in array {",108],["for obj in objects {",167],["return obj",898],["override public func equalPayloads(obj: CleartextPayloadJSON) -> Bool {",73],["let obj = getDelegateInstance()",71],["if let obj = _delegate {",71]],"useCount":9165},{"word":"objc","context":[["@objc",5775],["// expected-note@-2 {{protocol 'Protocol_Class1' is not '@objc'}}",95],["@objc get {}",1293],["@objc set {}",810],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181],["// expected-note@-2 {{protocol 'PlainProtocol' is not '@objc'}}",133],["@objc(copyWithZone:)",128],["// FIXME: rdar://problem/19648117 Needs splitting objc parts out",106],["@objc init()",98]],"useCount":25943},{"word":"object","context":[[":returns: The UIColor object",2155],["self.object = NSNumber(value: newValue)",658],["return object",909],["object: nil)",1065],["self.object =  NSNull()",1136],["self.object = NSNull()",1280],["// Saves changes in the application's managed object context before the application terminates.",1424],["- returns: The NSColor object",1501],[":returns: The NSColor object",2155],["// Pass the selected object to the new view controller.",7085]],"useCount":78610},{"word":"objects","context":[["or `nil` if no objects match.",125],["return objects",139],["let object = objects[indexPath.row] as! NSDate",171],["XCTAssertEqual(0, realm.objects(SwiftObject).count)",176],["return objects.count",295],["for object in objects {",338],["// Configure interface objects here.",672],["var objects = [AnyObject]()",170],["for obj in objects {",167],["let object = objects[indexPath.row]",143]],"useCount":14920},{"word":"observe","context":[["signal.observe(observer)",96],["disposable += self.observe { event in",81],["signal.observe(next: { value in",72],["disposable += self.observe(observer)",55],["innerSignal.observe { event in",48],["return signal.observe(Signal.Observer { event in",97],[".observe { event in",115],["signal.observe { event in",341],["return self.observe { event in",469],["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250]],"useCount":4266},{"word":"observer","context":[["observer.sendCompleted()",1765],["observer.sendNext(1)",984],["return Signal { observer in",953],["observer.sendNext(2)",784],["sendCompleted(observer)",509],["observer.sendInterrupted()",469],["observer = incomingObserver",378],["observer.onCompleted()",372],["observer.action(event)",370],["super.init(observer: observer, cancel: cancel)",356]],"useCount":26093},{"word":"occurs","context":[["/// Invoked when an error occurs while starting to load data for the main frame.",52],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["- parameter failure: A function executed if an error occurs.",169],["/// No range or overflow checking occurs.",120],["/// - throws: A DatabaseError is thrown whenever an SQLite error occurs.",70],["- parameter handler: the handler which will be invoked when the server responds successfully or when an error occurs",32],["/// calculates the maximum stacksize that occurs in the Entries array of this DataSet",36],["an autorefresh occurs, `refresh()` is called, after an implicit refresh from",37],["/// Invoked when an error occurs during a committed main frame navigation.",41],["it(\"should return an error if one occurs\") {",69]],"useCount":4611},{"word":"of","context":[["// Dispose of any resources that can be recreated.",24097],["// Put the code you want to measure the time of here.",14709],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// This is an example of a performance test case.",14731],["// This source file is part of the Swift.org open source project",14622],["// This is an example of a functional test case.",14616],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248]],"useCount":275268},{"word":"offset","context":[["/// Set an offset in dp that allows the user to drag the chart over it's",128],["// CHECK-64-NEXT:       (field name=some offset=0",90],["// CHECK-32:       (field name=_value offset=0",104],["// CHECK-64:       (field name=_value offset=0",107],["var offset = 2",108],["offset += 1",118],["// calculate the correct offset depending on the draw position of the value",118],["self.offset = offset",127],["self.offset = offset",127],["var offset = 0",229]],"useCount":12739},{"word":"often","context":[["* N.B., BrowserProfile is used from our extensions, often via a pattern like",15],["\"found\", \"index\", \"f\", \"key\", \"array\", \"size\", \"often\", \"this\", \"is\",",13],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["// calculate how often the group-space appears",29],["//    // In a storyboard-based application, you will often want to do a little preparation before navigation",24]],"useCount":7484},{"word":"on","context":[["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506],["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250],["//  Created by Aurelius Prochazka, revision history on Github.",875],["//  Created by Daniel Cohen Gindi on 4/3/15.",592],["//  Created by Daniel Cohen Gindi on 23/2/15.",432],["// Fallback on earlier versions",364],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326],["//  Created by ___FULLUSERNAME___ on ___DATE___.",293],["//  Created by Carlos Butron on 02/12/14.",237],["//  Created by Daniel Cohen Gindi on 26/2/15.",209]],"useCount":85959},{"word":"one","context":[["* Favicons, history, and bookmarks are all stored in one intermeshed",59],["/// Creates a Signal from the producer, then adds exactly one observer to",87],["or an `Array` with one object for each persisted property. An exception will be",82],["//Causes the view (or one of its embedded text fields) to resign the first responder status.",71],["it(\"should return an error if one occurs\") {",69],["// we still draw stacked bars, but there is one non-stacked in between",66],["/// Creates a producer for a Signal that will immediately send one value",63],["// we have two notifications, one for opening the realm, and a second when performing our transaction",57],["/// a value contained in one of the datasets)",58],["/// flag that indicates if rotation is done with two fingers or one.",62]],"useCount":9171},{"word":"only","context":[["- warning: This method can only be called during a write transaction.",264],["//  keyboard is not showing(At the beginning only). We should save rootViewRect.",55],["// We have positive values only, stay in the positive zone",55],["// if only single values are drawn (sum)",66],["* - Returns: a matcher (OHHTTPStubsTestBlock) that succeeds only if the request",78],["// add expensive code required only for logging, then return an optional String",84],["// expected-error@-1 {{'ClassAvailableOn10_51' is only available on OS X 10.51 or newer}}",90],["// expected-error@-1 {{'functionAvailableOn10_51()' is only available on OS X 10.51 or newer}}",100],["This method is useful only in specialized circumstances, for example, when building",106],[":warning: This method can only be called during a write transaction.",143]],"useCount":9789},{"word":"opacity","context":[["strongSelf.opacityView.layer.opacity = 0.0",45],["opacity: 0.0",46],["self.layer.opacity = 1.0",46],["shadowOpacity = value.opacity",53],["let animation = CABasicAnimation(keyPath: \"opacity\")",61],["let opacityAnimation = CAKeyframeAnimation(keyPath: \"opacity\")",63],["opacityView.layer.opacity = 0.0",95],["opacity = 0",132],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310]],"useCount":7664},{"word":"open","context":[["open func start() {",186],["// This source file is part of the Swift.org open source project",14622],["This source file is part of the Swift.org open source project",551],["open var description: String {",458],["open override func layoutSubviews() {",273],["if let err = SQLiteDB.sharedInstance.open() {",241],["override open func viewDidLoad() {",232],["open func stop() {",191],["override open func layoutSubviews() {",189],["case open",175]],"useCount":29868},{"word":"operation","context":[["runOperation(operation)",224],["public func evaluateForOperation(operation: Operation, completion: OperationConditionResult -> Void) {",111],["XCTAssertTrue(operation.finished)",209],["waitForOperation(operation)",170],["switch operation {",165],["return operation",153],["operationQueue.addOperation(operation)",145],["operation.cancel()",136],["let operation = TestOperation()",125],["public func dependencyForOperation(operation: Operation) -> NSOperation? {",116]],"useCount":10609},{"word":"operator","context":[["infix operator =~ {}",53],["- seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)",47],["- seealso: [zip operator on reactivex.io](http://reactivex.io/documentation/operators/zip.html)",43],["/// the given Signal operator to _every_ Signal created from the two",42],["/// producers, just as if the operator had been applied to each Signal",42],["infix operator >>- {",41],["infix operator <- {}",40],["infix operator &&& {",39],["prefix operator +++ {}",36],["- seealso: [distinct operator on reactivex.io](http://reactivex.io/documentation/operators/distinct.html)",35]],"useCount":5142},{"word":"optional","context":[["///  - attrs: the optional extra attributes to set before calling the remote service.",422],["// add expensive code required only for logging, then return an optional String",84],["/// - Parameter path: An optional String specifying the pattern that needs to be",108],["//Non-optional [String : JSON]",141],["/// - returns: `nil` if the object at `path` is `NSNull` or if any optional key is missing.",69],["//Non-optional [JSON]",141],["//Non-optional string",142],["//Non-optional number",142],["//Non-optional bool",142],["// Infers a value of optional type.",66]],"useCount":6267},{"word":"options","context":[["self.options = options",403],["options: [],",758],["try coordinator.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)",721],["let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))",553],["options: options,",458],["options: options,",458],["self.options = options",403],["options:[],",344],["AVAudioUnit.instantiateWithComponentDescription(description, options: []) {",265],["let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))",202]],"useCount":28765},{"word":"or","context":[["/// Function to start, play, or activate the node, all do the same thing",530],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["* Redistribution and use in source and binary forms, with or without",695],["*\t\tand/or other materials provided with the distribution.",550],["/// Function to stop or bypass the node, both are equivalent",524],["//  Redistribution and use in source and binary forms, with or without",498]],"useCount":52548},{"word":"order","context":[["valid and in the same order as the properties defined in the model.",57],["// Perform any setup necessary in order to update the view.",146],["/// in the same order.",115],["/// byte order if necessary.",98],["// Please keep this file in alphabetical order!",96],["switch order {",95],["// FIXME: in protocol compositions protocols are listed in reverse order.",64],["/// In order to decode a code unit sequence completely, this function should",61],["// Using variadics (in-order, complete)",59],["///                  matched, in order for the handlers to be invoked.",54]],"useCount":4556},{"word":"org","context":[["let URLString = \"https://httpbin.org/get\"",152],["See http://tools.ietf.org/html/rfc7231#section-4.3",139],["// This source file is part of the Swift.org open source project",14622],["let URLString = \"https://httpbin.org/post\"",144],["// This source file is part of the Perfect.org open source project",158],["This source file is part of the Swift.org open source project",551],["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["let host = \"test.alamofire.org\"",810],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954]],"useCount":35702},{"word":"origin","context":[["var originX = textRect.origin.x",105],["return self.frame.origin.y",167],["self.origin = origin",165],["self.origin = origin",165],["return self.frame.origin.x",161],["barRect.origin.x = left",153],["barRect.origin.y = top",152],["frame.origin.x = finalXOrigin",137],["if (!viewPortHandler.isInBoundsRight(barRect.origin.x))",112],["var origin = Point()",108]],"useCount":12037},{"word":"os","context":[["#if os(OSX)",2325],["#if os(OSX) || os(iOS)",506],["#if os(iOS)",4573],["#if os(OSX) || os(iOS)",506],["#if !os(tvOS)",547],["#if !os(OSX)",642],["#if os(iOS) || os(tvOS)",1106],["#elseif os(OSX)",1209],["#if os(Linux)",2285],["#if os(iOS) || os(tvOS)",1106]],"useCount":24005},{"word":"other","context":[["case .other:",446],["case \"other\":",718],["*\t\tand/or other materials provided with the distribution.",550],["mergeUnknownFields(other.unknownFields)",547],["//  and Objective-C and various other programming languages.",504],["case other",438],["d[\".tag\"] = .str(\"other\")",393],["_ = try merge(unknownField: other.unknownFields)",384],["try mergeUnknownFields(other.unknownFields)",347],["d[\".tag\"] = .Str(\"other\")",310]],"useCount":20365},{"word":"out","context":[["//Need to find out a way to improve this method performance as this method might called to",100],["/// - parameter scaleY: if < 1 --> zoom out, if > 1 --> zoom in",67],["/// - parameter scaleX: if < 1 --> zoom out, if > 1 --> zoom in",67],["// RUN: %target-run %t.out",71],["assert(indexIsValidForRow(row, column: column), \"Index out of range\")",76],["/// if the chart is fully zoomed out, return true",88],["// Create a new predicate that filters out any object that",97],["// FIXME: rdar://problem/19648117 Needs splitting objc parts out",106],["// Set the color for the currently drawn value. If the index is out of bounds, reuse colors.",127],["return out",321]],"useCount":6418},{"word":"output","context":[["var output = \"\"",1905],["return output",1467],["let output = [",1182],["expectEqual(expected, output)",722],["return .dictionary(output)",680],["unknownFields.writeDescriptionTo(&output, indent:indent)",662],["return .Dictionary(output)",627],["output += \"\\(indent) }\\n\"",590],["output += unknownFields.getDescription(indent: indent)",553],["unknownFields.writeToCodedOutputStream(output)",537]],"useCount":21470},{"word":"override","context":[["override func didReceiveMemoryWarning() {",27430],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915],["override init(frame: CGRect) {",6875],["override func viewWillAppear(animated: Bool) {",7024],["override func awakeFromNib() {",7192],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",10988],["override func viewDidLoad() {",52244],["override func setUp() {",27985],["override func tearDown() {",25219]],"useCount":360415},{"word":"p","context":[["* <p>The default implementation does nothing.</p>",562],["// RUN: mkdir -p %t",648],["// RUN: rm -rf %t && mkdir -p %t",649],["* <p>The default implementation does nothing.</p>",562],["protocol p {",222],["return p.future",197],["p += 1",159],["class p {",119],["return Builtin.bridgeFromRawPointer(p)",87],["return p",523]],"useCount":15517},{"word":"page","context":[["self.page = page",113],["self.page = page",113],["return page",98],["// Must be called in `playgroundPrologue()` to update with the current page contents.",80],["currentPage = page",78],["// Update page if changed",75],["// In future, we'll want to link to /settings and an upgrade page, respectively.",70],["var page = 1",68],["// (orange color) as soon as the page has loaded.",60],["// are going to a about:reader page. Then we keep it on screen: it will change status",60]],"useCount":6581},{"word":"param","context":[[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],[":param: destination The closure used to determine the destination of the downloaded file.",217],["/// :param: yAxisDuration duration for animating the y axis",172],["/// :param: xAxisDuration duration for animating the x axis",172],[":param: URLRequest The URL request",234],[":param: size The size of the font",246],[":param: method The HTTP method.",310],[":param: URLString The URL string.",312],["/// :param array The array to source from.",325],["@param target Target object for selector.",370]],"useCount":24419},{"word":"parameter","context":[["/// - parameter xAxisDuration: duration for animating the x axis",352],["/// - parameter input: Input node to process",271],["- parameter from: a `From` clause indicating the entity type",313],["- parameter path: A null-separated key-path string. Can be generated with `\"keyA\" => \"keyB\"`",326],["- parameter json: An object from NSJSONSerialization, preferably a `NSDictionary`.",326],["- parameter size: The size of the font",258],["/// - parameter xIndex:",256],["/// - parameter yValue:",351],["/// - parameter yAxisDuration: duration for animating the y axis",352],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501]],"useCount":48821},{"word":"parameters","context":[["guard let vw0 = request.parameters[\"w0\"] else {",761],["var parameters = Dictionary<String, AnyObject>()",834],["var parameters = Dictionary<String, Any>()",957],["/// - parameters:",2174],["parameters[\"include_entities\"] = includeEntities!",503],["parameters[\"skip_status\"] = skipStatus!",394],["/// - parameters",425],["guard let vw1 = request.parameters[\"w1\"] else {",539],["let parameters = [",698],["- parameters:",760]],"useCount":32065},{"word":"params","context":[["self.fetchList(url, params: options, success: success, failure: failure)",99],["let params = [",267],["self.params = params",88],["self.params = params",88],["for (key, value) in params {",78],["for param in params {",71],["params: params,",113],["params: params,",113],["return params",247],["parameters: params,",66]],"useCount":4385},{"word":"parent","context":[["self.parent = parent",703],["self.parent = parent",703],["_parent = parent",372],["let parent: Parent",330],["init(parent: Parent, observer: O, cancel: Disposable) {",240],["init(parent: Parent, observer: O) {",182],["public override var parent:SPXMLElement! {",179],["self.parent.childs.insert(self)",179],["if self.parent.childs.contains(self) == false {",179],["switch parent {",177]],"useCount":8342},{"word":"parse","context":[["XCTAssertThrowsError(try parser.parse(data))",74],["// failed to parse JSON into array form",52],["// try to parse it into a dictionary and then wrap it in an array",52],["let jsvalue = JSValue.parse(string)",108],["parser.parse()",177],["try cli.parse()",186],["- ctx: the parse tree",558],["// RUN: %target-parse-verify-swift",1640],["// RUN: not --crash %target-swift-frontend %s -parse",1830],["// RUN: not %target-swift-frontend %s -parse",10778]],"useCount":19393},{"word":"parser","context":[["_ = validateParameter(parser, p1),",210],["parser.delegate = self",198],["p1 = P1(parser: parser),",210],["p2 = P2(parser: parser),",196],["p2 = P2(parser: parser),",196],["_ = validateParameter(parser, p2),",196],["parser.parse()",177],["let parser = ParameterParser(path: request.path)",435],["p1 = P1(parser: parser),",210],["where parser.isEmpty",435]],"useCount":9066},{"word":"part","context":[["Creates a body part from the data and appends it to the multipart form data object.",74],["// This source file is part of the Swift.org open source project",14622],["This source file is part of the Swift.org open source project",551],["The body part data will be encoded using the following format:",175],["// This source file is part of the Perfect.org open source project",158],["* This file is part of the HSTracker package.",111],["for part in parts {",77],["func startLoop(part: String) {",76],["let file = try? AKAudioFile(readFileName: \"\\(part)loop.wav\", baseDir: .Resources)",72],["// This source file is part of the SMUD open source project",69]],"useCount":17742},{"word":"password","context":[["self.password = password",256],["self.password = password",256],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["@IBOutlet weak var password: UITextField!",106],["password: String,",103],["let password: String",72],["let password = \"password\"",70],["let password = \"password\"",70],["user1 = try tapglue.loginUser(username1, password: password).toBlocking().first()!",69],["user1 = try tapglue.loginUser(username1, password: password).toBlocking().first()!",69]],"useCount":7140},{"word":"path","context":[["path.stroke()",481],["path.fill()",369],["var path: String {",390],["let parser = ParameterParser(path: request.path)",435],["let parser = ParameterParser(path: request.path)",435],["return path",1248],["let path = UIBezierPath()",1096],["self.path = path",761],["self.path = path",761],["path.closePath()",445]],"useCount":40774},{"word":"performance","context":[["// This is an example of a performance test case.",14731],["// An empty implementation adversely affects performance during animation.",884],["// FIXME(performance): constructing two temporary strings is extremely",32],["// FIXME(performance): use _copyContents(initializing:).",32],["It is strongly suggested to supply it whenever possible, to get a better performance and disk usage.",33],["// FIXME(performance): this code assumes UTF-16 in-memory representation.",42],["//Need to find out a way to improve this method performance as this method might called to",100],["@inline(__always) // For performance reasons.",105],["//        // This is an example of a performance test case.",133],["/* Sprite Kit applies additional optimizations to improve rendering performance */",362]],"useCount":17049},{"word":"persistentStoreCoordinator","context":[["let coordinator = self.persistentStoreCoordinator",1601],["managedObjectContext.persistentStoreCoordinator = persistentStoreCoordinator",43],["var persistentStoreCoordinator: NSPersistentStoreCoordinator {",48],["lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator? = {",681],["lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator = {",828],["managedObjectContext.persistentStoreCoordinator = coordinator",1563],["managedObjectContext.persistentStoreCoordinator = persistentStoreCoordinator",43],["_managedObjectContext!.persistentStoreCoordinator = coordinator",41],["context.persistentStoreCoordinator = coordinator",38],["let psc = contextManager.persistentStoreCoordinator",29]],"useCount":5419},{"word":"pickerView","context":[["func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {",379],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {",262],["func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {",482],["func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {",379],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {",262],["func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {",118],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String! {",140],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String! {",140],["func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {",482],["func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int {",484]],"useCount":5570},{"word":"place","context":[["/// Shuffle the elements of `self` in-place.",45],["/// encoding takes place in-memory. If the content length exceeds the threshold, the data is streamed to disk",46],["encoding takes place in-memory. If the content length exceeds the threshold, the data is streamed to disk",50],["/// The earlier you place them in the provided array, the further they will be in the background.",54],["// Playground - noun: a place where people can play",875],["//: Playground - noun: a place where people can play",1899],["// place the camera",44],["return self.db.run(update, withArgs: args) >>> always(place.guid)",44],["]) >>> always(place.guid)",34],["return deferMaybe(place.guid)",30]],"useCount":4540},{"word":"play","context":[["//: Playground - noun: a place where people can play",1899],["public func play() {",84],["player?.play()",105],["instrument.play()",118],["play()",119],["func play() {",144],["audioPlayer.play()",150],["/// Function to start, play, or activate the node, all do the same thing",530],["// Playground - noun: a place where people can play",875],["player.play()",907]],"useCount":6248},{"word":"player","context":[["player.looping = true",424],["player.stop()",311],["player?.play()",105],["player.prepareToPlay()",111],["player: player,",125],["player: player,",125],["var player = AKAudioPlayer(file!)",135],["player.pause()",175],["let player = try AKAudioPlayer(file: file)",236],["player.play()",907]],"useCount":6189},{"word":"point","context":[["// Override point for customization after application launch.",16653],["point: CGPoint(",458],["return point",122],["override func hitTest(point: CGPoint, withEvent event: UIEvent?) -> UIView? {",97],["for point in points {",91],["return super.hitTest(point, withEvent: event)",78],["drawHighlightLines(context: context, point: _highlightPointBuffer, set: set)",70],["override func pointInside(point: CGPoint, withEvent event: UIEvent?) -> Bool {",70],["public override func hitTest(point: CGPoint, withEvent event: UIEvent?) -> UIView? {",61],["let point = NSPoint(x: CGFloat(10.0), y: CGFloat(10.0))",61]],"useCount":26505},{"word":"port","context":[["self.port = port",183],["private func initStreamsWithData(data: NSData, _ port: Int) {",45],["port = 80",62],["self.port = port",183],["//  A port of MPAndroidChart for iOS",2193],["port = 443",56],["if port == nil {",55],["var port = url.port",53],["var port = url.port",53],["CFStreamCreatePairWithSocketToHost(nil, h, UInt32(port), &readStream, &writeStream)",52]],"useCount":4468},{"word":"position","context":[["///   `position != endIndex`.",162],["/// Access the element at `position`.",138],["// calculate the x-position, depending on datasetcount",137],["position.y = 0.0",126],["/// The collection's \"past the end\" position.",272],["/// The position of the first element in a non-empty collection.",268],["var position = CGPoint(x: 0.0, y: 0.0)",237],["switch position {",188],["self.position = position",223],["self.position = position",223]],"useCount":17215},{"word":"practicalswift","context":[["// <rdar://problem/23719432> [practicalswift] Compiler crashes on &(Int:_)",19],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558]],"useCount":73135},{"word":"predicate","context":[["// Create a new predicate that filters out any object that",97],["self.predicate = predicate",96],["Returns `Results` containing collection elements that match the given predicate.",96],["request.predicate = predicate",210],["case .Predicate(let predicate):",114],["// Set the predicate on the fetch request",132],["fetchRequest.predicate = predicate",395],["request.predicate = predicate",210],["Returns the index of the first object matching the given predicate,",198],["fetchRequest.predicate = predicate",395]],"useCount":6992},{"word":"prefix","context":[["var baseElements = prefix.map(MinimalComparableValue.init)",96],["func prefix(with: String) -> <T>(() -> T) -> String {",105],["offsetBy: numericCast(prefix.count + elements.count))",288],["XCTAssertBuilds(prefix)",105],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.dl.txt",127],["// RUN: %FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",164],["// RUN: %FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",195],["offsetBy: numericCast(prefix.count))",288]],"useCount":8356},{"word":"preparation","context":[[":description: General preparation statements.",26],["/// General preparation statements.",12],["//    // In a storyboard-based application, you will often want to do a little preparation before navigation",24],["// MARK: - Visual preparation",31],["// The app is about to change the document's contents. Perform any preparation here.",34],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403]],"useCount":7530},{"word":"prepareForSegue","context":[["public override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",61],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",10988],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {",364],["override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) {",305],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)",269],["super.prepareForSegue(segue, sender: sender)",169],["override func prepareForSegue(segue: UIStoryboardSegue?, sender: AnyObject?) {",127],["override func prepareForSegue(segue: NSStoryboardSegue, sender: AnyObject?) {",88],["//    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",74],["override public func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",65]],"useCount":12889},{"word":"presentViewController","context":[["self.presentViewController(alert, animated: true, completion: nil)",1870],["self.presentViewController(alertController, animated: true, completion: nil)",1033],["presentViewController(alert, animated: true, completion: nil)",684],["presentViewController(alertController, animated: true, completion: nil)",654],["presentViewController(controller, animated: true, completion: nil)",274],["presentViewController(ac, animated: true, completion: nil)",267],["self.presentViewController(controller, animated: true, completion: nil)",229],["self.presentViewController(vc, animated: true, completion: nil)",221],["presentViewController(imagePicker, animated: true, completion: nil)",172],["presentViewController(vc, animated: true, completion: nil)",162]],"useCount":9947},{"word":"previous","context":[["//: [TOC](Table%20Of%20Contents) | [Previous](@previous) | [Next](@next)",942],["//: [Previous](@previous)",774],["//: [Previous](@previous) | [Next](@next)",170],["/// Returns the previous consecutive value before `self`.",99],["[Table of Contents](Table%20of%20Contents) | [Previous](@previous) | [Next](@next)",92],["func tabManager(tabManager: TabManager, didSelectedTabChange selected: Browser?, previous: Browser?) {",75],["[Previous](@previous)",63],["[⬅️](@previous) [➡️](@next)",62],["Creates a request for downloading from the resume data produced from a previous request cancellation.",61],["//  If it refuses then becoming previous textFieldView as first responder again.    (Bug ID: #96)",58]],"useCount":4642},{"word":"print","context":[["print(error.localizedDescription)",826],["print(result)",600],["print(value)",380],["print(\"Error: \\(error)\")",245],["print(message)",236],["print($0)",229],["print(error.description)",226],["print(\"\")",1075],["print(\"Hello world\")",1202],["print(error)",4084]],"useCount":36571},{"word":"println","context":[["println(url)",94],["println(error)",617],["println()",437],["println(error.localizedDescription)",243],["println(response)",125],["println() {",100],["println( {",100],["//println(\"Unresolved error \\(error), \\(error.userInfo)\")",170],["println(\"\")",100],["println(\"Error: \\(error)\")",110]],"useCount":8005},{"word":"private","context":[["private extension String {",400],["private func setupUI() {",393],["private override init() {",356],["private struct Constants {",326],["private struct AssociatedKeys {",322],["private let log = Logger.browserLogger",293],["private func setup() {",807],["private init() {",679],["private func commonInit() {",512],["private init() {}",478]],"useCount":76275},{"word":"problem","context":[["LCSAssert(problem: problem, input: input, answer: answer, expected: expected, judge: { answer == expected })",123],["LCSAssert(problem: problem, input: input, answer: answer, expected: expected, judge: { answer == expected })",123],["// FIXME: rdar://problem/19648117 Needs splitting objc parts out",106],["Check the error message to determine what the actual problem was.",79],["// (<rdar://problem/20715009> Implement recursive protocol",62],["//Getting problem while using `setContentOffset:animated:`, So I used animation API.",49],["that describes the problem. If you are not interested in",46],["- throws: an XMLDeserializationError is there is a problem with deserialization",45],["// FIXME: <rdar://problem/21885650> Create reusable RingBuffer<T>",44],["// BLOCKED: <rdar://problem/13822406>",42]],"useCount":7921},{"word":"produce","context":[["/// The two loops in the following example produce the same output:",24],["it(\"should produce JSON\") {",25],["// A global var to produce a unique address for the assoc object handle",29],["XCTAssertEqual(constraint, expected, \"The syntax should produce a constraint expressing the same relation\")",30],["//        // Use XCTAssert and related functions to verify your tests produce the correct results.",44],["/// A type whose instances can produce the elements of this",44],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["it(\"should produce an empty signal if count is 0\") {",23],["/// `startIndex` to produce indices instead.",23],["it(\"should produce an equivalent signal producer if count is 1\") {",23]],"useCount":9456},{"word":"producer","context":[["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506],["let producer = SignalProducer<Int, NoError>.never",88],["producer.startWithSignal { signal, signalDisposable in",89],["var producer: SignalProducer<Int, NoError>!",92],["return producer",93],["let result = producer.collect().single()",102],["return { producer in",149],["producer",193],["producer.start { event in",241],["producer.start()",318]],"useCount":11046},{"word":"profile","context":[["let profile: Profile",300],["self.profile = profile",367],["self.profile = profile",367],["self.profile = settings.profile",181],["self.profile = settings.profile",181],["var profile: Profile!",176],["init(profile: Profile) {",118],["private let profile: Profile",99],["if let dict = profile.prefs.dictionaryForKey(ReaderModeProfileKeyStyle) {",82],["if let account = profile.getAccount() {",169]],"useCount":8630},{"word":"progress","context":[["self.progress = progress",105],["- parameter progressBlock:     Called when the image downloading progress gets updated.",132],["self.progress = progress",105],["progress: nil,",102],["public func progress(closure: ((Int64, Int64, Int64) -> Void)? = nil) -> Self {",84],["progress?(status: json.object)",81],["let progress: NSProgress",79],["progressValues.append(progress)",79],["self.progress = NSProgress(totalUnitCount: 0)",77],["/// The progress of the request lifecycle.",74]],"useCount":6609},{"word":"project","context":[["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["// This source file is part of the Swift.org open source project",14622],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["This source file is part of the Swift.org open source project",551],["// This source file is part of the Perfect.org open source project",158],["//   Swen project",87],["// This source file is part of the SMUD open source project",69],["// See CONTRIBUTORS.txt for the list of SMUD project authors",65]],"useCount":68315},{"word":"properties","context":[["/// their `translatesAutoresizingMaskIntoConstraints` properties set to `false`.",102],["return properties",139],["- warning: Only names of properties of a type conforming to the `MinMaxType` protocol can be used.",146],["- warning: Only names of properties of a type conforming to the `AddableType` protocol can be used.",148],["// MARK: - Private properties",204],["// MARK: - properties",83],["// MARK: Private properties",84],["//lazy load for all the properties",100],["// MARK: properties",115],["// MARK: - Public properties",253]],"useCount":7989},{"word":"property","context":[["to initialize property values and other setup operations.",155],["property = convert(downcasted)",122],["property.value = subsequentPropertyValue",117],["When setting this property in conjunction with the shape property having a",90],["switch property {",94],["property = nil",96],["// expected-error @-1{{property cannot be marked @objc because its type cannot be represented in Objective-C}}",181],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["property = valid",262],["return property",183]],"useCount":21106},{"word":"protocol","context":[["protocol A {",5272],["protocol a {",3794],["protocol b {",1729],["protocol B {",630],["protocol P {",2575],["protocol A{",704],["protocol d {",546],["protocol A : a {",535],["protocol C {",940],["protocol c {",1499]],"useCount":50201},{"word":"provided","context":[["/// the least significant bits of the provided bit pattern.",120],["* documentation and/or other materials provided with the distribution.",97],["//  documentation and/or other materials provided with the distribution.",115],["//  and/or other materials provided with the distribution.",115],["// other materials provided with the distribution.",188],["// in connection with the web services and APIs provided by Facebook.",158],["other materials provided with the distribution.",216],["//    and/or other materials provided with the distribution.",150],["and/or other materials provided with the distribution.",288],["*\t\tand/or other materials provided with the distribution.",550]],"useCount":5698},{"word":"pt","context":[["_viewPortHandler.centerViewPort(pt: pt, chart: self)",124],["getTransformer(.Left).pixelToValue(&pt)",86],["pt = CGPointApplyAffineTransform(pt, valueToPixelMatrix)",95],["pt = CGPointApplyAffineTransform(pt, valueToPixelMatrix)",95],["if (!viewPortHandler.isInBoundsRight(pt.x))",106],["_viewPortHandler.centerViewPort(pt: pt, chart: self)",124],["getTransformer(axis).pointValueToPixel(&pt)",139],["return pt",150],["var pt = CGPoint()",183],["if (!viewPortHandler.isInBoundsLeft(pt.x) || !viewPortHandler.isInBoundsY(pt.y))",79]],"useCount":4498},{"word":"public","context":[["public required init?(coder aDecoder: NSCoder) {",1812],["public init() { }",2934],["required public init?(coder aDecoder: NSCoder) {",3041],["public init() {}",2864],["public init(",1848],["public init() {",4316],["public var debugDescription: String {",1739],["public override init() {",1558],["public var description: String {",6709],["public var hashValue: Int {",1327]],"useCount":319298},{"word":"publish","context":[["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",84],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",67],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174]],"useCount":19969},{"word":"query","context":[["query.findObjectsInBackgroundWithBlock {",106],["/// - Throws: `Result.Error` if query execution fails.",107],["self.query = query",138],["var query = options.query()",173],["self.query = query",138],["var query = self",116],["let expression = query.expression",100],["// construct query parameters",107],["var query = options.query()",173],["return query",330]],"useCount":11429},{"word":"queue","context":[["dispatch_sync(queue) {",392],["dispatch_sync(SQLiteDB.sharedInstance.queue) {",159],["dispatch_async(queue) {",448],["let queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)",218],["queue.async {",232],["self.queue = queue",235],["return queue",383],["dispatch_async(self.queue) {",281],["let queue = NSOperationQueue()",251],["self.queue = queue",235]],"useCount":14857},{"word":"r","context":[["var r = JSON.null",225],["return l > r",201],["return l == r",164],["let r = scheduler.createHotObservable([",236],["return r",1197],["case let (l?, r?):",635],["return l < r",330],["XCTAssertEqual(r.subscriptions, [",197],["subscript (r: Range<Int>) -> String {",166],["var r: CGFloat = 0",132]],"useCount":18112},{"word":"range","context":[["if let range = range {",88],["if range.length == 0 {",91],["if let range = range {",88],["res.setAttributes(attrs, range: range)",76],["assert(indexIsValidForRow(row, column: column), \"Index out of range\")",76],["res.setAttributes(attrs, range: range)",76],["/// No range or overflow checking occurs.",120],["if range.location != NSNotFound {",123],["return range",123],["func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {",158]],"useCount":14573},{"word":"rawValue","context":[["public init(rawValue: UInt) { self.rawValue = rawValue }",331],["init?(rawValue: Int) {",291],["var rawValue: Int {",293],["switch rawValue {",622],["let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))",553],["self.rawValue = rawValue",522],["return self.rawValue",288],["self.rawValue = rawValue",522],["public init(rawValue: UInt) { self.rawValue = rawValue }",331],["public init(rawValue: UInt) { self.rawValue = rawValue }",331]],"useCount":25869},{"word":"rdar","context":[["// <rdar://problem/16473062> weak and unowned variables of metatypes are rejected",38],["// <rdar://problem/19622485> 'Builtin.Int64' leaks into diagnostics",40],["// <rdar://problem/18940198>",40],["// rdar://19605567",40],["// BLOCKED: <rdar://problem/13822406>",42],["// FIXME: <rdar://problem/21885650> Create reusable RingBuffer<T>",44],["// (<rdar://problem/20715009> Implement recursive protocol",62],["// <rdar://problem/16811736> Optional tuples are broken as optionals regarding == comparison",36],["// FIXME: we should print the non-API param name rdar://20962472",80],["// FIXME: rdar://problem/19648117 Needs splitting objc parts out",106]],"useCount":8284},{"word":"re","context":[["// We're the new top bar in the stack, so make sure we ignore ourself",52],["// If we're showing an arrow popup, set the anchor to the long press location.",52],["// Remake constraints even if we're already showing the home controller.",58],["// Here we're just printing out the preset so it can be copy and pasted into code",65],["_errHandler.reportError(self, re)",259],["try _errHandler.recover(self, re)",259],["catch ANTLRException.Recognition(let re) {",259],["_localctx.exception = re",259],["// Return NO if you do not want the item to be re-orderable.",525],["// Return false if you do not want the item to be re-orderable.",1078]],"useCount":5723},{"word":"reader","context":[["var _currentNodeType = xmlTextReaderNodeType(reader)",211],["_currentNodeType = xmlTextReaderNodeType(reader)",919],["_readerOk = xmlTextReaderRead(reader)",809],["if let elementValue = xmlTextReaderConstValue(reader) {",354],["var _currentXmlDept = xmlTextReaderDepth(reader)",211],["if let _currentElementNameXmlChar = xmlTextReaderConstLocalName(reader) {",211],["let _complexTypeXmlDept = xmlTextReaderDepth(reader)",211],["_currentXmlDept = xmlTextReaderDepth(reader)",211],["init(_ reader: xmlTextReaderPtr) {",186],["var _readerOk = xmlTextReaderRead(reader)",186]],"useCount":6465},{"word":"realm","context":[["let realm = try Realm()",191],["realm.commitWrite()",200],["let realm = Realm()",308],["realm.write {",478],["realm.commitWriteTransaction()",502],["realm.beginWrite()",565],["let realm = realmWithTestPath()",580],["realm.beginWriteTransaction()",634],["try! realm.write {",794],["let realm = try! Realm()",1025]],"useCount":13729},{"word":"recognizer","context":[["@objc private func tapGestureRecognized(recognizer: UITapGestureRecognizer)",66],["let h = getHighlightByTouchPoint(recognizer.locationInView(self))",65],["if recognizer.state == .Began {",72],["else if (recognizer.state == UIGestureRecognizerState.Changed)",86],["if (recognizer.state == UIGestureRecognizerState.Began)",86],["var location = recognizer.locationInView(self)",93],["if recognizer.state == .Ended {",97],["if (recognizer.state == UIGestureRecognizerState.Ended)",113],["if recognizer.state == UIGestureRecognizerState.Began {",122],["switch recognizer.state {",208]],"useCount":4323},{"word":"record","context":[["profile.readingList?.updateRecord(record, unread: false) // TODO Check result, can this fail?",54],["if let successValue = result.successValue, record = successValue {",214],["if let record = record {",64],["if let record = record {",64],["audioRecorder.record()",70],["try record.save(db)",63],["try record.delete(db)",61],["return record",89],["readerModeBar.unread = record.unread",54],["try record.insert(db)",249]],"useCount":4520},{"word":"recreated","context":[["// Dispose of any resources that can be recreated",53],["// Dispose of any resources that can be recreated.",24097],["//        // Dispose of any resources that can be recreated.",27]],"useCount":24177},{"word":"rect","context":[["override func drawRect(rect: CGRect) {",2236],["UIGraphicsBeginImageContext(rect.size)",266],["override public func drawRect(rect: CGRect) {",248],["// multiply the height of the rect with the phase",243],["UIRectFill(rect)",184],["public override func drawRect(rect: CGRect) {",225],["return rect",290],["override func draw(_ rect: CGRect) {",340],["CGContextFillRect(context, rect)",426],["super.drawRect(rect)",629]],"useCount":14390},{"word":"red","context":[["red   = CGFloat((hexValue & 0xFF0000) >> 16)   / 255.0",123],["red   = CGFloat((hexValue & 0xF00) >> 8)       / 15.0",123],["var red:   CGFloat = 0.0",125],["var red: CGFloat = 0",125],["red   = CGFloat((hexValue & 0xFF000000) >> 24) / 255.0",153],["self.init(red:red, green:green, blue:blue, alpha:alpha)",179],["self.init(red:red, green:green, blue:blue, alpha:alpha)",179],["red: CGFloat((rgbValue & 0xFF0000) >> 16) / 255.0,",191],["self.init(red: red, green: green, blue: blue, alpha: alpha)",216],["self.init(red: red, green: green, blue: blue, alpha: alpha)",216]],"useCount":11164},{"word":"reference","context":[["/// - parameter axis: - which axis should be used as a reference for the y-axis",120],["// CHECK-32: Type reference:",195],["// CHECK-64: Type reference:",196],["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["// expected-note@-2 {{use 'Swift.' to reference the global function}} {{5-5=Swift.}}",74],["/// :param: axis - which axis should be used as a reference for the y-axis",71],["/// array of Highlight objects that reference the highlighted slices in the chart",51],["/// This is a class - we require reference semantics to keep track",50],["// I got really weird EXC_BAD_ACCESS errors on a non-null reference when I made this a getter.",48],["// Test collections using a reference type as element.",48]],"useCount":4609},{"word":"refreshControl","context":[["self.refreshControl?.endRefreshing()",597],["self.refreshControl.endRefreshing()",336],["refreshControl = UIRefreshControl()",316],["self.refreshControl = UIRefreshControl()",229],["refreshControl.endRefreshing()",216],["let refreshControl = UIRefreshControl()",204],["refreshControl?.endRefreshing()",151],["self.refreshControl!.endRefreshing()",109],["refreshControl?.beginRefreshing()",114],["var refreshControl: UIRefreshControl!",136]],"useCount":4184},{"word":"related","context":[["* This material, including documentation and any related",30],["// Set scrollview related constraints",14],["parameters[\"related\"] = related!",15],["parameters[\"related\"] = related!",15],["//        // Use XCTAssert and related functions to verify your tests produce the correct results.",44],["// <rdar://problem/23550816> QoI: Poor diagnostic in argument list of \"print\" (varargs related)",20],["* The monolithic class that manages the inter-related history etc. tables.",20],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["/** link to related entities */",16],["// Cancel any pending/in-progress animations related to the progress bar",21]],"useCount":8951},{"word":"reloadData","context":[["collectionView?.reloadData()",298],["func reloadData() {",303],["self.collectionView?.reloadData()",370],["self.reloadData()",467],["reloadData()",615],["self.collectionView.reloadData()",643],["collectionView.reloadData()",765],["tableView.reloadData()",3844],["self.tableView.reloadData()",6148],["self.tableView?.reloadData()",333]],"useCount":17161},{"word":"removeAll","context":[["s2.removeAll()",68],["circleColors.removeAll(keepCapacity: false)",53],["d2.removeAll()",72],["d.removeAll(keepingCapacity: true)",78],["public mutating func removeAll() {",82],["cache.removeAll()",89],["func removeAll() {",91],["d.removeAll()",147],["public func removeAll() {",153],["s.removeAll()",173]],"useCount":4365},{"word":"removeFromSuperview","context":[["bar.removeFromSuperview()",118],["imageView.removeFromSuperview()",94],["view.removeFromSuperview()",713],["self.removeFromSuperview()",654],["self.view.removeFromSuperview()",257],["subview.removeFromSuperview()",240],["v.removeFromSuperview()",188],["oldValue?.removeFromSuperview()",104],["webView.removeFromSuperview()",102],["fromView.removeFromSuperview()",93]],"useCount":6214},{"word":"removeObserver","context":[["notificationCenter.removeObserver(self)",64],["NSNotificationCenter.defaultCenter().removeObserver(self, name: UIApplicationDidBecomeActiveNotification, object: nil)",73],["NSNotificationCenter.defaultCenter().removeObserver(",77],["NSNotificationCenter.defaultCenter().removeObserver(observer)",88],["NSNotificationCenter.defaultCenter().removeObserver(self, name: NotificationFirefoxAccountChanged, object: nil)",106],["NSNotificationCenter.defaultCenter().removeObserver(self,",137],["NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillShowNotification, object: nil)",142],["NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillHideNotification, object: nil)",154],["NotificationCenter.default.removeObserver(self)",637],["NSNotificationCenter.defaultCenter().removeObserver(self)",2256]],"useCount":5805},{"word":"renamed","context":[["@availability(*, unavailable, renamed=\"JSON\")",48],["@availability(*, unavailable, renamed=\"uInt8Value\")",46],["func foo(element: T) {} // expected-error {{'T' has been renamed to 'Element'}} {{21-22=Element}}",112],["@availability(*, unavailable, renamed=\"intValue\")",92],["@availability(*, unavailable, renamed=\"uIntValue\")",92],["@availability(*, unavailable, renamed=\"uInt\")",92],["@availability(*, unavailable, renamed=\"int\")",92],["// Allow alerts to be closed/renamed in a chainable manner",62],["@available(*, unavailable, renamed=\"Element\")",60],["@available(*, unavailable, renamed=\"null\")",54]],"useCount":4106},{"word":"representing","context":[["/// the object representing the labels on the x-axis",62],["///   - table: A query representing the other table.",52],["//  of the authors and should not be interpreted as representing official policies,",44],["/// the object representing the labels on the y-axis, this object is prepared",41],["/// - returns: the object representing all x-labels, this method can be used to",35],["- returns: The newly created date representing the first second of the",34],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["- returns: Object representing subscription.",32],["/// - Returns: A `UnicodeDecodingResult` instance, representing the next",32]],"useCount":6851},{"word":"request","context":[["request.HTTPMethod = \"POST\"",783],["guard let vw0 = request.parameters[\"w0\"] else {",761],[":returns: The request.",663],["Adds a handler to be called once the request has finished.",657],["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["guard let vw1 = request.parameters[\"w1\"] else {",539],["return request",1498],["- returns: The request.",495],["return client.request(route, serverArgs: serverArgs)",478],["XCTAssertNotNil(request, \"request should not be nil\")",457]],"useCount":63050},{"word":"required","context":[["required public init(coder aDecoder: NSCoder) {",1034],["public required init(json:NSDictionary?) {",604],["public required init(coder aDecoder: NSCoder) {",841],["required init?(coder: NSCoder) {",890],["required override public init () {",919],["required public init() {",1130],["public required init?(coder aDecoder: NSCoder) {",1812],["required public init?(coder aDecoder: NSCoder) {",3041],["required init(coder aDecoder: NSCoder) {",5213],["required init?(coder aDecoder: NSCoder) {",11632]],"useCount":42467},{"word":"res","context":[["XCTAssertEqual(res.events, messages)",183],["XCTAssertEqual(res.messages, messages)",195],["XCTAssertEqual(res.events, correctMessages)",215],["XCTAssertEqual(res.messages, correct)",311],["XCTAssertEqual(res.messages, correctMessages)",313],["let res = scheduler.start { () -> Observable<Int> in",606],["return res",1241],["XCTAssertEqual(res.events, [",1264],["XCTAssertEqual(res.messages, [",1610],["let res = scheduler.start {",2900]],"useCount":14646},{"word":"resources","context":[["for resource in resources {",37],["/// resources or canceling work.",24],["// If resources weren't disposed before view controller is being deallocated, signup alert view",17],["for resource in resources.values {",17],["Unsubscribe all observers and release resources.",29],["/// resources cleaned up.",28],["//        // Dispose of any resources that can be recreated.",27],["// Dispose of any resources that can be recreated",53],["baseDir: .resources)",70],["// Dispose of any resources that can be recreated.",24097]],"useCount":24551},{"word":"response","context":[["json, response in",1297],[".response { _, _, _, responseError in",389],["var response: NSHTTPURLResponse?",413],["XCTAssertNotNil(response, \"response should not be nil\")",433],["XCTAssertNotNil(response, \"response should not be nil\")",433],["response = responseResponse",457],["response in",573],[".responseJSON { response in",600],["switch response.result {",1121],["return response",511]],"useCount":49064},{"word":"result","context":[["expect(result).to(beNil())",465],["return result;",473],["print(result)",600],["var result = \"\"",675],["return result!",730],["switch response.result {",1121],["switch result {",3653],["let result = subject.toBytes()",363],["var result: [Int] = []",446],["return result",13741]],"useCount":93297},{"word":"results","context":[["let results: [Result<Int, TestError>] = [",92],["let results = subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {",291],["for result in results {",257],["var results = [Double](count: x.count, repeatedValue: 0.0)",202],["var results = [Float](count: x.count, repeatedValue: 0.0)",182],["// Execute the fetch request, and cast the results to an array of  objects",120],["if results.count > 0 {",118],["// MARK: - Fetched results controller",94],["return results",1545],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697]],"useCount":20841},{"word":"resume","context":[["public func resume() {",195],[".resume()",184],["task.resume()",3336],["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["}.resume()",512],["}).resume()",381],["downloadTask.resume()",113],["dataTask.resume()",351],["request.resume()",322],["/// If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",196]],"useCount":7679},{"word":"ret","context":[["return ret",1809],["// CHECK-NEXT: ret void",87],["VOHelper.setJSONArrayValue(ret, typedArray:self.items, key:\"items\")",89],["VOHelper.setJSONValue(ret, value:self.etag, key:\"etag\")",94],["var ret = \"\"",101],["// CHECK: ret",106],["VOHelper.setJSONValue(ret, value:self.id, key:\"id\")",127],["VOHelper.setJSONValue(ret, value:self.kind, key:\"kind\")",205],["VOHelper.setJSONValue(ret, value:self.jclsName, key:\"jclsName\")",604],["let ret : NSMutableDictionary = NSMutableDictionary()",605]],"useCount":6563},{"word":"return","context":[["return",84827],["return true",72803],["return nil",68582],["return false",45770],["return self",36231],["return cell",19541],["return result",13741],["return 0",12142],["return [",5317],["return 1",11151]],"useCount":950950},{"word":"returned","context":[["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642],["// The cell that is returned must be retrieved from a call to -dequeueReusableCellWithReuseIdentifier:forIndexPath:",62],["Possible errors returned by this function are:",256],["/// If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",196],["/// - Returns: The first value of the first row returned.",87],["XCTAssertTrue(returnedConstraints.contains(expected), \"The applied constraint should be returned to the caller\")",84],["XCTAssertTrue(contains(returnedConstraints, expected), \"The applied constraint should be returned to the caller\")",84],["/// the value returned by `_cVarArgEncoding`.",82],["XCTAssertEqual(returnedConstraints.count, 2, \"There should be two total constraints returned\")",68],["XCTFail(\"Value returned successfully when it shouldn't have\")",66]],"useCount":6658},{"word":"returns","context":[["- returns: The created upload request.",289],[":returns: The request.",663],["- returns: The NSColor object",1501],[":returns: The UIColor object",2155],[":returns: The NSColor object",2155],["- returns: The request.",495],[":returns: The created upload request.",408],["- returns: A task represents the retrieving process.",401],["- returns: The created JSON",385],["- returns:",327]],"useCount":40373},{"word":"reuseIdentifier","context":[["super.init(style: style, reuseIdentifier: reuseIdentifier)",2273],["super.init(style: style, reuseIdentifier: reuseIdentifier)",2273],["override init(style: UITableViewCellStyle, reuseIdentifier: String?) {",1654],["let cell = tableView.dequeueReusableCellWithIdentifier(\"reuseIdentifier\", forIndexPath: indexPath)",556],["required public init(style: UITableViewCellStyle, reuseIdentifier: String?) {",331],["super.init(reuseIdentifier: reuseIdentifier)",174],["super.init(reuseIdentifier: reuseIdentifier)",174],["private let reuseIdentifier = \"Cell\"",167],["override init(reuseIdentifier: String?) {",142],["public override init(style: UITableViewCellStyle, reuseIdentifier: String?) {",167]],"useCount":11260},{"word":"rhs","context":[["return lhs.value == rhs.value",333],["return !(lhs == rhs)",410],["return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",543],["return infix(lhs, rhs)",672],["switch (lhs, rhs) {",1737],["switch (lhs.isBool, rhs.isBool) {",720],["switch (lhs.type, rhs.type) {",965],["var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)",1443],["if (lhs === rhs) {",1444],["fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",900]],"useCount":37946},{"word":"right","context":[["case .right:",327],["left = left + right",150],["case right",183],["make.left.right.bottom.equalTo(self.view)",186],["if right.mappingType == MappingType.FromJSON {",195],["let (map, transform) = right",264],["associativity right",286],["make.left.right.equalTo(self.view)",345],["return left == right",319],["barRect.size.width = right - left",152]],"useCount":16811},{"word":"rootViewController","context":[["super.init(rootViewController: rootViewController)",66],["let splitViewController = self.window!.rootViewController as! UISplitViewController",295],["let nav = UINavigationController(rootViewController: vc)",98],["window?.rootViewController = navigationController",88],["let navigationController = UINavigationController(rootViewController: viewController)",75],["window?.rootViewController = vc",72],["window?.rootViewController = ViewController()",69],["super.init(rootViewController: rootViewController)",66],["let splitViewController = self.window!.rootViewController as UISplitViewController",54],["let navController = UINavigationController(rootViewController: settingsNavigationController)",51]],"useCount":4055},{"word":"row","context":[["let row = indexPath.row",323],["section.addFormRow(row)",682],["if indexPath.row == 0 {",807],["switch indexPath.row {",821],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {",262],["let row = indexPath.row",323],["func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {",379],["// Delete the row from the data source",1654]],"useCount":30812},{"word":"rows","context":[["self.rows = rows",274],["return rows",246],["// #warning Incomplete implementation, return the number of rows",1124],["for row in rows {",145],["return rows + [",130],["self.rows = rows",274],["return row >= 0 && row < rows && column >= 0 && column < columns",61],["rows.append(row)",100],["let rows = super.resultRowsForSection(section)",112],["// Return the number of rows in the section.",763]],"useCount":7168},{"word":"run","context":[["testScheduler.run()",398],["// RUN: %target-run-simple-swift",724],["func run() -> Disposable {",459],["// RUN: %target-run-simple-swift | FileCheck %s",421],["return sink.run()",247],["func run() {",199],["scheduler.run()",172],["sink.disposable = sink.run()",146],["public func run() {",94],["// RUN: %target-run-simple-swift | %FileCheck %s",132]],"useCount":9755},{"word":"s","context":[["return s",1209],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["//  These example codes are written for O'Reilly's iOS 8 Swift Programming Cookbook",504],["expectTrue(isNativeSet(s))",493],["// RUN: not %target-swift-frontend %s -parse",10778],["// RUN: not %target-swift-frontend %s -typecheck",5223],["// RUN: not --crash %target-swift-frontend %s -parse",1830],["// Saves changes in the application's managed object context before the application terminates.",1424],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["dict[NSLocalizedDescriptionKey] = \"Failed to initialize the application's saved data\"",1439]],"useCount":84917},{"word":"s1","context":[["let identity1 = unsafeBitCast(s1, to: Int.self)",159],["_fixLifetime(s1)",187],["expectEqual(s1, s2)",238],["var s2 = s1",291],["let s1 = Set([1010, 2020, 3030])",316],["expectEqual(3, s1.count)",323],["expectEqual(identity1, s1._rawIdentifier())",383],["expectEqual(identity1, unsafeBitCast(s1, Int.self))",385],["let s1 = Set([1010, 2020, 3030, 4040, 5050, 6060])",561],["expectEqual(identity1, unsafeBitCast(s1, to: Int.self))",539]],"useCount":11431},{"word":"s2","context":[["expectEqual(0, s2.count)",119],["expectEqual(identity1, unsafeBitCast(s2, to: Int.self))",105],["var identity2 = unsafeBitCast(s2, to: Int.self)",91],["expectTrue(isNativeSet(s2))",136],["let s2 = Set([4040, 5050, 6060])",170],["_fixLifetime(s2)",188],["let s2 = AnySequence([1010, 2020, 3030])",221],["expectEqual(s1, s2)",238],["let s2 = Set([1010, 2020, 3030])",272],["var s2 = s1",291]],"useCount":6038},{"word":"same","context":[["presentSignInViewController() // TODO UX Right now the flow for sign in and create account is the same",102],["/// - Parameter other: A set of the same type as the current set.",102],["///   different invocations of the same program.  Do not persist the",101],["the Realm instance with the same primary key value, the object is inserted. Otherwise,",97],["/// containing the same number of elements as `self`, return it.",76],["/// different invocations of the same program.  Do not persist the",70],["/// in the same order.",115],["1: .same(proto: \"a\", swift: \"a\"),",231],["/// Function to start, play, or activate the node, all do the same thing",530],["The same as: let name = json[9][\"list\"][\"person\"][\"name\"]",284]],"useCount":6874},{"word":"save","context":[["func save() {",309],["try context.save()",413],["print(\"Failure to save context: \\(error)\")",133],["save()",392],["if moc.hasChanges && !moc.save(&error) {",544],["try managedObjectContext.save()",1098],["try managedContext.save()",137],["XCTAssertTrue(success, \"Cannot save the Graph: \\(error)\")",145],["try self.managedObjectContext.save()",183],["try moc.save()",190]],"useCount":7048},{"word":"scale","context":[["let scaleAnimation = CAKeyframeAnimation(keyPath: \"transform.scale\")",109],["let scale = UIScreen.mainScreen().scale",181],["/* Set the scale mode to scale to fit the window */",363],["let scale = UIScreen.mainScreen().scale",181],["/* Set the scale mode to scale to fit the window */",363],["UIGraphicsBeginImageContextWithOptions(size, false, scale)",91],["self.scale = scale",89],["self.scale = scale",89],["/// Zooms in or out by the given scale factor. x and y are the coordinates",64],["/// Zooms by the specified scale factor to the specified values on the specified axis.",63]],"useCount":7131},{"word":"scheduler","context":[["let e0 = scheduler.createHotObservable([",667],["let res = scheduler.start { () -> Observable<Int> in",606],["let scheduler = TestScheduler(initialClock: 0)",4898],["let res = scheduler.start {",2900],["let xs = scheduler.createHotObservable([",2361],["let e1 = scheduler.createHotObservable([",667],["scheduler.advance()",309],["scheduler.schedule {",324],["let e2 = scheduler.createHotObservable([",336],["scheduler.start()",331]],"useCount":28140},{"word":"scrollView","context":[["public func scrollViewDidScroll(scrollView: UIScrollView) {",261],["func scrollViewWillBeginDragging(scrollView: UIScrollView) {",257],["func scrollViewDidScroll(_ scrollView: UIScrollView) {",204],["view.addSubview(scrollView)",218],["func scrollViewDidScroll(scrollView: UIScrollView) {",876],["@IBOutlet weak var scrollView: UIScrollView!",531],["scrollView.delegate = self",488],["func scrollViewDidEndDecelerating(scrollView: UIScrollView) {",412],["scrollView.showsHorizontalScrollIndicator = false",295],["func viewForZoomingInScrollView(scrollView: UIScrollView) -> UIView? {",263]],"useCount":18148},{"word":"searchBar","context":[["func searchBarTextDidEndEditing(searchBar: UISearchBar) {",110],["searchBar.resignFirstResponder()",512],["func searchBarSearchButtonClicked(searchBar: UISearchBar) {",365],["func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {",274],["func searchBar(searchBar: UISearchBar, textDidChange searchText: String) {",274],["searchController.searchBar.sizeToFit()",106],["@IBOutlet weak var searchBar: UISearchBar!",255],["func searchBarTextDidBeginEditing(searchBar: UISearchBar) {",116],["func searchBarCancelButtonClicked(searchBar: UISearchBar) {",236],["searchBar.delegate = self",221]],"useCount":5131},{"word":"section","context":[["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["if indexPath.section == 0 {",706],["override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",762],["// Return the number of rows in the section.",763],["switch section {",779],["if section == 0 {",822],["func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",858],["override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",1013],["func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {",1580],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933]],"useCount":42187},{"word":"sections","context":[["return self.fetchedResultsController.sections?.count ?? 0",103],["let sectionInfo = self.fetchedResultsController.sections![section]",70],["// #warning Incomplete implementation, return the number of sections",1130],["// Return the number of sections.",762],["return sections.count",266],["sections.append(section)",77],["// nil for section name key path means \"no sections\".",92],["self.sections = sections",96],["self.sections = sections",96],["for section in sections {",117]],"useCount":5347},{"word":"segue","context":[["super.prepareForSegue(segue, sender: sender)",169],["override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) {",305],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)",269],["if let identifier = segue.identifier {",266],["override func prepare(for segue: UIStoryboardSegue, sender: Any?) {",958],["if segue.identifier == \"showDetail\" {",478],["// Get the new view controller using [segue destinationViewController].",848],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {",364],["// Get the new view controller using segue.destinationViewController.",6255],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",10988]],"useCount":23741},{"word":"selected","context":[["// Uncomment this method to specify if the specified item should be selected",146],["sender.selected = !sender.selected",135],["// Configure the view for the selected state",2954],["override func setSelected(_ selected: Bool, animated: Bool) {",412],["if selected {",282],["sender.selected = true",175],["override var selected: Bool {",154],["override func setSelected(selected: Bool, animated: Bool) {",3113],["super.setSelected(selected, animated: animated)",3634],["// Pass the selected object to the new view controller.",7085]],"useCount":22798},{"word":"selector","context":[["addButton(\"Drums\", action: #selector(startDrumLoop))",75],["addButton(\"Mix\", action: #selector(startMixLoop))",75],["addButton(\"Guitar\", action: #selector(startGuitarLoop))",75],["addButton(\"Lead\", action: #selector(startLeadLoop))",75],["//  Create a done button to show on keyboard to resign it. Adding a selector to resign it.",77],["_selector = selector",84],["switch selector {",94],["addButton(\"Stop\", action: #selector(stop))",149],["self.perform(#selector(hide), with: self, afterDelay: 3)",162],["@param target Target object for selector.",370]],"useCount":5318},{"word":"self","context":[["switch self {",19241],["switch self.type {",2399],["return self",36231],["self.measureBlock() {",9282],["self.tableView.reloadData()",6148],["self.init()",4895],["self.measureBlock {",4681],["self.name = name",4462],["self.dismissViewControllerAnimated(true, completion: nil)",3087],["self.value = value",2495]],"useCount":730870},{"word":"sell","context":[["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174],["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",67],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",84],["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133]],"useCount":19822},{"word":"send","context":[["return (true,\"send success\")",54],["/// Creates a producer for a Signal that will immediately send one value",63],["innerObserver.send(value: 4)",64],["self.commandDelegate!.send(pluginResult, callbackId:command.callbackId)",71],[":param: parameters The parameters are HTTP parameters you would like to send.",131],["return requestSender.send(request, withResponseHandler: handler)",72],["observer.send(value: 3)",78],["tracker.send(builder.build() as [NSObject : AnyObject])",119],["observer.send(value: 2)",227],["observer.send(value: 1)",292]],"useCount":5450},{"word":"sendNext","context":[["innerObserver.sendNext(4)",224],["observer.sendNext(4)",157],["sendNext(sink, 2)",151],["sendNext(observer, value)",133],["observer.sendNext(0)",184],["sendNext(sink, 1)",195],["observer.sendNext(value)",224],["observer.sendNext(1)",984],["observer.sendNext(2)",784],["observer.sendNext(3)",250]],"useCount":7119},{"word":"sender","context":[["sender.selected = true",175],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {",10988],["super.prepareForSegue(segue, sender: sender)",169],["override func prepare(for segue: UIStoryboardSegue, sender: Any?) {",958],["switch sender.selectedSegmentIndex {",166],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {",364],["super.prepareForSegue(segue, sender: sender)",169],["func insertNewObject(sender: AnyObject) {",213],["override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)",269],["override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) {",305]],"useCount":27367},{"word":"sequence","context":[["sequence: [1, 1],",156],["self.sequence = sequence",288],["self.sequence = sequence",288],["/// Return a *generator* over the elements of this *sequence*.",179],["- parameter source: Observable sequence of items.",111],["sequence: [1],",156],["public let sequence: [Int]",156],["sequence: [],",156],["sequence: [1010, 2020, 3030],",260],["sequence: [1, 2],",234]],"useCount":11971},{"word":"serialize","context":[["\"url\": Serialization._StringSerializer.serialize(value.url),",61],["\"cursor\": NullableSerializer(Serialization._StringSerializer).serialize(value.cursor),",62],["var d = [\"access_error\": Sharing.SharedFolderAccessErrorSerializer().serialize(arg)]",72],["\"shared_folder_id\": Serialization._StringSerializer.serialize(value.sharedFolderId),",85],["\"cursor\": Serialization._StringSerializer.serialize(value.cursor),",85],["var d = [\"path\": Files.LookupErrorSerializer().serialize(arg)]",114],["\"name\": Serialization._StringSerializer.serialize(value.name),",114],["\"path\": Serialization._StringSerializer.serialize(value.path),",181],["// StdlibUnittest with -sil-serialize-all.",343],["\"account_id\": Serialization._StringSerializer.serialize(value.accountId),",52]],"useCount":4086},{"word":"serialize_size","context":[["memoizedSerializedSize = serialize_size",1447],["var serialize_size:Int32 = memoizedSerializedSize",1447],["return serialize_size",2894],["serialize_size += 1",194],["serialize_size += 2",165],["serialize_size += extensionsSerializedSize()",141],["serialize_size += name.computeStringSize(1)",66],["serialize_size += unknownFields.serializedSize()",1433],["serialize_size = 0",1447],["if serialize_size != -1 {",1447]],"useCount":11992},{"word":"server","context":[["/// The request sent or to be sent to the server.",86],["self.server = server",126],["self.server = server",126],["/// The response received from the server, if any.",86],["XCTAssertFalse(serverTrustIsValid, \"server trust should not pass evaluation\")",315],["XCTAssertTrue(serverTrustIsValid, \"server trust should pass evaluation\")",495],["server.start()",59],["server.stop()",60],["if let domain = server.host {",69],["return server",71]],"useCount":6255},{"word":"service","context":[["///   - serviceType: The service type to resolve.",233],["let keychain = Keychain(service: \"Twitter\")",152],["self.service = service",135],["///  - attrs: the optional extra attributes to set before calling the remote service.",422],["self.service = service",135],["/// - Returns: The resolved service type instance, or nil if no registration for the service type",111],["/// - Returns: The resolved service type instance, or nil if no registration for the service type,",111],["/// - Returns: The resolved service type instance, or nil if no registration for the service type",111],["/// - Returns: The resolved service type instance, or nil if no registration for the service type,",111],["///   - factory:     The closure to specify how the service type is resolved with the dependencies of the type.",69]],"useCount":4646},{"word":"session","context":[["session: NSURLSession,",547],["self.session = session",435],["let session = NSURLSession.sharedSession()",820],["self.session = session",435],["_ session: URLSession,",234],["session,",228],["session.startRunning()",152],["public let session: NSURLSession",153],["return session",179],["session.delegate = self",200]],"useCount":19945},{"word":"set","context":[["set {}",1672],["set(value) {",1966],["set",2277],["set (value) {",4929],["set {",25702],["set(newValue) {",1289],["set{",1048],["@objc set {}",810],["set (array) {",635],["set { }",531]],"useCount":73271},{"word":"setNeedsDisplay","context":[["/// This also refreshes the chart by calling setNeedsDisplay().",207],["trackLayer.setNeedsDisplay()",78],["progressLayer.setNeedsDisplay()",55],["self.view.setNeedsDisplay()",53],["didSet { setNeedsDisplay() }",212],["setNeedsDisplay();",247],["self.setNeedsDisplay()",1269],["setNeedsDisplay()",3228],["lowerThumbLayer.setNeedsDisplay()",49],["/// Clears the chart from all data (sets it to null) and refreshes it (by calling setNeedsDisplay()).",51]],"useCount":6055},{"word":"setSelected","context":[["cell.setSelected(false, animated: false)",17],["override public func setSelected(selected: Bool, animated: Bool) {",57],["override func setSelected(_ selected: Bool, animated: Bool) {",412],["override func setSelected(selected: Bool, animated: Bool) {",3113],["//    override func setSelected(selected: Bool, animated: Bool) {",13],["//        super.setSelected(selected, animated: animated)",12],["override func setSelected(selected: Bool, animated: Bool)",53],["super.setSelected(selected, animated: animated)",3634],["cell.setSelected(false, animated: true)",22],["public override func setSelected(selected: Bool, animated: Bool) {",44]],"useCount":7411},{"word":"setUp","context":[["override func setUp()",217],["private func setUp() {",53],["For now nothing to setUp",57],["setUp()",194],["override class func setUp() {",99],["func setUp() {",72],["//        super.setUp()",62],["//    override func setUp() {",61],["super.setUp()",27504],["override func setUp() {",27985]],"useCount":56594},{"word":"setValue","context":[["setValue(newValue, forKey: \"inputImage\")",316],["override func setValue(value: AnyObject?, forUndefinedKey key: String) {",288],["request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",186],["super.setValue(value, forKey: key)",177],["override func setValue(value: AnyObject?, forUndefinedKey key: String) {}",161],["self.setValue(v, forKey: keyName)",158],["setValue(newValue, forKey:\"inputImage\")",158],["mutableURLRequest.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",116],["override func setValue(value: AnyObject?, forKey key: String) {",116],["request.setValue(\"application/json\", forHTTPHeaderField: \"Accept\")",108]],"useCount":6586},{"word":"settings","context":[["init(settings: SettingsTableViewController) {",287],["settings += [",93],["self.profile = settings.profile",181],["settings.tableView.reloadData()",178],["application.registerUserNotificationSettings(settings)",169],["UIApplication.sharedApplication().registerUserNotificationSettings(settings)",116],["let settings = Settings.instance",215],["self.settings = settings",283],["self.settings = settings",283],["let section = settings[section]",90]],"useCount":5744},{"word":"setup","context":[["func setup() {",810],["setup()",2783],["// Do any additional setup after loading the view.",6596],["// Do any additional setup after loading the view, typically from a nib.",9879],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["private func setup() {",807],["self.setup()",708],["override func setup() {",580],["super.setup()",527],["public override func setup() {",308]],"useCount":46425},{"word":"shared","context":[["let session = URLSession.shared",143],["/// The ID for the shared folder.",69],["Creates an upload request using the shared manager instance for the specified method, URL string, and stream.",64],["Creates an upload request using the shared manager instance for the specified URL request and file.",64],["UIApplication.shared.isNetworkActivityIndicatorVisible = false",151],["Creates a download request using the shared manager instance for the specified URL request.",72],["UIApplication.shared.openURL(url)",96],["let appDelegate = UIApplication.shared.delegate as! AppDelegate",92],["Creates a download request using the shared manager instance for the specified method and URL string.",88],["UIApplication.shared.isNetworkActivityIndicatorVisible = true",99]],"useCount":4757},{"word":"sharedApplication","context":[["UIApplication.sharedApplication().endIgnoringInteractionEvents()",130],["UIApplication.sharedApplication().networkActivityIndicatorVisible = false",944],["UIApplication.sharedApplication().networkActivityIndicatorVisible = true",721],["let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate",648],["UIApplication.sharedApplication().openURL(url)",578],["let appDelegate = NSApplication.sharedApplication().delegate as! AppDelegate",133],["UIApplication.sharedApplication().openURL(NSURL(string: UIApplicationOpenSettingsURLString)!)",135],["NSApplication.sharedApplication().terminate(self)",146],["UIApplication.sharedApplication().scheduleLocalNotification(notification)",161],["UIApplication.sharedApplication().statusBarStyle = .LightContent",183]],"useCount":9834},{"word":"sharedInstance","context":[["if let errMsg = String.fromCString(sqlite3_errmsg(SQLiteDB.sharedInstance.sqliteDB)) {",112],["let tracker = GAI.sharedInstance().defaultTracker",153],["dispatch_sync(SQLiteDB.sharedInstance.queue) {",159],["let logger : ILogging? = AppRegistryBridge.sharedInstance.getLoggingBridge()",182],["SQLiteDB.sharedInstance.close()",301],["try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryPlayback)",92],["if let err = SQLiteDB.sharedInstance.open() {",241],["let context = ContextManager.sharedInstance().mainContext",94],["let db = ALBNoSQLDB.sharedInstance",95],["let audioSession = AVAudioSession.sharedInstance()",108]],"useCount":7755},{"word":"should","context":[["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["XCTAssertNotNil(data, \"data should not be nil\")",273],["XCTAssertNotNil(error, \"error should not be nil\")",291],["XCTAssertFalse(serverTrustIsValid, \"server trust should not pass evaluation\")",315],["XCTFail(\"error should not be nil\")",347],["XCTAssertNotNil(response, \"response should not be nil\")",433],["XCTAssertNotNil(request, \"request should not be nil\")",457],["XCTAssertTrue(serverTrustIsValid, \"server trust should pass evaluation\")",495],["XCTAssertNil(error, \"error should be nil\")",818],["it(\"should have the correct raw value\") {",870]],"useCount":41032},{"word":"show","context":[["alertView.show()",697],["@param shouldShowPlaceholder A boolean to indicate whether to show textField placeholder on IQToolbar'.",110],["alert.show()",1040],["SVProgressHUD.show()",391],["func show() {",200],["if show {",144],["@param titleText text to show as title in IQToolbar'.",140],["auk.show(image: image)",115],["show()",105],["public func show() {",105]],"useCount":6912},{"word":"signal","context":[["signal.observe { event in",341],["return signal",296],["expect(signal).to(beNil())",130],["var signal: Signal<Int, NoError>!",136],["self.startWithSignal { signal, signalDisposable in",142],["return { signal in",193],["let (signal, observer) = Signal<Int, NoError>.pipe()",206],["semaphore.signal()",222],["signal",227],["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250]],"useCount":14084},{"word":"sil","context":[["// StdlibUnittest with -sil-serialize-all.",343],["// CHECK-LABEL: sil hidden @_TF8builtins8isUnique",85],["@_semantics(\"optimize.sil.never\")",79],["// CHECK-LABEL: sil hidden @_TF8builtins16isUniqueOrPinned",68],["// RUN: %target-swift-frontend -O -emit-sil %s | FileCheck %s",48],["// CHECK-LABEL: sil hidden @_TFC8lifetime3FooC{{.*}} :",42],["// RUN: %target-swift-frontend -Xllvm -sil-full-demangle -emit-silgen %s | FileCheck %s",39],["// CHECK-LABEL: sil hidden @_TFC7dynamic3FooC",39],["// CHECK: sil shared @[[CLOSURE_NAME]]",38],["// CHECK-LABEL: sil @main",56]],"useCount":11036},{"word":"sink","context":[["setSink(sink)",348],["sendNext(sink, 2)",151],["sink.disposable = sink.run()",146],["sink.disposable = sink.run()",146],["return (sink: sink, subscription: subscription)",137],["return (sink: sink, subscription: subscription)",137],["sendCompleted(sink)",256],["return sink.run()",247],["return sink",330],["sendNext(sink, 1)",195]],"useCount":5721},{"word":"size","context":[["self.size = size",518],["return size",679],["self.size = size",518],["UIGraphicsBeginImageContextWithOptions(size, false, 0)",251],["- parameter size: The size of the font",258],["- parameter size: The size of the font",258],["UIGraphicsBeginImageContext(rect.size)",266],["super.init(size: size)",271],["super.init(size: size)",271],["super.viewWillTransitionToSize(size, withTransitionCoordinator: coordinator)",438]],"useCount":43710},{"word":"so","context":[["*  furnished to do so, subject to the following conditions:",67],["//furnished to do so, subject to the following conditions:",151],["//\tfurnished to do so, subject to the following conditions:",174],["//    furnished to do so, subject to the following conditions:",253],["* furnished to do so, subject to the following conditions:",1134],["furnished to do so, subject to the following conditions:",1597],["//  furnished to do so, subject to the following conditions:",7834],["// furnished to do so, subject to the following conditions:",8143],["//  This file was generated by the Clean Swift Xcode Templates so you can apply",132],["let data = response.buffer! //local copy so it is perverse for writing",86]],"useCount":25994},{"word":"some","context":[["// FIXME: alignof differs from the ABI alignment on some architectures",80],["// CHECK-64-NEXT:       (field name=some offset=0",90],["case .some(_):",81],["// CHECK-32-NEXT:       (field name=some offset=0",79],["case some(Wrapped)",78],["case .some(let value):",78],["- parameter optionsInfo:      A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",71],["if n < 1    { n = 0 }    // Allow 0 if user wants [[],[],[]] for some reason.",59],[":param: optionsInfo       A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",56],["- parameter optionsInfo:       A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.",212]],"useCount":4362},{"word":"source","context":[["// Delete the row from the data source",1654],["self.source = source",404],["self.source = source",404],["//  Redistribution and use in source and binary forms, with or without",498],["This source file is part of the Swift.org open source project",551],["This source file is part of the Swift.org open source project",551],["* Redistribution and use in source and binary forms, with or without",695],["// MARK: - Table view data source",3458],["// This source file is part of the Swift.org open source project",14622],["// This source file is part of the Swift.org open source project",14622]],"useCount":52007},{"word":"spec","context":[["XCTAssertFalse(spec.isSatisfiedBy(nil))",17],["override func spec(){",20],["//NGRTodo: Fix this spec",21],["// radius (aka standard deviation) appears in the SVG spec:",26],["//    override func spec() {",31],["super.spec()",39],["///validates the HTTP is a 101 as per the RFC spec",43],["/// WARNING: this is a significant deviation from the markdown spec",70],["override func spec()",129],["override func spec() {",4352]],"useCount":5001},{"word":"specified","context":[["// Uncomment this method to specify if the specified item should be highlighted during tracking",147],["Creates a request for uploading data to the specified URL request.",104],["/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.",198],["/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.",198],["// Return false if you do not want the specified item to be editable.",1475],["// Return NO if you do not want the specified item to be editable.",528],["Creates a request for uploading a file to the specified URL request.",104],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326],["Creates a request for uploading a stream to the specified URL request.",104],["// Uncomment this method to specify if the specified item should be selected",146]],"useCount":13226},{"word":"standardUserDefaults","context":[["let userDefault = NSUserDefaults.standardUserDefaults()",85],["let ud = NSUserDefaults.standardUserDefaults()",109],["var defaults = NSUserDefaults.standardUserDefaults()",144],["private let defaults = NSUserDefaults.standardUserDefaults()",57],["let prefs = NSUserDefaults.standardUserDefaults()",66],["var userDefaults = NSUserDefaults.standardUserDefaults()",74],["let userDefaults = NSUserDefaults.standardUserDefaults()",563],["NSUserDefaults.standardUserDefaults().synchronize()",1088],["let defaults = NSUserDefaults.standardUserDefaults()",1544],["return NSUserDefaults.standardUserDefaults()",75]],"useCount":4911},{"word":"start","context":[["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506],["public func start() {",525],["/// Function to start, play, or activate the node, all do the same thing",530],["self.internalAU!.start()",351],["scheduler.start()",331],["func start() {",600],["let res = scheduler.start {",2900],["//Meta information declaration start",1447],["let res = scheduler.start { () -> Observable<Int> in",606],["AudioKit.start()",844]],"useCount":28769},{"word":"startIndex","context":[["/// reachable from `startIndex` by zero or more applications of",246],["let startIndex = base.index(",288],["bounds: startIndex..<endIndex)",288],["base.startIndex,",576],["public var startIndex: Index {",236],["var startIndex = s.startIndex",136],["var startIndex = d.startIndex",144],["var startIndex = d.startIndex",144],["_fixLifetime(startIndex)",210],["public var startIndex: Int {",220]],"useCount":13265},{"word":"started","context":[["expect(started) == false",70],["it(\"should invoke transformation once per started signal\") {",61],[".on(started: {",50],["showLog(\"****** \\(#function) started ******\")",41],["/// Upon success, the started signal will send the resulting value then",35],["// Use recording to get started writing UI tests.",3490],["/// Tells whether the node is processing (ie. started, playing, or active)",477],["var started = false",131],["started = true",128],["_IQShowLog(\"****** \\(__FUNCTION__) started ******\")",102]],"useCount":5862},{"word":"state","context":[["self.state = state",294],["self.state = state",294],["forState state: UIControlState,",293],["switch state {",1216],["switch self.state {",241],["// state",271],["- throws: KuzzleError.IllegalState when state is .DISCONNECTED",231],["switch recognizer.state {",208],["// Configure the view for the selected state",2954],["return state",512]],"useCount":24971},{"word":"statement","context":[["switch { // expected-error {{expected expression in 'switch' statement}}",60],["///   - statement: A single SQL statement.",137],["///   - statement: A single SQL statement.",137],["///   - bindings: A list of parameters to bind to the statement.",91],["/// - Returns: The statement object (useful for chaining).",90],["/// :param: sql The SQL statement to be used.",88],["return statement",73],["let statement = try db.makeSelectStatement(sql)",67],["///     - arguments: Optional statement arguments.",60],["/// - Parameter bindings: A list of parameters to bind to the statement.",58]],"useCount":5154},{"word":"static","context":[["public static let _protobuf_fieldNames: FieldNameMap = [",568],["static var token: dispatch_once_t = 0",323],["public static func _getObjectiveCType() -> Any.Type {",236],["static func _conditionallyBridgeFromObjectiveC(",290],["static var instance : UIColor? = nil",453],["static var onceToken : dispatch_once_t = 0",634],["public static func _isBridgedToObjectiveC() -> Bool {",397],["public static func _forceBridgeFromObjectiveC(",397],["static func _forceBridgeFromObjectiveC(",290],["public static func _conditionallyBridgeFromObjectiveC(",442]],"useCount":34352},{"word":"status","context":[["self.status = status",322],["return status",150],["if status != noErr {",140],["throw securityError(status: status)",151],["throw securityError(status: status)",151],["func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {",192],["if status != SQLITE_OK {",195],["if status == errSecSuccess {",229],["self.status = status",322],["switch status {",1096]],"useCount":16828},{"word":"statusCode","context":[["XCTAssertEqual(response?.statusCode ?? -1, 200, \"response should have a 200 status code\")",87],["switch statusCode {",93],[".validate(statusCode: 200..<300)",202],["self.statusCode = statusCode",107],["self.statusCode = statusCode",107],["statusCode: 200,",85],["switch response.statusCode {",83],["if httpResponse.statusCode == 200 {",75],["if code == statusCode.Normal.rawValue {",71],["provider.request(target) { (data, statusCode, response, error) in",70]],"useCount":6193},{"word":"stop","context":[["player.stop()",311],["self.stop()",155],["self.internalAU!.stop()",325],["stop()",506],["/// Function to stop or bypass the node, both are equivalent",524],["func stop() {",624],["public func stop() {",646],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["open func stop() {",191],["addButton(\"Stop\", action: #selector(stop))",149]],"useCount":10820},{"word":"storage","context":[["/// Initialize the storage at baseAddress with the contents of this",40],["/// Returns `true` iff this buffer's storage is uniquely-referenced.",40],["log.debug(\"Syncing clients to storage.\")",41],["_storage = storage",44],["let storage = NSHTTPCookieStorage.sharedHTTPCookieStorage()",47],["/// storage.",51],["/// A value that identifies the storage used by the buffer.  Two",55],["/// over the underlying contiguous storage.",75],["self.storage = storage",82],["self.storage = storage",82]],"useCount":4322},{"word":"store","context":[["// Create the coordinator and store",1472],["// CHECK-NEXT:    store [[DERIVED_SELF]] to [[SELF_BOX]]",63],["self.store = store",71],["// CHECK: store",324],["// CHECK-NEXT:    store [[NEW_SELF]] to [[SELF_BOX]]",162],["self.store = store",71],["return store",72],["// CHECK-NEXT:    store [[ZERO]] to [[BITMAP_BOX]]",72],["// CHECK:         store %1 to [[SELF_BOX]]",81],["// CHECK-NEXT:    store [[BIT]] to [[BITMAP_BOX]]",108]],"useCount":7655},{"word":"storyboard","context":[["return storyboard",61],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["let storyboard = UIStoryboard(name: \"Main\", bundle: nil)",701],["let storyboard = self.mainStoryboard()",31],["let storyboard = UIStoryboard(name: \"Main\", bundle: NSBundle.mainBundle())",83],["var storyboard = UIStoryboard(name: \"Main\", bundle: nil)",78],["return self.viewControllerAtIndex(index, storyboard: viewController.storyboard!)",74],["return self.viewControllerAtIndex(index, storyboard: viewController.storyboard!)",74],["let storyboard = SwinjectStoryboard.create(name: \"Animals\", bundle: bundle, container: container)",40],["let storyboard = NSStoryboard(name: \"Main\", bundle: nil)",67]],"useCount":9408},{"word":"str","context":[["expectEqual(\"12345678\", str)",104],["str.appendContentsOf(\"                            <true/>\\n\")",81],["print(str)",119],["var str: String = \"\"",122],["if str == nil {",130],["switch str {",179],["var str = \"\"",369],["d[\".tag\"] = .str(\"other\")",393],["var str = \"Hello, playground\"",706],["return str",905]],"useCount":13251},{"word":"stream","context":[["stream.close()",225],["appendBodyPart(stream: stream, length: length, headers: headers)",120],["stream.open()",140],["appendBodyPart(stream: stream, length: length, headers: headers)",120],["return stream",173],["public func upload(URLRequest: URLRequestConvertible, stream: NSInputStream) -> Request {",107],["Creates a request for uploading a stream to the specified URL request.",104],["let stream = NSInputStream(data: data)",101],[":param: stream The stream to upload.",99],[":param: stream The stream to upload.",99]],"useCount":7072},{"word":"string","context":[["- parameter path: A null-separated key-path string. Can be generated with `\"keyA\" => \"keyB\"`",326],["XCTFail(\"Unable to convert string to data\")",202],["return string",1288],[":param: URLString The URL string.",312],["var string = \"\"",289],["public var string: String? {",259],["case .string:",233],["self.object = NSString(string:newValue)",187],["expect(\"number\") == \"string\"",196],["let url = NSURL(string: urlString)",198]],"useCount":39350},{"word":"struct","context":[["struct Singleton {",542],["struct A {",2695],["struct Static {",2180],["struct S {",1456],["struct c {",1015],["struct B {",804],["struct c",533],["struct B",526],["struct d {",510],["struct B{",494]],"useCount":46520},{"word":"style","context":[["alert.addAction(UIAlertAction(title: \"OK\", style: UIAlertActionStyle.Default, handler: nil))",198],["style: .Default,",227],["super.init(style: style, reuseIdentifier: reuseIdentifier)",2273],["super.init(style: style, reuseIdentifier: reuseIdentifier)",2273],["override init(style: UITableViewCellStyle, reuseIdentifier: String?) {",1654],["self.style = style",247],["self.style = style",247],["required public init(style: UITableViewCellStyle, reuseIdentifier: String?) {",331],["switch style {",364],["\"style\": \"rpc\"]",486]],"useCount":21020},{"word":"subject","context":[["* furnished to do so, subject to the following conditions:",1134],["furnished to do so, subject to the following conditions:",1597],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120],["//  furnished to do so, subject to the following conditions:",7834],["let result = subject.toBytes()",363],["// furnished to do so, subject to the following conditions:",8143],["// This Source Code Form is subject to the terms of the Mozilla Public",266],["//    furnished to do so, subject to the following conditions:",253],["var subject = CerealEncoder()",217],["//  subject to the following conditions:",202]],"useCount":29233},{"word":"sublicense","context":[["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",67],["// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",84],["//    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",150],["//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",151],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["//\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell",174],["//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",253],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602]],"useCount":19822},{"word":"submitted","context":[["- parameter queue: The queue to which the supplied block will be submitted.",20],["// Test case submitted to project by https://github.com/tmu (Teemu Kurppa)",21],["// Test case submitted to project by https://github.com/airspeedswift (airspeedswift)",28],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["// Test case submitted to project by https://github.com/zneak (zneak)",13],["// Test case submitted to project by https://github.com/beltex (beltex)",11],["// Test case submitted to project by https://github.com/fluidsonic (Marc Knaup)",18],["return \"The timestamp data submitted has the wrong format.\"",15]],"useCount":36684},{"word":"subscript","context":[["subscript (i: Int) -> Character {",132],["subscript(i: Int) -> Int {",175],["/// - Parameter key: The key that's used to subscript the receiver.",188],["subscript (i: Int) -> String {",216],["/// `endIndex` is not a valid argument to `subscript`, and is always",246],["subscript (r: Range<Int>) -> String {",166],["subscript(index: Int) -> Int {",155],["*  To mark both String and Int can be used in subscript.",142],["/// If `sub` is `Int`, return `subscript(index:)`; If `sub` is `String`,  return `subscript(key:)`.",142],["/// If `sub` is `Int`, return `subscript(index:)`; If `sub` is `String`,  return `subscript(key:)`.",142]],"useCount":11069},{"word":"subscriptions","context":[["XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])",201],["XCTAssertEqual(xs.subscriptions, [",2088],["XCTAssertEqual(xs.subscriptions, correctSubscriptions)",528],["XCTAssertEqual(r.subscriptions, [",197],["XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])",201],["XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])",201],["XCTAssertEqual(ys.subscriptions, [",227],["XCTAssertEqual(xs1.subscriptions, [",328],["XCTAssertEqual(xs2.subscriptions, [",328],["XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])",244]],"useCount":11670},{"word":"success","context":[["return success",285],["success()",343],["if success {",1344],["case .success:",623],["var success = false",258],["case .success(let value):",272],["success = true",298],["success?(user: json.object)",417],["if !success {",435],["success: {",556]],"useCount":21397},{"word":"super","context":[["super.awakeFromNib()",7271],["super.viewDidLoad()",54326],["super.viewDidAppear(animated)",4816],["super.didReceiveMemoryWarning()",28335],["super.setUp()",27504],["super.tearDown()",25134],["super.init()",23518],["super.viewWillAppear(animated)",7292],["super.init(frame: frame)",10316],["super.init(coder: aDecoder)",11022]],"useCount":267075},{"word":"superview","context":[["superview.addSubview(viewA)",72],["if superview == nil {",159],["superview.addSubview(view)",100],["if let superview = superview {",78],["if let superview = superview {",78],["let superview = UIView()",58],["if let superview = self.superview {",67],["if let superview = self.superview {",67],["if superview != nil {",57],["self.superview?.layoutIfNeeded()",57]],"useCount":4771},{"word":"support","context":[["// Override to support rearranging the table view.",1601],["it(\"should support relative equalities\") {",82],["try b[name].support()",72],["it(\"should support relative inequalities\") {",57],["- returns: Self instance to support chaining.",54],["// Universal type support",89],["// MARK: - Core Data Saving support",1458],["// Override to support conditional rearranging of the table view.",1611],["// Override to support conditional editing of the table view.",1645],["// Override to support editing the table view.",1677]],"useCount":10061},{"word":"sut","context":[["let sut = NSHTTPURLResponse(url: url, statusCode: 200, httpVersion: \"HTTP/1.1\", headerFields: f)",63],["let result = sut?.match(arguments: firstArgument, withArguments: secondArgument)",106],["dispatch_sync(sut.cacheQueue) {",164],["let sut = mockMatcher",111],["sut = nil",87],["sut.setData(data, key: key)",73],["XCTAssertNil(sut.image)",64],["dispatch_sync(sut.cacheQueue, {",70],["sut.addFormat(format)",73],["let path = sut.pathForKey(key)",140]],"useCount":4241},{"word":"swift","context":[["// RUN: not --crash %target-swift-frontend %s -parse",1830],["#if swift(>=3.0)",1250],["// RUN: not %target-swift-frontend %s -typecheck",5223],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["//  main.swift",1361],["// RUN: %target-parse-verify-swift",1640],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["//  AppDelegate.swift",21866],["//  ViewController.swift",16235],["// RUN: not %target-swift-frontend %s -parse",10778]],"useCount":146012},{"word":"switch","context":[["switch state {",1216],["switch (lhs, rhs) {",1737],["switch tag {",1819],["switch value {",1982],["switch self.type {",2399],["switch type {",2559],["switch json {",2641],["switch event {",3396],["switch result {",3653],["switch self {",19241]],"useCount":93423},{"word":"t","context":[["// RUN: rm -rf %t && mkdir -p %t",649],["// RUN: rm -rf %t && mkdir -p %t",649],["// RUN: mkdir -p %t",648],["return t",608],["// RUN: rm -rf %t",938],["fatalError(\"unavailable function can't be called\")",1217],["// RUN: rm -rf %t && mkdir %t",421],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["fatalError(\"unavailable accessor can't be called\")",1359]],"useCount":45515},{"word":"tab","context":[["if let tab = tabManager.selectedTab,",267],["tabManager.selectTab(tab)",228],["for tab in tabs {",202],["if let tab = tabManager.selectedTab {",154],["return tab",154],["tabManager.removeTab(tab)",100],["if tabs[i] === tab {",104],["self.ignoreNavigationInTab(tab, navigation: nav)",104],["if let readerMode = tab.getHelper(name: \"ReaderMode\") as? ReaderMode {",112],["updateURLBarDisplayURL(tab)",137]],"useCount":9722},{"word":"tabManager","context":[["tabManager.selectTab(tab)",228],["if let tab = tabManager.selectedTab,",267],["var tabManager: TabManager!",164],["if let tab = tabManager.selectedTab {",154],["self.tabManager = tabManager",135],["self.tabManager = tabManager",135],["tabManager.selectedTab?.reload()",126],["updateTabCountUsingTabManager(tabManager)",121],["tabManager.selectTab(tabManager[webView])",117],["let tabManager: TabManager",119]],"useCount":7908},{"word":"table","context":[["// Override to support editing the table view.",1677],["// Override to support conditional editing of the table view.",1645],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view",1619],["// Override to support conditional rearranging of the table view.",1611],["self.table.reloadData()",66],["table.reloadData()",71],["override func table(table: WKInterfaceTable, didSelectRowAtIndex rowIndex: Int) {",75],["override func table(table: WKInterfaceTable, didSelectRowAtIndex rowIndex: Int) {",75],["// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.",215],["// Override to support rearranging the table view.",1601]],"useCount":13914},{"word":"tableView","context":[["override func numberOfSectionsInTableView(tableView: UITableView) -> Int {",4481],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",4822],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933],["func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",4933],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",5804],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915],["self.tableView.reloadData()",6148],["override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {",5915]],"useCount":175775},{"word":"tag","context":[["let tag = Serialization.getTag(d)",1011],["super.init(tag: tag)",1037],["switch tag {",1819],["super.init(tag: tag)",1037],["if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {",547],["if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {",547],["required public init(tag: String?) {",578],["fatalError(\"Unknown tag \\(tag)\")",395],["public required init(tag: String?) {",432],["var tag = input.readTag()",521]],"useCount":14893},{"word":"target","context":[["// RUN: %target-typecheck-verify-swift",354],["let target: GitHub = .Zen",321],["// RUN: %target-parse-verify-swift",1640],["target: self,",991],["// RUN: %target-run-simple-swift",724],["// RUN: not %target-swift-frontend %s -parse",10778],["// RUN: not %target-swift-frontend %s -typecheck",5223],["// RUN: not --crash %target-swift-frontend %s -parse",1830],["@param target Target object for selector.",370],["// RUN: %target-run-simple-swift | FileCheck %s",421]],"useCount":38154},{"word":"task","context":[["task.resume()",3336],["task()",479],["task.cancel()",427],["return task",789],["task.launch()",406],["- returns: A task represents the retrieving process.",401],["task.waitUntilExit()",249],["task: NSURLSessionTask,",229],["let task: ()->Void = {",256],["let task = NSTask()",268]],"useCount":23967},{"word":"tearDown","context":[["For now nothing to tearDown",57],["public func tearDown() {",18],["override func tearDown() {",25219],["super.tearDown()",25134],["override func tearDown()",159],["override class func tearDown() {",60],["DictionaryTestSuite.tearDown {",24],["self.tearDown()",32],["//        super.tearDown()",55],["//    override func tearDown() {",57]],"useCount":50892},{"word":"teardown","context":[["Stub.teardown()",15],["setup and teardown code.",11],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["//        // Put teardown code here. This method is called after the invocation of each test method in the class.",45],["audioPlayer.teardown()",30],["teardown()",18],["func teardown() {",15],["Example groups can share setup and teardown code.",14],["queuer.teardown()",14],["// Put teardown code here.",13]],"useCount":21423},{"word":"template","context":[["let result = try! template.render(parser.stencilContext())",111],["let template = try Template(templateString)",132],["let rendered = template.render(with: context)",107],["let rendering = try! template.render(value)",102],["/// format string as a template into which the remaining argument",96],["self.template = template",96],["//  Mobilette template version 1.0",148],["self.template = template",96],["return template",85],["template.baseContext = template.baseContext.extendedContext(Box(willRender))",78]],"useCount":4225},{"word":"terms","context":[["// terms governing use, modification, and redistribution, is contained in the",90],["//  except according to those terms.",74],["//  propagated, or distributed except according to the terms contained",45],["In consideration of your agreement to abide by the following terms, and",33],["// including terms governing use, modification, and redistribution, is",32],["This file is subject to the terms and conditions defined in",28],["terms of how the image is cropped and stretched.",22],["//\tand the Perfect Additional Terms that immediately follow the terms and",104],["// This Source Code Form is subject to the terms of the Mozilla Public",266],["/* This Source Code Form is subject to the terms of the Mozilla Public",3120]],"useCount":4086},{"word":"test","context":[["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["test()",201],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["test.expected,",220],["for test in tests {",234],["stackTrace: SourceLocStack().with(test.loc))",619],["func test() {",678],["let host = \"test.alamofire.org\"",810],["// This is an example of a functional test case.",14616],["// This is an example of a performance test case.",14731]],"useCount":96576},{"word":"testExample","context":[["func testExample() {",18001],["(\"testExample\", testExample),",50],["//    func testExample() {",83],["(\"testExample\", testExample),",50],["func testExample()",31]],"useCount":18215},{"word":"testPerformanceExample","context":[["func testPerformanceExample() {",14717],["func testPerformanceExample()",16],["//    func testPerformanceExample() {",136]],"useCount":14869},{"word":"testable","context":[["@testable import Ello",85],["public // @testable",1047],["@testable",374],["@testable import Appz",167],["@testable import CreatubblesAPIClient",108],["@testable import Operations",103],["@testable import DNMModel",93],["@testable import OrderCloudSwifty",82],["@testable import EVReflection",78],["@testable import Client",79]],"useCount":7854},{"word":"tester","context":[["tester().tapViewWithAccessibilityLabel(\"Show Tabs\")",205],["tester().tapViewWithAccessibilityLabel(\"Cancel\")",282],["BrowserUtils.resetToAboutHome(tester())",125],["tester().clearTextFromFirstResponder()",119],["tester().tapViewWithAccessibilityLabel(\"Done\")",111],["tester().tapViewWithAccessibilityLabel(\"Menu\")",105],["tester().waitForAnimationsToFinish()",179],["tester().waitForWebViewElementWithAccessibilityLabel(\"Page 1\")",144],["tester().tapViewWithAccessibilityLabel(\"Settings\")",139],["tester().tapViewWithAccessibilityIdentifier(\"url\")",525]],"useCount":5931},{"word":"tests","context":[["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["// Use recording to get started writing UI tests.",3490],["// Don't run the same tests twice.",33],["for test in tests {",234],["// FIXME: swift-3-indexing-model: tests.",63],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// and having multiple views with the same label confuses tests.",55],["// Don't run tests for the base class",35],["//        // Use XCTAssert and related functions to verify your tests produce the correct results.",44],["// Dictionary -> NSDictionary bridging tests.",53]],"useCount":17783},{"word":"text","context":[["label.text = text",342],["self.text = text",817],["self.text = text",817],["return text",507],["text: label,",369],["titleLabel.text = title",372],["label.text = text",342],["var text: String?",230],["var text = \"\"",223],["let text: String",212]],"useCount":34181},{"word":"textAlignment","context":[["titleLabel.textAlignment = .center",86],["label.textAlignment = .Center",741],["label.textAlignment = NSTextAlignment.Center",454],["label.textAlignment = .center",287],["titleLabel.textAlignment = .Center",215],["titleLabel.textAlignment = NSTextAlignment.Center",156],["self.textAlignment = textAlignment",110],["self.textAlignment = textAlignment",110],["switch textAlignment {",100],["cell.textLabel?.textAlignment = .Center",60]],"useCount":5071},{"word":"textColor","context":[["cell.textLabel?.textColor = UIColor.whiteColor()",102],["label.textColor = UIColor.whiteColor()",429],["self.textColor = textColor",165],["self.textColor = textColor",165],["placeholderLabel.textColor = placeholderColor",139],["label.textColor = UIColor.blackColor()",126],["label.textColor = UIColor.white",110],["titleLabel.textColor = UIColor.whiteColor()",109],["cell.textLabel?.textColor = color",102],["let color = cell.textLabel?.textColor",98]],"useCount":8404},{"word":"textField","context":[["func textFieldDidBeginEditing(textField: UITextField) {",354],["func textFieldDidEndEditing(textField: UITextField) {",390],["func textFieldShouldReturn(textField: UITextField) -> Bool {",1492],["textField.resignFirstResponder()",1522],["if let textField = self as? UITextField {",287],["func textFieldShouldReturn(_ textField: UITextField) -> Bool {",271],["textField.delegate = self",252],["return textField",223],["let textField = UITextField()",182],["@IBOutlet weak var textField: UITextField!",347]],"useCount":15487},{"word":"textLabel","context":[["addSubview(textLabel)",91],["@IBOutlet weak var textLabel: UILabel!",92],["cell.textLabel?.text = title",110],["cell.textLabel?.numberOfLines = 0",106],["let textLabel = UILabel()",106],["cell.textLabel?.textColor = color",102],["cell.textLabel?.textColor = UIColor.whiteColor()",102],["cell.textLabel!.text = object.description",102],["cell.textLabel?.textColor = cell.tintColor",98],["let color = cell.textLabel?.textColor",98]],"useCount":5191},{"word":"textView","context":[["@IBOutlet weak var textView: UITextView!",322],["func textViewDidChange(textView: UITextView) {",258],["switch textView.keyboardAppearance {",140],["func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {",158],["func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {",158],["textView.inputAccessoryView = toolbar",164],["} else if let textView = self as? UITextView {",165],["textView.becomeFirstResponder()",185],["textView.delegate = self",208],["textView.resignFirstResponder()",327]],"useCount":8111},{"word":"than","context":[["//debug or log, using + is faster than \\(var).",100],["/// - Parameter i: A valid index of the collection. `i` must be less than",80],["XCTAssertGreaterThan(byteValue.bytes, 0, \"reported bytes should always be greater than 0\")",79],["/// If this is e.g. set to 10, no more than 10 values on the x-axis can be viewed at once without scrolling.",79],["if step < 1 { step = 1 } // Less than 1 results in an infinite loop.",66],["\"can't remove more items from a collection than it contains\")",60],["/// greater than the last valid subscript argument.",59],["/// e.g. minRange=10, maxRange=100 no less than 10 values and no more that 100 values can be viewed",55],["//  From now prevent keyboard manager to slide up the rootView to more than keyboard height. (Bug ID: #93)",52],["// rather than losing data.",49]],"useCount":5041},{"word":"that","context":[["* file that was distributed with this source code.",118],["// Dispose of any resources that can be recreated.",24097],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["// Release any cached data, images, etc that aren't in use.",419],["/// Transform `self` into a series of machine words that can be",338],["/// Returns a mirror that reflects `self`.",215],["/// - Parameter key: The key that's used to subscript the receiver.",188],["/// Set an offset in dp that allows the user to drag the chart over it's",128],["/// - parameter path: 0 or more `String` or `Int` that subscript the `JSON`",127],["// file that was distributed with this source code",119]],"useCount":72519},{"word":"the","context":[["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// Do any additional setup after loading the view, typically from a nib.",9879],["// This source file is part of the Swift.org open source project",14622],["// Put the code you want to measure the time of here.",14709],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Put setup code here. This method is called before the invocation of each test method in the class.",20783],["// Put teardown code here. This method is called after the invocation of each test method in the class.",21248],["// Put the code you want to measure the time of here.",14709]],"useCount":614408},{"word":"then","context":[["set immediately, and then the remote image will be set once the image request is finished.",77],["it(\"should start a signal then block until completion\") {",69],["// add expensive code required only for logging, then return an optional String",84],["/// Maps each event from `self` to a new producer, then flattens the",86],["/// Creates a Signal from the producer, then adds exactly one observer to",87],["/// Maps each event from `signal` to a new signal, then flattens the",92],["And then in your sources:",139],["}.then {",163],["//then",236],["// then",2283]],"useCount":11090},{"word":"there","context":[["// If there's an update, use NCUpdateResult.NewData",138],["// If there's no update required, use NCUpdateResult.NoData",138],["/// Zero (0.0) means there's no maximum width",112],["- parameter errorHandler: The function that will be called when there was an error",78],["// we still draw stacked bars, but there is one non-stacked in between",66],["/// of the page is either to the left or right in the BackForwardList. If that is the case, we navigate there.",56],["/// of the current page is there. And if so, we go there.",56],["/// means that there is nothing in the BackForwardList except the internal url for the reader mode page. In that",56],["// If there are already bars showing, add this on top of them",56],["/// of the current page is there. And if so, we go there.",56]],"useCount":4585},{"word":"this","context":[["// Use this method to pause ongoing tasks, disable timers, etc.",240],["Possible errors returned by this function are:",256],["reason: \"this trap is not guaranteed to happen in -Ounchecked\"))",297],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["//  to delete and recreate this implementation file for your updated model.",759],["// Replace this with code to handle the error appropriately.",1404],["// Uncomment the following line to display an Edit button in the navigation bar for this view controller.",1463],["// Replace this implementation with code to handle the error appropriately.",1739],["if let this = self {",155],["/// Return a *generator* over the elements of this *sequence*.",179]],"useCount":39640},{"word":"throw","context":[["throw Abort.invalidParameter(\"w1\", U.self)",504],["// CHECK-NEXT:    throw [[ERROR]]",200],["throw ProtocolBuffersError.InvalidProtocolBuffer(\"Invalid JSON data\")",202],["throw ProtocolBuffersError.InvalidProtocolBuffer(\"Uninitialized Message\")",212],["throw Abort.invalidParameter(\"w2\", V.self)",264],["throw ProtocolBuffersError.invalidProtocolBuffer(\"Invalid JSON data\")",553],["throw ProtocolBuffersError.invalidProtocolBuffer(\"Uninitialized Message\")",561],["throw Abort.invalidParameter(\"w0\", T.self)",684],["throw error",1467],["throw Abort.badRequest",1605]],"useCount":15846},{"word":"throws","context":[["override public func writeToCodedOutputStream(output:CodedOutputStream) throws {",260],["override public func getDescription(indent:String) throws -> String {",776],["public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {",626],["override public func writeTo(codedOutputStream: CodedOutputStream) throws {",544],["override public func encode() throws -> Dictionary<String,Any> {",544],["public init(json: JSON) throws {",432],[") throws {",251],["- throws: KuzzleError.IllegalState when state is .DISCONNECTED",231],["override func getResult() throws -> R {",133],["override public func encode() throws -> Dictionary<String,AnyObject> {",202]],"useCount":14815},{"word":"time","context":[["// Start logging elapsed time.",182],["// Put the code you want to measure the time of here.",14709],["dispatch_after(time, dispatch_get_main_queue()) {",171],["expect(\"time\").toEventually( equal(\"done\") )",196],["/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.",198],["/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.",198],["expect(time) == \"done\"",210],["time = \"done\"",212],["var time = \"passing\"",212],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326]],"useCount":24034},{"word":"timeout","context":[["waitForExpectationsWithTimeout(timeout, handler: nil)",843],["waitForExpectations(timeout: 3, handler: nil)",152],["waitForExpectations(timeout: 10, handler: nil)",159],["XCTFail(\"execution timeout\")",161],["waitForExpectations(withTimeout: timeout, handler: nil)",171],["waitForExpectationsWithTimeout(timeout, handler: { error in",211],["waitForExpectations(timeout: 1, handler: nil)",376],["waitForExpectations(timeout: timeout, handler: nil)",513],["waitForExpectations(timeout: timeout, handler: nil)",513],["waitForExpectations(timeout: 5, handler: nil)",565]],"useCount":8824},{"word":"timer","context":[["timer.invalidate()",882],["var timer: NSTimer?",235],["var timer = NSTimer()",129],["dispatch_resume(timer)",132],["private var timer: NSTimer?",174],["self.timer?.invalidate()",225],["timer?.invalidate()",601],["timer = nil",412],["self.timer = nil",257],["return timer",237]],"useCount":6901},{"word":"title","context":[["var title = \"\"",229],["public let title: String",276],["self.title = title",1950],["self.title = title",1950],["let title: String",730],["var title: String?",510],["override var title: NSAttributedString? {",424],["var title: String",382],["titleLabel.text = title",372],["return title",278]],"useCount":39502},{"word":"titleLabel","context":[["titleLabel = UILabel()",190],["titleLabel.sizeToFit()",208],["@IBOutlet weak var titleLabel: UILabel!",1163],["contentView.addSubview(titleLabel)",392],["titleLabel.text = title",372],["let titleLabel = UILabel()",329],["addSubview(titleLabel)",325],["titleLabel.translatesAutoresizingMaskIntoConstraints = false",234],["titleLabel.textAlignment = .Center",215],["@IBOutlet var titleLabel: UILabel!",220]],"useCount":13684},{"word":"to","context":[["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["//  furnished to do so, subject to the following conditions:",7834],["// furnished to do so, subject to the following conditions:",8143],["// furnished to do so, subject to the following conditions:",8143],["//  furnished to do so, subject to the following conditions:",7834],["// Test case submitted to project by https://github.com/practicalswift (practicalswift)",36558],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// Put the code you want to measure the time of here.",14709]],"useCount":372412},{"word":"token","context":[["return token",255],["internal var token: AUParameterObserverToken?",346],["static var token: dispatch_once_t = 0",323],["dispatch_once(&Static.token) {",269],["switch token {",148],["if let token = token {",145],["if let token = token {",145],["self.token = token",247],["self.token = token",247],["token = tree.tokenByAddingParameterObserver {",238]],"useCount":9796},{"word":"toolbar","context":[["toolbar.tintColor = UIColor.whiteColor()",90],["make.bottom.equalTo(self.toolbar?.snp_top ?? self.view.snp_bottom)",97],["//Setting toolbar title font.   //  (Enhancement ID: #30)",104],["let toolbar = IQToolbar()",162],["textView.inputAccessoryView = toolbar",164],["textField.inputAccessoryView = toolbar",170],["toolbar.items = items",187],["//  Setting toolbar to keyboard.",218],["toolbar.barStyle = UIBarStyle.Black",356],["toolbar.barStyle = UIBarStyle.Default",359]],"useCount":6334},{"word":"top","context":[["case .top:",241],["barRect.origin.y = top",152],["make.top.equalTo(self.urlBar.snp_bottom)",114],["barRect.size.height = bottom - top",153],["make.top.equalTo(self)",149],["self.top = top",93],["case top",128],["make.top.left.right.equalTo(self.view)",128],["attribute: .top,",127],["/// if set to true, all values are drawn above their bars, instead of below their top",116]],"useCount":9838},{"word":"touch","context":[["for touch in touches {",322],["let location = touch.locationInNode(self)",242],["let touch = touches.first",94],["let touch = touches.first!",95],["// RUN: touch -t 201401240005 %t/*",103],["func gestureRecognizer(gestureRecognizer: UIGestureRecognizer, shouldReceiveTouch touch: UITouch) -> Bool {",117],["public func gestureRecognizer(gestureRecognizer: UIGestureRecognizer, shouldReceiveTouch touch: UITouch) -> Bool {",118],["for touch: AnyObject in touches {",135],["/* Called when a touch begins */",187],["if let touch = touches.first {",236]],"useCount":5344},{"word":"touches","context":[["super.touchesBegan(touches, withEvent: event)",539],["override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",1186],["override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",445],["for touch in touches {",322],["override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {",308],["if let touch = touches.first {",236],["override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {",290],["super.touchesEnded(touches, withEvent: event)",303],["override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {",298],["override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {",293]],"useCount":9292},{"word":"transform","context":[["transform.m34 = 1.0 / -1000.0",113],["var transform = CATransform3DIdentity",307],["transform: flatMapTransformation),",117],["self.transform = transform",137],["self.transform = transform",137],["self.transform = CGAffineTransformIdentity",151],["toView.transform = CGAffineTransformIdentity",155],["return transform",168],["return map(transform).flatten(strategy)",204],["let (map, transform) = right",264]],"useCount":14360},{"word":"transitionContext","context":[["let container = transitionContext.containerView()",113],["public func animateTransition(transitionContext: UIViewControllerContextTransitioning) {",160],["func transitionDuration(transitionContext: UIViewControllerContextTransitioning) -> NSTimeInterval {",143],["public func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {",141],["transitionContext.completeTransition(!transitionContext.transitionWasCancelled())",222],["transitionContext.completeTransition(!transitionContext.transitionWasCancelled())",222],["let containerView = transitionContext.containerView()",224],["func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {",416],["func animateTransition(transitionContext: UIViewControllerContextTransitioning) {",559],["transitionContext.completeTransition(true)",808]],"useCount":6528},{"word":"translatesAutoresizingMaskIntoConstraints","context":[["view.translatesAutoresizingMaskIntoConstraints = false",548],["label.translatesAutoresizingMaskIntoConstraints = false",451],["translatesAutoresizingMaskIntoConstraints = false",426],["self.translatesAutoresizingMaskIntoConstraints = false",353],["button.translatesAutoresizingMaskIntoConstraints = false",285],["imageView.translatesAutoresizingMaskIntoConstraints = false",238],["titleLabel.translatesAutoresizingMaskIntoConstraints = false",234],["v.translatesAutoresizingMaskIntoConstraints = false",141],["textField.translatesAutoresizingMaskIntoConstraints = false",127],["collectionView.translatesAutoresizingMaskIntoConstraints = false",125]],"useCount":6201},{"word":"true","context":[["XCTAssert(true, \"Pass\")",9334],["while (true) {",1609],["while true {",1649],["self.presentViewController(alert, animated: true, completion: nil)",1870],["tableView.deselectRowAtIndexPath(indexPath, animated: true)",2103],["dismissViewControllerAnimated(true, completion: nil)",2490],["self.dismissViewControllerAnimated(true, completion: nil)",3087],["if true {",5627],["return true",72803],["self.navigationController?.popViewControllerAnimated(true)",1577]],"useCount":239376},{"word":"trust","context":[["trust = TestTrusts.trustWithCertificates([",165],["XCTAssertTrue(serverTrustIsValid, \"server trust should pass evaluation\")",495],["XCTAssertFalse(serverTrustIsValid, \"server trust should not pass evaluation\")",315],["let serverTrust = TestTrusts.LeafValidDNSName.trust",263],["setRootCertificateAsLoneAnchorCertificateForTrust(trust)",195],["let serverTrust = TestTrusts.leafValidDNSName.trust",174],["SecTrustSetPolicies(trust, policies)",143],["let serverTrust = TestTrusts.LeafExpired.trust",126],["XCTAssertTrue(trustIsValid(trust), \"trust should be valid\")",105],["XCTAssertTrue(trustIsValid(trust), \"trust should be valid\")",105]],"useCount":5182},{"word":"try","context":[["try dbQueue.inDatabase { db in",1145],["try managedObjectContext.save()",1098],["let realm = try! Realm()",1025],["unknownFields = try unknownFieldsBuilder.build()",900],["self.unknownFields = try unknownFieldsBuilder.build()",900],["try checkInitialized()",900],["try! realm.write {",794],["let dbQueue = try makeDatabaseQueue()",721],["try coordinator.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)",721],["let ew0 = try T(from: vw0)",684]],"useCount":58802},{"word":"tvOS","context":[["#if os(iOS) || os(tvOS) || os(watchOS)",196],["#elseif os(iOS) || os(tvOS)",66],["@available(OSX 10.12, iOS 10.0, tvOS 10.0, watchOS 3.0, *)",96],["@available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)",119],["#if os(iOS) || os(watchOS) || os(tvOS)",134],["#elseif os(tvOS)",155],["#if os(tvOS)",308],["#if os(OSX) || os(iOS) || os(watchOS) || os(tvOS)",323],["#if !os(tvOS)",547],["#if os(iOS) || os(tvOS)",1106]],"useCount":4078},{"word":"txt","context":[["See http://swift.org/CONTRIBUTORS.txt for Swift project authors",551],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",8954],["// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",5747],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: %FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",195],["// RUN: %FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",164],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.dl.txt",127],["//\tprogram. If not, see <http://www.perfect.org/AGPL_3_0_With_Perfect_Additional_Terms.txt>.",104],["// RUN: FileCheck %s -check-prefix=WITH_PA < %t.txt",88]],"useCount":20262},{"word":"type","context":[["- parameter from: a `From` clause indicating the entity type",313],["switch self.type {",2399],["self.type = type",1285],["self.type = type",1285],["switch (lhs.type, rhs.type) {",965],["* @type {Number}",321],["switch type {",2559],["Retrieves the object at `path` from `json` and decodes it according to the return type",326],["// expected-error@-1 {{property cannot be marked @objc because its type cannot be represented in Objective-C}}",526],["switch (lhs.type, rhs.type) {",965]],"useCount":60189},{"word":"typealias","context":[["typealias b",295],["typealias d",346],["typealias RawValue = Int",300],["typealias B",295],["typealias e : e",372],["typealias Element",173],["typealias E",177],["typealias e",446],["typealias b {",204],["typealias e {",223]],"useCount":23166},{"word":"typecheck","context":[["// RUN: %target-swift-frontend %s -typecheck -verify",11],["// RUN: not %target-swift-frontend %s -typecheck",5223],["// RUN: %target-typecheck-verify-swift",354],["// RUN: not --crash %target-swift-frontend %s -typecheck",50],["// NSArray's need an element typecheck when the element type isn't AnyObject",19],["// RUN: %target-typecheck-verify-swift -parse-as-library",17],["// Even if the condition fails to typecheck, save it in the AST anyway; the old",15],["// RUN: %target-swift-frontend -typecheck -verify %s",13],["// RUN: %target-swift-frontend(mock-sdk: %clang-importer-sdk) -typecheck -verify %s",12],["// RUN: %target-swift-frontend %s -typecheck",11]],"useCount":5747},{"word":"types","context":[["// RUN: %FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",195],["// RUN: FileCheck %s -check-prefix=GLOBAL_NEGATIVE < %t.types.txt",517],["// RUN: FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",436],["// RUN: %FileCheck %s -check-prefix=WITH_GLOBAL_TYPES < %t.types.txt",164],["///                  that have the same service and factory types.",66],["return types",61],["// RUN: FileCheck %s -check-prefix=VAR_BASE_1_TYPES < %t.types.txt",60],["// objc_msgSend() for instances of CoreFoundation types.  We can't do that",60],["// RUN: FileCheck %s -check-prefix=VAR_DERIVED_1_TYPES < %t.types.txt",54],["// RUN: FileCheck %s -check-prefix=WITHOUT_GLOBAL_TYPES < %t.types.txt",72]],"useCount":5687},{"word":"typically","context":[["// Do any additional setup after loading the view, typically from a nib.",9879],["// resolve the remainder on completion. This assumes that a fresh start will typically end up with",14],["// parameter, typically a list. In the general case, this list is processed",15],["recover is invoked) thus you will typically place your catch at the end",15],["/// The Objective-C SEL type is typically an opaque pointer. Swift",16],["// Next: merge by domain and sum frecency, ordering by that sum and reducing to a (typically much lower) limit.",16],["This is typically combined with other `LogFormatter`s within a",16],["/// added to this builder); typically O(1).",17],["// customMirror implementation you would typically want to pass",26],["// we typically want to compare against the elementStack to see if it matches ops, *but*",25]],"useCount":10077},{"word":"u","context":[["let s = \"\\u{1F601}abc さ\\u{3099}し\\u{3099}す\\u{3099}せ\\u{3099}そ\\u{3099}\"",96],["switch u {",76],["//  智捷iOS课堂新浪微博：http://weibo.com/u/3215753973",92],["let s = \"\\u{1F601}abc さ\\u{3099}し\\u{3099}す\\u{3099}せ\\u{3099}そ\\u{3099}\"",96],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["return u",152],["let s = \"\\u{1F601}abc さ\\u{3099}し\\u{3099}す\\u{3099}せ\\u{3099}そ\\u{3099}\"",96],["let s = \"\\u{1F601}abc さ\\u{3099}し\\u{3099}す\\u{3099}せ\\u{3099}そ\\u{3099}\"",96],["let s = \"\\u{1F601}abc さ\\u{3099}し\\u{3099}す\\u{3099}せ\\u{3099}そ\\u{3099}\"",96],["let s = \"\\u{1F601}abc さ\\u{3099}し\\u{3099}す\\u{3099}せ\\u{3099}そ\\u{3099}\"",96]],"useCount":9695},{"word":"unavailable","context":[["fatalError(\"unavailable accessor can't be called\")",1359],["fatalError(\"unavailable function can't be called\")",1217],["@available(*, unavailable)",281],["@available(watchOS, unavailable)",256],["@available(OSX, unavailable)",225],["@availability(*, unavailable, renamed=\"intValue\")",92],["@availability(*, unavailable, renamed=\"int\")",92],["@availability(*, unavailable, renamed=\"uIntValue\")",92],["@availability(*, unavailable, renamed=\"uInt\")",92],["fatalError(\"unavailable property can't be accessed\")",80]],"useCount":9188},{"word":"unknownFields","context":[["unknownFields.writeDescriptionTo(&output, indent:indent)",662],["self.unknownFields = unknownFieldsBuilder.build()",547],["try unknownFields.writeTo(codedOutputStream: codedOutputStream)",551],["output += unknownFields.getDescription(indent: indent)",553],["fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",900],["fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))",900],["self.unknownFields = try unknownFieldsBuilder.build()",900],["unknownFields = try unknownFieldsBuilder.build()",900],["serialize_size += unknownFields.serializedSize()",1433],["hashCode = (hashCode &* 31) &+  unknownFields.hashValue",1447]],"useCount":14573},{"word":"unknownFieldsBuilder","context":[["unknownFields = unknownFieldsBuilder.build()",547],["let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)",26],["if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {",115],["var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)",246],["var unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)",275],["let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)",347],["if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {",547],["self.unknownFields = unknownFieldsBuilder.build()",547],["self.unknownFields = try unknownFieldsBuilder.build()",900],["unknownFields = try unknownFieldsBuilder.build()",900]],"useCount":4486},{"word":"unowned","context":[["[unowned self]",75],["MaterialAnimation.animationDisabled { [unowned self] in",54],["// -- strong +1, unowned +1",55],[".then { [unowned self] JSONItem -> Void in",55],[".error { [unowned self] error -> Void in",58],["}) { [unowned self] _ in",60],["dispatch_async(dispatch_get_main_queue()) { [unowned self] in",76],["dispatch_async(dispatch_get_main_queue(), { [unowned self] in",82],["animations: { [unowned self] in",107],["[unowned self] in",527]],"useCount":4400},{"word":"unsafeBitCast","context":[["expectEqual(identity1, unsafeBitCast(s1, to: Int.self))",539],["assert(identity1 == unsafeBitCast(d, to: Int.self))",462],["expectEqual(identity1, unsafeBitCast(s, to: Int.self))",427],["var identity1 = unsafeBitCast(d, to: Int.self)",364],["assert(identity1 == unsafeBitCast(d1, to: Int.self))",336],["assert(identity1 == unsafeBitCast(d, Int.self))",330],["var identity1 = unsafeBitCast(s, to: Int.self)",329],["expectEqual(identity1, unsafeBitCast(s1, Int.self))",385],["expectEqual(identity1, unsafeBitCast(s, Int.self))",305],["var identity1 = unsafeBitCast(d, Int.self)",260]],"useCount":8991},{"word":"up","context":[["//: User Interface Set up",245],["/// Creates an array of numbers (positive and/or negative) progressing from start up to but not including end.",91],["// set up http stub",75],["case .up:",74],["// If we still don't have a valid URL, something is broken. Give up.",59],["// Set up main view",58],["- returns: An XMLIndexer instance that is used to look up elements in the XML",58],["case up",56],["//  From now prevent keyboard manager to slide up the rootView to more than keyboard height. (Bug ID: #93)",52],["/// If set to true, chart continues to scroll after touch up",46]],"useCount":4689},{"word":"update","context":[["super.update()",461],["override func update(currentTime: CFTimeInterval) {",416],["func update() {",350],["public override func update() {",333],["self.update()",223],["override func update() {",149],["// Perform any setup necessary in order to update the view.",146],["// If there's an update, use NCUpdateResult.NewData",138],["update()",532],["// If there's no update required, use NCUpdateResult.NoData",138]],"useCount":8026},{"word":"upload","context":[[":returns: The created upload request.",408],["- returns: The created upload request.",289],["public func upload(",236],["Alamofire.upload(",137],["public func upload(URLRequest: URLRequestConvertible, stream: NSInputStream) -> Request {",107],["public func upload(URLRequest: URLRequestConvertible, file: NSURL) -> Request {",107],["public func upload(URLRequest: URLRequestConvertible, data: NSData) -> Request {",107],[":param: stream The stream to upload.",99],["case .Success(let upload, _, _):",97],["let expectation = expectationWithDescription(\"multipart form data upload should succeed\")",82]],"useCount":5884},{"word":"url","context":[["self.url = url",1065],["self.url = url",1065],["try coordinator.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)",721],["let url = self.applicationDocumentsDirectory.URLByAppendingPathComponent(\"SingleViewCoreData.sqlite\")",647],["let request = NSURLRequest(URL: url)",302],["if let url = url {",242],["let request = NSMutableURLRequest(URL: url)",346],["tester().tapViewWithAccessibilityIdentifier(\"url\")",525],["UIApplication.sharedApplication().openURL(url)",578],["return url",587]],"useCount":40618},{"word":"urlBar","context":[["urlBar.updateReaderModeState(ReaderModeState.Unavailable)",116],["make.top.equalTo(self.urlBar.snp_bottom)",114],["urlBar.updateTabCount(tabManager.count)",102],["urlBar.currentURL = tab.displayURL",63],["urlBar.updateReaderModeState(state)",58],["urlBar.SELdidClickCancel()",62],["func urlBarDidPressReload(urlBar: URLBarView) {",58],["func urlBar(urlBar: URLBarView, didSubmitText text: String) {",58],["func urlBar(urlBar: URLBarView, didSubmitText text: String) {",58],["func urlBarDidPressReaderMode(urlBar: URLBarView) {",58]],"useCount":4254},{"word":"urls","context":[["return urls[urls.count-1] as NSURL",286],["let urls = NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask)",1545],["return urls[urls.count-1]",930],["let urls = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)",106],["let urls = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)",106],["for url in urls {",116],["return urls[urls.count-1] as! NSURL",266],["return urls[urls.count-1] as! NSURL",266],["return urls[urls.count-1] as NSURL",286],["return urls[urls.count-1]",930]],"useCount":6611},{"word":"use","context":[["* Redistribution and use in source and binary forms, with or without",695],["//  If you use these solutions in your apps, you can give attribution to",504],["//  Redistribution and use in source and binary forms, with or without",498],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["// Release any cached data, images, etc that aren't in use.",419],["/// The image to use as an input image. For filters that also use a background image, this is the foreground image.",435],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1133],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1602],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",8160],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7676]],"useCount":36666},{"word":"used","context":[[":param: destination The closure used to determine the destination of the downloaded file.",217],["- parameter destination: The closure used to determine the destination of the downloaded file.",152],["- returns: The disposable object used to cancel the scheduled action (best effort).",171],["/// - Parameter key: The key that's used to subscript the receiver.",188],["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["- returns: a representation security object to be used with",148],["- warning: Only names of properties of a type conforming to the `AddableType` protocol can be used.",148],["- warning: Only names of properties of a type conforming to the `MinMaxType` protocol can be used.",146],["*  To mark both String and Int can be used in subscript.",142],["// Also import modules which are used by StdlibUnittest internally. This",343]],"useCount":16523},{"word":"user","context":[["// Update the user interface for the detail item.",368],["let user = User()",142],["components.append(\"-u \\(credential.user!):\\(credential.password!)\")",165],["if user != nil {",191],["success?(user: json.object)",417],["var user: User?",191],["return user",205],["self.user = user",283],["// This method is called when watch view controller is about to be visible to user",793],["self.user = user",283]],"useCount":14207},{"word":"userInfo","context":[["if let userInfo = notification.userInfo {",212],["userInfo: [",204],["let wrappedError = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",811],["func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {",200],["NSLog(\"Unresolved error \\(wrappedError), \\(wrappedError.userInfo)\")",811],["error = NSError(domain: \"YOUR_ERROR_DOMAIN\", code: 9999, userInfo: dict)",490],["userInfo: nil,",413],["NSLog(\"Unresolved error \\(error), \\(error!.userInfo)\")",1252],["NSLog(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")",858],["if let userInfo = notification.userInfo {",212]],"useCount":14892},{"word":"username","context":[["self.username = username",294],["self.username = username",294],["var username: String?",100],["public let username: String",66],["@IBOutlet weak var username: UITextField!",60],["\"username\": username,",60],["\"username\": username,",60],["sender.login(TestConfiguration.username, password: TestConfiguration.password)",58],["var username: String",58],["let username: String",111]],"useCount":5494},{"word":"using","context":[["// Get the new view controller using [segue destinationViewController].",848],["ctx.drawPath(using: .eoFill)",377],["Find a json in the complex data structuresby using the Int/String's array.",238],["// Get the new view controller using segue.destinationViewController.",6255],["The body part data will be encoded using the following format:",175],["/// - parameter path: `KeyPath`– can be appended using with `=>` or `=>?`",163],["Creates a JSON using the object.",142],["Creates a JSON using the data.",142],["func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {",101],["//debug or log, using + is faster than \\(var).",100]],"useCount":16751},{"word":"usually","context":[["// filled is usually drawn with less alpha",40],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["@param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.",110],["@param leftButtonTitle Title for leftBarButtonItem, usually 'Cancel'.",60],["@param text Title for rightBarButtonItem, usually 'Done'.",60],["usually superior to use proper locking constructs, such as `dispatch_semaphore_t`",14],["// If the caller didn't provide an icon (and they usually don't!),",15],["* - Note: URL paths are usually absolute and thus starts with a '/' (which you",17],["/// Represents something that can be “disposed,” usually associated with freeing",18],["//    @param rightButtonTitle Title for rightBarButtonItem, usually 'Done'.",30]],"useCount":4071},{"word":"v","context":[["v.removeFromSuperview()",188],["return v",1348],["assert(v!.value == 1020)",378],["assert(v!.value == 1030)",378],["assert(v!.value == 1010)",360],["set(v) {",310],["if v is NSNull {",247],["case .UNRECOGNIZED(let v): return \".UNRECOGNIZED(\\(v))\"",246],["case .UNRECOGNIZED(let v): return \".UNRECOGNIZED(\\(v))\"",246],["value = v",208]],"useCount":21949},{"word":"val","context":[["_yMin = val",121],["XCTAssertTrue(0 == val.count, \"\")",125],["_yMax = val",121],["if val != NSDateComponentUndefined {",117],["result.append(val)",86],["let val = e.value",80],["if (_yMin > val)",75],["if (_yMax < val)",75],["return val",454],["XCTAssertTrue(2 == val.count, \"\")",310]],"useCount":7058},{"word":"valid","context":[["if let valid = converted {",258],["valid = false",113],["///   - i: A valid index of the collection.",96],["/// \"past the end\" position that's not valid for use as a subscript.",103],["return valid",105],["XCTAssertTrue(trustIsValid(trust), \"trust should be valid\")",105],["/// A type that represents a valid position in the collection.",106],["if validate(valid) {",132],["/// `endIndex` is not a valid argument to `subscript`, and is always",246],["property = valid",262]],"useCount":7347},{"word":"value","context":[["it(\"should have the correct raw value\") {",870],["set (value) {",4929],["set(value) {",1966],["self.value = value",2495],["self.value = value",2495],["switch value {",1982],["return value",3834],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["self.init(value)",1210]],"useCount":190794},{"word":"values","context":[["/// Zips the values of all the given producers, in the manner described by",348],["values.append(value)",358],["/// values), according to the semantics of the given strategy.",179],["for value in values {",250],["/// Zips the values of all the given signals, in the manner described by",338],["return values",268],["expect(values) == []",228],["/// Combines the values of all the given producers, in the manner described by",359],["/// Combines the values of all the given signals, in the manner described by",337],["var values: [Int] = []",363]],"useCount":29123},{"word":"var","context":[["var output = \"\"",1905],["var error: NSError? = nil",2343],["var window: UIWindow?",21574],["var count = 0",1682],["var description: String {",2595],["var error: NSError?",3652],["public var description: String {",6709],["@IBOutlet weak var tableView: UITableView!",2091],["public var debugDescription: String {",1739],["var d = [String: JSON]()",1982]],"useCount":585288},{"word":"vc","context":[["self.addChildViewController(vc)",76],["vc.title = title",84],["let nav = UINavigationController(rootViewController: vc)",98],["presentViewController(vc, animated: true, completion: nil)",162],["let vc = UIViewController()",113],["self.presentViewController(vc, animated: true, completion: nil)",221],["navigationController?.pushViewController(vc, animated: true)",317],["vc.delegate = self",326],["self.navigationController?.pushViewController(vc, animated: true)",422],["return vc",479]],"useCount":4876},{"word":"verify","context":[["// RUN: %target-typecheck-verify-swift",354],["import SwiftyJSON\t//Use this to verify the JSON Object",50],["//verify header",114],["//verify body",49],["// verify path",75],["// verify request",106],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["// RUN: %target-parse-verify-swift",1640],["verify(view: cell)",55],["// RUN: %target-swift-frontend %s -parse -verify",47]],"useCount":12369},{"word":"version","context":[["// expected-note@-2 {{add 'if #available' version check}}",804],["// expected-note@-1 {{add 'if #available' version check}}",363],["//  version.",272],["* @version v2.2.15",345],["version: UInt32.max)",324],["self.version = version",204],["// expected-note@-3 {{add 'if #available' version check}}",120],["//  Mobilette template version 1.0",148],["@version 1.0",180],["self.version = version",204]],"useCount":9366},{"word":"view","context":[["// Do any additional setup after loading the view, typically from a nib.",9879],["// Configure the view for the selected state",2954],["return view",3099],["// Do any additional setup after loading the view.",6596],["// MARK: - Table view data source",3458],["// Get the new view controller using segue.destinationViewController.",6255],["self.view.layoutIfNeeded()",1871],["// Override to support editing the table view.",1677],["// Override to support conditional editing of the table view.",1645],["// Pass the selected object to the new view controller.",7085]],"useCount":134676},{"word":"viewController","context":[["return viewController",447],["let viewController = UIViewController()",96],["navigationController?.pushViewController(viewController, animated: true)",294],["self.navigationController?.pushViewController(viewController, animated: true)",158],["viewController.delegate = self",179],["addChildViewController(viewController)",98],["viewController.didMoveToParentViewController(self)",105],["super.pushViewController(viewController, animated: animated)",106],["self.viewController = viewController",154],["self.viewController = viewController",154]],"useCount":7539},{"word":"viewDidAppear","context":[["super.viewDidAppear(true)",152],["override public func viewDidAppear(animated: Bool) {",137],["super.viewDidAppear(animated);",61],["override func viewDidAppear(animated: Bool)",142],["super.viewDidAppear()",169],["public override func viewDidAppear(animated: Bool) {",193],["override func viewDidAppear() {",200],["override func viewDidAppear(_ animated: Bool) {",857],["super.viewDidAppear(animated)",4816],["override func viewDidAppear(animated: Bool) {",4971]],"useCount":12107},{"word":"viewDidLoad","context":[["override func viewDidLoad()",1561],["override public func viewDidLoad() {",765],["//        super.viewDidLoad()",94],["override func viewDidLoad(){",130],["open override func viewDidLoad() {",174],["super.viewDidLoad();",197],["override open func viewDidLoad() {",232],["super.viewDidLoad()",54326],["override func viewDidLoad() {",52244],["public override func viewDidLoad() {",932]],"useCount":111400},{"word":"viewPortHandler","context":[["viewPortHandler: viewPortHandler,",167],["_axisLineSegmentsBuffer[0].y = viewPortHandler.contentTop",124],["super.init(animator: animator, viewPortHandler: viewPortHandler)",228],["super.init(animator: animator, viewPortHandler: viewPortHandler)",228],["viewPortHandler: viewPortHandler,",167],["_axisLineSegmentsBuffer[1].y = viewPortHandler.contentBottom",124],["_axisLineSegmentsBuffer[1].x = viewPortHandler.contentRight",119],["_axisLineSegmentsBuffer[0].x = viewPortHandler.contentLeft",119],["if (!viewPortHandler.isInBoundsRight(barRect.origin.x))",112],["if (!viewPortHandler.isInBoundsRight(pt.x))",106]],"useCount":8144},{"word":"viewWillAppear","context":[["super.viewWillAppear()",155],["super.viewWillAppear(animated);",128],["super.viewWillAppear(animated)",7292],["override func viewWillAppear(animated: Bool) {",7024],["override func viewWillAppear(_ animated: Bool) {",1189],["public override func viewWillAppear(animated: Bool) {",412],["override func viewWillAppear(animated: Bool)",217],["override func viewWillAppear() {",209],["super.viewWillAppear(true)",198],["override public func viewWillAppear(animated: Bool) {",159]],"useCount":17669},{"word":"viewWillDisappear","context":[["open override func viewWillDisappear(_ animated: Bool) {",50],["super.viewWillDisappear()",39],["super.viewWillDisappear(true)",54],["override public func viewWillDisappear(animated: Bool) {",72],["override func viewWillDisappear() {",78],["override func viewWillDisappear(animated: Bool)",94],["public override func viewWillDisappear(animated: Bool) {",168],["override func viewWillDisappear(_ animated: Bool) {",474],["override func viewWillDisappear(animated: Bool) {",2403],["super.viewWillDisappear(animated)",2617]],"useCount":6361},{"word":"views","context":[["for view in views {",373],["options: NSLayoutFormatOptions.allZeros, metrics: nil, views: views))",69],["views:views))",346],["views:views))",346],["let views = [",152],["/// All views passed to this function will have",102],["views: views",86],["views: views",86],["options: NSLayoutFormatOptions.allZeros, metrics: nil, views: views))",69],["return views",71]],"useCount":6105},{"word":"w","context":[["f.append(w); f.append(w); f.append(w);",164],["f.append(w);",92],["k e.w == l> {",55],["func n<w>() -> (w, w -> w) -> w {",51],["func n<w>() -> (w, w -> w) -> w {",51],["func n<w>() -> (w, w -> w) -> w {",51],["w",87],["width: w,",57],["f.append(w); f.append(w); f.append(w);",164],["f.append(w); f.append(w); f.append(w);",164]],"useCount":4654},{"word":"waitForExpectations","context":[["waitForExpectations()",830],["waitForExpectations(timeout: 5, handler: nil)",565],["waitForExpectations(timeout: timeout, handler: nil)",513],["waitForExpectations(timeout: 1, handler: nil)",376],["waitForExpectations(withTimeout: timeout, handler: nil)",171],["self.waitForExpectations(timeout: 5.0, handler: nil)",134],["self.waitForExpectations()",168],["waitForExpectations(timeout: 10, handler: nil)",159],["waitForExpectations(timeout: 3, handler: nil)",152],["waitForExpectations(timeout: 1.0, handler: nil)",126]],"useCount":5192},{"word":"waitForExpectationsWithTimeout","context":[["waitForExpectationsWithTimeout(5, handler: nil)",469],["self.waitForExpectationsWithTimeout(2, handler: nil)",528],["waitForExpectationsWithTimeout(timeout, handler: nil)",843],["self.waitForExpectationsWithTimeout(10, handler: nil)",244],["waitForExpectationsWithTimeout(1, handler: nil)",1044],["waitForExpectationsWithTimeout(3, handler: nil)",255],["waitForExpectationsWithTimeout(defaultTimeout, handler: nil)",387],["self.waitForExpectationsWithTimeout(1, handler: nil)",405],["waitForExpectationsWithTimeout(10, handler: nil)",462],["waitForExpectationsWithTimeout(2, handler: nil)",429]],"useCount":11110},{"word":"want","context":[["// Return NO if you do not want the specified item to be editable.",528],["///     let line = \"BLANCHE:   I don't want realism. I want magic!\"",56],["///     // Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"",56],["// In future, we'll want to link to /settings and an upgrade page, respectively.",70],["//            // Put the code you want to measure the time of here.",132],["// Return NO if you do not want the item to be re-orderable.",525],["// Put the code you want to measure the time of here.",14709],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["// Return false if you do not want the specified item to be editable.",1475],["// Return false if you do not want the item to be re-orderable.",1078]],"useCount":28818},{"word":"warn_unused_result","context":[["@warn_unused_result(message=\"http://git.io/rxs.ud\")",92],["@warn_unused_result",8875],["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506],["@warn_unused_result(message=\"Did you forget to bind this quantifier to a property?\")",70],["@warn_unused_result(message=\"Did you forget to check the result?\")",64],["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250],["@warn_unused_result(message=\"http://git.io/rxs.uo\")",963],["// @warn_unused_result(message:\"http://git.io/rxs.uo\")",469],["@warn_unused_result(message=\"You must hold on to the NotificationToken returned from addNotificationBlock\")",39],["@warn_unused_result(message=\"Did you forget to use the property?\")",37]],"useCount":13470},{"word":"warning","context":[["log.warning(\"Received unexpected notification \\(notification.name)\")",85],["- warning: Only names of properties of a type conforming to the `MinMaxType` protocol can be used.",146],["- warning: Only names of properties of a type conforming to the `AddableType` protocol can be used.",148],["- warning: This method can only be called during a write transaction.",264],["// #warning Potentially incomplete method implementation.",553],["// #warning Incomplete method implementation.",558],["// #warning Incomplete implementation, return the number of rows",1124],["// #warning Incomplete implementation, return the number of sections",1130],[":warning: This method can only be called during a write transaction.",143],["// #warning Incomplete implementation, return the number of items",93]],"useCount":8759},{"word":"was","context":[["XCTAssertNotNil(response, \"ERROR!!! ClientRequest response object was nil\")",143],["//  is approved and a legal/financial contract was signed by the user.",127],["// file that was distributed with this source code",119],["* file that was distributed with this source code.",118],["//  This file was generated by the Clean Swift Xcode Templates so you can apply",132],["var failureReason = \"There was an error creating or loading the application's saved data.\"",1507],["- returns:      The instantiated object, or nil if no object was at the specified key.",84],["XCTAssertEqual(response!.statusCode, HTTPStatusCode.OK, \"HTTP Status code was \\(response!.statusCode)\")",70],["- parameter errorHandler: The function that will be called when there was an error",78],["Check the error message to determine what the actual problem was.",79]],"useCount":12940},{"word":"we","context":[["// we still draw stacked bars, but there is one non-stacked in between",66],["// Report any error we got.",1486],["// workaround is needed to link all required libraries in case we compile",343],["// It's possible that we do not need this offset anymore as it",89],["// FIXME: we should print the non-API param name rdar://20962472",80],["//: UI Elements we'll need to be able to access",76],["// If the dictionary is empty, we shouldn't be computing the hash value of",72],["// In future, we'll want to link to /settings and an upgrade page, respectively.",70],["/// This is how much (in pixels) into the dash pattern are we starting from.",70],["// If the set is empty, we shouldn't be computing the hash value of the",68]],"useCount":20469},{"word":"weak","context":[["[weak self] in",546],["@IBOutlet weak var scrollView: UIScrollView!",531],["@IBOutlet weak var nameLabel: UILabel!",945],["@IBOutlet weak var imageView: UIImageView!",1102],["@IBOutlet weak var collectionView: UICollectionView!",529],["@IBOutlet weak var titleLabel: UILabel!",1163],["@IBOutlet weak var tableView: UITableView!",2091],["@IBOutlet weak var window: NSWindow!",514],["@IBOutlet weak var mapView: MKMapView!",492],["@IBOutlet weak var label: UILabel!",458]],"useCount":43014},{"word":"webView","context":[["func webView(webView: WKWebView, didFailNavigation navigation: WKNavigation!, withError error: NSError) {",166],["func webView(webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {",179],["func webView(webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {",179],["func webViewDidStartLoad(webView: UIWebView) {",263],["func webView(webView: WKWebView, didFinishNavigation navigation: WKNavigation!) {",276],["func webViewDidFinishLoad(webView: UIWebView) {",401],["@IBOutlet weak var webView: UIWebView!",392],["webView.loadRequest(request)",367],["func webView(webView: WKWebView, didFinishNavigation navigation: WKNavigation!) {",276],["webView.delegate = self",310]],"useCount":16369},{"word":"when","context":[["// when",2237],["//when",224],["- throws: KuzzleError.IllegalState when state is .DISCONNECTED",231],["// This method is called when watch view controller is about to be visible to user",793],["- parameter completionHandler: Called when the image retrieved and set.",203],["/* Called when a touch begins */",187],["// In UI tests it is usually best to stop immediately when a failure occurs.",3633],["// This method is called when a local notification needs to be presented.",179],["- parameter placeholderImage:  A placeholder image when retrieving the image at URL.",180],["// This method is called when watch view controller is no longer visible",832]],"useCount":27677},{"word":"where","context":[["//: Playground - noun: a place where people can play",1899],["func g<T where T.E == F>(f: B<T>) {",121],["init <A: A where A.B == D>(e: A.B) {",137],["extension Array where Element: Equatable {",93],["where",1213],["///   `RandomAccessCollection`; otherwise, O(*n*), where *n* is the absolute",90],["// Playground - noun: a place where people can play",875],["where parser.isEmpty",435],["struct d<f : e, g: e where g.h == f.h> {",161],["class b<h : c, i : c where h.g == i> : a {",95]],"useCount":18103},{"word":"which","context":[["/// If `type` is `.Array`, return json which's object is `array[index]`, otherwise return null json with error.",110],["/// - note: This value is interpreted in the context of the calendar in which it is used.",105],["/// Returns a Disposable which can be used to interrupt the work associated",103],["/// - note: This value is interpreted in the context of the calendar with which it is used",110],["/// Ramp Time represents the speed at which parameters are allowed to change",289],["if (which == .Left)",302],["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["- returns: Data task which requests search to reddit.com.",183],["/// - parameter axis: - which axis should be used as a reference for the y-axis",120],["// Also import modules which are used by StdlibUnittest internally. This",343]],"useCount":13031},{"word":"while","context":[["while (codedInputStream.bytesUntilLimit() > 0) {",166],["} while true",176],["while(_readerOk > 0 && _currentNodeType != 0/*XML_READER_TYPE_NONE*/ && _complexTypeXmlDept < _currentXmlDept) {",211],["while let value = try parseFromDelimitedFromInputStream(input) {",347],["while let value = try parseDelimitedFrom(inputStream: inputStream) {",553],["while (true) {",1609],["while true {",1649],["while let (key, value) = iter.next() {",130],["while (input.bytesUntilLimit() > 0) {",157],["fields: while true {",162]],"useCount":13698},{"word":"whiteColor","context":[["self.window!.backgroundColor = UIColor.whiteColor()",276],["backgroundColor = UIColor.whiteColor()",297],["self.backgroundColor = UIColor.whiteColor()",379],["label.textColor = UIColor.whiteColor()",429],["view.backgroundColor = UIColor.whiteColor()",743],["self.view.backgroundColor = UIColor.whiteColor()",867],["window?.backgroundColor = UIColor.whiteColor()",193],["self.navigationController?.navigationBar.tintColor = UIColor.whiteColor()",186],["UIColor.whiteColor().setFill()",180],["UINavigationBar.appearance().tintColor = UIColor.whiteColor()",177]],"useCount":9637},{"word":"width","context":[["var width: CGFloat {",145],["return self.frame.size.width",154],["barRect.size.width = right - left",152],["let rect = CGRect(x: 0, y: 0, width: size.width, height: size.height)",147],["self.preferredContentSize = CGSize(width: 320.0, height: 600.0)",173],["let rect = CGRect(x: 0, y: 0, width: size.width, height: size.height)",147],["self.width = width",304],["return CGSize(width: width, height: height)",190],["self.width = width",304],["return CGSize(width: width, height: height)",190]],"useCount":36378},{"word":"will","context":[["If validation fails, subsequent calls to response handlers will have an associated error.",245],["context(\"these will pass\") {",213],["describe(\"these will fail\") {",207],["it(\"will eventually fail\") {",202],["it(\"will eventually pass\") {",200],["/// If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",196],["The body part data will be encoded using the following format:",175],["/// All views passed to this function will have",102],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["If `startRequestsImmediately` is `true`, the request will have `resume()` called before being returned.",642]],"useCount":29879},{"word":"willSet","context":[["willSet {",3365],["willSet {}",139],["willSet  {",46],["willSet(newValue) {",320],["willSet{",251],["willSet(v) {",50],["willSet { }",85],["func willSet(_: () -> Int) {}",39],["// CHECK-NEXT: {{^}} final willSet {}",38],["willSet(newTotalSteps) {",31]],"useCount":5030},{"word":"window","context":[["self.window = UIWindow(frame: UIScreen.mainScreen().bounds)",753],["@IBOutlet weak var window: NSWindow!",514],["self.window?.makeKeyAndVisible()",504],["self.window!.makeKeyAndVisible()",487],["/* Set the scale mode to scale to fit the window */",363],["window.makeKeyAndVisible()",350],["var window: UIWindow?",21574],["let splitViewController = self.window!.rootViewController as! UISplitViewController",295],["window = UIWindow(frame: UIScreen.mainScreen().bounds)",756],["window?.makeKeyAndVisible()",919]],"useCount":35411},{"word":"with","context":[["//  Redistribution and use in source and binary forms, with or without",498],["*\t\tand/or other materials provided with the distribution.",550],["Redistribution and use in source and binary forms, with or without",384],[":param: alpha A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",4310],["let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))",553],["stackTrace: SourceLocStack().with(test.loc))",619],["* Redistribution and use in source and binary forms, with or without",695],["// Replace this with code to handle the error appropriately.",1404],["- parameter alpha: A CGFloat between 0.0 and 1.0 representing the opacity with a default value of 1.0.",1501],["// Replace this implementation with code to handle the error appropriately.",1739]],"useCount":60373},{"word":"withEvent","context":[["super.touchesBegan(touches, withEvent: event)",539],["override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {",445],["override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {",308],["super.touchesEnded(touches, withEvent: event)",303],["override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {",293],["override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {",290],["super.touchesMoved(touches, withEvent: event)",184],["super.touchesCancelled(touches, withEvent: event)",183],["override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",1186],["public override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {",159]],"useCount":7297},{"word":"withRowAnimation","context":[["self.tableView.insertSections(NSIndexSet(index: sectionIndex), withRowAnimation: .Fade)",96],["tableView.insertRowsAtIndexPaths([newIndexPath!], withRowAnimation: .Fade)",182],["self.tableView.insertRowsAtIndexPaths([indexPath], withRowAnimation: .Automatic)",167],["tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Automatic)",99],["tableView.deleteRowsAtIndexPaths([indexPath!], withRowAnimation: .Fade)",192],["self.tableView.deleteSections(NSIndexSet(index: sectionIndex), withRowAnimation: .Fade)",97],["tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Automatic)",85],["tableView.reloadRowsAtIndexPaths([indexPath], withRowAnimation: .None)",67],["withRowAnimation: .Automatic)",65],["tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Fade)",1967]],"useCount":4641},{"word":"without","context":[["// Redistribution and use in source and binary forms, with or without modification,",195],["// Redistribution and use in source and binary forms, with or without",81],["/// If this is e.g. set to 10, no more than 10 values on the x-axis can be viewed at once without scrolling.",79],["//    Redistribution and use in source and binary forms, with or without",67],["/// The number of elements the buffer can store without reallocation.",57],["//  Redistribution and use in source and binary forms, without",127],["Redistribution and use in source and binary forms, with or without modification,",216],["Redistribution and use in source and binary forms, with or without",384],["* Redistribution and use in source and binary forms, with or without",695],["//  Redistribution and use in source and binary forms, with or without",498]],"useCount":4827},{"word":"write","context":[["try! realm.write {",794],["realm.write {",478],["Realm().write {",73],["target.write(\"(\")",75],["// Check that the property is read-write.",78],["- warning: This method can only be called during a write transaction.",264],[":warning: This method can only be called during a write transaction.",143],["let _ = try? realm.write {",126],["try realm.write {",125],["try! Realm().write {",105]],"useCount":7608},{"word":"x","context":[["var x = x",807],["var x = x",807],["return x",2286],["switch x {",762],["self.x = x",692],["self.x = x",692],["x += 1",403],["var x = 0",396],["x = 0",379],["/// - parameter xAxisDuration: duration for animating the x axis",352]],"useCount":102810},{"word":"xIndex","context":[["xIndex: xIndex,",68],["CGFloat(cur.xIndex) - curDx,",68],["pt.x = CGFloat(e.xIndex)",71],["/// - returns: the first Entry object found at the given xIndex with binary search.",59],["prevDx = CGFloat(cur.xIndex - prevPrev.xIndex) * intensity",58],["/// - parameter xIndex:",256],["xIndex: CGFloat,",101],["xIndex xIndex: CGFloat,",84],["xIndex: xIndex,",68],["xIndex xIndex: CGFloat,",84]],"useCount":6031},{"word":"xs","context":[["XCTAssertEqual(xs.subscriptions, [",2088],["XCTAssert(xs.subscriptions == [UnsunscribedFromHotObservable])",132],["XCTAssertEqual(xs.recordedEvents[2].value.subscriptions, [",133],["XCTAssert(xs.subscriptions == [SubscribedToHotObservable])",185],["let xs = scheduler.createColdObservable([",189],["XCTAssertEqual(xs.subscriptions, subscriptions)",192],["XCTAssertEqual(xs.subscriptions, correctSubscriptions)",528],["let xs = scheduler.createHotObservable([",2361],["XCTAssertEqual(xs.recordedEvents[6].value.subscriptions, [",131],["XCTAssertEqual(xs.recordedEvents[3].value.subscriptions, [",126]],"useCount":11198},{"word":"y","context":[["return y",570],["/// - parameter axis: which axis should be used as a reference for the y-axis",189],["self.y = y",456],["self.y = y",456],["/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.",198],["return x + y",204],["var position = CGPoint(x: 0.0, y: 0.0)",237],["/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.",326],["y: 0,",327],["/// - parameter yAxisDuration: duration for animating the y axis",352]],"useCount":59673},{"word":"you","context":[["// Put the code you want to measure the time of here.",14709],["// In a storyboard-based application, you will often want to do a little preparation before navigation",7403],["@warn_unused_result(message=\"Did you forget to call `start` on the producer?\")",1506],["// Return false if you do not want the specified item to be editable.",1475],["@warn_unused_result(message=\"Did you forget to call `observe` on the signal?\")",1250],["// Return false if you do not want the item to be re-orderable.",1078],["// Only override drawRect: if you perform custom drawing.",839],["// Return NO if you do not want the item to be re-orderable.",525],["// Return NO if you do not want the specified item to be editable.",528],["//  If you use these solutions in your apps, you can give attribution to",504]],"useCount":39264},{"word":"your","context":[["//  If you use these solutions in your apps, you can give attribution to",504],["// After populating your dynamic notification interface call the completion block.",362],["// Populate your dynamic notification interface as quickly as possible.",322],["// Insert code here to add functionality to your managed object subclass",538],["// Perform any final initialization of your application.",230],["/* Setup your scene here */",183],["// Insert code here to initialize your application",895],["// Insert code here to tear down your application",1167],["// Use XCTAssert and related functions to verify your tests produce the correct results.",8697],["//  to delete and recreate this implementation file for your updated model.",759]],"useCount":17249},{"word":"z","context":[["return z({",75],["values!(x: valX, y: valY, z: valZ)",51],["XCTAssertTrue(json[\"z\"] == \"zoo\")",52],["let z = (Int16(data.data.4) & 0xff) | (Int16(data.data.5) << 8)",58],["_ = z",59],["func b(z: (((Any, Any) -> Any) -> Any)) -> Any {",61],["if (z) {",90],["return z",172],["self.z = z",149],["self.z = z",149]],"useCount":5461},{"word":"zero","context":[["return CGSize.zero",133],["return zero",80],["return .zero",79],["var frame1 = CGRect.zero",68],["super.init(frame: .zero)",135],["self.init(frame: CGRect.zero)",188],["/// reachable from `startIndex` by zero or more applications of",246],["super.init(frame: CGRect.zero)",470],["var frame = CGRect.zero",57],["self.init(frame: .zero)",56]],"useCount":5761}]