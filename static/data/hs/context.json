[{"word":"A","context":[["import qualified Data.Aeson as A",591],["import qualified Text.Blaze.Html5.Attributes as A",465],[", arbitraryValue = FIXChar <$> (return 'A') }",303],["-- A powerful optimization can be serving static files from a separate",130],["import qualified Data.Array as A",147],["import A",148],["import qualified Data.Attoparsec.Text as A",150],["-- | A name-spaced GUID (for example,",151],["import qualified Reporting.Annotation as A",284],["module A where",239]],"useCount":52414},{"word":"AWS","context":[["import           Network.AWS.Lens",2786],["import           Network.AWS.Response",5228],["import Network.AWS.Prelude",3425],["import Network.AWS.Request.Query",1565],["import Network.AWS.Request.JSON",1260],["import           Network.AWS.Request",5231],["import           Network.AWS.EC2.Types",548],["import           Network.AWS.Pager",560],["import Network.AWS.Data (Object)",623],["import           Network.AWS.Prelude",5964]],"useCount":45234},{"word":"Abs","context":[["=> Maybe (Path Abs Dir)",142],["-> m (Path Abs Dir)",153],["-> m (Path Abs File)",261],["-> Path Abs File",337],["=> Path Abs Dir",386],["-> Path Abs Dir",455],["-> m (Maybe (Path Abs File))",131],["=> Maybe (Path Abs File)",105],["-> Path Abs File -- ^ destination",80],["(Path Abs File) -- stack.yaml",76]],"useCount":9882},{"word":"Aeson","context":[["import qualified Data.Aeson",302],["((Data.Aeson..=)",340],["import           Data.Aeson.Types",280],["import qualified Data.Aeson as A",591],["import Data.Aeson",4087],["import           Data.Aeson",1807],["import Data.Aeson.Types",629],["import Data.Aeson.TH",453],["import qualified Data.Aeson as Aeson",357],["import qualified Data.Aeson as Aeson",357]],"useCount":15152},{"word":"All","context":[["import HSE.All",54],["import Graphics.Vty.Widgets.All",56],["-- All dynamic flags, minus package flags, present in GHC.",58],["-- resource pattern. All of your resource patterns are defined in",135],["import Test.QuickCheck.All (quickCheckAll)",60],["-- All dynamic flags present in GHC.",58],["return (All True)",53],["import MFlow.Wai.Blaze.Html.All",52],["-- All of the cmm subflags (there are a lot!)  Automatically",45],["import Test.QuickCheck.All",170]],"useCount":7255},{"word":"An","context":[["-- An exception will be thrown in the case of an empty ByteString.",180],["-- | An error indicating that an 'IO' operation failed because",77],["noMsg = Default \"An error has occurred\"",80],["-- | An identity pool ID in the format REGION:GUID.",87],["-- | An optional pagination token provided by a previous",48],["-- successful state is reached. An error is returned after 40 failed checks.",51],["-- | An optional marker returned from a prior request. Use this marker for",52],["-- An example type and instance:",61],["-- | An optional pagination token provided by a previous request. If this",60],["app = makeSnaplet \"app\" \"An snaplet example application.\" Nothing $ do",57]],"useCount":6990},{"word":"ApiAnnotation","context":[["-- | - 'ApiAnnotation.AnnKeywordId' : 'ApiAnnotation.AnnOpen',",123],["-- | - 'ApiAnnotation.AnnKeywordId' : 'ApiAnnotation.AnnOpen',",123],["--           'ApiAnnotation.AnnClose'",109],["--         'ApiAnnotation.AnnClose'",104],["--  - 'ApiAnnotation.AnnKeywordId' : 'ApiAnnotation.AnnOpen',",169],["-- ^ - 'ApiAnnotation.AnnKeywordId' : 'ApiAnnotation.AnnOpen',",172],["-- ^ - 'ApiAnnotation.AnnKeywordId' : 'ApiAnnotation.AnnOpen',",172],["-- ^ - 'ApiAnnotation.AnnKeywordId' : None",201],["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["--  - 'ApiAnnotation.AnnKeywordId' : 'ApiAnnotation.AnnOpen',",169]],"useCount":17609},{"word":"App","context":[["instance YesodAuth App where",212],["data App = App",480],["data App = App",480],["instance Yesod App where",304],["instance RenderMessage App FormMessage where",288],["mkYesodDispatch \"App\" resourcesApp",286],["mkYesodData \"App\" $(parseRoutesFile \"config/routes\")",259],["instance YesodPersist App where",228],["type AuthId App = UserId",186],["type Form x = Html -> MForm (HandlerT App IO) (FormResult x, Widget)",175]],"useCount":14157},{"word":"Applicative","context":[["import Control.Applicative ((<|>))",459],["import Control.Applicative",19029],["import Control.Applicative ((<$>))",5367],["import           Control.Applicative",5016],["import Options.Applicative",1020],["import Control.Applicative ((<$>), (<*>))",979],["import           Options.Applicative",508],["import           Control.Applicative ((<$>))",393],["import Control.Applicative (Applicative(..))",389],["import Control.Applicative (Applicative(..))",389]],"useCount":48602},{"word":"Array","context":[["import Data.Array",1942],["import Data.Array.MArray",158],["import Foreign.Marshal.Array",850],["import Data.Array.Unboxed",469],["import Data.Array.IArray",330],["import Data.Array.IO",260],["import qualified Data.Array as A",147],["import Data.Array.ST",313],["import Array",160],["import Data.Array.Base",161]],"useCount":15573},{"word":"Arrow","context":[["import           Control.Arrow ((&&&))",158],["import           Control.Arrow (second)",88],["import           Control.Arrow (first)",102],["import Control.Arrow (first, second)",143],["import Control.Arrow ((***))",383],["import           Control.Arrow",532],["import Control.Arrow (first)",565],["import Control.Arrow ((&&&))",583],["import Control.Arrow (second)",631],["import Control.Arrow",2853]],"useCount":9123},{"word":"Autolib","context":[["import Autolib.Size",528],["import Autolib.TES",132],["import Autolib.Hash",188],["import Autolib.Util.Zufall",201],["import Autolib.Reporter",609],["import Autolib.TES.Identifier",424],["import Autolib.Set",610],["import Autolib.Reader",990],["import Autolib.ToDoc",1782],["import Autolib.FiniteMap",467]],"useCount":7869},{"word":"B","context":[["-> B.ByteString",196],["import qualified Data.ByteString as B",4410],["import qualified Data.ByteString.Char8 as B",1791],["import qualified Data.ByteString.Lazy as B",936],["import qualified Data.ByteString.Lazy.Char8 as B",378],["module B where",242],["import qualified Text.Pandoc.Builder as B",190],["import qualified Data.Binary as B",189],["import qualified Data.ByteString.Unsafe as B",181],[",[W,W,W,W,B,W,W,W,B,W,W,W]",159]],"useCount":34291},{"word":"BS","context":[["import Data.ByteString as BS",139],["import qualified Data.ByteString      as BS",87],["import qualified Data.ByteString as BS",3683],["import qualified Data.ByteString.Char8 as BS",1572],["import qualified Data.ByteString.Lazy as BS",844],["import qualified Data.ByteString.Lazy.Char8 as BS",278],["-> BS.ByteString",184],["import qualified Data.ByteString.Lazy.Char8 as BS.Char8",140],["| otherwise   = BS.concat [prefix, line]",102],["import qualified Data.ByteString            as BS",91]],"useCount":13277},{"word":"BangPatterns","context":[["{-# LANGUAGE BangPatterns, OverloadedStrings #-}",105],["{-# LANGUAGE BangPatterns, DataKinds, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",811],["{-# LANGUAGE BangPatterns          #-}",105],["{-# LANGUAGE CPP, BangPatterns #-}",121],["{-# LANGUAGE BangPatterns      #-}",147],["{-# LANGUAGE BangPatterns               #-}",186],["{-# LANGUAGE BangPatterns        #-}",190],[", BangPatterns",260],["{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",404],["{-# LANGUAGE BangPatterns #-}",3594]],"useCount":8065},{"word":"Base","context":[["import GHC.Base",1378],["-- Base interface functions are in:",1344],["import Data.Array.Base",161],["import Control.Exception.Base",176],["Data.Aeson.Types.String str -> do GHC.Base.return str",196],["import Control.Monad.Base",286],["import Qtc.Core.Base (Qcs, connectSlot, qtc_connectSlot_int, wrapSlotHandler_int)",308],["import Base",442],["import Qtc.Enums.Base",1248],["import Qtc.Classes.Base",1252]],"useCount":14113},{"word":"Bin","context":[["Bin _ kx x l r",51],["| otherwise -> Bin (1+ls+rs) k x l r",62],["go f kx x (Bin sy ky y l r) =",64],["Bin p m l r",365],["go z' (Bin _ _ l r) = go (go z' r) l",77],["Tip -> Bin 1 k x Tip Tip",62],["go z' (Bin _ _ l r) = go (go z' l) r",74],["case t of Bin _ m l r | m < 0 -> go (go z r) l -- put negative numbers before",72],["case t of Bin _ m l r | m < 0 -> go (go z l) r -- put negative numbers before",72],["Just x' -> Bin sx kx x' l r",71]],"useCount":11644},{"word":"Binary","context":[["import Binary",364],["import           Data.Binary",408],["import Data.Binary.Put",666],["import Data.Binary.Get",848],["import Data.Binary",1922],["import qualified Data.Binary as B",189],["import Data.Binary (Binary)",239],["import Data.Binary (Binary)",239],["{-! derive: Binary !-}",250],["import qualified Data.Conduit.Binary as CB",271]],"useCount":22720},{"word":"Bind","context":[["return (Bind x (Hole t) sc)",47],["return $ Bind x (Guess ty val) sc",123],["import Bind.Marshal.Prelude",114],["bname (Bind n _ _) = Just n",66],["import Bind.Marshal.Action.Base",60],["import Bind.Marshal.Verify",55],["-- Since everything in a Bind is mutually recursive we need rename all",43],["-- Bind all the names mainly to avoid repeated use of explicit strings.",43],["import Bind.Marshal.DesAction.Static",42],["import Data.Functor.Bind",155]],"useCount":9132},{"word":"Bits","context":[["import Data.Bits (xor)",105],[", 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)",106],[", 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)",106],["import Data.Bits",128],[", 0x80 + oc Data.Bits..&. 0x3f",159],["import Data.Bits ((.&.))",175],["import           Data.Bits",453],["import Data.Bits",4178],["import Data.Bits ((.|.))",100],["import Data.Bits (shiftL)",75]],"useCount":8250},{"word":"Bool","context":[["-> Bool",3413],["Bool",291],["QueryParam \"pp\" Bool :>",407],["-> IO Bool",387],["-> m Bool",365],["| Bool Bool",308],["| Bool Bool",308],["=> Bool",210],["import Data.Bool",189],["isLeft :: Either a b -> Bool",177]],"useCount":110089},{"word":"Brendan","context":[["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622],["-- Maintainer  : Brendan Hay <brendan@soundcloud.com>",37]],"useCount":13659},{"word":"Builder","context":[["import qualified Text.Pandoc.Builder as B",190],["import Blaze.ByteString.Builder",178],["import Data.ByteString.Builder",154],["import           Blaze.ByteString.Builder",134],["import Data.Text.Lazy.Builder",124],["-> Builder",118],["import           Data.ByteString.Builder",112],["import qualified Data.ByteString.Builder as B",100],["import           Options.Applicative.Builder.Extra",97],["import Text.Pandoc.Builder",187]],"useCount":7700},{"word":"But","context":[["-- But more efficiently than using length on the intermediate list.",63],["All this can be dealt with by the *renamer*. But the type checker needs",38],["-- can choose a specific path to list like @--global-stack-root@. But",38],["But that superclass selector can't (yet) appear in a coercion",39],["But if we see this:",43],["-- But we do NOT bring the binders of 'binds' into scope",43],["-- compiling as for linking. But for repl we have to do just",43],["we run into a type mismatch in TcUnify, we normally just emit an error. But it",45],["emit an error with `reportUnsolved`. But we can also replace the right-hand side",45],["But the following are all 'False':",81]],"useCount":12216},{"word":"ByteString","context":[["import qualified Data.ByteString.Lazy as L",2318],["import qualified Data.ByteString as BS",3683],["import Data.ByteString (ByteString)",3262],["import Data.ByteString (ByteString)",3262],["(\"application/x-amz-json-1.1\" :: ByteString)])",2165],["import qualified Data.ByteString.Char8 as B",1791],["import qualified Data.ByteString.Lazy as BL",1629],["import qualified Data.ByteString.Char8 as BS",1572],["import qualified Data.ByteString as S",1205],["import qualified Data.ByteString as B",4410]],"useCount":106107},{"word":"C","context":[["C.SBlank,",642],["import Foreign.C.Types",2531],["import Foreign.C",1406],["import Foreign.C.String",949],["import qualified Data.ByteString.Char8 as C",745],["class C a where",661],["import Foreign.C.Types",589],["import Foreign.C",482],["import qualified Ganeti.Constants as C",477],["C.Blank,",427]],"useCount":64913},{"word":"CInt","context":[["import Foreign.C.Types (CInt)",84],["slotHandlerWrapper_int :: Ptr fun -> Ptr () -> Ptr (TQObject c) -> CInt -> IO ()",894],["-> IO CInt",484],["-> CInt",275],["-> IO CInt",186],["alignment _ = alignment (undefined :: CInt)",163],["screenWidth, screenHeight :: CInt",152],["import Foreign.C.Types (CInt(..))",72],["-> CInt",135],["-> Ptr CInt",124]],"useCount":8774},{"word":"CPP","context":[["{-# LANGUAGE CPP                #-}",160],["{-# LANGUAGE CPP, NoImplicitPrelude #-}",161],["{-# LANGUAGE CPP                 #-}",225],["{-# LANGUAGE CPP                        #-}",272],["{-# LANGUAGE CPP",273],["{-# LANGUAGE CPP, ScopedTypeVariables #-}",274],["{-# LANGUAGE CPP               #-}",276],["{-# LANGUAGE CPP, DeriveDataTypeable #-}",284],["{-# LANGUAGE CPP #-}",12367],["{-# LANGUAGE CPP                   #-}",160]],"useCount":20035},{"word":"Cabal","context":[["(Cabal.buildOptions progConf showOrParseArgs)",54],["the package chagnes, so during registration Cabal calls ghc --abi-hash",43],["import qualified Distribution.Package as Cabal",45],["++ \" break the parser in earlier Cabal versions so you need to \"",52],["parent = Cabal.buildCommand defaultProgramConfiguration",52],["import qualified Distribution.Simple.Setup as Cabal",160],["-- Cabal",144],["-- Perform path/URL variable substitution as per the Cabal ${pkgroot} spec",68],["-- backwards compatibility.  Cabal uses -XHaskell98 by",60],["Cabal.defaultBuildFlags, mempty),",54]],"useCount":7656},{"word":"Char","context":[["import Data.Char (isDigit)",334],["symbol :: Parser Char",260],["import qualified Data.Char as Char",390],["import qualified Data.Char as Char",390],["import Data.Char (toUpper)",417],["import Data.Char (ord)",569],["import Data.Char (isSpace)",854],["import Data.Char (toLower)",895],["import           Data.Char",976],["import Data.Char",8422]],"useCount":45930},{"word":"Char8","context":[["import qualified Data.ByteString.Char8 as BC",708],["import qualified Data.ByteString.Char8 as C",745],["import qualified Data.ByteString.Char8 as BS",1572],["import qualified Data.ByteString.Char8 as S8",658],["import qualified Data.ByteString.Char8 as B8",626],["import qualified Data.ByteString.Char8 as BSC",480],["import qualified Data.ByteString.Lazy.Char8 as BL",425],["import qualified Data.ByteString.Lazy.Char8 as L",420],["import qualified Data.ByteString.Lazy.Char8 as B",378],["import qualified Data.ByteString.Char8 as B",1791]],"useCount":16441},{"word":"Check","context":[["-- | Check whether the vector is empty",51],["import Distribution.PackageDescription.Check",49],["-- | /O(n)/ Check if any element is 'True'",49],["-- | /O(n)/ Check if all elements are 'True'",49],["-- | /O(n)/ Check if the vector contains an element",64],["-- | /O(n)/ Check if any element satisfies the predicate.",64],["-- | /O(n)/ Check if the vector does not contain an element (inverse of 'elem')",64],["-- | /O(n)/ Check if all elements satisfy the predicate.",64],["-- Check for duplicated names in a binding group",56],["-- | Check (and potentially disable) any extensions that aren't allowed",60]],"useCount":10276},{"word":"Class","context":[["import Class",1062],["import Control.Monad.IO.Class (MonadIO, liftIO)",396],["import Data.Default.Class",293],["import Control.Monad.IO.Class (MonadIO)",265],["import Control.Monad.Trans.Class (lift)",657],["import Control.Monad.Trans.Class",1180],["import Control.Monad.IO.Class (liftIO)",1498],["import           Control.Monad.IO.Class",1642],["import Control.Monad.IO.Class (MonadIO(..))",1993],["import Control.Monad.IO.Class",3662]],"useCount":26933},{"word":"Client","context":[["import Network.HTTP.Client",258],["import Distribution.Client.Dependency.Modular.Package",162],["import Distribution.Client.Config",146],["import           Network.HTTP.Client.Conduit (HasHttpManager)",182],["import qualified Distribution.Client.InstallPlan as InstallPlan",192],["import           Network.HTTP.Client",196],["import Distribution.Client.Targets",229],["import Distribution.Client.Types",452],["import Distribution.Client.Setup",282],["import Distribution.Client.Dependency.Types",236]],"useCount":11307},{"word":"CmmExpr","context":[["-> CmmExpr",393],["-> CmmExpr -> CmmExpr -> NatM Register",201],["-> CmmExpr -> CmmExpr -> NatM Register",201],["-> [CmmExpr]",179],["import CmmExpr",125],["-> CmmExpr      -- the condition on which to branch",64],["getCondCode :: CmmExpr -> NatM CondCode",57],["coerceInt2FP :: Width -> Width -> CmmExpr -> NatM Register",56],["coerceFP2Int :: Width -> Width -> CmmExpr -> NatM Register",56],["getRegister :: CmmExpr -> NatM Register",56]],"useCount":10255},{"word":"Coercion","context":[["= Coercion <$> tcIfaceCo co",31],["-> TcM Coercion",68],["import Coercion ( Role(..) )",31],["Coercion imports Type",33],["import {-# SOURCE #-} Coercion",33],["-> [Coercion]",38],["-- See Note [Coercion evidence terms]",42],["import Coercion",645],["import Data.Type.Coercion",58],["-> Coercion",114]],"useCount":9028},{"word":"Common","context":[["import Common.Id",1197],["import Common.DocUtils",781],["import Common.Result",867],["import Common",747],["import Common.Doc",527],["import Common.AS_Annotation",804],["import Common.LibName",289],["import qualified Common.Lib.Rel as Rel",279],["import Common.ExtSign",268],["import Common.GlobalAnnotations",258]],"useCount":17227},{"word":"Concurrent","context":[["import Control.Concurrent.Async",607],["import Control.Concurrent",5089],["import Control.Concurrent.STM",2082],["import Control.Concurrent.MVar",1679],["import Control.Concurrent (threadDelay)",1061],["import           Control.Concurrent",916],["import Control.Concurrent (forkIO)",720],["import Control.Concurrent.Chan",355],["import           Control.Concurrent.MVar",361],["import           Control.Concurrent.STM",531]],"useCount":18807},{"word":"Conduit","context":[["import qualified Data.Conduit.Binary as CB",271],["import           Network.HTTP.Conduit",202],["import qualified Data.Conduit as C",288],["import Network.HTTP.Conduit",572],["import           Data.Conduit",577],["import           Network.HTTP.Client.Conduit (HasHttpManager)",182],["import Network.HTTP.Conduit (Manager)",179],["import Network.HTTP.Conduit (newManager, def)",92],["import qualified Data.Conduit.List as CL",857],["import Data.Conduit",1031]],"useCount":7441},{"word":"Config","context":[["defaultConfig :: Config",202],["import Yesod.Default.Config",472],["data Config = Config",487],["data Config = Config",487],["import Config",1125],["data Config = Config {",200],["data Config = Config {",200],["import           Stack.Types.Config",197],["module Config where",197],["import qualified Lamdu.Config as Config",193]],"useCount":12151},{"word":"Control","context":[["import Control.Applicative",19029],["import Control.Monad",26938],["import Control.Monad.State",5870],["import Control.Exception",5663],["import Control.Applicative ((<$>))",5367],["import Control.Concurrent",5089],["import           Control.Applicative",5016],["import Control.Lens",4627],["import           Control.Monad",4338],["import Control.Monad.IO.Class",3662]],"useCount":234064},{"word":"Core","context":[["import Idris.Core.CaseTree",346],["import Qtc.Classes.Core",627],["import Idris.Core.Evaluate",668],["import Qtc.ClassTypes.Core",982],["import Idris.Core.TT",1110],["import Qth.ClassTypes.Core",1534],["import Idris.Core.Typecheck",335],["import Yesod.Core",338],["import Qtc.Enums.Classes.Core",341],["import Qtc.Enums.Core.Qt",561]],"useCount":39060},{"word":"CoreExpr","context":[["CoreExpr -> CoreExpr -> CoreExpr",54],["-- CoreExpr's of the \"smart constructors\" of the Meta.Exp datatype.",44],["-> (UsageDetails, CoreExpr)",45],["-> CoreExpr",332],["-> DsM CoreExpr",203],["-> DsM (CoreExpr,       -- desugared expression",144],["=> Rewrite c m CoreExpr",71],["-> IfL (AltCon, [TyVar], CoreExpr)",62],["CoreExpr -> CoreExpr -> CoreExpr",54],["CoreExpr -> CoreExpr -> CoreExpr",54]],"useCount":12452},{"word":"Creating","context":[["else notice verbosity $ \"Creating a new sandbox at \" ++ sandboxDir",22],["notice verbosity (\"Creating package registration file: \" ++ regFile)",22],["-- Creating new mutable type variables",26],["-- Creating new evidence variables",26],["do { traceTcS \"Creating implication for polytype equality\" $ ppr ev",26],["-- Creating and setting evidence variables and CtFlavors",28],["-- * Creating an index",34],["-- Creating a new package DB",36],["-- App. Creating that instance requires all of the handler functions",88],["-- * Creating a Request",7529]],"useCount":8101},{"word":"Ct","context":[["isCFunEqCan_maybe :: Ct -> Maybe (TyCon, [Type])",38],["type TcPluginSolver = [Ct]    -- given",39],["-> TcS (StopOrContinue Ct)",327],["-> Ct",69],["-> TcType -> TcType -> TcS (StopOrContinue Ct)",68],["ctFlavourRole :: Ct -> CtFlavourRole",39],["-> [Ct]    -- derived",39],["-- | Whether or not one 'Ct' can rewrite another is determined by its",39],["-> [Ct]    -- wanted",39],["cc_ev     :: CtEvidence, -- See Note [Ct/evidence invariant]",76]],"useCount":8049},{"word":"D","context":[["dfunD :: forall a. D [a] -> D [a]",64],["-- -stubdir D adds an implicit -I D, so that gcc can find the _stub.h file",68],["dfunD :: forall a. D [a] -> D [a]",64],["-- -stubdir D adds an implicit -I D, so that gcc can find the _stub.h file",68],["> <Ctrl-D>",78],["import qualified Data.Profunctor.Product.Default as D",79],["Amode addr addr_code <- getAmode D mem",88],["import qualified Data.Default.Generics as D",154],["import qualified System.Directory as D",179],["-- ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.",393]],"useCount":15101},{"word":"DOM","context":[["--     * \"GHCJS.DOM.HTMLElement\"",204],["--     * \"GHCJS.DOM.SVGElement\"",258],["--     * \"GHCJS.DOM.Event\"",150],["import GHCJS.DOM.Types",1593],["--     * \"GHCJS.DOM.Node\"",510],["--     * \"GHCJS.DOM.Element\"",468],["import GHCJS.DOM.EventTargetClosures (EventName, unsafeEventName)",1522],["import GHCJS.DOM.Enums",516],["--     * \"GHCJS.DOM.EventTarget\"",693],["import GHCJS.DOM.JSFFI.Generated.Enums",1023]],"useCount":8031},{"word":"Data","context":[["import Data.Monoid",9902],["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["import qualified Data.Map as M",9307],["import Data.Char",8422],["import Data.List",19122],["import qualified Data.Set as Set",6953],["import Data.Word",7109],["import qualified Data.Map as Map",11760],["import qualified Data.Text as T",12934],["import Data.Maybe",18406]],"useCount":576369},{"word":"DataCon","context":[["| DerivOriginDC DataCon Int",38],["import DataCon  ( DataCon, dataConUserType, dataConOrigArgTys )",37],["import DataCon  ( DataCon, dataConUserType, dataConOrigArgTys )",37],["DataCon,",36],["dataConType :: DataCon -> Type",36],["getName (AnId id)     = getName id    -- decl, because the DataCon instance",33],["-> Maybe (DataCon, [Type], [CoreExpr])",42],["import ETA.BasicTypes.DataCon",63],["-> DataCon",193],["import DataCon",1440]],"useCount":9175},{"word":"DataKinds","context":[[", DataKinds",124],["{-# LANGUAGE DataKinds            #-}",122],["{-# LANGUAGE DataKinds           #-}",155],["{-# LANGUAGE DataKinds                  #-}",252],["{-# LANGUAGE DataKinds             #-}",291],["{-# LANGUAGE DataKinds         #-}",307],["{-# LANGUAGE BangPatterns, DataKinds, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",811],["{-# LANGUAGE DataKinds          #-}",2476],["{-# LANGUAGE DataKinds                   #-}",3405],["{-# LANGUAGE DataKinds #-}",3770]],"useCount":12883},{"word":"Database","context":[["import Database.Persist.Sqlite",292],["import Games.Chaos2010.Database.Fields",182],["import Database.Persist.Quasi",184],["import Database.HaskellDB.DBLayout",195],["import Database.Persist.Sql",227],["import Database.PostgreSQL.Simple",251],["import Database.Persist",458],["import Database.HDBC",444],["import Database.Persist.TH",431],["import qualified Database.Persist",171]],"useCount":11722},{"word":"Debug","context":[["import qualified Debug.Trace",59],["(\"Debug on\",                    show debugIsOn),",59],["-- Debug",67],["import Debug.Hoed.Pure",76],["import Debug",146],["-- import Debug.Trace",311],["import Debug.Trace",4363],["import           Debug.Trace",329],["--import Debug.Trace",330],["import Debug.Trace (trace)",471]],"useCount":8095},{"word":"Default","context":[["import Yesod.Default.Util (addStaticContentExternal)",160],["import Data.Default",1464],["import           Data.Default",516],["import Yesod.Default.Config",472],["import Data.Default (def)",380],["-- Default: None",340],["import Data.Default.Class",293],["import Yesod.Default.Main",162],["import qualified Data.Default.Generics as D",154],["import Yesod.Default.Handlers",162]],"useCount":11906},{"word":"DeriveDataTypeable","context":[["{-# LANGUAGE DeriveDataTypeable  #-}",215],[", DeriveDataTypeable",197],["{-# LANGUAGE TemplateHaskell, DeriveDataTypeable #-}",193],["{-# LANGUAGE DeriveDataTypeable        #-}",172],["{-# LANGUAGE DeriveDataTypeable #-}",15139],["{-# LANGUAGE CPP, DeriveDataTypeable #-}",284],["{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",404],["{-# LANGUAGE DeriveDataTypeable         #-}",610],["{-# LANGUAGE BangPatterns, DataKinds, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",811],["{-# LANGUAGE DeriveDataTypeable    #-}",263]],"useCount":21394},{"word":"DeriveGeneric","context":[["{-# LANGUAGE DeriveGeneric       #-}",124],[", DeriveGeneric",96],["{-# LANGUAGE DeriveGeneric        #-}",127],["{-# LANGUAGE OverloadedStrings, DeriveGeneric #-}",153],["{-# LANGUAGE DeriveGeneric         #-}",180],["{-# LANGUAGE DeriveGeneric     #-}",344],["{-# LANGUAGE DeriveGeneric              #-}",600],["{-# LANGUAGE DeriveGeneric               #-}",3408],["{-# LANGUAGE DeriveGeneric #-}",4167],["{-# LANGUAGE DeriveGeneric      #-}",8431]],"useCount":18957},{"word":"Directory","context":[["import           Network.Google.Directory.Types",97],["import qualified System.Directory as Dir",107],["import System.Directory (getDirectoryContents)",134],["import System.Directory",6356],["import           System.Directory",1077],["import System.Directory (doesFileExist)",483],["import System.Directory (doesFileExist, removeFile)",184],["import System.Directory (createDirectoryIfMissing)",184],["import qualified System.Directory as D",179],["import System.Directory (removeFile)",161]],"useCount":12693},{"word":"Distribution","context":[["import Distribution.Package",1552],["import Distribution.Simple.Compiler",609],["import Distribution.System",702],["import Distribution.Simple",702],["import Distribution.Simple.Setup",755],["import Distribution.Verbosity",1017],["import Distribution.PackageDescription",1152],["import Distribution.Simple.Utils",1177],["import Distribution.Version",1205],["import Distribution.Text",1481]],"useCount":40904},{"word":"Doc","context":[["import Doc.DocLike",114],["-- \"XMonad.Doc.Extending#Editing_the_layout_hook\"",135],["-> Doc OutputAnnotation",155],["-- \"XMonad.Doc.Extending#Editing_key_bindings\".",166],["-> Doc",351],["import Common.Doc",527],["-> State WriterState Doc",657],["_lhsOtext :: Doc",110],["import Doc.PPrint",104],[", msg :: !Doc",97]],"useCount":17291},{"word":"Double","context":[["Double ->",86],["-> [Double]",78],["=> Double",177],["-- Double",70],["import Prelude ( Bool(..), Enum, Float, IO, Double, String, Maybe(..),",89],["-> Ptr (Complex Double)",142],["-> Ptr Double",181],[", arbitraryValue = FIXDouble <$> (return (-2.112 :: Double)) }",225],["{-# UNPACK #-} !Double",272],["-> Double",1034]],"useCount":12336},{"word":"DsM","context":[["-> DsM (Core TH.DecQ)",306],["-> DsM [(SrcSpan, Core TH.DecQ)]",87],["-> DsM (Core (TH.Q a))",100],["-> DsM (CoreExpr,       -- desugared expression",144],["-> Core TH.Phases -> DsM (Core TH.DecQ)",84],["-> DsM (Core TH.ConQ)",73],["-> DsM (SrcSpan, Core TH.DecQ)",66],["-> DsM ([Binding], SDoc, SDoc)",54],["-> DsM MatchResult",51],["-> DsM CoreExpr",203]],"useCount":12563},{"word":"DynFlags","context":[["-- ^ Updated 'DynFlags', left-over arguments, and",121],["import DynFlags",3416],[":: DynFlags",561],["-> m (DynFlags, [Located String], [Located String])",215],["=> DynFlags",159],["import ETA.Main.DynFlags",131],["-> IO (DynFlags, FilePath)    -- ^ (final flags, output filename)",81],["-> OptKind (CmdLineP DynFlags)",82],["import           DynFlags",96],["-> DynFlags",119]],"useCount":34914},{"word":"E","context":[["import qualified Data.Text.Encoding as E",189],["import Control.Exception as E",245],["E.g.",108],["E :: Bool",102],["import qualified Data.Enumerator as E",94],["--    * J. Nievergelt and E.M. Reingold,",89],["import qualified Control.Exception as E",1151],["import E.E",74],["import qualified Database.Esqueleto as E",74],["import qualified Graphics.UI.Bottle.EventMap as E",162]],"useCount":12023},{"word":"Either","context":[["isLeft :: Either a b -> Bool",177],["import Data.Either (partitionEithers)",242],["import           Data.Either",449],["isRight :: Either a b -> Bool",171],["import           Control.Monad.Trans.Either",171],["import           Data.Either (partitionEithers)",144],["type ThrowsError = Either LispError",120],["-> Either PandocError Pandoc",86],["import Control.Monad.Trans.Either",491],["import Data.Either",1555]],"useCount":15831},{"word":"Empty","context":[["buildtree [] = Empty",110],["data BTree a = Empty | T a (BTree a) (BTree a)",105],["isEmpty Empty = True",95],["= Empty",127],["empty = Empty",168],["Empty",168],["toJSON = const (toJSON Empty)",169],["newPat_1 = Empty",78],["-- Empty",69],["| Empty",233]],"useCount":8958},{"word":"Encoding","context":[["import qualified Data.Text.Encoding as E",189],["import qualified Data.Text.Encoding as T",1108],["import qualified Data.Text.Encoding as TE",607],["import Data.Text.Encoding",323],["import Data.Text.Encoding (encodeUtf8)",318],["import qualified Data.Text.Encoding as Text",252],["import Data.Text.Encoding (decodeUtf8)",209],["import           Data.Text.Encoding",178],["import           Data.Text.Encoding.Error (lenientDecode)",161],["import qualified Data.Text.Lazy.Encoding as TL",144]],"useCount":8629},{"word":"Enum","context":[["deriving (Eq, Enum, Show)",115],["import GHC.Enum",216],["deriving (Show, Eq, Ord, Enum)",151],["deriving (Eq, Ord, Show, Generic, Enum)",246],["deriving (Show, Eq, Enum)",124],["deriving (Eq, Show, Enum)",271],["deriving (Eq,Ord,Read,Show,Enum,Data,Typeable,Generic)",609],["deriving (Eq,Ord,Read,Show,Enum,Bounded,Data,Typeable,Generic)",706],["deriving (Eq, Ord, Enum, Read, Show, Data, Typeable, Generic)",858],["deriving (Eq, Ord, Read, Show, Generic, Enum)",656]],"useCount":10235},{"word":"Environment","context":[["import System.Environment (getEnv)",638],["import System.Environment (getEnvironment)",159],["import System.Environment (lookupEnv)",199],["import System.Environment ( getArgs )",208],["import System.Environment (getArgs, getProgName)",213],["import           System.Environment (getArgs)",228],["import System.Environment(getArgs)",278],["import           System.Environment",864],["import System.Environment (getArgs)",2760],["import System.Environment",7192]],"useCount":16566},{"word":"Eq","context":[["} deriving (Show, Eq)",2858],["deriving (Eq, Ord, Show)",4385],["deriving (Show, Eq, Ord)",3208],["deriving (Eq)",3156],["deriving Eq",2937],["} deriving (Eq, Show)",5075],["} deriving (Eq,Show,Data,Typeable,Generic)",5936],["deriving (Eq, Show)",9947],["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["deriving (Show, Eq)",9007]],"useCount":154643},{"word":"Error","context":[["import Text.Parsec.Error",224],["import Control.Error",194],["Error matchers are designed for use with the functions provided by",199],["import Text.Pandoc.Error",207],["import Control.Monad.Error",1605],["import System.IO.Error",1095],["import Idris.Error",475],["import           Control.Error",273],["import           Control.Monad.Error",238],["import Control.Monad.Error.Class",240]],"useCount":17978},{"word":"Example","context":[["Example:",698],["- Example in Haskell:",77],["module Example where",82],["-- * Example",89],["-- Example",105],["-- Example usage:",143],["--   Example:",155],["Example",182],["Example in Haskell:",257],["-- Example:",3321]],"useCount":9671},{"word":"Exception","context":[["catchIO :: IO a -> (Exception.IOException -> IO a) -> IO a",325],["import Exception",524],["import qualified Control.Exception as Exception",595],["import qualified Control.Exception as Exception",595],["import qualified Control.Exception as E",1151],["import           Control.Exception",1163],["import Control.Exception (evaluate)",378],["import Control.Exception (assert)",385],["import Control.Exception",5663],["import Control.Exception (bracket)",432]],"useCount":25980},{"word":"Exit","context":[["import System.Exit (ExitCode(..))",285],["import System.Exit (exitSuccess)",357],["import System.Exit (ExitCode(..), exitWith)",172],["import System.Exit (exitFailure, exitSuccess)",158],["import System.Exit ( exitWith, ExitCode(ExitSuccess) )",157],["import System.Exit ( exitWith, ExitCode(..) )",154],["import           System.Exit (exitFailure)",116],["import System.Exit",4761],["import           System.Exit",729],["import System.Exit (exitFailure)",555]],"useCount":9326},{"word":"Exp","context":[["widgetFile :: String -> Q Exp",172],["-> Exp a",161],["=> (Exp a -> Exp a -> Exp a)",135],["combineScripts :: Name -> [Route Static] -> Q Exp",78],["-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp",113],["data Exp",118],["lift = Exp . Const",135],["=> (Exp a -> Exp a -> Exp a)",135],["=> (Exp a -> Exp a -> Exp a)",135],["-> Q Exp",218]],"useCount":7474},{"word":"Expr","context":[["| App Expr Expr",86],["import qualified Lamdu.Expr.IRef as ExprIRef",86],["| App Expr Expr",86],["data Expr",290],["import Expr",117],["expr :: Parser Expr",135],["data Expr =",87],["instance Show Expr where",153],["import Text.ParserCombinators.Parsec.Expr",191],["import Text.Parsec.Expr",213]],"useCount":10895},{"word":"F","context":[["import Data.Foldable as F",103],["type instance F Int = Bool",102],["F Bool  ~ fmv0",78],["import qualified Data.Foldable as F",1324],["{-# OPTIONS_GHC -F -pgmF htfpp #-}",296],["type family F a",105],["import qualified Language.Fixpoint.Types as F",68],["-> F OrgTable",88],["data family F a",94],["type family F a :: *",99]],"useCount":23116},{"word":"False","context":[["False",1993],["= False",1002],["| otherwise = False",1734],["Nothing -> False",1826],["_ -> False",4542],["return False",2445],["then return False",2328],["-- False",935],["False -> do",934],["Nothing -> return False",731]],"useCount":131801},{"word":"FastString","context":[["import FastString",3781],["import ETA.Utils.FastString",182],["-> (IfaceConAlt, [FastString], IfaceExpr)",59],["findBreakByCoord :: Maybe FastString -> (Int,Int) -> TickArray",51],["-> FastString",50],["import           FastString",47],["msg = text \"FastString stats:\" $$",43],["mk_string :: FastString -> DsM HsLit",43],["countFS :: Int -> Int -> Int -> [[FastString]] -> (Int, Int, Int)",38],["-> Maybe FastString    -- \"package\", if any",38]],"useCount":8256},{"word":"Field","context":[[", Field",71],["-- Field",41],["-> Field (HandlerT site IO) a",46],[", Field(..)",51],["(fmap AlphaHeavy.FIX.Field val)",51],["import Ganeti.THH.Field",52],["-- | Field by which to sort the list.",58],["10 -> Prelude'.fmap (\\ !new'Field -> old'Self{bucket = new'Field}) (P'.wireGet 12)",59],["10 -> Prelude'.fmap (\\ !new'Field -> old'Self{bucket = new'Field}) (P'.wireGet 12)",59],["(\\ !new'Field ->",106]],"useCount":7373},{"word":"FilePath","context":[["getDataFileName :: FilePath -> IO FilePath",363],["import System.FilePath",5476],["-> FilePath",2131],["import           System.FilePath",865],["import System.FilePath ((</>))",858],["import qualified System.FilePath as FP",249],["import System.FilePath.Posix",369],["import Development.Shake.FilePath",308],["import Prelude hiding (FilePath)",310],["getDataFileName :: FilePath -> IO FilePath",363]],"useCount":52121},{"word":"Flag","context":[["-> [Flag]",116],[", (Flag GlobalPackageDB, ([],[\"global\"]),",87],["-> (flags -> Flag Bool  ) -> (Flag Bool   -> flags -> flags)",101],["(choiceOpt [ (Flag UserPackageDB, ([],[\"user\"]),",87],["import Distribution.Client.Dependency.Modular.Flag",85],["-> (flags -> Flag Bool  ) -> (Flag Bool   -> flags -> flags)",101],["(globalFlags { globalRequireSandbox = Flag False })",121],["data Flag",162],["options :: [OptDescr Flag]",273],["import Distribution.Simple.Compiler hiding (Flag)",81]],"useCount":21396},{"word":"FlexibleContexts","context":[["{-# LANGUAGE FlexibleContexts #-}",9682],["{-# LANGUAGE FlexibleContexts      #-}",1144],["{-# LANGUAGE FlexibleContexts           #-}",727],["{-# LANGUAGE FlexibleContexts  #-}",590],[", FlexibleContexts",504],["{-# LANGUAGE FlexibleContexts    #-}",359],["{-# LANGUAGE FlexibleContexts          #-}",315],["{-# LANGUAGE FlexibleContexts     #-}",275],["FlexibleContexts,",249],["{-# LANGUAGE FlexibleContexts       #-}",188]],"useCount":16746},{"word":"FlexibleInstances","context":[["{-# LANGUAGE TypeSynonymInstances, FlexibleInstances #-}",360],["{-# LANGUAGE FlexibleInstances #-}",9037],["{-# LANGUAGE FlexibleInstances           #-}",3419],["{-# LANGUAGE FlexibleInstances  #-}",2460],["{-# LANGUAGE FlexibleInstances     #-}",1052],["{-# LANGUAGE BangPatterns, DataKinds, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",811],["{-# LANGUAGE FlexibleInstances          #-}",746],[", FlexibleInstances",586],["{-# LANGUAGE FlexibleInstances    #-}",530],["{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",404]],"useCount":24554},{"word":"Float","context":[["import GHC.Float",230],["-> Float",185],["Float ->",378],["-> Ptr Float",176],["| Float",52],["ufKeenessFactor       :: Float,",56],["floatSuffix :: (Float -> DynFlags -> DynFlags) -> OptKind (CmdLineP DynFlags)",56],["import Data.Vect.Float",64],["import Prelude ( Bool(..), Enum, Float, IO, Double, String, Maybe(..),",89],["-> Ptr (Complex Float)",142]],"useCount":8860},{"word":"Foldable","context":[["import qualified Data.Foldable as Foldable",407],["import Data.Foldable (Foldable)",341],["import Data.Foldable (Foldable)",341],["import Data.Foldable (toList)",343],["import qualified Data.Foldable as Foldable",407],["} deriving (Functor, Foldable, Traversable)",185],["import           Data.Foldable",419],["import qualified Data.Foldable as F",1324],["import Data.Foldable",1933],["import Data.Foldable (forM_)",204]],"useCount":13324},{"word":"Foo","context":[["| isUpper (head arg)  -- The arg looked like \"Foo\" or \"Foo.Bar\"",60],["data Foo.S = MkS Baz.T",62],["-- The arg looked like \"Foo.Bar.baz\"",60],["| isUpper (head arg)  -- The arg looked like \"Foo\" or \"Foo.Bar\"",60],["module Foo where",369],["class Foo a where",221],["[G] d0 : Foo t",143],["instance Foo Int where",99],["Eq (T a b) = Eq (Foo a) u Eq (Bar b)    -- From C1",87],["| OneShot             -- ^ @ghc -c Foo.hs@",60]],"useCount":9212},{"word":"For","context":[["-- costly transference of cookies on static files. For more information,",130],["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["-- For HasCallStack compatibility",1026],["For example:",767],["-- For example:",465],["-- For example,",396],["-- This is where we define all of the routes in our application. For a full",283],["pagination. For example, the 'ListObjects' operation of Amazon S3 returns up to",206],["-- For more information, see",201],["--                       For email, run on linux (perl v5.8.5):",169]],"useCount":32037},{"word":"Foreign","context":[["import Foreign.C.Types",2531],["import Foreign.Marshal.Alloc",674],["import Foreign.Marshal.Array",850],["import Foreign",614],["import Foreign.C.String",949],["import Foreign.C",1406],["import Foreign.Storable",1495],["import GHCJS.Foreign (jsNull)",1549],["import Foreign",2137],["import Foreign.Ptr",2330]],"useCount":27864},{"word":"Framework","context":[["import Test.Framework.TH",170],["import Test.Framework",1484],["import Test.Framework.Providers.QuickCheck2 (testProperty)",716],["import Test.Framework (defaultMain)",179],["import Test.Framework.Providers.HUnit",976],["import Test.Framework.Providers.QuickCheck2",525],["import Test.Framework.Providers.HUnit (testCase)",459],["import Test.Framework (Test, testGroup)",368],["import Test.Framework (defaultMain, testGroup)",191],["import           Test.Framework",185]],"useCount":7991},{"word":"FromJSON","context":[["instance FromJSON",338],["FromJSON f, FromJSON g, FromJSON h, FromJSON i, FromJSON j,",75],["instance FromJSON Tag where",84],["instance FromJSON Config where",90],["instance FromJSON User where",126],["instance (FromJSON a, FromJSON b, FromJSON c, FromJSON d, FromJSON e,",159],["instance (FromJSON a, FromJSON b, FromJSON c, FromJSON d, FromJSON e,",159],["instance (FromJSON a, FromJSON b, FromJSON c, FromJSON d, FromJSON e,",159],["instance (FromJSON a, FromJSON b, FromJSON c, FromJSON d, FromJSON e,",159],["instance (FromJSON a, FromJSON b, FromJSON c, FromJSON d, FromJSON e,",159]],"useCount":9286},{"word":"Function","context":[["import           Data.Function",493],["import Data.Function ( on )",102],["import Test.QuickCheck.Function",104],["import Data.Function",1837],["import Data.Function (on)",1803],["import           Data.Function (on)",223],["import Data.Function (fix)",167],["import Data.Function(on)",129],["import Data.Function ((&))",65],["import Data.Function (($))",75]],"useCount":8324},{"word":"Functor","context":[["import Data.Functor.Identity",1184],["import Data.Functor",1018],["import Data.Functor ((<$>))",471],["deriving Functor",441],["deriving (Functor)",298],["deriving (Functor, Applicative, Monad)",260],["import Data.Functor.Compose",225],["import           Data.Functor.Identity",202],["import Data.Functor.Classes",188],["} deriving (Functor, Foldable, Traversable)",185]],"useCount":17766},{"word":"G","context":[["replicateM = G.replicateM",98],["unsafeTake = G.unsafeTake",92],["import qualified GHC.Generics as G",177],["import qualified Data.Vector.Generic as G",313],["null = G.null",94],["replicate = G.replicate",99],["} deriving (P.Show,P.Eq,G.Generic,TY.Typeable)",99],["} deriving (P.Show, P.Eq, P.Ord, T.Typeable, G.Generic)",133],["[G] d01 : Data Maybe t   -- Superclass of d0",140],["[G] d0 : Foo t",143]],"useCount":19483},{"word":"GADTs","context":[["{-# LANGUAGE GADTs                      #-}",424],["{-# LANGUAGE GADTs                 #-}",294],["GADTs,",118],["{-# LANGUAGE GADTs #-}",3632],["{-# LANGUAGE GADTs             #-}",141],[", GADTs",235],["{-# LANGUAGE GADTs                #-}",110],["{-# LANGUAGE GADTs                     #-}",95],["{-# LANGUAGE CPP, GADTs #-}",94],["{-# LANGUAGE GADTs               #-}",272]],"useCount":7572},{"word":"GHC","context":[["-- Portability : non-portable (GHC extensions)",14092],["import qualified GHC.Exts",3441],["-- Portability : GHC",805],["import           GHC.Generics",886],["import GHC.Base",1378],["import GHC.Show",569],["import GHC.Generics",3344],["import GHC.Generics (Generic)",1766],["import GHC.Exts",958],["import GHC.TypeLits",689]],"useCount":96141},{"word":"GHCJS","context":[["import GHCJS.DOM.JSFFI.Generated.Enums",1023],["import GHCJS.Types (JSVal(..), JSString)",1024],["import GHCJS.Foreign (jsNull)",1549],["import GHCJS.DOM.Types",1593],["import GHCJS.Marshal (ToJSVal(..), FromJSVal(..))",1029],["import GHCJS.Marshal.Pure (PToJSVal(..), PFromJSVal(..))",1029],["import GHCJS.DOM.Enums",516],["import GHCJS.Marshal (ToJSRef(..), FromJSRef(..))",516],["--     * \"GHCJS.DOM.EventTarget\"",693],["import GHCJS.DOM.EventTargetClosures (EventName, unsafeEventName)",1522]],"useCount":16826},{"word":"GHCi","context":[["-> InputT GHCi ()",101],["-- GHCi",103],["-- Functions for use in development with GHCi",94],["import GHCi.RemoteTypes",152],["{- GHCi>",292],["-- Functions for DevelMain.hs (a way to run the app from GHCi)",93],["import GHCi",76],["-> InputT GHCi (Maybe Bool)",68],["= CompManager         -- ^ @\\-\\-make@, GHCi, etc.",60],["-> InputT GHCi (Maybe String)",68]],"useCount":16545},{"word":"GL","context":[["import Graphics.GL",276],["import Graphics.Rendering.OpenGL.GL.QueryUtils",204],["GL.loadIdentity",142],["import Graphics.Rendering.OpenGL.GL.PeekPoke",112],["import qualified Graphics.Rendering.OpenGL as GL",296],["import Graphics.GL.Functions",310],["import Graphics.GL.Tokens",459],["import Graphics.GL.ExtensionPredicates",477],["import Graphics.Rendering.OpenGL.GL.GLboolean",111],["import Graphics.Rendering.OpenGL.GL.Capability",108]],"useCount":6905},{"word":"Ganeti","context":[["import qualified Ganeti.HTools.Node as Node",276],["import Test.Ganeti.TestCommon",277],["import qualified Ganeti.HTools.Container as Container",277],["import Ganeti.BasicTypes",702],["import qualified Ganeti.Constants as C",477],["import Ganeti.Utils",373],["import Ganeti.Types",366],["import Ganeti.JSON",327],["import Test.Ganeti.TestHelper",284],["import Ganeti.Objects",270]],"useCount":11011},{"word":"GeneralizedNewtypeDeriving","context":[["{-# LANGUAGE GeneralizedNewtypeDeriving, DeriveDataTypeable #-}",46],["{-# LANGUAGE OverloadedStrings, GeneralizedNewtypeDeriving #-}",84],["{-# LANGUAGE DeriveDataTypeable, GeneralizedNewtypeDeriving #-}",72],["{-# LANGUAGE GeneralizedNewtypeDeriving #-}",65],["{-# LANGUAGE GeneralizedNewtypeDeriving, ConstraintKinds, PatternGuards #-}",50],["GeneralizedNewtypeDeriving",49],["{-# LANGUAGE GeneralizedNewtypeDeriving #-}",6002],["{-# LANGUAGE GeneralizedNewtypeDeriving  #-}",3437],[", GeneralizedNewtypeDeriving",224],["GeneralizedNewtypeDeriving,",101]],"useCount":11309},{"word":"Generic","context":[["} deriving (Eq, Show, Generic)",888],["deriving (Show, Generic)",763],["} deriving (Show, Generic)",928],["deriving (Eq,Read,Show,Data,Typeable,Generic)",958],["import GHC.Generics (Generic)",1766],["} deriving (Eq,Show,Data,Typeable,Generic)",5936],["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["} deriving (Show, Eq, Generic)",731],["deriving (Eq, Ord, Enum, Read, Show, Data, Typeable, Generic)",858],["deriving (Eq, Ord, Read, Show, Generic)",761]],"useCount":49637},{"word":"Generics","context":[["import GHC.Generics (Generic)",1766],["import           GHC.Generics",886],["import GHC.Generics",3344],["import           GHC.Generics              (Generic)",97],["import Data.Generics",586],["import           GHC.Generics (Generic)",387],["import GHC.Generics ( Generic )",144],["import qualified Data.Default.Generics as D",154],["import Data.Generics.Uniplate.Data",176],["import qualified GHC.Generics as G",177]],"useCount":11119},{"word":"Get","context":[["| (implic:_) <- cec_encl ctxt   -- Get the innermost context",68],["import qualified Data.Binary.Get as G",52],["-- | Get all dependencies of the package (buildable targets only).",60],["import Data.Binary.Get",848],["import           Data.Binary.Get",121],["-- | Get the 'Extra' value, used to hold data from the settings.yml file.",110],["-- Get the settings from all relevant sources",108],["-- ^ Get the IP address from the header when logging. Useful when sitting",64],["import Data.Serialize.Get",104],["-- | Get all the packages from the index.",78]],"useCount":9522},{"word":"Graphics","context":[["import Graphics.Rendering.OpenGL.Raw.Functions",596],["import Graphics.UI.GLUT",482],["import Graphics.Rendering.OpenGL.Raw.Tokens",886],["import Graphics.UI.Gtk",1007],["import Graphics.Rendering.OpenGL.Raw",330],["import qualified Graphics.UI.GLFW as GLFW",362],["import Graphics.GL.Tokens",459],["import Graphics.Rendering.OpenGL",495],["import Graphics.Rendering.OpenGL.Raw.ExtensionPredicates",470],["import Graphics.GL.ExtensionPredicates",477]],"useCount":21966},{"word":"H","context":[["import qualified Text.Blaze.Html5 as H",583],["import qualified Data.HashMap.Strict as H",596],["H.head $ do",285],["-- Maintainer  : Jonatan H Sundqvist",105],["H.body $ do",208],["H.br",134],["-> H.Stmt HP.Postgres",146],["--   perl -e 'print pack \"H*\",\"736f75726162682e732e6a6f73686940676d61696c2e636f6d0a\"'",169],["import qualified Network.HTTP.Types as H",187],["H.tr $ do",179]],"useCount":11225},{"word":"HTTP","context":[["import           Network.HTTP.Client",196],["import           Network.HTTP.Client.Conduit (HasHttpManager)",182],["import Network.HTTP.Conduit (Manager)",179],["import qualified Network.HTTP.Types as H",187],["import Network.HTTP",454],["import Network.HTTP.Client",258],["import           Network.HTTP.Conduit",202],["import           Network.HTTP.Types",223],["import Network.HTTP.Types",640],["import Network.HTTP.Conduit",572]],"useCount":8693},{"word":"HUnit","context":[["import           Test.Framework.Providers.HUnit",165],["import Test.HUnit",2615],["import qualified Test.HUnit as HUnit",102],["import Test.Tasty.HUnit",1031],["import Test.Framework.Providers.HUnit",976],["import Test.Framework.Providers.HUnit (testCase)",459],["import           Test.Tasty.HUnit",262],["import           Test.HUnit",240],["import Test.HUnit hiding (Test)",232],["import qualified Test.HUnit as HUnit",102]],"useCount":8909},{"word":"Handle","context":[["import System.IO (Handle)",203],["-> Handle",171],["import GHC.IO.Handle.Types",127],["import GHC.IO.Handle",123],["-> IO Handle",90],["defaultLogActionHPrintDoc :: DynFlags -> Handle -> SDoc -> PprStyle -> IO ()",58],["hPut,                   -- :: Handle -> ByteString -> IO ()",62],["hGetContents,           -- :: Handle -> IO ByteString",62],["import GHC.IO.Handle.Internals",69],["-- | Handle CmmMachOp expressions",75]],"useCount":7223},{"word":"Handler","context":[["getHomeR :: Handler Html",235],["import Network.Wai.Handler.Warp.Types",121],["import System.Log.Handler.Simple",123],["import qualified Network.Wai.Handler.Warp as Warp",139],["import Handler.Common",141],[", Handler",145],["module Handler.Home where",189],["import Handler.Home",234],["import Network.Wai.Handler.Warp",539],["import Network.Wai.Handler.Warp (run)",251]],"useCount":7168},{"word":"HappyStk","context":[["_ `HappyStk`",3425],[") `HappyStk` happyRest",1807],["happy_x_1 `HappyStk`",1295],["happy_x_2 `HappyStk`",1166],["happy_x_3 `HappyStk`",942],["(HappyTerminal happy_var_1) `HappyStk`",733],["happy_x_4 `HappyStk`",513],["happy_x_5 `HappyStk`",277],["happySeq r (action nt j tk st sts (r `HappyStk` stk'))",234],[") `HappyStk` happyRest}}}",205]],"useCount":17500},{"word":"HashMap","context":[["import qualified Data.HashMap.Strict as H",596],["import qualified Data.HashMap.Strict as M",591],["import qualified Data.HashMap.Strict as Map",477],["import qualified Data.HashMap.Strict as HashMap",392],["import qualified Data.HashMap.Strict as HashMap",392],["import Data.HashMap.Strict (HashMap)",353],["import Data.HashMap.Strict (HashMap)",353],["import qualified Data.HashMap.Lazy as HM",350],["import qualified Data.HashMap.Strict as HMS",136],["import qualified Data.HashMap.Strict as HM",1005]],"useCount":7787},{"word":"Haskell","context":[["import Language.Haskell.TH",1838],["import Language.Haskell.Exts",163],["import Language.Haskell.Extension",239],["Example in Haskell:",257],["import           Language.Haskell.TH",313],["import qualified Language.Haskell.TH as TH",349],["import Language.Haskell.TH.Quote",403],["import Language.Haskell.Liquid.Prelude",425],["-- grid is a game written in Haskell",472],["import Language.Haskell.TH.Syntax",855]],"useCount":30504},{"word":"Hay","context":[["-- Maintainer  : Brendan Hay <brendan@soundcloud.com>",37],["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622]],"useCount":13659},{"word":"Header","context":[["import qualified Text.ProtocolBuffers.Header as P'",1381],["-- Module      :  $Header$",426],["Module      :  $Header$",2026],["Module      : $Header$",236],[", Header",51],[", Header(..)",51],["{- | Module     : $Header$",59],["import Network.HTTP.Types.Header",114],["import           Network.HTTP.Types.Header",49],["import Network.Wai.Handler.Warp.Header",47]],"useCount":7033},{"word":"Here","context":[["-- Here, the slice retains a reference to the huge vector. Forcing it creates",64],["-- Here, no references to @v@ are retained because indexing (but /not/ the",61],["-- Here you can find a screen shot:",52],["Here we get",50],["-- Here are some libs that need to be linked at the *end* of",46],["Here's are two cases that should fail",44],["Here,",43],["Here",79],["-- Here the x will be local",43],["Here is another example:",42]],"useCount":7736},{"word":"Hspec","context":[["import Test.Hspec (Spec, describe, hspec, parallel)",63],["import Test.Hspec.QuickCheck (prop)",111],["import Test.Hspec.Wai",133],["import Test.Hspec.Runner (configFastFail, defaultConfig, hspecWith)",84],["import Test.Hspec",4648],["import           Test.Hspec",1318],["import Test.Hspec.QuickCheck",323],["import           Test.Hspec.QuickCheck",70],["import Test.Hspec        (Spec, describe, it, shouldBe)",67],["import Test.Hspec.Wai.JSON",67]],"useCount":7929},{"word":"I","context":[["import qualified Data.IntMap as I",119],["unsafeRead (STUArray _ _ _ marr#) (I# i#) = ST $ \\s1# ->",138],["\"error\".  In fact, it can cause some bogus parses, so I've disabled it",132],["toEnum i@(I# i#)",130],["++ concat [ [ NStr \"-I\", i ] | i <- incls ]",77],["import qualified Heist.Interpreted as I",75],["-- implemented with @memchr(3)@. I.e.",71],["-- -stubdir D adds an implicit -I D, so that gcc can find the _stub.h file",68],["-- argument, consuming the delimiter. I.e.",65],["-- ** I\\/O with Handles",64]],"useCount":24874},{"word":"INLINE","context":[["{-# INLINE toJSVal #-}",1839],["{-# INLINE fromJSVal #-}",1837],["{-# INLINE fmap #-}",910],["{-# INLINE parseJSON #-}",1064],["{-# INLINE toGObject #-}",1128],["{-# INLINE typeGType #-}",1128],["{-# INLINE unsafeCastGObject #-}",1128],["{-# INLINE toJSON #-}",1200],["{-# INLINE pFromJSVal #-}",1793],["{-# INLINE pToJSVal #-}",1792]],"useCount":113497},{"word":"IO","context":[["import System.IO",10925],["import Control.Monad.IO.Class (liftIO)",1498],["import           Control.Monad.IO.Class",1642],["import Control.Monad.IO.Class (MonadIO(..))",1993],["import System.IO.Unsafe",2503],["import Control.Monad.IO.Class",3662],["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260],["-> IO ()",9723],["main :: IO ()",34057],["import           System.IO",1475]],"useCount":192601},{"word":"IORef","context":[["import Data.IORef (IORef)",85],["type Env = IORef [(String, IORef LispVal)]",65],["type Env = IORef [(String, IORef LispVal)]",65],["import Data.IORef (IORef)",85],["import           Data.IORef (newIORef)",99],["import Data.IORef (IORef, newIORef, readIORef, writeIORef)",126],["import Data.IORef (IORef, newIORef, readIORef, writeIORef)",126],["import GHC.IORef",133],["import           Data.IORef",868],["import Data.IORef",5131]],"useCount":11261},{"word":"Id","context":[["import Common.Id as Id",97],["import Id",1838],["import Common.Id",1197],["--  $Id$",440],["--   $Id$",201],["-> (ZonkEnv -> Located (body TcId) -> TcM (Located (body Id)))",155],["-> Id",143],["-- -- $Id$",119],["-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp",113],["-- Id 1: Result type",112]],"useCount":41821},{"word":"Identity","context":[["_rangeX134 = Control.Monad.Identity.runIdentity (attach_T_Range (arg_range_))",660],["import Control.Monad.Identity",1377],["import Data.Functor.Identity",1184],["Control.Monad.Identity.runIdentity (",678],["import           Data.Functor.Identity",202],["import Control.Monad.Trans.Identity",184],["import           Control.Monad.Identity",164],["--             'Able', 'Tipped', 'Identity', 'Styled', 'Reactive', 'Paint'.",161],["_nameX113 = Control.Monad.Identity.runIdentity (attach_T_Name (arg_name_))",150],["_expressionX41 = Control.Monad.Identity.runIdentity (attach_T_Expression (arg_expression_))",127]],"useCount":9432},{"word":"Idris","context":[["import Idris.Core.TT",1110],["import Idris.Imports",262],["import Idris.Core.Typecheck",335],["import Idris.Core.CaseTree",346],["Maintainer  : The Idris Community.",375],["import Idris.Delaborate",430],["import Idris.Error",475],["import Idris.Core.Evaluate",668],["import Idris.AbsSyntax",821],["import Idris.Core.Elaborate hiding (Tactic(..))",277]],"useCount":20806},{"word":"If","context":[["-- If you do not find this file, copies can be found by writing to:",536],["-- actually making the request, and provides an error response. If you have",291],["-- actually making the request, and provides an error response. If you have the",163],["C.If (C.Call \"err_is_fail\" [errvar])",156],["-- along with this program; see the file COPYING.  If not, write to",151],["--  along with this program; see the file COPYING.  If not, write to",150],["-- not exist in the map. If the key does exist, the function will",140],["-- /WARNING:/ This operation can be very inefficient. If at all possible, use",132],["-- Seq-ing.  If the --strict flag is given, then Happy emits",129],["If we have",115]],"useCount":38704},{"word":"In","context":[["-- call functions inside a module.  In HscNothing mode we also do it,",59],["-- In addition, you can configure a number of different aspects of Yesod",197],["[ In BuildTree arch l | l <- libs ]",57],["-- code (if any)?  In interpreted mode we do this, so that GHCi can",59],["-- In one-shot mode we don't have the old iface until this",60],["-- In short : @'lookup' k ('alter' f k m) = f ('lookup' k m)@.",65],["-- keys to the same new key.  In this case the associated values will be",68],["[ In BuildTree arch o | o <- objs ]",68],["-- In (unlikely) bad cases, this function's time complexity degrades",130],["\"error\".  In fact, it can cause some bogus parses, so I've disabled it",132]],"useCount":21608},{"word":"Instance","context":[["uses_disk = Instance.usesLocalStorage inst",51],["import qualified Ganeti.HTools.Instance as Instance",249],["import qualified Ganeti.HTools.Instance as Instance",249],["-> Instance",90],["_lhsOcollectInstances :: [(Name, Instance)]",76],[", Instance",70],["-> Result (String, Instance.Instance)",59],["-> Result (String, Instance.Instance)",59],["let iname = Instance.idx inst",56],["-- * Instance",52]],"useCount":10619},{"word":"Int","context":[["-> Int",3921],["import Data.Int",3194],["import Data.Int (Int64)",2803],["=> Int",601],["import           Data.Int",462],["Int ->",417],["Int",355],["if ( gc_failed /= (0::Int))",320],["f :: Int -> Int",288],["f :: Int -> Int",288]],"useCount":138500},{"word":"Int64","context":[["Capture \"id\" (Textual Int64) :>",52],["Capture \"profileId\" (Textual Int64) :>",202],["-> Int64",90],["import Data.Int (Int32, Int64)",85],["8 -> toInteger (minBound :: Int64)",55],["8 -> toInteger (maxBound :: Int64)",55],["QueryParam \"consistencyToken\" (Textual Int64) :>",53],["import           Data.Int (Int64)",109],["import Data.Int (Int8, Int16, Int32, Int64)",152],["import Data.Int (Int64)",2803]],"useCount":7129},{"word":"IntMap","context":[["import qualified Data.IntMap as IntMap",710],["import qualified Data.IntMap as IntMap",710],["import qualified Data.IntMap as IM",629],["import Data.IntMap (IntMap)",354],["import Data.IntMap (IntMap)",354],["import qualified Data.IntMap.Strict as IntMap",113],["import qualified Data.IntMap as M",220],["import qualified Data.IntMap.Strict as IM",217],["import qualified Data.IntMap as I",119],["import qualified Data.IntMap.Strict as IntMap",113]],"useCount":10151},{"word":"Integer","context":[["data LispError = NumArgs Integer [LispVal]",110],["-> Integer",296],["| Number Integer",227],["integer :: Parser Integer",127],["sumDigits :: [Integer] -> Integer",125],["sumDigits :: [Integer] -> Integer",125],["fib :: Integer -> Integer",124],["fib :: Integer -> Integer",124],["-> m (f Integer)",110],["doubleEveryOther :: [Integer] -> [Integer]",106]],"useCount":19443},{"word":"Internal","context":[["import qualified Data.ByteString.Lazy.Internal as L",146],["import qualified Data.ByteString.Internal as S",146],["import qualified Data.ByteString.Internal as B",153],["import Data.ByteString.Internal",136],["notHappyAtAll = error \"Internal Happy error\\n\"",134],["-- Internal happy errors:",134],["-- * Internal",155],["import Ros.Internal.Msg.MsgInfo",157],["import Ros.Internal.RosBinary",159],["import           Stack.Types.Internal",317]],"useCount":12278},{"word":"It","context":[["-- It initialises the GHC session and warnings via 'initGhcMonad'.  Each call",70],["-- `Posn' records the location of a token in the input text.  It has three",50],["-- provides detailed information about the event. It is not set for other event",51],["-- The specified string must not start or end with whitespace. It must not",52],["-- the dynamic flag parser that the other methods simply wrap. It allows",58],["-- which GHC has some problems with.  It's currently not clear whether",60],["ArchX86_64 -> -- SSE2 is fixed on for x86_64.  It would be",60],["-- | 'span' @p xs@ breaks the ByteString into two segments. It is",66],["-- This line actually creates our YesodSite instance. It is the second half",104],["-- This line actually creates our YesodDispatch instance. It is the second half",205]],"useCount":23123},{"word":"JSON","context":[["import Network.AWS.Request.JSON",1260],["import Text.JSON.Generic",73],["import Text.Pandoc.JSON",78],["import Text.JSON.Pretty (pp_value)",85],["import Text.JSON.Types",100],["QueryParam \"alt\" AltJSON :> Delete '[JSON] ()",145],["import qualified Data.Aeson as JSON",217],["import Ganeti.JSON",327],["import Text.JSON",347],["import qualified Text.JSON as J",431]],"useCount":9658},{"word":"Just","context":[["Just",631],["Just x -> return x",791],["(Just AltJSON)",1277],["Just x -> x",527],["Just x  -> return x",312],["Just _ ->",452],["Just _ -> do",385],["Just (Forall []",379],["Just v -> return v",337],["Just _ -> return ()",319]],"useCount":191205},{"word":"Kind","context":[["tyConKind    :: Kind,             -- ^ Kind of this TyCon",63],["tyConKind    :: Kind,             -- ^ Kind of this TyCon",63],["-- data Kind = ...",58],["tyConResKind :: Kind,             -- ^ Result kind",63],["-- see Note [Kind substitution when instantiating]",67],["import Data.Kind",114],["import qualified Game.LambdaHack.Common.Kind as Kind",116],["import qualified Game.LambdaHack.Common.Kind as Kind",116],["-- See Note [Kind checking for type and class decls]",132],["import Kind",389]],"useCount":9081},{"word":"L","context":[["import qualified Data.Text.Lazy as L",350],["import qualified Data.ByteString.Lazy as L",2318],["import qualified Data.List as L",2012],["-> L.ByteString",116],["import Data.List as L",459],["import qualified Data.ByteString.Lazy.Char8 as L",420],["import qualified Data.ByteString.Lazy.Internal as L",146],["-- Maintainer  : Trevor L. McDonell <tmcdonell@cse.unsw.edu.au>",132],["--               [2009..2014] Trevor L. McDonell",131],["import qualified Data.List           as L",118]],"useCount":55671},{"word":"LANGUAGE","context":[["{-# LANGUAGE TemplateHaskell #-}",9167],["{-# LANGUAGE RecordWildCards    #-}",7942],["{-# LANGUAGE ScopedTypeVariables #-}",9730],["{-# LANGUAGE OverloadedStrings #-}",29334],["{-# LANGUAGE DeriveDataTypeable #-}",15139],["{-# LANGUAGE CPP #-}",12367],["{-# LANGUAGE DeriveGeneric      #-}",8431],["{-# LANGUAGE OverloadedStrings  #-}",8645],["{-# LANGUAGE FlexibleInstances #-}",9037],["{-# LANGUAGE FlexibleContexts #-}",9682]],"useCount":347177},{"word":"LHsExpr","context":[["(LHsExpr id)     -- arrow expression, f",68],["(LHsExpr id)     -- input expression, arg",68],["-> StmtLR idL idR (LHsExpr idL)",100],["-> LHsExpr RdrName",310],["(LHsExpr id)",379],["(LHsExpr id)                       -- sub-expression",67],["(LHsExpr id)     -- the operator",67],["[LHsExpr id]",66],["(LHsExpr id)     -- See Note [Pending Splices]",64],["(LHsExpr id)    -- operator",68]],"useCount":13425},{"word":"LT","context":[["LT -> do",88],["LT.insert (tnum tSecurityID) tSecurityID $",96],["LT.insert (tnum tSymbolSfx) tSymbolSfx $",97],["LT.insert (tnum tSecurityDesc) tSecurityDesc $",95],["import qualified Data.Text.Lazy.Encoding as LT",91],["LT.insert (tnum tIssuer) tIssuer $",97],["LT -> True",124],["LT -> LT",226],["LT -> LT",226],["import qualified Data.Text.Lazy as LT",645]],"useCount":11084},{"word":"LambdaCase","context":[[", LambdaCase",65],["{-# LANGUAGE LambdaCase #-}",2423],["{-# LANGUAGE LambdaCase        #-}",321],["{-# LANGUAGE LambdaCase         #-}",305],["{-# LANGUAGE LambdaCase                  #-}",3406],["{-# LANGUAGE LambdaCase                 #-}",162],["{-# LANGUAGE LambdaCase          #-}",105],["{-# LANGUAGE LambdaCase            #-}",78],["{-# LANGUAGE LambdaCase      #-}",68],["{-# LANGUAGE LambdaCase                #-}",50]],"useCount":7443},{"word":"LangExt","context":[["; allow_ambiguous <- xoptM LangExt.AllowAmbiguousTypes",31],["; data_kinds <- xoptM LangExt.DataKinds",28],["import qualified GHC.LanguageExtensions as LangExt",544],["; type_in_type <- xoptM LangExt.TypeInType",33],["= [LangExt.ImplicitPrelude,",48],["LangExt.TraditionalRecordSyntax,",48],["LangExt.MonomorphismRestriction,",48],["LangExt.DatatypeContexts,",48],["= do { rebindable_on <- xoptM LangExt.RebindableSyntax",57],["= do { data_kinds <- xoptM LangExt.DataKinds",60]],"useCount":8662},{"word":"Language","context":[["import Text.ParserCombinators.Parsec.Language",175],["import qualified Language.C.Inline as C",214],["import Language.Haskell.Extension",239],["import           Language.Haskell.TH",313],["import qualified Language.Haskell.TH as TH",349],["import Language.Haskell.TH.Quote",403],["import Language.Haskell.Liquid.Prelude",425],["import Ivory.Language",456],["import Language.Haskell.TH.Syntax",855],["import Language.Haskell.TH",1838]],"useCount":26262},{"word":"Lazy","context":[["import qualified Data.ByteString.Lazy as BS",844],["import qualified Data.ByteString.Lazy as L",2318],["import qualified Data.ByteString.Lazy as BL",1629],["import qualified Data.ByteString.Lazy as LBS",960],["import qualified Data.ByteString.Lazy as B",936],["import qualified Data.Text.Lazy as T",578],["import qualified Data.ByteString.Lazy as BSL",590],["import Data.ByteString.Lazy (ByteString)",638],["import qualified Data.Text.Lazy as LT",645],["import qualified Data.Text.Lazy as TL",933]],"useCount":26422},{"word":"Left","context":[["reviewer x = Left x",634],["Left err -> do",892],["Left err -> Left err",591],["Left err -> Left err",591],["Left err ->",541],["Left e -> do",436],["Left ex -> putStrLn $ \"Caught exception: \" Data.List.++ show ex",322],["Left _ -> Nothing",301],["Left err -> return $ Left err",280],["Left err -> return $ Left err",280]],"useCount":36175},{"word":"Lens","context":[["import           Control.Lens",1800],["import Control.Lens",4627],["import           Network.AWS.Lens",2786],["import qualified Control.Lens as Lens",583],["import qualified Control.Lens as Lens",583],["import           Control.Lens.Operators",411],["import Control.Lens.Operators ((^.))",518],["import Control.Lens.TH",244],["import Control.Lens.Operators",241],["-- >>> import Control.Lens",211]],"useCount":21147},{"word":"Lenses","context":[["-- Lenses --------------------------------------------------------------",12],["import Game.Cosanostra.Lenses",20],["-- Lenses",79],["-- ** Lenses",80],["-- * Lenses",208],["-- * Response Lenses",4380],["-- * Request Lenses",7366]],"useCount":12145},{"word":"LispVal","context":[["parseQuoted :: Parser LispVal",160],["parseList :: Parser LispVal",163],["| DottedList [LispVal] LispVal",193],["| DottedList [LispVal] LispVal",193],["parseAtom :: Parser LispVal",204],["parseNumber :: Parser LispVal",205],["data LispVal = Atom String",183],["parseString :: Parser LispVal",209],["| List [LispVal]",211],["parseExpr :: Parser LispVal",205]],"useCount":7481},{"word":"List","context":[["import qualified Data.List as L",2012],["import           Data.List",1943],["import qualified Data.List as List",1884],["import qualified Data.List as List",1884],["import Data.List",19122],["import Data.List (intercalate)",1586],["import Data.List (intersperse)",745],["import qualified Data.Conduit.List as CL",857],["import Data.List (foldl')",1038],["import Data.List.Split",1010]],"useCount":64703},{"word":"Located","context":[["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224],["(Located name)",136],["-> m (DynFlags, [Located String], [Located String])",215],["-> m (DynFlags, [Located String], [Located String])",215],["-> (ZonkEnv -> Located (body TcId) -> TcM (Located (body Id)))",155],["-> (ZonkEnv -> Located (body TcId) -> TcM (Located (body Id)))",155],["-> [LStmt RdrName (Located (body RdrName))]",98],["-> Located (Maybe (LHsContext RdrName), LHsType RdrName)",93],["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224],["-> Maybe (Located CType)",90]],"useCount":16886},{"word":"M","context":[["`M.ap`(QC.arbitrary)",213],["-- Maintainer  : Manuel M T Chakravarty <chak@cse.unsw.edu.au>",232],["| P.otherwise = M.catMaybes",258],["import Data.Map as M",307],["import qualified Data.IntMap as M",220],["module M where",346],["M.fromList",231],["import qualified Data.Map as M",9307],["import qualified Data.Map.Strict as M",1531],["import qualified Data.HashMap.Strict as M",591]],"useCount":38929},{"word":"Main","context":[["module Main (main) where",3270],["module Main where",18973],["-- Module      :  Main",224],["-- Main",236],["-- Module      : Main",274],["module Main (",339],["module Main ( main ) where",395],["module Main(main) where",552],["import Criterion.Main",980],["module Main",995]],"useCount":31584},{"word":"Maintainer","context":[["-- Maintainer  : Vincent Hanquez <vincent@snarc.org>",644],["-- Maintainer  :  cvs-ghc@haskell.org",444],["-- Maintainer  :  erkokl@gmail.com",435],["Maintainer  : John MacFarlane <jgm@berkeley.edu>",614],["-- Maintainer  :  Edward Kmett <ekmett@gmail.com>",1050],["-- Maintainer  :  cabal-devel@haskell.org",1141],["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622],["Maintainer  :  Christian.Maeder@dfki.de",1247],["-- Maintainer  :  libraries@haskell.org",1918],["-- Maintainer  :  Sven Panne <svenpanne@gmail.com>",2262]],"useCount":47507},{"word":"Map","context":[["import qualified Data.Map.Strict as M",1531],["import qualified Data.Map.Strict as Map",1365],["import qualified Data.Map.Strict as Map",1365],["import           Data.Map (Map)",864],["import           Data.Map (Map)",864],["import Data.Map (Map)",3417],["import Data.Map (Map)",3417],["import qualified Data.Map as M",9307],["import qualified Data.Map as Map",11760],["import qualified Data.Map as Map",11760]],"useCount":104449},{"word":"Marshal","context":[["import GHCJS.Marshal.Pure (PToJSRef(..), PFromJSRef(..))",515],["import GHCJS.Marshal (ToJSRef(..), FromJSRef(..))",516],["import Foreign.Marshal.Utils",253],["import Foreign.Marshal",152],["import GHCJS.Marshal",121],["import Bind.Marshal.Prelude",114],["import Foreign.Marshal.Alloc",674],["import Foreign.Marshal.Array",850],["import GHCJS.Marshal (ToJSVal(..), FromJSVal(..))",1029],["import GHCJS.Marshal.Pure (PToJSVal(..), PFromJSVal(..))",1029]],"useCount":7569},{"word":"Maybe","context":[["import Data.Maybe (catMaybes)",957],["import Data.Maybe (listToMaybe)",415],["import Data.Maybe (mapMaybe)",498],["-> Maybe String",517],["import Control.Monad.Trans.Maybe",643],["import Data.Maybe (isJust)",768],["import Data.Maybe (fromJust)",2114],["import Data.Maybe (fromMaybe)",3071],["import           Data.Maybe",3342],["import Data.Maybe",18406]],"useCount":120847},{"word":"MkC","context":[["(MkC derivs)",45],["do_brack (TypBr t)   = do { MkC t1  <- repLTy t    ; return t1 }",43],["repKindedTV (MkC nm) (MkC ki) = rep2 kindedTVName [nm, ki]",43],["MkC cc' <- repCCallConv cc",43],["repLam (MkC ps) (MkC e) = rep2 lamEName [ps, e]",43],["= do MkC name' <- lookupLOcc name",43],["repVal (MkC p) (MkC b) (MkC ds) = rep2 valDName [p, b, ds]",43],["repLam (MkC ps) (MkC e) = rep2 lamEName [ps, e]",43],["= do { MkC body'  <- go var_ty binds",43],["repCond (MkC x) (MkC y) (MkC z) = rep2 condEName [x,y,z]",43]],"useCount":10307},{"word":"Module","context":[["-- Module      :  $Header$",426],["Module      :  $Header$",2026],["import Module",1972],["-> Module",380],["-- Module      : Main",274],["-- Module:       $HEADER$",250],["Module      : $Header$",236],["-- Module      :  Main",224],["Module      : Main",143],["import qualified AST.Module as Module",118]],"useCount":22668},{"word":"ModuleName","context":[["import qualified AST.Module.Name as ModuleName",102],["-> ([ModuleName],[ModuleName])",114],["-> ([ModuleName],[ModuleName])",114],["import Distribution.ModuleName (ModuleName)",132],["import Distribution.ModuleName (ModuleName)",132],["(ModuleName.toFilePath x ++\"_stub\")",141],["-> ModuleName",142],["import Distribution.ModuleName",223],["import qualified Distribution.ModuleName as ModuleName",248],["import qualified Distribution.ModuleName as ModuleName",248]],"useCount":9541},{"word":"Monad","context":[["import           Control.Monad.IO.Class",1642],["import Control.Monad (when)",1832],["import Control.Monad (void)",1878],["import Control.Monad.IO.Class (MonadIO(..))",1993],["import Control.Monad.Trans",2740],["import Control.Monad.Reader",3450],["import Control.Monad.IO.Class",3662],["import           Control.Monad",4338],["import Control.Monad.State",5870],["import Control.Monad",26938]],"useCount":143934},{"word":"MonadIO","context":[["import Control.Monad.IO.Class (MonadIO(..))",1993],[":: MonadIO m",3440],["(MonadIO m) =>",1129],["(MonadIO m, FromJSString result) =>",408],["import Control.Monad.IO.Class (MonadIO, liftIO)",396],["(MonadIO m, IsWebGLRenderingContextBase self) =>",368],["(MonadIO m, HasCallStack) =>",278],["import Control.Monad.IO.Class (MonadIO)",265],[", MonadIO",211],["import           Control.Monad.IO.Class (MonadIO, liftIO)",204]],"useCount":20628},{"word":"Monoid","context":[["import Data.Monoid",9902],["import           Data.Monoid",3598],["import Data.Monoid ((<>))",2000],["import Data.Monoid (Monoid(..))",751],["import Data.Monoid (Monoid(..))",751],["import           Data.Monoid ((<>))",579],["} deriving (Eq, Ord, Read, Show, Monoid, IsString)",464],["import Data.Monoid (mempty)",422],["import Data.Monoid (mappend)",377],["} deriving (Eq, Ord, Read, Show, Monoid)",327]],"useCount":32574},{"word":"MultiParamTypeClasses","context":[["{-# LANGUAGE MultiParamTypeClasses #-}",7634],["{-# LANGUAGE BangPatterns, DataKinds, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",811],["{-# LANGUAGE MultiParamTypeClasses      #-}",772],[", MultiParamTypeClasses",440],["{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}",404],["{-# LANGUAGE MultiParamTypeClasses  #-}",309],["{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}",253],["MultiParamTypeClasses,",233],["{-# LANGUAGE MultiParamTypeClasses, TypeSynonymInstances, FlexibleInstances #-}",222],["{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances #-}",221]],"useCount":14579},{"word":"NB","context":[["-- NB: the binding is always a FunBind",47],["-- NB: use setExtensionFlag recursively, in case the implied flags",61],["-- NB. do not modify this field, it is calculated by",60],["-- NB: MonoPatBinds is no longer the default",60],["-- NB:  we put data_tc, the type constructor gotten from the",50],["-- NB: The desugarer, which straddles the source and Core worlds, sometimes",46],["-- NB: use setGeneralFlag recursively, in case the implied flags",46],["-- argument type. NB: this relies on Q being a data/newtype,",43],["-- NB.  No old interface can also mean that the source has changed.",43],["-- NB: when updating this function, don't forget to also update",43]],"useCount":8904},{"word":"NOINLINE","context":[["{-# NOINLINE happySpecReduce_1 #-}",132],["{-# NOINLINE happySpecReduce_2 #-}",132],["{-# NOINLINE happyGoto #-}",132],["{-# NOINLINE happyMonadReduce #-}",132],["{-# NOINLINE happyShift #-}",132],["{-# NOINLINE happyReduce #-}",132],["{-# NOINLINE happySpecReduce_3 #-}",132],["{-# NOINLINE happyFail #-}",135],["{-# NOINLINE st41 #-}",205],["{-# NOINLINE happySpecReduce_0 #-}",132]],"useCount":6930},{"word":"Name","context":[[", Name",128],["-> Name",506],["-> [LHsBind Name]",130],["-- identical to Unique of Name stored in",154],["instance Show Name where",158],["-> [Name]",192],["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224],["Name",264],["import Name",2761],["type Name = String",667]],"useCount":105050},{"word":"Network","context":[["import           Network.AWS.Prelude",5964],["import           Network.AWS.Request",5231],["import           Network.AWS.Response",5228],["import Network.AWS.Prelude",3425],["import           Network.AWS.Lens",2786],["import           Network.Google.Prelude",2732],["import Network.AWS.Request.Query",1565],["import Network.AWS.Request.JSON",1260],["import Network",913],["import Network.Wai",833]],"useCount":72898},{"word":"Nil","context":[["Nil -> Nil",104],["Nil -> Nil;",180],["Nil -> Nil;",180],["Nil -> Nil",104],["_ -> go Nil t",99],["Nothing -> Nil",177],["= Nil",95],["| Nil",158],["go z' Nil           = z'",135],["data List a = Nil | Cons a (List a)",108]],"useCount":7202},{"word":"No","context":[["filesToClean   = panic \"defaultDynFlags: No filesToClean\",",60],["-- Required: No",118],["= lift $ tfail $ Msg (\"No explicit types on left hand side: \" ++ show tm)",78],["Nothing -> pgmError (\"No entry for \" ++ show key ++ \" in \" ++ show settingsFile)",75],["Left err -> \"No match: \" ++ show err",74],["generatedDumps = panic \"defaultDynFlags: No generatedDumps\",",60],["nextTempSuffix = panic \"defaultDynFlags: No nextTempSuffix\",",56],["nextWrapperNum = panic \"defaultDynFlags: No nextWrapperNum\",",56],["dirsToClean    = panic \"defaultDynFlags: No dirsToClean\",",60],["filesToNotIntermediateClean = panic \"defaultDynFlags: No filesToNotIntermediateClean\",",56]],"useCount":11533},{"word":"NoArg","context":[["noArgM fn = NoArg (updM fn)",60],["setDumpFlag dump_flag = NoArg (setDumpFlag' dump_flag)",62],["noArg fn = NoArg (upd fn)",62],["(NoArg",987],["(NoArg (unSetGeneralFlag Opt_AutoSccsOnIndividualCafs))",46],["(NoArg (setGeneralFlag Opt_RelativeDynlibPaths))",46],["(NoArg (setGeneralFlag Opt_Ticky >> addWay WayDebug))",46],["(NoArg $ do setGeneralFlag Opt_SuppressCoercions",46],["(NoArg (deprecate $",48],["(NoArg (if can_split",59]],"useCount":7552},{"word":"NoImplicitPrelude","context":[[", NoImplicitPrelude",258],["{-# LANGUAGE CPP, NoImplicitPrelude #-}",161],["{-# LANGUAGE NoImplicitPrelude   #-}",153],["{-# LANGUAGE NoImplicitPrelude",136],["{-# LANGUAGE NoImplicitPrelude, OverloadedStrings #-}",133],["-- Portability:  NoImplicitPrelude",91],["NoImplicitPrelude",83],["{-# LANGUAGE NoImplicitPrelude  #-}",2689],["{-# LANGUAGE NoImplicitPrelude           #-}",3405],["{-# LANGUAGE NoImplicitPrelude #-}",3592]],"useCount":11635},{"word":"Node","context":[["import Language.C.Data.Node",64],["--     * \"GHCJS.DOM.Node\"",510],["import qualified Ganeti.HTools.Node as Node",276],["import qualified Ganeti.HTools.Node as Node",276],["--     * \"JSDOM.Node\"",170],["import Control.Distributed.Process.Node",126],[", Node(..)",89],["import qualified EFA.Graph.Topology.Node as Node",70],["import qualified EFA.Graph.Topology.Node as Node",70],["int_s = Node.removeSec old_s inst",65]],"useCount":16430},{"word":"Note","context":[["-- Note that in the presence of multiple contexts with different capabilities,",935],["{-# LANGUAGE UndecidableInstances #-} -- Note [Pass sensitive types]",158],["-- See Note [Free variables of types]",236],["-- Note [The substitution invariant].",256],["-- See Note [GHC Formalism] in coreSyn/CoreLint.hs",259],["Note that",261],["-- See Note: Type of local 'go' function",295],["-- See Note [Supporting CLI completion]",322],["-- See Note [GHC Formalism]",435],["-- See Note [Updating flag description in the User's Guide]",589]],"useCount":90235},{"word":"Nothing","context":[["Nothing -> do",8250],["Nothing -> return ()",7728],["Nothing -> return Nothing",3694],["Nothing -> return Nothing",3694],["Nothing -> Nothing",3775],["Nothing -> Nothing",3775],["return Nothing",4123],["Nothing",7615],["Nothing ->",6353],["_ -> Nothing",6215]],"useCount":229594},{"word":"Num","context":[["import GHC.Num",526],["import GHC.Num (Num(..))",97],["import GHC.Num (Num(..))",97],["sum' :: (Num a) => [a] -> a",83],["cardinals :: (Num i) => TestData i",80],["cardinals ∷ (Num i) ⇒ TestData i",79],["deriving (Eq, Ord, Num, Fractional)",68],["import \"base\" Prelude ( Num )",67],["-- 'Prelude.Eq', 'Prelude.Ord', 'Prelude.Num', 'Prelude.Read',",51],[", Num",49]],"useCount":6932},{"word":"O","context":[["-- | /O(m+min(n1,n2))/ For each index @i@ from the index vector and the",112],["-- | /O(n)/ Monadic fold over non-empty vectors with strict accumulator",114],["-- | /O(n)/.",121],["-- | /O(n)/ Split the vector in two parts, the first one containing those",122],["-- | /O(n)/ Copy an immutable vector into a mutable one. The two vectors must",122],["-- | /O(n)/ Apply the monadic action to all elements of a vector and ignore the",126],["-- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a",128],["-- towards /O(n*m)/.",140],["-- | /O(n)/. Map a function over all values in the map.",147],["-- Maintainer:  Bryan O'Sullivan <bos@serpentine.com>",192]],"useCount":29427},{"word":"OPTIONS_GHC","context":[["{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}",2672],["{-# OPTIONS_GHC -fno-warn-missing-signatures #-}",635],["{-# OPTIONS_GHC -Wall #-}",2069],["{-# OPTIONS_GHC -fno-warn-unused-binds      #-}",2316],["{-# OPTIONS_GHC -fno-warn-unused-imports    #-}",2618],["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",12002],["{-# OPTIONS_GHC -fno-warn-unused-matches #-}",5481],["{-# OPTIONS_GHC -fno-warn-unused-binds   #-}",5323],["{-# OPTIONS_GHC -fno-warn-orphans #-}",4798],["{-# OPTIONS_GHC -fno-warn-name-shadowing #-}",537]],"useCount":46693},{"word":"OccName","context":[["-> (OccName -> Maybe (OccName, Fingerprint))",57],["import OccName",219],["-- * 'OccName.OccName': see \"OccName#name_types\"",77],["-- * 'OccName.OccName': see \"OccName#name_types\"",77],["-- * 'OccName.OccName': see \"OccName#name_types\"",77],["-> (OccName -> Maybe (OccName, Fingerprint))",57],["| OccName.isVarOcc  name_occ = mkNameG_vName",43],["-- OccName.varName we do this by removing varName from the import of",43],["| OccName.isTcOcc   name_occ = mkNameG_tcName",43],["mk_varg | OccName.isDataOcc name_occ = mkNameG_dName",43]],"useCount":10336},{"word":"Option","context":[["pgm_P                 :: DynFlags -> (String,[Option])",60],["Option(..), showOpt,",61],["showOpt :: Option -> String",61],["map Option verbFlags",78],["then [SysTools.Option \"-mcpu=v9\"]",86],[", SysTools.Option     input_fn",91],["data Option",96],[", SysTools.Option \"-o\"",134],["++ map SysTools.Option (",144],[", Option \"h\" [\"help\"]",100]],"useCount":12113},{"word":"Options","context":[["import           Options.Applicative",508],["import Options",447],["import Text.Pandoc.Options",416],["defaultOptions :: Options",397],["data Options = Options {",300],["import Options.Applicative",1020],["data Options = Options",671],["data Options = Options",671],["data Options = Options {",300],["options :: [OptDescr (Options -> Options)]",193]],"useCount":12109},{"word":"Ord","context":[["deriving (Eq, Ord, Show)",4385],["deriving (Show, Eq, Ord)",3208],["} deriving (Eq, Ord, Read, Show)",2070],["deriving (Eq, Ord)",2049],["} deriving (Eq, Ord, Show)",1800],["import Data.Ord",1741],["deriving ( Eq, Ord, Show )",1159],["import Data.Ord (comparing)",1106],["deriving (Prelude'.Show, Prelude'.Eq, Prelude'.Ord, Prelude'.Typeable, Prelude'.Data)",1052],["deriving (Eq,Ord,Show)",1297]],"useCount":67410},{"word":"Outputable","context":[[":: (FR freeRegs, Outputable instr, Instruction instr)",70],["instance Outputable GhcMode where",60],["import qualified Outputable",99],["| otherwise = Outputable.empty",79],["else Outputable.empty)",79],[":: (Outputable instr, Instruction instr)",68],["| otherwise     = Outputable.empty",63],["import ETA.Utils.Outputable",198],["import Outputable",4765],["-- Not an instance of Outputable because of the \"arising from\" prefix",60]],"useCount":19011},{"word":"OverloadedStrings","context":[["{-# LANGUAGE OverloadedStrings    #-}",405],["{-# LANGUAGE OverloadedStrings #-}",29334],["{-# LANGUAGE OverloadedStrings  #-}",8645],["{-# LANGUAGE OverloadedStrings           #-}",3413],["{-# LANGUAGE OverloadedStrings          #-}",1089],["{-# LANGUAGE OverloadedStrings     #-}",927],["{-# LANGUAGE OverloadedStrings   #-}",778],["{-# LANGUAGE OverloadedStrings         #-}",313],["-- > {-# LANGUAGE OverloadedStrings #-}",264],["{-# LANGUAGE OverloadedStrings, ScopedTypeVariables #-}",236]],"useCount":51011},{"word":"P","context":[["11 -> P'.prependMessageSize calc'Size",1159],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["P'.putSize (P'.wireSize 10 self')",1159],["P'.putSize (P'.wireSize 10 self')",1159],["_ -> P'.wirePutErr ft' self'",1159],["_ -> P'.wireGetErr ft'",1159],["_ -> P'.wireSizeErr ft' self'",1159],["import qualified Prelude as P",1210],["import qualified Text.ProtocolBuffers.Header as P'",1381],["= P'.try",3025]],"useCount":65615},{"word":"PTerm","context":[["-- | Transform the FCs in a PTerm. The first function transforms the",44],["-> PTerm -- ^^ the term to pretty-print",40],["-> PTerm",56],["instance Show PTerm where",34],["piBind :: [(Name, PTerm)] -> PTerm -> PTerm",33],["piBind :: [(Name, PTerm)] -> PTerm -> PTerm",33],["namesIn :: [(Name, PTerm)] -> IState -> PTerm -> [Name]",33],["-- Handy to get a free function for applying PTerm -> PTerm functions",33],["getExps :: [PArg] -> [PTerm]",33],["piBind :: [(Name, PTerm)] -> PTerm -> PTerm",33]],"useCount":10550},{"word":"Package","context":[["-- Package state",60],["Package",70],["[ \"- Package '\"",70],["import Distribution.Package",1552],["import           Stack.Package",291],["-> Package",209],["import Distribution.Client.Dependency.Modular.Package",162],["-- See Note [RnNames . Trust Own Package]",96],["import           Stack.Types.Package",73],["\"Package \" ++ display (packageId pkg)",70]],"useCount":8685},{"word":"PackageDescription","context":[["import Distribution.PackageDescription.Parse (readPackageDescription)",72],["import Distribution.PackageDescription.PrettyPrint",59],["import Distribution.PackageDescription",1152],["-> PackageDescription",806],["import Distribution.PackageDescription.Configuration",384],["import Distribution.PackageDescription.Parse",369],["-> PackageDescription -> LocalBuildInfo",191],["import Distribution.PackageDescription as PD",147],["import qualified Distribution.PackageDescription as PD",129],["import qualified Distribution.PackageDescription as C",102]],"useCount":8518},{"word":"PackageIndex","context":[["=> PackageIndex pkg",81],["-> PackageIndex pkg",92],["import qualified Distribution.Simple.PackageIndex as PackageIndex",313],["import qualified Distribution.Simple.PackageIndex as PackageIndex",313],["import Distribution.Simple.PackageIndex (InstalledPackageIndex)",183],["import Distribution.Simple.PackageIndex",139],["-> PackageIndex",123],["import qualified Distribution.Client.PackageIndex as PackageIndex",111],["import qualified Distribution.Client.PackageIndex as PackageIndex",111],["import           Stack.PackageIndex",108]],"useCount":7011},{"word":"PackageName","context":[["-> Set PackageName",200],["import           Stack.Types.PackageName",223],["import           Distribution.Package hiding (Package,PackageName,packageName,packageVersion,PackageIdentifier)",52],["-> PackageName",190],["-> Map PackageName SimpleTarget",57],["[ Dependency (PackageName (display compiler)) vr",72],["case PackageIndex.lookupPackageName index (PackageName \"rts\") of",72],["PackageName",78],["-> (PackageName -> PackagePreferences)",84],["-> [PackageName]",163]],"useCount":8822},{"word":"Pandoc","context":[["import Text.Pandoc.Options",416],["import Text.Pandoc.Pretty",167],["import Text.Pandoc.Walk",181],["import Text.Pandoc.Builder",187],["import qualified Text.Pandoc.Builder as B",190],["import qualified Text.Pandoc.UTF8 as UTF8",192],["import Text.Pandoc.Error",207],["import Text.Pandoc.Definition",757],["import Text.Pandoc.Shared",333],["import Text.Pandoc",367]],"useCount":11427},{"word":"Parse","context":[["import Distribution.PackageDescription.Parse",369],["import Distribution.PackageDescription.Parse (readPackageDescription)",72],["_ <- Parse.char ':'",74],["module Parse where",78],["optional = Parse.option mempty . fmap toFlag",81],["-- | Parse an expression using appropriate local context.",119],["import Parse",162],["Parse.skipSpaces",340],["import qualified Distribution.Compat.ReadP as Parse",359],["import Parse.Helpers",70]],"useCount":8386},{"word":"Parsec","context":[["import Text.Parsec.Prim",228],["import Text.Parsec.Combinator",231],["import Text.Parsec.Char",239],["import Text.Parsec.Pos",259],["import Text.ParserCombinators.Parsec hiding (spaces)",260],["import Text.Parsec.String (Parser)",265],["import qualified Text.Parsec as P",274],["import Text.Parsec.String",511],["import Text.Parsec",1624],["import Text.ParserCombinators.Parsec",1776]],"useCount":11252},{"word":"Parser","context":[["parseNumber :: Parser LispVal",205],["parseExpr :: Parser LispVal",205],["parseString :: Parser LispVal",209],["module Parser where",243],["symbol :: Parser Char",260],["import Text.Parsec.String (Parser)",265],["spaces :: Parser ()",284],["import Parser",776],["parseAtom :: Parser LispVal",204],["parens :: Parser a -> Parser a",198]],"useCount":22851},{"word":"Path","context":[["import           Path.IO",466],["import           Path",729],["-> Path Abs Dir",455],["=> Path Abs Dir",386],["-> Path Abs File",337],["-> m (Path Abs File)",261],["import Path",211],["import           Path.Extra (toFilePathNoTrailingSep)",155],["-> m (Path Abs Dir)",153],["=> Maybe (Path Abs Dir)",142]],"useCount":15370},{"word":"Platform","context":[[":: Platform",138],["import CodeGen.Platform",144],["( Platform )",146],["=> Platform",253],["-> Platform",375],["import Platform",942],["Platform _ Windows -> \".exe\"",115],["-> IO (Compiler, Platform, ProgramConfiguration)",74],["targetPlatform :: DynFlags -> Platform",60],["sTargetPlatform        :: Platform,    -- Filled in by SysTools",60]],"useCount":6951},{"word":"Portability","context":[["-- Portability :  portable",9119],["-- Portability : non-portable (GHC extensions)",14092],["Portability :  portable",2612],["-- Portability : portable",1340],["Portability : portable",1314],["-- Portability :  non-portable",1269],["-- Portability :",937],["-- Portability : GHC",805],["-- Portability :  unportable",786],["-- Portability: portable",771]],"useCount":44728},{"word":"Prelude","context":[["import qualified Prelude as Prelude'",1379],["import qualified Prelude as Prelude'",1379],["import qualified Data.Typeable as Prelude'",1379],["import Prelude ()",1509],["maybe (Prelude.error \"Nothing to return\") return)",1656],["import           Network.Google.Prelude",2732],["import Network.AWS.Prelude",3425],["import Prelude",4001],["import qualified Data.Data as Prelude'",1349],["import           Network.AWS.Prelude",5964]],"useCount":71211},{"word":"Pretty","context":[["import Util.Pretty(pretty, text)",106],["-- | Pretty-print response.",406],["-- Pretty printing",215],["import Util.Pretty",176],["class Pretty a where",169],["import Text.Pandoc.Pretty",167],["import Pretty",154],["import qualified Pretty",130],["instance Pretty Type where",121],["-- Pretty-printing",110]],"useCount":11373},{"word":"Process","context":[["import System.Process (readProcessWithExitCode)",135],["import Control.Distributed.Process.Closure",148],["import System.Process (readProcess)",175],["-> Process ()",184],["import System.Posix.Process",201],["import           System.Process.Read",314],["import Control.Distributed.Process",326],["import           System.Process",425],["import System.Process",2343],["import           System.Process.Run",127]],"useCount":9016},{"word":"Proxy","context":[["import Data.Proxy ( Proxy(..) )",72],["api :: Proxy API",77],["p = Proxy",96],["api = Proxy",133],["import Data.Proxy (Proxy(..))",225],["import Data.Proxy (Proxy(..))",225],["(Proxy ::",265],["import           Data.Proxy",398],["import Data.Proxy",1595],["-- > myApi = Proxy",74]],"useCount":9045},{"word":"Ptr","context":[["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260],["import           Foreign.Ptr",252],["import Foreign.Ptr",466],["slotHandlerWrapper_int :: Ptr fun -> Ptr () -> Ptr (TQObject c) -> CInt -> IO ()",894],["slotHandlerWrapper_int :: Ptr fun -> Ptr () -> Ptr (TQObject c) -> CInt -> IO ()",894],["slotHandlerWrapper_int :: Ptr fun -> Ptr () -> Ptr (TQObject c) -> CInt -> IO ()",894],["import Foreign.Ptr",2330],["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260],["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260],["import GHC.Ptr",193]],"useCount":41755},{"word":"Q","context":[["import Language.Haskell.TH.Syntax  (Exp, Name, Q)",56],["import qualified Test.QuickCheck as Q",55],["-- Q.E.D.",56],["-- \"<Drive>:/\" part of a DOS path, so splitting is just a Q of",60],["combineScripts :: Name -> [Route Static] -> Q Exp",78],["combineStylesheets :: Name -> [Route Static] -> Q Exp",78],["-> DsM (Core (TH.Q a))",100],["widgetFile :: String -> Q Exp",172],["-> Q Exp",218],["-> Q [Dec]",270]],"useCount":8714},{"word":"Qtc","context":[["import Qtc.Classes.Qccs_h",339],["import Qtc.Enums.Classes.Core",341],["import Qtc.Classes.Gui",529],["import Qtc.Enums.Core.Qt",561],["import Qtc.Classes.Core",627],["import Qtc.Classes.Qccs",640],["import Qtc.ClassTypes.Gui",827],["import Qtc.ClassTypes.Core",982],["import Qtc.Enums.Base",1248],["import Qtc.Classes.Base",1252]],"useCount":10111},{"word":"QuickCheck","context":[["import           Test.QuickCheck.Instances ()",152],["import Test.Tasty.QuickCheck as QC",170],["import Test.QuickCheck",4540],["import           Test.QuickCheck",795],["import Test.Tasty.QuickCheck",417],["import Test.Hspec.QuickCheck",323],["import Test.QuickCheck.Monadic",259],["import Test.QuickCheck.Arbitrary",216],["import Test.QuickCheck.Gen",200],["import Test.QuickCheck.All",170]],"useCount":11258},{"word":"R","context":[["*                                  A F R P                                   *",61],["import qualified Reporting.Region as R",169],["import qualified System.Random as R",129],["import qualified Data.Array.Repa as R",119],["-- Maintainer  :  R.Paterson@city.ac.uk",107],["-> R.Region",93],["import qualified Yi.Rope as R",88],["seqn <- R.readIORef seq",87],[":: R.Region",67],["import qualified Database.Redis as R",65]],"useCount":7409},{"word":"RHS","context":[["-> Type -> Type    -- RHS, after and before type-synonym expansion, resp",52],["Applies when the RHS of the axiom is another type-function application",48],["--     See Note [No top-level newtypes on RHS of representational",38],["-- polymorphic Ids, and are now checking that their RHS",38],["--   * Top-level variables appearing free in the RHS of an orphan",38],["-- Returned usage details covers only the RHS,",36],["A guard list, guarding a RHS of type rhs_ty",34],["So now the (T f a) in the RHS must be elaborated to (T k f a).",33],["its RHS is simply an error, so it doesn't impose any type constraints.",33],["(PostTc idR Type) -- Element type of the RHS (used for arrows)",33]],"useCount":8583},{"word":"Random","context":[["import System.Random",3323],["import System.Random (randomIO)",100],["import Control.Monad.Random",552],["import           System.Random",326],["import System.Random (randomRIO)",251],["import System.Random.MWC",247],["import Random",137],["import Crypto.Random",132],["import qualified System.Random as R",129],["import Data.Random",113]],"useCount":7533},{"word":"RankNTypes","context":[["{-# LANGUAGE RankNTypes           #-}",86],["{-# LANGUAGE OverloadedStrings, RankNTypes #-}",71],["RankNTypes,",93],["{-# LANGUAGE RankNTypes                #-}",167],["{-# LANGUAGE RankNTypes          #-}",220],[", RankNTypes",221],["{-# LANGUAGE RankNTypes        #-}",234],["{-# LANGUAGE RankNTypes                 #-}",260],["{-# LANGUAGE RankNTypes            #-}",270],["{-# LANGUAGE RankNTypes #-}",4158]],"useCount":7273},{"word":"Raw","context":[["import Graphics.Rendering.OpenGL.Raw.Core32",132],["import Graphics.Rendering.OpenGL.Raw.Tokens",886],["import Graphics.Rendering.OpenGL.Raw.Functions",596],["import Graphics.Rendering.OpenGL.Raw.ExtensionPredicates",470],["import Graphics.Rendering.OpenGL.Raw",330],["import Graphics.Rendering.OpenGL.Raw.Core31",99],["import Graphics.Rendering.OpenGL.Raw.Extensions",78],["import Graphics.Rendering.OpenGL.Raw.Core31.Types",72],["import Graphics.Rendering.OpenGL.Raw.Types",66],["-- | Raw bytes at compile time of @config/settings.yml@",65]],"useCount":7219},{"word":"RdrName","context":[["import RdrName",942],["-> [LConDecl RdrName]",93],["-> Located (Maybe (LHsContext RdrName), LHsType RdrName)",93],["-> Maybe (LHsKind RdrName)",93],["-> [LStmt RdrName (Located (body RdrName))]",98],["-> [LStmt RdrName (Located (body RdrName))]",98],["-> P (LTyClDecl RdrName)",124],["-> LHsType RdrName",128],["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224],["-> LHsExpr RdrName",310]],"useCount":34515},{"word":"Read","context":[["} deriving (Eq, Read, Show)",2840],["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["} deriving (Eq, Ord, Read, Show)",2070],["deriving (Show, Read, Eq)",1302],["deriving (Eq, Show, Read)",987],["deriving (Eq,Read,Show,Data,Typeable,Generic)",958],["deriving (Eq, Ord, Show, Read)",865],["deriving (Eq, Ord, Enum, Read, Show, Data, Typeable, Generic)",858],["deriving (Eq, Ord, Read, Show, Generic)",761],["deriving (Eq,Ord,Read,Show,Enum,Bounded,Data,Typeable,Generic)",706]],"useCount":50850},{"word":"Reader","context":[["import           Control.Monad.Reader (MonadReader, asks)",119],["import Control.Monad.Reader",3450],["import           Control.Monad.Reader",1102],["import Autolib.Reader",990],["import Control.Monad.Trans.Reader",654],["import Control.Monad.Reader.Class",231],["import           Control.Monad.Reader (asks)",89],["import           Control.Monad.Trans.Reader",170],["import Control.Monad.Reader (ask)",160],["import Control.Monad.Trans.Reader (ask)",97]],"useCount":10253},{"word":"RecordWildCards","context":[["{-# LANGUAGE RecordWildCards    #-}",7942],["{-# LANGUAGE RecordWildCards #-}",4893],["{-# LANGUAGE RecordWildCards             #-}",3416],["{-# LANGUAGE RecordWildCards   #-}",756],["{-# LANGUAGE RecordWildCards           #-}",145],["{-# LANGUAGE RecordWildCards            #-}",408],["{-# LANGUAGE RecordWildCards       #-}",266],["{-# LANGUAGE OverloadedStrings, RecordWildCards #-}",173],["{-# LANGUAGE RecordWildCards     #-}",170],[", RecordWildCards",151]],"useCount":19842},{"word":"Rendering","context":[["import Graphics.Rendering.OpenGL.Raw.Tokens",886],["import Graphics.Rendering.OpenGL.Raw",330],["import Graphics.Rendering.OpenGL.Raw.ExtensionPredicates",470],["import Graphics.Rendering.OpenGL",495],["import Graphics.Rendering.OpenGL.Raw.Functions",596],["import qualified Graphics.Rendering.OpenGL as GL",296],["import Graphics.Rendering.OpenGL.GL.QueryUtils",204],["import Graphics.Rendering.Cairo",187],["import Graphics.Rendering.OpenGL.Raw.Core32",132],["-- * Rendering",122]],"useCount":7258},{"word":"Request","context":[["-> Request",126],["-- * Creating a Request",7529],["import Network.AWS.Request.RestJSON",226],["import Network.AWS.Request.JSON",1260],["import Network.AWS.Request.Query",1565],["-- ** Request lenses",3224],["-- ** Request constructor",3285],["-- * Request",3304],["import           Network.AWS.Request",5231],["-- * Request Lenses",7366]],"useCount":35537},{"word":"Response","context":[["-- ** Response lenses",2351],["-> Response",111],[", Response(..)",69],["IO (Either [T.Text] (Response Bl.ByteString))",62],[", Response",62],["-- * Response",3330],["-- * Response Lenses",4380],["-- * Destructuring the Response",5213],["import           Network.AWS.Response",5228],["-- ** Response constructor",3285]],"useCount":25576},{"word":"Result","context":[["-- Result:",1967],["import Test.QuickCheck hiding (Result)",84],["data Result",87],[", Result",89],["Result",108],["-- Id 1: Result type",112],["import qualified Common.Result as Result",113],["import qualified Common.Result as Result",113],[", Result(..)",200],["import Common.Result",867]],"useCount":12817},{"word":"Right","context":[["Right r -> return r",285],["Right x -> return x",568],["Right _ -> return ()",503],["Right ex -> return ()",323],["Right () -> return ()",308],["Right _ -> do",271],["Right val -> return val",239],["Right v -> return v",219],["Right x -> x",216],["Right a -> return a",207]],"useCount":36740},{"word":"RnM","context":[["-> RnM (b, FreeVars)",82],["-> RnM (a, FreeVars)",217],["-> RnM (([ParStmtBlock Name Name], thing), FreeVars)",58],["-> RnM [(LStmtLR Name RdrName body, FreeVars)]",58],["-> RnM (([LStmt Name (Located (body Name))], thing), FreeVars)",58],["-> RnM (HsGroup RdrName, Maybe (SpliceDecl RdrName, [LHsDecl RdrName]))",60],["(Located (body RdrName) -> RnM (Located (body Name), FreeVars))",67],["-> RnM ()",92],["-> ([Name] -> RnM (thing, FreeVars))",127],["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224]],"useCount":8998},{"word":"S","context":[["unless (S.null bs) $ do",101],["import qualified Data.Set as S",4087],["import qualified Data.ByteString as S",1205],["import qualified Data.Sequence as S",403],["import qualified Data.ByteString.Char8 as S",376],["import qualified Data.ByteString.Internal as S",146],["import qualified Data.Serialize as S",131],["import qualified Control.Monad.State as S",128],["if S.null bs",124],["import qualified Data.Vector.Storable as S",108]],"useCount":34259},{"word":"SDL","context":[["e <- SDL.pollEvent",111],["import qualified SDL",322],["SDL.quit",265],["SDL.destroyWindow window",218],["import qualified Graphics.UI.SDL as SDL",197],["import qualified Graphics.UI.SDL as SDL",197],["SDL.destroyRenderer renderer",171],["SDL.showWindow window",161],["SDL.initialize [SDL.InitVideo]",156],["SDL.initialize [SDL.InitVideo]",156]],"useCount":7329},{"word":"SDoc","context":[["-> [(SDoc, SDoc, Type, CmmType)]",56],["-> (SDoc, SrcSpan)",56],["-> [(SDoc, SDoc, Type, CmmType)]",56],["defaultLogActionHPutStrDoc :: DynFlags -> Handle -> SDoc -> PprStyle -> IO ()",56],["-> SDoc",391],["defaultLogActionHPrintDoc :: DynFlags -> Handle -> SDoc -> PprStyle -> IO ()",58],["wrongNumberOfParmsErr :: Arity -> SDoc",58],["=> [LStmt id body] -> SDoc",68],["bold :: SDoc -> SDoc",75],["bold :: SDoc -> SDoc",75]],"useCount":31915},{"word":"ST","context":[["import Control.Monad.ST (ST)",122],["import Control.Monad.ST",1058],["import Data.Array.ST",313],["-> ST s ()",193],["unsafeRead (STUArray _ _ _ marr#) (I# i#) = ST $ \\s1# ->",138],["import Control.Monad.ST (ST)",122],["import           Control.Monad.ST",112],["import GHC.ST",111],["res <- evalHandler Nothing (ST.get \"\" Map.empty) hdl appInit",86],["import Control.Monad.ST (runST)",80]],"useCount":7179},{"word":"Safe","context":[["-- ** Safe destructive updates",63],["-- | O(1) Safe indexing",61],["-- Safe destructive updates",63],["import Safe (readMay)",88],["-- | Safe Haskell mode",94],["{-# LANGUAGE Safe #-}",102],["import Foreign.Safe",123],["import           Safe",143],["import Safe",462],["{-# LANGUAGE Safe #-}",1396]],"useCount":7615},{"word":"ScopedTypeVariables","context":[["{-# LANGUAGE CPP, ScopedTypeVariables #-}",274],["{-# LANGUAGE ScopedTypeVariables    #-}",114],["ScopedTypeVariables,",224],["{-# LANGUAGE ScopedTypeVariables       #-}",226],["{-# LANGUAGE OverloadedStrings, ScopedTypeVariables #-}",236],["{-# LANGUAGE ScopedTypeVariables  #-}",251],[", ScopedTypeVariables",404],["{-# LANGUAGE ScopedTypeVariables        #-}",434],["{-# LANGUAGE ScopedTypeVariables   #-}",618],["{-# LANGUAGE ScopedTypeVariables #-}",9730]],"useCount":15271},{"word":"See","context":[["-- detab the module (please do the detabbing in a separate patch). See",254],["-- See Note [Updating flag description in the User's Guide]",589],["-- See Note [GHC Formalism]",435],["-- See Note [Supporting CLI completion]",322],["-- See Note: Type of local 'go' function",295],["-- See Note [GHC Formalism] in coreSyn/CoreLint.hs",259],["-- See Note [Free variables of types]",236],["Many operations have the ability to filter results on the server side. See the",206],["-- Set up i18n messages. See the message folder.",166],["--  See end of this file for licence information.",148]],"useCount":49842},{"word":"Seq","context":[["import           Data.Sequence (Seq)",37],["instance Functor Seq where",42],["import Data.Sequence as Seq",47],["instance Show a => Show (Seq a) where",54],["Seq.empty",105],["_lhsOerrors :: Seq Error",128],["-- Seq-ing.  If the --strict flag is given, then Happy emits",129],["let _lhsOerrors :: Seq Error",166],["import Data.Sequence (Seq)",230],["import qualified Data.Sequence as Seq",772]],"useCount":8650},{"word":"Set","context":[["import Data.Set ( Set )",297],["import qualified Data.Set as Set",6953],["import qualified Data.Set as Set",6953],["--          , Set.fromList",5760],["import qualified Data.Set as S",4087],["import Data.Set (Set)",1900],["import Data.Set (Set)",1900],["import           Data.Set (Set)",740],["import           Data.Set (Set)",740],["import Autolib.Set",610]],"useCount":61956},{"word":"Show","context":[["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["deriving Show",12848],["deriving (Eq, Show)",9947],["deriving (Show)",9016],["deriving (Show, Eq)",9007],["} deriving (Eq,Show,Data,Typeable,Generic)",5936],["} deriving (Show)",5335],["} deriving (Eq, Show)",5075],["deriving (Eq, Ord, Show)",4385],["} deriving Show",4383]],"useCount":183253},{"word":"Simple","context":[["import Distribution.Simple.InstallDirs",239],["import Distribution.Simple.Setup",755],["import Database.PostgreSQL.Simple",251],["import Distribution.Simple.BuildPaths",275],["import qualified Distribution.Simple.PackageIndex as PackageIndex",313],["import Distribution.Simple.Program",586],["import Distribution.Simple.LocalBuildInfo",596],["import Distribution.Simple.Utils",1177],["import Distribution.Simple.Compiler",609],["import Distribution.Simple",702]],"useCount":16229},{"word":"Since","context":[["-- /Since: 3/",124],["-- Since 2.1.0",125],["-- Since 0.1.0",129],["-- |/Since: 1.4.0.0/",131],["-- default-layout-wrapper is the entire page. Since the final",243],["-- Since 1.0.0",263],["-- /Since: 4.7.0.0/",278],["-- Since 0.1.0.0",310],["-- /Since: 2/",387],["-- Since 1.2.0",452]],"useCount":7171},{"word":"Size","context":[[", Size",64],["initialWindowSize $= Size 500 500",73],["type Size = Int",81],["reshape size@(Size w h) = do",139],["calc'Size = 0",155],["calc'Size",228],["import Autolib.Size",528],["11 -> P'.prependMessageSize calc'Size",1159],["10 -> calc'Size",1159],["import Size",169]],"useCount":7170},{"word":"So","context":[["-- By trust dependencies we mean that the check is transitive. So if",41],["-- until such time as the module reappears again.  So we ignore",47],["-- are really two stdin Handles.  So we flush any bufferred data in",50],["-- versioned package dependencies. So we ignore any previous partial flag",56],["-- So, use either.",61],["values in registers which the addr then refers to.  So you can't put",76],["-- \"real work\". So:",43],["-- have extended the environment.  So every pattern-bound",43],["So in repTopDs we bring the binders into scope with mkGenSyms and addBinds.",43],["-- So this first pkgid failed for whatever reason (buildFailure).",40]],"useCount":15258},{"word":"SrcSpan","context":[["-> SrcSpan",238],["pkgTrustOnLoc         :: SrcSpan,",60],["thOnLoc               :: SrcSpan,",60],["warnSafeOnLoc         :: SrcSpan,",60],["-> DsM (SrcSpan, Core TH.DecQ)",66],["-- See Note [SrcSpan for binders]",72],["-> DsM [(SrcSpan, Core TH.DecQ)]",87],["; mapM_ (\\a -> a loc) ann -- Add any API Annotations to the top SrcSpan",145],["warnUnsafeOnLoc       :: SrcSpan,",60],["newDerivOnLoc         :: SrcSpan,",60]],"useCount":9426},{"word":"Stability","context":[["-- Stability   : auto-generated",9174],["-- Stability   :  experimental",6909],["-- Stability   :  provisional",3765],["-- Stability   :  stable",2815],["Stability   :  provisional",2303],["Stability   : experimental",2177],["Stability   :  experimental",1822],["-- Stability   :  unstable",1104],["Stability   : alpha",804],["-- Stability   : experimental",8404]],"useCount":48688},{"word":"Stack","context":[["import           Stack.Types.Internal",317],["import           Stack.Types",700],["import           Stack.Package",291],["import           Stack.Constants",437],["import           Stack.Types.Config",197],["import           Stack.Types.PackageName",223],["import           Stack.Types.StackT",216],["import           Stack.Types.Version",214],["import           Stack.Types.Compiler",167],["import           Stack.Types.PackageIdentifier",173]],"useCount":10934},{"word":"State","context":[["import IDE.Core.State",228],["import Control.Monad.State.Class",233],["import State",258],["import Control.Monad.State.Lazy",293],["import Control.Monad.Trans.State.Strict",328],["import Control.Monad.Trans.State",608],["-> State WriterState Doc",657],["import           Control.Monad.State",769],["import Control.Monad.State.Strict",1214],["import Control.Monad.State",5870]],"useCount":24500},{"word":"Storable","context":[["import qualified Data.Vector.Storable as SV",113],["import Foreign.Storable",1495],["import qualified Data.Vector.Storable as V",481],["import Foreign.Storable",289],["import qualified Data.Vector.Storable as VS",236],["import Foreign.Storable (Storable(..))",154],["import qualified Data.Vector.Storable as S",108],["import Foreign.Storable (Storable(..))",103],["import Foreign.Storable (Storable(..))",154],["import           Foreign.Storable",133]],"useCount":9280},{"word":"Stream","context":[["import Stream (Stream)",61],["import qualified Stream",98],["sock <- socket AF_INET Stream defaultProtocol",96],["-> Stream m a -> Stream m b -> Stream m c -> Stream m d",91],["-> Stream m a -> Stream m b -> Stream m c -> Stream m d",91],["-> Stream m a -> Stream m b -> Stream m c -> Stream m d",91],["-> Stream m a -> Stream m b -> Stream m c -> Stream m d",91],["sock <- socket AF_INET Stream 0",71],["import Network.Stream",71],["import Stream (Stream)",61]],"useCount":9717},{"word":"Strict","context":[["import Control.Monad.State.Strict",1214],["import qualified Data.HashMap.Strict as HM",1005],["import qualified Data.Map.Strict as Map",1365],["import qualified Data.Map.Strict as M",1531],["import qualified Data.HashMap.Strict as H",596],["import qualified Data.HashMap.Strict as M",591],["import qualified Data.HashMap.Strict as Map",477],["import qualified Data.HashMap.Strict as HashMap",392],["import           Data.Map.Strict (Map)",383],["import Data.HashMap.Strict (HashMap)",353]],"useCount":15529},{"word":"String","context":[["import Data.String (fromString)",461],["-> String",3339],["import Data.String",1599],["-> [String]",982],["import Foreign.C.String",949],["type Name = String",667],["import           Data.String",619],["=> String",543],["import Text.Parsec.String",511],["-> Maybe String",517]],"useCount":177488},{"word":"Syntax","context":[["import Language.Haskell.TH.Syntax",855],["import Syntax",534],["import qualified Language.Haskell.TH.Syntax as TH",148],["import Language.Haskell.TH.Syntax           (qLocation)",100],["module Syntax where",103],["import Language.Haskell.Exts.Syntax",109],["import           Language.Haskell.TH.Syntax",142],["import Syntax.AS_Structured",97],["import KnotCore.Syntax",95],["-- See \"Language.Haskell.TH.Syntax#infix\"",100]],"useCount":8039},{"word":"System","context":[["import System.Directory",6356],["import System.Console.GetOpt",1548],["import System.Process",2343],["import System.IO.Unsafe",2503],["import System.Environment (getArgs)",2760],["import System.Random",3323],["import System.Exit",4761],["import System.FilePath",5476],["import System.Environment",7192],["import System.IO",10925]],"useCount":104175},{"word":"T","context":[["-> T.Text",308],["import qualified Data.Text           as T",298],["import qualified Data.Text as T",12934],["import Data.Text as T",337],["data T a where",465],["import qualified Data.Traversable as T",515],["import qualified Data.Text.Lazy as T",578],["import qualified Data.Text.IO as T",1026],["import qualified Data.Text.Encoding as T",1108],["import qualified Data.Text                  as T",331]],"useCount":84977},{"word":"TH","context":[["import Control.Lens.TH",244],["import Language.Haskell.TH",1838],["import Language.Haskell.TH.Syntax",855],["import Data.Aeson.TH",453],["import Database.Persist.TH",431],["import Language.Haskell.TH.Quote",403],["import qualified Language.Haskell.TH as TH",349],["import qualified Language.Haskell.TH as TH",349],["import           Language.Haskell.TH",313],["-> DsM (Core TH.DecQ)",306]],"useCount":40892},{"word":"TODO","context":[["--TODO:",86],["comment [\"TODO: intrinsic \", Text.pack $ show name]",116],["-- TODO: can we eliminate this lock if it doesn't touch ~/.stack/?",120],["TODO",157],["--- TODO ----------------------------------------------------------------------",172],["-- TODO: NubListify",332],["-- TODO:",404],["-- TODO",1326],["-- TODO: problem here is we need the .c files built first, so we can load them",86],["{- TODO",96]],"useCount":11202},{"word":"Tag","context":[["-- * Tag",125],["type Tag = String",74],["tagValue :: Lens' Tag (Maybe Text)",75],["data Tag = Tag",77],["= case wire'Tag of",1159],["update'Self wire'Tag old'Self",1159],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],[", Tag",255],["instance FromJSON Tag where",84],["data Tag = Tag",77]],"useCount":6978},{"word":"TcM","context":[["-> TcType -> TcType -> TcM ErrMsg",68],["-> TcM ()",266],["-> TcM a",208],["-> (ZonkEnv -> Located (body TcId) -> TcM (Located (body Id)))",155],["-> TcM (LHsBinds TcId, [TcId])",104],["-> TcM ([(RecFlag, LHsBinds TcId)], thing)",96],["-> TcM (LPat TcId, a)",87],["-> TcM (LHsBinds Id)",80],["-> HsConPatDetails Name -> TcM a",75],["-> TcM (Pat TcId, a)",75]],"useCount":28553},{"word":"TcS","context":[["import TcSMonad as TcS",31],["the TcS monad, and we are in TcM here.",34],["-> TcS [Eqn]",34],["fail err  = TcS (\\_ -> fail err)",43],["= TcS $ \\ env ->",47],["-> TcType -> TcType -> TcS (StopOrContinue Ct)",68],["-> TcS ()",129],["-> TcS (StopOrContinue Ct)",327],["try_class_defaulting :: WantedConstraints -> TcS WantedConstraints",29],["-> TcS a",30]],"useCount":7388},{"word":"TcType","context":[["import TcType",1231],["-> TcType -> TcType -> TcM ErrMsg",68],["-> TcType -> TcType -> TcS (StopOrContinue Ct)",68],["-> TcType -> TcType -> TcM ErrMsg",68],["-> TcType -> TcType -> TcS (StopOrContinue Ct)",68],["-> TyCon -> [TcType]",87],["import TcType           hiding( typeKind )",59],["-> TcType",56],["-> [TcType]     -- Expected type for each field",56],["import TcRnMonad        -- TcType, amongst others",53]],"useCount":10023},{"word":"TemplateHaskell","context":[[", TemplateHaskell",173],["{-# LANGUAGE TemplateHaskell #-}",9167],["{-# LANGUAGE TemplateHaskell   #-}",871],["{-# LANGUAGE TemplateHaskell            #-}",787],["{-# LANGUAGE TemplateHaskell       #-}",739],["{-# LANGUAGE TemplateHaskell    #-}",273],["{-# LANGUAGE TemplateHaskell     #-}",269],["{-# LANGUAGE TemplateHaskell      #-}",226],["{-# LANGUAGE TemplateHaskell, DeriveDataTypeable #-}",193],["{-# LANGUAGE OverloadedStrings, TemplateHaskell #-}",173]],"useCount":16437},{"word":"Term","context":[["Term(..),",52],["import Idris.Elab.Term",212],["-> Term",208],[":: (ABT Term abt)",188],["data Term",144],["instance Show Term where",115],["import Term",70],["import Unison.Term (Term)",52],["import Unison.Term (Term)",52],["instance Arbitrary Term where",50]],"useCount":9891},{"word":"Test","context":[["import           Test.QuickCheck",795],["tests :: [Test]",905],["import Test.Framework.Providers.HUnit",976],["import Test.Tasty.HUnit",1031],["import           Test.Hspec",1318],["import Test.Framework",1484],["import Test.Tasty",1909],["import Test.HUnit",2615],["import Test.QuickCheck",4540],["import Test.Hspec",4648]],"useCount":48553},{"word":"Text","context":[["import qualified Data.Text as Text",1528],["import qualified Data.Text as T",12934],["import Data.Text (Text)",6188],["import Data.Text (Text)",6188],["import Text.Printf",3791],["import           Data.Text (Text)",2005],["import           Data.Text (Text)",2005],["import Text.ParserCombinators.Parsec",1776],["import Text.Parsec",1624],["import qualified Data.Text as Text",1528]],"useCount":158066},{"word":"The","context":[["-- The fields accessible through corresponding lenses are:",8639],["-- | The response status code.",2186],["-- WARNING: The next block of code was automatically generated by",2252],["-- Note [The substitution invariant].",256],["-- The above warning supression flag is a temporary kludge.",288],["-- (c) The University of Glasgow 2004-2006",336],["Maintainer  : The Idris Community.",375],["(c) The GRASP/AQUA Project, Glasgow University, 1992-1998",1595],["(c) The University of Glasgow 2006",1743],["-- | -- | The response status code.",1955]],"useCount":158117},{"word":"There","context":[["-- There are some options that we need to pass to gcc when compiling",60],["-- snapshot package database for Cabal. There are two",41],["-- \"interactive\" mode (GHCi). There are also entry points for",44],["-- There are various entry points depending on what mode we're in:",44],["when (not b) $ liftIO $ putStrLn \"There is no computation running.\"",49],["-- There's no static check; it's up to the user",56],["wayUnsetGeneralFlags _ WayDyn      = [-- There's no point splitting objects",56],["\"There is no available version of \" ++ display name",64],["-- Please see the documentation for the Yesod typeclass. There are a number",286],["-- Default: There is no default value.",41]],"useCount":7420},{"word":"These","context":[["-- | Runtime settings to configure this application. These settings can be",65],["import Data.These",52],["-- | These @-\\<blah\\>@ flags can all be reversed with @-no-\\<blah\\>@",58],["-- | These @-d\\<blah\\>@ flags can all be reversed with @-dno-\\<blah\\>@",58],["-- These have to be IORefs, because the defaultCleanupHandler needs to",60],["-- These can be singular (think ghc -c) or plural (think ghc --make)",60],["-- | These -X<blah> flags can all be reversed with -XNo<blah>",61],["-- These modules are intended to be imported qualified, to avoid name",111],["-- | These -X<blah> flags cannot be reversed with -XNo<blah>",120],["-- | These @-f\\<blah\\>@ flags can all be reversed with @-fno-\\<blah\\>@",156]],"useCount":7732},{"word":"This","context":[["-- evaluated before using the result in the next application. This",208],["-- This operation returns paginated results.",560],["-- performs initialization and creates a WAI application. This is also the",208],["-- This function allocates resources (such as a database connection pool),",208],["-- This instance is required to use forms. You can modify renderMessage to",243],["-- This is where we define all of the routes in our application. For a full",283],["-- This function creates static content files in the static folder",285],["-- and names them based on a hash of their content. This allows",285],["-- This file is part of grid.",472],["-- This line actually creates our YesodDispatch instance. It is the second half",205]],"useCount":63636},{"word":"Time","context":[["import Data.Time.Clock (UTCTime)",241],["import Data.Time",2650],["import Data.Time.Clock",1492],["import           Data.Time",818],["import Data.Time.Clock.POSIX",704],["import System.Time",600],["import Data.Time.Calendar",509],["import Data.Time.Format",396],["import Data.Time.LocalTime",392],["import           Data.Time.Clock",387]],"useCount":14578},{"word":"Tip","context":[["Tip -> Bin 1 k x Tip Tip",62],["Tip -> Bin 1 k x Tip Tip",62],["Tip -> singleton kx x",63],["go _ Tip = (Tip :*: Tip)",66],["go _ Tip = (Tip :*: Tip)",66],["go _ Tip = (Tip :*: Tip)",66],["goJust _ kx' x' Tip = Just (kx', x')",68],["Tip ky y",152],["go z' Tip             = z'",94],["goNothing _ Tip = Nothing",116]],"useCount":10711},{"word":"ToJSON","context":[["instance (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f,",135],["instance ToJSON User where",67],["import Data.Aeson (FromJSON, ToJSON)",65],["instance ToJSON",204],["instance (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f,",135],["instance (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f,",135],["instance (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f,",135],["instance (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f,",135],["instance (ToJSON a, ToJSON b, ToJSON c, ToJSON d, ToJSON e, ToJSON f,",135],[", ToJSON(..)",79]],"useCount":7384},{"word":"Trac","context":[["It can be terribly confusing to get an error message like (Trac #9171)",34],["-- Example of \"yes\" (Trac #2436)",56],["-- the selector Ids, not to fresh names (Trac #5410)",43],["-- make `ghc -e` exit nonzero on invalid input, see Trac #7962",43],["This initially came up in Trac #8968, concerning pattern synonyms.",34],["the *signature* (Trac #7293).  So, for Given errors we replace the",34],["See Trac #8278",34],["In some cases (see Trac #303, #1537) it might have a more",34],["-- This *can* happen (Trac #6123, and test T2627b)",34],["-- See Trac #8191",34]],"useCount":9097},{"word":"Trace","context":[["import Debug.Trace",4363],["import Debug.Trace (trace)",471],["--import Debug.Trace",330],["import           Debug.Trace",329],["-- import Debug.Trace",311],["import qualified Debug.Trace",59],["import Debug.Trace(trace)",58],["import Debug.Trace ( trace )",54],["-- import           Debug.Trace",54],["-- import Debug.Trace (trace)",58]],"useCount":6925},{"word":"Trans","context":[["import Control.Monad.Trans.Class",1180],["import Control.Monad.Trans.Either",491],["import Control.Monad.Trans.Except",503],["import Control.Monad.Trans.Resource",515],["import Control.Monad.Trans.State",608],["import Control.Monad.Trans.Maybe",643],["import Control.Monad.Trans.Reader",654],["import Control.Monad.Trans.Class (lift)",657],["import Control.Monad.Trans (liftIO)",713],["import Control.Monad.Trans",2740]],"useCount":20040},{"word":"Traversable","context":[["import qualified Data.Traversable as Traversable",180],["import Data.Traversable",1450],["import qualified Data.Traversable as T",515],["import Data.Traversable (traverse)",313],["import           Data.Traversable",299],["import Data.Traversable (Traversable)",259],["import Data.Traversable (Traversable)",259],["import Data.Traversable (Traversable(traverse))",192],["import Data.Traversable (Traversable(traverse))",192],["} deriving (Functor, Foldable, Traversable)",185]],"useCount":8195},{"word":"Tree","context":[["myFringe:: Tree a -> [a]",89],["import Data.Tree",759],["instance Functor Tree where",117],["data Tree a = Leaf a | Branch (Tree a) (Tree a)",116],["data Tree a = Leaf a | Branch (Tree a) (Tree a)",116],["data Tree a = Leaf a | Branch (Tree a) (Tree a)",116],["import Tree",114],["import           Data.Tree",112],["import qualified Data.Tree as Tree",86],["import qualified Data.Tree as T",86]],"useCount":7788},{"word":"True","context":[["Nothing -> True",769],["| otherwise = True",524],["-- True",1797],["True",2760],["return True",4461],["_ -> True",1037],["True -> do",995],["= True",994],["then return True",783],["True ->",412]],"useCount":127758},{"word":"TyCon","context":[[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ]",452],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ]",452],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ]",452],["[ TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ]",259],["import TyCon",2002],[", TyCon \"int\" []",1089],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ]",904],[", TyCon \"addr\" []",481],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ]",904],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ]",904]],"useCount":37795},{"word":"TyVar","context":[["tyConTyVars  :: [TyVar],          -- ^ TyVar binders",36],["TyVar,",35],["tyConTyVars  :: [TyVar],          -- ^ TyVar binders",36],["abs_tvs     :: [TyVar],",36],["-- Location of the binding site is on the TyVar",38],["tyConTyVars  :: [TyVar], -- ^ The kind and type variables used in the",42],["-> TcM ([TyVar], ThetaType, Class, [Type])",48],["-> [TyVar] -- the tvs in the instance head",50],["-> [TyVar]",93],["-> IfL (AltCon, [TyVar], CoreExpr)",62]],"useCount":8591},{"word":"Type","context":[["-- See Note: Type of local 'go' function",295],["\"Content-Type\" =#",2235],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["-> Type",415],["-- Type: String",348],["data Type",303],["Type",299],["import Type",2223],["instance Show Type where",159]],"useCount":68026},{"word":"TypeFamilies","context":[["{-# LANGUAGE TypeFamilies         #-}",189],["{-# LANGUAGE TypeFamilies        #-}",205],[", TypeFamilies",420],["{-# LANGUAGE TypeFamilies      #-}",488],["{-# LANGUAGE TypeFamilies               #-}",690],["{-# LANGUAGE TypeFamilies          #-}",699],["{-# LANGUAGE TypeFamilies                #-}",3410],["{-# LANGUAGE TypeFamilies #-}",6541],["{-# LANGUAGE TypeFamilies       #-}",7643],["{-# LANGUAGE TypeFamilies              #-}",155]],"useCount":22791},{"word":"TypeOperators","context":[["{-# LANGUAGE TypeOperators              #-}",219],["{-# LANGUAGE TypeOperators #-}",3412],[", TypeOperators",214],["{-# LANGUAGE TypeOperators      #-}",2354],["{-# LANGUAGE TypeOperators         #-}",313],["{-# LANGUAGE TypeOperators     #-}",299],["{-# LANGUAGE TypeOperators       #-}",263],["{-# LANGUAGE TypeOperators          #-}",87],["TypeOperators,",103],["{-# LANGUAGE TypeOperators        #-}",129]],"useCount":8477},{"word":"Typeable","context":[["import Data.Typeable",6169],["deriving (Show, Typeable)",1351],["import           Data.Typeable",1086],["import qualified Data.Typeable as Prelude'",1379],["deriving Typeable",1904],["deriving (Typeable)",2170],["import Data.Typeable (Typeable)",3960],["import Data.Typeable (Typeable)",3960],["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["} deriving (Eq,Show,Data,Typeable,Generic)",5936]],"useCount":81056},{"word":"Types","context":[["import           Stack.Types",700],["import Types",2607],["import Foreign.C.Types",2531],["import GHCJS.DOM.Types",1593],["import           Types",739],["import Network.HTTP.Types",640],["import Data.Aeson.Types",629],["import Foreign.C.Types",589],["-- * Types",1998],["import GHCJS.Types (JSVal(..), JSString)",1024]],"useCount":71455},{"word":"UI","context":[["import qualified Graphics.UI.Gtk as Gtk",153],["import Graphics.UI.WX",145],["import qualified Graphics.UI.Bottle.EventMap as E",162],["import qualified Graphics.UI.Bottle.Widget as Widget",316],["import qualified Graphics.UI.GLFW as GLFW",362],["import qualified Graphics.UI.SDL as SDL",197],["import Graphics.UI.Gtk",1007],["import Graphics.UI.GLUT",482],["import qualified Graphics.UI.Bottle.Animation as Anim",111],["import Graphics.UI.WXCore",109]],"useCount":8980},{"word":"Unique","context":[["-- identical to Unique of Name stored in",154],["import Data.Unique",198],["import Unique",1267],["-- | Unique identifier for the Android app that is being updated; for",38],[":: Unique",126],["-- See Note [Unique Determinism and code generation]",118],["{-# UNPACK #-} !Unique",96],["import ETA.BasicTypes.Unique",45],["tyConUnique  :: Unique,  -- ^ A Unique of this TyCon. Invariant:",90],["tyConUnique  :: Unique,  -- ^ A Unique of this TyCon. Invariant:",90]],"useCount":10134},{"word":"Unsafe","context":[["import qualified Data.ByteString.Unsafe as B",181],["import Data.Profunctor.Unsafe",157],["import           System.IO.Unsafe (unsafePerformIO)",137],["import           System.IO.Unsafe",215],["import Unsafe.Coerce (unsafeCoerce)",228],["import System.IO.Unsafe",2503],["import System.IO.Unsafe (unsafePerformIO)",1144],["import Unsafe.Coerce",737],["{-# LANGUAGE Unsafe #-}",415],["import System.IO.Unsafe ( unsafePerformIO )",398]],"useCount":9558},{"word":"Use","context":[["-- Use createProcess_ to avoid the log file being closed afterwards",74],["-- preconditions expected by public modules. Use at your own risk!",83],["-- Use a 'Resource' element with the domain name to limit the action to only",87],["-- -   Use a 'Resource' element with the domain name to limit the action to",70],["| LinkInMemory        -- ^ Use the in-memory dynamic linker (works for both",60],["-- ^ Use detailed request logging system",64],["-- ^ Use the reload version of templates",65],["-- | Use this only when paginating results to indicate the maximum number of",95],["-- Use one of the following lenses to modify other fields as desired:",19628],["{-# ANN module \"HLint: ignore Use camelCase\" #-}",372]],"useCount":29072},{"word":"Util","context":[["import Util",4523],["import Yesod.Default.Util (addStaticContentExternal)",160],["-- src/Util/GenerateHtmlCombinators.hs:249",1024],["-- src/Util/GenerateHtmlCombinators.hs:199",714],["-- src/Util/GenerateSvgCombinators.hs:220",266],["module Util where",235],["import Autolib.Util.Zufall",201],["import           Util",188],["import Util.Pretty",176],["import Util.System",175]],"useCount":14646},{"word":"Utils","context":[["import Distribution.Utils.NubList",247],["module Utils where",255],["-- * Utils",214],["import Utils",1450],["import Distribution.Simple.Utils",1177],["-- Utils",466],["import Ganeti.Utils",373],["import Data.String.Utils",300],["import Foreign.Marshal.Utils",253],["import Common.Utils",258]],"useCount":14070},{"word":"V","context":[["import qualified Data.Vector.Storable as V",481],["import qualified Data.Vector.Generic as V",130],["V,",155],["V(",170],["V)",170],["n = V.length v",183],["V\\u000a",212],["import qualified Data.Vector.Unboxed as V",419],["V",1583],["import qualified Data.Vector as V",3423]],"useCount":15325},{"word":"Value","context":[["configSettingsYmlValue :: Value",67],["-> Value",180],["instance Show Value where",186],["data Value",152],["import Idris.Elab.Value",142],["-- | Uniquely identifies the type of this resource. Value is always the fixed",123],[", Value(..)",114],["type Value = String",78],[", Value",71],["-- | Identifies what kind of resource this is. Value: the fixed string",316]],"useCount":7111},{"word":"Var","context":[["letbind letn (Var tyn) (Var valn)",270],["letbind letn (Var tyn) (Var valn)",270],["import Var",1802],["| Var String",170],["type Var = String",97],["-- * 'Var.Var': see \"Var#name_types\"",85],["-- * 'Var.Var': see \"Var#name_types\"",85],["-- * 'Var.Var': see \"Var#name_types\"",85],["claim valn (Var tyn)",367],["import qualified AST.Variable as Var",288]],"useCount":26748},{"word":"Vector","context":[["import qualified Data.Vector.Unboxed as V",419],["import Data.Vector (Vector)",450],["import Data.Vector (Vector)",450],["import qualified Data.Vector as Vector",457],["import qualified Data.Vector as V",3423],["import qualified Data.Vector as Vector",457],["-> Vector a",474],["import qualified Data.Vector.Storable as V",481],["import qualified Data.Vector.Unboxed as U",541],["import qualified Data.Vector.Unboxed as VU",370]],"useCount":31197},{"word":"Verbosity","context":[[":: Verbosity",261],["( Verbosity, normal )",113],["configure :: Verbosity -> Maybe FilePath -> Maybe FilePath",93],["import Distribution.Verbosity",1017],["( Verbosity )",227],["import Distribution.Verbosity as Verbosity",121],["import Distribution.Verbosity (Verbosity)",131],["import Distribution.Verbosity (Verbosity)",131],["import Distribution.Verbosity as Verbosity",121],["-> Verbosity",368]],"useCount":10783},{"word":"Version","context":[["import Distribution.Version",1205],["Version   : 1.1.4",1354],["import Data.Version",698],["import Data.Version (showVersion)",503],["version :: Version",364],["import Data.Version (Version(..))",349],["import Data.Version (Version(..))",349],["\"Version\" =: (\"2010-05-08\" :: ByteString),",329],["\"Version\" =: (\"2015-04-15\" :: ByteString),",320],["\"Version\" =: (\"2014-10-31\" :: ByteString),",225]],"useCount":19729},{"word":"W","context":[[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],["import qualified XMonad.StackSet as W",548],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300],[",[W,W,W,W,W,W,W,W,W,W,W,W]",300]],"useCount":24516},{"word":"We","context":[["-- parse (a %partial parser).  We must ignore the saved token on the top of",118],["-- We only support SparcV9 and better because V8 lacks an atomic CAS",130],["{-  We don't need state discarding for our restricted implementation of",132],["-- We break up the default layout into two components:",244],["-- We'll need these",108],["-- We need a log function to create a connection pool. We need a connection",87],["-- We need a log function to create a connection pool. We need a connection",87],["-- We return Nothing to indicate an empty statement (or comment only), not a",78],["-- We return True to indicate the import is safe and False otherwise",74],["-- We always optimise this, otherwise performance of a non-optimised",71]],"useCount":42415},{"word":"When","context":[["-- When 'mergeWithKey' is given three arguments, it is inlined to the call",57],["-- When calling @'mergeWithKey' combine only1 only2@, a function combining two",57],["-- When you set f, set the ones it implies",107],["-- When you un-set f, however, we don't un-set the things it implies",78],["-- | When 'IsTruncated' is 'true', this element is present and contains the",73],["-- | /O(n+m)/. Difference with a combining function. When two equal keys are",68],[", \"When working on:\" <+> pretty name",63],["-- | When invoking external tools as part of the compilation pipeline, we",61],["* When renaming:",58],["-- | /O(min(n,W))/. Adjust a value at a specific key. When the key is not",58]],"useCount":12003},{"word":"Word","context":[["import Data.Word (Word, Word64)",2052],["import Data.Word",7109],["import Data.Word (Word64)",240],["import Data.Word",227],["import Data.Word (Word)",208],["import Data.Word (Word32)",366],["import GHC.Word",414],["import Data.Word (Word8)",1017],["import Data.Word (Word, Word64)",2052],["import           Data.Word",940]],"useCount":21916},{"word":"Word8","context":[["import Data.Word (Word, Word8, Word16, Word32, Word64)",97],["import           Data.Word (Word8)",110],["-> Word8",118],["import Data.Word ( Word8 )",91],["import Data.Word                (Word8)",84],["import Data.Word (Word8, Word16, Word32, Word64)",79],["type Byte = Word8",78],["import Data.Word (Word8)",1017],["import Data.Word (Word8, Word16)",74],["import Data.Word (Word8, Word32)",74]],"useCount":17085},{"word":"Wrap","context":[["-- Wrap in parens if hsExprNeedsParens says it needs them",24],["stptr   <- newStablePtr (Wrap _handler)",8182],["-- Wrap up",60],["-- Wrap the main function in 'void' to discard its value instead",34],["-- See Note [Wrap bindings returned by specImports]",32],["-- Wrap a context around only if we want to show that contexts.",28],["`C a`, with the type of the `Wrap` value being made.",23],["-- Wrap the result of the quasi-quoter in parens so that we don't",23],[", optWrapText          :: Bool    -- ^ Wrap text",22],["-- ^ Wrap parens around an operator",20]],"useCount":8852},{"word":"X","context":[["T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))",71],["[\"X-Amz-Target\" =#",2228],["import qualified Control.Exception as X",176],["( module X",148],["(X.catch",105],["-> X ()",94],[", module X",136],["-- | These -X<blah> flags cannot be reversed with -XNo<blah>",120],["module X",133],["M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }",71]],"useCount":11404},{"word":"XMonad","context":[["import XMonad",896],["import XMonad.Layout.NoBorders",217],["import qualified XMonad.StackSet as W",548],["import XMonad.Hooks.ManageDocks",300],["import XMonad.Hooks.DynamicLog",287],["-- \"XMonad.Doc.Extending#Editing_key_bindings\".",166],["import XMonad.Hooks.ManageHelpers",139],["import XMonad.Util.EZConfig",140],["import XMonad.Hooks.SetWMName",149],["import XMonad.Prompt",166]],"useCount":8184},{"word":"Yesod","context":[["-- Please see the documentation for the Yesod typeclass. There are a number",286],["-- by overriding methods in the Yesod typeclass. That instance is",197],["-- In addition, you can configure a number of different aspects of Yesod",197],["import Yesod.Static",259],["instance Yesod App where",304],["-- migrations handled by Yesod.",310],["import Yesod.Core",338],["import Yesod",760],["import Yesod.Auth",525],["import Yesod.Default.Config",472]],"useCount":9040},{"word":"_","context":[["_ -> False",4542],["_ -> return Nothing",1330],["_ -> []",2166],["parseJSON _ = mzero",2457],["_ `HappyStk`",3425],["_",3570],["_ -> Nothing",6215],["_ -> return ()",4685],["_ ->",4563],["_ -> do",4292]],"useCount":597077},{"word":"__GLASGOW_HASKELL__","context":[["#if __GLASGOW_HASKELL__ >= 710",660],["#if __GLASGOW_HASKELL__ >= 708",737],["#if __GLASGOW_HASKELL__ < 709",773],["#if __GLASGOW_HASKELL__",860],["#if __GLASGOW_HASKELL__ < 710",1351],["#if __GLASGOW_HASKELL__ <= 710",644],["#ifdef __GLASGOW_HASKELL__",1576],["#if __GLASGOW_HASKELL__ >= 700",1485],["#if __GLASGOW_HASKELL__ >= 701",483],["#if __GLASGOW_HASKELL__ >= 702",645]],"useCount":17714},{"word":"_eid","context":[["setUserMethod _eobj _eid _handler",1248],["withCWString _eid $ \\cstr_eid ->",6012],["setHandler _eobj _eid _handler",6012]],"useCount":13272},{"word":"_eobj","context":[["setUserMethod _eobj _eid _handler",1248],["setHandler _eobj _eid _handler",6012],["withObjectPtr _eobj $ \\cobj_eobj ->",7260]],"useCount":14520},{"word":"_handler","context":[["else _handler x0obj",2216],["setUserMethod _eobj _eid _handler",1248],["else _handler x0obj x1obj",2136],["connectSlot _qsig_obj _qsig_nam _qslt_obj _qslt_nam _handler",900],["else _handler qobj (qEnum_fromInt hint)",774],["else _handler x0obj x1obj x2obj",604],["else _handler x0obj x1int",500],["else _handler x0obj x1enum",332],["stptr   <- newStablePtr (Wrap _handler)",8182],["setHandler _eobj _eid _handler",6012]],"useCount":24404},{"word":"a","context":[["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408],["case fromShATerm' a att0 of",1259],["(att1, a') <- toShATerm' att0 a",1274],["(att1, a') <- toShATerm' att0 a",1274],["{ (att1, a') ->",1428],["-> m a",1693],["a(g185",1829],["return a",2014],["-> a",2148],["-- * Creating a Request",7529]],"useCount":974090},{"word":"a1","context":[["a1 <- get bh",133],["let {a1' = fromIntegral a1} in",102],["let {a1' = fromIntegral a1} in",102],["put_ bh (occNameFS a1)",88],["occ <- return $! mkTcOccFS a1",80],["(a2,x') = f a1 kx x",80],["(a1 : a2 : []) -> do",79],["let {a1' = toCEnum a1} in",192],["put_ bh a1",160],["let {a1' = toCEnum a1} in",192]],"useCount":9158},{"word":"a2","context":[["(a1 : a2 : []) -> do",79],["let {a2' = fromValue a2} in",47],["let {a2' = castPtr a2} in",70],["let {a2' = castPtr a2} in",70],["(a2,x') = f a1 kx x",80],["let {a2' = toCEnum a2} in",180],["let {a2' = toCEnum a2} in",180],["a2 <- get bh",282],["put_ bh a2",283],["let {a2' = fromValue a2} in",47]],"useCount":7289},{"word":"aa","context":[["Data.Binary.put aa",64],["aa' = from_sml_ATermIRI (getATermByIndex1 aa att)",55],["aa' = from_sml_ATermIRI (getATermByIndex1 aa att)",55],["-- >     == (fromList [(1,2), (3,6)], fromList [(5,\"aa\"), (7,\"zz\")])",63],["0 -> do aa <- get bh",97],["aa <- get bh",194],["put_ bh aa",335],["aa' = from_sml_ShATerm (getATermByIndex1 aa att)",429],["aa' = from_sml_ShATerm (getATermByIndex1 aa att)",429],["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":11576},{"word":"aaa","context":[["\"http://example.org/aaa/bbb#ccc\"",14],["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408],[", uriPath      = \"/aaa/bbb\"",15],["schemes = [\"coap\",\"doi\",\"javascript\",\"aaa\",\"aaas\",\"about\",\"acap\",\"cap\",\"cid\",",16],["-- > splitOn \"aaa\"  \"aaaXaaaXaaaXaaa\"  == [\"\",\"X\",\"X\",\"X\",\"\"]",24],["-- > fromSet (\\k -> replicate k 'a') (Data.Set.fromList [3, 5]) == fromList [(5,\"aaaaa\"), (3,\"aaa\")]",33],["-- > fromSet (\\k -> replicate k 'a') (Data.IntSet.fromList [3, 5]) == fromList [(5,\"aaaaa\"), (3,\"aaa\")]",24]],"useCount":8534},{"word":"aaaa","context":[["the switch from @aaaa@ to",17],["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8425},{"word":"aaaaa","context":[["-- > fromSet (\\k -> replicate k 'a') (Data.IntSet.fromList [3, 5]) == fromList [(5,\"aaaaa\"), (3,\"aaa\")]",24],["-- > fromSet (\\k -> replicate k 'a') (Data.Set.fromList [3, 5]) == fromList [(5,\"aaaaa\"), (3,\"aaa\")]",33],["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8465},{"word":"aaaaaa","context":[["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8408},{"word":"aaaaaaa","context":[["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8408},{"word":"aaaaaaaa","context":[["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8408},{"word":"aaaaaaaaa","context":[["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8408},{"word":"aaaaaaaaaa","context":[["a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa aaaaaaaaaa",8408]],"useCount":8408},{"word":"about","context":[["-- set and provides detailed information about the event. It is not set for",46],["-- Similarly, for unary instructions, we don't have to worry about",56],["-- provides detailed information about the event. It is not set for other event",51],["\"knows about\" in some way",50],["-- them to the right places. One of the more tricky things about this module is",47],["postComment (enRoute NewWikiDiscussionR \"about\") $",63],["| Opt_PedanticBottoms                -- Be picky about how we treat bottom",61],["-- Tell the finder cache about this module",44],["\"   :info[!] [<name> ...]       display information about the given names\\n\" ++",44],["-- Only called on *zonked* things, hence no need to worry about flatten-skolems",94]],"useCount":14966},{"word":"above","context":[["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["* Redistributions in binary form must reproduce the above",332],["-- The above warning supression flag is a temporary kludge.",288],["-- above: Even the first block gets a label, because with branch-chain",53],["-- Note the nasty duplication with the same computation in compileFile above",83],["-- We could drop the separator here, and then use </> above. However,",56],["| HscNothing     -- ^ Don't generate any code.  See notes above.",60],["-- on Way above.",61],["-- | The above type is a generalisation for:",62],["-- Override the above two destinations when a Referer: header is present",67]],"useCount":10518},{"word":"acc","context":[["-> PreOpenExp acc env aenv t",65],["| otherwise = acc",134],["acc",94],["-> acc",91],["else acc",85],["go acc = do",77],["_ -> acc",61],["qrev []     acc = acc",59],["qrev (x:xs) acc = qrev xs (x:acc)",59],["qrev []     acc = acc",59]],"useCount":15642},{"word":"accessible","context":[["In contrast, Map is the family tycon (accessible via",23],["-- The fields accessible through corresponding lenses are:",8639],["-- NB: Although the constructor is given here, it will not be accessible in",25],[", optSelfContained     :: Bool    -- ^ Make HTML accessible offline",24],["show (Inaccessible n) = show n ++ \" is not an accessible pattern variable\"",24],["representation and family type.  It is accessible from :R123Map via",23],["-- really is an original definition, and is accessible from the dependencies of",22],["pprintErr' i (Inaccessible n) = annName n <+> text \"is not an accessible pattern variable\"",22],["-- 'tidyNames' is to generate user accessible names in case they are",21],["--          the externally-accessible ones",20]],"useCount":9055},{"word":"action","context":[["result <- action",154],["-- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a",128],["-- action.",158],["happySeq r (action nt j tk st sts (r `HappyStk` stk'))",234],["case action of",426],["action",657],["-- Arrays only: do the next action",132],["sts1@(((st1@(HappyState (action))):(_))) ->",134],["-- Hack to get the typechecker to accept our action functions",132],["runDB action = do",130]],"useCount":16516},{"word":"add","context":[["-- Don't forget to add new modules to your cabal file!",242],["-- You can add other plugins like BrowserID, email or OAuth here",173],["-- remove old targets with the same id; e.g. for :add *M",51],["where   -- Don't add a newline at the end, so that successive",55],["-- | what kind of {-# SCC #-} to add automatically",60],["add = (+)",60],[", add",160],["-- reconfigure also checks if we're in a sandbox and reinstalls add-source",96],["-- add new ones to end, so they're included in order specified",85],["-- We add to the options from the front, so we need to reverse the list",61]],"useCount":15756},{"word":"addr","context":[[", ( \"mchar_1\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ] )",122],[", ( \"mptr_0\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ] )",137],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ]",904],[", TyCon \"addr\" []",481],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ]",452],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ]",452],[", ( \"mchar_0\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ] )",137],[", ( \"mptr_0\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ] )",137],[", ( \"mint_0\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ] )",137],[", ( \"mint_1\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ] )",124]],"useCount":10375},{"word":"after","context":[["-- character that failed, not after.",82],["-- | 'dropWhile' @p xs@ returns the suffix remaining after 'takeWhile' @p xs@.",62],["-- make sure we clean up after ourselves",64],[":: RecFlag       -- Whether it's recursive after breaking",64],["-- Where to send a user after successful login",217],["-- Where to send a user after logout",217],["-- after type-checking, a type abstraction to be",67],["--   storage must /not/ be used after this.",73],["-- Moving to a new state after a reduction",134],["mapM_ (uncurry (HUnit.assertEqual \"Different result after encoding/decoding\")",63]],"useCount":13387},{"word":"all","context":[["-- | /O(n)/. Map a function over all values in the map.",147],["-- This is where we define all of the routes in our application. For a full",283],["-- Import all relevant handler modules here.",302],["-- What messages should be logged. The following includes all messages when",192],["-- You can define all of your database entities in the entities file.",139],["-- /WARNING:/ This operation can be very inefficient. If at all possible, use",132],["-- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a",128],["{-# INLINE all #-}",166],["-- | These @-f\\<blah\\>@ flags can all be reversed with @-fno-\\<blah\\>@",156],["-- from all the external-package modules",145]],"useCount":64332},{"word":"alpha","context":[["-- Stability   :  alpha",208],["Stability   : alpha",804],["of $\\alpha$ in Adam's article.",43],["H alpha ~ fmv2",52],["alpha := F Bool",54],["[W] alpha ~ F Bool",54],["[W] H (F Bool) ~ H alpha",54],["fmv0 ~ alpha",78],["Stability : alpha",60],["We decide (x::alpha), and generate an implication like",58]],"useCount":7002},{"word":"already","context":[["-- this already raised an expection, but we need it",105],["-- If a file already exists at the deprecated location, its location is returned.",50],["-- create output var if doesn't already exist",51],["(\"macro '\" ++ macro_name ++ \"' is already defined\"))",51],["-- matching an StInt as the argument, because genericOpt will already",56],["-- generator function to the already constructed part of the vector.",61],["-- repeatedly applying the generator function to the already constructed part",61],["-- Initialise the linker (if it's not been done already)",63],["-- If the key is already present in the map, the associated value is",69],["-- Unsupported extensions have already been checked by configure",52]],"useCount":11784},{"word":"also","context":[["-- session can be using different dynamic flags. Dynamic flags can also be set",60],["-- performs initialization and creates a WAI application. This is also the",208],["-- See also Note [TyCon Role signatures]",120],["-- reconfigure also checks if we're in a sandbox and reinstalls add-source",96],["-- elements that fail the predicate. See also 'split'.",95],["-- Whenever you change the target, also make sure to set 'ghcLink' to",60],["trustPackage p = exposePackage p >> -- both trust and distrust also expose a package",60],["-- -ticky enables ticky-ticky code generation, and also implies -debug which",59],["-- call functions inside a module.  In HscNothing mode we also do it,",59],["-- | /O(min(m,n))/ Zip two vectors with a function that also takes the",58]],"useCount":18412},{"word":"alts","context":[["rebuildCase env scrut case_bndr alts cont",34],["showSep (\"\\n\" ++ indent i) (map (showA i) alts)",34],["repMultiIf (MkC alts) = rep2 multiIfEName [alts]",42],["repE (HsMultiIf _ alts)",42],["; expr' <- repMultiIf (nonEmptyCoreList alts')",42],["repMultiIf (MkC alts) = rep2 multiIfEName [alts]",42],["= do { (binds, alts') <- liftM unzip $ mapM repLGRHS alts",43],["= do { (binds, alts') <- liftM unzip $ mapM repLGRHS alts",43],["...code for alts...",46],["| Just v <- findDefault alts      = return $ Just (amap, v)",66]],"useCount":8121},{"word":"always","context":[["let r = fn stk in  -- it doesn't hurt to always seq here...",129],["-- | Uniquely identifies the type of this resource. Value is always the fixed",123],["--   This function is always /unambiguous/.",110],["-- We always optimise this, otherwise performance of a non-optimised",71],["-- URLs always use posix style '/' separators:",68],["-- first argument are always preferred to the second, for example in",92],["Conditional jumps are always to local labels, so we can use branch",64],["-- extensionFlags should always be equal to",61],["-- strictly speaking non-standard, but we always had this",60],["-- a new window. You can use this to, for example, always float a",59]],"useCount":12150},{"word":"an","context":[["-- We only support SparcV9 and better because V8 lacks an atomic CAS",130],["-- Enter error recovery: generate an error token,",134],["-- actually making the request, and provides an error response. If you have the",163],["-- An exception will be thrown in the case of an empty ByteString.",180],["-- See 'indexM' for an explanation of why this is useful.",122],["-- actually making the request, and provides an error response. If you have",291],["this have an additional note in the documentation.",206],["Operations that have an 'AWSPager' instance can transparently perform subsequent",206],["-- This is done to provide an optimization for serving static files from",190],["-- generates the rest of the code. Please see the linked documentation for an",123]],"useCount":97050},{"word":"and","context":[["-- and names them based on a hash of their content. This allows",285],["Redistribution and use in source and binary forms, with or without",1376],["documentation and/or other materials provided with the distribution.",990],["-- Redistribution and use in source and binary forms, with or without",846],["-- Redistribution and use in source and binary forms, with or without",846],["--    documentation and/or other materials provided with the distribution.",381],["-- and",331],["-- actually making the request, and provides an error response. If you have",291],["Redistribution and use in source and binary forms, with or without",1376],["-- keep settings and values requiring initialization before your application",282]],"useCount":233040},{"word":"any","context":[["{-# INLINE any #-}",169],["-- Please feel free to contact us at licensing@pivotmail.com with any",65],["-- but we don't generate any code for newtypes",83],["-- | Loads up any necessary settings, creates your foundation datatype, and",85],["-- build any C sources",112],[", any",121],["-- it for any purpose whatsoever.",126],["-- Don't inline any functions from the template.  GHC has a nasty habit",132],["; mapM_ (\\a -> a loc) ann -- Add any API Annotations to the top SrcSpan",145],["-- 3. Neither the name of the author nor the names of any contributors",242]],"useCount":37385},{"word":"application","context":[["(\"application/x-amz-json-1.1\" :: ByteString)])",2165],["(\"application/x-amz-json-1.0\" :: ByteString)])",147],["-- Perform database migration using our application's logging settings.",154],["putStrLn \"Starting devel application\"",171],["-- Create the WAI application and apply middlewares",186],["-- | The site argument for your application. This can be a good place to",192],["-- evaluated before using the result in the next application. This",208],["-- keep settings and values requiring initialization before your application",282],["-- This is where we define all of the routes in our application. For a full",283],["-- performs initialization and creates a WAI application. This is also the",208]],"useCount":14348},{"word":"apply","context":[["apply :: String -> [LispVal] -> ThrowsError LispVal",57],["-- Create the WAI application and apply middlewares",186],[", apply",123],["{-# INLINE apply #-}",86],["-- now that we have the script apply",62],["-- | Flags that apply at the top level, not to any sub-command.",59],["apply func argVals",49],["apply :: LispVal -> [LispVal] -> IOThrowsError LispVal",48],["apply (Func params varargs body closure) args =",44],["descend1 apply node = body node where",44]],"useCount":6963},{"word":"arbitrary","context":[["arbitrary = genericArbitrary",200],["`M.ap`(QC.arbitrary)",213],["arbitrary = do",2399],["a <- arbitrary",256],[", arbitraryValue = FIXString <$> arbitrary }",332],["arbitrary",335],["arbitrary = oneof",345],[", arbitraryValue = FIXInt <$> arbitrary }",353],["arbitrary =",736],["<*> arbitrary",1628]],"useCount":21018},{"word":"are","context":[["-- Please see the documentation for the Yesod typeclass. There are a number",286],["-- functions. You can spread them across multiple files if you are so",135],["-- resource pattern. All of your resource patterns are defined in",135],["-- | Settings are centralized, as much as possible, into this file. This",197],["Error matchers are designed for use with the functions provided by",199],["Some AWS operations return results that are incomplete and require subsequent",206],["-- While working on this module you are encouraged to remove it and",254],["-- are met:",348],["-- Base interface functions are in:",1344],["-- The fields accessible through corresponding lenses are:",8639]],"useCount":116581},{"word":"arg","context":[["= hsep [ppr_lexpr arg, arrowtt, ppr_lexpr arrow]",68],["arg_rep = cmmExprType dflags arg",69],["; (arg',fvArg) <- rnLExpr arg",87],["; (arg',fvArg) <- rnLExpr arg",87],["arg_code <- getAnyReg arg",104],["case arg of",121],["text <- UTF8.readFile arg",130],["case safeRead arg of",138],["(\\arg opt ->",332],["(\\arg opt -> do",605]],"useCount":31766},{"word":"args","context":[[", (lhs:rhs:_)          <- args =",119],["args <- getArgs",4806],["case args of",2332],["main = do args <- getArgs",376],["args",177],[", (lhs:rhs:_)           <- args =",116],["do args <- getArgs",162],["case getOpt Permute options args of",150],["if null args",139],["run args = return ()",123]],"useCount":78876},{"word":"argument","context":[["-- first argument are always preferred to the second, for example in",92],["-- argument.",127],["-- argument through the map in ascending order of keys.",186],["= lift $ tfail $ Msg (\"Attempting concrete match on polymorphic argument: \" ++ show tm)",104],["-- | The site argument for your application. This can be a good place to",192],["[LHsCmdTop id]   -- argument commands",68],[", ft_bad_app = panic \"in other argument\" }",75],["-- | 'foldr1' is a variant of 'foldr' that has no starting value argument,",76],["Now, given a tree (the argument to an CmmLoad) that references memory,",76],["<*> argument auto",78]],"useCount":20346},{"word":"arguments","context":[["-- arguments",67],["-> [String] -- ^ Command line arguments",73],["-- | The list of arguments supported by the program.",84],["arguments :: [ArgCompletion]",99],[", arguments",111],["-- | Promote a function to a monad, scanning the monadic arguments from",113],["instructions.  We peek at the arguments to decide what kind of",64],["arguments = []",66],["-- ^ Updated 'DynFlags', left-over arguments, and",121],["-> [CmmActual]        -- arguments (of mixed type)",130]],"useCount":19277},{"word":"arity","context":[["flagSpec \"call-arity\"                       Opt_CallArity,",46],["arity = length args",47],["text \"ASSERT(arity > 0);\",",40],["-- Invariant: length tyvars = arity",39],["- add arity",34],["-- See Note [The binders/kind/arity fields of a TyCon]",91],["`setArityInfo`         arity",68],["-- Suppress info such as arity and unfoldings on identifiers.",57],["execApp env ctxt ioUnit (drop arity xs)",34],["arity _ = 0",49]],"useCount":11078},{"word":"arr","context":[["arr",178],["= withQListObjectRefResult $ \\arr ->",226],["return arr",219],["unsafeReplace arr ies = runST (unsafeReplaceUArray arr ies)",205],["unsafeAccum f arr ies = runST (unsafeAccumUArray f arr ies)",205],["unsafeAccum f arr ies = runST (unsafeAccumUArray f arr ies)",205],["unsafeReplace arr ies = runST (unsafeReplaceUArray arr ies)",205],["getBounds (IOUArray arr) = stToIO $ getBounds arr",136],["getBounds (IOUArray arr) = stToIO $ getBounds arr",136],["arr <- readIORef arr_r",120]],"useCount":10945},{"word":"as","context":[["import qualified Data.ByteString.Lazy as L",2318],["import qualified Data.Map as Map",11760],["import qualified Data.Vector as V",3423],["import qualified Data.ByteString as BS",3683],["import qualified Data.Set as S",4087],["-- Use one of the following lenses to modify other fields as desired:",19628],["import qualified Data.Text as T",12934],["import qualified Data.ByteString as B",4410],["import qualified Data.Set as Set",6953],["import qualified Data.Map as M",9307]],"useCount":360455},{"word":"at","context":[["-- /WARNING:/ This operation can be very inefficient. If at all possible, use",132],["-- | /O(log n)/. Update the value at the maximal key.",92],["-- | /O(log n)/. Update the value at the minimal key.",92],["-- This action is throttled at one request per second.",100],["-- fall back to compile-time values, set to [] to require values at runtime",105],["-- at:",139],["-- Place Javascript at bottom of the body tag so the rest of the page loads first",142],["-- Maintainer  :  <maintainer at leksah.org>",155],["1000 objects at a time, and you must send subsequent requests with the",206],["{-# INLINE at #-}",83]],"useCount":42023},{"word":"auto","context":[["<*> argument auto",78],["(option auto",42],["-> Bool   -- auto-ghc-libs",44],["then [\"-Wl,--enable-auto-import\"]",46],["-- explicit packages with the auto packages and all of their",46],["<$> option auto",50],["<*> optional (option auto",64],["auto",74],["<*> option auto",225],["-- Stability   : auto-generated",9174]],"useCount":12617},{"word":"available","context":[["-- available.",183],["-- The next available suffix to uniquely name a temp file, updated atomically",56],["-- waiting for data to become available, instead it returns only whatever data",58],["if null available",60],["-- install-time depending on the available gcc version, and even",60],["-- number of available results is larger than maxResults, Compute Engine",63],["\"There is no available version of \" ++ display name",64],["-- available in this action, since that would require build tools to be",78],["-> IdSet                -- set of local vars available to this statement",90],["-- give a reasonable default. Instead, the information is available on the",129]],"useCount":8828},{"word":"b","context":[["b <- get bh",495],["-> b",477],["if b",582],["case b of",663],["where combine field = field a `mappend` field b",691],["case fromShATerm' b att1 of",696],["return b",704],["(att2, b') <- toShATerm' att1 b",711],["(att2, b') <- toShATerm' att1 b",711],["{ (att2, b') ->",807]],"useCount":224744},{"word":"base","context":[[", \"base\"",78],["import Data.SafeCopy (base, deriveSafeCopy)",88],["-- Controls the base of generated URLs. For more information on modifying,",93],["-- | The base URL for your static files. As you can see by the default",129],["-- from base:",136],["base' <- getWikiBase",172],["-- base",202],["import \"base\" Prelude ( Num )",67],["omitNulls base",55],["-- | Try to resolve the list of base names in the given directory by",55]],"useCount":9857},{"word":"be","context":[["-- expiration dates to be set far in the future without worry of",285],["-- of settings which can be configured by overriding methods here.",286],["-- What messages should be logged. The following includes all messages when",192],["-- If you do not find this file, copies can be found by writing to:",536],["-- value passed to hamletToRepHtml cannot be a widget, this allows",243],["-- The page to be redirected to when authentication is required.",240],["determines how many attempts should be made, in addition to delay and retry strategies.",206],["-- the top-level so that real test data can be incrementally added.",196],["-- Auto-generated: the actual test selection needs to be manually placed into",196],["-- | The site argument for your application. This can be a good place to",192]],"useCount":114815},{"word":"because","context":[["-- Here, no references to @v@ are retained because indexing (but /not/ the",61],["-- | I\\/O error where the operation failed because one of its arguments",60],["-- These have to be IORefs, because the defaultCleanupHandler needs to",60],["-- Not an instance of Outputable because of the \"arising from\" prefix",60],["-- track which ones we need to truncate because it's our first run",60],["-- because the handling of possible task preemption is rather costly",62],["-- will go away, because we can use the destination register to",64],["-- | An error indicating that an 'IO' operation failed because",77],["-- necessary because H98 doesn't have \"cunning newtype\" derivation",125],["-- We only support SparcV9 and better because V8 lacks an atomic CAS",130]],"useCount":36040},{"word":"been","context":[["$ \"Some flags have not been recognized: \"",49],["++ \" should have been handled earlier!\")",350],["-- if it could have been inferred safe.",50],["-- Unsupported extensions have already been checked by configure",52],["-- Consult the RTS to find whether GHC itself has been built with",54],["-- been set to Nothing. As it's a Just, it must be",56],["--  * 'isEOFError' if the end of file has been reached.",59],["--    from an imported module.  This will fail if no code has been generated",60],["-- Initialise the linker (if it's not been done already)",63],["-- Note: Some functionality previously present in the scaffolding has been",85]],"useCount":9938},{"word":"before","context":[["-- on an error, we want to keep the input *before* the",82],["a <- before",101],["-- need to appear before -pgmL to be parsed as LLVM flags.",60],["case t of Bin _ m l r | m < 0 -> go (go z l) r -- put negative numbers before",72],["case t of Bin _ m l r | m < 0 -> go (go z r) l -- put negative numbers before",72],["-- on implicitly before the option was added in 7.1, and",60],["before",79],["let (before, tyline : later) = splitAt (l-1) (lines src)",116],["-- evaluated before using the result in the next application. This",208],["-- keep settings and values requiring initialization before your application",282]],"useCount":13340},{"word":"being","context":[["-- it only applies to the module being compiles",44],["-> ModSummary      -- ^ summary for module being compiled",86],["-- Use createProcess_ to avoid the log file being closed afterwards",74],["-- very weakly typed, being derived from C--.",44],["--     ld: warning: could not create compact unwind for .LFB3: non-standard register 5 being saved in prolog",46],["-- split marker ':' with the Windows / DOS one, ';'. The reason being",61],["-- This special handler stops \"stack: \" from being printed before the",48],["-- and the home-pkg inst env (includes module being compiled)",50],["-- lambda-lifted, to avoid thunks being built in the inner-loop:",50],["-- work fine even with DOS paths, if you're not insisting on being silly.",61]],"useCount":7717},{"word":"between","context":[["parens = between (symbol \"(\") (symbol \")\")",48],["-> IO c         -- returns the value from the in-between computation",63],["anything in between, lest it overwrite some of those registers.  If",76],["you need to do some other computation between the code part and use of",76],["-- between filepaths and 'other stuff'. The reason for this is that",61],["-- TyThing.getOccName should define a bijection between the two lists.",53],["-- package between 2 DLLs. The dllSplit tells us which sets of",56],["-- It would be better if we could convert directly between UTF-8 and the",50],["-> (a -> IO c)  -- ^ computation to run in-between",63],["-- argument between each element of the list.",61]],"useCount":7975},{"word":"bh","context":[["putByte bh 1",639],["putByte bh 0",547],["b <- get bh",495],["put_ bh b",321],["put_ bh ab",312],["put_ bh a",449],["putByte bh 2",386],["put_ bh aa",335],["h <- getByte bh",1036],["get bh = do",1689]],"useCount":37441},{"word":"bi","context":[["componentGhcOptions verbosity lbi bi clbi odir =",54],["| bi <- allBuildInfo pkg",101],[", let bi = buildInfo exe",50],[", let bi = libBuildInfo lib",50],[", ext <- allExtensions bi ]",51],["bi = libBuildInfo lib",88],[", True || buildable bi ]",60],[", True || buildable bi",60],["| bi <- allBuildInfo pkg ]",54],[", UnknownExtension name <- allExtensions bi",52]],"useCount":7458},{"word":"binary","context":[["--   Redistribution and use in source and binary forms, with or without",99],["-- Redistribution and use in source and binary forms, with or without",846],["| LinkBinary          -- ^ Link object code into a binary",60],["-- | 'foldr', applied to a binary operator, a starting value",63],["-- ByteString using the binary operator, from left to right.",63],["-- binary operator, such that",74],["-- | 'foldl', applied to a binary operator, a starting value (typically",76],["[binary|",124],["* Redistributions in binary form must reproduce the above",332],["Redistribution and use in source and binary forms, with or without",1376]],"useCount":8039},{"word":"bind","context":[["-- {-# OPTIONS_GHC -fno-warn-unused-do-bind #-}",43],[", bind",53],["pprintCommand bind force str = do",51],["pprintClosureCommand bind force str",51],["{-# OPTIONS_GHC -Wall -fno-warn-unused-do-bind #-}",47],["flagGhciSpec \"print-bind-result\"            Opt_PrintBindResult,",46],["flagGhciSpec \"print-bind-contents\"          Opt_PrintBindContents,",46],["-- ^ Host/interface the server should bind to.",64],["{-# OPTIONS -fno-warn-unused-do-bind #-}",74],["{-# OPTIONS_GHC -fno-warn-unused-do-bind #-}",370]],"useCount":10709},{"word":"binder","context":[["Note [TransStmt binder map]",34],["ppr binder],",125],["trS_bndrs :: [(idR, idR)],      -- See Note [TransStmt binder map]",34],["binder",35],["-- Used at a lambda or case binder; just dump anything mentioning the binder",38],["-- Used at a lambda or case binder; just dump anything mentioning the binder",38],["-- desugared.  Moreover, in instance declaration the binder of a method",43],["-- Produce kinded binder constructors from the Haskell tyvar binders",43],["-- Substitute the local_meth_name for the binder",47],["ppr binder)",50]],"useCount":7676},{"word":"binders","context":[["-- occurrences don't fail, even though the binders don't",43],["So in repTopDs we bring the binders into scope with mkGenSyms and addBinds.",43],["tyConBinders = binders,",45],["--   these include outer binders",50],["-- See Note [Kind and type-variable binders]",52],["tyConBinders :: [TyConBinder], -- ^ Full binders",63],["ifBinders = binders,",64],["-- See Note [SrcSpan for binders]",72],["-- Assumes: all the binders of the binding are alrady in the meta-env",82],["-- See Note [The binders/kind/arity fields of a TyCon]",91]],"useCount":8730},{"word":"binding","context":[["-- the binding group, because we are talking Names",43],["Here the 'forall a' brings 'a' into scope over the binding group.",42],["-- environment ( f |-> f'1 ) from each binding, and then unioning them",43],["-- The preferred terminal program, which is used in a binding below and by",45],["-- For detailed instruction on editing the key binding see",45],["-- NB: the binding is always a FunBind",47],["text \"no pretty printer for pattern-matching do binding\" :",48],["\"   :steplocal                  single-step within the current top-level binding\\n\"++",51],["-- Check for duplicated names in a binding group",56],["-- Assumes: all the binders of the binding are alrady in the meta-env",82]],"useCount":13489},{"word":"bindings","context":[["-- GSoC 2015 - Haskell bindings for OpenCog.",84],["-- For detailed instructions on editing your key bindings, see",92],["#include <bindings.dsl.h>",418],["-- If you change layout bindings be sure to use 'mod-shift-space' after",61],["-- See Note [Scoped type variables in bindings]",84],["bindings: [x,y,...]",64],["-- we want to make sure that the bindings for data",60],["-- rather than just the exported bindings, in the TypeEnv and compiled",59],["-- | Does this target retain *all* top-level bindings for a module,",59],["-- pattern bindings",60]],"useCount":17084},{"word":"binds","context":[["= do { (binds, alts') <- liftM unzip $ mapM repLGRHS alts",43],["{-# OPTIONS_GHC -fno-warn-unused-binds   #-}",5323],["{-# OPTIONS_GHC -fno-warn-unused-binds      #-}",2316],["{-# OPTIONS_GHC -fno-warn-unused-binds #-}",247],["-- {-# OPTIONS_GHC -fno-warn-unused-binds   #-} -- TEMP",102],["{ ib_binds = binds",64],["2 (vcat (map ppr binds))",64],["= do (new_env, new_binds) <- zonkLocalBinds env binds",62],["; return (env1, binds') })",62],["wrapGenSyms binds body@(MkC b)",43]],"useCount":25129},{"word":"bit","context":[["-- the generated parser quite a bit.",132],["-- for 32-bit architectuers, support some 64 -> 32 bit conversions:",49],["-- for 32-bit architectuers, support some 64 -> 32 bit conversions:",49],["-- If its a bit type then we use the slow method since",50],["| i >= 4 =  -- Will never happen on 32-bit",54],["-- stuff like \" 'a' not in scope \", which is a bit silly",60],["bit                       = bitDefault",66],["A Rule of the Game (tm) for Amodes: use of the addr bit must",76],["{-# INLINE bit #-}",159],["the addr bit, first store the effective address from the amode in a",76]],"useCount":10059},{"word":"block","context":[["parseBlocks = mconcat <$> manyTill block eof",63],["[C.block| void {",62],["] <?> \"block\"",55],["bh <- openBinMem (3*1024) -- just less than a block",65],["display block",71],["-> [Block]       -- ^ List of block elements",82],["block();",86],["__attribute__((tc_block)) void block();",97],["block = do",110],["-- WARNING: The next block of code was automatically generated by",2252]],"useCount":13671},{"word":"blocks","context":[["-- list blocks",63],["vcat (map (pprBasicBlock top_info) blocks) $$",63],["= (instrs, blocks, CmmData sec dat:statics)",64],["mkBlocks (LDATA sec dat) (instrs,blocks,statics)",64],["= (instr:instrs, blocks, statics)",64],["mkBlocks (NEWBLOCK id) (instrs,blocks,statics)",64],["-- parsing blocks",64],["mkBlocks instr (instrs,blocks,statics)",64],["= ([], BasicBlock id instrs : blocks, statics)",64],["case blocks of",78]],"useCount":7960},{"word":"bndr","context":[["catMaybes [ fmap snd $ lookupVarEnv (vectInfoVar (mg_vect_info guts)) bndr",36],["= nonVoidIds [bndr]   -- Only 'bndr' is assigned",36],["= nonVoidIds [bndr]   -- Only 'bndr' is assigned",36],["instance (OutputableBndr bndr, Outputable bdee, Ord bdee)",36],["name = idName bndr",40],["(subst', bndr') = substBndr subst bndr",65],["(subst', bndr') = substBndr subst bndr",65],["| isId bndr",67],["=> LPat bndr -> GRHSs id body -> SDoc",34],["| [bndr] <- inferred_bndrs",34]],"useCount":11201},{"word":"bndrs","context":[["repPragRule (MkC nm) (MkC bndrs) (MkC lhs) (MkC rhs) (MkC phases)",42],["(bndrs, body) = collectBinders expr",44],["ss <- mkGenSyms bndrs ;",43],["= do { let bndrs = collectPatsBinders ps ;",43],["; dec  <- addTyVarBinds tvs $ \\bndrs ->",43],["; ss        <- mkGenSyms bndrs",43],["bndr_set = mkVarSet bndrs",55],["; lintAltBinders scrut_ty con_ty' bndrs }",58],["; dec <- addTyClTyVarBinds tvs $ \\bndrs ->",98],["; ss  <- mkGenSyms bndrs",43]],"useCount":10465},{"word":"body","context":[["-> (ZonkEnv -> Located (body TcId) -> TcM (Located (body Id)))",155],["-> (ZonkEnv -> Located (body TcId) -> TcM (Located (body Id)))",155],["body",371],["body <- expr",159],["H.body $ do",208],["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224],["-> (Located (body RdrName) -> RnM (Located (body Name), FreeVars))",224],["-- default-layout is the contents of the body tag, and",244],["case body of",147],["-- Place Javascript at bottom of the body tag so the rest of the page loads first",142]],"useCount":31763},{"word":"both","context":[["| LinkInMemory        -- ^ Use the in-memory dynamic linker (works for both",60],["-- encountered, the combining function is applied to the key and both values.",70],["trustPackage p = exposePackage p >> -- both trust and distrust also expose a package",60],["-- assigned both the tag key Purpose (regardless of what the tag's value is),",59],["-- * if a key is present in both maps, it is passed with both corresponding",57],["Record for prover specific functions. This is used by both GUI and command",54],["-- independent of the 'tag-value' filter. For example, if you use both the filter",56],["-- example is '[]', which is both a type and data",56],["-- * if a key is present in both maps, it is passed with both corresponding",57],["-- because we build both the static and dynamic versions together with",54]],"useCount":11340},{"word":"bound","context":[["if bound",79],["XmlPickler [NodeG [] tag text] bound,",76],["Hashable bound, Eq bound) =>",70],["Hashable bound, Eq bound) =>",70],["XmlPickler [(tag, text)] bound,",58],["-- lambda bound vars",57],["-- names in 'os', not counting the names bound in the cases",56],["-- the element is deleted. If it is (@'Just' y@), the key @k@ is bound",44],["-- deleted. If it is (@'Just' y@), the key @k@ is bound to the new value @y@.",100],["-- Not bound by the meta-env",43]],"useCount":12954},{"word":"brendan","context":[["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622],["-- Maintainer  : Brendan Hay <brendan@soundcloud.com>",37]],"useCount":13659},{"word":"bs","context":[["case bs of",137],["return bs",190],["bs",130],["if S.null bs",124],["putByteString bs",108],["unless (S.null bs) $ do",101],["Just bs -> do",92],["yield bs",88],["(stream bs)",88],["bs <- get",74]],"useCount":20614},{"word":"build","context":[["-- build any C sources",112],["{-# INLINE build #-}",67],[", \"build-type: Simple\"",74],["cfiles <- buildOtherSources build",76],["build :: [LogMessage] -> MessageTree",76],["-- available in this action, since that would require build tools to be",78],["-- OS even if Docker is enabled for builds.  The build config is not",78],["test build obj = do",101],["dirs <- mapMaybeM resolveDirOrWarn (hsSourceDirs build)",110],["{-# LINE 1 \"dist/dist-sandbox-235ea54e/build/autogen/cabal_macros.h\" #-}",271]],"useCount":18412},{"word":"but","context":[["-- Very like -ohi, but we must *only* do this if we aren't linking",83],["-- | Compile a stmt all the way to an HValue, but don't run it",82],["-- but we don't generate any code for newtypes",83],["-- Generated by DrIFT, look but don't touch!",76],["-- | 'scanl' is similar to 'foldl', but returns a list of successive",73],["-- with ghci, but .c files can depend on .h files generated by ghc by ffi",86],["-- This isn't a solution - but it's a temporary stopgap.",100],["-- this already raised an expection, but we need it",105],["-- be empty but this is not checked.",122],["-- Parentheses do display something, but it gives little info and",68]],"useCount":54726},{"word":"by","context":[["-- of settings which can be configured by overriding methods here.",286],["configured by the 'Wait' specification is fulfilled. The 'Wait' specification",206],["Waiters poll by repeatedly sending a request until some remote success condition",206],["Error matchers are designed for use with the functions provided by",199],["-- migrations handled by Yesod.",310],["-- If you do not find this file, copies can be found by writing to:",536],["-- WARNING: The next block of code was automatically generated by",2252],["-- by overriding methods in the Yesod typeclass. That instance is",197],["-- The rest of this file contains settings which rarely need changing by a",190],["Written by John Goerzen, jgoerzen\\@complete.org",131]],"useCount":74737},{"word":"c","context":[["(att3, c') <- toShATerm' att2 c",351],["(att3, c') <- toShATerm' att2 c",351],["{ (att3, c') ->",406],["-- (c) The University of Glasgow 2004-2006",336],["case fromShATerm' c att2 of",348],["return c",777],["(c) The University of Glasgow 2006",1743],["(c) The GRASP/AQUA Project, Glasgow University, 1992-1998",1595],["case c of",1591],["slotHandlerWrapper_int :: Ptr fun -> Ptr () -> Ptr (TQObject c) -> CInt -> IO ()",894]],"useCount":154596},{"word":"cabal","context":[["-- check syntax of cabal-version field",75],["-- Maintainer  :  cabal-devel@haskell.org",1141],["-- Don't forget to add new modules to your cabal file!",242],["-- To keep `cabal repl` happy when running from the ihaskell repo",89],["-- Maintainer  :  cabal-devel@gmail.com",76],["-- Argument is the location of the .cabal file",55],[", \"cabal-version: >= 1.10\"",66],["</> display (packageName pkgid) <.> \"cabal\"",64],["++ \"at least 'cabal-version: >= 1.21'.\"",56],["cabal \"configure\" []",70]],"useCount":12505},{"word":"cache","context":[["-- files, more easily set expires and cache values, and avoid possibly",130],["True{-use cache-} False{-expand vars-} my_flags",92],["True{-use cache-} expand_pkgroot my_flags",69],["flagSpec \"flat-cache\"                       Opt_FlatCache,",46],["getPkgDatabases verbosity False True{-use cache-} expand_pkgroot my_flags",39],["(configCacheDeps cache)",40],["(configCacheOpts cache)",40],["-- | Try to read the dirtiness cache for the given package directory.",40],[", \"_cache\" .= cache]]",44],["-- Tell the finder cache about this module",44]],"useCount":7074},{"word":"call","context":[["-- (e.g. the result of a call).",64],["| ProfAutoCalls      -- ^ annotate call-sites",60],["-- of the call to mkYesodData which occurs in Foundation.hs. Please see the",205],[", call",65],["-- deal with static vs dynamic call targets",69],["-- It initialises the GHC session and warnings via 'initGhcMonad'.  Each call",70],["-- of the call to mkYesodData which occurs in Foundation.hs. Please see",78],["-> ForeignTarget            -- function to call",86],["-- You can perform request by using 'call':",91],["--   resources declared below. This is used in Handler.hs by the call to",114]],"useCount":20241},{"word":"can","context":[["-- | The site argument for your application. This can be a good place to",192],["-- You can add other plugins like BrowserID, email or OAuth here",173],["-- the top-level so that real test data can be incrementally added.",196],["-- In addition, you can configure a number of different aspects of Yesod",197],["Operations that have an 'AWSPager' instance can transparently perform subsequent",206],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["-- you can redistribute it and/or modify it under the terms of",224],["-- This instance is required to use forms. You can modify renderMessage to",243],["-- of settings which can be configured by overriding methods here.",286],["-- If you do not find this file, copies can be found by writing to:",536]],"useCount":69245},{"word":"cannot","context":[["text \"cannot list source code for \" <> ppr n <> text \": \" <> why",51],["text \"cannot set breakpoint on \" <> ppr n <> text \": \" <> why",51],["-- value passed to hamletToRepHtml cannot be a widget, this allows",243],["= \"cannot use `\" ++ oldFlag ++  \"' with `\" ++ newFlag ++ \"'\"",48],["-- | These -X<blah> flags cannot be reversed with -XNo<blah>",120],["then fail $ \"cannot unpack array of length \" ++",120],["liftIO $ putStrLn \"macro name cannot start with a colon\"",49],["else fail $ \"cannot unpack array of length \" ++",100],["-- to the object header, so profiling objects cannot be linked with",60],["++ \"specified first and cannot be specified multiple times\"",76]],"useCount":8032},{"word":"case","context":[["parser = takeLowerText >>= \\case",1986],["case res of",4559],["case r of",4900],["case result of",3786],["= case ft' of",3477],["case x of",3361],["toText = \\case",2142],["case args of",2332],["case t of",2369],["case e of",2657]],"useCount":311563},{"word":"cases","context":[["-- happyReduce is specialised for the common cases.",134],["\". Are all cases covered?\"",88],["-- * Test cases",99],["-- catch simple cases of zero- or sign-extended load",76],["-- on during recompilation checking, so in those cases we",60],["-- names in 'os', not counting the names bound in the cases",56],["...other cases .... }",54],["The cases are:",50],["-- The two interesting cases!",50],["-- In (unlikely) bad cases, this function's time complexity degrades",130]],"useCount":7642},{"word":"castPtrToFunPtr","context":[["(freeHaskellFunPtr (castPtrToFunPtr funptr_d))",7260],["(freeHaskellFunPtr (castPtrToFunPtr funptr))",8192]],"useCount":15452},{"word":"castPtrToStablePtr","context":[["(freeStablePtr (castPtrToStablePtr stptr))",8192],["deRefStablePtr (castPtrToStablePtr (castPtr ref2))",20]],"useCount":8212},{"word":"catMaybes","context":[["import           Data.Maybe (catMaybes)",122],["import Data.Maybe ( catMaybes )",123],["catMaybes",111],["toAttrs v = catMaybes",96],[". catMaybes",83],["(Data.Maybe.catMaybes",121],["(catMaybes",5728],["import Data.Maybe (catMaybes)",957],["catMaybes [",365],["| P.otherwise = M.catMaybes",258]],"useCount":11469},{"word":"catch","context":[["catch",214],["10 -> P'.getBareMessageWith (P'.catch'Unknown update'Self)",94],["11 -> P'.getMessageWith (P'.catch'Unknown update'Self)",94],["import Control.Exception (catch)",137],["import Prelude hiding ( catch )",114],["`catch`",108],["(X.catch",105],[", catch",79],["catchIO = Exception.catch",316],["import Prelude hiding (catch)",882]],"useCount":7070},{"word":"change","context":[["-- If you change layout bindings be sure to use 'mod-shift-space' after",61],["-- If you change the resource pattern for StaticR in Foundation.hs, you will",102],["-- Don't change this without updating extensionFlags:",121],["-- have to make a corresponding change here.",130],["-- rather than letting FilePath change it to use \\ as the separator",56],["-- ensure that a later change doesn't invalidate an earlier check.",56],["-- Whenever you change the target, also make sure to set 'ghcLink' to",60],["-- Most flags are dynamic flags, which means they can change from compilation",60],["b <- GHC.abandon -- the prompt will change to indicate the new context",51],["-- program must be compiled in the same \"way\".  Certain options change",60]],"useCount":6979},{"word":"char","context":[["char ' '",284],["char '\\t',",1081],["char ')'",754],["char '\"'",681],["char ']'",350],["char '['",370],["char ':'",619],["char '}'",379],["char '.'",420],["char '('",451]],"useCount":32303},{"word":"check","context":[["check e",201],["-- check for non-ASCII fields, usually due to 'arbitrary :: String'",74],["-- check syntax of cabal-version field",75],["check",87],[", check",108],["check (roles1 == roles2) roles_msg `andThenCheck`",120],["check :: Status",132],["check (statusCode -> s) (awsErrorCode -> e)",132],[", _retryCheck    = check",132],[", _retryCheck = check",198]],"useCount":31369},{"word":"checking","context":[["-- See Note [Type checking recursive type and class declarations]",61],["-- | /O(1)/ Unsafe indexing without bounds checking",61],["-- | /O(1)/ First element without checking if the vector is empty",61],["-- See Note [Kind checking for type and class decls]",132],["-- Annotation type checking",75],["-- match when checking the right context, just",73],["-- See Note [Type-checking inside the knot] in TcHsType",69],["-- | Same as 'accum' but without bounds checking.",64],["-- | Same as ('//') but without bounds checking.",64],["-- after type-checking, a type abstraction to be",67]],"useCount":11513},{"word":"class","context":[["class C a b | a -> b",142],["class Pretty a where",169],["class C a where",661],["<p class=\"title\">",538],["<p><a href=\"#top\" class=\"page_top\">На початок</a></p>",538],["class",280],["class C a b where",187],["class Foo a where",221],["class (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16,",230],["<p class=\"thumbnail\">",538]],"useCount":30760},{"word":"cls","context":[["-> Graph k cls color -> Graph k cls color",61],["| Just cls <- tyConClass_maybe tc",127],[", ds_cls = cls, ds_tys = inst_tys",115],["mkDataTypeEqn dflags overlap_mode tvs cls cls_tys",64],["= case cls of",62],["ClassPred cls tys",48],["bale_out msg = failWithTc (derivingThingErr False cls cls_tys (mkTyConApp tycon tc_args) msg)",54],["-> Graph k cls color",56],["-- non-associated ty/cls",56],["-> Graph k cls color -> Graph k cls color",61]],"useCount":12525},{"word":"cmd","context":[["let filtered = [ cmd | cmd <- macros, cmdName cmd /= macro_name ]",51],["let cmd = editor st",51],["-- We don't want the cmd line to buffer any input that might be",51],["let (cmd,rest) = break isSpace str",52],["\"   :undef <cmd>                undefine user-defined command :<cmd>\\n\" ++",54],["\"   :undef <cmd>                undefine user-defined command :<cmd>\\n\" ++",54],["cmd :: Command",115],["-- run the command set with \":set stop <cmd>\"",153],["case cmd of",362],["case parseCmd i \"(input)\" cmd of",56]],"useCount":8959},{"word":"co","context":[["Just co -> co",49],["= go co",100],["-> mkKindCo co",72],["= freeNamesIfCoercion co",72],["= Just (tvs, rhs, co)",60],["Just co' -> co'",56],["Just co' -> co'",56],["rewriteEvidence old_ev new_pred co",52],["co",52],["in Just (co, ty)",51]],"useCount":25198},{"word":"cobj_eobj","context":[["withObjectPtr _eobj $ \\cobj_eobj ->",7260]],"useCount":7260},{"word":"cobj_x0","context":[["= withObjectPtr x0 $ \\cobj_x0 ->",37067],["withObjectPtr x0 $ \\cobj_x0 ->",25096]],"useCount":62163},{"word":"cobj_x1","context":[["withObjectPtr x1 $ \\cobj_x1 ->",31118],["= withObjectPtr x1 $ \\cobj_x1 ->",90]],"useCount":31208},{"word":"code","context":[["return (Any II32 code)",264],["-- | The response status code.",2186],["-- WARNING: The next block of code was automatically generated by",2252],["case code of",276],["return code",291],["-- | -- | The response status code.",1955],["ChildCode64 code rlo <- iselExpr64 x",224],["-- The code in this file, and the program it is a part of, is",224],["return (Any II64 code)",199],["return (Any size code)",180]],"useCount":53506},{"word":"coercion","context":[["-- coi is a Representational coercion",33],["-- See Note [Deferring coercion errors to runtime]",100],["-- See Note [Optimising coercion optimisation]",50],["It does this by keeping track of which errors correspond to which coercion",45],["Note [Deferring coercion errors to runtime]",45],["But that superclass selector can't (yet) appear in a coercion",39],["-- The coercion arguments always *precisely* saturate",36],["coercion.",35],["= TyVarTy Var -- ^ Vanilla type or kind variable (*never* a coercion variable)",33],["Usually that coercion is hidden inside the wrappers for",33]],"useCount":7188},{"word":"com","context":[["<data engine=\"com.sun.java.help.search.DefaultSearchEngine\">",652],["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622],["-- Maintainer  :  Edward Kmett <ekmett@gmail.com>",1050],["'[\"https://www.googleapis.com/auth/cloud-platform\",",578],["-- Maintainer  :  erkokl@gmail.com",435],["-- Maintainer  :  cryptol@galois.com",378],["-- Maintainer  :  yi-devel@googlegroups.com",378],["-- Maintainer  : bos@serpentine.com",366],["-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>",307],["-- Maintainer  :  Sven Panne <svenpanne@gmail.com>",2262]],"useCount":40578},{"word":"combine","context":[["where combine field = field a `mappend` field b",691],["reportPassword  = combine reportPassword,",52],["reportVerbosity = combine reportVerbosity",52],["-- The following two functions can be used to combine multiple CSS or JS files",75],["reportUsername  = combine reportUsername,",52],["combine bnames h1 h2",61],["--   values to the @combine@ function. Depending on the result, the key is either",57],["-- When calling @'mergeWithKey' combine only1 only2@, a function combining two",57],["globalConfigFile        = combine globalConfigFile,",47],[", combine",50]],"useCount":10948},{"word":"command","context":[["{- git-annex command",105],["case command of",116],["-- version constraints from the config file or command line",64],["-- pass these a sequence of options on the command-line. Rather than",61],["-- run the command set with \":set stop <cmd>\"",153],["{-# LINE 1 \"<command-line>\" #-}",175],["-- preferences from the config file or command line",64],["command",82],["-- DrIFT command",85],[", command",90]],"useCount":13869},{"word":"comp","context":[["preprocessComponent pkg_descr comp lbi False verbosity suffixes",145],["comp = do",564],["extras <- preprocessExtras comp lbi",140],["(compilerId comp) platform",114],["(comp, platform, conf) <- configCompilerAux' configFlags",102],["comp = compiler lbi",96],["case comp of",93],["installedPkgIndex <- getInstalledPackages verbosity comp packageDBs conf",156],["comp",171],["case compilerFlavor comp of",174]],"useCount":8179},{"word":"compare","context":[["case compare x y of",246],["case compare kx ky of",131],["case compare k kx of",100],["compare _ _ = EQ",98],["a >  b = case (a `compare` b) of { LT -> False; EQ -> False; GT -> True  }",83],["{-# INLINE compare #-}",144],["a <= b = case (a `compare` b) of { LT -> True;  EQ -> True;  GT -> False }",83],["a == b = compare a b == EQ",83],["a <  b = case (a `compare` b) of { LT -> True;  EQ -> False; GT -> False }",83],["a >= b = case (a `compare` b) of { LT -> False; EQ -> True;  GT -> True  }",83]],"useCount":11090},{"word":"compile","context":[["compile $ do",749],["compile copyFileCompiler",539],["compile $ pandocCompiler",270],["match \"templates/*\" $ compile templateCompiler",199],["compile compressCssCompiler",195],["-- fall back to compile-time values, set to [] to require values at runtime",105],["compile",82],[", compile",78],["-- at compile time to decrease the number of http requests.",75],["-- | Raw bytes at compile time of @config/settings.yml@",65]],"useCount":7176},{"word":"compiler","context":[["case compilerFlavor (compiler lbi) of",181],["-- The Timber compiler <timber-lang.org>",65],["-- if the compiler has just filled in field 'a' of constructor 'C'",60],["sPgm_lc                :: (String,[Option]), -- LLVM: llc static compiler",60],["-- timestamp record for this compiler to the timestamp file.",65],["cid = compilerId (compiler lbi)",102],["-- compiler is severely affected",71],["comp = compiler lbi",96],["| (compiler, vr) <- testedWith pkg",78],["[ Dependency (PackageName (display compiler)) vr",72]],"useCount":10474},{"word":"con","context":[["= con",47],["= do  { con' <- lookupConCps con",48],[", Just con <- tyConSingleAlgDataCon_maybe tc",46],["rep2 infixCName [unC arg1, unC con, unC arg2]",43],["= do  { con' <- lookupConCps con",48],["-> Just con",52],["case con of",105],["; return con }",54],["; con' <- cvtConstr constr",56],["| con <- cons",62]],"useCount":17409},{"word":"concat","context":[[", concat",209],["| otherwise   = BS.concat [prefix, line]",102],["{-# INLINE concat #-}",107],["$logWarn $ T.concat",226],["concat",584],["mconcat = concat",114],["TTLocal lp -> concat",121],["T.concat",124],["(concat",172],["$logInfo $ T.concat",205]],"useCount":16418},{"word":"concatMap","context":[[", concatMap",115],["opt_l dflags = concatMap (wayOptl (targetPlatform dflags)) (ways dflags)",56],["body = concatMap doWhat ws",57],["map, imap, concatMap,",57],["map, concatMap,",57],["ni env (PAppBind _ f as)   = ni env f ++ concatMap (ni env) (map getTm as)",58],["let pkg_lib_path_opts = concatMap get_pkg_lib_path_opts pkg_lib_paths",72],["++ concatMap (bcc (i+1)) bc ++ indent i ++ \"} else\\n\"",86],["concatMap",89],["{-# INLINE concatMap #-}",167]],"useCount":9879},{"word":"conf","context":[["makeFoundation conf = do",130],["conf",186],["installedPkgIndex <- getInstalledPackages verbosity comp packageDBs conf",156],["foundation <- makeFoundation conf",147],["conf <- ask",81],["return conf",81],["staticRoot conf = [st|#{appRoot conf}/static|]",99],["staticRoot conf = [st|#{appRoot conf}/static|]",99],["(comp, platform, conf) <- configCompilerAux' configFlags",102],["makeApplication conf = do",129]],"useCount":8102},{"word":"config","context":[["\"config/client_session_key.aes\"",165],["config <- asks getConfig",935],["-- config/routes",115],["let configFlags  = savedConfigureFlags config",120],["(_useSandbox, config) <- loadConfigOrSandboxConfig verbosity",121],["mkYesodData \"App\" $(parseRoutesFile \"config/routes\")",259],["config",174],["config <- ExprGuiM.widgetEnv WE.readConfig",140],["config <- ExprGuiM.readConfig",163],["$(persistFileWith lowerCaseSettings \"config/models\")",142]],"useCount":17568},{"word":"cons","context":[["| con <- cons",62],["{-# INLINE cons #-}",247],["(\"cons\", cons),",74],["(\"cons\", cons),",74],["splitUp xs = cons p (splitUp rs)",60],[", cons",137],["cons",70],["cons :: [LispVal] -> ThrowsError LispVal",88],["cons \"\" xs = xs",60],["cons badArgList = throwError $ NumArgs 2 badArgList",68]],"useCount":8171},{"word":"const","context":[["= const",2488],["toJSON = const (toJSON Empty)",169],["(const $ return ())",148],["setState = const $ return ()",124],["getRange = const nullRange",110],["(const True)",205],["(const Nothing)",209],["toPath = const \"/\"",7207],["toQuery = const mempty",4311],["toHeaders = const mempty",2693]],"useCount":29162},{"word":"constraint","context":[["constraint",53],["-- Example: constraint (Foo [Int])",44],["is always safe to defer the mismatch to the main constraint solver. If we do",45],["The constraint solver would realize that `co` is an insoluble constraint, and",45],["The constraint solver would realize that `co` is an insoluble constraint, and",45],["-- When we float a constraint out of an implication we must restore",47],["-- compose the transformation functions for each of the relevant constraint",59],["-- | Helper function that tries to enforce a single package constraint on a",59],["-- constraint.",60],["Constraints.constrain pkgname constraint reason",114]],"useCount":11581},{"word":"constraints","context":[["-- wanted constraints from static forms",75],["-- version constraints from the config file or command line",64],["{-# OPTIONS_GHC -fno-warn-redundant-constraints #-}",228],["-- See Note [Solving superclass constraints] in TcInstDcls",98],["-- See Note [Insoluble constraints]",76],["-> [FreeDefMorphism SPTerm SoftFOLMorphism] -- ^ freeness constraints",59],["-- or the parameter values fall outside the specified constraints, the",71],["-- See Note [Dropping derived constraints]",70],["--TODO: this should work using exclude constraints instead",69],["-- See Note [Tracking redundant constraints] in TcSimplify",64]],"useCount":16629},{"word":"constructor","context":[["-- ** Response constructor",3285],["--Any type/data constructor name declared in this module can be renamed.",108],["-- type constructor.",100],["tyConName    :: Name,    -- ^ Name of the constructor",90],["-- /See:/ 'tag' smart constructor.",65],["-- constructor.",64],["-- if the compiler has just filled in field 'a' of constructor 'C'",60],["lift $ tfail (Msg $ \"Can't use type constructor \" ++ show n ++ \" here\")",60],["-- See Note [Bangs on data constructor arguments]",56],["-- ** Request constructor",3285]],"useCount":32903},{"word":"constructors","context":[["DynFlags constructors",60],["-- type constructors.",61],["-- constructors.",119],["-- See Note: Order of constructors",60],["-- [Note: Order of constructors]",60],["-- constructors are eta-expanded.  This is probably",60],["-- constructors",57],["-- Note [Dropping constructors]",56],["-- See Note [Bangs on imported data constructors] in MkId",54],["-- Low level constructors",52]],"useCount":14471},{"word":"contains","context":[["-- The rest of this file contains settings which rarely need changing by a",190],["-- available flags. The second contains a detailed description of the",47],["-- LinkerInfo contains any extra options needed by the system linker.",56],["-- contains all dfuns for this module",62],["-- | /O(n)/ Check if the vector contains an element",64],["{-# INLINE contains #-}",66],["-- | When 'IsTruncated' is 'true', this element is present and contains the",73],["-- * Creates the value resourcesApp which contains information on the",88],["-- map contains all elements that satisfy the predicate, the second all",94],["-- is trying to fix up a context that contains errors by removing",48]],"useCount":6894},{"word":"contents","context":[["-- default-layout is the contents of the body tag, and",244],["else contents",93],["contents <- getContents",98],["-- | Move the contents of a vector. The two vectors must have the same",102],["contents <- readFile file",102],["contents <- inlineListToMarkdown opts lst",107],["contents <- inlineListToRST lst",125],["contents <- hGetContents handle",146],["contents <- inlineListToConTeXt lst",157],["showVal (Number contents) = show contents",90]],"useCount":14588},{"word":"context","context":[["context <- currentContext",119],["-- | Parse an expression using appropriate local context.",119],["then case context of",118],["send context $ do",77],["-- match when checking the right context, just",73],["Descend context accum result node",70],["| (implic:_) <- cec_encl ctxt   -- Get the innermost context",68],["then return $ renderTemplate' (writerTemplate opts) context",67],["-- Don't wrap a context around a plain Id",56],["b <- GHC.abandon -- the prompt will change to indicate the new context",51]],"useCount":15793},{"word":"convert","context":[["{-# INLINE convert #-}",243],["revfunc _ = error $! \"Can't convert\"",161],["-- Do saturation and convert to A-normal form",126],["do { v1a <- convert v1",80],["; v2a <- convert v2",80],["convert = checkedFromIntegral",73],["=$= convert fromJust",72],["-- | /O(1)/ Unsafely convert an immutable vector to a mutable one without",60],["-- | /O(1)/ Unsafe convert a mutable vector to an immutable one without",60],["do { tva <- convert tv",56]],"useCount":7067},{"word":"corresponding","context":[["-- | The returned result of the corresponding request.",61],["-- | Retrieve the options corresponding to a particular @opt_*@ field in the correct order",60],["-- corresponding value @a@ from the value vector, replace the element of the",60],["-- | The 'HscTarget' value corresponding to the default way to create",60],["-- | Throw an 'IOError' corresponding to the current value of 'getErrno'",60],["-- | The id of the 'DecisionTaskCompleted' event corresponding to the decision task",66],["-- the corresponding (key, value) pair.",68],["-- corresponding (key, value) pair.",68],["-- have to make a corresponding change here.",130],["-- The fields accessible through corresponding lenses are:",8639]],"useCount":12654},{"word":"could","context":[["-- example, you could filter on instances that have set the",63],["-- It would be better if we could convert directly between UTF-8 and the",50],["-- if it could have been inferred safe.",50],["-- XXX: if we could figure out the list of errors that occured during the",51],["-- last load/reaload, then we could start the editor focused on the first",51],["(x_op, x_code) <- getOperand x  -- ToDo: could be a safe operand",54],["-- @'filterWithKey' f@ could be used for any @f@.",54],["-- We could get away without adding -fPIC when compiling the",55],["-- We could drop the separator here, and then use </> above. However,",56],["-- combining functions. For example, you could define 'unionWithKey',",57]],"useCount":9224},{"word":"count","context":[["count n (x:xs) | n == x = S (count n xs)",57],["count n (x:xs) | n == x = S (count n xs)",57],["return count",57],["| otherwise = count n xs",59],["count n [] = Z",59],["floatLamArgs          :: Maybe Int,   -- ^ Arg count for lambda floating",60],["-- | count returns the number of times its argument appears in the ByteString",63],["count :: Nat -> [Nat] -> Nat",64],["-> GLsizei -- ^ @count@.",269],[", count",162]],"useCount":8140},{"word":"create","context":[["create [\"archive.html\"] $ do",92],["-- inclined, or create a single monolithic file.",135],["| otherwise = case create (s `shiftR` 1) xs of",89],["-- What this function does *not* do is create a YesodSite instance for",139],["{-# INLINE create #-}",149],[", create",165],["create x0 (x1, x2, x3)",260],["create x0 (x1, x2)",260],["create x0 ()",264],["create x0 (x1)",264]],"useCount":8673},{"word":"cs","context":[["return (c:cs)",138],["case cs of",221],["Maintainer  :  helium@cs.uu.nl",70],["import Data.String.Conversions (cs)",103],["Andrew Bardsley <bardsley@cs.man.ac.uk> (and others, see AUTHORS)",100],[": toUTF8 cs",100],["cs",99],["return cs",95],["; return (c:cs)",71],["(stream cs)",66]],"useCount":21111},{"word":"ct","context":[["= do { (ctxt, binds_msg, ct) <- relevantBindings True ctxt ct",78],["r' <- ct $ mapM makeRelativeToCurrentDirectory r",149],["ev      = ctEvidence ct",52],["orig = ctOrigin ct",52],["ct <- liftIO getClockTime",54],["= do { (ctxt, binds_msg, ct) <- relevantBindings True ctxt ct",78],["emitInsoluble ct",58],["case ct of",96],["t <- ct $ parsedFileGhc \"./DupDef/Dd1.hs\"",107],["= case ctEvidence ct of",43]],"useCount":11822},{"word":"ctxt","context":[["= do ctxt <- getContext",182],[", dd_ctxt = ctxt'",112],["let tv' = normalise ctxt env tv",117],["do ctxt <- getContext",132],["uctxt { definitions = ctxt' }",175],["= let ctxt = definitions uctxt",177],["setContext ctxt'",220],["ctxt <- getContext",986],["ctxt <- get_context",762],["= case ctxt of",294]],"useCount":36163},{"word":"current","context":[["-- Furthermore, We only read ./.ghci if . is owned by the current user",51],["-- If the current token is (1), it means we've just accepted a partial",64],["blk <- current",65],["HappyState b c ->              -- current state",86],["-- | Gets the verbosity flag for the current verbosity level. This is fed to",60],["-- | Throw an 'IOError' corresponding to the current value of 'getErrno'",60],["-- object files on the current platform.",60],["-> DynFlags                      -- ^ current dynamic flags",58],["\"   :show bindings              show the current bindings made at the prompt\\n\" ++",51],["-- This 'StateVar' can be modified using '$=' and the current value retrieved with 'get'.",115]],"useCount":13894},{"word":"d","context":[["return d",265],["appendTree3 m1 (node3 a b c) (node2 d e) (node2 f g) m2",266],["-> Vector a -> Vector b -> Vector c -> Vector d -> Vector e",264],["appendTree2 m1 (node3 a b c) (node2 d e) m2",190],["appendTree3 m1 (node3 a b c) (node3 d e f) (node2 g h) m2",247],["appendTree2 m1 (node3 a b c) (node3 d e f) m2",247],["appendTree3 m1 (node3 a b c) (node3 d e f) (node3 g h i) m2",190],["case d of",763],["VM.unsafeWrite mv 3 (toJSON d)",193],["d",198]],"useCount":94353},{"word":"data","context":[["data App = App",480],["<data>toc.xml</data>",674],["<data>toc.xml</data>",674],["</data>",672],["data Options = Options",671],["<data engine=\"com.sun.java.help.search.DefaultSearchEngine\">",652],["<data>index.xml</data>",612],["<data>index.xml</data>",612],["data Config = Config",487],["data T a where",465]],"useCount":117749},{"word":"db","context":[["db :: ReaderT SqlBackend (HandlerT App IO) a -> IO a",80],["db = handler . runDB",82],[", db",97],["doDump expand_pkgroot [ (pkg, locationAbsolute db)",72],["| db <- flag_db_stack ]",72],[": \"-global-package-db\"",64],["db <- get",59],["-- ^ The @-package-db@ flags given on the command line, in the order",58],["-- (-package, -hide-package, -ignore-package, -hide-all-packages, -package-db).",58],["die $ \"If the global package db is specified, it must be \"",56]],"useCount":7363},{"word":"dc","context":[[", nest 2 $ ppr dc <+> dcolon",38],["pprCtOrigin (DerivOriginDC dc n)",38],["(unode \"dc:title\")",64],["ty = dataConOrigArgTys dc !! (n-1)",38],["tc        = dataConTyCon dc",41],["repP (ConPatIn dc details)",43],["= do { con_str <- lookupLOcc dc",43],["( PrefixMappings (Map.fromList [ (\"dc\", \"http://purl.org/dc/elements/1.1/\")",44],["( PrefixMappings (Map.fromList [ (\"dc\", \"http://purl.org/dc/elements/1.1/\")",44],["Just dc -> do",59]],"useCount":7489},{"word":"decl","context":[["return decl",65],["repForD decl = notHandled \"Foreign declaration\" (ppr decl)",43],["That is, the new data decl should fit into whatever new module it is",43],["= do { let tc_name = tyFamInstDeclLName decl",41],["let rn_info = do decl <- tcg_rn_decls tc_result",41],["return (decl,imports,exports,doc_hdr)",41],["-- The 'a' in the type instance is the one bound by the instance decl",42],["--   Signatures in a class decl, or a group of bindings",43],["repForD decl = notHandled \"Foreign declaration\" (ppr decl)",43],["case decl of",230]],"useCount":13163},{"word":"declaration","context":[["-- desugared.  Moreover, in instance declaration the binder of a method",43],["--if it is only used by this friend declaration.",38],["| DataSkol            -- Bound at a data type declaration",38],["<?> \"type declaration list\"",40],["-- | Data declaration",42],["repForD decl = notHandled \"Foreign declaration\" (ppr decl)",43],["<?> \"using declaration\"",44],["Bool                      -- 'TRUE' => SCALAR declaration",49],["<?> \"declaration\"",73],["-- declaration.",103]],"useCount":11291},{"word":"declarations","context":[["\\subsection{Vectorisation declarations}",72],["-- A collection of FFI declarations for interfacing with Win32.",77],["\"-Wmissing-declarations\",",87],["Note [Grouping of type and class declarations]",43],["-- * Type declarations",45],["-- the SrcLoc returned are for the whole declarations, not just the names",48],["-- See Note [Type family instance declarations in HsSyn]",50],["-- See Note [Typechecking plan for instance declarations]",58],["-- See Note [Type checking recursive type and class declarations]",61],["Type and class declarations",70]],"useCount":10183},{"word":"decls","context":[["[InstInfo Name],     -- Source-code instance decls to process;",62],["(mk_thing_env decls)",66],["(decls, ns) <- get -- ignore decls in HO types",78],["(decls, ns) <- get -- ignore decls in HO types",78],["-- | Compile a decls",83],["nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",104],["put (decls, nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",111],["put (decls, nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",111],["-- See Note [Kind checking for type and class decls]",132],["= do (decls, ns) <- get",163]],"useCount":9941},{"word":"def","context":[["manager <- newManager def",103],["= def",112],["def =",114],["addDeferred def''",124],[", def",135],["widgetFileSettings = def",140],["$ def",160],["logWare <- mkRequestLogger def",171],["import Data.Default (def)",380],["def",497]],"useCount":10311},{"word":"defGhcFlag","context":[[", defGhcFlag \"rtsopts=all\"    (NoArg (setRtsOptsEnabled RtsOptsAll))",24],[", defGhcFlag \"ddump-prep\"              (setDumpFlag Opt_D_dump_prep)",24],[", defGhcFlag \"dylib-install-name\" (hasArg setDylibInstallName)",24],[", defGhcFlag \"static\"         (NoArg removeWayDyn)",24],[", defGhcFlag \"fvia-C\"           (NoArg",24],[", defGhcFlag \"dverbose-core2core\"      (NoArg (do setVerbosity (Just 2)",24],[", defGhcFlag \"ddump-if-trace\"          (setDumpFlag Opt_D_dump_if_trace)",24],[", defGhcFlag \"mavx512er\"    (noArg (\\d -> d{ avx512er = True }))",24],[", defGhcFlag \"fno-PIC\"       (NoArg (unSetGeneralFlag Opt_PIC))",24],["-- have effect, and annotate it accordingly. For Flags use defFlag, defGhcFlag,",46]],"useCount":8700},{"word":"default","context":[["-- default-layout is the contents of the body tag, and",244],["-- default session idle timeout is 120 minutes",227],[">>= loadAndApplyTemplate \"templates/default.html\" defaultContext",161],["-- default Hamlet settings.",135],["-- path. The default value works properly with your scaffolded site.",132],["$(widgetFile \"default-layout\")",250],["[ ( \"default\"",242],["-- default-layout-wrapper is the entire page. Since the final",243],["-- you to use normal widget features in default-layout.",243],["-- We break up the default layout into two components:",244]],"useCount":21542},{"word":"defined","context":[["#if !defined(mingw32_HOST_OS)",228],["#if (defined(ghcjs_HOST_OS) && defined(USE_JAVASCRIPTFFI)) || !defined(USE_WEBKIT)",2273],["#if (defined(ghcjs_HOST_OS) && defined(USE_JAVASCRIPTFFI)) || !defined(USE_WEBKIT)",2273],["#if (defined(ghcjs_HOST_OS) && defined(USE_JAVASCRIPTFFI)) || !defined(USE_WEBKIT)",2273],["#if defined(mingw32_HOST_OS)",524],["#if defined(__GLASGOW_HASKELL__)",446],["-- resource pattern. All of your resource patterns are defined in",135],["#if defined(__GLASGOW_HASKELL__) && !defined(__HADDOCK__)",147],["#if defined(__GLASGOW_HASKELL__) && !defined(__HADDOCK__)",147],["#if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 702",160]],"useCount":26269},{"word":"definition","context":[["-- | Highlight source code using this syntax definition.",119],["-- The default definition is @'const' 'Nothing'@, which is appropriate",42],["-- been done. See the notes at the definition of InteractiveContext",43],["let (macro_name, definition) = break isSpace s",51],["-- Minimal complete definition:",79],["--Lifting a definition widens the scope of the definition.",66],["--Lifting a definition widens the scope of the definition.",66],["\"-Wold-style-definition\",",57],["text \"definition detected\"",45],["--The application of a function is replaced by the right-hand side of the definition,",53]],"useCount":8087},{"word":"dependencies","context":[["-- versioned package dependencies. So we ignore any previous partial flag",56],["\"library profiling for TARGETs and all its dependencies\"",53],["-- dependencies.",151],["-- dependencies based on type signatures",120],["notice verbosity \"Resolving dependencies...\"",99],["-- with the dependencies spelled out as -package arguments",64],["-- | Get all dependencies of the package (buildable targets only).",60],["-- Portability :  non-portable (multi-param classes, functional dependencies)",66],["-- | Some modules have dependencies on others through the DynFlags rather than textual imports",60],["-> Map PackageIdentifier GhcPkgId -- ^ dependencies",56]],"useCount":12231},{"word":"deps","context":[["deps =",53],["mg_deps         = deps,",49],["| dep <- deps",112],["-- deps if needed.",96],["let (directDeps, flaggedDeps) = splitDeps deps",64],["mi_deps        = deps,",60],["(addTopLevelConstraints deps cs')",57],["setExtensionFlag' f dflags = foldr ($) (xopt_set dflags f) deps",56],["deps = [ if turn_on then setExtensionFlag'   d",56],["++ deps",55]],"useCount":7827},{"word":"deriving","context":[["deriving Show",12848],["deriving (Eq, Show)",9947],["deriving (Show)",9016],["deriving (Show, Eq)",9007],["} deriving (Eq,Show,Data,Typeable,Generic)",5936],["} deriving (Eq, Show)",5075],["deriving (Eq, Ord, Show)",4385],["} deriving (Eq,Read,Show,Data,Typeable,Generic)",13664],["} deriving Show",4383],["} deriving (Show)",5335]],"useCount":203091},{"word":"desired","context":[["-- ^ If we got the desired GHC version from that file",40],["-> String     -- ^ The desired key from the object",25],["-- mov instruction to put it into the desired destination.",27],["to get the desired effect.",28],["-- have to do that yourself, if desired",29],["-- desired",35],["-- First, set the target to the desired filename",35],["-- Use one of the following lenses to modify other fields as desired:",19628],["--   version if desired.",90],["(\"cannot compile this file to desired target: \"",44]],"useCount":20496},{"word":"details","context":[["return (HomeModInfo{ hm_details  = details,",154],["| more details.                                                               |",143],["individual operation parameters for details.",206],["-- the comments there for more details.",104],["= case details of",97],["-- details.",161],["-- comments there for more details.",205],["-- for details",302],["-- For details on above see note [Api annotations] in ApiAnnotation",3426],[", psb_args = details",77]],"useCount":12985},{"word":"dflags","context":[["= sdocWithDynFlags $ \\dflags ->",571],["dflags <- GHC.getSessionDynFlags",356],["do dflags <- getDynFlags",367],["let platform = targetPlatform dflags",659],["dflags = hsc_dflags hsc_env",664],["let dflags = hsc_dflags hsc_env",678],["= do { dflags <- getDynFlags",798],["; dflags <- getDynFlags",816],["= do dflags <- getDynFlags",1110],["dflags <- getDynFlags",5139]],"useCount":120195},{"word":"different","context":[["-- look bogusly different. See test:",44],["-- We might need a different pointer type, so check",50],["-- the fork point are different depending on whether we are",56],["-- session can be using different dynamic flags. Dynamic flags can also be set",60],["text \"are different\") `andThenCheck`",60],["-- they're of different types)",64],["-- send emails. Unfortunately, there are too many different options for us to",129],["-- In addition, you can configure a number of different aspects of Yesod",197],["-- Note that in the presence of multiple contexts with different capabilities,",935],["-- manage many different YouTube channels. It allows content owners to",46]],"useCount":9292},{"word":"dir","context":[["dir <- getDataDir",325],["return (dir ++ \"/\" ++ name)",257],["createDirectoryIfMissing True dir",245],["dir <- getCurrentDirectory",204],["dir <- asks (parent . fst)",192],["dir <- defaultCabalDir",156],["dir",148],["(dirs ++ [dir])",121],["case dir of",122],["return dir",125]],"useCount":19873},{"word":"directory","context":[["-- | Files that the package depends on, relative to package directory.",55],["++ \" name, not in the directory name or file extension.\"",55],["=> Path Abs Dir      -- ^ Package directory.",57],["-- Windows: 'hybrid' support for DOS-style paths in directory lists.",61],["-- | Relative directory for the platform identifier",61],["info verbosity (\"copy directory '\" ++ srcDir ++ \"' to '\" ++ destDir ++ \"'.\")",66],["-- The \"pkgroot\" is the directory containing the package database.",68],["= withCurrentDirectory directory",84],["\"directory\" :>",98],["-- directory.",101]],"useCount":10309},{"word":"display","context":[["displayCallback $= display",87],["++ commaSep (map display moduleDuplicates)",104],["( display, simpleParse )",109],["import           Distribution.Text (display)",161],["(flagToList . fmap display))",245],["display b = do",91],["( display )",411],["display = do",101],["( Text(..), display )",94],["import Distribution.Text (display)",247]],"useCount":14307},{"word":"do","context":[["= do",21817],["else do",19342],["do",18296],["then do",11966],["main = do",26524],["(do",4029],["_ -> do",4292],["| otherwise = do",5020],["= do when (stptr/=ptrNull)",7260],["Nothing -> do",8250]],"useCount":572759},{"word":"doc","context":[["| otherwise     = doc",50],["bracket outer inner doc",50],["doc,",51],["Just doc <- currentDocument",52],["= Pretty.printDoc_ Pretty.PageMode (pprCols dflags) h doc",55],["doc = runSDoc d (initSDocContext dflags sty)",55],["; unless (null bads) (failWith (mkBadDecMsg doc bads))",56],["prt _ x = doc (shows x)",69],["doc <- askDocument",76],["rn_doc <- rnHsDoc doc",120]],"useCount":16294},{"word":"does","context":[["-- not exist in the map. If the key does exist, the function will",140],["-- /Warning/: this is an internal module, and does not have a stable",86],["-- As for all splitting functions in this library, this function does",65],["-- 'Nothing' if the vector does not contain the element. This is a specialised",64],["-- | /O(n)/ Check if the vector does not contain an element (inverse of 'elem')",64],["| ghcVersion < Version [7,2] [] -- ghc-7.2+ does not make _stub.o files",87],["text \"does not exist\")",102],["-- will insert the pair (key, value) into @mp@ if key does",139],["-- This function does three things:",139],["-- What this function does *not* do is create a YesodSite instance for",139]],"useCount":19539},{"word":"doesn","context":[["let r = fn stk in  -- it doesn't hurt to always seq here...",129],["-- TODO: can we eliminate this lock if it doesn't touch ~/.stack/?",120],["-- necessary because H98 doesn't have \"cunning newtype\" derivation",125],["let classes = [ \"commonlisp\"  -- as kate doesn't know emacs-lisp syntax",49],["-- Hugs users are accustomed to :e, so make sure it doesn't overlap",51],["-- create output var if doesn't already exist",51],["-- ensure that a later change doesn't invalidate an earlier check.",56],["-- we used to fix /cygdrive/c/.. on Windows, but this doesn't",60],["it \"doesn't throw any exception\" $ do",65],["-- doesn't do this on Windows (yet), so for now we use UTF-8,",50]],"useCount":11847},{"word":"don","context":[["-- Generated by DrIFT, look but don't touch!",76],["-- applications don't display anything themselves",68],["-- When you un-set f, however, we don't un-set the things it implies",78],["-- | Compile a stmt all the way to an HValue, but don't run it",82],["-- but we don't generate any code for newtypes",83],["-- we don't want a verbose help text list so we just show a generic one:",88],["-- elements that satisfy the predicate and the second one those that don't.",61],["-- elements that satisfy the predicate and the second one those that don't. The",61],["{-  We don't need state discarding for our restricted implementation of",132],["-- don't traverse?",293]],"useCount":30600},{"word":"done","context":[["done",243],["done why !ir !ow = return (why,",112],["if done",151],["-- since that is done by RnNames.extendGlobalRdrEnvRn",120],["liftIO $ putMVar done ()",138],["-- This is done to provide an optimization for serving static files from",190],["takeMVar done",216],["done <- newEmptyMVar",241],["Nothing -> maybePutStrLn dflags \"done\"",84],["putStrLn \"done\"",109]],"useCount":12603},{"word":"drop","context":[["slice, init, tail, take, drop, splitAt,",107],[", drop",179],["drop = G.drop",92],["drop = G.drop",92],["drop :: Nat -> [a] -> [a]",62],["init, tail, take, drop, splitAt, reverse,",62],["drop (S x) (_:xs) = drop x xs",61],["drop (S x) (_:xs) = drop x xs",61],["-- Note that @'splitAt' n v@ is equivalent to @('take' n v, 'drop' n v)@",61],["{-# INLINE drop #-}",229]],"useCount":8634},{"word":"ds","context":[["addDiags ds",60],["; (ss2,ds) <- repBinds wheres",86],["$$ where_clause ds",90],["case ds of",97],["return ds",70],["ds",74],["(p, _:ds) -> (p, ds)",60],["ds <- some $ fnDecl syn",66],["(p, _:ds) -> (p, ds)",60],["= let l' = ai inpat qq env ds l",56]],"useCount":17519},{"word":"dst","context":[["[src, src_off, dst, dst_off, (CmmLit (CmmInt n _))] =",96],["code dst = x_code `snocOL` opc x_reg dst",81],["let dst_r = getRegisterReg platform False (CmmLocal dst)",70],["copy src dst dst_p src_p bytes = do",58],["code dst = x_code `snocOL` opc x_reg dst",81],["gsemi, gpop dst 1])",84],["| src1 == dst",84],["| src2 == dst",84],["code dst",135],["code dst =",167]],"useCount":12315},{"word":"e","context":[["return e",591],["prt i e = case e of",548],["appendTree3 m1 (node3 a b c) (node2 d e) (node2 f g) m2",266],["e",285],["-- | Legacy upload protocol for media (e.g. \\\"media\\\", \\\"multipart\\\").",406],["(pos,e) <- posnElement [s]",635],["case e of",2657],["-- | Upload protocol for media (e.g. \\\"raw\\\", \\\"multipart\\\").",406],["Left e -> do",436],["prt i e = case e of",548]],"useCount":152689},{"word":"e1","context":[["return e1",54],["iselExpr64 (CmmMachOp (MO_Add _) [e1,e2]) = do",49],["return (OpApp e1 op2 fix2 e2)",52],["= (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",54],["data (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",57],["case f e1 of",64],["ChildCode64 code1 r1lo <- iselExpr64 e1",103],["ds1 <- repLE e1",129],["(addTickLHsExpr e1)",168],["= do new_e1 <- zonkLExpr env e1",201]],"useCount":11328},{"word":"e2","context":[["; z <- repNoBindSt e2",86],["(addTickLHsExpr e2)",105],["ds2 <- repLE e2",129],["do { e2 <- repLE e",86],["ChildCode64 code2 r2lo <- iselExpr64 e2",76],["-- (e11 `op1` e12) `op2` e2",56],["return (OpApp e1 op2 fix2 e2)",52],["iselExpr64 (CmmMachOp (MO_Add _) [e1,e2]) = do",49],["e2 <- expr",48],["new_e2 <- zonkLExpr env e2",201]],"useCount":10342},{"word":"each","context":[["-- | /O(n)/ Right fold with strict accumulator (function applied to each",64],["{-# INLINE each #-}",208],["-- | /O(m+min(n1,n2))/ For each index @i@ from the index vector and the",112],["-- | /O(n)/ Right fold (function applied to each element and its index)",64],["-- | /O(n)/ Left fold (function applied to each element and its index)",64],["-- | /O(n)/ Left fold with strict accumulator (function applied to each element",64],["-- | /O(m+n)/ For each pair @(i,a)@ from the list, replace the vector",64],["-- 'foldl'; it applies a function to each element of a ByteString,",62],["-- action to each index",61],["-- would unnecessarily retain a reference to @v@ in each element written.",61]],"useCount":16885},{"word":"either","context":[["--    whether this might be the case and choose to either switch to a",60],["either",151],["-- tree-transformer that either leaves the subtree untouched, or replaces it",59],["-- will be called either when we've consumed nought or the",60],["-- So, use either.",61],["then either f1 >= f2 or f2 >= f1",62],["configSettingsYmlValue = either throw id $ decodeEither' configSettingsYmlBS",62],["-- (string, number, boolean). The comparison_string must be either eq",63],["-- * the memory is freed when the subcomputation terminates (either",76],["--   values to the @combine@ function. Depending on the result, the key is either",57]],"useCount":10565},{"word":"elem","context":[["elem' :: (Eq a) => a -> [a] -> Bool",65],["infix 4 `elem`",93],["elem, notElem,",99],[", elem",113],["{-# INLINE elem #-}",152],["= do let tcgen = Dictionary `elem` opts",81],["let simple_output = FlagSimpleOutput `elem` my_flags",72],["| n `elem` (map fst ps ++ ns)",69],["elem _ [] = False",66],["elem :: Nat -> [Nat] -> Bool",65]],"useCount":18632},{"word":"element","context":[["-- /AttributeValueList/ can contain only one /AttributeValue/ element of type",120],["-- element and its index)",93],["-- element in the given 'ByteString' which is equal to the query",88],["-- if there is no such element.",82],["-- if no such element exists.",82],["-- or 'Nothing' if no such element exists.",82],["=> p -- ^ Pointer to UI element",85],["-- Use a 'Resource' element with the domain name to limit the action to only",87],["-- element.",87],["elemToParPart ns element",133]],"useCount":17685},{"word":"elements","context":[["-- elements.",131],["-- Note that the implementation is /left-biased/ -- the elements of a",92],["-- map contains all elements that satisfy the predicate, the second all",94],["-- elements that fail the predicate. See also 'split'.",95],["-- | Grow a vector by the given number of elements. The number must be",102],["-- | Reads vector; offset in scalar elements.",120],["-- | /O(n)/ Apply the monadic action to all elements of a vector and ignore the",126],["-- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a",128],["arbitrary = elements [minBound..maxBound]",144],["it \"correctly computes the first 20 elements\" $",182]],"useCount":11779},{"word":"else","context":[["else return ()",2958],["else _handler x0obj x1obj",2136],["else _handler x0obj",2216],["else do",19342],["else",15686],["else Nothing",3436],["#else",3117],["#else",23195],["else []",1851],["else return Nothing",2228]],"useCount":151403},{"word":"empty","context":[["{-# INLINE empty #-}",512],["Map.empty",536],["empty",578],["else empty",663],["Nothing -> empty",830],["then empty",940],[", empty",1258],["= empty",471],["empty = mzero",435],["| otherwise = empty",474]],"useCount":54529},{"word":"end","context":[["\\end{enumerate}",177],["-- the end.",152],["-- end:",149],["--  See end of this file for licence information.",148],["-- end of Happy Template.",134],["if null input then \"end of file\" else show (head input)",135],["\\end{verbatim}",1367],[", \"end\"",298],["end",317],["\\end{itemize}",340]],"useCount":16967},{"word":"endif","context":[["#endif",59666],["#endif",8179],["# endif",1706],["#  endif",765],["#  endif",391],["-- #endif",293],["#endif /* GHCI */",253],["##endif",156],["#endif /* __GLASGOW_HASKELL__ */",84],["# endif",79]],"useCount":72467},{"word":"entry","context":[["entry",117],["case entry of",142],["-- | Main entry point.",94],["Nothing -> pgmError (\"No entry for \" ++ show key ++ \" in \" ++ show settingsFile)",75],["-- info tables that reside just before the entry code, or with an",59],["-- indirection to the entry code.  See TABLES_NEXT_TO_CODE in",59],["= FileOption -- an entry that _contains_ filename(s) / filepaths.",61],["-- Returns the original key value if the map entry is deleted.",64],["( -- * Language entry",76],["entry = emptyEntry",81]],"useCount":8205},{"word":"env","context":[["env <- getEnv",288],["= do new_e1 <- zonkLExpr env e1",201],["= do new_expr <- zonkLExpr env expr",202],["= do { env <- getGblEnv",192],["new_e2 <- zonkLExpr env e2",201],["env <- getEnvironment",313],["#!/usr/bin/env runhaskell",426],["env <- get",436],["env <- ask",512],["env <- get_env",973]],"useCount":121343},{"word":"environment","context":[["-> HscEnv                     -- ^ Compilation environment",85],["-- allow environment variables to override",108],["-- | Clean up the GHCi environment after a statement has run",47],["-- | Evaluate a computation with the given initial state and environment,",84],["-- applied to the type of the local environment tuple",68],["-- loaded from various sources: defaults, environment variables, config files,",65],["-- Just look in the local environment",56],["-- | Execute a computation in a modified environment",53],["-- environment.",140],["-> Maybe [(String, String)] -- ^ New environment or inherit",49]],"useCount":12339},{"word":"equality","context":[["With the solver handling Coercible constraints like equality constraints,",39],["a representational equality to rewrite a nominal one.",39],["--   * If the equality is representational, rhs has no top-level newtype",38],["-- See also Note [The equality types story] in TysPrim",40],["Should we quantify over an equality constraint (s ~ t)?  In general, we don't.",40],["So we *do* quantify over a type-family equality where the arguments mention",40],["Note [Quantifying over equality constraints]",40],["-- supply their own equality test.",54],["-- their own equality test.",62],["-- ** Searching by equality",107]],"useCount":8032},{"word":"err","context":[["Left err -> Left err",591],["Left err -> Left err",591],["2 -> err as iis",330],["Left err -> do",892],["1 -> err as iis",330],["5 -> err as iis",330],["3 -> err as iis",333],["0 -> err as iis",336],["case err of",411],["Left err ->",541]],"useCount":40662},{"word":"error","context":[["maybe (Prelude.error \"Nothing to return\") return)",1656],["import qualified Prelude (error)",1026],[">>= maybe (Prelude.error \"Nothing to return\") return)",609],["-- | V1 error format.",418],["gunfold _ _  = error \"gunfold\"",408],["-- actually making the request, and provides an error response. If you have",291],["Left err -> error $ show err",262],["Left err -> error err",231],["Left err -> error (show err)",198],["error $",196]],"useCount":47916},{"word":"errors","context":[["-- in development, and warnings and errors in production.",192],["This allows catching (and rethrowing) service specific errors returned",199],["{- $errors",209],["-- $errors",216],["case errors of",73],["if null errors",84],["\"errors\" .= toJSON xs",90],["-- Internal happy errors:",134],["-- See Note [Deferring coercion errors to runtime]",100],["exitWith $ if failures counts /= 0 || errors counts /= 0 then ExitFailure 1 else ExitSuccess",107]],"useCount":11073},{"word":"es","context":[["-- La propiedad es",63],["let es = children e",74],["-- La comprobación es",80],["-- Maintainer: Ertugrul Soeylemez <es@ertes.de>",88],["es",92],["prtList es = case es of",126],["prtList es = case es of",126],["case es of",158],["if null es",49],["go d (e:es) = (d <> p) : go e es",49]],"useCount":9158},{"word":"etc","context":[["-- @x+y+y@ etc. This operations is usually more efficient than 'enumFromThenTo'.",57],["= CompManager         -- ^ @\\-\\-make@, GHCi, etc.",60],["-- etc. This operation is usually more efficient than 'enumFromTo'.",57],["-- includes database connection settings, static file locations, etc.",198],["...etc...",168],["=> OptimizeOpts                -- ^ Parameters to optimization (Iterative, Quantified, etc.)",63],["-- etc.",53],["-- don't need to check .. and ../.. etc. because \".\"  always refers to",51],["-- | Run-time linker information (what options we need, etc.)",56],["-- paths etc.",60]],"useCount":7285},{"word":"ev","context":[["ev      = ctEvidence ct",52],["= case ev of",59],["; updWorkListTcS (extendWorkListDerived loc ev) }",42],[", inert_count = bumpUnsolvedCount ev (inert_count ics) }",42],["canClassNC ev cls tys",45],["-> Html ev  -- ^ Resulting HTML.",90],["-> Attribute ev    -- ^ Resulting attribute.",97],["case ev of",317],["loc     = ctEvLoc ev",46],["pred = ctEvPred ev",48]],"useCount":11163},{"word":"even","context":[["-- OS even if Docker is enabled for builds.  The build config is not",78],["-- theoretically even a database.",65],["-- work fine even with DOS paths, if you're not insisting on being silly.",61],["even (S (S x)) = even x",60],["even (S (S x)) = even x",60],["-- install-time depending on the available gcc version, and even",60],["-- PIC objects can be linked into a .so, we have to compile even",55],["even :: Nat -> Bool",59],["even Z = True",58],["even (S Z) = False",58]],"useCount":10151},{"word":"example","context":[["pagination. For example, the 'ListObjects' operation of Amazon S3 returns up to",206],["For example:",767],["-- | A name-spaced GUID (for example,",151],["-- example:",124],["-- For example:",465],["-- For example,",396],["-- $example",247],["For example",96],["-- first argument are always preferred to the second, for example in",92],["applied to their respective values. For example, the following",85]],"useCount":21724},{"word":"exception","context":[["Left ex -> putStrLn $ \"Caught exception: \" Data.List.++ show ex",322],["-- throw an exception.",57],["-- know what to clean when an exception happens",60],["-- exception will be thrown.  For more control over the handling of",60],["-- exception",60],["-- An exception will be thrown in the case of an empty ByteString.",180],["-- exception.",116],["_ -> case fromException exception of",76],["--   normally or via an exception), so the pointer to the temporary",74],["it \"doesn't throw any exception\" $ do",65]],"useCount":8363},{"word":"exists","context":[["if exists",1446],["if not exists",214],["exists <- doesFileExist fp",100],["exists <- doesFileExist file",109],["exists <- doesFileExist f",122],["unless exists $ do",205],["case exists of",190],["exists <- doesFileExist path",162],["when (not exists) $",140],["when exists $ do",158]],"useCount":9031},{"word":"expected","context":[["showError (TypeMismatch expected found) = \"Invalid type: expected \" ++ expected",55],["expected =",156],["-- If oriented then ty1 is actual, ty2 is expected",68],["expected = unlines",78],["actual `shouldBe` expected",80],["-- Actual and expected types",63],["-- to whatever format they're expected to be on a particular platform.",61],["value `shouldBe` expected",82],["-- preconditions expected by public modules. Use at your own risk!",83],["--   and fails using @'typeMismatch' expected@ otherwise.",107]],"useCount":7054},{"word":"experimental","context":[["-- Stability   : experimental",8404],["-- Stability    : experimental",176],["-- Stability : experimental",180],["-- Stability:    experimental",206],["-- Stability :  experimental",358],["-- Stability  : experimental",408],["-- Stability:   experimental",593],["Stability   :  experimental",1822],["Stability   : experimental",2177],["-- Stability   :  experimental",6909]],"useCount":22745},{"word":"exports","context":[["-- * Re-exports",254],["-- Stub files generated for foreign exports references the runIO_closure",44],["{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}",2672],["-- exports main, i.e., we have good reason to believe that linking",42],["-- exports.",86],["{-# OPTIONS_HADDOCK ignore-exports #-}",81],[", abs_exports = exports",68],["-- configuring, building and installing packages. It also exports a function",47],[", md_exports   = exports",63],["-- TODO: explicit exports",49]],"useCount":8076},{"word":"expr","context":[["expr",142],["sc <- expr syn",154],["body <- expr",159],["expr :: Parser Expr",135],["r <- getRegister expr",110],["r <- expr syn",105],["return expr",195],["= do new_expr <- zonkLExpr env expr",202],["e <- expr",262],["case expr of",574]],"useCount":32626},{"word":"expression","context":[["expression",66],["<?> \"expression\"",181],["-- | Parse an expression using appropriate local context.",119],["-- value is interpreted as a regular expression using RE2 syntax. The",63],["(LHsExpr id)                       -- sub-expression",67],["(LHsExpr id)     -- input expression, arg",68],["(LHsExpr id)     -- arrow expression, f",68],["-- converting the expression into a pattern at the same time.",71],["-- expression.",78],["-> DsM (CoreExpr,       -- desugared expression",144]],"useCount":18806},{"word":"extensions","context":[["{-# OPTIONS_HADDOCK show-extensions #-}",734],["= let onoffs = On f : extensions dfs",60],[", ext <- nub extensions ]",62],["-- Portability : non-portable (GHC extensions)",14092],["extensions = [],",65],["Portability : non-portable (language extensions)",74],["-- Portability: Non-portable (GHC extensions)",89],["-- | Filename extensions for this language.",119],["in dfs { extensions = onoffs,",122],["-- Portability :  non-portable (GHC extensions)",215]],"useCount":18961},{"word":"extra","context":[["-- LinkerInfo contains any extra options needed by the system linker.",56],["-- we get rid of any extra spaces for the \":}\" test;",51],["when (noExtraArgs extra) $",96],["@wide@ is 'True', an extra wide version is shown.",78],["-- | /O(n)/ Yield the argument but force it not to retain any extra memory,",64],["extra",61],["-- parameters of the virtual machine, eg. profiling adds an extra word",60],[", extra ]",57],["++ \"--extra-include-dirs= and --extra-lib-dirs= to specify \"",56],["++ \"--extra-include-dirs= and --extra-lib-dirs= to specify \"",56]],"useCount":10482},{"word":"f","context":[["Prelude'.return (Prelude'.foldl (\\ v f -> f v) P'.defaultValue mods)",869],["f",845],["case f of",501],["f x = x",468],["return f",327],[":: (RedisCtx m f)",320],["Prelude'.return (Prelude'.foldl (\\ v f -> f v) P'.defaultValue mods)",869],["Assign f (Async x m []) $ \\ () ->",1128],["getVal m' f' = f' m'",1274],["getVal m' f' = f' m'",1274]],"useCount":248410},{"word":"fail","context":[["{-# INLINE fail #-}",260],["_ -> fail \"no parse\"",97],["Left err -> fail err",241],["else fail $ \"cannot unpack array of length \" ++",100],["e           -> fail $",113],["Left err -> fail $ show err",117],["when (null txt) $ fail \"Parser matched no text\"",119],["then fail $ \"cannot unpack array of length \" ++",120],["-- parse error if we are in recovery and we fail again",132],["Left e -> fail $ show e",132]],"useCount":19669},{"word":"family","context":[["-- family instance.",52],["-- See Note [Reduce type family applications eagerly]",51],["type family F a where",50],["<*> P.optional (P.xattr (P.name \"font-family\") >>= parseCommaSeparatedText)",57],["data family T a :: *",64],["data family T a",90],["data family F a",94],["type family F a :: *",99],["family.",55],["type family F a",105]],"useCount":15925},{"word":"fc","context":[["fc <- getFC",868],["fc <- pfc",93],["fullApp (PApp _ (PApp fc f args) xs) = fullApp (PApp fc f (args ++ xs))",91],["fullApp (PApp _ (PApp fc f args) xs) = fullApp (PApp fc f (args ++ xs))",91],["highlightP fc AnnKeyword",74],["where fc = fileFC \"main\"",56],["elabArgs ist ina failed fc r f ns force args",55],["elab' ina fc t",53],["(fc:_) -> Just fc",52],["(fc:_) -> Just fc",52]],"useCount":27774},{"word":"field","context":[["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["= Data.ProtoLens.field",169],["<*> field",133],["-- tyConName field.",154],["field _",238],["where combine field = field a `mappend` field b",691],["where combine field = field a `mappend` field b",691],["where combine field = field a `mappend` field b",691],["-- NOT STRICT!  we read this field lazily from the interface file",116],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120]],"useCount":24517},{"word":"fields","context":[["{-# OPTIONS_GHC -funbox-strict-fields -Wall -Werror #-}",79],["fields",75],["-- check for non-ASCII fields, usually due to 'arbitrary :: String'",74],["-- See Note [The binders/kind/arity fields of a TyCon]",91],["-- | Creates a value of 'Tag' with the minimum fields required to make a request.",69],["where fields = [",112],["{-# OPTIONS_GHC -fno-warn-missing-fields #-}",225],["{-# OPTIONS_GHC -funbox-strict-fields #-}",332],["-- The fields accessible through corresponding lenses are:",8639],["-- Use one of the following lenses to modify other fields as desired:",19628]],"useCount":42682},{"word":"file","context":[["-- includes database connection settings, static file locations, etc.",198],["-- Don't forget to add new modules to your cabal file!",242],["-- declared in the Foundation.hs file.",167],[", getStatic :: Static -- ^ Settings for static file serving.",156],["-- The code in this file, and the program it is a part of, is",224],["-- | Settings are centralized, as much as possible, into this file. This",197],["-- The rest of this file contains settings which rarely need changing by a",190],["Warning   : this file is machine generated - do not modify.",1354],["-- If you do not find this file, copies can be found by writing to:",536],["-- This file is part of grid.",472]],"useCount":57076},{"word":"filename","context":[["registerPackage filename verbosity cli",72],["filename",73],["-> IO (DynFlags, FilePath)    -- ^ (final flags, output filename)",81],["-- Generate a unique filename based on the content itself",168],["loc  = mkRealSrcLoc (mkFastString filename) 1 1",67],["| filename <- cSources libBi]",63],["exists <- doesFileExist filename",62],["= FileOption -- an entry that _contains_ filename(s) / filepaths.",61],["String  -- the filepath/filename portion",61],["contents <- readFile filename",52]],"useCount":8297},{"word":"files","context":[["-- costly transference of cookies on static files. For more information,",130],["-- | The base URL for your static files. As you can see by the default",129],["-- This function creates static content files in the static folder",285],["-- A powerful optimization can be serving static files from a separate",130],["-- files, more easily set expires and cache values, and avoid possibly",130],["-- | The location of static files on your system. This is a file system",133],["-- functions. You can spread them across multiple files if you are so",135],["-- split these actions into two functions and place them in separate files.",139],["| file <- files",150],["-- This is done to provide an optimization for serving static files from",190]],"useCount":22550},{"word":"filter","context":[["filter",108],["QueryParam \"filter\" Text :>",93],["(filter",93],["-- filter equivalent",109],["return (filter (w `isPrefixOf`) opts)",96],["import Prelude hiding (filter)",122],["data_tycons = filter isDataTyCon tycons",127],[", filter",360],["{-# INLINE filter #-}",274],["Many operations have the ability to filter results on the server side. See the",206]],"useCount":20905},{"word":"find","context":[["import           Data.List (find)",66],["-- -stubdir D adds an implicit -I D, so that gcc can find the _stub.h file",68],["-- TODO: there's no need to find the longest",73],["-- | Given something like /usr/local/bin/ghc-6.6.1(.exe) we try and find a",80],["If you do not find this file, copies can be found by writing to:",102],["-- You can find more information on persistent and how to declare entities",139],[", find",182],["{-# INLINE find #-}",233],["-- If you do not find this file, copies can be found by writing to:",536],["import Data.List (find)",611]],"useCount":14924},{"word":"first","context":[["-- first.",90],["-- first argument are always preferred to the second, for example in",92],["import           Control.Arrow (first)",102],["let atom = first:rest",106],["-- | /O(n)/ Split the vector in two parts, the first one containing those",122],["-- Place Javascript at bottom of the body tag so the rest of the page loads first",142],["import Control.Arrow (first, second)",143],["first <- letter <|> symbol",152],["it \"correctly computes the first 20 elements\" $",182],["import Control.Arrow (first)",565]],"useCount":27929},{"word":"flag","context":[["-- Seq-ing.  If the --strict flag is given, then Happy emits",129],["-- | A flag that indicates whether there are more items to return. If your",73],["-- ^ Per-package flag overrides",76],["-- (e.g., -mcpu=ultrasparc). GCC picks the \"best\" -mcpu flag",86],["-- flag.",108],["\"    Accepts the --simple-output flag.\\n\" ++",108],["case flag of",135],["-> (Deprecation, FlagSpec flag)",176],["-- The above warning supression flag is a temporary kludge.",288],["-- See Note [Updating flag description in the User's Guide]",589]],"useCount":23432},{"word":"flagSpec","context":[["flagSpec \"Haskell2010\" Haskell2010",46],["flagSpec \"vectorisation-avoidance\"          Opt_VectorisationAvoidance,",46],["flagSpec \"ignore-interface-pragmas\"         Opt_IgnoreInterfacePragmas,",46],["flagSpec \"cse\"                              Opt_CSE,",46],["flagSpec \"case-merge\"                       Opt_CaseMerge,",46],["flagSpec \"suppress-coercions\"         Opt_SuppressCoercions,",46],["flagSpec \"ppr-ticks\"                  Opt_PprShowTicks,",46],["flagSpec \"suppress-idinfo\"            Opt_SuppressIdInfo,",46],["flagSpec \"spec-constr\"                      Opt_SpecConstr,",46],["flagSpec \"excess-precision\"                 Opt_ExcessPrecision,",46]],"useCount":11585},{"word":"flags","context":[["-- Please keep the list of flags below sorted alphabetically",188],["-> [OptionField flags]",143],["-- | These -X<blah> flags cannot be reversed with -XNo<blah>",120],["-> OptionField flags",110],["--     implies further flags",107],["-> (flags -> Flag Bool  ) -> (Flag Bool   -> flags -> flags)",101],["-> (flags -> Flag Bool  ) -> (Flag Bool   -> flags -> flags)",101],["-> (flags -> Flag Bool  ) -> (Flag Bool   -> flags -> flags)",101],["flags",94],["-- | These @-f\\<blah\\>@ flags can all be reversed with @-fno-\\<blah\\>@",156]],"useCount":44967},{"word":"fmap","context":[["{-# INLINE fmap #-}",910],["fmap = map",166],["fmap fst . checkClosed $",214],["(toFlag `fmap` parse))",217],["negate = fmap negate",220],["abs = fmap abs",225],["(flagToList . fmap display))",245],["signum = fmap signum",246],["fmap",328],["fmap = liftM",1118]],"useCount":34694},{"word":"fn","context":[["runIO $ copyFile fb fn",150],["happyMonadReduce k nt fn j tk st sts stk =",132],["= let r = fn v1 v2 v3 in",129],["= let r = fn v1 v2 in",129],["= let r = fn v1 in",129],["let r = fn stk in  -- it doesn't hurt to always seq here...",129],["happyReduce k nt fn j tk st sts stk",129],["happyMonad2Reduce k nt fn j tk st sts stk =",115],["happyThen1 (fn stk tk) (\\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))",115],["= do src <- runIO $ readSource fn",102]],"useCount":26104},{"word":"fno","context":[["{-# OPTIONS_GHC -fno-warn-type-defaults #-}",445],["{-# OPTIONS_GHC -fno-warn-name-shadowing #-}",537],["{-# OPTIONS_GHC -fno-warn-missing-signatures #-}",635],["{-# OPTIONS_GHC -fno-warn-unused-binds      #-}",2316],["{-# OPTIONS_GHC -fno-warn-unused-imports    #-}",2618],["{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}",2672],["{-# OPTIONS_GHC -fno-warn-orphans #-}",4798],["{-# OPTIONS_GHC -fno-warn-unused-binds   #-}",5323],["{-# OPTIONS_GHC -fno-warn-unused-matches #-}",5481],["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",12002]],"useCount":44930},{"word":"foldl","context":[["import Data.Foldable (foldl')",102],[", foldl",209],["foldl, foldl1, foldr, foldr1,",105],["-- > last (scanl f z xs) == foldl f z xs.",105],["import           Data.List (foldl')",115],[", foldl'",284],["{-# INLINE foldl' #-}",376],["{-# INLINE foldl #-}",398],["Prelude'.return (Prelude'.foldl (\\ v f -> f v) P'.defaultValue mods)",869],["import Data.List (foldl')",1038]],"useCount":13362},{"word":"foldr","context":[["{-# INLINE foldr #-}",452],["-- | 'foldr1' is a variant of 'foldr' that has no starting value argument,",76],["foldr = foldr",71],["mconcat = foldr mappend mempty",96],["foldr",98],["foldl, foldl1, foldr, foldr1,",105],["import Prelude hiding (foldr)",190],[", foldr",259],["{-# INLINE foldr' #-}",205],[", foldr'",148]],"useCount":15218},{"word":"following","context":[["applied to their respective values. For example, the following",85],["But the following are all 'False':",81],["\"The following file name is too long to store in a portable POSIX \"",81],["the following conditions:",109],["furnished to do so, subject to the following conditions:",131],["so, subject to the following conditions:",140],["-- What messages should be logged. The following includes all messages when",192],["-- One of the following values:",200],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["-- Use one of the following lenses to modify other fields as desired:",19628]],"useCount":29910},{"word":"foo","context":[[", \"foo\"",89],["{-# INLINE foo #-}",67],["\"name: foo\"",74],["foo = do",78],["foo",80],["\"foo\"",92],["foo :: Int",111],["foo:",112],["foo = undefined",114],["foo :: Int -> Int",163]],"useCount":15461},{"word":"for","context":[["-- | Upload protocol for media (e.g. \\\"raw\\\", \\\"multipart\\\").",406],["-- | Legacy upload protocol for media (e.g. \\\"media\\\", \\\"multipart\\\").",406],["-- for details",302],["-- Please see the documentation for the Yesod typeclass. There are a number",286],["-- | Project ID for this request.",241],["-- -fno-cse is needed for GLOBAL_VAR's to behave properly",211],["individual operation parameters for details.",206],["-- comments there for more details.",205],["Error matchers are designed for use with the functions provided by",199],["-- | The site argument for your application. This can be a good place to",192]],"useCount":218329},{"word":"forall","context":[["dfunD :: forall a. D [a] -> D [a]",64],[", \"(assert (forall ( (f1 (pfun sl$TRAIN sl$BLK))\"",144],[", \"(assert (forall ( (f1 (pfun sl$Train sl$Blk))\"",115],["f :: forall a. a -> a",94],["forall msg msg' .",92],["\"ByteString specialise filter (== x)\" forall x.",84],["class C f where...   -- C :: forall k. k -> Constraint",80],["data Unpacker = forall a. Eq a => AnyUnpacker (LispVal -> ThrowsError a)",71],["forall a.",149],["foo :: (forall a. C u a -> C u a) -> u",58]],"useCount":24708},{"word":"foreign","context":[["foreign import ccall",191],["foreign import ccall \"wrapper\"",252],["foreign import dotnet",751],["foreign import javascript unsafe",2745],["foreign import ccall \"wrapper\"",181],["foreign import ccall safe \"wrapper\"",153],["foreign import ccall \"dynamic\"",146],["foreign import ccall",129],["foreign import ccall unsafe",123],["foreign import javascript unsafe \"$1[\\\"type\\\"]\" js_getType ::",123]],"useCount":17275},{"word":"form","context":[["-- | Test if Safe Imports are on in some form",60],["-- | Sets a filter expression for filtering listed resources, in the form",63],["case form of",71],["^{form}",75],["showError (BadSpecialForm message form) = message ++ \": \" ++ show form",85],["showError (BadSpecialForm message form) = message ++ \": \" ++ show form",85],["-- Do saturation and convert to A-normal form",126],["-- achieve customized and internationalized form validation messages.",243],["* Redistributions in binary form must reproduce the above",332],["-- of the form a t t', where arg :: t",66]],"useCount":11008},{"word":"format","context":[["-- | An identity pool ID in the format REGION:GUID.",87],["format = intFormat width",99],["format",105],["$(logInfo) $ format $ unlines",79],["-- | from json as per Instagram format",111],["-- | to json as per Instagram format",111],["return (Any format code)",169],["-- | V1 error format.",418],["case format of",86],["pprMnemonic name format,",80]],"useCount":8350},{"word":"found","context":[["-- Calls 'error' when the element can not be found.",69],["-- If you do not find this file, copies can be found by writing to:",536],["-- we also avoid silent failure if \":}\" is not found;",51],["showError (TypeMismatch expected found) = \"Invalid type: expected \" ++ expected",55],["case found of",171],["If you do not find this file, copies can be found by writing to:",102],["++ \", found \" ++ show found",63],["++ \", found \" ++ show found",63],["-> (flag -> DynP ())     -- ^ What to do when the flag is found",61],[", \" executable not found for \"",57]],"useCount":9996},{"word":"fp","context":[["withForeignPtr fp $ \\p -> do",120],["return fp",104],["withForeignPtr fp $ \\p ->",56],["return (Just fp)",59],[", fp",62],["newFci <- calcFci modTime' fp",72],["fp <- mallocByteString l",74],["case fp of",91],["exists <- doesFileExist fp",100],["Just fp -> do",175]],"useCount":10930},{"word":"free","context":[["free buf",114],["--   explicitly freed using 'Foreign.Marshal.Alloc.free' or",52],["Maintainer  : zigazou@free.fr",112],["IdSet)          -- subset of local vars that occur free",75],["-- Please feel free to contact us at licensing@pivotmail.com with any",65],["-- | Returns free variables of types, including kind variables as",65],["free ptr",62],["free variables.",61],["XmlPickler [NodeG [] tag text] free,",60],["IdSet,          -- subset of local vars that occur free",60]],"useCount":12291},{"word":"freeHaskellFunPtr","context":[["-- 'freeHaskellFunPtr' when it is no longer required.",12],["freeHaskellFunPtr fp",17],["freeHaskellFunPtr :: FunPtr a -> IO ()",13],["-- 'freeHaskellFunPtr' when it is no longer required.",24],["freeHaskellFunPtr $ \\callbackPtr -> do",55],["(freeHaskellFunPtr (castPtrToFunPtr funptr_d))",7260],["(freeHaskellFunPtr (castPtrToFunPtr funptr))",8192],["freeHaskellFunPtr funAddr",18]],"useCount":15591},{"word":"freeStablePtr","context":[["freeStablePtr   :: StablePtr# a -> State# RealWorld -> State# RealWorld",13],["Note that we can implement @freeStablePtr#@ using @_ccall_@ (and,",13],["ensure correct sequencing wrt the side-effecting @freeStablePtr@",13],["freeStablePtr entry",15],["freeStablePtr",19],["else do freeStablePtr stable_ref",20],["freeStablePtr stablePtr",25],["(freeStablePtr (castPtrToStablePtr stptr))",8192]],"useCount":8310},{"word":"from","context":[["\\from ganeti import serializer\\n\\",122],["-- A powerful optimization can be serving static files from a separate",130],["-- Don't inline any functions from the template.  GHC has a nasty habit",132],["from $ \\p -> do",135],["-- from base:",136],["-- from all the external-package modules",145],["-- | The position in source from which this arises.",184],["-- This is done to provide an optimization for serving static files from",190],["{- This module was generated from data in the Kate syntax",119],["-- NOT STRICT!  we read this field lazily from the interface file",116]],"useCount":78115},{"word":"fromIntegral","context":[["safeConvert = boundedConversion (return . fromIntegral)",529],["convertAttempt = boundedConversion (return . fromIntegral)",529],["ppr n = integer $ fromIntegral n",120],["let {a5' = fromIntegral a5} in",140],["| wordsToBytes dflags (asUnsigned w n) <= fromIntegral (maxInlineAllocSize dflags) =",140],["let {a3' = fromIntegral a3} in",164],["lift x = return (LitE (IntegerL (fromIntegral x)))",168],["toJSON = Number . fromIntegral",183],["(IntConstr x) -> z (fromIntegral x)",219],["return $ qEnum_fromInt $ fromIntegral ti",774]],"useCount":27319},{"word":"fromList","context":[["--          , Set.fromList [ Opra2_7_7, Opra2_7_1, Opra2_7_0, Opra2_6_7",124],["--          , Set.fromList [ Opra2_7_7, Opra2_7_6, Opra2_7_5, Opra2_7_4",120],["m  = fromList xs",130],["fromList,",144],["(fromList",182],["M.fromList",231],["{-# INLINE fromList #-}",274],["Map.fromList",549],[", fromList",826],["--          , Set.fromList",5760]],"useCount":37809},{"word":"fromMaybe","context":[["import Data.Maybe (fromMaybe, mapMaybe)",83],["import           Data.Maybe (fromMaybe)",378],["import Data.Maybe ( fromMaybe )",265],["import Data.Maybe(fromMaybe)",155],["fromMaybe",109],["import Data.Maybe (fromMaybe, isJust)",103],["(fromMaybe []))",94],["import Data.Maybe (fromMaybe, listToMaybe)",85],["import Data.Maybe (fromJust, fromMaybe)",82],["import Data.Maybe (fromMaybe)",3071]],"useCount":11712},{"word":"fs","context":[["[fs] -> fs",74],["removeTmpFiles dflags fs",50],["configProgramArgs (\\v fs -> fs { configProgramArgs = v })",53],["configProgramArgs (\\v fs -> fs { configProgramArgs = v })",53],["assertNewName gs { gMetadata = meta } fs",54],["fs <- repFields flds;",66],["[fs] -> fs",74],["fs",76],["fs <- getFileStore",121],["case fs of",149]],"useCount":11855},{"word":"fsLit","context":[["= BuiltinRule { ru_name = fsLit str, ru_fn = name, ru_nargs = 2,",88],["where loc = mkGeneralSrcSpan (fsLit \"when making flags consistent\")",56],["loc    = mkRealSrcLoc (fsLit (progname st0)) (line_number st0) 1",48],["MO_F32_Tan    -> fsLit \"tanf\"",40],["MO_F64_Tan    -> fsLit \"tan\"",40],["= BuiltinRule { ru_name = fsLit str, ru_fn = name, ru_nargs = 1,",106],["MO_F64_Sinh   -> fsLit \"sinh\"",40],["MO_F32_Tanh   -> fsLit \"tanhf\"",40],["MO_F32_Exp    -> fsLit \"expf\"",40],["MO_F32_Cosh   -> fsLit \"coshf\"",40]],"useCount":29819},{"word":"fst","context":[["let xs = List.nubBy ((==) `on` fst) ys",150],["nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",104],["put (decls, nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",111],["fmap fst . checkClosed $",214],["dir <- asks (parent . fst)",192],["\\showOrParseArgs -> liftOptions fst setFst",84],["(fmap fst mlogFile)",83],["maybeRead = fmap fst . listToMaybe . reads",82],["fst) .",81],[". sortBy (comparing fst)",73]],"useCount":17194},{"word":"ft","context":[["= case ft' of",3477],["_ -> P'.wireSizeErr ft' self'",1159],["wireGet ft'",1159],["_ -> P'.wireGetErr ft'",1159],["_ -> P'.wirePutErr ft' self'",1159],["wireGet ft' = P'.wireGetErr ft'",115],["wireGet ft' = P'.wireGetErr ft'",115],["wireSize ft' enum = P'.wireSize ft' (Prelude'.fromEnum enum)",115],["wireSize ft' enum = P'.wireSize ft' (Prelude'.fromEnum enum)",115],["wirePut ft' enum = P'.wirePut ft' (Prelude'.fromEnum enum)",115]],"useCount":10070},{"word":"fun","context":[["collect_args fun args = (fun, args)",54],["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260],["slotHandlerWrapper_int :: Ptr fun -> Ptr () -> Ptr (TQObject c) -> CInt -> IO ()",894],["case fun of",91],["; return (L loc fun, ty) }",56],["collect_args fun args = (fun, args)",54],["runMacro fun s = do",51],["wrapCompleter breakChars fun = completeWord Nothing breakChars",50],["wrapIdentCompleterWithModifier modifChars fun = completeWordWithPrev Nothing word_break_chars",49],["= do  { fun <- tcLookupId fun_name",48]],"useCount":19325},{"word":"fun_d","context":[["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260]],"useCount":7260},{"word":"function","context":[["-- See Note: Type of local 'go' function",295],["-- function.",360],["-- | /O(n)/. Map a function over all values in the map.",147],["-- This function creates static content files in the static folder",285],["-- function is strict in the starting value.",208],["-- This function allocates resources (such as a database connection pool),",208],["-- Modify the inert set with the supplied function",183],["-- | Main function.",182],["-- not exist in the map. If the key does exist, the function will",140],["-- What this function does *not* do is create a YesodSite instance for",139]],"useCount":55240},{"word":"functions","context":[["-- * Helper functions",304],["-- Base interface functions are in:",1344],["-- * Utility functions",262],["-- Helper functions",246],["-- Utility functions",236],["Error matchers are designed for use with the functions provided by",199],["-- functions.",195],["-- for our application to be in scope. However, the handler functions",139],["-- split these actions into two functions and place them in separate files.",139],["-- functions. You can spread them across multiple files if you are so",135]],"useCount":20857},{"word":"funptr","context":[["(freeHaskellFunPtr (castPtrToFunPtr funptr))",8192],["when (funptr/=ptrNull)",8192],["setHandlerWrapper_d funptr stptr funptr_d",7260],["qtc_connectSlot_int cobj_sig cstr_sig cobj_slt cstr_slt (toCFunPtr funptr) (castStablePtrToPtr stptr)",894],["funptr  <- wrapSlotHandler_int slotHandlerWrapper_int",894],["slotHandlerWrapper_int funptr stptr qobjptr cint",894],["--     let fun = fun__ funptr",22],["--     funptr <- dlsym mod \"mogrify\"",13],["--     let fun = fun__ funptr",11]],"useCount":26372},{"word":"funptr_d","context":[["setHandlerWrapper_d funptr stptr funptr_d",7260],["(freeHaskellFunPtr (castPtrToFunPtr funptr_d))",7260],["when (funptr_d/=ptrNull)",7260]],"useCount":21780},{"word":"fvs","context":[["fvs = freeVarsOf ce",44],["; fvs' `seq` -- See Note [Free-variable space leak]",63],["; (tys', fvs) <- mapFvRn (rnLHsTyKi env) tys",47],["do { (ty', fvs) <- rnLHsType doc ty",48],["floatLamArgs            = Just 0, -- Default: float only if no fvs",60],["; return (([], thing), fvs) }",58],["; return (((stmts1 ++ stmts2), thing), fvs) }",58],["= do  { (section', fvs) <- rnSection section",58],[", tfe_rhs   = rhs' }, fvs) }",60],["; return (HsPar (L loc section'), fvs) }",58]],"useCount":9432},{"word":"g","context":[["-- | Upload protocol for media (e.g. \\\"raw\\\", \\\"multipart\\\").",406],["g <- newStdGen",174],["appendTree3 m1 (node3 a b c) (node3 d e f) (node3 g h i) m2",190],["appendTree3 m1 (node3 a b c) (node3 d e f) (node2 g h) m2",247],["appendTree3 m1 (node3 a b c) (node2 d e) (node2 f g) m2",266],["case g of",267],["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622],["Assign a (Sync g []) $ \\ () ->",1030],["g <- goal",513],["-- | Legacy upload protocol for media (e.g. \\\"media\\\", \\\"multipart\\\").",406]],"useCount":78259},{"word":"generate","context":[["-- We generate the instance",64],["generate",80],["--     Don't generate \"common\" symbols - these are unwanted",60],["| HscNothing     -- ^ Don't generate any code.  See notes above.",60],["We decide (x::alpha), and generate an implication like",58],[", generate",80],["-- but we don't generate any code for newtypes",83],["{-# INLINE generate #-}",114],["-- Enter error recovery: generate an error token,",134],["-- file pragma). This allows us to generate better warnings.",58]],"useCount":10821},{"word":"generated","context":[["-- WARNING: The next block of code was automatically generated by",2252],["Warning   : this file is machine generated - do not modify.",1354],["-- Auto-generated: the actual test selection needs to be manually placed into",196],["-- the generated parser quite a bit.",132],["{- This module was generated from data in the Kate syntax",119],["Description :  generated Typeable, ShATermConvertible instances",94],["-- Controls the base of generated URLs. For more information on modifying,",93],["--  @generated",89],["-- with ghci, but .c files can depend on .h files generated by ghc by ffi",86],["-- Stability   : auto-generated",9174]],"useCount":20152},{"word":"get","context":[["i <- get",556],["x2 <- get",2522],["get = do",2425],["st <- get",1963],["get bh = do",1689],["s <- get",1614],["x3 <- get",1529],["get",1120],["x4 <- get",907],["0 -> do x1 <- get",574]],"useCount":84390},{"word":"getArgs","context":[["[inpFile] <- getArgs",155],["args <- getArgs",4806],["import System.Environment (getArgs)",2760],["main = do args <- getArgs",376],["argv <- getArgs",331],["import System.Environment(getArgs)",278],["import           System.Environment (getArgs)",228],["import System.Environment (getArgs, getProgName)",213],["import System.Environment ( getArgs )",208],["do args <- getArgs",162]],"useCount":12903},{"word":"getDynFlags","context":[["= do  { dflags <- getDynFlags",345],["getDynFlags = lift getDynFlags",145],["do { dflags <- getDynFlags",162],["do dflags <- getDynFlags",367],["= do { dflags <- getDynFlags",798],["; dflags <- getDynFlags",816],["= do dflags <- getDynFlags",1110],["dflags <- getDynFlags",5139],["{ dflags <- getDynFlags",134],["getDynFlags = lift getDynFlags",145]],"useCount":11789},{"word":"getIState","context":[["= do ist <- getIState",302],["else do ist <- getIState",48],["inew <- getIState",47],["(do ist <- getIState",51],["do ist <- getIState",425],["ist <- getIState",1195],["= do i <- getIState",1227],["i <- getIState",1336],["(\\e -> getIState >>= iRenderError . flip pprintErr e)",52],["do i <- getIState",306]],"useCount":8390},{"word":"gets","context":[["beamer <- writerBeamer `fmap` gets stOptions",70],["incremental <- gets stIncremental",46],["localSymbols <- gets compileStateLocalSymbols",46],["-- above: Even the first block gets a label, because with branch-chain",53],["register <- gets currentRegister",53],["opts <- gets stOptions",213],["plain <- gets stPlain",137],["ws <- gets windowset",107],["gets,",72],["-- don't switch it off in --make mode, else *everything* gets",60]],"useCount":7540},{"word":"ghc","context":[["-- Portability: ghc",73],["-- | Given something like /usr/local/bin/ghc-6.6.1(.exe) we try and find a",80],["-- with ghci, but .c files can depend on .h files generated by ghc by ffi",86],["| ghcVersion < Version [7,2] [] -- ghc-7.2+ does not make _stub.o files",87],["-- > -- stack --install-ghc runghc --package turtle",104],["-- |Install for ghc, .hi, .a and, if --with-ghci given, .o",65],["-- Portability : ghc",316],["-- Maintainer  :  cvs-ghc@haskell.org",444],["--     http://hackage.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#TabsvsSpaces",195],["-- Portability :  portable (depends on ghc)",97]],"useCount":15857},{"word":"given","context":[["-- Seq-ing.  If the --strict flag is given, then Happy emits",129],["-- the given function.",118],["-- | Warp settings for the given foundation value.",105],["-- | Create a mutable vector of the given length (0 if the length is negative)",103],["-- | Grow a vector by the given number of elements. The number must be",102],["-- | Evaluate a state computation with the given initial state",94],["-- element in the given 'ByteString' which is equal to the query",88],["-- | Evaluate a computation with the given initial state and environment,",84],["Now, given a tree (the argument to an CmmLoad) that references memory,",76],["-- |Install for ghc, .hi, .a and, if --with-ghci given, .o",65]],"useCount":27328},{"word":"global","context":[[": \"-global-package-db\"",64],["buildTag              :: String,      -- ^ The global \\\"way\\\" (e.g. \\\"p\\\" for prof)",60],["\"global\" :>",125],["++ \" is ['global'], ['global', 'user'], or ['global', $sandbox],\"",49],["resp <- liftIO $ callGithubApi global",50],["die $ \"If the global package db is specified, it must be \"",56],["-- See Note [Checking for global Ids]",58],["{-! global: GetRange !-}",105],[", (Flag GlobalPackageDB, ([],[\"global\"]),",87],["-> [DumpPackage () ()] -- ^ global packages",71]],"useCount":9876},{"word":"gmail","context":[["Maintainer  : aovieth@gmail.com",199],["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622],["-- Maintainer  :  Sven Panne <svenpanne@gmail.com>",2262],["-- Maintainer  :  Edward Kmett <ekmett@gmail.com>",1050],["-- Maintainer  :  erkokl@gmail.com",435],["-- Maintainer  : Ian-Woo Kim <ianwookim@gmail.com>",307],["-- Maintainer:   peter.trsko@gmail.com",187],["-- Maintainer : David Sorokin <david.sorokin@gmail.com>",240],["-- Maintainer  : Simon Meier <iridcode@gmail.com>",269],["Maintainer  :  mikkonecny@gmail.com",273]],"useCount":25325},{"word":"go","context":[["STRICT_1_OF_2(go)",216],["go = do",933],["where go",2262],["= go ty",163],["go",920],["-- See Note: Type of local 'go' function",295],["go [] = []",275],["go _ [] = []",267],["{-# INLINE go #-}",249],["runStackTGlobal manager (lcConfig lc) go $",246]],"useCount":81026},{"word":"group","context":[["group,                  -- :: ByteString -> [ByteString]",62],["-- > group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]",69],["import Data.List (group)",77],["-- group.",84],["-- | The name of the group.",86],["%group",1164],["bracket p startPrec . group . align . hang 2 $",110],[", group",109],["import Data.List hiding (group)",97],["-- | The 'groupBy' function is the non-overloaded version of 'group'.",91]],"useCount":13558},{"word":"h","context":[["hFlush h",319],["(\\ s h x ->",4146],["#include \"HsVersions.h\"",3904],["case h of",1355],["hClose h",1241],["h <- getByte bh",1036],["#include \"MachDeps.h\"",450],["hSetEncoding h utf8",317],["return h",344],["#include <bindings.dsl.h>",418]],"useCount":62106},{"word":"handle","context":[["handle",62],["handle <- connectTo \"127.0.0.1\" $ PortNumber $ fromIntegral port",64],["loop handle opt val_ctx env hist histOld index flagC flagH flagT flagS num",69],["handle,",70],[", _svcHandle       = handle",132],["handle :: Status",132],["hFlush handle",144],["handle = jsonError statusSuccess service'",70],["hClose handle",484],["contents <- hGetContents handle",146]],"useCount":10335},{"word":"hang","context":[["hang, punctuate,",45],["bracket p startPrec . group . align . hang 2 $",110],["= hang (nest 2 (ppr_lexpr expr) <+> dcolon)",67],["P.hang",62],["enclose lparen rparen . group . align . hang 2 $",54],["showTreeWith hang wide t",52],["| hang      = (showsTreeHang wide [] t) \"\"",52],["hang pp_fun 2 (sep pp_tys)",51],["errorMsg dflags $ hang (text \"Warning:\") 9 $",50],["= hang herald",48]],"useCount":9752},{"word":"happy_var_1","context":[["(happy_var_1",2444],["(HappyTerminal happy_var_1)",1054],["(HappyTerminal happy_var_1) `HappyStk`",733],["(happy_var_2 : happy_var_1",144],["= case happyOutTok happy_x_1 of { happy_var_1 ->",165],["(happy_var_3 : happy_var_1",241],["(sL (comb2 happy_var_1 happy_var_3) (unLoc happy_var_2)",242],["= happyThen (case happyOutTok happy_x_1 of { happy_var_1 ->",363],["([happy_var_1]",582],["=  case happyOutTok happy_x_1 of { happy_var_1 ->",716]],"useCount":19124},{"word":"has","context":[["-- The substitution has to satisfy the invariants described in",91],["| has (hasStatus 504) e = Just \"gateway_timeout\"",86],["| has (hasStatus 502) e = Just \"bad_gateway\"",86],["| has (hasStatus 429) e = Just \"too_many_requests\"",86],["-- Don't inline any functions from the template.  GHC has a nasty habit",132],["| has (hasCode \"ThrottlingException\" . hasStatus 400) e =",198],["| has (hasStatus 503) e = Just \"service_unavailable\"",198],["| has (hasCode \"Throttling\" . hasStatus 400) e = Just \"throttling\"",198],["| has (hasStatus 500) e = Just \"general_server_error\"",198],["| has (hasStatus 509) e = Just \"limit_exceeded\"",198]],"useCount":32645},{"word":"haskell","context":[["-- Maintainer  :  libraries@haskell.org",198],["-- Maintainer  :  libraries@haskell.org",1918],["-- Maintainer  :  cabal-devel@haskell.org",1141],["-- Maintainer  :  cvs-ghc@haskell.org",444],["-- mode: haskell",298],["-- Maintainer  :  haddock@projects.haskell.org",218],["<http://hackage.haskell.org/package/lens/docs/Control-Exception-Lens.html Control.Exception.Lens>.",199],["--     http://hackage.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#TabsvsSpaces",195],["-- Maintainer  :  ffi@haskell.org",180],["-- Maintainer  :  duncan@community.haskell.org",148]],"useCount":10408},{"word":"have","context":[["++ \" should have been handled earlier!\")",350],["-- actually making the request, and provides an error response. If you have the",163],["-- have to make a corresponding change here.",130],["Suppose we have",344],["-- actually making the request, and provides an error response. If you have",291],["-- starts running, such as database connections. Every handler will have",281],["-- place to put your migrate statements to have automatic database",208],["Many operations have the ability to filter results on the server side. See the",206],["Operations that have an 'AWSPager' instance can transparently perform subsequent",206],["this have an additional note in the documentation.",206]],"useCount":56510},{"word":"hay","context":[["-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>",13622]],"useCount":13622},{"word":"head","context":[["head <- endBy parseExpr spaces",90],["H.head $ do",285],["{-# INLINE head #-}",189],[", head",177],["(head (giveTree [tree] [\"root\",\"http\"]))",141],["import Prelude hiding (head)",93],["let serveraddr = head addrinfos",101],["<head>",140],["if null input then \"end of file\" else show (head input)",135],["return $ DottedList head tail",113]],"useCount":13680},{"word":"header","context":[["header :: String",115],["(_,_,errs) -> ioError (userError (concat errs ++ usageInfo header options))",59],[", header",165],["header =",107],["{ header :: MessageHeader",139],["-- Override the above two destinations when a Referer: header is present",67],["appIpFromHeader           <- o .: \"ip-from-header\"",65],["header",119],["-- ^ Get the IP address from the header when logging. Useful when sitting",64],["-- to the object header, so profiling objects cannot be linked with",60]],"useCount":8634},{"word":"help","context":[["<data engine=\"com.sun.java.help.search.DefaultSearchEngine\">",652],["<type>javax.help.FavoritesView</type>",621],["help",246],["<type>javax.help.TOCView</type>",196],["help :: IO ()",110],["<type>org.zaproxy.zap.extension.help.ZapTocView</type>",598],[", Option \"h\" [\"help\"]",100],["<helpaction>javax.help.SeparatorAction</helpaction>",93],["<type>javax.help.IndexView</type>",678],["<type>javax.help.SearchView</type>",721]],"useCount":12534},{"word":"here","context":[["-- Import all relevant handler modules here.",302],["-- of settings which can be configured by overriding methods here.",286],["-- access to the data present here.",282],["-- You can add other plugins like BrowserID, email or OAuth here",173],["-- have to make a corresponding change here.",130],["let r = fn stk in  -- it doesn't hurt to always seq here...",129],["matches [here|",126],["|] [here|",126],["\"here\", 38, 0, 4), (",125],["-- The $!! here prevents a space leak on reloading.",100]],"useCount":23437},{"word":"hiding","context":[["import Prelude hiding (catch)",882],["import Prelude hiding (lookup)",855],["import Prelude hiding (id, (.))",355],["import Prelude hiding (pi)",249],["import Text.ParserCombinators.Parsec hiding (spaces)",260],["import Idris.Core.Elaborate hiding (Tactic(..))",277],["import Prelude hiding ((.), id)",290],["import Prelude hiding (FilePath)",310],["import Control.Applicative hiding (Const)",316],["import Control.Applicative hiding (empty)",338]],"useCount":24886},{"word":"hs","context":[["-- src/Util/GenerateHtmlCombinators.hs:199",714],["-- src/Util/GenerateHtmlCombinators.hs:249",1024],["{-# LINE 1 \"templates/GenericTemplate.hs\" #-}",487],["-- src/Util/GenerateSvgCombinators.hs:220",266],["hs <- get_holes",675],["-- See Note [GHC Formalism] in coreSyn/CoreLint.hs",259],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["-- of the call to mkYesodData which occurs in Foundation.hs. Please see the",205],["-- declared in the Foundation.hs file.",167],["-- a separate domain. Please see the staticRoot setting in Settings.hs",159]],"useCount":24156},{"word":"hsc_env","context":[["let ic = hsc_IC hsc_env",166],["if isObjectTarget (hscTarget (hsc_dflags hsc_env))",120],["this_pkg = thisPackage (hsc_dflags hsc_env)",126],["hsc_env <- GHC.getSession",173],["= runTcInteractive hsc_env $",198],["hsc_env <- getSession",797],["let dflags = hsc_dflags hsc_env",678],["dflags = hsc_dflags hsc_env",664],["hsc_env <- getHscEnv",657],["liftIO $ debugTraceMsg (hsc_dflags hsc_env) 5",232]],"useCount":23587},{"word":"html","context":[["<html>",130],["route $ setExtension \"html\"",211],[">>= loadAndApplyTemplate \"templates/default.html\" defaultContext",161],["<http://hackage.haskell.org/package/lens/docs/Control-Exception-Lens.html Control.Exception.Lens>.",199],["--   http://code.google.com/speed/page-speed/docs/request.html#ServeFromCookielessDomain",129],["route   $ setExtension \"html\"",127],["match \"index.html\" $ do",124],[">>= loadAndApplyTemplate \"templates/default.html\" indexCtx",103],["-- <http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html IAM Identifiers>",95],["H.html $ do",95]],"useCount":8316},{"word":"http","context":[["<http://hackage.haskell.org/package/lens/docs/Control-Exception-Lens.html Control.Exception.Lens>.",199],["--     http://hackage.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#TabsvsSpaces",195],["-- http://www.yesodweb.com/book/routing-and-handlers",149],["(head (giveTree [tree] [\"root\",\"http\"]))",141],["-- http://www.yesodweb.com/book/persistent/",140],["-- <http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html IAM Identifiers>",95],["-- http://www.yesodweb.com/book/handler",102],["\"http://java.sun.com/products/javahelp/helpset_2_0.dtd\">",108],["[ mkAttr qn18 [ mkText \"http://relaxng.org/ns/structure/1.0\" ]",122],["--   http://code.google.com/speed/page-speed/docs/request.html#ServeFromCookielessDomain",129]],"useCount":9596},{"word":"https","context":[["'[\"https://www.googleapis.com/auth/dfatrafficking\"]",186],["'[\"https://www.googleapis.com/auth/cloud-platform\"]",118],["\"https://www.googleapis.com/auth/compute\",",115],["\"https://www.googleapis.com/auth/compute.readonly\"]",107],["-- https://github.com/yesodweb/yesod/wiki/Overriding-widgetFile",105],["-- see: https://github.com/yesodweb/yesod/wiki/Overriding-approot",93],["'[\"https://www.googleapis.com/auth/androidenterprise\"]",89],["\"https://www.googleapis.com/auth/compute\"]",130],["-- https://github.com/yesodweb/yesod/wiki/Sending-email",214],["'[\"https://www.googleapis.com/auth/cloud-platform\",",578]],"useCount":8415},{"word":"i","context":[["i <- get",556],["case i of",1591],["i <- getIState",1336],["= do i <- getIState",1227],["= do i <- getWord8",733],["let opts = idris_options i",662],["return i",623],["prt i e = case e of",548],["case cclass i of",606],["putIState $ i { idris_options = opt' }",495]],"useCount":139986},{"word":"id","context":[["id",553],["| otherwise = id",577],["else id)",242],["<*> (o .:? \"id\")",288],["import Prelude hiding ((.), id)",290],["Nothing -> id",319],["import Prelude hiding (id, (.))",355],["else id",361],["(LHsExpr id)",379],["id <- getNextId",567]],"useCount":65985},{"word":"ids","context":[["JMP_TBL (OpReg tableReg) ids ReadOnlyData lbl",44],["genSwitch dflags arg ids",55],["| (name,ty) <- ids ]]",38],["| otherwise = map (jumpTableEntry dflags) ids",41],["ids -> do",43],["return (do_premap ids",108],["ids <- allImportDirs",82],["dsCmd ids local_vars stack_ty res_ty",72],["-- Suppress unique ids on variables.",57],["BCTR ids (Just lbl)",50]],"useCount":7611},{"word":"if","context":[["#if MIN_VERSION_base(4,8,0)",851],["#if (defined(ghcjs_HOST_OS) && defined(USE_JAVASCRIPTFFI)) || !defined(USE_WEBKIT)",2273],["#if !MIN_VERSION_base(4,8,0)",1493],["#if __GLASGOW_HASKELL__ >= 700",1485],["if exists",1446],["#if __GLASGOW_HASKELL__ < 710",1351],["if (objectIsNull qobj)",916],["#if __GLASGOW_HASKELL__ < 709",773],["#if __GLASGOW_HASKELL__",860],["if (objectIsNull x0obj)",6642]],"useCount":206315},{"word":"iface","context":[["-- In one-shot mode we don't have the old iface until this",60],["minf_iface     = Just iface,",69],["hm_iface    = iface,",195],["-- This invariant is used in LoadIface.loadDecl (see note [Tricky iface loop])",53],["hscWriteIface dflags iface changed summary",89],["\"--show-iface\"))",48],["let iface = GHC.modInfoIface $ fromJust mb_mod_info",49],["when (isNothing iface)",49],["return iface",54],["Just iface | not (recompileRequired recomp_reqd) ->",58]],"useCount":8277},{"word":"ifdef","context":[["#ifdef GHCI",2242],["#ifdef __GLASGOW_HASKELL__",1576],["#ifdef WINDOWS",223],["#ifdef GENERICS",197],["#ifdef TEST",399],["#ifdef DEBUG",713],["#ifdef __HUGS__",298],["#ifdef ghcjs_HOST_OS",276],["#ifdef mingw32_HOST_OS",1386],["#ifdef USE_REPORT_PRELUDE",241]],"useCount":17651},{"word":"iis","context":[["6 -> err as iis",315],["47 -> err as iis",315],["8 -> err as iis",315],["1 -> err as iis",330],["2 -> err as iis",330],["3 -> err as iis",333],["0 -> err as iis",336],["76 -> err as iis",318],["5 -> err as iis",330],["4 -> err as iis",330]],"useCount":8586},{"word":"implicit","context":[["{-# OPTIONS -fno-implicit-prelude #-}",39],["-- See Note [Overview of implicit CallStacks]",89],["| IPSkol [HsIPName]   -- Binding site of an implicit parameter",38],["-- (including implicit kind variables)",89],["{-# OPTIONS_GHC -fno-implicit-prelude #-}",73],["-- -stubdir D adds an implicit -I D, so that gcc can find the _stub.h file",68],["-- | Are all implicit imports required to be safe for this Safe Haskell mode?",60],["-- override the implicit Prelude import you can say 'import Prelude ()'",49],["flagGhciSpec \"implicit-import-qualified\"    Opt_ImplicitImportQualified,",46],["| otherwise = [\"import Prelude -- implicit\"]",45]],"useCount":6983},{"word":"import","context":[["import System.IO",10925],["import Data.Char",8422],["import qualified Data.Map as M",9307],["import Data.Monoid",9902],["import qualified Data.Text as T",12934],["import Data.Maybe",18406],["import Control.Applicative",19029],["import Data.List",19122],["import Control.Monad",26938],["import qualified Data.Map as Map",11760]],"useCount":1603603},{"word":"imported","context":[["labels  [] = text \"-- not currently imported\"",51],["-- imported modules, but in multi-module mode we look for source files",60],["-- ^ Was this module imported as a safe import",58],["text \"imported module \" <> quotes (ppr mod) <>",56],["--    from an imported module.  This will fail if no code has been generated",60],["-- See Note [Bangs on imported data constructors] in MkId",54],["<> text \": Can't be safely imported!\"",82],["-- This module is intended to be imported @qualified@, to avoid name",104],["((\"-- imported via \"++) . intercalate \", \"",51],["-- These modules are intended to be imported qualified, to avoid name",111]],"useCount":7241},{"word":"imports","context":[["{-# OPTIONS_GHC  -fno-warn-unused-imports #-}",109],["-- local imports",108],["-- imports",168],["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",96],["case iiModules imports of",98],["{-# OPTIONS -fno-warn-unused-imports #-}",94],["{-# OPTIONS_GHC -fno-warn-unused-imports    #-}",2618],["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",12002],["imports <- GHC.getContext",196],["Portability :  non-portable (imports Logic.Logic)",188]],"useCount":24036},{"word":"in","context":[["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["in  makeStream req",690],["-- Redistribution and use in source and binary forms, with or without",846],["-- Note that in the presence of multiple contexts with different capabilities,",935],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["in",20627],["in do",2279],["in __result_ )",2044],["-- Base interface functions are in:",1344],["Redistribution and use in source and binary forms, with or without",1376]],"useCount":358241},{"word":"include","context":[["#include \"HsUnix.h\"",150],["#include \"HsBaseConfig.h\"",110],["#include \"../includes/MachDeps.h\"",134],["#include <windows.h>",140],["#include \"impossible.h\"",141],["#include \"gadts.h\"",181],["#include \"nativeGen/NCG.h\"",185],["#include <bindings.dsl.h>",418],["#include \"MachDeps.h\"",450],["#include \"HsVersions.h\"",3904]],"useCount":16005},{"word":"index","context":[["-- | /O(m+min(n1,n2))/ For each index @i@ from the index vector and the",112],["-- | /O(m+min(n1,n2))/ For each index @i@ from the index vector and the",112],["=> GLuint -- ^ @index@.",281],[", index",185],["{-# INLINE index #-}",315],["-> GLuint -- ^ @index@.",144],["<data>index.xml</data>",612],["match \"index.html\" $ do",124],["item self index",109],["%index",1296]],"useCount":20578},{"word":"info","context":[["i = info p idm",99],["info = noCafIdInfo `setInlinePragInfo` alwaysInlinePragma",98],["case info of",431],["where t' = untypeType (infoType info) (infoSize info)",305],["info verbosity \"Building C Sources...\"",111],["where t' = untypeType (infoType info) (infoSize info)",305],["-- Maintainer  :  Esa Ilari Vuokko <ei@vuokko.info>",102],["info verbosity \"Linking...\"",111],["info <- readIORef infoRef",114],["processTacticDecls info newDecls",197]],"useCount":31696},{"word":"information","context":[["-- information.",309],["--  See end of this file for licence information.",148],["-- For more information, see",201],["-- You can find more information on persistent and how to declare entities",139],["-- ** Length information",138],["-- costly transference of cookies on static files. For more information,",130],["-- distributed with this work for additional information",129],["-- give a reasonable default. Instead, the information is available on the",129],["-- For more information on modifying behavior, see:",105],["-- Controls the base of generated URLs. For more information on modifying,",93]],"useCount":16387},{"word":"inline","context":[["-- Don't inline any functions from the template.  GHC has a nasty habit",132],["#include \"inline.h\"",49],["-- | Only inline memset if it generates no more than this many",54],["-- | Max size, in bytes, of inline array allocations.",54],["-- | Only inline memcpy if it generates no more than this many",54],["-- E.g. 450 is not enough in 'fulsom' for Interval.sqr to inline",56],["-- inline",59],["inline",72],["-- create, it is not inlined, so we inline it manually.",89],["-- of deciding to inline happyGoto everywhere, which increases the size of",132]],"useCount":10894},{"word":"input","context":[["input <- readFile inpFile",153],["if null input then \"end of file\" else show (head input)",135],["if null input then \"end of file\" else show (head input)",135],["readExpr input = case parse parseExpr \"lisp\" input of",141],["readExpr input = case parse parseExpr \"lisp\" input of",141],["case alexGetByte input of",124],["highlight input = evalState (mapM parseSourceLine $ lines input) startingState",119],["input <- getLine",230],["-- /The precondition (input list is ascending) is not checked./",233],["case input of",343]],"useCount":18559},{"word":"insert","context":[["LT.insert (tnum tIssuer) tIssuer $",97],["LT.insert (tnum tSecurityDesc) tSecurityDesc $",95],["{-# INLINABLE insert #-}",103],["LT.insert (tnum tSecurityID) tSecurityID $",96],["LT.insert (tnum tSymbolSfx) tSymbolSfx $",97],["_ <- insert p",99],["-- will insert the pair (key, value) into @mp@ if key does",139],["insert,",171],["{-# INLINE insert #-}",173],[", insert",803]],"useCount":15364},{"word":"inside","context":[["-- Ignore warnings inside the thing inside;",43],["-- Sample usage (inside a Widget):",74],["-- See Note [Type-checking inside the knot] in TcHsType",69],["-- if we go deeper when we go inside them then we get ugly things",68],["-- If we're working inside a sandbox and the user has set the -w option, we",65],["; id_info <- tcIdInfo False {- Don't ignore prags; we are inside one! -}",62],["-- call functions inside a module.  In HscNothing mode we also do it,",59],["-- A lock file is created inside the given directory.  Currently,",39],["-- Ignore warnings inside the thing inside;",43],["-- opposed to its String representation, \"\\r\") inside a",51]],"useCount":8359},{"word":"inst","context":[["\\\\ (inst :: Forall (Pure m) :- Pure m a)",51],["-- and the home-pkg inst env (includes module being compiled)",50],["uses_disk = Instance.usesLocalStorage inst",51],["int_p = Node.removePri old_p inst",52],["let iname = Instance.idx inst",56],["forAll (genInstanceSmallerThanNode node) $ \\inst ->",58],["-> TcM (TcGblEnv,            -- The full inst env",62],["int_s = Node.removeSec old_s inst",65],["%inst",1296],["evacOneNodeOnly nl il inst gdx avail_nodes",50]],"useCount":7645},{"word":"install","context":[["-- | Helper for build and install commands",46],["-- This is a higher level wrapper used internally in cabal-install.",44],[", \"local-install-root\"",44],[", \"snapshot-install-root\"",44],["install,",52],["-- install-time depending on the available gcc version, and even",60],["-> FilePath  -- ^install location for dynamic libraries",61],["\"Do not install anything, only print what would be installed.\"",66],["-> FilePath  -- ^install location",82],["-- > -- stack --install-ghc runghc --package turtle",104]],"useCount":7106},{"word":"installed","context":[["& Apt.installed [\"ssh\"]",44],["-- installed on the host OS.",78],["\"Do not install anything, only print what would be installed.\"",66],[", T.pack $ versionString installed",66],["info verbosity \"Reading installed packages...\"",51],["available = mapMaybe goodPackage installed",50],["-- for finding out what packages are already installed. Configuring involves",47],["`requires` installed",85],["-- what packages are installed.",47],["installed :: Property NoInfo",47]],"useCount":8993},{"word":"instance","context":[["instance YesodPersist App where",228],["instance GoogleRequest",217],["instance YesodAuth App where",212],["instance NFData",242],["-- This instance is required to use forms. You can modify renderMessage to",243],["instance (",281],["instance RenderMessage App FormMessage where",288],["instance Yesod App where",304],["instance FromJSON",338],["instance",2327]],"useCount":144969},{"word":"instances","context":[["Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible",94],["Description :  generated Typeable, ShATermConvertible instances",94],["Portability :  non-portable(overlapping Typeable instances)",102],["-- instances",110],["-- instances.",203],["-- * Arbitrary instances",89],["{-# OPTIONS -fallow-overlapping-instances -fglasgow-exts -fallow-undecidable-instances #-}",78],["{-# OPTIONS -fallow-overlapping-instances -fglasgow-exts -fallow-undecidable-instances #-}",78],["instances",77],["-- instances for Prelude types",64]],"useCount":17919},{"word":"instead","context":[["= Opt_DumpToFile                     -- ^ Append dump output to files instead of stdout.",57],["-- instead.",191],["-- 'enumFromStepN' instead.",111],["do { deprecate $ \"use -freduction-depth=\" ++ show n ++ \" instead\"",80],["-- waiting for data to become available, instead it returns only whatever data",58],["-- | MsgDoc output action: use \"ErrUtils\" instead of this if you can",58],["-- They should have their own fields instead.",60],["-- With 'indexM', copying can be implemented like this instead:",61],["-- the first argument, instead of a tupling function.  For example,",64],["--TODO: this should work using exclude constraints instead",69]],"useCount":9815},{"word":"instr","context":[["=> LiveCmmDecl statics instr",65],[":: Instruction instr",488],["= case instr of",185],["-> LiveCmmDecl statics instr",111],[":: (FR freeRegs, Outputable instr, Instruction instr)",70],[":: (FR freeRegs, Outputable instr, Instruction instr)",70],[":: (Outputable instr, Instruction instr)",68],[":: (Outputable instr, Instruction instr)",68],["-> instr",68],["-> NcgImpl statics instr jumpDest",65]],"useCount":7368},{"word":"int","context":[[", TyCon \"int\" []",1089],[", ( \"malloc_0\" , TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ] )",129],[", ( \"malloc_0\" , TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ] )",129],[", ( \"mint_0\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ] )",137],[", ( \"mchar_0\" , TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ] )",137],[", TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ]",193],[", TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ]",193],["[ TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ]",259],["[ TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ]",259],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ]",904]],"useCount":12037},{"word":"intercalate","context":[[", intercalate \"\\n\"",67],["T.intercalate",60],["intercalate \"/\" (map wayDesc theWays)))",56],["++ intercalate \", \"",70],[", intercalate",97],["-- > intercalate [c] . split c == id",59],["import Data.List(intercalate)",105],["import Data.List ( intercalate )",142],["import           Data.List (intercalate)",221],["import Data.List (intercalate)",1586]],"useCount":8299},{"word":"interface","context":[["-- Base interface functions are in:",1344],["-- * Basic interface",167],["-- interface.",146],["-- ^ Host/interface the server should bind to.",64],["-- Basic interface",61],["-- save the interface that comes back from checkOldIface.",60],["-- the \"Finder\": in one-shot mode we look for interface files for",60],["-> Maybe ModIface  -- ^ old interface, if we have one",86],["-- | The ID of the network interface.",88],["-- NOT STRICT!  we read this field lazily from the interface file",116]],"useCount":14054},{"word":"into","context":[["-- | /O(n)/ Copy an immutable vector into a mutable one. The two vectors must",122],["-- Take -o into account if present",83],["-- ** Breaking into many substrings",87],["-- push the resulting state into the waiting queue",102],["-- will insert the pair (key, value) into @mp@ if key does",139],["-- split these actions into two functions and place them in separate files.",139],["-- Auto-generated: the actual test selection needs to be manually placed into",196],["-- | Settings are centralized, as much as possible, into this file. This",197],["-- We break up the default layout into two components:",244],["-- TODO: do we need to put hs-boot files into place for mutually recursive",86]],"useCount":30594},{"word":"is","context":[["-- | Identifies what kind of resource this is. Value: the fixed string",316],["-- default-layout-wrapper is the entire page. Since the final",243],["-- This file is part of grid.",472],["-- grid is a game written in Haskell",472],["Warning   : this file is machine generated - do not modify.",1354],["-- Otherwise, it is 'UnauthorizedOperation'.",291],["-- The above warning supression flag is a temporary kludge.",288],["-- This is where we define all of the routes in our application. For a full",283],["-- default-layout is the contents of the body tag, and",244],["-- This instance is required to use forms. You can modify renderMessage to",243]],"useCount":310168},{"word":"ist","context":[["let ctxt = tt_ctxt ist",111],["reifyApp ist t [t']",107],["ist <- getIState",1195],["ist <- get",446],["do ist <- getIState",425],["= do ist <- getIState",302],["elab ist toplevel ERHS [] (sMN 0 \"tac\") tm",194],["= case lookupTy n (tt_ctxt ist) of",175],["let ppo = ppOptionIst ist",133],["put (ist { lastParse = Just n })",110]],"useCount":21610},{"word":"it","context":[["let r = fn stk in  -- it doesn't hurt to always seq here...",129],["-- otherwise it emits",129],["\"error\".  In fact, it can cause some bogus parses, so I've disabled it",132],["\"error\".  In fact, it can cause some bogus parses, so I've disabled it",132],["it \"correctly computes the first 20 elements\" $",182],["-- The code in this file, and the program it is a part of, is",224],["-- you can redistribute it and/or modify it under the terms of",224],["-- you can redistribute it and/or modify it under the terms of",224],["-- While working on this module you are encouraged to remove it and",254],["-- Otherwise, it is 'UnauthorizedOperation'.",291]],"useCount":127841},{"word":"item","context":[["-- treat it as a list item, though it's not valid xhtml...",48],["then the inert item must Given",58],["\\item",1281],["-- parse raw text for one list item, excluding start marker and continuations",66],["item ::",67],["foreign import javascript unsafe \"$1[\\\"item\\\"]($2)\" js_item ::",85],["If the work-item is Given,",87],["case item of",87],["item self index",109],["item $ do",273]],"useCount":10449},{"word":"its","context":[["-- | /O(n)/ Left fold (function applied to each element and its index)",64],["--     * Neither the name of the ERICSSON AB nor the names of its contributors",204],["--   * Neither the name of the <ORGANIZATION> nor the names of its contributors",94],["-- element and its index)",93],["{-# UNPACK #-} !Int     -- its number",77],["-- | /O(n)/ Right fold (function applied to each element and its index)",64],["-- | count returns the number of times its argument appears in the ByteString",63],["-- and must ensure that it holds only values from its logical range.",62],["-- and its index)",64],["-- | /O(n)/ Apply a function to every element of a vector and its index",71]],"useCount":22722},{"word":"j","context":[["happyGoto action j tk st = action j j tk (HappyState action)",85],["happyGoto action j tk st = action j j tk (HappyState action)",85],["VM.unsafeWrite mv 9 (toJSON j)",92],["appendTree4 m1 (node3 a b c) (node3 d e f) (node2 g h) (node2 i j) m2",114],["happyMonad2Reduce k nt fn j tk st sts stk =",115],["happyReduce k nt fn j tk st sts stk",129],["happyAccept j tk st sts (HappyStk ans _) =",130],["happyMonadReduce k nt fn j tk st sts stk =",132],["happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))",147],["happySeq r (action nt j tk st sts (r `HappyStk` stk'))",234]],"useCount":10762},{"word":"just","context":[["-- just using a list of Strings, we use a type that allows us to distinguish",61],["-- not copy the substrings, it just constructs new 'ByteStrings' that",65],["-- a copy of just the elements that belong to the slice and allows the huge",64],["-- If the current token is (1), it means we've just accepted a partial",64],["bh <- openBinMem (3*1024) -- just less than a block",65],["\"Print just the version number\"",65],["-- match when checking the right context, just",73],["-- although this is used for more than just that failure case.",76],["-- From now on, we just use the bits we need.",83],["-- we don't want a verbose help text list so we just show a generic one:",88]],"useCount":25142},{"word":"k","context":[["case k of",293],["happyMonad2Reduce k nt fn j tk st sts stk =",115],["-> k",123],["-- > let f k x = if x == \"a\" then Just ((show k) ++ \":new a\") else Nothing",125],["-- > let f k x = if x == \"a\" then Just ((show k) ++ \":new a\") else Nothing",125],["happyReduce k nt fn j tk st sts stk",129],["happyMonadReduce k nt fn j tk st sts stk =",132],["drop_stk = happyDropStk k stk",147],["return k",149],["gunfold k z c = case constrIndex c of",244]],"useCount":76961},{"word":"k1","context":[["data (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",57],["k1 = typeKind ty1",49],["= (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",54],["= do { k1 <- lintType t1",58],["; let f k1 k2 = repKApp kcon k1 >>= flip repKApp k2",42],["repKApp (MkC k1) (MkC k2) = rep2 appKName [k1, k2]",42],["repKApp (MkC k1) (MkC k2) = rep2 appKName [k1, k2]",42],["repTSig t1 k1",43],["; let f k1 k2 = repKApp kcon k1 >>= flip repKApp k2",42],["k1 <- repLKind k",42]],"useCount":6918},{"word":"key","context":[["-- not exist in the map. If the key does exist, the function will",140],["-- > let f key new_value old_value = (show key) ++ \":\" ++ new_value ++ \"|\" ++ old_value",160],["-- deleted. If it is (@'Just' y@), the key @k@ is bound to the new value @y@.",100],["-- > let f key new_value old_value = (show key) ++ \":\" ++ new_value ++ \"|\" ++ old_value",160],["=> ByteString -- ^ key",207],["-- | /O(n)/. Build a map from a list of key\\/value pairs where",104],["return key",108],["-- will insert the pair (key, value) into @mp@ if key does",139],["-- will insert the pair (key, value) into @mp@ if key does",139],["case key of",212]],"useCount":20412},{"word":"kind","context":[["(o .:? \"kind\" .!=",230],["case kind of",78],["-- | Identifies what kind of resource this is. Value: the fixed string",316],["-- See Note [The binders/kind/arity fields of a TyCon]",91],["-- (including implicit kind variables)",89],["-- the return kind)",89],["kind = tyVarKind tv",97],["tyConResKind :: Kind,             -- ^ Result kind",63],["instructions.  We peek at the arguments to decide what kind of",64],["-- | Returns free variables of types, including kind variables as",65]],"useCount":30217},{"word":"know","context":[["-- Please make sure you know what is going on when using 'mergeWithKey',",53],["-- For now, use ANSI bold on terminals that we know support it.",51],["let classes = [ \"commonlisp\"  -- as kate doesn't know emacs-lisp syntax",49],["-- we know nothing of precedence though",48],["-- an interrupt.  Ctrl-C is getting blocked somewhere, I don't know",46],["-- We must do things dynamically this way, because we often don't know",44],["-- | Stored on disk to know whether the flags have changed or any",54],["-- Packages.isDllName needs to know whether a call is within a",56],["-- know what to clean when an exception happens",60],["SevenZ -> error \"Don't know how to deal with .7z files on non-Windows\"",65]],"useCount":7917},{"word":"kx","context":[["go f kx x (Bin sy ky y l r) =",64],["goJust _ kx' x' Tip = Just (kx', x')",68],["case compare k kx of",100],["EQ -> case f kx x of",111],["case compare kx ky of",131],["Just x' -> Bin sx kx x' l r",71],["goJust _ kx' x' Tip = Just (kx', x')",68],["(a2,x') = f a1 kx x",80],["EQ -> Just (kx, x)",86],["where bmi = JustS kx",88]],"useCount":8759},{"word":"l","context":[["l <- getCurLoc",201],["qcl_QWidget l x sx = qcl_QWidget ((objectCast x):l) sx",132],["getBounds (STUArray l u _ _) = return (l,u)",138],["getBounds (STUArray l u _ _) = return (l,u)",138],["bounds (UArray l u _ _) = (l,u)",138],["bounds (UArray l u _ _) = (l,u)",138],["case srcInfoPoints l of",204],["return l",324],["Bin p m l r",365],["case l of",763]],"useCount":80742},{"word":"label","context":[["<label>Favorites</label>",567],["<label>Index</label>",510],["<label>Index</label>",510],["testCase label assertion = TestLabel label (TestCase assertion)",130],[", label",199],["<label>Search</label>",432],["<label>Search</label>",432],["<label>Favorites</label>",567],["<label>Contents</label>",606],["<label>Contents</label>",606]],"useCount":12459},{"word":"language","context":[["--  language: Haskell 98",154],["case language dflags of",96],["Teak synthesiser for the Balsa language",100],["-- | Full name of language.",119],["-- | Filename extensions for this language.",119],["extensionFlags = flattenExtensionFlags (language dfs) onoffs }",120],["{-# language MultiParamTypeClasses #-}",131],["{-# language FlexibleInstances #-}",137],["{-# language DeriveDataTypeable #-}",143],["{-# language TemplateHaskell #-}",145]],"useCount":7474},{"word":"last","context":[["updateState $ \\st -> st { synStPrevChar = last txt",119],["{-# INLINE last #-}",138],["(!), (!?), head, last,",57],["\"last\", 38, 0, 4), (",105],["-- > last (scanl f z xs) == foldl f z xs.",105],["head, last,",62],["-> (a -> IO b)  -- ^ computation to run last (\\\"release resource\\\")",78],["let CgGuts{ -- This is the last use of the ModGuts in a compilation.",83],["xs -> last xs",92],[", last",161]],"useCount":11261},{"word":"lbi","context":[["extras <- preprocessExtras comp lbi",140],["preprocessComponent pkg_descr comp lbi False verbosity suffixes",145],["case compilerFlavor (compiler lbi) of",181],["distPref = fromFlag $ configDistPref $ configFlags lbi",80],["then Internal.getHaskellObjects implInfo lib lbi",78],["replComponent verbosity pkg_descr lbi suffixes",78],["(ghcProg, _) <- requireProgram verbosity ghcProgram (withPrograms lbi)",81],["lbi <- getPersistBuildConfig distPref",95],["cid = compilerId (compiler lbi)",102],["comp = compiler lbi",96]],"useCount":13483},{"word":"lbl","context":[["lbl <- getNewLabelNat",189],["CallReference lbl",50],["BCTR ids (Just lbl)",50],["| not (externallyVisibleCLabel lbl) = empty",53],["where fn_imm = ImmCLbl lbl",54],["dynRef <- cmmMakeDynamicReference dflags DataReference lbl",93],["ptext (sLit \"\\t.indirect_symbol\") <+> pprCLabel platform lbl,",56],["ppr lbl",73],["GotSymbolOffset -> ppr lbl",57],["SymbolPtr       -> text \".LC_\" <> ppr lbl",57]],"useCount":9349},{"word":"left","context":[["AlignDefault -> \"left\"",73],["myFringe (Branch left right) = myFringe left",73],["myFringe (Branch left right) = myFringe left",73],["return $ Bool $ left `op` right",76],["= lift $ tfail $ Msg (\"No explicit types on left hand side: \" ++ show tm)",78],["-- left to right (cf. 'liftM2').",85],["subsequent requests to continue where a previous request left off is called",206],["-- ^ Updated 'DynFlags', left-over arguments, and",121],["-- Note that the implementation is /left-biased/ -- the elements of a",92],["\"left\", 11, 0, 4), (",105]],"useCount":14384},{"word":"len","context":[["\"len\", 11, 0, 4), (",132],["alex_scan_tkn user orig_input len input s last_acc =",85],["= p1 user in1 len in2 && p2 user in1 len in2",71],["AlexSkip  inp' len     -> go inp'",71],["(AlexLastSkip input'' len, _) ->",75],["AlexSkip input'' len",75],["(AlexLastAcc k input''' len, _) ->",75],["AlexToken input''' len k",73],["case len of",71],["= p1 user in1 len in2 && p2 user in1 len in2",71]],"useCount":9763},{"word":"length","context":[["{-# INLINE length #-}",336],[", length",314],["n = V.length v",183],["n = length xs",175],["-- length.",146],["import Prelude hiding (length)",143],["length, null,",138],["-> Int   -- ^ @n@ length",122],["then fail $ \"cannot unpack array of length \" ++",120],["if length contexts >= 2",118]],"useCount":34058},{"word":"lenses","context":[["-- lenses.",11],["{- $lenses",13],["-- lenses",17],["-- <http://comonad.com/reader/2012/mirrored-lenses/>.",18],["-- $lenses",27],["-- ** Response lenses",2351],["-- ** Request lenses",3224],["-- The fields accessible through corresponding lenses are:",8639],["-- Use one of the following lenses to modify other fields as desired:",19628]],"useCount":33928},{"word":"let","context":[["let ptr = parentPointer p",645],["let x1int = fromCInt x1",816],["let opts = idris_options i",662],["let hint = fromCInt cint",896],["= let",1055],["let",24840],["let dflags = hsc_dflags hsc_env",678],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["let platform = targetPlatform dflags",659],["let rv =",4406]],"useCount":233425},{"word":"level","context":[["development || level == LevelWarn || level == LevelError",95],["-- business.  Almost all top-level nodes of any real importance are",64],["shouldLog _ _source level =",96],["-> GLint -- ^ @level@ of type @CheckedInt32@.",96],["|| level == LevelWarn",100],["-- Type-level naturals",76],["development || level == LevelWarn || level == LevelError",95],["shouldLog app _source level =",100],["|| level == LevelError",101],["-- the top-level so that real test data can be incrementally added.",196]],"useCount":26157},{"word":"lhs","context":[["let lhs_ty = getInferType lhs'",75],[", (lhs:rhs:_)                     <- args =",62],[", cab_lhs = lhs",66],["; return $ A.ComputingInst (Just $ unLid lhs)",67],["\"The 'main-is' field must specify a '.hs' or '.lhs' file \"",72],[", (lhs:rhs:_)            <- args =",76],[", (lhs:rhs:_)                    <- args =",107],[", (lhs:rhs:_)          <- args =",119],["let lhs_tm = orderPats (getInferTerm lhs')",120],[", (lhs:rhs:_)           <- args =",116]],"useCount":11348},{"word":"lib","context":[["then Internal.getHaskellObjects implInfo lib lbi",78],["| x <- libModules lib ]",133],[", x <- libModules lib ]",87],["CLib lib -> do",74],["(repos, flags, lib, exes, tests, bms) <- getBody",66],["-- After the relocation lib is created we invoke ghc -shared",64],["&& null (cSources (libBuildInfo lib))",64],["findModuleFiles [builtDir] [ext] (libModules lib)",63],["hasLib    = not $ null (libModules lib)",63],["bi = libBuildInfo lib",88]],"useCount":8493},{"word":"library","context":[["-- copy the built library files over:",64],["-- standard library",64],["-- library.",109],["library:",81],["(library pkg)",74],["-- As for all splitting functions in this library, this function does",65],["\"library profiling for TARGETs and all its dependencies\"",53],["-- FreeBSD's default threading library is the KSE-based M:N libpthread,",60],["-- alternative 1:1 threading library libthr works around it:",60],["-- and ghc invokes the linker with the proper library paths",64]],"useCount":9205},{"word":"lift","context":[["import Control.Monad.Trans (lift)",341],["get = lift get",299],["put = lift . put",281],["throwError = lift . throwError",205],["ask = lift ask",186],["lift x = return (LitE (IntegerL (fromIntegral x)))",168],["getDynFlags = lift getDynFlags",145],["liftIO = lift . liftIO",465],["lift $ do",468],["import Control.Monad.Trans.Class (lift)",657]],"useCount":22679},{"word":"liftIO","context":[["liftIO = lift . liftIO",465],["import Control.Monad.IO.Class (MonadIO, liftIO)",396],["liftIO = lift . liftIO",465],["import Control.Monad.Trans (liftIO)",713],["liftIO . withPtr ho $ \\hoPtr ->",725],["now <- liftIO getCurrentTime",833],["liftIO $",995],["import Control.Monad.IO.Class (liftIO)",1498],["liftIO $ do",2565],["= liftIO",6177]],"useCount":52423},{"word":"liftM","context":[["import Control.Monad(liftM)",144],["import Control.Monad (liftM)",1547],["fmap = liftM",1118],["import Control.Monad (liftM, ap)",170],["import Control.Monad ( liftM )",143],["`M.ap`(M.liftM P.Just QC.arbitrary)",131],["import           Control.Monad (liftM)",117],["parseList = liftM List $ sepBy parseExpr spaces",116],["import Control.Monad (liftM, liftM2)",116],["liftM",272]],"useCount":15457},{"word":"like","context":[["-- | The 'mapAccumL' function behaves like a combination of 'map' and",82],["-- Suppose vector copying is implemented like this:",61],["-- With 'indexM', copying can be implemented like this instead:",61],["-- like",61],["-- like (...)",68],["-- | Given something like /usr/local/bin/ghc-6.6.1(.exe) we try and find a",80],["-- Very like -ohi, but we must *only* do this if we aren't linking",83],["-- | The 'mapAccumR' function behaves like a combination of 'map' and",100],["-- You can add other plugins like BrowserID, email or OAuth here",173],["-- This commented snippet is what the entire set should look like:",196]],"useCount":22795},{"word":"line","context":[["-- This line actually creates our YesodSite instance. It is the second half",104],["line <- getLine",353],["ticks = arr ! line",102],["-- This line actually creates our YesodDispatch instance. It is the second half",205],["case line of",195],["{-# LINE 1 \"<command-line>\" #-}",175],["line",121],["indent = dropWhileEnd isSpace . unlines . fmap (\\line -> \"  \" ++ line) . lines",106],["| not (inRange (bounds arr) line) = Nothing",102],["indent = dropWhileEnd isSpace . unlines . fmap (\\line -> \"  \" ++ line) . lines",106]],"useCount":24930},{"word":"link","context":[[", link",188],["-- (we might not actually link, depending on the GhcLink flag)",48],["-- True if we are going to attempt to link in this mode.",48],["linkables = map (expectJust \"link\".hm_linkable) home_mod_infos",52],["= link' dflags batch_attempt_linking hpt",122],["= NoLink              -- ^ Don't link at all",60],["-- link:",112],["link,",62],["-> HomePackageTable        -- what to link",89],["-- | What to do in the link step, if there is one.",60]],"useCount":9422},{"word":"list","context":[["--   list",100],["-- list.",249],["-- /The precondition (input list is ascending) is not checked./",233],["-- Please keep the list of flags below sorted alphabetically",188],[", list",184],["-- list of warnings.",121],["-- | Options list and functions.",105],["-- | /O(n)/. Build a map from a list of key\\/value pairs where",104],["case list of",103],["-- we don't want a verbose help text list so we just show a generic one:",88]],"useCount":45809},{"word":"lit","context":[["imm = litToImm lit",129],["= do  { lit' <- zonkOverLit env lit",47],["CmmLit lit",47],["let CmmFloat _ w = lit",54],["then return (OpImm (litToImm lit), nilOL)",54],["case lit of",120],["Amode addr code <- memConstant (widthInBytes w) lit",108],["let imm = litToImm lit",76],["; return (HsOverLit lit') }",64],["| is32BitLit is32Bit lit",54]],"useCount":9402},{"word":"ll","context":[["-- we'll be able to pick the right method from a dictionary",60],["-- Something has gone wrong.  We'll try to cover all the cases when",45],["| otherwise -> Bin (1+ls) lrk lrx (Bin (1+lls+size lrl) lk lx ll lrl) (Bin (1+size lrr) k x lrr Tip)",41],["| otherwise -> Bin (1+ls+rs) lrk lrx (Bin (1+lls+size lrl) lk lx ll lrl) (Bin (1+rs+size lrr) k x lrr r)",41],["-- we'll handle the stub_o file in this phase, so don't MergeStub,",43],["-- require some re-working of the GHC interface, so we'll leave it",51],["| ls > delta*rs  -> case (ll, lr) of",57],[": \"but there's no guarantee that they'll build together).\"",40],["| lrs < ratio*lls -> Bin (1+ls+rs) lk lx ll (Bin (1+rs+lrs) k x lr r)",41],["-- We'll need these",108]],"useCount":8300},{"word":"loc","context":[["case loc of",204],["parseErrorSDoc loc $",105],["= addErrAt loc $",123],["{ ds_loc = loc",128],["= putSrcSpanDs loc $",132],["; mapM_ (\\a -> a loc) ann -- Add any API Annotations to the top SrcSpan",145],["pprLoc loc $",150],["; loc <- getSrcSpanM",181],["; return (loc, dec) }",242],["= setSrcSpan loc $",410]],"useCount":40830},{"word":"local","context":[["-- See Note: Type of local 'go' function",295],["IdSet)          -- subset of local vars that occur free",75],["-- | Given something like /usr/local/bin/ghc-6.6.1(.exe) we try and find a",80],["Local -> \"local\"",83],["-> IdSet                -- set of local vars available to this statement",90],["-- local",92],["-- | Parse an expression using appropriate local context.",119],["-- local variables:",254],["-- local imports",108],["-- See Map.Base.Note: Type of local 'go' function",72]],"useCount":16039},{"word":"location","context":[["<mapref location=\"map.jhm\"/>",669],["-> GLint -- ^ @location@.",171],["-> FilePath  -- ^Build location",150],["-- | The location of static files on your system. This is a file system",133],["=> GLint -- ^ @location@.",123],["putPosition location",101],["-- location.",97],["location <- getPosition",92],["hi_timestamp <- maybeGetIfaceDate dflags location",88],["(Just location)",88]],"useCount":13835},{"word":"log","context":[["-- We need a log function to create a connection pool. We need a connection",87],["-- Use createProcess_ to avoid the log file being closed afterwards",74],["log = fmap log",64],["-- | /O(n*log n)/.",99],["log = fmap log",64],["-- temporary foundation without a real connection pool, get a log function",88],["-- | /O(log n)/. Update the value at the minimal key.",92],["-- | /O(log n)/. Update the value at the maximal key.",92],["log <- getLog",123],["import Prelude hiding (log)",235]],"useCount":7190},{"word":"look","context":[["-- Generated by DrIFT, look but don't touch!",76],["-- This commented snippet is what the entire set should look like:",196],["do s <- look",90],["-- the \"Finder\": in one-shot mode we look for interface files for",60],["-- You shouldn't need to look things up in rawSettings directly.",60],["-- imported modules, but in multi-module mode we look for source files",60],["-- Just look in the local environment",56],["-- Only look for constants on the right hand side, because that's",56],["-- look bogusly different. See test:",44],["-- Otherwise look at file modification dates",44]],"useCount":9498},{"word":"lookup","context":[["import qualified \"containers\" Data.Map as M ( fromList, lookup )",71],["case Map.lookup k m of",71],["import           Prelude hiding (lookup)",79],["case lookup n proofs of",90],["lookup,",98],["case lookup n env of",122],["(lookup var env)",138],["{-# INLINE lookup #-}",143],[", lookup",509],["import Prelude hiding (lookup)",855]],"useCount":18319},{"word":"loop","context":[["where loop s n | s `seq` n `seq` False = undefined",707],["loop = do",905],["loop",1907],["loop s n = do",589],["loop _ 0 = return ()",315],["in loop dflags' warn",310],["loop s 0 = return s",275],["let loop = do",264],["loop :: IO ()",216],["if e then terminateDevel else loop",170]],"useCount":23653},{"word":"m","context":[["getVal m' f' = f' m'",1274],["-> m ()",7055],[":: MonadIO m",3440],["-> m a",1693],[":: Monad m",455],["(MonadDOM m) =>",473],["Assign f (Async x m []) $ \\ () ->",1128],["(MonadIO m) =>",1129],["case m of",1227],["getVal m' f' = f' m'",1274]],"useCount":200452},{"word":"m1","context":[["appendTree3 m1 (node3 a b c) (node3 d e f) (node2 g h) m2",247],["unionWith f m1 m2",60],["m1 \\\\ m2 = difference m1 m2",96],["m1 \\\\ m2 = difference m1 m2",96],["appendTree2 m1 (node2 a b) (node2 c d) m2",114],["appendTree4 m1 (node3 a b c) (node3 d e f) (node2 g h) (node2 i j) m2",114],["appendTree3 m1 (node3 a b c) (node3 d e f) (node3 g h i) m2",190],["appendTree3 m1 (node3 a b c) (node2 d e) (node2 f g) m2",266],["appendTree2 m1 (node3 a b c) (node2 d e) m2",190],["appendTree2 m1 (node3 a b c) (node3 d e f) m2",247]],"useCount":8671},{"word":"m2","context":[["appendTree3 m1 (node3 a b c) (node3 d e f) (node3 g h i) m2",190],["appendTree4 m1 (node3 a b c) (node3 d e f) (node2 g h) (node2 i j) m2",114],["appendTree2 m1 (node2 a b) (node2 c d) m2",114],["m1 \\\\ m2 = difference m1 m2",96],["m1 \\\\ m2 = difference m1 m2",96],["unionWith f m1 m2",60],["appendTree3 m1 (node3 a b c) (node3 d e f) (node2 g h) m2",247],["appendTree2 m1 (node3 a b c) (node3 d e f) m2",247],["appendTree3 m1 (node3 a b c) (node2 d e) (node2 f g) m2",266],["appendTree2 m1 (node3 a b c) (node2 d e) m2",190]],"useCount":8128},{"word":"main","context":[["main = do",26524],["main = hspec $ do",654],["main = defaultMain",763],["main = defaultMain tests",983],["main :: IO()",1012],["main",1014],["main = hspec spec",2132],["main =",2458],["module Main (main) where",3270],["main :: IO ()",34057]],"useCount":96301},{"word":"make","context":[["-- instruction so we have to make sure that the assembler accepts the",86],["-- results were truncated, you can make a subsequent pagination request",81],["-- | Creates a value of 'Tag' with the minimum fields required to make a request.",69],["make ::",138],["make :: Make",201],["| ghcVersion < Version [7,2] [] -- ghc-7.2+ does not make _stub.o files",87],["-- make sure we clean up after ourselves",64],["-- Whenever you change the target, also make sure to set 'ghcLink' to",60],["( make",109],["-- have to make a corresponding change here.",130]],"useCount":19239},{"word":"many","context":[["determines how many attempts should be made, in addition to delay and retry strategies.",206],[", many",65],["-- ** Breaking into many substrings",87],["import Control.Applicative hiding (many)",90],["x <- many (noneOf \"\\\"\")",113],["rest <- many (letter <|> digit <|> symbol)",177],["many space",139],["many spacenonewline",133],["-- send emails. Unfortunately, there are too many different options for us to",129],["import Control.Applicative hiding ((<|>), many)",102]],"useCount":11354},{"word":"map","context":[[", map",500],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"int\" [] ]",904],["return $ map qEnum_fromInt til",774],["<mapref location=\"map.jhm\"/>",669],[", TyCon \"map\" [ TyCon \"addr\" [] , TyCon \"addr\" [] ]",452],["-- a member of the map, the original map is returned.",194],["[ TyCon \"map\" [ TyCon \"int\" [] , TyCon \"int\" [] ]",259],["map",322],["{-# INLINE map #-}",353],["-- a member of the map, the original map is returned.",194]],"useCount":107396},{"word":"mapM","context":[["import Data.Traversable (mapM)",88],["{-# INLINE mapM #-}",159],["r' <- ct $ mapM makeRelativeToCurrentDirectory r",149],["highlight input = evalState (mapM parseSourceLine $ lines input) startingState",119],["r' <- mapM makeRelativeToCurrentDirectory r",116],["mapM",183],["import Prelude hiding (mapM)",198],["; exprs' <- mapM (tc_elt elt_ty) exprs",82],[", mapM",83],["import Control.Monad hiding (mapM)",85]],"useCount":24041},{"word":"mapM_","context":[["mapM_ (uncurry (HUnit.assertEqual \"Different result after encoding/decoding\")",63],["mapM_ (\\n -> do focus n",61],["mapM_ (\\n -> when (n `elem` hs) $",64],["-- results. Equivalent to @flip 'mapM_'@.",64],[", mapM_",65],["mapM_ checkDeclTotality (idris_totcheck i)",71],["mapM_ (elabCaseBlock info opts) is",71],["{-# INLINE mapM_ #-}",100],["mapM_",123],["; mapM_ (\\a -> a loc) ann -- Add any API Annotations to the top SrcSpan",145]],"useCount":13338},{"word":"mappend","context":[["mappend = (Semi.<>)",248],["mappend = liftA2 mappend",115],["where combine field = field a `mappend` field b",691],["mappend = (<>)",553],["{-# INLINE mappend #-}",486],["(<>) = mappend",405],["mappend = append",132],["mappend = union",170],["import Data.Monoid (mappend)",377],["`mappend` mempty {",174]],"useCount":13730},{"word":"match","context":[["match (varP other)",85],["ms <- match' s s'",78],["match \"templates/*\" $ compile templateCompiler",199],[", match",180],["match \"css/*\" $ do",152],["match \"index.html\" $ do",124],["match \"posts/*\" $ do",117],["match \"images/*\" $ do",116],["= lift $ tfail $ Msg (\"Attempting concrete match on polymorphic argument: \" ++ show tm)",104],["mr <- match' r r'",85]],"useCount":19567},{"word":"matches","context":[["= pprMatches (LambdaExpr :: HsMatchContext id) matches",50],["matches -> return matches",51],["{-# OPTIONS_GHC -fno-warn-unused-matches #-}",5481],["matches [here|",126],["case matches of",101],["nest 2 (pprMatches (CaseAlt :: HsMatchContext id) matches <+> char '}') ]",75],["summary `matches` Target (TargetModule m) _ _",51],["_ `matches` _",51],["summary `matches` Target (TargetFile f _) _ _",51],["matches -> return matches",51]],"useCount":14077},{"word":"maybe","context":[["(maybe empty showToken)    (fmap Just parseTokenQ)",63],["maybe",368],["(maybe [] (fmap display)))",84],["maybe (return ())",160],[">>= maybe (Prelude.error \"Nothing to return\") return)",609],["(lang,cont) <- maybe currentContext return mbcontext",118],["maybe, not, null, otherwise, return, show, toEnum,",89],["import Data.Maybe (maybe)",84],["maybe (return Nothing) (fmap Just . parseAbsFile)",72],["maybe (Prelude.error \"Nothing to return\") return)",1656]],"useCount":13350},{"word":"mconcat","context":[["= mconcat",3389],["(mconcat",2513],["mconcat",441],["import Data.Monoid (mconcat)",325],["{-# INLINE mconcat #-}",152],["return $ mconcat fds",140],["mconcat = concat",114],[", mconcat",85],["mconcat = foldr mappend mempty",96],["mconcat = unions",101]],"useCount":12227},{"word":"means","context":[["-- Most flags are dynamic flags, which means they can change from compilation",60],["-> Bool -- ^ True means save problem file",63],["-- The bool is to indicate if we are parsing command line flags (false means",58],["-- with *double* backslashes.   And that in turn means that",50],["-- If the current token is 0#, it means we've just accepted a partial",49],["-- For lazy vectors, @v ! i@ would not be evaluated which means that @mv@",61],["-- This means that the operation can become linear in the number of",61],["--             = (tys, Just tl) means ty is of form t1:t2:...tn:tl",48],["-- (gather ty) = (tys, Nothing) means ty is a list [t1, .., tn]",48],["-- If the current token is (1), it means we've just accepted a partial",64]],"useCount":7626},{"word":"member","context":[["-- a member of the map, the original map is returned.",194],["parseXMLList \"member\"))",91],["{-# INLINE member #-}",80],["{-# INLINABLE member #-}",62],[", member",421],["xopt f dflags = fromEnum f `IntSet.member` extensionFlags dflags",61],["if n `S.member` env",60],["wopt f dflags  = fromEnum f `IntSet.member` warningFlags dflags",60],["-- | Undocumented member.",3528],["gopt f dflags  = fromEnum f `IntSet.member` generalFlags dflags",57]],"useCount":7248},{"word":"mempty","context":[["toHeaders = const mempty",2693],["parseJSON _ = mempty",273],["toQuery = const mempty",4311],["mempty",2959],["{-# INLINE mempty #-}",465],["return mempty",450],["import Data.Monoid (mempty)",422],["then return mempty",297],["then mempty",268],["mempty {",243]],"useCount":37039},{"word":"message","context":[["\"message\" .= (\"Entity validation failed\" :: Text),",90],["-- message.",90],[", message",91],["-- Set up i18n messages. See the message folder.",166],["showError (UnboundVar message varname) = message ++ \": \" ++ varname",68],["showError (BadSpecialForm message form) = message ++ \": \" ++ show form",85],["showError (BadSpecialForm message form) = message ++ \": \" ++ show form",85],[", \"(progn (message \\\"Hello, World!\\\")\"",81],["showError (UnboundVar message varname) = message ++ \": \" ++ varname",68],["case message of",87]],"useCount":11242},{"word":"method","context":[["case method of",64],["-- For example, the method names should be bound to",43],["-- This is a handler function for the GET request method on the RootR",47],["-- See Note [Instance method signatures]",48],["-- If its a bit type then we use the slow method since",50],["type: method",60],["-- we'll be able to pick the right method from a dictionary",60],[", method",64],["-- method.",80],["-- This is a handler function for the GET request method on the HomeR",85]],"useCount":8126},{"word":"might","context":[["-- elimination, it might be the target of a goto.",53],["-- check if SSE is enabled, we might have x86-64 imply the -msse2",56],["-- We might need a different pointer type, so check",50],["--    whether this might be the case and choose to either switch to a",60],["-- it refers to might be finalized, including the standard Handles.",50],["-- We don't want the cmd line to buffer any input that might be",51],["-- The only time the memory might overlap is when the two arrays",64],["-- despite what the AWS documentation might say.",61],["-- empty paths are ignored: there might be a trailing",61],["-- are building - this might be a combination way, eg. profiling+threaded.",60]],"useCount":15682},{"word":"missing","context":[[", taskConfigOpts = TaskConfigOpts missing $ \\missing' ->",51],[", taskConfigOpts = TaskConfigOpts missing $ \\missing' ->",51],["{-# OPTIONS -fno-warn-missing-signatures #-}",60],["-- flags or missing arguments).",60],["-- If the number is missing, use 1",60],["{-# OPTIONS_GHC -fno-warn-missing-methods #-}",91],["{-# OPTIONS_GHC -fno-warn-missing-fields #-}",225],["missing",243],["{-# OPTIONS_GHC -fno-warn-missing-signatures #-}",635],["-- missing.",49]],"useCount":7439},{"word":"mkPreludeMiscIdUnique","context":[["tupPIdKey         = mkPreludeMiscIdUnique 242",29],["charLIdKey        = mkPreludeMiscIdUnique 220",29],["intPrimLIdKey     = mkPreludeMiscIdUnique 223",29],["rationalLIdKey    = mkPreludeMiscIdUnique 227",29],["newNameIdKey         = mkPreludeMiscIdUnique 204",29],["litEIdKey         = mkPreludeMiscIdUnique 272",29],["mkNameG_dIdKey       = mkPreludeMiscIdUnique 207",29],["sequenceQIdKey      = mkPreludeMiscIdUnique 202",29],["fieldPatIdKey       = mkPreludeMiscIdUnique 260",29],["bindQIdKey          = mkPreludeMiscIdUnique 201",29]],"useCount":7356},{"word":"mod","context":[["case mod of",64],["mod   <- get bh",64],["= do  { mod <- getModule",73],["| Just mod <- nameModule_maybe name",63],["(\"mod\", numericBinop mod),",92],["(sourceFile, source, flags) <- getModuleSourceAndFlags mod",70],["where p x = x `mod` n == 0",70],["(\"mod\", numericBinop mod),",92],["; mod <- getModule",92],["-- mod-[1..9], Switch to workspace N",66]],"useCount":17899},{"word":"mode","context":[["-- | Is Safe Haskell on in some way (including inference mode)",60],["-- | Safe Haskell mode",94],["-- -*- mode: haskell -*-",120],["-- mode: haskell",298],["case mode of",517],["&& isInterpretiveMode mode) $",78],["produce a suitable addressing mode.",76],["-- | Figure out the final correct safe haskell mode",70],["-- don't switch it off in --make mode, else *everything* gets",60],["-> Bool                    -- attempt linking in batch mode?",89]],"useCount":14542},{"word":"modify","context":[["modify,",150],["{-# INLINE modify #-}",163],[", modify",184],["use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",140],["-- you can redistribute it and/or modify it under the terms of",224],["-- This instance is required to use forms. You can modify renderMessage to",243],["Warning   : this file is machine generated - do not modify.",1354],["-- Use one of the following lenses to modify other fields as desired:",19628],["getPkgDatabases verbosity False{-modify-} False{-use user-}",138],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",131]],"useCount":29418},{"word":"module","context":[["module Main(main) where",552],["module Types where",424],["module ShouldCompile where",646],["module Main",995],["module Main (main) where",3270],["module Main where",18973],["module Main ( main ) where",395],["module Test where",378],["module ShouldFail where",375],["{-# ANN module \"HLint: ignore Use camelCase\" #-}",372]],"useCount":100217},{"word":"modules","context":[["-- Import all relevant handler modules here.",302],["-- | Some modules have dependencies on others through the DynFlags rather than textual imports",60],["-- Link the packages and modules required",63],["-- modules.",70],["(modules,files,warnings) <-",72],["return (modules, files <> cfiles, warnings)",72],["-- preconditions expected by public modules. Use at your own risk!",83],["-- These modules are intended to be imported qualified, to avoid name",111],["-- from all the external-package modules",145],["-- Don't forget to add new modules to your cabal file!",242]],"useCount":14221},{"word":"monad","context":[["-- | /O(1)/ First element in a monad without checking for empty vectors.",61],["-- | Lift a @catchE@ operation to the new monad.",82],["-- The monad allows operations to be strict in the vector when necessary.",61],["-- | Promote a function to a monad, scanning the monadic arguments from",113],["-- | Lift a @callCC@ operation to the new monad.",82],["-- | /O(1)/ Indexing in a monad without bounds checks. See 'indexM' for an",77],["-- | /O(1)/ Indexing in a monad.",69],["-- | /O(1)/ Last element of a vector in a monad. See 'indexM' for an",61],["-- | /O(1)/ First element of a vector in a monad. See 'indexM' for an",61],["-- | /O(1)/ Last element in a monad without checking for empty vectors.",61]],"useCount":10071},{"word":"more","context":[["-- You can find more information on persistent and how to declare entities",139],["-- files, more easily set expires and cache values, and avoid possibly",130],["-- the comments there for more details.",104],["-- For more information on modifying behavior, see:",105],["-- comments there for more details.",205],["-- For more information, see",201],["-- | One or more filters.",192],["| more details.                                                               |",143],["-- For more detailed instructions on editing the layoutHook see:",129],["-- costly transference of cookies on static files. For more information,",130]],"useCount":22985},{"word":"ms","context":[["case ms of",285],["let show_one ms = do m <- GHC.showModule ms; liftIO (putStrLn m)",49],["let show_one ms = do m <- GHC.showModule ms; liftIO (putStrLn m)",49],["let graph' = flattenSCCs (GHC.topSortModuleGraph True ms Nothing) in",51],["case [ m | Just m <- map (findTarget ms) targets ] of",51],["return (mt ++ ms)",52],["| gopt Opt_ForceRecomp (ms_hspp_opts ms) = False",54],["let ms = modSummary tcm",70],["ms <- match' s s'",78],["let hsc_env_tmp = hsc_env { hsc_dflags = ms_hspp_opts ms }",112]],"useCount":10703},{"word":"msg","context":[["msg",190],["textPut msg",867],["runIO . hPutStrLn h $ IdeMode.convSExp \"return\" msg id",240],["putUnknownField u'f msg = msg{unknown'field = u'f}",94],[", msg :: !Doc",97],["J.Error msg ->",111],["msg <- getI18N",131],["textPut msg = Prelude'.return ()",147],["putStrLn msg",160],["case msg of",584]],"useCount":24087},{"word":"must","context":[["-- Very like -ohi, but we must *only* do this if we aren't linking",83],["-- | Grow a vector by the given number of elements. The number must be",102],["-- | Move the contents of a vector. The two vectors must have the same",102],["* Redistributions in binary form must reproduce the above",332],["-- -   First character must be a letter",103],["-- (which must be non-negative).",104],["-- parse (a %partial parser).  We must ignore the saved token on the top of",118],["-- | /O(n)/ Copy an immutable vector into a mutable one. The two vectors must",122],["1000 objects at a time, and you must send subsequent requests with the",206],["(which must be non-negative).",79]],"useCount":27963},{"word":"mzero","context":[["else mzero",162],["parseJSON _          = mzero",615],["empty = mzero",435],["_ -> mzero",393],["import Control.Monad (mzero)",371],["mzero",319],["Nothing -> mzero",237],["mzero = empty",227],["{-# INLINE mzero #-}",191],["parseJSON _ = mzero",2457]],"useCount":8195},{"word":"n","context":[["loop s n = do",589],["return n",671],["where loop s n | s `seq` n `seq` False = undefined",707],["where loop s n | s `seq` n `seq` False = undefined",707],["Assign n (Attr n) $ \\ () ->",2000],["Assign n (Attr n) $ \\ () ->",2000],["\"\\n\" ++",1542],["\\\\n\\",1210],["case n of",750],["++ \"\\n\"",1132]],"useCount":320330},{"word":"name","context":[["<name>Favorites</name>",616],["<name>TOC</name>",784],["<name>Search</name>",716],["<name>Search</name>",716],["<name>Index</name>",672],["name",493],["<name>Index</name>",672],["<name>Favorites</name>",616],["{-# OPTIONS_GHC -fno-warn-name-shadowing #-}",537],["<name>TOC</name>",784]],"useCount":156948},{"word":"names","context":[["printTypeOfNames names",153],["--   * Neither the name of the <ORGANIZATION> nor the names of its contributors",94],["names",78],["case names of",73],["= addErrCtxt (dataConCtxtName names) $",66],["names <- getDirectoryContents topdir",62],["--     * Neither the name of the ERICSSON AB nor the names of its contributors",204],["* Neither the name of Isaac Jones nor the names of other",236],["-- 3. Neither the name of the author nor the names of any contributors",242],["-- and names them based on a hash of their content. This allows",285]],"useCount":27426},{"word":"need","context":[["-- The rest of this file contains settings which rarely need changing by a",190],["-- We need a log function to create a connection pool. We need a connection",87],["-- TODO: problem here is we need the .c files built first, so we can load them",86],["-- pool to create our foundation. And we need our foundation to get a",87],["-- We need a log function to create a connection pool. We need a connection",87],["-- Only called on *zonked* things, hence no need to worry about flatten-skolems",94],["-- this already raised an expection, but we need it",105],["-- TODO: do we need to put hs-boot files into place for mutually recursive",86],["-- We'll need these",108],["{-  We don't need state discarding for our restricted implementation of",132]],"useCount":28658},{"word":"needed","context":[["-- both modules (although that is rarely needed).",46],["-- (needed for PIC)",44],["\"\" -- \"Make slide shows include all the needed js and css\"",45],["-- -fno-cse is needed for GLOBAL_VAR's to behave properly",211],["-- because we needed to parse the imports out of it, or get the",47],["-- resolve overloading, not needed in \"real\" programs",133],["-- Generic case. Uses casts and pointer arithmetic if needed.",50],["-- deps if needed.",96],["-- cast to pointer type needed",50],["-- LinkerInfo contains any extra options needed by the system linker.",56]],"useCount":7458},{"word":"nest","context":[[", nest 2 $ ppShowIface ss pp_extra ]",48],["nest nestingSize (prettyPs env bs))",48],["nest (-length s) y)",49],[", nest 2 $ ppr e",51],["= hang (nest 2 (ppr_lexpr expr) <+> dcolon)",67],["nest :: Int -> Doc -> Doc",73],["nest 2 (pprMatches (CaseAlt :: HsMatchContext id) matches <+> char '}') ]",75],["nest 4 (",85],["nest 4 (vcat [",154],["$$ nest 5 (printMaybe",565]],"useCount":10233},{"word":"never","context":[["the rewrite conditions must take role into account, never allowing",39],["never see it.",38],["$newline never",553],["-- Others should never happen in a command context.",42],["-- will never be linked in: nothing refers to it.  We need to",43],["--    *never* over-saturated (because if so",38],["env_top  :: HscEnv,  -- Top-level stuff that never changes",38],["-- always set this way, we never modify it incrementally.",49],["| i >= 4 =  -- Will never happen on 32-bit",54],["-- into Csg.calc (The unfolding for sqr never makes it into the",56]],"useCount":7661},{"word":"new","context":[["new,",111],[", new",278],["-- Don't forget to add new modules to your cabal file!",242],["{-# INLINE new #-}",179],["-- deleted. If it is (@'Just' y@), the key @k@ is bound to the new value @y@.",100],["-- Moving to a new state after a reduction",134],["return new",124],["-- > let f x = if x == \"a\" then Just \"new a\" else Nothing",126],["-- > let f k x = if x == \"a\" then Just ((show k) ++ \":new a\") else Nothing",125],["(\\ !new'Field ->",106]],"useCount":28089},{"word":"newStablePtr","context":[["stptr   <- newStablePtr (Wrap _handler)",8182],["_ <- liftIO $ newStablePtr stdin",49],["_ <- liftIO $ newStablePtr stderr",49],["bracket (newStablePtr action_plus)",15],["entry <- newStablePtr (myThreadId >>= putMVar mv >> action_plus)",15],["stable_ref <- newStablePtr a",20],["noBreakStablePtr = unsafePerformIO $ newStablePtr noBreakAction",25],["stablePtr <- newStablePtr onBreak",25],["newStablePtrName      = varQual  gHC_STABLE (fsLit \"newStablePtr\") newStablePtrIdKey",25],["_ <- liftIO $ newStablePtr stdout",49]],"useCount":8468},{"word":"newtype","context":[["newtype FlushErr = FlushErr (IO ())",58],["newtype Age = MkAge Int",60],["newtype Identity a = Identity { runIdentity :: a }",46],["-> [Type]  -- instance head parameters (incl. newtype)",54],["-- newtype TExp a = ...",52],["newtype Parser a = Parser {",47],["newtype X = MkX (Int -> X)",47],["newtype FlushOut = FlushOut (IO ())",58],["-- necessary because H98 doesn't have \"cunning newtype\" derivation",125],["newtype HappyState b c = HappyState",85]],"useCount":13092},{"word":"next","context":[["\"next\", 5, 1, 8), (",105],[", next",92],["-- to the next phase of the pipeline.",91],["-- Arrays only: do the next action",132],["-- WARNING: The next block of code was automatically generated by",2252],["{-# INLINE next #-}",270],["case next of",236],["appropriate Marker in order to retrieve the next page of results.",206],["-- evaluated before using the result in the next application. This",208],["next",197]],"useCount":12347},{"word":"nm","context":[["= do  { nm' <- vNameL nm",84],["nm    <- get bh",64],["(return nm)",63],["then printForUser (text \"Breakpoint\" <+> ppr nm <+>",51],["= do  { nm' <- vNameL nm",84],["= do { nm1 <- lookupLOcc nm",110],["= do { nm' <- vNameL nm",112],["nm <- getRefactNameMap",330],["= do { nm' <- vNameL nm",112],["nm = initRdrNameMap t",149]],"useCount":13156},{"word":"no","context":[["-- if no such element exists.",82],["{-@ LIQUID \"--no-termination\" @-}",221],["when (null txt) $ fail \"Parser matched no text\"",119],["| no == line2",102],["| no == line1",102],["| no == line1 && no == line2",102],["-- or 'Nothing' if no such element exists.",82],["-- Only called on *zonked* things, hence no need to worry about flatten-skolems",94],["_ -> fail \"no parse\"",97],["| no == line1 && no == line2",102]],"useCount":43043},{"word":"node","context":[["-- with an appropriate failure node.",59],["node <- getParamNode",63],["Descend context accum result node",70],["_  -> showString (concat (reverse (tail bars))) . showString node",73],["node           = \"+--\"",75],["node <- ask",89],["runProcess node $ do",89],["case node of",107],["(\"node\",",326],["node :: String",63]],"useCount":12564},{"word":"non","context":[["Portability : non-portable (GHC only)",199],["-- Portability :  non-portable (GHC extensions)",215],["-- Portability: non-portable",314],["-- Portability :  non-portable (GHC Extensions)",516],["-- Portability : non-portable",624],["-- Portability :  non-portable",1269],["-- Portability : non-portable (GHC extensions)",14092],["Portability :  non-portable",161],["-- Portability :  non-portable (requires POSIX)",169],["Portability :  non-portable (imports Logic.Logic)",188]],"useCount":39491},{"word":"not","context":[["-- /The precondition (input list is ascending) is not checked./",233],["if not exists",214],["{-# OPTIONS_HADDOCK not-home #-}",192],["| not is32Bit = do",189],["-- If you do not find this file, copies can be found by writing to:",536],["Warning   : this file is machine generated - do not modify.",1354],["-- not exist in the map. If the key does exist, the function will",140],["-- along with this program; see the file COPYING.  If not, write to",151],["--  along with this program; see the file COPYING.  If not, write to",150],["liftIO . (assertEqual \"Balance is not 0\") 0",149]],"useCount":154767},{"word":"note","context":[["-- This invariant is used in LoadIface.loadDecl (see note [Tricky iface loop])",53],["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["this have an additional note in the documentation.",206],["= do { tc1 <- lookupLOcc tc           -- See note [Binders and occurrences]",123],[", note",77],["-- note that the length is increased ONLY if this is the 1st byte in a char encoding)",62],["-- 'HscNothing' can be used to avoid generating any output, however, note",60],["%note",56],["note = try $ do",52],["-- note: if they have an <ol> or <ul> not in scope of a <li>,",48]],"useCount":9447},{"word":"now","context":[["now <- liftIO $ getCurrentTime",146],["-- From now on, we just use the bits we need.",83],["-- Default to Authorized for now.",83],["-- * Depends: now.",100],["-- now that we have the script apply",62],["do now <- getCurrentTime",70],["-- now.",72],["for now --SDM",132],["now <- getCurrentTime",778],["now <- liftIO getCurrentTime",833]],"useCount":13627},{"word":"ns","context":[["| isElem ns \"w\" \"r\" element",74],["(decls, ns) <- get -- ignore decls in HO types",78],[", (\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\") ]) )",80],["\"<rdf:RDF xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\",85],["nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",104],["put (decls, nub (ns ++ (isn `dropAll` (env ++ map fst (getImps decls)))))",111],["[ mkAttr qn18 [ mkText \"http://relaxng.org/ns/structure/1.0\" ]",122],["elemToParPart ns element",133],["= do (decls, ns) <- get",163],["findAttr (elemName ns \"w\" \"val\")",73]],"useCount":31238},{"word":"null","context":[["null _ = False",115],["if S.null bs",124],["when (null txt) $ fail \"Parser matched no text\"",119],["if null input then \"end of file\" else show (head input)",135],["length, null,",138],[", null",555],["{-# INLINE null #-}",385],["if null args",139],["unless (null extraArgs) $",146],["import Prelude hiding (null)",219]],"useCount":39033},{"word":"number","context":[["-- In addition, you can configure a number of different aspects of Yesod",197],["-- Please see the documentation for the Yesod typeclass. There are a number",286],["-- temporarily compensate line-number for multi-line input",90],["{-# UNPACK #-} !Int     -- its number",77],["-- | Use this only when paginating results to indicate the maximum number of",95],["unpackNum notNum = throwError $ TypeMismatch \"number\" notNum",77],[", number",78],["-- | Grow a vector by the given number of elements. The number must be",102],["-- | Grow a vector by the given number of elements. The number must be",102],["-- number.",109]],"useCount":17771},{"word":"o","context":[["(o .:? \"nextPageToken\") <*>",232],["<*> o .: \"id\"",241],["<*> (o .:? \"name\")",257],["parseJSON (Object o) = do",231],["<*> (o .:? \"id\")",288],["<*> o .: \"url\"",365],["case o of",389],["parseJSON (Object o) =",804],["(o .:? \"kind\" .!=",230],["(\\ o ->",3373]],"useCount":39762},{"word":"object","context":[["= Data.Aeson.object",105],["object [",115],[", object",122],["object",246],["= object",6238],["xs@(_:_) -> sendResponseStatus status400 (A.object [",90],["A.Error err -> sendResponseStatus status400 $ A.object [",96],["-- the object file for one module.)",83],["Nothing -> sendResponseStatus status400 $ A.object [",97],["-> Maybe FilePath             -- ^ stub object, if we have one",85]],"useCount":17299},{"word":"objectIsNull","context":[["if (objectIsNull x0obj)",6642],["if (objectIsNull qobj)",916],["rv <- if (objectIsNull x0obj)",624]],"useCount":8182},{"word":"occ","context":[["occ_str = TH.occString occ",56],[", correct_name_space occ",56],["occ <- return $! mkTcOccFS a1",80],["occ = nameOccName name",80],["occ  = nameOccName name",111],["occ = greOccName gre",50],["name'  = tidyNameOcc name occ'",50],["= Name occ (NameG space (mkPkgName \"ghc-prim\") tup_mod)",46],["; rep2 mkNameLName [occ,uni] }",43],["; rep2 mk_varg [pkg,mod,occ] }",43]],"useCount":11387},{"word":"of","context":[["case r of",4900],["-- WARNING: The next block of code was automatically generated by",2252],["case res of",4559],["case result of",3786],["= case ft' of",3477],["-- Use one of the following lenses to modify other fields as desired:",19628],["case x of",3361],["case e of",2657],["case t of",2369],["case args of",2332]],"useCount":632938},{"word":"off","context":[["-- don't switch it off in --make mode, else *everything* gets",60],["-- | Enumerates the simple on-or-off dynamic flags",61],["-- don't want to turn it off.",60],["-- False <=> we are turning the flag off",62],["subsequent requests to continue where a previous request left off is called",206],["return (Amode (AddrRegImm reg off) code)",104],["--     Turn off PIC code generation.",60],["-- turning it off breaks code, so we're keeping it on for",60],["-- Whenver we -ddump, force recompilation (by switching off the",60],["--     * function to turn the flag off",59]],"useCount":11953},{"word":"ok","context":[["return ok",166],["if ok",193],["ok <- noErrors",129],["case ok of",111],["msg = (IdeMode.SymbolAtom \"ok\",",72],["unless ok $",71],["Right ok -> return ok",61],["Right ok -> return ok",61],["where ok (PrefixPred _ _) = False",61],["ok _   = True",61]],"useCount":7451},{"word":"old","context":[["-- and return the /old/ value that was replaced.",60],["_ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self",1120],["update'Self wire'Tag old'Self",1159],["10 -> Prelude'.fmap (\\ !new'Field -> old'Self{bucket = new'Field}) (P'.wireGet 12)",59],["--                       save the old token and carry on.",133],["-> Maybe Linkable  -- ^ old linkable, if we have one",86],["-> Maybe ModIface  -- ^ old interface, if we have one",86],["case old of",77],["-- defaults, as xmonad preserves your old layout settings by default.",62],["-- In one-shot mode we don't have the old iface until this",60]],"useCount":11486},{"word":"on","context":[["-- Store session data on the client in encrypted cookies,",231],["import           Data.Function (on)",223],["Many operations have the ability to filter results on the server side. See the",206],["--                       For email, run on linux (perl v5.8.5):",169],["-- While working on this module you are encouraged to remove it and",254],["-- and names them based on a hash of their content. This allows",285],["import Data.Function (on)",1803],["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["-- Generate a unique filename based on the content itself",168],["let xs = List.nubBy ((==) `on` fst) ys",150]],"useCount":82236},{"word":"one","context":[["-- | /O(n)/ Copy an immutable vector into a mutable one. The two vectors must",122],["-> Maybe ModIface  -- ^ old interface, if we have one",86],["-- we don't want a verbose help text list so we just show a generic one:",88],["-- This action is throttled at one request per second.",100],["-- /AttributeValueList/ can contain only one /AttributeValue/ element of type",120],["-- | /O(n)/ Split the vector in two parts, the first one containing those",122],["-- Use one of the following lenses to modify other fields as desired:",19628],["-> Maybe Linkable  -- ^ old linkable, if we have one",86],["-> Maybe FilePath             -- ^ stub object, if we have one",85],["one = 1",83]],"useCount":58639},{"word":"only","context":[["-- Very like -ohi, but we must *only* do this if we aren't linking",83],["-- Portability :  GHC only",103],["-- Portability : GHC only",96],["-- /AttributeValueList/ can contain only one /AttributeValue/ element of type",120],["-- Portability : tested on GHC only",120],["-- We only support SparcV9 and better because V8 lacks an atomic CAS",130],["-- | Use this only when paginating results to indicate the maximum number of",95],["-- Arrays only: do the next action",132],["Portability : non-portable (GHC only)",199],["-- Use a 'Resource' element with the domain name to limit the action to only",87]],"useCount":46087},{"word":"op","context":[["return $ Bool $ left `op` right",76],["case op of",694],["= case unLoc op of",102],["T.tFlush (T.getTransport op)",87],["T.writeMessageEnd op",87],["= case op of",79],["= do { (op', op_ty) <- tcInferFun op",66],["numericBinop op singleVal@[_] = throwError $ NumArgs 2 singleVal",70],["writeMessageEnd op",71],["boolBinop unpacker op args = if length args /= 2",75]],"useCount":25259},{"word":"opt","context":[["case opt of",65],[", opt <- Installed.ccOptions dep ]",56],["putIState $ i { idris_options = opt' }",495],["sPgm_lo                :: (String,[Option]), -- LLVM: opt llvm optimiser",60],["$ optMetadata opt })",63],["= (InaccessibleArg `elem` opt,",63],["(\\arg opt -> do",605],["(\\arg opt ->",332],["return opt { optVariables = newvars,",143],["loop handle opt val_ctx env hist histOld index flagC flagH flagT flagS num",69]],"useCount":11482},{"word":"option","context":[[", option",127],[",option \"\" [\"tests\"]",76],[",option ['u'] [\"username\"]",66],["<*> option auto",225],["Nothing -> liftIO (putStrLn (\"unknown option: '\" ++ str ++ \"'\"))",98],["optional = Parse.option mempty . fmap toFlag",81],[",option ['p'] [\"password\"]",66],["option",100],[", option [] [\"dry-run\"]",92],[",option \"\" [\"benchmarks\"]",75]],"useCount":14013},{"word":"optional","context":[["optional $ do eof",119],["optional blanklines",367],["optional kspace",223],["<*> P.optional (P.xattr (P.name \"color\") >>= parseColor)",74],["-- | Uses decimal encoding with optional sign.",78],["optional newline",79],["optional = Parse.option mempty . fmap toFlag",81],["optional sp",84],["<*> optional",94],["<*> optional (strOption",186]],"useCount":7666},{"word":"options","context":[["options =",897],["options :: [OptDescr Flag]",273],["case getOpt Permute options argv of",242],["options = [",212],["options :: [OptDescr (Options -> Options)]",193],["case getOpt Permute options args of",150],[", options",145],["-- send emails. Unfortunately, there are too many different options for us to",129],["options = Options",123],["options :: Parser Options",108]],"useCount":18473},{"word":"opts","context":[["return (filter (w `isPrefixOf`) opts)",96],["then Just $ writerColumns opts",126],["contents <- inlineListToMarkdown opts lst",107],["opts <- gets stOptions",213],["case opts of",105],["if writerStandalone opts",103],["let opts = idris_options i",662],["in  if writerStandalone opts",85],["case sumEncoding opts of",85],["main opts args = do",85]],"useCount":33292},{"word":"or","context":[["-- or",222],["-- | One or more filters.",192],["-- you can redistribute it and/or modify it under the terms of",224],["or",225],["-- You can add other plugins like BrowserID, email or OAuth here",173],["documentation and/or other materials provided with the distribution.",990],["Redistribution and use in source and binary forms, with or without",1376],["-- Redistribution and use in source and binary forms, with or without",846],["--    documentation and/or other materials provided with the distribution.",381],["--       documentation and/or other materials provided with the distribution.",227]],"useCount":78045},{"word":"order","context":[["-- argument through the map in descending order of keys.",64],["appropriate Marker in order to retrieve the next page of results.",206],["-- argument through the map in ascending order of keys.",186],["-- order.",143],["-- the indices of all elements equal to the query element, in ascending order.",62],["-- add new ones to end, so they're included in order specified",85],["-- indices of all elements satisfying the predicate, in ascending order.",83],["HsArrAppType     -- higher-order (-<<) or first-order (-<)",68],["-- normalise the result in order to",62],["HsArrAppType     -- higher-order (-<<) or first-order (-<)",68]],"useCount":11452},{"word":"org","context":[["-- Maintainer  :  cvs-ghc@haskell.org",444],["-- Maintainer  :  libraries@haskell.org",198],["-- Maintainer  :  libraries@haskell.org",1918],["<type>org.zaproxy.zap.extension.help.ZapTocView</type>",598],["-- Maintainer  : Vincent Hanquez <vincent@snarc.org>",644],["--     http://hackage.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#TabsvsSpaces",195],["-- Maintainer  :  ffi@haskell.org",180],["-- Maintainer  :  cabal-devel@haskell.org",1141],["-- Maintainer  :  haddock@projects.haskell.org",218],["<http://hackage.haskell.org/package/lens/docs/Control-Exception-Lens.html Control.Exception.Lens>.",199]],"useCount":14426},{"word":"original","context":[["-- are slices of the original.",87],["-- a member of the map, the original map is returned.",194],["-- restore original line_number",44],["-- | /O(n)/ Apply function n times to value. Zeroth element is original value.",67],["-- element was found in the original set.",47],["-- See Note [Printing original names] in HscTypes",46],["-- This version rolls back to the original state on entering the",44],["-> Maybe FilePath             -- ^ original basename (if different from ^^^)",44],["-- Returns the original key value if the map entry is deleted.",64],["-- further compilation stages can tell what the original filename was.",45]],"useCount":7461},{"word":"other","context":[["documentation and/or other materials provided with the distribution.",990],["-- * Lifting other operations",132],["-- You can add other plugins like BrowserID, email or OAuth here",173],["other -> other",179],["-- Use one of the following lenses to modify other fields as desired:",19628],["--    documentation and/or other materials provided with the distribution.",381],["* Neither the name of Isaac Jones nor the names of other",236],["--       documentation and/or other materials provided with the distribution.",227],["requests, correctly setting Markers and other request facets to iterate through",206],["other -> other",179]],"useCount":46751},{"word":"otherwise","context":[["| otherwise -> do",1140],["| otherwise = id",577],["| otherwise = return ()",1097],["| otherwise = []",1473],["| otherwise ->",1641],["| otherwise = False",1734],["| otherwise = Nothing",3609],["| otherwise",20600],["| otherwise =",6691],["| otherwise = do",5020]],"useCount":122418},{"word":"out","context":[["out",87],["return out",291],["out -> out",238],["-- | Figure out the final correct safe haskell mode",70],["\"out\", 11, 0, 4), (",71],["putStrLn out",72],["writeFile' out \"\"",80],["out -> out",238],["-- logging function. To get out of this loop, we initially create a",87],["case out of",139]],"useCount":28000},{"word":"output","context":[["where err _ _ = output Varid as (start1 [])",144],["where err _ _ = output Varid as (start1 iis)",144],["where err _ _ = output Qvarid as (start1 iis)",144],["where err _ _ = output Qvarid as (start1 [])",144],["return output",173],["output",117],["case output of",112],["\"    Accepts the --simple-output flag.\\n\" ++",108],["output@Buffer{ bufRaw=oraw, bufL=_,   bufR=ow0, bufSize=os }",108],["output{ bufR=ow })",104]],"useCount":16089},{"word":"over","context":[["-- | /O(n)/ Map a function over a vector",65],["-- | /O(n)/ Monadic fold over non-empty vectors with strict accumulator",114],["-- | /O(n)/ Scan over a non-empty vector",64],["-- | /O(n)/ Right-to-left scan over a non-empty vector",64],["-- | /O(n)/. Map a function over all values in the map.",147],["-- ^ Updated 'DynFlags', left-over arguments, and",121],["-- | /O(n)/ Scan over a non-empty vector with a strict accumulator",64],["-- | /O(n)/ Right-to-left scan over a non-empty vector with a strict",64],["-- | Map a function over a 'ByteString' and concatenate the results",65],["-- Precondition: the tycon is saturated (or over-saturated)",68]],"useCount":11350},{"word":"p","context":[["return p",760],["</p>",1116],["case p of",859],["^p",754],["let ptr = parentPointer p",645],["<p><a href=\"#top\" class=\"page_top\">На початок</a></p>",538],["<p><a href=\"#top\" class=\"page_top\">На початок</a></p>",538],["<p class=\"title\">",538],["<p class=\"thumbnail\">",538],["Event $ \\p ->",480]],"useCount":115429},{"word":"p1","context":[["data (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",57],["p1,p2,p3",60],["p1e <- insert' p1",64],["kp1 <- insert p1",64],["withForeignPtr fp1 $ \\p1 ->",66],["alexAndPred p1 p2 user in1 len in2",71],["= p1 user in1 len in2 && p2 user in1 len in2",71],["p1k <- insert p1",77],["p1,p2",96],["p1",125]],"useCount":8143},{"word":"pack","context":[["import Data.Text (pack)",339],["(P'.pack",79],["import Data.Text (pack, unpack)",82],[", pack",106],["comment [\"TODO: intrinsic \", Text.pack $ show name]",116],["import Data.ByteString.Char8 (pack, unpack)",118],["--   perl -e 'print pack \"H*\",\"736f75726162682e732e6a6f73686940676d61696c2e636f6d0a\"'",169],["import Data.Text (Text, pack, unpack)",197],["import Data.ByteString.Char8 (pack)",218],["import Data.Text (Text, pack)",331]],"useCount":13792},{"word":"package","context":[["Right (_, c) <- readPackageConfig \"package.yaml\"",82],["package <- ask",99],["writeFile \"package.yaml\" [i|",100],["package",100],["-- from this package",102],["-- > -- stack --install-ghc runghc --package turtle",104],["-- from all the external-package modules",145],["(packageVersion package)",104],[", \"-package-id\"",132],["<http://hackage.haskell.org/package/lens/docs/Control-Exception-Lens.html Control.Exception.Lens>.",199]],"useCount":54239},{"word":"packages","context":[["-- Dependencies on other packages that are not in the index are discarded.",48],[": \"-hide-all-packages\"",49],["\"   :show packages              show the currently active package flags\\n\" ++",51],["info verbosity \"Reading installed packages...\"",51],["-- packages.",133],["-- | Get all the packages from the index.",78],["-- the packages.",52],["-- (-package, -hide-package, -ignore-package, -hide-all-packages, -package-db).",58],["-- Link the packages and modules required",63],["-> [DumpPackage () ()] -- ^ global packages",71]],"useCount":18568},{"word":"panic","context":[["_         -> panic \"pprDynamicLinkerAsmLabel\"",79],["filesToNotIntermediateClean = panic \"defaultDynFlags: No filesToNotIntermediateClean\",",56],["nextTempSuffix = panic \"defaultDynFlags: No nextTempSuffix\",",56],[", ft_bad_app = panic \"in other argument\" }",75],["_       -> panic \"PPC.CodeGen.coerceInt2FP: no match\"",64],["filesToClean   = panic \"defaultDynFlags: No filesToClean\",",60],["nextWrapperNum = panic \"defaultDynFlags: No nextWrapperNum\",",56],["dirsToClean    = panic \"defaultDynFlags: No dirsToClean\",",60],["FF80 -> panic \"genCCall' passArguments FF80\"",60],["generatedDumps = panic \"defaultDynFlags: No generatedDumps\",",60]],"useCount":16016},{"word":"parameter","context":[["-- | If the test in the first parameter is True, succeed with @Nothing@;",60],["-- parameter.",126],["-- | This parameter is not currently supported.",114],["-- This parameter is optional. If you do not include it, it defaults to",74],["-- value to use for the 'Marker' parameter in a subsequent pagination",73],["-- action fails. The associated event attribute\\'s __cause__ parameter will",71],["-- or the parameter values fall outside the specified constraints, the",71],["-- the nextPageToken as a value for the query parameter pageToken in the",50],["-- passing an accumulating parameter from right to left, and returning a",58],["-- passing an accumulating parameter from left to right, and returning a",62]],"useCount":8489},{"word":"params","context":[["-> Ptr GLint -- ^ @params@ pointing to @COMPSIZE(pname)@ elements of type @GLint@.",81],["params {",360],["numericBinop op params = mapM unpackNum params >>= return . Number . foldl1 op",54],["numericBinop op params = mapM unpackNum params >>= return . Number . foldl1 op",54],["params <- getParams",59],["info { params = newps,",63],["params =",310],["params",105],["params:\\n\\",92],["params  = []",64]],"useCount":6939},{"word":"parens","context":[["parens :: Parser a -> Parser a",198],["readPrec = parens $ prec 10 $ do",124],[", parens",122],["parens",113],["parens (sep [ppr a <> comma,",96],[", parens undecidableMsg ]",66],["parens = P.parens lexer",61],["parens = P.parens lexer",61],["parens = Tok.parens lexer",53],["readPrec = parens $ do",53]],"useCount":9532},{"word":"parent","context":[["--      otherwise, it comes out as @Any@, and the parent can decide which",49],["tcFamDecl1 parent",44],["case parent of",46],["dir <- asks (parent . fst)",192],["(commandOptions parent showOrParseArgs)",136],["-- Filter out names whose parent is also there Good",56],["commandDefaultFlags = (commandDefaultFlags parent, mempty),",56],["commandDefaultFlags = (commandDefaultFlags parent,",54],["parent = Cabal.buildCommand defaultProgramConfiguration",52],["run7z (parent archiveFile) archiveFile",48]],"useCount":7006},{"word":"parse","context":[["parse = do",424],["parse,",111],["-- parse (a %partial parser).  We must ignore the saved token on the top of",118],["-- starting the parse",132],["-- parse error if we are in recovery and we fail again",132],["-- Accepting the parse",134],["readExpr input = case parse parseExpr \"lisp\" input of",141],["parse",180],["(toFlag `fmap` parse))",217],[", parse",277]],"useCount":12808},{"word":"parseJSON","context":[["parseJSON _ = mzero",2457],["parseJSON",5738],["{-# INLINE parseJSON #-}",1064],["parseJSON _          = mzero",615],["parseJSON (Object v) = do",425],["parseJSON _ = empty",301],["parseJSON _ = mempty",273],["parseJSON (Object o) = do",231],["parseJSON (Object v) =",647],["parseJSON (Object o) =",804]],"useCount":19154},{"word":"parser","context":[["-- parse (a %partial parser).  We must ignore the saved token on the top of",118],["result <- parser",112],["parser =",72],["DynFlags parser",60],["-- parser which is quite inconvenient.  The",59],["-- the generated parser quite a bit.",132],["parser = do",167],["parser = takeText >>= \\case",252],["parser = takeLowerText >>= \\case",1986],["-- the dynamic flag parser that the other methods simply wrap. It allows",58]],"useCount":9771},{"word":"part","context":[["This file is part of Aura.",119],["-- This file is part of grid.",472],["-- The code in this file, and the program it is a part of, is",224],["{- This file is part of Feivel.                                      -}",92],["-- This file is part of Qtah.",119],["immediately follow use of the code part, since the code part puts",76],["immediately follow use of the code part, since the code part puts",76],["you need to do some other computation between the code part and use of",76],["--  This file is part of Swish.",139],["| This file is part of Fallback.                                              |",143]],"useCount":8612},{"word":"pass","context":[["-- match all expressions to pass the filters.",59],["\\section[RnSource]{Main pass of renamer}",56],["-- get the parameters first, to pass through to any where block",55],["-- | Lift a @pass@ operation to the new monad.",52],["pass,",51],["-- XXX: Can we figure out the location of an error to pass to the editor?",51],["-- the HsPp pass below will emit warnings",47],["-- more than we can pass to the @ld@ or @ar@ programs in one go.",47],["-- There are some options that we need to pass to gcc when compiling",60],["-- pass these a sequence of options on the command-line. Rather than",61]],"useCount":8518},{"word":"pat","context":[["= do  { (env', pat') <- zonkPat env pat",62],["= do  { (env', pat') <- zonkPat env pat",62],["(addTickLPat pat)",63],["= go pat",63],["; (env', pat') <- zonkPat env pat",68],["case pat of",130],["2 (ppr pat)",115],["pat -> case pat of {}",70],["pat -> case pat of {}",70],["; (env', pat') <- zonkPat env pat",68]],"useCount":14774},{"word":"path","context":[["return path",219],[", path",99],["Just path -> do",109],["printRawCommandAndArgs verbosity path args",87],["isDirectory <- doesDirectoryExist path",79],["case path of",173],["exists <- doesFileExist path",162],["-- path. The default value works properly with your scaffolded site.",132],["debug verbosity $ path ++ \" returned \" ++ show exitcode",124],["path",124]],"useCount":23795},{"word":"pats","context":[["; (env', pats') <- zonkPats env pats",109],[", dfid_pats  = pats",40],["return $ Match mf pats opSig gRHSs'",40],["bindLocals (collectPatsBinders pats) $ do",42],["; (pats', res) <- tcMultiple (\\p -> tc_lpat p elt_ty)",42],["; pats' <- rnLPatsAndThen mk pats",48],["; pats' <- rnLPatsAndThen mk pats",48],[", tfe_pats  = pats",68],["pats penv thing_inside",75],["; (env', pats') <- zonkPats env pats",109]],"useCount":7528},{"word":"pattern","context":[["-- resource pattern. All of your resource patterns are defined in",135],["-- If you change the resource pattern for StaticR in Foundation.hs, you will",102],[", \"                   :pattern\"",1197],["-- pattern bindings",60],["-- See Note [Matchers and builders for pattern synonyms] in PatSyn",60],["tagsRules tags $ \\tag pattern -> do",66],["case pattern of",151],["-- converting the expression into a pattern at the same time.",71],["when (not pattern) $",97],["| pattern && not reflection && not (e_qq ina) && e_nomatching ina",78]],"useCount":46675},{"word":"patterns","context":[["-- remove kind patterns (#8884)",58],["{-# OPTIONS_GHC -fwarn-incomplete-patterns #-}",302],["{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}",235],["-- resource pattern. All of your resource patterns are defined in",135],["{-# OPTIONS_GHC -fno-warn-overlapping-patterns #-}",82],["-- Useful macros, until we have bang patterns",68],["-- See Note [Typing patterns in pattern bindings]",47],["-- turn a list of patterns into a single pattern matching a list",43],["-- Process a list of patterns",43],["-- First gensym new names for every variable in any of the patterns.",43]],"useCount":7407},{"word":"pkg","context":[["| pkg <- pkgs",141],["| bi <- allBuildInfo pkg",101],["doDump expand_pkgroot [ (pkg, locationAbsolute db)",72],["++ unlines [ showExclusionReason (packageId pkg') reason",99],["| (pkg', reasons) <- conflicts, reason <- reasons ]",99],["-> PackageIndex pkg",92],["(library pkg)",74],["| (compiler, vr) <- testedWith pkg",78],["=> PackageIndex pkg",81],["pkg {",84]],"useCount":31755},{"word":"pkgs","context":[["| pkg <- pkgs ]",47],["(good, bad) = tallyPkgs dflags pkgs",47],["| pkg <- pkgs",141],["pkgs",78],["mkPackageDB pkgs",72],["-- | Return if a module is trusted and the pkgs it depends on to be trusted.",72],["when (not (null pkgs)) $",66],["| (_, pkgs) <- pkgss ]",63],["ps <- getPreloadPackagesAnd dflags pkgs",60],["case selectPackages (matchingStr str) pkgs unusable of",54]],"useCount":6951},{"word":"platform","context":[["if platformUsesFrameworks platform",156],["case platformOS platform of",174],["where platform = targetPlatform dflags",180],["platform = targetPlatform dflags",239],["= sdocWithPlatform $ \\platform ->",294],["platform <- asks getPlatform",297],["'[\"https://www.googleapis.com/auth/cloud-platform\",",578],["sdocWithPlatform $ \\platform ->",147],["case platform of",143],["let platform = targetPlatform dflags",659]],"useCount":16153},{"word":"point","context":[["-- | Main entry point.",94],["-- Entry point",74],["-- | A value that indicates the starting point for the next set of response",69],["id               -- A unique name to identify this splice point",64],["-- point, when checkOldIface reads it from the disk.",60],["-- Trivial (dyadic: 'trivialCode', floating-point: 'trivialFCode',",56],["wayUnsetGeneralFlags _ WayDyn      = [-- There's no point splitting objects",56],["-- | Main stack tool entry point.",48],["-- the fork point are different depending on whether we are",56],["-- | Entry point",48]],"useCount":10536},{"word":"portable","context":[["-- Portability: non-portable",314],["-- Portability :  non-portable (GHC Extensions)",516],["-- Portability : non-portable",624],["-- Portability: portable",771],["-- Portability :  non-portable",1269],["Portability : portable",1314],["-- Portability : portable",1340],["Portability :  portable",2612],["-- Portability :  portable",9119],["-- Portability : non-portable (GHC extensions)",14092]],"useCount":37393},{"word":"pos","context":[["pos x0 ()",58],["[(string \"pos\", posdoc),",63],["tick_it      = allocTickBox (ExpBox False) False False pos $ addTickHsExpr e0",63],["raiseErrorCTExc pos",115],["posdoc <- formatM pos",116],["markLine pos $",162],["(xpElemNodes (gxFromString \"pos\") xpickle)))",184],["(pos,e) <- posnElement [s]",635],["pos <- getPosition",1294],["pos",102]],"useCount":7565},{"word":"possible","context":[["--    -O2                               optimise as much as possible",60],["-- possible to make it optional, but we'd need to",60],["-- because the handling of possible task preemption is rather costly",62],["-- take account of possible discounts.",56],["-> Bool   -- keep the remembered_ctx, as far as possible (:reload)",49],["-- possible objections:",41],["-- possible.",98],["-- /WARNING:/ This operation can be very inefficient. If at all possible, use",132],["-- | Settings are centralized, as much as possible, into this file. This",197],["possible.",40]],"useCount":8175},{"word":"ppr","context":[["ppr n = integer $ fromIntegral n",120],["2 (ppr pat)",115],["= pprTicks (ppr exp) $",101],["parens (sep [ppr a <> comma,",96],["ppr c <> comma,",96],["text \"Scrutinee type:\" <+> ppr scrut_ty,",87],["ppr b <> comma,",96],["= ASSERT2( isTcTyVar tv, ppr tv )",286],["ppr = text . show",175],["ppr binder],",125]],"useCount":99105},{"word":"pprPanic","context":[["mkHoleError _ ct = pprPanic \"mkHoleError\" (ppr ct)",34],["_ -> pprPanic \"mkSkolReporter\" (ppr ct1 $$ ppr ct2)",34],["= pprPanic \"No skolem info:\" (ppr tv)",34],["= pprPanic \"pprComp\" (pprQuals quals)",34],["_ -> pprPanic \"metaTyVarTcLevel\" (ppr tv)",58],["ctEvId ctev = pprPanic \"ctEvId:\" (ppr ctev)",38],["| otherwise                  = pprPanic \"DsMeta.globalVar\" (ppr name)",41],["pprPanic :: String -> SDoc -> a",43],["= pprPanic \"rn_rec_stmt\" (ppr stmt)",78],["Nothing  -> pprPanic \"getRegisterReg-memory\" (ppr $ CmmGlobal mid)",49]],"useCount":8056},{"word":"pred","context":[["where (m, c) = span pred str",59],["= ctev { ctev_pred = tidyType env pred }",78],["= do { pred' <- zonkTcType pred",78],["= do { pred' <- zonkTcType pred",78],["= case classifyPredType pred of",140],["pred x",196],["until_ pred prompt action = do",63],["if pred result",61],["else action result >> until_ pred prompt action",59],["pred c = isDigit c || c == '.'",59]],"useCount":8753},{"word":"predicate","context":[["-- | /O(n)/ Check if all elements satisfy the predicate.",64],["-- map contains all elements that satisfy the predicate, the second all",94],["-- elements that fail the predicate. See also 'split'.",95],["-- | /O(n)/ 'filter', applied to a predicate and a ByteString,",66],["-- | 'takeWhile', applied to a predicate @p@ and a ByteString @xs@,",66],["-- | /O(n)/ Check if any element satisfies the predicate.",64],["-- indices of all elements satisfying the predicate, in ascending order.",83],["-- and returns the first element in matching the predicate, or 'Nothing'",73],["-- predicate.",197],["-- ** Searching with a predicate",121]],"useCount":7011},{"word":"prefix","context":[["-- | /O(n)/ Split the vector into the longest prefix of elements that do not",61],["String  -- a non-filepath prefix that shouldn't be",61],["-- | /O(n)/ Yield the longest prefix of elements satisfying the predicate",61],["-> String                -- ^ The flag prefix",61],["-- | /O(n)/ Split the vector into the longest prefix of elements that satisfy",61],["-- | /O(n)/ Drop the longest prefix of elements that satisfy the predicate",61],["| otherwise   = BS.concat [prefix, line]",102],["-- Not an instance of Outputable because of the \"arising from\" prefix",60],["-> (FilePath, FilePath)  -- ^Executable (prefix,suffix)",68],["-- returns the longest prefix (possibly empty) of @xs@ of elements that",66]],"useCount":9920},{"word":"pretty","context":[[", \"When working on:\" <+> pretty name",63],["pretty = text . show",169],[", \"With domain:\" <+> pretty domain",55],["pretty :: a -> Doc",68],["show m = show $ pretty m",65],["prettyInternal = pretty'",100],["import Util.Pretty(pretty, text)",106],["-- pretty printing",63],["pretty name",74],["pretty e",57]],"useCount":10810},{"word":"print","context":[["print r",216],["print r2",144],["print x",204],["-- | Pretty-print response.",406],["Left err -> print err",231],["print err",151],["--   perl -e 'print pack \"H*\",\"736f75726162682e732e6a6f73686940676d61696c2e636f6d0a\"'",169],["print e",168],["print r1",150],["print res",131]],"useCount":13893},{"word":"process","context":[["-- | Create a new activity that holds the process for a random time interval",52],["-- wait on the process",88],[", process = preDefProcess TTBar0or1J",70],["-- process.",66],["[InstInfo Name],     -- Source-code instance decls to process;",62],["-- process them in the right order",61],["exitCode <- waitForProcess process",52],["process :: String -> IO ()",52],["-- | When processing every input element, hold the process",52],["-- | Create a new server that holds the process for a random time interval",52]],"useCount":8616},{"word":"program","context":[["=> GLuint -- ^ @program@.",252],["-- The code in this file, and the program it is a part of, is",224],["-- along with this program; see the file COPYING.  If not, write to",151],["--  along with this program; see the file COPYING.  If not, write to",150],["-- program must be compiled in the same \"way\".  Certain options change",60],["-- To find the property name associated with a program, use",61],["program",78],["-- Determine if program coverage should be enabled and if so, what",80],["program = do",89],["-- | The list of arguments supported by the program.",84]],"useCount":9281},{"word":"provisional","context":[["Stability   :  provisional",2303],["-- Stability   : provisional",420],["-- Stability : provisional",420],["-- Stability   :  provisional",3765],["stability: provisional",58],["-  Stability   : provisional",74],["--  Stability   :  provisional",79],["-- Stability   :  provisional",395],["Stability   : provisional",140],["Stability  : provisional",169]],"useCount":8081},{"word":"ps","context":[["ps",81],["; ps <- readMutVar ps_var",92],["ps' <- get_probs",83],["traceWhen (unifylog ps)",82],["do ps <- get",79],["case ps of",263],["ps <- get_probs",228],["ps <- get",198],["let (uh, uns) = unified ps",123],["= do ps <- get",90]],"useCount":30856},{"word":"ptext","context":[["ptext (sLit \", \"),",354],["ptext (sLit \"--> \") <> text (GHC.resumeStmt res)",48],["ptext (sLit \"is not supported with -fno-ghci-sandbox\"))",49],["then ptext (sLit \"Stopped at\")",51],["ptext (sLit \"\\t.indirect_symbol\") <+> pprCLabel platform lbl,",56],["ptext op,",57],["in  map (\\b -> ptext (sLit \"\\t.byte\\t\") <> pprImm (ImmInt b)) bs",60],["= ptext",74],["ptext (if upd_reqd",92],["ptext name,",106]],"useCount":27914},{"word":"ptr","context":[["peek ptr = do",454],["(#poke SDL_Event, common.timestamp) ptr timestamp",120],["(#poke SDL_Event, common.type) ptr typ",120],["alloca $ \\ptr -> do",128],["<*> peek (ptr `plusPtr` 8)",190],["peek ptr = do",170],["<*> peek (ptr `plusPtr` 16)",167],["let ptr = parentPointer p",645],["pf0 = ptr",160],["return ptr",128]],"useCount":9622},{"word":"ptrNull","context":[["withArray0 ptrNull cxs $ \\carr ->",12],["then do when (stptr/=ptrNull)",928],["= do when (stptr/=ptrNull)",7260],["when (funptr/=ptrNull)",8192],["when (funptr_d/=ptrNull)",7260]],"useCount":23652},{"word":"pure","context":[["return = pure",735],["{-# INLINE pure #-}",755],["pure = return",1294],["<*> (pure (fromEnum s)))",1521],["(pure (fromEnum s)))",621],["pure  = return",619],["fromInteger = pure . fromInteger",181],["pure ()",204],["(pure ())",213],["<*> pure Nothing",261]],"useCount":18654},{"word":"put","context":[["put x4",904],["put x5",541],["put x6",333],["put x",895],["put = lift . put",281],["10 -> put'Fields",1159],["put x3",1514],["put'Fields",2318],["put x2",2485],["put x1",3859]],"useCount":36190},{"word":"putStrLn","context":[["putStrLn $ showSDoc dflags $",231],["putStrLn err",143],["putStrLn msg",160],["putStrLn \"Starting devel application\"",171],["Left err -> putStrLn err",214],["Left ex -> putStrLn $ \"Caught exception: \" Data.List.++ show ex",322],["putStrLn s",212],["putStrLn \"\"",2689],["putStrLn $",175],["liftIO $ putStrLn \"\"",123]],"useCount":17069},{"word":"putWord8","context":[[", putWord8",61],["do putWord8 3",75],["putWord8 0x01",62],["putWord8 0",189],["putWord8 1",145],["do putWord8 0",53],["putWord8 3",53],["putWord8 0x00",80],["putWord8 4",55],["do putWord8 1",51]],"useCount":8804},{"word":"put_","context":[["put_ bh a2",283],["put_ bh a",449],["put_ bh aa",335],["put_ bh b",321],["put_ bh ab",312],["put_ bh a6",161],["put_ bh c",196],["put_ bh a5",230],["put_ bh a3",265],["put_ bh a4",265]],"useCount":16244},{"word":"q","context":[["= (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",54],["q <- buildRequest $ do",56],["q = fromIntegral (fromIntegral (i `shiftR` 32) :: Word32)",54],["(# q, r #) ->",179],["case q of",125],["return q",101],["focus t'; q unq t",96],["where qiq = qi q",68],["-- restarting (with 'mod-q') to reset your layout state to the new",62],["data (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,",57]],"useCount":14630},{"word":"qobj","context":[["= do qobj <- qObjectFromPtr qobjptr",916],["if (objectIsNull qobj)",916],["else _handler qobj (qEnum_fromInt hint)",774],["unSetUserMethod qobj evid",624],["= withObjectPtr qobj $ \\cobj_qobj ->",624],["unSetUserMethodVariantList qobj evid",624],["unSetHandler qobj evid",624],["withObjectPtr qobj $ \\cobj_qobj ->",3120],["userMethod qobj evid ()",624],["unSetUserMethodVariant qobj evid",624]],"useCount":10210},{"word":"qualified","context":[["import qualified Data.ByteString as BS",3683],["import qualified GHC.Exts",3441],["import qualified Data.Set as S",4087],["import qualified Data.ByteString as B",4410],["import qualified Data.Set as Set",6953],["import qualified Data.Map as M",9307],["import qualified Data.Vector as V",3423],["import qualified Data.ByteString.Lazy as L",2318],["import qualified Data.Map as Map",11760],["import qualified Data.Text as T",12934]],"useCount":242836},{"word":"quotes","context":[[", quotes (ppr occ_name)",60],["pname2 = quotes (ppr name2)",60],["<+> quotes (ppr poly_id))",60],["quotes (ppr tc_name)",65],["pname1 = quotes (ppr name1)",60],["(text \"not an expression:\" <+> quotes (text expr))",42],["text \"imported module \" <> quotes (ppr mod) <>",56],[", quotes (ppr mod)",45],["\"\" -- \"Use smart quotes, dashes, and ellipses\"",54],["-- block quotes",45]],"useCount":11666},{"word":"r","context":[["v <- readRemoteRef r",272],["Right r -> return r",285],["Right r -> return r",285],["Bin p m l r",365],["r",367],["case r of",4900],["-> r",382],["r <- step s",475],["res <- sendRequest r",936],["return r",3104]],"useCount":120445},{"word":"rather","context":[["-- because the handling of possible task preemption is rather costly",62],["-- On Windows, various fields have $topdir/foo rather than full",64],["-- rather than just the exported bindings, in the TypeEnv and compiled",59],["rather than",94],["-- rather than letting FilePath change it to use \\ as the separator",56],["-- rather than",61],["-- | Some modules have dependencies on others through the DynFlags rather than textual imports",60],["warn = \"Compiler not unregisterised, so using LLVM rather than compiling via C\"",55],["warn = \"Using native code generator rather than LLVM, as LLVM is incompatible with -fPIC and -dynamic on this platform\"",55],["warn = \"Compiler not unregisterised, so using native code generator rather than compiling via C\"",55]],"useCount":7128},{"word":"re","context":[["-- they're of different types)",64],["-- add new ones to end, so they're included in order specified",85],["-- re-generated later if gcc is upgraded.",60],["-- work fine even with DOS paths, if you're not insisting on being silly.",61],["-- and click on the client you're interested in.",61],["-- to whatever format they're expected to be on a particular platform.",61],["-- (If we're linking then the -o applies to the linked thing, not to",83],["-- If we're working inside a sandbox and the user has set the -w option, we",65],["-- reconfigure also checks if we're in a sandbox and reinstalls add-source",96],["-- transfers.  If we're really lucky, some of the register transfers",64]],"useCount":14195},{"word":"read","context":[["{-# INLINE read #-}",138],["parseNumber = liftM (Number . read) $ many1 digit",99],["breakByModuleLine md (read arg1) rest",95],["read,",65],["\"https://www.googleapis.com/auth/cloud-platform.read-only\",",58],["| all isDigit str = deleteBreak (read str)",51],[", read",104],["-- NOT STRICT!  we read this field lazily from the interface file",116],["import Prelude hiding (read)",197],["= Prelude'.read",1238]],"useCount":11826},{"word":"really","context":[["-- really come in order of source appearance.. (trac #1799)",51],["-- We really ought to use a proper termcap/terminfo library.",51],["where -- Certain dumpy-things are really interested in what's going",56],["-- -framework-path should really be -F ...",60],["-- Config.hs should really use Option.",60],["-- transfers.  If we're really lucky, some of the register transfers",64],["-- Assignments are really at the heart of the whole code generation",64],["-- exeNameReal, the name that GHC really uses (with .exe on Windows)",65],["-- or, really...",108],["-- Note that this is really half the story; in Application.hs, mkYesodDispatch",144]],"useCount":7544},{"word":"reason","context":[["Just reason -> T.concat",56],["| (pkg', reasons) <- conflicts, reason <- reasons ]",99],["-- between filepaths and 'other stuff'. The reason for this is that",61],["-- split marker ':' with the Windows / DOS one, ';'. The reason being",61],["reason <- expectMonitorChanged root monitor ()",63],["-- This one is important for a tiresome reason:",60],[", reason",115],["Constraints.constrain pkgname constraint reason",114],["return (RecompBecause reason)",56],["++ unlines [ showExclusionReason (packageId pkg') reason",99]],"useCount":7261},{"word":"record","context":[["- record selectors",52],["-- https://ocharles.org.uk/blog/posts/2014-12-04-record-wildcards.html",53],["-- The App {..} syntax is an example of record wild cards. For more",53],["case record of",55],["-> (DynFlags -> [a])    -- ^ Relevant record accessor: one of the @opt_*@ accessors",61],[", PersistEntityBackend record ~ DB.MongoContext",63],["-- timestamp record for this compiler to the timestamp file.",65],[", record",88],["= record",94],["return record",154]],"useCount":8247},{"word":"recursive","context":[["-- TODO: do we need to put hs-boot files into place for mutually recursive",86],[":: RecFlag       -- Whether it's recursive after breaking",64],["-- See Note [Type checking recursive type and class declarations]",61],["| Opt_Loopification                  -- See Note [Self-recursive tail calls]",57],["specConstrRecursive   :: Int,         -- ^ Max number of specialisations for recursive types",56],["-- handler must be recursive, in case showing the exception causes",51],["-- raising another exception.  We therefore don't put the recursive",51],["-- recursive exception handlers",51],["-- the recursive call does not recycle parser state",49],["-- recursive group",43]],"useCount":8397},{"word":"ref","context":[["ref <- noteMarker",109],["Just ref -> do",62],["MetaTv { mtv_ref = ref }",118],["ref <- newIORef []",93],["ref <- newIORef Nothing",79],["Just pid <- resolve ref",75],["return ref",74],["case lookup ref notes of",70],["let session = Session ref",70],["return (var, ref)",65]],"useCount":7973},{"word":"reg","context":[["= case reg of",183],["pprReg reg,",157],["return (OpReg reg, code)",108],["return (Amode (AddrRegImm reg off) code)",104],["(reg, code) <- getSomeReg x",96],["pprReg reg",87],["case reg of",77],["(reg, code) <- getNonClobberedReg e",81],["return (reg, code)",83],["translateReg reg",77]],"useCount":10804},{"word":"rep","context":[["return (tmp, code `snocOL` reg2reg rep reg tmp)",54],["-- works even if the destination rep is <II32",54],["-- ASSERT(rep == II32)???",54],["Fixed rep reg code",54],["tmp <- getNewRegNat rep",191],["(extendSExpr dflags rep y)",160],["Any rep code -> do",110],["(extendUExpr dflags rep y)",80],["(mkIntExpr dflags (nonHdrSize dflags rep))",64],["return (Any rep code)",54]],"useCount":8620},{"word":"representation","context":[["-- | Convert from the datatype to its representation",39],["-- An uninterpreted representation of configuration options.",38],["-- representation.",132],["[(\"Prefer\", \"return=representation\")]",67],["-- yield the representation of a list of types",43],["--  * If it is a global name, generate the \"original name\" representation (ie,",43],["-> Type    -- the representation type (already eta-reduced)",50],["-- opposed to its String representation, \"\\r\") inside a",51],["-- The underlying isomorphism will encode to Base64 representation during",61],["-- serialisation, and decode from Base64 representation during deserialisation.",61]],"useCount":8027},{"word":"request","context":[["request = postQuery iAM",239],["-- | Project ID for this request.",241],["request = postQuery ec2",221],["subsequent requests to continue where a previous request left off is called",206],["requests, correctly setting Markers and other request facets to iterate through",206],["Waiters poll by repeatedly sending a request until some remote success condition",206],["-- actually making the request, and provides an error response. If you have",291],["request = postQuery eC2",320],["-- request.",417],["-- | Multipart request metadata.",895]],"useCount":15910},{"word":"res","context":[["Just res -> return res",186],["return res",2583],["return $ case res of",187],["case res of",4559],["Just res -> return res",186],["res <- sendRequest r",936],["processResponse res",936],["res",270],["; return res }",225],["return (res')",210]],"useCount":37991},{"word":"res_ty","context":[["= do { expr' <- tcMonoExpr expr res_ty",71],["res_ty",157],[", mg_res_ty = res_ty",90],["; res_ty <- readExpType res_ty",90],["; res_ty <- readExpType res_ty",90],["dsCmd ids local_vars stack_ty res_ty",72],["= do  { res_ty <- expTypeToType res_ty",63],["= do { (coi, elt_ty, wit') <- arithSeqEltType witness res_ty",64],["tcMonoExpr expr res_ty",66],["= do { (wrap, elt_ty, wit') <- arithSeqEltType witness res_ty",68]],"useCount":12538},{"word":"response","context":[["-- | -- | The response status code.",1955],["response = xmlResponse",1167],["response = jsonResponse",1084],["-- | The response status code.",2186],["response",4502],["--     , testGroup \"response\"",196],["-- | Pretty-print response.",406],["case response of",379],["-- actually making the request, and provides an error response. If you have",291],["-- actually making the request, and provides an error response. If you have the",163]],"useCount":17109},{"word":"rest","context":[["case rest of",283],["-- The rest of this file contains settings which rarely need changing by a",190],["rest <- many (letter <|> digit <|> symbol)",177],["rest",137],["-- Place Javascript at bottom of the body tag so the rest of the page loads first",142],["-- generates the rest of the code. Please see the linked documentation for an",123],["let atom = first:rest",106],["fromElem rest = (Nothing, rest)",104],["fromElem rest = (Nothing, rest)",104],["[]  -> rest",103]],"useCount":24566},{"word":"result","context":[["return result",2085],[", result = cid result",173],["case result of",3786],["(MonadIO m, FromJSString result) =>",408],["result",389],["self -> m result",258],["-- evaluated before using the result in the next application. This",208],["the entire result set of a truncated API operation. Operations which support",206],[", result = cid result",173],["(MonadDOM m, FromJSString result) =>",172]],"useCount":43691},{"word":"results","context":[["-- This operation returns paginated results.",560],["case results of",82],["-- | Use this only when paginating results to indicate the maximum number of",95],["results",114],["-- vector of results",125],["Many operations have the ability to filter results on the server side. See the",206],["Some AWS operations return results that are incomplete and require subsequent",206],["-- results.",200],["-- results",149],["appropriate Marker in order to retrieve the next page of results.",206]],"useCount":11736},{"word":"return","context":[["Nothing -> return Nothing",3694],["Nothing -> return ()",7728],["return ()",35467],["return()",6222],["_ -> return ()",4685],["return True",4461],["return Nothing",4123],["then return ()",4054],["return r",3104],["else return ()",2958]],"useCount":501797},{"word":"returned","context":[["-- returned.",220],["-- | The maximum number of results per page that should be returned. If the",63],["This allows catching (and rethrowing) service specific errors returned",199],["-- a member of the map, the original map is returned.",194],["debug verbosity $ path ++ \" returned \" ++ show exitcode",124],["-- Otherwise, the new location is returned.",72],["-- | Whether the contents of the field can be returned in the search results.",66],["-- returned by a previous list request to get the next page of results.",63],["-- contain less than @n@ elements in which case it is returned unchanged.",61],["-- | The returned result of the corresponding request.",61]],"useCount":9261},{"word":"returns","context":[["-- returns a ByteString containing those characters that satisfy the",66],["-- This operation returns paginated results.",560],["pagination. For example, the 'ListObjects' operation of Amazon S3 returns up to",206],["-- If it returns 'Nothing', the element is discarded (proper set difference). If",76],["-- it returns (@'Just' y@), the element is updated with a new value @y@.",76],["-- | 'scanl' is similar to 'foldl', but returns a list of successive",73],["-- and returns the first element in matching the predicate, or 'Nothing'",73],["-- returns the longest prefix (possibly empty) of @xs@ of elements that",66],["-- | count returns the number of times its argument appears in the ByteString",63],["-- separators, where the predicate returns True for a separator element.",63]],"useCount":15626},{"word":"reverse","context":[["where f = reverse . dropWhile isSpace",94],["reverse' :: [a] -> [a]",85],["reverse :: [a] -> [a]",80],["| wide      = showString (concat (reverse bars)) . showString \"|\\n\"",75],["_  -> showString (concat (reverse (tail bars))) . showString node",73],[", reverse",116],["(reverse happy_var_1",129],["qcl_QWidget l x = reverse $ ((objectCast x):l)",132],[". reverse",141],["{-# INLINE reverse #-}",152]],"useCount":15891},{"word":"rhs","context":[[", (lhs:rhs:_)          <- args =",119],[", (lhs:rhs:_)           <- args =",116],[", (lhs:rhs:_)                    <- args =",107],["`setUnfoldingInfo`  mkCompulsoryUnfolding rhs",92],["| TupleTyCon { tup_sort = sort } <- rhs",78],["= case rhs of",193],[", (lhs:rhs:_)            <- args =",76],["-- Precondition: rhs satisfies the let/app invariant",75],["case rhs of",72],[", tfe_rhs   = rhs }))",71]],"useCount":34287},{"word":"right","context":[["Bool             -- True => right-to-left (f -< arg)",68],["-- complete the code generation for the right hand side.  This only",64],["| val > tval = T tval left (insert val right)",65],["-- left to right (cf. 'liftM2').",85],["-- False => left-to-right (arg >- f)",68],[", right",69],["myFringe (Branch left right) = myFringe left",73],["-- match when checking the right context, just",73],["return $ Bool $ left `op` right",76],["right <- unpacker $ args !! 1",84]],"useCount":17729},{"word":"rnf","context":[["= rnf x1 `seq`",305],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["rnf x2 `seq`",218],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["import Control.DeepSeq (NFData(rnf))",184],["rnf x4 `seq`",170],["rnf = genericRnf",135],["rnf x3 `seq`",190]],"useCount":16768},{"word":"role","context":[["; role <- getRole",88],["role = eqRelRole eq_rel",67],["tcRoles      :: [Role],  -- ^ The role for each type variable",60],["-- (where X is the role passed in):",50],[", co_ax_role     = role",44],["the rewrite conditions must take role into account, never allowing",39],["--   * always Nominal role",38],["-- | Get the role relevant for a 'CtEvidence'",38],["= Just $ hsep $ [text \"type role\", ppr tc] ++ map ppr roles",34],["2 (text \"we must assume that the role is nominal\")",34]],"useCount":8168},{"word":"rs","context":[["= ((x:':':div:p): splitUp rs)",60],["| otherwise -> Bin (1+ls+rs) k x l r",62],["parseSections accum@(rs, h, u, g, p, a)",76],["modify $ \\rs' -> rs'",96],["return rs",105],["(p,rs) = findNextPath xs",120],["(r:rs) -> do",123],["case rs of",131],["page rq rs",904],["modify $ \\rs' -> rs'",96]],"useCount":8328},{"word":"rule","context":[["rule <- rules srs",53],["--     rule",38],["when (all isExpr syms) $ unexpected \"missing keywords in syntax rule\"",35],["where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))",38],["(happyReduceArr Happy_Data_Array.! rule) i tk st",39],["return rule",42],[", rule",58],["-- Predicates on a rule",70],["Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible",94],["Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!",108]],"useCount":9139},{"word":"rules","context":[["| Opt_EnableRewriteRules             -- Apply rewrite rules during simplification",61],[", md_rules     = rules",43],["(useInstead \"enable-rewrite-rules\"),",46],["tcg_rules     = rules,",70],["flagSpec \"enable-rewrite-rules\"             Opt_EnableRewriteRules,",46],["-- alleviates some of the C99 macro rules relating to whitespace and the hash",42],["\\subsection{Transformation rules}",42],["-- validation rules.",48],["rule <- rules srs",53],[", ([1,2],   Opt_EnableRewriteRules)  -- Off for -O0; see Note [Scoping for Builtin rules]",60]],"useCount":10226},{"word":"run","context":[["-- How to run database actions.",247],["run",195],["runInBase <- liftBaseWith $ \\run -> return (void . run)",194],["runInBase <- liftBaseWith $ \\run -> return (void . run)",194],[", run",248],["run $ do",337],["--                       For email, run on linux (perl v5.8.5):",169],["run = do",272],["remote <- run $ send c $ do",265],["import Network.Wai.Handler.Warp (run)",251]],"useCount":16576},{"word":"rv","context":[["withObjectPtr rv $ \\cobj_rv -> return cobj_rv",624],["case rv of",12],["when (rv /= 0) (statementError stmt_)",19],["let rv =",4406],["rvf <- rv",4404],["rv <- if (objectIsNull x0obj)",624],["(arr `M.write` (baseIdx + 0)) rv",21],["rv <- arr `M.read` baseIdx",21],["return rv",28],["case rv of",45]],"useCount":10248},{"word":"rvf","context":[["rvf <- rv",4404],["return (toCBool rvf)",1740],["withObjectPtr rvf $ \\cobj_rvf -> return (cobj_rvf)",1696],["return (toCLong $ qEnum_toInt rvf)",16],["return (toCInt rvf)",780],["return (toCLong $ qFlags_toInt rvf)",92],["withCWString rvf $ \\cstr_rvf -> return (cstr_rvf)",40],["return (toCLLong rvf)",28]],"useCount":8796},{"word":"s","context":[["parseSchemaType s = do",638],["where loop s n | s `seq` n `seq` False = undefined",707],["where loop s n | s `seq` n `seq` False = undefined",707],["case s of",1854],["(\\ s h x ->",4146],["(pos,e) <- posnElement [s]",635],["return s",998],["s <- get",1614],["toXMLElement s []",634],["<*> (pure (fromEnum s)))",1521]],"useCount":246918},{"word":"s1","context":[["return (v1, stmts `snocOL` s1, top)",63],["(v, s1) <- doExpr ty $ Cast LM_Inttoptr vval ty",50],[", \"            (select s1 x))\"",49],["loop (s+s0+s1+s2+s3+s4+s5+s6+s7) (n-8)",46],["loop (s+s0+s1+s2+s3) (n-4)",46],[", \"            (intersect s1 ( (_ map not) s2 )))\"",65],[", \"            (and (subset s1 s2) (not (= s1 s2))))\"",65],[", \"            (and (subset s1 s2) (not (= s1 s2))))\"",65],[", \"              s1 ))\"",65],["unsafeRead (STUArray _ _ _ marr#) (I# i#) = ST $ \\s1# ->",138]],"useCount":10760},{"word":"s2","context":[["(ptr, s2) <- doExpr grt $ GetElemPtr True gv [toI32 ix]",75],["loop (s+s0+s1+s2+s3+s4+s5+s6+s7) (n-8)",46],[", \"            (and (subset s1 s2) (not (= s1 s2))))\"",65],[", \"            (and (subset s1 s2) (not (= s1 s2))))\"",65],["let s2 = Store v vreg",46],[", \"            (intersect s1 ( (_ map not) s2 )))\"",65],["s2# -> (# s2#, () #)",83],["(# s2#, () #) }",171],["loop (s+s0+s1+s2+s3) (n-4)",46],["s2# -> (# s2#, () #)",83]],"useCount":8441},{"word":"sLit","context":[["else ptext (sLit \"Logged breakpoint at\")) <+> ppr pan",48],["else (sLit \"_noupd_entry\"))",46],["printForUser $ ptext (sLit \"Logged breakpoint at\") <+> ppr pan",48],["ptext (sLit \"is not supported with -fno-ghci-sandbox\"))",49],["then ptext (sLit \"Stopped at\")",51],["ptext (sLit \"\\t.indirect_symbol\") <+> pprCLabel platform lbl,",56],["in  map (\\b -> ptext (sLit \"\\t.byte\\t\") <> pprImm (ImmInt b)) bs",60],["ptext (sLit \", \"),",354],["ptext (sLit \"--> \") <> text (GHC.resumeStmt res)",48],["then (sLit \"_upd_info\")",46]],"useCount":34865},{"word":"safe","context":[["safe  <- get bh",64],["-- safe haskell flags",61],["-- performed in place if it is safe to do so and will modify a copy of the",61],["-- | Figure out the final correct safe haskell mode",70],["-- We return True to indicate the import is safe and False otherwise",74],["-- Parametrised by (Flag PathTemplate), so safe to use 'mappend'.",75],["when safe $ do",76],["foreign import javascript safe",77],["foreign import ccall safe",100],["foreign import ccall safe \"wrapper\"",153]],"useCount":7819},{"word":"same","context":[["-- | /O(n)/ Vector of the given length with the same value in each position",60],["-- is to the same package, but for the ghc package, we split the",56],["-- program must be compiled in the same \"way\".  Certain options change",60],["-- have the same length. This is not checked.",61],["-- have the same length.",61],["-- we were provided are the same array!",64],["-- keys to the same new key.  In this case the associated values will be",68],["-- converting the expression into a pattern at the same time.",71],["-- Note the nasty duplication with the same computation in compileFile above",83],["-- | Move the contents of a vector. The two vectors must have the same",102]],"useCount":20649},{"word":"sc","context":[["sc <- expr syn",154],["return $ Bind x (Guess ty val) sc",123],["sc",64],["= do let isn = nub (implNamesIn uvars ty ++ case sc of",66],["imps True (n:env) sc",104],["sc 1",102],["else return (n, sc)",91],["sc' <- getPats sc",85],["sc' <- getPats sc",85],["(n', sc') <-",69]],"useCount":22935},{"word":"scope","context":[["partition ((== modl) . GHC.moduleName . GHC.nameModule) scope",51],["So in repTopDs we bring the binders into scope with mkGenSyms and addBinds.",43],["-- But we do NOT bring the binders of 'binds' into scope",43],["-- stuff like \" 'a' not in scope \", which is a bit silly",60],["--Lifting a definition widens the scope of the definition.",66],["-- note: if they have an <ol> or <ul> not in scope of a <li>,",48],["-- for our application to be in scope. However, the handler functions",139],["(loc, glob) = ASSERT( all isExternalName scope )",48],["-- Note that it does /not/ scope over the data",47],["cm | Just scope <- GHC.modInfoTopLevelScope cm ->",51]],"useCount":15359},{"word":"second","context":[["import           Control.Arrow (second)",88],["import Control.Arrow (second)",631],["-- This line actually creates our YesodDispatch instance. It is the second half",205],["import Control.Arrow (first, second)",143],["-- This line actually creates our YesodSite instance. It is the second half",104],["-- first argument are always preferred to the second, for example in",92],["-- This action is throttled at one request per second.",100],["-- map contains all elements that satisfy the predicate, the second all",94],["import Control.Arrow ( second )",71],["-- the second.",85]],"useCount":9522},{"word":"see","context":[["-- of the call to mkYesodData which occurs in Foundation.hs. Please see the",205],["-- For more information, see",201],["-- a separate domain. Please see the staticRoot setting in Settings.hs",159],["-- explanation of the syntax, please see:",283],["-- see",234],["-- Please see the documentation for the Yesod typeclass. There are a number",286],["-- For details on above see note [Api annotations] in ApiAnnotation",3426],["-- please see:",135],["--  along with this program; see the file COPYING.  If not, write to",150],["-- along with this program; see the file COPYING.  If not, write to",151]],"useCount":31742},{"word":"self","context":[["self ->",175],["(MonadIO m, IsWebGLRenderingContextBase self) =>",368],["_ -> P'.wireSizeErr ft' self'",1159],["P'.putSize (P'.wireSize 10 self')",1159],["_ -> P'.wirePutErr ft' self'",1159],["self -> m result",258],["self <- getSelfPid",187],["self -> m (Maybe result)",136],["(MonadDOM m, IsWebGLRenderingContextBase self) =>",146],["(unWebGLRenderingContextBase (toWebGLRenderingContextBase self))",136]],"useCount":16408},{"word":"sep","context":[["hang pp_fun 2 (sep pp_tys)",51],["sep",86],["sep [ ppr (moduleName m)",82],["sep, cat,",69],["= sep [pprCmdArg (unLoc arg1), hsep [pprInfixOcc v, pprCmdArg (unLoc arg2)]]",67],["--   by @sep@.",54],["parens (sep [ppr a <> comma,",96],["= sep [text \"{-# VECTORISE SCALAR type\" <+> ppr t <+> text \"#-}\" ]",49],["= sep [text \"{-# VECTORISE type\" <+> ppr t <+> text \"#-}\" ]",49],["= sep [text \"{-# VECTORISE type\" <+> ppr t, text \"=\", ppr t', text \"#-}\" ]",49]],"useCount":10219},{"word":"seq","context":[["rnf x4 `seq`",170],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["rnf x2 `seq`",218],["rnf x3 `seq`",190],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["= rnf x1 `seq`",305],["where loop s n | s `seq` n `seq` False = undefined",707],["where loop s n | s `seq` n `seq` False = undefined",707]],"useCount":23417},{"word":"sequence","context":[["-- sequence.",44],["pairs <- sequence $ do",45],["-- pass these a sequence of options on the command-line. Rather than",61],["flags <- sequence $ do",61],[", sequence",66],["sequence $ do",68],["sequence = mapM id",68],["{-# INLINE sequence #-}",95],["import Prelude hiding (sequence)",95],["sequence",224]],"useCount":7098},{"word":"set","context":[["get set",203],["the entire result set of a truncated API operation. Operations which support",206],["-- This commented snippet is what the entire set should look like:",196],["-- Modify the inert set with the supplied function",183],[", set",157],["-- ghci> :set -XOverloadedStrings",226],["-- >>> :set -XOverloadedStrings",275],["-- expiration dates to be set far in the future without worry of",285],["-- run the command set with \":set stop <cmd>\"",153],["-- run the command set with \":set stop <cmd>\"",153]],"useCount":34272},{"word":"setHandlerWrapper","context":[["setHandlerWrapper x0 x1 x2 x3 x4",152],["setHandlerWrapper x0 x1 x2 x3 x4 x5 x6",12],["setHandlerWrapper x0 x1",3336],["setHandlerWrapper x0",2216],["setHandlerWrapper x0 x1 x2 x3 x4 x5 x6 x7",12],["setHandlerWrapper x0 x1 x2",1096],["setHandlerWrapper :: Ptr (TQStyle x0) -> CLong -> Ptr (TQStyleOption t2) -> Ptr (TQPainter t3) -> IO ()",12],["setHandlerWrapper x0 x1 x2 x3",376],["setHandlerWrapper x0 x1 x2 x3 x4 x5",48]],"useCount":7260},{"word":"setHandlerWrapper_d","context":[["setHandlerWrapper_d funptr stptr funptr_d",7260],["setHandlerWrapper_d :: Ptr fun -> Ptr () -> Ptr fun_d -> IO ()",7260]],"useCount":14520},{"word":"settings","context":[["approot = ApprootMaster $ appRoot . settings",149],["-- default Hamlet settings.",135],["-- Perform database migration using our application's logging settings.",154],["settings <- getAppSettings",192],["-- The rest of this file contains settings which rarely need changing by a",190],["-- includes database connection settings, static file locations, etc.",198],["-- keep settings and values requiring initialization before your application",282],["-- of settings which can be configured by overriding methods here.",286],["foundation <- makeFoundation settings",337],["Just $ uncurry (joinPath y (Settings.staticRoot $ settings y)) $ renderRoute s",163]],"useCount":8495},{"word":"should","context":[["-- '-hpcdir' should be.",80],["-- Determine if program coverage should be enabled and if so, what",80],["it \"should work fine\" $ do",99],["-- What messages should be logged. The following includes all messages when",192],["++ \" should have been handled earlier!\")",350],["-- This commented snippet is what the entire set should look like:",196],["-- to this function will create a new session which should not be shared among",70],["determines how many attempts should be made, in addition to delay and retry strategies.",206],["--TODO: this should work using exclude constraints instead",69],["-- | How static files should be combined.",66]],"useCount":29845},{"word":"show","context":[["Left err -> error $ show err",262],["if null input then \"end of file\" else show (head input)",135],["-- > let f key new_value old_value = (show key) ++ \":\" ++ new_value ++ \"|\" ++ old_value",160],["{-# OPTIONS_HADDOCK show-extensions #-}",734],["_ -> error $ \"Data.Data.gunfold: Constructor \" ++ show c",162],["(PP.text . show)",536],["Left ex -> putStrLn $ \"Caught exception: \" Data.List.++ show ex",322],["pretty = text . show",169],["ppr = text . show",175],["Left err -> error (show err)",198]],"useCount":69601},{"word":"signature","context":[["adding a declared signature instead.",34],["-- have printed the signature",34],["-- See Note [Suggest adding a type signature]",34],["Note [Suggest adding a type signature]",34],["even if there are errors inside, we still generalise its signature and",34],["(a~Int) from the signature gets rewritten by the pattern-match to",34],["--      constructor type signature into the data constructor;",50],["-- signature.",50],["if the original function had a signature like",35],["type signature, then the best thing is to report that we can't unify",34]],"useCount":9393},{"word":"since","context":[["-- | @since 2.01",522],["-- @since 4.7.0.0",353],["-- @since 4.9.0.0",268],["-- @since 4.8.0.0",266],["-- | @since 4.8.0.0",147],["-- @since 0.2.0.0",130],["-- @since 4.10.0.0",129],["-- since that is done by RnNames.extendGlobalRdrEnvRn",120],["-- | @since 4.7.0.0",119],["-- | @since 4.9.0.0",570]],"useCount":12274},{"word":"single","context":[["\"   :stepmodule                 single-step restricted to the current module\\n\"++",51],["-- | Helper function that tries to enforce a single package constraint on a",59],["\"   :step <expr>                single-step into <expr>\\n\"++",51],["-- single DLL or not. Normally it does this by seeing if the call",56],["\"   :step                       single-step after stopping at a breakpoint\\n\"++",51],["\"   :steplocal                  single-step within the current top-level binding\\n\"++",51],["-- treated as a single separator. eg.",53],["-- inclined, or create a single monolithic file.",135],["-- information relating to the compilation of a single file or GHC session",61],["-- (single-module) compilation.  This makes a difference primarily to",60]],"useCount":10097},{"word":"singleton","context":[["-- > mapKeysWith (++) (\\ _ -> 3) (fromList [(1,\"b\"), (2,\"a\"), (3,\"d\"), (4,\"c\")]) == singleton 3 \"cdab\"",63],[", singleton",666],["{-# INLINE singleton #-}",366],["singleton,",85],["singleton x = [x]",66],["-- > insertWith (++) 5 \"xxx\" empty                         == singleton 5 \"xxx\"",63],["-- > mapMaybeWithKey f (fromList [(5,\"a\"), (3,\"b\")]) == singleton 3 \"key : 3\"",63],["-- > update f 3 (fromList [(5,\"a\"), (3,\"b\")]) == singleton 5 \"a\"",63],["Tip -> singleton kx x",63],["-- > mapMaybe f (fromList [(5,\"a\"), (3,\"b\")]) == singleton 5 \"new a\"",63]],"useCount":9293},{"word":"size","context":[["reshape size@(Size w h) = do",139],["return (Any size code)",180],["size _ = 1",188],["viewport $= (Position 0 0, size)",196],[", size",561],["{-# INLINE size #-}",322],["sa      = size a",199],["size,",125],["-- of deciding to inline happyGoto everywhere, which increases the size of",132],["pprMnemonic name size,",130]],"useCount":28423},{"word":"snd","context":[["map snd .",43],[". snd",54],["let lines'   = map snd dashes",55],["liftOptions snd setSnd (buildExOptions showOrParseArgs)",56],["= do { core1 <- rep_binds' (unionManyBags (map snd binds))",43],["snd: MVar to wait for the end of the thread -}",61],["mapM_ (turnOffBreak.snd) (breaks st)",50],["((Text.Highlighting.Kate.Syntax.Alert.parseExpression (Just (\"Alerts\",\"\")) >>= ((withAttribute CommentTok) . snd)))",66],["grp mts@((m,_):_) = (m,map snd g) : grp ng",48],["mapM_ (turnOffBreak.snd) this",50]],"useCount":8915},{"word":"so","context":[["-- Place Javascript at bottom of the body tag so the rest of the page loads first",142],["-- the top-level so that real test data can be incrementally added.",196],["so, subject to the following conditions:",140],["\"error\".  In fact, it can cause some bogus parses, so I've disabled it",132],["-- TODO: problem here is we need the .c files built first, so we can load them",86],["-- we don't want a verbose help text list so we just show a generic one:",88],["-- instruction so we have to make sure that the assembler accepts the",86],["furnished to do so, subject to the following conditions:",131],["-- create, it is not inlined, so we inline it manually.",89],["-- functions. You can spread them across multiple files if you are so",135]],"useCount":52676},{"word":"some","context":[["Waiters poll by repeatedly sending a request until some remote success condition",206],["\"error\".  In fact, it can cause some bogus parses, so I've disabled it",132],["-- moved to documentation in the Wiki. Following are some hopefully helpful",85],["-- performs some initialization.",85],["you need to do some other computation between the code part and use of",76],["anything in between, lest it overwrite some of those registers.  If",76],["-- | Reset all elements of the vector to some undefined value, clearing all",67],["ds <- some $ fnDecl syn",66],["-- | Convert a BlockId to some CmmStatic data",64],["-- transfers.  If we're really lucky, some of the register transfers",64]],"useCount":17744},{"word":"sort","context":[["import Data.List ( sort )",67],["import Data.List (sort)",636],[". sort",146],["import Data.List (nub, sort)",92],["| TupleTyCon { tup_sort = sort } <- rhs",78],["import Data.List(sort)",77],["sort = sortBy compare",70],["-- first). Use this to sort resources like operations so that the newest",58],["-- in alphanumerical order based on the resource name. You can also sort",58],["-- | Field by which to sort the list.",58]],"useCount":7536},{"word":"source","context":[["--   Redistribution and use in source and binary forms, with or without",99],["-- See Note [Pragma source text]",100],["Redistribution and use in source and binary forms, with or without",1376],["-- reconfigure also checks if we're in a sandbox and reinstalls add-source",96],["-- Please see the file COPYING in the source",97],["-- Note [Pragma source text] in BasicTypes",129],["-- | The position in source from which this arises.",184],["-- Redistribution and use in source and binary forms, with or without",846],["-- | Highlight source code using this syntax definition.",119],["-- Otherwise, the copying is performed as if the source vector were",102]],"useCount":24188},{"word":"space","context":[["spaces = skipMany1 space",219],["many space",139],["many1 space",168],["skipMany space",205],["space)",124],[", space",326],["space",624],["_ <- space",96],["skipMany1 space",98],["-- The $!! here prevents a space leak on reloading.",100]],"useCount":11006},{"word":"spaces","context":[["import Text.ParserCombinators.Parsec hiding (spaces)",260],["spaces'",126],["head <- endBy parseExpr spaces",90],["spaces",3936],["spaces = skipMany1 space",219],["P'.spaces",167],["spaces :: Parser ()",284],["tail <- char '.' >> spaces >> parseExpr",108],["parseList = liftM List $ sepBy parseExpr spaces",116],["P.spaces",126]],"useCount":7956},{"word":"span","context":[["= case span of",71],[", span",117],["PFailed span err ->",109],["{-# INLINE span #-}",184],["-- | 'break' @p@ is equivalent to @'span' ('not' . p)@.",65],["liftIO $ throwIO $ mkSrcErr (unitBag $ mkPlainErrMsg dflags span err)",62],["filter, takeWhile, dropWhile, span, break,",62],["-- > span  (=='c') \"abcd\" == spanByte 'c' \"abcd\"",61],["= setSrcSpan span $",72],["-- | 'span' @p xs@ breaks the ByteString into two segments. It is",66]],"useCount":7881},{"word":"spec","context":[["let spec = PackageSpec",75],["( spec",87],["spec :: Spec",4687],["spec",99],[", spec",118],["spec = withApp $ do",149],["spec =",497],["main = hspec spec",2132],["spec = do",3049],["spec = parallel $ do",177]],"useCount":16166},{"word":"specified","context":[["++ \"specified first and cannot be specified multiple times\"",76],["-- add new ones to end, so they're included in order specified",85],["--     only specified domains.",68],["-- or the parameter values fall outside the specified constraints, the",71],["-- The duration is specified in seconds; an integer greater than or equal to 0.",99],["++ \"specified first and cannot be specified multiple times\"",76],["-- | Write a vector to specified index of mutable array of scalars; offset is in scalar elements.",60],["-- The duration is specified in seconds; an integer greater than or equal",60],["-- | Write a vector to specified index of mutable array.",60],["-- | Read a vector from specified index of immutable array.",60]],"useCount":10639},{"word":"split","context":[["-- > split == splitWith . (==)",65],["split _ [] = []",69],["-- elements that fail the predicate. See also 'split'.",95],["-- explanation for this split.",123],["-- split these actions into two functions and place them in separate files.",139],["-- > split '\\n' \"a\\nb\\nd\\ne\" == [\"a\",\"b\",\"d\",\"e\"]",65],["-- > split 'x'  \"x\"          == [\"\",\"\"]",65],["-- split marker ':' with the Windows / DOS one, ';'. The reason being",61],[", split",315],["{-# INLINE split #-}",123]],"useCount":9026},{"word":"src","context":[["case src of",113],["| isStableSource src",98],["= do src <- runIO $ readSource fn",102],["let (before, tyline : later) = splitAt (l-1) (lines src)",116],["Amode src mem_code <- getAmode mem",108],["-- src/Util/GenerateHtmlCombinators.hs:226",108],["(src, code) <- getSomeReg x",135],["-- src/Util/GenerateSvgCombinators.hs:220",266],["-- src/Util/GenerateHtmlCombinators.hs:199",714],["-- src/Util/GenerateHtmlCombinators.hs:249",1024]],"useCount":22908},{"word":"ss","context":[["case ss of",86],["= case ss of",86],["; (ss2,zs) <- repSts ss",86],["; ans' <- wrapGenSyms ss ans",86],["; guardcore <- addBinds ss (repGuards guards)",86],["-- > group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]",69],["-- > group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]",69],["(sub, ss') <- braces n' [] ss",60],["wrapGenSyms ss e' }",86],["= do { (ss,zs) <- repLSts sts;",86]],"useCount":10433},{"word":"st","context":[["st <- getState",771],["happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))",147],["enqueueCommands [stop st]",153],["return st",162],["happySeq r (action nt j tk st sts (r `HappyStk` stk'))",234],["= happyFail 0# tk st sts stk",341],["st <- get",1963],["case st of",396],["= happyFail (1) tk st sts stk",519],["st <- getGHCiState",1386]],"useCount":32962},{"word":"stack","context":[["-- TODO: can we eliminate this lock if it doesn't touch ~/.stack/?",120],["-- | The stack ID.",141],["[HappyState b c] ->            -- state stack",86],["-- > #!/usr/bin/env stack",104],["-- ^ Override stack.yaml",99],["-- > -- stack --install-ghc runghc --package turtle",104],["-- the stack in this case.",118],["-- stack.",67],["#!/usr/bin/env stack",75],["(Path Abs File) -- stack.yaml",76]],"useCount":19624},{"word":"start","context":[["start <- getCPUTime",83],[", start",121],["__attribute__((tc_thread)) void start() {",154],["start <- getCurrentTime",191],["start",185],["start = do",156],["(style, start) <- num",63],["moveTo start",66],["-- parse raw text for one list item, excluding start marker and continuations",66],["start :: Start",79]],"useCount":10772},{"word":"state","context":[["state <- getState",475],["state <- get",503],["{-  We don't need state discarding for our restricted implementation of",132],["-- Moving to a new state after a reduction",134],["-- discard a state",134],["case state of",276],["return state",188],["-- state.",127],["\"state\", 36, 1, 8), (",114],["state",111]],"useCount":18714},{"word":"static","context":[["-- This function creates static content files in the static folder",285],["-- | The base URL for your static files. As you can see by the default",129],["-- domain name. This allows you to use a web server optimized for static",130],["-- costly transference of cookies on static files. For more information,",130],["-- A powerful optimization can be serving static files from a separate",130],["-- | The location of static files on your system. This is a file system",133],[", getStatic :: Static -- ^ Settings for static file serving.",156],["-- This is done to provide an optimization for serving static files from",190],["-- This function creates static content files in the static folder",285],["-- includes database connection settings, static file locations, etc.",198]],"useCount":8228},{"word":"status","context":[["-- | -- | The response status code.",1955],["case status of",488],[", status",92],["-- | The response status code.",2186],["status <-",46],["return status",46],["-- ^ (retval, configuration with proof status and complete output)",52],["<*> x .@? \"status\"",72],["status",83],["unless (status == StatusSuccess) $",88]],"useCount":10203},{"word":"stdout","context":[["hFlush stdout",1875],["hSetBuffering stdout NoBuffering",561],["hSetBuffering stdout LineBuffering",388],["import System.IO (hFlush, stdout)",235],["liftIO $ hFlush stdout",110],["hSetEncoding stdout utf8",104],["import System.IO (stdout)",95],["flushStr str = putStr str >> hFlush stdout",84],[", stdout",60],["defaultFlushOut = FlushOut $ hFlush stdout",58]],"useCount":7450},{"word":"step","context":[["r <- step s",475],["{-# INLINE_INNER step #-}",230],["{-# INLINE_INNER step' #-}",180],[", step",116],["case step of",113],["step expr",98],["step",109],[") (step s)",104],["{-# INLINE [0] step #-}",99],["v <- step readPrec",84]],"useCount":7889},{"word":"stk","context":[["(saved_tok `HappyStk` _ `HappyStk` stk) =",132],["happyShift new_state i tk st sts stk =",134],["happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))",147],["happyMonadReduce k nt fn j tk st sts stk =",132],["drop_stk = happyDropStk k stk",147],["happySeq r (action nt j tk st sts (r `HappyStk` stk'))",234],["= happyFail 0# tk st sts stk",341],["let r = fn stk in  -- it doesn't hurt to always seq here...",129],["= happyFail (1) tk st sts stk",519],["happyReduce k nt fn j tk st sts stk",129]],"useCount":8300},{"word":"stmts","context":[["return stmts",75],["= do instrss <- mapM stmtToInstrs stmts",64],["return (v1, stmts `snocOL` s1, top)",63],["mid_instrs <- stmtsToInstrs stmts",52],["stmts = blockToList nodes",52],["stmts",46],["repLSts stmts = repSts (map unLoc stmts)",43],["repLSts stmts = repSts (map unLoc stmts)",43],["return (v2, stmts `snocOL` s1, top)",42],["stmtsToInstrs stmts",89]],"useCount":9617},{"word":"stptr","context":[["slotHandlerWrapper_int funptr stptr qobjptr cint",894],["qtc_connectSlot_int cobj_sig cstr_sig cobj_slt cstr_slt (toCFunPtr funptr) (castStablePtrToPtr stptr)",894],["then do when (stptr/=ptrNull)",928],["setHandlerWrapper_d funptr stptr funptr_d",7260],["= do when (stptr/=ptrNull)",7260],["stptr   <- newStablePtr (Wrap _handler)",8182],["(freeStablePtr (castPtrToStablePtr stptr))",8192]],"useCount":33610},{"word":"str","context":[["= BuiltinRule { ru_name = fsLit str, ru_fn = name, ru_nargs = 1,",106],["put str",113],["programFindVersion = findProgramVersion \"--version\" $ \\str ->",124],["case str of",243],["case words str of",274],["Data.Aeson.Types.String str -> do GHC.Base.return str",196],["Data.Aeson.Types.String str -> do GHC.Base.return str",196],["return str",180],[", str",174],["str",133]],"useCount":33485},{"word":"strict","context":[["-- function is strict in the starting value.",208],["{-# OPTIONS_GHC -funbox-strict-fields #-}",332],["-- $strict",91],["input `seq` -- strict in the input",85],["-- | /O(n)/ Monadic fold with strict accumulator that discards the result",82],["-- | /O(n)/. A strict version of 'foldl'. Each application of the operator is",68],["-- | /O(n)/ Monadic fold over non-empty vectors with strict accumulator",114],["-- Seq-ing.  If the --strict flag is given, then Happy emits",129],["-- | /O(n)/. A strict version of 'foldr'. Each application of the operator is",68],["{-# OPTIONS_GHC -funbox-strict-fields -Wall -Werror #-}",79]],"useCount":7951},{"word":"string","context":[["(\"string<=?\", strBoolBinop (<=)),",76],["string \"..\"",86],["-- string.",168],["-- filtering by (string, number, boolean). For string fields, the literal",63],["[(string \"pos\", posdoc),",63],["(\"string=?\", strBoolBinop (==)),",74],["string,",68],[", string",190],["-- | Identifies what kind of resource this is. Value: the fixed string",316],["(\"string>=?\", strBoolBinop (>=)),",68]],"useCount":20595},{"word":"stuff","context":[["-- NCG stuff:",64],["Just stuff -> stuff",82],["------ Machine dependant (-m<blah>) stuff ---------------------------",58],["ppr_id_extras_s stuff]",56],["Just stuff -> stuff",82],["-- Via-C compilation stuff",60],["-- Hpc stuff",60],["-- keeping stuff",62],["-- between filepaths and 'other stuff'. The reason for this is that",61],["-- stuff like \" 'a' not in scope \", which is a bit silly",60]],"useCount":8085},{"word":"style","context":[["(style, start) <- num",63],["<*> P.optional (P.xattr (P.name \"font-style\") >>= parseFontStyle)",60],["-- | /O(n)/ Right-to-left Haskell-style scan with strict accumulator",64],["-- | /O(n)/ Haskell-style scan",64],["-- URLs always use posix style '/' separators:",68],["-- Output style options",71],["-- | /O(n)/ Haskell-style scan with strict accumulator",64],["-- | /O(n)/ Right-to-left Haskell-style scan",64],["-- Windows: 'hybrid' support for DOS-style paths in directory lists.",61],["defaultLogAction dflags severity srcSpan style msg",63]],"useCount":7780},{"word":"subsection","context":[["\\subsection{Instances}",69],["\\subsection{Error messages}",111],["\\subsection{Vectorisation declarations}",72],["\\subsection{Errors}",76],["\\subsection{Errors and contexts}",107],["\\subsection{Construction}",58],["\\subsection{Bindings}",52],["\\subsection{Rules}",47],["\\subsection{Data constructors}",47],["\\subsection{Pretty printing}",46]],"useCount":8120},{"word":"subst","context":[["= case lookupVarEnv subst tv of",42],["(subst', bndr') = substBndr subst bndr",65],[", subst",43],["(v', uv) = subst' i v in",48],["(subst', bndr') = substBndr subst bndr",65],["subst _ _ = id",63],["theta' = substTheta subst theta",53],["(subst', b') = subst_opt_bndr subst b",56],["(subst', tv') ->",47],["(subst', b') = subst_opt_bndr subst b",56]],"useCount":15529},{"word":"such","context":[["such that",62],["-- starts running, such as database connections. Every handler will have",281],["-- Throws a 'UsageError' if errors occurred during parsing (such as unknown",60],["-- binary operator, such that",74],["-- if no such element exists.",82],["-- if there is no such element.",82],["-- or 'Nothing' if no such element exists.",82],["-- | This function allocates resources (such as a database connection pool),",102],["-- | Settings for 'widgetFile', such as which template languages to support and",135],["-- This function allocates resources (such as a database connection pool),",208]],"useCount":8962},{"word":"sure","context":[["-- Whenever you change the target, also make sure to set 'ghcLink' to",60],["-- we want to make sure that the bindings for data",60],["-- make sure we clean up after ourselves",64],["-- If you modify anything in this file please make sure that your changes are",47],["-- Hugs users are accustomed to :e, so make sure it doesn't overlap",51],["-- Please make sure you know what is going on when using 'mergeWithKey',",53],["-- If you change layout bindings be sure to use 'mod-shift-space' after",61],["-- Portability : POSIX (not sure)",97],["-- instruction so we have to make sure that the assembler accepts the",86],["-> Maybe SwapFlag   -- Nothing <=> not sure",68]],"useCount":6971},{"word":"syn","context":[["let wsyn = syn { syn_namespace = [] }",88],["case syn of",51],["sc <- expr syn",154],["r <- expr syn",105],["let n = expandNS syn n_in",97],["e <- expr syn",96],["t <- typeExpr (disallowImp syn)",84],["ty <- typeExpr (allowImp syn)",80],["ds <- some $ fnDecl syn",66],["tm <- simpleExpr syn",56]],"useCount":9353},{"word":"syntax","context":[["\"<rdf:RDF xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\",85],["-- value is interpreted as a regular expression using RE2 syntax. The",63],["-- The App {..} syntax is an example of record wild cards. For more",53],["++ \". To use this new syntax the package need to specify at least \"",52],["-- 1) read the file in as a BS and syntax highlight it as before",50],["-- check syntax of cabal-version field",75],["-- | Highlight source code using this syntax definition.",119],["{- This module was generated from data in the Kate syntax",119],["-- explanation of the syntax, please see:",283],[", (\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\") ]) )",80]],"useCount":9305},{"word":"t","context":[["-- don't traverse?",293],["where t' = untypeType (infoType info) (infoSize info)",305],["let renamed = fromJust $ GHC.tm_renamed_source t",317],["let parsed = GHC.pm_parsed_source $ GHC.tm_parsed_module t",357],["t",367],["case t of",2369],["[t| () |],",426],["= case t of",877],["return t",1029],["char '\\t',",1081]],"useCount":241227},{"word":"t1","context":[["= do { k1 <- lintType t1",58],["toSQL t1 pa $ \\p1 -> toSQL t2 pa $ \\p2 -> toSQL t3 pa $ \\p3 ->",48],["-- Given a type-level list (t1 ': t2), see if we can print",48],["-- (gather ty) = (tys, Nothing) means ty is a list [t1, .., tn]",48],["-> t1",57],["| otherwise = goDifferentHash s h1 h2 t1 t2",64],["= splitS (SubC γ t1 t2)",76],["repTapp tcon t1",86],["t1   <- repLTy t",86],["t1 <- getCurrentTime",153]],"useCount":19653},{"word":"t2","context":[["; k2 <- lintType t2",58],["| otherwise = goDifferentHash s h1 h2 t1 t2",64],["t2 <- getCurrentTime",52],["forValidUnitTree $ \\t2 ->",51],["-> t2",50],["--             = (tys, Just tl) means ty is of form t1:t2:...tn:tl",48],["toSQL t1 pa $ \\p1 -> toSQL t2 pa $ \\p2 -> toSQL t3 pa $ \\p3 ->",48],["-- Given a type-level list (t1 ': t2), see if we can print",48],["= splitS (SubC γ t1 t2)",76],["-> CInt -> Ptr t1 -> CInt -> Ptr t2 -> CInt -> Ptr t3 -> CInt -> Ptr t4",47]],"useCount":17689},{"word":"table","context":[["-- | The ID of the route table.",46],["table = try $ do",62],["table $ do",45],["blocks -> -- special case for code without info table:",46],[", escapeDBName table",152],["<table>",152],[", escape table",136],[", table",121],["table =",70],["-- Generating a table-branch",64]],"useCount":8727},{"word":"tag","context":[["-- default-layout is the contents of the body tag, and",244],["-- Place Javascript at bottom of the body tag so the rest of the page loads first",142],["PU [NodeG [] tag text] Token",102],["case tag of",453],[", tag",244],["instance (GenericXMLString tag, Show tag, GenericXMLString text, Show text) =>",100],["instance (GenericXMLString tag, Show tag, GenericXMLString text, Show text) =>",100],["tag <- getWord8",95],["tag",91],["XmlPickler [NodeG [] tag text] bound,",76]],"useCount":12355},{"word":"take","context":[["take = G.take",92],["{-# INLINE take #-}",235],[", take",209],["slice, init, tail, take, drop, splitAt,",107],["take = G.take",92],["printTest ((take 7 [x, x-1 ..]))",84],["init, tail, take, drop, splitAt, reverse,",62],["-- Note that @'splitAt' n v@ is equivalent to @('take' n v, 'drop' n v)@",61],["-- fromListN n xs = 'fromList' ('take' n xs)",61],["-- fields to take advantage of labels to organize and search for results",59]],"useCount":12102},{"word":"target","context":[["target",170],["tb <- getsState $ getActorBody target",77],["addTarget target",79],["Just target -> return target",81],["Just target -> return target",81],["target -> die",95],["| name <- target ]",107],["=> GLenum -- ^ @target@.",174],["-- to the target vector.",102],["case target of",280]],"useCount":11919},{"word":"tc","context":[["| Just cls <- tyConClass_maybe tc",127],["= do { tc1 <- lookupLOcc tc           -- See note [Binders and occurrences]",123],["tc_name = tyConName tc",79],["| isAlgTyCon tc",76],["Just (tc, tys)",67],[", (rep_tc, _, _) <- tcLookupDataFamInst fam_envs tc tys",68],["= pprPromotionQuote tc <>",70],["| Just (tc, _) <- splitTyConApp_maybe ty",74],[", isTypeFamilyTyCon tc",71],["(tc,_) <- tcSplitTyConApp_maybe ty",72]],"useCount":33765},{"word":"term","context":[["case term of",121],["postgreSQLMakeQuery exts term = case term of",55],["; term <- addBinds freshNames $",47],["t <- term",117],["term",62],["term =",60],["postgreSQLMakeQuery exts term = case term of",55],["; wrapGenSyms fresh_names term }",53],["return term",51],["; wrapGenSyms freshNames term }",47]],"useCount":8561},{"word":"test","context":[["test :: IO ()",197],["test = do",344],["-- the top-level so that real test data can be incrementally added.",196],["-- Auto-generated: the actual test selection needs to be manually placed into",196],["test",163],["test build obj = do",101],["test :: Test",98],["quiet = not show_all && test f default_dflags == is_on",96],["-- server: Snap\\/test",92],["test =",87]],"useCount":17694},{"word":"tests","context":[["tests =",866],["tests :: TestTree",1022],["main = defaultMain tests",983],["tests :: [Test]",905],["tests :: Test",571],["( tests",542],["tests = [",340],["tests",252],["tests :: [TestTree]",224],["tests = []",153]],"useCount":13262},{"word":"text","context":[["text \", \",",232],["GenericXMLString text, Show text) =>",209],["GenericXMLString text, Show text) =>",209],["$$ text \"\"",294],[", text \"\"",321],["(PP.text . show)",536],["GenericXMLString text, Show text,",199],["GenericXMLString text, Show text,",199],[", text",194],["$+$ Disp.text \"\"",181]],"useCount":104974},{"word":"than","context":[["-- The duration is specified in seconds; an integer greater than or equal to 0.",99],["rather than",94],["-- although this is used for more than just that failure case.",76],["bh <- openBinMem (3*1024) -- just less than a block",65],["-- On Windows, various fields have $topdir/foo rather than full",64],["-- But more efficiently than using length on the intermediate list.",63],["-- number of available results is larger than maxResults, Compute Engine",63],["-- contain less than @n@ elements in which case an empty vector is returned.",61],["-- rather than",61],["-- contain less than @n@ elements in which case it is returned unchanged.",61]],"useCount":18306},{"word":"that","context":[["-- Note that in the presence of multiple contexts with different capabilities,",935],["Note that",261],["Operations that have an 'AWSPager' instance can transparently perform subsequent",206],["Some AWS operations return results that are incomplete and require subsequent",206],["-- Note that",151],["-- since that is done by RnNames.extendGlobalRdrEnvRn",120],["-- title beginning with fig: indicates that the image is a figure",129],["-- Note that this is really half the story; in Application.hs, mkYesodDispatch",144],["Notice that",160],["-- the top-level so that real test data can be incrementally added.",196]],"useCount":160007},{"word":"the","context":[["-- * Destructuring the Response",5213],["documentation and/or other materials provided with the distribution.",990],["-- Use one of the following lenses to modify other fields as desired:",19628],["* Redistributions in binary form must reproduce the above",332],["with the distribution.",329],["--    documentation and/or other materials provided with the distribution.",381],["-- Note that in the presence of multiple contexts with different capabilities,",935],["-- actually making the request, and provides an error response. If you have",291],["-- See Note [Updating flag description in the User's Guide]",589],["-- | Identifies what kind of resource this is. Value: the fixed string",316]],"useCount":920128},{"word":"their","context":[["-- without bang, show items in context of their parents and omit children",51],["-- and names them based on a hash of their content. This allows",285],["applied to their respective values. For example, the following",85],["-- their own equality test.",62],["-- values and their indices",61],["-- They should have their own fields instead.",60],["-- supply their own equality test.",54],["-- annotate groups of imports with their import modules",51],["-- next list request. Subsequent list requests will have their own",50],["-- The default number of workspaces (virtual screens) and their names.",49]],"useCount":9629},{"word":"them","context":[["-- where the generic optimizer will have put them.",56],["-- and names them based on a hash of their content. This allows",285],["-- them.",172],["-- Suppress all coercions, them replacing with '...'",57],["-- and puts them in the \"settings\" file in $topdir. The advantage of",60],["-- split these actions into two functions and place them in separate files.",139],["-- functions. You can spread them across multiple files if you are so",135],["-- TODO: problem here is we need the .c files built first, so we can load them",86],["-- if we go deeper when we go inside them then we get ugly things",68],["-- process them in the right order",61]],"useCount":18434},{"word":"then","context":[["then do",11966],["then",4157],["then return 0",947],["then return ()",4054],["then return False",2328],["then return $ objectCast x0obj",2320],["then Nothing",2055],["then return Nothing",1882],["then []",1696],["then return []",982]],"useCount":127200},{"word":"there","context":[["-- from there, and then create the real foundation.",87],["-- comments there for more details.",205],["-> IO (Maybe [a])              -- ^ Returns Nothing if there is no valid solution, otherwise an optimal solution",63],["-- Fails if there are any errors",63],["-- send emails. Unfortunately, there are too many different options for us to",129],["-- the comments there for more details.",104],["-- if there is no such element.",82],["-- TODO: there's no need to find the longest",73],["-- items you want in the response. If there are additional items beyond the",74],["-- | A flag that indicates whether there are more items to return. If your",73]],"useCount":26634},{"word":"these","context":[["text \"    Call hs_init_ghc() from your main() function to set these options.\")",84],["-- gcc.  The configure script decides which of these options we need,",60],["-- split these actions into two functions and place them in separate files.",139],["-- The majority of the code you will write in Yesod lives in these handler",135],["-- We'll need these",108],["-- Static setting below. Changing these requires a recompile",99],["-- As well as dependency analysis, we need these for the",63],["-- pass these a sequence of options on the command-line. Rather than",61],["-- Note ordering in these tests: the left argument is",61],["--     Don't generate \"common\" symbols - these are unwanted",60]],"useCount":16293},{"word":"theta","context":[[", not (null tvs && null theta)",50],["| not (null tvs && null theta)",40],["(ips, non_ips) = partition isIPPred theta",41],["theta' = substTheta subst theta",53],["mkFunTys theta $",37],["theta' = substTheta subst theta",53],["eq_spec theta",55],[", ds_theta = theta",64],["(tvs, theta, tau) = tcSplitSigmaTy ty",67],[", sig_theta = theta",68]],"useCount":7265},{"word":"they","context":[["-- Turn those condition codes into integers now (when they appear on",49],["i.e. they fill the top bits with 1 if the @x@ is negative",49],["-- they appeared.",60],["-- cause confusion when they are translated into -I options",61],["-- Most flags are dynamic flags, which means they can change from compilation",60],["-- in order to check whether they need to be recompiled.",60],["-- NOTE: We only read .ghci files if they are owned by the current user,",51],["-- add new ones to end, so they're included in order specified",85],["-- they're of different types)",64],["-- to whatever format they're expected to be on a particular platform.",61]],"useCount":19175},{"word":"thing","context":[["thing <- tcLookupGlobal name",102],["| Just thing <- wiredInNameTyThing_maybe name",78],["-- a good thing anyway, but it seems fragile.",60],["-> TcM ([(RecFlag, LHsBinds TcId)], thing)",96],["-- (If we're linking then the -o applies to the linked thing, not to",83],["-> ([Name] -> RnM (thing, FreeVars))",127],["; return (((stmts1 ++ stmts2), thing), fvs) }",58],["; case thing of",215],["case thing of",145],["= do  { thing <- thing_inside",64]],"useCount":18505},{"word":"thing_inside","context":[["= do  { thing <- thing_inside",64],["thing_inside",467],["= do  { (pat', res) <- tc_lpat pat pat_ty penv thing_inside",50],["thing_inside }",57],["when b thing_inside",120],["penv thing_inside",90],["pats penv thing_inside",75],["thing_inside (b':bs')",70],["; setGblEnv env' thing_inside }",69],["captureConstraints thing_inside",59]],"useCount":10280},{"word":"things","context":[["-- otherwise things like stub.c files don't get compiled",60],["-- * Tidying type related things up for printing",57],["-- bad things get if you turn it off!",57],["-- Apple prefers to do things the other way round.",60],["-- This function does three things:",139],["-- You shouldn't need to look things up in rawSettings directly.",60],["-- Only called on *zonked* things, hence no need to worry about flatten-skolems",94],["-- When you un-set f, however, we don't un-set the things it implies",78],["-- if we go deeper when we go inside them then we get ugly things",68],["-- Implicit imports are things in the prelude. e.g System.IO when print is used.",60]],"useCount":13412},{"word":"this","context":[["-- | Project ID for this request.",241],["Warning   : this file is machine generated - do not modify.",1354],["-- If you do not find this file, copies can be found by writing to:",536],["-- | Identifies what kind of resource this is. Value: the fixed string",316],["Consider this:",227],["import \"this\" Text.Numeral.Test ( TestData )",227],["-- The code in this file, and the program it is a part of, is",224],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["-- While working on this module you are encouraged to remove it and",254],["-- value passed to hamletToRepHtml cannot be a widget, this allows",243]],"useCount":113546},{"word":"through","context":[["-- Jump through some hoops to get the",51],["-- The fields accessible through corresponding lenses are:",8639],["requests, correctly setting Markers and other request facets to iterate through",206],["-- argument through the map in ascending order of keys.",186],["-- Push the input through the DFA, remembering the most recent accepting",86],["-- argument through the map in descending order of keys.",64],["-- through",63],["-- | Some modules have dependencies on others through the DynFlags rather than textual imports",60],["-- required the IO monad to be threaded through the command-line",60],["-- get the parameters first, to pass through to any where block",55]],"useCount":14767},{"word":"time","context":[["-- In (unlikely) bad cases, this function's time complexity degrades",130],["1000 objects at a time, and you must send subsequent requests with the",206],["time <- getCurrentTime",204],["time <- liftIO getCurrentTime",176],["-- at compile time to decrease the number of http requests.",75],["time",75],["-- fall back to compile-time values, set to [] to require values at runtime",105],["-- Operation comments contain the operation time complexity in",90],["-- time.",88],["-- time",82]],"useCount":13409},{"word":"tk","context":[["happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))",147],["happyMonadReduce k nt fn j tk st sts stk =",132],["happyShift new_state i tk st sts stk =",134],["= happyFail 0# tk st sts stk",341],["case tk of {",132],["happyAccept j tk st sts (HappyStk ans _) =",130],["happyReduce k nt fn j tk st sts stk",129],["happySeq r (action nt j tk st sts (r `HappyStk` stk'))",234],["= happyFail (1) tk st sts stk",519],["happyRest) tk",1557]],"useCount":8139},{"word":"tm","context":[["| otherwise = tm",93],["= lift $ tfail $ Msg (\"No explicit types on left hand side: \" ++ show tm)",78],["A Rule of the Game (tm) for Amodes: use of the addr bit must",76],["return $ Just (n, SynTm tm)",70],["= do (tm, ty) <- elabVal recinfo ERHS t",69],["= lift $ tfail $ Msg (\"Attempting concrete match on polymorphic argument: \" ++ show tm)",104],["case tm of",127],["return tm",136],["elab ist toplevel ERHS [] (sMN 0 \"tac\") tm",194],["tm <- get_term",314]],"useCount":23724},{"word":"to","context":[["-- Use one of the following lenses to modify other fields as desired:",19628],["-- value passed to hamletToRepHtml cannot be a widget, this allows",243],["-- This instance is required to use forms. You can modify renderMessage to",243],["-- How to run database actions.",247],["-- While working on this module you are encouraged to remove it and",254],["-- access to the data present here.",282],["-- expiration dates to be set far in the future without worry of",285],[">>= maybe (Prelude.error \"Nothing to return\") return)",609],["maybe (Prelude.error \"Nothing to return\") return)",1656],["-- If you do not find this file, copies can be found by writing to:",536]],"useCount":415014},{"word":"toJSON","context":[["VM.unsafeWrite mv 0 (toJSON a)",231],["toJSON = toJSONText",1617],["{-# INLINE toJSON #-}",1200],["VM.unsafeWrite mv 1 (toJSON b)",229],["VM.unsafeWrite mv 2 (toJSON c)",211],["VM.unsafeWrite mv 3 (toJSON d)",193],["VM.unsafeWrite mv 4 (toJSON e)",175],["toJSON = const (toJSON Empty)",169],["toJSON = const (toJSON Empty)",169],["toJSON = Number . fromIntegral",183]],"useCount":11662},{"word":"toList","context":[["showString \"fromList \" . shows (toList m)",65],[", toList",709],["import Data.Foldable (toList)",343],["{-# INLINE toList #-}",341],["$ Set.toList",140],["toList,",137],["toList = toAscList",81],[". Map.toList",74],["M.toList $",64],[". M.toList",62]],"useCount":11414},{"word":"toPath","context":[["buildMods opts ns = do let f = map (toPath . showCG) ns",16],["let f = toPath (showCG mod)",15],["moduleArg = genArg \"module\" (fmap (toPath . fst) P.identifier)",13],["toPath n = foldl1' (</>) $ splitOn \".\" n",22],["(fmap (\\(n, fc) -> (toPath n, fc)) newName)",17],["toPath = const \"/\"",7207],["where toPath n = foldl1' (</>) $ splitOn \".\" n",33],["return $ ImportInfo reexport (toPath id)",17],["toPath x = case x of",20],["toPath = foldl1' (</>) . ns",27]],"useCount":7447},{"word":"too","context":[["-- Disable -dynamic-too on Windows (#8228, #7134, #5987)",55],["-- so don't pull on it too early",54],[",\"' is too old.\\nVersion \"",54],["++ \"probably because too many return values.\"",54],["let -- We can't build with dynamic-too on Windows, as labels before",56],["-- that this will cause too much breakage for users & ':' will",61],["-- too.",71],["\"The following file name is too long to store in a portable POSIX \"",81],["-- send emails. Unfortunately, there are too many different options for us to",129],["warn    = \"-dynamic-too is not supported on Windows\"",55]],"useCount":8561},{"word":"top","context":[["| ProfAutoAll        -- ^ top-level and nested functions are annotated",60],["-- | Does this target retain *all* top-level bindings for a module,",59],["<p><a href=\"#top\" class=\"page_top\">На початок</a></p>",538],["| ProfAutoTop        -- ^ top-level functions annotated only",60],["return (v1, stmts `snocOL` s1, top)",63],["-- business.  Almost all top-level nodes of any real importance are",64],["-- parse (a %partial parser).  We must ignore the saved token on the top of",118],["; mapM_ (\\a -> a loc) ann -- Add any API Annotations to the top SrcSpan",145],["-- the top-level so that real test data can be incrementally added.",196],["<homeID>top</homeID>",716]],"useCount":22496},{"word":"tree","context":[["-- passed back up the tree.",57],["'True', a /hanging/ tree is shown otherwise a rotated tree is shown. If",53],["'True', a /hanging/ tree is shown otherwise a rotated tree is shown. If",53],["let (ns, tree) = getCases cd in",57],["-- tree-transformer that either leaves the subtree untouched, or replaces it",59],["-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen",64],["Now, given a tree (the argument to an CmmLoad) that references memory,",76],["case tree of",91],["(head (giveTree [tree] [\"root\",\"http\"]))",141],["tree",801]],"useCount":7211},{"word":"try","context":[["lexeme $ try $",97],["try $ do",108],[", try",126],["= P'.try",3025],["import Control.Exception (try)",105],["-- | Given something like /usr/local/bin/ghc-6.6.1(.exe) we try and find a",80],["endline = try $ do",79],["<|> try (do",96],["(try $ do",92],["try (do",85]],"useCount":24628},{"word":"ts","context":[["ts",151],["case ts of",164],[". go tokEnd ts",72],["annotate mts = concatMap (\\(m,ts)->labels m:ts)",51],["unionsWith f ts",62],["return ts",81],["= foldlStrict (unionWith f) empty ts",60],["annotate mts = concatMap (\\(m,ts)->labels m:ts)",51],["name = lnodeText $ objectByPredicate mfName ts,",50],["ts <- get",50]],"useCount":13224},{"word":"tv","context":[["= ASSERT2( isMetaTyVar tv, ppr tv )",73],["case tcTyVarDetails tv of",408],["= case tcTyVarDetails tv of",319],["= ASSERT2( isTcTyVar tv, ppr tv )",286],["= ASSERT2( isTcTyVar tv, ppr tv )",286],["= ASSERT( isTcTyVar tv )",133],["let tv' = normalise ctxt env tv",117],["kind = tyVarKind tv",97],["let tv' = normalise ctxt env tv",117],["= do { mb_ty <- isFilledMetaTyVar_maybe tv",110]],"useCount":25122},{"word":"tvs","context":[["; tvs' <- reifyTyVars tvs",70],[", ds_name = dfun_name, ds_tvs = tvs",51],["; returnJustL $ TyClD (DataDecl { tcdLName = tc', tcdTyVars = tvs'",56],["= Just (tvs, rhs, co)",60],[", not (null tvs && null theta)",50],["-> [TyVar] -- the tvs in the instance head",50],["mkDataTypeEqn dflags overlap_mode tvs cls cls_tys",64],["(tvs, theta, tau) = tcSplitSigmaTy ty",67],["; tvs' <- reifyTyVars tvs",70],["; dec <- addTyClTyVarBinds tvs $ \\bndrs ->",98]],"useCount":16463},{"word":"two","context":[["-- | /O(n)/ Copy an immutable vector into a mutable one. The two vectors must",122],["-- split these actions into two functions and place them in separate files.",139],["-- We break up the default layout into two components:",244],["-- | Move the contents of a vector. The two vectors must have the same",102],["-- The following two functions can be used to combine multiple CSS or JS files",75],["-- | /O(n)/ Split the vector in two parts, the first one containing those",122],["-- -   Cannot end with a hyphen or contain two consecutive hyphens",103],["-- | /O(n+m)/. Difference with a combining function. When two equal keys are",68],["-- Override the above two destinations when a Referer: header is present",67],["-- | 'span' @p xs@ breaks the ByteString into two segments. It is",66]],"useCount":17595},{"word":"txt","context":[["return (attr, txt)",119],["txt <- s",49],["when (null txt) $ fail \"Parser matched no text\"",119],[", synStPrevNonspace = synStPrevNonspace st || not (all isSpace txt) }",119],["updateState $ \\st -> st { synStPrevChar = last txt",119],["withAttribute attr txt = do",119],["case txt of",103],["(\\h -> hPut h txt)",65],["(\\hdl -> hPut hdl txt)",54],["capt <- if null txt",49]],"useCount":6954},{"word":"ty","context":[["ty <- goal",151],["case ty of",772],["ty :: CmmType",288],["(return ty)",211],["ty = vecVmmType vcat n w",180],["= do  { ty' <- zonkTcTypeToType env ty",155],["= do  { ty' <- zonkTcTypeToType env ty",155],["= case tcSplitTyConApp_maybe ty of",158],["= go ty",163],["ty",160]],"useCount":101383},{"word":"ty1","context":[["k = typeKind ty1",75],["go ty1 (TyVarTy tv)",48],["k1 = typeKind ty1",49],["Just ty1' -> go ty1' ty2",52],["Just ty1' -> go ty1' ty2",52],["Just ty2' -> go ty1 ty2'",52],["go ty1 ty2",54],["; ty2 <- reifyType ty1",58],["--    then TypeSize = sizeTypes [ty1, .., tyn]",60],["-- If oriented then ty1 is actual, ty2 is expected",68]],"useCount":15307},{"word":"ty2","context":[["-- If oriented then ty1 is actual, ty2 is expected",68],["go ty1 ty2",54],["Just ty2' -> go ty1 ty2'",52],["Just ty1' -> go ty1' ty2",52],["Just ty2' -> go ty1 ty2'",52],["ki2 = typeKind ty2",51],["extract_lty t_or_k ty2 acc",56],["go (TyVarTy tv) ty2",48],["k2 = typeKind ty2",63],["; ty2 <- reifyType ty1",58]],"useCount":13712},{"word":"tycon","context":[["; return (ATyCon tycon) }",93],["untag_Expr tycon [(a_RDR, ah_RDR)] $",135],["data_cons = tyConDataCons tycon",175],["; tycon <- fixM $ \\ tycon -> do",64],["; return [ATyCon tycon] }",67],["{ tycon   = str",68],["= do { tycon' <- lookupLocatedTopBndrRn tycon",79],["= do { tycon' <- lookupLocatedTopBndrRn tycon",79],["; return tycon }",69],["-- Precondition: the tycon is saturated (or over-saturated)",68]],"useCount":18902},{"word":"type","context":[["<type>javax.help.IndexView</type>",678],["<type>org.zaproxy.zap.extension.help.ZapTocView</type>",598],["{-# OPTIONS_GHC -fno-warn-type-defaults #-}",445],["<type>javax.help.IndexView</type>",678],["<type>javax.help.SearchView</type>",721],["<type>javax.help.SearchView</type>",721],["<type>javax.help.FavoritesView</type>",621],["<type>org.zaproxy.zap.extension.help.ZapTocView</type>",598],["<type>javax.help.FavoritesView</type>",621],["type Name = String",667]],"useCount":201218},{"word":"types","context":[["-- See Note [Free variables of types]",236],["-- * Main data types",82],["-- $types",83],["where types = xs :: [Int]",93],["-- Data types",105],["-- types",131],["{-# LANGUAGE UndecidableInstances #-} -- Note [Pass sensitive types]",158],["-- types.",159],["-- for proper types",113],["-- * Data types",218]],"useCount":33722},{"word":"tys","context":[["| length tys' == n         -- Saturated",56],["(ptr_i, ws, terms1) <- go ptr_i ws tys",66],["Just (tc, tys)",67],["<+> pprType (mkClassPred clas tys))",68],[", (rep_tc, _, _) <- tcLookupDataFamInst fam_envs tc tys",68],["tys1 <- repLTys tys",129],["| Just (tc, tys) <- splitTyConApp_maybe ty",57],["= do { (ctxt', tc', typats') <- cvt_tyinst_hdr ctxt tc tys",56],["put_ bh tys",55],["instantiate axiom: ax_co : F tys ~ rhs",53]],"useCount":26567},{"word":"tyvars","context":[["full_bind = AbsBinds { abs_tvs      = tyvars",47],["tyConTyVars      = tyvars,",44],["tyvars         = dataConUnivTyVars data_con",42],[", ib_tyvars = tyvars",64],["mkLams tyvars $ mkLams dicts $",60],["-- | Add the kind variables free in the kinds of the tyvars in the given set.",50],["mini_subst = mkTvSubst (mkInScopeSet (mkVarSet tyvars)) mini_env",49],["= bindIfaceTyVars_AT tv_bndrs $ \\ tyvars -> do",48],["-- Invariant: length tyvars = arity",39],["= ASSERT( all isImmutableTyVar tyvars )",76]],"useCount":10089},{"word":"u","context":[["u <- newUnique",105],["putUnknownField u'f msg = msg{unknown'field = u'f}",94],["return u",245],["u",96],["putUnknownField u'f msg = msg{unknown'field = u'f}",94],["bounds (UArray l u _ _) = (l,u)",138],["getBounds (STUArray l u _ _) = return (l,u)",138],["bounds (UArray l u _ _) = (l,u)",138],["case u of",145],["getBounds (STUArray l u _ _) = return (l,u)",138]],"useCount":18724},{"word":"unLoc","context":[["(sL (comb2 happy_var_1 happy_var_3) (unLoc happy_var_2)",242],["= case unLoc op of",102],["(sL (comb2 happy_var_1 happy_var_3) (happy_var_3 : unLoc happy_var_1)",79],["(sL (comb2 happy_var_1 happy_var_2) (unLoc happy_var_2)",72],["= sep [pprCmdArg (unLoc arg1), hsep [pprInfixOcc v, pprCmdArg (unLoc arg2)]]",67],["= sep [pprCmdArg (unLoc arg1), hsep [pprInfixOcc v, pprCmdArg (unLoc arg2)]]",67],["=  unLoc (ideclName d1) == unLoc (ideclName d2)",49],["=  unLoc (ideclName d1) == unLoc (ideclName d2)",49],["iiModuleName (IIDecl d)   = unLoc (ideclName d)",49],["(sL (comb2 happy_var_1 happy_var_2) (unLoc happy_var_1)",67]],"useCount":12035},{"word":"undefined","context":[["alignment _ = alignment (undefined :: CInt)",163],["_ -> undefined",159],["main = undefined",150],["f = undefined",166],["return undefined",125],["= undefined",123],["coarbitrary = undefined",122],["foo = undefined",114],["undefined",669],["where loop s n | s `seq` n `seq` False = undefined",707]],"useCount":12048},{"word":"unless","context":[["unless (S.null bs) $ do",101],["import Control.Monad (unless)",795],["unless exists $ do",205],["unless (null extraArgs) $",146],["import Control.Monad (unless, when)",130],["unless (exitcode == ExitSuccess) $ do",101],["import Control.Monad ( unless )",100],["import Control.Monad ( when, unless )",92],["import Control.Monad (when, unless)",211],["import           Control.Monad (unless)",88]],"useCount":13872},{"word":"unlines","context":[["expected = unlines",78],["$(logInfo) $ format $ unlines",79],["$ unlines",268],["unlines [",267],["unlines",258],["indent = dropWhileEnd isSpace . unlines . fmap (\\line -> \"  \" ++ line) . lines",106],["++ unlines [ showExclusionReason (packageId pkg') reason",99],["(unlines",96],["unlines $",88],[", unlines",79]],"useCount":7915},{"word":"unpack","context":[["import Data.Text (unpack)",192],["import Data.Text (Text, unpack)",172],["then fail $ \"cannot unpack array of length \" ++",120],["import Data.ByteString.Char8 (pack, unpack)",118],["import Data.ByteString.Char8 (unpack)",112],["req <- parseUrl $ T.unpack url",104],["else fail $ \"cannot unpack array of length \" ++",100],["{-# INLINE unpack #-}",90],["import Data.Text (pack, unpack)",82],["import Data.Text (Text, pack, unpack)",197]],"useCount":9229},{"word":"unsafe","context":[["foreign import javascript unsafe",2745],["foreign import javascript unsafe \"$1[\\\"type\\\"]\" js_getType ::",123],["foreign import ccall unsafe",123],["foreign import javascript unsafe \"$1[\\\"length\\\"]\" js_getLength ::",108],["foreign import javascript unsafe \"$1[\\\"y\\\"]\" js_getY ::",105],["foreign import javascript unsafe \"$1[\\\"x\\\"]\" js_getX ::",105],["foreign import javascript unsafe \"$1[\\\"name\\\"]\" js_getName ::",102],["foreign import javascript unsafe \"$1[\\\"width\\\"]\" js_getWidth ::",99],["foreign import javascript unsafe \"$1[\\\"item\\\"]($2)\" js_item ::",85],["foreign import javascript unsafe \"$1[\\\"height\\\"]\" js_getHeight ::",84]],"useCount":11724},{"word":"unused","context":[["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",96],["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",12002],["{-# OPTIONS_GHC -fno-warn-unused-matches #-}",5481],["{-# OPTIONS_GHC -fno-warn-unused-binds   #-}",5323],["{-# OPTIONS_GHC -fno-warn-unused-imports    #-}",2618],["{-# OPTIONS_GHC -fno-warn-unused-binds      #-}",2316],["{-# OPTIONS_GHC -fno-warn-unused-do-bind #-}",370],["{-# OPTIONS_GHC -fno-warn-unused-binds #-}",247],["{-# OPTIONS_GHC  -fno-warn-unused-imports #-}",109],["-- {-# OPTIONS_GHC -fno-warn-unused-binds   #-} -- TEMP",102]],"useCount":32618},{"word":"up","context":[["-- problems by tracing back the chain of events leading up to this event.",69],["-- make sure we clean up after ourselves",64],["-- Set up i18n messages. See the message folder.",166],["-- | Loads up any necessary settings, creates your foundation datatype, and",85],["pagination. For example, the 'ListObjects' operation of Amazon S3 returns up to",206],["-- We break up the default layout into two components:",244],["-- You shouldn't need to look things up in rawSettings directly.",60],["-- Wrap up",60],["-- Clean up after ourselves",60],["-- The fusion is enabled up to phase 2 included. If it does not succeed,",59]],"useCount":22102},{"word":"update","context":[["10 -> P'.getBareMessageWith update'Self",1065],["{-# INLINE update #-}",136],[", update",371],["11 -> P'.getMessageWith update'Self",1065],["update'Self wire'Tag old'Self",1159],["-> Bool   -- update, or check",72],["update,",72],["10 -> P'.getBareMessageWith (P'.catch'Unknown update'Self)",94],["11 -> P'.getMessageWith (P'.catch'Unknown update'Self)",94],["update",97]],"useCount":12307},{"word":"us","context":[["-- just using a list of Strings, we use a type that allows us to distinguish",61],["= do { us <- getUniqueSupplyM",64],["-- Please feel free to contact us at licensing@pivotmail.com with any",65],["= do  { us <- newUniqueSupply",61],["let initTopSRT = initUs_ us emptySRT",76],["-- this type gives us a handle on transforming filenames, and filenames only,",61],["us <- mkSplitUniqSupply 'S'",77],["-- us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito.",95],["-- send emails. Unfortunately, there are too many different options for us to",129],["us <- getSelfPid",153]],"useCount":12223},{"word":"usage","context":[["usage :: String",209],["usage :: IO ()",203],["usage = do",192],["-- $usage",1350],["_ -> usage",88],["usage",89],["-- Basic usage:",99],["-- ** Restricting memory usage",123],["-- Restricting memory usage",123],["-- Example usage:",143]],"useCount":7541},{"word":"use","context":[["use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",140],["Error matchers are designed for use with the functions provided by",199],["getPkgDatabases verbosity False{-modify-} False{-use user-}",138],["-- /WARNING:/ This operation can be very inefficient. If at all possible, use",132],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",131],["Redistribution and use in source and binary forms, with or without",1376],["-- you to use normal widget features in default-layout.",243],["-- This instance is required to use forms. You can modify renderMessage to",243],["-- Redistribution and use in source and binary forms, with or without",846],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217]],"useCount":54316},{"word":"used","context":[["-- although this is used for more than just that failure case.",76],["-- This is used only during the building of the data structures.",76],["-- used by wrappers",79],["-- is used.",81],["-- The value \"NONE\" can be used to specify unlimited duration.",87],["-- The following two functions can be used to combine multiple CSS or JS files",75],["-- To see how this value is used, see urlRenderOverride in Foundation.hs",102],["-- | Get the 'Extra' value, used to hold data from the settings.yml file.",110],["-- used.",111],["--   resources declared below. This is used in Handler.hs by the call to",114]],"useCount":39670},{"word":"user","context":[["<*> o .: \"user\"",84],["alex_scan_tkn user orig_input len input s last_acc =",85],["-- instruction set. Note that the user can still override this",86],["(choiceOpt [ (Flag UserPackageDB, ([],[\"user\"]),",87],["case user of",115],["getPkgDatabases verbosity False{-modify-} False{-use user-}",138],["user",193],["-- Where to send a user after successful login",217],["-- Where to send a user after logout",217],["-- user.",229]],"useCount":21775},{"word":"uses","context":[["-- generic case that uses casts and pointer arithmetic",50],["-- TODO: find uses and destroy them, doing this case analysis at call sites",51],["-- The implementation uses the efficient /hedge-union/ algorithm.",51],["-- in the settings file (as \"lookup\" uses the first match for the",59],["-- backwards compatibility.  Cabal uses -XHaskell98 by",60],["-- exeNameReal, the name that GHC really uses (with .exe on Windows)",65],["-- This implementation uses memchr(3).",74],["-- GHC uses several kinds of name internally:",98],["-- The implementation uses an efficient /hedge/ algorithm comparable with /hedge-union/.",115],["\"The package uses full version-range expressions \"",50]],"useCount":8562},{"word":"using","context":[["-- | Which Persistent backend this site is using.",79],["-- evaluated before using the result in the next application. This",208],["-- Perform database migration using our application's logging settings.",154],["-- | Highlight source code using this syntax definition.",119],["-- | Parse an expression using appropriate local context.",119],["-- This 'StateVar' can be modified using '$=' and the current value retrieved with 'get'.",115],["--   and fails using @'typeMismatch' expected@ otherwise.",107],["-- You can perform request by using 'call':",91],["C.using \"namespace Urho3D\"",85],["--TODO: this should work using exclude constraints instead",69]],"useCount":21125},{"word":"v","context":[["v <- readRemoteRef r",272],["Just v  -> return v",260],["Prelude'.return (Prelude'.foldl (\\ v f -> f v) P'.defaultValue mods)",869],["return v",1494],["case v of",1543],["Prelude'.return (Prelude'.foldl (\\ v f -> f v) P'.defaultValue mods)",869],["parseJSON (Object v) =",647],["parseJSON (Object v) = do",425],["Just v -> return v",337],["Just v -> return v",337]],"useCount":119217},{"word":"v1","context":[["\"v1\" :>",1210],["= let r = fn v1 v2 in",129],["happySpecReduce_1 nt fn j tk _ sts@(((st@(HappyState (action))):(_))) (v1`HappyStk`stk')",81],["happySpecReduce_2 nt fn j tk _ ((_):(sts@(((st@(HappyState (action))):(_))))) (v1`HappyStk`v2`HappyStk`stk')",81],["do { v1a <- convert v1",80],["\"v1.4\" :>",78],["return (v1, stmts `snocOL` s1, top)",63],["(reduce_45__ goto_literal'1__ v1)",54],["= let r = fn v1 v2 v3 in",129],["= let r = fn v1 in",129]],"useCount":7839},{"word":"val","context":[["quote 0 val) initEval",137],["case val of",646],["return val",392],["Just val -> return val",151],["val",260],["return $ Bind x (Guess ty val) sc",123],["(MonadIO m, ToJSString val) =>",126],["Just val -> return val",151],["Right val -> return val",239],["Right val -> return val",239]],"useCount":21544},{"word":"value","context":[["-- function is strict in the starting value.",208],[", value",158],["--   application can be represented as a value of this type.",139],["-- value passed to hamletToRepHtml cannot be a widget, this allows",243],["-- value.",406],["case value of",289],["-- value, this can simply be \"static\" appended to your application root.",129],["-- path. The default value works properly with your scaffolded site.",132],["return value",330],["-- will insert the pair (key, value) into @mp@ if key does",139]],"useCount":42961},{"word":"values","context":[["-- | /O(n)/. Map a function over all values in the map.",147],["applied to their respective values. For example, the following",85],["-- invalid scalar values.",91],["-- fall back to compile-time values, set to [] to require values at runtime",105],["-- fall back to compile-time values, set to [] to require values at runtime",105],["-- Performs replacement on invalid scalar values.",112],["-- files, more easily set expires and cache values, and avoid possibly",130],["-- keep settings and values requiring initialization before your application",282],["-- One of the following values:",200],["-- values.",166]],"useCount":12933},{"word":"var","context":[["do { var <- wrapLocM tcLookupId name",64],["return (var, ref)",65],["var <- newEmptyMVar",67],[", var",105],["return var",117],["x = P.var X",65],["writeIORef envRef ((var, valueRef) : env)",62],["alreadyDefined <- liftIO $ isBound envRef var",61],["case var of",127],["(lookup var env)",138]],"useCount":15854},{"word":"variable","context":[["; fvs' `seq` -- See Note [Free-variable space leak]",63],["tcRoles      :: [Role],  -- ^ The role for each type variable",60],["maybe (throwError $ UnboundVar \"Getting an unbound variable\" var)",49],["-- \"$topdir\" variable. The \"topdir\" is the location of the ghc",55],["-- variable.",60],["--Any type variable can be renamed.",108],["-- Perform path/URL variable substitution as per the Cabal ${pkgroot} spec",68],["-- See Note [Kind and type-variable binders]",52],["-- Note [Tricky type variable scoping]",64],["variable = do",64]],"useCount":19643},{"word":"variables","context":[["-- See Note [Promoting unification variables]",76],["-- variables.",142],["-- See Note [Scoped type variables in bindings]",84],["-- local variables:",254],["-- (including implicit kind variables)",89],["-- allow environment variables to override",108],["-- See Note [Free variables of types]",236],["-- loaded from various sources: defaults, environment variables, config files,",65],["-- | Returns free variables of types, including kind variables as",65],["-- | Returns free variables of types, including kind variables as",65]],"useCount":30267},{"word":"vars","context":[["; match_result <- match (var':vars) ty $",48],["-- get input vars",52],["-- lambda bound vars",57],["2 (ppr vars)",58],["IdSet,          -- subset of local vars that occur free",60],["IdSet)          -- subset of local vars that occur free",75],["-> IdSet                -- set of local vars available to this statement",90],["True{-use cache-} False{-expand vars-} my_flags",92],["-- See Note [Unboxed tuple RuntimeRep vars] in TyCon",95],["case vars of",47]],"useCount":10780},{"word":"vcat","context":[["inform $ vcat",326],["= vcat [",149],["nest 4 (vcat [",154],["ty = vecVmmType vcat n w",180],["checkVecCompatibility dflags vcat n w",288],["vcat [",192],["vcat",108],["ty = vecCmmCat vcat w",108],["= vcat",74],["vecty = vecVmmType vcat n w",72]],"useCount":19133},{"word":"vector","context":[["-- | Move the contents of a vector. The two vectors must have the same",102],["-- | Create a mutable vector of the given length (0 if the length is negative)",103],["-- | /O(m+min(n1,n2))/ For each index @i@ from the index vector and the",112],["-- | Reads vector; offset in bytes.",120],["-- | Reads vector; offset in scalar elements.",120],["-- | /O(n)/ Copy an immutable vector into a mutable one. The two vectors must",122],["-- | /O(n)/ Split the vector in two parts, the first one containing those",122],["-- | /O(n)/ Apply the monadic action to all elements of the vector, yielding a",128],["-- | /O(n)/ Apply the monadic action to all elements of a vector and ignore the",126],["-- vector of results",125]],"useCount":10526},{"word":"verbosity","context":[["debug verbosity $ path ++ \" returned \" ++ show exitcode",124],["installedPkgIndex <- getInstalledPackages verbosity comp packageDBs conf",156],["when (verbosity >= Normal) $",174],["warn verbosity $",175],["setupWrapper verbosity setupOptions Nothing",125],["(getBuildConfig hooks verbosity distPref)",125],["createDirectoryIfMissingVerbose verbosity True odir",129],["getPkgDatabases verbosity False{-modify-} False{-use user-}",138],["preprocessComponent pkg_descr comp lbi False verbosity suffixes",145],["targets <- readUserTargets verbosity extraArgs",150]],"useCount":30811},{"word":"version","context":[["<helpset version=\"1.0\">",102],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",593],["version :: Version",364],["version,",333],["version :: String",161],["-- version.",140],["<helpset version=\"2.0\">",103],["<?xml version='1.0' encoding='ISO-8859-1' ?>",133],["programFindVersion = findProgramVersion \"--version\" $ \\str ->",124],[", version",118]],"useCount":34343},{"word":"view","context":[["</view>",2852],["import Control.Lens (view)",55],["tcm <- Lens.view tcCache",65],[", (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]",89],["<view>",2673],["import Lens.Family (view, set)",134],["<view mergetype=\"javax.help.UniteAppendMerge\">",90],["(st,e) <- view",50],["-- Update the GHC API's view of the context",47],["^{fvInput view}",49]],"useCount":9079},{"word":"void","context":[[", void",81],["[C.block| void {",62],["import Control.Monad (void)",1878],["(void",873],["runInBase <- liftBaseWith $ \\run -> return (void . run)",194],["__attribute__((tc_thread)) void start() {",154],["import           Control.Monad (void)",118],["import Control.Monad (void, when)",103],["import Control.Monad (when, void)",75],["__attribute__((tc_block)) void block();",97]],"useCount":8837},{"word":"vs","context":[["vs <- get",111],["case vs of",92],["return vs",79],["-- deal with static vs dynamic call targets",69],["(vs, x', y')",50],["(vs, x', Impossible)",50],["debind (Right (x, y)) = let (vs, x') = depat [] x",50],["debind (Left x)       = let (vs, x') = depat [] x in",50],["-> irTerm vs env arg",48],["= do  { new_vs <- mapM (lookupSigOccRn ctxt sig) vs",47]],"useCount":7516},{"word":"w","context":[["case w of",297],["return w",290],["checkVecCompatibility dflags vcat n w",288],["ty = vecVmmType vcat n w",180],["{-# OPTIONS_GHC -w #-}",177],["| wordsToBytes dflags (asUnsigned w n) <= fromIntegral (maxInlineAllocSize dflags) =",140],["reshape size@(Size w h) = do",139],["w",114],["{-# OPTIONS -w -O0 #-}",108],["Amode addr code <- memConstant (widthInBytes w) lit",108]],"useCount":50210},{"word":"want","context":[["-- recompiled which probably isn't what you want",60],["-- we want to make sure that the bindings for data",60],["-- want to export this functionality from the module but do want to export the",60],["-- don't want to turn it off.",60],["-- want to export this functionality from the module but do want to export the",60],["-- field you want to compare. Only atomic field types are supported",63],["-- we don't want a verbose help text list so we just show a generic one:",88],["we want",67],["-- items you want in the response. If there are additional items beyond the",74],["-- on an error, we want to keep the input *before* the",82]],"useCount":25492},{"word":"warn","context":[["{-# OPTIONS_GHC -fno-warn-unused-imports    #-}",2618],["{-# OPTIONS_GHC -fno-warn-type-defaults #-}",445],["{-# OPTIONS_GHC -fno-warn-name-shadowing #-}",537],["{-# OPTIONS_GHC -fno-warn-missing-signatures #-}",635],["{-# OPTIONS_GHC -fno-warn-unused-binds      #-}",2316],["{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}",2672],["{-# OPTIONS_GHC -fno-warn-orphans #-}",4798],["{-# OPTIONS_GHC -fno-warn-unused-binds   #-}",5323],["{-# OPTIONS_GHC -fno-warn-unused-matches #-}",5481],["{-# OPTIONS_GHC -fno-warn-unused-imports #-}",12002]],"useCount":49218},{"word":"was","context":[["then text \" was already set at \" <> ppr pan",48],["-- We must behave as if the reference to x was",48],["-- on implicitly before the option was added in 7.1, and",60],["-- and return the /old/ value that was replaced.",60],["-- while this thread was blocked.  To safely close a file descriptor",64],["-- WARNING: The next block of code was automatically generated by",2252],["-- This will throw an 'IOError' if the file descriptor was closed",64],["-- | If server-side encryption with a customer-provided encryption key was",74],["-- copied to a temporary vector and then the temporary vector was copied",102],["{- This module was generated from data in the Kate syntax",119]],"useCount":15440},{"word":"way","context":[["-- Functions for DevelMain.hs (a way to run the app from GHCi)",93],["-- | Compile a stmt all the way to an HValue, but don't run it",82],["hpcdir way",78],["| x <- way, y <- way, x < y ]",61],["| x <- way, y <- way, x < y ]",61],["-- We then find the \"build-tag\" associated with this way, and this",60],["buildTag              :: String,      -- ^ The global \\\"way\\\" (e.g. \\\"p\\\" for prof)",60],["-- | Is Safe Haskell on in some way (including inference mode)",60],["-- After parsing the command-line options, we determine which \"way\" we",60],["allowed_combination way = and [ x `allowedWith` y",60]],"useCount":11463},{"word":"we","context":[["-- parse error if we are in recovery and we fail again",132],["-- create, it is not inlined, so we inline it manually.",89],["-- parse error if we are in recovery and we fail again",132],["-- TODO: can we eliminate this lock if it doesn't touch ~/.stack/?",120],["-- NOT STRICT!  we read this field lazily from the interface file",116],["If we have",115],["-- this already raised an expection, but we need it",105],["-- This is where we define all of the routes in our application. For a full",283],["-- reconfigure also checks if we're in a sandbox and reinstalls add-source",96],["Suppose we have",344]],"useCount":204960},{"word":"what","context":[["-- know what to clean when an exception happens",60],["-> HomePackageTable        -- what to link",89],["-- Determine if program coverage should be enabled and if so, what",80],["| what /= EDefns",78],["\"Do not install anything, only print what would be installed.\"",66],["instructions.  We peek at the arguments to decide what kind of",64],["-- despite what the AWS documentation might say.",61],["-- This commented snippet is what the entire set should look like:",196],["-- | Identifies what kind of resource this is. Value: the fixed string",316],["-- | what kind of {-# SCC #-} to add automatically",60]],"useCount":16972},{"word":"when","context":[["when (funptr_d/=ptrNull)",7260],["when (funptr/=ptrNull)",8192],["= do when (stptr/=ptrNull)",7260],["import           Control.Monad (when)",195],["import Control.Monad (when, unless)",211],["-- The page to be redirected to when authentication is required.",240],["when autoSolve solveAll",346],["import Control.Monad ( when )",369],["then do when (stptr/=ptrNull)",928],["import Control.Monad (when)",1832]],"useCount":91269},{"word":"where","context":[["where go",2262],["where",409908],["where combine field = field a `mappend` field b",691],["module Main (main) where",3270],["module Main where",18973],["where",1405],["--   where",1155],[") where",99463],[") where",995],["where loop s n | s `seq` n `seq` False = undefined",707]],"useCount":717830},{"word":"whether","context":[["-- Packages.isDllName needs to know whether a call is within a",56],["--    whether this might be the case and choose to either switch to a",60],["-- | Test whether a 'WarningFlag' is set",60],["-- | The 'GhcMode' tells us whether we're doing multi-module",60],["-- which GHC has some problems with.  It's currently not clear whether",60],["-- in order to check whether they need to be recompiled.",60],["-- | A flag that indicates whether there are more items to return. If your",73],["-- you don't have to worry whether there is a leading '[' or not",59],["-- | Test whether a 'GeneralFlag' is set",57],["-- | /O(1)/ Test whether a vector if empty",56]],"useCount":11373},{"word":"which","context":[["-- of settings which can be configured by overriding methods here.",286],["-- The rest of this file contains settings which rarely need changing by a",190],["-- of the call to mkYesodData which occurs in Foundation.hs. Please see the",205],["the entire result set of a truncated API operation. Operations which support",206],["-- | Settings for 'widgetFile', such as which template languages to support and",135],["-- of deciding to inline happyGoto everywhere, which increases the size of",132],["-- (which must be non-negative).",104],["-- element in the given 'ByteString' which is equal to the query",88],["-- * Creates the value resourcesApp which contains information on the",88],["-- | The position in source from which this arises.",184]],"useCount":53218},{"word":"width","context":[["-> GLsizei -- ^ @width@.",169],["width",81],[", width",70],["foreign import javascript unsafe \"$1[\\\"width\\\"]\" js_getWidth ::",99],["format = intFormat width",99],["size = intSize width",122],["size (width, height)",65],["let width = widthToLlvmInt w",63],["let size = intSize width",62],["width mba idx",60]],"useCount":7227},{"word":"will","context":[["-- action fails. The associated event attribute\\'s __cause__ parameter will",71],["-- the first match will do.",73],["-- (If applicable) Do not fill the delay slots here; you will confuse the",88],["-- The majority of the code you will write in Yesod lives in these handler",135],["-- starts running, such as database connections. Every handler will have",281],["-- An exception will be thrown in the case of an empty ByteString.",180],["-- not exist in the map. If the key does exist, the function will",140],["-- will insert the pair (key, value) into @mp@ if key does",139],["-- If you change the resource pattern for StaticR in Foundation.hs, you will",102],["\"it will be removed in a future GHC release\"))",92]],"useCount":40872},{"word":"with","context":[["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["Error matchers are designed for use with the functions provided by",199],["1000 objects at a time, and you must send subsequent requests with the",206],["--       documentation and/or other materials provided with the distribution.",227],["with the distribution.",329],["--    documentation and/or other materials provided with the distribution.",381],["Redistribution and use in source and binary forms, with or without",1376],["documentation and/or other materials provided with the distribution.",990],["-- Note that in the presence of multiple contexts with different capabilities,",935],["-- Redistribution and use in source and binary forms, with or without",846]],"useCount":113205},{"word":"withBoolResult","context":[["= withBoolResult $",9874]],"useCount":9874},{"word":"withCWString","context":[["withCWString _qsig_nam $ \\cstr_sig ->",946],["withCWString x1 $ \\cstr_x1 ->",3053],["withCWString _eid $ \\cstr_eid ->",6012],["withCWString x4 $ \\cstr_x4 ->",130],["withCWString x6 $ \\cstr_x6 ->",136],["withCWString x3 $ \\cstr_x3 ->",280],["withCWString x2 $ \\cstr_x2 ->",604],["withCWString evid $ \\cstr_evid ->",624],["withCWString _qslt_nam $ \\cstr_slt ->",932],["withCWString x5 $ \\cstr_x5 ->",84]],"useCount":12921},{"word":"withObjectPtr","context":[["withObjectPtr _qsig_obj $ \\cobj_sig ->",930],["withObjectPtr _qslt_obj $ \\cobj_slt ->",934],["withObjectPtr x3 $ \\cobj_x3 ->",1578],["withObjectPtr rvf $ \\cobj_rvf -> return (cobj_rvf)",1696],["withObjectPtr qobj $ \\cobj_qobj ->",3120],["withObjectPtr x2 $ \\cobj_x2 ->",4032],["withObjectPtr _eobj $ \\cobj_eobj ->",7260],["withObjectPtr x0 $ \\cobj_x0 ->",25096],["withObjectPtr x1 $ \\cobj_x1 ->",31118],["= withObjectPtr x0 $ \\cobj_x0 ->",37067]],"useCount":115601},{"word":"without","context":[["--   Redistribution and use in source and binary forms, with or without",99],["-- temporary foundation without a real connection pool, get a log function",88],["-- | /O(1)/ Indexing in a monad without bounds checks. See 'indexM' for an",77],["-- | Same as 'accum' but without bounds checking.",64],["-- | Same as ('//') but without bounds checking.",64],["-- Don't change this without updating extensionFlags:",121],["-- without copying.",128],["-- expiration dates to be set far in the future without worry of",285],["-- Redistribution and use in source and binary forms, with or without",846],["Redistribution and use in source and binary forms, with or without",1376]],"useCount":12453},{"word":"work","context":[["-- work fine even with DOS paths, if you're not insisting on being silly.",61],["-- distributed with this work for additional information",129],["it \"should work fine\" $ do",99],["If the work-item is Given,",87],["--TODO: this should work using exclude constraints instead",69],["-- XXX HACK: Prelude> words \"'does not' work\" ===> [\"'does\",\"not'\",\"work\"]",60],["-- XXX HACK: Prelude> words \"'does not' work\" ===> [\"'does\",\"not'\",\"work\"]",60],["work     TF fsk2 ~ fsk3",52],["-- This is pretty fragile: most options won't work as expected.  ToDo:",51],["-- TODO: won't work if home dir is encoded.",50]],"useCount":13174},{"word":"would","context":[["-- For lazy vectors, @v ! i@ would not be evaluated which means that @mv@",61],["-- fails we didn't throw away the current set of modules.  This would",51],["-- If dllSplit is out of date then it would have",56],["-- hPutStr would just emit the low 8 bits of",57],["ArchX86_64 -> -- SSE2 is fixed on for x86_64.  It would be",60],["-- would unnecessarily retain a reference to @v@ in each element written.",61],["-- instances that do not have a name of example-instance, you would use",63],["-- contributions, additions, or other feedback; we would love to hear from",65],["\"Do not install anything, only print what would be installed.\"",66],["-- available in this action, since that would require build tools to be",78]],"useCount":12919},{"word":"write","context":[["-- along with this program; see the file COPYING.  If not, write to",151],["write,",53],["-- >                   write mv i x",61],["-- > copy mv v = ... write mv i (v ! i) ...",69],[", write",115],["{-# INLINE write #-}",130],["-- The majority of the code you will write in Yesod lives in these handler",135],["--  along with Swish; if not, write to:",139],["--  along with this program; see the file COPYING.  If not, write to",150],["_ -> ifail \"IBC write failed\"",229]],"useCount":7203},{"word":"x","context":[["(\\ s h x ->",4146],["case x of",3361],["return x",2683],["ti <- x",890],["put x",895],["Assign x New $ \\ () ->",1070],["(\"application/x-amz-json-1.1\" :: ByteString)])",2165],["(\\ x ->",1872],["parseXML x",1835],["Assign f (Async x m []) $ \\ () ->",1128]],"useCount":376969},{"word":"x0","context":[["= withObjectPtr x0 $ \\cobj_x0 ->",37067],["disconnectNotify x0 (x1)",500],["receivers x0 (x1)",500],["= do x0obj <- objectFromPtr_nf x0",994],["withObjectPtr x0 $ \\cobj_x0 ->",25096],["setHandlerWrapper x0 x1",3336],["setHandlerWrapper x0",2216],["x0obj <- objectFromPtr_nf x0",1248],["setHandlerWrapper x0 x1 x2",1096],["eventFilter x0 (x1, x2)",500]],"useCount":126835},{"word":"x0obj","context":[["else _handler x0obj x1obj",2136],["x0obj <- objectFromPtr_nf x0",1248],["= do x0obj <- objectFromPtr_nf x0",994],["rv <- if (objectIsNull x0obj)",624],["else _handler x0obj x1obj x2obj",604],["else _handler x0obj x1int",500],["else _handler x0obj x1enum",332],["if (objectIsNull x0obj)",6642],["then return $ objectCast x0obj",2320],["else _handler x0obj",2216]],"useCount":23876},{"word":"x1","context":[["setHandlerWrapper x0 x1",3336],["setHandlerWrapper x0 x1 x2",1096],["let x1int = fromCInt x1",816],["x1obj <- qObjectFromPtr x1",752],["let x1enum = qEnum_fromInt $ fromCLong x1",576],["withCPoint x1 $ \\cpoint_x1_x cpoint_x1_y ->",576],["withObjectPtr x1 $ \\cobj_x1 ->",31118],["x1obj <- objectFromPtr_nf x1",2492],["withCWString x1 $ \\cstr_x1 ->",3053],["put x1",3859]],"useCount":115740},{"word":"x2","context":[["put x2",2485],["withObjectPtr x2 $ \\cobj_x2 ->",4032],["setHandlerWrapper x0 x1 x2",1096],["x2obj <- objectFromPtr_nf x2",1036],["x2 <- get",2522],["withCWString x2 $ \\cstr_x2 ->",604],["eventFilter x0 (x1, x2)",500],["eventFilter_h x0 (x1, x2)",452],["setHandlerWrapper x0 x1 x2 x3",376],["let x2enum = qEnum_fromInt $ fromCLong x2",348]],"useCount":35103},{"word":"x3","context":[["setHandlerWrapper x0 x1 x2 x3",376],["put x3",1514],["x3obj <- objectFromPtr_nf x3",284],["withCWString x3 $ \\cstr_x3 ->",280],["setGeometry x0 (x1, x2, x3, x4)",268],["x3 <- get",1529],["withObjectPtr x3 $ \\cobj_x3 ->",1578],["repaint x0 (x1, x2, x3, x4)",264],["create x0 (x1, x2, x3)",260],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231]],"useCount":15531},{"word":"x4","context":[["x4 <- get",907],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` rnf x5 `seq` ()",92],["put x4",904],["withObjectPtr x4 $ \\cobj_x4 ->",498],["setGeometry x0 (x1, x2, x3, x4)",268],["repaint x0 (x1, x2, x3, x4)",264],["= rnf x1 `seq` rnf x2 `seq` rnf x3 `seq` rnf x4 `seq` ()",231],["rnf x4 `seq`",170],["setHandlerWrapper x0 x1 x2 x3 x4",152],["withCWString x4 $ \\cstr_x4 ->",130]],"useCount":7565},{"word":"xs","context":[["xs",292],["case xs of {",209],["return xs",208],["xs -> do",189],["n = length xs",175],["let xs = List.nubBy ((==) `on` fst) ys",150],["return (x:xs)",297],["case xs of",532],["m  = fromList xs",130],["| otherwise = xs",148]],"useCount":84771},{"word":"y","context":[["return y",277],["case y of",447],["case compare x y of",246],["return (x, y)",237],["(P'.mergeAppend x'5 y'5)",227],["(P'.mergeAppend x'6 y'6)",186],["#define MIN_VERSION_base(x,y,z) 1",186],["return (x,y)",178],["urlRenderOverride y (StaticR s) =",166],["| y == 0                     = divZeroError",430]],"useCount":96479},{"word":"you","context":[["-- actually making the request, and provides an error response. If you have",291],["-- actually making the request, and provides an error response. If you have the",163],["-- functions. You can spread them across multiple files if you are so",135],["-- The majority of the code you will write in Yesod lives in these handler",135],["-- If you do not find this file, copies can be found by writing to:",536],["-- While working on this module you are encouraged to remove it and",254],["-- you to use normal widget features in default-layout.",243],["-- you can redistribute it and/or modify it under the terms of",224],["1000 objects at a time, and you must send subsequent requests with the",206],["-- In addition, you can configure a number of different aspects of Yesod",197]],"useCount":28563},{"word":"your","context":[["-- value, this can simply be \"static\" appended to your application root.",129],["-- | The site argument for your application. This can be a good place to",192],["-- place to put your migrate statements to have automatic database",208],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["-- Don't forget to add new modules to your cabal file!",242],["-- keep settings and values requiring initialization before your application",282],["-- You can define all of your database entities in the entities file.",139],["-- resource pattern. All of your resource patterns are defined in",135],["-- | The location of static files on your system. This is a file system",133],["-- path. The default value works properly with your scaffolded site.",132]],"useCount":6971},{"word":"ys","context":[["(x:xs) ++ ys = x : (xs ++ ys)",79],["(x:xs) ++ ys = x : (xs ++ ys)",79],["case ys of",60],["merge [] ys = ys",96],["merge [] ys = ys",96],["let xs = List.nubBy ((==) `on` fst) ys",150],["eqv [(DottedList xs x), (DottedList ys y)] = eqv [List $ xs ++ [x], List $ ys ++ [y]]",59],["eqv [(DottedList xs x), (DottedList ys y)] = eqv [List $ xs ++ [x], List $ ys ++ [y]]",59],["[]     ++ ys = ys",101],["[]     ++ ys = ys",101]],"useCount":16589},{"word":"z","context":[["gunfold _ z c = case constrRep c of",276],["#define MIN_VERSION_base(x,y,z) 1",186],["if z == Nothing",110],["go z' Nil           = z'",135],["go z' Nil           = z'",135],["_ -> go z t",144],["case z of",148],["return z",157],["(IntConstr x) -> z (fromIntegral x)",219],["gunfold k z c = case constrIndex c of",244]],"useCount":33570},{"word":"zip","context":[["let args_hints = zip args arg_hints",63],[", zip",88],["{-# INLINE zip #-}",85],["zip, zip3, zip4, zip5, zip6,",73],["zip = zipWith (,)",104],["| (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]",66],["zipWith, zipWith3, zip, zip3, unzip, unzip3,",62],["| (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]",64],["-- | 'zipWith' generalises 'zip' by zipping with the function given as",64],["-- | /O(n)/ 'zip' takes two ByteStrings and returns a list of",62]],"useCount":9513},{"word":"~","context":[["((0.0000) *~ mas, (0.0000) *~ (mas / century), (0.0000) *~ mas) :",105],["((0.0000) *~ mas, (0.0000) *~ (mas / century), (0.0000) *~ mas) :",105],["((0.0000) *~ mas, (0.0000) *~ (mas / century), (0.0000) *~ mas) :",105],["inert    fsk ~ (fsk2, TF Int)",111],["-- TODO: can we eliminate this lock if it doesn't touch ~/.stack/?",120],["((0.0000) *~ mas, (0) *~ (mas / century), (0.0000) *~ mas) :",202],["((0.0000) *~ mas, (0) *~ (mas / century), (0.0000) *~ mas) :",202],["((0.0000) *~ mas, (0) *~ (mas / century), (0.0000) *~ mas) :",202],["-- You can use this module with the following in your @~\\/.xmonad\\/xmonad.hs@:",217],["~#",296]],"useCount":38796}]