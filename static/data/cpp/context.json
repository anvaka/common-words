[{"word":"0f","context":[["return 0.0f;",2726],["EXPECT_NEAR(5.0f, constraints.maximumScale, 0.01f);",2643],["return 0.0f;",40160],["return 1.0f;",8054],["0.0f,",5392],["float val = (float)RandomFloat(100.0f);",4257],["float multiplier = 1.0f;",3020],["0.7f,1.0f,0.4f,1.0f,",2977],["0.7f,1.0f,0.4f,1.0f,",2977],["me->AddThreat(who, 0.0f);",3176]],"useCount":2727102},{"word":"0x0","context":[["0x0 , 0x0 , 0x0 , 0x0 ,",135405],["0x0, 0x0, 0x0, 0x0,",11525],["0x0, 0x0, 0x0, 0x0,",11525],["0x0, 0x0, 0x0, 0x0,",11525],["0x0, 0x0, 0x0, 0x0,",11525],["0x0,",59394],["0x0,",62851],["0x0 , 0x0 , 0x0 , 0x0 ,",135405],["0x0 , 0x0 , 0x0 , 0x0 ,",135405],["0x0 , 0x0 , 0x0 , 0x0 ,",135405]],"useCount":2378039},{"word":"0x00","context":[["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053],["0x00,",259388],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",165053]],"useCount":22831878},{"word":"0x0000","context":[["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000,",102476],["0x0000, 0x0000, 0x0000, 0x0000,",44526],["0x0000, 0x0000, 0x0000, 0x0000,",44526],["0x0000, 0x0000, 0x0000, 0x0000,",44526],["0x0000, 0x0000, 0x0000, 0x0000,",44526],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760]],"useCount":3142522},{"word":"0x00000000","context":[["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000,",105376],["0x00000000, 0x00000000, 0x00000000, 0x00000000,",105376],["0x00000000, 0x00000000, 0x00000000, 0x00000000,",105376],["0x00000000, 0x00000000, 0x00000000, 0x00000000,",105376],["0x00000000,",119534]],"useCount":2698340},{"word":"0x00000001","context":[["0x00000001,",8185],["#define SIGNAL_STOP_STOPPED\t0x00000001 /* job control stop in effect */",3519],["#define PROCESS_DEP_ENABLE 0x00000001",2791],["#define VM_READ\t\t0x00000001\t/* currently active flags */",2233],["#define MNT_FORCE\t0x00000001\t/* Attempt to forcibily umount */",1895],["if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;",1759],["if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;",1759],["0x00000001,",1501],["#define\tFS_SECRM_FL\t\t\t0x00000001 /* Secure deletion */",1375],["#define MAY_EXEC\t\t0x00000001",1326]],"useCount":1286109},{"word":"0x00000002","context":[["0x00000002,",2736],["0x00000000, 0x00000001, 0x00000002, 0x00000020,",1146],["#define  RCC_CFGR_SW_PLL                     ((uint32_t)0x00000002)        /*!< PLL selected as system clock */",1167],["#define PF_STARTING\t0x00000002\t/* being created */",1202],["#define  RCC_CFGR_SW_1                       ((uint32_t)0x00000002)        /*!< Bit 1 */",1318],["#define MAY_WRITE\t\t0x00000002",1326],["#define\tFS_UNRM_FL\t\t\t0x00000002 /* Undelete */",1375],["#define MNT_DETACH\t0x00000002\t/* Just detach from the tree */",1895],["#define VM_WRITE\t0x00000002",2301],["#define SIGNAL_STOP_CONTINUED\t0x00000002 /* SIGCONT since WCONTINUED reap */",2931]],"useCount":722130},{"word":"0x00000004","context":[["#define PF_EXITING\t0x00000004\t/* getting shut down */",3559],["#define SIGNAL_GROUP_EXIT\t0x00000004 /* group exit in progress */",2931],["#define VM_EXEC\t\t0x00000004",2301],["#define MNT_EXPIRE\t0x00000004\t/* Mark for expiry */",1863],["#define\tFS_COMPR_FL\t\t\t0x00000004 /* Compress file */",1375],["#define MAY_READ\t\t0x00000004",1326],["#define  RCC_CFGR_SWS_0                      ((uint32_t)0x00000004)        /*!< Bit 0 */",1318],["#define  RCC_CFGR_SWS_HSE                    ((uint32_t)0x00000004)        /*!< HSE oscillator used as system clock */",1200],["#define  EXTI_EMR_MR2                        ((uint32_t)0x00000004)        /*!< Event Mask on line 2 */",1110],["#define  EXTI_IMR_MR2                        ((uint32_t)0x00000004)        /*!< Interrupt Mask on line 2 */",1110]],"useCount":640627},{"word":"0x01","context":[["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xA3, 0x01, 0x01)}, \\",7050],["0x01, //lce_ref_offset 9",7130],["0x01, //cs_gain 10",7286],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x31, 0x01, 0x01)}, \\",7877],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x31, 0x01, 0x01)}, \\",7877],["0x01, //mdnie_en",10187],["0x00, 0x00, 0x00, 0x00, 0x01,",21875],["0x01,",34475],["0x01,0x00,0x00,0x00,",84904],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xA3, 0x01, 0x01)}, \\",7050]],"useCount":3036122},{"word":"0x02","context":[["0x02,",19760],["PORT_DIPSETTING(    0x02, DEF_STR( Off ) )",4854],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x00)}, \\",14905],["0x02,0x00,0x00,0x00,",11589],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x02)}, \\",11078],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x02)}, \\",11078],["0x02, 0x00, 0x29, 0xC0,",10689],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xA3, 0x02, 0x02)}, \\",8810],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xA3, 0x02, 0x02)}, \\",8810],["case 0x02:",4676]],"useCount":1938903},{"word":"0x03","context":[["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x8A, 0x0F, 0x03)}, \\",15952],["0x03,",14731],["{0x03, 0x00},",14095],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x83, 0x03, 0x00)}, \\",10126],["0x03,0x00,0x00,0x00,",9646],["0x03, //lce_dark_th 000",6879],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x9F, 0x03, 0x03)}, \\",6346],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x9F, 0x03, 0x03)}, \\",6346],["{0x03, 0x00,},",5965],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x83, 0x03, 0x03)}, \\",5637]],"useCount":1063264},{"word":"0x04","context":[["0x04,0x00,0x00,0x00,",8480],["0x04,",18157],["PORT_DIPSETTING(    0x04, DEF_STR( Off ) )",4958],["case 0x04:",3794],["0x81, 0xb2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x81, 0xb2, 0x00, 0x00,",3038],["0x04, 0x00, 0x00, 0x40, 0x81, 0xb2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40,",3029],["0x04, 0x00, 0x00, 0x40, 0x81, 0xb2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40,",3029],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x31, 0xFF, 0x04)}, \\",3020],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xE2, 0xFE, 0x04)}, \\",3007],["0x04, //cc g2",2950]],"useCount":1359126},{"word":"0x05","context":[["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,",10841],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,0x05,0x21,",9447],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x05, 0x00)}, \\",7730]],"useCount":580165},{"word":"0x08","context":[["#define _PSA                    0x08",2223],["0x08,",19056],["PORT_DIPSETTING(    0x08, DEF_STR( Off ) )",5289],[",0x08",3745],["{0x08,0x01000000},",3230],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x32, 0xF8, 0x08)}, \\",2909],["0x08,0x00,0xE0,0x03,",2897],["case 0x08:",2707],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x08, 0x00)}, \\",2288],["PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN )",2517]],"useCount":1330834},{"word":"0x1","context":[["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x6,0x1,0x6,0x1,0x6,0x1,0x6,0x1,0x6,0x1,0x6,0x1,0x6,0x1,0x6,0x1,",968],["0x1.0p-1074,",987],["0x1.p-149,",1183],["#define FMODE_READ\t\t((__force fmode_t)0x1)",1744],["case 0x1:",1902],["SUNXI_FUNCTION(0x1, \"gpio_out\"),",2431],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505]],"useCount":823406},{"word":"0x10","context":[["u8         op_mod[0x10];",4157],[",0x10",9368],["0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,",2897],["u8         reserved_at_10[0x10];",2911],["case 0x10:",3261],["{0x10,0x01000000},",3658],["u8         opcode[0x10];",4028],["0x10, //lce_scene_change_on scene_trans 0 0000",5067],["PORT_DIPSETTING(    0x10, DEF_STR( Off ) )",5506],["0x10,",33142]],"useCount":1457133},{"word":"0x12","context":[[",0x12",17281],["0xa4, 0x00, 0xb1, 0x12, 0xa4, 0x00, 0xb1, 0x12,",22120],["case 0x12:",2143],["0xa4, 0xff, 0xb1, 0x12, 0xa4, 0xff, 0xb1, 0x12,",2244],["0xa4, 0xff, 0xb1, 0x12, 0xa4, 0xff, 0xb1, 0x12,",2244],["0x34, 0x12,",2446],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x12, 0xFF, 0x00)}, \\",4972],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x12, 0xFF, 0xBC)}, \\",7582],["0xa4, 0x00, 0xb1, 0x12, 0xa4, 0x00, 0xb1, 0x12,",22120],["0x12,",10735]],"useCount":591441},{"word":"0x13","context":[["0x00, 0x0D, 0x12, 0xF9, 0x00, 0x0E, 0x13, 0xF9,",634],["{0x03, 0x13,},",739],["0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,",791],["#define ABS_HAT1Y\t\t0x13",1094],["#define BUS_RS232\t\t0x13",1095],["{0x42, 0x13,},",1861],["case 0x13:",1980],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x13, 0xfc, 0x58)}, \\",3087],["0x13,",7496],[",0x13",459189]],"useCount":722166},{"word":"0x20","context":[["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",10377],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,",25384],["0x20,",50275]],"useCount":2711581},{"word":"0x30","context":[["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x8A, 0xF0, 0x30)}, \\",6492],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,",6007],["0x30,",19458]],"useCount":885231},{"word":"0x40","context":[["0x40,",21278],["PORT_DIPSETTING(    0x40, DEF_STR( Off ) )",6332],["PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )",4600],["{0x40,0x01000000},",3927],["{0x40,0x00000000},",3564],["0x81, 0xb2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x81, 0xb2, 0x00, 0x00,",3038],["0x04, 0x00, 0x00, 0x40, 0x81, 0xb2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40,",3029],["0x04, 0x00, 0x00, 0x40, 0x81, 0xb2, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40,",3029],["u8         reserved_at_40[0x40];",2466],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x33, 0x40, 0x00)}, \\",2350]],"useCount":1073110},{"word":"0x48","context":[[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819],[", 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48",14819]],"useCount":615017},{"word":"0x4F","context":[[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410]],"useCount":702588},{"word":"0x80","context":[["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x00)}, \\",14905],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,",8154],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x02)}, \\",11078],["0x80,",22268]],"useCount":1490728},{"word":"0xFF","context":[["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",40894],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",40894],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912],["0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",158912]],"useCount":4734180},{"word":"0xFFFFFFFF","context":[["0xFFFFFFFF,",769878],["0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,",9469],["0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,",9469],["0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,",9469],["0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,",9469],["return 0xFFFFFFFF;",2270],["nFileSize.u.LowPart = nEndPos & 0xFFFFFFFF;",1600],["0xFFFFFFFF  // Flash Read Enable",1248],["0xFFFFFFFF  // Flash Programming Enable",1248],["#define  CRC_DR_DR                           ((uint32_t)0xFFFFFFFF) /*!< Data register bits */",1115]],"useCount":1101641},{"word":"0xff","context":[["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245],["0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",44245]],"useCount":3158854},{"word":"A","context":[["*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",5598],["* @return A cookie",7756],["http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,",5060],["*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",5361],["case 'A':",5886],["* @return A daeMetaElement describing this COLLADA element.",6032],["//  W A R N I N G",24673],["* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",11284],["A PARTICULAR PURPOSE.",9285],["A PARTICULAR PURPOSE.",8659]],"useCount":4045854},{"word":"ADIE_CODEC_ACTION_ENTRY","context":[["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x8A, 0xF0, 0xF0)}, \\",17158],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x8A, 0x0F, 0x03)}, \\",15952],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x0D, 0xFF, 0x00)}, \\",8007],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x84, 0xFF, 0x00)}, \\",8456],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xA3, 0x02, 0x02)}, \\",8810],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x81, 0xFF, 0x0E)}, \\",8931],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x83, 0x03, 0x00)}, \\",10126],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x02)}, \\",11078],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x00)}, \\",14905],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x83, 0x0C, 0x00)}, \\",15238]],"useCount":934085},{"word":"ADIE_CODEC_PACK_ENTRY","context":[["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x83, 0x0C, 0x00)}, \\",15238],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x8A, 0x0F, 0x03)}, \\",15952],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x00)}, \\",14905],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x80, 0x02, 0x02)}, \\",11078],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x83, 0x03, 0x00)}, \\",10126],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x81, 0xFF, 0x0E)}, \\",8931],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x84, 0xFF, 0x00)}, \\",8456],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x0D, 0xFF, 0x00)}, \\",8007],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0xA3, 0x02, 0x02)}, \\",8810],["{ADIE_CODEC_ACTION_ENTRY, ADIE_CODEC_PACK_ENTRY(0x8A, 0xF0, 0xF0)}, \\",17158]],"useCount":932806},{"word":"API","context":[["// This file is not part of the Qt API.  It exists purely as an",15375],["// This file is not part of the Qt API.  It exists for the convenience",6286],["* This file includes all API header files for the selected drivers from ASF.",3310],["// Internal. Only to be used through TI provided API.",2191],["WARN_ONCE(1, \"regmap API is disabled\");",1955],["\\return The value itself for fluent API.",1764],["FAILURE or RESOURCES  The API finished and failed.",1707],["* FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.",1696],["/* Set the following definitions to 1 to include the API function, or zero",1633],["to exclude the API function. */",1602]],"useCount":578118},{"word":"APIENTRY","context":[["DWORD APIENTRY",1173],["#ifndef APIENTRY",1686],["#define APIENTRY",1742],["APIENTRY",913],["#define APIENTRYP APIENTRY *",900],["#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)",722],["GLAPI void APIENTRY",673],["BOOL APIENTRY DllMain( HMODULE hModule,",665],["__kernel_entry W32KAPI BOOL APIENTRY",630],["APIENTRY",6279]],"useCount":692631},{"word":"APIENTRYP","context":[["typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);",444],["typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);",458],["typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);",458],["typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);",491],["typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);",497],["#define APIENTRYP APIENTRY *",900],["#ifndef APIENTRYP",904],["typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);",444],["typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);",458],["typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);",446]],"useCount":633609},{"word":"ASSERT","context":[["ASSERT(false);",16743],["#ifdef ASSERT",25296],["ASSERT(isMainThread());",8681],["ASSERT(0);",7990],["ASSERT(FALSE);",6885],["ASSERT(player);",6447],["#if ENABLE(ASSERT)",6309],["#if ENABLE(ASSERT)",4069],["ASSERT(map);",3727],["#endif // ASSERT",3836]],"useCount":1306010},{"word":"ASSERT_EQ","context":[["ASSERT_EQ(\"\", err);",2584],["ASSERT_EQ(MOJO_RESULT_OK,",2546],["ASSERT_EQ(1U, s.size());",3393],["ASSERT_EQ(base::File::FILE_OK,",1719],["ASSERT_EQ(2, attrs.nFields());",1779],["ASSERT_EQ(2, attrNames.size());",1808],["ASSERT_EQ(IterStatus(iter), \"a->va\");",1982],["ASSERT_EQ(base::PLATFORM_FILE_OK,",1983],["ASSERT_EQ(IterStatus(iter), \"(invalid)\");",2433],["ASSERT_EQ(",5040]],"useCount":655088},{"word":"ASSERT_TRUE","context":[["ASSERT_TRUE(iter->Valid());",3886],["ASSERT_TRUE(",11940],["ASSERT_TRUE(test_server()->Start());",9791],["ASSERT_TRUE(response != NULL);",9402],["ASSERT_TRUE(test_server_.Start());",5957],["ASSERT_TRUE(SetupSync()) << \"SetupSync() failed.\";",5405],["ASSERT_TRUE(extension);",4903],["ASSERT_TRUE(AllModelsMatchVerifier());",4893],["ASSERT_TRUE(temp_dir_.CreateUniqueTempDir());",3998],["ASSERT_TRUE(GetClient(0)->AwaitMutualSyncCycleCompletion(GetClient(1)));",4859]],"useCount":810259},{"word":"Add","context":[["items.Add(item);",3711],["registrar_.Add(this,",6970],["items.Add(pItem);",5200],["// TODO: Add your control notification handler code here",4538],["addrman.Add(addrFrom, addrFrom);",4025],["// Add in sigops done by pay-to-script-hash inputs;",4022],["addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);",3952],["// Add transactions that depend on this one to the priority queue",3868],["// Add wallet transactions that aren't already in a block to mapTransactions",3806],["// Add node",3780]],"useCount":1303356},{"word":"Address","context":[["\"Address: %4\\n\")",3305],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");",4984],["uint64_t Address,",3311],["mapper->addMapping(ui->addressEdit, AddressTableModel::Address);",2906],["uint64_t Address, const void *Decoder) {",2663],["uint64_t Address, const void *Decoder);",2614],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");",2356],["pszKeyword = \"Address:\";",3371],["// Address refresh broadcast",4128],["QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);",6516]],"useCount":1332891},{"word":"Array","context":[["Value help(const Array& params, bool fHelp)",3639],["params = Array();",3652],["Nan::ThrowError(\"Array contents invalid.\");",5438],["Array transactions;",8132],["Array a;",8151],["Nan::ThrowError(\"Array too short.\");",10598],["Array params;",10894],["Array ret;",17437],["json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const",3564],["Value stop(const Array& params, bool fHelp)",3639]],"useCount":815578},{"word":"Author","context":[["Author:",4840],["* Author: Brian Swetland <swetland@google.com>",2782],["// Author:      Vadim Zeitlin",2840],["// Author:      Julian Smart",2853],["// Author:      Julian Smart",3215],["// Author:      Vadim Zeitlin",3332],["// Author:      Sigal Algranaty",3795],["//  Author:",4233],["Author:",4756],["* Author:",9955]],"useCount":598203},{"word":"B","context":[["*                            P U B L I C   D A T A",2519],["} B;",46456],["// N.B. These #defines do *not* include the EID & length",5324],["case 'B':",4739],["// \\param B The right-hand side multiplication operand.",4298],["case 'B':",3064],["// and Timer B of GPTM 32/64-Bit",2772],["// N.B. These #defines do *not* include the ID & length",2535],["register8_t CTRLB;  /* Control Register B */",3814],["BRep_Builder B;",2258]],"useCount":1490569},{"word":"BIT","context":[["*\t{ .max = 1, .types = BIT(NL80211_IFTYPE_STATION), },",1070],["#define DSI_INTR_VIDEO_DONE_MASK\tBIT(17)",805],["#define DSI_INTR_CMD_MDP_DONE_MASK\tBIT(9)",805],["#define DSI_INTR_CMD_DMA_DONE_MASK\tBIT(1)",805],["#define DSI_INTR_ERROR\t\t\tBIT(24)",805],["#define DSI_INTR_CMD_DMA_DONE\t\tBIT(0)",805],["#define DSI_INTR_VIDEO_DONE\t\tBIT(16)",805],["} BIT;                      /*              */",982],["*\t(bitmask of BIT(NL80211_STA_FLAG_...))",1134],["} BIT;",30657]],"useCount":628721},{"word":"BOOL","context":[["BOOL",17652],["virtual BOOL PreCreateWindow(CREATESTRUCT& cs);",2034],["BOOL result;",2179],["virtual BOOL OnInitDialog();",8479],["BOOL result;",3246],["typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);",2785],["BOOL",2537],["- (BOOL)isEqual:(id)arg1;",2277],["virtual BOOL InitInstance();",2190],["BOOL",43416]],"useCount":998415},{"word":"BOOST_FOREACH","context":[["BOOST_FOREACH(const uint256& hash, vHave)",9207],["BOOST_FOREACH(const CTxOut& txout, vout)",10509],["BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)",9805],["BOOST_FOREACH(const CTransaction& tx, vtx)",13696],["BOOST_FOREACH(const CTxIn& txin, vin)",18213],["BOOST_FOREACH(const CTxOut& txout, wtx.vout)",21098],["BOOST_FOREACH(const CTxIn& txin, tx.vin)",25617],["BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)",30751],["BOOST_FOREACH(CNode* pnode, vNodes)",53448],["BOOST_FOREACH(CNode* pnode, vNodesCopy)",24282]],"useCount":712006},{"word":"Base","context":[["/** Base class for all base58-encoded data */",2261],["static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | Base::StructureFlags;",1611],["* @param base Base address for current SIM instance.",1659],["// Base fee is either nMinTxFee or nMinRelayTxFee",1660],["// Base value",1667],["fetchErrorInfo(ptr(), &COM_IIDOF(Base::Iface));",1820],["::g::Android::Base::JNI::CheckException1(U_JNIVAR);",2140],["catch (const Base::Exception& e) {",2296],["#include <Base/Console.h>",2435],["* @param base     Base address for current SIM instance.",2818]],"useCount":637449},{"word":"Bit","context":[["/******************  Bit definition for USART_CR1 register  *******************/",1881],["/********************  Bit definition for CRC_CR register  ********************/",1882],["/******************  Bit definition for USART_BRR register  *******************/",1882],["/* C2 Bit Fields */",1921],["/*******************  Bit definition for WWDG_CFR register  *******************/",1882],["/* Bit width of the sample.",1963],["/*******************  Bit definition for IWDG_KR register  ********************/",2077],["/* C1 Bit Fields */",2199],["// Bit)",6154],["// and Timer B of GPTM 32/64-Bit",2772]],"useCount":3002822},{"word":"Bits","context":[["//        PIR1 Bits",2235],["} Bits;",13302],["* Bits in flags field of signal_struct.",3522],["/* Lock Bits */",2281],["//        INTCON Bits",2271],["//        STATUS Bits",2271],["//        PORTA Bits",2251],["//        TRISA Bits",2251],["//        PIE1 Bits",2235],["//        T1CON Bits",2183]],"useCount":677515},{"word":"Boston","context":[["Boston, MA 02110-1301, USA.",23410],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["* Boston, MA 02111-1307, USA.",22301],["Boston, MA 02110-1301, USA.",20855],["* Boston, MA 02110-1301, USA.",38378],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",17770],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston,",16435],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",53996],["* Boston, MA 02110-1301, USA.",53593]],"useCount":778265},{"word":"C","context":[["extern \"C\" {",19942],["// -*- C++ -*-",17860],["extern \"C\" {",358652],["extern \"C\" {",51113],["#endif \t/* C style interface */",46283],["#else \t/* C style interface */",46283],["extern \"C\"",42637],["extern \"C\"",40418],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["#endif /* C++ */",20413]],"useCount":3876601},{"word":"CBlockIndex","context":[["CBlockIndex* pindex = (*mi).second;",22473],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["static CBlockIndex* pindexPrev;",9598],["CBlockIndex* pindex = (*mi).second;",9211],["CBlockIndex* pindexPrev = pindexBest;",8645],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);",9186],["class CBlockIndex;",6747],["const CBlockIndex* pindex = this;",6429],["BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)",5527]],"useCount":623650},{"word":"Channel","context":[["voe::Channel* channelPtr = ch.channel();",915],["class Channel;",2472],["#include \"Channel.h\"",2328],["ViEChannel* vie_channel = cs.Channel(video_channel);",1314],["* @param  Channel This parameter can be one of the following values:",1102],["#define KEY_CHANNELDOWN\t\t0x193\t/* Channel Decrement */",1025],["#define KEY_CHANNELUP\t\t0x192\t/* Channel Increment */",1024],["voe::Channel* channelPtr = sc.ChannelPtr();",1001],["if (Channel* channel = cMgr->GetChannel(channelName, GetPlayer()))",914],["if (Channel* chn = cMgr->GetChannel(channelname, _player))",894]],"useCount":670318},{"word":"Check","context":[["/** Check for standard transaction types",6794],["// Check for duplicate",12150],["Check();",5618],["// Check against previous transactions",4277],["// Check for conflicts with in-memory transactions",4271],["// Check timestamp",4203],["// Check for non-standard pay-to-script-hash in inputs",4167],["template<class Check>",10029],["// Check proof of work matches claimed amount",8366],["// Check funds",7165]],"useCount":1442406},{"word":"Class","context":[["static ::java::lang::Class class$;",9982],["* Class:     org_rocksdb_Options",4375],["Class: Eq_292",2505],["class Class;",2394],["* Class:     org_rocksdb_ColumnFamilyOptions",2170],["// Map Lua Class Methods to C Binding Functions",2051],["notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);",1676],["@property(readonly) Class superclass;",9893],["* Class:     org_rocksdb_DBOptions",1796],["static ::java::lang::Class *class$;",1908]],"useCount":689759},{"word":"Clear","context":[["me->GetMotionMaster()->Clear();",8490],["Clear();",31878],["void Clear();",32210],["void Clear()",4977],["mutable_unknown_fields()->Clear();",11402],["// Clear",8906],["// Status and Clear",6577],["// Interrupt Clear",6105],["Clear();",22418],["Clear();",5861]],"useCount":759730},{"word":"Common","context":[["#include \"Common/CommonTypes.h\"",2673],["Common::StackLock lock(_mutex);",2504],["#include \"Common.h\"",30513],["#include \"Common.h\"",23947],["#include \"Common/CommonTypes.h\"",4192],["Common::EN_ANY,",3972],["namespace Common {",3443],["Common::kPlatformWindows,",2996],["#include \"Common/FileUtil.h\"",2911],["#include \"Common/StringUtil.h\"",2565]],"useCount":644849},{"word":"Context","context":[["// Context-independent validity checks",2920],["#include \"Context.h\"",1718],["* This file is part of Orion Context Broker.",2104],["/* Context switch must be unlocked if interrupts are to be enabled */",2421],["* Context: can sleep",2469],["v8::Context::Scope context_scope(context);",2708],["class Context;",3026],["gl::Context *context = gl::getNonLostContext();",3953],["Context *context = GetValidGlobalContext();",4977],["/* Context for parsing across buffer boundaries */",9773]],"useCount":604132},{"word":"Control","context":[["register8_t CTRL;  /* Control Register */",4724],["// Clock Gating Control",28489],["// Control",17045],["register8_t CTRLB;  /* Control Register B */",3814],["// Coin Control",3555],["/* Control Group info protected by css_set_lock */",3477],["register8_t CTRLA;  /* Control Register A */",3029],["// Mode Clock Gating Control",2246],["* @brief Reset and Clock Control",1882],["// Gating Control",54580]],"useCount":977819},{"word":"Create","context":[["// Create status bar",3342],["// Create a decoupled menu bar on Mac which stays even if the window is closed",3248],["// Create application menu bar",3351],["// Create the toolbars",3357],["// Create new block",17312],["* [WPD00001943]Create WiFi test driver framework on WinXP",6278],["// Create coinbase tx",3916],["// Create new keyUser and set as default key",3776],["// Create socket for listening for incoming connections",3760],["// Create actions for the toolbar, menu bar and tray/dock icon",3377]],"useCount":1224890},{"word":"Creature","context":[["CreatureAI* GetAI(Creature* pCreature) const",19332],["bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)",4644],["void JustSummoned(Creature* summon)",4994],["void JustSummoned(Creature* summoned)",6115],["class Creature;",7727],["bool OnGossipHello(Player* player, Creature* creature)",10665],["#include \"Creature.h\"",11194],["CreatureAI* GetAI(Creature* creature) const OVERRIDE",16154],["CreatureAI* GetAI(Creature* creature) const",71515],["CreatureAI* GetAI(Creature* creature) const override",31512]],"useCount":1271486},{"word":"D","context":[["case 'D':",6701],["*    D-26121 Oldenburg, Germany",2502],["*                           P R I V A T E   D A T A",2516],["*                            P U B L I C   D A T A",2519],["*    D-26121 Oldenburg, Germany",2829],["D*/",3322],["/*D",3322],["// Accept D&D of URIs",3379],["// Accept D&D of URIs",3379],["case 'D':",3845]],"useCount":1054524},{"word":"DCHECK","context":[["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",49494],["DCHECK(thread_checker_.CalledOnValidThread());",41023],["DCHECK(CalledOnValidThread());",39573],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));",19170],["DCHECK(!callback.is_null());",13148],["DCHECK(self);",7652],["DCHECK(task_runner_->BelongsToCurrentThread());",7650],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::FILE));",5678],["DCHECK(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));",5369],["DCHECK(success);",5060]],"useCount":1291425},{"word":"DMA","context":[["*          use a DMA channel and heavily loads the CPU.",1005],["* @brief DMA Controller",1880],["* @param  __HANDLE__: DMA handle",1721],["* DMA priorities:",1586],["/* Non-Blocking mode: DMA */",1148],["/*                             DMA Controller                                 */",1109],["#define STM32_UART_DMA_ERROR_HOOK(uartp)    osalSysHalt(\"DMA failure\")",951],["#define STM32_SPI_DMA_ERROR_HOOK(spip)      osalSysHalt(\"DMA failure\")",946],["#define STM32_I2C_DMA_ERROR_HOOK(i2cp)      osalSysHalt(\"DMA failure\")",941],["* is visible to DMA, or data written by DMA to system memory is",888]],"useCount":603233},{"word":"DWORD","context":[["DWORD *_pdwStubPhase);",93812],["DWORD* pdwStubPhase);",22109],["DWORD",16074],["/* [in] */ DWORD dwFlags,",6434],["DWORD dwFlags;",4682],["DWORD dwSize;",3981],["DWORD",3402],["typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);",2785],["DWORD cbSize;",2437],["DWORD dwFlags,",2242]],"useCount":1274578},{"word":"Data","context":[["// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //",13595],["// Dialog Data",7355],["@param[in] role    Data role to extract from the model",1853],["// Data",4284],["// Enable Data Execution Prevention (DEP)",2789],["// Data members",2364],["template< typename Type  // Data type of the matrix",2064],["QString filename = QFileDialog::getSaveFileName(this, tr(\"Backup Wallet\"), saveDir, tr(\"Wallet Data (*.dat)\"));",1979],["* I_DIRTY_DATASYNC\tData-related inode changes pending. We keep track of",1880],["@param[in] column  Data column to extract from the model",1859]],"useCount":1260346},{"word":"Define","context":[["// Define the struct bits",12579],["// Define an unsigned member",13600],["/* Define to the full name of this package. */",7986],["/* Define to 1 if you have the <sys/types.h> header file. */",7968],["/* Define to the version of this package. */",7960],["/* Define to the full name and version of this package. */",7956],["/* Define to the one symbol short name of this package. */",7936],["/* Define to the address where bug reports for this package should be sent. */",7929],["/* Define to 1 if you have the <string.h> header file. */",7916],["/* Define to prevent recursive inclusion -------------------------------------*/",25977]],"useCount":1055457},{"word":"Description","context":[["/* <Description>                                                         */",27162],["// .SECTION Description",21551],["Description:",18217],["// Description:",14307],["// Description:",10941],["Routine Description:",10145],["* Description:",28907],["//  Description:",7955],["Description",9618],["// Description:",232947]],"useCount":716015},{"word":"Do","context":[["#define SD_LOAD_BALANCE\t\t0x0001\t/* Do load balancing on this domain. */",3389],["0x00000000  // Do nothing",11312],["// Do nothing.",3346],["// Do this here so we don't have to critsect vNodes inside mapAddresses critsect.",3755],["// Do not store addresses outside our network",3993],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// Do nothing",4207],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["// Do nothing",8052],["/* Do to the insanities of de_thread it is possible for a process",3499]],"useCount":590547},{"word":"E","context":[["I != E; ++I)",4171],["case 'E':",4605],["I != E; ++I) {",9879],["VisitExpr(E);",4105],["* Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497",3249],["quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);",3134],["case 'E':",2706],["*                           P R I V A T E   D A T A",2516],["*                         C O M P I L E R   F L A G S",2515],["return E;",4340]],"useCount":1139480},{"word":"EXPECT_EQ","context":[["EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));",6554],["EXPECT_EQ(0, memcmp(&expected, commands_, sizeof(expected)));",7083],["EXPECT_EQ(1, cache.disk_cache()->create_count());",7164],["EXPECT_EQ(GL_NO_ERROR, GetGLError());",9206],["EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);",9690],["EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));",15035],["EXPECT_EQ(OK, rv);",17266],["EXPECT_EQ(ERR_IO_PENDING, rv);",23575],["EXPECT_EQ(ERR_IO_PENDING,",6093],["EXPECT_EQ(",32159]],"useCount":3101385},{"word":"EXPECT_FALSE","context":[["EXPECT_FALSE(ent.hasField(\"modDate\"));",2106],["EXPECT_FALSE(IsSupportedKeySystemWithMediaMimeType(",2382],["EXPECT_FALSE(",17243],["EXPECT_FALSE(result_layer);",2146],["EXPECT_FALSE(d.received_data_before_response());",2367],["EXPECT_FALSE(delegate->tap());",1689],["EXPECT_FALSE(delegate->scroll_update());",2005],["EXPECT_FALSE(delegate->tap_cancel());",2009],["EXPECT_FALSE(delegate->scroll_end());",2046],["EXPECT_FALSE(delegate->scroll_begin());",2128]],"useCount":741322},{"word":"EXPECT_TRUE","context":[["EXPECT_TRUE(catcher.GetNextResult()) << catcher.message();",1981],["EXPECT_TRUE(channel_->SetSendCodecs(codecs));",1990],["EXPECT_TRUE(response->auth_challenge.get() == NULL);",2452],["EXPECT_TRUE(page->viewportDescription().userZoom);",3126],["EXPECT_TRUE(",3205],["EXPECT_TRUE(gesture_provider_->OnTouchEvent(event));",3407],["EXPECT_TRUE(result);",3562],["EXPECT_TRUE(SetupEngine());",3666],["EXPECT_TRUE(success);",4285],["EXPECT_TRUE(",31009]],"useCount":1447874},{"word":"Enable","context":[["#define PHY_MISR_LINK_INT_EN            ((uint16_t)0x0020)  /*!< Enable Interrupt on change of link status       */",1473],["// Enable",8929],["pCmdUI->Enable(FALSE);",1320],["// Enable Data Execution Prevention (DEP)",2789],["/* Enable C linkage for C++ Compilers: */",2626],["// Trigger Enable",2212],["#define PHY_AUTONEGOTIATION             ((uint16_t)0x1000)  /*!< Enable auto-negotiation function     */",1543],["#define PHY_MICR_INT_EN                 ((uint16_t)0x0002)  /*!< PHY Enable interrupts                           */",1534],["#define PHY_MICR_INT_OE                 ((uint16_t)0x0001)  /*!< PHY Enable output interrupt events              */",1530],["/* Enable general extensions on Solaris.  */",1249]],"useCount":1119832},{"word":"End","context":[["} // End namespace Foam",9728],["End:",3578],["} // End llvm namespace",4091],["End:",4241],["ImGui::End();",4861],["// End:",4930],["}; /* End extern \"C\". */",7859],["// End:",9041],["* End:",16719],["/* End of implementation class template. */",19991]],"useCount":607533},{"word":"Error","context":[["return Error;",8728],["// Error",6423],["throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");",6229],["return gl::Error(GL_NO_ERROR);",6231],["throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");",5081],["throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");",4939],["context->recordError(Error(GL_INVALID_OPERATION));",4612],["printf(\"Parameter Type Error!\\n\");",4473],["return state.Error();",4456],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166]],"useCount":1668626},{"word":"Event","context":[["#include \"Event.h\"",2690],["class Event;",3588],["sf::Event event;",1861],["* @brief External Interrupt/Event Controller",1879],["Event *ev",1929],["#include \"core/events/Event.h\"",1956],["Event event;",1990],["#include \"Event.h\"",2015],["template <class Event,class FSM>",2046],["const ui::Event& event) {",2389]],"useCount":586874},{"word":"F","context":[["template <typename F>",3888],["case 'F':",4612],["\\\\      /  F ield         | foam-extend: Open Source CFD",7822],["template<typename F>",3673],["/*F*/",3306],["case 'F':",2926],["*                         C O M P I L E R   F L A G S",2515],["\"F^K[KFYFY[K[\",",8162],["\"F^K[KFYFY[K[\",",16324],["\\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox",28967]],"useCount":789247},{"word":"FALSE","context":[["return(FALSE);",6374],["ASSERT(FALSE);",6885],["#ifndef FALSE",8459],["#define FALSE 0",9105],["return(FALSE);",22036],["return FALSE;",25089],["DBUG_RETURN(FALSE);",27665],["return FALSE;",36192],["return FALSE;",67276],["return FALSE;",317275]],"useCount":1784424},{"word":"FILE","context":[["static FILE* fileout = NULL;",3476],["FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.",3749],["// ----------------------------- END-OF-FILE ----------------------------------",3796],["FILE *f;",3810],["BrowserThread::FILE, FROM_HERE,",4557],["/* DO NOT EDIT THIS FILE - it is machine generated */",4858],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::FILE));",5678],["* BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES",5888],["FILE *fp;",8971],["// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-",9982]],"useCount":721661},{"word":"File","context":[["modify this File in accordance with the terms and conditions of the General",2038],["This file is part of BFD, the Binary File Descriptor library.",3343],["* File types",2043],["File file;",2222],["EXPECT_EQ(base::File::FILE_OK,",2231],["This File is part of Core3.",2459],["/* End of File */",2460],["* @xrefitem bom \"File Content Label\" \"Release Content\"",3088],["QMenu *file = appMenuBar->addMenu(tr(\"&File\"));",3327],["#include \"filesystem/File.h\"",4490]],"useCount":578517},{"word":"Filter","context":[["class Filter;",810],["// Filter out duplicate requests",3595],["Filter filter;",2101],["@param[in] filter  Filter specification such as \"Comma Separated Files (*.csv)\"",2018],["Filter extFilter = filter;",1338],["#include \"Filter.h\"",1037],["__IO uint32_t FR2; /*!< CAN Filter bank register 1 */",963],["#define  CAN_F4R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */",776],["#include \"Filter.h\"",779],["__IO uint32_t FR1; /*!< CAN Filter bank register 1 */",963]],"useCount":1380276},{"word":"For","context":[["* For the list of contributors see $ROOTSYS/README/CREDITS.             *",8931],["** and conditions see https://www.qt.io/terms-conditions. For further",9410],["** a written agreement between you and The Qt Company. For licensing terms",9470],["For the latest info, see http://www.ogre3d.org/",10372],["/* For IDL files that don't want to include root IDL files. */",15792],["** a written agreement between you and The Qt Company. For licensing terms",16338],["** conditions see http://qt.digia.com/licensing.  For further information",30797],["** a written agreement between you and Digia.  For licensing terms and",33459],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** a written agreement between you and Digia.  For licensing terms and",37400]],"useCount":1835644},{"word":"Foundation","context":[["#import <Foundation/Foundation.h>",247052],["#import <Foundation/Foundation.h>",247052],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",53996],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Foundation, in version 2 as it comes in the \"COPYING\" file of the",20771],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",17770],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston,",16435],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",13852],["* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",13334]],"useCount":1167561},{"word":"Function","context":[["/* Function codes. */",2092],["* Function prototypes",2329],["class Function;",3067],["/* Function prototypes */",3071],["/* Function Prototypes: */",3257],["#include \"llvm/IR/Function.h\"",3407],["Function:",6311],["v8::Local<v8::Function> cons =",7467],["Function:",8029],["/* <Function>                                                            */",9399]],"useCount":640346},{"word":"GLAPI","context":[["GLAPI void APIENTRY glTagSampleBufferSGIX (void);",331],["GLAPI void APIENTRY glEndFragmentShaderATI (void);",331],["#ifndef GLAPI",1534],["GLAPI void APIENTRY glFinishTextureSUNX (void);",331],["GLAPI void APIENTRY glFlushRasterSGIX (void);",331],["GLAPI void APIENTRY glEndOcclusionQueryNV (void);",331],["GLAPI GLuint APIENTRY glCreateProgram (void);",385],["#    define GLAPI extern",443],["GLAPI void APIENTRY",673],["#define GLAPI extern",982]],"useCount":777639},{"word":"GLenum","context":[["GLenum pname,",7442],["EXPECT_EQ(static_cast<GLenum>(11), cmd.target);",2416],["GLenum format,",2443],["GLenum target,",2474],["GLenum type,",2842],["GLenum internalformat,",3340],["GLenum format,",3746],["GLenum target,",3836],["GLenum pname,",4377],["GLenum type,",5218]],"useCount":1985174},{"word":"GLfloat","context":[["const GLfloat* value) {",1529],["const GLfloat* value) {",1012],["const GLfloat* value) override;",996],["GLfloat x,",975],["GLfloat y,",893],["static GLfloat data[] = {",767],["static_cast<GLfloat>(kSomeBaseValueToTestWith + 0),",765],["typedef float GLfloat;",746],["static_cast<GLfloat>(kSomeBaseValueToTestWith + 1),",649],["GLfloat* params) {",611]],"useCount":678881},{"word":"GLint","context":[["GLint yoffset,",2685],["GLint level,",4114],["GLint y,",1599],["GLint yoffset,",1766],["GLint xoffset,",1787],["GLint* params) {",1981],["GLint x,",2024],["GLint y,",2745],["GLint xoffset,",2815],["GLint level,",5745]],"useCount":1062559},{"word":"GLuint","context":[["GLuint index,",2696],["GLuint index,",1297],["GLuint texture;",1248],["GLuint texture,",1228],["EXPECT_EQ(static_cast<GLuint>(11), cmd.program);",1182],["static_cast<GLuint>(11),",1113],["GLuint mask,",1038],["typedef unsigned int GLuint;",975],["if (!SafeMultiplyUint32(n, sizeof(GLuint), &data_size)) {",970],["const GLuint kClient1Id = 1;",967]],"useCount":1376375},{"word":"GURL","context":[["GURL::Replacements replacements;",2805],["const GURL& url,",14440],["class GURL;",11433],["const GURL& url) {",6234],["const GURL& origin,",5583],["GURL url;",3721],["request.url = GURL(\"http://www.google.com/\");",3657],["const GURL& origin,",3181],["GURL(),",2893],["const GURL& url,",27019]],"useCount":778185},{"word":"Get","context":[["// Get prev tx from single transactions in memory",4057],["// Get recent addresses",4125],["// Get prev block index",4167],["CTxDestination dest = address.Get();",4407],["//\t\t\tProperty Get Method",4717],["// Get local host ip",4731],["string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);",5909],["// Get saved block",6008],["scriptPubKey.SetDestination(address.Get());",9010],["base::ThreadTaskRunnerHandle::Get()->PostTask(",9389]],"useCount":2111391},{"word":"GetGUID","context":[["data << uint64(GetGUID());",8930],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->PrepareQuestMenu(creature->GetGUID());",7267],["pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());",5257],["pPlayer->PrepareQuestMenu(pCreature->GetGUID());",4025],["stmt->setUInt64(0, GetGUID().GetCounter());",3848],["if (pItem->GetGUID() == guid)",2663],["s64.insert(target->GetGUID());",2401],["player->GetSession()->SendListInventory(creature->GetGUID());",2277],["data << GetGUID();",2084]],"useCount":721482},{"word":"GetTypeId","context":[["if (m_caster->GetTypeId() != TYPEID_PLAYER)",23818],["if (GetTypeId() == TYPEID_PLAYER)",35945],["if (target->GetTypeId() == TYPEID_PLAYER)",23275],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_PLAYER)",21701],["if (m_caster->GetTypeId() == TYPEID_PLAYER)",19899],["if (GetTypeId() != TYPEID_PLAYER)",11567],["if (victim->GetTypeId() == TYPEID_PLAYER)",9518],["if (GetTypeId() == TYPEID_UNIT)",6090],["return GetCaster()->GetTypeId() == TYPEID_PLAYER;",5984],["if (target->GetTypeId() != TYPEID_PLAYER)",16818]],"useCount":632699},{"word":"H","context":[["#include \"Time.H\"",2985],["case 'H':",2540],["#include \"polyMesh.H\"",2586],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",2944],["strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);",3248],["#include \"volFields.H\"",3874],["DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",3961],["case 'H':",4138],["// TODO: reference any additional headers you need in STDAFX.H",5363],["#include \"addToRunTimeSelectionTable.H\"",9481]],"useCount":588448},{"word":"HRESULT","context":[["HRESULT hr;",4844],["HRESULT ( STDMETHODCALLTYPE *QueryInterface )(",44419],["HRESULT hr = S_OK;",34998],["HRESULT hr;",33671],["HRESULT",12661],["HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(",10067],["/* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )(",9991],["HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(",9977],["HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(",9977],["HRESULT",6800]],"useCount":983208},{"word":"Handle","context":[["return v8::Handle<v8::Value>();",2007],["Handle<Name> name,",2028],["#include \"platform/heap/Handle.h\"",10801],["/* Handle runaway exceptions. Shows a message box with the problem and quits the program.",2964],["Handle<Object> result;",2625],["JS::Handle<JSObject*>",2461],["case STATE_EATING_SPACES: // Handle runs of whitespace",2349],["* @param  __HANDLE__: specifies the UART Handle.",2220],["v8::Handle<v8::Object> holder = info.Holder();",2212],["Handle<JSObject> holder,",2043]],"useCount":1032514},{"word":"I","context":[["//  W A R N I N G",24673],["* Signature: ()I",4040],["I != E; ++I) {",9879],["I != E; ++I) {",9879],["DESCR(\"I/O\");",9610],["return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);",6069],["++I;",5317],["case 'I':",5010],["I != E; ++I)",4171],["I != E; ++I)",4171]],"useCount":2095643},{"word":"ID","context":[["* @param system_id ID of this system",11697],["uint32    ID;                                           // 0        m_ID",2896],["// RCS-ID:      $Id$",2952],["uint32    ID;                                           // 0",3170],["static char ID;",3414],["// RCS-ID:      $Id$",4127],["daeMetaElement* meta = dae.getMeta(ID());",5193],["dae.setMeta(ID(), *meta);",5193],["virtual daeInt typeID() const { return ID(); }",5211],["* @param component_id ID of this component (e.g. 200 for IMU)",11697]],"useCount":1360821},{"word":"IN","context":[["* EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR",21181],["* TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",11160],["* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",11284],["* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",11932],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13385],["IN\tPRTMP_ADAPTER\tpAd,",13418],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13617],["* ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE",14577],["IN",15752],["* ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE",18415]],"useCount":1656987},{"word":"Id","context":[["/* $Id$ */",15651],["switch (auraSpellInfo->Id)",5387],["#ident \"$Id$\"",5425],["/* $Id$ */",14634],["* $Id$",14366],["// $Id$",12580],["switch (m_spellInfo->Id)",11749],["switch (dummySpell->Id)",8854],["// $Id$",8565],["* $Id$",25834]],"useCount":825254},{"word":"If","context":[["along with GCC; see the file COPYING3.  If not see",9708],["// with this library; see the file COPYING3.  If not see",42545],["** If you have questions regarding the use of this file, please contact",34088],["** If you have questions regarding the use of this file, please contact",31367],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["* along with this library; see the file COPYING.LIB.  If not, write to",26690],["along with this library; see the file COPYING.LIB.  If not, write to",23776],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["*  along with XBMC; see the file COPYING.  If not, see",18715],["*  along with XBMC; see the file COPYING.  If not, see",11869]],"useCount":5039235},{"word":"In","context":[["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, Nokia gives you certain additional",37705],["** In addition, as a special exception, Nokia gives you certain additional",40703],["** In addition, as a special exception, Digia gives you certain additional",37026],["** In addition, as a special exception, The Qt Company gives you certain additional",6440],["In state BUSY this request will be queued. Request won't",5344],["** In addition, as a special exception, The Qt Company gives you certain additional",5229],["// In case we are on a very long side-chain, it is possible that we already have",3600],["ASSERT(m_State == 3);  // In game mode?",2887],["// In addition, as a special exception, Code Synthesis Tools CC gives",2935]],"useCount":1310076},{"word":"Inc","context":[["* Foundation, Inc., 59 Temple Place, Suite 330, Boston,",16435],["//     * Neither the name of Google Inc. nor the names of its",14619],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",17770],["*     * Neither the name of Google Inc. nor the names of its",18258],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["*     * Neither the name of Google Inc. nor the names of its",21748],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",53996],["* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",13334],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",13852]],"useCount":832647},{"word":"Init","context":[["Init();",23251],["Init(pwalletIn);",3073],["widget->Init(params);",3477],["Init(nTypeIn, nVersionIn);",4299],["// Init OpenSSL library multithreading support",4801],["// Init",5548],["void Init();",20687],["Init();",15009],["void Init()",6290],["Init();",7828]],"useCount":673791},{"word":"Initialize","context":[["// Initialize",1966],["Initialize();",29318],["Initialize();",9705],["Initialize(reads, arraysize(reads), writes, arraysize(writes));",2053],["/** Initialize bitcoin.",2421],["sha.Initialize();",2890],["virtual void Initialize();",2961],["// Initialize Windows Sockets",3778],["void Initialize();",8404],["void Initialize()",16447]],"useCount":627124},{"word":"Input","context":[["/*  Input(s)         :                                                        */",2312],["// Input   :",2491],["Input:",2591],["// Input Arguments:",3237],["// Input  :",4165],["* Input:",5001],["// Input:",6348],["/* <Input>                                                               */",11156],["** Input Parameters:",2195],["// Input:",2220]],"useCount":575761},{"word":"Interrupt","context":[["// Exception Masked Interrupt",2532],["// Exception Raw Interrupt Status",2532],["// Exception Interrupt Mask",2532],["// Raw Interrupt",2564],["// Masked Interrupt",2565],["// Interrupt",5607],["// Interrupt Clear",6105],["// Interrupt Mask",6849],["// Interrupt Status",19509],["// Exception Interrupt Clear",2532]],"useCount":1626315},{"word":"Invalid","context":[["throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");",4905],["throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");",5682],["throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");",5296],["throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");",5010],["throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);",4766],["BLAZE_INTERNAL_ASSERT( (~lhs).rows()    == rhs.rows()   , \"Invalid number of rows\"    );",4213],["BLAZE_INTERNAL_ASSERT( (~lhs).columns() == rhs.columns(), \"Invalid number of columns\" );",4213],["throw JSONRPCError(-8, \"Invalid parameter\");",3874],["assert(N == 1 && \"Invalid number of operands!\");",3173],["throw runtime_error(\" Invalid public key: \"+ks);",10489]],"useCount":643772},{"word":"It","context":[["* It must not be nested with write_lock_irq(&tasklist_lock),",3530],["// This file is not part of the Qt API.  It exists purely as an",15375],["\"It is recommended you use the following random password:\\n\"",6754],["// This file is not part of the Qt API.  It exists for the convenience",6286],["***   call into the kernel available to libc.  It contains only constants,",4647],["\"It is also recommended to set alertnotify so you are notified of problems;\\n\"",4134],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Restrict callers by IP.  It is important to",3506],["// This function must \\b NOT be called explicitly! It is used internally for the performance",3432],["/** An output of a transaction.  It contains the public key that the next input",3222]],"useCount":1324308},{"word":"Item","context":[["Item* item = NULL;",3065],["if (Item* pItem = GetItemByPos(INVENTORY_SLOT_BAG_0, i))",16036],["Item*",8607],["Item *item;",11280],["if (Item* item = GetItemByPos(INVENTORY_SLOT_BAG_0, i))",3367],["Item* pItem = GetItemByPos(INVENTORY_SLOT_BAG_0, i);",3988],["#include \"Item.h\"",4223],["List<Item> field_list;",2953],["if (Item* pItem = pBag->GetItemByPos(j))",4765],["class Item;",6488]],"useCount":1046686},{"word":"L","context":[["case 'L':",5192],["DSP_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));",5746],["DSP_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));",5746],["lua_newtable(L);",6461],["pushBoolean(L, false);",6605],["pushBoolean(L, true);",6888],["lua_error( L );",7409],["lua_error(L);",7736],["lua_pop(L, 1);",15205],["lua_pushnil(L);",36062]],"useCount":2226556},{"word":"Length","context":[["ULONG Length;",2697],["if(info.Length() != 0)",22780],["if(info.Length() != 1)",17077],["if(info.Length() > 0 && info[0]->IsInt32())",4647],["if (UNLIKELY(info.Length() < 1)) {",4358],["<< \"Content-Length: \" << strMsg.size() << \"\\r\\n\"",3613],["\"Content-Length: 296\\r\\n\"",3557],["if(info.Length() > 0 && info[0]->IsString())",3493],["if(info.Length() != 2)",3178],["if( a0->Length() < 3 )",2452]],"useCount":594830},{"word":"Log","context":[["CLog::Log(LOGERROR, \"%s (%s) failed\", __FUNCTION__, strSQL.c_str());",1799],["#include \"Log.h\"",35228],["CLog::Log(LOGERROR, \"%s failed\", __FUNCTION__);",5495],["#include <utils/Log.h>",3760],["Log::WaitBeforeContinueIfNeed();",3292],["static void Log(const param_type& p, std::string* l);",3125],["#include \"Log.h\"",3119],["* $Log$",3015],["Log() << Endl;",2374],["CLog::Log(LOGERROR, \"%s (%s) failed\", __FUNCTION__, strFilenameAndPath.c_str());",2259]],"useCount":597653},{"word":"M","context":[["*                         C O M P I L E R   F L A G S",2515],["\\\\/     M anipulation  |",33003],["case 'M':",4662],["//M*/",4072],["/*M///////////////////////////////////////////////////////////////////////////////////////",3972],["DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",3961],["strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);",3248],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",2944],["case 'M':",2703],["*                                 M A C R O S",2543]],"useCount":791119},{"word":"MA","context":[["* Boston, MA 02110-1301, USA.",53593],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Boston, MA 02110-1301, USA.",38378],["Boston, MA 02110-1301, USA.",23410],["* Boston, MA 02111-1307, USA.",22301],["Boston, MA 02110-1301, USA.",20855],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",17770],["* MA 02111-1307 USA",16535],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",53996]],"useCount":910411},{"word":"Mask","context":[["// Interrupt Mask",6849],["#define  EXTI_IMR_MR12                       ((uint32_t)0x00001000)        /*!< Interrupt Mask on line 12 */",1290],["#define  EXTI_IMR_MR11                       ((uint32_t)0x00000800)        /*!< Interrupt Mask on line 11 */",1290],["#define  EXTI_EMR_MR11                       ((uint32_t)0x00000800)        /*!< Event Mask on line 11 */",1290],["#define  EXTI_IMR_MR10                       ((uint32_t)0x00000400)        /*!< Interrupt Mask on line 10 */",1290],["#define  EXTI_IMR_MR15                       ((uint32_t)0x00008000)        /*!< Interrupt Mask on line 15 */",1290],["0x00ff, 0x0000, /*Mask Release*/",1622],["// Exception Interrupt Mask",2532],["0x00ff, 0x0000,\t/*Mask Release*/",3096],["// Mask",10566]],"useCount":600017},{"word":"Mode","context":[["enum Mode {",4225],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */",5726],["/// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",4086],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",3636],["AskPassphraseDialog::AskPassphraseDialog(Mode mode, QWidget *parent) :",3077],["/*-*- Mode: C; c-basic-offset: 8; indent-tabs-mode: nil -*-*/",2902],["EditAddressDialog::EditAddressDialog(Mode mode, QWidget *parent) :",2900],["/* -*- Mode: C; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */",2803],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",7120]],"useCount":902991},{"word":"N","context":[["//  W A R N I N G",24673],["for (int i = 0; i < N; i++) {",3688],["SDLoc dl(N);",3884],["*\t\tFred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>",3968],["int N;",4167],["case 'N':",4325],["EVT VT = N->getValueType(0);",5163],["// N.B. These #defines do *not* include the EID & length",5324],["<td class=\"s-na\">N</td>",7268],["//  W A R N I N G",24673]],"useCount":1819269},{"word":"NSString","context":[["- (NSString *)description;",3544],["-(NSString*)getResponse;",1829],["@class NSString;",6351],["-(NSString *)description;",2881],["NSString *_name;",2466],["@property (nonatomic, copy) NSString *name;",2403],["@property (nonatomic, copy) NSString *title;",2367],["@property (nonatomic, strong) NSString *name;",2116],["@property(readonly, copy) NSString *description;",9894],["@property(readonly, copy) NSString *debugDescription;",9901]],"useCount":658291},{"word":"NULL","context":[["return NULL;",301960],["return NULL;",179043],["return NULL;",983899],["void* args[2] = {NULL, (void*)&arg__1};",32638],["NULL);",33639],["USB_SC_DEVICE, USB_PR_DEVICE, NULL,",54768],["NULL,",60879],["NULL,",67513],["return NULL;",83375],["NULL,",130305]],"useCount":16621411},{"word":"Name","context":[["Module Name:",11554],["Module Name:",4241],["Handle<Name> name,",2028],["// Name:",1994],["//  Name:",1921],["/* Function Name:",1896],["// Name of client reported in the 'version' message. Report the same name",1776],["StringRef Name;",1767],["std::string Name;",4285],["/* Name of package */",6664]],"useCount":846319},{"word":"New","context":[["setWindowTitle(tr(\"New sending address\"));",2904],["info.GetReturnValue().Set(Nan::New(r));",13344],["{ Nan::New(vtkNodeJsNoWrap) };",7467],["Foundation of State University of New York at Stony Brook under",4293],["Technology, Rutgers State University of New Jersey, and the Research",4293],["// New best block",4145],["// New 0.6 features:",3374],["info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());",3346],["case Encrypt: // New passphrase x2",3086],["tr(\"New key generation failed.\"),",2908]],"useCount":653364},{"word":"No","context":[["* Wrappers for p->thread_info->cpu access. No-op on UP.",3528],["United States of America Serial No. 11/760379 and to the patents",4293],["/*            Under Contract No. DE-AC07-05ID14517              */",5083],["/*            Under Contract No. DE-AC07-05ID14517              */",5908],[": /* No clobbers */);                                   \\",7620],["// No implementation - assignment is unsupported.",9888],["** No Commercial Usage",12223],["** No Commercial Usage",14532],[": /* No clobbers */);",21336],["// No break on purpose",3997]],"useCount":980713},{"word":"Node","context":[["Node = new TNode(\"TF4T1\",\"TF4T1\",\"TF4T\",-3,0,0,\"\");",2882],["class Node;",10156],["Node = new TNode(\"TF3T3\",\"TF3T3\",\"TF3T\",3,0,0,\"\");",2882],["Node = new TNode(\"TF4S1\",\"TF4S1\",\"TF4S\",0,-2.7,0,\"\");",2882],["Node = new TNode(\"TF4T3\",\"TF4T3\",\"TF4T\",3,0,0,\"\");",2882],["Node = new TNode(\"TF3T1\",\"TF3T1\",\"TF3T\",-3,0,0,\"\");",2882],["Node = new TNode(\"TF4T2\",\"TF4T2\",\"TF4T\",0,0,0,\"\");",2882],["Node = new TNode(\"TF3S1\",\"TF3S1\",\"TF3S\",0,-2.7,0,\"\");",2882],["Node = new TNode(\"TF3T2\",\"TF3T2\",\"TF3T\",0,0,0,\"\");",2882],["sym(1).Node = node;",5337]],"useCount":1072300},{"word":"None","context":[["None.",5908],["* @retval None",60150],["internal::None, internal::None, internal::None, internal::None,",34304],["internal::None, internal::None, internal::None, internal::None,",34304],["internal::None, internal::None, internal::None, internal::None,",34304],["None",12157],["return None;",8419],["None",7586],["internal::None, internal::None, internal::None, internal::None,",34304],["//\t\tNone",6518]],"useCount":599008},{"word":"Note","context":[["/* <Note>                                                                */",10485],["// Note: not using straight sprintf here because we do NOT want",6536],["* Note:",6504],["// non-standard. Note that this EvalScript() call will",3947],["// Note: if you modify this code to accept non-standard transactions, then",3642],["// Note that the walletpassphrase is stored in params[0] which is not mlock()ed",3551],["// Note: On Mac, the dock icon is used to provide the tray's functionality.",3378],["Note:",2693],["* Note: There might be duplicate includes required by more than one driver.",3310],["// Note:       Autogenerated by xml2atts.",2725]],"useCount":1104922},{"word":"Number","context":[["/* @brief Number of external pin port on specified port. */",6112],["// (memory only) Number of transactions in the chain up to and including this block",1461],["template <typename Number>",5770],["// Number of transactions in this block.",1463],["unsigned int fi_extents_mapped;\t/* Number of mapped extents */",1805],["/* Number of bits in a file offset, on hosts where this is settable. */",1860],["* Number of busy cpus in this group.",1897],["\"Number of seconds to keep misbehaving peers from reconnecting (default: \"",3042],["* Number of functions that haven't been traced",3453],["template <int dim, typename Number>",3569]],"useCount":862569},{"word":"O","context":[["*                                 M A C R O S",2543],["pOut        [ O ] - Output buffer",2624],["pOutLen     [I/O] - Upon input the maximum number of BYTEs pOut can",2624],["case 'O':",3079],["* Sets up I/O resources to accept and handle a new connection.",3507],["raw_ostream &O) {",3706],["\\\\    /   O peration     | Version:     3.2",3730],["return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);",6069],["DESCR(\"I/O\");",9610],["\\\\    /   O peration     |",33443]],"useCount":802472},{"word":"OF","context":[["* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",9368],["* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",9368],["SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",9580],["* PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER",10264],["* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",10882],["* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",10882],["* TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",11160],["* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",11932],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",12100],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",33064]],"useCount":628641},{"word":"OK","context":[["EXPECT_EQ(OK, callback.WaitForResult());",5487],["return Status::OK();",26311],["return OK;",23787],["return OK;",20478],["EXPECT_EQ(OK, rv);",17266],["root[\"status\"] = \"OK\";",6684],["return Status::OK;",6009],["MockRead(SYNCHRONOUS, OK),",5890],["deallog << \"OK\" << std::endl;",5508],["printf(\"OK\\n\");",5277]],"useCount":698578},{"word":"OR","context":[["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",12100],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",33064],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",33064],["* ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE",18415],["* ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE",14577],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",12100],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",33064],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",12100],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13385],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13617]],"useCount":1153440},{"word":"OS","context":[["* This file is part of the Genode OS framework, which is distributed",4343],["*    Mac OS X:         in version 10.0 and later",30128],["*    Mac OS X:         not available",13788],["* This file is part of the Genode OS framework, which is distributed",6105],["*  Mac OS X threading:",5154],["OS << '\\n';",5077],["OS << ')';",4406],["OS << \"\\n\";",3145],["* There is no good OS-independent way to check a key state in Qt, but we",3087],["OS << \")\";",3060]],"useCount":633533},{"word":"OVERRIDE","context":[["AuraScript* GetAuraScript() const OVERRIDE",6093],["const content::NotificationDetails& details) OVERRIDE;",6150],["SpellScript* GetSpellScript() const OVERRIDE",9049],["virtual void SetUp() OVERRIDE {",9136],["void UpdateAI(uint32 diff) OVERRIDE",11565],["void Reset() OVERRIDE",13031],["void Register() OVERRIDE",15083],["CreatureAI* GetAI(Creature* creature) const OVERRIDE",16154],["void JustDied(Unit* /*killer*/) OVERRIDE",5716],["virtual void TearDown() OVERRIDE {",5645]],"useCount":843158},{"word":"Object","context":[["Object o;",7638],["Object result;",27917],["Object obj;",25050],["Object entry;",21960],["v8::Local<v8::Object> holder = info.Holder();",13394],["Object ret;",13072],["/* MOOSE - Multiphysics Object Oriented Simulation Environment  */",8152],["(Object-oriented Graphics Rendering Engine)",8491],["/* MOOSE - Multiphysics Object Oriented Simulation Environment  */",9488],["(Object-oriented Graphics Rendering Engine)",11617]],"useCount":1244042},{"word":"P","context":[["*                            P U B L I C   D A T A",2519],["case 'P':",2799],["* <P>",3139],["case 'P':",4633],["template <typename P>",2201],["unsigned P                  : 1;",2374],["*                             D A T A   T Y P E S",2422],["*                         C O M P I L E R   F L A G S",2515],["return P;",1990],["*                           P R I V A T E   D A T A",2516]],"useCount":841219},{"word":"Pair","context":[["result.push_back(Pair(\"target\",   HexStr(BEGIN(hashTarget), END(hashTarget))));",6092],["obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));",6423],["obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));",7054],["obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));",7124],["obj.push_back(Pair(\"testnet\",       fTestNet));",5767],["obj.push_back(Pair(\"blocks\",        (int)nBestHeight));",6068],["result.push_back(Pair(\"data\",     HexStr(BEGIN(pdata), END(pdata))));",5998],["entry.push_back(Pair(\"confirmations\", 0));",4415],["BOOST_FOREACH(const Pair& s, sendTo)",5831],["obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));",5332]],"useCount":702191},{"word":"Player","context":[["Player* player = getUserdata<Player>(L, 1);",4893],["if (Player* modOwner = GetSpellModOwner())",10419],["Player* player = m_caster->ToPlayer();",5999],["Player* player = getUserdata<Player>(L, 1);",4893],["bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)",4644],["Player* player = handler->GetSession()->GetPlayer();",6543],["bool OnGossipHello(Player* player, Creature* creature)",10665],["Player* target;",12266],["#include \"Player.h\"",49987],["class Player;",13820]],"useCount":2038526},{"word":"Point","context":[["cocos2d::Point arg0;",1094],["host_impl_->ScrollBy(gfx::Point(), scroll_delta);",1302],["class Point;",3739],["virtual void OnClick(Point pt, int widget, int click_count)",2399],["*  Point Cloud Library (PCL) - www.pointclouds.org",2208],["Point p;",1638],["*  Point Cloud Library (PCL) - www.pointclouds.org",1597],["#include \"Point.h\"",1572],["const gfx::Point& point) {",1543],["virtual double value (const Point<dim>   &p,",1503]],"useCount":583831},{"word":"Pointer","context":[["ReaderType::Pointer reader = ReaderType::New();",2143],["typedef SmartPointer< Self >       Pointer;",4458],["WriterType::Pointer writer = WriterType::New();",2434],["@param\t\tinClientInfoPtr (in) Client Information Pointer.",2554],["@param[out] selectedSuffixOut  Pointer to return the suffix (file type) that was selected (or 0).",2020],["* @param   pVCpu       Pointer to the VMCPU.",3231],["* @param   pVM             Pointer to the VM.",3355],["* @param PeripheralBase Pointer to a peripheral registers structure (peripheral",12514],["* @param   pVM         Pointer to the VM.",7813],["* @param action Pointer to an action.",6674]],"useCount":703555},{"word":"PyObject","context":[["if (_wrapper && (((PyObject*)_wrapper)->ob_refcnt > 0)) {",49904],["PyObject *inst_dict;",19197],["PyObject * obj1 = 0 ;",19386],["PyObject *",21268],["PyObject *py_retval;",30938],["PyObject * obj0 = 0 ;",37664],["PyObject *resultobj = 0;",39246],["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629]],"useCount":1547231},{"word":"QObject","context":[["QObject(parent)",6999],["#include <QObject>",67688],["QObject(parent),",7231],["#include <QObject>",8284],["return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;",10636],["return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;",10636],[": QObject(parent)",12702],["#include <QtCore/QObject>",13353],["QObject*tx0 = *((QPointer<QObject>*)x0);",13895],["QObject*tx0 = *((QPointer<QObject>*)x0);",13895]],"useCount":618093},{"word":"QString","context":[["QString text;",10204],["return QString();",68072],["#include <QString>",51350],["#include <QString>",21769],["QString",12659],["QString result;",10982],["QString name;",9985],["class QString;",9982],["QString str;",9765],["QString s;",9579]],"useCount":4245509},{"word":"QVariant","context":[["return QVariant();",69101],["#include <QtCore/QVariant>",9696],["#include <QVariant>",7331],["case QVariant::Int:",3852],["QVariant data(const QModelIndex &index, int role) const;",3630],["case QVariant::Double:",3514],["return QVariant(static_cast<int>(unit));",3233],["return QVariant(description(unit));",3233],["return QVariant(name(unit));",3232],["#include <QVariant>",10657]],"useCount":624808},{"word":"QWidget","context":[["return QWidget::event(event);",4291],["MainWindow::MainWindow(QWidget *parent) :",3969],["explicit MainWindow(QWidget *parent = 0);",3998],["QWidget(parent)",3319],["#include <QtGui/QWidget>",7317],["#include <QWidget>",8167],[": QWidget(parent)",9586],["class QWidget;",9906],["QWidget(parent),",10897],["#include <QWidget>",36206]],"useCount":690667},{"word":"Qt","context":[["** This file is part of Qt Creator.",24818],["** This file is part of Qt Creator.",23254],["** a written agreement between you and The Qt Company. For licensing terms",16338],["// This file is not part of the Qt API.  It exists purely as an",15375],["** This file is part of Qt Creator",13795],["** This file is part of Qt Creator",13469],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["** This file is part of the QtGui module of the Qt Toolkit.",10239],["case Qt::DisplayRole:",9915],["** a written agreement between you and The Qt Company. For licensing terms",9470]],"useCount":2191945},{"word":"R","context":[["char const* text = R\"(",2924],["*                                 M A C R O S",2543],["case 'R':",2898],["//  W A R N I N G",24673],["uint32_t R;",3117],["return R;",3926],["case 'R':",4678],["char const* sourceCode = R\"(",5565],[".Doc(R\"doc(",9290],["vuint32_t R;",15472]],"useCount":1190183},{"word":"Read","context":[["// Read block",4536],["// Read block header",5794],["if (!adb.Read(addrman))",3564],["// Read txindex",2127],["// Read txindex from txdb",2127],["// Read header",8140],["// Read message",3565],["// Read next record",3783],["void Read() override;",3818],["// Read prev transaction",3841]],"useCount":796406},{"word":"Redistribution","context":[["* Redistribution and use in source and binary forms, with or without",251058],["* Redistribution and use in source and binary forms, with or without",88602],["// Redistribution and use in source and binary forms, with or without",42441],["Redistribution and use in source and binary forms, with or without",40107],["* Redistribution and use in source and binary forms, with or without modification,",24360],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["// Redistribution and use in source and binary forms, with or without",19804],["*  Redistribution and use in source and binary forms, with or without",14031],["* Redistribution and use in source and binary forms, with or without",17579]],"useCount":671078},{"word":"Register","context":[["void Register()",58806],["Register scratch,",4132],["Register scratch2,",4183],["Register scratch = scratch0();",4336],["register8_t CTRL;  /* Control Register */",4724],["Register scratch1,",5096],["Register scratch,",5460],["Register result = ToRegister(instr->result());",10177],["void Register() OVERRIDE",15083],["void Register() override",41004]],"useCount":2570525},{"word":"Reset","context":[["client->Reset();",6974],["* Reset value: 0x00000000U",8812],["Reset();",9373],["_events.Reset();",9681],["void Reset() OVERRIDE",13031],["void Reset();",15729],["events.Reset();",16171],["void Reset()",114329],["Reset();",53319],["void Reset() override",31567]],"useCount":955553},{"word":"Return","context":[["// Return Value:",20573],[".WillOnce(Return(true));",5086],[".WillRepeatedly(Return(false));",5368],["using ::testing::Return;",5434],["* Return:",5967],["// Return type: bool",6185],[".WillOnce(Return(GL_NO_ERROR))",6722],["// Return",7763],["/* <Return>                                                              */",9275],["//Return since we have no target",17729]],"useCount":1354847},{"word":"Returns","context":[["* Returns:",20710],["// Returns:",3915],["// Output : Returns true on success, false on failure.",4730],["*  Returns:",5698],["// Returns:",5784],["\"Returns an array of objects containing:\\n\"",6325],["* Returns: 0 on success, -1 on failure",6340],["// Returns:\t\t\t\t\t-",8021],["* @return Returns a value of void type.",8352],["Returns:",17011]],"useCount":1824800},{"word":"S","context":[["/*            With the U. S. Department of Energy               */",5083],["template <class S>",4051],["* STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND",4658],["* STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND",4658],["return S;",5864],["/*            With the U. S. Department of Energy               */",5909],["DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains",6078],["case 'S':",6960],["DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains",8590],["// ----------- S t a t e -------------",10046]],"useCount":1330827},{"word":"SIGNAL","context":[["connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));",3370],["disconnect(exportAction, SIGNAL(triggered()), 0, 0);",12518],["connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",6489],["// SIGNAL 0",5569],["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",5239],["connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));",3617],["connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));",3372],["connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),",3484],["connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));",3450]],"useCount":820580},{"word":"SLOT","context":[["QTimer::singleShot(0, this, SLOT(hide()));",3446],["connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));",3370],["connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));",3370],["connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));",3372],["this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));",3418],["connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));",3450],["connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));",3617],["connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",5239],["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",6489]],"useCount":783964},{"word":"STDMETHODCALLTYPE","context":[["ULONG (STDMETHODCALLTYPE *AddRef)(",3846],["HRESULT ( STDMETHODCALLTYPE *QueryInterface )(",44419],["ULONG (STDMETHODCALLTYPE *Release)(",3846],["HRESULT (STDMETHODCALLTYPE *QueryInterface)(",3846],["HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(",9977],["HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(",9977],["/* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )(",9991],["HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(",10067],["ULONG ( STDMETHODCALLTYPE *Release )(",44417],["ULONG ( STDMETHODCALLTYPE *AddRef )(",44417]],"useCount":712211},{"word":"See","context":[["struct io_context;\t\t\t/* See blkdev.h */",3526],["* See file CREDITS for list of people who contributed to this",13130],["// .SECTION See Also",8892],["// See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.",4050],["/** See",4141],["See the README file in the top-level LAMMPS directory.",8796],["See the COPYING file for more details.",7165],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",4764],["\"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");",4857],["See the README file in the top-level LAMMPS directory.",5817]],"useCount":886047},{"word":"Set","context":[["void* next_cmd = cmd.Set(",4151],["Set(pindex);",3191],["// Set icon state: spinning if catching up, tick otherwise",3377],["info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());",3346],["* - decoding: Set by user.",5970],["* - decoding: Set by libavcodec.",4249],["// Set the path to the shortcut target",3303],["* - encoding: Set by user.",21862],["info.GetReturnValue().Set(Nan::New(r));",13344],["info.GetReturnValue().Set(wo);",7467]],"useCount":2071493},{"word":"Size","context":[["class Size;",3081],["const gfx::Size& size,",2037],["// Size limits",13099],["const gfx::Size& size,",3488],["* Size of malloc() pool",2869],["/* Print Buffer Size */",2779],["gfx::Size(100, 100),",2557],["return gfx::Size();",2224],["gfx::Size(10, 10),",2111],["ULONG Size;",2115]],"useCount":1075658},{"word":"Source","context":[["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["// This file is distributed under the University of Illinois Open Source",29309],["\\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox",28967],["* This Source Code Form is subject to the terms of the Mozilla Public",5363],["\\\\      /  F ield         | foam-extend: Open Source CFD",7822],["* This file is part of VirtualBox Open Source Edition (OSE), as",10238],["* This Source Code Form is subject to the terms of the Mozilla Public",10974],["/* This Source Code Form is subject to the terms of the Mozilla Public",11538],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["// This file is distributed under the University of Illinois Open Source",21647]],"useCount":696775},{"word":"Start","context":[["ASSERT_TRUE(test_server.Start());",3609],["// Start threads",3855],["// Start new block file",4134],["Start();",4415],["// Start",4491],["void Start();",5490],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917],["ASSERT_TRUE(test_server_.Start());",5957],["ASSERT_TRUE(test_server()->Start());",9791],["req->Start();",3513]],"useCount":698093},{"word":"Status","context":[["EXPECT_EQ(ER_OK, status) << \"  Actual Status: \" << QCC_StatusText(status);",5365],["return Status::OK;",6009],["// Status and Clear",6577],["Status s;",9132],["// Interrupt Status",19509],["return Status;",21763],["return Status::OK();",26311],["// Status",32652],["register8_t STATUS;  /* Status Register */",4035],["return Status(kOk);",5223]],"useCount":1111693},{"word":"String","context":[["return String();",23753],["String *val_str(String *);",3027],["String s;",3278],["String str;",3570],["/* String converter */",3818],["virtual void print(String *str, enum_query_type query_type);",4050],["class String;",4721],["Finder<Index<StringSet<String<Dna5> > > > &finder,",5408],["Aws::String SerializePayload() const override;",6191],["case QVariant::String:",3226]],"useCount":2134150},{"word":"System","context":[["namespace System",2549],["// System.String",2935],["* @param target_system System ID",2168],["// This file is part of eCos, the Embedded Configurable Operating System.",2943],["using namespace System;",3218],["//  - System clock",3271],["// System.Object",3463],["using namespace System;",3590],["namespace System",4047],["return state.Abort(_(\"System error: \") + e.what());",4553]],"useCount":597650},{"word":"T","context":[["template<class T>",34743],["template<typename T>",163225],["template <class T>",10564],["template <typename T>",17690],["template <class T>",33845],["template <typename T>",52634],["template<typename T>",53955],["template<class T>",88180],["template <class T>",125801],["template <typename T>",229492]],"useCount":4365989},{"word":"TEST_F","context":[["TEST_F(LayerTreeHostContextTestLostContextAndEvictTextures,",352],["TEST_F(Arm32DecoderStateTests,",1699],["TEST_F(HttpNetworkTransactionSpdy2Test,",367],["TEST_F(PipelineIntegrationTest,",413],["TEST_F(RendererSchedulerImplTest,",419],["TEST_F(LayerTreeHostScrollTestCaseWithChild,",426],["TEST_F(",458],["TEST_F(GLES2DecoderGeometryInstancingTest,",460],["TEST_F(PasswordAutofillAgentTest,",543],["TEST_F(LayerTreeHostCommonTest,",899]],"useCount":630764},{"word":"TODO","context":[["//TODO",8093],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["// TODO: make private (improves encapsulation)",7838],["// TODO:",7004],["encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported",6745],["// TODO: reference any additional headers you need in STDAFX.H",5363],["// TODO: implement me!",4866],["// TODO: Add your control notification handler code here",4538],["// TODO Auto-generated destructor stub",4322],["// TODO",25446]],"useCount":1148167},{"word":"TRUE","context":[["#define TRUE 1",6851],["return(TRUE);",5757],["return TRUE;",267724],["return TRUE;",59629],["DBUG_RETURN(TRUE);",57887],["return TRUE;",24940],["return(TRUE);",19590],["return TRUE;",14250],["* @note    The default is @p TRUE.",10623],["#ifndef TRUE",9777]],"useCount":1657549},{"word":"Test","context":[["* Test if a process is not yet dead (at most zombie state)",3523],["oss << \" Test: \" << test_ << \"\\n\"",44197],["#include \"Test.h\"",3117],["oss << \" Test: \" << test_ << \"\\n\"",2626],["// Test that header file is self-contained.",1408],["/* Test a flag in parent sched domain */",2451],["// Test",2442],["* Technology Compatibility Kit Test Suite(s) Location:",1865],["using namespace OT::Test;",1804],["// Unit Test",1419]],"useCount":676616},{"word":"The","context":[["** a written agreement between you and The Qt Company. For licensing terms",9470],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["* @note    The default is @p TRUE.",10623],["#error \"(The moc has changed too much.)\"",12708],["** a written agreement between you and The Qt Company. For licensing terms",16338],["//                     The LLVM Compiler Infrastructure",20812],["\\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox",28967],["//                     The LLVM Compiler Infrastructure",39060],["* @param msg The MAVLink message to compress the data into",11697],["The result code associated with performing the operation",11902]],"useCount":10925477},{"word":"These","context":[["// These are checks that are independent of context",3811],["// N.B. These #defines do *not* include the EID & length",5324],["// These functions dispatch to one or all registered wallets",3890],["* These are the constant used to fake the fixed-point load-average",3570],["/* These can be the second arg to send_sig_info/send_group_sig_info.  */",3530],["/* These fields must be setup */",3528],["* Task state bitmask. NOTE! These bits are also",3512],["* select() etc timeout values. These are in nanoseconds.",3457],["* files for a list of changes.  These files are distributed with",3315],["// N.B. These #defines do *not* include the ID & length",2535]],"useCount":662715},{"word":"This","context":[["* This file is part of the LibreOffice project.",39451],["IRpcStubBuffer *This,",93815],["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["( (This)->lpVtbl -> Release(This) )",32690],["( (This)->lpVtbl -> Release(This) )",32690],["( (This)->lpVtbl -> AddRef(This) )",32689],["( (This)->lpVtbl -> AddRef(This) )",32689],["( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )",32679],["( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) )",32679],["// This file is distributed under the University of Illinois Open Source",29309]],"useCount":10131139},{"word":"Time","context":[["* @brief Real-Time Clock",1881],["// Time based nLockTime implemented in 0.1.6",2927],["using base::Time;",5231],["Time",4438],["base::Time(),",3221],["#include \"Time.H\"",2985],["base::Time now = base::Time::Now();",2244],["base::Time now = base::Time::Now();",2244],["class Time;",1958],["FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers",1809]],"useCount":708956},{"word":"Timer","context":[["class Timer {",1181],["Timer t;",1240],["Timer();",1347],["class Timer",1433],["class Timer;",1616],["Timer timer;",2338],["// and Timer B of GPTM 32/64-Bit",2772],["* @param  TIMx Timer instance",2917],["#include \"Timer.h\"",4648],["#include \"Timer.h\"",5327]],"useCount":653186},{"word":"ToString","context":[["ret.push_back(address.ToString());",3540],["std::string ToString() const",26172],["return CBitcoinAddress(innerID).ToString();",3804],["hashMerkleRoot.ToString().c_str(),",4113],["printf(\"%s\\n\", ToString().c_str());",16077],["std::string ToString() const;",9909],["printf(\"%s\", ToString().c_str());",5886],["a.push_back(CBitcoinAddress(addr).ToString());",5589],["printf(\"%s\\n\", a.ToString().c_str());",5572],["string currentAddress = address.ToString();",4332]],"useCount":775622},{"word":"Type","context":[["enum Type",5295],["enum Type {",11660],["uint32_t reg;                /*!< Type      used for register access              */",6788],["template <typename Type>",6719],["template <class Type>",6355],["uint8_t reg;                 /*!< Type      used for register access              */",6134],["Type*",5641],["Type type;",5185],["template<class Type>",29125],["template <class Type>",5102]],"useCount":2082645},{"word":"U","context":[["DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains",8590],["template <typename U>",10214],["uint8_t U;",6729],["template<typename U>",6512],["template <typename T, typename U>",6171],["DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains",6078],["/*            With the U. S. Department of Energy               */",5909],["/*            With the U. S. Department of Energy               */",5083],["template<typename T, typename U>",3850],["uint32_t U;",10127]],"useCount":797590},{"word":"UIKit","context":[["@import UIKit;",10291],["// AFNetworking/UIKit",644],["#import <UIKit/UIView.h>",773],["#import <UIKit/UIKitDefines.h>",511],["#import \"UIKit-Structs.h\"",359],["#import <UIKit/UIKitExport.h>",304],["#import <UIKit/UIViewController.h>",259],["//  UIKit",775],["#import <UIKit/UIKit.h>",296504],["#import <UIKit/UIKit.h>",296504]],"useCount":615366},{"word":"ULONG","context":[["/* [in] */ ULONG celt,",3632],["ULONG - Return code",3315],["ULONG (STDMETHODCALLTYPE *Release)(",3846],["ULONG ( STDMETHODCALLTYPE *AddRef )(",44417],["ULONG ( STDMETHODCALLTYPE *Release )(",44417],["ULONG",6874],["STDMETHOD_(ULONG,Release)(THIS) PURE;",5457],["STDMETHOD_(ULONG,AddRef)(THIS) PURE;",5387],["ULONG Flags;",3999],["ULONG (STDMETHODCALLTYPE *AddRef)(",3846]],"useCount":664407},{"word":"USA","context":[["* MA 02111-1307 USA",16535],["Boston, MA 02110-1301, USA.",23410],["* Boston, MA 02111-1307, USA.",22301],["Boston, MA 02110-1301, USA.",20855],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",17770],["* Boston, MA 02110-1301, USA.",38378],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Boston, MA 02110-1301, USA.",53593],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",53996]],"useCount":1067861},{"word":"Unit","context":[["Unit* target = NULL;",11764],["void JustDied(Unit* /*killer*/) override",10702],["Unit* target = aurApp->GetTarget();",48854],["if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))",14616],["Unit* target = GetTarget();",14476],["Unit* owner = GetOwner();",13507],["void EnterCombat(Unit* /*who*/)",24486],["if (Unit* caster = GetCaster())",17627],["Unit* caster = GetCaster();",30054],["void JustDied(Unit* /*killer*/)",20803]],"useCount":2083804},{"word":"Update","context":[["// Update the tx's hashBlock",4018],["// Update block index on disk without changing it in memory.",4262],["writer->Update();",4557],["events.Update(diff);",27578],["Update();",10513],["_events.Update(diff);",10149],["// Update nExtraNonce",9956],["// Update block",9647],["// Update nTime",9616],["void Update();",7440]],"useCount":791610},{"word":"Use","context":[["// Use, duplication, or disclosure by the U.S. Government is subject to",3051],["// Use an exponentially decaying ~10-minute window:",4196],["return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));",3627],["// Use list for automatic deletion",3847],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["/* Use this macro when declaring classes that implement this interface. */",20001],["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["/* Use the code below as a template for the implementation class for this interface. */",19991],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989],["//  Use, modification and distribution are subject to the",4798]],"useCount":894777},{"word":"V","context":[["template <typename K, typename V>",2707],["V",4206],["case 'V':",3872],["later version accepted by the membership of KDE e.V. (or its",3334],["case 'V':",3273],["later version accepted by the membership of KDE e.V. (or its",2969],["successor approved by the membership of KDE e.V.), which shall",2899],["* Signature: ()V",2747],["successor approved by the membership of KDE e.V.), which shall",2694],["return V;",7108]],"useCount":980426},{"word":"Value","context":[["v8::Local<v8::Value> argv[1] =",7467],["Value valRequest;",3659],["// Return Value:",20573],["class Value;",7573],["Value result;",4041],["Return Value:",4134],["v8::Local<v8::Value> v8Value = info[0];",4626],["return Value::null;",38765],["Value result = tableRPC.execute(jreq.strMethod, jreq.params);",6952],["BOOST_FOREACH(Value& input, inputs)",4935]],"useCount":2388392},{"word":"We","context":[["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// We mean it.",24341],["* We include PREEMPT_ACTIVE to avoid cond_resched() from working",3338],["* We don't bother to synchronize most readers of this at all,",3524],["* We have two separate sets of flags: task->state",3513],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348],["* 1-3 now and depends on arch. We use \"5\" as safe margin, here.",2514],["// We want to sort transactions by priority and fee, so:",2550],["// We define this here, because GCCs winbase.h limits this to _WIN32_WINNT >= 0x0601 (Windows 7),",2789]],"useCount":2119476},{"word":"When","context":[["* When a program's coredump is generated as ELF format, a section is created",2514],["// When this block is requested, we'll send an inv that'll make them",3945],["* requirements.  When they solve the proof-of-work, they broadcast the block",3316],["//       on FreeBSD or OpenBSD first. When verified the '0 &&' part can be",3219],["* read with multiple read calls. When the attribute has been read",1920],["* When freeing, reset page->mapping so free_pages_check won't complain.",1918],["// When this is a tab/widget and not a model dialog, ignore \"done\"",1301],["* When distributing Covered Code, include this CDDL HEADER in each",1277],["// every system. When reindexing from a fast disk with a slow CPU, it",1258],["// When temperature exceeds max temp, your heater will be switched off.",1174]],"useCount":661980},{"word":"WorldPacket","context":[["WorldPacket data(SMSG_CHAR_CUSTOMIZE, 1);",2311],["WorldPacket data(SMSG_ACTIVATETAXIREPLY, 4);",2477],["WorldPacket data(SMSG_CHAR_FACTION_CHANGE, 1);",2540],["WorldPacket data(SMSG_SET_PLAYER_DECLINED_NAMES_RESULT, 4+8);",2619],["WorldPacket data(SMSG_MESSAGECHAT, 200);",4327],["class WorldPacket;",5207],["WorldPacket const* Write() override;",5543],["WorldPacket packet;",6215],["#include \"WorldPacket.h\"",29752],["WorldPacket data;",41021]],"useCount":789644},{"word":"Write","context":[["// Write block to history file",4128],["WorldPacket const* Write() override;",5543],["// Write index header",4530],["// Write back",4293],["adb.Write(addrman);",3602],["// Write block",3074],["// Write undo information to disk",2006],["static void Write(Message* m, const param_type& p);",2591],["// Write a bitcoin.desktop file to the autostart directory:",2112],["// Write queued txindex changes",2083]],"useCount":738833},{"word":"X","context":[["case 'X':",3872],["*    Mac OS X:         in version 10.0 and later",30128],["*    Mac OS X:         not available",13788],["#undef X",8080],["* Delivers a request to the X server.",7148],["*  Mac OS X threading:",5154],["template < class X, class Y >",4847],["#define X(name) stats.name = name",3688],["X(nTimeConnected);",3688],["X(addrName);",3688]],"useCount":1963455},{"word":"Y","context":[["log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",",1975],["case 'Y':",2075],["case 'Y':",2193],["//            msg.complete() ? \"Y\" : \"N\");",2233],["template < class X, class Y >",4847],["strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);",3248],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",2944],["{ C_STRING_WITH_LEN(\"enum('N','Y')\") },",2785],["*                             D A T A   T Y P E S",2422],["gaiaExport64( p_out, coord, 1, endian_arch );  // Y",1728]],"useCount":767510},{"word":"_","context":[["strErrors << _(\"Cannot write default address\") << \"\\n\";",3701],["return state.Abort(_(\"System error: \") + e.what());",4553],["using ::testing::_;",7354],["using testing::_;",7672],["(index) * STRIDE_##scope##_##reg )",3696],["strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";",3694],["strErrors << _(\"Error loading wallet.dat\") << \"\\n\";",3688],["strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";",3682],["uiInterface.InitMessage(_(\"Done loading\"));",3638],["uiInterface.InitMessage(_(\"Rescanning...\"));",3636]],"useCount":1930085},{"word":"__","context":[["__ bind(&miss);",6015],["__ delayed()->nop();",4800],["__ bind(&loop);",4750],["__ nop();",4617],["__ CallStub(&stub);",7723],["__ jmp(&done);",6452],["GuiLock __;",8207],["__ ret(0);",8752],["__ Ret();",12440],["__ bind(&done);",17878]],"useCount":2206252},{"word":"__IO","context":[["__IO uint32_t RLR;  /*!< IWDG Reload register,    Address offset: 0x08 */",1332],["__IO uint32_t CFR;  /*!< WWDG Configuration register, Address offset: 0x04 */",1647],["__IO uint32_t tmpreg = 0x00U; \\",2024],["__IO uint32_t CR;",2087],["__IO uint32_t tmpreg; \\",5083],["__IO uint32_t CR;   /*!< WWDG Control register,       Address offset: 0x00 */",1647],["__IO uint32_t SR;   /*!< WWDG Status register,        Address offset: 0x08 */",1647],["__IO uint32_t SR;",1335],["__IO uint32_t SR;   /*!< IWDG Status register,    Address offset: 0x0C */",1332],["__IO uint32_t KR;   /*!< IWDG Key register,       Address offset: 0x00 */",1332]],"useCount":825723},{"word":"__at","context":[["extern __at(0x0FCD) volatile __T1CONbits_t T1CONbits;",1266],["extern __at(0x0FEA) __sfr FSR0H;",1266],["extern __at(0x0F93) volatile __TRISBbits_t TRISBbits;",1266],["extern __at(0x0FFD) __sfr TOSL;",1266],["extern __at(0x0F89) volatile __LATAbits_t LATAbits;",1266],["extern __at(0x0FD5) __sfr T0CON;",1266],["extern __at(0x0FF9) __sfr PC;",1266],["extern __at(0x0FF3) __sfr PROD;",1266],["extern __at(0x0FFE) __sfr TOSH;",1266],["extern __at(0x0F8A) __sfr LATB;",1266]],"useCount":740693},{"word":"__attribute__","context":[["__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))",8377],["} __attribute__ ((packed));",81381],["} __attribute__((packed));",55042],["__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))",41280],["bool test __attribute__((unused)) = true;",25894],["} __attribute__ ((__packed__));",12729],["__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))",10147],["__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))",9464],["__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))",9236],["__extension__ static __inline void __attribute__ ((__always_inline__))",8647]],"useCount":1365194},{"word":"__cplusplus","context":[["#ifdef __cplusplus",735876],["#ifdef __cplusplus",11473],["#ifndef __cplusplus",15372],["#if __cplusplus",17879],["#ifdef\t__cplusplus",18927],["#ifdef  __cplusplus",22979],["#ifdef __cplusplus",24411],["#if defined(__cplusplus)",39896],["#if defined(__cplusplus) && !defined(CINTERFACE)",55584],["#endif /* __cplusplus */",61093]],"useCount":1191234},{"word":"__u32","context":[["__u32 reserved;",2232],["__u32 id;",2975],["__u32\tcmd;",2260],["struct ext4_group_desc *bg, __u32 count);",2413],["__u32\tflags;",2871],["__u32 size;",3354],["__u32 type;",3872],["__u32 handle;",4054],["__u32 pad;",4456],["__u32 flags;",9520]],"useCount":863251},{"word":"a","context":[["** In addition, as a special exception, Nokia gives you certain additional",40703],["** In addition, as a special exception, Digia gives you certain additional",37026],["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, Nokia gives you certain additional",37705],["** a written agreement between you and Digia.  For licensing terms and",37400],["/* Use the code below as a template for the implementation class for this interface. */",19991],["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["return !(a == b);",22218],["return a;",30659],["** a written agreement between you and Digia.  For licensing terms and",33459]],"useCount":35007621},{"word":"about","context":[["#define SD_BALANCE_NEWIDLE\t0x0002\t/* Balance when about to become idle */",3389],["throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");",3370],["// notify wallets about an incoming inventory (for request counts)",3435],["// make sure all wallets know about the given transaction, in the given block",3435],["// notify wallets about an updated transaction",3435],["// notify wallets about a new best chain",3442],["* all we care about is that we have a task with the appropriate",3499],["* about the task exiting. Confusing, but this way",3513],["* is about runnability, while task->exit_state are",3513],["// see Step 2: parameter interactions for more information about these",3653]],"useCount":913957},{"word":"above","context":[["*   * Redistributions in binary form must reproduce the above",5881],["*     * Redistributions in binary form must reproduce the above",27890],["/*The user data passed in by UMAC, it will be sent back when the above",6283],["*   * Redistributions in binary form must reproduce the above",6882],["* of those above. If you wish to allow use of your version of this file only",9240],["* decision by deleting the provisions above and replace them with the notice",9245],["//     * Redistributions in binary form must reproduce the above",13855],["//     * Redistributions in binary form must reproduce the above",15332],["* purpose with or without fee is hereby granted, provided that the above",18240],["*     * Redistributions in binary form must reproduce the above",18845]],"useCount":913580},{"word":"access","context":[["uint16_t reg;                /*!< Type      used for register access              */",2664],["} vec;                       /*!< Structure used for vec  access                  */",2649],["#define VM_SEQ_READ\t0x00008000\t/* App will access data sequentially */",2233],["- access with [gs]et_task_comm (which lock",3517],["* tasks can access tsk->flags in readonly mode for example",3518],["* Wrappers for p->thread_info->cpu access. No-op on UP.",3528],["friend class boost::serialization::access;",4586],["uint8_t reg;                 /*!< Type      used for register access              */",6134],["uint32_t reg;                /*!< Type      used for register access              */",6788],["} bit;                       /*!< Structure used for bit  access                  */",14547]],"useCount":1052798},{"word":"action","context":[["return action;",5326],["switch (action) {",4406],["bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)",4644],["switch (savepoint.action) {",5300],["in an action of contract, negligence or other tortious action,",5338],["in an action of contract, negligence or other tortious action,",5338],["* @param action Pointer to an action.",6674],["* @param action Pointer to an action.",6674],["switch (action)",17373],["void DoAction(int32 const action)",4021]],"useCount":1289991},{"word":"active","context":[["// if chkReqPayment is not active, don't display lnReqAmount as invalid",2357],["bool active;",5971],["active = true;",5044],["active = false;",4677],["if (active)",3761],["* before the scheduler is active -- see should_resched().",3338],["int active;",2735],["* Default maximum number of active map areas, this limits the number of vmas",2514],["// item set bonuses applied only at equip and removed at unequip, and still active for broken items",2420],["// same objective target can be in many active quests, but not in 2 objectives for single quest (code optimization).",2339]],"useCount":842529},{"word":"add","context":[["to.add(\"\\n\").addSpaces(lev);",7641],["add(f);",3209],["/* No suffix specified, add selected suffix */",3254],["/* For each stat XXX, add following, aligned appropriately",3503],["* Live threads maintain their own counters and add to these",3526],["// you should add code here to check that the transaction does a",3642],["// spells required only Real aura add/remove",4114],["default: to.add(\"}\"); types.pop_back(); vtypes.pop_back(); stages.pop_back(); flags.pop_back(); break;",7294],["to.add(\",\\n\").addSpaces(lev);",7641],["ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));",3100]],"useCount":1905884},{"word":"added","context":[["added = true;",2981],["bool added = false;",1787],["// fBlock is true when this is called from AcceptBlock when a new best-block is added to the blockchain",2083],["// event will be re-added automatically at the end of routine)",2240],["* synchronization.  While held, no new task will be added to threadgroup",2301],["* @note added in QGIS 2.12",2389],["\"If [account] is specified (recommended), it is added to the address book \"",2980],["* to everyone and the block is added to the block chain.  The first transaction",3316],["* associated with the operation is added to XXX_delay.",3503],["// Generate a new key that is added to wallet",4481]],"useCount":692843},{"word":"addr","context":[["CService addr;",7285],["CAddress addr;",17106],[".addr\t\t= 0x16,",15399],["if (!addr.IsValid())",13721],["if (!addr.GetKeyID(keyID))",11679],["if (IsLimited(addr))",9115],["pfrom->PushAddress(addr);",8630],["pto->PushMessage(\"addr\", vAddr);",8070],["if (addr.IsRoutable())",7571],["if (AddLocal(addr, LOCAL_IF))",7473]],"useCount":2351289},{"word":"address","context":[["if (!address.IsValid())",28578],["CBitcoinAddress address(params[0].get_str());",13557],["*        base address). You can use the constant defined in the registers",12514],["setAddress.insert(address);",11810],["scriptPubKey.SetDestination(address.Get());",9010],["if (setAddress.count(address))",8592],["/* Define to the address where bug reports for this package should be sent. */",7929],["const CBitcoinAddress& address = item.first;",7025],["if (!address.GetKeyID(keyID))",6751],["CTxDestination address;",24508]],"useCount":3624976},{"word":"after","context":[["/* Delay after an RCC peripheral clock enabling */ \\",7657],["// value so we don't have to do memory allocations after that.",3483],["// Need to update only after we know CreateNewBlock succeeded",5681],["// The memory index structure will be changed after the db commits.",4262],["// it will rebroadcast it later, after the parent transaction(s)",4058],["// can be duplicated to remove the ability to spend the first instance -- even after",4051],["// Allow binding if the port is still in TIME_WAIT state after",3757],["// only consider very recently tried nodes after 30 failed attempts",3711],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// minimum amount of work that could possibly be required nTime after",3653]],"useCount":1859191},{"word":"algorithm","context":[["#include <algorithm>",150071],["#include <algorithm>",73196],["#include <algorithm>",42185],["#include <boost/algorithm/string.hpp>",14486],["#include <algorithm>",12273],["#include <boost/algorithm/string/replace.hpp>",7521],["#include <boost/algorithm/string/predicate.hpp>",7500],["#include<algorithm>",6749],["#include <boost/algorithm/string/join.hpp>",4368],["#include <boost/algorithm/string.hpp>",3253]],"useCount":625199},{"word":"all","context":[["* paragraph) shall be included in all copies or substantial portions of the",5520],["*  @param  pos    index of the value to get (0..vm-1), -1 for all components",7990],["error->all(FLERR,",5356],["// do so, all subject to the following:",5127],["* next paragraph) shall be included in all copies or substantial portions",4253],["// Check that all transactions are finalized",4119],["// 1/4 of tx invs blast to all immediately",4077],["// The first loop above does all the inexpensive checks.",4053],["// These functions dispatch to one or all registered wallets",3890],["// hold in disconnected pool until all refs are released",3761]],"useCount":4580516},{"word":"allocated","context":[["if (!out_->allocated())",3700],["unsigned long mq_bytes;\t/* How many bytes can be allocated to mqueue? */",3523],["* Pages are allocated by the slab allocator in order to provide memory",2236],["*   page_count() > 0  means the page has been allocated.",2236],["* page is the responsibility of the one who allocated it, and those who have",2236],["if (allocated) {",2222],["* An argresp is stored in an allocated page and holds the",1863],["* @return the newly allocated buffer state object.",1785],["if (!allocated) allocate();",1562],["allocated = 1;",1550]],"useCount":596518},{"word":"allow","context":[["* We increase resolution only if we have enough bits to allow this increased",2467],["// then allow mining of a min-difficulty block.",2725],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// Periodically clear setAddrKnown to allow refresh broadcasts",3942],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// DoS prevention: do not allow mapOrphanTransactions to grow unbounded",4070],["* of those above. If you wish to allow use of your version of this file only",5726],["If you wish to allow use of your version of this file only under the terms of",2281],["* of those above. If you wish to allow use of your version of this file only",9240],["/* allow to overwrite serial and ethaddr */",2462]],"useCount":629777},{"word":"already","context":[["// We already filter duplicates, but these deprecated screw up the sort order",3732],["/* Grab a reference to a task's mm, if it is not already going away */",3529],["// In case we are on a very long side-chain, it is possible that we already have",3600],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// If the shortcut exists already, remove it for updating",3297],["// Add wallet transactions that aren't already in a block to mapTransactions",3806],["// unless those are already completely spent.",4054],["// Don't know what it is, just say we already got one",4138],["* If a daeMetaElement already exists it will return that instead of creating a new one.",6026],["// returns true if wasn't already contained in the set",8694]],"useCount":1350982},{"word":"also","context":[["* see also find_vpid() etc in include/linux/pid.h",3466],["* see also pid_nr() etc in include/linux/pid.h",3475],["* Task state bitmask. NOTE! These bits are also",3512],["* This serializes \"schedule()\" and also protects",3557],["// headers also when they are imported in the client",3993],["\"It is also recommended to set alertnotify so you are notified of problems;\\n\"",4134],["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["http://www.SafeRTOS.com - High Integrity Systems also provide a safety",4594],["* you also meet, for each linked independent module, the terms and conditions of",9173],["// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options",3423]],"useCount":1226068},{"word":"always","context":[["// Together, that means that at least one of the following is always possible,",1789],["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["* locking, because a shared signal_struct always",3530],["* sighand_struct is always a proper superset of",3530],["// always trickle our own transactions",3470],["// sync-checkpoint should always be accepted block",2263],["// however we MUST always provide at least what the remote peer needs",2032],["* Exception: MS_RDONLY is always applied to the entire file system.",1942],["* servicing faults for write access.  In the normal case, do always want",1929],["// we're sleeping, but we must always check fShutdown after doing this.",1857]],"useCount":922516},{"word":"amount","context":[["// Check proof of work matches claimed amount",8366],["entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));",3325],["entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));",3541],["// Return maximum amount of blocks that other nodes claim to have",3543],["entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));",3566],["// minimum amount of work that could possibly be required nTime after",3653],["return (double)amount / (double)COIN;",3765],["\"<amount> is a real and is rounded to the nearest 0.00000001\"",4410],["throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");",5296],["obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));",7124]],"useCount":776869},{"word":"an","context":[["*  @return status, EC_Normal if successful, an error code otherwise",30879],["// This file is not part of the Qt API.  It exists purely as an",15375],["// Define an unsigned member",13600],["/* Raise an exception if the arguments couldn't be parsed. */",13073],["// Parse the account first so we don't generate a key if there's an error",8026],["/* Delay after an RCC peripheral clock enabling */ \\",7657],["in a product, an acknowledgment in the product documentation would be",7570],["/* Define an unsigned member */",7485],["* @param action Pointer to an action.",6674],["\"Returns an array of objects containing:\\n\"",6325]],"useCount":6630590},{"word":"and","context":[["* Redistribution and use in source and binary forms, with or without",251058],["* Redistribution and use in source and binary forms, with or without",251058],["*    documentation and/or other materials provided with the distribution.",106352],["* Redistribution and use in source and binary forms, with or without",88602],["* Redistribution and use in source and binary forms, with or without",88602],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",43690],["// Redistribution and use in source and binary forms, with or without",42441],["// Redistribution and use in source and binary forms, with or without",42441],["Redistribution and use in source and binary forms, with or without",40107],["Redistribution and use in source and binary forms, with or without",40107]],"useCount":22313393},{"word":"another","context":[["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989],["// Process this block the same as if we had received it from another node",4477],["// being sent to another address.",4051],["* copied and put under another distribution licence",3770],["// this situation and push another getblocks to continue.",3600],["* Does a critical section need to be broken due to another",3578],["// Detect when changing the account of an address that is the 'unused current key' of another account:",3569],["* we can race with another thread doing sys_setsid/sys_setpgid.",3417],["/** Describes a place in the block chain to another node such that if the",3398]],"useCount":596630},{"word":"any","context":[["// Recursively process any orphan transactions that depended on this one",4123],["// Basic checks that don't depend on any context",4126],["PATENT CLAIMS or otherwise opposing any of the PATENT CLAIMS.",4293],["or agree to the institution of patent litigation against any entity",4293],["patentability, enforceability and/or non-infringement of any of the",4293],["* have been modified by MediaTek Inc. All revisions are subject to any receiver's",4578],["be allowed in any other state.",5344],["// TODO: reference any additional headers you need in STDAFX.H",5363],["* any purpose with or without fee is hereby granted, provided that the",10822],["* or visit www.oracle.com if you need additional information or have any",11601]],"useCount":2687405},{"word":"append","context":[["result.append(selectedSuffix);",3256],["history.append(cmd);",3115],["result.append(\".\");",3340],["ui->messagesWidget->append(out);",3094],["data.append(m_caster->GetPackGUID());",3360],["positive.append(name.begin()+3, name.end());",3370],["data.append(GetPackGUID());",10744],["@param tree the tree to append this item to",3604],["str->append(')');",4487],["// Open history file to append",4530]],"useCount":1335416},{"word":"application","context":[["*    Having a problem?  Start by reading the FAQ \"My application does   *",3257],["//! Helper structure for the explicit application of the SFINAE principle.",2280],["application.SendNotification();",2760],["/* Open debug.log with the associated application */",3187],["// Create application menu bar",3351],["\"Content-Type: application/json\\r\\n\"",3473],["<< \"Accept: application/json\\r\\n\";",3612],["<< \"Content-Type: application/json\\r\\n\"",3619],["*    the apps directory (application code) you must include an acknowledgement:",3710],["#include \"application.h\"",3668]],"useCount":605829},{"word":"apply","context":[["if(apply)",9553],["* apply to all code found in this distribution, be it the RC4, RSA,",3710],["tester::apply",4105],["if (!apply)",5859],["m_isPeriodic = apply;",3402],["void apply();",2969],["target->ApplySpellImmune(GetId(), IMMUNITY_MECHANIC, MECHANIC_STUN, apply);",2751],["any, provided herein do not apply to combinations of this program with",2682],["target->ApplySpellImmune(GetId(), IMMUNITY_MECHANIC, MECHANIC_SNARE, apply);",2511],["if (apply)",56212]],"useCount":951543},{"word":"are","context":[["*  are met:",6195],["\"[minconf] is the minimum number of confirmations before payments are included.\\n\"",6316],["* are met:",49958],["//  are met:",5478],["\"  Possible C/C++ prototypes are:\\n\"",6356],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["are met:",7101],["are met:",9885],["*  are met:",10696],["* are met:",143144]],"useCount":8597733},{"word":"area","context":[["* These are the virtual MM functions - opening of an area, closing and",2242],["* On an anonymous page mapped into a user virtual memory area,",2126],["uint32 zone, area;",2311],["void (*open)(struct vm_area_struct * area);",2319],["void (*close)(struct vm_area_struct * area);",2320],["// If we don't already have its previous block, shunt it off to holding area until we get it",1766],["// If don't already have its previous block, shunt it off to holding area until we get it",1991],["* On an anonymous page in a VM_MERGEABLE area, if CONFIG_KSM is enabled,",1970],["* Definitions for initial stack pointer and data area (in DPRAM)",1867],["return area;",1852]],"useCount":625882},{"word":"arg","context":[["tr(\"The entered address \\\"%1\\\" is already in the address book.\").arg(ui->addressEdit->text()),",2907],[".arg(date)",3322],["void *arg;",3331],["return arg;",3344],[".arg(type)",3363],["/* These can be the second arg to send_sig_info/send_group_sig_info.  */",3530],["void *arg);",5123],["unsigned int cmd, unsigned long arg);",6211],["IN\tPSTRING\t\t\targ);",6498],["unsigned long arg);",9231]],"useCount":1950096},{"word":"arg1","context":[["_argvec[2+1] = (unsigned long)arg1;                         \\",2724],["virtual Item *create(THD *thd, Item *arg1);",2544],["_argvec[1] = (unsigned long)(arg1);                         \\",3962],["- (id)initWithFrame:(struct CGRect)arg1;",3189],["- (id)initWithCoder:(id)arg1;",5537],["delete arg1;",5118],["- (void)encodeWithCoder:(id)arg1;",4630],["- (id)copyWithZone:(struct _NSZone *)arg1;",6420],["delete arg1;",3695],["- (_Bool)isEqual:(id)arg1;",2769]],"useCount":911392},{"word":"argc","context":[["if (argc == 0) {",16529],["if (argc == 1) {",17821],["if (argc == 1)",18558],["int main(int argc, char** argv)",20124],["if (argc == 0)",20289],["int main(int argc, char* argv[])",26043],["int main(int argc, char **argv)",26177],["argc = lua_gettop(tolua_S)-1;",36101],["int argc = 0;",45098],["int main(int argc, char *argv[])",49760]],"useCount":1509107},{"word":"args","context":[["JS::CallArgs args = JS::CallArgsFromVp(argc, vp);",15568],["returnValue = *((bool*)args[0]);",13036],["va_end(args);",20207],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["if (!*args)",58717],["void* args[2] = {NULL, (void*)&arg__1};",32638],["if (args[0]==NULL) {",30082],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["if (args[0]!=&returnValue) {",30082],["va_list args;",21709]],"useCount":3312802},{"word":"argument","context":[["* @return true if argument gets set, false if it already had a value",2817],["vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));",1561],["// Convert argument list to JSON objects in method-dependent way,",2351],["* @return command-line argument or default value",2816],["case STATE_ARGUMENT: // In or after argument",2349],["if(state == STATE_ARGUMENT) // Space ends argument",2343],["\"Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or\\n\"",2108],["// Accept the deprecated and ignored 'detach' boolean argument",1867],["* size of the argument or response, along with its content",1863],["if (nMaxVersion == 0) // the -upgradewallet without argument case",3646]],"useCount":1001443},{"word":"arguments","context":[["/* Raise an exception if the arguments couldn't be parsed. */",13073],["ZoneList<Expression*>* args = expr->arguments();",10143],["JSB_PRECONDITION2(ok, cx, false, \"Error processing arguments\");",3831],["JSB_PRECONDITION2(ok, cx, JS_FALSE, \"Error processing arguments\");",3710],["QStringList arguments;",3635],["// get number of arguments",3634],["* Retrieve the output arguments from an asynchronously invoked action.",2667],["* later completes.  Any output arguments can then be retrieved by calling",2667],["* on the device and sets any output arguments.",2667],["* - Extra whitespace at the beginning and end and between arguments will be ignored",2344]],"useCount":891803},{"word":"argv","context":[["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["int main(int argc, char** argv)",20124],["QApplication app(argc, argv);",15312],["int main(int argc, char **argv) {",12434],["int main(int argc, char** argv) {",11840],["jsval *argv = JS_ARGV(cx, vp);",11728],["int main(int argc, char *argv[]) {",10743],["int main(int argc, char** argv) {",8959],["int main(int argc, char *argv[])",49760]],"useCount":1441279},{"word":"array","context":[["#include <array>",7166],["\"Returns an array of objects containing:\\n\"",6325],["return ValuesIn(array);",6184],["#include <array>",6121],["return array;",5349],["const T array[] = {static_cast<T>(v1_), static_cast<T>(v2_),",3937],["// array of requests",3567],["* encoded in fs/proc/array.c: get_task_state().",3511],["* CPUCLOCK_PROF and CPUCLOCK_VIRT for indexing array as these",3392],["/* Allocate an array of sched domains, for partition_sched_domains(). */",3249]],"useCount":1941999},{"word":"as","context":[["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, Nokia gives you certain additional",37705],["** In addition, as a special exception, Digia gives you certain additional",37026],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["* Foundation, in version 2 as it comes in the \"COPYING\" file of the",20771],["/* Use the code below as a template for the implementation class for this interface. */",19991],["// This file is not part of the Qt API.  It exists purely as an",15375],["** In addition, as a special exception, Nokia gives you certain additional",40703],["* This file is part of VirtualBox Open Source Edition (OSE), as",10238],["* Foundation, in version 2 as it comes in the \"COPYING\" file of the",10225]],"useCount":6783586},{"word":"asm","context":[["#include <asm/atomic.h>",9137],["#include <asm/types.h>",9388],["#include <asm/ptrace.h>",9414],["#include <asm/io.h>",9887],["#include <asm/byteorder.h>",11194],["#include <asm/processor.h>",11379],["asm volatile (",11969],["asm(\"jmp *%eax\");",14484],["asm(\"leave\");",14521],["#include <asm/page.h>",16861]],"useCount":590867},{"word":"assert","context":[["#include <assert.h>",47273],["assert (rc == 0);",9155],["#include <iprt/assert.h>",9652],["assert(0);",10234],["#include <assert.h>",16829],["assert(false);",17395],["assert(0);",29944],["assert(false);",34611],["#include <assert.h>",51597],["///assert",8512]],"useCount":2947536},{"word":"at","context":[["** information use the contact form at http://www.qt.io/contact-us.",6928],["** use the contact form at http://www.qt.io/contact-us.",8188],["** information use the contact form at https://www.qt.io/contact-us.",9410],["** use the contact form at http://www.qt.io/contact-us.",9626],["* WARNING: This is generated code. Modify at your own risk and without support.",15951],["** Nokia at qt-info@nokia.com.",24043],["** Nokia at qt-info@nokia.com.",28466],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["** use the contact form at http://qt.digia.com/contact-us.",34423],["** use the contact form at http://qt.digia.com/contact-us.",36972]],"useCount":5212071},{"word":"attribute","context":[["* Writing to an attribute immediately sets a value, an open file can be",1920],["attribute = attribute->Next();",1791],["attribute = attribute->Next();",1791],["* Reading from an attribute creates a buffer from the value that might get",1920],["* simple attribute files",1920],["* read with multiple read calls. When the attribute has been read",1920],["//\tAdd attribute: _value",2601],["ssize_t (*store)(struct kobject *a, struct attribute *b,",2885],["struct attribute *attr, char *buf);",2897],["struct attribute attr;",8216]],"useCount":888763},{"word":"attributes","context":[[".attributes = UAC_EP_CS_ATTR_SAMPLE_RATE,",1157],["/* attributes */",1136],["const QXmlStreamAttributes attrs(attributes());",1449],["#define S_NOSEC\t\t4096\t/* no suid or xattr security attributes */",1559],["* about.  Basically, these are the attributes that the VFS layer can",1903],["* These attributes behave similar to those in sysfs:",1920],["* All attributes contain a text representation of a numeric value",1920],["// inverse attributes:",3447],["// attributes:",4795],["// attributes",5202]],"useCount":583242},{"word":"aura","context":[["#include \"ui/aura/window.h\"",8596],["Aura* aura = itr->second;",2557],["Aura const* aura = iter->second->GetBase();",4295],["// spells required only Real aura add/remove",4114],["Aura* aura = iter->second;",3638],["namespace aura {",3582],["#include \"ui/aura/root_window.h\"",3546],["#include \"ui/aura/env.h\"",3099],["#include \"ui/aura/window_event_dispatcher.h\"",2817],["Unit* caster = aura->GetCaster();",2674]],"useCount":723883},{"word":"author","context":[["* @author  MCD Application Team",25934],["* @author Frans Englich <frans.englich@nokia.com>",5760],["author = \"KetsuCorp\";",5558],["documentation, and that the name of the author not be used in",5322],["/// @author Ian Copland",4634],["/// @author  Daniel Krajzewicz",3906],["* as the author of the parts of the library used.",3701],["/// @author  Daniel Krajzewicz",3554],["/// @author  Michael Behrisch",3349],["* \\author Norman Feske",3286]],"useCount":616787},{"word":"auto","context":[["// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!",1774],["// This is only to keep the database open to defeat the auto-flush for the",1649],["for (auto& i : in_)",3310],["for (auto& x1 : *range[1])",1835],["for (auto& x0 : *range[1])",2110],["auto load due latency restrictions",2380],["// check count of items (skip for auto move for same player from bank)",2420],["auto s = Director::getInstance()->getWinSize();",2914],["auto packagedFunction = [task]() { (*task)(); };",3192],["for (auto& i : subtasks_) i->compute();",3732]],"useCount":1725705},{"word":"available","context":[["* The licence and distribution terms for any publically available version or",3775],["*    Non-Carbon CFM:   not available",20001],["*    CarbonLib:        not available",19204],["*    Non-Carbon CFM:   available as macro/inline",5355],["available: visit www.juce.com for more information.",4706],["***   call into the kernel available to libc.  It contains only constants,",4647],["available: visit www.juce.com for more information.",4450],["// defined in the xcconfigs so it is available in",3993],["| available through the world-wide-web at the following url:           |",3782],["*    Mac OS X:         not available",13788]],"useCount":1147034},{"word":"b","context":[["} b;",9361],["case 'b':",9160],["return b;",7976],[": \"w\"(a), \"w\"(b)",7572],["case 'b':",5883],["return a.get<0>() < b.get<0>();",5461],["return a.get<1>() < b.get<1>();",5461],["if (b)",4850],["return b;",18276],["return !(a == b);",22218]],"useCount":5913248},{"word":"back","context":[["// Work back to the first block in the orphan chain",5047],["/*The user data passed in by UMAC, it will be sent back when the above",6283],["pUserData: user data will be passed back with the",6455],["// Write back",4293],["// Echo the message back with the nonce. This allows for two useful features:",4072],["CScript subscript(stack.back().begin(), stack.back().end());",3979],["CScript subscript(stack.back().begin(), stack.back().end());",3979],["porphan = &vOrphan.back();",3844],["int nCol = vStack.back().first;",3810],["CBlockIndex* pindex = vStack.back().second;",3805]],"useCount":1147123},{"word":"base","context":[["#include \"base/memory/scoped_ptr.h\"",50659],["#include \"base/bind.h\"",76145],["base::Unretained(this)));",59575],["#include \"base/command_line.h\"",50698],["#include \"base/basictypes.h\"",49368],["base::RunLoop().RunUntilIdle();",48592],["#include \"base/strings/utf_string_conversions.h\"",44138],["namespace base {",37881],["#include \"base/memory/scoped_ptr.h\"",35875],["#include \"base/logging.h\"",87295]],"useCount":8646841},{"word":"based","context":[["Can be useful when choosing the save file format based on suffix.",2021],["/* Transaction based IO helpers */",1864],["\"Returns the estimated network hashes per second based on the last 120 blocks.\\n\"",1978],["pgoff_t pgoff;\t\t\t/* Logical page offset based on vma */",2168],["is making a combined work based on Engine3.",2459],["An object-based framework for developing high-performance BLAS-like",2642],["// Time based nLockTime implemented in 0.1.6",2927],["* An i/f to runtime opt-in for irq time accounting based off of sched_clock.",3157],["struct timespec real_start_time;\t/* boot based time */",3285],["// Choose an address to connect to based on most recently seen",3760]],"useCount":787606},{"word":"be","context":[["// memdbgon must be the last include file in a .cpp file!!!",8678],["// version without notice, or even be removed.",19083],["*  be found in the AUTHORS file in the root of the source tree.",14568],["*  be found in the AUTHORS file in the root of the source tree.",13737],["** WARNING! All changes made in this file will be lost!",13647],["/* Raise an exception if the arguments couldn't be parsed. */",13073],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["// WARNING: Changes might be lost if you edit this file directly.",10961],["*  @param  value  reference to variable in which the value should be stored",10435],["2. Altered source versions must be plainly marked as such, and must not be",8151]],"useCount":14050671},{"word":"because","context":[["* protect this instead of the siglock, because they really",3524],["* if only because they are not used by them anyway.",3329],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348],["* because of depth overrun.",3453],["* can write to the child->flags), because we're guaranteed the",3518],["* because there is no reader checking a limit that actually needs",3524],["* locking, because a shared signal_struct always",3530],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// be quick, because if there are any operations",3942],["// Note: not using straight sprintf here because we do NOT want",6536]],"useCount":1237857},{"word":"been","context":[["* have been modified by MediaTek Inc. All revisions are subject to any receiver's",4578],["* - anonymous pages (including MAP_PRIVATE file mappings) which have been",2236],["This file has been generated by generate-bindings.pl. DO NOT MODIFY!",2583],["* Invoke the action synchronously.  Blocks until the action has been processed",2667],["This file has been generated by generate-bindings.pl. DO NOT MODIFY!",3044],["***   be run. You've been warned!",3431],["* Number of functions that haven't been traced",3453],["// This file has been generated by Py++.",3483],["// Check if the current key has been used",3593],["// have been mined or received.",4058]],"useCount":1483688},{"word":"before","context":[["// Make sure it's successfully written to disk before changing memory structure",3618],["// Flush stdio buffers and commit to disk before returning",4527],["\"Must check which() before get()ing a union member.\");",3674],["// that can be verified before saving an orphan block.",3805],["/*! This is used in the documentation of a file as a header before the",3840],["// Must have a version message before anything else",4128],["// Store the pindexBest used before CreateNewBlock, to avoid races",5639],["\"[minconf] is the minimum number of confirmations before payments are included.\\n\"",6316],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["// Microsoft Visual C++ will insert additional declarations immediately before the previous line.",8538]],"useCount":1797874},{"word":"begin","context":[["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (SessionMap::const_iterator itr = m_sessions.begin(); itr != m_sessions.end(); ++itr)",5401],["std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);",5444],["///#begin zh-cn",7026],["///#begin en",7029],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["for (AuraEffectList::const_iterator i = mTotalAuraList.begin(); i != mTotalAuraList.end(); ++i)",10449],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298]],"useCount":3637493},{"word":"being","context":[["response is being received over the bus from HAL)",2486],["* The idea being to have a \"virtual\" mm in the same way",2245],["* Setup the page count before being freed into the page allocator for",2151],[">>!   distribute a combined work that includes FreeRTOS without being   !<<",2689],["* CPU power of this group, SCHED_LOAD_SCALE being max power for a",2942],["is being received over the bus from HAL)",2965],["// being sent to another address.",4051],["\"before being able to call any methods which require the wallet to be unlocked.\");",3129],["* to have the pid of the thread group leader without actually being",3499],["*    being used are not cryptographic related :-).",3710]],"useCount":898354},{"word":"below","context":[["return error(\"CheckProofOfWork() : nBits below minimum work\");",3793],["u8 flags;\t\t/* flags of cpufreq_driver, see below. */",2828],["#define CPUFREQ_RELATION_H 1  /* highest frequency below or at target */",2858],["* Please use one of the three interfaces below.",3021],["unsigned int flags;\t/* per process flags, defined below */",3486],["unsigned int\t\tflags; /* see SIGNAL_* flags below */",3519],["GRANT (below) in the documentation and/or other materials",4293],["GRANT (below).",4293],["struct cpufreq_governor\t*governor; /* see below */",5641],["/* Use the code below as a template for the implementation class for this interface. */",19991]],"useCount":680502},{"word":"between","context":[["** a written agreement between you and The Qt Company.  For licensing terms and",5029],["** a written agreement between you and The Qt Company.  For licensing terms and",6208],["** a written agreement between you and Digia.  For licensing terms and",33459],["** a written agreement between you and The Qt Company. For licensing terms",16338],["** conditions contained in a signed written agreement between you and Nokia.",16029],["** conditions contained in a signed written agreement between you and Nokia.",14942],["** a written agreement between you and Nokia.",14574],["** a written agreement between you and Nokia.",12946],["** a written agreement between you and The Qt Company. For licensing terms",9470],["** a written agreement between you and Digia.  For licensing terms and",37400]],"useCount":1062818},{"word":"binary","context":[["*     * Redistributions in binary form must reproduce the above",18845],["* Redistribution and use in source and binary forms, with or without",251058],["* Redistribution and use in source and binary forms, with or without",88602],["// Redistribution and use in source and binary forms, with or without",42441],["Redistribution and use in source and binary forms, with or without",40107],["*     * Redistributions in binary form must reproduce the above",27890],["* Redistribution and use in source and binary forms, with or without modification,",24360],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["// Redistribution and use in source and binary forms, with or without",19804]],"useCount":1114079},{"word":"bind","context":[["#include \"base/bind.h\"",76145],["bindns::bind(async_read_handler,",4950],["__ bind(&slow);",4247],["__ bind(&done);",17878],["#include <boost/bind.hpp>",17854],["acceptor->bind(endpoint);",6833],["if (mapArgs.count(\"-bind\")) {",6803],["__ bind(&miss);",6015],["bindns::bind(async_write_handler,",6006],["__ bind(&loop);",4750]],"useCount":703439},{"word":"bit","context":[["*     Generated by class-dump 3.3.4 (64 bit).",32942],["} bit;                       /*!< Structure used for bit  access                  */",14547],["* @retval State of bit (1 or 0).",6353],["}bit;",4812],["// The following are defines for the bit fields in the GPIO_PCTL register for",3783],["*    11 bit fractions.",3570],["*  - 11 bit fractions expand to 22 bits by the multiplies: this gives",3570],["if (strWhole.size() > 10) // guard against 63 bit overflow",3253],["} bit;                       /*!< Structure used for bit  access                  */",14547],["//     Generated by class-dump 3.5 (64 bit).",20368]],"useCount":6297217},{"word":"bits","context":[["/* Define the struct bits */",6940],["#include <bits/stdc++.h>",10095],["case 0: // we have no bits",6487],["// Define the struct bits",12579],["pend[-2] = (bits >> 8) & 0xff;",3674],["/** register bits */",5872],["unsigned int bits = len * 8;",3676],["pend[-3] = (bits >> 16) & 0xff;",3675],["pend[-4] = (bits >> 24) & 0xff;",3675],["} bits;",33835]],"useCount":2170534},{"word":"block","context":[["// Update block",9647],["block.print();",7146],["block.ReadFromDisk(pindex);",7623],["// Find the last block the caller has in the main chain",8258],["BOOST_FOREACH(const CTransaction& tx, block.vtx)",8544],["uint32_t block;",9484],["if (!block.ReadFromDisk(pindex))",12214],["// Create new block",17312],["CBlock block;",60937],["// block header",6885]],"useCount":4067041},{"word":"blocks","context":[["// Deallocate old blocks since they're obsolete now",6138],["unsigned char* pend = pdata + 64 * blocks;",3669],["unsigned int blocks = 1 + ((len + 8) / 64);",3672],["memset(pdata + len, 0, 64 * blocks - len);",3673],["// Extra checks to prevent \"fill up memory by spamming with bogus blocks\"",3691],["// Recursively process any orphan blocks that depended on this one",3820],["// Check the version of the last 100 blocks to see if we need to upgrade:",3943],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["return blocks;",4079],["obj.push_back(Pair(\"blocks\",        (int)nBestHeight));",6068]],"useCount":755719},{"word":"bool","context":[["bool",97046],["static bool",28102],["bool ok = true;",33613],["bool ok  = true;",39818],["bool ok;",40942],["inline bool",50904],["bool ok = false;",26049],["bool found = false;",52111],["bool",163407],["bool",271107]],"useCount":23065475},{"word":"boost","context":[["#include <boost/filesystem.hpp>",33068],["#include <boost/bind.hpp>",17854],["#include <boost/shared_ptr.hpp>",16476],["#include <boost/lexical_cast.hpp>",18387],["namespace fs = boost::filesystem;",18774],["#include <boost/filesystem/fstream.hpp>",19471],["#include <boost/foreach.hpp>",26889],["using namespace boost;",39788],["boost::this_thread::interruption_point();",40067],["#include <boost/test/unit_test.hpp>",27652]],"useCount":2531056},{"word":"both","context":[["// ... both are false when called from CTransaction::AcceptToMemoryPool",2079],["*    manual, or both from: http://www.FreeRTOS.org/Documentation        *",2324],["/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */",2191],["* thereof, and that both notices appear in supporting documentation.",1886],["//  interpret --foo as -foo (as long as both are not set)",3028],["* @note    Disabling this option saves both code and data space.",4883],["licensable by Tokutek, both currently or in the future; and that in",4293],["* Nests both inside and outside of read_lock(&tasklist_lock).",3530],["* to get both rlim_cur and rlim_max atomically, and either one",3524],["* This includes both natural children and PTRACE_ATTACH targets.",3467]],"useCount":706453},{"word":"bounds","context":[["const gfx::Rect& bounds,",1827],["double bounds[6];",1490],["delegate.get(), -1234, bounds, root_window()));",1796],["for (SkillLineAbilityMap::const_iterator _spell_idx = bounds.first; _spell_idx != bounds.second; ++_spell_idx)",3275],["for (SkillLineAbilityMap::const_iterator _spell_idx = bounds.first; _spell_idx != bounds.second; ++_spell_idx)",3275],["* No bounds checking of the memory buffer is done. It is the caller's",3206],["if (bounds.first == bounds.second)",2239],["if (bounds.first == bounds.second)",2239],["printf(\"  nActualTimespan = %\"PRI64d\"  before bounds\\n\", nActualTimespan);",2229],["return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));",2077]],"useCount":659907},{"word":"break","context":[["} break;",190176],["break;",13675590],["} break;",23582],["break ;",31087],["}break;",37601],["default: break;",49165],["break;",170574],["break;",737587],["break;",861467],["break;",2379267]],"useCount":20414345},{"word":"brief","context":[["\\brief",38094],["* @brief",41778],["/// \\brief",8505],["@brief",7778],["* \\brief",7555],["/** \\brief",6389],["*  @brief",6152],["/* @brief Index of port of external pin. */",6112],["/* @brief Number of external pin port on specified port. */",6112],["* @brief",5037]],"useCount":3781615},{"word":"browser","context":[["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"content/public/browser/render_view_host.h\"",10522],["#include \"chrome/browser/profiles/profile.h\"",36299],["#include \"content/public/browser/browser_thread.h\"",30636],["#include \"content/public/browser/web_contents.h\"",26274],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"chrome/browser/browser_process.h\"",17724],["#include \"content/public/browser/notification_service.h\"",16924],["#include \"chrome/browser/chrome_notification_types.h\"",11309],["#include \"chrome/browser/extensions/extension_service.h\"",10396]],"useCount":1954572},{"word":"buf","context":[["return buf;",5428],["char buf[128];",5131],["return buf;",19531],["char buf[256];",13693],["char buf[1024];",9297],["free(buf);",8097],["char *buf);",6594],["void *buf, int len, int write);",6398],["return buf;",6075],["delete[] buf;",6043]],"useCount":2811931},{"word":"buffer","context":[["void __user *buffer,",6201],["*\t@skb: buffer to check",6648],["free(buffer);",6696],["delete[] buffer;",7323],["comm_send_ch(MAVLINK_COMM_0, buffer[i]);",8799],["mavlink_msg_to_send_buffer(buffer, &msg);",8799],["uint8_t buffer[MAVLINK_MAX_PACKET_LEN];",8799],["/* Context for parsing across buffer boundaries */",9773],["return buffer[0];",9790],["return buffer;",15721]],"useCount":4403914},{"word":"but","context":[["// We already filter duplicates, but these deprecated screw up the sort order",3732],["* but a general need for low latency)",3472],["appreciated but is not required.",7750],["// Relay inventory, but don't relay old inventory during initial block download",3784],["// but catching it earlier avoids a potential DoS attack:",3753],["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["#define PF_FORKNOEXEC\t0x00000040\t/* forked but didn't exec */",3558],["* the run-queue from deletions/modifications (but",3557],["* Only the _current_ task can read/write to tsk->flags, but other",3518],["* about the task exiting. Confusing, but this way",3513]],"useCount":2636732},{"word":"button","context":[["// Validate input, set Ok button to enabled when acceptable",2233],["ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(acceptable);",3090],["void mousePressed(int x, int y, int button);",2390],["void mouseDragged(int x, int y, int button);",2332],["void mouseReleased(int x, int y, int button);",2290],["/* enable apply button when data modified */",2107],["/* disable apply button when new data loaded */",2107],["#include <wx/button.h>",2036],["/* disable apply button after settings are loaded as there is nothing to save */",2012],["return button;",1926]],"useCount":697150},{"word":"by","context":[["// This file is generated by WOK (CPPExt).",7643],["// Modified by:",9050],["* decision by deleting the provisions above and replace them with the notice",9245],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["// Modified by:",10261],["//  Generated by the J2ObjC translator.  DO NOT EDIT!",14259],["//     Generated by class-dump 3.5 (64 bit).",20368],["* - encoding: Set by user.",21862],["* This header is generated by class-dump-z 0.2b.",7138],["*     Generated by class-dump 3.3.4 (64 bit).",32942]],"useCount":8483092},{"word":"byte","context":[["// a large 4-byte int at any alignment.",3903],["OrigDataType: byte",11441],["DataType: byte",11302],["byte             :1;",8910],["byte Byte;",8618],["byte         :1;",5523],["DataType: (ptr byte)",4382],["// ~65-byte public keys, plus a few script ops.",3509],["// pay-to-script-hash, which is 3 ~80-byte signatures, 3",3506],["typedef unsigned char byte;",3403]],"useCount":1666648},{"word":"bytes","context":[["return bytes;",6825],["printf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand.c_str(), nMessageSize, e.what());",3386],["printf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",",3389],["printf(\"ProcessMessage(%s, %u bytes) FAILED\\n\", strCommand.c_str(), nMessageSize);",3439],["unsigned long mq_bytes;\t/* How many bytes can be allocated to mqueue? */",3523],["// Check for nMinDiskSpace bytes (currently 50MB)",3954],["// 10,000 orphans, each of which is at most 5,000 bytes big is",4015],["// -limitfreerelay unit is thousand-bytes-per-minute",4200],["* @return length of the message in bytes (excluding serial stream start sign)",6504],["* @fc: frame control bytes in little-endian byteorder",9080]],"useCount":1998493},{"word":"c","context":[["// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-",9982],["if (c) {",11362],["c++;",11629],["/* Line 1455 of yacc.c  */",11885],["case 'c':",12237],["return c;",14505],["int c;",15515],["char c;",21376],["return c;",34670],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340]],"useCount":7576031},{"word":"c_str","context":[["printf(\"%s\\n\", a.ToString().c_str());",5572],["printf(\"%s\\n\", strError.c_str());",17732],["printf(\"%s\\n\", ToString().c_str());",16077],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["strWalletPass = params[0].get_str().c_str();",7078],["printf(\"*** %s\\n\", strMessage.c_str());",6568],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309],["printf(\"%s\", strErrors.str().c_str());",6265],["printf(\"%s\", ToString().c_str());",5886],["printf(\"\\n\\n************************\\n%s\\n\", message.c_str());",5669]],"useCount":2965434},{"word":"cache","context":[["/* Earliest-expiration cache. */",3458],["#include <linux/cache.h>",9496],["EXPECT_EQ(1, cache.disk_cache()->create_count());",7164],["MockHttpCache cache;",6940],["EXPECT_EQ(1, cache.network_layer()->transaction_count());",5162],["EXPECT_EQ(0, cache.disk_cache()->open_count());",5007],["EXPECT_EQ(1, cache.disk_cache()->open_count());",3857],["EXPECT_EQ(2, cache.network_layer()->transaction_count());",3821],["unsigned int cache_nice_tries;\t/* Leave cache hot tasks for # tries */",3524],["* cache last used pipe for splice",3505]],"useCount":1261453},{"word":"call","context":[["* trace (or NULL if the entire call-chain of the task should be shown).",3529],["\"After calling this method, you will need to call walletpassphrase again\\n\"",3549],["// IsStandard() call returns false",3607],["// non-standard. Note that this EvalScript() call will",3947],["***   call into the kernel available to libc.  It contains only constants,",4647],["\"\\nAs a json rpc call\\n\"",5361],["throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");",6229],["@return Result of the function call",25364],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["// Add to memory pool without checking anything.  Don't call this directly,",3450]],"useCount":2467188},{"word":"callback","context":[["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["const CompletionCallback& callback) {",6628],["callback",6725],["callback);",7531],["callback));",8692],["rv = callback.WaitForResult();",12781],["DCHECK(!callback.is_null());",13148],["#include \"base/callback.h\"",15170],["#include \"base/callback.h\"",17962],["TestCompletionCallback callback;",21379]],"useCount":1741112},{"word":"called","context":[["called = false;",14659],["function pointer will be called */",6857],["BOOST_ASIO_CHECK(called);",6138],["ASIO_CHECK(called);",5115],["/*Request status callback offered by UMAC - it is called if the current",4605],["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["BOOST_CHECK(called);",4017],["// strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:",3944],["/* sched_exec is called by processes performing an exec */",3526],["// This function must \\b NOT be called explicitly! It is used internally for the performance",3432]],"useCount":1821676},{"word":"calls","context":[["* can be lost, resulting in subsequent i_size_read() calls spinning forever.",1833],["// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)",3541],["calls it, or to nothing if 'inline' is not supported under any name.  */",2942],["* @param  expr: If expr is false, it calls assert_failed function",2777],["// Clear pindexPrev so future calls make a new block, despite any failures from here on",2546],["* all ->init() calls failed */",2424],["* the process until it calls wait(). All children of this",2363],["* read with multiple read calls. When the attribute has been read",1920],["* completely, no further read calls are possible until the file is opened",1920],["// between calls, but periodically or if nNonce is 0xffff0000 or above,",1672]],"useCount":591893},{"word":"can","context":[["* returns a future to the operation so that it can be executed in parallel to other requests.",6270],["*        base address). You can use the constant defined in the registers",12514],["// no changes, quest can't be done for this requirement",6186],["*          This parameter can be one of the following values:",5939],["//  This file is part of the Blaze library. You can redistribute it and/or modify it under",5353],["//  This file is part of the Blaze library. You can redistribute it and/or modify it under",4384],["*\tThe callback can sleep.",4370],["// Don't accept it if it can't get into a block",4144],["// Each connection can only send one version message",4131],["// 2) Remote nodes can measure the latency of the network thread. If this node",4072]],"useCount":5478745},{"word":"cannot","context":[["// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)",1506],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["* derivative of this code cannot be changed.  i.e. this code cannot simply be",3784],["* derivative of this code cannot be changed.  i.e. this code cannot simply be",3784],["*\tA buffer cannot be placed on two lists at the same time.",2407],["\"Remember that encrypting your wallet cannot fully protect \"",2204],["return error(\"DisconnectBlock() : cannot restore coin inputs\");",1661],["// cannot downgrade below current version",1624],["* __split_huge_page_refcount() cannot run",1584],["// Note: in a potential headers-first mode, this number cannot be relied upon",1463]],"useCount":672968},{"word":"case","context":[["case 2:",203112],["case 1:",241895],["case 0:",179802],["case 3:",146278],["case 4:",106127],["case 5:",69622],["case 6:",54564],["case 8:",48382],["case 7:",45223],["case 1:",37813]],"useCount":24580626},{"word":"cast","context":[["Q_ASSERT(staticMetaObject.cast(_o));",6769],["// Implement isa/cast/dyncast/etc.",2636],["namespace cast {",1552],["}  // namespace cast",1449],["return isa<Instruction>(V) && classof(cast<Instruction>(V));",1425],["// Remove aura (before cast for prevent infinite loop handlers)",1401],["* container_of - cast a member of a structure out to the containing structure",1370],["//only for quests which cast teleport spells on player",1325],["// Methods for support type inquiry through isa, cast, and dyn_cast:",1322],["// Remove used for cast item if need (it can be already NULL after TakeReagents call",1270]],"useCount":904517},{"word":"caster","context":[["if (caster->GetTypeId() == TYPEID_PLAYER)",2859],["Unit* caster = GetCaster();",30054],["if (!caster)",18521],["if (Unit* caster = GetCaster())",17627],["if (caster)",10934],["if (!caster || caster->GetTypeId() != TYPEID_PLAYER)",3659],["if (!caster || caster->GetTypeId() != TYPEID_PLAYER)",3659],["SendTickImmune(target, caster);",3455],["if (Player* modOwner = caster->GetSpellModOwner())",2998],["Player* caster = GetCaster()->ToPlayer();",3210]],"useCount":681349},{"word":"catch","context":[["} catch (std::exception &e) {",10313],["catch (...) {",17815],["catch (...)",14720],["catch (...)",71513],["} catch (...) {",68735],["catch(...)",40654],["catch (std::exception& e) {",34755],["catch (std::exception& e)",25163],["catch( std::exception& ex ) {",24333],["catch (std::exception &e) {",18854]],"useCount":1365246},{"word":"cc","context":[["0x04, //cc g2",2950],["namespace cc {",8962],["}  // namespace cc",8786],[": \"cc\");",8754],["namespace cc {",8476],["}  // namespace cc",5795],[": /*trash*/ \"cc\", \"memory\", __CALLER_SAVED_REGS          \\",4846],[": \"memory\", \"cc\");",4256],[": \"cc\", \"memory\");",4065],["#include \"cc/base/cc_export.h\"",3215]],"useCount":715644},{"word":"cell","context":[["cell.SetNoCreate();",12825],["cell.data.Part.reserved = ALL_DISTRICT;",4763],["Cell cell(pair);",3894],["for (; cell!=endc; ++cell)",3818],["for (; cell!=endc; ++cell)",3818],["fe_values.reinit (cell);",1742],["cell = dof_handler.begin_active(),",1609],["cell->get_dof_indices (local_dof_indices);",1593],["NGridType *grid = getNGrid(cell.GridX(), cell.GridY());",1405],["Cell cell(p);",12424]],"useCount":655089},{"word":"ch","context":[["switch(ch)",7880],["curarg += ch; state = STATE_ARGUMENT;",2348],["default: curarg += ch; state = STATE_ARGUMENT;",2348],["curarg += ch; state = STATE_DOUBLEQUOTED;",2349],["switch (ch)",2605],["int ch;",3514],["return ch;",3990],["default: curarg += ch;",4701],["switch (ch) {",4981],["char ch;",7198]],"useCount":826026},{"word":"change","context":[["// Only change once per interval",2771],["\"made public by common use as inputs or as the resulting change\\n\"",2537],["// Changing pblock->nTime can change work required on testnet:",2773],["// Updating time can change work required on testnet:",2856],["// Only let other nodes change our time by so much",3395],["***   Any manual change here will be lost the next time this script will",3431],["/// when NTP implemented, change to just nTime = GetAdjustedTime()",3535],["// still computed and checked, and any change will be caught at the next checkpoint.",4015],["* (easy to change)",4221],["/* Clear status message on focus change */",4794]],"useCount":1150208},{"word":"changed","context":[["emit changed();",15044],["#error \"(The moc has changed too much.)\"",12708],["bool changed = false;",8586],["progdefaults.changed = true;",7414],["return changed;",5942],["changed = true;",4759],["// The memory index structure will be changed after the db commits.",4262],["* derivative of this code cannot be changed.  i.e. this code cannot simply be",3784],["if (changed)",3610],["changed = true;",17439]],"useCount":779622},{"word":"changes","context":[["** WARNING! All changes made in this file will be lost!",13647],["\"Execute command when the best block changes (%s in cmd is replaced by block \"",3176],["* the value of the property changes.",3195],["* running the ASF driver selector tool. Any changes will be discarded.",3308],["* files for a list of changes.  These files are distributed with",3315],["* This is required every time the blocked sigset_t changes.",3490],["// no changes, quest ignore this data",3739],["** WARNING! All changes made in this file will be lost when recompiling UI file!",5877],["// no changes, quest can't be done for this requirement",6186],["* file. You must edit the source file for changes to be made to this file.",2184]],"useCount":615663},{"word":"channel","context":[["* @param chan MAVLink channel to send the message",4017],["struct ieee80211_channel *channel,",3833],["struct ieee80211_channel *channel;",3616],["u8 channel;",3363],["int channel;",2870],["uint8 channel;",2218],["is usually the receive buffer for the channel, and allows a reply to an",1882],["WEBRTC_CHECK_CHANNEL(channel);",1855],["// Get our external IP from the IRC server and re-nick before joining the channel",1685],["* @param chan The MAVLink channel this message will be sent over",4170]],"useCount":1430184},{"word":"char","context":[["const char *name;",69868],["char *name;",53633],["int main(int argc, char *argv[])",49760],["unsigned char :1;",49296],["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["char c;",21376],["unsigned char BYTE;",20902],["int main(int argc, char** argv)",20124],["const char *name,",19931]],"useCount":19996540},{"word":"character","context":[["// unlearn only talents for character class",1317],["// prevent character rename to invalid name",1471],["//   leaf character table",1720],["//   internal character table",1720],["*   - Outside quotes, any character can be escaped",2344],["* - The backslash \\c \\ is used as escape character",2344],["// do character spell book cleanup (all characters)",2682],["* Shift key is down and the result is a lower case character, or",3089],["* Shift key is not down and the result is an upper case character.",3089],["case 1: // 4n+1 base64 character processed: impossible",3307]],"useCount":700780},{"word":"check","context":[["// check online security",14252],["// sanity check",7749],["\"Must check which() before get()ing a union member.\");",3674],["check(\"void foo()\\n\"",3728],["from check function */",3784],["// To check if a library is compiled with CocoaPods you",3993],["check(\"void f()\\n\"",4064],["// 1) A remote node can quickly check if the connection is operational",4072],["*\t@skb: buffer to check",6648],["check(\"void f() {\\n\"",6771]],"useCount":2514679},{"word":"child","context":[["do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= (condition) ? PF_USED_MATH : 0; } while (0)",3621],["#define set_stopped_child_used_math(child) do { (child)->flags |= PF_USED_MATH; } while (0)",3621],["do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= (condition) ? PF_USED_MATH : 0; } while (0)",3621],["#define conditional_stopped_child_used_math(condition, child) \\",3621],["do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= current->flags & PF_USED_MATH; } while (0)",3621],["#define copy_to_stopped_child_used_math(child) \\",3621],["#define clear_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH; } while (0)",3621],["do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= current->flags & PF_USED_MATH; } while (0)",3621],["#define clear_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH; } while (0)",3621],["return child;",4753]],"useCount":1195080},{"word":"chrome","context":[["#include \"chrome/browser/ui/tabs/tab_strip_model.h\"",9895],["#include \"chrome/browser/profiles/profile.h\"",36299],["#include \"chrome/common/pref_names.h\"",21912],["#include \"chrome/common/chrome_switches.h\"",21177],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"chrome/browser/browser_process.h\"",17724],["#include \"chrome/common/url_constants.h\"",14893],["#include \"chrome/common/chrome_paths.h\"",10077],["#include \"chrome/browser/extensions/extension_service.h\"",10396],["#include \"chrome/browser/chrome_notification_types.h\"",11309]],"useCount":1421490},{"word":"class","context":[["/* Use the code below as a template for the implementation class for this interface. */",19991],["//     Generated by class-dump 3.5 (64 bit).",20368],["/* End of implementation class template. */",19991],["template <class T>",125801],["template<class T>",88180],["template<class T>",34743],["template <class T>",33845],["*     Generated by class-dump 3.3.4 (64 bit).",32942],["template<class Type>",29125],["class Solution {",22727]],"useCount":10990466},{"word":"clear","context":[["clear();",15177],["ui->lineEdit->clear();",6423],["vHave.clear();",6542],["vchRet.clear();",6855],["result.clear();",7457],["clear();",7467],["void clear() {",8081],["void clear()",10048],["void clear();",50545],["clear();",64330]],"useCount":2583152},{"word":"client","context":[["client->Reset();",6974],["client->WaitForIdle();",35947],["virNetServerClientPtr client,",11686],["#include \"client.h\"",4323],["// headers also when they are imported in the client",3993],["// Keep up to date with client",3816],["PVR_CLIENT client;",3746],["// do this before starting client thread, to filter out",3509],["handshake(ssl::stream_base::client); // HTTPS clients write first",3219],["VIR_DEBUG(\"server=%p client=%p msg=%p rerr=%p args=%p ret=%p\", server, client, msg, rerr, args, ret);",3210]],"useCount":1789549},{"word":"clock","context":[["/* Delay after an RCC peripheral clock enabling */ \\",7657],["*        (when HSI is used as system clock source, directly or through the PLL).",1858],["*        (when HSE is used as system clock source, directly or through the PLL).",1858],["start = clock();",2006],["* @note   After reset, the peripheral clock (used for registers read/write access)",2065],["clock_t end = clock();",2321],["clock_t start = clock();",2798],["//  - The user (asking the user to fix the system clock if the first two disagree)",3267],["//  - System clock",3271],["// Misc warnings like out of disk space and clock is wrong",4124]],"useCount":798114},{"word":"close","context":[["\"Connection: close\\r\\n\"",7500],["pcursor->close();",6959],["close();",46434],["file.close();",42880],["path.close();",23250],["m_pDS->close();",21546],["close(fd);",17636],["f.close();",14563],["void close();",14032],["close(fd);",8184]],"useCount":1149606},{"word":"cmd","context":[["CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));",6260],["unsigned int cmd, unsigned long arg);",6211],["EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));",6554],["return NextCmdAddress<ValueType>(cmd);",9618],["static const cmd::ArgFlags kArgFlags = cmd::kFixed;",9659],["static const cmd::ArgFlags kArgFlags = cmd::kFixed;",9659],["EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);",9690],["EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);",9690],["cmd.header.command);",10780],["EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));",15035]],"useCount":1208346},{"word":"code","context":[["/* destructor code */",19991],["/* Use the code below as a template for the implementation class for this interface. */",19991],["/* member initializers and constructor code */",19991],["\\code",20585],["@code",27114],["* @returns VBox status code.",28471],["*  @return status, EC_Normal if successful, an error code otherwise",30879],["\\code",32703],["* \\code",33372],["* @code",35559]],"useCount":5018711},{"word":"col","context":[["if ((col >> 24) == 0)",1178],["col = 0;",3207],["if (col)",1237],["const dict_col_t*\tcol;",1278],["int col;",1735],["int row, col;",2041],["++col;",2165],["return col;",2577],["int col = 0;",2617],["col++;",3000]],"useCount":595766},{"word":"color","context":[["ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");",11974],["ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");",11948],["return color;",4820],["// number or [name] Shift-click form |color|Hspell:spell_id|h[name]|h|r or Htalent form",4450],["QColor color;",3434],["color,",3315],["ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");",3272],["\"td.cmd-error { color: red; } \"",3092],["\"td.time { color: #808080; padding-top: 3px; } \"",3068],["ui->labelCoinControlChangeLabel->setStyleSheet(\"QLabel{color:red;}\");",3045]],"useCount":1432486},{"word":"column","context":[["void copyEntryData(QAbstractItemView *view, int column, int role=Qt::EditRole);",1807],["void copyEntryData(QAbstractItemView *view, int column, int role)",3237],["@param[in] column  Data column to extract from the model",1859],["@param[in] column  Data column to extract from the model",1859],["switch (index.column()) {",1961],["// name, column, role",2180],["fill-column:99",2500],["fill-column:99",2901],["switch(index.column())",3073],["QModelIndexList selection = view->selectionModel()->selectedRows(column);",3299]],"useCount":834791},{"word":"com","context":[["*  http://aws.amazon.com/apache2.0",19798],["** Nokia at qt-info@nokia.com.",24043],["*  http://aws.amazon.com/apache2.0",25389],["** Nokia at qt-info@nokia.com.",28466],["** conditions see http://qt.digia.com/licensing.  For further information",30797],["** use the contact form at http://qt.digia.com/contact-us.",34423],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** Contact: Nokia Corporation (qt-info@nokia.com)",39062],["** Contact: Nokia Corporation (qt-info@nokia.com)",45228]],"useCount":2587269},{"word":"command","context":[["cmd.header.command);",10780],["strRet = strprintf(\"help: unknown command: %s\\n\", strCommand.c_str());",3229],["* For booting Linux, the board info and command line data",4985],["//  (12) command",4128],["/* Task command name length */",3522],["// Convert strings to command-specific RPC representation",3361],["\"help [command]\\n\"",3331],["\"List commands, or get help for a command.\");",3327],["// Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,",3214],["\"Execute command when the best block changes (%s in cmd is replaced by block \"",3176]],"useCount":1659406},{"word":"common","context":[["#include \"common.h\"",25529],["#include <common.h>",7702],["#include \"extensions/common/extension.h\"",8119],["#include \"chrome/common/chrome_paths.h\"",10077],["#include \"content/public/common/content_switches.h\"",11356],["#include \"common.h\"",14525],["#include \"chrome/common/url_constants.h\"",14893],["#include \"chrome/common/chrome_switches.h\"",21177],["#include \"chrome/common/pref_names.h\"",21912],["#include \"content/common/content_export.h\"",12531]],"useCount":1294108},{"word":"compiler","context":[["/* Define to `__inline__' or `__inline' if that's what the C compiler",2945],["// Generated by the protocol buffer compiler.  DO NOT EDIT!",2724],["// C++ data binding compiler.",2935],["}  // namespace compiler",3172],["namespace compiler {",3247],["#include \"compiler.h\"",3349],["compiler->addError(ScriptCompiler::CE_INVALIDPARAMETERS, prop->file, prop->line,",3726],["UNREFERENCED_PARAMETER(inst);  // To silence compiler.",4636],["#include <compiler.h>",5031],["#include <linux/compiler.h>",20609]],"useCount":615683},{"word":"conditions","context":[["* furnished to do so, subject to the following conditions:",15849],["** conditions contained in a signed written agreement between you and Nokia.",16029],["// furnished to do so, subject to the following conditions:",28575],["furnished to do so, subject to the following conditions:",29897],["** conditions see http://qt.digia.com/licensing.  For further information",30797],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["* furnished to do so, subject to the following conditions:",35669],["furnished to do so, subject to the following conditions:",45324],["//  furnished to do so, subject to the following conditions:",12170],["** conditions contained in a signed written agreement between you and Nokia.",14942]],"useCount":750168},{"word":"config","context":[["#include \"config.h\"",5599],["#include <linux/config.h>",11269],["#include <config.h>",13170],["#include \"il2cpp-config.h\"",15652],["#include <config.h>",17431],["#include \"config.h\"",18778],["#include <config.h>",19785],["#include \"config.h\"",41304],["#include \"config.h\"",116842],["#include <boost/config.hpp>",5336]],"useCount":1364371},{"word":"configuration","context":[["/*No configuration chosen for this peripheral*/",2061],["// configuration",2170],["* board/config.h - configuration options, board specific",2410],["#include \"configuration.h\"",2593],["* configuration interface.",2729],["* Start addresses for the final memory configuration",2983],["\"You must set rpcpassword=<password> in the configuration file:\\n\"",3021],["\"%s, you must set a rpcpassword in the configuration file:\\n\"",3052],["_(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"",3553],["* Command line configuration.",6304]],"useCount":798675},{"word":"connect","context":[["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["// even when -connect or -proxy is specified",3634],["/** check whether a given address is in a network we can probably connect to */",3638],["BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])",3641],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["// Choose an address to connect to based on most recently seen",3760],["// It'll only connect to one or two seed nodes because once it connects,",3807],["connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",5239],["connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",6489],["connect(",3632]],"useCount":1129521},{"word":"connection","context":[["* @param c The connection",7767],["arising out of or in connection with the use or performance of",5339],["// Each connection can only send one version message",4131],["// 1) A remote node can quickly check if the connection is operational",4072],["// Look for an existing connection",3762],["// Initiate outbound network connection",3757],["// Accept connection",3700],["* Accept and handle incoming connection.",3507],["* Sets up I/O resources to accept and handle a new connection.",3507],["mapHeadersRet[\"connection\"] = \"close\";",3394]],"useCount":860458},{"word":"const","context":[["void print() const",26074],["std::string ToString() const",26172],["const GURL& url,",27019],["CreatureAI* GetAI(Creature* creature) const override",31512],[") const",31951],["SpellScript* GetSpellScript() const",37557],["static const PythonQtMethodInfo* methodInfo = PythonQtMethodInfo::getCachedMethodInfoFromArgumentList(2, argumentList);",52660],["void UpdateAI(const uint32 diff)",64808],["const char *name;",69868],["CreatureAI* GetAI(Creature* creature) const",71515]],"useCount":61431337},{"word":"const_iterator","context":[["std::vector<std::vector<std::string> >::const_iterator itt;",4218],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["for (AuraEffectList::const_iterator i = mTotalAuraList.begin(); i != mTotalAuraList.end(); ++i)",10449],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["SkillStatusMap::const_iterator itr = mSkillStatus.find(skill);",6646],["const_iterator",5720],["for (SessionMap::const_iterator itr = m_sessions.begin(); itr != m_sessions.end(); ++itr)",5401],["for (Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)",4830],["for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)",4830],["vector<t_field*>::const_iterator f_iter;",4520]],"useCount":1413239},{"word":"constant","context":[["HConstant* constant = chunk_->LookupConstant(op);",1061],["*        base address). You can use the constant defined in the registers",12514],["struct ff_constant_effect constant;",1119],["* A constant value which uniquly identifies objects of this type.",1359],["* \\return The type constant for the actual type of the object.",1359],["//Definition of TYPE constant",1361],["/* The following constant reflects the upper bound of the file/locking space */",1894],["* These are the constant used to fake the fixed-point load-average",3570],["// Precalc the first half of the first hash, which stays constant",3653],["*        definition header file (<peripheral>_BASE_PTR) or the constant defined in",12514]],"useCount":613165},{"word":"constructor","context":[["* Default constructor",3559],["// constructor",6471],["/* member initializers and constructor code */",19991],["// constructor",5609],["* Copy constructor.",4280],["/// Default constructor",4165],["/// constructor",4134],["/// Copy constructor",3919],["* Default constructor.",3879],["/// Default constructor.",3563]],"useCount":668317},{"word":"contains","context":[["*\t@sock contains the socket structure.",4339],["* @brief   This file contains the headers of the interrupt handlers.",3009],["/** An input of a transaction.  It contains the location of the previous",3216],["/** An output of a transaction.  It contains the public key that the next input",3222],["* fpu_counter contains the number of consecutive context switches",3250],["* This structure contains the version of task_cputime, above, that is",3457],["* XXX_delay contains the accumulated delay time in nanoseconds.",3503],["/* this ALWAYS GENERATED file contains the definitions for the interfaces */",3654],["* This file contains Original Code and/or Modifications of Original Code",4321],["***   call into the kernel available to libc.  It contains only constants,",4647]],"useCount":1150688},{"word":"content","context":[["#include \"content/public/browser/notification_service.h\"",16924],["content::NotificationService::AllSources());",22780],["}  // namespace content",23073],["using content::BrowserThread;",23305],["#include \"content/public/browser/web_contents.h\"",26274],["#include \"content/public/browser/browser_thread.h\"",30636],["}  // namespace content",32743],["namespace content {",34125],["namespace content {",40890],["// content:",16108]],"useCount":2285829},{"word":"contents","context":[["Nan::ThrowError(\"Array contents invalid.\");",5438],["otherwise run, modify, and propagate the contents of THIS",4293],["// unspecified (HTTP errors and contents of 'error').",3455],["/* Allocate a new mm structure and copy contents from tsk->mm */",3189],["\"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"",3105],["std::string contents;",2259],["content::WebContents* contents =",1870],["* contents of the file.",1767],["* The contents of this file, and the files included with this file,",1559],["return contents;",1531]],"useCount":602347},{"word":"context","context":[["ssl::context& context,",10503],["ssl::context& context,",10503],["LocalContext context;",8283],["RPCListen(acceptor, context, fUseSSL);",6917],["ssl::context context(io_service, ssl::context::sslv23);",5389],["ssl::context context(io_service, ssl::context::sslv23);",5389],["ssl::context context(io_service, ssl::context::sslv23);",5389],["@param  pWDICtx:         pointer to the WLAN DAL context",17346],["* @gfp: context flags",5363],["if (context)",10617]],"useCount":2904690},{"word":"continue","context":[["continue;",383184],["// this situation and push another getblocks to continue.",3600],["if (strcmp(ifa->ifa_name, \"lo\") == 0) continue;",3718],["if (strcmp(ifa->ifa_name, \"lo0\") == 0) continue;",3718],["if (ifa->ifa_addr == NULL) continue;",3724],["if ((ifa->ifa_flags & IFF_UP) == 0) continue;",3735],["continue;",23181],["continue;",80649],["continue;",113456],["continue;",2721564]],"useCount":3895325},{"word":"control","context":[["if (!control.Wait())",2017],["* @fc: frame control bytes in little-endian byteorder",9080],["control.Add(vChecks);",2029],["// ignore for remote control state",2240],["// Scintilla source code edit control",2408],["control block can be extracted from its context",2552],["if (control)",2629],["#define SIGNAL_STOP_STOPPED\t0x00000001 /* job control stop in effect */",3519],["// TODO: Add your control notification handler code here",4538],["return TRUE;  // return TRUE unless you set the focus to a control",4611]],"useCount":1218905},{"word":"copy","context":[["// a copy of the GCC Runtime Library Exception along with this program;",3926],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",7052],["@property(readonly, copy) NSString *description;",9894],["@property(readonly, copy) NSString *debugDescription;",9901],["//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",11075],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",13907],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",22849],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",29139],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",29616],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",43690]],"useCount":1546095},{"word":"core","context":[["#include \"third_party/skia/include/core/SkBitmap.h\"",5886],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"",57878],["#include <aws/core/utils/memory/stl/AWSString.h>",14805],["#include <aws/core/utils/xml/XmlSerializer.h>",6206],["#include \"core/CoreExport.h\"",6371],["#include <aws/core/utils/memory/stl/AWSStringStream.h>",6712],["#include <aws/core/utils/json/JsonSerializer.h>",8399],["#include <aws/core/utils/StringUtils.h>",8567],["#include \"core/dom/Document.h\"",10270],["PyObject *module = PyImport_ImportModule((char*) \"ns.core\");",10290]],"useCount":1932403},{"word":"could","context":[["the FAQ page \"My application does not run, what could be wrong?\".  Have you",1809],["* determining if two pages could be buddies. We are not really",1888],["* identifying a zone since we could be using a the section number",1888],["// could not send full message; stop sending more",2014],["* are unused and could be used privately, carefully. The management of this",2236],["//      could be used to create visually identical looking account numbers.",2346],["*    not run, what could be wrong?\"                                     *",2936],["printf(\"Loading addresses from DNS seeds (could take a while)\\n\");",3160],["// script can be anything; an attacker could use a very",3608],["// minimum amount of work that could possibly be required nTime after",3653]],"useCount":636279},{"word":"count","context":[["count++;",66782],["if (count == 0)",28758],["count = 0;",26854],["*no_space_count = count + no_similar_count;",23387],["int count;",17633],["count++;",15726],["int count = 0;",46673],["++count;",104481],["uint32 count = 0;",77468],["return count;",37760]],"useCount":4871804},{"word":"counter","context":[["* so that after 256 times the counter wraps and the behavior turns",3251],["counter++;",13115],["// Each thread has its own key and counter",3271],["unsigned int &counter,",3107],["// Seed random number generator with performance counter",3095],["// Seed with CPU performance counter",3305],["uint32 counter = 0;",3823],["counter = 0;",5461],["int counter = 0;",7465],["++counter;",9494]],"useCount":701476},{"word":"cout","context":[["std::cout",6176],["std::cout << \"\\n\";",5672],["std::cout<<std::endl;",5804],["std::cout << std::endl;",6214],["cout << \"\\n\";",8236],["cout<<endl;",11173],["cout << endl;",12927],["using std::cout;",15160],["std::cout << std::endl;",38943],["cout << endl;",62961]],"useCount":1257069},{"word":"cpu","context":[["extern void set_task_cpu(struct task_struct *p, unsigned int cpu);",3568],["static inline void set_task_cpu(struct task_struct *p, unsigned int cpu)",3591],["extern void set_curr_task(int cpu, struct task_struct *p);",3598],["extern struct task_struct *curr_task(int cpu);",3604],["extern void init_idle(struct task_struct *idle, int cpu);",3604],["extern struct task_struct *idle_task(int cpu);",3604],["return task_thread_info(p)->cpu;",3607],["extern int idle_cpu(int cpu);",3631],["int cpu;",6496],["unsigned int cpu);",8441]],"useCount":690972},{"word":"create","context":[["\"If the file does not exist, create it with owner-readable-only file \"",6171],["static DLLSPEC daeElementRef create(DAE& dae);",5216],["// Constant stuff for coinbase transactions we create:",3753],["struct buffer_head *bh_result, int create);",3174],["* This macro is used to create a struct usb_device_id that matches a",3151],["+ (instancetype)create ACTIVATOR;",3016],["// Minimum block size you want to create; block will be filled with free transactions",2759],["// Largest block you're willing to create:",2743],["QObject *object = component.create();",2673],["virtual Item *create(THD *thd, Item *arg1);",2544]],"useCount":1511043},{"word":"created","context":[["FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.",3749],["* Check if a task structure is the first user space task the kernel created.",3496],["@return the newly created item */",3400],["* When a program's coredump is generated as ELF format, a section is created",2514],["// created by AppInit() or the Qt main() function.",1959],["// Select row for newly created address",1567],["* for a genuine PAGE_BUDDY_MAPCOUNT_VALUE. -128 can be created very",1820],["// There is a free transaction area in blocks created by most miners,",1655],["// These are created by StartRPCThreads, destroyed in StopRPCThreads",1633],["// Select row of newly created address, once",1538]],"useCount":821062},{"word":"creature","context":[["if (creature)",7370],["CreatureAI* GetAI(Creature* creature) const override",31512],["instance = creature->GetInstanceScript();",19110],["CreatureAI* GetAI(Creature* creature) const OVERRIDE",16154],["bool OnGossipHello(Player* player, Creature* creature)",10665],["if (!creature)",10351],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["CreatureAI* GetAI(Creature* creature) const",71515],["switch (creature->GetEntry())",7423]],"useCount":1301215},{"word":"cs","context":[["*  @author Douglas C. Schmidt <schmidt@cs.wustl.edu>",2383],["virtual BOOL PreCreateWindow(CREATESTRUCT& cs);",2034],["CHARSET_INFO *cs= system_charset_info;",2745],["mutable CCriticalSection cs;",3741],["LOCK2(cs_main, mempool.cs);",4038],["static CCriticalSection cs;",5249],["LOCK(cs);",7467],["LOCK(mempool.cs);",19599],["LOCK(cs);",32779],["0x00, //nr fa de cs gamma 0 0000",1797]],"useCount":582536},{"word":"ctx","context":[["(void)ctx;",11047],["WalletModel::UnlockContext ctx(model->requestUnlock());",4529],["SHA256_CTX ctx;",3710],["SHA256_Init(&ctx);",3693],["SHA256_Update(&ctx, data, sizeof(data));",3631],["ctx.h[i] = ((uint32_t*)pinit)[i];",3623],["((uint32_t*)pstate)[i] = ctx.h[i];",3623],["ctx.endSection();",3562],["@param ctx The execution context to use.",3313],["NK_ASSERT(ctx);",2948]],"useCount":1091025},{"word":"cuda","context":[["} // end namespace cuda",284],["#include <cuda.h>",929],["namespace cuda",580],["#include \"cuda.h\"",579],["#include <cuda.h>",413],["cv::cuda::GpuMat dst;",376],["namespace cuda {",333],["cuda = lmp->cuda;",303],["cuda = lmp->cuda;",303],["if(cuda == NULL)",301]],"useCount":701799},{"word":"current","context":[["base::MessageLoop::current()->Run();",11152],["#include <asm/current.h>",5139],["base::MessageLoop::current()->PostTask(",10421],["MessageLoop::current()->Run();",10348],["content::NotificationService::current()->Notify(",10070],["MessageLoop::current()->RunAllPending();",5999],["return current;",5638],["MessageLoop::current()->PostTask(",5255],["MessageLoop::current()->RunUntilIdle();",5081],["base::MessageLoop::current()->RunUntilIdle();",17813]],"useCount":3391150},{"word":"currently","context":[["encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported",6745],["licensable by Tokutek, both currently or in the future; and that in",4293],["// Check for nMinDiskSpace bytes (currently 50MB)",3954],["labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));",3229],["// TODO: This is currently disabled because it needs to be verified to work",3211],["labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));",3128],["atomic_long_t epoll_watches; /* The number of file descriptors currently watched */",2981],["#if 0 /* BITS_PER_LONG > 32 -- currently broken: it increases power usage under light load  */",2440],["* mapping from the currently active vm_flags protection bits (the",2240],["#define VM_READ\t\t0x00000001\t/* currently active flags */",2233]],"useCount":647591},{"word":"cursor","context":[["QTextCursor cursor = textCursor();",2867],["return cursor;",1474],["* @pos:\tthe &struct list_head to use as a loop cursor.",1731],["cursor.insertBlock();",1775],["// Get cursor",1934],["setTextCursor(cursor);",1969],["++cursor;",2255],["cursor.beginEditBlock();",2427],["cursor.endEditBlock();",2434],["* @pos:\tthe type * to use as a loop cursor.",4029]],"useCount":666999},{"word":"d","context":[["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["if (d)",4785],["return d;",5731],["if (!d)",6019],["case 'd':",6931],["double d;",7228],["TestDelegate d;",11329],["case 'd':",12202],["return d;",15062],["delete d;",42305]],"useCount":6912519},{"word":"data","context":[["return data;",29418],["data << uint8(0);",16649],["SendMessageToSet(&data, true);",17935],["void *data);",22711],["void *data;",26222],["if (!data)",15940],["WorldPacket data;",41021],["data << uint32(0);",52701],["GetSession()->SendPacket(&data);",68626],["SendPacket(&data);",70025]],"useCount":13591898},{"word":"database","context":[["// Use the provided setting for -txindex in the new database",2008],["throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");",5015],["// Pushing a new one to the database can cause it to be written",2011],["// Verify that the web database has been updated and the notification sent.",2125],["// Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry",2226],["database.Open();",2395],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (default: 25)\"),",2585],["// database.",2827],["\"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +",2900],["/* Prepare database */",3291]],"useCount":698416},{"word":"db","context":[["QSqlQuery query(db);",1875],["#include \"db.h\"",20143],["// The memory index structure will be changed after the db commits.",4262],["db.Close();",3421],["/** Used to marshal pointers into hashes for db storage. */",3420],["#include \"db.h\"",2258],["// Reorganize is costly in terms of db load, as it works in a single db transaction.",2069],["// Reorganize is costly in terms of db load, as it works in a single db transaction.",2069],["if (db.Open())",2028],["CVideoDatabase db;",1940]],"useCount":828541},{"word":"debug","context":[["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922],["//// debug print",15925],["// Reopen debug.log on SIGHUP",3658],["if (debug) {",4535],["#include \"debug.h\"",5118],["#include \"base/debug/trace_event.h\"",5502],["/// debug print",10182],["if (debug)",13176],["#include \"debug.h\"",13705],["if (debug)",19662]],"useCount":812552},{"word":"default","context":[["default: break;",49165],["default:",1594455],["default:",356081],["default:",128040],["default:",93936],["default: {",25241],["default: {",24997],["default:",22461],["default :",18535],["default: ;",13287]],"useCount":5022927},{"word":"define","context":[["#define HAVE_SYS_TYPES_H 1",8198],["#define HAVE_STDLIB_H 1",8318],["#define HAVE_STRING_H 1",8424],["#define NOMINMAX",8510],["#define STDC_HEADERS 1",8595],["#define FALSE 0",9105],["#define __CONFIG_H",11041],["#define NS_NO_VTABLE",15820],["#define new DEBUG_NEW",21868],["#  define machine_arch_type\t__machine_arch_type",432090]],"useCount":105498076},{"word":"defined","context":[["#endif /* !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__)) */",20520],["#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))",21926],["#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))",21926],["#if defined(OS_ANDROID)",31294],["#if defined(OS_MACOSX)",33699],["#if defined(__cplusplus)",39896],["#if defined(OS_CHROMEOS)",50347],["#if defined(__cplusplus) && !defined(CINTERFACE)",55584],["#if defined(__cplusplus) && !defined(CINTERFACE)",55584],["#if defined(OS_WIN)",80948]],"useCount":7733632},{"word":"defines","context":[["* variables. Each exclusive cpuset essentially defines an island domain by",1246],["// The minimal temperature defines the temperature below which the heater will not be enabled It is used",1163],["// N.B. These #defines do *not* include the ID & length",2535],["#include \"defines.h\"",2642],["// The following are defines for the bit fields in the",2850],["// This defines the number of extruders",1159],["// The following are defines for the bit fields in the GPIO_PCTL register for",3783],["#include \"defines.h\"",4308],["// N.B. These #defines do *not* include the EID & length",5324],["/* Legacy defines */",6131]],"useCount":893275},{"word":"definition","context":[["/*******************  Bit definition for IWDG_KR register  ********************/",2077],["/******************  Bit definition for USART_CR3 register  *******************/",1881],["/*******************  Bit definition for CRC_IDR register  ********************/",1881],["/********************  Bit definition for CRC_CR register  ********************/",1882],["/******************  Bit definition for USART_BRR register  *******************/",1882],["/*******************  Bit definition for WWDG_CFR register  *******************/",1882],["* Note: mm/huge_memory.c VM_NO_THP depends on this definition.",1918],["// device type definition",2264],["// can use the `COCOAPODS` macro definition which is",3993],["*        definition header file (<peripheral>_BASE_PTR) or the constant defined in",12514]],"useCount":1162188},{"word":"delete","context":[["delete result;",57987],["delete item;",12465],["delete m;",12679],["delete itr->second;",13423],["delete conn;",14037],["delete targets;",18152],["delete this;",22176],["delete this;",34437],["delete d;",42305],["delete ui;",56686]],"useCount":3615358},{"word":"description","context":[["QString description;",2484],["* @description:",10425],["QString description() const;",2494],["-(NSString *)description;",2881],["QString BitcoinUnits::description(int unit)",3020],["char *description;",2228],["return QVariant(description(unit));",3233],["- (NSString *)description;",3544],["@property(readonly, copy) NSString *description;",9894],["- (id)description;",9931]],"useCount":604213},{"word":"dest","context":[["int rc = std::rename(src.string().c_str(), dest.string().c_str());",3332],["return MoveFileExA(src.string().c_str(), dest.string().c_str(),",3333],["Object operator()(const CNoDestination &dest) const { return Object(); }",3343],["return dest;",3647],["ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));",3892],["uint16 dest;",3947],["Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);",4003],["CTxDestination dest = address.Get();",4407],["return dest;",6526],["ItemPosCountVec dest;",26174]],"useCount":1022951},{"word":"details","context":[["* more details.",100721],["more details.",7368],["* more details.",67109],["for more details.",29813],["* for more details.",26128],["* details.",16694],["for more details.",13585],["const content::NotificationDetails& details) {",12694],["@details",8712],["* @details",7434]],"useCount":1045775},{"word":"dev","context":[["*\t@dev: network device",11548],["struct device *dev;",15379],["struct net_device *dev,",14055],["__field(\tdev_t,\tdev\t\t\t)",4085],["struct net_device *dev);",5252],["struct net_device *dev;",6228],["struct device dev;",6452],["MAJOR(__entry->dev), MINOR(__entry->dev),",8426],["MAJOR(__entry->dev), MINOR(__entry->dev),",8426],["* @dev: network device",13433]],"useCount":2089760},{"word":"device","context":[["struct device *dev;",15379],["/* stacked block device info */",3488],["// device-level overrides",3718],["struct device dev;",6452],["* @param instance module device instance",7413],["struct device;",9404],["*\t@dev: network device",11548],["* @dev: network device",13433],["#include <linux/device.h>",19200],["// IOStream device that speaks SSL but can also speak non-SSL",3219]],"useCount":2753853},{"word":"diff","context":[["void UpdateAI(uint32 diff)",10770],["const Tp diff = f - f0;",5761],["const Tp frac = diff / f0;",5761],["npc_escortAI::UpdateAI(diff);",7171],["_events.Update(diff);",10149],["void UpdateAI(uint32 diff) OVERRIDE",11565],["void UpdateAI(uint32 const diff)",12025],["void UpdateAI(uint32 diff) override",23247],["events.Update(diff);",27578],["void UpdateAI(const uint32 diff)",64808]],"useCount":1107651},{"word":"different","context":[["// The nonce stops the remote getting confused between different pings: without",4072],["// Calculate total balance a different way from GetBalance()",3569],["* the helpers to get the task's different pids as they are seen",3475],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["// peer might be an older or different implementation with",2940],["// a different signature key, etc.",2940],["* After ->on_cpu is cleared, the task can be moved to a different CPU.",2393],["* mm details, and allowing different kinds of memory mappings",2245],["// creating a different genesis block:",1951],["* to have different dirent layouts depending on the binary type.",1912]],"useCount":734611},{"word":"dim","context":[["template <int dim, int spacedim>",17141],["template <int dim>",33308],["template <int dim, int spacedim>",6304],["template<int dim>",5993],["template <int dim>",3739],["for (unsigned int d=0; d<dim; ++d)",3595],["template <int dim, typename Number>",3569],["template<int dim, int spacedim>",2862],["switch (dim)",2141],["typename DoFHandler<dim>::active_cell_iterator",1844]],"useCount":672930},{"word":"dir","context":[["closedir(dir);",3710],["enum dma_data_direction dir)",2472],["struct inode *dir,",2086],["myDir = dir;",3594],["if(dir.isEmpty()) // Default to user documents location",3582],["return dir;",3327],["QDir dir;",3253],["const QString &dir,",3078],["/* dir.c */",3041],["\"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +",2920]],"useCount":822910},{"word":"directory","context":[["See the README file in the top-level LAMMPS directory.",8796],["See the README file in the top-level LAMMPS directory.",5817],["* COPYING in the main directory of this source tree, or the",5182],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["/* Define to the sub-directory in which libtool stores uninstalled libraries.",3828],["*    the apps directory (application code) you must include an acknowledgement:",3710],["syncable::ReadTransaction trans(FROM_HERE, directory());",3559],["\"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");",3152],["\"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +",2920],["printf(\"Default data directory %s\\n\", GetDefaultDataDir().string().c_str());",3120]],"useCount":722864},{"word":"disable","context":[["* have no need to disable irqs.",3524],["* true SMP (so they need either to either locally disable irq around",1866],["#pragma warning(disable:4786)",4420],["#pragma warning(disable:4717)",3433],["#pragma warning(disable:4805)",3424],["#pragma warning(disable:4804)",3421],["#pragma warning( disable: 4049 )  /* more than 64k source lines */",3360],["* Note this does not disable interrupts like task_rq_lock,",2492],["/* disable apply button when new data loaded */",2107],["/* disable apply button after settings are loaded as there is nothing to save */",2012]],"useCount":605193},{"word":"display","context":[["// if chkReqPayment is not active, don't display lnReqAmount as invalid",2357],["/** display language strings as \"native language (locale name)\", e.g. \"Deutsch (de)\" */",2964],["/** display language strings as \"native language - native country (locale name)\", e.g. \"Deutsch - Deutschland (de)\" */",2964],["/** display language strings as \"language (locale name)\", e.g. \"German (de)\" */",2969],["/** display language strings as \"language - country (locale name)\", e.g. \"German - Germany (de)\" */",2969],["// Notify UI to display prev block's coinbase if it was ours",3780],["// update the display unit, to not use the default (\"BTC\")",5742],["Display*\t\t/* display */,",8602],["*    must display the following acknowledgement:",20377],["#include \"ui/gfx/display.h\"",2282]],"useCount":693951},{"word":"distribution","context":[["// the top level of the deal.II distribution.",17668],["*    documentation and/or other materials provided with the distribution.",106352],["*    documentation and/or other materials provided with the distribution.",34821],["*    and/or other materials provided with the distribution.",33452],["* distribution.",27776],["documentation and/or other materials provided with the distribution.",23913],["* file distributed with this source distribution.",20872],["* VirtualBox OSE distribution. VirtualBox OSE is distributed in the",20770],["* distribution.",20627],["*    distribution.",18508]],"useCount":1003158},{"word":"do","context":[["do {",43201],["do",276712],["* furnished to do so, subject to the following conditions:",35669],["do",31843],["do {\t\t\t\t\t\t\t\t\\",37099],["do {\t\t\t\t\t\t\t\t\t\\",43060],["furnished to do so, subject to the following conditions:",45324],["do {",61986],["do { \\",77664],["do {",231047]],"useCount":4118672},{"word":"document","context":[["#include \"document.h\"",1976],["ASSERT(document);",2093],["* This file is part of LyX, the document processor.",2261],["ss << ui->messageIn_SM->document()->toPlainText().toStdString();",2398],["ss << ui->messageIn_VM->document()->toPlainText().toStdString();",2398],["ui->messagesWidget->document()->setDefaultStyleSheet(",3093],["ui->messagesWidget->document()->addResource(",3094],["if (!document)",3209],["TiXmlDocument* document = GetDocument();",3398],["#include \"document.hxx\"",1958]],"useCount":730087},{"word":"documentation","context":[["*    documentation and/or other materials provided with the distribution.",34821],["*     documentation and/or other materials provided with the distribution.",12503],["**     the documentation and/or other materials provided with the",12783],["// in the documentation and/or other materials provided with the",13698],["*    the documentation and/or other materials provided with the",15130],["*     documentation and/or other materials provided with the distribution.",16201],["* in the documentation and/or other materials provided with the",18194],["* in the documentation and/or other materials provided with the",22044],["documentation and/or other materials provided with the distribution.",23913],["*    documentation and/or other materials provided with the distribution.",106352]],"useCount":763077},{"word":"does","context":[["\"If the file does not exist, create it with owner-readable-only file \"",6171],["atomic_t sigpending;\t/* How many pending signals does this user have? */",3523],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");",4984],["CLAIMS.  This grant does not include claims that would be infringed",4293],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["// The first loop above does all the inexpensive checks.",4053],["/* Define to empty if `const' does not conform to ANSI C. */",3641],["* If the caller does not need such serialisation then use __set_current_state()",3632],["// you should add code here to check that the transaction does a",3642],["atomic_t processes;\t/* How many processes does this user have? */",3550]],"useCount":1460908},{"word":"doesn","context":[["* We must ensure this doesn't happen until the switch is completely",2393],["// This doesn't trigger the DoS code on purpose; if it did, it would make it easier",4076],["list<COrphan> vOrphan; // list memory doesn't move",3852],["return error(\"CheckProofOfWork() : hash doesn't match nBits\");",3769],["FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.",3749],["return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");",3450],["* other node doesn't have the same branch, it can find a recent common trunk.",3399],["unsigned int\tfrequency; /* kHz - doesn't need to be in ascending",2844],["/* Frequency values here are CPU kHz so that hardware which doesn't run",2424],["* routine so they can be sure the page doesn't go away from under them.",2229]],"useCount":764006},{"word":"don","context":[["// Do this here so we don't have to critsect vNodes inside mapAddresses critsect.",3755],["// Relay inventory, but don't relay old inventory during initial block download",3784],["return true; // Coinbases don't use vin normally",3971],["// Basic checks that don't depend on any context",4126],["// Be shy and don't send version until we hear",4380],["don't. */",6535],["// Parse the account first so we don't generate a key if there's an error",8026],["/* For IDL files that don't want to include root IDL files. */",15792],["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["* We don't bother to synchronize most readers of this at all,",3524]],"useCount":1562144},{"word":"done","context":[["goto done;",10026],["bool done = false;",9856],["__ bind(&done);",17878],["Label done;",12939],["done = true;",17627],["goto done;",20760],["__ jmp(&done);",6452],["// no changes, quest can't be done for this requirement",6186],["goto done;",5285],["done:",9489]],"useCount":1226796},{"word":"double","context":[["double dPriority = 0;",5560],["double value;",6026],["p_out += sizeof( double );",6048],["double x;",6476],["double d;",7228],["double result;",9056],["double",9248],["double **x = atom->x;",9940],["double",17774],["double",18728]],"useCount":5998672},{"word":"driver","context":[["#define CPUFREQ_STICKY\t\t0x01\t/* the driver isn't removed even if",2420],["struct device_driver driver;",2550],["* Pass a target to the cpufreq driver.",1991],["* @priv: Private driver interface data",4243],["* @bp:\t\tdriver handle",3374],["* Note: There might be duplicate includes required by more than one driver.",3310],["* running the ASF driver selector tool. Any changes will be discarded.",3308],["printk(KERN_WARNING \"%s: driver disabled by Kconfig\\n\", __func__);",2927],["#include \"driver.h\"",2864],["* [WPD00001943]Create WiFi test driver framework on WinXP",6278]],"useCount":1055373},{"word":"dst","context":[["int copy_page_range(struct mm_struct *dst, struct mm_struct *src,",2282],["return dst;",7601],["#include <net/dst.h>",2558],["dst++;",2913],["else if (IsEquipmentPos(dst))",3642],["else if (IsBankPos(dst))",3642],["emit_sse_operand(dst, src);",3697],["if (IsInventoryPos(dst))",4285],["return dst;",4306],["emit_optional_rex_32(dst, src);",2521]],"useCount":1447932},{"word":"during","context":[["// Relay inventory, but don't relay old inventory during initial block download",3784],["// Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.",3664],["* - everyone except group_exit_task is stopped during signal delivery",3530],["* There is however an exception to this rule during ptrace",3518],["* or during fork: the ptracer task is allowed to write to the",3518],["* with tsk_used_math (like during threaded core dumping).",3518],["* but then during bootup it turns out that sched_clock()",3407],["// This can be called during exceptions by printf, so we cache the",2991],["void *private;\t\t/* used during construction */",2931],["* the maximum mapped by the Linux kernel during initialization.",4580]],"useCount":704791},{"word":"e","context":[["catch (std::exception& e)",25163],["SWIG_exception(SWIG_RuntimeError, e.what());",10391],["deallog.threshold_double(1.e-10);",10672],["* @param component_id ID of this component (e.g. 200 for IMU)",11697],["e->ignore();",12421],["e->accept();",13735],["return e;",14466],["ObjectList* targets = GetTargets(e, unit);",18172],["catch (std::exception &e) {",18854],["catch (std::exception& e) {",34755]],"useCount":4749095},{"word":"each","context":[["* refcount. The each user mapping also has a reference to the page.",2236],["// seconds to respond to each, the 5th ping the remote sends would appear to",4073],["// 10,000 orphans, each of which is at most 5,000 bytes big is",4015],["// Service each socket",3760],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["/* For each stat XXX, add following, aligned appropriately",3503],["* genesis block at the root, with each block potentially having multiple",3409],["\"Results are an array of Objects, each of which has:\\n\"",2566],["* you also meet, for each linked independent module, the terms and conditions of",9173]],"useCount":1460167},{"word":"either","context":[["* KIND, either express or implied.",4709],["/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */",3565],["* to get both rlim_cur and rlim_max atomically, and either one",3524],["* either version 2, or (at your option)",3107],["* either version 2, or (at your option)",2813],["// pool should connect to either transactions in the chain",2723],["* In either case (swapcache or inode backed), the pagecache itself holds one",2236],["// FetchInputs can return false either because we just haven't seen some inputs",2076],["// they must either disconnect and retry or request the full block.",2033],["* true SMP (so they need either to either locally disable irq around",1866]],"useCount":617355},{"word":"element","context":[["if (!element)",3153],["* Creates a daeMetaElement object that describes this element in the meta object reflection framework.",6032],["* @return A daeMetaElement describing this COLLADA element.",6032],["return element;",4164],["*  @return reference to sequence element",1668],["ASSERT(element);",2829],["// translate scalars per element for incoming data",2120],["// Return the size of an element (sample) in bytes",2120],["if (element)",2100],["*  @return const reference to sequence element",1668]],"useCount":1549551},{"word":"elements","context":[["/** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees",4232],["/* Display elements init */",2979],["/* Network elements init */",2971],["/* Window elements init */",2970],["// We're going to call functions which can modify content of the list during iteration over it's elements",2377],["/* setup/change UI elements when proxy IP is invalid/valid */",2190],["Parent elements:",2056],["Child elements:",1711],["* All the Product's GUI elements, including illustrations and icon sets, as",1465],["else // Even number of elements",1260]],"useCount":903716},{"word":"elif","context":[["#elif Q_MOC_OUTPUT_REVISION != 63",7780],["#elif PRAGMA_STRUCT_PACK",4004],["#elif PRAGMA_STRUCT_PACKPUSH",4004],["#elif defined(__linux__)",5779],["#elif defined(OS_WIN)",5875],["#elif defined(__GNUC__)",6977],["#elif defined(_MSC_VER)",7293],["#elif defined(OS_MACOSX)",7368],["#elif defined(OS_POSIX)",7563],["#elif defined(__LITTLE_ENDIAN)",10615]],"useCount":1041247},{"word":"else","context":[["else",620372],["else",702524],["else {",988989],["else",1132903],["#else",1403618],["} else {",1656484],["#else",3149302],["} else {",3674043],["else",8709424],["# else",538742]],"useCount":32846183},{"word":"empty","context":[["if (targets.empty())",4840],["if (str.empty())",5044],["if (!vchData.empty())",5732],["if (stack.empty())",6302],["if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())",7128],["if (name.empty())",11153],["/* empty */",11238],["if (vNodes.empty())",12429],["if (!vRecv.empty())",12542],["if (!unknown_fields().empty()) {",26622]],"useCount":3105677},{"word":"enable","context":[["/* enable apply button when data modified */",2107],["* @param[in] lp        low power enable flag",8042],["if (enable)",7028],["// and enable it by default or not. Try to enable it, if possible.",3639],["// and enable it by default or not. Try to enable it, if possible.",3639],["* cond_resched_softirq() will enable bhs before scheduling.",3522],["uint8_t enable;",3112],["u32 enable;",2775],["kernel_map_pages(struct page *page, int numpages, int enable) {}",2246],["extern void kernel_map_pages(struct page *page, int numpages, int enable);",2113]],"useCount":1211112},{"word":"enabled","context":[["bool enabled;",9335],["if (enabled)",4296],["ui->deleteButton->setEnabled(enabled);",2976],["int enabled;",2961],["void SendCoinsEntry::setRemoveEnabled(bool enabled)",2827],["/* Context switch must be unlocked if interrupts are to be enabled */",2421],["enabled = true;",2110],["// Validate input, set Ok button to enabled when acceptable",2233],["enabled = false;",2305],["if (enabled) {",2335]],"useCount":1040096},{"word":"end","context":[["} // end namespace itk",12696],["@end",1161702],["} /* end namespace */",12865],["end:",13683],["///#end",14189],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["if (mi == mapBlockIndex.end())",18521],["} //end if",22187],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["goto end;",38378]],"useCount":8588393},{"word":"endif","context":[["#endif /* __cplusplus */",61093],["# endif",49936],["#   endif",51537],["#endif",13075620],["#endif",5763262],["#endif",1357637],["#endif",419255],["#endif",98700],["#  endif",188725],["# endif",751355]],"useCount":26869893},{"word":"endl","context":[["cout << endl;",62961],["<< std::endl;",11328],["cout << endl;",12927],["using std::endl;",16869],["<< endl;",18717],["<< endl;",21299],["<< endl;",34833],["std::cout << std::endl;",38943],["<< std::endl;",39140],["<< std::endl;",48560]],"useCount":2316379},{"word":"entries","context":[["SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());",9629],["0x0000,          // number of entries",4920],["// (keeping in mind that addnode entries can have many IPs if fNameLookup)",3611],["// Tally internal accounting entries",3572],["if(ui->entries->count() == 1)",3322],["// remove real entries and check existence loot",3265],["SendCoinsEntry *first = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(0)->widget());",3221],["\" or address book entries might be missing or incorrect.\"));",2724],["log.GetEntries(&entries);",2654],["for(int i = 0; i < ui->entries->count(); ++i)",10076]],"useCount":733127},{"word":"entry","context":[["uint32 entry;",4571],["entry->Close();",7832],["SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());",9629],["if(entry)",10817],["uint32 entry = fields[0].GetUInt32();",11272],["if (!entry)",11505],["WalletTxToJSON(wtx, entry);",11987],["ret.push_back(entry);",12213],["Object entry;",21960],["return entry;",15007]],"useCount":3024087},{"word":"enum","context":[["typedef enum",196175],["typedef enum {",305538],["enum",124323],["enum",37760],["enum {",30017],["enum Spells",25018],["enum Events",13498],["enum Type {",11660],["enum { VMType = VM::VM1 };",10928],["enum {",453352]],"useCount":4770130},{"word":"env","context":[["return RegisterNativesImpl(env);",4083],["if( !type_engine_import_mfun( env, func ) ) goto error;",4987],["* @param env pointer to environment struct",11588],["JNIEnv* env = AttachCurrentThread();",11206],["LocalContext env;",7918],["JNIEnv* env,",7503],["JNIEnv* env = base::android::AttachCurrentThread();",6474],["const axutil_env_t *env);",5850],["const axutil_env_t *env,",5570],["v8::HandleScope scope(env->GetIsolate());",5366]],"useCount":1138632},{"word":"erase","context":[["mapAlreadyAskedFor.erase(inv);",9443],["porphan->setDependsOn.erase(hash);",3847],["mapOrphanBlocksByPrev.erase(hashPrev);",3802],["vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());",3752],["mapNextTx.erase(txin.prevout);",3663],["m_spells.erase(itr);",3588],["mapTx.erase(hash);",3552],["mapOrphanBlocks.erase(pblockOrphan->GetHash());",3467],["setpwalletRegistered.erase(pwalletIn);",3466],["pto->mapAskFor.erase(pto->mapAskFor.begin());",4132]],"useCount":732058},{"word":"err","context":[["goto err;",8050],["goto err;",108091],["return err;",9303],["if (err)",10765],["return err;",10855],["int err;",11024],["if (err != DB_SUCCESS) {",13596],["return(err);",23149],["return err;",48212],["err:",24489]],"useCount":1547163},{"word":"errno","context":[["fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);",3617],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626],["#include <errno.h>",31818],["#include <errno.h>",21081],["#include <linux/errno.h>",16778],["errno = 0;",12912],["errno = EINVAL;",8016],["errno = 0;",6346],["#include <errno.h>",40603]],"useCount":621779},{"word":"error","context":[["error = true;",19930],["int error;",27021],["if (error)",28517],["*  @return status, EC_Normal if successful, an error code otherwise",30879],["goto error;",32759],["return soap->error;",32877],["return error;",33434],["DBUG_RETURN(error);",36404],["goto error;",43132],["return error;",42746]],"useCount":6840145},{"word":"errors","context":[["// TODO: Actually handle errors",3507],["des->errors += 1;",3419],["#define PF_MCE_PROCESS  0x00000080      /* process policy on mce errors */",3391],["errors::InvalidArgument(",3362],["// in erroneous results and/or in compilation errors. Instead of using this function use the",3258],["// TODO: receive errors and debug messages through ClientModel",3093],["// unspecified (HTTP errors and contents of 'error').",3455],["// Report errors from network/worker thread",3472],["// Parse id now so errors from here on will have the id",3689],["obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));",6423]],"useCount":602753},{"word":"event","context":[["if (event->type() == QEvent::KeyPress) {",7132],["event.Skip();",22524],["event->accept();",21507],["pEventData:      pointer to the event information structure",17098],["event->ignore();",13237],["event->acceptProposedAction();",11386],["return QDialog::eventFilter(object, event);",7596],["if(event->mimeData()->hasUrls())",6774],["QKeyEvent *ke = static_cast<QKeyEvent *>(event);",6604],["Q_UNUSED(event);",5428]],"useCount":3373679},{"word":"events","context":[["#include \"events.h\"",2077],["events.Update(diff);",27578],["while (uint32 eventId = events.ExecuteEvent())",23219],["events.Reset();",16171],["EventMap events;",12291],["#include \"ui/events/event.h\"",4320],["#define JOBCTL_LISTENING_BIT\t22\t/* ptracer is listening for events */",2492],["#include \"ui/events/event_utils.h\"",2399],["#include \"core/events/Event.h\"",1956],["events.PopEvent();",1933]],"useCount":1091991},{"word":"example","context":[["For example:",1610],["For example:",1626],["* the read or for example on x86 they can be still implemented as a",1866],["For example:",1991],["* @example",2187],["\"Host: www.example.org\\r\\n\"",2559],["* For example:",2719],["\"  -lang=<lang>           \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +",2895],["* tasks can access tsk->flags in readonly mode for example",3518],["* example:",3726]],"useCount":696658},{"word":"exception","context":[["** In addition, as a special exception, Nokia gives you certain additional",40703],["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, Nokia gives you certain additional",37705],["** In addition, as a special exception, Digia gives you certain additional",37026],["catch (std::exception& e) {",34755],["catch (std::exception& e)",25163],["catch( std::exception& ex ) {",24333],["catch (std::exception &e) {",18854],["#include <exception>",17731],["/* Raise an exception if the arguments couldn't be parsed. */",13073]],"useCount":1429279},{"word":"exists","context":[["// This file is not part of the Qt API.  It exists purely as an",15375],["if (boost::filesystem::exists(pathDebug))",3185],["if (mempool.exists(hash))",3319],["// get the wallet transaction with the given hash (if it exists)",3421],["if (!mempool.exists(prevout.hash))",3708],["// If the shortcut exists already, remove it for updating",3297],["such a type exists and the standard includes do not define it. */",3754],["* If a daeMetaElement already exists it will return that instead of creating a new one.",6026],["// This file is not part of the Qt API.  It exists for the convenience",6286],["return boost::filesystem::exists(StartupShortcutPath());",3176]],"useCount":589172},{"word":"exit","context":[["exit(1);",45816],["exit(EXIT_FAILURE);",12030],["/* function exit code */",15158],["exit(0);",15233],["goto exit;",22632],["exit(EXIT_FAILURE);",30970],["exit(-1);",36643],["exit(0);",59079],["exit(___);}",112271],["exit(1);",138148]],"useCount":1112144},{"word":"expected","context":[["EXPECT_EQ(0, memcmp(&expected, commands_, sizeof(expected)));",7083],["ASSERT_EQUALS(expected, tok(code));",2627],["// On other operating systems, the expected action is to print the message to the console.",3153],["CHECK_EQUAL( expected, actual )",3429],["*          'break' will not work as expected - use goto instead.",3531],["/* Check response is as expected */",3597],["throw runtime_error(\"expected reply to have result, error and id properties\");",3616],["EXPECT_EQ(0, memcmp(&expected, commands_, sizeof(expected)));",7083],["Cmds expected;",7084],["throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");",2425]],"useCount":793073},{"word":"expression","context":[["* @condition: a C expression for the event to wait for",2360],["// <expression> if [statements] [else [statements]] endif",1013],["Expression* callee = expr->expression();",1046],["update();\t\t\t\t\t// Store expression",1089],["accept(expression, visitor);",1289],["// \\param rhs The right-hand side multiplication expression to be assigned.",1303],["if (expression)",1410],["ExpressionNode *expression;",1476],["/// By default, performs semantic analysis to build the new expression.",1658],["// optimized evaluation of expression templates. Calling this function explicitly might result",3424]],"useCount":625362},{"word":"extension","context":[["if (!extension)",4604],["#include \"extensions/common/extension.h\"",8119],["extension,",2365],["return extension;",2715],["const extensions::Extension* extension =",2826],["const Extension* extension) {",3214],["ASSERT_TRUE(extension);",4903],["#include \"chrome/common/extensions/extension.h\"",5421],["const Extension* extension =",6481],["const Extension* extension,",6573]],"useCount":824639},{"word":"extensions","context":[["#include \"extensions/common/constants.h\"",4882],["namespace extensions {",18659],["}  // namespace extensions",18041],["namespace extensions {",14514],["#include \"chrome/browser/extensions/extension_service.h\"",10396],["}  // namespace extensions",9618],["#include \"extensions/common/extension.h\"",8119],["#include \"chrome/common/extensions/extension.h\"",5421],["#include \"extensions/browser/extension_system.h\"",5284],["#include \"extensions/browser/extension_registry.h\"",5055]],"useCount":779103},{"word":"extern","context":[["extern \"C\"",10841],["extern \"C\" {",358652],["extern \"C\" {",51113],["extern void",47548],["extern \"C\"",42637],["extern \"C\"",40418],["extern int",35385],["extern \"C\" {",19942],["extern",15744],["extern int *a;",12600]],"useCount":12139041},{"word":"f","context":[["* \\f[",5538],["fclose(f);",28454],["return f;",15302],["f.close();",14563],["case 'f':",12074],["::xml_schema::flags f,",10098],["check(\"void f() {\\n\"",6771],["if (!f)",6540],["const Tp diff = f - f0;",5761],["* \\f]",5621]],"useCount":3525082},{"word":"fail","context":[["// This can fail if a duplicate of this transaction was in a chain that got",2075],["goto fail;",2611],["fail:",57662],["fail:",42267],["goto fail;",17623],["fail:",14198],["++fail;",3534],["// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options",3423],["// this call is allowed to fail",3348],["goto fail;",3339]],"useCount":579829},{"word":"failed","context":[["return error(\"LoadBlockIndex() : writing genesis block to disk failed\");",3896],["QMessageBox::critical(this, tr(\"Wallet encryption failed\"),",12277],["printf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",",4161],["if (enter.failed())",4215],["return error(\"SetBestChain() : TxnCommit failed\");",4230],["goto failed;",4588],["ASSERT_TRUE(SetupSync()) << \"SetupSync() failed.\";",5405],["failed = true;",5419],["CLog::Log(LOGERROR, \"%s failed\", __FUNCTION__);",5495],["throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");",7751]],"useCount":1279152},{"word":"failure","context":[["failure:",7700],["/* success or failure */",3571],["*              none-zero failure code",3815],["catch (std::ios_base::failure& e)",3893],["failure:(void (^)(NSError*))failure;",4643],["failure:(void (^)(NSError*))failure;",4643],["// Output : Returns true on success, false on failure.",4730],["#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure",5974],["* Returns: 0 on success, -1 on failure",6340],["goto failure;",2815]],"useCount":637253},{"word":"false","context":[["return false;",6375924],["return false;",1231778],["false,",30152],["return false;",33446],["assert(false);",34611],["false,",36924],["false);",40861],["bool found = false;",52111],["return false;",572844],["return false;",188848]],"useCount":21781682},{"word":"fd","context":[["fclose(fd);",3334],["int fd;",19694],["int fd;",4031],["::close(fd);",4133],["return fd;",4233],["if (fd < 0) {",4288],["int fd;",6722],["close(fd);",8184],["close(fd);",17636],["if (fd < 0) {",3193]],"useCount":814444},{"word":"field","context":[["form.fields.push_back(field);",18192],["FormFieldData field;",6495],["* NOTE: this field is variable length. (Allocated dynamically",6331],["}\tfield;",5543],["} field;",5276],["if (field < basedesc->getFieldCount(object))",4959],["field -= basedesc->getFieldCount(object);",4959],["field = rec_get_nth_field_old(",3713],["field->set_notnull();",3614],["* Bits in flags field of signal_struct.",3522]],"useCount":3001841},{"word":"fields","context":[["Field *fields = result->Fetch();",30604],["Field* fields = result->Fetch();",94858],["/* Runtime fields. */",3528],["uint32 quest_id = fields[0].GetUInt32();",3586],["// The following are defines for the bit fields in the GPIO_PCTL register for",3783],["fields = result->Fetch();",4274],["for (f_iter = fields.begin(); f_iter != fields.end(); ++f_iter) {",5142],["for (f_iter = fields.begin(); f_iter != fields.end(); ++f_iter) {",5142],["uint32 entry = fields[0].GetUInt32();",11272],["form.fields.push_back(field);",18192]],"useCount":2525749},{"word":"file","context":[["** If you have questions regarding the use of this file, please contact",34088],["fclose(file);",38427],["* \\file",39437],["* This file is part of the LibreOffice project.",39451],["* @file",42298],["// with this library; see the file COPYING3.  If not see",42545],["file.close();",42880],["** packaging of this file.  Please review the following information to",89527],["** packaging of this file.  Please review the following information to",101077],["/** @file",32561]],"useCount":10495471},{"word":"filename","context":[["testSimplify(reporter, path, filename);",5433],["return filename;",4123],["const char *filename,",3798],["std::string filename;",3660],["char *filename;",3635],["QFile file(filename);",3534],["\"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");",3152],["std::string filename;",2915],["testPathOp(reporter, path1, path2, (SkPathOp) 2, filename);",2759],["#include <wx/filename.h>",2449]],"useCount":1030215},{"word":"files","context":[["// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see",3926],["#include \"base/files/file_path.h\"",21970],["/* For IDL files that don't want to include root IDL files. */",15792],["/* For IDL files that don't want to include root IDL files. */",15792],["#include \"base/files/file_util.h\"",13367],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["#include \"base/files/file_path.h\"",9208],["#include \"base/files/scoped_temp_dir.h\"",8382],["/* Define to 1 if you have the ANSI C header files. */",7815],["// stdafx.h : include file for standard system include files,",5614]],"useCount":1203220},{"word":"filter","context":[["// do this before starting client thread, to filter out",3509],["/* coredump filter bits */",3483],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["// Install event filter for up and down arrow",3094],["// TODO: make it possible to filter out categories (esp debug messages when implemented)",3092],["QString result = QFileDialog::getSaveFileName(parent, caption, myDir, filter, &selectedFilter);",2902],["filter->Update();",2803],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["const QString &filter,",3794]],"useCount":1026328},{"word":"find","context":[["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);",3693],["strHelp = strHelp.substr(0, strHelp.find('\\n'));",3735],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);",3784],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);",3786],["map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);",4073],["SkillStatusMap::const_iterator itr = mSkillStatus.find(skill);",6646],["// converting string that we try to find to lower case",7722],["std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);",9186],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620]],"useCount":1947798},{"word":"first","context":[["first = false;",18067],["bool first = true;",13930],["r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,",9458],["// Parse the account first so we don't generate a key if there's an error",8026],["first = false;",7867],["tag = p.first;",7357],["const CBitcoinAddress& address = item.first;",7025],["pindexNew->phashBlock = &((*mi).first);",6649],["if (pwalletMain->mapAddressBook.count(r.first))",6603],["bool first = true;",6406]],"useCount":4125228},{"word":"flag","context":[["* @param[in] lp        low power enable flag",8042],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["flag = true;",5046],["// push the result flag",4696],["if (flag)",4309],["static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)",3629],["static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)",3629],["static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)",3629],["static inline void set_tsk_thread_flag(struct task_struct *tsk, int flag)",3629],["flag = 1;",3683]],"useCount":1741245},{"word":"flags","context":[["unsigned int flags);",22376],["int flags);",11543],["u8 flags;",12429],["0,       // flags",15452],["unsigned int flags;",16398],["u32 flags;",20163],["int flags;",21337],["uint32_t flags;",21389],["unsigned long flags;",38491],["PyBindGenWrapperFlags flags:8;",61402]],"useCount":4211522},{"word":"float","context":[["float *out = ZOUT(0);",6382],["float comulativeperc = 0;",7142],["float x, y, z;",29528],["data << float(0);",10425],["float x;",9735],["float y;",9594],["float",8579],["#include <float.h>",7813],["#include <float.h>",7634],["void SpellCast(float val)",7149]],"useCount":6086061},{"word":"fmt","context":[["fmt::throw_exception(\"Unimplemented\" HERE);",2383],["va_start(args, fmt);",7089],["const char *fmt, ...);",4581],["va_start(ap, fmt);",4292],["va_start(args, fmt);",2572],["va_start(ap, fmt);",2017],["const char *fmt);",1980],["const char *fmt, ...)",1925],["id->idInsFmt(fmt);",1787],["void warn_alloc_failed(gfp_t gfp_mask, int order, const char *fmt, ...);",1528]],"useCount":649589},{"word":"following","context":[["* furnished to do so, subject to the following conditions:",15849],["//  furnished to do so, subject to the following conditions:",12170],["*    must display the following acknowledgement:",20377],["// furnished to do so, subject to the following conditions:",28575],["furnished to do so, subject to the following conditions:",29897],["* furnished to do so, subject to the following conditions:",35669],["furnished to do so, subject to the following conditions:",45324],["** packaging of this file.  Please review the following information to",89527],["** packaging of this file.  Please review the following information to",101077],["* the following conditions:",11284]],"useCount":2015297},{"word":"font","context":[["\"td.message { font-family: Monospace; font-size: 12px; } \"",2744],["return font;",7380],["QFont font;",4870],["font.setStyleHint(QFont::TypeWriter);",3429],["QFont font(\"Monospace\");",3270],["font.setBold(true);",3110],["QFont font;",2828],["\"td.message { font-family: Monospace; font-size: 12px; } \"",2744],["#include \"font.h\"",1920],["#include \"ui/gfx/font.h\"",1643]],"useCount":662486},{"word":"foo","context":[["foo();",7740],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["\"foo.exe\",",4239],["* @param strArg Argument to get (e.g. \"-foo\")",3833],["check(\"void foo()\\n\"",3728],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["// interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)",3084]],"useCount":673850},{"word":"for","context":[["for (;;) {",44406],["for (;;)",44019],["for more details.",29813],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920],["* for more details.",26128],["for (;;) {",24054],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (unsigned int i = 0; i < vin.size(); i++)",21730],["/* Use the code below as a template for the implementation class for this interface. */",19991],["/* Use the code below as a template for the implementation class for this interface. */",19991]],"useCount":38695920},{"word":"form","context":[["** information use the contact form at https://www.qt.io/contact-us.",9410],["** use the contact form at http://www.qt.io/contact-us.",8188],["** use the contact form at http://www.qt.io/contact-us.",9626],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** use the contact form at http://qt.digia.com/contact-us.",34423],["*     * Redistributions in binary form must reproduce the above",27890],["*     * Redistributions in binary form must reproduce the above",18845],["form.fields.push_back(field);",18192],["//     * Redistributions in binary form must reproduce the above",15332],["//     * Redistributions in binary form must reproduce the above",13855]],"useCount":933713},{"word":"format","context":[["#include <boost/format.hpp>",5734],["va_start(args, format);",5757],["va_start(ap, format);",5517],["// Message format",4131],["__attribute__ ((format (printf, 2, 3)));",3924],["return format;",3885],["// xgettext: no-c-format",3850],["switch (format) {",3845],["GLenum format,",3746],["switch (format)",3499]],"useCount":2064892},{"word":"forms","context":[["// Redistribution and use in source and binary forms, with or without",19804],["*  Redistribution and use in source and binary forms, with or without",14031],["* Redistribution and use in source and binary forms, with or without",251058],["* Redistribution and use in source and binary forms, with or without",88602],["// Redistribution and use in source and binary forms, with or without",42441],["Redistribution and use in source and binary forms, with or without",40107],["* Redistribution and use in source and binary forms, with or without modification,",24360],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["* Redistribution and use in source and binary forms, with or without",17579]],"useCount":755491},{"word":"found","context":[["found = true;",9681],["bool found = false;",9167],["return found;",11571],["if (found)",12133],["*  be found in the AUTHORS file in the root of the source tree.",13737],["*  be found in the AUTHORS file in the root of the source tree.",14568],["if (!found)",23883],["bool found = false;",52111],["if (!found) {",8045],["found = true;",62195]],"useCount":1711892},{"word":"fp","context":[["fclose(fp);",35973],["fgets(s,MAXLINE,fp);",2747],["FILE *fp;",8971],["fclose(fp);",5733],["fprintf(fp, \"\\n\");",3429],["if (!fp)",3376],["fclose( fp );",3347],["fclose(fp);",3113],["forAll(f, fp)",2956],["if (fp == NULL) {",2822]],"useCount":632605},{"word":"fprintf","context":[["fprintf(stderr,",10996],["fprintf(stderr,",33311],["fprintf(file, \"%d\\n\", pid);",3466],["fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);",3617],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626],["fprintf(stdout, \"%s\", strUsage.c_str());",3682],["fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());",3802],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["fprintf(stderr, \"\\n\");",5432],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309]],"useCount":702893},{"word":"frame","context":[["* task), SP is the stack pointer of the first frame that should be shown in the back",3529],["#include \"core/frame/FrameView.h\"",3767],["LayerTreeHostImpl::FrameData frame;",3953],["host_impl_->DidDrawAllLayers(frame);",4132],["return frame;",5213],["* @len: length of the frame data",5269],["#include \"core/frame/LocalFrame.h\"",5776],["if (!frame)",8353],["* @fc: frame control bytes in little-endian byteorder",9080],["#include \"core/frame/Settings.h\"",3408]],"useCount":2312165},{"word":"free","context":[["// Continuously rate-limit free transactions",3849],["obj1.free();",14639],["obj2.free();",10509],["free(buf);",8097],["free(buffer);",6696],["boost::thread t(runCommand, strCmd); // thread runs free",6177],["free(data);",5401],["the PATENT CLAIMS, a non-exclusive, no-charge, royalty-free,",4293],["*    FreeRTOS provides completely free yet professionally developed,    *",4135],["obj.free();",4119]],"useCount":1232338},{"word":"friend","context":[["friend class boost::serialization::access;",4586],["friend bool operator==(const CTransaction& a, const CTransaction& b)",3358],["friend bool operator!=(const CTransaction& a, const CTransaction& b)",3357],["friend bool operator==(const CTxIn& a, const CTxIn& b)",3277],["friend bool operator==(const CTxOut& a, const CTxOut& b)",3277],["friend bool operator!=(const CTxOut& a, const CTxOut& b)",3277],["friend bool operator!=(const CTxIn& a, const CTxIn& b)",3277],["friend bool operator==(const COutPoint& a, const COutPoint& b)",3275],["friend bool operator!=(const COutPoint& a, const COutPoint& b)",3275],["friend bool operator<(const COutPoint& a, const COutPoint& b)",3275]],"useCount":639659},{"word":"from","context":[["/* inherits documentation from base class */",12392],["MergeFrom(from);",41344],["if (&from == this) return;",27190],["GOOGLE_CHECK_NE(&from, this);",18956],["CopyFrom(from);",16170],["void MergeFrom(const ::google::protobuf::Message& from);",14317],["void CopyFrom(const ::google::protobuf::Message& from);",14317],["&from);",12844],["::google::protobuf::internal::ReflectionOps::Merge(from, this);",12833],["#error \"cannot be used with the include files from this version of Qt.\"",12708]],"useCount":8519718},{"word":"full","context":[["// they must either disconnect and retry or request the full block.",2033],["// Go back the full period unless it's the first retarget after genesis. Code courtesy of Art Forz",2133],["* mappings of /dev/null, all processes see the same page full of",2299],["// Raise the price as the block approaches full",2375],["strprintf(\"no full public key for address %s\",ks.c_str()));",2991],["* Some day this will be a full-fledged user tracking system..",3559],["\"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");",4857],["// Don't bother if send buffer is too full to respond anyway",6084],["/* Define to the full name and version of this package. */",7956],["/* Define to the full name of this package. */",7986]],"useCount":614184},{"word":"func","context":[["if( !type_engine_import_mfun( env, func ) ) goto error;",4987],["return func;",1217],["} func;",1267],["func();",1360],["void **func = reinterpret_cast<void **>(_a[1]);",1404],["#  define _GL_CXXALIASWARN1_2(func,rettype,parameters_and_attributes,namespace) \\",1491],["#  define _GL_CXXALIASWARN_2(func,namespace) \\",1491],["func, off1, off2, post},",1680],["func();",2071],["return func;",2624]],"useCount":659344},{"word":"function","context":[["@return Result of the function call",25364],["#include <boost/function.hpp>",4230],["/* function exit code */",15158],["//\t@function:",14776],["@function",10386],["// ClassWizard generated virtual function overrides",9856],["function pointer will be called */",6857],["/*! NIFLIB_HIDDEN function.  For internal use only. */",6805],["* function.",6595],["PyErr_SetString(PyExc_TypeError, \"function/method should return None\");",4408]],"useCount":5215001},{"word":"functions","context":[["/* Linker adds these: start and end of __sched functions */",3477],["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989],["/* Exported functions ------------------------------------------------------- */",13364],["// Generated message map functions",10517],["/* Exported functions --------------------------------------------------------*/",8027],["// dispatching functions",3916],["// These functions dispatch to one or all registered wallets",3890],["/* Attach to any functions which should be ignored in wchan output. */",3528],["/* Is this address in the __sched functions? */",3528]],"useCount":1691680},{"word":"g","context":[["* @param strArg Argument to get (e.g. \"-foo\")",3833],["return g;",3805],["g.wait_for_all();",3829],["ImGuiState& g = *GImGui;",15616],["* @param component_id ID of this component (e.g. 200 for IMU)",11697],["ImGuiContext& g = *GImGui;",10742],["case 'g':",5464],["namespace g{",5261],["const ImGuiStyle& style = g.Style;",4515],["SolarMutexGuard g;",4249]],"useCount":2195256},{"word":"generated","context":[["* WARNING: This is generated code. Modify at your own risk and without support.",15951],["// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-",9982],["// ClassWizard generated virtual function overrides",9856],["// This file is generated by WOK (CPPExt).",7643],["* This header is generated by class-dump-z 0.2b.",7138],["// Microsoft Visual C++ generated include file.",6166],["// works are solely in the form of machine-executable object code generated by",5124],["/* DO NOT EDIT THIS FILE - it is machine generated */",4858],["***   structures, and macros generated from the original header, and thus,",4665],["***   This header was automatically generated from a Linux kernel header",4643]],"useCount":678207},{"word":"get","context":[["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["if (this->eventHandler_.get() != NULL) {",9967],["*  @param  pos    index of the value to get (0..vm-1), -1 for all components",7990],["if (NULL == m_pDB.get()) return false;",7875],["if (NULL == m_pDS.get()) return false;",6979],["new HttpNetworkTransaction(DEFAULT_PRIORITY, session.get()));",6355],["return a.get<0>() < b.get<0>();",5461],["return a.get<0>() < b.get<0>();",5461],["return a.get<1>() < b.get<1>();",5461],["// get this",21183]],"useCount":4790855},{"word":"gfx","context":[["namespace gfx {",15986],["#include \"ui/gfx/image/image_skia.h\"",3883],["#include \"ui/gfx/rect.h\"",3939],["gfx::Point3F(),",3981],["#include \"ui/gfx/rect.h\"",4688],["#include \"ui/gfx/image/image.h\"",5386],["#include \"ui/gfx/screen.h\"",5832],["#include \"ui/gfx/native_widget_types.h\"",6293],["#include \"ui/gfx/canvas.h\"",7529],["gfx::PointF(),",10680]],"useCount":1519547},{"word":"given","context":[["\"Sets the account associated with the given address.\");",3160],["* If this package is used in a product, Eric Young should be given attribution",3711],["// Seed nodes are given a random 'last seen time' of between one and two",3671],["/** check whether a given address is potentially local */",3638],["/** check whether a given address is in a network we can probably connect to */",3638],["// Find all addresses that have the given account",3585],["// make sure all wallets know about the given transaction, in the given block",3435],["// make sure all wallets know about the given transaction, in the given block",3435],["// erases transaction with the given hash from all wallets",3415],["// get the wallet transaction with the given hash (if it exists)",3421]],"useCount":1633054},{"word":"gl","context":[["#include <OpenGL/gl.h>",1753],["return gl::Error(GL_NO_ERROR);",6231],["namespace gl",1873],["return gl::error(GL_INVALID_OPERATION);",1942],["#include \"ui/gl/gl_implementation.h\"",1997],["return gl::error(GL_OUT_OF_MEMORY);",2109],["gl::Context *context = gl::getNonLostContext();",3953],["gl::Context *context = gl::getNonLostContext();",3953],["#include <GL/gl.h>",4629],["#include <GL/gl.h>",5808]],"useCount":1336941},{"word":"global","context":[["// Since the order of destruction of static/global objects is undefined,",2304],["// Need a global reference for the notifications to find the GUI",2976],["pvosGCtx:       pointer to the global vos context; a handle to TL's",2380],["#include \"global.hpp\"",2610],["/* /sys/devices/system/cpu/cpufreq: entry point for global variables */",2771],["// Subscribe to global signals from core",3215],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["* task_xid_nr()     : global id, i.e. the id seen from the init namespace;",3475],["#include \"global.h\"",5299],["#include \"global.h\"",5913]],"useCount":780290},{"word":"go","context":[["go->SetGoState(GO_STATE_ACTIVE);",2747],["void OnGameObjectCreate(GameObject* go)",2756],["delete go;",2899],["// Replies from executor object must go to this object",3099],["// Requests from this object must go to executor",3100],["bool OnGossipHello(Player* player, GameObject* go)",3115],["//  SuperTuxKart - a fun racing game with go-kart",3165],["// \"Never go to sea with two chronometers; take one or three.\"",3270],["if (!go)",4440],["switch (go->GetEntry())",6095]],"useCount":662583},{"word":"google","context":[["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641],["DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<",22891],[": ::google::protobuf::Message() {",17525],["target = ::google::protobuf::internal::WireFormatLite::",17049],["::google::protobuf::io::CodedInputStream* input);",16013],["::google::protobuf::io::CodedOutputStream* output) const;",16013],["::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(",15588],["DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(",14825],["::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(",14660],["static const ::google::protobuf::Descriptor* descriptor();",14423]],"useCount":1450341},{"word":"goto","context":[["goto err;",108091],["goto error;",43132],["goto out;",22029],["goto exit;",22632],["goto handle_unusual;",25465],["goto is_not_a_corner;",27540],["goto error;",32759],["goto end;",38378],["goto Exit;",42024],["goto handle_uninterpreted;",27072]],"useCount":1754682},{"word":"group","context":[["// group update",6703],["if (!group)",10251],["if (group)",7005],["/* rq \"owned\" by this entity/group: */",6945],["for (GroupReference* itr = group->GetFirstMember(); itr != NULL; itr = itr->next())",5841],["//  3. Neither the names of the Blaze development group nor the names of its contributors",5353],["//  3. Neither the names of the Blaze development group nor the names of its contributors",4376],["if (Group* group = GetGroup())",4220],["Group* group = GetPlayer()->GetGroup();",3926],["if (Group* group = player->GetGroup())",3899]],"useCount":1783105},{"word":"guid","context":[["stmt->setUInt64(0, guid);",4130],["if (!guid)",4290],["SendLootRelease(guid);",4523],["stmt->setUInt32(0, GUID_LOPART(guid));",5584],["recvData >> guid;",6428],["data << uint64(guid);",8924],["recv_data >> guid;",13330],["ObjectGuid guid;",14286],["stmt->setUInt32(0, guid);",15711],["uint64 guid;",21413]],"useCount":1197338},{"word":"h","context":[["#import <UIKit/UIKit.h>",296504],["#import <Foundation/Foundation.h>",247052],["#include \"config.h\"",116842],["#include \"stdafx.h\"",117505],["#include <stdlib.h>",120826],["#include <string.h>",129198],["#include <stdlib.h>",147008],["#include <stdio.h>",149461],["#include <stdio.h>",182584],["#include <stdint.h>",190627]],"useCount":43156349},{"word":"handle","context":[["__le16   handle;",12344],["\\param  hHal - The handle returned by macOpen.",6549],["\\param hHal - The handle returned by macOpen.",6025],["return handle;",5273],["THD*\t\t\t\tthd,\t/*!< in: thread handle */",4683],["uint32_t handle;",3866],["* @param  __HANDLE__: specifies the RTC handle.",4422],["uint16_t handle;",4200],["__u32 handle;",4054],["uint16_t\thandle;",3959]],"useCount":2108461},{"word":"handler","context":[["// TODO: Add your control notification handler code here",4538],["if (handler->HasLowerSecurity(target, 0))",3356],["Creature* creature = handler->getSelectedCreature();",3454],["if (handler->GetSession())",3714],["Player* target = handler->getSelectedPlayer();",4243],["handler->SendSysMessage(LANG_NO_CHAR_SELECTED);",5057],["handler->SendSysMessage(LANG_SELECT_CREATURE);",5224],["handler->SendSysMessage(LANG_BAD_VALUE);",5807],["Player* player = handler->GetSession()->GetPlayer();",6543],["handler->SetSentErrorMessage(true);",58615]],"useCount":1371596},{"word":"has","context":[["// As the program has not fully started yet, Shutdown() is possibly overkill.",3750],["#error \"(The moc has changed too much.)\"",12708],["// Find the last block the caller has in the main chain",8258],["* depending on how many CPUs the kernel has booted up with)",6331],["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["// Find the first block the caller has in the main chain",6162],["// URI has to be valid",5116],["throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");",5084],["req has returned PENDING as status; it delivers the status of sending",4605],["// send-big-orphans memory exhaustion attack. If a peer has a legitimate",4057]],"useCount":3443200},{"word":"hash","context":[["return(1 || funcname || hash || result7 || libp) ;",8600],["return hash;",9084],["std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);",9186],["BOOST_FOREACH(const uint256& hash, vHave)",9207],["uint256 hash = tx.GetHash();",25230],["@property(readonly) unsigned long long hash;",9463],["return hash;",11109],["if (mapBlockIndex.count(hash))",11277],["uint256 hash = GetHash();",12736],["uint256 hash;",14108]],"useCount":2065283},{"word":"have","context":[["//Return since we have no target",17729],["** If you have questions regarding the use of this file, please contact",34088],["** If you have questions regarding the use of this file, please contact",31367],["* or visit www.oracle.com if you need additional information or have any",11601],["/* Define to 1 if you have the <sys/types.h> header file. */",7968],["/* Define to 1 if you have the <unistd.h> header file. */",7819],["/* Define to 1 if you have the <string.h> header file. */",7916],["/* Define to 1 if you have the <stdlib.h> header file. */",7875],["/* Define to 1 if you have the <stdint.h> header file. */",7830],["@param[in] mapInputs\tMap of previous transactions that have outputs we're spending",9027]],"useCount":4682194},{"word":"head","context":[["head->qlen += list->qlen;",3026],["struct list_head *head)",2821],["*\t@head: the place to add it in the first list",2880],["struct sk_buff_head *head)",3129],["return head;",3313],["*\t@list: queue head",3636],["struct list_head *head);",3788],["struct list_head head;",3908],["* @head:\tthe head for your list.",7916],["* @head:\tthe head for your list.",7916]],"useCount":732926},{"word":"header","context":[["*        the peripheral initialization component header file",12514],["*        definition header file (<peripheral>_BASE_PTR) or the constant defined in",12514],["gpu::CommandHeader header;",11642],["cmd.header.command);",10780],["EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);",9690],["// Read header",8140],["/* Define to 1 if you have the <sys/types.h> header file. */",7968],["/* Define to 1 if you have the <string.h> header file. */",7916],["tHalMsgHeader header;",15229],["/* Define to 1 if you have the <stdlib.h> header file. */",7875]],"useCount":2135343},{"word":"height","context":[["int width, int height);",3898],["int width, int height) {",4333],["if (pos*2+1 < CalcTreeWidth(height-1))",5248],["GLsizei height,",5616],["int width, height;",6040],["uint32_t height;",6859],["int height;",13268],["return height;",4148],["GLsizei height,",3618],["int width, height;",4227]],"useCount":2311375},{"word":"here","context":[["// Note: not using straight sprintf here because we do NOT want",6536],["* here.",3336],["// TODO: Add your control notification handler code here",4538],["// Your implementation goes here",3994],["// Do this here so we don't have to critsect vNodes inside mapAddresses critsect.",3755],["// Parse id now so errors from here on will have the id",3689],["// you should add code here to check that the transaction does a",3642],["***   Any manual change here will be lost the next time this script will",3431],["// we don't need transactions here.",3357],["// TODO: Add your code here",3349]],"useCount":1641804},{"word":"host","context":[["if (!host)",2502],["\"  -bind=<addr>           \" + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +",1673],["// HTTP URI must be an absolute path, relative to current host",1698],["* Lockd stuffs a \"host\" pointer into this.",1717],["if (!host)",1810],["struct inode\t\t*host;\t\t/* owner: inode, block_device */",1895],["char *host;",1975],["//    Cannot handle this later, because bitcoin:// will cause Qt to see the part after // as host,",2020],["// Get local host IP",2733],["// Get local host ip",4731]],"useCount":1115383},{"word":"hpp","context":[["#include <boost/shared_ptr.hpp>",9326],["#include <boost/algorithm/string.hpp>",14486],["#include <boost/thread.hpp>",10650],["#include <boost/shared_ptr.hpp>",16476],["#include <boost/bind.hpp>",17854],["#include <boost/lexical_cast.hpp>",18387],["#include <boost/filesystem/fstream.hpp>",19471],["#include <boost/foreach.hpp>",26889],["#include <boost/test/unit_test.hpp>",27652],["#include <boost/filesystem.hpp>",33068]],"useCount":2396667},{"word":"hr","context":[["if ( FAILED(hr) )",9412],["if (FAILED(hr)) {",9351],["HRESULT hr = S_OK;",34998],["return hr;",11873],["return hr;",14157],["if (FAILED(hr)) {",16797],["if (SUCCEEDED(hr))",28364],["HRESULT hr;",33671],["return hr;",103613],["if (FAILED(hr))",44887]],"useCount":845743},{"word":"http","context":[["** Contact: http://www.qt-project.org/legal",46977],["*      http://xbmc.org",14709],["*  http://aws.amazon.com/apache2.0",19798],["*  http://aws.amazon.com/apache2.0",25389],["** Contact: http://www.qt-project.org/legal",40520],["** conditions see http://qt.digia.com/licensing.  For further information",30797],["** use the contact form at http://qt.digia.com/contact-us.",34423],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** use the contact form at http://qt.digia.com/contact-us.",36972],["XCSoar Glide Computer - http://www.xcsoar.org/",13904]],"useCount":2212751},{"word":"hxx","context":[["#include <vcl/settings.hxx>",3598],["#include <xsd/cxx/xml/dom/parsing-source.hxx>",2934],["#include <xsd/cxx/tree/error-handler.hxx>",3012],["#include <rtl/ustrbuf.hxx>",3092],["#include <osl/mutex.hxx>",3098],["#include <cppuhelper/supportsservice.hxx>",3308],["#include <vcl/msgbox.hxx>",3347],["#include <Foundation/Standard/Standard_Type.hxx>",3568],["#include <comphelper/processfactory.hxx>",5914],["#include <vcl/svapp.hxx>",6969]],"useCount":833480},{"word":"i","context":[["++i;",94420],["int i;",286007],["i++;",149379],["int i = 0;",93279],["return i;",71901],["int i;",58326],["int i;",47771],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920],["i = 0;",34810]],"useCount":39816201},{"word":"id","context":[["uint160 id;",6531],["int id;",33878],["memcpy(&id, &vchData[0], 20);",6533],["switch (id) {",6578],["unsigned int id;",7054],["uint32_t id;",7613],["int id;",9194],["- (id)description;",9931],["- (id)init;",22767],["return id;",23161]],"useCount":5603777},{"word":"idx","context":[["int idx = GetOrNewIndexForLocale(LocaleConstant(i));",4734],["int idx;",4194],["#define QT_MOC_LITERAL(idx, ofs, len) \\",4772],["idx = 0;",4960],["++idx;",5381],["int idx;",5443],["idx++;",10224],["return idx;",6233],["ExeVar idx = c_.FindOuterKeyOrUndef( \"this\" );",7848],["int idx = 0;",9923]],"useCount":1294313},{"word":"if","context":[["#if COCOS2D_DEBUG >= 1",163391],["#if 0",127651],["if (!result)",106673],["if (!UpdateVictim())",90853],["#if defined(OS_WIN)",80948],["if (result) { Py_DECREF(result); }",75633],["if (RT_FAILURE(rc))",68316],["if (RT_SUCCESS(rc))",67834],["#if 0",186286],["if (result)",64507]],"useCount":111196454},{"word":"ifdef","context":[["# ifdef machine_arch_type",432169],["#ifdef WIN32",145044],["#ifdef __cplusplus",735876],["#ifdef DEBUG",134100],["#ifdef _DEBUG",95296],["#ifdef _WIN32",88590],["#ifdef CONFIG_SMP",80734],["#ifdef __KERNEL__",79941],["#ifdef GL_GLEXT_PROTOTYPES",77481],["#ifdef COBJMACROS",62867]],"useCount":9813602},{"word":"ifndef","context":[["#ifndef __LANGUAGE_ASM__",102087],["#ifndef _MSC_VER",21199],["#ifndef NDEBUG",24344],["#ifndef DBUG_OFF",25313],["#ifndef PRODUCT",26249],["#ifndef TOLUA_RELEASE",30556],["#ifndef WIN32",38095],["#ifndef __ASSEMBLY__",46575],["#ifndef USED_FOR_TARGET",50992],["#ifndef NDEBUG",51568]],"useCount":6192781},{"word":"image","context":[["* Because the kernel adds some informative sections to a image of program at",2514],["if (image)",2471],["return image;",9240],["#include \"image.h\"",3318],["if (!image)",2668],["// Negative height means invert the image.",2811],["QImage image;",2829],["#include \"ui/gfx/image/image.h\"",5386],["#include \"ui/gfx/image/image_skia.h\"",3883],["#include \"ui/gfx/image/image.h\"",5386]],"useCount":1515971},{"word":"implementation","context":[["/* Use the code below as a template for the implementation class for this interface. */",19991],["/* End of implementation class template. */",19991],["// No implementation - assignment is unsupported.",9888],["* INET\t\tAn implementation of the TCP/IP protocol suite for the LINUX",5266],["// implementation",5099],["// Your implementation goes here",3994],["* The implementation was written so as to conform with Netscapes SSL.",3703],["* This package is an SSL implementation written",3692],["// peer might be an older or different implementation with",2940],["// Default implementation of QThread::run() simply spins up an event loop in the thread,",3095]],"useCount":830142},{"word":"import","context":[["#import <Foundation/NSObject.h>",4530],["@import Foundation;",7652],["#import <QuartzCore/QuartzCore.h>",4878],["#import <CoreLocation/CoreLocation.h>",4897],["#import <UIKit/UIKit.h>",296504],["#import <Foundation/Foundation.h>",247052],["#import <CoreData/CoreData.h>",10977],["#import <Cocoa/Cocoa.h>",40729],["#import \"NSObject.h\"",15505],["@import UIKit;",10291]],"useCount":1309617},{"word":"in","context":[["*    CarbonLib:        in CarbonLib 1.0 and later",29190],["/* [in] */ LCID lcid,",29579],["*    Mac OS X:         in version 10.0 and later",30128],["/* [annotation][in] */",35470],["Redistribution and use in source and binary forms, with or without",40107],["// Redistribution and use in source and binary forms, with or without",42441],["/* [in] */ REFIID riid,",45001],["++in;",68431],["* Redistribution and use in source and binary forms, with or without",88602],["* Redistribution and use in source and binary forms, with or without",251058]],"useCount":27373440},{"word":"include","context":[["#include <stdio.h>",149461],["#include <algorithm>",150071],["#include <map>",150644],["#include <vector>",163120],["#include <stdio.h>",182584],["#include <stdint.h>",190627],["#include <string>",194111],["#include <vector>",327681],["#include <iostream>",412655],["#include <string>",402553]],"useCount":51391893},{"word":"indent","context":[["indent();",5461],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["void PrintSelf(ostream& os, vtkIndent indent);",16395],["this->Superclass::PrintSelf(os,indent);",9433],["indent(out) <<",7583],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",7120],["* indent-tabs-mode: nil",6168],["/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */",5726],["/* -*- mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*- */",5579],["this->Superclass::PrintSelf(os, indent);",5555]],"useCount":667298},{"word":"index","context":[["index++;",25910],["dict_index_t*\tindex;",7495],["int index = 0;",23133],["return index;",17667],["int index;",15956],["int index;",15624],["index = 0;",13634],["++index;",12275],["if (!index.isValid())",8237],["*  @param  pos    index of the value to get (0..vm-1), -1 for all components",7990]],"useCount":6752168},{"word":"info","context":[["** Contact: Nokia Corporation (qt-info@nokia.com)",45228],["** Nokia at qt-info@nokia.com.",28466],["** Nokia at qt-info@nokia.com.",24043],["if(info.Length() != 0)",22780],["return info;",18395],["if(info.Length() != 1)",17077],["v8::Local<v8::Object> holder = info.Holder();",13394],["info.GetReturnValue().Set(Nan::New(r));",13344],["** Contact: Nokia Corporation (qt-info@nokia.com)",39062],["For the latest info, see http://www.ogre3d.org/",10372]],"useCount":4137969},{"word":"information","context":[["** packaging of this file.  Please review the following information to",101077],["** packaging of this file.  Please review the following information to",89527],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** conditions see http://qt.digia.com/licensing.  For further information",30797],["pEventData:      pointer to the event information structure",17098],["* or visit www.oracle.com if you need additional information or have any",11601],["/** Run-time type information (and related methods). */",10227],["* distributed with this work for additional information",9993],["* distributed with this work for additional information",9438],["** information use the contact form at https://www.qt.io/contact-us.",9410]],"useCount":1965785},{"word":"init","context":[["#include \"init.h\"",39639],["void init();",34205],["- (id)init;",22767],["#include <linux/init.h>",19161],["- (instancetype)init;",7605],["init();",6663],["virtual void init();",5655],["init.Launch();",5427],["init();",5352],["init();",47816]],"useCount":1139858},{"word":"inline","context":[["inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {",12966],["inline",183615],["inline",23088],["inline",23828],["static inline bool",25997],["inline bool",50904],["static inline",56722],["static inline int",70047],["inline void",72471],["static inline void",137167]],"useCount":7487339},{"word":"inode","context":[["struct inode *inode,",3496],["static inline int locks_verify_locked(struct inode *inode)",3407],["struct inode *inode,",3496],["struct inode vfs_inode;",3519],["static inline int break_lease(struct inode *inode, unsigned int mode)",3800],["static inline int break_lease(struct inode *inode, unsigned int mode)",3800],["i_size = inode->i_size;",3882],["mark_inode_dirty(inode);",4280],["struct inode;",4970],["inode->i_size = i_size;",5835]],"useCount":1519932},{"word":"input","context":[["::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);",6771],["::google::protobuf::io::CodedInputStream* input) {",14310],["::google::protobuf::io::CodedInputStream* input);",16013],["input, tag, mutable_unknown_fields()));",11299],["if (input->ExpectAtEnd()) goto success;",7042],["while ((tag = input->ReadTag()) != 0) {",6975],["if (input->ExpectAtEnd()) return true;",6673],["#include <linux/input.h>",5521],["* Validate input.",5415],["BOOST_FOREACH(Value& input, inputs)",4935]],"useCount":2649892},{"word":"insert","context":[["mapOrphanBlocks.insert(make_pair(hash, pblock2));",3795],["porphan->setDependsOn.insert(txin.prevout.hash);",3843],["if (pto->setAddrKnown.insert(addr).second)",3922],["if (pto->setInventoryKnown.insert(inv).second)",4016],["vInOutPoints.insert(txin.prevout);",4071],["mapMix.insert(make_pair(hashKey, pnode));",4101],["ret.insert(ret.end(), detail.begin(), detail.end());",4200],["setKeyPool.insert(nIndex);",4725],["// Microsoft Visual C++ will insert additional declarations immediately before the previous line.",8538],["setAddress.insert(address);",11810]],"useCount":1452665},{"word":"instance","context":[["if (instance)",37822],["* @return a daeElementRef referencing an instance of this object.",6032],["if (!instance)",10968],["return instance;",8727],["* @param instance module device instance",7413],["* @param instance module device instance",7413],["PP_Instance instance,",6446],["* Creates an instance of this class and returns a daeElementRef referencing it.",6032],["instance = creature->GetInstanceScript();",19110],["InstanceScript* instance;",24337]],"useCount":2038840},{"word":"instead","context":[["* to this process instead of 'init'. The service manager is",2363],["// Why base-58 instead of standard base-64 encoding?",2351],["// Please do not edit this file; modify original file instead.",7643],["* lists, we instead now tag pages as dirty/writeback in the radix tree.",2236],["* If a daeMetaElement already exists it will return that instead of creating a new one.",6026],["*          'break' will not work as expected - use goto instead.",3531],["* protect this instead of the siglock, because they really",3524],["// (when using width/height on an img, Qt uses nearest instead of linear interpolation)",3093],["\"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +",2919],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send trace/debug info to console instead of debug.log file\"),",2743]],"useCount":756620},{"word":"instr","context":[["CallCode(stub.GetCode(), RelocInfo::CODE_TARGET, instr);",2316],["Register input = ToRegister(instr->value());",3273],["LOperand* context = UseFixed(instr->context(), cp);",2509],["LOperand* value = UseRegisterAtStart(instr->value());",2493],["DCHECK(ToRegister(instr->context()).is(cp));",2339],[": LDeferredCode(codegen), instr_(instr) { }",2200],["LOperand* input = instr->value();",2190],["Register value = ToRegister(instr->value());",2164],["Register result = ToRegister(instr->result());",10177],["Register temp = ToRegister(instr->temp());",2160]],"useCount":699282},{"word":"int","context":[["int",156768],["int i;",286007],["int",212947],["int main(int argc, char *argv[])",49760],["int",129641],["int main()",124481],["int i = 0;",93279],["static inline int",70047],["int i;",58326],["int main() {",51500]],"useCount":61509482},{"word":"int32","context":[["void DoAction(int32 const action)",4021],["DataType: int32",21574],["OrigDataType: int32",17931],["int32 modifier = 0;",8534],["::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(",6862],["for (int32 i = 0; i < MAX_EFFECT_INDEX; ++i)",4875],["void DoAction(int32 action) override",3614],["int32 duration = m_spellInfo->GetDuration();",3374],["std::map<SpellGroup, int32> SameEffectSpellGroup;",2746],["int32 gain = 0;",2511]],"useCount":1547213},{"word":"int32_t","context":[["U_STABLE int32_t U_EXPORT2",3846],["int32_t",4399],["int32_t i;",5160],["* RETURN     : int32_t type of status",3643],["int32_t",3484],["int32_t",3392],["int32_t nBits;",3338],["uBits.nBits = htonl((int32_t)nBits);",3303],["int32_t status = 0;",2718],["int32_t rseqid = 0;",2488]],"useCount":1152290},{"word":"int64","context":[["int64 nNow = GetAdjustedTime();",5613],["int64 nStart = GetTimeMicros();",5877],["int64 nValueIn = 0;",6424],["static int64 nStart;",7396],["int64 nBalance = GetAccountBalance(strAccount, nMinDepth);",7774],["list<pair<CTxDestination, int64> > listReceived;",8253],["list<pair<CTxDestination, int64> > listSent;",8253],["int64 nStart = GetTime();",8475],["int64 nFees = 0;",8881],["int64 nAmount = 0;",10779]],"useCount":1012703},{"word":"int64_t","context":[["int64_t nValueIn = 0;",3477],["int64_t nStart = GetTimeMillis();",3983],["if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);",3151],["result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));",3192],["map<uint256, int64_t> setTxIndex;",3431],["result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));",3426],["result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));",3386],["int64_t nTotal = 0;",3329],["result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));",3335],["result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));",3384]],"useCount":1037284},{"word":"integer","context":[["integer, __LINE__);",1811],["* @return integer value indicating success/failure of the",2464],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",3284],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",3284],["*    a load-average precision of 10 bits integer + 11 bits fractional",3570],["integer *info);",4091],["* @param cmdLen Pointer to an integer that will hold the actual size of the command",1438],["* @i: integer value to add",1477],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",1408],["// CHECK-NEXT:          <key>file</key><integer>0</integer>",1408]],"useCount":878097},{"word":"interface","context":[["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["#else \t/* C style interface */",46283],["#endif \t/* C style interface */",46283],["@interface AppDelegate : UIResponder <UIApplicationDelegate>",28197],["/* Use this macro when declaring classes that implement this interface. */",20001],["/* Use the code below as a template for the implementation class for this interface. */",19991],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989],["@interface ViewController : UIViewController",16538],["#pragma interface",13599],["*\t\tinterface as the means of communication with the user level.",5266]],"useCount":1601666},{"word":"internal","context":[["internal::None, internal::None, internal::None, internal::None,",34304],["/*! \\internal",28486],["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641],["namespace internal {",32765],["internal::None, internal::None, internal::None, internal::None,",34304],["* @internal",24264],["internal::None, internal::None, internal::None, internal::None,",34304],["DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<",22891],["internal::None, internal::None, internal::None, internal::None,",34304],["\\internal",70931]],"useCount":2203516},{"word":"interrupt","context":[["detectShutdownThread->interrupt();",1586],["upnp_thread->interrupt();",3798],["#include <interrupt.h>",3381],["* @brief   This file contains the headers of the interrupt handlers.",3009],["#include <avr/interrupt.h>",2759],["* SMP rebalancing from interrupt is the only thing that cares",2394],["/* PHY Reset delay these values are based on a 1 ms Systick interrupt*/",1615],["#include <avr/interrupt.h>",1538],["#define PHY_MICR_INT_OE                 ((uint16_t)0x0001)  /*!< PHY Enable output interrupt events              */",1530],["#include <linux/interrupt.h>",19527]],"useCount":822852},{"word":"into","context":[["// Collect memory pool transactions into the block",3880],["* single lock above (split into XXX_lock if contention is an issue).",3503],["/** Used to marshal pointers into hashes for db storage. */",3420],["// BDB seems to have a bad habit of writing old data into",3548],["// which will get accepted into blocks. The redemption",3608],["// Collect transactions into block",3857],["// Don't accept it if it can't get into a block",4144],["***   call into the kernel available to libc.  It contains only constants,",4647],["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["* @param msg The MAVLink message to compress the data into",11697]],"useCount":2085772},{"word":"invalid","context":[["// Longer invalid proof-of-work chain",2481],["ASSERT_EQ(IterStatus(iter), \"(invalid)\");",2433],["// duplicate/expired/invalid-signature/whatever alerts",2940],["ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));",2973],["return false; // Refuse to parse invalid unit or empty string",3208],["return QString(); // Refuse to format invalid unit",3252],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// if we selected an invalid address, restart",3711],["assert(!\"GetWarnings() : invalid parameter\");",3888],["Nan::ThrowError(\"Array contents invalid.\");",5438]],"useCount":798560},{"word":"io","context":[["::google::protobuf::io::CodedOutputStream* output) const;",16013],["::google::protobuf::io::CodedInputStream* input);",16013],["::google::protobuf::io::CodedInputStream* input) {",14310],["::google::protobuf::io::CodedOutputStream* output) const {",14310],["#include <linux/io.h>",10310],["#include <asm/io.h>",9887],["** use the contact form at http://www.qt.io/contact-us.",9626],["** information use the contact form at https://www.qt.io/contact-us.",9410],["** and conditions see https://www.qt.io/terms-conditions. For further",9410],["** Contact: https://www.qt.io/licensing/",9298]],"useCount":645620},{"word":"iostream","context":[["#include <iostream.h>",2466],["#include <iostream>",412655],["#include <iostream>",112562],["#include <iostream>",80259],["#include <iostream>",19162],["#include<iostream>",17630],["#include <iostream>",6167],["virtual std::iostream& stream()",3504],["virtual std::iostream& stream() = 0;",3315],["#include<iostream>",2386]],"useCount":691655},{"word":"ip","context":[["acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));",6816],["struct in_addr ip;",5122],["// Get local host ip",4731],["if ((CNetAddr)pnode->addr == ip)",3698],["bool CNode::IsBanned(CNetAddr ip)",3691],["CNode* FindNode(const CNetAddr& ip)",3690],["bool ClientAllowed(const boost::asio::ip::address& address)",3499],["static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())",3407],["static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())",3407],["if (!setKnown.insert(ip).second)",3395]],"useCount":651193},{"word":"is","context":[["** This file is part of Qt Creator.",24818],["* ScummVM is the legal property of its developers, whose names",19064],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["// This file is distributed under the University of Illinois Open Source",21647],["** This file is part of Qt Creator.",23254],["This file is part of OpenFOAM.",27906],["// This file is distributed under the University of Illinois Open Source",29309],["* This file is part of the LibreOffice project.",39451],["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["* VirtualBox OSE distribution. VirtualBox OSE is distributed in the",20770]],"useCount":31211105},{"word":"isEmpty","context":[["if(!selection.isEmpty())",4527],["if (name.isEmpty())",3920],["if(info.suffix().isEmpty() && !selectedSuffix.isEmpty())",3249],["if (text.isEmpty())",3834],["if (!players.isEmpty())",3765],["if(dir.isEmpty()) // Default to user documents location",3582],["bool isEmpty() const;",5554],["if (fileName.isEmpty())",3525],["if(!result.isEmpty())",3372],["if(!addr.isEmpty())",3502]],"useCount":991736},{"word":"isolate","context":[["i::Isolate* isolate = i::Isolate::Current();",4458],["ENTER_V8(isolate);",6316],["v8::Isolate* isolate = CcTest::isolate();",4837],["HandleScope scope(isolate);",20719],["v8::Isolate* isolate = CcTest::isolate();",4837],["v8::HandleScope scope(CcTest::isolate());",4753],["v8::HandleScope scope(isolate);",4707],["return isolate->heap()->undefined_value();",4673],["v8::HandleScope scope(isolate);",7512],["SealHandleScope shs(isolate);",4416]],"useCount":684991},{"word":"it","context":[["++it;",65484],["it++;",29390],["++it) {",27377],["const CWalletTx& wtx = (*it).second;",24998],["// We mean it.",24341],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["* Foundation, in version 2 as it comes in the \"COPYING\" file of the",20771],["return it->second;",19798]],"useCount":13648697},{"word":"item","context":[["const string& strName = item.second;",6347],["BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)",9805],["if (!item)",25966],["const CBitcoinAddress& address = item.first;",7025],["if (item) {",9438],["Item *item;",11280],["delete item;",12465],["if (item)",15131],["return item;",20198],["BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)",6091]],"useCount":4028763},{"word":"items","context":[["return items;",2428],["QList<QPair<QString, QString> > items = uri.queryItems();",3240],["// item set bonuses applied only at equip and removed at unequip, and still active for broken items",2420],["// check count of items (skip for auto move for same player from bank)",2420],["CFileItemList items;",8180],["items.Add(pItem);",5200],["items.Add(item);",3711],["// iterate backwards until we have nCount items to return:",3515],["for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)",3241],["for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)",3241]],"useCount":970233},{"word":"iter","context":[["RemoveAura(iter);",4494],["++iter;",37995],["++iter) {",10306],["iter->Next();",6560],["++iter;",5896],["return iter->second;",5204],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931],["delete iter;",4928],["iter++;",10616]],"useCount":1760625},{"word":"iterator","context":[["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["#include <iterator>",9052],["std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);",9186],["iterator",10603],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["#include <iterator>",16864],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["#include <iterator>",6194],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931],["for (std::list<AuraScript*>::iterator scritr = m_loadedScripts.begin(); scritr != m_loadedScripts.end(); ++scritr)",4839]],"useCount":2302116},{"word":"itr","context":[["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["return itr->second;",8802],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["++itr;",49392],["return &itr->second;",11974],["++itr)",8062],["if (itr == mSkillStatus.end() || itr->second.uState == SKILL_DELETED)",6895],["delete itr->second;",13423],["return &itr->second;",12398]],"useCount":3053816},{"word":"its","context":[["**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names",7172],["//     * Neither the name of Google Inc. nor the names of its",14619],["* ScummVM is the legal property of its developers, whose names",12975],["//     * Neither the name of Google Inc. nor the names of its",12567],["* 4. Neither the name of the University nor the names of its contributors",12408],["*\tCalifornia, Berkeley and its contributors.",7457],["*   3. Neither the name of STMicroelectronics nor the names of its contributors",14632],["* ScummVM is the legal property of its developers, whose names",19064],["*     * Neither the name of Google Inc. nor the names of its",18258],["*     * Neither the name of Google Inc. nor the names of its",21748]],"useCount":1733653},{"word":"j","context":[["for (int j = 0; j != screening_size_; ++j) {",11069],["int ii = screening_[j];",10976],["for (int j = 0; j != screening_size_; ++j) {",11069],["++j;",13020],["int j = 0;",14166],["int i,j;",15657],["int j;",26339],["int i, j;",27500],["j++;",29374],["for (int j = 0; j != screening_size_; ++j) {",11069]],"useCount":5944585},{"word":"just","context":[["// Don't know what it is, just say we already got one",4138],["* lhash, DES, etc., code; not just the SSL code.  The SSL documentation",3710],["#define VM_PFNMAP\t0x00000400\t/* Page-ranges managed without \"struct page\", just pure PFN */",2192],["// stdafx.cpp : source file that includes just the standard includes",7991],["* just gets major/minor fault counters bumped up.",2213],["// Rewrite just private keys: rescan to find transactions",2778],["// Do this early as we don't want to bother initializing if we are just calling IPC",2969],["pszKeyword = NULL; // Returns just IP address",3124],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["/// when NTP implemented, change to just nTime = GetAdjustedTime()",3535]],"useCount":1173297},{"word":"k","context":[["case 'k':",2990],["int i,j,k;",2996],["case 'k':",3233],["return k;",5193],["int i, j, k;",5517],["k = 0;",5549],["++k;",6717],["int k = 0;",6754],["int k;",12021],["k++;",14947]],"useCount":2340427},{"word":"kernel","context":[["***   run bionic/libc/kernel/tools/update_all.py",3431],["* @stime:\t\ttime spent in kernel mode, in &cputime_t units",3453],["#define PF_KTHREAD\t0x00200000\t/* I am a kernel thread */",3461],["* Check if a task structure is the first user space task the kernel created.",3496],["* the maximum mapped by the Linux kernel during initialization.",4580],["#include <linux/kernel.h>",32290],["* depending on how many CPUs the kernel has booted up with)",6331],["***   call into the kernel available to libc.  It contains only constants,",4647],["***   This header was automatically generated from a Linux kernel header",4643],["#include \"kernel.h\"",4613]],"useCount":587078},{"word":"key","context":[["CKey key;",30615],["const std::string& key,",4716],["throw runtime_error(\" Invalid public key: \"+ks);",10489],["// Parse the account first so we don't generate a key if there's an error",8026],["#include \"key.h\"",6683],["if (!pwalletMain->GetKey(keyID, key))",5885],["return key;",5716],["\"Stores the wallet decryption key in memory for <timeout> seconds.\");",5661],["#include \"key.h\"",5199],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");",4984]],"useCount":4270676},{"word":"keys","context":[["\"Returns Object that has account names as keys, account balances as values.\");",3152],["const Array& keys = params[1].get_array();",3446],["strprintf(\"not enough keys supplied \"",3448],["if ((int)keys.size() < nRequired)",3487],["// ~65-byte public keys, plus a few script ops.",3509],["pubkeys.resize(keys.size());",3510],["const std::string& ks = keys[i].get_str();",3512],["for (unsigned int i = 0; i < keys.size(); i++)",3512],["// Gather public keys",3513],["// Get the set of pub keys assigned to account",3524]],"useCount":651543},{"word":"l","context":[["static void Log(const param_type& p, std::string* l);",3125],["return l;",10520],["MutexLock l(&mutex_);",3239],["return l;",3534],["int l;",3824],["lua_pop(l, 1);",4059],["case 'l':",4228],["l++;",4500],["for(i=0;i<l;i++)",5317],["case 'l':",8602]],"useCount":1759500},{"word":"label","context":[["// Fill in label from address book, if address has an associated label",3091],["ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));",3100],["if (i->first == \"label\")",3241],["rv.label = i->second;",3252],["// Progress bar and label for blocks download",3338],["QLabel *label;",3453],["if (strMethod.find(\"label\") != string::npos)",3560],["#include \"ui/views/controls/label.h\"",4233],["QVERIFY(rv.label == QString());",5209],["// Fill in label from address book, if address has an associated label",3091]],"useCount":1030524},{"word":"last","context":[["// find last block in inv vector",3583],["last_queued;\t/* when we were last queued to run */",3522],["// the last block in an inv bundle sent in response to getblocks. Try to detect",3600],["// Seed nodes are given a random 'last seen time' of between one and two",3671],["// Update the last seen time for this node's address",3834],["// Check the version of the last 100 blocks to see if we need to upgrade:",3943],["// This is done last to help prevent CPU exhaustion denial-of-service attacks.",4228],["// Find the last block the caller has in the main chain",8258],["// memdbgon must be the last include file in a .cpp file!!!",8678],["/* keep last */",16529]],"useCount":1758354},{"word":"layer","context":[["{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;",2808],["{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;",2808],["{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;",2808],["{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;",2808],["#include \"ui/compositor/layer.h\"",2841],["return layer;",2997],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;",3588],["if ( !layer )",3638],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;",4094],["{int volatile ___ = 1;(void)t;(void)x;(void)layer;",4094]],"useCount":883813},{"word":"layout","context":[["#include \"ui/base/layout.h\"",2091],["layout->AddPaddingRow(0, views::kRelatedControlVerticalSpacing);",2170],["#include \"ui/views/layout/grid_layout.h\"",2265],["SetLayoutManager(layout);",2289],["QVBoxLayout *layout = new QVBoxLayout(this);",2449],["QVBoxLayout *layout = new QVBoxLayout;",2898],["layout->setSpacing(0);",3365],["layout->setMargin(0);",4289],["Layout* layout,",4885],["setLayout(layout);",7392]],"useCount":707452},{"word":"left","context":[[", typename MT4    // Type of the left-hand side matrix operand",4579],["template< typename MT3    // Type of the left-hand side target matrix",4579],["// \\param C The target left-hand side dense matrix.",4589],["left = left << 5 | dec;",6360],["left = left << 5 | dec;",6360],["int mode=0, left=0;",6480],["left = dec & 3;",6491],["left = dec;",6491],["left = dec & 15;",6491],["int left = 0;",7742]],"useCount":1726566},{"word":"len","context":[["return len;",15482],["int len;",14932],["int len;",14545],["size_t len;",8812],["size_t len);",7996],["socklen_t len = sizeof(sockaddr);",7989],["int len);",7351],["size_t len;",7311],["ulint\t\tlen;",6873],["uint32_t len;",6807]],"useCount":2906139},{"word":"length","context":[["return length;",9579],["int length;",10317],["unsigned int length;",7668],["* @return length of the message in bytes (excluding serial stream start sign)",6504],["uint16_t length;",6486],["* NOTE: this field is variable length. (Allocated dynamically",6331],["length = 0;",5810],["int length;",5408],["* @len: length of the frame data",5269],["// N.B. These #defines do *not* include the EID & length",5324]],"useCount":4180186},{"word":"level","context":[["// the top level of the deal.II distribution.",17668],["return level;",3950],["int level;",9776],["See the README file in the top-level LAMMPS directory.",8796],["uint8 level = getLevel();",6100],["See the README file in the top-level LAMMPS directory.",5817],["GLint level,",5745],["int level,",5387],["*\t\tinterface as the means of communication with the user level.",5266],["GLint level,",4114]],"useCount":2218900},{"word":"library","context":[["// with this library; see the file COPYING3.  If not see",42545],["//  This file is part of the Blaze library. You can redistribute it and/or modify it under",5353],["// with this library; see the file COPYING.  If not, write to the Free",6206],["// This file is part of Eigen, a lightweight C++ template library",6742],["// This file is part of the deal.II library.",17668],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["along with this library; see the file COPYING.LIB.  If not, write to",23776],["* along with this library; see the file COPYING.LIB.  If not, write to",26690],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["// Init OpenSSL library multithreading support",4801]],"useCount":995504},{"word":"like","context":[["// expensive-to-check-upon-redemption script like:",3611],["@param format printf like format string",2272],["* PR_SET_CHILD_SUBREAPER marks a process, like a service",2363],["* Note this does not restore interrupts like task_rq_unlock,",2492],["* Note this does not disable interrupts like task_rq_lock,",2492],["An object-based framework for developing high-performance BLAS-like",2642],["// blizz like 2.0.x",2711],["* with tsk_used_math (like during threaded core dumping).",3518],["// Misc warnings like out of disk space and clock is wrong",4124],["//    avoid sending us more work, like chain download requests.",4068]],"useCount":770441},{"word":"limit","context":[["return ACCESS_ONCE(tsk->signal->rlim[limit].rlim_max);",3401],["unsigned int limit)",7733],["// Continuously rate-limit free transactions",3849],["return ACCESS_ONCE(tsk->signal->rlim[limit].rlim_cur);",3401],["* because there is no reader checking a limit that actually needs",3524],["static inline unsigned long rlimit_max(unsigned int limit)",3490],["return task_rlimit_max(current, limit);",3490],["static inline unsigned long rlimit(unsigned int limit)",3490],["return task_rlimit(current, limit);",3490],["printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);",3433]],"useCount":651574},{"word":"line","context":[["* Command line configuration.",6304],["string line;",3691],["compiler->addError(ScriptCompiler::CE_INVALIDPARAMETERS, prop->file, prop->line,",3726],["int line;",4088],["return line;",4171],["line++;",4676],["* For booting Linux, the board info and command line data",4985],["std::string line;",18777],["string line;",11701],["// Microsoft Visual C++ will insert additional declarations immediately before the previous line.",8538]],"useCount":2571943},{"word":"lines","context":[["service_lines[1][...] specifies lines 0-23 (1-23 used) of the second field",1309],["/* Output to assembler file text saying following lines",1302],["/* service_lines[0][...] specifies lines 0-23 (1-23 used) of the first field",1309],["lines.clear();",1302],["(equals frame lines 313-336 for 625 line video",1309],["//   (the tx=... number in the SetBestChain debug.log lines)",1469],["/* The following lines are auto generated by the script mkerr.pl. Any changes",1512],["* number of lines from vertical start.",1644],["* number of lines from the start of NBR.",1644],["#pragma warning( disable: 4049 )  /* more than 64k source lines */",3360]],"useCount":817524},{"word":"link","context":[["// Build don't link:",2052],["this file and link it with other files to produce an executable, this",2077],["m_group.link(group, this);",2360],["// this file and link it with other files to produce an executable, this",2381],["// Regenerate startup link, to fix links to old versions",2882],["* candidates to be the next block.  pprev and pnext link a path through the",3013],["// Save the link by calling IPersistFile::Save.",3337],["* p->ptrace_entry is p's link on the p->parent->ptraced list.",3467],["link: http://www.freertos.org/a00114.html",4134],["struct list_head link;",4663]],"useCount":738726},{"word":"linux","context":[["#include <linux/interrupt.h>",19527],["#include <linux/compiler.h>",20609],["#include <linux/workqueue.h>",21556],["#include <linux/list.h>",44279],["#include <linux/spinlock.h>",32774],["#include <linux/kernel.h>",32290],["#include <linux/mutex.h>",25435],["#include <linux/sched.h>",23283],["#include <linux/slab.h>",21923],["#include <linux/types.h>",98966]],"useCount":1784444},{"word":"list","context":[["#include <list>",10001],["* For the list of contributors see $ROOTSYS/README/CREDITS.             *",8931],["#include <list>",67236],["struct list_head list;",65055],["#include <linux/list.h>",44279],["#include <list>",30643],["return list;",22395],["* See file CREDITS for list of people who contributed to this",13130],["struct list_head\tlist;",13128],["\\list",10569]],"useCount":4439768},{"word":"list_head","context":[["struct list_head *head);",3788],["struct list_head run_list;",3840],["struct list_head node;",7440],["struct list_head head;",3908],["struct list_head tasks;",3940],["struct list_head\tnode;",4470],["struct list_head link;",4663],["struct list_head\tlist;",13128],["struct list_head list;",65055],["struct list_head cpu_timers[3];",7230]],"useCount":637718},{"word":"llvm","context":[["#include \"llvm/ADT/STLExtras.h\"",4850],["#include \"llvm/ADT/SmallString.h\"",4787],["namespace llvm {",4868],["#include \"llvm/ADT/Statistic.h\"",5102],["#include \"llvm/Support/CommandLine.h\"",6352],["#include \"llvm/Support/ErrorHandling.h\"",7306],["#include \"llvm/Support/Debug.h\"",9483],["#include \"llvm/Support/raw_ostream.h\"",13169],["using namespace llvm;",23950],["namespace llvm {",17545]],"useCount":1040447},{"word":"load","context":[["load >>= FSHIFT;",3669],["void load();",4845],["load *= exp; \\",3669],["#define CALC_LOAD(load,exp,n) \\",3669],["load += n*(FIXED_1-exp); \\",3669],["*  - if you want to count load-averages more often, you need more",3570],["* These are the constant used to fake the fixed-point load-average",3570],["*    a load-average precision of 10 bits integer + 11 bits fractional",3570],["/* current thread group signal load-balancing target: */",3531],["load();",5810]],"useCount":961074},{"word":"local","context":[["trace_drv_return_void(local);",3503],["/* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )(",9991],["TP_PROTO(struct ieee80211_local *local,",5163],["// Get local host ip",4731],["// learn a new local address",3640],["// find 'best' local address for a particular peer",3639],["/** vote for a local address */",3639],["/** check whether a given address is potentially local */",3638],["/* [local] */",24214],["// get best local address for a particular peer as a CAddress",3638]],"useCount":1577352},{"word":"location","context":[["Location loc = this->location();",3161],["this->location());",2466],["DBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated location=%p\\n\", cp->ptr));",2407],["/** An input of a transaction.  It contains the location of the previous",3216],["if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))",3218],["if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))",3218],["if(dir.isEmpty()) // Default to user documents location",3582],["Location location)",5088],["#include \"base/location.h\"",15693],["location);",4415]],"useCount":1179034},{"word":"lock","context":[["CSingleLock lock(m_critSection);",26139],["struct mutex lock;",11120],["#include \"base/synchronization/lock.h\"",6068],["spinlock_t\tlock;",7161],["lock.unlock();",7393],["mutex.lock();",7768],["spinlock_t\t\tlock;",10019],["lock();",10309],["base::AutoLock lock(lock_);",10638],["spinlock_t lock;",22750]],"useCount":2078200},{"word":"log","context":[["char log[1024];",3807],["// Reopen debug.log on SIGHUP",3658],["#include \"log.hpp\"",3750],["#include <VBox/log.h>",5146],["#include \"utils/log.h\"",15126],["#include \"wx/log.h\"",5445],["#include \"ns3/log.h\"",6266],["OutputDebugStringA(log);",6524],["#include \"log.h\"",9022],["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922]],"useCount":1191916},{"word":"long","context":[["unsigned long flags);",10060],[".driver_info = (unsigned long) & (const struct snd_usb_audio_quirk) {",16946],["volatile unsigned long _res;                                \\",8587],["unsigned long arg);",9231],["@property(readonly) unsigned long long hash;",9463],["@property(readonly) unsigned long long hash;",9463],["unsigned long size);",10088],["unsigned long long insn_referenced = abuf->written;",10546],["unsigned long long insn_referenced = abuf->written;",10546],["unsigned long flags;",38491]],"useCount":7574259},{"word":"loop","context":[["__ bind(&loop);",4750],["loop",43286],["}// end loop over 't'",3977],["* Careful: do_each_thread/while_each_thread is a double loop so",3531],["goto loop;",6891],["}// end loop over 'r'",5285],["goto loop;",5108],["loop {",4837],["* @pos:\tthe type * to use as a loop cursor.",4029],["// The first loop above does all the inexpensive checks.",4053]],"useCount":980038},{"word":"m","context":[["case 'm':",7427],["case 'm':",4269],["return m;",4868],["TEST_ASSERT(m);",5873],["return m;",7140],["m = 0;",8515],["m++;",9719],["delete m;",12679],["return m;",22366],["int m;",3800]],"useCount":3332428},{"word":"m_caster","context":[["if (m_caster->GetTypeId() != TYPEID_PLAYER)",23818],["Player* p_caster = (Player*)m_caster;",3201],["m_caster->ToPlayer()->SetSpellModTakingSpell(this, false);",3324],["data.append(m_caster->GetPackGUID());",3360],["if (Player* modOwner = m_caster->GetSpellModOwner())",3660],["Player* player = m_caster->ToPlayer();",5999],["m_caster->SendMessageToSet(&data, true);",7003],["if (m_caster->GetTypeId() == TYPEID_PLAYER)",19899],["if (Player* player = m_caster->ToPlayer())",2925],["targetUnitMap.push_back(m_caster);",2937]],"useCount":742797},{"word":"machine_arch_type","context":[["#  define machine_arch_type\t__machine_arch_type",432090],["#  undef machine_arch_type",432169],["# ifdef machine_arch_type",432169],["#  define machine_arch_type\tMACH_TYPE_RISCPC",280],["#  define machine_arch_type\tMACH_TYPE_EBSA285",280],["#  define machine_arch_type\tMACH_TYPE_NETWINDER",280],["#  define machine_arch_type\tMACH_TYPE_EBSA110",280],["#  define machine_arch_type\tMACH_TYPE_CATS",280],["# define machine_is_ebsa285()\t(machine_arch_type == MACH_TYPE_EBSA285)",280],["#ifndef machine_arch_type",283]],"useCount":2157819},{"word":"macro","context":[["* @brief  The assert_param macro is used for function's parameters check.",3577],["/* Use this macro when declaring classes that implement this interface. */",20001],["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989],["/* Exported macro ------------------------------------------------------------*/",18730],["*    Non-Carbon CFM:   available as macro/inline",5355],["* @macro:",4361],["// can use the `COCOAPODS` macro definition which is",3993],["* This macro is used to create a struct usb_device_id that matches a",3151],["*   A macro used in #include statements to name the file containing the",2315]],"useCount":669009},{"word":"macros","context":[["#include \"base/macros.h\"",20458],["// templates or use macros or inline functions from this file, or you compile",2381],["/* Driver macros.                                                            */",2495],["#include \"macros.h\"",3019],["/* Private macros ------------------------------------------------------------*/",3227],["// From module: Part identification macros",3304],["/* Convenience macros for the sake of set_task_state */",3471],["/* Convenience macros for the sake of wake_up */",3471],["***   structures, and macros generated from the original header, and thus,",4665],["#include \"base/macros.h\"",35481]],"useCount":578728},{"word":"main","context":[["int main(int argc, char **argv) {",12434],["int main() {",51500],["int main()",124481],["int main(int argc, char *argv[])",49760],["int main()",43081],["#include \"main.h\"",36732],["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["int main(){",22750],["int main(int argc, char** argv)",20124]],"useCount":1475006},{"word":"make","context":[["// make sure all wallets know about the given transaction, in the given block",3435],["// Check transaction inputs, and make sure any",3611],["// make sure requires clause is not broken",3643],["+ (instancetype)make ACTIVATOR;",3672],["// When this block is requested, we'll send an inv that'll make them",3945],["// This doesn't trigger the DoS code on purpose; if it did, it would make it easier",4076],["make, have made, use, offer to sell, sell, import, transfer, and",4293],["***   of the same name, to make information necessary for userspace to",4661],["// TODO: make private (improves encapsulation)",7838],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620]],"useCount":1192140},{"word":"map","context":[["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);",9186],["#include <map>",150644],["#include <map>",60342],["#include <map>",25939],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["// Generated message map functions",10517],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["return map;",9600]],"useCount":2964147},{"word":"mask","context":[["int *mask = atom->mask;",8291],["InReg = _mm_and_si128(_mm_loadu_si128(++in), mask);",6076],["0x00, //data_width mask 00 0000",5850],["return mask;",5741],["unsigned int mask);",5519],["InReg = _mm_and_si128(_mm_load_si128(++in), mask);",5208],["if (mask[i] & groupbit) {",5062],["int mask;",3879],["unsigned int mask;",3875],["int *mask = atom->mask;",8291]],"useCount":2003226},{"word":"match","context":[["return matcher->match(this, _other);",2184],["tr(\"The supplied passphrases do not match.\"));",6158],["match = true;",4322],["return error(\"CheckProofOfWork() : hash doesn't match nBits\");",3769],["return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");",3450],["// Attempt to match the parameters to a valid binding.",2703],["bool match = false;",2603],["// Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)",2415],["return match;",2231],["match = false;",2205]],"useCount":907153},{"word":"materials","context":[["*      and/or other materials provided with the distribution.",14820],["*    the documentation and/or other materials provided with the",15130],["*    documentation and/or other materials provided with the distribution.",106352],["*    documentation and/or other materials provided with the distribution.",34821],["*    and/or other materials provided with the distribution.",33452],["documentation and/or other materials provided with the distribution.",23913],["* in the documentation and/or other materials provided with the",22044],["* in the documentation and/or other materials provided with the",18194],["*     documentation and/or other materials provided with the distribution.",16201],["// in the documentation and/or other materials provided with the",13698]],"useCount":641857},{"word":"matrix","context":[["// \\param C The target left-hand side dense matrix.",4589],[", typename MT4    // Type of the left-hand side matrix operand",4579],["template< typename MT3    // Type of the left-hand side target matrix",4579],["template< typename MT >  // Type of the dense matrix",2689],[", typename MT5 >  // Type of the right-hand side matrix operand",2661],["template< typename MT  // Type of the adapted sparse matrix",2584],[", bool SO >    // Storage order of the adapted sparse matrix",2584],["SkMatrix matrix;",2495],["// \\param lhs The target left-hand side dense matrix.",2447],["#include \"matrix.h\"",2214]],"useCount":1064722},{"word":"max","context":[["obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));",7054],["return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());",3521],["nConf = std::numeric_limits<int>::max();",3527],["int nConf = std::numeric_limits<int>::max();",3527],["#undef max",3568],["hSocketMax = max(hSocketMax, pnode->hSocket);",3727],["using std::max;",4012],["return max;",4405],["unsigned int\t\tmax;    /* in kHz */",5666],["hSocketMax = max(hSocketMax, hListenSocket);",3485]],"useCount":1516673},{"word":"maximum","context":[["bar->setSliderPosition(bar->maximum());",2279],["* Default maximum number of active map areas, this limits the number of vmas",2514],["pOutLen     [I/O] - Upon input the maximum number of BYTEs pOut can",2537],["* The MAX_USER_RT_PRIO value allows the actual maximum",2546],["pOutLen     [I/O] - Upon input the maximum number of BYTEs pOut can",2624],["// Enforce maximum history size",3098],["scrollbar->setValue(scrollbar->maximum());",3123],["@return maximum number of sigops required to validate this transaction's inputs",3318],["// Return maximum amount of blocks that other nodes claim to have",3543],["* the maximum mapped by the Linux kernel during initialization.",4580]],"useCount":642617},{"word":"me","context":[["me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);",9797],["me->SetReactState(REACT_PASSIVE);",22295],["if (me->HasUnitState(UNIT_STATE_CASTING))",20331],["me->DespawnOrUnsummon();",13782],["me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);",12974],["me->SetReactState(REACT_AGGRESSIVE);",10920],["me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);",10742],["me->InterruptNonMeleeSpells(false);",10564],["me->GetMotionMaster()->MoveIdle();",9896],["me->RemoveAllAuras();",9482]],"useCount":2249011},{"word":"means","context":[["*\t\tinterface as the means of communication with the user level.",5266],["* flags just means all the inodes inherit those flags by default. It might be",1942],["*   page_count() > 0  means the page has been allocated.",2236],["// at this point, any failure means we can delete the current message",2241],["*   page_count() == 0 means the page is free. page->lru is then used for",2253],["* cent / per mille means.",2424],["* This means the number of sections should be smaller than 65535 at coredump.",2514],["* values are inverted: lower p->prio value means higher priority.",2525],["// Negative height means invert the image.",2811],["\"PATENT CLAIMS\" means the claims of patents that are owned or",4293]],"useCount":617872},{"word":"member","context":[["// Define an unsigned member",13600],["/* member initializers and constructor code */",19991],["/* Define an unsigned member */",7485],["* @member:\tthe name of the list_struct within the struct.",5517],["\"Must check which() before get()ing a union member.\");",3674],["if (!member)",2750],["* and member tasks aren't allowed to exit (as indicated by PF_EXITING) or",2307],["* member tasks from exiting,a more specifically, setting of",2305],["* @tsk: member task of the threadgroup to unlock",2303],["* @tsk: member task of the threadgroup to lock",2302]],"useCount":789047},{"word":"memcpy","context":[["memcpy(&hdrbuf[nHdrPos], pch, nCopy);",2015],["memcpy(&vchData[0], &vchTemp[1], vchData.size());",2203],["memcpy(&vchData[0], pdata, nSize);",2265],["memcpy(&ip, &pnSeed[i], sizeof(ip));",3346],["memcpy(phash1, &tmp.hash1, 64);",3631],["memcpy(pdata, &tmp.block, 128);",3664],["memcpy(&nPointer, &pnode, sizeof(nPointer));",4077],["memcpy(&nChecksum, &hash, sizeof(nChecksum));",4196],["memcpy(&vRecv[nDataPos], pch, nCopy);",2015],["memcpy(&id, &vchData[0], 20);",6533]],"useCount":634427},{"word":"memory","context":[["#include <memory>",20228],["#include \"base/memory/weak_ptr.h\"",25617],["#include \"base/memory/ref_counted.h\"",32254],["#include <memory>",33654],["#include \"base/memory/scoped_ptr.h\"",35875],["#include \"base/memory/scoped_ptr.h\"",50659],["#include <memory>",78580],["#include <aws/core/utils/memory/stl/AWSString.h>",14805],[": \"memory\");",14070],["#include \"base/memory/ref_counted.h\"",11181]],"useCount":2804055},{"word":"memset","context":[["memset(&packet1, 0, sizeof(packet1));",8799],["memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));",4006],["memset(&tmp, 0, sizeof(tmp));",3711],["memset(pdata + len, 0, 64 * blocks - len);",3673],["memset(pszExePath, 0, sizeof(pszExePath));",3298],["memset(pdata, 0, sizeof(pdata));",3249],["memset(&nCounter, 0, sizeof(nCounter));",3248],["memset(&packet2, 0, sizeof(packet2));",43995],["memset(read_buf, 0, sizeof(read_buf));",11344],["::memset(_has_bits_, 0, sizeof(_has_bits_));",25760]],"useCount":663992},{"word":"menu","context":[["menu->addSeparator();",7425],["menu.addSeparator();",5372],["// Configuration of the tray icon (or dock icon) icon menu",3378],["// Create actions for the toolbar, menu bar and tray/dock icon",3377],["// Create application menu bar",3351],["// Create a decoupled menu bar on Mac which stays even if the window is closed",3248],["// Get the main window's menu bar on other platforms",3246],["QMenu menu;",2899],["delete menu;",2421],["return menu;",3321]],"useCount":603568},{"word":"message","context":[["* @param msg The MAVLink message to compress the data into",11697],["// Generated message map functions",10517],["std::string message = FormatException(pex, pszThread);",9177],["* @return length of the message in bytes (excluding serial stream start sign)",6504],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309],["strMiscWarning = message;",6264],["the message over the BUS */",4605],["/* Clear status message on focus change */",4794],["QString message;",4828],["printf(\"\\n\\n************************\\n%s\\n\", message.c_str());",5669]],"useCount":2643185},{"word":"method","context":[["\"After calling this method, you will need to call walletpassphrase again\\n\"",3549],["Value valMethod = find_value(request, \"method\");",3608],["request.push_back(Pair(\"method\", strMethod));",3583],["@method",13791],["request.method = \"GET\";",9502],["PyErr_SetString(PyExc_TypeError, \"function/method should return None\");",4408],["return Box(il2cpp_codegen_class_from_type (method->return_type), &ret);",4226],["// Find method",3751],["// Parse method",3737],["printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());",3202]],"useCount":1858088},{"word":"methods","context":[["0,    0, // methods",5169],["// reimplemented virtual methods:",4782],["// methods",4006],["/* methods */",3563],["// non-virtual methods:",3240],["* You rarely need to use properties because there are get_ and set_ methods for almost all of them.",3206],["\"before being able to call any methods which require the wallet to be unlocked.\");",3129],["* property methods to initialize this object after creating it.",2398],["/** Run-time type information (and related methods). */",10227],["/*** IUnknown methods ***/",20377]],"useCount":723549},{"word":"mi","context":[["if (mi == mapBlockIndex.end())",18521],["CBlockIndex* pindex = (*mi).second;",22473],["if (mi != mapBlockIndex.end())",12277],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["CBlockIndex* pindex = (*mi).second;",9211],["std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);",9186],["if (mi != mapBlockIndex.end())",8397],["if (mi != mapWallet.end())",8232],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["++mi)",7911]],"useCount":708941},{"word":"might","context":[["// WARNING: Changes might be lost if you edit this file directly.",10961],["// WARNING: Changes might be lost if you edit this file directly.",5270],["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["// optimized evaluation of expression templates. Calling this function explicitly might result",3424],["* Note: There might be duplicate includes required by more than one driver.",3310],["// peer might be an older or different implementation with",2940],["\" or address book entries might be missing or incorrect.\"));",2724],["// invalidate any other reasons why the executable file might be covered by",2381],["/* editing this might proof futile */",2317],["\"data or address book entries might be missing or incorrect.\"),",2292]],"useCount":597334},{"word":"min","context":[["unsigned int\t\tmin;    /* in kHz */",5666],["using std::min;",4143],["unsigned int nCopy = std::min(nRemaining, nBytes);",4026],["item.nConf = min(item.nConf, nDepth);",3570],["item.nConf = min(item.nConf, nConf);",3553],["CAddress addr = addrman.Select(10 + min(nOutbound,8)*10);",3445],["#undef min",3429],["// If -min option passed, start window minimized.",3316],["TCHAR pszArgs[5] = TEXT(\"-min\");",3201],["optionFile << \"Exec=\" << pszExePath << \" -min\\n\";",3191]],"useCount":937594},{"word":"mm","context":[["static inline void mm_update_next_owner(struct mm_struct *mm)",3566],["/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */",3565],["extern void mm_update_next_owner(struct mm_struct *mm);",3566],["extern void set_dumpable(struct mm_struct *mm, int value);",3578],["if (unlikely(atomic_dec_and_test(&mm->mm_count)))",3580],["extern void arch_pick_mmap_layout(struct mm_struct *mm);",3625],["static inline void mmdrop(struct mm_struct * mm)",3626],["struct mm_struct *mm, *active_mm;",3632],["__mmdrop(mm);",3661],["#include <linux/mm.h>",12712]],"useCount":589630},{"word":"mod","context":[["get_modrm(*data, &mod, &regop, &rm);",1971],["// done scripted mod (take it from owner)",2286],["((mod & Qt::ShiftModifier) && key == Qt::Key_Insert)))",2339],["(!mod && !keyevt->text().isEmpty() && key != Qt::Key_Tab) ||",2344],["((mod & Qt::ControlModifier) && key == Qt::Key_V) ||",2344],["Qt::KeyboardModifiers mod = keyevt->modifiers();",2345],["return mod;",2388],["Modifier* mod = (*i)->GetModifier();",2595],["int mod, regop, rm;",2884],["// cleanup after mod system",1397]],"useCount":659660},{"word":"mode","context":[["mode = 3;",9921],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["switch (mode)",25464],["if (!(mode & (AURA_EFFECT_HANDLE_CHANGE_AMOUNT_MASK | AURA_EFFECT_HANDLE_STAT)))",21401],["switch(mode)",20296],["if (!(mode & AURA_EFFECT_HANDLE_REAL))",16487],["mode = 0;",14740],["mode = 1;",13814],["mode = 2;",13591],["switch (mode) {",8591]],"useCount":3935305},{"word":"model","context":[["dlg.setModel(model->getAddressTableModel());",8032],["model(0)",8442],["if (model)",8800],["model(0),",10563],["if(model && model->getOptionsModel())",12230],["if(model && model->getOptionsModel())",12230],["if(model)",13381],["if(!model)",22916],["this->model = model;",24601],["this->model = model;",24601]],"useCount":1399007},{"word":"module","context":[["PyObject *module = PyImport_ImportModule((char*) \"ns.core\");",10290],["struct module *owner;",11431],["** This file is part of the QtGui module of the Qt Toolkit.",10239],["* you also meet, for each linked independent module, the terms and conditions of",9173],["** This file is part of the QtGui module of the Qt Toolkit.",7859],["PyObject *module = PyImport_ImportModule((char*) \"ns.network\");",7453],["* @param instance module device instance",7413],["struct module\t\t*owner;",6996],["if (module == NULL) {",21377],["#include <linux/module.h>",16057]],"useCount":1173017},{"word":"more","context":[["* more details.",100721],["// for more details.",4999],["* more details.",67109],["for more details.",29813],["* for more details.",26128],["for more details.",13585],["more details.",7368],["See the COPYING file for more details.",7165],["for more details.",7111],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686]],"useCount":1817340},{"word":"move","context":[["list<COrphan> vOrphan; // list memory doesn't move",3852],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["entry.push_back(Pair(\"category\", \"move\"));",3571],["if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);",3347],["\"move <fromaccount> <toaccount> <amount> [minconf=1] [comment]\\n\"",3154],["if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);",3148],["// ignore move item (this slot will be empty at move)",2692],["// ignore move item (this slot will be empty at move)",2692],["// check count of items (skip for auto move for same player from bank)",2420],["// move best block pointer to prevout block",2010]],"useCount":817012},{"word":"msg","context":[["MSG msg;",7437],["if (msg)",21721],["if (msg != EQUIP_ERR_OK)",21194],["if (msg == EQUIP_ERR_OK)",14043],["* @param msg The MAVLink message to compress the data into",11697],["mavlink_message_t msg;",9019],["for (i=0; i<mavlink_msg_get_send_buffer_length(&msg); i++) {",8799],["mavlink_msg_to_send_buffer(buffer, &msg);",8799],["virNetMessagePtr msg,",8512],["return msg;",7664]],"useCount":2032277},{"word":"must","context":[["*     * Redistributions in binary form must reproduce the above",27890],["*    must display the following acknowledgement:",20377],["*     * Redistributions in binary form must reproduce the above",18845],["//     * Redistributions in binary form must reproduce the above",15332],["//     * Redistributions in binary form must reproduce the above",13855],["// memdbgon must be the last include file in a .cpp file!!!",8678],["2. Altered source versions must be plainly marked as such, and must not be",8151],["2. Altered source versions must be plainly marked as such, and must not be",8151],["* 2. Altered source versions must be plainly marked as such, and must not be",8045],["* 2. Altered source versions must be plainly marked as such, and must not be",8045]],"useCount":3170458},{"word":"mutex","context":[["mutex_enter(&fil_system->mutex);",5622],["#include <linux/mutex.h>",25435],["#include <mutex>",12400],["struct mutex lock;",11120],["struct mutex mutex;",9783],["struct mutex mutex;",9783],["mutex_exit(&fil_system->mutex);",9115],["mutex.unlock();",9033],["mutex.lock();",7768],["#include <mutex>",6473]],"useCount":930891},{"word":"n","context":[["\"\\n\"",131443],["return n;",37476],["\"}\\n\"",40748],["\\n\\",41631],["<< \" Details:\\n\"",42050],["oss << \" Test: \" << test_ << \"\\n\"",44197],["\"\\n\"",47634],["\"\\n\"",56524],["printf(\"\\n\");",66438],["\"{\\n\"",81903]],"useCount":20043995},{"word":"name","context":[["char *name;",53633],["const char *name;",69868],["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["return name;",25237],["std::string name;",22820],["*     * Neither the name of Google Inc. nor the names of its",21748],["std::string name;",21714],["const char *name,",19931],["*     * Neither the name of Google Inc. nor the names of its",18258],["*   3. Neither the name of STMicroelectronics nor the names of its contributors",14632]],"useCount":10194392},{"word":"names","context":[["//     * Neither the name of Knut Reinert or the FU Berlin nor the names of",7085],["*     * Neither the name of Google Inc. nor the names of its",21748],["* ScummVM is the legal property of its developers, whose names",19064],["*     * Neither the name of Google Inc. nor the names of its",18258],["*   3. Neither the name of STMicroelectronics nor the names of its contributors",14632],["//     * Neither the name of Google Inc. nor the names of its",14619],["* ScummVM is the legal property of its developers, whose names",12975],["//     * Neither the name of Google Inc. nor the names of its",12567],["**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names",7172],["* 4. Neither the name of the University nor the names of its contributors",12408]],"useCount":916015},{"word":"namespace","context":[["using namespace std;",436706],["namespace WebCore {",42370],["namespace {",256135],["}  // namespace",210015],["namespace {",139477],["using namespace std;",81434],["using namespace std;",77081],["namespace",61000],["namespace blink {",43716],["namespace WebCore {",43460]],"useCount":9670859},{"word":"need","context":[["* have no need to disable irqs.",3524],["\"After calling this method, you will need to call walletpassphrase again\\n\"",3549],["*  - if you want to count load-averages more often, you need more",3570],["* Does a critical section need to be broken due to another",3578],["* If the caller does not need such serialisation then use __set_current_state()",3632],["// Check the version of the last 100 blocks to see if we need to upgrade:",3943],["// stop flight if need",4409],["// TODO: reference any additional headers you need in STDAFX.H",5363],["\"(you do not need to remember this password)\\n\"",6763],["* or visit www.oracle.com if you need additional information or have any",11601]],"useCount":2173423},{"word":"needed","context":[["// about this message: it's needed when they are recursively walking the",2146],["\"Returns data needed to construct a block to work on:\\n\"",2167],["// Ask for passphrase if needed",2191],["* The following ifdef needed to get the 4level-fixup.h header to work.",2206],["* unmapping it (needed to keep files on disk up-to-date etc), pointer",2242],["#define CPUFREQ_SHARED_TYPE_HW\t (1) /* HW does needed coordination */",2814],["unsigned int\t\tcur;    /* in kHz, only needed if cpufreq",2834],["/* needed by all drivers */",2834],["* This structure provides information needed to complete IEEE 802.11",2857],["/* Add suffix if needed */",3254]],"useCount":799720},{"word":"needs","context":[["// Load e.g. bitcoin_de.qm (shortcut \"de\" needs to be defined in bitcoin.qrc)",2969],["* because there is no reader checking a limit that actually needs",3524],["// Check for stop or if block needs to be rebuilt",3321],["// TODO: This is currently disabled because it needs to be verified to work",3211],["ui->warningLabel->setText(tr(\"This operation needs your wallet passphrase to unlock the wallet.\"));",3068],["ui->warningLabel->setText(tr(\"This operation needs your wallet passphrase to decrypt the wallet.\"));",3065],["// Load e.g. bitcoin_de_DE.qm (shortcut \"de_DE\" needs to be defined in bitcoin.qrc)",2969],["struct work_struct\tupdate; /* if update_policy() needs to be",2831],["// A failure is non-critical and needs no further attention!",2789],["#define RCU_READ_UNLOCK_NEED_QS (1 << 1) /* RCU core needs CPU response. */",2547]],"useCount":576890},{"word":"net","context":[["namespace net {",23322],["#include \"net/url_request/url_request_context_getter.h\"",6328],["if (net == NET_UNROUTABLE)",7293],["net::URLRequest* request,",7529],["#include \"net/base/net_util.h\"",8133],["}  // namespace net",13037],["#include \"net/base/net_errors.h\"",16343],["}  // namespace net",18692],["namespace net {",19410],["#include \"net.h\"",22638]],"useCount":1953148},{"word":"network","context":[["PyObject *module = PyImport_ImportModule((char*) \"ns.network\");",7453],["// Dump network addresses",3712],["// Initiate outbound network connection",3757],["// Initiate network connections",3760],["int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)",3982],["// Do not store addresses outside our network",3993],["// 2) Remote nodes can measure the latency of the network thread. If this node",4072],["// for an attacker to attempt to split the network.",4079],["*\t@dev: network device",11548],["* @dev: network device",13433]],"useCount":740540},{"word":"new","context":[["newscript = new Script;",41261],["new HttpNetworkTransaction(DEFAULT_PRIORITY, session.get()));",6355],["daeMetaAttribute *ma = new daeMetaAttribute;",6610],["* If a daeMetaElement already exists it will return that instead of creating a new one.",6026],["#include <new>",7671],["new ::google::protobuf::internal::GeneratedMessageReflection(",8971],["// Create new block",17312],["pNewScript = new Script;",19347],["#define new DEBUG_NEW",21868],["// Next default values for new objects",8484]],"useCount":8818076},{"word":"next","context":[["m_pDS->next();",10952],["it.next();",10585],["for (GroupReference* itr = group->GetFirstMember(); itr != NULL; itr = itr->next())",5841],["i.next();",5771],["next = itr;",5303],["tok = tok->next();",5218],["m_valueList->next();",4662],["return next;",4384],["++next;",11753],["next();",12186]],"useCount":2930124},{"word":"no","context":[["/** Make a particular network entirely off-limits (no automatic connects to it) */",3638],["// no changes, quest ignore this data",3739],["// xgettext: no-c-format",3850],["/* should never happen if there's no MMU */",4071],["the PATENT CLAIMS, a non-exclusive, no-charge, royalty-free,",4293],["// no changes, quest can't be done for this requirement",6186],["case 0: // we have no bits",6487],["*  @param  value  value to be set (single value only) or \"\" for no value",7159],["//Return since we have no target",17729],["{0, 0, 0, 0, 0, 0},  //reserved no used",79026]],"useCount":3502334},{"word":"node","context":[["sym(1).Node = node;",5337],["return node;",5346],["while (node)",5975],["node = node->GetNext();",6151],["node = node->GetNext();",6151],["if (node)",6691],["node = ast;",7273],["struct list_head node;",7440],["if (!node)",14066],["return node;",29347]],"useCount":3789517},{"word":"nodes","context":[["// Disconnect unused nodes",3760],["// Relay to a limited number of other nodes",4152],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["// 2) Remote nodes can measure the latency of the network thread. If this node",4072],["// at a time so the setAddrKnowns of the chosen nodes prevent repeats",3940],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Disconnect nodes",3760],["// Poll the connected nodes for messages",3696],["// only consider very recently tried nodes after 30 failed attempts",3711],["// Delete disconnected nodes",3760]],"useCount":679898},{"word":"non","context":[["the PATENT CLAIMS, a non-exclusive, no-charge, royalty-free,",4293],["patentability, enforceability and/or non-infringement of any of the",4293],["// Check for non-standard pay-to-script-hash in inputs",4167],["// save only in non-flight case",3990],["// non-standard. Note that this EvalScript() call will",3947],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["* This library is free for commercial and non-commercial use as long as",3692],["// Note: if you modify this code to accept non-standard transactions, then",3642],["* @running:\t\tnon-zero when there are timers running and",3381],["// Special case non-string parameter types",3370]],"useCount":1704114},{"word":"normal","context":[["// normal case",3360],["* WRITE\t\tA normal async write. Device will be plugged.",1797],["* servicing faults for write access.  In the normal case, do always want",1929],["// fRequestShutdown getting set, and then does the normal Qt",1959],["if (!(master->spawnMask & slave->spawnMask))  // they must have a possibility to meet (normal/heroic difficulty)",1985],["* Getting a normal page or the head of a compound page",2175],["* be used through the normal accessor functions. The top bits of page->flags",2236],["// ... in best-case exactly 4-times-normal target time",2519],["// -tor can override normal proxy, -notor disables tor entirely",3125],["// The message start string is designed to be unlikely to occur in normal data.",4148]],"useCount":628509},{"word":"not","context":[["along with this library; see the file COPYING.LIB.  If not, write to",23051],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["* along with this library; see the file COPYING.LIB.  If not, write to",26690],["along with this library; see the file COPYING.LIB.  If not, write to",23776],["// with this library; see the file COPYING3.  If not see",42545],["*    Non-Carbon CFM:   not available",20001],["*    CarbonLib:        not available",19204],["*  along with XBMC; see the file COPYING.  If not, see",18715],["*   along with this program; if not, write to the                         *",17766],["*   along with this program; if not, write to the                         *",15589]],"useCount":11459831},{"word":"note","context":[["@return sum of all outputs (note: does not include fees)",3136],["* @note:",2929],["* \\note",4134],["\\note",4592],["* @note    Disabling this option saves both code and data space.",4883],["* @note    The default is @p FALSE.",5730],["* @note    The default is @p TRUE.",10623],["* @note",16432],["@note",17686],["@note",21889]],"useCount":793460},{"word":"now","context":[["* 1-3 now and depends on arch. We use \"5\" as safe margin, here.",2514],["base::TimeTicks now = base::TimeTicks::Now();",2614],["struct tm* now_gmt = gmtime(&now);",3252],["// right now.",3439],["// Parse id now so errors from here on will have the id",3689],["time_t now;",5313],["// Deallocate old blocks since they're obsolete now",6138],["time_t now = time(NULL);",10766],["// Disable replacement feature for now",4162],["time(&now);",4601]],"useCount":1240344},{"word":"null","context":[["string strReply = JSONRPCReply(Value::null, objError, id);",3646],["return Value::null;",38765],["return null();",7952],["return QString::null;",6091],["strReply = JSONRPCReply(result, Value::null, jreq.id);",3482],["struct sched_domain *child;\t/* bottom domain must be null terminated */",3494],["struct sched_domain *parent;\t/* top domain must be null terminated */",3523],["reply.push_back(Pair(\"result\", Value::null));",3548],["return null;",3552],["// If locator is null, return the hashStop block",4126]],"useCount":813329},{"word":"nullptr","context":[["return nullptr;",296085],["nullptr,",5211],["nullptr);",5266],["return nullptr;",47114],["return nullptr;",25335],["nullptr,",16690],["DSP_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);",16256],["return nullptr;",9132],["nullptr,",6760],["nullptr);",6461]],"useCount":2067974},{"word":"num","context":[["*  @param  num  number of the item to be retrieved (0..num-1)",2908],["int num;",5826],["return num;",6526],["num++;",7019],["int num;",7660],["int num = 0;",5484],["const unsigned int n = (unsigned int)num;",3323],["num = 0;",3221],["++num;",2909],["*  @param  num  number of the item to be retrieved (0..num-1)",2908]],"useCount":748268},{"word":"number","context":[["BLAZE_INTERNAL_ASSERT( (~lhs).columns() == rhs.columns(), \"Invalid number of columns\" );",4213],["BLAZE_INTERNAL_ASSERT( (~lhs).rows()    == rhs.rows()   , \"Invalid number of rows\"    );",4213],["/* Version number of package */",6545],["\"[minconf] is the minimum number of confirmations before payments are included.\\n\"",6316],["template <typename number>",5862],["\"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");",5389],["0x0000,          // number of entries",4920],["// number or [name] Shift-click form |color|Hspell:spell_id|h[name]|h|r or Htalent form",4450],["// localized number formatting.",6549],["// Relay to a limited number of other nodes",4152]],"useCount":4407763},{"word":"o","context":[["case 'o':",7051],["const Value& v = find_value(o, t.first);",3498],["void RPCTypeCheck(const Object& o,",3490],["return o;",13216],["Object o;",7638],["float x, y, z, o;",5910],["return o;",5335],["delete o;",3849],["case 'o':",3832],["std::ostringstream o;",3754]],"useCount":1476010},{"word":"obj","context":[["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["if (obj) {",54402],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["JSObject *obj = JS_THIS_OBJECT(cx, vp);",15958],["Object obj;",25050],["if (obj && !PythonQtSlotFunction_Check(obj)) {",25725],["Py_DECREF(obj);",77156],["if (obj && !PythonQtSlotFunction_Check(obj)) {",25725],["js_proxy_t *proxy = jsb_get_js_proxy(obj);",25834],["return obj;",30520]],"useCount":2784938},{"word":"object","context":[["* Creates a daeMetaElement object that describes this element in the meta object reflection framework.",6032],["* Creates a daeMetaElement object that describes this element in the meta object reflection framework.",6032],["delete object;",6080],["#include <glib-object.h>",20580],["return QDialog::eventFilter(object, event);",7596],["// this header file considered to be the \"object code\" form of the original source.",7643],["/* [unique][uuid][object] */",9321],["/** Method for creation through the object factory. */",10225],["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989]],"useCount":4023013},{"word":"objects","context":[["* objects (see http://code.google.com/p/googletest/wiki/Primer#String_Comparison) */",1967],["\"Returns an array of objects containing:\\n\"",6325],["// Next default values for new objects",8484],["#include \"server/zone/objects/scene/SceneObject.h\"",2128],["* but explicitly does not cover any code or objects generated by sdcc.",2271],["// get the info objects",2734],["// Put this in a block, so that the Model objects are cleaned up before",2959],["// Since the order of destruction of static/global objects is undefined,",2304],["\"(array of objects containing transaction id and output number),\\n\"",2204],["// Convert argument list to JSON objects in method-dependent way,",2351]],"useCount":731983},{"word":"of","context":[["This file is part of OpenFOAM.",27906],["@return Result of the function call",25364],["** packaging of this file.  Please review the following information to",101077],["** packaging of this file.  Please review the following information to",89527],["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["* This file is part of the LibreOffice project.",39451],["** If you have questions regarding the use of this file, please contact",34088],["** If you have questions regarding the use of this file, please contact",31367],["// This file is distributed under the University of Illinois Open Source",29309],["** This file is part of Qt Creator.",24818]],"useCount":35712576},{"word":"off","context":[["// clang-format off",3437],["/** Make a particular network entirely off-limits (no automatic connects to it) */",3638],["* An i/f to runtime opt-in for irq time accounting based off of sched_clock.",3157],["// Take highest priority transaction off the priority queue:",2726],["\"<generate> is true or false to turn generation on or off.\\n\"",2489],["// Get parameter 1 off the stack.",2172],["#pragma import off",2315],["// Trim off sign byte if present",2274],["// Turn off microsoft heap dump noise",2072],["// Turn off Microsoft heap dump noise",4960]],"useCount":827839},{"word":"offset","context":[["*(outbuffer + offset++) = 0;",9138],["int offset = 0;",9932],["int offset = 0;",10472],["offset = 0;",8663],["* c-basic-offset: 4",8512],["offset++;",7652],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["return offset;",11439],["return offset;",7385],["uint32_t offset;",8747]],"useCount":3947237},{"word":"ok","context":[["ok = false;",23552],["if(!ok)",43673],["bool ok;",40942],["bool ok  = true;",39818],["bool ok = true;",33613],["return ok;",31145],["bool ok = false;",26049],["if (!ok)",22409],["if (ok)",17792],["if (!s.ok()) {",15014]],"useCount":1196116},{"word":"old","context":[["// slack space in .dat files; that is bad if the old data is",3550],["// Deallocate old blocks since they're obsolete now",6138],["return old;",4765],["// Relay inventory, but don't relay old inventory during initial block download",3784],["addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old",3728],["/* Remove the current tasks stale references to the old mm_struct */",3561],["// BDB seems to have a bad habit of writing old data into",3548],["// If updated, erase old tx from wallet",3445],["return old;",3364],["/** Count ECDSA signature operations the old-fashioned (pre-0.6) way",3318]],"useCount":815071},{"word":"on","context":[["/* @brief Number of external pin port on specified port. */",6112],["/* rq on which this entity is (to be) queued: */",6945],["* included with this distribution, and on the openscenegraph.org website.",5434],["* [WPD00001943]Create WiFi test driver framework on WinXP",6278],["* depending on how many CPUs the kernel has booted up with)",6331],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["* Returns: 0 on success, -1 on failure",6340],["* Returns: 0 on success, -1 on failure",6340],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286]],"useCount":8776096},{"word":"once","context":[["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Only change once per interval",2771],["// Prioritize by fee once past the priority size or we run out of high-priority",2547],["#pragma once",601787],["#include <google/protobuf/stubs/once.h>",2206],["// it, if the remote node sends a ping once per second and this node takes 5",4073],["#pragma once",4225],["# pragma once",10209],["﻿#pragma once",19335],["// twice (once in the log, and once in the tables). This is already",2011]],"useCount":1099218},{"word":"one","context":[["// Recursively process any orphan blocks that depended on this one",3820],["*          This parameter can be one of the following values:",5939],["* If a daeMetaElement already exists it will return that instead of creating a new one.",6026],["// Don't know what it is, just say we already got one",4138],["// Each connection can only send one version message",4131],["// Recursively process any orphan transactions that depended on this one",4123],["/* Define to the one symbol short name of this package. */",7936],["*         This parameter can be one of the following values:",3908],["// These functions dispatch to one or all registered wallets",3890],["// Add transactions that depend on this one to the priority queue",3868]],"useCount":3068902},{"word":"only","context":[["* (CDDL) only, as it comes in the \"COPYING.CDDL\" file of the",7877],["only as a consequence of further modifications of THIS",4293],["***   call into the kernel available to libc.  It contains only constants,",4647],["// Need to update only after we know CreateNewBlock succeeded",5681],["* of those above. If you wish to allow use of your version of this file only",5726],["\"If the file does not exist, create it with owner-readable-only file \"",6171],["/*! NIFLIB_HIDDEN function.  For internal use only. */",6805],["*  @param  value  value to be set (single value only) or \"\" for no value",7159],["* of those above. If you wish to allow use of your version of this file only",9240],["// memory only",10464]],"useCount":4325661},{"word":"op","context":[["switch (op) {",7699],["switch (op) {",1953],["* set_policy() op must add a reference to any non-NULL @new mempolicy",2163],["* get_policy() op must add reference [mpol_get()] to any policy at",2163],["* If no [shared/vma] mempolicy exists at the addr, get_policy() op",2163],["// op end success 1",2464],["return op;",3332],["switch (op)",3523],["* Wrappers for p->thread_info->cpu access. No-op on UP.",3528],["switch (op) {",4297]],"useCount":1163839},{"word":"open","context":[["virReportError(VIR_ERR_INTERNAL_ERROR, \"%s\", _(\"connection not open\"));",2792],["\"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +",2920],["This file is part of the WebKit open source project.",3044],["atomic_t files;\t\t/* How many open files does this user have? */",3346],["// If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately",3315],["acceptor->open(endpoint.protocol());",6835],["c-file-offsets:((innamespace . 0)(inline-open . 0)(case-label . +))",2733],["// This source file is part of the Swift.org open source project",5446],["// This source file is part of the Swift.org open source project",3624],["/* open file information */",3565]],"useCount":1043950},{"word":"operation","context":[["The result code associated with performing the operation",11902],["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["* @return the cost of this operation or an error",2617],["error_ = \"Failed subtraction assignment operation\";",2670],["error_ = \"Failed addition assignment operation\";",2670],["* returns a future to the operation so that it can be executed in parallel to other requests.",6270],["* associated with the operation is added to XXX_delay.",3503],["* XXX_count is incremented on every XXX operation, the delay",3503],["ui->warningLabel->setText(tr(\"This operation needs your wallet passphrase to unlock the wallet.\"));",3068],["ui->warningLabel->setText(tr(\"This operation needs your wallet passphrase to decrypt the wallet.\"));",3065]],"useCount":937376},{"word":"operator","context":[["friend bool operator==(const CTransaction& a, const CTransaction& b)",3358],["// assignment operator.",3442],["friend bool operator!=(const CTransaction& a, const CTransaction& b)",3357],["Object operator()(const CKeyID &keyID) const {",3344],["operator ParamGenerator<T>() const {",6040],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["* Overloaded assignment operator",6386],["bool operator()(Unit* u)",3716],["const CRPCCommand *CRPCTable::operator[](string name) const",3586],["// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)",3541]],"useCount":2218087},{"word":"option","context":[["* either version 2, or (at your option)",2813],["* @note    Disabling this option saves both code and data space.",4883],["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");",3506],["if (option != options.end())",4041],["strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-daemon\\\"\");",3505],["// If -min option passed, start window minimized.",3316],["* either version 2, or (at your option)",3107],["/* Widget-to-option mapper */",3067],["TString opt = option;",3050]],"useCount":931152},{"word":"options","context":[["Options options = CurrentOptions();",7675],["* Miscellaneous configurable options",7969],["Options options;",5536],["* BOOTP options",5524],["uTypeOptions options;",5408],["options.create_if_missing = true;",4973],["DestroyAndReopen(options);",4735],["if (option != options.end())",4041],["Reopen(options);",3742],["CreateAndReopenWithCF({\"pikachu\"}, options);",3735]],"useCount":1566040},{"word":"or","context":[["*    documentation and/or other materials provided with the distribution.",34821],["* Redistribution and use in source and binary forms, with or without",251058],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",29139],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",29616],["*    and/or other materials provided with the distribution.",33452],["Redistribution and use in source and binary forms, with or without",40107],["// Redistribution and use in source and binary forms, with or without",42441],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",43690],["* Redistribution and use in source and binary forms, with or without",88602],["*    documentation and/or other materials provided with the distribution.",106352]],"useCount":10099391},{"word":"order","context":[["// Priority order to process transactions",3858],["int order;",4495],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["* order */",2884],["return order;",2623],[", bool SO >    // Storage order of the adapted sparse matrix",2584],["* order to include non-free header files and libraries.",2310],["// Since the order of destruction of static/global objects is undefined,",2304],["void split_page(struct page *page, unsigned int order);",2257],["* Pages are allocated by the slab allocator in order to provide memory",2236]],"useCount":1230577},{"word":"org","context":[["*      http://www.xbmc.org",9134],["* By Gerald Combs <gerald@wireshark.org>",8759],["** Contact: http://www.qt-project.org/legal",46977],["** Contact: http://www.qt-project.org/legal",40520],["*      http://xbmc.org",14709],["XCSoar Glide Computer - http://www.xcsoar.org/",13904],["* http://www.mozilla.org/MPL/",10626],["For the latest info, see http://www.ogre3d.org/",10372],["http://www.cocos2d-x.org",9663],["http://www.cocos2d-x.org",9025]],"useCount":1168756},{"word":"os","context":[["this->Superclass::PrintSelf(os, indent);",5555],["ostringstream os;",5888],["\"os\": {",7646],["this->Superclass::PrintSelf(os,indent);",9433],["return os;",10024],["std::ostringstream os;",11059],["return os;",12712],["void PrintSelf(ostream& os, vtkIndent indent);",16395],["return os;",21874],["GTUtilsTaskTreeView::waitTaskFinished(os);",4876]],"useCount":979235},{"word":"other","context":[["std::swap(_cached_size_, other->_cached_size_);",14303],["*    documentation and/or other materials provided with the distribution.",106352],["*      and/or other materials provided with the distribution.",14820],["*    the documentation and/or other materials provided with the",15130],["*     documentation and/or other materials provided with the distribution.",16201],["* in the documentation and/or other materials provided with the",18194],["* in the documentation and/or other materials provided with the",22044],["documentation and/or other materials provided with the distribution.",23913],["*    and/or other materials provided with the distribution.",33452],["*    documentation and/or other materials provided with the distribution.",34821]],"useCount":3338361},{"word":"otherwise","context":[["otherwise run, modify, and propagate the contents of THIS",4293],["PATENT CLAIMS or otherwise opposing any of the PATENT CLAIMS.",4293],["otherwise returns false.",3602],["// Set icon state: spinning if catching up, tick otherwise",3377],["** @return status, EC_Normal if successful, an error code otherwise",3284],["* otherwise.",3207],["// otherwise.",2489],["*  @return status, EC_Normal if successful, an error code otherwise",30879],["* TRUE on success otherwise FALSE",2444],["*  @return reference to specified item if successful, empty default item otherwise",2181]],"useCount":964587},{"word":"our","context":[["compatible FAT file system, and our tiny thread aware UDP/IP stack.",4134],["// Set up our form data.",3103],["// Only let other nodes change our time by so much",3395],["// always trickle our own transactions",3470],["// Add our coinbase tx as first transaction",3698],["int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)",3982],["// Do not store addresses outside our network",3993],["// Rebroadcast our address",4039],["// Advertise our address",4129],["// Track requests for our stuff",6133]],"useCount":805911},{"word":"out","context":[["/* [iid_is][out] */ void **ppvObject);",12339],["return out;",11947],["return out;",43552],["++out;",40460],["out++;",32087],["/* [annotation][out] */",31004],["/* [annotation][iid_is][out] */",29442],["goto out;",22029],["out <<",13960],["return out;",18641]],"useCount":4996893},{"word":"output","context":[["::google::protobuf::io::CodedOutputStream* output) const;",16013],["// output error for any still listed (not referenced from appropriate table) ids",3820],["return output;",15221],["::google::protobuf::io::CodedOutputStream* output) const {",14310],["::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;",13461],["unknown_fields(), output);",11311],["std::ofstream logfile(\"output\");",10590],["return output;",4289],["// Check for negative or overflow output values",4125],["return output;",4072]],"useCount":2387167},{"word":"over","context":[["}// end loop over 'r'",5285],["the message over the BUS */",4605],["// At default rate it would take over a month to fill 1GB",4206],["* @param chan The MAVLink channel this message will be sent over",4170],["// Take over previous transactions' spent pointers",4047],["}// end loop over 't'",3977],["unsigned int imbalance_pct;\t/* No balance until over watermark */",3524],["do { \t/* Skip over canary */",3404],["// 1.2 spec: http://groups.google.com/group/json-rpc/web/json-rpc-over-http",3371],["* that the FPU is used. If this is over a threshold, the lazy fpu",3251]],"useCount":743827},{"word":"override","context":[["bool Validate(SpellInfo const* /*spellInfo*/) override",12806],["void Reset() override",31567],["CreatureAI* GetAI(Creature* creature) const override",31512],["SpellScript* GetSpellScript() const override",24695],["void UpdateAI(uint32 diff) override",23247],["AuraScript* GetAuraScript() const override",16425],["void SetUp() override {",16418],["void JustDied(Unit* /*killer*/) override",10702],["void EnterCombat(Unit* /*who*/) override",8889],["void Register() override",41004]],"useCount":2157599},{"word":"owner","context":[["Unit* owner = GetOwner();",13507],["struct module *owner;",11431],[".owner = THIS_MODULE,",10967],["struct module\t\t*owner;",6996],["if (!owner)",6551],["if (Unit* owner = GetOwner())",6246],["\"If the file does not exist, create it with owner-readable-only file \"",6171],["if (!owner || owner->GetTypeId() != TYPEID_PLAYER)",4942],["if (!owner || owner->GetTypeId() != TYPEID_PLAYER)",4942],["if (owner)",4471]],"useCount":822917},{"word":"p","context":[["return p;",15533],["if (p) {",11568],["return p;",51749],["* <p>",21273],["++p;",20967],["++p)",16926],["p++;",45555],["Cell cell(p);",12424],["delete p;",11665],["return p;",10647]],"useCount":9177154},{"word":"pItem","context":[["if (Item* pItem = GetItemByPos(INVENTORY_SLOT_BAG_0, i))",16036],["if (!pItem)",12441],["if (pItem)",12241],["return pItem;",11459],["tempcount += pItem->GetCount();",8409],["items.Add(pItem);",5200],["if (Item* pItem = pBag->GetItemByPos(j))",4765],["pItem->SetState(ITEM_CHANGED, this);",4739],["ItemTemplate const* pProto = pItem->GetTemplate();",4567],["count += pItem->GetCount();",4210]],"useCount":691234},{"word":"packet","context":[["udata.BuildPacket(&packet);",2100],["GetSession()->SendPacket(&packet);",2094],["WorldPacket packet;",6215],["delete packet;",3102],["player->GetSession()->SendPacket(&packet);",2574],["packet.target_system = target_system;",2466],["unsigned char packet[] = {",2440],["return packet;",2312],["packet.target_component = target_component;",2232],["#include \"ns3/packet.h\"",2114]],"useCount":1489384},{"word":"page","context":[["#include <asm/page.h>",16861],["if (unlikely(PageSwapCache(page)))",6072],["struct page **pagep, void **fsdata);",5809],["struct page *page, void *fsdata);",5761],["struct page *page, void *fsdata);",5761],["if (!page)",5603],["struct page;",5454],["struct page **pages);",5282],["/* Define to the home page for this package. */",5062],["struct page *page;",4530]],"useCount":3157520},{"word":"pair","context":[["list<pair<CTxDestination, int64> > listSent;",8253],["deque<pair<int64, CInv> > vRelayExpiration;",2755],["set<pair<const CWalletTx*,unsigned int> > setCoins;",2887],["// Each pair gives a source name and a seed name.",3014],["using std::pair;",3106],["vector<pair<int, CBlockIndex*> > vStack;",3804],["Cell cell(pair);",3894],["typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;",5897],["::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);",6771],["list<pair<CTxDestination, int64> > listReceived;",8253]],"useCount":712008},{"word":"param","context":[["@param  pWDICtx:         pointer to the WLAN DAL context",17346],["*  @param  value  reference to variable in which the value should be stored",10435],["* @param env pointer to environment struct",11588],["* @param system_id ID of this system",11697],["* @param msg The MAVLink message to compress the data into",11697],["* @param component_id ID of this component (e.g. 200 for IMU)",11697],["* @param PeripheralBase Pointer to a peripheral registers structure (peripheral",12514],["@param",14864],["/// </param>",23839],["@param[in]",21961]],"useCount":7722939},{"word":"parameter","context":[["throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");",5682],["// unused parameter, used to be nMinDepth, keep type-checking it though",3538],["// see Step 2: parameter interactions for more information about these",3653],["// ********************************************************* Step 3: parameter-to-internal-flags",3656],["// ********************************************************* Step 2: parameter interactions",3656],["throw JSONRPCError(-8, \"Invalid parameter\");",3874],["assert(!\"GetWarnings() : invalid parameter\");",3888],["*         This parameter can be one of the following values:",3908],["throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);",4766],["*          This parameter can be one of the following values:",5939]],"useCount":1341309},{"word":"parameters","context":[["Nan::ThrowError(\"Too many parameters.\");",46573],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["// slots: signature, parameters, type, tag, flags",7088],["// Parse parameters",7081],["\"    (parameters\\n\"",4264],["// signals: signature, parameters, type, tag, flags",4174],["throw runtime_error(\"too few parameters\");",3770],["* @brief  The assert_param macro is used for function's parameters check.",3577],["// Prevent warnings for unused parameters...",3319],["// Attempt to match the parameters to a valid binding.",2703]],"useCount":1260346},{"word":"params","context":[["if (fHelp || params.size() != 1)",36282],["if (params.size() > 1)",41160],["if (fHelp || params.size() > 2)",15804],["if (params.size() > 2)",17426],["string strAccount = AccountFromValue(params[0]);",21333],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["if (fHelp || params.size() > 1)",26262],["if (fHelp || params.size() != 0)",26936],["if (params.size() > 0)",35234]],"useCount":3009417},{"word":"parent","context":[["if (parent)",6975],["QDialog(parent),",33344],[": QObject(parent)",12702],["Q_UNUSED(parent);",12176],["QWidget(parent),",10897],[": QWidget(parent)",9586],["QMainWindow(parent),",9094],["QObject(parent),",7231],["GObject parent;",5948],["QObject(parent)",6999]],"useCount":2453609},{"word":"part","context":[["* This file is part of the LibreOffice project.",39451],["/* This file is part of the KDE project",15226],["This file is part of GCC.",15284],["// This file is not part of the Qt API.  It exists purely as an",15375],["/* This file is part of the KDE project",17055],["// This file is part of the deal.II library.",17668],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["** This file is part of Qt Creator.",23254],["** This file is part of Qt Creator.",24818],["This file is part of OpenFOAM.",27906]],"useCount":2545832},{"word":"pass","context":[["// Only if ALL inputs pass do we perform expensive ECDSA signature checks.",4056],["// and pass it along with the method name to the dispatcher.",2352],["case Qt::Key_PageUp: /* pass paging keys to messages widget */",2343],["return pass;",2225],["* to hold the policy upon return.  Caller should pass NULL @new to",2163],["pass = pass && !fail;",1685],["pass = pass && !fail;",1685],["// TODO: pass in scriptChange instead of reservekey so",1604],["// Used to pass flags to the Bind() function",1556],["pass_list.push_back(pass.Pass());",1331]],"useCount":627794},{"word":"passed","context":[["result.push_back(Pair(\"wallet check passed\", true));",1992],["// Do triggers for unit (reflect triggers passed on hit phase for correct drop charge)",1993],["* vm_fault is filled by the the pagefault handler and passed to the vma's",2170],["* Return the pagecache index of the passed page.  Regular pagecache pages",2211],["* Parameter block passed down to zap_pte_range in exceptional cases.",2212],["* and ptrace_may_access with the mode parameter passed to it",2390],["// if successful, this moves the passed grant to the constructed node",2752],["// If -min option passed, start window minimized.",3316],["/*The user data passed in by UMAC, it will be sent back when the above",6283],["pUserData: user data will be passed back with the",6455]],"useCount":704995},{"word":"path","context":[["base::FilePath path;",5059],["path.close();",23250],["return path;",29606],["testSimplify(reporter, path, filename);",5433],["path.setFillType(SkPath::kEvenOdd_FillType);",5554],["path.moveTo(0, 0);",5554],["const char *path,",7013],["QPainterPath path;",7593],["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922],["SkPath path;",18262]],"useCount":3125687},{"word":"per","context":[["// -limitfreerelay unit is thousand-bytes-per-minute",4200],["\"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\" +",2916],["\"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\" +",2918],["unsigned int flags;\t/* per process flags, defined below */",3486],["struct pacct_struct pacct;\t/* per-process accounting information */",3501],["unsigned int\tflags;\t/* Private per-task flags */",3501],["/* per-UID process charging. */",3560],["// Only connect out to one peer per network group (/16 for IPv4).",3595],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["// it, if the remote node sends a ping once per second and this node takes 5",4073]],"useCount":897450},{"word":"pin","context":[["/* @brief Number of external pin port on specified port. */",6112],["/* @brief Index of port of external pin. */",6112],["// this pin",1014],["* PCMCIA config., multi-function pin tri-state",879],["#include \"pin.H\"",857],["const char *pin);",857],["* is called, therefore we cannot pin it and might observe the wrong value.",825],["uint8_t flash_charge; /* pin for charge */",717],["// In RAMPS uses servo pin 2. Can be changed in pins file. For other boards pin definition should be made.",683],["// In RAMPS uses servo pin 2. Can be changed in pins file. For other boards pin definition should be made.",683]],"useCount":587889},{"word":"pindex","context":[["if (pindex->IsInMainChain())",9238],["if (!pindex || !pindex->IsInMainChain())",9354],["if (!pindex || !pindex->IsInMainChain())",9354],["pindex = pindex->pnext;",11531],["pindex = pindex->pnext;",11531],["if (pindex->pprev)",12125],["if (!block.ReadFromDisk(pindex))",12214],["pindex = pindex->pprev;",13403],["pindex = pindex->pprev;",13403],["CBlockIndex* pindex = (*mi).second;",22473]],"useCount":914785},{"word":"platform","context":[["#include \"platform/RuntimeEnabledFeatures.h\"",4108],["#include \"platform/heap/Handle.h\"",10801],["#include \"public/platform/Platform.h\"",4968],["#include \"platform.h\"",3159],["#include \"platform/TraceEvent.h\"",2869],["#include \"third_party/WebKit/public/platform/WebString.h\"",2820],["// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com",2566],["#include \"platform/PlatformExport.h\"",2430],["#include \"platform.h\"",2339],["platform = false;",2228]],"useCount":586257},{"word":"player","context":[["player->CLOSE_GOSSIP_MENU();",27345],["if (!player)",32404],["if (player)",25342],["player->PlayerTalkClass->ClearMenus();",20740],["player->GetSession()->SendPacket(&data);",14679],["bool OnGossipHello(Player* player, Creature* creature)",10665],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->PrepareQuestMenu(creature->GetGUID());",7267],["Player* player = handler->GetSession()->GetPlayer();",6543]],"useCount":2898196},{"word":"pnode","context":[["pnode->Release();",11315],["if (!pnode->fDisconnect)",9607],["BOOST_FOREACH(CNode* pnode, vNodes)",53448],["BOOST_FOREACH(CNode* pnode, vNodesCopy)",24282],["pnode->CloseSocketDisconnect();",21264],["pnode->AddRef();",18873],["TRY_LOCK(pnode->cs_vSend, lockSend);",14804],["pnode->fDisconnect = true;",11903],["return (pnode);",11322],["if (pnode->hSocket == INVALID_SOCKET)",11209]],"useCount":661026},{"word":"point","context":[["// Right-trim excess zeros before the decimal point:",2322],["// Floating point number that is a multiple of the minimum difficulty,",2315],["This function is a possible cancellation point and therefore not",3792],["return point;",3586],["* These are the constant used to fake the fixed-point load-average",3570],["#define FIXED_1\t\t(1<<FSHIFT)\t/* 1.0 as fixed-point */",3474],["* to it, but pnext will only point forward to the longest branch, or will",3014],["\"amounts are double-precision floating point numbers\"",3000],["#define EXP_1\t\t1884\t\t/* 1/exp(5sec/1min) as fixed-point */",2918],["/* /sys/devices/system/cpu/cpufreq: entry point for global variables */",2771]],"useCount":1892978},{"word":"pointer","context":[["pEventData:      pointer to the event information structure",17098],["* @param env pointer to environment struct",11588],["function pointer will be called */",6857],["* @vif: &struct ieee80211_vif pointer from the add_interface callback.",5772],["* @v: pointer of type atomic_t",5300],["CBlock* pblock = &pblocktemplate->block; // pointer for convenience",3869],["* TASK is a pointer to the task whose backtrace we want to see (or NULL for current",3529],["* task), SP is the stack pointer of the first frame that should be shown in the back",3529],["// Get a pointer to the IShellLink interface.",3357],["@param  pWDICtx:         pointer to the WLAN DAL context",17346]],"useCount":2481537},{"word":"points","context":[["return points;",2293],["* decreased by one. The member data points to the next",1584],["* The member rem is set to 0. The member data points to the",1584],["points.clear();",1705],["/** Global variable that points to the active CCoinsView (protected by cs_main) */",1706],["/** Global variable that points to the active block tree (protected by cs_main) */",1712],["points = gaiaImport32( p_in, little_endian, endian_arch );",1872],["DurabilityPointsLoss(pItem, points);",1882],["* and then page->mapping points, not to an anon_vma, but to a private",1967],["* page->mapping points to its anon_vma, not to a struct address_space;",2123]],"useCount":995682},{"word":"port","context":[["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);",3541],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");",3581],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");",3581],["return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));",3627],["// Allow binding if the port is still in TIME_WAIT state after",3757],["/* @brief Index of port of external pin. */",6112],["/* @brief Number of external pin port on specified port. */",6112],["/* @brief Number of external pin port on specified port. */",6112],["int port;",6822],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);",3541]],"useCount":1450668},{"word":"pos","context":[["pos++;",18539],["return pos;",14444],["int pos = 0;",12958],["++pos;",12249],["const wxPoint& pos = wxDefaultPosition,",11424],["pos = 0;",10613],["Position pos;",9464],["*  @param  pos    index of the value to get (0..vm-1), -1 for all components",7990],["int pos;",7972],["if (pos.IsNull())",6082]],"useCount":2966698},{"word":"position","context":[["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["int position;",2066],["assert(m.position(0) == 0);",2086],["position++;",2285],["SetSourcePosition(expr->position());",2349],["// Truncate history from current position",2691],["return position;",5224],["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976]],"useCount":2046671},{"word":"possible","context":[["This function is a possible cancellation point and therefore not",3792],["// In case we are on a very long side-chain, it is possible that we already have",3600],["/* Do to the insanities of de_thread it is possible for a process",3499],["// to give every possible output value an equal possibility",3311],["// as LoadBlockIndex can take several minutes, it's possible the user",3261],["// TODO: make it possible to filter out categories (esp debug messages when implemented)",3092],["/* should be defined, if possible */",2831],["this exception also makes it possible to release a modified version",2468],["*   - Within single quotes, no escaping is possible and no special interpretation takes place",2344],["// and enable it by default or not. Try to enable it, if possible.",3639]],"useCount":724576},{"word":"power","context":[["/* Computing 2nd power */",4405],["POWERSAVINGS_BALANCE_NONE = 0,  /* No power saving load balance */",2268],["* cpu package for power savings",2268],["* Optimise SD flags for power savings:",2269],["unsigned int power, power_orig;",2416],["#if 0 /* BITS_PER_LONG > 32 -- currently broken: it increases power usage under light load  */",2440],["* CPU power of this group, SCHED_LOAD_SCALE being max power for a",2942],["* CPU power of this group, SCHED_LOAD_SCALE being max power for a",2942],["#define SD_SHARE_CPUPOWER\t0x0080\t/* Domain members share cpu power */",3179],["* @param[in] lp        low power enable flag",8042]],"useCount":604944},{"word":"pragma","context":[["#pragma pack(pop)",20875],["#pragma mark -",34989],["#pragma hdrstop",30543],["#pragma pack()",27738],["#pragma once",601787],["#pragma pack(1)",19479],["﻿#pragma once",19335],["#pragma empty_line",18669],["#pragma endregion",14070],["#pragma interface",13599]],"useCount":1685304},{"word":"prev","context":[["// Notify UI to display prev block's coinbase if it was ours",3780],["// Get prev block index",4167],["// Check timestamp against prev",4127],["// Get prev tx from single transactions in memory",4057],["const CScript& prevScript = prev.scriptPubKey;",3971],["// Read prev transaction",3841],["extern asmlinkage void schedule_tail(struct task_struct *prev);",3566],["const CWalletTx& prev = (*mi).second;",3497],["refalrts::Iter trash_prev = arg_begin->prev;",3392],["if (txin.prevout.n < prev.vout.size())",3322]],"useCount":581559},{"word":"previous","context":[["@param[in] mapInputs\tMap of previous transactions that have outputs we're spending",9027],["// Microsoft Visual C++ will insert additional declarations immediately before the previous line.",8538],["// Check against previous transactions",4277],["// Take over previous transactions' spent pointers",4047],["// Add previous supporting transactions first",3600],["// Check it again in case a previous version let a bad block in",3503],["/** An input of a transaction.  It contains the location of the previous",3216],["// Add previous txouts given in the RPC call:",2774],["// Fetch previous transactions (inputs):",2646],["\"For security reasons, previous backups of the unencrypted wallet file \"",2206]],"useCount":603641},{"word":"print","context":[["// print item",3809],["// print columns",3815],["virtual void print(String *str, enum_query_type query_type);",4050],["pblock->print();",4299],["void print();",4968],["block.print();",7146],["void print() const;",8824],["/// debug print",10182],["//// debug print",15925],["void print() const",26074]],"useCount":756911},{"word":"printf","context":[["printf(\"%s\\n\", strError.c_str());",17732],["printf(\"%s\", strErrors.str().c_str());",6265],["printf(\"socket closed\\n\");",6346],["printf(\"*** %s\\n\", strMessage.c_str());",6568],["printf(",8178],["printf(\"\\n\");",9292],["printf(\"| \");",10405],["printf(\"\\n\");",13005],["printf(\"%s\\n\", ToString().c_str());",16077],["printf(\"\\n\");",66438]],"useCount":1914236},{"word":"private","context":[["private:",432842],["private:",2979358],["private:",336875],["private slots:",117127],["@private",35471],["private:",25153],["private Q_SLOTS:",24586],["/*< private >*/",19860],["private slots:",14984],["private :",13487]],"useCount":4668515},{"word":"process","context":[["// Recursively process any orphan blocks that depended on this one",3820],["struct pacct_struct pacct;\t/* per-process accounting information */",3501],["/* ITIMER_REAL timer for the process */",3516],["* Test if a process is not yet dead (at most zombie state)",3523],["/* per-UID process charging. */",3560],["/* process credentials */",3561],["* pointers to (original) parent process, youngest child, younger sibling,",3565],["* Per process flags",3572],["// Priority order to process transactions",3858],["// Recursively process any orphan transactions that depended on this one",4123]],"useCount":1152820},{"word":"profile","context":[["profile,",3738],["#include \"chrome/browser/profiles/profile.h\"",36299],["Profile* profile,",13999],["Profile* profile,",4997],["Profile* profile) {",4782],["Profile* profile =",4266],["Profile* profile = Profile::FromWebUI(web_ui());",4041],["DCHECK(profile);",3376],["profile_(profile),",2982],[": profile_(profile),",4088]],"useCount":764123},{"word":"program","context":[["along with this program; see the file COPYING.  If not, write to",3794],["// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options",3423],["a copy of the GCC Runtime Library Exception along with this program;",3452],["// the program was closed and restarted.  Not an issue on windows.",3462],["// As the program has not fully started yet, Shutdown() is possibly overkill.",3750],["* This can be in the form of a textual message at program startup or",3775],["// a copy of the GCC Runtime Library Exception along with this program;",3926],["This program and the accompanying materials",4723],["*   along with this program; if not, write to the                         *",15589],["*   along with this program; if not, write to the                         *",17766]],"useCount":863268},{"word":"project","context":[["* project.",13617],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",4764],["// This source file is part of the Swift.org open source project",5446],["/*  modified, and distributed under the terms of the FreeType project      */",5690],["* This file is part of the coreboot project.",6492],["/* This file is part of the KDE project",15226],["/* This file is part of the KDE project",17055],["* This file is part of the LibreOffice project.",39451],["** Contact: http://www.qt-project.org/legal",40520],["** Contact: http://www.qt-project.org/legal",46977]],"useCount":651121},{"word":"property","context":[["@property(readonly) unsigned long long hash;",9463],["* @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when",3195],["// property members:",3449],["@property",3623],["@property(readonly) Class superclass;",9893],["@property(readonly, copy) NSString *description;",9894],["@property(readonly, copy) NSString *debugDescription;",9901],["* ScummVM is the legal property of its developers, whose names",12975],["* ScummVM is the legal property of its developers, whose names",19064],["@property (strong, nonatomic) UIWindow *window;",39369]],"useCount":1756356},{"word":"protected","context":[["protected:",1467619],["protected:",140500],["protected:",134307],["protected slots:",31094],["protected:",10113],["protected :",9584],["protected Q_SLOTS:",7046],["@protected",5162],["/* protected by mq_lock\t*/",3523],["* Atomicity of updates to XXX_delay, XXX_count protected by",3503]],"useCount":2053470},{"word":"proto","context":[["// add the proto and JSClass to the type->js info hash table",2068],["if(!proto)",2277],["ItemTemplate const* proto = m_items[i]->GetTemplate();",2028],["if (!proto)",14783],["proto = 0;",5121],["proto = atoi(ver+7);",5092],["struct proto *prot = sk->sk_prot;",4545],["int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)",3386],["_Spell const& spellData = proto->Spells[i];",2397],["ItemTemplate const* proto = item->GetTemplate();",2314]],"useCount":583632},{"word":"protobuf","context":[["static const ::google::protobuf::Descriptor* descriptor();",14423],["::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(",14660],["DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(",14825],["::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(",15588],["::google::protobuf::io::CodedOutputStream* output) const;",16013],["::google::protobuf::io::CodedInputStream* input);",16013],["target = ::google::protobuf::internal::WireFormatLite::",17049],[": ::google::protobuf::Message() {",17525],["DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<",22891],["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641]],"useCount":1177409},{"word":"protocol","context":[["uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;",16807],["uint32_t read(::apache::thrift::protocol::TProtocol* iprot);",16720],["using ::apache::thrift::protocol::TProtocolException;",9392],["if (ftype == ::apache::thrift::protocol::T_STRUCT) {",9321],["if (ftype == ::apache::thrift::protocol::T_STOP) {",9184],["::apache::thrift::protocol::TType ftype;",9184],["if (ftype == ::apache::thrift::protocol::T_STRING) {",6837],["iprot_->skip(::apache::thrift::protocol::T_STRUCT);",4426],["* INET\t\tAn implementation of the TCP/IP protocol suite for the LINUX",5266],["acceptor->open(endpoint.protocol());",6835]],"useCount":809608},{"word":"provided","context":[["*    and/or other materials provided with the distribution.",33452],["*    documentation and/or other materials provided with the distribution.",34821],["*    documentation and/or other materials provided with the distribution.",106352],["documentation and/or other materials provided with the distribution.",23913],["* in the documentation and/or other materials provided with the",22044],["* purpose with or without fee is hereby granted, provided that the above",18240],["* in the documentation and/or other materials provided with the",18194],["*     documentation and/or other materials provided with the distribution.",16201],["*    the documentation and/or other materials provided with the",15130],["*      and/or other materials provided with the distribution.",14820]],"useCount":1156337},{"word":"proxy","context":[["GetProxy(NET_IPV4, proxy);",4168],["if (mapArgs.count(\"-proxy\")) {",7119],["// even when -connect or -proxy is specified",3634],["proxyType proxy;",6453],["// to protect privacy, do not listen by default if a proxy server is specified",3041],["addrProxy = CService(mapArgs[\"-proxy\"], 9050);",3416],["return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));",3220],["// -tor can override normal proxy, -notor disables tor entirely",3125],["js_proxy_t *proxy = jsb_get_js_proxy(obj);",25834],["return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"].c_str()));",3028]],"useCount":607215},{"word":"ptr","context":[["OrigDataType: (ptr word32)",4100],["DataType: (ptr byte)",4382],["DataType: (ptr word32)",5234],["void *ptr;",5362],["ptr++;",5729],["ptr++;",9140],["return ptr;",9980],["return ptr;",11856],["void *ptr;",4095],["++ptr;",4044]],"useCount":2308784},{"word":"public","context":[["public slots:",132193],["public:",5695614],["public:",1270988],["public:",508346],["#include \"content/public/browser/browser_thread.h\"",30636],["public :",27784],["#include \"content/public/browser/web_contents.h\"",26274],["public Q_SLOTS:",26094],["public:",66391],["#include \"content/public/browser/notification_service.h\"",16924]],"useCount":11122951},{"word":"push","context":[["#pragma GCC diagnostic push",4031],["#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac",3609],["#pragma warning(push)",11118],["#pragma clang diagnostic push",9960],["#pragma pack(push, 1)",7917],["#pragma warning(push)",6090],["// push the result flag",4696],["// push the result datatype",4172],["// push the result number",3858],["#pragma pack(push,1)",3769]],"useCount":609215},{"word":"push_back","context":[["vEraseQueue.push_back(inv.hash);",7211],["form.fields.push_back(field);",18192],["ret.push_back(entry);",12213],["ret.push_back(obj);",9138],["vNodes.push_back(pnode);",7547],["vInv.push_back(inv);",7283],["obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));",7124],["obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));",7054],["vAdd.push_back(addr);",6773],["obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));",6423]],"useCount":3652978},{"word":"pwalletMain","context":[["if (pwalletMain->IsLocked())",8290],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["if (pwalletMain)",7451],["LOCK2(cs_main, pwalletMain->cs_wallet);",12133],["if (!pwalletMain->IsLocked())",7715],["pwalletMain->ReacceptWalletTransactions();",7799],["if (!pwalletMain->IsCrypted())",10631],["pwalletMain->TopUpKeyPool();",10869],["CWalletDB walletdb(pwalletMain->strWalletFile);",12036]],"useCount":597708},{"word":"q","context":[["__set_bit(flag, &q->queue_flags);",2456],["++q;",2678],["case 'q':",3000],["struct request_queue *q)",3283],["q=new RDSqlQuery(sql);",3305],["q.pop();",3384],["q=new QSqlQuery(sql);",4029],["return q;",4251],["case 'q':",4581],["delete q;",11284]],"useCount":1226553},{"word":"qt","context":[["** conditions see http://qt.digia.com/licensing.  For further information",30797],["** Contact: http://www.qt-project.org/legal",46977],["** Contact: Nokia Corporation (qt-info@nokia.com)",45228],["** Contact: http://www.qt-project.org/legal",40520],["** Contact: Nokia Corporation (qt-info@nokia.com)",39062],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** Nokia at qt-info@nokia.com.",24043],["** Nokia at qt-info@nokia.com.",28466],["** use the contact form at http://qt.digia.com/contact-us.",34423]],"useCount":603274},{"word":"query","context":[["/* query the last known CPU freq (in kHz). If zero, cpufreq couldn't detect it */",2397],["que_thr_t*\tthr)\t/*!< in: query thread */",2146],["/* query the current CPU frequency (in kHz). If zero, cpufreq couldn't detect it */",2411],["ip::tcp::resolver::query query(server.c_str(), port.c_str());",3220],["m_pDS->query( strSQL.c_str() );",2003],["QSqlQuery query;",4980],["ip::tcp::resolver::query query(server.c_str(), port.c_str());",3220],["query.exec();",4529],["ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);",3229],["m_pDS->query(strSQL.c_str());",2036]],"useCount":918809},{"word":"queue","context":[["#include <queue>",16918],["#include <sys/queue.h>",3253],["magma_queue_t queue );",3468],["* the run-queue from deletions/modifications (but",3557],["* _adding_ to the beginning of the run-queue has",3557],["*\t@list: queue head",3636],["// Add transactions that depend on this one to the priority queue",3868],["skb != (struct sk_buff *)(queue);\t\t\t\t\\",3949],["#include <queue>",19571],["#include <queue>",4125]],"useCount":1015073},{"word":"r","context":[["return r;",36791],["CTxDB txdb(\"r\");",31507],["int r;",23145],["return r;",22191],["\"\\r\\n\"",13651],["info.GetReturnValue().Set(Nan::New(r));",13344],["int r;",12486],["case 'r':",10926],["r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,",9458],["return r;",72527]],"useCount":5078361},{"word":"range","context":[["for (; range.first != range.second; ++range.first)",2662],["return range;",2525],["/* [range][in] */ __RPC__in_range(0,16384) UINT cNames,",4613],["// Check range",4062],["// The range of the random source must be a multiple of the modulus",3310],["throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");",3062],["\"  \\\"noncerange\\\" : range of valid nonces\\n\"",3046],["for (; range.first != range.second; ++range.first)",2662],["for (; range.first != range.second; ++range.first)",2662],["* tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority",2525]],"useCount":1581745},{"word":"rc","context":[["if (RT_SUCCESS(rc))",67834],["int rc;",28252],["AssertRC(rc);",20718],["return rc;",14223],["int rc = VINF_SUCCESS;",19309],["AssertRCReturn(rc, rc);",16733],["AssertRCReturn(rc, rc);",16733],["return rc;",167185],["if (RT_FAILURE(rc))",68316],["return rc;",14314]],"useCount":1906828},{"word":"re","context":[["// If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately",3315],["// Largest block you're willing to create:",2743],["* called, but you're in IRQ context */",2834],["* The file is automatically generated and will be re-written when",3308],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["* can write to the child->flags), because we're guaranteed the",3518],["// Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.",3664],["// Ask this guy to fill in what we're missing",4754],["// Deallocate old blocks since they're obsolete now",6138],["@param[in] mapInputs\tMap of previous transactions that have outputs we're spending",9027]],"useCount":1114281},{"word":"read","context":[["// strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:",3944],["* Only the _current_ task can read/write to tsk->flags, but other",3518],["// Open history file to read",4532],["uint32_t read(::apache::thrift::protocol::TProtocol* iprot);",16720],["*  @pre Parameters should be parsed and config file should be read.",3647],["* alone is a single word that can safely be read normally.",3524],["read(from, end, cons);",3466],["stream.read(&vch[0], nLen);",3429],["return state.Abort(_(\"Failed to read block\"));",3389],["std::streamsize read(char* s, std::streamsize n)",3224]],"useCount":2159408},{"word":"received","context":[["// Process this block the same as if we had received it from another node",4477],["is being received over the bus from HAL)",2965],["\"[includeempty] whether to include accounts that haven't received any payments.\\n\"",3154],["wdiStatus:  response status received from HAL",5108],["// have been mined or received.",4058],["printf(\"GetMyExternalIP() received [%s] %s\\n\", strLine.c_str(), addr.ToString().c_str());",3174],["\"[includeempty] whether to include addresses that haven't received any payments.\\n\"",3158],["\"so payments received with the address will be credited to [account].\");",3149],["\"  \\\"amount\\\" : total amount received by the address\\n\"",3158],["\"  \\\"amount\\\" : total amount received by addresses with this account\\n\"",3153]],"useCount":576091},{"word":"record","context":[["return record;",1170],["table->record[0])) &&",1036],["// Versions prior to 0.4.0 did not support the \"minversion\" record.",1082],["record->addItem(item);",1100],["printf(\"Error reading next record from wallet database\\n\");",976],["// Rescan if there is a bad transaction record:",1162],["// Read next record",3783],["store_record(table,record[1]);",1415],["return error(\"Invalid record\");",1767],["/**  A txdb record that contains the disk location of a transaction and the",1886]],"useCount":805631},{"word":"rect","context":[["const gfx::Rect& rect,",2572],["const wxRect& rect,",2535],["#include \"ui/gfx/geometry/rect.h\"",3508],["GetClientRect(&rect);",2189],["#include \"ui/gfx/rect.h\"",3939],["#include \"ui/gfx/rect.h\"",4688],["CRect rect;",5910],["RECT rect;",8103],["return rect;",8822],["#include \"ui/gfx/geometry/rect.h\"",2678]],"useCount":1096262},{"word":"ref","context":[["* \\return \\ref image_data_error_codes, \\ref roi_error_codes",6270],["/*:ref: chkout_ 14 2 13 124 */",3978],["* \\param nSrcStep \\ref source_image_line_step.",4527],["* \\param pDst \\ref destination_image_pointer.",4933],["* \\param nDstStep \\ref destination_image_line_step.",5116],["atomic_t ref;",5712],["* \\return \\ref image_data_error_codes, \\ref roi_error_codes",6270],["/*:ref: chkin_ 14 2 13 124 */",3975],["* \\param oSizeROI \\ref roi_specification.",6848],["return ref;",8685]],"useCount":1352928},{"word":"reference","context":[["* Grab a reference to a task's mm, if it is not already going away",2390],["// TODO: reference additional headers your program requires here",2465],["reference",2489],["// Need a global reference for the notifications to find the GUI",2976],["/* Grab a reference to a task's mm, if it is not already going away */",3529],["atomic_t __count;\t/* reference count */",3550],["// TODO: reference any additional headers you need in STDAFX.H",5363],["*    project by purchasing a FreeRTOS tutorial book, reference          *",2324],["*  @param  value  reference to variable in which the value should be stored",10435],["* For the non-reserved pages, page_count(page) denotes a reference count.",2269]],"useCount":995348},{"word":"reg","context":[["} reg;",23936],["uint32_t reg;                /*!< Type      used for register access              */",6788],["uint8_t reg;                 /*!< Type      used for register access              */",6134],["(index) * STRIDE_##scope##_##reg )",3696],[".reg\t\t= 0x64,",3312],[".reg\t\t= 0x00,",3312],[".reg\t\t= 0x66,",3286],[".reg\t\t= 0x04,",2759],[".reg\t\t= 0x01,",2725],["uint16_t reg;                /*!< Type      used for register access              */",2664]],"useCount":1308614},{"word":"register","context":[["uint16_t reg;                /*!< Type      used for register access              */",2664],["register int i;",2332],["register struct hci_proto *hp;",2764],["* An architecture is expected to register range of page frames backed by",2180],["// register.",82789],["uint32_t reg;                /*!< Type      used for register access              */",6788],["uint8_t reg;                 /*!< Type      used for register access              */",6134],["/** register bits */",5872],["/** raw register data */",5867],["// The following are defines for the bit fields in the GPIO_PCTL register for",3783]],"useCount":3331959},{"word":"registers","context":[["data->Initialize(arraysize(registers), registers, NULL);",1065],["* @param PeripheralBase Pointer to a peripheral registers structure (peripheral",12514],["*        base address). You can use the constant defined in the registers",12514],["* that can be used to drive LEDs if your driver registers a LED device.",1082],["/* Overlapped registers: */",1318],["*           - Macros to access peripherals registers hardware",1355],["*           - Peripheral's registers declarations and bits definition",1598],["* @note   After reset, the peripheral clock (used for registers read/write access)",2065],["data->InitializePlatformSpecific(arraysize(registers), registers);",2152],["data->InitializePlatformSpecific(arraysize(registers), registers);",2152]],"useCount":719132},{"word":"reinterpret_cast","context":[["reinterpret_cast<void**>(&psl));",3297],["reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;",8535],["void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };",6334],["::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);",2220],["::std::string(reinterpret_cast<const char*>(value), size));",2270],["reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;",2583],["self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;",2845],["*reinterpret_cast<int*>(_a[0]) = -1;",2993],["reinterpret_cast<void**>(&ppf));",3216],["handle = reinterpret_cast<GEOSContextHandleInternal_t*>(extHandle);",3316]],"useCount":904785},{"word":"release","context":[["release();",2180],["alock.release();",5172],["release();",5141],["void release();",3749],["// release outbound grant (if any)",3640],["* pins the final release of task.io_context.  Also protects ->cpuset and",3476],["return list.release();",3206],["return result.release();",2905],["this exception also makes it possible to release a modified version",2468],["* into the filesystem to release these pages.",2236]],"useCount":641531},{"word":"remove","context":[["// spells required only Real aura add/remove",4114],["// remove fake death",9893],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["mempool.remove(tx);",5651],["if (remove)",4857],["remove = true;",4230],["// can be duplicated to remove the ability to spend the first instance -- even after",4051],["boost::filesystem::remove(GetPidFile());",3801],["// remove from vNodes",3758],["vNodesDisconnected.remove(pnode);",3758]],"useCount":1169827},{"word":"removed","context":[["// item set bonuses applied only at equip and removed at unequip, and still active for broken items",2420],["// Check if aura was removed during iteration - we don't need to work on such auras",2385],["#define CPUFREQ_STICKY\t\t0x01\t/* the driver isn't removed even if",2420],["// which is not correct. Can be removed, when GCCs winbase.h is fixed!",2789],["// This can be removed eventually...",2949],["//       removed.",3219],["printf(\"mapOrphan overflow, removed %u tx\\n\", nEvicted);",3389],["* the code are not to be removed.",3713],["// version without notice, or even be removed.",19083],["* removed!",94206]],"useCount":605986},{"word":"req","context":[["req.Start();",2454],["struct request_sock *req,",4923],["* @param req request handle",2258],["struct msmfb_overlay_blt *req);",3155],["if (i->first.startsWith(\"req-\"))",3240],["scoped_ptr<SpdyFrame> req(",3415],["static Object JSONRPCExecOne(const Value& req)",3473],["req->Start();",3513],["jreq.parse(req);",3563],["req has returned PENDING as status; it delivers the status of sending",4605]],"useCount":580637},{"word":"request","context":[["// Send request",4593],["HttpRequestInfo request;",11511],["request.method = \"GET\";",9502],["request.load_flags = 0;",7778],["net::URLRequest* request,",7529],["// Parse request",7256],["* Delivers a request to the X server.",7148],["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917],["In state BUSY this request will be queued. Request won't",5344]],"useCount":2127970},{"word":"required","context":[["@required",14783],["appreciated but is not required.",7750],["// spells required only Real aura add/remove",4114],["// minimum amount of work that could possibly be required nTime after",3653],["* This is required every time the blocked sigset_t changes.",3490],["@return maximum number of sigops required to validate this transaction's inputs",3318],["* Note: There might be duplicate includes required by more than one driver.",3310],["// Minimum disk space required - used in CheckDiskSpace()",3203],["// minimum work required was nBase",2880],["// Forward declaration required for RPCListen",3338]],"useCount":789064},{"word":"res","context":[["return res;",171071],["int res;",8558],["if (res)",8028],["return res;",53317],["return res;",41444],["if (res != EQUIP_ERR_OK)",31585],["return res;",12632],["int res;",11095],["_v = SWIG_CheckState(res);",40445],["_v = SWIG_CheckState(res);",9738]],"useCount":2143230},{"word":"reserved","context":[["{0, 0, 0, 0, 0, 0},  //reserved no used",79026],["u8 reserved;",7116],["u16                  reserved;",6211],["u16 reserved;",4960],["cell.data.Part.reserved = ALL_DISTRICT;",4763],["u32 reserved;",3461],["u8 reserved[3];",3402],["uint16_t                  reserved;",3331],["uint8_t reserved;",2875],["__le16 reserved;",2646]],"useCount":676500},{"word":"reset","context":[["void reset();",27685],["reset();",38712],["void reset() {",4827],["void reset()",5184],["virtual void reset();",5401],["reset();",8496],["reset();",8744],["ios.reset();",14178],["s.reset(read_data, sizeof(read_data));",16714],["s.reset();",17270]],"useCount":1690278},{"word":"resize","context":[["pubkeys.resize(keys.size());",3510],["txindex.vSpent.resize(txPrev.vout.size());",2117],["ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());",2188],["vchData.resize(vchTemp.size() - 1);",2203],["vchRet.resize(vchRet.size()-4);",2266],["vchData.resize(nSize);",2266],["strLine.resize(strLine.size()-1);",3368],["txNew.vout.resize(1);",7755],["txNew.vin.resize(1);",7904],["vSpent.resize(nOutputs);",1934]],"useCount":601682},{"word":"resource","context":[["#include <sys/resource.h>",2594],["#include \"ui/base/resource/resource_bundle.h\"",15589],["#include \"resource.h\"",10377],["#include <sys/resource.h>",5021],["#include \"resource.h\"",4581],["#include <sys/resource.h>",4516],["#include <linux/resource.h>",4212],["* Cumulative resource counters for dead threads in the group,",3526],["*\t\t\trequest if it runs into resource problems.",1773],["#pragma resource \"*.dfm\"",2117]],"useCount":585018},{"word":"response","context":[["/* Check response is as expected */",3597],["EXPECT_EQ(\"HTTP/1.1 200 OK\", response->headers->GetStatusLine());",3350],["ASSERT_TRUE(response != NULL);",9402],["const HttpResponseInfo* response = trans->GetResponseInfo();",7559],["wdiStatus:  response status received from HAL",5108],["return response;",4521],["// Shutdown will take long enough that the response should get back",3685],["throw runtime_error(\"no response from server\");",3616],["// the last block in an inv bundle sent in response to getblocks. Try to detect",3600],["if (strLine.empty()) // HTTP response is separated from headers by blank line",3373]],"useCount":926842},{"word":"result","context":[["return result;",566191],["Field* fields = result->Fetch();",94858],["if (!result)",106673],["return result;",169038],["if (result) { Py_DECREF(result); }",75633],["if (result) { Py_DECREF(result); }",75633],["while (result->NextRow());",64748],["if (result)",64507],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["return result;",183409]],"useCount":8982371},{"word":"results","context":[["If this results in a DOS the user really",2908],["return results;",10678],["*\t@return results of bus communication function",4212],["results.push_back(entry);",3574],["// in erroneous results and/or in compilation errors. Instead of using this function use the",3258],["Array results;",2650],["sqlite3_free_table( results );",1643],["return results;",1705],["results->AddResult(false);",1699],["results->AddResult(true);",1671]],"useCount":589850},{"word":"ret","context":[["if (ret)",15649],["return ret;",435582],["Array ret;",17437],["ret = true;",18105],["bool ret = false;",20160],["int ret = 0;",23060],["int ret;",26565],["int ret;",38218],["return ret;",74996],["return ret;",130691]],"useCount":3438139},{"word":"return","context":[["return 0;",2759110],["return;",7424599],["return false;",6375924],["return true;",4657558],["return false;",1231778],["return;",1537735],["return NULL;",983899],["return true;",918038],["return 1;",789361],["return 0;",717883]],"useCount":85209819},{"word":"returned","context":[["strError = strprintf(\"Error: Listening for incoming connections failed (listen returned error %d)\", WSAGetLastError());",3348],["fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);",3617],["throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));",3563],["\\param  hHal - The handle returned by macOpen.",6549],["\\param hHal - The handle returned by macOpen.",6025],["req has returned PENDING as status; it delivers the status of sending",4605],["* returned.",3964],["* a reply to be generated. Any returned error will be",3878],["// Help text is returned in an exception",3734],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626]],"useCount":1018892},{"word":"returns","context":[["/// <returns>",18615],["* @returns VBox status code.",28471],["* @returns IPRT status code.",5114],["* Creates an instance of this class and returns a daeElementRef referencing it.",6032],["* returns a future to the operation so that it can be executed in parallel to other requests.",6270],["* @returns VBox status code.",7239],["// returns true if decoding is successful",8653],["// returns true if wasn't already contained in the set",8694],["* @returns IPRT status code.",4838],["/// </returns>",18753]],"useCount":1858950},{"word":"retval","context":[["* @retval None",60150],["@retval",51732],["return retval;",50225],["return retval;",32880],["return retval;",15537],["retval = false;",11423],["int retval;",8343],["if (retval) {",7545],["* @retval State of bit (1 or 0).",6353],["* @retval None.",5079]],"useCount":1215901},{"word":"rhs","context":[["*this = rhs;",1368],["BLAZE_INTERNAL_ASSERT( (~lhs).columns() == rhs.columns(), \"Invalid number of columns\" );",4213],["return !(*this == rhs);",14652],["// \\param rhs The right-hand side iterator.",1547],["if (this != &rhs) {",1569],["return !(lhs == rhs);",1801],["if (this != &rhs)",1876],["BLAZE_INTERNAL_ASSERT( (~lhs).size() == rhs.size(), \"Invalid vector sizes\" );",2119],["if (!(success == rhs.success))",3517],["BLAZE_INTERNAL_ASSERT( (~lhs).rows()    == rhs.rows()   , \"Invalid number of rows\"    );",4213]],"useCount":648429},{"word":"right","context":[["right = left;",3766],["// \\param B The right-hand side multiplication operand.",4298],["* - Speaker front right",4208],["inputs_[1] = right;",2895],["// and we want it right after the last block so they don't",3287],["// right now.",3439],["return Hash(BEGIN(left), END(left), BEGIN(right), END(right));",3444],["return Hash(BEGIN(left), END(left), BEGIN(right), END(right));",3444],["* pid, we don't actually care if we have the right task.",3499],[", typename MT5 >  // Type of the right-hand side matrix operand",2661]],"useCount":1567096},{"word":"root","context":[["#define MMF_DUMP_SECURELY 1  /* core file is readable only by root */",3228],["if (!root)",3303],["* genesis block at the root, with each block potentially having multiple",3409],["struct rb_root *root);",3971],["return root;",6261],["root[\"status\"] = \"OK\";",6684],["struct btrfs_root *root,",7691],["*  be found in the AUTHORS file in the root of the source tree.",13737],["*  be found in the AUTHORS file in the root of the source tree.",14568],["/* For IDL files that don't want to include root IDL files. */",15792]],"useCount":1226363},{"word":"row","context":[["int row = index.row();",4853],["\\row",10542],["row++;",6275],["int row = index.row();",4853],["int row = 0;",4699],["++row;",3982],["Unit unit = unitlist.at(row);",3234],["if(row >= 0 && row < unitlist.size())",3228],["if(row >= 0 && row < unitlist.size())",3228],["mapper->setCurrentIndex(row);",2924]],"useCount":1437533},{"word":"run","context":[["otherwise run, modify, and propagate the contents of THIS",4293],["ios.run();",15479],["void run();",14931],["***   be run. You've been warned!",3431],["unsigned long pcount;\t      /* # of times run on this cpu */",3473],["virtual void run();",5355],["last_queued;\t/* when we were last queued to run */",3522],["* the run-queue from deletions/modifications (but",3557],["* _adding_ to the beginning of the run-queue has",3557],["void run() {",4415]],"useCount":959281},{"word":"rv","context":[["SendCoinsRecipient rv;",8931],["nsresult rv;",8772],["rv = callback.WaitForResult();",12781],["return rv;",13249],["EXPECT_EQ(OK, rv);",17266],["return rv;",22060],["EXPECT_EQ(ERR_IO_PENDING, rv);",23575],["NS_ENSURE_SUCCESS(rv, rv);",27588],["NS_ENSURE_SUCCESS(rv, rv);",27588],["return rv;",41403]],"useCount":738160},{"word":"s","context":[["s.reset(read_data, sizeof(read_data));",16714],["return s;",64203],["return s;",35783],["} s;",23676],["return s;",18344],["s++;",18122],["printf(\"%s\\n\", strError.c_str());",17732],["s.reset();",17270],["printf(\"%s\\n\", ToString().c_str());",16077],["if (!s.ok()) {",15014]],"useCount":15381435},{"word":"sLog","context":[["sLog->outErrorDb(\"CreatureEventAI:  Event %u Action %u uses incorrect Target type\", i, j+1);",528],["sLog.outString();",49869],["sLog->outString();",32810],["sLog.outError(\"*****************************************************************************\");",988],["sLog->outDebug(LOG_FILTER_NETWORKIO, \"Opcode %u\", recvPacket.GetOpcode());",853],["sLog.outString(\"\");",736],["sLog.outErrorDb(\"CreatureEventAI:  Event %u Action %u uses incorrect Target type\", i, j+1);",669],["sLog.outDebug(\"Opcode %u\", recvPacket.GetOpcode());",625],["sLog->outErrorDb(\"Creature '%u' linking to '%u' on an unpermitted map.\", guidLow, linkedGuidLow);",575],["sLog->outDebug(LOG_FILTER_BATTLEGROUND, \"BG_AV Quest %i completed (need to implement some events here\", questid);",560]],"useCount":751995},{"word":"sa","context":[["\\sa",9077],["StringAccum sa;",1271],["\\sa setValue()",1598],["* \\sa",3266],["sa.sa_handler = HandleSIGTERM;",3812],["sigaction(SIGTERM, &sa, NULL);",3936],["sigaction(SIGINT, &sa, NULL);",3966],["sa.sa_flags = 0;",4381],["sigemptyset(&sa.sa_mask);",4714],["struct sigaction sa;",5491]],"useCount":598181},{"word":"same","context":[["// Fee-per-kilobyte amount considered the same as \"free\"",2789],["* child->flags of its traced child (same goes for fork, the parent",3518],["\"  -tor=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\"",2893],["* other node doesn't have the same branch, it can find a recent common trunk.",3399],["// Allow replacing with a newer version of the same transaction",3444],["* at the same time the parent does it.",3518],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["\"The username and password MUST NOT be the same.\\n\"",4169],["// Process this block the same as if we had received it from another node",4477],["***   of the same name, to make information necessary for userspace to",4661]],"useCount":1630925},{"word":"save","context":[["void save();",5777],["painter->save();",15110],["const void*\t\t\tsave)\t/*!< in: immediate result",3007],["* saving becomes unlazy to save the trap. This is an unsigned char",3251],["case 2:                                         // save state",3494],["painter.save();",3714],["// save only in non-flight case",3990],["save();",5116],["p->save();",5478],["canvas->save();",5811]],"useCount":728010},{"word":"scale","context":[["simulateDoubleTap(webViewHelper.webViewImpl(), doubleTapPoint, scale);",1029],["float scale;",2151],["return scale;",1331],["double scale;",1062],["float scale;",2701],["double scale;",1007],["float scale,",982],["scale = 1;",847],["LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator",6433],["LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator",9472]],"useCount":620727},{"word":"scope","context":[["v8::HandleScope scope(isolate);",7512],["HandleScope scope(isolate);",20719],["HandleScope scope;",13287],["v8::HandleScope scope;",5875],["//  Authorization scope(s):",5805],["v8::HandleScope scope(env->GetIsolate());",5366],["HandleScope scope;",4901],["v8::HandleScope scope(CcTest::isolate());",4753],["v8::HandleScope scope(isolate);",4707],["Nan::HandleScope scope;",5170]],"useCount":689471},{"word":"scoped_ptr","context":[["#include <boost/scoped_ptr.hpp>",2537],["scoped_ptr<base::Environment> env(base::Environment::Create());",2250],["scoped_ptr<base::Value>* value) {",2320],["scoped_ptr<aura::Window> window(CreateTestWindowWithDelegate(",2364],["#include <boost/scoped_ptr.hpp>",3300],["scoped_ptr<SpdyFrame> req(",3415],["scoped_ptr<SpdyFrame>",4187],["scoped_ptr<HttpTransaction> trans(",8068],["#include \"base/memory/scoped_ptr.h\"",50659],["#include \"base/memory/scoped_ptr.h\"",35875]],"useCount":965122},{"word":"script","context":[["#include \"script.h\"",7197],["// pay-to-script-hash transactions are evaluating IsStandard scripts",3608],["// script can be anything; an attacker could use a very",3608],["// expensive-to-check-upon-redemption script like:",3611],["// Add in sigops done by pay-to-script-hash inputs;",4022],["// Check for non-standard pay-to-script-hash in inputs",4167],["CScript script;",4348],["#include \"script.h\"",4743],["// Construct using pay-to-script-hash:",5763],["// ~65-byte public keys, plus a few script ops.",3509]],"useCount":683799},{"word":"second","context":[["return itr->second;",8802],["const CWalletTx& wtx = (*it).second;",24998],["CBlockIndex* pindex = (*mi).second;",22473],["return it->second;",19798],["delete itr->second;",13423],["return &itr->second;",12398],["return &itr->second;",11974],["CBlockIndex* pindex = (*mi).second;",9211],["const CWalletTx* pcoin = &(*it).second;",8899],["return it->second;",7705]],"useCount":3249845},{"word":"section","context":[["// @section machine",4187],["page->flags |= (section & SECTIONS_MASK) << SECTIONS_PGSHIFT;",2265],["// @section extruder",4164],["// @section homing",3613],["* Does a critical section need to be broken due to another",3578],["// @section temperature",3365],["// @section extras",3353],["// @section lcd",2539],["* When a program's coredump is generated as ELF format, a section is created",2514],["// Mark the end of the C bindings section for C++ compilers.",2467]],"useCount":1285564},{"word":"see","context":[["// with this library; see the file COPYING3.  If not see",42545],["// with this library; see the file COPYING3.  If not see",42545],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** conditions see http://qt.digia.com/licensing.  For further information",30797],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["* along with this library; see the file COPYING.LIB.  If not, write to",26690],["@see",24051],["along with this library; see the file COPYING.LIB.  If not, write to",23776],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["*  along with XBMC; see the file COPYING.  If not, see",18715]],"useCount":2307981},{"word":"select","context":[["// Emacs style mode select   -*- C++ -*-",1550],["//   or there is space left in the buffer, select() for receiving data.",1789],["// * If there is data to send, select() for sending data. As this only",1789],["* select serial console configuration",1807],["// Emacs style mode select   -*- C++ -*-",2284],["#include <sys/select.h>",2325],["int nSelect = select(have_fds ? hSocketMax + 1 : 0,",2737],["printf(\"socket select error %d\\n\", nErr);",3182],["* select() etc timeout values. These are in nanoseconds.",3457],["#include <sys/select.h>",3548]],"useCount":584903},{"word":"selected","context":[["is selected.",1874],["// any post selected",1897],["@param[out] selectedSuffixOut  Pointer to return the suffix (file type) that was selected (or 0).",2020],["if (selected) {",2071],["if (selected)",2088],["/* Return selected suffix if asked to */",3253],["/* No suffix specified, add selected suffix */",3254],["* This file includes all API header files for the selected drivers from ASF.",3310],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// if we selected an invalid address, restart",3711]],"useCount":592250},{"word":"selection","context":[["if(!selection.isEmpty())",4527],["// In sending tab, allow deletion of selection",1564],["// Set button states based on selected tab and selection",1657],["// for now, use a very simple selection metric: the node from which we received",1673],["QApplication::clipboard()->setText(selection.at(0).data(role).toString());",1727],["QMessageBox::warning(Gui::getMainWindow(), QObject::tr(\"Wrong selection\"),",1902],["/* warn only when language selection changes by user action (placed here so init via mapper doesn't trigger this) */",2016],["// next target selection",2123],["QModelIndexList selection = view->selectionModel()->selectedRows(column);",3299],["http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,",5060]],"useCount":615202},{"word":"self","context":[["if (!self)",7895],["DCHECK(self);",7652],["return self;",6461],["self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;",6406],["self = self;",4309],["self = self;",4309],["printf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString().c_str());",3438],["self->obj = NULL;",3399],["if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)",3288],["ns3::CompleteConstruct(self->obj);",3268]],"useCount":1284068},{"word":"send","context":[["* @param chan MAVLink channel to send the message",4017],["// Don't bother if send buffer is too full to respond anyway",6084],["// Be shy and don't send version until we hear",4380],["// Each connection can only send one version message",4131],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["// send-big-orphans memory exhaustion attack. If a peer has a legitimate",4057],["// When this block is requested, we'll send an inv that'll make them",3945],["// Trigger them to send a getblocks request for the next batch of inventory",3943],["// Don't send anything until we get their version message",3943],["// Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.",3664]],"useCount":892451},{"word":"sequence","context":[["#include <seqan/sequence.h>",5909],["/** get particular item in the sequence",3635],["#include <seqan/sequence.h>",2953],["// Encode a byte sequence as a base58-encoded string",2263],["/** goto particular item in the sequence",2181],["/** get current item in the sequence",2181],["in.push_back(Pair(\"sequence\", (boost::int64_t)txin.nSequence));",2057],["* Use sequence counter to get consistent i_size on 32-bit processors.",1867],["*        call sequence. Parameters are documented in nb_kernel.h",1834],["// verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)",1767]],"useCount":584563},{"word":"server","context":[["virNetServerPtr server,",8448],["throw runtime_error(\"couldn't connect to server\");",3472],["if (mapArgs.count(\"-server\"))",3503],["strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");",3506],["filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));",3538],["filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));",3538],["throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));",3563],["throw runtime_error(\"no response from server\");",3616],["throw runtime_error(\"couldn't parse reply from server\");",3618],["* Delivers a request to the X server.",7148]],"useCount":1081688},{"word":"service","context":[["// Denial-of-service detection/prevention",2066],["ExtensionService* service = extensions::ExtensionSystem::Get(",1510],["ExtensionService* service =",1858],["nDoS = 0;  // Denial-of-service prevention",1871],["// From module: IOPORT - General purpose I/O service",1940],["* PR_SET_CHILD_SUBREAPER marks a process, like a service",2363],["* to this process instead of 'init'. The service manager is",2363],["// Why bother? To avoid denial-of-service attacks; an attacker",3611],["// Denial-of-service detection:",3760],["// This is done last to help prevent CPU exhaustion denial-of-service attacks.",4228]],"useCount":582990},{"word":"session","context":[["if (!session)",1888],["Session* session,",2809],["struct key *session_keyring;\t/* UID's default session keyring */",3521],["/* boolean value for session group leader */",3565],["Player* player = session->GetPlayer();",3673],["scoped_refptr<HttpNetworkSession> session(CreateSession(&session_deps_));",4902],["new HttpNetworkTransaction(DEFAULT_PRIORITY, session.get()));",6355],["session->SendPacket(&data);",6794],["scoped_refptr<HttpNetworkSession> session(CreateSession(&session_deps));",2302],["-(id)initWithSession:(TMBTembooSession*)session;",1952]],"useCount":784363},{"word":"set","context":[["#include <set>",58554],["#include <set>",35757],["#include <set>",22592],["// returns true if wasn't already contained in the set",8694],["set<CBitcoinAddress> setAddress;",8029],["*  @param  value  value to be set (single value only) or \"\" for no value",7159],["args.rval().set(jsret);",6689],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["return TRUE;  // return TRUE unless you set the focus to a control",4611],["/* vim:set shiftwidth=4 softtabstop=4 expandtab: */",40355]],"useCount":6261849},{"word":"setting","context":[["\"An error occurred while setting up the RPC port %u for listening on IPv6, \"",2158],["\"An error occurred while setting up the RPC port %u for listening on IPv4: %s\"),",2158],["printf(\"ConnectSocket() : ioctlsocket non-blocking setting failed, error %d\\n\", WSAGetLastError());",2205],["printf(\"ConnectSocket() : fcntl non-blocking setting failed, error %d\\n\", errno);",2206],["// Use the provided setting for -txindex in the new database",2008],["* member tasks from exiting,a more specifically, setting of",2305],["* and does not change the user-interface for setting shares/weights.",2467],["// Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,",3214],["// Recommended setting: 1",6227],["if (setting == NULL)",2110]],"useCount":670010},{"word":"settings","context":[["QSettings settings;",38311],["settings.endGroup();",12795],["#include \"settings/Settings.h\"",8664],["#include \"settings.h\"",8384],["#include \"settings/AdvancedSettings.h\"",7220],[".settings = {",7169],["Settings settings;",4685],["settings->endGroup();",3945],["#include <vcl/settings.hxx>",3598],["settings->addAction(optionsAction);",3306]],"useCount":1180404},{"word":"short","context":[["Nan::ThrowError(\"Array too short.\");",10598],["/* Define to the one symbol short name of this package. */",7936],["unsigned short WORD;",7062],["unsigned short GetListenPort()",3744],["short il_next;",3620],["/* Deter brute-forcing short passwords.",3440],["* a short time",3253],["return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));",3084],["short pref_node_fork;",3052],["typedef unsigned short uint16_t;",2548]],"useCount":1541897},{"word":"should","context":[["// you should add code here to check that the transaction does a",3642],["*  @param  value  reference to variable in which the value should be stored",10435],["/* Define to the address where bug reports for this package should be sent. */",7929],["PyErr_SetString(PyExc_TypeError, \"function/method should return None\");",4408],["/* should never happen if there's no MMU */",4071],["// EXCEPTION: OCX Property Pages should return FALSE",4009],["* If this package is used in a product, Eric Young should be given attribution",3711],["// Shutdown will take long enough that the response should get back",3685],["*  @pre Parameters should be parsed and config file should be read.",3647],["*  @pre Parameters should be parsed and config file should be read.",3647]],"useCount":3939259},{"word":"show","context":[["void show();",3688],["show();",16199],["w.show();",6876],["labelEncryptionIcon->show();",6498],["this->show();",6451],["window.show();",5916],["window->show();",4487],["dialog->show();",4339],["view.show();",3853],["trayIcon->show();",3742]],"useCount":623178},{"word":"side","context":[["// \\param A The left-hand side multiplication operand.",4298],["// This information for client side use only",2297],["// \\param lhs The target left-hand side dense matrix.",2447],[", typename MT5 >  // Type of the right-hand side matrix operand",2661],["#define RCU_READ_UNLOCK_BLOCKED (1 << 0) /* blocked while in RCU read-side. */",3216],["// In case we are on a very long side-chain, it is possible that we already have",3600],["// \\param B The right-hand side multiplication operand.",4298],["// \\param C The target left-hand side dense matrix.",4589],["template< typename MT3    // Type of the left-hand side target matrix",4579],[", typename MT4    // Type of the left-hand side matrix operand",4579]],"useCount":652480},{"word":"signal","context":[["/* current thread group signal load-balancing target: */",3531],["#include <signal.h>",21887],["/* shared signal handling: */",3531],["#define PF_SIGNALED\t0x00000400\t/* killed by a signal */",3560],["int pdeath_signal;  /*  The signal sent when the parent dies  */",3560],["/* signal handlers */",3587],["struct signal_struct *signal;",3631],["#include <linux/signal.h>",5016],["#include <signal.h>",8622],["#include <signal.h>",16707]],"useCount":1055613},{"word":"since","context":[["\\since 4.6",5722],["// Deallocate old blocks since they're obsolete now",6138],["\\since 1.1",6285],["\\since 4.5",6951],["* @since 1.0",7635],["\\since 4.4",9122],["\\since 4.2",9251],["//Return since we have no target",17729],["\\since 1.0",5715],["\\since 4.3",5081]],"useCount":1128506},{"word":"single","context":[["*  @param  value  value to be set (single value only) or \"\" for no value",7159],["*  be followed by a single name or by a list of names",5607],["// Get prev tx from single transactions in memory",4057],["* alone is a single word that can safely be read normally.",3524],["* single lock above (split into XXX_lock if contention is an issue).",3503],["#define SD_SERIALIZE\t\t0x0400\t/* Only a single load balancing instance */",3389],["* single CPU.",2809],["* - Text can be \"double\" or 'single' quoted",2344],["*   - Within single quotes, no escaping is possible and no special interpretation takes place",2344],["// same objective target can be in many active quests, but not in 2 objectives for single quest (code optimization).",2339]],"useCount":733386},{"word":"size","context":[["if (params.size() > 1)",41160],["int size;",25263],["for (unsigned int i = 0; i < vin.size(); i++)",21730],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["if (fHelp || params.size() > 1)",26262],["if (fHelp || params.size() != 0)",26936],["return size;",27609],["if (params.size() > 0)",35234],["if (fHelp || params.size() != 1)",36282],["if (fHelp || params.size() < 1 || params.size() > 2)",25753]],"useCount":12864207},{"word":"size_t","context":[["size_t len;",8812],["size_t len);",7996],["size_t i;",7867],["size_t",10165],["size_t size);",10522],["void __user *, size_t *, loff_t *);",10524],["size_t i = 0;",12623],["size_t",12752],["size_t size;",19668],["size_t i;",24641]],"useCount":5437106},{"word":"sizeof","context":[["EXPECT_EQ(0, memcmp(&expected, commands_, sizeof(expected)));",7083],["CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));",6260],["socklen_t len = sizeof(sockaddr);",7989],["memset(&packet1, 0, sizeof(packet1));",8799],["EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);",9690],["memset(read_buf, 0, sizeof(read_buf));",11344],["s.reset(read_data, sizeof(read_data));",16714],["::memset(_has_bits_, 0, sizeof(_has_bits_));",25760],["MAVLINK_ASSERT(memcmp(&packet1, &packet2, sizeof(packet1)) == 0);",43995],["memset(&packet2, 0, sizeof(packet2));",43995]],"useCount":4276129},{"word":"sk","context":[["if (!sk_has_account(sk))",4605],["struct cg_proto *cg_proto = sk->sk_cgrp;",2272],["sock_hold(sk);",2447],["sk->sk_send_head = NULL;",2514],["struct tcp_sock *tp = tcp_sk(sk);",2673],["struct sock\t\t*sk;",2717],["if (mem_cgroup_sockets_enabled && sk->sk_cgrp) {",2840],["if (mem_cgroup_sockets_enabled && sk->sk_cgrp)",2868],["* @sk: socket",3332],["struct proto *prot = sk->sk_prot;",4545]],"useCount":729006},{"word":"sk_buff","context":[["const struct sk_buff *skb)",7744],["struct sk_buff *skb);",21969],["struct sk_buff *skb;",10497],["struct sk_buff *skb,",8912],["const struct sk_buff *skb);",2330],["struct sk_buff *skb)",7256],["skb != (struct sk_buff *)(queue);\t\t\t\t\\",3949],["struct sk_buff;",3928],["struct sk_buff *newsk)",3184],["const struct sk_buff *skb,",2813]],"useCount":625620},{"word":"skb","context":[["kfree_skb(skb);",3745],["skb != (struct sk_buff *)(queue);\t\t\t\t\\",3949],["*\t@skb: buffer to check",6648],["struct sk_buff *skb)",7256],["const struct sk_buff *skb)",7744],["return skb;",8543],["struct sk_buff *skb,",8912],["struct sk_buff *skb;",10497],["struct sk_buff *skb);",21969],["const struct sk_buff *skb,",2813]],"useCount":1118110},{"word":"skip","context":[["if(skip == 0)",1978],["Label skip;",2142],["// skip checked quest id, only state of other quests in group is interesting",2419],["// check count of items (skip for auto move for same player from bank)",2420],["r.skip(fieldType);",2456],["skip = true;",2621],["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["iprot_->skip(::apache::thrift::protocol::T_STRUCT);",4426],["xfer += iprot->skip(ftype);",37766],["bool skip = false;",1997]],"useCount":583789},{"word":"slot","context":[["if (slot == m_memberSlots.end())",2278],["uint8 slot = pos & 255;",4030],["else if (slot == EQUIPMENT_SLOT_OFFHAND)",3801],["if (slot < EQUIPMENT_SLOT_END)",3596],["StopRequests.connect(signals2::slot<void ()>(",3401],["// ignore move item (this slot will be empty at move)",2692],["m_items[slot] = NULL;",2680],["m_items[slot] = pItem;",2371],["switch (slot)",2329],["member_witerator slot = _getMemberWSlot(guid);",2322]],"useCount":1107810},{"word":"so","context":[["// do so, all subject to the following:",5127],["* returns a future to the operation so that it can be executed in parallel to other requests.",6270],["// Parse the account first so we don't generate a key if there's an error",8026],["// furnished to do so, subject to the following conditions:",10878],["//  furnished to do so, subject to the following conditions:",12170],["* furnished to do so, subject to the following conditions:",15849],["// furnished to do so, subject to the following conditions:",28575],["furnished to do so, subject to the following conditions:",29897],["* furnished to do so, subject to the following conditions:",35669],["furnished to do so, subject to the following conditions:",45324]],"useCount":3284049},{"word":"soap","context":[["return soap->error;",32877],["|| soap_body_begin_out(soap)",5274],["|| soap_body_end_out(soap)",5274],["virtual int soap_put(struct soap*, const char*, const char*) const;",5486],["virtual void *soap_in(struct soap*, const char*, const char*);",5486],["virtual int soap_out(struct soap*, const char*, int, const char*) const;",5487],["virtual void *soap_get(struct soap*, const char*, const char*);",5487],["virtual void soap_serialize(struct soap*) const;",5593],["virtual void soap_default(struct soap*);",5594],["return soap_closesock(soap);",13176]],"useCount":625226},{"word":"sock","context":[["int sock;",1528],["struct sock\t\t*sk;",2717],["struct sock *addr_sk);",1547],["struct tcp_md5sig_key\t*(*md5_lookup) (struct sock *sk,",1565],["const struct sock *sk,",1737],["close(sock);",1840],["struct sock *sk)",2005],["struct sock;",3063],["*\t@sock contains the socket structure.",4339],["#include <net/sock.h>",4622]],"useCount":626178},{"word":"socket","context":[["#include <sys/socket.h>",6250],["#include <sys/socket.h>",12846],["printf(\"socket closed\\n\");",6346],["#include <sys/socket.h>",20370],["*\t@sock contains the socket structure.",4339],["// socket closed gracefully",3784],["// Service each socket",3760],["// Create socket for listening for incoming connections",3760],["// close socket and cleanup",3757],["delete socket;",3833]],"useCount":919799},{"word":"some","context":[["// Replace some strings and icons, when using the testnet",2785],["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["// Restart the file with some of the end",3473],["#define PF_SPREAD_SLAB\t0x02000000\t/* Spread some slab caches over cpuset */",2982],["* generating coredump, we need some margin. The number of extra sections is",2514],["* Because the kernel adds some informative sections to a image of program at",2514],["* balance_dirty_pages() for some dirty throttling pause",2443],["* with some frequencies can complain without having to guess what per",2424],["// - Don't want 0OIl characters that look the same in some fonts and",2351],["// FetchInputs can return false either because we just haven't seen some inputs",2076]],"useCount":1336538},{"word":"source","context":[["* Redistribution and use in source and binary forms, with or without",17579],["// Redistribution and use in source and binary forms, with or without",19804],["// Redistribution and use in source and binary forms, with or without",20227],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",42441],["* file distributed with this source distribution.",20872],["* Redistribution and use in source and binary forms, with or without modification,",24360],["* Redistribution and use in source and binary forms, with or without",88602],["* Redistribution and use in source and binary forms, with or without",251058],["Redistribution and use in source and binary forms, with or without",40107]],"useCount":3092292},{"word":"sp","context":[["if( sp != NULL )",13785],["sp - current->sas_ss_sp < current->sas_ss_size;",3493],["if(sp != NULL)",8433],["sp->in_front_status = 1;",7660],["if (sp != NULL)",3779],["static inline int sas_ss_flags(unsigned long sp)",3659],["static inline int on_sig_stack(unsigned long sp)",3659],["extern void show_stack(struct task_struct *task, unsigned long *sp);",3632],["sp - current->sas_ss_sp <= current->sas_ss_size;",3493],["return sp >= current->sas_ss_sp &&",3493]],"useCount":665309},{"word":"space","context":[["* Check if a task structure is the first user space task the kernel created.",3496],["#define PF_RANDOMIZE\t0x00400000\t/* randomize virtual address space */",3499],["uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;",2995],["// slack space in .dat files; that is bad if the old data is",3550],["/* mmput gets rid of the mappings and all user-space */",3556],["fil_space_t*\tspace;",4020],["// Misc warnings like out of disk space and clock is wrong",4124],["* @note    Disabling this option saves both code and data space.",4883],["* by attaching extra space to the end of the structure,",6331],["// Minimum disk space required - used in CheckDiskSpace()",3203]],"useCount":1315847},{"word":"special","context":[["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, Nokia gives you certain additional",40703],["** As a special exception, The Qt Company gives you certain additional",5574],["** In addition, as a special exception, Nokia gives you certain additional",37705],["** In addition, as a special exception, Digia gives you certain additional",37026],["** In addition, as a special exception, The Qt Company gives you certain additional",6440],["** In addition, as a special exception, The Qt Company gives you certain additional",5229],["* in the block is a special one that creates a new coin owned by the creator",3315],["// In addition, as a special exception, Code Synthesis Tools CC gives",2935],["// Furthermore, Code Synthesis Tools CC makes a special exception for",2935]],"useCount":714815},{"word":"specific","context":[["// - Then load the more specific locale translator",3314],["// or project specific include files that are used frequently, but",3080],["// Convert strings to command-specific RPC representation",3361],["struct key *uid_keyring;\t/* UID specific keyring */",3521],["/* CPU-specific state of this task */",3559],["/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */",3565],["/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */",3565],["* 4. If you include any Windows specific code (or a derivative thereof) from",3710],["// Connect to specific addresses",3761],["// Core-specific options shared between UI and daemon",3182]],"useCount":1059456},{"word":"specified","context":[["// if an explicit public IP is specified, do not try to find others",3634],["/* @brief Number of external pin port on specified port. */",6112],["\"If [account] is specified, assign address to [account].\";",3691],["// even when -connect or -proxy is specified",3634],["* task_xid_nr_ns()  : id seen from the ns specified;",3475],["*      finds a task by its pid in the specified namespace",3475],["* Architectures can set this to 1 if they have specified",3407],["\"If [data] is specified, tries to solve the block and returns true if it was successful.\");",3293],["/* No suffix specified, add selected suffix */",3254],["\"If [data] is not specified, returns formatted hash data to work on:\\n\"",3242]],"useCount":1296958},{"word":"spell","context":[["if (!IsInWorld() && !learning)                       // spell load case",2154],["if (!spell)",8599],["switch (spell->Id)",2386],["if (spell)",2497],["uint32 spell;",2599],["// do character spell book cleanup (all characters)",2682],["// no spell",3028],["bool Validate(SpellInfo const* /*spell*/) override",4457],["spell->prepare(&targets);",4949],["bool Validate(SpellInfo const* /*spell*/)",5263]],"useCount":960493},{"word":"spellInfo","context":[["bool Validate(SpellInfo const* /*spellInfo*/) OVERRIDE",4654],["bool Validate(SpellInfo const* /*spellInfo*/) override",12806],["SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(spellId);",8185],["if(!spellInfo)",4975],["SpellEntry const *spellInfo = sSpellStore.LookupEntry(spellId);",2618],["bool Validate(SpellInfo const* /*spellInfo*/)",3985],["if (spellInfo)",3625],["SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(spell_id);",2768],["if (item != ignoreItem && item->IsFitToSpellRequirements(spellInfo))",2652],["if (!spellInfo)",44100]],"useCount":628469},{"word":"spells","context":[["comulativeperc += spells[i].perctrigger;",7055],["_unit->setAttackTimer(spells[i].attackstoptimer, false);",7055],["switch(spells[i].targettype)",6095],["spells[0].attackstoptimer = 1000;",5518],["spells[i].casttime = spells[i].cooldown;",7288],["spells[0].instant = true;",5093],["_unit->CastSpell(_unit, spells[i].info, spells[i].instant); break;",4948],["_unit->CastSpell(_unit, spells[i].info, spells[i].instant); break;",4948],["spells[i].casttime = spells[i].cooldown;",7288],["_unit->CastSpell(target, spells[i].info, spells[i].instant); break;",4878]],"useCount":614404},{"word":"src","context":[["#include \"src/v8.h\"",4019],["out += \"<td class=\\\"icon\\\" width=\\\"32\\\"><img src=\\\"\" + categoryClass(category) + \"\\\"></td>\";",3102],["#include \"googleurl/src/gurl.h\"",7150],["src++;",5208],["#include \"googleurl/src/gurl.h\"",4190],["bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)",3327],["return src;",2982],["int rc = std::rename(src.string().c_str(), dest.string().c_str());",3332],["return MoveFileExA(src.string().c_str(), dest.string().c_str(),",3333],["emit_sse_operand(dst, src);",3697]],"useCount":2038514},{"word":"ss","context":[["ss.str(\"\");",12545],["std::stringstream ss;",46288],["return ss.str();",25484],["std::ostringstream ss;",24290],["CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",8903],["std::stringstream ss;",10084],["stringstream ss;",18208],["ss << strMessageMagic;",12196],["CDataStream ss(SER_GETHASH, 0);",10942],["Aws::StringStream ss;",12009]],"useCount":900080},{"word":"st","context":[["struct stat st;",3859],["st->cr();",7392],["struct stat st;",7529],["SYSTEMTIME st;",2520],["return st;",2633],["var_b = GetVariable( st->b );",1569],["k = read_keyword(st);",1711],["extern void task_times(struct task_struct *p, cputime_t *ut, cputime_t *st);",2286],["extern void thread_group_times(struct task_struct *p, cputime_t *ut, cputime_t *st);",2355],["var_a = GetVariable( st->a );",2423]],"useCount":889403},{"word":"stack","context":[["stack.push_back(vch2);",4096],["popstack(stack);",26138],["#include <stack>",15351],["if (stack.size() < 2)",11677],["if (stack.size() < 1)",9971],["#include <stack>",8052],["if (stack.empty())",6302],["stack.push_back(bn.getvch());",5086],["stack.pop();",4334],["compatible FAT file system, and our tiny thread aware UDP/IP stack.",4134]],"useCount":1369975},{"word":"start","context":[["* @return length of the message in bytes (excluding serial stream start sign)",6504],["pgoff_t start, pgoff_t end);",4530],["/* start */",4867],["thread->start();",5027],["//start",5241],["return start;",5971],["//Wyrmgus start",5982],["timer.start();",8619],["start();",6722],["void start();",11239]],"useCount":3022558},{"word":"state","context":[["CValidationState state;",29433],["be allowed in any other state.",5344],["In state BUSY this request will be queued. Request won't",5344],["switch (state)",6819],["lua_error(state);",6986],["switch (state) {",8829],["switch (state) {",9502],["int state;",9788],["return state;",10775],["switch(state)",4983]],"useCount":4981776},{"word":"static","context":[["static",34905],["static int",36293],["static const PythonQtMethodInfo* methodInfo = PythonQtMethodInfo::getCachedMethodInfoFromArgumentList(2, argumentList);",52660],["static inline",56722],["static inline int",70047],["static void",71007],["static void",109796],["static",113343],["static inline void",137167],["// static",217730]],"useCount":14199310},{"word":"static_cast","context":[["static_cast<T>(v3_), static_cast<T>(v4_), static_cast<T>(v5_),",3735],["static_cast<T>(v6_), static_cast<T>(v7_), static_cast<T>(v8_),",3486],["static_cast<T>(v3_), static_cast<T>(v4_), static_cast<T>(v5_),",3735],["const T array[] = {static_cast<T>(v1_), static_cast<T>(v2_),",3937],["const T array[] = {static_cast<T>(v1_), static_cast<T>(v2_),",3937],["return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT",5823],["QKeyEvent *ke = static_cast<QKeyEvent *>(event);",6604],["T* pT = static_cast<T*>(this);",8868],["static_cast<monitor_type_t>(",3624],["static_cast<T>(v3_), static_cast<T>(v4_), static_cast<T>(v5_),",3735]],"useCount":2478826},{"word":"stats","context":[["ReadStats stats(9);",2743],["/* SD_BALANCE_FORK stats */",3513],["/* SD_BALANCE_EXEC stats */",3513],["/* load_balance() stats */",3526],["struct taskstats *stats;",3607],["void CNode::copyStats(CNodeStats &stats)",3681],["#define X(name) stats.name = name",3688],["/* try_to_wake_up() stats */",4797],["stats->AddText(t);",2375],["struct net_device_stats stats;",2231]],"useCount":621378},{"word":"status","context":[["return status;",54729],["TEST_CHK(status == FDB_RESULT_SUCCESS);",8048],["int status;",9483],["UErrorCode status = U_ZERO_ERROR;",11862],["if (U_FAILURE(status)) {",12928],["int status;",14473],["__u8     status;",14882],["* @returns VBox status code.",28471],["*  @return status, EC_Normal if successful, an error code otherwise",30879],["return status;",31679]],"useCount":3075711},{"word":"std","context":[["using namespace std;",436706],["using namespace std;",81434],["using namespace std;",77081],["std::ostringstream oss;",59605],["<< std::endl;",48560],["std::stringstream ss;",46288],["throw std::runtime_error( oss.str() );",44286],["<< std::endl;",39140],["std::cout << std::endl;",38943],["std::cout << std::endl;",38943]],"useCount":18614189},{"word":"step","context":[["step = 1;",1058],["bar.step();",38566],["int step;",1092],["int step;",1126],["u32 step;",1325],["step = 0;",1330],["bar2.step();",1740],["step++;",2033],["Ndb* pNdb = GETNDB(step);",2621],["// Limit adjustment step",2942]],"useCount":599323},{"word":"stmt","context":[["trans->Append(stmt);",73735],["stmt->setUInt32(0, GUID_LOPART(guid));",5584],["WorldDatabase.Execute(stmt);",7447],["PreparedStatement* stmt = NULL;",7475],["LoginDatabase.Execute(stmt);",7504],["stmt->setUInt32(0, GetGUIDLow());",11572],["PreparedQueryResult result = CharacterDatabase.Query(stmt);",13316],["stmt->setUInt32(0, lowGuid);",14773],["stmt->setUInt32(0, guid);",15711],["CharacterDatabase.Execute(stmt);",38702]],"useCount":1103241},{"word":"stop","context":[["- (void)stop;",3886],["// stop flight if need",4409],["timer.stop();",4374],["pANTLR3_COMMON_TOKEN    stop;",4220],["Value stop(const Array& params, bool fHelp)",3639],["/* thread group stop support, overloads group_exit_code too */",3531],["#define SIGNAL_STOP_STOPPED\t0x00000001 /* job control stop in effect */",3519],["stop();",18856],["// Check for stop or if block needs to be rebuilt",3321],["void stop();",14001]],"useCount":734015},{"word":"store","context":[["* and page->virtual store page management information, but all other fields",2236],["ssize_t (*store)(struct cpufreq_policy *, const char *, size_t count);",2946],["// do that because they want to know about (and store and rebroadcast and",2146],["// otherwise, don't store any hash, but descend into the subtrees",1768],["// if at height 0, or nothing interesting below, store hash and stop",1768],["// not specific bag or have space for partly store only in specific bag",1605],["// not specific slot or have space for partly store only in specific slot",1710],["// store as flag bit",1767],["ssize_t (*store)(struct kobject *a, struct attribute *b,",2885],["// Do not store addresses outside our network",3993]],"useCount":988191},{"word":"stored","context":[["// Return stored item (if stored to stack, it can diff. from pItem). And pItem ca be deleted in this case.",1747],["// if at height 0, or nothing interesting below, use stored hash and do not descend",1769],["addressBookAction->setToolTip(tr(\"Edit the list of stored addresses and labels\"));",1783],["* An argresp is stored in an allocated page and holds the",1863],["// (in which case the transaction should be stored as an orphan)",2082],["\"it is not stored in the wallet or transmitted to the network.\");",2210],["* The pagecache pages are stored in a per-mapping radix tree, which is",2236],["/* Index of current stored address in ret_stack */",3238],["// Note that the walletpassphrase is stored in params[0] which is not mlock()ed",3551],["*  @param  value  reference to variable in which the value should be stored",10435]],"useCount":591012},{"word":"str","context":[["return str;",45278],["throw std::runtime_error( oss.str() );",44286],["return ss.str();",25484],["return str;",22894],["string str;",14914],["return str;",14530],["std::string str;",14320],["ss.str(\"\");",12545],["std::string str;",11116],["ASSERT_EQUALS(\"\", errout.str());",51392]],"useCount":3777974},{"word":"stream","context":[["* @return length of the message in bytes (excluding serial stream start sign)",6504],["stream << \",\";",9328],["getline(stream, str);",5271],["stream << indent_str;",5010],["std::stringstream stream;",5003],["stream << \"\\n\";",5002],["conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;",4858],["#include <boost/iostreams/stream.hpp>",4851],["delete stream;",4403],["return stream;",11802]],"useCount":2050311},{"word":"string","context":[["using std::string;",23205],["#include <string>",402553],["#include <string>",194111],["#include <string.h>",129198],["#include <string>",96152],["#include <string.h>",94994],["#include <string.h>",41818],["std::string ToString() const",26172],["std::string name;",22820],["std::string",24151]],"useCount":13396560},{"word":"strings","context":[["#include \"base/strings/string_piece.h\"",4001],["#include \"base/strings/utf_string_conversions.h\"",44138],["#include \"base/strings/string_util.h\"",31827],["#include \"base/strings/string_number_conversions.h\"",27808],["#include \"base/strings/stringprintf.h\"",26044],["#include \"base/strings/string16.h\"",11463],["#include \"base/strings/string_split.h\"",8944],["/* Define to 1 if you have the <strings.h> header file. */",7763],["#include \"base/strings/string16.h\"",7373],["#include <strings.h>",3745]],"useCount":617343},{"word":"strlen","context":[["if (pszHome == NULL || strlen(pszHome) == 0)",3446],["send(hSocket, pszGet, strlen(pszGet), MSG_NOSIGNAL);",3383],["ASSERT (retval == strlen (result));",1790],["dwL = strlen(szMessage);",1817],["fwrite(szTemp, strlen(szTemp), sizeof(char), pFile);",1892],["COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));",2962],["if (pszFormat[strlen(pszFormat) - 1] == '\\n')",2987],["vchRet.reserve((strlen(p))*5/8);",3174],["vchRet.reserve(strlen(p)*3/4);",3302],["strLine = strLine.substr(strLine.find(pszKeyword) + strlen(pszKeyword));",3372]],"useCount":590458},{"word":"struct","context":[["struct apr_hdr hdr;",36406],["typedef struct {",702685],["struct",678362],["struct {",655097],["typedef struct",616265],["struct list_head list;",65055],["typedef PACKED_PRE struct PACKED_POST",37240],["struct drm_file *file_priv);",25257],["typedef struct {",22763],["struct sk_buff *skb);",21969]],"useCount":37117846},{"word":"structure","context":[["* Check if a task structure is the first user space task the kernel created.",3496],["pEventData:      pointer to the event information structure",17098],["* @param PeripheralBase Pointer to a peripheral registers structure (peripheral",12514],["* by attaching extra space to the end of the structure,",6331],["*\t@sock contains the socket structure.",4339],["// The memory index structure will be changed after the db commits.",4262],["// Make sure it's successfully written to disk before changing memory structure",3618],["* @p: Task structure to be checked.",3523],["* pid_alive - check that a task structure is not stale",3523],["* If pid_alive fails, then pointers within the task structure",3523]],"useCount":1344155},{"word":"style","context":[["// Set default style sheet",3093],["#endif \t/* C style interface */",46283],["#else \t/* C style interface */",46283],["long style,",4757],["long style = 0,",4745],["const ImGuiStyle& style = g.Style;",4515],["switch (style) {",3251],["bool modal = (style & CClientUIInterface::MODAL);",3225],["c-file-style:\"stroustrup\"",3032],["c-file-style:\"stroustrup\"",2559]],"useCount":1208777},{"word":"success","context":[["return success;",9080],["bool success = true;",10306],["if (success)",10410],["return success;",27428],["success = true;",11112],["if (!success) {",11654],["if (!success)",12289],["bool success = false;",12529],["success = false;",17138],["if (!success) {",8220]],"useCount":1292271},{"word":"such","context":[["such litigation is filed.  If you or your agent or exclusive",4293],["* 2. Altered source versions must be plainly marked as such, and must not be",8045],["2. Altered source versions must be plainly marked as such, and must not be",8151],["// If such overwrites are allowed, coinbases and transactions depending upon those",4047],["such a type exists and the standard includes do not define it. */",3754],["* If the caller does not need such serialisation then use __set_current_state()",3632],["/** Describes a place in the block chain to another node such that if the",3398],["* 2. Altered source versions must be plainly marked as such, and must not be",3205],["\"in your wallet were already spent, such as if you used a copy of wallet.dat \"",3042],["non-source form of such a combination shall include the source code for",2908]],"useCount":682985},{"word":"support","context":[["// BIP16 support.",2949],["* WARNING: This is generated code. Modify at your own risk and without support.",15951],["* Support and FAQ: visit <a href=\"http://www.atmel.com/design-support/\">Atmel Support</a>",10916],["// For compilers that support precompilation, includes \"wx.h\".",8624],["virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support",6819],["// Init OpenSSL library multithreading support",4801],["throw; // support pthread_cancel()",3665],["/* thread group exit support */",3531],["/* thread group stop support, overloads group_exit_code too */",3531],["// From module: Generic board support",3302]],"useCount":1246977},{"word":"supported","context":[["// and earlier versions are no longer supported",2347],["encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported",6745],["*    robust, strictly quality controlled, supported, and cross          *",4135],["strError = strprintf(\"Error: bind address family for %s not supported\", addrBind.ToString().c_str());",3106],["calls it, or to nothing if 'inline' is not supported under any name.  */",2942],["// Minimum supported OS versions: WinXP SP3, WinVista >= SP1, Win Server 2008",2789],["// CSV is currently the only supported format",2178],["*   -ENOSYS when not supported (equal to NULL callback)",2105],["* hopefully graduate it to a proper O_CMTIME flag supported by open(2) soon.",1813],["// is not supported in many others",1487]],"useCount":723913},{"word":"sure","context":[["// Make sure the merkle branch connects to this block",3946],["/* Can be ORed in to make sure the process is reverted back to SCHED_NORMAL on fork */",2383],["// Prefix <qt/> to make sure Qt detects this as rich text",2609],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["// make sure all wallets know about the given transaction, in the given block",3435],["///// are we sure this is ok when loading transactions or restoring block txes",3454],["// Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses",3518],["// Check transaction inputs, and make sure any",3611],["// Make sure it's successfully written to disk before changing memory structure",3618],["// make sure requires clause is not broken",3643]],"useCount":858345},{"word":"switch","context":[["switch (type)",47706],["switch (type) {",28072],["switch (mode)",25464],["switch(mode)",20296],["switch(unit)",19703],["switch (action)",17373],["switch (_id) {",17113],["switch(type)",15294],["switch (eventId)",33060],["switch (type) {",35124]],"useCount":3949518},{"word":"symbol","context":[["/* Define to the one symbol short name of this package. */",7936],["*\tThis symbol, if defined, indicates that the system provides",804],["return symbol;",926],["\"The symbol ::\" #func \" refers to the system function. \" \\",1001],["@param  name  Name of the hash table [symbol]",1035],["| Print this symbol on YYOUTPUT.  |",1120],["#include \"symbol.h\"",1230],["/* Put the tokens into the symbol table, so that GDB and other debuggers",1734],["*\tThis symbol, if defined, indicates to the C program that it should",2181],["delete symbol;",761]],"useCount":637154},{"word":"sync","context":[["sync.Wait();",2660],["#include \"chrome/browser/sync/profile_sync_service.h\"",2741],["#include \"chrome/browser/sync/profile_sync_service_factory.h\"",2845],["sync();",3004],["u32 blkio_count;\t/* total count of the number of sync block */",3501],["u64 blkio_delay;\t/* wait for sync block io completion */",3501],["Lock sync(*this);",3737],["#include <boost/interprocess/sync/file_lock.hpp>",3889],["#include \"sync.h\"",4890],["#include \"sync.h\"",10643]],"useCount":578310},{"word":"sys","context":[["#include <sys/socket.h>",12846],["#include <sys/stat.h>",17738],["#include <sys/time.h>",18983],["#include <sys/socket.h>",20370],["#include <sys/types.h>",20910],["#include <sys/stat.h>",22363],["#include <sys/time.h>",29164],["#include <sys/stat.h>",37623],["#include <sys/types.h>",42645],["#include <sys/types.h>",77085]],"useCount":868552},{"word":"system","context":[["catch(boost::system::system_error &e)",6093],["* @param system_id ID of this system",11697],["#include \"system.h\"",9557],["#include <asm/system.h>",7659],["system(\"pause\");",7006],["error = boost::system::error_code();",4710],["// stdafx.h : include file for standard system include files,",5614],["*   This file is part of the FreeCAD CAx development system.              *",5329],["#include \"common/system.h\"",5125],["boost::system::error_code ec;",4629]],"useCount":1459037},{"word":"t","context":[["{int volatile ___ = 1;(void)t;(void)x;",8188],["// Parse the account first so we don't generate a key if there's an error",8026],["return t;",23233],["/* For IDL files that don't want to include root IDL files. */",15792],["return t;",13611],["/* Raise an exception if the arguments couldn't be parsed. */",13073],["case 't':",11587],["// ----------- S t a t e -------------",10046],["// ----------- S t a t e -------------",10046],["// returns true if wasn't already contained in the set",8694]],"useCount":9646859},{"word":"tab","context":[["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["/* -*- Mode: C; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */",2803],["1 tab == 4 spaces!",8203],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",7120],["/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */",5726],["switch(tab)",5242],["* tab-width: 4",4711],["/// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",4086],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",3636],["tab == SendingTab ?",3118]],"useCount":772363},{"word":"table","context":[["QTableView *table = ui->tableView;",9750],["TABLE *table;",4762],["table->file->print_error(error, MYF(0));",4712],["dict_table_t*\ttable;",4245],["</table>",4071],["restore_record(table, s->default_values);",4036],["// output error for any still listed (not referenced from appropriate table) ids",3820],["\\table",5650],["struct cpufreq_frequency_table *table);",6327],["QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);",6516]],"useCount":3934382},{"word":"tables","context":[["TABLE_LIST tables;",1078],["for (table= tables; table; table= table->next_local)",1365],["/* mmdrop drops the mm and the page tables */",3555],["TABLE *table= tables->table;",2259],["* - page mapped in a task's page tables, each mapping",2229],["TABLE_LIST*\ttables,\t/*!< in/out: tables to fill */",2204],["TABLE_LIST*\ttables,\t/*!< in/out: tables to fill */",2204],["// twice (once in the log, and once in the tables). This is already",2011],["tables.",1601],["RETURN_IF_INNODB_NOT_STARTED(tables->schema_table_name);",1418]],"useCount":609025},{"word":"tag","context":[["if (tag == 10) {",4184],["while ((tag = input->ReadTag()) != 0) {",6975],["// slots: signature, parameters, type, tag, flags",7088],["if (tag == 0 ||",7348],["::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",7348],["tag = p.first;",7357],["input, tag, mutable_unknown_fields()));",11299],["switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {",13523],["::google::protobuf::uint32 tag;",14309],["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641]],"useCount":1162182},{"word":"target","context":[["if (!target)",50148],["Unit* target = aurApp->GetTarget();",48854],["target = this;",35468],["if (target)",29169],["if (target->GetTypeId() == TYPEID_PLAYER)",23275],["//Return since we have no target",17729],["target = ::google::protobuf::internal::WireFormatLite::",17049],["if (target->GetTypeId() != TYPEID_PLAYER)",16818],["if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))",14616],["Unit* target = GetTarget();",14476]],"useCount":4807884},{"word":"task","context":[["static inline struct pid *task_pgrp(struct task_struct *task)",3594],["return task->group_leader->pids[PIDTYPE_PGID].pid;",3594],["return task->group_leader->pids[PIDTYPE_PID].pid;",3594],["return task->group_leader->pids[PIDTYPE_SID].pid;",3594],["return task->pids[PIDTYPE_PID].pid;",3597],["static inline struct pid *task_pid(struct task_struct *task)",3597],["task_thread_info(p)->task = p;",3609],["extern struct mm_struct *get_task_mm(struct task_struct *task);",3627],["extern void show_stack(struct task_struct *task, unsigned long *sp);",3632],["struct task_struct *task);",4187]],"useCount":984846},{"word":"task_struct","context":[["struct task_struct {",3762],["static inline void rcu_copy_process(struct task_struct *p)",6797],["struct task_struct *tsk);",4014],["struct task_struct *task);",4187],["struct task_struct;",11361],["static inline unsigned int task_cpu(const struct task_struct *p)",7184],["static inline void inc_syscw(struct task_struct *tsk)",7182],["static inline void inc_syscr(struct task_struct *tsk)",7182],["static inline void add_wchar(struct task_struct *tsk, ssize_t amt)",7182],["static inline void add_rchar(struct task_struct *tsk, ssize_t amt)",7182]],"useCount":918167},{"word":"temp","context":[["tempIt = begin(temp);",3144],["delete temp;",3521],["temps_[0] = temp;",4423],["if (SWIG_IsNewObj(res2)) delete temp;",5581],["arg2 = *temp;",5581],["return temp;",5897],["return temp;",14651],["return temp;",30377],["int temp;",3692],["LOperand* temp() { return temps_[0]; }",3998]],"useCount":1144880},{"word":"template","context":[["template<class T>",88180],["template <>",88360],["template <>",42883],["template <class T>",125801],["template<typename T>",163225],["template <typename T>",229492],["template<>",80463],["template<>",77287],["template<typename T>",53955],["template <typename T>",52634]],"useCount":5213728},{"word":"test","context":[["#include <boost/test/unit_test.hpp>",27652],["bool test __attribute__((unused)) = true;",25894],["namespace test {",9162],["}  // namespace test",8634],["#include \"chrome/test/base/testing_profile.h\"",8554],["test(false);",8136],["#include \"chrome/test/base/ui_test_utils.h\"",8057],["namespace test {",6938],["#include \"content/public/test/test_utils.h\"",6515],["BOOST_ERROR(\"Bad test: \" << strTest);",6441]],"useCount":2277054},{"word":"testing","context":[["namespace testing {",3282],["namespace testing {",3672],["::testing::InitGoogleTest(&argc, argv);",4187],["using testing::Return;",4773],["using ::testing::Return;",5434],["using ::testing::_;",7354],["using testing::_;",7672],["#include \"testing/gmock/include/gmock/gmock.h\"",17598],["#include \"testing/gtest/include/gtest/gtest.h\"",69794],["}  // namespace testing",3499]],"useCount":649048},{"word":"text","context":[["if (text.isEmpty())",3834],["QString text;",10204],["return text;",10110],["#include \"wtf/text/WTFString.h\"",5812],["token = COM_ParseExt( text, qfalse );",3871],["#include <wtf/text/CString.h>",3802],["\"Content-Type: text/html\\r\\n\"",3742],["// Help text is returned in an exception",3734],["#define __sched\t\t__attribute__((__section__(\".sched.text\")))",3621],["\"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"",3560]],"useCount":2660308},{"word":"texture","context":[["return texture;",3765],["GLuint texture;",1248],["glGenTextures(1, &texture);",1274],["if (!texture)",1318],["#include \"texture.h\"",1339],["#include \"texture.h\"",1349],["Texture* texture = texture_ref->texture();",1784],["Texture* texture = texture_ref->texture();",1784],["glBindTexture(GL_TEXTURE_2D, texture);",1807],["if (texture)",2126]],"useCount":577432},{"word":"than","context":[["* other than jiffies.)",3508],["* MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO.",2552],["next freq faster than this value in nano secs or we",2804],["// the code used other than Xerces-C++. If you modify this copy of the",2935],["return false; // More than one dot",3185],["* Note: There might be duplicate includes required by more than one driver.",3310],["#pragma warning( disable: 4049 )  /* more than 64k source lines */",3360],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// receiver rejects addr messages larger than 1000",4130]],"useCount":1476970},{"word":"that","context":[["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["/* Use this macro to declare functions that forward the behavior of this interface to another object. */",19989],["* purpose with or without fee is hereby granted, provided that the above",18240],["/* For IDL files that don't want to include root IDL files. */",15792],["* any purpose with or without fee is hereby granted, provided that the",10822],["* distribute the resulting executable under terms of your choice, provided that",9187],["@param[in] mapInputs\tMap of previous transactions that have outputs we're spending",9027],["// For compilers that support precompilation, includes \"wx.h\".",8624],["// stdafx.cpp : source file that includes just the standard includes",7991],["/* Use this macro when declaring classes that implement this interface. */",20001]],"useCount":11164764},{"word":"thd","context":[["thd, Sql_condition::WARN_LEVEL_WARN,",4079],["close_thread_tables(thd);",4328],["THD*\t\t\t\tthd,\t/*!< in: thread handle */",4683],["LEX *lex= thd->lex;",4933],["if (thd->is_error())",4960],["thd->clear_error();",6715],["push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,",6801],["THD *thd= current_thd;",7980],["thd->mdl_context.release_transactional_locks();",3919],["my_ok(thd);",8955]],"useCount":1789893},{"word":"the","context":[["** use the contact form at http://qt.digia.com/contact-us.",36972],["* furnished to do so, subject to the following conditions:",35669],["* This file is part of the LibreOffice project.",39451],["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["// with this library; see the file COPYING3.  If not see",42545],["furnished to do so, subject to the following conditions:",45324],["** packaging of this file.  Please review the following information to",89527],["** packaging of this file.  Please review the following information to",101077],["*    documentation and/or other materials provided with the distribution.",106352]],"useCount":89701027},{"word":"them","context":[["* decision by deleting the provisions above and replace them with the notice",9245],["* decision by deleting the provisions above and replace them with the notice",5725],["// When this block is requested, we'll send an inv that'll make them",3945],["// Trigger them to send a getblocks request for the next batch of inventory",3943],["* of them in parallel.",3386],["* if only because they are not used by them anyway.",3329],["/** Nodes collect new transactions into a block, hash them into a hash tree,",3316],["* You rarely need to use properties because there are get_ and set_ methods for almost all of them.",3206],["* used with authentic Microchip devices\" which makes them incompatible",2310],["* The following discussion applies only to them.",2299]],"useCount":947250},{"word":"then","context":[["// large transaction with a missing parent then we assume",4058],["// Note: if you modify this code to accept non-standard transactions, then",3642],["* If the caller does not need such serialisation then use __set_current_state()",3632],["* If pid_alive fails, then pointers within the task structure",3523],["***   source file (e.g. under external/kernel-headers/original/) then",3431],["* but then during bootup it turns out that sched_clock()",3407],["// ... then GUI settings:",2954],["// then allow mining of a min-difficulty block.",2725],["* later completes.  Any output arguments can then be retrieved by calling",2667],["// ... then bitcoin.conf:",2532]],"useCount":1941944},{"word":"there","context":[["// Parse the account first so we don't generate a key if there's an error",8026],["// until there are no more or the block reaches this size:",2761],["* You rarely need to use properties because there are get_ and set_ methods for almost all of them.",3206],["// this data structure is not used yet, so there is no code generated to fill its members",3227],["* @running:\t\tnon-zero when there are timers running and",3381],["* because there is no reader checking a limit that actually needs",3524],["// be quick, because if there are any operations",3942],["/* should never happen if there's no MMU */",4071],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// Only sign SIGHASH_SINGLE if there's a corresponding output:",2675]],"useCount":1739705},{"word":"these","context":[["* into the filesystem to release these pages.",2236],["* within the limits is used. If (cpufreq_driver->setpolicy> exists, these",2833],["* CPU time want to group these counts together and treat all three",3386],["* CPUCLOCK_PROF and CPUCLOCK_VIRT for indexing array as these",3392],["* time slack values; these are used to round up poll() and",3457],["/* Linker adds these: start and end of __sched functions */",3477],["* Live threads maintain their own counters and add to these",3526],["// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)",3541],["// see Step 2: parameter interactions for more information about these",3653],["// We already filter duplicates, but these deprecated screw up the sort order",3732]],"useCount":1060653},{"word":"they","context":[["// Attempt to overwrite text so that they do not linger around in memory",3099],["// and we want it right after the last block so they don't",3287],["// Deallocate old blocks since they're obsolete now",6138],["// headers also when they are imported in the client",3993],["* protect this instead of the siglock, because they really",3524],["* the helpers to get the task's different pids as they are seen",3475],["* Architectures can set this to 1 if they have specified",3407],["* if only because they are not used by them anyway.",3329],["* requirements.  When they solve the proof-of-work, they broadcast the block",3316],["* requirements.  When they solve the proof-of-work, they broadcast the block",3316]],"useCount":1034337},{"word":"this","context":[["base::Unretained(this)));",59575],["return *this;",353160],["return *this;",257469],["** packaging of this file.  Please review the following information to",101077],["** packaging of this file.  Please review the following information to",89527],["ui->setupUi(this);",56712],["return *this;",50276],["// with this library; see the file COPYING3.  If not see",42545],["return this;",39192],["NS_LOG_FUNCTION (this);",38941]],"useCount":26375125},{"word":"thread","context":[["THD*\t\t\t\tthd,\t/*!< in: thread handle */",4683],["thread->start();",5027],["#include <boost/thread.hpp>",5794],["boost::thread t(runCommand, strCmd); // thread runs free",6177],["boost::thread t(runCommand, strCmd); // thread runs free",6177],["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["#include <thread>",8038],["#include \"base/threading/thread.h\"",8168],["#include <boost/thread.hpp>",10650],["#include <thread>",13455]],"useCount":2202098},{"word":"through","context":[["// TODO: receive errors and debug messages through ClientModel",3093],["/** Method for creation through the object factory. */",10225],["/* fall through */",6696],["| available through the world-wide-web at the following url:           |",3782],["// fall through",12651],["* the thread group leader.  For iteration through the pids in proc",3499],["* and scan through nonce values to make the block's hash satisfy proof-of-work",3318],["// Scan through file for \"Hidden=true\":",3298],["// Fall through.",3129],["* candidates to be the next block.  pprev and pnext link a path through the",3013]],"useCount":828917},{"word":"throw","context":[["throw runtime_error(",229703],["throw;",69665],["throw std::runtime_error( oss.str() );",44286],["throw;",20676],["throw;",12497],["throw runtime_error(\" Invalid public key: \"+ks);",10489],["throw (uno::RuntimeException, std::exception)",9118],["throw e;",8196],["throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");",7751],["throw EXCEPTION(\"\");",7721]],"useCount":2063502},{"word":"time","context":[["#include <linux/time.h>",12226],["time_t now = time(NULL);",10766],["#include \"base/time/time.h\"",12574],["#include \"base/time/time.h\"",12574],["#include \"base/time/time.h\"",18443],["#include \"base/time/time.h\"",18443],["#include <sys/time.h>",18983],["#include <sys/time.h>",29164],["#include <time.h>",36404],["#include <time.h>",41901]],"useCount":3676847},{"word":"timeout","context":[["timeout.tv_sec  = 0;",3916],["struct timeval timeout;",6109],["\"walletpassphrase <passphrase> <timeout>\\n\"",5673],["\"Stores the wallet decryption key in memory for <timeout> seconds.\");",5661],["unsigned long timeout;",4508],["timeout.tv_usec = 50000; // frequency to poll pnode->vSend",3753],["extern signed long schedule_timeout_uninterruptible(signed long timeout);",3612],["extern signed long schedule_timeout_interruptible(signed long timeout);",3610],["extern signed long schedule_timeout_killable(signed long timeout);",3568],["extern signed long schedule_timeout(signed long timeout);",3560]],"useCount":660158},{"word":"timer","context":[["* used for thread group CPU timer calculations.",3449],["* struct thread_group_cputimer - thread group interval timer counts",3449],["/* ITIMER_REAL timer for the process */",3516],["#include \"timer.h\"",3593],["timer.stop();",4374],["#include \"base/timer/timer.h\"",4385],["#include \"base/timer/timer.h\"",4385],["struct timer_list timer;",7477],["timer.start();",8619],["#include <linux/timer.h>",17035]],"useCount":766371},{"word":"title","context":[["QString title() const;",1839],["/*! This is used in LaTeX as the title of the chapter with the",3564],["/*! This is used in LaTeX as the title of the chapter containing",3556],["virtual std::string title() const override;",3167],["QString title;",2644],["@property (nonatomic, copy) NSString *title;",2367],["const std::string& title,",2101],["return title;",1999],["virtual std::string title();",1945],["const base::string16& title,",1807]],"useCount":628299},{"word":"tmp","context":[["return tmp;",18624],["return tmp;",21653],["return tmp;",8259],["delete tmp;",5639],["unsigned long tmp;",4763],["int tmp;",4751],["if (roll < tmp)",4251],["tmp;",3770],["memset(&tmp, 0, sizeof(tmp));",3711],["memset(&tmp, 0, sizeof(tmp));",3711]],"useCount":1743347},{"word":"to","context":[["furnished to do so, subject to the following conditions:",45324],["** packaging of this file.  Please review the following information to",89527],["** packaging of this file.  Please review the following information to",101077],["furnished to do so, subject to the following conditions:",45324],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",43690],["* This Source Code Form is subject to the terms of the Mozilla Public",39508],["* furnished to do so, subject to the following conditions:",35669],["* furnished to do so, subject to the following conditions:",35669],["furnished to do so, subject to the following conditions:",29897],["furnished to do so, subject to the following conditions:",29897]],"useCount":45043827},{"word":"token","context":[["parseError(token);",3647],["token = COM_ParseExt( text, qfalse );",3871],["currentValue().setOffsetLimit(token.end_ - begin_);",2170],["currentValue().setOffsetStart(token.start_ - begin_);",2170],["uint8 token;",2225],["typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,",2231],["idToken token;",2417],["Token token;",2819],["if ( token[0] == 0 )",2923],["return token;",3181]],"useCount":938611},{"word":"too","context":[["#error \"(The moc has changed too much.)\"",12708],["Nan::ThrowError(\"Array too short.\");",10598],["// Don't bother if send buffer is too full to respond anyway",6084],["return DoS(100, error(\"ConnectBlock() : too many sigops\"));",4139],["else if (strstr(e.what(), \"size too large\"))",4098],["throw runtime_error(\"too few parameters\");",3770],["/* thread group stop support, overloads group_exit_code too */",3531],["ui->lblQRCode->setText(tr(\"Resulting URI too long, try to reduce the text for label / message.\"));",2576],["return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));",2914],["// Scroll debug.log if it's getting too big",3469]],"useCount":641677},{"word":"top","context":[["RenameThread(\"bitcoin-key-top\");",2145],["// the top level of the deal.II distribution.",17668],["See the README file in the top-level LAMMPS directory.",8796],["See the README file in the top-level LAMMPS directory.",5817],["// the top level of the deal.II distribution.",3627],["struct sched_domain *parent;\t/* top domain must be null terminated */",3523],["\"td.time { color: #808080; padding-top: 3px; } \"",3068],["See AUTHORS file in the top level directory for information",2238],["* be used through the normal accessor functions. The top bits of page->flags",2236],["// Note: can't top-up keypool here, because wallet is locked.",2051]],"useCount":1160232},{"word":"tr","context":[["QMenu *file = appMenuBar->addMenu(tr(\"&File\"));",3327],["<tr>",17535],["tr(\"Date: %1\\n\"",3398],["ui->capsLabel->setText(tr(\"Warning: The Caps Lock key is on!\"));",4447],["trace_t tr;",4765],["tr(\"The supplied passphrases do not match.\"));",6158],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["QMessageBox::critical(this, tr(\"Wallet encryption failed\"),",12277],["QMessageBox::warning(this, tr(\"Send Coins\"),",12377],["</tr>",22051]],"useCount":1562313},{"word":"transaction","context":[["// large transaction with a missing parent then we assume",4058],["/** Check for standard transaction types",6794],["\"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");",5389],["// Coinbase is only valid in a block, not as a loose transaction",4251],["// Store transaction in memory",4150],["// First transaction must be coinbase, the rest must not be",4119],["// Tally transaction fees",4096],["// it will rebroadcast it later, after the parent transaction(s)",4058],["// Locate the transaction",4002],["// Read prev transaction",3841]],"useCount":1134071},{"word":"tree","context":[["*  be found in the AUTHORS file in the root of the source tree.",14568],["@param tree the tree to append this item to",3604],["tree",3667],["pANTLR3_BASE_TREE\ttree;",3749],["/** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees",4232],["* COPYING in the main directory of this source tree, or the",5182],["static inline tree",6343],["return tree;",8696],["*  be found in the AUTHORS file in the root of the source tree.",13737],["@param tree the tree to append this item to",3604]],"useCount":1808641},{"word":"true","context":[["return true;",4657558],["return true;",918038],["return true;",455114],["return true;",138452],["SetSentErrorMessage(true);",88689],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["found = true;",62195],["while (true)",59135],["handler->SetSentErrorMessage(true);",58615],["while (true) {",52928]],"useCount":20078841},{"word":"try","context":[["try {",34825],["// converting string that we try to find to lower case",7722],["try{",27575],["try",30452],["try",37650],["try {",52969],["try",69528],["try {",83714],["try {",371864],["try",390713]],"useCount":1690557},{"word":"two","context":[["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Echo the message back with the nonce. This allows for two useful features:",4072],["// Seed nodes are given a random 'last seen time' of between one and two",3671],["* We have two separate sets of flags: task->state",3513],["case 1: // we have two bits",3309],["// \"Never go to sea with two chronometers; take one or three.\"",3270],["//  - The user (asking the user to fix the system clock if the first two disagree)",3267],["case 4: // we have two bits",3178],["// and distribute linked combinations including the two. You must obey",2935],["* two generic policies are available:",2833]],"useCount":1072545},{"word":"tx","context":[["CTransaction tx;",29643],["BOOST_FOREACH(const CTxIn& txin, tx.vin)",25617],["uint256 hash = tx.GetHash();",25230],["for (unsigned int i = 0; i < tx.vin.size(); i++)",14800],["BOOST_FOREACH(const CTransaction& tx, vtx)",13696],["if (tx.IsCoinBase())",13143],["if (!tx.IsCoinBase())",9474],["BOOST_FOREACH(const CTransaction& tx, block.vtx)",8544],["ssData >> tx;",7865],["BOOST_FOREACH(CTransaction& tx, vtx)",7625]],"useCount":1275982},{"word":"type","context":[["/** Run-time type information (and related methods). */",10227],["u8 type;",10478],["if (type != NULL) return type;",11337],["if (type != NULL) return type;",11337],["switch(type)",15294],["return type;",25480],["switch (type) {",28072],["int type;",34262],["switch (type) {",35124],["switch (type)",47706]],"useCount":10717961},{"word":"typedef","context":[["typedef struct",616265],["typedef struct{",18385],["typedef struct {",22763],["typedef PACKED_PRE struct PACKED_POST",37240],["typedef",58745],["typedef union {",122795],["typedef enum",196175],["typedef union",219468],["typedef enum {",305538],["typedef struct {",702685]],"useCount":9103862},{"word":"typename","context":[["template<typename T>",163225],["template <typename T1, typename T2, typename T3, typename T4, typename T5,",25436],["template <typename T1, typename T2, typename T3, typename T4, typename T5,",25436],["template <typename T1, typename T2, typename T3, typename T4, typename T5,",25436],["template <typename T1, typename T2, typename T3, typename T4, typename T5,",25436],["template <typename T1, typename T2, typename T3, typename T4, typename T5,",25436],["template <typename T>",52634],["template<typename T>",53955],["typename T6, typename T7, typename T8, typename T9, typename T10,",20825],["template <typename T>",229492]],"useCount":5356992},{"word":"types","context":[["#include <sys/types.h>",77085],["#include <sys/types.h>",42645],["/* Exported types ------------------------------------------------------------*/",21270],["#include <sys/types.h>",20910],["#include \"types.h\"",19229],["// nested types ----------------------------------------------------",16176],["#include <asm/types.h>",9388],["/* Define to 1 if you have the <sys/types.h> header file. */",7968],["default: to.add(\"}\"); types.pop_back(); vtypes.pop_back(); stages.pop_back(); flags.pop_back(); break;",7294],["#include <linux/types.h>",98966]],"useCount":1636935},{"word":"u","context":[["} u;",45117],["case 'u':",6276],["return u;",5719],["case 'u':",3790],["bool operator()(Unit* u)",3716],["static inline struct user_struct *get_uid(struct user_struct *u)",3626],["atomic_inc(&u->__count);",3626],["} u;",3613],["return u;",3605],["printf(\"ProcessMessage(%s, %u bytes) FAILED\\n\", strCommand.c_str(), nMessageSize);",3439]],"useCount":2518126},{"word":"u16","context":[["u16                  reserved;",6211],["u16                  bit_width;",2541],["u16 aid;",2615],["u16 type;",2716],["u16 capability;",3045],["u16 len;",3097],["u16 length;",3263],["u16 beacon_interval;",3315],["u16 flags;",3403],["u16 reserved;",4960]],"useCount":1135516},{"word":"u32","context":[["u32 flags;",20163],["unsigned int    u32;",17977],["u32 size;",14134],["u32 type;",5164],["u32 offset;",5110],["u32 status;",4944],["u32 packet_type;",4887],["u32 len;",4415],["u32 val;",4350],["u32 session_id;",4219]],"useCount":3823856},{"word":"u64","context":[["u64\t\t\tblock_max;",3572],["uint64_t u64;",16886],["extern void sched_clock_idle_wakeup_event(u64 delta_ns);",7144],["u64 curr_chain_key;",3608],["u64\t\t\texec_max;",3572],["u64\t\t\twait_start;",3572],["u64\t\t\tblock_start;",3572],["u64\t\t\tsleep_start;",3572],["u64\t\t\twait_max;",3572],["u64\t\t\tsleep_max;",3572]],"useCount":1084110},{"word":"u8","context":[["u8         syndrome[0x20];",4152],["u8 flags;",12429],["u8 type;",10478],["u8 reserved;",7116],["u8 bssid[ETH_ALEN];",5631],["const u8 *ie;",4766],["u8 data[0];",4644],["u8 reserved1;",4312],["u8         op_mod[0x10];",4157],["u8 variable[0];",5361]],"useCount":2750713},{"word":"ui","context":[["delete ui;",56686],["#include \"ui/base/l10n/l10n_util.h\"",24540],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"ui/base/resource/resource_bundle.h\"",15589],["namespace ui {",14764],["ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");",11974],["ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");",11948],["#include \"ui/views/widget/widget.h\"",11270],["for(int i = 0; i < ui->entries->count(); ++i)",10076],["ui->setupUi(this);",56712]],"useCount":3285203},{"word":"uint","context":[["typedef unsigned int uint;",3243],["uint i= 0;",1856],["typedef unsigned uint;",1952],["uint",1964],["uint i = 0;",2140],["uint dummy_errors;",2440],["uint",3595],["uint length;",4265],["uint i;",7207],["uint i;",12806]],"useCount":1420719},{"word":"uint16","context":[["uint16 version;",1813],["*data << uint16(0);",1814],["uint16 duration;",1850],["typedef unsigned short uint16;",1868],["uint16 eDest;",1884],["uint16 flags;",1902],["uint16 log_slot = FindQuestSlot(quest_id);",2199],["uint16 field = itr->second.pos / 2;",2384],["data << uint16(0);",3119],["uint16 dest;",3947]],"useCount":796567},{"word":"uint16_t","context":[["uint16_t i;",9149],["uint16_t length;",6486],["uint16_t size;",4411],["uint16_t handle;",4200],["uint16_t\thandle;",3959],["uint16_t type;",3798],["uint16_t                  reserved;",3331],["uint16_t",3427],["uint16_t reg_addr;",3479],["uint16_t flags;",3789]],"useCount":1934938},{"word":"uint256","context":[["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["vector<uint256> vWorkQueue;",9221],["uint256 hash = tx.GetHash();",25230],["uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();",16148],["uint256 hash;",14108],["uint256 hash = GetHash();",12736],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["uint256 GetHash() const",10372],["BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)",9805],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322]],"useCount":1169408},{"word":"uint32","context":[["void UpdateAI(uint32 diff) OVERRIDE",11565],["void UpdateAI(uint32 const diff)",12025],["::google::protobuf::uint32 tag;",14309],["void UpdateAI(const uint32 uiDiff)",19064],["while (uint32 eventId = events.ExecuteEvent())",23219],["void UpdateAI(uint32 diff) override",23247],["data << uint32(0);",52701],["uint32 oldMSTime = getMSTime();",53911],["void UpdateAI(const uint32 diff)",64808],["uint32 count = 0;",77468]],"useCount":8337979},{"word":"uint32_t","context":[["uint32_t",16436],["uint32_t offset;",8747],["uint32_t size;",9183],["uint32_t block;",9484],["uint32_t U;",10127],["uint32_t blockSize);",8282],["uint32_t read(::apache::thrift::protocol::TProtocol* iprot);",16720],["uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;",16807],["uint32_t xfer = 0;",20421],["uint32_t flags;",21389]],"useCount":11796718},{"word":"uint64","context":[["uint64 nNonce = 1;",3000],["uint64 nServices;",3206],["data << uint64(0);",3349],["uint64 PlayerGUID;",3848],["uint64 nonce = 0;",5880],["data << uint64(guid);",8924],["data << uint64(GetGUID());",8930],["uint64 guid;",21413],["uint64 nBlockSize = 1000;",2990],["uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;",2995]],"useCount":969007},{"word":"uint64_t","context":[["uint64_t size;",3364],["obj.push_back(Pair(\"currentblocktx\",(uint64_t)nLastBlockTx));",2923],["obj.push_back(Pair(\"pooledtx\",      (uint64_t)mempool.size()));",2905],["uint64_t u64;",16886],["uint64_t",7322],["uint64_t",3712],["typedef unsigned __int64 uint64_t;",3678],["uint64_t Address,",3311],["uint64_t nonce = 0;",3009],["obj.push_back(Pair(\"currentblocksize\",(uint64_t)nLastBlockSize));",2923]],"useCount":1298863},{"word":"uint8","context":[["for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)",6101],["for (uint8 i = 0; i < MAX_QUEST_LOG_SIZE; ++i)",6242],["for (uint8 i = 0; i < 2; ++i)",6260],["for (uint8 i = 0; i < 3; ++i)",7443],["for (uint8 i = 0; i < 4; ++i)",9512],["::google::protobuf::uint8* target) const {",12116],["::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;",13461],["::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;",13461],["data << uint8(0);",16649],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920]],"useCount":2518506},{"word":"uint8_t","context":[["uint8_t buffer[MAVLINK_MAX_PACKET_LEN];",8799],["uint8_t type;",7840],["uint8_t U;",6729],["uint8_t reg;                 /*!< Type      used for register access              */",6134],["uint8_t flags;",4756],["uint8_t",4262],["uint8_t\t\tstatus;",3827],["uint8_t i;",3801],["#define assert_param(expr) ((expr) ? (void)0 : assert_failed((uint8_t *)__FILE__, __LINE__))",3590],["void assert_failed(uint8_t* file, uint32_t line);",3618]],"useCount":2951335},{"word":"undef","context":[["#  undef machine_arch_type",432169],["#undef THIS_FILE",18583],["#undef  INTERFACE",4526],["#undef QT_MOC_LITERAL",4788],["#undef _WIN32_IE",6608],["#undef _WIN32_WINNT",7035],["#undef X",8080],["#undef INTERFACE",13243],["#undef DO_",14422],["#undef FLD",15311]],"useCount":2340206},{"word":"union","context":[["union thread_union {",3633],["typedef union",219468],["typedef union {",122795],["union",68787],["union {",15345],["union",7486],["typedef union{",5213],["union{",5120],["\"Must check which() before get()ing a union member.\");",3674],["union {",333929]],"useCount":1233174},{"word":"unit","context":[["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["if (unit)",3587],["// -limitfreerelay unit is thousand-bytes-per-minute",4200],["// update the display unit, to not use the default (\"BTC\")",5742],["int num_decimals = decimals(unit);",6429],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["if (!unit)",16098],["ObjectList* targets = GetTargets(e, unit);",18172],["switch(unit)",19703]],"useCount":1219332},{"word":"unsigned","context":[["unsigned                    : 6;",29983],["unsigned int i;",28406],["unsigned                    : 1;",768376],["unsigned                      : 1;",124731],["unsigned                    : 4;",69205],["unsigned char :1;",49296],["unsigned :1;",45867],["unsigned                    : 2;",42234],["unsigned w:32;",39400],["unsigned long flags;",38491]],"useCount":24555725},{"word":"until","context":[["// Be shy and don't send version until we hear",4380],["// until there are no more or the block reaches this size:",2761],["if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)",3261],["* Disable preemption until the scheduler is running.",3338],["// iterate backwards until we have nCount items to return:",3515],["unsigned int imbalance_pct;\t/* No balance until over watermark */",3524],["// wait until threads are done using it",3761],["// hold in disconnected pool until all refs are released",3761],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["// Don't send anything until we get their version message",3943]],"useCount":634651},{"word":"up","context":[["* Sets up I/O resources to accept and handle a new connection.",3507],["* time slack values; these are used to round up poll() and",3457],["extern int task_can_switch_user(struct user_struct *up,",3547],["// (GetBalance() sums up all unspent TxOuts)",3569],["// Extra checks to prevent \"fill up memory by spamming with bogus blocks\"",3691],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// Keep up to date with client",3816],["// Check that the block chain matches the known block chain up to a checkpoint",3882],["// clean up",5358],["* depending on how many CPUs the kernel has booted up with)",6331]],"useCount":1979665},{"word":"update","context":[["cputime_t acct_timexpd;\t/* stime + utime since last update */",3464],["if (update)",4007],["DestroyItem(INVENTORY_SLOT_BAG_0, i, update);",5668],["// Need to update only after we know CreateNewBlock succeeded",5681],["// update the display unit, to not use the default (\"BTC\")",5742],["#include \"update.h\"",5892],["// group update",6703],["if (IsInWorld() && update)",9671],["void update();",18179],["update();",81186]],"useCount":1614312},{"word":"url","context":[["const GURL& url,",27019],["#include \"url/gurl.h\"",15815],["const GURL& url,",14440],["#include \"url/gurl.h\"",9388],["ui_test_utils::NavigateToURL(browser(), url);",8200],["url,",8060],["const GURL& url) {",6234],["return url;",4647],["| available through the world-wide-web at the following url:           |",3782],["GURL url;",3721]],"useCount":1327551},{"word":"us","context":[["// Small DoS penalty so peers that send us lots of",2943],["//    avoid sending us more work, like chain download requests.",4068],["** information use the contact form at https://www.qt.io/contact-us.",6738],["** information use the contact form at http://www.qt.io/contact-us.",6928],["** use the contact form at http://www.qt.io/contact-us.",8188],["** information use the contact form at https://www.qt.io/contact-us.",9410],["** use the contact form at http://www.qt.io/contact-us.",9626],["** use the contact form at http://qt.digia.com/contact-us.",34423],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** information use the contact form at http://www.qt.io/contact-us.",2732]],"useCount":644281},{"word":"use","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",29616],["** If you have questions regarding the use of this file, please contact",31367],["** If you have questions regarding the use of this file, please contact",34088],["** use the contact form at http://qt.digia.com/contact-us.",34423],["** use the contact form at http://qt.digia.com/contact-us.",36972],["Redistribution and use in source and binary forms, with or without",40107],["// Redistribution and use in source and binary forms, with or without",42441],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",43690],["* Redistribution and use in source and binary forms, with or without",88602],["* Redistribution and use in source and binary forms, with or without",251058]],"useCount":5366307},{"word":"used","context":[["// item used",3783],["/*! This is used in the documentation of a file as a header before the",3840],["documentation, and that the name of the author not be used in",5322],["// Store the pindexBest used before CreateNewBlock, to avoid races",5639],["/*! This is used for translation of the word that will possibly",5720],["uint8_t reg;                 /*!< Type      used for register access              */",6134],["uint32_t reg;                /*!< Type      used for register access              */",6788],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["} bit;                       /*!< Structure used for bit  access                  */",14547],["{0, 0, 0, 0, 0, 0},  //reserved no used",79026]],"useCount":5226005},{"word":"user","context":[["/*The user data passed in by UMAC, it will be sent back when the above",6283],["* - decoding: Set by user.",5970],["pUserData:  user data",5706],["*\t\tinterface as the means of communication with the user level.",5266],["if (user->GetTypeId() != TYPEID_PLAYER)",4851],["// strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:",3944],["extern void update_process_times(int user);",3652],["if(dir.isEmpty()) // Default to user documents location",3582],["pUserData: user data will be passed back with the",6455],["* - encoding: Set by user.",21862]],"useCount":2017522},{"word":"uses","context":[["// but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were",3456],["*\tThe block layer uses device plugging to defer IO a little bit, in",1796],["* \t\t\t    should be considered active.  The VM uses this hint",1844],["* from jiffies_to_ns(utime + stime) if sched_clock uses something",3508],["*\t\t\tbeing set.  find_inode() uses this to prevent returning",1885],["* uses the above definitions as flags, to know which values have changed.",1904],["// Shutdown for Qt is very similar, only it uses a QTimer to detect",1959],["// Don't need this on Linux, OpenSSL automatically uses /dev/urandom",3301],["// (when using width/height on an img, Qt uses nearest instead of linear interpolation)",3093],["#ifdef CONFIG_CGROUP_MEM_RES_CTLR /* memcg uses this to do batch job */",2203]],"useCount":582588},{"word":"using","context":[["using namespace Aws::Utils;",18977],["using std::endl;",16869],["using namespace std;",436706],["using namespace std;",81434],["using namespace std;",77081],["using namespace boost;",39788],["using namespace llvm;",23950],["using content::BrowserThread;",23305],["using std::string;",23205],["using namespace json_spirit;",19482]],"useCount":5633191},{"word":"usr","context":[["# 202 \"/usr/include/bits/mathcalls.h\" 3",450],["# 272 \"/usr/include/bits/mathcalls.h\" 3",450],["# 57 \"/usr/include/bits/mathcalls.h\" 3",450],["# 179 \"/usr/include/bits/mathcalls.h\" 3",450],["/*@SWIG:/usr/share/swig1.3/php/utils.i,26,CONVERT_STRING_IN@*/",518],["*\t\tMoved to /usr/include/linux for NET3",695],["/*@SWIG:/usr/share/swig1.3/php/utils.i,7,CONVERT_INT_IN@*/",696],["* \t`asn1c -S /usr/local/share/asn1c -fcompound-names -fskeletons-copy -gen-PER`",795],["/*@SWIG:/usr/share/swig1.3/php/utils.i,16,CONVERT_FLOAT_IN@*/",1073],["# 342 \"/usr/include/bits/mathcalls.h\" 3",450]],"useCount":929237},{"word":"v","context":[["double v;",4010],["int v;",4134],["if (v.type() == str_type)",4202],["strHex = v.get_str();",4358],["case 'v':",4908],["return v;",6318],["case 'v':",7865],["return v;",17444],["return v;",28456],["* @v: pointer of type atomic_t",5300]],"useCount":4306027},{"word":"v8","context":[["TRACE_EVENT_SET_SAMPLING_STATE(\"v8\", \"V8Execution\");",23306],["v8::Local<v8::Object> holder = info.Holder();",13394],["v8::Local<v8::Object> holder = info.Holder();",13394],["namespace v8 {",10430],["namespace v8 {",8082],["v8::HandleScope scope(isolate);",7512],["v8::Local<v8::Value> argv[1] =",7467],["v8::Local<v8::Value> argv[1] =",7467],["v8::Local<v8::Function> cons =",7467],["v8::Local<v8::Object> wo = cons->NewInstance(1, argv);",7467]],"useCount":1408117},{"word":"val","context":[["return val;",25695],["return val;",20377],["SpellCast(val);",7369],["void SpellCast(float val)",7149],["return val;",5616],["int val;",5530],["val = 0;",5193],["if (val)",4711],["u32 val;",4350],["int val;",8904]],"useCount":3087012},{"word":"valid","context":[["valid = false;",13787],["if (!valid)",3646],["bool valid = false;",4114],["// Coinbase is only valid in a block, not as a loose transaction",4251],["return valid;",4372],["valid=true;",4414],["// URI has to be valid",5116],["bool valid;",5729],["bool valid = true;",6343],["valid = true;",7089]],"useCount":1315448},{"word":"value","context":[["std::string value;",9712],["* Reset value: 0x00000000U",8812],["return value;",50710],["STRUCT_FLD(value,\t\t0),",20089],["return value;",19305],["return value;",18608],["unsigned int value;",15603],["*  @param  value  reference to variable in which the value should be stored",10435],["*  @param  value  reference to variable in which the value should be stored",10435],["if (value)",10072]],"useCount":12441341},{"word":"values","context":[["#include \"base/values.h\"",32749],["* time slack values; these are used to round up poll() and",3457],["* Supported values:",19230],["// Next default values for new objects",8484],["*          This parameter can be one of the following values:",5939],["#include \"base/values.h\"",5078],["// Check for negative or overflow output values",4125],["// Check for negative or overflow input values",4122],["*         This parameter can be one of the following values:",3908],["*    the EXP_n values would be 1981, 2034 and 2043 if still using only",3570]],"useCount":2499177},{"word":"var","context":[["var->type= SHOW_LONG;",3893],["var->value= buff;",5088],["while (var) {",1360],["if (var->IsContextSlot()) {",1431],["if (!var->value)",1483],["snd_pcm_hw_param_t var)",1558],["\"var result = 0;\"",1610],["struct st_mysql_sys_var*\tvar,\t/*!< in: pointer to system",1665],["struct st_mysql_sys_var*\tvar,\t/*!< in: pointer to",2991],["return var;",3995]],"useCount":889891},{"word":"variable","context":[["#include \"variable.h\"",1792],["/** Global variable that points to the active block tree (protected by cs_main) */",1712],["*  @param  value  reference to variable in which the value should be stored",10435],["// The following part of the code determines the CLIENT_BUILD variable.",1759],["* NOTE: this field is variable length. (Allocated dynamically",6331],["u8 variable[0];",5361],["#pragma clang diagnostic ignored \"-Wunused-variable\"",4506],["system variable */",3474],["variable */",2831],["* wake_up() has to be called after changing any variable that could",1779]],"useCount":954521},{"word":"variables","context":[["// Global state variables",3761],["/* /sys/devices/system/cpu/cpufreq: entry point for global variables */",2771],["/* Private variables ---------------------------------------------------------*/",2453],["/* Local variables */",2167],["// variables",1648],["// Declare helper variables",1629],["//**Member variables****************************************************************************",1626],["* Local variables:",11482],["/** clear all internal member variables",1498],["variant execute(const formula_callable& variables, formula_debugger *fdb) const {",1375]],"useCount":644435},{"word":"vector","context":[["using std::vector;",10075],["#include <vector>",327681],["using std::vector;",8518],["vector<uint256> vWorkQueue;",9221],["vector<string> vWords;",11992],["#include <vector>",12666],["using std::vector;",15634],["vector<CInv> vInv;",19636],["#include <vector>",81712],["#include <vector>",163120]],"useCount":5107741},{"word":"version","context":[["*    Mac OS X:         in version 10.0 and later",30128],["* Foundation, in version 2 as it comes in the \"COPYING\" file of the",20771],["// version without notice, or even be removed.",19083],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["#include \"version.h\"",11842],["version.",11280],["* Foundation, in version 2 as it comes in the \"COPYING\" file of the",10225],["* of those above. If you wish to allow use of your version of this file only",9240],["* use your version of this file under the terms of the MPL, indicate your",9077],["#include <linux/version.h>",8337]],"useCount":2455243},{"word":"view","context":[["if (!tx.HaveInputs(view))",3990],["void copyEntryData(QAbstractItemView *view, int column, int role)",3237],["QModelIndexList selection = view->selectionModel()->selectedRows(column);",3299],["if(!view || !view->selectionModel())",3300],["if(!view || !view->selectionModel())",3300],["CCoinsViewCache view(*pcoinsTip, true);",3507],["CCoinsViewCache &view = *pcoinsTip;",3531],["unsigned char* view,",3829],["view.show();",3853],["if (!view)",5120]],"useCount":1200099},{"word":"virtual","context":[["virtual",42354],["virtual void SetUp() {",17206],["virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support",6819],["virtual void",26029],["virtual void Observe(int type,",6830],["virtual bool",8412],["virtual BOOL OnInitDialog();",8479],["virtual void SetUp() OVERRIDE {",9136],["// ClassWizard generated virtual function overrides",9856],["virtual void TearDown() {",10599]],"useCount":7758433},{"word":"void","context":[["void",1013999],["void",498070],["static inline void",137167],["void Reset()",114329],["static void",109796],["void",88418],["void",77768],["inline void",72471],["static void",71007],["void",740422]],"useCount":56024373},{"word":"volatile","context":[["{int volatile ___ = 1;",27712],["asm volatile (",11969],["asm volatile(",8776],["__asm__ volatile(                                           \\",8672],["volatile OrigFn        _orig = (orig);                      \\",8663],["volatile unsigned long _res;                                \\",8587],["{int volatile ___ = 1;(void)t;(void)x;",8188],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;",7682],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;",4446],["extern volatile near struct {",4365]],"useCount":2653029},{"word":"w","context":[["w->native = r;",7467],[": \"=w\"(result)                                          \\",6290],["w.show();",6876],["w->Wrap(wo);",7467],[": \"w\"(a), \"w\"(b)",7572],[": \"w\"(a), \"w\"(b)",7572],["return w;",10067],[": \"=w\"(result)",20359],["unsigned w:32;",39400],["int w, h;",5621]],"useCount":2349020},{"word":"wait","context":[["u64 freepages_delay;\t/* wait for memory reclaim */",3463],["u64 blkio_delay;\t/* wait for sync block io completion */",3501],["u64 swapin_delay;\t/* wait for swapin block io completion */",3501],["// wait until threads are done using it",3761],["// Has to wait for dependencies",3843],["wait_queue_head_t wait;",4276],["wait();",4910],["#include <sys/wait.h>",5346],["#include <sys/wait.h>",6033],["#include <linux/wait.h>",15153]],"useCount":642891},{"word":"wallet","context":[["#include \"wallet.h\"",22931],["throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");",4939],["throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");",5081],["\"Stores the wallet decryption key in memory for <timeout> seconds.\");",5661],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["LOCK(wallet.cs_wallet);",4515],["// Generate a new key that is added to wallet",4481],["\"Encrypts the wallet with <passphrase>.\");",6675],["\"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");",6675],["LOCK(wallet->cs_wallet);",7725]],"useCount":680984},{"word":"want","context":[["* List of flags we want to share for kernel threads,",3329],["// and we want it right after the last block so they don't",3287],["* CPU time want to group these counts together and treat all three",3386],["* TASK is a pointer to the task whose backtrace we want to see (or NULL for current",3529],["return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));",3627],["/* For IDL files that don't want to include root IDL files. */",15792],["// Note: not using straight sprintf here because we do NOT want",6536],["// Don't want addr from older versions unless seeding",4099],["*  - if you want to count load-averages more often, you need more",3570],["// when specifying an explicit binding address, you want to listen on it",3634]],"useCount":871309},{"word":"warning","context":[["#pragma warning(pop)",12166],["#pragma warning(disable:4804)",3421],["#pragma warning(disable:4805)",3424],["#pragma warning(disable:4717)",3433],["QMessageBox::warning(this, tr(\"Send Coins\"),",12377],["#pragma warning(push)",11118],["#pragma warning(pop)",7571],["#pragma warning(push)",6090],["QMessageBox::warning(this, windowTitle(),",5930],["#pragma warning(disable:4786)",4420]],"useCount":687391},{"word":"was","context":[["throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");",5081],["// Previous library name was",4315],["// the program was closed and restarted.  Not an issue on windows.",3462],["sigset_t saved_sigmask;\t/* restored if set_restore_sigmask() was used */",3464],["* value indicates whether a reschedule was done in fact.",3522],["* The implementation was written so as to conform with Netscapes SSL.",3703],["// Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock",3715],["// Notify UI to display prev block's coinbase if it was ours",3780],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["***   This header was automatically generated from a Linux kernel header",4643]],"useCount":2209196},{"word":"way","context":[["// Convert argument list to JSON objects in method-dependent way,",2351],["// errors now are not fatal, we still did a reorganisation to a new chain in a valid way",2081],["/** Count ECDSA signature operations the old-fashioned (pre-0.6) way",3318],["* about the task exiting. Confusing, but this way",3513],["// Calculate total balance a different way from GetBalance()",3569],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */",19994],["// Alternately, find a way to make this input mlock()'d to begin with.",3089],["* The idea being to have a \"virtual\" mm in the same way",2245],["* There is no good OS-independent way to check a key state in Qt, but we",3087]],"useCount":580613},{"word":"we","context":[["// Parse the account first so we don't generate a key if there's an error",8026],["// Be shy and don't send version until we hear",4380],["//Return since we have no target",17729],["// converting string that we try to find to lower case",7722],["// Note: not using straight sprintf here because we do NOT want",6536],["case 0: // we have no bits",6487],["// Need to update only after we know CreateNewBlock succeeded",5681],["// Ask this guy to fill in what we're missing",4754],["// Process this block the same as if we had received it from another node",4477],["@param[in] mapInputs\tMap of previous transactions that have outputs we're spending",9027]],"useCount":8789167},{"word":"what","context":[["// Ask this guy to fill in what we're missing",4754],["return state.Abort(_(\"System error: \") + e.what());",4553],["// Don't know what it is, just say we already got one",4138],["if (strstr(e.what(), \"end of data\"))",4106],["else if (strstr(e.what(), \"size too large\"))",4098],["SWIG_exception(SWIG_RuntimeError, e.what());",3930],["std::cerr << e.what() << std::endl;",3800],["strPrint = string(\"error: \") + e.what();",3794],["<< ex.what() << \"\\n\";",4599],["SWIG_exception(SWIG_RuntimeError, e.what());",10391]],"useCount":896326},{"word":"when","context":[["/*The user data passed in by UMAC, it will be sent back when the above",6283],["// Detect when changing the account of an address that is the 'unused current key' of another account:",3569],["// when only connecting to trusted nodes, do not seed via DNS, or listen by default",3612],["// do not map ports or try to retrieve public IP when not listening (pointless)",3631],["// when specifying an explicit binding address, you want to listen on it",3634],["// even when -connect or -proxy is specified",3634],["// headers also when they are imported in the client",3993],["** WARNING! All changes made in this file will be lost when recompiling UI file!",5877],["* Queues the request into a thread executor and triggers associated callback when operation has finished.",6270],["/* Use this macro when declaring classes that implement this interface. */",20001]],"useCount":4147900},{"word":"where","context":[["/* Number of bits in a file offset, on hosts where this is settable. */",1860],["* This is only for internal list manipulation where we know",1704],["pgoff_t start;\t\t\t/* where readahead started */",1816],["struct pid *pid;\t/* pid or -pgrp where SIGIO should be sent */",1833],["// Coordinates where words start and direction (0 = horizontal)",2388],["* The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.",2406],["* The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.",2406],["void*\t\t\t\tvar_ptr,/*!< out: where the",3009],["/* Define to the address where bug reports for this package should be sent. */",7929],["// ... where all scripts are stringified scripts.",1650]],"useCount":1169913},{"word":"whether","context":[["* Reevaluate whether the task has signals pending delivery.",3489],["// Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)",2415],["* check whether in the task is init in its own pid namespace.",2436],["\"[includeempty] whether to include accounts that haven't received any payments.\\n\"",3154],["\"[includeempty] whether to include addresses that haven't received any payments.\\n\"",3158],["* is correctly serialised wrt the caller's subsequent test of whether to",3634],["/** check whether a given address is in a network we can probably connect to */",3638],["/** check whether a given address is potentially local */",3638],["whatsoever resulting from loss of use, data or profits, whether",5339],["* value indicates whether a reschedule was done in fact.",3522]],"useCount":996120},{"word":"which","context":[["/* Define to the sub-directory in which libtool stores uninstalled libraries.",3828],["// Find which sockets have data to receive",3760],["// can use the `COCOAPODS` macro definition which is",3993],["// 10,000 orphans, each of which is at most 5,000 bytes big is",4015],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["* This file is part of the Genode OS framework, which is distributed",4343],["* This file is part of the Genode OS framework, which is distributed",6105],["/* rq on which this entity is (to be) queued: */",6945],["* VirtualBox OSE distribution, in which case the provisions of the",7877],["*  @param  value  reference to variable in which the value should be stored",10435]],"useCount":3702366},{"word":"while","context":[["} while (0)",342385],["while (1) {",33367],["while (uint32 eventId = events.ExecuteEvent())",23219],["while (1)",25557],["} while(0)",80536],["while (result->NextRow());",64748],["while (true)",59135],["while (true) {",52928],["} while (result->NextRow());",33538],["} while (0);",27827]],"useCount":5222508},{"word":"widget","context":[["widget->setAlignment(Qt::AlignRight|Qt::AlignVCenter);",3249],["widget->setValidator(amountValidator);",3256],["widget->Init(params);",3477],["return widget;",5528],["switch (widget) {",6126],["SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());",9629],["#include \"ui/views/widget/widget.h\"",11270],["#include \"ui/views/widget/widget.h\"",11270],["void setupAmountWidget(QLineEdit *widget, QWidget *parent)",3238],["SendCoinsEntry *first = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(0)->widget());",3221]],"useCount":902896},{"word":"width","context":[["int width) {",5480],["/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */",40340],["int width;",14340],["int width);",8695],["GLsizei width,",8377],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",7120],["uint32_t width;",6958],["/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */",5726],["int width, height;",6040],["GLsizei width,",5464]],"useCount":2857176},{"word":"will","context":[["** WARNING! All changes made in this file will be lost!",13647],["// Microsoft Visual C++ will insert additional declarations immediately before the previous line.",8538],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["function pointer will be called */",6857],["pUserData: user data will be passed back with the",6455],["// stdafx.obj will contain the pre-compiled type information",6297],["/*The user data passed in by UMAC, it will be sent back when the above",6283],["* If a daeMetaElement already exists it will return that instead of creating a new one.",6026],["** WARNING! All changes made in this file will be lost when recompiling UI file!",5877],["/*! This is used for translation of the word that will possibly",5720]],"useCount":5543567},{"word":"window","context":[["// Use an exponentially decaying ~10-minute window:",4196],["// If -min option passed, start window minimized.",3316],["if (window->SkipItems)",8336],["#include \"ui/aura/window.h\"",8596],["if (window)",9632],["ImGuiWindow* window = GetCurrentWindow();",19697],["@property (strong, nonatomic) UIWindow *window;",39369],["window.show();",5916],["ImGuiWindow* window = GetCurrentWindowRead();",4745],["window->show();",4487]],"useCount":1935062},{"word":"with","context":[["// with this library; see the file COPYING3.  If not see",42545],["// Redistribution and use in source and binary forms, with or without",42441],["Redistribution and use in source and binary forms, with or without",40107],["*    documentation and/or other materials provided with the distribution.",34821],["*    and/or other materials provided with the distribution.",33452],["* Redistribution and use in source and binary forms, with or without",88602],["*    documentation and/or other materials provided with the distribution.",106352],["* Redistribution and use in source and binary forms, with or without",251058],["* along with this library; see the file COPYING.LIB.  If not, write to",26690],["* along with this library; see the file COPYING.LIB.  If not, write to",27851]],"useCount":9860655},{"word":"within","context":[["* @member:\tthe name of the list_struct within the struct.",5517],["// hand only do so within the body of existing method and function",1730],["// hand only do so within the body of existing method and function",1838],["/* number of times partitions within this device have been opened. */",1865],["* Radix-tree tags, for tagging dirty and writeback pages within the pagecache",1866],["* @member:\tthe name of the hlist_node within the struct.",1873],["* Determine if an address is within the vmalloc range",2167],["* within the limits is used. If (cpufreq_driver->setpolicy> exists, these",2833],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["* If pid_alive fails, then pointers within the task structure",3523]],"useCount":602901},{"word":"without","context":[["* purpose with or without fee is hereby granted, provided that the above",18240],["* Redistribution and use in source and binary forms, with or without",88602],["// Redistribution and use in source and binary forms, with or without",42441],["Redistribution and use in source and binary forms, with or without",40107],["* Redistribution and use in source and binary forms, with or without modification,",24360],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["// Redistribution and use in source and binary forms, with or without",19804],["// version without notice, or even be removed.",19083],["* Redistribution and use in source and binary forms, with or without",251058]],"useCount":1615373},{"word":"word","context":[["representation if needed. This assures that Qt can word-wrap long tooltip messages.",1801],["file >> word;",1873],["UINT32 word;",2456],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["// Don't word-wrap this (fixed-width) tooltip",3264],["* alone is a single word that can safely be read normally.",3524],["/*! This is used for translation of the word that will possibly",5720],["UINT32\t\t\tword;",4356],["const word& name,",4340],["*    The word 'cryptographic' can be left out if the rouines from the library",3710]],"useCount":664634},{"word":"work","context":[["*          'break' will not work as expected - use goto instead.",3531],["* distributed with this work for additional information",9993],["* distributed with this work for additional information",9438],["// Check proof of work matches claimed amount",8366],["//    avoid sending us more work, like chain download requests.",4068],["// distributed with this work for additional information",3918],["return error(\"CheckProofOfWork() : nBits below minimum work\");",3793],["// Rather not work on nonstandard transactions (unless -testnet)",3667],["// minimum amount of work that could possibly be required nTime after",3653],["struct work_struct work;",8560]],"useCount":1005402},{"word":"would","context":[["// would make this much faster for applications that do this a lot.",2226],["* in a product, an acknowledgment in the product documentation would be",2333],["// To help v0.1.5 clients who would see it as a negative number",3433],["*    the EXP_n values would be 1981, 2034 and 2043 if still using only",3570],["// Some explaining would be appreciated",3638],["// seconds to respond to each, the 5th ping the remote sends would appear to",4073],["// This doesn't trigger the DoS code on purpose; if it did, it would make it easier",4076],["// At default rate it would take over a month to fill 1GB",4206],["CLAIMS.  This grant does not include claims that would be infringed",4293],["in a product, an acknowledgment in the product documentation would be",7570]],"useCount":713204},{"word":"write","context":[["*  along with XBMC; see the file COPYING.  If not, write to",5330],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["// with this library; see the file COPYING.  If not, write to the Free",6206],["void *buf, int len, int write);",6398],["*   along with this program; if not, write to the                         *",15589],["uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;",16807],["*   along with this program; if not, write to the                         *",17766],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["along with this library; see the file COPYING.LIB.  If not, write to",23776],["* along with this library; see the file COPYING.LIB.  If not, write to",26690]],"useCount":1927349},{"word":"written","context":[["** a written agreement between you and The Qt Company.  For licensing terms and",6208],["** a written agreement between you and The Qt Company. For licensing terms",9470],["unsigned long long insn_referenced = abuf->written;",10546],["** a written agreement between you and Nokia.",12946],["** a written agreement between you and Nokia.",14574],["** conditions contained in a signed written agreement between you and Nokia.",14942],["** conditions contained in a signed written agreement between you and Nokia.",16029],["** a written agreement between you and The Qt Company. For licensing terms",16338],["** a written agreement between you and Digia.  For licensing terms and",33459],["** a written agreement between you and Digia.  For licensing terms and",37400]],"useCount":688976},{"word":"www","context":[["** use the contact form at http://www.qt.io/contact-us.",9626],["http://www.cocos2d-x.org",9663],["For the latest info, see http://www.ogre3d.org/",10372],["* http://www.mozilla.org/MPL/",10626],["* Support and FAQ: visit <a href=\"http://www.atmel.com/design-support/\">Atmel Support</a>",10916],["* or visit www.oracle.com if you need additional information or have any",11601],["XCSoar Glide Computer - http://www.xcsoar.org/",13904],["** Contact: http://www.qt-project.org/legal",40520],["** Contact: http://www.qt-project.org/legal",46977],["** and conditions see https://www.qt.io/terms-conditions. For further",9410]],"useCount":1258587},{"word":"x","context":[["return x;",20997],["return x;",19602],["int x;",16904],["int x, y;",15616],["int x;",12455],["x = 0;",12292],["x++;",10855],["int x = 0;",10257],["double **x = atom->x;",9940],["float x, y, z;",29528]],"useCount":12211208},{"word":"x00","context":[["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216],["\"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\", \"\\x00\\x00\",",45216]],"useCount":1545255},{"word":"y","context":[["float x, y, z, o;",5910],["int x, y;",6004],["float x, y, z;",29528],["int x, y;",15616],["int y;",10943],["float y;",9594],["y = 0;",8015],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;",7682],["int y;",7423],["return y;",6717]],"useCount":6141962},{"word":"you","context":[["** conditions contained in a signed written agreement between you and Nokia.",16029],["** a written agreement between you and The Qt Company. For licensing terms",16338],["** If you have questions regarding the use of this file, please contact",31367],["** a written agreement between you and Digia.  For licensing terms and",33459],["** If you have questions regarding the use of this file, please contact",34088],["** In addition, as a special exception, Digia gives you certain additional",37026],["** a written agreement between you and Digia.  For licensing terms and",37400],["** In addition, as a special exception, Nokia gives you certain additional",37705],["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, Nokia gives you certain additional",40703]],"useCount":3052028},{"word":"your","context":[["* of those above. If you wish to allow use of your version of this file only",5726],["* use your version of this file under the terms of the MPL, indicate your",5668],["* WARNING: This is generated code. Modify at your own risk and without support.",15951],["* of those above. If you wish to allow use of your version of this file only",9240],["* distribute the resulting executable under terms of your choice, provided that",9187],["* use your version of this file under the terms of the MPL, indicate your",9077],["* use your version of this file under the terms of the MPL, indicate your",9077],["* @head:\tthe head for your list.",7916],["* use your version of this file under the terms of the MPL, indicate your",5668],["// TODO: Add your control notification handler code here",4538]],"useCount":782159},{"word":"z","context":[["float x,y,z;",4158],["float z;",5793],["case 'z':",3096],["float x, y, z, o;",5910],["return z;",6770],["* This header is generated by class-dump-z 0.2b.",7138],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;",7682],["float x, y, z;",29528],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;",3588],["return z;",3493]],"useCount":2134380},{"word":"zero","context":[["* @running:\t\tnon-zero when there are timers running and",3381],["// Extra zero at the end make sure bignum will interpret as a positive number",2272],["*              none-zero failure code",3815],["/* This field must be set to zero. */",2319],["/*< Clients must set this field to zero. */",2325],["/*< Clients must set this field to zero.*/",2367],["/* query the last known CPU freq (in kHz). If zero, cpufreq couldn't detect it */",2397],["/* query the current CPU frequency (in kHz). If zero, cpufreq couldn't detect it */",2411],["* the value zero, false, is returned for failure.",2737],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348]],"useCount":1280653},{"word":"zone","context":[["static inline int zone_to_nid(struct zone *zone)",2245],["* The zone field is never updated after free_area_init_core()",2231],["static inline int zone_to_nid(struct zone *zone)",2245],["static inline void set_page_zone(struct page *page, enum zone_type zone)",2246],["return zone->node;",2246],["static inline void set_page_links(struct page *page, enum zone_type zone,",2246],["set_page_zone(page, zone);",2264],["page->flags |= (zone & ZONES_MASK) << ZONES_PGSHIFT;",2265],["uint32 zone, area;",2311],["* free_area_init_nodes() passing in the PFN each zone ends at. At a basic",2180]],"useCount":604573}]