[{"word":"0f","context":[["return 0.0f;",40160],["return 1.0f;",8054],["0.0f,",5392],["float val = (float)RandomFloat(100.0f);",4257],["me->AddThreat(who, 0.0f);",3176],["float multiplier = 1.0f;",3020],["0.7f,1.0f,0.4f,1.0f,",2977],["0.7f,1.0f,0.4f,1.0f,",2977],["EXPECT_NEAR(5.0f, constraints.maximumScale, 0.01f);",2643],["if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0.0f, true))",2486]]},{"word":"0x0","context":[["0x0,",62851],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423],["0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,",8423]]},{"word":"0x00","context":[["PORT_DIPSETTING(    0x00, DEF_STR( On ) )",44735],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",28022]]},{"word":"0x0000","context":[["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",36760],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",22180],["0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,",22180]]},{"word":"0x00000000","context":[["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,",37815],["0x00000000,",16402],["0x00000000, 0x00000000, 0x00000000, 0x00000000,",3882]]},{"word":"0x01","context":[["PORT_DIPSETTING(    0x01, DEF_STR( Off ) )",5176],["case 0x01:",5115],["0x00, 0x00, 0x00, 0x01,",3079],["0x01,",2281],["0x01,",2128],["PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 )",2040],["PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN )",2034],["0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",2030],["0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",2030],["0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",2030]]},{"word":"0x02","context":[["PORT_DIPSETTING(    0x02, DEF_STR( Off ) )",4854],["case 0x02:",4676],["0x02,",2562],["PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_UNKNOWN )",2153],["PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 )",1729],["PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )",1653],["PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )",1653],["0x00, 0x00, 0x00, 0x02,",1547],["PORT_DIPSETTING(    0x02, DEF_STR( On ) )",1065],["PORT_DIPSETTING(    0x02, DEF_STR( 1C_2C ) )",1033]]},{"word":"0x20","context":[["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854],["0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,",6854]]},{"word":"0x4F","context":[[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410],[", 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F",39410]]},{"word":"0xFF","context":[["if ((pblock->nNonce & 0xFF) == 0)",2068],["0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,",2048],["0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,",2048],["0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,",2048],["0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,",2048],["return 0xFF;",1692],["0xFF, 0xFF, 0xFF, 0xFF,",1672],["0xFF, 0xFF, 0xFF, 0xFF,",1672],["0xFF, 0xFF, 0xFF, 0xFF,",1672],["0xFF, 0xFF, 0xFF, 0xFF,",1672]]},{"word":"0xff","context":[["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505],["0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,0x1,0xff,0xff,0xff,",5505]]},{"word":"A","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",40881]]},{"word":"AND","context":[["FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",28675],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",23453],["* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",23092],["* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",22932],["* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY",22385],["* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",17947],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950],["* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",15818]]},{"word":"ANY","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316]]},{"word":"ARISING","context":[["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",15278],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",14224],["** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",13155],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF",9935],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",9315],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",9052],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",8169],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",7425]]},{"word":"AS","context":[["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["distributed under the License is distributed on an \"AS IS\" BASIS,",19893],["* on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",19811],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",15795],["// distributed under the License is distributed on an \"AS IS\" BASIS,",15791],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",14709],["** \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",13156]]},{"word":"ASSERT","context":[["#ifdef ASSERT",25296],["ASSERT(false);",16743],["ASSERT(isMainThread());",8681],["ASSERT(0);",7990],["ASSERT(FALSE);",6885],["ASSERT(player);",6447],["#if ENABLE(ASSERT)",6309],["#endif // ASSERT",3836],["ASSERT(map);",3727],["ASSERT(target);",3707]]},{"word":"ASSERT_EQ","context":[["ASSERT_EQ(",5040],["ASSERT_EQ(1U, s.size());",3393],["ASSERT_EQ(\"\", err);",2584],["ASSERT_EQ(MOJO_RESULT_OK,",2546],["ASSERT_EQ(IterStatus(iter), \"(invalid)\");",2433],["ASSERT_EQ(base::PLATFORM_FILE_OK,",1983],["ASSERT_EQ(IterStatus(iter), \"a->va\");",1982],["ASSERT_EQ(2, attrNames.size());",1808],["ASSERT_EQ(2, attrs.nFields());",1779],["ASSERT_EQ(base::File::FILE_OK,",1719]]},{"word":"ASSERT_TRUE","context":[["ASSERT_TRUE(",11940],["ASSERT_TRUE(test_server()->Start());",9791],["ASSERT_TRUE(response != NULL);",9402],["ASSERT_TRUE(test_server_.Start());",5957],["ASSERT_TRUE(SetupSync()) << \"SetupSync() failed.\";",5405],["ASSERT_TRUE(extension);",4903],["ASSERT_TRUE(AllModelsMatchVerifier());",4893],["ASSERT_TRUE(GetClient(0)->AwaitMutualSyncCycleCompletion(GetClient(1)));",4859],["ASSERT_TRUE(temp_dir_.CreateUniqueTempDir());",3998],["ASSERT_TRUE(iter->Valid());",3886]]},{"word":"Add","context":[["registrar_.Add(this,",6970],["items.Add(pItem);",5200],["// TODO: Add your control notification handler code here",4538],["addrman.Add(addrFrom, addrFrom);",4025],["// Add in sigops done by pay-to-script-hash inputs;",4022],["addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);",3952],["// Add transactions that depend on this one to the priority queue",3868],["// Add wallet transactions that aren't already in a block to mapTransactions",3806],["// Add node",3780],["items.Add(item);",3711]]},{"word":"All","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["// Copyright 2014 The Chromium Authors. All rights reserved.",52484],["** All rights reserved.",43216],["All rights reserved.",41951],["// Copyright 2013 The Chromium Authors. All rights reserved.",41789],["* All rights reserved.",35998],["// All rights reserved.",27445],["// Copyright 2015 The Chromium Authors. All rights reserved.",22004],["// Copyright (c) 2011 The Chromium Authors. All rights reserved.",18204],["// Copyright (c) 2013 The Chromium Authors. All rights reserved.",16151]]},{"word":"Array","context":[["Array ret;",17437],["Array params;",10894],["Nan::ThrowError(\"Array too short.\");",10598],["Array a;",8151],["Array transactions;",8132],["Nan::ThrowError(\"Array contents invalid.\");",5438],["params = Array();",3652],["Value stop(const Array& params, bool fHelp)",3639],["Value help(const Array& params, bool fHelp)",3639],["json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const",3564]]},{"word":"Authors","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["// Copyright 2014 The Chromium Authors. All rights reserved.",52484],["// Copyright 2013 The Chromium Authors. All rights reserved.",41789],["// Copyright 2015 The Chromium Authors. All rights reserved.",22004],["// Copyright (c) 2011 The Chromium Authors. All rights reserved.",18204],["// Copyright (c) 2013 The Chromium Authors. All rights reserved.",16151],["* Authors:",9091],["// Copyright 2014 The Chromium Authors. All rights reserved.",8298],["// Copyright 2016 The Chromium Authors. All rights reserved.",6685],["// Copyright 2012 The Chromium Authors. All rights reserved.",5589]]},{"word":"B","context":[["case 'B':",4739],["case 'B':",3064],["Variable B(1);",2153],["stream->Add(\") then B%d else B%d\", true_block_id(), false_block_id());",1539],["stream->Add(\") then B%d else B%d\", true_block_id(), false_block_id());",1539],["__ B(&done);",1410],["struct B {",1390],["return B;",1230],["//                        T H E   W A R   B E G I N S",1119],["// fill in information for B",1021]]},{"word":"BE","context":[["AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",29214],["* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,",23622],["* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",21072],["* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",15973],["// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",15114],["** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",13155],["// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",10510],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",8256],["* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",7292],["* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",7085]]},{"word":"BOOST_FOREACH","context":[["BOOST_FOREACH(CNode* pnode, vNodes)",53448],["BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)",30751],["BOOST_FOREACH(const CTxIn& txin, tx.vin)",25617],["BOOST_FOREACH(CNode* pnode, vNodesCopy)",24282],["BOOST_FOREACH(const CTxOut& txout, wtx.vout)",21098],["BOOST_FOREACH(const CTxIn& txin, vin)",18213],["BOOST_FOREACH(const CTransaction& tx, vtx)",13696],["BOOST_FOREACH(const CTxOut& txout, vout)",10509],["BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)",9805],["BOOST_FOREACH(const CTransaction& tx, block.vtx)",8544]]},{"word":"BSD","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["// Use of this source code is governed by a BSD-style license that can be",25676],["* Use of this source code is governed by a BSD-style license that can be",20089],["*  Use of this source code is governed by a BSD-style license",13737],["// license:BSD-3-Clause",12314],["** $QT_BEGIN_LICENSE:BSD$",12193],["** You may use this file under the terms of the BSD license as follows:",12185],["* Software License Agreement (BSD License)",5830],["*  This source code is licensed under the BSD-style license found in the",5816],["//  the terms of the New (Revised) BSD License. Redistribution and use in source and binary",5353]]},{"word":"BUT","context":[["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",22034],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",18059],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",15795],["// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",15290],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",14262]]},{"word":"Bind","context":[["base::Bind(",20240],["base::Bind(&base::DoNothing),",2323],["bool static Bind(const CService &addr, unsigned int flags) {",1833],["fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));",1833],["fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);",1821],["fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);",1821],["fBound |= Bind(addrBind);",1815],["bool static Bind(const CService &addr, bool fError = true) {",1788],["fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound);",1786],["fBound |= Bind(CService(in6addr_any, GetListenPort()), false);",1785]]},{"word":"Boston","context":[["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Boston, MA 02110-1301, USA.",38378],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.",23676],["Boston, MA 02110-1301, USA.",20855],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",13852],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",13293],["* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.",12893],["*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *",10670],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",9404]]},{"word":"BrowserThread","context":[["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",49494],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",49494],["BrowserThread::PostTask(",36275],["DCHECK_CURRENTLY_ON(BrowserThread::UI);",26236],["using content::BrowserThread;",23305],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));",19170],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));",19170],["DCHECK_CURRENTLY_ON(BrowserThread::IO);",17113],["BrowserThread::UI, FROM_HERE,",11092],["BrowserThread::IO, FROM_HERE,",10132]]},{"word":"C","context":[["extern \"C\" {",51113],["// This file is part of the GNU ISO C++ Library.  This library is free",51033],["extern \"C\"",40418],["* Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>",24393],["* Copyright (C) 2006-2009 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>",20885],["** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).",20645],["extern \"C\" {",19942],["** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).",19445],["* Copyright (C) 2008-2012 TrinityCore <http://www.trinitycore.org/>",18458],["* Copyright (C) 2008-2013 TrinityCore <http://www.trinitycore.org/>",16121]]},{"word":"CBlockIndex","context":[["CBlockIndex* pindex = (*mi).second;",22473],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["static CBlockIndex* pindexPrev;",9598],["CBlockIndex* pindexPrev = pindexBest;",8645],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)",5527],["CBlockIndex* pindex = item.second;",5484],["CBlockIndex* pindexPrevNew = pindexBest;",5151],["CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);",4771],["CBlockIndex* pindex = NULL;",4748]]},{"word":"CHECK","context":[["// CHECK-NEXT: RUNS",3996],["// CHECK-NEXT:           <dict>",3356],["// CHECK-NEXT:           </dict>",3356],["// CHECK-NEXT:            <key>file</key><integer>0</integer>",3284],["CHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",3105],["CHECK(false);",3095],["CHECK(try_catch.HasCaught());",2944],["CHECK(!try_catch.HasCaught());",2217],["// CHECK-NEXT: Left",2040],["// CHECK-NEXT: Arrived",2036]]},{"word":"CONTRACT","context":[["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",23246],["* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",22356],["// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",15297],["* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",14258],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",14224],["** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",13898],["* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",11933],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",9052],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",8169]]},{"word":"CONTRIBUTORS","context":[["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,",23622],["* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",21072],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950],["// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",15114],["** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",13159],["** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",13155],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",8256],["* THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY",8176],["THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",8168]]},{"word":"COPYRIGHT","context":[["AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",29214],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",22649],["* are too numerous to list here. Please refer to the COPYRIGHT",20480],["* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.",16107],["* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",15973],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950],["// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",15325],["** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",13159],["** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",13156]]},{"word":"CTransaction","context":[["CTransaction tx;",29643],["BOOST_FOREACH(const CTransaction& tx, vtx)",13696],["BOOST_FOREACH(const CTransaction& tx, block.vtx)",8544],["CTransaction txNew;",7716],["BOOST_FOREACH(CTransaction& tx, vtx)",7625],["CTransaction txPrev;",4176],["CTransaction& txPrev = inputs[prevout.hash].second;",4125],["if (pblock->vtx[nIndex] == *(CTransaction*)this)",3778],["vector<CTransaction> vDelete;",3616],["CTransaction& tx = (*mi).second;",3537]]},{"word":"CastSpell","context":[["_unit->CastSpell(_unit, spells[i].info, spells[i].instant); break;",4948],["_unit->CastSpell(target, spells[i].info, spells[i].instant); break;",4878],["_unit->CastSpell(_unit, spells[i].info, spells[i].instant);",2368],["_unit->CastSpell(target, spells[i].info, spells[i].instant);",2251],["CastSpell(this, spell_id, true);",2099],["CastSpell(this, itr->second->spellId, true);",1806],["CastSpell(this, spellId, true);",1699],["m_caster->CastSpell(m_caster, 23445, true);",1598],["CastSpell(this, 26013, true);               // Deserter",1525],["m_caster->CastSpell(m_caster, spell_id, true, NULL);",1436]]},{"word":"CharacterDatabase","context":[["CharacterDatabase.Execute(stmt);",38702],["CharacterDatabase.CommitTransaction(trans);",20160],["SQLTransaction trans = CharacterDatabase.BeginTransaction();",18891],["PreparedQueryResult result = CharacterDatabase.Query(stmt);",13316],["CharacterDatabase.BeginTransaction();",8760],["CharacterDatabase.CommitTransaction();",8726],["if (PreparedQueryResult result = CharacterDatabase.Query(stmt))",3443],["CharacterDatabase.ExecuteOrAppend(trans, stmt);",2627],["result = CharacterDatabase.Query(stmt);",2593],["stmt = CharacterDatabase.GetPreparedStatement(CHAR_DEL_ITEM_INSTANCE);",2332]]},{"word":"Check","context":[["// Check for duplicate",12150],["// Check proof of work matches claimed amount",8366],["// Check funds",7165],["// Check against previous transactions",4277],["// Check for conflicts with in-memory transactions",4271],["// Check timestamp",4203],["// Check for non-standard pay-to-script-hash in inputs",4167],["// Check timestamp against prev",4127],["// Check for negative or overflow output values",4125],["// Check for negative or overflow input values",4122]]},{"word":"Clear","context":[["Clear();",31878],["Clear();",22418],["mutable_unknown_fields()->Clear();",11402],["me->GetMotionMaster()->Clear();",8490],["/* Clear status message on focus change */",4794],["me->GetMotionMaster()->Clear(false);",4291],["// Clear pindexPrev so future getworks make a new block, despite any failures from here on",3141],["m_creature->GetMotionMaster()->Clear();",2642],["// Clear pindexPrev so future calls make a new block, despite any failures from here on",2546],["/* Clear old signature to ensure users don't get confused on error with an old signature displayed */",2411]]},{"word":"Common","context":[["#include \"Common.h\"",30513],["* of the Common Development and Distribution License Version 1.0",7877],["#include \"Common/CommonTypes.h\"",4192],["#include \"Common/FileUtil.h\"",2911],["#include \"Common/StringUtil.h\"",2565],["Common::StackLock lock(_mutex);",2504],["Common, Common, Common, Common, Common, Common, Common, Common,",2265],["Common, Common, Common, Common, Common, Common, Common, Common,",2265],["Common, Common, Common, Common, Common, Common, Common, Common,",2265],["Common, Common, Common, Common, Common, Common, Common, Common,",2265]]},{"word":"Context","context":[["Context *context = GetValidGlobalContext();",4977],["gl::Context *context = gl::getNonLostContext();",3953],["v8::Context::Scope context_scope(context);",2708],["* Orion Context Broker is distributed in the hope that it will be useful,",2104],["* This file is part of Orion Context Broker.",2104],["* Orion Context Broker is free software: you can redistribute it and/or",2104],["* along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.",2104],["#include \"Context.h\"",1718],["D->addAttr(::new (S.Context)",1694],["// Context menu actions",1682]]},{"word":"Copyright","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["// Copyright 2014 The Chromium Authors. All rights reserved.",52484],["// Copyright 2013 The Chromium Authors. All rights reserved.",41789],["// Copyright (c) 2009-2012 The Bitcoin developers",33536],["// Copyright (c) 2009-2010 Satoshi Nakamoto",27193],["* Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>",24393],["// Copyright 2015 The Chromium Authors. All rights reserved.",22004],["* Copyright (C) 2006-2009 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>",20885],["** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).",20645],["** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).",19445]]},{"word":"Create","context":[["// Create new block",17312],["// Create coinbase tx",3916],["// Create new keyUser and set as default key",3776],["// Create socket for listening for incoming connections",3760],["// Create actions for the toolbar, menu bar and tray/dock icon",3377],["// Create the toolbars",3357],["// Create application menu bar",3351],["// Create status bar",3342],["// Create a decoupled menu bar on Mac which stays even if the window is closed",3248],["Create();",3173]]},{"word":"Creature","context":[["CreatureAI* GetAI(Creature* creature) const",71515],["CreatureAI* GetAI(Creature* creature) const override",31512],["CreatureAI* GetAI(Creature* pCreature) const",19332],["CreatureAI* GetAI(Creature* creature) const OVERRIDE",16154],["#include \"Creature.h\"",11194],["bool OnGossipHello(Player* player, Creature* creature)",10665],["void JustSummoned(Creature* summoned)",6115],["void JustSummoned(Creature* summon)",4994],["bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)",4644],["bool OnGossipHello(Player* pPlayer, Creature* pCreature)",4162]]},{"word":"D","context":[["case 'D':",6701],["case 'D':",3845],["// Accept D&D of URIs",3379],["// Accept D&D of URIs",3379],["*    D-26121 Oldenburg, Germany",2502],["*    R&D Division Health",1885],["D->addAttr(::new (S.Context)",1694],["if (!D)",1659],["return D;",1595],["D.setInvalidType();",1242]]},{"word":"DAMAGES","context":[["AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",29214],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",22034],["* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",15973],["// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",15290],["* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",14407],["** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",13130],["* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",12587],["// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",10510],["* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",7473]]},{"word":"DBUG_RETURN","context":[["DBUG_RETURN(0);",92698],["DBUG_RETURN(TRUE);",57887],["DBUG_RETURN(1);",56163],["DBUG_RETURN(error);",36404],["DBUG_RETURN(FALSE);",27665],["DBUG_RETURN(true);",25616],["DBUG_RETURN(false);",14636],["DBUG_RETURN(-1);",12745],["DBUG_RETURN(error_num);",11714],["DBUG_RETURN(result);",11377]]},{"word":"DCHECK","context":[["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));",49494],["DCHECK(thread_checker_.CalledOnValidThread());",41023],["DCHECK(CalledOnValidThread());",39573],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));",19170],["DCHECK(!callback.is_null());",13148],["DCHECK(self);",7652],["DCHECK(task_runner_->BelongsToCurrentThread());",7650],["DCHECK(BrowserThread::CurrentlyOn(BrowserThread::FILE));",5678],["DCHECK(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));",5369],["DCHECK(success);",5060]]},{"word":"DEBUG","context":[["#ifdef DEBUG",134100],["#endif // DEBUG",29896],["#ifdef DEBUG",29829],["#if DEBUG",7609],["#ifdef  DEBUG",7503],["#if defined(DEBUG)",3088],["#ifndef DEBUG",2720],["// DEBUG",2588],["#if DEBUG",1809],["#endif /* DEBUG */",1747]]},{"word":"DWORD","context":[["DWORD",3402],["typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);",2785],["DWORD i;",1997],["DWORD err = GetLastError();",1834],["DWORD clrColor = _tcstoul(pstrValue, &pstr, 16);",1756],["DWORD  ul_reason_for_call,",1400],["DWORD flags = 0;",1341],["DWORD dwErr = GetLastError();",1320],["DWORD dw;",1218],["DWORD dwFlags;",1088]]},{"word":"Do","context":[["// Do nothing",8052],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// Do not store addresses outside our network",3993],["// Do this here so we don't have to critsect vNodes inside mapAddresses critsect.",3755],["// Do nothing.",3346],["// Do this early as we don't want to bother initializing if we are just calling IPC",2969],["/* Do nothing */",2800],["// Do nothing.",2335],["// Do triggers for unit (reflect triggers passed on hit phase for correct drop charge)",1993]]},{"word":"E","context":[["I != E; ++I) {",9879],["case 'E':",4605],["return E;",4340],["I != E; ++I)",4171],["VisitExpr(E);",4105],["quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);",3134],["case 'E':",2706],[")E\" + R\"E(",1604],[")E\" + R\"E(",1604],["return Error(E);",1177]]},{"word":"EVENT","context":[["FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",28675],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",22649],["* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",15818],["// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",15325],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13617],["** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",13156],["// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",9691],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",8256],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",7338],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR",6880]]},{"word":"EXPECT_CALL","context":[["EXPECT_CALL(",6516],["EXPECT_CALL(*gl_, GetError())",4244],["EXPECT_CALL(*observer(),",3836],["EXPECT_CALL(visitor_, OnSuccessfulVersionNegotiation(_));",3018],["EXPECT_CALL(*autofill_manager_->metric_logger(),",2805],["EXPECT_CALL(*gl_,",2521],["EXPECT_CALL(personal_data_observer_, OnPersonalDataChanged())",1780],["EXPECT_CALL(*send_algorithm_,",1762],["EXPECT_CALL(*send_algorithm_, OnCongestionEvent(true, _, _, _));",1482],["EXPECT_CALL(mock_input_handler_, ScrollBegin(testing::_, testing::_))",1333]]},{"word":"EXPECT_EQ","context":[["EXPECT_EQ(",32159],["EXPECT_EQ(ERR_IO_PENDING, rv);",23575],["EXPECT_EQ(OK, rv);",17266],["EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));",15035],["EXPECT_EQ(GL_NO_ERROR, GetGLError());",9206],["EXPECT_EQ(1, cache.disk_cache()->create_count());",7164],["EXPECT_EQ(ERR_IO_PENDING,",6093],["EXPECT_EQ(MOJO_RESULT_OK,",5936],["EXPECT_EQ(OK, callback.WaitForResult());",5487],["EXPECT_EQ(ER_OK, status) << \"  Actual Status: \" << QCC_StatusText(status);",5365]]},{"word":"EXPECT_FALSE","context":[["EXPECT_FALSE(",17243],["EXPECT_FALSE(IsSupportedKeySystemWithMediaMimeType(",2382],["EXPECT_FALSE(d.received_data_before_response());",2367],["EXPECT_FALSE(result_layer);",2146],["EXPECT_FALSE(delegate->scroll_begin());",2128],["EXPECT_FALSE(ent.hasField(\"modDate\"));",2106],["EXPECT_FALSE(delegate->scroll_end());",2046],["EXPECT_FALSE(delegate->tap_cancel());",2009],["EXPECT_FALSE(delegate->scroll_update());",2005],["EXPECT_FALSE(delegate->tap());",1689]]},{"word":"EXPECT_TRUE","context":[["EXPECT_TRUE(",31009],["EXPECT_TRUE(success);",4285],["EXPECT_TRUE(SetupEngine());",3666],["EXPECT_TRUE(result);",3562],["EXPECT_TRUE(gesture_provider_->OnTouchEvent(event));",3407],["EXPECT_TRUE(",3205],["EXPECT_TRUE(page->viewportDescription().userZoom);",3126],["EXPECT_TRUE(response->auth_challenge.get() == NULL);",2452],["EXPECT_TRUE(channel_->SetSendCodecs(codecs));",1990],["EXPECT_TRUE(catcher.GetNextResult()) << catcher.message();",1981]]},{"word":"EXPRESS","context":[["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",15795],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",14709],["** \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",13156],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",12786],["* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",8293],["AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",8138]]},{"word":"Error","context":[["return Error;",8728],["// Error",6423],["return gl::Error(GL_NO_ERROR);",6231],["throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");",6229],["throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");",5081],["throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");",4939],["context->recordError(Error(GL_INVALID_OPERATION));",4612],["printf(\"Parameter Type Error!\\n\");",4473],["return state.Error();",4456],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166]]},{"word":"F","context":[["\"F^K[KFYFY[K[\",",16324],["case 'F':",4612],["template<typename F>",3673],["case 'F':",2926],["setDoesNotThrow(F);",1838],["return F;",1585],["//                                                  F i l e",1437],["setDoesNotCapture(F, 1);",1322],["typedef Base<F> Real;",993],["setDoesNotCapture(F, 2);",879]]},{"word":"FALSE","context":[["return FALSE;",317275],["return FALSE;",67276],["DBUG_RETURN(FALSE);",27665],["return(FALSE);",22036],["ASSERT(FALSE);",6885],["return(FALSE);",6374],["FALSE,",6340],["UpdateData(FALSE);",5617],["NULL, NULL, FALSE);",4706],["FALSE,",4093]]},{"word":"FITNESS","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",40881]]},{"word":"FIXME","context":[["// FIXME",4657],["static mapNewBlock_t mapNewBlock;    // FIXME: thread safety",4013],["// FIXME: implement",2686],["// FIXME",1700],["CDataStream(coinbase, SER_NETWORK, PROTOCOL_VERSION) >> pblock->vtx[0]; // FIXME - HACK!",1574],["// FIXME:",1358],["// FIXME: stub",1324],["//FIXME: Removed in Firefox v27",1292],["// FIXME: some spells effects have value -1/-2",1148],["//FIXME",1009]]},{"word":"FOR","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",40881]]},{"word":"FROM","context":[["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",14224],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",8169],["* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",7222],["// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",5440],["/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */",4801],["// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",3336],["* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",2989],["// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS",2798],["FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",2256]]},{"word":"FilePath","context":[["base::FilePath path;",5059],["const base::FilePath& path,",4410],["return base::FilePath();",3779],["const base::FilePath& path) {",3354],["const base::FilePath& file_path,",2457],["base::FilePath file_path;",2254],["base::FilePath(),",1804],["base::FilePath());",1730],["FilePath path;",1698],["return FilePath();",1370]]},{"word":"For","context":[["** a written agreement between you and Digia.  For licensing terms and",37400],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** a written agreement between you and The Qt Company. For licensing terms",9470],["// For compilers that support precompilation, includes \"wx.h\".",8624],["For the latest info, see http://www.ogre3d.org/",7389],["** and conditions see https://www.qt.io/terms-conditions. For further",6738],["** a written agreement between you and The Qt Company.  For licensing terms and",6208],["** conditions see http://www.qt.io/terms-conditions.  For further information",6208],["//                For Open Source Computer Vision Library",3566],["** conditions see http://www.qt.io/licensing.  For further information",2908]]},{"word":"Foundation","context":[["* Free Software Foundation; either version 2 of the License, or (at your",85385],["the Free Software Foundation, either version 3 of the License, or",82946],["* the Free Software Foundation; either version 2 of the License, or",81953],["* the Free Software Foundation, either version 3 of the License, or",68454],["** Foundation and appearing in the file LICENSE.LGPL included in the",65319],["* License as published by the Free Software Foundation; either",57424],["*   the Free Software Foundation; either version 2 of the License, or     *",48756],["* as published by the Free Software Foundation; either version 2",47322],["// Free Software Foundation; either version 3, or (at your option)",44217],["License as published by the Free Software Foundation; either",44163]]},{"word":"Franklin","context":[["* the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,",29973],["the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,",26096],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.",23676],["* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.",12893],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA",9261],["Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA",7100],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,",6423],["* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA",6415],["* the Free Software Foundation, Inc., 51 Franklin Street,",6325],["*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.",5816]]},{"word":"Free","context":[["* along with this program; if not, write to the Free Software",117514],["* Free Software Foundation; either version 2 of the License, or (at your",85385],["the Free Software Foundation, either version 3 of the License, or",82946],["* the Free Software Foundation; either version 2 of the License, or",81953],["* the Free Software Foundation, either version 3 of the License, or",68454],["** General Public License version 2.1 as published by the Free Software",65406],["* License as published by the Free Software Foundation; either",57424],["along with this program; if not, write to the Free Software",56481],["*   the Free Software Foundation; either version 2 of the License, or     *",48756],["* as published by the Free Software Foundation; either version 2",47322]]},{"word":"GNU","context":[["* GNU General Public License for more details.",218620],["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* it under the terms of the GNU General Public License as published by",157996],["GNU General Public License for more details.",156688],["it under the terms of the GNU General Public License as published by",124782],["* You should have received a copy of the GNU General Public License along",105989],["* under the terms of the GNU General Public License as published by the",98768],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["** GNU Lesser General Public License Usage",95968]]},{"word":"GURL","context":[["const GURL& url,",27019],["const GURL& url) {",6234],["const GURL& origin,",5583],["GURL url;",3721],["request.url = GURL(\"http://www.google.com/\");",3657],["GURL(),",2893],["GURL::Replacements replacements;",2805],["return GURL();",2612],["const GURL& origin_url,",2297],["const GURL& page_url,",2175]]},{"word":"General","context":[["* GNU General Public License for more details.",218620],["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* it under the terms of the GNU General Public License as published by",157996],["GNU General Public License for more details.",156688],["it under the terms of the GNU General Public License as published by",124782],["* You should have received a copy of the GNU General Public License along",105989],["* under the terms of the GNU General Public License as published by the",98768],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["** GNU Lesser General Public License Usage",95968]]},{"word":"Get","context":[["base::ThreadTaskRunnerHandle::Get()->PostTask(",9389],["scriptPubKey.SetDestination(address.Get());",9010],["// Get saved block",6008],["string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);",5909],["// Get local host ip",4731],["//\t\t\tProperty Get Method",4717],["CTxDestination dest = address.Get();",4407],["// Get prev block index",4167],["// Get recent addresses",4125],["// Get prev tx from single transactions in memory",4057]]},{"word":"GetGUID","context":[["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["data << uint64(GetGUID());",8930],["player->PrepareQuestMenu(creature->GetGUID());",7267],["pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());",5257],["pPlayer->PrepareQuestMenu(pCreature->GetGUID());",4025],["stmt->setUInt64(0, GetGUID().GetCounter());",3848],["if (pItem->GetGUID() == guid)",2663],["s64.insert(target->GetGUID());",2401],["player->GetSession()->SendListInventory(creature->GetGUID());",2277],["data << GetGUID();",2084]]},{"word":"GetPlayer","context":[["Player* player = handler->GetSession()->GetPlayer();",6543],["GetPlayer()->RemoveAurasByType(SPELL_AURA_FEIGN_DEATH);",6055],["if (GetPlayer()->HasUnitState(UNIT_STATE_DIED))",4731],["Player* player = m_session->GetPlayer();",4072],["Player* pl = m_session->GetPlayer();",4023],["Group* group = GetPlayer()->GetGroup();",3926],["GetPlayer()->RemoveSpellsCausingAura(SPELL_AURA_FEIGN_DEATH);",3732],["Player* player = session->GetPlayer();",3673],["if (GetPlayer()->hasUnitState(UNIT_STAT_DIED))",2751],["if (itr->second->GetPlayer())",2688]]},{"word":"GetSession","context":[["GetSession()->SendPacket(&data);",68626],["player->GetSession()->SendPacket(&data);",14679],["Player* player = handler->GetSession()->GetPlayer();",6543],["plr->GetSession()->SendPacket(&data);",5119],["if (handler->GetSession())",3714],["GetSession()->SendPacket( &data );",3395],["GetSession()->SendPacket(data);",3235],["_player->GetSession()->SendPacket(&data);",2987],["player->GetSession()->SendPacket(&packet);",2574],["target->GetSession()->SendPacket(&data);",2539]]},{"word":"GetTypeId","context":[["if (GetTypeId() == TYPEID_PLAYER)",35945],["if (m_caster->GetTypeId() != TYPEID_PLAYER)",23818],["if (target->GetTypeId() == TYPEID_PLAYER)",23275],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_PLAYER)",21701],["if (m_caster->GetTypeId() == TYPEID_PLAYER)",19899],["if (target->GetTypeId() != TYPEID_PLAYER)",16818],["if (GetTypeId() != TYPEID_PLAYER)",11567],["if (victim->GetTypeId() == TYPEID_PLAYER)",9518],["if (GetTypeId() == TYPEID_UNIT)",6090],["return GetCaster()->GetTypeId() == TYPEID_PLAYER;",5984]]},{"word":"GetUInt32","context":[["uint32 entry = fields[0].GetUInt32();",11272],["uint32 quest_id = fields[0].GetUInt32();",3586],["uint32 guid = fields[0].GetUInt32();",2991],["uint32 alliance = fields[0].GetUInt32();",2118],["uint32 horde = fields[1].GetUInt32();",2118],["uint32 spell_id = fields[0].GetUInt32();",2011],["uint32 current_class = fields[1].GetUInt32();",1629],["uint32 spell = fields[0].GetUInt32();",1536],["uint32 creature_id = fields[0].GetUInt32();",1431],["uint32 id = fields[0].GetUInt32();",1385]]},{"word":"Handle","context":[["/* Handle runaway exceptions. Shows a message box with the problem and quits the program.",2964],["Handle<Object> result;",2625],["case STATE_EATING_SPACES: // Handle runs of whitespace",2349],["v8::Handle<v8::Object> holder = info.Holder();",2212],["Handle<JSObject> holder,",2043],["Handle<Name> name,",2028],["return v8::Handle<v8::Value>();",2007],["Handle<String> name,",1878],["Handle<Code> code = isolate->factory()->NewCode(",1766],["desc, Code::ComputeFlags(Code::STUB), Handle<Code>());",1738]]},{"word":"I","context":[["I != E; ++I) {",9879],["I != E; ++I) {",9879],["++I;",5317],["case 'I':",5010],["I != E; ++I)",4171],["I != E; ++I)",4171],["* Sets up I/O resources to accept and handle a new connection.",3507],["return I;",3289],["case 'I':",2800],["pOutLen     [I/O] - Upon input the maximum number of BYTEs pOut can",2624]]},{"word":"ID","context":[["daeMetaElement* meta = dae.getMeta(ID());",5193],["dae.setMeta(ID(), *meta);",5193],["static char ID;",3414],["// RCS-ID:      $Id$",2952],["FoldingSetNodeID ID;",2016],["int ID =  (int)cobj->_ID ;",1929],["llvm::FoldingSetNodeID ID;",1843],["static char ID; // Pass identification, replacement for typeid",1615],["return ID;",1192],["int ID = ret ? (int)(dynObject->_ID) : -1;",905]]},{"word":"IMPLIED","context":[["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",23453],["* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",22932],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",15795],["// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15335],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",14262],["** \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",13156]]},{"word":"IN","context":[["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",28675],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",23246],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",22649],["* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",22356],["* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",15818],["// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",15325]]},{"word":"INCLUDING","context":[["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",22034],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",18059],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",15795],["// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",15290]]},{"word":"IS","context":[["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["distributed under the License is distributed on an \"AS IS\" BASIS,",19893],["* on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",19811],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950]]},{"word":"ISD","context":[["case ISD::SRL:",1179],["case ISD::SHL:",1086],["case ISD::SRA:",1059],["case ISD::OR:",1031],["case ISD::AND:",887],["const SmallVectorImpl<ISD::OutputArg> &Outs,",855],["case ISD::ADD:",833],["const SmallVectorImpl<ISD::InputArg> &Ins,",771],["case ISD::SETGT:",724],["case ISD::SETLE:",723]]},{"word":"Id","context":[["/* $Id$ */",14634],["* $Id$",14366],["switch (m_spellInfo->Id)",11749],["switch (dummySpell->Id)",8854],["// $Id$",8565],["#ident \"$Id$\"",5425],["switch (auraSpellInfo->Id)",5387],["// $Id$",4609],["switch(m_spellInfo->Id)",4018],["switch (GetSpellInfo()->Id)",3677]]},{"word":"If","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["// with this library; see the file COPYING3.  If not see",42545],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** If you have questions regarding the use of this file, please contact",34088],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["*  along with XBMC; see the file COPYING.  If not, see",18715],["*  along with this program.  If not, see <http://www.gnu.org/licenses/>.",11668],["// along with this program.  If not, see <http://www.gnu.org/licenses/>.",10645]]},{"word":"In","context":[["** In addition, as a special exception, Nokia gives you certain additional",40703],["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, The Qt Company gives you certain additional",6440],["// In no event shall the Intel Corporation or contributors be liable for any direct,",3755],["// In case we are on a very long side-chain, it is possible that we already have",3600],["In no event will the authors be held liable for any damages arising from the use of this software.",3475],["* warranty.  In no event will the authors be held liable for any damages",3412],["ASSERT(m_State == 3);  // In game mode?",2887],["case STATE_ARGUMENT: // In or after argument",2349],["// In case the connection got shut down, its receive buffer was wiped",2240]]},{"word":"Inc","context":[["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,",29973],["the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,",26096],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.",23676],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["*     * Neither the name of Google Inc. nor the names of its",18258],["*   Free Software Foundation, Inc.,                                       *",18162],["* Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.",14636],["//     * Neither the name of Google Inc. nor the names of its",14619],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",13852]]},{"word":"Init","context":[["Init();",23251],["Init();",7828],["// Init",5548],["// Init OpenSSL library multithreading support",4801],["widget->Init(params);",3477],["// Init with genesis block",2126],["context.Init();",2093],["void Init()",1989],["// Init openssl library multithreading support",1946],["waiter.Init();",1600]]},{"word":"Initialize","context":[["Initialize();",29318],["void Initialize()",16447],["Initialize();",9705],["// Initialize Windows Sockets",3778],["sha.Initialize();",2890],["/** Initialize bitcoin.",2421],["Initialize(reads, arraysize(reads), writes, arraysize(writes));",2053],["// Initialize",1966],["// Initialize the block index (no-op if non-empty database was already loaded)",1850],["ASSERT_TRUE(Initialize());",1692]]},{"word":"Invalid","context":[["throw runtime_error(\" Invalid public key: \"+ks);",10489],["throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");",5682],["throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");",5296],["throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");",5010],["throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");",4905],["throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);",4766],["throw JSONRPCError(-8, \"Invalid parameter\");",3874],["assert(N == 1 && \"Invalid number of operands!\");",3173],["Invalid = true;",3120],["return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"].c_str()));",3055]]},{"word":"It","context":[["\"It is recommended you use the following random password:\\n\"",6754],["\"It is also recommended to set alertnotify so you are notified of problems;\\n\"",4134],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Restrict callers by IP.  It is important to",3506],["// 1-satoshi-fee transactions. It should be set above the real",2782],["#error \"This file was generated using the moc from 4.8.6. It\"",2133],["* for any purpose. It is provided \"as is\" without express or implied warranty.",1834],["#error \"This file was generated using the moc from 4.8.4. It\"",1773],["// It operates on big endian data.  Caller does the byte reversing.",1686],["* restriction. It is free. Well commented source is provided. You may reuse the",1609]]},{"word":"Item","context":[["if (Item* pItem = GetItemByPos(INVENTORY_SLOT_BAG_0, i))",16036],["Item *item;",11280],["Item*",8607],["if (Item* pItem = pBag->GetItemByPos(j))",4765],["#include \"Item.h\"",4223],["Item* pItem = GetItemByPos(INVENTORY_SLOT_BAG_0, i);",3988],["if (Item* item = GetItemByPos(INVENTORY_SLOT_BAG_0, i))",3367],["Item* item = NULL;",3065],["List<Item> field_list;",2953],["const OFListConstIterator(Item *) last = SequenceOfItems.end();",2908]]},{"word":"KIND","context":[["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19933],["* on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",19811],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",15014],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",14709],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",13440],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",11277],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",8415]]},{"word":"L","context":[["lua_pushnil(L);",36062],["lua_pop(L, 1);",15205],["lua_error(L);",7736],["lua_error( L );",7409],["pushBoolean(L, true);",6888],["pushBoolean(L, false);",6605],["lua_newtable(L);",6461],["DSP_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));",5746],["DSP_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));",5746],["case 'L':",5192]]},{"word":"LIABILITY","context":[["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",23246],["* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",23246],["* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",22356],["* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",22356],["// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",15297],["// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",15297],["* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",14258],["* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",14258],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",14224]]},{"word":"LIABLE","context":[["AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",29214],["* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,",23622],["* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",21072],["* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",15973],["// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",15114],["** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",13155],["// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",10510],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",8256],["* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",7292],["* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",7085]]},{"word":"LICENSE","context":[["// found in the LICENSE file.",333875],["** Foundation and appearing in the file LICENSE.LGPL included in the",65319],["** Foundation and appearing in the file LICENSE.GPL included in the",38155],["// License. See LICENSE.TXT for details.",29278],["// found in the LICENSE file.",24314],["*      http://www.apache.org/licenses/LICENSE-2.0",20636],["* found in the LICENSE file.",20124],["*     http://www.apache.org/licenses/LICENSE-2.0",19547],["// The full text of the license can be found in the file LICENSE at",17668],["http://www.apache.org/licenses/LICENSE-2.0",16615]]},{"word":"LIMITED","context":[["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",23453],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",21932],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",18059],["// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15335],["// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",15278],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",14262]]},{"word":"LOCK","context":[["LOCK(cs_vNodes);",81526],["LOCK(cs_wallet);",46181],["LOCK(cs_main);",38069],["LOCK(cs);",32779],["LOCK(cs_mapLocalHost);",29756],["LOCK(mempool.cs);",19599],["LOCK(cs_mapAlerts);",11262],["LOCK(pfrom->cs_filter);",8184],["LOCK(cs_setpwalletRegistered);",8143],["LOCK(cs_setBanned);",8131]]},{"word":"Label","context":[["Label done;",12939],["Label miss;",5779],["Label* if_false = NULL;",4012],["Label* if_true = NULL;",4012],["Label* fall_through = NULL;",3979],["Label ok;",3922],["Label materialize_true, materialize_false;",3864],["__ jmp(&done, Label::kNear);",3852],["Label L;",3616],["mapper->addMapping(ui->labelEdit, AddressTableModel::Label);",2907]]},{"word":"Lesser","context":[["** GNU Lesser General Public License Usage",95968],["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["** ensure the GNU Lesser General Public License version 2.1 requirements",65412],["* Lesser General Public License for more details.",31816],["* You should have received a copy of the GNU Lesser General Public",29817],["* modify it under the terms of the GNU Lesser General Public",28032],["You should have received a copy of the GNU Lesser General Public",22362],["modify it under the terms of the GNU Lesser General Public",20959],["* You should have received a copy of the GNU Lesser General Public License",20697],["Lesser General Public License for more details.",18922]]},{"word":"Library","context":[["// This file is part of the GNU ISO C++ Library.  This library is free",51033],["* Library General Public License for more details.",30670],["* modify it under the terms of the GNU Library General Public",29762],["You should have received a copy of the GNU Library General Public License",28062],["* You should have received a copy of the GNU Library General Public License",27786],["Library General Public License for more details.",27263],["modify it under the terms of the GNU Library General Public",26855],["*   You should have received a copy of the GNU Library General Public     *",6890],["// Licensed under Apache License v2.0 with Runtime Library Exception",5446],["*   GNU Library General Public License for more details.                  *",5426]]},{"word":"License","context":[["* GNU General Public License for more details.",218620],["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* it under the terms of the GNU General Public License as published by",157996],["GNU General Public License for more details.",156688],["it under the terms of the GNU General Public License as published by",124782],["* You should have received a copy of the GNU General Public License along",105989],["* under the terms of the GNU General Public License as published by the",98768],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["** GNU Lesser General Public License Usage",95968]]},{"word":"Log","context":[["#include \"Log.h\"",35228],["CLog::Log(LOGERROR, \"%s failed\", __FUNCTION__);",5495],["#include <utils/Log.h>",3760],["Log::WaitBeforeContinueIfNeed();",3292],["CLog::Log(LOGERROR, \"%s (%s) failed\", __FUNCTION__, strFilenameAndPath.c_str());",2259],["CLog::Log(LOGERROR, \"%s (%s) failed\", __FUNCTION__, strSQL.c_str());",1799],["* $Log$",1673],["CLog::Log(LOGERROR,\"EXCEPTION: %s\",e.GetMessage());",1672],["#include \"Common/Logging/Log.h\"",1293],["CLog::Log(LOGERROR, \"%s emulated function failed\",  __FUNCTION__);",1212]]},{"word":"LookupEntry","context":[["SpellItemEnchantmentEntry const* enchantEntry = sSpellItemEnchantmentStore.LookupEntry(enchant_id);",4369],["SpellItemEnchantmentEntry const* pEnchant = sSpellItemEnchantmentStore.LookupEntry(enchant_id);",4004],["TalentEntry const* talentInfo = sTalentStore.LookupEntry(talentId);",3520],["TalentTabEntry const* talentTabInfo = sTalentTabStore.LookupEntry(talentInfo->TalentTab);",2847],["SpellEntry const *spellInfo = sSpellStore.LookupEntry(spellId);",2618],["SpellEntry const* spellInfo = sSpellStore.LookupEntry(spellId);",2276],["MapEntry const* mapEntry = sMapStore.LookupEntry(map_id);",2040],["SpellItemEnchantmentEntry const *pEnchant = sSpellItemEnchantmentStore.LookupEntry(enchant_id);",2024],["const MapEntry* const map = sMapStore.LookupEntry(master->mapid);",1904],["AreaTriggerEntry const* atEntry = sAreaTriggerStore.LookupEntry(Trigger_ID);",1901]]},{"word":"M","context":[["case 'M':",4662],["//M*/",4072],["/*M///////////////////////////////////////////////////////////////////////////////////////",3972],["DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",3961],["strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);",3248],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",2944],["case 'M':",2703],["return M;",2090],["log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",",1975],["DateTimeStrFormat(\"%x %H:%M:%S\", block.GetBlockTime()).c_str(),",1878]]},{"word":"MA","context":[["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Boston, MA 02110-1301, USA.",38378],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.",23676],["Boston, MA 02110-1301, USA.",20855],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",13852],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",13293],["* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.",12893],["*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *",10670],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",9404]]},{"word":"MERCHANTABILITY","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",40881]]},{"word":"Make","context":[["// Make sure the merkle branch connects to this block",3946],["/** Make a particular network entirely off-limits (no automatic connects to it) */",3638],["// Make sure it's successfully written to disk before changing memory structure",3618],["// Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses",3518],["// Make this thread recognisable as the connection opening thread",3390],["// Make this thread recognisable as the external IP detection thread",2927],["// Make this thread recognisable as the key-topping-up thread",2788],["// Make this thread recognisable as the wallet relocking thread",2782],["// Make sure only a single Bitcoin process is using the data directory.",2335],["// Make this thread recognisable as the mining thread",1908]]},{"word":"Map","context":[["#include \"Map.h\"",6196],["for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)",4830],["for (Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)",4830],["// Map ports with UPnP",3328],["Map::PlayerList const &PlayerList = map->GetPlayers();",2383],["Map* map = me->GetMap();",2325],["Map* map = GetMap();",2301],["// Map Lua Class Methods to C Binding Functions",2051],["if (GridMap* gmap = const_cast<Map*>(this)->GetGrid(x, y))",1945],["Map::PlayerList const& players = instance->GetPlayers();",1783]]},{"word":"N","context":[["EVT VT = N->getValueType(0);",5163],["case 'N':",4325],["int N;",4167],["SDLoc dl(N);",3884],["for (int i = 0; i < N; i++) {",3688],["assert(N == 1 && \"Invalid number of operands!\");",3173],["14617 N Newport Hwy",2909],["SDValue N0 = N->getOperand(0);",2880],["{ C_STRING_WITH_LEN(\"enum('N','Y')\") },",2785],["for (int i = 0; i < N; i++) {",2665]]},{"word":"NO","context":[["FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",28675],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",22649],["* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",15818],["// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",15325],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13617],["** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",13156],["// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",9691],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",8256],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",7338],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR",6880]]},{"word":"NOT","context":[["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",22034],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",18059],["* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.",16107],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",15795],["// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",15290]]},{"word":"NULL","context":[["return NULL;",983899],["return NULL;",301960],["NULL,",130305],["NULL,",67513],["NULL);",33639],["void* args[2] = {NULL, (void*)&arg__1};",32638],["NULL);",31326],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["if (args[0]==NULL) {",30082],["return\tNULL;",29261]]},{"word":"Name","context":[["Module Name:",4241],["Handle<Name> name,",2028],["// Name:",1994],["// Name of client reported in the 'version' message. Report the same name",1776],["StringRef Name;",1767],["std::string Name;",1696],["// Name",1597],["return Name;",1505],["const char *Name) {",1453],["for (uint32 i = 0; table[i].Name != NULL; ++i)",1284]]},{"word":"New","context":[["info.GetReturnValue().Set(Nan::New(r));",13344],["{ Nan::New(vtkNodeJsNoWrap) };",7467],["//  the terms of the New (Revised) BSD License. Redistribution and use in source and binary",5353],["Technology, Rutgers State University of New Jersey, and the Research",4293],["Foundation of State University of New York at Stony Brook under",4293],["// New best block",4145],["// New 0.6 features:",3374],["info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());",3346],["case Encrypt: // New passphrase x2",3086],["tr(\"New key generation failed.\"),",2908]]},{"word":"No","context":[["** No Commercial Usage",14532],["This software is covered by US Patent No. 8,185,551.",4293],["United States of America Serial No. 11/760379 and to the patents",4293],["// No break on purpose",3997],["throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");",3370],["/* No suffix specified, add selected suffix */",3254],["This software is covered by US Patent No. 8,489,638.",3187],["printf(\"No blocks matching %s were found\\n\", strMatch.c_str());",3182],["printf(\"No valid UPnP IGDs found\\n\");",2772],["PORT_DIPSETTING(    0x00, DEF_STR( No ) )",1967]]},{"word":"Node","context":[["sym(1).Node = node;",5337],["#include \"Node.h\"",2878],["#include \"core/dom/Node.h\"",1355],["Node* node = this->node();",1228],["cocos2d::Node* arg0;",1049],["struct Node {",993],["struct Node",953],["Node* const p0 = m.Parameter(0);",895],["case Node::TEXT_NODE:",867],["YAML::Node node;",863]]},{"word":"Note","context":[["// Note: not using straight sprintf here because we do NOT want",6536],["// non-standard. Note that this EvalScript() call will",3947],["// Note: if you modify this code to accept non-standard transactions, then",3642],["// Note that the walletpassphrase is stored in params[0] which is not mlock()ed",3551],["/// Note: This interface may still be subject to change.",3506],["// Note: On Mac, the dock icon is used to provide the tray's functionality.",3378],["\"Note that the transaction's inputs are not signed, and\\n\"",2585],["// Note:",2474],["if (!IsHex(strHex)) // Note: IsHex(\"\") is false",2244],["// Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry",2226]]},{"word":"Now","context":[["base::TimeTicks now = base::TimeTicks::Now();",2614],["base::Time now = base::Time::Now();",2244],["// Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the",1905],["host_impl_->DrawLayers(&frame, gfx::FrameTime::Now());",1788],["kTouchId, tes.Now());",1665],["// Now that initialization/startup is done, process any command-line",1657],["base::Time::Now(),",1612],["// Now unserialize the data",1565],["base::TimeTicks start_time = base::TimeTicks::Now();",1105],["base::TimeTicks::Now() - start_time);",1082]]},{"word":"OF","context":[["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",45198],["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",45198],["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",45198],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",24993],["* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",24993]]},{"word":"OK","context":[["return Status::OK();",26311],["return OK;",23787],["return OK;",20478],["EXPECT_EQ(OK, rv);",17266],["root[\"status\"] = \"OK\";",6684],["return Status::OK;",6009],["MockRead(SYNCHRONOUS, OK),",5890],["deallog << \"OK\" << std::endl;",5508],["EXPECT_EQ(OK, callback.WaitForResult());",5487],["printf(\"OK\\n\");",5277]]},{"word":"OR","context":[["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",29214],["AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",29214],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",24993],["* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",24993]]},{"word":"OS","context":[["OS << '\\n';",5077],["OS << ')';",4406],["* This file is part of the Genode OS framework, which is distributed",4343],["OS << \"\\n\";",3145],["* There is no good OS-independent way to check a key state in Qt, but we",3087],["OS << \")\";",3060],["// Minimum supported OS versions: WinXP SP3, WinVista >= SP1, Win Server 2008",2789],["OS << \", \";",2141],["raw_ostream &OS) {",1976],["#include \"dcmtk/config/osconfig.h\"    /* make sure OS specific configuration is included first */",1544]]},{"word":"OTHERWISE","context":[["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",15278],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",14224],["** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",13155],["* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",11933],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF",9935],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",9315],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",9052],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",8169]]},{"word":"OUT","context":[["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",15278],["** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",13155],["* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",11147],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF",9935],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",9315],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",7425],["* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",7222],["* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",6127]]},{"word":"Object","context":[["Object result;",27917],["Object obj;",25050],["Object entry;",21960],["v8::Local<v8::Object> holder = info.Holder();",13394],["Object ret;",13072],["(Object-oriented Graphics Rendering Engine)",8491],["Object o;",7638],["v8::Local<v8::Object> wo = cons->NewInstance(1, argv);",7467],["catch (Object& objError)",7198],["Object sendTo = params[1].get_obj();",5985]]},{"word":"Open","context":[["// This file is distributed under the University of Illinois Open Source",29309],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["// This file is dual licensed under the MIT and the University of Illinois Open",10254],["// Licensed to The Open Group (TOG) under one or more contributor license",5340],["// Each contributor licenses this file to you under the OpenPegasus Open",5340],["if (!bitdb.Open(GetDataDir()))",4154],["//                For Open Source Computer Vision Library",3566],["/* Open debug.log with the associated application */",3187],["database.Open();",2395],["ASSERT_TRUE(connection.Open(GetDatabasePath()));",2176]]},{"word":"P","context":[["case 'P':",4633],["case 'P':",2799],["template <typename P>",2201],["return P;",1990],["// this enables pet details window (Shift},{"word":"PARTICULAR","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",40881]]},{"word":"PORT_DIPSETTING","context":[["PORT_DIPSETTING(    0x00, DEF_STR( On ) )",44735],["PORT_DIPSETTING(    0x00, DEF_STR( Off ) )",11360],["PORT_DIPSETTING(      0x0000, DEF_STR( On ) )",8951],["PORT_DIPSETTING(    0x80, DEF_STR( Off ) )",6736],["PORT_DIPSETTING(    0x40, DEF_STR( Off ) )",6332],["PORT_DIPSETTING(    0x20, DEF_STR( Off ) )",5808],["PORT_DIPSETTING(    0x10, DEF_STR( Off ) )",5506],["PORT_DIPSETTING(    0x08, DEF_STR( Off ) )",5289],["PORT_DIPSETTING(    0x01, DEF_STR( Off ) )",5176],["PORT_DIPSETTING(    0x04, DEF_STR( Off ) )",4958]]},{"word":"PROVIDED","context":[["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",14709],["** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",13159],["* THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY",12281],["* THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY",8176],["THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",8168],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",8139]]},{"word":"PURPOSE","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",40881]]},{"word":"Pair","context":[["obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));",7124],["obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));",7054],["obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));",6423],["result.push_back(Pair(\"target\",   HexStr(BEGIN(hashTarget), END(hashTarget))));",6092],["obj.push_back(Pair(\"blocks\",        (int)nBestHeight));",6068],["result.push_back(Pair(\"data\",     HexStr(BEGIN(pdata), END(pdata))));",5998],["BOOST_FOREACH(const Pair& s, sendTo)",5831],["obj.push_back(Pair(\"testnet\",       fTestNet));",5767],["obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));",5332],["entry.push_back(Pair(\"confirmations\", 0));",4415]]},{"word":"Player","context":[["#include \"Player.h\"",49987],["Player* target;",12266],["bool OnGossipHello(Player* player, Creature* creature)",10665],["if (Player* modOwner = GetSpellModOwner())",10419],["Player* player = handler->GetSession()->GetPlayer();",6543],["Player* player = m_caster->ToPlayer();",5999],["Player* player = getUserdata<Player>(L, 1);",4893],["Player* player = getUserdata<Player>(L, 1);",4893],["bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)",4644],["if (Player* player = ToPlayer())",4559]]},{"word":"Point","context":[["virtual void OnClick(Point pt, int widget, int click_count)",2399],["Point p;",1638],["*  Point Cloud Library (PCL) - www.pointclouds.org",1597],["const gfx::Point& point) {",1543],["virtual double value (const Point<dim>   &p,",1503],["host_impl_->ScrollBy(gfx::Point(), scroll_delta);",1302],["cocos2d::Point arg0;",1094],["#include \"Point.h\"",939],["const gfx::Point& location,",895],["const gfx::Point& point,",856]]},{"word":"Public","context":[["* GNU General Public License for more details.",218620],["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* it under the terms of the GNU General Public License as published by",157996],["GNU General Public License for more details.",156688],["it under the terms of the GNU General Public License as published by",124782],["* You should have received a copy of the GNU General Public License along",105989],["* under the terms of the GNU General Public License as published by the",98768],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["** GNU Lesser General Public License Usage",95968]]},{"word":"PyObject","context":[["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["if (_wrapper && (((PyObject*)_wrapper)->ob_refcnt > 0)) {",49904],["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["PyObject *py_retval;",30938],["PyObject *",21268],["PyObject *resultobj = 0;",18973],["PyObject * obj0 = 0 ;",18205],["PyObject *sipParseErr = NULL;",14617],["PyObject *resultobj = 0;",10449]]},{"word":"QCOMPARE","context":[["QCOMPARE(spy.count(), 1);",4281],["QCOMPARE(spy.count(), 0);",1799],["QCOMPARE(mLoop->exec(), 0);",1260],["QCOMPARE(spy.count(), 2);",1164],["QCOMPARE(o->error(), false);",825],["QCOMPARE(m_myObject->qtFunctionActuals().size(), 1);",753],["QCOMPARE(runQbs(params), 0);",613],["QCOMPARE( exp.hasParserError(), false );",609],["QCOMPARE(o->actuals().count(), 1);",550],["QCOMPARE(type, sError);",544]]},{"word":"QLatin1String","context":[["reader.raiseError(QLatin1String(\"Unexpected element \") + tag);",1420],["return QLatin1String(\"\");",723],["reader.raiseError(QLatin1String(\"Unexpected attribute \") + name.toString());",721],["if (tag == QLatin1String(\"property\")) {",617],["#include <QLatin1String>",500],["m_text = QLatin1String(\"\");",396],["const QLatin1String qmlString(\"\\n\"",393],["if (name == QLatin1String(\"name\")) {",336],["QCOMPARE(frame.file(), QLatin1String(\"main.cpp\"));",328],["<< QLatin1String(\"bar\"));",325]]},{"word":"QList","context":[["#include <QList>",9825],["for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)",3241],["QList<QPair<QString, QString> > items = uri.queryItems();",3240],["QList<BitcoinUnits::Unit> unitlist;",3023],["QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()",3020],["QList<QUrl> uris = event->mimeData()->urls();",3009],["QList<Line> data;",2147],["QList<SendCoinsRecipient> recipients;",2143],["#include <QtCore/QList>",1713],["QList<QUrl> urls;",1432]]},{"word":"QMessageBox","context":[["#include <QMessageBox>",52592],["QMessageBox::Ok, QMessageBox::Ok);",25716],["QMessageBox::Ok, QMessageBox::Ok);",25716],["QMessageBox::warning(this, tr(\"Send Coins\"),",12377],["QMessageBox::critical(this, tr(\"Wallet encryption failed\"),",12277],["QMessageBox::critical(this, windowTitle(),",5991],["QMessageBox::warning(this, windowTitle(),",5930],["QMessageBox::Cancel);",5685],["QMessageBox msgBox;",5269],["QMessageBox::Yes|QMessageBox::Cancel,",4910]]},{"word":"QObject","context":[["QObject*tx0 = *((QPointer<QObject>*)x0);",13895],["QObject*tx0 = *((QPointer<QObject>*)x0);",13895],[": QObject(parent)",12702],["return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;",10636],["return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;",10636],["#include <QObject>",8284],["QObject(parent),",7231],["QObject(parent)",6999],["return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;",4627],["return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;",4627]]},{"word":"QString","context":[["return QString();",68072],["#include <QString>",21769],["QString",12659],["QString result;",10982],["QString text;",10204],["QString name;",9985],["QString str;",9765],["QString s;",9579],["return QString(\"\");",6696],["default: return QString(\"???\");",6589]]},{"word":"QStringList","context":[["#include <QStringList>",22419],["return QStringList();",9642],["QStringList list;",8912],["QStringList args;",7535],["QStringList result;",4981],["QStringList arguments;",3635],["#include <QtCore/QStringList>",3580],["QStringList parts = value.split(\".\");",3033],["QStringList files;",2632],["QStringList filters;",2333]]},{"word":"QT_TRANSLATE_NOOP","context":[["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"",57878],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify data directory\"),",2746],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),",2743],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send trace/debug info to console instead of debug.log file\"),",2743],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Done loading\"),",2742],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Password for JSON-RPC connections\"),",2742],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Rescanning...\"),",2742],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Run in the background as a daemon and accept commands\"),",2741],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Options:\"),",2741],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),",2741]]},{"word":"QVERIFY","context":[["QVERIFY(GUIUtil::parseBitcoinURI(uri, &rv));",5292],["QVERIFY(rv.label == QString());",5209],["QVERIFY(object != 0);",4714],["QVERIFY(rv.address == QString(\"LQDPC5rbjDB72fGFVHu4enYhxGAZuRiFh9\"));",4362],["QVERIFY(!GUIUtil::parseBitcoinURI(uri, &rv));",3323],["QVERIFY(ok);",2425],["QVERIFY(model.data());",2269],["QVERIFY(rv.amount == 0);",2084],["QVERIFY(rv.address == QString(\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\"));",1850],["QVERIFY(item);",1561]]},{"word":"QVariant","context":[["return QVariant();",69101],["#include <QVariant>",7331],["case QVariant::Int:",3852],["case QVariant::Double:",3514],["return QVariant(description(unit));",3233],["return QVariant(static_cast<int>(unit));",3233],["return QVariant(name(unit));",3232],["case QVariant::String:",3226],["QVariant BitcoinUnits::data(const QModelIndex &index, int role) const",3021],["ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));",2972]]},{"word":"QWidget","context":[["QWidget(parent),",10897],[": QWidget(parent)",9586],["#include <QWidget>",8167],["return QWidget::event(event);",4291],["MainWindow::MainWindow(QWidget *parent) :",3969],["QWidget(parent)",3319],["bool isObscured(QWidget *w)",3238],["bool checkPoint(const QPoint &p, const QWidget *w)",3238],["void setupAmountWidget(QLineEdit *widget, QWidget *parent)",3238],["QWidget *widget = static_cast<QWidget*>(obj);",3177]]},{"word":"Qt","context":[["** Licensees holding valid commercial Qt licenses may use this file in",56068],["** rights.  These rights are described in the Digia Qt LGPL Exception",37335],["** rights.  These rights are described in the Nokia Qt LGPL Exception",25379],["** This file is part of Qt Creator.",24818],["** Licensees holding valid Qt Commercial licenses may use this file in",17428],["** rights. These rights are described in the Nokia Qt LGPL Exception",14832],["** accordance with the Qt Commercial License Agreement provided with the",14574],["** This file is part of Qt Creator",13795],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["case Qt::DisplayRole:",9915]]},{"word":"R","context":[[".Doc(R\"doc(",9290],["char const* sourceCode = R\"(",5565],["case 'R':",4678],["return R;",3926],["char const* text = R\"(",2924],["case 'R':",2898],["{R\"(",2250],["*    R&D Division Health",1885],["** Qt for Windows(R) Licensees",1713],[")E\" + R\"E(",1604]]},{"word":"Read","context":[["// Read header",8140],["// Read block header",5794],["// Read prev transaction",3841],["// Read next record",3783],["// Read message",3565],["if (!adb.Read(addrman))",3564],["// Read txindex",2127],["// Read txindex from txdb",2127],["// Read txPrev",2125],["// Read status",1883]]},{"word":"Rect","context":[["return gfx::Rect();",2877],["const gfx::Rect& rect,",2572],["gfx::Rect(),",2273],["gfx::Rect window_bounds;",2093],["virtual void DrawWidget(const Rect &r, int widget) const",2051],["const gfx::Rect& bounds,",1827],["EXPECT_EQ(gfx::Rect().ToString(),",1577],["const gfx::Rect& bounds) {",1375],["Rect rect;",1305],["const gfx::Rect& src_subrect,",1248]]},{"word":"Redistributions","context":[["* 1. Redistributions of source code must retain the above copyright",35380],["* 2. Redistributions in binary form must reproduce the above copyright",35214],["*     * Redistributions of source code must retain the above copyright",24202],["*     * Redistributions in binary form must reproduce the above",18845],["//     * Redistributions of source code must retain the above copyright",15393],["//     * Redistributions in binary form must reproduce the above",15332],["**   * Redistributions in binary form must reproduce the above copyright",13144],["**   * Redistributions of source code must retain the above copyright",13144],["* 2.  Redistributions in binary form must reproduce the above copyright",11187],["* 1.  Redistributions of source code must retain the above copyright",11163]]},{"word":"Register","context":[["void Register()",58806],["void Register() override",41004],["void Register() OVERRIDE",15083],["Register result = ToRegister(instr->result());",10177],["Register scratch,",5460],["Register scratch1,",5096],["Register scratch = scratch0();",4336],["Register scratch2,",4183],["Register input = ToRegister(instr->value());",3273],["Register scratch) {",2308]]},{"word":"Reset","context":[["void Reset()",114329],["Reset();",53319],["void Reset() override",31567],["events.Reset();",16171],["void Reset() OVERRIDE",13031],["_events.Reset();",9681],["Reset();",9373],["client->Reset();",6974],["delegate->Reset();",6514],["void Reset() {}",5425]]},{"word":"Result","context":[["return Result;",24393],["// Result",3987],["<< \"   Result:\\n\" << lower << \"\\n\"",3876],["<< \"   Result:\\n\" << upper << \"\\n\"",3504],["<< \"   Result:\\n\" << mat << \"\\n\"",2036],["<< \"   Result:\\n\" << sm << \"\\n\"",1970],["return Result::Failure;",1960],["if (Result)",1939],["<< \"   Result:\\n\" << sym << \"\\n\"",1902],["Result* result = static_cast<Result*>(shared_memory_address_);",1645]]},{"word":"Return","context":[["// Return Value:",20573],["//Return since we have no target",17729],["// Return",7763],[".WillOnce(Return(GL_NO_ERROR))",6722],["// Return type: bool",6185],["using ::testing::Return;",5434],[".WillRepeatedly(Return(false));",5368],[".WillOnce(Return(true));",5086],[".WillRepeatedly(Return(true));",4895],["using testing::Return;",4773]]},{"word":"Returns","context":[["// Returns:\t\t\t\t\t-",8021],["\"Returns an array of objects containing:\\n\"",6325],["// Output : Returns true on success, false on failure.",4730],["// Returns:",3915],["// Returns:\t\t\t\t-",3476],["\"Returns an object containing various state info.\");",3166],["\"Returns the list of addresses for the given account.\");",3156],["\"Returns the account associated with the given address.\");",3155],["\"Returns Object that has account names as keys, account balances as values.\");",3152],["\"Returns up to [count] most recent transactions skipping the first [from] transactions for account [account].\");",3146]]},{"word":"Run","context":[["run_loop.Run();",12649],["base::RunLoop().Run();",11593],["base::MessageLoop::current()->Run();",11152],["MessageLoop::current()->Run();",10348],["callback.Run();",6131],["message_loop_.Run();",5809],["Simulator::Run ();",3543],["loop.Run();",2989],["\"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\" +",2915],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Run in the background as a daemon and accept commands\"),",2741]]},{"word":"S","context":[["// ----------- S t a t e -------------",10046],["DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains",8590],["case 'S':",6960],["return S;",5864],["DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",3961],["case 'S':",3791],["strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);",3248],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",2944],["// license for use of this work by or on behalf of the U.S. Government.",2493],["// the U.S. Government retains certain rights in this software.",2339]]},{"word":"SHALL","context":[["FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",28675],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",22649],["* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",15818],["// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",15325],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR",13617],["** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",13156],["// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",9691],["* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",8256],["* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",7338],["* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR",6880]]},{"word":"SIGNAL","context":[["disconnect(exportAction, SIGNAL(triggered()), 0, 0);",12518],["connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",6489],["// SIGNAL 0",5569],["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",5239],["connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));",3617],["connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),",3484],["connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));",3450],["connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));",3372],["connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));",3370]]},{"word":"SLOT","context":[["connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",6489],["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",5239],["connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));",3617],["connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));",3450],["QTimer::singleShot(0, this, SLOT(hide()));",3446],["this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));",3418],["connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));",3372],["connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));",3370],["connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));",3370]]},{"word":"SOFTWARE","context":[["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",45198],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["THE SOFTWARE.",24450],["* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",19145],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950],["// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",15605],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",14709],["** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",13159]]},{"word":"S_OK","context":[["return S_OK;",178239],["HRESULT hr = S_OK;",34998],["return S_OK;",22036],["hr = S_OK;",7125],["if (hr == S_OK)",4888],["HRESULT rc = S_OK;",4648],["if (hr != S_OK)",3288],["Assert(hr == S_OK);",2796],["if (RT_UNLIKELY(mRC != S_OK))",1820],["HRESULT hr = S_OK;",1443]]},{"word":"See","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",64428],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",64415],["* See the License for the specific language governing permissions and",53439],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",52920],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",48788],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45949],["*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",45338]]},{"word":"Send","context":[["QMessageBox::warning(this, tr(\"Send Coins\"),",12377],["// Send",10992],["// Send request",4593],["// Send block from disk",4136],["// Send stream from relay memory",4136],["// Send the rest of the chain",4134],["// Send reply",3811],["// Send messages",3791],["// Send and receive from sockets, accept connections",3762],["// Send error reply from json-rpc error object",3692]]},{"word":"Set","context":[["info.GetReturnValue().Set(Nan::New(r));",13344],["info.GetReturnValue().Set(wo);",7467],["// Set icon state: spinning if catching up, tick otherwise",3377],["info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());",3346],["// Set the path to the shortcut target",3303],["// Set up our form data.",3103],["// Set pointer to end of history",3098],["info.GetReturnValue().Set(info.This());",3097],["// Set default style sheet",3093],["\"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +",2916]]},{"word":"Size","context":[["// Size limits",13099],["const gfx::Size& size,",3488],["gfx::Size(100, 100),",2557],["return gfx::Size();",2224],["gfx::Size(10, 10),",2111],["const gfx::Size& size) {",1713],["for (int i = 0; i < items.Size(); ++i)",1675],["for (int i = 0; i < items.Size(); i++)",1633],["cocos2d::Size arg0;",1528],["gfx::Size(50, 50),",1513]]},{"word":"Software","context":[["* along with this program; if not, write to the Free Software",117514],["* Free Software Foundation; either version 2 of the License, or (at your",85385],["the Free Software Foundation, either version 3 of the License, or",82946],["* the Free Software Foundation; either version 2 of the License, or",81953],["** Software or, alternatively, in accordance with the terms contained in",70819],["* the Free Software Foundation, either version 3 of the License, or",68454],["** General Public License version 2.1 as published by the Free Software",65406],["* License as published by the Free Software Foundation; either",57424],["along with this program; if not, write to the Free Software",56481],["*   the Free Software Foundation; either version 2 of the License, or     *",48756]]},{"word":"Source","context":[["// This file is distributed under the University of Illinois Open Source",29309],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["// Source Licenses. See LICENSE.TXT for details.",10215],["* This Source Code Form is subject to the terms of the Mozilla Public",5363],["// Source License; you may not use this file except in compliance with the",5340],["/* This Source Code Form is subject to the terms of the Mozilla Public",4895],["Doom 3 Source Code is free software: you can redistribute it and/or modify",4528],["Doom 3 Source Code is distributed in the hope that it will be useful,",4528],["Doom 3 GPL Source Code",4525],["along with Doom 3 Source Code.  If not, see <http://www.gnu.org/licenses/>.",4513]]},{"word":"Spell","context":[["#include \"Spell.h\"",11350],["Spell* spell = m_currentSpells[spellType];",1210],["// Spell have speed - need calculate incoming time",1166],["if (Spell* spell = m_currentSpells[CURRENT_CHANNELED_SPELL])",1140],["Spell::UsedSpellMods::iterator iterMod = spell->m_appliedMods.find(mod->ownerAura);",1052],["if (Spell* spell = GetCurrentSpell(CurrentSpellTypes(i)))",941],["if (Spell* spell = GetCurrentSpell(CURRENT_GENERIC_SPELL))",919],["// Patch 1.2 notes: Spell Reflection no longer reflects abilities",874],["dataFail << uint32(itr->first->GetId());                         // Spell Id",848],["// Spell code allow apply any auras to dead character in load time in aura/spell/item loading",806]]},{"word":"Start","context":[["ASSERT_TRUE(test_server()->Start());",9791],["ASSERT_TRUE(test_server_.Start());",5957],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917],["// Start",4491],["Start();",4415],["// Start new block file",4134],["// Start threads",3855],["ASSERT_TRUE(test_server.Start());",3609],["req->Start();",3513],["ASSERT_TRUE(embedded_test_server()->Start());",3305]]},{"word":"Status","context":[["return Status::OK();",26311],["return Status;",21763],["Status s;",9132],["return Status::OK;",6009],["EXPECT_EQ(ER_OK, status) << \"  Actual Status: \" << QCC_StatusText(status);",5365],["return Status(kOk);",5223],["// Status bar notification icons",3352],["if (q_status.Status == QUEST_STATUS_INCOMPLETE)",3102],["Status status;",2887],["return Status(0, \"OK\");",2270]]},{"word":"String","context":[["return String();",23753],["String str;",3570],["String s;",3278],["case QVariant::String:",3226],["String",3015],["String name;",2667],["v8::Local<v8::String> property,",2412],["String result;",2304],["String(null()) };",1934],["Handle<String> name,",1878]]},{"word":"T","context":[["template<typename T>",53955],["template <typename T>",52634],["template<class T>",34743],["template <class T>",33845],["template <typename T>",17690],["template <class T>",10564],["template<typename T>",10308],["template<class T>",4842],["case 'T':",4686],["template< class T, class cl_T, class fftw_T >",3730]]},{"word":"TEST_F","context":[["TEST_F(Arm32DecoderStateTests,",1699],["TEST_F(LayerTreeHostCommonTest,",899],["TEST_F(PasswordAutofillAgentTest,",543],["TEST_F(GLES2DecoderGeometryInstancingTest,",460],["TEST_F(",458],["TEST_F(LayerTreeHostScrollTestCaseWithChild,",426],["TEST_F(RendererSchedulerImplTest,",419],["TEST_F(PipelineIntegrationTest,",413],["TEST_F(HttpNetworkTransactionSpdy2Test,",367],["TEST_F(LayerTreeHostContextTestLostContextAndEvictTextures,",352]]},{"word":"THE","context":[["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",45198],["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",28675],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["THE SOFTWARE.",24450],["* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",23453]]},{"word":"THIS","context":[["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",45198],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",28354],["// AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING",18564],["* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.",16107],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",15950],["// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",15605],["** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",13159],["** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"",12787],["* THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY",12281],["* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",10078]]},{"word":"TO","context":[["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",25547],["* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",23453],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",21932],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",18059],["// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",15335],["// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",15278],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",14262]]},{"word":"TODO","context":[["// TODO",25446],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["//TODO",8093],["// TODO:",7004],["encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported",6745],["// TODO: reference any additional headers you need in STDAFX.H",5363],["// TODO: implement me!",4866],["// TODO: Add your control notification handler code here",4538],["// TODO Auto-generated destructor stub",4322],["// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)",3541]]},{"word":"TRUE","context":[["return TRUE;",267724],["return TRUE;",59629],["DBUG_RETURN(TRUE);",57887],["return(TRUE);",19590],["return(TRUE);",5757],["return TRUE;  // return TRUE unless you set the focus to a control",4611],["return TRUE;  // return TRUE unless you set the focus to a control",4611],["UpdateData(TRUE);",4129],["TRUE,",3797],["result= TRUE;",3692]]},{"word":"TYPEID_PLAYER","context":[["if (GetTypeId() == TYPEID_PLAYER)",35945],["if (m_caster->GetTypeId() != TYPEID_PLAYER)",23818],["if (target->GetTypeId() == TYPEID_PLAYER)",23275],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_PLAYER)",21701],["if (m_caster->GetTypeId() == TYPEID_PLAYER)",19899],["if (target->GetTypeId() != TYPEID_PLAYER)",16818],["if (GetTypeId() != TYPEID_PLAYER)",11567],["if (victim->GetTypeId() == TYPEID_PLAYER)",9518],["return GetCaster()->GetTypeId() == TYPEID_PLAYER;",5984],["if (unitTarget->GetTypeId() != TYPEID_PLAYER)",5857]]},{"word":"Test","context":[["oss << \" Test: \" << test_ << \"\\n\"",44197],["#include \"Test.h\"",3117],["// Test",2442],["// Unit Test",1419],["// Test that header file is self-contained.",1408],["/// %Test whether \\a x is solution",1293],["* Technology Compatibility Kit Test Suite(s) Location:",1204],["// Test signing successful, proceed",1047],["// Test solution",985],["using namespace Test;",978]]},{"word":"The","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["// Copyright 2014 The Chromium Authors. All rights reserved.",52484],["// Copyright 2013 The Chromium Authors. All rights reserved.",41789],["//                     The LLVM Compiler Infrastructure",39060],["// Copyright (c) 2009-2012 The Bitcoin developers",33536],["The above copyright notice and this permission notice shall be included in",28001],["// Copyright 2015 The Chromium Authors. All rights reserved.",22004],["// Copyright (c) 2011 The Chromium Authors. All rights reserved.",18204],["// The full text of the license can be found in the file LICENSE at",17668],["// The deal.II library is free software; you can use it, redistribute",17668]]},{"word":"This","context":[["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["* This library is distributed in the hope that it will be useful,",61321],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// This library is distributed in the hope that it will be useful,",51633]]},{"word":"ToString","context":[["a.push_back(CBitcoinAddress(addr).ToString());",5589],["string currentAddress = address.ToString();",4332],["return CBitcoinAddress(innerID).ToString();",3804],["ret.push_back(address.ToString());",3540],["return CBitcoinAddress(keyID).ToString();",3539],["obj.push_back(Pair(\"address\",       address.ToString()));",3538],["ret = GetAccountAddress(strAccount).ToString();",3522],["if (strncmp(hash.ToString().c_str(), strMatch.c_str(), strMatch.size()) == 0)",3470],["printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");",3445],["printf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString().c_str());",3438]]},{"word":"Type","context":[["template <class Type>",6355],["Type*",5641],["return Type();",4737],["printf(\"Parameter Type Error!\\n\");",4473],["\"Content-Type: text/html\\r\\n\"",3742],["<< \"Content-Type: application/json\\r\\n\"",3619],["\"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"",3560],["\"Content-Type: application/json\\r\\n\"",3473],["\"Type: %3\\n\"",3307],["optionFile << \"Type=Application\\n\";",3288]]},{"word":"USA","context":[["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",43239],["* Boston, MA 02110-1301, USA.",38378],["* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.",23676],["Boston, MA 02110-1301, USA.",20855],["Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",20046],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",13852],["* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",13293],["* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.",12893],["* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA",11599],["*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *",10670]]},{"word":"USE","context":[["* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",44316],["* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",24993],["OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",24819],["* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",21932],["// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",15278],["// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",15278],["* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND",14247],["** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",13156],["** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",13155],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",12100]]},{"word":"Unit","context":[["Unit* target = aurApp->GetTarget();",48854],["Unit* caster = GetCaster();",30054],["void EnterCombat(Unit* /*who*/)",24486],["void JustDied(Unit* /*killer*/)",20803],["if (Unit* caster = GetCaster())",17627],["if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))",14616],["Unit* target = GetTarget();",14476],["Unit* owner = GetOwner();",13507],["Unit* target = NULL;",11764],["void JustDied(Unit* /*killer*/) override",10702]]},{"word":"Update","context":[["events.Update(diff);",27578],["Update();",10513],["_events.Update(diff);",10149],["// Update nExtraNonce",9956],["// Update block",9647],["// Update nTime",9616],["// Update block index on disk without changing it in memory.",4262],["// Update the tx's hashBlock",4018],["// Update the last seen time for this node's address",3834],["// Update best block in wallet (so we can detect restored wallets)",3814]]},{"word":"Use","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["// Use of this source code is governed by a BSD-style license that can be",25676],["* Use of this source code is governed by a BSD-style license that can be",20089],["*  Use of this source code is governed by a BSD-style license",13737],["//  Use, modification and distribution are subject to the",4798],["// Use an exponentially decaying ~10-minute window:",4196],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["// Use list for automatic deletion",3847],["return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));",3627],["tr(\"Use up and down arrows to navigate history, and <b>Ctrl-L</b> to clear screen.\") + \"<br>\" +",3028]]},{"word":"V","context":[["return V;",7108],["V",4206],["case 'V':",3872],["case 'V':",3273],["later version accepted by the membership of KDE e.V. (or its",2969],["successor approved by the membership of KDE e.V.), which shall",2694],["*    OFFIS e.V.",1885],["V\\u000a",1867],["* Signature: ()V",1706],["accepted by the membership of KDE e.V. (or its successor approved",1662]]},{"word":"Value","context":[["return Value::null;",38765],["// Return Value:",20573],["v8::Local<v8::Value> argv[1] =",7467],["Value result = tableRPC.execute(jreq.strMethod, jreq.params);",6952],["BOOST_FOREACH(Value& input, inputs)",4935],["v8::Local<v8::Value> v8Value = info[0];",4626],["Return Value:",4134],["Value result;",4041],["Value valRequest;",3659],["string strReply = JSONRPCReply(Value::null, objError, id);",3646]]},{"word":"Version","context":[["* Licensed under the Apache License, Version 2.0 (the \"License\");",44075],["* Licensed under the Apache License, Version 2.0 (the \"License\").",19830],["Licensed under the Apache License, Version 2.0 (the \"License\");",18283],["// Licensed under the Apache License, Version 2.0 (the \"License\");",16708],["// Licensed under the Apache License, Version 2.0 (the \"License\");",12402],["* Licensed under the Apache License, Version 2.0 (the \"License\");",10189],["* to you under the Apache License, Version 2.0 (the",8998],["Licensed under the Apache License, Version 2.0 (the \"License\");",8411],["* of the Common Development and Distribution License Version 1.0",7877],["* Version: MPL 1.1/GPL 2.0/LGPL 2.1",5834]]},{"word":"WARRANTIES","context":[["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",32908],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",27671],["* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",23453],["* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",22932],["* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",22894],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",19933],["* on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",19811],["* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",18691],["* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",17947]]},{"word":"WARRANTY","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241],["*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *",31446]]},{"word":"WHETHER","context":[["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",28388],["* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",23246],["* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",22356],["// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",15297],["* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",14258],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",14224],["** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",13898],["* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",12127],["* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",9052],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",8169]]},{"word":"WITHOUT","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",34241]]},{"word":"We","context":[["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348],["// We define this here, because GCCs winbase.h limits this to _WIN32_WINNT >= 0x0601 (Windows 7),",2789],["// We want to sort transactions by priority and fee, so:",2550],["// We're going to call functions which can modify content of the list during iteration over it's elements",2377],["// We should be phasing out our use of sites like these.  If we need",1832],["// We use spawn coords to spawn",1830],["// We now get our external IP from the IRC server first and only use this as a backup",1818],["// * We process a message in the buffer (message handler thread).",1789]]},{"word":"WorldPacket","context":[["WorldPacket data;",41021],["#include \"WorldPacket.h\"",29752],["WorldPacket packet;",6215],["WorldPacket data(SMSG_MESSAGECHAT, 200);",4327],["WorldPacket data(SMSG_SET_PLAYER_DECLINED_NAMES_RESULT, 4+8);",2619],["WorldPacket data(SMSG_CHAR_FACTION_CHANGE, 1);",2540],["WorldPacket data(SMSG_ACTIVATETAXIREPLY, 4);",2477],["WorldPacket data(SMSG_CHAR_CUSTOMIZE, 1);",2311],["WorldPacket data(SMSG_CHAR_CREATE, 1);",2105],["WorldPacket data(SMSG_SUPERCEDED_SPELL, 4 + 4);",1884]]},{"word":"Write","context":[["// Write back",4293],["// Write block to history file",4128],["adb.Write(addrman);",3602],["// Write a bitcoin.desktop file to the autostart directory:",2112],["// Write queued txindex changes",2083],["// Write undo information to disk",2006],["GetSession()->SendPacket(packet.Write());",1886],["// Write to disk",1734],["return Write(make_pair(string(\"acc\"), strAccount), account);",1375],["return Write(make_pair(string(\"name\"), strAddress), strName);",1371]]},{"word":"X","context":[["#undef X",8080],["case 'X':",3872],["X(nTimeConnected);",3688],["X(addrName);",3688],["#define X(name) stats.name = name",3688],["X(nLastSend);",3688],["X(fInbound);",3688],["X(nVersion);",3688],["X(nServices);",3688],["X(nLastRecv);",3688]]},{"word":"Y","context":[["strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);",3248],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",2944],["{ C_STRING_WITH_LEN(\"enum('N','Y')\") },",2785],["//            msg.complete() ? \"Y\" : \"N\");",2233],["case 'Y':",2193],["case 'Y':",2075],["log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",",1975],["gaiaExport64( p_out, coord, 1, endian_arch );  // Y",1728],["ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());",1665],["DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", block.GetBlockTime()).c_str(),",1482]]},{"word":"You","context":[["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* You should have received a copy of the GNU General Public License along",105989],["*  You should have received a copy of the GNU General Public License",68451],["// You should have received a copy of the GNU General Public License along",51550],["You should have received a copy of the GNU General Public License",45757],["* You may obtain a copy of the License at",45664],["* You should have received a copy of the GNU General Public License",45078],["// You should have received a copy of the GNU General Public License",35376],["* You should have received a copy of the GNU Lesser General Public",29817]]},{"word":"_","context":[["using testing::_;",7672],["using ::testing::_;",7354],["return state.Abort(_(\"System error: \") + e.what());",4553],["strErrors << _(\"Cannot write default address\") << \"\\n\";",3701],["strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";",3694],["strErrors << _(\"Error loading wallet.dat\") << \"\\n\";",3688],["strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";",3682],["uiInterface.InitMessage(_(\"Done loading\"));",3638],["uiInterface.InitMessage(_(\"Rescanning...\"));",3636],["uiInterface.InitMessage(_(\"Loading block index...\"));",3631]]},{"word":"__","context":[["__ bind(&done);",17878],["__ Ret();",12440],["__ ret(0);",8752],["GuiLock __;",8207],["__ CallStub(&stub);",7723],["__ jmp(&done);",6452],["__ bind(&miss);",6015],["__ delayed()->nop();",4800],["__ bind(&loop);",4750],["__ nop();",4617]]},{"word":"_player","context":[["R2_GLOBALS._player.disableControl();",3010],["_player->GetSession()->SendPacket(&data);",2987],["Player* _player = m_session->GetPlayer();",2642],["if (Player* _player = GetCaster()->ToPlayer())",2312],["_game._player._stepEnabled = false;",2233],["_player->GetMotionMaster()->MovementExpired();",2106],["_player->RepopAtGraveyard();",2019],["if (_player)",2012],["if (ChannelMgr* cMgr = channelMgr(_player->GetTeam()))",1940],["_player->SendEquipError(msg, pItem, NULL);",1931]]},{"word":"a","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* You should have received a copy of the GNU General Public License along",105989],["*  You should have received a copy of the GNU General Public License",68451],["// You should have received a copy of the GNU General Public License along",51550],["You should have received a copy of the GNU General Public License",45757],["* You may obtain a copy of the License at",45664],["* You should have received a copy of the GNU General Public License",45078],["** In addition, as a special exception, Nokia gives you certain additional",40703]]},{"word":"about","context":[["// see Step 2: parameter interactions for more information about these",3653],["// notify wallets about a new best chain",3442],["// notify wallets about an incoming inventory (for request counts)",3435],["// make sure all wallets know about the given transaction, in the given block",3435],["// notify wallets about an updated transaction",3435],["throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");",3370],["\"with information about <txid>.\");",2214],["// do that because they want to know about (and store and rebroadcast and",2146],["// about this message: it's needed when they are recursively walking the",2146],["\"Get detailed information about in-wallet transaction <txid>\");",2103]]},{"word":"above","context":[["* 1. Redistributions of source code must retain the above copyright",35380],["* 2. Redistributions in binary form must reproduce the above copyright",35214],["The above copyright notice and this permission notice shall be included in",28001],["*     * Redistributions of source code must retain the above copyright",24202],["*     * Redistributions in binary form must reproduce the above",18845],["//     * Redistributions of source code must retain the above copyright",15393],["//     * Redistributions in binary form must reproduce the above",15332],["* The above copyright notice and this permission notice shall be included in",13555],["**   * Redistributions in binary form must reproduce the above copyright",13144],["**   * Redistributions of source code must retain the above copyright",13144]]},{"word":"access","context":[["// prevent crash at access and unexpected charges counting with item update queue corrupt",1800],["// prevent DB access for online player",1569],["/* deny access to non-superusers */",1003],["do_action:\t/* This label is used only to access EOF actions. */",814],["/*------------------------------ access -----------------------------------*/",795],["/* deny access to user without PROCESS_ACL privilege */",697],["* @access public",620],["\"\\t access=\\\"public\\\"\\n\"",608],["access = GENERIC_READ;",556],["ExecutionAccess access(isolate_);",548]]},{"word":"account","context":[["// Parse the account first so we don't generate a key if there's an error",8026],["ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));",3892],["CAccount account;",3714],["\"If [account] is specified, assign address to [account].\";",3691],["\"If [account] is specified, assign address to [account].\";",3691],["walletdb.WriteAccount(strAccount, account);",3661],["string account;",3629],["entry.push_back(Pair(\"account\", strSentAccount));",3586],["// Find all addresses that have the given account",3585],["walletdb.ReadAccount(strAccount, account);",3574]]},{"word":"action","context":[["switch (action)",17373],["* @param action Pointer to an action.",6674],["* @param action Pointer to an action.",6674],["return action;",5326],["switch (savepoint.action) {",5300],["bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)",4644],["switch (action) {",4406],["void DoAction(int32 const action)",4021],["if (action)",3890],["void DoAction(int32 action) override",3614]]},{"word":"active","context":[["active = true;",5044],["active = false;",4677],["if (active)",3761],["// item set bonuses applied only at equip and removed at unequip, and still active for broken items",2420],["// if chkReqPayment is not active, don't display lnReqAmount as invalid",2357],["// same objective target can be in many active quests, but not in 2 objectives for single quest (code optimization).",2339],["// scan for better chains in the block chain database, that are not yet connected in the active best chain",1852],["if (active) {",1617],["if (!active)",1137],["return active;",1129]]},{"word":"add","context":[["to.add(\",\\n\").addSpaces(lev);",7641],["to.add(\"\\n\").addSpaces(lev);",7641],["default: to.add(\"}\"); types.pop_back(); vtypes.pop_back(); stages.pop_back(); flags.pop_back(); break;",7294],["// spells required only Real aura add/remove",4114],["// you should add code here to check that the transaction does a",3642],["/* No suffix specified, add selected suffix */",3254],["add(f);",3209],["ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));",3100],["MCperror->add",3023],["if (add)",2969]]},{"word":"addr","context":[["CAddress addr;",17106],["if (!addr.IsValid())",13721],["if (!addr.GetKeyID(keyID))",11679],["if (IsLimited(addr))",9115],["pfrom->PushAddress(addr);",8630],["pto->PushMessage(\"addr\", vAddr);",8070],["if (addr.IsRoutable())",7571],["if (AddLocal(addr, LOCAL_IF))",7473],["CService addr;",7285],["vAdd.push_back(addr);",6773]]},{"word":"address","context":[["if (!address.IsValid())",28578],["CTxDestination address;",24508],["CBitcoinAddress address(params[0].get_str());",13557],["setAddress.insert(address);",11810],["scriptPubKey.SetDestination(address.Get());",9010],["if (setAddress.count(address))",8592],["const CBitcoinAddress& address = item.first;",7025],["if (!address.GetKeyID(keyID))",6751],["string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);",5909],["CBitcoinAddress address(s.name_);",5551]]},{"word":"after","context":[["// Need to update only after we know CreateNewBlock succeeded",5681],["// The memory index structure will be changed after the db commits.",4262],["// it will rebroadcast it later, after the parent transaction(s)",4058],["// can be duplicated to remove the ability to spend the first instance -- even after",4051],["// call functions which may have additional effects after chainging state of unit",3994],["// Allow binding if the port is still in TIME_WAIT state after",3757],["// only consider very recently tried nodes after 30 failed attempts",3711],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// minimum amount of work that could possibly be required nTime after",3653],["// value so we don't have to do memory allocations after that.",3483]]},{"word":"algorithm","context":[["#include <algorithm>",150071],["#include <algorithm>",73196],["#include <boost/algorithm/string.hpp>",14486],["#include <boost/algorithm/string/replace.hpp>",7521],["#include <boost/algorithm/string/predicate.hpp>",7500],["#include<algorithm>",6749],["#include <boost/algorithm/string/join.hpp>",4368],["#include <boost/algorithm/string.hpp>",3253],["ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";",3226],["#include <boost/algorithm/string/case_conv.hpp> // for to_lower()",2449]]},{"word":"all","context":[["all copies or substantial portions of the Software.",28036],["* all copies or substantial portions of the Software.",13569],["// all copies or substantial portions of the Software.",8289],["// in all copies or substantial portions of the Software.",7261],["* in all copies or substantial portions of the Software.",5745],["error->all(FLERR,",5356],["The above copyright notice and this permission notice shall be included in all",5343],["/* included in all copies or substantial portions of the Software.       */",4801],["* included in all copies or substantial portions of the Software.",4178],["// Check that all transactions are finalized",4119]]},{"word":"allow","context":[["* of those above. If you wish to allow use of your version of this file only",5726],["* under the terms of either the GPL or the LGPL, and not to allow others to",5726],["// DoS prevention: do not allow mapOrphanTransactions to grow unbounded",4070],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// Periodically clear setAddrKnown to allow refresh broadcasts",3942],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// then allow mining of a min-difficulty block.",2725],["// even if we allow a non BTC unit input in lnReqAmount, we generate the URI with BTC as unit (as defined in BIP21)",2086],["// Wait and allow messages to bunch up.",1857],["// * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000",1655]]},{"word":"along","context":[["* along with this program; if not, write to the Free Software",117514],["* You should have received a copy of the GNU General Public License along",105989],["along with this program; if not, write to the Free Software",56481],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["// You should have received a copy of the GNU General Public License along",51550],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["along with this program; if not, write to the Free Software",25711],["* along with this program; if not, write to the Free Software",25102],["along with this library; see the file COPYING.LIB.  If not, write to",23051]]},{"word":"already","context":[["// returns true if wasn't already contained in the set",8694],["// Don't know what it is, just say we already got one",4138],["// unless those are already completely spent.",4054],["// Add wallet transactions that aren't already in a block to mapTransactions",3806],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// In case we are on a very long side-chain, it is possible that we already have",3600],["// If the shortcut exists already, remove it for updating",3297],["\"in your wallet were already spent, such as if you used a copy of wallet.dat \"",3042],["// already refuses previously-known transaction ids entirely.",2965]]},{"word":"also","context":[["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["\"It is also recommended to set alertnotify so you are notified of problems;\\n\"",4134],["// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options",3423],["// IOStream device that speaks SSL but can also speak non-SSL",3219],["// Set to non-blocking, incoming connections will also inherit this",2749],["// CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see",2028],["// This is also true for mempool checks.",1855],["// Add tx to wallet, because if it has change it's also ours,",1663],["Other copyrights also apply to some parts of this work.  Please",1620],["* files in the program, then also delete it here.",1497]]},{"word":"always","context":[["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["// always trickle our own transactions",3470],["// sync-checkpoint should always be accepted block",2263],["// however we MUST always provide at least what the remote peer needs",2032],["// we're sleeping, but we must always check fShutdown after doing this.",1857],["// Together, that means that at least one of the following is always possible,",1789],["// Hybrid IRC used by lfnet always returns IP when you userhost yourself,",1687],["// will always return a valid pointer, even if empty list",1562],["\"Bind to given address and always listen on it. Use [host]:port notation for \"",1474],["// receiving addresses must always have an address book entry if they're not change return.",1374]]},{"word":"amount","context":[["// Check proof of work matches claimed amount",8366],["obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));",7124],["throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");",5296],["\"<amount> is a real and is rounded to the nearest 0.00000001\"",4410],["return (double)amount / (double)COIN;",3765],["// minimum amount of work that could possibly be required nTime after",3653],["entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));",3566],["// Return maximum amount of blocks that other nodes claim to have",3543],["entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));",3541],["entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));",3325]]},{"word":"an","context":[["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["distributed under the License is distributed on an \"AS IS\" BASIS,",19893],["* on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",19811],["// distributed under the License is distributed on an \"AS IS\" BASIS,",15791],["// distributed under the License is distributed on an \"AS IS\" BASIS,",13141],["/* Raise an exception if the arguments couldn't be parsed. */",13073],["* distributed under the License is distributed on an \"AS IS\" BASIS,",11461],["* software distributed under the License is distributed on an",8460],["distributed under the License is distributed on an \"AS IS\" BASIS,",8179],["// Parse the account first so we don't generate a key if there's an error",8026]]},{"word":"and","context":[["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* Redistribution and use in source and binary forms, with or without",88602],["* Redistribution and use in source and binary forms, with or without",88602],["** Foundation and appearing in the file LICENSE.LGPL included in the",65319],["* This program is free software; you can redistribute it and/or",62550],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624],["* See the License for the specific language governing permissions and",53439],["// software; you can redistribute it and/or modify it under the",50473]]},{"word":"any","context":[["* (at your option) any later version.",163870],["(at your option) any later version.",132249],["* option) any later version.",98871],["*   (at your option) any later version.                                   *",53031],["* of the License, or (at your option) any later version.",52634],["// any later version.",52513],["*  (at your option) any later version.",35379],["* version 2 of the License, or (at your option) any later version.",33135],["// (at your option) any later version.",32814],["*  any later version.",32796]]},{"word":"app","context":[["return app.exec();",16181],["QApplication app(argc, argv);",15312],["app.exec();",5345],["#include \"chrome/app/chrome_command_ids.h\"",4349],["#include \"wx/app.h\"",3643],["app.installTranslator(&translator);",3508],["QCoreApplication app(argc, argv);",3359],["app.processEvents();",3256],["app.setQuitOnLastWindowClosed(false);",3255],["app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));",3218]]},{"word":"append","context":[["data.append(GetPackGUID());",10744],["str->append(')');",4487],["positive.append(name.begin()+3, name.end());",3370],["data.append(m_caster->GetPackGUID());",3360],["result.append(\".\");",3340],["result.append(selectedSuffix);",3256],["history.append(cmd);",3115],["ui->messagesWidget->append(out);",3094],["keys.append(CIMKeyBinding(",2807],["unitlist.append(BTC);",2790]]},{"word":"apply","context":[["if (apply)",56212],["if(apply)",9553],["if (!apply)",5859],["tester::apply",4105],["m_isPeriodic = apply;",3402],["target->ApplySpellImmune(GetId(), IMMUNITY_MECHANIC, MECHANIC_STUN, apply);",2751],["target->ApplySpellImmune(GetId(), IMMUNITY_MECHANIC, MECHANIC_SNARE, apply);",2511],["cur += (apply ? val : -val);",2262],["target->ApplySpellImmune(GetId(), IMMUNITY_MECHANIC, MECHANIC_POLYMORPH, apply);",2237],["target->ApplySpellImmune(GetId(), IMMUNITY_MECHANIC, MECHANIC_ROOT, apply);",2197]]},{"word":"are","context":[["* are met:",49958],["* modification, are permitted provided that the following conditions",49713],["** rights.  These rights are described in the Digia Qt LGPL Exception",37335],["** rights.  These rights are described in the Nokia Qt LGPL Exception",25379],["* modification, are permitted provided that the following conditions are",21256],["* modification, are permitted provided that the following conditions are",21256],["* are too numerous to list here. Please refer to the COPYRIGHT",20480],["* modification, are permitted provided that the following conditions are met:",16487],["* modification, are permitted provided that the following conditions are met:",16487],["// modification, are permitted provided that the following conditions are",15897]]},{"word":"area","context":[["uint32 zone, area;",2311],["// If don't already have its previous block, shunt it off to holding area until we get it",1991],["return area;",1852],["// If we don't already have its previous block, shunt it off to holding area until we get it",1766],["// There is a free transaction area in blocks created by most miners,",1655],["GetZoneAndAreaId(zone, area);",1427],["if (area)",1329],["* area triggers, creatures, game objects, instances, items, and spells beyond",851],["// restore FFA PvP area state, remove not allowed for GM mounts",839],["// remove items with area/map limitations (delete only for alive player to allow back in ghost mode)",806]]},{"word":"arg","context":[[".arg(type)",3363],["return arg;",3344],[".arg(date)",3322],["tr(\"The entered address \\\"%1\\\" is already in the address book.\").arg(ui->addressEdit->text()),",2907],["ret += QString(\"%1label=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(lbl);",2780],["ret += QString(\"%1label=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(lbl);",2780],["ret += QString(\"%1message=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(msg);",2778],["ret += QString(\"%1message=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(msg);",2778],["setWindowTitle(QString(\"%1\").arg(address));",2430],[", ( bp::arg(\"e\") )",2327]]},{"word":"arg1","context":[["delete arg1;",5118],["virtual Item *create(THD *thd, Item *arg1);",2544],["if (!arg1) {",2104],["std::string arg1;",1939],["btSoftBody *arg1 = (btSoftBody *) 0 ;",1790],["arg1 = *(btSoftBody **)&jarg1;",1790],["OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;",1769],["double arg1;",1729],["int arg1;",1682],["if(!arg1) SWIG_PHP_Error(E_ERROR, \"this pointer is NULL\");",1608]]},{"word":"argc","context":[["int main(int argc, char *argv[])",49760],["int argc = 0;",45098],["argc = lua_gettop(tolua_S)-1;",36101],["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["if (argc == 0)",20289],["int main(int argc, char** argv)",20124],["if (argc == 1)",18558],["if (argc == 1) {",17821],["if (argc == 0) {",16529]]},{"word":"args","context":[["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["if (!*args)",58717],["void* args[2] = {NULL, (void*)&arg__1};",32638],["if (args[0]==NULL) {",30082],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["if (args[0]!=&returnValue) {",30082],["va_list args;",21709],["va_end(args);",20207],["JS::CallArgs args = JS::CallArgsFromVp(argc, vp);",15568],["returnValue = *((bool*)args[0]);",13036]]},{"word":"argument","context":[["if (nMaxVersion == 0) // the -upgradewallet without argument case",3646],["// Convert argument list to JSON objects in method-dependent way,",2351],["case STATE_ARGUMENT: // In or after argument",2349],["if(state == STATE_ARGUMENT) // Space ends argument",2343],["\"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"",2109],["\"Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or\\n\"",2108],["\"Third optional argument (may be null) is an array of base58-encoded private\\n\"",2108],["// Accept the deprecated and ignored 'detach' boolean argument",1867],["vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));",1561],["LuaError(l, \"incorrect argument\");",1507]]},{"word":"arguments","context":[["/* Raise an exception if the arguments couldn't be parsed. */",13073],["ZoneList<Expression*>* args = expr->arguments();",10143],["JSB_PRECONDITION2(ok, cx, false, \"Error processing arguments\");",3831],["JSB_PRECONDITION2(ok, cx, JS_FALSE, \"Error processing arguments\");",3710],["QStringList arguments;",3635],["// get number of arguments",3634],["* - Extra whitespace at the beginning and end and between arguments will be ignored",2344],["* @param[out]   args        Parsed arguments will be appended to this list",2335],["* Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.",2316],["JS_ReportError(cx, \"wrong number of arguments: %d, was expecting %d\", argc, 1);",2120]]},{"word":"argv","context":[["int main(int argc, char *argv[])",49760],["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["int main(int argc, char** argv)",20124],["QApplication app(argc, argv);",15312],["int main(int argc, char **argv) {",12434],["int main(int argc, char** argv) {",11840],["jsval *argv = JS_ARGV(cx, vp);",11728],["int main(int argc, char *argv[]) {",10743],["int main(int argc, char** argv) {",8959]]},{"word":"array","context":[["\"Returns an array of objects containing:\\n\"",6325],["#include <array>",6121],["return array;",5349],["// array of requests",3567],["array<shared_ptr<const Tensor>,2> in = {{t[1], t[2]}};",2826],["throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");",2694],["\"Results are an array of Objects, each of which has:\\n\"",2566],["\"Returns array of unspent transaction outputs\\n\"",2208],["\"(array of objects containing transaction id and output number),\\n\"",2204],["\"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"",2109]]},{"word":"as","context":[["* it under the terms of the GNU General Public License as published by",157996],["it under the terms of the GNU General Public License as published by",124782],["* under the terms of the GNU General Public License as published by the",98768],["*  it under the terms of the GNU General Public License as published by",65655],["** General Public License version 2.1 as published by the Free Software",65406],["* License as published by the Free Software Foundation; either",57424],["*   it under the terms of the GNU General Public License as published by  *",54072],["// terms of the GNU General Public License as published by the",50473],["* as published by the Free Software Foundation; either version 2",47322],["License as published by the Free Software Foundation; either",44163]]},{"word":"assert","context":[["#include <assert.h>",51597],["assert(false);",34611],["assert(0);",29944],["assert(false);",17395],["#include <assert.h>",16829],["assert(0);",10234],["#include <iprt/assert.h>",9652],["assert (rc == 0);",9155],["///assert",8512],["// assert",7118]]},{"word":"at","context":[["* (at your option) any later version.",163870],["(at your option) any later version.",132249],["* Free Software Foundation; either version 2 of the License, or (at your",85385],["*   (at your option) any later version.                                   *",53031],["* of the License, or (at your option) any later version.",52634],["* You may obtain a copy of the License at",45664],["// Free Software Foundation; either version 3, or (at your option)",44217],["** use the contact form at http://qt.digia.com/contact-us.",36972],["*  (at your option) any later version.",35379],["* version 2 of the License, or (at your option) any later version.",33135]]},{"word":"attribute","context":[["//\tAdd attribute: _value",2601],["attribute = attribute->Next();",1791],["attribute = attribute->Next();",1791],["//   be defined (automatically using the export-subst git attribute), and",1759],["while (attribute)",1528],["//\tAdd attribute: param",1487],["//\tAdd attribute: value",1482],["std::string value = attribute->Value();",1450],["attribute = child->FirstAttribute();",935],["QStringRef name = attribute.name();",860]]},{"word":"aura","context":[["#include \"ui/aura/window.h\"",8596],["Aura const* aura = iter->second->GetBase();",4295],["// spells required only Real aura add/remove",4114],["Aura* aura = iter->second;",3638],["#include \"ui/aura/root_window.h\"",3546],["#include \"ui/aura/env.h\"",3099],["#include \"ui/aura/window_event_dispatcher.h\"",2817],["Unit* caster = aura->GetCaster();",2674],["Aura* aura = itr->second;",2557],["#include \"ui/aura/client/aura_constants.h\"",2391]]},{"word":"auto","context":[["auto packagedFunction = [task]() { (*task)(); };",3192],["auto s = Director::getInstance()->getWinSize();",2914],["// check count of items (skip for auto move for same player from bank)",2420],["for (auto& x0 : *range[1])",2110],["for (auto& x1 : *range[1])",1835],["// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!",1774],["// This is only to keep the database open to defeat the auto-flush for the",1649],["auto typeMapIter = _js_global_type_map.find(typeName);",1504],["auto director = Director::getInstance();",1473],["auto handle = IoTHubTransportHttp_Create(&TEST_CONFIG);",1414]]},{"word":"available","context":[["* available from http://www.virtualbox.org. This file is free software;",20778],["available: visit www.juce.com for more information.",4706],["* Description not yet available.",3724],["throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");",3370],["\"If [account] is not specified, returns the server's total available balance.\\n\"",3159],["*  Multi Theft Auto is available from http://www.multitheftauto.com/",3112],["tr(\"Type <b>help</b> for an overview of available commands.\")), true);",3025],["uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;",2995],["throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");",2541],["ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));",2402]]},{"word":"b","context":[["return b;",18276],["case 'b':",9160],["case 'b':",5883],["return a.get<0>() < b.get<0>();",5461],["return a.get<1>() < b.get<1>();",5461],["if (b)",4850],["b) the Affero GPL v3",4747],["if ( ! b )",3991],["return b;",3789],["if (b) {",3607]]},{"word":"back","context":[["// Work back to the first block in the orphan chain",5047],["// Write back",4293],["// Echo the message back with the nonce. This allows for two useful features:",4072],["CScript subscript(stack.back().begin(), stack.back().end());",3979],["CScript subscript(stack.back().begin(), stack.back().end());",3979],["porphan = &vOrphan.back();",3844],["int nCol = vStack.back().first;",3810],["CBlockIndex* pindex = vStack.back().second;",3805],["// Shutdown will take long enough that the response should get back",3685],["// Try a dual IPv6/IPv4 socket, falling back to separate IPv4 and IPv6 sockets",3317]]},{"word":"bar","context":[["bar.step();",38566],["BarGoLink bar(1);",10597],["BarGoLink bar(result->GetRowCount());",10096],["barGoLink bar(1);",4653],["barGoLink bar( 1 );",3712],["bar();",3483],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["// Create actions for the toolbar, menu bar and tray/dock icon",3377],["// Status bar notification icons",3352],["// Create application menu bar",3351]]},{"word":"base","context":[["#include \"base/logging.h\"",87295],["#include \"base/bind.h\"",76145],["base::Unretained(this)));",59575],["#include \"base/command_line.h\"",50698],["base::RunLoop().RunUntilIdle();",48592],["#include \"base/strings/utf_string_conversions.h\"",44138],["#include \"base/memory/scoped_ptr.h\"",35875],["#include \"base/values.h\"",32749],["#include \"base/strings/string_util.h\"",31827],["#include \"base/strings/string_number_conversions.h\"",27808]]},{"word":"be","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* This library is distributed in the hope that it will be useful,",61321],["// This library is distributed in the hope that it will be useful,",51633],["** Alternatively, this file may be used under the terms of the GNU",45135],["This library is distributed in the hope that it will be useful,",42670]]},{"word":"because","context":[["// Note: not using straight sprintf here because we do NOT want",6536],["// be quick, because if there are any operations",3942],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348],["// TODO: This is currently disabled because it needs to be verified to work",3211],["\"Error: This transaction requires a transaction fee of at least %s because of \"",3041],["// This isn't a Misbehaving(100) (immediate ban) because the",2943],["// We define this here, because GCCs winbase.h limits this to _WIN32_WINNT >= 0x0601 (Windows 7),",2789],["// This is a more accurate fee-per-kilobyte than is used by the client code, because the",2541],["// client code rounds up the size to the nearest 1K. That's good, because it gives an",2539]]},{"word":"been","context":[["// A copy of the GPL 2.0 should have been included with the program.",4648],["// have been mined or received.",4058],["// Check if the current key has been used",3593],["// This file has been generated by Py++.",3483],["This file has been generated by generate-bindings.pl. DO NOT MODIFY!",2583],["/* this file has been autogenerated by vtkNodeJsWrap */",2173],["// Verify that the web database has been updated and the notification sent.",2125],["// This must not fail. The transaction has already been signed and recorded.",1928],["// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!",1774],["// Check if this alert has been cancelled",1726]]},{"word":"before","context":[["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["\"[minconf] is the minimum number of confirmations before payments are included.\\n\"",6316],["// Store the pindexBest used before CreateNewBlock, to avoid races",5639],["// Must have a version message before anything else",4128],["// that can be verified before saving an orphan block.",3805],["// Make sure it's successfully written to disk before changing memory structure",3618],["// do this before starting client thread, to filter out",3509],["// but before showing splash screen.",3220],["\"before being able to call any methods which require the wallet to be unlocked.\");",3129],["// Application identification (must be set before OptionsModel is initialized,",2968]]},{"word":"begin","context":[["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["for (AuraEffectList::const_iterator i = mTotalAuraList.begin(); i != mTotalAuraList.end(); ++i)",10449],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);",5444],["for (SessionMap::const_iterator itr = m_sessions.begin(); itr != m_sessions.end(); ++itr)",5401],["for (f_iter = fields.begin(); f_iter != fields.end(); ++f_iter) {",5142],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931]]},{"word":"being","context":[["// being sent to another address.",4051],["\"before being able to call any methods which require the wallet to be unlocked.\");",3129],["misrepresented as being the original software.",2483],["// Called from inside SetBestChain: attaches a block to the new best chain being built",2068],["// undo data contains height: this is the last output of the prevout tx being spent",1996],["must not be misrepresented as being the original software.",1968],["* misrepresented as being the original software.",1853],["// Note: We use a new key here to keep it from being obvious which side is the change.",1710],["// Returns -1 if it wasn't being tracked",1663],["// Check that row patterns apply to pattern being checked.'",1594]]},{"word":"below","context":[["CONDITIONS NOTICE, the COPYRIGHT NOTICE (below), the",8586],["PATENT MARKING NOTICE (below), and the PATENT RIGHTS",8586],["DISCLAIMER (below), the UNIVERSITY PATENT NOTICE (below), the",8586],["DISCLAIMER (below), the UNIVERSITY PATENT NOTICE (below), the",8586],["GRANT (below).",4293],["GRANT (below) in the documentation and/or other materials",4293],["return error(\"CheckProofOfWork() : nBits below minimum work\");",3793],["DROPTOFLOOR - NPC can be in air, but will spawn on the closest floor surface below it",1822],["// if at height 0, or nothing interesting below, use stored hash and do not descend",1769],["// if at height 0, or nothing interesting below, store hash and stop",1768]]},{"word":"between","context":[["** a written agreement between you and Digia.  For licensing terms and",37400],["** conditions contained in a signed written agreement between you and Nokia.",14942],["** a written agreement between you and Nokia.",14574],["** a written agreement between you and The Qt Company. For licensing terms",9470],["** a written agreement between you and The Qt Company.  For licensing terms and",6208],["// The nonce stops the remote getting confused between different pings: without",4072],["addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old",3728],["// Seed nodes are given a random 'last seen time' of between one and two",3671],["// use an nUnkBias between 10 (no outgoing connections) and 90 (8 outgoing connections)",3455],["// Core-specific options shared between UI and daemon",3182]]},{"word":"binary","context":[["* Redistribution and use in source and binary forms, with or without",88602],["* 2. Redistributions in binary form must reproduce the above copyright",35214],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["// Redistribution and use in source and binary forms, with or without",19804],["*     * Redistributions in binary form must reproduce the above",18845],["* Redistribution and use in source and binary forms, with or without",17579],["//     * Redistributions in binary form must reproduce the above",15332],["**   * Redistributions in binary form must reproduce the above copyright",13144],["** \"Redistribution and use in source and binary forms, with or without",12788]]},{"word":"bind","context":[["#include \"base/bind.h\"",76145],["__ bind(&done);",17878],["#include <boost/bind.hpp>",17854],["acceptor->bind(endpoint);",6833],["if (mapArgs.count(\"-bind\")) {",6803],["__ bind(&miss);",6015],["bindns::bind(async_write_handler,",6006],["bindns::bind(async_read_handler,",4950],["__ bind(&loop);",4750],["__ bind(&slow);",4247]]},{"word":"bit","context":[["if (strWhole.size() > 10) // guard against 63 bit overflow",3253],["case 2: // we have one bit",3178],["case 5: // we have 1 bit, and keep 6",3178],["// there must be at least one bit per node in the partial tree, and at least one node per hash",1767],["// store as flag bit",1767],["bit     description",1412],["// bit logic",924],["// ppcoin: compute stake entropy bit for stake modifier",877],["* we want to instead treat it as an 8-bit unsigned char, hence the",854],["// the last check is a bit excessive, but let it be, just in case",839]]},{"word":"bitcoin","context":[["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"",57878],["\"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");",4857],["// Format the subversion field according to BIP 14 spec (https://en.bitcoin.it/wiki/BIP_0014)",3098],["Q_INIT_RESOURCE(bitcoin);",3047],["// Load e.g. bitcoin_de.qm (shortcut \"de\" needs to be defined in bitcoin.qrc)",2969],["// Load e.g. bitcoin_de_DE.qm (shortcut \"de_DE\" needs to be defined in bitcoin.qrc)",2969],["return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();",2834],["setWindowIcon(QIcon(\":icons/bitcoin\"));",2790],["* Qt4 bitcoin GUI.",2748],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify data directory\"),",2746]]},{"word":"bits","context":[["#include <bits/stdc++.h>",10095],["case 0: // we have no bits",6487],["unsigned int bits = len * 8;",3676],["pend[-4] = (bits >> 24) & 0xff;",3675],["pend[-3] = (bits >> 16) & 0xff;",3675],["pend[-1] = (bits >> 0) & 0xff;",3674],["pend[-2] = (bits >> 8) & 0xff;",3674],["case 1: // we have 6 bits and keep 4",3309],["case 0: // we have no bits and get 6",3309],["case 2: // we have four bits",3309]]},{"word":"blink","context":[["namespace blink {",40889],["} // namespace blink",31443],["TRACE_EVENT_SET_SAMPLING_STATE(\"blink\", \"DOMMethod\");",8612],["TRACE_EVENT_SET_SAMPLING_STATE(\"blink\", \"DOMGetter\");",8047],["TRACE_EVENT_SET_SAMPLING_STATE(\"blink\", \"DOMSetter\");",5548],["}  // namespace blink",3668],["using blink::WebString;",2170],["blink::WebGestureDeviceTouchscreen);",1956],["blink::WebLocalFrame* frame,",1515],["using blink::WebInputEvent;",1393]]},{"word":"block","context":[["CBlock block;",60937],["// Create new block",17312],["if (!block.ReadFromDisk(pindex))",12214],["// Update block",9647],["BOOST_FOREACH(const CTransaction& tx, block.vtx)",8544],["// Find the last block the caller has in the main chain",8258],["block.ReadFromDisk(pindex);",7623],["block.print();",7146],["// Get saved block",6008],["// Genesis block",5924]]},{"word":"blocks","context":[["// Deallocate old blocks since they're obsolete now",6138],["obj.push_back(Pair(\"blocks\",        (int)nBestHeight));",6068],["return blocks;",4079],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// Check the version of the last 100 blocks to see if we need to upgrade:",3943],["// Recursively process any orphan blocks that depended on this one",3820],["// Extra checks to prevent \"fill up memory by spamming with bogus blocks\"",3691],["memset(pdata + len, 0, 64 * blocks - len);",3673],["unsigned int blocks = 1 + ((len + 8) / 64);",3672],["unsigned char* pend = pdata + 64 * blocks;",3669]]},{"word":"body","context":[["if (soap->body && soap_element_end_in(soap, tag))",4121],["if (soap->body && !*soap->href)",2238],["// hand only do so within the body of existing method and function",1838],["// Read HTTP message headers and body",1813],["CreateMockRead(*body),",1788],["// Receive HTTP reply message headers and body",1753],["return body;",1715],["\"<body>\"",1366],["// quest objectives updated only for alive group member or dead but with not released body",1228],["scoped_ptr<SpdyFrame> body(spdy_util_.ConstructSpdyBodyFrame(1, true));",1228]]},{"word":"bool","context":[["bool",271107],["bool",163407],["bool found = false;",52111],["bool ok;",40942],["bool ok  = true;",39818],["bool ok = true;",33613],["static bool",28102],["bool ok = false;",26049],["bool test __attribute__((unused)) = true;",25894],["bool result = false;",21426]]},{"word":"boost","context":[["boost::this_thread::interruption_point();",40067],["using namespace boost;",39788],["#include <boost/filesystem.hpp>",33068],["#include <boost/test/unit_test.hpp>",27652],["#include <boost/foreach.hpp>",26889],["#include <boost/filesystem/fstream.hpp>",19471],["namespace fs = boost::filesystem;",18774],["#include <boost/lexical_cast.hpp>",18387],["#include <boost/bind.hpp>",17854],["#include <boost/algorithm/string.hpp>",14486]]},{"word":"both","context":[["* terms and conditions of either the GPL or the CDDL or both.",7877],["licensable by Tokutek, both currently or in the future; and that in",4293],["//  interpret --foo as -foo (as long as both are not set)",3028],["// ... both are false when called from CTransaction::AcceptToMemoryPool",2079],["// for both bitcoind and bitcoin-qt, to make it harder for attackers to",1405],["// that both that copyright notice and the limited warranty and",1133],["// Common to both DW1 & DW2",890],["// if both players are in different bgs",869],["* because both ANSI C and C++ allow castless assignment from",848],["/* The cast to (char *) in the following accommodates both",847]]},{"word":"bottom","context":[["// bottom",1613],["int left, top, right, bottom;",1237],["\"  bottom: 'data' \"",822],["rcDest.bottom -= rcDest.top;",665],["\"  bottom: 'label' \"",664],["rcDest.bottom += rcDest.top;",659],["/* The OS might guarantee only one guard page at the bottom of the stack,",591],["top = bottom;",566],["return bottom;",484],["qreal left, top, right, bottom;",467]]},{"word":"bounds","context":[["for (SkillLineAbilityMap::const_iterator _spell_idx = bounds.first; _spell_idx != bounds.second; ++_spell_idx)",3275],["for (SkillLineAbilityMap::const_iterator _spell_idx = bounds.first; _spell_idx != bounds.second; ++_spell_idx)",3275],["if (bounds.first == bounds.second)",2239],["if (bounds.first == bounds.second)",2239],["printf(\"  nActualTimespan = %\"PRI64d\"  before bounds\\n\", nActualTimespan);",2229],["return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));",2077],["const gfx::Rect& bounds,",1827],["delegate.get(), -1234, bounds, root_window()));",1796],["return bounds;",1482],["return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));",1458]]},{"word":"break","context":[["break;",13675590],["break;",2379267],["} break;",190176],["default: break;",49165],["}break;",37601],["break ;",31087],["} break;",23582],["break;}",15529],["}   break;",9843],["break; }",9762]]},{"word":"browser","context":[["#include \"chrome/browser/profiles/profile.h\"",36299],["#include \"content/public/browser/browser_thread.h\"",30636],["#include \"content/public/browser/web_contents.h\"",26274],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"chrome/browser/browser_process.h\"",17724],["#include \"content/public/browser/notification_service.h\"",16924],["#include \"chrome/browser/chrome_notification_types.h\"",11309],["#include \"content/public/browser/render_view_host.h\"",10522],["#include \"chrome/browser/extensions/extension_service.h\"",10396]]},{"word":"buf","context":[["return buf;",19531],["char buf[256];",13693],["char buf[1024];",9297],["free(buf);",8097],["delete[] buf;",6043],["return buf;",5428],["char buf[128];",5131],["delete [] buf;",4808],["char buf[256];",4753],["char buf[100];",4581]]},{"word":"buffer","context":[["return buffer;",15721],["return buffer[0];",9790],["delete[] buffer;",7323],["free(buffer);",6696],["// Don't bother if send buffer is too full to respond anyway",6084],["if (p != buffer)",6024],["char buffer[1024];",5350],["char buffer[64];",5047],["delete [] buffer;",4916],["return buffer;",4814]]},{"word":"but","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *",31446],["* hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.",20770]]},{"word":"button","context":[["ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(acceptable);",3090],["// Validate input, set Ok button to enabled when acceptable",2233],["/* disable apply button when new data loaded */",2107],["/* enable apply button when data modified */",2107],["#include <wx/button.h>",2036],["/* disable apply button after settings are loaded as there is nothing to save */",2012],["return button;",1926],["// Coin Control: button inputs -> show actual coin control dialog",1741],["// In case of modal message, use blocking connection to wait for user to click a button",1675],["#include \"ui/views/controls/button/image_button.h\"",1675]]},{"word":"by","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* it under the terms of the GNU General Public License as published by",157996],["it under the terms of the GNU General Public License as published by",124782],["* under the terms of the GNU General Public License as published by the",98768],["*  it under the terms of the GNU General Public License as published by",65655],["** General Public License version 2.1 as published by the Free Software",65406],["* License as published by the Free Software Foundation; either",57424],["* Unless required by applicable law or agreed to in writing, software",56276],["*   it under the terms of the GNU General Public License as published by  *",54072],["// terms of the GNU General Public License as published by the",50473]]},{"word":"byte","context":[["// a large 4-byte int at any alignment.",3903],["// ~65-byte public keys, plus a few script ops.",3509],["// pay-to-script-hash, which is 3 ~80-byte signatures, 3",3506],["byte*",3227],["byte*\t\tbuf;",2338],["nRewind++; // start one byte further next time, in case of failure",2009],["const byte*\tfield;",1824],["// verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)",1767],["// It operates on big endian data.  Caller does the byte reversing.",1686],["// All input buffers are 16-byte aligned.  nNonce is usually preserved",1673]]},{"word":"bytes","context":[["return bytes;",6825],["// -limitfreerelay unit is thousand-bytes-per-minute",4200],["// 10,000 orphans, each of which is at most 5,000 bytes big is",4015],["// Check for nMinDiskSpace bytes (currently 50MB)",3954],["printf(\"ProcessMessage(%s, %u bytes) FAILED\\n\", strCommand.c_str(), nMessageSize);",3439],["printf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",",3389],["printf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand.c_str(), nMessageSize, e.what());",3386],["\"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\" +",2918],["\"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\") + \"\\n\" +",2915],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\"),",2569]]},{"word":"c","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["return c;",34670],["// Copyright (c) 2009-2012 The Bitcoin developers",33536],["// Copyright (c) 2009-2010 Satoshi Nakamoto",27193],["char c;",21376],["// Copyright (c) 2011 The Chromium Authors. All rights reserved.",18204],["// Copyright (c) 2013 The Chromium Authors. All rights reserved.",16151],["int c;",15515],["// Copyright (c) 2010 Satoshi Nakamoto",15052],["case 'c':",12237]]},{"word":"c_str","context":[["printf(\"%s\\n\", strError.c_str());",17732],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["strWalletPass = params[0].get_str().c_str();",7078],["printf(\"*** %s\\n\", strMessage.c_str());",6568],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309],["printf(\"%s\", strErrors.str().c_str());",6265],["printf(\"\\n\\n************************\\n%s\\n\", message.c_str());",5669],["m_pDS->exec(strSQL.c_str());",4973],["DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());",3961],["_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, spells[i].speech.c_str());",3947]]},{"word":"cache","context":[["EXPECT_EQ(1, cache.disk_cache()->create_count());",7164],["MockHttpCache cache;",6940],["EXPECT_EQ(1, cache.network_layer()->transaction_count());",5162],["EXPECT_EQ(0, cache.disk_cache()->open_count());",5007],["EXPECT_EQ(1, cache.disk_cache()->open_count());",3857],["EXPECT_EQ(2, cache.network_layer()->transaction_count());",3821],["RunTransactionTest(cache.http_cache(), transaction);",3320],["// This can be called during exceptions by printf, so we cache the",2991],["\"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +",2900],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (default: 25)\"),",2585]]},{"word":"call","context":[["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");",6229],["\"\\nAs a json rpc call\\n\"",5361],["// call functions which may have additional effects after chainging state of unit",3994],["// non-standard. Note that this EvalScript() call will",3947],["// IsStandard() call returns false",3607],["\"After calling this method, you will need to call walletpassphrase again\\n\"",3549],["// Add to memory pool without checking anything.  Don't call this directly,",3450],["// call CTxMemPool::accept to properly check the transaction first.",3367],["// this call is allowed to fail",3348]]},{"word":"callback","context":[["TestCompletionCallback callback;",21379],["#include \"base/callback.h\"",15170],["DCHECK(!callback.is_null());",13148],["rv = callback.WaitForResult();",12781],["callback));",8692],["callback);",7531],["const CompletionCallback& callback) {",6628],["callback.Run();",6131],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917]]},{"word":"called","context":[["called = false;",14659],["BOOST_ASIO_CHECK(called);",6138],["ASIO_CHECK(called);",5115],["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["BOOST_CHECK(called);",4017],["// strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:",3944],["// This can be called during exceptions by printf, so we cache the",2991],["fflush(fileout);                // harmless if redundantly called",2961],["_1, _2, sizeof(write_data), &called));",2530],["_1, _2, sizeof(read_data), &called));",2475]]},{"word":"can","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// software; you can redistribute it and/or modify it under the",50473],["This program is free software; you can redistribute it and/or modify",46782],["This library is free software; you can redistribute it and/or",43697],["* This program is free software: you can redistribute it and/or modify",41811]]},{"word":"cannot","context":[["#error \"cannot be used with the include files from this version of Qt.\"",12708],["\"Remember that encrypting your wallet cannot fully protect \"",2204],["* preserve this copyright notice, and you cannot mention the copyright",2128],["return error(\"DisconnectBlock() : cannot restore coin inputs\");",1661],["// cannot downgrade below current version",1624],["// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)",1506],["nTotalCache = (1 << 22); // total cache cannot be less than 4 MiB",1367],["throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");",1298],["// cannot jump to a different instance without resetting it",1072],["throw runtime_error(\"amount cannot be negative.\\n\");",1016]]},{"word":"case","context":[["case 1:",241895],["case 2:",203112],["case 0:",179802],["case 3:",146278],["case 4:",106127],["case 5:",69622],["case 6:",54564],["case 8:",48382],["case 7:",45223],["case 1:",37813]]},{"word":"cast","context":[["Q_ASSERT(staticMetaObject.cast(_o));",6769],["namespace cast {",1552],["}  // namespace cast",1449],["// Remove aura (before cast for prevent infinite loop handlers)",1401],["//only for quests which cast teleport spells on player",1325],["// Remove used for cast item if need (it can be already NULL after TakeReagents call",1270],["cast(true);",1212],["// this is wrong way to implement these things. On official it done by gameobject spell cast.",1132],["? chunk_->DefineConstantOperand(HConstant::cast(value))",1068],["data << uint32(castFlags);                              // cast flags",1025]]},{"word":"caster","context":[["Unit* caster = GetCaster();",30054],["if (!caster)",18521],["if (Unit* caster = GetCaster())",17627],["if (caster)",10934],["if (!caster || caster->GetTypeId() != TYPEID_PLAYER)",3659],["if (!caster || caster->GetTypeId() != TYPEID_PLAYER)",3659],["SendTickImmune(target, caster);",3455],["Player* caster = GetCaster()->ToPlayer();",3210],["if (Player* modOwner = caster->GetSpellModOwner())",2998],["if (caster->GetTypeId() == TYPEID_PLAYER)",2859]]},{"word":"catch","context":[["catch (...)",71513],["} catch (...) {",68735],["catch(...)",40654],["catch (std::exception& e) {",34755],["catch (std::exception& e)",25163],["catch (std::exception &e) {",18854],["catch (...) {",17815],["} catch (std::exception &e) {",10313],["} catch(...) {",10142],["catch (...)",9149]]},{"word":"cc","context":[["namespace cc {",8962],["}  // namespace cc",8786],[": \"memory\", \"cc\"",2913],["#include \"cc/trees/layer_tree_impl.h\"",1917],["/* Line 661 of lalr1.cc  */",1875],["#include \"cc/layers/layer.h\"",1682],["#include \"cc/base/math_util.h\"",1595],["#include \"cc/trees/layer_tree_host.h\"",1520],["cc::skip_list::make_traits<",1186],["#include \"cc/test/fake_output_surface.h\"",1149]]},{"word":"cell","context":[["cell.SetNoCreate();",12825],["Cell cell(p);",12424],["cell.data.Part.reserved = ALL_DISTRICT;",4763],["Cell cell(pair);",3894],["for (; cell!=endc; ++cell)",3818],["for (; cell!=endc; ++cell)",3818],["fe_values.reinit (cell);",1742],["cell = dof_handler.begin_active(),",1609],["cell->get_dof_indices (local_dof_indices);",1593],["NGridType *grid = getNGrid(cell.GridX(), cell.GridY());",1405]]},{"word":"ch","context":[["switch(ch)",7880],["char ch;",7198],["switch (ch) {",4981],["default: curarg += ch;",4701],["return ch;",3990],["int ch;",3514],["switch (ch)",2605],["curarg += ch; state = STATE_DOUBLEQUOTED;",2349],["default: curarg += ch; state = STATE_ARGUMENT;",2348],["curarg += ch; state = STATE_ARGUMENT;",2348]]},{"word":"change","context":[["/* Clear status message on focus change */",4794],["// still computed and checked, and any change will be caught at the next checkpoint.",4015],["/// when NTP implemented, change to just nTime = GetAdjustedTime()",3535],["/// Note: This interface may still be subject to change.",3506],["// Only let other nodes change our time by so much",3395],["// Updating time can change work required on testnet:",2856],["// Changing pblock->nTime can change work required on testnet:",2773],["// Only change once per interval",2771],["\"made public by common use as inputs or as the resulting change\\n\"",2537],["// If lookup is -1, then use blocks since last difficulty change.",2376]]},{"word":"changed","context":[["changed = true;",17439],["emit changed();",15044],["#error \"(The moc has changed too much.)\"",12708],["bool changed = false;",8586],["return changed;",5942],["changed = true;",4759],["// The memory index structure will be changed after the db commits.",4262],["if (changed)",3610],["// used when scores of local addresses may have changed",3290],["\"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"",3047]]},{"word":"channel","context":[["// Get our external IP from the IRC server and re-nick before joining the channel",1685],["channel,",1576],["if (channel)",1476],["if (!channel)",1372],["NaClSrpcChannel* channel,",1363],["return channel;",1185],["// cast at creature (or GO) quest objectives update at successful cast finished (+channel finished)",974],["voe::Channel* channelPtr = ch.channel();",915],["if (Channel* channel = cMgr->GetChannel(channelName, GetPlayer()))",914],["voe::ChannelOwner ch = _shared->channel_manager().GetChannel(channel);",868]]},{"word":"char","context":[["int main(int argc, char *argv[])",49760],["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["char c;",21376],["int main(int argc, char** argv)",20124],["static char THIS_FILE[] = __FILE__;",15063],["char buf[256];",13693],["int main(int argc, char **argv) {",12434],["int main(int argc, char** argv) {",11840],["const char *__pyx_filename = NULL;",11244]]},{"word":"character","context":[["case 1: // 4n+1 base64 character processed: impossible",3307],["* Shift key is not down and the result is an upper case character.",3089],["* Shift key is down and the result is a lower case character, or",3089],["// do character spell book cleanup (all characters)",2682],["*   - Outside quotes, any character can be escaped",2344],["* - The backslash \\c \\ is used as escape character",2344],["// prevent character rename to invalid name",1471],["// unlearn only talents for character class",1317],["// character with this name already exist",893],["* already have been incremented past the NUL character",871]]},{"word":"check","context":[["// check online security",14252],["// sanity check",7749],["check(\"void f() {\\n\"",6771],["// 1) A remote node can quickly check if the connection is operational",4072],["check(\"void f()\\n\"",4064],["from check function */",3784],["check(\"void foo()\\n\"",3728],["// you should add code here to check that the transaction does a",3642],["/** check whether a given address is potentially local */",3638],["/** check whether a given address is in a network we can probably connect to */",3638]]},{"word":"child","context":[["return child;",4753],["if (child)",3342],["if ( child )",2597],["// Duplicate stake allowed only when there is orphan child block",2209],["if (!child)",2174],["delete child;",2163],["while (child) {",2089],["return TiXmlHandle( child );",1968],["if (child.isText())",1862],["for (QDomNode child = node.firstChild(); !child.isNull(); child = child.nextSibling()) {",1843]]},{"word":"chrome","context":[["#include \"chrome/browser/profiles/profile.h\"",36299],["#include \"chrome/common/pref_names.h\"",21912],["#include \"chrome/common/chrome_switches.h\"",21177],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"chrome/browser/browser_process.h\"",17724],["#include \"chrome/common/url_constants.h\"",14893],["#include \"chrome/browser/chrome_notification_types.h\"",11309],["#include \"chrome/browser/extensions/extension_service.h\"",10396],["#include \"chrome/common/chrome_paths.h\"",10077],["#include \"chrome/browser/ui/tabs/tab_strip_model.h\"",9895]]},{"word":"class","context":[["template<class T>",34743],["template <class T>",33845],["class Solution {",22727],["/* inherits documentation from base class */",12392],["template <class T>",10564],["template <class Type>",6355],["template<class T>",4842],["class COrphan",3843],["class CNetCleanup",3752],["template< class T, class cl_T, class fftw_T >",3730]]},{"word":"clear","context":[["clear();",64330],["clear();",7467],["result.clear();",7457],["ui->lineEdit->clear();",6423],["ui->capsLabel->clear();",6248],["mapNewBlock.clear();",6156],["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["loot->clear();",4850],["ui->statusLabel_SM->clear();",4800],["ui->statusLabel_VM->clear();",4800]]},{"word":"client","context":[["client->WaitForIdle();",35947],["client->Reset();",6974],["#include \"client.h\"",4323],["// Keep up to date with client",3816],["PVR_CLIENT client;",3746],["// do this before starting client thread, to filter out",3509],["handshake(ssl::stream_base::client); // HTTPS clients write first",3219],["CyanWorlds.com Engine - MMOG client, server and tools",2909],["// This is a more accurate fee-per-kilobyte than is used by the client code, because the",2541],["// client code rounds up the size to the nearest 1K. That's good, because it gives an",2539]]},{"word":"close","context":[["close();",46434],["file.close();",42880],["path.close();",23250],["m_pDS->close();",21546],["close(fd);",17636],["f.close();",14563],["close(fd);",8184],["\"Connection: close\\r\\n\"",7500],["pcursor->close();",6959],["this->close();",6793]]},{"word":"cmd","context":[["EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));",15035],["QString cmd;",4032],["return cmd;",3504],["\"Execute command when the best block changes (%s in cmd is replaced by block \"",3176],["if(!cmd.isEmpty())",3171],["history.append(cmd);",3115],["message(CMD_REQUEST, cmd);",3099],["cmd = history.at(historyPtr);",3095],["ui->lineEdit->setText(cmd);",3095],["QString cmd = ui->lineEdit->text();",3094]]},{"word":"code","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* 1. Redistributions of source code must retain the above copyright",35380],["* @returns VBox status code.",28471],["// Use of this source code is governed by a BSD-style license that can be",25676],["*     * Redistributions of source code must retain the above copyright",24202],["\\code",20585],["* Use of this source code is governed by a BSD-style license that can be",20089],["//     * Redistributions of source code must retain the above copyright",15393],["/* function exit code */",15158],["** This file contains pre-release code and may not be distributed.",14527]]},{"word":"col","context":[["col = 0;",3207],["col++;",3000],["int col = 0;",2617],["return col;",2577],["++col;",2165],["int row, col;",2041],["int col;",1735],["const dict_col_t*\tcol;",1278],["if (col)",1237],["if ((col >> 24) == 0)",1178]]},{"word":"color","context":[["ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");",11974],["ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");",11948],["return color;",4820],["// number or [name] Shift-click form |color|Hspell:spell_id|h[name]|h|r or Htalent form",4450],["QColor color;",3434],["color,",3315],["ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");",3272],["\"td.cmd-error { color: red; } \"",3092],["\"td.time { color: #808080; padding-top: 3px; } \"",3068],["ui->labelCoinControlChangeLabel->setStyleSheet(\"QLabel{color:red;}\");",3045]]},{"word":"column","context":[["QModelIndexList selection = view->selectionModel()->selectedRows(column);",3299],["void copyEntryData(QAbstractItemView *view, int column, int role)",3237],["switch(index.column())",3073],["fill-column:99",2901],["// name, column, role",2180],["switch (index.column()) {",1961],["column = 0;",1667],["// Set column widths",1652],["column++;",1302],["int line, column;",1294]]},{"word":"com","context":[["** Contact: Nokia Corporation (qt-info@nokia.com)",45228],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** Nokia at qt-info@nokia.com.",28466],["* Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>",24393],["*  http://aws.amazon.com/apache2.0",19798],["* Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.",14636],["* or visit www.oracle.com if you need additional information or have any",11601],["\"Host: www.google.com\\r\\n\"",7007],["* Copyright (C) 2005-2012 MaNGOS <http://getmangos.com/>",6793]]},{"word":"command","context":[["//  (12) command",4128],["// Convert strings to command-specific RPC representation",3361],["\"help [command]\\n\"",3331],["\"List commands, or get help for a command.\");",3327],["strRet = strprintf(\"help: unknown command: %s\\n\", strCommand.c_str());",3229],["// Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,",3214],["\"Execute command when the best block changes (%s in cmd is replaced by block \"",3176],["// Append command to history",3098],["void RPCExecutor::request(const QString &command)",3087],["void reply(int category, const QString &command);",3084]]},{"word":"common","context":[["#include \"chrome/common/pref_names.h\"",21912],["#include \"chrome/common/chrome_switches.h\"",21177],["#include \"chrome/common/url_constants.h\"",14893],["#include \"common.h\"",14525],["#include \"content/public/common/content_switches.h\"",11356],["#include \"chrome/common/chrome_paths.h\"",10077],["#include \"extensions/common/extension.h\"",8119],["#include \"chrome/common/chrome_notification_types.h\"",7566],["#include \"chrome/common/chrome_constants.h\"",6314],["#include \"content/public/common/url_constants.h\"",6105]]},{"word":"conditions","context":[["* modification, are permitted provided that the following conditions",49713],["*    notice, this list of conditions and the following disclaimer.",38135],["*    notice, this list of conditions and the following disclaimer in the",34920],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["furnished to do so, subject to the following conditions:",29897],["* modification, are permitted provided that the following conditions are",21256],["* notice, this list of conditions and the following disclaimer.",19798],["* copyright notice, this list of conditions and the following disclaimer",18185],["*     notice, this list of conditions and the following disclaimer.",17251],["* modification, are permitted provided that the following conditions are met:",16487]]},{"word":"config","context":[["#include \"config.h\"",116842],["#include <config.h>",19785],["#include \"config.h\"",18778],["#include <config.h>",13170],["#include <boost/config.hpp>",5336],["# include \"config.h\"",4248],["#include \"config.hpp\"",3853],["*  @pre Parameters should be parsed and config file should be read.",3647],["#include \"common/config-manager.h\"",3368],["if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";",3258]]},{"word":"connect","context":[["connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",6489],["connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));",5409],["connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));",5239],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Choose an address to connect to based on most recently seen",3760],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])",3641],["/** check whether a given address is in a network we can probably connect to */",3638],["// even when -connect or -proxy is specified",3634],["connect(",3632]]},{"word":"connection","context":[["// Each connection can only send one version message",4131],["// 1) A remote node can quickly check if the connection is operational",4072],["// Look for an existing connection",3762],["// Initiate outbound network connection",3757],["// Accept connection",3700],["* Accept and handle incoming connection.",3507],["* Sets up I/O resources to accept and handle a new connection.",3507],["mapHeadersRet[\"connection\"] = \"keep-alive\";",3394],["mapHeadersRet[\"connection\"] = \"close\";",3394],["// Make this thread recognisable as the connection opening thread",3390]]},{"word":"const","context":[["CreatureAI* GetAI(Creature* creature) const",71515],["void UpdateAI(const uint32 diff)",64808],["static const PythonQtMethodInfo* methodInfo = PythonQtMethodInfo::getCachedMethodInfoFromArgumentList(2, argumentList);",52660],["SpellScript* GetSpellScript() const",37557],["CreatureAI* GetAI(Creature* creature) const override",31512],["const GURL& url,",27019],["BOOST_FOREACH(const CTxIn& txin, tx.vin)",25617],["const CWalletTx& wtx = (*it).second;",24998],["SpellScript* GetSpellScript() const override",24695],["BOOST_FOREACH(const CTxOut& txout, wtx.vout)",21098]]},{"word":"const_iterator","context":[["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["for (AuraEffectList::const_iterator i = mTotalAuraList.begin(); i != mTotalAuraList.end(); ++i)",10449],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["SkillStatusMap::const_iterator itr = mSkillStatus.find(skill);",6646],["for (SessionMap::const_iterator itr = m_sessions.begin(); itr != m_sessions.end(); ++itr)",5401],["for (Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)",4830],["for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)",4830],["vector<t_field*>::const_iterator f_iter;",4520],["std::vector<std::vector<std::string> >::const_iterator itt;",4218],["map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);",3693]]},{"word":"contains","context":[["** This file contains pre-release code and may not be distributed.",14527],["if(langStr.contains(\"_\"))",2967],["return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));",2081],["// CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see",2028],["if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it",2004],["// undo data contains height: this is the last output of the prevout tx being spent",1996],["* This material contains CONFIDENTIAL INFORMATION that is the property of",1609],["* marked to indicate is contains 'non-military use only' components.",1609],["return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));",1463],["if (!m_createdEditors.contains(property))",933]]},{"word":"content","context":[["namespace content {",34125],["}  // namespace content",32743],["#include \"content/public/browser/browser_thread.h\"",30636],["#include \"content/public/browser/web_contents.h\"",26274],["using content::BrowserThread;",23305],["content::NotificationService::AllSources());",22780],["#include \"content/public/browser/notification_service.h\"",16924],["// content:",16108],["const content::NotificationSource& source,",14935],["const content::NotificationDetails& details) {",12694]]},{"word":"contents","context":[["* The contents of this file may alternatively be used under the terms",7877],["* Alternatively, the contents of this file may be used under the terms of",5918],["* The contents of this file are subject to the Mozilla Public License Version",5709],["Nan::ThrowError(\"Array contents invalid.\");",5438],["otherwise run, modify, and propagate the contents of THIS",4293],["// unspecified (HTTP errors and contents of 'error').",3455],["\"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"",3105],["std::string contents;",2259],["content::WebContents* contents =",1870],["* the contents of this software, in whole or in part, without the prior written",1609]]},{"word":"context","context":[["if (context)",10617],["ssl::context& context,",10503],["ssl::context& context,",10503],["LocalContext context;",8283],["RPCListen(acceptor, context, fUseSSL);",6917],["ssl::context context(io_service, ssl::context::sslv23);",5389],["ssl::context context(io_service, ssl::context::sslv23);",5389],["ssl::context context(io_service, ssl::context::sslv23);",5389],["context.set_options(ssl::context::no_sslv2);",5258],["context.set_options(ssl::context::no_sslv2);",5258]]},{"word":"continue","context":[["continue;",2721564],["continue;",383184],["if ((ifa->ifa_flags & IFF_UP) == 0) continue;",3735],["if (ifa->ifa_addr == NULL) continue;",3724],["if (strcmp(ifa->ifa_name, \"lo0\") == 0) continue;",3718],["if (strcmp(ifa->ifa_name, \"lo\") == 0) continue;",3718],["// this situation and push another getblocks to continue.",3600],["error = true; continue;",3366],["if(!spells[i].perctrigger) continue;",2961],["continue ;",2866]]},{"word":"control","context":[["return TRUE;  // return TRUE unless you set the focus to a control",4611],["// TODO: Add your control notification handler code here",4538],["if (control)",2629],["// ignore for remote control state",2240],["control.Add(vChecks);",2029],["if (!control.Wait())",2017],["CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);",2011],["//   receiving data. This means properly utilizing TCP flow control signalling.",1787],["// Coin Control: button inputs -> show actual coin control dialog",1741],["// actual coin control calculation",1740]]},{"word":"copy","context":[["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* You should have received a copy of the GNU General Public License along",105989],["*  You should have received a copy of the GNU General Public License",68451],["// You should have received a copy of the GNU General Public License along",51550],["You should have received a copy of the GNU General Public License",45757],["* You may obtain a copy of the License at",45664],["* You should have received a copy of the GNU General Public License",45078],["// You should have received a copy of the GNU General Public License",35376],["Permission is hereby granted, free of charge, to any person obtaining a copy",30067]]},{"word":"copyright","context":[["* 1. Redistributions of source code must retain the above copyright",35380],["* 2. Redistributions in binary form must reproduce the above copyright",35214],["The above copyright notice and this permission notice shall be included in",28001],["*     * Redistributions of source code must retain the above copyright",24202],["* copyright notice, this list of conditions and the following disclaimer",18185],["//     * Redistributions of source code must retain the above copyright",15393],["A detailed list of copyright holders can be found in the file \"AUTHORS\".",15333],["* The above copyright notice and this permission notice shall be included in",13555],["**   * Redistributions in binary form must reproduce the above copyright",13144],["**   * Redistributions of source code must retain the above copyright",13144]]},{"word":"core","context":[["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"",57878],["PyObject *module = PyImport_ImportModule((char*) \"ns.core\");",10290],["#include \"core/dom/Document.h\"",10270],["#include <aws/core/utils/StringUtils.h>",8567],["#include <aws/core/utils/json/JsonSerializer.h>",8399],["#include <aws/core/utils/memory/stl/AWSStringStream.h>",6712],["#include <aws/core/utils/xml/XmlSerializer.h>",6206],["#include \"third_party/skia/include/core/SkBitmap.h\"",5886],["#include \"core/frame/LocalFrame.h\"",5776],["#include <aws/core/AmazonWebServiceResult.h>",5476]]},{"word":"could","context":[["// minimum amount of work that could possibly be required nTime after",3653],["// script can be anything; an attacker could use a very",3608],["printf(\"Loading addresses from DNS seeds (could take a while)\\n\");",3160],["printf(\"SHGetSpecialFolderPathA() failed, could not obtain requested path.\\n\");",2841],["// could not send full message; stop sending more",2014],["InitError(_(\"Error: could not start node\"));",1697],["// could get full length name at index 10, but would be different from join messages",1692],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: could not start node\"),",1478],["// minimum amount of stake that could possibly be required nTime after",815],["// maximum nBits value could possible be required nTime after",811]]},{"word":"count","context":[["++count;",104481],["uint32 count = 0;",77468],["count++;",66782],["int count = 0;",46673],["return count;",37760],["if (count == 0)",28758],["count = 0;",26854],["*no_space_count = count + no_similar_count;",23387],["count++;",15726],["if (mapArgs.count(strArg))",13728]]},{"word":"cout","context":[["cout << endl;",62961],["std::cout << std::endl;",38943],["using std::cout;",15160],["cout << endl;",12927],["cout<<endl;",11173],["cout << \"\\n\";",8236],["std::cout << std::endl;",6214],["std::cout",6176],["std::cout << \"\\n\";",5672],["cout.flush();",5047]]},{"word":"cpp","context":[["// memdbgon must be the last include file in a .cpp file!!!",8678],["// stdafx.cpp : source file that includes just the standard includes",7991],["// vim: ft=cpp:expandtab:ts=8:sw=4:softtabstop=4:",5505],["This file is part of cpp-ethereum.",2785],["cpp-ethereum is free software: you can redistribute it and/or modify",2785],["along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>.",2763],["cpp-ethereum is distributed in the hope that it will be useful,",2748],["//  main.cpp",2561],["// If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()",2084],["// ensure we leave the Qt main loop for a clean GUI exit (Shutdown() is called in bitcoin.cpp afterwards)",1740]]},{"word":"create","context":[["\"If the file does not exist, create it with owner-readable-only file \"",6171],["// Constant stuff for coinbase transactions we create:",3753],["\"If the file does not exist, create it with owner-readable-only file permissions.\"),",3565],["// Minimum block size you want to create; block will be filled with free transactions",2759],["// Largest block you're willing to create:",2743],["QObject *object = component.create();",2673],["virtual Item *create(THD *thd, Item *arg1);",2544],["// incentive to create smaller transactions.",2542],["\"If the file does not exist, create it with owner-readable-only file permissions.\\n\"",2204],["// get current incomplete message, or create a new one",2015]]},{"word":"created","context":[["FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.",3749],["* Portions created by the Initial Developer are Copyright (C) 1998",2214],["// created by AppInit() or the Qt main() function.",1959],["// There is a free transaction area in blocks created by most miners,",1655],["// These are created by StartRPCThreads, destroyed in StopRPCThreads",1633],["// Select row for newly created address",1567],["// Select row of newly created address, once",1538],["This signal is emitted whenever a property created by this manager",1412],["bool created = false;",1313],["ASSERT_TRUE(created);",1151]]},{"word":"creature","context":[["CreatureAI* GetAI(Creature* creature) const",71515],["CreatureAI* GetAI(Creature* creature) const override",31512],["instance = creature->GetInstanceScript();",19110],["CreatureAI* GetAI(Creature* creature) const OVERRIDE",16154],["bool OnGossipHello(Player* player, Creature* creature)",10665],["if (!creature)",10351],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["switch (creature->GetEntry())",7423],["if (creature)",7370]]},{"word":"cs","context":[["LOCK(cs);",32779],["LOCK(mempool.cs);",19599],["static CCriticalSection cs;",5249],["LOCK2(cs_main, mempool.cs);",4038],["CHARSET_INFO *cs= system_charset_info;",2745],["Lock l(cs);",1531],["ViEChannelManagerScoped cs(*(shared_data_->channel_manager()));",1487],["LOCK2(mempool.cs, pfrom->cs_filter);",1468],["auto &tc = cs.getTypeChecker();",1376],["ViEChannel* vie_channel = cs.Channel(video_channel);",1314]]},{"word":"ctx","context":[["(void)ctx;",11047],["WalletModel::UnlockContext ctx(model->requestUnlock());",4529],["SHA256_CTX ctx;",3710],["SHA256_Init(&ctx);",3693],["SHA256_Update(&ctx, data, sizeof(data));",3631],["ctx.h[i] = ((uint32_t*)pinit)[i];",3623],["((uint32_t*)pstate)[i] = ctx.h[i];",3623],["ctx.endSection();",3562],["if(!ctx.isValid())",2823],["if (!ctx.isValid())",2454]]},{"word":"cuda","context":[["#include \"cuda.h\"",579],["#include <cuda.h>",413],["cv::cuda::GpuMat dst;",376],["cuda = lmp->cuda;",303],["cuda = lmp->cuda;",303],["if(cuda == NULL)",301],["// External functions from cuda library for atom decomposition",284],["if(not cuda->finished_setup || cuda->oncpu)",282],["if(not cuda->finished_setup || cuda->oncpu)",282],["# 60 \"/usr/local/cuda4.1/cuda/include/builtin_types.h\" 2 3",234]]},{"word":"cuda4","context":[["# 60 \"/usr/local/cuda4.1/cuda/include/builtin_types.h\" 2 3",234],["# 1 \"/usr/local/cuda4.1/cuda/include/crt/host_runtime.h\" 1 3",156],["# 1 \"/usr/local/cuda4.1/cuda/include/vector_types.h\" 1 3",156],["# 1 \"/usr/local/cuda4.1/cuda/include/builtin_types.h\" 1 3",156],["# 86 \"/usr/local/cuda4.1/cuda/include/cufft.h\"",138],["# 116 \"/usr/local/cuda4.1/cuda/include/cufft.h\"",138],["# 145 \"/usr/local/cuda4.1/cuda/include/cufft.h\"",138],["# 976 \"/usr/local/cuda4.1/cuda/include/cuda.h\"",134],["# 254 \"/usr/local/cuda4.1/cuda/include/cuda.h\"",134],["# 914 \"/usr/local/cuda4.1/cuda/include/cuda.h\"",134]]},{"word":"current","context":[["base::MessageLoop::current()->RunUntilIdle();",17813],["base::MessageLoop::current()->Run();",11152],["base::MessageLoop::current()->PostTask(",10421],["MessageLoop::current()->Run();",10348],["content::NotificationService::current()->Notify(",10070],["MessageLoop::current()->RunAllPending();",5999],["return current;",5638],["MessageLoop::current()->PostTask(",5255],["MessageLoop::current()->RunUntilIdle();",5081],["base::MessageLoop::current()->PostDelayedTask(",4932]]},{"word":"cursor","context":[["QTextCursor cursor = textCursor();",2867],["cursor.endEditBlock();",2434],["cursor.beginEditBlock();",2427],["++cursor;",2255],["setTextCursor(cursor);",1969],["// Get cursor",1934],["cursor.insertBlock();",1775],["return cursor;",1474],["cursor.removeSelectedText();",1347],["rec = btr_cur_get_rec(cursor);",1301]]},{"word":"cx","context":[["JSObject *obj = JS_THIS_OBJECT(cx, vp);",15958],["JS_SET_RVAL(cx, vp, JSVAL_VOID);",12690],["jsval *argv = JS_ARGV(cx, vp);",11728],["JS::RootedObject obj(cx, args.thisv().toObjectOrNull());",9812],["JS_SET_RVAL(cx, vp, jsret);",9800],["JSB_PRECONDITION2(ok, cx, false, \"Error processing arguments\");",3831],["jsval *argvp = JS_ARGV(cx,vp);",3818],["JSB_PRECONDITION2(ok, cx, JS_FALSE, \"Error processing arguments\");",3710],["CHECK_REQUEST(cx);",3101],["JSB_PRECONDITION2( arg0, cx, false, \"Invalid Native Object\");",2445]]},{"word":"d","context":[["delete d;",42305],["return d;",15062],["case 'd':",12202],["TestDelegate d;",11329],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["double d;",7228],["case 'd':",6931],["if (!d)",6019],["if (d)",4785],["d = 0;",4667]]},{"word":"damage","context":[["damage = 0;",15054],["// the use of this software, even if advised of the possibility of such damage.",3811],["if (damage < 0)",3809],["return damage;",3709],["basepoints0 = CalculatePct(int32(damage), triggerAmount);",3594],["if (damage >= me->GetHealth())",3281],["damageInfo->damage = 0;",3251],["if (damage > 0)",2803],["// check damage school mask",2658],["basepoints0 = CalculatePctN(int32(damage), triggerAmount);",2451]]},{"word":"data","context":[["SendPacket(&data);",70025],["GetSession()->SendPacket(&data);",68626],["data << uint32(0);",52701],["WorldPacket data;",41021],["return data;",29418],["SendMessageToSet(&data, true);",17935],["data << uint8(0);",16649],["if (!data)",15940],["player->GetSession()->SendPacket(&data);",14679],["data.append(GetPackGUID());",10744]]},{"word":"database","context":[["throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");",5015],["/* Prepare database */",3291],["\"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +",2900],["// database.",2827],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (default: 25)\"),",2585],["database.Open();",2395],["// Note: maintaining indices in the database of (account,time) --> txid and (account, time) --> acentry",2226],["// Verify that the web database has been updated and the notification sent.",2125],["// Pushing a new one to the database can cause it to be written",2011],["// Use the provided setting for -txindex in the new database",2008]]},{"word":"db","context":[["#include \"db.h\"",20143],["// The memory index structure will be changed after the db commits.",4262],["db.Close();",3421],["// Reorganize is costly in terms of db load, as it works in a single db transaction.",2069],["// Reorganize is costly in terms of db load, as it works in a single db transaction.",2069],["if (db.Open())",2028],["CVideoDatabase db;",1940],["QSqlQuery query(db);",1875],["nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB",1818],["db.close();",1752]]},{"word":"deal","context":[["of this software and associated documentation files (the \"Software\"), to deal",29279],["// The deal.II library is free software; you can use it, redistribute",17668],["// the top level of the deal.II distribution.",17668],["// This file is part of the deal.II library.",17668],["* of this software and associated documentation files (the \"Software\"), to deal",14059],["#include <deal.II/base/logstream.h>",9653],["#include <deal.II/grid/grid_generator.h>",7815],["* to deal in the Software without restriction, including without limitation",7653],["#include <deal.II/grid/tria.h>",7264],["// to deal in the Software without restriction, including without limitation",7104]]},{"word":"debug","context":[["//// debug print",15925],["#include \"debug.h\"",13705],["if (debug)",13176],["/// debug print",10182],["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922],["#include \"base/debug/trace_event.h\"",5502],["if (debug) {",4535],["// Reopen debug.log on SIGHUP",3658],["// Scroll debug.log if it's getting too big",3469],["boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";",3418]]},{"word":"default","context":[["default:",1594455],["default:",356081],["default: break;",49165],["default: {",25241],["default: {",24997],["default :",18535],["default: ;",13287],["default: return 0;",10509],["default: to.add(\"}\"); types.pop_back(); vtypes.pop_back(); stages.pop_back(); flags.pop_back(); break;",7294],["default: NOT_REACHED();",6682]]},{"word":"define","context":[["#define new DEBUG_NEW",21868],["#define NOMINMAX",8510],["#define _WIN32_WINNT 0x0501",7079],["#define DO_(EXPRESSION) if (!(EXPRESSION)) return false",7053],["#define WIN32_LEAN_AND_MEAN 1",7026],["#define _WIN32_IE 0x0501",6575],["#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure",5974],["#define WIN32_LEAN_AND_MEAN",5974],["#define QT_MOC_LITERAL(idx, ofs, len) \\",4772],["#define printf OutputDebugStringF",4688]]},{"word":"defined","context":[["#if defined(OS_WIN)",80948],["#if defined(OS_CHROMEOS)",50347],["#if defined(OS_MACOSX)",33699],["#if defined(OS_ANDROID)",31294],["#if defined(WIN32)",13225],["#if defined(_DERIVATE)",13063],["#if !defined(Q_MOC_OUTPUT_REVISION)",12350],["#if !defined(OS_ANDROID)",10309],["#if defined(OS_POSIX)",10213],["#if defined(ENABLE_EXTENSIONS)",9944]]},{"word":"delete","context":[["delete result;",57987],["delete ui;",56686],["delete d;",42305],["delete this;",34437],["delete this;",22176],["delete targets;",18152],["delete conn;",14037],["delete itr->second;",13423],["delete m;",12679],["delete item;",12465]]},{"word":"dest","context":[["ItemPosCountVec dest;",26174],["return dest;",6526],["CTxDestination dest = address.Get();",4407],["Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);",4003],["uint16 dest;",3947],["ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));",3892],["Object operator()(const CNoDestination &dest) const { return Object(); }",3343],["return MoveFileExA(src.string().c_str(), dest.string().c_str(),",3333],["int rc = std::rename(src.string().c_str(), dest.string().c_str());",3332],["bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)",3327]]},{"word":"details","context":[["* GNU General Public License for more details.",218620],["GNU General Public License for more details.",156688],["* more details.",100721],["*  GNU General Public License for more details.",68934],["// GNU General Public License for more details.",60759],["* GNU General Public License for more details.",48968],["GNU General Public License for more details.",39941],["// GNU General Public License for more details.",39037],["* Lesser General Public License for more details.",31816],["* Library General Public License for more details.",30670]]},{"word":"device","context":[["// IOStream device that speaks SSL but can also speak non-SSL",3219],["class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {",3212],["//  device_start - device-specific startup",2424],["out.device()->seek(0);",2079],["delete device;",2010],["return device;",2004],["* @param   pDevIns     The device instance.",1899],["CPaintDC dc(this); // device context for painting",1858],["namespace device {",1517],["//  device_reset - device-specific reset",1491]]},{"word":"diff","context":[["void UpdateAI(const uint32 diff)",64808],["events.Update(diff);",27578],["void UpdateAI(uint32 diff) override",23247],["void UpdateAI(uint32 const diff)",12025],["void UpdateAI(uint32 diff) OVERRIDE",11565],["void UpdateAI(uint32 diff)",10770],["_events.Update(diff);",10149],["npc_escortAI::UpdateAI(diff);",7171],["if (std::abs(diff) > max_abs_diff)",5761],["max_abs_diff = std::abs(diff);",5761]]},{"word":"different","context":[["// The nonce stops the remote getting confused between different pings: without",4072],["// Calculate total balance a different way from GetBalance()",3569],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["// peer might be an older or different implementation with",2940],["// a different signature key, etc.",2940],["// creating a different genesis block:",1951],["// could get full length name at index 10, but would be different from join messages",1692],["// Note that GetDataDir(true) returns a different path",1537],["If you wish to redistribute ARIA under different terms, contact",1290],["// cannot jump to a different instance without resetting it",1072]]},{"word":"dim","context":[["template <int dim>",33308],["template <int dim, int spacedim>",17141],["template<int dim>",5993],["for (unsigned int d=0; d<dim; ++d)",3595],["template<int dim, int spacedim>",2862],["switch (dim)",2141],["typename DoFHandler<dim>::active_cell_iterator",1844],["Triangulation<dim> tr;",1714],["for (unsigned int i=0; i<dim; ++i)",1638],["virtual double value (const Point<dim>   &p,",1503]]},{"word":"dir","context":[["closedir(dir);",3710],["myDir = dir;",3594],["if(dir.isEmpty()) // Default to user documents location",3582],["return dir;",3327],["QDir dir;",3253],["const QString &dir,",3078],["\"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +",2920],["dir.Normalize();",1767],["VectorNormalize( dir );",1584],["QDir dir(path);",1581]]},{"word":"directory","context":[["See the README file in the top-level LAMMPS directory.",8796],["*  LICENSE file in the root directory of this source tree. An additional grant",5816],["*  of patent rights can be found in the PATENTS file in the same directory.",5816],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["// find a copy of this license in LICENSE.txt in the top directory of",4015],["*  LICENSE:     See LICENSE in the top level directory",3887],["syncable::ReadTransaction trans(FROM_HERE, directory());",3559],["//  LICENSE file in the root directory of this source tree. An additional grant",3433],["//  of patent rights can be found in the PATENTS file in the same directory.",3433],["\"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");",3152]]},{"word":"disclaimer","context":[["*    notice, this list of conditions and the following disclaimer.",38135],["*    notice, this list of conditions and the following disclaimer in the",34920],["* notice, this list of conditions and the following disclaimer.",19798],["* copyright notice, this list of conditions and the following disclaimer",18185],["*     notice, this list of conditions and the following disclaimer.",17251],["**     notice, this list of conditions and the following disclaimer.",13143],["**     notice, this list of conditions and the following disclaimer in",12783],["notice, this list of conditions and the following disclaimer.",12507],["*     notice, this list of conditions and the following disclaimer in the",12094],["// notice, this list of conditions and the following disclaimer.",10876]]},{"word":"display","context":[["// update the display unit, to not use the default (\"BTC\")",5742],["// Notify UI to display prev block's coinbase if it was ours",3780],["// this license (the \"Software\") to use, reproduce, display, distribute,",3311],["/** display language strings as \"language - country (locale name)\", e.g. \"German - Germany (de)\" */",2969],["/** display language strings as \"language (locale name)\", e.g. \"German (de)\" */",2969],["/** display language strings as \"native language (locale name)\", e.g. \"Deutsch (de)\" */",2964],["/** display language strings as \"native language - native country (locale name)\", e.g. \"Deutsch - Deutschland (de)\" */",2964],["// if chkReqPayment is not active, don't display lnReqAmount as invalid",2357],["#include \"ui/gfx/display.h\"",2282],["/* update the display unit, to not use the default (\"BTC\") */",1807]]},{"word":"distributed","context":[["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This library is distributed in the hope that it will be useful,",61321],["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["// This library is distributed in the hope that it will be useful,",51633],["This library is distributed in the hope that it will be useful,",42670],["// This program is distributed in the hope that it will be useful,",36972],["*  This program is distributed in the hope that it will be useful,",36344]]},{"word":"distribution","context":[["*    documentation and/or other materials provided with the distribution.",34821],["* file distributed with this source distribution.",20872],["* VirtualBox OSE distribution. VirtualBox OSE is distributed in the",20770],["* distribution.",20627],["// the top level of the deal.II distribution.",17668],["**     distribution.",12783],["*     documentation and/or other materials provided with the distribution.",12503],["// distribution.",11153],["documentation and/or other materials provided with the distribution.",9326],["and/or other materials provided with the distribution.",8396]]},{"word":"do","context":[["do",276712],["do {",231047],["do {",61986],["do",31843],["furnished to do so, subject to the following conditions:",29897],["do{",17097],["* furnished to do so, subject to the following conditions:",15849],["// do nothing",14590],["// { dg-do compile }",13529],["// furnished to do so, subject to the following conditions:",10878]]},{"word":"doc","context":[["//\t@doc:",16091],[")doc\");",9391],[".Doc(R\"doc(",9290],["QDomDocument doc;",7063],["return doc;",3362],["See MSDN doc.",2722],["delete doc;",2713],["// See https://qt-project.org/doc/qt-4.8/gallery.html",2375],["if (!doc)",2119],["TiXmlDocument doc;",1953]]},{"word":"document","context":[["TiXmlDocument* document = GetDocument();",3398],["if (!document)",3209],["ui->messagesWidget->document()->addResource(",3094],["ui->messagesWidget->document()->setDefaultStyleSheet(",3093],["ss << ui->messageIn_SM->document()->toPlainText().toStdString();",2398],["ss << ui->messageIn_VM->document()->toPlainText().toStdString();",2398],["* This file is part of LyX, the document processor.",2261],["ASSERT(document);",2093],["#include \"document.h\"",1976],["document().updateLayoutIgnorePendingStylesheets();",1922]]},{"word":"documentation","context":[["*    documentation and/or other materials provided with the distribution.",34821],["of this software and associated documentation files (the \"Software\"), to deal",29279],["* in the documentation and/or other materials provided with the",18194],["* of this software and associated documentation files (the \"Software\"), to deal",14059],["**     the documentation and/or other materials provided with the",12783],["*     documentation and/or other materials provided with the distribution.",12503],["/* inherits documentation from base class */",12392],["// in the documentation and/or other materials provided with the",10822],["documentation and/or other materials provided with the distribution.",9326],["this list of conditions and the following disclaimer in the documentation",7971]]},{"word":"does","context":[["\"If the file does not exist, create it with owner-readable-only file \"",6171],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");",4984],["CLAIMS.  This grant does not include claims that would be infringed",4293],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["// The first loop above does all the inexpensive checks.",4053],["// you should add code here to check that the transaction does a",3642],["\"If the file does not exist, create it with owner-readable-only file permissions.\"),",3565],["strprintf(\"%s does not refer to a key\",ks.c_str()));",2930],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");",2356],["\"If the file does not exist, create it with owner-readable-only file permissions.\\n\"",2204]]},{"word":"doesn","context":[["// This doesn't trigger the DoS code on purpose; if it did, it would make it easier",4076],["list<COrphan> vOrphan; // list memory doesn't move",3852],["return error(\"CheckProofOfWork() : hash doesn't match nBits\");",3769],["FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.",3749],["return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");",3450],["// Let the peer know that we didn't find what it asked for, so it doesn't",2145],["//// issue here: it doesn't know the version",2117],["/* warn only when language selection changes by user action (placed here so init via mapper doesn't trigger this) */",2016],["// Win32 LevelDB doesn't use filedescriptors, and the ones used for",1839],["//  backup is restored, if the backup doesn't have the new private key for the change.",1702]]},{"word":"don","context":[["// Parse the account first so we don't generate a key if there's an error",8026],["// Be shy and don't send version until we hear",4380],["// Basic checks that don't depend on any context",4126],["return true; // Coinbases don't use vin normally",3971],["// Relay inventory, but don't relay old inventory during initial block download",3784],["// Do this here so we don't have to critsect vNodes inside mapAddresses critsect.",3755],["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["// value so we don't have to do memory allocations after that.",3483],["// we don't need transactions here.",3357],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348]]},{"word":"done","context":[["goto done;",20760],["__ bind(&done);",17878],["done = true;",17627],["Label done;",12939],["goto done;",10026],["bool done = false;",9856],["done:",9489],["__ jmp(&done);",6452],["// no changes, quest can't be done for this requirement",6186],["done = false;",5212]]},{"word":"double","context":[["double",18728],["double",17774],["double **x = atom->x;",9940],["double result;",9056],["double d;",7228],["double x;",6476],["p_out += sizeof( double );",6048],["double value;",6026],["double dPriority = 0;",5560],["obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));",5332]]},{"word":"dst","context":[["return dst;",7601],["if (IsInventoryPos(dst))",4285],["emit_sse_operand(dst, src);",3697],["else if (IsEquipmentPos(dst))",3642],["else if (IsBankPos(dst))",3642],["dst++;",2913],["emit_optional_rex_32(dst, src);",2521],["emit_operand(dst, src);",2089],["emit_operand(dst, src);",1898],["return dst;",1754]]},{"word":"e","context":[["catch (std::exception& e) {",34755],["catch (std::exception& e)",25163],["catch (std::exception &e) {",18854],["ObjectList* targets = GetTargets(e, unit);",18172],["return e;",14466],["e->accept();",13735],["e->ignore();",12421],["deallog.threshold_double(1.e-10);",10672],["} catch (std::exception &e) {",10313],["// ----------- S t a t e -------------",10046]]},{"word":"each","context":[["// seconds to respond to each, the 5th ping the remote sends would appear to",4073],["// 10,000 orphans, each of which is at most 5,000 bytes big is",4015],["// Service each socket",3760],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["\"Results are an array of Objects, each of which has:\\n\"",2566],["tr(\"Duplicate address found, can only send to each address once per send operation.\"),",1786],["switch (Rank)                                           // define rates for each elite rank",1740],["* OpenSSL library under certain conditions as described in each",1497],["// group all input addresses with each other",1329]]},{"word":"effect","context":[["if (!effect)",2443],["// stop handling the effect if it was removed by linked event",1879],["// resilience reduce mana draining effect at spell crit damage reduction (added in 2.4)",1858],["if (itr->effectMask & (1 << effect))",1713],["for (SpellEffectInfo const* effect : GetEffects())",1687],["// Chance resist mechanic (select max value from every mechanic spell effect)",1465],["// prepare visual effect for levelup",1264],["// Eviscerate and Envenom Bonus Damage (item set effect)",1262],["// visual effect for levelup",1255],["tr(\"Some settings may require a client restart to take effect.\") + \"<br><br>\" + tr(\"Do you want to proceed?\"),",1172]]},{"word":"either","context":[["* Free Software Foundation; either version 2 of the License, or (at your",85385],["the Free Software Foundation, either version 3 of the License, or",82946],["* the Free Software Foundation; either version 2 of the License, or",81953],["* the Free Software Foundation, either version 3 of the License, or",68454],["* License as published by the Free Software Foundation; either",57424],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["*   the Free Software Foundation; either version 2 of the License, or     *",48756],["* as published by the Free Software Foundation; either version 2",47322],["// Free Software Foundation; either version 3, or (at your option)",44217],["License as published by the Free Software Foundation; either",44163]]},{"word":"element","context":[["return element;",4164],["if (!element)",3153],["ASSERT(element);",2829],["if (element)",2100],["reader.raiseError(QLatin1String(\"Unexpected element \") + tag);",1420],["setmap[element] = merged;",1329],["BOOST_FOREACH(CTxDestination element, *merged)",1323],["if (element) {",1059],["switch (element) {",1034],["<< \" Error: Wrong element found\\n\"",960]]},{"word":"elements","context":[["/* Display elements init */",2979],["/* Network elements init */",2971],["/* Window elements init */",2970],["// We're going to call functions which can modify content of the list during iteration over it's elements",2377],["/* setup/change UI elements when proxy IP is invalid/valid */",2190],["Parent elements:",2056],["Child elements:",1711],["arg_count= item_list->elements;",1184],["Register elements = ToRegister(instr->elements());",1055],["Register elements = ToRegister(instr->elements());",1055]]},{"word":"else","context":[["else",8709424],["} else {",3674043],["} else {",1656484],["#else",1403618],["else",1132903],["else {",988989],["#else",340744],["} else",313398],["}else{",161792],["else {",153717]]},{"word":"emit","context":[["emit changed();",15044],["emit finished();",4121],["emit(0x0F);",3399],["emit dataChanged(index, index);",3313],["emit removeEntry(this);",3138],["emit stopExecutor();",3020],["emit cmdRequest(cmd);",3014],["emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));",3006],["emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));",3006],["emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));",2994]]},{"word":"empty","context":[["if (!unknown_fields().empty()) {",26622],["if (!vRecv.empty())",12542],["if (vNodes.empty())",12429],["if (name.empty())",11153],["if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())",7128],["if (stack.empty())",6302],["if (str.empty())",5044],["if (targets.empty())",4840],["if (!vInv.empty())",4125],["if (!vAddr.empty())",4123]]},{"word":"enabled","context":[["if (enabled)",4296],["ui->deleteButton->setEnabled(enabled);",2976],["void SendCoinsEntry::setRemoveEnabled(bool enabled)",2827],["if (enabled) {",2335],["enabled = false;",2305],["// Validate input, set Ok button to enabled when acceptable",2233],["enabled = true;",2110],["entry->setRemoveEnabled(enabled);",1962],["bool enabled = (ui->entries->count() > 1);",1827],["// Remove buttons are enabled as soon as there is more than one send-entry",1826]]},{"word":"end","context":[["goto end;",38378],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["} //end if",22187],["if (mi == mapBlockIndex.end())",18521],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["end:",13683],["goto end;",12527],["for (AuraEffectList::const_iterator i = mTotalAuraList.begin(); i != mTotalAuraList.end(); ++i)",10449],["} // end anonymous namespace",9887],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698]]},{"word":"endif","context":[["#endif",5763262],["#endif",1357637],["# endif",49936],["#endif // DEBUG",29896],["#  endif",23459],["#endif /* UNIV_DEBUG */",20258],["//#endif",20036],["# endif",19042],["#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */",14718],["#   endif",12661]]},{"word":"endl","context":[["cout << endl;",62961],["<< std::endl;",48560],["<< std::endl;",39140],["std::cout << std::endl;",38943],["<< endl;",34833],["<< endl;",18717],["using std::endl;",16869],["cout << endl;",12927],["cout<<endl;",11173],["std::cerr << std::endl;",10379]]},{"word":"engine","context":[["#include \"engine.h\"",2673],["QQmlEngine engine;",2172],["return qScriptValueFromValue(engine, ret);",2167],["/* xoreos - A reimplementation of BioWare's Aurora engine",1663],["delete engine;",1614],["#include \"engine/IEngineSound.h\"",1600],["if (!d->engine) {",1583],["return engine;",1364],["//         Stratagus - A free fantasy real time strategy game engine",1105],["QDeclarativeEngine engine;",1102]]},{"word":"ent","context":[["if ( !ent )",4002],["gentity_t\t*ent  = &g_entities[entID];",3167],["attrNames = ent.getField(\"attrNames\").Array();",2914],["attrs = ent.getField(\"attrs\").embeddedObject();",2914],["idEntity *ent;",2877],["EXPECT_FALSE(ent.hasField(\"modDate\"));",2106],["EXPECT_STREQ(\"E1\", C_STR_FIELD(ent.getObjectField(\"_id\"), \"id\"));",1727],["if ( !ent->NPC )",1710],["if ( ent->NPC == NULL )",1509],["gi.linkentity( ent );",1274]]},{"word":"entries","context":[["for(int i = 0; i < ui->entries->count(); ++i)",10076],["SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());",9629],["// (keeping in mind that addnode entries can have many IPs if fNameLookup)",3611],["// Tally internal accounting entries",3572],["if(ui->entries->count() == 1)",3322],["// remove real entries and check existence loot",3265],["SendCoinsEntry *first = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(0)->widget());",3221],["\" or address book entries might be missing or incorrect.\"));",2724],["log.GetEntries(&entries);",2654],["\"data or address book entries might be missing or incorrect.\"),",2292]]},{"word":"entry","context":[["Object entry;",21960],["return entry;",15007],["ret.push_back(entry);",12213],["WalletTxToJSON(wtx, entry);",11987],["if (!entry)",11505],["uint32 entry = fields[0].GetUInt32();",11272],["if(entry)",10817],["SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());",9629],["entry->Close();",7832],["entry->setModel(model);",4558]]},{"word":"enum","context":[["enum",37760],["enum {",30017],["enum Spells",25018],["enum Events",13498],["enum Yells",9555],["enum {",7191],["enum Creatures",4338],["typedef enum {",4092],["enum eEnums",3916],["enum Texts",3915]]},{"word":"env","context":[["JNIEnv* env = AttachCurrentThread();",11206],["LocalContext env;",7918],["JNIEnv* env,",7503],["JNIEnv* env = base::android::AttachCurrentThread();",6474],["v8::HandleScope scope(env->GetIsolate());",5366],["if( !type_engine_import_mfun( env, func ) ) goto error;",4987],["return RegisterNativesImpl(env);",4083],["JNIEnv* env, jobject jobj, jlong jhandle) {",4048],["env,",3605],["#include \"ui/aura/env.h\"",3099]]},{"word":"erase","context":[["mapAlreadyAskedFor.erase(inv);",9443],["pto->mapAskFor.erase(pto->mapAskFor.begin());",4132],["porphan->setDependsOn.erase(hash);",3847],["mapOrphanBlocksByPrev.erase(hashPrev);",3802],["vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());",3752],["mapNextTx.erase(txin.prevout);",3663],["m_spells.erase(itr);",3588],["mapTx.erase(hash);",3552],["mapOrphanBlocks.erase(pblockOrphan->GetHash());",3467],["setpwalletRegistered.erase(pwalletIn);",3466]]},{"word":"err","context":[["goto err;",108091],["return err;",48212],["err:",24489],["return(err);",23149],["if (err != DB_SUCCESS) {",13596],["int err;",11024],["if (err)",10765],["return err;",9303],["goto err;",8050],["if (err) {",7644]]},{"word":"errno","context":[["#include <errno.h>",40603],["#include <errno.h>",21081],["errno = 0;",12912],["errno = EINVAL;",8016],["errno = 0;",6346],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626],["fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);",3617],["fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);",3617],["strerror(errno));",2989]]},{"word":"error","context":[["goto error;",43132],["return error;",42746],["DBUG_RETURN(error);",36404],["return error;",33434],["return soap->error;",32877],["goto error;",32759],["if (error)",28517],["int error;",27021],["error = true;",19930],["if (error)",19914]]},{"word":"errors","context":[["obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));",6423],["// Parse id now so errors from here on will have the id",3689],["// TODO: Actually handle errors",3507],["// Report errors from network/worker thread",3472],["// unspecified (HTTP errors and contents of 'error').",3455],["des->errors += 1;",3419],["errors::InvalidArgument(",3362],["// TODO: receive errors and debug messages through ClientModel",3093],["// Subscribe to information, replies, messages, errors",2661],["// errors now are not fatal, we still did a reorganisation to a new chain in a valid way",2081]]},{"word":"even","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *",31446],["//  but WITHOUT ANY WARRANTY; without even the implied warranty of",16907]]},{"word":"event","context":[["event.Skip();",22524],["event->accept();",21507],["event->ignore();",13237],["event->acceptProposedAction();",11386],["return QDialog::eventFilter(object, event);",7596],["if (event->type() == QEvent::KeyPress) {",7132],["if(event->mimeData()->hasUrls())",6774],["QKeyEvent *ke = static_cast<QKeyEvent *>(event);",6604],["Q_UNUSED(event);",5428],["SDL_Event event;",4583]]},{"word":"events","context":[["events.Update(diff);",27578],["while (uint32 eventId = events.ExecuteEvent())",23219],["events.Reset();",16171],["EventMap events;",12291],["#include \"ui/events/event.h\"",4320],["#include \"ui/events/event_utils.h\"",2399],["#include \"events.h\"",2077],["#include \"core/events/Event.h\"",1956],["events.PopEvent();",1933],["#include \"ui/events/keycodes/keyboard_codes.h\"",1893]]},{"word":"example","context":[["\"  -lang=<lang>           \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +",2895],["\"Host: www.example.org\\r\\n\"",2559],["For example:",1991],["For example:",1626],["\"example:\\n\"",1570],["request.url = GURL(\"http://www.example.org/\");",1517],["// not check distance for GO in case owned GO (fishing bobber case, for example)",964],["// For example:",929],["// Author: Your Name <your.email@example.net>",901],["For example,",892]]},{"word":"except","context":[["* you may not use this file except in compliance with the License.",45650],["* You may not use this file except in compliance with the License.",19877],["you may not use this file except in compliance with the License.",18509],["// you may not use this file except in compliance with the License.",16948],["// you may not use this file except in compliance with the License.",13559],["* you may not use this file except in compliance with the License.",10242],["* \"License\"); you may not use this file except in compliance",8993],["you may not use this file except in compliance with the License.",8338],["* 1.1 (the \"License\"); you may not use this file except in compliance with",5684],["// Source License; you may not use this file except in compliance with the",5340]]},{"word":"exception","context":[["** In addition, as a special exception, Nokia gives you certain additional",40703],["** In addition, as a special exception, Digia gives you certain additional",39820],["catch (std::exception& e) {",34755],["catch (std::exception& e)",25163],["catch (std::exception &e) {",18854],["/* Raise an exception if the arguments couldn't be parsed. */",13073],["} catch (std::exception &e) {",10313],["#include <exception>",8852],["} catch (std::exception& e) {",8431],["} catch (const std::exception& e) {",7905]]},{"word":"exec","context":[["dlg.exec();",22486],["return app.exec();",16181],["UNUSED_PARAM(exec);",10296],["return a.exec();",9280],["if (exec->hadException())",6661],["if(dlg.exec())",5442],["app.exec();",5345],["if (dlg.exec())",5134],["m_pDS->exec(strSQL.c_str());",4973],["msgBox.exec();",4884]]},{"word":"exists","context":[["if (!mempool.exists(prevout.hash))",3708],["// get the wallet transaction with the given hash (if it exists)",3421],["if (mempool.exists(hash))",3319],["// If the shortcut exists already, remove it for updating",3297],["if (boost::filesystem::exists(pathDebug))",3185],["return boost::filesystem::exists(StartupShortcutPath());",3176],["if (filesystem::exists(pathBootstrap)) {",2576],["if (mempool.exists(inv.hash)) {",2261],["txInMap = mempool.exists(inv.hash);",2061],["if (!mempool.exists(hash) && !txdb.ContainsTx(hash))",2052]]},{"word":"exit","context":[["exit(1);",138148],["exit(___);}",112271],["exit(0);",59079],["exit(1);",45816],["exit(-1);",36643],["exit(EXIT_FAILURE);",30970],["goto exit;",22632],["exit(0);",15233],["/* function exit code */",15158],["exit(EXIT_FAILURE);",12030]]},{"word":"expected","context":[["throw runtime_error(\"expected reply to have result, error and id properties\");",3616],["/* Check response is as expected */",3597],["CHECK_EQUAL( expected, actual )",3429],["// On other operating systems, the expected action is to print the message to the console.",3153],["ASSERT_EQUALS(expected, tok(code));",2627],["throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");",2425],["ASSERT_EQUALS(expected, tok(code, false));",2099],["Cmds expected;",1723],["expected =",1690],["CHECK_EQUAL( expected, actual );",1680]]},{"word":"expr","context":[["ZoneList<Expression*>* args = expr->arguments();",10143],["PrepareForBailoutBeforeSplit(expr, true, if_true, if_false);",4228],["return expr;",4005],["SetSourcePosition(expr->position());",2349],["PrepareForBailoutForId(expr->AssignmentId(), TOS_REG);",1638],["if (expr->is_postfix()) {",1589],["if (expr->is_compound()) {",1223],["expr = op;",1152],["delete expr;",1072],["Expression* callee = expr->expression();",1046]]},{"word":"extension","context":[["#include \"extensions/common/extension.h\"",8119],["const Extension* extension,",6573],["const Extension* extension =",6481],["#include \"chrome/common/extensions/extension.h\"",5421],["ASSERT_TRUE(extension);",4903],["if (!extension)",4604],["const Extension* extension) {",3214],["const extensions::Extension* extension =",2826],["return extension;",2715],["extension,",2365]]},{"word":"extensions","context":[["namespace extensions {",18659],["}  // namespace extensions",18041],["#include \"chrome/browser/extensions/extension_service.h\"",10396],["#include \"extensions/common/extension.h\"",8119],["#include \"chrome/common/extensions/extension.h\"",5421],["#include \"extensions/browser/extension_system.h\"",5284],["#include \"extensions/browser/extension_registry.h\"",5055],["#include \"extensions/common/constants.h\"",4882],["using extensions::Extension;",4309],["#include \"chrome/common/extensions/extension_constants.h\"",3667]]},{"word":"extern","context":[["extern \"C\" {",51113],["extern \"C\"",40418],["extern \"C\" {",19942],["extern int *a;",12600],["extern \"C\"",10841],["extern \"C\" int",7440],["extern \"C\" { typedef",6046],["extern const AP_HAL::HAL& hal;",4794],["extern \"C\" void",4405],["extern void noui_connect();",4192]]},{"word":"f","context":[["fclose(f);",28454],["return f;",15302],["f.close();",14563],["case 'f':",12074],["check(\"void f() {\\n\"",6771],["if (!f)",6540],["const Tp diff = f - f0;",5761],["if (f)",5475],["delete f;",5462],["fclose(f);",5312]]},{"word":"fHelp","context":[["if (fHelp || params.size() != 1)",36282],["if (fHelp || params.size() != 0)",26936],["if (fHelp || params.size() > 1)",26262],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["if (fHelp)",20264],["if (fHelp || params.size() > 2)",15804],["if (fHelp || params.size() > 0)",6844],["if (fHelp || params.size() > 3)",6649],["if (fHelp || params.size() < 2 || params.size() > 4)",6418],["if (fHelp || params.size() != 2)",6293]]},{"word":"fail","context":[["fail:",42267],["goto fail;",17623],["fail:",14198],["++fail;",3534],["// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options",3423],["// this call is allowed to fail",3348],["goto fail;",3339],["// This can fail if a duplicate of this transaction was in a chain that got",2075],["// Connecting shouldn't fail due to dependency on other memory pool transactions",2066],["// This must not fail. The transaction has already been signed and recorded.",1928]]},{"word":"failed","context":[["QMessageBox::critical(this, tr(\"Wallet encryption failed\"),",12277],["throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");",7751],["CLog::Log(LOGERROR, \"%s failed\", __FUNCTION__);",5495],["failed = true;",5419],["ASSERT_TRUE(SetupSync()) << \"SetupSync() failed.\";",5405],["goto failed;",4588],["return error(\"SetBestChain() : TxnCommit failed\");",4230],["if (enter.failed())",4215],["printf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",",4161],["return error(\"LoadBlockIndex() : writing genesis block to disk failed\");",3896]]},{"word":"false","context":[["return false;",6375924],["return false;",1231778],["bool found = false;",52111],["false);",40861],["false,",36924],["assert(false);",34611],["false,",30152],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["bool ok = false;",26049],["ok = false;",23552]]},{"word":"fd","context":[["close(fd);",17636],["close(fd);",8184],["int fd;",6722],["if (fd < 0) {",4288],["return fd;",4233],["::close(fd);",4133],["int fd;",4031],["fclose(fd);",3334],["if (fd < 0) {",3193],["if (fd == -1) {",2970]]},{"word":"field","context":[["form.fields.push_back(field);",18192],["FormFieldData field;",6495],["field -= basedesc->getFieldCount(object);",4959],["if (field < basedesc->getFieldCount(object))",4959],["field = rec_get_nth_field_old(",3713],["field->set_notnull();",3614],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["Field *field;",3421],["// Paste text from clipboard into recipient field",3281],["form1.fields.push_back(field);",3179]]},{"word":"fields","context":[["Field* fields = result->Fetch();",94858],["Field *fields = result->Fetch();",30604],["form.fields.push_back(field);",18192],["uint32 entry = fields[0].GetUInt32();",11272],["for (f_iter = fields.begin(); f_iter != fields.end(); ++f_iter) {",5142],["for (f_iter = fields.begin(); f_iter != fields.end(); ++f_iter) {",5142],["fields = result->Fetch();",4274],["uint32 quest_id = fields[0].GetUInt32();",3586],["form1.fields.push_back(field);",3179],["uint32 guid = fields[0].GetUInt32();",2991]]},{"word":"file","context":[["// found in the LICENSE file.",333875],["** packaging of this file.  Please review the following information to",101077],["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975],["** Foundation and appearing in the file LICENSE.LGPL included in the",65319],["** Licensees holding valid commercial Qt licenses may use this file in",56068],["// This file is part of the GNU ISO C++ Library.  This library is free",51033],["* you may not use this file except in compliance with the License.",45650],["** Alternatively, this file may be used under the terms of the GNU",45135]]},{"word":"filename","context":[["testSimplify(reporter, path, filename);",5433],["return filename;",4123],["std::string filename;",3660],["QFile file(filename);",3534],["\"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");",3152],["testPathOp(reporter, path1, path2, (SkPathOp) 2, filename);",2759],["#include <wx/filename.h>",2449],["CSVModelWriter writer(filename);",2181],["QString filename;",2087],["if(!filename.isEmpty()) {",2060]]},{"word":"files","context":[["of this software and associated documentation files (the \"Software\"), to deal",29279],["#include \"base/files/file_path.h\"",21970],["* of this software and associated documentation files (the \"Software\"), to deal",14059],["#include \"base/files/file_util.h\"",13367],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["#include \"base/files/scoped_temp_dir.h\"",8382],["* copy of this software and associated documentation files (the \"Software\"),",7507],["// of this software and associated documentation files (the \"Software\"), to deal",7088],["// copy of this software and associated documentation files (the \"Software\"),",6933],["/* a copy of this software and associated documentation files (the       */",4764]]},{"word":"filesystem","context":[["#include <boost/filesystem.hpp>",33068],["#include <boost/filesystem/fstream.hpp>",19471],["namespace fs = boost::filesystem;",18774],["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922],["if (!boost::filesystem::is_directory(GetDataDir(false)))",6939],["#include \"filesystem/File.h\"",4490],["boost::filesystem::remove(GetPidFile());",3801],["#include <boost/filesystem/convenience.hpp>",3767],["boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";",3743],["filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));",3538]]},{"word":"filter","context":[["const QString &filter,",3794],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// do this before starting client thread, to filter out",3509],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["// Install event filter for up and down arrow",3094],["// TODO: make it possible to filter out categories (esp debug messages when implemented)",3092],["QString result = QFileDialog::getSaveFileName(parent, caption, myDir, filter, &selectedFilter);",2902],["filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);",2292],["return filter;",2217]]},{"word":"find","context":[["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["// converting string that we try to find to lower case",7722],["SkillStatusMap::const_iterator itr = mSkillStatus.find(skill);",6646],["map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);",4073],["// find a copy of this license in LICENSE.txt in the top directory of",4015],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);",3786],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);",3784],["strHelp = strHelp.substr(0, strHelp.find('\\n'));",3735],["map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);",3693]]},{"word":"first","context":[["first = false;",18067],["bool first = true;",13930],["r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,",9458],["// Parse the account first so we don't generate a key if there's an error",8026],["first = false;",7867],["tag = p.first;",7357],["const CBitcoinAddress& address = item.first;",7025],["pindexNew->phashBlock = &((*mi).first);",6649],["if (pwalletMain->mapAddressBook.count(r.first))",6603],["bool first = true;",6406]]},{"word":"flag","context":[["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["flag = true;",5046],["// push the result flag",4696],["if (flag)",4309],["flag = 1;",3683],["flag = false;",3219],["flag = 0;",3145],["int flag = 0;",3111],["if (flag) {",2913],["return flag;",2624]]},{"word":"flags","context":[["0,       // flags",15452],["default: to.add(\"}\"); types.pop_back(); vtypes.pop_back(); stages.pop_back(); flags.pop_back(); break;",7294],["// slots: signature, parameters, type, tag, flags",7088],["self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;",6406],["return flags;",5543],["flags,",4775],["int flags;",4556],["if (flags & DC_EXEC) {",4200],["int flags = 0;",4178],["// signals: signature, parameters, type, tag, flags",4174]]},{"word":"float","context":[["float x, y, z;",29528],["data << float(0);",10425],["float",8579],["#include <float.h>",7813],["void SpellCast(float val)",7149],["float comulativeperc = 0;",7142],["float *out = ZOUT(0);",6382],["float x, y, z, o;",5910],["float x, y;",5415],["float f;",5232]]},{"word":"following","context":[["** packaging of this file.  Please review the following information to",101077],["* modification, are permitted provided that the following conditions",49713],["*    notice, this list of conditions and the following disclaimer.",38135],["*    notice, this list of conditions and the following disclaimer in the",34920],["furnished to do so, subject to the following conditions:",29897],["* modification, are permitted provided that the following conditions are",21256],["* notice, this list of conditions and the following disclaimer.",19798],["* copyright notice, this list of conditions and the following disclaimer",18185],["*     notice, this list of conditions and the following disclaimer.",17251],["* modification, are permitted provided that the following conditions are met:",16487]]},{"word":"font","context":[["return font;",7380],["QFont font;",4870],["font.setStyleHint(QFont::TypeWriter);",3429],["QFont font(\"Monospace\");",3270],["font.setBold(true);",3110],["\"td.message { font-family: Monospace; font-size: 12px; } \"",2744],["\"td.message { font-family: Monospace; font-size: 12px; } \"",2744],["#include \"font.h\"",1920],["#include \"ui/gfx/font.h\"",1643],["painter->setFont(font);",1532]]},{"word":"foo","context":[["foo();",7740],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["\"foo.exe\",",4239],["check(\"void foo()\\n\"",3728],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["/* Extract first suffix from filter pattern \"Description (*.foo)\" or \"Description (*.foo *.bar ...) */",3411],["// interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)",3084],["// interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)",3084]]},{"word":"for","context":[["* GNU General Public License for more details.",218620],["GNU General Public License for more details.",156688],["* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",96496],["*  GNU General Public License for more details.",68934],["// GNU General Public License for more details.",60759],["* See the License for the specific language governing permissions and",53439],["* GNU General Public License for more details.",48968],["for (;;) {",44406],["for (;;)",44019],["GNU General Public License for more details.",39941]]},{"word":"form","context":[["** use the contact form at http://qt.digia.com/contact-us.",36972],["* 2. Redistributions in binary form must reproduce the above copyright",35214],["*     * Redistributions in binary form must reproduce the above",18845],["form.fields.push_back(field);",18192],["//     * Redistributions in binary form must reproduce the above",15332],["**   * Redistributions in binary form must reproduce the above copyright",13144],["* 2.  Redistributions in binary form must reproduce the above copyright",11187],["* Redistributions in binary form must reproduce the above copyright",10319],["** use the contact form at http://www.qt.io/contact-us.",9626],["FormData form;",7272]]},{"word":"format","context":[["va_start(args, format);",5757],["#include <boost/format.hpp>",5734],["va_start(ap, format);",5517],["// Message format",4131],["return format;",3885],["// xgettext: no-c-format",3850],["switch (format) {",3845],["switch (format)",3499],["// clang-format off",3437],["// clang-format on",3418]]},{"word":"found","context":[["// found in the LICENSE file.",333875],["found = true;",62195],["bool found = false;",52111],["// found in the LICENSE file.",24314],["if (!found)",23883],["* found in the LICENSE file.",20124],["// The full text of the license can be found in the file LICENSE at",17668],["A detailed list of copyright holders can be found in the file \"AUTHORS\".",15333],["*  that can be found in the LICENSE file in the root of the source",13737],["*  tree. An additional intellectual property rights grant can be found",13737]]},{"word":"fp","context":[["fclose(fp);",35973],["FILE *fp;",8971],["fclose(fp);",5733],["fprintf(fp, \"\\n\");",3429],["if (!fp)",3376],["fclose( fp );",3347],["if (fp == NULL) {",2822],["fgets(s,MAXLINE,fp);",2747],["if (fp)",2554],["if (fp == NULL)",2292]]},{"word":"fprintf","context":[["fprintf(stderr,",33311],["fprintf(stderr,",10996],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309],["fprintf(stderr, \"\\n\");",5432],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());",3802],["fprintf(stdout, \"%s\", strUsage.c_str());",3682],["fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);",3626],["fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);",3617],["fprintf(file, \"%d\\n\", pid);",3466]]},{"word":"frame","context":[["if (!frame)",8353],["#include \"core/frame/LocalFrame.h\"",5776],["return frame;",5213],["host_impl_->DidDrawAllLayers(frame);",4132],["LayerTreeHostImpl::FrameData frame;",3953],["#include \"core/frame/FrameView.h\"",3767],["#include \"core/frame/Settings.h\"",3408],["#include \"core/frame/UseCounter.h\"",2446],["#include \"chrome/browser/ui/views/frame/browser_view.h\"",2299],["DCHECK(!frame_ || frame_ == frame);",2146]]},{"word":"free","context":[["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// This file is part of the GNU ISO C++ Library.  This library is free",51033],["This program is free software; you can redistribute it and/or modify",46782],["This library is free software; you can redistribute it and/or",43697],["* This program is free software: you can redistribute it and/or modify",41811],["This program is free software; you can redistribute it and/or",40216]]},{"word":"from","context":[["MergeFrom(from);",41344],["if (&from == this) return;",27190],["* available from http://www.virtualbox.org. This file is free software;",20778],["* contributors may be used to endorse or promote products derived from",19909],["GOOGLE_CHECK_NE(&from, this);",18956],["&from);",12844],["::google::protobuf::internal::ReflectionOps::Merge(from, this);",12833],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["/* inherits documentation from base class */",12392],["mutable_unknown_fields()->MergeFrom(from.unknown_fields());",11370]]},{"word":"full","context":[["// The full text of the license can be found in the file LICENSE at",17668],["// Don't bother if send buffer is too full to respond anyway",6084],["* (at your option) any later version.  The full license is in LICENSE file",5411],["\"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");",4857],["// Licensed under the MIT license. See LICENSE file in the project root for full license information.",3602],["strprintf(\"no full public key for address %s\",ks.c_str()));",2991],["// Raise the price as the block approaches full",2375],["// Go back the full period unless it's the first retarget after genesis. Code courtesy of Art Forz",2133],["// they must either disconnect and retry or request the full block.",2033],["// could not send full message; stop sending more",2014]]},{"word":"function","context":[["/* function exit code */",15158],["//\t@function:",14776],["PyErr_SetString(PyExc_TypeError, \"function/method should return None\");",4408],["from check function */",3784],["/* Invoke the function in mongoBackend library */",3590],["#include <deal.II/base/function.h>",2831],["/* the function to invoke when plugin is loaded */",2535],["/* the function to invoke when plugin is unloaded */",2533],["// function.",2372],["__Pyx_INCREF(function);",2323]]},{"word":"functions","context":[["// call functions which may have additional effects after chainging state of unit",3994],["// dispatching functions",3916],["// These functions dispatch to one or all registered wallets",3890],["for (f_iter = functions.begin(); f_iter != functions.end(); ++f_iter) {",3027],["for (f_iter = functions.begin(); f_iter != functions.end(); ++f_iter) {",3027],["vector<t_function*> functions = tservice->get_functions();",2404],["// We're going to call functions which can modify content of the list during iteration over it's elements",2377],["templates or use macros or inline functions from this file, or you compile",1857],["// 27.8.1.4 Overridden virtual functions",1601],["// templates or use macros or inline functions from this file, or you compile",1544]]},{"word":"g","context":[["ImGuiState& g = *GImGui;",15616],["ImGuiContext& g = *GImGui;",10742],["case 'g':",5464],["const ImGuiStyle& style = g.Style;",4515],["g.wait_for_all();",3829],["return g;",3805],["printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);",3433],["printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);",3433],["graphics_info_t g;",3413],["case 'g':",3243]]},{"word":"get","context":[["// get this",21183],["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["if (this->eventHandler_.get() != NULL) {",9967],["if (NULL == m_pDB.get()) return false;",7875],["if (NULL == m_pDS.get()) return false;",6979],["new HttpNetworkTransaction(DEFAULT_PRIORITY, session.get()));",6355],["return a.get<0>() < b.get<0>();",5461],["return a.get<0>() < b.get<0>();",5461],["return a.get<1>() < b.get<1>();",5461],["return a.get<1>() < b.get<1>();",5461]]},{"word":"gfx","context":[["gfx::PointF(),",10680],["#include \"ui/gfx/canvas.h\"",7529],["#include \"ui/gfx/screen.h\"",5832],["#include \"ui/gfx/image/image.h\"",5386],["#include \"ui/gfx/rect.h\"",4688],["gfx::Point3F(),",3981],["#include \"ui/gfx/image/image_skia.h\"",3883],["#include \"ui/gfx/geometry/rect.h\"",3508],["const gfx::Size& size,",3488],["gfx::Transform transform;",3135]]},{"word":"given","context":[["// Seed nodes are given a random 'last seen time' of between one and two",3671],["/** check whether a given address is potentially local */",3638],["/** check whether a given address is in a network we can probably connect to */",3638],["// Find all addresses that have the given account",3585],["// make sure all wallets know about the given transaction, in the given block",3435],["// make sure all wallets know about the given transaction, in the given block",3435],["// get the wallet transaction with the given hash (if it exists)",3421],["// erases transaction with the given hash from all wallets",3415],["\"Sets the account associated with the given address.\");",3160],["\"Returns the list of addresses for the given account.\");",3156]]},{"word":"global","context":[["#include \"global.h\"",5299],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["// Subscribe to global signals from core",3215],["// Need a global reference for the notifications to find the GUI",2976],["#include \"global.hpp\"",2610],["// Since the order of destruction of static/global objects is undefined,",2304],["cx, global,",2087],["#include <global.h>",2051],["// defining a mutex as a global object doesn't work (the mutex gets",1530],["// It breaks because it may be called by global destructors during shutdown.",1530]]},{"word":"gnu","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["// <http://www.gnu.org/licenses/>.",46023],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** met: http://www.gnu.org/copyleft/gpl.html.",36012],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642],["*  <http://www.gnu.org/licenses/>.",20186],["** requirements will be met: https://www.gnu.org/licenses/lgpl.html and",13497],["*  along with this program.  If not, see <http://www.gnu.org/licenses/>.",11668]]},{"word":"go","context":[["switch (go->GetEntry())",6095],["if (!go)",4440],["// \"Never go to sea with two chronometers; take one or three.\"",3270],["//  SuperTuxKart - a fun racing game with go-kart",3165],["bool OnGossipHello(Player* player, GameObject* go)",3115],["// Requests from this object must go to executor",3100],["// Replies from executor object must go to this object",3099],["delete go;",2899],["void OnGameObjectCreate(GameObject* go)",2756],["go->SetGoState(GO_STATE_ACTIVE);",2747]]},{"word":"google","context":[["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641],["DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<",22891],[": ::google::protobuf::Message() {",17525],["target = ::google::protobuf::internal::WireFormatLite::",17049],["::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(",15588],["DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(",14825],["::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(",14660],["::google::protobuf::io::CodedOutputStream* output) const {",14310],["::google::protobuf::io::CodedInputStream* input) {",14310],["::google::protobuf::uint32 tag;",14309]]},{"word":"goto","context":[["goto err;",108091],["goto error;",43132],["goto Exit;",42024],["goto end;",38378],["goto error;",32759],["goto is_not_a_corner;",27540],["goto handle_uninterpreted;",27072],["goto handle_unusual;",25465],["goto exit;",22632],["goto out;",22029]]},{"word":"governed","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["// Use of this source code is governed by a BSD-style license that can be",25676],["* Use of this source code is governed by a BSD-style license that can be",20089],["*  Use of this source code is governed by a BSD-style license",13737],["// reserved. Use of this source code is governed by a BSD-style license that",2674],["// Use of this source code is governed by the MIT license that can be",1926],["// Use of this source code is governed by a BSD-style",1530],["// Use of this source code is governed by a BSD-style license that can be found",1265],["*  Use of this source code is governed by a BSD-style license that can",1148],["* Use of this source code is governed by a BSD-style license that can be",1132]]},{"word":"group","context":[["if (!group)",10251],["if (group)",7005],["// group update",6703],["for (GroupReference* itr = group->GetFirstMember(); itr != NULL; itr = itr->next())",5841],["//  3. Neither the names of the Blaze development group nor the names of its contributors",5353],["if (Group* group = GetGroup())",4220],["Group* group = GetPlayer()->GetGroup();",3926],["if (Group* group = player->GetGroup())",3899],["delete group;",3755],["// Only connect out to one peer per network group (/16 for IPv4).",3595]]},{"word":"gtest","context":[["#include \"testing/gtest/include/gtest/gtest.h\"",69794],["#include \"testing/gtest/include/gtest/gtest.h\"",69794],["#include \"testing/gtest/include/gtest/gtest.h\"",69794],["#include <gtest/gtest.h>",28037],["#include <gtest/gtest.h>",28037],["#include \"gtest/gtest.h\"",12612],["#include \"gtest/gtest.h\"",12612],["#include <gtest/gtest.h>",10146],["#include <gtest/gtest.h>",10146],["#include \"gtest/gtest.h\"",9116]]},{"word":"guid","context":[["uint64 guid;",21413],["stmt->setUInt32(0, guid);",15711],["ObjectGuid guid;",14286],["recv_data >> guid;",13330],["data << uint64(guid);",8924],["recvData >> guid;",6428],["stmt->setUInt32(0, GUID_LOPART(guid));",5584],["SendLootRelease(guid);",4523],["if (!guid)",4290],["stmt->setUInt64(0, guid);",4130]]},{"word":"h","context":[["#include <stdio.h>",182584],["#include <stdlib.h>",147008],["#include <string.h>",129198],["#include \"stdafx.h\"",117505],["#include \"config.h\"",116842],["#include \"base/logging.h\"",87295],["#include <unistd.h>",82853],["#include <math.h>",80225],["#include \"base/bind.h\"",76145],["#include \"testing/gtest/include/gtest/gtest.h\"",69794]]},{"word":"handle","context":[["return handle;",5273],["THD*\t\t\t\tthd,\t/*!< in: thread handle */",4683],["* Accept and handle incoming connection.",3507],["// TODO: Actually handle errors",3507],["* Sets up I/O resources to accept and handle a new connection.",3507],["handle = reinterpret_cast<GEOSContextHandleInternal_t*>(extHandle);",3316],["ClientSocketHandle handle;",3171],["GEOSContextHandleInternal_t *handle = 0;",3107],["if ( 0 == handle->initialized )",2967],["handle->ERROR_MESSAGE(\"Unknown exception thrown\");",2929]]},{"word":"handler","context":[["handler->SetSentErrorMessage(true);",58615],["Player* player = handler->GetSession()->GetPlayer();",6543],["handler->SendSysMessage(LANG_BAD_VALUE);",5807],["handler->SendSysMessage(LANG_SELECT_CREATURE);",5224],["handler->SendSysMessage(LANG_NO_CHAR_SELECTED);",5057],["// TODO: Add your control notification handler code here",4538],["Player* target = handler->getSelectedPlayer();",4243],["if (handler->GetSession())",3714],["Creature* creature = handler->getSelectedCreature();",3454],["if (handler->HasLowerSecurity(target, 0))",3356]]},{"word":"has","context":[["#error \"(The moc has changed too much.)\"",12708],["// Find the last block the caller has in the main chain",8258],["// URI has to be valid",5116],["throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");",5084],["// send-big-orphans memory exhaustion attack. If a peer has a legitimate",4057],["// As the program has not fully started yet, Shutdown() is possibly overkill.",3750],["// Check if the current key has been used",3593],["// This file has been generated by Py++.",3483],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["// Each thread has its own key and counter",3271]]},{"word":"hash","context":[["uint256 hash = tx.GetHash();",25230],["uint256 hash;",14108],["uint256 hash = GetHash();",12736],["if (mapBlockIndex.count(hash))",11277],["return hash;",11109],["// Pre-build hash buffers",7480],["vEraseQueue.push_back(inv.hash);",7211],["Inventory(inv.hash);",6944],["if (mapTx.count(hash))",6901],["vWorkQueue.push_back(inv.hash);",5819]]},{"word":"have","context":[["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* You should have received a copy of the GNU General Public License along",105989],["*  You should have received a copy of the GNU General Public License",68451],["// You should have received a copy of the GNU General Public License along",51550],["You should have received a copy of the GNU General Public License",45757],["* You should have received a copy of the GNU General Public License",45078],["// You should have received a copy of the GNU General Public License",35376],["** If you have questions regarding the use of this file, please contact",34088],["* You should have received a copy of the GNU Lesser General Public",29817]]},{"word":"header","context":[["// Read header",8140],["// Read block header",5794],["// Fill in header",3915],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["setText(header + QString(QChar(0x2003)).repeated(50));",2861],["QString strUsage = header + \"\\n\" + coreOptions + \"\\n\" + uiOptions;",2860],["BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());",2306],["CBlockHeader header;",2085],["file >> header;",2075],["hashBlock = header.GetHash();",2039]]},{"word":"heap","context":[["mem_heap_free(heap);",11730],["mem_heap_t*\theap;",5679],["// Turn off Microsoft heap dump noise",4960],["return isolate->heap()->undefined_value();",4673],["ULINT_UNDEFINED, &heap);",3569],["if (UNIV_LIKELY_NULL(heap)) {",2460],["mem_heap_t*\theap\t\t= NULL;",2197],["Heap* heap = isolate->heap();",2159],["Heap* heap = isolate->heap();",2159],["mem_heap_empty(heap);",2086]]},{"word":"height","context":[["int width, height;",6040],["if (pos*2+1 < CalcTreeWidth(height-1))",5248],["int width, int height) {",4333],["return height;",4148],["GLsizei height,",3618],["// calculate height of tree",3538],["if (height < 0) {",3500],["if (height==0 || !fParentOfMatch) {",3499],["result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));",3426],["height = -height;",3332]]},{"word":"here","context":[["* are too numerous to list here. Please refer to the COPYRIGHT",20480],["// Note: not using straight sprintf here because we do NOT want",6536],["// TODO: Add your control notification handler code here",4538],["// Your implementation goes here",3994],["// Do this here so we don't have to critsect vNodes inside mapAddresses critsect.",3755],["// Parse id now so errors from here on will have the id",3689],["// you should add code here to check that the transaction does a",3642],["// we don't need transactions here.",3357],["// TODO: Add your code here",3349],["// Clear pindexPrev so future getworks make a new block, despite any failures from here on",3141]]},{"word":"hope","context":[["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This library is distributed in the hope that it will be useful,",61321],["// This library is distributed in the hope that it will be useful,",51633],["This library is distributed in the hope that it will be useful,",42670],["// This program is distributed in the hope that it will be useful,",36972],["*  This program is distributed in the hope that it will be useful,",36344],["* This program is distributed in the hope that it will be useful,",30366],["This program is distributed in the hope that it will be useful,",30247]]},{"word":"host","context":[["// Get local host ip",4731],["// Get local host IP",2733],["if (!host)",2502],["//    Cannot handle this later, because bitcoin:// will cause Qt to see the part after // as host,",2020],["if (!host)",1810],["// HTTP URI must be an absolute path, relative to current host",1698],["\"  -bind=<addr>           \" + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +",1673],["const std::string& host,",1590],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Bind to given address. Use [host]:port notation for IPv6\"),",1565],["\"Bind to given address and always listen on it. Use [host]:port notation for \"",1474]]},{"word":"hpp","context":[["#include <boost/filesystem.hpp>",33068],["#include <boost/test/unit_test.hpp>",27652],["#include <boost/foreach.hpp>",26889],["#include <boost/filesystem/fstream.hpp>",19471],["#include <boost/lexical_cast.hpp>",18387],["#include <boost/bind.hpp>",17854],["#include <boost/algorithm/string.hpp>",14486],["#include <boost/thread.hpp>",10650],["#include <boost/shared_ptr.hpp>",9326],["#include \"precompiled.hpp\"",9227]]},{"word":"hr","context":[["return hr;",103613],["if (FAILED(hr))",44887],["HRESULT hr = S_OK;",34998],["HRESULT hr;",33671],["if (SUCCEEDED(hr))",28364],["if (FAILED(hr)) {",16797],["return hr;",11873],["if ( FAILED(hr) )",9412],["if (FAILED(hr)) {",9351],["if (SUCCEEDED(hr)) {",8588]]},{"word":"html","context":[["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["** met: http://www.gnu.org/copyleft/gpl.html.",36012],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642],["** requirements will be met: https://www.gnu.org/licenses/lgpl.html and",13497],["** http://www.gnu.org/copyleft/gpl.html.",7995],["*  http://www.gnu.org/copyleft/gpl.html",7093],["** be met: https://www.gnu.org/licenses/gpl-3.0.html.",5338],["// See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.",4050],["\"Content-Type: text/html\\r\\n\"",3742],["\"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"",3560]]},{"word":"http","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["** Contact: http://www.qt-project.org/legal",46977],["// <http://www.gnu.org/licenses/>.",46023],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** met: http://www.gnu.org/copyleft/gpl.html.",36012],["** conditions see http://qt.digia.com/licensing.  For further information",34492]]},{"word":"i","context":[["int i;",286007],["i++;",149379],["++i;",94420],["int i = 0;",93279],["return i;",71901],["int i;",47771],["i = 0;",34810],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920],["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920]]},{"word":"id","context":[["return id;",23161],["int id;",9194],["switch (id) {",6578],["switch (id)",6501],["if (!id)",6262],["void MovementInform(uint32 type, uint32 id)",5529],["if (id)",5488],["return id;",5096],["Copyright (C) 1999-2011 id Software LLC, a ZeniMax Media company.",4963],["wxWindowID id,",4947]]},{"word":"idx","context":[["idx++;",10224],["int idx = 0;",9923],["ExeVar idx = c_.FindOuterKeyOrUndef( \"this\" );",7848],["return idx;",6233],["int idx;",5443],["++idx;",5381],["idx = 0;",4960],["#define QT_MOC_LITERAL(idx, ofs, len) \\",4772],["int idx = GetOrNewIndexForLocale(LocaleConstant(i));",4734],["if (idx >= 0)",3799]]},{"word":"if","context":[["#if 0",186286],["#if COCOS2D_DEBUG >= 1",163391],["* along with this program; if not, write to the Free Software",117514],["if (!result)",106673],["if (!UpdateVictim())",90853],["#if defined(OS_WIN)",80948],["if (result) { Py_DECREF(result); }",75633],["if (RT_FAILURE(rc))",68316],["if (RT_SUCCESS(rc))",67834],["if (result)",64507]]},{"word":"ifdef","context":[["#ifdef WIN32",145044],["#ifdef DEBUG",134100],["#ifdef _DEBUG",95296],["#ifdef _WIN32",88590],["#ifdef _MSC_VER",49113],["#ifdef ENABLE_WALLET",32475],["#ifdef DEBUG",29829],["#ifdef Q_OS_MAC",29510],["#ifdef ASSERT",25296],["#ifdef HAVE_CONFIG_H",25236]]},{"word":"ifndef","context":[["#ifndef NDEBUG",51568],["#ifndef WIN32",38095],["#ifndef TOLUA_RELEASE",30556],["#ifndef PRODUCT",26249],["#ifndef DBUG_OFF",25313],["#ifndef Q_OS_MAC",19812],["#ifndef NDEBUG",16920],["#ifndef _WIN32",16018],["#ifndef EMBEDDED_LIBRARY",15067],["#ifndef WX_PRECOMP",15037]]},{"word":"ii","context":[["int ii = screening_[j];",10976],["ii++;",7434],["P_+ii*3, Q_+ii*3, xp_[ii], xq_[ii], amapping_, cmapping_, asize_, workx, worky, workz);",4704],["P_+ii*3, Q_+ii*3, xp_[ii], xq_[ii], amapping_, cmapping_, asize_, workx, worky, workz);",4704],["P_+ii*3, Q_+ii*3, xp_[ii], xq_[ii], amapping_, cmapping_, asize_, workx, worky, workz);",4704],["P_+ii*3, Q_+ii*3, xp_[ii], xq_[ii], amapping_, cmapping_, asize_, workx, worky, workz);",4704],["i = ilist[ii];",3691],["int ii;",3653],["int ii = 0;",3493],["for (ii = 0; ii < inum; ii++) {",2464]]},{"word":"image","context":[["return image;",9240],["#include \"ui/gfx/image/image.h\"",5386],["#include \"ui/gfx/image/image.h\"",5386],["#include \"ui/gfx/image/image_skia.h\"",3883],["#include \"image.h\"",3318],["QImage image;",2829],["// Negative height means invert the image.",2811],["if (!image)",2668],["if (image)",2471],["delete image;",2250]]},{"word":"implied","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",53029],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *",31446]]},{"word":"in","context":[["// found in the LICENSE file.",333875],["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* Redistribution and use in source and binary forms, with or without",88602],["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["** Software or, alternatively, in accordance with the terms contained in",70819],["** Software or, alternatively, in accordance with the terms contained in",70819],["++in;",68431]]},{"word":"include","context":[["#include <iostream>",412655],["#include <string>",194111],["#include <stdio.h>",182584],["#include <vector>",163120],["#include <algorithm>",150071],["#include <stdlib.h>",147008],["#include <string.h>",129198],["#include <sstream>",125224],["#include \"stdafx.h\"",117505],["#include \"config.h\"",116842]]},{"word":"included","context":[["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["** Foundation and appearing in the file LICENSE.LGPL included in the",65319],["** Foundation and appearing in the file LICENSE.GPL included in the",38155],["The above copyright notice and this permission notice shall be included in",28001],["* The above copyright notice and this permission notice shall be included in",13555],["* version 2 for more details (a copy is included in the LICENSE file that",12892],["// Refer to the license.txt file included.",11929],["** LICENSE.LGPLv3 included in the packaging of this file.  Please review the",9359],["// The above copyright notice and this permission notice shall be included in",8307],["** appearing in the file LICENSE.LGPL included in the packaging of this file.",7897]]},{"word":"indent","context":[["/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */",8682],["indent(out) <<",7583],["/* -*- mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*- */",5579],["indent();",5461],["indent(out) << \"}\" << endl;",4334],["/// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",4086],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",3636],["/* -*-  Mode: C++; c-file-style: \"gnu\"; indent-tabs-mode:nil; -*- */",3158],["indent(out) << \"}\" << endl << endl;",3042],["indent-tabs-mode:nil",3032]]},{"word":"index","context":[["index++;",25910],["int index = 0;",23133],["return index;",17667],["int index;",15956],["index = 0;",13634],["++index;",12275],["if (!index.isValid())",8237],["dict_index_t*\tindex;",7495],["if (index < 0)",6861],["foreach (QModelIndex index, indexes)",6541]]},{"word":"info","context":[["** Contact: Nokia Corporation (qt-info@nokia.com)",45228],["** Nokia at qt-info@nokia.com.",28466],["if(info.Length() != 0)",22780],["return info;",18395],["if(info.Length() != 1)",17077],["v8::Local<v8::Object> holder = info.Holder();",13394],["info.GetReturnValue().Set(Nan::New(r));",13344],["if (!info)",9706],["DBUG_PRINT(\"info\",(\"spider this=%p\", this));",9462],["return *info;",9391]]},{"word":"information","context":[["** packaging of this file.  Please review the following information to",101077],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["** following information to ensure the GNU Lesser General Public License",13497],["* or visit www.oracle.com if you need additional information or have any",11601],["* distributed with this work for additional information",9438],["** Please review the following information to ensure the GNU Lesser General",7952],["** file. Please review the following information to ensure the GNU General",7148],["** file. Please review the following information to ensure the GNU Lesser",7122],["** information use the contact form at https://www.qt.io/contact-us.",6738],["// stdafx.obj will contain the pre-compiled type information",6297]]},{"word":"init","context":[["init();",47816],["#include \"init.h\"",39639],["init.Launch();",5427],["init();",5352],["void init();",5201],["d->init();",4521],["void init()",4276],["// init",3183],["#include \"init.h\" // for pwalletMain",3084],["/* Display elements init */",2979]]},{"word":"inline","context":[["inline",23828],["inline",23088],["inline void",6757],["inline void",6709],["static inline void",5590],["static inline",4979],["inline bool",4054],["#include \"oops/oop.inline.hpp\"",3991],["inline bool",3723],["static inline void",3288]]},{"word":"input","context":[["::google::protobuf::io::CodedInputStream* input) {",14310],["input, tag, mutable_unknown_fields()));",11299],["if (input->ExpectAtEnd()) goto success;",7042],["while ((tag = input->ReadTag()) != 0) {",6975],["::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);",6771],["if (input->ExpectAtEnd()) return true;",6673],["* Validate input.",5415],["BOOST_FOREACH(Value& input, inputs)",4935],["// Check for negative or overflow input values",4122],["// get the scriptPubKey corresponding to this input:",3984]]},{"word":"insert","context":[["setAddress.insert(address);",11810],["setKeyPool.insert(nIndex);",4725],["ret.insert(ret.end(), detail.begin(), detail.end());",4200],["mapMix.insert(make_pair(hashKey, pnode));",4101],["vInOutPoints.insert(txin.prevout);",4071],["if (pto->setInventoryKnown.insert(inv).second)",4016],["if (pto->setAddrKnown.insert(addr).second)",3922],["porphan->setDependsOn.insert(txin.prevout.hash);",3843],["mapOrphanBlocks.insert(make_pair(hash, pblock2));",3795],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;",3793]]},{"word":"instance","context":[["if (instance)",37822],["InstanceScript* instance;",24337],["instance = creature->GetInstanceScript();",19110],["if (!instance)",10968],["return instance;",8727],["PP_Instance instance,",6446],["// can be duplicated to remove the ability to spend the first instance -- even after",4051],["MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));",3842],["instance = me->GetInstanceScript();",3756],["MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();",3378]]},{"word":"instead","context":[["* CDDL are applicable instead of those of the GPL.",7877],["* in which case the provisions of the GPL or the LGPL are applicable instead",5726],["// (when using width/height on an img, Qt uses nearest instead of linear interpolation)",3093],["\"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +",2919],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Send trace/debug info to console instead of debug.log file\"),",2743],["// this will be used instead of the current location in SaveToDB",1614],["// TODO: pass in scriptChange instead of reservekey so",1604],["// If there is no current number available display N/A instead of 0, which can't ever be true",1538],["//   multiple transactions instead of one big transaction to avoid fees.",1524],["// If there is no current countOfPeers available display N/A instead of 0, which can't ever be true",1184]]},{"word":"instr","context":[["Register result = ToRegister(instr->result());",10177],["Register input = ToRegister(instr->value());",3273],["LOperand* context = UseFixed(instr->context(), cp);",2509],["LOperand* value = UseRegisterAtStart(instr->value());",2493],["DCHECK(ToRegister(instr->context()).is(cp));",2339],["CallCode(stub.GetCode(), RelocInfo::CODE_TARGET, instr);",2316],[": LDeferredCode(codegen), instr_(instr) { }",2200],["LOperand* input = instr->value();",2190],["Register value = ToRegister(instr->value());",2164],["Register temp = ToRegister(instr->temp());",2160]]},{"word":"int","context":[["int i;",286007],["int",212947],["int",156768],["int main()",124481],["int i = 0;",93279],["int main() {",51500],["int main(int argc, char *argv[])",49760],["int main(int argc, char *argv[])",49760],["int i;",47771],["int count = 0;",46673]]},{"word":"int32","context":[["int32 modifier = 0;",8534],["::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(",6862],["for (int32 i = 0; i < MAX_EFFECT_INDEX; ++i)",4875],["void DoAction(int32 const action)",4021],["void DoAction(int32 action) override",3614],["basepoints0 = CalculatePct(int32(damage), triggerAmount);",3594],["int32 duration = m_spellInfo->GetDuration();",3374],["std::map<SpellGroup, int32> SameEffectSpellGroup;",2746],["int32 gain = 0;",2511],["basepoints0 = CalculatePctN(int32(damage), triggerAmount);",2451]]},{"word":"int32_t","context":[["int32_t i;",5160],["int32_t",4399],["* RETURN     : int32_t type of status",3643],["int32_t",3392],["int32_t nBits;",3338],["uBits.nBits = htonl((int32_t)nBits);",3303],["int32_t status = 0;",2718],["int32_t rseqid = 0;",2488],["int32_t i = 0;",2427],["int32_t cseqid = 0;",2244]]},{"word":"int64","context":[["int64 nAmount = 0;",10779],["int64 nFees = 0;",8881],["int64 nStart = GetTime();",8475],["list<pair<CTxDestination, int64> > listReceived;",8253],["list<pair<CTxDestination, int64> > listSent;",8253],["int64 nBalance = GetAccountBalance(strAccount, nMinDepth);",7774],["static int64 nStart;",7396],["int64 nValueIn = 0;",6424],["int64 nStart = GetTimeMicros();",5877],["int64 nNow = GetAdjustedTime();",5613]]},{"word":"int64_t","context":[["int64_t nStart = GetTimeMillis();",3983],["int64_t nValueIn = 0;",3477],["map<uint256, int64_t> setTxIndex;",3431],["result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));",3426],["result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));",3386],["result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));",3384],["result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));",3335],["int64_t nTotal = 0;",3329],["result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));",3192],["if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);",3151]]},{"word":"internal","context":[["\\internal",70931],["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641],["/*! \\internal",28486],["DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<",22891],["namespace internal {",22739],["target = ::google::protobuf::internal::WireFormatLite::",17049],["}  // namespace internal",16751],["::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(",15588],["DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(",14825],["::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(",14660]]},{"word":"into","context":[["// Don't accept it if it can't get into a block",4144],["// Collect memory pool transactions into the block",3880],["// Collect transactions into block",3857],["// which will get accepted into blocks. The redemption",3608],["// BDB seems to have a bad habit of writing old data into",3548],["// Paste text from clipboard into recipient field",3281],["// This vector will be sorted into a priority queue:",2766],["ui->lblQRCode->setText(tr(\"Error encoding URI into QR Code.\"));",2577],["* Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.",2316],["// First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.",2155]]},{"word":"invalid","context":[["Nan::ThrowError(\"Array contents invalid.\");",5438],["assert(!\"GetWarnings() : invalid parameter\");",3888],["// if we selected an invalid address, restart",3711],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["return QString(); // Refuse to format invalid unit",3252],["return false; // Refuse to parse invalid unit or empty string",3208],["ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));",2973],["// duplicate/expired/invalid-signature/whatever alerts",2940],["// Longer invalid proof-of-work chain",2481],["ASSERT_EQ(IterStatus(iter), \"(invalid)\");",2433]]},{"word":"iostream","context":[["#include <iostream>",412655],["#include <iostream>",80259],["#include<iostream>",17630],["virtual std::iostream& stream()",3504],["virtual std::iostream& stream() = 0;",3315],["#include <iostream.h>",2466],["#include<iostream>",2386],["//#include <iostream>",1556],["#include \"iostream\"",1062],["# include <iostream>",1026]]},{"word":"ip","context":[["acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));",6816],["struct in_addr ip;",5122],["// Get local host ip",4731],["if ((CNetAddr)pnode->addr == ip)",3698],["bool CNode::IsBanned(CNetAddr ip)",3691],["CNode* FindNode(const CNetAddr& ip)",3690],["bool ClientAllowed(const boost::asio::ip::address& address)",3499],["static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())",3407],["static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())",3407],["if (!setKnown.insert(ip).second)",3395]]},{"word":"is","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["* This library is distributed in the hope that it will be useful,",61321],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624]]},{"word":"isEmpty","context":[["if(!selection.isEmpty())",4527],["if (name.isEmpty())",3920],["if (text.isEmpty())",3834],["if (!players.isEmpty())",3765],["if(dir.isEmpty()) // Default to user documents location",3582],["if (fileName.isEmpty())",3525],["if(!addr.isEmpty())",3502],["if(!result.isEmpty())",3372],["if(info.suffix().isEmpty() && !selectedSuffix.isEmpty())",3249],["if(info.suffix().isEmpty() && !selectedSuffix.isEmpty())",3249]]},{"word":"isolate","context":[["HandleScope scope(isolate);",20719],["v8::HandleScope scope(isolate);",7512],["ENTER_V8(isolate);",6316],["v8::Isolate* isolate = CcTest::isolate();",4837],["v8::Isolate* isolate = CcTest::isolate();",4837],["v8::HandleScope scope(CcTest::isolate());",4753],["v8::HandleScope scope(isolate);",4707],["return isolate->heap()->undefined_value();",4673],["i::Isolate* isolate = i::Isolate::Current();",4458],["SealHandleScope shs(isolate);",4416]]},{"word":"it","context":[["* This program is distributed in the hope that it will be useful,",200991],["* it under the terms of the GNU General Public License as published by",157996],["This program is distributed in the hope that it will be useful,",124922],["it under the terms of the GNU General Public License as published by",124782],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["*  it under the terms of the GNU General Public License as published by",65655],["++it;",65484]]},{"word":"item","context":[["if (!item)",25966],["return item;",20198],["if (item)",15131],["delete item;",12465],["Item *item;",11280],["BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)",9805],["if (item) {",9438],["const CBitcoinAddress& address = item.first;",7025],["const string& strName = item.second;",6347],["BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)",6091]]},{"word":"items","context":[["CFileItemList items;",8180],["items.Add(pItem);",5200],["items.Add(item);",3711],["// iterate backwards until we have nCount items to return:",3515],["for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)",3241],["for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)",3241],["QList<QPair<QString, QString> > items = uri.queryItems();",3240],["return items;",2428],["// item set bonuses applied only at equip and removed at unequip, and still active for broken items",2420],["// check count of items (skip for auto move for same player from bank)",2420]]},{"word":"iter","context":[["++iter;",37995],["iter++;",10616],["++iter) {",10306],["iter->Next();",6560],["++iter;",5896],["return iter->second;",5204],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931],["delete iter;",4928],["RemoveAura(iter);",4494]]},{"word":"iterator","context":[["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["#include <iterator>",16864],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["#include <iterator>",6194],["for (AuraApplicationMap::iterator iter = m_appliedAuras.begin(); iter != m_appliedAuras.end();)",4931],["for (std::list<AuraScript*>::iterator scritr = m_loadedScripts.begin(); scritr != m_loadedScripts.end(); ++scritr)",4839],["map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);",4073],["for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)",4062],["for (std::list<SpellScript*>::iterator scritr = m_loadedScripts.begin(); scritr != m_loadedScripts.end(); ++scritr)",3862]]},{"word":"itr","context":[["++itr;",49392],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["for (ObjectList::const_iterator itr = targets->begin(); itr != targets->end(); ++itr)",15298],["delete itr->second;",13423],["return &itr->second;",11974],["return itr->second;",8802],["++itr)",8062],["if (itr == mSkillStatus.end() || itr->second.uState == SKILL_DELETED)",6895],["if (itr == mSkillStatus.end() || itr->second.uState == SKILL_DELETED)",6895]]},{"word":"its","context":[["** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).",20645],["** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).",19445],["* ScummVM is the legal property of its developers, whose names",19064],["*     * Neither the name of Google Inc. nor the names of its",18258],["* Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.",14636],["//     * Neither the name of Google Inc. nor the names of its",14619],["** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).",13135],["** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).",10323],["** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).",9925],["**     of its contributors may be used to endorse or promote products derived",7191]]},{"word":"j","context":[["j++;",29374],["int i, j;",27500],["int j;",26339],["int i,j;",15657],["int j = 0;",14166],["++j;",13020],["for (int j = 0; j != screening_size_; ++j) {",11069],["for (int j = 0; j != screening_size_; ++j) {",11069],["for (int j = 0; j != screening_size_; ++j) {",11069],["int ii = screening_[j];",10976]]},{"word":"join","context":[["#include <boost/algorithm/string/join.hpp>",4368],["upnp_thread->join();",3798],["ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";",3226],["t.join();",2758],["tr(\"Are you sure you want to send %1?\").arg(formatted.join(tr(\" and \"))),",1794],["// could get full length name at index 10, but would be different from join messages",1692],["printf(\"IRC got join\\n\");",1660],["detectShutdownThread->join();",1586],["thread.join();",1514],["t1.join();",1218]]},{"word":"just","context":[["// stdafx.cpp : source file that includes just the standard includes",7991],["// This mitigates 'penny-flooding' -- sending thousands of free transactions just to",4210],["// Don't know what it is, just say we already got one",4138],["/// when NTP implemented, change to just nTime = GetAdjustedTime()",3535],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["pszKeyword = NULL; // Returns just IP address",3124],["// Do this early as we don't want to bother initializing if we are just calling IPC",2969],["// Rewrite just private keys: rescan to find transactions",2778],["// FetchInputs can return false either because we just haven't seen some inputs",2076],["// CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see",2028]]},{"word":"k","context":[["k++;",14947],["int k;",12021],["int k = 0;",6754],["++k;",6717],["k = 0;",5549],["int i, j, k;",5517],["return k;",5193],["case 'k':",3233],["int i,j,k;",2996],["case 'k':",2990]]},{"word":"key","context":[["CKey key;",30615],["throw runtime_error(\" Invalid public key: \"+ks);",10489],["// Parse the account first so we don't generate a key if there's an error",8026],["if (!pwalletMain->GetKey(keyID, key))",5885],["return key;",5716],["\"Stores the wallet decryption key in memory for <timeout> seconds.\");",5661],["#include \"key.h\"",5199],["throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");",4984],["const std::string& key,",4716],["switch (key) {",4522]]},{"word":"keys","context":[["// Get the set of pub keys assigned to account",3524],["// Gather public keys",3513],["const std::string& ks = keys[i].get_str();",3512],["for (unsigned int i = 0; i < keys.size(); i++)",3512],["pubkeys.resize(keys.size());",3510],["// ~65-byte public keys, plus a few script ops.",3509],["if ((int)keys.size() < nRequired)",3487],["strprintf(\"not enough keys supplied \"",3448],["const Array& keys = params[1].get_array();",3446],["\"Returns Object that has account names as keys, account balances as values.\");",3152]]},{"word":"l","context":[["return l;",10520],["case 'l':",8602],["for(i=0;i<l;i++)",5317],["l++;",4500],["case 'l':",4228],["lua_pop(l, 1);",4059],["int l;",3824],["MutexLock l(&mutex_);",3239],["int l = 0;",2378],["**  @param l  Lua state.",2190]]},{"word":"label","context":[["QVERIFY(rv.label == QString());",5209],["#include \"ui/views/controls/label.h\"",4233],["if (strMethod.find(\"label\") != string::npos)",3560],["// Progress bar and label for blocks download",3338],["rv.label = i->second;",3252],["if (i->first == \"label\")",3241],["ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));",3100],["// Fill in label from address book, if address has an associated label",3091],["// Fill in label from address book, if address has an associated label",3091],["return label;",2992]]},{"word":"language","context":[["* See the License for the specific language governing permissions and",53439],["See the License for the specific language governing permissions and",19884],["* express or implied. See the License for the specific language governing",19811],["// See the License for the specific language governing permissions and",15018],["// See the License for the specific language governing permissions and",13478],["* See the License for the specific language governing permissions and",11288],["See the License for the specific language governing permissions and",8415],["* specific language governing permissions and limitations",8040],["* for the specific language governing rights and limitations under the",5819],["*  See the License for the specific language governing permissions and",5009]]},{"word":"last","context":[["// memdbgon must be the last include file in a .cpp file!!!",8678],["// Find the last block the caller has in the main chain",8258],["// This is done last to help prevent CPU exhaustion denial-of-service attacks.",4228],["// Check the version of the last 100 blocks to see if we need to upgrade:",3943],["// Update the last seen time for this node's address",3834],["// Seed nodes are given a random 'last seen time' of between one and two",3671],["// the last block in an inv bundle sent in response to getblocks. Try to detect",3600],["// find last block in inv vector",3583],["std::advance(last, nFrom+nCount);",3519],["Array::iterator last = ret.begin();",3487]]},{"word":"later","context":[["* (at your option) any later version.",163870],["(at your option) any later version.",132249],["* option) any later version.",98871],["*   (at your option) any later version.                                   *",53031],["* of the License, or (at your option) any later version.",52634],["// any later version.",52513],["*  (at your option) any later version.",35379],["* version 2 of the License, or (at your option) any later version.",33135],["// (at your option) any later version.",32814],["*  any later version.",32796]]},{"word":"layer","context":[["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;",4094],["{int volatile ___ = 1;(void)t;(void)x;(void)layer;",4094],["if ( !layer )",3638],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;",3588],["return layer;",2997],["#include \"ui/compositor/layer.h\"",2841],["{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;",2808],["{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;",2808],["{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;",2808],["{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;",2808]]},{"word":"layout","context":[["setLayout(layout);",7392],["Layout* layout,",4885],["layout->setMargin(0);",4289],["layout->setSpacing(0);",3365],["QVBoxLayout *layout = new QVBoxLayout;",2898],["QVBoxLayout *layout = new QVBoxLayout(this);",2449],["SetLayoutManager(layout);",2289],["#include \"ui/views/layout/grid_layout.h\"",2265],["layout->AddPaddingRow(0, views::kRelatedControlVerticalSpacing);",2170],["#include \"ui/base/layout.h\"",2091]]},{"word":"left","context":[["int left = 0;",7742],["left = dec;",6491],["left = dec & 15;",6491],["left = dec & 3;",6491],["int mode=0, left=0;",6480],["left = left << 5 | dec;",6360],["left = left << 5 | dec;",6360],["right = left;",3766],["return Hash(BEGIN(left), END(left), BEGIN(right), END(right));",3444],["return Hash(BEGIN(left), END(left), BEGIN(right), END(right));",3444]]},{"word":"len","context":[["return len;",15482],["int len;",14545],["socklen_t len = sizeof(sockaddr);",7989],["size_t len;",7311],["ulint\t\tlen;",6873],["len++;",6480],["const unsigned char *pchEnd = pch+len;",6474],["len = 0;",6353],["int len = 0;",6186],["len--;",5195]]},{"word":"length","context":[["return length;",9579],["length = 0;",5810],["int length;",5408],["uint length;",4265],["DCHECK(args.length() == 1);",3850],["if (strWalletPass.length() < 1)",3555],["if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)",3554],["if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)",3554],["if (strHeader == \"content-length\")",3548],["if (strWalletPass.length() > 0)",3518]]},{"word":"level","context":[["// the top level of the deal.II distribution.",17668],["See the README file in the top-level LAMMPS directory.",8796],["uint8 level = getLevel();",6100],["GLint level,",4114],["return level;",3950],["*  LICENSE:     See LICENSE in the top level directory",3887],["uint32 level = getLevel();",3694],["level++;",3525],["if (level > GT_MAX_LEVEL)",3403],["level = GT_MAX_LEVEL;",2874]]},{"word":"library","context":[["* This library is distributed in the hope that it will be useful,",61321],["* This library is free software; you can redistribute it and/or",56375],["// This library is distributed in the hope that it will be useful,",51633],["// This file is part of the GNU ISO C++ Library.  This library is free",51033],["This library is free software; you can redistribute it and/or",43697],["This library is distributed in the hope that it will be useful,",42670],["// with this library; see the file COPYING3.  If not see",42545],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["* License along with this library; if not, write to the Free Software",20257]]},{"word":"license","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975],["// Distributed under the MIT/X11 software license, see the accompanying",65013],["** accordance with the commercial license agreement provided with the",56245],["// Use of this source code is governed by a BSD-style license that can be",25676],["* Use of this source code is governed by a BSD-style license that can be",20089],["* or in the \"license\" file accompanying this file. This file is distributed",19811],["// The full text of the license can be found in the file LICENSE at",17668],["*  Use of this source code is governed by a BSD-style license",13737],["// Distributed under the MIT software license, see the accompanying",13725]]},{"word":"licenses","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["** Licensees holding valid commercial Qt licenses may use this file in",56068],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["// <http://www.gnu.org/licenses/>.",46023],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642]]},{"word":"like","context":[["// Misc warnings like out of disk space and clock is wrong",4124],["//    avoid sending us more work, like chain download requests.",4068],["// expensive-to-check-upon-redemption script like:",3611],["// blizz like 2.0.x",2711],["// We should be phasing out our use of sites like these.  If we need",1832],["// We should be phasing out our use of sites like these. If we need",1530],["// even possibly remotely dangerous like & or >",1424],["// something like n != 1 and have some wiseguy pass in 1 with extra",1018],["Check type equivalence in a name list like <name1>|<name2>|...",890],["// Script is a stack machine (like Forth) that evaluates a predicate",888]]},{"word":"limit","context":[["// Continuously rate-limit free transactions",3849],["printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);",3433],["int limit = sizeof(buffer);",3209],["limit *= 2;",3078],["\"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"",3047],["\"  \\\"sizelimit\\\" : limit of block size\\n\"",3047],["p = new char[limit];",3015],["if (ret >= 0 && ret < limit)",3011],["// limit URI length to prevent a DoS against the QR-Code dialog",2358],["// Try to limit how much needs to be done inside",2081]]},{"word":"line","context":[["std::string line;",18777],["string line;",11701],["line++;",4676],["return line;",4171],["compiler->addError(ScriptCompiler::CE_INVALIDPARAMETERS, prop->file, prop->line,",3726],["string line;",3691],["QString line;",3515],["std::string line;",3461],["// Command-line RPC",3457],["// Command-line options take precedence:",3408]]},{"word":"list","context":[["*    notice, this list of conditions and the following disclaimer.",38135],["*    notice, this list of conditions and the following disclaimer in the",34920],["#include <list>",30643],["return list;",22395],["* are too numerous to list here. Please refer to the COPYRIGHT",20480],["* notice, this list of conditions and the following disclaimer.",19798],["* copyright notice, this list of conditions and the following disclaimer",18185],["*     notice, this list of conditions and the following disclaimer.",17251],["A detailed list of copyright holders can be found in the file \"AUTHORS\".",15333],["**     notice, this list of conditions and the following disclaimer.",13143]]},{"word":"llvm","context":[["using namespace llvm;",23950],["#include \"llvm/Support/raw_ostream.h\"",13169],["#include \"llvm/Support/Debug.h\"",9483],["#include \"llvm/Support/ErrorHandling.h\"",7306],["#include \"llvm/Support/CommandLine.h\"",6352],["#include \"llvm/ADT/Statistic.h\"",5102],["namespace llvm {",4868],["#include \"llvm/ADT/STLExtras.h\"",4850],["#include \"llvm/ADT/SmallString.h\"",4787],["#include \"llvm/IR/Module.h\"",4264]]},{"word":"load","context":[["load();",5810],["// - First load the translator for the base language, without territory",3314],["// - Then load the more specific locale translator",3314],["if (translator.load(lang_territory, \":/translations/\"))",3219],["if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))",3218],["if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))",3218],["if (translatorBase.load(lang, \":/translations/\"))",3218],["// ********************************************************* Step 8: load wallet",2761],["if (!load)",2685],["// ********************************************************* Step 10: load peers",2451]]},{"word":"loc","context":[["pwallet->SetBestChain(loc);",3465],["void static SetBestChain(const CBlockLocator& loc)",3454],["Location loc = this->location();",3161],["loc = 0;",2390],["loc);",2325],["int loc = GetSessionDbcLocale();",1907],["SILLocation loc,",1762],["walletdb.WriteBestBlock(loc);",1624],["void CWallet::SetBestChain(const CBlockLocator& loc)",1616],["if (loc == GetSessionDbcLocale())",1469]]},{"word":"local","context":[["// Get local host ip",4731],["// learn a new local address",3640],["/** vote for a local address */",3639],["// find 'best' local address for a particular peer",3639],["/** check whether a given address is potentially local */",3638],["// get best local address for a particular peer as a CAddress",3638],["// used when scores of local addresses may have changed",3290],["// pushes better local address to peers",3290],["// Get local host IP",2733],["// push to local node",2284]]},{"word":"location","context":[["#include \"base/location.h\"",15693],["Location location)",5088],["location);",4415],["if(dir.isEmpty()) // Default to user documents location",3582],["if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))",3218],["if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))",3218],["Location loc = this->location();",3161],["this->location());",2466],["DBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated location=%p\\n\", cp->ptr));",2407],["getData()->location = kLocationInsideCompartment;",2370]]},{"word":"lock","context":[["CSingleLock lock(m_critSection);",26139],["base::AutoLock lock(lock_);",10638],["lock();",10309],["mutex.lock();",7768],["lock.unlock();",7393],["CSingleLock lock(m_section);",5622],["#include \"base/synchronization/lock.h\"",4276],["CSingleLock lock(g_graphicsContext);",4238],["mysql_mutex_unlock(&acl_cache->lock);",4123],["lock.Leave();",4082]]},{"word":"log","context":[["#include \"utils/log.h\"",15126],["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922],["#include \"log.h\"",9022],["OutputDebugStringA(log);",6524],["#include \"ns3/log.h\"",6266],["#include \"wx/log.h\"",5445],["#include <VBox/log.h>",5146],["char log[1024];",3807],["#include \"log.hpp\"",3750],["// Reopen debug.log on SIGHUP",3658]]},{"word":"long","context":[["typedef long long ll;",6657],["typedef long long ll;",6657],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["long",5212],["long i;",5159],["long style,",4757],["long result;",4006],["// Shutdown will take long enough that the response should get back",3685],["// In case we are on a very long side-chain, it is possible that we already have",3600],["unsigned long nSize = sizeof(pdata);",3249]]},{"word":"loop","context":[["loop",43286],["goto loop;",6891],["goto loop;",5108],["loop {",4837],["__ bind(&loop);",4750],["// The first loop above does all the inexpensive checks.",4053],["loop:",3231],["// - quit the Qt event loop in the execution thread",3096],["// Default implementation of QThread::run() simply spins up an event loop in the thread,",3095],["loop.Run();",2989]]},{"word":"m","context":[["return m;",22366],["delete m;",12679],["m++;",9719],["m = 0;",8515],["case 'm':",7427],["TEST_ASSERT(m);",5873],["return m;",4868],["case 'm':",4269],["int m;",3800],["Stream s = m.Build();",3541]]},{"word":"m_caster","context":[["if (m_caster->GetTypeId() != TYPEID_PLAYER)",23818],["if (m_caster->GetTypeId() == TYPEID_PLAYER)",19899],["m_caster->SendMessageToSet(&data, true);",7003],["Player* player = m_caster->ToPlayer();",5999],["if (Player* modOwner = m_caster->GetSpellModOwner())",3660],["data.append(m_caster->GetPackGUID());",3360],["m_caster->ToPlayer()->SetSpellModTakingSpell(this, false);",3324],["Player* p_caster = (Player*)m_caster;",3201],["targetUnitMap.push_back(m_caster);",2937],["if (Player* player = m_caster->ToPlayer())",2925]]},{"word":"m_creature","context":[["if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())",14859],["if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())",14859],["if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))",5386],["DoScriptText(SAY_DEATH, m_creature);",4101],["m_creature->ForcedDespawn();",3700],["DoScriptText(SAY_AGGRO, m_creature);",3554],["m_creature->GetMotionMaster()->MoveIdle();",2822],["m_creature->InterruptNonMeleeSpells(false);",2812],["m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);",2770],["m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);",2643]]},{"word":"m_spellInfo","context":[["switch (m_spellInfo->Id)",11749],["switch (m_spellInfo->SpellFamilyName)",4090],["switch(m_spellInfo->Id)",4018],["data << uint32(m_spellInfo->Id);",3649],["int32 duration = m_spellInfo->GetDuration();",3374],["pGameObj->SetSpellId(m_spellInfo->Id);",2838],["if (effItr->IsEffectAffected(m_spellInfo, aurEff->GetEffIndex()))",2485],["switch (m_spellInfo->DmgClass)",2265],["int32 duration = GetSpellDuration(m_spellInfo);",2030],["if (m_spellInfo->IsChanneled())",1880]]},{"word":"main","context":[["int main()",124481],["int main() {",51500],["int main(int argc, char *argv[])",49760],["int main()",43081],["#include \"main.h\"",36732],["int main(int argc, char **argv)",26177],["int main(int argc, char* argv[])",26043],["int main(){",22750],["int main(int argc, char** argv)",20124],["int main(int argc, char **argv) {",12434]]},{"word":"make","context":[["// Alternately, find a way to make params[0] mlock()'d to begin with.",10620],["make, have made, use, offer to sell, sell, import, transfer, and",4293],["// This doesn't trigger the DoS code on purpose; if it did, it would make it easier",4076],["// When this block is requested, we'll send an inv that'll make them",3945],["// Check transaction inputs, and make sure any",3611],["// make sure all wallets know about the given transaction, in the given block",3435],["// On new transaction, make an info balloon",3378],["// Clear pindexPrev so future getworks make a new block, despite any failures from here on",3141],["// TODO: make it possible to filter out categories (esp debug messages when implemented)",3092],["// Alternately, find a way to make this input mlock()'d to begin with.",3089]]},{"word":"map","context":[["#include <map>",60342],["#include <map>",25939],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["return map;",9600],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["map<string, string> mapHeaders;",7238],["if (!map)",6809],["typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;",5897]]},{"word":"mask","context":[["int *mask = atom->mask;",8291],["int *mask = atom->mask;",8291],["InReg = _mm_and_si128(_mm_loadu_si128(++in), mask);",6076],["return mask;",5741],["InReg = _mm_and_si128(_mm_load_si128(++in), mask);",5208],["if (mask[i] & groupbit) {",5062],["InReg = _mm_and_si128(DeltaHelper::Delta(CurrIn, initOffset), mask);",3844],["mask++;",3491],["OutReg = _mm_and_si128(tmp, mask);",3472],["return WildcardMatch(str.c_str(), mask.c_str());",3241]]},{"word":"match","context":[["tr(\"The supplied passphrases do not match.\"));",6158],["match = true;",4322],["return error(\"CheckProofOfWork() : hash doesn't match nBits\");",3769],["return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");",3450],["// Attempt to match the parameters to a valid binding.",2703],["bool match = false;",2603],["// Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)",2415],["return match;",2231],["match = false;",2205],["return matcher->match(this, _other);",2184]]},{"word":"matrix","context":[["SkMatrix matrix;",2495],["return matrix;",2162],["#include \"matrix.h\"",1772],["// Column-major matrix tests",1691],["// Row-major matrix tests",1689],["const SkMatrix& matrix,",1327],["if (matrix) {",935],["/* Initialize the matrix */",788],["#include <boost/numeric/ublas/matrix.hpp>",784],["The order of the matrix A.  N >= 0.",753]]},{"word":"max","context":[["obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));",7054],["return max;",4405],["using std::max;",4012],["hSocketMax = max(hSocketMax, pnode->hSocket);",3727],["nConf = std::numeric_limits<int>::max();",3527],["int nConf = std::numeric_limits<int>::max();",3527],["return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());",3521],["hSocketMax = max(hSocketMax, hListenSocket);",3485],["return false; // Exceeds max precision",3210],["if ((int64)tx.nLockTime > std::numeric_limits<int>::max())",2969]]},{"word":"may","context":[["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["** Licensees holding valid commercial Qt licenses may use this file in",56068],["* You may obtain a copy of the License at",45664],["* you may not use this file except in compliance with the License.",45650],["** Alternatively, this file may be used under the terms of the GNU",45135],["* contributors may be used to endorse or promote products derived from",19909],["* You may not use this file except in compliance with the License.",19877],["You may obtain a copy of the License at",19163],["you may not use this file except in compliance with the License.",18509],["** Licensees holding valid Qt Commercial licenses may use this file in",17428]]},{"word":"me","context":[["me->SetReactState(REACT_PASSIVE);",22295],["if (me->HasUnitState(UNIT_STATE_CASTING))",20331],["me->DespawnOrUnsummon();",13782],["me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);",12974],["me->SetReactState(REACT_AGGRESSIVE);",10920],["me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);",10742],["me->InterruptNonMeleeSpells(false);",10564],["me->GetMotionMaster()->MoveIdle();",9896],["me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);",9797],["me->RemoveAllAuras();",9482]]},{"word":"memcpy","context":[["memcpy(&nChecksum, &hash, sizeof(nChecksum));",4196],["memcpy(&nPointer, &pnode, sizeof(nPointer));",4077],["memcpy(pdata, &tmp.block, 128);",3664],["memcpy(phash1, &tmp.hash1, 64);",3631],["memcpy(&ip, &pnSeed[i], sizeof(ip));",3346],["memcpy(&vRecv[nDataPos], pch, nCopy);",2015],["memcpy(&hdrbuf[nHdrPos], pch, nCopy);",2015],["memcpy(&vRecv[nPos], pchBuf, nBytes);",1751],["memcpy(&tmp, &vch[0], sizeof(tmp));",1691],["memcpy(rp.params[0], &arg0, sizeof(uint32_t));",1331]]},{"word":"memory","context":[["#include \"base/memory/scoped_ptr.h\"",35875],["#include <memory>",33654],["#include <memory>",20228],["#include \"base/memory/ref_counted.h\"",11181],["#include \"memory.h\"",8994],["#include <aws/core/utils/memory/stl/AWSStringStream.h>",6712],["#include \"base/memory/ptr_util.h\"",6537],["#include <memory.h>",6168],["#include \"base/memory/weak_ptr.h\"",5773],["\"Stores the wallet decryption key in memory for <timeout> seconds.\");",5661]]},{"word":"memset","context":[["::memset(_has_bits_, 0, sizeof(_has_bits_));",25760],["memset(read_buf, 0, sizeof(read_buf));",11344],["memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));",4006],["memset(&tmp, 0, sizeof(tmp));",3711],["memset(pdata + len, 0, 64 * blocks - len);",3673],["memset(pszExePath, 0, sizeof(pszExePath));",3298],["memset(pdata, 0, sizeof(pdata));",3249],["memset(&nCounter, 0, sizeof(nCounter));",3248],["memset(pdata, 0, nSize);",1693],["memset(this, 0, sizeof(*this));",1544]]},{"word":"menu","context":[["menu->addSeparator();",7425],["menu.addSeparator();",5372],["// Configuration of the tray icon (or dock icon) icon menu",3378],["// Create actions for the toolbar, menu bar and tray/dock icon",3377],["// Create application menu bar",3351],["return menu;",3321],["// Create a decoupled menu bar on Mac which stays even if the window is closed",3248],["// Get the main window's menu bar on other platforms",3246],["QMenu menu;",2899],["delete menu;",2421]]},{"word":"message","context":[["std::string message = FormatException(pex, pszThread);",9177],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309],["strMiscWarning = message;",6264],["printf(\"\\n\\n************************\\n%s\\n\", message.c_str());",5669],["QString message;",4828],["/* Clear status message on focus change */",4794],["switch (message)",4586],["// Process message",4156],["// The message start string is designed to be unlikely to occur in normal data.",4148],["// Scan for message start",4132]]},{"word":"met","context":[["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* are met:",49958],["** met: http://www.gnu.org/copyleft/gpl.html.",36012],["* met:",21202],["* modification, are permitted provided that the following conditions are met:",16487],["// met:",15897],["** requirements will be met: https://www.gnu.org/licenses/lgpl.html and",13497],["** met:",12792],["modification, are permitted provided that the following conditions are met:",9264],["// met:",8757]]},{"word":"method","context":[["request.method = \"GET\";",9502],["PyErr_SetString(PyExc_TypeError, \"function/method should return None\");",4408],["return Box(il2cpp_codegen_class_from_type (method->return_type), &ret);",4226],["// Find method",3751],["// Parse method",3737],["Value valMethod = find_value(request, \"method\");",3608],["request.push_back(Pair(\"method\", strMethod));",3583],["\"After calling this method, you will need to call walletpassphrase again\\n\"",3549],["printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());",3202],["// method definitions",2925]]},{"word":"mi","context":[["CBlockIndex* pindex = (*mi).second;",22473],["if (mi == mapBlockIndex.end())",18521],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["if (mi != mapBlockIndex.end())",8397],["if (mi != mapWallet.end())",8232],["++mi)",7911],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)",7833],["pindexNew->phashBlock = &((*mi).first);",6649]]},{"word":"min","context":[["using std::min;",4143],["unsigned int nCopy = std::min(nRemaining, nBytes);",4026],["item.nConf = min(item.nConf, nDepth);",3570],["item.nConf = min(item.nConf, nConf);",3553],["CAddress addr = addrman.Select(10 + min(nOutbound,8)*10);",3445],["// If -min option passed, start window minimized.",3316],["TCHAR pszArgs[5] = TEXT(\"-min\");",3201],["optionFile << \"Exec=\" << pszExePath << \" -min\\n\";",3191],["\"  -min                   \" + tr(\"Start minimized\") + \"\\n\" +",2895],["return min;",2828]]},{"word":"mode","context":[["switch (mode)",25464],["if (!(mode & (AURA_EFFECT_HANDLE_CHANGE_AMOUNT_MASK | AURA_EFFECT_HANDLE_STAT)))",21401],["switch(mode)",20296],["if (!(mode & AURA_EFFECT_HANDLE_REAL))",16487],["mode = 0;",14740],["mode = 1;",13814],["mode = 2;",13591],["mode = 3;",9921],["/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */",8682],["switch (mode) {",8591]]},{"word":"model","context":[["this->model = model;",24601],["this->model = model;",24601],["if(!model)",22916],["if(model)",13381],["if(model && model->getOptionsModel())",12230],["if(model && model->getOptionsModel())",12230],["model(0),",10563],["if (model)",8800],["model(0)",8442],["dlg.setModel(model->getAddressTableModel());",8032]]},{"word":"modify","context":[["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* modify it under the terms of the GNU General Public License",57808],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// software; you can redistribute it and/or modify it under the",50473],["This program is free software; you can redistribute it and/or modify",46782],["* This program is free software: you can redistribute it and/or modify",41811],["This program is free software: you can redistribute it and/or modify",33381],["modify it under the terms of the GNU General Public License",30025],["* modify it under the terms of the GNU Library General Public",29762]]},{"word":"module","context":[["if (module == NULL) {",21377],["PyObject *module = PyImport_ImportModule((char*) \"ns.core\");",10290],["** This file is part of the QtGui module of the Qt Toolkit.",7859],["PyObject *module = PyImport_ImportModule((char*) \"ns.network\");",7453],["** This file is part of the QtCore module of the Qt Toolkit.",4119],["** This file is part of the QtXmlPatterns module of the Qt Toolkit.",2770],["#include \"ns3/core-module.h\"",2002],["return module;",1854],["** This file is part of the QtDeclarative module of the Qt Toolkit.",1544],["#include \"ns3/network-module.h\"",1388]]},{"word":"more","context":[["* GNU General Public License for more details.",218620],["GNU General Public License for more details.",156688],["* more details.",100721],["*  GNU General Public License for more details.",68934],["// GNU General Public License for more details.",60759],["* GNU General Public License for more details.",48968],["GNU General Public License for more details.",39941],["// GNU General Public License for more details.",39037],["* Lesser General Public License for more details.",31816],["* Library General Public License for more details.",30670]]},{"word":"move","context":[["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["list<COrphan> vOrphan; // list memory doesn't move",3852],["entry.push_back(Pair(\"category\", \"move\"));",3571],["if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);",3347],["\"move <fromaccount> <toaccount> <amount> [minconf=1] [comment]\\n\"",3154],["if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);",3148],["// ignore move item (this slot will be empty at move)",2692],["// ignore move item (this slot will be empty at move)",2692],["// check count of items (skip for auto move for same player from bank)",2420],["// move best block pointer to prevout block",2010]]},{"word":"msg","context":[["if (msg)",21721],["if (msg != EQUIP_ERR_OK)",21194],["if (msg == EQUIP_ERR_OK)",14043],["return msg;",7664],["MSG msg;",7437],["std::stringstream msg;",6172],["throw runtime_error(msg);",6067],["DispatchMessage(&msg);",5070],["TranslateMessage(&msg);",4890],["std::string msg;",4804]]},{"word":"must","context":[["* 1. Redistributions of source code must retain the above copyright",35380],["* 2. Redistributions in binary form must reproduce the above copyright",35214],["*     * Redistributions of source code must retain the above copyright",24202],["*     * Redistributions in binary form must reproduce the above",18845],["//     * Redistributions of source code must retain the above copyright",15393],["//     * Redistributions in binary form must reproduce the above",15332],["**   * Redistributions in binary form must reproduce the above copyright",13144],["**   * Redistributions of source code must retain the above copyright",13144],["* 2.  Redistributions in binary form must reproduce the above copyright",11187],["* 1.  Redistributions of source code must retain the above copyright",11163]]},{"word":"mutex","context":[["mutex_exit(&fil_system->mutex);",9115],["mutex.unlock();",9033],["mutex.lock();",7768],["#include <mutex>",6473],["mutex_enter(&fil_system->mutex);",5622],["mutex_exit(&dict_sys->mutex);",5052],["ut_ad(mutex_own(&dict_sys->mutex));",4306],["mutex_exit(&(log_sys->mutex));",4246],["QMutexLocker locker(&mutex);",4170],["mutex_enter(&dict_sys->mutex);",4104]]},{"word":"n","context":[["\"\\n\"",131443],["\"{\\n\"",81903],["printf(\"\\n\");",66438],["\"\\n\"",47634],["oss << \" Test: \" << test_ << \"\\n\"",44197],["<< \" Details:\\n\"",42050],["\\n\\",41631],["\"}\\n\"",40748],["return n;",37476],["int n;",31430]]},{"word":"nHeight","context":[["return pindexBest->nHeight - pindex->nHeight + 1;",7171],["return pindexBest->nHeight - pindex->nHeight + 1;",7171],["int nHeight = 0;",6109],["nBestHeight = pindexBest->nHeight;",5581],["pindexNew->nHeight = pindexNew->pprev->nHeight + 1;",4146],["pindexNew->nHeight = pindexNew->pprev->nHeight + 1;",4146],["nHeight++;",3959],["pindex->nHeight,",3827],["while (pblockindex->nHeight > nHeight)",3683],["while (pblockindex->nHeight > nHeight)",3683]]},{"word":"name","context":[["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["return name;",25237],["std::string name;",21714],["*     * Neither the name of Google Inc. nor the names of its",18258],["//     * Neither the name of Google Inc. nor the names of its",14619],["if (name.empty())",11153],["QString name;",9985],["const char *name;",8223],["const std::string& name,",7884],["**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names",7172]]},{"word":"names","context":[["* ScummVM is the legal property of its developers, whose names",19064],["*     * Neither the name of Google Inc. nor the names of its",18258],["//     * Neither the name of Google Inc. nor the names of its",14619],["**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names",7172],["//  3. Neither the names of the Blaze development group nor the names of its contributors",5353],["//  3. Neither the names of the Blaze development group nor the names of its contributors",5353],["* 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of",5173],["// found in the LICENSE file. See the AUTHORS file for names of contributors.",4815],["* neither the name of the copyright holders nor the names of its",4404],["**     the names of its contributors may be used to endorse or promote",4216]]},{"word":"namespace","context":[["using namespace std;",436706],["namespace {",256135],["}  // namespace",210015],["namespace {",139477],["using namespace std;",77081],["namespace",61000],["namespace WebCore {",43460],["namespace blink {",40889],["using namespace boost;",39788],["namespace content {",34125]]},{"word":"need","context":[["* or visit www.oracle.com if you need additional information or have any",11601],["\"(you do not need to remember this password)\\n\"",6763],["// TODO: reference any additional headers you need in STDAFX.H",5363],["// stop flight if need",4409],["// Check the version of the last 100 blocks to see if we need to upgrade:",3943],["\"After calling this method, you will need to call walletpassphrase again\\n\"",3549],["// we don't need transactions here.",3357],["// Don't need this on Linux, OpenSSL automatically uses /dev/urandom",3301],["// Check if aura was removed during iteration - we don't need to work on such auras",2385],["// not need after this call",2376]]},{"word":"needed","context":[["/* Add suffix if needed */",3254],["// Ask for passphrase if needed",2191],["\"Returns data needed to construct a block to work on:\\n\"",2167],["// about this message: it's needed when they are recursively walking the",2146],["// InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly.",1264],["return 1; // doesn't include args needed by the script",914],["\"If [params] does not contain a \\\"data\\\" key, returns data needed to construct a block to work on:\\n\"",888],["/* Fix SwigMethods to carry the callback ptrs when needed */",860],["//needed to prevent degenerate behavior and it is important",817],["__ Drop(1);  // Switch value is no longer needed.",748]]},{"word":"net","context":[["#include \"net.h\"",22638],["* Copyright (C) 2006-2009 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>",20885],["namespace net {",19410],["}  // namespace net",18692],["#include \"net/base/net_errors.h\"",16343],["#include \"net/base/net_util.h\"",8133],["net::URLRequest* request,",7529],["if (net == NET_UNROUTABLE)",7293],["#include \"net/url_request/url_request_context_getter.h\"",6328],["#include \"net/base/io_buffer.h\"",6311]]},{"word":"network","context":[["PyObject *module = PyImport_ImportModule((char*) \"ns.network\");",7453],["// for an attacker to attempt to split the network.",4079],["// 2) Remote nodes can measure the latency of the network thread. If this node",4072],["// Do not store addresses outside our network",3993],["int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)",3982],["// Initiate network connections",3760],["// Initiate outbound network connection",3757],["// Dump network addresses",3712],["/** check whether a given address is in a network we can probably connect to */",3638],["/** Make a particular network entirely off-limits (no automatic connects to it) */",3638]]},{"word":"new","context":[["newscript = new Script;",41261],["#define new DEBUG_NEW",21868],["pNewScript = new Script;",19347],["// Create new block",17312],["new ::google::protobuf::internal::GeneratedMessageReflection(",8971],["#include <new>",7671],["daeMetaAttribute *ma = new daeMetaAttribute;",6610],["new HttpNetworkTransaction(DEFAULT_PRIORITY, session.get()));",6355],["meta = new daeMetaElement(dae);",5193],["// Generate a new key that is added to wallet",4481]]},{"word":"next","context":[["next();",12186],["++next;",11753],["m_pDS->next();",10952],["it.next();",10585],["for (GroupReference* itr = group->GetFirstMember(); itr != NULL; itr = itr->next())",5841],["i.next();",5771],["next = itr;",5303],["tok = tok->next();",5218],["m_valueList->next();",4662],["return next;",4384]]},{"word":"no","context":[["//Return since we have no target",17729],["case 0: // we have no bits",6487],["// no changes, quest can't be done for this requirement",6186],["the PATENT CLAIMS, a non-exclusive, no-charge, royalty-free,",4293],["// xgettext: no-c-format",3850],["// In no event shall the Intel Corporation or contributors be liable for any direct,",3755],["// no changes, quest ignore this data",3739],["/** Make a particular network entirely off-limits (no automatic connects to it) */",3638],["throw runtime_error(\"no response from server\");",3616],["In no event will the authors be held liable for any damages arising from the use of this software.",3475]]},{"word":"node","context":[["return node;",29347],["if (!node)",14066],["node = ast;",7273],["if (node)",6691],["node = node->GetNext();",6151],["node = node->GetNext();",6151],["while (node)",5975],["sym(1).Node = node;",5337],["delete node;",4990],["if ( node )",4845]]},{"word":"nodes","context":[["// Relay to a limited number of other nodes",4152],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["// 2) Remote nodes can measure the latency of the network thread. If this node",4072],["// at a time so the setAddrKnowns of the chosen nodes prevent repeats",3940],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Disconnect nodes",3760],["// Disconnect unused nodes",3760],["// Delete disconnected nodes",3760],["// only consider very recently tried nodes after 30 failed attempts",3711],["// Poll the connected nodes for messages",3696]]},{"word":"non","context":[["the PATENT CLAIMS, a non-exclusive, no-charge, royalty-free,",4293],["patentability, enforceability and/or non-infringement of any of the",4293],["// Check for non-standard pay-to-script-hash in inputs",4167],["// save only in non-flight case",3990],["// non-standard. Note that this EvalScript() call will",3947],["// do not allow non-default ports, unless after 50 invalid addresses selected already",3710],["// Note: if you modify this code to accept non-standard transactions, then",3642],["// Special case non-string parameter types",3370],["// IOStream device that speaks SSL but can also speak non-SSL",3219],["\"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"",3105]]},{"word":"normal","context":[["// The message start string is designed to be unlikely to occur in normal data.",4148],["// normal case",3360],["// -tor can override normal proxy, -notor disables tor entirely",3125],["// ... in best-case exactly 4-times-normal target time",2519],["if (!(master->spawnMask & slave->spawnMask))  // they must have a possibility to meet (normal/heroic difficulty)",1985],["// fRequestShutdown getting set, and then does the normal Qt",1959],["normal.normalize();",1656],["else                                            // at normal learning",1604],["// to prevent unexpected lost normal learned spell skip another class talents",1317],["// some spell learned by one class as normal spells or know at creation but another class learn it as talent,",1317]]},{"word":"not","context":[["* along with this program; if not, write to the Free Software",117514],["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["along with this program; if not, write to the Free Software",56481],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["* you may not use this file except in compliance with the License.",45650],["// with this library; see the file COPYING3.  If not see",42545],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["along with this program; if not, write to the Free Software",25711],["* along with this program; if not, write to the Free Software",25102]]},{"word":"notice","context":[["*    notice, this list of conditions and the following disclaimer.",38135],["*    notice, this list of conditions and the following disclaimer in the",34920],["The above copyright notice and this permission notice shall be included in",28001],["The above copyright notice and this permission notice shall be included in",28001],["* notice, this list of conditions and the following disclaimer.",19798],["* copyright notice, this list of conditions and the following disclaimer",18185],["*     notice, this list of conditions and the following disclaimer.",17251],["* The above copyright notice and this permission notice shall be included in",13555],["* The above copyright notice and this permission notice shall be included in",13555],["**     notice, this list of conditions and the following disclaimer.",13143]]},{"word":"now","context":[["time_t now = time(NULL);",10766],["// Deallocate old blocks since they're obsolete now",6138],["time_t now;",5313],["time(&now);",4601],["// Disable replacement feature for now",4162],["// Parse id now so errors from here on will have the id",3689],["// right now.",3439],["struct tm* now_gmt = gmtime(&now);",3252],["base::TimeTicks now = base::TimeTicks::Now();",2614],["base::Time now = base::Time::Now();",2244]]},{"word":"null","context":[["return Value::null;",38765],["return null();",7952],["return QString::null;",6091],["// If locator is null, return the hashStop block",4126],["string strReply = JSONRPCReply(Value::null, objError, id);",3646],["return null;",3552],["reply.push_back(Pair(\"result\", Value::null));",3548],["rpc_result = JSONRPCReplyObj(Value::null,",3482],["rpc_result = JSONRPCReplyObj(Value::null, objError, jreq.id);",3482],["strReply = JSONRPCReply(result, Value::null, jreq.id);",3482]]},{"word":"nullptr","context":[["return nullptr;",296085],["return nullptr;",47114],["nullptr,",16690],["DSP_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);",16256],["nullptr,",6760],["nullptr);",6461],["nullptr);",5266],["nullptr",4426],["__pyx_t_1 = nullptr;",3171],["__pyx_t_2 = nullptr;",1686]]},{"word":"num","context":[["num++;",7019],["return num;",6526],["int num;",5826],["int num = 0;",5484],["num = 0;",3221],["++num;",2909],["for( i = 0; i < num; i++ ) {",1782],["cmdseq.num++;",1524],["savefile->ReadInt( num );",1490],["if (gotoItem(num, iterator).good())",1454]]},{"word":"number","context":[["// localized number formatting.",6549],["\"[minconf] is the minimum number of confirmations before payments are included.\\n\"",6316],["\"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");",5389],["// number or [name] Shift-click form |color|Hspell:spell_id|h[name]|h|r or Htalent form",4450],["// Relay to a limited number of other nodes",4152],["// push the result number",3858],["// reasonable number of ECDSA signature verifications.",3642],["// get number of arguments",3634],["// To help v0.1.5 clients who would see it as a negative number",3433],["QString remainder_str = QString::number(remainder).rightJustified(num_decimals, '0');",3193]]},{"word":"o","context":[["return o;",13216],["Object o;",7638],["case 'o':",7051],["float x, y, z, o;",5910],["delete o;",3849],["case 'o':",3832],["std::ostringstream o;",3754],["const Value& v = find_value(o, t.first);",3498],["void RPCTypeCheck(const Object& o,",3490],["return o;",3013]]},{"word":"obj","context":[["Py_DECREF(obj);",77156],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["if (obj) {",54402],["PyObject* obj = PyBaseObject_Type.tp_getattro((PyObject*)_wrapper, name);",49904],["return obj;",30520],["js_proxy_t *proxy = jsb_get_js_proxy(obj);",25834],["if (obj && !PythonQtSlotFunction_Check(obj)) {",25725],["if (obj && !PythonQtSlotFunction_Check(obj)) {",25725],["Object obj;",25050],["JSObject *obj = JS_THIS_OBJECT(cx, vp);",15958]]},{"word":"object","context":[["return QDialog::eventFilter(object, event);",7596],["delete object;",6080],["return object;",4991],["field -= basedesc->getFieldCount(object);",4959],["if (field < basedesc->getFieldCount(object))",4959],["QVERIFY(object != 0);",4714],["// Construct new block index object",4147],["if (!object)",3972],["// Send error reply from json-rpc error object",3692],["#include \"object.h\"",3441]]},{"word":"of","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* it under the terms of the GNU General Public License as published by",157996],["it under the terms of the GNU General Public License as published by",124782],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["* You should have received a copy of the GNU General Public License along",105989],["** packaging of this file.  Please review the following information to",101077]]},{"word":"off","context":[["// Turn off Microsoft heap dump noise",4960],["/** Make a particular network entirely off-limits (no automatic connects to it) */",3638],["// clang-format off",3437],["// Take highest priority transaction off the priority queue:",2726],["\"<generate> is true or false to turn generation on or off.\\n\"",2489],["// Get parameter 1 off the stack.",2172],["// Turn off microsoft heap dump noise",2072],["// If don't already have its previous block, shunt it off to holding area until we get it",1991],["// If we don't already have its previous block, shunt it off to holding area until we get it",1766],["// clang-format off",1747]]},{"word":"offset","context":[["int offset = 0;",9932],["offset = 0;",8663],["offset++;",7652],["return offset;",7385],["/* -*- mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*- */",5579],["int offset;",4672],["/// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",4086],["switch (offset)",3976],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",3636],["historyPtr += offset;",3095]]},{"word":"ok","context":[["if(!ok)",43673],["bool ok;",40942],["bool ok  = true;",39818],["bool ok = true;",33613],["return ok;",31145],["bool ok = false;",26049],["ok = false;",23552],["if (!ok)",22409],["if (ok)",17792],["if (!s.ok()) {",15014]]},{"word":"old","context":[["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642],["// Deallocate old blocks since they're obsolete now",6138],["// Relay inventory, but don't relay old inventory during initial block download",3784],["addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old",3728],["// slack space in .dat files; that is bad if the old data is",3550],["// BDB seems to have a bad habit of writing old data into",3548],["// If updated, erase old tx from wallet",3445],["return old;",3364],["case ChangePass: // Ask old passphrase + new passphrase x2",3090]]},{"word":"on","context":[["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["distributed under the License is distributed on an \"AS IS\" BASIS,",19893],["* on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",19811],["// distributed under the License is distributed on an \"AS IS\" BASIS,",15791],["// distributed under the License is distributed on an \"AS IS\" BASIS,",13141],["* distributed under the License is distributed on an \"AS IS\" BASIS,",11461],["* software distributed under the License is distributed on an",8460],["distributed under the License is distributed on an \"AS IS\" BASIS,",8179],["/* Do not move this to the XML file, Qt before 4.7 will choke on it */",7286],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686]]},{"word":"one","context":[["* Licensed to the Apache Software Foundation (ASF) under one",9427],["* file, You can obtain one at http://mozilla.org/MPL/2.0/. */",7048],["* the terms of any one of the MPL, the GPL or the LGPL.",5668],["// Licensed to The Open Group (TOG) under one or more contributor license",5340],["* Licensed to the Apache Software Foundation (ASF) under one or more",4891],["// Licensed to the .NET Foundation under one or more agreements.",4240],["// Don't know what it is, just say we already got one",4138],["// Each connection can only send one version message",4131],["// Recursively process any orphan transactions that depended on this one",4123],["// These functions dispatch to one or all registered wallets",3890]]},{"word":"only","context":[["* under the terms of the GNU General Public License version 2 only, as",12895],["* (CDDL) only, as it comes in the \"COPYING.CDDL\" file of the",7877],["\"If the file does not exist, create it with owner-readable-only file \"",6171],["* of those above. If you wish to allow use of your version of this file only",5726],["// Need to update only after we know CreateNewBlock succeeded",5681],["IMPLEMENTATION, where such license applies only to the PATENT",4293],["only as a consequence of further modifications of THIS",4293],["// Coinbase is only valid in a block, not as a loose transaction",4251],["// Each connection can only send one version message",4131],["// spells required only Real aura add/remove",4114]]},{"word":"op","context":[["switch (op) {",7699],["switch (op) {",4297],["switch (op)",3523],["return op;",3332],["// op end success 1",2464],["// Initialize the block index (no-op if non-empty database was already loaded)",1850],["\"op\": \"<\",",1847],["// To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):",1846],["handlers.push_back(op);",1759],["VMThread::execute(&op);",1716]]},{"word":"open","context":[["acceptor->open(endpoint.protocol());",6835],["* This library is open source and may be redistributed and/or modified under",5470],["// This source file is part of the Swift.org open source project",5446],["// If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately",3315],["\"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +",2920],["c-file-offsets:((innamespace . 0)(inline-open . 0)(case-label . +))",2733],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Add a node to connect to and attempt to keep the connection open\"),",2732],["This file is part of the WebKit open source project.",2583],["open();",2248],["if (!file.open(QIODevice::ReadOnly)) {",2118]]},{"word":"operator","context":[["// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)",10176],["const CRPCCommand *CRPCTable::operator[](string name) const",3586],["// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)",3541],["Object operator()(const CKeyID &keyID) const {",3344],["Object operator()(const CNoDestination &dest) const { return Object(); }",3343],["Object operator()(const CScriptID &scriptID) const {",3338],["bool operator()(const TxPriority& a, const TxPriority& b)",2721],["bool CScriptCheck::operator()() const {",1699],["void operator()(WorldPacket& data, LocaleConstant loc_idx)",1504],["void operator()()",1385]]},{"word":"option","context":[["* (at your option) any later version.",163870],["(at your option) any later version.",132249],["* option) any later version.",98871],["*   (at your option) any later version.                                   *",53031],["* of the License, or (at your option) any later version.",52634],["// Free Software Foundation; either version 3, or (at your option)",44217],["*  (at your option) any later version.",35379],["* version 2 of the License, or (at your option) any later version.",33135],["// (at your option) any later version.",32814],["*  the Free Software Foundation; either version 2, or (at your option)",27468]]},{"word":"options","context":[["// { dg-options \"-std=gnu++11\" }",8006],["Options options = CurrentOptions();",7675],["Options options;",5536],["uTypeOptions options;",5408],["// { dg-options \"-std=gnu++0x\" }",5260],["options.create_if_missing = true;",4973],["DestroyAndReopen(options);",4735],["if (option != options.end())",4041],["Reopen(options);",3742],["CreateAndReopenWithCF({\"pikachu\"}, options);",3735]]},{"word":"or","context":[["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* Redistribution and use in source and binary forms, with or without",88602],["* Free Software Foundation; either version 2 of the License, or (at your",85385],["the Free Software Foundation, either version 3 of the License, or",82946],["* the Free Software Foundation; either version 2 of the License, or",81953],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975]]},{"word":"order","context":[["licensee institute or order or agree to the institution of a PATENT",4293],["IMPLEMENTATION.  If you or your agent or licensee institute or order",4293],["// Priority order to process transactions",3858],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// Since the order of destruction of static/global objects is undefined,",2304],["// Disconnect in reverse order",2119],["// because we're already processing them in order of dependency",2061],["// undo transactions in reverse order",2010],["// Send back approval of order and pubkey to use",1982],["CWalletTx order;",1982]]},{"word":"org","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["** Contact: http://www.qt-project.org/legal",46977],["// <http://www.gnu.org/licenses/>.",46023],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** met: http://www.gnu.org/copyleft/gpl.html.",36012],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642],["* available from http://www.virtualbox.org. This file is free software;",20778]]},{"word":"origin","context":[["const GURL& origin,",5583],["* 1. The origin of this software must not be misrepresented; you must not",3210],["1. The origin of this software must not be misrepresented; you must not",2240],["origin,",1905],["const GURL& origin) {",1528],["// 1. The origin of this software must not be misrepresented; you must not",1512],["1. The origin of this software must not be misrepresented; you must",1174],["// 1. The origin of this software must not be misrepresented;",1172],["idVec3 origin;",1104],["form.origin = GURL(\"http://example.com/form.html\");",855]]},{"word":"os","context":[["return os;",21874],["std::ostringstream os;",11059],["return os;",10024],["\"os\": {",7646],["ostringstream os;",5888],["GTUtilsTaskTreeView::waitTaskFinished(os);",4876],["os << std::endl;",3902],["return os.str();",3897],["CHECK_NO_ERROR(os);",3690],["std::ostringstream os;",3285]]},{"word":"other","context":[["*    documentation and/or other materials provided with the distribution.",34821],["* in the documentation and/or other materials provided with the",18194],["std::swap(_cached_size_, other->_cached_size_);",14303],["**     the documentation and/or other materials provided with the",12783],["*     documentation and/or other materials provided with the distribution.",12503],["std::swap(_has_bits_[0], other->_has_bits_[0]);",12292],["// in the documentation and/or other materials provided with the",10822],["if (other != this) {",10046],["documentation and/or other materials provided with the distribution.",9326],["_unknown_fields_.Swap(&other->_unknown_fields_);",9126]]},{"word":"otherwise","context":[["otherwise run, modify, and propagate the contents of THIS",4293],["PATENT CLAIMS or otherwise opposing any of the PATENT CLAIMS.",4293],["// or tort (including negligence or otherwise) arising in any way out of",3814],["otherwise returns false.",3602],["// Set icon state: spinning if catching up, tick otherwise",3377],["// otherwise, descend into the subtrees to extract matched txids and hashes",1769],["// otherwise, don't store any hash, but descend into the subtrees",1768],["//   * otherwise, use v[maj].[min].[rev].[build]-unk",1751],["// otherwise just for transaction history.",1670],["// preferably after adding to map, because mapid may not be valid otherwise",1117]]},{"word":"our","context":[["// Track requests for our stuff",6133],["// Advertise our address",4129],["// Rebroadcast our address",4039],["// Do not store addresses outside our network",3993],["int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)",3982],["// Add our coinbase tx as first transaction",3698],["// always trickle our own transactions",3470],["// Only let other nodes change our time by so much",3395],["// Set up our form data.",3103],["// Immediately start accepting new connections, except when we're cancelled or our socket is closed.",2618]]},{"word":"out","context":[["return out;",43552],["++out;",40460],["out++;",32087],["goto out;",22029],["out <<",13960],["return out;",11947],["_mm_storeu_si128(out++, OutReg);",9696],["goto out;",9634],["_mm_store_si128(out, OutReg);",9154],["out << endl;",9087]]},{"word":"output","context":[["return output;",15221],["::google::protobuf::io::CodedOutputStream* output) const {",14310],["unknown_fields(), output);",11311],["std::ofstream logfile(\"output\");",10590],["return output;",4289],["// Check for negative or overflow output values",4125],["// output error for any still listed (not referenced from appropriate table) ids",3820],["// to give every possible output value an equal possibility",3311],["std::string output;",3303],["TransactionHelperResult out = helper.output();",2941]]},{"word":"over","context":[["// At default rate it would take over a month to fill 1GB",4206],["// Take over previous transactions' spent pointers",4047],["// 1.2 spec: http://groups.google.com/group/json-rpc/web/json-rpc-over-http",3371],["// Allow exceptions from over-long size",2999],["// We're going to call functions which can modify content of the list during iteration over it's elements",2377],["// loop over neighbors of my atoms",2280],["// the block is rebuilt and nNonce starts over at zero.",1687],["// Iterate over all nodes",1672],["tr(\"This transaction is over the size limit.  You can still send it for a fee of %1, \"",1653],["// iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx",1652]]},{"word":"override","context":[["void Register() override",41004],["void Reset() override",31567],["CreatureAI* GetAI(Creature* creature) const override",31512],["SpellScript* GetSpellScript() const override",24695],["void UpdateAI(uint32 diff) override",23247],["AuraScript* GetAuraScript() const override",16425],["void SetUp() override {",16418],["bool Validate(SpellInfo const* /*spellInfo*/) override",12806],["void JustDied(Unit* /*killer*/) override",10702],["void EnterCombat(Unit* /*who*/) override",8889]]},{"word":"owner","context":[["Unit* owner = GetOwner();",13507],["if (!owner)",6551],["if (Unit* owner = GetOwner())",6246],["\"If the file does not exist, create it with owner-readable-only file \"",6171],["if (!owner || owner->GetTypeId() != TYPEID_PLAYER)",4942],["if (!owner || owner->GetTypeId() != TYPEID_PLAYER)",4942],["if (owner)",4471],["if (owner->GetTypeId() == TYPEID_PLAYER)",4120],["\"If the file does not exist, create it with owner-readable-only file permissions.\"),",3565],["if (owner && (owner->GetTypeId() == TYPEID_PLAYER) && owner->ToPlayer()->GetGroup())",3411]]},{"word":"p","context":[["return p;",51749],["p++;",45555],["++p;",20967],["++p)",16926],["Cell cell(p);",12424],["delete p;",11665],["if (p) {",11568],["return p;",10647],["if (p)",10325],["DBUG_PRINT(\"info\",(\"spider this=%p\", this));",9462]]},{"word":"pCreature","context":[["CreatureAI* GetAI(Creature* pCreature) const",19332],["m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();",7394],["if (!pCreature)",6380],["pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());",5257],["pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());",5257],["if (pCreature->isQuestGiver())",4883],["bool OnGossipHello(Player* pPlayer, Creature* pCreature)",4162],["pPlayer->PrepareQuestMenu(pCreature->GetGUID());",4025],["m_bIsRegularMode = pCreature->GetMap()->IsRegularDifficulty();",3690],["bool OnGossipSelect(Player* pPlayer, Creature* pCreature, uint32 /*uiSender*/, uint32 uiAction)",2800]]},{"word":"pItem","context":[["if (Item* pItem = GetItemByPos(INVENTORY_SLOT_BAG_0, i))",16036],["if (!pItem)",12441],["if (pItem)",12241],["return pItem;",11459],["tempcount += pItem->GetCount();",8409],["items.Add(pItem);",5200],["if (Item* pItem = pBag->GetItemByPos(j))",4765],["pItem->SetState(ITEM_CHANGED, this);",4739],["ItemTemplate const* pProto = pItem->GetTemplate();",4567],["count += pItem->GetCount();",4210]]},{"word":"pPlayer","context":[["pPlayer->CLOSE_GOSSIP_MENU();",18446],["pPlayer->PlayerTalkClass->ClearMenus();",6662],["pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());",5257],["pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());",5257],["if (!pPlayer)",4802],["bool OnGossipHello(Player* pPlayer, Creature* pCreature)",4162],["pPlayer->PrepareQuestMenu(pCreature->GetGUID());",4025],["if (Player* pPlayer = GetPlayerForEscort())",3903],["bool OnGossipSelect(Player* pPlayer, Creature* pCreature, uint32 /*uiSender*/, uint32 uiAction)",2800],["Player* pPlayer = GetPlayerForEscort();",2416]]},{"word":"pThis","context":[["AssertPtrReturn(pThis, VERR_INVALID_HANDLE);",2299],["RTCritSectLeave(&pThis->CritSect);",1542],["RTMemFree(pThis);",1427],["if (pThis)",1156],["RTCritSectEnter(&pThis->CritSect);",1016],["PDMCritSectLeave(&pThis->CritSect);",1011],["* @param   pThis           The VMMDev instance data.",816],["if (!pThis)",755],["AssertPtr(pThis);",743],["* @param   pThis       The device state structure.",704]]},{"word":"packet","context":[["WorldPacket packet;",6215],["delete packet;",3102],["player->GetSession()->SendPacket(&packet);",2574],["unsigned char packet[] = {",2440],["return packet;",2312],["#include \"ns3/packet.h\"",2114],["udata.BuildPacket(&packet);",2100],["GetSession()->SendPacket(&packet);",2094],["GetSession()->SendPacket(packet.Write());",1886],["transData.BuildPacket(&packet);",1831]]},{"word":"page","context":[["if (!page)",5603],["#include \"core/page/Page.h\"",3989],["PageScaleConstraints constraints = runViewportTest(page, 320, 352);",3147],["EXPECT_TRUE(page->viewportDescription().userZoom);",3126],["Page* page = webViewHelper.webViewImpl()->page();",2922],["Page* page = webViewHelper.webViewImpl()->page();",2922],["if (page) {",2723],["return page;",2387],["page_t*\t\tpage;",2371],["page = buf_block_get_frame(block);",2283]]},{"word":"painter","context":[["painter->restore();",15280],["painter->save();",15110],["QPainter painter(this);",8882],["painter.end();",7514],["painter.save();",3714],["painter.restore();",3699],["painter->setPen(pen);",3165],["QPainter painter;",2974],["painter->setBrush(Qt::NoBrush);",2919],["painter->setPen(Qt::NoPen);",2899]]},{"word":"pair","context":[["list<pair<CTxDestination, int64> > listReceived;",8253],["list<pair<CTxDestination, int64> > listSent;",8253],["::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);",6771],["typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;",5897],["Cell cell(pair);",3894],["vector<pair<int, CBlockIndex*> > vStack;",3804],["using std::pair;",3106],["// Each pair gives a source name and a seed name.",3014],["set<pair<const CWalletTx*,unsigned int> > setCoins;",2887],["deque<pair<int64, CInv> > vRelayExpiration;",2755]]},{"word":"param","context":[["@param[in]",21961],["* @param   pVM         Pointer to the VM.",7813],["* @param action Pointer to an action.",6674],["@param[out]",5920],["@param[in,out]",4354],["params.push_back(param);",3750],["* @param   pVM             Pointer to the VM.",3355],["* \\param",3336],["BOOST_FOREACH(const std::string &param, strParams)",3302],["* @param yyscanner The scanner object.",3268]]},{"word":"parameter","context":[["throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");",5682],["throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);",4766],["assert(!\"GetWarnings() : invalid parameter\");",3888],["throw JSONRPCError(-8, \"Invalid parameter\");",3874],["// ********************************************************* Step 3: parameter-to-internal-flags",3656],["// ********************************************************* Step 2: parameter interactions",3656],["// see Step 2: parameter interactions for more information about these",3653],["// unused parameter, used to be nMinDepth, keep type-checking it though",3538],["// Special case non-string parameter types",3370],["// parse hex string from parameter",2939]]},{"word":"parameters","context":[["Nan::ThrowError(\"Too many parameters.\");",46573],["args[0] = PythonQtConv::ConvertPythonToQt(methodInfo->parameters().at(0), result, false, NULL, &returnValue);",30082],["// slots: signature, parameters, type, tag, flags",7088],["// Parse parameters",7081],["\"    (parameters\\n\"",4264],["// signals: signature, parameters, type, tag, flags",4174],["throw runtime_error(\"too few parameters\");",3770],["// Prevent warnings for unused parameters...",3319],["// Attempt to match the parameters to a valid binding.",2703],["// Get the number of parameters.",2703]]},{"word":"params","context":[["if (params.size() > 1)",41160],["if (fHelp || params.size() != 1)",36282],["if (params.size() > 0)",35234],["if (fHelp || params.size() != 0)",26936],["if (fHelp || params.size() > 1)",26262],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["string strAccount = AccountFromValue(params[0]);",21333],["if (params.size() > 2)",17426],["if (fHelp || params.size() > 2)",15804]]},{"word":"parent","context":[["QDialog(parent),",33344],[": QObject(parent)",12702],["Q_UNUSED(parent);",12176],["QWidget(parent),",10897],[": QWidget(parent)",9586],["QMainWindow(parent),",9094],["QObject(parent),",7231],["QObject(parent)",6999],["if (parent)",6975],[": QDialog(parent)",5208]]},{"word":"part","context":[["// This file is part of the GNU ISO C++ Library.  This library is free",51033],["** This file is part of Qt Creator.",24818],["* This file is part of VirtualBox Open Source Edition (OSE), as",20779],["// This file is part of the deal.II library.",17668],["/* This file is part of the KDE project",17055],["** This file is part of Qt Creator",13795],["** This file is part of the examples of the Qt Toolkit.",9095],["This source file is part of OGRE",8300],["** This file is part of the Qt Mobility Components.",7901],["** This file is part of the QtGui module of the Qt Toolkit.",7859]]},{"word":"pass","context":[["// Only if ALL inputs pass do we perform expensive ECDSA signature checks.",4056],["// and pass it along with the method name to the dispatcher.",2352],["case Qt::Key_PageUp: /* pass paging keys to messages widget */",2343],["return pass;",2225],["pass = pass && !fail;",1685],["pass = pass && !fail;",1685],["// when doing an explicit upgrade, if we pass the max version permitted, upgrade all the way",1624],["// TODO: pass in scriptChange instead of reservekey so",1604],["// Used to pass flags to the Bind() function",1556],["pass_list.push_back(pass.Pass());",1331]]},{"word":"path","context":[["return path;",29606],["path.close();",23250],["SkPath path;",18262],["boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";",9922],["QPainterPath path;",7593],["path.setFillType(SkPath::kEvenOdd_FillType);",5554],["path.moveTo(0, 0);",5554],["testSimplify(reporter, path, filename);",5433],["base::FilePath path;",5059],["std::string path;",4755]]},{"word":"pblock","context":[["uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();",16148],["pblock->UpdateTime(pindexPrev);",12911],["pblock->hashMerkleRoot = pblock->BuildMerkleTree();",11342],["pblock->hashMerkleRoot = pblock->BuildMerkleTree();",11342],["pblock->nNonce = 0;",9643],["IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);",7748],["FormatHashBuffers(pblock, pmidstate, pdata, phash1);",7366],["pblock->nTime = pdata->nTime;",6023],["pblock->nNonce = pdata->nNonce;",6016],["CBlock* pblock = mapNewBlock[pdata->hashMerkleRoot].first;",6013]]},{"word":"permission","context":[["The above copyright notice and this permission notice shall be included in",28001],["* this software without specific prior written permission.",19944],["* The above copyright notice and this permission notice shall be included in",13555],["*     from this software without specific prior written permission.",11257],["// this software without specific prior written permission.",10813],["**     from this software without specific prior written permission.",8755],["// The above copyright notice and this permission notice shall be included in",8307],["// The above copyright notice and this permission notice shall be included",7343],["* this software without specific prior written permission.",7088],["* The above copyright notice and this permission notice shall be included",5813]]},{"word":"pet","context":[["if (!pet)",12775],["if (pet)",8324],["if (Pet* pet = GetPet())",6619],["Pet* pet = GetPet();",5671],["if (pet->isControlled())",5062],["delete pet;",4536],["pet->SavePetToDB(PET_SAVE_AS_CURRENT);",4342],["return pet;",3556],["else if (Pet* pet = ToCreature()->ToPet())",2645],["if (Unit* pet = GetUnitOwner())",2515]]},{"word":"pfrom","context":[["pfrom->fDisconnect = true;",12950],["pfrom->AddInventoryKnown(inv);",12499],["pfrom->Misbehaving(20);",10745],["pfrom->PushAddress(addr);",8630],["LOCK(pfrom->cs_filter);",8184],["pfrom->Misbehaving(1);",7853],["pfrom->Misbehaving(100);",7678],["pfrom->PushMessage(\"inv\", vInv);",7414],["pfrom->fRelayTxes = true;",6109],["if (pfrom)",6049]]},{"word":"pindex","context":[["CBlockIndex* pindex = (*mi).second;",22473],["pindex = pindex->pprev;",13403],["pindex = pindex->pprev;",13403],["if (!block.ReadFromDisk(pindex))",12214],["if (pindex->pprev)",12125],["pindex = pindex->pnext;",11531],["pindex = pindex->pnext;",11531],["if (!pindex || !pindex->IsInMainChain())",9354],["if (!pindex || !pindex->IsInMainChain())",9354],["if (pindex)",8464]]},{"word":"player","context":[["if (!player)",32404],["player->CLOSE_GOSSIP_MENU();",27345],["if (player)",25342],["player->PlayerTalkClass->ClearMenus();",20740],["player->GetSession()->SendPacket(&data);",14679],["bool OnGossipHello(Player* player, Creature* creature)",10665],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());",9873],["player->PrepareQuestMenu(creature->GetGUID());",7267],["Player* player = handler->GetSession()->GetPlayer();",6543]]},{"word":"pnode","context":[["BOOST_FOREACH(CNode* pnode, vNodes)",53448],["BOOST_FOREACH(CNode* pnode, vNodesCopy)",24282],["pnode->CloseSocketDisconnect();",21264],["pnode->AddRef();",18873],["TRY_LOCK(pnode->cs_vSend, lockSend);",14804],["pnode->fDisconnect = true;",11903],["return (pnode);",11322],["pnode->Release();",11315],["if (pnode->hSocket == INVALID_SOCKET)",11209],["if (!pnode->fDisconnect)",9607]]},{"word":"point","context":[["return point;",3586],["\"amounts are double-precision floating point numbers\"",3000],["// Right-trim excess zeros before the decimal point:",2322],["// Floating point number that is a multiple of the minimum difficulty,",2315],["// at this point, any failure means we can delete the current message",2241],["// Right-trim excess zeros after the decimal point",2204],["// point should only happen with -reindex/-loadblock, or a misbehaving peer.",1734],["QModelIndex index = ui->tableView->indexAt(point);",1624],["void AddressBookPage::contextualMenu(const QPoint &point)",1552],["const gfx::Point& point) {",1543]]},{"word":"pointer","context":[["CBlock* pblock = &pblocktemplate->block; // pointer for convenience",3869],["// Get a pointer to the IShellLink interface.",3357],["// Set pointer to end of history",3098],["struct st_mysql_sys_var*\tvar,\t/*!< in: pointer to",2991],["/* pointer, segment address pair */",2699],["// push the constructed class pointer",2629],["/* pointer to type-specific plugin descriptor */",2535],["CBlock *pblock = &pblocktemplate->block; // pointer for convenience",2084],["// move best block pointer to prevout block",2010],["// Load hashBestChain pointer to end of best chain",1980]]},{"word":"points","context":[["return points;",2293],["DurabilityPointsLoss(pItem, points);",1882],["points = gaiaImport32( p_in, little_endian, endian_arch );",1872],["points.clear();",1705],["//The seed values have some unlikely fixed points which we avoid.",1554],["// update free talent points",1528],["// 3 triangle (h2, h4, h5 points)",1492],["// 1 triangle (h1, h2, h5 points)",1492],["// 2 triangle (h1, h3, h5 points)",1492],["// 4 triangle (h3, h4, h5 points)",1492]]},{"word":"port","context":[["// Allow binding if the port is still in TIME_WAIT state after",3757],["return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));",3627],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");",3581],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");",3581],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);",3541],["port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);",3541],["ip::tcp::resolver::query query(server.c_str(), port.c_str());",3220],["bool connect(const std::string& server, const std::string& port)",3218],["return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));",3084],["port.c_str(), port.c_str(), lanaddr, r, strupnperror(r));",3030]]},{"word":"pos","context":[["pos++;",18539],["return pos;",14444],["int pos = 0;",12958],["++pos;",12249],["pos = 0;",10613],["Position pos;",9464],["int pos;",7972],["if (pos.IsNull())",6082],["const wxPoint& pos,",5375],["if (pos*2+1 < CalcTreeWidth(height-1))",5248]]},{"word":"position","context":[["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["basisinfo_[0]->position(), basisinfo_[1]->position(), basisinfo_[2]->position(), basisinfo_[3]->position(),",10976],["return position;",5224],["// Truncate history from current position",2691],["SetSourcePosition(expr->position());",2349],["position++;",2285],["assert(m.position(0) == 0);",2086],["++position;",2034]]},{"word":"possible","context":[["// and enable it by default or not. Try to enable it, if possible.",3639],["// In case we are on a very long side-chain, it is possible that we already have",3600],["// to give every possible output value an equal possibility",3311],["// as LoadBlockIndex can take several minutes, it's possible the user",3261],["// TODO: make it possible to filter out categories (esp debug messages when implemented)",3092],["*   - Within single quotes, no escaping is possible and no special interpretation takes place",2344],["// reorganized away. This is only possible if this transaction was completely",2075],["// Together, that means that at least one of the following is always possible,",1789],["//  If we reused the old key, it would be possible to add code to look for and",1701],["// (which not yet possible because lang=XX can be overridden in bitcoin.conf in the data directory)",1648]]},{"word":"pragma","context":[["#pragma hdrstop",30543],["#pragma empty_line",18669],["#pragma mark -",11049],["#pragma omp parallel for",10364],["#pragma endregion",9068],["#pragma warning(pop)",7571],["#pragma omp parallel",6966],["#pragma warning(push)",6090],["#pragma pack(pop)",5203],["#pragma warning(disable:4786)",4420]]},{"word":"prefs","context":[["#include \"base/prefs/pref_service.h\"",15131],["#include \"chrome/browser/prefs/pref_service.h\"",4099],["#include \"components/prefs/pref_service.h\"",3477],["Inkscape::Preferences *prefs = Inkscape::Preferences::get();",3241],["#include \"base/prefs/pref_registry_simple.h\"",2613],["PrefService* prefs = profile->GetPrefs();",2252],["#include \"base/prefs/scoped_user_pref_update.h\"",1991],["PrefService* prefs = g_browser_process->local_state();",1909],["PrefService* prefs = profile_->GetPrefs();",1839],["#include \"prefs.h\"",1308]]},{"word":"previous","context":[["// Check against previous transactions",4277],["// Take over previous transactions' spent pointers",4047],["// Add previous supporting transactions first",3600],["// Check it again in case a previous version let a bad block in",3503],["// Add previous txouts given in the RPC call:",2774],["// Fetch previous transactions (inputs):",2646],["\"For security reasons, previous backups of the unencrypted wallet file \"",2206],["tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"",2204],["// Relinquish previous transactions' spent pointers",2121],["\"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"",2109]]},{"word":"prevout","context":[["COutPoint prevout = vin[i].prevout;",8169],["COutPoint prevout = vin[i].prevout;",8169],["COutPoint outpoint = tx.vin[i].prevout;",7514],["const COutPoint &prevout = vin[i].prevout;",5344],["const COutPoint &prevout = vin[i].prevout;",5344],["const CCoins &coins = inputs.GetCoins(prevout.hash);",4662],["return ReadFromDisk(txdb, prevout, txindex);",4224],["if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())",4167],["if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())",4167],["if (txin.prevout.IsNull())",4160]]},{"word":"print","context":[["//// debug print",15925],["/// debug print",10182],["block.print();",7146],["pblock->print();",4299],["// print columns",3815],["// print item",3809],["// print split or gap",3809],["void print() const",3804],["// block.print();",3608],["// print to console",3489]]},{"word":"printf","context":[["printf(\"\\n\");",66438],["printf(\"%s\\n\", strError.c_str());",17732],["printf(\"\\n\");",13005],["printf(\"| \");",10405],["printf(",8178],["printf(\"*** %s\\n\", strMessage.c_str());",6568],["printf(\"socket closed\\n\");",6346],["printf(\"%s\", strErrors.str().c_str());",6265],["printf(\"\\n\\n************************\\n%s\\n\", message.c_str());",5669],["printf(\"OK\\n\");",5277]]},{"word":"private","context":[["private:",432842],["private:",336875],["private slots:",14984],["\"private:\\n\"",4141],["private Q_SLOTS:",3652],["else printf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string().c_str());",3148],["\"Sign a message with the private key of an address\");",3120],["\"Adds a private key (as returned by dumpprivkey) to your wallet.\");",2923],["\"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\" +",2922],["// Rewrite just private keys: rescan to find transactions",2778]]},{"word":"process","context":[["// Recursively process any orphan transactions that depended on this one",4123],["// Priority order to process transactions",3858],["// Recursively process any orphan blocks that depended on this one",3820],["#include <process.h>",3349],["// Make sure only a single Bitcoin process is using the data directory.",2335],["process()->sink().ClearMessages();",2315],["QProcess process;",2200],["// almost as much to process as they cost the sender in fees, because",2082],["// Note that if running -daemon the parent process returns from AppInit2",1957],["#include \"base/process/launch.h\"",1914]]},{"word":"profile","context":[["#include \"chrome/browser/profiles/profile.h\"",36299],["Profile* profile,",13999],["Profile* profile) {",4782],["Profile* profile =",4266],[": profile_(profile),",4088],["Profile* profile = Profile::FromWebUI(web_ui());",4041],["profile,",3738],["DCHECK(profile);",3376],["profile_(profile),",2982],["TestingProfile profile;",2841]]},{"word":"program","context":[["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* along with this program; if not, write to the Free Software",117514],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This program is free software; you can redistribute it and/or modify it",102350],["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["along with this program; if not, write to the Free Software",56481],["*   This program is free software; you can redistribute it and/or modify  *",54624]]},{"word":"project","context":[["** Contact: http://www.qt-project.org/legal",46977],["/* This file is part of the KDE project",17055],["*  in the file PATENTS.  All contributing project authors may",12787],["// This source file is part of the Swift.org open source project",5446],["*  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.",5431],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",4764],["// Copyright 2012 the V8 project authors. All rights reserved.",4672],["// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors",4446],["Tokutek as part of the Fractal Tree project.",4293],["// See the LICENSE file in the project root for more information.",4239]]},{"word":"property","context":[["* ScummVM is the legal property of its developers, whose names",19064],["*  tree. An additional intellectual property rights grant can be found",13737],["// Third party copyrights are property of their respective owners.",3847],["v8::Local<v8::String> property,",2412],["* property including but not limited to intellectual property relating",1705],["* property including but not limited to intellectual property relating",1705],["* xoreos is the legal property of its developers, whose names",1668],["* This material contains CONFIDENTIAL INFORMATION that is the property of",1609],["if ((tx0!=NULL)&&((QObject *)tx0)->property(QTC_DHPROP).isValid()) {",1582],["VisitForStackValue(property->obj());",1462]]},{"word":"proto","context":[["if (!proto)",14783],["proto = 0;",5121],["proto = atoi(ver+7);",5092],["int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)",3386],["_Spell const& spellData = proto->Spells[i];",2397],["ItemTemplate const* proto = item->GetTemplate();",2314],["if(!proto)",2277],["// add the proto and JSClass to the type->js info hash table",2068],["ItemTemplate const* proto = m_items[i]->GetTemplate();",2028],["\"name: \\\"foo.proto\\\" \"",1980]]},{"word":"protobuf","context":[["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641],["DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<",22891],[": ::google::protobuf::Message() {",17525],["target = ::google::protobuf::internal::WireFormatLite::",17049],["::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(",15588],["DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(",14825],["::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(",14660],["::google::protobuf::io::CodedInputStream* input) {",14310],["::google::protobuf::io::CodedOutputStream* output) const {",14310],["::google::protobuf::uint32 tag;",14309]]},{"word":"protocol","context":[["using ::apache::thrift::protocol::TProtocolException;",9392],["if (ftype == ::apache::thrift::protocol::T_STRUCT) {",9321],["if (ftype == ::apache::thrift::protocol::T_STOP) {",9184],["::apache::thrift::protocol::TType ftype;",9184],["if (ftype == ::apache::thrift::protocol::T_STRING) {",6837],["acceptor->open(endpoint.protocol());",6835],["iprot_->skip(::apache::thrift::protocol::T_STRUCT);",4426],["// HTTP protocol",3473],["protocol->prepare_for_resend();",3340],["#include \"protocol.h\"",3049]]},{"word":"provided","context":[["** accordance with the commercial license agreement provided with the",56245],["* modification, are permitted provided that the following conditions",49713],["*    documentation and/or other materials provided with the distribution.",34821],["* modification, are permitted provided that the following conditions are",21256],["* in the documentation and/or other materials provided with the",18194],["* modification, are permitted provided that the following conditions are met:",16487],["// modification, are permitted provided that the following conditions are",15897],["** accordance with the Qt Commercial License Agreement provided with the",14574],["** modification, are permitted provided that the following conditions are",12792],["**     the documentation and/or other materials provided with the",12783]]},{"word":"proxy","context":[["js_proxy_t *proxy = jsb_get_js_proxy(obj);",25834],["if (mapArgs.count(\"-proxy\")) {",7119],["proxyType proxy;",6453],["GetProxy(NET_IPV4, proxy);",4168],["// even when -connect or -proxy is specified",3634],["addrProxy = CService(mapArgs[\"-proxy\"], 9050);",3416],["return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));",3220],["// -tor can override normal proxy, -notor disables tor entirely",3125],["// to protect privacy, do not listen by default if a proxy server is specified",3041],["return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"].c_str()));",3028]]},{"word":"ps","context":[["PAINTSTRUCT ps;",3406],["EndPaint(hWnd, &ps);",1148],["VectorClear( NPC->client->ps.moveDir );",864],["EndPaint(hwnd, &ps);",747],["return ps;",695],["VectorClear( ent->client->ps.moveDir );",680],["hdc = BeginPaint(hWnd, &ps);",652],["PM_SetAnim(pm,SETANIM_TORSO,pm->ps->legsAnim,SETANIM_FLAG_NORMAL);",616],["pm->ps->weaponTime = 0;",583],["pm->ps->saberMove = LS_READY;",578]]},{"word":"ptr","context":[["return ptr;",11856],["ptr++;",9140],["ptr++;",5729],["void *ptr;",4095],["++ptr;",4044],["if (ptr)",3556],["if (ptr) {",3554],["char *ptr;",2893],["if (!ptr) {",2841],["return ptr;",2803]]},{"word":"public","context":[["public:",1270988],["public:",508346],["#include \"content/public/browser/browser_thread.h\"",30636],["#include \"content/public/browser/web_contents.h\"",26274],["#include \"content/public/browser/notification_service.h\"",16924],["\"public:\\n\"",12286],["#include \"content/public/common/content_switches.h\"",11356],["public slots:",11176],["#include \"content/public/browser/render_view_host.h\"",10522],["throw runtime_error(\" Invalid public key: \"+ks);",10489]]},{"word":"published","context":[["* it under the terms of the GNU General Public License as published by",157996],["it under the terms of the GNU General Public License as published by",124782],["* under the terms of the GNU General Public License as published by the",98768],["*  it under the terms of the GNU General Public License as published by",65655],["** General Public License version 2.1 as published by the Free Software",65406],["* License as published by the Free Software Foundation; either",57424],["*   it under the terms of the GNU General Public License as published by  *",54072],["// terms of the GNU General Public License as published by the",50473],["* as published by the Free Software Foundation; either version 2",47322],["License as published by the Free Software Foundation; either",44163]]},{"word":"push","context":[["#pragma warning(push)",6090],["// push the result flag",4696],["// push the result datatype",4172],["#pragma GCC diagnostic push",4031],["// push the result number",3858],["#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac",3609],["// beside \"push data\" in the scriptSig the",3607],["// this situation and push another getblocks to continue.",3600],["#pragma pack(push, 1)",3244],["push       esi",3132]]},{"word":"push_back","context":[["form.fields.push_back(field);",18192],["ret.push_back(entry);",12213],["ret.push_back(obj);",9138],["vNodes.push_back(pnode);",7547],["vInv.push_back(inv);",7283],["vEraseQueue.push_back(inv.hash);",7211],["obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));",7124],["obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));",7054],["vAdd.push_back(addr);",6773],["obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));",6423]]},{"word":"pwalletMain","context":[["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["LOCK2(cs_main, pwalletMain->cs_wallet);",12133],["CWalletDB walletdb(pwalletMain->strWalletFile);",12036],["pwalletMain->TopUpKeyPool();",10869],["if (!pwalletMain->IsCrypted())",10631],["if (pwalletMain->IsLocked())",8290],["pwalletMain->ReacceptWalletTransactions();",7799],["if (!pwalletMain->IsLocked())",7715],["if (pwalletMain)",7451]]},{"word":"q","context":[["delete q;",11284],["case 'q':",4581],["return q;",4251],["q=new QSqlQuery(sql);",4029],["q.pop();",3384],["q=new RDSqlQuery(sql);",3305],["case 'q':",3000],["++q;",2678],["q++;",2115],["--q;",2068]]},{"word":"query","context":[["QSqlQuery query;",4980],["query.exec();",4529],["ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);",3229],["ip::tcp::resolver::query query(server.c_str(), port.c_str());",3220],["ip::tcp::resolver::query query(server.c_str(), port.c_str());",3220],["que_thr_t*\tthr)\t/*!< in: query thread */",2146],["m_pDS->query(strSQL.c_str());",2036],["m_pDS->query( strSQL.c_str() );",2003],["while (query.next()) {",1977],["QSqlQuery query(db);",1875]]},{"word":"quest","context":[["if (!quest)",7838],["// no changes, quest can't be done for this requirement",6186],["Quest const* quest = sObjectMgr->GetQuestTemplate(quest_id);",4185],["// no changes, quest ignore this data",3739],["// skip checked quest id, only state of other quests in group is interesting",2419],["bool OnQuestAccept(Player* player, Creature* creature, Quest const* quest)",2373],["// same objective target can be in many active quests, but not in 2 objectives for single quest (code optimization).",2339],["// this will prevent quest completing without objective",2310],["if (quest)",2212],["Quest const* quest = sObjectMgr->GetQuestTemplate(questId);",2148]]},{"word":"queue","context":[["#include <queue>",19571],["#include <queue>",4125],["// Add transactions that depend on this one to the priority queue",3868],["// - queue executor for deletion (in execution thread)",3100],["#include<queue>",3034],["// This vector will be sorted into a priority queue:",2766],["// Take highest priority transaction off the priority queue:",2726],["magma_queue_t queue )",2027],["// prevent crash at access and unexpected charges counting with item update queue corrupt",1800],["queue       magma_queue_t",1407]]},{"word":"r","context":[["return r;",72527],["CTxDB txdb(\"r\");",31507],["int r;",23145],["return r;",22191],["\"\\r\\n\"",13651],["info.GetReturnValue().Set(Nan::New(r));",13344],["int r;",12486],["case 'r':",10926],["r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,",9458],["GLboolean r = GL_FALSE;",7777]]},{"word":"range","context":[["// Check range",4062],["// The range of the random source must be a multiple of the modulus",3310],["\"  \\\"noncerange\\\" : range of valid nonces\\n\"",3046],["for (; range.first != range.second; ++range.first)",2662],["for (; range.first != range.second; ++range.first)",2662],["for (; range.first != range.second; ++range.first)",2662],["return range;",2525],["throw runtime_error(\"Block number out of range.\");",2252],["return error(\"DisconnectInputs() : prevout.n out of range\");",2116],["for (auto& x0 : *range[1])",2110]]},{"word":"rc","context":[["return rc;",167185],["if (RT_FAILURE(rc))",68316],["if (RT_SUCCESS(rc))",67834],["int rc;",28252],["AssertRC(rc);",20718],["int rc = VINF_SUCCESS;",19309],["AssertRCReturn(rc, rc);",16733],["AssertRCReturn(rc, rc);",16733],["return rc;",14223],["rc = VINF_SUCCESS;",12820]]},{"word":"re","context":[["// Deallocate old blocks since they're obsolete now",6138],["// Ask this guy to fill in what we're missing",4754],["// Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.",3664],["// This ain't Apache.  We're just using HTTP header for the length field",3454],["// If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately",3315],["// Largest block you're willing to create:",2743],["// Skip free transactions if we're past the minimum block size:",2724],["// Immediately start accepting new connections, except when we're cancelled or our socket is closed.",2618],["// We're going to call functions which can modify content of the list during iteration over it's elements",2377],["// through to re-relay it.",2273]]},{"word":"read","context":[["// strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:",3944],["*  @pre Parameters should be parsed and config file should be read.",3647],["stream.read(&vch[0], nLen);",3429],["return state.Abort(_(\"Failed to read block\"));",3389],["std::streamsize read(char* s, std::streamsize n)",3224],["handshake(ssl::stream_base::server); // HTTPS servers read first",3219],["v->read(e);",2933],["v->read(reader);",2696],["string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"",2665],["x.read(iprot_);",2486]]},{"word":"received","context":[["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* You should have received a copy of the GNU General Public License along",105989],["*  You should have received a copy of the GNU General Public License",68451],["// You should have received a copy of the GNU General Public License along",51550],["You should have received a copy of the GNU General Public License",45757],["* You should have received a copy of the GNU General Public License",45078],["// You should have received a copy of the GNU General Public License",35376],["* You should have received a copy of the GNU Lesser General Public",29817],["You should have received a copy of the GNU Library General Public License",28062]]},{"word":"record","context":[["// Read next record",3783],["return error(\"Invalid record\");",1767],["store_record(table,record[1]);",1415],["return record;",1170],["// Rescan if there is a bad transaction record:",1162],["record->addItem(item);",1100],["// Versions prior to 0.4.0 did not support the \"minversion\" record.",1082],["table->record[0])) &&",1036],["printf(\"Error reading next record from wallet database\\n\");",976],["the record */",966]]},{"word":"rect","context":[["return rect;",8822],["RECT rect;",8103],["CRect rect;",5910],["#include \"ui/gfx/rect.h\"",4688],["#include \"ui/gfx/geometry/rect.h\"",3508],["const gfx::Rect& rect,",2572],["const wxRect& rect,",2535],["GetClientRect(&rect);",2189],["wxRect rect;",1660],["QRect rect;",1650]]},{"word":"redistribute","context":[["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// software; you can redistribute it and/or modify it under the",50473],["This program is free software; you can redistribute it and/or modify",46782],["This library is free software; you can redistribute it and/or",43697],["* This program is free software: you can redistribute it and/or modify",41811],["This program is free software; you can redistribute it and/or",40216]]},{"word":"ref","context":[["return ref;",8685],["boost::ref(context),",3509],["while (ref)",1974],["refs.push_back(ref);",1962],["threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));",1938],["ref.IsForward = true;",1925],["ref.TargetNodeClass = NodeClass::DataType;",1921],["AddReferencesItem ref;",1921],["if (ref)",1770],["d->ref.ref();",1727]]},{"word":"reference","context":[["// TODO: reference any additional headers you need in STDAFX.H",5363],["// Need a global reference for the notifications to find the GUI",2976],["/* op2 is a register or memory reference */",1457],["conf->senderRef = reference();",1413],["req->senderRef = reference();",1389],["// set reference point, paddings",1337],["ref->senderRef = reference();",1113],["// Keep a reference on the stack. See NOTE above.",1055],["// if item is a negative, its a reference",824],["reference to the stream.",808]]},{"word":"reg","context":[["regTracker.rsTrackRegTrash(reg);",1985],["return reg;",1740],["Register reg = ToRegister(instr->value());",1623],["genCodeForTree_DONE(tree, reg);",1184],["Register reg) const {",922],["static SkViewRegister reg(MyFactory);",911],["switch (reg)",857],["static GMRegistry reg(MyFactory);",834],["armNextPC = reg[15].I;",780],["RI.regs[reg] = I;",757]]},{"word":"register","context":[["register int i;",2332],["register yy_state_type yy_current_state;",1599],["/* op2 is a register or memory reference */",1457],["/// Create and register test",1452],["// Restore context register.",1421],["// result register contain a valid pointer because it is already",1221],["// contained in the register pointer map.",1221],["register char *yy_cp;",1171],["if ( type == NULL ) { //register as a raw type",1032],["register int i;",923]]},{"word":"reinterpret_cast","context":[["reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;",8535],["void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };",6334],["handle = reinterpret_cast<GEOSContextHandleInternal_t*>(extHandle);",3316],["reinterpret_cast<void**>(&psl));",3297],["reinterpret_cast<void**>(&ppf));",3216],["*reinterpret_cast<int*>(_a[0]) = -1;",2993],["self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;",2845],["reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;",2583],["::std::string(reinterpret_cast<const char*>(value), size));",2071],["reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;",1994]]},{"word":"release","context":[["** This file contains pre-release code and may not be distributed.",14527],["To release a closed-source product which uses JUCE, commercial licenses are",5700],["alock.release();",5172],["release();",5141],["// release outbound grant (if any)",3640],["return list.release();",3206],["return result.release();",2905],["return pblock.release();",2067],["return pblocktemplate.release();",1825],["/* In case MySQL calls this in the middle of a SELECT query, release",1600]]},{"word":"remove","context":[["// remove fake death",9893],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["mempool.remove(tx);",5651],["if (remove)",4857],["remove = true;",4230],["// spells required only Real aura add/remove",4114],["// can be duplicated to remove the ability to spend the first instance -- even after",4051],["boost::filesystem::remove(GetPidFile());",3801],["// remove from vNodes",3758],["vNodesDisconnected.remove(pnode);",3758]]},{"word":"renderer","context":[["if (!renderer)",2959],["#include \"content/public/renderer/render_view.h\"",2384],["#include \"content/renderer/render_thread_impl.h\"",2163],["if (renderer())",1929],["#include \"content/public/renderer/render_thread.h\"",1840],["#include \"content/renderer/render_view_impl.h\"",1515],["return renderer;",1323],["#include \"content/public/renderer/render_frame.h\"",1301],["#include \"content/public/renderer/content_renderer_client.h\"",1018],["#include \"renderer.h\"",973]]},{"word":"req","context":[["jreq.parse(req);",3563],["req->Start();",3513],["static Object JSONRPCExecOne(const Value& req)",3473],["scoped_ptr<SpdyFrame> req(",3415],["if (i->first.startsWith(\"req-\"))",3240],["req.Start();",2454],["std::string idx = request::findValue(&req, \"idx\");",1913],["scoped_ptr<URLRequest> req(default_context_.CreateRequest(",1794],["continue;                               // member (alive or dead) or his corpse at req. distance",1661],["req->senderRef = reference();",1389]]},{"word":"request","context":[["HttpRequestInfo request;",11511],["request.method = \"GET\";",9502],["request.load_flags = 0;",7778],["net::URLRequest* request,",7529],["// Parse request",7256],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917],["// Send request",4593],["// Trigger them to send a getblocks request for the next batch of inventory",3943],["id = find_value(request, \"id\");",3689],["request.url = GURL(\"http://www.google.com/\");",3657]]},{"word":"required","context":[["* Unless required by applicable law or agreed to in writing, software",56276],["Unless required by applicable law or agreed to in writing, software",19395],["// Unless required by applicable law or agreed to in writing, software",16591],["// Unless required by applicable law or agreed to in writing, software",14419],["* Unless required by applicable law or agreed to in writing, software",11545],["Unless required by applicable law or agreed to in writing, software",8478],["* Unless required by applicable law or agreed to in writing,",8471],["* and other provisions required by the GPL or the LGPL. If you do not delete",5726],["*  Unless required by applicable law or agreed to in writing, software",4959],["// spells required only Real aura add/remove",4114]]},{"word":"res","context":[["return res;",171071],["return res;",53317],["if (res != EQUIP_ERR_OK)",31585],["int res;",11095],["_v = SWIG_CheckState(res);",9738],["int res;",8558],["if (res)",8028],["if (res)",7934],["DBUG_RETURN(res);",7928],["if (res != TRI_ERROR_NO_ERROR) {",7437]]},{"word":"reserved","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["// Copyright 2014 The Chromium Authors. All rights reserved.",52484],["** All rights reserved.",43216],["All rights reserved.",41951],["// Copyright 2013 The Chromium Authors. All rights reserved.",41789],["* All rights reserved.",35998],["// All rights reserved.",27445],["// Copyright 2015 The Chromium Authors. All rights reserved.",22004],["// Copyright (c) 2011 The Chromium Authors. All rights reserved.",18204],["// Copyright (c) 2013 The Chromium Authors. All rights reserved.",16151]]},{"word":"reset","context":[["reset();",38712],["s.reset();",17270],["s.reset(read_data, sizeof(read_data));",16714],["ios.reset();",14178],["reset();",8496],["path.reset();",4615],["context.reset(NewContext(NULL));",4067],["void reset()",2541],["// reset state",2178],["this->reset();",1994]]},{"word":"resize","context":[["txNew.vin.resize(1);",7904],["txNew.vout.resize(1);",7755],["pubkeys.resize(keys.size());",3510],["strLine.resize(strLine.size()-1);",3368],["ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());",2188],["txindex.vSpent.resize(txPrev.vout.size());",2117],["resize(size);",1931],["webViewHelper.webView()->resize(WebSize(viewportWidth, viewportHeight));",1790],["vRecv.resize(nPos + nBytes);",1751],["coins.vout.resize(out.n+1);",1660]]},{"word":"response","context":[["ASSERT_TRUE(response != NULL);",9402],["const HttpResponseInfo* response = trans->GetResponseInfo();",7559],["return response;",4521],["// Shutdown will take long enough that the response should get back",3685],["throw runtime_error(\"no response from server\");",3616],["// the last block in an inv bundle sent in response to getblocks. Try to detect",3600],["/* Check response is as expected */",3597],["if (strLine.empty()) // HTTP response is separated from headers by blank line",3373],["EXPECT_EQ(\"HTTP/1.1 200 OK\", response->headers->GetStatusLine());",3350],["response = trans->GetResponseInfo();",2940]]},{"word":"result","context":[["return result;",566191],["return result;",183409],["if (!result)",106673],["Field* fields = result->Fetch();",94858],["if (result) { Py_DECREF(result); }",75633],["if (result) { Py_DECREF(result); }",75633],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["while (result->NextRow());",64748],["if (result)",64507],["delete result;",57987]]},{"word":"results","context":[["return results;",10678],["results.push_back(entry);",3574],["If this results in a DOS the user really",2908],["Array results;",2650],["return results;",1705],["results->AddResult(false);",1699],["results->AddResult(true);",1671],["sqlite3_free_table( results );",1643],["results.clear();",1383],["char **results;",1355]]},{"word":"ret","context":[["return ret;",435582],["return ret;",74996],["int ret;",38218],["int ret = 0;",23060],["bool ret = false;",20160],["ret = true;",18105],["Array ret;",17437],["if (ret)",15649],["if (ret) {",13890],["Object ret;",13072]]},{"word":"return","context":[["return;",7424599],["return false;",6375924],["return true;",4657558],["return 0;",2759110],["return;",1537735],["return false;",1231778],["return NULL;",983899],["return true;",918038],["return 1;",789361],["return -1;",696421]]},{"word":"returns","context":[["* @returns VBox status code.",28471],["// returns true if wasn't already contained in the set",8694],["* @returns IPRT status code.",4838],["lua_pushboolean(L, returns);",4834],["LogFlowFunc((\"returns %Rrc\\n\", rc));",3896],["// IsStandard() call returns false",3607],["otherwise returns false.",3602],["lua_pushnumber(L, returns);",3594],["returns false.",3365],["\"If [data] is specified, tries to solve the block and returns true if it was successful.\");",3293]]},{"word":"retval","context":[["@retval",51732],["return retval;",50225],["return retval;",32880],["retval = false;",11423],["int retval;",8343],["if (retval) {",7545],["bool retval = true;",4223],["int retval;",4216],["retval = true;",3488],["if (retval) return retval;",3427]]},{"word":"right","context":[["right = left;",3766],["return Hash(BEGIN(left), END(left), BEGIN(right), END(right));",3444],["return Hash(BEGIN(left), END(left), BEGIN(right), END(right));",3444],["// right now.",3439],["// and we want it right after the last block so they don't",3287],["// right",2470],["DCHECK(instr->right()->representation().Equals(instr->representation()));",2039],["*     TreeNode *right;",1844],["*     TreeNode(int x) : val(x), left(NULL), right(NULL) {}",1842],["right = CalcHash(height-1, pos*2+1, vTxid);",1761]]},{"word":"rights","context":[["// Copyright (c) 2012 The Chromium Authors. All rights reserved.",140079],["// Copyright 2014 The Chromium Authors. All rights reserved.",52484],["** All rights reserved.",43216],["All rights reserved.",41951],["// Copyright 2013 The Chromium Authors. All rights reserved.",41789],["** rights.  These rights are described in the Digia Qt LGPL Exception",37335],["** rights.  These rights are described in the Digia Qt LGPL Exception",37335],["* All rights reserved.",35998],["in the Software without restriction, including without limitation the rights",29851],["// All rights reserved.",27445]]},{"word":"root","context":[["*  that can be found in the LICENSE file in the root of the source",13737],["*  be found in the AUTHORS file in the root of the source tree.",13737],["root[\"status\"] = \"OK\";",6684],["return root;",6261],["*  LICENSE file in the root directory of this source tree. An additional grant",5816],["// See the LICENSE file in the project root for more information.",4239],["// Licensed under the MIT license. See LICENSE file in the project root for full license information.",3602],["//  LICENSE file in the root directory of this source tree. An additional grant",3433],["if (!root)",3303],["delete root;",3055]]},{"word":"row","context":[["\\row",10542],["row++;",6275],["int row = index.row();",4853],["int row = index.row();",4853],["int row = 0;",4699],["++row;",3982],["Unit unit = unitlist.at(row);",3234],["if(row >= 0 && row < unitlist.size())",3228],["if(row >= 0 && row < unitlist.size())",3228],["mapper->setCurrentIndex(row);",2924]]},{"word":"run","context":[["ios.run();",15479],["void run() {",4415],["otherwise run, modify, and propagate the contents of THIS",4293],["void run()",3242],["// Default implementation of QThread::run() simply spins up an event loop in the thread,",3095],["// stop this loop, and let the outer loop run again (which sleeps, adds seed nodes, recalculates",2772],["// Prioritize by fee once past the priority size or we run out of high-priority",2547],["// { dg-do run { target c++11 } }",2428],["run();",2325],["rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));",1985]]},{"word":"runtime_error","context":[["throw runtime_error(",229703],["throw std::runtime_error( oss.str() );",44286],["throw runtime_error(\" Invalid public key: \"+ks);",10489],["} catch(std::runtime_error &e) {",8229],["throw runtime_error(msg);",6067],["throw std::runtime_error(",4708],["throw runtime_error(\"too few parameters\");",3770],["throw runtime_error(\"couldn't parse reply from server\");",3618],["throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");",3616],["throw runtime_error(\"expected reply to have result, error and id properties\");",3616]]},{"word":"rv","context":[["return rv;",41403],["NS_ENSURE_SUCCESS(rv, rv);",27588],["NS_ENSURE_SUCCESS(rv, rv);",27588],["EXPECT_EQ(ERR_IO_PENDING, rv);",23575],["return rv;",22060],["EXPECT_EQ(OK, rv);",17266],["rv = callback.WaitForResult();",12781],["SendCoinsRecipient rv;",8931],["nsresult rv;",8772],["if (NS_FAILED(rv))",6869]]},{"word":"s","context":[["return s;",64203],["return s;",35783],["s++;",18122],["printf(\"%s\\n\", strError.c_str());",17732],["s.reset();",17270],["s.reset(read_data, sizeof(read_data));",16714],["if (!s.ok()) {",15014],["case 's':",14322],["if (s.ok()) {",12527],["string s;",9954]]},{"word":"sLog","context":[["sLog.outString();",49869],["sLog->outString();",32810],["sLog.outError(\"*****************************************************************************\");",988],["sLog->outDebug(LOG_FILTER_NETWORKIO, \"Opcode %u\", recvPacket.GetOpcode());",853],["sLog.outString(\"\");",736],["sLog.outErrorDb(\"CreatureEventAI:  Event %u Action %u uses incorrect Target type\", i, j+1);",669],["sLog.outDebug(\"Opcode %u\", recvPacket.GetOpcode());",625],["sLog->outErrorDb(\"Creature '%u' linking to '%u' on an unpermitted map.\", guidLow, linkedGuidLow);",575],["sLog->outDebug(LOG_FILTER_BATTLEGROUND, \"BG_AV Quest %i completed (need to implement some events here\", questid);",560],["sLog->outErrorDb(\"CreatureEventAI:  Event %u Action %u uses incorrect Target type\", i, j+1);",528]]},{"word":"sObjectMgr","context":[["Quest const* quest = sObjectMgr->GetQuestTemplate(quest_id);",4185],["Quest const* qInfo = sObjectMgr->GetQuestTemplate(questid);",3870],["PlayerInfo const* info = sObjectMgr->GetPlayerInfo(getRace(), getClass());",2420],["Quest const* qInfo = sObjectMgr->GetQuestTemplate(quest_id);",2176],["Quest const* quest = sObjectMgr->GetQuestTemplate(questId);",2148],["ItemTemplate const* pItemProto = sObjectMgr->GetItemTemplate(cond->SourceEntry);",1978],["CreatureTemplateContainer const* ctc = sObjectMgr->GetCreatureTemplates();",1915],["if (Quest const* quest = sObjectMgr->GetQuestTemplate(questId))",1809],["Quest const* pQuest = sObjectMgr.GetQuestTemplate(quest_id);",1532],["Quest const* qInfo = sObjectMgr.GetQuestTemplate(questid);",1473]]},{"word":"sa","context":[["struct sigaction sa;",5491],["sigemptyset(&sa.sa_mask);",4714],["sa.sa_flags = 0;",4381],["sigaction(SIGINT, &sa, NULL);",3966],["sigaction(SIGTERM, &sa, NULL);",3936],["sa.sa_handler = HandleSIGTERM;",3812],["\\sa setValue()",1598],["StringAccum sa;",1271],["\\sa isValid()",1264],["\\sa setAttributeValue()",1218]]},{"word":"same","context":[["*  of patent rights can be found in the PATENTS file in the same directory.",5816],["// Process this block the same as if we had received it from another node",4477],["\"The username and password MUST NOT be the same.\\n\"",4169],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["// Allow replacing with a newer version of the same transaction",3444],["//  of patent rights can be found in the PATENTS file in the same directory.",3433],["\"  -tor=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\"",2893],["// Fee-per-kilobyte amount considered the same as \"free\"",2789],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use proxy to reach tor hidden services (default: same as -proxy)\"),",2498],["// check count of items (skip for auto move for same player from bank)",2420]]},{"word":"save","context":[["painter->save();",15110],["canvas->save();",5811],["p->save();",5478],["save();",5116],["// save only in non-flight case",3990],["painter.save();",3714],["case 2:                                         // save state",3494],["const void*\t\t\tsave)\t/*!< in: immediate result",3007],["myImage.scaled(EXPORT_IMAGE_SIZE, EXPORT_IMAGE_SIZE).save(fn);",2442],["// this is used in a check before re-enabling the save buttons",2029]]},{"word":"scale","context":[["LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator",9472],["float scale;",2701],["return scale;",1331],["simulateDoubleTap(webViewHelper.webViewImpl(), doubleTapPoint, scale);",1029],["double scale;",1007],["float scale,",982],["scale = 1;",847],["// scale",809],["if (scale) {",801],["float\tscale;",779]]},{"word":"scope","context":[["HandleScope scope(isolate);",20719],["HandleScope scope;",13287],["v8::HandleScope scope(isolate);",7512],["v8::HandleScope scope;",5875],["v8::HandleScope scope(env->GetIsolate());",5366],["Nan::HandleScope scope;",5170],["HandleScope scope;",4901],["v8::HandleScope scope(CcTest::isolate());",4753],["v8::HandleScope scope(isolate);",4707],["FrameScope scope(masm, StackFrame::INTERNAL);",4297]]},{"word":"scoped_ptr","context":[["#include \"base/memory/scoped_ptr.h\"",35875],["scoped_ptr<HttpTransaction> trans(",8068],["scoped_ptr<SpdyFrame>",4187],["scoped_ptr<SpdyFrame> req(",3415],["#include <boost/scoped_ptr.hpp>",2537],["scoped_ptr<aura::Window> window(CreateTestWindowWithDelegate(",2364],["scoped_ptr<base::Value>* value) {",2320],["scoped_ptr<base::Environment> env(base::Environment::Create());",2250],["scoped_ptr<TestingProfile> profile_;",1937],["scoped_ptr<URLRequest> req(default_context_.CreateRequest(",1794]]},{"word":"scoped_refptr","context":[["scoped_refptr<HttpNetworkSession> session(CreateSession(&session_deps_));",4902],["scoped_refptr<HttpNetworkSession> session(CreateSession(&session_deps));",2302],["scoped_refptr<FakePicturePileImpl> pending_pile =",1474],["scoped_refptr<Layer> root = Layer::Create();",1382],["scoped_refptr<base::SingleThreadTaskRunner>",1349],["scoped_refptr<Extension> extension =",1322],["scoped_refptr<TrackedCallback> callback) {",1113],["scoped_refptr<const Extension> extension =",1092],["scoped_refptr<FakePicturePileImpl> active_pile =",1069],["scoped_refptr<CookieMonster> cm(new CookieMonster(NULL, NULL));",1002]]},{"word":"script","context":[["// Construct using pay-to-script-hash:",5763],["#include \"script.h\"",4743],["CScript script;",4348],["// Check for non-standard pay-to-script-hash in inputs",4167],["// Add in sigops done by pay-to-script-hash inputs;",4022],["// expensive-to-check-upon-redemption script like:",3611],["// pay-to-script-hash transactions are evaluating IsStandard scripts",3608],["// script can be anything; an attacker could use a very",3608],["// ~65-byte public keys, plus a few script ops.",3509],["// pay-to-script-hash, which is 3 ~80-byte signatures, 3",3506]]},{"word":"search","context":[["// search stack for merge to",2419],["#include \"chrome/browser/search/search.h\"",1958],["#include \"chrome/browser/search/search.h\"",1958],["CDataStream::iterator pstart = search(vRecv.begin(), vRecv.end(), BEGIN(pchMessageStart), END(pchMessageStart));",1894],["* or you may search the http://www.gnu.org website for the version 2 license,",1746],["fixture.search(text, text + 28, 0);",1669],["// search free slot",1613],["// search stack in bag for merge to",1612],["/* Release a possible FIFO ticket and search latch. Since we will",1010],["// for search at quest start/reward",1004]]},{"word":"second","context":[["const CWalletTx& wtx = (*it).second;",24998],["CBlockIndex* pindex = (*mi).second;",22473],["return it->second;",19798],["delete itr->second;",13423],["return &itr->second;",11974],["const CWalletTx* pcoin = &(*it).second;",8899],["return itr->second;",8802],["return it->second;",7705],["delete it->second;",7610],["return i->second;",7537]]},{"word":"section","context":[["irrevocable (except as stated in this section) patent license to",4293],["Additional permissions under GNU GPL version 3 section 7",2908],["* @section LICENSE",2066],["#pragma omp section",1823],["switch (section) {",1653],["return columns[section];",1274],["//   to be considered safe and assume they can likely make it into this section.",1263],["// Start of CEGUI namespace section",1230],["} // End of  CEGUI namespace section",1162],["// Critical section",1033]]},{"word":"see","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["// Distributed under the MIT/X11 software license, see the accompanying",65013],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["// with this library; see the file COPYING3.  If not see",42545],["// with this library; see the file COPYING3.  If not see",42545],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** conditions see http://qt.digia.com/licensing.  For further information",34492],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["*  along with XBMC; see the file COPYING.  If not, see",18715]]},{"word":"selection","context":[["if(!selection.isEmpty())",4527],["QModelIndexList selection = view->selectionModel()->selectedRows(column);",3299],["// next target selection",2123],["/* warn only when language selection changes by user action (placed here so init via mapper doesn't trigger this) */",2016],["QMessageBox::warning(Gui::getMainWindow(), QObject::tr(\"Wrong selection\"),",1902],["QApplication::clipboard()->setText(selection.at(0).data(role).toString());",1727],["// for now, use a very simple selection metric: the node from which we received",1673],["// Set button states based on selected tab and selection",1657],["// In sending tab, allow deletion of selection",1564],["QApplication::clipboard()->setText(selection.at(0).data(role).toString(), QClipboard::Clipboard);",1183]]},{"word":"self","context":[["if (!self)",7895],["DCHECK(self);",7652],["return self;",6461],["self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;",6406],["self = self;",4309],["self = self;",4309],["printf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString().c_str());",3438],["self->obj = NULL;",3399],["if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)",3288],["self->obj->Ref ();",3268]]},{"word":"send","context":[["// Don't bother if send buffer is too full to respond anyway",6084],["// Be shy and don't send version until we hear",4380],["// Each connection can only send one version message",4131],["// Use deterministic randomness to send to the same nodes for 24 hours",4125],["// send-big-orphans memory exhaustion attack. If a peer has a legitimate",4057],["// When this block is requested, we'll send an inv that'll make them",3945],["// Trigger them to send a getblocks request for the next batch of inventory",3943],["// Don't send anything until we get their version message",3943],["// Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.",3664],["entry.push_back(Pair(\"category\", \"send\"));",3543]]},{"word":"server","context":[["throw runtime_error(\"couldn't parse reply from server\");",3618],["throw runtime_error(\"no response from server\");",3616],["throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));",3563],["filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));",3538],["filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));",3538],["strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");",3506],["if (mapArgs.count(\"-server\"))",3503],["throw runtime_error(\"couldn't connect to server\");",3472],["ip::tcp::resolver::query query(server.c_str(), port.c_str());",3220],["handshake(ssl::stream_base::server); // HTTPS servers read first",3219]]},{"word":"service","context":[["// This is done last to help prevent CPU exhaustion denial-of-service attacks.",4228],["// Why bother? To avoid denial-of-service attacks; an attacker",3611],["ExtensionService* service =",1858],["ExtensionService* service = extensions::ExtensionSystem::Get(",1510],["DCHECK(service);",1460],["if (service)",1447],["if (!service)",1443],["if (!service)",1395],["\"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\" +",1228],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set the number of threads to service RPC calls (default: 4)\"),",1098]]},{"word":"session","context":[["session->SendPacket(&data);",6794],["new HttpNetworkTransaction(DEFAULT_PRIORITY, session.get()));",6355],["scoped_refptr<HttpNetworkSession> session(CreateSession(&session_deps_));",4902],["Player* player = session->GetPlayer();",3673],["Session* session,",2809],["scoped_refptr<HttpNetworkSession> session(CreateSession(&session_deps));",2302],["if (!session)",1888],["if (session)",1777],["scoped_ptr<HttpTransaction> trans(new HttpNetworkTransaction(session));",1544],["base::WeakPtr<SpdySession> session =",1517]]},{"word":"set","context":[["#include <set>",35757],["#include <set>",22592],["// returns true if wasn't already contained in the set",8694],["set<CBitcoinAddress> setAddress;",8029],["args.rval().set(jsret);",6689],["// interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set",6381],["return TRUE;  // return TRUE unless you set the focus to a control",4611],["\"It is also recommended to set alertnotify so you are notified of problems;\\n\"",4134],["set<COutPoint> vInOutPoints;",4084],["set<uint256> setDependsOn;",3856]]},{"word":"setEnabled","context":[["ui->btnSaveAs->setEnabled(false);",7219],["changePassphraseAction->setEnabled(true);",6785],["exportAction->setEnabled(false);",6772],["encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported",6745],["exportAction->setEnabled(true);",5747],["ui->addressEdit->setEnabled(false);",4775],["changePassphraseAction->setEnabled(false);",3427],["encryptWalletAction->setEnabled(true);",3407],["ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(acceptable);",3090],["ui->deleteButton->setEnabled(enabled);",2976]]},{"word":"setText","context":[["ui->capsLabel->setText(tr(\"Warning: The Caps Lock key is on!\"));",4447],["progressBarLabel->setText(tr(\"Synchronizing with network...\"));",3190],["ui->lineEdit->setText(cmd);",3095],["ui->clientVersion->setText(model->formatFullVersion());",3091],["ui->numberOfBlocks->setText(QString::number(count));",3091],["ui->passEdit2->setText(QString(\" \").repeated(ui->passEdit2->text().size()));",3084],["ui->passEdit3->setText(QString(\" \").repeated(ui->passEdit3->text().size()));",3084],["ui->passEdit1->setText(QString(\" \").repeated(ui->passEdit1->text().size()));",3084],["ui->addAsLabel->setText(associatedLabel);",3083],["ui->clientName->setText(model->clientName());",3075]]},{"word":"settings","context":[["QSettings settings;",38311],["settings.endGroup();",12795],["#include \"settings/Settings.h\"",8664],["#include \"settings.h\"",8384],["#include \"settings/AdvancedSettings.h\"",7220],["Settings settings;",4685],["settings->endGroup();",3945],["settings->addAction(optionsAction);",3306],["settings->addSeparator();",3296],["QMenu *settings = appMenuBar->addMenu(tr(\"&Settings\"));",3289]]},{"word":"short","context":[["Nan::ThrowError(\"Array too short.\");",10598],["unsigned short GetListenPort()",3744],["/* Deter brute-forcing short passwords.",3440],["return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));",3084],["static inline unsigned short GetDefaultRPCPort()",2052],["short port;",1739],["if (((unsigned short*)phash)[14] == 0)",1664],["static const unsigned short string[] =",1463],["int e = (((int)sizeof(unsigned short)) * 8);",1200],["short i;",1195]]},{"word":"should","context":[["* You should have received a copy of the GNU General Public License",215305],["You should have received a copy of the GNU General Public License",158432],["* You should have received a copy of the GNU General Public License along",105989],["*  You should have received a copy of the GNU General Public License",68451],["// You should have received a copy of the GNU General Public License along",51550],["You should have received a copy of the GNU General Public License",45757],["* You should have received a copy of the GNU General Public License",45078],["// You should have received a copy of the GNU General Public License",35376],["* You should have received a copy of the GNU Lesser General Public",29817],["You should have received a copy of the GNU Library General Public License",28062]]},{"word":"show","context":[["show();",16199],["w.show();",6876],["labelEncryptionIcon->show();",6498],["this->show();",6451],["window.show();",5916],["window->show();",4487],["dialog->show();",4339],["view.show();",3853],["trayIcon->show();",3742],["splash.show();",3234]]},{"word":"signal","context":[["#include <signal.h>",21887],["#include <signal.h>",8622],["// On stopExecutor signal",3099],["switch (signal)",2385],["// Connect bitcoind signal handlers",2188],["/* Check proxyIp for a valid IPv4/IPv6 address and emit the proxyIpValid signal */",2012],["// signal handler sets fRequestShutdown, which triggers",1959],["signal(SIGPIPE, SIG_IGN);",1904],["boost::signals2::signal<void ()> StopRequests;",1704],["This signal is emitted whenever a property created by this manager",1412]]},{"word":"since","context":[["//Return since we have no target",17729],["\\since 4.2",9251],["\\since 4.4",9122],["\\since 4.5",6951],["\\since 1.1",6285],["// Deallocate old blocks since they're obsolete now",6138],["\\since 4.6",5722],["\\since 1.0",5715],["\\since 4.3",5081],["\\since 4.1",3548]]},{"word":"size","context":[["if (params.size() > 1)",41160],["if (fHelp || params.size() != 1)",36282],["if (params.size() > 0)",35234],["return size;",27609],["if (fHelp || params.size() != 0)",26936],["if (fHelp || params.size() > 1)",26262],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["if (fHelp || params.size() < 1 || params.size() > 2)",25753],["for (unsigned int i = 0; i < vin.size(); i++)",21730],["template<int size, bool big_endian>",19293]]},{"word":"size_t","context":[["size_t i;",24641],["size_t",12752],["size_t i = 0;",12623],["size_t i;",7867],["size_t len;",7311],["size_t size;",7219],["size_t",6813],["size_t pos = 0;",5059],["size_t size = 0;",4925],["size_t count = 0;",4827]]},{"word":"sizeof","context":[["::memset(_has_bits_, 0, sizeof(_has_bits_));",25760],["s.reset(read_data, sizeof(read_data));",16714],["memset(read_buf, 0, sizeof(read_buf));",11344],["socklen_t len = sizeof(sockaddr);",7989],["p_out += sizeof( double );",6048],["p_in += sizeof( double );",5184],["memcpy(&nChecksum, &hash, sizeof(nChecksum));",4196],["memcpy(&nPointer, &pnode, sizeof(nPointer));",4077],["memset(&m_auiEncounter, 0, sizeof(m_auiEncounter));",4006],["setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));",3754]]},{"word":"skip","context":[["xfer += iprot->skip(ftype);",37766],["iprot_->skip(::apache::thrift::protocol::T_STRUCT);",4426],["// AchievementMgr::UpdateAchievementCriteria might also be called on login - skip in this case",4324],["skip = true;",2621],["r.skip(fieldType);",2456],["// check count of items (skip for auto move for same player from bank)",2420],["// skip checked quest id, only state of other quests in group is interesting",2419],["Label skip;",2142],["bool skip = false;",1997],["if(skip == 0)",1978]]},{"word":"slot","context":[["uint8 slot = pos & 255;",4030],["else if (slot == EQUIPMENT_SLOT_OFFHAND)",3801],["if (slot < EQUIPMENT_SLOT_END)",3596],["StopRequests.connect(signals2::slot<void ()>(",3401],["// ignore move item (this slot will be empty at move)",2692],["m_items[slot] = NULL;",2680],["m_items[slot] = pItem;",2371],["switch (slot)",2329],["member_witerator slot = _getMemberWSlot(guid);",2322],["if (slot == m_memberSlots.end())",2278]]},{"word":"so","context":[["furnished to do so, subject to the following conditions:",29897],["* furnished to do so, subject to the following conditions:",15849],["// furnished to do so, subject to the following conditions:",10878],["* Software is furnished to do so, subject to the following conditions:",8100],["// Parse the account first so we don't generate a key if there's an error",8026],["// Software is furnished to do so, subject to the following conditions:",7102],["/* permit persons to whom the Software is furnished to do so, subject to */",4764],["\"It is also recommended to set alertnotify so you are notified of problems;\\n\"",4134],["// at a time so the setAddrKnowns of the chosen nodes prevent repeats",3940],["// Update best block in wallet (so we can detect restored wallets)",3814]]},{"word":"soap","context":[["return soap->error;",32877],["return soap_closesock(soap);",13176],["|| soap_body_end_out(soap)",5274],["|| soap_body_begin_out(soap)",5274],["|| soap_putheader(soap)",5274],["if (soap->error)",5151],["if (soap_getindependent(soap))",4203],["if (soap->body && soap_element_end_in(soap, tag))",4121],["if (soap->body && soap_element_end_in(soap, tag))",4121],["return soap_putindependent(soap);",4103]]},{"word":"socket","context":[["#include <sys/socket.h>",12846],["printf(\"socket closed\\n\");",6346],["#include <sys/socket.h>",6250],["delete socket;",3833],["// socket closed gracefully",3784],["// Service each socket",3760],["// Create socket for listening for incoming connections",3760],["// close socket and cleanup",3757],["// typical socket buffer is 8K-64K",3752],["SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);",3637]]},{"word":"software","context":[["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["// Distributed under the MIT/X11 software license, see the accompanying",65013],["* This program is free software; you can redistribute it and/or",62550],["* This library is free software; you can redistribute it and/or",56375],["* Unless required by applicable law or agreed to in writing, software",56276],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// software; you can redistribute it and/or modify it under the",50473],["This program is free software; you can redistribute it and/or modify",46782],["This library is free software; you can redistribute it and/or",43697]]},{"word":"some","context":[["// some systems don't have IPV6_V6ONLY but are always v6only; others do have the option",3639],["// Restart the file with some of the end",3473],["// Replace some strings and icons, when using the testnet",2785],["// FetchInputs can return false either because we just haven't seen some inputs",2076],["/* Note we are using EXPECT_STREQ() for some cases, as Mongo Driver returns const char*, not string",1967],["// ScanHash scans nonces looking for a hash with at least some zero bits.",1818],["// Return the nonce if the hash has at least some zero bits,",1806],["// clean up some globals (to help leak detection)",1801],["// * We send some data.",1789],["// some instances only have one difficulty",1686]]},{"word":"source","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* Redistribution and use in source and binary forms, with or without",88602],["* 1. Redistributions of source code must retain the above copyright",35380],["// Use of this source code is governed by a BSD-style license that can be",25676],["*     * Redistributions of source code must retain the above copyright",24202],["* file distributed with this source distribution.",20872],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["* Use of this source code is governed by a BSD-style license that can be",20089],["// Redistribution and use in source and binary forms, with or without",19804]]},{"word":"sp","context":[["if( sp != NULL )",13785],["if(sp != NULL)",8433],["sp->in_front_status = 1;",7660],["if (sp != NULL)",3779],["sp->procFlags = PROC_ON_CAST_SPELL;",3219],["return sp;",2328],["//if( sp != NULL )",2194],["sp->EffectApplyAuraName[0] = SPELL_AURA_PROC_TRIGGER_SPELL;",1989],["initpoint(sp);",1734],["sp->procChance = 100;",1562]]},{"word":"space","context":[["// Misc warnings like out of disk space and clock is wrong",4124],["fil_space_t*\tspace;",4020],["// slack space in .dat files; that is bad if the old data is",3550],["uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;",2995],["ulint\t\tspace;",2312],["space = fil_space_get_by_id(id);",2178],["return error(\"AcceptBlock() : out of disk space\");",2114],["return dbg.space();",1847],["//   or there is space left in the buffer, select() for receiving data.",1789],["return state.Error(\"out of disk space\");",1751]]},{"word":"special","context":[["** In addition, as a special exception, Nokia gives you certain additional",40703],["** In addition, as a special exception, Digia gives you certain additional",39820],["** In addition, as a special exception, The Qt Company gives you certain additional",6440],["// indirect, incidental, special, exemplary, or consequential damages",3825],["// Return the last non-special-min-difficulty-rules-block",2706],["*   - Within single quotes, no escaping is possible and no special interpretation takes place",2344],["As a special exception, you may use this file as part of a free software",1857],["** As a special exception, The Qt Company gives you certain additional",1749],["** As a special exception, Nokia, as the sole copyright holder for Qt",1713],["** http://www.gnu.org/copyleft/gpl.html.  In addition, as a special",1636]]},{"word":"specific","context":[["* See the License for the specific language governing permissions and",53439],["* this software without specific prior written permission.",19944],["See the License for the specific language governing permissions and",19884],["* express or implied. See the License for the specific language governing",19811],["// See the License for the specific language governing permissions and",15018],["// See the License for the specific language governing permissions and",13478],["* See the License for the specific language governing permissions and",11288],["*     from this software without specific prior written permission.",11257],["// this software without specific prior written permission.",10813],["**     from this software without specific prior written permission.",8755]]},{"word":"specified","context":[["\"If [account] is specified, assign address to [account].\";",3691],["// if an explicit public IP is specified, do not try to find others",3634],["// even when -connect or -proxy is specified",3634],["\"If [data] is specified, tries to solve the block and returns true if it was successful.\");",3293],["/* No suffix specified, add selected suffix */",3254],["\"If [data] is not specified, returns formatted hash data to work on:\\n\"",3242],["\"If [account] is not specified, returns the server's total available balance.\\n\"",3159],["\"If [account] is specified, returns the balance in the account.\");",3132],["// to protect privacy, do not listen by default if a proxy server is specified",3041],["return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet.c_str()));",3032]]},{"word":"spell","context":[["if (!spell)",8599],["bool Validate(SpellInfo const* /*spell*/)",5263],["spell->prepare(&targets);",4949],["bool Validate(SpellInfo const* /*spell*/) override",4457],["// no spell",3028],["// do character spell book cleanup (all characters)",2682],["if (spell)",2497],["switch (spell->Id)",2386],["if (!IsInWorld() && !learning)                       // spell load case",2154],["spell->m_CastItem = item;",2114]]},{"word":"spellInfo","context":[["if (!spellInfo)",44100],["bool Validate(SpellInfo const* /*spellInfo*/) override",12806],["SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(spellId);",8185],["if(!spellInfo)",4975],["bool Validate(SpellInfo const* /*spellInfo*/) OVERRIDE",4654],["bool Validate(SpellInfo const* /*spellInfo*/)",3985],["if (spellInfo)",3625],["SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(spell_id);",2768],["if (item != ignoreItem && item->IsFitToSpellRequirements(spellInfo))",2652],["SpellEntry const *spellInfo = sSpellStore.LookupEntry(spellId);",2618]]},{"word":"spells","context":[["spells[i].casttime = spells[i].cooldown;",7288],["spells[i].casttime = spells[i].cooldown;",7288],["comulativeperc += spells[i].perctrigger;",7055],["_unit->setAttackTimer(spells[i].attackstoptimer, false);",7055],["switch(spells[i].targettype)",6095],["spells[0].attackstoptimer = 1000;",5518],["spells[0].instant = true;",5093],["_unit->CastSpell(_unit, spells[i].info, spells[i].instant); break;",4948],["_unit->CastSpell(_unit, spells[i].info, spells[i].instant); break;",4948],["_unit->CastSpell(target, spells[i].info, spells[i].instant); break;",4878]]},{"word":"src","context":[["#include \"googleurl/src/gurl.h\"",7150],["src++;",5208],["#include \"src/v8.h\"",4019],["emit_sse_operand(dst, src);",3697],["return MoveFileExA(src.string().c_str(), dest.string().c_str(),",3333],["int rc = std::rename(src.string().c_str(), dest.string().c_str());",3332],["bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)",3327],["out += \"<td class=\\\"icon\\\" width=\\\"32\\\"><img src=\\\"\" + categoryClass(category) + \"\\\"></td>\";",3102],["return src;",2982],["emit_optional_rex_32(dst, src);",2521]]},{"word":"ss","context":[["std::stringstream ss;",46288],["return ss.str();",25484],["std::ostringstream ss;",24290],["stringstream ss;",18208],["ss.str(\"\");",12545],["ss << strMessageMagic;",12196],["Aws::StringStream ss;",12009],["CDataStream ss(SER_GETHASH, 0);",10942],["std::stringstream ss;",10084],["CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",8903]]},{"word":"st","context":[["struct stat st;",7529],["st->cr();",7392],["struct stat st;",3859],["return st;",2633],["SYSTEMTIME st;",2520],["var_a = GetVariable( st->a );",2423],["k = read_keyword(st);",1711],["var_b = GetVariable( st->b );",1569],["nl_indent(st);",1539],["return st;",1490]]},{"word":"stack","context":[["popstack(stack);",26138],["#include <stack>",15351],["if (stack.size() < 2)",11677],["if (stack.size() < 1)",9971],["if (stack.empty())",6302],["stack.push_back(bn.getvch());",5086],["stack.pop();",4334],["stack.push_back(vch2);",4096],["stack.push_back(vch);",4076],["stack.push_back(vch1);",4076]]},{"word":"start","context":[["timer.start();",8619],["start();",6722],["//Wyrmgus start",5982],["return start;",5971],["thread->start();",5027],["// The message start string is designed to be unlikely to occur in normal data.",4148],["// Scan for message start",4132],["//  (4) message start",4128],["int start = 0;",4054],["start = 0;",4044]]},{"word":"state","context":[["CValidationState state;",29433],["return state;",10775],["switch (state) {",9502],["switch (state) {",8829],["lua_error(state);",6986],["switch (state)",6819],["switch(state)",4983],["if (state)",4655],["return state.Abort(_(\"System error: \") + e.what());",4553],["return state.Error();",4456]]},{"word":"statement","context":[["statement.",3338],["// The copyright notices in the Software and this entire statement, including",3313],["* version.  If you delete this exception statement from all source",1497],["* do not wish to do so, delete this exception statement from your",1497],["#include \"sql/statement.h\"",1455],["you do not wish to do so, delete this exception statement from",1088],["@param stmt               prepared statement",1064],["This statement will be replicated as a statement, even when using",1045],["This statement will be replicated as a statement, even when using",1045],["sql::Statement statement(GetDB().GetCachedStatement(SQL_FROM_HERE,",1009]]},{"word":"static","context":[["// static",217730],["static",113343],["static void",109796],["static void",71007],["static const PythonQtMethodInfo* methodInfo = PythonQtMethodInfo::getCachedMethodInfoFromArgumentList(2, argumentList);",52660],["static int",36293],["static",34905],["static bool",28102],["static int",26241],["// static",24988]]},{"word":"static_cast","context":[["QKeyEvent *ke = static_cast<QKeyEvent *>(event);",6604],["static_cast<monitor_type_t>(",3624],["static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())",3407],["QWindowStateChangeEvent *wsevt = static_cast<QWindowStateChangeEvent*>(e);",3371],["return QVariant(static_cast<int>(unit));",3233],["QWidget *widget = static_cast<QWidget*>(obj);",3177],["if (!static_cast<JSDOMWindow*>(thisObject)->allowsAccessFrom(exec))",2888],["QKeyEvent *keyevt = static_cast<QKeyEvent*>(event);",2344],["JSDOMWindow* castedThis = static_cast<JSDOMWindow*>(asObject(slotBase));",2122],["BaseClassType *const base = static_cast<BaseClassType*>(",1911]]},{"word":"stats","context":[["#define X(name) stats.name = name",3688],["void CNode::copyStats(CNodeStats &stats)",3681],["ReadStats stats(9);",2743],["// only players have base stats",1868],["// hide coin control stats",1740],["// show coin control stats",1740],["SEQAN_ASSERT_EQ(stats.scoreCount[0][0],0);",1683],["stats.fSyncNode = (this == pnodeSync);",1666],["info->stats[STAT_STRENGTH]  += (lvl > 9 && !(lvl%2) ? 1: 0);",1635],["// save base values (bonuses already included in stored stats",1613]]},{"word":"status","context":[["return status;",54729],["return status;",31679],["* @returns VBox status code.",28471],["int status;",14473],["if (U_FAILURE(status)) {",12928],["UErrorCode status = U_ZERO_ERROR;",11862],["TEST_CHK(status == FDB_RESULT_SUCCESS);",8048],["if (!status.ok()) {",6762],["root[\"status\"] = \"OK\";",6684],["if (status.IsError())",6078]]},{"word":"std","context":[["using namespace std;",436706],["using namespace std;",77081],["std::ostringstream oss;",59605],["<< std::endl;",48560],["std::stringstream ss;",46288],["throw std::runtime_error( oss.str() );",44286],["<< std::endl;",39140],["std::cout << std::endl;",38943],["std::cout << std::endl;",38943],["catch (std::exception& e) {",34755]]},{"word":"stderr","context":[["fprintf(stderr,",33311],["ut_print_timestamp(stderr);",16892],["fprintf(stderr,",10996],["fflush(stderr);",9309],["fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());",6309],["fprintf(stderr, \"\\n\");",5432],["fflush(stderr);",5247],["stderr);",5188],["fprintf(stderr, \"Error: Specified directory does not exist\\n\");",4166],["putc('\\n', stderr);",3920]]},{"word":"step","context":[["bar.step();",38566],["// Limit adjustment step",2942],["Ndb* pNdb = GETNDB(step);",2621],["step++;",2033],["bar2.step();",1740],["step = 0;",1330],["int step;",1126],["step = 1;",1058],["bool Player::UpdateSkill(uint32 skill_id, uint32 step)",806],["int step = 0;",796]]},{"word":"still","context":[["// still computed and checked, and any change will be caught at the next checkpoint.",4015],["// output error for any still listed (not referenced from appropriate table) ids",3820],["// Allow binding if the port is still in TIME_WAIT state after",3757],["/// Note: This interface may still be subject to change.",3506],["// Replace the first entry if it is still unused",3329],["// item set bonuses applied only at equip and removed at unequip, and still active for broken items",2420],["// errors now are not fatal, we still did a reorganisation to a new chain in a valid way",2081],["// if it still fails, it probably means we can't even create the database env",1907],["if (vnThreadsRunning[THREAD_ADDEDCONNECTIONS] > 0) printf(\"ThreadOpenAddedConnections still running\\n\");",1793],["if (vnThreadsRunning[THREAD_DUMPADDRESS] > 0) printf(\"ThreadDumpAddresses still running\\n\");",1792]]},{"word":"stmt","context":[["trans->Append(stmt);",73735],["CharacterDatabase.Execute(stmt);",38702],["stmt->setUInt32(0, guid);",15711],["stmt->setUInt32(0, lowGuid);",14773],["PreparedQueryResult result = CharacterDatabase.Query(stmt);",13316],["stmt->setUInt32(0, GetGUIDLow());",11572],["LoginDatabase.Execute(stmt);",7504],["PreparedStatement* stmt = NULL;",7475],["WorldDatabase.Execute(stmt);",7447],["stmt->setUInt32(0, GUID_LOPART(guid));",5584]]},{"word":"stop","context":[["stop();",18856],["// stop flight if need",4409],["timer.stop();",4374],["Value stop(const Array& params, bool fHelp)",3639],["// Check for stop or if block needs to be rebuilt",3321],["stop = true;",3069],["\"stop\\n\"",2965],["// stop this loop, and let the outer loop run again (which sleeps, adds seed nodes, recalculates",2772],["timer->stop();",2619],["stop = index + ((bytes_size - index) / width) * width;",2348]]},{"word":"store","context":[["// Do not store addresses outside our network",3993],["// do that because they want to know about (and store and rebroadcast and",2146],["// if at height 0, or nothing interesting below, store hash and stop",1768],["// otherwise, don't store any hash, but descend into the subtrees",1768],["// store as flag bit",1767],["// not specific slot or have space for partly store only in specific slot",1710],["// not specific bag or have space for partly store only in specific bag",1605],["// * if e<9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)",1506],["table->field[0]->store(STRING_WITH_LEN(\"def\"), cs);",1167],["// store",1162]]},{"word":"str","context":[["ASSERT_EQUALS(\"\", errout.str());",51392],["return str;",45278],["throw std::runtime_error( oss.str() );",44286],["return ss.str();",25484],["string str;",14914],["return str;",14530],["ss.str(\"\");",12545],["std::string str;",11116],["QString str;",9765],["return s.str();",9428]]},{"word":"strcmp","context":[["if (strcmp(ifa->ifa_name, \"lo\") == 0) continue;",3718],["if (strcmp(ifa->ifa_name, \"lo0\") == 0) continue;",3718],["if ( strcmp( node->Value(), _value ) == 0 )",939],["if (strcmp(c,\"NULL\") == 0) {",888],["if (strcmp(var->name,n) == 0) {",858],["if (!strcmp(lex_user->user.str,user) &&",602],["if (!std::strcmp(argv[i], \"--\")) {",579],["ACE_OS::strcmp (",539],["} else if (strcmp(argv[0],\"-q\")==0) {",533],["(strcmp(thd->security_ctx->priv_user, user) ||",453]]},{"word":"stream","context":[["return stream;",11802],["stream << \",\";",9328],["getline(stream, str);",5271],["stream << indent_str;",5010],["std::stringstream stream;",5003],["stream << \"\\n\";",5002],["conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;",4858],["#include <boost/iostreams/stream.hpp>",4851],["delete stream;",4403],["// Send stream from relay memory",4136]]},{"word":"string","context":[["#include <string>",194111],["#include <string.h>",129198],["#include <string>",96152],["#include <string.h>",41818],["std::string",24151],["using std::string;",23205],["std::string name;",21714],["string strAccount = AccountFromValue(params[0]);",21333],["return std::string();",19110],["std::string line;",18777]]},{"word":"strings","context":[["#include \"base/strings/utf_string_conversions.h\"",44138],["#include \"base/strings/string_util.h\"",31827],["#include \"base/strings/string_number_conversions.h\"",27808],["#include \"base/strings/stringprintf.h\"",26044],["#include \"base/strings/string_split.h\"",8944],["#include \"base/strings/string16.h\"",7373],["#include \"base/strings/string_piece.h\"",4001],["// Parameters default to strings",3598],["// Convert strings to command-specific RPC representation",3361],["/** display language strings as \"language (locale name)\", e.g. \"German (de)\" */",2969]]},{"word":"strlen","context":[["if (pszHome == NULL || strlen(pszHome) == 0)",3446],["send(hSocket, pszGet, strlen(pszGet), MSG_NOSIGNAL);",3383],["strLine = strLine.substr(strLine.find(pszKeyword) + strlen(pszKeyword));",3372],["vchRet.reserve(strlen(p)*3/4);",3302],["vchRet.reserve((strlen(p))*5/8);",3174],["if (pszFormat[strlen(pszFormat) - 1] == '\\n')",2987],["COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));",2962],["fwrite(szTemp, strlen(szTemp), sizeof(char), pFile);",1892],["dwL = strlen(szMessage);",1817],["const char* pszEnd = psz + strlen(psz);",1691]]},{"word":"struct","context":[["typedef struct {",22763],["struct {",16142],["typedef struct",15786],["struct",14400],["static const struct {",9749],["struct timeval tv;",9732],["struct sockaddr_storage sockaddr;",8437],["struct stat st;",7529],["struct sockaddr sockaddr;",6839],["struct {",6501]]},{"word":"style","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["// Use of this source code is governed by a BSD-style license that can be",25676],["* Use of this source code is governed by a BSD-style license that can be",20089],["*  Use of this source code is governed by a BSD-style license",13737],["/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */",8682],["*  This source code is licensed under the BSD-style license found in the",5816],["long style,",4757],["const ImGuiStyle& style = g.Style;",4515],["//  This source code is licensed under the BSD-style license found in the",3433],["switch (style) {",3251]]},{"word":"success","context":[["return success;",27428],["success = false;",17138],["bool success = false;",12529],["if (!success)",12289],["if (!success) {",11654],["success = true;",11112],["if (success)",10410],["bool success = true;",10306],["return success;",9080],["if (!success) {",8220]]},{"word":"support","context":[["// For compilers that support precompilation, includes \"wx.h\".",8624],["// Init OpenSSL library multithreading support",4801],["throw; // support pthread_cancel()",3665],["// BIP16 support.",2949],["// For compilers that support precompilation, includes \"wx/wx.h\".",2834],["// Shutdown OpenSSL library multithreading support",2499],["// Init openssl library multithreading support",1946],["#include \"core/support/Debug.h\"",1684],["\"which goes to the nodes that process your transaction and helps to support the network.  \"",1667],["// client without expansion support",1625]]},{"word":"sure","context":[["// Make sure the merkle branch connects to this block",3946],["// Make sure it's successfully written to disk before changing memory structure",3618],["// Check transaction inputs, and make sure any",3611],["// Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses",3518],["///// are we sure this is ok when loading transactions or restoring block txes",3454],["// make sure all wallets know about the given transaction, in the given block",3435],["// Install global event filter that makes sure that long tooltips can be word-wrapped",3219],["// Prefix <qt/> to make sure Qt detects this as rich text",2609],["// Make sure only a single Bitcoin process is using the data directory.",2335],["///// not sure which I want to get rid of",1862]]},{"word":"switch","context":[["switch (type)",47706],["switch (type) {",35124],["switch (eventId)",33060],["switch (type) {",28072],["switch (mode)",25464],["switch(mode)",20296],["switch(unit)",19703],["switch (action)",17373],["switch (_id) {",17113],["switch(type)",15294]]},{"word":"sync","context":[["#include \"sync.h\"",10643],["#include <boost/interprocess/sync/file_lock.hpp>",3889],["Lock sync(*this);",3737],["sync();",3004],["#include \"chrome/browser/sync/profile_sync_service_factory.h\"",2845],["#include \"chrome/browser/sync/profile_sync_service.h\"",2741],["sync.Wait();",2660],["// sync-checkpoint should always be accepted block",2263],["// Start block sync",2138],["// ppcoin: ask for pending sync-checkpoint if any",1853]]},{"word":"sys","context":[["#include <sys/types.h>",42645],["#include <sys/stat.h>",37623],["#include <sys/types.h>",20910],["#include <sys/time.h>",18983],["#include <sys/stat.h>",17738],["#include <sys/socket.h>",12846],["#include <sys/ioctl.h>",9509],["#include <sys/time.h>",7542],["#include <sys/mman.h>",6467],["#include <sys/socket.h>",6250]]},{"word":"system","context":[["#include \"system.h\"",9557],["system(\"pause\");",7006],["catch(boost::system::system_error &e)",6093],["*   This file is part of the FreeCAD CAx development system.              *",5329],["#include \"common/system.h\"",5125],["error = boost::system::error_code();",4710],["boost::system::error_code ec;",4629],["#include <blazetest/system/MathTest.h>",4268],["boost::system::error_code ec;",3783],["const boost::system::error_code& error)",3737]]},{"word":"t","context":[["return t;",23233],["/* Raise an exception if the arguments couldn't be parsed. */",13073],["case 't':",11587],["// ----------- S t a t e -------------",10046],["// ----------- S t a t e -------------",10046],["// returns true if wasn't already contained in the set",8694],["{int volatile ___ = 1;(void)t;(void)x;",8188],["// Parse the account first so we don't generate a key if there's an error",8026],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;",7682],["int t;",7269]]},{"word":"tab","context":[["switch(tab)",5242],["/// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",4086],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",3636],["tab == SendingTab ?",3118],["if(tab == SendingTab)",2621],["// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",2588],["WebContents* tab = browser()->tab_strip_model()->GetActiveWebContents();",2133],["/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-",1867],["exportAction->setToolTip(tr(\"Export the data in the current tab to a file\"));",1790],["// Clicking on \"Verify Message\" in the address book sends you to the verify message tab",1749]]},{"word":"table","context":[["QTableView *table = ui->tableView;",9750],["QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);",6516],["\\table",5650],["TABLE *table;",4762],["table->file->print_error(error, MYF(0));",4712],["dict_table_t*\ttable;",4245],["restore_record(table, s->default_values);",4036],["// output error for any still listed (not referenced from appropriate table) ids",3820],["TABLE_LIST *table;",3567],["if (table)",3434]]},{"word":"tables","context":[["TABLE *table= tables->table;",2259],["TABLE_LIST*\ttables,\t/*!< in/out: tables to fill */",2204],["TABLE_LIST*\ttables,\t/*!< in/out: tables to fill */",2204],["// twice (once in the log, and once in the tables). This is already",2011],["tables.",1601],["RETURN_IF_INNODB_NOT_STARTED(tables->schema_table_name);",1418],["for (table= tables; table; table= table->next_local)",1365],["TABLE_LIST tables;",1078],["my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), \"--skip-grant-tables\");",928],["TABLE_LIST *tables,",906]]},{"word":"tag","context":[["if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",32641],["::google::protobuf::uint32 tag;",14309],["switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {",13523],["input, tag, mutable_unknown_fields()));",11299],["tag = p.first;",7357],["::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==",7348],["if (tag == 0 ||",7348],["// slots: signature, parameters, type, tag, flags",7088],["while ((tag = input->ReadTag()) != 0) {",6975],["if (tag == 10) {",4184]]},{"word":"target","context":[["if (!target)",50148],["Unit* target = aurApp->GetTarget();",48854],["target = this;",35468],["if (target)",29169],["if (target->GetTypeId() == TYPEID_PLAYER)",23275],["//Return since we have no target",17729],["target = ::google::protobuf::internal::WireFormatLite::",17049],["if (target->GetTypeId() != TYPEID_PLAYER)",16818],["if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))",14616],["Unit* target = GetTarget();",14476]]},{"word":"temp","context":[["return temp;",14651],["return temp;",5897],["int temp;",3692],["delete temp;",3521],["std::string temp;",2711],["if (!temp)",2434],["Register temp = ToRegister(instr->temp());",2160],["Register temp = ToRegister(instr->temp());",2160],["double temp;",2060],["if (temp)",1988]]},{"word":"template","context":[["template<>",77287],["template<typename T>",53955],["template <typename T>",52634],["template <>",42883],["template<class T>",34743],["template <class T>",33845],["template <int dim>",33308],["template <>",22982],["template<int size, bool big_endian>",19293],["template <typename T>",17690]]},{"word":"terms","context":[["* it under the terms of the GNU General Public License as published by",157996],["it under the terms of the GNU General Public License as published by",124782],["* under the terms of the GNU General Public License as published by the",98768],["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["** Software or, alternatively, in accordance with the terms contained in",70819],["*  it under the terms of the GNU General Public License as published by",65655],["* modify it under the terms of the GNU General Public License",57808],["*   it under the terms of the GNU General Public License as published by  *",54072],["// terms of the GNU General Public License as published by the",50473],["** Alternatively, this file may be used under the terms of the GNU",45135]]},{"word":"test","context":[["#include <boost/test/unit_test.hpp>",27652],["bool test __attribute__((unused)) = true;",25894],["namespace test {",9162],["}  // namespace test",8634],["#include \"chrome/test/base/testing_profile.h\"",8554],["test(false);",8136],["#include \"chrome/test/base/ui_test_utils.h\"",8057],["#include \"content/public/test/test_utils.h\"",6515],["BOOST_ERROR(\"Bad test: \" << strTest);",6441],["#include \"chrome/test/base/in_process_browser_test.h\"",6420]]},{"word":"testing","context":[["#include \"testing/gtest/include/gtest/gtest.h\"",69794],["#include \"testing/gmock/include/gmock/gmock.h\"",17598],["using testing::_;",7672],["using ::testing::_;",7354],["using ::testing::Return;",5434],["using testing::Return;",4773],["::testing::InitGoogleTest(&argc, argv);",4187],["namespace testing {",3282],["}  // namespace testing",3256],["testing::InitGoogleTest(&argc, argv);",3001]]},{"word":"text","context":[["// The full text of the license can be found in the file LICENSE at",17668],["QString text;",10204],["return text;",10110],["token = COM_ParseExt( text, qfalse );",3871],["if (text.isEmpty())",3834],["#include <wtf/text/CString.h>",3802],["\"Content-Type: text/html\\r\\n\"",3742],["// Help text is returned in an exception",3734],["\"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"",3560],["// Represent time from last generated block in human readable text",3378]]},{"word":"texture","context":[["return texture;",3765],["if (texture)",2126],["glBindTexture(GL_TEXTURE_2D, texture);",1807],["Texture* texture = texture_ref->texture();",1784],["Texture* texture = texture_ref->texture();",1784],["#include \"texture.h\"",1339],["if (!texture)",1318],["glGenTextures(1, &texture);",1274],["GLuint texture;",1248],["if (texture) {",1024]]},{"word":"than","context":[["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// receiver rejects addr messages larger than 1000",4130],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["return false; // More than one dot",3185],["// This is a more accurate fee-per-kilobyte than is used by the client code, because the",2541],["// If lookup is larger than chain, then set it to chain length.",2415],["// If the new block's timestamp is more than 2* 10 minutes",2270],["return DoS(100, error(\"CheckBlock() : more than one coinbase\"));",2055],["// reject messages larger than MAX_SIZE",2014],["// failure is ok (well, not really, but it's not worse than what we started with)",1907]]},{"word":"that","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This library is distributed in the hope that it will be useful,",61321],["// This library is distributed in the hope that it will be useful,",51633],["* modification, are permitted provided that the following conditions",49713],["This library is distributed in the hope that it will be useful,",42670],["// This program is distributed in the hope that it will be useful,",36972],["*  This program is distributed in the hope that it will be useful,",36344]]},{"word":"thd","context":[["my_ok(thd);",8955],["THD *thd= current_thd;",7980],["push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,",6801],["thd->clear_error();",6715],["if (thd->is_error())",4960],["LEX *lex= thd->lex;",4933],["THD*\t\t\t\tthd,\t/*!< in: thread handle */",4683],["close_thread_tables(thd);",4328],["thd, Sql_condition::WARN_LEVEL_WARN,",4079],["thd->mdl_context.release_transactional_locks();",3919]]},{"word":"the","context":[["// found in the LICENSE file.",333875],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* You should have received a copy of the GNU General Public License",215305],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",212488],["* This program is distributed in the hope that it will be useful,",200991],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",162515],["You should have received a copy of the GNU General Public License",158432],["* it under the terms of the GNU General Public License as published by",157996],["* it under the terms of the GNU General Public License as published by",157996]]},{"word":"them","context":[["* decision by deleting the provisions above and replace them with the notice",5725],["// When this block is requested, we'll send an inv that'll make them",3945],["// Trigger them to send a getblocks request for the next batch of inventory",3943],["// risk analyze) the dependencies of transactions relevant to them, without",2146],["// because we're already processing them in order of dependency",2061],["// and combine them before returning",1769],["// Sort them in chronological order",1672],["// them.",1311],["// Leave other errors alone, if we try to fix them we might make things worse.",1165],["// them.",1095]]},{"word":"then","context":[["infringement, or inducement of patent infringement, then any rights",4293],["CHALLENGE, then Tokutek may terminate any rights granted to you",4293],["// large transaction with a missing parent then we assume",4058],["// Note: if you modify this code to accept non-standard transactions, then",3642],["// ... then GUI settings:",2954],["// then allow mining of a min-difficulty block.",2725],["// ... then bitcoin.conf:",2532],["// If lookup is larger than chain, then set it to chain length.",2415],["// If lookup is -1, then use blocks since last difficulty change.",2376],["// fRequestShutdown getting set, and then does the normal Qt",1959]]},{"word":"there","context":[["// Parse the account first so we don't generate a key if there's an error",8026],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// be quick, because if there are any operations",3942],["// this data structure is not used yet, so there is no code generated to fill its members",3227],["// until there are no more or the block reaches this size:",2761],["// Only sign SIGHASH_SINGLE if there's a corresponding output:",2675],["// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive",2493],["// On Windows, show a message box, as there is no stderr/stdout in windowed applications",2366],["// Typing in messages widget brings focus to line edit, and redirects key there",2344],["// Duplicate stake allowed only when there is orphan child block",2209]]},{"word":"these","context":[["Details of these licenses can be found at: www.gnu.org/licenses",4815],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// see Step 2: parameter interactions for more information about these",3653],["// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)",3541],["// We should be phasing out our use of sites like these.  If we need",1832],["// that these are our transactions.",1666],["// We use boost::call_once() to make sure these are initialized in",1533],["// We should be phasing out our use of sites like these. If we need",1530],["// this is wrong way to implement these things. On official it done by gameobject spell cast.",1132],["regardless of the license terms of these independent modules, and to",1069]]},{"word":"they","context":[["// Deallocate old blocks since they're obsolete now",6138],["// and we want it right after the last block so they don't",3287],["// Attempt to overwrite text so that they do not linger around in memory",3099],["// included regardless of the fees they pay",2775],["// as they make the text unreadable (workaround for issue #1071)",2376],["// do that because they want to know about (and store and rebroadcast and",2146],["// about this message: it's needed when they are recursively walking the",2146],["// almost as much to process as they cost the sender in fees, because",2082],["// they must either disconnect and retry or request the full block.",2033],["if (!(master->spawnMask & slave->spawnMask))  // they must have a possibility to meet (normal/heroic difficulty)",1985]]},{"word":"this","context":[["// Use of this source code is governed by a BSD-style license that can be",336727],["return *this;",257469],["* along with this program; if not, write to the Free Software",117514],["** packaging of this file.  Please review the following information to",101077],["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["base::Unretained(this)));",59575],["ui->setupUi(this);",56712],["along with this program; if not, write to the Free Software",56481]]},{"word":"thread","context":[["#include <thread>",13455],["#include <boost/thread.hpp>",10650],["#include \"base/threading/thread.h\"",8168],["boost::thread t(runCommand, strCmd); // thread runs free",6177],["boost::thread t(runCommand, strCmd); // thread runs free",6177],["thread->start();",5027],["THD*\t\t\t\tthd,\t/*!< in: thread handle */",4683],["// 2) Remote nodes can measure the latency of the network thread. If this node",4072],["static mapNewBlock_t mapNewBlock;    // FIXME: thread safety",4013],["#include <thread>",3900]]},{"word":"through","context":[["// fall through",12651],["/* fall through */",6696],["// Scan through file for \"Hidden=true\":",3298],["// Fall through.",3129],["// TODO: receive errors and debug messages through ClientModel",3093],["\"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\" +",2881],["// Fall through.",2630],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Connect through socks proxy\"),",2471],["// Fall through",2302],["// through to re-relay it.",2273]]},{"word":"throw","context":[["throw runtime_error(",229703],["throw;",69665],["throw std::runtime_error( oss.str() );",44286],["throw;",12497],["throw runtime_error(\" Invalid public key: \"+ks);",10489],["throw e;",8196],["throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");",7751],["throw EXCEPTION(\"\");",7721],["throw std::bad_alloc();",7082],["throw ap_error(_alglib_env_state.error_msg);",6707]]},{"word":"time","context":[["#include <time.h>",36404],["#include <sys/time.h>",18983],["#include \"base/time/time.h\"",18443],["#include \"base/time/time.h\"",18443],["time_t now = time(NULL);",10766],["#include <time.h>",9579],["#include <sys/time.h>",7542],["time_t curTime = time(NULL);",7482],["#include \"base/time.h\"",7069],["srand(time(NULL));",6789]]},{"word":"timer","context":[["timer.start();",8619],["timer.stop();",4374],["#include \"timer.h\"",3593],["timer->stop();",2619],["Timer timer;",2338],["timer = 0;",1838],["#include \"base/timer/timer.h\"",1795],["#include \"base/timer/timer.h\"",1795],["timer.Start();",1689],["// Breath timer not activated - activate it",1574]]},{"word":"title","context":[["QString title;",2644],["const std::string& title,",2101],["return title;",1999],["const base::string16& title,",1807],["notificator->notify(Notificator::Critical, title, message);",1726],["QMessageBox::critical(this, title, message, QMessageBox::Ok, QMessageBox::Ok);",1710],["void BitcoinGUI::error(const QString &title, const QString &message, bool modal)",1642],["base::string16 title;",1433],["void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)",1379],["const string16& title,",1336]]},{"word":"tmp","context":[["return tmp;",18624],["return tmp;",8259],["delete tmp;",5639],["int tmp;",4751],["if (roll < tmp)",4251],["tmp;",3770],["memset(&tmp, 0, sizeof(tmp));",3711],["memset(&tmp, 0, sizeof(tmp));",3711],["FormatHashBlocks(&tmp.block, sizeof(tmp.block));",3665],["FormatHashBlocks(&tmp.block, sizeof(tmp.block));",3665]]},{"word":"to","context":[["* along with this program; if not, write to the Free Software",117514],["** packaging of this file.  Please review the following information to",101077],["along with this program; if not, write to the Free Software",56481],["* Unless required by applicable law or agreed to in writing, software",56276],["Permission is hereby granted, free of charge, to any person obtaining a copy",30067],["furnished to do so, subject to the following conditions:",29897],["furnished to do so, subject to the following conditions:",29897],["copies of the Software, and to permit persons to whom the Software is",29577],["copies of the Software, and to permit persons to whom the Software is",29577],["of this software and associated documentation files (the \"Software\"), to deal",29279]]},{"word":"toString","context":[[".data().toString();",5614],["QString address = index.data().toString();",4452],["return date.date().toString(Qt::SystemLocaleShortDate) + QString(\" \") + date.toString(\"hh:mm\");",3222],["return date.date().toString(Qt::SystemLocaleShortDate) + QString(\" \") + date.toString(\"hh:mm\");",3222],["QString timeString = time.toString();",3108],["ui->lastBlockTime->setText(clientModel->getLastBlockDate().toString());",2988],["return result.toString();",2078],["// Custom toString template",1734],["QApplication::clipboard()->setText(selection.at(0).data(role).toString());",1727],["if (sendCoinsPage->handleURI(uri.toString()))",1724]]},{"word":"tok","context":[["tok = tok->next();",5218],["tok = tok->next();",5218],["for (Token *tok = list.front(); tok; tok = tok->next()) {",2793],["for (Token *tok = list.front(); tok; tok = tok->next()) {",2793],["for (Token *tok = list.front(); tok; tok = tok->next()) {",2793],["for (Token *tok = list.front(); tok; tok = tok->next()) {",2793],["ASSERT_EQUALS(expected, tok(code));",2627],["tok->deleteNext();",2620],["ASSERT_EQUALS(expected, tok(code, false));",2099],["tok->deleteThis();",2038]]},{"word":"token","context":[["token = COM_ParseExt( text, qfalse );",3871],["parseError(token);",3647],["return token;",3181],["if ( token[0] == 0 )",2923],["Token token;",2819],["idToken token;",2417],["currentValue().setOffsetStart(token.start_ - begin_);",2170],["currentValue().setOffsetLimit(token.end_ - begin_);",2170],["std::string token;",1909],["token,",1726]]},{"word":"tolua_S","context":[["argc = lua_gettop(tolua_S)-1;",36101],["lua_settop(tolua_S, 1);",7672],["argc = lua_gettop(tolua_S) - 1;",5665],["tolua_endmodule(tolua_S);",5224],["tolua_pushnumber(tolua_S,(lua_Number)ret);",4937],["!tolua_isnoobj(tolua_S,2,&tolua_err)",4416],["tolua_pushboolean(tolua_S,(bool)ret);",4283],["!tolua_isnoobj(tolua_S,3,&tolua_err)",3479],["lua_pop(tolua_S, 1);",2200],["!tolua_isnumber(tolua_S,2,0,&tolua_err) ||",2073]]},{"word":"too","context":[["* are too numerous to list here. Please refer to the COPYRIGHT",20480],["#error \"(The moc has changed too much.)\"",12708],["Nan::ThrowError(\"Array too short.\");",10598],["// Don't bother if send buffer is too full to respond anyway",6084],["return DoS(100, error(\"ConnectBlock() : too many sigops\"));",4139],["else if (strstr(e.what(), \"size too large\"))",4098],["throw runtime_error(\"too few parameters\");",3770],["// Scroll debug.log if it's getting too big",3469],["return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));",2914],["ui->lblQRCode->setText(tr(\"Resulting URI too long, try to reduce the text for label / message.\"));",2576]]},{"word":"top","context":[["// the top level of the deal.II distribution.",17668],["See the README file in the top-level LAMMPS directory.",8796],["// find a copy of this license in LICENSE.txt in the top directory of",4015],["*  LICENSE:     See LICENSE in the top level directory",3887],["\"td.time { color: #808080; padding-top: 3px; } \"",3068],["See AUTHORS file in the top level directory for information",2238],["RenameThread(\"bitcoin-key-top\");",2145],["// Note: can't top-up keypool here, because wallet is locked.",2051],["MovementGenerator *curr = top();",1681],["// top",1554]]},{"word":"tr","context":[["QMessageBox::warning(this, tr(\"Send Coins\"),",12377],["QMessageBox::critical(this, tr(\"Wallet encryption failed\"),",12277],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["tr(\"The supplied passphrases do not match.\"));",6158],["trace_t tr;",4765],["ui->capsLabel->setText(tr(\"Warning: The Caps Lock key is on!\"));",4447],["tr(\"Date: %1\\n\"",3398],["QMenu *file = appMenuBar->addMenu(tr(\"&File\"));",3327],["QMenu *settings = appMenuBar->addMenu(tr(\"&Settings\"));",3289],["QMenu *help = appMenuBar->addMenu(tr(\"&Help\"));",3287]]},{"word":"trans","context":[["trans->Append(stmt);",73735],["CharacterDatabase.CommitTransaction(trans);",20160],["SQLTransaction trans = CharacterDatabase.BeginTransaction();",18891],["scoped_ptr<HttpTransaction> trans(",8068],["const HttpResponseInfo* response = trans->GetResponseInfo();",7559],["int rv = trans->Start(&request, callback.callback(), BoundNetLog());",5917],["syncable::ReadTransaction trans(FROM_HERE, directory());",3559],["response = trans->GetResponseInfo();",2940],["CharacterDatabase.ExecuteOrAppend(trans, stmt);",2627],["HttpNetworkTransaction* trans = helper.trans();",2414]]},{"word":"transaction","context":[["\"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");",5389],["// Coinbase is only valid in a block, not as a loose transaction",4251],["// Store transaction in memory",4150],["// First transaction must be coinbase, the rest must not be",4119],["// Tally transaction fees",4096],["// it will rebroadcast it later, after the parent transaction(s)",4058],["// large transaction with a missing parent then we assume",4058],["// Locate the transaction",4002],["// Read prev transaction",3841],["// Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock",3715]]},{"word":"transactions","context":[["Array transactions;",8132],["// Check against previous transactions",4277],["// Check for conflicts with in-memory transactions",4271],["// This mitigates 'penny-flooding' -- sending thousands of free transactions just to",4210],["// Resend wallet transactions that haven't gotten in a block yet",4130],["// Recursively process any orphan transactions that depended on this one",4123],["// Check that all transactions are finalized",4119],["// Check transactions",4105],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060]]},{"word":"tree","context":[["*  tree. An additional intellectual property rights grant can be found",13737],["*  be found in the AUTHORS file in the root of the source tree.",13737],["return tree;",8696],["*  LICENSE file in the root directory of this source tree. An additional grant",5816],["tree",3667],["// calculate height of tree",3538],["// traverse the partial tree",3537],["//  LICENSE file in the root directory of this source tree. An additional grant",3433],["// pre-compute tree structure",2677],["gtDispTree(tree);",2657]]},{"word":"true","context":[["return true;",4657558],["return true;",918038],["SetSentErrorMessage(true);",88689],["PyObject* result = PythonQtSignalTarget::call(obj, methodInfo, args, true);",75629],["found = true;",62195],["while (true)",59135],["handler->SetSentErrorMessage(true);",58615],["while (true) {",52928],["bool ok  = true;",39818],["bool ok = true;",33613]]},{"word":"trx","context":[["trx_t*\t\ttrx;",5393],["trx->error_state = DB_SUCCESS;",4350],["trx->op_info = \"\";",3979],["trx_t*\ttrx;",3546],["trx_commit_for_mysql(trx);",3507],["row_mysql_unlock_data_dictionary(trx);",2940],["trx_free_for_mysql(trx);",2543],["row_mysql_lock_data_dictionary(trx);",2450],["trx_free_for_background(trx);",2316],["trx = check_trx_exists(thd);",2302]]},{"word":"try","context":[["try",390713],["try {",371864],["try {",83714],["try",37650],["try{",27575],["// converting string that we try to find to lower case",7722],["{ try {",4275],["// if an explicit public IP is specified, do not try to find others",3634],["// do not map ports or try to retrieve public IP when not listening (pointless)",3631],["// try {",2682]]},{"word":"two","context":[["// Echo the message back with the nonce. This allows for two useful features:",4072],["// It'll only connect to one or two seed nodes because once it connects,",3807],["// Seed nodes are given a random 'last seen time' of between one and two",3671],["case 1: // we have two bits",3309],["// \"Never go to sea with two chronometers; take one or three.\"",3270],["//  - The user (asking the user to fix the system clock if the first two disagree)",3267],["case 4: // we have two bits",3178],["// two in the chain that violate it. This prevents exploiting the issue against nodes in their",1725],["* including the two.",1497],["// is just the two items serialized one after the other",1390]]},{"word":"tx","context":[["CTransaction tx;",29643],["BOOST_FOREACH(const CTxIn& txin, tx.vin)",25617],["uint256 hash = tx.GetHash();",25230],["for (unsigned int i = 0; i < tx.vin.size(); i++)",14800],["BOOST_FOREACH(const CTransaction& tx, vtx)",13696],["if (tx.IsCoinBase())",13143],["if (!tx.IsCoinBase())",9474],["BOOST_FOREACH(const CTransaction& tx, block.vtx)",8544],["ssData >> tx;",7865],["BOOST_FOREACH(CTransaction& tx, vtx)",7625]]},{"word":"txt","context":[["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["// Refer to the license.txt file included.",11929],["// http://www.boost.org/LICENSE_1_0.txt)",9574],["See LICENSE.txt or http://www.mitk.org for details.",9282],["//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)",5386],["//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)",5386],["// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with",5340],["// See http://swift.org/LICENSE.txt for license information",4764],["// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors",4764],["// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)",4558]]},{"word":"type","context":[["switch (type)",47706],["switch (type) {",35124],["switch (type) {",28072],["return type;",25480],["switch(type)",15294],["if (type != NULL) return type;",11337],["if (type != NULL) return type;",11337],[">::type",9933],["switch(type) {",8781],["int type,",7494]]},{"word":"typedef","context":[["typedef struct {",22763],["typedef struct",15786],["typedef long long ll;",6657],["typedef struct {",6061],["extern \"C\" { typedef",6046],["typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;",5897],["typedef __true_type __type;",4104],["typedef enum {",4092],["typedef enum",2893],["typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);",2785]]},{"word":"typename","context":[["template<typename T>",53955],["template <typename T>",52634],["template <typename T>",17690],["template <typename Protocol, typename SocketAcceptorService>",10522],["template <typename Protocol, typename SocketAcceptorService>",10522],["template<typename T>",10308],["template <typename Dtype>",6876],["template <typename Protocol>",6564],["template <typename Tp>",5331],["template < typename _Tp >",5062]]},{"word":"types","context":[["#include <sys/types.h>",42645],["#include <sys/types.h>",20910],["default: to.add(\"}\"); types.pop_back(); vtypes.pop_back(); stages.pop_back(); flags.pop_back(); break;",7294],["#include \"types.h\"",3920],["// Special case non-string parameter types",3370],["types.clear();",2155],["expected_types.push_back(types);",2115],["return types;",2050],["QStringList types;",1655],["// Register meta types used for QMetaObject::invokeMethod",1544]]},{"word":"u","context":[["case 'u':",6276],["case 'u':",3790],["} u;",3613],["return u;",3605],["printf(\"ProcessMessage(%s, %u bytes) FAILED\\n\", strCommand.c_str(), nMessageSize);",3439],["printf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",",3389],["printf(\"mapOrphan overflow, removed %u tx\\n\", nEvicted);",3389],["printf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand.c_str(), nMessageSize, e.what());",3386],["std::string port = strprintf(\"%u\", GetListenPort());",2730],["\"An error occurred while setting up the RPC port %u for listening on IPv4: %s\"),",2158]]},{"word":"uchar","context":[["uchar user_key[MAX_KEY_LENGTH];",914],["const uchar *srcPixels, int sbpl,",608],["#include \"unicode/uchar.h\"",583],["uchar *res=result_field->ptr;",536],["uchar *pos;",527],["const uchar* extra_row_info)",499],["const uchar *",497],["(uchar *) item_field->field_name,",486],["uchar *",461],["uchar *min_value, uchar *max_value,",444]]},{"word":"ui","context":[["ui->setupUi(this);",56712],["delete ui;",56686],["#include \"ui/base/l10n/l10n_util.h\"",24540],["#include \"chrome/browser/ui/browser.h\"",18499],["#include \"ui/base/resource/resource_bundle.h\"",15589],["ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");",11974],["ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");",11948],["#include \"ui/views/widget/widget.h\"",11270],["for(int i = 0; i < ui->entries->count(); ++i)",10076],["#include \"chrome/browser/ui/tabs/tab_strip_model.h\"",9895]]},{"word":"uint","context":[["uint i;",12806],["uint i;",7207],["uint length;",4265],["uint",3595],["uint dummy_errors;",2440],["uint i = 0;",2140],["uint",1964],["typedef unsigned uint;",1952],["uint i= 0;",1856],["uint sql_errno,",1822]]},{"word":"uint16","context":[["uint16 dest;",3947],["data << uint16(0);",3119],["uint16 field = itr->second.pos / 2;",2384],["uint16 log_slot = FindQuestSlot(quest_id);",2199],["uint16 eDest;",1884],["*data << uint16(0);",1814],["for (uint16 index = 0; index < m_valuesCount; ++index)",1505],["uint16 log_slot = FindQuestSlot(questId);",1466],["uint16 eDest = 0;",1350],["*data << uint16(-1);",1270]]},{"word":"uint256","context":[["uint256 hash = tx.GetHash();",25230],["for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)",22322],["uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();",16148],["uint256 hash;",14108],["uint256 hash = GetHash();",12736],["map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);",10971],["BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)",9805],["for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)",9698],["vector<uint256> vWorkQueue;",9221],["uint256 hashStop;",8260]]},{"word":"uint32","context":[["uint32 count = 0;",77468],["void UpdateAI(const uint32 diff)",64808],["uint32 oldMSTime = getMSTime();",53911],["data << uint32(0);",52701],["void UpdateAI(uint32 diff) override",23247],["while (uint32 eventId = events.ExecuteEvent())",23219],["void UpdateAI(const uint32 uiDiff)",19064],["::google::protobuf::uint32 tag;",14309],["void UpdateAI(uint32 const diff)",12025],["void UpdateAI(uint32 diff) OVERRIDE",11565]]},{"word":"uint32_t","context":[["uint32_t xfer = 0;",20421],["uint32_t",16436],["uint32_t i;",5089],["uint32_t",4611],["ctx.h[i] = ((uint32_t*)pinit)[i];",3623],["((uint32_t*)pstate)[i] = ctx.h[i];",3623],["((uint32_t*)data)[i] = ByteReverse(((uint32_t*)pinput)[i]);",3601],["((uint32_t*)data)[i] = ByteReverse(((uint32_t*)pinput)[i]);",3601],["MakeUintegerChecker<uint32_t> ())",3238],["uint32_t i = 0;",2349]]},{"word":"uint64","context":[["uint64 guid;",21413],["data << uint64(GetGUID());",8930],["data << uint64(guid);",8924],["uint64 nonce = 0;",5880],["uint64 PlayerGUID;",3848],["data << uint64(0);",3349],["uint64 nNonce = 1;",3000],["uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;",2995],["uint64 nBlockSize = 1000;",2990],["bool CheckDiskSpace(uint64 nAdditionalBytes)",2978]]},{"word":"uint64_t","context":[["uint64_t",7322],["uint64_t Address,",3311],["uint64_t nonce = 0;",3009],["obj.push_back(Pair(\"currentblocksize\",(uint64_t)nLastBlockSize));",2923],["obj.push_back(Pair(\"currentblocktx\",(uint64_t)nLastBlockTx));",2923],["obj.push_back(Pair(\"pooledtx\",      (uint64_t)mempool.size()));",2905],["uint64_t Address, const void *Decoder) {",2663],["uint64_t Address, const void *Decoder);",2614],["uint64_t",2352],["result.push_back(Pair(\"nonce\", (boost::uint64_t)block.nNonce));",1666]]},{"word":"uint8","context":[["for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)",28920],["data << uint8(0);",16649],["::google::protobuf::uint8* target) const {",12116],["for (uint8 i = 0; i < 4; ++i)",9512],["for (uint8 i = 0; i < 3; ++i)",7443],["for (uint8 i = 0; i < 2; ++i)",6260],["for (uint8 i = 0; i < MAX_QUEST_LOG_SIZE; ++i)",6242],["for (uint8 i = 0; i < MAX_ENCOUNTER; ++i)",6101],["uint8 level = getLevel();",6100],["uint8 index = 0;",5195]]},{"word":"uint8_t","context":[["uint8_t",4262],["uint8_t i;",3801],["uint8_t",1756],["uint8_t const * get_data()const",1413],["for (uint8_t j = 0; j < nLayer; j++)",1278],["static constexpr uint8_t m_data[54] = {",1148],["uint8_t b;",1128],["for (uint8_t i=0; i<num_gcs; i++) {",1122],["uint8_t type;",988],["uint8_t c;",943]]},{"word":"ulint","context":[["ulint",18502],["ulint\t\ti;",13422],["ulint\ti;",7735],["ulint\t\tlen;",6873],["ulint\t\t\ti;",2918],["ulint\t\toffsets_[REC_OFFS_NORMAL_SIZE];",2619],["ulint\tlen;",2583],["ulint\t\tspace;",2312],["ulint\t\tzip_size;",2312],["ulint\t\tflags;",1732]]},{"word":"under","context":[["* it under the terms of the GNU General Public License as published by",157996],["it under the terms of the GNU General Public License as published by",124782],["* under the terms of the GNU General Public License as published by the",98768],["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["*  it under the terms of the GNU General Public License as published by",65655],["// Distributed under the MIT/X11 software license, see the accompanying",65013],["* modify it under the terms of the GNU General Public License",57808],["*   it under the terms of the GNU General Public License as published by  *",54072],["* distributed under the License is distributed on an \"AS IS\" BASIS,",54039],["* limitations under the License.",51093]]},{"word":"unit","context":[["switch(unit)",19703],["ObjectList* targets = GetTargets(e, unit);",18172],["if (!unit)",16098],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["// do not remove unit flag if there are more than this auraEffect of that kind on unit on unit",6686],["int num_decimals = decimals(unit);",6429],["// update the display unit, to not use the default (\"BTC\")",5742],["// -limitfreerelay unit is thousand-bytes-per-minute",4200],["// call functions which may have additional effects after chainging state of unit",3994]]},{"word":"unitTarget","context":[["if (!unitTarget)",32954],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_PLAYER)",21701],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_PLAYER)",21701],["if (unitTarget->GetTypeId() != TYPEID_PLAYER)",5857],["if (unitTarget)",4762],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_UNIT)",4450],["if (!unitTarget || unitTarget->GetTypeId() != TYPEID_UNIT)",4450],["Player* player = unitTarget->ToPlayer();",4424],["if (Unit* unitTarget = GetHitUnit())",3062],["if (!unitTarget || !unitTarget->isAlive())",2714]]},{"word":"unsigned","context":[["unsigned int i;",28406],["for (unsigned int i = 0; i < vin.size(); i++)",21730],["unsigned int nSigOps = 0;",16176],["unsigned i;",15359],["for (unsigned int i = 0; i < tx.vin.size(); i++)",14800],["unsigned int",13748],["unsigned int i = 0;",10850],["unsigned int",10367],["static unsigned int nTransactionsUpdatedLast;",9606],["for (unsigned int i = 0; i < vWorkQueue.size(); i++)",9008]]},{"word":"until","context":[["// Be shy and don't send version until we hear",4380],["// Don't send anything until we get their version message",3943],["// wait until threads are done using it",3761],["// hold in disconnected pool until all refs are released",3761],["// Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry",3683],["// iterate backwards until we have nCount items to return:",3515],["if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)",3261],["// until there are no more or the block reaches this size:",2761],["nCheckDepth = 1000000000; // suffices until the year 19000",2482],["// Remove entries until only one left",2146]]},{"word":"up","context":[["// clean up",5358],["// Check that the block chain matches the known block chain up to a checkpoint",3882],["// Keep up to date with client",3816],["// We already filter duplicates, but these deprecated screw up the sort order",3732],["// Extra checks to prevent \"fill up memory by spamming with bogus blocks\"",3691],["// (GetBalance() sums up all unspent TxOuts)",3569],["* Sets up I/O resources to accept and handle a new connection.",3507],["// Set icon state: spinning if catching up, tick otherwise",3377],["// This can take up to 2 seconds, so only do it every 10 minutes",3303],["tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;",3248]]},{"word":"update","context":[["update();",81186],["if (IsInWorld() && update)",9671],["// group update",6703],["#include \"update.h\"",5892],["// update the display unit, to not use the default (\"BTC\")",5742],["// Need to update only after we know CreateNewBlock succeeded",5681],["DestroyItem(INVENTORY_SLOT_BAG_0, i, update);",5668],["if (update)",4007],["update = true;",3406],["this->update();",3345]]},{"word":"url","context":[["const GURL& url,",27019],["#include \"url/gurl.h\"",15815],["ui_test_utils::NavigateToURL(browser(), url);",8200],["url,",8060],["const GURL& url) {",6234],["return url;",4647],["GURL url;",3721],["request.url = GURL(\"http://www.google.com/\");",3657],["const FileSystemURL& url,",3638],["std::string url;",3469]]},{"word":"us","context":[["** use the contact form at http://qt.digia.com/contact-us.",36972],["** use the contact form at http://www.qt.io/contact-us.",9626],["** information use the contact form at https://www.qt.io/contact-us.",6738],["//    avoid sending us more work, like chain download requests.",4068],["// Small DoS penalty so peers that send us lots of",2943],["** information use the contact form at http://www.qt.io/contact-us.",2732],["// Thus, the protocol spec specified allows for us to provide duplicate txn here,",2032],["// check whether the passed transaction is from us",1970],["// from or to us. If fUpdate is true, found transactions that already",1434],["// no need to delete child widgets, Qt does it all for us",1079]]},{"word":"use","context":[["* Redistribution and use in source and binary forms, with or without",88602],["** Licensees holding valid commercial Qt licenses may use this file in",56068],["* you may not use this file except in compliance with the License.",45650],["** use the contact form at http://qt.digia.com/contact-us.",36972],["** If you have questions regarding the use of this file, please contact",34088],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",29139],["Redistribution and use in source and binary forms, with or without",20410],["// Redistribution and use in source and binary forms, with or without",20227],["* You may not use this file except in compliance with the License.",19877],["// Redistribution and use in source and binary forms, with or without",19804]]},{"word":"used","context":[["** Alternatively, this file may be used under the terms of the GNU Lesser",80302],["** Alternatively, this file may be used under the terms of the GNU",45135],["* contributors may be used to endorse or promote products derived from",19909],["** Alternatively, this file may be used in accordance with the terms and",15101],["** This file may be used under the terms of the GNU Lesser General Public",15078],["#error \"cannot be used with the include files from this version of Qt.\"",12708],["// contributors may be used to endorse or promote products derived from",10825],["* The contents of this file may alternatively be used under the terms",7877],["** Alternatively, this file may be used under the terms of the GNU General",7611],["**     of its contributors may be used to endorse or promote products derived",7191]]},{"word":"useful","context":[["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["* This library is distributed in the hope that it will be useful,",61321],["// This library is distributed in the hope that it will be useful,",51633],["This library is distributed in the hope that it will be useful,",42670],["// This program is distributed in the hope that it will be useful,",36972],["*  This program is distributed in the hope that it will be useful,",36344],["* This program is distributed in the hope that it will be useful,",30366],["This program is distributed in the hope that it will be useful,",30247]]},{"word":"user","context":[["if (user->GetTypeId() != TYPEID_PLAYER)",4851],["// strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:",3944],["if(dir.isEmpty()) // Default to user documents location",3582],["Player* player = user->ToPlayer();",3537],["//  - The user (asking the user to fix the system clock if the first two disagree)",3267],["//  - The user (asking the user to fix the system clock if the first two disagree)",3267],["// as LoadBlockIndex can take several minutes, it's possible the user",3261],["\"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\" +",2920],["If this results in a DOS the user really",2908],["Player* player = (Player*)user;",2253]]},{"word":"using","context":[["using namespace std;",436706],["using namespace std;",77081],["using namespace boost;",39788],["using namespace llvm;",23950],["using content::BrowserThread;",23305],["using std::string;",23205],["using namespace json_spirit;",19482],["using namespace Aws::Utils;",18977],["using std::endl;",16869],["using std::vector;",15634]]},{"word":"usr","context":[["/*@SWIG:/usr/share/swig1.3/php/utils.i,16,CONVERT_FLOAT_IN@*/",1073],["/*@SWIG:/usr/share/swig1.3/php/utils.i,7,CONVERT_INT_IN@*/",696],["/*@SWIG:/usr/share/swig1.3/php/utils.i,26,CONVERT_STRING_IN@*/",518],["# 91 \"/usr/include/bits/mathcalls.h\" 3",450],["# 259 \"/usr/include/bits/mathcalls.h\" 3",450],["# 326 \"/usr/include/bits/mathcalls.h\" 3",450],["# 129 \"/usr/include/bits/mathcalls.h\" 3",450],["# 157 \"/usr/include/bits/mathcalls.h\" 3",450],["# 193 \"/usr/include/bits/mathcalls.h\" 3",450],["# 107 \"/usr/include/bits/mathcalls.h\" 3",450]]},{"word":"v","context":[["return v;",28456],["* License, v. 2.0. If a copy of the MPL was not distributed with this",9630],["case 'v':",7865],["return v;",6318],["case 'v':",4908],["strHex = v.get_str();",4358],["if (v.type() == str_type)",4202],["int v;",4134],["double v;",4010],["const Value& v = params[i];",3499]]},{"word":"v8","context":[["TRACE_EVENT_SET_SAMPLING_STATE(\"v8\", \"V8Execution\");",23306],["v8::Local<v8::Object> holder = info.Holder();",13394],["v8::Local<v8::Object> holder = info.Holder();",13394],["namespace v8 {",10430],["v8::HandleScope scope(isolate);",7512],["v8::Local<v8::Function> cons =",7467],["v8::Local<v8::Object> wo = cons->NewInstance(1, argv);",7467],["v8::Local<v8::Object> wo = cons->NewInstance(1, argv);",7467],["v8::Local<v8::Value> argv[1] =",7467],["v8::Local<v8::Value> argv[1] =",7467]]},{"word":"val","context":[["return val;",25695],["int val;",8904],["SpellCast(val);",7369],["void SpellCast(float val)",7149],["return val;",5616],["val = 0;",5193],["if (val)",4711],["float val = (float)RandomFloat(100.0f);",4257],["*     int val;",3521],["{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;",3204]]},{"word":"valid","context":[["** Licensees holding valid commercial Qt licenses may use this file in",56068],["** Licensees holding valid Qt Commercial licenses may use this file in",17428],["valid = false;",13787],["valid = true;",7089],["bool valid = true;",6343],["// URI has to be valid",5116],["valid=true;",4414],["return valid;",4372],["// Coinbase is only valid in a block, not as a loose transaction",4251],["bool valid = false;",4114]]},{"word":"value","context":[["return value;",50710],["STRUCT_FLD(value,\t\t0),",20089],["return value;",18608],["if (value)",10072],["std::string value;",9712],["int value;",8689],["value = 0;",8601],["if (value) {",6078],["double value;",6026],["int value;",5863]]},{"word":"values","context":[["#include \"base/values.h\"",32749],["// Check for negative or overflow output values",4125],["// Check for negative or overflow input values",4122],["CustomSpellValues values;",3215],["\"Returns Object that has account names as keys, account balances as values.\");",3152],["// Provide initial values",3093],["return values;",2679],["case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);",2522],["if(prop->values.empty())",2117],["\"Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or\\n\"",2108]]},{"word":"var","context":[["var->value= buff;",5088],["return var;",3995],["var->type= SHOW_LONG;",3893],["struct st_mysql_sys_var*\tvar,\t/*!< in: pointer to",2991],["struct st_mysql_sys_var*\tvar,\t/*!< in: pointer to system",1665],["\"var result = 0;\"",1610],["if (!var->value)",1483],["if (var->IsContextSlot()) {",1431],["while (var) {",1360],["var->type= SHOW_CHAR;",1334]]},{"word":"variable","context":[["system variable */",3474],["variable */",2831],["#include \"variable.h\"",1792],["// The following part of the code determines the CLIENT_BUILD variable.",1759],["switch (variable->location()) {",1035],["switch (variable) {",936],["EmitDebugCheckDeclarationContext(variable);",845],["Variable* variable = proxy->var();",836],["error->all(FLERR,\"Invalid math function in variable formula\");",809],["/* Suppress unused-variable warnings by \"using\" E.  */",616]]},{"word":"variables","context":[["// Global state variables",3761],["/* Local variables */",2167],["variant execute(const formula_callable& variables, formula_debugger *fdb) const {",1375],["* Local variables:",1285],["// variables",1234],["// Global variables",1214],["thd->variables.lock_wait_timeout))",1059],["// Local variables",993],["/*global variables*/",954],["// 1. Initialize internal variables to default values.",864]]},{"word":"vector","context":[["#include <vector>",163120],["#include <vector>",81712],["vector<CInv> vInv;",19636],["using std::vector;",15634],["vector<string> vWords;",11992],["using std::vector;",10075],["vector<uint256> vWorkQueue;",9221],["vector<CAddress> vAddr;",8353],["vector<CNode*> vNodesCopy;",7456],["vector<valtype> vSolutions;",6965]]},{"word":"version","context":[["* (at your option) any later version.",163870],["(at your option) any later version.",132249],["* option) any later version.",98871],["** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",88220],["* Free Software Foundation; either version 2 of the License, or (at your",85385],["the Free Software Foundation, either version 3 of the License, or",82946],["* the Free Software Foundation; either version 2 of the License, or",81953],["* the Free Software Foundation, either version 3 of the License, or",68454],["** ensure the GNU Lesser General Public License version 2.1 requirements",65412],["** General Public License version 2.1 as published by the Free Software",65406]]},{"word":"victim","context":[["if (victim->GetTypeId() == TYPEID_PLAYER)",9518],["void KilledUnit(Unit* /*victim*/)",8068],["void KilledUnit(Unit* victim)",5853],["if (victim)",5228],["if (!victim)",5030],["target = victim;",3963],["void KilledUnit(Unit* victim) override",2132],["void KilledUnit(Unit* /*victim*/) override",2103],["if (victim->GetTypeId() != TYPEID_PLAYER)",1967],["void JustDied(Unit* /*victim*/)",1908]]},{"word":"view","context":[["if (!view)",5120],["if (!tx.HaveInputs(view))",3990],["view.show();",3853],["unsigned char* view,",3829],["CCoinsViewCache &view = *pcoinsTip;",3531],["CCoinsViewCache view(*pcoinsTip, true);",3507],["if(!view || !view->selectionModel())",3300],["if(!view || !view->selectionModel())",3300],["QModelIndexList selection = view->selectionModel()->selectedRows(column);",3299],["void copyEntryData(QAbstractItemView *view, int column, int role)",3237]]},{"word":"views","context":[["#include \"ui/views/widget/widget.h\"",11270],["namespace views {",5837],["}  // namespace views",5700],["#include \"ui/views/controls/label.h\"",4233],["#include \"ui/views/view.h\"",3035],["#include \"chrome/browser/ui/views/frame/browser_view.h\"",2299],["#include \"ui/views/layout/grid_layout.h\"",2265],["#include \"ui/views/controls/image_view.h\"",2200],["layout->AddPaddingRow(0, views::kRelatedControlVerticalSpacing);",2170],["#include \"ui/views/layout/box_layout.h\"",2045]]},{"word":"vin","context":[["BOOST_FOREACH(const CTxIn& txin, tx.vin)",25617],["for (unsigned int i = 0; i < vin.size(); i++)",21730],["BOOST_FOREACH(const CTxIn& txin, vin)",18213],["for (unsigned int i = 0; i < tx.vin.size(); i++)",14800],["COutPoint prevout = vin[i].prevout;",8169],["txNew.vin.resize(1);",7904],["COutPoint outpoint = tx.vin[i].prevout;",7514],["mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, pblock->vtx[0].vin[0].scriptSig);",5895],["pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;",5886],["const COutPoint &prevout = vin[i].prevout;",5344]]},{"word":"virtual","context":[["virtual void SetUp() {",17206],["virtual void TearDown() {",10599],["virtual void SetUp() OVERRIDE {",9136],["virtual void TearDown() OVERRIDE {",5645],["// virtual",5473],["virtual void",4822],["virtual void SetUp()",3851],["virtual void close()",3620],["virtual std::string peer_address_to_string() const",3505],["virtual std::iostream& stream()",3504]]},{"word":"void","context":[["void",1013999],["void",740422],["void Reset()",114329],["static void",109796],["static void",71007],["void UpdateAI(const uint32 diff)",64808],["void Register()",58806],["(void)jcls;",48820],["(void)jenv;",48634],["void Register() override",41004]]},{"word":"vout","context":[["BOOST_FOREACH(const CTxOut& txout, wtx.vout)",21098],["BOOST_FOREACH(const CTxOut& txout, vout)",10509],["txNew.vout.resize(1);",7755],["if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())",4167],["for (unsigned int i = 0; i < pcoin->vout.size(); i++)",4035],["nValueIn += txPrev.vout[prevout.n].nValue;",4003],["if (!MoneyRange(txPrev.vout[prevout.n].nValue) || !MoneyRange(nValueIn))",3970],["const CTxOut& txout = tx.vout[i];",3504],["if (vout.empty())",3400],["result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));",3335]]},{"word":"w","context":[["return w;",10067],["w->native = r;",7467],["w->Wrap(wo);",7467],["w.show();",6876],["int w, h;",5621],["case 'w':",5414],["file = fopen(pathLog.string().c_str(), \"w\");",3428],["FILE* file = fopen(path.string().c_str(), \"w\");",3427],["case 'w':",3386],["return atW->topLevelWidget() == w;",3242]]},{"word":"wallet","context":[["#include \"wallet.h\"",22931],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["LOCK(wallet->cs_wallet);",7725],["\"Encrypts the wallet with <passphrase>.\");",6675],["\"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");",6675],["\"Stores the wallet decryption key in memory for <timeout> seconds.\");",5661],["throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");",5081],["throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");",4939],["LOCK(wallet.cs_wallet);",4515],["// Generate a new key that is added to wallet",4481]]},{"word":"want","context":[["// Note: not using straight sprintf here because we do NOT want",6536],["// Don't want addr from older versions unless seeding",4099],["// when specifying an explicit binding address, you want to listen on it",3634],["return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));",3627],["// and we want it right after the last block so they don't",3287],["// which is what we want.",3102],["// Do this early as we don't want to bother initializing if we are just calling IPC",2969],["// Minimum block size you want to create; block will be filled with free transactions",2759],["QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),",2657],["// We want to sort transactions by priority and fee, so:",2550]]},{"word":"warning","context":[["QMessageBox::warning(this, tr(\"Send Coins\"),",12377],["#pragma warning(pop)",7571],["#pragma warning(push)",6090],["QMessageBox::warning(this, windowTitle(),",5930],["#pragma warning(disable:4786)",4420],["#pragma warning(disable:4717)",3433],["#pragma warning(disable:4805)",3424],["#pragma warning(disable:4804)",3421],["// If nobody has a time different than ours but within 5 minutes of ours, give a warning",3389],["#pragma nowarn(1506)   // warning elimination",3340]]},{"word":"warranty","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *",31446],["//  but WITHOUT ANY WARRANTY; without even the implied warranty of",16907]]},{"word":"was","context":[["* License, v. 2.0. If a copy of the MPL was not distributed with this",9630],["tr(\"The passphrase entered for the wallet decryption was incorrect.\"));",9240],["throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");",5081],["// Notify UI to display prev block's coinbase if it was ours",3780],["// Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock",3715],["// the program was closed and restarted.  Not an issue on windows.",3462],["\"If [data] is specified, tries to solve the block and returns true if it was successful.\");",3293],["tr(\"Wallet encryption failed due to an internal error. Your wallet was not encrypted.\"));",3066],["tr(\"Wallet passphrase was successfully changed.\"));",2991],["// minimum work required was nBase",2880]]},{"word":"we","context":[["//Return since we have no target",17729],["// Parse the account first so we don't generate a key if there's an error",8026],["// converting string that we try to find to lower case",7722],["// Note: not using straight sprintf here because we do NOT want",6536],["case 0: // we have no bits",6487],["// Need to update only after we know CreateNewBlock succeeded",5681],["// Ask this guy to fill in what we're missing",4754],["// Process this block the same as if we had received it from another node",4477],["// Be shy and don't send version until we hear",4380],["// Don't know what it is, just say we already got one",4138]]},{"word":"what","context":[["// Ask this guy to fill in what we're missing",4754],["<< ex.what() << \"\\n\";",4599],["return state.Abort(_(\"System error: \") + e.what());",4553],["// Don't know what it is, just say we already got one",4138],["if (strstr(e.what(), \"end of data\"))",4106],["else if (strstr(e.what(), \"size too large\"))",4098],["SWIG_exception(SWIG_RuntimeError, e.what());",3930],["std::cerr << e.what() << std::endl;",3800],["strPrint = string(\"error: \") + e.what();",3794],["<< exc.what() << std::endl",3787]]},{"word":"when","context":[["// when specifying an explicit binding address, you want to listen on it",3634],["// even when -connect or -proxy is specified",3634],["// do not map ports or try to retrieve public IP when not listening (pointless)",3631],["// when only connecting to trusted nodes, do not seed via DNS, or listen by default",3612],["// Detect when changing the account of an address that is the 'unused current key' of another account:",3569],["/// when NTP implemented, change to just nTime = GetAdjustedTime()",3535],["///// are we sure this is ok when loading transactions or restoring block txes",3454],["// Cancel outstanding listen-requests for this acceptor when shutting down",3409],["// used when scores of local addresses may have changed",3290],["/* force fServer when running without GUI */",3290]]},{"word":"where","context":[["IMPLEMENTATION, where such license applies only to the PATENT",4293],["void*\t\t\t\tvar_ptr,/*!< out: where the",3009],["// Coordinates where words start and direction (0 = horizontal)",2388],["// ... where all scripts are stringified scripts.",1650],["// duration of this scope.  This is the only place where this optimization",1649],["// In case there's a situation where minTime == maxTime, we don't want a divide by zero exception.",1210],["// This is where rules clean up and exit",1085],["void*\t\t\t\tvar_ptr\t/*!< out: where the formal",1032],["thd->where= save_where;",862],["// where this?",800]]},{"word":"whether","context":[["// and on any theory of liability, whether in contract, strict liability,",3827],["/** check whether a given address is potentially local */",3638],["/** check whether a given address is in a network we can probably connect to */",3638],["\"[includeempty] whether to include addresses that haven't received any payments.\\n\"",3158],["\"[includeempty] whether to include accounts that haven't received any payments.\\n\"",3154],["// Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)",2415],["// Check whether we're already initialized",2006],["// Check whether we need to continue reindexing",2005],["// Check whether we have a transaction index",2005],["// check whether the passed transaction is from us",1970]]},{"word":"which","context":[["** If you are unsure which license is appropriate for your use, please",9541],["* VirtualBox OSE distribution, in which case the provisions of the",7877],["* in which case the provisions of the GPL or the LGPL are applicable instead",5726],["To release a closed-source product which uses JUCE, commercial licenses are",5700],["* This file is part of the Genode OS framework, which is distributed",4343],["// Do not allow blocks that contain transactions which 'overwrite' older transactions,",4060],["// 10,000 orphans, each of which is at most 5,000 bytes big is",4015],["// call functions which may have additional effects after chainging state of unit",3994],["// Find which sockets have data to receive",3760],["// Precalc the first half of the first hash, which stays constant",3653]]},{"word":"while","context":[["while (result->NextRow());",64748],["while (true)",59135],["while (true) {",52928],["} while (result->NextRow());",33538],["while (1) {",33367],["} while (0);",27827],["while (1)",25557],["while (uint32 eventId = events.ExecuteEvent())",23219],["while (true) {",21139],["} while (0)",17042]]},{"word":"widget","context":[["#include \"ui/views/widget/widget.h\"",11270],["#include \"ui/views/widget/widget.h\"",11270],["SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());",9629],["switch (widget) {",6126],["return widget;",5528],["widget->Init(params);",3477],["widget->setValidator(amountValidator);",3256],["widget->setAlignment(Qt::AlignRight|Qt::AlignVCenter);",3249],["void setupAmountWidget(QLineEdit *widget, QWidget *parent)",3238],["SendCoinsEntry *first = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(0)->widget());",3221]]},{"word":"width","context":[["int width, height;",6040],["int width) {",5480],["GLsizei width,",5464],["return width;",4547],["int width;",4349],["int width, int height) {",4333],["/// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*-",4086],["/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */",3636],["int width = 0;",3464],["width,",3280]]},{"word":"will","context":[["* This program is distributed in the hope that it will be useful,",200991],["This program is distributed in the hope that it will be useful,",124922],["* This program is distributed in the hope that it will be useful, but WITHOUT",102503],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* This library is distributed in the hope that it will be useful,",61321],["// This library is distributed in the hope that it will be useful,",51633],["This library is distributed in the hope that it will be useful,",42670],["// This program is distributed in the hope that it will be useful,",36972],["*  This program is distributed in the hope that it will be useful,",36344],["** ensure the GNU General Public License version 3.0 requirements will be",36191]]},{"word":"window","context":[["ImGuiWindow* window = GetCurrentWindow();",19697],["if (window)",9632],["#include \"ui/aura/window.h\"",8596],["if (window->SkipItems)",8336],["window.show();",5916],["ImGuiWindow* window = GetCurrentWindowRead();",4745],["window->show();",4487],["// Use an exponentially decaying ~10-minute window:",4196],["// If -min option passed, start window minimized.",3316],["if (!window)",3270]]},{"word":"with","context":[["* along with this program; if not, write to the Free Software",117514],["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["* Redistribution and use in source and binary forms, with or without",88602],["** Software or, alternatively, in accordance with the terms contained in",70819],["along with this program; if not, write to the Free Software",56481],["** accordance with the commercial license agreement provided with the",56245],["** accordance with the commercial license agreement provided with the",56245],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["* you may not use this file except in compliance with the License.",45650],["// with this library; see the file COPYING3.  If not see",42545]]},{"word":"without","context":[["* but WITHOUT ANY WARRANTY; without even the implied warranty of",324164],["but WITHOUT ANY WARRANTY; without even the implied warranty of",229610],["* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",113581],["* Redistribution and use in source and binary forms, with or without",88602],["*  but WITHOUT ANY WARRANTY; without even the implied warranty of",83546],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",66356],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",64439],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",55097],["but WITHOUT ANY WARRANTY; without even the implied warranty of",45390],["*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *",31446]]},{"word":"work","context":[["* 2 along with this work; if not, write to the Free Software Foundation,",12893],["* distributed with this work for additional information",9438],["// Check proof of work matches claimed amount",8366],["// this work for additional information regarding copyright ownership.",5393],["* this work for additional information regarding copyright ownership.",5130],["//    avoid sending us more work, like chain download requests.",4068],["return error(\"CheckProofOfWork() : nBits below minimum work\");",3793],["// Rather not work on nonstandard transactions (unless -testnet)",3667],["// minimum amount of work that could possibly be required nTime after",3653],["// distributed with this work for additional information",3434]]},{"word":"would","context":[["the absence of this license would be infringed by THIS",4293],["CLAIMS.  This grant does not include claims that would be infringed",4293],["// At default rate it would take over a month to fill 1GB",4206],["// This doesn't trigger the DoS code on purpose; if it did, it would make it easier",4076],["// seconds to respond to each, the 5th ping the remote sends would appear to",4073],["// Some explaining would be appreciated",3638],["// To help v0.1.5 clients who would see it as a negative number",3433],["// would make this much faster for applications that do this a lot.",2226],["in a product, an acknowledgment in the product documentation would be",2166],["* in a product, an acknowledgment in the product documentation would be",1845]]},{"word":"write","context":[["* along with this program; if not, write to the Free Software",117514],["along with this program; if not, write to the Free Software",56481],["* along with this library; see the file COPYING.LIB.  If not, write to",27851],["along with this program; if not, write to the Free Software",25711],["* along with this program; if not, write to the Free Software",25102],["along with this library; see the file COPYING.LIB.  If not, write to",23051],["*  along with this program; if not, write to the Free Software",21350],["* License along with this library; if not, write to the Free Software",20257],["*   along with this program; if not, write to the                         *",15589],["* 2 along with this work; if not, write to the Free Software Foundation,",12893]]},{"word":"written","context":[["** a written agreement between you and Digia.  For licensing terms and",37400],["* this software without specific prior written permission.",19944],["** conditions contained in a signed written agreement between you and Nokia.",14942],["** a written agreement between you and Nokia.",14574],["*     from this software without specific prior written permission.",11257],["// this software without specific prior written permission.",10813],["** a written agreement between you and The Qt Company. For licensing terms",9470],["**     from this software without specific prior written permission.",8755],["* this software without specific prior written permission.",7088],["** a written agreement between you and The Qt Company.  For licensing terms and",6208]]},{"word":"wtx","context":[["const CWalletTx& wtx = (*it).second;",24998],["BOOST_FOREACH(const CTxOut& txout, wtx.vout)",21098],["CWalletTx wtx;",16517],["if (wtx.GetDepthInMainChain() >= nMinDepth)",12771],["WalletTxToJSON(wtx, entry);",11987],["return wtx.GetHash().GetHex();",11124],["wtx.strFromAccount = strAccount;",7168],["if (wtx.IsCoinBase() || !wtx.IsFinal())",6168],["if (wtx.IsCoinBase() || !wtx.IsFinal())",6168],["if (wtx.IsCoinBase())",5968]]},{"word":"www","context":[["* with this program. If not, see <http://www.gnu.org/licenses/>.",96760],["// file COPYING or http://www.opensource.org/licenses/mit-license.php.",76975],["** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",65420],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",51893],["** Contact: http://www.qt-project.org/legal",46977],["// <http://www.gnu.org/licenses/>.",46023],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",39601],["** met: http://www.gnu.org/copyleft/gpl.html.",36012],["** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",28642],["* available from http://www.virtualbox.org. This file is free software;",20778]]},{"word":"x","context":[["float x, y, z;",29528],["return x;",20997],["int x;",16904],["int x, y;",15616],["x = 0;",12292],["x++;",10855],["int x = 0;",10257],["double **x = atom->x;",9940],["double **x = atom->x;",9940],["http://www.cocos2d-x.org",9025]]},{"word":"x1","context":[["case Unlock: // Old passphrase x1",3090],["case ChangePass: // Old passphrase x1, new passphrase x2",3086],["for (auto& x1 : *range[1])",1835],["// (x1 x2 -- out)",1496],["for (int i1 = 0; i1 != x1.size(); ++i1) {",1335],["double x1=x[1];",1228],["QObject*tx1 = *((QPointer<QObject>*)x1);",1171],["x1 = x2;",1108],["// (x1 x2 -- x2 x1)",1018],["// (x1 x2 -- x1 x2 x1)",1018]]},{"word":"y","context":[["float x, y, z;",29528],["int x, y;",15616],["y = 0;",8015],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;",7682],["int y;",7423],["return y;",6717],["float x, y, z, o;",5910],["int y = 0;",5510],["float x, y;",5415],["y++;",5407]]},{"word":"you","context":[["* This program is free software; you can redistribute it and/or modify it",102350],["* This program is free software; you can redistribute it and/or modify",89578],["* This program is free software; you can redistribute it and/or",62550],["* This library is free software; you can redistribute it and/or",56375],["*   This program is free software; you can redistribute it and/or modify  *",54624],["// software; you can redistribute it and/or modify it under the",50473],["This program is free software; you can redistribute it and/or modify",46782],["* you may not use this file except in compliance with the License.",45650],["This library is free software; you can redistribute it and/or",43697],["* This program is free software: you can redistribute it and/or modify",41811]]},{"word":"your","context":[["* (at your option) any later version.",163870],["(at your option) any later version.",132249],["* Free Software Foundation; either version 2 of the License, or (at your",85385],["*   (at your option) any later version.                                   *",53031],["* of the License, or (at your option) any later version.",52634],["// Free Software Foundation; either version 3, or (at your option)",44217],["*  (at your option) any later version.",35379],["* version 2 of the License, or (at your option) any later version.",33135],["// (at your option) any later version.",32814],["*  the Free Software Foundation; either version 2, or (at your option)",27468]]},{"word":"z","context":[["float x, y, z;",29528],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;",7682],["return z;",6770],["float x, y, z, o;",5910],["float x,y,z;",4158],["{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;",3588],["case 'z':",3096],["me->GetPosition(x, y, z);",3023],["n = n + gen_oh ( 6, a, b, v, x + n, y + n, z + n, w + n );",2892],["{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;",2808]]},{"word":"zero","context":[["*              none-zero failure code",3815],["// Keep-alive ping. We send a nonce of zero because we don't use it anywhere",3348],["* the value zero, false, is returned for failure.",2737],["\"If verbose is non-zero, returns an Object\\n\"",2218],["// if you set it to zero then",1830],["// ScanHash scans nonces looking for a hash with at least some zero bits.",1818],["// Return the nonce if the hash has at least some zero bits,",1806],["// the block is rebuilt and nNonce starts over at zero.",1687],["/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */",1643],["// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9",1506]]}]
