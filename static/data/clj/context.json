[{"word":"A","context":[["\"A transducer which concatenates the contents of each input, which must be a",47],["\"A fixed window over the event stream in time. Emits vectors of events, such",34],["(set-reg cpu-state :A  0x00)",40],["\"A Var containing an object representing the application under",47],["(set-reg cpu-state :A  0x7F)",31],[";A    D1    D2    R        BP    SUS",30],["Returns:  Point - A point object representing the position of this object\"",50],["(is (= 0x00 (get-reg cpu-state :A)))",68],[":section \"A\",",95],[";; A list of data domains for the problem. Each domain is a vector containing",100]],"useCount":2105},{"word":"BitmapIndexedNode","context":[["(.-EMPTY BitmapIndexedNode)",102],["(BitmapIndexedNode. nil bitmap",71],[":else (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))))",71],["(deftype BitmapIndexedNode [edit ^:mutable bitmap ^:mutable arr]",71],["(BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))",71],["(BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) val)))",71],["(not (nil? n)) (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))",71],["(BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))))",71],["(BitmapIndexedNode. e bitmap new-arr))))",71],["(-> (.-EMPTY BitmapIndexedNode)",98]],"useCount":1530},{"word":"BlackNode","context":[["(and (instance? RedNode right) (instance? BlackNode (.-left right)))",71],["BlackNode",76],["(BlackNode. (.-key right) (.-val right)",142],["(BlackNode. key val left right nil))",142],["(BlackNode. (.-key ins) (.-val ins)",142],["(BlackNode. (.-key parent) (.-val parent)",213],["(if (instance? BlackNode (.-left tree))",71],["(BlackNode. key val left (.-left right) nil)",71],["(declare RedNode BlackNode)",71],["(BlackNode. key val",71]],"useCount":2605},{"word":"Content","context":[[":headers {\"Content-Type\" \"application/json; charset=utf-8\"}",46],[":headers {\"Content-Type\" \"text/html\"}",455],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],[":headers {\"Content-Type\" \"application/json\"}",293],[":headers {\"Content-Type\" \"text/plain\"}",281],[":headers {\"Content-Type\" \"text/html; charset=utf-8\"}",154],[":headers {\"Content-Type\" \"application/edn\"}",82],["pct (rucore/parse-media-type (get hdrs \"Content-Type\"))",57],["(is (= \"text/plain\" (get-in response [:headers \"Content-Type\"])))",49]],"useCount":3169},{"word":"DELETED","context":[["DELETED timestamp,",1449],["DELETED timestamp",179]],"useCount":1628},{"word":"DEV","context":[[":environment \"DEV\"",582],["\"environment\" \"DEV\"",76],["{:certname \"foo2\" :name \"operatingsystem\" :value \"RedHat\" :environment \"DEV\"}",58],["[\"=\" \"environment\" \"DEV\"]",47],["{:certname \"foo2\" :name \"hostname\" :value \"foo2\" :environment \"DEV\"}",58],["{:certname \"foo1\" :name \"operatingsystem\" :value \"Debian\" :environment \"DEV\"}",58],["{:certname \"foo2\" :name \"kernel\" :value \"Linux\" :environment \"DEV\"}",58],["{:certname \"foo1\" :name \"kernel\" :value \"Linux\" :environment \"DEV\"}",48],["{:certname \"foo1\" :name \"some_version\" :value \"1.3.7+build.11.e0f985a\" :environment \"DEV\"}",48],["{:certname \"foo3\" :name \"kernel\" :value \"Darwin\" :environment \"DEV\"}",48]],"useCount":2393},{"word":"Date","context":[["Date",60],["(:import java.util.Date))",54],["(:import java.util.Date",51],["(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),",48],["(:import [java.util Date]",55],["java.util.Date",108],["[java.util Date]",62],["(and (instance? js/Date other)",71],["(extend-type js/Date",71],["(instance? js/Date obj)",70]],"useCount":1700},{"word":"EMPTY","context":[["(-empty [coll] (with-meta (.-EMPTY List) meta))",398],["(-empty [coll] (with-meta cljs.core.List/EMPTY meta))",57],["(-empty [coll] (with-meta (.-EMPTY PersistentVector) meta))",98],["(-> (.-EMPTY BitmapIndexedNode)",98],["(.-EMPTY BitmapIndexedNode)",102],["(-empty [coll] (with-meta (.-EMPTY List) _meta))",147],["(-empty [coll] (with-meta cljs.core.List.EMPTY meta))",160],["(-empty [rng] (with-meta (.-EMPTY List) meta))",49],["(-empty [coll] (.-EMPTY List))",55],["(-empty [coll] (-with-meta (.-EMPTY PersistentHashMap) meta))",51]],"useCount":3917},{"word":"ENTERPRISE_ID","context":[["ENTERPRISE_ID numeric NOT NULL,",1393],["PRIMARY KEY (ENTERPRISE_ID,CASE_ID,SEQ_NUM,DLP_REVISION_NUMBER)",100],["PRIMARY KEY (ENTERPRISE_ID,CASE_ID,DLP_REVISION_NUMBER)",65],["PRIMARY KEY (ENTERPRISE_ID,ID)",56],["PRIMARY KEY (ENTERPRISE_ID,SEQ_NUM)",48],["PRIMARY KEY (ENTERPRISE_ID,CASE_ID,PROD_SEQ_NUM,SEQ_NUM,DLP_REVISION_NUMBER)",16],["PRIMARY KEY (ENTERPRISE_ID,STUDY_KEY,SEQ_NUM)",12],["PRIMARY KEY (ENTERPRISE_ID,CLASSIFICATION_ID)",12],["PRIMARY KEY (ENTERPRISE_ID,REPORT_FORM_ID)",12],["PRIMARY KEY (ENTERPRISE_ID,STATUS_ID)",12]],"useCount":1726},{"word":"Error","context":[["(throw (js/Error. \"count after persistent!\"))))",216],["(throw (js/Error. \"persistent! called twice\"))))",216],["(js/Error.",172],["(throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))",162],["(throw (js/Error. \"conj! after persistent!\"))))",143],["(zero? cnt) (throw (js/Error. \"Can't pop empty vector\"))",143],["(throw (js/Error. \"assoc! after persistent!\"))))",218],["(remove [_] (js/Error. \"Unsupported operation\")))",267],["(catch js/Error e",337],["(throw (js/Error. \"red-black tree invariant violation\"))))",142]],"useCount":6317},{"word":"EventType","context":[["[goog.history.EventType :as EventType]",298],["[goog.history EventType]))",28],["(events/listen xhr goog.net.EventType.COMPLETE",36],["(:import [goog.events EventType]))",47],["goog.net.EventType",51],["[goog.events EventType]))",53],["[goog.history.EventType :as EventType])",109],["[goog.history.EventType :as EventType])",109],["EventType/NAVIGATE",257],["[goog.history.EventType :as EventType]",298]],"useCount":1566},{"word":"Example","context":[["event times. Example:",50],["Example:",151],["of functions. Example:",25],["Example usage:",118],["atom's value will change.  Example:",71],["Example",62],["Example:",1021],["Unlike smap, passes on nil results to children. Example:",21],["; Example:",21],["Prefer this to (adjust f) and (combine f). Example:",25]],"useCount":1640},{"word":"Exception","context":[["(catch Exception e",4907],["(catch Exception ex",462],["(catch Exception e#",251],["(catch Exception _",214],["(throw (Exception.",179],["(is (thrown? Exception",172],["(catch Exception e nil)))",154],["(throw (Exception. (str \"Production environment code is being loaded while the dev environment is active. \"",123],["(throw (Exception. \"Browser connected REPL is not available in prod mode\")))",122],["(throw (Exception. \"Figwheel is not available in prod mode\")))",122]],"useCount":9024},{"word":"ExceptionInfo","context":[["Create an instance of ExceptionInfo, an Error type that carries a",55],["(is (thrown? ExceptionInfo",58],["Returns the message attached to the given Error / ExceptionInfo object.",55],["Returns exception cause (an Error / ExceptionInfo) if ex is an",55],[";;; ExceptionInfo",69],["ExceptionInfo.",69],["(is (thrown? clojure.lang.ExceptionInfo",82],["(catch ExceptionInfo e",89],["(when (instance? ExceptionInfo ex)",138],["(catch clojure.lang.ExceptionInfo e",213]],"useCount":1919},{"word":"FIXME","context":[[";; FIXME",34],["\"FIXME: document\"",36],[":description \"FIXME: Android project description\"",43],["\"FIXME: write documentation\"",64],[":url \"http://example.com/FIXME\"",8641],[":description \"FIXME: write description\"",7708],["(testing \"FIXME, I fail.\"",5498],[":description \"FIXME: write this!\"",303],["([x y] (cljs.core/divide x y)) ;; FIXME: waiting on cljs.core//",138],["(deftest replace-me ;; FIXME: write",110]],"useCount":22840},{"word":"FROM","context":[["; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",30],["(let [result (query-to-vec \"SELECT certname,environment_id FROM factsets\")]",32],["(is (= (query-to-vec \"SELECT certname,deactivated FROM certnames\")",29],["FROM facts f",27],["FROM factsets fs",144],["FROM certnames",39],["(query-to-vec \"SELECT certname, environment_id FROM catalogs\")))",37],["(is (= (query-to-vec [\"SELECT certname FROM certnames\"])",36],["FROM game",31],["(query-to-vec (format \"SELECT certname, %s as catalog FROM catalogs\"",33]],"useCount":1569},{"word":"File","context":[["(:import java.io.File))",129],["java.io.File",92],["(:import (java.io File)))",118],["{:type       \"File\"",131],["File",131],["[java.io File]",137],["(:import [java.io File]",138],["(:import [java.io File]))",152],["(:import [java.io File])",89],["[java.io File]))",81]],"useCount":4078},{"word":"GET","context":[["(GET \"/\" []",273],["[compojure.core :refer [GET defroutes]]",273],["(GET \"/\" [] (home-page))",93],["(GET \"/\" [] loading-page)",91],[":httpmethod \"GET\",",113],["[ajax.core :refer [GET POST]]",114],["(GET \"/\" [] home-page)",120],["[compojure.core :refer [defroutes GET]]",135],["(:require [compojure.core :refer [GET defroutes]]",257],["(GET \"/*\" req (page)))",234]],"useCount":4463},{"word":"Hello","context":[["(GET \"/\" [] \"Hello World\")",57],["(is (= (:body response) \"Hello World\"))))",172],["(println \"Hello world!\")",36],["(println x \"Hello, World!\"))",888],["(is (= (:body response) \"Hello, World!\")))",121],["(GET \"/\" [] \"<p>Hello from compojure</p>\")",34],["(println \"Hello, World!\"))",693],["(defonce app-state (atom {:text \"Hello Chestnut!\"}))",48],["(is (= (:body response) \"Hello, World!\")))))",49],["(println \"Hello, World!\")",51]],"useCount":2634},{"word":"I","context":[["(testing \"FIXME, I fail.\"",5498],[":section \"I\",",26],["; timescales are likely to have undefined ordering *anyway*, I don't",27],["I want to be near them': for-loop, p. 27 middle.)\"",44],["[logbug.debug :as debug :refer [I> I>> identity-with-logging]]",83],["[logbug.debug :as debug :refer [I> I>> identity-with-logging]]",83],["; What I pasted in the box:",114],["\"I don't do a whole lot.\"",984],["\"I don't do a whole lot ... yet.\"",1040],["No, I'm not really sure what to do about it. Maybe we need a named service",25]],"useCount":8500},{"word":"ICollection","context":[["(defprotocol ICollection",72],["ICollection",2079],["(satisfies? ICollection x)))",71],["\"Returns true if x satisfies ICollection\"",71]],"useCount":2293},{"word":"ICounted","context":[["(implements? ICounted coll)",63],["cljs.core/ICounted",16],["[x] (satisfies? ICounted x))",71],["ICounted",1894],["(native-satisfies? ICounted coll)",42],["ICounted",78],["(defprotocol ICounted",72]],"useCount":2236},{"word":"IEmptyableCollection","context":[["IEmptyableCollection",2054],["(defprotocol IEmptyableCollection",71]],"useCount":2125},{"word":"IEquiv","context":[["IEquiv",2786],["(extend-protocol IEquiv",11],["(defprotocol IEquiv",72]],"useCount":2869},{"word":"IFn","context":[["(clojure.lang IFn)))",24],["IFn",1283],["clojure.lang.IFn",315],["IFn",81],["(defprotocol IFn",72],["(or (fn? f) (satisfies? IFn f)))",72],["\"Returns true if f returns true for fn? or satisfies IFn.\"",33],["[handler :- IFn",31],["[event-callbacks :- [IFn]",25],["flush-instance-fn :- IFn",24]],"useCount":2098},{"word":"IHash","context":[["(extend-protocol IHash",12],["IHash",13],["(implements? IHash o)",63],["(defprotocol IHash",72],["IHash",2587]],"useCount":2747},{"word":"ILookup","context":[["ILookup",1137],["(native-satisfies? ILookup o)",128],["clojure.lang.ILookup",120],["(defprotocol ILookup",72],["(if (not (satisfies? ILookup m))",65],["ILookup",51],["(type_satisfies_ ILookup o)",12],["(satisfies? ILookup o false)",12],["(implements? ILookup o)",128]],"useCount":1725},{"word":"IMeta","context":[["IMeta",73],["clojure.lang.IMeta",28],["(implements? IMeta obj)",21],["(when (instance? clojure.lang.IMeta node)",11],["(when (satisfies? IMeta o)",11],["(satisfies? IMeta o))",62],["(satisfies? IMeta obj)",52],["(defprotocol IMeta",72],["IMeta",2244]],"useCount":2574},{"word":"IReduce","context":[["\"Returns true if coll satisfies IReduce\"",72],["(defprotocol IReduce",72],["[x] (satisfies? IReduce x))",71],["(type_satisfies_ IReduce coll)",12],["(native-satisfies? IReduce coll)",126],["(satisfies? IReduce coll false)",12],["(implements? IReduce coll)",126],["IReduce",1444]],"useCount":1935},{"word":"IRender","context":[["om/IRender",2150],["(reify om/IRender",60],["(defprotocol IRender",24],["IRender",23],["\"Builds an Om component. Takes an IRender/IRenderState instance",18],["argument. f must return at a minimum an IRender or IRenderState",16],["(satisfies? IRender c)",16],["f must return an instance that at a minimum implements IRender or",15],["om/IRender (render [_]",13],["om.core/IRender",12]],"useCount":2358},{"word":"ISeq","context":[["ISeq",1310],["(if (implements? ISeq coll)",126],["clojure.lang.ISeq",93],["ISeq",86],["(defprotocol ISeq",72],["(satisfies? ISeq coll)",71],["(satisfies? ISeq s)))",71],["\"Return true if s satisfies ISeq\"",71],["(implements? ISeq coll))",63],["(implements? ISeq coll)",42]],"useCount":2120},{"word":"ISeqable","context":[[":else (throw (js/Error. (str coll \"is not ISeqable\"))))))",16],["ISeqable",2234],["(implements? ISeqable coll)",84],["(defprotocol ISeqable",72],["(satisfies? ISeqable s))",71],["\"Return true if s satisfies ISeqable\"",71],["ISeqable",43],[":else (throw (js/Error. (str coll \" is not ISeqable\"))))))",53],["(native-satisfies? ISeqable coll)",63]],"useCount":2707},{"word":"ISequential","context":[["(defprotocol ISequential",71],["[x] (satisfies? ISequential x))",71],["ISequential",1619],["ISequential",19],["\"Returns true if coll satisfies ISequential\"",71]],"useCount":1851},{"word":"IWithMeta","context":[["IWithMeta",2122],["(defprotocol IWithMeta",72],["(if (and (fn? o) (not (satisfies? IWithMeta o)))",49],["(if (satisfies? IWithMeta o)",19]],"useCount":2262},{"word":"If","context":[["argument.  If there are no more items, returns nil\"",73],["the first.  If a key occurs in more than one map, the mapping(s)",74],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["\"If no denominators are supplied, returns 1/numerator,",140],["is returned and f is not called.  If val is supplied, returns the",72],["nested structure.  If any levels do not exist, hash-maps will be",72],["the first.  If a key occurs in more than one map, the mapping from",72],["\"f should be a function of 2 arguments. If val is not supplied,",72],["If metadata-map is supplied, it will be come the metadata on the",72],["2nd key and value, etc. If coll contains no entries, returns init",72]],"useCount":5284},{"word":"IllegalArgumentException","context":[["(is (thrown-with-msg? IllegalArgumentException",111],["(catch IllegalArgumentException ex",56],["(catch IllegalArgumentException _ context))",51],["(catch IllegalArgumentException e",164],["(IllegalArgumentException.",175],[":else (throw (IllegalArgumentException.",197],["IllegalArgumentException",296],["java.lang.IllegalArgumentException",385],["(is (thrown? IllegalArgumentException",489],["(throw (IllegalArgumentException.",1270]],"useCount":4003},{"word":"Integer","context":[["(let [port (Integer. (or port (env :port) 10555))]",276],["(let [port (if port (Integer/parseInt port) 3000)]",304],["Integer",60],["(Integer/parseInt (second (:groups %1)))",63],["(let [port (if port (Integer/parseInt port) 8080)]",63],["(let [port (Integer. (or port (env :port) 5000))]",71],["(let [port (Integer/parseInt (or (System/getenv \"PORT\") \"3000\"))]",73],[":parse-fn #(Integer/parseInt %)]",110],["(let [port (Integer/parseInt (or (env :port) \"3000\"))]",213],[":parse-fn #(Integer/parseInt %)",254]],"useCount":2937},{"word":"JavaScript","context":[["(-clj->js [x] \"Recursively transforms clj values to JavaScript\")",69],["\"Takes a JavaScript object and a map of names to functions and",71],["hierarchy. Note: does not work on JavaScript type inheritance",71],["\"Recursively transforms ClojureScript values to JavaScript.",72],["\"Recursively transforms JavaScript arrays into ClojureScript",75],["vectors, and JavaScript objects into ClojureScript maps.  With",75],["(-js->clj [x options] \"Transforms JavaScript values to Clojure\"))",69],["parent, either via a JavaScript type inheritance relationship or a",71],["\"Returns the immediate and indirect parents of tag, either via a JavaScript type",71],["\"Returns the immediate parents of tag, either via a JavaScript type",71]],"useCount":1523},{"word":"Keyword","context":[["Keyword",72],["\"Returns a Keyword with the given namespace and name.  Do not use :",71],["(deftype Keyword [ns name fqn ^:mutable _hash]",67],["(instance? Keyword x))",67],["(declare instance? Keyword)",67],["[version :- s/Keyword]",81],["clojure.lang.Keyword",136],["(if (instance? Keyword other)",67],["([ns name] (Keyword. ns name (str (when ns (str ns \"/\")) name) nil)))",66],["(Keyword. nil (aget parts 0) name nil)))))",62]],"useCount":1454},{"word":"Lifecycle","context":[["(defprotocol Lifecycle",18],["component/Lifecycle",1491],["Lifecycle",148],["c/Lifecycle",102],["component/Lifecycle",46],["comp/Lifecycle",28],["[com.stuartsierra.component :refer (Lifecycle)]",19],["[com.stuartsierra.component :refer [Lifecycle]]",18],[";; Implement the Lifecycle protocol",17],["com/Lifecycle",14]],"useCount":1938},{"word":"List","context":[["(deftype List [meta first rest count ^:mutable __hash]",71],["(-empty [coll] (with-meta (.-EMPTY List) meta))",398],["(-empty [coll] (with-meta cljs.core.List.EMPTY meta))",160],["(-empty [coll] (with-meta (.-EMPTY List) _meta))",147],["List",85],["(-conj [coll o] (List. meta o nil 1 nil))",71],["(-conj [coll o] (List. meta o coll (inc count) nil))",71],["(-with-meta [coll meta] (List. meta first rest count __hash))",71],["(-clone [_] (List. meta first rest count __hash))",58],["(-empty [coll] (with-meta cljs.core.List/EMPTY meta))",57]],"useCount":1801},{"word":"NOT","context":[["ID numeric NOT NULL,",180],["DLP_REVISION_NUMBER numeric NOT NULL,",404],["ENTERPRISE_ID numeric NOT NULL,",1393],["SEQ_NUM numeric NOT NULL,",421],["EFFECTIVE_END_DATE timestamp NOT NULL,",352],["EFFECTIVE_START_DATE timestamp NOT NULL,",392],["DELETED_FLAG numeric(1) NOT NULL,",392],["CASE_ID numeric NOT NULL,",416],["GLOBAL_DICT_ID numeric NOT NULL,",311],["PROD_SEQ_NUM numeric NOT NULL,",66]],"useCount":6634},{"word":"NULL","context":[["DLP_REVISION_NUMBER numeric NOT NULL,",404],["ID numeric NOT NULL,",180],["GLOBAL_DICT_ID numeric NOT NULL,",311],["EFFECTIVE_END_DATE timestamp NOT NULL,",352],["EFFECTIVE_START_DATE timestamp NOT NULL,",392],["DELETED_FLAG numeric(1) NOT NULL,",392],["CASE_ID numeric NOT NULL,",416],["SEQ_NUM numeric NOT NULL,",421],["ENTERPRISE_ID numeric NOT NULL,",1393],["PROD_SEQ_NUM numeric NOT NULL,",66]],"useCount":6618},{"word":"Not","context":[["(route/not-found \"Not found\"))",29],["(route/not-found \"Not Found\")))",32],["Not supported in clojurescript.",33],["First cut.  Not lazy.  Needs to use emitted toApply.\"",38],["{:tag :b, :attrs nil, :content (\"Not voted\")}",39],["(do (println \"Not found: \" res)",56],["\"Returns a seq of the items in coll in reverse order. Not lazy.\"",72],["(not-found \"Not Found\"))",324],["(route/not-found \"Not Found\"))",545],["(route/not-found \"404 Not Found\"))",28]],"useCount":1442},{"word":"Note","context":[["logical false. Note that f is short-circuiting in that it will stop execution on the first",71],["fn will be called synchronously. Note that an atom's state",71],["returns that non-fn value. Note that if you want to return a fn as a",71],["\"Returns a lazy sequence of the non-nil results of (f index item). Note,",71],["returns false.  Note that for numerically indexed collections like",72],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["hierarchy. Note: does not work on JavaScript type inheritance",71],["and f is not called. Note that reduce-kv is supported on vectors,",72],["Note - not the same as next/butlast.\"",72]],"useCount":2042},{"word":"Object","context":[[";; Object",38],["Object",4473],["Object",1033],["java.lang.Object",113],["(catch Object _",103],["(catch js/Object e",102],["(identical? (type x) js/Object)",76],["(catch js/Object e nil)))))",60],["(identical? (.-constructor x) js/Object)",58],["(extend-type Object",40]],"useCount":6519},{"word":"Parameters","context":[["; Parameters:",33],["Required Parameters:",22],["Parameters:",1929],["Parameters:",218],["[title :level :level3 :label \"Parameters\"]",14],["Parameters:\\n",15],["#### Parameters:",19],["##### Parameters",100],["*Parameters*:",21],["Optional Parameters:",22]],"useCount":2426},{"word":"PersistentArrayMap","context":[["(-with-meta [coll meta] (PersistentArrayMap. meta cnt arr __hash))",71],["PersistentArrayMap",87],["(deftype PersistentArrayMap [meta cnt arr ^:mutable __hash]",71],["(PersistentArrayMap. nil (quot len 2) arr nil))",71],["(>= s len) (PersistentArrayMap. meta (dec cnt) new-arr nil)",71],[";;; PersistentArrayMap",71],["(PersistentArrayMap. meta (inc cnt) arr nil))",69],["(PersistentArrayMap. meta cnt arr nil)))))",69],["(-clone [_] (PersistentArrayMap. meta cnt arr __hash))",58],["(if (<= (+ len 2) (* 2 (.-HASHMAP-THRESHOLD PersistentArrayMap)))",49]],"useCount":1528},{"word":"PersistentHashMap","context":[["(PersistentHashMap. meta (if ^boolean (.-val added-leaf?) (inc cnt) cnt) new-root has-nil? nil-val nil)))))",71],["(PersistentHashMap. nil count root has-nil? nil-val nil))",71],["(PersistentHashMap. meta (dec cnt) root false nil nil)",71],[";;; PersistentHashMap",71],["(-with-meta [coll meta] (PersistentHashMap. meta cnt root has-nil? nil-val __hash))",71],["(PersistentHashMap. meta (if has-nil? cnt (inc cnt)) root true v nil))",71],["PersistentHashMap",89],["(PersistentHashMap. meta (dec cnt) new-root has-nil? nil-val nil)))))",71],["(deftype PersistentHashMap [meta cnt root ^boolean has-nil? nil-val ^:mutable __hash]",71],["(declare TransientHashMap PersistentHashMap)",68]],"useCount":1556},{"word":"PersistentVector","context":[["(-empty [coll] (with-meta (.-EMPTY PersistentVector) meta))",98],["(PersistentVector. meta cnt shift root new-tail nil))",71],["(PersistentVector. meta cnt-1 shift new-root new-tail nil)))))",71],["(-with-meta [coll meta] (PersistentVector. meta cnt shift root tail __hash))",71],["(PersistentVector. meta (inc cnt) shift root new-tail nil))",71],["(PersistentVector. meta cnt-1 (- shift 5) (pv-aget new-root 0) new-tail nil)",71],["(PersistentVector. nil cnt shift root trimmed-tail nil)))",71],["clojure.lang.PersistentVector",104],["PersistentVector",168],["(PersistentVector. meta (dec cnt) shift root (.slice tail 0 -1) nil)",71]],"useCount":2322},{"word":"RedNode","context":[["(instance? RedNode (.-right ins))",142],["(RedNode. (.-key right) (.-val right)",213],["(instance? RedNode right)",213],["(instance? RedNode left)",213],["(RedNode. (.-key left) (.-val left)",284],["(instance? RedNode (.-left ins))",142],["(RedNode. (.-key app) (.-val app)",142],["(if (instance? RedNode app)",142],["(RedNode. (.-key ins) (.-val ins)",142],["(if (instance? RedNode ins)",142]],"useCount":3670},{"word":"Return","context":[["\"Return true if x satisfies IVector\"",71],["\"Return the last item in coll, in linear time\"",72],["\"Return true if s satisfies ISeq\"",71],["\"Return true if s satisfies ISeqable\"",71],["\"Return a random element of the (sequential) collection. Will have",71],["\"Return a lazy sequence of all but the last n (default 1) items in coll\"",71],["\"Return a random permutation of coll\"",71],["Return:",46],["\"EXPERIMENTAL: Return a ES2015 compatible iterator for coll.\"",33],["\"Return true if x satisfies IMap\"",72]],"useCount":1502},{"word":"Returns","context":[["\"Returns the product of nums. (*) returns 1.\"",209],["\"Returns the sum of nums. (+) returns 0.\"",209],["Returns a transducer when no collection is provided.\"",197],["\"Returns a map that consists of the rest of the maps conj-ed onto",146],["\"Returns a lazy sequence of the items in coll for which",144],["\"Returns an object of the same type and value as obj, with",143],["Returns:",143],["*Returns*:",142],["current value. Returns newval.\"",107],["\"Returns a random integer between 0 (inclusive) and n (exclusive).\"",100]],"useCount":17651},{"word":"SNAPSHOT","context":[["[figwheel \"0.2.5-SNAPSHOT\"]",43],["(defproject euler \"0.1.0-SNAPSHOT\"",42],["[com.cemerick/piggieback \"0.1.6-SNAPSHOT\"]",45],[":plugins [[lein-cljsbuild \"1.0.4-SNAPSHOT\"]]",67],["[weasel \"0.4.0-SNAPSHOT\"]",114],[":plugins [[lein-figwheel \"0.2.1-SNAPSHOT\"]]",37],["\"0.1.0-SNAPSHOT\"",39],["(defproject {{name}} \"0.1.0-SNAPSHOT\"",137],[":plugins [[lein-figwheel \"0.1.4-SNAPSHOT\"]]",118],["[figwheel \"0.1.4-SNAPSHOT\"]",119]],"useCount":1933},{"word":"Str","context":[["{:href s/Str",38],["(s/optional-key :environment) (s/maybe s/Str)",42],["{:name s/Str",48],["subject :- schema/Str",52],[":header-params [api_key :- (s/maybe s/Str)]",136],["subject :- schema/Str]",145],[":name s/Str",87],[":path-params [id :- s/Str]",81],["[subject :- schema/Str",65],["{(s/optional-key :certname) s/Str",54]],"useCount":2811},{"word":"String","context":[["^String",108],["java.lang.String",169],["[^String s]",244],["[^String path]",89],["[certname :- String]",82],["String",405],["[certname :- String",82],["(String. (base64/encode",77],["\"Returns the namespace String of a symbol or keyword, or nil if not present.\"",71],["\"Returns the name String of a string, symbol or keyword.\"",71]],"useCount":4026},{"word":"System","context":[["(System/exit status))",252],["(System/exit 1))",236],["(System/exit 0)))",149],["(System/exit 1))))",115],["(let [start (System/nanoTime)]",99],["(System/exit 0)",87],["(System/currentTimeMillis))",78],["(let [start (System/currentTimeMillis)",74],["(let [port (Integer/parseInt (or (System/getenv \"PORT\") \"3000\"))]",73],["(System/exit 0))",546]],"useCount":3510},{"word":"The","context":[["of those fns.  The returned fn takes a variable number of args, and",71],[";;published by The Pragmatic Bookshelf.",90],["(str \"The following errors occurred while parsing your command:\\n\\n\"",174],["\"(string, optional) The desired response format: json, xml, or vdf. Default: json\"]),",185],["f on each element. The value at each key will be a vector of the",71],["\"Returns a memoized version of a referentially transparent function. The",71],["any registered watches will have their functions called. The watch",71],["; published by The Pragmatic Bookshelf.",73],["; The keys field is an array of all keys of this map, in no particular",73],["of those fns.  The returned fn takes a variable number of args,",71]],"useCount":4921},{"word":"This","context":[[";; This Source Code Form is subject to the terms of the Mozilla Public",183],[";; This Source Code Form is subject to the terms of the Mozilla Public",154],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["\"Tools for interactive development with the REPL. This file should",76],["defaults to (count vector). This operation is O(1) and very fast, as",72],["list of strings to concatenate.  This involved lots of concat calls,",70],["Returns:  PIXI.DisplayObject - This instance.\"",66],[";;; This file is part of ARIES.",62],["Returns:  Phaser.BitmapData - This BitmapData object for method chaining.\"",53],[";;;; This file is part of statehack.",50]],"useCount":4164},{"word":"Thread","context":[["(Thread/sleep 1000)",570],["(Thread.",81],["(Thread/sleep 100)",549],["(Thread/sleep 500)",283],["(Thread/sleep 10)",169],["(Thread/sleep 2000)",154],["(Thread/sleep 5000)",135],["(Thread/sleep 50)",130],["(Thread/sleep 200)",107],["(Thread/sleep 10000)",105]],"useCount":4157},{"word":"Throwable","context":[["(catch Throwable t",1019],["(catch Throwable e",1007],["(catch Throwable ex",145],["(catch Throwable e#",127],["(catch Throwable t#",106],["(catch Throwable _",49],["(catch Throwable _ false)))",48],["Throwable",37],["[^Throwable e]",32],["(throw (Throwable. \"oops\"))",21]],"useCount":2933},{"word":"Type","context":[[":headers {\"Content-Type\" \"text/plain\"}",281],[":headers {\"Content-Type\" \"application/json; charset=utf-8\"}",46],["(is (= \"text/plain\" (get-in response [:headers \"Content-Type\"])))",49],["pct (rucore/parse-media-type (get hdrs \"Content-Type\"))",57],["(is (= (headers \"Content-Type\") c-t))",45],[":headers {\"Content-Type\" \"application/edn\"}",82],[":headers {\"Content-Type\" \"text/html; charset=utf-8\"}",154],[":headers {\"Content-Type\" \"application/json\"}",293],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],[":headers {\"Content-Type\" \"text/html\"}",455]],"useCount":2742},{"word":"UUID","context":[["(str (java.util.UUID/randomUUID)))",90],["(:import (java.util UUID)))",61],["(str (UUID/randomUUID)))",65],["(and (instance? UUID other) (identical? uuid (.-uuid other))))",71],[";; UUID",74],["(def id (java.util.UUID/randomUUID))",75],["(:import java.util.UUID))",77],["(let [id (java.util.UUID/randomUUID)",120],[":core.async/id (java.util.UUID/randomUUID)",231],["(:import [java.util UUID]))",78]],"useCount":1956},{"word":"V","context":[["V[",79],["V(",565],["V)",566],["V",930],["V\\u000a",323],["V.",274],["V]",79],["V \\u000a",26],["^{:author \"Frank V. Castellucci\"",25],["V\\u000a\\u000a",23]],"useCount":3159},{"word":"When","context":[["val(s). When applied to a transient vector, sets the val at index.",58],["val(s). When applied to a vector, returns a new vector that",72],["\"When lazy sequences are produced via functions that have side",144],[";; rather than having its own copy. When the root binding",374],["^{:doc \"When compiled for a command-line target, whatever",54],[":doc \"When set to logical true, objects will be printed in a way that preserves",50],[";; When running figwheel from nREPL, figwheel will read this configuration",49],["returns a fn that takes a variable number of additional args. When",71],["\"assoc[iate]. When applied to a map, returns a new map of the",72],["\"When applied to a transient map, adds mapping of key(s) to",56]],"useCount":1632},{"word":"World","context":[["(println x \"Hello, World!\"))",888],["(println \"Hello, World!\"))",693],["(is (= (:body response) \"Hello World\"))))",172],["(is (= \"Hello, World!\" (slurp (.getBody response))))))",31],["because the World is the root Group from which all Game Objects descend.",36],["(is (= (:body response) \"Hello, World!\")))))",49],["(println \"Hello, World!\")",51],["(GET \"/\" [] \"Hello World\")",57],["* world (Phaser.World) - Targeted instance for method",61],["(is (= (:body response) \"Hello, World!\")))",121]],"useCount":2479},{"word":"_","context":[["[_]",431],["(did-mount [_]",461],["(fn [_]",509],["(next [_]",515],["(fn [db _]",575],["(will-mount [_]",608],["(init-state [_]",755],["(render [_]",2242],["(fn [_]",403],["[_]",376]],"useCount":31126},{"word":"__hash","context":[["(-hash [coll] (caching-hash coll hash-unordered-coll __hash))",306],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash))",665],["(deftype PersistentTreeMapSeq [meta stack ^boolean ascending? cnt ^:mutable __hash]",71],["(-hash [coll] (caching-hash coll hash-coll __hash))",254],["(-hash [coll] (caching-hash coll hash-imap __hash))",82],["(-with-meta [coll meta] (PersistentTreeSet. meta tree-map __hash))",71],["(deftype PersistentQueue [meta count front rear ^:mutable __hash]",71],["(deftype RedNode [key val left right ^:mutable __hash]",71],["(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]",71],["(-with-meta [rng meta] (Range. meta start end step __hash))",71]],"useCount":5240},{"word":"_attribute","context":[[":db.install/_attribute",16],[":db.install/_attribute :db.part/db}]]}})",19],[":db.install/_attribute :db.part/db}])))",15],[":db.install/_attribute :db.part/db}]",20],[":db.install/_attribute :db.part/db}]))",22],[":db.install/_attribute :db.part/db}])",87],[":db.install/_attribute :db.part/db",90],[":db.alter/_attribute :db.part/db}",385],[":db.install/_attribute :db.part/db}",2837],[":db.install/_attribute :db.part/db }",15]],"useCount":3551},{"word":"a","context":[["\"I don't do a whole lot ... yet.\"",1040],["{:tag :a,",419],["[a b]",743],["a(g73",924],["\"I don't do a whole lot.\"",984],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["a(g189",1307],["a(g202",1314],["(deftest a-test",5652]],"useCount":99109},{"word":"ability","context":[["(continue-ability",235],["(resolve-ability",230],["(resolve-ability state side",139],[":abilities [ability]})",108],["(continue-ability state side",74],[":effect (effect (resolve-ability",64],[":effect (effect (continue-ability",44],[":events {:corp-turn-begins ability}",43],["\"Protocol for adding the ability to a type to be transformed into a sequence.\"",32],["\"Protocol for adding the ability to count a collection in constant time.\"",32]],"useCount":1494},{"word":"about","context":[["(GET \"/about\" [] (about-page)))",43],["(GET \"/about\" [] (about-page)))",43],[";;TODO: What should be done about the key-file?",44],["; Check quil wiki for more info about middlewares and particularly",45],["(layout/render \"about.html\"))",66],["(GET \"/about\" [] loading-page)",72],["(defn about-page []",77],["(session/put! :current-page #'about-page))",124],["(secretary/defroute \"/about\" []",172],["(defn about-page []",174]],"useCount":1789},{"word":"acc","context":[["acc []]",123],["acc",626],["@acc*))",47],["(assoc acc",61],["(+ acc (-count s))",71],["(recur (next s) (inc acc)))))",72],["(loop [s (seq coll) acc 0]",72],["acc))))",85],["acc)))",120],["acc))",152]],"useCount":2944},{"word":"action","context":[[":action (fn []",129],["{:action :credit",54],["[action]",58],["{:action",59],["{:action :create",63],["(action item)))",67],["mind that regardless of the result or action of the watch fns the",71],["[action id]",72],["(case action",90],["[action request]",114]],"useCount":3280},{"word":"actions","context":[["(comment  Write code here that turns the phrase above into concrete actions  )",145],["[jiksnu.actions.activity-actions :as actions.activity]",49],["[jiksnu.actions.domain-actions :as actions.domain]",57],["[jiksnu.actions.domain-actions :as actions.domain]",57],["[jiksnu.actions.domain-actions :as actions.domain]",57],["[jiksnu.templates.actions :as templates.actions]",60],["[jiksnu.templates.actions :as templates.actions]",60],["[jiksnu.actions.user-actions :as actions.user]",65],["[jiksnu.actions.user-actions :as actions.user]",65],["[jiksnu.actions.user-actions :as actions.user]",65]],"useCount":2300},{"word":"active","context":[["(let [ed (pool/last-active)",47],["(merge (active)",49],["; We have an active deferrable",54],[":active true}]",66],["(keyword (s/replace template #\".html\" \"-selected\")) \"active\"",42],["(throw (Exception. (str \"Production environment code is being loaded while the dev environment is active. \"",123],[":active true",168],["(when-let [ed (pool/last-active)]",248],["(when-let [ed (last-active)]",253],[":active          true",115]],"useCount":2681},{"word":"actual","context":[["(is (= actual expected))))",169],["(is (= actual expected)))))",145],["(expect-eval-actual-first",122],["(is (= actual expected)",87],["(is (= expected actual))))",68],["[expected actual]",60],["(is (= actual expected))))))",59],["(is (= actual expected)))))))",55],["actual  (count results)]",54],["actual (distinct-resource-events version query)]",48]],"useCount":2001},{"word":"adapter","context":[["[ring/ring-jetty-adapter \"1.4.0\"]",153],["[ring.adapter.jetty :as jetty]",375],["[ring.adapter.jetty :refer [run-jetty]])",369],["[ring.adapter.jetty :as ring]",70],["[ring/ring-jetty-adapter \"1.2.2\"]",70],["[ring/ring-jetty-adapter \"1.2.1\"]",72],["[ring/ring-jetty-adapter \"1.3.2\"]",116],["(:require [ring.adapter.jetty :as jetty]",144],["[ring.adapter.jetty :refer [run-jetty]]))",146],["[ring.adapter.jetty :refer [run-jetty]]",214]],"useCount":2623},{"word":"add","context":[["(add-right [node ins]",142],["(defn add",137],["(-add-watch [this key f]",136],["(.add a input)",100],["(is (thrown? Exception (db/add-jar \"test-user\"",96],["(scf-store/add-certname! \"foo1\")",88],["(scf-store/add-certname! certname)",82],["(parser/add-tag! :csrf-field (fn [_ _] (anti-forgery-field)))",77],["(add-left [node ins]",142],["(add-certname! certname)",350]],"useCount":10032},{"word":"added","context":[["{:added \"1.0\"}",978],["(set! (.-val added-leaf?) true)",430],[":added \"1.0\"}",416],["{:added \"1.1\"}",289],["{:added \"1.2\"}",252],[":added \"1.0\",",220],["(inode-assoc! [inode edit shift hash key val added-leaf?]",213],["(inode-assoc [inode shift hash key val added-leaf?]",213],["{:added \"1.0\"",653],[":added \"1.0\"}",728]],"useCount":8690},{"word":"advanced","context":[[":optimizations :advanced",1014],[":choices {:req can-be-advanced?}",26],[":optimizations :advanced}}]})",36],[":compiler {:optimizations :advanced",38],[":optimizations :advanced}}",41],[":optimizations  :advanced",46],[":optimizations :advanced}}]}",48],["{:optimizations :advanced",647],[":optimizations   :advanced",22],[":optimizations :advanced}}}})",19]],"useCount":2077},{"word":"afn","context":[["(deftype MetaFn [afn meta]",53],["(afn a))",53],["(afn a b c d e f g h i j k l m n o p q r))",53],["(afn a b c d e f g h i j k l m n o p q))",53],["(apply afn a b c d e f g h i j k l m n o p q r s t rest)))",53],["(afn a b c d e f g h i j))",53],["(afn a b c d e f g h i j k l))",53],["(afn a b c d e f g h i))",53],["(afn a b c d e f g h i j k))",53],["(afn a b c d e f))",53]],"useCount":1630},{"word":"after","context":[["(throw (js/Error. \"assoc! after persistent!\"))))",218],["(throw (js/Error. \"count after persistent!\"))))",216],[";; must be called after routes have been defined",193],["(refresh :after 'user/go))",149],["(throw (js/Error. \"conj! after persistent!\"))))",143],["same time) and children after the attributes.\"",116],["(throw (js/Error. \"conj! after persistent\"))))",73],["\"Returns a seq of the items after the first. Calls seq on its",73],["(throw (js/Error. \"dissoc! after persistent!\")))))",72],["(throw (js/Error. \"dissoc! after persistent!\"))))",73]],"useCount":3784},{"word":"agent","context":[["\"Gets the validator-fn for a var/ref/agent/atom.\"",71],["([& streams] (s/map #(apply math/agent-fn %) (apply s/zip streams)))))",25],["[agent]",33],["(autosign-csr? executable \"test-agent\" (csr-fn) ruby-load-path)",35],["{:uri            \"/v1/certificate_status/test-agent\"",50],["(is (= #{localhost-status test-agent-status revoked-agent-status}",52],["(is (= #{localhost-status test-agent-status revoked-agent-status}",52],["{:uri \"/v1/certificate_status/test-agent\"",55],["signed-cert-path (ca/path-to-cert (:signeddir settings) \"test-agent\")]",60],["\"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:",71]],"useCount":1735},{"word":"aget","context":[["(aget arr (inc j))))",142],["node (aget arr idx)]",426],["(let [key-or-nil  (aget arr (* 2 idx))",142],["(if-not (nil? (aget arr j))",142],["(if (or (not (nil? del)) (not (nil? (aget found 0))))",142],["(do (aset to j (aget from i))",142],["(let [k (aget ks i)]",145],["(let [nval (f val (aget arr n))]",216],["key-or-nil  (aget arr (* 2 idx))",284],["val-or-node (aget arr (inc (* 2 idx)))]",426]],"useCount":12077},{"word":"ajax","context":[["(let [api-result (<! (ajax/managed-ajax",48],["(ajax/POST",50],["(def ring-ajax-post                ajax-post-fn)",46],["[ajax.core :refer [GET POST]]",114],["(ajax/ajax :get",83],["(let [api-result (<! (ajax/managed-ajax",48],["(ajax/ajax :get",83],["(endpoints/call-ajax-orch",63],["(def ring-ajax-get-or-ws-handshake ajax-get-or-ws-handshake-fn)",61],["(def ring-ajax-get-or-ws-handshake ajax-get-or-ws-handshake-fn)",61]],"useCount":2049},{"word":"alength","context":[["(when-not (zero? (alength coll))",139],["(let [end (+ i (alength node))]",110],["(when (< i (alength arr))",121],["(let [len  (alength arr)",136],["(alength coll)",137],["(let [len (alength arr)]",426],["(let [cnt (alength arr)]",216],["(if (< (inc off) (alength node))",144],["(let [len     (alength arr)",140],["(let [len (alength nodes)]",140]],"useCount":5509},{"word":"all","context":[["(:require [compojure.core :refer :all]",610],["[midje.sweet :refer :all]",460],["[compojure.core :refer :all]",401],["[clojure.test :refer :all]))",821],["(:require [clojure.test :refer :all]",14383],[":profiles {:uberjar {:aot :all}})",2540],["[clojure.test :refer :all]",1908],["(:require [midje.sweet :refer :all]",1083],["(:require [clojure.test :refer :all]))",379],[":aot :all",1068]],"useCount":45352},{"word":"alpha","context":[["[org.clojure/core.async \"0.1.267.0-0d7780-alpha\"]]",32],[":alpha \"alpha\"",32],["[org.clojure/core.async \"0.1.338.0-5c5012-alpha\"]",76],["[org.clojure/core.async \"0.1.242.0-44b1e3-alpha\"]",45],["[org.clojure/core.async \"0.1.346.0-17112a-alpha\"]])",57],["[org.clojure/core.async \"0.1.278.0-76b25b-alpha\"]",58],["[org.clojure/core.async \"0.1.346.0-17112a-alpha\"]",840],["[org.clojure/core.async \"0.1.267.0-0d7780-alpha\"]",171],["[org.clojure/core.async \"0.1.346.0-17112a-alpha\"]]",135],["[org.clojure/core.async \"0.1.303.0-886421-alpha\"]",119]],"useCount":1990},{"word":"alt","context":[["(alt!",59],["(alt!",42],[":attrs {:alt \"\", :border \"0\", :src \"/mirror/smilies/frown.gif\"},",85],[":alt \"[image loading]\",",102],["(async/alt!!",77],[":attrs {:alt \"\", :border \"0\", :src \"/mirror/smilies/puh2.gif\"},",61],["(:require-macros [cljs.core.async.macros :refer [go alt!]])",57],[":attrs {:alt \"\", :border \"0\", :src \"/mirror/smilies/smile.gif\"},",53],["{:type    :invalid-alt-name",49],[":attrs {:alt \"\", :border \"0\", :src \"/mirror/smilies/wink.gif\"},",44]],"useCount":1757},{"word":"alter","context":[["(alter i inc)",54],["(alter-var-root #'*read-eval* (constantly false))",45],["(fn [e] (dosync (alter output conj e))))",70],["(defn alter-meta!",71],["(alter buffer conj event)",75],["(alter-var-root #'system component/start))",111],["(alter-var-root",124],["(alter-var-root #'system",330],["(alter-meta!",39],[":db.alter/_attribute :db.part/db}",385]],"useCount":1940},{"word":"an","context":[[";; Start an nREPL server into the running figwheel process",134],["returns an infinite (or length n if supplied) lazy sequence of calls",72],["bounds, nth throws an exception unless not-found is supplied.  nth",72],["structures define -equiv (and thus =) as a value, not an identity,",72],["; The keys field is an array of all keys of this map, in no particular",73],[";; an example problem for clojush, a Push/PushGP system written in Clojure",75],[")) ;; To do validation, could have this function return an altered best individual",113],["an app server such as Tomcat",117],["\"You likely have compiled class files lying around from an uberjar build. \"",123],["\"Returns an object of the same type and value as obj, with",143]],"useCount":9455},{"word":"and","context":[["(if (zero? (bit-and bitmap bit))",426],[";; Redistribution and use in source and binary forms, with or without",214],["(if (and",223],["(if (and s (< i size))",282],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],["(and",391],["[\"and\"",638],["(figwheel/watch-and-reload",672],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["(and",1824]],"useCount":44531},{"word":"any","context":[["and any supplied args and return the new value, and returns a new",117],["effects, any effects other than those needed to produce the first",144],["be used to force any effects. Walks through the successive nexts of",144],["shuts down, put any clean up code here\"",121],["put any initialization code here\"",118],["of second items in each coll, until any one of the colls is",97],["; We make no guarantees that this code is fit for any purpose.",73],["Whatever function *print-fn* is bound to will be passed any",83],[";;We make no guarantees that this code is fit for any purpose.",90],["\"Takes any nested combination of sequential things (lists, vectors,",73]],"useCount":5688},{"word":"aot","context":[[":aot :all)",98],["{:uberjar {:aot :all}",69],[":uberjar {:aot :all}}",73],[":aot-exclude-ns [\"clojure.parallel\" \"clojure.core.reducers\"",75],[":uberjar {:aot :all}",86],[":uberjar {:aot :all}})",96],[":profiles {:uberjar {:aot :all}}",327],[":profiles {:uberjar {:aot :all}",364],[":aot :all",1068],[":profiles {:uberjar {:aot :all}})",2540]],"useCount":5375},{"word":"api","context":[["(:require [datomic.api :as d]",204],["[datomic.api :as d]",451],["[onyx.api]))",318],["{:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",259],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["(declare api-table)",255],["(def gen-call (partial gen-call-helper api-table))",255],["(apply gen-wrap-helper api-table kind item-id config args))",255],["(def api-table",255],["[ring.middleware.defaults :refer [wrap-defaults api-defaults]]",210]],"useCount":10760},{"word":"app","context":[["(def app",1560],[";; #'app expands to (var app) so that when we reload our code,",373],[";; #'app expands to (var app) so that when we reload our code,",373],["(-> #'app",383],[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],["(deftest test-app",417],["app-state",429],["app",473],[":compiler {:output-to     \"resources/public/js/app.js\"",474],["(defroutes app-routes",937]],"useCount":24343},{"word":"append","context":[["(.append sb \\newline)",71],["(chunk-append b (f (-nth c i))))",71],["(chunk-append b (f (+ idx i) (-nth c i))))",71],["(recur (. sb  (append (str (first more)))) (next more))",71],["(let [new-strobj (obj-clone strobj keys) ; append",71],["(tree-map-append left (.-left right))",71],["(tree-map-append (.-left tree) (.-right tree)))",71],["(chunk-append b x))))",142],["[net.cgrand.enlive-html :refer [set-attr prepend append html]]",243],["(let [app (tree-map-append (.-right left) (.-left right))]",142]],"useCount":2722},{"word":"application","context":[["\"application/json\"",51],["(def c-t \"application/json\")",52],[":available-media-types [\"application/json\"]",368],[":headers {\"Content-Type\" \"application/json\"}",293],["(content-type \"application/json\")",142],[":content-type \"application/json\"",121],["\"destroy will be called when your application",120],[":headers {\"Content-Type\" \"application/edn\"}",82],["not be included in a production build of the application.\"",76],[";; your application",75]],"useCount":3427},{"word":"apply","context":[["(apply str",589],["(apply concat",418],["(apply concat)",332],["(apply",315],["(apply-to f bc arglist)",284],["(apply gen-wrap-helper api-table kind item-id config args))",255],["(:refer-clojure :only [defmacro defn apply declare meta let partial])",254],["(apply str)))",240],["(.apply f f (to-array arglist)))))",214],["(apply merge",132]],"useCount":13960},{"word":"are","context":[["\"If no denominators are supplied, returns 1/numerator,",140],[":post [(are-queries-different? req %)]}",97],[";;courses, books, articles, and the like. Contact us if you are in doubt.",90],[";; are met:",115],["exhausted.  Any remaining items in other colls are ignored. Function",142],["(are [soln] soln",155],[";;; are met:",185],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["(are [x y] (= x y)",873],["\"When lazy sequences are produced via functions that have side",144]],"useCount":9156},{"word":"arg","context":[["branch? must be a fn of one arg that returns true if passed a node",71],["[arg]",189],["(fn [arg]",108],["one arg, returns the concatenation of the str values of the args.\"",72],["\"With no args, returns the empty string. With one arg x, returns",72],["arg that returns a sequence of the children. Will only be called on",71],["[arg]",68],["arg)",52],["arg))",47],["(doseq [arg args]",42]],"useCount":1841},{"word":"arglist","context":[["(nil? (next arglist)) (seq (first arglist))",73],["(let [arglist (list* x y z args)",72],["(let [arglist (list* x args)",72],["(nil? arglist) nil",73],["[arglist]",73],["(nil? (next arglist)) (seq (first arglist))",73],["(.apply f f (to-array arglist)))))",214],["(let [bc (bounded-count arglist (inc fixed-arity))]",260],["(apply-to f bc arglist)",284],["(.cljs$lang$applyTo f arglist)))",284]],"useCount":1892},{"word":"args","context":[["(fn [& args]",382],["[project & args]",193],["(apply gen-wrap-helper api-table kind item-id config args))",255],["[& args]",255],["(defmacro gen-wrap [kind item-id config & args]",255],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["[args]",397],["(fn [& args]",725],["(defn -main [& args]",2785],["[& args]",4671]],"useCount":28841},{"word":"argument","context":[["argument. If coll is nil, returns nil.\"",72],["(throw (js/Error. \"index argument to nth must be a number\"))",56],["argument that triggers a logical true result against the original predicates.\"",71],["a nil first argument to f with the supplied value x. Higher arity",71],["argument that triggers a logical false result against the original predicates.\"",71],["side-effect-free fn of one argument, which will be passed the intended",71],["argument, which will be passed the intended new state on any state",72],["argument.\"",73],["argument.  If there are no more items, returns nil\"",73],["Also optional as argument is another map containing further options:",81]],"useCount":1785},{"word":"arguments","context":[["(prop/for-all [v (issue/arguments-generator)]",189],["(defn arguments-generator []",172],["(let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]",141],["f should accept number-of-colls arguments.\"",93],["arguments. Returns the result of applying f to init, the first key",72],["\"Tests if 2 arguments are the same object\"",72],["items, f must accept no arguments as well, and reduce returns the",72],["\"f should be a function of 2 arguments. If val is not supplied,",72],["\"Takes a fn f and returns a fn that takes the same arguments as f,",72],["result of calling f with no arguments.  If coll has only 1 item, it",72]],"useCount":3443},{"word":"arr","context":[["(aset new-arr (inc len) val)",144],["(array-copy arr 0 new-arr 0 len)",144],["(doto (aclone arr)",146],["(let [cnt (alength arr)]",216],["(let [nval (f val (aget arr n))]",216],["key-or-nil  (aget arr (* 2 idx))",284],["node (aget arr idx)]",426],["(let [len (alength arr)]",426],["val-or-node (aget arr (inc (* 2 idx)))]",426],["(let [idx (hash-collision-node-find-index arr cnt key)]",434]],"useCount":23464},{"word":"array","context":[["new-arr (make-array (+ len 2))]",144],["(array? coll)",417],["(let [a (make-array size)]",282],["(into-array size-or-seq)))",272],["(let [idx (array-map-index-of coll k)]",215],["(.apply f f (to-array arglist)))))",214],["(not (nil? (scan-array 1 k keys))))",213],["(let [idx (array-map-index-of tcoll key)]",145],["(array-copy arr 0 new-arr 0 len)",144],["(let [a (to-array coll)]",143]],"useCount":18802},{"word":"as","context":[["[clojure.tools.logging :as log]",2424],["[clojure.string :as str]",2240],["[clojure.java.io :as io]",3814],["[cheshire.core :as json]",1049],["[clojure.data.json :as json]",1158],["[com.stuartsierra.component :as component]",1190],["[schema.core :as s]",1295],["[compojure.route :as route]",1585],["[clojure.string :as string]",1630],["(:require [clojure.java.io :as io]",2072]],"useCount":158444},{"word":"ascending","context":[["ascending?)]",71],["(PersistentTreeMapSeq. nil stack ascending? -1 nil))))))",71],["(PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil)",71],["ascending? (if (neg? c)",71],["(PersistentTreeMapSeq. nil (tree-map-seq-push tree nil ascending?) ascending? cnt nil))",71],["(PersistentTreeMapSeq. nil (tree-map-seq-push tree nil ascending?) ascending? cnt nil))",71],["(defn- create-tree-map-seq [tree ascending? cnt]",71],["(-sorted-seq [coll ascending?]",143],["next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))",71],["(-sorted-seq-from [coll k ascending?]",143]],"useCount":1756},{"word":"aset","context":[["(aset new-arr (inc (* 2 idx)) val)",142],["(do (aset found 0 tree)",142],["(aset a i (first s))",282],["(aset a i init-val-or-seq))",282],["(aset new-arr len key)",144],["(aset new-arr (inc len) val)",144],["(do (aset nodes i",142],["(aset new-arr (* 2 idx) key)",142],["(pv-aset ret subidx node-to-insert)",142],["(do (aset to j (aget from i))",142]],"useCount":6697},{"word":"assert","context":[[";; (assert (or (class? tag) (instance? clojure.lang.Named tag)))",71],["(assert (namespace parent))",71],[";; (assert (or (class? tag) (and (instance? cljs.core.Named tag) (namespace tag))))",71],[";; (assert (instance? clojure.lang.INamed tag))",71],[";; (assert (instance? clojure.lang.INamed parent))",71],["[battle-asserts.test-helper :refer [assert-equal]]))",72],["(assert-args",72],[":release-tasks [[\"vcs\" \"assert-committed\"]",80],["(assert",93],["(assert-success! response)",105]],"useCount":3726},{"word":"asset","context":[[":asset-path \"out\"",24],[":asset-path \"js/devcards_out\"",24],["[lein-asset-minifier \"0.2.7\"",36],[":asset-path \"/js/out\"",39],[":asset-path           \"js/compiled/out\"",47],[":asset-path \"js\"",59],[":asset-path \"js/out\"",157],["[lein-asset-minifier \"0.2.2\"]]",214],[":asset-path   \"js/out\"",280],[":asset-path \"js/compiled/out\"",272]],"useCount":1547},{"word":"assets","context":[[":minify-assets",326],["{:assets",323],["; Makes static assets in $PROJECT_DIR/resources/public/ available.",371],["[optimus.assets :as assets]",22],["[optimus.assets :as assets]",22],[":assets-paths [\"../desktop/resources\"]",35],[":figwheel {;; :http-server-root \"public\"       ;; serve static assets from resources/public/",47],[";; assets and API endpoints can all be accessed on the same host",50],[":uberjar {:hooks [minify-assets.plugin/hooks]",96],[":uberjar {:hooks [leiningen.cljsbuild minify-assets.plugin/hooks]",210]],"useCount":1607},{"word":"assoc","context":[["(assoc",561],["(-assoc [coll k v]",366],["(-assoc coll (-nth entry 0) (-nth entry 1))",289],["(assoc this",231],["(assoc component",228],["(throw (js/Error. \"assoc! after persistent!\"))))",218],["(inode-assoc [inode shift hash key val added-leaf?]",213],["(inode-assoc! [inode edit shift hash key val added-leaf?]",213],["(assoc state",201],["assoc",164]],"useCount":20478},{"word":"ast","context":[["(eval-ast ast env)",54],["(is (= [:ast",44],["(defn eval-ast [ast env]",43],["(defn EVAL [ast env]",48],["ast)",50],["(eval-ast ast env)",54],["(if (not (seq? ast))",58],["ast",60],["ast))",83],["[ast]",157]],"useCount":2617},{"word":"async","context":[["This function returns a core.async channel which eventually receives a result value and closes.",1145],["[org.clojure/core.async \"0.1.346.0-17112a-alpha\"]",840],["(:require-macros [cljs.core.async.macros :refer [go]])",713],["[clojure.core.async :as async]",472],[":onyx/medium :core.async",852],["[clojure.core.async :as async]",472],[":onyx/doc \"Reads segments from a core.async channel\"}",389],["[org.clojure/core.async \"0.2.374\"]",324],["(async/go",320],[":onyx/plugin :onyx.plugin.core-async/output",311]],"useCount":19131},{"word":"at","context":[[";   which can be found in the file epl-v10.html at the root of this distribution.",300],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[":fplog/purchased-at",195],[";  which accompanies this distribution, and is available at",131],["You can pass attributes as a map or keyword value pairs (but not both at the",116],["[overtone/at-at \"1.2.0\"]",91],["[overtone/at-at \"1.2.0\"]",91],[";; which can be found in the file COPYING at the root of this distribution.",90],["(println (str \"You can view the site at http://localhost:\" port))))",374],["\"Returns the value at the index. get returns nil if index out of",72]],"useCount":6760},{"word":"atom","context":[["(defn atom",89],["(:require [reagent.core :as r :refer [atom]]",113],["(let [behavior (atom '())",116],["(atom",150],["(atom {}))",157],["(atom",170],["(atom nil))",233],["[reagent.core :as reagent :refer [atom]]",247],["(:require [reagent.core :as reagent :refer [atom]]",532],["(defonce server (atom nil))",558]],"useCount":10352},{"word":"attr","context":[["[net.cgrand.enlive-html :refer [set-attr prepend append html]]",243],["attr)",70],["{:text \"Acked\" :attr {:class \"tip above\"",27],["[(and (html/has :meta) (html/attr= :name \"description\"))] (html/set-attr \"content\" (:description doc))",47],["[(and (html/has :meta) (html/attr= :name \"description\"))] (html/set-attr \"content\" (:description doc))",47],["(html/set-attr :href",30],["attr)",29],["[attr]",29],["{:text \"Emitted\" :attr {:class \"tip above\"",27],["(set-attr :class \"is-dev\")",244]],"useCount":1618},{"word":"attrs","context":[["({:tag :br, :attrs nil, :content nil}",5208],["({:tag :span, :attrs nil, :content (\"+ Show\")}",128],[":attrs",976],[":attrs nil,",936],["{:tag :br, :attrs nil, :content nil})}",789],[":attrs {:style \"color: blue\"},",329],[":attrs {:style \"text-align:center\"},",135],[":attrs {:class \"forummsg\"},",127],["{:tag :span, :attrs nil, :content (\" +\")})}",128],["{:tag :br, :attrs nil, :content nil}",23688]],"useCount":35431},{"word":"auth","context":[["[buddy.auth :refer [authenticated?]]",54],["(http-api/find-user-by-auth-provider-user-id anything) => {:status ::http-api/success",50],[":auth-rules access/authenticated",59],["fp-auth-scheme",59],["fphdr-auth-token",62],["auth-scheme",64],["(rtucore/header \"Authorization\" (rtucore/authorization-req-hdr-val fp-auth-scheme",85],["plaintext-auth-token",92],["auth-token)))",100],["fp-auth-scheme-param-name",144]],"useCount":2810},{"word":"auto","context":[["[figwheel-sidecar.auto-builder :as fig-auto]",115],["[figwheel-sidecar.auto-builder :as fig-auto]",115],["(u/set-auto-name",110],["(run-auto-reload))",120],["(defn run-auto-reload [& [port]]",121],["(auto-reload *ns*)",131],["[net.cgrand.reload :refer [auto-reload]]",136],[":auto-reload? true",415],["[clojurescript-build.auto :as auto]",114],["[clojurescript-build.auto :as auto]",114]],"useCount":2675},{"word":"autosign","context":[["(when (autosign-csr? autosign subject csr-stream ruby-load-path)",13],["(assert-autosign \"foo\")",22],[":autosign",23],["(autosign-csr? executable \"test-agent\" (csr-fn) ruby-load-path)",35],["(let [settings      (assoc settings :autosign value)",24],["(autosign-csr? executable \"test-agent\" (csr-fn) [])",24],["(test-autosign-file \"autosign-whitelist.conf\")]]",24],["(test-autosign-file \"autosign-whitelist.conf\")]]",24],["\"Execute the autosign script and return a map containing the standard-out,",13],["(when (autosign-csr? autosign subject csr-stream ruby-load-path)",13]],"useCount":1437},{"word":"available","context":[[";; available formats:",45],["y. Uses IComparable if available and google.array.defaultCompare for objects",71],[":available-media-types [\"text/plain\"]",53],[";; available RAM.",55],["(throw (Exception. \"Figwheel is not available in prod mode\")))",122],["(throw (Exception. \"Browser connected REPL is not available in prod mode\")))",122],[";  which accompanies this distribution, and is available at",131],[":available-media-types [\"text/html\"]",170],[":available-media-types [\"application/json\"]",368],["; Makes static assets in $PROJECT_DIR/resources/public/ available.",371]],"useCount":2568},{"word":"b","context":[["[:b \"lein figwheel\"]",157],["[b]",149],["[\"a\"] [\"b\"]",143],["[a b]",743],["{:tag :b,",430],["b (chunk-buffer size)]",355],["({:tag :b,",237],["b",212],["b (r :body)]",195],["([a b]",177]],"useCount":27797},{"word":"background","context":[[";;   background(255);",45],["(q/background 255)",56],["(background 0)",60],["(background",45],["(q/background 240)",72],["(q/background 0)",123],["\"border:1px solid #808080;padding:5px;background-color:#EBEFF2;display:none\",",174],["(background 255)",221],["(against-background",472],["(q/background 255)",80]],"useCount":1779},{"word":"bad","context":[["(is (= status http/status-bad-request))))))",48],["(is (thrown+? [:type    :puppetlabs.services.request-handler.request-handler-core/bad-request",28],["(is (= status pl-http/status-bad-request))",28],["(.log js/console (str \"something bad happened: \" status \" \" status-text)))",28],["(throw-bad-request!",29],["{:effect take-bad-pub",34],["(is (= (:status response) pl-http/status-bad-request))",37],[":title \"Something very bad has happened!\"",48],["(is (= (:status response) http/status-bad-request))",66],["(is (= status http/status-bad-request))",77]],"useCount":1585},{"word":"balance","context":[["(balance-left-del (.-key tree) (.-val tree) del (.-right tree))",71],["(balance-left-del (.-key left) (.-val left)",71],["(balance-left key val (.redden left) del)",71],["(balance-left (.-key left) (.-val left)",71],["(.balance-left ins node))",71],["(.balance-right ins node))",71],["(balance-right key val del (.redden right))",71],["(balance-right [node parent]",142],["(defn- balance-right-del [key val left del]",71],["(balance-left [node parent]",142]],"useCount":1498},{"word":"bar","context":[["[:span.icon-bar]",44],["[:.clj-status-bar] (html/substitute (pf/status-flash-bar context))",39],[":file       \"/tmp/bar\"",58],["(tagged-all [\\\"foo\\\" \\\"bar\\\"] prn)\"",56],["[:span.icon-bar]",52],["(project [(service \"foo\") (service \"bar\")])",48],[":file       \"/tmp/bar/baz\"",48],["{:tags [\"foo\" \"bar\"]}]]",46],["[{:tags [\"foo\"]} {:tags [\"foo\" \"bar\"]}]))))",46],["{:tags [\"foo\" \"bar\"]}",42]],"useCount":4211},{"word":"base","context":[["(:use conexp.base",120],["base-url",282],["(prepend (html [:script {:type \"text/javascript\" :src \"/js/out/goog/base.js\"}]))",235],[":onyx/doc \"core.async plugin base lifecycle\"}",131],[":onyx/doc \"core.async plugin base lifecycle\"}])",86],["(defn wrap-base [handler]",75],["[hiccup.middleware :refer [wrap-base-url]]",73],["base",64],["(wrap-base-url)))",64],["(defroutes base-routes",60]],"useCount":4528},{"word":"basic","context":[["(let [basic (:basic reports)",75],[":set :basic",170],["basic)",119],["(kitchensink/select-values basic-events-map matches)",83],["(let [basic (:basic reports)",75],["[langohr.basic :as lb]",71],["(store-example-report! (:basic reports) (now))",70],["[ring-basic-authentication \"1.0.5\"]",64],["_ (store-example-report! basic (now))",50],[":payload basic-wire-catalog}",48]],"useCount":2765},{"word":"batch","context":[[":onyx/batch-timeout batch-timeout",455],["([batch-size batch-timeout]",106],["([batch-size batch-timeout]",106],[":onyx/batch-size 20}",119],[":onyx/batch-size 20",195],[":onyx/batch-size batch-size}",248],[":onyx/batch-size batch-size}",248],[":onyx/batch-timeout batch-timeout",455],[":onyx/batch-size batch-size",806],[":onyx/batch-size batch-size",806]],"useCount":4873},{"word":"be","context":[["this means false return values will be included.  f must be free of",142],["be used to force any effects. Walks through the successive nexts of",144],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],[";; To be able to open files in your editor from the heads up display",183],[";; must be called after routes have been defined",193],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["this means false return values will be included.  f must be free of",142],["\"sc must be a sorted collection, test(s) one of <, <=, > or",142]],"useCount":14593},{"word":"before","context":[["[(before :contents (do (helpers/db-connection)",42],["[before after & props]",48],["(:not-before validity)",40],["{:lifecycle/before-task-start inject-out-ch})",117],["{:lifecycle/before-task-start inject-in-ch})",105],["{:lifecycle/before-task-start inject-reader-ch})",96],["{:lifecycle/before-task-start inject-writer-ch})",89],["; update-state is called on each iteration before draw-state.",35],["(testing \"should reactivate the node if it was deactivated before the message\"",34],["[(before :contents (th/setup-testing))",38]],"useCount":2262},{"word":"best","context":[["(println (format \"Test mean error for best: %.5f\" (double (/ best-total-test-error (count best-test-errors)))))",113],["best-total-test-error (apply +' best-test-errors)]",113],["[best population generation error-function report-simplifications]",129],["(let [best-program (not-lazy (:program best))",117],["(let [best-program (not-lazy (:program best))",117],["best-test-errors (error-function best-program :test)",113],[")) ;; To do validation, could have this function return an altered best individual",113],["(println (format \"Test mean error for best: %.5f\" (double (/ best-total-test-error (count best-test-errors)))))",113],["(println \"Test total error for best:\" best-total-test-error)",113],["(println (format \"Test mean error for best: %.5f\" (double (/ best-total-test-error (count best-test-errors)))))",113]],"useCount":2502},{"word":"binding","context":[["(vector? bindings) \"a vector for its binding\"",83],["(binding [*logger-factory* (atom-logger log-output)]",62],["(binding [*print-level* (when-not (nil? *print-level*) (dec *print-level*))]",60],["(binding [*out* w]",56],["(binding [*app-context*",51],["(binding [*out* out]",50],["(even? (count bindings)) \"an even number of forms in binding vector\")",48],["(binding [*read-eval* false]",94],["(binding [*out* *err*]",373],[";; rather than having its own copy. When the root binding",374]],"useCount":3043},{"word":"bindings","context":[["[bindings & body]",271],[":requires-bindings true,",203],["^{:requires-bindings true",192],["(vector? bindings) \"a vector for its binding\"",83],["^{:requires-bindings false",62],["(even? (count bindings)) \"an even number of forms in binding vector\")",48],[":requires-bindings false,",47],["^{:requires-bindings false",39],["(fn [bindings]",38],["^{:requires-bindings true",366]],"useCount":2231},{"word":"bit","context":[["(if (zero? (bit-and bitmap bit))",426],["(== bitmap bit) nil",142],["(set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))",142],["(set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))",142],["(let [n (bit-count bitmap)]",142],["(if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))",142],["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(let [bit (bitpos hash shift)]",291],["(if (zero? (bit-and bitmap bit))",426],["idx (bitmap-indexed-node-index bitmap bit)]",142]],"useCount":11813},{"word":"bitmap","context":[["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))",142],["(let [n (bit-count bitmap)]",142],["idx (bitmap-indexed-node-index bitmap bit)]",142],["idx (bitmap-indexed-node-index bitmap bit)]",142],["(set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))",142],["(if (zero? (bit-and bitmap bit))",426],["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))",142],["(== bitmap bit) nil",142]],"useCount":3575},{"word":"board","context":[["(print-board board)",61],["[board]",401],["board",138],["[board pos]",81],["(do (engine/put! :board-size 3)",72],["board))",72],[":board [:r :n :b :q :k :b :n :r",52],["[board]",57],["[board max-pos pos]",71],["(print-board board)",61]],"useCount":2645},{"word":"body","context":[["~@body",1330],["~@body))))",233],["[bindings & body]",271],["[body]",279],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],["~@body)))",550],["~@body))",889],[":body",914],["[& body]",1008],["[:body",1415]],"useCount":25767},{"word":"boolean","context":[["(defn ^boolean =",72],[":db/valueType :db.type/boolean",114],["boolean-valued comparison funcion, or a -/0/+ valued comparator.",102],["(not ^boolean (js/isNaN n))",76],["(deftype TransientHashMap [^:mutable ^boolean edit",73],["(if ^boolean (.-val added-leaf?)",72],["(boolean",166],["(if (and ^boolean (goog/isString k)",213],["(boolean",219],["(if ^boolean (.-edit root)",431]],"useCount":10116},{"word":"bootstrap","context":[["(bootstrap/with-puppetserver-running",128],["::bootstrap/resource-path \"/public\"",44],["(t/bootstrap",52],["(:use [backtype.storm bootstrap testing])",51],["(bootstrap/with-app-with-config",59],["[puppetlabs.trapperkeeper.testutils.bootstrap :as tk-testutils]",47],["[om-bootstrap.button :as b]",45],["(bootstrap)",126],["[puppetlabs.puppetserver.bootstrap-testutils :as bootstrap]",65],["[puppetlabs.puppetserver.bootstrap-testutils :as bootstrap]",65]],"useCount":2155},{"word":"bound","context":[["(take-while (mk-bound-fn sc end-test end-key)",71],["^{:doc \"bound in a repl thread to the second most recent value printed\"}",71],["(defn mk-bound-fn",71],["Whatever function *print-fn* is bound to will be passed any",83],["(let [include (mk-bound-fn sc test key)]",142],["^{:doc \"bound in a repl thread to the third most recent value printed\"}",71],["(if ((mk-bound-fn sc end-test end-key) e) s (next s))))))",71],["^{:doc \"bound in a repl thread to the most recent value printed\"}",71],["(take-while (mk-bound-fn sc start-test start-key)",71],["(if ((mk-bound-fn sc start-test start-key) e) s (next s))))))",71]],"useCount":1840},{"word":"box","context":[["[:div.box",34],["[:div.box.box-info",32],["[v-box",424],["[h-box",411],[":children [[v-box",126],["; What I pasted in the box:",114],["[re-com/v-box",84],["[box",82],["[:div.box-body",36],[":children [[h-box",33]],"useCount":1821},{"word":"br","context":[["{:user \"Holyflare\", :message ({:tag :br, :attrs nil, :content nil})}",26],[";; <br/>",45],["[:br]",469],["{:tag :br, :attrs nil, :content nil})}",789],["[:br]",942],["({:tag :br, :attrs nil, :content nil}",5208],["{:tag :br, :attrs nil, :content nil}",23688],["(dom/br nil)",36],["[:br][:br]",31],["[:br][:br]",31]],"useCount":31526},{"word":"broker","context":[["[^BrokerService broker]",30],["(with-app-with-config app broker-services broker-config",27],["(with-app-with-config app broker-services broker-config",27],["`broker`     - the `BrokerService` to configure",27],["Returns the (potentially modified) `broker` object.\"",27],["(let [broker (build-embedded-broker broker-name dir)]",33],["(let [broker (build-embedded-broker broker-name dir)]",33],["(let [broker (build-embedded-broker broker-name dir)]",33],["(is (instance? BrokerService broker)))",36],["(with-test-broker \"test\" conn",58]],"useCount":1605},{"word":"browser","context":[["(defn browser-repl []",574],["(defn hook-browser-navigation! []",258],["(hook-browser-navigation!)",219],["(:require [clojure.browser.repl :as repl]))",104],[":production {:ring {:open-browser? false",88],["{:open-browser? false, :stacktraces? false, :auto-reload? false}}",59],[";; (browser-repl) live.",50],["(def browser-repl figwheel/cljs-repl)",48],["[clojure.browser.event :as event]",38],["(:require [cemerick.austin.repls :refer (browser-connected-repl-js)]",36]],"useCount":2270},{"word":"buffer","context":[["(:require [clojure.core.async :refer [chan >!! <!! close! sliding-buffer]]",149],["b (chunk-buffer size)]",355],[":refer [>! <! >!! <!! go chan buffer close! thread",39],["[buffer]",43],["(if (empty? buffer)",48],["(ref-set buffer [event])",50],["(:require [cljs.core.async :as async :refer [>! <! alts! chan sliding-buffer close!]]",110],["(alter buffer conj event)",75],["(defn chunk-buffer [capacity]",71],[":buffer []})",69]],"useCount":3275},{"word":"build","context":[["`build-instruction",81],["(.build)))",96],["(defn build-lifecycles []",102],["(defn build-catalog",107],["[clojurescript-build.auto :as auto]",114],["\"You likely have compiled class files lying around from an uberjar build. \"",123],["(require '[cljs.build.api :as b])",124],["(.build))))",166],["(core/build-instruction",175],["([] (build-catalog 5 50))",106]],"useCount":5596},{"word":"builds","context":[[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],[":cljsbuild {:builds [{:id \"dev\"",166],[":builds [{:id \"dev\"",208],["[:cljsbuild :builds :app :compiler :output-dir]",229],["[:cljsbuild :builds :app :compiler :output-to]]",245],[":cljsbuild {:builds {:app",259],[":cljsbuild {:builds {:app {:source-paths [\"env/dev/cljs\"]",304],[":builds {:app",329],["{:builds",392],[":cljsbuild {:builds",506]],"useCount":4834},{"word":"but","context":[[";; stanza, but it will read it without passing through leiningen's profile",49],["\"Returns a lazy sequence of all but the first n items in coll.",49],[";; with total-error > 0 if it had error of zero on train but not on validation",113],["\"Like #'request, but sets the :method and :url as appropriate.\"",85],["\"For a list or queue, same as first, for a vector, same as, but much",72],[";; (but currently hard-coded to atom!)",71],["but are otherwise considered opaque by the watch mechanism.  Bear in",71],["\"Return a lazy sequence of all but the last n (default 1) items in coll\"",71],["int?       (zero? (mod value 1)) ; often true, but we could have 1.1111K",62],["You can pass attributes as a map or keyword value pairs (but not both at the",116]],"useCount":2134},{"word":"button","context":[["[md-icon-button",61],[":type \"button\"",62],["[button",68],["{:type \"button\"",76],["[:button.btn.btn-default",77],["[:button {:type \"button\"",110],["[:button {:type \"button\"",110],["(forms/managed-button",121],["[:button",143],["(dom/button",205]],"useCount":2956},{"word":"by","context":[["(sort-by second)",86],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["(sort-by",153],["\"Coerce to int by stripping decimal places.\"",140],["\"Coerce to long by stripping decimal places. Identical to `int'.\"",140],["else returns numerator divided by all of the denominators.\"",140],["set of first items of each coll, followed by applying f to the set",93],[";;published by The Pragmatic Bookshelf.",90],["(sort-by first)",90],[";; R&D funded by the European Commission (FP7/CAPS 610349)",88]],"useCount":11184},{"word":"c","context":[["(let [c (chan)]",157],["(fn [c div]",172],["c",210],["[clj-time.coerce :as c]",240],["c))",271],["c))",312],["size (count c)",355],["(let [c (chunk-first s)",355],["[c]",381],["(neg? c)",142]],"useCount":25890},{"word":"c1","context":[["(let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]",71],["(map #(apply f %) (step (conj colls c3 c2 c1))))))",71],["(into [] (map f c1 c2)))",71],["(let [ss (map seq (conj colls c2 c1))]",72],["([c1 c2 & colls]",77],["([c1 c2]",78],["([f c1 c2]",142],["([f c1 c2 c3]",142],["([f c1 c2 c3 & colls]",142],["(let [s1 (seq c1) s2 (seq c2)]",148]],"useCount":1426},{"word":"ca","context":[["(let [settings (testutils/ca-sandbox! cadir)",80],["signed-cert-path (ca/path-to-cert (:signeddir settings) \"test-agent\")]",60],["[puppetlabs.puppetserver.certificate-authority :as ca]",50],["(let [settings (assoc (testutils/ca-settings cadir)",47],[":value    {:is-ca false}}",44],["(retrieve-ca-cert! (:cacert ca-settings) (:localcacert settings))",42],["(retrieve-ca-cert! (:cacert ca-settings) (:localcacert settings))",42],["(let [settings (testutils/ca-sandbox! cadir)]",36],["(let [settings         (testutils/ca-sandbox! cadir)",36],["(initialize-master-ssl! settings \"master\" ca-settings)",31]],"useCount":2680},{"word":"cache","context":[["(defn add-to-string-hash-cache [k]",72],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],[":cache-analysis true",165],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],["* cache (Phaser.Cache) - Targeted instance for method",84],["(if (env :dev) (parser/cache-off!))",76],["[org.clojure/core.cache \"0.6.4\"]",73],["(set! string-hash-cache-count (inc string-hash-cache-count))",72]],"useCount":4764},{"word":"caching","context":[["(-hash [coll] (caching-hash coll hash-iset __hash))",42],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash))",665],["(-hash [coll] (caching-hash coll hash-coll __hash))",254],["(-hash [coll] (caching-hash coll hash-imap __hash))",82],[";; Simple caching of string hashcode",72],["(caching-hash sym hash-symbol _hash))",68],["(caching-hash this hash-keyword _hash))",51],["(-hash [rng] (caching-hash rng hash-ordered-coll __hash))",51],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash)))",51],["(-hash [coll] (caching-hash coll hash-unordered-coll __hash))",306]],"useCount":1874},{"word":"call","context":[["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["(declare gen-call)",255],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],["(call-rescue event children)))))",234],["[chromex.callgen :refer [gen-call-helper gen-tap-all-events-call]]))",254],["[chromex.callgen :refer [gen-call-helper gen-tap-all-events-call]]))",254],["(def gen-call (partial gen-call-helper api-table))",255],["(def gen-call (partial gen-call-helper api-table))",255],["; code generation for API call-site",255]],"useCount":6100},{"word":"callback","context":[[":callback? true,",1146],[":type :callback,",296],[":jsload-callback core/mount-root)",277],["{:name \"callback\",",180],[":jsload-callback (fn []",133],["(clj->phaser callback)",127],[":jsload-callback (fn [] (core/main)))",114],["[{:name \"callback\",",103],["{:name \"callback\", :optional? true, :type :callback}]}",67],["{:name \"callback\", :optional? true, :type :callback}]}",67]],"useCount":4808},{"word":"called","context":[[";; inputs is either a list or a function that, when called, will create a",113],["\"init will be called once when",117],["\"destroy will be called when your application",120],[";; must be called after routes have been defined",193],["(throw (js/Error. \"persistent! called twice\"))))",216],["(is (= 0 (times-called publish)))",449],["is returned and f is not called.  If val is supplied, returns the",72],["fn will be called synchronously. Note that an atom's state",71],["and f is not called. Note that reduce-kv is supported on vectors,",72],["items, returns val and f is not called.\"",72]],"useCount":3010},{"word":"calls","context":[[":lifecycle/calls :onyx.plugin.core-async/reader-calls",108],[":lifecycle/calls :onyx.plugin.core-async/reader-calls}",199],[":lifecycle/calls :onyx.plugin.core-async/reader-calls}",199],["(def out-calls",122],[":lifecycle/calls :onyx.plugin.core-async/writer-calls",120],[":lifecycle/calls :onyx.plugin.core-async/writer-calls",120],["(def in-calls",113],[":lifecycle/calls :onyx.plugin.core-async/writer-calls}])",81],[":lifecycle/calls :onyx.plugin.core-async/writer-calls}])",81],[":lifecycle/calls :onyx.plugin.core-async/reader-calls",108]],"useCount":2846},{"word":"can","context":[["order is determined by comparing (keyfn item).  Comp can be",72],["\"Returns a sorted sequence of the items in coll. Comp can be",73],["element in the seq do not occur until the seq is consumed. doall can",72],["element in the seq do not occur until the seq is consumed. dorun can",72],[";; which can be found in the file COPYING at the root of this distribution.",90],["You can customize this variable.\")",113],["You can pass attributes as a map or keyword value pairs (but not both at the",116],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],["(println (str \"You can view the site at http://localhost:\" port))))",374]],"useCount":5220},{"word":"card","context":[["(fn [state side card]",60],["card nil)))",38],["[card]",66],["card nil)",67],["(core/move state :runner (find-card \"Sure Gamble\" (:hand (get-runner))) :deck)",71],["(metabase.models [card :refer [Card]]",82],["card nil))}",97],["card nil)))}",103],["[state side card]",46],["card nil))}]}",39]],"useCount":3168},{"word":"cardinality","context":[[":db/cardinality        :db.cardinality/one",146],[":db/cardinality :db.cardinality/one",2655],[":db/cardinality :db.cardinality/one",2655],[":db/cardinality :db.cardinality/many",293],[":db/cardinality :db.cardinality/many",293],[":db/cardinality :db.cardinality/one}",24],[":db/cardinality :db.cardinality/one}",24],[":db/cardinality  :db.cardinality/one",43],[":db/cardinality  :db.cardinality/one",43],[":db/cardinality        :db.cardinality/one",146]],"useCount":6465},{"word":"case","context":[["(case op",105],["(println (format \"Test Case: %3d | Input/Output: %s\" i (str case)))))",80],["(doseq [[i case] (map vector (range) test-cases)]",80],["(case type",381],["(case type",140],["(case k",120],["(case command",113],["(doseq [[i case] (map vector (range) train-cases)]",80],["(case action",90],["(println (format \"Train Case: %3d | Input/Output: %s\" i (str case))))",109]],"useCount":5558},{"word":"cases","context":[[";; should be used as training and testing cases respectively. Each \"set\" of",113],["([program data-cases] ;; data-cases should be :train or :test",113],[";; set. Would need a third category of data cases, or a defined split of training cases.",113],["\"Takes a sequence of inputs and gives IO test cases of the form",113],[";; a \"set\" of inputs and two integers representing how many cases from the set",113],["([program data-cases print-outputs]",109],[":test test-cases",113],[":train train-cases",113],["([program data-cases] ;; data-cases should be :train or :test",113],[";; set. Would need a third category of data cases, or a defined split of training cases.",113]],"useCount":2222},{"word":"cat","context":[["(cat (chunk-rest xys) zs))",71],["(cons (first coll) (cat (rest coll) colls))",71],["(cons (first xys) (cat (rest xys) zs)))",71],["(cat (first colls) (rest colls))))))]",71],["(cat (concat x y) zs))))",72],[":synsem {:cat :verb",76],["{:synsem {:cat :verb",75],["(let [cat (fn cat [xys zs]",72],["(let [cat (fn cat [xys zs]",72],["(cat (first zs) (next zs)))))))]",72]],"useCount":1966},{"word":"catalog","context":[["(add-catalog! catalog)",70],["(add-catalog! catalog)",70],["(def catalog",77],["{:catalog catalog",82],["{:catalog catalog",82],["[catalog]",88],["([] (build-catalog 5 50))",106],["(defn build-catalog",107],[":catalog catalog",126],[":catalog catalog",126]],"useCount":7780},{"word":"catalogs","context":[["(tuc/munge-catalog (get-catalogs example-certname))))",35],["[puppetlabs.puppetdb.catalogs :as catalogs]",29],["(query-to-vec (format \"SELECT certname, %s as catalog FROM catalogs\"",33],["(get-in catalogs [:basic :certname]) \"File\" \"/etc/foobar\"]",36],["(query-to-vec \"SELECT certname, environment_id FROM catalogs\")))",37],["REFERENCES catalogs (id)",41],[":catalogs",41],["(let [{certname :certname :as catalog} (:basic catalogs)",44],["[\"catalog\" \"VARCHAR(40)\" \"REFERENCES catalogs(hash)\" \"ON DELETE CASCADE\"]",44],["\"ALTER TABLE catalogs",66]],"useCount":1717},{"word":"catch","context":[["(catch Exception e#",251],["(catch :default e",334],["(catch js/Error e",337],["(catch Exception ex",462],["(catch Throwable e",1007],["(catch Exception _",214],["(catch clojure.lang.ExceptionInfo e",213],["(catch IllegalArgumentException e",164],["(catch Exception e",4907],["(catch Throwable t",1019]],"useCount":14556},{"word":"cause","context":[["Returns exception cause (an Error / ExceptionInfo) if ex is an",55],["(catch :default cause",67],["(.-cause ex)))",69],["(defn ex-cause",69],["(try-cause",114],["(pr-writer (.-cause obj) writer opts))",41],["(-write writer \", :cause \")",41],["(when (.-cause obj)",41],["([msg data cause]",40],["(ExceptionInfo. msg data cause)))",40]],"useCount":1564},{"word":"cemerick","context":[["(:require [cemerick.cljs.test :as t]",112],[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["[com.cemerick/piggieback \"0.2.1\"]",304],["[cemerick.piggieback :as piggieback]",254],["[cemerick.friend :as friend]",237],["(:require [cemerick.piggieback :as piggieback]",146],["[com.cemerick/piggieback \"0.1.3\"]",200],[":repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",121],["[com.cemerick/piggieback \"0.1.5\"]",117],["[com.cemerick/url \"0.1.1\"]",112]],"useCount":4047},{"word":"cert","context":[["(retrieve-ca-cert! (:cacert ca-settings) (:localcacert settings))",42],["(is (true? (fs/exists? signed-cert-path)))",73],["(is (false? (fs/exists? signed-cert-path)))",73],["signed-cert-path (ca/path-to-cert (:signeddir settings) \"test-agent\")]",60],["(wrap-with-ssl-client-cert))",84],["signed-cert-path (ca/path-to-cert (:signeddir settings) \"test-agent\")]",60],["(wrap-with-ssl-client-cert))]",48],[":value    [ssl-server-cert ssl-client-cert]}",44],["(let [path (path-to-cert-request (:csrdir settings) subject)",44],[":value    [ssl-server-cert ssl-client-cert]}",44]],"useCount":4479},{"word":"certificate","context":[[":access-control {:certificate-status",47],["{:puppetlabs.services.ca.certificate-authority-service/certificate-authority-service \"\"",20],["[puppetlabs.services.ca.certificate-authority-service :refer [certificate-authority-service]]",23],["{:puppetlabs.services.ca.certificate-authority-service/certificate-authority-service \"\"",20],["[puppetlabs.services.ca.certificate-authority-service :refer [certificate-authority-service]]",23],["response         (handle-put-certificate-request!",24],["(let [response (handle-put-certificate-request! \"test-agent\" csr-stream settings)]",24],["certificate-request :- InputStream",25],["certificate.\"",26],["[puppetlabs.puppetserver.certificate-authority :as ca]",50]],"useCount":2593},{"word":"certname","context":[["[certname]",130],["[\"=\" \"certname\" \"foo.local\"]",131],["[\"in\" \"certname\"",184],["[\"extract\" \"certname\"",283],["(add-certname! certname)",350],["(scf-store/add-certname! \"foo1\")",88],["(scf-store/add-certname! certname)",82],["(add-certname! certname)",350],["(scf-store/add-certname! certname)",82],["[certname :- String]",82]],"useCount":13478},{"word":"cgrand","context":[["[net.cgrand.enlive-html :as enlive]))",56],["[net.cgrand.enlive-html :as html]",271],["(:require [net.cgrand.enlive-html :as html]",252],["[net.cgrand.enlive-html :refer [deftemplate]]",250],["[net.cgrand.enlive-html :refer [set-attr prepend append html]]",243],["[net.cgrand.reload :refer [auto-reload]]",136],["[net.cgrand.enlive-html :as enlive]",110],["[net.cgrand.enlive-html :as html]))",101],["(:require [net.cgrand.enlive-html :as html]))",74],["[net.cgrand.jsoup :as jsoup]",48]],"useCount":1833},{"word":"ch","context":[["api-ch",151],["(defn inject-reader-ch [event lifecycle]",96],["ch))",172],["[ch]",168],["(let [ch (chan)]",154],["(defn inject-out-ch [event lifecycle]",120],["ch))",119],["{:lifecycle/before-task-start inject-out-ch})",117],["(defn inject-in-ch [event lifecycle]",108],["{:lifecycle/before-task-start inject-in-ch})",105]],"useCount":7795},{"word":"chan","context":[["(:require [cljs.core.async :as async :refer [>! <! alts! chan sliding-buffer close!]]",110],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["(let [errors-chan (a/chan 100)",142],["(let [errors-chan (a/chan 100)",142],["(:require [clojure.core.async :refer [chan >!! <!! close! sliding-buffer]]",149],["errors (all-errors errors-chan)]",151],["(let [ch (chan)]",154],["(let [c (chan)]",157],["(let [out (chan)]",190],["[chan]",269]],"useCount":6271},{"word":"change","context":[[":accuracy-change        1",137],["atom's value will change.  Example:",71],["new state on any state change. If the new state is unacceptable, the",71],["[\"change\" \"version\" \"leiningen.release/bump-version\"]",72],["occur, then the value of the atom will not change.\"",72],["change. If the new state is unacceptable, the validate-fn should",72],[":on-change (fn [e]",143],["\"Alpha - subject to change.",341],[";; EXPERIMENTAL: subject to change",410],["{:change",923]],"useCount":3569},{"word":"channel","context":[["This function returns a core.async channel which eventually receives a result value and closes.",1145],[":onyx/doc \"Writes segments to a core.async channel\"}]",161],["Signature of the result value put on the channel is [].",390],[":onyx/doc \"Reads segments from a core.async channel\"}",389],[":onyx/doc \"Writes segments to a core.async channel\"}]))",99],["(async/as-channel request",119],[":onyx/doc \"Injects the core.async writer channel\"}",111],[":onyx/doc \"Injects the core.async reader channel\"}",106],["Signature of the result value put on the channel is [result] where:",192],["[channel]",102]],"useCount":5716},{"word":"char","context":[["\"Coerce to char\"",70],["(defn char",71],[":else (throw (js/Error. \"Argument to char must be a character or number\"))))",75],["(read-char reader)",85],["(let [ch (read-char reader)]",50],["(defn ^number unchecked-char [x] x)",60],["charset (get rumeta/char-sets (:charset pct))",61],["(def ^:private char-escapes",69],["(fn [match] (aget char-escapes match)))",70],["ch (read-char reader)]",58]],"useCount":1933},{"word":"charset","context":[["(is (= \"text/plain; charset=UTF-8\"",40],["charset (get rumeta/char-sets (:charset pct))",61],["charset (get rumeta/char-sets (:charset pct))",61],["\"text/html; charset=utf-8\")))",64],[":headers {\"Content-Type\" \"text/html; charset=utf-8\"}",154],["[:meta {:charset \"utf-8\"}]",512],["\"text/html; charset=utf-8\"))",54],[":headers {\"Content-Type\" \"application/json; charset=utf-8\"}",46],["[:meta {:charset \"UTF-8\"}]",45],["[yada.charset :as charset]",35]],"useCount":1725},{"word":"check","context":[["(check-json-response",145],["(:require [clojure.test.check.generators :as gen]",123],["(check-superuser)",112],["(check-instruction-with-all-kinds-of-stack-stuff",155],["[clojure.test.check.clojure-test :refer [defspec]]",183],["[clojure.test.check :as tc]",189],["(register-type-and-check-instruction",204],[";; Use M-x 4clojure-check-answers when you're done!",228],["[clojure.test.check.properties :as prop]",470],["[clojure.test.check.generators :as gen]",490]],"useCount":5935},{"word":"cheshire","context":[["[cheshire \"5.4.0\"]",216],["[cheshire.core :refer :all]",190],["[cheshire.core :as json]))",241],["[cheshire.core :as cheshire]",136],["[cheshire.core :as cheshire]",136],["[puppetlabs.puppetdb.cheshire :as json]",272],["[cheshire \"5.3.1\"]",316],["[cheshire \"5.5.0\"]",350],["(:require [cheshire.core :as json]",428],["[cheshire.core :as json]",1049]],"useCount":5015},{"word":"child","context":[["(contains? ((:ancestors h) child) parent)",71],["(let [node-to-insert (push-tail pv (- level 5) child tailnode)]",71],["(or (= child parent)",71],[";;(and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))",71],["(pv-aset ret subidx new-child)",71],["(and (vector? parent) (vector? child)",71],["(clj->phaser child)))))",114],["(if-not (nil? child)",142],["(if (and (nil? new-child) (zero? subidx))",143],["(clj->phaser child)",168]],"useCount":4480},{"word":"children","context":[["(let [c (children this)]",128],[":children",130],["(call-rescue event children)",132],["(call-rescue event children)))))",234],["[n & children]",159],["[& children]",191],[":children []",101],[":children [[v-box",126],["same time) and children after the attributes.\"",116],["[f & children]",118]],"useCount":7138},{"word":"chromex","context":[["chromex.error/get-last-error.",572],["chromex.error/get-last-error.\"",579],["; docs: https://github.com/binaryage/chromex/#tapping-events",155],["(:require [chromex.core]))",254],["(:require [chromex.wrapgen :refer [gen-wrap-helper]]",254],["[chromex.callgen :refer [gen-call-helper gen-tap-all-events-call]]))",254]],"useCount":2068},{"word":"chunk","context":[["(chunk-cons (chunk b) (filter pred (chunk-rest s))))",71],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["(chunk-cons (chunk-first s) (concat (chunk-rest s) y))",71],["b (chunk-buffer size)]",355],["(let [c (chunk-first s)",355],["(chunk-append b x))))",142],["(if (> (-count chunk) 1)",138],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["(ChunkedCons. (-drop-first chunk) more meta nil)",137],["(array-chunk node off))",72]],"useCount":6032},{"word":"chunked","context":[["(-chunked-rest [coll]",175],["(-chunked-next coll)))",72],["(-chunked-first [coll]",104],["(-chunked-rest coll)))",72],["(chunked-seq vec node i off m))",71],["(-chunked-first [coll] chunk)",71],["(defn chunked-seq",71],["(if (chunked-seq? s)",426],["(-chunked-next [coll]",175],["(let [s (chunked-seq vec node i (inc off))]",142]],"useCount":2301},{"word":"ci","context":[["(-nth ci i))",71],["(ci-reduce node f))",142],["(ci-reduce node f start))",142],["[cider-ci.utils.rdbms :as rdbms]",99],["(-reduce [rng f] (ci-reduce rng f))",72],["(defn- ci-reduce",72],["(RSeq. ci i new-meta))",71],["(ci-reduce v f))",71],["(deftype RSeq [ci i meta]",71],["(ci-reduce coll f))",71]],"useCount":1806},{"word":"class","context":[["(:gen-class :main true))",156],["(reagent/create-class",153],["(ex/extend-phaser-class",157],["(r/create-class",161],[":class \"land\"",228],["(set-attr :class \"is-dev\")",244],["(:gen-class",397],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419],["(:gen-class)",2116],["(:gen-class))",5421]],"useCount":16287},{"word":"clean","context":[[":auto-clean false",54],[":clean-targets ^{:protect false} [:target-path",206],[":clean-targets ^{:protect false} [:target-path :compile-path \"resources/public/js\"]",50],[":clean-targets ^{:protect false}",56],["(clean-setup!)",64],["[\"clean\"]",87],["shuts down, put any clean up code here\"",121],[":clean-targets ^{:protect false} [\"resources/public/js\"]",125],["#(clean-up-broken-connections",128],[":clean-targets ^{:protect false} [\"resources/public/js/compiled\" \"target\"]",153]],"useCount":1929},{"word":"clear","context":[["(clear [_] (set! arr (array)))",49],["(.clear a)",196],["(clear-db-for-testing!)",162],[";;clear first!",94],[":description \"all clear, uh, situation normal\"",89],["(clear!)",84],["(cljs.core/bit-clear x n))",71],["(defn bit-clear",71],["(defn clear!",53],[":triggers #{:clear!}",50]],"useCount":2117},{"word":"cli","context":[["(cli args",124],["(def cli-options",477],["[org.clojure/tools.cli \"0.3.1\"]",336],["[clojure.tools.cli :refer [parse-opts]]",231],["(set! *main-cli-fn* -main)",147],["(let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]",141],["(:require [clojure.tools.cli :refer [parse-opts]]",122],["[org.clojure/tools.cli \"0.3.1\"]]",109],["[org.clojure/tools.cli \"0.3.3\"]",130],["[clojure.tools.cli :refer [parse-opts]])",79]],"useCount":3560},{"word":"click","context":[[":on-click (fn []",64],[":click (fn []",230],[":on-click (fn [e]",175],[":on-click #(do",146],[":click (fn [e]",84],[":cost [:click 1]",72],[":click",66],["{:abilities [{:cost [:click 1]",60],[":on-click",56],["{:on-click (fn [e]",48]],"useCount":1944},{"word":"client","context":[["[org.httpkit.client :as http]",253],["[cljs-http.client :as http]",229],["[figwheel.client :as figwheel :include-macros true]))",279],["[figwheel.client :as figwheel :include-macros true]",395],["[clj-http.client :as http]",360],["[client]",414],["(:require [clj-http.client :as client]",417],["(:require [clj-http.client :as client]",417],["[clj-http.client :as client]",530],["[clj-http.client :as client]",530]],"useCount":14298},{"word":"clj","context":[[":source-paths [\"src/clj\"]",672],["[clj-time.core :as time]",564],[":source-paths [\"src/clj\" \"src/cljs\"]",549],["[clj-http.client :as client]",530],["[clj-time.core :as t]",769],["(phaser->clj",3798],["(clj->phaser x)",404],["(clj->phaser key)",444],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419],["(:require [clj-http.client :as client]",417]],"useCount":30794},{"word":"cljs","context":[["fixed-arity (.-cljs$lang$maxFixedArity f)]",284],["(:require-macros [cljs.core.async.macros :refer [go]])",713],["{:source-paths [\"env/prod/cljs\"]",592],[":source-paths [\"src/clj\" \"src/cljs\"]",549],[":source-paths [\"src/cljs\"]",534],[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["(if (.-cljs$lang$applyTo f)",355],[":cljsbuild {:builds {:app {:source-paths [\"env/dev/cljs\"]",304],["(:require-macros [cljs.core.async.macros :refer [go go-loop]])",285]],"useCount":27128},{"word":"cljsbuild","context":[[":cljsbuild {:builds {:app {:source-paths [\"env/dev/cljs\"]",304],[":cljsbuild {",829],[":cljsbuild",671],[":cljsbuild {:builds",506],[":hooks [leiningen.cljsbuild]",488],[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],[":plugins [[lein-cljsbuild \"1.0.3\"]",323],[":cljsbuild {:jar true",316],[":cljsbuild {:builds {:app",259],["[:cljsbuild :builds :app :compiler :output-to]]",245]],"useCount":9163},{"word":"clojars","context":[["[clojars.db :as db]",58],["[clojars.test.integration.steps :refer :all]",52],[":deploy-repositories [[\"releases\" {:url \"https://clojars.org/repo\"",60],["(-> (session web/clojars-app)",298],[":deploy-repositories [[\"releases\" :clojars]]",115],["(-> (session clojars-app)",109],["[clojars.config :refer [config]]",85],["[clojars.test.test-helper :as help]",83],[":homepage \"http://clojars.org/\"",73],[":deploy-repositories [[\"clojars\" {:creds :gpg}]]",69]],"useCount":2646},{"word":"clojure","context":[["(:require [clojure.test :refer :all]",14383],[":dependencies [[org.clojure/clojure \"1.6.0\"]",4608],[":dependencies [[org.clojure/clojure \"1.6.0\"]",4608],["[clojure.java.io :as io]",3814],[":dependencies [[org.clojure/clojure \"1.5.1\"]",2677],[":dependencies [[org.clojure/clojure \"1.5.1\"]",2677],[":dependencies [[org.clojure/clojure \"1.7.0\"]",2637],[":dependencies [[org.clojure/clojure \"1.7.0\"]",2637],["[clojure.tools.logging :as log]",2424],["[clojure.string :as str]",2240]],"useCount":146742},{"word":"clojurescript","context":[["org.clojure/clojurescript",153],["[com.cemerick/clojurescript.test \"0.3.3\"]]",73],["[org.clojure/clojurescript \"1.7.48\"]",76],["[org.clojure/clojurescript \"0.0-3308\"]",77],["[org.clojure/clojurescript \"0.0-2371\"]",81],["[org.clojure/clojurescript \"1.7.122\"]",95],["[clojurescript-build.auto :as auto]",114],["[org.clojure/clojurescript \"0.0-2371\" :scope \"provided\"]",124],["[org.clojure/clojurescript \"1.7.228\"]",136],["[org.clojure/clojurescript \"1.7.170\"]",189]],"useCount":3339},{"word":"clone","context":[["(let [ret (pv-clone-node parent)",71],["(defn- clone-and-set",71],["new-strobj (obj-clone strobj keys)]",71],["(let [ret (pv-clone-node node)]",142],["(BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))))",71],[":else (let [ret (pv-clone-node node)]",71],["(ArrayNode. nil (dec cnt) (clone-and-set arr idx n)))",71],["(BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) val)))",71],["(clone-and-set arr (* 2 idx) nil (inc (* 2 idx))",71],["(ArrayNode. nil cnt (clone-and-set arr idx n)))))))",71]],"useCount":3109},{"word":"close","context":[["(.close socket)",55],["(close! ch))",60],["(close-client client)",62],["(defn close",86],["(close [_]",89],[":triggers #{:close}",93],["(:require [cljs.core.async :as async :refer [>! <! alts! chan sliding-buffer close!]]",110],[":uniform-close-mutation 0.1",112],["(:require [clojure.core.async :refer [chan >!! <!! close! sliding-buffer]]",149],["(close [this]",180]],"useCount":4709},{"word":"cluster","context":[["env-config (u/load-env-config cluster-id)",56],["peer-config (u/load-peer-config cluster-id)",56],["(let [state (:storm-cluster-state cluster)",60],["(let [state (:storm-cluster-state cluster)",60],["(advance-cluster-time cluster 11)",64],["(advance-cluster-time cluster 11)",64],["(check-consistency cluster \"test\")",82],["(let [storm-cluster-state (:storm-cluster-state nimbus)",92],["(let [storm-cluster-state (:storm-cluster-state nimbus)",92],["(let [cluster-id (java.util.UUID/randomUUID)",56]],"useCount":3666},{"word":"cnt","context":[["(set! (.-cnt editable) (inc (.-cnt editable)))",142],["(let [cnt (-count cicoll)]",213],["(zero? cnt) (throw (js/Error. \"Can't pop empty vector\"))",143],["(if (and (<= 0 n) (< n cnt))",142],["(if (<= cnt 8)",142],["(let [cnt (alength arr)]",216],["(-count [coll] cnt)",287],["(if (pos? cnt)",356],["(if (< n cnt)",429],["(let [idx (hash-collision-node-find-index arr cnt key)]",434]],"useCount":12687},{"word":"code","context":[[";; #'app expands to (var app) so that when we reload our code,",373],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["[code]",106],["put any initialization code here\"",118],["shuts down, put any clean up code here\"",121],["(throw (Exception. (str \"Production environment code is being loaded while the dev environment is active. \"",123],["(comment  Write code here that turns the phrase above into concrete actions  )",145],["; code generation for native API wrapper",255],["; code generation for API call-site",255]],"useCount":6962},{"word":"coerce","context":[["[clj-time.coerce :as c]",240],["[clj-time.coerce :as tc]",140],["[clj-time.coerce :as coerce]",102],["[clj-time.coerce :as time-coerce]",84],["[clj-time.coerce :as time-coerce]",84],["[schema.coerce :as coerce]",49],["[schema.coerce :as coerce]",49],["[clj-time.coerce :as c]))",44],["[clj-time.coerce :refer [to-timestamp]]",34],["[clj-time.coerce :as coerce]",102]],"useCount":1869},{"word":"col","context":[["[:div.col-md-12",211],["(-reduce [col f] (seq-reduce f col))",68],["(-reduce [col f] (seq-reduce f col))",68],["[:div.col-md-6",69],["col",80],["[:div.col-xs-12",82],["[:div.col-md-12",83],["[col]",111],["(-reduce [col f start] (seq-reduce f start col)))",68],["(-reduce [col f start] (seq-reduce f start col)))",68]],"useCount":3450},{"word":"coll","context":[["[coll]",915],["(toString [coll]",1752],["(pr-str* coll))",1750],["(-meta [coll] meta)",1448],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(when-let [s (seq coll)]",1000],["[coll]",1772]],"useCount":96139},{"word":"collection","context":[["[monger.collection :as mc]",335],["Returns a transducer when no collection is provided.\"",197],["transducer when no collection is provided.\"",147],["\"sc must be a sorted collection, test(s) one of <, <=, > or",142],["no collection is provided.\"",115],["(mix-collection-hash hash-code n))))",102],["Returns a stateful transducer when no collection is provided.\"",84],["collection.\"",74],["\"Returns a seq on the collection. If the collection is",72],["\"conj[oin]. Returns a new collection with the xs",72]],"useCount":6110},{"word":"colls","context":[["([f c1 c2 c3 & colls]",142],["exhausted.  Any remaining items in other colls are ignored. Function",142],["of second items in each coll, until any one of the colls is",97],["f should accept number-of-colls arguments.\"",93],["([c1 c2 & colls]",77],["[colls]",72],["\"Returns a lazy seq representing the concatenation of the elements in the supplied colls.\"",72],["(cat nil colls)))",71],["(cat (first colls) (rest colls))))))]",71],["(let [ss (map seq (conj colls c2 c1))]",72]],"useCount":2162},{"word":"color","context":[[":attrs {:style \"color: blue\"},",329],["\"text-decoration:none;font-family:monospace;color:#808080\"},",174],["\"border:1px solid #808080;padding:5px;background-color:#EBEFF2;display:none\",",174],[":attrs {:style \"color: green\"},",100],[":attrs {:style \"color: red\"},",83],[":color :orange :end-keys [:dimmers]))",78],["(q/color-mode :hsb)",71],["[color]",61],["[:div {:style  {:color \"red\"}}",55],["\"text-decoration: none; font-family: monospace; color: #808080;\",",45]],"useCount":3203},{"word":"column","context":[[":column 1,",1087],["[column]",127],["(l/column",116],["[:fo:table-column {:column-width \"3cm\"}]",57],["[:fo:table-column {:column-width \"3cm\"}]",57],["[:div.column",45],["(result-set-read-column [v _ _] (to-date v))",44],["[:div.sixteen.wide.column",41],[":column field",38],[":column 1",35]],"useCount":3878},{"word":"com","context":[["[com.stuartsierra/component \"0.3.1\"]",132],["; docs: https://github.com/binaryage/chromex/#tapping-events",155],["com.sun.jmx/jmxri]]",179],[":url \"http://example.com/FIXME\"",8641],["[com.stuartsierra.component :as component]",1190],["(:require [com.stuartsierra.component :as component]",648],["[com.cemerick/piggieback \"0.2.1\"]",304],["[com.stuartsierra.component :as component]))",265],["com.sun.jdmk/jmxtools",208],["[com.cemerick/piggieback \"0.1.3\"]",200]],"useCount":22532},{"word":"command","context":[["(case command",113],["(test-msg-handler command publish discard-dir",388],["(str \"The following errors occurred while parsing your command:\\n\\n\"",174],["(expect-command",71],["[lt.objs.command :as cmd]",255],[";; :open-file-command \"myfile-opener\"",182],["(-> command",53],["function *main-fn* is set to will be called with the command-line",54],["^{:doc \"When compiled for a command-line target, whatever",54],["[command]",61]],"useCount":6075},{"word":"commands","context":[["(sql/do-commands",510],[";commands",33],["[commands]",35],["(sql/db-do-commands",38],["(def commands",44],[":test-commands {\"unit\" [\"phantomjs\" :runner",64],["[onyx.log.commands.common :as common]",75],["(jdbc/db-do-commands",89],[":cljsbuild {:test-commands { \"test\" [\"phantomjs\" \"env/test/js/unit-test.js\" \"env/test/unit-test.html\"] }",103],["(jdbc/do-commands",229]],"useCount":1883},{"word":"comment","context":[[":value    netscape-comment-value}",55],["(comment \"",28],["(comment  Write code here that turns the phrase above into concrete actions  )",145],["(when-not (re-seq #\"^\\s*$|^\\s*;.*$\" line) ; blank/comment",45],["(comment (time",28],[";; (comment",29],[";(comment",29],["netscape-comment-value)",39],["(comment",599],["(comment",5224]],"useCount":6722},{"word":"common","context":[["[frontend.components.common :as common]",98],["(:use [backtype.storm.daemon common])",97],["[metabase.api.common :refer :all]",84],["[onyx.log.commands.common :as common]",75],["[onyx.log.commands.common :as common]",75],[":quality :common",226],["(:use [overtone.sc.machinery.ugen common check]))",72],["[frontend.components.common :as common]",98],["(layout/common",150],["[:type :kale.common/fail]",186]],"useCount":3739},{"word":"comp","context":[["(sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))",72],["([comp coll]",73],["(let [comp (component \"simple-div.html\"",76],["(let [c (comp k (.-key t))]",142],["([keyfn comp coll]",72],["(garray/stableSort a (fn->comparator comp))",71],["t     (tree-map-add comp tree k v found)]",71],["(let [c (comp k (.-key tree))]",142],["(render-dom comp)))))",228],["(comp",473]],"useCount":4813},{"word":"comparator","context":[["boolean-valued comparison funcion, or a -/0/+ valued comparator.",102],["which (test (.. sc comparator (compare ek key)) 0) is true\"",142],["(garray/stableSort a (fn->comparator comp))",71],["(let [comp (-comparator sc)]",71],["(defn ^:private fn->comparator",71],["(-comparator [coll] (-comparator tree-map))",71],["\"Given a fn that might be boolean valued or a comparator,",72],["([comparator & keyvals]",72],["(sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))",72],["return a fn that is a comparator.\"",72]],"useCount":1688},{"word":"compare","context":[["which (test (.. sc comparator (compare ek key)) 0) is true\"",142],["Comp defaults to compare.\"",145],["(-compare [x y]",92],["(defn ^:private compare-indexed",71],["(let [d (compare (nth xs n) (nth ys n))]",71],["(defn- obj-map-compare-keys [a b]",71],["compare",72],["(sort-by keyfn compare coll))",72],["(if (= f compare)",72],["(sort compare coll))",73]],"useCount":2715},{"word":"compile","context":[[":prep-tasks [\"compile\" [\"cljsbuild\" \"once\"]]",90],["(are [x y] (= (-> x (compile nil) interpolate-sql) y)",70],["(-compile [this]",64],["(:refer-clojure :exclude [compile])",50],[":clean-targets ^{:protect false} [:target-path :compile-path \"resources/public/js\"]",50],[":prep-tasks [[\"cljx\" \"once\"] \"javac\" \"compile\"]",45],["(cljs/compile-modules)",42],[":prep-tasks [\"compile\" [\"cljsbuild\" \"once\" \"min\"]]",31],["(defn compile",32],["(gloss/compile-frame",34]],"useCount":1775},{"word":"compiled","context":[[":clean-targets ^{:protect false} [\"resources/public/js/compiled\" \"target\"]",153],["\"You likely have compiled class files lying around from an uberjar build. \"",123],["\"Returns an instance of RegExp which has compiled the provided string.\"",71],[":output-to \"resources/public/js/compiled/app.js\"",58],["^{:doc \"When compiled for a command-line target, whatever",54],[":asset-path           \"js/compiled/out\"",47],[":output-dir           \"resources/public/js/compiled/out\"",43],[":asset-path \"js/compiled/out\"",272],["[:h3 \"ClojureScript has not been compiled!\"]",156],[":output-dir \"resources/public/js/compiled/out\"",286]],"useCount":1736},{"word":"compiler","context":[[":compiler {:output-to            \"resources/public/js/app.js\"",108],[":compiler {:output-to     \"resources/public/js/app_test.js\"",110],["[:cljsbuild :builds :app :compiler :output-dir]",229],[":compiler {:output-to \"target/cljsbuild/public/js/app.js\"",79],["[:cljsbuild :builds :app :compiler :output-to]]",245],[":compiler {:output-to     \"resources/public/js/app.js\"",474],[":compiler {",802],["\" in order to start the compiler\"]])",86],[":compiler",1260],[":compiler {:output-to \"resources/public/js/app.js\"",95]],"useCount":5137},{"word":"compojure","context":[["[compojure \"1.3.1\"]",291],["[compojure.route :as route]",1585],["[compojure.handler :as handler]",712],["[compojure \"1.4.0\"]",648],["(:require [compojure.core :refer :all]",610],["[compojure.route :refer [resources]]",348],["[compojure.route :refer [not-found resources]]",351],["(:use compojure.core)",359],["[compojure.core :refer :all]",401],["[compojure \"1.1.6\"]",443]],"useCount":11987},{"word":"component","context":[["[com.stuartsierra.component :as component]",1190],["component/Lifecycle",1491],["[com.stuartsierra.component :as component]",1190],["(om/component",708],["(start [component]",659],["[com.stuartsierra.component :as component]))",265],["(component/system-map",292],["(stop [component]",571],["(:require [com.stuartsierra.component :as component]",648],["(:require [com.stuartsierra.component :as component]",648]],"useCount":15285},{"word":"concat","context":[["(concat",1455],["(apply concat)",332],["(concat",192],["(apply concat",418],["concat",117],["(concat (map first ss) (apply interleave (map rest ss))))))))",72],["(cat (concat x y) zs))))",72],["(concat (list",111],["(defn concat",74],["(apply concat)))",73]],"useCount":4733},{"word":"cond","context":[["(cond (nil? key-or-nil)",284],["(cond",17025],["(cond",7382],["(cond (== n 0) key",284],["(cond->",181],["(cond (nil? key-or-nil)  (.inode-lookup val-or-node (+ shift 5) hash key not-found)",71],["(cond (zero? c) (.replace tree tk v (.-left tree) (.-right tree))",71],["(cond (identical? n val-or-node) inode",142],["(cond (nil? k)    (if has-nil?",142],["(cond (< idx 0)              not-found",146]],"useCount":27820},{"word":"conf","context":[["(conf/master \"local[*]\")",85],["conf",62],["[conf]",152],["[conf context collector]",135],["(let [conf (:conf nimbus)",69],["(let [conf (-> (conf/spark-conf)",80],["(let [conf (-> (conf/spark-conf)",80],["(let [conf (-> (conf/spark-conf)",80],["(let [conf (:conf nimbus)",69],["[puppetlabs.puppetdb.config :as conf]",67]],"useCount":4343},{"word":"config","context":[["peer-config",255],["(apply gen-wrap-helper api-table kind item-id config args))",255],["(defmacro gen-wrap [kind item-id config & args]",255],[":config {:type :midi",256],[";(logging-config/set-logger! :level :debug)",276],[";(logging-config/set-logger! :level :info)",276],["[clj-logging-config.log4j :as logging-config]",278],["[clj-logging-config.log4j :as logging-config]",278],["(secretary/set-config! :prefix \"#\")",309],["[config]",731]],"useCount":18756},{"word":"conj","context":[["(-conj [node o] [key val o])",142],["(-conj [coll o] (cons o coll))",478],["(throw (js/Error. \"conj! after persistent!\"))))",143],["\"Returns a map that consists of the rest of the maps conj-ed onto",146],["(throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))",162],["(reduce -conj",162],["(-conj! [tcoll o]",213],["(-conj [coll entry]",292],["(-conj [coll o]",705],["(conj",371]],"useCount":9941},{"word":"conn","context":[["(def conn (d/connect uri))",73],["(let [db (d/db conn)",67],["([conn]",63],["conn)))",75],["(with-open [conn (db/connection)]",97],["(d/db conn)",103],["conn))",133],["[conn]",228],["conn",325],["(let [conn (d/connect uri)]",63]],"useCount":5947},{"word":"connect","context":[["(defn connect",45],["(connect",52],["(defn connect!",50],["(with-open [conn (r/connect)]",51],["(let [conn (d/connect uri)]",63],["(def conn (d/connect uri))",73],["(repl/connect \"http://localhost:9000/repl\")",78],["(weasel/connect \"ws://localhost:9001\" :verbose true :print #{:repl :console})",118],["(defn connect",163],["(weasel/connect \"ws://localhost:9001\" :verbose true)",237]],"useCount":2510},{"word":"connection","context":[["(with-open [conn (db/connection)]",97],["connection",187],["(with-transacted-connection db",127],["(with-connection s",87],["(jdbc/with-transacted-connection db",73],["(sql/with-connection (db/db-connection)",73],["(sql/with-connection (db/db-connection)",73],["(jdbc/with-db-connection *db*",72],["(with-connection s2",64],["(sql/with-connection db",138]],"useCount":3760},{"word":"cons","context":[["([a b args] (cons a (cons b args)))",73],["(-conj [coll o] (cons o coll))",478],["([a b c args] (cons a (cons b (cons c args))))",73],["([a b c args] (cons a (cons b (cons c args))))",73],["([a b c args] (cons a (cons b (cons c args))))",73],["([a b args] (cons a (cons b args)))",73],["(cons (first s1) (cons (first s2)",77],["(cons (first s1) (cons (first s2)",77],["(cons",341],["(cons o coll))",347]],"useCount":6444},{"word":"console","context":[["(enable-console-print!)",2743],["console objects.\"}",32],["(println \"Edits to this text should show up in your developer console.\")",35],["(defn enable-console-print!",62],["\"Set *print-fn* to console.log\"",62],["\"test/vendor/console-polyfill.js\"",64],["[lt.objs.console :as console]",101],["[lt.objs.console :as console]",101],["(weasel/connect \"ws://localhost:9001\" :verbose true :print #{:repl :console})",118],["(.apply (.-log js/console) js/console (into-array args)))))",29]],"useCount":4096},{"word":"container","context":[["[:div {:class \"container\"}",150],["[:div.container-fluid",49],["(l/container",45],["] ; </div class=\"container\">",33],["(dom/div #js {:className \"container\"}",58],["[:section.container",81],["[:div.container-fluid",96],["[:div.container",351],["[:div {:class \"container\"}",49],["[:div.container",333]],"useCount":2354},{"word":"contains","context":[[":relationship :contains}",84],["(is (contains-error? errors",117],["(-contains-key? [coll k]",290],["(every? #(contains? coll %)",142],["contains val at index.\"",72],["applying f to that result and the 2nd item, etc. If coll contains no",72],["same (hashed/sorted) type, that contains the mapping of key(s) to",72],["(if (contains? m k)",74],["(contains?",75],["(contains? coll k))",328]],"useCount":5276},{"word":"content","context":[[":content nil}",153],[":content",2361],["({:tag :br, :attrs nil, :content nil}",5208],["{:tag :br, :attrs nil, :content nil})}",789],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419],[":content nil})}",265],[":content \"width=device-width, initial-scale=1\"}]",254],[":content",170],[":content-type :json",233],["{:tag :br, :attrs nil, :content nil}",23688]],"useCount":44100},{"word":"context","context":[["(init [this context]",242],["[context]",284],["(stop [this context]",121],["(fn [context]",231],["context))",227],["context)",203],["context",150],["[target message status {:keys [resp context]} state]",143],["[conf context collector]",135],["(start [this context]",124]],"useCount":9919},{"word":"copy","context":[["(defn- array-copy",71],[";; rather than having its own copy. When the root binding",374],["(array-copy arr 0 new-arr 0 len)",144],["(array-copy earr (* 2 (inc i))",71],["(array-copy-downward earr (* 2 idx)",71],["(array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))",142],["(array-copy arr 0 new-arr 0 (* 2 idx))",142],[";; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100],["(array-copy arr 0 new-arr 0 (* 2 cnt))",73],["(defn- array-copy-downward",71]],"useCount":2402},{"word":"core","context":[[":onyx/medium :core.async",852],["[cheshire.core :as json]",1049],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["(core/init!)",724],["[schema.core :as s]",1295],["[environ.core :refer [env]]",1535],["[clj-time.core :as t]",769],["[om.core :as om :include-macros true]",821],["[org.clojure/core.async \"0.1.346.0-17112a-alpha\"]",840],["(:require [om.core :as om :include-macros true]",1040]],"useCount":80279},{"word":"corp","context":[[":events {:corp-turn-begins ability}",43],["(take-credits state :corp)",1179],["(new-game (default-corp)",277],["(prompt-choice :corp \"Yes\")",78],["{:derezzed-events {:runner-turn-ends corp-rez-toast}",69],["(play-from-hand state :corp \"Ice Wall\" \"HQ\")",67],["(take-credits state :corp 2)",53],["(play-from-hand state :corp \"Hedge Fund\")",52],["(prompt-choice :corp 0)",49],["(play-from-hand state :corp \"Launch Campaign\" \"New remote\")",46]],"useCount":3109},{"word":"count","context":[["(-count [coll]",284],["ndx3 (range (inc ndx2) (count xs))",9728],["ndx2 (range (inc ndx1) (- (count xs) 1))",9728],["(for [ndx0 (range 0          (- (count xs) 3))",9728],["ndx1 (range (inc ndx0) (- (count xs) 2))",9728],["(count",302],["(-lastIndexOf coll x (count coll)))",299],["size (count c)",355],["(ql/aggregation (ql/count))",293],["(-count [coll] cnt)",287]],"useCount":59552},{"word":"counter","context":[["(test-stream (counter)",32],["(test-stream (counter 100)",32],["process-counter (call-counter)]",32],["process-counter (call-counter)]",32],["(def counter (atom 0))",42],["(let [counter (atom 0)",49],["(let [counter (atom 0)]",49],["(defn counter",50],["(def count-records (templates.model/make-counter       collection-name))",55],["(swap! counter inc)",87]],"useCount":1541},{"word":"cpu","context":[["(set-reg cpu-state :X  0x01)",88],["(is (= 0xA4 (get-reg cpu-state :P)))))",50],["(set-reg cpu-state :Y  0x01)",46],["(is (= 0x26 (get-reg cpu-state :P)))))",43],["(set-reg cpu-state :A  0x00)",40],["(set-reg cpu-state :PC 0x400)",308],["(is (= 0x00 (get-reg cpu-state :A)))",68],["(run-single cpu-state)",307],["cpu-state (new-cpu-state mem-map)]",308],["cpu-state (new-cpu-state mem-map)]",308]],"useCount":2038},{"word":"create","context":[[":on-create",97],["(create",93],["[onyx.log.entry :refer [create-log-entry]]",100],["(defn create",326],["(d/create-database uri)",179],["(sql/create-table-ddl",162],["(r/create-class",161],["(reagent/create-class",153],["(create-inode-seq arr))",142],[";; inputs is either a list or a function that, when called, will create a",113]],"useCount":8442},{"word":"credits","context":[["(take-credits state :runner 1)",12],[":label \"Take all credits\"",15],["(take-credits state :runner 2)",16],["(take-credits state :corp 1)",30],["(take-credits state :runner 3)",38],["(take-credits state :runner)",476],["(take-credits state :corp)",1179],["(take-credits state :corp 2)",53]],"useCount":1819},{"word":"csr","context":[["csr-stream :- InputStream",26],["(validate-csr-signature! csr)",26],["csr :- CertificateRequest",26],["[cert-or-csr :- (schema/either Certificate CertificateRequest)",26],["(validate-csr-signature! csr)",26],["[csr :- CertificateRequest]",28],["(autosign-csr? executable \"test-agent\" (csr-fn) ruby-load-path)",35],["csr  (io/input-stream (test-pem-file csr-file))]",44],["csr  (io/input-stream (test-pem-file csr-file))]",44],["(autosign-csr? executable \"test-agent\" (csr-fn) ruby-load-path)",35]],"useCount":2834},{"word":"css","context":[[":css-dirs [\"resources/public/css\"]",456],[":css-dirs [\"resources/public/css\"]",456],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],[":css-dirs [\"resources/public/css\"]}",235],["[hiccup.page :refer [include-js include-css]]",206],["(include-css (if (env :dev) \"css/site.css\" \"css/site.min.css\"))]",147],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],[":css-dirs [\"resources/public/css\"]}",235]],"useCount":6519},{"word":"csv","context":[["[org.clojure/data.csv \"0.1.2\"]",166],["[clojure.data.csv :as csv]",198],["[clojure.data.csv :as csv]",198],["[clojure-csv.core :as csv]",51],["(:require [clojure.data.csv :as csv]",97],["(:require [clojure.data.csv :as csv]",97],["[org.clojure/data.csv \"0.1.3\"]",85],["[clojure-csv/clojure-csv \"2.0.1\"]",66],["[clojure-csv.core :as csv]",51],["[clojure-csv/clojure-csv \"2.0.1\"]",66]],"useCount":1773},{"word":"ctx","context":[["[ctx]",496],["(fn [ctx]",353],[":handle-ok (fn [ctx]",220],["ctx",184],[":exists? (fn [ctx]",170],[":post! (fn [ctx]",120],["[lt.objs.context :as ctx]",97],["out-ctx (pipeline/run-pipeline ctx)",79],["ctx))",80],["(with-testing-data [ctx testing-data]",96]],"useCount":4934},{"word":"current","context":[["\"Shuts down and destroys the current development system.\"",72],["(accountant/dispatch-current!)",94],["(defn current-page []",279],["[:div [(session/get :current-page)]])",223],["(reagent/render [current-page] (.getElementById js/document \"app\")))",211],["(session/put! :current-page #'home-page))",176],["(session/put! :current-page #'about-page))",124],["current value. Returns newval.\"",107],[":current-user current-user",97],[":current-user current-user",97]],"useCount":6332},{"word":"cursor","context":[["([f cursor m]",26],["(throw (js/Error. (str \"Cannot deref cursor during render phase: \" this)))))",28],["cursor",38],["_cursor &/cursor]",46],["(if (cursor? other)",59],["[cursor owner]",68],["[cursor]",25],["(let [pos (editor/->cursor ed)",30],["(defn cursor",34],["(:require [reagent.core :refer [atom cursor]]",35]],"useCount":1947},{"word":"d","context":[["[n d]",289],["(d/create-database uri)",179],["[manifold.deferred :as d]",176],["[datascript.core :as d]",127],["\"d\" {\"n\" \"\"}",123],["[datomic.api :as d]))",122],["{:db/id (d/tempid :db.part/db)",329],["{:db/id (d/tempid :db.part/user)",241],["(:require [datomic.api :as d]",204],["[datomic.api :as d]",451]],"useCount":19535},{"word":"data","context":[["data",300],["[clojure.data.json :as json]",1158],["[data]",769],["[org.clojure/data.json \"0.2.6\"]",474],["(:require [clojure.data.json :as json]",334],["[clojure.data.json :as json]))",292],["[org.clojure/data.json \"0.2.5\"]",292],["data))",232],["(->files data",225],["(def test-data",212]],"useCount":24369},{"word":"database","context":[["[database :refer [Database]]",64],["(d/create-database uri)",179],[":db_id  database-id",62],["(tu/with-temp Database [{database-id :id} {:name      \"Hillbilly\"",46],[":database \"foo\"}))",41],["(d/create-database db-uri)",40],["(tu/with-temp* [Database [{database-id :id}]",83],["(metabase.models [database :refer [Database]]",78],["(d/delete-database uri)",72],["[database]",66]],"useCount":3331},{"word":"date","context":[["(add-catalog! catalog nil old-date)",32],["[date]",156],[";; TODO: we should remove this and handle date equality checking",68],["[date]",46],["(result-set-read-column [v _ _] (to-date v))",44],["old-date (-> 2 days ago)",40],["(defn format-date",39],[":date date",36],[":date date",36],["(defn parse-date",33]],"useCount":2360},{"word":"datetime","context":[["[frontend.datetime :as datetime]",63],["(datetime 2013 2 13)",35],["(datetime 2013 2 13 :day-of-week 3)",37],["(datetime 2013 2 18 :day-of-week 1 :day 18 :month 2)",37],["(datetime 2013 2 18 :day-of-week 1)",38],["(datetime 2013 3)",45],["(datetime 2013 2 19 :day-of-week 2)",49],["(datetime 2013 2 19)",49],["(datetime 2013 2 14)",62],["[frontend.datetime :as datetime]",63]],"useCount":3074},{"word":"datomic","context":[["(:require [datomic.api :as d]",204],["(:require [datomic.api :as d])",29],["(:import datomic.Util))",39],["[pc.datomic :as pcd]",42],[":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"",46],[":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"",46],["[datomic-toolbox.core :as db]",49],["(:require [datomic.api :as d]))",112],["[datomic.api :as d]))",122],["[datomic.api :as d]",451]],"useCount":1656},{"word":"day","context":[["\"named-day\"",182],["(datetime 2013 2 19 :day-of-week 2)",49],[":grain :day}",41],[":form :part-of-day) ; no :latent",39],["(datetime 2013 2 18 :day-of-week 1)",38],["(datetime 2013 2 18 :day-of-week 1 :day 18 :month 2)",37],["(datetime 2013 2 18 :day-of-week 1 :day 18 :month 2)",37],["(assoc (intersect (cycle-nth :day 0)",37],["(datetime 2013 2 13 :day-of-week 3)",37],["(intersect %1 (day-of-month (:value %2)))",35]],"useCount":3551},{"word":"db","context":[[":db/valueType :db.type/string",872],["{:db/id #db/id[:db.part/db]",2316],["{:db/id #db/id[:db.part/db]",2316],[":db/cardinality :db.cardinality/one",2655],[":db/cardinality :db.cardinality/one",2655],[":db.install/_attribute :db.part/db}",2837],[":db.install/_attribute :db.part/db}",2837],["{:db/id #db/id[:db.part/db]",2316],["{:db/id #db/id[:db.part/db]",2316],[":db.install/_attribute :db.part/db}",2837]],"useCount":60641},{"word":"debug","context":[["(debug-println r)",231],[";(logging-config/set-logger! :level :debug)",276],[";(debug/debug-ns *ns*)",274],[":ignore-log-priority [:debug :verbose]",62],["[logbug.debug :as debug :refer [I> I>> identity-with-logging]]",83],["[logbug.debug :as debug]",190],[";(debug/debug-ns *ns*)",274],["* body-debug (Phaser.Physics.P2.BodyDebug) - Targeted instance for method",58],["[logbug.debug :as debug]",190],["[logbug.debug :as debug :refer [I> I>> identity-with-logging]]",83]],"useCount":3915},{"word":"dec","context":[["(set! (.-cnt editable) (dec (.-cnt editable)))",142],["(bit-count (bit-and bitmap (dec bit))))",73],["(set! count (dec count)))",73],["(-nth coll (dec cnt))))",72],["(recur (dec n) (next coll)))))",72],["(recur (dec n) (rest s))",72],["(defn dec",72],["(recur (dec i) (-conj r (aget arr (dec i))))",71],["(PersistentVector. meta (dec cnt) shift root (.slice tail 0 -1) nil)",71],["subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt pv)) level) 0x01f)]",71]],"useCount":5115},{"word":"declare","context":[["(declare to-array)",71],["(declare create-inode-seq create-array-node-seq reset! create-node atom deref)",71],["(declare TransientArrayMap)",71],["(declare key)",71],["(declare reduce)",71],["(declare RedNode BlackNode)",71],["(declare TransientHashMap)",74],["(:refer-clojure :only [defmacro defn apply declare meta let partial])",254],["(declare api-table)",255],["(declare gen-call)",255]],"useCount":3982},{"word":"def","context":[["(def handler",248],["(def inject-devmode-html",246],["(def is-dev? (env :is-dev))",250],["(def api-table",255],["(def gen-call (partial gen-call-helper api-table))",255],["(def http-handler",344],["(def cli-options",477],["(def",763],["(def",817],["(def app",1560]],"useCount":25686},{"word":"default","context":[["(catch :default e",334],[";; :server-port 3449 ;; default",103],[":default 1",121],[":default 0.0",170],["(extend-type default",200],[":default 0",227],[":default",471],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["(default-runner))",377],["(new-game (default-corp)",277]],"useCount":11167},{"word":"defaults","context":[["[ring.middleware.defaults :refer [wrap-defaults api-defaults]]",210],["[ring.middleware.defaults :refer [wrap-defaults site-defaults]]",203],["[ring.middleware.defaults :refer [wrap-defaults site-defaults]]",203],["[ring.middleware.defaults :refer [wrap-defaults api-defaults]]",210],["[ring.middleware.defaults :refer [wrap-defaults api-defaults]]",210],["[ring.middleware.defaults :refer [site-defaults wrap-defaults]]",351],["[ring.middleware.defaults :refer [site-defaults wrap-defaults]]",351],["[ring.middleware.defaults :refer [wrap-defaults site-defaults]]",203],["[ring.middleware.defaults :refer [site-defaults wrap-defaults]]",351],["[ring/ring-defaults \"0.1.5\"]",480]],"useCount":8094},{"word":"defmacro","context":[["(defmacro code-critic",29],["(defmacro with-context",30],["(defmacro should-fail [body]",32],["(defmacro where",33],["(defmacro with-err-str",34],["(defmacro dbg[x] `(let [x# ~x] (println \"dbg:\" '~x \"=\" x#) x#))",36],["(defmacro",137],["(:refer-clojure :only [defmacro defn apply declare meta let partial])",254],["(defmacro tap-all-events",255],["(defmacro gen-wrap [kind item-id config & args]",255]],"useCount":3326},{"word":"defn","context":[["(defn -main",4140],["(schema/defn ^:always-validate",797],["(defn start",543],["(defn init",550],["(defn browser-repl []",574],["(defn setup []",743],["(defn foo",963],["(defn",1121],["(defn -main []",1199],["(defn -main [& args]",2785]],"useCount":137894},{"word":"defonce","context":[["(defonce server (atom nil))",558],["(defonce http-server (atom nil))",29],["(defonce nrepl-server (atom nil))",48],["(defonce app-state (atom {:text \"Hello Chestnut!\"}))",48],["(defonce server",51],["(defonce ^{:private true",62],["(defonce",97],["(defonce app-state",111],["(defonce ^:private server",147],["(defonce",155]],"useCount":1871},{"word":"defprotocol","context":[["(defprotocol IMultiFn",72],["(defprotocol IReversible",72],["(defprotocol IFn",72],["(defprotocol ISeq",72],["(defprotocol IWatchable",72],["(defprotocol IMap",72],["(defprotocol IIndexed",72],["(defprotocol ISet",72],["(defprotocol ICounted",72],["(defprotocol IMeta",72]],"useCount":4457},{"word":"defroutes","context":[["[compojure.core :refer [GET defroutes]]",273],["(:require [compojure.core :refer [GET defroutes]]",257],["(defroutes app",284],["(defroutes app-routes",937],["(defroutes main-routes",206],["(defroutes home-routes",195],["[compojure.core :refer [defroutes GET]]",135],["(defroutes api-routes",111],["(defroutes handler",95],["(defroutes routes",1101]],"useCount":5015},{"word":"deftest","context":[["(deftest test-solution",196],["(deftest test-app",417],["(deftest replace-me ;; FIXME: write",110],["(deftest",133],["(deftest example-passing-test",147],["(deftest example-passing-test",153],["(:require-macros [cljs.test :refer (is deftest testing)])",165],["(deftest test-asserts",166],["(:require [clojure.test :refer [deftest is]]",250],["(deftest a-test",5652]],"useCount":13400},{"word":"deftype","context":[["(deftype Atom [state meta validator watches]",72],["(deftype PersistentQueueSeq [meta front rear ^:mutable __hash]",71],["(deftype PersistentTreeMap [comp tree cnt meta ^:mutable __hash]",71],["(deftype VectorNode [edit arr])",71],["(deftype ObjMap [meta keys strobj update-count ^:mutable __hash]",71],["(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]",71],["(deftype Box [^:mutable val])",72],["(deftype EmptyList [meta]",72],["(deftype TransientHashMap [^:mutable ^boolean edit",73],["(deftype HashCollisionNode [edit",73]],"useCount":4610},{"word":"del","context":[["(defn- balance-left-del [key val del right]",71],["(if (or (not (nil? del)) (not (nil? (aget found 0))))",142],["(remove-right [node del]",142],["(instance? RedNode del)",142],["(remove-left [node del]",142],["(balance-left key val (.redden left) del)",71],["(defn- balance-left-del [key val del right]",71],["(RedNode. key val del right nil))",71],["(RedNode. key val left (.blacken del) nil)",71],["(RedNode. key val (.blacken del) right nil)",71]],"useCount":2424},{"word":"delete","context":[["(defn delete!",64],["(defn delete [id]",55],["(def delete        (templates.model/make-deleter       collection-name))",55],[":delete",42],["(cljs.core/js-delete obj key))",69],["(js-delete new-strobj k)",71],["(d/delete-database uri)",72],[":origin \"+delete\"},",98],["(defn delete",243],["(let [response (http-client/delete",74]],"useCount":4184},{"word":"dependencies","context":[[":dependencies [[org.clojure/clojure \"1.6.0\"]])",596],[":dependencies [[org.clojure/clojure \"1.7.0\"]]",393],[":dependencies [[org.clojure/clojure \"1.5.1\"]]",436],[":dependencies [[org.clojure/clojure \"1.5.1\"]])",516],[":dependencies [",749],[":dependencies [[org.clojure/clojure \"1.6.0\"]]",816],[":dependencies [[org.clojure/clojure \"1.8.0\"]",1438],[":dependencies [[org.clojure/clojure \"1.7.0\"]",2637],[":dependencies [[org.clojure/clojure \"1.5.1\"]",2677],[":dependencies [[org.clojure/clojure \"1.6.0\"]",4608]],"useCount":20660},{"word":"deref","context":[["deref",172],["(is (= (deref r)",94],["(deref x)",74],["(-deref [this]",114],["(is (= nil (:state (deref r))))",76],["(deref [_]",76],["(-deref [_]",85],["(is (= \"foo\" (:service (deref r))))",90],["(-deref [_] state)",73],["(-deref [o] val))",72]],"useCount":3492},{"word":"description","context":[["{:description",99],["{:description     nil",102],[":description \"FIXME: write description\"",7708],[":description",351],[":description \"FIXME: write this!\"",303],[":description nil",158],[":description description",112],[":description description",112],[":description \"\"",107],[":description \"FIXME: write description\"",7708]],"useCount":19312},{"word":"dev","context":[["(def is-dev? (env :is-dev))",250],[":env {:is-dev true}",226],["(def is-dev? (env :is-dev))",250],["(set-attr :class \"is-dev\")",244],["(if is-dev?",236],[":cljsbuild {:builds {:app {:source-paths [\"env/dev/cljs\"]",304],[":source-paths [\"env/dev/clj\"]",350],[":profiles {:dev",332],[":dev",251],["{:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",259]],"useCount":11040},{"word":"diff","context":[["rep-diff (partial extensions/replica-diff entry)",58],["rep-diff (partial extensions/replica-diff entry)",58],["(test-diff",288],["[clojure.data :refer [diff]]",122],["diff (rep-diff old-replica new-replica)",66],["diff (rep-diff old-replica new-replica)",66],["(defn diff",50],["[{:keys [args]} old new diff state]",37],["diff (rep-diff old-replica new-replica)]",34],["diff (rep-diff old-replica new-replica)]",34]],"useCount":1642},{"word":"dim","context":[["{:dim :ordinal",80],["(let [dim-x (.dim ^Vector x)]",32],["(let [dim-x (.dim ^Vector x)]",32],["(if (< i dim-x)",33],["[(dim :time #(not (:latent %))) (dim :time #(not (:latent %)))] ; sequence of two tokens with a time dimension",27],["{:dim :duration",88],["{:dim :unit",105],["{:dim :unit-of-duration",140],["{:dim :cycle",159],["{:dim :number",455]],"useCount":1895},{"word":"dir","context":[[":output-dir \"out\"",320],[":output-dir           \"resources/public/js/out\"",122],["(is (empty? (fs/list-dir discard-dir)))",157],["(is (empty? (fs/list-dir discard-dir)))",157],["[:cljsbuild :builds :app :compiler :output-dir]",229],["[dir]",242],[":output-dir \"resources/public/js/out\"",249],[":output-dir \"resources/public/js/compiled/out\"",286],["(test-msg-handler command publish discard-dir",388],[":output-dir    \"resources/public/js/out\"",503]],"useCount":7993},{"word":"discard","context":[["(= (:zone %) [:discard]))}",31],["(is (empty? (fs/list-dir discard-dir))))))",101],["(is (empty? (fs/list-dir discard-dir)))",157],["(assoc card :zone '(:discard))))",30],["(test-msg-handler command publish discard-dir",388],["(is (empty? (fs/list-dir discard-dir)))))))",60],["(is (empty? (fs/list-dir discard-dir))))))))",57],[":show-discard true",56],["(test-msg-handler command-2 publish discard-dir",44],["(test-msg-handler command-1 publish discard-dir",44]],"useCount":1701},{"word":"dispatch","context":[["(swap! method-table dissoc dispatch-val)",71],["dispatch-val-y))))",71],["\"' match dispatch value: \" dispatch-val \" -> \" k",71],["[multifn dispatch-val] (-get-method multifn dispatch-val))",71],["\"Given a multimethod and a dispatch value, returns the dispatch fn",71],["target-fn (-get-method mf dispatch-val)]",1175],["(throw-no-method-error name dispatch-val))",1157],["(find-and-cache-best-method name dispatch-val hierarchy method-table prefer-table",71],["(accountant/dispatch-current!)",94],["(secretary/dispatch! (.-token event))))",258]],"useCount":10597},{"word":"display","context":[["display-map (assoc display-map \":all-time\" (fn [_] \"All time\"))]",39],[":let [disp ((display-map k) k)]]",39],["display-map (into {} (for [t times] [t pretty-uptime-sec]))",39],["(clj->phaser display-object)",40],[":display                :table",60],["display-map (assoc display-map \":all-time\" (fn [_] \"All time\"))]",39],[":heads-up-display false",37],["(display-name [_]",81],["\"border:1px solid #808080;padding:5px;background-color:#EBEFF2;display:none\",",174],[";; To be able to open files in your editor from the heads up display",183]],"useCount":1804},{"word":"dissoc","context":[["(-dissoc [coll k]",291],["(throw (js/Error. \"dissoc! after persistent!\")))))",72],["(dissoc m k)))",137],["(dissoc :latent)",81],["(throw (js/Error. \"dissoc! after persistent!\"))))",73],["(defn dissoc",74],["(set! (.-watches this) (dissoc watches key)))",77],["(defn dissoc-in",77],["\"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,",73],["(-dissoc! [tcoll key] (.without! tcoll key)))",73]],"useCount":3465},{"word":"distribution","context":[[";   which can be found in the file epl-v10.html at the root of this distribution.",300],[":distribution :repo}",299],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";;;    documentation and/or other materials provided with the distribution.",182],[";  which accompanies this distribution, and is available at",131],[":distribution :repo",125],[";;    documentation and/or other materials provided with the distribution.",94],[";; which can be found in the file COPYING at the root of this distribution.",90],[";;   and/or other materials provided with the distribution.",85],[";;   which can be found in the file epl-v10.html at the root of this distribution.",41]],"useCount":2033},{"word":"div","context":[["[:div.container",333],["[:div.row",914],["(dom/div",815],["(dom/div nil",763],["[:div.form-group",529],["[:div.row",510],["{:tag :div,",489],["[:div.container",351],["[:div",3604],["[:div",1098]],"useCount":21815},{"word":"do","context":[["(do ~@body)",167],["(do",5695],[":else (do",150],["(jdbc/do-commands",229],["(sql/do-commands",510],["\"I don't do a whole lot.\"",984],["\"I don't do a whole lot ... yet.\"",1040],["(do-game",1146],["`(do",1381],["(do",16664]],"useCount":37125},{"word":"doall","context":[["(doall (map thisfn x))",75],["errors (doall",77],["doall",79],["doall)))",87],["(doall",273],["(doall",1489],["element in the seq do not occur until the seq is consumed. doall can",72],["(defn doall",72],["doall))",49],["(doall (map",44]],"useCount":2855},{"word":"doc","context":[["[doc]",89],[":onyx/doc \"Writes segments to a core.async channel\"}]))",99],[":onyx/doc \"Reads segments from a core.async channel\"}",389],[":doc \"\"}",210],[":onyx/doc \"Writes segments to a core.async channel\"}]",161],[":onyx/doc \"core.async plugin base lifecycle\"}",131],["(defcard-doc",127],["{:doc/format :markdown}",112],[":onyx/doc \"Injects the core.async writer channel\"}",111],[":onyx/doc \"Injects the core.async reader channel\"}",106]],"useCount":5532},{"word":"document","context":[["body    (.-body js/document)",58],["(reagent/render [current-page] (.getElementById js/document \"app\")))",211],["{:target (. js/document (getElementById \"app\"))}))",167],["{:target (. js/document (getElementById \"app\"))})",137],["(.getElementById js/document \"app\")))",135],["(.getElementById js/document id))",64],["[clojurewerkz.elastisch.rest.document :as esd]",61],["(.removeChild (.-body js/document) div)))))",60],["(let [doc     js/document",58],["(def isClient (not (nil? (try (.-document js/window)",58]],"useCount":2297},{"word":"dom","context":[["[om.dom :as dom]",269],["[om.dom :as dom :include-macros true]))",232],["[om.dom :as dom :include-macros true]))",232],["(dom/button",205],["(render-dom comp)))))",228],["(dom/div",815],["(dom/div nil",763],["[om.dom :as dom]",269],["[om.dom :as dom :include-macros true]",714],["[om.dom :as dom :include-macros true]",714]],"useCount":10325},{"word":"domain","context":[["facts3 {\"domain\" \"testing.com\"",43],[";; A list of data domains for the problem. Each domain is a vector containing",100],["\"domain\" \"testing.com\"",78],["[jiksnu.actions.domain-actions :as actions.domain]",57],["[jiksnu.actions.domain-actions :as actions.domain]",57],["[domain]",62],["[jiksnu.model.domain :as model.domain]",45],["facts2 {\"domain\" \"testing.com\"",54],["(let [facts1 {\"domain\" \"testing.com\"",49],["[jiksnu.model.domain :as model.domain]",45]],"useCount":1895},{"word":"don","context":[[";; if you don't configure a :jsload-callback or an :on-jsload callback",22],[";; don't need to worry about laziness gotchas.",22],["; timescales are likely to have undefined ordering *anyway*, I don't",27],["\"I don't do a whole lot ... yet.\"",1040],["\"I don't do a whole lot.\"",984],[";; matching Clojure's stable sort, though docs don't promise it",72],["@param {...*} var_args\" ;;array is a special case, don't emulate this doc string",72],[";; We assume that all endpoints for a given context are enforced by the same middleware, so we don't run the same",32],[";; don't do this, instead we do the opposite, running figwheel from",50],[";; merging. So don't put a :figwheel section under the :dev profile, it will",49]],"useCount":2612},{"word":"done","context":[["(async done",212],[";; Use M-x 4clojure-check-answers when you're done!",228],["#js {:value nil :done true})))",153],["(notifos/done-working)",152],["(done))))",115],["(done)))))",89],["(let [done (async/chan)",82],[":done)",81],["trimming is done.\"",72],[":done))",70]],"useCount":3074},{"word":"doseq","context":[["(doseq [[i error] (map vector",105],["(doseq [event events]",86],["(doseq [[key f] watches]",84],["(doseq [[i case] (map vector (range) test-cases)]",80],["(doseq [[i case] (map vector (range) train-cases)]",80],["(doseq [[k v] coll]",268],["(doseq [e events] (s e))",130],["(doseq [v-peer v-peers]",113],["(doseq [line (line-seq rdr)]",90],["(doseq",95]],"useCount":6580},{"word":"dosync","context":[["(dosync",2667],["(fn [e] (dosync (alter output conj e))))",70],["(mc-dosync",32],["(dosync (commute c + (:metric e))))))))",30],["(let [events (dosync",28],["(let [m (dosync",28],["(let [[first-time value] (dosync",25],["(let [windows (dosync",25],["(fn [e] (dosync (alter r conj e))))",20],["s (with :service \"foo\" (fn [e] (dosync (ref-set r e))))]",18]],"useCount":3069},{"word":"dotimes","context":[["(dotimes [_ 10]",42],["(dotimes [i n]",125],["(dotimes [i 10]",73],["(dotimes [k (.getSize stack)]",67],["(dotimes [i len]",126],["(dotimes [i size]",645],["(dotimes [n 10]",63],["(dotimes [i (alength iters)]",49],["(dotimes [i (/ total threads)]",48],["(dotimes [i amount]",47]],"useCount":2230},{"word":"doto","context":[["(doto g",111],["(doto writer",126],["(doto frame",128],["(doto (aclone arr)",146],["(doto",252],["(doto (History.)",265],["(doto (PGobject.)",74],["(doto arr .pop .pop)",71],["(let [arr (doto (aclone arr)",69],[":let [_ (doto *writer*",67]],"useCount":3127},{"word":"down","context":[["(defn down",28],[":on-key-down #(case (.-which %)",30],["z/down",38],["[:midi :key :down]",38],[":on-key-down",39],["zip/down",50],["(defn down []",51],["shuts down, put any clean up code here\"",121],["\"Shuts down and destroys the current development system.\"",72],["(move-down)",54]],"useCount":1436},{"word":"draw","context":[[":draw draw",408],[":draw draw",45],[":draw draw",408],["(defn draw []",327],["(defn draw [state]",132],["(defn draw",119],[":draw draw-state",107],[":draw draw-state",107],["(defn draw-state [state]",86],[":draw draw",45]],"useCount":2531},{"word":"drop","context":[["(ChunkedCons. (-drop-first chunk) more meta nil)",137],["(cons (take n s) (partition-all n step (drop step s)))))))",71],["([n s] (map (fn [x _] x) s (drop n s))))",71],["\"Returns a vector of [(take-while pred coll) (drop-while pred coll)]\"",71],["(throw (js/Error. \"-drop-first of empty chunk\"))",71],["(defn drop",72],["(cons p (partition n step pad (drop step s)))",72],["(defn drop-while",75],["(drop 1)",77],["(-drop-first [coll]",103]],"useCount":2521},{"word":"dt","context":[["(let [diff (/ (- m (:metric prev-event)) dt)]",27],["dt",103],["[n dt & children]",67],[":dt 0}",50],["[dt satisfied? tolerated? & children]",48],["dt)]",28],["(when-not (zero? dt)",29],["(let [dt (getdata json)]",38],["[dt]",36],["(if-let [dt (to-date-time obj)]",30]],"useCount":1613},{"word":"dynamic","context":[["(def ^:dynamic *print-dup* false)",37],["^{:dynamic true",328],["(def ^:dynamic *flush-on-newline* true)",37],["(def ^:dynamic",49],[":dynamic true}",50],["(declare ^:dynamic *app-context*)",51],["(def ^:dynamic",70],[":dynamic true}",80],["Strings which should be printed.\" :dynamic true}",90],["(def ^{:dynamic true",103]],"useCount":1863},{"word":"e","context":[["(catch js/Error e",337],["(.printStackTrace e)",259],["(if (identical? e edit)",284],["(catch :default e",334],["(fn [e]",335],["(catch Exception e",4907],["(catch Throwable e",1007],["(fn [e]",916],["[e]",437],["(.preventDefault e)",462]],"useCount":37965},{"word":"each","context":[["f on each element. The value at each key will be a vector of the",71],["; Define error function. For now, each run uses different random inputs",80],["(use-fixtures :each with-test-db with-http-app)",82],["returns a vector containing the result of applying each fn to the",71],["(use-fixtures :each with-test-db)",88],["set of first items of each coll, followed by applying f to the set",93],["of second items in each coll, until any one of the colls is",97],["(use-fixtures :each",138],["\"Returns a lazy seq of the first item in each coll, then the second etc.\"",72],["\"Returns a lazy sequence of lists of n items each, at offsets step",72]],"useCount":3953},{"word":"eclipse","context":[[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],["; http://www.eclipse.org/legal/epl-v10.html                                   :",17],["(org.eclipse.jetty.server.handler AbstractHandler)",19],[";* http://www.eclipse.org/legal/epl-v10.html",23],["(:import (org.eclipse.swt SWT)",27],["; http://www.eclipse.org/legal/epl-v10.html",31],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"",34],[":url \"http://www.eclipse.org/legal/epl-v10.html\"",128],[";  http://www.eclipse.org/legal/epl-v10.html",131]],"useCount":13359},{"word":"ed","context":[["(when-let [ed (last-active)]",253],["ed)",37],["(when-let [ed (pool/last-active)]",248],["\"Returns a map that consists of the rest of the maps conj-ed onto",146],[":reaction (fn [ed]",76],["; to store the value in strobj.  If a key is assoc'ed when that same",71],["; non-string key is assoc'ed, return a HashMap object instead.",71],["[lt.objs.editor :as ed]",50],["(let [ed (pool/last-active)",47],["(object/raise ed",40]],"useCount":1824},{"word":"edit","context":[["(if ^boolean (.-edit root)",431],["(if edit",365],["(if (identical? e edit)",284],["(let [editable (.ensure-editable inode edit)]",213],["(inode-assoc! [inode edit shift hash key val added-leaf?]",213],["(inode-without! [inode edit shift hash key removed-leaf?]",213],["(edit-and-set inode edit idx n))))))",142],["(edit-and-set inode edit idx n))))))",142],["(let [editable (.ensure-editable inode edit)",142],["(deftype TransientHashMap [^:mutable ^boolean edit",73]],"useCount":7242},{"word":"editable","context":[["editable)",213],["(set! (.-cnt editable) (dec (.-cnt editable)))",142],["(set! (.-cnt editable) (dec (.-cnt editable)))",142],["(ensure-editable [inode e]",213],["(let [editable (.ensure-editable inode edit)]",213],["(let [editable (.ensure-editable inode edit)]",213],["(set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))",142],["(set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))",142],["(aset (.-arr editable) i a)",142],["(if editable?",433]],"useCount":5156},{"word":"editor","context":[["[lt.objs.editor :as ed]",50],[";; To be able to open files in your editor from the heads up display",183],["[lt.objs.editor.pool :as pool]",180],["[lt.objs.editor :as editor]",150],["[lt.objs.editor :as editor]",150],["[editor]",41],[":reaction (fn [editor]",117],["{:pre [(valid-editor? editor)]}",81],[":reaction (fn [editor res]",46],["{:pre [(valid-editor? editor)]}",81]],"useCount":1674},{"word":"edn","context":[["[clojure.edn :as edn]))",145],["[clojure.edn :as edn])",74],[":headers {\"Content-Type\" \"application/edn\"}",82],["[clojure.tools.reader.edn :as edn]",87],["[clojure.tools.reader.edn :as edn]",87],["[clojure.edn :as edn]))",145],["(:require [clojure.edn :as edn]",244],["[clojure.edn :as edn]",645],["[clojure.edn :as edn]",645],["(:require [clojure.edn :as edn]",244]],"useCount":3763},{"word":"effect","context":[[":effect (effect (resolve-ability",64],["side-effect-free fn of one argument, which will be passed the intended",71],["atom. validate-fn must be nil or a side-effect-free fn of one",72],["(fn [_] (dimmer-effect",88],["(u/side-effect!",100],[":effect (effect (trigger-event :searched-stack nil)",42],[":effect (effect (trigger-event :searched-stack nil)",42],[":effect (effect (continue-ability",44],[":effect (effect (continue-ability",44],[":effect (effect (resolve-ability",64]],"useCount":2717},{"word":"effects","context":[["has the same effects, if any, and returns the opposite truth value.\"",72],["effects, any effects other than those needed to produce the first",144],["effects, any effects other than those needed to produce the first",144],["be used to force any effects. Walks through the successive nexts of",144],["(pred item) returns true. pred must be free of side-effects.\"",117],["(pred item) returns true. pred must be free of side-effects.",98],["multiple times, and thus should be free of side effects.  Returns",73],["\"Takes a function of no args, presumably with side effects, and",72],["\"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\"",71],["f must be free of side-effects\"",71]],"useCount":1766},{"word":"element","context":[["f on each element. The value at each key will be a vector of the",71],[";; random element of the set.",113],["(next [_] (js/Error. \"No such element\"))",49],["[element]",97],["element in the seq do not occur until the seq is consumed. dorun can",72],["element in the seq do not occur until the seq is consumed. doall can",72],["(throw (js/Error. \"No such element\"))",49],["[hiccup.element :refer [link-to]]",54],["\"Returns a new seq where x is the first element and seq is the rest.\"",63],["\"Return a random element of the (sequential) collection. Will have",71]],"useCount":1900},{"word":"else","context":[[":else",2583],[":else",5112],[":else (recur (+ i 2))))))",345],[":else nil))",245],["\"If no ys are supplied, returns the negation of x, else subtracts",209],[":else false))",202],[":else (throw (IllegalArgumentException.",197],[":else false))",159],[":else (do",150],[":else                  not-found)))",146]],"useCount":17267},{"word":"email","context":[["(let [access (set (get-user-access email-address))",47],[":email email",82],[":email email",82],[":channel_type  :email",74],["(let [email \"test@example.com\"",63],["[email]",103],["err-from-email",94],["(log-detail email-address",51],["email",40],["(dissoc :email :date_joined :last_login :is_superuser :is_qbnewb))",40]],"useCount":2525},{"word":"empty","context":[["(zero? cnt) (throw (js/Error. \"Can't pop empty vector\"))",143],["(if (empty? coll)",178],["(if (empty? s)",165],["(-empty [coll] (with-meta cljs.core.List.EMPTY meta))",160],["(is (empty? (fs/list-dir discard-dir)))",157],["(-empty [coll] (with-meta (.-EMPTY List) _meta))",147],["(-empty [node] [])",142],["(-empty coll)",142],["(-empty [coll] (with-meta (.-EMPTY List) meta))",398],["(let [mem-map (-> (empty-memory-map)",312]],"useCount":12753},{"word":"enable","context":[["(op7 (nth enable 6)",30],["(op2 (nth enable 1)",30],["(op1 (nth enable 0)",30],["(op6 (nth enable 5)",30],["(op5 (nth enable 4)",30],["(nodejs/enable-util-print!)",90],["(defn enable-console-print!",62],["(binding [config/enable-csrf false]",44],["(cobalt (enable  1 2 3  4 5 6  :noise :buzz )",35],["(enable-console-print!)",2743]],"useCount":3579},{"word":"end","context":[["([sc start-test start-key end-test end-key]",142],["([sc start-test start-key end-test end-key]",142],["(if (or (neg? n) (<= end (+ start n)))",136],["(let [end (+ i (alength node))]",110],[";;; end ERCs",108],[";;; end input instructions",108],[";;; end tag ERCs",94],["(if (and (> start end) (zero? step))",144],["(:require [plastic.logging :refer-macros [log info warn error group group-end]]",82],["(if (zip/end? loc)",81]],"useCount":9582},{"word":"endpoint","context":[["endpoint",45],["(doseq [endpoint endpoints]",37],[":endpoint      \"/hello-proxy\"",40],["(let [request (get-request endpoint (json/generate-string query))",43],["(let [results (query-result method endpoint query)]",44],[":path    endpoint",47],[":target-endpoint \"/hello\"}",52],["[[version endpoint] facts-endpoints",66],["[[version endpoint] endpoints]",133],["[[version endpoint] endpoints",304]],"useCount":2474},{"word":"enlive","context":[["[enlive \"1.1.6\"]",190],["[net.cgrand.enlive-html :as html]))",101],["[net.cgrand.enlive-html :as enlive]",110],["[net.cgrand.enlive-html :refer [set-attr prepend append html]]",243],["[net.cgrand.enlive-html :refer [deftemplate]]",250],["(:require [net.cgrand.enlive-html :as html]",252],["[net.cgrand.enlive-html :as html]",271],["[enlive \"1.1.5\"]",471],["[net.cgrand.enlive-html :as enlive]",110],["(:require [net.cgrand.enlive-html :as html]))",74]],"useCount":2929},{"word":"ensure","context":[["(ensure-editable-array [inode e count array]",71],["(ensure-editable [inode e]",213],["(let [editable (.ensure-editable inode edit)",142],["(ensure-connected!)",75],["(let [editable (.ensure-editable inode edit)]",213],["(recur (tv-ensure-editable",71],["(let [node (tv-ensure-editable (.-edit root) node)]",71],["(let [node   (tv-ensure-editable (.. tv -root -edit) node)",71],["(defn- tv-ensure-editable [edit node]",71],["(.ensure-editable-array inode edit (inc cnt) new-arr)))",71]],"useCount":2714},{"word":"entities","context":[["(fn [screen entities]",447],["(->> entities",43],["entities)))",41],["(tawny.owl/with-probe-entities to",42],[":entities",42],["entities)",163],["entities))",111],["[screen entities]",55],["[entities]",51],["entities",48]],"useCount":1455},{"word":"entity","context":[["entity-uri-prefix",298],["entity)",48],["[entity]",50],["[entity k & options]",51],["(-> entity",58],[":respond-with-entity? true",65],["entity",76],["config/fp-entity-uri-prefix",93],["entity))",107],["[entity]",225]],"useCount":3852},{"word":"entries","context":[["\"Returns a map containing only those entries in map whose key is in keys\"",71],["(throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))",162],["(entries [coll]",257],["(throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))",162],["(es6-entries-iterator (seq coll)))",137],["(log-gen/apply-entries-gen",101],["(es6-set-entries-iterator (seq coll)))",90],["2nd key and value, etc. If coll contains no entries, returns init",72],[">=. Returns a seq of those entries with keys ek for",71],[">=. Returns a reverse seq of those entries with keys ek for",71]],"useCount":1772},{"word":"entry","context":[["entry)))",91],["(-conj [coll entry]",292],["(if (vector? entry)",290],["(-assoc coll (-nth entry 0) (-nth entry 1))",289],["(-assoc coll (-nth entry 0) (-nth entry 1))",289],["(loop [ret coll es (seq entry)]",162],["[map-entry]",142],["[onyx.log.entry :refer [create-log-entry]]",100],["[onyx.log.entry :refer [create-log-entry]]",100],["[entry]",99]],"useCount":6048},{"word":"env","context":[[":env {:is-dev true}",226],[":cljsbuild {:builds {:app {:source-paths [\"env/dev/cljs\"]",304],["[environ.core :refer [env]]",1535],[":env {:production true}",613],["{:source-paths [\"env/prod/cljs\"]",592],["[environ.core :refer [env]]))",575],["(:require [environ.core :refer [env]]",433],[":source-paths [\"env/dev/clj\"]",350],["(def is-dev? (env :is-dev))",250],["(let [port (Integer. (or port (env :port) 10555))]",276]],"useCount":19248},{"word":"environ","context":[["[environ.core :refer [env]]",1535],["[environ \"1.0.0\"]",708],["[environ.core :refer [env]]))",575],["(:require [environ.core :refer [env]]",433],["[lein-environ \"1.0.0\"]]",280],["[lein-environ \"1.0.0\"]",264],["[environ \"1.0.1\"]",220],["(:require [environ.core :refer [env]]))",202],["[environ \"1.0.0\"]]",151],["[environ.core :refer [env]])",143]],"useCount":6041},{"word":"environment","context":[[":environment nil",169],[":environment \"PROD\"",65],["\"environment\" {:type :string",66],["(throw (js/Error. \"No *print-fn* fn set for evaluation environment\"))))",71],["\"environment\" \"DEV\"",76],[":environment \"environment\"",79],[":environment \"environment\"",79],["(throw (Exception. (str \"Production environment code is being loaded while the dev environment is active. \"",123],["(throw (Exception. (str \"Production environment code is being loaded while the dev environment is active. \"",123],[":environment \"DEV\"",582]],"useCount":5558},{"word":"epl","context":[[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],[";  http://www.eclipse.org/legal/epl-v10.html",131],[":url \"http://www.eclipse.org/legal/epl-v10.html\"",128],[";; which can be found in the file epl-v10.html at the root of this",52],[";;   which can be found in the file epl-v10.html at the root of this distribution.",41],[";; which can be found in the file epl-v10.html at the root of this distribution.",40],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],["; which can be found in the file epl-v10.html at the root of this distribution.",37],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449]],"useCount":14072},{"word":"equiv","context":[["(equiv [this other]",1498],["(-equiv [_ other]",314],["(-equiv [this other]",154],["(-equiv this other))",1498],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(-equiv [coll other] (equiv-map coll other))",241],["(-equiv [coll other]",259],["(-equiv [x o] (identical? x o)))",135],["(-equiv [coll other] (equiv-map coll other))",241]],"useCount":8903},{"word":"err","context":[["(binding [*err* *out*]",47],["err-to-email))",35],["(expect nil err)",47],["(binding [*out* *err*]",373],["err-from-email",94],["err-subject",94],["(if err",86],["err-notification-mustache-template",77],["(:require-macros [faceboard.macros.logging :refer [log log-err log-warn log-info]])",58],["(catch Exception err",50]],"useCount":1826},{"word":"error","context":[["(throw-no-method-error name dispatch-val))",1157],["chromex.error/get-last-error.\"",579],["chromex.error/get-last-error.\"",579],["chromex.error/get-last-error.",572],["chromex.error/get-last-error.",572],["(if error",189],["(defn error-msg [errors]",165],["errors (exit 1 (error-msg errors)))",138],["[best population generation error-function report-simplifications]",129],["(is (contains-error? errors",117]],"useCount":17230},{"word":"errors","context":[["(str \"The following errors occurred while parsing your command:\\n\\n\"",174],["(let [errors-chan (a/chan 100)",142],["errors (all-errors errors-chan)]",151],["errors (all-errors errors-chan)]",151],["errors (all-errors errors-chan)]",151],["(defn error-msg [errors]",165],["(let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]",141],["errors (exit 1 (error-msg errors)))",138],["errors (exit 1 (error-msg errors)))",138],["{:severity :errors",126]],"useCount":4729},{"word":"es","context":[["(let [es (-> state",23],["(doseq [e es]",29],["(if-let [e (first es)]",142],["(recur (next es)",144],["(loop [es (seq o) tcoll tcoll]",144],["(let [e (first es)]",162],["(next es))",162],["(loop [ret coll es (seq entry)]",162],["(if (nil? es)",162],["{:es \"\" :nl \"\"}",283]],"useCount":1836},{"word":"es6","context":[["(es6-iterable PersistentArrayMapSeq)",44],["(es6-iterable PersistentQueueSeq)",44],["(defn es6-set-entries-iterator [coll]",45],["(defn es6-entries-iterator [coll]",45],["(es6-set-entries-iterator (seq coll)))",90],["(es6-entries-iterator (seq coll)))",137],["(es6-iterable ArrayNodeSeq)",44],["(es6-iterator (seq coll)))",180],["(es6-iterator (vals coll)))",137],["(es6-iterator (keys coll)))",137]],"useCount":2180},{"word":"etc","context":[["applying f to that result and the 3rd item, etc. If coll contains no",72],["item in coll, etc, until coll is exhausted. Thus function f should",72],["(recur (conj s x) etc))",71],["fn (right-to-left) to the result, etc.\"",71],["\"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\"",71],["applying f to that result and the 2nd item, etc. If coll contains no",72],["2nd key and value, etc. If coll contains no entries, returns init",72],["\"Returns a lazy seq of the first item in each coll, then the second etc.\"",72],["\"Creates a hierarchy object for use with derive, isa? etc.\"",71],[":title      \"/etc/foobar/baz\"",82]],"useCount":2550},{"word":"eval","context":[[":eval-in-leiningen true)",462],["(eval",179],["(binding [*read-eval* false]",94],["(eval-ast ast env)",54],[":eval-in-leiningen true",167],["(expect-eval-actual-first",122],["(h/read-eval-call-test e/*target-opts*",109],["[nemo.eval :as evl]",53],[";; eval",51],["(eval (list",85]],"useCount":3414},{"word":"event","context":[["(fn stream [event]",1124],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],["(reg-event-fx",196],["(reg-event-db",232],["(call-rescue event children)))))",234],["(fn [event]",471],["(secretary/dispatch! (.-token event))))",258],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["(fn [event]",351],["[event]",366]],"useCount":22965},{"word":"events","context":[["(gen-tap-all-events-call api-table (meta &form) chan))",255],["[goog.events :as events]",758],["[goog.events :as events]",758],["(events/listen",295],["(doseq [e events] (s e))",130],["; docs: https://github.com/binaryage/chromex/#tapping-events",155],["[events]",273],["(defmacro tap-all-events",255],["[chromex.callgen :refer [gen-call-helper gen-tap-all-events-call]]))",254],[":events",163]],"useCount":12787},{"word":"every","context":[["(when (every? identity ss)",143],["(every? #(contains? coll %)",142],["(every?",127],["\"Returns true if (pred x) is logical true for every x in coll, else",73],["(every? p args))))))",71],["([x] (every? #(% x) ps))",71],["(defn every-pred",71],["([x y z] (every? #(and (% x) (% y) (% z)) ps))",71],["\"Returns false if (pred x) is logical true for every x in",72],["[pred coll] (not (every? pred coll)))",72]],"useCount":3165},{"word":"ex","context":[["#_(-assoc-ex [coll k v])",71],["(catch Throwable ex",145],["(defn ex-info",69],["(when (instance? ExceptionInfo ex)",138],["(ex/extend-phaser-class",157],["(catch Exception ex",462],["[phzr.impl.extend :as ex]",183],["[ex]",207],["(ex-info",72],["(throw (ex-info",74]],"useCount":3671},{"word":"example","context":[["else nil.  One common idiom is to use a set as pred, for example",72],["(register-as \"dantheman\" \"test@example.org\" \"password\" valid-ssh-key))",105],["For example:",80],[";; (for example when using mock requests), then",69],["(store-example-report! (:basic reports) (now))",70],[";; an example problem for clojush, a Push/PushGP system written in Clojure",75],[":url \"http://example.com/FIXME\"",8641],["(deftest example-passing-test",147],["(example",157],["(deftest example-passing-test",153]],"useCount":12821},{"word":"exception","context":[["Returns exception data (a map) if ex is an ExceptionInfo.",55],["\"Returns true if n is odd, throws an exception if n is not an integer\"",71],["\"Returns true if n is even, throws an exception if n is not an integer\"",71],["call, any such use will throw an exception.\"",56],["Returns exception cause (an Error / ExceptionInfo) if ex is an",55],["{:status :exception",52],["the collection is empty, throws an exception. Returns coll\"",47],["bounds, nth throws an exception unless not-found is supplied.  nth",72],["exception (promise)]",43],["presuming failure will throw exception\"",44]],"useCount":3007},{"word":"exceptions","context":[["(if (env :dev) (wrap-exceptions handler) handler)))",32],["(if (env :dev) (-> handler wrap-exceptions wrap-reload) handler)))",125],[":throw-exceptions false",113],["wrap-exceptions",109],["(if (env :dev?) (wrap-exceptions handler) handler)))",76],["[prone.middleware :refer [wrap-exceptions]]))",66],["wrap-exceptions)",49],["wrap-exceptions))",36],[";; try/catch here to prevent individual topic processing exceptions from bubbling up.  better to handle them here.",39],["[prone.middleware :refer [wrap-exceptions]]",388]],"useCount":1630},{"word":"exclude","context":[["(:refer-clojure :exclude [load])",60],["(:refer-clojure :exclude [==])",335],["(:refer-clojure :exclude [get])",170],["(:refer-clojure :exclude [update])",119],["(:refer-clojure :exclude [send])",114],["(:refer-clojure :exclude [replace])",91],[":aot-exclude-ns [\"clojure.parallel\" \"clojure.core.reducers\"",75],["(:refer-clojure :exclude [promise await]))",59],["(:refer-clojure :exclude [str keyword])",48],["(:refer-clojure :exclude [compile])",50]],"useCount":2666},{"word":"exclusions","context":[[":exclusions [org.apache.ant/ant]]",61],["[log4j/log4j \"1.2.17\" :exclusions [javax.mail/mail",91],[":exclusions",93],[":exclusions [org.clojure/clojure]]]",101],[":exclusions [org.clojure/clojure]]",111],[":exclusions [org.clojure/core.memoize",143],[":exclusions [org.clojure/tools.reader]]",209],[":exclusions [org.clojure/clojure org.clojure/tools.reader]]",40],[":jar-exclusions [#\"\\.cljx|\\.swp|\\.swo|\\.DS_Store\"]",41],[":exclusions [org.clojure/clojure]",42]],"useCount":1760},{"word":"exec","context":[[":exec (fn []",1123],["(let [matches (.exec re s)]",171],[":exec",75],["(jcore/with-try-catch-exec-as-query db-spec",50],["re.exec(s). Returns a vector, containing first the matching",71],["(defn exec",37],["(cmd/exec! :behaviors.reload)",27],["(-> (exec-raw",27],["(k/exec-raw",27],["(registered-for-stacks [:integer :boolean :string :char :exec :print])))",26]],"useCount":2335},{"word":"executor","context":[["(do-executor-heartbeat cluster storm-id executor-id1)",38],["(let [executor (service! (ThreadPoolExecutor. 1 2 ...))]",25],["RejectedExecutionException if the underlying executor will not accept the",25],["reloading. For example, say you want to use a threadpool executor:",25],["using an executor or Thread), you",25],[":executor->node+port",27],["(executor-service",30],["executor service for *every* invocation. It will not start the executor",25],["(->> (:executor->node+port assignment)",33],["(do-executor-heartbeat cluster storm-id executor-id1)",38]],"useCount":2286},{"word":"exists","context":[["; key already exists in strobj, the old value is overwritten. If a",71],[":exists? (fn [ctx]",170],["(is (false? (fs/exists? signed-cert-path)))",73],["(is (true? (fs/exists? signed-cert-path)))",73],["(defn exists?",68],["(if (.exists file)",64],["(when (.exists file)",59],["(if (.exists f)",58],["(is (false? (fs/exists? path)))",55],["(let [user (mock/a-user-exists)",71]],"useCount":2807},{"word":"exit","context":[["(System/exit status))",252],["(System/exit 1))))",115],["errors (exit 1 (error-msg errors)))",138],["(:help options) (exit 0 (usage summary))",145],["(System/exit 0)))",149],["(System/exit 1)))",70],["(defn exit [status msg]",185],["(System/exit 1))",236],["(System/exit 0))",546],["(System/exit 0)",87]],"useCount":3283},{"word":"expect","context":[["(expect false",55],["(expect-with-non-timeseries-dbs",187],["(expect",1305],["(expect-with-timeseries-dbs",142],["(expect-eval-actual-first",122],["(is (= expect @res))))",48],["(is (= expect (vec (map (fn [s] (:metric s)) (deref output)))))))",52],["(expect-command",71],["(expect true",78],["(qp-expect-with-all-engines",101]],"useCount":3471},{"word":"expected","context":[["(is (= expected actual))))",68],[":expected true,",224],["(is (= actual expected))))",169],[":expected false,",145],["(is (= actual expected)))))",145],["(is (= actual expected)",87],["(is (= expected",83],["{:expected true",76],["{:expected false",68],["(let [expected  (expected-resource-events",67]],"useCount":5273},{"word":"expired","context":[[";;start the expired session cleanup job",40],["(if (expired? event)",129],["(when-not (expired? event)",54],["{:state \"expired\"} 0 ; t = 3",30],["(expired? event)",50],["Ignores expired events.",48],["{:state \"expired\"}",30],["(defn- expired? [[id session]]",29],["(defn expired?",41],["{:service \"foo\" :state \"expired\"}",32]],"useCount":2752},{"word":"expr","context":[["expr))",75],["[:expr-or",64],["expr",56],["(fn [expr]",43],["(and (map? expr)",36],["(-plan->sql [expr]",83],["[:expr-and",109],["[:expr-not",118],["[expr]",348],["(assoc expr",79]],"useCount":2668},{"word":"extend","context":[["(extend-protocol IComparable",76],["(extend-type js/Date",71],["(extend-type function",71],["(extend-type default",200],["[phzr.impl.extend :as ex]",183],["(ex/extend-phaser-class",157],["(extend-protocol IPrintWithWriter",85],["(extend-type nil",83],["(extend-type number",82],["(let [arr (array-map-extend-kv coll k v)]",71]],"useCount":2418},{"word":"extensions","context":[["(:require [onyx.extensions :as extensions]",50],["[onyx.extensions :as extensions]",221],["(:require [onyx.extensions :as extensions]",50],["[onyx.peer.pipeline-extensions :as p-ext]",46],["f (partial extensions/apply-log-entry entry)",52],["rep-reactions (partial extensions/reactions entry)",58],["rep-diff (partial extensions/replica-diff entry)",58],["[onyx.extensions :as extensions]",221],["(extensions/emit monitoring args))))",69],["(extensions/emit monitoring args)))))",59]],"useCount":1821},{"word":"extract","context":[["(extract-query",105],["[\"extract\" \"certname\"",283],["[\"in\" \"certname\" [\"extract\" \"certname\" [\"select_resources\"",80],["[\"in\" \"certname\" [\"extract\" \"certname\" [\"select_facts\"",57],["(defn extract",41],[";; Top level extract using invalid fields should throw an error",38],["[\"extract\" [\"certname\" \"nothing\" \"nothing2\"] [\"~\" \"certname\" \".*\"]]",38],["[\"extract\" \"nothing\" [\"~\" \"certname\" \".*\"]]",38],["[\"in\" \"certname\" [\"extract\" \"certname\" [\"select-resources\"",36],["(extract-error-message publish))))",36]],"useCount":1656},{"word":"f","context":[["(-reduce [coll f start] (seq-reduce f start coll)))",682],["(f)",690],["[f]",1439],["[f]",509],["([f coll]",613],["([f]",396],["(f)))",380],["(-reduce [coll f] (seq-reduce f coll))",686],["(-reduce [coll f] (seq-reduce f coll))",686],["(-reduce [coll f start] (seq-reduce f start coll)))",682]],"useCount":59248},{"word":"fact","context":[["(fact :check-only-at-load-time",58],["(fact-group",47],["(silent-fact",106],["(fact",2588],["(fact (set (butlast results)) => expected)",28],["(testing \"should have entries for each fact\"",28],["(dotestseq [version fact-versions",28],["(doverseq [version fact-versions",40],["(tt/fact",41],["(fact \"there are no untranslated strings\"",46]],"useCount":4929},{"word":"facts","context":[["(scf-store/add-facts! {:certname \"foo3\"",53],["(facts",848],["INNER JOIN facts as f on fs.id = f.factset_id",144],[":values facts",85],["(replace-facts! {:certname certname",77],["(scf-store/add-facts! {:certname \"foo1\"",75],["[[version endpoint] facts-endpoints",66],["(add-facts! {:certname certname",61],["(after :facts (helpers/truncate-tables))]",51],["(is (= (db-paths) (paths @facts-x @facts-y)))",50]],"useCount":5308},{"word":"fail","context":[["(testing \"FIXME, I fail.\"",5498],["(defn fail",33],["(+ (:pass m) (:fail m) (:error m)) \"assertions.\")",30],["(testing \"should fail\"",33],["(testing \"query without param should not fail\"",39],[":fail",43],["(defmacro should-fail [body]",32],["(is (= @report-type# :fail )))))",32],["[:type :kale.common/fail]",186],["(testing (str \"query: \" query \" should fail with msg: \" msg)",90]],"useCount":7063},{"word":"false","context":[[":pretty-print false}}}}}})",523],["false",1499],["false))",1072],["false)",883],["false)))",791],["false)))",772],["false))",747],["false",729],[":critical false",412],[":join? false}))",388]],"useCount":33366},{"word":"field","context":[["[ring.util.anti-forgery :refer [anti-forgery-field]]",106],["(parser/add-tag! :csrf-field (fn [_ _] (anti-forgery-field)))",77],["(parser/add-tag! :csrf-field (fn [_ _] (anti-forgery-field)))",77],["(anti-forgery-field)",85],[":field-type :frozen",86],["[field]",122],["field",75],["; The keys field is an array of all keys of this map, in no particular",73],["(def remove-field! (templates.model/make-remove-field! collection-name))",55],["(def remove-field! (templates.model/make-remove-field! collection-name))",55]],"useCount":4913},{"word":"fields","context":[["(testing \"multiple fields\"",55],[":fields",63],["option ':keywordize-keys true' will convert object fields from",75],[":fields [value]",83],["(fields",134],["(testing \"alphabetical fields\"",59],["(testing \"rejects invalid fields\"",57],["[reagent-forms.core :refer [bind-fields]]",55],["fields",55],["[fields]",54]],"useCount":2671},{"word":"figwheel","context":[["[figwheel.client :as figwheel :include-macros true]))",279],["(lein/-main [\"figwheel\"])))",269],[":websocket-url \"ws://localhost:3449/figwheel-ws\"",686],["[figwheel.client :as figwheel :include-macros true]",395],["(defn start-figwheel []",507],["[figwheel.client :as figwheel :include-macros true]",395],[":figwheel true",289],["[figwheel.client :as figwheel :include-macros true]))",279],[":figwheel {:http-server-root \"public\"",639],["(figwheel/watch-and-reload",672]],"useCount":10315},{"word":"file","context":[["[file]",727],["(wrap-file-info)))",404],["(wrap-file \"resources\")",385],["[ring.middleware file-info file]))",359],["[ring.middleware file-info file]))",359],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],["{:file",224],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";; that script will have to take a file path and a line number",183],[";; :open-file-command \"myfile-opener\"",182]],"useCount":19806},{"word":"filename","context":[["filename",115],["(io/slurp-resource filename)",31],["[filename]",37],["filename))",46],["(->> filename",46],["(spit filename",30],["(-> filename",52],[":compiler {;; CLS generated JS script filename",55],["([filename]",76],["[filename]",612]],"useCount":1701},{"word":"files","context":[["[files]",75],["(doseq [file files]",71],["[lt.objs.files :as files]",210],[";; To be able to open files in your editor from the heads up display",183],["(:require [leiningen.new.templates :refer [renderer name-to-path ->files]]",135],["\"You likely have compiled class files lying around from an uberjar build. \"",123],["(doseq [f files]",72],["[lt.objs.files :as files]",210],["(->files data",225],["; Content-Type, Content-Length, and Last Modified headers for files in body",372]],"useCount":4097},{"word":"fill","context":[["subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt tv)) level) 0x01f)]",71],["(if (> (bit-shift-right-zero-fill cnt 5)",71],["(defn bit-shift-right-zero-fill",71],["(let [subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt pv) 2) level) 0x01f)]",71],["[x n] (cljs.core/bit-shift-right-zero-fill x n))",71],["(fill 0)",105],["(bit-and (bit-shift-right-zero-fill hash shift) 0x01f))",73],["(if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))",142],["subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt pv)) level) 0x01f)]",71],["(q/no-fill)",72]],"useCount":3078},{"word":"filter","context":[["(filter",1120],["(filter identity)",196],["(filter identity",110],["(filter",98],["(defn filter",82],["(filters/add-filter! :markdown (fn [content] [:safe (md-to-html-string content)]))",74],["(filter pred r))))))))",72],["(cons f (filter pred r))",72],["(filter #(not (sequential? %))",71],["(chunk-cons (chunk b) (filter pred (chunk-rest s))))",71]],"useCount":4588},{"word":"finally","context":[["(finally (.unlock wlock#))))))",14],["(finally (.stop server#)))))",11],["(finally (.unlock rlock#))))))",14],["(finally (data/delete-login loginid)))))",11],["(finally",2393],["'#{if def fn* do let* loop* letfn* throw try catch finally",13],["(finally",79],["(finally (Hazelcast/shutdownAll)))",19],["\"finally\" \"float\" \"for\" \"function\" \"goto\" \"if\"",21]],"useCount":2575},{"word":"find","context":[["(core/move state :runner (find-card \"Sure Gamble\" (:hand (get-runner))) :deck)",71],["(let [match-data (re-find re s)",71],["(defn- find-and-cache-best-method",71],["(let [idx (hash-collision-node-find-index arr cnt key)]",434],["(is (re-find msg body))",79],["(if-let [e (find smap (nth v i))]",71],["(inode-find [inode shift hash key not-found]",217],["(defn- hash-collision-node-find-index [arr cnt key]",71],["(if-let [target-fn (find-and-cache-best-method name dispatch-val hierarchy method-table",71],["(defn find",74]],"useCount":4394},{"word":"first","context":[["first",1832],["(map first)",251],["(aset a i (first s))",282],["(let [c (chunk-first s)",355],["(first)",416],["(recur y (first more) (next more))",432],["first))",468],["(-first [coll]",519],["(first",976],["first)",232]],"useCount":29297},{"word":"fixed","context":[["(defn fixed-event-window",25],[":fixed-to-camera \"fixedToCamera\"",32],[";; fixed header",33],["(if (<= bc fixed-arity)",355],["fixed-arity (.-cljs$lang$maxFixedArity f)]",284],["(let [bc (bounded-count arglist (inc fixed-arity))]",260],["(let [fixed-arity (.-cljs$lang$maxFixedArity f)]",71],["(let [bc (bounded-count args (inc fixed-arity))]",65],["(test-stream (fixed-time-window 2)",32],["\"A fixed window over the event stream in time. Emits vectors of events, such",34]],"useCount":1703},{"word":"fixtures","context":[["(with-fixtures",78],["(use-fixtures",85],["(use-fixtures :each with-test-db with-http-app)",82],["(:require [cemerick.cljs.test :refer-macros [is are deftest testing use-fixtures done]]",67],["(use-fixtures :each",138],["[puppetlabs.puppetdb.fixtures :as fixt]",80],["(use-fixtures :once schema.test/validate-schemas)",131],["(use-fixtures :once schema-test/validate-schemas)",130],["(use-fixtures :each with-test-db)",88],["(use-fixtures :once",172]],"useCount":2486},{"word":"flatten","context":[["(flatten",41],["(defn flatten",73],["(flatten)",136],["flatten",332],["deriv-seq (flatten (map #(cons (first %) (interpose (first %) (second %)))",71],["(flatten",342],["(let [tag-coll (flatten [tags])]",46],["flatten",38],["flatten))",52],["(flatten nil) returns nil.\"",71]],"useCount":1502},{"word":"flush","context":[["(-flush writer)",140],["(flush))",198],["(flush)",534],["{:flush-on-newline *flush-on-newline*",71],["(-flush [_] nil))",74],["{:flush-on-newline *flush-on-newline*",71],["(defn flush [] ;stub",71],["(flush)))",117],["(when (get opts :flush-on-newline)",71],["(reagent/flush)",64]],"useCount":2723},{"word":"fn","context":[["(fn []",3039],["(fn []",2529],["(fn",2057],["(fn [request]",1722],["(fn [req]",1562],[":reaction (fn [this]",1215],["target-fn (-get-method mf dispatch-val)]",1175],["(when-not target-fn",1175],["(fn stream [event]",1124],[":exec (fn []",1123]],"useCount":85477},{"word":"foo","context":[["[\"=\" \"certname\" \"foo.local\"]",131],["(defn foo",963],["{:tags [\"foo\"]}",88],["(is (= {:service \"foo\"} (deref r)))",72],["(is (= \"foo\" (:service (deref r))))",90],["{:uri \"/foo\"}))",49],[":certname         \"foo.local\"",51],["(tagged-all [\\\"foo\\\" \\\"bar\\\"] prn)\"",56],["(select :foo",67],["\"foo\"",62]],"useCount":8600},{"word":"foobar","context":[["(foobar-params)))",39],[":title      \"/etc/foobar\"",67],[":title      \"/etc/foobar/baz\"",82],["{:type \"File\" :title \"/etc/foobar/baz\"}",36],["(is (= #{{:title \"foobar\"",48],[":tags       #{\"file\" \"class\" \"foobar\"}",43],["{:title \"/etc/foobar/baz\"",48],[":tags       #{\"file\" \"class\" \"foobar\"}}",60],["{:title \"/etc/foobar\"",48],["(is (= (get-in catalog [:resources {:type \"File\" :title \"/etc/foobar\"} :parameters])",52]],"useCount":1857},{"word":"for","context":[["(clear-db-for-testing!)",162],["(prop/for-all [v (issue/arguments-generator)]",189],["See http://clojure.org/data_structures#hash for full algorithms.\"",153],["; code generation for native API wrapper",255],["\"used for starting the server in development mode from REPL\"",378],["; code generation for API call-site",255],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],[";; distributed with this work for additional information",262],["(prop/for-all",257],["(for [ndx0 (range 0          (- (count xs) 3))",9728]],"useCount":35531},{"word":"form","context":[[":class \"form-control\"",82],["(let [param-client (client/wrap-form-params identity)",85],["form))",136],["[:form",158],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["[:div.form-group",280],["[form]",475],["[:div.form-group",529],["form",107],["\"Takes a sequence of inputs and gives IO test cases of the form",113]],"useCount":8429},{"word":"format","context":[["(format",258],["[clj-time.format :as f]",257],[":format",234],[":response-format :json",200],["[clj-time.format :as tf]",138],["[ring.middleware.format :refer [wrap-restful-format]]",108],["(println (format \"Train Case: %3d | Input/Output: %s\" i (str case))))",109],["{:doc/format :markdown}",112],["(println (format \"Test mean error for best: %.5f\" (double (/ best-total-test-error (count best-test-errors)))))",113],["\"(string, optional) The desired response format: json, xml, or vdf. Default: json\"]),",185]],"useCount":7324},{"word":"forms","context":[[";;; Math - variadic forms will not work until the following implemented:",71],["forms",64],["[forms]",68],["~@forms))",68],["[reagent-forms \"0.5.13\"]",70],["~@forms",108],["(forms/managed-button",121],["[& forms]",134],[";;; Redistribution and use in source and binary forms, with or without",201],[";; Redistribution and use in source and binary forms, with or without",214]],"useCount":2324},{"word":"found","context":[["(-invoke [coll k not-found]",648],["not-found)))",554],["not-found)",495],["(-lookup coll k not-found))",467],["not-found",776],["not-found))",571],["(testing \"not-found route\"",392],["[compojure.route :refer [not-found resources]]",351],["(not-found \"Not Found\"))",324],["(route/not-found \"Not Found\"))",545]],"useCount":16803},{"word":"fp","context":[["(rtucore/header \"Authorization\" (rtucore/authorization-req-hdr-val fp-auth-scheme",85],["config/fp-entity-uri-prefix",93],["fp-auth-scheme",59],["[pe-fp-core.core :as fpcore]",47],["config/fp-base-url",43],["WHERE fp.depth = 0",124],["\"SELECT fp.path as name,",124],["INNER JOIN fact_paths as fp on f.fact_path_id = fp.id",131],["INNER JOIN fact_paths as fp on f.fact_path_id = fp.id",131],["fp-auth-scheme-param-name",144]],"useCount":1567},{"word":"frame","context":[["[re-frame.core :as re-frame]",87],["(re-frame/register-handler",191],["[frame]",152],["(re-frame/register-sub",141],["(doto frame",128],["(q/frame-rate 30)",104],["(q/frame-rate 60)",95],["[re-frame.core :as re-frame]",87],["(:require [re-frame.core :as re-frame]",77],["(:require [re-frame.core :as re-frame]",77]],"useCount":3836},{"word":"from","context":[["from make-hierarchy, if not supplied defaults to the global",142],[";; To be able to open files in your editor from the heads up display",183],["(-sorted-seq-from [coll k ascending?]",143],["(do (aset to j (aget from i))",142],["([from i to j len]",142],["\"You likely have compiled class files lying around from an uberjar build. \"",123],[";; a \"set\" of inputs and two integers representing how many cases from the set",113],["the ys from x and returns the result.\"",209],["\"used for starting the server in development mode from REPL\"",378],[":onyx/doc \"Reads segments from a core.async channel\"}",389]],"useCount":13553},{"word":"frontend","context":[["[frontend.utils.vcs-url :as vcs-url]",74],["[frontend.async :refer [raise!]]",77],["[frontend.components.common :as common]",98],["[frontend.routes :as routes]",67],["[frontend.datetime :as datetime]",63],["(let [uuid frontend.async/*uuid*",60],["(:require-macros [frontend.utils :refer [html]]))",57],["[frontend.config :as config]",53],["[frontend.state :as state]",159],["[frontend.utils :as utils :include-macros true]",168]],"useCount":1894},{"word":"fs","context":[["(is (empty? (fs/list-dir discard-dir))))))",101],["[me.raynes.fs :as fs]))",117],["(:require [me.raynes.fs :as fs]",100],["[me.raynes.fs :as fs]",508],["[me.raynes.fs :as fs]",508],["(is (empty? (fs/list-dir discard-dir)))",157],["[me.raynes/fs \"1.4.6\"]",153],["FROM factsets fs",144],["INNER JOIN facts as f on fs.id = f.factset_id",144],["[me.raynes.fs :as fs]))",117]],"useCount":6381},{"word":"function","context":[[":onyx/type :function",577],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["[best population generation error-function report-simplifications]",129],["best-test-errors (error-function best-program :test)",113],[";; inputs is either a list or a function that, when called, will create a",113],[")) ;; To do validation, could have this function return an altered best individual",113],["; Helper function for error function",108],["; Helper function for error function",108],["(error-function best-program :train true)",106],["Whatever function *print-fn* is bound to will be passed any",83]],"useCount":8885},{"word":"functions","context":[["\"Takes a set of functions and returns a fn that is the juxtaposition",71],[":functions",253],["\"When lazy sequences are produced via functions that have side",144],["\"Takes a set of functions and returns a fn that is the composition",71],["attaches said functions as methods on the object.  Any references to",71],["any registered watches will have their functions called. The watch",71],["; Common functions used by tests.",55],["(:use [clojure.contrib.generic.math-functions :only []]))",55],[";; because that's where our development helper functions like (run) and",50],["\"Takes a JavaScript object and a map of names to functions and",71]],"useCount":2132},{"word":"future","context":[["(future",1242],["(future (try",20],["(d/future",22],["`(future",23],["(future-fact",25],["(future (loop []",27],["(config/with-augmented-config {:visible-future true}",28],["(doseq [f (map (fn [t] (future",32],["fut (future",41],["\"Returns true if a value has been produced for a promise, delay, future or lazy sequence.\"",47]],"useCount":1931},{"word":"g","context":[["(-invoke [_ a b c d e f g]",93],["(-invoke [_ a b c d e f g h i j k l m n]",93],["(-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]",93],["(-invoke [_ a b c d e f g h i j k l m]",93],["(doto g",111],["[:g",141],["([f g h]",142],["([f g]",142],["(-invoke [_ a b c d e f g h]",93],["[g]",158]],"useCount":11839},{"word":"game","context":[[":game \"game\"",106],["(in-ns 'game.core)",94],[";; non-string key. game over.",71],["game))",67],[":game \"game\"",106],["(-> game",143],["(new-game",163],["[game]",208],["(new-game (default-corp)",277],["(do-game",1146]],"useCount":4437},{"word":"gen","context":[["(declare gen-call)",255],["(defmacro gen-wrap [kind item-id config & args]",255],["(def gen-call (partial gen-call-helper api-table))",255],["(:gen-class))",5421],["(:gen-class)",2116],["(:gen-class",397],["(def gen-call (partial gen-call-helper api-table))",255],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["(apply gen-wrap-helper api-table kind item-id config args))",255],["[clojure.test.check.generators :as gen]",490]],"useCount":13973},{"word":"generate","context":[["(json/generate-string",130],["(h/generate-tests issue/test-data issue/solution))",190],["[faker.generate :as faker]))",101],["(defn generate",74],["[cheshire.core :refer [generate-string]]",68],["(:require [lwcgl.api :refer [generate-wrapper-api]])",56],["json/generate-string",44],["(let [request (get-request endpoint (json/generate-string query))",43],["[cheshire.core :refer [generate-string parse-string]]",42],["(defn generate-response [data & [status]]",29]],"useCount":1867},{"word":"geospace","context":[["(geospace:RasterGrid",261],["(geospace:hasNodataValue 32767.0)))",67],["(geospace:ArealFeatureSet",101],["(geospace:WFSDataSource",101],["(geospace:hasServiceUrl \"http://ecoinformatics.uvm.edu/geoserver/wfs\")",104],["(geospace:hasCoordinateReferenceSystem \"EPSG:4326\")))))",256],["(geospace:hasServiceUrl \"http://ecoinformatics.uvm.edu/geoserver/wcs\")",258],["(geospace:hasTransformation \"self * 0.5\")",66],["(geospace:hasNodataValue -3.4028234663852886E38)))",38],["(geospace:WCSDataSource",261]],"useCount":1799},{"word":"get","context":[["[:div [(session/get :current-page)]])",223],[":get",243],["(let [response (app (request :get \"/invalid\"))]",210],["target-fn (-get-method mf dispatch-val)]",1175],["chromex.error/get-last-error.\"",579],["chromex.error/get-last-error.",572],["method [:get :post]]",400],["(defn get-handler []",385],["(serve (get-handler)",370],[":allowed-methods [:get]",261]],"useCount":30423},{"word":"given","context":[["the options given in opts\"",71],["- rev is the document revision; if the current document revision_id does not match the given one, an error is thrown;",32],["the same performance characteristics as nth for the given",71],["\"Returns true if key is present in the given collection, otherwise",72],["\"Returns a Keyword with the given namespace and name.  Do not use :",71],["Returns the message attached to the given Error / ExceptionInfo object.",55],["\"Test if given function-name is bound to the real function.\"",55],["options given in opts\"",71],["(given response",55],["(testing \"returns a 404 when a non-existent certname is given\"",36]],"useCount":2971},{"word":"global","context":[["from make-hierarchy, if not supplied defaults to the global",142],[":global-vars {*warn-on-reflection* true",100],[":global-vars {*warn-on-reflection* true}",244],["supplied defaults to, and modifies, the global hierarchy.\"",142],["(when @global-print-behavioral-diversity",238],["defaults to the global hierarchy\"",142],["(defn- get-global-hierarchy []",69],["(catch js/global.Error e",71],["(swap-global-hierarchy! underive tag parent)",69],["(apply swap! (get-global-hierarchy) f args))",69]],"useCount":2871},{"word":"go","context":[["(:require-macros [cljs.core.async.macros :refer [go]]))",214],["(:require-macros [cljs.core.async.macros :refer [go go-loop]])",285],["(:require-macros [cljs.core.async.macros :refer [go go-loop]])",285],["(go (while true",297],["(async/go",320],["(go",2026],["(go-loop []",820],["(go",762],["(:require-macros [cljs.core.async.macros :refer [go]])",713],["(go-loop []",444]],"useCount":10427},{"word":"goog","context":[["[goog.dom :as gdom]",167],["(:require [goog.events :as events]",129],["(-hash [this] (goog/getUid this)))",160],["[goog.events :as events]",758],["(:import goog.History))",351],["[goog.history.EventType :as EventType]",298],["[goog.string :as gstring]",252],["(prepend (html [:script {:type \"text/javascript\" :src \"/js/out/goog/base.js\"}]))",235],["(if (and ^boolean (goog/isString k)",213],["[goog.dom :as dom]",179]],"useCount":6891},{"word":"group","context":[["[:div.form-group",280],["(onyx.api/shutdown-peer-group peer-group)",112],["(onyx.api/shutdown-peer-group peer-group)",112],[":group  \"root\"",109],["(:require [plastic.logging :refer-macros [log info warn error group group-end]]",82],["(:require [plastic.logging :refer-macros [log info warn error group group-end]]",82],["(defn group-by",71],["[:div {:class \"form-group\"}",65],["(group-by first)",63],["[:div.form-group",529]],"useCount":6381},{"word":"groups","context":[[":groups",102],[":value (-> (:groups %1)",75],["capturing groups.\"",71],["(visit \"/groups/org.clojars.dantheman\")",36],["(-> %1 :groups first .toLowerCase))}",40],["(-> %1 :groups first clojure.string/lower-case))}",48],[":repositories {\"sonatype-oss-public\" \"https://oss.sonatype.org/content/groups/public/\"}",49],["(Integer/parseInt (second (:groups %1)))",63],["substring, then any capturing groups if the regular expression contains",71],[":value (Long/parseLong (first (:groups %1)))}",35]],"useCount":1558},{"word":"h","context":[["([h tag parent]",142],["inheritance relationship or a relationship established via derive. h",142],["([f g h]",142],["h))))",142],["h)))",155],["[test-helper :as h]",185],["(h/generate-tests issue/test-data issue/solution))",190],["[\"-h\" \"--help\"]])",224],["h (:headers r)",241],["[h-box",411]],"useCount":12943},{"word":"h1","context":[["(bit-xor h1 (unsigned-bit-shift-right h1 16))))",51],["(within [:article :h1]",56],["(route/not-found \"<h1>Page not found</h1>\"))",142],["(route/not-found \"<h1>Page not found</h1>\"))",142],["(bit-xor h1 (unsigned-bit-shift-right h1 16))))",51],["(m3-fmix h1 (imul 2 (alength in)))))",51],["(bit-xor h1 len)",51],["(let [h1 (loop [i 1 h1 m3-seed]",51],["h1))",51],["(bit-xor h1 (unsigned-bit-shift-right h1 16))",51]],"useCount":2352},{"word":"hand","context":[["(core/move state :runner (find-card \"Sure Gamble\" (:hand (get-runner))) :deck)",71],["hand-off-queue (java.util.concurrent.SynchronousQueue.)",36],["(play-from-hand state :corp \"PAD Campaign\" \"New remote\")",37],["(play-from-hand state :runner \"Sure Gamble\")",39],["(play-from-hand state :corp \"Launch Campaign\" \"New remote\")",46],["{:name \"left-hand\" :size 2}",47],["[hand]",103],["(play-from-hand state :corp \"Ice Wall\" \"HQ\")",67],["(play-from-hand state :corp \"Hedge Fund\")",52],["(in-hand? %))}",180]],"useCount":1617},{"word":"handle","context":[["(handle-aftertouch [this message])",39],[":handle-ok",110],[":handle-ok (fn [ctx]",220],["(with-message-handler {:keys [handle-message dlo delay-pool q]}",82],[";; handle CLJS ctors",73],[":handle-ok (fn [_]",38],[";; try/catch here to prevent individual topic processing exceptions from bubbling up.  better to handle them here.",39],[";; TODO: we should remove this and handle date equality checking",68],["(handle-message (store-command' q command))",50],[":handle-created (fn [ctx]",44]],"useCount":2770},{"word":"handler","context":[["(handler request))))",270],["(def http-handler",344],["(serve (get-handler)",370],["(defn get-handler []",385],["(test-msg-handler command publish discard-dir",388],["(-> handler",483],["[compojure.handler :as handler]",712],["[compojure.handler :as handler]",712],["[handler]",894],["(register-handler",868]],"useCount":20582},{"word":"has","context":[["(cond (nil? k)    (if has-nil?",142],["to results and, when calls with the same arguments are repeated often, has",71],["(PersistentHashMap. meta (dec cnt) new-root has-nil? nil-val nil)))))",71],["has the same effects, if any, and returns the opposite truth value.\"",72],["result of calling f with no arguments.  If coll has only 1 item, it",72],["\"Returns true if coll has no items - same as (not (seq coll)).",74],["[:h3 \"ClojureScript has not been compiled!\"]",156],["(has [coll k]",257],["(has (status? 200))",323],["(if has-nil?",375]],"useCount":4932},{"word":"hash","context":[["(-hash [coll] (hash-ordered-coll coll))",255],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash))",665],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash))",665],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash))",665],["(let [idx (hash-collision-node-find-index arr cnt key)]",434],["(let [idx  (mask hash shift)",426],["(-hash [coll] (caching-hash coll hash-unordered-coll __hash))",306],["(-hash [coll] (caching-hash coll hash-unordered-coll __hash))",306],["(-hash [coll] (caching-hash coll hash-unordered-coll __hash))",306],["(let [bit (bitpos hash shift)]",291]],"useCount":23609},{"word":"have","context":[["new-state. Whenever the reference's state might have been changed,",71],["any registered watches will have their functions called. The watch",71],["\"Return a random element of the (sequential) collection. Will have",71],["\"Returns non-nil if nums all have the equivalent",71],["(is false \"No tests have been written.\"))",102],[")) ;; To do validation, could have this function return an altered best individual",113],["\"You likely have compiled class files lying around from an uberjar build. \"",123],["\"When lazy sequences are produced via functions that have side",144],[";; that script will have to take a file path and a line number",183],[";; must be called after routes have been defined",193]],"useCount":3034},{"word":"head","context":[["the seq, retains the head and returns it, thus causing the entire",72],["[:head]",30],["</head>",32],["<head>",33],["[{:selections ({:anchor {:line 0, :ch 0}, :head {:line 0, :ch 0}}),",40],["(def asym-hobbit-body-parts [{:name \"head\" :size 3}",45],["head",47],["the seq, does not retain the head and returns nil.\"",72],["[:head",1318],["(evaluate [this show snapshot head]",28]],"useCount":2396},{"word":"header","context":[["(rtucore/header \"Authorization\" (rtucore/authorization-req-hdr-val fp-auth-scheme",85],["(is-header ref",42],["[:div.navbar-header",56],["[:header-tag",61],["[:div.navbar-header",61],["[:header",63],["(header authn-info-header \"root ADMIN\")",72],["(header authn-info-header \"root ADMIN\")",72],["[:header",89],[":header-params [api_key :- (s/maybe s/Str)]",136]],"useCount":3097},{"word":"headers","context":[["headers (headers resp)]",214],[":headers {\"Content-Type\" \"application/json\"}",293],[":headers {\"Content-Type\" \"text/plain\"}",281],["h (:headers r)",241],["headers (headers resp)]",214],["; Content-Type, Content-Length, and Last Modified headers for files in body",372],[":headers {\"Content-Type\" \"text/html\"}",455],[":headers {}",206],[":headers {\"Content-Type\" \"text/html; charset=utf-8\"}",154],[":headers",127]],"useCount":7587},{"word":"height","context":[[":height height",53],[":height \"height\"",85],[":height height",53],[":height \"100%\"",56],[":height height",57],[":height height",57],[":height \"500\"",62],["[width height]",66],[":height \"height\"",85],["(clj->phaser height)",93]],"useCount":2059},{"word":"help","context":[[";; Handle help and error conditions",59],["(-> (session (help/app))",54],["[\"-h\" \"--help\"]])",224],["(defn help",52],["(:help options) (exit 0 (usage summary))",145],[":local-repo help/local-repo))))",85],["[clojars.test.test-helper :as help]",83],["(-> (session (help/app-from-system))",83],[":repository {\"test\" {:url (str \"http://localhost:\" help/test-port \"/repo\")",64],["(when (:help options)",70]],"useCount":1928},{"word":"helper","context":[["[clojars.test.test-helper :as help]",83],["[onyx.test-helper :refer [load-config]]",108],["[battle-asserts.test-helper :refer :all]))",75],["[battle-asserts.test-helper :refer [assert-equal]]))",72],["[jiksnu.test-helper :as th]",138],["(apply gen-wrap-helper api-table kind item-id config args))",255],["[test-helper :as h]",185],["(def gen-call (partial gen-call-helper api-table))",255],["(:require [chromex.wrapgen :refer [gen-wrap-helper]]",254],["[chromex.callgen :refer [gen-call-helper gen-tap-all-events-call]]))",254]],"useCount":2581},{"word":"helpers","context":[["[vip.data-processor.test-helpers :refer :all]",62],["(after :facts (helpers/truncate-tables))]",51],[";; helpers",46],["(helpers/truncate-tables)))",51],["hiccup.page-helpers",43],["(whoami-helpers/set-whoami-response \"45c1f5e3f05d0\" \"foouser\" \"user\")",43],["(helpers/set-capabilities! \"foouser\" \"user\" all-capabilities)",51],["body => helpers/no-untranslated-strings)))",44],["[ctia.test-helpers",50],["helpers/fixture-properties:clean",48]],"useCount":1636},{"word":"hiccup","context":[["[hiccup \"1.0.4\"]",123],["[hiccup.core :refer [html]]",326],["[hiccup \"1.0.5\"]",974],["[hiccup \"1.0.5\"]]",115],["(hiccup/html",111],["hiccup.core",102],["[hiccup.core :as hiccup]",89],["[hiccup.core :as hiccup]",89],["[hiccup.form :refer :all]",73],["[hiccup.page :refer [include-js include-css]]",206]],"useCount":4455},{"word":"hierarchy","context":[["(if (= @cached-hierarchy @hierarchy)",71],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],["from make-hierarchy, if not supplied defaults to the global",142],["supplied defaults to, and modifies, the global hierarchy.\"",142],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],["defaults to the global hierarchy\"",142],["\"Creates a hierarchy object for use with derive, isa? etc.\"",71],["(if (= @cached-hierarchy @hierarchy)",71]],"useCount":4033},{"word":"home","context":[["(defroutes home-routes",195],["(defn home-page []",266],[";; :keystore-path \"/home/user/.android/private.keystore\"",79],["[:div [:a {:href \"#/\"} \"go to the home page\"]]])",89],[";; :sdk-path \"/home/user/path/to/android-sdk/\"",90],["(GET \"/\" [] (home-page))",93],["(GET \"/\" [] home-page)",120],["(defn home-page []",125],["(def home-page",129],["(session/put! :current-page #'home-page))",176]],"useCount":2640},{"word":"hooks","context":[[":uberjar {:hooks [leiningen.cljsbuild minify-assets.plugin/hooks]",210],[":uberjar {:hooks [leiningen.cljsbuild minify-assets.plugin/hooks]",210],[":hooks [leiningen.cljsbuild]",488],[":uberjar {:hooks [leiningen.cljsbuild]",120],[":uberjar {:hooks [minify-assets.plugin/hooks]",96],[":uberjar {:hooks [minify-assets.plugin/hooks]",96],[":hooks [environ.leiningen.hooks]",75],[":hooks [environ.leiningen.hooks]",75],[":hooks [cljx.hooks]",37],[":hooks [cljx.hooks]",37]],"useCount":1834},{"word":"host","context":[["host",66],[":proxy        {:host \"0.0.0.0\"",73],["[host port]",87],[":host host",90],[":host host",90],[":proxy-config {:host \"localhost\"",100],[":host \"localhost\"",152],[";;;;;;;;;;;;;;;;;;;;;;;;;;;;;; protocols for host types ;;;;;;",71],["{:target       {:host \"0.0.0.0\"",70],["{:ssl-host \"0.0.0.0\"",70]],"useCount":5879},{"word":"href","context":[[":href",105],["[:a {:href \"#\"",117],[":href \"#\",",191],["[:div [:a {:href \"#/\"} \"go to the home page\"]]])",89],["[:div [:a {:href \"/\"} \"go to the home page\"]]])",47],["(dom/a #js {:href \"#\"",52],["[hyperlink-href",52],["{:href \"\"",48],[":href \"#\"",46],["{:href s/Str",38]],"useCount":1482},{"word":"html","context":[[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],["[hiccup.core :refer [html]]",326],["[sablono.core :as html :refer-macros [html]]",369],["[sablono.core :as html :refer-macros [html]]",369],[":headers {\"Content-Type\" \"text/html\"}",455],["(html",1908],["(html",959],["[:html",457],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419]],"useCount":30045},{"word":"http","context":[[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],["(:require [clj-http.client :as client]",417],["[clj-http.client :as client]",530],["[clj-http.client :as http]",360],["(def http-handler",344],["[clj-http.client :as http]",360],["(println (str \"You can view the site at http://localhost:\" port))))",374],[":figwheel {:http-server-root \"public\"",639],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],[":url \"http://example.com/FIXME\"",8641]],"useCount":42677},{"word":"httpkit","context":[["[org.httpkit.client :as http]",253],["[org.httpkit.client :as http]))",76],["[org.httpkit.server :refer [run-server]]))",60],["[org.httpkit.server :as httpkit]",52],["[org.httpkit.server :as httpkit]",52],["[org.httpkit.server :as http-kit]",48],["[org.httpkit.server :refer :all]",42],["[org.httpkit.server :as server]",38],["(:require [org.httpkit.client :as http]",145],["[org.httpkit.server :refer [run-server]]",158]],"useCount":1513},{"word":"https","context":[["; docs: https://github.com/binaryage/chromex/#tapping-events",155],[":url \"https://github.com/bhauman/lein-figwheel\"",70],[";; https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-within-NRepl",63],[":deploy-repositories [[\"releases\" {:url \"https://clojars.org/repo\"",60],[":repositories {\"sonatype-oss-public\" \"https://oss.sonatype.org/content/groups/public/\"}",49],["\"https://api.twitter.com/oauth/access_token\"",38],["\"https://api.twitter.com/oauth/request_token\"",40],[":url \"https://github.com/juxt/joplin\"}",42],["\"https://localhost:8081\"",48],[":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"",46]],"useCount":1645},{"word":"i","context":[["(aset a i init-val-or-seq))",282],["(loop [i 0 init init]",307],["(<= len i) -1",345],[":else (recur (+ i 2))))))",345],["(loop [i 0 s s]",282],["(aset a i (first s))",282],["(if (and s (< i size))",282],["(loop [i 0]",874],["(if (< i len)",829],["(dotimes [i size]",645]],"useCount":41478},{"word":"id","context":[["(defmacro gen-wrap [kind item-id config & args]",255],["(apply gen-wrap-helper api-table kind item-id config args))",255],["{:db/id #db/id[:db.part/db]",2316],["{:db/id #db/id[:db.part/db]",2316],["user-id",263],["[id]",271],["id",276],["{:db/id (d/tempid :db.part/db)",329],[":id",388],["[id]",979]],"useCount":42152},{"word":"identical","context":[["(if (identical? e edit)",284],["(if (identical? new-root root)",146],["(if (identical? node root)",146],["(-equiv [x o] (identical? x o)))",135],["(if (identical? val val-or-node)",142],["(identical? n node)",142],["(if (identical? n val-or-node)",142],["(if (identical? n node)",142],["(cond (identical? n val-or-node) inode",142],["(if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)",142]],"useCount":5911},{"word":"identity","context":[[":db/unique :db.unique/identity",318],["(filter identity)",196],["identity)",187],["(when (some identity maps)",147],["(when (every? identity ss)",143],["(io/resource \"index.html\") [] [:body] (if is-dev? inject-devmode-html identity))",127],["(def inject-devmode-html identity)",121],["identity))",116],[":identity identity",113],["identity",363]],"useCount":4890},{"word":"idx","context":[["node (aget arr idx)]",426],["(let [idx  (mask hash shift)",426],["(let [idx (array-map-index-of coll k)]",215],["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(cond (< idx 0)              not-found",146],["val-or-node (aget arr (inc (* 2 idx)))]",426],["(let [idx (hash-collision-node-find-index arr cnt key)]",434],["(if (== idx -1)",442],["(let [idx (array-map-index-of tcoll key)]",145],["key-or-nil  (aget arr (* 2 idx))",284]],"useCount":10810},{"word":"if","context":[["(if (next more)",432],["(if (nil? s)",613],["(if",685],["(if ks",716],["(if (reduced? nval)",499],["(if-not (nil? coll)",465],["(if (< i len)",829],["(if editable?",433],["(if (== idx -1)",442],["(if (reduced? init)",774]],"useCount":86977},{"word":"impl","context":[["\"Naive impl of to-array as a start.\"",72],["impl/ReadPort",37],["(if-let [alt-impl (:alt-impl opts)]",37],["(if-let [alt-impl (:alt-impl opts)]",37],["{:messaging {:onyx.messaging/impl :dummy-messenger}",41],["impl/Handler",42],["(assoc default-streams-impl",50],["[phzr.impl.extend :as ex]",183],["(:require [phzr.impl.utils.core :refer [clj->phaser phaser->clj]]",183],[":messaging {:onyx.messaging/impl :dummy-messenger}}",90]],"useCount":1545},{"word":"implements","context":[["(if (implements? IEditableCollection to)",112],["(implements? IReduce coll)",126],["(implements? IIndexed coll)",126],["(if (implements? ISeq coll)",126],["(if (implements? INamed x)",127],["(implements? ISeqable coll)",84],["\"Returns true if coll implements count in constant time\"",72],["(implements? IPrintWithWriter obj)",72],["\"Returns true if coll implements nth in constant time\"",72],["(implements? ILookup o)",128]],"useCount":1889},{"word":"import","context":[["(:import [java.util UUID]))",78],["(:import (java.io File)",80],["(:import [java.io File])",89],["(:import java.util.UUID))",77],["(:import java.io.File))",129],["(:import [java.io File]",138],["(:import [java.io File]))",152],["(:import goog.History))",351],["(:import",1916],["(:import (java.io File)))",118]],"useCount":8889},{"word":"in","context":[["; Content-Type, Content-Length, and Last Modified headers for files in body",372],[":eval-in-leiningen true)",462],["\"used for starting the server in development mode from REPL\"",378],[";; the server is forced to re-resolve the symbol in the var",374],["; Makes static assets in $PROJECT_DIR/resources/public/ available.",371],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],[";;ignore println statements in prod",288],["(if in",218],[";; Redistribution and use in source and binary forms, with or without",214],[";;; Redistribution and use in source and binary forms, with or without",201]],"useCount":38880},{"word":"inc","context":[["(if (< (inc off) (alength node))",144],["(recur (inc i)",202],["(set! i (inc i))",228],["(let [bc (bounded-count arglist (inc fixed-arity))]",260],["(recur (inc i) (next s)))",282],["val-or-node (aget arr (inc (* 2 idx)))]",426],["(recur nval (inc n))))",428],["ndx1 (range (inc ndx0) (- (count xs) 2))",9728],["ndx3 (range (inc ndx2) (count xs))",9728],["ndx2 (range (inc ndx1) (- (count xs) 1))",9728]],"useCount":45008},{"word":"include","context":[["[hiccup.page :refer [include-js include-css]]",206],["(:require [om.core :as om :include-macros true]",1040],["[om.core :as om :include-macros true]",821],["[om.dom :as dom :include-macros true]",714],["[figwheel.client :as figwheel :include-macros true]",395],["[secretary.core :as secretary :include-macros true]",385],["[figwheel.client :as figwheel :include-macros true]))",279],["[om.dom :as dom :include-macros true]))",232],["[hiccup.page :refer [include-js include-css]]",206],["[om-tools.dom :as dom :include-macros true]",191]],"useCount":8274},{"word":"index","context":[[":db/index true",517],["(io/resource \"index.html\") [] [:body] (if is-dev? inject-devmode-html identity))",127],["(let [idx (hash-collision-node-find-index arr cnt key)]",434],["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(let [idx (array-map-index-of coll k)]",215],["(defn index",203],["(let [idx (array-map-index-of tcoll key)]",145],["(clj->phaser index)))))",121],["idx (bitmap-indexed-node-index bitmap bit)]",142],["(defn index []",135]],"useCount":11280},{"word":"indexed","context":[["(map-indexed",324],["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(indexed? coll) (-nth coll n not-found)",72],["(defn map-indexed",72],["(indexed? coll) (-nth coll n)",72],["returns false.  Note that for numerically indexed collections like",72],["(defn keep-indexed",71],["(defn- bitmap-indexed-node-index [bitmap bit]",73],["(map-indexed",202],["idx (bitmap-indexed-node-index bitmap bit)]",142]],"useCount":2429},{"word":"info","context":[["(:require [plastic.logging :refer-macros [log info warn error group group-end]]",82],["(ex-info",72],["(throw (ex-info",74],[";(logging-config/set-logger! :level :info)",276],["[ring.middleware.file-info :refer [wrap-file-info]]",126],["(timbre/info \"shutdown complete!\"))",72],["(header authn-info-header \"root ADMIN\")",72],["(wrap-file-info)))",404],["[ring.middleware file-info file]))",359],["[ring.middleware.file-info :refer [wrap-file-info]]",126]],"useCount":6984},{"word":"init","context":[["(defn init! []",445],["(defn init",550],["@init",649],["(init-state [_]",755],["(if (reduced? init)",774],["(core/init!)",724],["(defn init []",434],["(loop [i 0 init init]",307],["(-kv-reduce [coll f init]",350],["(init)",433]],"useCount":18267},{"word":"initial","context":[["(def initial-state",55],["initial",48],[":content \"width=device-width, initial-scale=1.0\"}]",52],["[:meta {:name \"viewport\" :content \"width=device-width, initial-scale=1\"}]",55],["m/initial-machine-state",107],[":content \"width=device-width, initial-scale=1\"}]",254],["(is (= (-> m/initial-machine-state",63],["\"Creates and returns an Atom with an initial value of x and zero or",71],["\"Creates and returns a Volatile with an initial value of val.\"",43],["[:meta {:name \"viewport\" :content \"width=device-width, initial-scale=1.0\"}]",43]],"useCount":1822},{"word":"inject","context":[["(defn inject-in-ch [event lifecycle]",108],["[:body] (if is-dev? inject-devmode-html identity))",111],["{:lifecycle/before-task-start inject-out-ch})",117],["(defn inject-out-ch [event lifecycle]",120],["(def inject-devmode-html identity)",121],["(io/resource \"index.html\") [] [:body] (if is-dev? inject-devmode-html identity))",127],["(def inject-devmode-html",246],["{:lifecycle/before-task-start inject-in-ch})",105],["(defn inject-reader-ch [event lifecycle]",96],["{:lifecycle/before-task-start inject-reader-ch})",96]],"useCount":1615},{"word":"inode","context":[["inode",1213],["(inode-assoc [inode shift hash key val added-leaf?]",213],["(inode-assoc [inode shift hash key val added-leaf?]",213],["(inode-seq [inode]",215],["(inode-seq [inode]",215],["(kv-reduce [inode f init]",217],["(inode-find [inode shift hash key not-found]",217],["(inode-find [inode shift hash key not-found]",217],["(inode-lookup [inode shift hash key not-found]",217],["(inode-lookup [inode shift hash key not-found]",217]],"useCount":10020},{"word":"input","context":[[":origin \"+input\"},",766],["([result input]",860],["[:input",165],["([result input]",140],[":onyx/type :input",513],["[input]",456],["(rf result input))))))))",172],["(rf result input)",180],["[:input {:type \"text\"",207],[":onyx/plugin :onyx.plugin.core-async/input",296]],"useCount":11306},{"word":"ins","context":[["(BlackNode. (.-key ins) (.-val ins)",142],["(RedNode. (.-key ins) (.-val ins)",142],["(RedNode. (.-key ins) (.-val ins)",142],["(add-left [node ins]",142],["(if (instance? RedNode ins)",142],["(if-not (nil? ins)",142],["(instance? RedNode (.-right ins))",142],["(instance? RedNode (.-left ins))",142],["(add-right [node ins]",142],["(BlackNode. (.-key ins) (.-val ins)",142]],"useCount":3475},{"word":"insert","context":[["(jdbc/insert!",53],["(let [node-to-insert (push-tail pv (- level 5) child tailnode)]",71],["(defn insert!",41],["(insert! :problems",263],["(sql/insert-records",207],["(pv-aset ret subidx node-to-insert)",142],["(insert :foo",41],["(insert-records*",42],["(defn insert",93],["(let [node-to-insert (new-path nil (- level 5) tailnode)]",71]],"useCount":1979},{"word":"install","context":[[":db.install/_attribute :db.part/db}]))",22],[":db.install/_attribute :db.part/db}",2837],[":db.install/_attribute :db.part/db",90],[":db.install/_attribute :db.part/db}])",87],["(install",64],["(devtools/install!)",42],[":msg (msg \"install \" (:title target))",35],["(defn install",28],["(runner-install target {:host-card card})",22],[":db.install/_partition :db.part/db}",22]],"useCount":3599},{"word":"instance","context":[["(if (instance? Atom a)",284],["(instance? RedNode right)",213],["(instance? RedNode left)",213],["(if (instance? RedNode app)",142],["[instance]",96],["(instance? RedNode del)",142],["(if (instance? RedNode ins)",142],["(instance? RedNode (.-right ins))",142],["(instance? RedNode (.-left ins))",142],["(when (instance? ExceptionInfo ex)",138]],"useCount":9889},{"word":"instruction","context":[["(tagged-instruction-erc 1000)",116],["(register-type-and-check-instruction",204],["(core/build-instruction",175],["(check-instruction-with-all-kinds-of-stack-stuff",155],["(i/execute-instruction",117],["instruction-name",87],["`build-instruction",81],["?set-stack ?items scalar-type ?instruction ?get-stack) => ?expected)",53],["?new-stacks                ?instruction             ?expected",38],["?new-stacks                ?instruction     ?expected",37]],"useCount":1648},{"word":"int","context":[["(defn unchecked-remainder-int [x n]",69],["(cljs.core/unchecked-negate-int x))",69],["(nth coll (rand-int (count coll))))",71],["(defn int",72],["(cljs.core/unchecked-dec-int x))",69],["([x y] (cljs.core/unchecked-multiply-int x y))",69],["(defn parse-int [s]",80],["(defn rand-int",100],["\"Coerce to long by stripping decimal places. Identical to `int'.\"",140],["\"Coerce to int by stripping decimal places.\"",140]],"useCount":5911},{"word":"integer","context":[["[n] (if (integer? n)",71],["\"Returns true if n is even, throws an exception if n is not an integer\"",71],["(throw (js/Error. (str \"Argument must be an integer: \" n)))))",71],["\"Returns true if n is odd, throws an exception if n is not an integer\"",71],["(defn ^boolean integer?",72],["\"Returns true if n is an integer.\"",70],[":integer int?",65],["\"Returns a random integer between 0 (inclusive) and n (exclusive).\"",100],[":integer true",352],[":integer",49]],"useCount":3209},{"word":"interval","context":[["(interval %1 %3 true)",35],["(interval %2 %4 true)",67],["[interval & children]",60],["interval",57],["(Thread/sleep interval)",57],["(part-time-fast interval",56],["(defer d interval))",50],["that each vector has events from a distinct n-second interval. Windows do",43],[":interval  (list",43],["r (rate interval",36]],"useCount":3858},{"word":"into","context":[["(into-array size-or-seq)))",272],["(into",276],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["(into {})))",580],["(into {}",1304],["(into []",261],["(into {}",192],["(into {}))]",191],["(into {}))",252],["(into {})",249]],"useCount":9730},{"word":"invalid","context":[["(let [response (app (request :get \"/invalid\"))]",210],[":result :invalid-move}))))",52],["(testing \"rejects invalid fields\"",57],["(let [response (app (mock/request :get \"/invalid\"))]",154],["{:type :invalid-subject-name",36],["(is (invalid?",37],[";; Top level extract using invalid fields should throw an error",38],["{:type    :invalid-alt-name",49],[":else          (throw (Exception. (str \"invalid port value: \" port))))))",40],["{:type    :invalid-subject-name",42]],"useCount":1941},{"word":"invoke","context":[["(-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]",93],["(-invoke [_ a b c d e f g h i j k l m n o p q r s]",93],["(-invoke [coll k]",651],["(-invoke [coll k not-found]",648],["(-invoke [node k not-found]",142],["(-invoke [_ a b c d e f g h i j k l m]",93],["(-invoke [_ a b c d e f g h i j k]",93],["(-invoke [node k]",142],["(-invoke [_ a b c d e f g h i j k l m n o p q]",93],["(-invoke [_ a b c]",93]],"useCount":5894},{"word":"io","context":[["(:require [clojure.java.io :as io])",404],["[clojure.java.io :as io])",496],["[clojure.java.io :as io])",496],["(:require [clojure.java.io :as io])",404],["[clojure.java.io :as io]))",835],["(:require [clojure.java.io :as io]",2072],["[clojure.java.io :as io]))",835],["(:require [clojure.java.io :as io]",2072],["[clojure.java.io :as io]",3814],["[clojure.java.io :as io]",3814]],"useCount":26360},{"word":"is","context":[["(is (= 200 (:status response)))",442],["(is (= 0 1))))",5214],["(is",3069],["(is (=",1456],["(is (= (:status response) 200))",1038],[";; the server is forced to re-resolve the symbol in the var",374],["Signature of the result value put on the channel is [].",390],["(is (thrown-with-msg?",790],["(is (thrown? IllegalArgumentException",489],["(is (= 0 (times-called publish)))",449]],"useCount":77507},{"word":"it","context":[["\"Restrict the query parameter of the supplied request so that it",87],["it will not perform a linear search for a value.  See also 'some'.\"",72],["the seq, retains the head and returns it, thus causing the entire",72],[";; changes, the server picks it up without having to restart.",374],[";; with total-error > 0 if it had error of zero on train but not on validation",113],[";; matching Clojure's stable sort, though docs don't promise it",72],["to it\"",72],["result of calling f with no arguments.  If coll has only 1 item, it",72],["If metadata-map is supplied, it will be come the metadata on the",72],[";; Try it with:",101]],"useCount":7232},{"word":"item","context":[["[item]",313],["(pred item) returns true. pred must be free of side-effects.\"",117],["(apply gen-wrap-helper api-table kind item-id config args))",255],["(defmacro gen-wrap [kind item-id config & args]",255],["item",114],["\"Returns a lazy seq of the first item in each coll, then the second etc.\"",72],["\"Returns the first item in the collection. Calls seq on its",72],["order is determined by comparing (keyfn item).  Comp can be",72],["(pred item) returns true. pred must be free of side-effects.",98],["item))",99]],"useCount":6892},{"word":"items","context":[["of second items in each coll, until any one of the colls is",97],["[items]",96],["set of first items of each coll, followed by applying f to the set",93],["\"Returns a seq of the items after the first. Calls seq on its",73],[":items",100],["argument.  If there are no more items, returns nil\"",73],["\"Returns true if coll has no items - same as (not (seq coll)).",74],["returns the result of applying f to the first 2 items in coll, then",104],["exhausted.  Any remaining items in other colls are ignored. Function",142],["\"Returns a lazy sequence of the items in coll for which",144]],"useCount":6338},{"word":"iter","context":[["(.hasNext iter))",70],["(if-not (.hasNext iter)",49],["(.push iters (iter coll)))",49],["(defn nil-iter []",49],["(defn iter [coll]",49],["(defn string-iter [x]",49],["(deftype Stepper [xform iter]",49],["(array? coll) (array-iter coll)",49],["(defn array-iter [x]",49],["(nil? coll) (nil-iter)",49]],"useCount":2535},{"word":"iterator","context":[[":else (throw (js/Error. (str \"Cannot create iterator from \" coll)))))",46],["(es6-entries-iterator (seq coll)))",137],["(es6-iterator (seq coll)))",180],["(-iterator [coll]",197],["(es6-iterator (keys coll)))",137],["(es6-iterator (vals coll)))",137],["(-iterator [this]",91],["(es6-set-entries-iterator (seq coll)))",90],["(iterator [this]",54],["collection implementing Iterable. For maps, the iterator should",51]],"useCount":2256},{"word":"its","context":[["\"If x is a Delay, returns the (possibly cached) value of its expression, else returns x\"",71],["map m as its metadata.\"",72],["\"Returns the first item in the collection. Calls seq on its",72],["do not overlap. If a pad collection is supplied, use its elements as",72],["(vector? bindings) \"a vector for its binding\"",83],[";; rather than having its own copy. When the root binding",374],["(apply f (meta obj) args) as its metadata.\"",71],["fn of 4 args: a key, the reference, its old-state, its",71],["\"Returns a possibly empty seq of the items after the first. Calls seq on its",72],["\"Returns a seq of the items after the first. Calls seq on its",73]],"useCount":2745},{"word":"j","context":[["(recur (inc i) (+ j 2))))))",142],["(if (< j len)",259],["(loop [j i]",144],["(loop [i 0 j 0]",142],["(:require [clojure.java.jdbc :as j]",132],["([from i to j len]",142],["(if-not (nil? (aget arr j))",142],["(aget arr (inc j))))",142],["(do (aset to j (aget from i))",142],["(recur (inc i) j)",142]],"useCount":10062},{"word":"jar","context":[[":jar true",85],[":cljsbuild {:jar true",316],[":jar-file (io/file (io/resource \"test.jar\"))",150],[":body \"Bad jar\")",52],[";; By declaring a classifier here and a corresponding profile below we'll get an additional jar",50],[":description \"An dog awesome and non-existent test jar.\"",49],["(:group_name jar)",44],[":jar-file (io/file (io/resource \"test.jar\"))",150],["(is (thrown? Exception (db/add-jar \"test-user\"",96],[";; during `lein jar` that has all the code in the test/ directory. Downstream projects can then",43]],"useCount":4276},{"word":"java","context":[["[clojure.java.io :as io]",3814],[":java-source-paths [\"src/java\"]",423],["[clojure.java.jdbc :as jdbc]",577],[":java-source-paths [\"src/java\"]",423],["(:require [clojure.java.io :as io])",404],["[clojure.java.io :as io]))",835],["[clojure.java.io :as io])",496],["(:require [clojure.java.io :as io]",2072],["(:require [clojure.java.io :as io]))",270],["java.lang.IllegalArgumentException",385]],"useCount":29170},{"word":"javax","context":[[":profiles {:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",52],["(javax.imageio ImageIO)",37],["[log4j \"1.2.17\" :exclusions [javax.mail/mail",40],["[javax.imageio ImageIO]",40],["(:import [javax.servlet ServletContext]))",42],["(:gen-class :extends javax.servlet.http.HttpServlet)",49],["[log4j/log4j \"1.2.17\" :exclusions [javax.mail/mail",91],["[javax.servlet/servlet-api \"2.5\"]",200],["{:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",259],["javax.jms/jms",255]],"useCount":1632},{"word":"jdbc","context":[["[puppetlabs.puppetdb.jdbc :as jdbc]",170],["[puppetlabs.puppetdb.jdbc :as jdbc]",170],["[org.clojure/java.jdbc \"0.4.2\"]",149],["[clojure.java.jdbc :as jdbc]",577],["(:require [clojure.java.jdbc :as jdbc]",234],["[clojure.java.jdbc :as jdbc]",577],["[clojure.java.jdbc :as sql]",254],["(:require [clojure.java.jdbc :as sql]",237],["(:require [clojure.java.jdbc :as jdbc]",234],["(jdbc/do-commands",229]],"useCount":7502},{"word":"jetty","context":[["[ring.adapter.jetty :refer [run-jetty]])",369],["[ring.adapter.jetty :as jetty]",375],["[ring.adapter.jetty :as jetty]",375],["[ring.adapter.jetty :refer [run-jetty]]))",146],["[ring.adapter.jetty :refer [run-jetty]]))",146],["[ring/ring-jetty-adapter \"1.4.0\"]",153],["[ring.adapter.jetty :refer [run-jetty]]",214],["[ring.adapter.jetty :refer [run-jetty]]",214],["(run-jetty app {:port port :join? false})))",274],["[ring.adapter.jetty :refer [run-jetty]])",369]],"useCount":5409},{"word":"jiksnu","context":[["[jiksnu.util :as util]",114],["[jiksnu.model.user :as model.user]",96],["[jiksnu.actions.user-actions :as actions.user]",65],["[jiksnu.model.activity :as model.activity]",61],["[jiksnu.templates.actions :as templates.actions]",60],["[jiksnu.ops :as ops]",60],["[jiksnu.templates.model :as templates.model]",58],["[jiksnu.model :as model]",120],["[jiksnu.mock :as mock]",131],["[jiksnu.test-helper :as th]",138]],"useCount":2211},{"word":"job","context":[["job {:workflow c/workflow",49],["job-1-id",54],["job-1",55],["(let [job {:workflow c/workflow",56],["(doto job",58],["[job error-data context structure-type]",70],["(onyx.api/submit-job",87],["[job]",92],["(onyx.api/submit-job peer-config job)",101],["(onyx.api/submit-job peer-config job)",101]],"useCount":3552},{"word":"join","context":[["(string/join",102],["(defn join",92],["(string/join \\newline errors)))",111],["[clojure.string :refer [join]]",121],["(run-jetty http-handler {:port port :join? false})))",123],[":join? false}))))",127],["(clojure.string/join",135],["(string/join \\newline)))",177],["(run-jetty app {:port port :join? false})))",274],[":join? false}))",388]],"useCount":4830},{"word":"jruby","context":[["[puppetlabs.services.jruby.jruby-puppet-service :as jruby]",57],["[puppetlabs.services.jruby.jruby-testutils :as jruby-testutils]",98],["[puppetlabs.services.jruby.jruby-testutils :as jruby-testutils]",98],["[puppetlabs.services.jruby.jruby-testutils :as jruby-testutils]",98],["(let [jruby-service (tk-app/get-service app :JRubyPuppetService)",83],["jruby-service",82],["[context :- jruby-schemas/PoolContext]",58],["[puppetlabs.services.jruby.jruby-puppet-service :as jruby]",57],["(jruby-protocol/get-environment-class-info-cache-generation-id!",57],["[puppetlabs.services.jruby.jruby-puppet-service :as jruby]",57]],"useCount":4158},{"word":"js","context":[[":asset-path \"js/compiled/out\"",272],[":source-map    \"resources/public/js/out.js.map\"",256],["(remove [_] (js/Error. \"Unsupported operation\")))",267],[":asset-path   \"js/out\"",280],[":output-dir \"resources/public/js/compiled/out\"",286],["(catch js/Error e",337],[":preamble      [\"react/react.min.js\"]",344],[":compiler {:output-to     \"resources/public/js/app.js\"",474],[":compiler {:output-to     \"resources/public/js/app.js\"",474],[":output-dir    \"resources/public/js/out\"",503]],"useCount":30491},{"word":"json","context":[["(:require [cheshire.core :as json]",428],["[clojure.data.json :as json]",1158],["(:require [clojure.data.json :as json]",334],["[cheshire.core :as json]",1049],["[org.clojure/data.json \"0.2.6\"]",474],["(:require [clojure.data.json :as json]",334],[":headers {\"Content-Type\" \"application/json\"}",293],["[org.clojure/data.json \"0.2.5\"]",292],["[clojure.data.json :as json]",1158],[":available-media-types [\"application/json\"]",368]],"useCount":19185},{"word":"k","context":[["(contains? coll k))",328],["(-invoke [coll k]",651],["(-invoke [coll k not-found]",648],["(-lookup coll k))",565],["(if (nil? k)",365],["(-lookup [coll k not-found]",294],["[k]",364],["(-assoc [coll k v]",366],["(-dissoc [coll k]",291],["(-lookup coll k not-found))",467]],"useCount":42566},{"word":"key","context":[["(clj->phaser key)",444],["(RedNode. (.-key left) (.-val left)",284],["(cond (== n 0) key",284],["(cond (nil? key-or-nil)",284],["(let [idx (hash-collision-node-find-index arr cnt key)]",434],["(-contains-key? [coll k]",290],["(key-test key key-or-nil)",284],["(key-test key key-or-nil)",284],["key-or-nil  (aget arr (* 2 idx))",284],["\"keyval => key val",359]],"useCount":36671},{"word":"keys","context":[["keys",241],["(not (nil? (scan-array 1 k keys))))",213],["[{:keys [replica log peer-choices]}",84],["[clojure.set :refer [rename-keys]]",85],["(keys [coll]",257],["[target message status {:keys [resp context]} state]",143],["(let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]",141],["(es6-iterator (keys coll)))",137],["[clojure.walk :refer [keywordize-keys]]",133],["[{:as ev-msg :keys [?data]}]",101]],"useCount":16935},{"word":"keyword","context":[["(json/read-str :key-fn keyword)",75],["keyfn (if keywordize-keys keyword str)",76],["You can pass attributes as a map or keyword value pairs (but not both at the",116],["wrap-keyword-params",103],["[ring.middleware.keyword-params :refer [wrap-keyword-params]]",101],["[ring.middleware.keyword-params :refer [wrap-keyword-params]]",101],["keyword))",88],["(keyword? x) (name x)",87],["; order. Any string, keyword, or symbol key is used as a property name",71],["(keyword? k)",73]],"useCount":4858},{"word":"kit","context":[["[http-kit \"2.1.18\"]",326],["[http-kit \"2.1.19\"]",312],["[http-kit \"2.1.13\"]",32],["[http-kit \"2.1.16\"]",272],[";; if you want to embed a ring handler into the figwheel http-kit",131],["[org.httpkit.server :as http-kit]",48],["[http-kit \"2.1.18\"]]",32],["[http-kit \"2.1.19\"]]",33],["[http-kit \"2.2.0\"]",35],[";; the server ring handler inside figwheel's http-kit server, so",50]],"useCount":1457},{"word":"kitchensink","context":[["(:require [puppetlabs.kitchensink.core :as kitchensink]",63],["(kitchensink/demarcate",68],["{:pre [(kitchensink/datetime? time)]}",29],["[puppetlabs/kitchensink ~ks-version]",49],["[puppetlabs.kitchensink.core :as ks]))",53],["(:require [puppetlabs.kitchensink.core :as kitchensink]",63],["[puppetlabs.kitchensink.core :as kitchensink]",360],["(kitchensink/select-values basic-events-map matches)",83],["[puppetlabs.kitchensink.core :as ks]",236],["[puppetlabs.kitchensink.core :as kitchensink]",360]],"useCount":1868},{"word":"ks","context":[["(if ks",156],["(ks/pprint-to-string response))",106],["(next ks)",95],["(ks/pprint-to-string response)))",80],["(let [k (aget ks i)]",145],["(recur ret (first ks) (next ks))",142],["[puppetlabs.kitchensink.core :as ks]",236],["(if ks",716],["(recur ret (first ks) (next ks))",142],["([coll k & ks]",143]],"useCount":6437},{"word":"kv","context":[["(-kv-reduce [coll f init]",350],["(kv-reduce [node f init]",142],["(inode-kv-reduce arr f init)))",102],["(not (nil? root)) (.kv-reduce root f init)",73],["(defn reduce-kv",72],["and f is not called. Note that reduce-kv is supported on vectors,",72],["(tree-map-kv-reduce node f init))",142],["(kv-reduce [inode f init]",217],["(reduce-kv",233],["(defn- tree-map-kv-reduce [node f init]",71]],"useCount":2839},{"word":"l","context":[["(-invoke [_ a b c d e f g h i j k l m n o p q r s]",93],["(-invoke [_ a b c d e f g h i j k l m n o p]",93],["(-invoke [_ a b c d e f g h i j k l m n o p q r]",93],["(-invoke [_ a b c d e f g h i j k l m n o p q r s t]",93],["(l/column",116],["a (allpass-l:ar a 0.3 [(+ (ranged-rand 0 0.2) 0.1) (+ (ranged-rand 0 0.2) 0.1)] 5)",126],["(when (< i l)",140],["[l]",200],["(-invoke [_ a b c d e f g h i j k l m n]",93],["(-invoke [_ a b c d e f g h i j k l]",93]],"useCount":7364},{"word":"label","context":[["[:label.col-sm-3.control-label label]",61],[":label label",44],[":label label",44],["label",43],[":properties [{:name \"name\" :type :str :gui-label \"Name\"}",38],["{:abilities [{:label \"Gain subroutines\"",37],["[:label",128],["(doseq [[label count?] [[\"without\" false]",50],["[:label.col-sm-3.control-label label]",61],["[:label.col-sm-3.control-label label]",61]],"useCount":2327},{"word":"lang","context":[["(.cljs$lang$applyTo f arglist)))",284],["fixed-arity (.-cljs$lang$maxFixedArity f)]",284],["clojure.lang.IFn",315],["(catch clojure.lang.ExceptionInfo e",213],["(if (.-cljs$lang$applyTo f)",355],["java.lang.IllegalArgumentException",385],["clojure.lang.IPersistentMap",211],["clojure.lang.IDeref",182],["clojure.lang.Seqable",180],["java.lang.String",169]],"useCount":8414},{"word":"last","context":[["chromex.error/get-last-error.\"",579],["more efficient than, last. If the collection is empty, returns nil.\"",72],["\"Return the last item in coll, in linear time\"",72],["chromex.error/get-last-error.",572],["(when-let [ed (last-active)]",253],["(when-let [ed (pool/last-active)]",248],["last",209],["last of which will be treated as a sequence.\"",72],["(last",119],["(defn last",72]],"useCount":5704},{"word":"layout","context":[[":layout-width :fill",52],["[layout]",53],["[salava.core.ui.layout :as layout]",41],["(view-layout",33],["(common/layout",46],["[salava.core.ui.layout :as layout]",41],["(layout/render \"about.html\"))",66],["(layout",123],["(layout/render",138],["(layout/common",150]],"useCount":1435},{"word":"lazy","context":[["\"Returns a seq of the items in coll in reverse order. Not lazy.\"",72],["([x] (lazy-seq (cons x (repeat x))))",73],["\"Returns a lazy seq of nums from start (inclusive) to end",73],["\"When lazy sequences are produced via functions that have side",144],["\"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"",73],["(set! (.-rest lt) (lazy-transformer (.-stepper lt)))",98],["(let [best-program (not-lazy (:program best))",117],["\"Returns a lazy sequence of the items in coll for which",144],["(lazy-seq",1290],["(lazy-seq",1860]],"useCount":7193},{"word":"leaf","context":[["(if ^boolean (.-val added-leaf?)",72],["(inode-assoc! [inode edit shift hash key val added-leaf?]",213],["(let [removed-leaf? (Box. false)",72],["(let [added-leaf? (Box. false)]",142],["(do (aset removed-leaf? 0 true)",142],["(do (set! (.-val added-leaf?) true)",142],["(let [added-leaf? (Box. false)",144],["(inode-assoc [inode shift hash key val added-leaf?]",213],["(inode-without! [inode edit shift hash key removed-leaf?]",213],["(set! (.-val added-leaf?) true)",430]],"useCount":3462},{"word":"left","context":[["(RedNode. (.-key left) (.-val left)",284],["(instance? RedNode left)",213],[":penv +0.0000  :key  60 :left   +0 :right  +0",182],["left",146],["(balance-left [node parent]",142],["(instance? RedNode (.-left ins))",142],["(let [app (tree-map-append (.-right left) (.-left right))]",142],["(.-left left)",426],["(.-left left)",426],["(RedNode. (.-key left) (.-val left)",284]],"useCount":12929},{"word":"legal","context":[["{:pre [(legal-coord? c0)]}",14],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],[";; http://www.eclipse.org/legal/epl-v10.html",16],["; http://www.eclipse.org/legal/epl-v10.html                                   :",17],[";* http://www.eclipse.org/legal/epl-v10.html",23],["; http://www.eclipse.org/legal/epl-v10.html",31],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"",34],[":url \"http://www.eclipse.org/legal/epl-v10.html\"",128],[";  http://www.eclipse.org/legal/epl-v10.html",131],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449]],"useCount":13315},{"word":"lein","context":[["(lein/-main [\"figwheel\"])))",269],["[leiningen.core.main :as lein]))",267],["[lein-environ \"1.0.0\"]]",280],[":plugins [[lein-cljsbuild \"1.0.5\"]",175],[":plugins [[lein-cljsbuild \"1.0.3\"]]",182],["[lein-asset-minifier \"0.2.2\"]]",214],["[lein-environ \"1.0.0\"]",264],[":min-lein-version \"2.0.0\"",1211],[":min-lein-version \"2.5.0\"",708],[":plugins [[lein-cljsbuild \"1.0.3\"]",323]],"useCount":13188},{"word":"leiningen","context":[[":eval-in-leiningen true)",462],[":eval-in-leiningen true",167],["[leiningen.core.main :as main]))",197],[":hooks [leiningen.cljsbuild]",488],["[leiningen \"2.5.1\"]",90],[":uberjar {:hooks [leiningen.cljsbuild]",120],["[leiningen.core.main :as main]",106],["(:require [leiningen.new.templates :refer [renderer name-to-path ->files]]",135],[":uberjar {:hooks [leiningen.cljsbuild minify-assets.plugin/hooks]",210],["[leiningen.core.main :as lein]))",267]],"useCount":3208},{"word":"len","context":[["(<= len i) -1",345],["(let [len (alength arr)]",426],["(if (< j len)",259],["(if (zero? len)",157],["(aset new-arr len key)",144],["(if (< i len)",829],["new-arr (make-array (+ len 2))]",144],["(array-copy arr 0 new-arr 0 len)",144],["(aset new-arr (inc len) val)",144],["([from i to j len]",142]],"useCount":7934},{"word":"length","context":[["(str \"Index \" n \" out of bounds for TransientVector of length\" cnt))))",71],["at end (defaults to length of string), exclusive.\"",72],["returns an infinite (or length n if supplied) lazy sequence of calls",72],["\"Returns the length of the array. Works on arrays of all types.\"",72],["(if (< n (.-length coll))",137],["(and (string? x) (== (.-length x) 1)) x",70],["\"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"",73],["(when (< n (.-length coll))",137],["(if (< k (.-length o))",139],["(when (< k (.-length o))",138]],"useCount":3057},{"word":"let","context":[["(let [idx (hash-collision-node-find-index arr cnt key)]",434],["(let [len (alength arr)]",426],["(let [",1261],["(let",306],["(let",1181],["(when-let [s (seq coll)]",1000],["(let [mem-map (-> (empty-memory-map)",312],["(let [c (chunk-first s)",355],["(let [idx  (mask hash shift)",426],["(let [port (if port (Integer/parseInt port) 3000)]",304]],"useCount":86729},{"word":"level","context":[[":level 4}",615],[":level 5}",614],[";(logging-config/set-logger! :level :debug)",276],[";(logging-config/set-logger! :level :info)",276],[":level 3}",272],["(if (pos? level)",203],["(- level 5))",142],["(if (zero? level)",142],[":trainer-level-max      100",138],[":trainer-level-min      1",138]],"useCount":7393},{"word":"li","context":[["(within [:nav [:li enlive/first-child] :a]",21],["[:li",433],["[:li",328],["(dom/li nil",138],["(dom/li",76],["(within [:div.error :ul :li]",73],["[:li {:role \"presentation\"}",22],["[:li (link-to (url-for (assoc jar",25],["{:tag :li",26],["(within [:article :div.error :ul :li]",63]],"useCount":1557},{"word":"lifecycle","context":[["{:lifecycle/task :write-segments",154],[":onyx/doc \"core.async plugin base lifecycle\"}",131],[":lifecycle/calls :onyx.plugin.core-async/writer-calls",120],["(defn inject-out-ch [event lifecycle]",120],["{:lifecycle/before-task-start inject-out-ch})",117],["(defn inject-in-ch [event lifecycle]",108],[":lifecycle/calls :onyx.plugin.core-async/reader-calls",108],["{:lifecycle/task :in",107],[":lifecycle/calls :onyx.plugin.core-async/reader-calls}",199],["{:lifecycle/task :out",230]],"useCount":3625},{"word":"limit","context":[["(testing \"limit results\"",60],["limit. Otherwise, it must be bound to an integer indicating the maximum",46],[":rate-limit nil",33],[":limit   1",36],["[limit]",84],["(limit 1))))",56],[":limit limit",46],["limit",38],["(ql/limit 5))))",51],[":limit limit",46]],"useCount":1906},{"word":"line","context":[["(doseq [line (line-seq rdr)]",90],["(doseq [line (line-seq rdr)]",90],[";; that script will have to take a file path and a line number",183],["[line]",256],[":line       10",65],[":line       20",71],["line",73],["(when line",89],["line-seq",79],["(read-line))",73]],"useCount":6885},{"word":"link","context":[["[:link",47],["[(link-to (if (= k window) {:class \"red\"} {})",39],["(link-to",35],["[hiccup.element :refer [link-to]]",54],["(link-to {:target \"_blank\"}",32],[":link nil,",31],["[link]",30],["(link-to \"/profile\" \"profile\")",30],["[:link {:rel \"stylesheet\"",58],["(link-to \"/logout\" \"logout\")])",30]],"useCount":2195},{"word":"list","context":[["(list",246],["(is (empty? (fs/list-dir discard-dir)))",157],[";; A list of data domains for the problem. Each domain is a vector containing",100],["(is (empty? (fs/list-dir discard-dir))))))",101],["(concat (list",111],[";; inputs is either a list or a function that, when called, will create a",113],["(let [ps (list* p1 p2 p3 ps)]",142],["(-seq [node] (list key val))",142],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],["(list",853]],"useCount":18168},{"word":"load","context":[["(:refer-clojure :exclude [load])",60],["peer-config (u/load-peer-config cluster-id)",56],["env-config (u/load-env-config cluster-id)",56],["xml/load-xml-ltree",57],["(fact :check-only-at-load-time",58],["(def config (load-config))",83],["[lt.util.load :as load]",92],["[lt.util.load :as load]",92],["config (load-config)",98],["[onyx.test-helper :refer [load-config]]",108]],"useCount":3228},{"word":"loc","context":[["(let [p (place loc)",54],["loc)))",42],["[loc]",286],["loc",87],["(if (zip/end? loc)",81],["loc))",57],["[loc]",53],["(fn [loc]",43],["(zip/root loc)",38],["(-> loc",28]],"useCount":1814},{"word":"local","context":[["(conf/master \"local[*]\")",85],[":local-repo help/local-repo))))",85],["[\"=\" \"certname\" \"foo.local\"]",131],[":local-repo help/local-repo))))",85],[":local-repo help/local-repo)",48],[":local-repo help/local-repo)",48],["(submit-local-topology (:nimbus cluster)",51],[":certname         \"foo.local\"",51],[":source \"//mbp.local/Puppet\",",56],["[clj-time.local :as l]",76]],"useCount":2921},{"word":"localhost","context":[["(let [response (http-get \"http://localhost:10000/hello-proxy/world\")]",57],[":repository {\"test\" {:url (str \"http://localhost:\" help/test-port \"/repo\")",64],["(repl/connect \"http://localhost:9000/repl\")",78],[":server-name \"localhost\"",80],[":proxy-config {:host \"localhost\"",100],["(weasel/connect \"ws://localhost:9001\" :verbose true :print #{:repl :console})",118],[":host \"localhost\"",152],[":websocket-url \"ws://localhost:3449/figwheel-ws\"",686],["(weasel/connect \"ws://localhost:9001\" :verbose true)",237],["(println (str \"You can view the site at http://localhost:\" port))))",374]],"useCount":4076},{"word":"location","context":[["[location]",36],["veh-location-str (get hdrs \"location\")]",26],[":subs {0 {:class :location}}}",37],["veh-location-str (get hdrs \"location\")]",26],["\"File for that location does not exist (or timed out)\")))",26],[":headers {\"location\" \"http://bar.com/bat\"}}",27],["user-location-str (get hdrs \"location\")",27],["user-location-str (get hdrs \"location\")",27],[":location",27],[":location \"foo\"",29]],"useCount":1511},{"word":"log","context":[["(:require [clojure.tools.logging :as log]",907],["[clojure.tools.logging :as log]",2424],["[clojure.tools.logging :as log]))",419],["[taoensso.timbre :as log]",288],["[clojure.tools.logging :as log])",276],["[taoensso.timbre :as log]))",161],["(:require [clojure.tools.logging :as log]))",131],["(log/error e)",104],[":log []",102],[";; :server-logfile \"tmp/logs/figwheel-logfile.log\"",132]],"useCount":12152},{"word":"logging","context":[["[clojure.tools.logging :as log]",2424],[";(logging-config/set-logger! :level :info)",276],["[clojure.tools.logging :as log]))",419],["[org.clojure/tools.logging \"0.3.1\"]",752],["[clj-logging-config.log4j :as logging-config]",278],["[clj-logging-config.log4j :as logging-config]",278],["[clojure.tools.logging :as logging]",386],["[clojure.tools.logging :as logging]",386],["(:require [clojure.tools.logging :as log]",907],["(logutils/with-test-logging",405]],"useCount":11255},{"word":"long","context":[["[^long n]",101],["(defn long",71],["(defn long-array",71],["(defn unchecked-long",69],["\"Coerce to long by stripping decimal places. Identical to `int'.\"",140],["[^long lim]",150],["ms (long 0)",43],[":db/valueType :db.type/long",320],["value      (if int? (long value) value)] ; cleaner if we have the right type",62],["(long-array size-or-seq nil)",68]],"useCount":2275},{"word":"lookup","context":[["(inode-lookup [inode shift hash key not-found]",217],["(-lookup [coll k not-found] (if (number? k)",165],["(-lookup coll k not-found)))",150],["(-lookup coll k not-found))",467],["(-lookup coll k nil))",218],["(-lookup [coll k]",221],["(-lookup [coll k] (-lookup coll k nil))",238],["(-lookup [coll k] (-lookup coll k nil))",238],["(-lookup [coll k not-found]",294],["(-lookup coll k))",565]],"useCount":7366},{"word":"loop","context":[["(go-loop []",820],["(loop []",433],["(loop [i 0 init init]",307],["(:require-macros [cljs.core.async.macros :refer [go go-loop]])",285],["(loop [i 0 s s]",282],["(loop [i 0]",217],["(go (loop []",191],["(loop [i 0]",874],["(loop []",1401],["(go-loop []",444]],"useCount":14372},{"word":"lot","context":[[";; TODO: Test a lot more, like content-type",13],[";; FIXME: This reclassing loses a lot of cells to nodata. Why?",11],["a-lot    (doall (repeatedly 1000000 random-event))",11],["(do (doseq [event a-lot]",11],["(testing \"I don't do a lot\\n\"",12],[";;resource-ref->resource-schema, but there are a lot of tests that",13],["\"I don't do a lot.\"",18],["; tests use a lot of PermGen (jruby instances)",20],["\"I don't do a whole lot.\"",984],["\"I don't do a whole lot ... yet.\"",1040]],"useCount":2133},{"word":"lt","context":[["[lt.objs.command :as cmd]",255],["(:require [lt.object :as object]",331],["[lt.objs.files :as files]",210],["(:require-macros [lt.macros :refer [behavior defui]]))",140],["[lt.util.dom :as dom]",149],["[lt.objs.editor :as editor]",150],["[lt.objs.notifos :as notifos]",151],["(:require-macros [lt.macros :refer [behavior]]))",158],["[lt.objs.editor.pool :as pool]",180],["(set! (.-stepper lt) nil)",196]],"useCount":5207},{"word":"m","context":[["m))",585],["m",336],["(fn [m]",301],["[quil.middleware :as m]",180],["(when-let [m (:metric event)]",175],["[m]",1324],["([m]",186],["(-> m",226],["m)",293],["m)))",272]],"useCount":24745},{"word":"macros","context":[["[figwheel.client :as figwheel :include-macros true]",395],["(:require-macros [cljs.core.async.macros :refer [go go-loop]])",285],["[sablono.core :as html :refer-macros [html]]",369],["[secretary.core :as secretary :include-macros true]",385],["(:require-macros [cljs.core.async.macros :refer [go]])",713],["[om.dom :as dom :include-macros true]",714],["(:require-macros",757],["(:require [om.core :as om :include-macros true]",1040],["[om.core :as om :include-macros true]",821],["(:require-macros [cljs.core.async.macros :refer [go]])",713]],"useCount":15645},{"word":"main","context":[["(defroutes main-routes",206],["(defn main []",385],["[leiningen.core.main :as lein]))",267],["(lein/-main [\"figwheel\"])))",269],["(testing \"main route\"",360],["(defn -main [& args]",2785],["(defn -main []",1199],["(defn -main",4140],["(core/main)",477],["(defn -main [& [port]]",449]],"useCount":17612},{"word":"make","context":[["(let [nodes (make-array 32)",142],["; We make no guarantees that this code is fit for any purpose.",73],["new-tail  (make-array 32)]",72],["(let [a (make-array size)]",282],["new-arr (make-array (+ len 2))]",144],["(->> (make-push-state)",113],["from make-hierarchy, if not supplied defaults to the global",142],["(let [new-arr (make-array (* 2 (inc cnt)))]",73],["new-arr (make-array len)]",85],[";;We make no guarantees that this code is fit for any purpose.",90]],"useCount":6748},{"word":"map","context":[["(map",2967],["(map-indexed",324],[":source-map true",388],["(let [mem-map (-> (empty-memory-map)",312],["(let [mem-map (-> (empty-memory-map)",312],["cpu-state (new-cpu-state mem-map)]",308],[":source-map-timestamp true",297],["(component/system-map",292],[":source-map true}}",443],["(map",521]],"useCount":47061},{"word":"maps","context":[["(reduce merge2 maps))))",74],["vectors, and JavaScript objects into ClojureScript maps.  With",75],["If any levels do not exist, hash-maps will be created.\"",72],["nested structure.  If any levels do not exist, hash-maps will be",72],["(when (some identity maps)",147],["\"Returns a map that consists of the rest of the maps conj-ed onto",146],["; assume all maps are counted",71],["(reduce #(conj (or %1 {}) %2) maps)))",71],["[f & maps]",76],["[& maps]",91]],"useCount":1950},{"word":"master","context":[["(conf/master \"local[*]\")",85],[":release-branch \"master\"",58],[":merge \"master\"}",53],["(let [stormroot (master-stormdist-root conf storm-id)]",36],["(initialize-master-ssl! settings \"master\" ca-settings)",31],["(assoc-in [:jruby-puppet :master-conf-dir]",32],[":file             \"/Users/foo/workspace/puppetlabs/conf/puppet/master/conf/manifests/site.pp\"",21],["exts          (create-master-extensions subject",22],["(conf/master \"local\")",28],["(initialize-master-ssl! settings \"master\" ca-settings)",31]],"useCount":1882},{"word":"match","context":[["[org.clojure/core.match \"0.3.0-alpha4\"]",185],["[clojure.core.match :refer [match]]))",72],["[clojure.core.match :refer [match]]",155],["[clojure.core.match :refer [match]]",155],["(match [path]",113],["(:require [clojure.core.match :refer [match]]",110],["(cm/match [node]",77],["(fn [strm event regex-match]",77],["(:require [clojure.core.match :refer [match]]",110],["[org.clojure/core.match \"0.2.1\"]",80]],"useCount":6238},{"word":"matches","context":[["(if (== (count matches) 1)",142],["(let [matches (.exec re s)]",171],["(first matches)",142],["(kitchensink/select-values basic-events-map matches)",83],["(when-not (nil? matches)",79],["\"Returns the result of (re-find re s) if re fully matches s.\"",71],["(when (= (first matches) s)",71],["\"Returns a lazy sequence of successive matches of re in s.\"",71],["(defn re-matches",71],["(vec matches))))",102]],"useCount":2523},{"word":"math","context":[["(set! *unchecked-math* :warn-on-boxed)",87],["(:require [clojure.math.numeric-tower :as math]))",112],["[org.clojure/math.combinatorics \"0.1.1\"]",84],["(:require [clojure.math.numeric-tower :as math]",95],["(:require [clojure.math.numeric-tower :as math]",95],["(:require [clojure.math.numeric-tower :as math]))",112],["[org.clojure/math.numeric-tower \"0.0.4\"]",233],["(set! *unchecked-math* true)",134],["[clojure.math.numeric-tower :as math]",118],["[clojure.math.numeric-tower :as math]",118]],"useCount":3189},{"word":"matrix","context":[["(matrix",61],["(push-matrix)",74],["[matrix]",79],["(q/push-matrix)",101],["(:use clojure.core.matrix)",67],["[clojure.core.matrix :as m]",65],["[clojure.core.matrix :as mat]",43],["(:require [clojure.core.matrix :as m]",41],["(q/pop-matrix)))",40],["(pop-matrix)))",39]],"useCount":1575},{"word":"max","context":[[":onyx/max-peers 1",686],["[board max-pos pos]",71],[":trainer-level-max      100",138],[":max-generations 300",105],[":rv-max-states      10",78],["(apply max",77],[":max-message-per-msecs nil",75],["([x y] (cljs.core/max x y))",73],["(defn max-key",71],["(reduce #(max-key k %1 %2) (max-key k x y) more)))",71]],"useCount":5117},{"word":"md","context":[["[:div.col-md-12",83],["[markdown.core :refer [md-to-html-string]]",92],["[\"README.md\" (render \"README.md\" data)]",139],["[\"README.md\" (render \"README.md\" data)]",139],["[:div.col-md-12",211],["(filters/add-filter! :markdown (fn [content] [:safe (md-to-html-string content)]))",74],["[:div.col-md-6",69],["[md-icon-button",61],["[:div.col-md-4",56],["[:div.col-md-6",51]],"useCount":2047},{"word":"me","context":[["[me.raynes/fs \"1.4.6\"]",153],["[me.raynes/fs \"1.4.5\"]",58],["(-val me)))",68],["(-key me)))",68],["(:require [me.raynes.fs :as fs]",100],["(deftest replace-me ;; FIXME: write",110],["[me.raynes.fs :as fs]))",117],["[me.raynes.fs :as fs]",508],["(this-as me",122],["(let [^not-native me (-first mseq)]",136]],"useCount":2134},{"word":"media","context":[[":available-media-types media-types",39],[":available-media-types media-types",39],["pct (rucore/parse-media-type (get hdrs \"Content-Type\"))",57],[":available-media-types [\"text/plain\"]",53],[":available-media-types [\"text/html\"]",170],[":available-media-types [\"application/json\"]",368],["[garden.stylesheet :refer [at-media]]",21],[":available-media-types [\"application/edn\"]",27],[":available-media-types [\"application/edn\" \"application/json\"]",27],["[:div.media-body",31]],"useCount":1432},{"word":"merge","context":[["(let [merge-entry (fn [m e]",72],["(reduce merge-entry (or m1 {}) (seq m2)))]",74],["merge",76],["(merge",1195],["(merge",412],["(apply merge",132],[";; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100],["(merge-with",87],["(defn merge",84],["(timbre/merge-config!",77]],"useCount":6862},{"word":"message","context":[[":message",10382],[":message      nil",74],[":max-message-per-msecs nil",75],["(with-message-handler {:keys [handle-message dlo delay-pool q]}",82],["(with-message-handler {:keys [handle-message dlo delay-pool q]}",82],["[target message status args state]",88],["(when (pos? (:velocity message))",92],[":message-id 0",103],["[target message status {:keys [resp context]} state]",143],["[message]",324]],"useCount":19357},{"word":"meta","context":[["(-meta [coll] meta)",1448],["(-meta [coll] meta)",1448],["(-meta [coll] _meta)",205],["(:refer-clojure :only [defmacro defn apply declare meta let partial])",254],["(with-meta",559],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["[:meta {:name \"viewport\"",278],["(-empty [coll] (with-meta (.-EMPTY List) meta))",398],["(-empty [coll] (with-meta (.-EMPTY List) meta))",398],["[:meta {:charset \"utf-8\"}]",512]],"useCount":28447},{"word":"metabase","context":[["[metabase.events :as events]",87],["[metabase.util :as u]))",277],["[metabase.db :as db]",261],["[metabase.driver :as driver]",156],["[metabase.test.data :refer :all]",134],["[metabase.db :refer :all]",115],["[metabase.test.data.users :refer :all]",104],["[metabase.util :as u])",101],["[metabase.util :as u]",93],["[metabase.api.common :refer :all]",84]],"useCount":2717},{"word":"metadata","context":[[":meta metadata-map",72],["(metadata:hasPriority 10)",76],["\"Returns the metadata of obj, returns nil if there is no metadata.\"",73],["\"Returns the metadata of obj, returns nil if there is no metadata.\"",73],["map m as its metadata.\"",72],["If metadata-map is supplied, it will be come the metadata on the",72],["If metadata-map is supplied, it will be come the metadata on the",72],["\"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:",71],["\"Atomically resets the metadata for an atom\"",71],["(metadata:hasPriority 0)",215]],"useCount":2702},{"word":"method","context":[["method [:get :post]]",400],["target-fn (-get-method mf dispatch-val)]",1175],["(throw-no-method-error name dispatch-val))",1157],[":request-method :post",298],[":request-method :put",279],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],[":request-method :get",174]],"useCount":13057},{"word":"methods","context":[["(str \"Multiple methods in multimethod '\" name",71],[":allowed-methods [:get]",261],[":allowed-methods [:post]",154],[":allowed-methods [:get :post]",85],["(-methods [mf])",71],["(defn methods",71],["\"Removes all of the methods of multimethod.\"",71],["(defn remove-all-methods",71],["(-methods [mf] @method-table)",71],["[multifn] (-methods multifn))",71]],"useCount":1695},{"word":"metric","context":[["(is (= (map :metric (run-stream-intervals",138],["(test-stream (top 1 :metric)",80],["(doseq [m metrics] (r {:metric m}))",70],["events [{:metric 15} {:metric 8} {:metric 2}]",64],["events [{:metric 15} {:metric 8} {:metric 2}]",64],["events [{:metric 15} {:metric 8} {:metric 2}]",64],["(is (= expect (vec (map (fn [s] (:metric s)) (deref output)))))))",52],["(test-stream (top 2 :metric)",80],["{:metric 1}",84],["(when-let [m (:metric event)]",175]],"useCount":7385},{"word":"metrics","context":[["[metrics.meters :refer [meter mark!]]",26],["metrics [0.5 1 1.5 2 2.5]",70],["(doseq [m metrics] (r {:metric m}))",70],["[metrics.timers :refer [timer time!]]",40],["[metrics.timers :as timers]",31],["\"Sums all metrics together. Emits the most recent event each time this",28],["average of all received metrics.\"",28],["[metrics.counters :as counters]",27],["Events without metrics are passed through unchanged. Events with metrics",25],["(inc! (:updated-catalog performance-metrics))",26]],"useCount":1920},{"word":"mf","context":[["target-fn (-get-method mf dispatch-val)]",1175],["mf)",213],["(swap! cached-hierarchy (fn [mf] nil))",71],["(swap! method-table (fn [mf] {}))",71],["(swap! prefer-table (fn [mf] {}))",71],["(-prefer-method [mf dispatch-val-x dispatch-val-y]",71],["(-prefer-method [mf dispatch-val dispatch-val-y])",71],["(swap! method-cache (fn [mf] {}))",71],["(-get-method [mf dispatch-val])",71],["(-remove-method [mf dispatch-val]",71]],"useCount":3993},{"word":"middleware","context":[["[prone.middleware :refer [wrap-exceptions]]",388],[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["[ring.middleware.resource :refer [wrap-resource]]",195],["[ring.middleware.defaults :refer [wrap-defaults site-defaults]]",203],["[ring.middleware.reload :as reload]",381],["[ring.middleware file-info file]))",359],["[ring.middleware.params :refer [wrap-params]]",357],["[ring.middleware.defaults :refer [site-defaults wrap-defaults]]",351],["[ring.middleware.defaults :refer [wrap-defaults api-defaults]]",210],["[ring.middleware.reload :refer [wrap-reload]]",325]],"useCount":10821},{"word":"midje","context":[[":plugins [[lein-midje \"3.1.3\"]",89],[":plugins [[lein-midje \"3.1.3\"]]}})",75],["[midje \"1.6.3\"]",93],["[midje.sweet :refer :all])",94],["(:use midje.sweet))",215],["(:use midje.sweet",277],["[midje.sweet :refer :all]))",307],["[midje.sweet :refer :all]",460],["(:use midje.sweet)",669],["(:require [midje.sweet :refer :all]",1083]],"useCount":5900},{"word":"min","context":[[":preamble      [\"react/react.min.js\"]",344],[":min-lein-version \"2.5.0\"",708],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],[":min-lein-version \"2.0.0\"",1211],["{:id \"min\"",190],["(include-css (if (env :dev) \"css/site.css\" \"css/site.min.css\"))]",147],[":preamble [\"react/react.min.js\"]",104],[":preamble             [\"react/react.min.js\"]}}]",105],[":trainer-level-min      1",138],[":min-lein-version \"2.0.0\")",128]],"useCount":6096},{"word":"mock","context":[["(let [response (app (mock/request :get \"/\"))]",149],["[ring.mock.request :as mock]",375],[":dependencies [[ring/ring-mock \"0.3.0\"]",142],["[jiksnu.mock :as mock]",131],["[ring-mock \"0.1.5\"]",140],["(let [response (app (mock/request :get \"/invalid\"))]",154],["[ring-mock \"0.1.5\"]]}})",162],[":dependencies [[ring-mock \"0.1.5\"]",184],["ring.mock.request",289],["[ring.mock.request :as mock]",375]],"useCount":4235},{"word":"mode","context":[["; fun-mode.",46],["\"used for starting the server in development mode from REPL\"",378],[":middleware [m/fun-mode])",163],["(throw (Exception. \"Figwheel is not available in prod mode\")))",122],["(throw (Exception. \"Browser connected REPL is not available in prod mode\")))",122],["(q/color-mode :hsb)",71],[":middleware [m/fun-mode])",58],[":middleware [m/fun-mode]))",57],["; This sketch uses functional-mode middleware.",45],["; Set color mode to HSB (HSV) instead of default RGB.",41]],"useCount":2576},{"word":"model","context":[["[jiksnu.templates.model :as templates.model]",58],["[model]",132],["[jiksnu.model :as model]",120],["[jiksnu.model :as model]",120],["[jiksnu.model.user :as model.user]",96],["[jiksnu.model.user :as model.user]",96],["model",83],["[jiksnu.model.activity :as model.activity]",61],["[jiksnu.model.activity :as model.activity]",61],["[jiksnu.templates.model :as templates.model]",58]],"useCount":3779},{"word":"month","context":[["(datetime 2013 2 18 :day-of-week 1 :day 18 :month 2)",37],["(intersect %3 (day-of-month (:value %1)))",26],["\"named-month\"",312],[":grain :month}",42],["(intersect %1 (day-of-month (:value %2)))",35],["(intersect %2 (day-of-month (:value %1)))",32],["(month [this] (.getMonthOfYear this))",30],["([year month]",27],["(month 9)",26],["(month 6)",26]],"useCount":2417},{"word":"more","context":[["(recur y (first more) (next more))",432],["more))",144],["([x y & more]",198],["(if (nil? more)",215],["(if (next more)",432],["(recur y (first more) (next more))",432],["([x y & more]",950],["([k x y & more]",142],["(ChunkedCons. (-drop-first chunk) more meta nil)",137],[";;Visit http://www.pragmaticprogrammer.com/titles/shcloj2 for more book information.",90]],"useCount":9961},{"word":"mount","context":[["{:component-did-mount",94],["(defn mount-root []",354],["(did-mount [_]",461],["(will-mount [_]",608],["(mount-root))",336],[":jsload-callback core/mount-root)",277],["mount-target",129],["(def mount-target",110],[":component-did-mount",109],["(will-mount [this]",74]],"useCount":3784},{"word":"mseq","context":[["(deftype ValSeq [^not-native mseq _meta]",68],["(let [nseq (if (satisfies? INext mseq)",272],["(next mseq))]",272],["(-next mseq)",272],["(when-let [mseq (seq hash-map)]",136],["(let [^not-native me (-first mseq)]",136],["(ValSeq. mseq nil)))",68],["(-with-meta [coll new-meta] (KeySeq. mseq new-meta))",68],["(-with-meta [coll new-meta] (ValSeq. mseq new-meta))",68],["(KeySeq. mseq nil)))",68]],"useCount":1496},{"word":"msg","context":[["errors (exit 1 (error-msg errors)))",138],["(defn error-msg [errors]",165],["(fn [msg]",173],["(is (thrown+-with-msg?",179],["(is (thrown-with-msg? IllegalArgumentException",111],["(defn exit [status msg]",185],["(println msg)",299],["[msg]",346],["(test-msg-handler command publish discard-dir",388],["(is (thrown-with-msg?",790]],"useCount":11594},{"word":"must","context":[["\"Sets the validator-fn for an atom. validator-fn must be nil or a",71],["tag. Parent must be a namespace-qualified symbol or keyword and",71],["atom. validate-fn must be nil or a side-effect-free fn of one",72],["items, f must accept no arguments as well, and reduce returns the",72],[":else (throw (js/Error. \"Argument to char must be a character or number\"))))",75],["(pred item) returns true. pred must be free of side-effects.",98],["(pred item) returns true. pred must be free of side-effects.\"",117],["this means false return values will be included.  f must be free of",142],["\"sc must be a sorted collection, test(s) one of <, <=, > or",142],[";; must be called after routes have been defined",193]],"useCount":3240},{"word":"mutable","context":[["(deftype TransientHashMap [^:mutable ^boolean edit",73],["(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]",71],["(deftype PersistentQueue [meta count front rear ^:mutable __hash]",71],["(deftype PersistentTreeMap [comp tree cnt meta ^:mutable __hash]",71],["^:mutable shift",72],["(deftype Box [^:mutable val])",72],["^:mutable collision-hash",73],["^:mutable arr]",73],["^:mutable cnt",73],["^:mutable root",145]],"useCount":4582},{"word":"n","context":[["[n d]",289],["[n]",2042],["[x n]",290],["(fn [n]",321],["n",330],["(if (zero? n)",347],["(recur nval (inc n))))",428],["(if (< n cnt)",429],["([n coll]",443],["\"\\n\"",332]],"useCount":48964},{"word":"name","context":[[":name",372],["{:name \"callback\",",180],[":name name",273],[":name name",273],["[:meta {:name \"viewport\"",278],["{:code-chunk/face [:faces/by-name \"default\"],:code-chunk/string",469],["name",470],[":scm {:name \"git\"",493],["[name]",839],["(throw-no-method-error name dispatch-val))",1157]],"useCount":43436},{"word":"names","context":[["(doseq [name names]",39],[":lispify-names? true",29],[";;  corresponding table names where the fields reside",30],[":command {:command (command-names :deactivate-node)",42],["msg-names (map :msg-name msg-hist)",44],["(reload-file-state? msg-names opts)",44],[":let [command {:command (command-names :replace-catalog)",46],["[puppetlabs.puppetdb.command.constants :refer [command-names]]",52],["\"Takes a JavaScript object and a map of names to functions and",71],["(and (= (first msg-names) :files-changed)",44]],"useCount":2797},{"word":"namespace","context":[["(assert (namespace parent))",71],[";; (assert (or (class? tag) (and (instance? cljs.core.Named tag) (namespace tag))))",71],["tag. Parent must be a namespace-qualified symbol or keyword and",71],["child can be either a namespace-qualified symbol or keyword or a",71],["[clojure.tools.namespace.repl :refer [refresh refresh-all]]",72],["(defn namespace",73],["[clojure.tools.namespace.repl :refer [refresh]]",102],["[org.clojure/tools.namespace \"0.2.11\"]",124],["[clojure.tools.namespace.repl :refer (refresh refresh-all)]",125],["(-namespace [_] ns)",136]],"useCount":3300},{"word":"native","context":[["(-lookup ^not-native o k)",70],["(-lookup ^not-native o k not-found)",70],["(-pr-writer ^not-native obj writer opts)",70],["(loop [i (alength arr) ^not-native r ()]",70],["(native!)",76],["(native-satisfies? IIndexed coll)",126],["(native-satisfies? IReduce coll)",126],["(native-satisfies? ILookup o)",128],["(let [^not-native me (-first mseq)]",136],["; code generation for native API wrapper",255]],"useCount":3446},{"word":"ndx0","context":[["(for [ndx0 (range 0          (- (count xs) 3))",9728],["ndx1 (range (inc ndx0) (- (count xs) 2))",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728]],"useCount":38912},{"word":"ndx1","context":[["ndx1 (range (inc ndx0) (- (count xs) 2))",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],["ndx2 (range (inc ndx1) (- (count xs) 1))",9728]],"useCount":38912},{"word":"ndx2","context":[[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],["ndx3 (range (inc ndx2) (count xs))",9728],["ndx2 (range (inc ndx1) (- (count xs) 1))",9728]],"useCount":38912},{"word":"ndx3","context":[["ndx3 (range (inc ndx2) (count xs))",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728]],"useCount":29184},{"word":"net","context":[["[net.cgrand.enlive-html :as html]",271],["(html/html-resource (java.net.URL. url)))",66],["[net]",67],["(:require [net.cgrand.enlive-html :as html]))",74],["[net.cgrand.enlive-html :as enlive]",110],["[net.cgrand.reload :refer [auto-reload]]",136],["[net.cgrand.enlive-html :refer [set-attr prepend append html]]",243],["[net.cgrand.enlive-html :refer [deftemplate]]",250],["(:require [net.cgrand.enlive-html :as html]",252],["[net.cgrand.enlive-html :as html]))",101]],"useCount":4223},{"word":"new","context":[["(set! root new-root)",144],["(aset new-arr (inc len) val)",144],["(array-copy arr 0 new-arr 0 len)",144],["new-arr (make-array (+ len 2))]",144],["(set! tail new-tail)",145],["(if (identical? new-root root)",146],["(-with-meta [coll new-meta]",152],["(new-game",163],["(new-game (default-corp)",277],["cpu-state (new-cpu-state mem-map)]",308]],"useCount":23941},{"word":"newline","context":[["(when (get opts :flush-on-newline)",71],["{:flush-on-newline *flush-on-newline*",71],["\"Same as pr-str followed by (newline)\"",71],["(set! *print-newline* false)",92],["(string/join \\newline errors)))",111],["(newline (pr-opts))))",122],["(when *print-newline*",122],["(newline)",220],["(string/join \\newline)))",177],["\\newline",151]],"useCount":2496},{"word":"next","context":[["(next [_]",515],["(next es))",162],["(-chunked-next [coll]",175],["(next s)))",209],["(next mseq))]",272],["(-next mseq)",272],["(recur (inc i) (next s)))",282],["(recur y (first more) (next more))",432],["(if (next more)",432],["(-next [coll]",604]],"useCount":15284},{"word":"nil","context":[["nil)))",1382],["nil))",1815],["nil",1902],["nil)",2624],["nil)",2845],["nil",4704],["({:tag :br, :attrs nil, :content nil}",5208],["({:tag :br, :attrs nil, :content nil}",5208],["{:tag :br, :attrs nil, :content nil}",23688],["{:tag :br, :attrs nil, :content nil}",23688]],"useCount":156278},{"word":"nimbus","context":[["(let [uploaders (:uploaders nimbus)",24],[":rebalance (rebalance-transition nimbus storm-id status)",24],["(locking (:submit-lock nimbus)",35],["(let [tplg (.getTopologyInfo ^Nimbus$Client nimbus id)",36],[":kill (kill-transition nimbus storm-id)",48],["(submit-local-topology (:nimbus cluster)",51],["(let [conf (:conf nimbus)",69],["(let [storm-cluster-state (:storm-cluster-state nimbus)",92],["(with-nimbus nimbus",85],["(with-nimbus nimbus",85]],"useCount":2501},{"word":"no","context":[[";;We make no guarantees that this code is fit for any purpose.",90],["(throw-no-method-error name dispatch-val))",1157],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["Returns a transducer when no collection is provided.\"",197],["(no-stroke)",162],["transducer when no collection is provided.\"",147],["\"If no denominators are supplied, returns 1/numerator,",140],["(q/no-stroke)",135],["no collection is provided.\"",115],["Returns a stateful transducer when no collection is provided.\"",84]],"useCount":7812},{"word":"node","context":[["[node]",502],["(set! root node))",146],["val-or-node (aget arr (inc (* 2 idx)))]",426],["node))))",150],["node",155],["(if (nil? node)",213],["(let [idx         (bitmap-indexed-node-index bitmap bit)",284],["(if-not (nil? node)",357],["node (aget arr idx)]",426],["(let [idx (hash-collision-node-find-index arr cnt key)]",434]],"useCount":27523},{"word":"nodes","context":[["(create-inode-seq nodes (+ i 2) nil)",71],["(NodeSeq. nil nodes i s nil))))",71],["([meta nodes i s]",71],["\"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.",71],["([nodes]",72],["[nodes]",74],["[\"from\" \"nodes\"",86],["(let [len (alength nodes)]",140],["(let [nodes (make-array 32)",142],["(do (aset nodes i",142]],"useCount":3859},{"word":"non","context":[["\"Returns non-nil if nums are in monotonically non-increasing order,",71],["; non-string key is assoc'ed, return a HashMap object instead.",71],["\"Returns non-nil if nums are in monotonically increasing order,",71],["returns that non-fn value. Note that if you want to return a fn as a",71],["(expect-with-non-timeseries-dbs",187],["\"Returns non-nil if nums are in monotonically decreasing order,",71],["\"Returns non-nil if nums all have the equivalent",71],["\"Returns a lazy sequence of the non-nil results of (f item). Note,",71],["\"Returns non-nil if nums are in monotonically non-decreasing order,",71],["\"Returns non-nil if nums are in monotonically non-decreasing order,",71]],"useCount":2114},{"word":"none","context":[["\"text-decoration: none; font-family: monospace; color: #808080;\",",45],["(if (or (keyword-identical? pval ::none)",49],["(let [pa (volatile! ::none)]",43],["that would apply to that value, or nil if none apply and no default\"",71],[":optimizations        :none",89],["\"border:1px solid #808080;padding:5px;background-color:#EBEFF2;display:none\",",174],["\"text-decoration:none;font-family:monospace;color:#808080\"},",174],[":optimizations :none}}",211],[":optimizations :none",1764],[":optimizations :none}}]})",46]],"useCount":3422},{"word":"not","context":[["(-lookup coll k not-found))",467],["(when-not target-fn",1175],["not-found",776],["(if-not (nil? coll)",465],["(when-not (nil? coll)",665],["(-invoke [coll k not-found]",648],["not-found))",571],["not-found)))",554],["(route/not-found \"Not Found\"))",545],["not-found)",495]],"useCount":48036},{"word":"now","context":[["_ (store-example-report! basic2 (now))",61],["(store-example-report! (:basic reports) (now))",70],["[clj-time.core :only [now]]",73],["(defn now",76],["; Define error function. For now, each run uses different random inputs",80],[":producer_timestamp (now)",134],["[clj-time.core :refer [now]]",160],["(defn now []",54],[":producer_timestamp (now)})",183],[":timestamp (now)",344]],"useCount":3672},{"word":"nrepl","context":[[":repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",121],["[org.clojure/tools.nrepl \"0.2.3\"]",103],[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["[org.clojure/tools.nrepl \"0.2.12\"]",264],["[org.clojure/tools.nrepl \"0.2.10\"]",246],[":nrepl-port 7002",227],[":nrepl-middleware [\"cemerick.piggieback/wrap-cljs-repl\"",99],["[org.clojure/tools.nrepl \"0.2.11\"]",86],["[clojure.tools.nrepl.server :as nrepl]",69],[";; :nrepl-port 7888",160]],"useCount":4542},{"word":"ns","context":[["[ns]",181],[";(debug/debug-ns *ns*)",274],[";(debug/debug-ns *ns*)",274],[":ns \"cljs.core\",",109],[":repl-options {:init-ns user}",176],["(-namespace [_] ns)",136],["(auto-reload *ns*)",131],["(ns user",711],["(.-ns a) (if-not (.-ns b)",105],["(ns",692]],"useCount":14114},{"word":"nth","context":[["(recur (-assoc ret (-nth e 0) (-nth e 1))",162],["(-nth [coll n]",288],["(recur (-assoc ret (-nth e 0) (-nth e 1))",162],["(-nth [node n]",142],["(-nth [coll n not-found]",288],["(-nth coll k not-found)",166],["(-nth coll n)",224],["(let [nval (f val (-nth cicoll n))]",213],["(-assoc coll (-nth entry 0) (-nth entry 1))",289],["(-assoc coll (-nth entry 0) (-nth entry 1))",289]],"useCount":8512},{"word":"num","context":[["\"Returns a number one greater than num.\"",71],["[num div]",40],["num",48],["(tm/reset-num!)",51],["\"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers\"",69],["\"Returns true if num is greater than zero, else false\"",71],["\"Returns a number one less than num.\"",71],["\"Returns true if num is less than zero, else false\"",71],["\"Modulus of num and div. Truncates toward negative infinity.\"",71],["[num]",219]],"useCount":2278},{"word":"number","context":[["{:dim :number",455],["{:pre [(number? n)]}",126],["(not (number? n))",113],["(if (number? key)",111],["f should accept number-of-colls arguments.\"",93],[":validate [#(< 0 % 0x10000) \"Must be a number between 0 and 65536\"]]",84],["[number]",171],["(-lookup [coll k not-found] (if (number? k)",165],["(if (number? size-or-seq)",272],[";; that script will have to take a file path and a line number",183]],"useCount":12124},{"word":"numeric","context":[["[org.clojure/math.numeric-tower \"0.0.4\"]",233],["PROTECTED numeric,",264],["DISPLAY numeric,",264],["GLOBAL_DICT_ID numeric NOT NULL,",311],["REVISION_DELETE_FLAG numeric,",380],["DELETED_FLAG numeric(1) NOT NULL,",392],["DLP_REVISION_NUMBER numeric NOT NULL,",404],["CASE_ID numeric NOT NULL,",416],["SEQ_NUM numeric NOT NULL,",421],["ENTERPRISE_ID numeric NOT NULL,",1393]],"useCount":10173},{"word":"nval","context":[["@nval",499],["(if (reduced? nval)",499],["(recur nval (inc n))))",428],["(let [nval (f val (aget arr n))]",216],["(let [nval (f val (-nth cicoll n))]",213],["(recur nval (next coll))))",71],["(let [nval (f val (first coll))]",71]],"useCount":1997},{"word":"o","context":[["(if (satisfies? IMapEntry o)",147],["(loop [es (seq o) tcoll tcoll]",144],["(-conj [node o] [key val o])",142],["(-conj [coll o] (cons o coll))",478],["[o]",198],["(string? o)",205],["(-conj! [tcoll o]",213],["(cons o coll))",347],["(-conj [coll o] (cons o coll))",478],["(-conj [coll o]",705]],"useCount":17822},{"word":"obj","context":[["(js-obj",137],["[obj]",101],["(nil? obj) (-write writer \"nil\")",121],["[obj x]",104],["obj))",100],["obj",89],["[obj writer opts]",108],["obj)",119],["[obj]",574],["\"Returns an object of the same type and value as obj, with",143]],"useCount":11480},{"word":"object","context":[["[lt.object :as object]",84],["[goog.object :as gobject]",78],["[lt.object :as object]",84],[":type \"object\"",95],["[object]",102],["[object k & options]",121],["\"Returns an object of the same type and value as obj, with",143],[":triggers #{:object.instant}",208],["(:require [lt.object :as object]",331],["(:require [lt.object :as object]",331]],"useCount":6736},{"word":"objs","context":[["[& objs]",497],["[lt.objs.command :as cmd]",255],["[objs opts]",213],["[lt.objs.console :as console]",101],["[lt.objs.tabs :as tabs]",110],["[lt.objs.notifos :as notifos]",151],["[lt.objs.editor.pool :as pool]",180],["[lt.objs.files :as files]",210],["(if (empty? objs)",140],["[lt.objs.editor :as editor]",150]],"useCount":4467},{"word":"of","context":[[";; This Source Code Form is subject to the terms of the Mozilla Public",183],["(let [idx (array-map-index-of coll k)]",215],["\"Returns the product of nums. (*) returns 1.\"",209],["\"Returns the sum of nums. (+) returns 0.\"",209],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["Signature of the result value put on the channel is [].",390],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],["(throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))",162],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],["Signature of the result value put on the channel is [result] where:",192]],"useCount":42492},{"word":"off","context":[["(if (< (inc off) (alength node))",144],["(if (env :dev) (parser/cache-off!))",76],["(let [s (chunked-seq vec node i (inc off))]",142],["(array-chunk node off))",72],["([vec node i off meta]",72],["(if (< (- cnt (tail-off coll)) 32)",71],["([arr off]",71],["(chunked-seq vec node i off m))",71],["(if (and (>= i 0) (< i (- end off)))",71],["(aget node off))",72]],"useCount":3553},{"word":"offset","context":[[":camera-offset \"cameraOffset\"",32],["offset",36],[":offset offset",62],[":offset offset",62],["(testing \"offset\"",69],["[offset]",31],["(doseq [[offset expected] expected-sequences]",30],["[cmd {:keys #{parse-tree buffer}} {:keys [^String text offset length] :as t}]",30],[":offset offset})]",28],[":offset offset})]",28]],"useCount":1553},{"word":"ok","context":[["(with :state \\\"ok\\\" index))\"",75],["(ok",66],["{:status :ok})",54],["[ring.util.http-response :refer [ok]]",53],[":state \"ok\"",183],["{:status :ok",98],["(is (= status http/status-ok))",107],[":handle-ok",110],[":handle-ok (fn [ctx]",220],[":ok)",88]],"useCount":3330},{"word":"old","context":[["(-notify-watches a old-value new-value))",73],["; key already exists in strobj, the old value is overwritten. If a",71],["new-replica (f old-replica)",91],["(let [old-value (.-state a)]",72],["sequence of keys and f is a function that will take the old value",72],["(fn [old]",94],["fn of 4 args: a key, the reference, its old-state, its",71],["(conj (get old dispatch-val-x #{})",71],["old-parser))",76],["(fn [k ref old new]",71]],"useCount":3937},{"word":"om","context":[["(:require [om.core :as om :include-macros true]",1040],["om/IRender",2150],["om/IRenderState",1270],["(:require [om.core :as om :include-macros true]",1040],["[om.core :as om :include-macros true]",821],["[om.core :as om :include-macros true]",821],["om/IInitState",801],["[om.dom :as dom :include-macros true]",714],["om/IWillMount",587],["(om/component",708]],"useCount":17965},{"word":"on","context":[["Signature of the result value put on the channel is [].",390],[":global-vars {*warn-on-reflection* true}",244],["INNER JOIN facts as f on fs.id = f.factset_id",144],["(set! *warn-on-reflection* true)",942],[":on-click #(do",146],["(throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))",162],[":on-click (fn [e]",175],["(print \"Starting web server on port\" port \".\\n\")",177],[";; you will need to put a script on your path.",183],["Signature of the result value put on the channel is [result] where:",192]],"useCount":16151},{"word":"once","context":[["(use-fixtures :once schema-test/validate-schemas)",130],["; setup function called only once, during sketch initialization.",50],["\"init will be called once when",117],[":prep-tasks [\"compile\" [\"cljsbuild\" \"once\"]]",90],[":once",67],["(use-fixtures :once setup-postgres)",48],[";; lein cljsbuild once min",49],[":once :per-turn",272],["(use-fixtures :once",172],["(use-fixtures :once schema.test/validate-schemas)",131]],"useCount":2532},{"word":"one","context":[["\"With no args, returns the empty string. With one arg x, returns",72],["one arg, returns the concatenation of the str values of the args.\"",72],[":db/cardinality :db.cardinality/one",2655],[":db/cardinality        :db.cardinality/one",146],["\"sc must be a sorted collection, test(s) one of <, <=, > or",142],["of second items in each coll, until any one of the colls is",97],["the first.  If a key occurs in more than one map, the mapping(s)",74],["seq to reside in memory at one time.\"",72],["atom. validate-fn must be nil or a side-effect-free fn of one",72],["the first.  If a key occurs in more than one map, the mapping from",72]],"useCount":7301},{"word":"only","context":[[":query-only? true",97],["(:refer-clojure :only [defmacro defn apply declare meta let partial])",254],["[clj-time.core :only [now]]",73],["result of calling f with no arguments.  If coll has only 1 item, it",72],["\"Atomically sets the value of atom to newval if and only if the",71],["arg that returns a sequence of the children. Will only be called on",71],["\"Returns a map containing only those entries in map whose key is in keys\"",71],["(:use [clojure.contrib.math :only []])",62],["[riemann.time :only [unix-time]]",60],["(fact :check-only-at-load-time",58]],"useCount":6319},{"word":"onyx","context":[["[onyx.api]))",318],[":onyx/medium :core.async",852],[":onyx/max-peers 1",686],[":onyx/type :function",577],[":onyx/type :output",525],[":onyx/type :input",513],[":onyx/batch-timeout batch-timeout",455],[":onyx/plugin :onyx.plugin.core-async/output",311],[":onyx/doc \"Reads segments from a core.async channel\"}",389],[":onyx/batch-size batch-size",806]],"useCount":15886},{"word":"open","context":[["(with-open [conn (db/connection)]",97],[";; :open-file-command \"myfile-opener\"",182],[";; To be able to open files in your editor from the heads up display",183],[":production {:ring {:open-browser? false",88],["(with-open [session (create-session db)]",74],["(with-open",66],[":on-open (fn [ch]",65],["{:open-browser? false, :stacktraces? false, :auto-reload? false}}",59],["(with-open [conn (r/connect)]",51],["(open [this]",48]],"useCount":3284},{"word":"optimizations","context":[[":optimizations :advanced}}]}",48],[":optimizations :advanced",1014],[":optimizations :none",1764],["{:optimizations :advanced",647],[":optimizations :simple",323],[":optimizations :none}}",211],[":optimizations        :none",89],["{:optimizations :whitespace",54],[":optimizations :whitespace",878],[":optimizations :whitespace}}",47]],"useCount":5981},{"word":"optional","context":[["{:optional",118],[":optional true,",103],[":optional? true,",90],[";; Server Ring Handler (optional)",131],[":optional false,",179],["(optional-key",182],["\"(string, optional) The desired response format: json, xml, or vdf. Default: json\"]),",185],["\"(string, optional) The desired response format: json, xml, or vdf. Default: json\"])},",65],["{:name \"callback\", :optional? true, :type :callback}]}",67],["Also optional as argument is another map containing further options:",81]],"useCount":2964},{"word":"options","context":[[":as options}]",195],[":javac-options [\"-target\" \"1.6\" \"-source\" \"1.6\" \"-Xlint:-options\"]",187],[":javac-options [\"-target\" \"1.6\" \"-source\" \"1.6\" \"-Xlint:-options\"]",187],["options-summary",169],["options",198],["(def cli-options",477],["[options]",423],["[& options]",171],["(defn usage [options-summary]",165],[":repl-options {:init-ns user}",176]],"useCount":9610},{"word":"opts","context":[["[objs opts]",213],["[opts]",351],["[clojure.tools.cli :refer [parse-opts]]",231],["(print-map coll pr-writer writer opts))",240],["[& opts]",274],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts]",339],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091]],"useCount":17135},{"word":"or","context":[["(or",1383],["val-or-node (aget arr (inc (* 2 idx)))]",426],["(or",409],["key-or-nil  (aget arr (* 2 idx))",284],["(cond (nil? key-or-nil)",284],["(key-test key key-or-nil)",284],["(let [s (seq init-val-or-seq)]",282],["([size init-val-or-seq]",282],["(if (seq? init-val-or-seq)",282],["([size-or-seq]",282]],"useCount":27690},{"word":"order","context":[["\" in order to start the compiler\"]])",86],["\"Returns non-nil if nums are in monotonically non-decreasing order,",71],["(testing order",187],["corresponding elements, in the order they appeared in coll.\"",71],["order is determined by comparing (keyfn item).  Comp can be",72],["more options (in any order):",72],["\"Returns a seq of the items in coll in reverse order. Not lazy.\"",72],["; order. Any string, keyword, or symbol key is used as a property name",71],["\"Returns non-nil if nums are in monotonically increasing order,",71],["\"Returns non-nil if nums are in monotonically decreasing order,",71]],"useCount":2918},{"word":"ordered","context":[["(hash-ordered-coll [k v]).",51],["(-hash [rng] (caching-hash rng hash-ordered-coll __hash))",51],["(defn ^number hash-ordered-coll",51],["\"Returns the hash code, consistent with =, for an external ordered",51],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash)))",51],["\"Mix final collection hash for ordered or unordered collections.",51],["(ordered-map",121],["(omap/ordered-map",160],["(-hash [coll] (hash-ordered-coll coll))",255],["(-hash [coll] (caching-hash coll hash-ordered-coll __hash))",665]],"useCount":2053},{"word":"org","context":[[":dependencies [[org.clojure/clojure \"1.6.0\"]]",816],["[org.clojure/core.async \"0.1.346.0-17112a-alpha\"]",840],[":dependencies [[org.clojure/clojure \"1.8.0\"]",1438],[":dependencies [[org.clojure/clojure \"1.7.0\"]",2637],["[org.clojure/tools.logging \"0.3.1\"]",752],[":dependencies [[org.clojure/clojure \"1.6.0\"]])",596],[":dependencies [[org.clojure/clojure \"1.5.1\"]",2677],[":dependencies [[org.clojure/clojure \"1.6.0\"]",4608],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],[":dependencies [[org.clojure/clojure \"1.5.1\"]])",516]],"useCount":56757},{"word":"other","context":[["(equiv [this other]",1498],["(-equiv this other))",1498],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(-equiv [this other]",154],[";;;    documentation and/or other materials provided with the distribution.",182],["(-equiv [coll other] (equiv-map coll other))",241],["(-equiv [coll other] (equiv-map coll other))",241],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(-equiv [_ other]",314],["(-equiv [coll other]",259]],"useCount":12780},{"word":"otherwise","context":[["\"Returns true if x is the value false, false otherwise.\"",71],["otherwise false.\"",284],[":otherwise",95],["this will return :fred if :fred is in the sequence, otherwise nil:",72],["\"Assumes x is sequential. Returns true if x equals y, otherwise",72],["\"Assumes y is a map. Returns true if x equals y, otherwise returns",71],["\"Returns true if x is logical false, false otherwise.\"",71],["but are otherwise considered opaque by the watch mechanism.  Bear in",71],["value, otherwise false. Behavior on non nums is",71],["\"Returns true if key is present in the given collection, otherwise",72]],"useCount":1626},{"word":"out","context":[[":output-dir \"resources/public/js/out\"",249],[":asset-path \"js/compiled/out\"",272],[":asset-path   \"js/out\"",280],[":source-map    \"resources/public/js/out.js.map\"",256],["out))",271],[":output-dir    \"resources/public/js/out\"",503],["(with-out-str",667],[":output-dir \"resources/public/js/compiled/out\"",286],[":output-dir \"out\"",320],["(binding [*out* *err*]",373]],"useCount":16200},{"word":"output","context":[[":onyx/plugin :onyx.plugin.core-async/output",311],[":output-dir \"resources/public/js/compiled/out\"",286],[":output-dir \"resources/public/js/out\"",249],[":onyx/type :output",525],[":output-dir    \"resources/public/js/out\"",503],["[:cljsbuild :builds :app :compiler :output-to]]",245],[":compiler {:output-to     \"resources/public/js/app.js\"",474],[":injections [(require 'pjstadig.humane-test-output)",455],["(pjstadig.humane-test-output/activate!)]",437],[":output-dir \"out\"",320]],"useCount":11324},{"word":"owner","context":[["[cursor owner]",68],["{:pre [(component? owner)]}",54],["(fn [data owner]",54],["[data owner]",160],["[app owner]",152],["[owner]",83],["owner",82],["([owner]",76],["(fn [app owner]",167],["([owner korks]",59]],"useCount":2834},{"word":"p","context":[["[:p \"please run \"",157],["(let [p (take n s)]",144],["p",143],["(fn [p]",104],["([p]",144],["p))",151],["[:p",471],["[:p",360],["[p]",352],["(let [p (promise)]",160]],"useCount":12002},{"word":"p1","context":[["([p1 p2 p3]",142],["([x] (boolean (and (p1 x) (p2 x))))",71],["([x y z] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z)))",71],["([p1 p2 p3 & ps]",142],["(let [ps (list* p1 p2 p3 ps)]",142],["([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))",71],["([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))",71],["[p1 p2]",107],["([p1 p2]",142],["([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))",71]],"useCount":2983},{"word":"p2","context":[["([p1 p2 p3 & ps]",142],["([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))",71],["(some #(or (p1 %) (p2 %) (p3 %)) args)))))",71],["(every? #(and (p1 %) (p2 %)) args))))))",71],["([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y))))",71],["([x] (or (p1 x) (p2 x) (p3 x)))",71],["[p1 p2]",107],["([p1 p2 p3]",142],["([p1 p2]",142],["(let [ps (list* p1 p2 p3 ps)]",142]],"useCount":2992},{"word":"p3","context":[["([p1 p2 p3]",142],["([x y] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y)))",71],["([x y] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y))))",71],["([x y] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y)))",71],["(some #(or (p1 %) (p2 %) (p3 %)) args)))))",71],["([x] (boolean (and (p1 x) (p2 x) (p3 x))))",71],["([p1 p2 p3 & ps]",142],["(let [ps (list* p1 p2 p3 ps)]",142],["([x] (or (p1 x) (p2 x) (p3 x)))",71],["([x y z] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z))))",71]],"useCount":1501},{"word":"page","context":[["(defn about-page []",174],["(defn current-page []",279],["(defn home-page []",266],["(GET \"/*\" req (page)))",234],["[:div [(session/get :current-page)]])",223],["(reagent/render [current-page] (.getElementById js/document \"app\")))",211],["[hiccup.page :refer [include-js include-css]]",206],["(session/put! :current-page #'home-page))",176],["(session/put! :current-page #'home-page))",176],["(deftemplate page",136]],"useCount":8475},{"word":"pallet","context":[[":file \"pallet/group.clj\",",51],["[pallet.actions :as actions]",48],["{:ns pallet.script.lib,",102],[":file \"pallet/script/lib.clj\",",106],["{:ns pallet.group,",48],[":file \"pallet/actions.clj\",",47],["{:ns pallet.actions,",45],[":file \"pallet/utils.clj\",",36],["{:ns pallet.utils,",35],[":file \"pallet/crate/sudoers.clj\",",33]],"useCount":1479},{"word":"panel","context":[["(doto panel",55],["(mig-panel",62],["(defn panel",71],["[:div.panel.panel-default",73],["[:div.panel.panel-default",73],["[:div.panel-body",106],["panel))",53],["(border-panel",51],["(.add panel)",48],["[:div.panel-heading",45]],"useCount":1577},{"word":"param","context":[["@param {...*} var_args\" ;;array is a special case, don't emulate this doc string",72],["{:order_by (vector-param",38],["{:order_by (vector-param method",38],["(.set-param! ied param val)))",38],["(.set-param! ied param val)))",38],["(testing \"query without param should not fail\"",39],["config/fp-auth-scheme-param-name",40],["[param]",48],["(let [param-client (client/wrap-form-params identity)",85],["fp-auth-scheme-param-name",144]],"useCount":1588},{"word":"parameters","context":[["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],[":parameters",126],[":parameters {:ensure \"directory\"",62],["[{:keys [parameters]}]",56],["(is (= (get-in catalog [:resources {:type \"File\" :title \"/etc/foobar\"} :parameters])",52],["(let [{:keys [environment region]} parameters",37],["\" Takes two arguments, a map m with query parameters and an optional oauth-token t.",37],[":parameters {}}",36],[":parameters {:name \"main\"},",36]],"useCount":2098},{"word":"params","context":[[":params",977],["[params]",685],["[ring.middleware.params :refer [wrap-params]]",357],["[ring.middleware.params :refer [wrap-params]]",357],["wrap-params",206],["params",200],["(assoc params",161],[":params [value]}",145],["(wrap-params)",138],[":header-params [api_key :- (s/maybe s/Str)]",136]],"useCount":13548},{"word":"parent","context":[["([tag parent]",142],["(let [ret    (tv-ensure-editable (.. tv -root -edit) parent)",71],[":parent-selection :lexicase",132],[";; (assert (instance? clojure.lang.INamed parent))",71],["(.-left parent)",142],["([h tag parent]",142],["(balance-left [node parent]",142],["(balance-right [node parent]",142],["(BlackNode. (.-key parent) (.-val parent)",213],["(BlackNode. (.-key parent) (.-val parent)",213]],"useCount":6197},{"word":"parse","context":[["(:require [clojure.tools.cli :refer [parse-opts]]",122],["[clojure.tools.cli :refer [parse-opts]])",79],["(defn parse",261],[":parse-fn #(Integer/parseInt %)",254],["json/parse-string",74],["[clojure.tools.cli :refer [parse-opts]]",231],["(defn parse-int [s]",80],["(json/parse-string true)",97],[":parse-fn #(Integer/parseInt %)]",110],["(let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]",141]],"useCount":6182},{"word":"parseInt","context":[[":parse-fn #(Integer/parseInt %)",254],["(string? port) (Integer/parseInt port)",42],["Integer/parseInt)",45],["(let [port (if port (Integer/parseInt port) 8080)]",63],["(Integer/parseInt (second (:groups %1)))",63],["(== (js/parseFloat n) (js/parseInt n 10))))",70],["(let [port (if port (Integer/parseInt port) 3000)]",304],["(let [port (Integer/parseInt (or (System/getenv \"PORT\") \"3000\"))]",73],["(let [port (Integer/parseInt (or (env :port) \"3000\"))]",213],[":parse-fn #(Integer/parseInt %)]",110]],"useCount":1981},{"word":"parser","context":[["[selmer.parser :as parser]",153],["(parser/set-resource-path!  (clojure.java.io/resource \"templates\"))",79],["(parser/add-tag! :csrf-field (fn [_ _] (anti-forgery-field)))",77],["[selmer.parser :refer [render-file]]",111],["(insta/parser",127],["[selmer.parser :as parser]",153],["(:require [selmer.parser :as parser]",164],["old-parser))",76],["(if (env :dev) (parser/cache-off!))",76],["(:require [selmer.parser :as parser]",164]],"useCount":2141},{"word":"part","context":[[":db.install/_attribute :db.part/db}",2837],[":db/id #db/id [:db.part/db]",106],["[part]",118],["{:db/id (d/tempid :db.part/user)",241],["{:db/id (d/tempid :db.part/db)",329],[":db.alter/_attribute :db.part/db}",385],["{:db/id                 #db/id[:db.part/db]",95],[":db.install/_attribute :db.part/db",90],["[{:db/id (d/tempid :db.part/user)",89],["{:db/id #db/id[:db.part/db]",2316]],"useCount":9862},{"word":"partial","context":[["(partial swap! res conj))",112],["add-ring-handler (partial add-ring-handler s)",53],["f (partial extensions/apply-log-entry entry)",52],["(partial",51],["(:refer-clojure :only [defmacro defn apply declare meta let partial])",254],["(defn partial",80],["rep-reactions (partial extensions/reactions entry)",58],["rep-diff (partial extensions/replica-diff entry)",58],["(partial swap! res conj)))]",64],["(def gen-call (partial gen-call-helper api-table))",255]],"useCount":2312},{"word":"partition","context":[["(cons p (partition n step pad (drop step s)))",72],["(partition n n coll))",72],["(defn partition-all",71],["(partition 2 deriv-seq))",71],["(cons p (partition n step (drop step s))))))))",71],["(cons (take n s) (partition-all n step (drop step s)))))))",71],["not enough padding elements, return a partition with less than n items.\"",72],["(partition 2)",212],["(defn partition-by",79],["(defn partition",80]],"useCount":2053},{"word":"parts","context":[["(def asym-hobbit-body-parts [{:name \"head\" :size 3}",45],["final-body-parts",44],["final-body-parts []]",43],["(defn symmetrize-body-parts",49],["(Keyword. nil (aget parts 0) name nil)))))",62],["(Keyword. (aget parts 0) (aget parts 1) name nil)",62],["[asym-body-parts]",117],["(if (== (alength parts) 2)",62],["(string? name) (let [parts (.split name \"/\")]",62],["(Keyword. (aget parts 0) (aget parts 1) name nil)",62]],"useCount":1567},{"word":"passed","context":[["structure.  If the key does not exist, nil is passed as the old value.\"",45],["or keyword) that was passed in.  This is useful for translating data structures",26],["\"Returns a javascript array, cloned from the passed in array\"",71],["side-effect-free fn of one argument, which will be passed the intended",71],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],["Whatever function *print-fn* is bound to will be passed any",83],["argument, which will be passed the intended new state on any state",72],["branch? must be a fn of one arg that returns true if passed a node",71],["The option map might be passed in an arbitrary position after the first argument.\"",48]],"useCount":1462},{"word":"password","context":[["(register-as \"dantheman\" \"test@example.org\" \"password\" valid-ssh-key))",105],["(register-as \"dantheman\" \"test@example.org\" \"password\" \"\")",57],["password \"password\"",60],[":password \"password\"}}",136],[":password \"password\"}}",136],[":password password",109],[":password password",109],["(.getBytes \"dantheman:password\"",77],["(fill-in \"Password:\" \"password\")",64],["password \"password\"",60]],"useCount":3924},{"word":"path","context":[[":target-path \"target/%s\"",3108],["[path]",1290],["path",313],[":asset-path   \"js/out\"",280],[":asset-path \"js/compiled/out\"",272],["[path]",181],[";; you will need to put a script on your path.",183],[":clean-targets ^{:protect false} [:target-path",206],[":asset-path \"js/out\"",157],[";; that script will have to take a file path and a line number",183]],"useCount":21887},{"word":"paths","context":[[":source-paths [\"src/cljs\"]",534],[":source-paths [\"src\"]",1683],[":source-paths [\"src/clj\"]",672],["{:source-paths [\"env/prod/cljs\"]",592],[":source-paths [\"src/clj\" \"src/cljs\"]",549],[":java-source-paths [\"src/java\"]",423],[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],[":source-paths [\"env/dev/clj\"]",350],[":test-paths [\"test/clj\"]",310],[":cljsbuild {:builds {:app {:source-paths [\"env/dev/cljs\"]",304]],"useCount":13815},{"word":"pattern","context":[["(pattern",35],["pattern :- schema/Str]",36],["(let [[_ flags pattern] (re-find #\"^(?:\\(\\?([idmsux]*)\\))?(.*)\" s)]",39],["pattern",39],[":params [pattern]}",44],["(re-pattern",68],["[:data-pattern",48],["(defn re-pattern",71],["(js/RegExp. pattern (or flags \"\")))))",32],["[pattern]",60]],"useCount":1583},{"word":"peer","context":[["[{:keys [replica log peer-choices]}",84],["(def peer-config",70],[":peer-choices []}))]",90],["(onyx.api/submit-job peer-config job)",101],["(onyx.api/shutdown-peer v-peer))",132],["(onyx.api/shutdown-peer-group peer-group)",112],["(onyx.api/shutdown-peer-group peer-group)",112],["(doseq [v-peer v-peers]",113],["peer-config",255],["(onyx.api/shutdown-peer v-peer))",132]],"useCount":3032},{"word":"pem","context":[["(merge valid-ssl-pem-config",40],["(utils/pem->private-key cakey)",26],["csr  (io/input-stream (test-pem-file csr-file))]",44],["[pem]",46],["(let [key (-> settings :hostpubkey utils/pem->public-key)]",27],["(let [key (-> settings :hostprivkey utils/pem->private-key)]",27],["(with-open [r (reader pem)]",30],["[pem-file-name]",28],["{:pre  [(not (nil? pem))]",27],["(defn test-pem-file",28]],"useCount":1989},{"word":"persistent","context":[["(throw (js/Error. \"persistent! called twice\"))))",216],["(throw (js/Error. \"assoc! after persistent!\"))))",218],["(throw (js/Error. \"conj! after persistent!\"))))",143],["persistent!))",146],["(persistent!",158],["(persistent!",203],["(-persistent! [tcoll]",213],["(throw (js/Error. \"count after persistent!\"))))",216],["(-persistent!",74],["(persistent! out))))))",100]],"useCount":4127},{"word":"phaser","context":[["(phaser->clj",3798],["(:require [phzr.impl.utils.core :refer [clj->phaser phaser->clj]]",183],["(clj->phaser value)",144],["(ex/extend-phaser-class",157],["(clj->phaser width)",168],["(clj->phaser child)",168],["(:require [phzr.impl.utils.core :refer [clj->phaser phaser->clj]]",183],["(clj->phaser key)",444],["(clj->phaser x)",404],["(clj->phaser y)",294]],"useCount":10152},{"word":"piggieback","context":[[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["[com.cemerick/piggieback \"0.2.1\"]",304],["[cemerick.piggieback :as piggieback]",254],["[cemerick.piggieback :as piggieback]",254],["[com.cemerick/piggieback \"0.1.3\"]",200],["(piggieback/cljs-repl :repl-env (weasel/repl-env :ip \"0.0.0.0\" :port 9001)))",190],["(:require [cemerick.piggieback :as piggieback]",146],["(:require [cemerick.piggieback :as piggieback]",146],[":repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",121],["[com.cemerick/piggieback \"0.1.5\"]",117]],"useCount":2864},{"word":"play","context":[["(defn play",56],["(play-from-hand state :runner \"Sure Gamble\")",39],[";;}.play",41],["(play-from-hand state :corp \"Ice Wall\" \"HQ\")",67],["(:require [play-clj.core :refer :all]",67],["(play-from-hand state :corp \"Hedge Fund\")",52],["(play-from-hand state :corp \"Launch Campaign\" \"New remote\")",46],["[play-clj.g2d :refer :all]",44],["{:in-play [:memory 1]",43],["[play-clj \"0.4.7\"]]",42]],"useCount":1546},{"word":"plugin","context":[[":onyx/plugin :onyx.plugin.core-async/output",311],[":onyx/plugin :onyx.plugin.core-async/output",311],[":onyx/plugin :onyx.plugin.core-async/input",296],[":onyx/plugin :onyx.plugin.core-async/input",296],[":uberjar {:hooks [leiningen.cljsbuild minify-assets.plugin/hooks]",210],[":lifecycle/calls :onyx.plugin.core-async/reader-calls}",199],["[onyx.plugin.core-async :refer [take-segments!]]",169],[":onyx/doc \"core.async plugin base lifecycle\"}",131],[":lifecycle/calls :onyx.plugin.core-async/writer-calls",120],[":lifecycle/calls :onyx.plugin.core-async/reader-calls",108]],"useCount":3697},{"word":"plugins","context":[[":plugins [[lein-ring \"0.8.13\"]]",128],[":plugins [[lein-cljsbuild \"1.0.3\"]",323],[":plugins [[lein-environ \"1.0.1\"]",117],[":plugins [[lein-figwheel \"0.1.4-SNAPSHOT\"]]",118],[":plugins [[lein-cljsbuild \"1.1.1\"]",130],[":plugins [[lein-environ \"1.0.0\"]",132],[":plugins [",214],[":plugins",134],[":plugins [[lein-cljsbuild \"1.0.5\"]",175],[":plugins [[lein-cljsbuild \"1.0.3\"]]",182]],"useCount":6393},{"word":"pool","context":[["pool",80],["(when-let [ed (pool/last-active)]",248],["[lt.objs.editor.pool :as pool]",180],["[lt.objs.editor.pool :as pool]",180],["(with-message-handler {:keys [handle-message dlo delay-pool q]}",82],["(is (= 0 (task-count delay-pool)))",82],["(defn pool",33],["(.lock pool)",34],["pool-context",46],["(let [ed (pool/last-active)",47]],"useCount":3141},{"word":"pop","context":[["(defn pop",72],["(-pop! tcoll))",71],["(defn- tv-pop-tail [tv level node]",71],["(-pop [coll] (throw (js/Error. \"Can't pop empty list\")))",72],["(-pop [coll] (-rest coll))",72],["(-pop [coll]",217],["(zero? cnt) (throw (js/Error. \"Can't pop empty vector\"))",143],["(-pop [coll] (throw (js/Error. \"Can't pop empty list\")))",72],["(throw (js/Error. \"Can't pop empty vector\"))",73],["(-pop [node] [key])",142]],"useCount":2884},{"word":"port","context":[["(let [port (if port (Integer/parseInt port) 3000)]",304],["(let [port (if port (Integer/parseInt port) 3000)]",304],[":server-port 3449",498],["(defn -main [& [port]]",449],["(let [port (if port (Integer/parseInt port) 3000)]",304],["(let [port (Integer. (or port (env :port) 10555))]",276],["{:port port",438],["{:port port",438],["[& [port]]",414],["(println (str \"You can view the site at http://localhost:\" port))))",374]],"useCount":16373},{"word":"pos","context":[["(if (pos? level)",203],["(if (and (pos? n) s)",72],["(when (pos? n)",76],["(if (pos? i)",77],["(when (pos? cnt)",79],["[board pos]",81],["(when (pos? (:velocity message))",92],["(when (pos? (count ps))",142],["(if (pos? step)",171],["(if (pos? cnt)",356]],"useCount":4913},{"word":"position","context":[[":position        0",65],[":position \"absolute\"",57],[":position 0",63],[":position \"position\"",61],[":position \"position\"",61],["[position]",61],["* position (Point) - The world origin to calculate from",50],["Returns:  Point - A point object representing the position of this object\"",50],["The option map might be passed in an arbitrary position after the first argument.\"",48],["position",42]],"useCount":2232},{"word":"post","context":[[":post! (fn [ctx]",120],[":post [(are-queries-different? req %)]}",97],["method [:get :post]]",400],[":request-method :post",298],[":post",281],[":post [(map? %)",262],[":post [(string? %)]}",221],[":post [(map? %)]}",169],[":allowed-methods [:post]",154],["{:post [(map? %)",145]],"useCount":6176},{"word":"postgresql","context":[["{:subprotocol \"postgresql\"",40],["{:classname \"org.postgresql.Driver\"",63],["[postgresql \"9.3-1102.jdbc41\"]",49],["[postgresql/postgresql \"8.4-702.jdbc4\"]",31],["[org.postgresql/postgresql \"9.3-1102-jdbc41\"]",32],["[org.postgresql/postgresql \"9.3-1102-jdbc41\"]",32],["[org.postgresql/postgresql \"9.4-1201-jdbc41\"]",87],["[org.postgresql/postgresql \"9.4-1201-jdbc41\"]",87],[":subprotocol \"postgresql\"",250],["[postgresql \"9.1-901.jdbc4\"]",72]],"useCount":1431},{"word":"pprint","context":[["[clojure.pprint :refer [pprint]]))",117],["[clojure.pprint :refer [pprint]]",557],["[clojure.pprint :refer [pprint]]",557],["[clojure.pprint :as pprint]",141],["[clojure.pprint :as pprint]",141],["[clojure.pprint :refer (pprint)]",248],["[clojure.pprint :refer (pprint)]",248],["[clojure.pprint :as pp]",265],["(:require [clojure.pprint :refer [pprint]]",125],["(:require [clojure.pprint :refer [pprint]]",125]],"useCount":6385},{"word":"pr","context":[["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(print-map coll pr-writer writer opts))",240],["(-pr-writer [a writer opts]",176],["(pr-str* coll))",1750],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts]",339],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276]],"useCount":13077},{"word":"pre","context":[["{:pre [(number? n)]}",126],["{:pre [(valid-editor? editor)]}",81],["(core/with-pre-wrap fileset",117],["[:pre",103],["(boot/with-pre-wrap fileset",103],["{:pre [(some? *show*)]}",87],["{:pre [certname]}",51],["[:pre",54],["{:pre [(component? owner)]}",54],["{:pre [(string? certname)]}",54]],"useCount":3944},{"word":"pred","context":[["([pred]",155],["[pred coll]",380],["([pred coll]",222],["[pred coll]",183],["(pred item) returns true. pred must be free of side-effects.\"",117],["(pred item) returns true. pred must be free of side-effects.\"",117],["(pred item) returns true. pred must be free of side-effects.",98],["(pred item) returns true. pred must be free of side-effects.",98],["(if (pred input)",98],["[pred]",78]],"useCount":6144},{"word":"prefer","context":[["(-prefer-method [mf dispatch-val dispatch-val-y])",71],["[x y prefer-table]",141],["(-prefers [mf] @prefer-table)",71],["prefer-table method-cache cached-hierarchy)]",71],["(-prefer-method multifn dispatch-val-x dispatch-val-y))",71],["method-table prefer-table method-cache cached-hierarchy]",71],["(when (prefers* dispatch-val-x dispatch-val-y prefer-table)",71],["(when (prefers* x (first ps) prefer-table)",71],["\"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y",71],["(when (prefers* (first ps) y prefer-table)",71]],"useCount":1571},{"word":"prefix","context":[[":src-linenum-anchor-prefix \"L\"}",104],["(secretary/set-config! :prefix \"#\")",309],["entity-uri-prefix",298],["config/fp-entity-uri-prefix",93],[":src-linenum-anchor-prefix \"L\"",88],["([prefix-string]",71],["supplied, the name is prefix# where # is some unique number. If",71],["\"Returns a new symbol with a unique name. If a prefix string is",71],["(symbol (str prefix-string (swap! gensym_counter inc)))))",71],["prefix is not supplied, the prefix is 'G__'.\"",71]],"useCount":2897},{"word":"pretty","context":[[":pretty-print true}}",246],[":pretty-print false}}]}",187],[":pretty-print true}}]})",230],[":pretty-print false}}}}}})",523],[":pretty-print true",386],[":pretty-print false",300],[":pretty-print  true}}}}",557],[":pretty-print true}}]}",142],[":pretty-print true}}}}",106],[":pretty-print false}}",99]],"useCount":4217},{"word":"print","context":[["(set! *print-fn* (fn [& _]))",287],["(print \"Starting figwheel.\\n\")",268],[":pretty-print true}}",246],["(print-map coll pr-writer writer opts))",240],["(when @global-print-behavioral-diversity",238],[":pretty-print false",300],[":pretty-print true",386],[":pretty-print false}}}}}})",523],[":pretty-print  true}}}}",557],["(enable-console-print!)",2743]],"useCount":14644},{"word":"println","context":[["(println)",1030],["(debug-println r)",231],["(println msg)",299],["(println \";;******************************\")",226],["(println))",189],["(println",573],["(println \"Hello, World!\"))",693],["(println x \"Hello, World!\"))",888],[";;ignore println statements in prod",288],["(println (str \"You can view the site at http://localhost:\" port))))",374]],"useCount":10910},{"word":"private","context":[["(def ^:private never-equiv (NeverEquiv.))",71],["(defonce ^:private server",147],["(defn ^:private compare-indexed",71],["^{:private true",75],["(def ^:private lookup-sentinel (js-obj))",71],[";; :keystore-path \"/home/user/.android/private.keystore\"",79],["(def ^{:private true",80],["(def ^{:private true}",80],[":private true}",91],["(def ^{:private true}",118]],"useCount":3231},{"word":"prn","context":[["(defn prn-str",71],["(defn prn",71],["(prn-str-with-opts objs (assoc (pr-opts) :readably false)))",71],["By default, pr and prn print in a way that objects can be",71],["(defn prn-str-with-opts",71],["(tagged-all [\\\"foo\\\" \\\"bar\\\"] prn)\"",56],[";;(prn \"EVAL\" ast (keys @env)) (flush)",43],["(tagged-any \\\"foo\\\" prn)",28],["(by metric prn): you'd get a separate prn for *every* unique metric that",28],["(prn-str-with-opts objs (pr-opts)))",71]],"useCount":1508},{"word":"process","context":[[";; and port. If you prefer a separate server process then take this",50],["(process-state-ek1-mk2val",60],[";; Start an nREPL server into the running figwheel process. We",50],[";; an nREPL process, see",50],["(rank value ?p process yes)",48],["(process-message [response app]",40],["(defn process",76],[";; Start an nREPL server into the running figwheel process",134],["process-counter (call-counter)]",32],["(with-redefs [process-command! process-counter]",30]],"useCount":1813},{"word":"prod","context":[["{:source-paths [\"env/prod/cljs\"]",592],["{:id \"prod\"",108],[":source-paths [\"env/prod/clj\"]",89],[":prod",72],["(throw (Exception. \"Figwheel is not available in prod mode\")))",122],[":cljsbuild {:builds [{:id \"prod\"",34],[";;ignore println statements in prod",288],[":prod {",34],["(throw (Exception. \"Browser connected REPL is not available in prod mode\")))",122],[":uberjar {:source-paths [\"env/prod/clj\"]",128]],"useCount":2059},{"word":"production","context":[["{:production",33],["production-middleware))",31],[":env {:production true}",613],[":production",91],[":production {:ring {:open-browser? false",88],["not be included in a production build of the application.\"",76],[":profiles {:production {:env {:production true}}})",37],[":profiles {:production {:env {:production true}}})",37],["\"production\"",38],[";; production. You can build this with:",49]],"useCount":1587},{"word":"profiles","context":[[":profiles/dev {}",64],[":profiles {:uberjar {:aot :all}",364],[":profiles {:dev",332],[":profiles",919],[":profiles {:uberjar {:aot :all}})",2540],[":profiles {:dev {:source-paths [\"dev\"]",148],[":profiles {",231],[":profiles {:uberjar {:aot :all}}",327],[":profiles {:dev {:source-paths [\"env/dev/clj\"]",121],[":profiles {:dev {:dependencies [[midje \"1.6.3\"]]",70]],"useCount":6406},{"word":"program","context":[["(let [best-program (not-lazy (:program best))",117],["(p/program",71],["[:program",57],["([program]",122],["(let [final-state (run-push program",123],["([program data-cases print-outputs]",109],["([program data-cases] ;; data-cases should be :train or :test",113],["best-test-errors (error-function best-program :test)",113],["(error-function best-program :train true)",106],["(let [best-program (not-lazy (:program best))",117]],"useCount":1813},{"word":"project","context":[[":dev           [:project/dev :profiles/dev]",58],["([project]",84],["project",136],["(-> project",77],[":test          [:project/test :profiles/test]",58],["[project]",559],["project-id (project-model/id project)",56],["[project & args]",193],["[\"project.clj\" (render \"project.clj\" data)]",199],["[\"project.clj\" (render \"project.clj\" data)]",199]],"useCount":5213},{"word":"prompt","context":[["(prompt-choice :runner \"Steal\")",98],["(prompt-choice :runner \"Yes\")",109],["(prompt-choice :corp \"Yes\")",78],["(prompt-choice :runner 0)",56],["(prompt-choice :corp 0)",49],["{:prompt \"Choose a server\"",37],["{:prompt \"Choose a server\" :choices (req runnable-servers)",31],["(clear-wait-prompt state :runner)",49],["(prompt-choice :runner \"Done\")",42],["(prompt-choice :runner \"OK\")",46]],"useCount":1475},{"word":"properties","context":[[":properties [{:name \"name\" :type :str :gui-label \"Name\"}",38],["[clojure.test.check.properties :as prop :include-macros true]",99],[":properties {",103],["[clojure.test.check.properties :as prop]",470],[":properties",88],["{:properties",87],["helpers/fixture-properties:clean",48],["[ctia.properties :refer [properties]]",33],["[clojure.test.check.properties :as prop]))",47],["(refer-to [\"properties.main_type_gnd\"])",42]],"useCount":1715},{"word":"props","context":[["(let [props (om/props this)",43],["(let [props (om/props this)",43],["[before after & props]",48],["(ident [this props]",51],["(did-update [this prev-props prev-state]",55],["(fn [{:keys [props state]}]",58],["[props]",61],["(fn [next-props next-state]",61],["(r/props this)",67],["(fn [{:keys [props]}]",40]],"useCount":2441},{"word":"protocol","context":[["(extend-protocol jdbc/IResultSetReadColumn",59],["(extend-protocol IPrintWithWriter",85],["[puppetlabs.services.protocols.jruby-puppet :as jruby-protocol]",53],["(jruby-protocol/get-environment-class-info-cache-generation-id!",57],["engines.  IPrintWithWriter implements printing via the IWriter protocol, so it",70],["\"Marker protocol\")",69],["(defn missing-protocol [proto obj]",71],["\"The old IPrintable protocol's implementation consisted of building a giant",70],["(.join (array \"No protocol method \" proto",71],["(extend-protocol IComparable",76]],"useCount":2066},{"word":"provided","context":[["transducer when no collection is provided.\"",147],["Returns a transducer when no collection is provided.\"",197],["(provided",2790],["no collection is provided.\"",115],["\"Returns an instance of RegExp which has compiled the provided string.\"",71],[";;    documentation and/or other materials provided with the distribution.",94],["Returns a stateful transducer when no collection is provided.\"",84],[";;;    documentation and/or other materials provided with the distribution.",182],[";;   and/or other materials provided with the distribution.",85],["[org.clojure/clojurescript \"0.0-2371\" :scope \"provided\"]",124]],"useCount":5869},{"word":"proxy","context":[["(proxy-super paintComponent g)",65],[":ring-handler proxy-ring-handler}",60],["(with-target-and-proxy-servers",160],[":proxy        {:host \"0.0.0.0\"",73],[":proxy-config {:host \"localhost\"",100],["(proxy [ActionListener] []",50],["(let [response (http-get \"http://localhost:10000/hello-proxy/world\")]",57],["(proxy",59],[":endpoint      \"/hello-proxy\"",40],["(proxy [AbstractHandler] []",39]],"useCount":1817},{"word":"ps","context":[["([p1 p2 p3 & ps]",142],["([x] (some #(% x) ps))",71],["(recur (rest ps))))",142],["([x y] (some #(or (% x) (% y)) ps))",71],["([x y z] (every? #(and (% x) (% y) (% z)) ps))",71],["([x] (every? #(% x) ps))",71],["(some #(some % args) ps)))))))",71],["(let [ps (list* p1 p2 p3 ps)]",142],["(when (pos? (count ps))",142],["(let [ps (list* p1 p2 p3 ps)]",142]],"useCount":1790},{"word":"public","context":[[":output-dir \"resources/public/js/out\"",249],[":css-dirs [\"resources/public/css\"]",456],[":compiler {:output-to     \"resources/public/js/app.js\"",474],[":output-dir    \"resources/public/js/out\"",503],[":figwheel {:http-server-root \"public\"",639],[":output-dir \"resources/public/js/compiled/out\"",286],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["; Makes static assets in $PROJECT_DIR/resources/public/ available.",371],[":source-map    \"resources/public/js/out.js.map\"",256]],"useCount":9444},{"word":"publish","context":[["(is (= 0 (times-called publish)))",449],["(pubsub/publish! (:pubsub @core) channel event)))",25],[";; modify, merge, publish, distribute, sublicense, and/or sell copies",25],["(extract-error-message publish))))",36],["(test-msg-handler command-1 publish discard-dir",44],["(test-msg-handler command-2 publish discard-dir",44],["; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",48],["(test-msg-handler command publish discard-dir",388],[";; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100],["(defn publish",67]],"useCount":1628},{"word":"puppet","context":[["\"x-client-dn\"     \"CN=puppet\"",44],["[puppetlabs.services.jruby.jruby-puppet-service :as jruby]",57],["jruby-puppet",46],["[puppetlabs.services.jruby.jruby-puppet-internal :as jruby-internal]",45],["if not specified, will use the puppet default.",46],["[puppetlabs.services.puppet-profiler.puppet-profiler-service :as profiler]",63],["[puppetlabs.services.puppet-profiler.puppet-profiler-service :as profiler]",63],["profiler/puppet-profiler-service",55],["[puppetlabs.services.protocols.jruby-puppet :as jruby-protocol]",53],["(-> (jruby-testutils/jruby-puppet-tk-config",48]],"useCount":2950},{"word":"puppetdb","context":[["[puppetlabs.puppetdb.schema :as pls]",188],["[puppetlabs.puppetdb.reports :as reports]",73],["[puppetlabs.puppetdb.cheshire :as json]",272],["[puppetlabs.puppetdb.utils :as utils]",278],["[puppetlabs.puppetdb.scf.storage-utils :as sutils]",184],["[puppetlabs.puppetdb.testutils :as tu]",73],["[puppetlabs.puppetdb.fixtures :as fixt]",80],["[puppetlabs.puppetdb.http :as http]",181],["[puppetlabs.puppetdb.query.paging :as paging]",96],["[puppetlabs.puppetdb.jdbc :as jdbc]",170]],"useCount":5152},{"word":"puppetlabs","context":[["[puppetlabs.puppetdb.utils :as utils]",278],["[puppetlabs.trapperkeeper.app :as tk-app]",102],["[puppetlabs.trapperkeeper.core :as tk]",104],["[puppetlabs.puppetdb.jdbc :as jdbc]",170],["[puppetlabs.puppetdb.http :as http]",181],["[puppetlabs.puppetdb.scf.storage-utils :as sutils]",184],["[puppetlabs.puppetdb.schema :as pls]",188],["[puppetlabs.kitchensink.core :as ks]",236],["[puppetlabs.puppetdb.cheshire :as json]",272],["[puppetlabs.kitchensink.core :as kitchensink]",360]],"useCount":9539},{"word":"push","context":[["(do (. ary push (first s))",71],["(let [final-state (run-push program",123],["(->> (make-push-state)",113],["(q/push-matrix)",101],["(.push arr x))",74],["(push-matrix)",74],["(reduce (fn [a x] (.push a x) a) (array) aseq)))",72],["(defn- push-tail [pv level parent tailnode]",71],["(let [node-to-insert (push-tail pv (- level 5) child tailnode)]",71],["(.push arr val)",71]],"useCount":3440},{"word":"put","context":[["put any initialization code here\"",118],["(session/put! :current-page #'home-page))",176],["shuts down, put any clean up code here\"",121],["(session/put! :current-page #'about-page))",124],["(.put",178],[";; you will need to put a script on your path.",183],["[cljs.core.async :refer [put!]]",258],[":request-method :put",279],["Signature of the result value put on the channel is [].",390],["Signature of the result value put on the channel is [result] where:",192]],"useCount":4715},{"word":"pv","context":[["(defn- tail-off [pv]",71],["(let [n-r (pv-fresh-node nil)]",71],["(PersistentVector. meta cnt-1 (- shift 5) (pv-aget new-root 0) new-tail nil)",71],["(defn- pv-aset [node idx val]",71],["(pv-aset ret subidx (do-assoc pv (- level 5) (pv-aget node subidx) i val))",71],["level (.-shift pv)]",126],["(loop [node (.-root pv)",126],["(pv-aset ret subidx node-to-insert)",142],["(let [ret (pv-clone-node node)]",142],["(if (and (< 5 shift) (nil? (pv-aget new-root 1)))",142]],"useCount":4326},{"word":"q","context":[["(:require [quil.core :as q]",358],["(run* [q]",386],["\"UTF-8;q=1,ISO-8859-1;q=0\"",128],["\"UTF-8;q=1,ISO-8859-1;q=0\"",128],["(q/background 0)",123],["(q/push-matrix)",101],["(q/no-stroke)",135],["[q]",170],["[quil.core :as q]",108],["(q/frame-rate 30)",104]],"useCount":9736},{"word":"query","context":[["(is (= (query-to-vec",102],["(data (data/run-query checkins",99],["(-> query",100],["(extract-query",105],["(query-to-vec",127],["(defn query",131],["(sql/with-query-results result-set",137],["query",206],["(query [this]",257],["[query]",303]],"useCount":13092},{"word":"queue","context":[["\"For a list or queue, returns a new list/queue without the first",72],["[langohr.queue :as lq]",52],["\"For a list or queue, returns a new list/queue without the first",72],["[langohr.queue     :as lq]",53],["\"For a list or queue, same as first, for a vector, same as, but much",72],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#queue [\" \" \" \"]\" opts (seq coll)))",69],["[queue]",28],["hand-off-queue (java.util.concurrent.SynchronousQueue.)",36],["queue",40],["(.put hand-off-queue \"got the lock\")",36]],"useCount":2028},{"word":"quil","context":[["(:require [quil.core :as q :include-macros true]",91],["[quil.middleware :as m]))",57],["(:use quil.core",87],["(:require [quil.core :as q]))",96],["[quil.middleware :as m]))",105],["[quil.core :as q]",108],["[quil.middleware :as m]",180],["(:require [quil.core :as q]",358],["(:use quil.core))",81],["(:require [quil.core :refer :all]",64]],"useCount":2138},{"word":"r","context":[["(is (= 200 (:status r)))",286],["[r]",190],["b (r :body)]",195],["r",205],["(:require [reagent.core :as r]",280],["[reagent.core :as r]))",236],["h (:headers r)",241],["[reagent.core :as r]",274],["(debug-println r)",231],["[clojure.core.reducers :as r]",188]],"useCount":14512},{"word":"rand","context":[["a (allpass-l:ar a 0.3 [(+ (ranged-rand 0 0.2) 0.1) (+ (ranged-rand 0 0.2) 0.1)] 5)",126],["a (allpass-l:ar a 0.3 [(+ (ranged-rand 0 0.2) 0.1) (+ (ranged-rand 0 0.2) 0.1)] 5)",126],["(filter (fn [_] (< (rand) prob)) coll)))",49],["(filter (fn [_] (< (rand) prob))))",49],["(declare rand)",42],["(defn rand-int",100],["(defn rand-nth",71],["(nth coll (rand-int (count coll))))",71],["([] (rand 1))",72],["(defn rand",82]],"useCount":1717},{"word":"random","context":[["; Define error function. For now, each run uses different random inputs",80],[";; random element of the set.",113],["([n] (* (Math/random) n)))",72],["\"Returns a random floating point number between 0 (inclusive) and",72],["\"Return a random permutation of coll\"",71],["[clojush.random]",71],["\"Return a random element of the (sequential) collection. Will have",71],["[n] (Math/floor (* (Math/random) n)))",71],["\"Returns a random integer between 0 (inclusive) and n (exclusive).\"",100],["[clojush pushstate interpreter random util globals]",113]],"useCount":2411},{"word":"range","context":[["ndx3 (range (inc ndx2) (count xs))",9728],["ndx1 (range (inc ndx0) (- (count xs) 2))",9728],["(range)",169],["ndx2 (range (inc ndx1) (- (count xs) 1))",9728],["(doseq [[i case] (map vector (range) train-cases)]",80],["(doseq [[i case] (map vector (range) test-cases)]",80],["(defn range",74],["([start end] (range start end 1))",73],["([end] (range 0 end 1))",73],["(for [ndx0 (range 0          (- (count xs) 3))",9728]],"useCount":42912},{"word":"rate","context":[["(is (every? (fn [measured-rate]",39],["r (rate interval",36],["(q/frame-rate 30)",34],["(defn rate",35],[":auto-rate true}",77],["; Set frame rate to 30 frames per second.",41],[":alternation-rate 0.01",119],[":uniform-mutation-rate 0.01",119],["(q/frame-rate 60)",95],["(q/frame-rate 30)",104]],"useCount":1963},{"word":"rdr","context":[["(with-open [rdr (reader file)]",30],["(if-let [line (.readLine rdr)]",32],["(fn [rdr _]",38],["[rdr initch]",44],["[rdr _]",133],["(fn [rdr]",52],["(with-open [rdr (io/reader file)]",30],["[rdr ch]",61],["(doseq [line (line-seq rdr)]",90],["[rdr]",63]],"useCount":1933},{"word":"re","context":[["[re-frame.core :as re-frame]",87],["[re s]",247],["[re-com/v-box",84],["(is (re-find msg body))",79],["[re-frame.core :as re-frame]",87],["(re-frame/register-sub",141],["(let [matches (.exec re s)]",171],["(re-frame/register-handler",191],[";; Use M-x 4clojure-check-answers when you're done!",228],[";; the server is forced to re-resolve the symbol in the var",374]],"useCount":6660},{"word":"react","context":[[":externs       [\"react/externs/react.js\"]",167],[":preamble      [\"react/react.min.js\"]",344],[":preamble      [\"react/react.min.js\"]",344],["(resources \"/react\" {:root \"react\"})",243],["(resources \"/react\" {:root \"react\"})",243],[":preamble             [\"react/react.min.js\"]}}]",105],[":preamble             [\"react/react.min.js\"]}}]",105],["(prepend (html [:script {:type \"text/javascript\" :src \"/react/react.js\"}]))",162],[":externs       [\"react/externs/react.js\"]",167],["(prepend (html [:script {:type \"text/javascript\" :src \"/react/react.js\"}]))",162]],"useCount":3864},{"word":"reaction","context":[[":reaction (fn [editor]",117],[":reaction (fn [obj]",81],[":reaction (fn [this path]",83],[":reaction (fn [this]",1215],["(:require-macros [reagent.ratom :refer [reaction]])",184],["(reaction",142],[":reaction (fn [app]",96],[":reaction (fn [this msg]",90],[":reaction (fn [ed]",76],[":reaction (fn [this data]",64]],"useCount":3179},{"word":"read","context":[["(read-char reader)",85],["(binding [*read-eval* false]",94],["[{:onyx/name :read-segments",96],[":onyx/ident :core.async/read-from-chan",99],["(u/bind-inputs! lifecycles {:read-segments input})",101],["{:lifecycle/task :read-segments",103],["(h/read-eval-call-test e/*target-opts*",109],["[cljs.reader :refer [read-string]]",112],["read-string",157],["[{:lifecycle/task :read-segments",83]],"useCount":8215},{"word":"reader","context":[["[cljs.reader :as reader]",229],["[cljs.reader :refer [read-string]]",112],["org.clojure/tools.reader",162],["[reader]",159],["[cljs.reader :as reader]",229],["{:lifecycle/before-task-start inject-reader-ch})",96],[":onyx/doc \"Injects the core.async reader channel\"}",106],[":lifecycle/calls :onyx.plugin.core-async/reader-calls",108],[":exclusions [org.clojure/tools.reader]]",209],[":lifecycle/calls :onyx.plugin.core-async/reader-calls}",199]],"useCount":6858},{"word":"reagent","context":[["(:require [reagent.core :as reagent]",244],["[reagent.core :as r]))",236],["(:require [reagent.core :as reagent]",244],["[reagent.core :as reagent :refer [atom]]",247],["[reagent.core :as reagent :refer [atom]]",247],["[reagent.core :as r]",274],["(:require [reagent.core :as reagent :refer [atom]]",532],["[reagent.session :as session]",503],["(:require [reagent.core :as r]",280],["(:require [reagent.core :as reagent :refer [atom]]",532]],"useCount":7992},{"word":"recur","context":[["(recur y (first more) (next more))",432],["(recur nval (inc n))))",428],["(recur))))",437],["(recur)))))",453],["(recur))",463],["(recur))))",593],["(recur)))",426],[":else (recur (+ i 2))))))",345],["(recur)))))",309],["(recur",1051]],"useCount":17139},{"word":"reduce","context":[["(-reduce [coll f start] (seq-reduce f start coll)))",682],["(-reduce [coll f] (seq-reduce f coll))",686],["(-reduce [coll f start] (seq-reduce f start coll)))",682],["(reduce",435],["(-kv-reduce [coll f init]",350],["(-reduce [coll f start]",337],["(-reduce [coll f]",336],["(reduce +",235],["(reduce",2819],["(-reduce [coll f] (seq-reduce f coll))",686]],"useCount":18998},{"word":"reduced","context":[["(defn reduced",71],["(if (reduced? init)",774],["(if (reduced? nval)",499],["(defn- preserving-reduced",49],["(reduced ret)",51],["(let [lt (if (reduced? result)",98],["(if (reduced? ret)",95],["(defn ^boolean reduced?",71],["\"Returns true if x is the result of a call to reduced\"",71],["(reduced? init)          @init",73]],"useCount":2537},{"word":"ref","context":[["(ref-set host (event :host)))",54],[":db/valueType :db.type/ref",752],["(let [output (ref [])",98],["\"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:",71],["\"Gets the validator-fn for a var/ref/agent/atom.\"",71],["(fn [k ref old new]",71],["(let [i (ref 0)",55],["refs-to-hashes :- {resource-ref-schema String}",56],["(let [r (ref nil)",64],[":db.type/ref",64]],"useCount":3751},{"word":"refer","context":[["(:require [reagent.core :as reagent :refer [atom]]",532],["[clojure.pprint :refer [pprint]]",557],["[environ.core :refer [env]]))",575],["(:require [compojure.core :refer :all]",610],["(:require-macros [cljs.core.async.macros :refer [go]])",713],["[clojure.test :refer :all]))",821],["(:require [midje.sweet :refer :all]",1083],["(:require [clojure.test :refer :all]",14383],["[clojure.test :refer :all]",1908],["[environ.core :refer [env]]",1535]],"useCount":77557},{"word":"reflection","context":[[":warn-on-reflection true",44],["(set! *warn-on-reflection* true)",942],[";  :warn-on-reflection true",33],[":global-vars {*warn-on-reflection* false}",32],[";(set! *warn-on-reflection* true)",61],[";;(set! *warn-on-reflection* true)",93],[":global-vars {*warn-on-reflection* true",100],[":global-vars {*warn-on-reflection* true})",57],["(set! *warn-on-reflection* false)",116],[":global-vars {*warn-on-reflection* true}",244]],"useCount":1831},{"word":"refresh","context":[["[clojure.tools.namespace.repl :refer [refresh]]",102],[":triggers #{:refresh!}",41],["[clojure.tools.namespace.repl :refer (refresh)]",37],["(refresh)",59],["[clojure.tools.namespace.repl :refer [refresh refresh-all]]",72],["(:require [clojure.tools.namespace.repl :refer [refresh]]",38],["[clojure.tools.namespace.repl :refer (refresh refresh-all)]",125],["[clojure.tools.namespace.repl :refer (refresh refresh-all)]",125],["(refresh :after 'user/go))",149],["[clojure.tools.namespace.repl :refer [refresh refresh-all]]",72]],"useCount":1498},{"word":"reg","context":[["(reg-event-fx",196],["(set-reg cpu-state :X  0x01)",88],["(reg-event-db",232],["(reg-sub",294],["(set-reg cpu-state :PC 0x400)",308],["(set-reg cpu-state :A  0x00)",40],["(is (= 0x26 (get-reg cpu-state :P)))))",43],["(set-reg cpu-state :Y  0x01)",46],["(is (= 0xA4 (get-reg cpu-state :P)))))",50],["(is (= 0x00 (get-reg cpu-state :A)))",68]],"useCount":2078},{"word":"register","context":[["(defn register",82],["(rf/register-handler",61],["(register-as \"dantheman\" \"test@example.org\" \"password\" \"\")",57],["(register-as \"dantheman\" \"test@example.org\" \"password\"))",55],["(register-as \"dantheman\" \"test@example.org\" \"password\" valid-ssh-key))",105],["(register-handler",868],["(register-sub",500],["(register-type-and-check-instruction",204],["(re-frame/register-handler",191],["(re-frame/register-sub",141]],"useCount":3646},{"word":"reify","context":[["(reify WriteHandler",26],["(reify",3869],["(reify",923],["(reify om/IRender",60],["(reify controllers/IOverlay",42],["(reify Thread$UncaughtExceptionHandler",41],["(reify ActionListener",32],["(reify ReadHandler",27],["(reify IOverlay",27],["(reify Handler",25]],"useCount":5661},{"word":"release","context":[[":release",65],["[\"change\" \"version\" \"leiningen.release/bump-version\" \"release\"]",61],["[\"change\" \"version\" \"leiningen.release/bump-version\"]",72],[":release-script \"scripts/release.sh\"",52],["(* (env-gen (lin attack sustain release) 1 1 0 1 FREE)",56],[":release-branch \"master\"",58],["{:id \"release\"",94],[":release-tasks [[\"vcs\" \"assert-committed\"]",80],["[\"change\" \"version\" \"leiningen.release/bump-version\" \"release\"]",61],[":release {:android",58]],"useCount":1745},{"word":"reload","context":[["(auto-reload *ns*)",131],["(figwheel/watch-and-reload",672],[":auto-reload? true",415],["[ring.middleware.reload :as reload]",381],["[ring.middleware.reload :as reload]",381],[";; #'app expands to (var app) so that when we reload our code,",373],["[ring.middleware.reload :refer [wrap-reload]]",325],["[ring.middleware.reload :refer [wrap-reload]]",325],["[net.cgrand.reload :refer [auto-reload]]",136],["[net.cgrand.reload :refer [auto-reload]]",136]],"useCount":6124},{"word":"remove","context":[["(remove",115],["(defn remove-method",71],["(remove empty?)",74],["(defn remove",96],["(-remove-watch [this key]",141],["(remove-left [node del]",142],["(remove-right [node del]",142],["(remove nil?",181],["(remove [_] (js/Error. \"Unsupported operation\")))",267],["(remove nil?)",361]],"useCount":4975},{"word":"render","context":[["(reagent/render [current-page] (.getElementById js/document \"app\")))",211],["(render-state [this state]",215],["(render-dom comp)))))",228],["(render-state [_ state]",254],["(defn render",183],[":reagent-render",160],["(render",385],["(render [this]",1058],["(render [_]",2242],["[\"project.clj\" (render \"project.clj\" data)]",199]],"useCount":9706},{"word":"repl","context":[["(piggieback/cljs-repl :repl-env (weasel/repl-env :ip \"0.0.0.0\" :port 9001)))",190],["[clojure.repl :refer :all]",167],[":repl-options {:init-ns user}",176],["(piggieback/cljs-repl :repl-env (weasel/repl-env :ip \"0.0.0.0\" :port 9001)))",190],["(piggieback/cljs-repl :repl-env (weasel/repl-env :ip \"0.0.0.0\" :port 9001)))",190],[";; gorilla-repl.fileformat = 1",203],["[weasel.repl :as weasel]))",247],[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["(defn browser-repl []",574],["[weasel.repl.websocket :as weasel]",380]],"useCount":10044},{"word":"replace","context":[["(replace-facts! {:certname certname",77],["(replace-handler",72],["(deftest replace-me ;; FIXME: write",110],["(defn replace",108],["(replace [node key val left right]",142],["(clojure.string/replace",103],["(:refer-clojure :exclude [replace])",91],[":jvm-opts ^:replace [\"-Xmx1g\" \"-server\"]",72],["(neg? c)  (.replace tree tk (.-val tree) (tree-map-replace comp (.-left tree) k v) (.-right tree))",71],[":else     (.replace tree tk (.-val tree) (.-left tree) (tree-map-replace comp (.-right tree) k v)))))",71]],"useCount":4136},{"word":"replica","context":[["diff (rep-diff old-replica new-replica)",66],["new-replica (f old-replica)",91],["(-> replica",64],["new-replica (f old-replica)",91],["old-replica (merge replica/base-replica",50],["diff (rep-diff old-replica new-replica)",66],["[{:keys [replica log peer-choices]}",84],["old-replica (merge replica/base-replica",50],["old-replica (merge replica/base-replica",50],["rep-diff (partial extensions/replica-diff entry)",58]],"useCount":1439},{"word":"repo","context":[[":distribution :repo}",299],[":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"",46],[":local-repo help/local-repo)",48],[":repository {\"test\" {:url (str \"http://localhost:\" test-port \"/repo\")",51],[":deploy-repositories [[\"releases\" {:url \"https://clojars.org/repo\"",60],[":local-repo help/local-repo)",48],[":local-repo help/local-repo))))",85],[":distribution :repo",125],[":repository {\"test\" {:url (str \"http://localhost:\" help/test-port \"/repo\")",64],[":local-repo help/local-repo))))",85]],"useCount":1970},{"word":"report","context":[[":report-simplifications 0",136],["_ (store-example-report! basic (now))",50],["[best population generation error-function report-simplifications]",129],["(-> report",120],[":final-report-simplifications 5000",114],["[report]",110],["\"Custom generational report.\"",108],["(store-example-report! (:basic reports) (now))",70],["_ (store-example-report! basic2 (now))",61],["(fn [tx-report]",47]],"useCount":3786},{"word":"reports","context":[["[puppetlabs.puppetdb.examples.reports :refer [reports]]",37],["{} munge-reports-for-comparison)",78],["(let [basic (:basic reports)",75],["[puppetlabs.puppetdb.reports :as reports]",73],["[puppetlabs.puppetdb.reports :as reports]",73],["(store-example-report! (:basic reports) (now))",70],["{} munge-reports-for-comparison)]",60],["basic2 (:basic2 reports)",55],["[puppetlabs.puppetdb.examples.reports :refer :all]",39],["[puppetlabs.puppetdb.examples.reports :refer [reports]]",37]],"useCount":2175},{"word":"req","context":[["req (-> (rtucore/req-w-std-hdrs rumeta/mt-type",116],["(-> req",98],["(handler req)))",101],["(client req))))",102],["(fn [req]",1562],["[req]",809],["(GET \"/*\" req (page)))",234],["(handler req)",183],["req))",157],["req (-> (rtucore/req-w-std-hdrs rumeta/mt-type",116]],"useCount":10389},{"word":"request","context":[[":request-method :put",279],["(handler request))))",270],["ring.mock.request",289],["(handler request)",247],[":request-method :post",298],["request",352],["[request]",1261],["(fn [request]",1722],["[ring.mock.request :as mock]",375],["(steam-request",251]],"useCount":20009},{"word":"require","context":[["(:require-macros [cljs.core.async.macros :refer [go]])",713],["(:require [clojure.string :as str]",961],["(:require [om.core :as om :include-macros true]",1040],["(:require [midje.sweet :refer :all]",1083],["(:require [clojure.java.io :as io]",2072],["(:require",2402],["(:require",7939],["(:require [clojure.tools.logging :as log]",907],["(:require-macros",757],["(:require [clojure.test :refer :all]",14383]],"useCount":73422},{"word":"required","context":[[":required true",69],[":required true",55],[":relationship :required-by}",36],["{:relationship \"required-by\",",45],[":required     true}",69],[":required true}",68],[";; An option with a required argument",55],["(tx/required",24],[":excuse-required false",25],["(testing \"example with only required fields\"",30]],"useCount":1433},{"word":"res","context":[["(fn [res]",220],["(if (:error res)",104],["res)))",201],["res",145],["res)",119],["res",502],["(cb res)",115],["res))",350],["res))))",113],["(partial swap! res conj))",112]],"useCount":6091},{"word":"rescue","context":[["(call-rescue e children))))",92],["(call-rescue event# else-kids#))",48],["(call-rescue value children)))))",50],["(call-rescue events children))))))",50],["(call-rescue e children))))))",63],["(call-rescue event children)))",68],["(call-rescue event children))))))",79],["(call-rescue event# true-kids#)",48],["(call-rescue event children)",132],["(call-rescue event children)))))",234]],"useCount":1805},{"word":"reset","context":[["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(defn reset",189],["(defn reset []",290],["(reset-cache method-cache method-table cached-hierarchy hierarchy))",142],["(reset! server nil)))",111],["(reset-time!)",102],["(reset! client-state (promise))",92],["(reset! server nil))",404],["(reset! server",412],["(reset! result",90]],"useCount":6623},{"word":"resolve","context":[["(resolve-ability",230],["(let [path (resolve-tilde-path path)",32],["(defn resolve",34],["(resolve",40],["JavaScript's implicit this (via the this-as macro) will resolve to the",42],["(aether/resolve-dependencies",47],["(resolve-handler [this m]",56],[":effect (effect (resolve-ability",64],["(resolve-ability state side",139],[";; the server is forced to re-resolve the symbol in the var",374]],"useCount":1843},{"word":"resource","context":[[":resource-paths [\"resources\"]",225],["{:subject_type \"resource\"",176],["(resource",169],["[ring.middleware.resource :refer [wrap-resource]]",195],["[ring.middleware.resource :refer [wrap-resource]]",195],["(io/resource \"index.html\") [] [:body] (if is-dev? inject-devmode-html identity))",127],["[clojure.java.io :refer [resource]]",127],[":jar-file (io/file (io/resource \"test.jar\"))",150],["io/resource",211],["[resource]",192]],"useCount":9718},{"word":"resources","context":[["(resources \"/\")",698],[":output-dir    \"resources/public/js/out\"",503],[":compiler {:output-to     \"resources/public/js/app.js\"",474],[":css-dirs [\"resources/public/css\"]",456],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["[compojure.route :refer [resources]]",348],["[compojure.route :refer [not-found resources]]",351],["; Makes static assets in $PROJECT_DIR/resources/public/ available.",371],["(wrap-file \"resources\")",385],["(route/resources \"/\")",894]],"useCount":14955},{"word":"resp","context":[["resp)))",110],["resp",109],["resp))",119],["resp (app req)]",97],["[target message status {:keys [resp context]} state]",143],["(await resp)",154],["headers (headers resp)]",214],["[resp]",231],["[ring.util.response :as resp]",244],["(is (= 200 (:status resp)))",329]],"useCount":6295},{"word":"response","context":[["response",252],["(is (= 200 (:status response)))",442],["(is (= (:status response) 404)))))",302],["[ring.util.response :as response]",289],["[ring.util.response :as response]",289],["[response]",260],["(is (= (:status response) 200))",1038],["[ring.util.response :as resp]",244],["(let [response (app (request :get \"/invalid\"))]",210],["(let [response (test-app",211]],"useCount":23781},{"word":"rest","context":[["rest))",203],["(when-not (nil? (.-rest lt))",98],["(set! (.. lt -rest -stepper) nil))",98],["(recur (rest ps))))",142],["\"Returns a map that consists of the rest of the maps conj-ed onto",146],["(-chunked-rest [coll]",175],["(if (nil? rest)",196],["rest",207],["(-rest [coll]",630],["(-rest [this]",123]],"useCount":10383},{"word":"result","context":[["result))",653],["([result] (rf result))",620],["([result] (rf result))",620],["result)))",457],["result",419],["([result input]",860],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["result",1101],["Signature of the result value put on the channel is [].",390],["result)",235]],"useCount":22020},{"word":"results","context":[["to results and, when calls with the same arguments are repeated often, has",71],["\"Returns a lazy sequence of the non-nil results of (f index item). Note,",71],["\"Returns a lazy sequence of the non-nil results of (f item). Note,",71],["(sql/with-query-results results",69],["results)))",92],["(let [[results] (u/collect-outputs! lifecycles [:write-segments])]",72],["[results]",95],["results))",127],["results",137],["(sql/with-query-results result-set",137]],"useCount":4293},{"word":"ret","context":[["ret))",175],["(loop [ret coll es (seq entry)]",162],["(recur (-assoc ret (-nth e 0) (-nth e 1))",162],["ret))))))",158],["ret",178],["ret))))",297],["ret",363],["ret)",416],["ret)))",453],["ret))",490]],"useCount":9723},{"word":"return","context":[["(return nil)))",72],["return-type:  void\"",96],["return a fn that is a comparator.\"",72],["(gen/return",111],[")) ;; To do validation, could have this function return an altered best individual",113],["and any supplied args and return the new value, and returns a new",117],["this means false return values will be included.  f must be free of",142],["not enough padding elements, return a partition with less than n items.\"",72],["this will return :fred if :fred is in the sequence, otherwise nil:",72],["returns that non-fn value. Note that if you want to return a fn as a",71]],"useCount":4188},{"word":"returns","context":[["\"Returns the sum of nums. (+) returns 0.\"",209],["and any supplied args and return the new value, and returns a new",117],["(pred item) returns true. pred must be free of side-effects.\"",117],["else returns numerator divided by all of the denominators.\"",140],["\"If no denominators are supplied, returns 1/numerator,",140],["Otherwise returns nil.\"",140],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["\"Returns the product of nums. (*) returns 1.\"",209],["the ys from x and returns the result.\"",209],["This function returns a core.async channel which eventually receives a result value and closes.",1145]],"useCount":9658},{"word":"reverse","context":[["reverse",282],["(defn reverse",94],["reverse))",77],["\"Returns a seq of the items in coll in reverse order. Not lazy.\"",72],[">=. Returns a reverse seq of those entries with keys ek for",71],["(let [fs (reverse (list* f1 f2 f3 fs))]",71],["(reverse",166],["(reverse result)",37],["(reverse)",99],["reverse)]",35]],"useCount":1485},{"word":"rf","context":[["([result] (rf result))",89],["(rf result)))",90],["[rf]",92],["([] (rf))",108],["(fn [rf]",131],["([] (rf))",710],["(fn [rf]",667],["(rf result input))))))))",172],["([result] (rf result))",620],["(rf result input)",180]],"useCount":3709},{"word":"riemann","context":[["riemann.time",43],["[riemann.folds :as folds]",42],["\"riemann.core\"",66],["riemann.core",44],["riemann.logging",46],["\"riemann.pubsub\"]",144],["[riemann.logging :as logging]",51],["\"riemann.transport.tcp\"",57],["[riemann.time :only [unix-time]]",60],["[riemann.pubsub :as pubsub]",42]],"useCount":3423},{"word":"right","context":[["(.-right right)",355],["(.-right right)",355],["(RedNode. (.-key right) (.-val right)",213],["(remove-right [node del]",142],["(.-right app)",142],["(RedNode. (.-key right) (.-val right)",213],["(instance? RedNode right)",213],[":penv +0.0000  :key  60 :left   +0 :right  +0",182],["right",145],["(BlackNode. key val left right nil))",142]],"useCount":13978},{"word":"ring","context":[["[ring \"1.3.2\"]",360],["ring.server.standalone",363],["[ring.adapter.jetty :as jetty]",375],["[ring.middleware file-info file]))",359],["[ring/ring-defaults \"0.1.5\"]",480],["[ring.adapter.jetty :refer [run-jetty]])",369],["[ring.middleware.reload :as reload]",381],["[ring \"1.4.0\"]",448],["[ring/ring-defaults \"0.1.5\"]",480],["[ring.mock.request :as mock]",375]],"useCount":30153},{"word":"rng","context":[["(-equiv [rng other] (equiv-sequential rng other))",72],["(-conj [rng o] (cons o rng))",72],["(-count [rng]",72],["(if (< n (-count rng))",144],["(-nth [rng n]",72],["(if-not (-seq rng)",72],["(-next [rng]",72],["(-conj [rng o] (cons o rng))",72],["(-equiv [rng other] (equiv-sequential rng other))",72],["(if-not (nil? (-seq rng))",72]],"useCount":1908},{"word":"root","context":[["(mount-root))",336],["(defn mount-root []",354],[";; rather than having its own copy. When the root binding",374],["(if ^boolean (.-edit root)",431],["(alter-var-root #'system",330],["(om/root",523],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],[":jsload-callback core/mount-root)",277],["(resources \"/react\" {:root \"react\"})",243],[":figwheel {:http-server-root \"public\"",639]],"useCount":15827},{"word":"route","context":[["(:require [compojure.route :as route]",226],["(:require [compojure.route :as route]",226],["[compojure.route :refer [resources]]",348],["[compojure.route :as route]",1585],["[compojure.route :as route]",1585],["(route/resources \"/\")",894],["(route/not-found \"Not Found\"))",545],["(testing \"not-found route\"",392],["(testing \"main route\"",360],["[compojure.route :refer [not-found resources]]",351]],"useCount":8919},{"word":"routes","context":[["(-> routes",209],[";; must be called after routes have been defined",193],["(-> app-routes",166],["(handler/site app-routes))",155],["(def routes",228],["(routes",486],["(defroutes app-routes",937],["(defroutes routes",1101],["(defroutes home-routes",195],["(defroutes main-routes",206]],"useCount":8433},{"word":"row","context":[["row",63],["[:div.row",914],["[:div.row",510],["[row]",184],["[:div {:class \"row\"}",118],["[:div {:class \"row\"}",108],["(dom/div #js {:className \"row\"}",95],["[:div.row-fluid",87],["(map (fn [row]",70],["(fn [row]",73]],"useCount":5852},{"word":"rows","context":[["rows formatted-venues-rows))",32],["(->> rows",50],["rows",54],["(fn [rows]",58],["deletes sql/delete-rows]",38],[":rows",37],["rows))",36],["(:rows)",33],["rows)))",33],["[rows]",90]],"useCount":1502},{"word":"run","context":[["(run* [q]",386],["(run-tests)",459],["[ring.adapter.jetty :refer [run-jetty]]",214],["(run-server)",242],["(run port))",247],["(defn run [& [port]]",256],["(run-jetty app {:port port :join? false})))",274],["(run-single cpu-state)",307],["[ring.adapter.jetty :refer [run-jetty]])",369],["(defn run",357]],"useCount":11727},{"word":"runner","context":[["(:require [doo.runner :refer-macros [doo-tests]]",92],["{:derezzed-events {:runner-turn-ends corp-rez-toast}",69],["(take-credits state :runner)",476],["(default-runner))",377],["(defn runner []",136],["(prompt-choice :runner \"Yes\")",109],["[doo.runner :refer-macros [doo-tests]]",69],["(core/move state :runner (find-card \"Sure Gamble\" (:hand (get-runner))) :deck)",71],["(core/move state :runner (find-card \"Sure Gamble\" (:hand (get-runner))) :deck)",71],["(prompt-choice :runner \"Steal\")",98]],"useCount":4086},{"word":"running","context":[["\"Stops the system if it is currently running, updates the Var",45],["user->sorted-running-task-ents",48],[";; When running figwheel from nREPL, figwheel will read this configuration",49],[";; don't do this, instead we do the opposite, running figwheel from",50],[";; Start an nREPL server into the running figwheel process. We",50],["\"Initializes and starts the system running.\"",51],["\"Initializes the current development system and starts it running.\"",58],[":instance-status :instance.status/running",80],["(bootstrap/with-puppetserver-running",128],[";; Start an nREPL server into the running figwheel process",134]],"useCount":1820},{"word":"s","context":[["(if (nil? s)",613],["s",415],[":target-path \"target/%s\"",3108],["[s]",2432],["[schema.core :as s]",1295],["[s]",1094],["(when-let [s (seq coll)]",1000],["[clojure.string :as s]",757],["[schema.core :as s]))",451],["(if (chunked-seq? s)",426]],"useCount":62246},{"word":"s1","context":[["(let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]",71],["(when (and s1 s2)",143],["[s1 s2]",99],["(cons (first s1) (cons (first s2)",77],["(interleave (rest s1) (rest s2))))))))",72],["(map f (rest s1) (rest s2) (rest s3)))))))",71],["(map f (rest s1) (rest s2)))))))",71],["(cons (f (first s1) (first s2))",71],["(when (and  s1 s2 s3)",71],["(let [s1 (seq c1) s2 (seq c2)]",148]],"useCount":1602},{"word":"s2","context":[["(let [s1 (seq c1) s2 (seq c2)]",148],["(cons (f (first s1) (first s2))",71],["(cons (f (first s1) (first s2) (first s3))",71],["(let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]",71],["(map f (rest s1) (rest s2)))))))",71],["(map f (rest s1) (rest s2) (rest s3)))))))",71],["(interleave (rest s1) (rest s2))))))))",72],["(cons (first s1) (cons (first s2)",77],["[s1 s2]",99],["(when (and s1 s2)",143]],"useCount":1515},{"word":"same","context":[["\"Returns an object of the same type and value as obj, with",143],["\"For a list or queue, same as first, for a vector, same as, but much",72],["\"For a list or queue, same as first, for a vector, same as, but much",72],["\"Tests if 2 arguments are the same object\"",72],["same (hashed/sorted) type, that contains the mapping of key(s) to",72],["\"Takes a fn f and returns a fn that takes the same arguments as f,",72],["has the same effects, if any, and returns the opposite truth value.\"",72],["\"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,",73],["\"Returns true if coll has no items - same as (not (seq coll)).",74],["same time) and children after the attributes.\"",116]],"useCount":2811},{"word":"satisfies","context":[["(native-satisfies? ILookup o)",128],["(if (satisfies? IEncodeJS x)",72],["(satisfies? IReversible coll))",72],["\"Returns true if coll satisfies IReduce\"",72],["\"Return true if x satisfies IMap\"",72],["(satisfies? IEncodeClojure x)",73],["(native-satisfies? IReduce coll)",126],["(let [nseq (if (satisfies? INext mseq)",272],["(if (satisfies? IMapEntry o)",147],["(native-satisfies? IIndexed coll)",126]],"useCount":4209},{"word":"sb","context":[["(let [sb (pr-sb-with-opts objs opts)]",70],["(str sb)))",73],["(-write [_ s] (.append sb s))",70],["(.toString sb)))))",71],["(.append sb \\newline)",71],["(recur (. sb  (append (str (first more)))) (next more))",71],["sb))",71],["writer (StringBufferWriter. sb)]",141],["(let [sb (StringBuffer.)",111],["(let [sb (StringBuilder.)]",76]],"useCount":1860},{"word":"sc","context":[["([sc start-test start-key end-test end-key]",142],["which (test (.. sc comparator (compare ek key)) 0) is true\"",142],["(let [include (mk-bound-fn sc test key)]",142],["([sc test key]",142],["\"sc must be a sorted collection, test(s) one of <, <=, > or",142],["(:use [overtone.sc.machinery.ugen common check]))",72],["[sc test key]",71],["(take-while (mk-bound-fn sc start-test start-key)",71],["(when-let [[e :as s] (-sorted-seq-from sc key true)]",71],["(if ((mk-bound-fn sc end-test end-key) e) s (next s))))))",71]],"useCount":2427},{"word":"scale","context":[[":content \"width=device-width, initial-scale=1\"}]",254],[":env-bias  +0.00  :env-scale  +1.00",146],[":left-key  60  :left-scale  +0  :right-key  60  :right-scale  +0",125],[":left-key  60  :left-scale  +0  :right-key  60  :right-scale  +0",125],["(defn scale",83],[":scale \"scale\"",58],[":scale \"scale\"",58],["[:meta {:name \"viewport\" :content \"width=device-width, initial-scale=1\"}]",55],[":content \"width=device-width, initial-scale=1.0\"}]",52],[":left-key  60  :left-scale +0  :right-key  60 :right-scale  +0",47]],"useCount":1948},{"word":"scf","context":[["(scf-store/add-certname! \"foo3\")",61],["(scf-store/add-certname! \"foo1\")",88],["(scf-store/add-certname! certname)",82],["(scf-store/add-facts! {:certname \"foo1\"",75],["(scf-store/add-certname! \"foo2\")",72],["[puppetlabs.puppetdb.scf.storage :as scf-store]",70],["[puppetlabs.puppetdb.scf.storage :as scf-store]",70],["[puppetlabs.puppetdb.scf.hash :as shash]",50],["(scf-store/add-facts! {:certname \"foo3\"",53],["[puppetlabs.puppetdb.scf.storage-utils :as sutils]",184]],"useCount":2426},{"word":"scheduler","context":[[":task-schedulers {:j1 :onyx.task-scheduler/balanced",34],["{:replica {:job-scheduler :onyx.job-scheduler/balanced",46],["{:replica {:job-scheduler :onyx.job-scheduler/balanced",46],[":task-scheduler :onyx.task-scheduler/balanced}",64],[":task-scheduler :onyx.task-scheduler/balanced}",64],[":task-scheduler :onyx.task-scheduler/balanced}]",101],[":job-scheduler :onyx.job-scheduler/greedy",33],[":task-scheduler :onyx.task-scheduler/balanced}]",101],[":task-scheduler :onyx.task-scheduler/balanced})",189],[":task-scheduler :onyx.task-scheduler/balanced})",189]],"useCount":2272},{"word":"schema","context":[["[schema.core :as s]",1295],["(schema/defn ^:always-validate",797],["(:require [schema.core :as s]",254],["[schema.core :as schema]",193],["[schema.core :as schema]",193],["[puppetlabs.puppetdb.schema :as pls]",188],["subject :- schema/Str]",145],["[schema.test :as schema-test]",136],["[schema.test :as schema-test]",136],["[schema.core :as s]))",451]],"useCount":12641},{"word":"screen","context":[["(fn [screen entities]",447],["(println (:input-y screen)) ; the y position of the finger/mouse",30],["[screen entities]",55],["(defscreen main-screen",50],["[screen]",45],["[screen k & options]",38],["(clear-screen)",36],["(include-css \"/css/screen.css\")]",33],["(println (:input-x screen)) ; the x position of the finger/mouse",30],["(neko.debug/keep-screen-on this)",31]],"useCount":1509},{"word":"script","context":[["[:script {:type \"text/javascript\"}",113],[":compiler {;; CLS generated JS script filename",55],[";; next line is auto-generated by the build-script - Do not edit!",63],["{:tag :script,",85],["{:ns pallet.script.lib,",102],[":file \"pallet/script/lib.clj\",",106],["(prepend (html [:script {:type \"text/javascript\" :src \"/react/react.js\"}]))",162],["(prepend (html [:script {:type \"text/javascript\" :src \"/js/out/goog/base.js\"}]))",235],[";; that script will have to take a file path and a line number",183],[";; you will need to put a script on your path.",183]],"useCount":2052},{"word":"second","context":[["and the first item of coll, followed by applying f to 1 and the second",72],["(recur (nnext in) (assoc! out (first in) (second in)))",73],["(second",91],["(sort-by second)",86],["second))",80],["(recur ret (first kvs) (second kvs) (nnext kvs))",74],["of second items in each coll, until any one of the colls is",97],["(recur (nnext in) (assoc out (first in) (second in)))",144],["(map second)",200],["second",254]],"useCount":4508},{"word":"secretary","context":[["[secretary.core :as secretary]",95],["(secretary/set-config! :prefix \"#\")",309],["(secretary/defroute \"/\" []",286],["(secretary/dispatch! (.-token event))))",258],["[secretary \"1.2.3\"]]",104],["[secretary.core :as secretary]",95],["[secretary \"1.2.3\"]",326],["[secretary.core :as secretary :include-macros true]",385],["[secretary.core :as secretary :include-macros true]",385],["(secretary/defroute \"/about\" []",172]],"useCount":3063},{"word":"section","context":[[":section \"J\",",72],[":section \"C\",",580],["[:section",295],[":section \"G\",",207],["[:section",132],[":section \"A\",",95],[":section \"N\",",92],["(section",89],["[:section.container",81],["(dom/section",71]],"useCount":3203},{"word":"segments","context":[["{:lifecycle/task :read-segments",103],["{:lifecycle/task :write-segments",154],[":onyx/doc \"Writes segments to a core.async channel\"}]",161],["[{:onyx/name :read-segments",96],[":onyx/doc \"Reads segments from a core.async channel\"}",389],["[onyx.plugin.core-async :refer [take-segments!]]",169],["(u/bind-inputs! lifecycles {:read-segments input})",101],[":onyx/doc \"Writes segments to a core.async channel\"}]))",99],["{:onyx/name :write-segments",84],["[{:lifecycle/task :read-segments",83]],"useCount":2027},{"word":"select","context":[["(html/select",40],["(defn select",98],["(kitchensink/select-values basic-events-map matches)",83],["select",74],["(-> (select :*)",73],["(defn select-keys",71],[":triggers #{:select}",39],["(select-keys",60],["(select :foo",67],["(select jars",41]],"useCount":2612},{"word":"send","context":[["(:refer-clojure :exclude [send])",114],["(socket/send! {:figwheel-event \"callback\"",42],["(send-to Klass :new",46],["(def chsk-send! send-fn) ; ChannelSocket's send API fn",47],["(def chsk-send! send-fn) ; ChannelSocket's send API fn",47],["(def chsk-send! send-fn) ; ChannelSocket's send API fn",47],["(defn send",51],["(defn send-message",69],["(let [{:keys [chsk ch-recv send-fn state]}",70],["[{:as ev-msg :keys [event id ?data ring-req ?reply-fn send-fn]}]",72]],"useCount":2583},{"word":"sentinel","context":[["(if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)",142],["(if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)",142],["(if (identical? sentinel m)",72],["(loop [sentinel lookup-sentinel",72],["(let [m (get m (first ks) sentinel)]",71],["(def ^:private lookup-sentinel (js-obj))",71],[":else       (not (identical? (.inode-lookup root 0 (hash k) k lookup-sentinel)",71],["lookup-sentinel))))",71],["(if (identical? (-lookup transient-map v lookup-sentinel) lookup-sentinel)",71],["(loop [sentinel lookup-sentinel",72]],"useCount":1445},{"word":"seq","context":[["(-seq [coll]",588],["(let [s (seq coll)]",296],["(-seq [this] this)",308],["(if (chunked-seq? s)",426],["(-seq [coll] coll)",560],["(lazy-seq",1860],["(lazy-seq",1290],["(-reduce [coll f start] (seq-reduce f start coll)))",682],["(-reduce [coll f] (seq-reduce f coll))",686],["(when-let [s (seq coll)]",1000]],"useCount":35885},{"word":"sequence","context":[["\"Returns a lazy sequence of the items in coll for which",144],["\"Returns a lazy sequence consisting of the result of applying f to 0",72],["\"Returns a lazy sequence of lists of n items each, at offsets step",72],["\"Returns a lazy sequence of successive items from coll while",72],["\"Returns a lazy sequence of the first n items in coll, or all items if",72],["\"Returns a sorted sequence of the items in coll, where the sort",72],["where ks is a sequence of keys. Returns nil if the key is not present,",72],["\"Returns a sorted sequence of the items in coll. Comp can be",73],["\"Takes a sequence of inputs and gives IO test cases of the form",113],["\"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"",73]],"useCount":3732},{"word":"sequential","context":[["(defn- equiv-sequential",72],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-equiv [coll other] (equiv-sequential coll other))",1355],["(when (sequential? y)",72],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))",138],["\"Takes any nested combination of sequential things (lists, vectors,",73],["\"Assumes x is sequential. Returns true if x equals y, otherwise",72],["(-equiv [rng other] (equiv-sequential rng other))",72],["(rest (tree-seq sequential? seq x))))",71]],"useCount":4944},{"word":"serial","context":[["(next-serial-number! serial)",13],["\"Reads the serial number file from disk and returns the serial number.\"",13],["(def serial-file-lock",13],["[board (open-serial-board port-name)]",18],["[:id :serial :primary :key]",16],["cert-w-exts  (sign-certificate issuer issuer-priv serial not-before",15],["[serial-file :- schema/Str]",26],["serial",40],[":serial-number nil}}",44],["[:id :serial \"PRIMARY KEY\"]",57]],"useCount":1485},{"word":"server","context":[["(defn start-server",523],["(defn stop-server []",512],[":server-port 3449",498],["(reset! server",412],[":figwheel {:http-server-root \"public\"",639],["(defonce server (atom nil))",558],[";; changes, the server picks it up without having to restart.",374],["\"used for starting the server in development mode from REPL\"",378],["(reset! server nil))",404],["(.stop @server)",409]],"useCount":19995},{"word":"service","context":[["(is (= {:service \"foo\"} (deref r)))",72],["service",169],["[jetty9-service]",155],["(is (= \"foo\" (:service (deref r))))",90],["(let [jruby-service (tk-app/get-service app :JRubyPuppetService)",83],["(let [jruby-service (tk-app/get-service app :JRubyPuppetService)",83],["jruby-service",82],["[puppetlabs.trapperkeeper.app :refer [get-service]]",81],["[service]",69],["webrouting-service",64]],"useCount":11229},{"word":"services","context":[["[puppetlabs.services.puppet-profiler.puppet-profiler-service :as profiler]",63],["[puppetlabs.trapperkeeper.services.webserver.jetty9-service :refer [jetty9-service]]",57],["[puppetlabs.services.jruby.jruby-puppet-service :as jruby]",57],["[puppetlabs.trapperkeeper.services :as tk-services]",70],["[puppetlabs.services.jruby.jruby-testutils :as jruby-testutils]",98],["[puppetlabs.trapperkeeper.services :as tk-services]",70],["[puppetlabs.services.protocols.jruby-puppet :as jruby-protocol]",53],["[puppetlabs.puppetdb.testutils.services :as svc-utils]",48],["[puppetlabs.services.jruby.jruby-puppet-internal :as jruby-internal]",45],["[puppetlabs.services.jruby.puppet-environments :as puppet-env]",42]],"useCount":2946},{"word":"servlet","context":[[";; If we're not inside a servlet environment",58],[":servlet-context *app-context*)))",50],[":profiles {:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",52],["{:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",259],["{:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",259],["[javax.servlet/servlet-api \"2.5\"]",200],["[javax.servlet/servlet-api \"2.5\"]",200],["app is deployed as a servlet on",117],[":profiles {:dev {:dependencies [[javax.servlet/servlet-api \"2.5\"]",52],["(if-let [context (:servlet-context request)]",105]],"useCount":2232},{"word":"session","context":[["(session/put! :current-page #'about-page))",124],["(db/with-session [session (:hecuba-session store)]",126],["(db/with-session [session (:hecuba-session store)]",126],["(db/with-session [session (:hecuba-session store)]",126],["session",137],["(session/put! :current-page #'home-page))",176],["[:div [(session/get :current-page)]])",223],["(-> (session web/clojars-app)",298],["[reagent.session :as session]",503],["[reagent.session :as session]",503]],"useCount":7426},{"word":"set","context":[[";(logging-config/set-logger! :level :info)",276],[";(logging-config/set-logger! :level :debug)",276],["(set! *print-fn* (fn [& _]))",287],[":set :expert",306],["(set-reg cpu-state :PC 0x400)",308],["(secretary/set-config! :prefix \"#\")",309],["(set! *warn-on-reflection* true)",942],["(set! (.-val added-leaf?) true)",430],["[clojure.set :as set]",778],["[clojure.set :as set]",778]],"useCount":35138},{"word":"settings","context":[["settings)",51],["(defn settings []",43],["(let [path (path-to-cert-request (:csrdir settings) subject)",44],["(let [settings (assoc (testutils/ca-settings cadir)",47],["(let [settings (assoc (testutils/ca-settings cadir)",47],[";(run-pucks (agents) (settings))",43],["(let [settings (testutils/ca-sandbox! cadir)",80],["test-app (-> (build-ring-handler settings \"42.42.42\")",68],["[settings]",67],["signed-cert-path (ca/path-to-cert (:signeddir settings) \"test-agent\")]",60]],"useCount":4127},{"word":"setup","context":[["(defn setup []",743],["(defn setup",102],["(defn setup []",95],[";; void setup() {",67],[":setup setup",639],[":setup setup",639],[":setup setup",77],[":setup setup",77],["(setup)",71],["(clean-setup!)",64]],"useCount":3617},{"word":"shift","context":[["(let [bit (bitpos hash shift)",142],["(inode-without [inode shift hash key]",213],["(if (and (< 5 shift) (nil? (pv-aget new-root 1)))",142],["(let [idx  (mask hash shift)",426],["(let [bit (bitpos hash shift)]",291],["(inode-find [inode shift hash key not-found]",217],["(inode-lookup [inode shift hash key not-found]",217],["(inode-assoc [inode shift hash key val added-leaf?]",213],["(inode-assoc! [inode edit shift hash key val added-leaf?]",213],["(inode-without! [inode edit shift hash key removed-leaf?]",213]],"useCount":10414},{"word":"should","context":[["f should accept number-of-colls arguments.\"",93],["item in coll, etc, until coll is exhausted. Thus function f should",72],["\"f should be a function of 2 arguments. If val is not supplied,",72],["multiple times, and thus should be free of side effects.  Returns",73],["\"Tools for interactive development with the REPL. This file should",76],["Strings which should be printed.\" :dynamic true}",90],["(testing (str \"query: \" query \" should fail with msg: \" msg)",90],["(should=",110],["([program data-cases] ;; data-cases should be :train or :test",113],[";; should be used as training and testing cases respectively. Each \"set\" of",113]],"useCount":6258},{"word":"show","context":[["(with-show show",52],["(fn [show snapshot]",52],["(with-show show",52],[":show-discard true",56],[":triggers #{:show}",62],["(with-show (:show controller)",76],["(with-show (:show controller)",76],["{:pre [(some? *show*)]}",87],["(defn show",91],[":on-show",98]],"useCount":2076},{"word":"shutdown","context":[["(onyx.api/shutdown-peer v-peer))",132],["(onyx.api/shutdown-peer-group peer-group)",112],["(onyx.api/shutdown-env env)",88],["(timbre/info \"shutdown complete!\"))",72],["(shutdown-agents)))",61],["(shutdown [this]",48],["(shutdown-agents))",151],["(reset! shutdown-called? true)",47],["(defn shutdown",44],["(shutdown-agents)",102]],"useCount":1802},{"word":"side","context":[["state side",282],["(resolve-ability state side",139],["(pred item) returns true. pred must be free of side-effects.\"",117],["(u/side-effect!",100],["(pred item) returns true. pred must be free of side-effects.",98],["\"Takes a function of no args, presumably with side effects, and",72],["\"When lazy sequences are produced via functions that have side",144],["atom. validate-fn must be nil or a side-effect-free fn of one",72],["multiple times, and thus should be free of side effects.  Returns",73],["(continue-ability state side",74]],"useCount":3179},{"word":"simple","context":[["(with-test-db simple-schema",100],["(let [comp (component \"simple-div.html\"",27],["(let [comp #(component \"simple-div.html\"",28],[":compiler {:optimizations :simple",28],[":optimizations :simple",323],[";; server, this is for simple ring servers, if this",114],["(let [comp (component \"simple-div.html\"",76],["(part-time-simple",72],["; simple reduce based on seqs, used as default",71],[":optimizations :simple}}",31]],"useCount":1737},{"word":"site","context":[["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["(handler/site app-routes))",155],["[compojure.handler :refer [site]]",181],["[ring.middleware.defaults :refer [wrap-defaults site-defaults]]",203],[";; 02110-1301 USA, or see the FSF site: http://www.fsf.org.",242],["; code generation for API call-site",255],["{\"resources/public/css/site.min.css\" \"resources/public/css/site.css\"}}",301],["[ring.middleware.defaults :refer [site-defaults wrap-defaults]]",351],["(println (str \"You can view the site at http://localhost:\" port))))",374],["(include-css (if (env :dev) \"css/site.css\" \"css/site.min.css\"))]",147]],"useCount":4320},{"word":"size","context":[["(dotimes [i size]",645],[":onyx/batch-size batch-size",806],[":onyx/batch-size batch-size",806],["size (count c)",355],["b (chunk-buffer size)]",355],["([size init-val-or-seq]",282],["([size-or-seq]",282],["(if (and s (< i size))",282],["(let [a (make-array size)]",282],["(if (number? size-or-seq)",272]],"useCount":12106},{"word":"sleep","context":[["(Thread/sleep 200)",107],["(Thread/sleep 100)",549],["(Thread/sleep 500)",283],["(Thread/sleep 10)",169],["(Thread/sleep 2000)",154],["(Thread/sleep 5000)",135],["(Thread/sleep 1000)",570],["(Thread/sleep 50)",130],["(Thread/sleep 10000)",105],["(Thread/sleep 100))",73]],"useCount":3742},{"word":"slf4j","context":[["[org.slf4j/slf4j-log4j12 \"1.7.12\"]",38],["[org.slf4j/slf4j-log4j12 \"1.7.1\"]",34],["[org.slf4j/slf4j-log4j12 \"1.7.1\"]",34],["[org.slf4j/jcl-over-slf4j \"1.7.7\"]",30],["[org.slf4j/jcl-over-slf4j \"1.7.7\"]",30],["[org.slf4j/slf4j-api \"1.7.5\"]",39],["[org.slf4j/slf4j-api \"1.7.5\"]",39],["[org.slf4j/slf4j-log4j12 \"1.7.12\"]",38],["[org.slf4j/slf4j-api \"1.7.12\"]",56],["[org.slf4j/slf4j-api \"1.7.12\"]",56]],"useCount":1604},{"word":"slingshot","context":[["[slingshot \"0.12.2\"]",112],["[slingshot.slingshot :refer [throw+]]))",73],["[slingshot.slingshot :refer [try+]]",78],["[slingshot.slingshot :refer [try+]]",78],["[slingshot.slingshot :refer [try+ throw+]]",83],["[slingshot \"0.10.3\"]",93],["(is (thrown-with-slingshot?",99],["[slingshot.slingshot :refer [throw+]]",155],["[slingshot.slingshot :refer [throw+]]",155],["[slingshot.slingshot :refer [try+ throw+]]",83]],"useCount":2093},{"word":"slurp","context":[["(is (= \"Hello, World!\" (slurp (.getBody response))))))",31],["(is (= \"Hello, World!\" (slurp (:body @response))))))",29],["(io/slurp-resource filename)",31],["(route/not-found (slurp (io/resource \"404.html\")))))",33],["slurp)",36],["(slurp (:body response))))",38],["(slurp",56],["(slurp)",123],["slurp",572],["actual (json/parse-string (slurp (:body (query-response",30]],"useCount":1913},{"word":"so","context":[["engines.  IPrintWithWriter implements printing via the IWriter protocol, so it",70],["so-far",71],["\"Support so that collections can implement toString without",69],["; furnished to do so, subject to the following conditions:",58],[";; the server ring handler inside figwheel's http-kit server, so",50],["so  (.-strobj m)",71],["\"Restrict the query parameter of the supplied request so that it",87],[";; furnished to do so, subject to the following conditions:",127],["(recur (inc i) (assoc! out k (aget so k))))",71],[";; #'app expands to (var app) so that when we reload our code,",373]],"useCount":2174},{"word":"socket","context":[["[figwheel.client.socket :as socket]",32],["(doto socket",33],["(ws/send-msg socket \"hello\")",38],["(socket/send! {:figwheel-event \"callback\"",42],[":socket-timeout 5000",44],["socket)",45],["[{:name \"socket-id\", :type \"integer\"}",48],["[socket]",55],["(.close socket)",55],["(with-socket",64]],"useCount":1525},{"word":"solve","context":[["(defn solve-for07 [xs v]",512],["(defn solve-for01 [xs v]",512],["(defn solve-for05 [xs v]",512],["(defn solve-for17 [xs v]",512],["(defn solve-for08 [xs v]",512],["(defn solve-for12 [xs v]",512],["(defn solve-for15 [xs v]",512],["(defn solve-for14 [xs v]",512],["(defn solve-for13 [xs v]",512],["(defn solve-for10 [xs v]",512]],"useCount":10153},{"word":"some","context":[["(some #{:fred} coll)\"",72],["(when (some identity maps)",147],["(some",130],["(owl-some b/derivedFrom b/k46_XX)",93],["{:pre [(some? *show*)]}",87],["(defn some",73],["([x] (some #(% x) ps))",71],["([x y] (some #(or (% x) (% y)) ps))",71],["it will not perform a linear search for a value.  See also 'some'.\"",72],["[pred coll] (not (some pred coll)))",72]],"useCount":4386},{"word":"sort","context":[["(defn sort",80],["(sort",96],["(sort-by",153],["sort",191],["(sort-by first)",90],["(sort compare coll))",73],["(sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))",72],["(sort-by keyfn compare coll))",72],["(sort-by second)",86],[";; matching Clojure's stable sort, though docs don't promise it",72]],"useCount":2409},{"word":"sorted","context":[["(-sorted-seq [coll ascending?]",143],["(-sorted-seq-from [coll k ascending?]",143],["\"sc must be a sorted collection, test(s) one of <, <=, > or",142],["\"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,",73],["\"Returns a sorted sequence of the items in coll. Comp can be",73],["same (hashed/sorted) type, that contains the mapping of key(s) to",72],["\"Returns a sorted sequence of the items in coll, where the sort",72],["\"Returns a new sorted set with supplied keys.\"",71],["(defn sorted-map-by",71],["(sorted-table",169]],"useCount":3316},{"word":"source","context":[[":source-map true",388],[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],[":java-source-paths [\"src/java\"]",423],[":source-map true}}",443],[":source-paths [\"src/cljs\"]",534],[":source-paths [\"src/clj\" \"src/cljs\"]",549],["{:source-paths [\"env/prod/cljs\"]",592],[":source-paths [\"src/clj\"]",672],[":source-paths [\"src\"]",1683],[":omit-source true",716]],"useCount":19601},{"word":"span","context":[[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419],["[:span.icon-bar]",52],["{:tag :span, :attrs nil, :content (\" +\")})}",128],["[:span",291],["({:tag :span, :attrs nil, :content (\"+ Show\")}",128],["[:span",88],["{:tag :span, :attrs {:id \"bbcountdown1\"}, :content nil}",74],[":span,",60],["(dom/span",55],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419]],"useCount":3196},{"word":"spec","context":[["db-spec",293],["[spec]",190],["(ct/defspec spec-solution",190],["[clojure.spec :as s]",141],["(:require [clojure.spec :as s]",123],["[db-spec]",85],["(def db-spec",83],["spec",62],[":test-paths [\"spec/clj\"]",62],[":test-paths [\"spec\"]",75]],"useCount":4483},{"word":"split","context":[["(use '[clojure.string :only (join split)])",46],["(string? name) (let [parts (.split name \"/\")]",62],["(defn split-at",71],["(defn split-with",71],["[clojure.string :refer [split]]",89],["str/split-lines",44],[";; set. Would need a third category of data cases, or a defined split of training cases.",113],["(clojure.string/split",41],["(:require [clojure.string :refer [split]]",40],["(split",39]],"useCount":2472},{"word":"sql","context":[["[clojure.java.jdbc :as sql]",254],["(sql/do-commands",510],["(sql/create-table-ddl",162],["(sql/with-connection db",138],["(sql/transaction",182],["(:require [clojure.java.jdbc :as sql]",237],["(sql/insert-records",207],["sql/format)))",84],["(sql/with-query-results result-set",137],["(catch java.sql.SQLException e",97]],"useCount":6220},{"word":"src","context":[[":java-source-paths [\"src/java\"]",423],[":source-paths [\"src/clj\"]",672],[":source-paths [\"src/clj\" \"src/cljs\"]",549],[":source-paths [\"src/clj\" \"src/cljc\"]",189],[":source-paths [\"src\" \"test\"]",208],["(prepend (html [:script {:type \"text/javascript\" :src \"/js/out/goog/base.js\"}]))",235],[":cljsbuild {:builds {:app {:source-paths [\"src/cljs\"]",401],[":source-paths [\"src/clj\" \"src/cljs\"]",549],[":source-paths [\"src/cljs\"]",534],[":source-paths [\"src\"]",1683]],"useCount":11921},{"word":"ssl","context":[["{:ssl-host \"0.0.0.0\"",70],["(merge valid-ssl-pem-config",40],[":value    [ssl-server-cert ssl-client-cert]}",44],[":value    [ssl-server-cert ssl-client-cert]}",44],[":ssl? true",46],["(wrap-with-ssl-client-cert))]",48],["ssl-request-options)]",54],["[puppetlabs.ssl-utils.core :as ssl-utils]",59],["[puppetlabs.ssl-utils.core :as ssl-utils]",59],["(wrap-with-ssl-client-cert))",84]],"useCount":1976},{"word":"stack","context":[["(PersistentTreeMapSeq. nil stack ascending? -1 nil))))))",71],["(check-instruction-with-all-kinds-of-stack-stuff",155],["(get-stack",113],["stack)))",80],["(recur stack          (.-left t)))))",71],["(recur (conj stack t) (.-left t))",71],["(next stack)",71],["recursion without stack consumption. Calls f with supplied args, if",71],["(conj stack t))",71],["(recur (conj stack t) (.-right t))",71]],"useCount":3971},{"word":"start","context":[["(start))",314],["(-reduce [coll f start]",337],["(defn start []",373],["(defn start-figwheel []",507],["(start [this]",807],["(-reduce [coll f start] (seq-reduce f start coll)))",682],["(-reduce [coll f start] (seq-reduce f start coll)))",682],["(start [component]",659],["(defn start",543],["(defn start-server",523]],"useCount":23771},{"word":"state","context":[["(-> state",542],["[state]",498],["(take-credits state :runner)",476],["state)))",556],["(take-credits state :corp)",1179],["state",578],["(-> state",653],["state)",472],["(init-state [_]",755],["(fn [state]",958]],"useCount":47658},{"word":"static","context":[[":static true}",915],["static om/Ident",166],[":static true}",120],[":static-fns true",78],["static cellophane/IQuery",49],[":figwheel {;; :http-server-root \"public\"       ;; serve static assets from resources/public/",47],["static om/IQueryParams",43],["(route/resources \"/static\")",37],["static om/IQuery",458],["; Makes static assets in $PROJECT_DIR/resources/public/ available.",371]],"useCount":2965},{"word":"stats","context":[["stats-seq))",100],[":compiler-stats true",47],["(nil-to-zero (:emitted stats))",52],["(nil-to-zero (:acked stats))",52],["(nil-to-zero (:transferred stats))",52],["(-> stats",52],["stats",51],["(defn stats",40],["stats (if stats",50],["stats (if stats",50]],"useCount":3038},{"word":"status","context":[["{:status 200",1735],["(is (= (:status response) 200))",1038],["(is (= 200 (:status response)))",442],["(is (= 200 (:status resp)))",329],["(has (status? 200))",323],["(is (= (:status response) 404)))))",302],["(is (= 200 (:status r)))",286],["{:status 302",272],["{:status  200",257],["(System/exit status))",252]],"useCount":22706},{"word":"step","context":[["(+ start (* n step))",144],["([n step coll]",143],["(if (and (> start end) (zero? step))",144],["(if (pos? step)",171],["(let [step (fn step [xs seen]",78],["(let [step (fn [pred coll]",73],["(step [this lt]",97],["apart. If step is not supplied, defaults to n, i.e. the partitions",72],["(let [step (fn step [xs seen]",78],["(d/step)",86]],"useCount":4930},{"word":"stop","context":[["(stop)",879],["(stop [this]",764],["(stop [component]",571],["(defn stop-server []",512],["(.stop @server)",409],["(defn stop",409],["(defn stop []",372],["(stop! core))))))",93],["(defn stop!",98],["(stop [this context]",121]],"useCount":8058},{"word":"storage","context":[["storage-replace-catalog! scf-store/replace-catalog!]",26],["[kixi.hecuba.storage.db :as db]",30],["(storage/ensure-environment env))",28],["(:require [com.puppetlabs.puppetdb.scf.storage :as scf-store]",25],["(scf-storage/maybe-activate-node! certname producer-timestamp)",33],["[com.puppetlabs.puppetdb.scf.storage :as scf-store]",34],["[puppetlabs.puppetdb.scf.storage :as scf-store]",70],["[puppetlabs.puppetdb.scf.storage-utils :as sutils]",184],["[freecoin.storage :as storage]",24],["[freecoin.storage :as storage]",24]],"useCount":1639},{"word":"store","context":[["(scf-store/add-certname! certname)",82],["_ (store-example-report! basic2 (now))",61],["(store-example-report! (:basic reports) (now))",70],["[puppetlabs.puppetdb.scf.storage :as scf-store]",70],["; to store the value in strobj.  If a key is assoc'ed when that same",71],["(scf-store/add-certname! \"foo2\")",72],["[uxbox.store :as st]",72],["(db/with-session [session (:hecuba-session store)]",126],["(scf-store/add-facts! {:certname \"foo1\"",75],["(scf-store/add-certname! \"foo1\")",88]],"useCount":4901},{"word":"storm","context":[["(:use [backtype.storm bootstrap testing])",51],[":kill (kill-transition nimbus storm-id)",48],["(:import [backtype.storm.utils Utils])",43],["assignment (.assignment-info state storm-id nil)]",40],["(:import [backtype.storm Config])",40],["(let [state (:storm-cluster-state cluster)",60],["(let [storm-cluster-state (:storm-cluster-state nimbus)",92],["(let [storm-cluster-state (:storm-cluster-state nimbus)",92],["(:use [backtype.storm.daemon common])",97],["storm-id",126]],"useCount":5439},{"word":"str","context":[["(apply str",589],["[clojure.string :as str]",391],["[clojure.string :as str]))",496],["(with-out-str",667],["(println (str \"You can view the site at http://localhost:\" port))))",374],["(:require [clojure.string :as str]))",395],["[clojure.string :as str]",2240],["(pr-str* coll))",1750],["(str",1300],["(:require [clojure.string :as str]",961]],"useCount":31866},{"word":"stream","context":[["(fn stream [event]",1124],["(test-stream (top 1 :metric)",80],["(dorun (map stream events))",80],["(test-stream (top 2 :metric)",80],[":check (nth-input-stream? 0)",74],["[stream]",73],["io/input-stream",65],["(is (= (map :metric (run-stream-intervals",138],["[manifold.stream :as s]",152],["(test-stream-intervals",252]],"useCount":10109},{"word":"streams","context":[["(streams",54],["[byte-streams :as bs]",119],["\"Add any number of streams to the default core.\"",27],["its child forms to return a *new*, distinct set of streams for that",28],["(ns riemann.streams",28],["\"riemann.streams\"",35],["(assoc default-streams-impl",50],["(defn streams",29],["incoming events to the core's streams, queries the core's index for states.\"",30],["streams.",33]],"useCount":2090},{"word":"string","context":[["(:require [clojure.string :as string]",687],["[clojure.string :as str]",2240],["[clojure.string :as string]",1630],["[clojure.string :as string]",1630],["(:require [clojure.string :as str]",961],[":db/valueType :db.type/string",872],["[clojure.string :as s]",757],["(:require [clojure.string :as string]",687],["[clojure.string :as string]",563],["[clojure.string :as string]",563]],"useCount":41684},{"word":"structure","context":[["final value, you must wrap it in some data structure and unpack it",71],["nested structure. keys is a sequence of keys. Any empty maps that result",62],["[job error-data context structure-type]",70],["\"Returns the value in a nested associative structure,",72],["\"Dissociates an entry from a nested associative structure returning a new",63],["\"'Updates' a value in a nested associative structure, where ks is a",72],["sequence of keys and v is the new value and returns a new nested structure.",72],["the resulting vector shares structure with the original and no",72],["nested structure.  If any levels do not exist, hash-maps will be",72],["\"Associates a value in a nested associative structure, where ks is a",72]],"useCount":1445},{"word":"stuartsierra","context":[["[com.stuartsierra.component :as component]))",265],["[com.stuartsierra/component \"0.3.1\"]",132],["[com.stuartsierra.component :as component])",74],["[com.stuartsierra.component :as component]",69],["[com.stuartsierra/component \"0.2.1\"]",58],["[com.stuartsierra.component :as c]",86],["[com.stuartsierra.component :as component]",1190],["(:require [com.stuartsierra.component :as component]",648],["[com.stuartsierra/component \"0.2.3\"]",98],["[com.stuartsierra/component \"0.2.2\"]",91]],"useCount":3055},{"word":"style","context":[[":attrs {:style \"color: red\"},",83],["{:style/indent 1}",83],[":style",175],[":attrs {:style \"text-align:center\"},",135],[":attrs {:style \"float:right; font-size:8pt; margin-top:15px\"},",82],["style)",79],[":attrs {:style \"color: green\"},",100],["[goog.style :as style]",66],[":attrs {:style \"color: blue\"},",329],["{:style",219]],"useCount":3695},{"word":"sub","context":[["(f/register-sub",25],["{:abilities [(break-sub 1 1 \"code gate\")",24],["(re-frame/register-sub",141],["register-sub",33],["(rf/register-sub",37],["(:require [re-frame.core :refer [register-sub]]))",41],["(add-sub sub",47],["(register-sub",500],["(reg-sub",294],["(add-sub sub",47]],"useCount":1691},{"word":"subidx","context":[["(if (and (nil? new-child) (zero? subidx))",143],["(pv-aset ret subidx node-to-insert)",142],["(zero? subidx) nil",142],["(let [child (pv-aget parent subidx)]",71],["(go (- level 5) (pv-aget node subidx)))",71],["(do (pv-aset node subidx new-child)",71],["(let [subidx (bit-and (bit-shift-right-zero-fill n level)",71],["(let [subidx (bit-and (bit-shift-right-zero-fill i level) 0x01f)]",71],["(let [subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt pv) 2) level) 0x01f)]",71],["tv (- level 5) (pv-aget node subidx))]",71]],"useCount":1847},{"word":"subject","context":[["subject :- schema/Str]",145],[";; furnished to do so, subject to the following conditions:",127],[":subject {:type \"Notify\" :title \"notify, yo\"}",110],[":subject {:type \"Notify\" :title \"notify, yar\"}",110],[":subject {:type \"Notify\" :title \"hi\"}",102],["\"Alpha - subject to change.",341],["err-subject",94],[";; EXPERIMENTAL: subject to change",410],[";; This Source Code Form is subject to the terms of the Mozilla Public",154],[";; This Source Code Form is subject to the terms of the Mozilla Public",183]],"useCount":5619},{"word":"success","context":[["{:status :success})",52],["(is (success? @_res_) (str _msg_ \"should succeed\"))",40],["Signature of the result value put on the channel is [success] where:",40],["(assert-success! response)",105],["(if success?",79],["(http-api/get-objective OBJECTIVE_ID) => {:status ::http-api/success",43],["\"Test if the HTTP request is a success, and if the result is equal",44],["[\"=\" \"status\" \"success\"]",45],["(http-api/find-user-by-auth-provider-user-id anything) => {:status ::http-api/success",50],[":status           \"success\"",58]],"useCount":2551},{"word":"sum","context":[["(sum-tasks summs)",33],["(let [sum (ref nil)",28],["sum",60],["s (commute sum + (:metric event))]",28],["([sum n]",28],["\"Returns the sum of nums. (+) returns 0.\"",209],["(recur (next s) (dec i) (inc sum))",65],["(defn sum",115],["(loop [s s i n sum 0]",65],["sum))))",66]],"useCount":1953},{"word":"summary","context":[["(let [{:keys [options arguments errors summary]}",39],["options-summary]",64],["(println summary)",43],["[options-summary]",46],["(not= (count arguments) 1) (exit 1 (usage summary))",38],["[summary]",35],["options-summary",169],["(defn usage [options-summary]",165],["(:help options) (exit 0 (usage summary))",145],["(let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]",141]],"useCount":2173},{"word":"supplied","context":[["\"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"",73],["start (inclusive) to end (exclusive).  If end is not supplied,",72],["\"Restrict the query parameter of the supplied request so that it",87],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["and any supplied args and return the new value, and returns a new",117],["\"If no denominators are supplied, returns 1/numerator,",140],["supplied defaults to, and modifies, the global hierarchy.\"",142],["is returned and f is not called.  If val is supplied, returns the",72],["\"f should be a function of 2 arguments. If val is not supplied,",72],["from make-hierarchy, if not supplied defaults to the global",142]],"useCount":3381},{"word":"swap","context":[["(swap! behavior conj result))",79],["(swap! app-state",85],["(swap! mem assoc args ret)",71],["(defn swap!",78],["(swap! counter inc)",87],["(partial swap! res conj))",112],["(swap! population-behaviors conj @behavior))",116],["(swap!",136],["(swap! a inc)",74],["(swap! method-table assoc dispatch-val method)",71]],"useCount":5655},{"word":"sweet","context":[["[compojure.api.sweet :refer :all]",88],["(:use [midje.sweet])",74],["(:use [midje.sweet]",67],["[midje.sweet :refer :all])",94],["(:use midje.sweet))",215],["(:use midje.sweet",277],["[midje.sweet :refer :all]))",307],["[midje.sweet :refer :all]",460],["(:use midje.sweet)",669],["(:require [midje.sweet :refer :all]",1083]],"useCount":3810},{"word":"sym","context":[["[sym]",69],["(defn- hash-symbol [sym]",68],["(hash-string (.-ns sym))))",51],["[sym]",197],["(-hash [sym]",70],["(-invoke [sym coll]",70],["(Symbol. ns name sym-str nil nil))))",68],["(caching-hash sym hash-symbol _hash))",68],["(let [sym-str (if-not (nil? ns)",69],["(-invoke [sym coll not-found]",70]],"useCount":2824},{"word":"symbol","context":[["(if (symbol? name)",90],["(symbol? x) (str x)",72],["\"Returns a new symbol with a unique name. If a prefix string is",71],["child can be either a namespace-qualified symbol or keyword or a",71],["; order. Any string, keyword, or symbol key is used as a property name",71],["tag. Parent must be a namespace-qualified symbol or keyword and",71],["(defn symbol",71],["\"Returns the name String of a string, symbol or keyword.\"",71],[";; the server is forced to re-resolve the symbol in the var",374],["\"Returns the namespace String of a symbol or keyword, or nil if not present.\"",71]],"useCount":3718},{"word":"system","context":[["(def system nil)",206],["#'system.\"",81],["(-> (component/system-map",81],["(-> (session (help/app-from-system))",83],["system)",86],["(alter-var-root #'system component/start))",111],["(-> system",114],["[system]",180],["(component/system-map",292],["(alter-var-root #'system",330]],"useCount":4816},{"word":"t","context":[["[clj-time.core :as t]",769],["\"I don't do a whole lot.\"",984],["[t]",311],["\"\\t\\t\\t\\t\\t\"",249],["\"\\t\\t\\t\\t\\t\"",249],["\"I don't do a whole lot ... yet.\"",1040],["(catch Throwable t",1019],["\"\\t\\t\\t\\t\\t\"",249],["\"\\t\\t\\t\\t\\t\"",249],["\"\\t\\t\\t\\t\\t\"",249]],"useCount":19412},{"word":"table","context":[["(sorted-table",169],["(sql/create-table-ddl",162],["table",163],["[:table",257],["(reset-cache method-cache method-table cached-hierarchy hierarchy)",213],["(declare api-table)",255],["(gen-tap-all-events-call api-table (meta &form) chan))",255],["(apply gen-wrap-helper api-table kind item-id config args))",255],["(def api-table",255],["(def gen-call (partial gen-call-helper api-table))",255]],"useCount":9410},{"word":"tag","context":[["({:tag :b,",237],["({:tag :div,",178],["{:tag :img,",348],["({:tag :font,",361],["{:tag :a,",419],["{:tag :b,",430],["{:tag :div,",489],["{:tag :br, :attrs nil, :content nil})}",789],["({:tag :br, :attrs nil, :content nil}",5208],["{:tag :br, :attrs nil, :content nil}",23688]],"useCount":42104},{"word":"tagged","context":[["[cljs.tagged-literals :as tags]",27],["(tagged \\\"graph\\\"",25],["(tagged-instruction-erc 1000)",116],["(tagged-all [\\\"foo\\\" \\\"bar\\\"] prn)\"",56],["{:req (req tagged)",37],["(defn tagged-any",28],["(defn tagged-all",28],["(tagged-all \\\"foo\\\" prn)",28],["tag vector), tagged (which checks to see if the given tag is present at all),",28],["(tagged-any \\\"foo\\\" prn)",28]],"useCount":1490},{"word":"tags","context":[[":tags       #{\"file\" \"class\" \"foobar\"}}",60],["{:tags [\"blah\"]}",88],["{:tags [\"foo\"]}",88],["[tags & children]",81],["[{:tags [\"kitten\" \"cat\"]}",68],["[{:tags [\"meow\" \"bark\"]}",64],[":tags [ \"info\" ],",56],[":tags       []",89],[":triggers #{:object.instant :lt.object/tags-removed}",49],["{:tags []}",124]],"useCount":4683},{"word":"tail","context":[["(set! tail  new-tail)",72],["(set! tail new-tail)",145],["(set! tail new-tail)",145],["(let [new-tail (aclone tail)]",81],["(let [new-tail (aclone tail)]",81],["(set! tail  new-tail)",72],["(if (< (- cnt (tail-off tcoll)) 32)",71],["(push-tail coll shift root (VectorNode. nil tail)))]",71],["(aset new-tail 0 o)",72],["new-tail  (make-array 32)]",72]],"useCount":5238},{"word":"take","context":[["(take n)",93],["(take-credits state :corp)",1179],["(defn take",81],["(take-while identity)",74],["(take-credits state :runner)",476],[";; that script will have to take a file path and a line number",183],["[onyx.plugin.core-async :refer [take-segments!]]",169],["(let [p (take n s)]",144],["([n x] (take n (repeat x))))",73],["(defn take-nth",72]],"useCount":6114},{"word":"taoensso","context":[["(:require [taoensso.timbre :as timbre]",118],["[taoensso.timbre :as timbre]",635],["[taoensso.timbre :as log]",288],["[taoensso.timbre :as timbre]))",212],["[taoensso.timbre :as log]))",161],["[taoensso.timbre :as timbre])",155],["[taoensso.timbre :as log])",94],["[com.taoensso/timbre \"3.3.1\"]",87],["[com.taoensso/tower \"3.0.2\"]",85],["[taoensso.sente :as sente]",83]],"useCount":3635},{"word":"target","context":[[":target :nodejs",232],["(with-target-and-proxy-servers",160],["{:target (. js/document (getElementById \"app\"))}))",167],[":javac-options [\"-target\" \"1.6\" \"-source\" \"1.6\" \"-Xlint:-options\"]",187],[":target-path \"target/%s\"",3108],[":target-path \"target/%s\"",3108],["target-fn (-get-method mf dispatch-val)]",1175],["(when-not target-fn",1175],[":clean-targets ^{:protect false} [:target-path",206],["{:target \"_blank\",",228]],"useCount":19674},{"word":"task","context":[[":task-scheduler :onyx.task-scheduler/balanced}]",101],["{:lifecycle/task :out",230],["{:lifecycle/task :read-segments",103],[":task-scheduler :onyx.task-scheduler/balanced}]",101],["{:lifecycle/before-task-start inject-in-ch})",105],["{:lifecycle/task :in",107],["{:lifecycle/before-task-start inject-out-ch})",117],["{:lifecycle/task :write-segments",154],[":task-scheduler :onyx.task-scheduler/balanced})",189],[":task-scheduler :onyx.task-scheduler/balanced})",189]],"useCount":5086},{"word":"tcoll","context":[["(loop [es (seq o) tcoll tcoll]",144],["tcoll)",788],["tcoll)))",217],["tcoll))))",215],["(-conj! [tcoll o]",213],["(-persistent! [tcoll]",213],["tcoll",146],["(loop [es (seq o) tcoll tcoll]",144],["tcoll))",145],["(let [idx (array-map-index-of tcoll key)]",145]],"useCount":7594},{"word":"td","context":[[":descendants (tf (:descendants h) parent ta tag td)})",71],[":ancestors (tf (:ancestors h) tag td parent ta)",71],["(dom/td nil nil)",68],["(dom/td nil",56],["(td/transact *conn*",30],["\"      </td>\"",30],["td (:descendants h)",71],["[:td.body-885f4",146],["[:td",176],["[:td",380]],"useCount":1481},{"word":"template","context":[["(parser/render-file (str template-path template))",44],["\"renders the HTML template located relative to resources/templates\"",49],["[template]",51],["[template & [params]]",54],["(deftype RenderableTemplate [template params]",58],["(RenderableTemplate. template params))",62],["template",94],["(defn render [template & [params]]",93],[":page template",80],["err-notification-mustache-template",77]],"useCount":1810},{"word":"test","context":[["(:require [clojure.test :refer :all]",14383],[":injections [(require 'pjstadig.humane-test-output)",455],["[clojure.test.check.properties :as prop]",470],["[clojure.test.check.generators :as gen]",490],["(:use clojure.test)",494],["(:use clojure.test))",529],["[clojure.test :refer :all]))",821],["(:use clojure.test",1207],["[clojure.test :refer :all]",1908],["(deftest a-test",5652]],"useCount":72169},{"word":"testing","context":[["(testing \"not-found route\"",392],["(testing \"FIXME, I fail.\"",5498],["(testing",809],["[clojure.test :refer [deftest is testing]]",97],[";; should be used as training and testing cases respectively. Each \"set\" of",113],["(clear-db-for-testing!)",162],["(:require-macros [cljs.test :refer (is deftest testing)])",165],["(testing order",187],["(testing \"\"",257],["(testing \"main route\"",360]],"useCount":19396},{"word":"tests","context":[["(populate-for-structured-tests reference-time)",39],["(run-tests)",459],["(h/generate-tests issue/test-data issue/solution))",190],["(run-tests",131],["[cljs.test :refer-macros [run-tests]]",115],["; Common functions used by tests.",55],["[doo.runner :refer-macros [doo-tests]]",69],["vectors and arrays, this tests if the numeric key is within the",72],["(:require [doo.runner :refer-macros [doo-tests]]",92],["(is false \"No tests have been written.\"))",102]],"useCount":2832},{"word":"testutils","context":[["[puppetlabs.trapperkeeper.testutils.logging :as logutils]",86],["(let [settings (testutils/ca-sandbox! cadir)",80],["[puppetlabs.puppetdb.testutils :as tu]",73],["[puppetlabs.puppetserver.bootstrap-testutils :as bootstrap]",65],["(-> (jruby-testutils/jruby-puppet-tk-config",48],["[puppetlabs.puppetdb.testutils.services :as svc-utils]",48],["[puppetlabs.trapperkeeper.testutils.bootstrap :as tk-testutils]",47],["[puppetlabs.services.jruby.jruby-testutils :as jruby-testutils]",98],["[puppetlabs.services.jruby.jruby-testutils :as jruby-testutils]",98],["(tk-testutils/with-app-with-config",116]],"useCount":2724},{"word":"text","context":[[":headers {\"Content-Type\" \"text/html\"}",455],["(prepend (html [:script {:type \"text/javascript\" :src \"/js/out/goog/base.js\"}]))",235],["\"text-decoration:none;font-family:monospace;color:#808080\"},",174],[":headers {\"Content-Type\" \"text/html; charset=utf-8\"}",154],["[text]",382],[":headers {\"Content-Type\" \"text/plain\"}",281],["(prepend (html [:script {:type \"text/javascript\" :src \"/react/react.js\"}]))",162],[":type \"text\"",167],[":available-media-types [\"text/html\"]",170],["[:input {:type \"text\"",207]],"useCount":11280},{"word":"than","context":[["\"Returns true if num is less than zero, else false\"",71],["the first.  If a key occurs in more than one map, the mapping(s)",74],["Please use the idiom (seq x) rather than (not (empty? x))\"",74],["effects, any effects other than those needed to produce the first",144],[";; rather than having its own copy. When the root binding",374],["object(s), separated by spaces if there is more than one.",71],["x.toString().  (str nil) returns the empty string. With more than",72],["the first.  If a key occurs in more than one map, the mapping from",72],["not enough padding elements, return a partition with less than n items.\"",72],["more efficient than, last. If the collection is empty, returns nil.\"",72]],"useCount":2838},{"word":"that","context":[[";; inputs is either a list or a function that, when called, will create a",113],[";;We make no guarantees that this code is fit for any purpose.",90],["\"Restrict the query parameter of the supplied request so that it",87],["that does not contain a mapping for key(s).\"",73],["the value that was swapped in.\"",73],["\"When lazy sequences are produced via functions that have side",144],["(comment  Write code here that turns the phrase above into concrete actions  )",145],[";; #'app expands to (var app) so that when we reload our code,",373],[";; that script will have to take a file path and a line number",183],["\"Returns a map that consists of the rest of the maps conj-ed onto",146]],"useCount":11609},{"word":"the","context":[["Signature of the result value put on the channel is [].",390],[";; the server is forced to re-resolve the symbol in the var",374],[";; the server is forced to re-resolve the symbol in the var",374],[";; the server is forced to re-resolve the symbol in the var",374],[";; rather than having its own copy. When the root binding",374],["{:user \"Half the Sky\",",839],["Signature of the result value put on the channel is [].",390],[";; changes, the server picks it up without having to restart.",374],["(println (str \"You can view the site at http://localhost:\" port))))",374],["\"used for starting the server in development mode from REPL\"",378]],"useCount":78604},{"word":"then","context":[[";; (for example when using mock requests), then",69],["substring, then any capturing groups if the regular expression contains",71],["then applying xf to that result and the 2nd item, etc. If coll",49],["continues to repeat, until the return value is not a fn, then",71],["result of applying f to val and the first item in coll, then",72],["and the first value in coll, then applying f to that result and the",72],["occur, then the value of the atom will not change.\"",72],["\"Returns a lazy seq of the first item in each coll, then the second etc.\"",72],["returns the result of applying f to the first 2 items in coll, then",104],[";; and port. If you prefer a separate server process then take this",50]],"useCount":1740},{"word":"this","context":[["(-equiv this other))",1498],["(this-as this",541],["(render [this]",1058],["[this]",1056],["(start [this]",807],[":reaction (fn [this]",1215],["(equiv [this other]",1498],["this)",642],["(this-as this",541],["(stop [this]",764]],"useCount":46008},{"word":"thread","context":[["; retrying our thread-creating transaction more than once. Double",27],["(.start thread))",33],["^{:doc \"bound in a repl thread to the most recent exception caught by the repl\"}",37],["(.start thread)",37],["(thread",173],[":refer [>! <! >!! <!! go chan buffer close! thread",39],["^{:doc \"bound in a repl thread to the third most recent value printed\"}",71],["^{:doc \"bound in a repl thread to the second most recent value printed\"}",71],["^{:doc \"bound in a repl thread to the most recent value printed\"}",71],["(async/thread",148]],"useCount":1520},{"word":"throw","context":[[":else (throw (IllegalArgumentException.",197],["(throw (js/Error. \"persistent! called twice\"))))",216],["(throw-no-method-error name dispatch-val))",1157],["(throw (js/Error. \"count after persistent!\"))))",216],["(throw (IllegalArgumentException.",1270],["(throw (js/Error. \"assoc! after persistent!\"))))",218],["(throw e)))))",225],["(throw (IllegalStateException.",242],["(throw e))))",249],["(throw",614]],"useCount":13849},{"word":"thrown","context":[["(is (thrown-with-msg?",790],["(is (thrown? IllegalArgumentException",489],["(thrown?",449],["(is (thrown+-with-msg?",179],["(is (thrown? Exception",172],["(is (thrown?",137],["(is (thrown-with-msg? IllegalArgumentException",111],["(is (thrown? IllegalStateException",99],["(is (thrown-with-slingshot?",99],["(is (thrown? Exception (db/add-jar \"test-user\"",96]],"useCount":4731},{"word":"timbre","context":[["(timbre/set-config!",176],["[taoensso.timbre :as timbre]))",212],["[taoensso.timbre :as timbre]))",212],["(timbre/refer-timbre)",280],["(timbre/refer-timbre)",280],["[taoensso.timbre :as log]",288],["[taoensso.timbre :as log]))",161],["[taoensso.timbre :as timbre])",155],["[taoensso.timbre :as timbre]",635],["[taoensso.timbre :as timbre]",635]],"useCount":5435},{"word":"time","context":[["[clj-time \"0.11.0\"]",251],["[clj-time.core :as t]",769],["[clj-time.coerce :as c]",240],["[clj-time.format :as f]",257],["(time",477],["[clj-time.core :as time]",564],["[clj-time.core :as time]",564],["[clj-time \"0.9.0\"]",210],["[clj-time \"0.8.0\"]",178],["[clj-time \"0.6.0\"]",172]],"useCount":26585},{"word":"timeout","context":[["timeout",63],["(-deref-with-timeout [o msec timeout-val]))",71],["(@server :timeout 100)",87],["([batch-size batch-timeout]",106],[":onyx/batch-timeout batch-timeout",455],[":onyx/batch-timeout batch-timeout",455],[":conn-timeout 5000",51],["(<! (timeout 1000))",56],["(-deref-with-timeout [o msec timeout-val]))",71],["(<! (timeout 100))",67]],"useCount":4005},{"word":"times","context":[[":times-solved 0",263],["(times 50)",105],["multiple times, and thus should be free of side effects.  Returns",73],["(is (= 0 (times-called publish)))",449],["\"Returns a map from distinct items in coll to the number of times",71],["Events without times accrue in the current window.\"",68],["event times. Example:",50],["(let [times (stats-times (:emitted stats))",39],["(let [times (stats-times (:emitted stats))",39],["[com.gfredericks.test.chuck :refer [times]]",39]],"useCount":2227},{"word":"timestamp","context":[[":source-map-timestamp true}}",172],["[puppetlabs.puppetdb.time :refer [to-timestamp]]",66],[":source-map-timestamp true }}",84],["received-timestamp :- pls/Timestamp]",97],["DELETED timestamp",179],[":source-map-timestamp true",297],[":timestamp (now)",344],["EFFECTIVE_END_DATE timestamp NOT NULL,",352],["EFFECTIVE_START_DATE timestamp NOT NULL,",392],["DELETED timestamp,",1449]],"useCount":7992},{"word":"title","context":[[":title \"\",",136],["[:title title]",141],[":title title",115],["[:title title]",141],[":title title",115],[":subject {:type \"Notify\" :title \"notify, yar\"}",110],[":subject {:type \"Notify\" :title \"notify, yo\"}",110],[":subject {:type \"Notify\" :title \"hi\"}",102],["{:title \"\",",102],["title",93]],"useCount":7248},{"word":"tmp","context":[[":file       \"/tmp/bar/baz\"",48],["(let [tgt (core/tmp-dir!)]",45],[":file       \"/tmp/foo\"",38],[":file       \"/tmp/bar\"",58],["(let [tmp-confdir (fs/copy-dir confdir (ks/temp-dir))",62],[";; :server-logfile \"tmp/logs/figwheel-logfile.log\"",132],["{:type \"File\" :title \"/tmp/bar\"}",36],["(is (= \"<div id=\\\"tmp\\\">test</div>\"",32],["(is (= \"<div id=\\\"tmp\\\">success</div>\"",28],[":target {:title \"/tmp/foo\", :type \"File\"},",27]],"useCount":1729},{"word":"to","context":[[";; EXPERIMENTAL: subject to change",410],[":compiler {:output-to     \"resources/public/js/app.js\"",474],["(apply-to f bc arglist)",284],["\"Alpha - subject to change.",341],["[:cljsbuild :builds :app :compiler :output-to]]",245],[";; changes, the server picks it up without having to restart.",374],[";; the server is forced to re-resolve the symbol in the var",374],[";; #'app expands to (var app) so that when we reload our code,",373],[";; you will need to put a script on your path.",183],["(.apply f f (to-array arglist)))))",214]],"useCount":52392},{"word":"toString","context":[["(.toString sb)))",65],["(toString [this]",155],["(toString [coll]",1752],["(toString [_] (str \":\" fqn))",67],["(toString [this]",90],["(toString [_]",75],["x.toString().  (str nil) returns the empty string. With more than",72],["(.toString sb)))))",71],["\"Support so that collections can implement toString without",69],["(toString [_] str)",69]],"useCount":3353},{"word":"token","context":[["plaintext-auth-token",92],["[ring.middleware.anti-forgery :refer [*anti-forgery-token*]]",71],["auth-token)))",100],["[token]",174],["(secretary/dispatch! (.-token event))))",258],[":csrf-token *anti-forgery-token*",79],[":title \"Invalid anti-forgery token\"})}))",47],["token",51],["fphdr-auth-token",62],[":csrf-token *anti-forgery-token*",79]],"useCount":2900},{"word":"tools","context":[["[org.clojure/tools.logging \"0.3.1\"]",752],["(:require [clojure.tools.logging :as log]",907],["[clojure.tools.logging :as log]",2424],["[om-tools.core :refer-macros [defcomponent]]",254],["[org.clojure/tools.nrepl \"0.2.12\"]",264],["[org.clojure/tools.logging \"0.2.6\"]",273],["[clojure.tools.logging :as log])",276],["[org.clojure/tools.cli \"0.3.1\"]",336],["[clojure.tools.logging :as logging]",386],["[clojure.tools.logging :as log]))",419]],"useCount":13475},{"word":"top","context":[[":attrs {:style \"float:right; font-size:8pt; margin-top:15px\"},",82],["(test-stream (top 2 :metric)",80],["(test-stream (top 1 :metric)",80],[":top 0",43],[":features [:keep-on-top]",96],[":top 0",43],["(defn top",33],["(superclass :top)",34],[";; not be picked up, instead configure figwheel here on the top level.",49],["[smallest top]",50]],"useCount":2925},{"word":"topology","context":[["(submit-local-topology (:nimbus cluster)",51],["(resp/redirect (str \"/topology/\" id)))",44],["(topology",51],["topology)",76],["(bind topology (thrift/mk-topology",65],["(bind topology (thrift/mk-topology",65],["topology",96],["topology (thrift/mk-topology",57],["topology (thrift/mk-topology",57],["results (complete-topology cluster",50]],"useCount":3442},{"word":"total","context":[["(dotimes [i (/ total threads)]",48],["(satisfied count + (tolerating count / 2) / total count of received events",48],[";; with total-error > 0 if it had error of zero on train but not on validation",113],["(println \"Test total error for best:\" best-total-test-error)",113],["best-total-test-error (apply +' best-test-errors)]",113],["(println \"Test total error for best:\" best-total-test-error)",113],["(println (format \"Test mean error for best: %.5f\" (double (/ best-total-test-error (count best-test-errors)))))",113],["(when (zero? (:total-error best))",97],[":total 3",46],["total",46]],"useCount":1911},{"word":"tr","context":[["\"<tr>\"",36],["[:tr.even-ff837",32],["[:tr.make",40],["[uxbox.util.i18n :refer (tr)]",26],["\"</tr>\"",40],["[:tr.odd-372e6",41],["[:tr",962],["(dom/tr",44],["(dom/tr nil",139],["[:tr",780]],"useCount":2436},{"word":"transient","context":[["(transient {}) coll)))",121],["(transient {})",104],["(transient [])",75],["(if (identical? (-lookup transient-map v lookup-sentinel) lookup-sentinel)",71],["(-as-transient [coll]",286],["(set! transient-map (dissoc! transient-map v))",71],["(-count [tcoll] (count transient-map))",71],["(set! transient-map (dissoc! transient-map v))",71],["(if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)",142],["(declare array->transient-hash-map)",71]],"useCount":4007},{"word":"trapperkeeper","context":[["[puppetlabs.trapperkeeper.core :as tk]",104],["[puppetlabs.trapperkeeper.core :refer [defservice]]",62],["[puppetlabs.trapperkeeper.services :as tk-services]",70],["[puppetlabs.trapperkeeper.app :refer [get-service]]",81],["[puppetlabs.trapperkeeper.app :as tk-app]",102],["[puppetlabs.trapperkeeper.testutils.logging :as logutils]",86],["[puppetlabs.trapperkeeper.services.webserver.jetty9-service :refer [jetty9-service]]",57],["[puppetlabs/trapperkeeper ~tk-version]",55],["[puppetlabs.trapperkeeper.testutils.bootstrap :as tk-testutils]",47],["[puppetlabs.trapperkeeper.testutils.bootstrap :refer [with-app-with-config]]",42]],"useCount":1752},{"word":"tree","context":[["tree))",75],["[tree]",264],["(create-tree-map-seq tree false cnt)))",71],["(throw (js/Error. \"red-black tree invariant violation\"))))",142],["(let [c (comp k (.-key tree))]",142],["(let [app (tree-map-append (.-right left) (.-left right))]",142],["(tree-map-kv-reduce node f init))",142],["(if-not (nil? tree)",142],["(do (aset found 0 tree)",142],["next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))",71]],"useCount":8951},{"word":"triggers","context":[["argument that triggers a logical true result against the original predicates.\"",71],[":triggers #{:focus!}",53],[":triggers #{:clear!}",50],[":triggers #{:show}",62],[":triggers #{:close}",93],[":triggers #{:object.instant :lt.object/tags-removed}",49],[":triggers #{:connect}",43],[":triggers #{:object.instant}",208],[":triggers #{:init}",126],["argument that triggers a logical false result against the original predicates.\"",71]],"useCount":2133},{"word":"true","context":[[":static true}",915],[":callback? true,",1146],["(:require [om.core :as om :include-macros true]",1040],[":queryable? true",1008],["true))",959],["(set! *warn-on-reflection* true)",942],["true)",1427],["true",2700],["[om.core :as om :include-macros true]",821],[":omit-source true",716]],"useCount":65254},{"word":"try","context":[["(try ~@body",73],["[slingshot.slingshot :refer [try+]]",78],["(try+",544],["[slingshot.slingshot :refer [try+ throw+]]",83],["(try-cause",114],["\"Remove the target/ directory and try again.\"))))",123],["(try-account",145],["`(try",433],["(try",14381],["(try",1003]],"useCount":18804},{"word":"tv","context":[["(let [root (.-root tv)]",71],["level (.-shift tv)]",71],["(let [node (tv-ensure-editable (.-edit root) node)]",71],["subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt tv) 2) level) 0x01f)]",71],["(> level 5) (let [new-child (tv-pop-tail",71],["tv (- level 5) (pv-aget node subidx))]",71],["(.-tail tv)",71],["(let [new-root (tv-push-tail tcoll shift root tail-node)]",71],["new-root (let [nr (tv-pop-tail tcoll shift root)]",71],["(if (>= i (tail-off tv))",71]],"useCount":2359},{"word":"type","context":[[":onyx/type :function",577],[":onyx/type :output",525],[":onyx/type :input",513],[":db/valueType :db.type/instant",665],[":var-type :fn,",751],[":db/valueType :db.type/ref",752],[":db/valueType :db.type/string",872],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419],[":type :user",373],["(case type",381]],"useCount":38890},{"word":"types","context":[["^{:stack-types [:genome :integer]}",44],[":available-media-types [\"application/json\"]",368],[":available-media-types [\"text/html\"]",170],["\"Returns the length of the array. Works on arrays of all types.\"",72],[";;;;;;;;;;;;;;;;;;;;;;;;;;;;;; protocols for host types ;;;;;;",71],[";; Let Clojure warn you when it needs to reflect on types, or when it does math",45],["(:import [org.bson.types ObjectId]))",55],["(:import org.bson.types.ObjectId))",46],["(throw (js/Error. \"compare on non-nil objects of different types\"))))",48],[":available-media-types [\"text/plain\"]",53]],"useCount":2758},{"word":"u","context":[["(let [[results] (u/collect-outputs! lifecycles [:write-segments])]",72],["(u/set-auto-name",110],["[metabase.util :as u]))",277],["[workshop.workshop-utils :as u]",81],["(u/bind-inputs! lifecycles {:read-segments input})",101],["{:core.async/chan (u/get-output-channel (:core.async/id lifecycle))})",90],["[metabase.util :as u]",93],["{:core.async/chan (u/get-input-channel (:core.async/id lifecycle))})",97],["(u/side-effect!",100],["[metabase.util :as u])",101]],"useCount":3077},{"word":"uberjar","context":[[":uberjar {:aot :all}",86],[":uberjar {:aot :all}})",96],[":uberjar {:source-paths [\"env/prod/clj\"]",128],[":uberjar {:hooks [leiningen.cljsbuild minify-assets.plugin/hooks]",210],[":profiles {:uberjar {:aot :all}}",327],[":uberjar {:hooks [minify-assets.plugin/hooks]",96],[":uberjar {:hooks [leiningen.cljsbuild]",120],["\"You likely have compiled class files lying around from an uberjar build. \"",123],[":profiles {:uberjar {:aot :all}})",2540],[":profiles {:uberjar {:aot :all}",364]],"useCount":4805},{"word":"ui","context":[["(on-ui",113],["[org.broadinstitute.firecloud-ui.common.style :as style]",40],["[salava.core.ui.layout :as layout]",41],["[salava.core.ui.ajax-utils :as ajax]",45],["[org.broadinstitute.firecloud-ui.utils :as utils]",45],["[uxbox.main.ui.icons :as i]",48],["(:import [goog.ui IdGenerator]))",62],["(sync-ui! [this]",68],["(:require [cadejo.ui.util.lnf :as lnf])",77],["[:div.ui.vertical.segment",78]],"useCount":1917},{"word":"ul","context":[["[:ul.nav.navbar-nav.navbar-right",28],["(within [:article :div.error :ul :li]",63],["[:ul.nav.navbar-nav",55],["(dom/ul nil",50],["(within [:ul#versions]",36],["[:ul.nav.navbar-nav",30],["(within [:div.error :ul :li]",73],["(apply dom/ul nil",99],["[:ul",478],["[:ul",508]],"useCount":1855},{"word":"unchecked","context":[["(defn unchecked-int",69],["(cljs.core/unchecked-inc-int x))",69],["([x y & more] (reduce unchecked-multiply (cljs.core/unchecked-multiply x y) more)))",69],["(set! *unchecked-if* true)",141],["(set! *unchecked-math* :warn-on-boxed)",87],["(set! *unchecked-if* false)",141],["(set! *unchecked-math* true)",134],["(let [arr  (unchecked-array-for v i)",92],["(def *unchecked-if* false)",71],["(defn unchecked-negate [x]",69]],"useCount":4686},{"word":"unique","context":[["\"Returns a new symbol with a unique name. If a prefix string is",71],[":db/unique :db.unique/identity",318],[":db/unique :db.unique/identity",318],[":db/unique :db.unique/value",213],[":db/unique :db.unique/value",213],["rather than derefing the reference. Keys must be unique per",71],["supplied, the name is prefix# where # is some unique number. If",71],["\"Adds a watcher function f to this. Keys must be unique per reference,",32],["(by metric prn): you'd get a separate prn for *every* unique metric that",28],["- :id      - unique ID of request",24]],"useCount":1505},{"word":"unit","context":[[":test-commands {\"unit\" [\"phantomjs\" :runner",64],[":unit \"metre\"}}))",34],["\"phantom/unit-test.js\"",25],["[unit]",36],[":cljsbuild {:test-commands { \"test\" [\"phantomjs\" \"env/test/js/unit-test.js\" \"env/test/unit-test.html\"] }",103],["{:dim :unit-of-duration",140],["{:dim :unit",105],["(case unit",60],["(measurement:unit \"t/ha\")",69],[":cljsbuild {:test-commands { \"test\" [\"phantomjs\" \"env/test/js/unit-test.js\" \"env/test/unit-test.html\"] }",103]],"useCount":1438},{"word":"up","context":[[";; changes, the server picks it up without having to restart.",374],["[kehaar.wire-up :as wire-up]",54],["(defn up []",51],[";; not be picked up, instead configure figwheel here on the top level.",49],["(<! (heads-up/clear))",44],[";; To be able to open files in your editor from the heads up display",183],["#(clean-up-broken-connections",128],["shuts down, put any clean up code here\"",121],["(wire-up/incoming-service",57],["[kehaar.wire-up :as wire-up]",54]],"useCount":3252},{"word":"update","context":[[":update update-state",115],[":update update",98],[":update update",98],["(defn update",178],["(did-update [_ _ _]",133],["(update [_ state]",124],[":css-dirs [\"resources/public/css\"] ;; watch and update CSS",124],[":update update-state",115],["(update-in",123],["(:refer-clojure :exclude [update])",119]],"useCount":7839},{"word":"uri","context":[["uri",75],["entity-uri-prefix",298],["[uri]",229],["(d/create-database uri)",179],["config/fp-entity-uri-prefix",93],["(get-db uri)",82],["{:uri \"/v1/certificate_status/test-agent\"",55],["(let [conn (d/connect uri)]",63],["(d/delete-database uri)",72],["(def conn (d/connect uri))",73]],"useCount":4112},{"word":"url","context":[["[url]",718],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],["[com.cemerick/url \"0.1.1\"]",112],[":url \"http://www.eclipse.org/legal/epl-v10.html\"",128],[":url \"\"",176],["url",213],["base-url",282],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],[":websocket-url \"ws://localhost:3449/figwheel-ws\"",686],[":url \"http://example.com/FIXME\"",8641]],"useCount":31294},{"word":"use","context":[["(:use",1019],["(:use clojure.test",1207],["(:use midje.sweet)",669],["(:use clojure.test))",529],["(:use clojure.test)",494],["(:use compojure.core)",359],["(:use [clojure.test]))",337],["(:use midje.sweet",277],["(:use [clojure.test]",254],["(:use [clojure.test])",229]],"useCount":18588},{"word":"used","context":[["constant time. The transient collection cannot be used after this",56],["reference, and can be used to remove the watch with remove-watch,",71],["; order. Any string, keyword, or symbol key is used as a property name",71],["; simple reduce based on seqs, used as default",71],[";; should be used as training and testing cases respectively. Each \"set\" of",113],["be used to force any effects. Walks through the successive nexts of",144],["\"used for starting the server in development mode from REPL\"",378],["\"trampoline can be used to convert algorithms requiring mutual",71],["Can be used as a predicate in a where form.",46],["; Common functions used by tests.",55]],"useCount":2659},{"word":"user","context":[["{:user \"Wile E. Coyote\",",882],["{:user \"KelsierSC\",",616],["{:user \"marvellosity\",",744],["{:user \"Half the Sky\",",839],["{:user \"Holyflare\",",1054],["{:user \"sicklucker\",",923],["{:user \"Vivax\",",620],["(ns user",711],["{:user \"Damdred\",",730],["{:user \"Trfel\",",579]],"useCount":26366},{"word":"username","context":[[":username username",97],[":username username",97],[":username \"dantheman\"",123],["[username]",148],["username",74],[":username :env/clojars_jenkins_username",47],[":username :env",47],["{:username username",51],["{:username username",51],["[username password]",53]],"useCount":2112},{"word":"users","context":[["users-route",34],["(defentity users)",33],["(-> (table :users)",144],["usermeta/pathcomp-users",133],["[metabase.test.data.users :refer :all]",104],[":users",75],["(from :users)",55],[":table_id        (id :users)",39],["(update users",37],["(defentity users",35]],"useCount":1723},{"word":"using","context":[["(component/using",144],["(component/system-using",60],[";; (for example when using mock requests), then",69],["\"Prints the object(s) using string-print.  Prints the",71],["\"Returns the first regex match, if any, of s to re, using",71],["\"Returns a new sorted set with supplied keys, using the supplied comparator.\"",71],["Returns a new sorted map with supplied mappings, using the supplied comparator.\"",71],["\"Prints the object(s) using string-print.",71],["\"Prints a sequence of objects using string-print, observing all",71],[";; depend on this test jar using a :classifier in their :dependencies to reuse the test utility",43]],"useCount":1745},{"word":"util","context":[["(let [id (java.util.UUID/randomUUID)",120],["[ring.util.response :as response]",289],["[metabase.util :as u]))",277],["[ring.util.response :as resp]",244],[":core.async/id (java.util.UUID/randomUUID)",231],["[lt.util.dom :as dom]",149],["[ring.util.response :refer [redirect]]",144],["[ring.util.codec :as codec]",131],["[ring.util.response :refer [response]]",124],["[jiksnu.util :as util]",114]],"useCount":13380},{"word":"utils","context":[["[objective8.utils :as utils]",107],["[puppetlabs.puppetdb.utils :as utils]",278],["[puppetlabs.puppetdb.scf.storage-utils :as sutils]",184],["[reagent-utils \"0.1.5\"]",162],["[frontend.utils :as utils :include-macros true]",168],["[frontend.utils :as utils :include-macros true]",168],["(:require [phzr.impl.utils.core :refer [clj->phaser phaser->clj]]",183],["[objective8.utils :as utils]",107],["[cider-ci.utils.rdbms :as rdbms]",99],["[puppetlabs.puppetdb.utils :as utils]",278]],"useCount":9347},{"word":"uuid","context":[["(and (instance? UUID other) (identical? uuid (.-uuid other))))",71],["uuid",59],["(defn uuid",59],["(and (instance? UUID other) (identical? uuid (.-uuid other))))",71],["(let [uuid frontend.async/*uuid*",60],["(let [uuid frontend.async/*uuid*",60],["(defn uuid [] (str (java.util.UUID/randomUUID)))",61],["[uuid]",63],["(-write writer (str \"#uuid \\\"\" uuid \"\\\"\")))",70],["(-write writer (str \"#uuid \\\"\" uuid \"\\\"\")))",70]],"useCount":2619},{"word":"v","context":[[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],["[v]",792],["(defn solve-for19 [xs v]",512],["(defn solve-for02 [xs v]",512],["(defn solve-for14 [xs v]",512],["(defn solve-for06 [xs v]",512],["(defn solve-for11 [xs v]",512],["(defn solve-for03 [xs v]",512],["(defn solve-for18 [xs v]",512],["(defn solve-for01 [xs v]",512]],"useCount":45236},{"word":"v10","context":[[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],[";   which can be found in the file epl-v10.html at the root of this distribution.",300],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";  http://www.eclipse.org/legal/epl-v10.html",131],[":url \"http://www.eclipse.org/legal/epl-v10.html\"",128],[";; which can be found in the file epl-v10.html at the root of this",52],[";;   which can be found in the file epl-v10.html at the root of this distribution.",41],[";; which can be found in the file epl-v10.html at the root of this distribution.",40],["; which can be found in the file epl-v10.html at the root of this distribution.",37]],"useCount":14072},{"word":"val","context":[["([size init-val-or-seq]",282],["target-fn (-get-method mf dispatch-val)]",1175],["(throw-no-method-error name dispatch-val))",1157],["(set! (.-val added-leaf?) true)",430],["val-or-node (aget arr (inc (* 2 idx)))]",426],["\"keyval => key val",359],["val)))))",286],["(== n 1) val",284],["(let [s (seq init-val-or-seq)]",282],["(RedNode. (.-key left) (.-val left)",284]],"useCount":34057},{"word":"valid","context":[["string is not a valid unquoted property name.\"",44],["(register-as \"dantheman\" \"test@example.org\" \"password\" valid-ssh-key))",105],["(if valid?",43],["(merge valid-ssl-pem-config",40],["{:pre [(valid-editor? editor)]}",81],["(-key->js [x] \"Transforms map keys to valid JavaScript keys. Arbitrary keys are",69],["(defn valid?",67],[";; invariant: i is a valid index of tv.",55],[";; invariant: i is a valid index of pv (use array-for if unknown).",55],["(is (valid?",50]],"useCount":2088},{"word":"validate","context":[["(schema/defn ^:always-validate",797],["(assert (validate new-value) \"Validator rejected reference state\"))",64],["(use-fixtures :once schema.test/validate-schemas)",131],["(use-fixtures :once schema-test/validate-schemas)",130],["(defn validate",94],["(let [validate (.-validator a)]",62],["change. If the new state is unacceptable, the validate-fn should",72],[":validate [#(< 0 % 0x10000) \"Must be a number between 0 and 65536\"]]",84],["atom. validate-fn must be nil or a side-effect-free fn of one",72],[":validator validate-fn",72]],"useCount":3850},{"word":"validation","context":[[":closure-warnings {:externs-validation :off",37],["[noir.validation :as vali]",39],["[vip.data-processor.validation.data-spec :as data-spec]",40],["(s/with-fn-validation",60],["(validation-set",67],["For use with validation functions such as `validate` or `valid?`\"",36],["[vip.data-processor.validation.csv :as csv]",35],["(s/set-fn-validation! true)",35],[";; with total-error > 0 if it had error of zero on train but not on validation",113],[")) ;; To do validation, could have this function return an altered best individual",113]],"useCount":1524},{"word":"vals","context":[["(vals)",84],["(es6-iterator (vals coll)))",137],["vals",372],["vals",99],["(recur ntcoll (first vals) (next vals))",114],["(recur ntcoll (first vals) (next vals))",114],["(if vals",114],["([tcoll val & vals]",114],["(vals)",119],["(defn vals",73]],"useCount":3026},{"word":"value","context":[["#js {:value nil :done true})))",153],["Signature of the result value put on the channel is [result] where:",192],["value)",199],[":db/unique :db.unique/value",213],["value))",214],["value",250],["Signature of the result value put on the channel is [].",390],["[value]",417],[";;; {\"type\":\"html\",\"content\":\"<span class='clj-nil'>nil</span>\",\"value\":\"nil\"}",419],["This function returns a core.async channel which eventually receives a result value and closes.",1145]],"useCount":29683},{"word":"valueType","context":[[":db/valueType :db.type/boolean",114],[":db/valueType :db.type/string",872],[":db/valueType :db.type/ref",752],[":db/valueType :db.type/instant",665],[":db/valueType :db.type/long",320],[":db/valueType          :db.type/string",61],[":db/valueType :db.type/keyword",56],[":db/valueType :db.type/float",50],[":db/valueType :db.type/uuid",41],[":db/valueType          :db.type/ref",34]],"useCount":3139},{"word":"values","context":[["(values [coll]",257],["this means false return values will be included.  f must be free of",142],["[values]",93],[":values facts",85],["(kitchensink/select-values basic-events-map matches)",83],[":values facts2",75],["values",74],["one arg, returns the concatenation of the str values of the args.\"",72],["\"Recursively transforms ClojureScript values to JavaScript.",72],["\"Given a multimethod, returns a map of dispatch values -> dispatch fns\"",71]],"useCount":5110},{"word":"var","context":[["\"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:",71],["\"Gets the validator-fn for a var/ref/agent/atom.\"",71],[":var-type :fn,",751],[";; the server is forced to re-resolve the symbol in the var",374],[";; #'app expands to (var app) so that when we reload our code,",373],["(alter-var-root #'system",330],["(alter-var-root",124],["(alter-var-root #'system component/start))",111],[":var-type :var}",97],[":var-type :var}",97]],"useCount":4643},{"word":"varchar","context":[["UD_TEXT_1 varchar(100),",31],["UD_TEXT_2 varchar(100),",31],["UD_TEXT_2_J varchar(999),",28],["UD_TEXT_3 varchar(100),",28],["UD_TEXT_2 varchar(999),",31],["UD_TEXT_1 varchar(999),",31],["NOTES varchar(999),",30],["UD_TEXT_7_J varchar(100),",28],["UD_TEXT_9_J varchar(999),",28],["UD_TEXT_5_J varchar(100),",28]],"useCount":2373},{"word":"vec","context":[["vec)",185],["vec))",217],["(vec",449],["(let [v (vec (.toArray a))]",196],["(vec",99],["(is (= (query-to-vec",102],["(vec matches))))",102],["(query-to-vec",127],["(let [s (chunked-seq vec node i (inc off))]",142],["vec",154]],"useCount":6456},{"word":"vector","context":[["(if (vector? e)",162],["(if (vector? entry)",290],["(vector",166],["(zero? cnt) (throw (js/Error. \"Can't pop empty vector\"))",143],["(doseq [[i error] (map vector",105],[";; A list of data domains for the problem. Each domain is a vector containing",100],["vector",92],["(vector? bindings) \"a vector for its binding\"",83],["(vector? bindings) \"a vector for its binding\"",83],["(doseq [[i case] (map vector (range) train-cases)]",80]],"useCount":8443},{"word":"version","context":[["[[version endpoint] endpoints",304],[":min-lein-version \"2.5.0\"",708],[":min-lein-version \"2.0.0\"",1211],[":version 1,",131],[":min-lein-version \"2.0.0\")",128],[":version 4",114],[":version version",112],["[version]",309],["version",269],["[[version endpoint] endpoints]",133]],"useCount":11034},{"word":"view","context":[["[status-im.components.react :refer [view",44],["(gg4clj/view",40],["(:require [neko.activity :refer [defactivity set-content-view!]]",47],["(println (str \"You can view the site at http://localhost:\" port))))",374],["[view",53],["(i/view))))",62],["[neko.find-view :refer [find-view]]",37],["(view-layout",33],["[neko.find-view :refer [find-view]]",37],["(view",31]],"useCount":1803},{"word":"w","context":[["(-write w \\space)",60],["req (-> (rtucore/req-w-std-hdrs rumeta/mt-type",116],["[w]",66],["(print-one (val e) w opts)))",60],["(do (print-one (key e) w opts)",60],["(fn [e w opts]",60],["(binding [*out* w]",56],["[clojure.walk :as w]",47],["w))",44],["[w h]",44]],"useCount":2094},{"word":"walk","context":[["[clojure.walk :as walk]",335],["(mapcat walk (children node))))))]",71],["\"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.",71],["[clojure.walk :as walk]",64],["[clojure.walk :as walk]",64],["[clojure.walk :as walk]",335],["[clojure.walk :refer [keywordize-keys]]",133],["(walk root)))",71],["(let [walk (fn walk [node]",71],["(let [walk (fn walk [node]",71]],"useCount":2600},{"word":"warn","context":[["(set! *warn-on-reflection* true)",942],[":global-vars {*warn-on-reflection* true}",244],["(set! *warn-on-reflection* false)",116],[":global-vars {*warn-on-reflection* true",100],[";;(set! *warn-on-reflection* true)",93],["(set! *unchecked-math* :warn-on-boxed)",87],["(:require [plastic.logging :refer-macros [log info warn error group group-end]]",82],[";(set! *warn-on-reflection* true)",61],["(:require-macros [faceboard.macros.logging :refer [log log-err log-warn log-info]])",58],[":global-vars {*warn-on-reflection* true})",57]],"useCount":2920},{"word":"watch","context":[["(figwheel/watch-and-reload",672],["reference, and can be used to remove the watch with remove-watch,",71],["(-remove-watch [this key]",141],["(-add-watch [this key f]",136],[":css-dirs [\"resources/public/css\"] ;; watch and update CSS",124],["but are otherwise considered opaque by the watch mechanism.  Bear in",71],["any registered watches will have their functions called. The watch",71],["mind that regardless of the result or action of the watch fns the",71],["(defn remove-watch",71],["reference, and can be used to remove the watch with remove-watch,",71]],"useCount":2952},{"word":"we","context":[[";; #'app expands to (var app) so that when we reload our code,",373],[";; nREPL by default starts in the :main namespace, we want to start in `user`",50],[";; don't do this, instead we do the opposite, running figwheel from",50],[";; By declaring a classifier here and a corresponding profile below we'll get an additional jar",50],[";; Instead of booting a separate server on its own port, we embed",50],[";; we check if one has been specified in the environment",51],[";; If we're not inside a servlet environment",58],["int?       (zero? (mod value 1)) ; often true, but we could have 1.1111K",62],["value      (if int? (long value) value)] ; cleaner if we have the right type",62],[";; TODO: we should remove this and handle date equality checking",68]],"useCount":2736},{"word":"weasel","context":[["(let [repl-env (weasel/repl-env :ip \"0.0.0.0\" :port 9001)]",115],["[weasel.repl.websocket :as weasel]",380],["[weasel.repl.websocket :as weasel]",380],["[weasel.repl :as weasel]))",247],["(weasel/connect \"ws://localhost:9001\" :verbose true :print #{:repl :console})",118],["[weasel.repl :as weasel]",138],["[weasel.repl :as weasel]",138],["(piggieback/cljs-repl :repl-env (weasel/repl-env :ip \"0.0.0.0\" :port 9001)))",190],["[weasel.repl :as weasel]))",247],["(weasel/connect \"ws://localhost:9001\" :verbose true)",237]],"useCount":2739},{"word":"web","context":[[";; Some of the solutions on the web",88],["[immutant.web.middleware :refer [wrap-session]]",38],["(-> (session web/scalajars-app)",46],["(print \"Starting web server on port\" port \".\\n\")",177],["(println (format \"Starting web server on port %d.\" port))",69],["[clojars.web :as web]",47],["[clojars.web :as web]",47],["(run-web-server port))",120],["(defn run-web-server [& [port]]",124],["(-> (session web/clojars-app)",298]],"useCount":2207},{"word":"when","context":[["(when (seq coll)",252],["(when-let [ed (pool/last-active)]",248],["(when-let [ed (last-active)]",253],["(when-not (nil? x)",297],["(when-not (nil? s)",300],[";; #'app expands to (var app) so that when we reload our code,",373],["(when-not (nil? coll)",665],["(when-let [s (seq coll)]",1000],["(when-not target-fn",1175],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728]],"useCount":43155},{"word":"where","context":[["\"Associates a value in a nested associative structure, where ks is a",72],["where",78],["(where {:id id})))",83],["(string? (:where %))]}",114],[":where",180],["Signature of the result value put on the channel is [result] where:",192],["\"Returns a sorted sequence of the items in coll, where the sort",72],[":where",872],["(exclusive), by step, where start defaults to 0, step to 1,",72],["\"'Updates' a value in a nested associative structure, where ks is a",72]],"useCount":5633},{"word":"which","context":[["(if (counted? s) ; assumes nil is counted, which it currently is",72],["argument, which will be passed the intended new state on any state",72],[";; which can be found in the file COPYING at the root of this distribution.",90],["Strings which should be printed.\" :dynamic true}",90],[";  which accompanies this distribution, and is available at",131],["This function returns a core.async channel which eventually receives a result value and closes.",1145],["which (test (.. sc comparator (compare ek key)) 0) is true\"",142],["\"Returns a lazy sequence of the items in coll for which",144],[";   which can be found in the file epl-v10.html at the root of this distribution.",196],[";   which can be found in the file epl-v10.html at the root of this distribution.",300]],"useCount":6322},{"word":"while","context":[["(str \"The following errors occurred while parsing your command:\\n\\n\"",174],["(while true",135],["(throw (Exception. (str \"Production environment code is being loaded while the dev environment is active. \"",123],["(go (while true",84],["(go (while true",297],["(defn drop-while",75],["(take-while identity)",74],["(defn take-while",72],["\"Returns a lazy sequence of successive items from coll while",72],["(while true",481]],"useCount":3234},{"word":"whole","context":[[":whole-value whole-value",14],["\"I don't do a whole lot ... yet.\"",1040],["\"I don't do a whole lot.\"",984],["particular field or to the event as a whole.",27],[":whole-value whole-value",14]],"useCount":2079},{"word":"width","context":[[":width \"500\"}",61],["[width height]",66],["(clj->phaser width)",168],[":width \"width\"",66],[":width \"width\"",66],["; n-width windows",67],[":width    \"450px\"",89],[":width \"100%\"",100],[":content \"width=device-width, initial-scale=1\"}]",254],[":content \"width=device-width, initial-scale=1\"}]",254]],"useCount":3753},{"word":"will","context":[["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.\"",181],["this means false return values will be included.  f must be free of",142],["\"destroy will be called when your application",120],["\"init will be called once when",117],[";; inputs is either a list or a function that, when called, will create a",113],[";; you will need to put a script on your path.",183],[";; that script will have to take a file path and a line number",183],["(will-unmount [_]",210],["Note: |args| will be passed as additional parameters into Chrome event's .addListener call.",307],["(will-mount [_]",608]],"useCount":8592},{"word":"window","context":[["Events without times accrue in the current window.\"",68],["(.setTimeout js/window",31],["(test-stream (moving-time-window 2)",32],["(def isClient (not (nil? (try (.-document js/window)",58],["(test-stream (fixed-time-window 2)",32],["\"A fixed window over the event stream in time. Emits vectors of events, such",34],["(defn window",37],["(set! (.-onload js/window) init)",37],["[(link-to (if (= k window) {:class \"red\"} {})",39],["})(window,document,'script','//www.google-analytics.com/analytics.js','ga');",45]],"useCount":3490},{"word":"with","context":[["(with-out-str",667],["(-empty [coll] (with-meta (.-EMPTY List) meta))",398],[";; distributed with this work for additional information",262],["(with-test-db",236],[";; Redistribution and use in source and binary forms, with or without",214],[";;; Redistribution and use in source and binary forms, with or without",201],["(expect-with-non-timeseries-dbs",187],["(is (thrown-with-msg?",790],["(logutils/with-test-logging",405],["(with-meta",559]],"useCount":43147},{"word":"without","context":[["\"Sets the value of atom to newval without regard for the",73],[";;; Redistribution and use in source and binary forms, with or without",201],["(inode-without! [inode edit shift hash key removed-leaf?]",213],["(inode-without [inode shift hash key]",213],[";; Redistribution and use in source and binary forms, with or without",214],["(-dissoc! [tcoll key] (.without! tcoll key)))",73],[";; changes, the server picks it up without having to restart.",374],["(without! [tcoll k]",73],["item, for a vector, returns a new vector without the last item.",72],["reduces them without incurring seq initialization\"",72]],"useCount":3648},{"word":"world","context":[["[world]",106],[":world-visible \"worldVisible\"",50],["(let [response (http-get \"http://localhost:10000/hello-proxy/world\")]",57],["* world (Phaser.World) - Targeted instance for method",61],["[world ent]",67],["* position (Point) - The world origin to calculate from",50],["world))",55],["(is (= (:body response) \"hello world\"))",45],["(let [response (http-get \"http://localhost:9000/hello/world\")]",41],["(-> world",39]],"useCount":2168},{"word":"wrap","context":[["(apply gen-wrap-helper api-table kind item-id config args))",255],["[prone.middleware :refer [wrap-exceptions]]",388],["(defmacro gen-wrap [kind item-id config & args]",255],["[ring.middleware.reload :refer [wrap-reload]]",325],["(:require [chromex.wrapgen :refer [gen-wrap-helper]]",254],[":nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}",395],["(wrap-file-info)))",404],["[ring.middleware.defaults :refer [site-defaults wrap-defaults]]",351],["[ring.middleware.params :refer [wrap-params]]",357],["(wrap-file \"resources\")",385]],"useCount":16652},{"word":"write","context":[[":description \"FIXME: write this!\"",303],["(-write writer \">\"))",95],[":onyx/ident :core.async/write-to-chan",107],[":description \"FIXME: write description\"",7708],["{:lifecycle/task :write-segments",154],["(deftest replace-me ;; FIXME: write",110],["(nil? obj) (-write writer \"nil\")",121],["(-write writer sep)",133],["(write-all writer",93],["{:onyx/name :write-segments",84]],"useCount":13556},{"word":"writer","context":[["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))",276],["(-pr-writer [coll writer opts]",339],["(-pr-writer [coll writer opts]",339],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091],["(-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))",1091]],"useCount":18827},{"word":"ws","context":[["[gniazdo.core :as ws]",30],[":websocket-url \"ws://localhost:3449/figwheel-ws\"",686],[":websocket-url \"ws://localhost:3449/figwheel-ws\"",686],["(weasel/connect \"ws://localhost:9001\" :verbose true)",237],["(weasel/connect \"ws://localhost:9001\" :verbose true :print #{:repl :console})",118],["(def ring-ajax-get-or-ws-handshake ajax-get-or-ws-handshake-fn)",61],["(def ring-ajax-get-or-ws-handshake ajax-get-or-ws-handshake-fn)",61],["(ws/send-msg socket \"hello\")",38],["(defn ws-server",37],["(let [{:keys [ch-recv send-fn ajax-post-fn ajax-get-or-ws-handshake-fn",34]],"useCount":2817},{"word":"www","context":[["(metadata:hasURL \"http://www.mrlc.gov/\")",46],[";; 02110-1301 USA, or see the FSF site: http://www.fsf.org.",242],[":content-type \"application/x-www-form-urlencoded\"",47],["(metadata:hasURL \"http://www.whrc.org/mapping/nbcd/index.html\")",66],["; Visit http://www.pragmaticprogrammer.com/titles/pb7con for more book information.",72],[":url \"http://www.eclipse.org/legal/epl-v10.html\"",128],[":url  \"http://www.eclipse.org/legal/epl-v10.html\"}",387],[":url \"http://www.eclipse.org/legal/epl-v10.html\"}",12449],[";;Visit http://www.pragmaticprogrammer.com/titles/shcloj2 for more book information.",90],[";  http://www.eclipse.org/legal/epl-v10.html",131]],"useCount":14297},{"word":"x","context":[["(fn [x]",819],["[x]",3376],["[x]",2274],["([x y & more]",950],["(println x \"Hello, World!\"))",888],["(are [x y] (= x y)",873],["(are [x y] (= x y)",873],["[x y]",648],["x",577],["([x] x)",573]],"useCount":90356},{"word":"xform","context":[["(-seq [_] (seq (sequence xform coll)))",49],["([xform f init coll]",49],["([xform f coll] (transduce xform f (f) coll))",49],["(fn [xform colls]",49],["([xform iters]",49],["(deftype MultiStepper [xform iters nexts]",49],["(fn [xform coll]",49],["(deftype Stepper [xform iter]",49],["([xform coll]",49],["(xform lt))))",98]],"useCount":1553},{"word":"xml","context":[["(:require [clojure.xml :as xml]",62],["\"(string, optional) The desired response format: json, xml, or vdf. Default: json\"]),",185],["xml/load-xml-ltree",57],["(:require [clojure.xml :as xml]",62],["\"(string, optional) The desired response format: json, xml, or vdf. Default: json\"])},",65],["[clojure.data.xml :as xml]",103],["[clojure.xml :as xml]",135],["[clojure.xml :as xml]",135],["[org.clojure/data.xml \"0.0.8\"]",125],["[clojure.data.xml :as xml]",103]],"useCount":2314},{"word":"xs","context":[["ndx3 (range (inc ndx2) (count xs))",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],[":when (= v (+ (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3)))]",9728],["ndx2 (range (inc ndx1) (- (count xs) 1))",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],["(for [ndx0 (range 0          (- (count xs) 3))",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728],["(list (xs ndx0) (xs ndx1) (xs ndx2) (xs ndx3))))",9728]],"useCount":132507},{"word":"y","context":[["(clj->phaser y)",294],["([x y & more]",950],["(are [x y] (= x y)",873],["(are [x y] (= x y)",873],["[x y]",648],["[x y]",427],["(fn [x y]",170],["([x y & more]",198],["([x y]",178],["(recur y (first more) (next more))",432]],"useCount":35460},{"word":"you","context":[[";;courses, books, articles, and the like. Contact us if you are in doubt.",90],[";; Use M-x 4clojure-check-answers when you're done!",228],[";; you will need to put a script on your path.",183],[";; if you want to embed a ring handler into the figwheel http-kit",131],[";; if you want to disable the REPL",129],[";; doesn't work for you just run your own server :)",115],["; courses, books, articles, and the like. Contact us if you are in doubt.",73],["returns that non-fn value. Note that if you want to return a fn as a",71],["final value, you must wrap it in some data structure and unpack it",71],[";; and port. If you prefer a separate server process then take this",50]],"useCount":3267},{"word":"your","context":[["{;; Specify the path to your private",48],[";; To be able to open files in your editor from the heads up display",183],[";; OutOfMemoryException. Set the value according to your",55],[";; here or in your ~/.lein/profiles.clj file.",59],[";; you will need to put a script on your path.",183],["(str \"The following errors occurred while parsing your command:\\n\\n\"",174],["\"destroy will be called when your application",120],[";; doesn't work for you just run your own server :)",115],[";; your application",75],[";; optionally touch your app-state to force rerendering depending on",73]],"useCount":1763},{"word":"ys","context":[["(cond (nil? xs) (nil? ys)",71],["the ys from x and returns the result.\"",209],["([x & ys]",76],["yl (count ys)]",71],["(nil? ys) false",71],["([xs ys len n]",71],["(loop [xs (seq x) ys (seq y)]",72],["\"If no ys are supplied, returns the negation of x, else subtracts",209],["(= (first xs) (first ys)) (recur (next xs) (next ys))",73],["(= (first xs) (first ys)) (recur (next xs) (next ys))",73]],"useCount":1515},{"word":"z","context":[["([x y z] (vector (f x y z) (g x y z)))",71],["([x y z & args] (vector (apply f x y z args) (apply g x y z args)))))",71],["([x y z] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z)))",71],["([x y z] (vector (f x y z) (g x y z)))",71],["([x y z] (vector (f x y z) (g x y z)))",71],["([x y z] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z)))",71],["(let [arglist (list* x y z args)",72],["([f x y z args]",74],["z/of-string",108],["[z]",110]],"useCount":7846},{"word":"zero","context":[["(zero? subidx) nil",142],["(if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))",142],["(if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))",142],["(zero? cnt) (throw (js/Error. \"Can't pop empty vector\"))",143],["(if (and (nil? new-child) (zero? subidx))",143],["(zero? n)       (if (seq coll)",144],["(if (and (> start end) (zero? step))",144],["(if (zero? len)",157],["(if (zero? n)",347],["(if (zero? (bit-and bitmap bit))",426]],"useCount":7365},{"word":"zip","context":[["zip/down",50],["[clojure.zip :as z]",49],["(:require [clojure.zip :as zip])",44],["[clojure.zip :as zip]",265],["[clojure.zip :as zip]",265],["(:require [clojure.zip :as zip]",110],["(:require [clojure.zip :as zip]",110],["[org.clojure/data.zip \"0.1.1\"]",106],["(if (zip/end? loc)",81],["zip/right",76]],"useCount":2683},{"word":"~","context":[["~@body)))",550],["(try ~@body",73],["~@forms",108],["(do ~@body)))",110],["(do ~@body)",167],[";; ie. in  ~/bin/myfile-opener",182],["~@body)",232],["~@body))",889],["~@body",1330],["~@body))))",233]],"useCount":7182}]