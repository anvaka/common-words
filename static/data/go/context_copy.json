[{"word":"0x00","context":[["0x00,",75484],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",2288]]},{"word":"0x7F","context":[["msglen |= (int(b) & 0x7F) << shift",42857],["wire |= (uint64(b) & 0x7F) << shift",32162],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["v |= (int(b) & 0x7F) << shift",5834],["keykey |= (uint64(b) & 0x7F) << shift",5109],["valuekey |= (uint64(b) & 0x7F) << shift",5109],["byteLen |= (int(b) & 0x7F) << shift",4334],["stringLenmapkey |= (uint64(b) & 0x7F) << shift",2770],["v |= (uint64(b) & 0x7F) << shift",2433],["v |= (int32(b) & 0x7F) << shift",2269]]},{"word":"0x80","context":[["if b < 0x80 {",153986],["data[i] = uint8(uint64(l)&0x7f | 0x80)",2694],["data[offset] = uint8(v&0x7f | 0x80)",2150],["if data[iNdEx-1] < 0x80 {",1998],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["data = append(data, uint8(uint64(v)&0x7f|0x80))",811],["low:           0x80,",378]]},{"word":"0xff","context":[["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831]]},{"word":"A","context":[["// A service error occurred",13362],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",5183],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",4925],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",4647],["* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",3599],["// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",2974],["// A non-nil error returned from f will halt the iteration.",2234],["// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",1951],["A int",1828],["// A non-service error occurred.",1771]]},{"word":"ANY","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",9930],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["but WITHOUT ANY WARRANTY; without even the implied warranty of",5062],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",4342],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",3684],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295]]},{"word":"API","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// unconditionally include in API requests. By default, fields with",36870],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// values are omitted from API requests. However, any field with an",3833],["// OAuth2 scopes used by this API.",2697],["BasePath  string // API endpoint base URL",2098],["// API requests with the JSON null value. By default, fields with empty",1737],["// to unconditionally include in API requests. By default, fields with",1463],["// empty values are omitted from API requests. However, any field with",1097],["// in API requests with the JSON null value. By default, fields with",1097]]},{"word":"APIVersion","context":[["x.APIVersion = string(r.DecodeString())",9730],["x.APIVersion = \"\"",9730],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["\"api-version\": client.APIVersion,",4209],["out.APIVersion = in.APIVersion",3676],["out.APIVersion = in.APIVersion",3676],["APIVersion: \"v1\",",2833],["\"api-version\": APIVersion,",2307],["req, err := loc.api.BuildHTTPRequest(uri.HTTPMethod, uri.Path, APIVersion, params, p)",1555],["APIVersion: testapi.Default.GroupVersion().String(),",996]]},{"word":"AS","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",2059],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",2004],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",1427],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",1295],["* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",1078]]},{"word":"AWS","context":[["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// in the AWS General Reference.",838],["// AWSElasticBlockStore represents an AWS Disk resource that is attached to a",636],["// The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.",622],["// AWS Service Namespaces (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)",608],["// See the AWS API reference guide for 's",504],["// (typically AWS load-balancers)",485],["// See the AWS API reference guide for Amazon API Gateway's",456],["// AWSElasticBlockStore represents an AWS EBS disk that is attached to a",444]]},{"word":"Action","context":[["Action: func(c *cli.Context) {",4387],["Action: types.ActAllow,",4036],["&metadata.Action{",2335],["Action: configs.Allow,",1552],["[]testutil.Action{",1426],["Action: func(ctx *cli.Context) {",1298],["Action: specs.ActAllow,",1246],["Action: func(c *cli.Context) error {",906],["// specified domains. Use an Action element to allow or deny permission to call",826],["app.Action = func(c *cli.Context) {",708]]},{"word":"Add","context":[["wg.Add(1)",18128],["w.Header().Add(\"Content-Type\", \"application/json\")",1637],["wg.Add(2)",1561],["req.Header.Add(\"Content-Type\", \"application/json\")",1212],["s.wg.Add(1)",1036],["if in.Add != nil {",1030],["out.Add = nil",1012],["invalidParams.Add(request.NewErrParamRequired(\"Name\"))",918],["invalidParams.Add(request.NewErrParamRequired(\"Bucket\"))",869],["for i := range in.Add {",811]]},{"word":"Addr","context":[["conn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())",853],["for i := 0; i < len(sa.Addr); i++ {",744],["Addr string",691],["pixels_ptr = unsafe.Pointer(pixels_v.Index(0).Addr().Pointer())",558],["data_ptr = unsafe.Pointer(data_v.Index(0).Addr().Pointer())",552],["v = v.Addr()",552],["pointer_ptr = unsafe.Pointer(pointer_v.Index(0).Addr().Pointer())",411],["Addr     [16]byte /* in6_addr */",377],["Addr   [4]byte /* in_addr */",374],["addr := srv.Addr",367]]},{"word":"Address","context":[["out.Address = in.Address",1275],["out.Address = in.Address",1275],["Address string",1234],["Address:    \"127.0.0.1\",",1042],["Address string `json:\"address\"`",811],["type Address struct {",810],["{Type: api.NodeLegacyHostIP, Address: \"something\"},",566],["x.Address = string(r.DecodeString())",514],["x.Address = \"\"",514],["r.EncodeString(codecSelferC_UTF81234, string(x.Address))",514]]},{"word":"After","context":[["case <-time.After(time.Second):",4246],["case <-time.After(5 * time.Second):",4145],["case <-time.After(timeout):",1871],["case <-time.After(coretesting.LongWait):",1808],["case <-time.After(2 * time.Second):",1784],["case <-time.After(1 * time.Second):",1613],["case <-time.After(10 * time.Second):",1515],["case <-time.After(100 * time.Millisecond):",1295],["case <-time.After(coretesting.ShortWait):",1265],["case <-time.After(3 * time.Second):",1061]]},{"word":"Agent","context":[["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["reqHeaders.Set(\"User-Agent\", c.s.userAgent())",11905],["UserAgent string // optional additional User-Agent fragment",2098],["type Agent struct {",396],["req.Header.Set(\"User-Agent\", userAgent)",357],["req.Header.Set(\"User-Agent\", shared.UserAgent)",244],["agent := c.Agent()",214],["req.Header.Add(\"User-Agent\", c.UserAgent)",203],["userAgent := strings.Split(r.Header.Get(\"User-Agent\"), \"/\")",188]]},{"word":"All","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["// Copyright 2009 The Go Authors. All rights reserved.",12923],["Copyright 2014 Google Inc. All rights reserved.",7127],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["// Copyright 2013 The Go Authors. All rights reserved.",5102],["Copyright 2016 The Kubernetes Authors All rights reserved.",4483],["// All rights reserved.",4405],["// Copyright 2014 The Go Authors. All rights reserved.",4299],["// Copyright 2015 The Go Authors. All rights reserved.",4037]]},{"word":"Amazon","context":[["// in the Amazon Elastic Compute Cloud User Guide.",4599],["// in the Amazon Virtual Private Cloud User Guide.",1667],["// in the Amazon DynamoDB Developer Guide.",1656],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// in the Amazon Redshift Cluster Management Guide.",737],["// in the Amazon RDS User Guide.",722],["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.",622],["// For more information about ARNs, go to Amazon Resource Names (ARNs) and",608]]},{"word":"An","context":[["// StartIndex sets the optional parameter \"start-index\": An index of the",675],["// An optional pagination token provided by a previous request. If this parameter",664],["// Description: An optional textual description of the resource;",606],["// Operation: An identifier that uniquely identifies the operation. You",447],["// Namespace defines the space within which name must be unique. An empty namespace is",424],["// An opaque value that represents the version of this resource. May be used for optimistic",411],["// An RFC3339 timestamp from which to show logs. If this value",410],["// An optional parameter that specifies the starting point to return a set of",381],["// occured in a status response. An operation may have multiple causes for a",349],["// An identifier that was returned from the previous call to this operation,",325]]},{"word":"Any","context":[["// Context sets the context to be used in this call's Do method. Any",22537],["// Any pending HTTP request will be aborted if the provided context",4780],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// Any non-2xx status code is an error. Response headers are in either",1236],["* University in Winter 2015. Any subsequent COMP 520 student who is",916],["// Exactly one of *Empty or error will be non-nil. Any non-2xx status",775],["// methods. Any pending HTTP request will be aborted if the provided",466],["// Exactly one of *ObjectAccessControl or error will be non-nil. Any",440],["// Exactly one of *Object or error will be non-nil. Any non-2xx status",342]]},{"word":"Apache","context":[["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["// Licensed under the Apache License, Version 2.0 (the \"License\");",56516],["* Licensed under the Apache License, Version 2.0 (the \"License\");",5894],["//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file",2295],["// Use of this source code is governed under the Apache License, Version 2.0",1834],["// Licensed under the Apache License, Version 2.0 (the \"License\"): you may",1772],["* Licensed to the Apache Software Foundation (ASF) under one",1018],["* to you under the Apache License, Version 2.0 (the",1018],["Licensed to the Apache Software Foundation (ASF) under one",974],["to you under the Apache License, Version 2.0 (the",974]]},{"word":"Args","context":[["x := v.Args[0]",11125],["v_0 := v.Args[0]",7907],["y := v.Args[1]",5133],["v_1 := v.Args[1]",4717],["Args:   []*types.Arg{},",3978],["app.Run(os.Args)",2537],["mem := v.Args[2]",2237],["mem := v.Args[1]",1911],["args := flag.Args()",1763],["ptr := v.Args[0]",1744]]},{"word":"Assert","context":[["c.Assert(err, jc.ErrorIsNil)",135421],["c.Assert(err, IsNil)",104368],["c.Assert(err, check.IsNil)",82873],["c.Assert(err, gc.IsNil)",75298],["c.Assert(err, checker.IsNil)",16743],["c.Assert(err, check.NotNil)",7474],["c.Assert(err, NotNil)",4327],["c.Assert(err, test.IsNil)",3451],["c.Assert(ok, Equals, true)",3112],["c.Assert(err, check.IsNil, check.Commentf(out))",3044]]},{"word":"Authors","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["// Copyright 2009 The Go Authors. All rights reserved.",12923],["Copyright 2016 The Kubernetes Authors.",11842],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["Copyright 2014 The Kubernetes Authors.",5369],["// Copyright 2015 The Cockroach Authors.",5364],["Copyright 2015 The Kubernetes Authors.",5172],["// Copyright 2013 The Go Authors. All rights reserved.",5102],["Copyright 2016 The Kubernetes Authors All rights reserved.",4483]]},{"word":"B","context":[["B string",741],["B int",682],["type B struct {",657],["B:    []byte(\"PAYLOAD\"),",432],["case 'B':",336],["A, B int",252],["result := struct{ A, B int }{}",241],["B bool",238],["B",217],["func BenchmarkMarshal(b *testing.B) {",215]]},{"word":"BASIS","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",2059],["\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",973],["* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",787],["//   distributed under the License is distributed on an \"AS IS\" BASIS,",598],["// on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",503],["** distributed under the License is distributed on an \"AS IS\" BASIS,",470]]},{"word":"BSD","context":[["// Use of this source code is governed by a BSD-style",82711],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by a BSD-style license",1018],["// this source code is governed by the included BSD license.",803],["// BSD-style license that can be found in the LICENSE file.",702],["// by the new BSD license.",569],["// This file is subject to a 1-clause BSD license.",532],["Use of this source code is governed by a BSD-style",445],["// Use of this source code is governed by a BSD",432],["// Use of this source code is governed by a BSD-style license that can be found",278]]},{"word":"BY","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",1987],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",1427],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",1149],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["command: `SELECT * FROM db0.rp0.cpu GROUP BY *`,",441],["_, _ = buf.WriteString(\" ORDER BY \")",388],["THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",371],["sql_str = sql_str + \" ORDER BY ID DESC \"",320]]},{"word":"Body","context":[["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["defer resp.Body.Close()",30994],["res.Body.Close()",30727],["if res.Body != nil {",24829],["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["defer res.Body.Close()",9002],["body, err := ioutil.ReadAll(resp.Body)",8460],["resp.Body.Close()",7445],["// http.Response Body if it receives an error.",6600],["// closes the http.Response Body.",6600]]},{"word":"Buffer","context":[["var buf bytes.Buffer",31577],["buf := new(bytes.Buffer)",10550],["var b bytes.Buffer",7044],["var buffer bytes.Buffer",5736],["buf := &bytes.Buffer{}",4759],["b := new(bytes.Buffer)",2946],["var out bytes.Buffer",2512],["var stdout, stderr bytes.Buffer",1886],["buffer := &bytes.Buffer{}",1503],["buffer := new(bytes.Buffer)",1322]]},{"word":"By","context":[["// unconditionally include in API requests. By default, fields with",36870],["// requests with the JSON null value. By default, fields with empty",2096],["// API requests with the JSON null value. By default, fields with empty",1737],["// to unconditionally include in API requests. By default, fields with",1463],["// in API requests with the JSON null value. By default, fields with",1097],["By(\"creating the pod\")",867],["// include in API requests with the JSON null value. By default, fields",819],["// By default, fields with empty values are omitted from API requests.",683],["By(\"submitting the pod to kubernetes\")",580],["By(\"deleting the pod\")",532]]},{"word":"Bytes","context":[["return buf.Bytes(), nil",2995],["return buf.Bytes()",1852],["return buf.Bytes(), err",873],["return b.Bytes(), err",648],["return b.Bytes(), nil",642],["outBuf := fs.Output.Bytes()",576],["return b.Bytes()",489],["if !bytes.Equal(buf.Bytes(), test.buf) {",414],["return buffer.Bytes(), nil",399],["spew.Sdump(buf.Bytes()), spew.Sdump(test.buf))",398]]},{"word":"C","context":[["import \"C\"",11442],["coll := session.DB(\"mydb\").C(\"mycoll\")",6299],["case <-ticker.C:",3703],["case <-timer.C:",1869],["defer C.free(unsafe.Pointer(cstr))",1562],["cname := C.CString(name)",1397],["args: C.struct_fnargs{",1270],["defer C.free(unsafe.Pointer(cname))",1232],["C:      \"accounts\",",1227],["//\tPortions Copyright © 1995-1997 C H Forsyth (forsyth@terzarima.net)",1191]]},{"word":"CONDITIONS","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",2078],["\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",973],["* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",787],["//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",598],["// on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either",503]]},{"word":"Check","context":[["Check: resource.ComposeTestCheckFunc(",10702],["c.Check(err, jc.ErrorIsNil)",4766],["c.Check(err, IsNil)",2456],["c.Check(err, gc.IsNil)",2043],["Check: func(resp *logical.Response) error {",1015],["}).Check()",992],["if err := quick.Check(f, nil); err != nil {",855],["// Check pod status stored in the status map.",780],["// Check the pod infra container.",780],["c.Check(err, check.IsNil)",698]]},{"word":"CheckBreak","context":[["if r.CheckBreak() {",12201],["yyb10 = r.CheckBreak()",3899],["for j := 0; !dd.CheckBreak(); j++ {",3681],["yyb9 = r.CheckBreak()",3635],["yyb8 = r.CheckBreak()",1912],["yyb6 = r.CheckBreak()",1783],["yyb7 = r.CheckBreak()",1513],["for ; !r.CheckBreak(); yyj1++ {",1283],["yyb12 = r.CheckBreak()",1158],["yyb93 = r.CheckBreak()",891]]},{"word":"Client","context":[["type Client struct {",6191],["client := http.Client{}",4359],["client := &http.Client{}",4318],["func New(client *http.Client) (*Service, error) {",3045],["*client.Client",2521],["Client: client.New(",2287],["client    *http.Client",2268],["api_service, err := api_client.New(context.Client)",2230],["tf.Client = &fake.RESTClient{",2082],["client *Client",2081]]},{"word":"Close","context":[["defer resp.Body.Close()",30994],["res.Body.Close()",30727],["defer f.Close()",23064],["defer session.Close()",17293],["defer conn.Close()",14851],["defer ts.Close()",14767],["defer server.Close()",14598],["defer ctx.Close()",13525],["f.Close()",12895],["defer s.Close()",12582]]},{"word":"Code","context":[["Code:   res.StatusCode,",24618],["// Print the error, cast err to awserr.Error to get the Code and",19219],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["// Code generated by protoc-gen-gogo.",3591],["// Code generated by protoc-gen-go.",3589]]},{"word":"Command","context":[["Run: func(cmd *cobra.Command, args []string) {",7815],["cmd := &cobra.Command{",5761],["if in.Command != nil {",2886],["out.Command = nil",2784],["out.Command[i] = in.Command[i]",2369],["out.Command = make([]string, len(in.Command))",2369],["out.Command = make([]string, len(in.Command))",2369],["out.Command[i] = in.Command[i]",2369],["for i := range in.Command {",2369],["app.Commands = []cli.Command{",2042]]},{"word":"Config","context":[["type Config struct {",11935],["Config: map[string]interface{}{",3335],["config: Config{",2509],["config := meta.(*Config)",2395],["// aws.Config parameter to add your extra config.",2272],["Config: &docker.Config{",1644],["Config: &docker.Config{",1644],["Config:     &docker.Config{},",1317],["Config:     &docker.Config{},",1317],["Config: config,",1253]]},{"word":"Container","context":[["Containers: []api.Container{",18714],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745],["Containers: []*kubecontainer.Container{",2335],["out.Container = in.Container",2315],["out.Container = in.Container",2315],["container: &api.Container{",2149],["type Container struct {",2128],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["testContainer: api.Container{",943],["Containers: []api.Container{{",848]]},{"word":"Containers","context":[["Containers: []api.Container{",18714],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745],["Containers: []*kubecontainer.Container{",2335],["for _, container := range pod.Spec.Containers {",2060],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["if in.Containers != nil {",1113],["out.Containers = nil",1095],["for i := range in.Containers {",898],["Containers: []api.Container{{",848],["for _, container := range spec.Containers {",805]]},{"word":"Contains","context":[["if strings.Contains(err.Error(), fmt.Sprintf(",1280],["if _, err := buildImageFromContext(name, ctx, true); err == nil || !strings.Contains(err.Error(), expected) {",1064],["// Contains the result of a successful invocation of the following actions:",1010],["c.Assert(out, checker.Contains, expected)",727],["if !strings.Contains(out, expected) {",668],["if !strings.Contains(out, \"test2267\") {",636],["if !strings.Contains(out, \"from Dockerfile\") {",576],["if err == nil || !strings.Contains(err.Error(), want) {",539],["if strings.Contains(err.Error(), \"connection refused\") {",505],["if !strings.Contains(out, ipTablesSearchString) {",461]]},{"word":"Content","context":[["req.Header.Set(\"Content-Type\", ctype)",17612],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["reqHeaders.Set(\"Content-Type\", \"application/json\")",4904],["req.Header.Set(\"Content-Type\", \"application/json\")",3191],["w.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")",1868],["w.Header().Add(\"Content-Type\", \"application/json\")",1637],["req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",1373],["w.Header().Set(\"Content-Type\", \"application/vnd.docker.plugins.v1+json\")",1232],["req.Header.Add(\"Content-Type\", \"application/json\")",1212],["w.Header().Set(\"Content-Type\", \"text/plain\")",1154]]},{"word":"Context","context":[["// Context sets the context to be used in this call's Do method. Any",22537],["ctx_         context.Context",9933],["ctx_       context.Context",6867],["// Context sets the context to be used in this call's Do method.",4699],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["Action: func(c *cli.Context) {",4387],["ctx context.Context,",3098],["// The provided context supersedes any context provided to the Context method.",2234],["type Context struct {",2112],["context_      context.Context",1895]]},{"word":"Convert","context":[["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["if err := retconv.Convert(javabind.ObjectRef(jret)); err != nil {",7624],["if err := conv_a.Convert(a); err != nil {",6009],["if err := s.Convert(&val, &newVal, 0); err != nil {",3612],["if err := s.Convert(&in.ListMeta, &out.ListMeta, 0); err != nil {",2491],["if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {",2056],["if err := s.Convert(&in.Items[i], &out.Items[i], 0); err != nil {",1390],["if err := s.Convert(&in.TypeMeta, &out.ObjectMeta, 0); err != nil {",738],["if err := s.Convert(&in.Port, &out.Port, 0); err != nil {",704],["if err := s.Convert(&in.Status, &out.Status, 0); err != nil {",688]]},{"word":"Copyright","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["// Copyright 2009 The Go Authors. All rights reserved.",12923],["Copyright 2016 The Kubernetes Authors.",11842],["Copyright 2014 Google Inc. All rights reserved.",7127],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["// Copyright 2013 Canonical Ltd.",6131],["// Copyright 2015 Canonical Ltd.",5962],["Copyright 2014 The Kubernetes Authors.",5369],["// Copyright 2015 The Cockroach Authors.",5364]]},{"word":"Create","context":[["// Create container.",1098],["// Create pod infra container.",838],["f, err := os.Create(path)",713],["// Create a new parameter struct",537],["_, err := c.Pods(ns).Create(&api.Pod{",537],["testTar, err := os.Create(filepath.Join(tmpDir, \"test.tar\"))",486],["f, err := os.Create(filename)",478],["// Create the register request",468],["_, err := podClient.Create(pod)",459],["func (d *Driver) Create() error {",438]]},{"word":"DB","context":[["coll := session.DB(\"mydb\").C(\"mycoll\")",6299],["type DB struct {",898],["admindb := session.DB(\"admin\")",816],["db := session.DB(\"mydb\")",631],["var db *sql.DB",551],["db *sql.DB",456],["db *DB",364],["mydb := session.DB(\"mydb\")",362],["queryDb:  \"%DB%\",",332],["func (db *DB) Close() error {",292]]},{"word":"DO","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT!",8164],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// DO NOT EDIT.",887],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// Created by cgo -godefs - DO NOT EDIT",690],["// Auto-generated - DO NOT EDIT",611],["// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING",590],["// Automatically generated by MockGen. DO NOT EDIT!",496]]},{"word":"Data","context":[["req.Data = output",54229],["Data: map[string]interface{}{",4008],["Data: map[string][]byte{",1558],["fakeClient.Data[key] = tools.EtcdResponseWithError{",1556],["if in.Data != nil {",1361],["out.Data = nil",1345],["Data:    map[string]interface{}{},",1210],["type Data struct {",1003],["Data []byte",840],["team = Client.Must(Client.CreateTeam(team)).Data.(*model.Team)",797]]},{"word":"DecSendContainerState","context":[["z.DecSendContainerState(codecSelfer_containerArrayEnd1234)",67764],["z.DecSendContainerState(codecSelfer_containerArrayElem1234)",58067],["z.DecSendContainerState(codecSelfer_containerMapEnd1234)",19506],["z.DecSendContainerState(codecSelfer_containerMapValue1234)",9921],["z.DecSendContainerState(codecSelfer_containerMapKey1234)",9921],["z.DecSendContainerState(codecSelfer_containerArrayEnd1819)",180],["z.DecSendContainerState(codecSelfer_containerArrayElem1819)",156],["z.DecSendContainerState(codecSelfer_containerArrayEnd9225)",110],["z.DecSendContainerState(codecSelfer_containerArrayElem9225)",98],["z.DecSendContainerState(codecSelfer_containerArrayEnd6482)",75]]},{"word":"Decode","context":[["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["if err := json.NewDecoder(res.Body).Decode(ret); err != nil {",1930],["if err := self.codec.Decode(req.Params, &args); err != nil {",629],["err := d.Decode(&v)",472],["// Decode from wire format.",455],["json.NewDecoder(r.Body).Decode(v)",418],["if err := json.NewDecoder(authJson).Decode(authConfig); err != nil {",408],["err := json.NewDecoder(recorder.Body).Decode(&got)",347],["if err := json.NewDecoder(r.Body).Decode(&req); err != nil {",338]]},{"word":"DeepEqual","context":[["if !reflect.DeepEqual(got, want) {",2749],["if !reflect.DeepEqual(actual, expected) {",2743],["if !reflect.DeepEqual(expected, actual) {",1705],["if !reflect.DeepEqual(err, expected) {",861],["if !reflect.DeepEqual(expected, result) {",798],["if !reflect.DeepEqual(got, expected) {",762],["if !reflect.DeepEqual(want, got) {",636],["if !reflect.DeepEqual(goth, wanth) {",633],["if !reflect.DeepEqual(result, expected) {",580],["if api.Semantic.DeepEqual(old, cur) {",418]]},{"word":"Default","context":[["// Default: None",2044],["// Default: 100",1468],["// Optional: Default to false.",1165],["Default:  false,",1094],["Default:      nil,",1059],["APIVersion: testapi.Default.GroupVersion().String(),",996],["// Default: false",949],["Default:     \"\",",732],["Default:  true,",719],["// Default: true",714]]},{"word":"Delete","context":[["return c.client.Delete().",1898],["Delete(name string, options *api.DeleteOptions) error",809],["Delete(name string) error",629],["// DeleteSender sends the Delete request. The method will close the",503],["// DeleteResponder handles the response to the Delete request. The method always",503],["// DeletePreparer prepares the Delete request.",503],["// Delete",497],["c.Delete()",436],["podClient.Delete(pod.Name, api.NewDeleteOptions(0))",419],["if err := n.Delete(); err != nil {",403]]},{"word":"Description","context":[["Description string `json:\"description,omitempty\"`",5884],["Description string",3489],["Description: ``,",3261],["Description *string `type:\"string\"`",2344],["Description *string `locationName:\"description\" type:\"string\"`",1836],["Description string `json:\"description\"`",1325],["Description: `",990],["out.Description = in.Description",910],["out.Description = in.Description",910],["// Description:",754]]},{"word":"Do","context":[["return c.s.client.Do(req)",25977],["res, err := c.s.client.Do(req)",25048],["// Context sets the context to be used in this call's Do method. Any",22537],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["// error from Do is the result of In-None-Match.",12114],["Do().",9727],["resp, err := client.Do(req)",4958],["// Context sets the context to be used in this call's Do method.",4699],["response, err := client.Do(request)",3234],["Do()",2334]]},{"word":"DockerSuite","context":[["ds: &DockerSuite{},",310],["func (s *DockerSuite) TestRunVolumesCleanPaths(c *check.C) {",156],["func (s *DockerSuite) TestRunStdinPipe(c *check.C) {",156],["func (s *DockerSuite) TestRunWithInvalidMacAddress(c *check.C) {",156],["func (s *DockerSuite) TestRunNoOutputFromPullInStdout(c *check.C) {",156],["func (s *DockerSuite) TestRunCopyVolumeContent(c *check.C) {",156],["func (s *DockerSuite) TestRunReuseBindVolumeThatIsSymlink(c *check.C) {",156],["func (s *DockerSuite) TestRunLinksContainerWithContainerName(c *check.C) {",156],["func (s *DockerSuite) TestRunContainerWithRmFlagExitCodeNotEqualToZero(c *check.C) {",156],["func (s *DockerSuite) TestRunNetHostNotAllowedWithLinks(c *check.C) {",156]]},{"word":"Done","context":[["defer wg.Done()",15771],["wg.Done()",12239],["case <-ctx.Done():",6555],["defer s.wg.Done()",858],["defer group.Done()",784],["s.wg.Done()",621],["}(ctx.Done(), cn.CloseNotify())",600],["defer w.tomb.Done()",563],["<-ctx.Done()",552],["defer wait.Done()",531]]},{"word":"Duration","context":[["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Duration\"),",2091],["time.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))",1469],["timeout time.Duration",1164],["var _ time.Duration",995],["Timeout time.Duration",986],["case time.Duration:",813],["interval time.Duration",571],["Interval time.Duration",469],["Duration time.Duration",452],["Duration time.Duration",452]]},{"word":"EDIT","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT!",8164],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// DO NOT EDIT.",887],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// Created by cgo -godefs - DO NOT EDIT",690],["// Auto-generated - DO NOT EDIT",611],["// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING",590],["// Automatically generated by MockGen. DO NOT EDIT!",496]]},{"word":"EOF","context":[["if err == io.EOF {",16583],["if err != io.EOF {",4489],["if err != nil && err != io.EOF {",4146],["return 0, io.EOF",2834],["err = io.EOF",1478],["return io.EOF",1468],["return nil, io.EOF",1245],["EOF",1158],["if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {",1066],["// EOF",1023]]},{"word":"Elem","context":[["Elem: &schema.Resource{",3192],["Elem:     &schema.Schema{Type: schema.TypeString},",2931],["v = v.Elem()",2390],["t = t.Elem()",1504],["Elem:     &Schema{Type: TypeInt},",1276],["Elem: &Resource{",760],["val = val.Elem()",687],["typ = typ.Elem()",510],["rv = rv.Elem()",497],["value = value.Elem()",412]]},{"word":"EncBinary","context":[["yym1 := z.EncBinary()",4760],["yysep2 := !z.EncBinary()",4300],["yym5 := z.EncBinary()",3063],["yym7 := z.EncBinary()",2319],["yym4 := z.EncBinary()",2253],["yym10 := z.EncBinary()",1983],["yym8 := z.EncBinary()",1745],["yym13 := z.EncBinary()",1506],["yym16 := z.EncBinary()",1437],["yym15 := z.EncBinary()",1209]]},{"word":"EncSendContainerState","context":[["z.EncSendContainerState(codecSelfer_containerArrayElem1234)",51551],["z.EncSendContainerState(codecSelfer_containerMapKey1234)",48482],["z.EncSendContainerState(codecSelfer_containerMapValue1234)",48482],["z.EncSendContainerState(codecSelfer_containerArrayEnd1234)",12878],["z.EncSendContainerState(codecSelfer_containerMapEnd1234)",9809],["z.EncSendContainerState(codecSelfer_containerArrayElem1819)",144],["z.EncSendContainerState(codecSelfer_containerMapValue1819)",132],["z.EncSendContainerState(codecSelfer_containerMapKey1819)",132],["z.EncSendContainerState(codecSelfer_containerArrayElem9225)",91],["z.EncSendContainerState(codecSelfer_containerMapValue9225)",86]]},{"word":"Encode","context":[["urls += \"?\" + params.Encode()",35563],["urls += \"?\" + c.urlParams_.Encode()",23003],["\"subscriptionId\":    autorest.Encode(\"path\", client.SubscriptionID),",2736],["\"resourceGroupName\": autorest.Encode(\"path\", resourceGroupName),",2634],["\"name\":              autorest.Encode(\"path\", name),",1208],["uri += \"?\" + q.Encode()",619],["u.RawQuery = q.Encode()",547],["body, err := codec.Encode(item)",468],["\"subscriptionId\": autorest.Encode(\"path\", client.SubscriptionID),",403],["// Encode to wire format.",385]]},{"word":"EncodeString","context":[["r.EncodeString(codecSelferC_UTF81234, \"\")",14602],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["r.EncodeString(codecSelferC_UTF81234, string(x.Kind))",9708],["r.EncodeString(codecSelferC_UTF81234, string(\"apiVersion\"))",4865],["r.EncodeString(codecSelferC_UTF81234, string(\"kind\"))",4854],["r.EncodeString(codecSelferC_UTF81234, string(\"metadata\"))",3900],["r.EncodeString(codecSelferC_UTF81234, string(\"items\"))",1977],["r.EncodeString(codecSelferC_UTF81234, string(x.Name))",1636],["r.EncodeString(codecSelferC_UTF81234, string(\"status\"))",1583],["r.EncodeString(codecSelferC_UTF81234, string(x))",1560]]},{"word":"Equal","context":[["if !p.Equal(msg) {",19058],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["assert.Equal(t, err, nil)",3070],["Equal(t, errs, nil)",2843],["t.Fatalf(\"seed = %d, %#v !Json Equal %#v\", seed, msg, p)",2604],["assert.Equal(t, nil, err)",2349],["t.Fatalf(\"%#v !Face Equal %#v\", msg, p)",1945],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", this.Field1, that1.Field1)",1720],["assert.Equal(t,",1267]]},{"word":"Equals","context":[["c.Assert(ok, Equals, true)",3112],["c.Assert(ok, check.Equals, true)",2380],["c.Assert(recorder.Code, check.Equals, http.StatusOK)",1527],["c.Assert(err, Equals, nil)",1504],["c.Assert(response.StatusCode, Equals, http.StatusOK)",1480],["c.Assert(req.Method, Equals, \"GET\")",1226],["c.Assert(err, Equals, mgo.ErrNotFound)",1182],["\"NoUppercaseOrSpecialCharsLike=Equals\": \"bar\",",1123],["c.Assert(ok, Equals, false)",1067],["c.Assert(req.Header[\"Date\"], Not(Equals), \"\")",990]]},{"word":"Err","context":[["c.Err = result.Err",2829],["c.Err = result.Err",2829],["Err: false,",2712],["if err := scanner.Err(); err != nil {",2300],["Err: true,",1703],["Err error",1613],["return ctx.Err()",1349],["if r.Err != nil {",1296],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["c.Err.StatusCode = http.StatusForbidden",1282]]},{"word":"ErrUnexpectedEOF","context":[["return io.ErrUnexpectedEOF",285098],["return 0, io.ErrUnexpectedEOF",8985],["err = io.ErrUnexpectedEOF",1840],["return io1.ErrUnexpectedEOF",1480],["if err == io.ErrUnexpectedEOF {",431],["if err == io.EOF || err == io.ErrUnexpectedEOF {",271],["if err != io.ErrUnexpectedEOF {",267],["return nil, io.ErrUnexpectedEOF",246],["p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)",126],["case io.ErrUnexpectedEOF:",122]]},{"word":"Error","context":[["t.Error(err)",70002],["fmt.Println(err.Error())",36001],["return nil, &googleapi.Error{",24591],["// Print the error, cast err to awserr.Error to get the Code and",19219],["if awsErr, ok := err.(awserr.Error); ok {",14078],["// error which satisfies the awserr.Error interface.",11875],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881]]},{"word":"ErrorIsNil","context":[["c.Assert(err, jc.ErrorIsNil)",135421],["c.Check(err, jc.ErrorIsNil)",4766],["go func() { c.Check(a.Run(nil), jc.ErrorIsNil) }()",397],["defer func() { c.Check(a.Stop(), jc.ErrorIsNil) }()",388],["if !c.Check(err, jc.ErrorIsNil) {",166],["assert.ErrorIsNil(t, err)",120],["c.Check(a.Run(nil), jc.ErrorIsNil)",115],["c.Assert(env.Destroy(), jc.ErrorIsNil)",96],["c.Assert(env.Refresh(), jc.ErrorIsNil)",72],["c.Assert(err, jc.ErrorIsNil, gc.Commentf(\"body: %s\", body))",60]]},{"word":"Errorf","context":[["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["return fmt.Errorf(\"that == nil && this != nil\")",10119],["return fmt.Errorf(",7005],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["var _ = fmt.Errorf",5091],["t.Errorf(\"Unexpected error: %v\", err)",4881],["t.Errorf(\"expected success: %v\", errs)",4335],["return fmt.Errorf(\"Missing parameter\")",3920],["return nil, fmt.Errorf(",2987]]},{"word":"Exit","context":[["os.Exit(1)",55587],["os.Exit(0)",12708],["os.Exit(2)",8069],["os.Exit(-1)",3461],["defer nsqd.Exit()",1440],["Eventually(session).Should(gexec.Exit(0))",1260],["os.Exit(m.Run())",1112],["os.Exit(code)",742],["os.Exit(3)",604],["os.Exit(exitCode)",596]]},{"word":"Expect","context":[["Expect(err).NotTo(HaveOccurred())",60899],["Expect(err).ToNot(HaveOccurred())",23786],["Expect(err).To(HaveOccurred())",11730],["Expect(err).To(BeNil())",4880],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["Expect(ui.Outputs).To(ContainSubstrings(",3675],["Expect(ui.Outputs()).To(ContainSubstrings(",1652],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["Expect(err).ShouldNot(HaveOccurred())",1264],["Expect(sAdd.Err()).NotTo(HaveOccurred())",1249]]},{"word":"Expected","context":[["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, rule)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", day, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", month, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, r)",2151],["// \tt.Errorf(\"Expected '%d' Got '%d'\", expected, len(rules))",2142],["t.Errorf(\"Expected %v, got %v\", e, a)",1539],["// \tt.Errorf(\"Expected '<nil>' Got '%s'\", err)",1428],["t.Errorf(\"Expected success, got: %v\", err)",1047],["t.Errorf(\"Expected true\")",742]]},{"word":"FILE","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh",180],["{\"FILE\", \"/dir1/file\"},",164],["// NOTE: THIS FILE WAS PRODUCED BY THE",142],["// THIS FILE IS AUTO-GENERATED",141],["// FILE GENERATED BY BSONGEN.",113]]},{"word":"FROM","context":[["FROM busybox",6998],["`FROM busybox",5257],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",4268],["ctx, err := fakeContext(`FROM busybox",3613],["`FROM scratch",2417],["FROM scratch",1492],["FROM",1293],["LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",1136],["dockerfile := fmt.Sprintf(`FROM busybox",1135],["ctx, err := fakeContext(`FROM scratch",1040]]},{"word":"Failed","context":[["if t.Failed() {",852],["cmd.ui.Failed(err.Error())",838],["cmd.ui.Failed(apiErr.Error())",791],["t.Errorf(\"Failed to make a new Builder: %v\", err)",616],["t.Fatal(\"Failed to open database:\", err)",606],["PodFailed PodPhase = \"Failed\"",584],["Failf(\"Failed to create pod: %v\", err)",546],["t.Errorf(\"Failed to make a new Cleaner: %v\", err)",460],["VolumeFailed PersistentVolumePhase = \"Failed\"",453],["glog.Fatalf(\"Failed to create pod: %v, %v\", pod, err)",440]]},{"word":"Fatal","context":[["t.Fatal(err)",320011],["c.Fatal(err)",59126],["log.Fatal(err)",57914],["b.Fatal(err)",12630],["t.Fatal(pErr)",5297],["c.Fatal(err, out)",4659],["t.Fatal(err, out)",3858],["t.Fatal()",3333],["c.Fatal(out, err)",3059],["t.Fatal(err.Error())",2975]]},{"word":"Fatalf","context":[["t.Fatalf(\"err: %v\", err)",35496],["t.Fatalf(\"err: %s\", err)",35495],["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"Unexpected error: %v\", err)",6487],["t.Fatalf(\"%#v !VerboseProto %#v, since %v\", msg, p, err)",4373],["t.Fatalf(\"%#v !Proto %#v\", msg, p)",3759],["t.Fatalf(\"test init failed: %s\", err)",3640]]},{"word":"Field","context":[["&config.Field{",2872],["&element.Field{",1971],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"name\"),",1846],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"Field1\"),",1842],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"key\"),",1505],["Fields: []*influxql.Field{",1055],["type Field struct {",830],["Fields:     []*influxql.Field{{Expr: &influxql.Wildcard{}}},",661],["mproto.Field{",644],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"deprecated\"),",606]]},{"word":"Field1","context":[["if this.Field1 != nil && that1.Field1 != nil {",2873],["if *this.Field1 != *that1.Field1 {",2873],["if *this.Field1 != *that1.Field1 {",2873],["} else if this.Field1 != nil {",2873],["} else if that1.Field1 != nil {",2873],["if this.Field1 != nil && that1.Field1 != nil {",2873],["if m.Field1 != nil {",1848],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"Field1\"),",1842],["if this.Field1 != nil {",1809],["return this.Field1",1728]]},{"word":"Field2","context":[["if this.Field2 != nil && that1.Field2 != nil {",2021],["if this.Field2 != nil && that1.Field2 != nil {",2021],["if *this.Field2 != *that1.Field2 {",2021],["} else if this.Field2 != nil {",2021],["} else if that1.Field2 != nil {",2021],["if *this.Field2 != *that1.Field2 {",2021],["for i := range this.Field2 {",1798],["if len(this.Field2) != len(that1.Field2) {",1792],["if len(this.Field2) != len(that1.Field2) {",1792],["if this.Field2 != nil {",1609]]},{"word":"FieldDescriptorProto_Label","context":[["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:        func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",5450],["Label:        func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",5450],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",3364],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",3364],["Label:      func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",1176],["Label:      func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",1176]]},{"word":"FieldDescriptorProto_Type","context":[["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {",7090],["}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {",7090],["Type:         func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",4085],["Type:         func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",4085]]},{"word":"Fields","context":[["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["log.WithFields(log.Fields{",6101],["log.WithFields(logrus.Fields{",2648],["Fields: map[string]*framework.FieldSchema{",1271],["models.Fields{",1092],["logrus.WithFields(logrus.Fields{",1059],["Fields: []*influxql.Field{",1055],["Fields: graphql.Fields{",941],["Fields: graphql.Fields{",941]]},{"word":"File","context":[["type File struct {",2054],["* File Generated by enaml generator",1486],["var f *os.File",1148],["//     \"$ref\": \"File\"",1058],["var file *os.File",703],["// File",648],["// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",633],["File string",610],["fstestutil.File",453],["*os.File",416]]},{"word":"For","context":[["// For example:",2452],["// permissions. For more information on user permissions, see Managing User",1025],["For more about specifying packages, see 'go help packages'.",1006],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// For more information relating to the software or licensing issues please",819],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// For example if you run go-bindata on data/... and data contains the",699],["// Ex. For /dev/sda1, this field is \"1\", for /dev/sda, this field is 0 or empty.",627],["// or the resource may be deleted prior to this time. For example, a user may request that",613],["// For more information about ARNs, go to Amazon Resource Names (ARNs) and",608]]},{"word":"ForceSendFields","context":[["ForceSendFields []string `json:\"-\"`",39509],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["// ForceSendFields is a list of field names (e.g. \"Etag\") to",1561],["// ForceSendFields is a list of field names (e.g. \"Kind\") to",1476],["// ForceSendFields is a list of field names (e.g. \"Id\") to",1195],["// ForceSendFields is a list of field names (e.g.",1171]]},{"word":"Format","context":[["Format:      \"\",",28082],["Format:      \"int32\",",9626],["Format: \"\",",5183],["Format:      \"int64\",",1709],["// Format implements the NodeFormatter interface.",1170],["Format:      errorsBody,",566],["Format string `json:\"format,omitempty\"`",549],["// Format formats the node.",548],["Format:      \"byte\",",396],["Format string",371]]},{"word":"Fprintf","context":[["if _, err := fmt.Fprintf(w, \"%s\\t\", namespace); err != nil {",2228],["fmt.Fprintf(os.Stderr, \"Usage:\\n\\t%s\\n\", usageBits)",1957],["fmt.Fprintf(cli.err, \"%s\\n\", err)",1250],["fmt.Fprintf(os.Stderr, \"%v\\n\", err)",998],["fmt.Fprintf(w, `",885],["fmt.Fprintf(out, \"\\n\")",878],["fmt.Fprintf(cli.out, \"%s\\n\", name)",695],["fmt.Fprintf(w, \"\\n\")",636],["fmt.Fprintf(os.Stderr, \"Usage of %s:\\n\", os.Args[0])",533],["fmt.Fprintf(w, \"null\")",511]]},{"word":"From","context":[["From: &kapi.ObjectReference{",2099],["p.From.Type = obj.TYPE_REG",1543],["p.From.Type = obj.TYPE_MEM",1433],["p.From.Type = obj.TYPE_CONST",1138],["if in.From != nil {",902],["if newVal, err := c.DeepCopy(in.From); err != nil {",875],["out.From = nil",851],["From: kapi.ObjectReference{",797],["p.From.Offset = 0",595],["r := int(p.From.Reg)",563]]},{"word":"GENERATED","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["// AUTO-GENERATED FUNCTIONS END HERE",569],["// AUTO-GENERATED FUNCTIONS START HERE",569],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh",180],["// AUTO-GENERATED CODE. DO NOT EDIT.",171]]},{"word":"GET","context":[["//   \"httpMethod\": \"GET\",",28210],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["Method: \"GET\",",6521],["HTTPMethod: \"GET\",",5113],["case \"GET\":",2848],["testMethod(t, r, \"GET\")",2236],["\"GET\",",1965],["if r.Method != \"GET\" {",1744],["req, err := s.client.NewRequest(\"GET\", u, nil)",1695],["req, err := http.NewRequest(\"GET\", url, nil)",1508]]},{"word":"GNU","context":[["// You should have received a copy of the GNU Lesser General Public License",5180],["// it under the terms of the GNU Lesser General Public License as published by",5114],["// GNU Lesser General Public License for more details.",5096],["// GNU General Public License for more details.",4206],["// You should have received a copy of the GNU General Public License",4154],["GNU General Public License for more details.",3592],["You should have received a copy of the GNU General Public License",3440],["it under the terms of the GNU General Public License as published by",3388],["// it under the terms of the GNU General Public License as published by",3289],["* GNU General Public License for more details.",3105]]},{"word":"General","context":[["// You should have received a copy of the GNU Lesser General Public License",5180],["// it under the terms of the GNU Lesser General Public License as published by",5114],["// GNU Lesser General Public License for more details.",5096],["// GNU General Public License for more details.",4206],["// You should have received a copy of the GNU General Public License",4154],["GNU General Public License for more details.",3592],["You should have received a copy of the GNU General Public License",3440],["it under the terms of the GNU General Public License as published by",3388],["// it under the terms of the GNU General Public License as published by",3289],["* GNU General Public License for more details.",3105]]},{"word":"Get","context":[["return &Result{r.Header.Get(HEADER_REQUEST_ID),",2607],["defer c.PageToken(c.urlParams_.Get(\"pageToken\")) // reset paging to original point",2234],["if ret.Get(0) != nil {",2138],["resp, err := http.Get(url)",1999],["err = c.client.Get().",1940],["ui := state.Get(\"ui\").(packer.Ui)",1512],["name := d.Get(\"name\").(string)",1300],["deployment, err := c.Extensions().Deployments(ns).Get(deploymentName)",1249],["return c.client.Get().",1029],["loc := res.Header.Get(\"Location\")",853]]},{"word":"Go","context":[["// Copyright 2009 The Go Authors. All rights reserved.",12923],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["// Copyright 2013 The Go Authors. All rights reserved.",5102],["// Copyright 2014 The Go Authors. All rights reserved.",4299],["// Copyright 2015 The Go Authors. All rights reserved.",4037],["// Copyright 2012 The Go Authors. All rights reserved.",3541],["// Copyright 2010 The Go Authors. All rights reserved.",2910],["// Copyright 2011 The Go Authors.  All rights reserved.",2506],["// Copyright 2010 The Go Authors.  All rights reserved.",2034],["// Copyright 2012 The Go Authors.  All rights reserved.",1772]]},{"word":"GoString","context":[["// GoString returns the string representation",113945],["s1 := p.GoString()",3251],["t.Fatalf(\"GoString want %v got %v\", s1, s2)",3251],["ss = append(ss, strconv.Itoa(k)+\": \"+e[int32(k)].GoString())",925],["func (s Tag) GoString() string {",476],["__err__ = errors.New(C.GoString((*C.char)(unsafe.Pointer(__cgo_error__.message))))",297],["return__ = C.GoString((*C.char)(unsafe.Pointer(__cgo__return__)))",196],["return C.GoString((*C.char)(c))",194],["s = append(s, \"Left: \"+strings.Replace(this.Left.GoString(), `&`, ``, 1)+\",\\n\")",177],["s = append(s, \"Right: \"+strings.Replace(this.Right.GoString(), `&`, ``, 1)+\",\\n\")",177]]},{"word":"GoogleCloudPlatform","context":[["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/runtime\"",4552],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/labels\"",4329],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"",2752],["kapi \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",2656],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/fields\"",2585],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/watch\"",2108],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api/errors\"",1455],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/types\"",1209]]},{"word":"Got","context":[["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, r)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", day, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, rule)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", month, s)",2151],["// \tt.Errorf(\"Expected '%d' Got '%d'\", expected, len(rules))",2142],["// \tt.Errorf(\"Expected '<nil>' Got '%s'\", err)",1428],["t.Fatalf(\"expected pod status %q. Got %q.\", api.PodFailed, status.Phase)",760],["t.Fatalf(\"Got error GETing: %v\", err)",744],["t.Errorf(\"Expected '%s' Got '%s'\", expected, trans.Locale())",718]]},{"word":"HTTP","context":[["// pending HTTP request will be aborted if the provided context is",22537],["// ServerResponse contains the HTTP response code and headers from the",13928],["// Any pending HTTP request will be aborted if the provided context",4780],["// add HTTP headers to the request.",3239],["e, ok := err.(*errors.HTTP)",1258],["if x.HTTP == nil {",1000],["// HTTPGetAction describes an action based on HTTP Get requests.",717],["// Get HTTP response",614],["// Optional: Path to access on the HTTP server.",541],["x.HTTP = nil",500]]},{"word":"Handler","context":[["type Handler struct {",1714],["Handler: api.Handler{",1621],["Handler: api.Handler{",1621],["PreStop: &api.Handler{",1161],["m.Handler.ServeHTTP(w, req)",913],["type Handler interface {",792],["// Handler defines a specific action that should be taken",716],["Handler: s.srv,",587],["Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {",555],["Handler: mux,",555]]},{"word":"HaveOccurred","context":[["Expect(err).NotTo(HaveOccurred())",60899],["Expect(err).ToNot(HaveOccurred())",23786],["Ω(err).ShouldNot(HaveOccurred())",12297],["Expect(err).To(HaveOccurred())",11730],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["Ω(err).Should(HaveOccurred())",2915],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["Expect(err).ShouldNot(HaveOccurred())",1264],["Expect(sAdd.Err()).NotTo(HaveOccurred())",1249],["Expect(set.Err()).NotTo(HaveOccurred())",1016]]},{"word":"Header","context":[["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["Header: res.Header,",24619],["Header: res.Header,",24619],["Header:         res.Header,",24578],["Header:         res.Header,",24578],["req.Header.Set(\"Content-Type\", ctype)",17612],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["reqHeaders := make(http.Header)",11911],["req.Header = reqHeaders",11905],["w.Header().Set(\"Content-Type\", \"application/json\")",11021]]},{"word":"Host","context":[["out.Host = in.Host",2954],["out.Host = in.Host",2954],["Host string",1503],["Host string `json:\"host,omitempty\"`",1166],["Host     string",676],["// Host name on which the event is generated.",628],["Host: \"machine\",",525],["client := client.NewOrDie(&client.Config{Host: testServer.URL, Version: testapi.Version()})",496],["type Host struct {",477],["Host   string",459]]},{"word":"ID","context":[["ID = foo",3453],["ID: \"bar\",",2962],["//       \"description\": \"User profile ID associated with this request.\",",2944],["if rs.Primary.ID == \"\" {",2344],["//       \"description\": \"Project ID for this request.\",",2204],["ID string",2161],["ID: \"foo\",",2032],["ID := \"id\"",1380],["//       \"description\": \"The ID of the file.\",",1377],["// The ID of the instance.",1299]]},{"word":"IP","context":[["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["out.IP = in.IP",1637],["out.IP = in.IP",1637],["Addresses: []api.EndpointAddress{{IP: \"10.10.1.1\"}},",1002],["Addresses: []api.EndpointAddress{{IP: \"127.0.0.1\"}},",705],["var ip net.IP",704],["ip = v.IP",638],["Addresses: []api.EndpointAddress{{IP: \"1.2.3.4\"}},",595],["// EndpointAddress is a tuple that describes single IP address.",594],["// The IP of this endpoint.",594]]},{"word":"IS","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",2059],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",2004]]},{"word":"Id","context":[["Id string `json:\"id,omitempty\"`",11055],["resourceMap[rsc.Id] = &rsc",4960],["Id int64 `json:\"id,omitempty,string\"`",1611],["Id uint64 `json:\"id,omitempty,string\"`",1413],["// Id: Unique identifier for the resource; defined by the server (output",1255],["// ForceSendFields is a list of field names (e.g. \"Id\") to",1195],["// Id: [Output Only] Unique identifier for the resource; defined by the",1058],["Id:     0,",900],["Id string",834],["if m != nil && m.Id != nil {",614]]},{"word":"If","context":[["// access properties on the request object before or after sending the request. If",13378],["// actually making the request, and provides an error response. If you have",6922],["reqHeaders.Set(\"If-None-Match\", c.ifNoneMatch_)",5123],["req.Header.Set(\"If-None-Match\", c.ifNoneMatch_)",4859],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",2506],["// If we have a async client, we need to wait for the async result",2363],["// If additional configuration is needed for the client instance use the optional",2272],["req.Header.Set(\"If-None-Match\", fmt.Sprintf(\"%v\", v))",2132],["// License, v. 2.0. If a copy of the MPL was not distributed with this",2028]]},{"word":"Image","context":[["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745],["Image: \"image\",",3558],["out.Image = in.Image",2154],["out.Image = in.Image",2154],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["type Image struct {",1490],["Image: image,",1067],["Image: \"foo:V2\",",941],["Image: \"foo:V1\",",848],["Image:   \"gcr.io/google_containers/busybox:1.24\",",807]]},{"word":"In","context":[["// error from Do is the result of In-None-Match.",12114],["p.In()",2917],["g.In()",1775],["\"operator\": \"In\",",1675],["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["t.Errorf(\"In test %s, expected %v, got %v\", test.test, test.status, status)",596],["// Length of time before health checking is activated.  In seconds.",555],["// In case of failure or too long waiting time, an error is returned.",500],["// available. In that case, the IsTruncated response element returns true and",494]]},{"word":"Inc","context":[["Copyright 2014 Google Inc. All rights reserved.",7127],["// Copyright 2015 CoreOS, Inc.",4736],["// Copyright 2015 Google Inc. All Rights Reserved.",2464],["// Copyright 2012, Google Inc. All rights reserved.",2286],["// Copyright 2014 Google Inc. All Rights Reserved.",2029],["//  Copyright (c) 2014 Couchbase, Inc.",1983],["// Copyright 2015 PingCAP, Inc.",1714],["//     * Neither the name of Google Inc. nor the names of its",1251],["//\tCopyright © 1994-1999 Lucent Technologies Inc.  All rights reserved.",1190],["Copyright 2011 Google Inc.",1187]]},{"word":"Index","context":[["idxPath := fldPath.Index(i)",1258],["pixels_ptr = unsafe.Pointer(pixels_v.Index(0).Addr().Pointer())",558],["// StartIndex sets the optional parameter \"startIndex\": Index of the",553],["data_ptr = unsafe.Pointer(data_v.Index(0).Addr().Pointer())",552],["type Index struct {",543],["Index: &IndexInfo{",528],["Index int",461],["Index: 0,",450],["Index     uint16",425],["portPath := portsPath.Index(i)",420]]},{"word":"Info","context":[["return &cmd.Info{",2169],["type Info struct {",1021],["Info: mongo.Info{",565],["Info: mongo.Info{",565],["return &Info{",334],["glog.Info(message)",328],["glog.Info(\"Starting kubelet main sync loop.\")",299],["// Info implements Command.Info.",297],["// Info implements Command.Info.",297],["Info: map[string]api.ContainerStatus{",293]]},{"word":"Infof","context":[["eventBroadcaster.StartLogging(glog.Infof)",824],["glog.V(4).Infof(\"%v\", err)",356],["glog.V(10).Infof(",350],["glog.Infof(\"Starting %s apis\", groupVersion)",339],["glog.V(5).Infof(\"pod default case, pending\")",300],["glog.V(5).Infof(\"pod waiting > 0, pending\")",300],["glog.V(3).Infof(\"First seen time not recorded for pod %q\", pod.UID)",267],["glog.V(4).Infof(\"Cannot get host IP: %v\", err)",254],["glog.Infof(\"Successfully registered node %s\", node.Name)",249],["glog.V(3).Infof(\"Container %+v is dead, but RestartPolicy says that we should restart it.\", container)",249]]},{"word":"Int","context":[["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int:",1154],["case Int:",924],["jret, err := jbobject.CallMethod(javabind.GetEnv(), \"hashCode\", javabind.Int)",542],["case *big.Int:",539],["stack.push(new(big.Int))",364],["return v.Int() == 0",357],["case intstr.Int:",296],["serialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)",288],["return strconv.Itoa(r.Int() % 10000)",286]]},{"word":"Interface","context":[["client.Interface",3831],["WatchFunc: func(options api.ListOptions) (watch.Interface, error) {",2695],["case reflect.Interface:",2140],["pv := reflect.Indirect(rv).Interface()",2042],["type Interface interface {",1231],["// Implements storage.Interface.",1204],["Watch(opts api.ListOptions) (watch.Interface, error)",805],["mounter mount.Interface",721],["WatchFunc: func(resourceVersion string) (watch.Interface, error) {",693],["cloud cloudprovider.Interface,",639]]},{"word":"Intn","context":[["if r.Intn(10) != 0 {",25630],["if r.Intn(2) == 0 {",14164],["if !easy && r.Intn(10) != 0 {",7528],["data[i] = byte(popr.Intn(256))",6917],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["littlefuzz = append(littlefuzz, byte(popr.Intn(256)))",2720],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["dAtA[i] = byte(popr.Intn(256))",1663],["l := r.Intn(5)",1125],["wire := r.Intn(4)",1125]]},{"word":"IsNil","context":[["c.Assert(err, IsNil)",104368],["c.Assert(err, check.IsNil)",82873],["c.Assert(err, gc.IsNil)",75298],["c.Assert(err, checker.IsNil)",16743],["c.Assert(err, test.IsNil)",3451],["c.Assert(err, check.IsNil, check.Commentf(out))",3044],["if rv.IsNil() {",2691],["c.Check(err, IsNil)",2456],["if v.IsNil() {",2111],["c.Check(err, gc.IsNil)",2043]]},{"word":"It","context":[["// null. It is an error if a field in this list has a non-empty value.",4930],["It has these top-level messages:",4689],["It is generated from these files:",4689],["It(\"returns an error\", func() {",3968],["// It is not safe to mutate any of the client's properties though.",2270],["// It returns an error if the asset could not be found or",1384],["It(\"should return an error\", func() {",1264],["// manage many different YouTube channels. It allows content owners to",1127],["It(\"returns the error\", func() {",1113],["It(\"should error\", func() {",1030]]},{"word":"Items","context":[["if in.Items != nil {",23966],["out.Items = nil",23672],["for i := range in.Items {",16680],["Items: &spec.SchemaOrArray{",9724],["in, out := &in.Items, &out.Items",5468],["in, out := &in.Items, &out.Items",5468],["if x.Items == nil {",3954],["x.Items = nil",3954],["if len(m.Items) > 0 {",3369],["for _, pod := range pods.Items {",3348]]},{"word":"JSON","context":[["// requests with the JSON null value. By default, fields with empty",2096],["// API requests with the JSON null value. By default, fields with empty",1737],["t.Fatalf(\"marshaling to JSON failed: %v\", err)",1208],["r.JSON(200, &APIResponse{Code: ERROR, Message: err.Error()})",1126],["// in API requests with the JSON null value. By default, fields with",1097],["req.SetFormat(\"JSON\")",831],["// include in API requests with the JSON null value. By default, fields",819],["c.JSON(",812],["r.JSON(200, &APIResponse{Code: ERROR, Message: \"Unauthorized\"})",795],["ctx.JSON(200, map[string]interface{}{",778]]},{"word":"Join","context":[["return strings.Join(s, \"\")",8387],["usageBits += \" @\" + strings.Join(pathParams, \"@\")",1597],["usageBits += \" \" + strings.Join(pathParams, \"/\")",1597],["test.write = strings.Join(writes, \"\\n\")",996],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["&Write{data: strings.Join(writes, \"\\n\")},",912],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["vv := strings.Join(v.([]string), \",\")",587],["err = RestoreAssets(dir, filepath.Join(name, child))",496],["if err := ioutil.WriteFile(filepath.Join(tmpDir, \"Dockerfile\"), []byte(dockerfile), 0644); err != nil {",492]]},{"word":"KIND","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",2078],["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",1295],["KIND, either express or implied.  See the License for the",956],["//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",598]]},{"word":"Key","context":[["out.Key = in.Key",2253],["out.Key = in.Key",2253],["Key          string `json:\"key,omitempty\"`",1941],["Key   string",1642],["Key string `json:\"key,omitempty\"`",1446],["Key string",1384],["return fmt.Errorf(\"proto: wrong wireType = %d for field Key\", wireType)",1029],["Key: key,",981],["l = len(m.Key)",934],["if m.Key != nil {",904]]},{"word":"Kind","context":[["Kind string `json:\"kind,omitempty\"`",30419],["x.Kind = \"\"",9708],["r.EncodeString(codecSelferC_UTF81234, string(x.Kind))",9708],["x.Kind = string(r.DecodeString())",9708],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["out.Kind = in.Kind",3210],["out.Kind = in.Kind",3210],["switch v.Kind() {",3093],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["Kind: \"DockerImage\",",2046]]},{"word":"Kubernetes","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["Copyright 2016 The Kubernetes Authors.",11842],["Copyright 2014 The Kubernetes Authors.",5369],["Copyright 2015 The Kubernetes Authors.",5172],["Copyright 2016 The Kubernetes Authors All rights reserved.",4483],["// NodeRunning means the node has been configured and has Kubernetes components running.",678],["// The following identify resource constants for Kubernetes object types",646],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// PersistentVolumeReclaimDelete means the volume will be deleted from Kubernetes on release from its claim.",454]]},{"word":"LICENSE","context":[["// license that can be found in the LICENSE file.",96872],["http://www.apache.org/licenses/LICENSE-2.0",79621],["//     http://www.apache.org/licenses/LICENSE-2.0",43271],["// http://www.apache.org/licenses/LICENSE-2.0",7463],["//    http://www.apache.org/licenses/LICENSE-2.0",5528],["*     http://www.apache.org/licenses/LICENSE-2.0",4447],["// that can be found in the LICENSE file.",3572],["//      http://www.apache.org/licenses/LICENSE-2.0",3481],["// found in the LICENSE file.",3453],["//   http://www.apache.org/licenses/LICENSE-2.0",1485]]},{"word":"Label","context":[["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:        func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",5450],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",3364],["Label:      func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",1176],["Label:   func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",958],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",952],["Label:   func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",524],["Label: label,",516],["type Label struct {",503]]},{"word":"Labels","context":[["Labels: map[string]string{",9863],["Labels: validSelector,",2325],["Labels: map[string]string{\"foo\": \"baz\"},",1743],["if in.Labels != nil {",1300],["out.Labels = nil",1282],["for key, val := range in.Labels {",1113],["out.Labels[key] = val",1113],["out.Labels = make(map[string]string)",1113],["Labels: labels,",1064],["Labels: map[string]string{\"bar\": \"foo\"},",843]]},{"word":"Len","context":[["if invalidParams.Len() > 0 {",18392],["Len() int",1292],["for i := 0; i < v.Len(); i++ {",962],["if buf.Len() > 0 {",825],["Len    uint8",617],["if vr.Len() == -1 {",616],["l := s.Len()",587],["return v.Len() == 0",417],["Len   uint32",363],["for i := 0; i < value.Len(); i++ {",326]]},{"word":"License","context":[["See the License for the specific language governing permissions and",78733],["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["you may not use this file except in compliance with the License.",78263],["limitations under the License.",78218],["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["You may obtain a copy of the License at",78110],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["// Licensed under the Apache License, Version 2.0 (the \"License\");",56516],["// Licensed under the Apache License, Version 2.0 (the \"License\");",56516]]},{"word":"Licensed","context":[["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["// Licensed under the Apache License, Version 2.0 (the \"License\");",56516],["// Licensed under the AGPLv3, see LICENCE file for details.",24944],["* Licensed under the Apache License, Version 2.0 (the \"License\");",5894],["//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file",2295],["// Licensed under the Apache License, Version 2.0 (the \"License\"): you may",1772],["// Licensed under the MIT (MIT-LICENSE.txt) license.",1372],["// Licensed under the LGPLv3, see LICENCE file for details.",1137],["* Licensed to the Apache Software Foundation (ASF) under one",1018],["Licensed to the Apache Software Foundation (ASF) under one",974]]},{"word":"List","context":[["type List struct {",1253],["for _, m := range s.Store.List() {",758],["// List holds a list of objects, which may not be known by the server.",680],["// ListSender sends the List request. The method will close the",644],["// ListPreparer prepares the List request.",644],["// ListResponder handles the response to the List request. The method always",644],["for l := n.List; l != nil; l = l.Next {",594],["nodes, err := c.Nodes().List(api.ListOptions{})",500],["pods, err := c.Pods(ns).List(options)",491],["for _, container := range daemon.List() {",431]]},{"word":"ListMeta","context":[["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {",4658],["if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {",4658],["if newVal, err := c.DeepCopy(in.ListMeta); err != nil {",2640],["x.ListMeta = pkg1_unversioned.ListMeta{}",2630],["x.ListMeta = pkg1_unversioned.ListMeta{}",2630],["if err := s.Convert(&in.ListMeta, &out.ListMeta, 0); err != nil {",2491],["if err := s.Convert(&in.ListMeta, &out.ListMeta, 0); err != nil {",2491],["if err := deepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {",2382],["if err := deepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {",2382]]},{"word":"Lock","context":[["s.mu.Lock()",10333],["c.Lock()",7772],["oprw.Lock()",6518],["c.mu.Lock()",5243],["r.mu.Lock()",3787],["n.Lock()",3742],["mu.Lock()",3715],["f.Lock()",3638],["s.Lock()",3498],["p.mu.Lock()",2988]]},{"word":"Logf","context":[["t.Logf(\"SKIP:: %s\", query.name)",3861],["t.Logf(\"Running %d tests\", len(tests))",1686],["t.Logf(\"case %v\", r)",1588],["c.Logf(\"test %d\", i)",1174],["Logf(\"RC %s was already deleted: %v\", name, err)",720],["c.Logf(\"test %d: %s\", i, test.about)",599],["Logf(\"ReplicaSet %s was already deleted: %v\", name, err)",405],["Logf(\"%-[1]*[2]s %-[3]*[4]s %-[5]*[6]s %-[7]*[8]s %[9]s\",",382],["t.Logf(\"%#v vs %#v\", test.oldNamespace.ObjectMeta, test.namespace.ObjectMeta)",358],["Logf(\"Error getting pods in namespace '%s': %v\", ns, err)",351]]},{"word":"M","context":[["func TestMain(m *testing.M) {",2413],["// \texpected: \"M\",",2142],["M{",1456],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["\"machines\": M{",1234],["\"units\": M{",1194],["\"workload-status\": M{",965],["err = coll.Insert(M{\"n\": 1})",941],["bson.M{",934],["\"juju-status\": M{",789]]},{"word":"Marshal","context":[["data, err := github_com_gogo_protobuf_proto.Marshal(p)",7723],["var _ = proto.Marshal",6750],["// END Marshal arguments into request.",2807],["// BEGIN Marshal arguments into request.",2807],["dAtA, err := github_com_gogo_protobuf_proto.Marshal(p)",2753],["data, err := github_com_gogo_protobuf_proto.Marshal(pops[i%10000])",2392],["return json.Marshal(struct {",911],["buf, err = json.Marshal(s)",822],["t.Fatalf(\"Marshal: %v\", err)",804],["jsondata, err := encoding_json.Marshal(p)",713]]},{"word":"MarshalJSON","context":[["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["var _ = gensupport.MarshalJSON",1223],["// MarshalJSON returns the JSON encoding of cmd.  Part of the Cmd interface.",384],["// MarshalJSON implements json.Marshaler.",346],["func (s *Operation) MarshalJSON() ([]byte, error) {",264],["var _ = internal.MarshalJSON",259],["// MarshalJSON implements the json.Marshaler interface.",247],["MarshalJSON() ([]byte, error)",199]]},{"word":"MarshalTo","context":[["n, err := m.MarshalTo(data)",28284],["n, err := msg.MarshalTo(data[i:])",7225],["_, err := p.MarshalTo(data)",2040],["n, err := m.MarshalTo(dAtA)",1753],["MarshalTo([]byte) (int, error)",497],["_, err := p.MarshalTo(dAtA)",442],["n, err := msg.MarshalTo(dAtA[i:])",347],["n1, err := m.ObjectMeta.MarshalTo(data[i:])",220],["n3, err := m.Status.MarshalTo(data[i:])",158],["n2, err := m.Spec.MarshalTo(data[i:])",158]]},{"word":"Message","context":[["// Message from an error.",19226],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["out.Message = in.Message",7924],["out.Message = in.Message",7924],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// Generic AWS error with Code, Message, and original error (if any)",6209],["Proto() github_com_gogo_protobuf_proto.Message",4822],["Message string `json:\"message,omitempty\"`",4362]]},{"word":"Method","context":[["Method: \"GET\",",6521],["Method: \"POST\",",2352],["switch r.Method {",1962],["if r.Method != \"POST\" {",1819],["if r.Method != \"GET\" {",1744],["if req.Method != \"POST\" {",1522],["Method: \"PUT\",",1410],["Method:  \"POST\",",1397],["switch p, m := req.URL.Path, req.Method; {",1250],["c.Assert(req.Method, Equals, \"GET\")",1226]]},{"word":"Millisecond","context":[["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(10 * time.Millisecond)",4236],["time.Sleep(500 * time.Millisecond)",2724],["time.Sleep(50 * time.Millisecond)",2719],["time.Sleep(time.Millisecond)",1937],["time.Sleep(200 * time.Millisecond)",1366],["case <-time.After(100 * time.Millisecond):",1295],["time.Sleep(5 * time.Millisecond)",1183],["time.Sleep(1 * time.Millisecond)",836],["time.Sleep(20 * time.Millisecond)",809]]},{"word":"More","context":[["// More values...",27171],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["// More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",821],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",676]]},{"word":"N","context":[["for i := 0; i < b.N; i++ {",52243],["b.SetBytes(int64(total / b.N))",10167],["for n := 0; n < b.N; n++ {",3284],["for i := 0; i < N; i++ {",3004],["result := struct{ N int }{}",936],["for i := 0; i < c.N; i++ {",802],["// \texpected: \"N\",",714],["c.Assert(result.N, Equals, ns[i])",636],["p.populate(b.N)",485],["n = l.N",481]]},{"word":"NOT","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT!",8164],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",4344],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",2004],["// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",1933],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",1423],["// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",1286],["IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",1154]]},{"word":"Name","context":[["Name string",15267],["out.Name = in.Name",14366],["out.Name = in.Name",14366],["Name string `json:\"name,omitempty\"`",13075],["Name: \"foo\",",9020],["Name string `json:\"name\"`",6733],["Name:      \"foo\",",6661],["Name: name,",5258],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914]]},{"word":"Namespace","context":[["Namespace(c.ns).",6159],["Namespace: \"ns\",",5327],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["Namespace: \"new\",",4835],["Namespace: api.NamespaceDefault,",4787],["Namespace: \"foo\",",3367],["out.Namespace = in.Namespace",3187],["out.Namespace = in.Namespace",3187],["Namespace: namespace,",2981],["ObjectMeta: api.ObjectMeta{Name: \"mysvc\", Namespace: \"namespace\"},",2388]]},{"word":"New","context":[["trans := New()",18652],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(616))",9510],["assert := assert.New(t)",8568],["svc := ec2.New(nil)",4408],["return nil, errors.New(\"client is nil\")",3069],["var _ = errors.New",3068],["func New(client *http.Client) (*Service, error) {",3045],["svc := ec2.New(session.New())",2581]]},{"word":"NewDecoder","context":[["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["var _ = json.NewDecoder",2852],["if err := json.NewDecoder(res.Body).Decode(ret); err != nil {",1930],["decoder := json.NewDecoder(r.Body)",1255],["dec := json.NewDecoder(resp.Body)",959],["decoder := json.NewDecoder(resp.Body)",765],["decoder := json.NewDecoder(file)",634],["dec := NewDecoder(b)",580],["decoder := json.NewDecoder(data)",501]]},{"word":"NewReader","context":[["config, err = DecodeConfig(bytes.NewReader([]byte(input)))",1336],["reader := bufio.NewReader(os.Stdin)",1136],["gz, err := gzip.NewReader(bytes.NewBuffer(data))",574],["authJson := base64.NewDecoder(base64.URLEncoding, strings.NewReader(authEncoded))",465],["r := bufio.NewReader(f)",410],["reader := bufio.NewReader(file)",407],["rbuf := bytes.NewReader(test.buf)",406],["bodyBytes := bytes.NewReader([]byte(r.body))",399],["reader := bufio.NewReader(conn)",389],["r := bytes.NewReader(gzipped)",367]]},{"word":"NewRequest","context":[["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["req, _ := http.NewRequest(\"DELETE\", urls, body)",6246],["req, _ := http.NewRequest(\"PUT\", urls, body)",4835],["req, _ := http.NewRequest(\"PATCH\", urls, body)",3818],["req := c.NewRequest(op, params, data)",2823],["req, err := s.client.NewRequest(\"GET\", u, nil)",1695],["req, err := http.NewRequest(\"GET\", url, nil)",1508],["req := aws.NewRequest(c.Service, op, params, data)",1394],["request, _ := http.NewRequest(\"POST\", path, nil)",904]]},{"word":"Next","context":[["for rows.Next() {",9517],["for pb.Next() {",2058],["c.Next()",1946],["ok := iter.Next(&result)",1224],["if rows.Next() {",1198],["for iter.Next() {",920],["for it.Next() {",826],["hdr, err := tr.Next()",818],["for ; l != nil; l = l.Next {",758],["if !rows.Next() {",729]]},{"word":"NoError","context":[["assert.NoError(t, err)",27740],["require.NoError(t, err)",22318],["if assert.NoError(t, err) {",5588],["assert.NoError(t, req.Error)",4830],["assert.NoError(err)",2480],["if !assert.NoError(err) {",1322],["NoError(t, err)",600],["a.NoError(err)",472],["require.NoError(err)",446],["if !assert.NoError(t, err) {",425]]},{"word":"Node","context":[["Node: &etcd.Node{",3557],["Node: &etcd.Node{",3557],["type Node struct {",2879],["{api.Node{",2291],["}, api.Node{",2097],["var n1 Node",1257],["Node",1235],["Existing: []*api.Node{",1156],["var n1 gc.Node",1078],["Nodes: []*etcd.Node{",1056]]},{"word":"Not","context":[["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["// Not applicable on Windows as uses Unix specific functionality",2299],["panic(\"Not implemented\")",2092],["return fmt.Errorf(\"Not found: %s\", n)",1966],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", this.Field1, that1.Field1)",1720],["return fmt.Errorf(\"Field2 this(%v) Not Equal that(%v)\", this.Field2, that1.Field2)",1170],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", *this.Field1, *that1.Field1)",1105],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["c.Assert(req.Header[\"Date\"], Not(Equals), \"\")",990],["return fmt.Errorf(\"Field3 this(%v) Not Equal that(%v)\", this.Field3, that1.Field3)",983]]},{"word":"NotTo","context":[["Expect(err).NotTo(HaveOccurred())",60899],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["Expect(sAdd.Err()).NotTo(HaveOccurred())",1249],["Expect(set.Err()).NotTo(HaveOccurred())",1016],["Expect(apiErr).NotTo(HaveOccurred())",846],["Expect(rPush.Err()).NotTo(HaveOccurred())",725],["Expect(get.Err()).NotTo(HaveOccurred())",427],["Expect(lRange.Err()).NotTo(HaveOccurred())",417],["Expect(hSet.Err()).NotTo(HaveOccurred())",379]]},{"word":"Note","context":[["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// Note: This operation can generate multiple requests to a service.",1419],["// \"onBehalfOfContentOwner\": Note: This parameter is intended",1178],["// Note that IAM might return fewer results, even when there are more results",572],["// request parameter to retrieve more items. Note that IAM might return fewer",550],["// Note that this is calculated from dead containers.  But those containers are subject to",517],["// Note that we pass all pods (including terminated pods) to the function,",470],["//  Note that you are welcome to modify this code under the condition that you do not remove any",466],["// properly authorized request. Note: This parameter is intended",440],["// the deleted key/value. Note that this value might be stale. If the pod",380]]},{"word":"Now","context":[["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["seed := time.Now().UnixNano()",14884],["start := time.Now()",12562],["now := time.Now()",10458],["startTime := time.Now()",4663],["rand.Seed(time.Now().UnixNano())",2847],["t := time.Now()",2723],["t0 := time.Now()",1930],["rand.Seed(time.Now().UTC().UnixNano())",1780],["now := unversioned.Now()",1409]]},{"word":"Number","context":[["Number:   func(v int32) *int32 { return &v }(1),",6114],["Number:   func(v int32) *int32 { return &v }(2),",5407],["Number:   func(v int32) *int32 { return &v }(3),",2702],["Number: func(v int32) *int32 { return &v }(1),",2422],["Number: func(v int32) *int32 { return &v }(2),",2031],["Number:   func(v int32) *int32 { return &v }(4),",1907],["Number:   func(v int32) *int32 { return &v }(8),",1542],["Number:   func(v int32) *int32 { return &v }(6),",1510],["Number:   func(v int32) *int32 { return &v }(7),",1470],["Number:   func(v int32) *int32 { return &v }(999),",1414]]},{"word":"OF","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",4344],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",4268],["// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",3886],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",2078]]},{"word":"OR","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",4342],["// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",4342],["// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",4268],["// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",3886],["// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",3886]]},{"word":"Object","context":[["ListFunc: func(options api.ListOptions) (runtime.Object, error) {",2282],["ListFunc: func() (runtime.Object, error) {",1635],["//     \"$ref\": \"Object\"",1124],["ObjectNameFunc: func(obj runtime.Object) (string, error) {",1101],["obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}",1098],["mapper, typer := f.Object()",1071],["type Object struct {",973],["func(obj runtime.Object) runtime.Object {",928],["func(obj runtime.Object) runtime.Object {",928],["runtime.SetFinalizer(obj, (*glib.Object).Unref)",747]]},{"word":"ObjectMeta","context":[["ObjectMeta: api.ObjectMeta{",69360],["ObjectMeta: api.ObjectMeta{",69360],["ObjectMeta: kapi.ObjectMeta{",10395],["ObjectMeta: kapi.ObjectMeta{",10395],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["ObjectMeta `json:\"metadata,omitempty\"`",4422],["if newVal, err := c.DeepCopy(in.ObjectMeta); err != nil {",3124]]},{"word":"Op","context":[["switch n.Op {",3471],["ops := []txn.Op{{",1752],["Op:  influxql.EQ,",1029],["ops = append(ops, txn.Op{",904],["buildTxn := func(attempt int) ([]txn.Op, error) {",818],["if v_1.Op != OpConst64 {",708],["return txn.Op{",665],["var ops []txn.Op",626],["p := gc.Prog(v.Op.Asm())",597],["switch e.Op {",571]]},{"word":"Open","context":[["f, err := os.Open(path)",2387],["file, err := os.Open(path)",1739],["f, err := os.Open(filename)",1490],["file, err := os.Open(filename)",1268],["f, err := os.Open(file)",760],["f, err := os.Open(name)",696],["db, err := sql.Open(\"sqlite3\", tempFilename)",495],["file, err := os.Open(filePath)",388],["// Open the database.",368],["file, err := os.Open(fileName)",336]]},{"word":"Operation","context":[["op := &request.Operation{",37657],["op := &aws.Operation{",5650],["//     \"$ref\": \"Operation\"",4819],["op := &service.Operation{",3192],["var ret *Operation",2649],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// *Operation.ServerResponse.Header or (if a response was returned at",1713],["ret := &Operation{",1713],["Callbacks: map[logical.Operation]framework.OperationFunc{",1683],["Operation: logical.UpdateOperation,",1484]]},{"word":"Optional","context":[["Optional: true,",28311],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["Optional:    true,",2104],["// Optional.",1278],["// Optional: Default to false.",1165],["// Optional: Partition on the disk to mount.",903],["Optional:      true,",893],["//       \"description\": \"Optional. Filter expression for filtering listed resources.\",",889],["Optional:     true,",610],["// Optional parameters:",591]]},{"word":"Output","context":[["// Output:",11938],["Output: buildapi.BuildOutput{",1288],["// Id: [Output Only] Unique identifier for the resource; defined by the",1058],["out, err := cmd.Output()",852],["c.Assert(err, check.IsNil, check.Commentf(\"Output: %s\", out))",747],["// CreationTimestamp: [Output Only] Creation timestamp in RFC3339 text",578],["outBuf := fs.Output.Bytes()",576],["Run(&helper, &RunConf{Output: &output})",558],["// NextPageToken: [Output Only] A token used to continue a truncated",557],["type Output struct {",376]]},{"word":"POST","context":[["HTTPMethod: \"POST\",",45127],["//   \"httpMethod\": \"POST\",",18913],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["Method: \"POST\",",2352],["case \"POST\":",2269],["if r.Method != \"POST\" {",1819],["if req.Method != \"POST\" {",1522],["Method:  \"POST\",",1397],["\"POST\",",1389],["if r.Method == \"POST\" {",905]]},{"word":"Parse","context":[["flag.Parse()",29569],["var _ = url.Parse",3082],["if err := cmd.Parse(args); err != nil {",2253],["if err := subFlags.Parse(args); err != nil {",1393],["if err := flags.Parse(args); err != nil {",556],["u, err := url.Parse(s)",461],["if err := b.flags.Parse(); err != nil {",443],["if err := cmdFlags.Parse(args); err != nil {",425],["if err := fs.Parse(args); err != nil {",424],["subFlags.Parse(args)",335]]},{"word":"Path","context":[["out.Path = in.Path",7500],["out.Path = in.Path",7500],["Path string",3332],["Path: rootModulePath,",3286],["Path string `json:\"path\"`",1813],["req, err := loc.api.BuildHTTPRequest(uri.HTTPMethod, uri.Path, APIVersion, params, p)",1555],["switch p, m := req.URL.Path, req.Method; {",1250],["Path string `json:\"path,omitempty\"`",1205],["switch req.URL.Path {",1149],["&framework.Path{",1034]]},{"word":"Pod","context":[["pod := &api.Pod{",7955],["api.Pod{",6315],["&api.Pod{",4371],["pods := []*api.Pod{",2589],["pod: &api.Pod{",2454],["pods: []*api.Pod{",1853],["Kind:       \"Pod\",",1557],["Kind: \"Pod\",",1468],["return &api.Pod{",1413],["fakeRuntime.PodList = []*kubecontainer.Pod{",1327]]},{"word":"Pointer","context":[["if ptr.Pointer() != nil {",20068],["use(unsafe.Pointer(_p0))",10242],["var _p0 unsafe.Pointer",6004],["_p0 = unsafe.Pointer(&_zero)",5922],["_p0 = unsafe.Pointer(&p[0])",2792],["use(unsafe.Pointer(_p1))",2108],["defer C.free(unsafe.Pointer(cstr))",1562],["_p0 = unsafe.Pointer(&buf[0])",1542],["defer C.free(unsafe.Pointer(cname))",1232],["_p0 = unsafe.Pointer(&b[0])",1148]]},{"word":"Port","context":[["out.Port = in.Port",2362],["out.Port = in.Port",2362],["Port int",1091],["Port:       80,",839],["Port *int64 `type:\"integer\"`",742],["if err := s.Convert(&in.Port, &out.Port, 0); err != nil {",704],["if err := s.Convert(&in.Port, &out.Port, 0); err != nil {",704],["Port:     80,",674],["Port   uint16",649],["type Port struct {",604]]},{"word":"Ports","context":[["Ports: []api.ServicePort{{",3784],["if in.Ports != nil {",2534],["out.Ports = nil",2420],["Ports: []api.ServicePort{",1867],["for i := range in.Ports {",1805],["for i := range service.Spec.Ports {",1632],["Ports: []api.ContainerPort{",1496],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["if len(service.Spec.Ports) != 1 {",744],["ports = append(ports, container.Ports...)",743]]},{"word":"Prettify","context":[["return awsutil.Prettify(s)",109113],["fmt.Println(awsutil.Prettify(resp))",4421],["fmt.Println(awsutil.Prettify(f2))",26],["prettyLog := prettify.Prettify(logMessage)",24]]},{"word":"Printf","context":[["fmt.Printf(\"\\n\")",3301],["log.Printf(",1684],["fmt.Printf(\"  ... Passed\\n\")",909],["fmt.Printf(\"Success: %v\\n\", resp)",831],["fmt.Printf(\"Unexpected error: %v\", err)",700],["log.Printf(format, args...)",666],["fmt.Printf(",616],["var _ = fmt.Printf",589],["g.Printf(\"\\n\")",519],["g.Printf(\"}\\n\\n\")",454]]},{"word":"Println","context":[["fmt.Println(err.Error())",36001],["fmt.Println(err)",20105],["fmt.Println(resp)",19340],["log.Println(err)",16778],["//        fmt.Println(resp)",13378],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["fmt.Println(awsutil.StringValue(resp))",10680],["fmt.Println()",7969],["fmt.Println(\"failed to create session,\", err)",5256]]},{"word":"Protocol","context":[["Protocol: \"TCP\",",3279],["// Go support for Protocol Buffers - Google's data interchange format",1229],["out.Protocol = in.Protocol",1083],["out.Protocol = in.Protocol",1083],["Protocol:      api.ProtocolTCP,",789],["Protocol:   api.ProtocolTCP,",773],["Protocol:   \"TCP\",",757],["Protocol:  \"tcp\",",754],["type Protocol string",750],["ProtocolUDP Protocol = \"UDP\"",713]]},{"word":"Public","context":[["// You should have received a copy of the GNU Lesser General Public License",5180],["// it under the terms of the GNU Lesser General Public License as published by",5114],["// GNU Lesser General Public License for more details.",5096],["// GNU General Public License for more details.",4206],["// You should have received a copy of the GNU General Public License",4154],["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["GNU General Public License for more details.",3592],["You should have received a copy of the GNU General Public License",3440],["it under the terms of the GNU General Public License as published by",3388],["// it under the terms of the GNU General Public License as published by",3289]]},{"word":"Query","context":[["&Query{",26276],["test.addQueries([]*Query{",3314],["type Query struct {",1048],["values := testServer.WaitRequest().URL.Query()",654],["q := u.Query()",652],["q := r.URL.Query()",620],["got := map[string][]string(req.URL.Query())",550],["qs := r.URL.Query()",413],["query := req.URL.Query()",384],["query := r.URL.Query()",368]]},{"word":"Read","context":[["// Read-only.",2967],["return nil, fmt.Errorf(\"Read %q: %v\", name, err)",1238],["if err = args.Read(iprot); err != nil {",987],["if err = result.Read(iprot); err != nil {",682],["// Read next point.",667],["n, err := r.Read(buf)",412],["// (Read-only)",355],["_, err := rand.Read(b)",323],["n, err := conn.Read(buf)",307],["if err := p.Success.Read(iprot); err != nil {",293]]},{"word":"ReadAll","context":[["body, err := ioutil.ReadAll(resp.Body)",8460],["body, _ := ioutil.ReadAll(r.Body)",2320],["respBody, _ := ioutil.ReadAll(resp.Body)",2084],["body, _ := ioutil.ReadAll(resp.Body)",1978],["body, err := ioutil.ReadAll(res.Body)",1752],["body, err := ioutil.ReadAll(r.Body)",1646],["data, err := ioutil.ReadAll(resp.Body)",1548],["respBody, err := ioutil.ReadAll(resp.Body)",1226],["b, err := ioutil.ReadAll(resp.Body)",1108],["body, err := ioutil.ReadAll(response.Body)",992]]},{"word":"Reader","context":[["var body io.Reader = nil",58552],["io.Reader",2583],["var body io.Reader",1129],["r io.Reader",1067],["type Reader struct {",1062],["cmds.Text: func(res cmds.Response) (io.Reader, error) {",749],["Stdin  io.Reader",598],["var r io.Reader",502],["type Reader interface {",484],["reader io.Reader",430]]},{"word":"Remove","context":[["req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)",1712],["req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)",1505],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["Remove: true,",1253],["defer os.Remove(f.Name())",926],["req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)",902],["req.Handlers.Unmarshal.Remove(restxml.UnmarshalHandler)",851],["req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)",769],["defer os.Remove(path)",744],["os.Remove(f.Name())",726]]},{"word":"Request","context":[["return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3901],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["return preparer.Prepare(&http.Request{})",3545],["return func(w http.ResponseWriter, r *http.Request) {",3124],["return autorest.Prepare(&http.Request{},",2807],["// Request structure.",2807],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["type Request struct {",2062],["server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",1873],["func(w http.ResponseWriter, r *http.Request) {",1842]]},{"word":"Required","context":[["Required: true,",14985],["aws.String(\"String\"), // Required",8342],["{ // Required",7508],["Required: []string{\"items\"},",2542],["Required:    true,",1725],["// Required.",1674],["// Required: Filesystem type to mount.",1487],["// Required fields:",1385],["Bucket: aws.String(\"BucketName\"), // Required",1194],["// Required: Yes",993]]},{"word":"Reset","context":[["buf.Reset()",4929],["b.Reset()",2436],["h.Reset()",947],["Reset()",825],["buffer.Reset()",772],["responseWriter.Body.Reset()",647],["s.Reset()",582],["viper.Reset()",575],["Reset(func() {",532],["defer viper.Reset()",437]]},{"word":"Resource","context":[["return &schema.Resource{",3711],["Elem: &schema.Resource{",3192],["Resource(\"pods\").",1872],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["Resource",1193],["// Kind: Resource type.",953],["Resource(\"services\").",944],["//  Use a Resource element with the domain name to limit the action to only",846],["Resource(\"nodes\").",840],["Resource string",837]]},{"word":"Response","context":[["result.Response = autorest.Response{Response: resp}",11401],["result.Response = autorest.Response{Response: resp}",11401],["result.Response = autorest.Response{Response: resp}",11401],["// code is an error. Response headers are in either",8983],["// status code is an error. Response headers are in either",7314],["// closes the http.Response Body.",6600],["// http.Response Body if it receives an error.",6600],["// non-2xx status code is an error. Response headers are in either",5221],["R: &etcd.Response{",3707],["result.Response = resp",3498]]},{"word":"ResponseWriter","context":[["return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3901],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["return func(w http.ResponseWriter, r *http.Request) {",3124],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",1873],["func(w http.ResponseWriter, r *http.Request) {",1842],["http.ResponseWriter",1457],["s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {",1115],["st := newServerTester(t, func(w http.ResponseWriter, r *http.Request) {",1055],["scope.err(err, res.ResponseWriter, req.Request)",1026]]},{"word":"Result","context":[["return &Result{r.Header.Get(HEADER_REQUEST_ID),",2607],["Result: &returnValue,",2481],["type Result struct {",1987],["Result:  &returnValue,",1598],["expected := &graphql.Result{",1058],["return &influxql.Result{Err: err}",876],["Forward: func(ctx action.FWContext) (action.Result, error) {",559],["var result Result",542],["er := kapacitor.Result{",536],["return *m.Result",449]]},{"word":"Returns","context":[["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// Returns whether the assertion was successful (true) or not (false).",2688],["// Returns:",628],["// Returns true if the request succeeds; otherwise, it returns an error.",406],["// Returns an error if timeout occurs first, or pod goes in to failed state.",348],["// Returns rows starting at an offset from the first row.",332],["// Returns logs of current machine.",326],["Returns(http.StatusOK, \"OK\", versionedObject).",325],["Returns struct {",307],["// Returns the list of DNS servers and DNS search domains.",267]]},{"word":"Run","context":[["Run: func(cmd *cobra.Command, args []string) {",7815],["if err := cmd.Run(); err != nil {",4108],["if err := job.Run(); err != nil {",2820],["err := cmd.Run()",2611],["app.Run(os.Args)",2537],["Run: func(req cmds.Request, res cmds.Response) {",1424],["err = cmd.Run()",1398],["return cmd.Run()",1360],["if code := c.Run(args); code != 0 {",1225],["os.Exit(m.Run())",1112]]},{"word":"S","context":[["// \texpected: \"S\",",2142],["type S struct {",1693],["S string",699],["-1, // S'",676],["var _ = check.Suite(&S{})",610],["var _ = Suite(&S{})",595],["case 'S':",526],["type S struct{}",521],["S.next()",472],["// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}",465]]},{"word":"SDKShapeTraits","context":[["SDKShapeTraits bool `type:\"structure\"`",68537],["SDKShapeTraits bool `locationName:\"OperationRequest\" type:\"structure\" xmlURI:\"https://foo/\"`",228],["SDKShapeTraits bool `type:\"structure\" payload:\"Body\"`",145],["SDKShapeTraits bool `type:\"structure\" payload:\"Policy\"`",71],["SDKShapeTraits bool `type:\"structure\" payload:\"Foo\"`",63],["if field, ok := v.Type().FieldByName(\"SDKShapeTraits\"); ok {",58],["SDKShapeTraits bool `type:\"structure\" payload:\"ReplicationConfiguration\"`",46],["SDKShapeTraits bool",46],["SDKShapeTraits bool `type:\"structure\" payload:\"AccessControlPolicy\"`",46],["SDKShapeTraits bool `type:\"structure\" payload:\"CloudFrontOriginAccessIdentity\"`",45]]},{"word":"Schema","context":[["Schema: spec.Schema{",20652],["Schema: spec.Schema{",20652],["Properties: map[string]spec.Schema{",20467],["Schema: &spec.Schema{",11591],["Schema: &spec.Schema{",11591],["Schema: map[string]*schema.Schema{",7236],["Schema: map[string]*schema.Schema{",7236],["Schema: map[string]*Schema{",6029],["Schema: map[string]*Schema{",6029],["Elem:     &schema.Schema{Type: schema.TypeString},",2931]]},{"word":"SchemaProps","context":[["SchemaProps: spec.SchemaProps{",110350],["SchemaProps: spec.SchemaProps{",110350],["Schema{SchemaProps: SchemaProps{Type: []string{\"string\"}}},",12],["Schema{SchemaProps: SchemaProps{Type: []string{\"string\"}}},",12]]},{"word":"Scope","context":[["Scope:     scope.PermAll,",1305],["// Scope",920],["Scope:     charm.ScopeGlobal,",786],["Scope:        scope.PermAll,",714],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:        scope.NewPerm(scope.DefaultID, scope.WebsiteID),",580],["Scope:     scope.NewPerm(scope.DefaultID),",351],["Scope:        config.ScopePermAll,",347],["Scope:        config.NewScopePerm(config.ScopeDefaultID, config.ScopeWebsiteID),",266],["if mapping.Scope.Name() != meta.RESTScopeNameNamespace {",265]]},{"word":"Second","context":[["time.Sleep(time.Second)",6699],["time.Sleep(1 * time.Second)",6076],["case <-time.After(time.Second):",4246],["case <-time.After(5 * time.Second):",4145],["b = strconv.AppendInt(b, int64(t.Second()), 10)",4128],["if t.Second() < 10 {",4121],["time.Sleep(2 * time.Second)",3762],["time.Sleep(5 * time.Second)",3396],["time.Sleep(10 * time.Second)",2113],["case <-time.After(2 * time.Second):",1784]]},{"word":"See","context":[["See the License for the specific language governing permissions and",78733],["// See the License for the specific language governing permissions and",45859],["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["// Fields allows partial responses to be retrieved. See",23003],["// implied. See the License for the specific language governing",10736],["* See the License for the specific language governing permissions and",6302],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",5183],["MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",4925],["// permissions and limitations under the License. See the AUTHORS file",4735],["// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",4647]]},{"word":"Selector","context":[["Selector: validSelector,",5529],["if in.Selector != nil {",3609],["out.Selector = nil",3557],["Selector: map[string]string{",3128],["if x.Selector == nil {",2648],["for key, val := range in.Selector {",1906],["out.Selector = make(map[string]string)",1902],["out.Selector[key] = val",1884],["x.Selector = nil",1492],["Selector: map[string]string{\"foo\": \"bar\"},",1255]]},{"word":"Send","context":[["err := req.Send()",52207],["//    err := req.Send()",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["err = req.Send()",2178],["return client.Send(req)",705],["if err := s.Send(wb); err != nil {",351],["if err := stream.Send(req); err != nil {",284],["return client.Send(req, http.StatusOK)",267],["// Send",265]]},{"word":"Server","context":[["Server:     srv,",4594],["type Server struct {",4277],["server := &http.Server{",1111],["s := &Server{",1085],["out.Server = in.Server",1050],["out.Server = in.Server",1050],["return &Server{",807],["// SelfLink: Server defined URL for this resource (output only).",740],["srv := &Server{",710],["s := &http.Server{",667]]},{"word":"ServerResponse","context":[["ServerResponse: googleapi.ServerResponse{",24578],["ServerResponse: googleapi.ServerResponse{",24578],["// ServerResponse contains the HTTP response code and headers from the",13928],["googleapi.ServerResponse `json:\"-\"`",13928],["// *Operation.ServerResponse.Header or (if a response was returned at",1713],["// *Empty.ServerResponse.Header or (if a response was returned at all)",775],["// *ObjectAccessControl.ServerResponse.Header or (if a response was",440],["// *Object.ServerResponse.Header or (if a response was returned at all)",342],["// *File.ServerResponse.Header or (if a response was returned at all) in",310],["// *Policy.ServerResponse.Header or (if a response was returned at all)",292]]},{"word":"Service","context":[["s *Service",19046],["s            *Service",10929],["s          *Service",9577],["tweakSvc: func(s *api.Service) {",9537],["s             *Service",6783],["type Service struct {",5858],["s         *Service",5652],["s    *Service",4294],["s       *Service",4182],["func New(client *http.Client) (*Service, error) {",3045]]},{"word":"Set","context":[["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["params.Set(\"alt\", \"json\")",25051],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["c.urlParams_.Set(\"alt\", alt)",23003],["req.Header.Set(\"Content-Type\", ctype)",17612],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["reqHeaders.Set(\"User-Agent\", c.s.userAgent())",11905],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["params.Set(\"alt\", alt)",10492]]},{"word":"Should","context":[["Ω(err).Should(HaveOccurred())",2915],["Ω(success).Should(BeFalse())",1623],["Eventually(session).Should(gexec.Exit(0))",1260],["Expect(err).Should(BeNil())",1111],["Ω(err).Should(BeNil())",1049],["Ω(failures).Should(HaveLen(1))",622],["Eventually(session).Should(gexec.Exit(1))",552],["// Optional. The component reporting this event. Should be a short machine understandable string.",524],["}).Should(Panic())",369],["// TODO(dchen1107): Should we rename PodStatus to a more generic name or have a separate states",365]]},{"word":"Size","context":[["size := m.Size()",29946],["l = e.Size()",8079],["size := p.Size()",6004],["i = encodeVarintGenerated(data, i, uint64(msg.Size()))",4070],["total += pops[i%1000].Size()",3371],["size2 := github_com_gogo_protobuf_proto.Size(p)",3137],["size3 := github_com_gogo_protobuf_proto.Size(p)",3137],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["l = m.ObjectMeta.Size()",1792]]},{"word":"Sleep","context":[["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(time.Second)",6699],["time.Sleep(1 * time.Second)",6076],["time.Sleep(10 * time.Millisecond)",4236],["time.Sleep(2 * time.Second)",3762],["time.Sleep(5 * time.Second)",3396],["time.Sleep(500 * time.Millisecond)",2724],["time.Sleep(50 * time.Millisecond)",2719],["time.Sleep(10 * time.Second)",2113],["time.Sleep(time.Millisecond)",1937]]},{"word":"Source","context":[["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["Source: buildapi.BuildSource{",1225],["Source string",732],["// Source represents the location and type of a volume to mount.",722],["// Source sets the optional parameter \"source\": String to identify the",719],["Sources: []influxql.Source{&influxql.Measurement{Name: \"myseries\"}},",638],["// and allows a Source for provider-specific attributes",592],["Sources: []influxql.Source{&influxql.Measurement{Name: \"src\"}},",578],["Sources: []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",543],["Sources:    []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",533]]},{"word":"Spec","context":[["Spec: api.PodSpec{",28141],["Spec: api.ReplicationControllerSpec{",8923],["Spec: api.ServiceSpec{",8724],["Spec: desiredState,",3638],["Spec: api.NodeSpec{",3451],["for _, container := range pod.Spec.Containers {",2060],["Spec: extensions.DaemonSetSpec{",2010],["s.Spec.Type = api.ServiceTypeLoadBalancer",1970],["Spec: api.PersistentVolumeSpec{",1932],["Spec: extensions.ReplicaSetSpec{",1726]]},{"word":"Split","context":[["lines := strings.Split(out, \"\\n\")",731],["pathList := strings.Split(cannonicalName, \"/\")",697],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["paramValues := strings.Split(args[0], \"/\")",632],["events := strings.Split(out, \"\\n\")",540],["events := strings.Split(strings.TrimSpace(out), \"\\n\")",523],["if len(strings.Split(value, \"/\")) == 1 {",450],["portnum, _ := strconv.Atoi(strings.Split(string(port), \"/\")[0])",388],["scanner.Split(bufio.ScanLines)",376],["outArr := strings.Split(out, \"\\n\")",347]]},{"word":"Sprintf","context":[["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["params.Set(\"pageToken\", fmt.Sprintf(\"%v\", v))",6090],["params.Set(\"maxResults\", fmt.Sprintf(\"%v\", v))",6054],["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["s = append(s, \"XXX_unrecognized:\"+fmt.Sprintf(\"%#v\", this.XXX_unrecognized)+\",\\n\")",5405],["s2 := fmt.Sprintf(\"%v\", p)",3135],["var _ = fmt.Sprintf",3105],["s2 := fmt.Sprintf(\"%#v\", p)",2993],["return fmt.Sprintf(",2343],["req.Header.Set(\"If-None-Match\", fmt.Sprintf(\"%v\", v))",2132]]},{"word":"Start","context":[["tc.Start(t)",3966],["if err := cmd.Start(); err != nil {",2991],["ExtensionRange: []*descriptor.DescriptorProto_ExtensionRange{{Start: func(v int32) *int32 { return &v }(1000),",1414],["err = cmd.Start()",1348],["err := cmd.Start()",920],["if err := container.Start(); err != nil {",834],["Start() error",777],["Start()",684],["if err := s.d.Start(); err != nil {",666],["c.Start()",627]]},{"word":"State","context":[["return func(s *terraform.State) error {",5208],["State: api.ContainerState{",2517],["State: nil,",1907],["machine, err := s.State.AddMachine(\"quantal\", state.JobHostUnits)",1731],["State: docker.State{",1694],["State: docker.State{",1694],["State: &terraform.InstanceState{",1574],["state := &State{",1508],["s := &State{",1456],["type State struct {",1368]]},{"word":"Status","context":[["Status: api.PodStatus{",7147],["Status: api.NodeStatus{",6461],["Status string `json:\"status,omitempty\"`",2520],["out.Status = in.Status",1969],["out.Status = in.Status",1969],["Status:             api.ConditionTrue,",1485],["type Status struct {",1484],["return fmt.Errorf(\"proto: wrong wireType = %d for field Status\", wireType)",1444],["Status: api.ConditionTrue,",1255],["Status: http.StatusOK,",1221]]},{"word":"StatusCode","context":[["Code:   res.StatusCode,",24618],["HTTPStatusCode: res.StatusCode,",24593],["if res != nil && res.StatusCode == http.StatusNotModified {",24578],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["if resp.StatusCode != http.StatusOK {",5525],["if resp.StatusCode != 200 {",4527],["if res.StatusCode != 200 {",2448],["if resp.StatusCode < 200 || resp.StatusCode > 299 {",2134],["if resp.StatusCode < 200 || resp.StatusCode > 299 {",2134],["req.HTTPResponse = &http.Response{StatusCode: 200, Body: ioutil.NopCloser(buf), Header: http.Header{}}",1747]]},{"word":"StatusOK","context":[["w.WriteHeader(http.StatusOK)",10652],["if resp.StatusCode != http.StatusOK {",5525],["azure.WithErrorUnlessStatusCode(http.StatusOK),",4281],["StatusCode: http.StatusOK,",1645],["return engine.StatusOK",1611],["c.Assert(recorder.Code, check.Equals, http.StatusOK)",1527],["c.Assert(response.StatusCode, Equals, http.StatusOK)",1480],["http.StatusOK,",1425],["if res.StatusCode != http.StatusOK {",1382],["Status: http.StatusOK,",1221]]},{"word":"Stderr","context":[["cmd.Stderr = os.Stderr",4643],["cmd.Stderr = os.Stderr",4643],["fmt.Fprintln(os.Stderr, err)",4376],["fmt.Fprintf(os.Stderr, \"Usage:\\n\\t%s\\n\", usageBits)",1957],["out.Stderr = in.Stderr",1275],["out.Stderr = in.Stderr",1275],["fmt.Fprintf(os.Stderr, \"%v\\n\", err)",998],["fmt.Fprintln(os.Stderr, err.Error())",926],["Stderr:       true,",807],["fmt.Fprintln(os.Stderr, usageMessage)",733]]},{"word":"Stop","context":[["defer stopper.Stop()",7045],["defer tc.Stop()",4444],["defer s.Stop()",3834],["defer ticker.Stop()",2250],["ticker.Stop()",1740],["defer mtc.Stop()",1557],["defer s.Stopper().Stop()",1470],["Stop()",1391],["s.Stop()",1296],["timer.Stop()",1217]]},{"word":"Store","context":[["type Store struct {",877],["Store",804],["for _, m := range s.Store.List() {",758],["type Store interface {",663],["test := registrytest.New(t, storage.Store)",604],["store.Must(Srv.Store.User().VerifyEmail(user.Id))",528],["store := &registry.Store{",453],["*registry.Store",433],["manager.rcStore.Store.Add(controllerSpec)",432],["cache.Store",392]]},{"word":"String","context":[["return s.String()",114328],["// String returns the string representation",113951],["return buf.String()",10966],["aws.String(\"String\"), // Required",8342],["aws.String(\"String\"), // Required",8342],["case reflect.String:",6428],["String() string",3839],["actual := strings.TrimSpace(state.String())",3368],["t.Fatalf(\"String want %v got %v\", s1, s2)",3263],["s1 := p.String()",3263]]},{"word":"T","context":[["type T struct {",2109],["func Test(t *testing.T) {",1982],["func TestGet(t *testing.T) {",1940],["func TestCreate(t *testing.T) {",1659],["func TestDelete(t *testing.T) {",1627],["return thrift.PrependError(fmt.Sprintf(\"%T read struct end error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T write struct begin error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T field %d read error: \", p, fieldId), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T read error: \", p), err)",1514],["// \texpected: \"T\",",1428]]},{"word":"THE","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",4344],["// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",3886],["// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",3886],["// THE SOFTWARE.",3875],["// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",2974],["// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",2040],["// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",1998]]},{"word":"THIS","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",2040],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",1987],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",1427],["// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",1287],["* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",1149],["* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",1124],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688]]},{"word":"TODO","context":[["// TODO",2890],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// TODO: Inefficient conversion - can we improve it?",2317],["// TODO: Uncomment when fix #19254",1624],["// TODO:",1335],["// TODO: Handle error.",1046],["// TODO: provide exact specification for format.",976],["// TODO: implement HandledResources()",932],["ctx := context.TODO()",824],["// NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented.",771]]},{"word":"Tag","context":[["type Tag struct {",1325],["Tags []*Tag `locationNameList:\"Tag\" type:\"list\"`",1207],["Tags []*Tag `locationNameList:\"Tag\" type:\"list\"`",1207],["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["// PageToken sets the optional parameter \"pageToken\": Tag returned by a",965],["{Tag: \"machine-42\"},",531],["{Tag: \"unit-mysql-0\"},",518],["{Tag: \"unit-wordpress-0\"},",503],["func (s Tag) GoString() string {",476],["func (s Tag) String() string {",476]]},{"word":"Template","context":[["Template: &validPodTemplate.Template,",3872],["Template: &validPodTemplate.Template,",3872],["Template: api.PodTemplateSpec{",3247],["Template: &api.PodTemplateSpec{",2483],["if in.Template != nil {",1538],["out.Template = nil",1417],["Template: validPodTemplate.Template,",904],["Template: validPodTemplate.Template,",904],["// Template is the object that describes the pod that will be created if",815],["Template: &readWriteVolumePodTemplate.Template,",740]]},{"word":"Test","context":[["resource.Test(t, resource.TestCase{",8069],["func Test(t *testing.T) {",1982],["func Test(t *testing.T) { TestingT(t) }",1407],["type Test struct {",1142],["// Test for #2267",636],["logicaltest.Test(t, logicaltest.TestCase{",546],["func Test(t *testing.T) { check.TestingT(t) }",511],["// Test to make sure that when we use -e on env vars that are",370],["Test{",356],["assert.Within(t, func(test *assert.Test) {",324]]},{"word":"The","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["// Copyright 2009 The Go Authors. All rights reserved.",12923],["Copyright 2016 The Kubernetes Authors.",11842],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["Copyright 2014 The Kubernetes Authors.",5369],["// Copyright 2015 The Cockroach Authors.",5364],["Copyright 2015 The Kubernetes Authors.",5172],["// This case should never be hit, The SDK should alwsy return an",5138],["// Copyright 2013 The Go Authors. All rights reserved.",5102]]},{"word":"This","context":[["// server regardless of whether the field is empty or not. This may be",38333],["// fail if the object's ETag matches the given value. This is useful for",12114],["// This case should never be hit, the SDK should always return an",6736],["// This case should never be hit, The SDK should alwsy return an",5138],["// This may be used to include null fields in Patch requests.",4930],["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["// This file is part of the go-ethereum library.",3823],["This program is distributed in the hope that it will be useful,",3745],["* This program is distributed in the hope that it will be useful,",3470],["// This is a compile-time assertion to ensure that this generated file",3226]]},{"word":"Time","context":[["t        time.Time",5756],["case time.Time:",2093],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Time\"),",1709],["return time.Time{}",1159],["reqIDGen: idutil.NewGenerator(0, time.Time{}),",886],["*out = new(unversioned.Time)",863],["var t time.Time",859],["LastTransitionTime: unversioned.Time{},",810],["LastHeartbeatTime:  unversioned.Time{},",810],["modTime time.Time",798]]},{"word":"Timestamp","context":[["Timestamp: time.Now(),",732],["Timestamp: timestamp,",701],["Timestamp time.Time",607],["return fmt.Errorf(\"proto: wrong wireType = %d for field Timestamp\", wireType)",541],["Timestamp: now,",462],["return m.Timestamp",461],["Timestamp: ts,",445],["l = m.Timestamp.Size()",417],["Timestamp: ev.Timestamp,",410],["Timestamp: ev.Timestamp,",410]]},{"word":"To","context":[["Expect(err).To(HaveOccurred())",11730],["Expect(err).To(BeNil())",4880],["Expect(ui.Outputs).To(ContainSubstrings(",3675],["p.To.Type = obj.TYPE_REG",2458],["Expect(ui.Outputs()).To(ContainSubstrings(",1652],["// calling the \"fn\" function with the response data for each page. To stop",1419],["To: &kapi.ObjectReference{",1342],["Expect(set.Val()).To(Equal(\"OK\"))",1002],["Expect(found).To(BeTrue())",874],["p.To.Type = obj.TYPE_MEM",870]]},{"word":"TrimSpace","context":[["id := strings.TrimSpace(out)",4703],["actual := strings.TrimSpace(state.String())",3368],["out = strings.TrimSpace(out)",1976],["actual := strings.TrimSpace(plan.String())",1778],["line = strings.TrimSpace(line)",1662],["cleanedContainerID := strings.TrimSpace(out)",1413],["return strings.TrimSpace(helpText)",1229],["containerID := strings.TrimSpace(out)",974],["s = strings.TrimSpace(s)",631],["expected := strings.TrimSpace(`",579]]},{"word":"TryDecodeAsNil","context":[["if r.TryDecodeAsNil() {",130473],["if checkNil && dd.TryDecodeAsNil() {",3873],["// if dd.isContainerType(valueTypeNil) {dd.TryDecodeAsNil()",1125],["// if dd.isContainerType(valueTypeNil) { dd.TryDecodeAsNil()",70],["if dd.TryDecodeAsNil() {",45],["// do not use decVar, as there is no need to check TryDecodeAsNil",24],["x.line(\"if r.TryDecodeAsNil() {\")",24],["// This removes some of the wasted checks for TryDecodeAsNil.",24],["//   It was a concious decision to have gen.go always explicitly call EncodeNil or TryDecodeAsNil.",20],["TryDecodeAsNil() bool",18]]},{"word":"Type","context":[["Type:     schema.TypeString,",26163],["Type:        []string{\"string\"},",23051],["req.Header.Set(\"Content-Type\", ctype)",17612],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:        []string{\"integer\"},",11323],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:        []string{\"array\"},",8756],["Type:        \"string\",",7482],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215]]},{"word":"TypeMeta","context":[["unversioned.TypeMeta `json:\",inline\"`",20119],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["TypeMeta `json:\",inline\"`",9295],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["if newVal, err := c.DeepCopy(in.TypeMeta); err != nil {",6751],["if err := deepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {",5919],["if err := deepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {",5919],["out.TypeMeta = in.TypeMeta",4767]]},{"word":"TypeOf","context":[["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["env.Types[\"s1\"] = reflect.TypeOf(s1{})",727],["env.Types[\"a1\"] = reflect.TypeOf(a1{})",727],["env.Types[\"a2\"] = reflect.TypeOf(a2{})",727],["env.Types[\"s2\"] = reflect.TypeOf(s2{})",727],["codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())",622],["env.Types[\"I\"] = reflect.TypeOf(I(0))",601],["t := reflect.TypeOf(obj)",336],["tt := TypeOf(T(nil))",322],["if reflect.TypeOf(err) != reflect.TypeOf(test.err) {",301]]},{"word":"UID","context":[["UID:       \"12345678\",",5967],["out.UID = in.UID",2499],["out.UID = in.UID",2499],["uid := pod.UID",890],["// UID is the unique in time and space value for this object. It is typically generated by",594],["pod := &api.Pod{ObjectMeta: api.ObjectMeta{UID: types.UID(\"poduid\")}}",565],["pod := &api.Pod{ObjectMeta: api.ObjectMeta{UID: types.UID(\"poduid\")}}",565],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["// The UID to run the entrypoint of the container process.",558],["UID:       \"987654321\",",518]]},{"word":"URL","context":[["googleapi.Expand(req.URL, map[string]string{",44831],["googleapi.SetOpaque(req.URL)",12641],["URL:    u,",3347],["// assert URL",3002],["BasePath  string // API endpoint base URL",2098],["t.Fatalf(\"unexpected request: %#v\\n%#v\", req.URL, req)",2006],["URL:     u,",1733],["&URL{",1428],["switch p, m := req.URL.Path, req.Method; {",1250],["switch req.URL.Path {",1149]]},{"word":"Unexpected","context":[["t.Fatalf(\"Unexpected error: %v\", err)",6487],["t.Errorf(\"Unexpected error: %v\", err)",4881],["t.Fatalf(\"Unexpected error %v\", err)",1613],["t.Errorf(\"Unexpected response %#v\", response)",1363],["t.Errorf(\"Unexpected error %#v\", err)",1338],["t.Errorf(\"Unexpected error %v\", err)",1319],["t.Error(\"Unexpected error: \", err.Error())",839],["t.Fatalf(\"Unexpected result, Diff: %v\", testutil.Diff(expected, result))",748],["t.Errorf(\"%d: Unexpected error: %v\", i, errs)",738],["t.Errorf(\"%d: Unexpected non-error\", i)",738]]},{"word":"Unless","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["Unless required by applicable law or agreed to in writing,",985],["* Unless required by applicable law or agreed to in writing,",792],["//   Unless required by applicable law or agreed to in writing, software",599],["** Unless required by applicable law or agreed to in writing, software",470],["//  Unless required by applicable law or agreed to in writing,",459],["*  Unless required by applicable law or agreed to in writing, software",330]]},{"word":"Unlock","context":[["defer oprw.Unlock()",6518],["s.mu.Unlock()",5960],["defer s.mu.Unlock()",5737],["c.Unlock()",4682],["defer c.Unlock()",4217],["defer f.Unlock()",3547],["defer c.mu.Unlock()",2974],["c.mu.Unlock()",2946],["n.Unlock()",2587],["mu.Unlock()",2329]]},{"word":"Unmarshal","context":[["if err := github_com_gogo_protobuf_proto.Unmarshal(data, msg); err != nil {",7079],["req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)",5739],["if err := json.Unmarshal(resp, &r); err != nil {",5002],["if err := json.Unmarshal(b, &r); err != nil {",3252],["if err := github_com_gogo_protobuf_proto.Unmarshal(datas[i%10000], msg); err != nil {",3089],["// BEGIN Unmarshal arguments from response.",2807],["// END Unmarshal arguments from response.",2807],["_ = github_com_gogo_protobuf_proto.Unmarshal(littlefuzz, msg)",2567],["if err := github_com_gogo_protobuf_proto.Unmarshal(dAtA, msg); err != nil {",2439],["if err := m.ObjectMeta.Unmarshal(data[iNdEx:postIndex]); err != nil {",1792]]},{"word":"Update","context":[["db.Update(func(tx *bolt.Tx) error {",2491],["if err := db.Update(func(tx *bolt.Tx) error {",624],["// Update alters the status subset of an object.",537],["err := db.Update(func(tx *bolt.Tx) error {",452],["err = db.Update(func(tx *bolt.Tx) error {",418],["type Update struct {",366],["return r.store.Update(ctx, obj)",354],["// TODO: Update this to follow our convention for oneOf, whatever we decide it",343],["err = idx.Update(doc)",324],["glog.Errorf(\"Update channel is closed. Exiting the sync loop.\")",298]]},{"word":"Usage","context":[["flag.Usage()",6074],["cmd.Usage()",3990],["Usage:",3980],["// Usage example:",3149],["flag.Usage = func() {",2215],["Usage()",1989],["fmt.Fprintf(os.Stderr, \"Usage:\\n\\t%s\\n\", usageBits)",1957],["flag.Usage = usage",1772],["// Usage",1033],["// Usage:",905]]},{"word":"Use","context":[["// Use of this source code is governed by a BSD-style",82711],["// request. Use googleapi.IsNotModified to check whether the response",12114],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified",6692],["// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to",6580],["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// Use of this source code is governed by a MIT-style",5462],["// Use of this source code is governed by an ISC",4711],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by a MIT-license.",2543]]},{"word":"User","context":[["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["reqHeaders.Set(\"User-Agent\", c.s.userAgent())",11905],["type User struct {",4655],["// in the Amazon Elastic Compute Cloud User Guide.",4599],["//       \"description\": \"User profile ID associated with this request.\",",2944],["out.User = in.User",2357],["out.User = in.User",2357],["UserAgent string // optional additional User-Agent fragment",2098],["// in the IAM User Guide.",1826]]},{"word":"V","context":[["if log.V(1) {",3151],["if log.V(2) {",1877],["if log.V(3) {",600],["if log.V(4) {",478],["if glog.V(2) {",456],["if log.V(6) {",379],["glog.V(4).Infof(\"%v\", err)",356],["glog.V(10).Infof(",350],[") as V",313],["glog.V(5).Infof(\"pod default case, pending\")",300]]},{"word":"Value","context":[["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["Value string `json:\"value,omitempty\"`",3152],["Value string",3036],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["Value: \"\",",2704],["out.Value = in.Value",2374],["out.Value = in.Value",2374],["Value        string `json:\"value,omitempty\"`",1939],["Value: aws.String(\"String\"),",1484],["Value:  \"\",",1447]]},{"word":"ValueOf","context":[["rv := reflect.ValueOf(v)",2469],["fieldValue.Set(reflect.ValueOf(&x))",775],["env.Funcs[\"f\"] = reflect.ValueOf(f)",605],["env.Funcs[\"ft\"] = reflect.ValueOf(ft)",601],["env.Funcs[\"vt\"] = reflect.ValueOf(vt)",601],["env.Funcs[\"v2\"] = reflect.ValueOf(v2)",601],["env.Funcs[\"e\"] = reflect.ValueOf(e)",601],["env.Funcs[\"m\"] = reflect.ValueOf(m)",601],["env.Vars[\"is\"] = reflect.ValueOf(&is)",601],["env.Funcs[\"mt\"] = reflect.ValueOf(mt)",601]]},{"word":"Values","context":[["params := make(url.Values)",36391],["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["u := url.Values{}",4964],["v := url.Values{}",4608],["params_       url.Values",3641],["Values: []*string{",2086],["params := url.Values{}",2050],["Values: [][]interface{}{[]interface{}{",1311],["values := url.Values{}",1027],["q := url.Values{}",767]]},{"word":"Version","context":[["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["// Licensed under the Apache License, Version 2.0 (the \"License\");",56516],["* Licensed under the Apache License, Version 2.0 (the \"License\");",5894],["var _ = googleapi.Version",3082],["//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file",2295],["Version string",1865],["// Use of this source code is governed under the Apache License, Version 2.0",1834],["// Licensed under the Apache License, Version 2.0 (the \"License\"): you may",1772],["Version: \"2\",",1465],["Version: 1,",1025]]},{"word":"WARRANTIES","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",4344],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",2078],["// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",2004],["// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",1998],["// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",1423]]},{"word":"WITHOUT","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",9930],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["but WITHOUT ANY WARRANTY; without even the implied warranty of",5062],["// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",4594],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",3684],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",2059]]},{"word":"Wait","context":[["wg.Wait()",23272],["cmd.Wait()",1231],["if err := cmd.Wait(); err != nil {",1140],["group.Wait()",850],["err = cmd.Wait()",820],["s.wg.Wait()",745],["wait.Wait()",711],["waitGroup.Wait()",541],["return w.Wait()",512],["defer wg.Wait()",480]]},{"word":"We","context":[["// \texpected: \"We\",",714],["// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not",586],["// We recommend that you check IsTruncated after every call to ensure that you",550],["// We have to customize the randomization of TypeMetas because their",440],["// launch a pod to find a node which can launch a pod. We intentionally do",396],["// check that pod got scheduled. We intentionally DO NOT check that the",365],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["// in the cache. We need to bypass the cache to get the latest set of",274],["// We need to create some default port name if it's not specified, since",272],["//We allow users to specify path to kubectl, so you can test either \"kubectl\" or \"cluster/kubectl.sh\"",257]]},{"word":"Write","context":[["x.Write(oprot)",1920],["w.Write(data)",1709],["w.Write(b)",1619],["w.Write([]byte(err.Error()))",947],["&Write{data: strings.Join(writes, \"\\n\")},",912],["w.Write([]byte(\"hello\"))",910],["_, err = b.Write(buf)",835],["out.Write(text)",743],["if err2 = result.Write(oprot); err == nil && err2 != nil {",729],["w.Write(output)",711]]},{"word":"WriteHeader","context":[["w.WriteHeader(http.StatusOK)",10652],["w.WriteHeader(http.StatusInternalServerError)",5118],["w.WriteHeader(http.StatusNoContent)",4938],["w.WriteHeader(http.StatusBadRequest)",4159],["w.WriteHeader(http.StatusNotFound)",3682],["w.WriteHeader(200)",3107],["w.WriteHeader(http.StatusCreated)",2015],["w.WriteHeader(500)",1754],["w.WriteHeader(code)",1572],["rw.WriteHeader(http.StatusBadRequest)",1078]]},{"word":"WriteString","context":[["buf.WriteString(\", \")",1280],["buf.WriteString(\"\\n\")",1128],["ctx.WriteString(part)",908],["buf.WriteString(\" \")",729],["buffer.WriteString(\"\\n\")",672],["io.WriteString(w, msg)",643],["e.WriteString(\"null\")",618],["buf.WriteString(s)",568],["_, err = b.WriteString(\", \")",550],["buf.WriteString(\"null\")",443]]},{"word":"Writer","context":[["return tabbedString(func(out io.Writer) error {",3519],["io.Writer",2431],["return tabbedString(func(out *tabwriter.Writer) error {",927],["type Writer struct {",911],["w io.Writer",896],["Stderr io.Writer",694],["Stdout io.Writer",689],["w := new(tabwriter.Writer)",594],["// It will perform exactly one Write to the underlying Writer.",446],["type Writer interface {",412]]},{"word":"X","context":[["X int",1113],["th.TestHeader(t, r, \"X-Auth-Token\", fake.TokenID)",1087],["// where Purpose is X, see the tag:key=value filter.",931],["// key Purpose (regardless of what the tag's value is), and the tag value X",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["req.Header.Set(\"X-Upload-Content-Type\", c.mediaType_)",605],["if strings.HasPrefix(k, \"X-Meta-\") {",584],["th.TestHeader(t, r, \"X-Auth-Token\", client.TokenID)",472],["for x := b.Min.X; x < b.Max.X; x++ {",461],["for x := b.Min.X; x < b.Max.X; x++ {",461]]},{"word":"XXX_unrecognized","context":[["if m.XXX_unrecognized != nil {",14168],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["XXX_unrecognized []byte  `json:\"-\"`",10132],["n += len(m.XXX_unrecognized)",8149],["XXX_unrecognized []byte `json:\"-\"`",6910],["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710]]},{"word":"You","context":[["You may obtain a copy of the License at",78110],["// You may obtain a copy of the License at",55863],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["* You may obtain a copy of the License at",5818],["// You should have received a copy of the GNU Lesser General Public License",5180],["// You should have received a copy of the GNU General Public License",4154],["You should have received a copy of the GNU General Public License",3440],["* You should have received a copy of the GNU General Public License",2903],["//  except in compliance with the License. You may obtain a copy of the License at",2295],["// file, You can obtain one at http://mozilla.org/MPL/2.0/.",2018]]},{"word":"_","context":[["_ struct{} `type:\"structure\"`",70669],["_ = l",66539],["_, _, _ = h, z, r",60384],["_, _, _ = h, z, r",60384],["_, _, _ = h, z, r",60384],["_ = i",30398],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["for _, tt := range tests {",22910],["for _, test := range tests {",20305],["req, _ := http.NewRequest(\"POST\", urls, body)",17587]]},{"word":"_p0","context":[["var _p0 *byte",14003],["_p0, err = BytePtrFromString(path)",10837],["use(unsafe.Pointer(_p0))",10242],["var _p0 unsafe.Pointer",6004],["_p0 = unsafe.Pointer(&_zero)",5922],["_p0 = unsafe.Pointer(&p[0])",2792],["_p0 = unsafe.Pointer(&buf[0])",1542],["_p0 = unsafe.Pointer(&b[0])",1148],["_p0, err = BytePtrFromString(oldpath)",640],["r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))",476]]},{"word":"a","context":[["// Use of this source code is governed by a BSD-style",82711],["You may obtain a copy of the License at",78110],["// You may obtain a copy of the License at",55863],["return a",13873],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// Creating a request object using this method should be used when you want to inject",13378],["return a, nil",8554],["if err := conv_a.Convert(a); err != nil {",6009],["* You may obtain a copy of the License at",5818],["//       \"pattern\": \"[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?\",",5612]]},{"word":"about","context":[["// with awserr.Error's Code and Message methods to get detailed information about",7881],["For more about specifying packages, see 'go help packages'.",1006],["// Status represents the current information about a pod. This data may not be up",788],["// NodeStatus is information about the current status of a node.",695],["// NamespaceStatus is information about the current status of a Namespace.",634],["// For more information about ARNs, go to Amazon Resource Names (ARNs) and",608],["c.Logf(\"test %d: %s\", i, test.about)",599],["// PodStatus represents information about the status of a pod. Status may trail the actual",585],["// Required. The object that this event is about.",524],["// A human readable message indicating details about why the pod is in this state.",513]]},{"word":"access","context":[["// access properties on the request object before or after sending the request. If",13378],["// This function is safe for concurrent access.",1627],["// authenticate once and get access to all their video and channel data,",847],["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// Required: Name or number of the port to access on the container.",541],["// Optional: Path to access on the HTTP server.",541],["// allAuthenticatedUsers get READER access.",528],["//         \"Object owner gets OWNER access, and project team owners get READER access.\",",514],["//         \"Object owner gets OWNER access, and project team owners get OWNER access.\",",514],["//         \"Object owner gets OWNER access, and project team owners get OWNER access.\",",514]]},{"word":"account","context":[["Account      string `json:\"account,omitempty\"`",2012],["// to return a list of gateways for your account and region.",1344],["u.Set(\"account\", v.(string))",1195],["p.p[\"account\"] = v",1195],["if v, found := p.p[\"account\"]; found {",1195],["// account.",1139],["//       \"description\": \"The ID of the managing account.\",",952],["// individual channel. The CMS account that the user authenticates with",717],["Account           string `json:\"account,omitempty\"`",713],["//       \"description\": \"Immutable id of the Google Apps account\",",518]]},{"word":"action","context":[["// Checks whether you have the required permissions for the action, without",6903],["// action.",3006],["switch action {",1357],["addParams(route, action.Params)",920],["//  Use a Resource element with the domain name to limit the action to only",846],["c.Assert(action, rectest.IsRecorded)",833],["// Required Permissions: To use this action, an IAM user must have a Manage",772],["// Exec specifies the action to take.",718],["// HTTPGetAction describes an action based on HTTP Get requests.",717],["// ExecAction describes a \"run in container\" action.",717]]},{"word":"actual","context":[["if actual != expected {",9135],["actual := strings.TrimSpace(state.String())",3368],["if !reflect.DeepEqual(actual, expected) {",2743],["t.Fatalf(\"bad: \\n%s\", actual)",2738],["t.Fatalf(\"bad:\\n%s\", actual)",2251],["actual := strings.TrimSpace(plan.String())",1778],["if !reflect.DeepEqual(expected, actual) {",1705],["if actual := strings.Trim(out, \"\\r\\n\"); actual != \"ok\" {",1453],["if actual := strings.Trim(out, \"\\r\\n\"); actual != \"ok\" {",1453],["t.Fatalf(\"bad: %#v\", actual)",1420]]},{"word":"add","context":[["// add HTTP headers to the request.",3239],["// aws.Config parameter to add your extra config.",2272],["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["if add {",617],["case \"add\":",543],["// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line",410],["// Not applicable for Windows as there is no concept of --cap-add",380],["// TODO: add LastTransitionTime, Reason, Message to match NodeCondition api.",331],["Add []Capability `json:\"add,omitempty\"`",301]]},{"word":"addr","context":[["for _, addr := range addrs {",2593],["if addr == \"\" {",1491],["return addr",1141],["var addr string",785],["in, _, err := c.Exchange(m, addr.String())",761],["if addr == nil {",754],["addr string",753],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["addrs = append(addrs, addr)",675],["return addr, nil",612]]},{"word":"address","context":[["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["return result, address + 1, shift",944],["Address string `json:\"address\"`",811],["for _, address := range node.Status.Addresses {",774],["// address.",671],["address string",605],["// EndpointAddress is a tuple that describes single IP address.",594],["Address string `json:\"address,omitempty\"`",485],["// Server is the hostname or IP address of the NFS server",424],["var address string",421]]},{"word":"after","context":[["// access properties on the request object before or after sending the request. If",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// getting updates only after the object has changed since the last",12114],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["// should retry (optionally after the time indicated in the Retry-After header).",654],["t.Errorf(\"size %v != after marshal proto.Size %v\", size, size3)",633],["// resource lists, and not reachable by name) after the time in this field. Once set, this",595],["// Use this parameter only when paginating results and only after you receive",572],["// Catches all undefined fields and must be empty after parsing.",555],["// We recommend that you check IsTruncated after every call to ensure that you",550]]},{"word":"agent","context":[["package agent",2345],["\"github.com/juju/juju/agent\"",1468],["defer srv.agent.Shutdown()",1413],["if err := srv.agent.RPC(\"Catalog.Register\", args, &out); err != nil {",985],["defer agent.Shutdown()",951],["testutil.WaitForLeader(t, srv.agent.RPC, \"dc1\")",881],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["\"agent-state\": \"started\",",587],["\"agent-status\": M{",438]]},{"word":"agreed","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["Unless required by applicable law or agreed to in writing,",985],["* Unless required by applicable law or agreed to in writing,",792],["//   Unless required by applicable law or agreed to in writing, software",599],["** Unless required by applicable law or agreed to in writing, software",470],["//  Unless required by applicable law or agreed to in writing,",459],["*  Unless required by applicable law or agreed to in writing, software",330]]},{"word":"all","context":[["// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified",6692],["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// as then you are sure you have configured all required params",4924],["// all copies or substantial portions of the Software.",3999],["// at all) in error.(*googleapi.Error).Header. Use",2016],["//         \"Include all properties.\",",1383],["//   \"full\" - Include all properties.",924],["// was returned at all) in error.(*googleapi.Error).Header. Use",864],["return all",856],["// response was returned at all) in error.(*googleapi.Error).Header. Use",849]]},{"word":"allErrs","context":[["return allErrs",29236],["allErrs := field.ErrorList{}",11293],["allErrs := errs.ValidationErrorList{}",9255],["allErrs := fielderrors.ValidationErrorList{}",1244],["allErrs := validation.ErrorList{}",906],["allErrs = append(allErrs, field.Required(fldPath.Child(\"name\"), \"\"))",585],["allErrs = append(allErrs, field.Required(fldPath.Child(\"name\"), \"\"))",585],["allErrs = append(allErrs, err)",547],["allErrs = append(allErrs, err)",547],["allErrs := []error{}",506]]},{"word":"allows","context":[["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["// manage many different YouTube channels. It allows content owners to",1127],["// and allows a Source for provider-specific attributes",592],["// YouTube channels. It allows content owners to authenticate once and",331],["// This allows certificates to be validated by authenticators, while still allowing other auth types",244],["// different YouTube channels. It allows content owners to authenticate",231],["// allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\").",228],["// cluster that read from etcd have code that allows them to read the new version.",170],["// Kubelet allows pods to use the host ipc namespace. Defaults to \"*\".",151]]},{"word":"already","context":[["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431],["Logf(\"RC %s was already deleted: %v\", name, err)",720],["// StatusReasonAlreadyExists means the resource you are creating already exists.",427],["Logf(\"ReplicaSet %s was already deleted: %v\", name, err)",405],["// RestartPolicy has already been first-order validated as per ValidatePodTemplateSpec().",382],["// already when the kubelet does not know about its new label yet. The",319],["// IsImagePresent checks whether the container image is already in the local storage.",303],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["// check that type already in binary is found",287],["// created and as well as the case when the condition already exists. When a new condition",271]]},{"word":"also","context":[["// with no spaces. You can also include any of the following characters: =,.@-",691],["// should also match the data type of the specified uniform variable. The i",584],["// May also be set in SecurityContext.  If set in both SecurityContext and",564],["// May also be set in PodSecurityContext.  If set in both SecurityContext and",552],["// The disk must also be in the same GCE project and zone as the kubelet.",500],["// and also when we cut V2, we should export a \"StreamOptions\" or somesuch that contains Stdin, Stdout, Stder and TTY",404],["// You can also sort results in descending order based on the creation",326],["// The disk must also be in the same AWS zone as the kubelet.",317],["// This includes checking formatting and uniqueness.  It also canonicalizes the",313],["// Syncs pods statuses with apiserver; also used as a cache of statuses.",307]]},{"word":"alt","context":[["params.Set(\"alt\", \"json\")",25051],["c.urlParams_.Set(\"alt\", alt)",23003],["c.urlParams_.Set(\"alt\", alt)",23003],["params.Set(\"alt\", alt)",10492],["params.Set(\"alt\", alt)",10492],["// output in CSV format specify \"alt=csv\" as a query parameter.",231],["// It would be nice to set a fqdn subject alt name, but only the kubelets know, the apiserver is clueless",158],["func (c *OperationsGetCall) doRequest(alt string) (*http.Response, error) {",138],["func (c *OperationsListCall) doRequest(alt string) (*http.Response, error) {",129],["check.reportAltDecl(alt)",125]]},{"word":"always","context":[["// This case should never be hit, the SDK should always return an",6736],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["// ListResponder handles the response to the List request. The method always",644],["// GetResponder handles the response to the Get request. The method always",615],["// PullAlways means that kubelet always attempts to pull the latest image.  Container will fail If the pull fails.",510],["// DeleteResponder handles the response to the Delete request. The method always",503],["// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always",427],["var _ bytes.Buffer // always import bytes",336],["// After aggregating a point, it always tries to emit a value using the emitter.",224],["\"mixed state #2 with restart always\",",211]]},{"word":"an","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["// Message from an error.",19226],["// code is an error. Response headers are in either",8983],["// status code is an error. Response headers are in either",7314],["// actually making the request, and provides an error response. If you have",6922],["// This case should never be hit, the SDK should always return an",6736],["// http.Response Body if it receives an error.",6600],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["// non-2xx status code is an error. Response headers are in either",5221]]},{"word":"and","context":[["See the License for the specific language governing permissions and",78733],["// See the License for the specific language governing permissions and",45859],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// ServerResponse contains the HTTP response code and headers from the",13928],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// actually making the request, and provides an error response. If you have",6922],["// permissions and limitations under the License.",6602],["* See the License for the specific language governing permissions and",6302]]},{"word":"any","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// (at your option) any later version.",8541],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// Generic AWS error with Code, Message, and original error (if any)",6209],["(at your option) any later version.",4611],["// Permission is hereby granted, free of charge, to any person obtaining a copy",4328],["// values are omitted from API requests. However, any field with an",3833],["// for quota purposes for server-side applications. Can be any arbitrary",2611],["// It is not safe to mutate any of the client's properties though.",2270],["// The provided context supersedes any context provided to the Context method.",2234]]},{"word":"apache","context":[["http://www.apache.org/licenses/LICENSE-2.0",79621],["//     http://www.apache.org/licenses/LICENSE-2.0",43271],["// http://www.apache.org/licenses/LICENSE-2.0",7463],["//    http://www.apache.org/licenses/LICENSE-2.0",5528],["*     http://www.apache.org/licenses/LICENSE-2.0",4447],["//      http://www.apache.org/licenses/LICENSE-2.0",3481],["//   http://www.apache.org/licenses/LICENSE-2.0",1485],["*   http://www.apache.org/licenses/LICENSE-2.0",1101],["* http://www.apache.org/licenses/LICENSE-2.0",895],["http://www.apache.org/licenses/LICENSE-2.0.txt",671]]},{"word":"api","context":[["ObjectMeta: api.ObjectMeta{",69360],["Spec: api.PodSpec{",28141],["\"k8s.io/kubernetes/pkg/api\"",26465],["Containers: []api.Container{",18714],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["package api",10116],["tweakSvc: func(s *api.Service) {",9537],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["Spec: api.ReplicationControllerSpec{",8923]]},{"word":"app","context":[["app := cli.NewApp()",4476],["package app",3318],["app.Run(os.Args)",2537],["app.Commands = []cli.Command{",2042],["app.Flags = []cli.Flag{",1897],["app := NewApp()",1025],["err := app.CreateApp(&a, s.user)",797],["return app",791],["app.Action = func(c *cli.Context) {",708],["a := app.App{",608]]},{"word":"append","context":[["b = append(b, '0')",17498],["b = append(b, []byte{0x20}...)",10577],["s = append(s, \"}\")",8321],["s = append(s, \"XXX_unrecognized:\"+fmt.Sprintf(\"%#v\", this.XXX_unrecognized)+\",\\n\")",5405],["b = append(b, s[i])",5079],["m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)",4124],["errs = append(errs, err)",3468],["keys = append(keys, k)",3300],["b = append(b, tz...)",2752],["littlefuzz = append(littlefuzz, byte(popr.Intn(256)))",2720]]},{"word":"applicable","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["// Not applicable on Windows as uses Unix specific functionality",2299],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["Unless required by applicable law or agreed to in writing,",985],["* Unless required by applicable law or agreed to in writing,",792],["//   Unless required by applicable law or agreed to in writing, software",599],["** Unless required by applicable law or agreed to in writing, software",470]]},{"word":"application","context":[["ctype := \"application/json\"",17586],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["reqHeaders.Set(\"Content-Type\", \"application/json\")",4904],["req.Header.Set(\"Content-Type\", \"application/json\")",3191],["w.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")",1868],["w.Header().Add(\"Content-Type\", \"application/json\")",1637],["req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",1373],["w.Header().Set(\"Content-Type\", \"application/vnd.docker.plugins.v1+json\")",1232],["req.Header.Add(\"Content-Type\", \"application/json\")",1212],["w.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")",1140]]},{"word":"are","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// Validate inspects the fields of the type to determine if they are valid.",18383],["// code is an error. Response headers are in either",8983],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// status code is an error. Response headers are in either",7314],["// non-2xx status code is an error. Response headers are in either",5221],["// as then you are sure you have configured all required params",4924],["// values are omitted from API requests. However, any field with an",3833],["// trailing dashes are allowed.",2533],["// Overrides userIp if both are provided.",2283]]},{"word":"arg","context":[["for _, arg := range args {",2921],["for i, arg := range args {",1389],["\"--build-arg\", fmt.Sprintf(\"%s=%s\", envKey, envVal),",789],["args = append(args, arg)",686],["return fmt.Errorf(\"arg %v as int: %s\", key, err.Error())",588],["func fcntl(fd int, cmd int, arg int) (val int, err error) {",490],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["if arg == nil {",383],["args = append(args, arg...)",310],["switch arg {",290]]},{"word":"args","context":[["Run: func(cmd *cobra.Command, args []string) {",7815],["if len(args) != 1 {",5831],["if len(args) == 0 {",5579],["args := []string{",4846],["if len(args) > 0 {",3784],["if len(args) < 1 {",2933],["for _, arg := range args {",2921],["if err := cmd.Parse(args); err != nil {",2253],["// Only positional arguments should remain in args.",2230],["return commands_util.ErrForWrongParams(expectedParams, paramValues, args)",2230]]},{"word":"arguments","context":[["// BEGIN Marshal arguments into request.",2807],["// BEGIN Unmarshal arguments from response.",2807],["// END Marshal arguments into request.",2807],["// END Unmarshal arguments from response.",2807],["// Only positional arguments should remain in args.",2230],["// arguments. The number specified in the function should match the number of",584],["// Log the closure (no other arguments used)",407],["// NArg is the number of arguments remaining after flags have been processed.",303],["// the returned token in nextPageToken. Keep all other arguments unchanged.",286],["// arguments.",206]]},{"word":"array","context":[["Type:        []string{\"array\"},",8756],["// variable array. The location of the uniform variable to be modified is",1010],["Type: []string{\"array\"},",962],["codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)",622],["// modify an entire array or part of an array. When loading n elements",584],["// m + n - 1 in the array will be replaced with the new values. If m + n - 1",584],["// array elements beyond the end of the array will be ignored. The number",584],["// starting at an arbitrary position m in a uniform variable array, elements",584],["// variable array. A slice with length 1 should be used if modifying the value",584],["\"type\": \"array\",",584]]},{"word":"as","context":[["// it under the terms of the GNU Lesser General Public License as published by",5114],["// as then you are sure you have configured all required params",4924],["// empty value appearing in NullFields will be sent to the server as",3833],["it under the terms of the GNU General Public License as published by",3388],["// it under the terms of the GNU General Public License as published by",3289],["// Prefix indicates this name will be used as part of generation, in which case",2533],["// Not applicable on Windows as uses Unix specific functionality",2299],["* it under the terms of the GNU General Public License as published by",1839],["// This is a courtesy helper function, which in some cases may not work as expected!",1719],["* it under the terms of the GNU General Public License version 3 as",1549]]},{"word":"assert","context":[["assert.NoError(t, err)",27740],["\"github.com/stretchr/testify/assert\"",18896],["assert.Nil(t, err)",12151],["assert := assert.New(t)",8568],["assert := assert.New(t)",8568],["if assert.NoError(t, err) {",5588],["assert.Error(t, err)",5401],["assert.NoError(t, req.Error)",4830],["assert.Nil(err)",4134],["assert.Equal(t, err, nil)",3070]]},{"word":"associated","context":[["// of this software and associated documentation files (the \"Software\"), to deal",4240],["//       \"description\": \"User profile ID associated with this request.\",",2944],["of this software and associated documentation files (the \"Software\"), to deal",1061],["// fails. The associated event attribute's cause parameter will be set to OPERATION_NOT_PERMITTED.",654],["// The kind attribute of the resource associated with the status StatusReason.",429],["// The Causes array includes more details associated with the StatusReason",429],["// Extended data associated with the reason.  Each reason may define its",415],["// (hyphen), in which case Amazon Glacier uses the AWS account ID associated",379],["// this software and associated documentation files (the \"Software\"), to deal in",318],["* of this software and associated documentation files (the \"Software\"), to deal",310]]},{"word":"ast","context":[["\"go/ast\"",5181],["case *ast.Ident:",2505],["case *ast.SelectorExpr:",1773],["Type:  ast.TypeString,",1358],["case *ast.StarExpr:",1126],["case *ast.FuncDecl:",1125],["return ast.Function{",1045],["package ast",979],["case *ast.GenDecl:",974],["case *ast.ParenExpr:",899]]},{"word":"at","context":[["You may obtain a copy of the License at",78110],["// You may obtain a copy of the License at",55863],["// (at your option) any later version.",8541],["* You may obtain a copy of the License at",5818],["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["(at your option) any later version.",4611],["//  except in compliance with the License. You may obtain a copy of the License at",2295],["// file, You can obtain one at http://mozilla.org/MPL/2.0/.",2018],["// at all) in error.(*googleapi.Error).Header. Use",2016],["// a copy of the License at",1944]]},{"word":"auth","context":[["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/drive\",",2939],["//     \"https://www.googleapis.com/auth/compute\",",2840],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["package auth",2139],["//     \"https://www.googleapis.com/auth/adsense.readonly\"",2088],["//     \"https://www.googleapis.com/auth/adsense\",",2088]]},{"word":"autorest","context":[["result.Response = autorest.Response{Response: resp}",11401],["autorest.ByClosing())",7054],["err = autorest.Respond(",7003],["autorest.WithBaseURL(client.BaseURI),",6605],["autorest.WithQueryParameters(queryParameters))",6525],["autorest.AsJSON(),",4618],["return autorest.SendWithSender(client, req)",4453],["autorest.ByUnmarshallingJSON(&result),",4323],["preparer := autorest.CreatePreparer(",4314],["autorest.AsGet(),",3964]]},{"word":"available","context":[["// Queried from cloud provider, if available.",802],["// available.",681],["// first, if it is available, then fall back on the default (as",669],["// NamespaceActive means the namespace is available for use in the system",608],["// released volumes must be recycled before becoming available again",592],["// than the MaxItems number of results even when there are more results available.",550],["// used for PersistentVolumes that are not available",543],["// available. In that case, the IsTruncated response element returns true and",494],["// is no information available. A Reason clarifies an HTTP status",432],["// empty there is no information available.",429]]},{"word":"aws","context":[["\"aws\": testProviderFuncFixed(p),",8933],["p := testProvider(\"aws\")",8743],["aws.String(\"String\"), // Required",8342],["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"github.com/aws/aws-sdk-go/aws\"",7099],["op := &aws.Operation{",5650],["package aws",4496],["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947]]},{"word":"awserr","context":[["// Print the error, cast err to awserr.Error to get the Code and",19219],["if awsErr, ok := err.(awserr.Error); ok {",14078],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["// error which satisfies the awserr.Error interface.",11875],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["if awserr := aws.Error(err); awserr != nil {",1775],["if awserr := aws.Error(err); awserr != nil {",1775],["fmt.Println(\"Error:\", awserr.Code, awserr.Message)",1758]]},{"word":"awsutil","context":[["return awsutil.Prettify(s)",109113],["fmt.Println(awsutil.StringValue(resp))",10680],["return awsutil.StringValue(s)",4832],["fmt.Println(awsutil.Prettify(resp))",4421],["\"github.com/aws/aws-sdk-go/aws/awsutil\"",1524],["\"github.com/awslabs/aws-sdk-go/aws/awsutil\"",214],["Request: awsutil.Request{",192],["Response: awsutil.Response{",192],["awsutil.Cycle{",130],["\"github.com/gunosy/aws-sdk-go/aws/awsutil\"",117]]},{"word":"b","context":[["if b < 0x80 {",153986],["b := data[iNdEx]",137749],["for i := 0; i < b.N; i++ {",52243],["msglen |= (int(b) & 0x7F) << shift",42857],["wire |= (uint64(b) & 0x7F) << shift",32162],["b.ResetTimer()",27111],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["return string(b)",19830],["return b",19653],["b = append(b, '0')",17498]]},{"word":"bad","context":[["t.Fatalf(\"bad: %#v\", config)",3311],["t.Fatalf(\"bad: \\n%s\", actual)",2738],["t.Fatalf(\"bad:\\n%s\", actual)",2251],["goto bad",1962],["t.Fatalf(\"bad: %#v\", resp)",1644],["t.Fatalf(\"bad: %#v\", actual)",1420],["t.Fatalf(\"bad: %#v\", warns)",1349],["t.Fatalf(\"bad: %d\\n\\n%s\", code, ui.ErrorWriter.String())",1200],["cn.bad = true",1023],["t.Fatalf(\"bad: %v\", out)",925]]},{"word":"bar","context":[["\"foo\": \"bar\",",7497],["ID: \"bar\",",2962],["Name: \"bar\",",2711],["Name:      \"bar\",",1711],["{Name: \"bar\"},",1457],["Selector: map[string]string{\"foo\": \"bar\"},",1255],["ID = bar",1242],["\"foo\":  \"bar\",",1148],["\"NoUppercaseOrSpecialCharsLike=Equals\": \"bar\",",1123],["aws_instance.bar:",1092]]},{"word":"base","context":[["BasePath  string // API endpoint base URL",2098],["\"github.com/juju/juju/api/base\"",927],["\"github.com/cockroachdb/cockroach/base\"",905],["package base",844],["\"github.com/gogits/gogs/modules/base\"",796],["s, _, _ := serverutils.StartServer(t, base.TestServerArgs{})",768],["BasePath string // API endpoint base URL",705],["return base",601],["base := link.Attrs()",570],["\"github.com/cockroachdb/cockroach/pkg/base\"",465]]},{"word":"be","context":[["// license that can be found in the LICENSE file.",96872],["// server regardless of whether the field is empty or not. This may be",38333],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["// pending HTTP request will be aborted if the provided context is",22537],["// Context sets the context to be used in this call's Do method. Any",22537],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Creating a request object using this method should be used when you want to inject",13378],["// This case should never be hit, the SDK should always return an",6736]]},{"word":"because","context":[["// because http.StatusNotModified was returned.",9422],["// to check whether the returned error was because",6692],["// check whether the returned error was because http.StatusNotModified",6580],["// whether the returned error was because http.StatusNotModified was",1884],["// (needed to ensure safety because of naive import list construction.)",465],["// We have to customize the randomization of TypeMetas because their",440],["// pod is running because this will create a race condition with the",365],["// This is here because validation requires it.",364],["// another server. Status code 500 is used because the HTTP spec provides no suitable",354],["//   The request processing has failed because of an unknown error, exception",333]]},{"word":"been","context":[["c.Fatal(\"The cache should have been invalided but hasn't.\")",738],["// NodePending means the node has been created/added by the system, but not configured.",681],["// NodeTerminated means the node has been removed from the cluster.",681],["// NodeRunning means the node has been configured and has Kubernetes components running.",678],["c.Fatal(\"The cache should have been used but hasn't.\")",630],["// PodPending means the pod has been accepted by the system, but one or more of the containers",588],["// has not been started. This includes time before being bound to a node, as well as time spent",588],["// PodRunning means the pod has been bound to a node and all of the containers have been started.",588],["// PodRunning means the pod has been bound to a node and all of the containers have been started.",588],["t.Fatal(\"The cache should have been invalided but hasn't.\")",492]]},{"word":"before","context":[["// access properties on the request object before or after sending the request. If",13378],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["// TODO: Validate the params before sending",742],["t.Errorf(\"size %v != before marshal proto.Size %v\", size, size2)",633],["// created. It is not guaranteed to be set in happens-before order across separate operations.",601],["// released volumes must be recycled before becoming available again",592],["// has not been started. This includes time before being bound to a node, as well as time spent",588],["// Length of time before health checking is activated.  In seconds.",555],["before := time.Now()",554],["// PreStop is called immediately before a container is terminated.  The reason for termination is",537]]},{"word":"being","context":[["// is compatible with the proto package it is being compiled against.",2473],["// is compatible with the grpc package it is being compiled against.",746],["// At least one container is still running or is in the process of being restarted.",588],["// has not been started. This includes time before being bound to a node, as well as time spent",588],["// The suffix f indicates that floating-point values are being passed; the",584],["// indicates that unsigned integer values are being passed, and this type",584],["// suffix i indicates that integer values are being passed; the suffix ui",584],["// used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim",453],["// ObjectMeta describes the object that is being bound.",362],["//   \"id\"   string - the operation that is being attempted.",354]]},{"word":"binary","context":[["\"encoding/binary\"",16315],["// Redistribution and use in source and binary forms, with or without",3435],["//     * Redistributions in binary form must reproduce the above",1736],["* Redistribution and use in source and binary forms, with or without",1643],["// 2. Redistributions in binary form must reproduce the above copyright notice,",1300],["*     * Redistributions in binary form must reproduce the above",979],["Redistribution and use in source and binary forms, with or without",612],["// Redistribution and use in source and binary forms, with or without modification,",369],["import \"encoding/binary\"",362],["// check construction and use of type not in binary",319]]},{"word":"block","context":[["if block == nil {",1732],["display: block;",722],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["block, err := aes.NewCipher(key)",570],["return block",491],["return block, nil",359],["\"github.com/juju/juju/cmd/juju/block\"",347],["cert, err := x509.ParseCertificate(block.Bytes)",341],["// block.",316],["var block *pem.Block",312]]},{"word":"body","context":[["var body io.Reader = nil",58552],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["body, err := ioutil.ReadAll(resp.Body)",8460],["req, _ := http.NewRequest(\"DELETE\", urls, body)",6246],["req, _ := http.NewRequest(\"PUT\", urls, body)",4835],["req, _ := http.NewRequest(\"PATCH\", urls, body)",3818],["</body>",3094],["<body>",3027],["// assert body",2474]]},{"word":"bool","context":[["SDKShapeTraits bool `type:\"structure\"`",68537],["var ok bool",10867],["DryRun *bool `locationName:\"dryRun\" type:\"boolean\"`",7393],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["case bool:",4604],["const yyr2 bool = false",4300],["var yyhl3 bool = l >= 0",3894],["ReadOnly bool `json:\"readOnly,omitempty\"`",3679],["done := make(chan bool)",3313]]},{"word":"break","context":[["break",513552],["break loop",4971],["break;",2916],["break OpSwitch",2693],["break out",2014],["break Loop",1951],["break L",801],["break outer",641],["break LOOP",483],["break WaitResponse",277]]},{"word":"bson","context":[["\"gopkg.in/mgo.v2/bson\"",5492],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["\"labix.org/v2/mgo/bson\"",1263],["bson.M{",934],["bson.D{",578],["data, err := bson.Marshal(item.obj)",385],["defer s.conn.Apps().Remove(bson.M{\"name\": app.Name})",345],["bson.Next(buf, 4)",315],["lenWriter := bson.NewLenWriter(buf)",313],["defer s.conn.ServiceInstances().Remove(bson.M{\"name\": \"my-mysql\"})",275]]},{"word":"bucket","context":[["//     \"bucket\": {",3187],["c.bucket = bucket",3133],["c.bucket = bucket",3133],["\"bucket\": c.bucket,",3041],["\"bucket\": c.bucket,",3041],["//       \"description\": \"Name of a bucket.\",",2393],["//     \"bucket\",",1986],["//     \"bucket\"",1199],["bucket              string",969],["bucket string",941]]},{"word":"buf","context":[["var buf bytes.Buffer",31577],["return buf.String()",10966],["buf := new(bytes.Buffer)",10550],["buf.Reset()",4929],["buf := &bytes.Buffer{}",4759],["return buf",3619],["buf := bytes.NewBuffer([]byte{})",3555],["buf := bytes.NewBuffer(nil)",3515],["return buf.Bytes(), nil",2995],["return buf, nil",2516]]},{"word":"buffer","context":[["var buffer bytes.Buffer",5736],["return buffer.String()",2296],["buffer := &bytes.Buffer{}",1503],["buffer := new(bytes.Buffer)",1322],["buffer.Reset()",772],["buffer.WriteString(\"\\n\")",672],["if buffer[position] != rune('e') {",494],["return buffer.Bytes(), nil",399],["buffer.WriteString(\", \")",353],["return buffer",346]]},{"word":"bufio","context":[["\"bufio\"",31900],["scanner := bufio.NewScanner(file)",1757],["reader := bufio.NewReader(os.Stdin)",1136],["scanner := bufio.NewScanner(f)",840],["scanner := bufio.NewScanner(os.Stdin)",754],["scanner := bufio.NewScanner(r)",628],["s := bufio.NewScanner(f)",550],["b := bufio.NewWriter(w)",536],["scanner := bufio.NewScanner(reader)",447],["import \"bufio\"",418]]},{"word":"build","context":[["// +build linux",3692],["// +build ignore",3114],["// build request",3041],["\"go/build\"",2837],["// +build windows",2581],["// +build !windows",2365],["buildapi \"github.com/openshift/origin/pkg/build/api\"",1916],["// +build !ignore_autogenerated",1108],["// +build integration",991],["package build",981]]},{"word":"busybox","context":[["FROM busybox",6998],["`FROM busybox",5257],["ctx, err := fakeContext(`FROM busybox",3613],["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"top\")",1197],["dockerfile := fmt.Sprintf(`FROM busybox",1135],["c.Fatalf(\"Could not start daemon with busybox: %v\", err)",939],["dockerCmd(c, \"tag\", \"busybox\", repoName)",838],["ctx, err := fakeContext(fmt.Sprintf(`FROM busybox",837],["Image:   \"gcr.io/google_containers/busybox:1.24\",",807],["dockerfile := `FROM busybox",464]]},{"word":"but","context":[["// but WITHOUT ANY WARRANTY; without even the implied warranty of",9930],["but WITHOUT ANY WARRANTY; without even the implied warranty of",5062],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",3684],["// string assigned to a user, but should not exceed 40 characters.",2611],["c.Fatal(\"The cache should have been invalided but hasn't.\")",738],["//     This defines the format, but not the length restriction, which should be",726],["// NodePending means the node has been created/added by the system, but not configured.",681],["if false { // reference the types, but skip this branch at build/run time",664],["c.Fatal(\"The cache should have been used but hasn't.\")",630],["// equivalent to the \"default\" namespace, but \"default\" is the canonical representation.",607]]},{"word":"by","context":[["// Use of this source code is governed by a BSD-style",82711],["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["// Use of this source code is governed by a MIT-style",5462],["// it under the terms of the GNU Lesser General Public License as published by",5114],["// Use of this source code is governed by an ISC",4711],["// Code generated by protoc-gen-gogo.",3591],["// Code generated by protoc-gen-go.",3589],["it under the terms of the GNU General Public License as published by",3388]]},{"word":"byte","context":[["data = make([]byte, size)",28307],["var _p0 *byte",14003],["b := make([]byte, 0, 32)",11443],["b = append(b, []byte{0x20}...)",10577],["XXX_unrecognized []byte  `json:\"-\"`",10132],["data[i] = byte(popr.Intn(256))",6917],["XXX_unrecognized []byte `json:\"-\"`",6910],["b := make([]byte, 0, l)",5156],["case []byte:",5044],["buf := bytes.NewBuffer([]byte{})",3555]]},{"word":"bytes","context":[["\"bytes\"",123389],["var buf bytes.Buffer",31577],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["buf := new(bytes.Buffer)",10550],["var b bytes.Buffer",7044],["var buffer bytes.Buffer",5736],["a := &asset{bytes: bytes, info: info}",5153],["a := &asset{bytes: bytes, info: info}",5153],["buf := &bytes.Buffer{}",4759],["buf := bytes.NewBuffer([]byte{})",3555]]},{"word":"c","context":[["return c",267226],["c.Assert(err, jc.ErrorIsNil)",135421],["c.Assert(err, IsNil)",104368],["c.Assert(err, check.IsNil)",82873],["c.Assert(err, gc.IsNil)",75298],["c.Fatal(err)",59126],["req = c.newRequest(op, input, output)",46423],["res, err := c.doRequest(\"json\")",33446],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["c.ctx_ = ctx",30863]]},{"word":"cache","context":[["\"k8s.io/kubernetes/pkg/client/cache\"",4405],["&cache.ListWatch{",3229],["package cache",2167],["c.Fatal(\"The cache should have been invalided but hasn't.\")",738],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/client/cache\"",688],["store := cache.NewStore(cache.MetaNamespaceKeyFunc)",652],["store := cache.NewStore(cache.MetaNamespaceKeyFunc)",652],["tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",641],["c.Fatal(\"The cache should have been used but hasn't.\")",630],["listWatch := &cache.ListWatch{",602]]},{"word":"call","context":[["// Context sets the context to be used in this call's Do method. Any",22537],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["call := &googleapi.Call{",4744],["// Context sets the context to be used in this call's Do method.",4699],["// Perform the SOAP call.",2807],["return returnValue, c.caller_.Do(c.context_, c.s.client, call)",2124],["return returnValue, c.caller_.Do(googleapi.NoContext, c.s.client, call)",1955],["response, err := call.Do()",1600],["// values assigned to them by a call to Uniform* until the next successful",1594],["// specified domains. Use an Action element to allow or deny permission to call",826]]},{"word":"called","context":[["// is called.",13495],["called = true",2335],["var called bool",1398],["called := false",1156],["if !called {",1085],["if !selfLinker.called {",800],["// exist than the specified MaxRecords value, a pagination token called a marker",736],["t.Error(\"Wrong command called\")",686],["c.Assert(called, jc.IsTrue)",537],["// PostStart is called immediately after a container is created.  If the handler fails, the container",537]]},{"word":"can","context":[["// license that can be found in the LICENSE file.",96872],["// value can be used to capture response data after the request's \"Send\" method",13378],["// The go-ethereum library is free software: you can redistribute it and/or modify",3822],["// that can be found in the LICENSE file.",3572],["// Header returns an http.Header that can be modified by the caller to",3239],["This program is free software: you can redistribute it and/or modify",3094],["// Use of this source code is governed by a BSD-style license that can be",2873],["* This program is free software: you can redistribute it and/or modify",2570],["// TODO: Inefficient conversion - can we improve it?",2317],["// file, You can obtain one at http://mozilla.org/MPL/2.0/.",2018]]},{"word":"cannot","context":[["// that cannot be changed.",875],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["// cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax",574],["// this action. You cannot use an IAM policy to constrain this action's parameters.",440],["// newResourceQuota is updated with fields that cannot be changed.",438],["//      and cannot be adjacent to other hyphens.",426],["//      Hypens ('-') cannot be leading or trailing character of the string",426],["// newPv is updated with fields that cannot be changed.",420]]},{"word":"case","context":[["case 1:",52938],["case 2:",39233],["case 3:",22425],["case 0:",19207],["case 4:",15448],["case string:",15157],["case nil:",12334],["case 5:",10358],["case <-done:",7188],["case float64:",6780]]},{"word":"cc","context":[["cc.mu.Lock()",2114],["cc.mu.Unlock()",1854],["cc *grpc.ClientConn",1686],["\"cc\",",1229],["defer cc.mu.Unlock()",993],["cc := rl.cc",750],["cc := rl.cc",750],["cc.wmu.Lock()",732],["tc := testpb.NewTestServiceClient(cc)",592],["return cc, nil",579]]},{"word":"cfg","context":[["cfg,",2410],["return cfg",1866],["return cfg, nil",1437],["if cfg == nil {",818],["cfg, err := config.New(config.NoDefaults, attrs)",613],["return cfg, err",519],["var cfg Config",465],["env, err := environs.New(cfg)",458],["func(cfg *cloudinit.Config) {",401],["cfg, err := config.New(config.NoDefaults, s.TestConfig.Merge(coretesting.Attrs{",342]]},{"word":"ch","context":[["close(ch)",4831],["return ch",3960],["<-ch",3715],["ch := make(chan struct{})",2372],["defer close(ch)",1858],["case <-ch:",1799],["ch <- true",1683],["ch <- struct{}{}",1066],["switch ch {",1031],["ch := make(chan bool)",954]]},{"word":"chan","context":[["done := make(chan struct{})",4483],["done := make(chan bool)",3313],["ch := make(chan struct{})",2372],["stopCh := make(chan struct{})",2054],["c := make(chan os.Signal, 1)",1779],["errChan := make(chan error)",1297],["c := make(chan bool)",1283],["errc := make(chan error, 1)",1108],["done := make(chan error)",1043],["c := make(chan int)",1043]]},{"word":"change","context":[["change: watcher.Change{",1420],["// TODO: this design is not final and this field is subject to change in the future.",706],["// the server on successful creation of a resource and is not allowed to change on PUT",594],["// concurrency, change detection, and the watch operation on a resource or set of resources.",594],["// The functions Uniform{1|2|3|4}{f|i|ui} are used to change the value of the",584],["// Ignore whitespace since that's what were verifying doesn't change stuff",384],["// any new change seen, will run a sync against desired state and running state. If",358],["change := Change{",343],["// provisioned/attached using a exec based plugin. This is an alpha feature and may change in future.",326],["for _, change := range changes {",301]]},{"word":"changed","context":[["// getting updates only after the object has changed since the last",12114],["changed = true",11027],["if changed {",9364],["return v, changed",4153],["return nil, changed",3873],["changed := false",953],["// that cannot be changed.",875],["if !changed {",562],["// not be changed by updates.",486],["var changed bool",467]]},{"word":"changes","context":[["return changes, nil",520],["// changes.",461],["// start the container again to pickup changes",447],["// no changes are seen to the configuration, will synchronize the last known desired",358],["// syncLoop is the main loop for processing changes. It watches for changes from",344],["// syncLoop is the main loop for processing changes. It watches for changes from",344],["if len(changes) == 0 {",315],["// Watches changes to all pods",311],["return changes",309],["for _, change := range changes {",301]]},{"word":"channel","context":[["// authenticate once and get access to all their video and channel data,",847],["// individual channel. The CMS account that the user authenticates with",717],["channel <- podUpdate",703],["// channel.",664],["c.channel = channel",592],["c.channel = channel",592],["body, err := googleapi.WithoutDataWrapper.JSONReader(c.channel)",583],["t.Errorf(\"watching channel should be open\")",483],["// channel that the onBehalfOfContentOwnerChannel parameter value",440],["return channel",415]]},{"word":"check","context":[["c.Assert(err, check.IsNil)",82873],["// request. Use googleapi.IsNotModified to check whether the response",12114],["// googleapi.IsNotModified to check whether the returned error was",9322],["gc \"gopkg.in/check.v1\"",9251],["c.Assert(err, check.NotNil)",7474],["// to check whether the returned error was because",6692],["// check whether the returned error was because http.StatusNotModified",6580],["check(err)",5063],[". \"gopkg.in/check.v1\"",4387],["sc.serveG.check()",3320]]},{"word":"checker","context":[["c.Assert(err, checker.IsNil)",16743],["\"github.com/docker/docker/pkg/integration/checker\"",1332],["c.Assert(err, checker.NotNil)",1192],["c.Assert(err, checker.IsNil, check.Commentf(out))",1006],["c.Assert(status, checker.Equals, http.StatusOK)",739],["c.Assert(out, checker.Contains, expected)",727],["c.Assert(status, checker.Equals, http.StatusCreated)",568],["c.Assert(status, checker.Equals, http.StatusNoContent)",523],["c.Assert(err, checker.NotNil, check.Commentf(out))",447],["c.Assert(waitRun(id), checker.IsNil)",436]]},{"word":"cli","context":[["cli.StringFlag{",13352],["Flags: []cli.Flag{",7458],["\"github.com/codegangsta/cli\"",7214],["cli.BoolFlag{",5176],["app := cli.NewApp()",4476],["Action: func(c *cli.Context) {",4387],["package cli",3154],["\"github.com/cloudfoundry/cli/cf/models\"",2208],["app.Commands = []cli.Command{",2042],["ui := new(cli.MockUi)",1997]]},{"word":"client","context":[["return c.s.client.Do(req)",25977],["res, err := c.s.client.Do(req)",25048],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["package client",9340],["return gensupport.SendRequest(c.ctx_, c.s.client, req)",7518],["client.ByInspecting(),",6991],["autorest.WithBaseURL(client.BaseURI),",6605],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138]]},{"word":"close","context":[["close(ch)",4831],["close(done)",4047],["close(storeChannel)",3006],["close(c)",2687],["defer close(done)",1973],["defer close(ch)",1858],["close(out)",1246],["defer close(stopCh)",1107],["defer h.close()",951],["close(stopCh)",773]]},{"word":"closed","context":[["closed bool",1783],["case <-closed:",709],["if s.closed {",678],["go func(done <-chan struct{}, closed <-chan bool) {",600],["s.closed = true",565],["if db.closed {",468],["c.closed = true",420],["closed    bool",404],["if c.closed {",387],["if closed {",352]]},{"word":"cloud","context":[["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/cloud-platform.read-only\",",1870],["CloudPlatformScope = \"https://www.googleapis.com/auth/cloud-platform\"",922],["// Queried from cloud provider, if available.",802],["//     \"https://www.googleapis.com/auth/cloud.useraccounts\",",643],["cloud cloudprovider.Interface,",639],["if kl.cloud != nil {",638],["\"github.com/juju/juju/cloud\"",539],["// to the cloud provider?",495]]},{"word":"cluster","context":[["package cluster",1249],["cluster.Unlock()",715],["// Event is a report of an event somewhere in the cluster.",704],["// NodeTerminated means the node has been removed from the cluster.",681],["// DNSClusterFirst indicates that the pod should use cluster DNS",669],["// cluster.",560],["// ComponentStatus (and ComponentStatusList) holds the cluster validation info.",555],["Cluster *string `locationName:\"cluster\" type:\"string\"`",548],["cluster.Lock()",544],["\"github.com/docker/swarm/cluster\"",496]]},{"word":"cmd","context":[["return cmd",15215],["package cmd",8750],["Run: func(cmd *cobra.Command, args []string) {",7815],["out, _, err := runCommandWithOutput(cmd)",6363],["cmd := &cobra.Command{",5761],["cmd.Stderr = os.Stderr",4643],["if err := cmd.Run(); err != nil {",4108],["c.Process(cmd)",4006],["cmd.Usage()",3990],["cmd.Stdout = os.Stdout",3832]]},{"word":"code","context":[["// Use of this source code is governed by a BSD-style",82711],["// ServerResponse contains the HTTP response code and headers from the",13928],["// code is an error. Response headers are in either",8983],["// status code is an error. Response headers are in either",7314],["// Use of this source code is governed by a MIT-style",5462],["// non-2xx status code is an error. Response headers are in either",5221],["// Use of this source code is governed by an ISC",4711],["// Always reference these packages, just in case the auto-generated code",3048],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by a MIT-license.",2543]]},{"word":"codec1978","context":[["z, r := codec1978.GenHelperDecoder(d)",42393],["z, r := codec1978.GenHelperEncoder(e)",17991],["codec1978 \"github.com/ugorji/go/codec\"",635],["if codec1978.GenVersion != 5 {",610],["5, codec1978.GenVersion, file)",610],["func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {",159],["func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {",159],["func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {",159],["func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {",159],["func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {",159]]},{"word":"codecSelfer1234","context":[["var h codecSelfer1234",59656],["type codecSelfer1234 struct{}",622],["func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {",159],["func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {",159],["func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {",159],["func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {",159],["func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {",125],["func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {",125],["func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {",125],["func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {",125]]},{"word":"codecSelferC_UTF81234","context":[["r.EncodeString(codecSelferC_UTF81234, \"\")",14602],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["r.EncodeString(codecSelferC_UTF81234, string(x.Kind))",9708],["r.EncodeString(codecSelferC_UTF81234, string(\"apiVersion\"))",4865],["r.EncodeString(codecSelferC_UTF81234, string(\"kind\"))",4854],["r.EncodeString(codecSelferC_UTF81234, string(\"metadata\"))",3900],["r.EncodeString(codecSelferC_UTF81234, string(\"items\"))",1977],["r.EncodeString(codecSelferC_UTF81234, string(x.Name))",1636],["r.EncodeString(codecSelferC_UTF81234, string(\"status\"))",1583],["r.EncodeString(codecSelferC_UTF81234, string(x))",1560]]},{"word":"codecSelfer_containerArrayElem1234","context":[["z.DecSendContainerState(codecSelfer_containerArrayElem1234)",58067],["z.EncSendContainerState(codecSelfer_containerArrayElem1234)",51551],["codecSelfer_containerArrayElem1234 = 6",589]]},{"word":"codecSelfer_containerArrayEnd1234","context":[["z.DecSendContainerState(codecSelfer_containerArrayEnd1234)",67764],["z.EncSendContainerState(codecSelfer_containerArrayEnd1234)",12878],["codecSelfer_containerArrayEnd1234  = 7",589]]},{"word":"com","context":[["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["\"github.com/golang/glog\"",24041],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],[". \"github.com/onsi/ginkgo\"",19358],[". \"github.com/onsi/gomega\"",18984],["\"github.com/stretchr/testify/assert\"",18896],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["\"github.com/spf13/cobra\"",12575],["\"github.com/juju/errors\"",11886],["\"github.com/Sirupsen/logrus\"",11173]]},{"word":"command","context":[["package command",4143],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["Command []string `json:\"command,omitempty\"`",783],["// command.",734],["// Command is the command line to execute inside the container, the working directory for the",722],["t.Error(\"Wrong command called\")",686],["switch command {",671],["// specified in the name of the command indicates the number of components",584],["// of the command must match the data type for the specified uniform variable",584],["// Container in which to execute the command.",559]]},{"word":"common","context":[["package common",4399],["\"github.com/juju/juju/apiserver/common\"",1705],["result.Results[i].Error = common.ServerError(err)",1648],["\"github.com/ethereum/go-ethereum/common\"",1399],["\"github.com/prometheus/common/model\"",998],["return nil, common.ErrPerm",805],["result.Results[i].Error = common.ServerError(common.ErrPerm)",766],["result.Results[i].Error = common.ServerError(common.ErrPerm)",766],["\"github.com/mitchellh/packer/common\"",697],["\"github.com/elastic/beats/libbeat/common\"",642]]},{"word":"compliance","context":[["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["* you may not use this file except in compliance with the License.",5867],["//  except in compliance with the License. You may obtain a copy of the License at",2295],["// not use this file except in compliance with the License. You may obtain",1957],["* \"License\"); you may not use this file except in compliance",1013],["\"License\"); you may not use this file except in compliance",974],["//   you may not use this file except in compliance with the License.",603],["// you may not use file except in compliance with the License.",572],["// not use this file except in compliance with the License. A copy of the",503]]},{"word":"conf","context":[["if err := ioutil.WriteFile(\"/etc/resolv.conf\", resolvConfSystem, 0644); err != nil {",793],["return conf",766],["if conf == nil {",498],["package conf",493],["return conf, nil",493],["c.Fatalf(\"/etc/resolv.conf does not exist\")",468],["if err := ioutil.WriteFile(\"/etc/resolv.conf\", tmpResolvConf, 0644); err != nil {",461],["var conf Config",434],["iprog, err := conf.Load()",406],["origResolvConf, err := ioutil.ReadFile(\"/etc/resolv.conf\")",404]]},{"word":"config","context":[["package config",6876],["t.Fatalf(\"bad: %#v\", config)",3311],["&config.Field{",2872],["\"github.com/juju/juju/environs/config\"",2815],["return config, nil",2529],["config: Config{",2509],["return config",2451],["config := meta.(*Config)",2395],["if config == nil {",2335],["Visible:      config.VisibleYes,",2307]]},{"word":"configuration","context":[["// If additional configuration is needed for the client instance use the optional",2272],["\"github.com/cloudfoundry/cli/cf/configuration/core_config\"",1331],["testconfig \"github.com/cloudfoundry/cli/testhelpers/configuration\"",1171],["// configuration.",1130],["\"github.com/cloudfoundry/cli/cf/configuration/coreconfig\"",1051],["// ReplicationController represents the configuration of a replication controller.",716],["// automatically. Name is primarily intended for creation idempotence and configuration",600],["glog.Fatalf(\"Invalid API configuration: %v\", err)",457],["\"code.cloudfoundry.org/cli/cf/configuration/coreconfig\"",408],["// Here you will define your flags and configuration settings.",362]]},{"word":"conn","context":[["defer conn.Close()",14851],["conn.Close()",10441],["return conn, nil",2498],["conn, err := db.Conn()",2262],["conn := meta.(*AWSClient).ec2conn",1686],["if conn == nil {",1607],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["return conn",1118],["err := s.conn.Apps().Insert(a)",1108],["c.conn.Close()",1012]]},{"word":"connection","context":[["// connection.",933],["if strings.Contains(err.Error(), \"connection refused\") {",505],["// URIScheme identifies the scheme used for connection to a host for Get actions",426],["// Close closes the connection.",423],["type connection struct {",404],["// data between stream (representing the user's local connection on their",365],["t.Fatalf(\"error connection to database, %v\", err)",302],["defer connection.Close()",277],["// The ID of the VPC peering connection.",258],["t.Fatalf(\"Unexpected error creating streaming connection: %s\", err)",254]]},{"word":"const","context":[["const (",251804],["const yyr2 bool = false",4300],["const apiVersion = \"v1\"",1097],["const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package",725],["const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package",674],["const MaxSecretSize = 1 * 1024 * 1024",626],["const debug = false",599],["const _ = proto.GoGoProtoPackageIsVersion1",562],["const _ = proto.ProtoPackageIsVersion1",458],["const _ = grpc.SupportPackageIsVersion3",412]]},{"word":"container","context":[["\"container/list\"",3181],["if container == nil {",2578],["kubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"",2519],["container: &api.Container{",2149],["for _, container := range pod.Spec.Containers {",2060],["container.Lock()",1939],["for _, container := range containers {",1887],["\"container/heap\"",1418],["package container",1405],["defer container.Unlock()",1354]]},{"word":"containers","context":[["for _, container := range containers {",1887],["for _, c := range containers {",1728],["if len(containers) == 0 {",700],["\"containers\": [",693],["// the event) or if no container name is specified \"spec.containers[2]\" (container with",671],["// \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered",671],["t.Errorf(\"Unexpected containers created %v\", fakeDocker.Created)",664],["Containers: containers,",651],["// Limit that applies to all containers in a namespace",648],["for i := range containers {",643]]},{"word":"contains","context":[["// ServerResponse contains the HTTP response code and headers from the",13928],["//       \"description\": \"Project ID of the project that contains the instance.\",",966],["// When IsTruncated is true, this element is present and contains the value",718],["// ObjectReference contains enough information to let you inspect or modify the referred object.",706],["// For example if you run go-bindata on data/... and data contains the",699],["// SecretTypeServiceAccountToken contains a token that identifies a service account to the API",513],["// SecretTypeDockercfg contains a dockercfg file that follows the same format rules as ~/.dockercfg",503],["// Marker contains a value to include in the subsequent call that tells the",494],["// LoadBalancer contains the current status of the load-balancer,",485],["// in the list, leading to the insertion of a tombstone object which contains",460]]},{"word":"content","context":[["// exclusively for YouTube content partners.",1618],["//     \"https://www.googleapis.com/auth/content\"",1388],["// manage many different YouTube channels. It allows content owners to",1127],["// on behalf of the content owner specified in the parameter value. This",847],["// parameter is intended for YouTube content partners that own and",847],["content, _ := ioutil.ReadFile(s.d.logFile.Name())",807],["// must be linked to the specified YouTube content owner.",717],["// ----- content types ----",610],["Content string `json:\"content,omitempty\"`",591],["c.Fatalf(\"failed to write tar file content: %v\", err)",561]]},{"word":"context","context":[["\"golang.org/x/net/context\"",29586],["// pending HTTP request will be aborted if the provided context is",22537],["// Context sets the context to be used in this call's Do method. Any",22537],["ctx_         context.Context",9933],["ctx := context.Background()",8554],["ctx_       context.Context",6867],["// Any pending HTTP request will be aborted if the provided context",4780],["// Context sets the context to be used in this call's Do method.",4699],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["ctx context.Context,",3098]]},{"word":"continue","context":[["continue",437040],["continue loop",1262],["continue;",1102],["continue waitLoop",1073],["// previous list request truncated by maxResults. Used to continue a",889],["// NextPageToken: A token used to continue a truncated list request",690],["// ok to continue",626],["continue outer",611],["continue OUTER",577],["// NextPageToken: [Output Only] A token used to continue a truncated",557]]},{"word":"controller","context":[["package controller",2063],["\"k8s.io/kubernetes/pkg/controller\"",1781],["\"k8s.io/kubernetes/pkg/controller/framework\"",1333],["fakePodControl := controller.FakePodControl{}",1235],["// controller.",720],["// ReplicationController represents the configuration of a replication controller.",716],["// ReplicationControllerSpec is the specification of a replication controller.",584],["controller.Run()",576],["ct \"github.com/flynn/flynn/controller/types\"",569],["controller.NoResyncPeriodFunc(),",461]]},{"word":"conversion","context":[["// TODO: Inefficient conversion - can we improve it?",2317],["// If one of the conversion functions is malformed, detect it immediately.",1915],["conversion \"k8s.io/kubernetes/pkg/conversion\"",1475],["conversion \"k8s.io/kubernetes/pkg/conversion\"",1475],["\"k8s.io/kubernetes/pkg/conversion\"",1231],["if err := s.DefaultConvert(in, out, conversion.IgnoreMissingFields); err != nil {",753],["// unable to generate simple pointer conversion for unversioned.Time -> unversioned.Time",550],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/conversion\"",538],["// +k8s:conversion-gen=false",518],["return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)",435]]},{"word":"copy","context":[["You may obtain a copy of the License at",78110],["// You may obtain a copy of the License at",55863],["* You may obtain a copy of the License at",5818],["i += copy(data[i:], m.XXX_unrecognized)",5543],["// You should have received a copy of the GNU Lesser General Public License",5180],["// Permission is hereby granted, free of charge, to any person obtaining a copy",4328],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",4249],["// You should have received a copy of the GNU General Public License",4154],["You should have received a copy of the GNU General Public License",3440],["* You should have received a copy of the GNU General Public License",2903]]},{"word":"core","context":[["package core",4092],["core \"k8s.io/kubernetes/pkg/client/testing/core\"",906],["core \"k8s.io/kubernetes/pkg/client/testing/core\"",906],[". \"aliyun-openapi-go-sdk/core\"",869],["\"k8s.io/kubernetes/pkg/client/testing/core\"",762],["\"launchpad.net/juju-core/state\"",701],["core \"github.com/ipfs/go-ipfs/core\"",677],["core \"github.com/ipfs/go-ipfs/core\"",677],["\"github.com/letsencrypt/boulder/core\"",660],["\"github.com/ethereum/go-ethereum/core/types\"",605]]},{"word":"could","context":[["// It returns an error if the asset could not be found or",1384],["// could not be loaded.",1384],["// ServerTimeout indicating a unique name could not be found in the time allotted, and the client",639],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["// PodUnknown means that for some reason the state of the pod could not be obtained, typically due",575],["glog.Fatalf(\"Cloud provider could not be initialized: %v\", err)",449],["// could not be found.",430],["// Reason could be pulling image,",372],["// obj could be an *api.Pod, or a DeletionFinalStateUnknown marker item.",363],["// caller could create a flag that turns a comma-separated string into a slice",299]]},{"word":"count","context":[["count++",14290],["count := 0",11674],["for i := 0; i < count; i++ {",4225],["count = 1",4214],["if count == 3 {",3687],["var count int",3046],["return count",2209],["if count == 0 {",1908],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723],["count = 0",1437]]},{"word":"cpu","context":[["\"cpu\",",1832],["cpu.Registers.PC = 0x0100",921],["cpu.Execute()",882],["Name:    \"cpu\",",876],["ResourceCPU ResourceName = \"cpu\"",667],["Sources: []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",543],["Sources:    []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",533],["command: `SELECT * FROM db0.rp0.cpu GROUP BY *`,",441],["command: `SELECT * FROM cpu`,",433],["res[api.ResourceCPU] = resource.MustParse(cpu)",409]]},{"word":"cr","context":[["if cr != nil {",21370],["cr.sendContainerState(containerMapValue)",8442],["cr.sendContainerState(containerMapKey)",8442],["cr.sendContainerState(containerMapEnd)",4269],["cr := e.cr",2287],["cr := e.cr",2287],["cr := d.cr",2075],["cr := d.cr",2075],["cr \"github.com/go-openapi/runtime/client\"",412],["timeout: cr.DefaultTimeout,",412]]},{"word":"create","context":[["fmt.Println(\"failed to create session,\", err)",5256],["\"create\", \"start\", \"inspect_container\",",1438],["\"create\", \"start\", \"inspect_container\", \"inspect_container\",",644],["dockerCmd(c, \"network\", \"create\", \"-d\", \"bridge\", \"testnetwork1\")",609],["// users must create.",586],["status, body, err := sockRequest(\"POST\", \"/containers/create\", config)",584],["Failf(\"Failed to create pod: %v\", err)",546],["case \"create\":",480],["// Retrieve the aggregator for this name/tag combination or create one.",464],["aggregator, emitter := itr.create()",464]]},{"word":"created","context":[["// Template is the object that describes the pod that will be created if",815],["// created.",757],["// NodePending means the node has been created/added by the system, but not configured.",681],["t.Errorf(\"Unexpected containers created %v\", fakeDocker.Created)",664],["// provided by the client when the resource is created.",606],["Created string `json:\"created,omitempty\"`",605],["// TemplateRef is a reference to an object that describes the pod that will be created if",604],["// no proxying required and no environment variables should be created for pods",601],["// created. It is not guaranteed to be set in happens-before order across separate operations.",601],["// PodTemplateSpec describes the data a pod should have when created from a template",585]]},{"word":"creates","context":[["// newClient creates, initializes and returns a new service client instance.",2270],["// Similar to VolumeSource but meant for the administrator who creates PVs.",412],["// ServiceSpec describes the attributes that a user creates on a service",408],["creates, deletes := manager.GetCounts(name)",389],["// three channels (file, apiserver, and http) and creates a union of them. For",309],["if creates != 0 || deletes != 1 {",303],["// makePodDataDirs creates the dirs for the pod datas.",295],["// This creates a client, first loading any specified kubeconfig",245],["// pod is unhealthy, so replication controller creates another to take its place",240],["// kubelet is dead, so node controller deleted pods and rc creates more",239]]},{"word":"crypto","context":[["\"crypto/tls\"",13378],["\"crypto/rand\"",10968],["\"crypto/x509\"",7201],["\"crypto/sha256\"",5657],["\"crypto/md5\"",5483],["\"crypto/sha1\"",5410],["\"crypto/rsa\"",4129],["\"crypto\"",2651],["\"crypto/hmac\"",2629],["\"crypto/ecdsa\"",2512]]},{"word":"cs","context":[["if s.cs.async {",2363],["b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1356],["b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1356],["b, warn, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1222],["b, warn, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1222],["cs *CloudStackClient",838],["cs := meta.(*cloudstack.CloudStackClient)",768],["for _, c := range cs {",749],["if cs == nil {",687],["return cs",642]]},{"word":"ctx","context":[["c.ctx_ = ctx",30863],["defer ctx.Close()",13525],["ctx := context.Background()",8554],["ctx := testContext2(t, &ContextOpts{",7875],["case <-ctx.Done():",6555],["if err := r.RoundTrip(ctx, &reqBody, &resBody); err != nil {",5592],["if _, err := buildImageFromContext(name, ctx, true); err != nil {",5159],["ctx := api.NewDefaultContext()",4932],["if _, err := ctx.Plan(); err != nil {",4732],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584]]},{"word":"ctx_","context":[["c.ctx_ = ctx",30863],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["if c.ctx_ != nil {",20265],["ctx_         context.Context",9933],["return gensupport.SendRequest(c.ctx_, c.s.client, req)",7518],["ctx_       context.Context",6867],["ctx_          context.Context",1517],["ctx_                context.Context",854],["ctx_           context.Context",830],["ctx_        context.Context",767]]},{"word":"ctxt","context":[["ctxt.Andptr = ctxt.Andptr[1:]",4714],["ctxt.Andptr = ctxt.Andptr[1:]",4714],["p = obj.Appendp(ctxt, p)",2173],["ctxt.build(token);",832],["ctxt.Andptr[0] = byte(op)",690],["q = obj.Appendp(ctxt, q)",681],["ctxt := make(map[string]interface{})",610],["rel := obj.Addrel(ctxt.Cursym)",550],["v := regoff(ctxt, &p.From)",548],["rel.Off = int32(ctxt.Pc)",483]]},{"word":"current","context":[["// current state by calling UseProgram.",1594],["// Locale returns the current translators string locale",1430],["// Specify the value of a uniform variable for the current program object",866],["\"current\": \"active\",",807],["// Status represents the current information about a pod. This data may not be up",788],["\"current\": \"idle\",",765],["// NodeStatus is information about the current status of a node.",695],["err := fmt.Errorf(\"codecgen version mismatch: current: %v, need %v. Re-generate file: %v\",",664],["// NamespaceStatus is information about the current status of a Namespace.",634],["// Phase is the current lifecycle phase of the namespace.",611]]},{"word":"custom","context":[["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// custom request initialization.",4476],["// Used for custom request initialization logic",924],["// Run custom request initialization if present",896],["// Used for custom service initialization logic",464],["// Run custom service initialization if present",464],["// Used for custom client initialization logic",432],["// Run custom client initialization if present",432],["// Each resource may define custom details that indicate the nature of the",420]]},{"word":"d","context":[["z, r := codec1978.GenHelperDecoder(d)",42393],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["return d",6016],["d.SetId(\"\")",4736],["dd := d.d",3936],["dd := d.d",3936],["x.codecDecodeSelfFromArray(yyl2, d)",3894],["x.codecDecodeSelfFromMap(yyl2, d)",3894]]},{"word":"daemon","context":[["package daemon",3844],["\"github.com/docker/docker/daemon/execdriver\"",1200],["\"github.com/docker/docker/daemon/graphdriver\"",995],["c.Fatalf(\"Could not start daemon with busybox: %v\", err)",939],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["\"github.com/docker/docker/daemon\"",653],["c.Fatalf(\"Could not start daemon: %v\", err)",615],["\"github.com/docker/docker/daemon/network\"",560],["\"github.com/docker/docker/daemon/logger\"",543],["defer nuke(daemon)",454]]},{"word":"data","context":[["b := data[iNdEx]",137749],["// Pretty-print the response data.",34269],["l := len(data)",30341],["data = make([]byte, size)",28307],["return data[:n], nil",28298],["n, err := m.MarshalTo(data)",28284],["data[i] = 0xa",24096],["data[i] = 0x12",17841],["// value can be used to capture response data after the request's \"Send\" method",13378],["skippy, err := skipGenerated(data[iNdEx:])",11760]]},{"word":"database","context":[["\"database/sql\"",11064],["\"database/sql/driver\"",2104],["package database",1053],["t.Fatal(\"Failed to open database:\", err)",606],["// database.",526],["// Open the database.",368],["// External ID of the node assigned by some machine database (e.g. a cloud provider)",365],["\"github.com/btcsuite/btcd/database\"",347],["di := data.Database(database)",326],["t.Fatalf(\"error connection to database, %v\", err)",302]]},{"word":"db","context":[["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["defer db.Close()",12236],["package db",2627],["db.Update(func(tx *bolt.Tx) error {",2491],["conn, err := db.Conn()",2262],["db.Close()",2109],["db := NewTestDB()",2085],["return db",1750],["defer closeDB(t, db)",1745],["tx, err := db.Begin()",1733]]},{"word":"default","context":[["default:",373324],["// unconditionally include in API requests. By default, fields with",36870],["var yys3Slc = z.DecScratchBuffer() // default slice to decode into",3894],["// requests with the JSON null value. By default, fields with empty",2096],["Namespace: \"default\",",1968],["//       \"default\": \"false\",",1930],["// API requests with the JSON null value. By default, fields with empty",1737],["//       \"default\": \"500\",",1712],["// to unconditionally include in API requests. By default, fields with",1463],["// in API requests with the JSON null value. By default, fields with",1097]]},{"word":"defaulting","context":[["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["// to increase compatibility with the existing api it is defaulting to be empty",557],["defaulting.(func(*api.PodSpec))(in)",250],["defaulting.(func(*api.ObjectMeta))(in)",250],["glog.Warningf(\"Unknown protocol %q: defaulting to TCP\", port.Protocol)",248],["defaulting.(func(*api.LocalObjectReference))(in)",238],["defaulting.(func(*api.ObjectFieldSelector))(in)",238],["defaulting.(func(*api.ResourceRequirements))(in)",238],["defaulting.(func(*api.EnvVar))(in)",234],["defaulting.(func(*api.EnvVarSource))(in)",234]]},{"word":"defer","context":[["defer func() {",85652],["defer googleapi.CloseBody(res)",57836],["defer resp.Body.Close()",30994],["defer f.Close()",23064],["defer session.Close()",17293],["defer wg.Done()",15771],["defer conn.Close()",14851],["defer ts.Close()",14767],["defer server.Close()",14598],["defer ctx.Close()",13525]]},{"word":"defined","context":[["// All active uniform variables defined in a program object are initialized",1594],["// Id: Unique identifier for the resource; defined by the server (output",1255],["// load uniform variables defined as sampler types. Loading samplers with any",1168],["// Id: [Output Only] Unique identifier for the resource; defined by the",1058],["// SelfLink: Server defined URL for this resource (output only).",740],["// formats are defined here.",726],["// index 2 in this pod). This syntax is chosen only to have some well-defined way of",671],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// variables defined as int, ivec2, ivec3, ivec4, or arrays of these. The ui",584],["// variables defined as unsigned int, uvec2, uvec3, uvec4, or arrays of",584]]},{"word":"delete","context":[["case \"delete\":",757],["// The value zero indicates delete immediately. If this value is nil, the default grace period for the",604],["// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.",539],["// Value must be non-negative integer. The value zero indicates delete immediately.",539],["// When a delete is dropped, the relist will notice a pod in the store not",469],["t.Errorf(\"Unexpected delete: %s, expected %s\", simpleStorage.deleted, ID)",364],["// If the sources aren't ready, skip deletion, as we may accidentally delete pods",329],["// it, we delete the key from the kubelet-generated ones so we don't have duplicate",305],["t.Errorf(\"Expected 1 delete, found %#v\", fakeClient.DeletedKeys)",289],["// delete",289]]},{"word":"deployment","context":[["deployment, err := c.Extensions().Deployments(ns).Get(deploymentName)",1249],["package deployment",526],["return deployment, nil",457],["c.deployment = deployment",436],["c.deployment = deployment",436],["logReplicaSetsOfDeployment(deployment, allOldRSs, newRS)",429],["//     \"deployment\": {",382],["\"deployment\": c.deployment,",382],["\"deployment\": c.deployment,",382],["err = framework.WaitForObservedDeployment(c, ns, deploymentName, deployment.Generation)",380]]},{"word":"desc","context":[["desc string",828],["desc := matcher.Description()",729],["ExpectThat(desc, Equals(expectedDesc))",728],["desc := r.Desc()",451],["return desc, nil",429],["return desc",386],["return desc, err",373],["// timestamp using orderBy=\"creationTimestamp desc\". This sorts results",326],["// Currently, only sorting by name or creationTimestamp desc is",326],["if desc == nil {",313]]},{"word":"description","context":[["Description string `json:\"description,omitempty\"`",5884],["//       \"description\": \"Name of the project scoping this request.\",",3018],["//       \"description\": \"User profile ID associated with this request.\",",2944],["//       \"description\": \"Name of a bucket.\",",2393],["//       \"description\": \"Project ID for this request.\",",2204],["* description :",1880],["Description *string `locationName:\"description\" type:\"string\"`",1836],["//       \"description\": \"The ID of the file.\",",1377],["Description string `json:\"description\"`",1325],["description string",1205]]},{"word":"descriptor","context":[["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215]]},{"word":"details","context":[["// Licensed under the AGPLv3, see LICENCE file for details.",24944],["// GNU Lesser General Public License for more details.",5096],["// GNU General Public License for more details.",4206],["GNU General Public License for more details.",3592],["* GNU General Public License for more details.",3105],["// See http://olivere.mit-license.org/license.txt for details.",2212],["// Licensed under the LGPLv3, see LICENCE file for details.",1137],["GNU Lesser General Public License for more details.",893],["// for details.",784],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756]]},{"word":"device","context":[["// If omitted, kubelet will attempt to mount the device name.",897],["// device.",303],["devicePath := \"fake/device/path\"",302],["// Not applicable on Windows as Windows does not support --device",285],["extraLabels: []string{\"device\"},",275],["for _, device := range devices {",268],["// One or more block device mapping entries.",245],["package device",213],["m := NewModel(defaultConfig, protocol.LocalDeviceID, \"device\", \"syncthing\", \"dev\", db, nil)",203],["device.Path = deviceMapping.PathInContainer",202]]},{"word":"dir","context":[["defer os.RemoveAll(dir)",6900],["cmd.Dir = dir",1147],["dir := c.MkDir()",1089],["if dir == \"\" {",1059],["return dir",909],["return dir, nil",856],["for _, dir := range dirs {",667],["dir, srv := makeHTTPServer(t)",660],["func RestoreAsset(dir, name string) error {",650],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650]]},{"word":"directory","context":[["// Command is the command line to execute inside the container, the working directory for the",722],["// EmptyDir represents a temporary directory that shares a pod's lifetime.",705],["// directory embedded in the file by go-bindata.",698],["// HostPath represents a directory on the host.",592],["// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not",586],["expected := \"When using ADD with more than one source file, the destination must be a directory and end with a /\"",581],["// RestoreAsset restores an asset under the given directory",540],["// RestoreAssets restores an asset under the given directory recursively",540],["// directory.",435],["// Optional: what type of storage medium should back this directory.",428]]},{"word":"disk","context":[["// Optional: Partition on the disk to mount.",903],["disk {",823],["t.Fatalf(\"can't update disk space manager: %v\", err)",538],["// Unique name of the PD resource. Used to identify the disk in GCE",520],["// The disk must also be in the same GCE project and zone as the kubelet.",500],["Name:      \"disk\",",470],["// AWSElasticBlockStore represents an AWS EBS disk that is attached to a",444],["// resource was the last reference to that disk on the kubelet.",405],["Message:            \"out of disk space\",",392],["\"disk\",",371]]},{"word":"distributed","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["// The go-ethereum library is distributed in the hope that it will be useful,",3822],["This program is distributed in the hope that it will be useful,",3745],["* This program is distributed in the hope that it will be useful,",3470],["// This program is distributed in the hope that it will be useful,",3031]]},{"word":"do","context":[["// furnished to do so, subject to the following conditions:",4317],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// do nothing",1648],["* !!! Please do not edit this file !!!",1486],["// nothing to do",1239],["furnished to do so, subject to the following conditions:",1015],["// This parameter is optional. If you do not include it, it defaults to 100.",764],["// TODO(roberthbailey): Can we do this without having credentials to talk",495],["// Nothing to do.",481],["//  Note that you are welcome to modify this code under the condition that you do not remove any",466]]},{"word":"docker","context":[["package docker",2942],["\"github.com/docker/docker/runconfig\"",2500],["\"github.com/docker/docker/runconfig\"",2500],["\"github.com/docker/docker/api/types\"",2417],["\"github.com/docker/docker/api/types\"",2417],["\"github.com/docker/docker/utils\"",2300],["\"github.com/docker/docker/utils\"",2300],["\"github.com/docker/engine-api/types\"",2215],["\"github.com/docker/docker/pkg/stringid\"",1946],["\"github.com/docker/docker/pkg/stringid\"",1946]]},{"word":"docs","context":[["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["// Permissions (http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).",1047],["// GitLab API docs:",887],["// http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",815],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811]]},{"word":"does","context":[["t.Fatalf(\"the value %s in get result does not match the value %s in request\",",1107],["\"or entity does not exist\", id)) {",1097],["//       \"description\": \"Cloud SQL instance ID. This does not include the project ID.\",",1087],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["// exist if the pod does not exist.",699],["// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.",588],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["testRequires(c, DaemonIsLinux) // Windows does not support ARG",494],["c.Fatalf(\"/etc/resolv.conf does not exist\")",468]]},{"word":"doesn","context":[["// below doesn't.",3048],["// Ignore whitespace since that's what were verifying doesn't change stuff",384],["// The resource doesn't exist anymore",329],["// The parser stores options it doesn't recognize here. See above.",318],["// Create the root directory if it doesn't exists",308],["testRequires(c, DaemonIsLinux) // Windows doesn't have httpserver image yet",290],["// Sometimes AWS just has consistency issues and doesn't see",264],["// Test that creating a container with a volume doesn't crash. Regression test for #995.",240],["// This will exit immediately if it doesn't need to do anything.",232],["// TODO: What to do for AWS?  It doesn't support replicas",208]]},{"word":"don","context":[["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// Status is a return value for calls that don't return other objects.",439],["// However, AWS Identity and Access Management (IAM) users don't have any permissions",342],["// it, we delete the key from the kubelet-generated ones so we don't have duplicate",305],["// Kubelets without masters (e.g. plain GCE ContainerVM) don't set env vars.",305],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["//       for pods and replication controllers so we don't",286],["// so that we don't remove volumes associated with terminated but not yet",270],["// Make sure that -f is ignored and that we don't use the Dockerfile",246],["// TODO: Since we don't have support for bulk resource deletion in the API,",244]]},{"word":"done","context":[["case <-done:",7188],["<-done",5140],["done := make(chan struct{})",4483],["done <- true",4078],["close(done)",4047],["done := make(chan bool)",3313],["defer close(done)",1973],["done = true",1742],["done <- struct{}{}",1738],["if done {",1617]]},{"word":"driver","context":[["_ \"github.com/go-sql-driver/mysql\"",2196],["\"database/sql/driver\"",2104],["return nil, driver.ErrBadConn",873],["package driver",733],["return driver.ErrBadConn",675],["// mgo - MongoDB driver for Go",625],["type driver struct {",554],["if err != driver.ErrBadConn {",488],["// Value implements the driver Valuer interface.",438],["driver := state.Get(\"driver\").(Driver)",424]]},{"word":"dst","context":[["retconv.Dest(dst)",7682],["dst := &javabind.Callable{}",4992],["unique_x.Callable = dst",4987],["return *dst",2686],["return dst",1789],["dst := new(string)",1779],["//\t\tdst[MAX:256] := 0",646],["//\t\tdst[MAX:512] := 0",643],["a0: dst.c(),",468],["if dst == nil {",466]]},{"word":"e","context":[["if e != nil {",28356],["z, r := codec1978.GenHelperEncoder(e)",17991],["return e",13578],["l = e.Size()",8079],["if e == nil {",5945],["ee := e.e",3961],["ee := e.e",3961],["err = e",3789],["return nil, e",3688],["if e := recover(); e != nil {",3348]]},{"word":"e1","context":[["if e1 != 0 {",59896],["err = errnoErr(e1)",29301],["err = e1",24550],["err = error(e1)",5626],["errno = int(e1)",3083],["errno = int(e1);",1040],["r0, _, e1 := RawSyscall(SYS_SETSID, 0, 0, 0)",476],["_, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)",476],["_, _, e1 := RawSyscall(SYS_SETPGID, uintptr(pid), uintptr(pgid), 0)",476],["r0, _, e1 := RawSyscall(SYS_GETPGID, uintptr(pid), 0, 0)",476]]},{"word":"each","context":[["// Pages invokes f for each page of results.",2234],["// calling the \"fn\" function with the response data for each page. To stop",1419],["// without having to provide authentication credentials for each",847],["// _bindata is a table, holding each asset generator, mapped to its name.",738],["// When there are multiple elements, the lists of nodes corresponding to each",592],["// for each element in value, and it should match the number of components in",584],["i = enum.each(func(cursor int) {",578],["// If unspecified, the container runtime will allocate a random SELinux context for each",558],["// for each node that meets all of the scheduling requirements (resource",513],["// LimitRange sets resource usage limits for each kind of resource in a Namespace",469]]},{"word":"ec2","context":[["svc := ec2.New(nil)",4408],["svc := ec2.New(session.New())",2581],["err = ec2.query(params, resp)",2002],["\"github.com/aws/aws-sdk-go/service/ec2\"",1935],["Filters: []*ec2.Filter{",1893],["package ec2",1274],["svc := ec2.New(sess)",856],["filter := ec2.NewFilter()",583],["request := &ec2.DescribeInstancesInput{",562],["UserIdGroupPairs: []*ec2.UserIdGroupPair{",447]]},{"word":"either","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["// code is an error. Response headers are in either",8983],["// the Free Software Foundation, either version 3 of the License, or",8408],["// status code is an error. Response headers are in either",7314],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["// non-2xx status code is an error. Response headers are in either",5221],["the Free Software Foundation, either version 3 of the License, or",4294],["//  either express or implied. See the License for the specific language governing permissions",2295]]},{"word":"element","context":[["&element.Field{",1971],["Visible:   element.VisibleYes,",1466],["//  Use a Resource element with the domain name to limit the action to only",846],["// specified domains. Use an Action element to allow or deny permission to call",826],["Type:      element.TypeSelect,",815],["// AttributeValueList can contain only one AttributeValue element of type String,",723],["// When IsTruncated is true, this element is present and contains the value",718],["// element of a different type than the one provided in the request, the value",606],["// for each element in value, and it should match the number of components in",584],["&element.Group{",530]]},{"word":"else","context":[["} else {",1764697],["} else if this == nil {",24188],["} else if err != nil {",18548],["} else if z.HasExtensions() && z.EncExt(x) {",13814],["} else if z.HasExtensions() && z.DecExt(x) {",13814],["} else if !query.success() {",3906],["} else if yyct2 == codecSelferValueTypeArray1234 {",3850],["} else if containerLen < 0 {",3654],["} else if that1.Field1 != nil {",2873],["} else if this.Field1 != nil {",2873]]},{"word":"empty","context":[["// server regardless of whether the field is empty or not. This may be",38333],["// used to include empty fields in Patch requests.",38333],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// null. It is an error if a field in this list has a non-empty value.",4930],["// empty value appearing in NullFields will be sent to the server as",3833],["// requests with the JSON null value. By default, fields with empty",2096],["// API requests with the JSON null value. By default, fields with empty",1737],["// field is empty or not. This may be used to include empty fields in",1152],["// field is empty or not. This may be used to include empty fields in",1152],["// empty values are omitted from API requests. However, any field with",1097]]},{"word":"encoding","context":[["\"encoding/json\"",100948],["\"encoding/binary\"",16315],["\"encoding/base64\"",13744],["\"encoding/hex\"",11962],["\"encoding/xml\"",8744],["\"encoding/gob\"",3635],["\"encoding/pem\"",3077],["\"encoding/csv\"",1800],["import \"encoding/json\"",1415],["\"encoding/asn1\"",976]]},{"word":"end","context":[["{{end}}",12755],["} // end switch yys3",3894],["} // end for yyj3",3894],["{{ end }}",2908],["end",2139],["return thrift.PrependError(fmt.Sprintf(\"%T read struct end error: \", p), err)",1514],["return fmt.Errorf(\"%T read struct end error: %s\", p, err)",1365],["z.raw.end--",843],["end := time.Now()",769],["z.data.end = z.raw.end",700]]},{"word":"endpoint","context":[["Endpoint:      endpoint,",2282],["BasePath  string // API endpoint base URL",2098],["BasePath string // API endpoint base URL",705],["// Download fetches the API endpoint's \"media\" value, instead of the normal",619],["// The IP of this endpoint.",594],["return func(ep *endpoint) {",554],["endpoint string",482],["// endpoint.",415],["\"github.com/go-kit/kit/endpoint\"",403],["// Required: EndpointsName is the endpoint name that details Glusterfs topology",391]]},{"word":"endpoints","context":[["endpoints: api.Endpoints{",1887],["// EndpointsList is a list of endpoints.",723],["// The resulting set of endpoints can be viewed as:",594],["// expanded set of endpoints is the Cartesian product of Addresses x Ports.",594],["endpoints.syncService(ns + \"/foo\")",382],["endpoints.serviceStore.Store.Add(&api.Service{",379],["// The set of all endpoints is the union of all subsets.",371],["// Endpoints is a collection of endpoints that implement the actual service.  Example:",355],["endpoints[0] = api.Endpoints{",316],["EndpointsName string `json:\"endpoints\"`",316]]},{"word":"engine","context":[["package engine",2445],["\"github.com/docker/engine-api/types\"",2215],["return engine.StatusOK",1611],["\"github.com/cockroachdb/cockroach/storage/engine\"",1461],["session := engine.NewSession()",1238],["defer engine.Close()",1229],["engine := createTestEngine()",1208],["engine := createTestEngine(stopper)",1117],["\"github.com/docker/docker/engine\"",1022],["\"github.com/cgrates/cgrates/engine\"",614]]},{"word":"entry","context":[["for _, entry := range entries {",993],["if entry == nil {",950],["type entry struct {",619],["return entry",463],["//   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",429],["// Optional: The kubernetes object related to the entry point.",426],["return entry, nil",354],["if entry.IsDir() {",309],["entries = append(entries, entry)",308],["// The list has one entry per container in the manifest. Each entry is currently the output",303]]},{"word":"enum","context":[["//       \"enum\": [",10845],["// @enum CountryCode",3206],["// @enum InstanceType",2006],["currencies             []string // idx = enum of currency code",1228],["// @enum ErrorCode",1154],["// @enum ResourceType",958],["// @enum EventType",806],["// @enum summaryKeyType",625],["i = enum.each(func(cursor int) {",578],["RequestPayer *string `location:\"header\" locationName:\"x-amz-request-payer\" type:\"string\" enum:\"RequestPayer\"`",576]]},{"word":"env","context":[["env := MakeSimpleEnv()",6022],["env := makeCheckBinaryNonConstExprEnv()",1980],["return env",1513],["env := makeEnv()",1125],["cmd.Env = env",1113],["env := makeEnviron(c)",961],["env := t.Prepare(c)",925],["env := suite.makeEnviron()",838],["return env, nil",813],["env.Types[\"s2\"] = reflect.TypeOf(s2{})",727]]},{"word":"err","context":[["if err != nil {",3731570],["return err",1518678],["return nil, err",870029],["t.Fatal(err)",320011],["panic(err)",172161],["if err == nil {",169101],["var err error",136062],["c.Assert(err, jc.ErrorIsNil)",135421],["c.Assert(err, IsNil)",104368],["return \"\", err",83980]]},{"word":"error","context":[["var err error",136062],["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Fatalf(\"unexpected error: %v\", err)",23940],["// Message from an error.",19226],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// A service error occurred",13362],["// error from Do is the result of In-None-Match.",12114],["// error which satisfies the awserr.Error interface.",11875],["err error",10374],["// googleapi.IsNotModified to check whether the returned error was",9322]]},{"word":"errors","context":[["\"errors\"",116139],["return errors.Trace(err)",18398],["return nil, errors.Trace(err)",16060],["\"github.com/juju/errors\"",11886],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["\"k8s.io/kubernetes/pkg/api/errors\"",4582],["\"github.com/pkg/errors\"",3697],["if errors.IsNotFound(err) {",3161],["return nil, errors.New(\"client is nil\")",3069]]},{"word":"errs","context":[["allErrs := errs.ValidationErrorList{}",9255],["t.Errorf(\"expected success: %v\", errs)",4335],["errs = append(errs, err)",3468],["errs = append(errs, err)",3468],["NotEqual(t, errs, nil)",3319],["if len(errs) == 0 {",3159],["if len(errs) != 0 {",3014],["if len(errs) > 0 {",2901],["Equal(t, errs, nil)",2843],["return errs",2524]]},{"word":"etcd","context":[["R: &etcd.Response{",3707],["Node: &etcd.Node{",3557],["package etcd",3088],["\"github.com/coreos/go-etcd/etcd\"",2033],["\"github.com/coreos/go-etcd/etcd\"",2033],["\"github.com/coreos/etcd/raft/raftpb\"",1472],["\"github.com/coreos/etcd/pkg/types\"",1228],["// Copyright 2015 The etcd Authors",1211],["Nodes: []*etcd.Node{",1056],["\"github.com/coreos/etcd/raft\"",1036]]},{"word":"event","context":[["// Event is a report of an event somewhere in the cluster.",704],["// and event is recorded or neither should happen, see issue #6055.",692],["// the event) or if no container name is specified \"spec.containers[2]\" (container with",671],["package event",668],["for _, event := range events {",666],["return event, nil",663],["// fails. The associated event attribute's cause parameter will be set to OPERATION_NOT_PERMITTED.",654],["t.Fatalf(\"expected watch event type %s, got %s\", e, a)",652],["// The number of times this event has occurred.",646],["// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",635]]},{"word":"events","context":[["DescribeEvents(events, out)",1893],["if events != nil {",1746],["var events *api.EventList",798],["package events",738],["// EventList is a list of events.",704],["for _, event := range events {",666],["for _, e := range events {",624],["events := strings.Split(out, \"\\n\")",540],["// events.  For the PostStart and PreStop lifecycle handlers, management of the container blocks",536],["Resource(\"events\").",527]]},{"word":"example","context":[["// Usage example:",3149],["// For example:",2452],["* @example",1369],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["// Service is a named abstraction of software service (for example, mysql) consisting of local port",734],["// For example if you run go-bindata on data/... and data contains the",699],["// or the resource may be deleted prior to this time. For example, a user may request that",613],["// For example, given:",596]]},{"word":"except","context":[["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["* you may not use this file except in compliance with the License.",5867],["//  except in compliance with the License. You may obtain a copy of the License at",2295],["// not use this file except in compliance with the License. You may obtain",1957],["* \"License\"); you may not use this file except in compliance",1013],["\"License\"); you may not use this file except in compliance",974],["//   you may not use this file except in compliance with the License.",603],["// you may not use file except in compliance with the License.",572],["// not use this file except in compliance with the License. A copy of the",503]]},{"word":"exec","context":[["\"os/exec\"",30565],["func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },",1022],["func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },",1022],["\"k8s.io/kubernetes/pkg/util/exec\"",819],["var cmd *exec.Cmd",733],["pushCmd := exec.Command(dockerBinary, \"push\", repoName)",647],["package exec",637],["buildCmd := exec.Command(dockerBinary, args...)",581],["// command  is root ('/') in the container's filesystem.  The command is simply exec'd, it is",541],["cmd := exec.Command(",533]]},{"word":"exist","context":[["if !exist {",1269],["\"or entity does not exist\", id)) {",1097],["// exist than the specified MaxRecords value, a pagination token called a marker",736],["if exist {",702],["// exist if the pod does not exist.",699],["// exist if the pod does not exist.",699],["// nil if no more results exist.",683],["// A GCE PD must exist and be formatted before mounting to a container.",503],["// you want in the response. If additional items exist beyond the maximum you",494],["c.Fatalf(\"/etc/resolv.conf does not exist\")",468]]},{"word":"existing","context":[["// to increase compatibility with the existing api it is defaulting to be empty",557],["// Default: Uses existing setting",335],["// HostPath represents a pre-existing file or directory on the host",321],["// Stop the workers for no-longer existing pods.",295],["return existing, nil",283],["if existing == nil {",273],["if existing != nil {",254],["existing: emptyNode,",239],["fakeClient.Data[path] = item.existing",223],["// TestRunWorkdirExistsAndIsFile checks that if 'docker run -w' with existing file can be detected",219]]},{"word":"exists","context":[["if !exists {",11830],["if exists {",6106],["RUN touch /exists",1184],["exists = true",976],["// regardless of whether the variable exists or not.",936],["return exists",907],["if !exists || err != nil {",838],["var exists bool",827],["RUN touch /exists/exists_file",736],["RUN mkdir /exists",736]]},{"word":"exp","context":[["exp:     `{\"results\":[{}]}`,",2823],["if got != exp {",2794],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["t.Fatalf(\"unexpected results\\nexp: %s\\ngot: %s\\n\", exp, res)",647],["t.Fatalf(\"value length mismatch: got %v, exp %v\", got, exp)",516],["t.Fatalf(\"value length mismatch: got %v, exp %v\", got, exp)",516],["exp:     `{\"error\":\"error parsing query: mixing aggregate and non-aggregate queries is not supported\"}`,",456],["t.Fatal(len(got), len(exp))",423],["if got, exp := values[i].Value(), v.Value(); got != exp {",413],["if got, exp := values[i].Value(), v.Value(); got != exp {",413]]},{"word":"expect","context":[["expect{",977],["expect string",941],["expect(t, err, nil)",685],["if got != expect {",509],["lbrace := p.expect(token.LBRACE)",501],["expect(t, recorder.Code, http.StatusOK)",475],["rbrace := p.expect(token.RBRACE)",458],["if expect != got {",399],["p.expect(')')",388],["p.expect(';')",371]]},{"word":"expected","context":[["expected string",17664],["if s != tt.expected {",13631],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["if actual != expected {",9135],["t.Errorf(\"expected success: %v\", errs)",4335],["expected locales.PluralRule",4302],["// \texpected: locales.PluralRuleOther,",4284],["t.Errorf(\"expected %v, got %v\", e, a)",2940],["// \texpected: locales.PluralRuleOne,",2856],["expected bool",2770]]},{"word":"expr","context":[["return expr",1380],["if expr == nil {",857],["expr: &ruleRefExpr{",837],["expr: &seqExpr{",777],["return expr, nil",594],["expr: &actionExpr{",553],["x.expr = e",509],["switch expr := expr.(type) {",496],["switch expr := expr.(type) {",496],["return false, expr",464]]},{"word":"express","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["//  either express or implied. See the License for the specific language governing permissions",2295],["// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",2078],["KIND, either express or implied.  See the License for the",956],["//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",598],["// express or implied. See the License for the specific language governing",503],["** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",470]]},{"word":"extensions","context":[["\"k8s.io/kubernetes/pkg/apis/extensions\"",4264],["Spec: extensions.DaemonSetSpec{",2010],["Spec: extensions.ReplicaSetSpec{",1726],["Spec: extensions.DeploymentSpec{",769],["case *extensions.Deployment:",699],["Spec: extensions.JobSpec{",618],["old: extensions.DaemonSet{",543],["update: extensions.DaemonSet{",543],["Spec: extensions.HorizontalPodAutoscalerSpec{",536],["Spec: extensions.ScaleSpec{",443]]},{"word":"f","context":[["defer f.Close()",23064],["f.Close()",12895],["return f",9233],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["if f == nil {",3885],["return f, nil",3685],["f.Lock()",3638],["defer f.Unlock()",3547],["f()",3395],["for _, f := range files {",2967]]},{"word":"fail","context":[["// fail if the object's ETag matches the given value. This is useful for",12114],["fail:   true,",1900],["panic(\"fail\")",1625],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["// The following cases will fail, so die now",527],["// PullAlways means that kubelet always attempts to pull the latest image.  Container will fail If the pull fails.",510],["// we will try to respect it or else fail the request.  This field can",486],["fail:  true,",475],["It(\"should fail\", func() {",456],["// some versions of lxc might make this test fail",432]]},{"word":"failed","context":[["failed = true",8862],["fmt.Println(\"failed to create session,\", err)",5256],["t.Fatalf(\"test init failed: %s\", err)",3640],["t.Errorf(\"SetUp() failed: %v\", err)",1242],["t.Fatalf(\"marshaling to JSON failed: %v\", err)",1208],["if failed {",1041],["c.Fatalf(\"failed to run container: %v, output: %q\", err, out)",954],["c.Fatalf(\"failed to get the container count: %s\", err)",840],["c.Fatalf(\"build failed to complete: %q %q\", out, err)",816],["t.Fatalf(\"failed to run container: %v, output: %q\", err, out)",807]]},{"word":"fake","context":[["tf.Client = &fake.RESTClient{",2082],["package fake",1818],["Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {",1217],["th.TestHeader(t, r, \"X-Auth-Token\", fake.TokenID)",1087],["\"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake\"",807],["fake.invocations[key] = [][]interface{}{}",601],["if fake.invocations == nil {",601],["fake.invocations = map[string][][]interface{}{}",601],["if fake.invocations[key] == nil {",601],["return fake.invocations",601]]},{"word":"false","context":[["return false",425000],["if false {",153082],["return false, nil",39129],["return false, err",36650],["false,",24189],["return nil, false",12527],["found := false",10732],["Mandatory:   false,",8199],["return \"\", false",6193],["NonBlank:    false,",6041]]},{"word":"fd","context":[["fd = int(r0)",3024],["fd.Close()",1657],["defer fd.Close()",1502],["defer fd.decref()",613],["func Fchdir(fd int) (err error) {",490],["func fcntl(fd int, cmd int, arg int) (val int, err error) {",490],["func Close(fd int) (err error) {",484],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["_, _, e1 := Syscall(SYS_FCHDIR, uintptr(fd), 0, 0)",476],["_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)",476]]},{"word":"field","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// server regardless of whether the field is empty or not. This may be",38333],["allErrs := field.ErrorList{}",11293],["// null. It is an error if a field in this list has a non-empty value.",4930],["// values are omitted from API requests. However, any field with an",3833],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846],["return fmt.Errorf(\"proto: wrong wireType = %d for field ObjectMeta\", wireType)",1792],["return fmt.Errorf(\"proto: wrong wireType = %d for field Items\", wireType)",1724],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["\"k8s.io/kubernetes/pkg/util/validation/field\"",1577]]},{"word":"fieldNum","context":[["switch fieldNum {",30431],["fieldNum := int32(wire >> 3)",29949],["if fieldNum <= 0 {",26126],["fieldNum := r.Intn(3)",192],["fieldNum := r.Intn(102)",128],["fieldNum := r.Intn(9)",128],["return fmt.Errorf(\"proto: Event: illegal tag %d (wire type %d)\", fieldNum, wire)",102],["return fmt.Errorf(\"proto: Node: illegal tag %d (wire type %d)\", fieldNum, wire)",99],["return fmt.Errorf(\"proto: ExportOptions: illegal tag %d (wire type %d)\", fieldNum, wire)",90],["return fmt.Errorf(\"proto: Castaway: illegal tag %d (wire type %d)\", fieldNum, wire)",88]]},{"word":"fields","context":[["// used to include empty fields in Patch requests.",38333],["// unconditionally include in API requests. By default, fields with",36870],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["// Validate inspects the fields of the type to determine if they are valid.",18383],["\"k8s.io/kubernetes/pkg/fields\"",6969],["// This may be used to include null fields in Patch requests.",4930],["c.params_.Set(\"fields\", googleapi.CombineFields(s))",4079]]},{"word":"file","context":[["// license that can be found in the LICENSE file.",96872],["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["// Licensed under the AGPLv3, see LICENCE file for details.",24944],["defer file.Close()",11992],["* you may not use this file except in compliance with the License.",5867],["// permissions and limitations under the License. See the AUTHORS file",4735],["// This file is part of the go-ethereum library.",3823],["file.Close()",3815],["// that can be found in the LICENSE file.",3572]]},{"word":"filename","context":[["f, err := os.Open(filename)",1490],["file, err := os.Open(filename)",1268],["filename string",1198],["if filename == \"\" {",880],["data, err := ioutil.ReadFile(filename)",773],["defer os.Remove(filename)",624],["for _, filename := range filenames {",577],["filename := randomPath(32)",542],["f, err := os.Create(filename)",478],["return filename",468]]},{"word":"filepath","context":[["\"path/filepath\"",65545],["return filepath.SkipDir",2068],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))",496],["err = RestoreAssets(dir, filepath.Join(name, child))",496],["if err := ioutil.WriteFile(filepath.Join(tmpDir, \"Dockerfile\"), []byte(dockerfile), 0644); err != nil {",492],["testTar, err := os.Create(filepath.Join(tmpDir, \"test.tar\"))",486],["path := filepath.Join(dest, hdr.Name)",354],["return filepath.Join(testContext.RepoRoot, \"examples/guestbook-go\", file)",342]]},{"word":"files","context":[["It is generated from these files:",4689],["// of this software and associated documentation files (the \"Software\"), to deal",4240],["for _, file := range files {",3516],["for _, f := range files {",2967],["of this software and associated documentation files (the \"Software\"), to deal",1061],["return files, nil",704],["if len(files) == 0 {",611],["var files []string",591],["return files",560],["files = append(files, f)",463]]},{"word":"filter","context":[["//     \"filter\": {",2292],["if v, ok := c.opt_[\"filter\"]; ok {",1559],["c.opt_[\"filter\"] = filter",1559],["params.Set(\"filter\", fmt.Sprintf(\"%v\", v))",1559],["c.opt_[\"filter\"] = filter",1559],["// Filter sets the optional parameter \"filter\": Filter expression for",965],["// where Purpose is X, see the tag:key=value filter.",931],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931]]},{"word":"find","context":[["t.Errorf(\"Can't find the plugin by name\")",1899],["// CauseTypeFieldValueNotFound is used to report failure to find a requested value",428],["// launch a pod to find a node which can launch a pod. We intentionally do",396],["return \"\", fmt.Errorf(\"Could not find an exact match for %s: %+v\", name, l)",336],["// find your project ID as the value of the DashboardPlace:cid URL",305],["/* consult goto table to find next state */",300],["/* find a state where \"error\" is a legal shift action */",300],["// Use the first external IP address we find on the node, and",267],["finder := find.NewFinder(client.Client, true)",261],["t.Errorf(\"Expected to find controller under key %v\", key)",258]]},{"word":"first","context":[["first = false",2884],["first := true",2375],["if first {",1830],["if !first {",1146],["c.Assert(waitRun(\"first\"), check.IsNil)",1141],["// Pos reports the position of the first component of n or zero if it's empty.",692],["// first, if it is available, then fall back on the default (as",669],["// TODO: use PageToken to list all not just the first 500",648],["// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",635],["//   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",429]]},{"word":"flag","context":[["\"flag\"",41795],["flag.Parse()",29569],["flag.Usage()",6074],["flag.PrintDefaults()",5196],["flag.Usage = func() {",2215],["flag.Usage = usage",1772],["args := flag.Args()",1763],["flag \"github.com/docker/docker/pkg/mflag\"",1694],["cmd.Require(flag.Min, 1)",1008],["set := flag.NewFlagSet(\"test\", 0)",1007]]},{"word":"flags","context":[["{lang: 0x0, script: 0x0, flags: 0x0},",1858],["flags := cmd.Flags()",920],["\"github.com/cloudfoundry/cli/flags\"",803],["\"github.com/vmware/govmomi/govc/flags\"",683],["package flags",630],["\"github.com/jessevdk/go-flags\"",611],["flags: []string{",604],["if err := flags.Parse(args); err != nil {",556],["fs := make(map[string]flags.FlagSet)",529],["sh.flags = SHF_ALLOC",488]]},{"word":"float32","context":[["case float32:",2683],["Float32() float32",931],["mapStringForStringToFloatMap := \"map[string]float32{\"",553],["mv = float32(dd.DecodeFloat(true))",468],["this.Field2[i] = float32(r.Float32())",414],["case *float32:",412],["var v float32",398],["x.KubeAPIQPS = float32(r.DecodeFloat(true))",394],["r.EncodeFloat32(float32(x.KubeAPIQPS))",394],["case float32, float64:",394]]},{"word":"float64","context":[["case float64:",6780],["num      float64",4303],["Float64() float64",945],["func() float64 {",731],["num1     float64",717],["num2     float64",717],["xf = float64(xn)",693],["case *float64:",666],["v2 := float64(math.Float64frombits(v))",629],["floatBuiltin1(func(x float64) (Datum, error) {",616]]},{"word":"fmt","context":[["\"fmt\"",423930],["fmt.Println(err.Error())",36001],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["fmt.Println(err)",20105],["fmt.Println(resp)",19340],["import \"fmt\"",17353],["//        fmt.Println(resp)",13378],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["fmt.Println(awsutil.StringValue(resp))",10680]]},{"word":"fn","context":[["if fn != nil {",5078],["if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {",2234],["if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {",2234],["// iterating, return false from the fn function.",1419],["// calling the \"fn\" function with the response data for each page. To stop",1419],["if fn == nil {",1171],["fn()",1088],["return fn",1069],["return fn, fn",924],["return fn, fn",924]]},{"word":"following","context":[["// furnished to do so, subject to the following conditions:",4317],["// modification, are permitted provided that the following conditions are",1972],["// Error can be either of the following types:",1860],["// notice, this list of conditions and the following disclaimer.",1841],["// copyright notice, this list of conditions and the following disclaimer",1838],["// modification, are permitted provided that the following conditions are met:",1243],["* modification, are permitted provided that the following conditions are",1119],["//    this list of conditions and the following disclaimer in the documentation",1096],["//    list of conditions and the following disclaimer.",1055],["furnished to do so, subject to the following conditions:",1015]]},{"word":"foo","context":[["Name: \"foo\",",9020],["\"foo\": \"bar\",",7497],["Name:      \"foo\",",6661],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["ID = foo",3453],["Namespace: \"foo\",",3367],["Name:   \"foo\",",3234],["Name:            \"foo\",",2058],["ID: \"foo\",",2032],["\"name\": \"foo\",",1956]]},{"word":"for","context":[["for {",227914],["for shift := uint(0); ; shift += 7 {",155764],["See the License for the specific language governing permissions and",78733],["// for more information.",56535],["for i := 0; i < b.N; i++ {",52243],["// See the License for the specific language governing permissions and",45859],["for iNdEx < l {",30802],["// Licensed under the AGPLv3, see LICENCE file for details.",24944],["for _, tt := range tests {",22910],["for _, test := range tests {",20305]]},{"word":"form","context":[["//     * Redistributions in binary form must reproduce the above",1736],["req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",1373],["// 2. Redistributions in binary form must reproduce the above copyright notice,",1300],["</form>",1244],["// Example printed form:",1020],["*     * Redistributions in binary form must reproduce the above",979],["request.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",805],["// for filtering listed resources, in the form filter={expression}. Your",693],["// It is represented in RFC3339 form and is in UTC.",652],["// The serialized form of the secret data is a base64 encoded string,",626]]},{"word":"format","context":[["//       \"format\": \"int64\",",14396],["//       \"format\": \"int32\",",9559],["//       \"format\": \"uint32\",",6403],["//       \"format\": \"uint64\",",3335],["//       \"format\": \"date-time\",",1800],["\"Invalid parameter id value=%s due to incorrect long value format, \"+",1308],["// format.",1244],["// Go support for Protocol Buffers - Google's data interchange format",1229],["\"go/format\"",1228],["switch format {",1061]]},{"word":"found","context":[["// license that can be found in the LICENSE file.",96872],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["if !found {",26978],["found = true",13797],["found := false",10732],["if found {",7813],["// that can be found in the LICENSE file.",3572],["// found in the LICENSE file.",3453],["if v, found := p.p[\"id\"]; found {",2786]]},{"word":"framework","context":[["framework.ExpectNoError(err)",3845],["Type:        framework.TypeString,",2224],["framework.ResourceEventHandlerFuncs{",1778],["Callbacks: map[logical.Operation]framework.OperationFunc{",1683],["\"k8s.io/kubernetes/test/e2e/framework\"",1587],["req *logical.Request, data *framework.FieldData) (*logical.Response, error) {",1515],["\"k8s.io/kubernetes/pkg/controller/framework\"",1333],["Fields: map[string]*framework.FieldSchema{",1271],["&framework.Path{",1034],["package framework",819]]},{"word":"from","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// Message from an error.",19226],["// ServerResponse contains the HTTP response code and headers from the",13928],["// error from Do is the result of In-None-Match.",12114],["It is generated from these files:",4689],["// values are omitted from API requests. However, any field with an",3833],["// END Unmarshal arguments from response.",2807],["// BEGIN Unmarshal arguments from response.",2807],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// A non-nil error returned from f will halt the iteration.",2234]]},{"word":"fs","context":[["package fs",1109],["return fs",998],["return fs.WrapErr(err)",977],["fs.mu.Lock()",677],["for _, f := range fs {",670],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["outBuf := fs.Output.Bytes()",576],["defer fs.mu.Unlock()",546],["tok = fs.Scan()",537],["fs := make(map[string]flags.FlagSet)",529]]},{"word":"func","context":[["go func() {",124274],["func main() {",104447],["func init() {",96919],["defer func() {",85652],["BeforeEach(func() {",60310],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["func() {",9879]]},{"word":"function","context":[["// This is a courtesy helper function, which in some cases may not work as expected!",1719],["// This function is safe for concurrent access.",1627],["// iterating, return false from the fn function.",1419],["// calling the \"fn\" function with the response data for each page. To stop",1419],["// variants of this function should be used to provide values for uniform",1168],["// other function will result in a GL.INVALID_OPERATION error.",1168],["// function.",957],["// arguments. The number specified in the function should match the number of",584],["// Inject real implementations here, test through the internal function.",524],["// It should be a low-latency function in order to not slow down the upload operation.",498]]},{"word":"g","context":[["g.P(\"}\")",2547],["g.P()",1968],["return g",1855],["g.Out()",1835],["g.In()",1775],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["// ForceSendFields is a list of field names (e.g. \"Etag\") to",1561],["// ForceSendFields is a list of field names (e.g. \"Kind\") to",1476],["g.mu.Lock()",1359],["// ForceSendFields is a list of field names (e.g. \"Id\") to",1195]]},{"word":"gc","context":[["c.Assert(err, gc.IsNil)",75298],["gc \"gopkg.in/check.v1\"",9251],["gc \"launchpad.net/gocheck\"",3387],["c.Check(err, gc.IsNil)",2043],["c.Assert(err, gc.NotNil)",1526],["package gc",1277],["if gc.Debug['P'] != 0 {",1192],["gc.TestingT(t)",1136],["var n1 gc.Node",1078],["func(c *gc.C, st *State) changeTestCase {",950]]},{"word":"generated","context":[["It is generated from these files:",4689],["// Code generated by protoc-gen-gogo.",3591],["// Code generated by protoc-gen-go.",3589],["// This is a compile-time assertion to ensure that this generated file",3226],["// Always reference these packages, just in case the auto-generated code",3048],["// This file was generated by the swagger tool.",2864],["// This file was generated by counterfeiter",1800],["// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0",918],["// Host name on which the event is generated.",628],["// Auto-generated - DO NOT EDIT",611]]},{"word":"gensupport","context":[["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["gensupport.SetOptions(c.urlParams_, opts...)",18124],["urlParams_   gensupport.URLParams",9674],["return gensupport.SendRequest(c.ctx_, c.s.client, req)",7518],["urlParams_ gensupport.URLParams",6045],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["var _ = gensupport.MarshalJSON",1223],["gensupport \"google.golang.org/api/gensupport\"",1220],["gensupport \"google.golang.org/api/gensupport\"",1220],["urlParams_    gensupport.URLParams",1193]]},{"word":"get","context":[["// Print the error, cast err to awserr.Error to get the Code and",19219],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["t.Fatalf(\"the value %s in get result does not match the value %s in request\",",1107],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// authenticate once and get access to all their video and channel data,",847],["c.Fatalf(\"failed to get the container count: %s\", err)",840],["// token, used to page through large result sets. To get the next page",793],["glog.Errorf(\"Couldn't get key for object %+v: %v\", obj, err)",580],["Verb:     \"get\",",533],["// allAuthenticatedUsers get READER access.",528]]},{"word":"github","context":[["\"github.com/golang/glog\"",24041],[". \"github.com/onsi/ginkgo\"",19358],[". \"github.com/onsi/gomega\"",18984],["\"github.com/stretchr/testify/assert\"",18896],["\"github.com/spf13/cobra\"",12575],["\"github.com/juju/errors\"",11886],["\"github.com/Sirupsen/logrus\"",11173],["log \"github.com/Sirupsen/logrus\"",9798],["jc \"github.com/juju/testing/checkers\"",8768],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787]]},{"word":"github_com_gogo_protobuf_proto","context":[["data, err := github_com_gogo_protobuf_proto.Marshal(p)",7723],["if err := github_com_gogo_protobuf_proto.Unmarshal(data, msg); err != nil {",7079],["if err := github_com_gogo_protobuf_proto.UnmarshalText(data, msg); err != nil {",4860],["Proto() github_com_gogo_protobuf_proto.Message",4822],["size3 := github_com_gogo_protobuf_proto.Size(p)",3137],["size2 := github_com_gogo_protobuf_proto.Size(p)",3137],["if err := github_com_gogo_protobuf_proto.Unmarshal(datas[i%10000], msg); err != nil {",3089],["dAtA, err := github_com_gogo_protobuf_proto.Marshal(p)",2753],["_ = github_com_gogo_protobuf_proto.Unmarshal(littlefuzz, msg)",2567],["if err := github_com_gogo_protobuf_proto.Unmarshal(dAtA, msg); err != nil {",2439]]},{"word":"given","context":[["// fail if the object's ETag matches the given value. This is useful for",12114],["// WeekdayNarrow returns the locales narrow weekday given the 'weekday' provided",1430],["// MonthWide returns the locales wide month given the 'month' provided",1430],["// WeekdayAbbreviated returns the locales abbreviated weekday given the 'weekday' provided",1430],["// MonthAbbreviated returns the locales abbreviated month given the 'month' provided",1430],["// MonthNarrow returns the locales narrow month given the 'month' provided",1430],["// WeekdayShort returns the locales short weekday given the 'weekday' provided",1430],["// WeekdayWide returns the locales wide weekday given the 'weekday' provided",1430],["// Asset loads and returns the asset for the given name.",737],["// AssetInfo loads and returns the asset info for the given name.",650]]},{"word":"glog","context":[["\"github.com/golang/glog\"",24041],["glog.Error(err)",2535],["log \"github.com/golang/glog\"",2490],["glog.Fatal(err)",1739],["eventBroadcaster.StartLogging(glog.Infof)",824],["\"github.com/ethereum/go-ethereum/logger/glog\"",719],["glog.Errorf(",699],["glog.Errorf(\"Couldn't get key for object %+v: %v\", obj, err)",580],["glog.Errorf(\"Error listing containers: %#v\", err)",569],["glog.Errorf(\"Error examining the container: %v\", err)",531]]},{"word":"go","context":[["go func() {",124274],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["//go:nosplit",7697],["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"go/token\"",6041],["\"go/ast\"",5181],["// This file is part of the go-ethereum library.",3823],["// The go-ethereum library is free software: you can redistribute it and/or modify",3822],["// The go-ethereum library is distributed in the hope that it will be useful,",3822],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822]]},{"word":"golang","context":[["\"golang.org/x/net/context\"",29586],["\"github.com/golang/glog\"",24041],["\"github.com/golang/protobuf/proto\"",3772],["\"google.golang.org/grpc\"",3595],["import proto \"github.com/golang/protobuf/proto\"",3039],["context \"golang.org/x/net/context\"",2798],["log \"github.com/golang/glog\"",2490],["\"golang.org/x/oauth2\"",2278],["\"google.golang.org/api/googleapi\"",1948],["\"golang.org/x/net/websocket\"",1824]]},{"word":"google","context":[["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FileOptions\"),",4847],["Extendee: func(v string) *string { return &v }(\".google.protobuf.MessageOptions\"),",4039],["\"google.golang.org/grpc\"",3595],["\"google.golang.org/api/googleapi\"",1948],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FieldOptions\"),",1818],["TypeName: func(v string) *string { return &v }(\".google.protobuf.UninterpretedOption\"),",1414],["\"google.golang.org/grpc/codes\"",1276]]},{"word":"googleapi","context":[["if err := googleapi.CheckResponse(res); err != nil {",58830],["defer googleapi.CloseBody(res)",57836],["googleapi.Expand(req.URL, map[string]string{",44831],["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["return nil, &googleapi.Error{",24591],["ServerResponse: googleapi.ServerResponse{",24578],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["googleapi.ServerResponse `json:\"-\"`",13928],["googleapi.SetOpaque(req.URL)",12641],["// request. Use googleapi.IsNotModified to check whether the response",12114]]},{"word":"googleapis","context":[["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/drive\",",2939],["//     \"https://www.googleapis.com/auth/compute\",",2840],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["//     \"https://www.googleapis.com/auth/adsense\",",2088],["//     \"https://www.googleapis.com/auth/adsense.readonly\"",2088],["//     \"https://www.googleapis.com/auth/devstorage.full_control\"",1998]]},{"word":"got","context":[["if got != want {",4253],["t.Fatalf(\"String want %v got %v\", s1, s2)",3263],["t.Fatalf(\"GoString want %v got %v\", s1, s2)",3251],["t.Errorf(\"expected %v, got %v\", e, a)",2940],["if got != exp {",2794],["if !reflect.DeepEqual(got, want) {",2749],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["if got != expected {",2429],["t.Errorf(\"Expected %v, got %v\", e, a)",1539]]},{"word":"goto","context":[["goto mainparse",4151],["goto ret",3964],["goto Error",3546],["goto out",2847],["goto yyabort",2587],["goto yystate66",2354],["goto _test_eof",2133],["goto bad",1962],["goto tr18",1400],["goto childerror",1339]]},{"word":"governed","context":[["// Use of this source code is governed by a BSD-style",82711],["// Use of this source code is governed by a MIT-style",5462],["// Use of this source code is governed by an ISC",4711],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by a MIT-license.",2543],["// Use of this source code is governed under the Apache License, Version 2.0",1834],["// Use of this source code is governed by an MIT-style",1098],["// Use of this source code is governed by a BSD-style license",1018],["// Use of this source code is governed by the MIT",831],["// this source code is governed by the included BSD license.",803]]},{"word":"governing","context":[["See the License for the specific language governing permissions and",78733],["// See the License for the specific language governing permissions and",45859],["// implied. See the License for the specific language governing",10736],["* See the License for the specific language governing permissions and",6302],["//  either express or implied. See the License for the specific language governing permissions",2295],["// License for the specific language governing permissions and limitations",1965],["specific language governing permissions and limitations",973],["* specific language governing permissions and limitations",792],["//   See the License for the specific language governing permissions and",598],["// express or implied. See the License for the specific language governing",503]]},{"word":"group","context":[["RUN echo 'dockerio:x:1001:' >> /etc/group",2333],["group                  string",1228],["// group.",1117],["for _, group := range groups {",877],["group.Wait()",850],["// A group's client should implement this interface.",835],["defer group.Done()",784],["// SchemeGroupVersion is group version used to register these objects",770],["group := sync.WaitGroup{}",631],["b = append(b, en.group[0])",612]]},{"word":"h","context":[["_, _, _ = h, z, r",60384],["var h codecSelfer1234",59656],["return h",4240],["if e.h.Canonical {",2330],["#include <stdlib.h>",2180],["h.ServeHTTP(w, r)",2113],["h := t.Hour()",1974],["h -= 12",1971],["if h > 12 {",1970],["b = strconv.AppendInt(b, int64(h), 10)",1968]]},{"word":"handle","context":[["handler := handle(storage)",1710],["// handle error",734],["handle string",593],["handle = Handle(r0)",534],["// users to handle external traffic that arrives at a node.",461],["if handle == nil {",435],["handler := handle(map[string]rest.Storage{",424],["\"handle\": handle,",399],["\"handle\": handle,",399],["handle(err)",348]]},{"word":"handler","context":[["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["server := httptest.NewServer(handler)",5123],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["return interceptor(ctx, in, info, handler)",4582],["handler := handle(storage)",1710],["package handler",1398],["if handler == nil {",1239],["handler.ServeHTTP(w, r)",1077],["handler.ServeHTTP(w, req)",874],["func handler(w http.ResponseWriter, r *http.Request) {",873]]},{"word":"has","context":[["// getting updates only after the object has changed since the last",12114],["// null. It is an error if a field in this list has a non-empty value.",4930],["It has these top-level messages:",4689],["panic(\"parameter v has incorrect length\")",3384],["// If 'warn' has a value it means the job is running longer than the configured",1437],["} else if !has {",1434],["// FIXME: Requires compiler support (has immediate)",1227],["// server as null. It is an error if a field in this list has a",901],["if has {",733],["if !has {",687]]},{"word":"hash","context":[["\"hash\"",3166],["\"hash/crc32\"",1226],["\"hash/fnv\"",1162],["return hash",677],["hash := sha256.New()",605],["hash := md5.New()",576],["// Commit hash, this is optional",516],["hash := sha1.New()",426],["\"hash/adler32\"",413],["dockerName, hash, err := ParseDockerName(c.Names[0])",382]]},{"word":"have","context":[["// actually making the request, and provides an error response. If you have",6922],["// Checks whether you have the required permissions for the action, without",6903],["// You should have received a copy of the GNU Lesser General Public License",5180],["// as then you are sure you have configured all required params",4924],["// You should have received a copy of the GNU General Public License",4154],["You should have received a copy of the GNU General Public License",3440],["* You should have received a copy of the GNU General Public License",2903],["// If we have a async client, we need to wait for the async result",2363],["t.Fatal(\"should have error\")",1770],["t.Fatalf(\"should not have error: %s\", err)",1072]]},{"word":"header","context":[["header: &tar.Header{",1992],["Header *ResponseHeader `protobuf:\"bytes,1,opt,name=header\" json:\"header,omitempty\"`",984],["Header *ResponseHeader `protobuf:\"bytes,1,opt,name=header\" json:\"header,omitempty\"`",984],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["// should retry (optionally after the time indicated in the Retry-After header).",654],["c.Fatalf(\"failed to write tar file header: %v\", err)",599],["RequestPayer *string `location:\"header\" locationName:\"x-amz-request-payer\" type:\"string\" enum:\"RequestPayer\"`",576],["RequestCharged *string `location:\"header\" locationName:\"x-amz-request-charged\" type:\"string\" enum:\"RequestCharged\"`",560]]},{"word":"headers","context":[["// ServerResponse contains the HTTP response code and headers from the",13928],["// code is an error. Response headers are in either",8983],["// status code is an error. Response headers are in either",7314],["// non-2xx status code is an error. Response headers are in either",5221],["// add HTTP headers to the request.",3239],["// assert headers",3020],["// set headers",1788],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// Any non-2xx status code is an error. Response headers are in either",1236],["for k, v := range headers {",1048]]},{"word":"hello","context":[["\"foo\": \"hello\",",1396],["w.Write([]byte(\"hello\"))",910],["contents: \"hello\",",690],["\"baz\": \"hello\",",648],["\"hello\",",485],["\"robots.txt\": \"hello\",",432],["\"8a0310\"+\"68656c6c6f2c2022776f726c6421220a\"+ // field 49, encoding 2 string \"hello, \\\"world!\\\"\\n\"",352],["\"foo\": \"hello world\",",324],["c.Assert(strings.TrimSpace(out), check.Equals, \"hello\")",309],["\"hello/docker/world\": \"hello\",",300]]},{"word":"here","context":[["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["// formats are defined here.",726],["// TODO: pass structured data to these actions, and document that data here.",716],["// representing the arbitrary (possibly non-string) data value here.",626],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// ReadOnly here will force the ReadOnly setting in VolumeMounts.",540],["// Inject real implementations here, test through the internal function.",524],["// It should be OK to list unschedulable Nodes here.",505],["// here.",471],["// release.  The thinking here is this:",466]]},{"word":"host","context":[["host:        \"\",",4118],["// kubelet's host machine and then exposed to the pod.",3083],["// Must be a filesystem type supported by the host operating system.",2721],["if host == \"\" {",1654],["for _, host := range hosts {",1208],["Host string `json:\"host,omitempty\"`",1166],["host:        \"aaa.bbb.ccc\",",1101],["return host",1070],["plugin.host = host",855],["plugin.host = host",855]]},{"word":"html","context":[["\"html/template\"",7918],["<html>",2155],["</html>",2034],["// Permissions (http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).",1047],["\"html\"",1043],["\"golang.org/x/net/html\"",891],["// at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",788],["// SWF Workflows (http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html).",756],["w.Header().Set(\"Content-Type\", \"text/html\")",718],["w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\")",672]]},{"word":"http","context":[["\"net/http\"",139133],["http://www.apache.org/licenses/LICENSE-2.0",79621],["//     http://www.apache.org/licenses/LICENSE-2.0",43271],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["if res != nil && res.StatusCode == http.StatusNotModified {",24578],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["\"net/http/httptest\"",17396],["reqHeaders := make(http.Header)",11911],["w.WriteHeader(http.StatusOK)",10652],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703]]},{"word":"https","context":[["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/drive\",",2939],["//     \"https://www.googleapis.com/auth/compute\",",2840],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["//     \"https://www.googleapis.com/auth/adsense.readonly\"",2088]]},{"word":"httptest","context":[["\"net/http/httptest\"",17396],["recorder := httptest.NewRecorder()",10846],["w := httptest.NewRecorder()",6588],["server := httptest.NewServer(handler)",5123],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["resp := httptest.NewRecorder()",2692],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["rec := httptest.NewRecorder()",2225],["server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",1873],["res := httptest.NewRecorder()",1696]]},{"word":"i","context":[["i++",171275],["for i := 0; i < b.N; i++ {",52243],["for i := 0; i < b.N; i++ {",52243],["for i := 0; i < b.N; i++ {",52243],["var i int",38426],["return i, nil",34067],["_ = i",30398],["data[i] = 0xa",24096],["i := 0",22064],["data[i] = 0x12",17841]]},{"word":"iNdEx","context":[["iNdEx++",149902],["if iNdEx >= l {",149902],["b := data[iNdEx]",137749],["iNdEx = postIndex",67189],["postIndex := iNdEx + msglen",41105],["iNdEx := 0",30802],["for iNdEx < l {",30802],["iNdEx += skippy",28713],["if (iNdEx + skippy) > l {",28713],["preIndex := iNdEx",26126]]},{"word":"id","context":[["Id string `json:\"id,omitempty\"`",11055],["//     \"id\": {",6328],["//     \"id\"",5734],["c.id = id",5279],["c.id = id",5279],["id := strings.TrimSpace(out)",4703],["\"id\": c.id,",3094],["\"id\": c.id,",3094],["if id == \"\" {",3068],["return id",2807]]},{"word":"idx","context":[["idx      int",5056],["// \tidx:      1,",4998],["// \tidx:      3,",4998],["// \tidx:      5,",4998],["// \tidx:      2,",4998],["// \tidx:      6,",4998],["// \tidx:      4,",4998],["// \tidx:      0,",2856],["// \tidx:      12,",2142],["// \tidx:      11,",2142]]},{"word":"if","context":[["if err != nil {",3731570],["if !ok {",225887],["if err == nil {",169101],["if b < 0x80 {",153986],["if false {",153082],["if iNdEx >= l {",149902],["if shift >= 64 {",137139],["if r.TryDecodeAsNil() {",130473],["if this == nil {",80648],["if postIndex > l {",71103]]},{"word":"image","context":[["\"image\"",5266],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745],["Image: \"image\",",3558],["\"image/color\"",3097],["imageapi \"github.com/openshift/origin/pkg/image/api\"",1852],["\"github.com/docker/docker/image\"",1677],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["\"image/png\"",1475],["\"image/draw\"",1187],["Image: image,",1067]]},{"word":"implements","context":[["// Format implements the NodeFormatter interface.",1170],["// String implements fmt.Stringer.",988],["// Method implements the Request interface.",855],["// TypeCheck implements the Expr interface.",708],["// UnmarshalYAML implements the yaml.Unmarshaler interface.",697],["// Walk implements the Expr interface.",691],["// StatementType implements the Statement interface.",648],["// Error implements the error interface.",620],["// Eval implements the TypedExpr interface.",603],["// CreateReply implements the Request interface.",492]]},{"word":"implied","context":[["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// implied. See the License for the specific language governing",10736],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",9930],["* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",6341],["but WITHOUT ANY WARRANTY; without even the implied warranty of",5062],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",3684],["//  either express or implied. See the License for the specific language governing permissions",2295],["// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",2078],["KIND, either express or implied.  See the License for the",956]]},{"word":"import","context":[["import (",899476],["import \"fmt\"",17353],["import \"C\"",11442],["import \"testing\"",10339],["import math \"math\"",6654],["import fmt \"fmt\"",5415],["import \"time\"",4479],["import \"unsafe\"",4235],["import proto \"github.com/golang/protobuf/proto\"",3039],["import \"os\"",3038]]},{"word":"in","context":[["// license that can be found in the LICENSE file.",96872],["Unless required by applicable law or agreed to in writing, software",78790],["you may not use this file except in compliance with the License.",78263],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["// Unless required by applicable law or agreed to in writing, software",58926],["// you may not use this file except in compliance with the License.",55975],["// used to include empty fields in Patch requests.",38333],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// unconditionally include in API requests. By default, fields with",36870],["if in.Items != nil {",23966]]},{"word":"include","context":[["// used to include empty fields in Patch requests.",38333],["// unconditionally include in API requests. By default, fields with",36870],["// This may be used to include null fields in Patch requests.",4930],["#include <stdlib.h>",2180],["// to unconditionally include in API requests. By default, fields with",1463],["// field is empty or not. This may be used to include empty fields in",1152],["//       \"description\": \"Cloud SQL instance ID. This does not include the project ID.\",",1087],["// #include <stdlib.h>",1087],["// The maximum number of records to include in the response. If more records",1022],["// non-empty value. This may be used to include null fields in Patch",901]]},{"word":"index","context":[["index++",8079],["if index >= l {",6068],["b := data[index]",6059],["index := 0",2808],["index = postIndex",2697],["postIndex := index + msglen",1752],["for index < l {",1349],["index += skippy",1342],["index -= sizeOfWire",1342],["m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)",1332]]},{"word":"influxql","context":[["stmt: &influxql.SelectStatement{",2112],["Condition: &influxql.BinaryExpr{",1515],["Fields: []*influxql.Field{",1055],["Op:  influxql.EQ,",1029],["return &influxql.Result{Err: err}",876],["Fields:     []*influxql.Field{{Expr: &influxql.Wildcard{}}},",661],["Fields:     []*influxql.Field{{Expr: &influxql.Wildcard{}}},",661],["Sources: []influxql.Source{&influxql.Measurement{Name: \"myseries\"}},",638],["Sources: []influxql.Source{&influxql.Measurement{Name: \"myseries\"}},",638],["ic.CreateIteratorFn = func(opt influxql.IteratorOptions) (influxql.Iterator, error) {",623]]},{"word":"info","context":[["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["a := &asset{bytes: bytes, info: info}",5153],["a := &asset{bytes: bytes, info: info}",5153],["return interceptor(ctx, in, info, handler)",4582],["info := &grpc.UnaryServerInfo{",4580],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["if info.IsDir() {",2244],["return info, nil",2204],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707]]},{"word":"information","context":[["// for more information.",56535],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// See License.txt for license information.",1651],["// permissions. For more information on user permissions, see Managing User",1025],["* distributed with this work for additional information",1018],["distributed with this work for additional information",975],["// For more information relating to the software or licensing issues please",819],["// information.",801],["// Status represents the current information about a pod. This data may not be up",788],["// ObjectReference contains enough information to let you inspect or modify the referred object.",706]]},{"word":"init","context":[["func init() {",96919],["t.Fatalf(\"test init failed: %s\", err)",3640],["if err := test.init(s); err != nil {",3591],["walkexpr(&n.Left, init)",874],["initID := fmt.Sprintf(\"%s-init\", container.ID)",686],["*init = list(*init, a)",588],["*init = list(*init, a)",588],["t.init()",508],["walkexpr(&n.Right, init)",448],["b.init()",389]]},{"word":"input","context":[["if input == nil {",54083],["req = c.newRequest(op, input, output)",46423],["config, err = DecodeConfig(bytes.NewReader([]byte(input)))",1336],["return input",1075],["input  string",1072],["input: analysis.TokenStream{",918],["input    string",698],["input string",658],["// Stats returns stats from the input iterator.",639],["// will be set to false if the input value is 0 or 0.0f, and it will be set",584]]},{"word":"instance","context":[["\"github.com/juju/juju/instance\"",3250],["// If additional configuration is needed for the client instance use the optional",2272],["// newClient creates, initializes and returns a new service client instance.",2270],["//     \"instance\": {",2010],["c.instance = instance",1823],["c.instance = instance",1823],["\"instance\": c.instance,",1564],["\"instance\": c.instance,",1564],["//     \"instance\"",1422],["// instance.",1366]]},{"word":"instances","context":[["for _, instance := range instances {",882],["if len(instances) == 0 {",757],["return instances, nil",751],["// instances.",570],["instances, ok := kl.cloud.Instances()",492],["for _, inst := range instances {",410],["return fmt.Errorf(\"failed to get instances from cloud provider\")",380],["if len(instances) > 1 {",352],["return instances[0], nil",345],["var instances []string",334]]},{"word":"instead","context":[["// instead.",13866],["// Download fetches the API endpoint's \"media\" value, instead of the normal",619],["// If this value is nil, the default grace period will be used instead.",539],["// Optional. If referring to a piece of an object instead of an entire object, this string",525],["// generated name exists - instead, it will either return 201 Created or 500 with Reason",471],["t.Fatal(\"Expected to fail. But instead succeeded\")",330],["// missing service env var and exit and be restarted; or (3) use DNS instead of env vars",306],["//       need to use such a function and can instead",286],["// Create a deployment to delete nginx pods and instead bring up redis pods.",284],["// Deprecated: use Media instead.",271]]},{"word":"int","context":[["var l int",66946],["var msglen int",42860],["msglen |= (int(b) & 0x7F) << shift",42857],["var i int",38426],["wireType := int(wire & 0x7)",32066],["intStringLen := int(stringLen)",21411],["n = int(r0)",7051],["var v int",6356],["case int:",5838],["v |= (int(b) & 0x7F) << shift",5834]]},{"word":"int32","context":[["fieldNum := int32(wire >> 3)",29949],["Format:      \"int32\",",9626],["//       \"format\": \"int32\",",9559],["Number:   func(v int32) *int32 { return &v }(1),",6114],["Number:   func(v int32) *int32 { return &v }(1),",6114],["Number:   func(v int32) *int32 { return &v }(2),",5407],["Number:   func(v int32) *int32 { return &v }(2),",5407],["case int32:",3163],["var v int32",3069],["Number:   func(v int32) *int32 { return &v }(3),",2702]]},{"word":"int64","context":[["//       \"format\": \"int64\",",14396],["b.SetBytes(int64(total / b.N))",10167],["case int64:",6144],["b = strconv.AppendInt(b, int64(t.Day()), 10)",5570],["b = strconv.AppendInt(b, int64(t.Minute()), 10)",5504],["b = strconv.AppendInt(b, int64(t.Year()), 10)",4840],["b = strconv.AppendInt(b, int64(t.Second()), 10)",4128],["b = strconv.AppendInt(b, int64(t.Hour()), 10)",3536],["var v int64",2868],["profileId int64",2347]]},{"word":"integer","context":[["//       \"type\": \"integer\"",15969],["Type:        []string{\"integer\"},",11323],["MaxRecords *int64 `type:\"integer\"`",1797],["MaxResults *int64 `locationName:\"maxResults\" type:\"integer\"`",795],["Unit:  \"integer\",",762],["Port *int64 `type:\"integer\"`",742],["// The duration is specified in seconds; an integer greater than or equal to",726],["\"type\": \"integer\",",654],["// suffix i indicates that integer values are being passed; the suffix ui",584],["// indicates that unsigned integer values are being passed, and this type",584]]},{"word":"interface","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["p.p = make(map[string]interface{})",32934],["// error which satisfies the awserr.Error interface.",11875],["map[string]interface{}{",10488],["queryParameters := map[string]interface{}{",6913],["pathParameters := map[string]interface{}{",6852],["opt_      map[string]interface{}",5638],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["p map[string]interface{}",4924],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584]]},{"word":"internal","context":[["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["\"cmd/internal/obj\"",2098],["// XXX_OneofFuncs is for the internal use of the proto package.",1268],["package internal",1195],["panic(\"internal error\")",1040],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// Inject real implementations here, test through the internal function.",524],["\"github.com/cockroachdb/cockroach/internal/client\"",503],["\"internal/testenv\"",494],["\"github.com/cockroachdb/cockroach/pkg/internal/client\"",478]]},{"word":"into","context":[["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["var yys3Slc = z.DecScratchBuffer() // default slice to decode into",3894],["// END Marshal arguments into request.",2807],["// BEGIN Marshal arguments into request.",2807],["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431],["codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)",622],["// value may not be unset or be set further into the future, although it may be shortened",595],["// slice with the values to be loaded into a uniform variable or a uniform",584],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["// for all of the containers in the podSpec to move into the 'Success' status, and tests",475]]},{"word":"invalid","context":[["x.mode = invalid",1526],["if x.mode == invalid {",1269],["return res, fmt.Errorf(\"invalid response %s%s\", resp.Status, sr)",1168],["return fmt.Errorf(\"invalid response %s%s\", resp.Status, sr)",851],["// invalid",770],["if x.mode != invalid {",451],["// and should assume that any attribute may be empty, invalid, or under",431],["if len(invalid) > 0 {",429],["var invalid []string",390],["\"invalid-labels\": {",389]]},{"word":"invalidParams","context":[["return invalidParams",18401],["if invalidParams.Len() > 0 {",18392],["invalidParams.Add(request.NewErrParamRequired(\"Name\"))",918],["invalidParams.Add(request.NewErrParamRequired(\"Bucket\"))",869],["invalidParams.Add(request.NewErrParamRequired(\"RestApiId\"))",594],["invalidParams.Add(request.NewErrParamMinLen(\"Name\", 1))",508],["invalidParams.Add(request.NewErrParamRequired(\"Key\"))",477],["invalidParams.AddNested(fmt.Sprintf(\"%s[%v]\", \"Filters\", i), err.(request.ErrInvalidParams))",461],["invalidParams.Add(request.NewErrParamRequired(\"Id\"))",436],["invalidParams.Add(request.NewErrParamMinLen(\"Key\", 1))",429]]},{"word":"io","context":[["return io.ErrUnexpectedEOF",285098],["\"io\"",126310],["\"io/ioutil\"",111038],["var body io.Reader = nil",58552],["\"k8s.io/kubernetes/pkg/api\"",26465],["if err == io.EOF {",16583],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["return 0, io.ErrUnexpectedEOF",8985]]},{"word":"ioutil","context":[["\"io/ioutil\"",111038],["body, err := ioutil.ReadAll(resp.Body)",8460],["body, _ := ioutil.ReadAll(r.Body)",2320],["respBody, _ := ioutil.ReadAll(resp.Body)",2084],["log.SetOutput(ioutil.Discard)",2012],["body, _ := ioutil.ReadAll(resp.Body)",1978],["body, err := ioutil.ReadAll(res.Body)",1752],["req.HTTPResponse = &http.Response{StatusCode: 200, Body: ioutil.NopCloser(buf), Header: http.Header{}}",1747],["body, err := ioutil.ReadAll(r.Body)",1646],["data, err := ioutil.ReadAll(resp.Body)",1548]]},{"word":"ip","context":[["if ip == nil {",2194],["if ip == \"\" {",1080],["return ip",902],["if ip != nil {",885],["var ip net.IP",704],["return ip, nil",676],["ip = v.IP",638],["for _, ip := range ips {",619],["//     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],",594],["//     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],",594]]},{"word":"is","context":[["// Use of this source code is governed by a BSD-style",82711],["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["// server regardless of whether the field is empty or not. This may be",38333],["// pending HTTP request will be aborted if the provided context is",22537],["// is called.",13495],["//    if err == nil { // resp is now filled",13378],["// error from Do is the result of In-None-Match.",12114],["// fail if the object's ETag matches the given value. This is useful for",12114],["// code is an error. Response headers are in either",8983]]},{"word":"it","context":[["// it is UnauthorizedOperation.",6922],["// http.Response Body if it receives an error.",6600],["// it under the terms of the GNU Lesser General Public License as published by",5114],["// The go-ethereum library is distributed in the hope that it will be useful,",3822],["// The go-ethereum library is free software: you can redistribute it and/or modify",3822],["This program is distributed in the hope that it will be useful,",3745],["* This program is distributed in the hope that it will be useful,",3470],["it under the terms of the GNU General Public License as published by",3388],["// it under the terms of the GNU General Public License as published by",3289],["This program is free software: you can redistribute it and/or modify",3094]]},{"word":"item","context":[["for _, item := range table {",2211],["for _, item := range items {",2132],["for _, item := range list.Items {",1909],["return item",1537],["</item>",1295],["<item>",1257],["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["list.Items = append(list.Items, item)",887],["if label.Matches(labels.Set(item.Labels)) {",842],["if item == nil {",645]]},{"word":"items","context":[["\"items\": {",4076],["Required: []string{\"items\"},",2542],["for _, item := range items {",2132],["case \"items\":",2008],["r.EncodeString(codecSelferC_UTF81234, string(\"items\"))",1977],["for i := range items {",778],["// Use this only when paginating results to indicate the maximum number of items",746],["// A flag that indicates whether there are more items to return. If your results",724],["// number of items to include in a single response page. The maximum",655],["// LimitRangeList is a list of LimitRange items.",648]]},{"word":"its","context":[["// Only one of its members may be specified.",1386],["//     * Neither the name of Google Inc. nor the names of its",1251],["*     * Neither the name of Google Inc. nor the names of its",979],["// _bindata is a table, holding each asset generator, mapped to its name.",738],["// Status defines the actual enforced quota and its current usage",524],["// generate Swagger API documentation for its models. Please read this PR for more",456],["// PersistentVolumeReclaimDelete means the volume will be deleted from Kubernetes on release from its claim.",454],["// The field of the resource that has caused this error, as named by its JSON",429],["// Extended data associated with the reason.  Each reason may define its",415],["// Exactly one of its members must be set.",412]]},{"word":"j","context":[["j++",6007],["b[i], b[j] = b[j], b[i]",5248],["b[i], b[j] = b[j], b[i]",5248],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["j := 0",4093],["for j := 0; j < containerLen; j++ {",3841],["for j := 0; j < containerLen; j++ {",3841]]},{"word":"jc","context":[["c.Assert(err, jc.ErrorIsNil)",135421],["jc \"github.com/juju/testing/checkers\"",8768],["c.Check(err, jc.ErrorIsNil)",4766],["c.Assert(err, jc.Satisfies, errors.IsNotFound)",2884],["c.Assert(ok, jc.IsTrue)",2447],["c.Assert(ok, jc.IsFalse)",662],["c.Assert(err, jc.Satisfies, os.IsNotExist)",563],["c.Assert(called, jc.IsTrue)",537],["c.Assert(found, jc.IsTrue)",505],["go func() { c.Check(a.Run(nil), jc.ErrorIsNil) }()",397]]},{"word":"job","context":[["return job.Error(err)",3008],["if err := job.Run(); err != nil {",2820],["// timeout, the resonse will contain the jobid of the running async job",1437],["// If 'warn' has a value it means the job is running longer than the configured",1437],["job := mock.Job()",756],["return job.Run()",685],["streamJSON(job, w, false)",631],["addMachine{machineId: \"1\", job: state.JobHostUnits},",549],["job := &mgo.MapReduce{",460],["for _, job := range jobs {",409]]},{"word":"json","context":[["\"encoding/json\"",100948],["ForceSendFields []string `json:\"-\"`",39509],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["res, err := c.doRequest(\"json\")",33446],["Kind string `json:\"kind,omitempty\"`",30419],["params.Set(\"alt\", \"json\")",25051],["unversioned.TypeMeta `json:\",inline\"`",20119],["ctype := \"application/json\"",17586],["googleapi.ServerResponse `json:\"-\"`",13928],["Name string `json:\"name,omitempty\"`",13075]]},{"word":"juju","context":[["\"github.com/juju/errors\"",11886],["jc \"github.com/juju/testing/checkers\"",8768],["\"github.com/juju/juju/apiserver/params\"",4974],["\"github.com/juju/juju/apiserver/params\"",4974],["\"github.com/juju/juju/state\"",4908],["\"github.com/juju/juju/state\"",4908],["\"github.com/juju/names\"",4338],["\"github.com/juju/loggo\"",3582],["\"github.com/juju/utils\"",3390],["\"github.com/juju/juju/instance\"",3250]]},{"word":"just","context":[["// Always reference these packages, just in case the auto-generated code",3048],["// TODO: use PageToken to list all not just the first 500",648],["// implementation. This makes faking out just the methods you want to test easier.",406],["// not just take the node list and choose the first of them. Depending on the",396],["// implementation. This makes faking out just the method you want to test easier.",377],["// worker runs a worker thread that just dequeues items, processes them, and marks them done.",358],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["// Note that we just killed the unwanted pods. This may not have reflected",278],["// we may want it to return more than just an error, at some point.",277],["// cached there, something is wrong (or kubelet just restarted and hasn't",268]]},{"word":"k","context":[["_ = k",7707],["for _, k := range keys {",4582],["switch k {",3315],["for k, v := range errorCases {",3315],["keys = append(keys, k)",3300],["reqHeaders[k] = v",3239],["for k, v := range c.header_ {",3239],["for k, v := range m {",2867],["i += copy(data[i:], k)",2627],["t.Errorf(\"expected failure for %s\", k)",1985]]},{"word":"k8s","context":[["\"k8s.io/kubernetes/pkg/api\"",26465],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"k8s.io/kubernetes/pkg/util\"",8174],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"k8s.io/kubernetes/pkg/fields\"",6969],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["\"k8s.io/kubernetes/pkg/watch\"",5881],["kapi \"k8s.io/kubernetes/pkg/api\"",5721]]},{"word":"kapi","context":[["ObjectMeta: kapi.ObjectMeta{",10395],["kapi \"k8s.io/kubernetes/pkg/api\"",5721],["kapi \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",2656],["From: &kapi.ObjectReference{",2099],["To: &kapi.ObjectReference{",1342],["RoleRef: kapi.ObjectReference{",1017],["From: kapi.ObjectReference{",797],["Spec: kapi.PodSpec{",776],["kapi.ObjectMeta `json:\"metadata,omitempty\"`",713],["kapi.ObjectMeta",663]]},{"word":"key","context":[["for _, key := range keys {",3855],["for key, val := range *in {",2838],["return key",2435],["switch key {",2434],["Key          string `json:\"key,omitempty\"`",1941],["for key, val := range in {",1925],["key = etcdtest.AddPrefix(key)",1920],["key = etcdtest.AddPrefix(key)",1920],["for key, val := range in.Selector {",1906],["out.Selector[key] = val",1884]]},{"word":"keys","context":[["for _, k := range keys {",4582],["for _, key := range keys {",3855],["sort.Strings(keys)",3468],["keys = append(keys, k)",3300],["keys = append(keys, k)",3300],["return keys",2446],["\"github.com/cockroachdb/cockroach/keys\"",1855],["keys = append(keys, key)",1757],["keys = append(keys, key)",1757],["for i, key := range keys {",1736]]},{"word":"kind","context":[["Kind string `json:\"kind,omitempty\"`",30419],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["case \"kind\":",4876],["r.EncodeString(codecSelferC_UTF81234, string(\"kind\"))",4854],["switch kind {",2465],["// Kind: The kind of resource this is, in this case",921],["\"kind\": \"ImageStreamTag\",",831],["k := v.kind()",791],["\"kind\": \"DockerImage\",",715],["\"kind\": \"Service\",",564]]},{"word":"kl","context":[["kl := testKubelet.kubelet",2258],["podUID = kl.podManager.TranslatePodUID(podUID)",1285],["kl.podManager.SetPods(pods)",864],["container, err := kl.findContainer(podFullName, podUID, containerName)",857],["mirrorPod, _ := kl.podManager.GetMirrorPodByPod(pod)",751],["kl.handleMirrorPod(pod, start)",735],["kl.HandlePodAdditions(pods)",718],["start := kl.clock.Now()",701],["if kl.cloud != nil {",638],["if kl.kubeClient == nil {",618]]},{"word":"kubecontainer","context":[["kubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"",2519],["Containers: []*kubecontainer.Container{",2335],["fakeRuntime.PodList = []*kubecontainer.Pod{",1327],["podFullName := kubecontainer.GetPodFullName(pod)",1324],["expectedEnvs: []kubecontainer.EnvVar{",1233],["return kubecontainer.ContainerID{}, err",799],["pod := kubecontainer.Pods(pods).FindPod(podFullName, podUID)",746],["containerRefManager *kubecontainer.RefManager",684],["State:    kubecontainer.ContainerStateExited,",659],["osInterface kubecontainer.OSInterface,",619]]},{"word":"kubelet","context":[["kubelet := testKubelet.kubelet",8380],["kubelet := testKubelet.kubelet",8380],["// kubelet's host machine and then exposed to the pod.",3083],["kubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"",2519],["kl := testKubelet.kubelet",2258],["package kubelet",1602],["kubelet.podManager.SetPods(pods)",1562],["kubelet.runner = &fakeCommandRunner",1359],["// determined by kubelet) DNS settings.",1332],["\"k8s.io/kubernetes/pkg/kubelet/network\"",1315]]},{"word":"kubernetes","context":[["\"k8s.io/kubernetes/pkg/api\"",26465],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"k8s.io/kubernetes/pkg/util\"",8174],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"k8s.io/kubernetes/pkg/fields\"",6969],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047]]},{"word":"l","context":[["if iNdEx >= l {",149902],["if postIndex > l {",71103],["var l int",66946],["_ = l",66539],["for iNdEx < l {",30802],["n += 1 + l + sovGenerated(uint64(l))",30501],["n += 1 + l + sovGenerated(uint64(l))",30501],["l := len(data)",30341],["if (iNdEx + skippy) > l {",28713],["if iNdEx > l {",26126]]},{"word":"label","context":[["func(label, value string) (string, string, error) {",1653],["return label, value, nil",1650],["switch label {",1602],["return \"\", \"\", fmt.Errorf(\"field label not supported: %s\", label)",1368],["return \"\", \"\", fmt.Errorf(\"field label not supported: %s\", label)",1368],["options := api.ListOptions{LabelSelector: label}",1037],["if label == nil {",873],["label = labels.Everything()",856],["if label.Matches(labels.Set(item.Labels)) {",842],["\"github.com/opencontainers/runc/libcontainer/label\"",801]]},{"word":"labels","context":[["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/labels\"",4329],["\"labels\": {",1085],["Labels: labels,",1064],["labels: map[string]string{",916],["labels.Everything(),",908],["label = labels.Everything()",856],["if label.Matches(labels.Set(item.Labels)) {",842],["labels \"k8s.io/kubernetes/pkg/labels\"",765],["labels \"k8s.io/kubernetes/pkg/labels\"",765]]},{"word":"language","context":[["See the License for the specific language governing permissions and",78733],["// See the License for the specific language governing permissions and",45859],["// implied. See the License for the specific language governing",10736],["* See the License for the specific language governing permissions and",6302],["//  either express or implied. See the License for the specific language governing permissions",2295],["// License for the specific language governing permissions and limitations",1965],["//     \"language\": {",1290],["specific language governing permissions and limitations",973],["// language to use for strings returned by this method.",890],["// Language sets the optional parameter \"language\": The preferred",890]]},{"word":"last","context":[["// getting updates only after the object has changed since the last",12114],["// Human readable message indicating details about last transition.",456],["// (brief) reason for the condition's last transition.",445],["last := 0",431],["// resource was the last reference to that disk on the kubelet.",405],["// no changes are seen to the configuration, will synchronize the last known desired",358],["t.Errorf(\"unexpected node condition order. NodeReady should be last.\")",326],["if last {",320],["t.Errorf(\"unexpected zero last probe timestamp\")",302],["t.Errorf(\"unexpected zero last transition timestamp\")",300]]},{"word":"latest","context":[["\"k8s.io/kubernetes/pkg/api/latest\"",1090],["// Permissions (http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).",1047],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api/latest\"",1032],["// selects a specific revision of this object (as opposed to the latest",804],["// at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",788],["// SWF Workflows (http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html).",756],["\"latest\": {",682],["\"github.com/openshift/origin/pkg/api/latest\"",629],["// AWS Service Namespaces (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)",608],["// see Managing User Permissions (http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).",584]]},{"word":"law","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["Unless required by applicable law or agreed to in writing,",985],["* Unless required by applicable law or agreed to in writing,",792],["//   Unless required by applicable law or agreed to in writing, software",599],["** Unless required by applicable law or agreed to in writing, software",470],["//  Unless required by applicable law or agreed to in writing,",459],["*  Unless required by applicable law or agreed to in writing, software",330]]},{"word":"len","context":[["l := len(data)",30341],["n += len(m.XXX_unrecognized)",8149],["if len(args) != 1 {",5831],["l = len(s)",5746],["if len(args) == 0 {",5579],["for i := len(s) - 1; i >= 0; i-- {",5232],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["r.EncodeArrayStart(len(v))",3973],["if len(p) > 0 {",3808],["if len(args) > 0 {",3784]]},{"word":"length","context":[["return length",4031],["panic(\"parameter v has incorrect length\")",3384],["var length int",2514],["if length < 0 {",2335],["length = i + 1",2260],["length |= (int(b) & 0x7F) << shift",2201],["iNdEx += length",2193],["for i := 0; i < length; i++ {",1466],["if length == 0 {",1060],["if l.length == 0 {",1034]]},{"word":"level","context":[["It has these top-level messages:",4689],["// permissions level for the stack, or an attached policy that explicitly grants",945],["switch level {",551],["if !strings.Contains(string(content), `level=debug`) {",449],["\"b404\"+ // end group field 70 level 1",440],["\"b304\"+ // start group field 70 level 1",440],["_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)",432],["Level string `json:\"level,omitempty\"`",430],["if level == 0 {",415],["// Deploy, or Manage permissions level for the stack, or an attached policy",393]]},{"word":"license","context":[["// license that can be found in the LICENSE file.",96872],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by a MIT-license.",2543],["// See http://olivere.mit-license.org/license.txt for details.",2212],["// See http://olivere.mit-license.org/license.txt for details.",2212],["// See License.txt for license information.",1651],["// Licensed under the MIT (MIT-LICENSE.txt) license.",1372],["// Use of this source code is governed by a BSD-style license",1018],["or more contributor license agreements.  See the NOTICE file",952],["// contact license@antha-lang.org or write to the Antha team c/o",818]]},{"word":"licenses","context":[["http://www.apache.org/licenses/LICENSE-2.0",79621],["//     http://www.apache.org/licenses/LICENSE-2.0",43271],["// http://www.apache.org/licenses/LICENSE-2.0",7463],["//    http://www.apache.org/licenses/LICENSE-2.0",5528],["*     http://www.apache.org/licenses/LICENSE-2.0",4447],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["//      http://www.apache.org/licenses/LICENSE-2.0",3481],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",2506],["// along with this program.  If not, see <http://www.gnu.org/licenses/>.",1860],["along with this program.  If not, see <http://www.gnu.org/licenses/>",1828]]},{"word":"limit","context":[["//  Use a Resource element with the domain name to limit the action to only",846],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// Type of resource that this limit applies to",469],["// slightly more or slightly less than the specified limit.",421],["LimitToken:      \"limit\",",391],["if limit > 0 {",333],["r.Options.Limit = &limit",308],["op.limit = -1",279],["// Parse limit: \"LIMIT <n>\".",279]]},{"word":"limitations","context":[["limitations under the License.",78218],["// limitations under the License.",45780],["// permissions and limitations under the License.",6602],["* limitations under the License.",6296],["// permissions and limitations under the License. See the AUTHORS file",4735],["//  and limitations under the License.",2295],["// License for the specific language governing permissions and limitations",1965],["specific language governing permissions and limitations",973],["* specific language governing permissions and limitations",792],["//   limitations under the License.",598]]},{"word":"line","context":[["for _, line := range lines {",3668],["line := scanner.Text()",2114],["line = strings.TrimSpace(line)",1662],["line = strings.TrimSpace(line)",1662],["// A compilation error at this line likely means your copy of the",1437],["_, file, line, _ := runtime.Caller(1)",1328],["if len(line) == 0 {",1252],["if line == \"\" {",979],["fields := strings.Fields(line)",935],["for i, line := range lines {",839]]},{"word":"link","context":[["// link operation occurs on the program object, when they are once again",1594],["t.Errorf(\"Never set self link\")",715],["base := link.Attrs()",570],["_p1, err = BytePtrFromString(link)",492],["// SelfLink: A link back to this list.",394],["for _, link := range links {",378],["link.Disable()",336],["Link string `json:\"link,omitempty\"`",287],["* this file and link it with other files to produce an executable, this",276],["func Symlink(path string, link string) (err error) {",265]]},{"word":"list","context":[["// null. It is an error if a field in this list has a non-empty value.",4930],["// Standard list metadata.",3777],["\"container/list\"",3181],["return list",3163],["for _, item := range list.Items {",1909],["// notice, this list of conditions and the following disclaimer.",1841],["// copyright notice, this list of conditions and the following disclaimer",1838],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["Filters []*Filter `locationName:\"Filter\" locationNameList:\"Filter\" type:\"list\"`",1627],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610]]},{"word":"load","context":[["// load uniform variables defined as sampler types. Loading samplers with any",1168],["// The name of the load balancer.",673],["// load balancing pools of all matching services.",635],["// LoadBalancer contains the current status of the load-balancer,",485],["// Hostname is set for load-balancer ingress points that are DNS based",485],["// (typically GCE or OpenStack load-balancers)",485],["// IP is set for load-balancer ingress points that are IP based",485],["// (typically AWS load-balancers)",485],["// external load balancer (if the cloud provider supports it), in addition",484],["// LoadBalancerIngress represents the status of a load-balancer ingress point:",484]]},{"word":"local","context":[["\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",",810],["\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",",810],["// Service is a named abstraction of software service (for example, mysql) consisting of local port",734],["package local",733],["// for translating report output to a local language. Defaults to",416],["// data between stream (representing the user's local connection on their",365],["// LocalAddr returns the local network address.",314],["// IsImagePresent checks whether the container image is already in the local storage.",303],["if local {",254],["// Cobra supports local flags which will only run when this command",245]]},{"word":"locales","context":[["expected locales.PluralRule",4302],["// \texpected: locales.PluralRuleOther,",4284],["return locales.PluralRuleOther",4110],["// \texpected: locales.PluralRuleOne,",2856],["return locales.PluralRuleOne",2164],["\"github.com/go-playground/locales\"",2155],["r := locales.PluralRuleUnknown",2151],["if r == locales.PluralRuleUnknown {",2151],["\"github.com/go-playground/locales/currency\"",2149],["// MonthsNarrow returns the locales narrow months",1430]]},{"word":"location","context":[["//       \"location\": \"path\",",89797],["//       \"location\": \"query\",",83874],["Bucket *string `location:\"uri\" locationName:\"Bucket\" type:\"string\" required:\"true\"`",2494],["location = \"West US\"",1988],["// specified by location, which should be a value returned by GetUniformLocation.",1010],["// variable array. The location of the uniform variable to be modified is",1010],["Location string `json:\"location,omitempty\"`",991],["RestApiId *string `location:\"uri\" locationName:\"restapi_id\" type:\"string\" required:\"true\"`",864],["// Source represents the location and type of a volume to mount.",722],["//   (*fnptr)(program, location, count, value);",628]]},{"word":"locationName","context":[["DryRun *bool `locationName:\"dryRun\" type:\"boolean\"`",7393],["NextToken *string `locationName:\"nextToken\" type:\"string\"`",3069],["Bucket *string `location:\"uri\" locationName:\"Bucket\" type:\"string\" required:\"true\"`",2494],["Description *string `locationName:\"description\" type:\"string\"`",1836],["Filters []*Filter `locationName:\"Filter\" locationNameList:\"Filter\" type:\"list\"`",1627],["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["Name *string `locationName:\"name\" type:\"string\"`",943],["RestApiId *string `location:\"uri\" locationName:\"restapi_id\" type:\"string\" required:\"true\"`",864],["MaxResults *int64 `locationName:\"maxResults\" type:\"integer\"`",795],["Message *string `locationName:\"message\" type:\"string\"`",731]]},{"word":"lock","context":[["lock.Lock()",2206],["unlock(&sched.lock)",2138],["defer lock.Unlock()",1786],["c.lock.Lock()",1769],["lock(&sched.lock)",1739],["lock(&sched.lock)",1739],["defer c.lock.Unlock()",1495],["f.lock.Lock()",1411],["s.lock.Lock()",1326],["defer f.lock.Unlock()",1297]]},{"word":"log","context":[["\"log\"",99392],["log.Fatal(err)",57914],["log.Println(err)",16778],["log \"github.com/Sirupsen/logrus\"",9798],["log.Error(err)",6582],["log.WithFields(log.Fields{",6101],["log.WithFields(log.Fields{",6101],["log.Fatalln(err)",5860],["log.Print(err)",4156],["if log.V(1) {",3151]]},{"word":"logger","context":[["logger.Error(err)",1728],["package logger",1197],["logger,",1027],["boshlog \"github.com/cloudfoundry/bosh-utils/logger\"",1012],["logger *log.Logger",906],["logger.Fatal(err)",816],["\"github.com/ethereum/go-ethereum/logger/glog\"",719],["\"github.com/ethereum/go-ethereum/logger\"",661],["logger: logger,",587],["logger: logger,",587]]},{"word":"logrus","context":[["\"github.com/Sirupsen/logrus\"",11173],["log \"github.com/Sirupsen/logrus\"",9798],["log.WithFields(logrus.Fields{",2648],["logrus.Error(err)",2461],["logrus.Fatal(err)",1484],["logrus.WithFields(logrus.Fields{",1059],["logrus.WithFields(logrus.Fields{",1059],["logrus.Warn(err)",584],["logrus.SetLevel(logrus.DebugLevel)",472],["logrus.SetLevel(logrus.DebugLevel)",472]]},{"word":"m","context":[["if m != nil {",68407],["size := m.Size()",29946],["n, err := m.MarshalTo(data)",28284],["if m.XXX_unrecognized != nil {",14168],["return m",11878],["Module: m,",8893],["n += len(m.XXX_unrecognized)",8149],["return m, nil",7260],["if m == nil {",5993],["i += copy(data[i:], m.XXX_unrecognized)",5543]]},{"word":"machine","context":[["// kubelet's host machine and then exposed to the pod.",3083],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["machine, err := s.State.AddMachine(\"quantal\", state.JobHostUnits)",1731],["\"github.com/docker/machine/libmachine/log\"",1040],["NodeName: \"machine\",",706],["// Cinder represents a cinder volume attached and mounted on kubelets host machine",696],["\"github.com/docker/machine/libmachine/drivers\"",671],["Spec:       api.PodSpec{NodeName: \"machine\"},",643],["// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",626],["{Tag: \"machine-42\"},",531]]},{"word":"main","context":[["package main",180297],["func main() {",104447],["func main(){",1280],["t.Errorf(\"main name not set\")",856],["out: `package main",797],["in: `package main",754],["main()",540],["zone_id = \"${aws_route53_zone.main.zone_id}\"",528],["t.Errorf(\"main name not set from env\")",526],["void main() {",397]]},{"word":"make","context":[["params := make(url.Values)",36391],["p.p = make(map[string]interface{})",32934],["data = make([]byte, size)",28307],["reqHeaders := make(http.Header)",11911],["b := make([]byte, 0, 32)",11443],["b := make([]byte, 0, l)",5156],["done := make(chan struct{})",4483],["params_:       make(map[string][]string),",3788],["datas := make([][]byte, 10000)",3386],["done := make(chan bool)",3313]]},{"word":"manager","context":[["manager.podStoreSynced = alwaysReady",2332],["manager.podControl = &fakePodControl",1891],["manager, podControl := newTestController()",825],["manager.syncReplicationController(getKey(controllerSpec, t))",762],["manager.dsStore.Add(ds)",729],["package manager",637],["manager.syncReplicationController(getKey(rc, t))",624],["manager, fakeDocker := newTestDockerManager()",617],["manager: manager,",611],["manager: manager,",611]]},{"word":"map","context":[["googleapi.Expand(req.URL, map[string]string{",44831],["p.p = make(map[string]interface{})",32934],["Properties: map[string]spec.Schema{",20467],["map[string]interface{}{",10488],["Labels: map[string]string{",9863],["Providers: map[string]ResourceProviderFactory{",9575],["Annotations: map[string]string{",9476],["map[string]string{",9298],["Schema: map[string]*schema.Schema{",7236],["queryParameters := map[string]interface{}{",6913]]},{"word":"master","context":[["\"k8s.io/kubernetes/pkg/master/ports\"",864],["package master",851],["var m *master.Master",841],["Tags:    []string{\"master\"},",681],["\"k8s.io/kubernetes/pkg/master\"",620],["// Set up a master",466],["m = master.New(&master.Config{",446],["m = master.New(&master.Config{",446],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/master\"",372],["// If present, specifies the ID of the AWS Key Management Service (KMS) master",360]]},{"word":"match","context":[["if !match {",1456],["if match {",1322],["match = true",1122],["t.Fatalf(\"the value %s in get result does not match the value %s in request\",",1107],["return nil, 0, fmt.Errorf(\"No match found for %s: %+v\", id, l)",1097],["return nil, l.Count, fmt.Errorf(\"No match found for %s: %+v\", id, l)",777],["return match",763],["if match == nil {",750],["for _, match := range matches {",702],["// Selector is a label query over pods that should match the Replicas count.",655]]},{"word":"matches","context":[["// fail if the object's ETag matches the given value. This is useful for",12114],["if matches == nil {",785],["if len(matches) == 0 {",777],["for _, match := range matches {",702],["return matches",701],["if len(matches) != 2 {",552],["// the object's current metageneration matches the given value.",534],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// generation matches the given value.",445],["// If no matches, search all projects",443]]},{"word":"math","context":[["\"math\"",28544],["\"math/rand\"",26174],["\"math/big\"",9041],["var _ = math.Inf",6777],["import math \"math\"",6654],["import math \"math\"",6654],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["import \"math\"",1607],["n := math.Abs(num)",1596],["package math",871]]},{"word":"math_rand","context":[["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(616))",9510],["popr := math_rand.New(math_rand.NewSource(616))",9510],["r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",454],["r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",454],["r := math_rand.New(math_rand.NewSource(pseudo))",360],["r := math_rand.New(math_rand.NewSource(pseudo))",360]]},{"word":"max","context":[["return max",979],["//     \"max-results\": {",838],["// MaxResults sets the optional parameter \"max-results\": The maximum",774],["for i := 0; i < max; i++ {",538],["c.opt_[\"max-results\"] = maxResults",493],["params.Set(\"max-results\", fmt.Sprintf(\"%v\", v))",493],["if v, ok := c.opt_[\"max-results\"]; ok {",493],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469],["max := 0",453]]},{"word":"maxResults","context":[["//     \"maxResults\": {",9760],["c.opt_[\"maxResults\"] = maxResults",6054],["params.Set(\"maxResults\", fmt.Sprintf(\"%v\", v))",6054],["c.opt_[\"maxResults\"] = maxResults",6054],["if v, ok := c.opt_[\"maxResults\"]; ok {",6054],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["c.urlParams_.Set(\"maxResults\", fmt.Sprint(maxResults))",2908],["c.urlParams_.Set(\"maxResults\", fmt.Sprint(maxResults))",2908],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723]]},{"word":"may","context":[["you may not use this file except in compliance with the License.",78263],["You may obtain a copy of the License at",78110],["// you may not use this file except in compliance with the License.",55975],["// You may obtain a copy of the License at",55863],["// server regardless of whether the field is empty or not. This may be",38333],["* you may not use this file except in compliance with the License.",5867],["* You may obtain a copy of the License at",5818],["// This may be used to include null fields in Patch requests.",4930],["//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file",2295],["//  except in compliance with the License. You may obtain a copy of the License at",2295]]},{"word":"md","context":[["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["// More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",821],["// http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",815],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",676]]},{"word":"memory","context":[["ResourceMemory ResourceName = \"memory\"",667],["StorageMediumMemory  StorageMedium = \"Memory\" // use memory (tmpfs)",499],["// APIVersion and Kind must remain blank in memory.",480],["res[api.ResourceMemory] = resource.MustParse(memory)",409],["package memory",362],["// Watcher of out of memory events.",293],["if memory != \"\" {",282],["Memory                int               `json:\"memory,omitempty\"`",279],["// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",264],["// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",264]]},{"word":"message","context":[["Message string `json:\"message,omitempty\"`",4362],["Message string `json:\"message\"`",2062],["message string",1441],["\"message\": {",997],["Message: message,",913],["// message.",886],["fakeRT := &FakeRoundTripper{message: \"\", status: http.StatusOK}",775],["return message",757],["Message *string `locationName:\"message\" type:\"string\"`",731],["var message string",699]]},{"word":"meta","context":[["\"k8s.io/kubernetes/pkg/api/meta\"",3470],["config := meta.(*Config)",2395],["conn := meta.(*AWSClient).ec2conn",1686],["Meta: meta,",1000],["return &meta.VersionInterfaces{",799],["cs := meta.(*cloudstack.CloudStackClient)",768],["package meta",728],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api/meta\"",687],["metav1 \"k8s.io/kubernetes/pkg/apis/meta/v1\"",580],["conn := meta.(*AWSClient).rdsconn",475]]},{"word":"metadata","context":[["&metadata.ActionParam{",10900],["\"metadata\": {",10319],["Location:    metadata.PayloadParam,",7028],["// Standard object's metadata.",5514],["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["ObjectMeta `json:\"metadata,omitempty\"`",4422],["case \"metadata\":",3932],["r.EncodeString(codecSelferC_UTF81234, string(\"metadata\"))",3900],["// Standard list metadata.",3777]]},{"word":"method","context":[["// Context sets the context to be used in this call's Do method. Any",22537],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// Creating a request object using this method should be used when you want to inject",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Context sets the context to be used in this call's Do method.",4699],["// The provided context supersedes any context provided to the Context method.",2234],["// method.",1077],["switch method {",962],["//       \"description\": \"The preferred language to use for strings returned by this method.\",",890],["// language to use for strings returned by this method.",890]]},{"word":"min","context":[["Marker *string `min:\"1\" type:\"string\"`",1304],["NextToken *string `min:\"1\" type:\"string\"`",774],["func min(a, b int) int {",708],["UserName *string `min:\"1\" type:\"string\" required:\"true\"`",683],["return min",670],["MaxItems *int64 `min:\"1\" type:\"integer\"`",556],["Limit *int64 `min:\"1\" type:\"integer\"`",478],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["Key *string `location:\"uri\" locationName:\"Key\" min:\"1\" type:\"string\" required:\"true\"`",426]]},{"word":"mode","context":[["x.mode = invalid",1526],["x.mode = value",1413],["// -*- Mode: Go; indent-tabs-mode: t -*-",1376],["if x.mode == invalid {",1269],["switch mode {",1188],["t.Skip(\"skipping test in short mode.\")",1093],["mode: 0,",658],["return fi.mode",637],["mode: 0101,",633],["// can be mounted read/write mode to exactly 1 host",596]]},{"word":"model","context":[["package model",3705],["\"github.com/mattermost/platform/model\"",1071],["\"github.com/prometheus/common/model\"",998],["team = Client.Must(Client.CreateTeam(team)).Data.(*model.Team)",797],["var user *model.User",679],["props := model.MapFromJson(r.Body)",642],["user = result.Data.(*model.User)",577],["Metric: model.Metric{",535],["user = Client.Must(Client.CreateUser(user, \"\")).Data.(*model.User)",525],["&model.Sample{",523]]},{"word":"models","context":[["package models",7289],["\"github.com/cloudfoundry/cli/cf/models\"",2208],["models.Fields{",1092],["\"github.com/gogits/gogs/models\"",784],["models.Tags{",573],["if models.IsErrUserNotExist(err) {",550],["Payload *models.Error",534],["o.Payload = new(models.Error)",534],["\"koding/remoteapi/models\"",518],["\"github.com/influxdata/influxdb/models\"",509]]},{"word":"more","context":[["// for more information.",56535],["// GNU Lesser General Public License for more details.",5096],["// GNU General Public License for more details.",4206],["GNU General Public License for more details.",3592],["* GNU General Public License for more details.",3105],["// One or more filters.",1887],["// permissions. For more information on user permissions, see Managing User",1025],["// The maximum number of records to include in the response. If more records",1022],["For more about specifying packages, see 'go help packages'.",1006],["or more contributor license agreements.  See the NOTICE file",952]]},{"word":"mount","context":[["\"k8s.io/kubernetes/pkg/util/mount\"",1899],["// Required: Filesystem type to mount.",1487],["// Filesystem type to mount.",1234],["// Optional: Partition on the disk to mount.",903],["// If omitted, kubelet will attempt to mount the device name.",897],["\"github.com/docker/docker/pkg/mount\"",854],["// NFS represents an NFS mount on the host that shares a pod's lifetime",817],["// Source represents the location and type of a volume to mount.",722],["mounter mount.Interface",721],["// Filesystem type of the volume that you want to mount.",720]]},{"word":"msg","context":[["if err := p.VerboseEqual(msg); err != nil {",19838],["if !p.Equal(msg) {",19058],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["n, err := msg.MarshalTo(data[i:])",7225],["if err := github_com_gogo_protobuf_proto.Unmarshal(data, msg); err != nil {",7079],["if err := github_com_gogo_protobuf_proto.UnmarshalText(data, msg); err != nil {",4860],["t.Fatalf(\"%#v !VerboseProto %#v, since %v\", msg, p, err)",4373],["i = encodeVarintGenerated(data, i, uint64(msg.Size()))",4070],["t.Fatalf(\"%#v !Proto %#v\", msg, p)",3759]]},{"word":"msglen","context":[["var msglen int",42860],["msglen |= (int(b) & 0x7F) << shift",42857],["postIndex := iNdEx + msglen",41105],["if msglen < 0 {",40057],["postIndex := index + msglen",1752],["ml := this.msglen()",45],["msglen := len(b)",30],["if msglen < 4 {",30],["if msglen > 4 {",30],["hl := this.header.msglen()",21]]},{"word":"mu","context":[["s.mu.Lock()",10333],["s.mu.Unlock()",5960],["defer s.mu.Unlock()",5737],["c.mu.Lock()",5243],["r.mu.Lock()",3787],["mu.Lock()",3715],["p.mu.Lock()",2988],["defer c.mu.Unlock()",2974],["c.mu.Unlock()",2946],["s.mu.RLock()",2368]]},{"word":"must","context":[["// Note: You must call the \"Send\" method on the returned request object in order",13378],["//     * Redistributions of source code must retain the above copyright",1749],["//     * Redistributions in binary form must reproduce the above",1736],["// 2. Redistributions in binary form must reproduce the above copyright notice,",1300],["// 1. Redistributions of source code must retain the above copyright notice, this",1163],["*     * Redistributions of source code must retain the above copyright",1101],["*     * Redistributions in binary form must reproduce the above",979],["* viewing this code must follow the course rules and report any viewing",916],["c.Fatal(\"Error must not be nil\")",821],["// Required Permissions: To use this action, an IAM user must have a Manage",772]]},{"word":"mux","context":[["\"github.com/gorilla/mux\"",6868],["mux := http.NewServeMux()",4230],["vars := mux.Vars(r)",3948],["r := mux.NewRouter()",1821],["id := mux.Vars(r)[\"id\"]",1174],["params := mux.Vars(r)",1140],["router := mux.NewRouter()",1020],["name := mux.Vars(r)[\"name\"]",900],["vars := mux.Vars(req)",888],["mux := NewServeMux()",680]]},{"word":"n","context":[["return n",56325],["n += 1 + l + sovGenerated(uint64(l))",30501],["return data[:n], nil",28298],["n, err := m.MarshalTo(data)",28284],["n++",13941],["for i := 0; i < n; i++ {",13560],["n += len(m.XXX_unrecognized)",8149],["i += n",7936],["if n == 0 {",7765],["return n, err",7657]]},{"word":"name","context":[["Name string `json:\"name,omitempty\"`",13075],["name string",10341],["if name == \"\" {",7073],["Name string `json:\"name\"`",6733],["defer deleteImages(name)",6288],["_, err := buildImage(name,",5926],["Name: name,",5258],["if _, err := buildImageFromContext(name, ctx, true); err != nil {",5159],["return name",4915],["for _, name := range names {",4430]]},{"word":"names","context":[["// for names of contributors.",4750],["for _, name := range names {",4430],["\"github.com/juju/names\"",4338],["return names",2333],["names = append(names, name)",2304],["names = append(names, name)",2304],["\"gopkg.in/juju/names.v2\"",2156],["sort.Strings(names)",2073],["var names []string",1906],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610]]},{"word":"namespace","context":[["Namespace: namespace,",2981],["ObjectMeta: api.ObjectMeta{Name: \"mysvc\", Namespace: \"namespace\"},",2388],["if _, err := fmt.Fprintf(w, \"%s\\t\", namespace); err != nil {",2228],["namespace string",1967],["nsFlag := fmt.Sprintf(\"--namespace=%v\", ns)",1405],["ns:     namespace,",793],["Namespace string `json:\"namespace,omitempty\"`",770],["nsFlag = fmt.Sprintf(\"--namespace=%v\", ns)",743],["namespace: \"\",",695],["// Limit that applies to all pods in a namespace",648]]},{"word":"need","context":[["// If we have a async client, we need to wait for the async result",2363],["// request. Bucket owners need not specify this parameter in their requests.",788],["// a shell, you need to explicitly call out to that shell.",720],["err := fmt.Errorf(\"codecgen version mismatch: current: %v, need %v. Re-generate file: %v\",",664],["// FIXME: Will likely need to be reworked (has pointer parameter).",616],["// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not",586],["// due to a conflict in the operation. The client may need to alter the request.",420],["// need to alter the request. When set, the client may use the StatusDetails",363],["// to see the host machine. Most containers will NOT need this.",321],["// CAUTION: If you update code in this file, you may need to also update code",289]]},{"word":"net","context":[["\"net/http\"",139133],["\"net\"",62686],["\"net/url\"",51644],["\"golang.org/x/net/context\"",29586],["Domain:    \"cloudfront.net\",",25375],["\"net/http/httptest\"",17396],["gc \"launchpad.net/gocheck\"",3387],["context \"golang.org/x/net/context\"",2798],["package net",2778],["\"net\",",2754]]},{"word":"network","context":[["\"github.com/juju/juju/network\"",3168],["package network",1325],["\"k8s.io/kubernetes/pkg/kubelet/network\"",1315],["// The ID of the network interface.",649],["dockerCmd(c, \"network\", \"create\", \"-d\", \"bridge\", \"testnetwork1\")",609],["networkPlugin network.NetworkPlugin",608],["\"github.com/docker/docker/daemon/network\"",560],["// Protocol defines network protocols supported for things like conatiner ports.",508],["switch network {",439],["Type:  network.IPv4Address,",424]]},{"word":"new","context":[["buf := new(bytes.Buffer)",10550],["Namespace: \"new\",",4835],["newVal := new(resource.Quantity)",3973],["b := new(bytes.Buffer)",2946],["// newClient creates, initializes and returns a new service client instance.",2270],["*out = new(int64)",2239],["ui := new(cli.MockUi)",1997],["dst := new(string)",1779],["m := new(dns.Msg)",1757],["*out = new(bool)",1581]]},{"word":"newRequest","context":[["req = c.newRequest(op, input, output)",46423],["request:     newRequest(\"GET\", \"http://localhost/111/222/333\"),",633],["request:     newRequest(\"GET\", \"http://aaa.bbb.ccc/111/222/333\"),",582],["request:     newRequest(\"GET\", \"http://aaa.222.ccc/111/222/333\"),",505],["request:     newRequest(\"GET\", \"http://localhost/111/aaa/333\"),",332],["request:     newRequest(\"GET\", \"http://localhost\"),",256],["request:     newRequest(\"GET\", \"http://localhost?foo=bar&baz=ding\"),",198],["request:     newRequest(\"GET\", \"http://localhost/1/2/3\"),",180],["request:        newRequest(\"GET\", \"http://localhost/111\"),",166],["request:        newRequest(\"GET\", \"http://localhost/111/\"),",166]]},{"word":"newVal","context":[["if newVal, err := c.DeepCopy(in.TypeMeta); err != nil {",6751],["newVal := new(resource.Quantity)",3973],["newVal := resource.Quantity{}",3884],["if err := s.Convert(&val, &newVal, 0); err != nil {",3612],["if newVal, err := c.DeepCopy(in.ObjectMeta); err != nil {",3124],["out.TypeMeta = newVal.(unversioned.TypeMeta)",2894],["if newVal, err := c.DeepCopy(in.ListMeta); err != nil {",2640],["if err := deepCopy_resource_Quantity(val, newVal, c); err != nil {",2631],["if newVal, err := c.DeepCopy(val); err != nil {",1211],["out.ListMeta = newVal.(unversioned.ListMeta)",1085]]},{"word":"next","context":[["p.next()",9149],["c = l.next()",3529],["iNdEx = start + next",2193],["// values assigned to them by a call to Uniform* until the next successful",1594],["s.next()",1525],["l.next()",1159],["ch = s.next()",912],["next.ServeHTTP(w, r)",869],["// token, used to page through large result sets. To get the next page",793],["// retrieve the next page of results, set the next request's \"pageToken\"",693]]},{"word":"nil","context":[["if err != nil {",3731570],["return nil",1271420],["return nil, err",870029],["if err == nil {",169101],["if this == nil {",80648],["if m != nil {",68407],["return ret, nil",59215],["if err := googleapi.CheckResponse(res); err != nil {",58830],["var body io.Reader = nil",58552],["return nil, nil",54935]]},{"word":"no","context":[["// no documentation yet",2477],["no := b.Succs[1]",1954],["<no state>",1925],["_ = no",1642],["// If this value is in the future, no logs will be returned.",842],["// no-op",815],["// +build integration,!no-etcd",802],["// DNS_LABEL:  This is a string, no more than 63 characters long, that conforms",726],["// DNS_SUBDOMAIN:  This is a string, no more than 253 characters long, that conforms",722],["// with no spaces. You can also include any of the following characters: =,.@-",691]]},{"word":"noMethod","context":[["raw := noMethod(*s)",39504],["type noMethod Operation",264],["type noMethod Status",164],["type noMethod OperationError",138],["type noMethod User",129],["type noMethod Account",124],["type noMethod Channel",124],["type noMethod Report",113],["type noMethod OperationWarningsData",111],["type noMethod OperationWarnings",111]]},{"word":"node","context":[["if node == nil {",3942],["for _, node := range nodes {",2778],["return node",1953],["for _, node := range nodes.Items {",1668],["return node, nil",1424],["type node struct {",1208],["package node",1138],["[]*node{",1134],["// scheduling time, the pod will not be scheduled onto the node.",1026],["for _, node := range nodeList.Items {",879]]},{"word":"nodes","context":[["for _, node := range nodes {",2778],["for _, node := range nodes.Items {",1668],["return nodes",1288],["for _, n := range nodes {",1029],["Resource(\"nodes\").",840],["return nodes, nil",731],["for i := range nodes.Items {",641],["t.Fatalf(\"bad: %v\", nodes)",618],["// When there are multiple elements, the lists of nodes corresponding to each",592],["nodes = append(nodes, node)",557]]},{"word":"non","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// non-2xx status code is an error. Response headers are in either",5221],["// null. It is an error if a field in this list has a non-empty value.",4930],["// A non-nil error returned from f will halt the iteration.",2234],["// A non-service error occurred.",1771],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["t.Errorf(\"unexpected non-error\")",1580],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307]]},{"word":"not","context":[["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["// server regardless of whether the field is empty or not. This may be",38333],["// Reference imports to suppress errors if they are not otherwise used.",8089],["* you may not use this file except in compliance with the License.",5867],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["// Returns whether the assertion was successful (true) or not (false).",2688],["// string assigned to a user, but should not exceed 40 characters.",2611],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",2506],["//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file",2295]]},{"word":"now","context":[["//    if err == nil { // resp is now filled",13378],["now := time.Now()",10458],["now := unversioned.Now()",1409],["now := time.Now().UTC()",1070],["now := now()",1025],["now := now()",1025],["Since:   &now,",886],["now := time.Now().Unix()",740],["// This is optional for now. If not specified, the Volume is implied to be an EmptyDir.",544],["readyTransitionTimestamp: nc.now(),",540]]},{"word":"ns","context":[["Namespace(c.ns).",6159],["Namespace: \"ns\",",5327],["ns := api.NamespaceDefault",2411],["for _, n := range ns {",2088],["Namespace: ns,",1900],["ns := f.Namespace.Name",1774],["nsFlag := fmt.Sprintf(\"--namespace=%v\", ns)",1405],["deployment, err := c.Extensions().Deployments(ns).Get(deploymentName)",1249],["ns := []int{40, 41, 42, 43, 44, 45, 46}",1195],["var ns string",941]]},{"word":"null","context":[["// null. It is an error if a field in this list has a non-empty value.",4930],["// This may be used to include null fields in Patch requests.",4930],["// requests with the JSON null value. By default, fields with empty",2096],["// API requests with the JSON null value. By default, fields with empty",1737],["// in API requests with the JSON null value. By default, fields with",1097],["// non-empty value. This may be used to include null fields in Patch",901],["// server as null. It is an error if a field in this list has a",901],["// include in API requests with the JSON null value. By default, fields",819],["e.WriteString(\"null\")",618],["fmt.Fprintf(w, \"null\")",511]]},{"word":"num","context":[["if num < 0 {",6279],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["num      float64",4303],["// \tnum:      -0,",4284],["// \tnum:      -221123456.5643,",4284],["// \tnum:      1123456.5643,",4284],["// \tnum:      221123456.5643,",2142],["n := math.Abs(num)",1596],["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431],["// \tnum:      1.23,",1428]]},{"word":"number","context":[["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["//       \"description\": \"Maximum number of results to return.\",",1038],["// The maximum number of records to include in the response. If more records",1022],["// Replicas is the number of desired replicas.",753],["// Use this only when paginating results to indicate the maximum number of items",746],["// number of items to include in a single response page. The maximum",655],["// Services, number",650],["// ResourceQuotas, number",650],["// ReplicationControllers, number",650],["// Pods, number",650]]},{"word":"o","context":[["return o",6853],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["o := orm.NewOrm()",2603],["if err := result.readResponse(response, consumer, o.formats); err != nil {",1602],["if o == nil {",1587],["if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {",1066],["o.buf = append(o.buf, p.tagcode...)",963],["o.buf = append(o.buf, p.tagcode...)",963],["o := old()",904]]},{"word":"obj","context":[["if obj == nil {",9077],["obj, err := c.Fake.",4451],["p.To.Type = obj.TYPE_REG",2458],["return obj, nil",2397],["p = obj.Appendp(ctxt, p)",2173],["\"cmd/internal/obj\"",2098],["return obj",1615],["p.From.Type = obj.TYPE_REG",1543],["p.From.Type = obj.TYPE_MEM",1433],["if obj != nil {",1259]]},{"word":"object","context":[["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// access properties on the request object before or after sending the request. If",13378],["// Creating a request object using this method should be used when you want to inject",13378],["// getting updates only after the object has changed since the last",12114],["// fail if the object's ETag matches the given value. This is useful for",12114],["// Standard object's metadata.",5514],["Type:        []string{\"object\"},",1861],["// All active uniform variables defined in a program object are initialized",1594],["// link operation occurs on the program object, when they are once again",1594],["// to 0 when the program object is linked successfully. They retain the",1594]]},{"word":"objects","context":[["// DeleteCollection deletes a collection of objects.",966],["// Documentation on downloading objects from requester pays buckets can be found",788],["// SchemeGroupVersion is group version used to register these objects",770],["for _, obj := range objects {",725],["// objects.",683],["// List holds a list of objects, which may not be known by the server.",680],["// those objects will be empty.",607],["// Not all objects are required to be scoped to a namespace - the value of this field for",607],["// ObjectMeta is metadata that all persisted resources must have, which includes all objects",599],["// the 'Name' field in EndpointPort objects.",526]]},{"word":"obtain","context":[["You may obtain a copy of the License at",78110],["// You may obtain a copy of the License at",55863],["* You may obtain a copy of the License at",5818],["//  except in compliance with the License. You may obtain a copy of the License at",2295],["// file, You can obtain one at http://mozilla.org/MPL/2.0/.",2018],["// not use this file except in compliance with the License. You may obtain",1957],["// You can obtain one at http://mozilla.org/MPL/2.0/.",1683],["with the License.  You may obtain a copy of the License at",958],["//   You may obtain a copy of the License at",603],["* with the License.  You may obtain a copy of the License at",602]]},{"word":"of","context":[["// Use of this source code is governed by a BSD-style",82711],["You may obtain a copy of the License at",78110],["// You may obtain a copy of the License at",55863],["// server regardless of whether the field is empty or not. This may be",38333],["// Validate inspects the fields of the type to determine if they are valid.",18383],["// error from Do is the result of In-None-Match.",12114],["// but WITHOUT ANY WARRANTY; without even the implied warranty of",9930],["// the Free Software Foundation, either version 3 of the License, or",8408],["* You may obtain a copy of the License at",5818],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509]]},{"word":"off","context":[["return off, err",1420],["return rr, off, err",1278],["off++",911],["return rr, off, nil",782],["off := v.AuxInt",726],["d.off--",685],["if off == len(msg) {",612],["v.AuxInt = off",587],["off := 0",534],["return off, nil",486]]},{"word":"offset","context":[["data[offset] = uint8(v)",6444],["data[offset+2] = uint8(v >> 16)",4294],["data[offset+3] = uint8(v >> 24)",4294],["data[offset+1] = uint8(v >> 8)",4294],["offset++",3625],["return offset + 1",2355],["return offset + 8",2334],["return offset + 4",2333],["data[offset] = uint8(v&0x7f | 0x80)",2150],["data[offset+5] = uint8(v >> 40)",2147]]},{"word":"ok","context":[["if !ok {",225887],["if ok {",61493],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["if awsErr, ok := err.(awserr.Error); ok {",14078],["if awsErr, ok := err.(awserr.Error); ok {",14078],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["var ok bool",10867],["return ok",9194]]},{"word":"old","context":[["old: api.ReplicationController{",1304],["o := old()",904],["n := len(old)",787],["UpdateFunc: func(old, cur interface{}) {",728],["old: extensions.DaemonSet{",543],["successCase.old.ObjectMeta.ResourceVersion = \"1\"",499],["oldPod := old.(*api.Pod)",488],["//     old && !new  = use old",466],["//     !old && !new = use new",466],["// Backwards compat.  The \"old\" stuff should be removed before 1.0",466]]},{"word":"omitempty","context":[["Kind string `json:\"kind,omitempty\"`",30419],["Name string `json:\"name,omitempty\"`",13075],["Id string `json:\"id,omitempty\"`",11055],["NextPageToken string `json:\"nextPageToken,omitempty\"`",9271],["Type string `json:\"type,omitempty\"`",7033],["SelfLink string `json:\"selfLink,omitempty\"`",6642],["Etag string `json:\"etag,omitempty\"`",6589],["Description string `json:\"description,omitempty\"`",5884],["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["ObjectMeta `json:\"metadata,omitempty\"`",4422]]},{"word":"on","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// access properties on the request object before or after sending the request. If",13378],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["// Not applicable on Windows as uses Unix specific functionality",2299],["//  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",2295],["// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",2059],["// link operation occurs on the program object, when they are once again",1594],["// permissions. For more information on user permissions, see Managing User",1025]]},{"word":"one","context":[["// file, You can obtain one at http://mozilla.org/MPL/2.0/.",2018],["// If one of the conversion functions is malformed, detect it immediately.",1915],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// You can obtain one at http://mozilla.org/MPL/2.0/.",1683],["// Only one of its members may be specified.",1386],["// At most one of Media and ResumableMedia may be set.",1267],["* Licensed to the Apache Software Foundation (ASF) under one",1018],["Licensed to the Apache Software Foundation (ASF) under one",974],["// if one of the deep copy functions is malformed, detect it immediately.",847],["// Only one of sinceSeconds or sinceTime may be specified.",842]]},{"word":"only","context":[["// getting updates only after the object has changed since the last",12114],["// Read-only.",2967],["// only).",1872],["//     \"https://www.googleapis.com/auth/cloud-platform.read-only\",",1870],["// Uniform1i and Uniform1iv are the only two functions that may be used to",1168],["// (regardless of what the tag's key is). If you want to list only resources",931],["//  Use a Resource element with the domain name to limit the action to only",846],["// (output only).",764],["// Use this only when paginating results to indicate the maximum number of items",746],["// SelfLink: Server defined URL for this resource (output only).",740]]},{"word":"op","context":[["req = c.newRequest(op, input, output)",46423],["op := &request.Operation{",37657],["op := &aws.Operation{",5650],["switch op {",3899],["op := &service.Operation{",3192],["req := c.NewRequest(op, params, data)",2823],["\"github.com/op/go-logging\"",1467],["req := aws.NewRequest(c.Service, op, params, data)",1394],["return invOp2(x, y, op)",1370],["return gce.waitForGlobalOp(op)",1201]]},{"word":"operation","context":[["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// operation.",1845],["// link operation occurs on the program object, when they are once again",1594],["// Note: This operation can generate multiple requests to a service.",1419],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["// \"ifMetagenerationMatch\": Makes the operation conditional on whether",669],["// Validate checks if the operation is valid.",627],["// buildURL builds the URL for the operation.",619],["// A human-readable description of the status of this operation.",609],["// concurrency, change detection, and the watch operation on a resource or set of resources.",594]]},{"word":"opt","context":[["unversioned.ListMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",2125],["ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",1678],["for _, opt := range opts {",1120],["Header *ResponseHeader `protobuf:\"bytes,1,opt,name=header\" json:\"header,omitempty\"`",984],["Name string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`",886],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["v1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",720],["Name string `json:\"name\" protobuf:\"bytes,1,opt,name=name\"`",695],["u, err := addOptions(u, opt)",631],["ic.CreateIteratorFn = func(opt influxql.IteratorOptions) (influxql.Iterator, error) {",623]]},{"word":"opt_","context":[["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["c.opt_[\"pageToken\"] = pageToken",6090],["if v, ok := c.opt_[\"pageToken\"]; ok {",6090],["if v, ok := c.opt_[\"maxResults\"]; ok {",6054],["c.opt_[\"maxResults\"] = maxResults",6054],["opt_      map[string]interface{}",5638],["opt_ map[string]interface{}",4280],["opt_    map[string]interface{}",4162],["opt_       map[string]interface{}",3590]]},{"word":"option","context":[["// (at your option) any later version.",8541],["(at your option) any later version.",4611],["* (at your option) any later version.",1891],["for _, option := range options {",1202],["// of the License, or (at your option) any later version.",854],["c.Fatalf(\"unexpected failure when running container with --cgroup-parent option - %s\\n%v\", string(out), err)",442],["// Software Foundation, either version 3 of the License, or (at your option)",371],["// Uses the host's network namespace. If this option is set, the ports that will be",326],["// License, or (at your option) any later version.",312],["// Reference a --server option so tests can run anywhere.",272]]},{"word":"optional","context":[["// +optional",17804],["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["// If additional configuration is needed for the client instance use the optional",2272],["UserAgent string // optional additional User-Agent fragment",2098],["// Details (optional):",2007],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732]]},{"word":"options","context":[["WatchFunc: func(options api.ListOptions) (watch.Interface, error) {",2695],["ListFunc: func(options api.ListOptions) (runtime.Object, error) {",2282],["if options.WithNamespace {",1854],["Body(options).",1823],["}, {Name: func(v string) *string { return &v }(\"options\"),",1414],["for _, option := range options {",1202],["options := api.ListOptions{LabelSelector: selector}",1136],["JsonName: func(v string) *string { return &v }(\"options\"),",1057],["options := api.ListOptions{LabelSelector: label}",1037],["if options == nil {",902]]},{"word":"opts","context":[["gensupport.SetOptions(c.urlParams_, opts...)",18124],["VersionedParams(&opts, api.ParameterCodec).",1587],["\"github.com/docker/docker/opts\"",1125],["for _, opt := range opts {",1120],["if opts != nil {",974],["if opts == nil {",905],["opts.Logger = newTestLogger(t)",816],["Watch(opts api.ListOptions) (watch.Interface, error)",805],["for _, o := range opts {",698],["opts := NewOptions()",581]]},{"word":"or","context":[["Unless required by applicable law or agreed to in writing, software",78790],["WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",78730],["// Unless required by applicable law or agreed to in writing, software",58926],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",42996],["// server regardless of whether the field is empty or not. This may be",38333],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// access properties on the request object before or after sending the request. If",13378],["// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or",11522],["// the Free Software Foundation, either version 3 of the License, or",8408],["* Unless required by applicable law or agreed to in writing, software",6574]]},{"word":"order","context":[["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// created. It is not guaranteed to be set in happens-before order across separate operations.",601],["// order.",538],["// It should be a low-latency function in order to not slow down the upload operation.",498],["//     \"https://www.googleapis.com/auth/apps.order\"",472],["t := marktemp(order)",471],["// after every chunk. It should be a low-latency function in order to",430],["// in row major order.",427],["// major order. If transpose is true, each matrix is assumed to be supplied",426],["cleantemp(t, order)",415]]},{"word":"org","context":[["http://www.apache.org/licenses/LICENSE-2.0",79621],["//     http://www.apache.org/licenses/LICENSE-2.0",43271],["\"golang.org/x/net/context\"",29586],["// http://www.apache.org/licenses/LICENSE-2.0",7463],["//    http://www.apache.org/licenses/LICENSE-2.0",5528],["*     http://www.apache.org/licenses/LICENSE-2.0",4447],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["\"google.golang.org/grpc\"",3595],["//      http://www.apache.org/licenses/LICENSE-2.0",3481],["\"org\",",2892]]},{"word":"origin","context":[["buildapi \"github.com/openshift/origin/pkg/build/api\"",1916],["imageapi \"github.com/openshift/origin/pkg/image/api\"",1852],["deployapi \"github.com/openshift/origin/pkg/deploy/api\"",1759],["\"github.com/openshift/origin/pkg/client\"",1689],["authorizationapi \"github.com/openshift/origin/pkg/authorization/api\"",1608],["\"github.com/openshift/origin/pkg/cmd/util/clientcmd\"",1535],["cmdutil \"github.com/openshift/origin/pkg/cmd/util\"",976],["configapi \"github.com/openshift/origin/pkg/cmd/server/api\"",860],["deployutil \"github.com/openshift/origin/pkg/deploy/util\"",765],["testutil \"github.com/openshift/origin/test/util\"",746]]},{"word":"os","context":[["\"os\"",203697],["os.Exit(1)",55587],["\"os/exec\"",30565],["os.Exit(0)",12708],["if os.IsNotExist(err) {",12528],["os.Exit(2)",8069],["\"os/signal\"",7894],["defer os.RemoveAll(dir)",6900],["cmd.Stderr = os.Stderr",4643],["fmt.Fprintln(os.Stderr, err)",4376]]},{"word":"other","context":[["// in the documentation and/or other materials provided with the",1838],["// other function will result in a GL.INVALID_OPERATION error.",1168],["//    and/or other materials provided with the distribution.",1096],["* in the documentation and/or other materials provided with the",987],["other: a",781],["podNamespace := \"other\"",710],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["fsm.data = other",591],["other := fsm.data.Clone()",591]]},{"word":"out","context":[["return out, err",54533],["out.Items = nil",23672],["return out, nil",14819],["out.Name = in.Name",14366],["out.ReadOnly = in.ReadOnly",11655],["return out",11511],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["out.Message = in.Message",7924],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["out.Path = in.Path",7500]]},{"word":"output","context":[["req.Data = output",54229],["req = c.newRequest(op, input, output)",46423],["return output",2252],["output = out",2185],["output := String{}",1878],["output: analysis.TokenStream{",1498],["// Id: Unique identifier for the resource; defined by the server (output",1255],["return output, nil",1113],["c.Fatalf(\"expected output ok received %s\", actual)",1072],["output, err := cmd.CombinedOutput()",1067]]},{"word":"p","context":[["p.p = make(map[string]interface{})",32934],["p.p = make(map[string]interface{})",32934],["if p.p == nil {",31639],["if p.p == nil {",31639],["return p",26609],["if err := p.VerboseEqual(msg); err != nil {",19838],["if !p.Equal(msg) {",19058],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["p.next()",9149]]},{"word":"package","context":[["package main",180297],["package api",10116],["package client",9340],["package iso20022",8801],["package cmd",8750],["package models",7289],["package server",6981],["package config",6876],["package util",5967],["package commands",5389]]},{"word":"page","context":[["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler(\"Paginator\"))",3037],["// Pages invokes f for each page of results.",2234],["//            fmt.Println(page)",1419],["// calling the \"fn\" function with the response data for each page. To stop",1419],["u.Set(\"page\", vv)",1217],["if v, found := p.p[\"page\"]; found {",1217],["p.p[\"page\"] = v",1217],["// token, used to page through large result sets. To get the next page",793],["// token, used to page through large result sets. To get the next page",793]]},{"word":"pageToken","context":[["//     \"pageToken\": {",10506],["if v, ok := c.opt_[\"pageToken\"]; ok {",6090],["c.opt_[\"pageToken\"] = pageToken",6090],["params.Set(\"pageToken\", fmt.Sprintf(\"%v\", v))",6090],["c.opt_[\"pageToken\"] = pageToken",6090],["c.urlParams_.Set(\"pageToken\", pageToken)",3624],["c.urlParams_.Set(\"pageToken\", pageToken)",3624],["defer c.PageToken(c.urlParams_.Get(\"pageToken\")) // reset paging to original point",2234],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["// PageToken sets the optional parameter \"pageToken\": The continuation",1281]]},{"word":"panic","context":[["panic(err)",172161],["panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)",12071],["panic(\"unreachable\")",8865],["panic(err.Error())",5050],["panic(\"parameter v has incorrect length\")",3384],["panic(e)",2654],["// shouldn't panic",2635],["panic(\"Not implemented\")",2092],["panic(\"not reached\")",1841],["panic(\"fail\")",1625]]},{"word":"parameter","context":[["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["return fmt.Errorf(\"Missing parameter\")",3920],["panic(\"parameter v has incorrect length\")",3384],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["// aws.Config parameter to add your extra config.",2272],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723]]},{"word":"parameters","context":[["//   \"parameters\": {",58504],["autorest.WithJSON(parameters),",811],["\"parameters\": [",803],["// parameters.",654],["// Add query string parameters",616],["// Optional parameters:",591],["// Set query parameters.",590],["Optional parameters:",580],["// Required parameters:",552],["Required parameters:",457]]},{"word":"params","context":[["params := make(url.Values)",36391],["urls += \"?\" + params.Encode()",35563],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["params.Set(\"alt\", \"json\")",25051],["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["params.Set(\"alt\", alt)",10492],["params.Set(\"pageToken\", fmt.Sprintf(\"%v\", v))",6090],["params.Set(\"maxResults\", fmt.Sprintf(\"%v\", v))",6054],["\"github.com/juju/juju/apiserver/params\"",4974],["// as then you are sure you have configured all required params",4924]]},{"word":"parent","context":[["if parent == nil {",963],["if parent != nil {",457],["c.Fatalf(\"unexpected failure when running container with --cgroup-parent option - %s\\n%v\", string(out), err)",442],["if r.parent != nil {",389],["if parent == \"\" {",358],["if parent != \"\" {",297],["return parent",279],["// Called on the parent thread (main thread in case of bootstrap), can allocate memory.",224],["if e.parent == nil {",207],["// and its parent layer. If parent is \"\", then all changes will be ADD changes.",191]]},{"word":"parser","context":[["package parser",3225],["\"go/parser\"",2810],["\"github.com/cockroachdb/cockroach/sql/parser\"",1069],["skip(parser)",767],["type parser struct {",766],["Expect(parser.Statements).To(Equal([]ast.Node{",707],["if parser.unread < 1 && !yaml_parser_update_buffer(parser, 1) {",492],["if parser.unread < 1 && !yaml_parser_update_buffer(parser, 1) {",492],["case parser.EQ:",485],["\"github.com/cockroachdb/cockroach/pkg/sql/parser\"",458]]},{"word":"part","context":[["// This file is part of the go-ethereum library.",3823],["// Prefix indicates this name will be used as part of generation, in which case",2533],["//     \"part\": {",1107],["//     \"part\"",1088],["ctx.WriteString(part)",908],["for _, part := range subCtx.parts {",906],["for _, part := range parts {",811],["// referencing a part of an object.",706],["// This file is part of go-ethereum.",681],["c.part = part",649]]},{"word":"partial","context":[["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["//  - A partial container ID prefix (e.g. short ID) of any length that is",200],["// TODO: reorder and partial match extra.",190],["// digest represents the partial evaluation of a checksum.",163],["partial := t.controller.ExpectCall(",125],["// The watch stream mechanism handles many common partial data errors, so closed",106],["exp := partial(HasSubstr(\"\"))",100],["// execution stops, but partial results may already have been written to",98],["// the partial errors. - Workflow errors. A typical workflow has",88]]},{"word":"parts","context":[["if len(parts) != 2 {",2912],["if len(parts) > 1 {",1357],["if len(parts) == 2 {",1254],["for _, part := range subCtx.parts {",906],["if len(subCtx.parts) > 0 {",906],["if len(parts) < 2 {",849],["if len(parts) == 1 {",832],["for _, part := range parts {",811],["switch parts[0] {",752],["if len(parts) != 3 {",738]]},{"word":"path","context":[["//       \"location\": \"path\",",89797],["\"path/filepath\"",65545],["\"path\"",34250],["_p0, err = BytePtrFromString(path)",10837],["path string",3524],["path:        \"\",",3407],["return path",3313],["if path == \"\" {",3238],["\"subscriptionId\":    autorest.Encode(\"path\", client.SubscriptionID),",2736],["\"resourceGroupName\": autorest.Encode(\"path\", resourceGroupName),",2634]]},{"word":"pb","context":[["b.RunParallel(func(pb *testing.PB) {",2064],["for pb.Next() {",2058],["return pb",989],["pb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",846],["pb := initGoTest(true)",632],["overify(t, pb,",546],["pb := initGoTest(false)",540],["pb \"github.com/youtube/vitess/go/vt/proto/topodata\"",484],["Inner: &pb.InnerMessage{",438],["pb \"github.com/hyperledger/fabric/protos\"",418]]},{"word":"peer","context":[["for _, peer := range peers {",518],["peer \"github.com/ipfs/go-ipfs/p2p/peer\"",495],["peer \"github.com/ipfs/go-ipfs/p2p/peer\"",495],["Cmd: \"peer\",",414],["package peer",287],["if viper.GetBool(\"peer.tls.enabled\") {",253],["peer := &PeerInfo{AS: 65001, Address: net.ParseIP(\"10.0.0.1\")}",222],["path := ProcessMessage(updateMsg, peer, time.Now())[0]",210],["//use a different address than what we usually use for \"peer\"",202],["// Time allowed to write a message to the peer.",189]]},{"word":"pending","context":[["// pending HTTP request will be aborted if the provided context is",22537],["// Any pending HTTP request will be aborted if the provided context",4780],["// methods. Any pending HTTP request will be aborted if the provided",466],["\"current\": \"pending\",",328],["glog.V(5).Infof(\"pod default case, pending\")",300],["glog.V(5).Infof(\"pod waiting > 0, pending\")",300],["pending++",232],["pending := 0",231],["// < scheduled, and pending < running. This ensures that we delete pods",199],["Pending:    []string{\"pending\"},",184]]},{"word":"permissions","context":[["See the License for the specific language governing permissions and",78733],["// See the License for the specific language governing permissions and",45859],["// the required permissions, the error response is DryRunOperation. Otherwise,",6922],["// Checks whether you have the required permissions for the action, without",6903],["// permissions and limitations under the License.",6602],["* See the License for the specific language governing permissions and",6302],["// permissions and limitations under the License. See the AUTHORS file",4735],["//  either express or implied. See the License for the specific language governing permissions",2295],["// License for the specific language governing permissions and limitations",1965],["// permissions. For more information on user permissions, see Managing User",1025]]},{"word":"pkg","context":[["\"k8s.io/kubernetes/pkg/api\"",26465],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"k8s.io/kubernetes/pkg/util\"",8174],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"k8s.io/kubernetes/pkg/fields\"",6969],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047]]},{"word":"plugin","context":[["t.Errorf(\"Can't find the plugin by name\")",1899],["package plugin",937],["plugin.host = host",855],["plugin:  plugin,",832],["plugin:  plugin,",832],["\"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache\"",617],["\"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm\"",607],["// Network plugin.",580],["\"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm/predicates\"",559],["schedulerapi \"k8s.io/kubernetes/plugin/pkg/scheduler/api\"",555]]},{"word":"pod","context":[["pod := &api.Pod{",7955],["for _, pod := range pods {",4806],["for _, pod := range pods.Items {",3348],["// kubelet's host machine and then exposed to the pod.",3083],["pod: &api.Pod{",2454],["for _, container := range pod.Spec.Containers {",2060],["return pod",1974],["for _, pod := range podList.Items {",1965],["podFullName := kubecontainer.GetPodFullName(pod)",1324],["pod := obj.(*api.Pod)",1228]]},{"word":"pods","context":[["for _, pod := range pods {",4806],["for _, pod := range pods.Items {",3348],["pods := []*api.Pod{",2589],["Resource(\"pods\").",1872],["pods: []*api.Pod{",1853],["kubelet.podManager.SetPods(pods)",1562],["for _, p := range pods {",1193],["return pods, nil",1086],["return pods",1025],["for i := range pods {",997]]},{"word":"point","context":[["defer c.PageToken(c.urlParams_.Get(\"pageToken\")) // reset paging to original point",2234],["// Read next point.",667],["// Floating point.",623],["// at some point during pod execution (e.g. due to a pod label update), the",592],["// The suffix f indicates that floating-point values are being passed; the",584],["// traffic intended for the service should be sent to an ingress point.",484],["// LoadBalancerIngress represents the status of a load-balancer ingress point:",484],["// Pop next point off the stack.",473],["// at some point during pod execution (e.g. due to an update), the system",434],["// Optional: The kubernetes object related to the entry point.",426]]},{"word":"pointer","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// However, any non-pointer, non-interface field appearing in",683],["// FIXME: Will likely need to be reworked (has pointer parameter).",616],["// to store v and returns a pointer to it.",599],["// unable to generate simple pointer conversion for unversioned.Time -> unversioned.Time",550],["// requests. However, any non-pointer, non-interface field appearing in",469],["panic(\"parameter pointer must be a slice\")",412],["if pointer != nil {",412],["if pointer != nil && pointer_v.Kind() != reflect.Slice {",411],["var pointer_v = reflect.ValueOf(pointer)",411]]},{"word":"policy","context":[["// permissions level for the stack, or an attached policy that explicitly grants",945],["// PullPolicy describes a policy for if/when to pull a container image",705],["// The default policy is Retain.",457],["// this action. You cannot use an IAM policy to constrain this action's parameters.",440],["package policy",394],["for _, policy := range successCases {",393],["// Deploy, or Manage permissions level for the stack, or an attached policy",393],["// Optional: Set DNS policy.  Defaults to \"ClusterFirst\"",361],["// The policy document.",334],["\"invalid restart policy 1\": {",306]]},{"word":"popr","context":[["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(616))",9510],["data[i] = byte(popr.Intn(256))",6917],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["littlefuzz = append(littlefuzz, byte(popr.Intn(256)))",2720],["dAtA[i] = byte(popr.Intn(256))",1663],["popr := math_rand2.New(math_rand2.NewSource(time2.Now().UnixNano()))",317],["p := NewPopulatedFloatingPoint(popr, true)",315]]},{"word":"port","context":[["if port == 0 {",1070],["if port == \"\" {",924],["var port int",901],["for _, port := range ports {",868],["if port.NodePort == 0 {",814],["for _, port := range container.Ports {",742],["// Service is a named abstraction of software service (for example, mysql) consisting of local port",734],["port,",686],["// TCPSocket specifies an action involving a TCP port.",651],["// EndpointPort is a tuple that describes a single port.",594]]},{"word":"ports","context":[["\"ports\": &Schema{",1139],["\"ports\": [",906],["for _, port := range ports {",868],["\"k8s.io/kubernetes/pkg/master/ports\"",864],["ports = append(ports, container.Ports...)",743],["ports = append(ports, container.Ports...)",743],["for _, p := range ports {",647],["\"ports.#\": &terraform.ResourceAttrDiff{",617],["var ports []api.ContainerPort",580],["// Protocol defines network protocols supported for things like conatiner ports.",508]]},{"word":"pos","context":[["pos++",2417],["tok, pos, lit := p.scanIgnoreWhitespace()",1550],["pos := p.pos",1325],["pos := p.pos",1325],["pos := 0",1123],["pos += 2",768],["if pos == -1 {",680],["pos += 4",666],["s.pos++",664],["pos += n",664]]},{"word":"postIndex","context":[["if postIndex > l {",71103],["iNdEx = postIndex",67189],["postIndex := iNdEx + msglen",41105],["postIndex := iNdEx + intStringLen",21411],["postIndex := iNdEx + byteLen",3872],["index = postIndex",2697],["if iNdEx < postIndex {",1887],["if err := m.ObjectMeta.Unmarshal(data[iNdEx:postIndex]); err != nil {",1792],["postIndex := index + msglen",1752],["if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {",1680]]},{"word":"prefix","context":[["prefix := \"\"",1599],["return NameIsDNSSubdomain(name, prefix)",1103],["prefix string",1063],["var prefix string",946],["if prefix == \"\" {",902],["if prefix {",825],["if prefix != \"\" {",740],["return prefix",641],["t.Errorf(\"%s: missing prefix for: %v\", k, errs[i])",599],["prefix,",516]]},{"word":"print","context":[["// Pretty-print the response data.",34269],["print(1)",1382],["p.print(blank)",1022],["print(2)",1001],["print(\"\\n\")",967],["RUN [ $(ls -l / | grep exists | awk '{print $3\":\"$4}') = 'dockerio:dockerio' ]",736],["RUN [ $(ls -l /exists | awk '{print $3\":\"$4}') = 'dockerio:dockerio' ]`,",696],["RUN [ $(ls -l /test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l /test_dir/test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l / | grep test_dir | awk '{print $3\":\"$4}') = 'root:root' ]",592]]},{"word":"process","context":[["c.process(cmd)",1106],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// At least one container is still running or is in the process of being restarted.",588],["// The UID to run the entrypoint of the container process.",558],["// Set this value longer than the expected cleanup time for your process.",539],["// process.",460],["// this phase is used by the persistent volume claim binder to signal to another process to reclaim the resource",453],["package process",414],["// All containers are in the process of restarting",306],["// and in the process of restarting",306]]},{"word":"program","context":[["This program is distributed in the hope that it will be useful,",3745],["* This program is distributed in the hope that it will be useful,",3470],["This program is free software: you can redistribute it and/or modify",3094],["// This program is distributed in the hope that it will be useful,",3031],["* This program is free software: you can redistribute it and/or modify",2570],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",2506],["// along with this program.  If not, see <http://www.gnu.org/licenses/>.",1860],["along with this program.  If not, see <http://www.gnu.org/licenses/>",1828],["// This program is free software: you can redistribute it and/or modify",1697],["// to 0 when the program object is linked successfully. They retain the",1594]]},{"word":"project","context":[["//     \"project\": {",10121],["c.project = project",9351],["c.project = project",9351],["//     \"project\",",7637],["\"project\": c.project,",3921],["\"project\": c.project,",3921],["//       \"description\": \"Name of the project scoping this request.\",",3018],["project string",2505],["//     \"project\"",2468],["Project      string `json:\"project,omitempty\"`",2012]]},{"word":"proto","context":[["var _ = proto.Marshal",6750],["return true, proto.ErrInternalBadWireType",6693],["\"github.com/golang/protobuf/proto\"",3772],["if wire != proto.WireBytes {",3435],["import proto \"github.com/golang/protobuf/proto\"",3039],["import proto \"github.com/golang/protobuf/proto\"",3039],["import proto \"github.com/gogo/protobuf/proto\"",2812],["import proto \"github.com/gogo/protobuf/proto\"",2812],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552]]},{"word":"protobuf","context":[["Extendee: func(v string) *string { return &v }(\".google.protobuf.FileOptions\"),",4847],["Extendee: func(v string) *string { return &v }(\".google.protobuf.MessageOptions\"),",4039],["\"github.com/golang/protobuf/proto\"",3772],["import proto \"github.com/golang/protobuf/proto\"",3039],["import proto \"github.com/gogo/protobuf/proto\"",2812],["\"github.com/gogo/protobuf/proto\"",2474],["unversioned.ListMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",2125],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FieldOptions\"),",1818],["ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",1678],["TypeName: func(v string) *string { return &v }(\".google.protobuf.UninterpretedOption\"),",1414]]},{"word":"protocol","context":[["req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)",5739],["protocol = \"tcp\"",1282],["package protocol",1045],["// ProtocolTCP is the TCP protocol.",713],["// ProtocolUDP is the UDP protocol.",713],["Protocol          string `json:\"protocol,omitempty\"`",636],["Protocol Protocol `json:\"protocol,omitempty\"`",605],["// The IP protocol for this port.",594],["protocol = \"/tcp\"",550],["\"github.com/aws/aws-sdk-go/private/protocol\"",511]]},{"word":"provided","context":[["// pending HTTP request will be aborted if the provided context is",22537],["// Any pending HTTP request will be aborted if the provided context",4780],["// Overrides userIp if both are provided.",2283],["// The provided context supersedes any context provided to the Context method.",2234],["// The provided context supersedes any context provided to the Context method.",2234],["// modification, are permitted provided that the following conditions are",1972],["// in the documentation and/or other materials provided with the",1838],["// WeekdayAbbreviated returns the locales abbreviated weekday given the 'weekday' provided",1430],["// WeekdayShort returns the locales short weekday given the 'weekday' provided",1430],["// WeekdayWide returns the locales wide weekday given the 'weekday' provided",1430]]},{"word":"provider","context":[["// Queried from cloud provider, if available.",802],["\"github.com/juju/juju/provider/dummy\"",615],["// and allows a Source for provider-specific attributes",592],["\"github.com/juju/juju/provider/common\"",570],["// to the cloud provider?",495],["package provider",486],["// external load balancer (if the cloud provider supports it), in addition",484],["glog.Fatalf(\"Cloud provider could not be initialized: %v\", err)",449],["// ProviderName returns the cloud provider ID.",439],["provider:",438]]},{"word":"ptr","context":[["if ptr.Pointer() != nil {",20068],["v.AddArg(ptr)",3469],["ptr := v.Args[0]",1744],["ptr := v_0.Args[0]",1607],["ptr.SetPointer(nil)",916],["qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))",756],["p := ptr(s)",686],["if ptr != nil {",640],["n.SetPointer(ptr)",464],["if ptr == nil {",408]]},{"word":"q","context":[["return q",7145],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["q.m.Lock()",1484],["q.m.Unlock()",1467],["t.Fatalf(\"can't mkdir(%q): %s\", root, err)",1410],["return nil, fmt.Errorf(\"Read %q: %v\", name, err)",1238],["q.lock.Lock()",1016],["c.Fatalf(\"failed to run container: %v, output: %q\", err, out)",954],["defer q.lock.Unlock()",927]]},{"word":"query","context":[["//       \"location\": \"query\",",83874],["if query.skip {",3906],["} else if !query.success() {",3906],["t.Error(query.failureMessage())",3906],["if err := query.Execute(s); err != nil {",3874],["t.Error(query.Error(err))",3871],["t.Logf(\"SKIP:: %s\", query.name)",3861],["for i, query := range test.queries {",2679],["err = ec2.query(params, resp)",2002],["req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)",1712]]},{"word":"r","context":[["if r.TryDecodeAsNil() {",130473],["_, _, _ = h, z, r",60384],["r.EncodeNil()",55173],["z, r := codec1978.GenHelperDecoder(d)",42393],["return r",26906],["if r.Intn(10) != 0 {",25630],["r.ReadEnd()",19658],["z, r := codec1978.GenHelperEncoder(e)",17991],["r.EncodeString(codecSelferC_UTF81234, \"\")",14602],["if r.Intn(2) == 0 {",14164]]},{"word":"r0","context":[["n = int(r0)",7051],["fd = int(r0)",3024],["return r0, r1",2305],["r0 = rf(_a0)",1254],["return r0",1215],["val = int(r0)",1063],["pid = int(r0)",1053],["uid = int(r0)",755],["if r0 != 0 {",745],["var r0 error",693]]},{"word":"rand","context":[["\"math/rand\"",26174],["\"crypto/rand\"",10968],["rand.Seed(time.Now().UnixNano())",2847],["rand.Seed(time.Now().UTC().UnixNano())",1780],["r := rand.New(rand.NewSource(time.Now().UnixNano()))",1239],["r := rand.New(rand.NewSource(time.Now().UnixNano()))",1239],["rand.Seed(time.Now().Unix())",1035],["import \"math/rand\"",665],["crand \"crypto/rand\"",572],["mrand \"math/rand\"",443]]},{"word":"range","context":[["for _, tt := range tests {",22910],["for _, test := range tests {",20305],["for i := range in.Items {",16680],["for i := range *in {",14643],["for i, tt := range tests {",10529],["for i, test := range tests {",8257],["for i := range data {",7713],["for i := range in {",5562],["for _, pod := range pods {",4806],["for k2, v2 := range v {",4716]]},{"word":"raw","context":[["raw := noMethod(*s)",39504],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["GeometryFormat: \"raw\",",2294],["if raw == nil {",1077],["z.raw.end--",843],["z.data.end = z.raw.end",700],["var raw interface{}",490],["return json.Marshal(raw)",454]]},{"word":"rc","context":[["defer rc.Close()",1399],["rc.Close()",815],["manager.syncReplicationController(getKey(rc, t))",624],["rc := &api.ReplicationController{",613],["return rc",612],["return rc, nil",404],["for _, rc := range rcs.Items {",333],["for _, rc := range rcList.Items {",326],["rc, err := c.ReplicationControllers(ns).Get(name)",310],["rcKey, err := controller.KeyFunc(rc)",306]]},{"word":"re","context":[["// Editing this file might prove futile when you re-run the swagger generate command",2557],["return c.RenderJson(re)",748],["c.Assert(re.StatusCode, Equals, http.StatusOK)",592],["return re",569],["re := info.NewRe()",523],["// Editing this file might prove futile when you re-run the generate command",259],["// SelfLink: A URL to re-request this resource.",244],["StartedAt util.Time `json:\"startedAt,omitempty\" description:\"time at which the container was last (re-)started\"`",225],["fs.Close() // Close immediately; we're just doing a `touch` here",225],["// Empty: A generic empty message that you can re-use to avoid defining",224]]},{"word":"read","context":[["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["//     \"https://www.googleapis.com/auth/cloud-platform.read-only\",",1870],["return thrift.PrependError(fmt.Sprintf(\"%T read error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T read struct end error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T field %d read error: \", p, fieldId), err)",1514],["return fmt.Errorf(\"%T read struct end error: %s\", p, err)",1365],["return fmt.Errorf(\"%T field %d read error: %s\", p, fieldId, err)",1365],["return fmt.Errorf(\"%T read error: %s\", p, err)",832],["return nil, fmt.Errorf(\"AssetInfo %s can't read by error: %v\", name, err)",646],["return nil, fmt.Errorf(\"Asset %s can't read by error: %v\", name, err)",646]]},{"word":"received","context":[["// You should have received a copy of the GNU Lesser General Public License",5180],["// You should have received a copy of the GNU General Public License",4154],["You should have received a copy of the GNU General Public License",3440],["* You should have received a copy of the GNU General Public License",2903],["c.Fatalf(\"expected output ok received %s\", actual)",1072],["You should have received a copy of the GNU Lesser General Public License",950],["c.Fatalf(\"expected output not ok received %s\", actual)",780],["// You should have received a copy of the GNU Affero General Public License",708],["You should have received a copy of the GNU Affero General Public License",518],["received := make(chan string)",500]]},{"word":"ref","context":[["//     \"$ref\": \"Operation\"",4819],["//     \"$ref\": \"ObjectAccessControl\"",1435],["if ref != nil {",1347],["// - session_id, session ref, Reference to a valid session",1331],["//     \"$ref\": \"Object\"",1124],["//     \"$ref\": \"File\"",1058],["//     \"$ref\": \"Report\"",1014],["//     \"$ref\": \"Empty\"",1005],["//     \"$ref\": \"Account\"",849],["//     \"$ref\": \"Table\"",829]]},{"word":"reference","context":[["// Always reference these packages, just in case the auto-generated code",3048],["\"github.com/docker/docker/reference\"",814],["if false { // reference the types, but skip this branch at build/run time",664],["// TemplateRef is a reference to an object that describes the pod that will be created if",604],["// cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax",574],["Type:     \"reference\",",565],["// See the AWS API reference guide for 's",504],["// reference is to a container within a pod, this would take on a value like:",490],["// See the AWS API reference guide for Amazon API Gateway's",456],["\"github.com/docker/distribution/reference\"",455]]},{"word":"reflect","context":[["\"reflect\"",67635],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["case reflect.String:",6428],["case reflect.Struct:",5753],["case reflect.Slice:",4924],["case reflect.Bool:",4852],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556]]},{"word":"regexp","context":[["\"regexp\"",37585],["import \"regexp\"",485],["matched, _ := regexp.MatchString(regex, out)",297],["if !regexp.MustCompile(`(?m)^hello world`).MatchString(out) {",294],["match, err := regexp.MatchString(\"^[0-9a-f]{64}$\", strings.TrimSuffix(out, \"\\n\"))",223],["Regex: &influxql.RegexLiteral{Val: regexp.MustCompile(`[cg]pu`)},",211],["if regexp.MustCompile(`-$`).MatchString(value) {",194],["\"regexp/syntax\"",192],["match, err := regexp.MatchString(pattern, str)",181],["package regexp",180]]},{"word":"region","context":[["// to return a list of gateways for your account and region.",1344],["{lang: 0x0, region: 0x0},",1250],["//     \"region\": {",1136],["c.region = region",1057],["c.region = region",1057],["Region string `json:\"region,omitempty\"`",803],["//     \"region\",",720],["\"topologyKey\": \"region\"",688],["networkingClient, err := config.networkingV2Client(d.Get(\"region\").(string))",645],["//       \"description\": \"Name of the region scoping this request.\",",599]]},{"word":"registry","context":[["\"k8s.io/kubernetes/pkg/registry/generic\"",2344],["\"github.com/docker/docker/registry\"",1716],["package registry",1675],["registry := NewTestEtcdRegistry(fakeClient)",1192],["registry := NewTestEtcd(fakeClient)",898],["// tag the image and upload it to the private registry",851],["\"k8s.io/kubernetes/pkg/registry/registrytest\"",818],["\"k8s.io/kubernetes/pkg/registry/generic/registry\"",634],["\"k8s.io/kubernetes/pkg/registry/generic/registry\"",634],["\"k8s.io/kubernetes/pkg/registry/cachesize\"",608]]},{"word":"remove","context":[["defer remove(rootfs)",927],["case \"remove\":",543],["//  Note that you are welcome to modify this code under the condition that you do not remove any",466],["// Finalizers is an opaque list of values that must be empty to permanently remove object from storage",447],["if len(remove) > 0 {",399],["// TODO: remove unversionedClient when the refactoring is done. Currently some",340],["if remove {",310],["// TODO: remove this net line once all platforms use apiserver+Pods.",306],["// so that we don't remove volumes associated with terminated but not yet",270],["// TODO: remove when kubenet plugin is ready",241]]},{"word":"reply","context":[["return reply, nil",1327],["return reply, err",1061],["var reply string",846],["} else if reply != \"OK\" {",611],["reply = &resp",574],["return reply, nil, err",540],["} else if reply != utils.OK {",521],["return reply",488],["// This cannot be called for requests expecting a reply, nor for unchecked requests.",383],["// Check returns an error if one occurred for checked requests that are not expecting a reply.",383]]},{"word":"repo","context":[["package repo",671],["for _, repo := range repos {",566],["defer os.RemoveAll(repo.baseDir)",401],["// publish repo",400],["git, err := newFakeGit(\"repo\", map[string]string{",378],["config \"github.com/ipfs/go-ipfs/repo/config\"",359],["return repo, nil",332],["v.Set(\"repo\", repository)",326],["return repo",313],["repo:   \"https://{root}\",",312]]},{"word":"representation","context":[["// String returns the string representation",113951],["// GoString returns the string representation",113945],["// equivalent to the \"default\" namespace, but \"default\" is the canonical representation.",607],["// String returns a string representation of the literal.",492],["// String returns a string representation of the statement.",382],["// marshal serializes to a protobuf representation.",351],["// unmarshal deserializes from a protobuf representation.",351],["// APIVersion defines the versioned schema of this representation of an object.",292],["// As the internal representation of a replication controller, it may have either",253],["// should be a string representation of the inputs to a range (for instance, for IP allocation it",213]]},{"word":"represents","context":[["// GCEPersistentDisk represents a GCE Disk resource that is attached to a",1234],["// NFS represents an NFS mount on the host that shares a pod's lifetime",817],["// Status represents the current information about a pod. This data may not be up",788],["// Source represents the location and type of a volume to mount.",722],["// EnvVar represents an environment variable present in a Container.",716],["// ReplicationController represents the configuration of a replication controller.",716],["// FlexVolume represents a generic volume resource that is",708],["// EmptyDir represents a temporary directory that shares a pod's lifetime.",705],["// GitRepo represents a git repository at a particular revision.",697],["// Cinder represents a cinder volume attached and mounted on kubelets host machine",696]]},{"word":"req","context":[["req.Data = output",54229],["err := req.Send()",52207],["req = c.newRequest(op, input, output)",46423],["googleapi.Expand(req.URL, map[string]string{",44831],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["return c.s.client.Do(req)",25977],["res, err := c.s.client.Do(req)",25048],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["req.Header.Set(\"Content-Type\", ctype)",17612]]},{"word":"reqErr","context":[["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["if reqErr != nil {",186],["return nil, reqErr",31],["if reqErr != nil && !deis.IsErrAPIMismatch(reqErr) {",29],["if reqErr != nil && !deis.IsErrAPIMismatch(reqErr) {",29],["So(reqErr, ShouldBeNil)",25]]},{"word":"request","context":[["op := &request.Operation{",37657],["//   \"request\": {",23771],["// pending HTTP request will be aborted if the provided context is",22537],["// Creating a request object using this method should be used when you want to inject",13378],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// access properties on the request object before or after sending the request. If",13378],["// access properties on the request object before or after sending the request. If",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// to execute the request.",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378]]},{"word":"requests","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// used to include empty fields in Patch requests.",38333],["// unconditionally include in API requests. By default, fields with",36870],["// This may be used to include null fields in Patch requests.",4930],["// values are omitted from API requests. However, any field with an",3833],["// requests with the JSON null value. By default, fields with empty",2096],["// requests.",1776],["// API requests with the JSON null value. By default, fields with empty",1737],["// to unconditionally include in API requests. By default, fields with",1463],["// Note: This operation can generate multiple requests to a service.",1419]]},{"word":"require","context":[["require.NoError(t, err)",22318],["\"github.com/stretchr/testify/require\"",3672],["require.Error(t, err)",2303],["require.Nil(t, err)",1931],["require.True(t, ok)",1268],["require.NoError(err)",446],["require.Equal(t, nil, err)",405],["require := require.New(t)",388],["require := require.New(t)",388],["var utils = require('../utils/utils');",293]]},{"word":"required","context":[["//       \"required\": true,",96651],["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["// the required permissions, the error response is DryRunOperation. Otherwise,",6922],["// Checks whether you have the required permissions for the action, without",6903],["* Unless required by applicable law or agreed to in writing, software",6574],["// as then you are sure you have configured all required params",4924],["Bucket *string `location:\"uri\" locationName:\"Bucket\" type:\"string\" required:\"true\"`",2494],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["Name *string `type:\"string\" required:\"true\"`",1102]]},{"word":"res","context":[["if err := googleapi.CheckResponse(res); err != nil {",58830],["defer googleapi.CloseBody(res)",57836],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["res, err := c.doRequest(\"json\")",33446],["res.Body.Close()",30727],["res, err := c.s.client.Do(req)",25048],["if res.Body != nil {",24829],["Header: res.Header,",24619],["Code:   res.StatusCode,",24618],["HTTPStatusCode: res.StatusCode,",24593]]},{"word":"reserved","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["// Copyright 2009 The Go Authors. All rights reserved.",12923],["Copyright 2014 Google Inc. All rights reserved.",7127],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["// Copyright 2013 The Go Authors. All rights reserved.",5102],["Copyright 2016 The Kubernetes Authors All rights reserved.",4483],["// All rights reserved.",4405],["// Copyright 2014 The Go Authors. All rights reserved.",4299],["// Copyright 2015 The Go Authors. All rights reserved.",4037]]},{"word":"resource","context":[["resource.TestCheckResourceAttr(",14361],["resource.TestStep{",10880],["Check: resource.ComposeTestCheckFunc(",10702],["Steps: []resource.TestStep{",8139],["resource.Test(t, resource.TestCase{",8069],["resource.Test(t, resource.TestCase{",8069],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["\"k8s.io/kubernetes/pkg/api/resource\"",4901],["\"github.com/hashicorp/terraform/helper/resource\"",4210],["newVal := new(resource.Quantity)",3973]]},{"word":"resources","context":[["// filtering listed resources.",965],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// (regardless of what the tag's key is). If you want to list only resources",931],["\"resources\": [",903],["//       \"description\": \"Optional. Filter expression for filtering listed resources.\",",889],["\"resources\": {",737],["// for filtering listed resources, in the form filter={expression}. Your",693],["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.",622],["// some resources may allow a client to request the generation of an appropriate name",600]]},{"word":"resp","context":[["defer resp.Body.Close()",30994],["fmt.Println(resp)",19340],["//        fmt.Println(resp)",13378],["//    if err == nil { // resp is now filled",13378],["return resp, err",11648],["result.Response = autorest.Response{Response: resp}",11401],["fmt.Println(awsutil.StringValue(resp))",10680],["body, err := ioutil.ReadAll(resp.Body)",8460],["return resp, nil",7509],["resp.Body.Close()",7445]]},{"word":"response","context":[["//   \"response\": {",55814],["// Pretty-print the response data.",34269],["// ServerResponse contains the HTTP response code and headers from the",13928],["// value can be used to capture response data after the request's \"Send\" method",13378],["// request. Use googleapi.IsNotModified to check whether the response",12114],["// actually making the request, and provides an error response. If you have",6922],["// the required permissions, the error response is DryRunOperation. Otherwise,",6922],["return response, nil",4258],["defer response.Body.Close()",3428],["response, err := client.Do(request)",3234]]},{"word":"responses","context":[["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["// responses:",295],["requests := gwacl.PatchManagementAPIResponses(responses)",252],["responses: []staticHTTPResponse{",238],["return responses",232],["responses := []gwacl.DispatcherResponse{",206],["// responses.",153],["gwacl.PatchManagementAPIResponses(responses)",146],["// Context for checking pods responses by issuing GETs to them (via the API",139]]},{"word":"result","context":[["return result",27228],["return result, nil",17980],["// error from Do is the result of In-None-Match.",12114],["result.Response = autorest.Response{Response: resp}",11401],["return result, err",8178],["Into(result)",5632],["autorest.ByUnmarshallingJSON(&result),",4323],["result.Response = resp",3498],["storeChannel <- result",3029],["c.Err = result.Err",2829]]},{"word":"results","context":[["return results, nil",3301],["exp:     `{\"results\":[{}]}`,",2823],["return results",2485],["// Pages invokes f for each page of results.",2234],["result := results.Results[0]",1168],["// results.",1151],["return results, err",1121],["// of results to return.",1038],["//       \"description\": \"Maximum number of results to return.\",",1038],["if len(results.Results) != 1 {",971]]},{"word":"ret","context":[["return ret, nil",59215],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["return ret",15238],["target := &ret",10673],["return ret, err",4236],["goto ret",3964],["var ret *Operation",2649],["if ret.Get(0) != nil {",2138],["ret1, _ := ret[1].(error)",2134],["if err := json.NewDecoder(res.Body).Decode(ret); err != nil {",1930]]},{"word":"retrieved","context":[["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["// is included in the response so that the remaining results can be retrieved.",688],["// If an error occurs, it can only be retrieved using xgb.WaitForEvent or xgb.PollForEvent.",686],["// records have been retrieved for the request.",391],["// so that the remaining results can be retrieved.",288],["// properties identify other pages that could be retrieved.",264],["// Verifies that schemas that are not in the master tree of Kubernetes can be retrieved via Get.",213],["// information. Use when an object is in hand (on disk, or already retrieved).",190],["// and update the expectations after we've retrieved active pods from the store. If a new pod enters",145]]},{"word":"return","context":[["return",1522143],["return err",1518678],["return nil",1271420],["return nil, err",870029],["return false",425000],["return io.ErrUnexpectedEOF",285098],["return true",274181],["return c",267226],["return s.String()",114328],["return awsutil.Prettify(s)",109113]]},{"word":"returned","context":[["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// because http.StatusNotModified was returned.",9422],["// googleapi.IsNotModified to check whether the returned error was",9322],["// http.StatusNotModified was returned.",6692],["// to check whether the returned error was because",6692],["// check whether the returned error was because http.StatusNotModified",6580],["// was returned.",6580],["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// returned.",4360],["// A non-nil error returned from f will halt the iteration.",2234]]},{"word":"returns","context":[["// String returns the string representation",113951],["// GoString returns the string representation",113945],["It(\"returns an error\", func() {",3968],["// Header returns an http.Header that can be modified by the caller to",3239],["// newClient creates, initializes and returns a new service client instance.",2270],["// returns:",1432],["// MonthNarrow returns the locales narrow month given the 'month' provided",1430],["// WeekdayShort returns the locales short weekday given the 'weekday' provided",1430],["// MonthsNarrow returns the locales narrow months",1430],["// WeekdayWide returns the locales wide weekday given the 'weekday' provided",1430]]},{"word":"rights","context":[["Copyright 2014 The Kubernetes Authors All rights reserved.",15250],["Copyright 2015 The Kubernetes Authors All rights reserved.",13682],["// Copyright 2009 The Go Authors. All rights reserved.",12923],["Copyright 2014 Google Inc. All rights reserved.",7127],["// Copyright 2011 The Go Authors. All rights reserved.",6627],["// Copyright 2013 The Go Authors. All rights reserved.",5102],["Copyright 2016 The Kubernetes Authors All rights reserved.",4483],["// All rights reserved.",4405],["// Copyright 2014 The Go Authors. All rights reserved.",4299],["// in the Software without restriction, including without limitation the rights",4249]]},{"word":"roachpb","context":[["\"github.com/cockroachdb/cockroach/roachpb\"",2764],["Span: roachpb.Span{",1356],["return nil, roachpb.NewError(err)",929],["\"github.com/cockroachdb/cockroach/pkg/roachpb\"",926],["key := roachpb.Key(\"a\")",893],["var ba roachpb.BatchRequest",814],["ReadConsistency: roachpb.INCONSISTENT,",705],["Replicas: []roachpb.ReplicaDescriptor{",640],["var pErr *roachpb.Error",409],["h roachpb.Header,",406]]},{"word":"root","context":[["t.Fatalf(\"can't mkdir(%q): %s\", root, err)",1410],["req.ClientToken = root",1188],["// that can be found in the LICENSE file in the root of the source",970],["err = admindb.Login(\"root\", \"rapadura\")",912],["defer os.RemoveAll(root)",813],["c, _, root := TestCoreUnsealed(t)",678],["os.RemoveAll(root)",596],["RUN [ $(ls -l /test_dir/test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l / | grep test_dir | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l /test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592]]},{"word":"route","context":[["for _, route := range routes {",1354],["ws.Route(route)",932],["addParams(route, action.Params)",920],["routeapi \"github.com/openshift/origin/pkg/route/api\"",577],["route: &api.Route{",562],["package route",557],["return route",427],["// The ID of the route table.",392],["type route struct {",368],["route:       new(Route).Host(\"aaa.bbb.ccc\"),",360]]},{"word":"rows","context":[["for rows.Next() {",9517],["defer rows.Close()",6495],["rows.Close()",2550],["if rows.Next() {",1198],["if err := rows.Err(); err != nil {",1159],["err = rows.Err()",858],["if !rows.Next() {",729],["for _, row := range rows {",722],["var rows *sql.Rows",590],["return rows, nil",588]]},{"word":"rs","context":[["return rs",19695],["if rs.Primary.ID == \"\" {",2344],["for _, rs := range s.RootModule().Resources {",2235],["rs, ok := s.RootModule().Resources[n]",2088],["pr.ApplyFn = func(rs *InstanceState, c *ResourceConfig) error {",430],["rs := &ProjectsService{s: s}",421],["for _, r := range rs {",380],["return rs, nil",360],["rs := &ReportsService{s: s}",345],["rs, ok := s.RootModule().Resources[name]",321]]},{"word":"run","context":[["// Editing this file might prove futile when you re-run the swagger generate command",2557],["test.run(t)",1466],["// run",1213],["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"top\")",1197],["c.Fatalf(\"failed to run container: %v, output: %q\", err, out)",954],["}.run(t)",875],["t.Fatalf(\"failed to run container: %v, output: %q\", err, out)",807],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["// ExecAction describes a \"run in container\" action.",717],["// For example if you run go-bindata on data/... and data contains the",699]]},{"word":"running","context":[["// timeout, the resonse will contain the jobid of the running async job",1437],["// If 'warn' has a value it means the job is running longer than the configured",1437],["running++",839],["// NodeRunning means the node has been configured and has Kubernetes components running.",678],["running = true",614],["// running.",596],["// At least one container is still running or is in the process of being restarted.",588],["running := 0",552],["// The grace period is the duration in seconds after the processes running in the pod are sent",539],["if !running {",501]]},{"word":"runtime","context":[["\"runtime\"",38944],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["if runtime.GOOS == \"windows\" {",7580],["switch runtime.GOOS {",4870],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/runtime\"",4552],["runtime.GC()",4493],["runtime.LockOSThread()",4418],["package runtime",3710],["runtime.GOMAXPROCS(runtime.NumCPU())",3567]]},{"word":"s","context":[["return s.String()",114328],["return awsutil.Prettify(s)",109113],["return s",93160],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["raw := noMethod(*s)",39504],["t.Fatalf(\"err: %s\", err)",35495],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["return c.s.client.Do(req)",25977]]},{"word":"same","context":[["// SecretTypeDockercfg contains a dockercfg file that follows the same format rules as ~/.dockercfg",503],["// The disk must also be in the same GCE project and zone as the kubelet.",500],["// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images",478],["// Applies the same authentication and authorization (if any is configured)",432],["// to the same HTTP status code.",431],["// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume",383],["// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace",383],["// It enforces that the syncHandler is never invoked concurrently with the same key.",348],["// The disk must also be in the same AWS zone as the kubelet.",317],["// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",313]]},{"word":"schema","context":[["Type:     schema.TypeString,",26163],["Schema: map[string]*schema.Schema{",7236],["Type:     schema.TypeInt,",4628],["\"github.com/hashicorp/terraform/helper/schema\"",4300],["Type:     schema.TypeBool,",4137],["return &schema.Resource{",3711],["Type:     schema.TypeSet,",3680],["Elem: &schema.Resource{",3192],["Type:        schema.TypeString,",2961],["Elem:     &schema.Schema{Type: schema.TypeString},",2931]]},{"word":"scope","context":[["errorJSON(err, scope.Codec, w)",2039],["Scope:     scope.PermAll,",1305],["return scope",1047],["scope.err(err, res.ResponseWriter, req.Request)",1026],["Scope:        scope.PermAll,",714],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:        scope.NewPerm(scope.DefaultID, scope.WebsiteID),",580],["Scope:        scope.NewPerm(scope.DefaultID, scope.WebsiteID),",580]]},{"word":"scopes","context":[["//   \"scopes\": [",61264],["// OAuth2 scopes used by this API.",2697],["for _, scope := range scopes {",311],["sort.Strings(scopes)",199],["Scopes []string `json:\"scopes,omitempty\"`",196],["scopes = append(scopes, string(scope))",155],["scopes = append(scopes, string(scope))",155],["\"conflicting scopes\",",114],["scopes := []string{}",105],["Scopes []ResourceQuotaScope `json:\"scopes,omitempty\"`",102]]},{"word":"sdk","context":[["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["\"github.com/aws/aws-sdk-go/aws/request\"",2438],["\"github.com/aws/aws-sdk-go/service/ec2\"",1935],["\"github.com/aws/aws-sdk-go/aws/session\"",1681],["\"github.com/aws/aws-sdk-go/aws/awsutil\"",1524],["\"github.com/awslabs/aws-sdk-go/aws\"",1000],["\"github.com/aws/aws-sdk-go/aws/credentials\"",909],[". \"aliyun-openapi-go-sdk/core\"",869],["\"github.com/aws/aws-sdk-go/service/s3\"",856]]},{"word":"see","context":[["// Licensed under the AGPLv3, see LICENCE file for details.",24944],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["* along with this program.  If not, see <http://www.gnu.org/licenses/>.",2506],["// along with this program.  If not, see <http://www.gnu.org/licenses/>.",1860],["along with this program.  If not, see <http://www.gnu.org/licenses/>",1828],["along with this program.  If not, see <http://www.gnu.org/licenses/>.",1447],["// Licensed under the LGPLv3, see LICENCE file for details.",1137],["// permissions. For more information on user permissions, see Managing User",1025],["For more about specifying packages, see 'go help packages'.",1006],["// where Purpose is X, see the tag:key=value filter.",931]]},{"word":"seed","context":[["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["seed := time.Now().UnixNano()",14884],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"seed = %d, %#v !Json Equal %#v\", seed, msg, p)",2604],["t.Fatalf(\"seed = %d, %#v !Json Equal %#v\", seed, msg, p)",2604]]},{"word":"select","context":[["select {",139086],["select {}",2509],["// Labels are key value pairs that may be used to scope and select individual resources.",572],["select",469],["// Required: Path of the field to select in the specified API version",363],["exp:     `{\"results\":[{\"error\":\"statement must have at least one field in select clause\"}]}`,",264],["// The ConfigMap to select from.",229],["// The key to select.",229],["// The key of the secret to select from.  Must be a valid secret key.",227],["// The name of the secret in the pod's namespace to select from.",227]]},{"word":"selector","context":[["\"selector\": {",1770],["options := api.ListOptions{LabelSelector: selector}",1136],["case \"selector\":",813],["r.EncodeString(codecSelferC_UTF81234, string(\"selector\"))",773],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["// NodeSelector is a selector which must be true for the pod to fit on a node",627],["options := api.ListOptions{FieldSelector: selector}",593],["Selector map[string]string `json:\"selector\"`",588],["Selector map[string]string `json:\"selector,omitempty\"`",495],["err = cache.ListAll(s.indexer, selector, func(m interface{}) {",458]]},{"word":"self","context":[["return self",2594],["self.lexeme = append(self.lexeme, c)",2485],["self.lexeme = append(self.lexeme, c)",2485],["if self.present != nil {",947],["t.Errorf(\"Never set self link\")",715],["self.next()",652],["self.mu.Lock()",651],["self.lock.Lock()",645],["if err := self.codec.Decode(req.Params, &args); err != nil {",629],["defer self.lock.Unlock()",540]]},{"word":"send","context":[["StreamID:      1, // clients send odd numbers",838],["// will send a hard termination signal to the container.",595],["tt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",394],["cn.send(b)",356],["nt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",344],["// projects with their IDs, send a Projects: list request. You can also",305],["cn.send(w)",298],["panic(\"dummy send\")",296],["panic(\"nilch send\")",296],["// A periodic relist will send update events for all known pods.",293]]},{"word":"sent","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// empty value appearing in NullFields will be sent to the server as",3833],["// ForceSendFields will be sent to the server regardless of whether the",1152],["// an empty value appearing in NullFields will be sent to the server as",1097],["// with an empty value appearing in NullFields will be sent to the",819],["// will answer requests sent through the proxy.",737],["// The grace period is the duration in seconds after the processes running in the pod are sent",539],["// traffic intended for the service should be sent to an ingress point.",484],["// contentType is contentType of requests sent to apiserver.",352],["glog.Warning(\"No api server defined - no node status update will be sent.\")",309]]},{"word":"server","context":[["// server regardless of whether the field is empty or not. This may be",38333],["// server.",15949],["defer server.Close()",14598],["package server",6981],["server := httptest.NewServer(handler)",5123],["server.ServeHTTP(recorder, request)",4521],["// empty value appearing in NullFields will be sent to the server as",3833],["defer server.Terminate(t)",3709],["server.buildMuxer()",3392],["server := DockerServer{}",2770]]},{"word":"service","context":[["// A service error occurred",13362],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["package service",3428],["op := &service.Operation{",3192],["// newClient creates, initializes and returns a new service client instance.",2270],["//The service client's operations are safe to be used concurrently.",2258],["service.Initialize()",2229],["service.Handlers.Sign.PushBack(v4.Sign)",2216],["err := service.client.Call(\"\", request, response)",2008],["\"github.com/aws/aws-sdk-go/service/ec2\"",1935]]},{"word":"services","context":[["package services",1009],["Resource(\"services\").",944],["for _, service := range services {",936],["// View and manage your data across Google Cloud Platform services",922],["// ServiceList holds a list of services.",725],["\"services\": M{",651],["ResourceServices ResourceName = \"services\"",650],["// load balancing pools of all matching services.",635],["return services, nil",535],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",426]]},{"word":"session","context":[["defer session.Close()",17293],["coll := session.DB(\"mydb\").C(\"mycoll\")",6299],["session, err := mgo.Dial(\"localhost:40001\")",6075],["sess, err := session.NewSession()",5278],["fmt.Println(\"failed to create session,\", err)",5256],["svc := ec2.New(session.New())",2581],["sess := session.New()",1839],["return session",1832],["\"github.com/aws/aws-sdk-go/aws/session\"",1681],["session.Close()",1333]]},{"word":"set","context":[["set[k] = true",1827],["// set headers",1788],["// At most one of Media and ResumableMedia may be set.",1267],["\"github.com/juju/utils/set\"",1243],["Expect(set.Err()).NotTo(HaveOccurred())",1016],["set := flag.NewFlagSet(\"test\", 0)",1007],["Expect(set.Val()).To(Equal(\"OK\"))",1002],["// set.",896],["t.Errorf(\"main name not set\")",856],["t.Errorf(\"short name not set\")",856]]},{"word":"sets","context":[["// Context sets the context to be used in this call's Do method. Any",22537],["// IfNoneMatch sets the optional parameter which makes the operation",12114],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["// Context sets the context to be used in this call's Do method.",4699],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723]]},{"word":"shift","context":[["for shift := uint(0); ; shift += 7 {",155764],["for shift := uint(0); ; shift += 7 {",155764],["if shift >= 64 {",137139],["msglen |= (int(b) & 0x7F) << shift",42857],["wire |= (uint64(b) & 0x7F) << shift",32162],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["v |= (int(b) & 0x7F) << shift",5834],["valuekey |= (uint64(b) & 0x7F) << shift",5109],["keykey |= (uint64(b) & 0x7F) << shift",5109],["byteLen |= (int(b) & 0x7F) << shift",4334]]},{"word":"should","context":[["// Creating a request object using this method should be used when you want to inject",13378],["// This case should never be hit, the SDK should always return an",6736],["// This case should never be hit, the SDK should always return an",6736],["// You should have received a copy of the GNU Lesser General Public License",5180],["// This case should never be hit, The SDK should alwsy return an",5138],["// This case should never be hit, The SDK should alwsy return an",5138],["// You should have received a copy of the GNU General Public License",4154],["You should have received a copy of the GNU General Public License",3440],["* You should have received a copy of the GNU General Public License",2903],["// string assigned to a user, but should not exceed 40 characters.",2611]]},{"word":"since","context":[["// getting updates only after the object has changed since the last",12114],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"%#v !VerboseProto %#v, since %v\", msg, p, err)",4373],["t.Fatalf(\"%#v !VerboseEqual %#v, since %v\", msg, p, err)",3494],["\"since\":   \"01 Apr 15 01:23+10:00\",",3018],["t.Fatalf(\"%#v !Compare %#v, since %d\", msg, p, c)",889],["// precedes the time a pod was started, only logs since the pod start will be returned.",663],["since := daemonTime(c).Unix()",561],["//    to make nodeMonitorGracePeriod be less than nodeStatusUpdateFrequency, since there",446],["// Ignore whitespace since that's what were verifying doesn't change stuff",384]]},{"word":"single","context":[["// number of items to include in a single response page. The maximum",655],["// EndpointAddress is a tuple that describes single IP address.",594],["// EndpointPort is a tuple that describes a single port.",594],["// of a single uniform variable, and a length of 1 or greater can be used to",584],["// The functions Uniform{1|2|3|4}{f|i|ui}v can be used to modify a single",584],["// Container represents a single container that is expected to be run on the host.",561],["// Media specifies the media to upload in a single chunk.",498],["// must map to a single HTTP status code, but multiple reasons may map",431],["// You can either specify an AWS account ID or optionally a single apos-apos",379],["// ContainerPort represents a network port in a single container.",345]]},{"word":"size","context":[["size := m.Size()",29946],["data = make([]byte, size)",28307],["size := p.Size()",6004],["if size3 != size {",3507],["if size2 != size {",3507],["for i := 0; i < size; i++ {",3139],["if len(data) != size {",2786],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552]]},{"word":"skippy","context":[["if (iNdEx + skippy) > l {",28713],["iNdEx += skippy",28713],["if skippy < 0 {",27884],["skippy, err := skipGenerated(data[iNdEx:])",11760],["m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)",4124],["skippy, err := skipRpc(data[iNdEx:])",2254],["skippy, err := skipApi(data[iNdEx:])",1958],["index += skippy",1342],["m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)",1332],["if (index + skippy) > l {",1321]]},{"word":"slice","context":[["var yys3Slc = z.DecScratchBuffer() // default slice to decode into",3894],["return slice",992],["// slice with the values to be loaded into a uniform variable or a uniform",584],["// variable array. A slice with length 1 should be used if modifying the value",584],["panic(\"parameter pixels must be a slice\")",567],["panic(\"parameter data must be a slice\")",559],["// key can be either a byte slice or a string.",489],["// values). The length of the provided slice must be a multiple of the number",426],["panic(\"parameter pointer must be a slice\")",412],["// key can be either a byte slice, a string, a fmt.Stringer or an",310]]},{"word":"so","context":[["// furnished to do so, subject to the following conditions:",4317],["furnished to do so, subject to the following conditions:",1015],["// is included in the response so that the remaining results can be retrieved.",688],["// not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use",541],["// The following cases will fail, so die now",527],["// May run during STW, so write barriers are not allowed.",483],["// Build a format string so that it will be similar to Sprint",407],["* furnished to do so, subject to the following conditions:",332],["// (newest result first). Use this to sort resources like operations so",326],["// be \"ready\" before the test starts, so this is small.",322]]},{"word":"software","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["// of this software and associated documentation files (the \"Software\"), to deal",4240],["// The go-ethereum library is free software: you can redistribute it and/or modify",3822],["This program is free software: you can redistribute it and/or modify",3094],["* This program is free software: you can redistribute it and/or modify",2570],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["// This program is free software: you can redistribute it and/or modify",1697],["// this software without specific prior written permission.",1371]]},{"word":"some","context":[["// This is a courtesy helper function, which in some cases may not work as expected!",1719],["// out of date by some window of time.",709],["// index 2 in this pod). This syntax is chosen only to have some well-defined way of",671],["// some resources may allow a client to request the generation of an appropriate name",600],["// at some point during pod execution (e.g. due to a pod label update), the",592],["// PodUnknown means that for some reason the state of the pod could not be obtained, typically due",575],["//                   on some operations may differ from the requested",553],["key := etcdtest.AddPrefix(\"/some/key\")",543],["// at some point during pod execution (e.g. due to an update), the system",434],["// some versions of lxc might make this test fail",432]]},{"word":"sort","context":[["\"sort\"",41433],["sort.Strings(keys)",3468],["sort.Strings(names)",2073],["sort.Ints(keys)",1125],["import sort \"sort\"",922],["import sort \"sort\"",922],["sort.Sort(uintSlice(v2))",864],["sort.Sort(intSlice(v2))",720],["import \"sort\"",719],["sort.Strings(actualEnv)",615]]},{"word":"source","context":[["// Use of this source code is governed by a BSD-style",82711],["// Use of this source code is governed by a MIT-style",5462],["// Use of this source code is governed by an ISC",4711],["// Redistribution and use in source and binary forms, with or without",3435],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by a MIT-license.",2543],["// Use of this source code is governed under the Apache License, Version 2.0",1834],["//     * Redistributions of source code must retain the above copyright",1749],["* Redistribution and use in source and binary forms, with or without",1643],["// 1. Redistributions of source code must retain the above copyright notice, this",1163]]},{"word":"spec","context":[["SchemaProps: spec.SchemaProps{",110350],["Schema: spec.Schema{",20652],["Properties: map[string]spec.Schema{",20467],["Schema: &spec.Schema{",11591],["Items: &spec.SchemaOrArray{",9724],["\"spec\": {",4704],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Duration\"),",2091],["Ref:         spec.MustCreateRef(\"#/definitions/v1.ObjectMeta\"),",1980],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.ListMeta\"),",1920]]},{"word":"specific","context":[["See the License for the specific language governing permissions and",78733],["// See the License for the specific language governing permissions and",45859],["// implied. See the License for the specific language governing",10736],["* See the License for the specific language governing permissions and",6302],["// Not applicable on Windows as uses Unix specific functionality",2299],["//  either express or implied. See the License for the specific language governing permissions",2295],["// License for the specific language governing permissions and limitations",1965],["// this software without specific prior written permission.",1371],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["* this software without specific prior written permission.",991]]},{"word":"specified","context":[["// Only one of its members may be specified.",1386],["// PodSecurityContext, the value specified in SecurityContext takes precedence.",1110],["// specified by location, which should be a value returned by GetUniformLocation.",1010],["// specified.",872],["// Specify the value of a uniform variable for a specified program object",858],["// on behalf of the content owner specified in the parameter value. This",847],["// Only one of sinceSeconds or sinceTime may be specified.",842],["// specified domains. Use an Action element to allow or deny permission to call",826],["// If none of the following policies is specified, the default one",748],["// exist than the specified MaxRecords value, a pagination token called a marker",736]]},{"word":"specify","context":[["// request. Bucket owners need not specify this parameter in their requests.",788],["// 0. The value \"NONE\" can be used to specify unlimited duration.",638],["// specify, the IsTruncated response element is true.",494],["// You can either specify an AWS account ID or optionally a single apos-apos",379],["// PageToken sets the optional parameter \"pageToken\": Token to specify",361],["// Examples: For volume /dev/sda1, you specify the partition as \"1\".",360],["// Note that the length constraint applies only to the ARN. If you specify only",335],["// Should this value be exported.  Export strips fields that a user can not specify.",301],["// stream the log. Set 'follow' to false and specify the number of lines (e.g.",296],["//  You must specify at least one of the parameters.",275]]},{"word":"sql","context":[["\"database/sql\"",11064],["_ \"github.com/go-sql-driver/mysql\"",2196],["if err == sql.ErrNoRows {",2133],["\"database/sql/driver\"",2104],["package sql",1924],["\"github.com/cockroachdb/cockroach/sql/parser\"",1069],["var rows *sql.Rows",590],["var db *sql.DB",551],["if err != nil && err != sql.ErrNoRows {",549],["db, err := sql.Open(\"sqlite3\", tempFilename)",495]]},{"word":"sqlpt","context":[["sqlDollar = sqlS[sqlpt-1 : sqlpt+1]",8381],["sqlDollar = sqlS[sqlpt-1 : sqlpt+1]",8381],["sqlDollar = sqlS[sqlpt-3 : sqlpt+1]",7779],["sqlDollar = sqlS[sqlpt-3 : sqlpt+1]",7779],["sqlDollar = sqlS[sqlpt-2 : sqlpt+1]",6248],["sqlDollar = sqlS[sqlpt-2 : sqlpt+1]",6248],["sqlDollar = sqlS[sqlpt-0 : sqlpt+1]",3055],["sqlDollar = sqlS[sqlpt-0 : sqlpt+1]",3055],["sqlDollar = sqlS[sqlpt-4 : sqlpt+1]",2979],["sqlDollar = sqlS[sqlpt-4 : sqlpt+1]",2979]]},{"word":"src","context":[["\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"",909],["context \"github.com/ipfs/go-ipfs/Godeps/_workspace/src/golang.org/x/net/context\"",791],["if src == nil {",689],["Sources: []influxql.Source{&influxql.Measurement{Name: \"src\"}},",578],["defer src.Close()",552],["data, err := json.Marshal(src)",544],["return src",476],["\"github.com/coreos/rkt/Godeps/_workspace/src/github.com/appc/spec/schema/types\"",435],["src := v.Args[1]",380],["tg.tempDir(\"src\")",364]]},{"word":"srv","context":[["Server:     srv,",4594],["defer srv.Close()",2546],["defer srv.agent.Shutdown()",1413],["srv := &EtcdServer{",1252],["if err := srv.agent.RPC(\"Catalog.Register\", args, &out); err != nil {",985],["testutil.WaitForLeader(t, srv.agent.RPC, \"dc1\")",881],["srv.mu.Lock()",856],["defer srv.Shutdown()",825],["defer srv.Stop()",789],["defer srv.mu.Unlock()",766]]},{"word":"st","context":[["defer st.Close()",4246],["st.writeHeaders(HeadersFrameParam{",2110],["st.greet()",1127],["st := newServerTester(t, func(w http.ResponseWriter, r *http.Request) {",1055],["hf := st.wantHeaders()",972],["func(c *gc.C, st *State) changeTestCase {",950],["st.Close()",920],["}, func(st *serverTester) {",905],["st.Lock()",841],["return st",649]]},{"word":"stack","context":[["stack := frame.OperandStack()",1286],["// permissions level for the stack, or an attached policy that explicitly grants",945],["_ = stack",702],["stack := p.vstack[len(p.vstack)-1]",701],["// The stack ID.",634],["// Pop next point off the stack.",473],["func(s *stack) error {",441],["package stack",425],["// Deploy, or Manage permissions level for the stack, or an attached policy",393],["stack.push(new(big.Int))",364]]},{"word":"start","context":[["start := time.Now()",12562],["var start int = iNdEx",2193],["iNdEx = start + next",2193],["\"create\", \"start\", \"inspect_container\",",1438],["start := 0",1321],["return aws.MarshalXML(v, e, start)",1202],["c.Fatalf(\"Could not start daemon with busybox: %v\", err)",939],["elapsed := time.Since(start)",929],["start = time.Now()",903],["start = i",782]]},{"word":"state","context":[["\"github.com/juju/juju/state\"",4908],["state, err := ctx.Apply()",4204],["actual := strings.TrimSpace(state.String())",3368],["state = fflib.FFParse_want_colon",2666],["state.Put(\"error\", err)",1962],["<no state>",1925],["package state",1910],["machine, err := s.State.AddMachine(\"quantal\", state.JobHostUnits)",1731],["state = fflib.FFParse_after_value",1637],["// current state by calling UseProgram.",1594]]},{"word":"stats","context":[["stats := mgo.GetStats()",1934],["return stats",1120],["if stats != nil {",984],["stats = mgo.GetStats()",912],["return stats, nil",831],["if stats == nil {",798],["package stats",789],["c.Assert(stats.SocketsInUse, Equals, 0)",648],["// Stats returns stats from the input iterator.",639],["return stats, err",482]]},{"word":"status","context":[["// status code is an error. Response headers are in either",7314],["// non-2xx status code is an error. Response headers are in either",5221],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["\"status\": {",2654],["Status string `json:\"status,omitempty\"`",2520],["case \"status\":",2001],["r.EncodeString(codecSelferC_UTF81234, string(\"status\"))",1583],["return status",1447],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// Any non-2xx status code is an error. Response headers are in either",1236]]},{"word":"stdout","context":[["var stdout, stderr bytes.Buffer",1886],["stdout, err := cmd.StdoutPipe()",1388],["defer stdout.Close()",813],["var stdout bytes.Buffer",804],["Stdout: &stdout,",695],["if stdout != nil {",640],["cmd.Stdout = stdout",609],["cmd.Stdout = &stdout",600],["cmd.Stdout, cmd.Stderr = &stdout, &stderr",524],["OutputStream: stdout,",492]]},{"word":"stmt","context":[["defer stmt.Close()",2948],["stmt: &influxql.SelectStatement{",2112],["return stmt, nil",2049],["stmt.Close()",890],["return stmt",842],["sqlVAL.stmt = nil",503],["stmt := `",383],["messages = append(messages, influxql.ReadOnlyWarning(stmt.String()))",380],["stmt: &influxql.ShowTagKeysStatement{",370],["stmt.Name = ident",335]]},{"word":"stop","context":[["stopper := stop.NewStopper()",3964],["case <-stop:",1646],["return thrift.PrependError(\"write field stop error: \", err)",1514],["return thrift.PrependError(\"write struct stop error: \", err)",1514],["\"github.com/cockroachdb/cockroach/util/stop\"",1493],["// calling the \"fn\" function with the response data for each page. To stop",1419],["stop := make(chan struct{})",949],["return fmt.Errorf(\"write struct stop error: %s\", err)",830],["return fmt.Errorf(\"write field stop error: %s\", err)",830],["close(stop)",758]]},{"word":"storage","context":[["package storage",4811],["storage := map[string]rest.Storage{}",2539],["storage[\"simple\"] = &simpleStorage",2291],["\"k8s.io/kubernetes/pkg/storage\"",1729],["handler := handle(storage)",1710],["\"github.com/cockroachdb/cockroach/storage/engine\"",1461],["storage, server := newStorage(t)",1430],["storage, fakeClient := newStorage(t)",1399],["// Implements storage.Interface.",1204],["\"github.com/juju/juju/storage\"",986]]},{"word":"store","context":[["package store",2566],["defer store.Close()",1296],["store, _, stopper := createTestStore(t)",1146],["Response{Event: &store.Event{}},",1105],["// TODO: Decide whether to store these separately or with the object they apply to.",704],["store := cache.NewStore(cache.MetaNamespaceKeyFunc)",652],["store.Lock()",617],["// to store v and returns a pointer to it.",599],["store := &etcdgeneric.Etcd{",563],["defer store.Unlock()",556]]},{"word":"str","context":[["return str",5034],["var str string",1632],["if len(str) > 0 {",1432],["t.Error(str)",1205],["str := \"\"",1075],["sqlVAL.str = sqlS[sqlpt-0].str",854],["sqlVAL.str = sqlS[sqlpt-0].str",854],["if str == \"\" {",686],["return str, nil",577],["if len(str) == 0 {",471]]},{"word":"strconv","context":[["\"strconv\"",103887],["b = strconv.AppendInt(b, int64(t.Day()), 10)",5570],["b = strconv.AppendInt(b, int64(t.Minute()), 10)",5504],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["b = strconv.AppendInt(b, int64(t.Year()), 10)",4840],["b = strconv.AppendInt(b, int64(t.Second()), 10)",4128],["\"profileId\": strconv.FormatInt(c.profileId, 10),",3820],["b = strconv.AppendInt(b, int64(t.Hour()), 10)",3536],["vv := strconv.Itoa(v.(int))",3469],["vv := strconv.FormatBool(v.(bool))",3194]]},{"word":"stream","context":[["defer stream.Close()",839],["if err := stream.RecvMsg(m); err != nil {",640],["stream",485],["// stream.",480],["return stream, nil",408],["stream: st,",376],["w.Header().Set(\"Content-Type\", \"application/octet-stream\")",374],["// data between stream (representing the user's local connection on their",365],["stream.Close()",359],["v.Set(\"stream\", \"1\")",355]]},{"word":"string","context":[["//       \"type\": \"string\"",149384],["// String returns the string representation",113951],["// GoString returns the string representation",113945],["googleapi.Expand(req.URL, map[string]string{",44831],["googleapi.Expand(req.URL, map[string]string{",44831],["ForceSendFields []string `json:\"-\"`",39509],["p.p = make(map[string]interface{})",32934],["Kind string `json:\"kind,omitempty\"`",30419],["Type:        []string{\"string\"},",23051],["Type:        []string{\"string\"},",23051]]},{"word":"stringLen","context":[["stringLen |= (uint64(b) & 0x7F) << shift",22705],["var stringLen uint64",22703],["intStringLen := int(stringLen)",21411],["postIndex := iNdEx + int(stringLen)",801],["postIndex := index + int(stringLen)",483],["if stringLen < 0 {",189],["b.Write(uint(len(s)), stringLen[v.sizeClass()])",22],["var stringLen = [3]int{8, 16, 16}",22],["return 4 + stringLen[v.sizeClass()] + 8*len(s)",22],["stringLen := int(d[0])",17]]},{"word":"strings","context":[["\"strings\"",225222],["return strings.Join(s, \"\")",8387],["id := strings.TrimSpace(out)",4703],["actual := strings.TrimSpace(state.String())",3368],["var _ = strings.Replace",3059],["cannonicalName := strings.Replace(name, \"\\\\\", \"/\", -1)",2708],["import \"strings\"",2532],["out = strings.TrimSpace(out)",1976],["actual := strings.TrimSpace(plan.String())",1778],["line = strings.TrimSpace(line)",1662]]},{"word":"struct","context":[["_ struct{} `type:\"structure\"`",70669],["tests := []struct {",52457],["type Config struct {",11935],["testCases := []struct {",10742],["cases := []struct {",7066],["type Client struct {",6191],["type Service struct {",5858],["var tests = []struct {",5553],["type User struct {",4655],["done := make(chan struct{})",4483]]},{"word":"structure","context":[["_ struct{} `type:\"structure\"`",70669],["SDKShapeTraits bool `type:\"structure\"`",68537],["// Response structure.",2808],["// Request structure.",2807],["Owner *Owner `type:\"structure\"`",408],["WorkflowType *WorkflowType `locationName:\"workflowType\" type:\"structure\" required:\"true\"`",374],["// structure.",317],["// structure by setting default values and implementing any backwards-compatibility",313],["DBInstance *DBInstance `type:\"structure\"`",272],["// Status is a structure describing current status of a job.",247]]},{"word":"style","context":[["// Use of this source code is governed by a BSD-style",82711],["// Use of this source code is governed by a MIT-style",5462],["// Use of this source code is governed by a BSD-style license that can be",2873],["// Use of this source code is governed by an MIT-style",1098],["// Use of this source code is governed by a BSD-style license",1018],["</style>",966],["// BSD-style license that can be found in the LICENSE file.",702],["// Use of this source code is governed by a MIT style",607],["<style>",589],["Use of this source code is governed by a BSD-style",445]]},{"word":"success","context":[["t.Errorf(\"expected success: %v\", errs)",4335],["} else if !query.success() {",3906],["if !success {",1890],["Ω(success).Should(BeFalse())",1623],["success = true",1541],["return success",1111],["success := false",1079],["success = false",1061],["t.Errorf(\"Expected success, got: %v\", err)",1047],["if success {",951]]},{"word":"support","context":[["// Go support for Protocol Buffers - Google's data interchange format",1229],["// FIXME: Requires compiler support (has immediate)",1227],["// not support the use of -u",570],["testRequires(c, DaemonIsLinux) // Windows does not support ARG",494],["// The volume plugin must support Deletion.",457],["// The volume plugin must support Recycling.",457],["// Windows does not support this functionality",380],["// support.",366],["//  - should we support nsenter + socat in a container, running with elevated privs and --pid=host?",365],["//  - should we support nsenter + socat on the host? (current impl)",365]]},{"word":"supported","context":[["// Must be a filesystem type supported by the host operating system.",2721],["return \"\", \"\", fmt.Errorf(\"field label not supported: %s\", label)",1368],["t.Skipf(\"not supported on %s\", runtime.GOOS)",795],["// supported.",790],["// This parameter is not currently supported.",788],["// Tip: Ensure that the filesystem type is supported by the host operating system.",720],["// atomic field types are supported (string, number, boolean). The",565],["// Protocol defines network protocols supported for things like conatiner ports.",508],["exp:     `{\"error\":\"error parsing query: mixing aggregate and non-aggregate queries is not supported\"}`,",456],["t.Skipf(\"not supported on %q\", runtime.GOOS)",440]]},{"word":"svc","context":[["svc := ec2.New(nil)",4408],["return svc",2753],["svc := ec2.New(session.New())",2581],["svc := iam.New(nil)",1494],["svc.Endpoint = \"https://test\"",1384],["svc := s3.New(nil)",1300],["svc.Handlers.Sign.PushBack(v4.Sign)",1189],["svc.Handlers.Sign.PushBackNamed(v4.SignRequestHandler)",1064],["svc := ec2.New(sess)",856],["svc := rds.New(nil)",852]]},{"word":"switch","context":[["switch {",75967],["switch fieldNum {",30431],["switch err {",5104],["switch runtime.GOOS {",4870],["switch t {",4766],["switch c {",4243],["switch op {",3899],["switch yys3 {",3894],["} // end switch yys3",3894],["switch n.Op {",3471]]},{"word":"sync","context":[["\"sync\"",81312],["var wg sync.WaitGroup",15187],["\"sync/atomic\"",12298],["sync.Mutex",8636],["sync.RWMutex",5683],["wg := sync.WaitGroup{}",3786],["mu sync.Mutex",1846],["wg := &sync.WaitGroup{}",1764],["import \"sync\"",1619],["mu      sync.Mutex",1075]]},{"word":"syscall","context":[["\"syscall\"",24805],["err = syscall.EINVAL",2227],["package syscall",1792],["return syscall.EINVAL",1473],["import \"syscall\"",1290],["_, err := req.Execute(syscall.NETLINK_ROUTE, 0)",570],["msg := nl.NewIfInfomsg(syscall.AF_UNSPEC)",561],["var stat syscall.Stat_t",519],["return 0, syscall.EINVAL",509],["return nil, syscall.EINVAL",437]]},{"word":"system","context":[["// Must be a filesystem type supported by the host operating system.",2721],["// Populated by the system.",2256],["\"github.com/docker/docker/pkg/system\"",1202],["package system",1191],["// Tip: Ensure that the filesystem type is supported by the host operating system.",720],["// Lifecycle describes actions that the management system should take in response to container lifecycle",716],["// NodePending means the node has been created/added by the system, but not configured.",681],["// NamespaceActive means the namespace is available for use in the system",608],["// terminated in a failure (exited with a non-zero exit code or was stopped by the system).",588],["// PodPending means the pod has been accepted by the system, but one or more of the containers",588]]},{"word":"t","context":[["t.Fatal(err)",320011],["t.Error(err)",70002],["t.Fatalf(\"err: %v\", err)",35496],["t.Fatalf(\"err: %s\", err)",35495],["assert.NoError(t, err)",27740],["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Parallel()",24732],["t.Fail()",24571],["t.Fatalf(\"unexpected error: %v\", err)",23940],["require.NoError(t, err)",22318]]},{"word":"table","context":[["table := []struct {",3049],["for _, item := range table {",2211],["</table>",1442],["// _bindata is a table, holding each asset generator, mapped to its name.",738],["table := map[string]struct {",619],["for name, item := range table {",580],["<table>",559],["table.Render()",518],["return table",508],["table.Print()",459]]},{"word":"tag","context":[["switch tag {",1969],["if tag == \"\" {",1724],["for _, tag := range tags {",1163],["if tag != \"\" {",1100],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// where Purpose is X, see the tag:key=value filter.",931],["// key Purpose (regardless of what the tag's value is), and the tag value X",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// key Purpose (regardless of what the tag's value is), and the tag value X",931]]},{"word":"tags","context":[["tags {",2503],["} `json:\"tags,omitempty\"`",1916],["for _, tag := range tags {",1163],["var tags []string",971],["tags := map[string]string{",843],["\"tags\": tagsSchema(),",762],["return tags",703],["// A list of tags.",675],["tags := make(map[string]string)",610],["return tags, nil",589]]},{"word":"target","context":[["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["target := &ret",10673],["if target == nil {",546],["//   (*fnptr)(target, pname, params);",521],["a0: target.c(),",448],["// Required:  target iSCSI Qualified Name",391],["// Required: iSCSI target portal",391],["// Required: iSCSI target lun number",391],["// The contents of the target Secret's Data field will be presented in a volume",367],["// target=\"_blank) in the Amazon CloudSearch Developer Guide.",363]]},{"word":"task","context":[["if task == nil {",806],["for _, task := range tasks {",594],["if err := task.Run(); err != nil {",435],["task := &structs.Task{",359],["package task",339],["// The ID of the DecisionTaskCompleted event corresponding to the decision task",330],["if err = task.WaitTaskCompletion(); err != nil {",267],["// For more information about setting task priority, see Setting Task Priority",264],["return task, nil",253],["task: marathon.Task{",246]]},{"word":"tc","context":[["defer tc.Stop()",4444],["tc := testContext{}",4233],["tc.Start(t)",3966],["for _, tc := range testCases {",2725],["for _, tc := range cases {",1985],["for i, tc := range testCases {",1609],["tc.runTest(t)",1545],["tc := testCase{",1429],["for i, tc := range cases {",931],["for _, tc := range tests {",716]]},{"word":"tcp","context":[["protocol = \"tcp\"",1282],["case \"tcp\":",988],["{Name: \"TEST_PORT_8083_TCP_PROTO\", Value: \"tcp\"},",958],["{Name: \"TEST_PORT_8083_TCP\", Value: \"tcp://1.2.3.3:8083\"},",958],["{Name: \"TEST_PORT\", Value: \"tcp://1.2.3.3:8083\"},",958],["conn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())",853],["Protocol:  \"tcp\",",754],["l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",608],["protocol = \"/tcp\"",550],["case \"tcp\", \"tcp4\", \"tcp6\":",529]]},{"word":"template","context":[["\"text/template\"",8241],["\"html/template\"",7918],["\"template\": {",1221],["package template",1144],["case \"template\":",817],["template := state.MachineTemplate{",817],["r.EncodeString(codecSelferC_UTF81234, string(\"template\"))",626],["\"github.com/mitchellh/packer/template/interpolate\"",588],["// PodTemplateSpec describes the data a pod should have when created from a template",585],["// PodTemplate describes a template for creating copies of a predefined pod.",584]]},{"word":"test","context":[["for _, test := range tests {",20305],["for i, test := range tests {",8257],["t.Fatalf(\"test init failed: %s\", err)",3640],["if err := test.init(s); err != nil {",3591],["c.Assert(err, test.IsNil)",3451],["test := NewTest(\"db0\", \"rp0\")",3328],["package test",3316],["test.addQueries([]*Query{",3314],["test(`",2776],["for i, query := range test.queries {",2679]]},{"word":"testing","context":[["\"testing\"",185840],["if testing.Short() {",11539],["import \"testing\"",10339],["jc \"github.com/juju/testing/checkers\"",8768],["\"github.com/juju/juju/testing\"",3174],["coretesting \"github.com/juju/juju/testing\"",3039],["func TestMain(m *testing.M) {",2413],["b.RunParallel(func(pb *testing.PB) {",2064],["func Test(t *testing.T) {",1982],["package testing",1978]]},{"word":"tests","context":[["tests := []struct {",52457],["for _, tt := range tests {",22910],["for _, test := range tests {",20305],["for i, tt := range tests {",10529],["for i, test := range tests {",8257],["var tests = []struct {",5553],["tests := map[string]struct {",2214],["t.Logf(\"Running %d tests\", len(tests))",1686],["t.Logf(\"Running %d tests\", len(tests))",1686],["tests.Assert(t, err == nil)",1553]]},{"word":"text","context":[["\"text/template\"",8241],["\"text/tabwriter\"",3456],["w.Header().Set(\"Content-Type\", \"text/plain\")",1154],["w.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")",865],["return text",763],["out.Write(text)",743],["w.Header().Set(\"Content-Type\", \"text/html\")",718],["w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\")",672],["// CreationTimestamp: [Output Only] Creation timestamp in RFC3339 text",578],["text string",544]]},{"word":"tg","context":[["tg := testgo(t)",6959],["defer tg.cleanup()",6959],["tg.setenv(\"GOPATH\", tg.path(\".\"))",1848],["tg.setenv(\"GOPATH\", tg.path(\".\"))",1848],["tg.parallel()",1496],["tg.makeTempdir()",1221],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["tg.must(err)",555],["tg.tempDir(\"src\")",364]]},{"word":"than","context":[["// If 'warn' has a value it means the job is running longer than the configured",1437],["// exist than the specified MaxRecords value, a pagination token called a marker",736],["// The duration is specified in seconds; an integer greater than or equal to",726],["// DNS_LABEL:  This is a string, no more than 63 characters long, that conforms",726],["// DNS_SUBDOMAIN:  This is a string, no more than 253 characters long, that conforms",722],["// the Data field must be less than MaxSecretSize bytes.",626],["// element of a different type than the one provided in the request, the value",606],["// is larger than the size of the uniform variable array, values for all",584],["expected := \"When using ADD with more than one source file, the destination must be a directory and end with a /\"",581],["// than an interface. There is no way to construct a list+watcher using resource name.",561]]},{"word":"that","context":[["// license that can be found in the LICENSE file.",96872],["if that == nil {",24200],["return fmt.Errorf(\"that == nil && this != nil\")",10119],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["// The go-ethereum library is distributed in the hope that it will be useful,",3822],["This program is distributed in the hope that it will be useful,",3745],["// that can be found in the LICENSE file.",3572],["* This program is distributed in the hope that it will be useful,",3470],["// Header returns an http.Header that can be modified by the caller to",3239],["// This is a compile-time assertion to ensure that this generated file",3226]]},{"word":"that1","context":[["if that1 == nil {",24182],["that1 = &that2",20743],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["} else if that1.Field1 != nil {",2873],["if *this.Field1 != *that1.Field1 {",2873],["if this.Field1 != nil && that1.Field1 != nil {",2873],["if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {",2478],["if this.Field2 != nil && that1.Field2 != nil {",2021],["} else if that1.Field2 != nil {",2021]]},{"word":"the","context":[["// String returns the string representation",113951],["// GoString returns the string representation",113945],["// license that can be found in the LICENSE file.",96872],["See the License for the specific language governing permissions and",78733],["See the License for the specific language governing permissions and",78733],["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["you may not use this file except in compliance with the License.",78263],["limitations under the License.",78218],["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["Licensed under the Apache License, Version 2.0 (the \"License\");",78165]]},{"word":"them","context":[["// values assigned to them by a call to Uniform* until the next successful",1594],["// If none of them is specified, the default one is ContainerStateWaiting.",709],["// collect all of the relevant ports and export them.",475],["// by default. You must grant them explicit permission to perform specific actions.",401],["// not just take the node list and choose the first of them. Depending on the",396],["// FIXME: --viz and --tree are deprecated. Remove them in a future version.",365],["// worker runs a worker thread that just dequeues items, processes them, and marks them done.",358],["// worker runs a worker thread that just dequeues items, processes them, and marks them done.",358],["// them.",351],["// If specified, these secrets will be passed to individual puller implementations for them to use.  For example,",342]]},{"word":"then","context":[["// as then you are sure you have configured all required params",4924],["// kubelet's host machine and then exposed to the pod.",3083],["// then",827],["// then AssetDir(\"data\") would return []string{\"foo.txt\", \"img\"}",698],["//then",685],["// first, if it is available, then fall back on the default (as",669],["Param(ws.QueryParameter(\"pretty\", \"If 'true', then the output is pretty printed.\")).",635],["// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",626],["then: []string{",547],["// kubelet will then refuse to launch the pod.",365]]},{"word":"there","context":[["// If there is an error, it will be of type *PathError.",833],["// A flag that indicates whether there are more items to return. If your results",724],["// when there are no more results to return.",638],["// panics if there is an error in the config.",612],["// When there are multiple elements, the lists of nodes corresponding to each",592],["// Note that IAM might return fewer results, even when there are more results",572],["// than the MaxItems number of results even when there are more results available.",550],["// return the next page of results. This field will be empty if there",510],["// TODO: this is brittle; there's no guarantee the scheduler will have run in 10 seconds.",459],["// The token to use when requesting the next set of items. If there are no additional",458]]},{"word":"these","context":[["It has these top-level messages:",4689],["It is generated from these files:",4689],["// Always reference these packages, just in case the auto-generated code",3048],["// SchemeGroupVersion is group version used to register these objects",770],["// WriteToRequest writes these params to a swagger request",767],["// TODO: pass structured data to these actions, and document that data here.",716],["// TODO: Decide whether to store these separately or with the object they apply to.",704],["// with a container exit code of 0, and the system is not going to restart any of these containers.",586],["// type bool, bvec2, bvec3, bvec4, or arrays of these. The uniform variable",584],["// variables defined as int, ivec2, ivec3, ivec4, or arrays of these. The ui",584]]},{"word":"they","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// link operation occurs on the program object, when they are once again",1594],["// TODO: Decide whether to store these separately or with the object they apply to.",704],["// they are on one line! For multiple line or blocks that you want to ignore use ---.",427],["// Do not allow new pods to schedule onto the node unless they tolerate the taint,",408],["// The parameters which are pointers indicate they are optional.  Passing nil",378],["// Reference proto, json, and math imports to suppress error if they are not otherwise used.",345],["//   1. If the containers were removed immediately after they died, kubelet",277],["// do not allow pods to start on Kubelet unless they tolerate the taint,",272]]},{"word":"this","context":[["// Use of this source code is governed by a BSD-style",82711],["if this == nil {",80648],["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["} else if this == nil {",24188],["return this",23297],["// Context sets the context to be used in this call's Do method. Any",22537],["// Creating a request object using this method should be used when you want to inject",13378],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["return fmt.Errorf(\"that == nil && this != nil\")",10119]]},{"word":"time","context":[["\"time\"",232547],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["seed := time.Now().UnixNano()",14884],["start := time.Now()",12562],["now := time.Now()",10458],["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(time.Second)",6699],["time.Sleep(time.Second)",6699],["time.Sleep(1 * time.Second)",6076]]},{"word":"timeout","context":[["case <-timeout:",3387],["case <-time.After(timeout):",1871],["// timeout, the resonse will contain the jobid of the running async job",1437],["b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1356],["b, warn, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1222],["timeout time.Duration",1164],["t.Fatalf(\"timeout\")",972],["for start := time.Now(); time.Since(start) < timeout; time.Sleep(poll) {",679],["if timeout == 0 {",666],["timeout: timeout,",627]]},{"word":"timestamp","context":[["Timestamp: timestamp,",701],["// CreationTimestamp is a timestamp representing the server time when this object was",601],["// CreationTimestamp: [Output Only] Creation timestamp in RFC3339 text",578],["// CreationTimestamp: Creation timestamp in RFC3339 text format (output",466],["// An RFC3339 timestamp from which to show logs. If this value",410],["// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line",410],["timestamp time.Time",391],["CreateDate *time.Time `type:\"timestamp\" timestampFormat:\"iso8601\"`",384],["// timestamp using orderBy=\"creationTimestamp desc\". This sorts results",326],["timestamp := time.Now()",310]]},{"word":"tls","context":[["\"crypto/tls\"",13378],["TLSClientConfig: &tls.Config{",985],["TLSClientConfig: &tls.Config{InsecureSkipVerify: true},",879],["tlsConfig := &tls.Config{",826],["Certificates: []tls.Certificate{cert},",702],["package tls",576],["TLSConfig: &tls.Config{",513],["MinVersion: tls.VersionTLS10,",510],["tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,",466],["tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,",456]]},{"word":"tmp","context":[["defer os.RemoveAll(tmp)",1784],["ADD . /tmp/",587],["return tmp",467],["var tmp Node",423],["c.Fatalf(\"failed to list contents of tmp dir: %s\", err)",420],["plugMgr.InitPlugins(ProbeVolumePlugins(), volume.NewFakeVolumeHost(\"/tmp/fake\", nil, nil))",380],["COPY * /tmp/",306],["RUN ls /tmp/.dockerignore`",289],["COPY file*.txt /tmp/",280],["if _, err = rr.Read(tmp[:1]); err != nil {",273]]},{"word":"to","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// used to include empty fields in Patch requests.",38333],["// Fields allows partial responses to be retrieved.",33360],["// Fields allows partial responses to be retrieved. See",23003],["// Context sets the context to be used in this call's Do method. Any",22537],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Validate inspects the fields of the type to determine if they are valid.",18383]]},{"word":"tok","context":[["switch p.tok {",2319],["tok, pos, lit := p.scanIgnoreWhitespace()",1550],["if tok == fflib.FFTok_null {",1362],["switch tok {",1240],["switch p.tok.DataAtom {",1189],["switch p.tok.Type {",996],["Data: p.tok.Data,",711],["if tok != fflib.FFTok_string && tok != fflib.FFTok_null {",592],["if tok != fflib.FFTok_string && tok != fflib.FFTok_null {",592],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582]]},{"word":"token","context":[["\"go/token\"",6041],["fset := token.NewFileSet()",2032],["// Ignore the token.",1888],["request.Header.Set(\"Authorization\", \"bearer \"+s.token.GetValue())",1289],["Type:     \"token\",",1250],["if token == \"\" {",1005],["return token",884],["ctxt.build(token);",832],["return token, nil",796],["// token, used to page through large result sets. To get the next page",793]]},{"word":"total","context":[["total := 0",11395],["b.SetBytes(int64(total / b.N))",10167],["total += len(datas[i%10000])",3386],["total += pops[i%1000].Size()",3371],["total += len(data)",2698],["total += len(dAtA)",697],["return total",644],["return total, err",611],["total += n",515],["total++",506]]},{"word":"tr","context":[["</tr>",4512],["<tr>",2452],["defer tr.CloseIdleConnections()",1794],["c := &Client{Transport: tr}",1735],["tr := &http.Transport{",1496],["</td></tr>",1314],["<tr >",1267],["tr := &Transport{}",1065],["tr := &Transport{",1004],["hdr, err := tr.Next()",818]]},{"word":"transaction","context":[["// TODO: This requires a transaction, either both node status is updated",692],["// transaction.",672],["//   - ErrTxClosed if the transaction has already been closed",204],["Transaction string `json:\"transaction,omitempty\"`",199],["// Ensure transaction state is valid.",180],["type transaction struct {",177],["// Save new device id into transaction",172],["t.Errorf(\"expected transaction status to be %s; got %s\", expStatus, reply.Txn.Status)",169],["transaction.Rollback()",154],["transaction, _ := buildTestTx(t)",141]]},{"word":"true","context":[["return true",274181],["//       \"required\": true,",96651],["return true, nil",35581],["Optional: true,",28311],["true,",17951],["Computed: true,",15331],["ForceNew: true,",15313],["Required: true,",14985],["found = true",13797],["changed = true",11027]]},{"word":"ts","context":[["defer ts.Close()",14767],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["return ts",910],["conn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())",853],["res, err := c.Get(ts.URL)",819],["res, err := Get(ts.URL)",671],["resp, err := ts.HandleRequest(req)",655],["ts.mu.Lock()",634],["ts.Close()",614]]},{"word":"tt","context":[["for _, tt := range tests {",22910],["if s != tt.expected {",13631],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["for i, tt := range tests {",10529],["if rule != tt.expected {",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, r)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, rule)",2151],["if rules[i] == tt.expected {",2151],["tt(t, func() {",1512],["if tt := v.Type(); tt != tfunc {",885]]},{"word":"two","context":[["// Uniform1i and Uniform1iv are the only two functions that may be used to",1168],["//   Cannot end with a hyphen or contain two consecutive hyphens",600],["zAdd = client.ZAdd(\"zset\", redis.Z{2, \"two\"})",348],["// must be a letter Cannot end with a hyphen or contain two consecutive hyphens",340],["// and another of the given dimension. For any two matrices of dimensionality",314],["// Cannot end with a hyphen or contain two consecutive hyphens",305],["// TODO: the logic here does not handle two cases:",278],["// These two conditions could be alleviated by checkpointing kubelet.",277],["if strings.Join(tt, \" \") != \"one two\" {",239],["return ref, fmt.Errorf(\"the docker pull spec %q must be two or three segments separated by slashes\", spec)",197]]},{"word":"tx","context":[["tx.Rollback()",5448],["db.Update(func(tx *bolt.Tx) error {",2491],["tx.Commit()",2053],["tx, err := db.Begin()",1733],["err = tx.Commit()",1542],["defer tx.Rollback()",1470],["tx.CreateBucket([]byte(\"widgets\"))",1110],["db.View(func(tx *bolt.Tx) error {",1041],["return tx.Commit()",843],["defer tx.Abort()",796]]},{"word":"txn","context":[["ops := []txn.Op{{",1752],["Assert: txn.DocMissing,",1493],["Assert: txn.DocExists,",1274],["txn.Sequence++",1184],["ops = append(ops, txn.Op{",904],["buildTxn := func(attempt int) ([]txn.Op, error) {",818],["\"gopkg.in/mgo.v2/txn\"",791],["b := txn.NewBatch()",741],["return txn.Op{",665],["var ops []txn.Op",626]]},{"word":"typ","context":[["switch typ {",2177],["return typ",1839],["if typ == nil {",1018],["return fmt.Sprintf(\"func(v %v) *%v { return &v } ( %#v )\", typ, typ, pv)",897],["return fmt.Sprintf(\"func(v %v) *%v { return &v } ( %#v )\", typ, typ, pv)",897],["if typ != nil {",704],["typ = typ.Elem()",510],["typ = typ.Elem()",510],["for i := 0; i < typ.NumField(); i++ {",489],["func socket(domain int, typ int, proto int) (fd int, err error) {",463]]},{"word":"type","context":[["//       \"type\": \"string\"",149384],["_ struct{} `type:\"structure\"`",70669],["SDKShapeTraits bool `type:\"structure\"`",68537],["// Validate inspects the fields of the type to determine if they are valid.",18383],["//       \"type\": \"integer\"",15969],["type Config struct {",11935],["//       \"type\": \"boolean\"",8050],["type (",7913],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["DryRun *bool `locationName:\"dryRun\" type:\"boolean\"`",7393]]},{"word":"types","context":[["\"k8s.io/kubernetes/pkg/types\"",5291],["package types",4848],["Action: types.ActAllow,",4036],["Args:   []*types.Arg{},",3978],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"github.com/docker/docker/api/types\"",2417],["\"github.com/docker/engine-api/types\"",2215],["// Error can be either of the following types:",1860],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["\"github.com/docker/libnetwork/types\"",1274]]},{"word":"u","context":[["return u",12323],["u := url.Values{}",4964],["u := googleapi.Expand(baseURL, c.pathTemplate_, map[string]string{",3882],["URL:    u,",3347],["u.Set(\"id\", v.(string))",2735],["return u, nil",1851],["URL:     u,",1733],["req, err := s.client.NewRequest(\"GET\", u, nil)",1695],["if u == nil {",1377],["u.Set(\"domainid\", v.(string))",1235]]},{"word":"uint","context":[["for shift := uint(0); ; shift += 7 {",155764],["case uint:",1866],["codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())",622],["mv = uint(dd.DecodeUint(uintBitsize))",468],["ID       uint",405],["func (kl *Kubelet) ListenAndServeReadOnly(address net.IP, port uint) {",300],["mk = uint(dd.DecodeUint(uintBitsize))",288],["Port                           uint",274],["case *uint:",270],["// The return value is the address of a uint  variable that stores the value of the flag.",262]]},{"word":"uint16","context":[["case uint16:",2256],["Family uint16",859],["xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units",671],["Port   uint16",649],["Port     uint16",572],["var _p0 *uint16",469],["mv = uint16(dd.DecodeUint(16))",468],["var port uint16 = 5000",439],["Index     uint16",425],["Msglen    uint16",419]]},{"word":"uint32","context":[["//       \"format\": \"uint32\",",6403],["case uint32:",2534],["var v uint32",2519],["v |= (uint32(b) & 0x7F) << shift",1118],["Uint32() uint32",927],["key := uint32(fieldNumber)<<3 | uint32(wire)",920],["key := uint32(fieldNumber)<<3 | uint32(wire)",920],["v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))",733],["v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))",733],["v |= uint32(data[iNdEx-1]) << 24",709]]},{"word":"uint64","context":[["var wire uint64",32162],["wire |= (uint64(b) & 0x7F) << shift",32162],["n += 1 + l + sovGenerated(uint64(l))",30501],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["var stringLen uint64",22703],["n += 1 + l + sovThetest(uint64(l))",6518],["var valuekey uint64",5109],["keykey |= (uint64(b) & 0x7F) << shift",5109],["var keykey uint64",5109],["valuekey |= (uint64(b) & 0x7F) << shift",5109]]},{"word":"uint8","context":[["data[offset] = uint8(v)",6444],["data[offset+1] = uint8(v >> 8)",4294],["data[offset+2] = uint8(v >> 16)",4294],["data[offset+3] = uint8(v >> 24)",4294],["data[i] = uint8(uint64(l)&0x7f | 0x80)",2694],["data[i] = uint8(l)",2694],["case uint8:",2216],["data[offset] = uint8(v&0x7f | 0x80)",2150],["data[offset+7] = uint8(v >> 56)",2147],["data[offset+5] = uint8(v >> 40)",2147]]},{"word":"uintptr","context":[["case uintptr:",705],["gogsl.InitializeGslStatic(_result, uintptr(unsafe.Pointer(&_ref)))",584],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))",476],["_, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)",476],["r0, _, e1 := RawSyscall(SYS_GETPGID, uintptr(pid), 0, 0)",476],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))",476],["_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)",476],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476]]},{"word":"under","context":[["distributed under the License is distributed on an \"AS IS\" BASIS,",78730],["limitations under the License.",78218],["Licensed under the Apache License, Version 2.0 (the \"License\");",78165],["// distributed under the License is distributed on an \"AS IS\" BASIS,",56642],["// Licensed under the Apache License, Version 2.0 (the \"License\");",56516],["// limitations under the License.",45780],["// Licensed under the AGPLv3, see LICENCE file for details.",24944],["// permissions and limitations under the License.",6602],["* distributed under the License is distributed on an \"AS IS\" BASIS,",6432],["* limitations under the License.",6296]]},{"word":"unexpected","context":[["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Fatalf(\"unexpected error: %s\", err)",3238],["t.Fatalf(\"unexpected error %v\", err)",2430],["t.Fatalf(\"unexpected request: %#v\\n%#v\", req.URL, req)",2006],["t.Errorf(\"unexpected non-error\")",1580],["t.Fatalf(\"unexpected errors: %v\", errs)",1219],["panic(fmt.Sprintf(\"proto: unexpected type %T in oneof\", x))",1111],["t.Fatalf(\"unexpected actions: %v\", actions)",930],["t.Errorf(\"unexpected output: %s\", buf.String())",900]]},{"word":"unit","context":[["unit, err := s.wordpress.AddUnit()",956],["for _, unit := range units {",602],["{Tag: \"unit-mysql-0\"},",518],["{Tag: \"unit-wordpress-0\"},",503],["{Tag: \"unit-foo-42\"},",465],["unit, err := svc.AddUnit()",419],["var unit *state.Unit",387],["err = unit.Remove()",378],["err = unit.EnsureDead()",326],["err = unit.AssignToNewMachine()",321]]},{"word":"unsafe","context":[["\"unsafe\"",14133],["use(unsafe.Pointer(_p0))",10242],["var _p0 unsafe.Pointer",6004],["_p0 = unsafe.Pointer(&_zero)",5922],["import \"unsafe\"",4235],["_p0 = unsafe.Pointer(&p[0])",2792],["use(unsafe.Pointer(_p1))",2108],["defer C.free(unsafe.Pointer(cstr))",1562],["_p0 = unsafe.Pointer(&buf[0])",1542],["defer C.free(unsafe.Pointer(cname))",1232]]},{"word":"until","context":[["// values assigned to them by a call to Uniform* until the next successful",1594],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// Other management of the container blocks until the hook completes.",362],["// TODO: Unconditionally set the config.Version, until we fix the config.",361],["// Wait for the pods to enter the running state. Waiting loops until the pods",315],["// as a result, pods are not able to be provisioned in a namespace until the service account is provisioned",256],["// If we use Stdin, command.Run() won't return until the goroutine that's copying",245],["// without actually causing a kernel panic, so we need this workaround until",231],["// TODO: block until all sources have delivered at least one update to the channel, or break the sync loop",213],["// Block the return until the chan gets closed",204]]},{"word":"unversioned","context":[["unversioned.TypeMeta `json:\",inline\"`",20119],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {",3414],["TypeMeta: unversioned.TypeMeta{",3329],["out.TypeMeta = newVal.(unversioned.TypeMeta)",2894],["unversioned.TypeMeta",2729],["unversioned.ListMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",2125],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Duration\"),",2091]]},{"word":"up","context":[["// Status represents the current information about a pod. This data may not be up",788],["// is specified, the response includes only records beyond the marker, up to",664],["// Absolute number is calculated from percentage by rounding up.",536],["Scaling foo-v2 up to 10",501],["up{10},",494],["// Verify that the required pods have come up.",492],["// It's the caller's responsibility to clean up externally (i.e. use the",482],["// Hook up gocheck into the \"go test\" runner.",471],["// Set up a master",466],["// (e.g. looking up an ID).",456]]},{"word":"update","context":[["update: api.ReplicationController{",1304],["// check for update in container",853],["// at some point during pod execution (e.g. due to a pod label update), the",592],["// Copy data and update.",586],["// ValidateUpdate is the default update validation for an end user.",545],["update: extensions.DaemonSet{",543],["t.Fatalf(\"can't update disk space manager: %v\", err)",538],["// PrepareForUpdate clears fields that are not allowed to be set by end users on update.",530],["successCase.update.ObjectMeta.ResourceVersion = \"1\"",499],["if !actions[1].Matches(\"update\", \"nodes\") || actions[1].GetSubresource() != \"status\" {",463]]},{"word":"url","context":[["\"net/url\"",51644],["params := make(url.Values)",36391],["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["u := url.Values{}",4964],["v := url.Values{}",4608],["params_       url.Values",3641],["var _ = url.Parse",3082],["Url string `json:\"url,omitempty\"`",2583],["params := url.Values{}",2050],["resp, err := http.Get(url)",1999]]},{"word":"urlParams_","context":[["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["urls += \"?\" + c.urlParams_.Encode()",23003],["c.urlParams_.Set(\"alt\", alt)",23003],["gensupport.SetOptions(c.urlParams_, opts...)",18124],["urlParams_   gensupport.URLParams",9674],["urlParams_ gensupport.URLParams",6045],["c.urlParams_.Set(\"pageToken\", pageToken)",3624],["c.urlParams_.Set(\"maxResults\", fmt.Sprint(maxResults))",2908],["c.urlParams_.Set(\"quotaUser\", quotaUser)",2611],["c.urlParams_.Set(\"userIp\", userIP)",2283]]},{"word":"urls","context":[["urls += \"?\" + params.Encode()",35563],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["urls += \"?\" + c.urlParams_.Encode()",23003],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["req, _ := http.NewRequest(\"DELETE\", urls, body)",6246],["req, _ := http.NewRequest(\"PUT\", urls, body)",4835],["req, _ := http.NewRequest(\"PATCH\", urls, body)",3818],["urls = strings.Replace(urls, \"https://www.googleapis.com/\", \"https://www.googleapis.com/upload/\", 1)",1070],["urls = strings.Replace(urls, \"https://www.googleapis.com/\", \"https://www.googleapis.com/upload/\", 1)",1070],["for _, url := range urls {",658]]},{"word":"usage","context":[["usage()",2928],["func usage() {",2762],["flag.Usage = usage",1772],["// Status defines the actual enforced quota and its current usage",524],["// Example usage:",485],["// Max usage constraints on this kind by resource name",472],["// Min usage constraints on this kind by resource name",472],["// Used is the current observed total usage of the resource in the namespace",469],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469]]},{"word":"use","context":[["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["use(unsafe.Pointer(_p0))",10242],["* you may not use this file except in compliance with the License.",5867],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",4249],["// Redistribution and use in source and binary forms, with or without",3435],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file",2295],["// If additional configuration is needed for the client instance use the optional",2272],["use(unsafe.Pointer(_p1))",2108]]},{"word":"used","context":[["// used to include empty fields in Patch requests.",38333],["// Context sets the context to be used in this call's Do method. Any",22537],["// Creating a request object using this method should be used when you want to inject",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// This may be used to include null fields in Patch requests.",4930],["// Context sets the context to be used in this call's Do method.",4699],["// OAuth2 scopes used by this API.",2697],["// Prefix indicates this name will be used as part of generation, in which case",2533],["//The service client's operations are safe to be used concurrently.",2258]]},{"word":"user","context":[["\"os/user\"",3525],["// string assigned to a user, but should not exceed 40 characters.",2611],["// per-user limits.",2283],["package user",1613],["if user == nil {",1154],["return user, nil",1116],["// permissions. For more information on user permissions, see Managing User",1025],["User string `json:\"user,omitempty\"`",1015],["return user, err",950],["\"k8s.io/kubernetes/pkg/auth/user\"",914]]},{"word":"users","context":[["// Permissions (http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).",1047],["for _, user := range users {",856],["// users must create.",586],["// see Managing User Permissions (http://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).",584],["// PrepareForUpdate clears fields that are not allowed to be set by end users on update.",530],["// * a name, understood by users, and perhaps by peripheral systems, for an identity",513],["for _, u := range users {",480],["// users to handle external traffic that arrives at a node.",461],["// PrepareForCreate clears fields that are not allowed to be set by end users on creation.",398],["var users []User",376]]},{"word":"using","context":[["// Creating a request object using this method should be used when you want to inject",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// were truncated, you can make a subsequent pagination request using the Marker",836],["// If an error occurs, it can only be retrieved using xgb.WaitForEvent or xgb.PollForEvent.",686],["// uniform variable specified by location using the values passed as",584],["expected := \"When using ADD with more than one source file, the destination must be a directory and end with a /\"",581],["// Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable",574],["// than an interface. There is no way to construct a list+watcher using resource name.",561],["// expression using RE2 syntax. The literal value must match the entire",537],["// This should only be called when using ResumableMedia (as opposed to Media).",498]]},{"word":"util","context":[["\"k8s.io/kubernetes/pkg/util\"",8174],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047],["package util",5967],["\"k8s.io/kubernetes/pkg/util/wait\"",5040],["\"github.com/cockroachdb/cockroach/util\"",3396],["\"github.com/cockroachdb/cockroach/util/log\"",3105],["\"k8s.io/kubernetes/pkg/util/intstr\"",2637],["\"github.com/cockroachdb/cockroach/util/leaktest\"",2304],["util.SucceedsSoon(t, func() error {",2257]]},{"word":"utils","context":[["package utils",4460],["\"github.com/juju/utils\"",3390],["\"github.com/docker/docker/utils\"",2300],["\"github.com/cgrates/cgrates/utils\"",1287],["\"github.com/juju/utils/set\"",1243],["return utils.NewErrServerError(err)",1105],["boshlog \"github.com/cloudfoundry/bosh-utils/logger\"",1012],["bosherr \"github.com/cloudfoundry/bosh-utils/errors\"",996],["utils.ParseFlags(cmd, args, true)",902],["\"github.com/juju/utils/series\"",763]]},{"word":"v","context":[["t.Fatalf(\"err: %v\", err)",35496],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["return &v",20484]]},{"word":"v1","context":[["gc \"gopkg.in/check.v1\"",9251],[". \"gopkg.in/check.v1\"",4387],["package v1",4133],["\"k8s.io/kubernetes/pkg/api/v1\"",2889],["APIVersion: \"v1\",",2833],["ObjectMeta: v1.ObjectMeta{",2529],["\"apiVersion\": \"v1\",",2322],["\"gopkg.in/check.v1\"",2037],["Ref:         spec.MustCreateRef(\"#/definitions/v1.ObjectMeta\"),",1980],["v.AddArg(v1)",1946]]},{"word":"v2","context":[["\"gopkg.in/mgo.v2/bson\"",5492],["for k2, v2 := range v {",4716],["\"gopkg.in/mgo.v2\"",3985],["*v = v2",3874],["\"gopkg.in/yaml.v2\"",2843],["for _, k2 := range v2 {",2160],["\"gopkg.in/juju/names.v2\"",2156],["v1.AddArg(v2)",1627],["ee.EncodeInt(int64(v2))",1590],["ee.EncodeUint(uint64(v2))",1566]]},{"word":"val","context":[["return val",5739],["if err := s.Convert(&val, &newVal, 0); err != nil {",3612],["for key, val := range *in {",2838],["if err := deepCopy_resource_Quantity(val, newVal, c); err != nil {",2631],["return val, nil",2515],["if val == nil {",2362],["for key, val := range in {",1925],["for key, val := range in.Selector {",1906],["out.Selector[key] = val",1884],["(*out)[key] = val",1850]]},{"word":"valid","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["if !valid {",1871],["// valid",1428],["// - session_id, session ref, Reference to a valid session",1331],["valid = true",1253],["if !test.valid && len(errs) == 0 {",747],["if test.valid && len(errs) > 0 {",747],["// These are the valid statuses of pods.",710],["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// These are the valid phases of node.",681]]},{"word":"value","context":[["// value can be used to capture response data after the request's \"Send\" method",13378],["// fail if the object's ETag matches the given value. This is useful for",12114],["return value",5177],["// null. It is an error if a field in this list has a non-empty value.",4930],["// empty value appearing in NullFields will be sent to the server as",3833],["Value string `json:\"value,omitempty\"`",3152],["if value == nil {",3004],["for _, value := range values {",2167],["// value.",2137],["return value, nil",2126]]},{"word":"values","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// More values...",27171],["// Possible values:",14232],["// values are omitted from API requests. However, any field with an",3833],["for _, value := range values {",2167],["for _, v := range values {",1652],["// values assigned to them by a call to Uniform* until the next successful",1594],["return values",1294],["// variants of this function should be used to provide values for uniform",1168],["// Possible values are:",1141]]},{"word":"var","context":[["var (",197231],["var err error",136062],["var l int",66946],["var h codecSelfer1234",59656],["var body io.Reader = nil",58552],["var msglen int",42860],["var i int",38426],["var wire uint64",32162],["var buf bytes.Buffer",31577],["var stringLen uint64",22703]]},{"word":"variable","context":[["assert.NotNil(t, out) // ensure out variable is used",1747],["// variable array. The location of the uniform variable to be modified is",1010],["// variable array. The location of the uniform variable to be modified is",1010],["// regardless of whether the variable exists or not.",936],["// Specify the value of a uniform variable for the current program object",866],["// Specify the value of a uniform variable for a specified program object",858],["// EnvVar represents an environment variable present in a Container.",716],["// uniform variable or a uniform variable array. These functions receive a",584],["// uniform variable or a uniform variable array. These functions receive a",584],["// variable array. A slice with length 1 should be used if modifying the value",584]]},{"word":"version","context":[["// (at your option) any later version.",8541],["// the Free Software Foundation, either version 3 of the License, or",8408],["(at your option) any later version.",4611],["the Free Software Foundation, either version 3 of the License, or",4294],["\"api-version\": client.APIVersion,",4209],["\"api-version\": APIVersion,",2307],["\"github.com/juju/juju/version\"",2014],["* (at your option) any later version.",1891],["* it under the terms of the GNU General Public License version 3 as",1549],["\"k8s.io/kubernetes/pkg/version\"",1370]]},{"word":"volume","context":[["\"k8s.io/kubernetes/pkg/volume\"",2654],["plugMgr := volume.VolumePluginMgr{}",1858],["host volume.VolumeHost",815],["// Source represents the location and type of a volume to mount.",722],["// Filesystem type of the volume that you want to mount.",720],["// FlexVolume represents a generic volume resource that is",708],["// Cinder represents a cinder volume attached and mounted on kubelets host machine",696],["func ProbeVolumePlugins() []volume.VolumePlugin {",690],["\"github.com/docker/docker/volume\"",676],["// This is the primary entrypoint for volume plugins.",619]]},{"word":"volumes","context":[["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",676],["// released volumes must be recycled before becoming available again",592],["// Available volumes are held by the binder and matched to PersistentVolumeClaims",453],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath",407],["for _, volume := range volumes {",376],["for _, vol := range volumes {",369],["// Remove any orphaned volumes.",325]]},{"word":"w","context":[["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["w.WriteHeader(http.StatusOK)",10652],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["w := httptest.NewRecorder()",6588],["w.WriteHeader(http.StatusInternalServerError)",5118],["w.WriteHeader(http.StatusNoContent)",4938],["w.WriteHeader(http.StatusBadRequest)",4159],["return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3901],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["w.Close()",3832]]},{"word":"wait","context":[["\"k8s.io/kubernetes/pkg/util/wait\"",5040],["// If we have a async client, we need to wait for the async result",2363],["time.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))",1469],["go wait.Until(func() {",951],["case <-time.After(wait.ForeverTestTimeout):",838],["wait.Wait()",711],["if err == wait.ErrWaitTimeout {",585],["defer wait.Done()",531],["wait := sync.WaitGroup{}",481],["return wait.Poll(Poll, 5*time.Minute, func() (bool, error) {",412]]},{"word":"want","context":[["// Creating a request object using this method should be used when you want to inject",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["if got != want {",4253],["t.Fatalf(\"String want %v got %v\", s1, s2)",3263],["t.Fatalf(\"GoString want %v got %v\", s1, s2)",3251],["if !reflect.DeepEqual(got, want) {",2749],["// where the request originates. Use this if you want to enforce",2283],["want string",1818],["if err == nil || err.Error() != want {",1174],["t.Errorf(\"got %v, want %v\", got, want)",1165]]},{"word":"was","context":[["// because http.StatusNotModified was returned.",9422],["// googleapi.IsNotModified to check whether the returned error was",9322],["// to check whether the returned error was because",6692],["// http.StatusNotModified was returned.",6692],["// check whether the returned error was because http.StatusNotModified",6580],["// was returned.",6580],["// This file was generated by the swagger tool.",2864],["// Returns whether the assertion was successful (true) or not (false).",2688],["// License, v. 2.0. If a copy of the MPL was not distributed with this",2028],["// whether the returned error was because http.StatusNotModified was",1884]]},{"word":"watch","context":[["\"k8s.io/kubernetes/pkg/watch\"",5881],["WatchFunc: func(options api.ListOptions) (watch.Interface, error) {",2695],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/watch\"",2108],["Prefix(\"watch\").",1620],["watch \"k8s.io/kubernetes/pkg/watch\"",1545],["watch \"k8s.io/kubernetes/pkg/watch\"",1545],["Watch(opts api.ListOptions) (watch.Interface, error)",805],["WatchFunc: func(resourceVersion string) (watch.Interface, error) {",693],["t.Fatalf(\"expected watch event type %s, got %s\", e, a)",652],["case watch.Deleted:",634]]},{"word":"we","context":[["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// If we have a async client, we need to wait for the async result",2363],["// If we have a async client, we need to wait for the async result",2363],["// TODO: Inefficient conversion - can we improve it?",2317],["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["// TODO(roberthbailey): Can we do this without having credentials to talk",495],["// we will try to respect it or else fail the request.  This field can",486],["// Calculate next window if we have no more points.",473]]},{"word":"wg","context":[["wg.Wait()",23272],["wg.Add(1)",18128],["defer wg.Done()",15771],["var wg sync.WaitGroup",15187],["wg.Done()",12239],["wg := sync.WaitGroup{}",3786],["wg := &sync.WaitGroup{}",1764],["wg.Add(2)",1561],["s.wg.Add(1)",1036],["wg := new(sync.WaitGroup)",954]]},{"word":"when","context":[["// Creating a request object using this method should be used when you want to inject",13378],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["// TODO: Uncomment when fix #19254",1624],["// link operation occurs on the program object, when they are once again",1594],["// to 0 when the program object is linked successfully. They retain the",1594],["// when",766],["// Use this only when paginating results to indicate the maximum number of items",746],["// PullPolicy describes a policy for if/when to pull a container image",705],["//when",656],["// when there are no more results to return.",638]]},{"word":"where","context":[["// where the request originates. Use this if you want to enforce",2283],["// where Purpose is X, see the tag:key=value filter.",931],["// \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered",671],["// used for PersistentVolumes where the bound PersistentVolumeClaim was deleted",592],["where",561],["// service where to continue from.",494],["// of the Marker element in the response that you received to indicate where",494],["// 1. nodeMonitorGracePeriod must be N times more than nodeStatusUpdateFrequency, where",446],["// Temporary directory where test files will be created",367],["/* find a state where \"error\" is a legal shift action */",300]]},{"word":"whether","context":[["// server regardless of whether the field is empty or not. This may be",38333],["// request. Use googleapi.IsNotModified to check whether the response",12114],["// googleapi.IsNotModified to check whether the returned error was",9322],["// Checks whether you have the required permissions for the action, without",6903],["// to check whether the returned error was because",6692],["// check whether the returned error was because http.StatusNotModified",6580],["// Returns whether the assertion was successful (true) or not (false).",2688],["// whether the returned error was because http.StatusNotModified was",1884],["// ForceSendFields will be sent to the server regardless of whether the",1152],["// regardless of whether the variable exists or not.",936]]},{"word":"which","context":[["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// error which satisfies the awserr.Error interface.",11875],["// Prefix indicates this name will be used as part of generation, in which case",2533],["// This is a courtesy helper function, which in some cases may not work as expected!",1719],["// specified by location, which should be a value returned by GetUniformLocation.",1010],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["//     This defines the format, but not the length restriction, which should be",726],["// NextPageToken: The continuation token, which is used to page through",718],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// List holds a list of objects, which may not be known by the server.",680]]},{"word":"will","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// pending HTTP request will be aborted if the provided context is",22537],["// Any pending HTTP request will be aborted if the provided context",4780],["// empty value appearing in NullFields will be sent to the server as",3833],["// The go-ethereum library is distributed in the hope that it will be useful,",3822],["This program is distributed in the hope that it will be useful,",3745],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["* This program is distributed in the hope that it will be useful,",3470],["// This program is distributed in the hope that it will be useful,",3031],["// Prefix indicates this name will be used as part of generation, in which case",2533]]},{"word":"wire","context":[["wire |= (uint64(b) & 0x7F) << shift",32162],["var wire uint64",32162],["wireType := int(wire & 0x7)",32066],["fieldNum := int32(wire >> 3)",29949],["if wire == 0 {",3931],["wire >>= 7",3929],["if wire != proto.WireBytes {",3435],["if wire != proto.WireVarint {",2043],["if wire == 3 {",1125],["wire := r.Intn(4)",1125]]},{"word":"wireType","context":[["if wireType != 2 {",69892],["wireType := int(wire & 0x7)",32066],["if wireType == 4 {",26138],["if wireType != 0 {",25884],["if wireType != 1 {",2297],["switch wireType {",2205],["return 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",2191],["return 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",2191],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846]]},{"word":"with","context":[["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["// unconditionally include in API requests. By default, fields with",36870],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// Generic AWS error with Code, Message, and original error (if any)",6209],["* you may not use this file except in compliance with the License.",5867],["// values are omitted from API requests. However, any field with an",3833],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["// Redistribution and use in source and binary forms, with or without",3435]]},{"word":"without","context":[["// but WITHOUT ANY WARRANTY; without even the implied warranty of",9930],["// Checks whether you have the required permissions for the action, without",6903],["but WITHOUT ANY WARRANTY; without even the implied warranty of",5062],["// in the Software without restriction, including without limitation the rights",4249],["// in the Software without restriction, including without limitation the rights",4249],["* but WITHOUT ANY WARRANTY; without even the implied warranty of",3684],["// Redistribution and use in source and binary forms, with or without",3435],["* Redistribution and use in source and binary forms, with or without",1643],["// this software without specific prior written permission.",1371],["in the Software without restriction, including without limitation the rights",1059]]},{"word":"work","context":[["// This is a courtesy helper function, which in some cases may not work as expected!",1719],["* distributed with this work for additional information",1018],["distributed with this work for additional information",975],["if len(work) > 0 {",631],["_work = &work[0]",616],["// not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use",541],["this work for additional information regarding copyright ownership.",477],["// TODO: Make it work for all providers.",455],["// Hand the call off to the controller, which does most of the work.",378],["// Note: be cautious when changing the constant, it must work with nodeMonitorGracePeriod",305]]},{"word":"write","context":[["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["return thrift.PrependError(\"write struct stop error: \", err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T write struct begin error: \", p), err)",1514],["return thrift.PrependError(\"write field stop error: \", err)",1514],["return fmt.Errorf(\"%T write struct begin error: %s\", p, err)",1363],["test.write = strings.Join(writes, \"\\n\")",996],["// along with this program; if not, write to the Free Software",910],["return fmt.Errorf(\"write field stop error: %s\", err)",830],["return fmt.Errorf(\"write struct stop error: %s\", err)",830],["// contact license@antha-lang.org or write to the Antha team c/o",818]]},{"word":"writing","context":[["Unless required by applicable law or agreed to in writing, software",78790],["// Unless required by applicable law or agreed to in writing, software",58926],["* Unless required by applicable law or agreed to in writing, software",6574],["//  Unless required by applicable law or agreed to in writing, software distributed under the",2295],["Unless required by applicable law or agreed to in writing,",985],["* Unless required by applicable law or agreed to in writing,",792],["//   Unless required by applicable law or agreed to in writing, software",599],["** Unless required by applicable law or agreed to in writing, software",470],["//  Unless required by applicable law or agreed to in writing,",459],["*  Unless required by applicable law or agreed to in writing, software",330]]},{"word":"wrong","context":[["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846],["return fmt.Errorf(\"proto: wrong wireType = %d for field ObjectMeta\", wireType)",1792],["return fmt.Errorf(\"proto: wrong wireType = %d for field Items\", wireType)",1724],["return fmt.Errorf(\"proto: wrong wireType = %d for field ListMeta\", wireType)",1470],["return fmt.Errorf(\"proto: wrong wireType = %d for field Status\", wireType)",1444],["return fmt.Errorf(\"proto: wrong wireType = %d for field Type\", wireType)",1196],["return fmt.Errorf(\"proto: wrong wireType = %d for field Spec\", wireType)",1186],["return fmt.Errorf(\"proto: wrong wireType = %d for field Field1\", wireType)",1149],["return fmt.Errorf(\"proto: wrong wireType = %d for field Header\", wireType)",1100],["return fmt.Errorf(\"proto: wrong wireType = %d for field Value\", wireType)",1069]]},{"word":"www","context":[["http://www.apache.org/licenses/LICENSE-2.0",79621],["//     http://www.apache.org/licenses/LICENSE-2.0",43271],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["// http://www.apache.org/licenses/LICENSE-2.0",7463],["//    http://www.apache.org/licenses/LICENSE-2.0",5528],["*     http://www.apache.org/licenses/LICENSE-2.0",4447],["// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.",3822],["//      http://www.apache.org/licenses/LICENSE-2.0",3481],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/drive\",",2939]]},{"word":"x","context":[["\"golang.org/x/net/context\"",29586],["if x == nil {",14426],["} else if z.HasExtensions() && z.DecExt(x) {",13814],["} else if z.HasExtensions() && z.EncExt(x) {",13814],["x := v.Args[0]",11125],["v.AddArg(x)",10240],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["x.APIVersion = string(r.DecodeString())",9730],["x.APIVersion = \"\"",9730],["x.Kind = string(r.DecodeString())",9708]]},{"word":"xml","context":[["\"encoding/xml\"",8744],["XMLName xml.Name",1826],["This string `xml:\"_this,omitempty\"`",1190],["RequestId string `xml:\"requestId\"`",569],["XMLName: xml.Name{",565],["case xml.StartElement:",556],["Returnval string `xml:\"returnval,omitempty\"`",544],["Fault_ *soap.Fault                         `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty\"`",472],["Fault_ *soap.Fault                        `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty\"`",470],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",425]]},{"word":"y","context":[["y := v.Args[1]",5133],["v.AddArg(y)",3195],["v0.AddArg(y)",2171],["return y",1950],["switch y := b.(type) {",1717],["y = 1",1709],["r = x << y",1657],["r = x >> y",1639],["y = 0",1573],["return invOp2(x, y, op)",1370]]},{"word":"yaml","context":[["\"gopkg.in/yaml.v2\"",2843],["\"github.com/ghodss/yaml\"",1199],["// UnmarshalYAML implements the yaml.Unmarshaler interface.",697],["Name string `json:\"name,omitempty\" yaml:\"name,omitempty\"`",549],["XXX map[string]interface{} `yaml:\",inline\"`",549],["Description string `json:\"description,omitempty\" yaml:\"description,omitempty\"`",437],["Kind string `json:\"kind,omitempty\" yaml:\"kind,omitempty\"`",416],["\"gopkg.in/yaml.v1\"",385],["Data map[string]interface{} `json:\"data,omitempty\" yaml:\"data,omitempty\"`",372],["State string `json:\"state,omitempty\" yaml:\"state,omitempty\"`",368]]},{"word":"you","context":[["you may not use this file except in compliance with the License.",78263],["// you may not use this file except in compliance with the License.",55975],["// Creating a request object using this method should be used when you want to inject",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// actually making the request, and provides an error response. If you have",6922],["// Checks whether you have the required permissions for the action, without",6903],["* you may not use this file except in compliance with the License.",5867],["// as then you are sure you have configured all required params",4924],["// as then you are sure you have configured all required params",4924],["// The go-ethereum library is free software: you can redistribute it and/or modify",3822]]},{"word":"your","context":[["// (at your option) any later version.",8541],["(at your option) any later version.",4611],["// aws.Config parameter to add your extra config.",2272],["* (at your option) any later version.",1891],["// A compilation error at this line likely means your copy of the",1437],["// to return a list of gateways for your account and region.",1344],["// View and manage your data across Google Cloud Platform services",922],["// of the License, or (at your option) any later version.",854],["// A flag that indicates whether there are more items to return. If your results",724],["// receive all of your results.",550]]},{"word":"z","context":[["z.DecSendContainerState(codecSelfer_containerArrayEnd1234)",67764],["_, _, _ = h, z, r",60384],["z.DecSendContainerState(codecSelfer_containerArrayElem1234)",58067],["z.EncSendContainerState(codecSelfer_containerArrayElem1234)",51551],["z.EncSendContainerState(codecSelfer_containerMapValue1234)",48482],["z.EncSendContainerState(codecSelfer_containerMapKey1234)",48482],["z, r := codec1978.GenHelperDecoder(d)",42393],["z.DecSendContainerState(codecSelfer_containerMapEnd1234)",19506],["z, r := codec1978.GenHelperEncoder(e)",17991],["} else if z.HasExtensions() && z.EncExt(x) {",13814]]},{"word":"zero","context":[["// Pos reports the position of the first component of n or zero if it's empty.",692],["// The value zero indicates delete immediately. If this value is nil, the default grace period for the",604],["// terminated in a failure (exited with a non-zero exit code or was stopped by the system).",588],["return zero, err",563],["// Value must be non-negative integer. The value zero indicates delete immediately.",539],["var zero *JavaLangObject",522],["\"zero-length Name\": {",468],["// Arrays are zero-indexed.  Fields may appear more than once in an array of",412],["return zero",353],["\"zero-length name\": {",334]]},{"word":"zone","context":[["//     \"zone\": {",2673],["c.zone = zone",2491],["c.zone = zone",2491],["//     \"zone\",",1949],["//       \"description\": \"Name of the zone scoping this request.\",",813],["\"zone\":    c.zone,",739],["\"zone\":    c.zone,",739],["//     \"zone\"",724],["Zone string `json:\"zone,omitempty\"`",595],["// The disk must also be in the same GCE project and zone as the kubelet.",500]]},{"word":"Ω","context":[["Ω(err).ShouldNot(HaveOccurred())",12297],["Ω(err).Should(HaveOccurred())",2915],["Ω(success).Should(BeFalse())",1623],["Ω(err).Should(BeNil())",1049],["Ω(failures).Should(HaveLen(1))",622],["Ω(func() {",533],["Ω(count).Should(Equal(1))",338],["Ω(outcome).Should(BeFalse())",276],["Ω(res.Code).Should(Equal(200))",264],["Ω(output).Should(ContainSubstring(\"Test Suite Passed\"))",261]]}]
