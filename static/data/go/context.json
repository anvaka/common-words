[{"word":"0x00","context":[["0x00,",75484],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",3412],["0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",2288]],"useCount":422115},{"word":"0x7F","context":[["byteLen |= (int(b) & 0x7F) << shift",4334],["stringLenmapkey |= (uint64(b) & 0x7F) << shift",2770],["v |= (uint64(b) & 0x7F) << shift",2433],["v |= (int32(b) & 0x7F) << shift",2269],["keykey |= (uint64(b) & 0x7F) << shift",5109],["valuekey |= (uint64(b) & 0x7F) << shift",5109],["v |= (int(b) & 0x7F) << shift",5834],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["wire |= (uint64(b) & 0x7F) << shift",32162],["msglen |= (int(b) & 0x7F) << shift",42857]],"useCount":153041},{"word":"0x80","context":[["low:           0x80,",378],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["if data[iNdEx-1] < 0x80 {",1998],["data[offset] = uint8(v&0x7f | 0x80)",2150],["data[i] = uint8(uint64(l)&0x7f | 0x80)",2694],["if b < 0x80 {",153986],["data = append(data, uint8(uint64(v)&0x7f|0x80))",811],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274],["0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e, 0x8e, 0x80, 0x8e,",1274]],"useCount":194158},{"word":"0xff","context":[["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831],["0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",1831]],"useCount":92999},{"word":"A","context":[["// A compilation error at this line likely means your copy of the",1437],["// A group's client should implement this interface.",835],["// A service error occurred",13362],["// A non-nil error returned from f will halt the iteration.",2234],["A int",1828],["// A non-service error occurred.",1771],["// A service error occurred.",1770],["type A struct {",894],["// \texpected: \"A\",",1428],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732]],"useCount":349949},{"word":"API","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// in API requests with the JSON null value. By default, fields with",1097],["// empty values are omitted from API requests. However, any field with",1097],["// to unconditionally include in API requests. By default, fields with",1463],["// API requests with the JSON null value. By default, fields with empty",1737],["BasePath  string // API endpoint base URL",2098],["// OAuth2 scopes used by this API.",2697],["// values are omitted from API requests. However, any field with an",3833],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// unconditionally include in API requests. By default, fields with",36870]],"useCount":240203},{"word":"APIVersion","context":[["APIVersion: testapi.Default.GroupVersion().String(),",996],["x.APIVersion = string(r.DecodeString())",9730],["req, err := loc.api.BuildHTTPRequest(uri.HTTPMethod, uri.Path, APIVersion, params, p)",1555],["\"api-version\": APIVersion,",2307],["out.APIVersion = in.APIVersion",3676],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["x.APIVersion = \"\"",9730],["\"api-version\": client.APIVersion,",4209],["APIVersion: \"v1\",",2833],["out.APIVersion = in.APIVersion",3676]],"useCount":88430},{"word":"AWS","context":[["// See the AWS API reference guide for Amazon API Gateway's",456],["// (typically AWS load-balancers)",485],["// See the AWS API reference guide for 's",504],["// AWSElasticBlockStore represents an AWS EBS disk that is attached to a",444],["// AWS Service Namespaces (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)",608],["// The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.",622],["// AWSElasticBlockStore represents an AWS Disk resource that is attached to a",636],["// in the AWS General Reference.",838],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// Generic AWS Error with Code, Message, and original error (if any)",7149]],"useCount":97126},{"word":"Action","context":[["Action: specs.ActAllow,",1246],["Action: func(c *cli.Context) error {",906],["action := rectest.Action{",690],["Action: func(c *cli.Context) {",4387],["app.Action = func(c *cli.Context) {",708],["[]testutil.Action{",1426],["Action: configs.Allow,",1552],["&metadata.Action{",2335],["Action: types.ActAllow,",4036],["Action: func(ctx *cli.Context) {",1298]],"useCount":72091},{"word":"Add","context":[["wg.Add(1)",18128],["req.Header.Add(\"Content-Type\", \"application/json\")",1212],["wg.Add(2)",1561],["w.Header().Add(\"Content-Type\", \"application/json\")",1637],["s.wg.Add(1)",1036],["if in.Add != nil {",1030],["out.Add = nil",1012],["invalidParams.Add(request.NewErrParamRequired(\"Name\"))",918],["invalidParams.Add(request.NewErrParamRequired(\"Bucket\"))",869],["for i := range in.Add {",811]],"useCount":255722},{"word":"Addr","context":[["conn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())",853],["for i := 0; i < len(sa.Addr); i++ {",744],["Addr string",691],["pixels_ptr = unsafe.Pointer(pixels_v.Index(0).Addr().Pointer())",558],["v = v.Addr()",552],["data_ptr = unsafe.Pointer(data_v.Index(0).Addr().Pointer())",552],["pointer_ptr = unsafe.Pointer(pointer_v.Index(0).Addr().Pointer())",411],["Addr     [16]byte /* in6_addr */",377],["Addr   [4]byte /* in_addr */",374],["addr := srv.Addr",367]],"useCount":74600},{"word":"Address","context":[["x.Address = string(r.DecodeString())",514],["{Type: api.NodeLegacyHostIP, Address: \"something\"},",566],["x.Address = \"\"",514],["r.EncodeString(codecSelferC_UTF81234, string(x.Address))",514],["type Address struct {",810],["Address string `json:\"address\"`",811],["Address:    \"127.0.0.1\",",1042],["Address string",1234],["out.Address = in.Address",1275],["out.Address = in.Address",1275]],"useCount":71268},{"word":"After","context":[["case <-time.After(timeout):",1871],["case <-time.After(3 * time.Second):",1061],["case <-time.After(coretesting.ShortWait):",1265],["case <-time.After(100 * time.Millisecond):",1295],["case <-time.After(time.Second):",4246],["case <-time.After(5 * time.Second):",4145],["case <-time.After(10 * time.Second):",1515],["case <-time.After(1 * time.Second):",1613],["case <-time.After(2 * time.Second):",1784],["case <-time.After(coretesting.LongWait):",1808]],"useCount":73265},{"word":"Agent","context":[["userAgent := strings.Split(r.Header.Get(\"User-Agent\"), \"/\")",188],["req.Header.Add(\"User-Agent\", c.UserAgent)",203],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["reqHeaders.Set(\"User-Agent\", c.s.userAgent())",11905],["UserAgent string // optional additional User-Agent fragment",2098],["type Agent struct {",396],["req.Header.Set(\"User-Agent\", userAgent)",357],["req.Header.Set(\"User-Agent\", shared.UserAgent)",244],["agent := c.Agent()",214]],"useCount":75269},{"word":"Amazon","context":[["// in the Amazon Elastic Compute Cloud User Guide.",4599],["// For more information about ARNs, go to Amazon Resource Names (ARNs) and",608],["// in the Amazon DynamoDB Developer Guide.",1656],["// The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.",622],["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// in the Amazon RDS User Guide.",722],["// in the Amazon Redshift Cluster Management Guide.",737],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["// in the Amazon Virtual Private Cloud User Guide.",1667]],"useCount":93202},{"word":"An","context":[["// StartIndex sets the optional parameter \"start-index\": An index of the",675],["// An RFC3339 timestamp from which to show logs. If this value",410],["// An optional pagination token provided by a previous request. If this parameter",664],["// Description: An optional textual description of the resource;",606],["// Operation: An identifier that uniquely identifies the operation. You",447],["// Namespace defines the space within which name must be unique. An empty namespace is",424],["// An optional parameter that specifies the starting point to return a set of",381],["// An identifier that was returned from the previous call to this operation,",325],["// An expression evaluated on data point.",321],["//       \"description\": \"An unstructured search string used to filter the set of results based on asset metadata.\",",316]],"useCount":63572},{"word":"Any","context":[["// Context sets the context to be used in this call's Do method. Any",22537],["// Any pending HTTP request will be aborted if the provided context",4780],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// Any non-2xx status code is an error. Response headers are in either",1236],["* University in Winter 2015. Any subsequent COMP 520 student who is",916],["// Exactly one of *Object or error will be non-nil. Any non-2xx status",342],["// Exactly one of *ObjectAccessControl or error will be non-nil. Any",440],["// Exactly one of *Empty or error will be non-nil. Any non-2xx status",775],["// methods. Any pending HTTP request will be aborted if the provided",466]],"useCount":66273},{"word":"Args","context":[["x := v.Args[0]",11125],["mem := v.Args[2]",2237],["v_0 := v.Args[0]",7907],["y := v.Args[1]",5133],["v_1 := v.Args[1]",4717],["Args:   []*types.Arg{},",3978],["app.Run(os.Args)",2537],["mem := v.Args[1]",1911],["args := flag.Args()",1763],["ptr := v.Args[0]",1744]],"useCount":180781},{"word":"Assert","context":[["c.Assert(err, gc.IsNil)",75298],["c.Assert(err, checker.IsNil)",16743],["c.Assert(err, check.NotNil)",7474],["c.Assert(err, NotNil)",4327],["c.Assert(err, test.IsNil)",3451],["c.Assert(ok, Equals, true)",3112],["c.Assert(err, check.IsNil, check.Commentf(out))",3044],["c.Assert(err, check.IsNil)",82873],["c.Assert(err, IsNil)",104368],["c.Assert(err, jc.ErrorIsNil)",135421]],"useCount":855788},{"word":"B","context":[["func BenchmarkMarshal(b *testing.B) {",215],["B",217],["type B struct {",657],["B int",682],["B:    []byte(\"PAYLOAD\"),",432],["case 'B':",336],["A, B int",252],["result := struct{ A, B int }{}",241],["B bool",238],["B string",741]],"useCount":102711},{"word":"BY","context":[["// Parse sort: \"ORDER BY FIELD+\".",292],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["if res, err := s.Query(`SELECT * FROM db0.rp0.cpu GROUP BY *`); err != nil {",254],["// FOR USE BY CODECGEN ONLY. IT *WILL* CHANGE WITHOUT NOTICE. *DO NOT USE*",248],["_, _ = buf.WriteString(\" ORDER BY \")",388],["command: `SELECT * FROM db0.rp0.cpu GROUP BY *`,",441],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["sql_str = sql_str + \" ORDER BY ID DESC \"",320]],"useCount":73822},{"word":"BeforeEach","context":[["// filled in BeforeEach",65],["func (f *Framework) BeforeEach() {",51],["//BeforeEach, AfterEach, JustBeforeEach, It, and Measurement blocks.",68],["//Like It blocks, BeforeEach blocks can be made asynchronous by providing a body function that accepts",72],["// NewFramework makes a new framework and sets up a BeforeEach/AfterEach for",110],["BeforeEach(func() {",60310],["var _ = BeforeEach(func() {",177],["BeforeEach(f.BeforeEach)",51],["BeforeEach(f.beforeEach)",61],["g.BeforeEach(func() {",210]],"useCount":61974},{"word":"Body","context":[["// http.Response Body if it receives an error.",6600],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["defer resp.Body.Close()",30994],["res.Body.Close()",30727],["if res.Body != nil {",24829],["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["body, err := ioutil.ReadAll(resp.Body)",8460],["resp.Body.Close()",7445],["// closes the http.Response Body.",6600],["defer res.Body.Close()",9002]],"useCount":370973},{"word":"Buffer","context":[["buf := new(bytes.Buffer)",10550],["buffer := &bytes.Buffer{}",1503],["var stdout, stderr bytes.Buffer",1886],["var out bytes.Buffer",2512],["var buf bytes.Buffer",31577],["var b bytes.Buffer",7044],["var buffer bytes.Buffer",5736],["buf := &bytes.Buffer{}",4759],["b := new(bytes.Buffer)",2946],["buffer := new(bytes.Buffer)",1322]],"useCount":142463},{"word":"By","context":[["// unconditionally include in API requests. By default, fields with",36870],["// requests with the JSON null value. By default, fields with empty",2096],["By(\"deleting the pod\")",532],["// API requests with the JSON null value. By default, fields with empty",1737],["// to unconditionally include in API requests. By default, fields with",1463],["By(\"creating the pod\")",867],["// include in API requests with the JSON null value. By default, fields",819],["// By default, fields with empty values are omitted from API requests.",683],["// in API requests with the JSON null value. By default, fields with",1097],["By(\"submitting the pod to kubernetes\")",580]],"useCount":112181},{"word":"Bytes","context":[["return buf.Bytes(), err",873],["return buffer.Bytes(), nil",399],["spew.Sdump(buf.Bytes()), spew.Sdump(test.buf))",398],["if !bytes.Equal(buf.Bytes(), test.buf) {",414],["return b.Bytes()",489],["outBuf := fs.Output.Bytes()",576],["return b.Bytes(), nil",642],["return b.Bytes(), err",648],["return buf.Bytes()",1852],["return buf.Bytes(), nil",2995]],"useCount":78044},{"word":"C","context":[["C:      \"accounts\",",1227],["args: C.struct_fnargs{",1270],["cname := C.CString(name)",1397],["defer C.free(unsafe.Pointer(cstr))",1562],["case <-timer.C:",1869],["case <-ticker.C:",3703],["coll := session.DB(\"mydb\").C(\"mycoll\")",6299],["import \"C\"",11442],["defer C.free(unsafe.Pointer(cname))",1232],["func(c *gc.C, st *State) changeTestCase {",950]],"useCount":526001},{"word":"Check","context":[["c.Check(err, check.IsNil)",698],["// Check the pod infra container.",780],["// Check pod status stored in the status map.",780],["if err := quick.Check(f, nil); err != nil {",855],["}).Check()",992],["Check: func(resp *logical.Response) error {",1015],["c.Check(err, gc.IsNil)",2043],["c.Check(err, IsNil)",2456],["c.Check(err, jc.ErrorIsNil)",4766],["Check: resource.ComposeTestCheckFunc(",10702]],"useCount":163927},{"word":"CheckBreak","context":[["yyb93 = r.CheckBreak()",891],["if r.CheckBreak() {",12201],["yyb10 = r.CheckBreak()",3899],["for j := 0; !dd.CheckBreak(); j++ {",3681],["yyb12 = r.CheckBreak()",1158],["for ; !r.CheckBreak(); yyj1++ {",1283],["yyb9 = r.CheckBreak()",3635],["yyb8 = r.CheckBreak()",1912],["yyb7 = r.CheckBreak()",1513],["yyb6 = r.CheckBreak()",1783]],"useCount":83787},{"word":"Client","context":[["client := &http.Client{}",4318],["func New(client *http.Client) (*Service, error) {",3045],["client := http.Client{}",4359],["type Client struct {",6191],["*client.Client",2521],["Client: client.New(",2287],["client *Client",2081],["client    *http.Client",2268],["tf.Client = &fake.RESTClient{",2082],["api_service, err := api_client.New(context.Client)",2230]],"useCount":263064},{"word":"Close","context":[["defer s.Close()",12582],["defer resp.Body.Close()",30994],["res.Body.Close()",30727],["defer f.Close()",23064],["defer session.Close()",17293],["defer conn.Close()",14851],["defer ts.Close()",14767],["defer server.Close()",14598],["f.Close()",12895],["defer ctx.Close()",13525]],"useCount":632246},{"word":"Code","context":[["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["// Code generated by protoc-gen-gogo.",3591],["// Code generated by protoc-gen-go.",3589],["Code:   res.StatusCode,",24618],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// Generic AWS error with Code, Message, and original error (if any)",6209]],"useCount":212509},{"word":"Command","context":[["Run: func(cmd *cobra.Command, args []string) {",7815],["app.Commands = []cli.Command{",2042],["cmd := &cobra.Command{",5761],["if in.Command != nil {",2886],["out.Command = nil",2784],["out.Command = make([]string, len(in.Command))",2369],["out.Command = make([]string, len(in.Command))",2369],["out.Command[i] = in.Command[i]",2369],["for i := range in.Command {",2369],["out.Command[i] = in.Command[i]",2369]],"useCount":202755},{"word":"Config","context":[["Config: map[string]interface{}{",3335],["config: Config{",2509],["Config: config,",1253],["Config:     &docker.Config{},",1317],["Config:     &docker.Config{},",1317],["Config: &docker.Config{",1644],["Config: &docker.Config{",1644],["// aws.Config parameter to add your extra config.",2272],["config := meta.(*Config)",2395],["type Config struct {",11935]],"useCount":289904},{"word":"Conn","context":[["Conn: c,",350],["conn, _ := db.Conn()",405],["func (c *Conn) Close() error {",417],["TestOnBorrow: func(c redis.Conn, t time.Time) error {",419],["Dial: func() (redis.Conn, error) {",542],["conn net.Conn",733],["var conn net.Conn",773],["type Conn struct {",1259],["conn, err := db.Conn()",2262],["net.Conn",1674]],"useCount":65410},{"word":"Container","context":[["out.Container = in.Container",2315],["Containers: []api.Container{",18714],["testContainer: api.Container{",943],["out.Container = in.Container",2315],["container: &api.Container{",2149],["type Container struct {",2128],["Containers: []api.Container{{",848],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["Containers: []*kubecontainer.Container{",2335],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745]],"useCount":173418},{"word":"Containers","context":[["out.Containers = nil",1095],["for _, container := range spec.Containers {",805],["Containers: []api.Container{{",848],["Containers: []api.Container{",18714],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745],["Containers: []*kubecontainer.Container{",2335],["for i := range in.Containers {",898],["if in.Containers != nil {",1113],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["for _, container := range pod.Spec.Containers {",2060]],"useCount":83730},{"word":"Contains","context":[["if !strings.Contains(out, ipTablesSearchString) {",461],["if !strings.Contains(out, expected) {",668],["if strings.Contains(err.Error(), \"connection refused\") {",505],["if err == nil || !strings.Contains(err.Error(), want) {",539],["if !strings.Contains(out, \"from Dockerfile\") {",576],["if !strings.Contains(out, \"test2267\") {",636],["c.Assert(out, checker.Contains, expected)",727],["// Contains the result of a successful invocation of the following actions:",1010],["if _, err := buildImageFromContext(name, ctx, true); err == nil || !strings.Contains(err.Error(), expected) {",1064],["if strings.Contains(err.Error(), fmt.Sprintf(",1280]],"useCount":119706},{"word":"Content","context":[["w.Header().Add(\"Content-Type\", \"application/json\")",1637],["w.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")",1868],["req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",1373],["req.Header.Set(\"Content-Type\", \"application/json\")",3191],["reqHeaders.Set(\"Content-Type\", \"application/json\")",4904],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["req.Header.Set(\"Content-Type\", ctype)",17612],["w.Header().Set(\"Content-Type\", \"application/vnd.docker.plugins.v1+json\")",1232],["req.Header.Add(\"Content-Type\", \"application/json\")",1212],["w.Header().Set(\"Content-Type\", \"text/plain\")",1154]],"useCount":134088},{"word":"Context","context":[["// Context sets the context to be used in this call's Do method.",4699],["ctx context.Context,",3098],["// The provided context supersedes any context provided to the Context method.",2234],["type Context struct {",2112],["context_      context.Context",1895],["// Context sets the context to be used in this call's Do method. Any",22537],["ctx_         context.Context",9933],["ctx_       context.Context",6867],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["Action: func(c *cli.Context) {",4387]],"useCount":302145},{"word":"Convert","context":[["if err := s.Convert(&in.ListMeta, &out.ListMeta, 0); err != nil {",2491],["if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {",2056],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["if err := retconv.Convert(javabind.ObjectRef(jret)); err != nil {",7624],["if err := s.Convert(&in.Items[i], &out.Items[i], 0); err != nil {",1390],["if err := s.Convert(&in.TypeMeta, &out.ObjectMeta, 0); err != nil {",738],["if err := s.Convert(&in.Port, &out.Port, 0); err != nil {",704],["if err := s.Convert(&val, &newVal, 0); err != nil {",3612],["if err := conv_a.Convert(a); err != nil {",6009],["if err := s.Convert(&in.Status, &out.Status, 0); err != nil {",688]],"useCount":74257},{"word":"Create","context":[["f, err := os.Create(filename)",478],["func (d *Driver) Create() error {",438],["_, err := podClient.Create(pod)",459],["// Create the register request",468],["testTar, err := os.Create(filepath.Join(tmpDir, \"test.tar\"))",486],["// Create a new parameter struct",537],["_, err := c.Pods(ns).Create(&api.Pod{",537],["f, err := os.Create(path)",713],["// Create pod infra container.",838],["// Create container.",1098]],"useCount":155525},{"word":"DB","context":[["admindb := session.DB(\"admin\")",816],["coll := session.DB(\"mydb\").C(\"mycoll\")",6299],["queryDb:  \"%DB%\",",332],["type DB struct {",898],["func (db *DB) Close() error {",292],["var db *sql.DB",551],["db *sql.DB",456],["db := session.DB(\"mydb\")",631],["mydb := session.DB(\"mydb\")",362],["db *DB",364]],"useCount":98728},{"word":"DO","context":[["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// Automatically generated by MockGen. DO NOT EDIT!",496],["// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING",590],["// Auto-generated - DO NOT EDIT",611],["// Created by cgo -godefs - DO NOT EDIT",690],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// DO NOT EDIT.",887],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT!",8164],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387]],"useCount":83988},{"word":"Data","context":[["team = Client.Must(Client.CreateTeam(team)).Data.(*model.Team)",797],["req.Data = output",54229],["Data: map[string]interface{}{",4008],["Data: map[string][]byte{",1558],["fakeClient.Data[key] = tools.EtcdResponseWithError{",1556],["if in.Data != nil {",1361],["out.Data = nil",1345],["Data:    map[string]interface{}{},",1210],["type Data struct {",1003],["Data []byte",840]],"useCount":238328},{"word":"DecSendContainerState","context":[["z.DecSendContainerState(codecSelfer_containerArrayElem1234)",58067],["z.DecSendContainerState(codecSelfer_containerArrayEnd1234)",67764],["z.DecSendContainerState(codecSelfer_containerMapEnd1234)",19506],["z.DecSendContainerState(codecSelfer_containerMapKey1234)",9921],["z.DecSendContainerState(codecSelfer_containerMapValue1234)",9921],["z.DecSendContainerState(codecSelfer_containerArrayEnd1819)",180],["z.DecSendContainerState(codecSelfer_containerArrayElem1819)",156],["z.DecSendContainerState(codecSelfer_containerArrayEnd9225)",110],["z.DecSendContainerState(codecSelfer_containerArrayElem9225)",98],["z.DecSendContainerState(codecSelfer_containerArrayEnd6482)",75]],"useCount":166519},{"word":"Decode","context":[["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["if err := json.NewDecoder(res.Body).Decode(ret); err != nil {",1930],["if err := self.codec.Decode(req.Params, &args); err != nil {",629],["err := d.Decode(&v)",472],["// Decode from wire format.",455],["json.NewDecoder(r.Body).Decode(v)",418],["if err := json.NewDecoder(authJson).Decode(authConfig); err != nil {",408],["if err := json.NewDecoder(r.Body).Decode(&req); err != nil {",338],["err := json.NewDecoder(recorder.Body).Decode(&got)",347]],"useCount":108092},{"word":"DeepEqual","context":[["if !reflect.DeepEqual(actual, expected) {",2743],["if !reflect.DeepEqual(got, want) {",2749],["if !reflect.DeepEqual(expected, actual) {",1705],["if api.Semantic.DeepEqual(old, cur) {",418],["if !reflect.DeepEqual(err, expected) {",861],["if !reflect.DeepEqual(expected, result) {",798],["if !reflect.DeepEqual(result, expected) {",580],["if !reflect.DeepEqual(got, expected) {",762],["if !reflect.DeepEqual(want, got) {",636],["if !reflect.DeepEqual(goth, wanth) {",633]],"useCount":92958},{"word":"Default","context":[["Default:     \"\",",732],["APIVersion: testapi.Default.GroupVersion().String(),",996],["// Default: false",949],["Default:  true,",719],["// Default: true",714],["// Default: None",2044],["// Default: 100",1468],["// Optional: Default to false.",1165],["Default:  false,",1094],["Default:      nil,",1059]],"useCount":84259},{"word":"DefaultingInterface","context":[["func (s *scope) DefaultingInterface(inType reflect.Type) (interface{}, bool) {",18],["DefaultingInterface(inType reflect.Type) (interface{}, bool)",18],["getStmt := \"if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {\\n\"",31],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718]],"useCount":62785},{"word":"Delete","context":[["if err := n.Delete(); err != nil {",403],["return c.client.Delete().",1898],["podClient.Delete(pod.Name, api.NewDeleteOptions(0))",419],["c.Delete()",436],["// Delete",497],["// DeleteSender sends the Delete request. The method will close the",503],["// DeleteResponder handles the response to the Delete request. The method always",503],["// DeletePreparer prepares the Delete request.",503],["Delete(name string) error",629],["Delete(name string, options *api.DeleteOptions) error",809]],"useCount":97663},{"word":"Description","context":[["Description string `json:\"description\"`",1325],["Description *string `locationName:\"description\" type:\"string\"`",1836],["Description: `",990],["Description *string `type:\"string\"`",2344],["Description: ``,",3261],["Description string",3489],["Description string `json:\"description,omitempty\"`",5884],["out.Description = in.Description",910],["out.Description = in.Description",910],["// Description:",754]],"useCount":134148},{"word":"Do","context":[["Do()",2334],["return c.s.client.Do(req)",25977],["res, err := c.s.client.Do(req)",25048],["// Context sets the context to be used in this call's Do method. Any",22537],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["// error from Do is the result of In-None-Match.",12114],["response, err := client.Do(request)",3234],["// Context sets the context to be used in this call's Do method.",4699],["resp, err := client.Do(req)",4958],["Do().",9727]],"useCount":311361},{"word":"DockerSuite","context":[["func (s *DockerSuite) TestRunEchoNamedContainer(c *check.C) {",156],["func (s *DockerSuite) TestRunNoDupVolumes(c *check.C) {",156],["func (s *DockerSuite) TestRunCapDropCannotMknodLowerCase(c *check.C) {",156],["func (s *DockerSuite) TestRunCapAddALLDropNetAdminCanDownInterface(c *check.C) {",156],["func (s *DockerSuite) TestRunWorkdirExistsAndIsFile(c *check.C) {",156],["func (s *DockerSuite) TestRunContainerWithRmFlagCannotStartContainer(c *check.C) {",156],["ds: &DockerSuite{},",310],["func (s *DockerSuite) TestRunAttachStdOutOnlyTTYMode(c *check.C) {",156],["func (s *DockerSuite) TestRunLeakyFileDescriptors(c *check.C) {",156],["func (s *DockerSuite) TestRunModeIpcContainerNotExists(c *check.C) {",156]],"useCount":67539},{"word":"Domain","context":[["Domain:    \"Images-na.ssl-images-amazon.com\",",409],["Domain:    \"cloudfront.net\",",25375],["Domain       string `json:\"domain,omitempty\"`",2016],["Domain:    \"www.cloudfront.net\",",1740],["Domain string `json:\"domain,omitempty\"`",558],["Domain      string `json:\"domain,omitempty\"`",448],["Domain                string            `json:\"domain,omitempty\"`",445],["Domain:    \"www.ksmobile.com\",",428],["Domain            string   `json:\"domain,omitempty\"`",355],["Domain string",327]],"useCount":63125},{"word":"Done","context":[["defer wg.Done()",15771],["wg.Done()",12239],["defer group.Done()",784],["s.wg.Done()",621],["defer s.wg.Done()",858],["case <-ctx.Done():",6555],["}(ctx.Done(), cn.CloseNotify())",600],["defer wait.Done()",531],["<-ctx.Done()",552],["defer w.tomb.Done()",563]],"useCount":69534},{"word":"Duration","context":[["Duration time.Duration",452],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Duration\"),",2091],["Duration time.Duration",452],["time.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))",1469],["timeout time.Duration",1164],["Timeout time.Duration",986],["case time.Duration:",813],["interval time.Duration",571],["var _ time.Duration",995],["Interval time.Duration",469]],"useCount":145916},{"word":"EDIT","context":[["// Automatically generated by MockGen. DO NOT EDIT!",496],["// Created by cgo -godefs - DO NOT EDIT",690],["// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING",590],["// Auto-generated - DO NOT EDIT",611],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// DO NOT EDIT.",887],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// DO NOT EDIT!",8164],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582]],"useCount":81243},{"word":"EOF","context":[["if err == io.EOF {",16583],["EOF",1158],["return io.EOF",1468],["if err != io.EOF {",4489],["err = io.EOF",1478],["return 0, io.EOF",2834],["if err != nil && err != io.EOF {",4146],["return nil, io.EOF",1245],["if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {",1066],["// EOF",1023]],"useCount":83963},{"word":"Elem","context":[["value = value.Elem()",412],["typ = typ.Elem()",510],["val = val.Elem()",687],["Elem: &Resource{",760],["rv = rv.Elem()",497],["Elem: &schema.Resource{",3192],["Elem:     &Schema{Type: TypeInt},",1276],["t = t.Elem()",1504],["Elem:     &schema.Schema{Type: schema.TypeString},",2931],["v = v.Elem()",2390]],"useCount":68684},{"word":"EncBinary","context":[["yym15 := z.EncBinary()",1209],["yym1 := z.EncBinary()",4760],["yysep2 := !z.EncBinary()",4300],["yym5 := z.EncBinary()",3063],["yym7 := z.EncBinary()",2319],["yym4 := z.EncBinary()",2253],["yym10 := z.EncBinary()",1983],["yym8 := z.EncBinary()",1745],["yym13 := z.EncBinary()",1506],["yym16 := z.EncBinary()",1437]],"useCount":107698},{"word":"EncSendContainerState","context":[["z.EncSendContainerState(codecSelfer_containerArrayElem1234)",51551],["z.EncSendContainerState(codecSelfer_containerMapKey1819)",132],["z.EncSendContainerState(codecSelfer_containerArrayElem9225)",91],["z.EncSendContainerState(codecSelfer_containerMapKey1234)",48482],["z.EncSendContainerState(codecSelfer_containerMapValue1819)",132],["z.EncSendContainerState(codecSelfer_containerMapValue1234)",48482],["z.EncSendContainerState(codecSelfer_containerArrayElem1819)",144],["z.EncSendContainerState(codecSelfer_containerMapEnd1234)",9809],["z.EncSendContainerState(codecSelfer_containerArrayEnd1234)",12878],["z.EncSendContainerState(codecSelfer_containerMapValue9225)",86]],"useCount":172547},{"word":"Encode","context":[["\"subscriptionId\": autorest.Encode(\"path\", client.SubscriptionID),",403],["urls += \"?\" + c.urlParams_.Encode()",23003],["// Encode to wire format.",385],["urls += \"?\" + params.Encode()",35563],["body, err := codec.Encode(item)",468],["u.RawQuery = q.Encode()",547],["uri += \"?\" + q.Encode()",619],["\"name\":              autorest.Encode(\"path\", name),",1208],["\"resourceGroupName\": autorest.Encode(\"path\", resourceGroupName),",2634],["\"subscriptionId\":    autorest.Encode(\"path\", client.SubscriptionID),",2736]],"useCount":122958},{"word":"EncodeString","context":[["r.EncodeString(codecSelferC_UTF81234, string(\"metadata\"))",3900],["r.EncodeString(codecSelferC_UTF81234, string(\"apiVersion\"))",4865],["r.EncodeString(codecSelferC_UTF81234, string(\"kind\"))",4854],["r.EncodeString(codecSelferC_UTF81234, string(\"items\"))",1977],["r.EncodeString(codecSelferC_UTF81234, string(x.Name))",1636],["r.EncodeString(codecSelferC_UTF81234, \"\")",14602],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["r.EncodeString(codecSelferC_UTF81234, string(x.Kind))",9708],["r.EncodeString(codecSelferC_UTF81234, string(\"status\"))",1583],["r.EncodeString(codecSelferC_UTF81234, string(x))",1560]],"useCount":116889},{"word":"Equal","context":[["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["if !p.Equal(msg) {",19058],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["Equal(t, errs, nil)",2843],["assert.Equal(t, err, nil)",3070],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", this.Field1, that1.Field1)",1720],["assert.Equal(t,",1267],["t.Fatalf(\"seed = %d, %#v !Json Equal %#v\", seed, msg, p)",2604],["t.Fatalf(\"%#v !Face Equal %#v\", msg, p)",1945],["assert.Equal(t, nil, err)",2349]],"useCount":359294},{"word":"Equals","context":[["c.Assert(ok, Equals, false)",1067],["c.Assert(recorder.Code, check.Equals, http.StatusOK)",1527],["c.Assert(req.Header[\"Date\"], Not(Equals), \"\")",990],["c.Assert(response.StatusCode, Equals, http.StatusOK)",1480],["c.Assert(err, Equals, nil)",1504],["\"NoUppercaseOrSpecialCharsLike=Equals\": \"bar\",",1123],["c.Assert(err, Equals, mgo.ErrNotFound)",1182],["c.Assert(req.Method, Equals, \"GET\")",1226],["c.Assert(ok, Equals, true)",3112],["c.Assert(ok, check.Equals, true)",2380]],"useCount":236673},{"word":"Err","context":[["if err := scanner.Err(); err != nil {",2300],["c.Err.StatusCode = http.StatusForbidden",1282],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["if r.Err != nil {",1296],["return ctx.Err()",1349],["Err error",1613],["Err: true,",1703],["Err: false,",2712],["c.Err = result.Err",2829],["c.Err = result.Err",2829]],"useCount":154757},{"word":"ErrUnexpectedEOF","context":[["case io.ErrUnexpectedEOF:",122],["p.P(`return `, p.ioPkg.Use(), `.ErrUnexpectedEOF`)",126],["return nil, io.ErrUnexpectedEOF",246],["if err != io.ErrUnexpectedEOF {",267],["if err == io.ErrUnexpectedEOF {",431],["return io1.ErrUnexpectedEOF",1480],["err = io.ErrUnexpectedEOF",1840],["return 0, io.ErrUnexpectedEOF",8985],["return io.ErrUnexpectedEOF",285098],["if err == io.EOF || err == io.ErrUnexpectedEOF {",271]],"useCount":302583},{"word":"Error","context":[["// Print the error, cast err to awserr.Error to get the Code and",19219],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["return nil, &googleapi.Error{",24591],["fmt.Println(err.Error())",36001],["// error which satisfies the awserr.Error interface.",11875],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["t.Error(err)",70002],["if awsErr, ok := err.(awserr.Error); ok {",14078]],"useCount":1038266},{"word":"ErrorIsNil","context":[["assert.ErrorIsNil(t, err)",120],["c.Assert(env.Destroy(), jc.ErrorIsNil)",96],["c.Assert(env.Refresh(), jc.ErrorIsNil)",72],["c.Assert(err, jc.ErrorIsNil, gc.Commentf(\"body: %s\", body))",60],["c.Assert(err, jc.ErrorIsNil)",135421],["c.Check(err, jc.ErrorIsNil)",4766],["go func() { c.Check(a.Run(nil), jc.ErrorIsNil) }()",397],["defer func() { c.Check(a.Stop(), jc.ErrorIsNil) }()",388],["if !c.Check(err, jc.ErrorIsNil) {",166],["c.Check(a.Run(nil), jc.ErrorIsNil)",115]],"useCount":142779},{"word":"Errorf","context":[["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["return nil, fmt.Errorf(",2987],["return fmt.Errorf(\"Missing parameter\")",3920],["t.Errorf(\"expected success: %v\", errs)",4335],["t.Errorf(\"Unexpected error: %v\", err)",4881],["var _ = fmt.Errorf",5091],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["return fmt.Errorf(",7005],["return fmt.Errorf(\"that == nil && this != nil\")",10119],["t.Errorf(\"unexpected error: %v\", err)",26845]],"useCount":1550138},{"word":"Exit","context":[["os.Exit(m.Run())",1112],["os.Exit(exitCode)",596],["os.Exit(3)",604],["os.Exit(-1)",3461],["os.Exit(2)",8069],["os.Exit(0)",12708],["defer nsqd.Exit()",1440],["Eventually(session).Should(gexec.Exit(0))",1260],["os.Exit(1)",55587],["os.Exit(code)",742]],"useCount":103954},{"word":"Expect","context":[["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["Expect(err).ShouldNot(HaveOccurred())",1264],["Expect(sAdd.Err()).NotTo(HaveOccurred())",1249],["Expect(ui.Outputs).To(ContainSubstrings(",3675],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["Expect(err).To(BeNil())",4880],["Expect(err).To(HaveOccurred())",11730],["Expect(err).ToNot(HaveOccurred())",23786],["Expect(err).NotTo(HaveOccurred())",60899],["Expect(ui.Outputs()).To(ContainSubstrings(",1652]],"useCount":240615},{"word":"Expected","context":[["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["t.Errorf(\"Expected true\")",742],["t.Errorf(\"Expected success, got: %v\", err)",1047],["// \tt.Errorf(\"Expected '<nil>' Got '%s'\", err)",1428],["t.Errorf(\"Expected %v, got %v\", e, a)",1539],["// \tt.Errorf(\"Expected '%d' Got '%d'\", expected, len(rules))",2142],["t.Errorf(\"Expected '%s' Got '%s'\", day, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, rule)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", month, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, r)",2151]],"useCount":158608},{"word":"FILE","context":[["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh",180],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["{\"FILE\", \"/dir1/file\"},",164],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["// THIS FILE IS AUTO-GENERATED",141],["// NOTE: THIS FILE WAS PRODUCED BY THE",142],["// FILE GENERATED BY BSONGEN.",113]],"useCount":67846},{"word":"FROM","context":[["dockerfile := fmt.Sprintf(`FROM busybox",1135],["ctx, err := fakeContext(`FROM scratch",1040],["fmt.Sprintf(`FROM scratch",932],["ctx, err := fakeContext(fmt.Sprintf(`FROM busybox",837],["FROM",1293],["FROM busybox",6998],["FROM scratch",1492],["`FROM scratch",2417],["ctx, err := fakeContext(`FROM busybox",3613],["`FROM busybox",5257]],"useCount":96512},{"word":"Failed","context":[["glog.Fatalf(\"Failed to create pod: %v, %v\", pod, err)",440],["t.Errorf(\"Failed to make a new Cleaner: %v\", err)",460],["Failf(\"Failed to create pod: %v\", err)",546],["PodFailed PodPhase = \"Failed\"",584],["t.Fatal(\"Failed to open database:\", err)",606],["t.Errorf(\"Failed to make a new Builder: %v\", err)",616],["cmd.ui.Failed(apiErr.Error())",791],["cmd.ui.Failed(err.Error())",838],["if t.Failed() {",852],["VolumeFailed PersistentVolumePhase = \"Failed\"",453]],"useCount":125390},{"word":"Fatal","context":[["t.Fatal(err.Error())",2975],["c.Fatal(out, err)",3059],["t.Fatal(err)",320011],["c.Fatal(err)",59126],["log.Fatal(err)",57914],["b.Fatal(err)",12630],["t.Fatal(pErr)",5297],["c.Fatal(err, out)",4659],["t.Fatal(err, out)",3858],["t.Fatal()",3333]],"useCount":652641},{"word":"Fatalf","context":[["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"Unexpected error: %v\", err)",6487],["t.Fatalf(\"%#v !VerboseProto %#v, since %v\", msg, p, err)",4373],["t.Fatalf(\"%#v !Proto %#v\", msg, p)",3759],["t.Fatalf(\"test init failed: %s\", err)",3640],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"err: %v\", err)",35496],["t.Fatalf(\"err: %s\", err)",35495]],"useCount":794006},{"word":"Field","context":[["&config.Field{",2872],["&element.Field{",1971],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"name\"),",1846],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"Field1\"),",1842],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"key\"),",1505],["Fields: []*influxql.Field{",1055],["type Field struct {",830],["Fields:     []*influxql.Field{{Expr: &influxql.Wildcard{}}},",661],["mproto.Field{",644],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"deprecated\"),",606]],"useCount":132010},{"word":"Field1","context":[["if *this.Field1 != *that1.Field1 {",2873],["} else if that1.Field1 != nil {",2873],["if *this.Field1 != *that1.Field1 {",2873],["if this.Field1 != nil && that1.Field1 != nil {",2873],["} else if this.Field1 != nil {",2873],["if this.Field1 != nil && that1.Field1 != nil {",2873],["if m.Field1 != nil {",1848],["Field: []*descriptor.FieldDescriptorProto{{Name: func(v string) *string { return &v }(\"Field1\"),",1842],["if this.Field1 != nil {",1809],["return this.Field1",1728]],"useCount":79535},{"word":"Field2","context":[["if this.Field2 != nil {",1609],["if len(this.Field2) != len(that1.Field2) {",1792],["if len(this.Field2) != len(that1.Field2) {",1792],["for i := range this.Field2 {",1798],["} else if this.Field2 != nil {",2021],["if *this.Field2 != *that1.Field2 {",2021],["if *this.Field2 != *that1.Field2 {",2021],["if this.Field2 != nil && that1.Field2 != nil {",2021],["} else if that1.Field2 != nil {",2021],["if this.Field2 != nil && that1.Field2 != nil {",2021]],"useCount":66872},{"word":"FieldDescriptorProto_Label","context":[["Label:      func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",1176],["Label:      func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",1176],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:        func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",5450],["Label:        func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",5450],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",3364],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",3364]],"useCount":107542},{"word":"FieldDescriptorProto_Type","context":[["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {",7090],["}(1), Type: func(v google_protobuf.FieldDescriptorProto_Type) *google_protobuf.FieldDescriptorProto_Type {",7090],["Type:         func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",4085],["Type:         func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",4085]],"useCount":127521},{"word":"Fields","context":[["// Fields allows partial responses to be retrieved. See",23003],["Fields: graphql.Fields{",941],["Fields: graphql.Fields{",941],["Fields: []*influxql.Field{",1055],["logrus.WithFields(logrus.Fields{",1059],["models.Fields{",1092],["Fields: map[string]*framework.FieldSchema{",1271],["log.WithFields(logrus.Fields{",2648],["log.WithFields(log.Fields{",6101],["// Fields allows partial responses to be retrieved.",33360]],"useCount":170578},{"word":"File","context":[["File string",610],["*os.File",416],["* File Generated by enaml generator",1486],["var f *os.File",1148],["//     \"$ref\": \"File\"",1058],["var file *os.File",703],["// File",648],["type File struct {",2054],["// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",633],["fstestutil.File",453]],"useCount":70071},{"word":"Flags","context":[["cmd.Flags().Set(\"output\", \"name\")",563],["cmd.Flags().Set(\"cascade\", \"false\")",444],["Flags     int32",475],["// referencing the cmd.Flags()",484],["{{range .Flags}}{{.}}",538],["Flags:",581],["Flags: []Flag{",593],["flags := cmd.Flags()",920],["app.Flags = []cli.Flag{",1897],["Flags: []cli.Flag{",7458]],"useCount":63213},{"word":"For","context":[["// For example:",2452],["For more about specifying packages, see 'go help packages'.",1006],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// For example if you run go-bindata on data/... and data contains the",699],["// Ex. For /dev/sda1, this field is \"1\", for /dev/sda, this field is 0 or empty.",627],["// For more information about ARNs, go to Amazon Resource Names (ARNs) and",608],["// For example, given:",596],["// events.  For the PostStart and PreStop lifecycle handlers, management of the container blocks",536],["// should contain information to identify the sub-object. For example, if the object",490]],"useCount":145951},{"word":"ForceSendFields","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["ForceSendFields []string `json:\"-\"`",39509],["// ForceSendFields is a list of field names (e.g. \"Etag\") to",1561],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["// ForceSendFields is a list of field names (e.g.",1171],["// ForceSendFields is a list of field names (e.g. \"Id\") to",1195],["// ForceSendFields is a list of field names (e.g. \"Kind\") to",1476]],"useCount":152510},{"word":"Format","context":[["Format: \"\",",5183],["// Format formats the node.",548],["Format:      \"\",",28082],["Format:      \"int32\",",9626],["Format string",371],["Format:      \"byte\",",396],["Format:      \"int64\",",1709],["// Format implements the NodeFormatter interface.",1170],["Format:      errorsBody,",566],["Format string `json:\"format,omitempty\"`",549]],"useCount":82518},{"word":"Fprintf","context":[["fmt.Fprintf(w, \"null\")",511],["fmt.Fprintf(os.Stderr, \"Usage of %s:\\n\", os.Args[0])",533],["fmt.Fprintf(w, \"\\n\")",636],["fmt.Fprintf(cli.out, \"%s\\n\", name)",695],["fmt.Fprintf(out, \"\\n\")",878],["fmt.Fprintf(w, `",885],["fmt.Fprintf(os.Stderr, \"%v\\n\", err)",998],["fmt.Fprintf(cli.err, \"%s\\n\", err)",1250],["fmt.Fprintf(os.Stderr, \"Usage:\\n\\t%s\\n\", usageBits)",1957],["if _, err := fmt.Fprintf(w, \"%s\\t\", namespace); err != nil {",2228]],"useCount":158190},{"word":"From","context":[["p.From.Offset = 0",595],["r := int(p.From.Reg)",563],["From: kapi.ObjectReference{",797],["out.From = nil",851],["if newVal, err := c.DeepCopy(in.From); err != nil {",875],["if in.From != nil {",902],["p.From.Type = obj.TYPE_CONST",1138],["p.From.Type = obj.TYPE_MEM",1433],["p.From.Type = obj.TYPE_REG",1543],["From: &kapi.ObjectReference{",2099]],"useCount":82959},{"word":"GENERATED","context":[["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["// AUTO-GENERATED CODE. DO NOT EDIT.",171],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh",180],["// AUTO-GENERATED FUNCTIONS START HERE",569],["// AUTO-GENERATED FUNCTIONS END HERE",569],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649]],"useCount":69598},{"word":"GET","context":[["req, err := http.NewRequest(\"GET\", url, nil)",1508],["req, err := s.client.NewRequest(\"GET\", u, nil)",1695],["if r.Method != \"GET\" {",1744],["\"GET\",",1965],["testMethod(t, r, \"GET\")",2236],["case \"GET\":",2848],["HTTPMethod: \"GET\",",5113],["Method: \"GET\",",6521],["//   \"httpMethod\": \"GET\",",28210],["req, _ := http.NewRequest(\"GET\", urls, body)",26055]],"useCount":193854},{"word":"Get","context":[["loc := res.Header.Get(\"Location\")",853],["return c.client.Get().",1029],["deployment, err := c.Extensions().Deployments(ns).Get(deploymentName)",1249],["name := d.Get(\"name\").(string)",1300],["ui := state.Get(\"ui\").(packer.Ui)",1512],["err = c.client.Get().",1940],["defer c.PageToken(c.urlParams_.Get(\"pageToken\")) // reset paging to original point",2234],["if ret.Get(0) != nil {",2138],["return &Result{r.Header.Get(HEADER_REQUEST_ID),",2607],["resp, err := http.Get(url)",1999]],"useCount":410510},{"word":"Go","context":[["// Go MySQL Driver - A MySQL-Driver for Go's database/sql package",230],["* Minio Go Library for Amazon S3 Compatible Cloud Storage (C) 2015 Minio, Inc.",253],["// Go MySQL Driver - A MySQL-Driver for Go's database/sql package",230],["// -*- Mode: Go; indent-tabs-mode: t -*-",1376],["// Go support for Protocol Buffers - Google's data interchange format",1229],["// mgo - MongoDB driver for Go",625],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["// goamz - Go packages to interact with the Amazon Web Services.",347],["// support only Go >= 1.4.",255],["errCh = promise.Go(func() error {",211]],"useCount":71808},{"word":"GoString","context":[["s1 := p.GoString()",3251],["s = append(s, \"Right: \"+strings.Replace(this.Right.GoString(), `&`, ``, 1)+\",\\n\")",177],["s = append(s, \"Left: \"+strings.Replace(this.Left.GoString(), `&`, ``, 1)+\",\\n\")",177],["return C.GoString((*C.char)(c))",194],["return__ = C.GoString((*C.char)(unsafe.Pointer(__cgo__return__)))",196],["__err__ = errors.New(C.GoString((*C.char)(unsafe.Pointer(__cgo_error__.message))))",297],["func (s Tag) GoString() string {",476],["ss = append(ss, strconv.Itoa(k)+\": \"+e[int32(k)].GoString())",925],["t.Fatalf(\"GoString want %v got %v\", s1, s2)",3251],["// GoString returns the string representation",113945]],"useCount":243694},{"word":"GoogleCloudPlatform","context":[["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/types\"",1209],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api/errors\"",1455],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/watch\"",2108],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/fields\"",2585],["kapi \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",2656],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"",2752],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/labels\"",4329],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/runtime\"",4552]],"useCount":69884},{"word":"Got","context":[["t.Errorf(\"Expected '%s' Got '%s'\", month, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, rule)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", day, s)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, r)",2151],["t.Errorf(\"Expected '%s' Got '%s'\", expected, trans.Locale())",718],["t.Fatalf(\"Got error GETing: %v\", err)",744],["t.Fatalf(\"expected pod status %q. Got %q.\", api.PodFailed, status.Phase)",760],["// \tt.Errorf(\"Expected '<nil>' Got '%s'\", err)",1428],["// \tt.Errorf(\"Expected '%d' Got '%d'\", expected, len(rules))",2142]],"useCount":73107},{"word":"HTTP","context":[["x.HTTP.CodecEncodeSelf(e)",500],["// pending HTTP request will be aborted if the provided context is",22537],["// ServerResponse contains the HTTP response code and headers from the",13928],["// Any pending HTTP request will be aborted if the provided context",4780],["// add HTTP headers to the request.",3239],["e, ok := err.(*errors.HTTP)",1258],["if x.HTTP == nil {",1000],["// HTTPGetAction describes an action based on HTTP Get requests.",717],["// Get HTTP response",614],["// Optional: Path to access on the HTTP server.",541]],"useCount":138756},{"word":"Handler","context":[["Handler: s.srv,",587],["Handler: api.Handler{",1621],["type Handler struct {",1714],["Handler: api.Handler{",1621],["PreStop: &api.Handler{",1161],["m.Handler.ServeHTTP(w, req)",913],["// Handler defines a specific action that should be taken",716],["type Handler interface {",792],["Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {",555],["Handler: mux,",555]],"useCount":97405},{"word":"HaveOccurred","context":[["Expect(err).ToNot(HaveOccurred())",23786],["Ω(err).ShouldNot(HaveOccurred())",12297],["Expect(err).NotTo(HaveOccurred())",60899],["Expect(set.Err()).NotTo(HaveOccurred())",1016],["Expect(sAdd.Err()).NotTo(HaveOccurred())",1249],["Expect(err).ShouldNot(HaveOccurred())",1264],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["Expect(err).To(HaveOccurred())",11730],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["Ω(err).Should(HaveOccurred())",2915]],"useCount":138625},{"word":"Header","context":[["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["req.Header = reqHeaders",11905],["req.Header.Set(\"Content-Type\", ctype)",17612],["Header:         res.Header,",24578],["Header:         res.Header,",24578],["Header: res.Header,",24619],["Header: res.Header,",24619],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["reqHeaders := make(http.Header)",11911],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780]],"useCount":512506},{"word":"Host","context":[["// Host name on which the event is generated.",628],["Host     string",676],["Host   string",459],["type Host struct {",477],["client := client.NewOrDie(&client.Config{Host: testServer.URL, Version: testapi.Version()})",496],["out.Host = in.Host",2954],["out.Host = in.Host",2954],["Host: \"machine\",",525],["Host string `json:\"host,omitempty\"`",1166],["Host string",1503]],"useCount":105508},{"word":"ID","context":[["//       \"description\": \"Project ID for this request.\",",2204],["ID = foo",3453],["//       \"description\": \"User profile ID associated with this request.\",",2944],["if rs.Primary.ID == \"\" {",2344],["ID string",2161],["ID: \"foo\",",2032],["ID: \"bar\",",2962],["ID := \"id\"",1380],["// The ID of the instance.",1299],["//       \"description\": \"The ID of the file.\",",1377]],"useCount":550829},{"word":"IP","context":[["// The IP of this endpoint.",594],["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["out.IP = in.IP",1637],["out.IP = in.IP",1637],["Addresses: []api.EndpointAddress{{IP: \"10.10.1.1\"}},",1002],["Addresses: []api.EndpointAddress{{IP: \"127.0.0.1\"}},",705],["var ip net.IP",704],["ip = v.IP",638],["Addresses: []api.EndpointAddress{{IP: \"1.2.3.4\"}},",595],["// EndpointAddress is a tuple that describes single IP address.",594]],"useCount":154463},{"word":"IS","context":[["WHERE a.resource_id = r.resource_id AND a.deleted_at IS NULL",45],["// fmt.Printf(\"IS = Setting [[[%s]]] to %v At: %s\\n\", TkL.Match, TkR.CurValue, com.LF())",51],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["\"IS\",",90],["IF v_jobmon_schema IS NOT NULL THEN",135],["// THIS FILE IS AUTO-GENERATED",141],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh",180],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387]],"useCount":69595},{"word":"Id","context":[["Id string `json:\"id,omitempty\"`",11055],["// ForceSendFields is a list of field names (e.g. \"Id\") to",1195],["resourceMap[rsc.Id] = &rsc",4960],["Id int64 `json:\"id,omitempty,string\"`",1611],["Id uint64 `json:\"id,omitempty,string\"`",1413],["// Id: Unique identifier for the resource; defined by the server (output",1255],["// Id: [Output Only] Unique identifier for the resource; defined by the",1058],["Id:     0,",900],["Id string",834],["if m != nil && m.Id != nil {",614]],"useCount":234613},{"word":"If","context":[["// access properties on the request object before or after sending the request. If",13378],["req.Header.Set(\"If-None-Match\", c.ifNoneMatch_)",4859],["// actually making the request, and provides an error response. If you have",6922],["reqHeaders.Set(\"If-None-Match\", c.ifNoneMatch_)",5123],["// The maximum number of records to include in the response. If more records",1022],["// If 'warn' has a value it means the job is running longer than the configured",1437],["// If one of the conversion functions is malformed, detect it immediately.",1915],["req.Header.Set(\"If-None-Match\", fmt.Sprintf(\"%v\", v))",2132],["// If additional configuration is needed for the client instance use the optional",2272],["// If we have a async client, we need to wait for the async result",2363]],"useCount":479673},{"word":"Image","context":[["Image:   \"gcr.io/google_containers/busybox:1.24\",",807],["Image: \"foo:V1\",",848],["Image: \"foo:V2\",",941],["Image: image,",1067],["type Image struct {",1490],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["out.Image = in.Image",2154],["out.Image = in.Image",2154],["Image: \"image\",",3558],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745]],"useCount":119716},{"word":"In","context":[["// available. In that case, the IsTruncated response element returns true and",494],["// In case of failure or too long waiting time, an error is returned.",500],["// Length of time before health checking is activated.  In seconds.",555],["t.Errorf(\"In test %s, expected %v, got %v\", test.test, test.status, status)",596],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["\"operator\": \"In\",",1675],["g.In()",1775],["p.In()",2917],["// error from Do is the result of In-None-Match.",12114]],"useCount":87215},{"word":"Index","context":[["pixels_ptr = unsafe.Pointer(pixels_v.Index(0).Addr().Pointer())",558],["idxPath := fldPath.Index(i)",1258],["// StartIndex sets the optional parameter \"startIndex\": Index of the",553],["portPath := portsPath.Index(i)",420],["Index     uint16",425],["Index: 0,",450],["Index int",461],["Index: &IndexInfo{",528],["type Index struct {",543],["data_ptr = unsafe.Pointer(data_v.Index(0).Addr().Pointer())",552]],"useCount":107674},{"word":"Info","context":[["Info: mongo.Info{",565],["Info: map[string]api.ContainerStatus{",293],["// Info implements Command.Info.",297],["// Info implements Command.Info.",297],["type Info struct {",1021],["return &cmd.Info{",2169],["glog.Info(\"Starting kubelet main sync loop.\")",299],["glog.Info(message)",328],["Info: mongo.Info{",565],["return &Info{",334]],"useCount":74198},{"word":"Infof","context":[["glog.Infof(\"Starting %s apis\", groupVersion)",339],["glog.V(5).Infof(\"pod default case, pending\")",300],["glog.V(5).Infof(\"pod waiting > 0, pending\")",300],["glog.V(10).Infof(",350],["eventBroadcaster.StartLogging(glog.Infof)",824],["glog.V(4).Infof(\"%v\", err)",356],["glog.Infof(\"Successfully registered node %s\", node.Name)",249],["glog.V(3).Infof(\"Container %+v is dead, but RestartPolicy says that we should restart it.\", container)",249],["glog.V(3).Infof(\"First seen time not recorded for pod %q\", pod.UID)",267],["glog.V(4).Infof(\"Cannot get host IP: %v\", err)",254]],"useCount":130759},{"word":"Int","context":[["return v.Int() == 0",357],["stack.push(new(big.Int))",364],["case *big.Int:",539],["case intstr.Int:",296],["jret, err := jbobject.CallMethod(javabind.GetEnv(), \"hashCode\", javabind.Int)",542],["case Int:",924],["serialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)",288],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["return strconv.Itoa(r.Int() % 10000)",286],["case reflect.Int:",1154]],"useCount":85868},{"word":"Interface","context":[["WatchFunc: func(options api.ListOptions) (watch.Interface, error) {",2695],["client.Interface",3831],["case reflect.Interface:",2140],["pv := reflect.Indirect(rv).Interface()",2042],["type Interface interface {",1231],["// Implements storage.Interface.",1204],["Watch(opts api.ListOptions) (watch.Interface, error)",805],["mounter mount.Interface",721],["WatchFunc: func(resourceVersion string) (watch.Interface, error) {",693],["cloud cloudprovider.Interface,",639]],"useCount":124745},{"word":"Intn","context":[["data[i] = byte(popr.Intn(256))",6917],["l := r.Intn(5)",1125],["wire := r.Intn(4)",1125],["dAtA[i] = byte(popr.Intn(256))",1663],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["littlefuzz = append(littlefuzz, byte(popr.Intn(256)))",2720],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["if !easy && r.Intn(10) != 0 {",7528],["if r.Intn(2) == 0 {",14164],["if r.Intn(10) != 0 {",25630]],"useCount":111596},{"word":"IsNil","context":[["c.Assert(err, checker.IsNil)",16743],["c.Assert(err, gc.IsNil)",75298],["c.Check(err, gc.IsNil)",2043],["if v.IsNil() {",2111],["c.Check(err, IsNil)",2456],["if rv.IsNil() {",2691],["c.Assert(err, check.IsNil)",82873],["c.Assert(err, test.IsNil)",3451],["c.Assert(err, IsNil)",104368],["c.Assert(err, check.IsNil, check.Commentf(out))",3044]],"useCount":366370},{"word":"It","context":[["// It returns an error if the asset could not be found or",1384],["It has these top-level messages:",4689],["// null. It is an error if a field in this list has a non-empty value.",4930],["It is generated from these files:",4689],["It(\"returns an error\", func() {",3968],["// It is not safe to mutate any of the client's properties though.",2270],["It(\"should error\", func() {",1030],["It(\"should return an error\", func() {",1264],["// manage many different YouTube channels. It allows content owners to",1127],["It(\"returns the error\", func() {",1113]],"useCount":269420},{"word":"Items","context":[["if x.Items == nil {",3954],["in, out := &in.Items, &out.Items",5468],["Items: &spec.SchemaOrArray{",9724],["for i := range in.Items {",16680],["out.Items = nil",23672],["in, out := &in.Items, &out.Items",5468],["x.Items = nil",3954],["if len(m.Items) > 0 {",3369],["for _, pod := range pods.Items {",3348],["if in.Items != nil {",23966]],"useCount":325649},{"word":"JSON","context":[["c.JSON(",812],["// include in API requests with the JSON null value. By default, fields",819],["req.SetFormat(\"JSON\")",831],["// in API requests with the JSON null value. By default, fields with",1097],["r.JSON(200, &APIResponse{Code: ERROR, Message: err.Error()})",1126],["t.Fatalf(\"marshaling to JSON failed: %v\", err)",1208],["ctx.JSON(200, map[string]interface{}{",778],["// API requests with the JSON null value. By default, fields with empty",1737],["r.JSON(200, &APIResponse{Code: ERROR, Message: \"Unauthorized\"})",795],["// requests with the JSON null value. By default, fields with empty",2096]],"useCount":79481},{"word":"Join","context":[["err = RestoreAssets(dir, filepath.Join(name, child))",496],["return strings.Join(s, \"\")",8387],["if err := ioutil.WriteFile(filepath.Join(tmpDir, \"Dockerfile\"), []byte(dockerfile), 0644); err != nil {",492],["usageBits += \" @\" + strings.Join(pathParams, \"@\")",1597],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["usageBits += \" \" + strings.Join(pathParams, \"/\")",1597],["vv := strings.Join(v.([]string), \",\")",587],["test.write = strings.Join(writes, \"\\n\")",996],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["&Write{data: strings.Join(writes, \"\\n\")},",912]],"useCount":215544},{"word":"Key","context":[["return fmt.Errorf(\"proto: wrong wireType = %d for field Key\", wireType)",1029],["out.Key = in.Key",2253],["Key string `json:\"key,omitempty\"`",1446],["Key   string",1642],["Key          string `json:\"key,omitempty\"`",1941],["if m.Key != nil {",904],["l = len(m.Key)",934],["out.Key = in.Key",2253],["Key string",1384],["Key: key,",981]],"useCount":238346},{"word":"Kind","context":[["x.Kind = \"\"",9708],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["out.Kind = in.Kind",3210],["r.EncodeString(codecSelferC_UTF81234, string(x.Kind))",9708],["x.Kind = string(r.DecodeString())",9708],["out.Kind = in.Kind",3210],["switch v.Kind() {",3093],["Kind: \"DockerImage\",",2046],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["Kind string `json:\"kind,omitempty\"`",30419]],"useCount":246292},{"word":"Label","context":[["type Label struct {",503],["Label: label,",516],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",952],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:   func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",524],["Label:   func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",958],["Label:      func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",1176],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:        func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",5450],["Label:  func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",3364]],"useCount":77963},{"word":"Labels","context":[["Labels: map[string]string{\"bar\": \"foo\"},",843],["out.Labels = nil",1282],["if in.Labels != nil {",1300],["out.Labels = make(map[string]string)",1113],["Labels: labels,",1064],["for key, val := range in.Labels {",1113],["Labels: map[string]string{",9863],["Labels: validSelector,",2325],["out.Labels[key] = val",1113],["Labels: map[string]string{\"foo\": \"baz\"},",1743]],"useCount":108666},{"word":"Left","context":[["t := n.Left.Type",911],["if n.Left != nil {",978],["n = n.Left",452],["walkexpr(&n.Left, init)",874],["l := n.Left",657],["typecheck(&n.Left, Erv)",547],["defaultlit(&n.Left, nil)",384],["if !this.Left.Equal(&that1.Left) {",384],["if !this.Left.Equal(&that1.Left) {",384],["n.Left = nil",350]],"useCount":63292},{"word":"Len","context":[["if invalidParams.Len() > 0 {",18392],["Len() int",1292],["Len    uint8",617],["for i := 0; i < v.Len(); i++ {",962],["if buf.Len() > 0 {",825],["l := s.Len()",587],["if vr.Len() == -1 {",616],["return v.Len() == 0",417],["for i := 0; i < value.Len(); i++ {",326],["Len   uint32",363]],"useCount":102129},{"word":"List","context":[["// ListSender sends the List request. The method will close the",644],["pods, err := c.Pods(ns).List(options)",491],["nodes, err := c.Nodes().List(api.ListOptions{})",500],["for l := n.List; l != nil; l = l.Next {",594],["for _, m := range s.Store.List() {",758],["// ListResponder handles the response to the List request. The method always",644],["// ListPreparer prepares the List request.",644],["type List struct {",1253],["return s.List.SetStruct(i, v.Struct)",407],["for _, container := range daemon.List() {",431]],"useCount":179700},{"word":"ListMeta","context":[["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {",4658],["if err := deepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {",2382],["if err := deepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {",2382],["x.ListMeta = pkg1_unversioned.ListMeta{}",2630],["if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {",4658],["if err := s.Convert(&in.ListMeta, &out.ListMeta, 0); err != nil {",2491],["x.ListMeta = pkg1_unversioned.ListMeta{}",2630],["if newVal, err := c.DeepCopy(in.ListMeta); err != nil {",2640],["if err := s.Convert(&in.ListMeta, &out.ListMeta, 0); err != nil {",2491]],"useCount":90068},{"word":"Lock","context":[["s.mu.Lock()",10333],["f.Lock()",3638],["s.Lock()",3498],["p.mu.Lock()",2988],["c.mu.Lock()",5243],["c.Lock()",7772],["mu.Lock()",3715],["n.Lock()",3742],["r.mu.Lock()",3787],["oprw.Lock()",6518]],"useCount":267360},{"word":"Logf","context":[["c.Logf(\"test %d\", i)",1174],["Logf(\"RC %s was already deleted: %v\", name, err)",720],["c.Logf(\"test %d: %s\", i, test.about)",599],["t.Logf(\"case %v\", r)",1588],["t.Logf(\"Running %d tests\", len(tests))",1686],["t.Logf(\"SKIP:: %s\", query.name)",3861],["Logf(\"ReplicaSet %s was already deleted: %v\", name, err)",405],["Logf(\"%-[1]*[2]s %-[3]*[4]s %-[5]*[6]s %-[7]*[8]s %[9]s\",",382],["t.Logf(\"%#v vs %#v\", test.oldNamespace.ObjectMeta, test.namespace.ObjectMeta)",358],["Logf(\"Error getting pods in namespace '%s': %v\", ns, err)",351]],"useCount":112958},{"word":"M","context":[["bson.M{",934],["func TestMain(m *testing.M) {",2413],["// \texpected: \"M\",",2142],["M{",1456],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["\"units\": M{",1194],["\"juju-status\": M{",789],["err = coll.Insert(M{\"n\": 1})",941],["\"workload-status\": M{",965],["\"machines\": M{",1234]],"useCount":95219},{"word":"Marshal","context":[["t.Fatalf(\"Marshal: %v\", err)",804],["data, err := github_com_gogo_protobuf_proto.Marshal(p)",7723],["buf, err = json.Marshal(s)",822],["jsondata, err := encoding_json.Marshal(p)",713],["// BEGIN Marshal arguments into request.",2807],["// END Marshal arguments into request.",2807],["return json.Marshal(struct {",911],["data, err := github_com_gogo_protobuf_proto.Marshal(pops[i%10000])",2392],["dAtA, err := github_com_gogo_protobuf_proto.Marshal(p)",2753],["var _ = proto.Marshal",6750]],"useCount":130278},{"word":"MarshalJSON","context":[["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["func (s *Operation) MarshalJSON() ([]byte, error) {",264],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["// MarshalJSON implements json.Marshaler.",346],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["var _ = internal.MarshalJSON",259],["// MarshalJSON implements the json.Marshaler interface.",247],["var _ = gensupport.MarshalJSON",1223],["// MarshalJSON returns the JSON encoding of cmd.  Part of the Cmd interface.",384],["MarshalJSON() ([]byte, error)",199]],"useCount":75052},{"word":"MarshalTo","context":[["n2, err := m.Spec.MarshalTo(data[i:])",158],["MarshalTo([]byte) (int, error)",497],["n3, err := m.Status.MarshalTo(data[i:])",158],["n, err := msg.MarshalTo(dAtA[i:])",347],["_, err := p.MarshalTo(dAtA)",442],["_, err := p.MarshalTo(data)",2040],["n, err := m.MarshalTo(data)",28284],["n, err := msg.MarshalTo(data[i:])",7225],["n1, err := m.ObjectMeta.MarshalTo(data[i:])",220],["n, err := m.MarshalTo(dAtA)",1753]],"useCount":80052},{"word":"Message","context":[["// Generic AWS Error with Code, Message, and original error (if any)",7149],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["// Message from an error.",19226],["out.Message = in.Message",7924],["out.Message = in.Message",7924],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["Message string `json:\"message,omitempty\"`",4362],["Proto() github_com_gogo_protobuf_proto.Message",4822],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// with awserr.Error's Code and Message methods to get detailed information about",7881]],"useCount":254701},{"word":"Method","context":[["if req.Method != \"POST\" {",1522],["if r.Method != \"GET\" {",1744],["if r.Method != \"POST\" {",1819],["switch r.Method {",1962],["Method: \"POST\",",2352],["Method: \"GET\",",6521],["c.Assert(req.Method, Equals, \"GET\")",1226],["switch p, m := req.URL.Path, req.Method; {",1250],["Method: \"PUT\",",1410],["Method:  \"POST\",",1397]],"useCount":106257},{"word":"Millisecond","context":[["time.Sleep(500 * time.Millisecond)",2724],["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(10 * time.Millisecond)",4236],["time.Sleep(20 * time.Millisecond)",809],["time.Sleep(1 * time.Millisecond)",836],["time.Sleep(5 * time.Millisecond)",1183],["case <-time.After(100 * time.Millisecond):",1295],["time.Sleep(200 * time.Millisecond)",1366],["time.Sleep(time.Millisecond)",1937],["time.Sleep(50 * time.Millisecond)",2719]],"useCount":74466},{"word":"More","context":[["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",676],["// More values...",27171],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",676],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",821],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707]],"useCount":75824},{"word":"N","context":[["c.Assert(result.N, Equals, ns[i])",636],["// \texpected: \"N\",",714],["for n := 0; n < b.N; n++ {",3284],["result := struct{ N int }{}",936],["for i := 0; i < N; i++ {",3004],["n = l.N",481],["b.SetBytes(int64(total / b.N))",10167],["for i := 0; i < c.N; i++ {",802],["p.populate(b.N)",485],["for i := 0; i < b.N; i++ {",52243]],"useCount":140910},{"word":"NOT","context":[["// Auto-generated - DO NOT EDIT",611],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT.",887],["// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING",590],["// Created by cgo -godefs - DO NOT EDIT",690],["// DO NOT EDIT!",8164],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented.",771],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649]],"useCount":110857},{"word":"Name","context":[["out.Name = in.Name",14366],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["Name: name,",5258],["Name string",15267],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["Name:      \"foo\",",6661],["Name string `json:\"name\"`",6733],["Name: \"foo\",",9020],["Name string `json:\"name,omitempty\"`",13075],["out.Name = in.Name",14366]],"useCount":1548220},{"word":"Namespace","context":[["Namespace: api.NamespaceDefault,",4787],["Namespace(c.ns).",6159],["Namespace: namespace,",2981],["ObjectMeta: api.ObjectMeta{Name: \"mysvc\", Namespace: \"namespace\"},",2388],["Namespace: \"foo\",",3367],["out.Namespace = in.Namespace",3187],["Namespace: \"ns\",",5327],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["out.Namespace = in.Namespace",3187],["Namespace: \"new\",",4835]],"useCount":237082},{"word":"New","context":[["func New(client *http.Client) (*Service, error) {",3045],["var _ = errors.New",3068],["return nil, errors.New(\"client is nil\")",3069],["svc := ec2.New(nil)",4408],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(616))",9510],["assert := assert.New(t)",8568],["svc := ec2.New(session.New())",2581],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["trans := New()",18652]],"useCount":501446},{"word":"NewDecoder","context":[["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685],["var _ = json.NewDecoder",2852],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["decoder := json.NewDecoder(r.Body)",1255],["decoder := json.NewDecoder(resp.Body)",765],["decoder := json.NewDecoder(data)",501],["dec := NewDecoder(b)",580],["dec := json.NewDecoder(resp.Body)",959],["decoder := json.NewDecoder(file)",634],["if err := json.NewDecoder(res.Body).Decode(ret); err != nil {",1930]],"useCount":90716},{"word":"NewReader","context":[["reader := bufio.NewReader(os.Stdin)",1136],["config, err = DecodeConfig(bytes.NewReader([]byte(input)))",1336],["gzipr, err := compress_gzip.NewReader(r)",367],["reader := bufio.NewReader(conn)",389],["bodyBytes := bytes.NewReader([]byte(r.body))",399],["rbuf := bytes.NewReader(test.buf)",406],["reader := bufio.NewReader(file)",407],["r := bufio.NewReader(f)",410],["authJson := base64.NewDecoder(base64.URLEncoding, strings.NewReader(authEncoded))",465],["gz, err := gzip.NewReader(bytes.NewBuffer(data))",574]],"useCount":70473},{"word":"NewRequest","context":[["req, _ := http.NewRequest(\"DELETE\", urls, body)",6246],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["req, _ := http.NewRequest(\"PUT\", urls, body)",4835],["req, _ := http.NewRequest(\"PATCH\", urls, body)",3818],["req := c.NewRequest(op, params, data)",2823],["req, err := s.client.NewRequest(\"GET\", u, nil)",1695],["req, err := http.NewRequest(\"GET\", url, nil)",1508],["req := aws.NewRequest(c.Service, op, params, data)",1394],["request, _ := http.NewRequest(\"POST\", path, nil)",904]],"useCount":119390},{"word":"Next","context":[["hdr, err := tr.Next()",818],["for rows.Next() {",9517],["if !rows.Next() {",729],["for ; l != nil; l = l.Next {",758],["for it.Next() {",826],["for iter.Next() {",920],["if rows.Next() {",1198],["ok := iter.Next(&result)",1224],["c.Next()",1946],["for pb.Next() {",2058]],"useCount":99940},{"word":"NoError","context":[["if !assert.NoError(err) {",1322],["assert.NoError(err)",2480],["NoError(t, err)",600],["a.NoError(err)",472],["if !assert.NoError(t, err) {",425],["require.NoError(err)",446],["assert.NoError(t, req.Error)",4830],["assert.NoError(t, err)",27740],["if assert.NoError(t, err) {",5588],["require.NoError(t, err)",22318]],"useCount":83056},{"word":"Node","context":[["var n1 Node",1257],["Node: &etcd.Node{",3557],["Node",1235],["Existing: []*api.Node{",1156],["var n1 gc.Node",1078],["Nodes: []*etcd.Node{",1056],["Node: &etcd.Node{",3557],["}, api.Node{",2097],["type Node struct {",2879],["{api.Node{",2291]],"useCount":216092},{"word":"Not","context":[["panic(\"Not implemented\")",2092],["return fmt.Errorf(\"Not found: %s\", n)",1966],["return fmt.Errorf(\"Field2 this(%v) Not Equal that(%v)\", this.Field2, that1.Field2)",1170],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["// Not applicable on Windows as uses Unix specific functionality",2299],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", *this.Field1, *that1.Field1)",1105],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", this.Field1, that1.Field1)",1720],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["return fmt.Errorf(\"Field3 this(%v) Not Equal that(%v)\", this.Field3, that1.Field3)",983],["c.Assert(req.Header[\"Date\"], Not(Equals), \"\")",990]],"useCount":113345},{"word":"NotTo","context":[["Expect(err).NotTo(HaveOccurred())",60899],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["Expect(zAdd.Err()).NotTo(HaveOccurred())",1290],["Expect(hSet.Err()).NotTo(HaveOccurred())",379],["Expect(lRange.Err()).NotTo(HaveOccurred())",417],["Expect(get.Err()).NotTo(HaveOccurred())",427],["Expect(rPush.Err()).NotTo(HaveOccurred())",725],["Expect(sAdd.Err()).NotTo(HaveOccurred())",1249],["Expect(set.Err()).NotTo(HaveOccurred())",1016],["Expect(apiErr).NotTo(HaveOccurred())",846]],"useCount":86135},{"word":"Note","context":[["//  Note that you are welcome to modify this code under the condition that you do not remove any",466],["// properly authorized request. Note: This parameter is intended",440],["// the deleted key/value. Note that this value might be stale. If the pod",380],["// Note that this is calculated from dead containers.  But those containers are subject to",517],["// request parameter to retrieve more items. Note that IAM might return fewer",550],["// Note that IAM might return fewer results, even when there are more results",572],["// \"onBehalfOfContentOwner\": Note: This parameter is intended",1178],["// Note: This operation can generate multiple requests to a service.",1419],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// Note that we pass all pods (including terminated pods) to the function,",470]],"useCount":67173},{"word":"Now","context":[["start := time.Now()",12562],["now := time.Now()",10458],["startTime := time.Now()",4663],["rand.Seed(time.Now().UnixNano())",2847],["t0 := time.Now()",1930],["rand.Seed(time.Now().UTC().UnixNano())",1780],["now := unversioned.Now()",1409],["t := time.Now()",2723],["seed := time.Now().UnixNano()",14884],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425]],"useCount":219851},{"word":"Number","context":[["Number:   func(v int32) *int32 { return &v }(1),",6114],["Number:   func(v int32) *int32 { return &v }(999),",1414],["Number:   func(v int32) *int32 { return &v }(7),",1470],["Number:   func(v int32) *int32 { return &v }(6),",1510],["Number:   func(v int32) *int32 { return &v }(8),",1542],["Number:   func(v int32) *int32 { return &v }(4),",1907],["Number: func(v int32) *int32 { return &v }(2),",2031],["Number: func(v int32) *int32 { return &v }(1),",2422],["Number:   func(v int32) *int32 { return &v }(3),",2702],["Number:   func(v int32) *int32 { return &v }(2),",5407]],"useCount":102753},{"word":"Object","context":[["func(obj runtime.Object) runtime.Object {",928],["func(obj runtime.Object) runtime.Object {",928],["runtime.SetFinalizer(obj, (*glib.Object).Unref)",747],["type Object struct {",973],["mapper, typer := f.Object()",1071],["obj := &glib.Object{glib.ToGObject(unsafe.Pointer(c))}",1098],["ObjectNameFunc: func(obj runtime.Object) (string, error) {",1101],["//     \"$ref\": \"Object\"",1124],["ListFunc: func() (runtime.Object, error) {",1635],["ListFunc: func(options api.ListOptions) (runtime.Object, error) {",2282]],"useCount":143923},{"word":"ObjectMeta","context":[["ObjectMeta: kapi.ObjectMeta{",10395],["ObjectMeta `json:\"metadata,omitempty\"`",4422],["if newVal, err := c.DeepCopy(in.ObjectMeta); err != nil {",3124],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["ObjectMeta: kapi.ObjectMeta{",10395],["ObjectMeta: api.ObjectMeta{",69360],["ObjectMeta: api.ObjectMeta{",69360]],"useCount":449151},{"word":"Op","context":[["ops := []txn.Op{{",1752],["p := gc.Prog(v.Op.Asm())",597],["switch e.Op {",571],["var ops []txn.Op",626],["return txn.Op{",665],["if v_1.Op != OpConst64 {",708],["buildTxn := func(attempt int) ([]txn.Op, error) {",818],["ops = append(ops, txn.Op{",904],["Op:  influxql.EQ,",1029],["switch n.Op {",3471]],"useCount":91186},{"word":"Open","context":[["f, err := os.Open(name)",696],["// Open the database.",368],["file, err := os.Open(filePath)",388],["db, err := sql.Open(\"sqlite3\", tempFilename)",495],["f, err := os.Open(path)",2387],["file, err := os.Open(path)",1739],["f, err := os.Open(filename)",1490],["file, err := os.Open(filename)",1268],["f, err := os.Open(file)",760],["file, err := os.Open(fileName)",336]],"useCount":69249},{"word":"Operation","context":[["op := &request.Operation{",37657],["op := &aws.Operation{",5650],["//     \"$ref\": \"Operation\"",4819],["op := &service.Operation{",3192],["var ret *Operation",2649],["// *Operation.ServerResponse.Header or (if a response was returned at",1713],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["ret := &Operation{",1713],["Callbacks: map[logical.Operation]framework.OperationFunc{",1683],["Operation: logical.UpdateOperation,",1484]],"useCount":94672},{"word":"Optional","context":[["//       \"description\": \"Optional. Filter expression for filtering listed resources.\",",889],["// Optional: Default to false.",1165],["// Optional: Partition on the disk to mount.",903],["Optional:      true,",893],["Optional: true,",28311],["// Optional.",1278],["Optional:    true,",2104],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["// Optional parameters:",591],["Optional:     true,",610]],"useCount":81217},{"word":"Output","context":[["Run(&helper, &RunConf{Output: &output})",558],["outBuf := fs.Output.Bytes()",576],["// NextPageToken: [Output Only] A token used to continue a truncated",557],["type Output struct {",376],["// CreationTimestamp: [Output Only] Creation timestamp in RFC3339 text",578],["c.Assert(err, check.IsNil, check.Commentf(\"Output: %s\", out))",747],["out, err := cmd.Output()",852],["// Id: [Output Only] Unique identifier for the resource; defined by the",1058],["// Output:",11938],["Output: buildapi.BuildOutput{",1288]],"useCount":77289},{"word":"P","context":[["g.P(\"}\")",2547],["p.P(`for _, num := range m.`, fieldname, ` {`)",220],["for p := 0; p < P; p++ {",236],["g.P(\"return nil\")",286],["if gc.Debug['P'] != 0 && gc.Debug['v'] != 0 {",335],["to\tP",429],["p.popUntil(buttonScope, a.P)",492],["if gc.Debug['P'] != 0 {",1192],["g.P()",1968],["p.P(`}`)",2610]],"useCount":62061},{"word":"POST","context":[["Method:  \"POST\",",1397],["\"POST\",",1389],["if req.Method != \"POST\" {",1522],["//   \"httpMethod\": \"POST\",",18913],["HTTPMethod: \"POST\",",45127],["if r.Method == \"POST\" {",905],["if r.Method != \"POST\" {",1819],["case \"POST\":",2269],["Method: \"POST\",",2352],["req, _ := http.NewRequest(\"POST\", urls, body)",17587]],"useCount":155751},{"word":"Parse","context":[["if err := subFlags.Parse(args); err != nil {",1393],["if err := cmdFlags.Parse(args); err != nil {",425],["if err := fs.Parse(args); err != nil {",424],["subFlags.Parse(args)",335],["flag.Parse()",29569],["var _ = url.Parse",3082],["if err := b.flags.Parse(); err != nil {",443],["u, err := url.Parse(s)",461],["if err := flags.Parse(args); err != nil {",556],["if err := cmd.Parse(args); err != nil {",2253]],"useCount":107171},{"word":"Path","context":[["switch p, m := req.URL.Path, req.Method; {",1250],["&framework.Path{",1034],["switch req.URL.Path {",1149],["out.Path = in.Path",7500],["out.Path = in.Path",7500],["Path string",3332],["Path: rootModulePath,",3286],["Path string `json:\"path\"`",1813],["req, err := loc.api.BuildHTTPRequest(uri.HTTPMethod, uri.Path, APIVersion, params, p)",1555],["Path string `json:\"path,omitempty\"`",1205]],"useCount":226058},{"word":"Pod","context":[["pod := &api.Pod{",7955],["api.Pod{",6315],["Kind: \"Pod\",",1468],["Kind:       \"Pod\",",1557],["return &api.Pod{",1413],["fakeRuntime.PodList = []*kubecontainer.Pod{",1327],["pods: []*api.Pod{",1853],["pod: &api.Pod{",2454],["&api.Pod{",4371],["pods := []*api.Pod{",2589]],"useCount":218644},{"word":"Pointer","context":[["_p0 = unsafe.Pointer(&_zero)",5922],["defer C.free(unsafe.Pointer(cstr))",1562],["_p0 = unsafe.Pointer(&buf[0])",1542],["defer C.free(unsafe.Pointer(cname))",1232],["use(unsafe.Pointer(_p0))",10242],["if ptr.Pointer() != nil {",20068],["var _p0 unsafe.Pointer",6004],["_p0 = unsafe.Pointer(&p[0])",2792],["_p0 = unsafe.Pointer(&b[0])",1148],["use(unsafe.Pointer(_p1))",2108]],"useCount":223601},{"word":"Port","context":[["Port int",1091],["type Port struct {",604],["if err := s.Convert(&in.Port, &out.Port, 0); err != nil {",704],["if err := s.Convert(&in.Port, &out.Port, 0); err != nil {",704],["Port *int64 `type:\"integer\"`",742],["out.Port = in.Port",2362],["Port:     80,",674],["Port   uint16",649],["out.Port = in.Port",2362],["Port:       80,",839]],"useCount":114270},{"word":"Ports","context":[["for i := range in.Ports {",1805],["if len(service.Spec.Ports) != 1 {",744],["ports = append(ports, container.Ports...)",743],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["Ports: []api.ContainerPort{",1496],["Ports: []api.ServicePort{",1867],["out.Ports = nil",2420],["if in.Ports != nil {",2534],["Ports: []api.ServicePort{{",3784],["for i := range service.Spec.Ports {",1632]],"useCount":90071},{"word":"Prettify","context":[["prettyLog := prettify.Prettify(logMessage)",24],["fmt.Println(awsutil.Prettify(f2))",26],["fmt.Println(awsutil.Prettify(resp))",4421],["return awsutil.Prettify(s)",109113]],"useCount":113584},{"word":"Printf","context":[["g.Printf(\"}\\n\\n\")",454],["g.Printf(\"\\n\")",519],["var _ = fmt.Printf",589],["fmt.Printf(",616],["log.Printf(format, args...)",666],["fmt.Printf(\"Unexpected error: %v\", err)",700],["fmt.Printf(\"Success: %v\\n\", resp)",831],["fmt.Printf(\"\\n\")",3301],["fmt.Printf(\"  ... Passed\\n\")",909],["log.Printf(",1684]],"useCount":152270},{"word":"Println","context":[["fmt.Println(\"failed to create session,\", err)",5256],["fmt.Println()",7969],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(err.Error())",36001],["fmt.Println(err)",20105],["fmt.Println(resp)",19340],["log.Println(err)",16778],["//        fmt.Println(resp)",13378],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["fmt.Println(awsutil.StringValue(resp))",10680]],"useCount":274540},{"word":"Protocol","context":[["type Protocol string",750],["Protocol: \"TCP\",",3279],["// Go support for Protocol Buffers - Google's data interchange format",1229],["out.Protocol = in.Protocol",1083],["out.Protocol = in.Protocol",1083],["Protocol:      api.ProtocolTCP,",789],["Protocol:   api.ProtocolTCP,",773],["Protocol:   \"TCP\",",757],["Protocol:  \"tcp\",",754],["ProtocolUDP Protocol = \"UDP\"",713]],"useCount":75309},{"word":"Query","context":[["q := u.Query()",652],["q := r.URL.Query()",620],["query := r.URL.Query()",368],["query := req.URL.Query()",384],["qs := r.URL.Query()",413],["got := map[string][]string(req.URL.Query())",550],["&Query{",26276],["test.addQueries([]*Query{",3314],["type Query struct {",1048],["values := testServer.WaitRequest().URL.Query()",654]],"useCount":103879},{"word":"RLock","context":[["d.mu.RLock()",579],["fake.invocationsMutex.RLock()",590],["c.lock.RLock()",596],["e.RLock()",749],["s.RLock()",774],["m.mu.RLock()",941],["m.fmut.RLock()",1191],["c.mu.RLock()",1839],["s.mu.RLock()",2368],["c.RLock()",3035]],"useCount":61119},{"word":"RUnlock","context":[["defer s.mu.RUnlock()",1728],["defer c.RUnlock()",2427],["s.m.RUnlock()",574],["defer fake.invocationsMutex.RUnlock()",590],["c.RUnlock()",637],["defer m.mu.RUnlock()",718],["s.mu.RUnlock()",764],["m.fmut.RUnlock()",936],["defer c.mu.RUnlock()",993],["c.mu.RUnlock()",1082]],"useCount":63049},{"word":"Read","context":[["if err := p.Success.Read(iprot); err != nil {",293],["// Read-only.",2967],["n, err := conn.Read(buf)",307],["_, err := rand.Read(b)",323],["// (Read-only)",355],["n, err := r.Read(buf)",412],["// Read next point.",667],["if err = result.Read(iprot); err != nil {",682],["if err = args.Read(iprot); err != nil {",987],["return nil, fmt.Errorf(\"Read %q: %v\", name, err)",1238]],"useCount":94213},{"word":"ReadAll","context":[["body, err := ioutil.ReadAll(resp.Body)",8460],["body, _ := ioutil.ReadAll(r.Body)",2320],["respBody, _ := ioutil.ReadAll(resp.Body)",2084],["body, _ := ioutil.ReadAll(resp.Body)",1978],["body, err := ioutil.ReadAll(res.Body)",1752],["body, err := ioutil.ReadAll(r.Body)",1646],["data, err := ioutil.ReadAll(resp.Body)",1548],["body, err := ioutil.ReadAll(response.Body)",992],["respBody, err := ioutil.ReadAll(resp.Body)",1226],["b, err := ioutil.ReadAll(resp.Body)",1108]],"useCount":68594},{"word":"Reader","context":[["var body io.Reader = nil",58552],["r io.Reader",1067],["io.Reader",2583],["type Reader struct {",1062],["cmds.Text: func(res cmds.Response) (io.Reader, error) {",749],["Stdin  io.Reader",598],["var r io.Reader",502],["type Reader interface {",484],["reader io.Reader",430],["var body io.Reader",1129]],"useCount":140476},{"word":"Remove","context":[["defer os.Remove(path)",744],["os.Remove(f.Name())",726],["req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)",769],["req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)",1712],["req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)",1505],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["Remove: true,",1253],["defer os.Remove(f.Name())",926],["req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)",902],["req.Handlers.Unmarshal.Remove(restxml.UnmarshalHandler)",851]],"useCount":92850},{"word":"Replicas","context":[["// Replicas is the number of desired replicas.",753],["Replicas: replicas,",761],["Replicas: 0,",816],["x.Replicas = int32(r.DecodeInt(32))",960],["x.Replicas = 0",1464],["r.EncodeInt(int64(x.Replicas))",1464],["Replicas: 1,",1626],["Replicas: 2,",1756],["out.Replicas = in.Replicas",2702],["out.Replicas = in.Replicas",2702]],"useCount":61844},{"word":"Request","context":[["func(w http.ResponseWriter, r *http.Request) {",1842],["return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3901],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["return preparer.Prepare(&http.Request{})",3545],["return func(w http.ResponseWriter, r *http.Request) {",3124],["// Request structure.",2807],["return autorest.Prepare(&http.Request{},",2807],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["type Request struct {",2062],["server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",1873]],"useCount":292652},{"word":"Required","context":[["Bucket: aws.String(\"BucketName\"), // Required",1194],["// Required fields:",1385],["// Required: Filesystem type to mount.",1487],["// Required.",1674],["Required:    true,",1725],["Required: []string{\"items\"},",2542],["{ // Required",7508],["aws.String(\"String\"), // Required",8342],["// Required: Yes",993],["Required: true,",14985]],"useCount":159695},{"word":"Reset","context":[["Reset(func() {",532],["defer viper.Reset()",437],["viper.Reset()",575],["s.Reset()",582],["responseWriter.Body.Reset()",647],["buffer.Reset()",772],["Reset()",825],["h.Reset()",947],["b.Reset()",2436],["buf.Reset()",4929]],"useCount":85040},{"word":"Resource","context":[["return &schema.Resource{",3711],["Resource string",837],["Resource(\"nodes\").",840],["//  Use a Resource element with the domain name to limit the action to only",846],["Resource(\"services\").",944],["// Kind: Resource type.",953],["Resource",1193],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["Resource(\"pods\").",1872],["Elem: &schema.Resource{",3192]],"useCount":94064},{"word":"Resources","context":[["for _, rs := range s.RootModule().Resources {",2235],["Resources: api.ResourceRequirements{",5639],["Resources: map[string]*ResourceState{",4007],["// Resources represents the actual resources of the volume",412],["// Resources represents the minimum resources required",412],["Resources ResourceRequirements `json:\"resources,omitempty\"`",425],["resources  *common.Resources",438],["Resources: &structs.Resources{",439],["Resources: &structs.Resources{",439],["rs, ok := s.RootModule().Resources[n]",2088]],"useCount":65173},{"word":"Response","context":[["result.Response = autorest.Response{Response: resp}",11401],["result.Response = autorest.Response{Response: resp}",11401],["result.Response = autorest.Response{Response: resp}",11401],["result.Response = resp",3498],["R: &etcd.Response{",3707],["// non-2xx status code is an error. Response headers are in either",5221],["// closes the http.Response Body.",6600],["// http.Response Body if it receives an error.",6600],["// status code is an error. Response headers are in either",7314],["// code is an error. Response headers are in either",8983]],"useCount":240897},{"word":"ResponseWriter","context":[["st := newServerTester(t, func(w http.ResponseWriter, r *http.Request) {",1055],["scope.err(err, res.ResponseWriter, req.Request)",1026],["return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3901],["s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {",1115],["http.ResponseWriter",1457],["func(w http.ResponseWriter, r *http.Request) {",1842],["server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",1873],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["return func(w http.ResponseWriter, r *http.Request) {",3124],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891]],"useCount":110622},{"word":"Result","context":[["Result:  &returnValue,",1598],["Result: &returnValue,",2481],["var result Result",542],["er := kapacitor.Result{",536],["return *m.Result",449],["Forward: func(ctx action.FWContext) (action.Result, error) {",559],["return &influxql.Result{Err: err}",876],["expected := &graphql.Result{",1058],["type Result struct {",1987],["return &Result{r.Header.Get(HEADER_REQUEST_ID),",2607]],"useCount":69609},{"word":"Returns","context":[["// Returns the list of DNS servers and DNS search domains.",267],["Returns struct {",307],["Returns(http.StatusOK, \"OK\", versionedObject).",325],["// Returns logs of current machine.",326],["// Returns rows starting at an offset from the first row.",332],["// Returns an error if timeout occurs first, or pod goes in to failed state.",348],["// Returns true if the request succeeds; otherwise, it returns an error.",406],["// Returns:",628],["// Returns whether the assertion was successful (true) or not (false).",2688],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881]],"useCount":66442},{"word":"Run","context":[["err = cmd.Run()",1398],["if code := c.Run(args); code != 0 {",1225],["Run: func(cmd *cobra.Command, args []string) {",7815],["if err := cmd.Run(); err != nil {",4108],["if err := job.Run(); err != nil {",2820],["err := cmd.Run()",2611],["app.Run(os.Args)",2537],["Run: func(req cmds.Request, res cmds.Response) {",1424],["return cmd.Run()",1360],["os.Exit(m.Run())",1112]],"useCount":157081},{"word":"S","context":[["// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}",465],["// \texpected: \"S\",",2142],["type S struct {",1693],["S string",699],["-1, // S'",676],["var _ = check.Suite(&S{})",610],["var _ = Suite(&S{})",595],["case 'S':",526],["type S struct{}",521],["S.next()",472]],"useCount":69355},{"word":"SDKShapeTraits","context":[["SDKShapeTraits bool `type:\"structure\" payload:\"Policy\"`",71],["SDKShapeTraits bool `type:\"structure\" payload:\"Body\"`",145],["SDKShapeTraits bool `locationName:\"OperationRequest\" type:\"structure\" xmlURI:\"https://foo/\"`",228],["SDKShapeTraits bool `type:\"structure\"`",68537],["SDKShapeTraits bool `type:\"structure\" payload:\"Foo\"`",63],["if field, ok := v.Type().FieldByName(\"SDKShapeTraits\"); ok {",58],["SDKShapeTraits bool",46],["SDKShapeTraits bool `type:\"structure\" payload:\"AccessControlPolicy\"`",46],["SDKShapeTraits bool `type:\"structure\" payload:\"ReplicationConfiguration\"`",46],["SDKShapeTraits bool `type:\"structure\" payload:\"StreamingDistributionConfig\"`",45]],"useCount":70315},{"word":"Schema","context":[["Elem:     &schema.Schema{Type: schema.TypeString},",2931],["Schema: spec.Schema{",20652],["Schema: spec.Schema{",20652],["Properties: map[string]spec.Schema{",20467],["Schema: &spec.Schema{",11591],["Schema: &spec.Schema{",11591],["Schema: map[string]*schema.Schema{",7236],["Schema: map[string]*schema.Schema{",7236],["Schema: map[string]*Schema{",6029],["Schema: map[string]*Schema{",6029]],"useCount":175877},{"word":"SchemaProps","context":[["Schema{SchemaProps: SchemaProps{Type: []string{\"string\"}}},",12],["SchemaProps: spec.SchemaProps{",110350],["SchemaProps: spec.SchemaProps{",110350],["Schema{SchemaProps: SchemaProps{Type: []string{\"string\"}}},",12]],"useCount":220724},{"word":"Scope","context":[["Scope:     scope.NewPerm(scope.DefaultID),",351],["Scope:     scope.PermAll,",1305],["// Scope",920],["Scope:     charm.ScopeGlobal,",786],["Scope:        scope.PermAll,",714],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:        scope.NewPerm(scope.DefaultID, scope.WebsiteID),",580],["Scope:        config.ScopePermAll,",347],["Scope:        config.NewScopePerm(config.ScopeDefaultID, config.ScopeWebsiteID),",266],["if mapping.Scope.Name() != meta.RESTScopeNameNamespace {",265]],"useCount":66937},{"word":"Second","context":[["time.Sleep(1 * time.Second)",6076],["case <-time.After(2 * time.Second):",1784],["time.Sleep(10 * time.Second)",2113],["time.Sleep(5 * time.Second)",3396],["time.Sleep(2 * time.Second)",3762],["if t.Second() < 10 {",4121],["b = strconv.AppendInt(b, int64(t.Second()), 10)",4128],["case <-time.After(5 * time.Second):",4145],["case <-time.After(time.Second):",4246],["time.Sleep(time.Second)",6699]],"useCount":181318},{"word":"See","context":[["// Fields allows partial responses to be retrieved. See",23003],["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["// The parser stores options it doesn't recognize here. See above.",318],["// Version skew workaround. See: https://github.com/kubernetes/kubernetes/issues/16961",326],["// See the AWS API reference guide for AWS Identity and Access Management's",339],["// See the AWS API reference guide for Amazon Simple Storage Service's",384],["//       \"description\": \"Part of `name`. See documentation of `appsId`.\",",414],["// See the AWS API reference guide for Amazon API Gateway's",456],["// See the AWS API reference guide for 's",504],["// See the AWS API reference guide for Amazon Route 53's",294]],"useCount":136003},{"word":"Selector","context":[["x.Selector = nil",1492],["out.Selector = nil",3557],["if in.Selector != nil {",3609],["Selector: validSelector,",5529],["Selector: map[string]string{",3128],["if x.Selector == nil {",2648],["for key, val := range in.Selector {",1906],["out.Selector = make(map[string]string)",1902],["out.Selector[key] = val",1884],["Selector: map[string]string{\"foo\": \"bar\"},",1255]],"useCount":93466},{"word":"Send","context":[["return client.Send(req)",705],["// Send",265],["return client.Send(req, http.StatusOK)",267],["if err := s.Send(wb); err != nil {",351],["err := req.Send()",52207],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["if err := stream.Send(req); err != nil {",284],["//    err := req.Send()",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["err = req.Send()",2178]],"useCount":130171},{"word":"Server","context":[["srv := &Server{",710],["s := &http.Server{",667],["Server:     srv,",4594],["server := &http.Server{",1111],["// SelfLink: Server defined URL for this resource (output only).",740],["return &Server{",807],["out.Server = in.Server",1050],["out.Server = in.Server",1050],["type Server struct {",4277],["s := &Server{",1085]],"useCount":104133},{"word":"ServerResponse","context":[["ServerResponse: googleapi.ServerResponse{",24578],["ServerResponse: googleapi.ServerResponse{",24578],["// ServerResponse contains the HTTP response code and headers from the",13928],["googleapi.ServerResponse `json:\"-\"`",13928],["// *Operation.ServerResponse.Header or (if a response was returned at",1713],["// *Empty.ServerResponse.Header or (if a response was returned at all)",775],["// *ObjectAccessControl.ServerResponse.Header or (if a response was",440],["// *Object.ServerResponse.Header or (if a response was returned at all)",342],["// *File.ServerResponse.Header or (if a response was returned at all) in",310],["// *Policy.ServerResponse.Header or (if a response was returned at all)",292]],"useCount":97921},{"word":"Service","context":[["s       *Service",4182],["s *Service",19046],["s            *Service",10929],["s          *Service",9577],["func New(client *http.Client) (*Service, error) {",3045],["s    *Service",4294],["s         *Service",5652],["type Service struct {",5858],["tweakSvc: func(s *api.Service) {",9537],["s             *Service",6783]],"useCount":241553},{"word":"Set","context":[["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["params.Set(\"alt\", alt)",10492],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["reqHeaders.Set(\"User-Agent\", c.s.userAgent())",11905],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["req.Header.Set(\"Content-Type\", ctype)",17612],["c.urlParams_.Set(\"alt\", alt)",23003],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["params.Set(\"alt\", \"json\")",25051]],"useCount":610744},{"word":"Should","context":[["// TODO(dchen1107): Should we rename PodStatus to a more generic name or have a separate states",365],["Expect(err).Should(BeNil())",1111],["}).Should(Panic())",369],["// Optional. The component reporting this event. Should be a short machine understandable string.",524],["Ω(failures).Should(HaveLen(1))",622],["Ω(err).Should(BeNil())",1049],["Eventually(session).Should(gexec.Exit(0))",1260],["Ω(success).Should(BeFalse())",1623],["Ω(err).Should(HaveOccurred())",2915],["Eventually(session).Should(gexec.Exit(1))",552]],"useCount":97107},{"word":"Size","context":[["size2 := github_com_gogo_protobuf_proto.Size(p)",3137],["size := m.Size()",29946],["l = e.Size()",8079],["size := p.Size()",6004],["i = encodeVarintGenerated(data, i, uint64(msg.Size()))",4070],["total += pops[i%1000].Size()",3371],["size3 := github_com_gogo_protobuf_proto.Size(p)",3137],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["i = encodeVarintGenerated(data, i, uint64(m.ObjectMeta.Size()))",1792]],"useCount":255452},{"word":"Sleep","context":[["time.Sleep(1 * time.Second)",6076],["time.Sleep(time.Second)",6699],["time.Sleep(10 * time.Millisecond)",4236],["time.Sleep(2 * time.Second)",3762],["time.Sleep(5 * time.Second)",3396],["time.Sleep(500 * time.Millisecond)",2724],["time.Sleep(50 * time.Millisecond)",2719],["time.Sleep(10 * time.Second)",2113],["time.Sleep(time.Millisecond)",1937],["time.Sleep(100 * time.Millisecond)",6762]],"useCount":93927},{"word":"Source","context":[["Sources: []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",543],["Source: buildapi.BuildSource{",1225],["Source string",732],["// Source represents the location and type of a volume to mount.",722],["// Source sets the optional parameter \"source\": String to identify the",719],["Sources: []influxql.Source{&influxql.Measurement{Name: \"myseries\"}},",638],["// and allows a Source for provider-specific attributes",592],["Sources: []influxql.Source{&influxql.Measurement{Name: \"src\"}},",578],["Sources:    []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",533],["// This Source Code Form is subject to the terms of the Mozilla Public",3950]],"useCount":65943},{"word":"Spec","context":[["Spec: extensions.ReplicaSetSpec{",1726],["Spec: api.PersistentVolumeSpec{",1932],["s.Spec.Type = api.ServiceTypeLoadBalancer",1970],["Spec: extensions.DaemonSetSpec{",2010],["for _, container := range pod.Spec.Containers {",2060],["Spec: api.NodeSpec{",3451],["Spec: desiredState,",3638],["Spec: api.ServiceSpec{",8724],["Spec: api.ReplicationControllerSpec{",8923],["Spec: api.PodSpec{",28141]],"useCount":380014},{"word":"Split","context":[["outArr := strings.Split(out, \"\\n\")",347],["scanner.Split(bufio.ScanLines)",376],["portnum, _ := strconv.Atoi(strings.Split(string(port), \"/\")[0])",388],["if len(strings.Split(value, \"/\")) == 1 {",450],["lines := strings.Split(out, \"\\n\")",731],["pathList := strings.Split(cannonicalName, \"/\")",697],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["paramValues := strings.Split(args[0], \"/\")",632],["events := strings.Split(strings.TrimSpace(out), \"\\n\")",523],["events := strings.Split(out, \"\\n\")",540]],"useCount":72569},{"word":"Sprintf","context":[["params.Set(\"maxResults\", fmt.Sprintf(\"%v\", v))",6054],["s2 := fmt.Sprintf(\"%#v\", p)",2993],["return fmt.Sprintf(",2343],["var _ = fmt.Sprintf",3105],["s2 := fmt.Sprintf(\"%v\", p)",3135],["s = append(s, \"XXX_unrecognized:\"+fmt.Sprintf(\"%#v\", this.XXX_unrecognized)+\",\\n\")",5405],["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["params.Set(\"pageToken\", fmt.Sprintf(\"%v\", v))",6090],["req.Header.Set(\"If-None-Match\", fmt.Sprintf(\"%v\", v))",2132],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281]],"useCount":575808},{"word":"Start","context":[["if err := container.Start(); err != nil {",834],["Start() error",777],["Start()",684],["if err := s.d.Start(); err != nil {",666],["c.Start()",627],["tc.Start(t)",3966],["if err := cmd.Start(); err != nil {",2991],["ExtensionRange: []*descriptor.DescriptorProto_ExtensionRange{{Start: func(v int32) *int32 { return &v }(1000),",1414],["err := cmd.Start()",920],["err = cmd.Start()",1348]],"useCount":106266},{"word":"State","context":[["state := &State{",1508],["s := &State{",1456],["type State struct {",1368],["State: docker.State{",1694],["State: &terraform.InstanceState{",1574],["State: docker.State{",1694],["return func(s *terraform.State) error {",5208],["State: api.ContainerState{",2517],["State: nil,",1907],["machine, err := s.State.AddMachine(\"quantal\", state.JobHostUnits)",1731]],"useCount":195995},{"word":"Status","context":[["Status: http.StatusOK,",1221],["Status string `json:\"status,omitempty\"`",2520],["Status: api.NodeStatus{",6461],["Status: api.PodStatus{",7147],["Status: api.ConditionTrue,",1255],["return fmt.Errorf(\"proto: wrong wireType = %d for field Status\", wireType)",1444],["type Status struct {",1484],["Status:             api.ConditionTrue,",1485],["out.Status = in.Status",1969],["out.Status = in.Status",1969]],"useCount":328493},{"word":"StatusCode","context":[["Code:   res.StatusCode,",24618],["if res != nil && res.StatusCode == http.StatusNotModified {",24578],["if resp.StatusCode != http.StatusOK {",5525],["if resp.StatusCode != 200 {",4527],["if res.StatusCode != 200 {",2448],["if resp.StatusCode < 200 || resp.StatusCode > 299 {",2134],["if resp.StatusCode < 200 || resp.StatusCode > 299 {",2134],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["req.HTTPResponse = &http.Response{StatusCode: 200, Body: ioutil.NopCloser(buf), Header: http.Header{}}",1747],["HTTPStatusCode: res.StatusCode,",24593]],"useCount":202029},{"word":"StatusOK","context":[["c.Assert(response.StatusCode, Equals, http.StatusOK)",1480],["c.Assert(recorder.Code, check.Equals, http.StatusOK)",1527],["Status: http.StatusOK,",1221],["if res.StatusCode != http.StatusOK {",1382],["http.StatusOK,",1425],["w.WriteHeader(http.StatusOK)",10652],["if resp.StatusCode != http.StatusOK {",5525],["azure.WithErrorUnlessStatusCode(http.StatusOK),",4281],["return engine.StatusOK",1611],["StatusCode: http.StatusOK,",1645]],"useCount":83077},{"word":"Stderr","context":[["fmt.Fprintf(os.Stderr, \"Usage:\\n\\t%s\\n\", usageBits)",1957],["cmd.Stderr = os.Stderr",4643],["fmt.Fprintln(os.Stderr, err)",4376],["fmt.Fprintln(os.Stderr, err.Error())",926],["out.Stderr = in.Stderr",1275],["out.Stderr = in.Stderr",1275],["fmt.Fprintln(os.Stderr, usageMessage)",733],["Stderr:       true,",807],["fmt.Fprintf(os.Stderr, \"%v\\n\", err)",998],["cmd.Stderr = os.Stderr",4643]],"useCount":83721},{"word":"Stdout","context":[["cmd.Stdout = os.Stdout",3832],["cmd.Stdout = os.Stdout",3832],["out.Stdout = in.Stdout",1275],["out.Stdout = in.Stdout",1275],["defer log.SetOutput(os.Stdout)",1119],["cmd.Stdout = &out",896],["cmd.Stdout = stdout",609],["Stdout:       true,",861],["Stdout: &stdout,",695],["Stdout io.Writer",689]],"useCount":64964},{"word":"Stop","context":[["defer s.Stop()",3834],["timer.Stop()",1217],["defer tc.Stop()",4444],["defer stopper.Stop()",7045],["defer ticker.Stop()",2250],["s.Stop()",1296],["Stop()",1391],["ticker.Stop()",1740],["defer mtc.Stop()",1557],["defer s.Stopper().Stop()",1470]],"useCount":97945},{"word":"Store","context":[["type Store struct {",877],["type Store interface {",663],["test := registrytest.New(t, storage.Store)",604],["cache.Store",392],["manager.rcStore.Store.Add(controllerSpec)",432],["*registry.Store",433],["store := &registry.Store{",453],["store.Must(Srv.Store.User().VerifyEmail(user.Id))",528],["for _, m := range s.Store.List() {",758],["Store",804]],"useCount":66852},{"word":"String","context":[["String() string",3839],["s1 := p.String()",3263],["t.Fatalf(\"String want %v got %v\", s1, s2)",3263],["actual := strings.TrimSpace(state.String())",3368],["case reflect.String:",6428],["aws.String(\"String\"), // Required",8342],["return buf.String()",10966],["// String returns the string representation",113951],["aws.String(\"String\"), // Required",8342],["return s.String()",114328]],"useCount":1036081},{"word":"T","context":[["return thrift.PrependError(fmt.Sprintf(\"%T read struct end error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T write struct begin error: \", p), err)",1514],["func TestGet(t *testing.T) {",1940],["func TestDelete(t *testing.T) {",1627],["func TestCreate(t *testing.T) {",1659],["func Test(t *testing.T) {",1982],["return thrift.PrependError(fmt.Sprintf(\"%T read error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T field %d read error: \", p, fieldId), err)",1514],["type T struct {",2109],["// \texpected: \"T\",",1428]],"useCount":735667},{"word":"THE","context":[["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",872],["// NOTE: THIS FILE WAS PRODUCED BY THE",142],["* ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE",61],["// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT",140],["// KEEP THE SPACE SHUTTLE FLYING.",36],["TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF",47],["* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",48],["fmt.Fprintf(&bb, \"// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT\\n\\n\")",53]],"useCount":118972},{"word":"THIS","context":[["// ==== DO NOT EDIT THIS FILE MANUALLY ====",88],["// THIS FILE IS AUTO-GENERATED",141],["// NOTE: THIS FILE WAS PRODUCED BY THE",142],["println(\"NEVER SEE THIS\")",146],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-deep-copies.sh.",287],["// THIS FILE IS AUTO-GENERATED BY codecgen.",688],["// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED",1649],["// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.",4387],["// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT",58582],["// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh",180]],"useCount":67402},{"word":"TODO","context":[["// TODO: implement HandledResources()",932],["// TODO",2890],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// TODO: Inefficient conversion - can we improve it?",2317],["// TODO: Uncomment when fix #19254",1624],["// TODO:",1335],["// TODO: Handle error.",1046],["// TODO: provide exact specification for format.",976],["ctx := context.TODO()",824],["// NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented.",771]],"useCount":254927},{"word":"Tag","context":[["func (s Tag) String() string {",476],["Tags []*Tag `locationNameList:\"Tag\" type:\"list\"`",1207],["Tags []*Tag `locationNameList:\"Tag\" type:\"list\"`",1207],["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["// PageToken sets the optional parameter \"pageToken\": Tag returned by a",965],["{Tag: \"machine-42\"},",531],["{Tag: \"unit-mysql-0\"},",518],["type Tag struct {",1325],["func (s Tag) GoString() string {",476],["{Tag: \"unit-wordpress-0\"},",503]],"useCount":84550},{"word":"Tags","context":[["points[i].Tags = rp.Tags",464],["Tags              []struct {",466],["tags := curr.Tags.Subset(itr.opt.Dimensions)",468],["Tags: []*rds.Tag{",468],["Tags []string `json:\"tags,omitempty\"`",524],["Tags:       tags,",540],["models.Tags{",573],["Tags:    []string{\"master\"},",681],["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["Tags []*Tag `locationNameList:\"Tag\" type:\"list\"`",1207]],"useCount":61115},{"word":"Template","context":[["Template: &validPodTemplate.Template,",3872],["Template: &readWriteVolumePodTemplate.Template,",740],["Template: &validPodTemplate.Template,",3872],["Template: api.PodTemplateSpec{",3247],["Template: &api.PodTemplateSpec{",2483],["if in.Template != nil {",1538],["out.Template = nil",1417],["Template: validPodTemplate.Template,",904],["// Template is the object that describes the pod that will be created if",815],["Template: validPodTemplate.Template,",904]],"useCount":78967},{"word":"Test","context":[["resource.Test(t, resource.TestCase{",8069],["func Test(t *testing.T) {",1982],["func Test(t *testing.T) { TestingT(t) }",1407],["assert.Within(t, func(test *assert.Test) {",324],["Test{",356],["// Test to make sure that when we use -e on env vars that are",370],["func Test(t *testing.T) { check.TestingT(t) }",511],["logicaltest.Test(t, logicaltest.TestCase{",546],["// Test for #2267",636],["type Test struct {",1142]],"useCount":84872},{"word":"The","context":[["// The regex pattern (http://wikipedia.org/wiki/regex) for this parameter is",1072],["// The ID of the VPC.",1183],["// PageToken sets the optional parameter \"pageToken\": The continuation",1281],["// This case should never be hit, The SDK should alwsy return an",5138],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["//The service client's operations are safe to be used concurrently.",2258],["// The provided context supersedes any context provided to the Context method.",2234],["//       \"description\": \"The ID of the file.\",",1377],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["// The ID of the instance.",1299]],"useCount":1039039},{"word":"This","context":[["// Note: This operation can generate multiple requests to a service.",1419],["// fail if the object's ETag matches the given value. This is useful for",12114],["// This case should never be hit, the SDK should always return an",6736],["// This case should never be hit, The SDK should alwsy return an",5138],["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["// This file is part of the go-ethereum library.",3823],["// This is a compile-time assertion to ensure that this generated file",3226],["// This file was generated by the swagger tool.",2864],["// This function is safe for concurrent access.",1627],["// This file was generated by counterfeiter",1800]],"useCount":420223},{"word":"Time","context":[["var t time.Time",859],["LastTransitionTime: unversioned.Time{},",810],["modTime time.Time",798],["t        time.Time",5756],["case time.Time:",2093],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Time\"),",1709],["reqIDGen: idutil.NewGenerator(0, time.Time{}),",886],["LastHeartbeatTime:  unversioned.Time{},",810],["*out = new(unversioned.Time)",863],["return time.Time{}",1159]],"useCount":213322},{"word":"Timestamp","context":[["Timestamp: ev.Timestamp,",410],["l = m.Timestamp.Size()",417],["Timestamp: ts,",445],["Timestamp: ev.Timestamp,",410],["Timestamp: time.Now(),",732],["Timestamp: timestamp,",701],["return m.Timestamp",461],["Timestamp: now,",462],["return fmt.Errorf(\"proto: wrong wireType = %d for field Timestamp\", wireType)",541],["Timestamp time.Time",607]],"useCount":65707},{"word":"To","context":[["Expect(err).To(BeNil())",4880],["// calling the \"fn\" function with the response data for each page. To stop",1419],["To: &kapi.ObjectReference{",1342],["Expect(set.Val()).To(Equal(\"OK\"))",1002],["Expect(found).To(BeTrue())",874],["Expect(ui.Outputs()).To(ContainSubstrings(",1652],["p.To.Type = obj.TYPE_MEM",870],["p.To.Type = obj.TYPE_REG",2458],["Expect(err).To(HaveOccurred())",11730],["Expect(ui.Outputs).To(ContainSubstrings(",3675]],"useCount":210130},{"word":"Token","context":[["toks: []Token{",806],["Token string `json:\"token,omitempty\"`",511],["Token string",857],["type Token struct {",1049],["th.TestHeader(t, r, \"X-Auth-Token\", fake.TokenID)",1087],["&analysis.Token{",3695],["th.TestHeader(t, r, \"X-Auth-Token\", client.TokenID)",472],["Token string `json:\"token\"`",442],["NewConsumedToken(&lexer.Token{",416],["ActType{OpCode: CmdEval, Item: []tok.Token{",411]],"useCount":63398},{"word":"TrimSpace","context":[["id := strings.TrimSpace(out)",4703],["actual := strings.TrimSpace(state.String())",3368],["out = strings.TrimSpace(out)",1976],["actual := strings.TrimSpace(plan.String())",1778],["line = strings.TrimSpace(line)",1662],["cleanedContainerID := strings.TrimSpace(out)",1413],["return strings.TrimSpace(helpText)",1229],["containerID := strings.TrimSpace(out)",974],["s = strings.TrimSpace(s)",631],["expected := strings.TrimSpace(`",579]],"useCount":69148},{"word":"TryDecodeAsNil","context":[["if checkNil && dd.TryDecodeAsNil() {",3873],["if r.TryDecodeAsNil() {",130473],["// if dd.isContainerType(valueTypeNil) {dd.TryDecodeAsNil()",1125],["// if dd.isContainerType(valueTypeNil) { dd.TryDecodeAsNil()",70],["if dd.TryDecodeAsNil() {",45],["// do not use decVar, as there is no need to check TryDecodeAsNil",24],["x.line(\"if r.TryDecodeAsNil() {\")",24],["// This removes some of the wasted checks for TryDecodeAsNil.",24],["//   It was a concious decision to have gen.go always explicitly call EncodeNil or TryDecodeAsNil.",20],["if tryNil && d.d.TryDecodeAsNil() {",18]],"useCount":135798},{"word":"Type","context":[["Type:        []string{\"string\"},",23051],["Type:        []string{\"integer\"},",11323],["Type:     schema.TypeString,",26163],["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["req.Header.Set(\"Content-Type\", ctype)",17612],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["Type:        \"string\",",7482],["Type:        []string{\"array\"},",8756]],"useCount":910001},{"word":"TypeMeta","context":[["out.TypeMeta = in.TypeMeta",4767],["if err := deepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {",5919],["if newVal, err := c.DeepCopy(in.TypeMeta); err != nil {",6751],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["TypeMeta `json:\",inline\"`",9295],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["if err := deepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {",5919],["unversioned.TypeMeta `json:\",inline\"`",20119]],"useCount":186643},{"word":"TypeOf","context":[["env.Types[\"s2\"] = reflect.TypeOf(s2{})",727],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["if reflect.TypeOf(err) != reflect.TypeOf(test.err) {",301],["env.Types[\"a1\"] = reflect.TypeOf(a1{})",727],["env.Types[\"a2\"] = reflect.TypeOf(a2{})",727],["env.Types[\"s1\"] = reflect.TypeOf(s1{})",727],["codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())",622],["env.Types[\"I\"] = reflect.TypeOf(I(0))",601],["t := reflect.TypeOf(obj)",336],["tt := TypeOf(T(nil))",322]],"useCount":111870},{"word":"UID","context":[["UID:       \"987654321\",",518],["// The UID to run the entrypoint of the container process.",558],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["pod := &api.Pod{ObjectMeta: api.ObjectMeta{UID: types.UID(\"poduid\")}}",565],["pod := &api.Pod{ObjectMeta: api.ObjectMeta{UID: types.UID(\"poduid\")}}",565],["// UID is the unique in time and space value for this object. It is typically generated by",594],["uid := pod.UID",890],["out.UID = in.UID",2499],["out.UID = in.UID",2499],["UID:       \"12345678\",",5967]],"useCount":93631},{"word":"URL","context":[["&URL{",1428],["googleapi.Expand(req.URL, map[string]string{",44831],["googleapi.SetOpaque(req.URL)",12641],["URL:    u,",3347],["// assert URL",3002],["BasePath  string // API endpoint base URL",2098],["t.Fatalf(\"unexpected request: %#v\\n%#v\", req.URL, req)",2006],["URL:     u,",1733],["switch p, m := req.URL.Path, req.Method; {",1250],["switch req.URL.Path {",1149]],"useCount":332864},{"word":"Unexpected","context":[["t.Error(\"Unexpected error: \", err.Error())",839],["t.Errorf(\"Unexpected error %v\", err)",1319],["t.Errorf(\"%d: Unexpected non-error\", i)",738],["t.Fatalf(\"Unexpected result, Diff: %v\", testutil.Diff(expected, result))",748],["t.Errorf(\"Unexpected error %#v\", err)",1338],["t.Fatalf(\"Unexpected error: %v\", err)",6487],["t.Errorf(\"Unexpected error: %v\", err)",4881],["t.Fatalf(\"Unexpected error %v\", err)",1613],["t.Errorf(\"Unexpected response %#v\", response)",1363],["t.Errorf(\"%d: Unexpected error: %v\", i, errs)",738]],"useCount":88780},{"word":"UnixNano","context":[["rand.Seed(time.Now().UTC().UnixNano())",1780],["popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))",261],["popr := math_rand2.New(math_rand2.NewSource(time2.Now().UnixNano()))",317],["now := time.Now().UnixNano()",449],["r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",454],["r := rand.New(rand.NewSource(time.Now().UnixNano()))",1239],["rand.Seed(time.Now().UnixNano())",2847],["clock := hlc.NewClock(manual.UnixNano)",522],["seed := time.Now().UnixNano()",14884],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425]],"useCount":61534},{"word":"Unlock","context":[["mu.Unlock()",2329],["c.mu.Unlock()",2946],["defer c.mu.Unlock()",2974],["defer f.Unlock()",3547],["defer c.Unlock()",4217],["c.Unlock()",4682],["defer s.mu.Unlock()",5737],["s.mu.Unlock()",5960],["n.Unlock()",2587],["defer oprw.Unlock()",6518]],"useCount":274743},{"word":"Unmarshal","context":[["// BEGIN Unmarshal arguments from response.",2807],["if err := m.ObjectMeta.Unmarshal(data[iNdEx:postIndex]); err != nil {",1792],["if err := github_com_gogo_protobuf_proto.Unmarshal(dAtA, msg); err != nil {",2439],["_ = github_com_gogo_protobuf_proto.Unmarshal(littlefuzz, msg)",2567],["if err := github_com_gogo_protobuf_proto.Unmarshal(data, msg); err != nil {",7079],["req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)",5739],["if err := json.Unmarshal(resp, &r); err != nil {",5002],["if err := json.Unmarshal(b, &r); err != nil {",3252],["// END Unmarshal arguments from response.",2807],["if err := github_com_gogo_protobuf_proto.Unmarshal(datas[i%10000], msg); err != nil {",3089]],"useCount":204622},{"word":"Update","context":[["if err := db.Update(func(tx *bolt.Tx) error {",624],["// Update alters the status subset of an object.",537],["err := db.Update(func(tx *bolt.Tx) error {",452],["err = db.Update(func(tx *bolt.Tx) error {",418],["type Update struct {",366],["return r.store.Update(ctx, obj)",354],["// TODO: Update this to follow our convention for oneOf, whatever we decide it",343],["err = idx.Update(doc)",324],["db.Update(func(tx *bolt.Tx) error {",2491],["glog.Errorf(\"Update channel is closed. Exiting the sync loop.\")",298]],"useCount":85449},{"word":"Usage","context":[["// Usage:",905],["flag.Usage()",6074],["flag.Usage = usage",1772],["// Usage",1033],["fmt.Fprintf(os.Stderr, \"Usage:\\n\\t%s\\n\", usageBits)",1957],["Usage()",1989],["flag.Usage = func() {",2215],["// Usage example:",3149],["Usage:",3980],["cmd.Usage()",3990]],"useCount":74395},{"word":"Use","context":[["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to",6580],["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["// Use of this source code is governed by an ISC",4711],["// where the request originates. Use this if you want to enforce",2283],["// request. Use googleapi.IsNotModified to check whether the response",12114],["// at all) in error.(*googleapi.Error).Header. Use",2016],["// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check",1884],["// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified",6692]],"useCount":118021},{"word":"User","context":[["// in the IAM User Guide.",1826],["UserAgent string // optional additional User-Agent fragment",2098],["out.User = in.User",2357],["out.User = in.User",2357],["//       \"description\": \"User profile ID associated with this request.\",",2944],["// in the Amazon Elastic Compute Cloud User Guide.",4599],["type User struct {",4655],["reqHeaders.Set(\"User-Agent\", c.s.userAgent())",11905],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852]],"useCount":207524},{"word":"V","context":[["glog.V(5).Infof(\"pod default case, pending\")",300],["if log.V(2) {",1877],["if log.V(3) {",600],["if log.V(4) {",478],["if glog.V(2) {",456],["if log.V(6) {",379],["glog.V(4).Infof(\"%v\", err)",356],["glog.V(10).Infof(",350],[") as V",313],["if log.V(1) {",3151]],"useCount":148301},{"word":"Val","context":[["c.Assert(set.Val(), Equals, \"OK\")",297],["Expect(set.Val()).To(Equal(\"OK\"))",1002],["LHS: &influxql.VarRef{Val: \"time\"},",533],["LHS: &influxql.VarRef{Val: \"region\"},",522],["LHS: &influxql.VarRef{Val: \"host\"},",462],["return &BooleanLiteral{Val: false}",455],["RHS: &influxql.StringLiteral{Val: \"hosta.influxdb.org\"},",411],["RHS: &influxql.StringLiteral{Val: \"uswest\"},",385],["Val string",342],["LHS: &influxql.VarRef{Val: \"load\"},",306]],"useCount":65274},{"word":"Validate","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["if err := v.Validate(); err != nil {",2076],["c.Validate(t, response, err)",1015],["if err := c.Validate(); err == nil {",815],["// TODO: Validate the params before sending",742],["w, e := c.Validate()",731],["if err := s.Validate(); err != nil {",659],["c.Validate(t, nil, err)",639],["// Validate checks if the operation is valid.",627],["if err := config.Validate(); err != nil {",562]],"useCount":64730},{"word":"Value","context":[["out.Value = in.Value",2374],["Value        string `json:\"value,omitempty\"`",1939],["Value: aws.String(\"String\"),",1484],["Value:  \"\",",1447],["out.Value = in.Value",2374],["Value: \"\",",2704],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["Value string",3036],["Value string `json:\"value,omitempty\"`",3152],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509]],"useCount":442204},{"word":"ValueOf","context":[["rv := reflect.ValueOf(v)",2469],["env.Funcs[\"v2\"] = reflect.ValueOf(v2)",601],["env.Funcs[\"f\"] = reflect.ValueOf(f)",605],["env.Vars[\"is\"] = reflect.ValueOf(&is)",601],["env.Funcs[\"mt\"] = reflect.ValueOf(mt)",601],["env.Funcs[\"e\"] = reflect.ValueOf(e)",601],["env.Funcs[\"vt\"] = reflect.ValueOf(vt)",601],["env.Funcs[\"v1\"] = reflect.ValueOf(v1)",601],["fieldValue.Set(reflect.ValueOf(&x))",775],["env.Funcs[\"ft\"] = reflect.ValueOf(ft)",601]],"useCount":70993},{"word":"Values","context":[["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["Values: [][]interface{}{[]interface{}{",1311],["values := url.Values{}",1027],["params := url.Values{}",2050],["Values: []*string{",2086],["params_       url.Values",3641],["v := url.Values{}",4608],["u := url.Values{}",4964],["params := make(url.Values)",36391],["q := url.Values{}",767]],"useCount":142389},{"word":"Version","context":[["var _ = googleapi.Version",3082],["Version string",1865],["Version: \"2\",",1465],["Version: 1,",1025],["r.SetVersion(Version)",800],["type Version struct {",743],["func Version() string {",729],["Version string `json:\"version\"`",705],["\"Version\": \"2012-10-17\",",640],["Version string `json:\"version,omitempty\"`",563]],"useCount":141707},{"word":"Wait","context":[["defer wg.Wait()",480],["cmd.Wait()",1231],["if err := cmd.Wait(); err != nil {",1140],["group.Wait()",850],["err = cmd.Wait()",820],["s.wg.Wait()",745],["wait.Wait()",711],["waitGroup.Wait()",541],["return w.Wait()",512],["wg.Wait()",23272]],"useCount":86743},{"word":"We","context":[["//We allow users to specify path to kubectl, so you can test either \"kubectl\" or \"cluster/kubectl.sh\"",257],["// We need to create some default port name if it's not specified, since",272],["// in the cache. We need to bypass the cache to get the latest set of",274],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["// check that pod got scheduled. We intentionally DO NOT check that the",365],["// launch a pod to find a node which can launch a pod. We intentionally do",396],["// We have to customize the randomization of TypeMetas because their",440],["// We recommend that you check IsTruncated after every call to ensure that you",550],["// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not",586],["// \texpected: \"We\",",714]],"useCount":109679},{"word":"Write","context":[["x.Write(oprot)",1920],["w.Write(output)",711],["if err2 = result.Write(oprot); err == nil && err2 != nil {",729],["out.Write(text)",743],["_, err = b.Write(buf)",835],["w.Write([]byte(\"hello\"))",910],["&Write{data: strings.Join(writes, \"\\n\")},",912],["w.Write([]byte(err.Error()))",947],["w.Write(b)",1619],["w.Write(data)",1709]],"useCount":177070},{"word":"WriteHeader","context":[["rw.WriteHeader(http.StatusBadRequest)",1078],["w.WriteHeader(code)",1572],["w.WriteHeader(500)",1754],["w.WriteHeader(http.StatusCreated)",2015],["w.WriteHeader(200)",3107],["w.WriteHeader(http.StatusNotFound)",3682],["w.WriteHeader(http.StatusOK)",10652],["w.WriteHeader(http.StatusInternalServerError)",5118],["w.WriteHeader(http.StatusNoContent)",4938],["w.WriteHeader(http.StatusBadRequest)",4159]],"useCount":75147},{"word":"WriteString","context":[["buf.WriteString(\"null\")",443],["_, err = b.WriteString(\", \")",550],["buf.WriteString(s)",568],["e.WriteString(\"null\")",618],["io.WriteString(w, msg)",643],["buffer.WriteString(\"\\n\")",672],["buf.WriteString(\" \")",729],["ctx.WriteString(part)",908],["buf.WriteString(\"\\n\")",1128],["buf.WriteString(\", \")",1280]],"useCount":97635},{"word":"Writer","context":[["type Writer interface {",412],["// It will perform exactly one Write to the underlying Writer.",446],["w := new(tabwriter.Writer)",594],["Stdout io.Writer",689],["Stderr io.Writer",694],["w io.Writer",896],["type Writer struct {",911],["return tabbedString(func(out io.Writer) error {",3519],["io.Writer",2431],["return tabbedString(func(out *tabwriter.Writer) error {",927]],"useCount":94779},{"word":"X","context":[["for x := b.Min.X; x < b.Max.X; x++ {",461],["th.TestHeader(t, r, \"X-Auth-Token\", fake.TokenID)",1087],["X int",1113],["for x := b.Min.X; x < b.Max.X; x++ {",461],["th.TestHeader(t, r, \"X-Auth-Token\", client.TokenID)",472],["if strings.HasPrefix(k, \"X-Meta-\") {",584],["req.Header.Set(\"X-Upload-Content-Type\", c.mediaType_)",605],["// key Purpose (regardless of what the tag's value is), and the tag value X",931],["// where Purpose is X, see the tag:key=value filter.",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931]],"useCount":100544},{"word":"XXX_unrecognized","context":[["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["XXX_unrecognized []byte  `json:\"-\"`",10132],["n += len(m.XXX_unrecognized)",8149],["XXX_unrecognized []byte `json:\"-\"`",6910],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["if m.XXX_unrecognized != nil {",14168],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834]],"useCount":160457},{"word":"You","context":[["// You can either specify an AWS account ID or optionally a single apos-apos",379],["// You can paginate the results using the MaxItems and Marker parameters.",319],["// You can also sort results in descending order based on the creation",326],["// is returned in a marker field of the response. You can retrieve the next",386],["// this action. You cannot use an IAM policy to constrain this action's parameters.",440],["// Operation: An identifier that uniquely identifies the operation. You",447],["// The token for the next set of items to return. (You received this token from",477],["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// with no spaces. You can also include any of the following characters: =,.@-",691],["// Note: You must call the \"Send\" method on the returned request object in order",13378]],"useCount":70794},{"word":"_","context":[["_ = i",30398],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["for _, test := range tests {",20305],["for _, tt := range tests {",22910],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["_, _, _ = h, z, r",60384],["_, _, _ = h, z, r",60384],["_, _, _ = h, z, r",60384],["_ = l",66539],["_ struct{} `type:\"structure\"`",70669]],"useCount":2852597},{"word":"_p0","context":[["r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))",476],["var _p0 *byte",14003],["_p0, err = BytePtrFromString(path)",10837],["use(unsafe.Pointer(_p0))",10242],["var _p0 unsafe.Pointer",6004],["_p0 = unsafe.Pointer(&_zero)",5922],["_p0 = unsafe.Pointer(&p[0])",2792],["_p0 = unsafe.Pointer(&buf[0])",1542],["_p0 = unsafe.Pointer(&b[0])",1148],["_p0, err = BytePtrFromString(oldpath)",640]],"useCount":74211},{"word":"a","context":[["//       \"pattern\": \"[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?\",",5612],["return a",13873],["// Creating a request object using this method should be used when you want to inject",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["return a, nil",8554],["if err := conv_a.Convert(a); err != nil {",6009],["//       \"pattern\": \"[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?\",",5612],["//       \"pattern\": \"[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?\",",5612],["// null. It is an error if a field in this list has a non-empty value.",4930],["a := &asset{bytes: bytes, info: info}",5153]],"useCount":4261552},{"word":"abc","context":[["{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"},",553],["api.LimitRange{ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: \"foo\"}, Spec: api.LimitRangeSpec{",1078],["Name:  \"abc-123\",",974],["SystemUUID:              \"abc\",",580],["Name:      \"abc\",",1219],["Name: \"abc\",",1594],["ObjectMeta: api.ObjectMeta{Name: \"abc\", Namespace: api.NamespaceDefault},",4914],["Name:      \"abc-123\",",1545],["SystemUUID:     \"abc\",",931],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547]],"useCount":65012},{"word":"about","context":[["// NodeStatus is information about the current status of a node.",695],["// Required. The object that this event is about.",524],["// For more information about ARNs, go to Amazon Resource Names (ARNs) and",608],["// NamespaceStatus is information about the current status of a Namespace.",634],["c.Logf(\"test %d: %s\", i, test.about)",599],["// A human-readable message indicating details about why the volume is in this state.",457],["// A human readable message indicating details about why the pod is in this state.",513],["For more about specifying packages, see 'go help packages'.",1006],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Human readable message indicating details about last transition.",456]],"useCount":159056},{"word":"access","context":[["// Optional: Path to access on the HTTP server.",541],["// access properties on the request object before or after sending the request. If",13378],["// This function is safe for concurrent access.",1627],["// authenticate once and get access to all their video and channel data,",847],["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// Required: Name or number of the port to access on the container.",541],["// allAuthenticatedUsers get READER access.",528],["//         \"Object owner gets OWNER access, and allAuthenticatedUsers get READER access.\",",514],["//         \"Object owner gets OWNER access, and project team owners get READER access.\",",514],["//         \"Object owner gets OWNER access, and allAuthenticatedUsers get READER access.\",",514]],"useCount":107195},{"word":"account","context":[["Account      string `json:\"account,omitempty\"`",2012],["if v, found := p.p[\"account\"]; found {",1195],["// account.",1139],["p.p[\"account\"] = v",1195],["u.Set(\"account\", v.(string))",1195],["//       \"description\": \"The ID of the managing account.\",",952],["// individual channel. The CMS account that the user authenticates with",717],["Account           string `json:\"account,omitempty\"`",713],["// to return a list of gateways for your account and region.",1344],["//       \"description\": \"Immutable id of the Google Apps account\",",518]],"useCount":98800},{"word":"action","context":[["// action.",3006],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// HTTPGetAction describes an action based on HTTP Get requests.",717],["// ExecAction describes a \"run in container\" action.",717],["// TCPSocketAction describes an action based on opening a socket",717],["switch action {",1357],["// Exec specifies the action to take.",718],["c.Assert(action, rectest.IsRecorded)",833],["//  Use a Resource element with the domain name to limit the action to only",846],["addParams(route, action.Params)",920]],"useCount":144818},{"word":"actual","context":[["if !reflect.DeepEqual(expected, actual) {",1705],["actual := strings.TrimSpace(plan.String())",1778],["if actual := strings.Trim(out, \"\\r\\n\"); actual != \"ok\" {",1453],["if actual := strings.Trim(out, \"\\r\\n\"); actual != \"ok\" {",1453],["t.Fatalf(\"bad: %#v\", actual)",1420],["t.Fatalf(\"bad:\\n%s\", actual)",2251],["t.Fatalf(\"bad: \\n%s\", actual)",2738],["if !reflect.DeepEqual(actual, expected) {",2743],["actual := strings.TrimSpace(state.String())",3368],["if actual != expected {",9135]],"useCount":163455},{"word":"add","context":[["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["// aws.Config parameter to add your extra config.",2272],["Add []Capability `json:\"add,omitempty\"`",301],["// TODO: add LastTransitionTime, Reason, Message to match NodeCondition api.",331],["// Not applicable for Windows as there is no concept of --cap-add",380],["// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line",410],["case \"add\":",543],["if add {",617],["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["// add HTTP headers to the request.",3239]],"useCount":116902},{"word":"addr","context":[["return addr, nil",612],["addrs = append(addrs, addr)",675],["for _, addr := range addrs {",2593],["if addr == \"\" {",1491],["return addr",1141],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["addr string",753],["if addr == nil {",754],["var addr string",785],["in, _, err := c.Exchange(m, addr.String())",761]],"useCount":165976},{"word":"address","context":[["// address.",671],["return result, address + 1, shift",944],["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["address string",605],["// EndpointAddress is a tuple that describes single IP address.",594],["Address string `json:\"address,omitempty\"`",485],["var address string",421],["Address string `json:\"address\"`",811],["for _, address := range node.Status.Addresses {",774],["// Server is the hostname or IP address of the NFS server",424]],"useCount":184437},{"word":"after","context":[["t.Errorf(\"size %v != after marshal proto.Size %v\", size, size3)",633],["// We recommend that you check IsTruncated after every call to ensure that you",550],["// Catches all undefined fields and must be empty after parsing.",555],["// Use this parameter only when paginating results and only after you receive",572],["// resource lists, and not reachable by name) after the time in this field. Once set, this",595],["// should retry (optionally after the time indicated in the Retry-After header).",654],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["// getting updates only after the object has changed since the last",12114],["// value can be used to capture response data after the request's \"Send\" method",13378],["// access properties on the request object before or after sending the request. If",13378]],"useCount":193634},{"word":"agent","context":[["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["addr, _ := srv.agent.config.ClientListener(\"\", srv.agent.config.Ports.DNS)",746],["\"agent-status\": M{",438],["\"agent-state\": \"started\",",587],["testutil.WaitForLeader(t, srv.agent.RPC, \"dc1\")",881],["defer agent.Shutdown()",951],["if err := srv.agent.RPC(\"Catalog.Register\", args, &out); err != nil {",985],["defer srv.agent.Shutdown()",1413],["\"github.com/juju/juju/agent\"",1468],["package agent",2345]],"useCount":90066},{"word":"all","context":[["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// as then you are sure you have configured all required params",4924],["// authenticate once and get access to all their video and channel data,",847],["// response was returned at all) in error.(*googleapi.Error).Header. Use",849],["return all",856],["// was returned at all) in error.(*googleapi.Error).Header. Use",864],["//   \"full\" - Include all properties.",924],["//         \"Include all properties.\",",1383],["// at all) in error.(*googleapi.Error).Header. Use",2016],["// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified",6692]],"useCount":450054},{"word":"allErrs","context":[["allErrs = append(allErrs, field.Required(fldPath.Child(\"name\"), \"\"))",585],["allErrs = append(allErrs, err)",547],["allErrs = append(allErrs, err)",547],["allErrs := []error{}",506],["allErrs = append(allErrs, field.Required(fldPath.Child(\"name\"), \"\"))",585],["allErrs := errs.ValidationErrorList{}",9255],["allErrs := fielderrors.ValidationErrorList{}",1244],["allErrs := validation.ErrorList{}",906],["allErrs := field.ErrorList{}",11293],["return allErrs",29236]],"useCount":184011},{"word":"allows","context":[["// cluster that read from etcd have code that allows them to read the new version.",170],["// registryBurst is the maximum size of a bursty pulls, temporarily allows",151],["// allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\").",228],["// different YouTube channels. It allows content owners to authenticate",231],["// This allows certificates to be validated by authenticators, while still allowing other auth types",244],["// YouTube channels. It allows content owners to authenticate once and",331],["// and allows a Source for provider-specific attributes",592],["// manage many different YouTube channels. It allows content owners to",1127],["// Fields allows partial responses to be retrieved. See",23003],["// Fields allows partial responses to be retrieved.",33360]],"useCount":86524},{"word":"already","context":[["// api.Container is already running by its hash. (We don't want to restart a container just",302],["// check that type already in binary is found",287],["// created and as well as the case when the condition already exists. When a new condition",271],["// IsImagePresent checks whether the container image is already in the local storage.",303],["// already when the kubelet does not know about its new label yet. The",319],["// RestartPolicy has already been first-order validated as per ValidatePodTemplateSpec().",382],["Logf(\"ReplicaSet %s was already deleted: %v\", name, err)",405],["// StatusReasonAlreadyExists means the resource you are creating already exists.",427],["Logf(\"RC %s was already deleted: %v\", name, err)",720],["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431]],"useCount":113129},{"word":"also","context":[["// Wait since the sync also uses sockets.",300],["// with no spaces. You can also include any of the following characters: =,.@-",691],["// should also match the data type of the specified uniform variable. The i",584],["// The disk must also be in the same GCE project and zone as the kubelet.",500],["// projects with their IDs, send a Projects: list request. You can also",305],["// and also when we cut V2, we should export a \"StreamOptions\" or somesuch that contains Stdin, Stdout, Stder and TTY",404],["// You can also sort results in descending order based on the creation",326],["// Syncs pods statuses with apiserver; also used as a cache of statuses.",307],["// This includes checking formatting and uniqueness.  It also canonicalizes the",313],["// The disk must also be in the same AWS zone as the kubelet.",317]],"useCount":77747},{"word":"alt","context":[["params.Set(\"alt\", alt)",10492],["params.Set(\"alt\", \"json\")",25051],["c.urlParams_.Set(\"alt\", alt)",23003],["c.urlParams_.Set(\"alt\", alt)",23003],["params.Set(\"alt\", alt)",10492],["// output in CSV format specify \"alt=csv\" as a query parameter.",231],["// It would be nice to set a fqdn subject alt name, but only the kubelets know, the apiserver is clueless",158],["func (c *OperationsGetCall) doRequest(alt string) (*http.Response, error) {",138],["func (c *OperationsListCall) doRequest(alt string) (*http.Response, error) {",129],["check.reportAltDecl(alt)",125]],"useCount":123761},{"word":"always","context":[["// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always",427],["\"mixed state #1 with restart always\",",211],["// DeleteResponder handles the response to the Delete request. The method always",503],["// This case should never be hit, the SDK should always return an",6736],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["// ListResponder handles the response to the List request. The method always",644],["// GetResponder handles the response to the Get request. The method always",615],["// PullAlways means that kubelet always attempts to pull the latest image.  Container will fail If the pull fails.",510],["var _ bytes.Buffer // always import bytes",336],["// After aggregating a point, it always tries to emit a value using the emitter.",224]],"useCount":69089},{"word":"an","context":[["// Message from an error.",19226],["// This case should never be hit, the SDK should always return an",6736],["// http.Response Body if it receives an error.",6600],["// non-2xx status code is an error. Response headers are in either",5221],["// This case should never be hit, The SDK should alwsy return an",5138],["// null. It is an error if a field in this list has a non-empty value.",4930],["// actually making the request, and provides an error response. If you have",6922],["// status code is an error. Response headers are in either",7314],["// code is an error. Response headers are in either",8983],["// Use of this source code is governed by an ISC",4711]],"useCount":843339},{"word":"and","context":[["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["// Redistribution and use in source and binary forms, with or without",3435],["// Redistribution and use in source and binary forms, with or without",3435],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// actually making the request, and provides an error response. If you have",6922],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",4249],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// ServerResponse contains the HTTP response code and headers from the",13928]],"useCount":1637882},{"word":"any","context":[["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// empty values are omitted from API requests. However, any field with",1097],["// load uniform variables defined as sampler types. Loading samplers with any",1168],["// The provided context supersedes any context provided to the Context method.",2234],["// It is not safe to mutate any of the client's properties though.",2270],["// for quota purposes for server-side applications. Can be any arbitrary",2611],["// values are omitted from API requests. However, any field with an",3833],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// empty values are omitted from API requests. However, any non-pointer,",38333]],"useCount":288793},{"word":"api","context":[["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["Spec: api.ReplicationControllerSpec{",8923],["Containers: []api.Container{",18714],["\"k8s.io/kubernetes/pkg/api\"",26465],["Spec: api.PodSpec{",28141],["ObjectMeta: api.ObjectMeta{",69360],["tweakSvc: func(s *api.Service) {",9537],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["package api",10116]],"useCount":1850927},{"word":"app","context":[["return app",791],["app.Action = func(c *cli.Context) {",708],["a := app.App{",608],["app.Flags = []cli.Flag{",1897],["err := app.CreateApp(&a, s.user)",797],["app := NewApp()",1025],["app := cli.NewApp()",4476],["package app",3318],["app.Run(os.Args)",2537],["app.Commands = []cli.Command{",2042]],"useCount":169463},{"word":"append","context":[["m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)",4124],["errs = append(errs, err)",3468],["b = append(b, s[i])",5079],["s = append(s, \"}\")",8321],["keys = append(keys, k)",3300],["b = append(b, tz...)",2752],["littlefuzz = append(littlefuzz, byte(popr.Intn(256)))",2720],["s = append(s, \"XXX_unrecognized:\"+fmt.Sprintf(\"%#v\", this.XXX_unrecognized)+\",\\n\")",5405],["b = append(b, []byte{0x20}...)",10577],["b = append(b, '0')",17498]],"useCount":820951},{"word":"application","context":[["w.Header().Set(\"Content-Type\", \"application/json\")",11021],["reqHeaders.Set(\"Content-Type\", \"application/json\")",4904],["req.Header.Set(\"Content-Type\", \"application/json\")",3191],["w.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")",1868],["w.Header().Add(\"Content-Type\", \"application/json\")",1637],["req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",1373],["ctype := \"application/json\"",17586],["w.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")",1140],["w.Header().Set(\"Content-Type\", \"application/vnd.docker.plugins.v1+json\")",1232],["req.Header.Add(\"Content-Type\", \"application/json\")",1212]],"useCount":128090},{"word":"are","context":[["// status code is an error. Response headers are in either",7314],["// non-2xx status code is an error. Response headers are in either",5221],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// as then you are sure you have configured all required params",4924],["// values are omitted from API requests. However, any field with an",3833],["// trailing dashes are allowed.",2533],["// Overrides userIp if both are provided.",2283],["// Validate inspects the fields of the type to determine if they are valid.",18383],["// code is an error. Response headers are in either",8983]],"useCount":702512},{"word":"arg","context":[["for _, arg := range args {",2921],["switch arg {",290],["args = append(args, arg...)",310],["for i, arg := range args {",1389],["if arg == nil {",383],["\"--build-arg\", fmt.Sprintf(\"%s=%s\", envKey, envVal),",789],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["func fcntl(fd int, cmd int, arg int) (val int, err error) {",490],["return fmt.Errorf(\"arg %v as int: %s\", key, err.Error())",588],["args = append(args, arg)",686]],"useCount":75412},{"word":"args","context":[["if len(args) < 1 {",2933],["return commands_util.ErrForWrongParams(expectedParams, paramValues, args)",2230],["// Only positional arguments should remain in args.",2230],["if err := cmd.Parse(args); err != nil {",2253],["for _, arg := range args {",2921],["if len(args) > 0 {",3784],["args := []string{",4846],["if len(args) == 0 {",5579],["if len(args) != 1 {",5831],["Run: func(cmd *cobra.Command, args []string) {",7815]],"useCount":539079},{"word":"arguments","context":[["// BEGIN Marshal arguments into request.",2807],["// arguments.",206],["// END Marshal arguments into request.",2807],["// END Unmarshal arguments from response.",2807],["// BEGIN Unmarshal arguments from response.",2807],["// Only positional arguments should remain in args.",2230],["// arguments. The number specified in the function should match the number of",584],["// Log the closure (no other arguments used)",407],["// NArg is the number of arguments remaining after flags have been processed.",303],["// the returned token in nextPageToken. Keep all other arguments unchanged.",286]],"useCount":64966},{"word":"array","context":[["// modify an entire array or part of an array. When loading n elements",584],["Type:        []string{\"array\"},",8756],["Type: []string{\"array\"},",962],["// variable array. The location of the uniform variable to be modified is",1010],["// starting at an arbitrary position m in a uniform variable array, elements",584],["// m + n - 1 in the array will be replaced with the new values. If m + n - 1",584],["codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)",622],["// array elements beyond the end of the array will be ignored. The number",584],["// array elements beyond the end of the array will be ignored. The number",584],["// variable array. A slice with length 1 should be used if modifying the value",584]],"useCount":83423},{"word":"as","context":[["// load uniform variables defined as sampler types. Loading samplers with any",1168],["// an empty value appearing in NullFields will be sent to the server as",1097],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["/* This code originated as a project for the COMP 520 class at McGill",916],["// server as null. It is an error if a field in this list has a",901],["// selects a specific revision of this object (as opposed to the latest",804],["// Not applicable on Windows as uses Unix specific functionality",2299],["// as then you are sure you have configured all required params",4924],["// Prefix indicates this name will be used as part of generation, in which case",2533],["// empty value appearing in NullFields will be sent to the server as",3833]],"useCount":517339},{"word":"assert","context":[["assert.Equal(t, err, nil)",3070],["assert.Nil(err)",4134],["assert.NoError(t, req.Error)",4830],["assert := assert.New(t)",8568],["assert := assert.New(t)",8568],["if assert.NoError(t, err) {",5588],["assert.Error(t, err)",5401],["assert.Nil(t, err)",12151],["\"github.com/stretchr/testify/assert\"",18896],["assert.NoError(t, err)",27740]],"useCount":310816},{"word":"associated","context":[["// the default service account is what is associated with pods when they do not specify a service account",256],["// root credentials even if the AWS account has no associated users.",261],["// so that we don't remove volumes associated with terminated but not yet",270],["// The ID attribute of the resource associated with the status StatusReason",282],["// by the user associated with the provided email address.",310],["// (hyphen), in which case Amazon Glacier uses the AWS account ID associated",379],["// The kind attribute of the resource associated with the status StatusReason.",429],["// The Causes array includes more details associated with the StatusReason",429],["// fails. The associated event attribute's cause parameter will be set to OPERATION_NOT_PERMITTED.",654],["//       \"description\": \"User profile ID associated with this request.\",",2944]],"useCount":70913},{"word":"ast","context":[["case *ast.ParenExpr:",899],["case *ast.GenDecl:",974],["package ast",979],["return ast.Function{",1045],["case *ast.FuncDecl:",1125],["case *ast.StarExpr:",1126],["Type:  ast.TypeString,",1358],["case *ast.SelectorExpr:",1773],["case *ast.Ident:",2505],["\"go/ast\"",5181]],"useCount":153973},{"word":"at","context":[["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// *Empty.ServerResponse.Header or (if a response was returned at all)",775],["// response was returned at all) in error.(*googleapi.Error).Header. Use",849],["// was returned at all) in error.(*googleapi.Error).Header. Use",864],["/* This code originated as a project for the COMP 520 class at McGill",916],["err = fmt.Errorf(\"Error reading asset info %s at %s: %v\", name, path, err)",939],["// at all) in error.(*googleapi.Error).Header. Use",2016],["// at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",788],["// A compilation error at this line likely means your copy of the",1437],["// *Operation.ServerResponse.Header or (if a response was returned at",1713]],"useCount":281795},{"word":"auth","context":[["//     \"https://www.googleapis.com/auth/compute\",",2840],["//     \"https://www.googleapis.com/auth/adsense\",",2088],["//     \"https://www.googleapis.com/auth/adsense.readonly\"",2088],["package auth",2139],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/drive\",",2939],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943]],"useCount":207349},{"word":"autorest","context":[["result.Response = autorest.Response{Response: resp}",11401],["autorest.AsJSON(),",4618],["autorest.WithQueryParameters(queryParameters))",6525],["autorest.WithBaseURL(client.BaseURI),",6605],["autorest.ByClosing())",7054],["err = autorest.Respond(",7003],["return autorest.SendWithSender(client, req)",4453],["autorest.ByUnmarshallingJSON(&result),",4323],["autorest.AsGet(),",3964],["preparer := autorest.CreatePreparer(",4314]],"useCount":102636},{"word":"available","context":[["// first, if it is available, then fall back on the default (as",669],["// released volumes must be recycled before becoming available again",592],["// than the MaxItems number of results even when there are more results available.",550],["// used for PersistentVolumes that are not available",543],["// available. In that case, the IsTruncated response element returns true and",494],["// is no information available. A Reason clarifies an HTTP status",432],["// empty there is no information available.",429],["// available.",681],["// Queried from cloud provider, if available.",802],["// NamespaceActive means the namespace is available for use in the system",608]],"useCount":90568},{"word":"aws","context":[["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"github.com/aws/aws-sdk-go/aws\"",7099],["aws.String(\"String\"), // Required",8342],["p := testProvider(\"aws\")",8743],["\"aws\": testProviderFuncFixed(p),",8933],["op := &aws.Operation{",5650],["package aws",4496],["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947]],"useCount":431306},{"word":"awserr","context":[["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["fmt.Println(\"Error:\", awserr.Code, awserr.Message)",1758],["if awserr := aws.Error(err); awserr != nil {",1775],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["if awserr := aws.Error(err); awserr != nil {",1775],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// error which satisfies the awserr.Error interface.",11875],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["// Print the error, cast err to awserr.Error to get the Code and",19219],["if awsErr, ok := err.(awserr.Error); ok {",14078]],"useCount":91781},{"word":"awsutil","context":[["awsutil.Cycle{",130],["\"github.com/gunosy/aws-sdk-go/aws/awsutil\"",117],["Request: awsutil.Request{",192],["Response: awsutil.Response{",192],["return awsutil.Prettify(s)",109113],["fmt.Println(awsutil.StringValue(resp))",10680],["return awsutil.StringValue(s)",4832],["fmt.Println(awsutil.Prettify(resp))",4421],["\"github.com/aws/aws-sdk-go/aws/awsutil\"",1524],["\"github.com/awslabs/aws-sdk-go/aws/awsutil\"",214]],"useCount":132874},{"word":"b","context":[["for i := 0; i < b.N; i++ {",52243],["msglen |= (int(b) & 0x7F) << shift",42857],["b = append(b, '0')",17498],["return b",19653],["return string(b)",19830],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["b.ResetTimer()",27111],["if b < 0x80 {",153986],["b := data[iNdEx]",137749],["wire |= (uint64(b) & 0x7F) << shift",32162]],"useCount":2149870},{"word":"bad","context":[["t.Fatalf(\"bad:\\n%s\", actual)",2251],["t.Fatalf(\"bad: %d\\n\\n%s\", code, ui.ErrorWriter.String())",1200],["cn.bad = true",1023],["t.Fatalf(\"bad: %v\", out)",925],["t.Fatalf(\"bad: %#v\", warns)",1349],["t.Fatalf(\"bad: %#v\", actual)",1420],["t.Fatalf(\"bad: %#v\", resp)",1644],["goto bad",1962],["t.Fatalf(\"bad: \\n%s\", actual)",2738],["t.Fatalf(\"bad: %#v\", config)",3311]],"useCount":115915},{"word":"bar","context":[["{Name: \"bar\"},",1457],["ID: \"bar\",",2962],["Name: \"bar\",",2711],["\"foo\": \"bar\",",7497],["Name:      \"bar\",",1711],["Selector: map[string]string{\"foo\": \"bar\"},",1255],["ID = bar",1242],["\"foo\":  \"bar\",",1148],["aws_instance.bar:",1092],["\"NoUppercaseOrSpecialCharsLike=Equals\": \"bar\",",1123]],"useCount":215479},{"word":"base","context":[["BasePath string // API endpoint base URL",705],["BasePath  string // API endpoint base URL",2098],["\"github.com/cockroachdb/cockroach/pkg/base\"",465],["base := link.Attrs()",570],["\"github.com/juju/juju/api/base\"",927],["\"github.com/cockroachdb/cockroach/base\"",905],["package base",844],["\"github.com/gogits/gogs/modules/base\"",796],["s, _, _ := serverutils.StartServer(t, base.TestServerArgs{})",768],["return base",601]],"useCount":105691},{"word":"be","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// pending HTTP request will be aborted if the provided context is",22537],["// Any pending HTTP request will be aborted if the provided context",4780],["// Context sets the context to be used in this call's Do method. Any",22537],["// Fields allows partial responses to be retrieved. See",23003],["// Creating a request object using this method should be used when you want to inject",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Fields allows partial responses to be retrieved.",33360],["// This case should never be hit, the SDK should always return an",6736],["// This case should never be hit, The SDK should alwsy return an",5138]],"useCount":1423813},{"word":"because","context":[["//   The request processing has failed because of an unknown error, exception",333],["// to check whether the returned error was because",6692],["// because http.StatusNotModified was returned.",9422],["// check whether the returned error was because http.StatusNotModified",6580],["// whether the returned error was because http.StatusNotModified was",1884],["// (needed to ensure safety because of naive import list construction.)",465],["// We have to customize the randomization of TypeMetas because their",440],["// pod is running because this will create a race condition with the",365],["// another server. Status code 500 is used because the HTTP spec provides no suitable",354],["// This is here because validation requires it.",364]],"useCount":119165},{"word":"been","context":[["// NodeTerminated means the node has been removed from the cluster.",681],["c.Fatal(\"The cache should have been invalided but hasn't.\")",738],["// NodePending means the node has been created/added by the system, but not configured.",681],["// NodeRunning means the node has been configured and has Kubernetes components running.",678],["c.Fatal(\"The cache should have been used but hasn't.\")",630],["t.Fatal(\"The cache should have been invalided but hasn't.\")",492],["// PodRunning means the pod has been bound to a node and all of the containers have been started.",588],["// PodPending means the pod has been accepted by the system, but one or more of the containers",588],["// PodRunning means the pod has been bound to a node and all of the containers have been started.",588],["// has not been started. This includes time before being bound to a node, as well as time spent",588]],"useCount":119603},{"word":"before","context":[["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["before := time.Now()",554],["// Length of time before health checking is activated.  In seconds.",555],["// has not been started. This includes time before being bound to a node, as well as time spent",588],["// released volumes must be recycled before becoming available again",592],["// created. It is not guaranteed to be set in happens-before order across separate operations.",601],["t.Errorf(\"size %v != before marshal proto.Size %v\", size, size2)",633],["// PreStop is called immediately before a container is terminated.  The reason for termination is",537],["// TODO: Validate the params before sending",742],["// access properties on the request object before or after sending the request. If",13378]],"useCount":155497},{"word":"being","context":[["// used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim",453],["// The suffix f indicates that floating-point values are being passed; the",584],["// is compatible with the grpc package it is being compiled against.",746],["// ObjectMeta describes the object that is being bound.",362],["//   \"id\"   string - the operation that is being attempted.",354],["// indicates that unsigned integer values are being passed, and this type",584],["// At least one container is still running or is in the process of being restarted.",588],["// suffix i indicates that integer values are being passed; the suffix ui",584],["// is compatible with the proto package it is being compiled against.",2473],["// has not been started. This includes time before being bound to a node, as well as time spent",588]],"useCount":68242},{"word":"big","context":[["serialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)",288],["serialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)",288],["case *big.Rat:",346],["SerialNumber: big.NewInt(1),",232],["\"math/big\"",9041],["stack.push(new(big.Int))",364],["case *big.Int:",539],["label: center/big",536],["package big",448],["import \"math/big\"",389]],"useCount":64526},{"word":"binary","context":[["* Redistribution and use in source and binary forms, with or without",1643],["Redistribution and use in source and binary forms, with or without",612],["// Redistribution and use in source and binary forms, with or without modification,",369],["*     * Redistributions in binary form must reproduce the above",979],["import \"encoding/binary\"",362],["// check construction and use of type not in binary",319],["Writes test binary as -c would.",296],["//     * Redistributions in binary form must reproduce the above",1736],["// Redistribution and use in source and binary forms, with or without",3435],["\"encoding/binary\"",16315]],"useCount":94706},{"word":"block","context":[["if block == nil {",1732],["display: block;",722],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["cert, err := x509.ParseCertificate(block.Bytes)",341],["// block.",316],["var block *pem.Block",312],["\"github.com/juju/juju/cmd/juju/block\"",347],["return block, nil",359],["return block",491],["block, err := aes.NewCipher(key)",570]],"useCount":165604},{"word":"body","context":[["var body io.Reader = nil",58552],["req, _ := http.NewRequest(\"PUT\", urls, body)",4835],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["body, err := ioutil.ReadAll(resp.Body)",8460],["req, _ := http.NewRequest(\"DELETE\", urls, body)",6246],["req, _ := http.NewRequest(\"PATCH\", urls, body)",3818],["</body>",3094],["<body>",3027],["// assert body",2474]],"useCount":386713},{"word":"bool","context":[["var yyhl3 bool = l >= 0",3894],["const yyr2 bool = false",4300],["done := make(chan bool)",3313],["ReadOnly bool `json:\"readOnly,omitempty\"`",3679],["SDKShapeTraits bool `type:\"structure\"`",68537],["var ok bool",10867],["DryRun *bool `locationName:\"dryRun\" type:\"boolean\"`",7393],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["case bool:",4604]],"useCount":1103568},{"word":"break","context":[["break L",801],["break WaitResponse",277],["break LOOP",483],["break outer",641],["break Loop",1951],["break out",2014],["break OpSwitch",2693],["break;",2916],["break loop",4971],["break",513552]],"useCount":551789},{"word":"bson","context":[["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["lenWriter := bson.NewLenWriter(buf)",313],["bson.Next(buf, 4)",315],["defer s.conn.Apps().Remove(bson.M{\"name\": app.Name})",345],["data, err := bson.Marshal(item.obj)",385],["bson.D{",578],["bson.M{",934],["\"labix.org/v2/mgo/bson\"",1263],["\"gopkg.in/mgo.v2/bson\"",5492],["defer s.conn.ServiceInstances().Remove(bson.M{\"name\": \"my-mysql\"})",275]],"useCount":79740},{"word":"bucket","context":[["//       \"description\": \"Name of a bucket.\",",2393],["//     \"bucket\": {",3187],["//     \"bucket\",",1986],["//     \"bucket\"",1199],["bucket              string",969],["bucket string",941],["\"bucket\": c.bucket,",3041],["c.bucket = bucket",3133],["c.bucket = bucket",3133],["\"bucket\": c.bucket,",3041]],"useCount":111663},{"word":"buf","context":[["var buf bytes.Buffer",31577],["return buf.String()",10966],["buf := new(bytes.Buffer)",10550],["buf.Reset()",4929],["buf := &bytes.Buffer{}",4759],["return buf",3619],["buf := bytes.NewBuffer([]byte{})",3555],["buf := bytes.NewBuffer(nil)",3515],["return buf.Bytes(), nil",2995],["return buf, nil",2516]],"useCount":527559},{"word":"buffer","context":[["return buffer",346],["var buffer bytes.Buffer",5736],["return buffer.String()",2296],["buffer := &bytes.Buffer{}",1503],["buffer := new(bytes.Buffer)",1322],["buffer.Reset()",772],["buffer.WriteString(\"\\n\")",672],["if buffer[position] != rune('e') {",494],["return buffer.Bytes(), nil",399],["buffer.WriteString(\", \")",353]],"useCount":120402},{"word":"bufio","context":[["\"bufio\"",31900],["scanner := bufio.NewScanner(reader)",447],["b := bufio.NewWriter(w)",536],["s := bufio.NewScanner(f)",550],["scanner := bufio.NewScanner(r)",628],["scanner := bufio.NewScanner(os.Stdin)",754],["import \"bufio\"",418],["scanner := bufio.NewScanner(f)",840],["reader := bufio.NewReader(os.Stdin)",1136],["scanner := bufio.NewScanner(file)",1757]],"useCount":76630},{"word":"build","context":[["// +build !ignore_autogenerated",1108],["package build",981],["// +build linux",3692],["// +build ignore",3114],["// build request",3041],["\"go/build\"",2837],["// +build !windows",2365],["// +build integration",991],["// +build windows",2581],["buildapi \"github.com/openshift/origin/pkg/build/api\"",1916]],"useCount":196818},{"word":"busybox","context":[["FROM busybox",6998],["`FROM busybox",5257],["dockerfile := `FROM busybox",464],["Image:   \"gcr.io/google_containers/busybox:1.24\",",807],["ctx, err := fakeContext(fmt.Sprintf(`FROM busybox",837],["dockerCmd(c, \"tag\", \"busybox\", repoName)",838],["c.Fatalf(\"Could not start daemon with busybox: %v\", err)",939],["dockerfile := fmt.Sprintf(`FROM busybox",1135],["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"top\")",1197],["ctx, err := fakeContext(`FROM busybox",3613]],"useCount":104686},{"word":"but","context":[["// PodPending means the pod has been accepted by the system, but one or more of the containers",588],["but: []string{",547],["// MustAsset is like Asset but panics when Asset would return an error.",590],["// string assigned to a user, but should not exceed 40 characters.",2611],["c.Fatal(\"The cache should have been invalided but hasn't.\")",738],["//     This defines the format, but not the length restriction, which should be",726],["// NodePending means the node has been created/added by the system, but not configured.",681],["if false { // reference the types, but skip this branch at build/run time",664],["// equivalent to the \"default\" namespace, but \"default\" is the canonical representation.",607],["c.Fatal(\"The cache should have been used but hasn't.\")",630]],"useCount":294560},{"word":"by","context":[["// Header returns an http.Header that can be modified by the caller to",3239],["// OAuth2 scopes used by this API.",2697],["// Code generated by protoc-gen-gogo.",3591],["// Code generated by protoc-gen-go.",3589],["// This file was generated by the swagger tool.",2864],["// This file was generated by counterfeiter",1800],["t.Errorf(\"Can't find the plugin by name\")",1899],["// Populated by the system.",2256],["// Must be a filesystem type supported by the host operating system.",2721],["// Use of this source code is governed by an ISC",4711]],"useCount":619691},{"word":"byte","context":[["buf := bytes.NewBuffer([]byte{})",3555],["case []byte:",5044],["b := make([]byte, 0, l)",5156],["data = make([]byte, size)",28307],["var _p0 *byte",14003],["b := make([]byte, 0, 32)",11443],["b = append(b, []byte{0x20}...)",10577],["XXX_unrecognized []byte  `json:\"-\"`",10132],["data[i] = byte(popr.Intn(256))",6917],["XXX_unrecognized []byte `json:\"-\"`",6910]],"useCount":1282634},{"word":"bytes","context":[["var buf bytes.Buffer",31577],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["buf := bytes.NewBuffer([]byte{})",3555],["buf := &bytes.Buffer{}",4759],["var buffer bytes.Buffer",5736],["a := &asset{bytes: bytes, info: info}",5153],["a := &asset{bytes: bytes, info: info}",5153],["\"bytes\"",123389],["var b bytes.Buffer",7044],["buf := new(bytes.Buffer)",10550]],"useCount":640817},{"word":"c","context":[["c.Fatal(err)",59126],["c.Assert(err, gc.IsNil)",75298],["req = c.newRequest(op, input, output)",46423],["res, err := c.doRequest(\"json\")",33446],["c.Assert(err, jc.ErrorIsNil)",135421],["return c",267226],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["c.ctx_ = ctx",30863],["c.Assert(err, check.IsNil)",82873],["c.Assert(err, IsNil)",104368]],"useCount":5649769},{"word":"cache","context":[["\"github.com/GoogleCloudPlatform/kubernetes/pkg/client/cache\"",688],["store := cache.NewStore(cache.MetaNamespaceKeyFunc)",652],["store := cache.NewStore(cache.MetaNamespaceKeyFunc)",652],["tombstone, ok := obj.(cache.DeletedFinalStateUnknown)",641],["c.Fatal(\"The cache should have been used but hasn't.\")",630],["\"k8s.io/kubernetes/pkg/client/cache\"",4405],["&cache.ListWatch{",3229],["listWatch := &cache.ListWatch{",602],["package cache",2167],["c.Fatal(\"The cache should have been invalided but hasn't.\")",738]],"useCount":153700},{"word":"call","context":[["ctx.enqueue(call{",826],["call := &googleapi.Call{",4744],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// Context sets the context to be used in this call's Do method. Any",22537],["// Context sets the context to be used in this call's Do method.",4699],["// Perform the SOAP call.",2807],["return returnValue, c.caller_.Do(c.context_, c.s.client, call)",2124],["return returnValue, c.caller_.Do(googleapi.NoContext, c.s.client, call)",1955],["response, err := call.Do()",1600],["// values assigned to them by a call to Uniform* until the next successful",1594]],"useCount":261020},{"word":"called","context":[["if !called {",1085],["if !selfLinker.called {",800],["// exist than the specified MaxRecords value, a pagination token called a marker",736],["t.Error(\"Wrong command called\")",686],["c.Assert(called, jc.IsTrue)",537],["called := false",1156],["var called bool",1398],["called = true",2335],["// PreStop is called immediately before a container is terminated.  The reason for termination is",537],["// is called.",13495]],"useCount":110971},{"word":"calls","context":[["c.Check(helper.calls[2], Equals, \"Test1\")",259],["// Utility interface that provides API calls to the provider to attach/detach disks.",274],["c.Check(helper.calls[1], Equals, \"SetUpTest\")",448],["// A ServiceName is the name of the service the client will make API calls to.",445],["// Status is a return value for calls that don't return other objects.",439],["c.Check(helper.calls[3], Equals, \"TearDownTest\")",337],["// storage puts strong typing around storage calls",321],["mediaSize_       int64 // mediaSize, if known.  Used only for calls to progressUpdater_.",298],["calls++",282],["c.Check(helper.calls[0], Equals, \"SetUpSuite\")",485]],"useCount":61860},{"word":"can","context":[["// TODO: Inefficient conversion - can we improve it?",2317],["// with no spaces. You can also include any of the following characters: =,.@-",691],["// AttributeValueList can contain only one AttributeValue element of type String,",723],["// Documentation on downloading objects from requester pays buckets can be found",788],["// were truncated, you can make a subsequent pagination request using the Marker",836],["t.Fatalf(\"can't mkdir(%q): %s\", root, err)",1410],["// Note: This operation can generate multiple requests to a service.",1419],["// Error can be either of the following types:",1860],["// Header returns an http.Header that can be modified by the caller to",3239],["// value can be used to capture response data after the request's \"Send\" method",13378]],"useCount":452032},{"word":"cannot","context":[["// cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax",574],["// that cannot be changed.",875],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["// this action. You cannot use an IAM policy to constrain this action's parameters.",440],["// newResourceQuota is updated with fields that cannot be changed.",438],["//      Hypens ('-') cannot be leading or trailing character of the string",426],["//      and cannot be adjacent to other hyphens.",426],["// newPv is updated with fields that cannot be changed.",420]],"useCount":123747},{"word":"case","context":[["case 0:",19207],["case 4:",15448],["case string:",15157],["case nil:",12334],["case 3:",22425],["case 2:",39233],["case 1:",52938],["case 5:",10358],["case <-done:",7188],["case float64:",6780]],"useCount":2019933},{"word":"cc","context":[["cc.mu.Lock()",2114],["cc.mu.Unlock()",1854],["cc *grpc.ClientConn",1686],["\"cc\",",1229],["defer cc.mu.Unlock()",993],["cc := rl.cc",750],["cc := rl.cc",750],["cc.wmu.Lock()",732],["tc := testpb.NewTestServiceClient(cc)",592],["return cc, nil",579]],"useCount":85681},{"word":"cfg","context":[["cfg,",2410],["cfg, err := config.New(config.NoDefaults, attrs)",613],["if cfg == nil {",818],["return cfg",1866],["return cfg, nil",1437],["cfg, err := config.New(config.NoDefaults, s.TestConfig.Merge(coretesting.Attrs{",342],["func(cfg *cloudinit.Config) {",401],["env, err := environs.New(cfg)",458],["var cfg Config",465],["return cfg, err",519]],"useCount":159389},{"word":"ch","context":[["return ch",3960],["ch := make(chan struct{})",2372],["<-ch",3715],["defer close(ch)",1858],["case <-ch:",1799],["ch <- true",1683],["ch <- struct{}{}",1066],["switch ch {",1031],["ch := make(chan bool)",954],["close(ch)",4831]],"useCount":139716},{"word":"chan","context":[["done := make(chan error)",1043],["c := make(chan bool)",1283],["errChan := make(chan error)",1297],["c := make(chan os.Signal, 1)",1779],["stopCh := make(chan struct{})",2054],["ch := make(chan struct{})",2372],["done := make(chan bool)",3313],["errc := make(chan error, 1)",1108],["done := make(chan struct{})",4483],["c := make(chan int)",1043]],"useCount":255467},{"word":"change","context":[["for _, change := range changes {",301],["// Ignore whitespace since that's what were verifying doesn't change stuff",384],["// The functions Uniform{1|2|3|4}{f|i|ui} are used to change the value of the",584],["// the server on successful creation of a resource and is not allowed to change on PUT",594],["// concurrency, change detection, and the watch operation on a resource or set of resources.",594],["// TODO: this design is not final and this field is subject to change in the future.",706],["change: watcher.Change{",1420],["// any new change seen, will run a sync against desired state and running state. If",358],["change := Change{",343],["// This template is unit-tested in kubectl, so if you change it, update the unit test.",279]],"useCount":84710},{"word":"changed","context":[["if changed {",9364],["// getting updates only after the object has changed since the last",12114],["changed = true",11027],["return v, changed",4153],["return nil, changed",3873],["// that cannot be changed.",875],["var changed bool",467],["// not be changed by updates.",486],["if !changed {",562],["changed := false",953]],"useCount":92411},{"word":"changes","context":[["for _, change := range changes {",301],["return changes, nil",520],["// changes.",461],["// no changes are seen to the configuration, will synchronize the last known desired",358],["// syncLoop is the main loop for processing changes. It watches for changes from",344],["// start the container again to pickup changes",447],["// syncLoop is the main loop for processing changes. It watches for changes from",344],["return changes",309],["// Watches changes to all pods",311],["if len(changes) == 0 {",315]],"useCount":77019},{"word":"channel","context":[["// channel that the onBehalfOfContentOwnerChannel parameter value",440],["return channel",415],["t.Errorf(\"watching channel should be open\")",483],["body, err := googleapi.WithoutDataWrapper.JSONReader(c.channel)",583],["c.channel = channel",592],["c.channel = channel",592],["// channel.",664],["channel <- podUpdate",703],["// individual channel. The CMS account that the user authenticates with",717],["// authenticate once and get access to all their video and channel data,",847]],"useCount":100753},{"word":"check","context":[["// check whether the returned error was because http.StatusNotModified",6580],["// to check whether the returned error was because",6692],["c.Assert(err, check.NotNil)",7474],["gc \"gopkg.in/check.v1\"",9251],["check(err)",5063],[". \"gopkg.in/check.v1\"",4387],["sc.serveG.check()",3320],["// googleapi.IsNotModified to check whether the returned error was",9322],["// request. Use googleapi.IsNotModified to check whether the response",12114],["c.Assert(err, check.IsNil)",82873]],"useCount":559644},{"word":"checker","context":[["c.Assert(err, checker.IsNil)",16743],["\"github.com/docker/docker/pkg/integration/checker\"",1332],["c.Assert(waitRun(id), checker.IsNil)",436],["c.Assert(err, checker.NotNil, check.Commentf(out))",447],["c.Assert(status, checker.Equals, http.StatusNoContent)",523],["c.Assert(status, checker.Equals, http.StatusCreated)",568],["c.Assert(out, checker.Contains, expected)",727],["c.Assert(err, checker.NotNil)",1192],["c.Assert(err, checker.IsNil, check.Commentf(out))",1006],["c.Assert(status, checker.Equals, http.StatusOK)",739]],"useCount":70903},{"word":"cli","context":[["Flags: []cli.Flag{",7458],["cli.StringFlag{",13352],["\"github.com/codegangsta/cli\"",7214],["cli.BoolFlag{",5176],["app := cli.NewApp()",4476],["Action: func(c *cli.Context) {",4387],["package cli",3154],["\"github.com/cloudfoundry/cli/cf/models\"",2208],["app.Commands = []cli.Command{",2042],["ui := new(cli.MockUi)",1997]],"useCount":202370},{"word":"client","context":[["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["return c.s.client.Do(req)",25977],["res, err := c.s.client.Do(req)",25048],["return gensupport.SendRequest(c.ctx_, c.s.client, req)",7518],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["client.ByInspecting(),",6991],["autorest.WithBaseURL(client.BaseURI),",6605],["package client",9340],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138]],"useCount":919233},{"word":"close","context":[["defer close(ch)",1858],["defer h.close()",951],["close(stopCh)",773],["defer close(stopCh)",1107],["close(out)",1246],["close(ch)",4831],["close(done)",4047],["close(storeChannel)",3006],["defer close(done)",1973],["close(c)",2687]],"useCount":128085},{"word":"closed","context":[["closed bool",1783],["case <-closed:",709],["if s.closed {",678],["go func(done <-chan struct{}, closed <-chan bool) {",600],["s.closed = true",565],["if db.closed {",468],["c.closed = true",420],["closed    bool",404],["if closed {",352],["if c.closed {",387]],"useCount":68025},{"word":"cloud","context":[["// to the cloud provider?",495],["//     \"https://www.googleapis.com/auth/cloud.useraccounts\",",643],["cloud cloudprovider.Interface,",639],["if kl.cloud != nil {",638],["\"github.com/juju/juju/cloud\"",539],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["// Queried from cloud provider, if available.",802],["CloudPlatformScope = \"https://www.googleapis.com/auth/cloud-platform\"",922],["//     \"https://www.googleapis.com/auth/cloud-platform.read-only\",",1870]],"useCount":68919},{"word":"cluster","context":[["// NodeTerminated means the node has been removed from the cluster.",681],["// DNSClusterFirst indicates that the pod should use cluster DNS",669],["// cluster.",560],["cluster.Lock()",544],["// ComponentStatus (and ComponentStatusList) holds the cluster validation info.",555],["Cluster *string `locationName:\"cluster\" type:\"string\"`",548],["// Event is a report of an event somewhere in the cluster.",704],["\"github.com/docker/swarm/cluster\"",496],["cluster.Unlock()",715],["package cluster",1249]],"useCount":171051},{"word":"cmd","context":[["cmd.Stderr = os.Stderr",4643],["cmd := &cobra.Command{",5761],["if err := cmd.Run(); err != nil {",4108],["c.Process(cmd)",4006],["cmd.Usage()",3990],["cmd.Stdout = os.Stdout",3832],["package cmd",8750],["Run: func(cmd *cobra.Command, args []string) {",7815],["out, _, err := runCommandWithOutput(cmd)",6363],["return cmd",15215]],"useCount":530253},{"word":"code","context":[["// non-2xx status code is an error. Response headers are in either",5221],["// Use of this source code is governed by an ISC",4711],["// Always reference these packages, just in case the auto-generated code",3048],["w.WriteHeader(code)",1572],["Code string `json:\"code,omitempty\"`",1416],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// status code is an error. Response headers are in either",7314],["// code is an error. Response headers are in either",8983],["// ServerResponse contains the HTTP response code and headers from the",13928],["// Any non-2xx status code is an error. Response headers are in either",1236]],"useCount":308268},{"word":"codec1978","context":[["if codec1978.GenVersion != 5 {",610],["5, codec1978.GenVersion, file)",610],["codec1978 \"github.com/ugorji/go/codec\"",635],["z, r := codec1978.GenHelperEncoder(e)",17991],["z, r := codec1978.GenHelperDecoder(d)",42393],["func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {",159],["func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {",159],["func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {",159],["func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {",159],["func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {",159]],"useCount":121360},{"word":"codecSelfer1234","context":[["func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {",159],["type codecSelfer1234 struct{}",622],["func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {",125],["func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {",125],["func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {",125],["var h codecSelfer1234",59656],["func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {",125],["func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {",159],["func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {",159],["func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {",159]],"useCount":68196},{"word":"codecSelferC_UTF81234","context":[["r.EncodeString(codecSelferC_UTF81234, string(\"metadata\"))",3900],["r.EncodeString(codecSelferC_UTF81234, string(x.Name))",1636],["r.EncodeString(codecSelferC_UTF81234, string(\"items\"))",1977],["r.EncodeString(codecSelferC_UTF81234, string(\"kind\"))",4854],["r.EncodeString(codecSelferC_UTF81234, \"\")",14602],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["r.EncodeString(codecSelferC_UTF81234, string(x.Kind))",9708],["r.EncodeString(codecSelferC_UTF81234, string(\"apiVersion\"))",4865],["r.EncodeString(codecSelferC_UTF81234, string(x))",1560],["r.EncodeString(codecSelferC_UTF81234, string(\"status\"))",1583]],"useCount":115836},{"word":"codecSelfer_containerArrayElem1234","context":[["codecSelfer_containerArrayElem1234 = 6",589],["z.EncSendContainerState(codecSelfer_containerArrayElem1234)",51551],["z.DecSendContainerState(codecSelfer_containerArrayElem1234)",58067]],"useCount":110207},{"word":"codecSelfer_containerArrayEnd1234","context":[["z.DecSendContainerState(codecSelfer_containerArrayEnd1234)",67764],["z.EncSendContainerState(codecSelfer_containerArrayEnd1234)",12878],["codecSelfer_containerArrayEnd1234  = 7",589]],"useCount":81231},{"word":"com","context":[[". \"github.com/onsi/gomega\"",18984],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],[". \"github.com/onsi/ginkgo\"",19358],["\"github.com/stretchr/testify/assert\"",18896],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["\"github.com/spf13/cobra\"",12575],["\"github.com/juju/errors\"",11886],["\"github.com/Sirupsen/logrus\"",11173],["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["\"github.com/golang/glog\"",24041]],"useCount":1963907},{"word":"command","context":[["Command []string `json:\"command,omitempty\"`",783],["// Command is the command line to execute inside the container, the working directory for the",722],["// command.",734],["// specified in the name of the command indicates the number of components",584],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["package command",4143],["// Container in which to execute the command.",559],["t.Error(\"Wrong command called\")",686],["switch command {",671],["// of the command must match the data type for the specified uniform variable",584]],"useCount":225178},{"word":"common","context":[["result.Results[i].Error = common.ServerError(common.ErrPerm)",766],["\"github.com/juju/juju/apiserver/common\"",1705],["result.Results[i].Error = common.ServerError(err)",1648],["\"github.com/ethereum/go-ethereum/common\"",1399],["\"github.com/prometheus/common/model\"",998],["return nil, common.ErrPerm",805],["result.Results[i].Error = common.ServerError(common.ErrPerm)",766],["\"github.com/elastic/beats/libbeat/common\"",642],["// PersistentVolumeClaimSpec describes the common attributes of storage devices",592],["package common",4399]],"useCount":125810},{"word":"conf","context":[["if err := ioutil.WriteFile(\"/etc/resolv.conf\", resolvConfSystem, 0644); err != nil {",793],["iprog, err := conf.Load()",406],["return conf",766],["if err := ioutil.WriteFile(\"/etc/resolv.conf\", origResolvConf, 0644); err != nil {",404],["return conf, nil",493],["package conf",493],["var conf Config",434],["if err := ioutil.WriteFile(\"/etc/resolv.conf\", tmpResolvConf, 0644); err != nil {",461],["if conf == nil {",498],["c.Fatalf(\"/etc/resolv.conf does not exist\")",468]],"useCount":90988},{"word":"config","context":[["&config.Field{",2872],["if config == nil {",2335],["t.Fatalf(\"bad: %#v\", config)",3311],["Visible:      config.VisibleYes,",2307],["package config",6876],["config := meta.(*Config)",2395],["return config",2451],["\"github.com/juju/juju/environs/config\"",2815],["return config, nil",2529],["config: Config{",2509]],"useCount":677270},{"word":"configuration","context":[["// If additional configuration is needed for the client instance use the optional",2272],["testconfig \"github.com/cloudfoundry/cli/testhelpers/configuration\"",1171],["// configuration.",1130],["\"github.com/cloudfoundry/cli/cf/configuration/coreconfig\"",1051],["// ReplicationController represents the configuration of a replication controller.",716],["// automatically. Name is primarily intended for creation idempotence and configuration",600],["\"github.com/cloudfoundry/cli/cf/configuration/core_config\"",1331],["\"code.cloudfoundry.org/cli/cf/configuration/coreconfig\"",408],["glog.Fatalf(\"Invalid API configuration: %v\", err)",457],["// Here you will define your flags and configuration settings.",362]],"useCount":110754},{"word":"conn","context":[["return conn, nil",2498],["conn := meta.(*AWSClient).ec2conn",1686],["if conn == nil {",1607],["defer conn.Close()",14851],["conn.Close()",10441],["defer s.conn.Apps().Remove(bson.M{\"name\": a.Name})",1331],["return conn",1118],["err := s.conn.Apps().Insert(a)",1108],["conn, err := db.Conn()",2262],["c.conn.Close()",1012]],"useCount":240949},{"word":"connection","context":[["// Close closes the connection.",423],["// connection.",933],["t.Fatalf(\"Unexpected error creating streaming connection: %s\", err)",254],["// The ID of the VPC peering connection.",258],["defer connection.Close()",277],["t.Fatalf(\"error connection to database, %v\", err)",302],["// data between stream (representing the user's local connection on their",365],["type connection struct {",404],["// URIScheme identifies the scheme used for connection to a host for Get actions",426],["if strings.Contains(err.Error(), \"connection refused\") {",505]],"useCount":99079},{"word":"const","context":[["const apiVersion = \"v1\"",1097],["const _ = proto.ProtoPackageIsVersion1",458],["const _ = proto.GoGoProtoPackageIsVersion1",562],["const _ = grpc.SupportPackageIsVersion3",412],["const debug = false",599],["const MaxSecretSize = 1 * 1024 * 1024",626],["const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package",674],["const yyr2 bool = false",4300],["const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package",725],["const (",251804]],"useCount":432929},{"word":"container","context":[["for _, container := range containers {",1887],["\"container/list\"",3181],["container.Lock()",1939],["for _, container := range pod.Spec.Containers {",2060],["container: &api.Container{",2149],["if container == nil {",2578],["kubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"",2519],["defer container.Unlock()",1354],["\"container/heap\"",1418],["package container",1405]],"useCount":711591},{"word":"containers","context":[["\"containers\": [",693],["if len(containers) == 0 {",700],["for _, c := range containers {",1728],["for _, container := range containers {",1887],["// \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered",671],["// the event) or if no container name is specified \"spec.containers[2]\" (container with",671],["t.Errorf(\"Unexpected containers created %v\", fakeDocker.Created)",664],["Containers: containers,",651],["// Limit that applies to all containers in a namespace",648],["for i := range containers {",643]],"useCount":163652},{"word":"contains","context":[["// ServerResponse contains the HTTP response code and headers from the",13928],["// in the list, leading to the insertion of a tombstone object which contains",460],["// LoadBalancer contains the current status of the load-balancer,",485],["// Marker contains a value to include in the subsequent call that tells the",494],["// SecretTypeDockercfg contains a dockercfg file that follows the same format rules as ~/.dockercfg",503],["// SecretTypeServiceAccountToken contains a token that identifies a service account to the API",513],["// For example if you run go-bindata on data/... and data contains the",699],["// ObjectReference contains enough information to let you inspect or modify the referred object.",706],["// When IsTruncated is true, this element is present and contains the value",718],["//       \"description\": \"Project ID of the project that contains the instance.\",",966]],"useCount":116694},{"word":"content","context":[["// manage many different YouTube channels. It allows content owners to",1127],["// exclusively for YouTube content partners.",1618],["//     \"https://www.googleapis.com/auth/content\"",1388],["c.Fatalf(\"failed to write tar file content: %v\", err)",561],["Content string `json:\"content,omitempty\"`",591],["// parameter is intended for YouTube content partners that own and",847],["// on behalf of the content owner specified in the parameter value. This",847],["content, _ := ioutil.ReadFile(s.d.logFile.Name())",807],["// must be linked to the specified YouTube content owner.",717],["// ----- content types ----",610]],"useCount":115924},{"word":"context","context":[["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["\"golang.org/x/net/context\"",29586],["ctx context.Context,",3098],["// pending HTTP request will be aborted if the provided context is",22537],["// Context sets the context to be used in this call's Do method.",4699],["// Any pending HTTP request will be aborted if the provided context",4780],["ctx_       context.Context",6867],["ctx := context.Background()",8554],["ctx_         context.Context",9933],["// Context sets the context to be used in this call's Do method. Any",22537]],"useCount":432801},{"word":"continue","context":[["continue loop",1262],["// ok to continue",626],["// NextPageToken: A token used to continue a truncated list request",690],["// previous list request truncated by maxResults. Used to continue a",889],["continue waitLoop",1073],["continue outer",611],["continue OUTER",577],["// NextPageToken: [Output Only] A token used to continue a truncated",557],["continue;",1102],["continue",437040]],"useCount":473422},{"word":"controller","context":[["// ReplicationControllerSpec is the specification of a replication controller.",584],["// ReplicationController represents the configuration of a replication controller.",716],["// controller.",720],["controller.NoResyncPeriodFunc(),",461],["ct \"github.com/flynn/flynn/controller/types\"",569],["controller.Run()",576],["fakePodControl := controller.FakePodControl{}",1235],["package controller",2063],["\"k8s.io/kubernetes/pkg/controller\"",1781],["\"k8s.io/kubernetes/pkg/controller/framework\"",1333]],"useCount":135696},{"word":"conversion","context":[["conversion \"k8s.io/kubernetes/pkg/conversion\"",1475],["conversion \"k8s.io/kubernetes/pkg/conversion\"",1475],["\"k8s.io/kubernetes/pkg/conversion\"",1231],["if err := s.DefaultConvert(in, out, conversion.IgnoreMissingFields); err != nil {",753],["// unable to generate simple pointer conversion for unversioned.Time -> unversioned.Time",550],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/conversion\"",538],["// +k8s:conversion-gen=false",518],["return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)",435],["// If one of the conversion functions is malformed, detect it immediately.",1915],["// TODO: Inefficient conversion - can we improve it?",2317]],"useCount":136775},{"word":"copy","context":[["// A compilation error at this line likely means your copy of the",1437],["copy(*out, in)",1518],["i += copy(data[i:], v)",1201],["i += copy(data[i:], m.Name)",1664],["copy(littlefuzz, data)",1942],["copy(*out, *in)",2091],["i += copy(data[i:], k)",2627],["i += copy(data[i:], s)",2694],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",4249],["i += copy(data[i:], m.XXX_unrecognized)",5543]],"useCount":144817},{"word":"core","context":[["core \"k8s.io/kubernetes/pkg/client/testing/core\"",906],["\"github.com/ethereum/go-ethereum/core/types\"",605],["\"github.com/letsencrypt/boulder/core\"",660],["core \"github.com/ipfs/go-ipfs/core\"",677],["core \"github.com/ipfs/go-ipfs/core\"",677],["\"launchpad.net/juju-core/state\"",701],["\"k8s.io/kubernetes/pkg/client/testing/core\"",762],[". \"aliyun-openapi-go-sdk/core\"",869],["core \"k8s.io/kubernetes/pkg/client/testing/core\"",906],["package core",4092]],"useCount":110031},{"word":"could","context":[["//      to the apiserver, it could still restart the terminated pod (even",278],["// could not be loaded.",1384],["// It returns an error if the asset could not be found or",1384],["// ServerTimeout indicating a unique name could not be found in the time allotted, and the client",639],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["glog.Fatalf(\"Cloud provider could not be initialized: %v\", err)",449],["// could not be found.",430],["// Reason could be pulling image,",372],["// obj could be an *api.Pod, or a DeletionFinalStateUnknown marker item.",363],["// caller could create a flag that turns a comma-separated string into a slice",299]],"useCount":64792},{"word":"count","context":[["if count == 3 {",3687],["return count",2209],["if count == 0 {",1908],["var count int",3046],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723],["count = 0",1437],["count := 0",11674],["for i := 0; i < count; i++ {",4225],["count = 1",4214],["count++",14290]],"useCount":202570},{"word":"cpu","context":[["res[api.ResourceCPU] = resource.MustParse(cpu)",409],["\"cpu\",",1832],["cpu.Registers.PC = 0x0100",921],["cpu.Execute()",882],["Name:    \"cpu\",",876],["ResourceCPU ResourceName = \"cpu\"",667],["Sources: []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",543],["Sources:    []influxql.Source{&influxql.Measurement{Name: \"cpu\"}},",533],["command: `SELECT * FROM db0.rp0.cpu GROUP BY *`,",441],["command: `SELECT * FROM cpu`,",433]],"useCount":89901},{"word":"cr","context":[["if cr != nil {",21370],["cr.sendContainerState(containerMapKey)",8442],["cr.sendContainerState(containerMapValue)",8442],["cr.sendContainerState(containerMapEnd)",4269],["cr := e.cr",2287],["cr \"github.com/go-openapi/runtime/client\"",412],["cr := d.cr",2075],["cr := d.cr",2075],["cr := e.cr",2287],["timeout: cr.DefaultTimeout,",412]],"useCount":65958},{"word":"create","context":[["Failf(\"Failed to create pod: %v\", err)",546],["fmt.Println(\"failed to create session,\", err)",5256],["\"create\", \"start\", \"inspect_container\",",1438],["aggregator, emitter := itr.create()",464],["case \"create\":",480],["// Retrieve the aggregator for this name/tag combination or create one.",464],["status, body, err := sockRequest(\"POST\", \"/containers/create\", config)",584],["\"create\", \"start\", \"inspect_container\", \"inspect_container\",",644],["dockerCmd(c, \"network\", \"create\", \"-d\", \"bridge\", \"testnetwork1\")",609],["// users must create.",586]],"useCount":198944},{"word":"created","context":[["// NodePending means the node has been created/added by the system, but not configured.",681],["// no proxying required and no environment variables should be created for pods",601],["// created. It is not guaranteed to be set in happens-before order across separate operations.",601],["// PodTemplateSpec describes the data a pod should have when created from a template",585],["// TemplateRef is a reference to an object that describes the pod that will be created if",604],["Created string `json:\"created,omitempty\"`",605],["// provided by the client when the resource is created.",606],["t.Errorf(\"Unexpected containers created %v\", fakeDocker.Created)",664],["// Template is the object that describes the pod that will be created if",815],["// created.",757]],"useCount":122215},{"word":"creates","context":[["// kubelet is dead, so node controller deleted pods and rc creates more",239],["if creates != 0 || deletes != 1 {",303],["// three channels (file, apiserver, and http) and creates a union of them. For",309],["creates, deletes := manager.GetCounts(name)",389],["// ServiceSpec describes the attributes that a user creates on a service",408],["// Similar to VolumeSource but meant for the administrator who creates PVs.",412],["// newClient creates, initializes and returns a new service client instance.",2270],["// makePodDataDirs creates the dirs for the pod datas.",295],["// This creates a client, first loading any specified kubeconfig",245],["// pod is unhealthy, so replication controller creates another to take its place",240]],"useCount":77524},{"word":"creating","context":[["t.Fatalf(\"error creating temp dir: %v\", err)",445],["// PodTemplate describes a template for creating copies of a predefined pod.",584],["// StatusReasonAlreadyExists means the resource you are creating already exists.",427],["// Name is unique within a namespace.  Name is required when creating resources, although",417],["c.Fatalf(\"Error creating container: %q\", err)",400],["By(\"creating Redis RC\")",376],["t.Fatalf(\"error creating tempdir: %v\", err)",462],["By(\"creating the pod\")",867],["return fmt.Errorf(\"Error creating OpenStack networking client: %s\", err)",671],["return nil, fmt.Errorf(\"error creating client: %v\", err.Error())",611]],"useCount":63036},{"word":"crypto","context":[["\"crypto/hmac\"",2629],["\"crypto\"",2651],["\"crypto/rsa\"",4129],["\"crypto/sha1\"",5410],["\"crypto/tls\"",13378],["\"crypto/md5\"",5483],["\"crypto/rand\"",10968],["\"crypto/x509\"",7201],["\"crypto/sha256\"",5657],["\"crypto/ecdsa\"",2512]],"useCount":106371},{"word":"cs","context":[["return cs",642],["if s.cs.async {",2363],["b, warn, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1222],["cs *CloudStackClient",838],["if cs == nil {",687],["b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1356],["b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1356],["b, warn, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1222],["for _, c := range cs {",749],["cs := meta.(*cloudstack.CloudStackClient)",768]],"useCount":74410},{"word":"ctx","context":[["c.ctx_ = ctx",30863],["defer ctx.Close()",13525],["ctx := context.Background()",8554],["if _, err := buildImageFromContext(name, ctx, true); err != nil {",5159],["ctx := api.NewDefaultContext()",4932],["if _, err := ctx.Plan(); err != nil {",4732],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["if err := r.RoundTrip(ctx, &reqBody, &resBody); err != nil {",5592],["case <-ctx.Done():",6555],["ctx := testContext2(t, &ContextOpts{",7875]],"useCount":652835},{"word":"ctx_","context":[["ctx_                context.Context",854],["ctx_           context.Context",830],["ctx_        context.Context",767],["ctx_       context.Context",6867],["ctx_          context.Context",1517],["c.ctx_ = ctx",30863],["if c.ctx_ != nil {",20265],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["ctx_         context.Context",9933],["return gensupport.SendRequest(c.ctx_, c.s.client, req)",7518]],"useCount":107925},{"word":"ctxt","context":[["rel.Off = int32(ctxt.Pc)",483],["v := regoff(ctxt, &p.From)",548],["rel := obj.Addrel(ctxt.Cursym)",550],["ctxt := make(map[string]interface{})",610],["q = obj.Appendp(ctxt, q)",681],["ctxt.Andptr[0] = byte(op)",690],["ctxt.build(token);",832],["p = obj.Appendp(ctxt, p)",2173],["ctxt.Andptr = ctxt.Andptr[1:]",4714],["ctxt.Andptr = ctxt.Andptr[1:]",4714]],"useCount":98921},{"word":"current","context":[["// current state by calling UseProgram.",1594],["\"current\": \"idle\",",765],["// Locale returns the current translators string locale",1430],["// NodeStatus is information about the current status of a node.",695],["err := fmt.Errorf(\"codecgen version mismatch: current: %v, need %v. Re-generate file: %v\",",664],["// NamespaceStatus is information about the current status of a Namespace.",634],["// ReplicationControllerStatus represents the current status of a replication",584],["// Phase is the current lifecycle phase of the namespace.",611],["// Specify the value of a uniform variable for the current program object",866],["\"current\": \"active\",",807]],"useCount":167492},{"word":"custom","context":[["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// custom request initialization.",4476],["// Used for custom request initialization logic",924],["// Run custom request initialization if present",896],["// Used for custom service initialization logic",464],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// Run custom service initialization if present",464],["// Run custom client initialization if present",432],["// Used for custom client initialization logic",432],["// NOTE: This is exposed for use within your own custom functions and not intended to be called directly.",411]],"useCount":73452},{"word":"d","context":[["x.codecDecodeSelfFromMap(yyl2, d)",3894],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["z, r := codec1978.GenHelperDecoder(d)",42393],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["x.codecDecodeSelfFromArray(yyl2, d)",3894],["return d",6016],["dd := d.d",3936],["dd := d.d",3936],["d.SetId(\"\")",4736]],"useCount":1716995},{"word":"daemon","context":[["\"github.com/docker/docker/daemon/execdriver\"",1200],["package daemon",3844],["\"github.com/docker/docker/daemon/graphdriver\"",995],["c.Fatalf(\"Could not start daemon with busybox: %v\", err)",939],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["\"github.com/docker/docker/daemon/network\"",560],["\"github.com/docker/docker/daemon\"",653],["c.Fatalf(\"Could not start daemon: %v\", err)",615],["defer nuke(daemon)",454],["\"github.com/docker/docker/daemon/logger\"",543]],"useCount":149025},{"word":"data","context":[["n, err := m.MarshalTo(data)",28284],["data[i] = 0xa",24096],["data[i] = 0x12",17841],["// value can be used to capture response data after the request's \"Send\" method",13378],["b := data[iNdEx]",137749],["return data[:n], nil",28298],["// Pretty-print the response data.",34269],["data = make([]byte, size)",28307],["l := len(data)",30341],["skippy, err := skipGenerated(data[iNdEx:])",11760]],"useCount":1695174},{"word":"database","context":[["\"database/sql/driver\"",2104],["\"github.com/btcsuite/btcd/database\"",347],["di := data.Database(database)",326],["t.Fatalf(\"error connection to database, %v\", err)",302],["// External ID of the node assigned by some machine database (e.g. a cloud provider)",365],["// Open the database.",368],["// database.",526],["t.Fatal(\"Failed to open database:\", err)",606],["package database",1053],["\"database/sql\"",11064]],"useCount":104880},{"word":"db","context":[["defer closeDB(t, db)",1745],["tx, err := db.Begin()",1733],["return db",1750],["db := NewTestDB()",2085],["db.Close()",2109],["conn, err := db.Conn()",2262],["db.Update(func(tx *bolt.Tx) error {",2491],["package db",2627],["defer db.Close()",12236],["params:  url.Values{\"db\": []string{\"db0\"}},",15829]],"useCount":318887},{"word":"debug","context":[["case \"debug\":",501],["\"debug/elf\"",440],["if debug {",8068],["const debug = false",599],["if p.debug {",688],["debug.PrintStack()",754],["if !strings.Contains(string(content), `level=debug`) {",449],["if !debug {",977],["if *debug {",1000],["\"runtime/debug\"",2120]],"useCount":64458},{"word":"default","context":[["Namespace: \"default\",",1968],["// API requests with the JSON null value. By default, fields with empty",1737],["// in API requests with the JSON null value. By default, fields with",1097],["//       \"default\": \"false\",",1930],["default:",373324],["// unconditionally include in API requests. By default, fields with",36870],["var yys3Slc = z.DecScratchBuffer() // default slice to decode into",3894],["// requests with the JSON null value. By default, fields with empty",2096],["// to unconditionally include in API requests. By default, fields with",1463],["//       \"default\": \"500\",",1712]],"useCount":689075},{"word":"defaulting","context":[["defaulting.(func(*api.ResourceRequirements))(in)",238],["defaulting.(func(*api.EnvVarSource))(in)",234],["defaulting.(func(*api.EnvVar))(in)",234],["defaulting.(func(*api.LocalObjectReference))(in)",238],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["// to increase compatibility with the existing api it is defaulting to be empty",557],["defaulting.(func(*api.PodSpec))(in)",250],["defaulting.(func(*api.ObjectMeta))(in)",250],["glog.Warningf(\"Unknown protocol %q: defaulting to TCP\", port.Protocol)",248],["defaulting.(func(*api.ObjectFieldSelector))(in)",238]],"useCount":124243},{"word":"defer","context":[["defer googleapi.CloseBody(res)",57836],["defer func() {",85652],["defer ctx.Close()",13525],["defer server.Close()",14598],["defer ts.Close()",14767],["defer conn.Close()",14851],["defer wg.Done()",15771],["defer session.Close()",17293],["defer f.Close()",23064],["defer resp.Body.Close()",30994]],"useCount":1117295},{"word":"defined","context":[["// formats are defined here.",726],["// SelfLink: Server defined URL for this resource (output only).",740],["// Id: [Output Only] Unique identifier for the resource; defined by the",1058],["// load uniform variables defined as sampler types. Loading samplers with any",1168],["// Id: Unique identifier for the resource; defined by the server (output",1255],["// All active uniform variables defined in a program object are initialized",1594],["// index 2 in this pod). This syntax is chosen only to have some well-defined way of",671],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// variables defined as int, ivec2, ivec3, ivec4, or arrays of these. The ui",584],["// variables defined as unsigned int, uvec2, uvec3, uvec4, or arrays of",584]],"useCount":68358},{"word":"delete","context":[["case \"delete\":",757],["// The value zero indicates delete immediately. If this value is nil, the default grace period for the",604],["// Value must be non-negative integer. The value zero indicates delete immediately.",539],["// When a delete is dropped, the relist will notice a pod in the store not",469],["t.Errorf(\"Unexpected delete: %s, expected %s\", simpleStorage.deleted, ID)",364],["// it, we delete the key from the kubelet-generated ones so we don't have duplicate",305],["// delete",289],["t.Errorf(\"Expected 1 delete, found %#v\", fakeClient.DeletedKeys)",289],["// Create a deployment to delete nginx pods and instead bring up redis pods.",284],["$patch: delete",284]],"useCount":142771},{"word":"deleted","context":[["deleted = true",508],["// PersistentVolumeReclaimDelete means the volume will be deleted from Kubernetes on release from its claim.",454],["// used for PersistentVolumes where the bound PersistentVolumeClaim was deleted",592],["// signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet",592],["// directly settable by a client. The resource will be deleted (no longer visible from",595],["// a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination",610],["// deleted.",699],["// deleted pods.",470],["Logf(\"RC %s was already deleted: %v\", name, err)",720],["// used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim",453]],"useCount":63657},{"word":"deployment","context":[["logReplicaSetsOfDeployment(deployment, allOldRSs, newRS)",429],["//     \"deployment\": {",382],["\"deployment\": c.deployment,",382],["c.deployment = deployment",436],["c.deployment = deployment",436],["return deployment, nil",457],["\"deployment\": c.deployment,",382],["package deployment",526],["deployment, err := c.Extensions().Deployments(ns).Get(deploymentName)",1249],["err = framework.WaitForObservedDeployment(c, ns, deploymentName, deployment.Generation)",380]],"useCount":96368},{"word":"desc","context":[["if desc == nil {",313],["// timestamp using orderBy=\"creationTimestamp desc\". This sorts results",326],["// Currently, only sorting by name or creationTimestamp desc is",326],["return desc, err",373],["return desc",386],["desc string",828],["desc := matcher.Description()",729],["ExpectThat(desc, Equals(expectedDesc))",728],["desc := r.Desc()",451],["return desc, nil",429]],"useCount":72676},{"word":"description","context":[["Description *string `locationName:\"description\" type:\"string\"`",1836],["description string",1205],["Description string `json:\"description\"`",1325],["//       \"description\": \"The ID of the file.\",",1377],["* description :",1880],["//       \"description\": \"Project ID for this request.\",",2204],["//       \"description\": \"Name of a bucket.\",",2393],["//       \"description\": \"User profile ID associated with this request.\",",2944],["//       \"description\": \"Name of the project scoping this request.\",",3018],["Description string `json:\"description,omitempty\"`",5884]],"useCount":291411},{"word":"descriptor","context":[["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(9),",7215]],"useCount":268807},{"word":"details","context":[["// for details.",784],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// details.",612],["// A human readable message indicating details about why the pod is in this state.",513],["// A human-readable message indicating details about why the volume is in this state.",457],["// Human readable message indicating details about last transition.",456],["// own extended details. This field is optional and the data returned",432],["// The Causes array includes more details associated with the StatusReason",429],["// more details.",417],["Details               map[string]string `json:\"details,omitempty\"`",404]],"useCount":67816},{"word":"device","context":[["// One or more block device mapping entries.",245],["package device",213],["// If omitted, kubelet will attempt to mount the device name.",897],["// device.",303],["devicePath := \"fake/device/path\"",302],["for _, device := range devices {",268],["// Not applicable on Windows as Windows does not support --device",285],["extraLabels: []string{\"device\"},",275],["device.Path = deviceMapping.PathInContainer",202],["m := NewModel(defaultConfig, protocol.LocalDeviceID, \"device\", \"syncthing\", \"dev\", db, nil)",203]],"useCount":70013},{"word":"dir","context":[["for _, dir := range dirs {",667],["defer os.RemoveAll(dir)",6900],["return dir, nil",856],["return dir",909],["if dir == \"\" {",1059],["dir := c.MkDir()",1089],["cmd.Dir = dir",1147],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["dir, srv := makeHTTPServer(t)",660],["func RestoreAsset(dir, name string) error {",650]],"useCount":186829},{"word":"directory","context":[["// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not",586],["expected := \"When using ADD with more than one source file, the destination must be a directory and end with a /\"",581],["// RestoreAsset restores an asset under the given directory",540],["// directory embedded in the file by go-bindata.",698],["// RestoreAssets restores an asset under the given directory recursively",540],["// directory.",435],["// HostPath represents a directory on the host.",592],["// Optional: what type of storage medium should back this directory.",428],["// EmptyDir represents a temporary directory that shares a pod's lifetime.",705],["// Command is the command line to execute inside the container, the working directory for the",722]],"useCount":132940},{"word":"disk","context":[["\"disk\",",371],["Message:            \"out of disk space\",",392],["// resource was the last reference to that disk on the kubelet.",405],["// AWSElasticBlockStore represents an AWS EBS disk that is attached to a",444],["t.Fatalf(\"can't update disk space manager: %v\", err)",538],["Name:      \"disk\",",470],["// The disk must also be in the same GCE project and zone as the kubelet.",500],["// Unique name of the PD resource. Used to identify the disk in GCE",520],["disk {",823],["// Optional: Partition on the disk to mount.",903]],"useCount":69812},{"word":"do","context":[["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// furnished to do so, subject to the following conditions:",4317],["// do nothing",1648],["//  Note that you are welcome to modify this code under the condition that you do not remove any",466],["// Nothing to do.",481],["// TODO(roberthbailey): Can we do this without having credentials to talk",495],["// This parameter is optional. If you do not include it, it defaults to 100.",764],["furnished to do so, subject to the following conditions:",1015],["// nothing to do",1239],["* !!! Please do not edit this file !!!",1486]],"useCount":133775},{"word":"doRequest","context":[["func (c *OperationsListCall) doRequest(alt string) (*http.Response, error) {",129],["func (c *OperationsGetCall) doRequest(alt string) (*http.Response, error) {",138],["res, err := c.doRequest(\"json\")",33446],["res, err := c.doRequest(\"media\")",619],["res, _, err := r.doRequest(req)",428],["data, err := client.doRequest(\"GET\", uri, nil, nil)",415],["_, err := client.doRequest(\"POST\", uri, nil, nil)",282],["func (c *AccountsGetCall) doRequest(alt string) (*http.Response, error) {",123],["func (c *ChannelsStopCall) doRequest(alt string) (*http.Response, error) {",120],["_, resp, err := requireOK(a.c.doRequest(r))",259]],"useCount":63013},{"word":"doc","context":[["for iter.Next(&doc) {",644],["doc := `",473],["for _, doc := range docs {",454],["ast := testutil.TestParse(t, doc)",439],["Id:     m.doc.DocID,",400],["\"go/doc\"",378],["if doc == nil {",364],["Insert: doc,",350],["Doc(doc).",773],["doc := p.leadComment",339]],"useCount":62984},{"word":"docker","context":[["\"github.com/docker/docker/runconfig\"",2500],["\"github.com/docker/docker/utils\"",2300],["\"github.com/docker/docker/utils\"",2300],["\"github.com/docker/engine-api/types\"",2215],["\"github.com/docker/docker/pkg/stringid\"",1946],["\"github.com/docker/docker/pkg/stringid\"",1946],["\"github.com/docker/docker/runconfig\"",2500],["\"github.com/docker/docker/api/types\"",2417],["package docker",2942],["\"github.com/docker/docker/api/types\"",2417]],"useCount":345710},{"word":"dockerCmd","context":[["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"top\")",1197],["dockerCmd(c, \"push\", repoName)",316],["out, _ := dockerCmd(c, \"create\", \"busybox\")",335],["dockerCmd(c, \"run\", \"-d\", \"--net=testnetwork1\", \"--name=second\", \"busybox\", \"top\")",348],["dockerCmd(c, \"run\", \"-d\", \"--net=testnetwork1\", \"--name=first\", \"busybox\", \"top\")",348],["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"true\")",355],["out, _ = dockerCmd(c, \"diff\", name)",390],["dockerCmd(c, \"network\", \"create\", \"-d\", \"bridge\", \"testnetwork1\")",609],["dockerCmd(c, \"tag\", \"busybox\", repoName)",838],["dockerCmd(c, \"rmi\", repoName)",848]],"useCount":63974},{"word":"docs","context":[["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["// GitLab API docs:",887],["// http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",815],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",788]],"useCount":177796},{"word":"does","context":[["// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.",588],["t.Fatalf(\"the value %s in get result does not match the value %s in request\",",1107],["// exist if the pod does not exist.",699],["\"or entity does not exist\", id)) {",1097],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["testRequires(c, DaemonIsLinux) // Windows does not support ARG",494],["c.Fatalf(\"/etc/resolv.conf does not exist\")",468],["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["//       \"description\": \"Cloud SQL instance ID. This does not include the project ID.\",",1087]],"useCount":159819},{"word":"doesn","context":[["// below doesn't.",3048],["// Sometimes AWS just has consistency issues and doesn't see",264],["testRequires(c, DaemonIsLinux) // Windows doesn't have httpserver image yet",290],["// Create the root directory if it doesn't exists",308],["// The parser stores options it doesn't recognize here. See above.",318],["// Test that creating a container with a volume doesn't crash. Regression test for #995.",240],["// This will exit immediately if it doesn't need to do anything.",232],["// TODO: What to do for AWS?  It doesn't support replicas",208],["// The resource doesn't exist anymore",329],["// Ignore whitespace since that's what were verifying doesn't change stuff",384]],"useCount":68143},{"word":"don","context":[["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// Status is a return value for calls that don't return other objects.",439],["// Kubelets without masters (e.g. plain GCE ContainerVM) don't set env vars.",305],["// it, we delete the key from the kubelet-generated ones so we don't have duplicate",305],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["//       for pods and replication controllers so we don't",286],["// so that we don't remove volumes associated with terminated but not yet",270],["// Make sure that -f is ignored and that we don't use the Dockerfile",246],["// TODO: Since we don't have support for bulk resource deletion in the API,",244],["// Populate PeerCertificates in requests, but don't reject connections without certificates",244]],"useCount":86355},{"word":"done","context":[["<-done",5140],["done <- true",4078],["close(done)",4047],["done := make(chan bool)",3313],["defer close(done)",1973],["done = true",1742],["done <- struct{}{}",1738],["done := make(chan struct{})",4483],["case <-done:",7188],["if done {",1617]],"useCount":136683},{"word":"driver","context":[["return nil, driver.ErrBadConn",873],["package driver",733],["driver := state.Get(\"driver\").(Driver)",424],["// Value implements the driver Valuer interface.",438],["if err != driver.ErrBadConn {",488],["type driver struct {",554],["// mgo - MongoDB driver for Go",625],["return driver.ErrBadConn",675],["\"database/sql/driver\"",2104],["_ \"github.com/go-sql-driver/mysql\"",2196]],"useCount":103197},{"word":"dst","context":[["a0: dst.c(),",468],["if dst == nil {",466],["//\t\tdst[MAX:256] := 0",646],["//\t\tdst[MAX:512] := 0",643],["dst := new(string)",1779],["return dst",1789],["return *dst",2686],["unique_x.Callable = dst",4987],["dst := &javabind.Callable{}",4992],["retconv.Dest(dst)",7682]],"useCount":118035},{"word":"e","context":[["if e := recover(); e != nil {",3348],["if e != nil {",28356],["z, r := codec1978.GenHelperEncoder(e)",17991],["return e",13578],["l = e.Size()",8079],["if e == nil {",5945],["ee := e.e",3961],["ee := e.e",3961],["err = e",3789],["return nil, e",3688]],"useCount":965075},{"word":"e1","context":[["_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)",476],["errno = int(e1);",1040],["r0, _, e1 := RawSyscall(SYS_GETPGID, uintptr(pid), 0, 0)",476],["_, _, e1 := RawSyscall(SYS_SETPGID, uintptr(pid), uintptr(pgid), 0)",476],["_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)",476],["errno = int(e1)",3083],["if e1 != 0 {",59896],["err = errnoErr(e1)",29301],["err = e1",24550],["err = error(e1)",5626]],"useCount":180177},{"word":"each","context":[["// for each node that meets all of the scheduling requirements (resource",513],["// Pages invokes f for each page of results.",2234],["// calling the \"fn\" function with the response data for each page. To stop",1419],["i = enum.each(func(cursor int) {",578],["// If unspecified, the container runtime will allocate a random SELinux context for each",558],["// Hard is the set of enforced hard limits for each named resource",469],["// for each element in value, and it should match the number of components in",584],["// When there are multiple elements, the lists of nodes corresponding to each",592],["// _bindata is a table, holding each asset generator, mapped to its name.",738],["// without having to provide authentication credentials for each",847]],"useCount":116142},{"word":"ec2","context":[["package ec2",1274],["Filters: []*ec2.Filter{",1893],["svc := ec2.New(sess)",856],["svc := ec2.New(session.New())",2581],["svc := ec2.New(nil)",4408],["err = ec2.query(params, resp)",2002],["\"github.com/aws/aws-sdk-go/service/ec2\"",1935],["UserIdGroupPairs: []*ec2.UserIdGroupPair{",447],["request := &ec2.DescribeInstancesInput{",562],["filter := ec2.NewFilter()",583]],"useCount":111690},{"word":"either","context":[["// code is an error. Response headers are in either",8983],["// status code is an error. Response headers are in either",7314],["// non-2xx status code is an error. Response headers are in either",5221],["// Error can be either of the following types:",1860],["// Any non-2xx status code is an error. Response headers are in either",1236],["// TODO: This requires a transaction, either both node status is updated",692],["// key can be either a byte slice or a string.",489],["// generated name exists - instead, it will either return 201 Created or 500 with Reason",471],["// COMPARISON_STRING must be either eq (equals) or ne (not equals). The",409],["// the portal is either an IP or ip_addr:port if port is other than default (typically TCP ports 860 and 3260)",391]],"useCount":77614},{"word":"element","context":[["&element.Field{",1971],["// When IsTruncated is true, this element is present and contains the value",718],["Visible:   element.VisibleYes,",1466],["//  Use a Resource element with the domain name to limit the action to only",846],["Type:      element.TypeSelect,",815],["// AttributeValueList can contain only one AttributeValue element of type String,",723],["// element of a different type than the one provided in the request, the value",606],["// for each element in value, and it should match the number of components in",584],["&element.Group{",530],["// available. In that case, the IsTruncated response element returns true and",494]],"useCount":69136},{"word":"else","context":[["} else if that1.Field1 != nil {",2873],["} else if this.Field1 != nil {",2873],["} else if containerLen < 0 {",3654],["} else {",1764697],["} else if this == nil {",24188],["} else if err != nil {",18548],["} else if z.HasExtensions() && z.EncExt(x) {",13814],["} else if z.HasExtensions() && z.DecExt(x) {",13814],["} else if !query.success() {",3906],["} else if yyct2 == codecSelferValueTypeArray1234 {",3850]],"useCount":2164136},{"word":"empty","context":[["// empty values are omitted from API requests. However, any field with",1097],["// requests with the JSON null value. By default, fields with empty",2096],["// empty value appearing in NullFields will be sent to the server as",3833],["// null. It is an error if a field in this list has a non-empty value.",4930],["// API requests with the JSON null value. By default, fields with empty",1737],["// used to include empty fields in Patch requests.",38333],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// an empty value appearing in NullFields will be sent to the server as",1097],["// with empty values are omitted from API requests. However, any field",819],["// with an empty value appearing in NullFields will be sent to the",819]],"useCount":263305},{"word":"encoding","context":[["\"encoding/base64\"",13744],["\"encoding/hex\"",11962],["\"encoding/asn1\"",976],["import \"encoding/json\"",1415],["\"encoding/csv\"",1800],["\"encoding/pem\"",3077],["\"encoding/gob\"",3635],["\"encoding/xml\"",8744],["\"encoding/binary\"",16315],["\"encoding/json\"",100948]],"useCount":236030},{"word":"end","context":[["end",2139],["} // end switch yys3",3894],["z.data.end = z.raw.end",700],["end := time.Now()",769],["z.raw.end--",843],["return thrift.PrependError(fmt.Sprintf(\"%T read struct end error: \", p), err)",1514],["return fmt.Errorf(\"%T read struct end error: %s\", p, err)",1365],["{{ end }}",2908],["} // end for yyj3",3894],["{{end}}",12755]],"useCount":227804},{"word":"endpoint","context":[["\"github.com/go-kit/kit/endpoint\"",403],["Endpoint:      endpoint,",2282],["BasePath  string // API endpoint base URL",2098],["BasePath string // API endpoint base URL",705],["// Download fetches the API endpoint's \"media\" value, instead of the normal",619],["// The IP of this endpoint.",594],["return func(ep *endpoint) {",554],["// Required: EndpointsName is the endpoint name that details Glusterfs topology",391],["// endpoint.",415],["endpoint string",482]],"useCount":105119},{"word":"endpoints","context":[["// EndpointsList is a list of endpoints.",723],["// expanded set of endpoints is the Cartesian product of Addresses x Ports.",594],["// The resulting set of endpoints can be viewed as:",594],["endpoints.syncService(ns + \"/foo\")",382],["endpoints: api.Endpoints{",1887],["endpoints.serviceStore.Store.Add(&api.Service{",379],["// The set of all endpoints is the union of all subsets.",371],["// Endpoints is a collection of endpoints that implement the actual service.  Example:",355],["endpoints[0] = api.Endpoints{",316],["EndpointsName string `json:\"endpoints\"`",316]],"useCount":68216},{"word":"engine","context":[["\"github.com/cgrates/cgrates/engine\"",614],["\"github.com/docker/docker/engine\"",1022],["engine := createTestEngine(stopper)",1117],["package engine",2445],["engine := createTestEngine()",1208],["defer engine.Close()",1229],["session := engine.NewSession()",1238],["\"github.com/cockroachdb/cockroach/storage/engine\"",1461],["return engine.StatusOK",1611],["\"github.com/docker/engine-api/types\"",2215]],"useCount":115378},{"word":"entry","context":[["if entry.IsDir() {",309],["return entry, nil",354],["for _, entry := range entries {",993],["// The list has one entry per container in the manifest. Each entry is currently the output",303],["entries = append(entries, entry)",308],["if entry == nil {",950],["type entry struct {",619],["return entry",463],["//   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",429],["// Optional: The kubernetes object related to the entry point.",426]],"useCount":103413},{"word":"enum","context":[["//       \"enum\": [",10845],["RequestPayer *string `location:\"header\" locationName:\"x-amz-request-payer\" type:\"string\" enum:\"RequestPayer\"`",576],["i = enum.each(func(cursor int) {",578],["// @enum summaryKeyType",625],["// @enum EventType",806],["// @enum ErrorCode",1154],["currencies             []string // idx = enum of currency code",1228],["// @enum InstanceType",2006],["// @enum CountryCode",3206],["// @enum ResourceType",958]],"useCount":89290},{"word":"env","context":[["env := makeEnv()",1125],["return env",1513],["env := makeCheckBinaryNonConstExprEnv()",1980],["env := MakeSimpleEnv()",6022],["cmd.Env = env",1113],["env := makeEnviron(c)",961],["env := t.Prepare(c)",925],["env := suite.makeEnviron()",838],["return env, nil",813],["env.Types[\"s1\"] = reflect.TypeOf(s1{})",727]],"useCount":152386},{"word":"environment","context":[["// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable",362],["c.Fatalf(\"Wrong environment: should be %d variables, not: %q\\n\", len(goodEnv), strings.Join(actualEnv, \", \"))",366],["// using the previous defined environment variables in the container and",468],["c.Fatalf(\"Wrong environment variable: should be %s, not %s\", goodEnv[i], actualEnv[i])",468],["// Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable",574],["// environment.",346],["c.Fatalf(\"failed to access environment variable in output: %q expected: %q\", out, envValOveride)",296],["// no proxying required and no environment variables should be created for pods",601],["\"environment\": \"dummyenv\",",711],["// EnvVar represents an environment variable present in a Container.",716]],"useCount":61437},{"word":"err","context":[["return err",1518678],["if err != nil {",3731570],["return nil, err",870029],["t.Fatal(err)",320011],["panic(err)",172161],["if err == nil {",169101],["var err error",136062],["c.Assert(err, jc.ErrorIsNil)",135421],["c.Assert(err, IsNil)",104368],["return \"\", err",83980]],"useCount":17669596},{"word":"error","context":[["// googleapi.IsNotModified to check whether the returned error was",9322],["// Message from an error.",19226],["t.Fatalf(\"unexpected error: %v\", err)",23940],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// A service error occurred",13362],["// error from Do is the result of In-None-Match.",12114],["t.Errorf(\"unexpected error: %v\", err)",26845],["err error",10374],["// error which satisfies the awserr.Error interface.",11875],["var err error",136062]],"useCount":3037415},{"word":"errors","context":[["\"errors\"",116139],["return errors.Trace(err)",18398],["return nil, errors.Trace(err)",16060],["\"github.com/juju/errors\"",11886],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["\"k8s.io/kubernetes/pkg/api/errors\"",4582],["\"github.com/pkg/errors\"",3697],["if errors.IsNotFound(err) {",3161],["return nil, errors.New(\"client is nil\")",3069]],"useCount":572759},{"word":"errs","context":[["Equal(t, errs, nil)",2843],["allErrs := errs.ValidationErrorList{}",9255],["return errs",2524],["if len(errs) != 0 {",3014],["t.Errorf(\"expected success: %v\", errs)",4335],["errs = append(errs, err)",3468],["errs = append(errs, err)",3468],["NotEqual(t, errs, nil)",3319],["if len(errs) == 0 {",3159],["if len(errs) > 0 {",2901]],"useCount":189047},{"word":"etc","context":[["if err := ioutil.WriteFile(\"/etc/resolv.conf\", origResolvConf, 0644); err != nil {",404],["origResolvConf, err := ioutil.ReadFile(\"/etc/resolv.conf\")",404],["if err := ioutil.WriteFile(\"/etc/resolv.conf\", tmpResolvConf, 0644); err != nil {",461],["// not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use",541],["// 2 for vec2, ivec2, bvec2, etc.). The data type specified in the name",584],["// float, int, unsigned int, bool; 2 for vec2, ivec2, uvec2, bvec2, etc.).",584],["if err := ioutil.WriteFile(\"/etc/resolv.conf\", resolvConfSystem, 0644); err != nil {",793],["RUN echo 'dockerio:x:1001:' >> /etc/group",2333],["RUN echo 'dockerio:x:1001:1001::/bin:/bin/false' >> /etc/passwd",2536],["c.Fatalf(\"/etc/resolv.conf does not exist\")",468]],"useCount":63054},{"word":"etcd","context":[["\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"",909],["\"github.com/coreos/etcd/pkg/types\"",1228],["Nodes: []*etcd.Node{",1056],["\"github.com/coreos/etcd/raft\"",1036],["\"github.com/coreos/etcd/raft/raftpb\"",1472],["\"github.com/coreos/go-etcd/etcd\"",2033],["\"github.com/coreos/go-etcd/etcd\"",2033],["Node: &etcd.Node{",3557],["R: &etcd.Response{",3707],["package etcd",3088]],"useCount":89856},{"word":"event","context":[["// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",635],["// The number of times this event has occurred.",646],["t.Fatalf(\"expected watch event type %s, got %s\", e, a)",652],["// fails. The associated event attribute's cause parameter will be set to OPERATION_NOT_PERMITTED.",654],["return event, nil",663],["for _, event := range events {",666],["package event",668],["// and event is recorded or neither should happen, see issue #6055.",692],["// the event) or if no container name is specified \"spec.containers[2]\" (container with",671],["// Event is a report of an event somewhere in the cluster.",704]],"useCount":154633},{"word":"events","context":[["Resource(\"events\").",527],["DescribeEvents(events, out)",1893],["events := strings.Split(out, \"\\n\")",540],["for _, e := range events {",624],["for _, event := range events {",666],["// EventList is a list of events.",704],["package events",738],["var events *api.EventList",798],["if events != nil {",1746],["// events.  For the PostStart and PreStop lifecycle handlers, management of the container blocks",536]],"useCount":112211},{"word":"example","context":[["// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE)",532],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["// For example if you run go-bindata on data/... and data contains the",699],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["* @example",1369],["// For example:",2452],["// Usage example:",3149],["// For example, given:",596],["// should contain information to identify the sub-object. For example, if the object",490]],"useCount":139884},{"word":"exec","context":[["buildCmd := exec.Command(dockerBinary, args...)",581],["func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },",1022],["func(cmd string, args ...string) exec.Cmd { return exec.InitFakeCmd(&fcmd, cmd, args...) },",1022],["\"os/exec\"",30565],["package exec",637],["// command  is root ('/') in the container's filesystem.  The command is simply exec'd, it is",541],["cmd := exec.Command(",533],["\"k8s.io/kubernetes/pkg/util/exec\"",819],["var cmd *exec.Cmd",733],["pushCmd := exec.Command(dockerBinary, \"push\", repoName)",647]],"useCount":170906},{"word":"exist","context":[["c.Fatalf(\"/etc/resolv.conf does not exist\")",468],["// you want in the response. If additional items exist beyond the maximum you",494],["// A GCE PD must exist and be formatted before mounting to a container.",503],["// nil if no more results exist.",683],["// exist if the pod does not exist.",699],["// exist if the pod does not exist.",699],["if exist {",702],["// exist than the specified MaxRecords value, a pagination token called a marker",736],["if !exist {",1269],["\"or entity does not exist\", id)) {",1097]],"useCount":77300},{"word":"existing","context":[["existing: emptyNode,",239],["// TestRunWorkdirExistsAndIsFile checks that if 'docker run -w' with existing file can be detected",219],["fakeClient.Data[path] = item.existing",223],["// to increase compatibility with the existing api it is defaulting to be empty",557],["// Default: Uses existing setting",335],["// HostPath represents a pre-existing file or directory on the host",321],["// Stop the workers for no-longer existing pods.",295],["return existing, nil",283],["if existing == nil {",273],["if existing != nil {",254]],"useCount":77940},{"word":"exists","context":[["var exists bool",827],["RUN mkdir /exists",736],["if !exists {",11830],["// regardless of whether the variable exists or not.",936],["return exists",907],["if !exists || err != nil {",838],["RUN chown -R dockerio.dockerio /exists",736],["exists = true",976],["RUN touch /exists",1184],["if exists {",6106]],"useCount":144635},{"word":"exp","context":[["t.Fatalf(\"unexpected results\\nexp: %s\\ngot: %s\\n\", exp, res)",647],["t.Fatalf(\"value length mismatch: got %v, exp %v\", got, exp)",516],["t.Fatalf(\"value length mismatch: got %v, exp %v\", got, exp)",516],["exp:     `{\"error\":\"error parsing query: mixing aggregate and non-aggregate queries is not supported\"}`,",456],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["exp:     `{\"results\":[{}]}`,",2823],["if got != exp {",2794],["if got, exp := values[i].Value(), v.Value(); got != exp {",413],["if got, exp := values[i].Value(), v.Value(); got != exp {",413],["t.Fatal(len(got), len(exp))",423]],"useCount":86860},{"word":"expect","context":[["p.expect(';')",371],["expect{",977],["expect string",941],["expect(t, err, nil)",685],["if got != expect {",509],["lbrace := p.expect(token.LBRACE)",501],["expect(t, recorder.Code, http.StatusOK)",475],["rbrace := p.expect(token.RBRACE)",458],["if expect != got {",399],["p.expect(')')",388]],"useCount":83722},{"word":"expected","context":[["t.Errorf(\"expected success: %v\", errs)",4335],["expected string",17664],["if s != tt.expected {",13631],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["if actual != expected {",9135],["expected locales.PluralRule",4302],["// \texpected: locales.PluralRuleOther,",4284],["t.Errorf(\"expected %v, got %v\", e, a)",2940],["// \texpected: locales.PluralRuleOne,",2856],["expected bool",2770]],"useCount":732712},{"word":"expr","context":[["switch expr := expr.(type) {",496],["return false, expr",464],["switch expr := expr.(type) {",496],["x.expr = e",509],["expr: &actionExpr{",553],["return expr, nil",594],["expr: &seqExpr{",777],["expr: &ruleRefExpr{",837],["if expr == nil {",857],["return expr",1380]],"useCount":83723},{"word":"extensions","context":[["Spec: extensions.DaemonSetSpec{",2010],["Spec: extensions.ScaleSpec{",443],["\"k8s.io/kubernetes/pkg/apis/extensions\"",4264],["Spec: extensions.HorizontalPodAutoscalerSpec{",536],["update: extensions.DaemonSet{",543],["old: extensions.DaemonSet{",543],["Spec: extensions.ReplicaSetSpec{",1726],["case *extensions.Deployment:",699],["Spec: extensions.JobSpec{",618],["Spec: extensions.DeploymentSpec{",769]],"useCount":94839},{"word":"f","context":[["f()",3395],["return f, nil",3685],["if f == nil {",3885],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["return f",9233],["f.Close()",12895],["defer f.Close()",23064],["f.Lock()",3638],["defer f.Unlock()",3547],["for _, f := range files {",2967]],"useCount":955958},{"word":"fail","context":[["// The following cases will fail, so die now",527],["// fail if the object's ETag matches the given value. This is useful for",12114],["fail:   true,",1900],["panic(\"fail\")",1625],["// does not run as UID 0 (root) and fail to start the container if it does.",558],["// PullAlways means that kubelet always attempts to pull the latest image.  Container will fail If the pull fails.",510],["// we will try to respect it or else fail the request.  This field can",486],["fail:  true,",475],["It(\"should fail\", func() {",456],["// some versions of lxc might make this test fail",432]],"useCount":90079},{"word":"failed","context":[["t.Errorf(\"SetUp() failed: %v\", err)",1242],["t.Fatalf(\"marshaling to JSON failed: %v\", err)",1208],["c.Fatalf(\"failed to run container: %v, output: %q\", err, out)",954],["t.Fatalf(\"test init failed: %s\", err)",3640],["if failed {",1041],["fmt.Println(\"failed to create session,\", err)",5256],["c.Fatalf(\"build failed to complete: %q %q\", out, err)",816],["t.Fatalf(\"failed to run container: %v, output: %q\", err, out)",807],["failed = true",8862],["c.Fatalf(\"failed to get the container count: %s\", err)",840]],"useCount":268173},{"word":"fake","context":[["if fake.invocations == nil {",601],["fake.invocations = map[string][][]interface{}{}",601],["fake.invocations[key] = [][]interface{}{}",601],["return fake.invocations",601],["if fake.invocations[key] == nil {",601],["\"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake\"",807],["th.TestHeader(t, r, \"X-Auth-Token\", fake.TokenID)",1087],["tf.Client = &fake.RESTClient{",2082],["package fake",1818],["Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {",1217]],"useCount":108365},{"word":"false","context":[["if false {",153082],["NonBlank:    false,",6041],["return \"\", false",6193],["Mandatory:   false,",8199],["found := false",10732],["return nil, false",12527],["false,",24189],["return false, err",36650],["return false, nil",39129],["return false",425000]],"useCount":1669847},{"word":"fd","context":[["defer fd.decref()",613],["_, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)",476],["func Fchdir(fd int) (err error) {",490],["func fcntl(fd int, cmd int, arg int) (val int, err error) {",490],["defer fd.Close()",1502],["fd.Close()",1657],["fd = int(r0)",3024],["func Close(fd int) (err error) {",484],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)",476]],"useCount":106762},{"word":"field","context":[["// null. It is an error if a field in this list has a non-empty value.",4930],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["\"k8s.io/kubernetes/pkg/util/validation/field\"",1577],["// ForceSendFields is a list of field names (e.g. \"Etag\") to",1561],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846],["// values are omitted from API requests. However, any field with an",3833],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["allErrs := field.ErrorList{}",11293],["return fmt.Errorf(\"proto: wrong wireType = %d for field ObjectMeta\", wireType)",1792],["return fmt.Errorf(\"proto: wrong wireType = %d for field Items\", wireType)",1724]],"useCount":601652},{"word":"fieldNum","context":[["return fmt.Errorf(\"proto: Wilson: illegal tag %d (wire type %d)\", fieldNum, wire)",88],["return fmt.Errorf(\"proto: ExportOptions: illegal tag %d (wire type %d)\", fieldNum, wire)",90],["return fmt.Errorf(\"proto: Node: illegal tag %d (wire type %d)\", fieldNum, wire)",99],["return fmt.Errorf(\"proto: Event: illegal tag %d (wire type %d)\", fieldNum, wire)",102],["fieldNum := r.Intn(9)",128],["fieldNum := r.Intn(102)",128],["fieldNum := r.Intn(3)",192],["switch fieldNum {",30431],["fieldNum := int32(wire >> 3)",29949],["if fieldNum <= 0 {",26126]],"useCount":109060},{"word":"fields","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["c.params_.Set(\"fields\", googleapi.CombineFields(s))",4079],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/fields\"",2585],["// used to include empty fields in Patch requests.",38333],["// unconditionally include in API requests. By default, fields with",36870],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["\"k8s.io/kubernetes/pkg/fields\"",6969]],"useCount":405193},{"word":"file","context":[["// This file was generated by counterfeiter",1800],["scanner := bufio.NewScanner(file)",1757],["// This file was generated by the swagger tool.",2864],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["// This is a compile-time assertion to ensure that this generated file",3226],["for _, file := range files {",3516],["file.Close()",3815],["// This file is part of the go-ethereum library.",3823],["defer file.Close()",11992],["file, err := os.Open(path)",1739]],"useCount":541720},{"word":"filename","context":[["defer os.Remove(filename)",624],["data, err := ioutil.ReadFile(filename)",773],["filename := randomPath(32)",542],["f, err := os.Open(filename)",1490],["if filename == \"\" {",880],["filename string",1198],["file, err := os.Open(filename)",1268],["for _, filename := range filenames {",577],["f, err := os.Create(filename)",478],["return filename",468]],"useCount":73319},{"word":"filepath","context":[["return filepath.Join(testContext.RepoRoot, \"examples/guestbook-go\", file)",342],["testTar, err := os.Create(filepath.Join(tmpDir, \"test.tar\"))",486],["if err := ioutil.WriteFile(filepath.Join(tmpDir, \"Dockerfile\"), []byte(dockerfile), 0644); err != nil {",492],["err = RestoreAssets(dir, filepath.Join(name, child))",496],["err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))",496],["return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, \"/\")...)...)",650],["path := filepath.Join(dest, hdr.Name)",354],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["return filepath.SkipDir",2068],["\"path/filepath\"",65545]],"useCount":208613},{"word":"files","context":[["// Temporary directory where test files will be created",367],["var files []string",591],["if len(files) == 0 {",611],["return files, nil",704],["return files",560],["files = append(files, f)",463],["files = append(files, f)",463],["for _, f := range files {",2967],["for _, file := range files {",3516],["It is generated from these files:",4689]],"useCount":142253},{"word":"filter","context":[["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// where Purpose is X, see the tag:key=value filter.",931],["// Filter sets the optional parameter \"filter\": Filter expression for",965],["if v, ok := c.opt_[\"filter\"]; ok {",1559],["c.opt_[\"filter\"] = filter",1559],["c.opt_[\"filter\"] = filter",1559],["params.Set(\"filter\", fmt.Sprintf(\"%v\", v))",1559],["//     \"filter\": {",2292],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931]],"useCount":111200},{"word":"find","context":[["// launch a pod to find a node which can launch a pod. We intentionally do",396],["return \"\", fmt.Errorf(\"Could not find an exact match for %s: %+v\", name, l)",336],["// find your project ID as the value of the DashboardPlace:cid URL",305],["/* find a state where \"error\" is a legal shift action */",300],["/* consult goto table to find next state */",300],["// Use the first external IP address we find on the node, and",267],["finder := find.NewFinder(client.Client, true)",261],["t.Errorf(\"Expected to find controller under key %v\", key)",258],["t.Errorf(\"Can't find the plugin by name\")",1899],["// CauseTypeFieldValueNotFound is used to report failure to find a requested value",428]],"useCount":72287},{"word":"first","context":[["//   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",429],["// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",635],["// TODO: use PageToken to list all not just the first 500",648],["// first, if it is available, then fall back on the default (as",669],["// Pos reports the position of the first component of n or zero if it's empty.",692],["c.Assert(waitRun(\"first\"), check.IsNil)",1141],["if !first {",1146],["if first {",1830],["first := true",2375],["first = false",2884]],"useCount":184485},{"word":"flag","context":[["set := flag.NewFlagSet(\"test\", 0)",1007],["args := flag.Args()",1763],["cmd.Require(flag.Min, 1)",1008],["flag \"github.com/docker/docker/pkg/mflag\"",1694],["flag.Usage = usage",1772],["flag.Usage = func() {",2215],["flag.PrintDefaults()",5196],["flag.Usage()",6074],["flag.Parse()",29569],["\"flag\"",41795]],"useCount":281267},{"word":"flags","context":[["if err := flags.Parse(args); err != nil {",556],["flags: []string{",604],["\"github.com/jessevdk/go-flags\"",611],["package flags",630],["\"github.com/vmware/govmomi/govc/flags\"",683],["\"github.com/cloudfoundry/cli/flags\"",803],["flags := cmd.Flags()",920],["{lang: 0x0, script: 0x0, flags: 0x0},",1858],["fs := make(map[string]flags.FlagSet)",529],["sh.flags = SHF_ALLOC",488]],"useCount":151416},{"word":"float32","context":[["case float32, float64:",394],["Float32() float32",931],["mapStringForStringToFloatMap := \"map[string]float32{\"",553],["mv = float32(dd.DecodeFloat(true))",468],["this.Field2[i] = float32(r.Float32())",414],["case float32:",2683],["case *float32:",412],["var v float32",398],["r.EncodeFloat32(float32(x.KubeAPIQPS))",394],["x.KubeAPIQPS = float32(r.DecodeFloat(true))",394]],"useCount":74152},{"word":"float64","context":[["Float64() float64",945],["num      float64",4303],["func() float64 {",731],["num2     float64",717],["num1     float64",717],["xf = float64(xn)",693],["case *float64:",666],["v2 := float64(math.Float64frombits(v))",629],["floatBuiltin1(func(x float64) (Datum, error) {",616],["case float64:",6780]],"useCount":203248},{"word":"fmt","context":[["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["\"fmt\"",423930],["fmt.Println(awsutil.StringValue(resp))",10680],["fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())",13348],["//        fmt.Println(resp)",13378],["import \"fmt\"",17353],["fmt.Println(resp)",19340],["fmt.Println(err)",20105],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["fmt.Println(err.Error())",36001]],"useCount":2333547},{"word":"fn","context":[["if fn != nil {",5078],["if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {",2234],["return fn, fn",924],["return fn, fn",924],["return fn",1069],["fn()",1088],["if fn == nil {",1171],["// iterating, return false from the fn function.",1419],["// calling the \"fn\" function with the response data for each page. To stop",1419],["if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {",2234]],"useCount":135560},{"word":"following","context":[["// Error can be either of the following types:",1860],["// following hierarchy:",699],["// furnished to do so, subject to the following conditions:",4317],["// with no spaces. You can also include any of the following characters: =,.@-",691],["furnished to do so, subject to the following conditions:",1015],["// Contains the result of a successful invocation of the following actions:",1010],["// If none of the following policies is specified, the default one",748],["//      by the following regex:",726],["//     by the following regex:",726],["// One and only one of the following should be specified.",718]],"useCount":63971},{"word":"foo","context":[["\"name\": \"foo\",",1956],["ID: \"foo\",",2032],["Name:            \"foo\",",2058],["Name:   \"foo\",",3234],["Namespace: \"foo\",",3367],["ID = foo",3453],["ObjectMeta: api.ObjectMeta{Name: \"foo\"},",5141],["Name:      \"foo\",",6661],["\"foo\": \"bar\",",7497],["Name: \"foo\",",9020]],"useCount":484757},{"word":"for","context":[["for i := 0; i < n; i++ {",13560],["for i := range *in {",14643],["for i := range in.Items {",16680],["for _, test := range tests {",20305],["for _, tt := range tests {",22910],["for i := 0; i < b.N; i++ {",52243],["// for more information.",56535],["for shift := uint(0); ; shift += 7 {",155764],["for {",227914],["for iNdEx < l {",30802]],"useCount":4566027},{"word":"form","context":[["form := url.Values{}",575],["// The serialized form of the secret data is a base64 encoded string,",626],["// It is represented in RFC3339 form and is in UTC.",652],["// for filtering listed resources, in the form filter={expression}. Your",693],["request.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",805],["*     * Redistributions in binary form must reproduce the above",979],["// Example printed form:",1020],["</form>",1244],["req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")",1373],["//     * Redistributions in binary form must reproduce the above",1736]],"useCount":72074},{"word":"format","context":[["//       \"format\": \"int32\",",9559],["//       \"format\": \"int64\",",14396],["\"go/format\"",1228],["// Go support for Protocol Buffers - Google's data interchange format",1229],["// format.",1244],["\"Invalid parameter id value=%s due to incorrect long value format, \"+",1308],["//       \"format\": \"date-time\",",1800],["//       \"format\": \"uint64\",",3335],["//       \"format\": \"uint32\",",6403],["switch format {",1061]],"useCount":209016},{"word":"found","context":[["if found {",7813],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["if !found {",26978],["found = true",13797],["found := false",10732],["if v, found := p.p[\"id\"]; found {",2786],["if v, found := p.p[\"id\"]; found {",2786],["var found bool",2212],["return nil, fmt.Errorf(\"Asset %s not found\", name)",2113]],"useCount":458908},{"word":"framework","context":[["framework.ExpectNoError(err)",3845],["Type:        framework.TypeString,",2224],["framework.ResourceEventHandlerFuncs{",1778],["Callbacks: map[logical.Operation]framework.OperationFunc{",1683],["\"k8s.io/kubernetes/test/e2e/framework\"",1587],["req *logical.Request, data *framework.FieldData) (*logical.Response, error) {",1515],["\"k8s.io/kubernetes/pkg/controller/framework\"",1333],["Fields: map[string]*framework.FieldSchema{",1271],["&framework.Path{",1034],["package framework",819]],"useCount":110198},{"word":"from","context":[["// Message from an error.",19226],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// ServerResponse contains the HTTP response code and headers from the",13928],["// error from Do is the result of In-None-Match.",12114],["It is generated from these files:",4689],["// values are omitted from API requests. However, any field with an",3833],["// BEGIN Unmarshal arguments from response.",2807],["// END Unmarshal arguments from response.",2807],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// A non-nil error returned from f will halt the iteration.",2234]],"useCount":738340},{"word":"fs","context":[["fs := make(map[string]flags.FlagSet)",529],["tok = fs.Scan()",537],["defer fs.mu.Unlock()",546],["outBuf := fs.Output.Bytes()",576],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["for _, f := range fs {",670],["fs.mu.Lock()",677],["return fs.WrapErr(err)",977],["return fs",998],["package fs",1109]],"useCount":99743},{"word":"func","context":[["func() {",9879],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(11),",10843],["func main() {",104447],["go func() {",124274],["func init() {",96919],["defer func() {",85652],["BeforeEach(func() {",60310],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Type:     func(v descriptor.FieldDescriptorProto_Type) *descriptor.FieldDescriptorProto_Type { return &v }(8),",11465],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(3),",11038]],"useCount":6459627},{"word":"function","context":[["// ProgressUpdater provides a callback function that will be called after every chunk.",498],["// This function is safe for concurrent access.",1627],["// It should be a low-latency function in order to not slow down the upload operation.",498],["// Inject real implementations here, test through the internal function.",524],["// arguments. The number specified in the function should match the number of",584],["// function.",957],["// variants of this function should be used to provide values for uniform",1168],["// other function will result in a GL.INVALID_OPERATION error.",1168],["// calling the \"fn\" function with the response data for each page. To stop",1419],["// iterating, return false from the fn function.",1419]],"useCount":203036},{"word":"g","context":[["// ForceSendFields is a list of field names (e.g. \"Etag\") to",1561],["g.mu.Lock()",1359],["g.P(\"}\")",2547],["g.P()",1968],["return g",1855],["g.Out()",1835],["g.In()",1775],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["// ForceSendFields is a list of field names (e.g. \"Kind\") to",1476],["// ForceSendFields is a list of field names (e.g. \"Id\") to",1195]],"useCount":369446},{"word":"gc","context":[["var n1 gc.Node",1078],["func(c *gc.C, st *State) changeTestCase {",950],["if gc.Debug['P'] != 0 {",1192],["package gc",1277],["c.Assert(err, gc.NotNil)",1526],["c.Check(err, gc.IsNil)",2043],["gc \"launchpad.net/gocheck\"",3387],["gc \"gopkg.in/check.v1\"",9251],["c.Assert(err, gc.IsNil)",75298],["gc.TestingT(t)",1136]],"useCount":474316},{"word":"generated","context":[["// Auto-generated - DO NOT EDIT",611],["It is generated from these files:",4689],["// Host name on which the event is generated.",628],["// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0",918],["// Code generated by protoc-gen-gogo.",3591],["// This file was generated by counterfeiter",1800],["// This file was generated by the swagger tool.",2864],["// Always reference these packages, just in case the auto-generated code",3048],["// This is a compile-time assertion to ensure that this generated file",3226],["// Code generated by protoc-gen-go.",3589]],"useCount":85611},{"word":"gensupport","context":[["urlParams_   gensupport.URLParams",9674],["urlParams_    gensupport.URLParams",1193],["gensupport \"google.golang.org/api/gensupport\"",1220],["var _ = gensupport.MarshalJSON",1223],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["urlParams_ gensupport.URLParams",6045],["return gensupport.SendRequest(c.ctx_, c.s.client, req)",7518],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["gensupport.SetOptions(c.urlParams_, opts...)",18124],["gensupport \"google.golang.org/api/gensupport\"",1220]],"useCount":100993},{"word":"get","context":[["// Print the error, cast err to awserr.Error to get the Code and",19219],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["t.Fatalf(\"the value %s in get result does not match the value %s in request\",",1107],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// authenticate once and get access to all their video and channel data,",847],["c.Fatalf(\"failed to get the container count: %s\", err)",840],["// token, used to page through large result sets. To get the next page",793],["glog.Errorf(\"Couldn't get key for object %+v: %v\", obj, err)",580],["Verb:     \"get\",",533],["// allAuthenticatedUsers get READER access.",528]],"useCount":272032},{"word":"github","context":[["\"github.com/juju/errors\"",11886],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787],["\"github.com/golang/glog\"",24041],[". \"github.com/onsi/ginkgo\"",19358],[". \"github.com/onsi/gomega\"",18984],["\"github.com/stretchr/testify/assert\"",18896],["\"github.com/spf13/cobra\"",12575],["\"github.com/Sirupsen/logrus\"",11173],["log \"github.com/Sirupsen/logrus\"",9798],["jc \"github.com/juju/testing/checkers\"",8768]],"useCount":1561075},{"word":"github_com_gogo_protobuf_proto","context":[["data, err := github_com_gogo_protobuf_proto.Marshal(p)",7723],["if err := github_com_gogo_protobuf_proto.Unmarshal(data, msg); err != nil {",7079],["if err := github_com_gogo_protobuf_proto.UnmarshalText(data, msg); err != nil {",4860],["Proto() github_com_gogo_protobuf_proto.Message",4822],["size2 := github_com_gogo_protobuf_proto.Size(p)",3137],["size3 := github_com_gogo_protobuf_proto.Size(p)",3137],["if err := github_com_gogo_protobuf_proto.Unmarshal(datas[i%10000], msg); err != nil {",3089],["dAtA, err := github_com_gogo_protobuf_proto.Marshal(p)",2753],["_ = github_com_gogo_protobuf_proto.Unmarshal(littlefuzz, msg)",2567],["if err := github_com_gogo_protobuf_proto.Unmarshal(dAtA, msg); err != nil {",2439]],"useCount":70371},{"word":"given","context":[["// MonthAbbreviated returns the locales abbreviated month given the 'month' provided",1430],["// fail if the object's ETag matches the given value. This is useful for",12114],["// WeekdayAbbreviated returns the locales abbreviated weekday given the 'weekday' provided",1430],["// WeekdayShort returns the locales short weekday given the 'weekday' provided",1430],["// WeekdayNarrow returns the locales narrow weekday given the 'weekday' provided",1430],["// WeekdayWide returns the locales wide weekday given the 'weekday' provided",1430],["// MonthNarrow returns the locales narrow month given the 'month' provided",1430],["// given",650],["// Asset loads and returns the asset for the given name.",737],["// MonthWide returns the locales wide month given the 'month' provided",1430]],"useCount":235895},{"word":"gl","context":[["\"github.com/go-gl/glfw/v3.1/glfw\"",242],["gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)",219],["gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)",219],["gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)",219],["package gl",345],["\"github.com/go-gl/mathgl/mgl32\"",351],["\"golang.org/x/mobile/gl\"",210],["gl.Clear(gl.COLOR_BUFFER_BIT)",207],["gl.Clear(gl.COLOR_BUFFER_BIT)",207],["\"github.com/go-gl/gl\"",201]],"useCount":63746},{"word":"glog","context":[["eventBroadcaster.StartLogging(glog.Infof)",824],["\"github.com/golang/glog\"",24041],["glog.Error(err)",2535],["log \"github.com/golang/glog\"",2490],["glog.Fatal(err)",1739],["\"github.com/ethereum/go-ethereum/logger/glog\"",719],["glog.Errorf(",699],["glog.Errorf(\"Couldn't get key for object %+v: %v\", obj, err)",580],["glog.Errorf(\"Error listing containers: %#v\", err)",569],["glog.Errorf(\"Error examining the container: %v\", err)",531]],"useCount":246848},{"word":"go","context":[["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["go func() {",124274],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["//go:nosplit",7697],["\"github.com/aws/aws-sdk-go/aws\"",7099],["\"go/token\"",6041],["\"go/ast\"",5181],["// This file is part of the go-ethereum library.",3823],["// Code generated by protoc-gen-go.",3589],["\"go/build\"",2837]],"useCount":712484},{"word":"golang","context":[["\"github.com/golang/glog\"",24041],["\"golang.org/x/net/websocket\"",1824],["\"golang.org/x/net/context\"",29586],["\"google.golang.org/grpc\"",3595],["log \"github.com/golang/glog\"",2490],["\"golang.org/x/oauth2\"",2278],["import proto \"github.com/golang/protobuf/proto\"",3039],["\"github.com/golang/protobuf/proto\"",3772],["context \"golang.org/x/net/context\"",2798],["\"google.golang.org/api/googleapi\"",1948]],"useCount":153709},{"word":"google","context":[["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["req.Header.Set(\"User-Agent\", \"google-api-go-client/0.5\")",14780],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FileOptions\"),",4847],["\"google.golang.org/grpc/codes\"",1276],["TypeName: func(v string) *string { return &v }(\".google.protobuf.UninterpretedOption\"),",1414],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FieldOptions\"),",1818],["\"google.golang.org/api/googleapi\"",1948],["\"google.golang.org/grpc\"",3595],["Extendee: func(v string) *string { return &v }(\".google.protobuf.MessageOptions\"),",4039]],"useCount":185820},{"word":"googleapi","context":[["// request. Use googleapi.IsNotModified to check whether the response",12114],["googleapi.SetOpaque(req.URL)",12641],["defer googleapi.CloseBody(res)",57836],["googleapi.ServerResponse `json:\"-\"`",13928],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["ServerResponse: googleapi.ServerResponse{",24578],["return nil, &googleapi.Error{",24591],["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["googleapi.Expand(req.URL, map[string]string{",44831],["if err := googleapi.CheckResponse(res); err != nil {",58830]],"useCount":531515},{"word":"googleapis","context":[["//     \"https://www.googleapis.com/auth/drive\",",2939],["//     \"https://www.googleapis.com/auth/devstorage.full_control\"",1998],["//     \"https://www.googleapis.com/auth/adsense.readonly\"",2088],["//     \"https://www.googleapis.com/auth/adsense\",",2088],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/compute\",",2840]],"useCount":131265},{"word":"got","context":[["t.Errorf(\"Expected %v, got %v\", e, a)",1539],["if got != expected {",2429],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["if !reflect.DeepEqual(got, want) {",2749],["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["if got != want {",4253],["t.Fatalf(\"String want %v got %v\", s1, s2)",3263],["t.Fatalf(\"GoString want %v got %v\", s1, s2)",3251],["t.Errorf(\"expected %v, got %v\", e, a)",2940],["if got != exp {",2794]],"useCount":451477},{"word":"goto","context":[["goto yyabort",2587],["goto ret",3964],["goto mainparse",4151],["goto _test_eof",2133],["goto Error",3546],["goto out",2847],["goto childerror",1339],["goto tr18",1400],["goto bad",1962],["goto yystate66",2354]],"useCount":127511},{"word":"group","context":[["group := sync.WaitGroup{}",631],["b = append(b, en.group[0])",612],["// SchemeGroupVersion is group version used to register these objects",770],["defer group.Done()",784],["// A group's client should implement this interface.",835],["group.Wait()",850],["for _, group := range groups {",877],["// group.",1117],["group                  string",1228],["RUN echo 'dockerio:x:1001:' >> /etc/group",2333]],"useCount":239402},{"word":"h","context":[["b = strconv.AppendInt(b, int64(h), 10)",1968],["if h > 12 {",1970],["h -= 12",1971],["h := t.Hour()",1974],["h.ServeHTTP(w, r)",2113],["#include <stdlib.h>",2180],["if e.h.Canonical {",2330],["return h",4240],["var h codecSelfer1234",59656],["_, _, _ = h, z, r",60384]],"useCount":499386},{"word":"handle","context":[["handle(err)",348],["\"handle\": handle,",399],["\"handle\": handle,",399],["handler := handle(storage)",1710],["// handle error",734],["handle string",593],["handle = Handle(r0)",534],["// users to handle external traffic that arrives at a node.",461],["handler := handle(map[string]rest.Storage{",424],["if handle == nil {",435]],"useCount":67075},{"word":"handler","context":[["handler := handle(storage)",1710],["return interceptor(ctx, in, info, handler)",4582],["server := httptest.NewServer(handler)",5123],["package handler",1398],["if handler == nil {",1239],["handler.ServeHTTP(w, r)",1077],["handler.ServeHTTP(w, req)",874],["func handler(w http.ResponseWriter, r *http.Request) {",873],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378]],"useCount":165117},{"word":"has","context":[["// null. It is an error if a field in this list has a non-empty value.",4930],["It has these top-level messages:",4689],["// getting updates only after the object has changed since the last",12114],["panic(\"parameter v has incorrect length\")",3384],["if !has {",687],["// If 'warn' has a value it means the job is running longer than the configured",1437],["} else if !has {",1434],["// FIXME: Requires compiler support (has immediate)",1227],["// server as null. It is an error if a field in this list has a",901],["if has {",733]],"useCount":282736},{"word":"hash","context":[["hash := sha256.New()",605],["\"hash\"",3166],["dockerName, hash, err := ParseDockerName(c.Names[0])",382],["\"hash/crc32\"",1226],["\"hash/fnv\"",1162],["\"hash/adler32\"",413],["hash := sha1.New()",426],["// Commit hash, this is optional",516],["return hash",677],["hash := md5.New()",576]],"useCount":124779},{"word":"have","context":[["t.Fatal(\"should have error\")",1770],["t.Fatalf(\"should not have error: %s\", err)",1072],["c.Fatal(\"The cache should have been invalided but hasn't.\")",738],["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// have a 2xx status code. Callers must close the Response.Body as usual.",619],["c.Fatal(\"The cache should have been used but hasn't.\")",630],["// index 2 in this pod). This syntax is chosen only to have some well-defined way of",671],["// If we have a async client, we need to wait for the async result",2363],["// as then you are sure you have configured all required params",4924],["// actually making the request, and provides an error response. If you have",6922]],"useCount":335762},{"word":"header","context":[["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["RequestCharged *string `location:\"header\" locationName:\"x-amz-request-charged\" type:\"string\" enum:\"RequestCharged\"`",560],["RequestPayer *string `location:\"header\" locationName:\"x-amz-request-payer\" type:\"string\" enum:\"RequestPayer\"`",576],["c.Fatalf(\"failed to write tar file header: %v\", err)",599],["// should retry (optionally after the time indicated in the Retry-After header).",654],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["Header *ResponseHeader `protobuf:\"bytes,1,opt,name=header\" json:\"header,omitempty\"`",984],["Header *ResponseHeader `protobuf:\"bytes,1,opt,name=header\" json:\"header,omitempty\"`",984],["header: &tar.Header{",1992]],"useCount":142337},{"word":"headers","context":[["// Any non-2xx status code is an error. Response headers are in either",1236],["// add HTTP headers to the request.",3239],["// non-2xx status code is an error. Response headers are in either",5221],["for k, v := range headers {",1048],["// ServerResponse contains the HTTP response code and headers from the",13928],["// code is an error. Response headers are in either",8983],["// status code is an error. Response headers are in either",7314],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// set headers",1788],["// assert headers",3020]],"useCount":110090},{"word":"hello","context":[["\"hello\",",485],["contents: \"hello\",",690],["\"baz\": \"hello\",",648],["\"robots.txt\": \"hello\",",432],["\"8a0310\"+\"68656c6c6f2c2022776f726c6421220a\"+ // field 49, encoding 2 string \"hello, \\\"world!\\\"\\n\"",352],["\"foo\": \"hello world\",",324],["c.Assert(strings.TrimSpace(out), check.Equals, \"hello\")",309],["\"foo\": \"hello\",",1396],["\"hello/docker/world\": \"hello\",",300],["w.Write([]byte(\"hello\"))",910]],"useCount":66677},{"word":"here","context":[["// release.  The thinking here is this:",466],["// here.",471],["// It should be OK to list unschedulable Nodes here.",505],["// Inject real implementations here, test through the internal function.",524],["// ReadOnly here will force the ReadOnly setting in VolumeMounts.",540],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// representing the arbitrary (possibly non-string) data value here.",626],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["// formats are defined here.",726],["// TODO: pass structured data to these actions, and document that data here.",716]],"useCount":97376},{"word":"host","context":[["plugin.host = host",855],["host:        \"\",",4118],["// kubelet's host machine and then exposed to the pod.",3083],["// Must be a filesystem type supported by the host operating system.",2721],["plugin.host = host",855],["if host == \"\" {",1654],["for _, host := range hosts {",1208],["Host string `json:\"host,omitempty\"`",1166],["host:        \"aaa.bbb.ccc\",",1101],["return host",1070]],"useCount":270667},{"word":"html","context":[["// at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",788],["<!DOCTYPE html>",646],["// SWF Workflows (http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html).",756],["w.Header().Set(\"Content-Type\", \"text/html\")",718],["w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\")",672],["\"golang.org/x/net/html\"",891],["\"html\"",1043],["</html>",2034],["<html>",2155],["\"html/template\"",7918]],"useCount":97498},{"word":"http","context":[["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["\"net/http\"",139133],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["\"net/http/httptest\"",17396],["reqHeaders := make(http.Header)",11911],["w.WriteHeader(http.StatusOK)",10652],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["// because http.StatusNotModified was returned.",9422],["if res != nil && res.StatusCode == http.StatusNotModified {",24578]],"useCount":1431079},{"word":"httpMethod","context":[["if httpMethod == \"GET\" {",38],["httpMethod := context.Request.Method",37],["if t[i].method == httpMethod {",36],["} else if httpMethod != \"CONNECT\" && path != \"/\" {",36],["//   \"httpMethod\": \"GET\",",28210],["\"httpMethod\": \"GET\",",72],["//   \"httpMethod\": \"PATCH\",",4133],["//   \"httpMethod\": \"PUT\",",5237],["//   \"httpMethod\": \"DELETE\",",6703],["//   \"httpMethod\": \"POST\",",18913]],"useCount":63979},{"word":"https","context":[["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/drive\",",2939],["// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",23003],["// See https://developers.google.com/gdata/docs/2.0/basics#PartialResponse",33399],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/compute\",",2840],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["//     \"https://www.googleapis.com/auth/adsense\",",2088]],"useCount":322263},{"word":"httptest","context":[["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["\"net/http/httptest\"",17396],["res := httptest.NewRecorder()",1696],["recorder := httptest.NewRecorder()",10846],["server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",1873],["rec := httptest.NewRecorder()",2225],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["resp := httptest.NewRecorder()",2692],["w := httptest.NewRecorder()",6588],["server := httptest.NewServer(handler)",5123]],"useCount":94106},{"word":"i","context":[["data[i] = 0xa",24096],["i := 0",22064],["data[i] = 0x12",17841],["_ = i",30398],["return i, nil",34067],["var i int",38426],["for i := 0; i < b.N; i++ {",52243],["for i := 0; i < b.N; i++ {",52243],["for i := 0; i < b.N; i++ {",52243],["i++",171275]],"useCount":3651601},{"word":"iNdEx","context":[["for iNdEx < l {",30802],["iNdEx = postIndex",67189],["b := data[iNdEx]",137749],["iNdEx++",149902],["if iNdEx >= l {",149902],["iNdEx := 0",30802],["if (iNdEx + skippy) > l {",28713],["iNdEx += skippy",28713],["iNdEx = preIndex",26126],["postIndex := iNdEx + msglen",41105]],"useCount":962486},{"word":"id","context":[["return id",2807],["if id == \"\" {",3068],["\"id\": c.id,",3094],["\"id\": c.id,",3094],["id := strings.TrimSpace(out)",4703],["c.id = id",5279],["c.id = id",5279],["//     \"id\"",5734],["Id string `json:\"id,omitempty\"`",11055],["//     \"id\": {",6328]],"useCount":792065},{"word":"idx","context":[["// \tidx:      10,",2142],["// \tidx:      8,",2142],["// \tidx:      0,",2856],["// \tidx:      2,",4998],["// \tidx:      3,",4998],["// \tidx:      5,",4998],["// \tidx:      1,",4998],["// \tidx:      4,",4998],["// \tidx:      6,",4998],["idx      int",5056]],"useCount":123997},{"word":"if","context":[["if shift >= 64 {",137139],["if postIndex > l {",71103],["if this == nil {",80648],["if err != nil {",3731570],["if r.TryDecodeAsNil() {",130473],["if iNdEx >= l {",149902],["if false {",153082],["if b < 0x80 {",153986],["if err == nil {",169101],["if !ok {",225887]],"useCount":15885829},{"word":"image","context":[["\"image\"",5266],["imageapi \"github.com/openshift/origin/pkg/image/api\"",1852],["\"image/color\"",3097],["Image: \"image\",",3558],["Containers:    []api.Container{{Name: \"ctr\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",3745],["Containers:    []api.Container{{Name: \"abc\", Image: \"image\", ImagePullPolicy: \"IfNotPresent\"}},",1547],["\"image/png\"",1475],["\"github.com/docker/docker/image\"",1677],["\"image/draw\"",1187],["Image: image,",1067]],"useCount":290302},{"word":"implements","context":[["// Format implements the NodeFormatter interface.",1170],["// String implements fmt.Stringer.",988],["// Method implements the Request interface.",855],["// TypeCheck implements the Expr interface.",708],["// UnmarshalYAML implements the yaml.Unmarshaler interface.",697],["// Walk implements the Expr interface.",691],["// StatementType implements the Statement interface.",648],["// Error implements the error interface.",620],["// Eval implements the TypedExpr interface.",603],["// CreateReply implements the Request interface.",492]],"useCount":81634},{"word":"import","context":[["import \"os\"",3038],["import (",899476],["import \"time\"",4479],["import \"unsafe\"",4235],["import fmt \"fmt\"",5415],["import math \"math\"",6654],["import \"testing\"",10339],["import \"C\"",11442],["import \"fmt\"",17353],["import proto \"github.com/golang/protobuf/proto\"",3039]],"useCount":1091840},{"word":"in","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["if in.Items != nil {",23966],["// unconditionally include in API requests. By default, fields with",36870],["// Context sets the context to be used in this call's Do method. Any",22537],["for i := range *in {",14643],["for i := range in.Items {",16680],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["// used to include empty fields in Patch requests.",38333],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["out.Name = in.Name",14366]],"useCount":3312632},{"word":"include","context":[["// unconditionally include in API requests. By default, fields with",36870],["#include <stdlib.h>",2180],["// This parameter is optional. If you do not include it, it defaults to 100.",764],["#include <stdio.h>",733],["// include in API requests with the JSON null value. By default, fields",819],["// The maximum number of records to include in the response. If more records",1022],["// #include <stdlib.h>",1087],["// used to include empty fields in Patch requests.",38333],["//       \"description\": \"Cloud SQL instance ID. This does not include the project ID.\",",1087],["// to unconditionally include in API requests. By default, fields with",1463]],"useCount":151605},{"word":"index","context":[["m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)",1332],["for index < l {",1349],["index -= sizeOfWire",1342],["index += skippy",1342],["postIndex := index + msglen",1752],["index++",8079],["b := data[index]",6059],["if index >= l {",6068],["index = postIndex",2697],["index := 0",2808]],"useCount":299772},{"word":"influxql","context":[["Op:  influxql.EQ,",1029],["Condition: &influxql.BinaryExpr{",1515],["Fields: []*influxql.Field{",1055],["Sources: []influxql.Source{&influxql.Measurement{Name: \"myseries\"}},",638],["return &influxql.Result{Err: err}",876],["Fields:     []*influxql.Field{{Expr: &influxql.Wildcard{}}},",661],["Fields:     []*influxql.Field{{Expr: &influxql.Wildcard{}}},",661],["stmt: &influxql.SelectStatement{",2112],["Sources: []influxql.Source{&influxql.Measurement{Name: \"myseries\"}},",638],["ic.CreateIteratorFn = func(opt influxql.IteratorOptions) (influxql.Iterator, error) {",623]],"useCount":80317},{"word":"info","context":[["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["info := &grpc.UnaryServerInfo{",4580],["return interceptor(ctx, in, info, handler)",4582],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["if info.IsDir() {",2244],["return info, nil",2204],["a := &asset{bytes: bytes, info: info}",5153],["a := &asset{bytes: bytes, info: info}",5153],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189]],"useCount":340860},{"word":"information","context":[["// for more information.",56535],["* distributed with this work for additional information",1018],["distributed with this work for additional information",975],["// information.",801],["// ObjectReference contains enough information to let you inspect or modify the referred object.",706],["// NodeStatus is information about the current status of a node.",695],["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// NamespaceStatus is information about the current status of a Namespace.",634],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624]],"useCount":238091},{"word":"init","context":[["func init() {",96919],["walkexpr(&n.Right, init)",448],["t.init()",508],["*init = list(*init, a)",588],["*init = list(*init, a)",588],["b.init()",389],["t.Fatalf(\"test init failed: %s\", err)",3640],["if err := test.init(s); err != nil {",3591],["walkexpr(&n.Left, init)",874],["initID := fmt.Sprintf(\"%s-init\", container.ID)",686]],"useCount":172461},{"word":"input","context":[["input string",658],["// Stats returns stats from the input iterator.",639],["input    string",698],["input: analysis.TokenStream{",918],["input  string",1072],["return input",1075],["config, err = DecodeConfig(bytes.NewReader([]byte(input)))",1336],["req = c.newRequest(op, input, output)",46423],["if input == nil {",54083],["// will be set to false if the input value is 0 or 0.0f, and it will be set",584]],"useCount":426551},{"word":"instance","context":[["//     \"instance\": {",2010],["c.instance = instance",1823],["c.instance = instance",1823],["\"instance\": c.instance,",1564],["\"instance\": c.instance,",1564],["//     \"instance\"",1422],["// instance.",1366],["// newClient creates, initializes and returns a new service client instance.",2270],["\"github.com/juju/juju/instance\"",3250],["// If additional configuration is needed for the client instance use the optional",2272]],"useCount":266492},{"word":"instances","context":[["// instances.",570],["for _, instance := range instances {",882],["if len(instances) == 0 {",757],["return instances, nil",751],["instances, ok := kl.cloud.Instances()",492],["for _, inst := range instances {",410],["return fmt.Errorf(\"failed to get instances from cloud provider\")",380],["if len(instances) > 1 {",352],["return instances[0], nil",345],["var instances []string",334]],"useCount":80406},{"word":"instead","context":[["// Optional. If referring to a piece of an object instead of an entire object, this string",525],["// generated name exists - instead, it will either return 201 Created or 500 with Reason",471],["t.Fatal(\"Expected to fail. But instead succeeded\")",330],["// missing service env var and exit and be restarted; or (3) use DNS instead of env vars",306],["//       need to use such a function and can instead",286],["// Create a deployment to delete nginx pods and instead bring up redis pods.",284],["// Deprecated: use Media instead.",271],["// If this value is nil, the default grace period will be used instead.",539],["// Download fetches the API endpoint's \"media\" value, instead of the normal",619],["// instead.",13866]],"useCount":73312},{"word":"int","context":[["v |= (int(b) & 0x7F) << shift",5834],["case int:",5838],["msglen |= (int(b) & 0x7F) << shift",42857],["var l int",66946],["var v int",6356],["var msglen int",42860],["n = int(r0)",7051],["intStringLen := int(stringLen)",21411],["wireType := int(wire & 0x7)",32066],["var i int",38426]],"useCount":1672174},{"word":"int32","context":[["fieldNum := int32(wire >> 3)",29949],["Format:      \"int32\",",9626],["Number:   func(v int32) *int32 { return &v }(3),",2702],["var v int32",3069],["case int32:",3163],["Number:   func(v int32) *int32 { return &v }(2),",5407],["Number:   func(v int32) *int32 { return &v }(2),",5407],["Number:   func(v int32) *int32 { return &v }(1),",6114],["Number:   func(v int32) *int32 { return &v }(1),",6114],["//       \"format\": \"int32\",",9559]],"useCount":487603},{"word":"int64","context":[["var v int64",2868],["b.SetBytes(int64(total / b.N))",10167],["//       \"format\": \"int64\",",14396],["b = strconv.AppendInt(b, int64(t.Hour()), 10)",3536],["profileId int64",2347],["b = strconv.AppendInt(b, int64(t.Second()), 10)",4128],["b = strconv.AppendInt(b, int64(t.Year()), 10)",4840],["b = strconv.AppendInt(b, int64(t.Minute()), 10)",5504],["b = strconv.AppendInt(b, int64(t.Day()), 10)",5570],["case int64:",6144]],"useCount":656242},{"word":"intStringLen","context":[["intStringLen := int(stringLen)",21411],["if intStringLen < 0 {",21411],["postIndex := iNdEx + intStringLen",21411]],"useCount":64233},{"word":"integer","context":[["//       \"type\": \"integer\"",15969],["Type:        []string{\"integer\"},",11323],["MaxRecords *int64 `type:\"integer\"`",1797],["MaxResults *int64 `locationName:\"maxResults\" type:\"integer\"`",795],["Unit:  \"integer\",",762],["Port *int64 `type:\"integer\"`",742],["// indicates that unsigned integer values are being passed, and this type",584],["// suffix i indicates that integer values are being passed; the suffix ui",584],["// The duration is specified in seconds; an integer greater than or equal to",726],["\"type\": \"integer\",",654]],"useCount":89773},{"word":"interface","context":[["p map[string]interface{}",4924],["// error which satisfies the awserr.Error interface.",11875],["map[string]interface{}{",10488],["queryParameters := map[string]interface{}{",6913],["handler := func(ctx context.Context, req interface{}) (interface{}, error) {",4584],["p.p = make(map[string]interface{})",32934],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["pathParameters := map[string]interface{}{",6852],["opt_      map[string]interface{}",5638],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968]],"useCount":1086098},{"word":"internal","context":[["\"cmd/internal/obj\"",2098],["\"internal/testenv\"",494],["package internal",1195],["\"github.com/cockroachdb/cockroach/pkg/internal/client\"",478],["// XXX_OneofFuncs is for the internal use of the proto package.",1268],["panic(\"internal error\")",1040],["// These are internal finalizer values to Kubernetes, must be qualified name unless defined here",593],["// Inject real implementations here, test through the internal function.",524],["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["\"github.com/cockroachdb/cockroach/internal/client\"",503]],"useCount":97591},{"word":"into","context":[["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["var yys3Slc = z.DecScratchBuffer() // default slice to decode into",3894],["// BEGIN Marshal arguments into request.",2807],["// END Marshal arguments into request.",2807],["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431],["codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)",622],["// slice with the values to be loaded into a uniform variable or a uniform",584],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["// for all of the containers in the podSpec to move into the 'Success' status, and tests",475],["// Hook up gocheck into the \"go test\" runner.",471]],"useCount":184188},{"word":"invalid","context":[["if x.mode == invalid {",1269],["return res, fmt.Errorf(\"invalid response %s%s\", resp.Status, sr)",1168],["return fmt.Errorf(\"invalid response %s%s\", resp.Status, sr)",851],["// invalid",770],["if x.mode != invalid {",451],["if len(invalid) > 0 {",429],["var invalid []string",390],["\"invalid-labels\": {",389],["return fmt.Errorf(\"missing required fields: %v\", invalid)",386],["x.mode = invalid",1526]],"useCount":151143},{"word":"invalidParams","context":[["invalidParams.Add(request.NewErrParamRequired(\"Id\"))",436],["return invalidParams",18401],["if invalidParams.Len() > 0 {",18392],["invalidParams.Add(request.NewErrParamRequired(\"Name\"))",918],["invalidParams.Add(request.NewErrParamRequired(\"Key\"))",477],["invalidParams.Add(request.NewErrParamMinLen(\"Name\", 1))",508],["invalidParams.Add(request.NewErrParamRequired(\"RestApiId\"))",594],["invalidParams.Add(request.NewErrParamRequired(\"Bucket\"))",869],["invalidParams.AddNested(fmt.Sprintf(\"%s[%v]\", \"Filters\", i), err.(request.ErrInvalidParams))",461],["invalidParams.Add(request.NewErrParamMinLen(\"Key\", 1))",429]],"useCount":81559},{"word":"io","context":[["return io.ErrUnexpectedEOF",285098],["\"io\"",126310],["\"io/ioutil\"",111038],["var body io.Reader = nil",58552],["\"k8s.io/kubernetes/pkg/api\"",26465],["if err == io.EOF {",16583],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["return 0, io.ErrUnexpectedEOF",8985]],"useCount":1360615},{"word":"ioutil","context":[["req.HTTPResponse = &http.Response{StatusCode: 200, Body: ioutil.NopCloser(buf), Header: http.Header{}}",1747],["\"io/ioutil\"",111038],["body, err := ioutil.ReadAll(resp.Body)",8460],["body, _ := ioutil.ReadAll(r.Body)",2320],["respBody, _ := ioutil.ReadAll(resp.Body)",2084],["log.SetOutput(ioutil.Discard)",2012],["body, _ := ioutil.ReadAll(resp.Body)",1978],["body, err := ioutil.ReadAll(res.Body)",1752],["body, err := ioutil.ReadAll(r.Body)",1646],["data, err := ioutil.ReadAll(resp.Body)",1548]],"useCount":282086},{"word":"ip","context":[["for _, ip := range ips {",619],["//     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],",594],["ip = v.IP",638],["return ip, nil",676],["var ip net.IP",704],["if ip != nil {",885],["return ip",902],["if ip == nil {",2194],["//     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],",594],["if ip == \"\" {",1080]],"useCount":97527},{"word":"is","context":[["//    if err == nil { // resp is now filled",13378],["// non-2xx status code is an error. Response headers are in either",5221],["// pending HTTP request will be aborted if the provided context is",22537],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["// it is UnauthorizedOperation.",6922],["// status code is an error. Response headers are in either",7314],["// is called.",13495],["// fail if the object's ETag matches the given value. This is useful for",12114],["// error from Do is the result of In-None-Match.",12114],["// code is an error. Response headers are in either",8983]],"useCount":2849456},{"word":"it","context":[["// TODO: Inefficient conversion - can we improve it?",2317],["// it is UnauthorizedOperation.",6922],["// http.Response Body if it receives an error.",6600],["// is compatible with the proto package it is being compiled against.",2473],["// If one of the conversion functions is malformed, detect it immediately.",1915],["// If 'warn' has a value it means the job is running longer than the configured",1437],["// tag the image and upload it to the private registry",851],["// if one of the deep copy functions is malformed, detect it immediately.",847],["// If there is an error, it will be of type *PathError.",833],["for it.Next() {",826]],"useCount":733494},{"word":"item","context":[["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["list.Items = append(list.Items, item)",887],["if label.Matches(labels.Set(item.Labels)) {",842],["<item>",1257],["if item == nil {",645],["</item>",1295],["return item",1537],["for _, item := range list.Items {",1909],["for _, item := range items {",2132],["for _, item := range table {",2211]],"useCount":158367},{"word":"items","context":[["// A flag that indicates whether there are more items to return. If your results",724],["\"items\": {",4076],["Required: []string{\"items\"},",2542],["for _, item := range items {",2132],["case \"items\":",2008],["// LimitRangeList is a list of LimitRange items.",648],["// number of items to include in a single response page. The maximum",655],["r.EncodeString(codecSelferC_UTF81234, string(\"items\"))",1977],["for i := range items {",778],["// Use this only when paginating results to indicate the maximum number of items",746]],"useCount":116316},{"word":"its","context":[["// Wait a bit to allow scheduler to do its thing",387],["// Exactly one of its members must be set.",412],["// The field of the resource that has caused this error, as named by its JSON",429],["//     * Neither the name of Google Inc. nor the names of its",1251],["Context(\"and the indicator has recieved all of its ticks\", func() {",370],["*     * Neither the name of Google Inc. nor the names of its",979],["// Status defines the actual enforced quota and its current usage",524],["// _bindata is a table, holding each asset generator, mapped to its name.",738],["// PersistentVolumeReclaimDelete means the volume will be deleted from Kubernetes on release from its claim.",454],["// generate Swagger API documentation for its models. Please read this PR for more",456]],"useCount":122638},{"word":"j","context":[["for j := 0; j < containerLen; j++ {",3841],["for j := 0; j < containerLen; j++ {",3841],["j := 0",4093],["j++",6007],["b[i], b[j] = b[j], b[i]",5248],["b[i], b[j] = b[j], b[i]",5248],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094]],"useCount":376600},{"word":"jc","context":[["c.Assert(ok, jc.IsFalse)",662],["go func() { c.Check(a.Run(nil), jc.ErrorIsNil) }()",397],["c.Assert(found, jc.IsTrue)",505],["c.Assert(called, jc.IsTrue)",537],["c.Assert(err, jc.Satisfies, os.IsNotExist)",563],["c.Assert(ok, jc.IsTrue)",2447],["c.Assert(err, jc.Satisfies, errors.IsNotFound)",2884],["c.Check(err, jc.ErrorIsNil)",4766],["jc \"github.com/juju/testing/checkers\"",8768],["c.Assert(err, jc.ErrorIsNil)",135421]],"useCount":187303},{"word":"job","context":[["streamJSON(job, w, false)",631],["return job.Run()",685],["// If 'warn' has a value it means the job is running longer than the configured",1437],["job := mock.Job()",756],["addMachine{machineId: \"1\", job: state.JobHostUnits},",549],["job := &mgo.MapReduce{",460],["for _, job := range jobs {",409],["// timeout, the resonse will contain the jobid of the running async job",1437],["if err := job.Run(); err != nil {",2820],["return job.Error(err)",3008]],"useCount":131320},{"word":"json","context":[["googleapi.ServerResponse `json:\"-\"`",13928],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["res, err := c.doRequest(\"json\")",33446],["Kind string `json:\"kind,omitempty\"`",30419],["params.Set(\"alt\", \"json\")",25051],["unversioned.TypeMeta `json:\",inline\"`",20119],["Name string `json:\"name,omitempty\"`",13075],["ForceSendFields []string `json:\"-\"`",39509],["ctype := \"application/json\"",17586],["\"encoding/json\"",100948]],"useCount":1962135},{"word":"juju","context":[["\"github.com/juju/juju/instance\"",3250],["\"github.com/juju/names\"",4338],["\"github.com/juju/loggo\"",3582],["\"github.com/juju/utils\"",3390],["\"github.com/juju/juju/state\"",4908],["\"github.com/juju/errors\"",11886],["jc \"github.com/juju/testing/checkers\"",8768],["\"github.com/juju/juju/apiserver/params\"",4974],["\"github.com/juju/juju/apiserver/params\"",4974],["\"github.com/juju/juju/state\"",4908]],"useCount":278909},{"word":"just","context":[["// cached there, something is wrong (or kubelet just restarted and hasn't",268],["// Always reference these packages, just in case the auto-generated code",3048],["// TODO: use PageToken to list all not just the first 500",648],["// implementation. This makes faking out just the methods you want to test easier.",406],["// not just take the node list and choose the first of them. Depending on the",396],["// implementation. This makes faking out just the method you want to test easier.",377],["// worker runs a worker thread that just dequeues items, processes them, and marks them done.",358],["// api.Container is already running by its hash. (We don't want to restart a container just",302],["// which case it just checks for a non-empty response.",245],["// Sometimes AWS just has consistency issues and doesn't see",264]],"useCount":80956},{"word":"k","context":[["i += copy(data[i:], k)",2627],["_ = k",7707],["t.Errorf(\"expected failure for %s\", k)",1985],["for k, v := range m {",2867],["reqHeaders[k] = v",3239],["for k, v := range c.header_ {",3239],["keys = append(keys, k)",3300],["switch k {",3315],["for k, v := range errorCases {",3315],["for _, k := range keys {",4582]],"useCount":510437},{"word":"k8s","context":[["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api\"",26465],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"k8s.io/kubernetes/pkg/util\"",8174],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"k8s.io/kubernetes/pkg/fields\"",6969],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["\"k8s.io/kubernetes/pkg/watch\"",5881],["kapi \"k8s.io/kubernetes/pkg/api\"",5721]],"useCount":423509},{"word":"kapi","context":[["ObjectMeta: kapi.ObjectMeta{",10395],["kapi \"k8s.io/kubernetes/pkg/api\"",5721],["kapi \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",2656],["From: &kapi.ObjectReference{",2099],["To: &kapi.ObjectReference{",1342],["RoleRef: kapi.ObjectReference{",1017],["kapi.ObjectMeta",663],["kapi.ObjectMeta `json:\"metadata,omitempty\"`",713],["Spec: kapi.PodSpec{",776],["From: kapi.ObjectReference{",797]],"useCount":100457},{"word":"key","context":[["out.Selector[key] = val",1884],["Key          string `json:\"key,omitempty\"`",1941],["switch key {",2434],["return key",2435],["for key, val := range *in {",2838],["for _, key := range keys {",3855],["for key, val := range in {",1925],["key = etcdtest.AddPrefix(key)",1920],["key = etcdtest.AddPrefix(key)",1920],["for key, val := range in.Selector {",1906]],"useCount":825279},{"word":"keys","context":[["\"github.com/cockroachdb/cockroach/keys\"",1855],["keys = append(keys, key)",1757],["keys = append(keys, key)",1757],["return keys",2446],["keys = append(keys, k)",3300],["keys = append(keys, k)",3300],["sort.Strings(keys)",3468],["for _, key := range keys {",3855],["for _, k := range keys {",4582],["for i, key := range keys {",1736]],"useCount":177801},{"word":"kind","context":[["\"kind\": \"Service\",",564],["\"kind\": \"DockerImage\",",715],["k := v.kind()",791],["\"kind\": \"ImageStreamTag\",",831],["// Kind: The kind of resource this is, in this case",921],["switch kind {",2465],["r.EncodeString(codecSelferC_UTF81234, string(\"kind\"))",4854],["case \"kind\":",4876],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["Kind string `json:\"kind,omitempty\"`",30419]],"useCount":152831},{"word":"kl","context":[["kl.HandlePodAdditions(pods)",718],["if kl.kubeClient == nil {",618],["if kl.cloud != nil {",638],["start := kl.clock.Now()",701],["kl.handleMirrorPod(pod, start)",735],["mirrorPod, _ := kl.podManager.GetMirrorPodByPod(pod)",751],["container, err := kl.findContainer(podFullName, podUID, containerName)",857],["kl.podManager.SetPods(pods)",864],["podUID = kl.podManager.TranslatePodUID(podUID)",1285],["kl := testKubelet.kubelet",2258]],"useCount":134168},{"word":"kubecontainer","context":[["osInterface kubecontainer.OSInterface,",619],["kubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"",2519],["Containers: []*kubecontainer.Container{",2335],["fakeRuntime.PodList = []*kubecontainer.Pod{",1327],["podFullName := kubecontainer.GetPodFullName(pod)",1324],["expectedEnvs: []kubecontainer.EnvVar{",1233],["return kubecontainer.ContainerID{}, err",799],["pod := kubecontainer.Pods(pods).FindPod(podFullName, podUID)",746],["containerRefManager *kubecontainer.RefManager",684],["State:    kubecontainer.ContainerStateExited,",659]],"useCount":75696},{"word":"kubelet","context":[["kubelet.podManager.SetPods(pods)",1562],["// kubelet's host machine and then exposed to the pod.",3083],["kubecontainer \"k8s.io/kubernetes/pkg/kubelet/container\"",2519],["kubelet := testKubelet.kubelet",8380],["kubelet := testKubelet.kubelet",8380],["kl := testKubelet.kubelet",2258],["package kubelet",1602],["kubelet.runner = &fakeCommandRunner",1359],["// determined by kubelet) DNS settings.",1332],["\"k8s.io/kubernetes/pkg/kubelet/network\"",1315]],"useCount":150949},{"word":"kubernetes","context":[["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api\"",26465],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/util\"",8174],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"k8s.io/kubernetes/pkg/fields\"",6969],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138]],"useCount":483500},{"word":"l","context":[["if postIndex > l {",71103],["if iNdEx >= l {",149902],["var l int",66946],["_ = l",66539],["for iNdEx < l {",30802],["n += 1 + l + sovGenerated(uint64(l))",30501],["n += 1 + l + sovGenerated(uint64(l))",30501],["l := len(data)",30341],["if (iNdEx + skippy) > l {",28713],["if iNdEx > l {",26126]],"useCount":1285759},{"word":"label","context":[["\"github.com/opencontainers/runc/libcontainer/label\"",801],["if label.Matches(labels.Set(item.Labels)) {",842],["switch label {",1602],["label = labels.Everything()",856],["if label == nil {",873],["options := api.ListOptions{LabelSelector: label}",1037],["return \"\", \"\", fmt.Errorf(\"field label not supported: %s\", label)",1368],["return \"\", \"\", fmt.Errorf(\"field label not supported: %s\", label)",1368],["return label, value, nil",1650],["func(label, value string) (string, string, error) {",1653]],"useCount":118901},{"word":"labels","context":[["labels \"k8s.io/kubernetes/pkg/labels\"",765],["labels \"k8s.io/kubernetes/pkg/labels\"",765],["if label.Matches(labels.Set(item.Labels)) {",842],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/labels\"",4329],["\"labels\": {",1085],["Labels: labels,",1064],["labels: map[string]string{",916],["labels.Everything(),",908],["label = labels.Everything()",856]],"useCount":145896},{"word":"last","context":[["// resource was the last reference to that disk on the kubelet.",405],["// getting updates only after the object has changed since the last",12114],["// Human readable message indicating details about last transition.",456],["// (brief) reason for the condition's last transition.",445],["t.Errorf(\"unexpected zero last transition timestamp\")",300],["t.Errorf(\"unexpected zero last probe timestamp\")",302],["if last {",320],["t.Errorf(\"unexpected node condition order. NodeReady should be last.\")",326],["// no changes are seen to the configuration, will synchronize the last known desired",358],["last := 0",431]],"useCount":120353},{"word":"latest","context":[["b := NewBuilder(latest.RESTMapper, api.Scheme, fakeClient()).",391],["// PullAlways means that kubelet always attempts to pull the latest image.  Container will fail If the pull fails.",510],["// AWS Service Namespaces (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)",608],["\"github.com/openshift/origin/pkg/api/latest\"",629],["\"latest\": {",682],["// SWF Workflows (http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html).",756],["// at http://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html",788],["// selects a specific revision of this object (as opposed to the latest",804],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api/latest\"",1032],["\"k8s.io/kubernetes/pkg/api/latest\"",1090]],"useCount":78493},{"word":"len","context":[["r.EncodeArrayStart(len(v))",3973],["if len(args) > 0 {",3784],["if len(p) > 0 {",3808],["l := len(data)",30341],["n += len(m.XXX_unrecognized)",8149],["if len(args) != 1 {",5831],["l = len(s)",5746],["if len(args) == 0 {",5579],["for i := len(s) - 1; i >= 0; i-- {",5232],["for i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {",5094]],"useCount":1858241},{"word":"length","context":[["if l.length == 0 {",1034],["return length",4031],["panic(\"parameter v has incorrect length\")",3384],["var length int",2514],["if length < 0 {",2335],["length = i + 1",2260],["length |= (int(b) & 0x7F) << shift",2201],["iNdEx += length",2193],["for i := 0; i < length; i++ {",1466],["if length == 0 {",1060]],"useCount":151699},{"word":"level","context":[["\"b404\"+ // end group field 70 level 1",440],["_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)",432],["Level string `json:\"level,omitempty\"`",430],["if level == 0 {",415],["func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {",392],["It has these top-level messages:",4689],["switch level {",551],["\"b304\"+ // start group field 70 level 1",440],["if !strings.Contains(string(content), `level=debug`) {",449],["level++",391]],"useCount":105527},{"word":"limit","context":[["// Type of resource that this limit applies to",469],["//  Use a Resource element with the domain name to limit the action to only",846],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// Parse limit: \"LIMIT <n>\".",279],["op.limit = -1",279],["r.Options.Limit = &limit",308],["if limit > 0 {",333],["LimitToken:      \"limit\",",391],["// slightly more or slightly less than the specified limit.",421],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469]],"useCount":88719},{"word":"line","context":[["if line == \"\" {",979],["if len(line) == 0 {",1252],["fields := strings.Fields(line)",935],["_, file, line, _ := runtime.Caller(1)",1328],["for i, line := range lines {",839],["line := scanner.Text()",2114],["for _, line := range lines {",3668],["line = strings.TrimSpace(line)",1662],["// A compilation error at this line likely means your copy of the",1437],["line = strings.TrimSpace(line)",1662]],"useCount":249437},{"word":"link","context":[["// link operation occurs on the program object, when they are once again",1594],["t.Errorf(\"Never set self link\")",715],["func Link(path string, link string) (err error) {",265],["* this file and link it with other files to produce an executable, this",276],["base := link.Attrs()",570],["_p1, err = BytePtrFromString(link)",492],["// SelfLink: A link back to this list.",394],["for _, link := range links {",378],["link.Disable()",336],["Link string `json:\"link,omitempty\"`",287]],"useCount":77790},{"word":"list","context":[["// null. It is an error if a field in this list has a non-empty value.",4930],["for _, item := range list.Items {",1909],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707],["Filters []*Filter `locationName:\"Filter\" locationNameList:\"Filter\" type:\"list\"`",1627],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["return list, nil",1573],["// ForceSendFields is a list of field names (e.g. \"Etag\") to",1561],["return list",3163],["// Standard list metadata.",3777],["\"container/list\"",3181]],"useCount":568262},{"word":"load","context":[["// (typically GCE or OpenStack load-balancers)",485],["// IP is set for load-balancer ingress points that are IP based",485],["// Hostname is set for load-balancer ingress points that are DNS based",485],["// LoadBalancerIngress represents the status of a load-balancer ingress point:",484],["// LoadBalancer contains the current status of the load-balancer,",485],["// external load balancer (if the cloud provider supports it), in addition",484],["// (typically AWS load-balancers)",485],["// load balancing pools of all matching services.",635],["// The name of the load balancer.",673],["// load uniform variables defined as sampler types. Loading samplers with any",1168]],"useCount":65137},{"word":"local","context":[["\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",",810],["package local",733],["\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",",810],["// for translating report output to a local language. Defaults to",416],["// data between stream (representing the user's local connection on their",365],["// LocalAddr returns the local network address.",314],["// IsImagePresent checks whether the container image is already in the local storage.",303],["if local {",254],["// local listener that port forwarding sets up, the telnet session never exits. This",245],["// Cobra supports local flags which will only run when this command",245]],"useCount":99100},{"word":"locales","context":[["func New() locales.Translator {",1430],["// \texpected: locales.PluralRuleOther,",4284],["expected locales.PluralRule",4302],["return locales.PluralRuleOther",4110],["// \texpected: locales.PluralRuleOne,",2856],["return locales.PluralRuleOne",2164],["\"github.com/go-playground/locales/currency\"",2149],["if r == locales.PluralRuleUnknown {",2151],["r := locales.PluralRuleUnknown",2151],["\"github.com/go-playground/locales\"",2155]],"useCount":67723},{"word":"location","context":[["//   (*fnptr)(program, location, count, value);",628],["//       \"location\": \"query\",",83874],["// Source represents the location and type of a volume to mount.",722],["RestApiId *string `location:\"uri\" locationName:\"restapi_id\" type:\"string\" required:\"true\"`",864],["Location string `json:\"location,omitempty\"`",991],["// variable array. The location of the uniform variable to be modified is",1010],["// specified by location, which should be a value returned by GetUniformLocation.",1010],["location = \"West US\"",1988],["Bucket *string `location:\"uri\" locationName:\"Bucket\" type:\"string\" required:\"true\"`",2494],["//       \"location\": \"path\",",89797]],"useCount":268021},{"word":"locationName","context":[["Message *string `locationName:\"message\" type:\"string\"`",731],["MaxResults *int64 `locationName:\"maxResults\" type:\"integer\"`",795],["RestApiId *string `location:\"uri\" locationName:\"restapi_id\" type:\"string\" required:\"true\"`",864],["DryRun *bool `locationName:\"dryRun\" type:\"boolean\"`",7393],["NextToken *string `locationName:\"nextToken\" type:\"string\"`",3069],["Name *string `locationName:\"name\" type:\"string\"`",943],["Tags []*Tag `locationName:\"tagSet\" locationNameList:\"item\" type:\"list\"`",1029],["Bucket *string `location:\"uri\" locationName:\"Bucket\" type:\"string\" required:\"true\"`",2494],["Description *string `locationName:\"description\" type:\"string\"`",1836],["Filters []*Filter `locationName:\"Filter\" locationNameList:\"Filter\" type:\"list\"`",1627]],"useCount":164476},{"word":"lock","context":[["c.lock.Lock()",1769],["lock.Lock()",2206],["defer lock.Unlock()",1786],["lock(&sched.lock)",1739],["lock(&sched.lock)",1739],["defer c.lock.Unlock()",1495],["f.lock.Lock()",1411],["unlock(&sched.lock)",2138],["defer f.lock.Unlock()",1297],["s.lock.Lock()",1326]],"useCount":112658},{"word":"log","context":[["log \"github.com/Sirupsen/logrus\"",9798],["if log.V(1) {",3151],["log.Print(err)",4156],["log.Fatalln(err)",5860],["log.WithFields(log.Fields{",6101],["log.WithFields(log.Fields{",6101],["log.Error(err)",6582],["\"log\"",99392],["log.Fatal(err)",57914],["log.Println(err)",16778]],"useCount":641106},{"word":"logger","context":[["logger.Error(err)",1728],["package logger",1197],["logger: logger,",587],["logger,",1027],["boshlog \"github.com/cloudfoundry/bosh-utils/logger\"",1012],["logger: logger,",587],["logger *log.Logger",906],["logger.Fatal(err)",816],["\"github.com/ethereum/go-ethereum/logger/glog\"",719],["\"github.com/ethereum/go-ethereum/logger\"",661]],"useCount":114387},{"word":"logrus","context":[["\"github.com/Sirupsen/logrus\"",11173],["log \"github.com/Sirupsen/logrus\"",9798],["log.WithFields(logrus.Fields{",2648],["logrus.Error(err)",2461],["logrus.Fatal(err)",1484],["logrus.WithFields(logrus.Fields{",1059],["logrus.WithFields(logrus.Fields{",1059],["logrus.Warn(err)",584],["logrus.SetLevel(logrus.DebugLevel)",472],["logrus.SetLevel(logrus.DebugLevel)",472]],"useCount":82070},{"word":"m","context":[["Module: m,",8893],["if m.XXX_unrecognized != nil {",14168],["return m",11878],["n += len(m.XXX_unrecognized)",8149],["if m == nil {",5993],["i += copy(data[i:], m.XXX_unrecognized)",5543],["n, err := m.MarshalTo(data)",28284],["size := m.Size()",29946],["return m, nil",7260],["if m != nil {",68407]],"useCount":2029865},{"word":"machine","context":[["{Tag: \"machine-42\"},",531],["\"github.com/docker/machine/libmachine/drivers\"",671],["NodeName: \"machine\",",706],["\"github.com/docker/machine/libmachine/log\"",1040],["machine, err := s.State.AddMachine(\"quantal\", state.JobHostUnits)",1731],["Spec:       api.PodSpec{NodeName: \"machine\"},",643],["// kubelet's host machine and then exposed to the pod.",3083],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",626],["// Cinder represents a cinder volume attached and mounted on kubelets host machine",696]],"useCount":136207},{"word":"main","context":[["main()",540],["out: `package main",797],["package main",180297],["func main() {",104447],["func main(){",1280],["t.Errorf(\"main name not set\")",856],["void main() {",397],["t.Errorf(\"main name not set from env\")",526],["zone_id = \"${aws_route53_zone.main.zone_id}\"",528],["in: `package main",754]],"useCount":347676},{"word":"make","context":[["b := make([]byte, 0, l)",5156],["b := make([]byte, 0, 32)",11443],["reqHeaders := make(http.Header)",11911],["data = make([]byte, size)",28307],["done := make(chan struct{})",4483],["p.p = make(map[string]interface{})",32934],["params := make(url.Values)",36391],["params_:       make(map[string][]string),",3788],["datas := make([][]byte, 10000)",3386],["done := make(chan bool)",3313]],"useCount":958932},{"word":"manager","context":[["package manager",637],["manager.dsStore.Add(ds)",729],["manager.syncReplicationController(getKey(controllerSpec, t))",762],["manager, podControl := newTestController()",825],["manager.podControl = &fakePodControl",1891],["manager.podStoreSynced = alwaysReady",2332],["manager.syncReplicationController(getKey(rc, t))",624],["manager, fakeDocker := newTestDockerManager()",617],["manager: manager,",611],["manager: manager,",611]],"useCount":76167},{"word":"map","context":[["map[string]string{",9298],["Schema: map[string]*schema.Schema{",7236],["queryParameters := map[string]interface{}{",6913],["Annotations: map[string]string{",9476],["Providers: map[string]ResourceProviderFactory{",9575],["Labels: map[string]string{",9863],["map[string]interface{}{",10488],["Properties: map[string]spec.Schema{",20467],["p.p = make(map[string]interface{})",32934],["googleapi.Expand(req.URL, map[string]string{",44831]],"useCount":1256207},{"word":"master","context":[["\"k8s.io/kubernetes/pkg/master/ports\"",864],["m = master.New(&master.Config{",446],["Tags:    []string{\"master\"},",681],["\"k8s.io/kubernetes/pkg/master\"",620],["// Set up a master",466],["// If present, specifies the ID of the AWS Key Management Service (KMS) master",360],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/master\"",372],["var m *master.Master",841],["package master",851],["m = master.New(&master.Config{",446]],"useCount":81660},{"word":"match","context":[["// Selector is a label query over pods that should match the Replicas count.",655],["for _, match := range matches {",702],["if match == nil {",750],["return match",763],["if !match {",1456],["if match {",1322],["match = true",1122],["t.Fatalf(\"the value %s in get result does not match the value %s in request\",",1107],["return nil, 0, fmt.Errorf(\"No match found for %s: %+v\", id, l)",1097],["return nil, l.Count, fmt.Errorf(\"No match found for %s: %+v\", id, l)",777]],"useCount":180469},{"word":"matches","context":[["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// If no matches, search all projects",443],["// generation matches the given value.",445],["// the object's current metageneration matches the given value.",534],["if len(matches) != 2 {",552],["return matches",701],["for _, match := range matches {",702],["if len(matches) == 0 {",777],["if matches == nil {",785],["// fail if the object's ETag matches the given value. This is useful for",12114]],"useCount":77313},{"word":"math","context":[["n := math.Abs(num)",1596],["import math \"math\"",6654],["import math \"math\"",6654],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["import \"math\"",1607],["var _ = math.Inf",6777],["\"math\"",28544],["package math",871],["\"math/big\"",9041],["\"math/rand\"",26174]],"useCount":150256},{"word":"math_rand","context":[["r := math_rand.New(math_rand.NewSource(pseudo))",360],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(616))",9510],["popr := math_rand.New(math_rand.NewSource(616))",9510],["r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",454],["r := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",454],["r := math_rand.New(math_rand.NewSource(pseudo))",360]],"useCount":83360},{"word":"max","context":[["//     \"max-results\": {",838],["max := 0",453],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["c.opt_[\"max-results\"] = maxResults",493],["if v, ok := c.opt_[\"max-results\"]; ok {",493],["params.Set(\"max-results\", fmt.Sprintf(\"%v\", v))",493],["for i := 0; i < max; i++ {",538],["// MaxResults sets the optional parameter \"max-results\": The maximum",774],["return max",979]],"useCount":86761},{"word":"maxResults","context":[["//     \"maxResults\": {",9760],["c.urlParams_.Set(\"maxResults\", fmt.Sprint(maxResults))",2908],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723],["c.urlParams_.Set(\"maxResults\", fmt.Sprint(maxResults))",2908],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["if v, ok := c.opt_[\"maxResults\"]; ok {",6054],["c.opt_[\"maxResults\"] = maxResults",6054],["c.opt_[\"maxResults\"] = maxResults",6054],["params.Set(\"maxResults\", fmt.Sprintf(\"%v\", v))",6054]],"useCount":68367},{"word":"maximum","context":[["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["//       \"maximum\": \"500\",",1945],["// number of items to include in a single response page. The maximum",655],["// TODO: decide on maximum length.",704],["// MaxResults sets the optional parameter \"max-results\": The maximum",774],["// Use this only when paginating results to indicate the maximum number of items",746],["// Constraints: Minimum 20, maximum 100.",694],["// The maximum number of records to include in the response. If more records",1022],["//       \"maximum\": \"100\",",1063],["//       \"maximum\": \"10000\",",1391]],"useCount":62408},{"word":"md","context":[["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",815],["// More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",821],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707]],"useCount":66830},{"word":"means","context":[["// The default is \"\" which means to use the node's default medium.",609],["// NodePending means the node has been created/added by the system, but not configured.",681],["// NodeRunning means the node has been configured and has Kubernetes components running.",678],["// PodReady means the pod is able to service requests and should be added to the",635],["// If 'warn' has a value it means the job is running longer than the configured",1437],["// NamespaceActive means the namespace is available for use in the system",608],["// PodPending means the pod has been accepted by the system, but one or more of the containers",588],["// A compilation error at this line likely means your copy of the",1437],["// NodeTerminated means the node has been removed from the cluster.",681],["// NamespaceTerminating means the namespace is undergoing graceful termination",608]],"useCount":63044},{"word":"memory","context":[["package memory",362],["// Watcher of out of memory events.",293],["if memory != \"\" {",282],["Memory                int               `json:\"memory,omitempty\"`",279],["// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",264],["// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",264],["res[api.ResourceMemory] = resource.MustParse(memory)",409],["// APIVersion and Kind must remain blank in memory.",480],["StorageMediumMemory  StorageMedium = \"Memory\" // use memory (tmpfs)",499],["ResourceMemory ResourceName = \"memory\"",667]],"useCount":76695},{"word":"message","context":[["message string",1441],["Message string `json:\"message,omitempty\"`",4362],["Message string `json:\"message\"`",2062],["\"message\": {",997],["Message: message,",913],["// message.",886],["fakeRT := &FakeRoundTripper{message: \"\", status: http.StatusOK}",775],["return message",757],["Message *string `locationName:\"message\" type:\"string\"`",731],["var message string",699]],"useCount":228258},{"word":"meta","context":[["config := meta.(*Config)",2395],["return &meta.VersionInterfaces{",799],["cs := meta.(*cloudstack.CloudStackClient)",768],["package meta",728],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api/meta\"",687],["conn := meta.(*AWSClient).ec2conn",1686],["Meta: meta,",1000],["\"k8s.io/kubernetes/pkg/api/meta\"",3470],["conn := meta.(*AWSClient).rdsconn",475],["metav1 \"k8s.io/kubernetes/pkg/apis/meta/v1\"",580]],"useCount":111013},{"word":"metadata","context":[["Location:    metadata.PayloadParam,",7028],["// Standard object's metadata.",5514],["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["\"metadata\": {",10319],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",5189],["ObjectMeta `json:\"metadata,omitempty\"`",4422],["case \"metadata\":",3932],["r.EncodeString(codecSelferC_UTF81234, string(\"metadata\"))",3900],["// Standard list metadata.",3777],["&metadata.ActionParam{",10900]],"useCount":233247},{"word":"method","context":[["// method.",1077],["// The provided context supersedes any context provided to the Context method.",2234],["// Context sets the context to be used in this call's Do method. Any",22537],["// Creating a request object using this method should be used when you want to inject",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["switch method {",962],["// Context sets the context to be used in this call's Do method.",4699],["// language to use for strings returned by this method.",890],["//       \"description\": \"The preferred language to use for strings returned by this method.\",",890]],"useCount":319850},{"word":"methods","context":[["return methods",438],["// of strings by giving the slice the methods of Value; in particular, Set would",299],["// with awserr.Error's Code and Message methods to get detailed information about",7881],["// Those methods can be generated by using hack/update-generated-swagger-docs.sh",276],["// Service Type string describes ingress methods for a service",482],["// methods.",431],["// It is the caller's responsibility to not call other Write methods concurrently.",416],["// implementation. This makes faking out just the methods you want to test easier.",406],["for _, m := range methods {",461],["// methods. Any pending HTTP request will be aborted if the provided",466]],"useCount":61683},{"word":"min","context":[["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["Key *string `location:\"uri\" locationName:\"Key\" min:\"1\" type:\"string\" required:\"true\"`",426],["NextToken *string `min:\"1\" type:\"string\"`",774],["MaxItems *int64 `min:\"1\" type:\"integer\"`",556],["return min",670],["UserName *string `min:\"1\" type:\"string\" required:\"true\"`",683],["func min(a, b int) int {",708],["Limit *int64 `min:\"1\" type:\"integer\"`",478],["Marker *string `min:\"1\" type:\"string\"`",1304]],"useCount":74671},{"word":"missing","context":[["} // ERROR \"missing return\"",892],["return fmt.Errorf(\"missing required flag %q\", \"--\"+k)",644],["t.Errorf(\"%s: missing prefix for: %v\", k, errs[i])",599],["return utils.NewErrMandatoryIeMissing(missing...)",487],["\"missing-namespace\": {",483],["//   \"kind\" string - the kind attribute of the missing resource",429],["//   \"id\"   string - the identifier of the missing resource",429],["return fmt.Errorf(\"missing required fields: %v\", invalid)",386],["// missing service env var and exit and be restarted; or (3) use DNS instead of env vars",306],["t.Fatalf(\"missing handle\")",305]],"useCount":62870},{"word":"mode","context":[["x.mode = value",1413],["// can be mounted in read/write mode to many hosts",596],["return fi.mode",637],["mode: 0,",658],["t.Skip(\"skipping test in short mode.\")",1093],["switch mode {",1188],["mode: 0101,",633],["if x.mode == invalid {",1269],["// -*- Mode: Go; indent-tabs-mode: t -*-",1376],["x.mode = invalid",1526]],"useCount":144923},{"word":"model","context":[["var user *model.User",679],["team = Client.Must(Client.CreateTeam(team)).Data.(*model.Team)",797],["\"github.com/prometheus/common/model\"",998],["\"github.com/mattermost/platform/model\"",1071],["package model",3705],["props := model.MapFromJson(r.Body)",642],["user = result.Data.(*model.User)",577],["Metric: model.Metric{",535],["&model.Sample{",523],["user = Client.Must(Client.CreateUser(user, \"\")).Data.(*model.User)",525]],"useCount":114135},{"word":"models","context":[["if models.IsErrUserNotExist(err) {",550],["models.Tags{",573],["\"github.com/gogits/gogs/models\"",784],["models.Fields{",1092],["\"github.com/cloudfoundry/cli/cf/models\"",2208],["\"github.com/influxdata/influxdb/models\"",509],["\"koding/remoteapi/models\"",518],["Payload *models.Error",534],["o.Payload = new(models.Error)",534],["package models",7289]],"useCount":83439},{"word":"more","context":[["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["// nil if no more results exist.",683],["// DNS_SUBDOMAIN:  This is a string, no more than 253 characters long, that conforms",722],["// A flag that indicates whether there are more items to return. If your results",724],["// DNS_LABEL:  This is a string, no more than 63 characters long, that conforms",726],["//     or more simply:",726],["For more about specifying packages, see 'go help packages'.",1006],["// The maximum number of records to include in the response. If more records",1022],["// One or more filters.",1887],["// for more information.",56535]],"useCount":245035},{"word":"mount","context":[["\"k8s.io/kubernetes/pkg/util/mount\"",1899],["// Filesystem type of the volume that you want to mount.",720],["mounter mount.Interface",721],["// NFS represents an NFS mount on the host that shares a pod's lifetime",817],["\"github.com/docker/docker/pkg/mount\"",854],["// If omitted, kubelet will attempt to mount the device name.",897],["// Optional: Partition on the disk to mount.",903],["// Filesystem type to mount.",1234],["// Required: Filesystem type to mount.",1487],["// Source represents the location and type of a volume to mount.",722]],"useCount":74896},{"word":"msg","context":[["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["n, err := msg.MarshalTo(data[i:])",7225],["if err := github_com_gogo_protobuf_proto.Unmarshal(data, msg); err != nil {",7079],["if err := github_com_gogo_protobuf_proto.UnmarshalText(data, msg); err != nil {",4860],["t.Fatalf(\"%#v !VerboseProto %#v, since %v\", msg, p, err)",4373],["i = encodeVarintGenerated(data, i, uint64(msg.Size()))",4070],["t.Fatalf(\"%#v !Proto %#v\", msg, p)",3759],["if !p.Equal(msg) {",19058],["if err := p.VerboseEqual(msg); err != nil {",19838],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971]],"useCount":381608},{"word":"msglen","context":[["msglen := len(b)",30],["if msglen > 4 {",30],["ml := this.msglen()",45],["if msglen < 4 {",30],["hl := this.header.msglen()",21],["postIndex := index + msglen",1752],["if msglen < 0 {",40057],["postIndex := iNdEx + msglen",41105],["msglen |= (int(b) & 0x7F) << shift",42857],["var msglen int",42860]],"useCount":169017},{"word":"mu","context":[["r.mu.Lock()",3787],["s.mu.Lock()",10333],["s.mu.Unlock()",5960],["defer s.mu.Unlock()",5737],["c.mu.Lock()",5243],["mu.Lock()",3715],["p.mu.Lock()",2988],["s.mu.RLock()",2368],["c.mu.Unlock()",2946],["defer c.mu.Unlock()",2974]],"useCount":199785},{"word":"must","context":[["//     * Redistributions in binary form must reproduce the above",1736],["//   First character must be a letter",600],["// have a 2xx status code. Callers must close the Response.Body as usual.",619],["// the Data field must be less than MaxSecretSize bytes.",626],["// NodeSelector is a selector which must be true for the pod to fit on a node",627],["// must be linked to the specified YouTube content owner.",717],["c.Fatal(\"Error must not be nil\")",821],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["*     * Redistributions in binary form must reproduce the above",979],["* viewing this code must follow the course rules and report any viewing",916]],"useCount":302142},{"word":"mux","context":[["r := mux.NewRouter()",1821],["mux := http.NewServeMux()",4230],["\"github.com/gorilla/mux\"",6868],["mux := NewServeMux()",680],["vars := mux.Vars(req)",888],["vars := mux.Vars(r)",3948],["name := mux.Vars(r)[\"name\"]",900],["router := mux.NewRouter()",1020],["params := mux.Vars(r)",1140],["id := mux.Vars(r)[\"id\"]",1174]],"useCount":73287},{"word":"n","context":[["return n, err",7657],["n += 1 + l + sovGenerated(uint64(l))",30501],["return data[:n], nil",28298],["n, err := m.MarshalTo(data)",28284],["n++",13941],["for i := 0; i < n; i++ {",13560],["n += len(m.XXX_unrecognized)",8149],["i += n",7936],["return n",56325],["if n == 0 {",7765]],"useCount":2184107},{"word":"name","context":[["if name == \"\" {",7073],["defer deleteImages(name)",6288],["name string",10341],["for _, name := range names {",4430],["return name",4915],["Name string `json:\"name\"`",6733],["if _, err := buildImageFromContext(name, ctx, true); err != nil {",5159],["Name: name,",5258],["Name string `json:\"name,omitempty\"`",13075],["_, err := buildImage(name,",5926]],"useCount":1954965},{"word":"names","context":[["var names []string",1906],["// ForceSendFields is a list of field names (e.g. \"Items\") to",1610],["sort.Strings(names)",2073],["\"gopkg.in/juju/names.v2\"",2156],["names = append(names, name)",2304],["names = append(names, name)",2304],["return names",2333],["// for names of contributors.",4750],["for _, name := range names {",4430],["\"github.com/juju/names\"",4338]],"useCount":203986},{"word":"namespace","context":[["namespace: \"\",",695],["ns:     namespace,",793],["nsFlag := fmt.Sprintf(\"--namespace=%v\", ns)",1405],["namespace string",1967],["if _, err := fmt.Fprintf(w, \"%s\\t\", namespace); err != nil {",2228],["nsFlag = fmt.Sprintf(\"--namespace=%v\", ns)",743],["Namespace string `json:\"namespace,omitempty\"`",770],["// Limit that applies to all pods in a namespace",648],["ObjectMeta: api.ObjectMeta{Name: \"mysvc\", Namespace: \"namespace\"},",2388],["Namespace: namespace,",2981]],"useCount":246154},{"word":"need","context":[["// FIXME: Will likely need to be reworked (has pointer parameter).",616],["// If we have a async client, we need to wait for the async result",2363],["// request. Bucket owners need not specify this parameter in their requests.",788],["// a shell, you need to explicitly call out to that shell.",720],["err := fmt.Errorf(\"codecgen version mismatch: current: %v, need %v. Re-generate file: %v\",",664],["// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not",586],["// to see the host machine. Most containers will NOT need this.",321],["//       need to use such a function and can instead",286],["// of such pods should not be changed, and there is no need to sync them.",278],["// TODO(adonovan): we'll need to implement this",287]],"useCount":105724},{"word":"net","context":[["context \"golang.org/x/net/context\"",2798],["Domain:    \"cloudfront.net\",",25375],["gc \"launchpad.net/gocheck\"",3387],["package net",2778],["\"net\",",2754],["\"net/http/httptest\"",17396],["\"golang.org/x/net/context\"",29586],["\"net/url\"",51644],["\"net\"",62686],["\"net/http\"",139133]],"useCount":621234},{"word":"network","context":[["\"github.com/juju/juju/network\"",3168],["Type:  network.IPv4Address,",424],["switch network {",439],["// Protocol defines network protocols supported for things like conatiner ports.",508],["// The ID of the network interface.",649],["\"github.com/docker/docker/daemon/network\"",560],["networkPlugin network.NetworkPlugin",608],["\"k8s.io/kubernetes/pkg/kubelet/network\"",1315],["package network",1325],["dockerCmd(c, \"network\", \"create\", \"-d\", \"bridge\", \"testnetwork1\")",609]],"useCount":209256},{"word":"new","context":[["Namespace: \"new\",",4835],["*out = new(bool)",1581],["m := new(dns.Msg)",1757],["dst := new(string)",1779],["ui := new(cli.MockUi)",1997],["*out = new(int64)",2239],["// newClient creates, initializes and returns a new service client instance.",2270],["b := new(bytes.Buffer)",2946],["newVal := new(resource.Quantity)",3973],["buf := new(bytes.Buffer)",10550]],"useCount":604902},{"word":"newRequest","context":[["req = c.newRequest(op, input, output)",46423],["request:     newRequest(\"GET\", \"http://localhost/111/222/333\"),",633],["request:     newRequest(\"GET\", \"http://aaa.bbb.ccc/111/222/333\"),",582],["request:     newRequest(\"GET\", \"http://aaa.222.ccc/111/222/333\"),",505],["request:     newRequest(\"GET\", \"http://localhost/111/aaa/333\"),",332],["request:     newRequest(\"GET\", \"http://localhost\"),",256],["request:     newRequest(\"GET\", \"http://localhost?foo=bar&baz=ding\"),",198],["request:     newRequest(\"GET\", \"http://localhost/1/2/3\"),",180],["request:        newRequest(\"GET\", \"http://localhost/111\"),",166],["request:        newRequest(\"GET\", \"http://localhost/111/\"),",166]],"useCount":66003},{"word":"newVal","context":[["if err := s.Convert(&val, &newVal, 0); err != nil {",3612],["newVal := resource.Quantity{}",3884],["newVal := new(resource.Quantity)",3973],["if newVal, err := c.DeepCopy(in.TypeMeta); err != nil {",6751],["out.ListMeta = newVal.(unversioned.ListMeta)",1085],["if newVal, err := c.DeepCopy(in.ObjectMeta); err != nil {",3124],["out.TypeMeta = newVal.(unversioned.TypeMeta)",2894],["if newVal, err := c.DeepCopy(in.ListMeta); err != nil {",2640],["if err := deepCopy_resource_Quantity(val, newVal, c); err != nil {",2631],["if newVal, err := c.DeepCopy(val); err != nil {",1211]],"useCount":67872},{"word":"next","context":[["next.ServeHTTP(w, r)",869],["ch = s.next()",912],["p.next()",9149],["c = l.next()",3529],["iNdEx = start + next",2193],["// retrieve the next page of results, set the next request's \"pageToken\"",693],["// token, used to page through large result sets. To get the next page",793],["// values assigned to them by a call to Uniform* until the next successful",1594],["s.next()",1525],["l.next()",1159]],"useCount":175017},{"word":"nil","context":[["return nil",1271420],["if this == nil {",80648],["if err := googleapi.CheckResponse(res); err != nil {",58830],["if err == nil {",169101],["return nil, err",870029],["return nil, nil",54935],["var body io.Reader = nil",58552],["if err != nil {",3731570],["if m != nil {",68407],["return ret, nil",59215]],"useCount":13254150},{"word":"no","context":[["// no documentation yet",2477],["no := b.Succs[1]",1954],["<no state>",1925],["_ = no",1642],["// If this value is in the future, no logs will be returned.",842],["// no-op",815],["// +build integration,!no-etcd",802],["// DNS_LABEL:  This is a string, no more than 63 characters long, that conforms",726],["// DNS_SUBDOMAIN:  This is a string, no more than 253 characters long, that conforms",722],["// with no spaces. You can also include any of the following characters: =,.@-",691]],"useCount":369043},{"word":"noMethod","context":[["type noMethod Account",124],["type noMethod OperationWarnings",111],["type noMethod OperationWarningsData",111],["type noMethod Report",113],["type noMethod Channel",124],["type noMethod User",129],["type noMethod OperationError",138],["type noMethod Status",164],["type noMethod Operation",264],["raw := noMethod(*s)",39504]],"useCount":66066},{"word":"node","context":[["for _, node := range nodes.Items {",1668],["for _, node := range nodeList.Items {",879],["// scheduling time, the pod will not be scheduled onto the node.",1026],["[]*node{",1134],["package node",1138],["type node struct {",1208],["return node, nil",1424],["return node",1953],["if node == nil {",3942],["for _, node := range nodes {",2778]],"useCount":495991},{"word":"nodes","context":[["t.Fatalf(\"bad: %v\", nodes)",618],["return nodes",1288],["for _, n := range nodes {",1029],["// When there are multiple elements, the lists of nodes corresponding to each",592],["for _, node := range nodes.Items {",1668],["for _, node := range nodes {",2778],["Resource(\"nodes\").",840],["return nodes, nil",731],["nodes = append(nodes, node)",557],["for i := range nodes.Items {",641]],"useCount":134220},{"word":"non","context":[["// A non-service error occurred.",1771],["// A non-nil error returned from f will halt the iteration.",2234],["// null. It is an error if a field in this list has a non-empty value.",4930],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// non-2xx status code is an error. Response headers are in either",5221],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["t.Errorf(\"unexpected non-error\")",1580],["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713]],"useCount":297744},{"word":"not","context":[["// Reference imports to suppress errors if they are not otherwise used.",8089],["// Returns whether the assertion was successful (true) or not (false).",2688],["// string assigned to a user, but should not exceed 40 characters.",2611],["// It is not safe to mutate any of the client's properties though.",2270],["return nil, fmt.Errorf(\"Asset %s not found\", name)",2113],["panic(\"not reached\")",1841],["panic(\"not implemented\")",1534],["* !!! Please do not edit this file !!!",1486],["// It returns an error if the asset could not be found or",1384],["// could not be loaded.",1384]],"useCount":1089313},{"word":"now","context":[["now := unversioned.Now()",1409],["now := time.Now()",10458],["//    if err == nil { // resp is now filled",13378],["now := time.Now().UTC()",1070],["// This is optional for now. If not specified, the Volume is implied to be an EmptyDir.",544],["readyTransitionTimestamp: nc.now(),",540],["now := time.Now().Unix()",740],["Since:   &now,",886],["now := now()",1025],["now := now()",1025]],"useCount":133671},{"word":"ns","context":[["Namespace: \"ns\",",5327],["Namespace(c.ns).",6159],["var ns string",941],["ns := []int{40, 41, 42, 43, 44, 45, 46}",1195],["deployment, err := c.Extensions().Deployments(ns).Get(deploymentName)",1249],["nsFlag := fmt.Sprintf(\"--namespace=%v\", ns)",1405],["ns := f.Namespace.Name",1774],["Namespace: ns,",1900],["for _, n := range ns {",2088],["ns := api.NamespaceDefault",2411]],"useCount":182234},{"word":"num","context":[["if num < 0 {",6279],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["num      float64",4303],["// \tnum:      -0,",4284],["// \tnum:      -221123456.5643,",4284],["// \tnum:      1123456.5643,",4284],["// \tnum:      221123456.5643,",2142],["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431],["// \tnum:      1.23,",1428],["n := math.Abs(num)",1596]],"useCount":102076},{"word":"number","context":[["// ReplicationControllers, number",650],["// Services, number",650],["// ResourceQuotas, number",650],["// Pods, number",650],["// Replicas is the number of desired replicas.",753],["// The maximum number of records to include in the response. If more records",1022],["//       \"description\": \"Maximum number of results to return.\",",1038],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// number of items to include in a single response page. The maximum",655],["// Use this only when paginating results to indicate the maximum number of items",746]],"useCount":263815},{"word":"o","context":[["if err := result.readResponse(response, consumer, o.formats); err != nil {",1602],["o := old()",904],["o := orm.NewOrm()",2603],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["o.Expect(err).NotTo(o.HaveOccurred())",4573],["if o == nil {",1587],["if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {",1066],["o.buf = append(o.buf, p.tagcode...)",963],["o.buf = append(o.buf, p.tagcode...)",963],["return o",6853]],"useCount":268192},{"word":"obj","context":[["if obj == nil {",9077],["if obj != nil {",1259],["p.From.Type = obj.TYPE_MEM",1433],["p.From.Type = obj.TYPE_REG",1543],["return obj",1615],["\"cmd/internal/obj\"",2098],["p = obj.Appendp(ctxt, p)",2173],["obj, err := c.Fake.",4451],["p.To.Type = obj.TYPE_REG",2458],["return obj, nil",2397]],"useCount":397514},{"word":"object","context":[["// access properties on the request object before or after sending the request. If",13378],["// Standard object's metadata.",5514],["// All active uniform variables defined in a program object are initialized",1594],["// to 0 when the program object is linked successfully. They retain the",1594],["// fail if the object's ETag matches the given value. This is useful for",12114],["// getting updates only after the object has changed since the last",12114],["// link operation occurs on the program object, when they are once again",1594],["Type:        []string{\"object\"},",1861],["// Creating a request object using this method should be used when you want to inject",13378],["// Note: You must call the \"Send\" method on the returned request object in order",13378]],"useCount":363805},{"word":"objects","context":[["// Not all objects are required to be scoped to a namespace - the value of this field for",607],["// objects.",683],["// ServiceAccountList is a list of ServiceAccount objects",514],["// the 'Name' field in EndpointPort objects.",526],["// ObjectMeta is metadata that all persisted resources must have, which includes all objects",599],["// those objects will be empty.",607],["for _, obj := range objects {",725],["// SchemeGroupVersion is group version used to register these objects",770],["// Documentation on downloading objects from requester pays buckets can be found",788],["// DeleteCollection deletes a collection of objects.",966]],"useCount":96216},{"word":"of","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["// Prefix indicates this name will be used as part of generation, in which case",2533],["// Kind: Uniquely identifies the type of this resource. Value is always",2738],["//       \"description\": \"Name of the project scoping this request.\",",3018],["// error from Do is the result of In-None-Match.",12114],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["// for names of contributors.",4750],["// Use of this source code is governed by an ISC",4711],["// This Source Code Form is subject to the terms of the Mozilla Public",3950],["// This file is part of the go-ethereum library.",3823]],"useCount":2708334},{"word":"off","context":[["off := 0",534],["return off, nil",486],["v.AuxInt = off",587],["if off == len(msg) {",612],["d.off--",685],["off := v.AuxInt",726],["return rr, off, nil",782],["off++",911],["return rr, off, err",1278],["return off, err",1420]],"useCount":85519},{"word":"offset","context":[["data[offset+4] = uint8(v >> 32)",2147],["data[offset] = uint8(v&0x7f | 0x80)",2150],["data[offset+1] = uint8(v >> 8)",4294],["return offset + 4",2333],["return offset + 8",2334],["return offset + 1",2355],["offset++",3625],["data[offset+2] = uint8(v >> 16)",4294],["data[offset+3] = uint8(v >> 24)",4294],["data[offset] = uint8(v)",6444]],"useCount":171626},{"word":"ok","context":[["var ok bool",10867],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["if awsErr, ok := err.(awserr.Error); ok {",14078],["if awsErr, ok := err.(awserr.Error); ok {",14078],["return ok",9194],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["if ok {",61493],["if !ok {",225887]],"useCount":1262192},{"word":"old","context":[["old: api.ReplicationController{",1304],["//     !old && new  = use new",466],["//     !old && !new = use new",466],["oldPod := old.(*api.Pod)",488],["successCase.old.ObjectMeta.ResourceVersion = \"1\"",499],["old: extensions.DaemonSet{",543],["UpdateFunc: func(old, cur interface{}) {",728],["n := len(old)",787],["//     old && !new  = use old",466],["o := old()",904]],"useCount":79548},{"word":"omitempty","context":[["Description string `json:\"description,omitempty\"`",5884],["Etag string `json:\"etag,omitempty\"`",6589],["SelfLink string `json:\"selfLink,omitempty\"`",6642],["Type string `json:\"type,omitempty\"`",7033],["NextPageToken string `json:\"nextPageToken,omitempty\"`",9271],["Id string `json:\"id,omitempty\"`",11055],["Name string `json:\"name,omitempty\"`",13075],["Kind string `json:\"kind,omitempty\"`",30419],["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["ObjectMeta `json:\"metadata,omitempty\"`",4422]],"useCount":969608},{"word":"on","context":[["// link operation occurs on the program object, when they are once again",1594],["// Not applicable on Windows as uses Unix specific functionality",2299],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// access properties on the request object before or after sending the request. If",13378],["// on behalf of the content owner specified in the parameter value. This",847],["// NFS represents an NFS mount on the host that shares a pod's lifetime",817],["// Optional: Partition on the disk to mount.",903],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["c.Fatalf(\"Missing expected output on trusted push:\\n%s\", out)",817],["t.Skipf(\"not supported on %s\", runtime.GOOS)",795]],"useCount":632296},{"word":"one","context":[["// If none of the following policies is specified, the default one",748],["// Exactly one of *Empty or error will be non-nil. Any non-2xx status",775],["// element of a different type than the one provided in the request, the value",606],["// if one of the deep copy functions is malformed, detect it immediately.",847],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// If one of the conversion functions is malformed, detect it immediately.",1915],["// This action is throttled at one request per second.",623],["// If none of them is specified, the default one is ContainerStateWaiting.",709],["// One and only one of the following should be specified.",718],["// AttributeValueList can contain only one AttributeValue element of type String,",723]],"useCount":299948},{"word":"only","context":[["// Read-only.",2967],["// only).",1872],["//     \"https://www.googleapis.com/auth/cloud-platform.read-only\",",1870],["// getting updates only after the object has changed since the last",12114],["// SelfLink: Server defined URL for this resource (output only).",740],["// AttributeValueList can contain only one AttributeValue element of type String,",723],["// (regardless of what the tag's key is). If you want to list only resources",931],["// Use this only when paginating results to indicate the maximum number of items",746],["// (output only).",764],["//  Use a Resource element with the domain name to limit the action to only",846]],"useCount":323981},{"word":"op","context":[["return gce.waitForGlobalOp(op)",1201],["switch op {",3899],["return invOp2(x, y, op)",1370],["req := aws.NewRequest(c.Service, op, params, data)",1394],["\"github.com/op/go-logging\"",1467],["req := c.NewRequest(op, params, data)",2823],["op := &aws.Operation{",5650],["op := &request.Operation{",37657],["op := &service.Operation{",3192],["req = c.newRequest(op, input, output)",46423]],"useCount":221411},{"word":"openshift","context":[["configapi \"github.com/openshift/origin/pkg/cmd/server/api\"",860],["buildapi \"github.com/openshift/origin/pkg/build/api\"",1916],["imageapi \"github.com/openshift/origin/pkg/image/api\"",1852],["testutil \"github.com/openshift/origin/test/util\"",746],["deployapi \"github.com/openshift/origin/pkg/deploy/api\"",1759],["\"github.com/openshift/origin/pkg/client\"",1689],["authorizationapi \"github.com/openshift/origin/pkg/authorization/api\"",1608],["\"github.com/openshift/origin/pkg/cmd/util/clientcmd\"",1535],["cmdutil \"github.com/openshift/origin/pkg/cmd/util\"",976],["deployutil \"github.com/openshift/origin/pkg/deploy/util\"",765]],"useCount":65511},{"word":"operation","context":[["// Validate checks if the operation is valid.",627],["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// operation.",1845],["// link operation occurs on the program object, when they are once again",1594],["// Note: This operation can generate multiple requests to a service.",1419],["// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation",1344],["// \"ifMetagenerationMatch\": Makes the operation conditional on whether",669],["// buildURL builds the URL for the operation.",619],["// A human-readable description of the status of this operation.",609],["// concurrency, change detection, and the watch operation on a resource or set of resources.",594]],"useCount":174629},{"word":"opt","context":[["u, err := addOptions(u, opt)",631],["Header *ResponseHeader `protobuf:\"bytes,1,opt,name=header\" json:\"header,omitempty\"`",984],["for _, opt := range opts {",1120],["Name string `json:\"name\" protobuf:\"bytes,1,opt,name=name\"`",695],["ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",1678],["unversioned.ListMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",2125],["Name string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`",886],["ResponseHeader `protobuf:\"bytes,1,opt,name=header,embedded=header\" json:\"header\"`",855],["v1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",720],["ic.CreateIteratorFn = func(opt influxql.IteratorOptions) (influxql.Iterator, error) {",623]],"useCount":174661},{"word":"opt_","context":[["opt_      map[string]interface{}",5638],["opt_       map[string]interface{}",3590],["opt_    map[string]interface{}",4162],["opt_ map[string]interface{}",4280],["c.opt_[\"maxResults\"] = maxResults",6054],["if v, ok := c.opt_[\"maxResults\"]; ok {",6054],["c.opt_[\"pageToken\"] = pageToken",6090],["if v, ok := c.opt_[\"pageToken\"]; ok {",6090],["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281]],"useCount":216640},{"word":"optional","context":[["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["UserAgent string // optional additional User-Agent fragment",2098],["// Details (optional):",2007],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["// If additional configuration is needed for the client instance use the optional",2272],["// +optional",17804],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["// IfNoneMatch sets the optional parameter which makes the operation",12114]],"useCount":161695},{"word":"options","context":[["WatchFunc: func(options api.ListOptions) (watch.Interface, error) {",2695],["ListFunc: func(options api.ListOptions) (runtime.Object, error) {",2282],["if options.WithNamespace {",1854],["Body(options).",1823],["}, {Name: func(v string) *string { return &v }(\"options\"),",1414],["for _, option := range options {",1202],["options := api.ListOptions{LabelSelector: selector}",1136],["JsonName: func(v string) *string { return &v }(\"options\"),",1057],["options := api.ListOptions{LabelSelector: label}",1037],["if options == nil {",902]],"useCount":235461},{"word":"opts","context":[["for _, o := range opts {",698],["Watch(opts api.ListOptions) (watch.Interface, error)",805],["gensupport.SetOptions(c.urlParams_, opts...)",18124],["VersionedParams(&opts, api.ParameterCodec).",1587],["\"github.com/docker/docker/opts\"",1125],["for _, opt := range opts {",1120],["if opts != nil {",974],["if opts == nil {",905],["opts.Logger = newTestLogger(t)",816],["defer os.RemoveAll(opts.DataPath)",581]],"useCount":199109},{"word":"or","context":[["* Redistribution and use in source and binary forms, with or without",1643],["// *Operation.ServerResponse.Header or (if a response was returned at",1713],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// in the documentation and/or other materials provided with the",1838],["// One or more filters.",1887],["// Returns whether the assertion was successful (true) or not (false).",2688],["// Redistribution and use in source and binary forms, with or without",3435],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",4249],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// access properties on the request object before or after sending the request. If",13378]],"useCount":720990},{"word":"order","context":[["// major order. If transpose is true, each matrix is assumed to be supplied",426],["// in row major order.",427],["cleantemp(t, order)",415],["// after every chunk. It should be a low-latency function in order to",430],["t := marktemp(order)",471],["//     \"https://www.googleapis.com/auth/apps.order\"",472],["// It should be a low-latency function in order to not slow down the upload operation.",498],["// order.",538],["// created. It is not guaranteed to be set in happens-before order across separate operations.",601],["// Note: You must call the \"Send\" method on the returned request object in order",13378]],"useCount":113716},{"word":"org","context":[["\"google.golang.org/grpc/codes\"",1276],["\"labix.org/v2/mgo/bson\"",1263],["\"golang.org/x/crypto/ssh\"",1766],["\"golang.org/x/net/websocket\"",1824],["\"google.golang.org/api/googleapi\"",1948],["\"golang.org/x/oauth2\"",2278],["\"org\",",2892],["\"google.golang.org/grpc\"",3595],["\"golang.org/x/net/context\"",29586],["context \"golang.org/x/net/context\"",2798]],"useCount":239020},{"word":"origin","context":[["buildapi \"github.com/openshift/origin/pkg/build/api\"",1916],["imageapi \"github.com/openshift/origin/pkg/image/api\"",1852],["deployapi \"github.com/openshift/origin/pkg/deploy/api\"",1759],["\"github.com/openshift/origin/pkg/client\"",1689],["authorizationapi \"github.com/openshift/origin/pkg/authorization/api\"",1608],["\"github.com/openshift/origin/pkg/cmd/util/clientcmd\"",1535],["cmdutil \"github.com/openshift/origin/pkg/cmd/util\"",976],["configapi \"github.com/openshift/origin/pkg/cmd/server/api\"",860],["deployutil \"github.com/openshift/origin/pkg/deploy/util\"",765],["testutil \"github.com/openshift/origin/test/util\"",746]],"useCount":72425},{"word":"os","context":[["\"os/signal\"",7894],["os.Exit(2)",8069],["if os.IsNotExist(err) {",12528],["\"os/exec\"",30565],["os.Exit(1)",55587],["\"os\"",203697],["defer os.RemoveAll(dir)",6900],["cmd.Stderr = os.Stderr",4643],["fmt.Fprintln(os.Stderr, err)",4376],["os.Exit(0)",12708]],"useCount":911793},{"word":"other","context":[["//    and/or other materials provided with the distribution.",1096],["* in the documentation and/or other materials provided with the",987],["fsm.data = other",591],["other := fsm.data.Clone()",591],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["podNamespace := \"other\"",710],["other: a",781],["// in the documentation and/or other materials provided with the",1838],["// other function will result in a GL.INVALID_OPERATION error.",1168]],"useCount":143639},{"word":"out","context":[["return out, err",54533],["out.Items = nil",23672],["return out, nil",14819],["out.Name = in.Name",14366],["out.ReadOnly = in.ReadOnly",11655],["return out",11511],["if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {",9325],["out.Message = in.Message",7924],["if err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {",7776],["out.Path = in.Path",7500]],"useCount":2179666},{"word":"output","context":[["output, err := cmd.CombinedOutput()",1067],["c.Fatalf(\"expected output ok received %s\", actual)",1072],["return output, nil",1113],["// Id: Unique identifier for the resource; defined by the server (output",1255],["output: analysis.TokenStream{",1498],["output := String{}",1878],["output = out",2185],["return output",2252],["req = c.newRequest(op, input, output)",46423],["req.Data = output",54229]],"useCount":425359},{"word":"p","context":[["if err := p.VerboseEqual(msg); err != nil {",19838],["p.next()",9149],["return p",26609],["if p.p == nil {",31639],["if p.p == nil {",31639],["p.p = make(map[string]interface{})",32934],["p.p = make(map[string]interface{})",32934],["if !p.Equal(msg) {",19058],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541]],"useCount":2199089},{"word":"package","context":[["package api",10116],["package models",7289],["package server",6981],["package config",6876],["package util",5967],["package commands",5389],["package cmd",8750],["package iso20022",8801],["package client",9340],["package main",180297]],"useCount":1091310},{"word":"page","context":[["if v, found := p.p[\"page\"]; found {",1217],["// token, used to page through large result sets. To get the next page",793],["p.p[\"page\"] = v",1217],["return page.EachPage(func(p interface{}, lastPage bool) bool {",4968],["page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler(\"Paginator\"))",3037],["// token, used to page through large result sets. To get the next page",793],["// Pages invokes f for each page of results.",2234],["//            fmt.Println(page)",1419],["// calling the \"fn\" function with the response data for each page. To stop",1419],["u.Set(\"page\", vv)",1217]],"useCount":102658},{"word":"pageToken","context":[["params.Set(\"pageToken\", fmt.Sprintf(\"%v\", v))",6090],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["defer c.PageToken(c.urlParams_.Get(\"pageToken\")) // reset paging to original point",2234],["c.urlParams_.Set(\"pageToken\", pageToken)",3624],["c.urlParams_.Set(\"pageToken\", pageToken)",3624],["c.opt_[\"pageToken\"] = pageToken",6090],["c.opt_[\"pageToken\"] = pageToken",6090],["// PageToken sets the optional parameter \"pageToken\": The continuation",1281],["if v, ok := c.opt_[\"pageToken\"]; ok {",6090],["//     \"pageToken\": {",10506]],"useCount":73986},{"word":"panic","context":[["panic(\"fail\")",1625],["panic(\"not reached\")",1841],["panic(\"Not implemented\")",2092],["// shouldn't panic",2635],["panic(e)",2654],["panic(\"parameter v has incorrect length\")",3384],["panic(err.Error())",5050],["panic(\"unreachable\")",8865],["panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)",12071],["panic(err)",172161]],"useCount":370457},{"word":"parameter","context":[["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["// aws.Config parameter to add your extra config.",2272],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["panic(\"parameter v has incorrect length\")",3384],["return fmt.Errorf(\"Missing parameter\")",3920],["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078]],"useCount":222675},{"word":"parameters","context":[["// Add query string parameters",616],["// Required parameters:",552],["// parameters.",654],["\"parameters\": [",803],["Required parameters:",457],["autorest.WithJSON(parameters),",811],["//   \"parameters\": {",58504],["Optional parameters:",580],["// Set query parameters.",590],["// Optional parameters:",591]],"useCount":124047},{"word":"params","context":[["params := make(url.Values)",36391],["params.Set(\"pageToken\", fmt.Sprintf(\"%v\", v))",6090],["params.Set(\"alt\", alt)",10492],["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["params.Set(\"maxResults\", fmt.Sprintf(\"%v\", v))",6054],["\"github.com/juju/juju/apiserver/params\"",4974],["// as then you are sure you have configured all required params",4924],["params.Set(\"alt\", \"json\")",25051],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["urls += \"?\" + params.Encode()",35563]],"useCount":553350},{"word":"parent","context":[["c.Fatalf(\"unexpected failure when running container with --cgroup-parent option - %s\\n%v\", string(out), err)",442],["if r.parent != nil {",389],["if parent != nil {",457],["if parent == nil {",963],["if parent != \"\" {",297],["if parent == \"\" {",358],["return parent",279],["// Called on the parent thread (main thread in case of bootstrap), can allocate memory.",224],["if e.parent == nil {",207],["// and its parent layer. If parent is \"\", then all changes will be ADD changes.",191]],"useCount":81844},{"word":"parse","context":[["glog.Errorf(\"Failed to parse etcd url for validation: %v\", err)",235],["log.Printf(\"ERROR: failed to parse request params - %s\", err.Error())",440],["package parse",757],["// parse query",335],["\"text/template/parse\"",215],["glog.Fatalf(\"Unable to parse CIDR: %v\", err)",229],["return fmt.Errorf(\"unable to parse pod full name %q: %v\", podFullName, err)",231],["t.Fatalf(\"Unexpected parse error: %v\\n\", err)",297],["// parse flags",245],["t.Error(\"Command didn't parse correctly\")",320]],"useCount":63909},{"word":"parser","context":[["\"github.com/cockroachdb/cockroach/sql/parser\"",1069],["\"github.com/cockroachdb/cockroach/pkg/sql/parser\"",458],["case parser.EQ:",485],["if parser.unread < 1 && !yaml_parser_update_buffer(parser, 1) {",492],["if parser.unread < 1 && !yaml_parser_update_buffer(parser, 1) {",492],["Expect(parser.Statements).To(Equal([]ast.Node{",707],["type parser struct {",766],["skip(parser)",767],["\"go/parser\"",2810],["package parser",3225]],"useCount":108220},{"word":"part","context":[["// This file is part of go-ethereum.",681],["// This file is part of the go-ethereum library.",3823],["// referencing a part of an object.",706],["// Prefix indicates this name will be used as part of generation, in which case",2533],["//     \"part\": {",1107],["params.Set(\"part\", fmt.Sprintf(\"%v\", c.part))",649],["for _, part := range parts {",811],["for _, part := range subCtx.parts {",906],["ctx.WriteString(part)",908],["//     \"part\"",1088]],"useCount":78877},{"word":"partial","context":[["// Fields allows partial responses to be retrieved.",33360],["// the partial errors. - Workflow errors. A typical workflow has",88],["// Fields allows partial responses to be retrieved. See",23003],["// Partial errors. If a service needs to return partial errors to the",88],["//  - A partial container ID prefix (e.g. short ID) of any length that is",200],["// TODO: reorder and partial match extra.",190],["// digest represents the partial evaluation of a checksum.",163],["partial := t.controller.ExpectCall(",125],["// The watch stream mechanism handles many common partial data errors, so closed",106],["exp := partial(HasSubstr(\"\"))",100]],"useCount":65586},{"word":"parts","context":[["switch parts[0] {",752],["if len(parts) != 3 {",738],["if len(parts) < 2 {",849],["for _, part := range subCtx.parts {",906],["if len(subCtx.parts) > 0 {",906],["if len(parts) == 2 {",1254],["if len(parts) > 1 {",1357],["if len(parts) != 2 {",2912],["for _, part := range parts {",811],["if len(parts) == 1 {",832]],"useCount":87844},{"word":"passed","context":[["// suffix i indicates that integer values are being passed; the suffix ui",584],["// uniform variable specified by location using the values passed as",584],["// indicates that unsigned integer values are being passed, and this type",584],["// NOTE: 'num' passed into FmtPercent is assumed to be in percent already",1431],["// The suffix f indicates that floating-point values are being passed; the",584],["// passed to the handler.  Regardless of the outcome of the handler, the container is eventually terminated.",537],["// returned to the client will be different than the name passed). The value of this field will",471],["if !passed {",352],["// If specified, these secrets will be passed to individual puller implementations for them to use.  For example,",342],["// If we reach here, then all our checks passed.",277]],"useCount":62030},{"word":"password","context":[["password, err := utils.RandomPassword()",651],["Password: password,",979],["password string",999],["if password == \"\" {",856],["Password string `json:\"password\"`",764],["if password != \"\" {",362],["var password string",320],["Password: \"password\",",276],["password,",276],["Password string `json:\"password,omitempty\"`",494]],"useCount":64493},{"word":"path","context":[["_p0, err = BytePtrFromString(path)",10837],["//       \"location\": \"path\",",89797],["\"path/filepath\"",65545],["\"path\"",34250],["path string",3524],["path:        \"\",",3407],["return path",3313],["if path == \"\" {",3238],["\"subscriptionId\":    autorest.Encode(\"path\", client.SubscriptionID),",2736],["\"resourceGroupName\": autorest.Encode(\"path\", resourceGroupName),",2634]],"useCount":886802},{"word":"pb","context":[["b.RunParallel(func(pb *testing.PB) {",2064],["for pb.Next() {",2058],["return pb",989],["pb \"github.com/coreos/etcd/etcdserver/etcdserverpb\"",846],["pb := initGoTest(true)",632],["overify(t, pb,",546],["pb := initGoTest(false)",540],["pb \"github.com/youtube/vitess/go/vt/proto/topodata\"",484],["Inner: &pb.InnerMessage{",438],["pb \"github.com/hyperledger/fabric/protos\"",418]],"useCount":137266},{"word":"peer","context":[["// Time allowed to write a message to the peer.",189],["//use a different address than what we usually use for \"peer\"",202],["path := ProcessMessage(updateMsg, peer, time.Now())[0]",210],["peer := &PeerInfo{AS: 65001, Address: net.ParseIP(\"10.0.0.1\")}",222],["if viper.GetBool(\"peer.tls.enabled\") {",253],["package peer",287],["for _, peer := range peers {",518],["peer \"github.com/ipfs/go-ipfs/p2p/peer\"",495],["peer \"github.com/ipfs/go-ipfs/p2p/peer\"",495],["Cmd: \"peer\",",414]],"useCount":73705},{"word":"pending","context":[["Pending:    []string{\"pending\"},",184],["// < scheduled, and pending < running. This ensures that we delete pods",199],["// Any pending HTTP request will be aborted if the provided context",4780],["pending := 0",231],["pending++",232],["glog.V(5).Infof(\"pod default case, pending\")",300],["glog.V(5).Infof(\"pod waiting > 0, pending\")",300],["\"current\": \"pending\",",328],["// methods. Any pending HTTP request will be aborted if the provided",466],["// pending HTTP request will be aborted if the provided context is",22537]],"useCount":65744},{"word":"pkg","context":[["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["\"k8s.io/kubernetes/pkg/fields\"",6969],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["\"k8s.io/kubernetes/pkg/util\"",8174],["\"k8s.io/kubernetes/pkg/api\"",26465],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["\"k8s.io/kubernetes/pkg/labels\"",9470],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"",7787]],"useCount":642146},{"word":"plugin","context":[["t.Errorf(\"Can't find the plugin by name\")",1899],["schedulerapi \"k8s.io/kubernetes/plugin/pkg/scheduler/api\"",555],["\"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm/predicates\"",559],["// Network plugin.",580],["\"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm\"",607],["package plugin",937],["plugin.host = host",855],["plugin:  plugin,",832],["plugin:  plugin,",832],["\"k8s.io/kubernetes/plugin/pkg/scheduler/schedulercache\"",617]],"useCount":71794},{"word":"pod","context":[["for _, container := range pod.Spec.Containers {",2060],["pod := &api.Pod{",7955],["// kubelet's host machine and then exposed to the pod.",3083],["for _, pod := range pods.Items {",3348],["for _, pod := range pods {",4806],["pod := obj.(*api.Pod)",1228],["podFullName := kubecontainer.GetPodFullName(pod)",1324],["for _, pod := range podList.Items {",1965],["return pod",1974],["pod: &api.Pod{",2454]],"useCount":673300},{"word":"pods","context":[["for _, pod := range pods {",4806],["return pods",1025],["return pods, nil",1086],["for _, pod := range pods.Items {",3348],["pods := []*api.Pod{",2589],["for _, p := range pods {",1193],["Resource(\"pods\").",1872],["pods: []*api.Pod{",1853],["kubelet.podManager.SetPods(pods)",1562],["for i := range pods {",997]],"useCount":267343},{"word":"point","context":[["// The suffix f indicates that floating-point values are being passed; the",584],["defer c.PageToken(c.urlParams_.Get(\"pageToken\")) // reset paging to original point",2234],["// Read next point.",667],["// Floating point.",623],["// at some point during pod execution (e.g. due to a pod label update), the",592],["// LoadBalancerIngress represents the status of a load-balancer ingress point:",484],["// traffic intended for the service should be sent to an ingress point.",484],["// Pop next point off the stack.",473],["// at some point during pod execution (e.g. due to an update), the system",434],["// Optional: The kubernetes object related to the entry point.",426]],"useCount":69856},{"word":"pointer","context":[["// requests. However, any non-pointer, non-interface field appearing in",469],["// unable to generate simple pointer conversion for unversioned.Time -> unversioned.Time",550],["if pointer != nil && pointer_v.Kind() != reflect.Slice {",411],["// to store v and returns a pointer to it.",599],["// FIXME: Will likely need to be reworked (has pointer parameter).",616],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// However, any non-pointer, non-interface field appearing in",683],["panic(\"parameter pointer must be a slice\")",412],["if pointer != nil {",412],["var pointer_v = reflect.ValueOf(pointer)",411]],"useCount":100284},{"word":"policy","context":[["for _, policy := range successCases {",393],["package policy",394],["// this action. You cannot use an IAM policy to constrain this action's parameters.",440],["// The default policy is Retain.",457],["// PullPolicy describes a policy for if/when to pull a container image",705],["// Optional: Set DNS policy.  Defaults to \"ClusterFirst\"",361],["// The policy document.",334],["\"invalid restart policy 1\": {",306],["\"invalid restart policy 2\": {",306],["\"k8s.io/kubernetes/pkg/apis/policy\"",302]],"useCount":83300},{"word":"popr","context":[["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["littlefuzz = append(littlefuzz, byte(popr.Intn(256)))",2720],["p := NewPopulatedFloatingPoint(popr, true)",315],["popr := math_rand2.New(math_rand2.NewSource(time2.Now().UnixNano()))",317],["dAtA[i] = byte(popr.Intn(256))",1663],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["littlefuzz[popr.Intn(len(littlefuzz))] = byte(popr.Intn(256))",2720],["popr := math_rand.New(math_rand.NewSource(seed))",14705],["popr := math_rand.New(math_rand.NewSource(616))",9510],["data[i] = byte(popr.Intn(256))",6917]],"useCount":99232},{"word":"port","context":[["for _, port := range ports {",868],["// TCPSocket specifies an action involving a TCP port.",651],["// EndpointPort is a tuple that describes a single port.",594],["// The IP protocol for this port.",594],["port,",686],["for _, port := range container.Ports {",742],["if port.NodePort == 0 {",814],["var port int",901],["if port == \"\" {",924],["if port == 0 {",1070]],"useCount":233358},{"word":"ports","context":[["var ports []api.ContainerPort",580],["// Protocol defines network protocols supported for things like conatiner ports.",508],["\"ports.#\": &terraform.ResourceAttrDiff{",617],["for _, p := range ports {",647],["\"ports\": &Schema{",1139],["\"ports\": [",906],["for _, port := range ports {",868],["\"k8s.io/kubernetes/pkg/master/ports\"",864],["ports = append(ports, container.Ports...)",743],["ports = append(ports, container.Ports...)",743]],"useCount":73505},{"word":"pos","context":[["tok, pos, lit := p.scanIgnoreWhitespace()",1550],["pos += 2",768],["if pos == -1 {",680],["pos += 4",666],["pos := 0",1123],["pos := p.pos",1325],["pos := p.pos",1325],["pos++",2417],["pos += n",664],["s.pos++",664]],"useCount":104365},{"word":"postIndex","context":[["iNdEx = postIndex",67189],["postIndex := iNdEx + msglen",41105],["if postIndex > l {",71103],["postIndex := iNdEx + intStringLen",21411],["postIndex := iNdEx + byteLen",3872],["index = postIndex",2697],["if iNdEx < postIndex {",1887],["if err := m.ObjectMeta.Unmarshal(data[iNdEx:postIndex]); err != nil {",1792],["postIndex := index + msglen",1752],["if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {",1680]],"useCount":271566},{"word":"prefix","context":[["prefix := \"\"",1599],["return NameIsDNSSubdomain(name, prefix)",1103],["prefix string",1063],["var prefix string",946],["if prefix == \"\" {",902],["if prefix {",825],["if prefix != \"\" {",740],["prefix,",516],["return prefix",641],["t.Errorf(\"%s: missing prefix for: %v\", k, errs[i])",599]],"useCount":140515},{"word":"print","context":[["RUN [ $(ls -l /test_dir/test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l / | grep test_dir | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l /test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l /exists | awk '{print $3\":\"$4}') = 'dockerio:dockerio' ]`,",696],["RUN [ $(ls -l / | grep exists | awk '{print $3\":\"$4}') = 'dockerio:dockerio' ]",736],["print(\"\\n\")",967],["print(2)",1001],["p.print(blank)",1022],["print(1)",1382],["// Pretty-print the response data.",34269]],"useCount":94053},{"word":"process","context":[["package process",414],["// All containers are in the process of restarting",306],["// and in the process of restarting",306],["// this phase is used by the persistent volume claim binder to signal to another process to reclaim the resource",453],["// Set this value longer than the expected cleanup time for your process.",539],["c.process(cmd)",1106],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// At least one container is still running or is in the process of being restarted.",588],["// The UID to run the entrypoint of the container process.",558],["// process.",460]],"useCount":75217},{"word":"project","context":[["//     \"project\": {",10121],["Project      string `json:\"project,omitempty\"`",2012],["//     \"project\"",2468],["project string",2505],["//       \"description\": \"Name of the project scoping this request.\",",3018],["\"project\": c.project,",3921],["\"project\": c.project,",3921],["//     \"project\",",7637],["c.project = project",9351],["c.project = project",9351]],"useCount":160408},{"word":"proto","context":[["\"github.com/golang/protobuf/proto\"",3772],["return true, proto.ErrInternalBadWireType",6693],["var _ = proto.Marshal",6750],["if wire != proto.WireBytes {",3435],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["import proto \"github.com/gogo/protobuf/proto\"",2812],["import proto \"github.com/gogo/protobuf/proto\"",2812],["import proto \"github.com/golang/protobuf/proto\"",3039],["import proto \"github.com/golang/protobuf/proto\"",3039]],"useCount":455756},{"word":"protobuf","context":[["Extendee: func(v string) *string { return &v }(\".google.protobuf.MessageOptions\"),",4039],["TypeName: func(v string) *string { return &v }(\".google.protobuf.UninterpretedOption\"),",1414],["ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",1678],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FieldOptions\"),",1818],["unversioned.ListMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",2125],["\"github.com/gogo/protobuf/proto\"",2474],["import proto \"github.com/gogo/protobuf/proto\"",2812],["import proto \"github.com/golang/protobuf/proto\"",3039],["\"github.com/golang/protobuf/proto\"",3772],["Extendee: func(v string) *string { return &v }(\".google.protobuf.FileOptions\"),",4847]],"useCount":192590},{"word":"protocol","context":[["protocol = \"/tcp\"",550],["req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)",5739],["protocol = \"tcp\"",1282],["package protocol",1045],["// ProtocolTCP is the TCP protocol.",713],["// ProtocolUDP is the UDP protocol.",713],["Protocol          string `json:\"protocol,omitempty\"`",636],["Protocol Protocol `json:\"protocol,omitempty\"`",605],["// The IP protocol for this port.",594],["\"github.com/aws/aws-sdk-go/private/protocol\"",511]],"useCount":104854},{"word":"provided","context":[["// in the documentation and/or other materials provided with the",1838],["// WeekdayShort returns the locales short weekday given the 'weekday' provided",1430],["// WeekdayWide returns the locales wide weekday given the 'weekday' provided",1430],["// MonthNarrow returns the locales narrow month given the 'month' provided",1430],["// WeekdayNarrow returns the locales narrow weekday given the 'weekday' provided",1430],["// The provided context supersedes any context provided to the Context method.",2234],["// The provided context supersedes any context provided to the Context method.",2234],["// Overrides userIp if both are provided.",2283],["// Any pending HTTP request will be aborted if the provided context",4780],["// pending HTTP request will be aborted if the provided context is",22537]],"useCount":148689},{"word":"provider","context":[["package provider",486],["provider:",438],["// ProviderName returns the cloud provider ID.",439],["glog.Fatalf(\"Cloud provider could not be initialized: %v\", err)",449],["// external load balancer (if the cloud provider supports it), in addition",484],["// to the cloud provider?",495],["\"github.com/juju/juju/provider/common\"",570],["// and allows a Source for provider-specific attributes",592],["\"github.com/juju/juju/provider/dummy\"",615],["// Queried from cloud provider, if available.",802]],"useCount":67339},{"word":"proxy","context":[["proxy := goproxy.NewProxyHttpServer()",333],["package proxy",1625],["defer proxy.Close()",755],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["// will answer requests sent through the proxy.",737],["SubResource(\"proxy\").",601],["// Path is the URL path to use for the current proxy request",469],["\"github.com/juju/utils/proxy\"",432],["Prefix(\"proxy\").",1754],["// PodProxyOptions is the query options to a Pod's proxy call",379]],"useCount":64716},{"word":"ptr","context":[["if ptr == nil {",408],["n.SetPointer(ptr)",464],["if ptr != nil {",640],["p := ptr(s)",686],["qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))",756],["ptr.SetPointer(nil)",916],["ptr := v_0.Args[0]",1607],["ptr := v.Args[0]",1744],["if ptr.Pointer() != nil {",20068],["v.AddArg(ptr)",3469]],"useCount":72983},{"word":"q","context":[["t.Errorf(\"expected %q', got %q\", exp, got)",2658],["return q",7145],["defer q.lock.Unlock()",927],["c.Fatalf(\"failed to run container: %v, output: %q\", err, out)",954],["q.lock.Lock()",1016],["return nil, fmt.Errorf(\"Read %q: %v\", name, err)",1238],["t.Fatalf(\"can't mkdir(%q): %s\", root, err)",1410],["q.m.Unlock()",1467],["q.m.Lock()",1484],["t.Errorf(\"expected %q', got %q\", exp, got)",2658]],"useCount":573766},{"word":"query","context":[["//       \"location\": \"query\",",83874],["err = ec2.query(params, resp)",2002],["req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)",1712],["t.Error(query.failureMessage())",3906],["} else if !query.success() {",3906],["if query.skip {",3906],["if err := query.Execute(s); err != nil {",3874],["t.Error(query.Error(err))",3871],["t.Logf(\"SKIP:: %s\", query.name)",3861],["for i, query := range test.queries {",2679]],"useCount":310388},{"word":"r","context":[["r.ReadEnd()",19658],["if r.TryDecodeAsNil() {",130473],["_, _, _ = h, z, r",60384],["r.EncodeNil()",55173],["z, r := codec1978.GenHelperDecoder(d)",42393],["return r",26906],["if r.Intn(10) != 0 {",25630],["z, r := codec1978.GenHelperEncoder(e)",17991],["r.EncodeString(codecSelferC_UTF81234, \"\")",14602],["if r.Intn(2) == 0 {",14164]],"useCount":2532851},{"word":"r0","context":[["var r0 error",693],["if r0 != 0 {",745],["uid = int(r0)",755],["pid = int(r0)",1053],["val = int(r0)",1063],["return r0",1215],["r0 = rf(_a0)",1254],["return r0, r1",2305],["fd = int(r0)",3024],["n = int(r0)",7051]],"useCount":66483},{"word":"rand","context":[["\"crypto/rand\"",10968],["mrand \"math/rand\"",443],["crand \"crypto/rand\"",572],["import \"math/rand\"",665],["rand.Seed(time.Now().Unix())",1035],["r := rand.New(rand.NewSource(time.Now().UnixNano()))",1239],["r := rand.New(rand.NewSource(time.Now().UnixNano()))",1239],["rand.Seed(time.Now().UTC().UnixNano())",1780],["rand.Seed(time.Now().UnixNano())",2847],["\"math/rand\"",26174]],"useCount":98291},{"word":"range","context":[["for _, test := range tests {",20305],["for i := range in.Items {",16680],["for i := range *in {",14643],["for i, test := range tests {",8257],["for i := range data {",7713],["for i := range in {",5562],["for _, pod := range pods {",4806],["for k2, v2 := range v {",4716],["for i, tt := range tests {",10529],["for _, tt := range tests {",22910]],"useCount":1616533},{"word":"raw","context":[["raw := noMethod(*s)",39504],["return internal.MarshalJSON(raw, s.ForceSendFields)",6494],["return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)",5866],["GeometryFormat: \"raw\",",2294],["if raw == nil {",1077],["z.raw.end--",843],["z.data.end = z.raw.end",700],["var raw interface{}",490],["return json.Marshal(raw)",454],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144]],"useCount":148147},{"word":"rc","context":[["defer rc.Close()",1399],["rc.Close()",815],["manager.syncReplicationController(getKey(rc, t))",624],["rc := &api.ReplicationController{",613],["return rc",612],["return rc, nil",404],["for _, rc := range rcs.Items {",333],["for _, rc := range rcList.Items {",326],["rc, err := c.ReplicationControllers(ns).Get(name)",310],["rcKey, err := controller.KeyFunc(rc)",306]],"useCount":85317},{"word":"re","context":[["c.Assert(re.StatusCode, Equals, http.StatusOK)",592],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["// Empty: A generic empty message that you can re-use to avoid defining",224],["fs.Close() // Close immediately; we're just doing a `touch` here",225],["StartedAt util.Time `json:\"startedAt,omitempty\" description:\"time at which the container was last (re-)started\"`",225],["// SelfLink: A URL to re-request this resource.",244],["return c.RenderJson(re)",748],["// Editing this file might prove futile when you re-run the generate command",259],["return re",569],["re := info.NewRe()",523]],"useCount":102942},{"word":"read","context":[["//     \"https://www.googleapis.com/auth/cloud-platform.read-only\",",1870],["return fmt.Errorf(\"%T field %d read error: %s\", p, fieldId, err)",1365],["return nil, fmt.Errorf(\"Asset %s can't read by error: %v\", name, err)",646],["return nil, fmt.Errorf(\"AssetInfo %s can't read by error: %v\", name, err)",646],["return fmt.Errorf(\"%T read error: %s\", p, err)",832],["return thrift.PrependError(fmt.Sprintf(\"%T read error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T read struct end error: \", p), err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T field %d read error: \", p, fieldId), err)",1514],["return fmt.Errorf(\"%T read struct end error: %s\", p, err)",1365],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684]],"useCount":173849},{"word":"ref","context":[["//     \"$ref\": \"Table\"",829],["//     \"$ref\": \"Account\"",849],["//     \"$ref\": \"Empty\"",1005],["//     \"$ref\": \"Report\"",1014],["//     \"$ref\": \"File\"",1058],["//     \"$ref\": \"Object\"",1124],["// - session_id, session ref, Reference to a valid session",1331],["if ref != nil {",1347],["//     \"$ref\": \"ObjectAccessControl\"",1435],["//     \"$ref\": \"Operation\"",4819]],"useCount":140272},{"word":"reference","context":[["// cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax",574],["// See the AWS API reference guide for Amazon API Gateway's",456],["// Always reference these packages, just in case the auto-generated code",3048],["\"github.com/docker/docker/reference\"",814],["if false { // reference the types, but skip this branch at build/run time",664],["// TemplateRef is a reference to an object that describes the pod that will be created if",604],["Type:     \"reference\",",565],["// See the AWS API reference guide for 's",504],["// reference is to a container within a pod, this would take on a value like:",490],["\"github.com/docker/distribution/reference\"",455]],"useCount":70933},{"word":"reflect","context":[["\"reflect\"",67635],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:",4556],["case reflect.Bool:",4852],["case reflect.Slice:",4924],["case reflect.Struct:",5753],["case reflect.String:",6428],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718]],"useCount":580037},{"word":"regexp","context":[["matched, _ := regexp.MatchString(regex, out)",297],["if !regexp.MustCompile(`(?m)^hello world`).MatchString(out) {",294],["match, err := regexp.MatchString(\"^[0-9a-f]{64}$\", strings.TrimSuffix(out, \"\\n\"))",223],["Regex: &influxql.RegexLiteral{Val: regexp.MustCompile(`[cg]pu`)},",211],["if regexp.MustCompile(`-$`).MatchString(value) {",194],["\"regexp/syntax\"",192],["match, err := regexp.MatchString(pattern, str)",181],["package regexp",180],["import \"regexp\"",485],["\"regexp\"",37585]],"useCount":80132},{"word":"region","context":[["//       \"description\": \"Name of the region scoping this request.\",",599],["// to return a list of gateways for your account and region.",1344],["networkingClient, err := config.networkingV2Client(d.Get(\"region\").(string))",645],["\"topologyKey\": \"region\"",688],["//     \"region\",",720],["Region string `json:\"region,omitempty\"`",803],["c.region = region",1057],["c.region = region",1057],["//     \"region\": {",1136],["{lang: 0x0, region: 0x0},",1250]],"useCount":93535},{"word":"registry","context":[["\"k8s.io/kubernetes/pkg/registry/generic/registry\"",634],["\"k8s.io/kubernetes/pkg/registry/generic/registry\"",634],["\"k8s.io/kubernetes/pkg/registry/registrytest\"",818],["// tag the image and upload it to the private registry",851],["registry := NewTestEtcd(fakeClient)",898],["registry := NewTestEtcdRegistry(fakeClient)",1192],["package registry",1675],["\"github.com/docker/docker/registry\"",1716],["\"k8s.io/kubernetes/pkg/registry/cachesize\"",608],["\"k8s.io/kubernetes/pkg/registry/generic\"",2344]],"useCount":104269},{"word":"remove","context":[["// TODO: remove unversionedClient when the refactoring is done. Currently some",340],["// TODO: remove when kubenet plugin is ready",241],["// so that we don't remove volumes associated with terminated but not yet",270],["// TODO: remove this net line once all platforms use apiserver+Pods.",306],["if remove {",310],["if len(remove) > 0 {",399],["// Finalizers is an opaque list of values that must be empty to permanently remove object from storage",447],["//  Note that you are welcome to modify this code under the condition that you do not remove any",466],["case \"remove\":",543],["defer remove(rootfs)",927]],"useCount":69802},{"word":"reply","context":[["// Check returns an error if one occurred for checked requests that are not expecting a reply.",383],["// This cannot be called for requests expecting a reply, nor for unchecked requests.",383],["return reply",488],["} else if reply != utils.OK {",521],["return reply, nil, err",540],["reply = &resp",574],["} else if reply != \"OK\" {",611],["var reply string",846],["return reply, err",1061],["return reply, nil",1327]],"useCount":75910},{"word":"repo","context":[["repo:   \"https://{root}\",",312],["// publish repo",400],["defer os.RemoveAll(repo.baseDir)",401],["for _, repo := range repos {",566],["package repo",671],["git, err := newFakeGit(\"repo\", map[string]string{",378],["v.Set(\"repo\", repository)",326],["return repo, nil",332],["config \"github.com/ipfs/go-ipfs/repo/config\"",359],["return repo",313]],"useCount":103947},{"word":"representation","context":[["// String returns a string representation of the statement.",382],["// This is used as the representation of Kubernetes workloads.",203],["// String returns the string representation",113951],["// GoString returns the string representation",113945],["// equivalent to the \"default\" namespace, but \"default\" is the canonical representation.",607],["// String returns a string representation of the literal.",492],["// marshal serializes to a protobuf representation.",351],["// unmarshal deserializes from a protobuf representation.",351],["// APIVersion defines the versioned schema of this representation of an object.",292],["// should be a string representation of the inputs to a range (for instance, for IP allocation it",213]],"useCount":251995},{"word":"represents","context":[["// GitRepo represents a git repository at a particular revision.",697],["// FlexVolume represents a generic volume resource that is",708],["// EmptyDir represents a temporary directory that shares a pod's lifetime.",705],["// AWSElasticBlockStore represents an AWS Disk resource that is attached to a",636],["// Cinder represents a cinder volume attached and mounted on kubelets host machine",696],["// EnvVar represents an environment variable present in a Container.",716],["// ReplicationController represents the configuration of a replication controller.",716],["// Source represents the location and type of a volume to mount.",722],["// NFS represents an NFS mount on the host that shares a pod's lifetime",817],["// GCEPersistentDisk represents a GCE Disk resource that is attached to a",1234]],"useCount":105806},{"word":"req","context":[["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["req.Header.Set(\"Content-Type\", ctype)",17612],["return c.s.client.Do(req)",25977],["res, err := c.s.client.Do(req)",25048],["return ctxhttp.Do(c.ctx_, c.s.client, req)",20265],["googleapi.Expand(req.URL, map[string]string{",44831],["req = c.newRequest(op, input, output)",46423],["err := req.Send()",52207],["req.Data = output",54229]],"useCount":1106916},{"word":"reqErr","context":[["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["if reqErr != nil {",186],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["if reqErr, ok := err.(awserr.RequestFailure); ok {",13417],["fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())",13348],["return nil, reqErr",31],["if reqErr != nil && !deis.IsErrAPIMismatch(reqErr) {",29],["if reqErr != nil && !deis.IsErrAPIMismatch(reqErr) {",29],["So(reqErr, ShouldBeNil)",25]],"useCount":67247},{"word":"request","context":[["//   \"request\": {",23771],["// pending HTTP request will be aborted if the provided context is",22537],["// Creating a request object using this method should be used when you want to inject",13378],["// access properties on the request object before or after sending the request. If",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Note: You must call the \"Send\" method on the returned request object in order",13378],["// access properties on the request object before or after sending the request. If",13378],["// to execute the request.",13378],["op := &request.Operation{",37657]],"useCount":797904},{"word":"requests","context":[["// to unconditionally include in API requests. By default, fields with",1463],["// empty values are omitted from API requests. However, any non-pointer,",38333],["// used to include empty fields in Patch requests.",38333],["// Note: This operation can generate multiple requests to a service.",1419],["req := fakeRT.requests[0]",1416],["// unconditionally include in API requests. By default, fields with",36870],["// values are omitted from API requests. However, any field with an",3833],["// requests.",1776],["// API requests with the JSON null value. By default, fields with empty",1737],["// requests with the JSON null value. By default, fields with empty",2096]],"useCount":220254},{"word":"require","context":[["require.Nil(t, err)",1931],["require.True(t, ok)",1268],["require.NoError(t, err)",22318],["\"github.com/stretchr/testify/require\"",3672],["require.Error(t, err)",2303],["require.NoError(err)",446],["require.Equal(t, nil, err)",405],["require := require.New(t)",388],["var utils = require('../utils/utils');",293],["require := require.New(t)",388]],"useCount":67930},{"word":"required","context":[["DomainName *string `type:\"string\" required:\"true\"`",886],["\"required\": [",926],["\"required\": true,",1088],["\"required\": true",688],["Name *string `type:\"string\" required:\"true\"`",1102],["RestApiId *string `location:\"uri\" locationName:\"restapi_id\" type:\"string\" required:\"true\"`",864],["Bucket *string `location:\"uri\" locationName:\"Bucket\" type:\"string\" required:\"true\"`",2494],["// as then you are sure you have configured all required params",4924],["\"required\": false,",746],["//       \"required\": true,",96651]],"useCount":302079},{"word":"res","context":[["defer googleapi.CloseBody(res)",57836],["HTTPStatusCode: res.StatusCode,",24593],["Code:   res.StatusCode,",24618],["Header: res.Header,",24619],["if res.Body != nil {",24829],["res, err := c.s.client.Do(req)",25048],["res.Body.Close()",30727],["res, err := c.doRequest(\"json\")",33446],["if err := googleapi.CheckResponse(res); err != nil {",58830],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151]],"useCount":753521},{"word":"resource","context":[["resource.TestStep{",10880],["Check: resource.ComposeTestCheckFunc(",10702],["\"github.com/hashicorp/terraform/helper/resource\"",4210],["\"k8s.io/kubernetes/pkg/api/resource\"",4901],["// Kind: Identifies what kind of resource this is. Value: the fixed",5509],["newVal := new(resource.Quantity)",3973],["resource.TestCheckResourceAttr(",14361],["resource.Test(t, resource.TestCase{",8069],["resource.Test(t, resource.TestCase{",8069],["Steps: []resource.TestStep{",8139]],"useCount":440633},{"word":"resources","context":[["// You can use IAM policies to control this action's access to Amazon SWF resources",660],["// for filtering listed resources, in the form filter={expression}. Your",693],["\"resources\": {",737],["//       \"description\": \"Optional. Filter expression for filtering listed resources.\",",889],["\"resources\": [",903],["// (regardless of what the tag's key is). If you want to list only resources",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.",622],["// ObjectMeta is metadata that all persisted resources must have, which includes all objects",599],["// filtering listed resources.",965]],"useCount":113106},{"word":"resp","context":[["resp.Body.Close()",7445],["return resp, nil",7509],["body, err := ioutil.ReadAll(resp.Body)",8460],["fmt.Println(awsutil.StringValue(resp))",10680],["result.Response = autorest.Response{Response: resp}",11401],["return resp, err",11648],["//    if err == nil { // resp is now filled",13378],["//        fmt.Println(resp)",13378],["fmt.Println(resp)",19340],["defer resp.Body.Close()",30994]],"useCount":575020},{"word":"response","context":[["//   \"response\": {",55814],["// END Unmarshal arguments from response.",2807],["response, err := client.Do(request)",3234],["defer response.Body.Close()",3428],["return response, nil",4258],["// actually making the request, and provides an error response. If you have",6922],["// request. Use googleapi.IsNotModified to check whether the response",12114],["// value can be used to capture response data after the request's \"Send\" method",13378],["// ServerResponse contains the HTTP response code and headers from the",13928],["// Pretty-print the response data.",34269]],"useCount":500716},{"word":"responses","context":[["// Fields allows partial responses to be retrieved.",33360],["gwacl.PatchManagementAPIResponses(responses)",146],["// responses.",153],["responses := []gwacl.DispatcherResponse{",206],["return responses",232],["responses: []staticHTTPResponse{",238],["requests := gwacl.PatchManagementAPIResponses(responses)",252],["// responses:",295],["// Fields allows partial responses to be retrieved. See",23003],["// Context for checking pods responses by issuing GETs to them (via the API",139]],"useCount":73614},{"word":"result","context":[["return result, nil",17980],["c.Err = result.Err",2829],["storeChannel <- result",3029],["result.Response = resp",3498],["autorest.ByUnmarshallingJSON(&result),",4323],["Into(result)",5632],["return result, err",8178],["result.Response = autorest.Response{Response: resp}",11401],["// error from Do is the result of In-None-Match.",12114],["return result",27228]],"useCount":643292},{"word":"results","context":[["exp:     `{\"results\":[{}]}`,",2823],["if len(results.Results) != 1 {",971],["// of results to return.",1038],["//       \"description\": \"Maximum number of results to return.\",",1038],["return results, err",1121],["// results.",1151],["result := results.Results[0]",1168],["// Pages invokes f for each page of results.",2234],["return results",2485],["return results, nil",3301]],"useCount":188027},{"word":"ret","context":[["if err := json.NewDecoder(res.Body).Decode(ret); err != nil {",1930],["return ret, nil",59215],["if err := json.NewDecoder(res.Body).Decode(&ret); err != nil {",39151],["return ret",15238],["target := &ret",10673],["return ret, err",4236],["goto ret",3964],["var ret *Operation",2649],["if ret.Get(0) != nil {",2138],["ret1, _ := ret[1].(error)",2134]],"useCount":288312},{"word":"retrieved","context":[["// Fields allows partial responses to be retrieved.",33360],["// and update the expectations after we've retrieved active pods from the store. If a new pod enters",145],["// information. Use when an object is in hand (on disk, or already retrieved).",190],["// Verifies that schemas that are not in the master tree of Kubernetes can be retrieved via Get.",213],["// properties identify other pages that could be retrieved.",264],["// so that the remaining results can be retrieved.",288],["// records have been retrieved for the request.",391],["// If an error occurs, it can only be retrieved using xgb.WaitForEvent or xgb.PollForEvent.",686],["// is included in the response so that the remaining results can be retrieved.",688],["// Fields allows partial responses to be retrieved. See",23003]],"useCount":68041},{"word":"return","context":[["return c",267226],["return false",425000],["return nil, err",870029],["return io.ErrUnexpectedEOF",285098],["return nil",1271420],["return err",1518678],["return",1522143],["return s.String()",114328],["return awsutil.Prettify(s)",109113],["return true",274181]],"useCount":14278450},{"word":"returned","context":[["// because http.StatusNotModified was returned.",9422],["// googleapi.IsNotModified to check whether the returned error was",9322],["// to check whether the returned error was because",6692],["// http.StatusNotModified was returned.",6692],["// check whether the returned error was because http.StatusNotModified",6580],["// was returned.",6580],["// returned at all) in error.(*googleapi.Error).Header. Use",5593],["// returned.",4360],["// A non-nil error returned from f will halt the iteration.",2234],["// Note: You must call the \"Send\" method on the returned request object in order",13378]],"useCount":286181},{"word":"returns","context":[["// GoString returns the string representation",113945],["// String returns the string representation",113951],["It(\"returns an error\", func() {",3968],["// Header returns an http.Header that can be modified by the caller to",3239],["// newClient creates, initializes and returns a new service client instance.",2270],["// MonthsWide returns the locales wide months",1430],["// MonthsNarrow returns the locales narrow months",1430],["// Locale returns the current translators string locale",1430],["// WeekdayWide returns the locales wide weekday given the 'weekday' provided",1430],["// returns:",1432]],"useCount":768968},{"word":"roachpb","context":[["\"github.com/cockroachdb/cockroach/roachpb\"",2764],["Span: roachpb.Span{",1356],["return nil, roachpb.NewError(err)",929],["\"github.com/cockroachdb/cockroach/pkg/roachpb\"",926],["key := roachpb.Key(\"a\")",893],["var ba roachpb.BatchRequest",814],["ReadConsistency: roachpb.INCONSISTENT,",705],["Replicas: []roachpb.ReplicaDescriptor{",640],["h roachpb.Header,",406],["var pErr *roachpb.Error",409]],"useCount":128264},{"word":"root","context":[["req.ClientToken = root",1188],["t.Fatalf(\"can't mkdir(%q): %s\", root, err)",1410],["RUN [ $(ls -l /test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l /test_dir/test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["RUN [ $(ls -l /test_dir/test_file | awk '{print $3\":\"$4}') = 'root:root' ]",592],["os.RemoveAll(root)",596],["c, _, root := TestCoreUnsealed(t)",678],["defer os.RemoveAll(root)",813],["err = admindb.Login(\"root\", \"rapadura\")",912],["RUN [ $(ls -l / | grep test_dir | awk '{print $3\":\"$4}') = 'root:root' ]",592]],"useCount":167348},{"word":"route","context":[["for _, route := range routes {",1354],["type route struct {",368],["// The ID of the route table.",392],["return route",427],["package route",557],["route: &api.Route{",562],["routeapi \"github.com/openshift/origin/pkg/route/api\"",577],["addParams(route, action.Params)",920],["ws.Route(route)",932],["route:       new(Route).Host(\"aaa.bbb.ccc\"),",360]],"useCount":80089},{"word":"rows","context":[["defer rows.Close()",6495],["for rows.Next() {",9517],["rows.Close()",2550],["if err := rows.Err(); err != nil {",1159],["err = rows.Err()",858],["if !rows.Next() {",729],["for _, row := range rows {",722],["var rows *sql.Rows",590],["return rows, nil",588],["if rows.Next() {",1198]],"useCount":84449},{"word":"rr","context":[["return rr, nil, \"\"",1959],["return rr, nil",428],["return rr, nil, c1",447],["rr := httptest.NewRecorder()",620],["return rr, off, nil",782],["return rr, off, err",1278],["rr.Hdr = h",1719],["l := rr.Hdr.len()",378],["return rr, nil, l.comment",369],["off, err := rr.Hdr.pack(msg, off, compression, compress)",332]],"useCount":62233},{"word":"rs","context":[["rs, ok := s.RootModule().Resources[name]",321],["rs := &ReportsService{s: s}",345],["return rs, nil",360],["for _, r := range rs {",380],["rs := &ProjectsService{s: s}",421],["pr.ApplyFn = func(rs *InstanceState, c *ResourceConfig) error {",430],["rs, ok := s.RootModule().Resources[n]",2088],["for _, rs := range s.RootModule().Resources {",2235],["if rs.Primary.ID == \"\" {",2344],["return rs",19695]],"useCount":108083},{"word":"run","context":[["// TODO Windows: This test cannot run on a Windows daemon as Windows does",738],["t.Fatalf(\"failed to run container: %v, output: %q\", err, out)",807],["// ExecAction describes a \"run in container\" action.",717],["test.run(t)",1466],["// run",1213],["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"top\")",1197],["c.Fatalf(\"failed to run container: %v, output: %q\", err, out)",954],["}.run(t)",875],["// For example if you run go-bindata on data/... and data contains the",699],["// Editing this file might prove futile when you re-run the swagger generate command",2557]],"useCount":272228},{"word":"rune","context":[["func(r rune) int {",2092],["return rune(ru + 61)",825],["return rune(ru + 48)",825],["return rune(ru + 55)",825],["var r rune",564],["[]rune{' ', ' ', ' ', ' ', ' ', ' ', ' '},",535],["if buffer[position] != rune('e') {",494],["if buffer[position] != rune('s') {",332],["b := make([]rune, n)",332],["if buffer[position] != rune('E') {",331]],"useCount":62455},{"word":"running","context":[["// timeout, the resonse will contain the jobid of the running async job",1437],["// If 'warn' has a value it means the job is running longer than the configured",1437],["if !running {",501],["// The grace period is the duration in seconds after the processes running in the pod are sent",539],["running := 0",552],["// At least one container is still running or is in the process of being restarted.",588],["// running.",596],["running = true",614],["// NodeRunning means the node has been configured and has Kubernetes components running.",678],["running++",839]],"useCount":150421},{"word":"runtime","context":[["\"github.com/GoogleCloudPlatform/kubernetes/pkg/runtime\"",4552],["runtime.GOMAXPROCS(runtime.NumCPU())",3567],["package runtime",3710],["runtime.LockOSThread()",4418],["runtime.GC()",4493],["switch runtime.GOOS {",4870],["if runtime.GOOS == \"windows\" {",7580],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["\"k8s.io/kubernetes/pkg/runtime\"",15222],["\"runtime\"",38944]],"useCount":377341},{"word":"rv","context":[["rv = append(rv, childName)",550],["rv = append(rv, childName)",550],["WatchFunc: func(rv string) (watch.Interface, error) {",595],["rv := make([]string, 0, len(node.Children))",697],["return rv, nil",1390],["return rv",1481],["pv := reflect.Indirect(rv).Interface()",2042],["rv := reflect.ValueOf(v)",2469],["if rv.IsNil() {",2691],["if rv.CanAddr() {",3734]],"useCount":61525},{"word":"s","context":[["c.opt_[\"fields\"] = googleapi.CombineFields(s)",29281],["return c.s.client.Do(req)",25977],["return awsutil.Prettify(s)",109113],["return gensupport.MarshalJSON(raw, s.ForceSendFields)",27144],["req.Header.Set(\"User-Agent\", c.s.userAgent())",31852],["t.Fatalf(\"err: %s\", err)",35495],["raw := noMethod(*s)",39504],["if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {",62718],["return s",93160],["return s.String()",114328]],"useCount":6615007},{"word":"same","context":[["// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",313],["// The disk must also be in the same AWS zone as the kubelet.",317],["// It enforces that the syncHandler is never invoked concurrently with the same key.",348],["// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume",383],["// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace",383],["// to the same HTTP status code.",431],["// Applies the same authentication and authorization (if any is configured)",432],["// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images",478],["// The disk must also be in the same GCE project and zone as the kubelet.",500],["// SecretTypeDockercfg contains a dockercfg file that follows the same format rules as ~/.dockercfg",503]],"useCount":127877},{"word":"sc","context":[["if sc.inGoAway {",261],["defer sc.lock.Unlock()",272],["sc.serveG.check()",3320],["sc.scheduleFrameWrite()",593],["case <-sc.doneServing:",582],["for sc.Scan() {",548],["func(sc hook.ServiceControl, args ...interface{}) error {",309],["if sc == nil {",308],["sc.req.invalidHeader = true",281],["sc.lock.Lock()",277]],"useCount":64205},{"word":"schema","context":[["\"github.com/hashicorp/terraform/helper/schema\"",4300],["Type:     schema.TypeBool,",4137],["return &schema.Resource{",3711],["Type:     schema.TypeSet,",3680],["Elem: &schema.Resource{",3192],["Type:        schema.TypeString,",2961],["Elem:     &schema.Schema{Type: schema.TypeString},",2931],["Type:     schema.TypeInt,",4628],["Schema: map[string]*schema.Schema{",7236],["Type:     schema.TypeString,",26163]],"useCount":189836},{"word":"scope","context":[["errorJSON(err, scope.Codec, w)",2039],["Scope:        scope.NewPerm(scope.DefaultID, scope.WebsiteID),",580],["Scope:        scope.NewPerm(scope.DefaultID, scope.WebsiteID),",580],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:     scope.NewPerm(scope.DefaultID, scope.WebsiteID),",618],["Scope:        scope.PermAll,",714],["scope.err(err, res.ResponseWriter, req.Request)",1026],["Scope:     scope.PermAll,",1305],["return scope",1047]],"useCount":87876},{"word":"scopes","context":[["for _, scope := range scopes {",311],["sort.Strings(scopes)",199],["Scopes []string `json:\"scopes,omitempty\"`",196],["scopes = append(scopes, string(scope))",155],["scopes = append(scopes, string(scope))",155],["\"conflicting scopes\",",114],["scopes := []string{}",105],["Scopes []ResourceQuotaScope `json:\"scopes,omitempty\"`",102],["// OAuth2 scopes used by this API.",2697],["//   \"scopes\": [",61264]],"useCount":71895},{"word":"sdk","context":[["\"github.com/aws/aws-sdk-go/aws/awserr\"",2947],["\"github.com/aws/aws-sdk-go/aws/request\"",2438],["\"github.com/aws/aws-sdk-go/service/ec2\"",1935],["\"github.com/aws/aws-sdk-go/aws/session\"",1681],["\"github.com/aws/aws-sdk-go/aws/awsutil\"",1524],["\"github.com/awslabs/aws-sdk-go/aws\"",1000],["\"github.com/aws/aws-sdk-go/aws/credentials\"",909],[". \"aliyun-openapi-go-sdk/core\"",869],["\"github.com/aws/aws-sdk-go/service/s3\"",856],["\"github.com/aws/aws-sdk-go/aws\"",7099]],"useCount":77342},{"word":"secret","context":[["errs := ValidateSecret(&tc.secret)",478],["// The serialized form of the secret data is a base64 encoded string,",626],["// Used to facilitate programmatic handling of secret data.",580],["// Secret represents a secret that should populate this volume.",550],["secret api.Secret",478],["// Secret holds secret data of a certain type.  The total bytes of the values in",446],["// Optional: SecretRef is reference to the authentication secret for User, default is empty.",442],["// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret",368],["// Data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN",327],["Secret *SecretVolumeSource `json:\"secret,omitempty\"`",294]],"useCount":61189},{"word":"see","context":[["// getServiceEnvVarMap makes a map[string]string of env vars for services a pod in namespace ns should see",288],["// For more information, see Access Control Using AWS Identity and Access Management",401],["// TODO: This should allow hostname or IP, see #4447.",432],["For more about build flags, see 'go help build'.",352],["Usage:       \"use it to see a description\",",342],["// and event is recorded or neither should happen, see issue #6055.",692],["// where Purpose is X, see the tag:key=value filter.",931],["For more about specifying packages, see 'go help packages'.",1006],["// to see the host machine. Most containers will NOT need this.",321],["// For details and example IAM policies, see Using IAM to Manage Access to Amazon",756]],"useCount":94140},{"word":"seed","context":[["popr := math_rand.New(math_rand.NewSource(seed))",14705],["t.Fatalf(\"seed = %d, %#v !Json Equal %#v\", seed, msg, p)",2604],["t.Fatalf(\"seed = %d, %#v !Json Equal %#v\", seed, msg, p)",2604],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"seed = %d, %#v !Proto %#v\", seed, msg, p)",9541],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["seed := time.Now().UnixNano()",14884],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634]],"useCount":147587},{"word":"select","context":[["// The name of the secret in the pod's namespace to select from.",227],["// The key to select.",229],["// The ConfigMap to select from.",229],["// The key of the secret to select from.  Must be a valid secret key.",227],["</select>",183],["exp:     `{\"results\":[{\"error\":\"statement must have at least one field in select clause\"}]}`,",264],["// Required: Path of the field to select in the specified API version",363],["select",469],["select {}",2509],["select {",139086]],"useCount":174164},{"word":"selector","context":[["err = cache.ListAll(s.indexer, selector, func(m interface{}) {",458],["Selector map[string]string `json:\"selector,omitempty\"`",495],["Selector map[string]string `json:\"selector\"`",588],["options := api.ListOptions{FieldSelector: selector}",593],["// NodeSelector is a selector which must be true for the pod to fit on a node",627],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["r.EncodeString(codecSelferC_UTF81234, string(\"selector\"))",773],["case \"selector\":",813],["options := api.ListOptions{LabelSelector: selector}",1136],["\"selector\": {",1770]],"useCount":71191},{"word":"self","context":[["return self",2594],["self.lexeme = append(self.lexeme, c)",2485],["self.lexeme = append(self.lexeme, c)",2485],["if self.present != nil {",947],["t.Errorf(\"Never set self link\")",715],["self.next()",652],["self.mu.Lock()",651],["self.lock.Lock()",645],["defer self.lock.Unlock()",540],["if err := self.codec.Decode(req.Params, &args); err != nil {",629]],"useCount":153374},{"word":"send","context":[["StreamID:      1, // clients send odd numbers",838],["// A periodic relist will send update events for all known pods.",293],["// will send a hard termination signal to the container.",595],["tt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",394],["cn.send(b)",356],["nt.send(pb.Message{From: 1, To: 1, Type: pb.MsgHup})",344],["// projects with their IDs, send a Projects: list request. You can also",305],["cn.send(w)",298],["panic(\"nilch send\")",296],["panic(\"dummy send\")",296]],"useCount":65862},{"word":"sent","context":[["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// empty value appearing in NullFields will be sent to the server as",3833],["// ForceSendFields will be sent to the server regardless of whether the",1152],["// an empty value appearing in NullFields will be sent to the server as",1097],["// with an empty value appearing in NullFields will be sent to the",819],["// will answer requests sent through the proxy.",737],["// The grace period is the duration in seconds after the processes running in the pod are sent",539],["// traffic intended for the service should be sent to an ingress point.",484],["// contentType is contentType of requests sent to apiserver.",352],["glog.Warning(\"No api server defined - no node status update will be sent.\")",309]],"useCount":87103},{"word":"server","context":[["// server.",15949],["// for quota purposes for server-side applications. Can be any arbitrary",2611],["defer server.Close()",14598],["package server",6981],["server := httptest.NewServer(handler)",5123],["server.ServeHTTP(recorder, request)",4521],["server := DockerServer{}",2770],["// empty value appearing in NullFields will be sent to the server as",3833],["server.buildMuxer()",3392],["defer server.Terminate(t)",3709]],"useCount":440520},{"word":"service","context":[["// newClient creates, initializes and returns a new service client instance.",2270],["// A service error occurred",13362],["package service",3428],["\"github.com/aws/aws-sdk-go/service/ec2\"",1935],["err := service.client.Call(\"\", request, response)",2008],["service.Handlers.Sign.PushBack(v4.Sign)",2216],["service.Initialize()",2229],["//The service client's operations are safe to be used concurrently.",2258],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["op := &service.Operation{",3192]],"useCount":411194},{"word":"services","context":[["// More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",426],["return services, nil",535],["// load balancing pools of all matching services.",635],["ResourceServices ResourceName = \"services\"",650],["\"services\": M{",651],["// ServiceList holds a list of services.",725],["// View and manage your data across Google Cloud Platform services",922],["for _, service := range services {",936],["Resource(\"services\").",944],["package services",1009]],"useCount":80784},{"word":"session","context":[["session.Close()",1333],["defer session.Close()",17293],["coll := session.DB(\"mydb\").C(\"mycoll\")",6299],["session, err := mgo.Dial(\"localhost:40001\")",6075],["\"github.com/aws/aws-sdk-go/aws/session\"",1681],["return session",1832],["sess := session.New()",1839],["sess, err := session.NewSession()",5278],["fmt.Println(\"failed to create session,\", err)",5256],["svc := ec2.New(session.New())",2581]],"useCount":216445},{"word":"set","context":[["set[k] = true",1827],["// set headers",1788],["Expect(set.Val()).To(Equal(\"OK\"))",1002],["return fmt.Errorf(\"No ID is set\")",773],["t.Errorf(\"short name not set\")",856],["t.Errorf(\"main name not set\")",856],["// set.",896],["set := flag.NewFlagSet(\"test\", 0)",1007],["Expect(set.Err()).NotTo(HaveOccurred())",1016],["\"github.com/juju/utils/set\"",1243]],"useCount":448865},{"word":"sets","context":[["// MaxResults sets the optional parameter \"maxResults\": Maximum count of",1723],["// PageToken sets the optional parameter \"pageToken\": A continuation",1732],["// UserIP sets the optional parameter \"userIp\": IP address of the site",2283],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// MaxResults sets the optional parameter \"maxResults\": Maximum number",3259],["// MaxResults sets the optional parameter \"maxResults\": The maximum",4078],["// Context sets the context to be used in this call's Do method.",4699],["\"k8s.io/kubernetes/pkg/util/sets\"",7294],["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// Context sets the context to be used in this call's Do method. Any",22537]],"useCount":236810},{"word":"shift","context":[["byteLen |= (int(b) & 0x7F) << shift",4334],["if shift >= 64 {",137139],["for shift := uint(0); ; shift += 7 {",155764],["for shift := uint(0); ; shift += 7 {",155764],["msglen |= (int(b) & 0x7F) << shift",42857],["wire |= (uint64(b) & 0x7F) << shift",32162],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["v |= (int(b) & 0x7F) << shift",5834],["valuekey |= (uint64(b) & 0x7F) << shift",5109],["keykey |= (uint64(b) & 0x7F) << shift",5109]],"useCount":617057},{"word":"should","context":[["// This case should never be hit, The SDK should alwsy return an",5138],["// Creating a request object using this method should be used when you want to inject",13378],["// This case should never be hit, The SDK should alwsy return an",5138],["// string assigned to a user, but should not exceed 40 characters.",2611],["// Only positional arguments should remain in args.",2230],["t.Fatal(\"should have error\")",1770],["It(\"should return an error\", func() {",1264],["// variants of this function should be used to provide values for uniform",1168],["// This case should never be hit, the SDK should always return an",6736],["// This case should never be hit, the SDK should always return an",6736]],"useCount":509695},{"word":"since","context":[["t.Fatalf(\"%#v !VerboseProto %#v, since %v\", msg, p, err)",4373],["//    to make nodeMonitorGracePeriod be less than nodeStatusUpdateFrequency, since there",446],["since := daemonTime(c).Unix()",561],["// precedes the time a pod was started, only logs since the pod start will be returned.",663],["t.Fatalf(\"seed = %d, %#v !VerboseProto %#v, since %v\", seed, msg, p, err)",11971],["t.Fatalf(\"%#v !Compare %#v, since %d\", msg, p, c)",889],["// getting updates only after the object has changed since the last",12114],["t.Fatalf(\"%#v !VerboseEqual %#v, since %v\", msg, p, err)",3494],["\"since\":   \"01 Apr 15 01:23+10:00\",",3018],["// Ignore whitespace since that's what were verifying doesn't change stuff",384]],"useCount":102408},{"word":"single","context":[["// of a single uniform variable, and a length of 1 or greater can be used to",584],["// number of items to include in a single response page. The maximum",655],["// EndpointAddress is a tuple that describes single IP address.",594],["// EndpointPort is a tuple that describes a single port.",594],["// The functions Uniform{1|2|3|4}{f|i|ui}v can be used to modify a single",584],["// Container represents a single container that is expected to be run on the host.",561],["// Media specifies the media to upload in a single chunk.",498],["// You can either specify an AWS account ID or optionally a single apos-apos",379],["// ContainerPort represents a network port in a single container.",345],["// DaemonEndpoint contains information about a single Daemon endpoint.",327]],"useCount":83805},{"word":"size","context":[["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["t.Errorf(\"seed = %d, size %v != after marshal proto.Size %v\", seed, size, size3)",2552],["if len(data) != size {",2786],["for i := 0; i < size; i++ {",3139],["if size3 != size {",3507],["if size2 != size {",3507],["size := p.Size()",6004],["data = make([]byte, size)",28307],["t.Errorf(\"seed = %d, size %v != before marshal proto.Size %v\", seed, size, size2)",2552],["size := m.Size()",29946]],"useCount":348405},{"word":"skippy","context":[["if (iNdEx + skippy) > l {",28713],["if skippy < 0 {",27884],["skippy, err := skipGenerated(data[iNdEx:])",11760],["m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)",4124],["skippy, err := skipRpc(data[iNdEx:])",2254],["skippy, err := skipApi(data[iNdEx:])",1958],["index += skippy",1342],["m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)",1332],["if (index + skippy) > l {",1321],["iNdEx += skippy",28713]],"useCount":123131},{"word":"slice","context":[["// key can be either a byte slice, a string, a fmt.Stringer or an",310],["panic(\"parameter pointer must be a slice\")",412],["// values). The length of the provided slice must be a multiple of the number",426],["// key can be either a byte slice or a string.",489],["panic(\"parameter data must be a slice\")",559],["panic(\"parameter pixels must be a slice\")",567],["// variable array. A slice with length 1 should be used if modifying the value",584],["// slice with the values to be loaded into a uniform variable or a uniform",584],["return slice",992],["var yys3Slc = z.DecScratchBuffer() // default slice to decode into",3894]],"useCount":101729},{"word":"so","context":[["* furnished to do so, subject to the following conditions:",332],["// are running so non-running pods cause a timeout for this test.",315],["// be \"ready\" before the test starts, so this is small.",322],["// (newest result first). Use this to sort resources like operations so",326],["// Build a format string so that it will be similar to Sprint",407],["// The following cases will fail, so die now",527],["// not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use",541],["// is included in the response so that the remaining results can be retrieved.",688],["furnished to do so, subject to the following conditions:",1015],["// furnished to do so, subject to the following conditions:",4317]],"useCount":216881},{"word":"some","context":[["// index 2 in this pod). This syntax is chosen only to have some well-defined way of",671],["// out of date by some window of time.",709],["// at some point during pod execution (e.g. due to a pod label update), the",592],["key := etcdtest.AddPrefix(\"/some/key\")",543],["// at some point during pod execution (e.g. due to an update), the system",434],["// some versions of lxc might make this test fail",432],["messageFmt: \"some verbose message: %v\",",401],["Message: \"some verbose message: 1\",",395],["// External ID of the node assigned by some machine database (e.g. a cloud provider)",365],["// TODO: remove unversionedClient when the refactoring is done. Currently some",340]],"useCount":99715},{"word":"sort","context":[["sort.Strings(keys)",3468],["sort.Strings(actualEnv)",615],["import \"sort\"",719],["sort.Sort(intSlice(v2))",720],["sort.Sort(uintSlice(v2))",864],["import sort \"sort\"",922],["import sort \"sort\"",922],["sort.Ints(keys)",1125],["sort.Strings(names)",2073],["\"sort\"",41433]],"useCount":130608},{"word":"source","context":[["Redistribution and use in source and binary forms, with or without",612],["// Use of this source code is governed by a 2-clause",679],["// Source sets the optional parameter \"source\": String to identify the",719],["// Use of this source code is governed by the Apache 2.0",731],["return source",779],["// Use of this source code is governed by an ISC",4711],["//     \"source\": {",815],["// Redistribution and use in source and binary forms, with or without",3435],["* Redistribution and use in source and binary forms, with or without",1643],["source := make(map[string]interface{})",815]],"useCount":167818},{"word":"spec","context":[["SchemaProps: spec.SchemaProps{",110350],["Ref:         spec.MustCreateRef(\"#/definitions/v1.ObjectMeta\"),",1980],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Duration\"),",2091],["\"spec\": {",4704],["Items: &spec.SchemaOrArray{",9724],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.ListMeta\"),",1920],["Schema: &spec.Schema{",11591],["Properties: map[string]spec.Schema{",20467],["Schema: spec.Schema{",20652],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126]],"useCount":362310},{"word":"specific","context":[["// parameter identifies a specific page in the result set that should be",319],["// StatusReasonUnknown means the server has declined to indicate a specific reason.",427],["// A sequence number representing a specific generation of the desired state.",444],["// and allows a Source for provider-specific attributes",592],["// Additional information that cannot be captured in the structured elements and/or any other specific block.",624],["testRequires(c, DaemonIsLinux) // Linux specific test",704],["// Handler defines a specific action that should be taken",716],["// selects a specific revision of this object (as opposed to the latest",804],["// Not applicable on Windows as uses Unix-specific capabilities",1015],["// Not applicable on Windows as uses Unix specific functionality",2299]],"useCount":70059},{"word":"specified","context":[["//     specified at the definition of any field of this type.",726],["// PodSecurityContext, the value specified in SecurityContext takes precedence.",1110],["// specified by location, which should be a value returned by GetUniformLocation.",1010],["// specified.",872],["// Specify the value of a uniform variable for a specified program object",858],["// on behalf of the content owner specified in the parameter value. This",847],["// If none of the following policies is specified, the default one",748],["// exist than the specified MaxRecords value, a pagination token called a marker",736],["// If the affinity requirements specified by this field cease to be met",730],["// If the affinity requirements specified by this field are not met at",730]],"useCount":286902},{"word":"specify","context":[["//  You must specify at least one of the parameters.",275],["// stream the log. Set 'follow' to false and specify the number of lines (e.g.",296],["// Should this value be exported.  Export strips fields that a user can not specify.",301],["// Note that the length constraint applies only to the ARN. If you specify only",335],["// Examples: For volume /dev/sda1, you specify the partition as \"1\".",360],["// PageToken sets the optional parameter \"pageToken\": Token to specify",361],["// You can either specify an AWS account ID or optionally a single apos-apos",379],["// specify, the IsTruncated response element is true.",494],["// 0. The value \"NONE\" can be used to specify unlimited duration.",638],["// request. Bucket owners need not specify this parameter in their requests.",788]],"useCount":63997},{"word":"sql","context":[["if err == sql.ErrNoRows {",2133],["db, err := sql.Open(\"sqlite3\", tempFilename)",495],["if err != nil && err != sql.ErrNoRows {",549],["var db *sql.DB",551],["var rows *sql.Rows",590],["\"github.com/cockroachdb/cockroach/sql/parser\"",1069],["package sql",1924],["\"database/sql/driver\"",2104],["_ \"github.com/go-sql-driver/mysql\"",2196],["\"database/sql\"",11064]],"useCount":104647},{"word":"sqlpt","context":[["sqlDollar = sqlS[sqlpt-0 : sqlpt+1]",3055],["sqlDollar = sqlS[sqlpt-1 : sqlpt+1]",8381],["sqlDollar = sqlS[sqlpt-0 : sqlpt+1]",3055],["sqlDollar = sqlS[sqlpt-2 : sqlpt+1]",6248],["sqlDollar = sqlS[sqlpt-4 : sqlpt+1]",2979],["sqlDollar = sqlS[sqlpt-2 : sqlpt+1]",6248],["sqlDollar = sqlS[sqlpt-3 : sqlpt+1]",7779],["sqlDollar = sqlS[sqlpt-3 : sqlpt+1]",7779],["sqlDollar = sqlS[sqlpt-4 : sqlpt+1]",2979],["sqlDollar = sqlS[sqlpt-1 : sqlpt+1]",8381]],"useCount":67613},{"word":"src","context":[["defer src.Close()",552],["tg.tempDir(\"src\")",364],["src := v.Args[1]",380],["\"github.com/coreos/rkt/Godeps/_workspace/src/github.com/appc/spec/schema/types\"",435],["return src",476],["data, err := json.Marshal(src)",544],["Sources: []influxql.Source{&influxql.Measurement{Name: \"src\"}},",578],["if src == nil {",689],["context \"github.com/ipfs/go-ipfs/Godeps/_workspace/src/golang.org/x/net/context\"",791],["\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"",909]],"useCount":188538},{"word":"srv","context":[["Server:     srv,",4594],["defer srv.mu.Unlock()",766],["defer srv.Stop()",789],["defer srv.Shutdown()",825],["srv.mu.Lock()",856],["testutil.WaitForLeader(t, srv.agent.RPC, \"dc1\")",881],["if err := srv.agent.RPC(\"Catalog.Register\", args, &out); err != nil {",985],["srv := &EtcdServer{",1252],["defer srv.agent.Shutdown()",1413],["defer srv.Close()",2546]],"useCount":99038},{"word":"st","context":[["func(c *gc.C, st *State) changeTestCase {",950],["return st",649],["st.Lock()",841],["}, func(st *serverTester) {",905],["st.Close()",920],["hf := st.wantHeaders()",972],["st := newServerTester(t, func(w http.ResponseWriter, r *http.Request) {",1055],["st.greet()",1127],["st.writeHeaders(HeadersFrameParam{",2110],["defer st.Close()",4246]],"useCount":166402},{"word":"stack","context":[["/* there is no state on the stack with an error shift ... abort */",300],["stack := frame.OperandStack()",1286],["_ = stack",702],["stack := p.vstack[len(p.vstack)-1]",701],["// The stack ID.",634],["/* put a state and value onto the stack */",300],["// Pop next point off the stack.",473],["func(s *stack) error {",441],["package stack",425],["stack.push(new(big.Int))",364]],"useCount":91203},{"word":"start","context":[["start := 0",1321],["start = time.Now()",903],["elapsed := time.Since(start)",929],["start := time.Now()",12562],["iNdEx = start + next",2193],["var start int = iNdEx",2193],["\"create\", \"start\", \"inspect_container\",",1438],["return aws.MarshalXML(v, e, start)",1202],["c.Fatalf(\"Could not start daemon with busybox: %v\", err)",939],["start = i",782]],"useCount":258027},{"word":"state","context":[["actual := strings.TrimSpace(state.String())",3368],["\"github.com/juju/juju/state\"",4908],["state, err := ctx.Apply()",4204],["state = fflib.FFParse_want_colon",2666],["state.Put(\"error\", err)",1962],["<no state>",1925],["package state",1910],["machine, err := s.State.AddMachine(\"quantal\", state.JobHostUnits)",1731],["state = fflib.FFParse_after_value",1637],["// current state by calling UseProgram.",1594]],"useCount":454535},{"word":"stats","context":[["stats := mgo.GetStats()",1934],["return stats",1120],["return stats, nil",831],["return stats, err",482],["// Stats returns stats from the input iterator.",639],["c.Assert(stats.SocketsInUse, Equals, 0)",648],["package stats",789],["if stats == nil {",798],["stats = mgo.GetStats()",912],["if stats != nil {",984]],"useCount":82880},{"word":"status","context":[["// non-nil. Any non-2xx status code is an error. Response headers are in",1307],["return status",1447],["r.EncodeString(codecSelferC_UTF81234, string(\"status\"))",1583],["case \"status\":",2001],["Status string `json:\"status,omitempty\"`",2520],["// status code is an error. Response headers are in either",7314],["\"status\": {",2654],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",3126],["// non-2xx status code is an error. Response headers are in either",5221],["// Any non-2xx status code is an error. Response headers are in either",1236]],"useCount":430134},{"word":"stdout","context":[["OutputStream: stdout,",492],["cmd.Stdout, cmd.Stderr = &stdout, &stderr",524],["cmd.Stdout = &stdout",600],["if stdout != nil {",640],["cmd.Stdout = stdout",609],["var stdout, stderr bytes.Buffer",1886],["stdout, err := cmd.StdoutPipe()",1388],["defer stdout.Close()",813],["var stdout bytes.Buffer",804],["Stdout: &stdout,",695]],"useCount":70425},{"word":"stmt","context":[["defer stmt.Close()",2948],["stmt: &influxql.SelectStatement{",2112],["stmt.Name = ident",335],["stmt: &influxql.ShowTagKeysStatement{",370],["messages = append(messages, influxql.ReadOnlyWarning(stmt.String()))",380],["stmt := `",383],["sqlVAL.stmt = nil",503],["return stmt",842],["stmt.Close()",890],["return stmt, nil",2049]],"useCount":75207},{"word":"stop","context":[["return thrift.PrependError(\"write field stop error: \", err)",1514],["return thrift.PrependError(\"write struct stop error: \", err)",1514],["\"github.com/cockroachdb/cockroach/util/stop\"",1493],["// calling the \"fn\" function with the response data for each page. To stop",1419],["stop := make(chan struct{})",949],["return fmt.Errorf(\"write field stop error: %s\", err)",830],["return fmt.Errorf(\"write struct stop error: %s\", err)",830],["close(stop)",758],["case <-stop:",1646],["stopper := stop.NewStopper()",3964]],"useCount":84623},{"word":"storage","context":[["storage := map[string]rest.Storage{}",2539],["storage[\"simple\"] = &simpleStorage",2291],["\"github.com/juju/juju/storage\"",986],["// Implements storage.Interface.",1204],["storage, fakeClient := newStorage(t)",1399],["storage, server := newStorage(t)",1430],["package storage",4811],["\"github.com/cockroachdb/cockroach/storage/engine\"",1461],["\"k8s.io/kubernetes/pkg/storage\"",1729],["handler := handle(storage)",1710]],"useCount":196418},{"word":"store","context":[["defer store.Unlock()",556],["package store",2566],["// to store v and returns a pointer to it.",599],["store := &etcdgeneric.Etcd{",563],["store.Lock()",617],["store := cache.NewStore(cache.MetaNamespaceKeyFunc)",652],["// TODO: Decide whether to store these separately or with the object they apply to.",704],["Response{Event: &store.Event{}},",1105],["defer store.Close()",1296],["store, _, stopper := createTestStore(t)",1146]],"useCount":210423},{"word":"str","context":[["if len(str) > 0 {",1432],["return str",5034],["var str string",1632],["t.Error(str)",1205],["str := \"\"",1075],["if len(str) == 0 {",471],["return str, nil",577],["if str == \"\" {",686],["sqlVAL.str = sqlS[sqlpt-0].str",854],["sqlVAL.str = sqlS[sqlpt-0].str",854]],"useCount":106850},{"word":"strconv","context":[["\"strconv\"",103887],["b = strconv.AppendInt(b, int64(t.Day()), 10)",5570],["b = strconv.AppendInt(b, int64(t.Minute()), 10)",5504],["s := strconv.FormatFloat(math.Abs(num), 'f', int(v), 64)",5108],["b = strconv.AppendInt(b, int64(t.Year()), 10)",4840],["b = strconv.AppendInt(b, int64(t.Second()), 10)",4128],["\"profileId\": strconv.FormatInt(c.profileId, 10),",3820],["b = strconv.AppendInt(b, int64(t.Hour()), 10)",3536],["vv := strconv.Itoa(v.(int))",3469],["vv := strconv.FormatBool(v.(bool))",3194]],"useCount":289781},{"word":"stream","context":[["v.Set(\"stream\", \"1\")",355],["w.Header().Set(\"Content-Type\", \"application/octet-stream\")",374],["stream: st,",376],["return stream, nil",408],["// stream.",480],["stream",485],["if err := stream.RecvMsg(m); err != nil {",640],["defer stream.Close()",839],["// data between stream (representing the user's local connection on their",365],["stream.Close()",359]],"useCount":129392},{"word":"string","context":[["Type:        []string{\"string\"},",23051],["// String returns the string representation",113951],["// GoString returns the string representation",113945],["googleapi.Expand(req.URL, map[string]string{",44831],["googleapi.Expand(req.URL, map[string]string{",44831],["ForceSendFields []string `json:\"-\"`",39509],["p.p = make(map[string]interface{})",32934],["Kind string `json:\"kind,omitempty\"`",30419],["Type:        []string{\"string\"},",23051],["//       \"type\": \"string\"",149384]],"useCount":7762689},{"word":"stringLen","context":[["return 4 + stringLen[v.sizeClass()] + 8*len(s)",22],["if stringLen == 0 || stringLen > len(d) {",17],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["var stringLen uint64",22703],["intStringLen := int(stringLen)",21411],["postIndex := iNdEx + int(stringLen)",801],["postIndex := index + int(stringLen)",483],["if stringLen < 0 {",189],["b.Write(uint(len(s)), stringLen[v.sizeClass()])",22],["var stringLen = [3]int{8, 16, 16}",22]],"useCount":68443},{"word":"strings","context":[["\"strings\"",225222],["id := strings.TrimSpace(out)",4703],["line = strings.TrimSpace(line)",1662],["return strings.Join(s, \"\")",8387],["actual := strings.TrimSpace(state.String())",3368],["var _ = strings.Replace",3059],["cannonicalName := strings.Replace(name, \"\\\\\", \"/\", -1)",2708],["import \"strings\"",2532],["out = strings.TrimSpace(out)",1976],["actual := strings.TrimSpace(plan.String())",1778]],"useCount":807843},{"word":"struct","context":[["var tests = []struct {",5553],["type User struct {",4655],["done := make(chan struct{})",4483],["_ struct{} `type:\"structure\"`",70669],["tests := []struct {",52457],["type Service struct {",5858],["type Client struct {",6191],["type Config struct {",11935],["testCases := []struct {",10742],["cases := []struct {",7066]],"useCount":1812950},{"word":"structure","context":[["// Response structure.",2808],["SDKShapeTraits bool `type:\"structure\"`",68537],["// Status is a structure describing current status of a job.",247],["_ struct{} `type:\"structure\"`",70669],["// Request structure.",2807],["Owner *Owner `type:\"structure\"`",408],["WorkflowType *WorkflowType `locationName:\"workflowType\" type:\"structure\" required:\"true\"`",374],["// structure.",317],["// structure by setting default values and implementing any backwards-compatibility",313],["DBInstance *DBInstance `type:\"structure\"`",272]],"useCount":202814},{"word":"success","context":[["if !success {",1890],["if success {",951],["t.Errorf(\"Expected success, got: %v\", err)",1047],["success = false",1061],["success := false",1079],["return success",1111],["success = true",1541],["Ω(success).Should(BeFalse())",1623],["} else if !query.success() {",3906],["t.Errorf(\"expected success: %v\", errs)",4335]],"useCount":68747},{"word":"support","context":[["testRequires(c, DaemonIsLinux) // Windows does not support ARG",494],["// Go support for Protocol Buffers - Google's data interchange format",1229],["// FIXME: Requires compiler support (has immediate)",1227],["// not support the use of -u",570],["// The volume plugin must support Deletion.",457],["// Windows does not support this functionality",380],["// support.",366],["//  - should we support nsenter + socat on the host? (current impl)",365],["//  - should we support nsenter + socat in a container, running with elevated privs and --pid=host?",365],["// The volume plugin must support Recycling.",457]],"useCount":68471},{"word":"supported","context":[["// Must be a filesystem type supported by the host operating system.",2721],["t.Skipf(\"not supported on %q\", runtime.GOOS)",440],["exp:     `{\"error\":\"error parsing query: mixing aggregate and non-aggregate queries is not supported\"}`,",456],["// atomic field types are supported (string, number, boolean). The",565],["t.Skipf(\"not supported on %s\", runtime.GOOS)",795],["// supported.",790],["// Protocol defines network protocols supported for things like conatiner ports.",508],["return \"\", \"\", fmt.Errorf(\"field label not supported: %s\", label)",1368],["// This parameter is not currently supported.",788],["// Tip: Ensure that the filesystem type is supported by the host operating system.",720]],"useCount":66979},{"word":"sure","context":[["// make sure that the content is well-formed json.",289],["// Make sure that -f is ignored and that we don't use the Dockerfile",246],["// used by kubelet. Since NewMainKubelet expects a client interface, we need to make sure we are not passing",241],["// Make sure to check the error on Close.",233],["// Make sure account was debited properly",223],["// as then you are sure you have configured all required params",4924],["// ValidateEndpointsUpdate tests to make sure an endpoints update can be applied.",215],["// List the pods, making sure we observe all the replicas.",314],["// Test to make sure that when we use -e on env vars that are",370],["// Make sure the Pods are in the reverse order of creation time.",399]],"useCount":61247},{"word":"svc","context":[["svc := ec2.New(nil)",4408],["svc := ec2.New(session.New())",2581],["svc := iam.New(nil)",1494],["svc.Endpoint = \"https://test\"",1384],["svc := rds.New(nil)",852],["return svc",2753],["svc := ec2.New(sess)",856],["svc.Handlers.Sign.PushBackNamed(v4.SignRequestHandler)",1064],["svc.Handlers.Sign.PushBack(v4.Sign)",1189],["svc := s3.New(nil)",1300]],"useCount":144235},{"word":"switch","context":[["switch c {",4243],["switch t {",4766],["switch runtime.GOOS {",4870],["switch err {",5104],["switch fieldNum {",30431],["switch {",75967],["switch op {",3899],["} // end switch yys3",3894],["switch yys3 {",3894],["switch n.Op {",3471]],"useCount":508553},{"word":"sync","context":[["wg := &sync.WaitGroup{}",1764],["mu      sync.Mutex",1075],["import \"sync\"",1619],["mu sync.Mutex",1846],["wg := sync.WaitGroup{}",3786],["sync.RWMutex",5683],["sync.Mutex",8636],["\"sync/atomic\"",12298],["var wg sync.WaitGroup",15187],["\"sync\"",81312]],"useCount":255791},{"word":"syscall","context":[["err = syscall.EINVAL",2227],["return nil, syscall.EINVAL",437],["return 0, syscall.EINVAL",509],["var stat syscall.Stat_t",519],["msg := nl.NewIfInfomsg(syscall.AF_UNSPEC)",561],["_, err := req.Execute(syscall.NETLINK_ROUTE, 0)",570],["import \"syscall\"",1290],["return syscall.EINVAL",1473],["package syscall",1792],["\"syscall\"",24805]],"useCount":149271},{"word":"system","context":[["\"github.com/docker/docker/pkg/system\"",1202],["// Must be a filesystem type supported by the host operating system.",2721],["package system",1191],["// Tip: Ensure that the filesystem type is supported by the host operating system.",720],["// Lifecycle describes actions that the management system should take in response to container lifecycle",716],["// NodePending means the node has been created/added by the system, but not configured.",681],["// NamespaceActive means the namespace is available for use in the system",608],["// terminated in a failure (exited with a non-zero exit code or was stopped by the system).",588],["// PodPending means the pod has been accepted by the system, but one or more of the containers",588],["// Populated by the system.",2256]],"useCount":94638},{"word":"t","context":[["require.NoError(t, err)",22318],["t.Fail()",24571],["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Fatal(err)",320011],["t.Error(err)",70002],["t.Fatalf(\"err: %v\", err)",35496],["t.Fatalf(\"err: %s\", err)",35495],["assert.NoError(t, err)",27740],["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Parallel()",24732]],"useCount":5088720},{"word":"table","context":[["<table>",559],["for name, item := range table {",580],["table := map[string]struct {",619],["// _bindata is a table, holding each asset generator, mapped to its name.",738],["</table>",1442],["for _, item := range table {",2211],["table := []struct {",3049],["table.Print()",459],["return table",508],["table.Render()",518]],"useCount":124786},{"word":"tag","context":[["switch tag {",1969],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["for _, tag := range tags {",1163],["// where Purpose is X, see the tag:key=value filter.",931],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// key Purpose (regardless of what the tag's value is), and the tag value X",931],["// key Purpose (regardless of what the tag's value is), and the tag value X",931],["if tag != \"\" {",1100],["if tag == \"\" {",1724]],"useCount":224196},{"word":"tags","context":[["return tags",703],["tags {",2503],["} `json:\"tags,omitempty\"`",1916],["for _, tag := range tags {",1163],["var tags []string",971],["tags := map[string]string{",843],["return tags, nil",589],["tags := make(map[string]string)",610],["// A list of tags.",675],["\"tags\": tagsSchema(),",762]],"useCount":100932},{"word":"target","context":[["// Required: iSCSI target lun number",391],["// Required: iSCSI target portal",391],["// The contents of the target Secret's Data field will be presented in a volume",367],["// Required:  target iSCSI Qualified Name",391],["// target=\"_blank) in the Amazon CloudSearch Developer Guide.",363],["a0: target.c(),",448],["//   (*fnptr)(target, pname, params);",521],["if target == nil {",546],["target := &ret",10673],["if err := json.NewDecoder(res.Body).Decode(target); err != nil {",10685]],"useCount":140955},{"word":"task","context":[["task: marathon.Task{",246],["if task == nil {",806],["if err = task.WaitTaskCompletion(); err != nil {",267],["for _, task := range tasks {",594],["if err := task.Run(); err != nil {",435],["task := &structs.Task{",359],["package task",339],["// The ID of the DecisionTaskCompleted event corresponding to the decision task",330],["// For more information about setting task priority, see Setting Task Priority",264],["return task, nil",253]],"useCount":68837},{"word":"tc","context":[["tc.runTest(t)",1545],["for i, tc := range testCases {",1609],["for _, tc := range cases {",1985],["for _, tc := range testCases {",2725],["tc.Start(t)",3966],["defer tc.Stop()",4444],["tc := testCase{",1429],["for i, tc := range cases {",931],["for _, tc := range tests {",716],["tc := testContext{}",4233]],"useCount":145450},{"word":"tcp","context":[["protocol = \"tcp\"",1282],["case \"tcp\", \"tcp4\", \"tcp6\":",529],["protocol = \"/tcp\"",550],["case \"tcp\":",988],["{Name: \"TEST_PORT_8083_TCP_PROTO\", Value: \"tcp\"},",958],["{Name: \"TEST_PORT_8083_TCP\", Value: \"tcp://1.2.3.3:8083\"},",958],["{Name: \"TEST_PORT\", Value: \"tcp://1.2.3.3:8083\"},",958],["conn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())",853],["Protocol:  \"tcp\",",754],["l, err := net.Listen(\"tcp\", \"127.0.0.1:0\")",608]],"useCount":69238},{"word":"template","context":[["\"text/template\"",8241],["\"html/template\"",7918],["\"template\": {",1221],["package template",1144],["case \"template\":",817],["template := state.MachineTemplate{",817],["r.EncodeString(codecSelferC_UTF81234, string(\"template\"))",626],["// PodTemplateSpec describes the data a pod should have when created from a template",585],["// PodTemplate describes a template for creating copies of a predefined pod.",584],["templateapi \"github.com/openshift/origin/pkg/template/api\"",489]],"useCount":141438},{"word":"terraform","context":[["package terraform",1327],["\"github.com/hashicorp/terraform/helper/schema\"",4300],["\"github.com/hashicorp/terraform/helper/hashcode\"",1086],["State: &terraform.InstanceState{",1574],["Diff: &terraform.InstanceDiff{",2249],["Attributes: map[string]*terraform.ResourceAttrDiff{",2492],["\"github.com/hashicorp/terraform/terraform\"",3861],["\"github.com/hashicorp/terraform/terraform\"",3861],["\"github.com/hashicorp/terraform/helper/resource\"",4210],["return func(s *terraform.State) error {",5208]],"useCount":61563},{"word":"test","context":[["for _, test := range tests {",20305],["for i, query := range test.queries {",2679],["test(`",2776],["test.addQueries([]*Query{",3314],["package test",3316],["test := NewTest(\"db0\", \"rp0\")",3328],["c.Assert(err, test.IsNil)",3451],["if err := test.init(s); err != nil {",3591],["t.Fatalf(\"test init failed: %s\", err)",3640],["for i, test := range tests {",8257]],"useCount":858597},{"word":"testing","context":[["package testing",1978],["func Test(t *testing.T) {",1982],["b.RunParallel(func(pb *testing.PB) {",2064],["func TestMain(m *testing.M) {",2413],["coretesting \"github.com/juju/juju/testing\"",3039],["\"github.com/juju/juju/testing\"",3174],["jc \"github.com/juju/testing/checkers\"",8768],["import \"testing\"",10339],["if testing.Short() {",11539],["\"testing\"",185840]],"useCount":970464},{"word":"tests","context":[["tests.Assert(t, err == nil)",1553],["tests := []struct {",52457],["for _, tt := range tests {",22910],["for _, test := range tests {",20305],["for i, tt := range tests {",10529],["for i, test := range tests {",8257],["var tests = []struct {",5553],["tests := map[string]struct {",2214],["t.Logf(\"Running %d tests\", len(tests))",1686],["t.Logf(\"Running %d tests\", len(tests))",1686]],"useCount":242093},{"word":"text","context":[["return text",763],["\"text/template\"",8241],["\"text/tabwriter\"",3456],["w.Header().Set(\"Content-Type\", \"text/plain\")",1154],["w.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")",865],["text string",544],["out.Write(text)",743],["w.Header().Set(\"Content-Type\", \"text/html\")",718],["w.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\")",672],["// CreationTimestamp: [Output Only] Creation timestamp in RFC3339 text",578]],"useCount":128133},{"word":"tg","context":[["defer tg.cleanup()",6959],["tg := testgo(t)",6959],["tg.setenv(\"GOPATH\", tg.path(\".\"))",1848],["tg.setenv(\"GOPATH\", tg.path(\".\"))",1848],["tg.parallel()",1496],["tg.makeTempdir()",1221],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["tg.setenv(\"GOPATH\", filepath.Join(tg.pwd(), \"testdata\"))",927],["tg.must(err)",555],["tg.tempDir(\"src\")",364]],"useCount":74319},{"word":"than","context":[["// exist than the specified MaxRecords value, a pagination token called a marker",736],["// than an interface. There is no way to construct a list+watcher using resource name.",561],["expected := \"When using ADD with more than one source file, the destination must be a directory and end with a /\"",581],["// is larger than the size of the uniform variable array, values for all",584],["// element of a different type than the one provided in the request, the value",606],["// the Data field must be less than MaxSecretSize bytes.",626],["// DNS_SUBDOMAIN:  This is a string, no more than 253 characters long, that conforms",722],["// DNS_LABEL:  This is a string, no more than 63 characters long, that conforms",726],["// The duration is specified in seconds; an integer greater than or equal to",726],["// If 'warn' has a value it means the job is running longer than the configured",1437]],"useCount":121547},{"word":"that","context":[["return fmt.Errorf(\"Field2 this(%v) Not Equal that(%v)\", this.Field2, that1.Field2)",1170],["if that == nil {",24200],["return fmt.Errorf(\"that == nil && this != nil\")",10119],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["// Header returns an http.Header that can be modified by the caller to",3239],["// This is a compile-time assertion to ensure that this generated file",3226],["return fmt.Errorf(\"Field1 this(%v) Not Equal that(%v)\", this.Field1, that1.Field1)",1720],["this.Field1 = that.GetField1()",1536],["this.Field2 = that.GetField2()",1284],["// GCEPersistentDisk represents a GCE Disk resource that is attached to a",1234]],"useCount":1322523},{"word":"that1","context":[["that1 = &that2",20743],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["if this.Field2 != nil && that1.Field2 != nil {",2021],["} else if that1.Field2 != nil {",2021],["if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {",2478],["if this.Field1 != nil && that1.Field1 != nil {",2873],["} else if that1.Field1 != nil {",2873],["if *this.Field1 != *that1.Field1 {",2873],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["if that1 == nil {",24182]],"useCount":322545},{"word":"the","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["// String returns the string representation",113951],["// GoString returns the string representation",113945],["// non-interface field appearing in ForceSendFields will be sent to the",38333],["// Pretty-print the response data.",34269],["// Context sets the context to be used in this call's Do method. Any",22537],["// pending HTTP request will be aborted if the provided context is",22537],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Validate inspects the fields of the type to determine if they are valid.",18383]],"useCount":8535644},{"word":"them","context":[["// them for equality.",322],["// values assigned to them by a call to Uniform* until the next successful",1594],["// If none of them is specified, the default one is ContainerStateWaiting.",709],["// collect all of the relevant ports and export them.",475],["// not just take the node list and choose the first of them. Depending on the",396],["// FIXME: --viz and --tree are deprecated. Remove them in a future version.",365],["// worker runs a worker thread that just dequeues items, processes them, and marks them done.",358],["// worker runs a worker thread that just dequeues items, processes them, and marks them done.",358],["// them.",351],["// If specified, these secrets will be passed to individual puller implementations for them to use.  For example,",342]],"useCount":70722},{"word":"then","context":[["// kubelet's host machine and then exposed to the pod.",3083],["// kubelet will then refuse to launch the pod.",365],["then: []string{",547],["// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",626],["Param(ws.QueryParameter(\"pretty\", \"If 'true', then the output is pretty printed.\")).",635],["// first, if it is available, then fall back on the default (as",669],["//then",685],["// then AssetDir(\"data\") would return []string{\"foo.txt\", \"img\"}",698],["// then",827],["// as then you are sure you have configured all required params",4924]],"useCount":136168},{"word":"there","context":[["// The token to use when requesting the next set of items. If there are no additional",458],["// TODO: this is brittle; there's no guarantee the scheduler will have run in 10 seconds.",459],["// return the next page of results. This field will be empty if there",510],["// than the MaxItems number of results even when there are more results available.",550],["// Note that IAM might return fewer results, even when there are more results",572],["// When there are multiple elements, the lists of nodes corresponding to each",592],["// panics if there is an error in the config.",612],["// when there are no more results to return.",638],["// A flag that indicates whether there are more items to return. If your results",724],["// If there is an error, it will be of type *PathError.",833]],"useCount":132385},{"word":"these","context":[["It has these top-level messages:",4689],["// Always reference these packages, just in case the auto-generated code",3048],["// SchemeGroupVersion is group version used to register these objects",770],["// WriteToRequest writes these params to a swagger request",767],["// TODO: pass structured data to these actions, and document that data here.",716],["// TODO: Decide whether to store these separately or with the object they apply to.",704],["// with a container exit code of 0, and the system is not going to restart any of these containers.",586],["// these. The f variants should be used to provide values for uniform",584],["// variables of type float, vec2, vec3, vec4, or arrays of these. Either the",584],["It is generated from these files:",4689]],"useCount":65820},{"word":"they","context":[["// they are on one line! For multiple line or blocks that you want to ignore use ---.",427],["// The parameters which are pointers indicate they are optional.  Passing nil",378],["// Do not allow new pods to schedule onto the node unless they tolerate the taint,",408],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// Reference proto, json, and math imports to suppress error if they are not otherwise used.",345],["//   1. If the containers were removed immediately after they died, kubelet",277],["// do not allow pods to start on Kubelet unless they tolerate the taint,",272],["// link operation occurs on the program object, when they are once again",1594],["// Validate inspects the fields of the type to determine if they are valid.",18383],["// TODO: Decide whether to store these separately or with the object they apply to.",704]],"useCount":99995},{"word":"this","context":[["} else if this == nil {",24188],["if this == nil {",80648],["return this",23297],["// Context sets the context to be used in this call's Do method. Any",22537],["// Creating a request object using this method should be used when you want to inject",13378],["if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {",11834],["return fmt.Errorf(\"that == nil && this != nil\")",10119],["`XXX_unrecognized:` + fmt.Sprintf(\"%v\", this.XXX_unrecognized) + `,`,",5746],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710],["return fmt.Errorf(\"XXX_unrecognized this(%v) Not Equal that(%v)\", this.XXX_unrecognized, that1.XXX_unrecognized)",5710]],"useCount":1883645},{"word":"time","context":[["popr := math_rand.New(math_rand.NewSource(time.Now().UnixNano()))",16425],["\"time\"",232547],["seed := time.Now().UnixNano()",14884],["start := time.Now()",12562],["now := time.Now()",10458],["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(100 * time.Millisecond)",6762],["time.Sleep(time.Second)",6699],["time.Sleep(time.Second)",6699],["time.Sleep(1 * time.Second)",6076]],"useCount":1466173},{"word":"timeout","context":[["// timeout, the resonse will contain the jobid of the running async job",1437],["case <-time.After(timeout):",1871],["case <-timeout:",3387],["timeout: timeout,",627],["if timeout == 0 {",666],["for start := time.Now(); time.Since(start) < timeout; time.Sleep(poll) {",679],["t.Fatalf(\"timeout\")",972],["timeout time.Duration",1164],["b, warn, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1222],["b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)",1356]],"useCount":139429},{"word":"timestamp","context":[["// An RFC3339 timestamp from which to show logs. If this value",410],["Timestamp: timestamp,",701],["// CreationTimestamp is a timestamp representing the server time when this object was",601],["// CreationTimestamp: [Output Only] Creation timestamp in RFC3339 text",578],["// CreationTimestamp: Creation timestamp in RFC3339 text format (output",466],["timestamp := time.Now()",310],["// timestamp using orderBy=\"creationTimestamp desc\". This sorts results",326],["CreateDate *time.Time `type:\"timestamp\" timestampFormat:\"iso8601\"`",384],["timestamp time.Time",391],["// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line",410]],"useCount":86126},{"word":"tls","context":[["tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,",456],["TLSClientConfig: &tls.Config{",985],["\"crypto/tls\"",13378],["TLSClientConfig: &tls.Config{InsecureSkipVerify: true},",879],["tlsConfig := &tls.Config{",826],["Certificates: []tls.Certificate{cert},",702],["package tls",576],["TLSConfig: &tls.Config{",513],["MinVersion: tls.VersionTLS10,",510],["tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,",466]],"useCount":67247},{"word":"tmp","context":[["c.Fatalf(\"failed to list contents of tmp dir: %s\", err)",420],["defer os.RemoveAll(tmp)",1784],["ADD . /tmp/",587],["return tmp",467],["var tmp Node",423],["COPY * /tmp/",306],["RUN ls /tmp/.dockerignore`",289],["COPY file*.txt /tmp/",280],["if _, err = rr.Read(tmp[:1]); err != nil {",273],["plugMgr.InitPlugins(ProbeVolumePlugins(), volume.NewFakeVolumeHost(\"/tmp/fake\", nil, nil))",380]],"useCount":74938},{"word":"to","context":[["// Fields allows partial responses to be retrieved.",33360],["// to execute the request.",13378],["// Creating a request object using this method should be used when you want to inject",13378],["// used to include empty fields in Patch requests.",38333],["// Validate inspects the fields of the type to determine if they are valid.",18383],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Print the error, cast err to awserr.Error to get the Code and",19219],["// Context sets the context to be used in this call's Do method. Any",22537],["// Fields allows partial responses to be retrieved. See",23003],["// non-interface field appearing in ForceSendFields will be sent to the",38333]],"useCount":4066266},{"word":"tok","context":[["if tok != fflib.FFTok_string && tok != fflib.FFTok_null {",592],["return fs.WrapErr(fmt.Errorf(\"cannot unmarshal %s into Go value for string\", tok))",582],["Data: p.tok.Data,",711],["switch p.tok.Type {",996],["switch p.tok.DataAtom {",1189],["switch tok {",1240],["if tok == fflib.FFTok_null {",1362],["tok, pos, lit := p.scanIgnoreWhitespace()",1550],["switch p.tok {",2319],["if tok != fflib.FFTok_string && tok != fflib.FFTok_null {",592]],"useCount":84810},{"word":"token","context":[["ctxt.build(token);",832],["\"go/token\"",6041],["fset := token.NewFileSet()",2032],["// Ignore the token.",1888],["request.Header.Set(\"Authorization\", \"bearer \"+s.token.GetValue())",1289],["Type:     \"token\",",1250],["if token == \"\" {",1005],["return token",884],["return token, nil",796],["// token, used to page through large result sets. To get the next page",793]],"useCount":283367},{"word":"top","context":[["dockerCmd(c, \"run\", \"-d\", \"--name\", name, \"busybox\", \"top\")",207],["dockerCmd(c, \"run\", \"-d\", \"--net=host\", \"--name=first\", \"busybox\", \"top\")",212],["out, _ := dockerCmd(c, \"run\", \"-d\", \"busybox\", \"top\")",1197],["It has these top-level messages:",4689],["top--",482],["goto top",435],["dockerCmd(c, \"run\", \"-d\", \"--net=testnetwork1\", \"--name=first\", \"busybox\", \"top\")",348],["if top != nil {",283],["cmd := exec.Command(dockerBinary, \"run\", \"-d\", \"busybox\", \"top\")",263],["dockerCmd(c, \"run\", \"-d\", \"--net=testnetwork1\", \"--name=second\", \"busybox\", \"top\")",348]],"useCount":65075},{"word":"total","context":[["total++",506],["total += n",515],["return total, err",611],["return total",644],["total += len(dAtA)",697],["total += len(data)",2698],["total += pops[i%1000].Size()",3371],["total += len(datas[i%10000])",3386],["b.SetBytes(int64(total / b.N))",10167],["total := 0",11395]],"useCount":72081},{"word":"tr","context":[["defer tr.CloseIdleConnections()",1794],["c := &Client{Transport: tr}",1735],["tr := &http.Transport{",1496],["</td></tr>",1314],["<tr >",1267],["tr := &Transport{}",1065],["tr := &Transport{",1004],["hdr, err := tr.Next()",818],["</tr>",4512],["<tr>",2452]],"useCount":68149},{"word":"transaction","context":[["transaction, _ := buildTestTx(t)",141],["// TODO: This requires a transaction, either both node status is updated",692],["// transaction.",672],["//   - ErrTxClosed if the transaction has already been closed",204],["Transaction string `json:\"transaction,omitempty\"`",199],["// Ensure transaction state is valid.",180],["type transaction struct {",177],["// Save new device id into transaction",172],["t.Errorf(\"expected transaction status to be %s; got %s\", expStatus, reply.Txn.Status)",169],["transaction.Rollback()",154]],"useCount":80607},{"word":"true","context":[["//       \"required\": true,",96651],["return true, nil",35581],["Optional: true,",28311],["true,",17951],["Computed: true,",15331],["ForceNew: true,",15313],["Required: true,",14985],["found = true",13797],["changed = true",11027],["return true",274181]],"useCount":1995910},{"word":"ts","context":[["ts.mu.Lock()",634],["resp, err := ts.HandleRequest(req)",655],["res, err := Get(ts.URL)",671],["res, err := c.Get(ts.URL)",819],["conn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())",853],["return ts",910],["ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {",2617],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["defer ts.Close()",14767],["ts.Close()",614]],"useCount":116641},{"word":"tt","context":[["if tt := v.Type(); tt != tfunc {",885],["if rules[i] == tt.expected {",2151],["tt(t, func() {",1512],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, r)",2151],["if rule != tt.expected {",2151],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, rule)",2151],["for i, tt := range tests {",10529],["t.Errorf(\"Expected '%s' Got '%s'\", tt.expected, s)",13628],["if s != tt.expected {",13631],["for _, tt := range tests {",22910]],"useCount":228053},{"word":"two","context":[["return fmt.Errorf(\"expected two 'out' params - (string, error), got: %v\", ft)",190],["//   Cannot end with a hyphen or contain two consecutive hyphens",600],["zAdd = client.ZAdd(\"zset\", redis.Z{2, \"two\"})",348],["// must be a letter Cannot end with a hyphen or contain two consecutive hyphens",340],["// and another of the given dimension. For any two matrices of dimensionality",314],["// Cannot end with a hyphen or contain two consecutive hyphens",305],["// TODO: the logic here does not handle two cases:",278],["// These two conditions could be alleviated by checkpointing kubelet.",277],["if strings.Join(tt, \" \") != \"one two\" {",239],["return ref, fmt.Errorf(\"the docker pull spec %q must be two or three segments separated by slashes\", spec)",197]],"useCount":75380},{"word":"tx","context":[["tx, err := db.Begin()",1733],["err = tx.Commit()",1542],["defer tx.Rollback()",1470],["tx.CreateBucket([]byte(\"widgets\"))",1110],["db.View(func(tx *bolt.Tx) error {",1041],["return tx.Commit()",843],["defer tx.Abort()",796],["tx.Commit()",2053],["tx.Rollback()",5448],["db.Update(func(tx *bolt.Tx) error {",2491]],"useCount":114759},{"word":"txn","context":[["ops = append(ops, txn.Op{",904],["buildTxn := func(attempt int) ([]txn.Op, error) {",818],["\"gopkg.in/mgo.v2/txn\"",791],["b := txn.NewBatch()",741],["return txn.Op{",665],["var ops []txn.Op",626],["txn.Sequence++",1184],["Assert: txn.DocExists,",1274],["ops := []txn.Op{{",1752],["Assert: txn.DocMissing,",1493]],"useCount":85436},{"word":"typ","context":[["return fmt.Sprintf(\"func(v %v) *%v { return &v } ( %#v )\", typ, typ, pv)",897],["return fmt.Sprintf(\"func(v %v) *%v { return &v } ( %#v )\", typ, typ, pv)",897],["if typ != nil {",704],["typ = typ.Elem()",510],["typ = typ.Elem()",510],["for i := 0; i < typ.NumField(); i++ {",489],["func socket(domain int, typ int, proto int) (fd int, err error) {",463],["if typ == nil {",1018],["return typ",1839],["switch typ {",2177]],"useCount":136273},{"word":"type","context":[["_ struct{} `type:\"structure\"`",70669],["DryRun *bool `locationName:\"dryRun\" type:\"boolean\"`",7393],["// Returns awserr.Error for service API and SDK errors. Use runtime type assertions",7881],["type (",7913],["//       \"type\": \"boolean\"",8050],["type Config struct {",11935],["//       \"type\": \"integer\"",15969],["// Validate inspects the fields of the type to determine if they are valid.",18383],["SDKShapeTraits bool `type:\"structure\"`",68537],["//       \"type\": \"string\"",149384]],"useCount":2951269},{"word":"types","context":[["\"k8s.io/kubernetes/pkg/types\"",5291],["// Error can be either of the following types:",1860],["package types",4848],["\"github.com/docker/libnetwork/types\"",1274],["Action: types.ActAllow,",4036],["Args:   []*types.Arg{},",3978],["// More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",3029],["\"github.com/docker/docker/api/types\"",2417],["\"github.com/docker/engine-api/types\"",2215],["\"metadata\": \"Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\",",1707]],"useCount":353771},{"word":"u","context":[["u := googleapi.Expand(baseURL, c.pathTemplate_, map[string]string{",3882],["URL:    u,",3347],["return u",12323],["u := url.Values{}",4964],["u.Set(\"domainid\", v.(string))",1235],["if u == nil {",1377],["req, err := s.client.NewRequest(\"GET\", u, nil)",1695],["URL:     u,",1733],["return u, nil",1851],["u.Set(\"id\", v.(string))",2735]],"useCount":289079},{"word":"ui","context":[["cmd.ui.Ok()",1843],["ui = &testterm.FakeUI{}",1047],["t.Fatalf(\"bad: %d\\n\\n%s\", code, ui.ErrorWriter.String())",1200],["Ui:          ui,",1277],["ui := state.Get(\"ui\").(packer.Ui)",1512],["ui := state.Get(\"ui\").(packer.Ui)",1512],["Expect(ui.Outputs).To(ContainSubstrings(",3675],["ui.Error(err.Error())",2108],["ui := new(cli.MockUi)",1997],["Expect(ui.Outputs()).To(ContainSubstrings(",1652]],"useCount":61953},{"word":"uint","context":[["mv = uint(dd.DecodeUint(uintBitsize))",468],["// The return value is the address of a uint  variable that stores the value of the flag.",262],["case *uint:",270],["Port                           uint",274],["mk = uint(dd.DecodeUint(uintBitsize))",288],["func (kl *Kubelet) ListenAndServeReadOnly(address net.IP, port uint) {",300],["ID       uint",405],["codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())",622],["case uint:",1866],["for shift := uint(0); ; shift += 7 {",155764]],"useCount":225697},{"word":"uint16","context":[["case uint16:",2256],["xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units",671],["Family uint16",859],["Msglen    uint16",419],["Index     uint16",425],["var port uint16 = 5000",439],["mv = uint16(dd.DecodeUint(16))",468],["var _p0 *uint16",469],["Port     uint16",572],["Port   uint16",649]],"useCount":90337},{"word":"uint32","context":[["v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))",733],["//       \"format\": \"uint32\",",6403],["case uint32:",2534],["var v uint32",2519],["v |= (uint32(b) & 0x7F) << shift",1118],["Uint32() uint32",927],["key := uint32(fieldNumber)<<3 | uint32(wire)",920],["key := uint32(fieldNumber)<<3 | uint32(wire)",920],["v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))",733],["v |= uint32(data[iNdEx-2]) << 16",709]],"useCount":301188},{"word":"uint64","context":[["n += 1 + l + sovThetest(uint64(l))",6518],["var stringLen uint64",22703],["stringLen |= (uint64(b) & 0x7F) << shift",22705],["n += 1 + l + sovGenerated(uint64(l))",30501],["var wire uint64",32162],["wire |= (uint64(b) & 0x7F) << shift",32162],["var keykey uint64",5109],["valuekey |= (uint64(b) & 0x7F) << shift",5109],["var valuekey uint64",5109],["keykey |= (uint64(b) & 0x7F) << shift",5109]],"useCount":694635},{"word":"uint8","context":[["case uint8:",2216],["data[i] = uint8(uint64(l)&0x7f | 0x80)",2694],["data[i] = uint8(l)",2694],["data[offset+3] = uint8(v >> 24)",4294],["data[offset+1] = uint8(v >> 8)",4294],["data[offset+2] = uint8(v >> 16)",4294],["data[offset+4] = uint8(v >> 32)",2147],["data[offset] = uint8(v)",6444],["data[offset+6] = uint8(v >> 48)",2147],["data[offset] = uint8(v&0x7f | 0x80)",2150]],"useCount":165354},{"word":"uintptr","context":[["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)",476],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))",476],["_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)",476],["case uintptr:",705],["_, _, e1 := Syscall(SYS_FCHMOD, uintptr(fd), uintptr(mode), 0)",476],["_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)",476],["gogsl.InitializeGslStatic(_result, uintptr(unsafe.Pointer(&_ref)))",584],["r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))",476]],"useCount":211015},{"word":"unexpected","context":[["t.Errorf(\"unexpected output: %s\", buf.String())",900],["t.Fatalf(\"unexpected actions: %v\", actions)",930],["panic(fmt.Sprintf(\"proto: unexpected type %T in oneof\", x))",1111],["t.Errorf(\"unexpected error: %v\", err)",26845],["t.Fatalf(\"unexpected errors: %v\", errs)",1219],["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Fatalf(\"unexpected error: %s\", err)",3238],["t.Fatalf(\"unexpected error %v\", err)",2430],["t.Fatalf(\"unexpected request: %#v\\n%#v\", req.URL, req)",2006],["t.Errorf(\"unexpected non-error\")",1580]],"useCount":206665},{"word":"unit","context":[["{Tag: \"unit-foo-42\"},",465],["err = unit.EnsureDead()",326],["err = unit.Remove()",378],["var unit *state.Unit",387],["unit, err := svc.AddUnit()",419],["{Tag: \"unit-wordpress-0\"},",503],["{Tag: \"unit-mysql-0\"},",518],["for _, unit := range units {",602],["unit, err := s.wordpress.AddUnit()",956],["err = unit.AssignToNewMachine()",321]],"useCount":99682},{"word":"unsafe","context":[["\"unsafe\"",14133],["use(unsafe.Pointer(_p0))",10242],["var _p0 unsafe.Pointer",6004],["_p0 = unsafe.Pointer(&_zero)",5922],["import \"unsafe\"",4235],["_p0 = unsafe.Pointer(&p[0])",2792],["use(unsafe.Pointer(_p1))",2108],["defer C.free(unsafe.Pointer(cstr))",1562],["defer C.free(unsafe.Pointer(cname))",1232],["_p0 = unsafe.Pointer(&buf[0])",1542]],"useCount":224828},{"word":"until","context":[["// Other management of the container blocks until the hook completes.",362],["// values assigned to them by a call to Uniform* until the next successful",1594],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// Block the return until the chan gets closed",204],["// TODO: block until all sources have delivered at least one update to the channel, or break the sync loop",213],["// without actually causing a kernel panic, so we need this workaround until",231],["// If we use Stdin, command.Run() won't return until the goroutine that's copying",245],["// as a result, pods are not able to be provisioned in a namespace until the service account is provisioned",256],["// Wait for the pods to enter the running state. Waiting loops until the pods",315],["// TODO: Unconditionally set the config.Version, until we fix the config.",361]],"useCount":65882},{"word":"unversioned","context":[["unversioned.TypeMeta `json:\",inline\"`",20119],["\"k8s.io/kubernetes/pkg/api/unversioned\"",13298],["client \"k8s.io/kubernetes/pkg/client/unversioned\"",6138],["unversioned.ListMeta `json:\"metadata,omitempty\"`",5453],["if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {",3414],["TypeMeta: unversioned.TypeMeta{",3329],["out.TypeMeta = newVal.(unversioned.TypeMeta)",2894],["unversioned.TypeMeta",2729],["unversioned.ListMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`",2125],["Ref:         spec.MustCreateRef(\"#/definitions/unversioned.Duration\"),",2091]],"useCount":186746},{"word":"up","context":[["// beyond the marker, up to the value specified by MaxRecords.",442],["// (e.g. looking up an ID).",456],["// Set up a master",466],["// Hook up gocheck into the \"go test\" runner.",471],["// It's the caller's responsibility to clean up externally (i.e. use the",482],["// Verify that the required pods have come up.",492],["up{10},",494],["Scaling foo-v2 up to 10",501],["// Absolute number is calculated from percentage by rounding up.",536],["// is specified, the response includes only records beyond the marker, up to",664]],"useCount":166541},{"word":"update","context":[["update: api.ReplicationController{",1304],["// check for update in container",853],["// at some point during pod execution (e.g. due to a pod label update), the",592],["if !actions[1].Matches(\"update\", \"nodes\") || actions[1].GetSubresource() != \"status\" {",463],["successCase.update.ObjectMeta.ResourceVersion = \"1\"",499],["// PrepareForUpdate clears fields that are not allowed to be set by end users on update.",530],["// Copy data and update.",586],["t.Fatalf(\"can't update disk space manager: %v\", err)",538],["update: extensions.DaemonSet{",543],["// ValidateUpdate is the default update validation for an end user.",545]],"useCount":164080},{"word":"updated","context":[["// newPv is updated with fields that cannot be changed.",420],["// Cannot be updated.",3340],["// proto package needs to be updated.",1437],["Updated string `json:\"updated,omitempty\"`",1221],["updated = true",707],["// TODO: This requires a transaction, either both node status is updated",692],["updated := false",493],["// Node status hasn't been updated for 1hr.",468],["// newResourceQuota is updated with fields that cannot be changed.",438],["if !updated {",361]],"useCount":62973},{"word":"url","context":[["params := make(url.Values)",36391],["\"net/url\"",51644],["params:  url.Values{\"db\": []string{\"db0\"}},",15829],["u := url.Values{}",4964],["v := url.Values{}",4608],["params_       url.Values",3641],["var _ = url.Parse",3082],["Url string `json:\"url,omitempty\"`",2583],["params := url.Values{}",2050],["resp, err := http.Get(url)",1999]],"useCount":363678},{"word":"urlParams_","context":[["c.urlParams_.Set(\"maxResults\", fmt.Sprint(maxResults))",2908],["c.urlParams_.Set(\"fields\", googleapi.CombineFields(s))",23003],["c.urlParams_.Set(\"alt\", alt)",23003],["urls += \"?\" + c.urlParams_.Encode()",23003],["gensupport.SetOptions(c.urlParams_, opts...)",18124],["urlParams_   gensupport.URLParams",9674],["urlParams_ gensupport.URLParams",6045],["c.urlParams_.Set(\"pageToken\", pageToken)",3624],["c.urlParams_.Set(\"quotaUser\", quotaUser)",2611],["c.urlParams_.Set(\"userIp\", userIP)",2283]],"useCount":157473},{"word":"urls","context":[["req, _ := http.NewRequest(\"DELETE\", urls, body)",6246],["for _, url := range urls {",658],["urls = strings.Replace(urls, \"https://www.googleapis.com/\", \"https://www.googleapis.com/upload/\", 1)",1070],["urls = strings.Replace(urls, \"https://www.googleapis.com/\", \"https://www.googleapis.com/upload/\", 1)",1070],["req, _ := http.NewRequest(\"PATCH\", urls, body)",3818],["req, _ := http.NewRequest(\"PUT\", urls, body)",4835],["req, _ := http.NewRequest(\"POST\", urls, body)",17587],["urls += \"?\" + c.urlParams_.Encode()",23003],["req, _ := http.NewRequest(\"GET\", urls, body)",26055],["urls += \"?\" + params.Encode()",35563]],"useCount":182356},{"word":"us","context":[["\"region\": \"us-east\",",591],["Attrs: []string{\"us-east\"},",560],["availability_zone = \"us-west-2a\"",560],["availability_zones = [\"us-west-2a\"]",532],["// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE)",532],["region = \"us-east-1\"",427],["zone = \"us-central1-a\"",374],["exp:       \"cpu,host=serverA,region=us-east value=1.0 946730096789012345\",",336],["# us-west-2",297],["for _, u := range us {",295]],"useCount":64905},{"word":"usage","context":[["usage()",2928],["func usage() {",2762],["flag.Usage = usage",1772],["// Example usage:",485],["// Min usage constraints on this kind by resource name",472],["// Max usage constraints on this kind by resource name",472],["// LimitRangeSpec defines a min/max usage limit for resources that match on kind",469],["// LimitRangeItem defines a min/max usage limit for any resource that matches on kind",469],["// Used is the current observed total usage of the resource in the namespace",469],["// Status defines the actual enforced quota and its current usage",524]],"useCount":71796},{"word":"use","context":[["use(unsafe.Pointer(_p0))",10242],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",4249],["// Redistribution and use in source and binary forms, with or without",3435],["// QuotaUser sets the optional parameter \"quotaUser\": Available to use",2611],["// If additional configuration is needed for the client instance use the optional",2272],["use(unsafe.Pointer(_p1))",2108],["* Redistribution and use in source and binary forms, with or without",1643],["// XXX_OneofFuncs is for the internal use of the proto package.",1268],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1075],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931]],"useCount":327479},{"word":"used","context":[["// Context sets the context to be used in this call's Do method.",4699],["// used to include empty fields in Patch requests.",38333],["// Context sets the context to be used in this call's Do method. Any",22537],["// Creating a request object using this method should be used when you want to inject",13378],["// value can be used to capture response data after the request's \"Send\" method",13378],["// Reference imports to suppress errors if they are not otherwise used.",8089],["// OAuth2 scopes used by this API.",2697],["// Prefix indicates this name will be used as part of generation, in which case",2533],["//The service client's operations are safe to be used concurrently.",2258],["assert.NotNil(t, out) // ensure out variable is used",1747]],"useCount":455766},{"word":"user","context":[["\"k8s.io/kubernetes/pkg/auth/user\"",914],["return user",888],["return user, err",950],["User string `json:\"user,omitempty\"`",1015],["return user, nil",1116],["if user == nil {",1154],["package user",1613],["// per-user limits.",2283],["// string assigned to a user, but should not exceed 40 characters.",2611],["\"os/user\"",3525]],"useCount":367202},{"word":"users","context":[["return users, nil",373],["for _, user := range users {",856],["// users must create.",586],["// PrepareForUpdate clears fields that are not allowed to be set by end users on update.",530],["// * a name, understood by users, and perhaps by peripheral systems, for an identity",513],["for _, u := range users {",480],["// users to handle external traffic that arrives at a node.",461],["// PrepareForCreate clears fields that are not allowed to be set by end users on creation.",398],["var users []User",376],["return users",338]],"useCount":63076},{"word":"using","context":[["// This should only be called when using ResumableMedia (as opposed to Media).",498],["// Creating a request object using this method should be used when you want to inject",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// were truncated, you can make a subsequent pagination request using the Marker",836],["// If an error occurs, it can only be retrieved using xgb.WaitForEvent or xgb.PollForEvent.",686],["// uniform variable specified by location using the values passed as",584],["expected := \"When using ADD with more than one source file, the destination must be a directory and end with a /\"",581],["// Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable",574],["// than an interface. There is no way to construct a list+watcher using resource name.",561],["// expression using RE2 syntax. The literal value must match the entire",537]],"useCount":166858},{"word":"util","context":[["\"k8s.io/kubernetes/pkg/util\"",8174],["util.SucceedsSoon(t, func() error {",2257],["\"github.com/cockroachdb/cockroach/util/leaktest\"",2304],["\"k8s.io/kubernetes/pkg/util/intstr\"",2637],["\"github.com/cockroachdb/cockroach/util/log\"",3105],["\"github.com/cockroachdb/cockroach/util\"",3396],["\"k8s.io/kubernetes/pkg/util/wait\"",5040],["package util",5967],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/util\"",6047],["\"k8s.io/kubernetes/pkg/util/sets\"",7294]],"useCount":235031},{"word":"utils","context":[["\"github.com/juju/utils/series\"",763],["utils.ParseFlags(cmd, args, true)",902],["bosherr \"github.com/cloudfoundry/bosh-utils/errors\"",996],["boshlog \"github.com/cloudfoundry/bosh-utils/logger\"",1012],["return utils.NewErrServerError(err)",1105],["\"github.com/juju/utils/set\"",1243],["\"github.com/cgrates/cgrates/utils\"",1287],["\"github.com/docker/docker/utils\"",2300],["\"github.com/juju/utils\"",3390],["package utils",4460]],"useCount":127899},{"word":"v","context":[["t.Fatalf(\"seed = %d, err = %v\", seed, err)",21634],["t.Fatalf(\"unexpected error: %v\", err)",23940],["t.Errorf(\"unexpected error: %v\", err)",26845],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["params.Set(\"fields\", fmt.Sprintf(\"%v\", v))",29281],["if v, ok := c.opt_[\"fields\"]; ok {",29281],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["Label:    func(v descriptor.FieldDescriptorProto_Label) *descriptor.FieldDescriptorProto_Label { return &v }(1),",29615],["t.Fatalf(\"err: %v\", err)",35496],["return &v",20484]],"useCount":4640586},{"word":"v1","context":[[". \"gopkg.in/check.v1\"",4387],["v.AddArg(v1)",1946],["Ref:         spec.MustCreateRef(\"#/definitions/v1.ObjectMeta\"),",1980],["\"gopkg.in/check.v1\"",2037],["\"apiVersion\": \"v1\",",2322],["ObjectMeta: v1.ObjectMeta{",2529],["APIVersion: \"v1\",",2833],["\"k8s.io/kubernetes/pkg/api/v1\"",2889],["package v1",4133],["gc \"gopkg.in/check.v1\"",9251]],"useCount":268939},{"word":"v2","context":[["\"gopkg.in/mgo.v2\"",3985],["*v = v2",3874],["\"gopkg.in/yaml.v2\"",2843],["for _, k2 := range v2 {",2160],["\"gopkg.in/juju/names.v2\"",2156],["v1.AddArg(v2)",1627],["ee.EncodeInt(int64(v2))",1590],["ee.EncodeUint(uint64(v2))",1566],["for k2, v2 := range v {",4716],["\"gopkg.in/mgo.v2/bson\"",5492]],"useCount":133031},{"word":"val","context":[["(*out)[key] = val",1850],["out.Selector[key] = val",1884],["for key, val := range in.Selector {",1906],["for key, val := range in {",1925],["if val == nil {",2362],["return val, nil",2515],["if err := deepCopy_resource_Quantity(val, newVal, c); err != nil {",2631],["for key, val := range *in {",2838],["if err := s.Convert(&val, &newVal, 0); err != nil {",3612],["return val",5739]],"useCount":276370},{"word":"valid","context":[["// Validate inspects the fields of the type to determine if they are valid.",18383],["if !valid {",1871],["// valid",1428],["// - session_id, session ref, Reference to a valid session",1331],["valid = true",1253],["if test.valid && len(errs) > 0 {",747],["if !test.valid && len(errs) == 0 {",747],["// These are the valid statuses of pods.",710],["// These are the valid phases of node.",681],["// These are valid conditions of node. Currently, we don't have enough information to decide",681]],"useCount":158040},{"word":"value","context":[["return value, nil",2126],["// value can be used to capture response data after the request's \"Send\" method",13378],["// fail if the object's ETag matches the given value. This is useful for",12114],["return value",5177],["// null. It is an error if a field in this list has a non-empty value.",4930],["// empty value appearing in NullFields will be sent to the server as",3833],["Value string `json:\"value,omitempty\"`",3152],["if value == nil {",3004],["for _, value := range values {",2167],["// value.",2137]],"useCount":1092893},{"word":"values","context":[["// empty values are omitted from API requests. However, any non-pointer,",38333],["// Possible values are:",1141],["// variants of this function should be used to provide values for uniform",1168],["return values",1294],["// values assigned to them by a call to Uniform* until the next successful",1594],["for _, value := range values {",2167],["// values are omitted from API requests. However, any field with an",3833],["// Possible values:",14232],["for _, v := range values {",1652],["// More values...",27171]],"useCount":344743},{"word":"var","context":[["var err error",136062],["var (",197231],["var l int",66946],["var h codecSelfer1234",59656],["var body io.Reader = nil",58552],["var i int",38426],["var wire uint64",32162],["var msglen int",42860],["var buf bytes.Buffer",31577],["var stringLen uint64",22703]],"useCount":2290552},{"word":"variable","context":[["// of the command must match the data type for the specified uniform variable",584],["// of a single uniform variable, and a length of 1 or greater can be used to",584],["// should also match the data type of the specified uniform variable. The i",584],["// EnvVar represents an environment variable present in a Container.",716],["// Specify the value of a uniform variable for a specified program object",858],["// Specify the value of a uniform variable for the current program object",866],["// regardless of whether the variable exists or not.",936],["// variable array. The location of the uniform variable to be modified is",1010],["// variable array. The location of the uniform variable to be modified is",1010],["assert.NotNil(t, out) // ensure out variable is used",1747]],"useCount":67562},{"word":"version","context":[["// SchemeGroupVersion is group version used to register these objects",770],["\"api-version\": client.APIVersion,",4209],["\"api-version\": APIVersion,",2307],["\"github.com/juju/juju/version\"",2014],["\"k8s.io/kubernetes/pkg/version\"",1370],["package version",981],["return version",858],["\"github.com/juju/version\"",847],["version string",841],["// version, the default).",804]],"useCount":326205},{"word":"volume","context":[["\"k8s.io/kubernetes/pkg/volume\"",2654],["plugMgr := volume.VolumePluginMgr{}",1858],["host volume.VolumeHost",815],["// Source represents the location and type of a volume to mount.",722],["// Filesystem type of the volume that you want to mount.",720],["// FlexVolume represents a generic volume resource that is",708],["// Cinder represents a cinder volume attached and mounted on kubelets host machine",696],["func ProbeVolumePlugins() []volume.VolumePlugin {",690],["\"github.com/docker/docker/volume\"",676],["// This is the primary entrypoint for volume plugins.",619]],"useCount":216964},{"word":"volumes","context":[["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",811],["// Remove any orphaned volumes.",325],["for _, vol := range volumes {",369],["for _, volume := range volumes {",376],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath",407],["// Available volumes are held by the binder and matched to PersistentVolumeClaims",453],["// released volumes must be recycled before becoming available again",592],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",676],["// More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",676]],"useCount":81935},{"word":"w","context":[["http.Error(w, err.Error(), http.StatusInternalServerError)",9703],["w := httptest.NewRecorder()",6588],["w.WriteHeader(http.StatusInternalServerError)",5118],["w.WriteHeader(http.StatusNoContent)",4938],["w.WriteHeader(http.StatusBadRequest)",4159],["return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3901],["ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",3891],["w.Close()",3832],["w.WriteHeader(http.StatusOK)",10652],["w.Header().Set(\"Content-Type\", \"application/json\")",11021]],"useCount":855207},{"word":"wait","context":[["// If we have a async client, we need to wait for the async result",2363],["\"k8s.io/kubernetes/pkg/util/wait\"",5040],["time.Sleep(wait.Jitter(s.ControllerStartInterval.Duration, ControllerStartJitter))",1469],["go wait.Until(func() {",951],["case <-time.After(wait.ForeverTestTimeout):",838],["wait.Wait()",711],["if err == wait.ErrWaitTimeout {",585],["defer wait.Done()",531],["wait := sync.WaitGroup{}",481],["return wait.Poll(Poll, 5*time.Minute, func() (bool, error) {",412]],"useCount":98876},{"word":"want","context":[["if !reflect.DeepEqual(got, want) {",2749],["// Creating a request object using this method should be used when you want to inject",13378],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["if got != want {",4253],["t.Fatalf(\"String want %v got %v\", s1, s2)",3263],["t.Fatalf(\"GoString want %v got %v\", s1, s2)",3251],["// where the request originates. Use this if you want to enforce",2283],["want string",1818],["if err == nil || err.Error() != want {",1174],["t.Errorf(\"got %v, want %v\", got, want)",1165]],"useCount":361821},{"word":"was","context":[["// because http.StatusNotModified was returned.",9422],["// googleapi.IsNotModified to check whether the returned error was",9322],["// http.StatusNotModified was returned.",6692],["// to check whether the returned error was because",6692],["// check whether the returned error was because http.StatusNotModified",6580],["// was returned.",6580],["// This file was generated by the swagger tool.",2864],["// Returns whether the assertion was successful (true) or not (false).",2688],["// whether the returned error was because http.StatusNotModified was",1884],["// whether the returned error was because http.StatusNotModified was",1884]],"useCount":275863},{"word":"watch","context":[["case watch.Deleted:",634],["t.Fatalf(\"expected watch event type %s, got %s\", e, a)",652],["WatchFunc: func(resourceVersion string) (watch.Interface, error) {",693],["Watch(opts api.ListOptions) (watch.Interface, error)",805],["watch \"k8s.io/kubernetes/pkg/watch\"",1545],["watch \"k8s.io/kubernetes/pkg/watch\"",1545],["Prefix(\"watch\").",1620],["\"github.com/GoogleCloudPlatform/kubernetes/pkg/watch\"",2108],["WatchFunc: func(options api.ListOptions) (watch.Interface, error) {",2695],["\"k8s.io/kubernetes/pkg/watch\"",5881]],"useCount":89399},{"word":"we","context":[["// node condition. In the future, we will add more. The proposed set of conditions are:",681],["// we will try to respect it or else fail the request.  This field can",486],["// TODO(roberthbailey): Can we do this without having credentials to talk",495],["// can't decide if a resource is in the condition or not. In the future, we could add other",634],["// These are valid conditions of node. Currently, we don't have enough information to decide",681],["// TODO: Inefficient conversion - can we improve it?",2317],["// If we have a async client, we need to wait for the async result",2363],["// If we have a async client, we need to wait for the async result",2363],["// TODO: how do we prevent errors in the filesystem from compromising the machine",2637],["// Calculate next window if we have no more points.",473]],"useCount":524154},{"word":"wg","context":[["wg.Done()",12239],["wg := new(sync.WaitGroup)",954],["s.wg.Add(1)",1036],["wg.Add(2)",1561],["wg := &sync.WaitGroup{}",1764],["wg := sync.WaitGroup{}",3786],["var wg sync.WaitGroup",15187],["defer wg.Done()",15771],["wg.Add(1)",18128],["wg.Wait()",23272]],"useCount":121372},{"word":"when","context":[["// when there are no more results to return.",638],["// Creating a request object using this method should be used when you want to inject",13378],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["// TODO: Uncomment when fix #19254",1624],["// link operation occurs on the program object, when they are once again",1594],["// to 0 when the program object is linked successfully. They retain the",1594],["// when",766],["// Use this only when paginating results to indicate the maximum number of items",746],["// PullPolicy describes a policy for if/when to pull a container image",705],["//when",656]],"useCount":334359},{"word":"where","context":[["// where the request originates. Use this if you want to enforce",2283],["/* find a state where \"error\" is a legal shift action */",300],["// Temporary directory where test files will be created",367],["// 1. nodeMonitorGracePeriod must be N times more than nodeStatusUpdateFrequency, where",446],["// of the Marker element in the response that you received to indicate where",494],["// service where to continue from.",494],["where",561],["// used for PersistentVolumes where the bound PersistentVolumeClaim was deleted",592],["// \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered",671],["// where Purpose is X, see the tag:key=value filter.",931]],"useCount":76439},{"word":"whether","context":[["// Returns whether the assertion was successful (true) or not (false).",2688],["// TODO: Decide whether to store these separately or with the object they apply to.",704],["// A flag that indicates whether there are more items to return. If your results",724],["// regardless of whether the variable exists or not.",936],["// ForceSendFields will be sent to the server regardless of whether the",1152],["// whether the returned error was because http.StatusNotModified was",1884],["// check whether the returned error was because http.StatusNotModified",6580],["// to check whether the returned error was because",6692],["// googleapi.IsNotModified to check whether the returned error was",9322],["// request. Use googleapi.IsNotModified to check whether the response",12114]],"useCount":141449},{"word":"which","context":[["// IfNoneMatch sets the optional parameter which makes the operation",12114],["// Host name on which the event is generated.",628],["// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",635],["// until the action is complete, unless the container process fails, in which case the handler is aborted.",716],["// NextPageToken: The continuation token, which is used to page through",718],["//     This defines the format, but not the length restriction, which should be",726],["// (for example 3306) that the proxy listens on, and the selector that determines which pods",737],["// specified by location, which should be a value returned by GetUniformLocation.",1010],["// Prefix indicates this name will be used as part of generation, in which case",2533],["// error which satisfies the awserr.Error interface.",11875]],"useCount":351330},{"word":"will","context":[["// other function will result in a GL.INVALID_OPERATION error.",1168],["// timeout, the resonse will contain the jobid of the running async job",1437],["// Exactly one of *Operation or error will be non-nil. Any non-2xx",1713],["// A non-nil error returned from f will halt the iteration.",2234],["// Prefix indicates this name will be used as part of generation, in which case",2533],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["// empty value appearing in NullFields will be sent to the server as",3833],["// Any pending HTTP request will be aborted if the provided context",4780],["// pending HTTP request will be aborted if the provided context is",22537],["// non-interface field appearing in ForceSendFields will be sent to the",38333]],"useCount":616674},{"word":"wire","context":[["wireType := int(wire & 0x7)",32066],["wire |= (uint64(b) & 0x7F) << shift",32162],["var wire uint64",32162],["fieldNum := int32(wire >> 3)",29949],["if wire == 0 {",3931],["wire >>= 7",3929],["if wire != proto.WireBytes {",3435],["if wire != proto.WireVarint {",2043],["wire := r.Intn(4)",1125],["if wire == 3 {",1125]],"useCount":238138},{"word":"wireType","context":[["switch wireType {",2205],["if wireType != 2 {",69892],["wireType := int(wire & 0x7)",32066],["if wireType == 4 {",26138],["if wireType != 0 {",25884],["if wireType != 1 {",2297],["return 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",2191],["return 0, fmt.Errorf(\"proto: illegal wireType %d\", wireType)",2191],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846]],"useCount":351642},{"word":"with","context":[["// Generic AWS Error with Code, Message, and original error (if any)",7149],["// requests with the JSON null value. By default, fields with empty",2096],["// is compatible with the proto package it is being compiled against.",2473],["//       \"description\": \"User profile ID associated with this request.\",",2944],["// Redistribution and use in source and binary forms, with or without",3435],["// unconditionally include in API requests. By default, fields with",36870],["// values are omitted from API requests. However, any field with an",3833],["// Generic AWS error with Code, Message, and original error (if any)",6209],["// requests with the JSON null value. By default, fields with empty",2096],["// with awserr.Error's Code and Message methods to get detailed information about",7881]],"useCount":897728},{"word":"without","context":[["// get access to all their video and channel data, without having to",331],["c.FuzzNoCustom(j) // fuzz self without calling this function again",338],["// Redistribution and use in source and binary forms, with or without modification,",369],["// key was transmitted without error.",436],["// TODO(roberthbailey): Can we do this without having credentials to talk",495],["Redistribution and use in source and binary forms, with or without",612],["* purpose with or without fee is hereby granted, provided that the above",690],["// without having to provide authentication credentials for each",847],["* Redistribution and use in source and binary forms, with or without",1643],["// Redistribution and use in source and binary forms, with or without",3435]],"useCount":74781},{"word":"work","context":[["// Cobra supports Persistent Flags which will work for this command",245],["// copying the response body did not work",293],["// Note: be cautious when changing the constant, it must work with nodeMonitorGracePeriod",305],["// Hand the call off to the controller, which does most of the work.",378],["// TODO: Make it work for all providers.",455],["// not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use",541],["_work = &work[0]",616],["if len(work) > 0 {",631],["distributed with this work for additional information",975],["* distributed with this work for additional information",1018]],"useCount":68107},{"word":"write","context":[["xgb.Put16(buf[b:], uint16(size/4)) // write request size in 4-byte units",671],["// Optional: Defaults to false (read/write). ReadOnly here will force",3684],["return thrift.PrependError(\"write struct stop error: \", err)",1514],["return thrift.PrependError(fmt.Sprintf(\"%T write struct begin error: \", p), err)",1514],["return thrift.PrependError(\"write field stop error: \", err)",1514],["return fmt.Errorf(\"%T write struct begin error: %s\", p, err)",1363],["test.write = strings.Join(writes, \"\\n\")",996],["return fmt.Errorf(\"write field stop error: %s\", err)",830],["return fmt.Errorf(\"write struct stop error: %s\", err)",830],["c.Fatalf(\"failed to write tar file header: %v\", err)",599]],"useCount":130450},{"word":"wrong","context":[["return fmt.Errorf(\"proto: wrong wireType = %d for field Value\", wireType)",1069],["return fmt.Errorf(\"proto: wrong wireType = %d for field Header\", wireType)",1100],["return fmt.Errorf(\"proto: wrong wireType = %d for field Field1\", wireType)",1149],["return fmt.Errorf(\"proto: wrong wireType = %d for field Spec\", wireType)",1186],["return fmt.Errorf(\"proto: wrong wireType = %d for field Type\", wireType)",1196],["return fmt.Errorf(\"proto: wrong wireType = %d for field Status\", wireType)",1444],["return fmt.Errorf(\"proto: wrong wireType = %d for field ListMeta\", wireType)",1470],["return fmt.Errorf(\"proto: wrong wireType = %d for field Items\", wireType)",1724],["return fmt.Errorf(\"proto: wrong wireType = %d for field ObjectMeta\", wireType)",1792],["return fmt.Errorf(\"proto: wrong wireType = %d for field Name\", wireType)",1846]],"useCount":140535},{"word":"www","context":[["//     \"https://www.googleapis.com/auth/drive\",",2939],["//     \"https://www.googleapis.com/auth/cloud-platform\",",13943],["//     \"https://www.googleapis.com/auth/dfatrafficking\"",2980],["//     \"https://www.googleapis.com/auth/compute\",",2840],["//     \"https://www.googleapis.com/auth/cloud-platform\"",2629],["//     \"https://www.googleapis.com/auth/compute\"",2603],["//     \"https://www.googleapis.com/auth/compute.readonly\"",2306],["//     \"https://www.googleapis.com/auth/adsense.readonly\"",2088],["//     \"https://www.googleapis.com/auth/adsense\",",2088],["//     \"https://www.googleapis.com/auth/devstorage.full_control\"",1998]],"useCount":199676},{"word":"x","context":[["x.APIVersion = string(r.DecodeString())",9730],["x.Kind = string(r.DecodeString())",9708],["x.APIVersion = \"\"",9730],["r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))",9730],["v.AddArg(x)",10240],["x := v.Args[0]",11125],["} else if z.HasExtensions() && z.DecExt(x) {",13814],["} else if z.HasExtensions() && z.EncExt(x) {",13814],["if x == nil {",14426],["\"golang.org/x/net/context\"",29586]],"useCount":1433987},{"word":"xml","context":[["\"encoding/xml\"",8744],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",425],["Fault_ *soap.Fault                        `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty\"`",470],["Fault_ *soap.Fault                         `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty\"`",472],["Returnval string `xml:\"returnval,omitempty\"`",544],["case xml.StartElement:",556],["XMLName: xml.Name{",565],["RequestId string `xml:\"requestId\"`",569],["This string `xml:\"_this,omitempty\"`",1190],["XMLName xml.Name",1826]],"useCount":205323},{"word":"y","context":[["y = 0",1573],["r = x >> y",1639],["r = x << y",1657],["y = 1",1709],["switch y := b.(type) {",1717],["return y",1950],["v0.AddArg(y)",2171],["v.AddArg(y)",3195],["y := v.Args[1]",5133],["return invOp2(x, y, op)",1370]],"useCount":251514},{"word":"yaml","context":[["Data map[string]interface{} `json:\"data,omitempty\" yaml:\"data,omitempty\"`",372],["\"gopkg.in/yaml.v2\"",2843],["\"github.com/ghodss/yaml\"",1199],["// UnmarshalYAML implements the yaml.Unmarshaler interface.",697],["Name string `json:\"name,omitempty\" yaml:\"name,omitempty\"`",549],["XXX map[string]interface{} `yaml:\",inline\"`",549],["Description string `json:\"description,omitempty\" yaml:\"description,omitempty\"`",437],["Kind string `json:\"kind,omitempty\" yaml:\"kind,omitempty\"`",416],["\"gopkg.in/yaml.v1\"",385],["Created string `json:\"created,omitempty\" yaml:\"created,omitempty\"`",368]],"useCount":77047},{"word":"you","context":[["// (regardless of what the tag's key is). If you want to list only resources",931],["// of the tag-value filter. For example, if you use both the filter \"tag-key=Purpose\"",931],["// and the filter \"tag-value=X\", you get any resources assigned both the tag",931],["// where the request originates. Use this if you want to enforce",2283],["// Editing this file might prove futile when you re-run the swagger generate command",2557],["// as then you are sure you have configured all required params",4924],["// as then you are sure you have configured all required params",4924],["// actually making the request, and provides an error response. If you have",6922],["// custom logic into the request's lifecycle using a custom handler, or if you want to",13378],["// Creating a request object using this method should be used when you want to inject",13378]],"useCount":243618},{"word":"your","context":[["// A compilation error at this line likely means your copy of the",1437],["// aws.Config parameter to add your extra config.",2272],["// Manage your data in Google Cloud Storage",356],["// Here you will define your flags and configuration settings.",362],["// NOTE: This is exposed for use within your own custom functions and not intended to be called directly.",411],["// Set this value longer than the expected cleanup time for your process.",539],["// receive all of your results.",550],["// A flag that indicates whether there are more items to return. If your results",724],["// View and manage your data across Google Cloud Platform services",922],["// to return a list of gateways for your account and region.",1344]],"useCount":72207},{"word":"z","context":[["z.EncSendContainerState(codecSelfer_containerMapValue1234)",48482],["} else if z.HasExtensions() && z.DecExt(x) {",13814],["z, r := codec1978.GenHelperEncoder(e)",17991],["z.DecSendContainerState(codecSelfer_containerMapEnd1234)",19506],["z, r := codec1978.GenHelperDecoder(d)",42393],["z.EncSendContainerState(codecSelfer_containerMapKey1234)",48482],["z.EncSendContainerState(codecSelfer_containerArrayElem1234)",51551],["z.DecSendContainerState(codecSelfer_containerArrayElem1234)",58067],["_, _, _ = h, z, r",60384],["z.DecSendContainerState(codecSelfer_containerArrayEnd1234)",67764]],"useCount":948304},{"word":"zero","context":[["// The value zero indicates delete immediately. If this value is nil, the default grace period for the",604],["// terminated in a failure (exited with a non-zero exit code or was stopped by the system).",588],["return zero, err",563],["// Value must be non-negative integer. The value zero indicates delete immediately.",539],["var zero *JavaLangObject",522],["\"zero-length Name\": {",468],["return zero",353],["\"zero-length name\": {",334],["panic(\"blas: zero x index increment\")",324],["// Pos reports the position of the first component of n or zero if it's empty.",692]],"useCount":83262},{"word":"zone","context":[["\"zone\":    c.zone,",739],["//     \"zone\": {",2673],["c.zone = zone",2491],["c.zone = zone",2491],["//     \"zone\",",1949],["//       \"description\": \"Name of the zone scoping this request.\",",813],["\"zone\":    c.zone,",739],["//     \"zone\"",724],["Zone string `json:\"zone,omitempty\"`",595],["// The disk must also be in the same GCE project and zone as the kubelet.",500]],"useCount":81367},{"word":"Ω","context":[["Ω(output).Should(ContainSubstring(\"Test Suite Passed\"))",261],["Ω(err).ShouldNot(HaveOccurred())",12297],["Ω(err).Should(HaveOccurred())",2915],["Ω(success).Should(BeFalse())",1623],["Ω(err).Should(BeNil())",1049],["Ω(failures).Should(HaveLen(1))",622],["Ω(func() {",533],["Ω(count).Should(Equal(1))",338],["Ω(outcome).Should(BeFalse())",276],["Ω(res.Code).Should(Equal(200))",264]],"useCount":67861}]