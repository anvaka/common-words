[{"word":"A","context":[["* *Note:* A value will be emitted immediately on subscribe.",106],["|class A {}",19],["* @param A The type of argument the factory held by this property takes.",20],["|   A a;",20],["* A simple [Fragment] subclass.",21],["!\"A\" - 0 - 1",24],["|class A {",47],["Commandspy - A Minecraft server plugin to facilitate real-time usage of commands, and sign-changes",49],["|public class A {",43],["public class A {",101]],"useCount":665},{"word":"ASTNode","context":[["override fun processNode(visitor: HtmlGenerator.HtmlGeneratingVisitor, text: String, node: ASTNode) {",44],["import org.intellij.markdown.ast.ASTNode",40],["override fun openTag(visitor: HtmlGenerator.HtmlGeneratingVisitor, text: String, node: ASTNode) {",18],["override fun closeTag(visitor: HtmlGenerator.HtmlGeneratingVisitor, text: String, node: ASTNode) {",13],["constructor(node: ASTNode) : super(node)",67],["import com.intellij.lang.ASTNode",439]],"useCount":621},{"word":"Accepted","context":[["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, GetDoublev, and GetInteger64v.\",",13],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, and GetFloatv.\",",16],["\"Accepted by the {@code pname} parameter of GetPointerv.\",",15],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetDoublev, GetIntegerv, and GetFloatv.\",",42],["\"Accepted by the {@code pname} parameter of GetProgramiv.\",",34],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetInteger64v, GetFloatv, and GetDoublev.\",",27],["\"Accepted by the {@code pname} parameter of GetFramebufferAttachmentParameteriv.\",",18],["\"Accepted by the {@code target} parameter of BeginQuery, EndQuery, and GetQueryiv.\",",16],["\"Accepted by the {@code pname} parameter of GetIntegerv.\",",16]],"useCount":374},{"word":"Act","context":[["// Act",313]],"useCount":313},{"word":"Activity","context":[[": ReadOnlyProperty<Activity, V?> = optional(id, viewFinder)",16],[": ReadOnlyProperty<Activity, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<Activity, List<V>> = optional(ids, viewFinder)",16],["override fun onAttach(activity: Activity?) {",16],["private val Activity.viewFinder: Activity.(Int) -> View?",15],[": ReadOnlyProperty<Activity, V> = required(id, viewFinder)",16],["public open class MyActivity() : Activity() {",17],["class MainActivity : Activity() {",27],["if (resultCode == Activity.RESULT_OK) {",44],["import android.app.Activity",1030]],"useCount":1340},{"word":"After","context":[["import org.junit.After as after",12],["@After fun tearDown() {",23],["@After",225],["import org.junit.After",276]],"useCount":536},{"word":"AlertDialog","context":[["import android.support.v7.app.AlertDialog",156],["import android.app.AlertDialog",125],["val builder = AlertDialog.Builder(context)",39],["val builder = AlertDialog.Builder(activity)",37],["AlertDialog.Builder(this)",33],["AlertDialog",14],["val builder = AlertDialog.Builder(this)",14],["AlertDialog.Builder(context)",12],["return AlertDialog.Builder(activity)",11],["val alertDialog = dialog as AlertDialog",11]],"useCount":452},{"word":"Also","context":[["<li>The See Also section for other reference pages using this type.</li>",88],["<h5>See Also</h5>",602]],"useCount":690},{"word":"AnActionEvent","context":[["import com.intellij.openapi.actionSystem.AnActionEvent",169],["override fun actionPerformed(e: AnActionEvent) {",91],["override fun actionPerformed(e : AnActionEvent) {",11],["override fun update(e: AnActionEvent?) {",17],["override fun actionPerformed(event: AnActionEvent) {",27],["override fun actionPerformed(e: AnActionEvent?) {",36],["override fun update(e: AnActionEvent) {",65]],"useCount":416},{"word":"Android","context":[["* This file is part of Todo.txt Touch, an Android app for managing your todo.txt file (http://todotxt.com).",14],["* Twittnuker - Twitter client for Android",264],["// DroidMate, an automated execution generator for Android apps.",54],["*  Twittnuker - Twitter client for Android",25]],"useCount":357},{"word":"AndroidSchedulers","context":[[".subscribeOn(AndroidSchedulers.mainThread())",18],["import rx.android.schedulers.AndroidSchedulers",384],[".observeOn(AndroidSchedulers.mainThread())",475]],"useCount":877},{"word":"AnkoException","context":[["get() = throw AnkoException(\"'android.widget.TextView.lines' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.ImageView.imageURI' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.linkTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.Gallery.gravity' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.ImageView.imageBitmap' property does not have a getter\")",20],["throw AnkoException(\"Query selection was already applied.\")",24],["get() = throw AnkoException(\"'android.widget.TextView.textResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.singleLine' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.LinearLayout.gravity' property does not have a getter\")",20]],"useCount":382},{"word":"AnkoFile","context":[["files.add(AnkoFile.LISTENERS)",123],["import org.jetbrains.android.anko.config.AnkoFile",45],["files.add(AnkoFile.LAYOUTS)",41],["runFunctionalTest(\"ViewTest.kt\", AnkoFile.VIEWS, version) {",41],["runFunctionalTest(\"SimpleListenerTest.kt\", AnkoFile.LISTENERS, version) {",41],["runFunctionalTest(\"ServicesTest.kt\", AnkoFile.SERVICES, version) {",41],["files.add(AnkoFile.VIEWS)",41],["files.add(AnkoFile.PROPERTIES)",41],["runFunctionalTest(\"ComplexListenerClassTest.kt\", AnkoFile.LISTENERS, version) {",41],["runFunctionalTest(\"PropertyTest.kt\", AnkoFile.PROPERTIES, version) {",41]],"useCount":782},{"word":"Any","context":[["override fun parseRow(columns: Array<Any>): R {",66],["override fun equals(other: Any?): Boolean {",459],["fun data(): Collection<Array<Any?>> {",48],["override fun equals(other: Any?): Boolean{",47],["fun data(): Collection<Array<Any>> {",34],["override fun setState(storageSpecs: Array<Storage>, component: Any, componentName: String, state: Any) {",34],["override fun setState(storageSpecs: Array<Storage>, component: Any, componentName: String, state: Any) {",34],["override fun setStateInOldStorage(component: Any, componentName: String, state: Any) {",34],["override fun setStateInOldStorage(component: Any, componentName: String, state: Any) {",34],["private val defaultInit: Any.() -> Unit = {}",32]],"useCount":1588},{"word":"App","context":[["import nl.endran.core.App",16],["App.component().inject(this)",57],["import de.ph1b.audiobook.injection.App",54],["class App : Application() {",41],["import tornadofx.App",24],["import com.nagopy.android.aplin.entity.App",21],["import org.ligi.passandroid.App",20],["import org.seniorsigan.mangareader.App",20],["val app = App()",19],["override fun setValue(app: App, params: AppConverter.Params) {",16]],"useCount":311},{"word":"AppCompatActivity","context":[["class LoginActivity : AppCompatActivity() {",11],["class AboutActivity : AppCompatActivity() {",12],["public class MainActivity : AppCompatActivity() {",20],["abstract class BaseActivity : AppCompatActivity() {",22],["class MainActivity : AppCompatActivity() {",168],["import android.support.v7.app.AppCompatActivity",929]],"useCount":1162},{"word":"Application","context":[["@SpringApplicationConfiguration(classes = arrayOf(Application::class))",20],["import br.com.wakim.eslpodclient.Application",24],["import android.app.Application",366],["import javafx.application.Application",79],["import com.intellij.openapi.application.Application",69],["class App : Application() {",41],["* Expander: Text Expansion Application",35],["class ApplicationTest : ApplicationTestCase<Application>(Application::class.java)",33],["class ApplicationTest : ApplicationTestCase<Application>(Application::class.java)",33],["SpringApplication.run(Application::class.java, *args)",26]],"useCount":874},{"word":"ApplicationManager","context":[["if (!ApplicationManager.getApplication().isUnitTestMode) {",17],["ApplicationManager.getApplication().runWriteAction {",16],["ApplicationManager.getApplication().saveSettings()",18],["ApplicationManager.getApplication().assertIsDispatchThread()",19],["ApplicationManager.getApplication().invokeLater({",21],["ApplicationManager.getApplication().executeOnPooledThread {",35],["ApplicationManager.getApplication().invokeLater {",39],["if (ApplicationManager.getApplication().isUnitTestMode) {",59],["import com.intellij.openapi.application.ApplicationManager",500],["val app = ApplicationManager.getApplication()",64]],"useCount":868},{"word":"Array","context":[["@JvmStatic fun main(args: Array<String>) {",164],["override fun parseRow(columns: Array<Any>): R {",66],["override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<String>): Boolean {",60],["fun data(): Collection<Array<Any?>> {",48],["fun data(): Collection<Array<Any>> {",34],["override fun setState(storageSpecs: Array<Storage>, component: Any, componentName: String, state: Any) {",34],["public platformStatic fun main(args: Array<String>) {",30],["fun main(args : Array<String>) {",75],["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81],["fun main(args: Array<String>) {",970]],"useCount":1878},{"word":"ArrayList","context":[["val result = ArrayList<String>()",23],["val delegateIndices = ArrayList<Int>()",18],["val outputLine = ArrayList<String>()",18],["val testValues = ArrayList<Double>()",18],["private val schemes = ArrayList<T>()",17],["val list = ArrayList<String>()",30],["val features = ArrayList<Feature>()",36],["return ArrayList()",41],["val list = ArrayList<Int>()",42],["import java.util.ArrayList",881]],"useCount":1283},{"word":"Arrays","context":[["import java.util.Arrays",181],["val index = Arrays.binarySearch(names, key)",35],["Arrays.sort(names)",31],["else if (Arrays.equals(mergeData.LAST, AM.MARKER_ACCEPT_MY)) {",14],["if (Arrays.equals(mergeData.CURRENT, AM.MARKER_ACCEPT_MY) || Arrays.equals(mergeData.LAST, AM.MARKER_ACCEPT_THEIRS)) {",14],["if (Arrays.equals(mergeData.CURRENT, AM.MARKER_ACCEPT_MY) || Arrays.equals(mergeData.LAST, AM.MARKER_ACCEPT_THEIRS)) {",14],["if (Arrays.equals(newBytes, oldState)) {",12]],"useCount":301},{"word":"Assert","context":[["import org.junit.Assert",621],["Assert.assertEquals(",115],["import org.junit.Assert.assertEquals",576],["import org.testng.Assert",107],["import org.junit.Assert.assertThat",148],["import junit.framework.Assert",151],["import org.junit.Assert.assertTrue",167],["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216],["// Assert",294],["import org.junit.Assert.*",431]],"useCount":3512},{"word":"Assertions","context":[["import org.assertj.core.api.Assertions.assertThat",968],["import org.assertj.core.api.Assertions",55],["import org.fest.assertions.Assertions",49],["import org.assertj.core.api.Assertions.assertThatThrownBy",31],["import org.assertj.core.api.Assertions.*",27],["import org.assertj.core.api.Assertions.fail",26],["import org.fest.assertions.api.Assertions.assertThat",14],["Assertions.assertThat(",12],["Assertions.assertThat(res.valid).isFalse()",12]],"useCount":1194},{"word":"AttributeSet","context":[["attrs: AttributeSet?,",96],["import android.util.AttributeSet",445],["attrs: android.util.AttributeSet?,",144],["constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {",62],["constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr)",32],["constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {",29],["constructor(context: Context?, attrs: AttributeSet?) : super(context, attrs)",23],["constructor(context: Context?, attrs: AttributeSet?) : this(context, attrs, 0)",18],["constructor(context: Context, attrs: AttributeSet, defStyle: Int) : super(context, attrs, defStyle) {",17],["import com.jupiter.europa.entity.stats.AttributeSet",15]],"useCount":894},{"word":"AutoSize","context":[["AutoSize(3, \"value\")..GLsizei.IN(\"count\", \"\"),",37],["AutoSize(\"params\")..GLsizei.IN(\"bufSize\", \"the maximum number of bytes to write to {@code params}\"),",20],["AutoSize(\"str\")..int.IN(\"len\", \"\"),",30],["AutoSize(2, \"value\")..GLsizei.IN(\"count\", \"\"),",37],["AutoSize(4, \"value\")..GLsizei.IN(\"count\", \"\"),",37],["AutoSize(\"value\")..GLsizei.IN(\"count\", \"\"),",39],["AutoSize(\"text\")..int.IN(\"len\", \"\"),",39],["AutoSize(\"data\")..GLsizei.IN(\"imageSize\", \"\"),",50],["val autoSize = it[AutoSize]",20],["AutoSize(\"data\")..GLsizei.IN(\"bufSize\", \"the maximum number of bytes to write into {@code data}\"),",26]],"useCount":518},{"word":"Autowired","context":[["import org.springframework.beans.factory.annotation.Autowired",389],["@Autowired",225],["[Autowired]",31]],"useCount":645},{"word":"Baechle","context":[["* @author Sebastian Baechle",367]],"useCount":367},{"word":"Bean","context":[["class Bean {",26],["val bean = Bean()",19],["import org.springframework.context.annotation.Bean",98],["@Bean",190]],"useCount":333},{"word":"Before","context":[["Before",14],["import org.junit.Before as before",18],["@Before fun setup() {",43],["@Before fun setUp() {",171],["@Before",764],["import org.junit.Before",983]],"useCount":1993},{"word":"Boolean","context":[["override fun onCreateOptionsMenu(menu: Menu): Boolean {",211],["override fun onOptionsItemSelected(item: MenuItem?): Boolean {",129],["override fun equals(other: Any?): Boolean{",47],["): Boolean {",48],["override fun buildVisitor(holder: ProblemsHolder, isOnTheFly: Boolean) =",54],["override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<String>): Boolean {",60],["override fun onCreateOptionsMenu(menu: Menu?): Boolean {",71],["override fun hasNext(): Boolean {",117],["override fun onOptionsItemSelected(item: MenuItem): Boolean {",336],["override fun equals(other: Any?): Boolean {",459]],"useCount":4373},{"word":"Brackit","context":[["*     * Neither the name of the Brackit Project Team nor the",405]],"useCount":405},{"word":"Build","context":[["import android.os.Build",432],["if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {",24],["* To work on unit tests, switch the Test Artifact in the Build Variants view.",28],["Build-in Function",32],["@TargetApi(Build.VERSION_CODES.HONEYCOMB)",39],["if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {",52],["if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {",52],["if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {",24],["val view = if (Build.VERSION.SDK_INT < 21)",24],["@TargetApi(Build.VERSION_CODES.LOLLIPOP)",23]],"useCount":901},{"word":"Builder","context":[["MaterialDialog.Builder(activity)",45],["return MaterialDialog.Builder(context)",18],["return Retrofit.Builder()",20],["class Builder {",22],["val retrofit = Retrofit.Builder()",23],["//========== Builder ===========",23],["AlertDialog.Builder(this)",33],["val builder = AlertDialog.Builder(activity)",37],["val builder = AlertDialog.Builder(context)",39],["val request = Request.Builder()",40]],"useCount":452},{"word":"Bundle","context":[["override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {",162],["override fun onSaveInstanceState(outState: Bundle) {",105],["savedInstanceState: Bundle?): View? {",106],["override fun onViewCreated(view: View, savedInstanceState: Bundle?) {",113],["override fun onActivityCreated(savedInstanceState: Bundle?) {",165],["import android.os.Bundle",2910],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["override fun onViewCreated(view: View?, savedInstanceState: Bundle?) {",156],["val args = Bundle()",158],["override fun onCreate(savedInstanceState: Bundle?) {",1642]],"useCount":6705},{"word":"C","context":[["sections: MutableList<ArgAwareWhereSection>, column: Column<T, C>,",12],["assertEvents({ root.mkdirs() }, mapOf(top to 'C'))",14],["addFile(\"pkg/main/C.java\", \"package pkg.main;\\nclass C { }\")",12],["addFile(\"pkg/main/C.java\", \"package pkg.main;\\nclass C { }\")",12],["assertEvents({ file.writeText(\"re-creation\") }, mapOf(file to 'C'))",22],["<h5>C Specification</h5>",351]],"useCount":423},{"word":"Calendar","context":[["return MyDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE))",20],["cal.add(Calendar.DATE, -1)",16],["//   Calendar Notifications Plus",91],["val calendar = Calendar.getInstance()",88],["return MyDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE))",20],["return MyDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE))",20],["val cal = Calendar.getInstance()",42],["val c = Calendar.getInstance()",53],["import java.util.Calendar",67]],"useCount":417},{"word":"CharSequence","context":[["override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {",28],["override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {",30],["private fun loadScheme(fileName: CharSequence, input: InputStream, duringLoad: Boolean): E? {",17],["items: List<CharSequence>,",24],["title: CharSequence? = null,",24],["private fun getFileExtension(fileName: CharSequence, allowAny: Boolean): String {",26],["override fun getPageTitle(position: Int): CharSequence {",26],["override fun getPageTitle(position: Int): CharSequence? {",26],["override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {",29],["override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {",40]],"useCount":358},{"word":"Check","context":[["Check(4)..const..GLfloat_p.IN(\"params\", \"the parameter value\")",22],["Check(1)..nullable..GLsizei_p.OUT(\"length\", \"\"),",35],["Check(4)..const..GLint_p.IN(\"params\", \"\")",15],["ReturnParam..Check(1)..GLuint_p.OUT(\"params\", \"\")",18],["Check(",18],["Check(4)..const..GLint_p.IN(\"params\", \"the parameter value\")",22],["Check(1)..ReturnParam..GLfloat_p.OUT(\"params\", \"\")",24],["Check(3)..const..size_t_p.IN(",26],["Check(1)..ReturnParam..GLint_p.OUT(\"params\", \"\")",42],["ReturnParam..Check(1)..GLint_p.OUT(\"params\", \"\")",51]],"useCount":561},{"word":"Code","context":[["Code(",24],["* This Source Code Form is subject to the terms of the Mozilla Public",179],["/* This Source Code Form is subject to the terms of the Mozilla Public",81],["* Google Code: http://code.google.com/p/rapid-framework/",15],["* := Coffee : Dream : Code",15],["h4 { +\"Code\" }",28]],"useCount":342},{"word":"Collection","context":[["override fun loadSchemes(): Collection<E> {",17],["fun data(): Collection<Array<Any?>> {",48],["references = { collection: Collection<Int> -> task1(collection); collection.joinToString() })",20],["fun reload(changedStorages: Set<StateStorage>): Collection<String>? {",16],["fun doSomethingStrangeWithCollection(collection: Collection<String>): Collection<String>? {",20],["fun doSomethingStrangeWithCollection(collection: Collection<String>): Collection<String>? {",20],["fun task1(collection: Collection<Int>): String {",24],["private fun collectExistingNames(schemes: Collection<T>): Collection<String> {",26],["private fun collectExistingNames(schemes: Collection<T>): Collection<String> {",26],["fun data(): Collection<Array<Any>> {",34]],"useCount":507},{"word":"Color","context":[["import android.graphics.Color",293],["import javafx.scene.paint.Color",41],["import com.badlogic.gdx.graphics.Color",117],["import java.awt.Color",129],[").map { Color.parseColor(it) }",35],["import net.devromik.bw.Color.*",21],["2) Color the table like a chess board (using getTitleColor() and getCellColor() functions above).",14],["textColor = Color.WHITE",14],["import org.newdawn.slick.Color",13],["import glimpse.Color",11]],"useCount":688},{"word":"Column","context":[["[Column(nullable=false,length=30) ]",26],["[Column(nullable=false) ]",28],["import com.raizlabs.android.dbflow.annotation.Column",28],["[Column(",15],["@Column(name = \"uuid\", nullable = false, unique = true)",17],["@Column",19],["import javax.persistence.Column",25],["import com.jayrave.falkon.mapper.Column",33],["[Column(nullable=false,length=128) ]",60],["import ch.digitalfondue.npjt.ConstructorAnnotationRowMapper.Column",41]],"useCount":318},{"word":"Command","context":[["override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<out String>): Boolean {",14],["import com.vasilich.commands.api.Command",17],["import fr.litarvan.krobot.command.Command",19],["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53],["override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<String>): Boolean {",60],["import org.bukkit.command.Command",86],["<h5>Command Properties</h5>",108]],"useCount":357},{"word":"Component","context":[["import dagger.Component",132],["@Component",109],["import java.awt.Component",95],["import com.badlogic.ashley.core.Component",42],["Component",39],["import org.springframework.stereotype.Component",138],["import org.libraryweasel.servo.Component",20],["init: Component.() -> Unit = {}) {",25],["@Component(",25],["import com.artemis.Component",20]],"useCount":720},{"word":"Configuration","context":[["import io.dropwizard.Configuration",13],["override fun onConfigurationChanged(newConfig: Configuration?) {",16],["import net.minecraftforge.common.config.Configuration",32],["import com.sbg.arena.configuration.Configuration",15],["override fun onConfigurationChanged(newConfig: Configuration) {",36],["import android.content.res.Configuration",111],["import org.springframework.context.annotation.Configuration",117],["@Configuration",113],["import cc.redpen.config.Configuration",14],["Configuration",13]],"useCount":491},{"word":"ConnectionUtilities","context":[["ConnectionUtilities.postgresUserName!!,",36],["ConnectionUtilities.postgresPort!!,",36],["ConnectionUtilities.dropMySQLSchema()",81],["ConnectionUtilities.mysqlPassword!!)",81],["ConnectionUtilities.mysqlHost!!,",81],["ConnectionUtilities.mysqlUserName!!,",81],["ConnectionUtilities.postgresDatabase!!,",36],["ConnectionUtilities.mysqlSchema!!,",81],["ConnectionUtilities.getMySQLConnectionInfo()",81],["ConnectionUtilities.getPostgresConnectionInfo()",36]],"useCount":702},{"word":"Constants","context":[["import org.eclipse.jgit.lib.Constants",42],["// Constants",64],["import moe.tlaster.openween.core.api.Constants",19],["object Constants {",32],["import com.mgaetan89.showsrage.Constants",30],["import de.vanita5.twittnuker.Constants",27],["val remoteConfig = RemoteConfig(config, Constants.DEFAULT_REMOTE_NAME)",19],["import com.thomas.needham.neurophidea.Constants.VERSION_KEY",19],["val objectLoader = reader.open(treeWalk.getObjectId(0), Constants.OBJ_BLOB)",16],["import de.vanita5.twittnuker.Constants.*",14]],"useCount":345},{"word":"ContainerUtil","context":[["ContainerUtil.addIfNotNull(toDelete, oldSource.path)",11],["import com.intellij.util.containers.ContainerUtil",269],["private val macros: MutableList<Macro> = ContainerUtil.createLockFreeCopyOnWriteList()",20],["val toUpdate = ContainerUtil.newTroveMap<PluginId, PluginDownloader>()",15],["return ContainerUtil.notNullize(saveSessions)",15],["private val schemeToInfo = THashMap<E, ExternalInfo>(ContainerUtil.identityStrategy())",15],["val updateable = ContainerUtil.newTroveMap<PluginId, IdeaPluginDescriptor>()",15],["protected val urlToFileCache: ConcurrentMap<Url, VirtualFile> = ContainerUtil.newConcurrentMap<Url, VirtualFile>()",14]],"useCount":374},{"word":"Context","context":[["override fun run(bot: Bot, ctx: Context, settings: Settings) {",52],["import ink.abb.pogo.scraper.Context",62],["constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {",62],["constructor(context: Context) : super(context) {",62],["override fun onAttach(context: Context?) {",81],["import android.content.Context",3362],["c: android.content.Context?,",134],["override fun onReceive(context: Context, intent: Intent) {",114],["context: Context,",96],["c: Context?,",86]],"useCount":5100},{"word":"ConversationContext","context":[["override fun getFailedValidationText(context: ConversationContext?, invalidInput: String?): String {",39],["override fun getPromptText(context: ConversationContext): String {",155],["override fun getNextPrompt(context: ConversationContext): Prompt? {",40],["override fun acceptValidatedInput(context: ConversationContext, input: String): Prompt {",43],["override fun acceptInput(context: ConversationContext, input: String): Prompt {",11],["override fun acceptValidatedInput(context: ConversationContext, input: Number): Prompt {",12],["override fun getFailedValidationText(context: ConversationContext, invalidInput: String): String {",17],["override fun getNextPrompt(context: ConversationContext): Prompt {",36],["override fun isInputValid(context: ConversationContext, input: String): Boolean {",43]],"useCount":396},{"word":"CoreMatchers","context":[["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216],["Assert.assertThat(count, CoreMatchers.`is`(1L))",29],["import org.hamcrest.CoreMatchers.equalTo",76],["import org.hamcrest.CoreMatchers",60],["import org.hamcrest.CoreMatchers.`is`",50],["import org.hamcrest.CoreMatchers.not",19],["import org.hamcrest.CoreMatchers.notNullValue",15],["Assert.assertThat(count, CoreMatchers.`is`(0L))",14],["Assert.assertThat(result[1].string, CoreMatchers.`is`(\"string2\"))",12],["import org.hamcrest.CoreMatchers.*",31]],"useCount":522},{"word":"Created","context":[["* Created by yuriel on 8/13/16.",26],["* Created by cout970 on 20/05/2016.",25],["* Created by atsky on 11/21/14.",24],["* Created by yuriel on 7/24/16.",43],["* Created by debop",44],["* Created by Tlaster on 2016/9/2.",38],["* Created by kirillrozov on 9/13/15.",36],["* Created by Eugene Petrenko (eugene.petrenko@gmail.com)",31],["* Created with IntelliJ IDEA.",53],["* Created by dageev",87]],"useCount":1280},{"word":"DSLResultStub","context":[["var result: DSLResultStub? = null",289],["fun DSLResultStub.lparams(arg: ViewGroup.LayoutParams.() -> Unit) = layoutParams(arg)",35],["result = DSLResultStub.fromCurrentView()",289],["fun DSLResultStub.lparams(arg: FrameLayout.LayoutParams.() -> Unit) = layoutParams(arg)",55],["fun DSLResultStub.lparams(arg: LinearLayout.LayoutParams.() -> Unit) = layoutParams(arg)",19],["fun DSLResultStub.lparams(arg: AbsListView.LayoutParams.() -> Unit) = layoutParams(arg)",14]],"useCount":701},{"word":"Date","context":[["* Creation Date: 30/09/16",25],["val date = Date()",48],["val now = Date()",36],["*     val theDate = Date()",12],["var creationTime = Date()",22],["var modificationTime = Date()",21],["import java.sql.Date",21],["modificationTime = Date()",21],["* Date: 2016-06-13",13],["import java.util.Date",195]],"useCount":414},{"word":"DateTime","context":[["import org.joda.time.DateTime",358],["import hirondelle.date4j.DateTime",30],["val today = DateTime.today(TIME_ZONE)",16],["var time: DateTime? = null",12],["val now = DateTime.now()",13]],"useCount":429},{"word":"Delegates","context":[["val icsManager by Delegates.lazy {",12],["private var componentStore: MyComponentStore by Delegates.notNull()",13],["var icsManager: IcsManager by Delegates.notNull()",18],["private var testAppConfig: Path by Delegates.notNull()",11],["import kotlin.properties.Delegates",624]],"useCount":678},{"word":"DependsOn","context":[["DependsOn(\"GL_EXT_gpu_shader4\")..void(",24],["DependsOn(\"OpenGL13\")..void(",194],["DependsOn(\"OpenGL21\")..void(",18],["IgnoreMissing..DependsOn(\"GL_EXT_direct_state_access\")..void(",17],["DependsOn(\"GL_NV_gpu_program4\")..void(",24],["DependsOn(\"GL_EXT_texture_integer\")..void(",24],["DependsOn(\"OpenGL30\")..void(",107],["DependsOn(\"GL_EXT_direct_state_access\")..void(",24],["DependsOn(\"GL_ARB_vertex_program\")..void(",27],["DependsOn(\"OpenGL20\")..void(",61]],"useCount":559},{"word":"DeprecatedGL","context":[["DeprecatedGL..void(",499]],"useCount":499},{"word":"Description","context":[["<h5>Description</h5>",468],["override fun apply(base: Statement, description: Description): Statement {",63],["override fun finished(description: Description?) {",12],["import org.junit.runner.Description",73],["* Description:",59],["Description",45],["override fun starting(description: Description) {",15],["assert(Description(",18],["override fun describeTo(description: Description) {",31],["import org.hamcrest.Description",28]],"useCount":823},{"word":"Dialog","context":[[": ReadOnlyProperty<Dialog, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<Dialog, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<Dialog, V?> = optional(id, viewFinder)",16],["override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {",162],["import android.app.Dialog",231],[": ReadOnlyProperty<Dialog, V> = required(id, viewFinder)",16],["private val Dialog.viewFinder: Dialog.(Int) -> View?",15],["public fun <V : View> Dialog.bindViews(vararg ids: Int)",13],["public fun <V : View> Dialog.bindOptionalViews(vararg ids: Int)",13],["private val Dialog.viewFinder: Dialog.(Int) -> View?",15]],"useCount":550},{"word":"Document","context":[["import org.jdom.Document",33],["import org.w3c.dom.Document",36],["import com.intellij.openapi.editor.Document",110],["import org.jsoup.nodes.Document",71],["import org.springframework.data.mongodb.core.mapping.Document",14],["val element = if (parent == null || parent is Element) parent as Element? else (parent as Document).detachRootElement()",17],["override fun mangaDetailsParse(document: Document, manga: Manga) {",20],["private fun checkLineOffsets(document: Document, startLine: Int, endLine: Int, startOffset: Int, endOffset: Int) {",21],["private fun checkLineOffsets(fragment: LineFragment, before: Document, after: Document) {",21],["private fun checkLineOffsets(fragment: LineFragment, before: Document, after: Document) {",21]],"useCount":398},{"word":"DocumentException","context":[["@Throws(DocumentException::class)",249],["import org.brackit.xquery.xdm.DocumentException",56],["@Throws(OperationNotSupportedException::class, DocumentException::class)",29],["} catch (e: DocumentException) {",26]],"useCount":360},{"word":"E","context":[["p8: Promise<V8, E>,",24],["p7: Promise<V7, E>,",26],["p6: Promise<V6, E>,",28],["p9: Promise<V9, E>,",22],["p5: Promise<V5, E>,",30],["p10: Promise<V10, E>,",20],["p4: Promise<V4, E>,",32],["p3: Promise<V3, E>,",34],["* E-Mail: dp@altruix.co",213],["p2: Promise<V2, E>,",36]],"useCount":901},{"word":"Element","context":[["import org.w3c.dom.Element",62],["override fun beforeElementSaved(element: Element) {",30],["override fun saveLocally(element: Element?) {",30],["protected open fun beforeElementSaved(element: Element) {",32],["protected open fun beforeElementLoaded(element: Element) {",32],["if (JDOMUtil.areElementsEqual(oldState as Element?, newState)) {",36],["import javax.lang.model.element.Element",47],["if (oldState is Element) {",48],["import org.jsoup.nodes.Element",64],["import org.jdom.Element",296]],"useCount":1270},{"word":"Entity","context":[["import com.seventh_root.elysium.core.database.Entity",15],["import javax.persistence.Entity;",15],["import net.minecraft.entity.Entity",19],["import org.mongodb.morphia.annotations.Entity",21],["import com.almasb.ents.Entity",28],["import com.github.K0zka.kerub.model.Entity",51],["import javax.persistence.Entity",69],["import com.badlogic.ashley.core.Entity",86],["import core.architecture.EntityManager.Entity",15],["@Entity",140]],"useCount":473},{"word":"EnumConstant","context":[["EnumConstant(",492]],"useCount":492},{"word":"Env","context":[["private fun defmacro(ast: MalList, env: Env): MalType {",16],["val childEnv = Env(env)",28],["private fun fn_STAR(ast: MalList, env: Env): MalType {",28],["private fun is_macro_call(ast: MalType, env: Env): Boolean {",16],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["env = Env(firstEval.env, firstEval.params, evaluated.rest().seq())",28],["fun rep(input: String, env: Env): String =",31],["val repl_env = Env()",31],["fun eval_ast(ast: MalType, env: Env): MalType =",34],["fun eval(_ast: MalType, _env: Env): MalType {",28]],"useCount":306},{"word":"EventHandler","context":[["@Mod.EventHandler",44],["@EventHandler(priority = EventPriority.MONITOR)",16],["import org.bukkit.event.EventHandler",114],["@EventHandler",104],["import javafx.event.EventHandler",46],["@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)",43],["@EventHandler(priority = LOWEST, ignoreCancelled = true)",26]],"useCount":393},{"word":"Exception","context":[["@Throws(Exception::class)",561],["} catch(ignored: Exception) {",29],["} catch(e: Exception) {",349],["catch (e: Exception) {",260],["} catch (ex: Exception) {",157],["} catch(ex: Exception) {",107],["} catch (exception: Exception) {",50],["Timber.e(ex, \"Analytics Exception\");",36],["override fun onError(call: Call, e: Exception, id: Int) {",34],["} catch (e: Exception) {",1240]],"useCount":3132},{"word":"File","context":[["val file = File(dir, path)",18],["private fun useOldWorkspaceContent(filePath: String, ws: File) {",19],["checkSchemes(File(remoteBaseDir, \"REMOTE\"), expected, true)",22],["* To change this template use File | Settings | File Templates.",25],["* To change this template use File | Settings | File Templates.",25],["val file = File(filePath)",25],["val database = File(UUID.randomUUID().toString().replace(\"-\", \"\"))",33],["val file = File(path)",34],["import java.io.File",2474],["val oldWs = File(composeWsPath(filePath))",19]],"useCount":3146},{"word":"FileUtil","context":[[".connect { request -> request.saveToFile(FileUtil.createTempFile(\"ij.platform.\", \".patch\", true), indicator) }",13],["for (line in FileUtil.loadLines(onceInstalled)) {",15],["FileUtil.delete(tempFile)",13],["FileUtil.loadFile(file)",15],["import jetbrains.buildServer.util.FileUtil",16],["import com.intellij.openapi.util.io.FileUtil",400],["FileUtil.delete(file)",25],["val fileName = FileUtil.getNameWithoutExtension(file)",19],["FileUtil.copyContent(oldWs, ws)",19],["val fileBytes = FileUtil.loadFileBytes(file)",18]],"useCount":636},{"word":"Files","context":[["import java.nio.file.Files",315],["Files.delete(file)",24],["import com.google.common.io.Files",20],["Files.createFile(this)",13],["Files.delete(dir)",14]],"useCount":386},{"word":"Float","context":[["override fun calculate(t: Float, b: Float, c: Float, d: Float): Float {",25],["override fun render(delta: Float) {",37],["override fun calculate(t: Float, b: Float, c: Float, d: Float): Float {",25],["override fun touchUp(event : InputEvent?, x : Float, y : Float, ptr : Int, button : Int) {",21],["override fun calculate(t: Float, b: Float, c: Float, d: Float): Float {",25],["override fun getMethod(duration: Float): EasingMethod {",25],["override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {",34],["initWeight: Float,",30],["override fun calculate(t: Float, b: Float, c: Float, d: Float): Float {",25],["override fun calculate(t: Float, b: Float, c: Float, d: Float): Float {",25]],"useCount":517},{"word":"Fragment","context":[[": ReadOnlyProperty<Fragment, V> = required(id, viewFinder)",16],[": ReadOnlyProperty<Fragment, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<Fragment, V?> = optional(id, viewFinder)",16],[": ReadOnlyProperty<Fragment, List<V>> = required(ids, viewFinder)",16],["* A simple [Fragment] subclass.",21],["override fun getItem(position: Int): Fragment {",42],["import android.support.v4.app.Fragment",635],["import android.support.v4.app.Fragment as SupportFragment",49],["import android.app.Fragment",234],["override fun getItem(position: Int): Fragment? {",24]],"useCount":1176},{"word":"FrameLayout","context":[["val layoutParams = FrameLayout.LayoutParams(source!!)",100],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height, gravity)",92],["init: FrameLayout.LayoutParams.() -> Unit = defaultInit",208],["val layoutParams = android.widget.FrameLayout.LayoutParams(source!!)",242],["val layoutParams = android.widget.FrameLayout.LayoutParams(c!!, attrs!!)",92],["init: android.widget.FrameLayout.LayoutParams.() -> Unit = defaultInit",320],["import android.widget.FrameLayout",138],["source: android.widget.FrameLayout.LayoutParams?,",42],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height)",92],["fun DSLResultStub.lparams(arg: FrameLayout.LayoutParams.() -> Unit) = layoutParams(arg)",55]],"useCount":1549},{"word":"Function","context":[["* @param handled Function invoked with each value to determine the return value of the",56],["import java.util.function.Function",52],["* @param handled Function invoked each occurrence to determine the return value of the",31],["Build-in Function",32],["import com.intellij.util.Function",62],["val func = object : Function<VcsLogFilterCollection, MutableList<TimedVcsCommit>> {",12],["override fun setupStack(func: Function, qtype: Parameter, writer: PrintWriter) {",12],["Built-in Function:",12],["val attributeProvider = Function<String, String?> { parser.getAttributeValue(null, it) }",15],["attributeProvider: Function<String, String?>,",13]],"useCount":308},{"word":"GET","context":[["import retrofit2.http.GET",90],["import eu.kanade.tachiyomi.data.network.GET",11],["import org.springframework.web.bind.annotation.RequestMethod.GET",16],["import javax.ws.rs.GET",47],["import retrofit.http.GET",36],["@GET",133],["return GET(page.url, headers)",18]],"useCount":351},{"word":"GLboolean","context":[["GLboolean.IN(\"transpose\", uniformMatrixTranspose),",18],["GLboolean(",136],["GLboolean.IN(\"transpose\", \"\"),",89],["GLboolean.IN(\"transpose\", uniMatrixTranspose),",36],["GLboolean.IN(",22],["GLboolean.IN(\"transpose\", \"whether to transpose the matrix as the values are loaded into the uniform variable\"),",15]],"useCount":316},{"word":"GLenum","context":[["GLenum.IN(\"pname\", \"\"),",353],["GLenum.IN(\"target\", \"\"),",586],["GLenum.IN(\"attachment\", \"\"),",56],["GLenum.IN(\"matrixMode\", \"\"),",48],["GLenum.IN(\"type\", \"\"),",142],["GLenum.IN(\"texunit\", \"\"),",156],["GLenum.IN(",191],["GLenum.IN(\"internalformat\", \"\"),",100],["GLenum.IN(\"mode\", \"\"),",60],["GLenum.IN(\"format\", \"\"),",98]],"useCount":2340},{"word":"GLint","context":[["GLint.IN(\"yoffset\", \"\"),",66],["GLint.IN(\"location\", \"\"),",415],["GLint.IN(\"location\", uniLocation),",100],["GLint.IN(\"level\", \"\"),",213],["GLint.IN(\"size\", \"\"),",43],["GLint.IN(\"location\", uniformLocation),",50],["GLint.IN(\"x\", \"\"),",54],["GLint.IN(\"border\", \"\"),",52],["GLint.IN(\"y\", \"\"),",54],["GLint.IN(\"xoffset\", \"\"),",84]],"useCount":1602},{"word":"GLsizei","context":[["GLsizei.IN(\"stride\", \"\"),",50],["AutoSize(\"data\")..GLsizei.IN(\"imageSize\", \"\"),",50],["AutoSize(3, \"value\")..GLsizei.IN(\"count\", \"\"),",37],["AutoSize(2, \"value\")..GLsizei.IN(\"count\", \"\"),",37],["GLsizei.IN(\"stride\", \"the vertex stride in bytes. If specified as zero, then array elements are stored sequentially\"),",37],["AutoSize(\"value\")..GLsizei.IN(\"count\", \"\"),",39],["GLsizei.IN(\"width\", \"\"),",202],["GLsizei.IN(\"height\", \"\"),",118],["GLsizei.IN(\"depth\", \"\"),",62],["GLsizei.IN(\"height\", \"\")",54]],"useCount":1093},{"word":"GLuint","context":[["GLuint.IN(\"path\", \"\"),",156],["GLuint.IN(\"buffer\", \"\"),",80],["GLuint.IN(\"texture\", \"\"),",170],["GLuint.IN(\"index\", \"\"),",268],["GLuint.IN(\"program\", \"\"),",433],["GLuint.IN(\"program\", uniProgram),",100],["GLuint.IN(\"vaobj\", \"\"),",59],["GLuint.IN(\"index\", \"\")",58],["GLuint(",48],["GLuint.IN(\"index\", vertexAttribIndex),",42]],"useCount":2150},{"word":"Gdx","context":[["import com.badlogic.gdx.Gdx;",19],["Gdx.input.inputProcessor = this",11],["Gdx.app.exit()",11],["import com.badlogic.gdx.Gdx",207],["Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT)",47],["Gdx.input.inputProcessor = stage",22],["Gdx.gl.glClearColor(0f, 0f, 0f, 1f)",20]],"useCount":337},{"word":"Gson","context":[["import com.google.gson.Gson",308],["Gson().fromJson(String(error.errorData), VaultError::class.java).errors.joinToString()",13],["private val gson = Gson()",19],["val gson = Gson()",41]],"useCount":381},{"word":"Handler","context":[["private val handler = Handler()",22],["val handler = Handler()",20],["val handler = Handler(Looper.getMainLooper())",13],["Handler().postDelayed({",11],["override fun <T : EventInput<T>> accept(visitor: T, handler: EventInput.Handler<T>)",25],["Handler(Looper.getMainLooper()).post {",25],["import io.vertx.core.Handler",27],["Handler(Looper.getMainLooper()).post(object: Runnable {",31],["import android.os.Handler",249]],"useCount":423},{"word":"HashMap","context":[["val entityProtoMessageService = EntityMessageService(TestModelGMBuilder(), entityService, HashMap())",27],["import java.util.HashMap",377],["HashMap(),",69],["val data: HashMap<GraphCommit<Int>, Data>) {",14],["HashMap())",17],["val records = ProtobufUtils.convertProtobufObjectToRecords(testModel.build(), HashMap())",60],["val param = HashMap<String, String>()",53],["import com.intellij.util.containers.HashMap",24],["val map = HashMap<String, String>()",19],["Add and implement function 'buildMap' with one parameter (of type extension function) creating a new HashMap,",18]],"useCount":732},{"word":"Host","context":[["<h5>Host Synchronization</h5>",304],["val host = Host(",59],["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["\"Host access to {@code commandBuffer} $must be externally synchronized\"",49],["import com.github.K0zka.kerub.model.Host",170]],"useCount":682},{"word":"IDNode","context":[["val p0 = fragment.predecessors.invoke(IDNode(0))",44],["val s0 = fragment.successors.invoke(IDNode(0))",44],["val s2 = fragment.normalizedSuccessors(IDNode(2))",44],["val p1 = fragment.predecessors.invoke(IDNode(1))",44],["val s0 = fragment.normalizedSuccessors(IDNode(0))",44],["val p2 = fragment.predecessors.invoke(IDNode(2))",44],["val s1 = fragment.normalizedSuccessors(IDNode(1))",44],["val p2 = fragment.normalizedPredecessors(IDNode(2))",44],["val s2 = fragment.successors.invoke(IDNode(2))",44],["val p0 = fragment.normalizedPredecessors(IDNode(0))",44]],"useCount":577},{"word":"IN","context":[["GLint.IN(\"location\", \"\"),",415],["EGLDisplay.IN(\"dpy\", \"\"),",182],["GLuint.IN(\"program\", \"\"),",433],["GLenum.IN(\"target\", \"\"),",586],["GLenum.IN(\"pname\", \"\"),",353],["GLuint.IN(\"index\", \"\"),",268],["GLint.IN(\"level\", \"\"),",213],["GLsizei.IN(\"width\", \"\"),",202],["GLenum.IN(",191],["GLuint.IN(\"texture\", \"\"),",170]],"useCount":12485},{"word":"IOException","context":[["throws(javaClass<IOException>())",38],["* @throws IOException",41],["} catch(e: IOException) {",58],["catch (ignored: IOException) {",37],["import java.io.IOException",1213],["} catch (e: IOException) {",501],["catch (e: IOException) {",251],["@Throws(IOException::class)",581],["throws(IOException::class)",114],["} catch (ex: IOException) {",117]],"useCount":3151},{"word":"IllegalArgumentException","context":[["else -> throw IllegalArgumentException()",38],["else -> throw IllegalArgumentException(\"Unknown expression\")",29],["throw IllegalArgumentException(message)",25],["catch (e: IllegalArgumentException) {",25],["} catch(e: IllegalArgumentException) {",22],["throw IllegalArgumentException()",54],["} catch (e: IllegalArgumentException) {",117],["@Test(expected = IllegalArgumentException::class)",184],["throw IllegalArgumentException(\"Unknown macro: $m in storage file spec: $path\")",20],["throw IllegalArgumentException(\"Extension is missing for storage file: $filePath\")",20]],"useCount":667},{"word":"IllegalStateException","context":[["assertFailsWith(IllegalStateException::class) {",29],["throw IllegalStateException(\"Scheme file extension $fileName is unknown, must be filtered out\")",26],["@Test(expected = IllegalStateException::class)",65],["throw IllegalStateException()",50],["throw IllegalStateException(\"Save is prohibited now\")",20],["else -> throw IllegalStateException()",44],["throw IllegalStateException(\"Delete is prohibited now\")",20],["} catch (e: IllegalStateException) {",32],["throw IllegalStateException(\"View ID $id for '${desc.name}' not found.\")",18],["import java.lang.IllegalStateException",17]],"useCount":423},{"word":"ImageView","context":[["public var android.widget.ImageView.imageURI: android.net.Uri?",12],["get() = throw AnkoException(\"'android.widget.ImageView.imageBitmap' property does not have a getter\")",20],["import javafx.scene.image.ImageView",17],["private val image: ImageView by bindView(R.id.image)",13],["get() = throw AnkoException(\"'android.widget.ImageView.imageResource' property does not have a getter\")",12],["val view = android.widget.ImageView(ctx)",12],["public var android.widget.ImageView.imageBitmap: android.graphics.Bitmap?",12],["get() = throw AnkoException(\"'android.widget.ImageView.imageURI' property does not have a getter\")",20],["import android.widget.ImageView",390]],"useCount":508},{"word":"Implicit","context":[["<h5>Valid Usage (Implicit)</h5>",545]],"useCount":545},{"word":"Inject","context":[["@Inject lateinit var prefs: PrefsManager",13],["import javax.inject.Inject",1100],["@Inject",754],["import com.google.inject.Inject",183],["@set:Inject",64],["@Inject set",51],["@Inject internal lateinit var prefs: PrefsManager",11],["import com.github.czyzby.autumn.annotation.Inject;",11],["@Inject lateinit var db: DatabaseHelper",13],["@field:[Inject]",13]],"useCount":2213},{"word":"InputStream","context":[["override fun loadContent(fileSpec: String, roamingType: RoamingType): InputStream? {",17],["private fun loadScheme(fileName: CharSequence, input: InputStream, duringLoad: Boolean): E? {",17],["override fun read(fileSpec: String, roamingType: RoamingType): InputStream? {",23],["import java.io.InputStream",541],["override fun deserializeBody(stream: InputStream, context: TLContext) {",30]],"useCount":628},{"word":"Int","context":[["gravity: Int,",112],["override fun hashCode(): Int {",355],["height: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["val id: Int,",144],["override fun getCount(): Int {",133],["override fun getItemCount(): Int {",179],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {",151],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {",151],["override fun getItemId(position: Int): Long {",103],["width: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387]],"useCount":8934},{"word":"IntConstant","context":[["IntConstant(",3741]],"useCount":3741},{"word":"Intent","context":[["override fun onReceive(context: Context?, intent: Intent?) {",41],["override fun onBind(intent: Intent): IBinder? {",34],["override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {",42],["val intent = Intent()",56],["val intent = Intent(Intent.ACTION_SEND)",33],["val intent = Intent(Intent.ACTION_VIEW)",38],["val intent = Intent(Intent.ACTION_VIEW)",38],["import android.content.Intent",1471],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {",151],["override fun onReceive(context: Context, intent: Intent) {",114]],"useCount":2283},{"word":"Item","context":[["override fun matches(item: Item): Boolean {",12],["import org.brackit.xquery.xdm.Item",116],["import net.minecraft.item.Item",56],["import main.astraeus.game.model.entity.item.Item",13],["import POGOProtos.Inventory.Item.ItemIdOuterClass.ItemId",14],["var item: Item?",18],["override fun next(): Item? {",31],["override fun evaluateToItem(ctx: QueryContext, tuple: Tuple): Item? {",48]],"useCount":308},{"word":"JDOMUtil","context":[["val element = JDOMUtil.load(URLUtil.openStream(url))",15],["val newHash = JDOMUtil.getTreeHash(element!!, true)",16],["val element = JDOMUtil.load(input)",15],["if (JDOMUtil.isEmpty(element)) {",29],["if (newState == null || JDOMUtil.isEmpty(newState)) {",30],["info.hash = JDOMUtil.getTreeHash(element, true)",31],["if (JDOMUtil.areElementsEqual(oldState as Element?, newState)) {",36],["JDOMUtil.writeParent(this, out, \"\\n\")",14],["import com.intellij.openapi.util.JDOMUtil",161],["val documentElement = JDOMXIncluder.resolve(JDOMUtil.loadDocument(url), url.toExternalForm()).detachRootElement()",19]],"useCount":402},{"word":"JSONObject","context":[["import org.json.simple.JSONObject",45],["constructor(obj: JSONObject) {",34],["import org.json.JSONObject",250]],"useCount":329},{"word":"JsonProperty","context":[["@JsonProperty",50],["import com.fasterxml.jackson.annotation.JsonProperty",246],["@JsonProperty(\"id\")",22]],"useCount":318},{"word":"JvmField","context":[["@XmlElement @JvmField",14],["@Rule @JvmField",44],["@JvmField",1057]],"useCount":1115},{"word":"JvmName","context":[["@JvmName(\"averageOfFloat\")",16],["@JvmName(\"minOfDouble\")",16],["@JvmName(\"averageOfShort\")",16],["@JvmName(\"sumOfShort\")",16],["@JvmName(\"averageOfLong\")",16],["@JvmName(\"minOfInt\")",16],["@JvmName(\"sumOfInt\")",16],["@JvmName(\"averageOfDouble\")",16],["@JvmName(\"maxOfFloat\")",16],["@JvmName(\"sumOfFloat\")",16]],"useCount":384},{"word":"JvmOverloads","context":[["@JvmOverloads",575]],"useCount":575},{"word":"JvmStatic","context":[["@JvmStatic var outputSize = 1",18],["@JvmStatic var testingSet : TrainingSet<SupervisedTrainingElement>? = null",18],["@JvmStatic",1293],["@JvmStatic var inputSize = 8",18],["@JvmStatic var network : NeuralNetwork? = null",18],["@JvmStatic fun testNetwork() {",18],["@JvmStatic()",212],["@JvmStatic fun main(args: Array<String>) {",164],["@JvmStatic fun loadNetwork() {",18],["@JvmStatic var trainingSet : TrainingSet<SupervisedTrainingElement>? = null",18]],"useCount":1915},{"word":"K0zka","context":[["import com.github.K0zka.kerub.model.dynamic.HostDynamic",53],["import com.github.K0zka.kerub.model.Host",170],["import com.github.K0zka.kerub.planner.OperationalState",108],["import com.github.K0zka.kerub.model.ExpectationLevel",55],["package com.github.K0zka.kerub.data.ispn",58],["import com.github.K0zka.kerub.utils.toSize",61],["package com.github.K0zka.kerub.services.impl",69],["package com.github.K0zka.kerub.model",69],["import com.github.K0zka.kerub.model.VirtualMachine",83],["import com.github.K0zka.kerub.utils.getLogger",81]],"useCount":2403},{"word":"KClass","context":[["javaMethodType: KClass<*>,",12],["import kotlin.reflect.KClass",360]],"useCount":372},{"word":"LOG","context":[["private val log = LOG(javaClass)",45],["LOG.error(e)",478],["LOG.log(Level.SEVERE, null, ex)",91],["LOG.debug(e)",40],["LOG.warn(e)",85],["LOG.catchAndLog {",73],["if (LOG.isDebugEnabled()) {",67],["if (LOG.isDebugEnabled) {",55],["LOG.error(\"Cannot read scheme $fileName\", e)",43],["LOG.info(e)",46]],"useCount":1798},{"word":"LayoutInflater","context":[["import android.view.LayoutInflater",1152],["override fun onCreateView(inflater: LayoutInflater?,",23],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedState: Bundle?): View? {",25],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {",100],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,",68],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {",60],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,",51],["\"import android.view.LayoutInflater;\",",31],["\"  protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\",",31]],"useCount":1868},{"word":"LayoutParams","context":[["init: android.widget.FrameLayout.LayoutParams.() -> Unit = defaultInit",320],["source: android.view.ViewGroup.LayoutParams?,",100],["val layoutParams = FrameLayout.LayoutParams(source!!)",100],["val layoutParams = android.widget.FrameLayout.LayoutParams(c!!, attrs!!)",92],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height)",92],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height, gravity)",92],["init: FrameLayout.LayoutParams.() -> Unit = defaultInit",208],["val layoutParams = android.widget.FrameLayout.LayoutParams(source!!)",242],["width: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["height: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387]],"useCount":3396},{"word":"Level","context":[["import com.sbg.arena.core.Level",12],["import org.apache.log4j.Level",12],["import org.apache.logging.log4j.Level",16],["import com.jupiter.europa.world.Level",12],["LOG.log(Level.SEVERE, null, ex)",91],["LOG.log(Level.SEVERE, null, e)",32],["LOG.log(Level.SEVERE, { null }, ex)",30],["import java.util.logging.Level",158]],"useCount":363},{"word":"LinearLayout","context":[["init: android.widget.LinearLayout.LayoutParams.() -> Unit = defaultInit",46],["orientation = LinearLayout.HORIZONTAL",35],["orientation = LinearLayout.VERTICAL",30],["init: LinearLayout.LayoutParams.() -> Unit = defaultInit",29],["val layoutParams = android.widget.LinearLayout.LayoutParams(source!!)",20],["get() = throw AnkoException(\"'android.widget.LinearLayout.gravity' property does not have a getter\")",20],["fun DSLResultStub.lparams(arg: LinearLayout.LayoutParams.() -> Unit) = layoutParams(arg)",19],["orientation(LinearLayout.VERTICAL)",19],["val layoutParams = android.widget.LinearLayout.LayoutParams(width, height, weight)",12],["import android.widget.LinearLayout",276]],"useCount":590},{"word":"LinearLayoutManager","context":[["recyclerView.layoutManager = LinearLayoutManager(context)",11],["recyclerView.layoutManager = LinearLayoutManager(this)",23],["import android.support.v7.widget.LinearLayoutManager",358]],"useCount":392},{"word":"List","context":[["override fun setSchemes(newSchemes: List<T>, newCurrentScheme: T?, removeCondition: Condition<T>?) {",24],["fun example1(list: List<Int>) {",23],["val names: List<Name>,",53],["items: List<CharSequence>,",24],["|import java.util.List;",24],["public override fun check(): List<ErrorMessage> {",37],["val names: List<Name>",26],["override fun handleMessage(event: Message): List<Message> {",27],["override fun serverStatListResponse(num: Long, args: List<String>, connection: Connection): String {",27],["override fun playerStatResponse(name: String, args: List<String>, connection: Connection): String {",33]],"useCount":1093},{"word":"LocalDateTime","context":[["val event = eventService.createEvent(\"title\", LocalDateTime.now(), \"city\", Coord(0.0, 1.1), 36)",12],["import java.time.LocalDateTime",303],["import org.joda.time.LocalDateTime",17],["val event = eventService.createEvent(\"title\", LocalDateTime.now(), \"city\", Coord(0.0, 0.0), 36)",15],["import org.threeten.bp.LocalDateTime",15],["\"date\" to LocalDateTime.now().toEpochSecond(ZoneOffset.UTC)",14]],"useCount":376},{"word":"Log","context":[["Log.e(\"RootAPI\", \"result: ${ret.result}, error: ${ret.error}\")",23],["import org.klips.engine.util.Log",21],["Log.w(LOGTAG, e)",12],["import com.ystore.lib.log.Log",12],["Log.normal(\"Destination reached.\")",11],["import ink.abb.pogo.scraper.util.Log",80],["import android.util.Log",786],["import groovy.util.logging.Log",11]],"useCount":956},{"word":"Logger","context":[["private val LOG = Logger.getInstance(\"#com.intellij.openapi.updateSettings.impl.UpdateChecker\")",15],["import com.github.quarck.calnotify.logs.Logger",44],["import java.util.logging.Logger",186],["import com.intellij.openapi.diagnostic.Logger",290],["import org.slf4j.Logger",218],["import com.timepath.Logger",39],["private val LOG = Logger()",35],["import org.apache.log4j.Logger",17],["import com.github.projectsandstone.api.logging.Logger",17],["import org.apache.logging.log4j.Logger",15]],"useCount":929},{"word":"LoggerFactory","context":[["import org.slf4j.LoggerFactory",640],["private val log = LoggerFactory.getLogger(javaClass)",83],["import io.vertx.core.logging.LoggerFactory",21],["private val logger = LoggerFactory.getLogger(javaClass)",29]],"useCount":773},{"word":"Long","context":[["var id: Long = 0",59],["var timeInMillis: Long? = null",20],["override fun getItemId(position: Int): Long {",103],["var id: Long? = null",41],["val id: Long,",40],["var userId: Long? by longParam(\"user_id\")",29],["override fun serverStatListResponse(num: Long, args: List<String>, connection: Connection): String {",27],["val id: Long",27],["fun MyDate.toMillis(): Long {",20],["fun Long.toDate(): MyDate {",20]],"useCount":712},{"word":"MainActivity","context":[["import com.mgaetan89.showsrage.activity.MainActivity",13],["import fr.geobert.radis.MainActivity",11],["if (activity is MainActivity) {",14],["public class MainActivity : ActionBarActivity() {",14],["val intent = Intent(this, MainActivity::class.java)",15],["import eu.kanade.tachiyomi.ui.main.MainActivity",18],["public class MainActivity : AppCompatActivity() {",20],["class MainActivity : BaseActivity() {",23],["class MainActivity : Activity() {",27],["class MainActivity : AppCompatActivity() {",168]],"useCount":334},{"word":"MalSymbol","context":[["if (is_pair(first) && ((first as ISeq).first() as? MalSymbol)?.value == \"splice-unquote\") {",21],["consed.conj_BANG(MalSymbol(\"cons\"))",21],["spliced.conj_BANG(MalSymbol(\"concat\"))",21],["\"def!\" -> return env.set(ast.nth(1) as MalSymbol, eval(ast.nth(2), env))",22],["when ((ast.first() as? MalSymbol)?.value) {",22],["repl_env.set(MalSymbol(\"eval\"), MalFunction({ a: ISeq -> eval(a.first(), repl_env) }))",25],["is MalSymbol -> env.get(ast)",26],["val params = binds.seq().filterIsInstance<MalSymbol>()",28],["childEnv.set(key as MalSymbol, eval(it.next(), childEnv))",28],["quoted.conj_BANG(MalSymbol(\"quote\"))",21]],"useCount":312},{"word":"MalType","context":[["fun eval(_ast: MalType, _env: Env): MalType {",28],["override fun with_meta(meta: MalType): MalType {",36],["override fun with_meta(meta: MalType): MalType {",36],["fun eval(_ast: MalType, _env: Env): MalType {",28],["private fun fn_STAR(ast: MalList, env: Env): MalType {",28],["override var metadata: MalType = NIL",27],["fun print(result: MalType) = pr_str(result, print_readably = true)",38],["fun eval_ast(ast: MalType, env: Env): MalType =",34],["fun eval_ast(ast: MalType, env: Env): MalType =",34],["fun read(input: String?): MalType = read_str(input)",38]],"useCount":491},{"word":"MapToInt","context":[["MapToInt..uint16_t.IN(\"_y\", \"position y from the top corner of the window\"),",16],["MapToInt..uint8_t.IN(\"_stage\", \"texture unit\"),",14],["MapToInt..uint16_t.IN(\"_x\", \"position x from the left corner of the window\"),",16],["MapToInt..uint8_t.IN(\"_id\", \"view id\"),",75],["MapToInt..uint16_t.IN(\"_width\", \"width\"),",13],["MapToInt..uint8_t.IN(\"_mip\", \"mip level\"),",18],["MapToInt..uint16_t.IN(\"_height\", \"height\"),",13],["MapToInt..uint8_t.IN(\"_stage\", \"compute stage\"),",20],["MapToInt..uint16_t.IN(",22],["MapToInt..uint16_t.IN(\"_flags\", \"buffer creation flags\", BufferFlags, LinkMode.BITFIELD)",24]],"useCount":315},{"word":"Matchers","context":[["import org.hamcrest.Matchers.notNullValue",13],["import org.hamcrest.Matchers",24],["import org.mockito.Matchers",62],["import org.hamcrest.Matchers.equalTo",63],["import org.hamcrest.Matchers.*",34],["import org.hamcrest.Matchers.`is`",36],["import org.mockito.Matchers.eq",17],["Matchers.anyInt(),",16],["import org.mockito.Matchers.anyString",15],["import org.mockito.Matchers.*",13]],"useCount":304},{"word":"Menu","context":[["override fun onCreateOptionsMenu(menu: Menu?): Boolean {",71],["override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {",45],["override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {",40],["override fun onCreateActionMode(mode: ActionMode, menu: Menu): Boolean {",21],["override fun onPrepareActionMode(mode: ActionMode, menu: Menu): Boolean {",17],["override fun onPrepareOptionsMenu(menu: Menu): Boolean {",15],["override fun onCreateOptionsMenu(menu: Menu): Boolean {",211],["import android.view.Menu",353]],"useCount":773},{"word":"MenuItem","context":[["import android.view.MenuItem",546],["override fun onOptionsItemSelected(item: MenuItem): Boolean {",336],["override fun onOptionsItemSelected(item: MenuItem?): Boolean {",129],["override fun onNavigationItemSelected(item: MenuItem): Boolean {",33],["override fun onActionItemClicked(mode: ActionMode, item: MenuItem): Boolean {",22],["override fun onMenuItemClick(item: MenuItem): Boolean {",18],["override fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {",15],["* *Warning:* The created observable uses [MenuItem.setOnActionExpandListener] to",12]],"useCount":1111},{"word":"Message","context":[["override fun handleMessage(event: Message): List<Message> {",27],["override fun handleMessage(event: Message): List<Message> {",27],["override fun handleMessage(msg: Message) {",21],["data class Message(",20],["import android.os.Message;",18],["import android.os.Message",34],["val responses = arrayListOf<Message>()",47],["import javabot.Message",50],["): Observable<Response<Message>> =",15],["override fun execute(event: Message): List<Message> {",14]],"useCount":370},{"word":"Minecraft","context":[["*      SandstoneAPI - Minecraft Server Modding API",176],["import net.minecraft.client.Minecraft",92],["Commandspy - A Minecraft server plugin to facilitate real-time usage of commands, and sign-changes",49]],"useCount":317},{"word":"Mock","context":[["import org.mockito.Mock",170],["@Mock",251]],"useCount":421},{"word":"Mockito","context":[["import org.mockito.Mockito.verify",61],["val mock = Mockito.mock(A::class.java)",17],["val element = Mockito.mock(VariableElement::class.java)",15],["val annotation = Mockito.mock(Attribute::class.java)",14],["import org.mockito.Mockito",284],["Mockito.doAnswer {",14],["import org.mockito.Mockito.*",112],["import org.mockito.Mockito.mock",80],["import org.mockito.Mockito.`when`",64],["import org.mockito.Mockito.spy",13]],"useCount":698},{"word":"Module","context":[["for (module in (ModuleManager.getInstance(project)?.modules ?: Module.EMPTY_ARRAY)) {",12],["import org.jetbrains.haskell.psi.Module",12],["private var sharedModule: Module? = null",12],["override fun moduleCreated(module: Module) {",12],["import com.intellij.openapi.module.Module",192],["val module: Module",12],["import toothpick.config.Module",21],["import org.brackit.xquery.module.Module",13],["@Module",271],["import dagger.Module",278]],"useCount":846},{"word":"MutableList","context":[["private val macros: MutableList<Macro> = ContainerUtil.createLockFreeCopyOnWriteList()",20],["private inline fun MutableList<Throwable>.catch(runnable: () -> Unit) {",21],["override fun after(events: MutableList<out VFileEvent>) {",21],["val bookmarkList: MutableList<BookmarkEntity> = mutableListOf()",17],["var result: MutableList<FileBasedStorage>? = null",21],["var result: MutableList<Storage>? = null",16],["var errors: MutableList<Throwable>? = null",47],["fun save(errors: MutableList<Throwable>) {",26],["private fun removeDirectoryIfEmpty(errors: MutableList<Throwable>) {",22],["var saveSessions: MutableList<SaveSession>? = null",21]],"useCount":321},{"word":"MyDate","context":[["fun checkInRange(date: MyDate, first: MyDate, last: MyDate): Boolean {",17],["import iii_conventions.MyDate",17],["references = { date: MyDate, timeInterval: TimeInterval ->",17],["references = { date: MyDate -> date.toMillis().toDate()}",18],["fun MyDate.toMillis(): Long {",20],["return MyDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE))",20],["class EffectiveDate<R> : ReadWriteProperty<R, MyDate> {",20],["fun Long.toDate(): MyDate {",20],["Add all changes to the file MyDate.kt.",50],["fun checkInRange(date: MyDate, first: MyDate, last: MyDate): Boolean {",17]],"useCount":465},{"word":"NOTHING_TO_INLINE","context":[["@file:Suppress(\"NOTHING_TO_INLINE\")",63],["@suppress(\"NOTHING_TO_INLINE\")",785],["@Suppress(\"NOTHING_TO_INLINE\")",74]],"useCount":922},{"word":"NULL","context":[["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["\"{@code pNext} $must be $NULL\",",68],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["\"on return, contains the length of the returned array. If {@code outCount} is $NULL, the length is not returned\"",12],["nullable..const..charptr.IN(\"end\", \"a pointer to the end of the sub-string to measure, or $NULL\"),",12],["RETURN(NULL)",12],["'otherValue', INT(NULL)",14],["'value', STRING(NULL),",14],["and {@code param_value} is not $NULL.",18],["returnDoc = \"the previously set callback, or $NULL if no callback was set\",",27]],"useCount":448},{"word":"Native","context":[["documentation = \"Native bindings to the $extensionName extension.\"",28],["Native bindings to the $registryLink extension.",714],["Native bindings to the $extensionName extension.",50],["Native bindings to the $extensionLink extension.",42],["Native bindings to the $specLinkOpenALSoft extension.",23],["import com.sun.jna.Native",23]],"useCount":880},{"word":"Neither","context":[["*     * Neither the name of the Brackit Project Team nor the",405],["*     * Neither the name of developer (Sergey Parshin) nor the",15]],"useCount":420},{"word":"OUT","context":[["Check(1)..ReturnParam..GLint_p.OUT(\"params\", \"\")",42],["Check(1)..EGLint_p.OUT(\"value\", \"\")",14],["ReturnParam..Check(1)..GLint_p.OUT(\"params\", \"\")",51],["Check(1)..ReturnParam..GLfloat_p.OUT(\"params\", \"\")",24],["ReturnParam..Check(1)..GLuint_p.OUT(\"params\", \"\")",18],["ReturnParam..GLfloat_p.OUT(\"params\", \"the buffer in which to place the returned data\")",18],["TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",29],["Check(1)..nullable..GLsizei_p.OUT(\"length\", \"\"),",35],["* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",16],["Check(1)..EGLAttrib_p.OUT(\"value\", \"\")",14]],"useCount":407},{"word":"Observable","context":[["import rx.Observable",1576],["return Observable.defer {",20],["Observable.create { sub ->",19],["Observable.merge(",19],[".flatMap { Observable.from(it) }",20],["Observable.fromCallable {",22],["Observable",25],["import io.reactivex.Observable",32],["import rx.Observable.just",36],["return Observable.create { subscriber ->",121]],"useCount":2099},{"word":"Override","context":[["if (overrides) println(\"$indent@Override\")",118],["@Override",293],["////            @Override",71],[".addAnnotation(Override::class.java)",59],["\"  @Override\",",58],["\"import java.lang.Override;\",",26]],"useCount":625},{"word":"Pair","context":[["Pair(",22],["model.allNodes().entries.map { Pair(it.key, model.stateColors(it.key)) }",28],["import com.intellij.openapi.util.Pair",56],["params: Array<out Pair<String, Any>>",18],["1.r(), Pair(1, 2).r()",21],[".header(Pair(\"X-Vault-Token\", conf.token))",22],["import android.util.Pair",26],["Pair(IDNode(it), c)",28],["protected open fun beforeSave(readonlyFiles: List<Pair<SaveSession, VirtualFile>>) {",19],["references = { 1.r(); Pair(1, 2).r(); RationalNumber(1, 9) })",21]],"useCount":533},{"word":"Parameterized","context":[["import org.junit.runners.Parameterized.Parameters",16],["@RunWith(Parameterized::class)",160],["@Parameterized.Parameters",82],["import org.junit.runners.Parameterized",144]],"useCount":402},{"word":"Parcel","context":[["import org.parceler.Parcel",12],["@Parcel(Parcel.Serialization.BEAN)",15],["import android.os.Parcel",186],["protected constructor(`in`: Parcel) {",11],["@Parcel(Parcel.Serialization.BEAN)",15],["constructor(source: Parcel) {",15],["override fun writeToParcel(dest: Parcel?, flags: Int) {",45],["override fun writeToParcel(dest: Parcel, flags: Int) {",81]],"useCount":380},{"word":"Path","context":[["import android.graphics.Path",18],["override fun visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult {",18],["import retrofit.http.Path",12],["@Path(\"/{id}\")",24],["import retrofit2.http.Path",41],["import javax.ws.rs.Path",67],["@Path(\"/\")",17],["import java.nio.file.Path",464],["import org.apache.tools.ant.types.Path",15],["override fun postVisitDirectory(dir: Path, exc: IOException?): FileVisitResult {",15]],"useCount":725},{"word":"Paths","context":[["val file = Paths.get(project.stateStore.stateStorageManager.expandMacros(PROJECT_FILE))",11],["import java.nio.file.Paths",422]],"useCount":433},{"word":"Pattern","context":[["private val MACRO_PATTERN = Pattern.compile(\"(\\\\$[^\\\\$]*\\\\$)\")",16],["import java.util.regex.Pattern",360]],"useCount":376},{"word":"Player","context":[["override fun executedByPlayer(player: Player, args: CommandContext): CommandResult {",11],["import net.gtaun.shoebill.`object`.Player",18],["override fun handlePacket(player: Player, packet: IncomingPacket) {",26],["if (sender is Player) {",25],["import net.gtaun.shoebill.entities.Player",18],["import org.spongepowered.api.entity.living.player.Player",31],["override fun writePacket(player: Player): GamePacketBuilder {",51],["if (conversable is Player) {",56],["import main.astraeus.game.model.entity.mob.player.Player",109],["import org.bukkit.entity.Player",142]],"useCount":487},{"word":"PointerMapping","context":[["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT",71],["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT, PointerMapping.DATA_DOUBLE",65],["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT, PointerMapping.DATA_DOUBLE",65],["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT",71],["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT",71],["PointerMapping.DATA_INT,",86],["PointerMapping.DATA_SHORT,",86],["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT, PointerMapping.DATA_DOUBLE",65],["PointerMapping.DATA_SHORT, PointerMapping.DATA_INT, PointerMapping.DATA_FLOAT, PointerMapping.DATA_DOUBLE",65],["PointerMapping.DATA_INT",52]],"useCount":874},{"word":"ProgressIndicator","context":[["override fun fetch(indicator: ProgressIndicator?): Updater {",13],["override fun resetToTheirs(indicator: ProgressIndicator) = Reset(this, indicator).reset(true)",13],["override fun push(indicator: ProgressIndicator?) {",13],["fun installPluginUpdates(downloaders: Collection<PluginDownloader>, indicator: ProgressIndicator): Boolean {",14],["indicator: ProgressIndicator?) {",15],["indicator: ProgressIndicator?,",30],["override fun run(indicator: ProgressIndicator) {",68],["import com.intellij.openapi.progress.ProgressIndicator",165]],"useCount":331},{"word":"Project","context":[["import com.intellij.openapi.project.Project",896],["import com.beust.kobalt.api.Project",81],["override fun initiate(project: Project) {",24],["* Project: TachiServer",28],["override fun apply(project: Project) {",32],["import org.gradle.api.Project",65],["*     * Neither the name of the Brackit Project Team nor the",405],["override fun initiateDependencies(project: Project) {",36],["project: Project,",45],["import com.github.czyzby.setup.data.project.Project",48]],"useCount":2069},{"word":"Promise","context":[["Promise.logError(LOG, it)",28],["p5: Promise<V5, E>,",30],["p4: Promise<V4, E>,",32],["p6: Promise<V6, E>,",28],["Promise.State.PENDING -> {",27],["import org.jetbrains.concurrency.Promise",183],["import nl.komponents.kovenant.Promise",79],["p3: Promise<V3, E>,",34],["p2: Promise<V2, E>,",36],["val promises = SmartList<Promise<*>>()",37]],"useCount":811},{"word":"Properties","context":[["val properties = Properties()",38],["//========== Properties ===========",46],["import java.util.Properties",48],["// Properties",89],["<h5>Command Properties</h5>",108],["val props = Properties()",24],["val data = Properties()",30]],"useCount":383},{"word":"Property","context":[["var type: String? by Property()",26],["@Property(surroundWithTag = false)",43],["var name: String? by Property()",39],["var form: String? by Property()",33],["@Property",28],["var src: String? by Property()",27],["var height: Int? by Property()",21],["var width: Int? by Property()",21],["var autoFocus: Boolean? by Property()",15],["var value: String? by Property()",16]],"useCount":332},{"word":"Provides","context":[["@Provides @ActivityScope",29],["import dagger.Provides",260],["@Provides",623],["@Provides @Singleton",68]],"useCount":980},{"word":"PsiElement","context":[["override fun invoke(project: Project, editor: Editor?, element: PsiElement) {",13],["override fun visitElement(element: PsiElement) {",13],["override fun isAvailable(project: Project, editor: Editor?, element: PsiElement): Boolean {",14],["override fun isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean {",11],["override fun setName(name: String): PsiElement? {",16],["override fun invoke(project: Project, editor: Editor, element: PsiElement) {",22],["override fun annotate(element: PsiElement, holder: AnnotationHolder) {",26],["override fun visitElement(element: PsiElement?) {",19],["import com.intellij.psi.PsiElement",660]],"useCount":794},{"word":"Public","context":[["* This Source Code Form is subject to the terms of the Mozilla Public",179],["// Public Methods",64],["/* This Source Code Form is subject to the terms of the Mozilla Public",81]],"useCount":324},{"word":"QueryContext","context":[["override fun evaluateToItem(ctx: QueryContext, tuple: Tuple): Item? {",48],["override fun evaluate(ctx: QueryContext, tuple: Tuple): Sequence? {",45],["import org.brackit.xquery.QueryContext",156],["override fun create(ctx: QueryContext, tuple: Tuple): Cursor {",13],["override fun create(ctx: QueryContext, t: Array<Tuple>, len: Int): Cursor {",13],["override fun open(ctx: QueryContext) {",16],["override fun close(ctx: QueryContext) {",16],["override fun next(ctx: QueryContext): Tuple? {",16],["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81]],"useCount":404},{"word":"QueryException","context":[["@Throws(QueryException::class)",900],["import org.brackit.xquery.QueryException",273],["throw QueryException(",139],["throw QueryException(ErrorCode.ERR_TYPE_INAPPROPRIATE_TYPE,",38],["throw QueryException(ErrorCode.ERR_INVALID_VALUE_FOR_CAST,",38],["} catch (e: QueryException) {",30],["throw QueryException(ErrorCode.ERR_INVALID_ARGUMENT_TYPE,",18],["throw QueryException(ErrorCode.BIT_DYN_RT_OUT_OF_BOUNDS_ERROR,",12]],"useCount":1448},{"word":"R","context":[["import org.droidplanner.android.R",75],["import com.mgaetan89.showsrage.R",89],["import de.ph1b.audiobook.R",74],["if (id == R.id.action_settings) {",77],["android.R.id.home -> {",85],["val toolbar = findViewById(R.id.toolbar) as Toolbar",86],["setContentView(R.layout.activity_main)",338],["return object : RowParser<R> {",88],["import eu.kanade.tachiyomi.R",157],["import de.vanita5.twittnuker.R",105]],"useCount":3754},{"word":"ReadOnlyProperty","context":[[": ReadOnlyProperty<View, List<V>> = required(ids, viewFinder)",17],[": ReadOnlyProperty<Activity, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<ViewHolder, V?> = optional(id, viewFinder)",16],[": ReadOnlyProperty<View, List<V>> = optional(ids, viewFinder)",17],[": ReadOnlyProperty<Activity, V> = required(id, viewFinder)",16],[": ReadOnlyProperty<View, V?> = optional(id, viewFinder)",17],[": ReadOnlyProperty<ViewHolder, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<Activity, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<View, V> = required(id, viewFinder)",17],["import kotlin.properties.ReadOnlyProperty",60]],"useCount":452},{"word":"Realm","context":[["Realm.getDefaultInstance().use {",11],["val realm = Realm.getDefaultInstance()",50],["Realm.getInstance(context).use {",95],["import io.realm.Realm",158],["Realm.getInstance(context).use { realm ->",228]],"useCount":542},{"word":"RecyclerView","context":[["val params = child.layoutParams as RecyclerView.LayoutParams",23],["class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {",19],["override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) {",18],["override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {",24],["class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {",24],["if (adapterPosition != RecyclerView.NO_POSITION) {",26],["override fun onScrolled(recyclerView: RecyclerView?, dx: Int, dy: Int) {",30],["override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {",31],["import android.support.v7.widget.RecyclerView.ViewHolder",54],["import android.support.v7.widget.RecyclerView",967]],"useCount":1296},{"word":"Redistribution","context":[["// Redistribution and use in source and binary forms, with or without",126],["* Redistribution and use in source and binary forms, with or without",450],["* Redistribution and use in source and binary forms,",26]],"useCount":602},{"word":"Request","context":[["import okhttp3.Request",80],["import com.github.jsocle.requests.Request",14],["import node.express.Request",15],["import org.jetbrains.jsonProtocol.Request",19],["override fun handleReq(request: Request, response: Response): Any {",24],["import com.squareup.okhttp.Request",37],["val request = Request.Builder()",40],["import spark.Request",67],["// Request",93]],"useCount":389},{"word":"Response","context":[["import retrofit.client.Response",26],["import javax.ws.rs.core.Response",70],["import com.squareup.okhttp.Response",67],["import spark.Response",62],["import retrofit2.Response",51],["override fun handleReq(request: Request, response: Response): Any {",24],["* @return {@link kontrol.doclient.Response}",19],["override fun intercept(chain: Interceptor.Chain): Response {",19],["override fun pageListParse(response: Response, pages: MutableList<Page>) {",16],["import okhttp3.Response",78]],"useCount":489},{"word":"Retention","context":[["Retention(RetentionPolicy.RUNTIME)",20],["import java.lang.annotation.Retention",29],["@Retention(AnnotationRetention.SOURCE)",48],["@Retention(AnnotationRetention.RUNTIME)",166],["@Retention(RUNTIME)",16],["@Retention(RetentionPolicy.RUNTIME)",14],["@Retention",11]],"useCount":304},{"word":"Return","context":[["// Return a list of the customers who live in the given city",15],["// Return all products ordered by customer",18],["// Return the set of cities the customers are from",19],["// Return all products that were ordered by at least one customer",14],["// Return true if there is at least one customer from the given city",14],["// Return a customer who lives in the given city, or null if there is none",14],["// Return true if all customers are from the given city",14],["// Return customers who have more undelivered orders than delivered",15],["Return(",50],["<h5>Return Codes</h5>",148]],"useCount":442},{"word":"RoamingType","context":[["override fun write(fileSpec: String, content: ByteArray, size: Int, roamingType: RoamingType) {",28],["override fun read(fileSpec: String, roamingType: RoamingType): InputStream? {",23],["override fun delete(fileSpec: String, roamingType: RoamingType) {",65],["roamingType: RoamingType,",35],["override fun saveContent(fileSpec: String, content: ByteArray, size: Int, roamingType: RoamingType) {",17],["override fun loadContent(fileSpec: String, roamingType: RoamingType): InputStream? {",17],["private fun getMap(roamingType: RoamingType): MutableMap<String, String> {",17],["val storage = getOrCreateStorage(collapseMacros(path), RoamingType.DEFAULT) as FileBasedStorage",16],["roamingType: RoamingType? = null,",16],["import com.intellij.openapi.components.RoamingType",161]],"useCount":540},{"word":"Rule","context":[["@Rule",90],["import org.junit.Rule",324],["@Rule fun getChain() = ruleChain",37],["@Rule fun getTemporaryFolder() = tempDirManager",25],["public Rule fun getTemporaryFolder(): TemporaryDirectory = tempDirManager",18],["public Rule fun getChain(): RuleChain = ruleChain",16],["@get:Rule",41],["@Rule @JvmField",44]],"useCount":595},{"word":"RunWith","context":[["@RunWith(MockitoJUnitRunner::class)",99],["@RunWith(RobolectricGradleTestRunner::class)",95],["@RunWith(RobolectricTestRunner::class)",80],["@RunWith(SpringJUnit4ClassRunner::class)",63],["@RunWith(JUnit4::class)",36],["@RunWith(SpringRunner::class)",22],["@RunWith(PowerMockRunner::class)",19],["@RunWith(AndroidJUnit4::class)",141],["@RunWith(Parameterized::class)",160],["import org.junit.runner.RunWith",867]],"useCount":1611},{"word":"RuntimeException","context":[["throw RuntimeException(e)",99],["throw RuntimeException(ex)",11],["class NoRemoteRepositoryException(cause: Throwable) : RuntimeException(cause.getMessage(), cause)",11],["else -> throw RuntimeException()",12],["errors.add(RuntimeException(\"Cannot save scheme $fileSpec/$scheme\", e))",20],["@Test(expected = RuntimeException::class)",35],["} catch (e: RuntimeException) {",58],["throw RuntimeException()",102]],"useCount":348},{"word":"SQLException","context":[["} catch(e: SQLException) {",16],["@Synchronized @Throws(SQLException::class)",17],["import java.sql.SQLException",123],["} catch (exception: SQLException) {",33],["* @throws SQLException",50],["} catch (e: SQLException) {",73],["@Throws(SQLException::class)",229]],"useCount":541},{"word":"Schedulers","context":[["import rx.schedulers.Schedulers",443],[".subscribeOn(Schedulers.io())",241],[".subscribeOn(Schedulers.newThread())",82],[".observeOn(Schedulers.immediate())",39],["return Schedulers.immediate()",13],[".observeOn(Schedulers.io())",16],["uiScheduler = Schedulers.immediate(),",19],["}.subscribeOn(Schedulers.io())",19],[".subscribeOn(Schedulers.computation())",22],[".subscribeOn(Schedulers.immediate())",37]],"useCount":944},{"word":"Sebastian","context":[["* @author Sebastian Baechle",367]],"useCount":367},{"word":"See","context":[["<h5>See Also</h5>",602],["<li>The See Also section for other reference pages using this type.</li>",88],["* See XML file by [ApplicationInfoEx.getUpdateUrls] for reference.",15]],"useCount":705},{"word":"Sequence","context":[["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81],["override fun getNonStaticMethodsIn(project: Project): Sequence<RustFnElement> =",12],["members: Sequence<StructMember>,",24],["override fun evaluate(ctx: QueryContext, tuple: Tuple): Sequence? {",45],["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81],["import org.brackit.xquery.xdm.Sequence",168]],"useCount":411},{"word":"Serializable","context":[[") : Serializable {",16],["import com.badlogic.gdx.utils.Json.Serializable",20],["// Serializable (Json) Implementation",20],[") : Serializable",38],["import java.io.Serializable",412]],"useCount":506},{"word":"SerializedName","context":[["@SerializedName(\"created_at\")",12],["@SerializedName(\"name\")",14],["@SerializedName(\"id\")",22],["import com.google.gson.annotations.SerializedName",292]],"useCount":340},{"word":"Service","context":[["return Service.START_STICKY",23],["import android.app.Service",107],["@Service",119],["import org.springframework.stereotype.Service",120]],"useCount":369},{"word":"SharedPreferences","context":[["override fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, key: String) {",12],["import android.content.SharedPreferences",385],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28],["private lateinit var preference: SharedPreferences",24],["private fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, key: PreferenceKey) {",15],["prefs: SharedPreferences,",14],["override fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, keyString: String) {",14],["* @param prefs the SharedPreferences where the property values are stored.",12],["* The instance of the SharedPreferences are provided over",12],["import android.content.SharedPreferences.OnSharedPreferenceChangeListener",15]],"useCount":531},{"word":"Side","context":[["0.ignore(Side.RIGHT, true)",15],["0.apply(Side.RIGHT)",80],["0.ignore(Side.LEFT)",20],["equal(0, 0, 10, Side.RIGHT)",21],["@SideOnly(Side.CLIENT)",27],["0.ignore(Side.RIGHT)",25],["0.apply(Side.LEFT)",65],["import net.minecraftforge.fml.relauncher.Side",61],["equal(0, 0, 10, Side.LEFT)",28],["import com.intellij.diff.util.Side",47]],"useCount":446},{"word":"Singleton","context":[["import javax.inject.Singleton",359],["@Provides @Singleton",68],["import com.google.inject.Singleton",60],["@Singleton",563]],"useCount":1050},{"word":"SmartList","context":[["val errors = SmartList<Throwable>()",32],["val promises = SmartList<Promise<*>>()",37],["errors = SmartList()",19],["val schemesToSave = SmartList<E>()",17],["val list = SmartList<E>()",17],["errors = SmartList<Throwable>()",52],["import com.intellij.util.SmartList",307],["result = SmartList<FileBasedStorage>()",21],["val result = SmartList<Storage>()",22],["saveSessions = SmartList<SaveSession>()",21]],"useCount":623},{"word":"Source","context":[["import eu.kanade.tachiyomi.data.source.Source",35],["import eu.kanade.tachiyomi.data.source.base.Source",13],["* Source manager.",18],["import com.jayrave.falkon.engine.Source",18],["/* This Source Code Form is subject to the terms of the Mozilla Public",81],["* This Source Code Form is subject to the terms of the Mozilla Public",179]],"useCount":344},{"word":"Specification","context":[["<li>The Vulkan Specification.</li>",88],["<h5>C Specification</h5>",351]],"useCount":439},{"word":"State","context":[["Promise.State.PENDING -> {",27],["enum class State {",27],["import com.intellij.openapi.components.State",41],["return CheckForUpdateResult(UpdateStrategy.State.CONNECTION_ERROR, e)",28],["return CheckForUpdateResult(UpdateStrategy.State.NOTHING_LOADED, null)",30],["private enum class State {",27],["Promise.State.FULFILLED -> {",20],["state = State.HEADER",20],["override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) {",18],["if (manualCheck && result.state == UpdateStrategy.State.LOADED) {",15]],"useCount":387},{"word":"StateStorage","context":[["private val sessions = LinkedHashMap<StateStorage, StateStorage.ExternalizationSession>()",15],["private val sessions = LinkedHashMap<StateStorage, StateStorage.ExternalizationSession>()",15],["private fun getExternalizationSession(storage: StateStorage): StateStorage.ExternalizationSession? {",15],["private fun getExternalizationSession(storage: StateStorage): StateStorage.ExternalizationSession? {",15],["fun reload(changedStorages: Set<StateStorage>): Collection<String>? {",16],["private fun reloadState(componentName: String, changedStorages: Set<StateStorage>): Boolean {",16],["return constructor.newInstance(componentManager!!, this) as StateStorage",20],["private val storages = THashMap<String, StateStorage>()",20],["import com.intellij.openapi.components.StateStorage.SaveSession",63],["import com.intellij.openapi.components.StateStorage",95]],"useCount":394},{"word":"String","context":[["val name: String",171],["title: String? = null,",71],["fun main(args : Array<String>) {",75],["var name: String? = null",96],["name: String,",128],["override fun getPromptText(context: ConversationContext): String {",155],["override fun toString(): String {",998],["fun main(args: Array<String>) {",970],["val name: String,",367],["@JvmStatic fun main(args: Array<String>) {",164]],"useCount":12963},{"word":"StringBuilder","context":[["val out = StringBuilder()",24],["val s = StringBuilder()",22],["val buffer = StringBuilder()",18],["fun buildString(build: StringBuilder.() -> Unit): String {",18],["val log = StringBuilder()",17],["override fun render(s: StringBuilder) {",16],["val builder = StringBuilder()",230],["val stringBuilder = StringBuilder()",61],["val result = StringBuilder()",29],["val sb = StringBuilder()",202]],"useCount":745},{"word":"StringUtil","context":[["uriBuilder.addParameter(name, if (StringUtil.isEmpty(value)) null else value)",15],["import com.intellij.openapi.util.text.StringUtil",380],["if (!StringUtil.equals(content, other.content)) return false",20],["expanded = StringUtil.replace(expanded, key, value)",20],["result = StringUtil.replace(result, value, key)",14],["if (!StringUtil.isEmptyOrSpaces(messages)) {",13],["filePath = StringUtil.nullize(annotation!!.filePath)",12],["override fun hashCode(): Int = StringUtil.hashCode(content)",18],["if (oldDownloader == null || StringUtil.compareVersionNumbers(pluginVersion, oldDownloader.pluginVersion) > 0) {",15],["val filesToScheme = StringUtil.split(expected, \";\")",15]],"useCount":555},{"word":"Subscribe","context":[["@Subscribe",161],["import com.google.common.eventbus.Subscribe",56],["import com.squareup.otto.Subscribe",41],["import org.greenrobot.eventbus.Subscribe",36],["@Subscribe(threadMode = ThreadMode.MAIN)",35],["import com.aheidelbacher.algostorm.event.Subscribe",20]],"useCount":349},{"word":"Subscription","context":[["import rx.Subscription",297],["private var subscription: Subscription? = null",39],["var subscription: Subscription? = null",17]],"useCount":353},{"word":"Suppress","context":[["@Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")",54],["@Suppress(\"NAME_SHADOWING\")",48],["@Suppress(\"NOTHING_TO_INLINE\")",74],["@Suppress(\"UNCHECKED_CAST\")",1261],["@Suppress(\"unused\")",313],["@Suppress(\"unused\", \"UNUSED_PARAMETER\")",59],["@file:Suppress(\"NOTHING_TO_INLINE\")",63],["@Suppress(\"UNUSED_PARAMETER\")",204],["@Suppress(\"DEPRECATION\")",206],["@Suppress(\"UNUSED\")",50]],"useCount":2691},{"word":"SyncType","context":[["import org.jetbrains.settingsRepository.SyncType",19],["if (!restartApplication && syncType == SyncType.OVERWRITE_LOCAL) {",13],["SyncType.OVERWRITE_REMOTE -> {",17],["sync(SyncType.OVERWRITE_LOCAL)",24],["sync(SyncType.MERGE)",126],["SyncType.OVERWRITE_LOCAL -> {",17],["if (syncType == SyncType.MERGE) {",17],["SyncType.MERGE -> {",17],["sync(SyncType.OVERWRITE_REMOTE)",18],["enum class SyncType {",17]],"useCount":345},{"word":"Synchronization","context":[["<h5>Host Synchronization</h5>",304]],"useCount":304},{"word":"System","context":[["System.out.println(\"AAA\");",56],["System.exit(1)",84],["System.exit(0)",69],["ioe.printStackTrace(System.err)",41],["System.out.println();",40],["val start = System.currentTimeMillis()",39],["val currentTime = System.currentTimeMillis()",23],["val now = System.currentTimeMillis()",25],["System.out.println(\"\");",29],["System Slot Information",25]],"useCount":656},{"word":"T","context":[["override fun addNewScheme(scheme: T, replaceExisting: Boolean) {",26],["init: () -> T",26],["private var currentScheme: T? = null",26],["private fun collectExistingNames(schemes: Collection<T>): Collection<String> {",26],["override fun next(): T {",27],["): T {",1265],["fun <T: View> T.lparams(",878],["fun <T: View> T.lparams(",878],["public fun <T: View> T.lparams(",385],["public fun <T: View> T.lparams(",385]],"useCount":4932},{"word":"TODO","context":[["* TODO",20],["//TODO",21],["// TODO",95],["fun todoTask10(): Nothing = TODO(",16],["fun todoTask3(): Nothing = TODO(",16],["// TODO Auto-generated method stub",35],["TODO()",76],["* TODO: Describe class",86],["// TODO:",15],["import util.TODO",454]],"useCount":1080},{"word":"Task","context":[["Task 5.",26],["Task 8.",18],["Task 1.",21],["import org.gradle.api.Task",22],["Task 10.",23],["Task 4.",24],["import com.beust.kobalt.api.annotation.Task",25],["import com.intellij.openapi.progress.Task",79],["Task 3.",29],["import ink.abb.pogo.scraper.Task",49]],"useCount":606},{"word":"Team","context":[["import backend.model.event.Team",29],["val team = PowerMockito.mock(Team::class.java)",17],["\"Euer BreakOut-Team\",",12],["*     * Neither the name of the Brackit Project Team nor the",405]],"useCount":463},{"word":"Test","context":[["[ Test ]",86],["public class Test {",67],["@Test(expected = IllegalStateException::class)",65],["import org.junit.Test as test",206],["[Test]",246],["Test",260],["import org.testng.annotations.Test",339],["import org.junit.Test",4533],["@Test",14242],["@Test(expected = IllegalArgumentException::class)",184]],"useCount":21117},{"word":"TestingModel","context":[["testModel.coolType = TestingModel.SimpleInsertTest.CoolType.SURPRISED",73],["val testModel = TestingModel.SimpleInsertTest.newBuilder()",73],["val firstCoolType = TestingModel.SimpleInsertTest.CoolType.SURPRISED",59],["val secondCoolType = TestingModel.SimpleInsertTest.CoolType.TEST",59],["val subTestChild = TestingModel.Child.newBuilder().setId(UUID.randomUUID().toString()).setTestDisplay(\"second display\")",49],["TestingModel.getDescriptor(),",16],["Assert.assertTrue(record is TestingModel.SimpleInsertTest)",15],["TestingModel.SimpleInsertTest.getDefaultInstance(),",14],["import org.roylance.yaorm.TestingModel",13],["entityMessageService.createEntireSchema(TestingModel.Dag.getDefaultInstance())",11]],"useCount":382},{"word":"TextView","context":[["get() = throw AnkoException(\"'android.widget.TextView.hintTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.singleLine' property does not have a getter\")",20],["* *Warning:* The created observable uses [TextView.OnEditorActionListener] to",32],["import android.widget.TextView",1093],["get() = throw AnkoException(\"'android.widget.TextView.linkTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.enabled' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.hintResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.lines' property does not have a getter\")",20]],"useCount":1436},{"word":"The","context":[["* *Warning:* The created observable uses [TextView.OnEditorActionListener] to",32],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["\"The extension name.\",",54],["\"The extension specification version.\",",54],["// Handle action bar item clicks here. The action bar will",80],["<li>The See Also section for other reference pages using this type.</li>",88],["<li>The Vulkan Specification.</li>",88],["* @param tag The bound tag, if any.",90]],"useCount":2155},{"word":"Then","context":[["import cucumber.api.java.en.Then",13],["// Then",141],["/* Then */",170]],"useCount":324},{"word":"This","context":[["* This file is part of econsim-tr01.",213],["* @throws UnsupportedOperationException This operation is not supported yet",604],["* This program incorporates a modified version of Twidere.",264],["* This Source Code Form is subject to the terms of the Mozilla Public",179],["This function must only be called from the main thread.",172],["* This file is part of ProcessManager.",153],["* This file is part of lavagna.",81],["/* This Source Code Form is subject to the terms of the Mozilla Public",81],["* This file is part of Krobot.",69],["\"This function must only be called from the main thread.\",",45]],"useCount":2231},{"word":"Thread","context":[["Thread.sleep(50)",35],["Thread.sleep(1000)",81],["Thread.sleep(2000)",36],["Thread.sleep(500)",28],["Thread(Runnable {",27],["Thread.sleep(10)",26],["Thread {",21],["Thread.sleep(1)",21],["Thread.sleep(5000)",19],["Thread.sleep(100)",47]],"useCount":410},{"word":"Throwable","context":[["catch (e: Throwable) {",616],["} catch (e: Throwable) {",209],["} catch (t: Throwable) {",157],["} catch(e: Throwable) {",119],["@Throws(Throwable::class)",106],["errors = SmartList<Throwable>()",52],["var errors: MutableList<Throwable>? = null",47],["override fun onError(e: Throwable?) {",39],["} catch (ex: Throwable) {",36],["override fun onError(e: Throwable) {",33]],"useCount":1755},{"word":"Throws","context":[["@Throws(SQLException::class)",229],["@Throws(RuntimeFault::class, RemoteException::class)",86],["@Throws(Throwable::class)",106],["@Throws(DocumentException::class)",249],["@Throws(XmlException::class)",286],["@Throws(Twitter4HKException::class)",308],["@Throws(Exception::class)",561],["@Throws(IOException::class)",581],["@Throws(UnsupportedOperationException::class)",605],["@Throws(QueryException::class)",900]],"useCount":4511},{"word":"Timber","context":[["Timber.e(e, e.message)",11],["import timber.log.Timber",463],["Timber.plant(Timber.DebugTree())",39],["Timber.e(error)",40],["Timber.e(ex, \"Analytics Exception\");",36],["Timber.e(ex, \"Error recording analytics event.\")",25],["Timber.plant(Timber.DebugTree())",39]],"useCount":653},{"word":"TimeUnit","context":[["import java.util.concurrent.TimeUnit.SECONDS",13],["import java.util.concurrent.TimeUnit.MILLISECONDS",13],["verify(view, timeout(TimeUnit.SECONDS.toMillis(1))).hideProgress()",28],["verify(view, timeout(TimeUnit.SECONDS.toMillis(1))).showProgress()",28],["(this as OioEventLoopGroup).shutdownGracefully(1L, 2L, TimeUnit.NANOSECONDS)",11],["latch.await(10, TimeUnit.SECONDS)",11],["import java.util.concurrent.TimeUnit",631]],"useCount":735},{"word":"Toast","context":[["Toast.makeText(this@PositionEditorActivity, R.string.image_cache_generation_error, Toast.LENGTH_SHORT).show()",15],["Toast.makeText(this@PositionEditorActivity, R.string.image_cache_generation_error, Toast.LENGTH_SHORT).show()",15],["import android.widget.Toast",418],["Toast.LENGTH_LONG).show()",41]],"useCount":489},{"word":"Toolbar","context":[["val toolbar = findViewById(R.id.toolbar) as Toolbar",86],["import android.support.v7.widget.Toolbar",400],["init: android.support.v7.widget.Toolbar.LayoutParams.() -> Unit = defaultInit",16],["init: android.widget.Toolbar.LayoutParams.() -> Unit = defaultInit",16],["private val toolbar: Toolbar by bindView(R.id.toolbar)",16],["val layoutParams = android.support.v7.widget.Toolbar.LayoutParams(source!!)",16],["val layoutParams = android.widget.Toolbar.LayoutParams(source!!)",16],["setSupportActionBar(findViewById(R.id.toolbar) as Toolbar)",12],["val toolbar: Toolbar by bindView(R.id.toolbar)",18],["init: Toolbar.LayoutParams.() -> Unit = defaultInit",24]],"useCount":654},{"word":"Twitter4HKException","context":[["} catch (e: Twitter4HKException) {",16],["throw Twitter4HKException(e.message)",32],["import com.twitter.meil_mitu.twitter4hk.exception.Twitter4HKException",202],["@Throws(Twitter4HKException::class)",308]],"useCount":558},{"word":"Type","context":[["<Type>Г</Type>",29],["<Type>Г</Type>",29],["Internal Connector Type: None",35],["import org.brackit.xquery.xdm.Type",40],["enum class Type {",47],["SimpleConnector(SimpleConnector.Type.AND),",52],["import com.jayrave.falkon.engine.Type",54],["import io.michaelrocks.grip.mirrors.Type",64],["import org.objectweb.asm.Type",72],["import java.lang.reflect.Type",146]],"useCount":1037},{"word":"UNCHECKED_CAST","context":[["@Suppress(\"UNCHECKED_CAST\")",1261],["@Suppress(\"UNUSED_VARIABLE\", \"UNCHECKED_CAST\", \"USELESS_CAST\")",15],["@file:Suppress(\"UNCHECKED_CAST\")",11],["[ suppress(\"UNCHECKED_CAST\") ]",16],["suppress(\"UNCHECKED_CAST\")",16],["[suppress(\"UNCHECKED_CAST\")]",20],["@suppress(\"UNCHECKED_CAST\")",220],["[suppress(\"USELESS_CAST_STATIC_ASSERT_IS_FINE\")] [suppress(\"UNCHECKED_CAST\")]",1144]],"useCount":2703},{"word":"UNNECESSARY_NOT_NULL_ASSERTION","context":[["[suppress(\"UNNECESSARY_NOT_NULL_ASSERTION\")]",2944]],"useCount":2944},{"word":"URL","context":[["import java.net.URL",394],["<URL/>",28],["override fun initialize(location: URL?, resources: ResourceBundle?) {",14]],"useCount":436},{"word":"USELESS_CAST_STATIC_ASSERT_IS_FINE","context":[["[suppress(\"USELESS_CAST_STATIC_ASSERT_IS_FINE\")] [suppress(\"UNCHECKED_CAST\")]",1144]],"useCount":1144},{"word":"UUID","context":[["override val id: UUID = UUID.randomUUID(),",14],["import java.util.UUID",335],["val subTestChild = TestingModel.Child.newBuilder().setId(UUID.randomUUID().toString()).setTestDisplay(\"second display\")",49],["testModel.id = UUID.randomUUID().toString()",73],[".setId(UUID.randomUUID().toString())",107],["id = UUID.randomUUID(),",114],["val database = File(UUID.randomUUID().toString().replace(\"-\", \"\"))",33],["import java.util.UUID.randomUUID",25],["override val id: UUID = UUID.randomUUID(),",14]],"useCount":764},{"word":"Unit","context":[["init: android.widget.TableRow.LayoutParams.() -> Unit = defaultInit",42],["init: android.widget.GridLayout.LayoutParams.() -> Unit = defaultInit",36],["else -> Unit",38],["Unit",40],["public override fun onCreate(savedInstanceState: Bundle?): Unit {",42],["init: android.widget.LinearLayout.LayoutParams.() -> Unit = defaultInit",46],["init: (ProgressDialog.() -> Unit)? = null",51],["fun DSLResultStub.lparams(arg: FrameLayout.LayoutParams.() -> Unit) = layoutParams(arg)",55],["init: FrameLayout.LayoutParams.() -> Unit = defaultInit",208],["init: android.widget.FrameLayout.LayoutParams.() -> Unit = defaultInit",320]],"useCount":1942},{"word":"Unsubscribe","context":[["* Unsubscribe to free this reference.",88],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* *Warning:* The created observable keeps a strong reference to {@code map}. Unsubscribe",15]],"useCount":761},{"word":"Unsupported","context":[["* Unsupported operation",604],["throw UnsupportedOperationException(\"Unsupported ref update result\")",11]],"useCount":615},{"word":"UnsupportedOperationException","context":[["else -> throw UnsupportedOperationException()",17],["throw UnsupportedOperationException()",1916],["@Throws(UnsupportedOperationException::class)",605],["//throw UnsupportedOperationException()",14],["@Test(expected = UnsupportedOperationException::class)",20],["throw UnsupportedOperationException(\"Not mocked\")",20],["throw UnsupportedOperationException(\"read-only\")",29],["throw UnsupportedOperationException(\"not implemented\")",55],["get() = throw UnsupportedOperationException()",55],["* @throws UnsupportedOperationException This operation is not supported yet",604]],"useCount":3358},{"word":"Uri","context":[["public var android.widget.ImageView.imageURI: android.net.Uri?",12],["import android.net.Uri",504]],"useCount":516},{"word":"Usage","context":[["\"\"\"<h5>Valid Usage</h5>",295],["<h5>Valid Usage (Implicit)</h5>",545],["<h5>Valid Usage</h5>",394],["Current Usage: Available",20]],"useCount":1254},{"word":"User","context":[["* User: dain",15],["assertEquals(\"User\", map[\"linkType\"])",16],["import net.serverpeon.discord.model.User",17],["import backend.model.user.User",20],["import com.deanveloper.slak.User",21],["import org.kitteh.irc.client.library.element.User",25],["data class User(",26],["* User: mcxiaoke",43],["* User: duke",15],["* User: 吕勇",47]],"useCount":342},{"word":"V","context":[[": ReadOnlyProperty<View, List<V>> = required(ids, viewFinder)",17],[": ReadOnlyProperty<ViewHolder, V?> = optional(id, viewFinder)",16],["3.3 V is provided",25],[": ReadOnlyProperty<Activity, V> = required(id, viewFinder)",16],[": ReadOnlyProperty<ViewHolder, V> = required(id, viewFinder)",16],["* @author Lord (Kuleshov M.V.)",23],["return value as V",21],[": ReadOnlyProperty<View, List<V>> = optional(ids, viewFinder)",17],[": ReadOnlyProperty<View, V> = required(id, viewFinder)",17],[": ReadOnlyProperty<View, V?> = optional(id, viewFinder)",17]],"useCount":917},{"word":"Valid","context":[["<h5>Valid Usage (Implicit)</h5>",545],["<h5>Valid Usage</h5>",394],["\"\"\"<h5>Valid Usage</h5>",295],["@Valid",17],["import javax.validation.Valid",32]],"useCount":1283},{"word":"View","context":[["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {",60],["override fun onClick(v: View) {",74],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {",100],["savedInstanceState: Bundle?): View? {",106],["override fun onViewCreated(view: View, savedInstanceState: Bundle?) {",113],["override fun onViewCreated(view: View?, savedInstanceState: Bundle?) {",156],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["public fun <T: View> T.lparams(",385],["fun <T: View> T.lparams(",878],["import android.view.View",2723]],"useCount":6835},{"word":"ViewGroup","context":[["source: android.view.ViewGroup.LayoutParams?,",100],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {",100],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,",68],["source: ViewGroup.MarginLayoutParams?,",67],["source: ViewGroup.LayoutParams?,",64],["source: android.view.ViewGroup.MarginLayoutParams?,",106],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["height: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["width: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["import android.view.ViewGroup",1541]],"useCount":3790},{"word":"ViewHolder","context":[["override fun onBindViewHolder(holder: ViewHolder, position: Int) {",83],["override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {",61],["import android.support.v7.widget.RecyclerView.ViewHolder",54],["return ViewHolder(view)",48],["override fun onBindViewHolder(holder: ViewHolder?, position: Int) {",39],["override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder? {",35],["override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {",31],["class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {",24],["class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {",24],["override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {",24]],"useCount":680},{"word":"VirtualFile","context":[["import com.intellij.openapi.vfs.VirtualFile",601],["protected val urlToFileCache: ConcurrentMap<Url, VirtualFile> = ContainerUtil.newConcurrentMap<Url, VirtualFile>()",14],["private @Volatile var cachedVirtualFile: VirtualFile? = null",15],["private var directory: VirtualFile? = null",17],["private fun getDirectory(): VirtualFile? {",17],["private fun readSchemeFromFile(file: VirtualFile, duringLoad: Boolean): E? {",17],["private fun dropUnableToSaveProjectNotification(project: Project, readOnlyFiles: Array<VirtualFile>) {",19],["protected open fun beforeSave(readonlyFiles: List<Pair<SaveSession, VirtualFile>>) {",19],["private fun schemeCreatedExternally(file: VirtualFile) {",26],["var file: VirtualFile? = null",32]],"useCount":913},{"word":"VkCommandBuffer","context":[["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command is recorded.\"),",28],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["\"{@code commandBuffer} $must be a valid {@code VkCommandBuffer} handle\",",52],["￿    VkCommandBuffer                             commandBuffer,",100],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command is recorded\"),",21]],"useCount":399},{"word":"VkDevice","context":[["VkDevice.IN(\"device\", \"the logical device that owns the memory.\"),",12],["{@code VkDevice}",14],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["￿    VkDevice                                    device,",161]],"useCount":425},{"word":"WRAP_CONTENT","context":[["height: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["width: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["import android.view.ViewGroup.LayoutParams.WRAP_CONTENT",12]],"useCount":786},{"word":"Warning","context":[["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable uses [TextView.OnEditorActionListener] to",32],["* *Warning:* The created observable uses [View.setOnTouchListener] to observe",28],["* *Warning:* The created observable uses [View.setOnLongClickListener] to observe",28],["* *Warning:* The created observable uses [View.setOnDragListener] to observe",28],["* *Warning:* The created observable uses [View.setOnHoverListener] to observe",20],["* *Warning:* The created observable keeps a strong reference to `recyclerView`.",17],["* *Warning:* The created observable keeps a strong reference to {@code map}. Unsubscribe",15]],"useCount":939},{"word":"When","context":[["import cucumber.api.java.en.When",16],["When true, the $extensionName extension is supported.",22],["/* When */",165],["// When",142],["When true, the $extensionLink extension is supported.",22],["When true, the $registryLink extension is supported.",249]],"useCount":616},{"word":"X","context":[["\"x X x\",",45],["Deprecated in OS X v10.7.",24],["test1 (\"X_z\", \"X_y\", \"X\") {",24],[".header(Pair(\"X-Vault-Token\", conf.token))",22],[".header(\"X-Auth-DeviceId\", client2DeviceId)",18],["\"X-Auth-deviceId\" to deviceId),",17],["class X {",16],["test1 (\"X\", \"X\", \"X_y\") {",16],["//X",144],[".header(\"X-Auth-DeviceId\", client1DeviceId)",67]],"useCount":465},{"word":"XmlException","context":[["@Throws(XmlException::class)",286],["throw XmlException(e)",28]],"useCount":314},{"word":"_","context":[["* \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /",19],["* \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /",19],["* / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/",19],["* / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/",19],["* / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/",19],["* / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/",19],["* / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/",19],["* \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /",19],["* \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /",19],["* \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /",19]],"useCount":437},{"word":"a","context":[["* @author <a href=\"http://uk.linkedin.com/in/neilellis\">Neil Ellis</a>",111],["val a = parse(\"\"\"",120],["* @author <a href=\"http://uk.linkedin.com/in/neilellis\">Neil Ellis</a>",111],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["// as you specify a parent activity in AndroidManifest.xml.",79],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["* This program incorporates a modified version of Twidere.",264],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610]],"useCount":6213},{"word":"abb","context":[["package ink.abb.pogo.scraper",26],["package ink.abb.pogo.scraper.tasks",52],["import ink.abb.pogo.scraper.Task",49],["import ink.abb.pogo.scraper.Bot",53],["import ink.abb.pogo.scraper.Context",62],["import ink.abb.pogo.scraper.Settings",66],["import ink.abb.pogo.scraper.util.Log",80],["import ink.abb.pogo.scraper.util.cachedInventories",20],["import ink.abb.pogo.scraper.util.pokemon.getIvPercentage",24],["package ink.abb.pogo.scraper.util.data",16]],"useCount":497},{"word":"action","context":[["// Handle action bar item clicks here. The action bar will",80],["action.invoke()",23],["next(action)",30],["when (event.action) {",31],["is TestAction -> when (action.type) {",33],["when (intent.action) {",34],["action()",74],["// Handle action bar item clicks here. The action bar will",80],["// Inflate the menu; this adds items to the action bar if it is present.",88],["when (action) {",118]],"useCount":847},{"word":"actionSystem","context":[["import com.intellij.openapi.actionSystem.PlatformDataKeys",29],["import com.intellij.openapi.actionSystem.ActionPlaces",26],["import com.intellij.openapi.actionSystem.DefaultActionGroup",25],["import com.intellij.openapi.actionSystem.LangDataKeys",18],["import com.intellij.openapi.actionSystem.ActionManager",16],["import com.intellij.openapi.actionSystem.AnActionEvent",169],["import com.intellij.openapi.actionSystem.AnAction",126],["import com.intellij.openapi.actionSystem.DataContext",32],["import com.intellij.openapi.actionSystem.CommonDataKeys",30],["import com.intellij.openapi.actionSystem.IdeActions",12]],"useCount":495},{"word":"activity","context":[["val activity = activity",49],["val activity = activity",49],["MaterialDialog.Builder(activity)",45],["val builder = AlertDialog.Builder(activity)",37],["activity.startActivity(intent)",30],["// as you specify a parent activity in AndroidManifest.xml.",79],["activity.finish()",50],["val activity = this.activity",23],["this.preference = this.activityRule.activity.getPreferences()",24],["super.onAttach(activity)",27]],"useCount":778},{"word":"activity_main","context":[["import kotlinx.android.synthetic.main.activity_main.*",100],["setContentView(R.layout.activity_main)",338]],"useCount":438},{"word":"adapter","context":[["recyclerView.adapter = adapter",60],["recyclerView.adapter = adapter",60],["adapter.notifyDataSetChanged()",70],["adapter.loadLocal(context.parcel())",31],["package com.mgaetan89.showsrage.adapter",26],["import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory",53],["recycler.adapter = adapter",41],["recycler.adapter = adapter",41],["val adapter = adapter",39],["val adapter = adapter",39]],"useCount":951},{"word":"add","context":[["errors.add(e)",123],["tunes.add(ConfigurationTune.COMPLEX_LISTENER_SETTERS)",41],["files.add(AnkoFile.LAYOUTS)",41],["tunes.add(ConfigurationTune.SIMPLE_LISTENERS)",41],["files.add(AnkoFile.LISTENERS)",123],["subscriber.add(AndroidMainThreadSubscription {",92],["result.add(storage)",81],["schemes.add(scheme)",79],["lambdas.add({",62],["features.add(getFeature())",48]],"useCount":2272},{"word":"address","context":[["* @param offset The offset in bytes off the native address.",18],["* @param address The native address to write to.",25],["* @param address The native address to write to.",25],["* @param address The native address to read from.",27],["* @param address The native address to read from.",27],["address = \"host-1.example.com\",",42],["* Physical address:",213],["val address = InetAddress.getByName(host)",15],["setState(ConnectionStatus.CONNECTED, \"Connected to ${connectedAddressToPresentation(address, it)}\")",14],["GLenum.IN(\"format\", \"the format of the compressed image data stored at address {@code data}\", CompressTexImageFormats),",12]],"useCount":453},{"word":"after","context":[["private fun checkLineOffsets(fragment: LineFragment, before: Document, after: Document) {",21],["// Core functionality first, extensions after",19],["override fun after(events: MutableList<out VFileEvent>) {",21],["// 1.oldExt is loading after 1.newExt - we should delete 1.oldExt",22],["override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {",30],["override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {",28],["// must be performed only after initial pull, so, local changes will be relative to remote files",27],["checkConsistency(fragments, before, after)",41],["fun after() {",69],["override fun after() {",72]],"useCount":445},{"word":"altruix","context":[["package cc.altruix.econsimtr01.ch0201",63],["* WWW: http://altruix.cc",213],["* E-Mail: dp@altruix.co",213],["* @author Dmitri Pisarenko (dp@altruix.co)",81],["import cc.altruix.econsimtr01.DefaultAgent",14],["import cc.altruix.econsimtr01.shouldBe",15],["import cc.altruix.econsimtr01.*",25],["package cc.altruix.econsimtr01.ch0202",29],["package cc.altruix.econsimtr01.ch03",47],["package cc.altruix.econsimtr01",62]],"useCount":813},{"word":"an","context":[["Pass a color as an argument to functions 'tr', 'td'.",16],["* Create an observable which emits the clicked item in `view`'s menu.",16],["* Create an observable of editor action events on `view`.",16],["// DroidMate, an automated execution generator for Android apps.",54],["const..stbtt_fontinfo_p.IN(\"info\", \"an ##STBTTFontinfo struct\"),",46],["* Create an observable of touch events for `view`.",28],["* Create an observable of hover events for `view`.",20],["* Create an observable of editor actions on `view`.",16],["* Create an observable which emits on `view` long-click events. The emitted value is",18],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138]],"useCount":597},{"word":"and","context":[["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["//    and/or other materials provided with the distribution.",126],["// Redistribution and use in source and binary forms, with or without",126],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["// Redistribution and use in source and binary forms, with or without",126],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["*       documentation and/or other materials provided with the distribution.",420],["* Redistribution and use in source and binary forms, with or without",450],["* Redistribution and use in source and binary forms, with or without",450],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179]],"useCount":4694},{"word":"andExpect","context":[[".andExpect(status().isCreated)",45],[".andExpect(status().isOk)",175],[".andExpect(jsonPath(\"$.text\").exists())",13],[".andExpect(jsonPath(\"$.date\").exists())",22],[".andExpect(jsonPath(\"$.user\").exists())",22],[".andExpect(jsonPath(\"$\").isArray)",30],[".andExpect(jsonPath(\"$.result\", `is`(WebserviceResult.OK.value)))",68],[".andExpect(content().contentType(APPLICATION_JSON_UTF_8))",57],[".andExpect(jsonPath(\"$.id\").exists())",63],[".andExpect(content().contentType(jsonContentType))",68]],"useCount":651},{"word":"android","context":[["import android.widget.TextView",1093],["import android.support.v7.app.AppCompatActivity",929],["import android.support.v7.widget.RecyclerView",967],["import android.app.Activity",1030],["import android.view.LayoutInflater",1152],["import android.content.Context",3362],["import android.os.Bundle",2910],["import android.content.Intent",1471],["import android.view.ViewGroup",1541],["import android.view.View",2723]],"useCount":47713},{"word":"animation","context":[["import android.animation.Animator",63],["import android.animation.AnimatorListenerAdapter",42],["override fun onAnimationStart(animation: Animator?) {",34],["import android.view.animation.AnimationUtils",34],["import android.view.animation.DecelerateInterpolator",23],["import android.animation.ValueAnimator",26],["override fun onAnimationEnd(animation: Animator?) {",31],["override fun onAnimationEnd(animation: Animator) {",50],["import android.view.animation.Animation",47],["import android.animation.ObjectAnimator",46]],"useCount":567},{"word":"anko","context":[["package org.jetbrains.android.anko.utils",42],["import org.jetbrains.anko.internals.AnkoInternals",40],["import org.jetbrains.anko.*",214],["import org.jetbrains.anko.dip",43],["package org.jetbrains.android.anko.functional",45],["import org.jetbrains.android.anko.config.AnkoFile",45],["import org.jetbrains.anko.onClick",48],["import org.jetbrains.android.anko.config.*",49],["import org.jetbrains.anko.find",87],["package org.jetbrains.anko",111]],"useCount":1706},{"word":"annotation","context":[["import com.fasterxml.jackson.annotation.JsonIgnoreProperties",94],["import org.springframework.context.annotation.Configuration",117],["import android.annotation.TargetApi",113],["import org.springframework.context.annotation.Bean",98],["import com.fasterxml.jackson.annotation.JsonCreator",91],["import org.robolectric.annotation.Config",118],["import android.support.annotation.StringRes",134],["import org.springframework.web.bind.annotation.RequestMapping",136],["import com.fasterxml.jackson.annotation.JsonProperty",246],["import org.springframework.beans.factory.annotation.Autowired",389]],"useCount":4069},{"word":"annotations","context":[["import org.jetbrains.annotations.TestOnly",97],["import org.intellij.lang.annotations.Language",75],["import com.google.gson.annotations.SerializedName",292],["import org.testng.annotations.DataProvider",41],["import org.testng.annotations.Test",339],["import io.realm.annotations.PrimaryKey",65],["import org.jetbrains.annotations.NonNls",49],["import org.testng.annotations.BeforeMethod",49],["import com.google.gson.annotations.Expose",48],["import org.testng.annotations.BeforeClass",43]],"useCount":1560},{"word":"ant","context":[["import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector",22],["import org.apache.tools.ant.types.selectors.FileSelector",21],["import org.apache.tools.ant.types.selectors.ExtendSelector",21],["import org.apache.tools.ant.types.selectors.DifferentSelector",21],["import org.apache.tools.ant.types.selectors.DateSelector",21],["import org.apache.tools.ant.types.selectors.ContainsRegexpSelector",21],["import org.apache.tools.ant.types.selectors.FilenameSelector",21],["import org.apache.tools.ant.types.selectors.ContainsSelector",21],["import org.apache.tools.ant.types.ResourceCollection",26],["package com.devcharly.kotlin.ant",113]],"useCount":591},{"word":"any","context":[["without the use of any underlying \"native\" APIs or functionality.",18],["private fun is_pair(ast: MalType): Boolean = ast is ISeq && ast.seq().any()",21],["any(),",18],["val hasZero: Boolean = list.any(isZero)",22],["if (args.any()) {",25],["require(any()) { \"empty.\" }",79],["* @param tag The bound tag, if any.",90],["whenever(session.createExecChannel(any())).thenReturn(execChannel)",17],["}, ModalityState.any())",16],["import com.nhaarman.mockito_kotlin.any",93]],"useCount":508},{"word":"apache","context":[["import org.apache.commons.io.input.NullInputStream",41],["import org.apache.commons.io.IOUtils",41],["import org.apache.http.client.methods.HttpGet",28],["import org.apache.sshd.client.future.OpenFuture",33],["import org.apache.sshd.ClientSession",33],["import org.apache.sshd.client.channel.ChannelExec",35],["import org.apache.commons.lang3.StringUtils",42],["import org.apache.commons.io.FileUtils",45],["import org.apache.logging.log4j.LogManager",95],["import org.apache.sshd.client.session.ClientSession",117]],"useCount":1373},{"word":"api","context":[["package com.beust.kobalt.api",66],["import com.percolate.sdk.api.BaseApiTest",46],["import com.beust.kobalt.api.Kobalt",48],["import org.jetbrains.spek.api.*",49],["import org.assertj.core.api.Assertions",55],["import com.google.android.gms.common.api.GoogleApiClient",57],["import org.assertj.core.api.Assertions.assertThat",968],["import org.jetbrains.spek.api.Spek",270],["import com.beust.kobalt.api.Project",81],["import org.gradle.api.Project",65]],"useCount":3628},{"word":"app","context":[["import android.app.Activity",1030],["import android.support.v7.app.AppCompatActivity",929],["import android.support.v4.app.DialogFragment",151],["import android.app.Application",366],["import android.app.Fragment",234],["import android.app.Dialog",231],["import android.support.v7.app.AlertDialog",156],["import android.app.PendingIntent",136],["import android.app.AlertDialog",125],["import android.support.v4.app.Fragment",635]],"useCount":6372},{"word":"append","context":[[".append(YaormUtils.Space)",21],["out.append(')')",40],["append(i)",38],["append(\"\\n\")",29],["sb.append(c)",29],["sb.append(\", \")",28],["builder.append('\"')",24],["sb.append(\"\\n\")",21],["append(\"Numbers: \")",19],["builder.append(\"\\n\")",20]],"useCount":658},{"word":"application","context":[["import com.intellij.openapi.application.runWriteAction",135],["import com.intellij.openapi.application.PathManager",117],["import com.intellij.openapi.application.ApplicationManager",500],["import com.intellij.openapi.application.impl.ApplicationImpl",48],["import com.intellij.openapi.application.ModalityState",50],["import javafx.application.Application",79],["import com.intellij.openapi.application.Application",69],["import com.intellij.openapi.application.invokeAndWaitIfNeed",60],["import javafx.application.Platform",55],["import com.intellij.openapi.application.WriteAction",53]],"useCount":1739},{"word":"apply","context":[[".apply {",90],["0.apply(Side.RIGHT)",80],["editor.apply()",67],["0.apply(Side.LEFT)",65],["override fun apply() {",35],["}.apply {",37],["it.apply {",39],["dependsOn = TreeMultimap.create<String, String>().apply {",34],["override fun apply(base: Statement, description: Description): Statement {",63],[".apply()",57]],"useCount":1138},{"word":"are","context":[["* are met:",16],["// Return the set of cities the customers are from",19],["a non-zero error value on failure and 0 on success. Some possible errors are:",18],["*  There are many operations that help to transform one collection into another, starting with 'to'",16],["String template entries (${42}) are allowed here.",23],["throw AssertionError(\"All storages are deprecated\")",19],["// load state only if there are existing files",24],["Declarations of Client, PersonalInfo and Mailer are given below.",25],["GLsizei.IN(\"stride\", \"the vertex stride in bytes. If specified as zero, then array elements are stored sequentially\"),",37],["* that the following conditions are met:",26]],"useCount":429},{"word":"arg","context":[["open fun gravity(arg: Int) = DSL.gravity(arg)",18],["fun DSLResultStub.lparams(arg: LinearLayout.LayoutParams.() -> Unit) = layoutParams(arg)",19],["fun DSLResultStub.lparams(arg: LinearLayout.LayoutParams.() -> Unit) = layoutParams(arg)",19],["fun DSLResultStub.lparams(arg: ViewGroup.LayoutParams.() -> Unit) = layoutParams(arg)",35],["fun DSLResultStub.lparams(arg: ViewGroup.LayoutParams.() -> Unit) = layoutParams(arg)",35],["fun DSLResultStub.lparams(arg: FrameLayout.LayoutParams.() -> Unit) = layoutParams(arg)",55],["open fun gravity(arg: Int) = DSL.gravity(arg)",18],["for (arg in args) {",16],["fun DSLResultStub.lparams(arg: AbsListView.LayoutParams.() -> Unit) = layoutParams(arg)",14],["fun DSLResultStub.lparams(arg: FrameLayout.LayoutParams.() -> Unit) = layoutParams(arg)",55]],"useCount":309},{"word":"args","context":[["override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<String>): Boolean {",60],["fun main(args: Array<String>) {",970],["@JvmStatic fun main(args: Array<String>) {",164],["val args = Bundle()",158],["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81],["fun main(args : Array<String>) {",75],["fragment.arguments = args",61],["override fun playerStatResponse(name: String, args: List<String>, connection: Connection): String {",33],["if (args.size > 0) {",48],["val args = arguments",58]],"useCount":2276},{"word":"arguments","context":[["val args = arguments",58],["fragment.arguments = args",61],["val arguments = Bundle()",25],["f.arguments = args",18],["val arguments = arguments",14],["fragment.arguments = arguments",25],["fragment.arguments = arguments",25],["arguments = Bundle().apply {",24],["if (arguments != null) {",19],["fragment.arguments = bundle",20]],"useCount":376},{"word":"array","context":[["the array. The initial value is 0.",14],["\"the data type of the values stored in the array\",",31],["</array>",41],["* @param index The index of the array to get the value from",14],["for (breakpoint in array) {",15],["float.array(",24],["GLuint.IN(\"vaobj\", \"the vertex array object name\"),",26],["return array",30],["<array>",41],["GLsizei.IN(\"stride\", \"the vertex stride in bytes. If specified as zero, then array elements are stored sequentially\"),",37]],"useCount":347},{"word":"as","context":[["* unspecified and should only be used as notification.",79],["val evaluated = eval_ast(ast, env) as ISeq",37],["import android.support.v4.app.Fragment as SupportFragment",49],["import org.junit.Test as test",206],["GLsizei.IN(\"stride\", \"the vertex stride in bytes. If specified as zero, then array elements are stored sequentially\"),",37],["if (JDOMUtil.areElementsEqual(oldState as Element?, newState)) {",36],["(ProjectManager.getInstance() as StoreAwareProjectManager).flushChangedAlarm()",35],["val drawer = findViewById(R.id.drawer_layout) as DrawerLayout",33],["// as you specify a parent activity in AndroidManifest.xml.",79],["val toolbar = findViewById(R.id.toolbar) as Toolbar",86]],"useCount":2949},{"word":"asm","context":[["import jdk.internal.org.objectweb.asm.MethodVisitor",16],["import org.objectweb.asm.ClassVisitor",29],["import org.objectweb.asm.ClassReader",23],["import org.objectweb.asm.MethodVisitor",22],["import org.objectweb.asm.ClassWriter",20],["import jdk.internal.org.objectweb.asm.Opcodes",17],["import org.objectweb.asm.tree.MethodNode",46],["import org.objectweb.asm.Opcodes",62],["import org.objectweb.asm.tree.ClassNode",67],["import org.objectweb.asm.Type",72]],"useCount":412},{"word":"assert","context":[["assert(result.isNotEmpty())",29],["}.assert {",31],["myRepo.`assert feature not rebased on master`()",34],["Util.assert(kt.errorCode == 0)",36],["myRepo.`assert feature rebased on master`()",42],["assert(Name(",68],["// assert",172],["assert(pos.char == '\\n')",20],["assert(!key.isEmpty())",20],["assert(count2 != 0)",20]],"useCount":647},{"word":"assertContent","context":[["0.assertContent(\"y\")",55],["0.assertContent(\"z\")",25],["assertContent(\"x\")",30],["0.assertContent(\"\", 1, 2)",20],["0.assertContent(\"x\", 0, 1)",20],["assertContent(\"X_z\")",15],["0.assertContent(\"a_b_c\", 1, 4)",35],["assertContent(\"y\")",20],["0.assertContent(\"x\")",40],["assertContent(",15]],"useCount":305},{"word":"assertEquals","context":[["assertEquals(",336],["import kotlin.test.assertEquals",933],["Assert.assertEquals(",115],["assertEquals(200, code())",108],["assertEquals(nodesOf(",82],["assertEquals(expected, actual)",65],["assertEquals(offset, endOffset)",42],["assertEquals(1, id)",42],["assertEquals(expected, result)",30],["import org.junit.Assert.assertEquals",576]],"useCount":3890},{"word":"assertFailsWith","context":[["assertFailsWith(LifecycleException::class) {",26],["assertFailsWith(IllegalArgumentException::class) {",13],["assertFailsWith(AssertionError::class) {",28],["assertFailsWith(IllegalStateException::class) {",29],["assertFailsWith<LifecycleException> {",30],["import kotlin.test.assertFailsWith",80],["assertFailsWith(AssertionError::class, {",87],["assertFailsWith<NullPointerException> {",12]],"useCount":305},{"word":"assertFalse","context":[["import org.junit.Assert.assertFalse",47],["assertFalse(iter.hasNext())",11],["assertFalse(MANAGER.isEquals(line1, line2, policy))",11],["assertFalse(push(\"\"))",11],["Assert.assertFalse(called)",13],["assertFalse { parser.hasMoreAttributes() }",15],["assertFalse(dv.isStale)",16],["assertFalse(it.hasNext())",17],["assertFalse(result)",30],["import kotlin.test.assertFalse",164]],"useCount":335},{"word":"assertNotNull","context":[["assertNotNull(body)",58],["import org.junit.Assert.assertNotNull",38],["TestCase.assertNotNull(bean.actions)",14],["import kotlin.test.assertNotNull",131],["Assert.assertNotNull(result)",15],["assertNotNull(user)",19],["assertNotNull(\"response == null\", test.onNextEvents[0])",19],["assertNotNull(\"observable == null\", observable)",33],["assertNotNull(example.name)",27],["assertNotNull(chain.evolvesTo.find {",24]],"useCount":405},{"word":"assertThat","context":[["import org.hamcrest.MatcherAssert.assertThat",132],["import org.assertj.core.api.Assertions.assertThat",968],["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216],["import org.junit.Assert.assertThat",148],["import com.google.common.truth.Truth.assertThat",82],["import com.natpryce.hamkrest.assertion.assertThat",67],["assertThat(",67],["assertThat(actualSql).isEqualTo(expectedSql)",53],["assertThat(layout.componentCount).isEqualTo(1)",53],["assertThat(dir).doesNotExist()",44]],"useCount":3090},{"word":"assertTrue","context":[["import org.junit.Assert.assertTrue",167],["assertTrue(",24],["assertTrue(iter.hasNext)",25],["LOG.assertTrue(oldInfo == null)",26],["assertTrue(start1 <= end1)",30],["assertTrue(start2 <= end2)",30],["assertTrue(terms is Some)",40],["assertTrue(Fiber(scheduler, object : SuspendableCallable<Boolean> {",40],["assertTrue(isArray)",48],["import kotlin.test.assertTrue",370]],"useCount":1343},{"word":"assertj","context":[["import org.assertj.core.api.Assertions.*",27],["import org.assertj.core.api.Assertions.assertThat",968],["import org.assertj.core.api.Assertions",55],["import org.assertj.core.api.Assertions.assertThatThrownBy",31],["import org.assertj.core.api.AssertionsForInterfaceTypes.assertThat",15],["import org.assertj.core.api.KotlinAssertions.assertThat",16],["import org.assertj.core.api.Assertions.fail",26]],"useCount":1138},{"word":"ast","context":[["ast = ast.nth(2)",56],["ast = ast.nth(2)",56],["package com.netflix.java.refactor.ast",54],["import com.jtransc.ast.*",50],["var ast = _ast",44],["import org.intellij.markdown.ast.ASTNode",40],["val evaluated = eval_ast(ast, env) as ISeq",37],["fun eval_ast(ast: MalType, env: Env): MalType =",34],["if (ast is MalList) {",34],["val body = ast.nth(2)",31]],"useCount":1692},{"word":"astraeus","context":[["import main.astraeus.net.packet.`in`.IncomingPacketListener",26],["import main.astraeus.net.packet.IncomingPacket.IncomingPacketOpcode",27],["import main.astraeus.game.model.entity.mob.update.UpdateFlag",27],["import main.astraeus.net.packet.IncomingPacket",31],["import main.astraeus.net.codec.ByteModification",35],["import main.astraeus.net.codec.ByteOrder",36],["package main.astraeus.net.packet.out",50],["import main.astraeus.net.packet.OutgoingPacket",53],["import main.astraeus.net.codec.game.GamePacketBuilder",71],["import main.astraeus.game.model.entity.mob.player.Player",109]],"useCount":658},{"word":"at","context":[["* observe actions. Only one observable can be used for a view at a time.",34],["import at.cpickl.gadsu.GadsuException",28],["* @author Gil Markham (gil at groupon dot com)",35],["import at.cpickl.gadsu.service.LOG",37],["* touches. Only one observable can be used for a view at a time.",48],["import at.cpickl.gadsu.client.Client",65],["* long clicks. Only one observable can be used for a view at a time.",30],["* drags. Only one observable can be used for a view at a time.",30],["package at.yawk.javap",27],["import at.cpickl.gadsu.view.components.panels.GridPanel",27]],"useCount":1002},{"word":"atomic","context":[["import java.util.concurrent.atomic.AtomicBoolean",173],["import java.util.concurrent.atomic.AtomicLong",64],["import org.brackit.xquery.atomic.Atomic",59],["import org.brackit.xquery.atomic.Str",55],["import java.util.concurrent.atomic.AtomicInteger",186],["import org.brackit.xquery.atomic.QNm",154],["import java.util.concurrent.atomic.AtomicReference",109],["package org.brackit.xquery.atomic",29],["import org.brackit.xquery.atomic.IntNumeric",35],["import org.brackit.xquery.atomic.Int32",38]],"useCount":1038},{"word":"attrs","context":[["val layoutParams = android.widget.FrameLayout.LayoutParams(c!!, attrs!!)",92],["attrs: android.util.AttributeSet?,",144],["attrs: AttributeSet?,",96],["constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {",62],["constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {",62],["val layoutParams = FrameLayout.LayoutParams(c!!, attrs!!)",36],["constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr)",32],["constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr)",32],["constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {",29],["constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {",29]],"useCount":873},{"word":"audiobook","context":[["import de.ph1b.audiobook.R",74],["package de.ph1b.audiobook.playback",13],["package de.ph1b.audiobook.persistence",13],["import de.ph1b.audiobook.misc.value",14],["import de.ph1b.audiobook.persistence.BookRepository",14],["import de.ph1b.audiobook.model.Book",16],["package de.ph1b.audiobook.uitools",19],["import de.ph1b.audiobook.Book",22],["import de.ph1b.audiobook.persistence.PrefsManager",45],["import de.ph1b.audiobook.injection.App",54]],"useCount":320},{"word":"author","context":[["* @author debop sunghyouk.bae@gmail.com",123],["* @author Paul Woitaschek",122],["* @author Almas Baimagambetov (almaslvl@gmail.com)",151],["* @author mariusmerkevicius",152],["* @author Ranie Jade Ramiso",165],["* @author Sergey Chuykov",186],["* @author sunghyouk.bae@gmail.com",204],["* @author Hannes Dorfmann",293],["* @author Sebastian Baechle",367],["* @author Ruben Gees",112]],"useCount":4594},{"word":"awt","context":[["import java.awt.Color",129],["import java.awt.event.MouseEvent",62],["import java.awt.BorderLayout",98],["import java.awt.Component",95],["import java.awt.event.ActionEvent",86],["import java.awt.Dimension",65],["import java.awt.event.ActionListener",52],["import java.awt.*",58],["import java.awt.Point",56],["import java.awt.image.BufferedImage",54]],"useCount":1199},{"word":"b","context":[["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102]],"useCount":2844},{"word":"backend","context":[["import backend.model.user.User",20],["import dk.etiktak.backend.model.contribution.TrustVote",21],["import dk.etiktak.backend.util.CryptoUtil",19],["import dk.etiktak.backend.model.user.Client",40],["import backend.model.misc.Coord",37],["import backend.model.user.Participant",32],["package backend.view",25],["import backend.model.event.Team",29],["package yotkaz.thimman.backend.repository",23],["package backend.controller",21]],"useCount":811},{"word":"badlogic","context":[["import com.badlogic.gdx.graphics.Color",117],["import com.badlogic.gdx.graphics.g2d.SpriteBatch",92],["import com.badlogic.ashley.core.Entity",86],["import com.badlogic.gdx.graphics.Texture",74],["import com.badlogic.gdx.scenes.scene2d.Stage",65],["import com.badlogic.gdx.math.Vector3",62],["import com.badlogic.gdx.graphics.g2d.TextureRegion",58],["import com.badlogic.gdx.graphics.GL20",57],["import com.badlogic.gdx.math.Vector2",130],["import com.badlogic.gdx.Gdx",207]],"useCount":2424},{"word":"bae","context":[["* @author debop sunghyouk.bae@gmail.com",123],["* @author sunghyouk.bae@gmail.com",204]],"useCount":327},{"word":"bar","context":[["// Handle action bar item clicks here. The action bar will",80],["// Inflate the menu; this adds items to the action bar if it is present.",88],["assertThat(dir.resolve(\"bar.xml\")).hasContent(generateData(\"bar\"))",16],["// Handle action bar item clicks here. The action bar will",80],["mod bar {",33],["bar(1, b = false)",20],["fun bar(i: Int, s: String = \"\", b: Boolean = true) {}",19],["setOption(\"foo\", \"not bar\")",18],["bean.bar = Ref.create(\"testValue2\")",14],["assertThat(dir.resolve(\"bar.xml\")).hasContent(generateData(\"bar\"))",16]],"useCount":397},{"word":"base","context":[["import com.google.common.base.Preconditions",24],["import com.chad.library.adapter.base.BaseViewHolder",21],["import eu.kanade.tachiyomi.ui.base.adapter.FlexibleViewHolder",26],["import org.stepic.droid.base.MainApplication",27],["base",30],["import eu.kanade.tachiyomi.ui.base.presenter.BasePresenter",34],["override fun apply(base: Statement, description: Description): Statement {",63],["import net.yslibrary.monotweety.base.di.UserScope",21],["import eu.kanade.tachiyomi.ui.base.fragment.BaseRxFragment",23],["import com.chad.library.adapter.base.BaseQuickAdapter",21]],"useCount":591},{"word":"be","context":[["* Skype: dp118m (voice calls must be scheduled in advance)",213],["This function must only be called from the main thread.",172],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["* unspecified and should only be used as notification.",79],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["* *Note:* A value will be emitted immediately on subscribe.",106],["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102]],"useCount":3243},{"word":"bean","context":[["</bean>\"\"\", bean)",79],["bean.v = arrayOf(\"1\", \"2\", \"3\")",28],["package com.github.siosio.upsource.bean",28],["bean.STRING_V = \"bye\"",35],["doSerializerTest(\"\"\"<bean>",73],["val bean = BeanWithPublicFields()",21],["bean.INT_V = 2",28],["</bean>\"\"\", bean)",79],["import com.github.siosio.upsource.bean.*",28],["@Tag(\"bean\")",94]],"useCount":764},{"word":"beans","context":[["import org.springframework.beans.factory.annotation.Autowired",389],["import javafx.beans.value.ObservableValue",19],["import javafx.beans.property.StringProperty",18],["import javafx.beans.property.SimpleDoubleProperty",17],["import javafx.beans.property.SimpleBooleanProperty",16],["import javafx.beans.binding.Bindings",16],["import javafx.beans.property.SimpleObjectProperty",23],["import javafx.beans.property.SimpleIntegerProperty",21],["import org.springframework.beans.factory.annotation.Value",32],["import javafx.beans.property.SimpleStringProperty",50]],"useCount":677},{"word":"before","context":[["import org.junit.Before as before",18],["fun before() {",125],["override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {",40],["override fun before() {",30],["override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {",29],["private fun checkLineOffsets(fragment: LineFragment, before: Document, after: Document) {",21],["// replacement can contains $ (php tests), so, this check must be performed before expand",20],["* Trying to read the property before the initial value has been",14],["// we commit before even if sync \"RESET_TO_THEIRS\" — preserve history and ability to undo",13],["checkConsistency(fragments, before, after)",41]],"useCount":455},{"word":"beust","context":[["package com.beust.kobalt.api",66],["import com.beust.kobalt.api.*",39],["import com.beust.kobalt.maven.DependencyManager",44],["package com.beust.kobalt",46],["package com.beust.kobalt.internal",47],["import com.beust.kobalt.api.Kobalt",48],["import com.beust.kobalt.TaskResult",49],["import com.beust.kobalt.misc.log",50],["import com.beust.kobalt.misc.KFiles",69],["import com.beust.kobalt.api.Project",81]],"useCount":1285},{"word":"binary","context":[["* Redistribution and use in source and binary forms, with or without",450],["// Redistribution and use in source and binary forms, with or without",126],["* Redistribution and use in source and binary forms,",26]],"useCount":602},{"word":"binaryfoo","context":[["package io.github.binaryfoo",16],["package io.github.binaryfoo.tlv",14],["package io.github.binaryfoo.decoders",94],["import io.github.binaryfoo.DecodedData",71],["import io.github.binaryfoo.tlv.ISOUtil",45],["import io.github.binaryfoo.EmvTags",22],["import io.github.binaryfoo.Decoder",24],["import io.github.binaryfoo.tlv.Tag",25],["package io.github.binaryfoo.decoders.apdu",38],["import io.github.binaryfoo.decoders.DecodeSession",40]],"useCount":428},{"word":"bind","context":[["import org.springframework.web.bind.annotation.ResponseBody",25],["import org.springframework.web.bind.annotation.RequestBody",21],["import org.springframework.web.bind.annotation.RequestMapping",136],["import org.springframework.web.bind.annotation.ResponseStatus",19],["ButterKnife.bind(this)",25],["import org.springframework.web.bind.annotation.RequestParam",27],["import org.springframework.web.bind.annotation.PathVariable",28],["import org.springframework.web.bind.annotation.*",56],["import org.springframework.web.bind.annotation.RequestMethod",58],["import org.springframework.web.bind.annotation.RestController",88]],"useCount":596},{"word":"bindView","context":[["private val toolbar: Toolbar by bindView(R.id.toolbar)",16],["public fun <V : View> View.bindView(id: Int)",13],["val toolbar: Toolbar by bindView(R.id.toolbar)",18],["import com.proxerme.app.util.bindView",38],["public fun <V : View> Dialog.bindView(id: Int)",13],["public fun <V : View> ViewHolder.bindView(id: Int)",13],["public fun <V : View> Fragment.bindView(id: Int)",13],["public fun <V : View> Activity.bindView(id: Int)",13],["private val image: ImageView by bindView(R.id.image)",13],["import butterknife.bindView",151]],"useCount":312},{"word":"bindings","context":[["documentation = \"Native bindings to the $extensionName extension.\"",28],["val bindings = ast.nth(1) as? ISeq ?: throw MalException(\"expected sequence as the first parameter to let*\")",31],["val it = bindings.seq().iterator()",34],["Native bindings to the $extensionLink extension.",42],["Native bindings to the $extensionName extension.",50],["Native bindings to the $registryLink extension.",714],["Native bindings to the $specLinkOpenALSoft extension.",23]],"useCount":922},{"word":"block","context":[["if (block != null) {",19],["block()",63],["import net.minecraft.block.state.IBlockState",82],["import net.minecraft.block.material.Material",61],["import net.minecraft.block.Block",39],["return block(this)",34],["import net.minecraft.block.state.BlockStateContainer",24],["package com.cout970.magneticraft.block",22],["import net.minecraft.block.ITileEntityProvider",21],["return block",20]],"useCount":546},{"word":"body","context":[["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["val body = ast.nth(2)",31],["body {",34],["with(mapper.readTree(body)) {",44],["body()",52],["val body = body()",57],["val body = body()",57],["assertNotNull(body)",58],[".body();",110]],"useCount":957},{"word":"bootstrap","context":[["import net.yested.bootstrap.ButtonSize",15],["import net.yested.bootstrap.pageHeader",38],["import net.yested.bootstrap.row",38],["import io.netty.bootstrap.Bootstrap",48],["import net.yested.bootstrap.Medium",38],["package net.yested.bootstrap",33],["package bootstrap",27],["import net.yested.bootstrap.btsButton",19],["return bootstrap",19],["import io.netty.bootstrap.ServerBootstrap",23]],"useCount":335},{"word":"brackit","context":[["import org.brackit.xquery.module.StaticContext",103],["import org.brackit.xquery.xdm.Item",116],["import org.brackit.xquery.atomic.QNm",154],["import org.brackit.xquery.xdm.Signature",86],["import org.brackit.xquery.function.AbstractFunction",80],["import org.brackit.xquery.QueryContext",156],["import org.brackit.xquery.xdm.Sequence",168],["import org.brackit.xquery.QueryException",273],["import org.brackit.xquery.xdm.Node",72],["import org.brackit.xquery.ErrorCode",102]],"useCount":2484},{"word":"break","context":[["break@outer",17],["break",1144],["break;",119],["break@loop",39],["val user = userService.create(\"user@break-out.org\", \"password\")",11],["referenceCandidate = referenceCandidate?.prevSibling ?: break",20]],"useCount":1350},{"word":"buffer","context":[["* @param $BUFFER_CAPACITY_PARAM the buffer capacity",32],["import io.netty.buffer.Unpooled",45],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["GLuint.IN(\"buffer\", \"\"),",80],["import io.netty.buffer.ByteBuf",177],["return buffer.toString()",30],["return buffer",30],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command is recorded.\"),",28],["<li>{@code buffer} <b>must</b> be a valid {@code VkBuffer} handle</li>",27]],"useCount":1388},{"word":"build","context":[[".build());",66],["val records = ProtobufUtils.convertProtobufObjectToRecords(testModel.build(), HashMap())",60],["}.build()",54],[").build()",45],["val terms = sb.build()",40],[".build();",39],["build(this) {",30],["return builder.build()",105],[".build())",163],[".build()",1109]],"useCount":2289},{"word":"builder","context":[["assertThat(builder.trimEnd().toString(), equalTo(expected))",36],["val builder = AlertDialog.Builder(activity)",37],["builder.f()",57],["val builder = StringBuilder()",230],["return builder.toString()",170],["val builder = AlertDialog.Builder(context)",39],["builder",53],["return builder",119],["return builder.build()",105],["return builder.create()",65]],"useCount":1888},{"word":"bukkit","context":[["import org.bukkit.command.CommandSender",147],["import org.bukkit.Material",55],["import org.bukkit.plugin.java.JavaPlugin",59],["import org.bukkit.Bukkit",63],["import org.bukkit.command.CommandExecutor",80],["import org.bukkit.command.Command",86],["import org.bukkit.event.EventHandler",114],["import org.bukkit.ChatColor",129],["import org.bukkit.event.Listener",151],["import org.bukkit.entity.Player",142]],"useCount":1637},{"word":"bundle","context":[["bundle = bundle, queryBuilderImpl = builder,",12],["bundle = bundle, queryBuilderImpl = builder,",12],["\"    final Bundle bundle = target.getArgs();\",",15],["fragment.arguments = bundle",20],["val builder = bundle.newBuilder()",23],["val engine = bundle.engine",34],["return bundle",35],["val table = bundle.table",47],["val bundle = Bundle.default()",51],["val bundle = Bundle()",91]],"useCount":351},{"word":"by","context":[["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["* Created by dageev",87],["* Created by kirillrozov on 9/13/15.",36],["* This file is part of Life in Space, by Retronic Games",37],["* Created by Tlaster on 2016/9/2.",38],["var name: String? by Property()",39],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetDoublev, GetIntegerv, and GetFloatv.\",",42],["* Created by yuriel on 7/24/16.",43],["* Created by debop",44],["import by.kirich1409.grsuschedule.R",50]],"useCount":3283},{"word":"c","context":[["val layoutParams = FrameLayout.LayoutParams(c!!, attrs!!)",36],["return c",40],["c.gridy++",40],["val c = fragment.fullColors",44],["when (c) {",45],["val c = Calendar.getInstance()",53],["c.close()",56],["c: Context?,",86],["val layoutParams = android.widget.FrameLayout.LayoutParams(c!!, attrs!!)",92],["c: android.content.Context?,",134]],"useCount":2024},{"word":"cabal","context":[["import org.jetbrains.cabal.psi.PathsField",15],["package org.jetbrains.cabal.psi",104],["import org.jetbrains.cabal.psi.SingleValueField",14],["import org.jetbrains.cabal.highlight.ErrorMessage",52],["import org.jetbrains.cabal.psi.PropertyValue",32],["import org.jetbrains.cabal.parser.*",32],["import org.jetbrains.cabal.psi.Checkable",29],["import org.jetbrains.cabal.psi.MultiValueField",18],["import org.jetbrains.cabal.CabalInterface",16],["import org.jetbrains.cabal.CabalFile",17]],"useCount":355},{"word":"callback","context":[["GLFWwindow.IN(\"window\", \"the window whose callback to set\"),",24],["returnDoc = \"the previously set callback, or $NULL if no callback was set\",",27],["returnDoc = \"the previously set callback, or $NULL if no callback was set\",",27],["return callback",31],["bgfx_callback_interface_t_p.IN(\"_this\", \"the callback interface\"),",32],["callback()",32],["* @throws com.mongodb.MongoWriteConcernException returned via the callback",20],["callback.evaluated(value.valueString!!)",20],["* @throws com.mongodb.MongoWriteException        returned via the callback",20],["override fun startEvaluation(callback: XFullValueEvaluator.XFullValueEvaluationCallback) {",20]],"useCount":433},{"word":"called","context":[["\"This function must only be called from the main thread.\",",45],["<li>This command <b>must</b> only be called outside of a render pass instance</li>",34],["var called = false",24],["\"Will be called when a debug message is generated.\",",22],["<li>This command <b>must</b> only be called inside of a render pass instance</li>",20],["\"This command $must only be called outside of a render pass instance\",",17],["assertEquals(1, success, \"success should be called once\")",16],["\"This function must not be called from a callback.\",",15],["This function must only be called from the main thread.",172],["Assert.assertTrue(called)",13]],"useCount":416},{"word":"can","context":[["* touches. Only one observable can be used for a view at a time.",48],["// 'this' can be omitted",42],["* observe actions. Only one observable can be used for a view at a time.",34],["* long clicks. Only one observable can be used for a view at a time.",30],["* drags. Only one observable can be used for a view at a time.",30],["fun example3(c: Boolean, x: Int, y: Int) = \"Any expression can be used: ${if (c) x else y}\"",23],["\"You can write it in a Java way as well. Like this: \" + a + \", \" + b + \"!\"",22],["// replacement can contains $ (php tests), so, this check must be performed before expand",20],["// If a lambda has exactly one parameter, that parameter can be accessed as 'it'",18],["// \"RESET_TO_*\" will do \"reset hard\", so, probably, error will be gone, so, we can continue operation",17]],"useCount":474},{"word":"carrot","context":[["import engineer.carrot.warren.kale.irc.message.IMessageSerialiser",44],["package engineer.carrot.warren.kale.irc.message.rfc1459.rpl",30],["package engineer.carrot.warren.warren.handler",30],["import engineer.carrot.warren.kale.IKaleHandler",32],["import engineer.carrot.warren.kale.irc.prefix.Prefix",38],["import engineer.carrot.warren.warren.loggerFor",38],["package engineer.carrot.warren.kale.irc.message.rfc1459",40],["import engineer.carrot.warren.kale.irc.message.IMessageParser",43],["import engineer.carrot.warren.kale.irc.message.IrcMessage",107],["import engineer.carrot.warren.kale.irc.message.IMessage",62]],"useCount":777},{"word":"catch","context":[["} catch(e: Throwable) {",119],["} catch (e: Exception) {",1240],["catch (e: Throwable) {",616],["} catch (e: IOException) {",501],["} catch(e: Exception) {",349],["catch (e: Exception) {",260],["catch (e: IOException) {",251],["} catch (t: Throwable) {",157],["} catch (ex: Exception) {",157],["} catch (e: Throwable) {",209]],"useCount":6646},{"word":"cc","context":[["result == listOf(\"a\", \"cc\", \"bbb\")",17],["package cc.redpen.intellij",16],["import cc.altruix.econsimtr01.shouldBe",15],["package cc.redpen.intellij.fixes",23],["import cc.altruix.econsimtr01.*",25],["package cc.altruix.econsimtr01.ch0202",29],["package cc.altruix.econsimtr01.ch03",47],["package cc.altruix.econsimtr01",62],["package cc.altruix.econsimtr01.ch0201",63],["* WWW: http://altruix.cc",213]],"useCount":600},{"word":"change","context":[["command(change) { viewer.replaceChange(change, side, modifier) }",15],["command(change) { viewer.ignoreChange(change, side, modifier) }",15],["val change = change(this)",70],["val change = change(this)",70],["for (change in changes) {",27],["* To change this template use File | Settings | File Templates.",25],["* focus change. Only one observable can be used for a view at a time.",16],["collectConsumer.consume(change)",16],["command(change) { viewer.ignoreChange(change, side, modifier) }",15],["command(change) { viewer.replaceChange(change, side, modifier) }",15]],"useCount":332},{"word":"channel","context":[["import io.netty.channel.ChannelFutureListener",28],["</channel>",30],["import io.netty.channel.nio.NioEventLoopGroup",31],["import org.apache.sshd.client.channel.ChannelExec",35],["</channel>\"\"\")",38],["<channel id=\"IDEA_Release\" status=\"release\" licensing=\"release\">",42],["import io.netty.channel.Channel",81],["import io.netty.channel.ChannelHandlerContext",108],["import io.netty.channel.ChannelInitializer",24],["import io.netty.channel.socket.nio.NioServerSocketChannel",23]],"useCount":795},{"word":"charUTF8_p","context":[["const..charUTF8_p.IN(\"title\", \"\"),",30],["const..charUTF8_p.IN(\"text\", \"\"),",104],["const..charUTF8_p.IN(\"str\", \"\"),",96],["(const..charUTF8_p)(",72],["const..charUTF8_p.IN(\"name\", \"the name of the class to look up\"),",12],["const..charUTF8_p.IN(",15],["const..charUTF8_p.IN(\"name\", \"\")",21],["const..charUTF8_p.IN(\"selected\", \"\"),",18],["charUTF8_p(",16],["const..charUTF8_p.IN(\"name\", \"\"),",30]],"useCount":438},{"word":"check","context":[["onView(withId(R.id.expandableLayout)).check(matches(equalHeight(",22],["onLineStartingWith(\"check(\")",24],["// todo check is bundled/read-only schemes correctly handled",24],["if (check !== NIL && check !== FALSE) {",28],["if (check !== NIL && check !== FALSE) {",28],["val check = eval(ast.nth(1), env)",31],["public override fun check(): List<ErrorMessage> {",37],["// if not service, so, component manager will check it later for all components",19],["// remove empty directory only if some file was deleted - avoid check on each save",21],["// replacement can contains $ (php tests), so, this check must be performed before expand",20]],"useCount":391},{"word":"child","context":[["child.accept(visitor)",12],["child()",79],["child {",71],["for (child in children) {",52],["index = child",16],["return child",49],["val child = parent.getChildAt(i)",27],["child(\"child_1\") {",13],["for (child in node.children) {",24],["val params = child.layoutParams as RecyclerView.LayoutParams",23]],"useCount":402},{"word":"class","context":[["@Throws(IOException::class)",581],["@Throws(SQLException::class)",229],["@Throws(UnsupportedOperationException::class)",605],["@Throws(QueryException::class)",900],["@Throws(Exception::class)",561],["@Throws(Twitter4HKException::class)",308],["@Throws(XmlException::class)",286],["@Throws(DocumentException::class)",249],["@Test(expected = IllegalArgumentException::class)",184],["class MainActivity : AppCompatActivity() {",168]],"useCount":11293},{"word":"clear","context":[["listenerMap.clear()",38],["v.listenerLambdasMap.clear()",38],["listenerLambdasMap.clear()",38],["v.listenerMap.clear()",38],["fun clear() {",124],["calculator.clear()",41],["clear()",146],["override fun clear() {",88],["schemes.clear()",52],["events.clear()",42]],"useCount":1027},{"word":"client","context":[["import net.minecraft.client.Minecraft",92],["import at.cpickl.gadsu.client.Client",65],["val client = createClient()",38],["import org.apache.sshd.client.session.ClientSession",117],["* Twittnuker - Twitter client for Android",264],["client.close()",36],["import org.apache.sshd.client.channel.ChannelExec",35],["import org.apache.sshd.client.future.OpenFuture",33],["return client",32],["import org.apache.http.client.methods.HttpGet",28]],"useCount":1620},{"word":"close","context":[["writer.close()",61],["override fun close() {",244],["close()",138],["it.close()",75],["reader.close()",70],["realm.close()",67],["fun close() {",66],["cursor.close()",63],["out.close()",57],["db.close()",57]],"useCount":1810},{"word":"co","context":[["* E-Mail: dp@altruix.co",213],["* @author Dmitri Pisarenko (dp@altruix.co)",81],["* @author Elliot Wright <elliot@elliotwright.co>",14],["package uk.co.cacoethes.lazybones.commands",15]],"useCount":323},{"word":"code","context":[["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["assertEquals(200, code())",108],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106]],"useCount":3463},{"word":"codec","context":[["import main.astraeus.net.codec.ByteOrder",36],["import io.netty.handler.codec.http.FullHttpRequest",42],["import io.netty.handler.codec.http.*",47],["import io.netty.handler.codec.http.HttpResponseStatus",51],["import main.astraeus.net.codec.game.GamePacketBuilder",71],["import io.netty.handler.codec.http.HttpMethod",16],["import io.netty.handler.codec.http.QueryStringDecoder",17],["import io.netty.handler.codec.http.HttpHeaderNames",24],["import main.astraeus.net.codec.ByteModification",35],["import io.netty.handler.codec.http.HttpRequest",40]],"useCount":406},{"word":"collection","context":[["fun doSomethingStrangeWithCollection(collection: Collection<String>): Collection<String>? {",20],["references = { collection: Collection<Int> -> task1(collection); collection.joinToString() })",20],["references = { collection: Collection<Int> -> task1(collection); collection.joinToString() })",20],["references = { collection: Collection<Int> -> task1(collection); collection.joinToString() })",20],["fun task1(collection: Collection<Int>): String {",24],["package com.github.andrewoma.dexx.collection",26],["references = { JavaCode1().task1(collection) })",19],["val iterator = collection.iterator()",18],["*  There are many operations that help to transform one collection into another, starting with 'to'",16],["fun task2(collection: Collection<Int>): String {",16]],"useCount":312},{"word":"collections","context":[["* https://github.com/goldmansachs/gs-collections-kata",21],["import debop4k.core.collections.emptyByteArray",17],["import kotlin.collections.forEach",17],["import debop4k.core.collections.isNullOrEmpty",17],["import javafx.collections.FXCollections",51],["package debop4k.core.collections.permutations",45],["import javafx.collections.ObservableList",32],["import kotlin.collections.listOf",31],["import org.eclipse.collections.impl.list.mutable.FastList",27],["import org.jetbrains.anko.collections.forEachByIndex",19]],"useCount":449},{"word":"color","context":[["return color",14],["color(1f, 1f, 1f, 1f)",15],["nk_color.IN(\"color\", \"\"),",36],["Pass a color as an argument to functions 'tr', 'td'.",16],["tr (color = \"yellow\") {",24],["nk_color.member(\"color\", \"\")",68],["paint.color = color",13],["this.color = color",14],["this.color = color",14],["nk_color.IN(\"color\", \"\")",126]],"useCount":377},{"word":"com","context":[["import com.intellij.openapi.vfs.VirtualFile",601],["import com.intellij.util.SmartList",307],["import com.intellij.psi.PsiElement",660],["import com.intellij.openapi.project.Project",896],["import com.google.gson.Gson",308],["package com.intellij.configurationStore",374],["import com.intellij.openapi.util.text.StringUtil",380],["import com.intellij.openapi.util.io.FileUtil",400],["import com.intellij.lang.ASTNode",439],["import com.intellij.openapi.application.ApplicationManager",500]],"useCount":51494},{"word":"command","context":[["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46],["import org.bukkit.command.CommandExecutor",80],["import org.bukkit.command.Command",86],["import org.bukkit.command.CommandSender",147],["<dt>On success, this command returns</dt>",148],["override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<String>): Boolean {",60],["<dt>On failure, this command returns</dt>",148],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46]],"useCount":1385},{"word":"commandBuffer","context":[["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command is recorded.\"),",28],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102],["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["￿    VkCommandBuffer                             commandBuffer,",100],["\"{@code commandBuffer} $must be a valid {@code VkCommandBuffer} handle\",",52],["\"{@code commandBuffer} $must be in the recording state\",",50],["\"Host access to {@code commandBuffer} $must be externally synchronized\"",49]],"useCount":724},{"word":"commit","context":[[".commit(\"\")",24],["commit()",45],["editor.commit()",42],[".commit()",134],["db.commit()",20],["import org.jetbrains.settingsRepository.git.commit",31],["store.commit()",27],["repositoryManager.commit()",33],["repositoryManager.commit(indicator)",20],["remoteRepository.commit(\"\")",22]],"useCount":839},{"word":"common","context":[["import com.google.common.collect.Lists",50],["import com.google.android.gms.common.ConnectionResult",39],["import com.google.common.cache.CacheBuilder",39],["package y2k.joyreactor.common",45],["import com.intellij.ide.structureView.impl.common.PsiTreeElementBase",47],["import com.google.common.collect.ImmutableList",52],["import com.google.common.eventbus.Subscribe",56],["import com.google.android.gms.common.api.GoogleApiClient",57],["import com.google.common.eventbus.EventBus",73],["import com.google.common.truth.Truth.assertThat",82]],"useCount":2420},{"word":"companion","context":[["//    companion object {",11],["public companion object {",11],["companion object Data {",15],["companion object Factory {",43],["companion object{",50],["companion object {",7075],["private companion object {",105],["companion object",67],["companion object Data{",52]],"useCount":7429},{"word":"compiler","context":[["import ru.dageev.compiler.bytecodegeneration.statement.StatementGenerator",20],["import io.mironov.sento.compiler.common.Types",18],["import ru.dageev.compiler.domain.type.ClassType",19],["import org.brackit.xquery.compiler.XQ",20],["import ru.dageev.compiler.grammar.ElaginBaseVisitor",23],["import ru.dageev.compiler.domain.ClassesContext",26],["import org.brackit.xquery.compiler.AST",35],["import ru.dageev.compiler.grammar.ElaginParser",26],["import org.brackit.xquery.compiler.Bits",27],["import ru.dageev.compiler.domain.scope.Scope",29]],"useCount":371},{"word":"component","context":[["val component = SeveralStoragesConfigured()",41],["App.component().inject(this)",57],["val stateSpec = StoreUtil.getStateSpec(component)",36],["override fun setState(storageSpecs: Array<Storage>, component: Any, componentName: String, state: Any) {",34],["component.project.setProjectReference(this);",42],["override fun setStateInOldStorage(component: Any, componentName: String, state: Any) {",34],["component.inject(this)",31],["val component = layout.getComponent(0)",47],["componentStore.initComponent(component, false)",68],["component.project.setProjectReference(this)",61]],"useCount":2308},{"word":"componentName","context":[["override fun setState(storageSpecs: Array<Storage>, component: Any, componentName: String, state: Any) {",34],["doAddComponent(componentName, component)",22],["override fun getOldStorageSpec(component: Any, componentName: String, operation: StateStorageOperation): String? {",30],["externalizationSession.setState(component, componentName, state)",20],["if (!notReloadableComponents.contains(componentName)) {",19],["val oldStorageSpec = getOldStorageSpec(component, componentName, operation) ?: return null",19],["return componentName",19],["val url = DecodeDefaultsUtil.getDefaults(component, componentName) ?: return null",19],["override fun setStateInOldStorage(component: Any, componentName: String, state: Any) {",34],["for (componentName in componentNames) {",44]],"useCount":553},{"word":"components","context":[["import com.intellij.openapi.components.StateStorage",95],["import com.intellij.openapi.components.impl.stores.FileStorageCoreUtil",55],["import com.intellij.openapi.components.TrackingPathMacroSubstitutor",62],["import com.intellij.openapi.components.StateStorage.SaveSession",63],["import com.intellij.openapi.components.impl.stores.StateStorageManager",63],["import com.intellij.openapi.components.ServiceManager",76],["import com.intellij.openapi.components.RoamingType",161],["import com.intellij.openapi.components.StoragePathMacros",96],["import com.intellij.openapi.components.*",126],["import com.intellij.openapi.components.stateStore",128]],"useCount":2214},{"word":"concurrency","context":[["import com.intellij.util.concurrency.Semaphore",18],["import org.jetbrains.concurrency.*",17],["import org.jetbrains.util.concurrency.ResolvedPromise",19],["import org.jetbrains.concurrency.Promise",183],["import org.jetbrains.util.concurrency.Promise",24],["import org.jetbrains.concurrency.rejectedPromise",26],["import org.jetbrains.concurrency.Obsolescent",27],["package org.jetbrains.util.concurrency",18],["import org.jetbrains.concurrency.resolvedPromise",60],["import org.jetbrains.concurrency.AsyncPromise",62]],"useCount":484},{"word":"concurrent","context":[["import java.util.concurrent.*",79],["import java.util.concurrent.TimeUnit",631],["import java.util.concurrent.atomic.AtomicInteger",186],["import java.util.concurrent.atomic.AtomicBoolean",173],["import java.util.concurrent.Executors",156],["import kotlin.concurrent.thread",135],["import java.util.concurrent.Future",110],["import java.util.concurrent.atomic.AtomicReference",109],["import java.util.concurrent.ConcurrentHashMap",102],["import java.util.concurrent.CountDownLatch",95]],"useCount":2709},{"word":"conditions","context":[["*   notice, this list of conditions and the following",16],["* furnished to do so, subject to the following conditions:",1193],["furnished to do so, subject to the following conditions:",270],["*      furnished to do so, subject to the following conditions:",242],["the following conditions:",29],["* that the following conditions are met:",26],["*  furnished to do so, subject to the following conditions:",20]],"useCount":1796},{"word":"config","context":[["import org.jetbrains.android.anko.config.*",49],["import org.jetbrains.android.anko.config.AnkoFile",45],["import org.jetbrains.android.anko.config.AnkoConfiguration",37],["fun config() {",65],["if (config == null) return false",36],["sender.sendMessage(ChatColor.translateAlternateColorCodes('&', plugin.config.getString(\"messages.not-from-console\")))",34],["config.save()",33],["import net.minecraftforge.common.config.Configuration",32],["package org.jetbrains.android.anko.config",32],["return config",31]],"useCount":955},{"word":"configurationStore","context":[["import com.intellij.configurationStore.*",20],["import com.intellij.configurationStore.ROOT_CONFIG",11],["import com.intellij.configurationStore.ComponentStoreImpl",12],["import com.intellij.configurationStore.StreamProvider",16],["import com.intellij.configurationStore.StateStorageManagerImpl",27],["package com.intellij.configurationStore",374],["import com.intellij.configurationStore.SchemeManagerFactoryBase",17]],"useCount":477},{"word":"connection","context":[["connection.close()",32],["connection.prepareStatement(",99],["val query = plugin.databaseManager.getNewQuery(connection) ?: return databaseError",60],["override fun playerStatResponse(name: String, args: List<String>, connection: Connection): String {",33],["override fun serverStatListResponse(num: Long, args: List<String>, connection: Connection): String {",27],["package org.jetbrains.debugger.connection",25],["connection.disconnect()",22],["get() = connection.vm",15],["UIUtil.invokeLaterIfNeeded { Messages.showErrorDialog(message, IdeBundle.message(\"updates.error.connection.title\")) }",15],["database.createConnection().use { connection ->",88]],"useCount":555},{"word":"const","context":[["const..charUTF8_p.IN(\"text\", \"\"),",104],["￿    const VkAllocationCallbacks*                pAllocator,",55],["￿    const VkAllocationCallbacks*                pAllocator);</code></pre>",50],["const..stbtt_fontinfo_p.IN(\"info\", \"an ##STBTTFontinfo struct\"),",46],["const..nk_input_p.IN(\"i\", \"\"),",45],["const..GLuint_p.IN(\"value\", \"\")",44],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["const..GLfloat_p.IN(\"value\", \"\")",125],["(const..charUTF8_p)(",72],["const..charUTF8_p.IN(\"str\", \"\"),",96]],"useCount":1621},{"word":"constructor","context":[["constructor(): super() {",48],["constructor(context: Context) : super(context) {",62],["constructor()",39],["constructor(obj: JSONObject) {",34],["constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr)",32],["constructor(node: ASTNode) : super(node)",67],["constructor(",113],["constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {",62],["constructor() {",160],["constructor() : super()",71]],"useCount":1263},{"word":"container","context":[["container: ViewGroup?,",27],["//container function",76],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {",60],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,",51],["\"  protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\",",31],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedState: Bundle?): View? {",25],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,",68],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {",100],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["super.onCreateView(inflater, container, savedInstanceState)",22]],"useCount":837},{"word":"containers","context":[["import com.intellij.util.containers.isNullOrEmpty",40],["import com.intellij.util.containers.HashMap",24],["import com.intellij.util.containers.MultiMap",41],["import com.intellij.util.containers.SmartHashSet",48],["import com.intellij.util.containers.putValue",15],["import com.intellij.util.containers.ContainerUtil",269]],"useCount":437},{"word":"content","context":[["import android.content.ContentValues",161],["c: android.content.Context?,",134],["import android.content.DialogInterface",132],["import android.content.res.Configuration",111],["import android.content.pm.PackageManager",206],["import android.support.v4.content.ContextCompat",269],["import android.content.SharedPreferences",385],["import android.content.Context",3362],["import android.content.Intent",1471],["import android.content.BroadcastReceiver",174]],"useCount":7733},{"word":"context","context":[["super.onAttach(context)",102],["import org.springframework.test.context.junit4.SpringJUnit4ClassRunner",75],["override fun onAttach(context: Context?) {",81],["Realm.getInstance(context).use {",95],["context: Context,",96],["import org.springframework.context.annotation.Bean",98],["override fun onReceive(context: Context, intent: Intent) {",114],["import org.springframework.context.annotation.Configuration",117],["override fun getPromptText(context: ConversationContext): String {",155],["Realm.getInstance(context).use { realm ->",228]],"useCount":4214},{"word":"continue","context":[["val store = factory.create() ?: continue",14],["if (sequence1 == null || sequence2 == null) continue",11],["continue",1061],["continue;",50],["continue@matcherLoop",20],["// \"RESET_TO_*\" will do \"reset hard\", so, probably, error will be gone, so, we can continue operation",17],["continue@loop",16]],"useCount":1189},{"word":"copy","context":[["FileUtil.copy(tempFile, patchFile)",13],["this.scope = scope.copy()",12],["return copy",12],["host.copy(",12],["it.copy(",23],["return state.copy(",16],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179]],"useCount":1799},{"word":"core","context":[["import org.rust.lang.core.psi.RustNamedElement",100],["import debop4k.core.loggerOf",93],["import javax.ws.rs.core.MediaType",87],["import com.badlogic.ashley.core.Entity",86],["import org.rust.lang.core.psi.util.parentOfType",81],["import javax.ws.rs.core.Response",70],["import io.vertx.core.Vertx",64],["import org.rust.lang.core.psi.*",115],["package org.rust.lang.core.psi.impl.mixin",149],["import org.assertj.core.api.Assertions.assertThat",968]],"useCount":6410},{"word":"count","context":[["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216],["var count = 0",179],["count++",162],["val count = realm.where(TestEntity::class.java)",114],["val count = realm.where(RequiredTestEntity::class.java)",110],["return count",76],["if (count > 0) {",49],[".count()",241],["override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {",40],["AutoSize(\"value\")..GLsizei.IN(\"count\", \"\"),",39]],"useCount":2252},{"word":"cpickl","context":[["import at.cpickl.gadsu.service.LOG",37],["import at.cpickl.gadsu.client.Client",65],["import at.cpickl.gadsu.GadsuException",28],["import at.cpickl.gadsu.view.swing.Pad",18],["import at.cpickl.gadsu.view.ViewNames",18],["package at.cpickl.gadsu.view",18],["import at.cpickl.gadsu.treatment.Treatment",20],["package at.cpickl.gadsu.service",22],["import at.cpickl.gadsu.UserEvent",24],["import at.cpickl.gadsu.view.components.panels.GridPanel",27]],"useCount":637},{"word":"cpu","context":[["cpu: CPU, registers: Registers, gb: Gameboy ->",32],["cpu : CPU, registers : Registers, gb : Gameboy ->",230],["import net.jselby.kotgb.cpu.Registers",11],["cpu.resetFlag(Flag.H)",13],["import net.jselby.kotgb.cpu.CPU",14],["cpu.resetFlag(Flag.N)",22],["val addr = cpu.readReg(Reg16.HL)",27]],"useCount":349},{"word":"create","context":[["post(serviceEndpoint(\"create/\"))",31],[".create()",125],["return Observable.create { subscriber ->",121],[".addCallAdapterFactory(RxJavaCallAdapterFactory.create())",65],["return builder.create()",65],["override fun create() {",56],[".addConverterFactory(GsonConverterFactory.create())",41],["dependsOn = TreeMultimap.create<String, String>().apply {",34],["// we must create empty (initial) state to reinit component",19],["repository.create()",21]],"useCount":930},{"word":"created","context":[["* *Warning:* The created observable uses [View.setOnDragListener] to observe",28],["// remove created repository",20],["* *Warning:* The created observable uses [View.setOnHoverListener] to observe",20],["* Opposite to Java, parent directories will be created",26],["* *Warning:* The created observable uses [View.setOnTouchListener] to observe",28],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["* *Warning:* The created observable uses [TextView.OnEditorActionListener] to",32],["* *Warning:* The created observable uses [View.setOnLongClickListener] to observe",28]],"useCount":1084},{"word":"ctx","context":[["ctx",48],["ctx ->",744],["ctx,",741],["override fun evaluateToItem(ctx: QueryContext, tuple: Tuple): Item? {",48],["override fun evaluate(ctx: QueryContext, tuple: Tuple): Sequence? {",45],["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81],["override fun run(bot: Bot, ctx: Context, settings: Settings) {",52],["ctx: Context,",27],["return evaluateToItem(ctx, tuple)",24],["ctx.pauseWalking.set(false)",22]],"useCount":2609},{"word":"currentScheme","context":[["override fun getCurrentScheme() = currentScheme",24],["private var currentScheme: T? = null",26],["if (currentScheme == s) {",17],["currentScheme = scheme",35],["val oldCurrentScheme = currentScheme",42],["currentScheme = null",80],["val oldCurrent = currentScheme",24],["currentScheme = newCurrentScheme",24],["currentScheme = schemes.firstOrNull()",17],["if (oldCurrentScheme != currentScheme && currentScheme == null) {",15]],"useCount":417},{"word":"cursor","context":[["var cursor: Long? by longParam(\"cursor\")",16],["cursor.close()",63],["cursor.moveToFirst()",44],["} while (cursor.moveToNext())",22],["cursor.moveToNext()",21],["while (cursor.moveToNext()) {",16],["var cursor: Long? by longParam(\"cursor\")",16],["/* cursor */",16],["if (cursor.moveToFirst()) {",19],["cursor?.close()",20]],"useCount":313},{"word":"dageev","context":[["import ru.dageev.compiler.domain.scope.Scope",29],["* Created by dageev",87],["import ru.dageev.compiler.bytecodegeneration.expression.ExpressionGenerator",16],["import ru.dageev.compiler.domain.type.Type",17],["import ru.dageev.compiler.parser.CompilationException",18],["import ru.dageev.compiler.domain.type.ClassType",19],["import ru.dageev.compiler.bytecodegeneration.statement.StatementGenerator",20],["import ru.dageev.compiler.grammar.ElaginBaseVisitor",23],["import ru.dageev.compiler.domain.ClassesContext",26],["import ru.dageev.compiler.grammar.ElaginParser",26]],"useCount":320},{"word":"dagger","context":[["import de.vanita5.twittnuker.util.dagger.GeneralComponentHelper",28],["package com.openconference.dagger",11],["import dagger.Provides",260],["import dagger.Component",132],["import dagger.Subcomponent",62],["import dagger.Module",278]],"useCount":771},{"word":"data","context":[["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {",151],["import eu.kanade.tachiyomi.data.database.models.Manga",144],["super.onActivityResult(requestCode, resultCode, data)",126],["package com.twitter.meil_mitu.twitter4hk.data",50],["import eu.kanade.tachiyomi.data.database.DatabaseHelper",53],["package com.github.K0zka.kerub.data.ispn",58],["import eu.kanade.tachiyomi.data.database.models.Chapter",89],["return data",81],["import eu.kanade.tachiyomi.data.source.model.Page",79],["import eu.kanade.tachiyomi.data.preference.PreferencesHelper",77]],"useCount":4129},{"word":"database","context":[["import eu.kanade.tachiyomi.data.database.models.Manga",144],["val database = File(UUID.randomUUID().toString().replace(\"-\", \"\"))",33],["database.deleteOnExit()",33],["import eu.kanade.tachiyomi.data.database.DatabaseHelper",53],["import android.database.sqlite.SQLiteOpenHelper",66],["val sourceConnection = SQLiteConnectionSourceFactory(database.absolutePath)",27],["import android.database.sqlite.SQLiteDatabase",188],["import android.database.Cursor",272],["database.createConnection().use { connection ->",88],["import eu.kanade.tachiyomi.data.database.models.Chapter",89]],"useCount":1418},{"word":"databind","context":[["import com.fasterxml.jackson.databind.JsonNode",37],["import com.fasterxml.jackson.databind.SerializerProvider",13],["import com.fasterxml.jackson.databind.module.SimpleModule",14],["import com.fasterxml.jackson.databind.SerializationFeature",17],["import com.fasterxml.jackson.databind.DeserializationFeature",21],["import com.fasterxml.jackson.databind.node.ObjectNode",25],["import com.fasterxml.jackson.databind.ObjectMapper",229],["import com.fasterxml.jackson.databind.JsonSerializer",11]],"useCount":367},{"word":"date","context":[["references = { date: MyDate, timeInterval: TimeInterval ->",17],["* @param date the date for comparison",40],["* @param date the date for comparison",40],["val date = Date()",48],["val date = calendar.time",27],["references = { date: MyDate -> date.toMillis().toDate()}",18],[".andExpect(jsonPath(\"$.date\").exists())",22],["references = { date: MyDate -> date.toMillis().toDate()}",18],["date.addTimeIntervals(timeInterval, 1)",17],["var date by EffectiveDate()",19]],"useCount":537},{"word":"db","context":[["val db = DBMaker.memoryDB().make()",34],["package org.jetbrains.anko.db",21],["val db: DatabaseHelper by injectLazy()",21],["db.updateFlags(manga).executeAsBlocking()",23],["db.close()",57],["db.insertManga(manga).executeAsBlocking()",32],["import com.kelsos.mbrc.data.db.RemoteDatabase",20],["db.commit()",20],["override fun onCreate(db: SQLiteDatabase) {",33],["override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {",38]],"useCount":503},{"word":"dd","context":[["<dd><ul>",296],["@DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")",44],["</ul></dd>",296]],"useCount":636},{"word":"de","context":[["import de.vanita5.twittnuker.library.MicroBlogException",41],["import de.vanita5.twittnuker.model.AccountDetails",41],["import de.vanita5.twittnuker.model.ParcelableStatus",42],["import de.ph1b.audiobook.persistence.PrefsManager",45],["import de.ph1b.audiobook.injection.App",54],["// email: jamrozik@st.cs.uni-saarland.de",54],["import de.ph1b.audiobook.R",74],["package de.vanita5.twittnuker.fragment",89],["import de.vanita5.twittnuker.model.UserKey",95],["import de.vanita5.twittnuker.R",105]],"useCount":1668},{"word":"debop4k","context":[["import debop4k.core.ToStringHelper",21],["import debop4k.core.utils.hashOf",24],["import debop4k.core.AbstractCoreKotlinTest",25],["package debop4k.timeperiod.timeranges",31],["import debop4k.core.uninitialized",36],["package debop4k.core.utils",39],["package debop4k.core.collections.permutations",45],["import debop4k.core.loggerOf",93],["import debop4k.timeperiod.ITimeCalendar",21],["package debop4k.timeperiod",21]],"useCount":662},{"word":"debugger","context":[["package org.jetbrains.debugger.connection",25],["import org.jetbrains.haskell.debugger.parser.LocalBinding",19],["import org.jetbrains.haskell.debugger.parser.ParseResult",17],["import org.jetbrains.haskell.debugger.parser.GHCiParser",16],["package org.jetbrains.debugger",209],["import org.jetbrains.debugger.Vm",31],["package org.jetbrains.debugger.values",22],["import org.jetbrains.haskell.debugger.HaskellDebugProcess",20],["package org.jetbrains.haskell.debugger.protocol",23],["import org.jetbrains.debugger.connection.VmConnection",15]],"useCount":569},{"word":"default","context":[["default(mod(0, 0, 1, 1))",70],["val bundle = Bundle.default()",51],["default(mod(0, 0, 2, 2))",41],["default()",38],["default:",32],["* @param builder init key and default value",28],["return default",27],["default(mod(1, 1, 1, 1))",24],["default(del(1, 1, 1))",24],["// if we create project from default, component state written not to own storage file, but to project file,",19]],"useCount":590},{"word":"defaultInit","context":[["init: LinearLayout.LayoutParams.() -> Unit = defaultInit",29],["init: GridLayout.LayoutParams.() -> Unit = defaultInit",30],["init: android.widget.TableRow.LayoutParams.() -> Unit = defaultInit",42],["init: android.widget.LinearLayout.LayoutParams.() -> Unit = defaultInit",46],["init: FrameLayout.LayoutParams.() -> Unit = defaultInit",208],["init: android.widget.FrameLayout.LayoutParams.() -> Unit = defaultInit",320],["init: android.widget.TableLayout.LayoutParams.() -> Unit = defaultInit",36],["init: android.widget.RadioGroup.LayoutParams.() -> Unit = defaultInit",30],["private val defaultInit: Any.() -> Unit = {}",32],["init: android.widget.GridLayout.LayoutParams.() -> Unit = defaultInit",36]],"useCount":1202},{"word":"delete","context":[["Files.delete(file)",24],["override fun delete() {",25],["// file will be overwritten, so, we don't need to delete it",26],["file.delete(this)",35],["f.delete()",44],["override fun delete(fileSpec: String, roamingType: RoamingType) {",65],["file.delete()",68],["FileUtil.delete(file)",25],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24],["// 1.oldExt is loading after 1.newExt - we should delete 1.oldExt",22]],"useCount":674},{"word":"demonwav","context":[["package com.demonwav.statcraft.commands",13],["package com.demonwav.statcraft.sql",12],["* https://www.demonwav.com",131],["import com.demonwav.statcraft.StatCraft",75],["package com.demonwav.statcraft.listeners",56],["package com.demonwav.statcraft.commands.sc",36],["import com.demonwav.statcraft.querydsl.QPlayers",33],["import com.demonwav.statcraft.commands.ResponseBuilder",28],["package com.demonwav.statcraft",16]],"useCount":400},{"word":"description","context":[["val description: String,",45],["var description: String = \"\"",18],["this.description = description",20],["this.description = description",20],["builder.appendln(example.description)",23],["val description: String",25],["override fun describeTo(description: Description) {",31],["var description: String? = null",31],["override val description: String",42],["override fun apply(base: Statement, description: Description): Statement {",63]],"useCount":515},{"word":"design","context":[["import android.support.design.widget.CoordinatorLayout",47],["package com.jakewharton.rxbinding.support.design.widget",23],["init: android.support.design.widget.AppBarLayout.LayoutParams.() -> Unit = defaultInit",14],["import android.support.design.widget.Snackbar",233],["import android.support.design.widget.FloatingActionButton",144],["import android.support.design.widget.NavigationView",66],["import android.support.design.widget.TabLayout",59],["import android.support.design.widget.AppBarLayout",35],["import android.support.design.widget.CollapsingToolbarLayout",24],["import android.support.design.widget.TextInputLayout",24]],"useCount":669},{"word":"device","context":[["supported by device associated with queue.",12],["//then a log message is written to output device",14],["<li>{@code memory} <b>must</b> have been created, allocated, or retrieved from {@code device}</li>",12],["VkDevice.IN(\"device\", \"the logical device that owns the memory.\"),",12],["VkDevice.IN(\"device\", \"the logical device that owns the memory.\"),",12],["\"device\",",11],["￿    VkDevice                                    device,",161],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["device.output(\"\")",18]],"useCount":490},{"word":"diagnostic","context":[["import com.intellij.openapi.diagnostic.Logger",290],["import com.intellij.openapi.diagnostic.catchAndLog",51],["import com.intellij.openapi.diagnostic.debug",44],["import com.intellij.openapi.diagnostic.IdeaLoggingEvent",18],["import com.intellij.diagnostic.IdeErrorsDialog",15],["import com.intellij.openapi.diagnostic.LogUtil",15]],"useCount":433},{"word":"dialog","context":[["dialog.cancel()",22],["override fun onClick(dialog: DialogInterface, which: Int) {",43],["return dialog",49],["dialog.show()",87],["dialog.dismiss()",101],["override fun onClick(dialog: DialogInterface, id: Int) {",13],["val dialog = MaterialDialog.Builder(activity)",13],["if (!dialog.showAndGet()) {",16],["val dialog = builder.create()",19],["dialog?.dismiss()",22]],"useCount":444},{"word":"diff","context":[["import com.intellij.diff.util.Side",47],["val diff = repository.computeIndexDiff()",48],["import com.intellij.diff.DiffTestCase",70],["package com.intellij.diff.comparison",71],["import com.intellij.diff.util.ThreeSide",37],["package com.intellij.diff.tools.fragmented",29],["assertThat(diff.untrackedFolders).isEmpty()",28],["assertThat(diff.modified).isEmpty()",28],["assertThat(diff.untracked).isEmpty()",28],["assertThat(diff.removed).isEmpty()",28]],"useCount":774},{"word":"dir","context":[["assertThat(dir).isDirectory()",27],["if (event.file == dir) {",32],["if (dir == null || !dir.isValid) {",24],["if (dir == null || !dir.isValid) {",24],["file = dir.findChild(externalInfo!!.fileName)",22],["val dir = tempDirManager.newPath()",33],["assertThat(dir).doesNotExist()",44],["val dir = getDirectory()",51],["val schemeManager = createSchemeManager(dir)",53],["val dir = tempDirManager.newDirectory()",63]],"useCount":1008},{"word":"directory","context":[["// store refreshes root directory, so, we don't need to use refreshAndFindFile",21],["// fileSpec for directory based storage could be erroneously specified as \"name/\"",20],["val dir = directory",18],["// remove empty directory only if some file was deleted - avoid check on each save",21],["directory = null",35],["var result = directory",17],["directory = result",17],["if (directory is NewVirtualFile) {",17],["private var directory: VirtualFile? = null",17],["directory.markDirty()",17]],"useCount":323},{"word":"dispose","context":[["public void dispose() {",11],["Disposer.dispose(this, false)",11],["game.dispose()",11],["override fun dispose() {",151],["dispose()",47],["public override fun dispose() {",12],["Disposer.dispose(project)",14],["fun dispose() {",34],["stage.dispose()",27],["super.dispose()",17]],"useCount":335},{"word":"distribute","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20]],"useCount":1711},{"word":"distribution","context":[["*    and/or other materials provided with the distribution.",11],["*   with the distribution.",16],["*    documentation and/or other materials provided with the distribution.",26],["//    and/or other materials provided with the distribution.",126],["*       documentation and/or other materials provided with the distribution.",420]],"useCount":599},{"word":"div","context":[["return div {",42],["import net.yested.div",53],["</div>",128],["div {",128],["<div style=\"margin-left: 26px; border-left: 1px solid gray; padding-left: 14px;\"><h5>Note</h5>",93]],"useCount":444},{"word":"dl","context":[["<dl>",174],["</dl>",174]],"useCount":348},{"word":"do","context":[["* furnished to do so, subject to the following conditions:",1193],["// \"RESET_TO_*\" will do \"reset hard\", so, probably, error will be gone, so, we can continue operation",17],["do {",461],["furnished to do so, subject to the following conditions:",270],["*      furnished to do so, subject to the following conditions:",242],["`do nothing on merge`()",35],["// do nothing",25],["*  furnished to do so, subject to the following conditions:",20],["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25],["\"do\" -> {",22]],"useCount":2377},{"word":"doTest","context":[["doTest(",143],["private fun doTest(seed: Long, runs: Int, maxLength: Int, policies: List<ComparisonPolicy>,",11],["doTest(System.currentTimeMillis(), 30, 30)",11],["private fun doTest(prepare: TestBuilder.() -> Unit, check: Test.() -> Unit) {",12],["doTest(\"manyNodes\")",14],["private fun doTest() {",14],["doTest {",18],["doTest(seed, runs, maxLength, policies) { text1, text2, policy, debugData ->",55],["doTest()",99]],"useCount":377},{"word":"document","context":[["override fun mangaDetailsParse(document: Document, manga: Manga) {",20],["val document = response.asJsoup()",27],["* @throws RecycledObjectException The document is recycled",23],["val document = editor.document",21],["val document = editor.document",21],["var offset = document.getLineEndOffset(endLine - 1)",21],["assertEquals(document.getLineStartOffset(startLine), startOffset)",21],["private fun checkLineOffsets(document: Document, startLine: Int, endLine: Int, startOffset: Int, endOffset: Int) {",21],["import kotlin.browser.document",33],["* @todo document.",109]],"useCount":392},{"word":"documentation","context":[["documentation =",2217],["*       documentation and/or other materials provided with the distribution.",420],["documentation = doc2(),",30],["documentation = \"Native bindings to the $extensionName extension.\"",28],["*    documentation and/or other materials provided with the distribution.",26],["documentation = doc5(),",18],["documentation = doc7(),",17],["documentation = doc4(),",17],["documentation = doc10()",16],["documentation = doc6(),",16]],"useCount":2887},{"word":"does","context":[["get() = throw AnkoException(\"'android.widget.Gallery.gravity' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.lines' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.singleLine' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.ImageView.imageBitmap' property does not have a getter\")",20],["// you must not add duplicated macro, but our ModuleImpl.setModuleFilePath does it (it will be fixed later)",20],["get() = throw AnkoException(\"'android.widget.TextView.hintTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.LinearLayout.gravity' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.ImageView.imageURI' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.AbsListView.selectorResource' property does not have a getter\")",20]],"useCount":420},{"word":"dom","context":[["import org.w3c.dom.NodeList",14],["import org.w3c.dom.Element",62],["import org.w3c.dom.HTMLElement",52],["import org.w3c.dom.Node",44],["import org.w3c.dom.Document",36],["package react.dom",35],["import org.w3c.dom.HTMLInputElement",14],["package react.dom.events",15],["import org.w3c.dom.*",23],["import org.w3c.dom.events.Event",30]],"useCount":349},{"word":"domain","context":[["import me.rei_m.hbfavmaterial.domain.entity.BookmarkEntity",38],["package org.example.domain;",30],["import pl.ches.citybikes.domain.common.SchedulersProvider",19],["import ru.dageev.compiler.domain.type.ClassType",19],["import com.github.cloverrose.klickmodel.domain.SearchSession",17],["import me.rei_m.hbfavmaterial.domain.entity.EntryEntity",21],["import com.antonioleiva.bandhookkotlin.domain.entity.Artist",24],["import ru.dageev.compiler.domain.scope.Scope",29],["import pl.elpassion.cloudtimer.domain.Timer",26],["import ru.dageev.compiler.domain.ClassesContext",26]],"useCount":601},{"word":"done","context":[["done = true",20],["var done = false",18],["override fun done() {",18],["fun done() = Graph(commits, refs, data)",14],[".done()",33],["done()",42],["return builder.done()",23],[".done(node) {",38],[".done {",41],["done(processed)",13]],"useCount":307},{"word":"downloader","context":[["val plugins = updatedPlugins.joinToString { downloader -> downloader.pluginName }",15],["var downloader = downloader",15],["ourUpdatedPlugins.put(pluginId, downloader)",15],["descriptor = downloader.descriptor",30],["var downloader = downloader",15],["toUpdate.put(PluginId.getId(pluginId), downloader)",15],["checkAndPrepareToInstall(downloader, state, toUpdate, incompatiblePlugins, indicator)",15],["val pluginVersion = downloader.pluginVersion",15],["if (downloader.prepareToInstall(indicator ?: EmptyProgressIndicator())) {",15],["fun checkAndPrepareToInstall(downloader: PluginDownloader,",15]],"useCount":317},{"word":"drawable","context":[["import com.bumptech.glide.load.resource.drawable.GlideDrawable",17],["import android.graphics.drawable.Drawable",218],["import android.graphics.drawable.ShapeDrawable",11],["override fun getIcon(): Int = R.drawable.ic_launcher",12],["setSmallIcon(R.drawable.ic_refresh_white_24dp_img)",12],["import common.context.drawable",12],["import android.support.v4.graphics.drawable.DrawableCompat",15],["import android.graphics.drawable.BitmapDrawable",39],["import android.graphics.drawable.ColorDrawable",59]],"useCount":395},{"word":"dt","context":[["<dt>On success, this command returns</dt>",148],["<dt>On failure, this command returns</dt>",148],["<dt>On success, this command returns</dt>",148],["<dt>On failure, this command returns</dt>",148]],"useCount":592},{"word":"e","context":[["throw e",387],["} catch(e: Exception) {",349],["LOG.error(e)",478],["} catch (e: IOException) {",501],["catch (e: Exception) {",260],["catch (e: IOException) {",251],["} catch (e: Throwable) {",209],["catch (e: Throwable) {",616],["e.printStackTrace()",875],["} catch (e: Exception) {",1240]],"useCount":9850},{"word":"eclipse","context":[["import org.eclipse.collections.impl.list.mutable.FastList",27],["import org.eclipse.jgit.internal.JGitText",28],["import org.eclipse.jgit.lib.Constants",42],["import org.eclipse.jgit.storage.file.FileRepositoryBuilder",37],["import org.eclipse.jgit.errors.TransportException",21],["import org.eclipse.jgit.merge.MergeStrategy",21],["import org.eclipse.jgit.revwalk.RevWalk",20],["import org.eclipse.jgit.transport.URIish",29],["import org.eclipse.jgit.transport.RemoteConfig",19],["import org.eclipse.jgit.lib.Repository",86]],"useCount":693},{"word":"econsimtr01","context":[["package cc.altruix.econsimtr01.ch0201",63],["package cc.altruix.econsimtr01",62],["package cc.altruix.econsimtr01.ch03",47],["package cc.altruix.econsimtr01.ch0202",29],["package cc.altruix.econsimtr01.flourprod",12],["import cc.altruix.econsimtr01.ch0202.SimResRow",13],["import cc.altruix.econsimtr01.DefaultAgent",14],["import cc.altruix.econsimtr01.IAgent",14],["import cc.altruix.econsimtr01.shouldBe",15],["import cc.altruix.econsimtr01.*",25]],"useCount":306},{"word":"editor","context":[["import com.intellij.openapi.editor.Document",110],["override fun invoke(project: Project, editor: Editor, element: PsiElement) {",22],["val editor = preferences.edit()",29],["import com.intellij.openapi.editor.colors.TextAttributesKey",41],["editor.commit()",42],["import com.intellij.openapi.editor.ex.EditorEx",43],["import com.intellij.openapi.editor.impl.DocumentImpl",50],["editor.apply()",67],["//</editor-fold>",75],["import com.intellij.openapi.editor.Editor",158]],"useCount":957},{"word":"egl","context":[["package org.lwjgl.egl.templates",186],["import org.lwjgl.egl.*",188]],"useCount":374},{"word":"el","context":[["addNode(el)",243],["return el",248]],"useCount":491},{"word":"element","context":[["import javax.lang.model.element.TypeElement",50],["for (element in this) {",43],["if (element != null) {",42],["import javax.lang.model.element.Modifier",38],["import javax.lang.model.element.ExecutableElement",35],["protected open fun beforeElementSaved(element: Element) {",32],["protected open fun beforeElementLoaded(element: Element) {",32],["return element",77],["import javax.lang.model.element.Element",47],["if (element == null) {",44]],"useCount":1854},{"word":"elements","context":[["val count : Int = testingSet?.elements()?.size!!",18],["for (i in 0..testingSet?.elements()?.size!! - 1) {",18],["GLsizei.IN(\"stride\", \"the vertex stride in bytes. If specified as zero, then array elements are stored sequentially\"),",37],["if (!it.hasNext()) throw MalException(\"odd number of binding elements in let*\")",34],["package org.rust.lang.core.stubs.elements",32],["is MalList -> ast.elements.fold(MalList(), { a, b -> a.conj_BANG(eval(b, env)); a })",28],["is MalVector -> ast.elements.fold(MalVector(), { a, b -> a.conj_BANG(eval(b, env)); a })",28],["is MalHashMap -> ast.elements.entries.fold(MalHashMap(), { a, b -> a.assoc_BANG(b.key, eval(b.value, env)); a })",28],["import com.intellij.vcs.log.graph.api.elements.GraphEdge",23],["import com.intellij.vcs.log.graph.api.elements.GraphNode",21]],"useCount":383},{"word":"else","context":[["}else{",138],["} else",219],["else -> null",343],["else -> false",209],["else ->",102],["} else null",121],["else -> {",762],["else",2290],["else {",3743],["} else {",14077]],"useCount":24343},{"word":"elysium","context":[["import com.seventh_root.elysium.players.bukkit.player.ElysiumPlayerProvider",43],["import com.seventh_root.elysium.chat.bukkit.ElysiumChatBukkit",42],["import com.seventh_root.elysium.characters.bukkit.character.ElysiumCharacter",35],["import com.seventh_root.elysium.characters.bukkit.character.ElysiumCharacterProvider",35],["import com.seventh_root.elysium.players.bukkit.player.ElysiumPlayer",31],["import com.seventh_root.elysium.characters.bukkit.ElysiumCharactersBukkit",31],["import com.seventh_root.elysium.core.service.ServiceProvider",31],["import com.seventh_root.elysium.chat.bukkit.chatchannel.ElysiumChatChannelProvider",24],["import com.seventh_root.elysium.core.database.Database",22],["import com.seventh_root.elysium.economy.bukkit.currency.ElysiumCurrencyProvider",21]],"useCount":475},{"word":"emptyList","context":[["schemeManager.setSchemes(emptyList())",38],["emptyList()",41],["emptyList(), emptyList()",12],["emptyList())",14],["get() = emptyList()",15],["return emptyList()",232],["else -> emptyList()",18],["return result ?: emptyList()",16],["emptyList(),",16],["return Collections.emptyList()",15]],"useCount":429},{"word":"enabled","context":[["if (useVfs && (provider == null || !provider.enabled)) {",15],["if (!hasSchemes && (provider == null || !provider.enabled)) {",15],["if (provider != null && provider.enabled) {",92],["@Test(enabled = enabled)",48],["@Test(enabled = enabled)",48],["if (enabled) {",44],["get() = throw AnkoException(\"'android.widget.TextView.enabled' property does not have a getter\")",20],["enabled = false",25],["override val enabled: Boolean",22],["val enabled: Boolean",21]],"useCount":419},{"word":"end","context":[["assertEquals(\"Testing length for $start, $end of ${rawSeq.length} exp ${end - start}\", length, seq.rawLength)",18],["int end = value;",16],["throw InvalidStateException(\"Invalid json: expected field or object end\")",25],["batch.end()",32],["val length = end - start",18],["assertEquals(\"Testing length for $start, $end of ${rawSeq.length} exp ${end - start}\", length, seq.rawLength)",18],["batcher.end()",18],["for (end in start..rawSeq.length) {",18],["val seq = SafeCharSequenceRange(rawSeq, start, end)",18],["assertThat(range.end).isEqualTo(end)",15]],"useCount":340},{"word":"engine","context":[["import com.jayrave.falkon.engine.Engine",22],["import com.jayrave.falkon.engine.TypedNull",25],["import org.klips.engine.util.Log",21],["val engine = bundle.engine",34],["import com.jayrave.falkon.engine.Type",54],["import org.klips.engine.Binding",39],["import com.bumptech.glide.load.engine.DiskCacheStrategy",34],["val engine = bundle.engine",34],["val engine = KSpecEngine(notifier)",29],["import com.jayrave.falkon.engine.CompiledStatement",27]],"useCount":690},{"word":"engineer","context":[["package engineer.carrot.warren.kale.irc.message.rfc1459",40],["import engineer.carrot.warren.kale.irc.message.IrcMessage",107],["import engineer.carrot.warren.kale.irc.message.IMessage",62],["import engineer.carrot.warren.kale.irc.message.IMessageSerialiser",44],["import engineer.carrot.warren.kale.irc.message.IMessageParser",43],["import engineer.carrot.warren.warren.loggerFor",38],["import engineer.carrot.warren.kale.irc.prefix.Prefix",38],["import engineer.carrot.warren.kale.IKaleHandler",32],["package engineer.carrot.warren.kale.irc.message.rfc1459.rpl",30],["package engineer.carrot.warren.warren.handler",30]],"useCount":777},{"word":"entity","context":[["import net.minecraft.entity.EntityLivingBase",27],["import me.rei_m.hbfavmaterial.domain.entity.BookmarkEntity",38],["import main.astraeus.game.model.entity.mob.player.Player",109],["return entity",38],["import org.spongepowered.api.entity.living.player.Player",31],["import net.minecraft.entity.player.EntityPlayerMP",30],["package im.actor.runtime.network.mtp.entity",28],["import net.minecraft.entity.player.EntityPlayer",114],["import org.bukkit.entity.Player",142],["import main.astraeus.game.model.entity.mob.update.UpdateFlag",27]],"useCount":1265},{"word":"entityService","context":[["entityService.createTable(it.tableDefinition)",65],["entityService.bulkInsert(it.records, it.tableDefinition)",65],["val entityService = EntityProtoService(granularDatabaseService, mySqlGeneratorService)",65],["entityService.dropTable(it.tableDefinition)",65],["entityService,",33],["val entityProtoMessageService = EntityMessageService(TestModelGMBuilder(), entityService, HashMap())",27],["val entityService = EntityProtoService(granularDatabaseService, sqliteGeneratorService)",28],["val entityService = EntityProtoService(granularDatabaseService, generatorService)",31]],"useCount":379},{"word":"entry","context":[["* Name of the attribute as in the corresponding constant pool entry.",22],["edit.apply(entry, repository)",27],["fastAdd(entry)",27],["return entry",22],["override fun apply(entry: DirCacheEntry, repository: Repository) {",18],["if (entry != null) {",20],["for (entry in oldList) {",19],["val entry = dirCache.getEntry(i)",18],["while (entry != null) {",21],["logger.entry()",18]],"useCount":340},{"word":"env","context":[["val evaluated = eval_ast(ast, env) as ISeq",37],["fun eval_ast(ast: MalType, env: Env): MalType =",34],["print(eval(read(input), env))",31],["val check = eval(ast.nth(1), env)",31],["fun rep(input: String, env: Env): String =",31],["env_open[\"env\"],",30],["val childEnv = Env(env)",28],["env = Env(firstEval.env, firstEval.params, evaluated.rest().seq())",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28]],"useCount":864},{"word":"equalTo","context":[["import org.hamcrest.Matchers.equalTo",63],["import org.hamcrest.CoreMatchers.equalTo",76],["import com.natpryce.hamkrest.equalTo",64],["assertThat(builder.trimEnd().toString(), equalTo(expected))",36],["assertThat(schemes.size(), equalTo(1))",26],["assertThat(HttpResponseStatus.valueOf(connection.getResponseCode()), equalTo(expectedStatus))",12],["assertThat(File(dir, \"s1.xml\").exists(), equalTo(false))",12],["assertThat(schemes.get(0), equalTo(customScheme))",12],["assertThat(schemesManager.getAllSchemes(), equalTo(listOf(localScheme)))",12]],"useCount":313},{"word":"equals","context":[["if (!super.equals(other)) return false",18],["if (key.equals(macro.key)) {",17],["if (oldPath.equals(macro.value)) {",17],["override fun equals(other: Any?) =",16],["return super.equals(other)",19],["if (!StringUtil.equals(content, other.content)) return false",20],["override fun equals(other: Any?): Boolean{",47],["override fun equals(other: Any?): Boolean {",459],["override fun equals(obj: Any?): Boolean {",16],["override fun equals(other: Any?): Boolean =",16]],"useCount":733},{"word":"error","context":[["import com.jtransc.error.invalidOp",56],["LOG.error(e)",478],["LOG.error(\"Cannot read scheme $fileName\", e)",43],["}, { error ->",40],["Timber.e(error)",40],["import com.jtransc.error.noImpl",34],["override fun failed(error: Throwable) {",26],["LOG.error(\"Cannot read scheme from $resourceName\", e)",26],["LOG.error(\"Cannot read scheme from $resourceName\")",26],["override fun failure(error: RetrofitError?) {",25]],"useCount":1557},{"word":"errors","context":[["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["errors.add(e)",123],["return errors",89],["if (errors == null) {",72],["CompoundRuntimeException.throwIfNotEmpty(errors)",61],["errors.catch {",54],["errors = SmartList<Throwable>()",52],["var errors: MutableList<Throwable>? = null",47],["var errors = prevErrors",38],["CompoundRuntimeException.doThrow(errors)",37]],"useCount":1129},{"word":"eu","context":[["import eu.kanade.tachiyomi.data.preference.getOrDefault",41],["import eu.kanade.tachiyomi.data.download.model.Download",42],["import eu.kanade.tachiyomi.util.toast",44],["import eu.kanade.tachiyomi.data.source.SourceManager",50],["import eu.kanade.tachiyomi.data.database.DatabaseHelper",53],["import eu.kanade.tachiyomi.data.preference.PreferencesHelper",77],["import eu.kanade.tachiyomi.data.source.model.Page",79],["import eu.kanade.tachiyomi.data.database.models.Chapter",89],["import eu.kanade.tachiyomi.data.database.models.Manga",144],["import eu.kanade.tachiyomi.R",157]],"useCount":1681},{"word":"eval","context":[["val check = eval(ast.nth(1), env)",31],["repl_env.set(MalSymbol(\"eval\"), MalFunction({ a: ISeq -> eval(a.first(), repl_env) }))",25],["repl_env.set(MalSymbol(\"eval\"), MalFunction({ a: ISeq -> eval(a.first(), repl_env) }))",25],["is MalHashMap -> ast.elements.entries.fold(MalHashMap(), { a, b -> a.assoc_BANG(b.key, eval(b.value, env)); a })",28],["childEnv.set(key as MalSymbol, eval(it.next(), childEnv))",28],["is MalList -> ast.elements.fold(MalList(), { a, b -> a.conj_BANG(eval(b, env)); a })",28],["fun eval(_ast: MalType, _env: Env): MalType {",28],["is MalVector -> ast.elements.fold(MalVector(), { a, b -> a.conj_BANG(eval(b, env)); a })",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["print(eval(read(input), env))",31]],"useCount":390},{"word":"event","context":[["when (event) {",53],["import java.awt.event.KeyEvent",46],["import javafx.event.EventHandler",46],["import java.awt.event.MouseAdapter",48],["import org.bukkit.event.EventPriority",50],["import org.bukkit.event.Listener",151],["import org.bukkit.event.EventHandler",114],["import java.awt.event.ActionEvent",86],["import java.awt.event.MouseEvent",62],["import java.awt.event.ActionListener",52]],"useCount":2369},{"word":"events","context":[["override fun after(events: MutableList<out VFileEvent>) {",21],["import com.kelsos.mbrc.events.bus.RxBus",28],["import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent",25],["package com.kelsos.mbrc.events.ui",22],["onNext { events.add(\"onNext($it)\") }",21],["* Create an observable of touch events for `view`.",28],["import com.intellij.openapi.vfs.newvfs.events.VFileEvent",53],["events.clear()",42],["import org.w3c.dom.events.Event",30],["for (event in events) {",31]],"useCount":501},{"word":"ex","context":[["} catch (ex: IOException) {",117],["} catch (ex: Exception) {",157],["} catch(ex: Exception) {",107],["LOG.log(Level.SEVERE, null, ex)",91],["ex.printStackTrace()",59],["import com.intellij.openapi.application.ex.DecodeDefaultsUtil",45],["import com.intellij.openapi.editor.ex.EditorEx",43],["import com.intellij.openapi.project.ex.ProjectEx",42],["import com.intellij.openapi.application.ex.ApplicationInfoEx",38],["import com.intellij.openapi.application.ex.ApplicationManagerEx",37]],"useCount":1103},{"word":"example","context":[["address = \"host-1.example.com\",",42],["package org.example.domain;",30],["assertNotNull(example.name)",27],["example.addView(viewWithId(1))",24],["package com.example.android_test",24],["package com.example",23],["builder.appendln(example.description)",23],["it(\"example\") { }",22],["val example = Example(context)",20],["fun example() {",42]],"useCount":548},{"word":"exception","context":[["throw exception!!",17],["} catch (exception: IOException) {",17],["var exception: Throwable? = null",24],["import com.twitter.meil_mitu.twitter4hk.exception.Twitter4HKException",202],["exception.printStackTrace()",56],["} catch (exception: Exception) {",50],["* @param exception Exception to log to console",18],["exception.expect(NestedServletException::class.java)",25],["} catch (exception: SQLException) {",33],["exception = e",49]],"useCount":624},{"word":"execute","context":[["val response = client.newCall(request).execute()",19],["engine.execute(result)",21],["else -> throw MalException(\"cannot execute non-function\")",22],["import com.github.K0zka.kerub.host.execute",25],["executor.execute {",32],["fun execute() {",38],["override fun execute() {",62],["}.execute()",67],["override fun execute(sctx: StaticContext, ctx: QueryContext, args: Array<Sequence?>?): Sequence? {",81],[".execute()",170]],"useCount":666},{"word":"execution","context":[["import com.intellij.execution.ui.ConsoleViewContentType",21],["// DroidMate, an automated execution generator for Android apps.",54],["import com.intellij.execution.process.ProcessHandler",51],["import com.intellij.execution.configurations.GeneralCommandLine",38],["import com.intellij.execution.ExecutionException",37],["import com.intellij.execution.ExecutionResult",22],["import com.intellij.execution.process.OSProcessHandler",21],["import com.intellij.execution.runners.ExecutionEnvironment",17],["import com.intellij.execution.process.ProcessAdapter",23],["import com.intellij.execution.process.ProcessEvent",25]],"useCount":429},{"word":"exists","context":[["if (!pluginSystemDir.exists()) {",18],["if (oldPluginDir.exists()) {",18],["if (!oldWs.exists()) {",19],[".andExpect(jsonPath(\"$.date\").exists())",22],[".andExpect(jsonPath(\"$.user\").exists())",22],["import com.intellij.util.io.exists",23],["import com.intellij.util.exists",24],["if (!file.exists()) {",47],[".andExpect(jsonPath(\"$.id\").exists())",63],["if (file.exists()) {",103]],"useCount":584},{"word":"expected","context":[["@Test(expected = IllegalArgumentException::class)",184],["assertEquals(expected, result)",30],["@Test(expected = IllegalStateException::class)",65],["expected {",65],["assertEquals(expected, actual)",65],["val expected = \"\"\"",59],["assertThat(builder.trimEnd().toString(), equalTo(expected))",36],["@Test(expected = RuntimeException::class)",35],["val bindings = ast.nth(1) as? ISeq ?: throw MalException(\"expected sequence as the first parameter to let*\")",31],["throw InvalidStateException(\"Invalid json: expected field or object end\")",25]],"useCount":1115},{"word":"expensius","context":[["import com.mvcoding.expensius.model.Tag",26],["import com.mvcoding.expensius.R",39],["package com.mvcoding.expensius.feature",37],["package com.mvcoding.expensius.feature.tag",37],["package com.mvcoding.expensius.extension",20],["package com.mvcoding.expensius",22],["import com.mvcoding.expensius.feature.BaseActivity",23],["package com.mvcoding.expensius.feature.transaction",27],["import com.mvcoding.expensius.service.AppUserService",26],["import com.mvcoding.expensius.model.Transaction",24]],"useCount":384},{"word":"extension","context":[["When true, the $registryLink extension is supported.",249],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["\"The extension specification version.\",",54],["\"The extension name.\",",54],["Native bindings to the $extensionName extension.",50],["Native bindings to the $extensionLink extension.",42],["documentation = \"Native bindings to the $extensionName extension.\"",28],["package com.mgaetan89.showsrage.extension",27],["for (extension in classes) {",27],["Native bindings to the $registryLink extension.",714]],"useCount":1978},{"word":"externalInfo","context":[["externalInfo.schemeName = scheme.name",16],["externalInfo.hash = newHash",17],["var externalInfo: ExternalInfo? = schemeToInfo.get(scheme)",22],["file = dir.findChild(externalInfo!!.fileName)",22],["externalInfo.setFileNameWithoutExtension(fileNameWithoutExtension, schemeExtension)",26],["if (externalInfo == null) {",26],["externalInfo = ExternalInfo(fileNameWithoutExtension, schemeExtension)",26],["schemeToInfo.put(scheme, externalInfo)",37],["externalInfo!!.scheduleDelete()",50],["externalInfo?.scheduleDelete()",66]],"useCount":360},{"word":"f","context":[["f.delete()",44],["builder.f()",57],["f()",59],["x.f()",126],["+\"f\"",20],["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25],["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25],["registers.f = 0",44],["return f",38],["val f = TT.tempFile()",34]],"useCount":629},{"word":"factory","context":[["import org.springframework.beans.factory.annotation.Autowired",389],["factory.onDestroy()",16],["import nucleus.factory.RequiresPresenter",34],["import org.springframework.beans.factory.annotation.Value",32],["* @param T The type of object to retrieve with the factory held by this property.",20],["* @param A The type of argument the factory held by this property takes.",20],["* @param type The type of object to retrieve with the factory held by this property.",18],["* @param argType The type of argument the returned factory takes.",18],["* @param argType The type of argument the factory held by this property takes.",18],["* @param type The type of object to retrieve with the returned factory.",18]],"useCount":739},{"word":"fail","context":[["TestCase.fail(\"No Exception\")",14],["it(\"should fail\") {",108],["import kotlin.test.fail",83],["fail()",76],["task.fail(e)",50],["import org.junit.Assert.fail",31],["import org.assertj.core.api.Assertions.fail",26],["Assert.fail()",24],["} fail {",18],["fail(it.message)",17]],"useCount":484},{"word":"falkon","context":[["package com.jayrave.falkon.engine.jdbc",18],["package com.jayrave.falkon.dao",20],["package com.jayrave.falkon.engine",21],["import com.jayrave.falkon.engine.Engine",22],["import com.jayrave.falkon.engine.TypedNull",25],["import com.jayrave.falkon.sqlBuilders.lib.WhereSection",27],["import com.jayrave.falkon.engine.CompiledStatement",27],["import com.jayrave.falkon.mapper.Column",33],["import com.jayrave.falkon.engine.Type",54],["package com.jayrave.falkon.mapper",46]],"useCount":550},{"word":"false","context":[["else -> return false",65],["return false",3727],["false",378],["false)",216],["else -> false",209],["return false;",199],["get() = false",124],["componentStore.initComponent(component, false)",68],["if (other?.javaClass != javaClass) return false",80],["} while(false)",112]],"useCount":8441},{"word":"fasterxml","context":[["import com.fasterxml.jackson.annotation.JsonCreator",91],["import com.fasterxml.jackson.annotation.JsonInclude",78],["import com.fasterxml.jackson.annotation.JsonTypeName",90],["import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper",38],["import com.fasterxml.jackson.annotation.JsonPropertyOrder",39],["import com.fasterxml.jackson.module.kotlin.KotlinModule",39],["import com.fasterxml.jackson.annotation.JsonIgnore",62],["import com.fasterxml.jackson.annotation.JsonIgnoreProperties",94],["import com.fasterxml.jackson.databind.ObjectMapper",229],["import com.fasterxml.jackson.annotation.JsonProperty",246]],"useCount":1332},{"word":"feature","context":[["package com.mvcoding.expensius.feature.tag",37],["package com.mvcoding.expensius.feature",37],["myRepo.`diverge feature and master`()",41],["myRepo.`assert feature rebased on master`()",42],["assertSuccessfulNotification(\"Rebased feature on master\")",34],["myRepo.`assert feature not rebased on master`()",34],["feature(0) {",30],["2(3) *\"feature\"",28],["package com.mvcoding.expensius.feature.transaction",27],["import com.mvcoding.expensius.feature.BaseActivity",23]],"useCount":475},{"word":"field","context":[["field.isAccessible = true",34],["return field",64],["get() = field",30],["throw InvalidStateException(\"Invalid json: expected field or object end\")",25],["import com.j256.ormlite.field.DatabaseField",16],["if (field != value) {",16],["package com.seventh_root.elysium.characters.bukkit.character.field",18],["@Bindable get() = field",23],["fields.add(field)",16],["field = value",391]],"useCount":730},{"word":"file","context":[["* This file is part of ProcessManager.",153],["DO NOT EDIT - this file was generated",113],["for (file in files) {",106],["if (file.exists()) {",103],["* This file is part of lavagna.",81],["if (file != null) {",81],["* This file is part of econsim-tr01.",213],["import java.nio.file.Files",315],["import java.nio.file.Paths",422],["import java.nio.file.Path",464]],"useCount":5542},{"word":"fileName","context":[["PathUtil.getFileExtension(fileName.toString())!!",26],["if (fileName != null && !isRenamed(scheme)) {",26],["filesToDelete.remove(fileName)",26],["val fileName: String",29],["val extension = getFileExtension(fileName, false)",26],["private fun getFileExtension(fileName: CharSequence, allowAny: Boolean): String {",26],["LOG.error(\"Cannot read scheme $fileName\", e)",43],["filesToDelete.add(fileName)",35],["return if (StringUtilRt.endsWithIgnoreCase(fileName, schemeExtension)) {",26],["filesToDelete.remove(\"${info.fileName}\")",33]],"useCount":1007},{"word":"filePath","context":[["useOldWorkspaceContent(filePath, workspace)",19],["virtualFileTracker?.put(filePath, storage)",32],["val file = File(filePath)",25],["throw IllegalArgumentException(\"Extension is missing for storage file: $filePath\")",20],["val workspacePath = composeWsPath(filePath)",19],["private fun useOldWorkspaceContent(filePath: String, ws: File) {",19],["val oldWs = File(composeWsPath(filePath))",19],["@TestManager.TestDescriptor(filePath = \"foo/index.html\", doNotCreate = true, status = 200)",15],["override fun setPath(filePath: String) {",18],["if (FileUtilRt.extensionEquals(filePath, ProjectFileType.DEFAULT_EXTENSION)) {",18]],"useCount":383},{"word":"fileSpec","context":[["protected open fun getMacroSubstitutor(fileSpec: String): TrackingPathMacroSubstitutor? = pathMacroSubstitutor",21],["errors.add(RuntimeException(\"Cannot save scheme $fileSpec/$scheme\", e))",20],["// fileSpec for directory based storage could be erroneously specified as \"name/\"",20],["for (fileSpec in fileSpecs) {",21],["override fun read(fileSpec: String, roamingType: RoamingType): InputStream? {",23],["override fun toString() = fileSpec",26],["override fun delete(fileSpec: String, roamingType: RoamingType) {",65],["fileSpec: String,",34],["override fun write(fileSpec: String, content: ByteArray, size: Int, roamingType: RoamingType) {",28],["provider.processChildren(fileSpec, roamingType, { canRead(it) }) { name, input, readOnly ->",26]],"useCount":613},{"word":"files","context":[["files.add(AnkoFile.LISTENERS)",123],["for (file in files) {",106],["if (files != null) {",68],["files.add(AnkoFile.VIEWS)",41],["files.add(AnkoFile.SQL_PARSER_HELPERS)",41],["files.add(AnkoFile.LAYOUTS)",41],["files.add(AnkoFile.PROPERTIES)",41],["files.add(AnkoFile.SERVICES)",41],["files.add(AnkoFile.INTERFACE_WORKAROUNDS_JAVA)",28],["// must be performed only after initial pull, so, local changes will be relative to remote files",27]],"useCount":806},{"word":"filter","context":[[".filter {",55],["private val filter = initFilter()",14],["repository.processChildren(fullPath, filter, { name, input -> processor(name, input, true) })",15],["repositoryManager.processChildren(fullPath, filter, { name, input -> processor(name, input, false) })",15],[".filter { it != null }",19],["broadcastManager.registerReceiver(receiver, filter)",20],["val positiveNumbers = list.filter { it > 0 }",23],["val classesWithFunctions = classes.filter { it.hasNativeFunctions }",24],["}.filter {",27],["doSerializerTest(\"<BeanWithSubBeanWithEquals />\", bean, filter)",14]],"useCount":346},{"word":"final","context":[["\"  public void ship(final T target) {\",",15],["override final fun reloadStates(componentNames: MutableSet<String>, messageBus: MessageBus) {",15],["override final fun reloadState(componentClass: Class<out PersistentStateComponent<*>>) {",16],["override final fun rename(path: String, newName: String) {",19],["override final fun getStateStorageManager() = storageManager",20],["override final fun getMacroSubstitutor() = pathMacroSubstitutor",20],["println(\"\\tpublic final boolean ${it.capName};\")",22],["println(\"\\tpublic final long\")",28],["override final fun getPathMacroManagerForDefaults() = pathMacroManager",35],["override final fun initComponent(component: Any, service: Boolean) {",16]],"useCount":508},{"word":"finally","context":[["finally{",11],["import common.rx.finally",20],["}finally{",23],["finally {",973],["} finally {",1047]],"useCount":2074},{"word":"find","context":[["import de.ph1b.audiobook.misc.find",13],["// but we refresh direct children to avoid refreshAndFindFile in SchemeManager (to find schemes directory)",13],["val function = env.find(symbol) as MalFunction",16],["val function = env.find(symbol) as? MalFunction ?: return false",16],["// Zelix KlassMaster - ERROR: Could not find method 'getScheme()'",19],["import com.github.quarck.calnotify.utils.find",22],["if (matcher.find()) {",23],["assertNotNull(chain.evolvesTo.find {",24],["import org.jetbrains.anko.find",87],["while (matcher.find()) {",56]],"useCount":312},{"word":"finish","context":[["finish();",16],["task.finish(r!!)",13],["this.finish()",17],["}.finish {",22],["super.finish()",25],["actionMode?.finish()",39],["override fun finish() {",44],["activity.finish()",50],["token.finish()",90],["finish()",428]],"useCount":768},{"word":"first","context":[["val bindings = ast.nth(1) as? ISeq ?: throw MalException(\"expected sequence as the first parameter to let*\")",31],["val binds = ast.nth(1) as? ISeq ?: throw MalException(\"fn* requires a binding list as first parameter\")",31],["first = false",32],["val firstScheme = manager.findSchemeByName(\"first\")",30],["val firstEval = evaluated.first()",28],["repl_env.set(MalSymbol(\"eval\"), MalFunction({ a: ISeq -> eval(a.first(), repl_env) }))",25],["when ((ast.first() as? MalSymbol)?.value) {",22],["var first = true",34],[".first()",62],["var first = seq.first()",21]],"useCount":947},{"word":"flags","context":[["override fun writeToParcel(dest: Parcel, flags: Int) {",81],["<li>{@code flags} <b>must</b> be 0</li>",66],["\"flags\",",59],["override fun writeToParcel(dest: Parcel?, flags: Int) {",45],["override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {",42],["\"{@code flags} $must be 0\",",34],["override fun getIcon(flags: Int): Icon? {",26],["MapToInt..uint16_t.IN(\"_flags\", \"buffer creation flags\", BufferFlags, LinkMode.BITFIELD)",24],["return super.onStartCommand(intent, flags, startId)",15],["if ((flags and Iconable.ICON_FLAG_VISIBILITY) == 0)",18]],"useCount":485},{"word":"float","context":[["float.IN(\"thickness\", \"\")",18],["float.IN(\"min\", \"\"),",18],["float.IN(\"line_thickness\", \"\"),",21],["float.IN(\"scale_x\", \"the horizontal scale\"),",24],["float.array(",24],["float(",35],["float.member(\"rounding\", \"\")",44],["float.member(\"border\", \"\")",48],["float.member(",52],["float.IN(\"scale_y\", \"the vertical scale\"),",24]],"useCount":548},{"word":"fml","context":[["import net.minecraftforge.fml.common.event.FMLPreInitializationEvent",31],["import net.minecraftforge.fml.common.network.simpleimpl.IMessageHandler",16],["import net.minecraftforge.fml.common.network.simpleimpl.IMessage",16],["import net.minecraftforge.fml.common.Mod",20],["import net.minecraftforge.fml.common.event.FMLPostInitializationEvent",21],["import net.minecraftforge.fml.common.event.FMLInitializationEvent",28],["import net.minecraftforge.fml.common.registry.GameRegistry",28],["import net.minecraftforge.fml.relauncher.SideOnly",30],["import net.minecraftforge.fml.common.eventhandler.SubscribeEvent",31],["import net.minecraftforge.fml.relauncher.Side",61]],"useCount":368},{"word":"fn","context":[["fn foo(a: bool) {",16],["fn main() {",588],["fn foo(a: i32, b: i32) {",19],["\"fn*\" -> return fn_STAR(ast, env)",22],["fn func() -> bool {",22],["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25],["rep(\"(def! not (fn* (a) (if a false true)))\", repl_env)",31],["val binds = ast.nth(1) as? ISeq ?: throw MalException(\"fn* requires a binding list as first parameter\")",31],["fn foo() {}",42],["package org.brackit.xquery.function.fn",59]],"useCount":905},{"word":"following","context":[["with one of the following error values returned in $errcode_ret:",21],["* that the following conditions are met:",26],["the following conditions:",29],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["*      furnished to do so, subject to the following conditions:",242],["furnished to do so, subject to the following conditions:",270],["* furnished to do so, subject to the following conditions:",1193],["value with one of the following error values returned in $errcode_ret:",20],["*  furnished to do so, subject to the following conditions:",20],["*   notice, this list of conditions and the following",16]],"useCount":2015},{"word":"foo","context":[["fn foo(a: i32, b: i32) {",19],["foo(\"b\", number = 1) +",19],["foo(\"c\", toUpperCase = true) +",19],["return (foo(\"a\") +",19],["foo(name = \"d\", number = 2, toUpperCase = true))",19],["val newName = \"foo\"",22],["fn foo() {}",42],["mod foo {",58],["foo();",22],["#[foo]",38]],"useCount":635},{"word":"for","context":[["for (file in it) {",70],["* Twittnuker - Twitter client for Android",264],["for (storage in storages) {",70],["for (file in files) {",106],["for (fragment in fragments) {",100],["for (scheme in schemes) {",96],["for (i in 1..10) {",89],["<li>The See Also section for other reference pages using this type.</li>",88],["* distributed with this work for additional information",79],["for (i in 0..size - 1) {",71]],"useCount":5346},{"word":"forEach","context":[["map.forEach {",217],["classes.forEach {",38],["members.forEach {",36],["forEach {",35],["}.forEach {",33],["ns.forEach({ it -> repl_env.set(it.key, it.value) })",31],["it.forEach {",47],["return@forEach",52],["records.tableRecordsList.forEach {",65],[".forEach {",135]],"useCount":904},{"word":"format","context":[["GLenum.IN(\"format\", \"\"),",98],["import java.time.format.DateTimeFormatter",59],["<li>{@code format} <b>must</b> be a valid {@code VkFormat} value</li>",18],["import android.text.format.DateUtils",53],["src[\"format\"],",44],["import org.joda.time.format.DateTimeFormat",40],["fun format() {",29],["import org.springframework.format.annotation.DateTimeFormat",24],["bgfx_texture_format_t.IN(\"_format\", \"texture format\", TextureFormat),",21],["it(\"should format the output\") {",16]],"useCount":571},{"word":"forms","context":[["package net.pagejects.core.forms",14],["* Redistribution and use in source and binary forms,",26],["// Redistribution and use in source and binary forms, with or without",126],["* Redistribution and use in source and binary forms, with or without",450]],"useCount":616},{"word":"fr","context":[["import fr.geobert.radis.R",43],["import fr.litarvan.krobot.command.ICommandCaller",21],["import fr.geobert.radis.data.Operation",19],["import fr.litarvan.krobot.command.Command",19],["import fr.geobert.radis.db.DbContentProvider",15],["package fr.javatic.reactkt.material.components",15],["import fr.litarvan.krobot.motor.IMotor",15],["package fr.geobert.efficio",15],["package fr.geobert.radis.tools",15],["import fr.geobert.radis.tools.Tools",16]],"useCount":328},{"word":"fragment","context":[["val p2 = fragment.normalizedPredecessors(IDNode(2))",44],["val p1 = fragment.predecessors.invoke(IDNode(1))",44],["val s1 = fragment.successors.invoke(IDNode(1))",44],["return fragment",168],["for (fragment in fragments) {",100],["package de.vanita5.twittnuker.fragment",89],["package com.mgaetan89.showsrage.fragment",70],["val s1 = fragment.normalizedSuccessors(IDNode(1))",44],["package me.rei_m.hbfavmaterial.presentation.fragment",56],["fragment.arguments = args",61]],"useCount":1540},{"word":"fragments","context":[["if (expected != null) checkLineChanges(fragments, expected)",20],["import org.droidplanner.android.fragments.widget.TowerWidgets",21],["checkDiffConsistency(fragments)",22],["import org.droidplanner.android.fragments.widget.TowerWidget",21],["import com.intellij.diff.fragments.DiffFragment",20],["package nl.endran.seniorlauncher.fragments",20],["val fragments = MANAGER.compareLinesInner(sequence1, sequence2, policy, INDICATOR)",33],["checkConsistency(fragments, before, after)",41],["for (fragment in fragments) {",100],["debugData.put(\"Fragments\", fragments)",45]],"useCount":637},{"word":"framework","context":[["import com.proxerme.app.task.framework.ListenableTask",19],["import com.proxerme.app.task.framework.Task",11],["import com.proxerme.app.adapter.framework.PagingAdapter",16],["* Powered By [rapid-framework]",15],["import junit.framework.AssertionFailedError",15],["* Web Site: http://www.rapid-framework.org.cn",15],["* Google Code: http://code.google.com/p/rapid-framework/",15],["import org.osgi.framework.BundleContext",26],["import junit.framework.TestCase",98],["import junit.framework.Assert",151]],"useCount":381},{"word":"free","context":[["* Unsubscribe to free this reference.",88],["* to free this reference.",675]],"useCount":763},{"word":"from","context":[["// save only if scheme differs from bundled",24],["This function must only be called from the main thread.",172],["\"This function must only be called from the main thread.\",",45],["sender.sendMessage(ChatColor.translateAlternateColorCodes('&', plugin.config.getString(\"messages.not-from-console\")))",34],["* @param response the response from the site.",30],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28],["* @param address The native address to read from.",27],["LOG.error(\"Cannot read scheme from $resourceName\", e)",26],["// scheme from file with old extension, so, we must ignore it",26],["LOG.error(\"Cannot read scheme from $resourceName\")",26]],"useCount":1068},{"word":"fun","context":[["fun <T: View> T.lparams(",878],["fun main(args: Array<String>) {",970],["override fun toString(): String {",998],["override fun equals(other: Any?): Boolean {",459],["override fun onCreate(savedInstanceState: Bundle?) {",1642],["public fun <T: View> T.lparams(",385],["fun setUp() {",390],["override fun run() {",397],["override fun onDestroy() {",419],["override fun onResume() {",397]],"useCount":38943},{"word":"function","context":[["import java.util.function.Function",52],["package org.brackit.xquery.function.fn",59],["//container function",76],["import org.brackit.xquery.function.AbstractFunction",80],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["This function must only be called from the main thread.",172],["import java.util.function.Consumer",49],["\"This function must only be called from the main thread.\",",45],["override fun generateFunctionAddress(writer: PrintWriter, function: NativeClassFunction) {",32],["else -> throw MalException(\"cannot execute non-function\")",22]],"useCount":1158},{"word":"functions","context":[[".map { it.functions }",27],["import rx.functions.Action1",133],["import rx.functions.Func1",66],["Implement the extension functions Int.r(), Pair<Int, Int>.r()",16],["Pass a color as an argument to functions 'tr', 'td'.",16],["2) Color the table like a chess board (using getTitleColor() and getCellColor() functions above).",14],["import rx.functions.Func0",14],["import rx.functions.Action0",13],["In Kotlin standard library there are lots of extension functions that make the work with collections more convenient.",12],["// Vertex attrib functions javadoc",12]],"useCount":334},{"word":"furnished","context":[["*      furnished to do so, subject to the following conditions:",242],["*  furnished to do so, subject to the following conditions:",20],["furnished to do so, subject to the following conditions:",270],["* furnished to do so, subject to the following conditions:",1193]],"useCount":1725},{"word":"g2d","context":[["import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator",21],["import com.badlogic.gdx.graphics.g2d.Animation",12],["import com.badlogic.gdx.graphics.g2d.SpriteBatch",92],["import com.badlogic.gdx.graphics.g2d.Batch",54],["import com.badlogic.gdx.graphics.g2d.TextureRegion",58],["import com.badlogic.gdx.graphics.g2d.BitmapFont",48],["import com.badlogic.gdx.graphics.g2d.TextureAtlas",30],["import com.badlogic.gdx.graphics.g2d.Sprite",40]],"useCount":355},{"word":"gadsu","context":[["import at.cpickl.gadsu.service.LOG",37],["import at.cpickl.gadsu.client.Client",65],["import at.cpickl.gadsu.treatment.Treatment",20],["package at.cpickl.gadsu.service",22],["import at.cpickl.gadsu.UserEvent",24],["import at.cpickl.gadsu.view.components.panels.GridPanel",27],["import at.cpickl.gadsu.GadsuException",28],["import at.cpickl.gadsu.view.swing.Pad",18],["package at.cpickl.gadsu.view",18],["import at.cpickl.gadsu.testinfra.unsavedValidInstance",18]],"useCount":637},{"word":"game","context":[["import main.astraeus.game.model.entity.mob.player.attribute.Attribute",26],["import main.astraeus.game.model.entity.mob.player.Player",109],["import main.astraeus.net.codec.game.GamePacketBuilder",71],["import main.astraeus.game.model.entity.mob.update.UpdateFlag",27],["import main.astraeus.game.model.entity.mob.player.PlayerRights",24],["import main.astraeus.game.model.Location",22],["createNPD(game.astManager[\"ButtonDown\", Texture::class], 8))",21],["createNPD(game.astManager[\"ButtonUp\", Texture::class], 8),",20],["import main.astraeus.game.model.World",17],["import main.astraeus.game.model.entity.mob.npc.Npc",16]],"useCount":480},{"word":"gdx","context":[["import com.badlogic.gdx.math.Vector3",62],["import com.badlogic.gdx.graphics.g2d.TextureRegion",58],["import com.badlogic.gdx.scenes.scene2d.Stage",65],["import com.badlogic.gdx.graphics.Texture",74],["import com.badlogic.gdx.graphics.g2d.SpriteBatch",92],["import com.badlogic.gdx.graphics.Color",117],["import com.badlogic.gdx.math.Vector2",130],["import com.badlogic.gdx.Gdx",207],["import com.badlogic.gdx.graphics.g2d.Batch",54],["import com.badlogic.gdx.graphics.GL20",57]],"useCount":2233},{"word":"generator","context":[["package org.mikeneck.kuickcheck.generator",22],["import org.lwjgl.generator.*",1406],["package org.lwjgl.generator",58],["// DroidMate, an automated execution generator for Android apps.",54],["generator.generate(this)",53],["import org.jetbrains.android.anko.generator.GenerationState",38],["package org.jetbrains.android.anko.generator",34],["override fun accept(generator: StatementGenerator) {",31],["override fun accept(generator: ExpressionGenerator) {",23],["generator.returnValue()",17]],"useCount":1824},{"word":"get","context":[["get() = 0",51],["get() {",1387],["server.get(\"**\", hello_world);",50],["get() = throw UnsupportedOperationException()",55],[".get()",58],["get() = getValue()!!",68],["get() = null",77],["get() = true",93],["get",100],["get() = false",124]],"useCount":5678},{"word":"getApplication","context":[["(ApplicationManager.getApplication() as ApplicationImpl).exit(true, true, true, true)",15],["ApplicationManager.getApplication().runWriteAction {",16],["if (!ApplicationManager.getApplication().isUnitTestMode) {",17],["val app = ApplicationManager.getApplication()",64],["if (ApplicationManager.getApplication().isUnitTestMode) {",59],["ApplicationManager.getApplication().invokeLater {",39],["ApplicationManager.getApplication().executeOnPooledThread {",35],["ApplicationManager.getApplication().invokeLater({",21],["ApplicationManager.getApplication().saveSettings()",18],["ApplicationManager.getApplication().assertIsDispatchThread()",19]],"useCount":368},{"word":"getInstance","context":[["val properties = PropertiesComponent.getInstance()",29],["JBPopupFactory.getInstance()",27],["val settings = EditorSettingsExternalizable.getInstance()",31],["(ProjectManager.getInstance() as StoreAwareProjectManager).flushChangedAlarm()",35],["analytics = FirebaseAnalytics.getInstance(MyApplication.getAppContext())",36],["val cal = Calendar.getInstance()",42],["val c = Calendar.getInstance()",53],["val calendar = Calendar.getInstance()",88],["Realm.getInstance(context).use {",95],["Realm.getInstance(context).use { realm ->",228]],"useCount":1242},{"word":"getter","context":[["return createMainThreadMutableProperty(getter, setter)",130],["println(\"\\t/** Unsafe version of {@link #$getter}. */\")",32],["get() = throw AnkoException(\"'android.widget.TextView.lines' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.singleLine' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.ImageView.imageURI' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.linkTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.hintResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.enabled' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.LinearLayout.gravity' property does not have a getter\")",20]],"useCount":555},{"word":"git","context":[["git(\"checkout -b $branch\")",13],["import org.jetbrains.settingsRepository.git.computeIndexDiff",13],["git(\"checkout -b feature\")",18],["import org.jetbrains.settingsRepository.git.GitRepositoryService",20],["import org.jetbrains.settingsRepository.git.processChildren",25],["import org.jetbrains.settingsRepository.git.cloneBare",25],["import git4idea.test.GitExecutor.git",26],["import org.jetbrains.settingsRepository.git.commit",31],["import org.jetbrains.settingsRepository.git.GitRepositoryManager",32],["package org.jetbrains.settingsRepository.git",75]],"useCount":301},{"word":"github","context":[["package com.github.K0zka.kerub.model",69],["import io.github.binaryfoo.DecodedData",71],["import com.github.K0zka.kerub.utils.getLogger",81],["import com.github.K0zka.kerub.model.VirtualMachine",83],["package io.github.binaryfoo.decoders",94],["import com.github.K0zka.kerub.planner.OperationalState",108],["import com.github.K0zka.kerub.model.Host",170],["package com.github.K0zka.kerub.services.impl",69],["import com.github.K0zka.kerub.utils.toSize",61],["package com.github.K0zka.kerub.data.ispn",58]],"useCount":5092},{"word":"given","context":[["given {",16],["// Return a list of the customers who live in the given city",15],["import org.jetbrains.spek.api.dsl.given",15],["// Return a customer who lives in the given city, or null if there is none",14],["/** Prints the given message and newline to the standard output stream. */",19],["// given:",19],["Declarations of Client, PersonalInfo and Mailer are given below.",25],["// given",29],["given()",38],["//given",58]],"useCount":377},{"word":"gjt","context":[["import org.gjt.jclasslib.structures.ClassFile",56],["package org.gjt.jclasslib.structures.attributes",47],["import org.gjt.jclasslib.browser.BrowserServices",34],["import org.gjt.jclasslib.structures.AttributeInfo",26],["import org.gjt.jclasslib.structures.InvalidByteCodeException",23],["package org.gjt.jclasslib.browser",20],["package org.gjt.jclasslib.browser.detail",18],["package org.gjt.jclasslib.util",20],["package org.gjt.jclasslib.structures.constants",19],["package org.gjt.jclasslib.structures",18]],"useCount":403},{"word":"gmail","context":[["* Email: loshine@1992@gmail.com",24],["* Created by Eugene Petrenko (eugene.petrenko@gmail.com)",31],["* @author NAGASAWA Takahiro<drmashu@gmail.com>",25],["* @author Almas Baimagambetov (AlmasB) (almaslvl@gmail.com)",34],["* @author [Andrey Paslavsky](mailto:a.paslavsky@gmail.com)",34],["* @author Adamansky Anton (adamansky@gmail.com)",51],["* @author Michał Seroczyński <michal.seroczynski@gmail.com>",106],["* @author debop sunghyouk.bae@gmail.com",123],["* @author Almas Baimagambetov (almaslvl@gmail.com)",151],["* @author sunghyouk.bae@gmail.com",204]],"useCount":914},{"word":"gms","context":[["import com.google.android.gms.location.LocationServices",17],["import com.google.android.gms.maps.model.LatLng",63],["import com.google.android.gms.common.api.GoogleApiClient",57],["import com.google.android.gms.common.ConnectionResult",39],["import com.google.android.gms.analytics.HitBuilders",28],["import com.google.android.gms.maps.GoogleMap",27],["import com.google.android.gms.analytics.Tracker",20],["import com.google.android.gms.common.GoogleApiAvailability",14],["import com.google.android.gms.maps.CameraUpdateFactory",19],["import com.google.android.gms.maps.model.MarkerOptions",17]],"useCount":386},{"word":"google","context":[["import com.google.common.truth.Truth.assertThat",82],["import com.google.gson.JsonObject",85],["import com.google.common.eventbus.EventBus",73],["import com.google.gson.JsonElement",65],["import com.google.android.gms.maps.model.LatLng",63],["import com.google.inject.Singleton",60],["import com.google.inject.Inject",183],["import com.google.gson.annotations.SerializedName",292],["import com.google.gson.Gson",308],["import com.google.gson.GsonBuilder",87]],"useCount":2965},{"word":"granularDatabaseService","context":[["val granularDatabaseService = JDBCGranularDatabaseProtoService(",152],["val entityService = EntityProtoService(granularDatabaseService, mySqlGeneratorService)",65],["val entityService = EntityProtoService(granularDatabaseService, generatorService)",31],["val entityService = EntityProtoService(granularDatabaseService, sqliteGeneratorService)",28],["if (!this.granularDatabaseService.isAvailable()) {",23],["EntityProtoService(granularDatabaseService, mySqlGeneratorService),",16]],"useCount":315},{"word":"graph","context":[["val graph = graph {",70],["val graph = graph {",70],["import com.intellij.vcs.log.graph.api.LinearGraph",29],["import com.intellij.vcs.log.graph.api.elements.GraphEdge",23],["import com.intellij.vcs.log.graph.api.elements.GraphNode",21],["import com.intellij.vcs.log.graph.utils.LinearGraphUtils",21],["import com.intellij.vcs.log.graph.api.EdgeFilter",20],["import com.intellij.vcs.log.graph.impl.permanent.GraphLayoutBuilder",19],["package com.intellij.vcs.log.graph",19],["import com.intellij.vcs.log.graph.api.elements.GraphEdgeType",16]],"useCount":594},{"word":"graphics","context":[["import com.badlogic.gdx.graphics.g2d.SpriteBatch",92],["import android.graphics.Rect",111],["import com.badlogic.gdx.graphics.Color",117],["import android.graphics.Canvas",144],["import android.graphics.Bitmap",161],["import android.graphics.drawable.Drawable",218],["import android.graphics.Color",293],["import android.graphics.Paint",84],["import com.badlogic.gdx.graphics.Texture",74],["import android.graphics.BitmapFactory",70]],"useCount":2347},{"word":"gravity","context":[["open fun gravity(arg: Int) = DSL.gravity(arg)",18],["open fun gravity(arg: Int) = DSL.gravity(arg)",18],["gravity = Gravity.RIGHT",15],["gravity: Int,",112],["get() = throw AnkoException(\"'android.widget.Gallery.gravity' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.LinearLayout.gravity' property does not have a getter\")",20],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height, gravity)",92],["gravity = Gravity.CENTER",47],["val layoutParams = FrameLayout.LayoutParams(width, height, gravity)",36],["gravity = Gravity.CENTER_VERTICAL",20]],"useCount":422},{"word":"gson","context":[["import com.google.gson.reflect.TypeToken",59],["import com.google.gson.annotations.Expose",48],["import com.google.gson.stream.JsonWriter",42],["val gson = Gson()",41],["import com.google.gson.Gson",308],["import com.google.gson.JsonElement",65],["import com.google.gson.GsonBuilder",87],["import com.google.gson.JsonObject",85],["import retrofit2.converter.gson.GsonConverterFactory",59],["import com.google.gson.annotations.SerializedName",292]],"useCount":1394},{"word":"h5","context":[["<h5>Valid Usage (Implicit)</h5>",545],["<h5>See Also</h5>",602],["<h5>See Also</h5>",602],["<h5>Valid Usage (Implicit)</h5>",545],["<h5>Valid Usage</h5>",394],["<h5>Valid Usage</h5>",394],["<h5>C Specification</h5>",351],["<h5>C Specification</h5>",351],["<h5>Description</h5>",468],["<h5>Description</h5>",468]],"useCount":6616},{"word":"hamcrest","context":[["import org.hamcrest.MatcherAssert.assertThat",132],["import org.hamcrest.Description",28],["import org.hamcrest.Matcher",24],["import org.hamcrest.Matchers.`is`",36],["import org.hamcrest.CoreMatchers.`is`",50],["import org.hamcrest.CoreMatchers",60],["import org.hamcrest.Matchers.equalTo",63],["import org.hamcrest.CoreMatchers.equalTo",76],["import org.hamcrest.Matchers.*",34],["import org.hamcrest.CoreMatchers.*",31]],"useCount":688},{"word":"handle","context":[["<li>{@code physicalDevice} <b>must</b> be a valid {@code VkPhysicalDevice} handle</li>",39],["\"{@code physicalDevice} $must be a valid {@code VkPhysicalDevice} handle\",",26],["<li>{@code buffer} <b>must</b> be a valid {@code VkBuffer} handle</li>",27],["nk_handle.IN(\"handle\", \"\"),",27],["bgfx_texture_handle_t.IN(\"_handle\", \"texture handle\"),",29],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["// automatically handle clicks on the Home/Up button, so long",80],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["\"{@code commandBuffer} $must be a valid {@code VkCommandBuffer} handle\",",52]],"useCount":821},{"word":"handler","context":[["package engineer.carrot.warren.warren.handler",30],["handler.post {",26],["import io.netty.handler.codec.http.HttpRequest",40],["override fun <T : EventInput<T>> accept(visitor: T, handler: EventInput.Handler<T>)",25],["import io.netty.handler.codec.http.HttpHeaderNames",24],["private val handler = Handler()",22],["override fun `fun`(param: T) = handler(param)",20],["import io.netty.handler.codec.http.*",47],["import io.netty.handler.codec.http.FullHttpRequest",42],["import io.netty.handler.codec.http.HttpResponseStatus",51]],"useCount":587},{"word":"hasNext","context":[["override fun hasNext(): Boolean {",117],["while (iterator.hasNext()) {",78],["while (it.hasNext()) {",76],["while (reader.hasNext()) {",35],["if (!it.hasNext()) throw MalException(\"odd number of binding elements in let*\")",34],["while (iter.hasNext()) {",27],["assertTrue(iter.hasNext)",25],["if (iterator.hasNext()) {",24],["assert(i.hasNext())",18],["assertFalse(it.hasNext())",17]],"useCount":571},{"word":"hashCode","context":[["override fun hashCode(): Int = StringUtil.hashCode(content)",18],["override fun hashCode(): Int = StringUtil.hashCode(content)",18],["override fun hashCode() =",15],["override fun hashCode(): Int{",53],["override fun hashCode(): Int {",355],["var result = super.hashCode()",20],["when(token.stringPayload.hashCode()) {",15],["var result = name.hashCode()",11],["return id.hashCode()",11],["override fun hashCode(): Int = value.hashCode()",11]],"useCount":538},{"word":"hashMapOf","context":[["hashMapOf(",46],["return hashMapOf(",12],["return add(hashMapOf<String, Any>()",13],["private val ourUpdatedPlugins = hashMapOf<String, PluginDownloader>()",15],["private val ourAdditionalRequestOptions = hashMapOf<String, String>()",15],["val map = hashMapOf(",216]],"useCount":317},{"word":"have","context":[["get() = throw AnkoException(\"'android.widget.ImageView.imageBitmap' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.LinearLayout.gravity' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.linkTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.hintResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.ImageView.imageURI' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.enabled' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.AbsListView.selectorResource' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.lines' property does not have a getter\")",20]],"useCount":483},{"word":"hbfavmaterial","context":[["package me.rei_m.hbfavmaterial.usecase",17],["import me.rei_m.hbfavmaterial.enum.EntryTypeFilter",17],["import me.rei_m.hbfavmaterial.domain.entity.EntryEntity",21],["import me.rei_m.hbfavmaterial.presentation.manager.ActivityNavigator",23],["import me.rei_m.hbfavmaterial.di.HasComponent",26],["import me.rei_m.hbfavmaterial.domain.entity.BookmarkEntity",38],["package me.rei_m.hbfavmaterial.di",39],["package me.rei_m.hbfavmaterial.presentation.fragment",56],["package me.rei_m.hbfavmaterial.usecase.impl",17],["import me.rei_m.hbfavmaterial.R",58]],"useCount":413},{"word":"height","context":[["this.height = height",33],["this.height = height",33],["val layoutParams = FrameLayout.LayoutParams(width, height, gravity)",36],["val layoutParams = FrameLayout.LayoutParams(width, height)",37],["override fun resize(width: Int, height: Int) {",44],["GLsizei.IN(\"height\", \"\")",54],["height: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["GLsizei.IN(\"height\", \"\"),",118],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height)",92],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height, gravity)",92]],"useCount":1312},{"word":"holder","context":[["override fun buildVisitor(holder: ProblemsHolder, isOnTheFly: Boolean) =",54],["view.tag = holder",15],["* @param view the inflated view for this holder.",16],["override fun onBindViewHolder(holder: RecyclerView.ViewHolder?, position: Int) {",18],["override fun buildVisitor(holder: ProblemsHolder, isOnTheFly: Boolean): PsiElementVisitor {",24],["override fun annotate(element: PsiElement, holder: AnnotationHolder) {",26],["override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {",31],["return holder",32],["override fun onBindViewHolder(holder: ViewHolder?, position: Int) {",39],["override fun onBindViewHolder(holder: ViewHolder, position: Int) {",83]],"useCount":425},{"word":"host","context":[["address = \"host-1.example.com\",",42],["import com.github.K0zka.kerub.host.HostCommandExecutor",26],["hostId = host.id,",26],["if (host != null) {",27],["val host = Host(",59],["package com.github.K0zka.kerub.host",53],["hosts = listOf(host),",30],["package com.github.K0zka.kerub.host.distros",35],["id = host.id,",35],["import com.github.K0zka.kerub.host.HostManager",45]],"useCount":678},{"word":"html","context":[["import kotlinx.html.attributes.*",25],["import org.intellij.markdown.html.HtmlGenerator",16],["package kotlinx.html",77],["@TestManager.TestDescriptor(filePath = \"foo/index.html\", doNotCreate = true, status = 200)",15],["import kotlinx.html.*",58],["* [Testing Fundamentals](http://d.android.com/tools/testing/testing_android.html)",50],["import kotlinx.html.impl.*",25],["* Licensing: http://www.cs.rice.edu/~dwallach/calwatch/licensing.html",23],["return html {",18],["package net.pagejects.core.element.html",16]],"useCount":386},{"word":"http","context":[["import io.netty.handler.codec.http.*",47],["import org.springframework.http.HttpStatus",47],["* [Testing Fundamentals](http://d.android.com/tools/testing/testing_android.html)",50],["import retrofit2.http.Query",60],["import retrofit2.http.GET",90],["* @author <a href=\"http://uk.linkedin.com/in/neilellis\">Neil Ellis</a>",111],["import javax.servlet.http.HttpServletResponse",126],["import javax.servlet.http.HttpServletRequest",139],["* WWW: http://altruix.cc",213],["import io.netty.handler.codec.http.HttpResponseStatus",51]],"useCount":1914},{"word":"i","context":[["i--",47],["const..nk_input_p.IN(\"i\", \"\"),",45],["for (i in 0..childCount - 1) {",41],["var i = 0",492],["i++",276],["* 4-i Rostovskii pereulok 2/1/20",213],["for (i in 1..10) {",89],["return i",73],["i += 1",178],["for (i in 0..size - 1) {",71]],"useCount":3866},{"word":"i_introduction","context":[["package i_introduction._9_Extension_Functions",19],["package i_introduction._10_Object_Expressions",28],["package i_introduction._7_Nullable_Types",26],["package i_introduction._5_String_Templates",25],["package i_introduction._4_Lambdas",24],["package i_introduction._6_Data_Classes",24],["package i_introduction._1_Java_To_Kotlin_Converter",23],["package i_introduction._3_Default_Arguments",21],["package i_introduction._2_Named_Arguments",20],["package i_introduction._8_Smart_Casts",18]],"useCount":352},{"word":"id","context":[["val id: Int,",144],["id = UUID.randomUUID(),",114],["val id = item.itemId",112],["val toolbar = findViewById(R.id.toolbar) as Toolbar",86],["android.R.id.home -> {",85],["if (id == R.id.action_settings) {",77],["if (id == R.id.action_settings) {",77],["MapToInt..uint8_t.IN(\"_id\", \"view id\"),",75],["testModel.id = UUID.randomUUID().toString()",73],["this.id = id",65]],"useCount":4054},{"word":"ide","context":[["import com.intellij.ide.util.PropertiesComponent",90],["import org.rust.ide.icons.RustIcons",69],["package org.rust.ide.inspections",64],["import com.intellij.ide.highlighter.ProjectFileType",58],["package org.rust.ide.intentions",55],["package org.jetbrains.ide",49],["package org.rust.ide.structure",47],["import com.intellij.ide.IdeBundle",45],["import com.intellij.ide.structureView.StructureViewTreeElement",43],["import com.intellij.ide.structureView.impl.common.PsiTreeElementBase",47]],"useCount":1046},{"word":"ids","context":[[": ReadOnlyProperty<View, List<V>> = optional(ids, viewFinder)",17],[": ReadOnlyProperty<View, List<V>> = required(ids, viewFinder)",17],[": ReadOnlyProperty<Dialog, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<Fragment, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<ViewHolder, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<ViewHolder, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<Fragment, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<Activity, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<Dialog, List<V>> = optional(ids, viewFinder)",16],[": ReadOnlyProperty<Activity, List<V>> = required(ids, viewFinder)",16]],"useCount":408},{"word":"if","context":[["if (this === other) return true",208],["if (result == null) {",192],["if (value == null) {",152],["if (result != null) {",143],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["if (overrides) println(\"$indent@Override\")",118],["if (value != null) {",108],["if (file.exists()) {",103],["if (savedInstanceState == null) {",101],["if (BuildConfig.DEBUG) {",96]],"useCount":16836},{"word":"image","context":[["\"type\" to \"image\"",14],["￿    VkImage                                     image,",14],["import at.cpickl.gadsu.image.MyImage",15],["import javafx.scene.image.ImageView",17],["returnDoc = \"a handle to the image\"",17],[".into(image)",17],["PIXEL_UNPACK_BUFFER..const..void_p.IN(\"data\", \"a pointer to the compressed image data\")",18],["<li>{@code image} <b>must</b> be a valid {@code VkImage} handle</li>",20],["import javafx.scene.image.Image",29],["import java.awt.image.BufferedImage",54]],"useCount":311},{"word":"impl","context":[["package com.github.K0zka.kerub.services.impl",69],["import org.rust.lang.core.psi.impl.RustCompositeElementImpl",43],["import org.rust.lang.core.psi.impl.RustFile",47],["import com.intellij.ide.structureView.impl.common.PsiTreeElementBase",47],["import com.intellij.openapi.application.impl.ApplicationImpl",48],["import com.intellij.openapi.editor.impl.DocumentImpl",50],["import com.intellij.openapi.project.impl.ProjectImpl",54],["import com.intellij.openapi.components.impl.stores.FileStorageCoreUtil",55],["import com.intellij.openapi.components.impl.stores.StateStorageManager",63],["package org.rust.lang.core.psi.impl.mixin",149]],"useCount":1864},{"word":"import","context":[["import org.junit.Test",4533],["import java.util.*",5431],["import android.content.Context",3362],["import android.os.Bundle",2910],["import android.view.View",2723],["import java.io.File",2474],["import rx.Observable",1576],["import android.view.ViewGroup",1541],["import android.content.Intent",1471],["import org.lwjgl.generator.*",1406]],"useCount":190655},{"word":"in","context":[["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102],["* Redistribution and use in source and binary forms, with or without",450],["* Skype: dp118m (voice calls must be scheduled in advance)",213],["// Redistribution and use in source and binary forms, with or without",126],["* @author <a href=\"http://uk.linkedin.com/in/neilellis\">Neil Ellis</a>",111],["for (file in files) {",106],["for (fragment in fragments) {",100],["for (scheme in schemes) {",96],["for (i in 1..10) {",89],["// as you specify a parent activity in AndroidManifest.xml.",79]],"useCount":6428},{"word":"index","context":[["return index",54],["GLuint.IN(\"index\", \"\"),",268],["var index = 0",112],["index++",104],["GLuint.IN(\"index\", \"\")",58],["if (index < 0) {",49],["GLuint.IN(\"index\", vertexAttribIndex),",42],["if (index != -1) {",37],["val index = Arrays.binarySearch(names, key)",35],["index = index + 1",32]],"useCount":1573},{"word":"indicator","context":[["indicator?.checkCanceled()",78],["indicator.checkCanceled()",39],["repositoryManager.push(indicator)",37],["indicator: ProgressIndicator?,",30],["indicator.isIndeterminate = true",22],["val indicator = ProgressManager.getInstance().progressIndicator",21],["repositoryManager.commit(indicator)",20],["updateResult = repositoryManager.resetToMy(indicator, localRepositoryInitializer)",17],["updateResult = repositoryManager.pull(indicator)",17],["override fun run(indicator: ProgressIndicator) {",68]],"useCount":668},{"word":"indices","context":[["for (i in paramNames.indices) {",20],["for (i in names.indices) {",38],["for (t in testValuesDouble.indices) {",18],["AutoType(\"indices\", GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, GL_UNSIGNED_INT)..GLenum.IN(",21],["val indices = SequentialParserUtil.textRangesToIndices(rangesToGlue)",21],["for (i in schemes.indices) {",26],["ELEMENT_ARRAY_BUFFER..const..void_p.IN(\"indices\", \"\"),",28],["AutoType(\"indices\", GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, GL_UNSIGNED_INT)..GLenum.IN(\"type\", \"\"),",30],["for (i in schemes.indices.reversed()) {",31],["AutoSizeShr(\"GLESChecks.typeToByteShift(type)\", \"indices\")..GLsizei.IN(\"count\", \"\"),",31]],"useCount":436},{"word":"inflater","context":[["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["super.onCreateOptionsMenu(menu, inflater)",32],["override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {",40],["override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {",45],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {",60],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,",68],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {",100],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,",51],["\"  protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\",",31],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedState: Bundle?): View? {",25]],"useCount":868},{"word":"info","context":[["LOG.info(e)",46],["const..stbtt_fontinfo_p.IN(\"info\", \"an ##STBTTFontinfo struct\"),",46],["info.scheduleDelete()",40],["val info = schemeToInfo.get(scheme)",35],["filesToDelete.remove(\"${info.fileName}\")",33],["info.hash = JDOMUtil.getTreeHash(element, true)",31],["return info != null && schemeExtension != info.fileExtension",26],["return info != null && schemeExtension != info.fileExtension",26],["import com.proxerme.library.info.ProxerUrlHolder",24],["val info = schemeToInfo.get(existingScheme)",24]],"useCount":713},{"word":"init","context":[["lp.init()",139],["fun init() {",91],["v.init()",146],["listener.init()",153],["init: FrameLayout.LayoutParams.() -> Unit = defaultInit",208],["init: android.widget.FrameLayout.LayoutParams.() -> Unit = defaultInit",320],["init()",708],["view.init()",733],["layoutParams.init()",1265],["init {",5440]],"useCount":10916},{"word":"inject","context":[["import javax.inject.Singleton",359],["import javax.inject.Inject",1100],["import com.google.inject.Inject",183],["import javax.inject.Named",79],["import com.google.inject.Singleton",60],["App.component().inject(this)",57],["import com.google.inject.AbstractModule",54],["import javax.inject.Qualifier",38],["component.inject(this)",31],["import javax.inject.Scope",56]],"useCount":2274},{"word":"ink","context":[["import ink.abb.pogo.scraper.util.cachedInventories",20],["import ink.abb.pogo.scraper.util.pokemon.getIvPercentage",24],["package ink.abb.pogo.scraper",26],["import ink.abb.pogo.scraper.Task",49],["package ink.abb.pogo.scraper.tasks",52],["import ink.abb.pogo.scraper.Bot",53],["import ink.abb.pogo.scraper.Context",62],["import ink.abb.pogo.scraper.Settings",66],["import ink.abb.pogo.scraper.util.Log",80],["package ink.abb.pogo.scraper.util.data",16]],"useCount":497},{"word":"input","context":[["fun rep(input: String, env: Env): String =",31],["print(eval(read(input), env))",31],["input.close()",33],["fun read(input: String?): MalType = read_str(input)",38],["fun read(input: String?): MalType = read_str(input)",38],["val input = readline(\"user> \")",39],["import org.apache.commons.io.input.NullInputStream",41],["override fun isInputValid(context: ConversationContext, input: String): Boolean {",43],["override fun acceptValidatedInput(context: ConversationContext, input: String): Prompt {",43],["override fun readData(input: DataInput) {",62]],"useCount":1359},{"word":"instance","context":[["workerContext.dispatcher = DirectDispatcher.instance",21],["instance = this",21],["callbackContext.dispatcher = DirectDispatcher.instance",21],["<li>This command <b>must</b> only be called outside of a render pass instance</li>",34],["return instance",35],["if (instance == null) {",20],["<li>This command <b>must</b> only be called inside of a render pass instance</li>",20],["import com.github.salomonbrys.kodein.instance",19],["￿    VkInstance                                  instance,",17],["return instance!!",17]],"useCount":396},{"word":"int","context":[["AutoSize(\"str\")..int.IN(\"len\", \"\"),",30],["int.IN(\"len\", \"\")",24],["int.IN(\"count\", \"\"),",30],["public boolean testBooleanVarargs(int test, Boolean... booleans) {",32],["////            public int getManaCost() {",33],["int.IN(\"pos\", \"\"),",36],["AutoSize(\"text\")..int.IN(\"len\", \"\"),",39],["int temp = test;",40],["int.IN(",44],["int(",346]],"useCount":1024},{"word":"intb","context":[["intb(",438],["intb.IN(\"active\", \"\")",12],["intb.IN(\"selected\", \"\"),",12],["intb.IN(\"value\", \"\")",12]],"useCount":474},{"word":"intellij","context":[["import com.intellij.util.SmartList",307],["import com.intellij.openapi.diagnostic.Logger",290],["import com.intellij.openapi.project.Project",896],["import com.intellij.psi.PsiElement",660],["import com.intellij.openapi.vfs.VirtualFile",601],["import com.intellij.openapi.application.ApplicationManager",500],["import com.intellij.lang.ASTNode",439],["import com.intellij.openapi.util.io.FileUtil",400],["import com.intellij.openapi.util.text.StringUtil",380],["package com.intellij.configurationStore",374]],"useCount":24263},{"word":"intent","context":[["override fun onReceive(context: Context, intent: Intent) {",114],["override fun onBind(intent: Intent): IBinder? {",34],["when (intent.action) {",34],["val intent = Intent(Intent.ACTION_VIEW)",38],["override fun onReceive(context: Context?, intent: Intent?) {",41],["override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {",42],["val intent = Intent()",56],["return intent",69],["context.startActivity(intent)",74],["startActivity(intent)",265]],"useCount":1255},{"word":"interface","context":[["interface Presenter {",18],["interface View {",31],["interface Expr",16],["interface AppComponent {",20],["interface View : Presenter.View {",20],["interface Callbacks {",22],["interface Mailer {",30],["interface Listener {",30],["bgfx_callback_interface_t_p.IN(\"_this\", \"the callback interface\"),",32],["interface ApplicationComponent {",34]],"useCount":342},{"word":"internal","context":[["package com.github.siosio.upsource.internal",27],["import com.beust.kobalt.internal.PluginInfo",27],["import com.jakewharton.rxbinding.internal.Functions",27],["import org.eclipse.jgit.internal.JGitText",28],["import com.beust.kobalt.internal.KobaltSettings",28],["package com.beust.kobalt.internal",47],["internal set",95],["import io.vertx.kotlin.core.internal.KotlinHandler",22],["internal",19],["import com.beust.kobalt.internal.build.BuildFile",17]],"useCount":507},{"word":"invoke","context":[["override fun invoke(project: Project, editor: Editor, element: PsiElement) {",22],["runnable.invoke()",46],["val p2 = fragment.predecessors.invoke(IDNode(2))",44],["val s2 = fragment.successors.invoke(IDNode(2))",44],["val p1 = fragment.predecessors.invoke(IDNode(1))",44],["val s1 = fragment.successors.invoke(IDNode(1))",44],["verify(quickFix).writeAction(eq(project), capture { it.invoke() })",19],["val s0 = fragment.successors.invoke(IDNode(0))",44],["action.invoke()",23],["val p0 = fragment.predecessors.invoke(IDNode(0))",44]],"useCount":486},{"word":"io","context":[["import java.io.BufferedReader",191],["import java.io.File",2474],["import java.io.IOException",1213],["import java.io.InputStream",541],["import java.io.Serializable",412],["import com.intellij.openapi.util.io.FileUtil",400],[".subscribeOn(Schedulers.io())",241],["import java.io.*",217],["import java.io.OutputStream",206],["import java.io.InputStreamReader",196]],"useCount":13631},{"word":"irc","context":[["import org.kitteh.irc.client.library.element.User",25],["import engineer.carrot.warren.kale.irc.CharacterCodes",28],["import engineer.carrot.warren.kale.irc.message.utility.CaseMapping",28],["import engineer.carrot.warren.kale.irc.message.IrcMessage",107],["import engineer.carrot.warren.kale.irc.message.IMessage",62],["import engineer.carrot.warren.kale.irc.message.IMessageSerialiser",44],["import engineer.carrot.warren.kale.irc.message.IMessageParser",43],["package engineer.carrot.warren.kale.irc.message.rfc1459",40],["import engineer.carrot.warren.kale.irc.prefix.Prefix",38],["package engineer.carrot.warren.kale.irc.message.rfc1459.rpl",30]],"useCount":544},{"word":"is","context":[["/* This Source Code Form is subject to the terms of the Mozilla Public",81],["* This file is part of lavagna.",81],["// Inflate the menu; this adds items to the action bar if it is present.",88],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["* @throws UnsupportedOperationException This operation is not supported yet",604],["* This file is part of ProcessManager.",153],["When true, the $registryLink extension is supported.",249],["* This Source Code Form is subject to the terms of the Mozilla Public",179],["* This file is part of econsim-tr01.",213],["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216]],"useCount":5149},{"word":"isEmpty","context":[["if (isEmpty()) {",35],["if (sessions.isEmpty()) {",35],["override fun isEmpty(): Boolean {",39],["if (JDOMUtil.isEmpty(element)) {",29],["assertThat(diff.changed).isEmpty()",28],["assertThat(diff.untracked).isEmpty()",28],["assertThat(diff.modified).isEmpty()",28],["assertThat(diff.untrackedFolders).isEmpty()",28],["assertThat(projectInspectionProfileManager.state).isEmpty()",34],["if (newState == null || JDOMUtil.isEmpty(newState)) {",30]],"useCount":1259},{"word":"isEqualTo","context":[["assertThat(component.size()).isEqualTo(3)",15],["assertThat(HttpResponseStatus.valueOf(connection.responseCode)).isEqualTo(expectedStatus)",14],["assertThat(range.end).isEqualTo(end)",15],["assertThat(statement.sql).isEqualTo(expectedSql)",30],["assertThat(actualWhereClause).isEqualTo(expectedWhereClause)",23],["assertThat(statement.tableName).isEqualTo(table.name)",22],["assertThat(component.foo).isEqualTo(\"new\")",18],["assertThat(nameToCount.get(\"m1\")).isEqualTo(1)",16],["assertThat(actualSql).isEqualTo(expectedSql)",53],["assertThat(layout.componentCount).isEqualTo(1)",53]],"useCount":371},{"word":"it","context":[["it",229],["while (it.hasNext()) {",76],["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["when (it) {",121],["it(\"should pass\") {",110],["it(\"should fail\") {",108],["// Inflate the menu; this adds items to the action bar if it is present.",88],["return it",77],["it.close()",75]],"useCount":5416},{"word":"item","context":[["override fun onOptionsItemSelected(item: MenuItem): Boolean {",336],["return super.onOptionsItemSelected(item)",289],["when (item.itemId) {",201],["import net.minecraft.item.ItemStack",182],["override fun onOptionsItemSelected(item: MenuItem?): Boolean {",129],["val id = item.itemId",112],["// Handle action bar item clicks here. The action bar will",80],["else -> return super.onOptionsItemSelected(item)",69],["for (item: ElementType? in list) {",56],["import net.minecraft.item.Item",56]],"useCount":2449},{"word":"itemId","context":[["override fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {",15],["when (item.itemId) {",201],["when (menuItem.itemId) {",14],["if (item.itemId == android.R.id.home) {",14],["when (item!!.itemId) {",19],["return when (item.itemId) {",21],["when (item?.itemId) {",32],["val id = item.itemId",112]],"useCount":428},{"word":"items","context":[["import net.minecraftforge.items.ItemStackHandler",14],["this.items = items",13],["items.clear()",16],["items.forEach {",18],["return items",22],["this.items = items",13],["items: List<CharSequence>,",24],["return items.size",27],["for (item in items) {",51],["// Inflate the menu; this adds items to the action bar if it is present.",88]],"useCount":366},{"word":"iterator","context":[["for (scheme in iterator) {",27],["val it = bindings.seq().iterator()",34],["val iterator = schemes.iterator()",27],["val iterator = schemes.iterator()",27],["override fun iterator(): Iterator<T> {",24],["if (iterator.hasNext()) {",24],["val element = iterator.next()",20],["val iterator = collection.iterator()",18],["while (iterator.hasNext()) {",78],["iterator.remove()",96]],"useCount":502},{"word":"jackson","context":[["import com.fasterxml.jackson.annotation.JsonIgnore",62],["import com.fasterxml.jackson.annotation.JsonInclude",78],["import com.fasterxml.jackson.annotation.JsonTypeName",90],["import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper",38],["import com.fasterxml.jackson.annotation.JsonPropertyOrder",39],["import com.fasterxml.jackson.annotation.JsonCreator",91],["import com.fasterxml.jackson.annotation.JsonIgnoreProperties",94],["import com.fasterxml.jackson.databind.ObjectMapper",229],["import com.fasterxml.jackson.annotation.JsonProperty",246],["import com.fasterxml.jackson.module.kotlin.KotlinModule",39]],"useCount":1332},{"word":"java","context":[["import java.net.URL",394],["import java.util.*",5431],["import java.io.File",2474],["import java.io.IOException",1213],["import java.util.ArrayList",881],["import java.io.InputStream",541],["import java.io.Serializable",412],["import java.nio.file.Path",464],["import java.util.concurrent.TimeUnit",631],["import java.nio.file.Paths",422]],"useCount":30017},{"word":"javaClass","context":[["private val logger = LoggerFactory.getLogger(javaClass)",29],["val state = StoreUtil.getStateSpec(component.javaClass)",19],["val stateClass = ComponentSerializationUtil.getStateClass<T>(component.javaClass)",19],["HttpException::class.java, test.onErrorEvents[0].javaClass)",23],["throws(javaClass<IOException>())",38],["if (other?.javaClass != javaClass) return false",80],["private val log = loggerOf(javaClass)",48],["private val log = LOG(javaClass)",45],["if (other?.javaClass != javaClass) return false",80],["private val log = LoggerFactory.getLogger(javaClass)",83]],"useCount":747},{"word":"javaDocLinks","context":[[").javaDocLinks",500]],"useCount":500},{"word":"javabot","context":[["import javabot.Message",50],["package javabot.operations",55],["import javabot.Javabot",57],["import javabot.dao.AdminDao",71],["package javabot.model.criteria",32],["import javabot.dao.ApiDao",23],["package javabot.web.views",25],["import javabot.BaseTest",30],["import javabot.dao.FactoidDao",27],["import javabot.dao.ChannelDao",28]],"useCount":550},{"word":"javafx","context":[["import javafx.collections.FXCollections",51],["import javafx.application.Application",79],["import javafx.stage.Stage",122],["import javafx.scene.Scene",75],["import javafx.fxml.FXML",72],["import javafx.application.Platform",55],["import javafx.scene.Node",50],["import javafx.beans.property.SimpleStringProperty",50],["import javafx.scene.Parent",50],["import javafx.fxml.FXMLLoader",49]],"useCount":1620},{"word":"javax","context":[["import javax.inject.Inject",1100],["import javax.inject.Singleton",359],["import javax.swing.JPanel",109],["import javax.swing.Icon",182],["import javax.servlet.http.HttpServletRequest",139],["import javax.swing.*",135],["import javax.swing.JComponent",120],["import javax.persistence.*",90],["import javax.servlet.http.HttpServletResponse",126],["import javax.sql.DataSource",87]],"useCount":5095},{"word":"jayrave","context":[["import com.jayrave.falkon.sqlBuilders.lib.WhereSection",27],["import com.jayrave.falkon.engine.Type",54],["package com.jayrave.falkon.mapper",46],["import com.jayrave.falkon.mapper.Column",33],["import com.jayrave.falkon.engine.CompiledStatement",27],["import com.jayrave.falkon.engine.TypedNull",25],["import com.jayrave.falkon.engine.Engine",22],["package com.jayrave.falkon.engine",21],["package com.jayrave.falkon.dao",20],["import com.jayrave.falkon.engine.Source",18]],"useCount":550},{"word":"jclasslib","context":[["import org.gjt.jclasslib.browser.BrowserServices",34],["package org.gjt.jclasslib.structures.constants",19],["package org.gjt.jclasslib.util",20],["package org.gjt.jclasslib.browser",20],["import org.gjt.jclasslib.structures.InvalidByteCodeException",23],["import org.gjt.jclasslib.structures.ClassFile",56],["import org.gjt.jclasslib.structures.AttributeInfo",26],["package org.gjt.jclasslib.structures.attributes",47],["package org.gjt.jclasslib.browser.detail",18],["package org.gjt.jclasslib.structures",18]],"useCount":403},{"word":"jdom","context":[["import org.jdom.Parent",15],["import org.jdom.Attribute",17],["import org.jdom.Document",33],["import org.jdom.JDOMException",45],["import org.jdom.Element",296]],"useCount":406},{"word":"jetbrains","context":[["import org.jetbrains.spek.api.Spek",270],["package org.jetbrains.debugger",209],["import org.jetbrains.anko.find",87],["package org.jetbrains.settingsRepository.git",75],["import org.jetbrains.anko.*",214],["import org.jetbrains.concurrency.Promise",183],["import org.jetbrains.annotations.TestOnly",97],["package org.jetbrains.cabal.psi",104],["package org.jetbrains.anko",111],["package org.jetbrains.settingsRepository",159]],"useCount":6099},{"word":"jgit","context":[["import org.eclipse.jgit.lib.Constants",42],["import org.eclipse.jgit.revwalk.RevWalk",20],["import org.eclipse.jgit.merge.MergeStrategy",21],["import org.eclipse.jgit.errors.TransportException",21],["import org.jetbrains.jgit.dirCache.deletePath",26],["import org.eclipse.jgit.internal.JGitText",28],["import org.eclipse.jgit.transport.URIish",29],["import org.jetbrains.jgit.dirCache.edit",31],["import org.eclipse.jgit.storage.file.FileRepositoryBuilder",37],["import org.eclipse.jgit.lib.Repository",86]],"useCount":716},{"word":"joda","context":[["import org.joda.time.Duration",33],["import org.joda.time.DateTimeZone",23],["import org.joda.time.format.DateTimeFormat",40],["import org.joda.time.Interval",21],["import org.joda.time.LocalDateTime",17],["import org.joda.time.LocalDate",14],["import org.joda.time.LocalTime",11],["import org.joda.time.DateTime",358]],"useCount":517},{"word":"joyreactor","context":[["import y2k.joyreactor.R",19],["import y2k.joyreactor.common.ui",19],["import y2k.joyreactor.common.platform.NavigationService",20],["import y2k.joyreactor.common.bindingBuilder",21],["package y2k.joyreactor.widget",24],["package y2k.joyreactor.services.requests",26],["import y2k.joyreactor.common.http.HttpClient",26],["import y2k.joyreactor.common.ServiceLocator",27],["package y2k.joyreactor",36],["package y2k.joyreactor.common",45]],"useCount":410},{"word":"json","context":[["import org.json.JSONArray",94],["import org.json.JSONObject",250],["json, key ->",42],["import org.json.JSONException",54],["import io.vertx.core.json.JsonObject",55],["import org.json.simple.JSONObject",45],["override fun write(json: Json) {",37],["override fun read(json: Json, jsonData: JsonValue) {",33],["this.json = json",34],["this.json = json",34]],"useCount":1081},{"word":"jtransc","context":[["import com.jtransc.vfs.LocalVfs",19],["import com.jtransc.error.noImpl",34],["import com.jtransc.error.InvalidOperationException",23],["import com.jtransc.vfs.SyncVfsFile",22],["import com.jtransc.log.log",20],["import com.jtransc.injector.Injector",19],["import com.jtransc.ast.AstBuildSettings",18],["package com.jtransc.ast",18],["import com.jtransc.error.invalidOp",56],["import com.jtransc.ast.*",50]],"useCount":437},{"word":"junit","context":[["import org.junit.Rule",324],["import org.junit.Assert.assertTrue",167],["import org.junit.Test as test",206],["import org.junit.After",276],["import org.junit.Assert.*",431],["import org.junit.Assert.assertEquals",576],["import org.junit.Assert",621],["import org.junit.runner.RunWith",867],["import org.junit.Before",983],["import org.junit.Test",4533]],"useCount":10677},{"word":"kale","context":[["import engineer.carrot.warren.kale.irc.message.IMessageParser",43],["package engineer.carrot.warren.kale.irc.message.rfc1459",40],["import engineer.carrot.warren.kale.irc.prefix.Prefix",38],["import engineer.carrot.warren.kale.IKaleHandler",32],["package engineer.carrot.warren.kale.irc.message.rfc1459.rpl",30],["import engineer.carrot.warren.kale.irc.message.utility.CaseMapping",28],["import engineer.carrot.warren.kale.irc.message.IMessage",62],["import engineer.carrot.warren.kale.irc.CharacterCodes",28],["import engineer.carrot.warren.kale.irc.message.IrcMessage",107],["import engineer.carrot.warren.kale.irc.message.IMessageSerialiser",44]],"useCount":535},{"word":"kanade","context":[["import eu.kanade.tachiyomi.data.source.SourceManager",50],["import eu.kanade.tachiyomi.data.preference.getOrDefault",41],["import eu.kanade.tachiyomi.data.download.model.Download",42],["import eu.kanade.tachiyomi.util.toast",44],["import eu.kanade.tachiyomi.data.database.DatabaseHelper",53],["import eu.kanade.tachiyomi.data.preference.PreferencesHelper",77],["import eu.kanade.tachiyomi.data.source.model.Page",79],["import eu.kanade.tachiyomi.R",157],["import eu.kanade.tachiyomi.data.database.models.Manga",144],["import eu.kanade.tachiyomi.data.database.models.Chapter",89]],"useCount":1635},{"word":"keeps","context":[["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["* *Warning:* The created observable keeps a strong reference to `recyclerView`.",17],["* *Warning:* The created observable keeps a strong reference to {@code map}. Unsubscribe",15],["* *Warning:* The created observable keeps a strong reference to `view`.",13]],"useCount":751},{"word":"kelsos","context":[["import com.kelsos.mbrc.dto.BaseResponse",17],["import com.kelsos.mbrc.mvp.BasePresenter",15],["import com.kelsos.mbrc.mvp.BaseView",15],["import com.kelsos.mbrc.mvp.Presenter",15],["import com.kelsos.mbrc.extensions.empty",17],["import com.kelsos.mbrc.data.db.RemoteDatabase",20],["import com.kelsos.mbrc.R",50],["import com.kelsos.mbrc.events.bus.RxBus",28],["package com.kelsos.mbrc.events.ui",22],["import com.kelsos.mbrc.domain.TrackInfo",14]],"useCount":329},{"word":"kerub","context":[["import com.github.K0zka.kerub.model.Host",170],["import com.github.K0zka.kerub.planner.OperationalState",108],["import com.github.K0zka.kerub.model.VirtualMachine",83],["import com.github.K0zka.kerub.utils.getLogger",81],["package com.github.K0zka.kerub.services.impl",69],["package com.github.K0zka.kerub.host",53],["package com.github.K0zka.kerub.model",69],["import com.github.K0zka.kerub.utils.toSize",61],["package com.github.K0zka.kerub.data.ispn",58],["import com.github.K0zka.kerub.model.ExpectationLevel",55]],"useCount":2403},{"word":"key","context":[["ns.forEach({ it -> repl_env.set(it.key, it.value) })",31],["* @param key",34],["val key = it.next()",34],["val index = Arrays.binarySearch(names, key)",35],["json, key ->",42],["* using the property name or the defined key in the builder as the key.",28],["childEnv.set(key as MalSymbol, eval(it.next(), childEnv))",28],["when (key) {",44],["* using the property name or the defined key in the builder as the key.",28],["for ((key, value) in macros) {",56]],"useCount":1323},{"word":"kobalt","context":[["package com.beust.kobalt.internal",47],["package com.beust.kobalt.api",66],["import com.beust.kobalt.misc.log",50],["import com.beust.kobalt.TaskResult",49],["import com.beust.kobalt.misc.KFiles",69],["import com.beust.kobalt.api.*",39],["package com.beust.kobalt",46],["import com.beust.kobalt.api.Project",81],["import com.beust.kobalt.api.Kobalt",48],["import com.beust.kobalt.maven.DependencyManager",44]],"useCount":1196},{"word":"kontrol","context":[["* @throws kontrol.doclient.RequestUnsuccessfulException",38],["package kontrol.api",33],["* @throws kontrol.doclient.ResourceNotFoundException",38],["import kontrol.api.Machine",33],["* @throws kontrol.doclient.AccessDeniedException",38],["import kontrol.api.Controller",16],["import kontrol.api.MachineGroup",27],["import kontrol.api.sensor.SensorValue",21],["* @return {@link kontrol.doclient.Response}",19],["package kontrol.webserver",19]],"useCount":374},{"word":"kotlin","context":[["import kotlin.test.*",122],["import kotlin.test.assertNull",118],["import kotlin.test.assertNotNull",131],["import kotlin.concurrent.thread",135],["import kotlin.test.assertFalse",164],["import kotlin.reflect.KProperty",189],["import kotlin.test.assertTrue",370],["import kotlin.properties.Delegates",624],["import kotlin.test.assertEquals",933],["import kotlin.reflect.KClass",360]],"useCount":5443},{"word":"kotlinx","context":[["package kotlinx.collections.immutable",15],["import kotlinx.android.synthetic.main.activity_main.*",100],["package kotlinx.html",77],["package kotlinx.kara.tests",11],["import kotlinx.html.*",58],["import kotlinx.html.impl.*",25],["package kotlinx.kara",19],["import kotlinx.android.synthetic.main.toolbar.*",23],["import kotlinx.html.attributes.*",25]],"useCount":353},{"word":"kt","context":[["runFunctionalTest(\"SimpleListenerTest.kt\", AnkoFile.LISTENERS, version) {",41],["runFunctionalTest(\"SqlParserHelpersTest.kt\", AnkoFile.SQL_PARSER_HELPERS, version) {",41],["runFunctionalTest(\"PropertyTest.kt\", AnkoFile.PROPERTIES, version) {",41],["runFunctionalTest(\"LayoutsTest.kt\", AnkoFile.LAYOUTS, version) {",41],["runFunctionalTest(\"ComplexListenerClassTest.kt\", AnkoFile.LISTENERS, version) {",41],["runFunctionalTest(\"ComplexListenerSetterTest.kt\", AnkoFile.LISTENERS, version) {",41],["Util.assert(kt.errorCode == 0)",36],["runFunctionalTest(\"ServicesTest.kt\", AnkoFile.SERVICES, version) {",41],["runFunctionalTest(\"ViewTest.kt\", AnkoFile.VIEWS, version) {",41],["Add all changes to the file MyDate.kt.",50]],"useCount":478},{"word":"l","context":[["setOnKeyListener(l)",18],["setOnErrorListener(l)",20],["return l",19],["setOnSearchClickListener(l)",17],["setOnDismissListener(l)",19],["setOnMenuItemClickListener(l)",22],["setOnCheckedChangeListener(l)",28],["setOnClickListener(l)",42],["setOnItemClickListener(l)",58],["setOnQueryTextFocusChangeListener(l)",17]],"useCount":814},{"word":"lang","context":[["import com.intellij.lang.ASTNode",439],["import com.intellij.util.lang.CompoundRuntimeException",89],["import java.lang.ref.WeakReference",85],["import org.rust.lang.core.psi.util.parentOfType",81],["import org.rust.lang.RustTestCaseBase",95],["import java.lang.reflect.Method",165],["package org.rust.lang.core.psi.impl.mixin",149],["import java.lang.reflect.Type",146],["import org.rust.lang.core.psi.*",115],["import org.rust.lang.core.psi.RustNamedElement",100]],"useCount":5271},{"word":"language","context":[["//language=RegExp",11],["when (assets.language) {",16],["//language=MySQL",14],["if (AnkoInternals.testConfiguration(act, screenSize, density, language, orientation, long,",12],["language: String? = null,",31],["): T? = if (AnkoInternals.testConfiguration(this, screenSize, density, language, orientation, long,",12],["language = NamedApiResource(\"en\", \"language\", 9)",112],["language = NamedApiResource(\"en\", \"language\", 9)",112]],"useCount":320},{"word":"layout","context":[["setContentView(R.layout.activity_login)",33],["setContentView(R.layout.activity_main)",338],["return layout",27],["import javafx.scene.layout.HBox",24],["import javafx.scene.layout.VBox",35],["val component = layout.getComponent(0)",47],["assertThat(layout.componentCount).isEqualTo(1)",53],["setContentView(layout.viewGroup)",76],["layout.init()",78],["val layout = horizontalLayout {",169]],"useCount":1124},{"word":"layoutParams","context":[["this@layoutParams.setLayoutParams(layoutParams)",474],["val layoutParams = android.widget.FrameLayout.LayoutParams(c!!, attrs!!)",92],["val layoutParams = FrameLayout.LayoutParams(source!!)",100],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height, gravity)",92],["this@lparams.layoutParams = layoutParams",1265],["layoutParams.init()",1265],["this@lparams.layoutParams = layoutParams",1265],["this@layoutParams.setLayoutParams(lp)",139],["val layoutParams = android.widget.FrameLayout.LayoutParams(source!!)",242],["this@layoutParams.setLayoutParams(layoutParams)",474]],"useCount":6418},{"word":"left","context":[["val left = parent.paddingLeft",13],["\"insert left\\n\" +",15],["class Sum(val left: Expr, val right: Expr) : Expr",15],["divider.setBounds(left, top, right, bottom)",14],["mDivider.setBounds(left, top, right, bottom)",11],["MapToInt..uint16_t.IN(\"_x\", \"position x from the left corner of the window\"),",16],["GLint.IN(\"x\", \"the left framebuffer pixel coordinate\"),",25],["<div style=\"margin-left: 26px; border-left: 1px solid gray; padding-left: 14px;\"><h5>Note</h5>",93],["<div style=\"margin-left: 26px; border-left: 1px solid gray; padding-left: 14px;\"><h5>Note</h5>",93],["<div style=\"margin-left: 26px; border-left: 1px solid gray; padding-left: 14px;\"><h5>Note</h5>",93]],"useCount":388},{"word":"length","context":[["Check(1)..nullable..GLsizei_p.OUT(\"length\", \"\"),",35],["override val length: Int",32],["for (i in 0..length - 1) {",34],["[Column(nullable=false,length=128) ]",60],["val size = ar.length()",27],["override fun init(buffer: ByteReader, length: Int) {",27],["dst: DoubleArray, dstOffset: Int, length: Int)",26],["[Column(nullable=false,length=30) ]",26],["for (start in 0..rawSeq.length) {",18],["\"length\",",68]],"useCount":969},{"word":"let","context":[[".let {",28],["}.let {",30],["val bindings = ast.nth(1) as? ISeq ?: throw MalException(\"expected sequence as the first parameter to let*\")",31],["subscription?.let {",31],["?.let {",32],["context?.let {",33],["if (!it.hasNext()) throw MalException(\"odd number of binding elements in let*\")",34],["}).let { runTasks ->",45],["let a = 4 == 2;",32],["let mut server = Nickel::new();",40]],"useCount":616},{"word":"level","context":[["GLint.IN(\"level\", \"the level-of-detail number\"),",35],["GLint.IN(\"level\", \"\"),",213],["src[\"level\"],",36],["GLint.IN(\"level\", \"the level-of-detail number\"),",35],["trigger = NamedApiResource(\"level-up\", \"evolution-trigger\", 1),",28],["MapToInt..uint8_t.IN(\"_mip\", \"mip level\"),",18],["GLint.IN(\"level\", \"\")",18],["////                return 3 + level*4;",12],["override val level: ExpectationLevel,",14],["if (level == 0) {",13]],"useCount":422},{"word":"li","context":[["<li>#SUCCESS</li>",146],["<li>#ERROR_OUT_OF_HOST_MEMORY</li>",148],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["<li>#ERROR_OUT_OF_DEVICE_MEMORY</li>",144],["<li>#ERROR_OUT_OF_DEVICE_MEMORY</li>",144],["<li>#SUCCESS</li>",146],["<li>#ERROR_OUT_OF_HOST_MEMORY</li>",148],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161]],"useCount":3389},{"word":"lib","context":[["import org.eclipse.jgit.lib.*",19],["import org.eclipse.jgit.lib.Constants",42],["import com.jayrave.falkon.sqlBuilders.lib.WhereSection",27],["import com.o3dr.services.android.lib.drone.attribute.AttributeEvent",26],["import com.o3dr.services.android.lib.drone.attribute.AttributeType",26],["import org.eclipse.jgit.lib.Repository",86],["package com.jayrave.falkon.mapper.lib",15],["import me.sargunvohra.lib.pokekotlin.test.util.mockClient",26],["package me.sargunvohra.lib.pokekotlin.test.model",22],["import me.sargunvohra.lib.pokekotlin.model.NamedApiResource",16]],"useCount":455},{"word":"library","context":[["import de.vanita5.twittnuker.library.MicroBlogException",41],["import com.chad.library.adapter.base.BaseViewHolder",21],["import com.proxerme.library.info.ProxerUrlHolder",24],["import de.vanita5.twittnuker.library.MicroBlog",32],["import de.vanita5.twittnuker.library.twitter.model.Paging",27],["import org.kitteh.irc.client.library.element.User",25],["import com.chad.library.adapter.base.BaseQuickAdapter",21],["import org.mariotaku.sqliteqb.library.Expression",21],["package jp.gr.java_conf.kgd.library.buckets.libgdx.util.logger",25],["Implement the same logic as in 'task1' again through the library method 'joinToString()'.",19]],"useCount":401},{"word":"line","context":[["val line = pos.currentLine",19],["line()",15],["line(\"}\")",60],["while (line != null) {",45],["val line = manager.annotation?.line ?: -1",15],["val line = manager.annotation?.line ?: -1",15],["for (line in lines) {",35],["Uncomment the commented line and make it compile.",31],["var line: String?",15],["line = reader.readLine()",29]],"useCount":455},{"word":"lines","context":[["lines {",334],["public var android.widget.TextView.lines: Int",12],["get() = throw AnkoException(\"'android.widget.TextView.lines' property does not have a getter\")",20],["lines() {",22],["for (line in lines) {",35]],"useCount":423},{"word":"list","context":[["for (item: ElementType? in list) {",56],["return list",215],["nk_draw_list_p.IN(\"list\", \"\"),",63],["import com.raizlabs.android.dbflow.list.FlowCursorList",44],["val list = ArrayList<Int>()",42],["list.add(layer)",36],["if (list == null) {",33],["val binds = ast.nth(1) as? ISeq ?: throw MalException(\"fn* requires a binding list as first parameter\")",31],["val list = ArrayList<String>()",30],["list",29]],"useCount":1604},{"word":"listOf","context":[["return listOf(",126],["return listOf()",119],["val policies = listOf(ComparisonPolicy.DEFAULT, ComparisonPolicy.TRIM_WHITESPACES, ComparisonPolicy.IGNORE_WHITESPACES)",48],["schemeManager.setSchemes(listOf(scheme))",42],["data = listOf(",34],["import kotlin.collections.listOf",31],["hosts = listOf(host),",30],["assertEquals(listOf(n2 to c), s2)",30],["listOf(",206],["listOf()",29]],"useCount":1662},{"word":"listener","context":[["setOnHierarchyChangeListener(listener)",51],["listener.init()",153],["val listener = __ViewGroup_OnHierarchyChangeListener()",35],["setOnItemSelectedListener(listener)",28],["inOrder(listener) {",22],["verify(listener).onAdLoaded(same(adapter))",23],["listeners.add(listener)",24],["for (listener in listeners) {",26],["this.listener = listener",27],["this.listener = listener",27]],"useCount":789},{"word":"load","context":[["import com.bumptech.glide.load.engine.DiskCacheStrategy",34],["fun load()",19],["// load state only if there are existing files",24],["override fun load(b: ByteArray, width: Int, height: Int): BufferedImage? {",31],["override fun load() {",30],["fun load() {",27],["// We don't load scheme with duplicated name - if we generate unique name for it, it will be saved then with new name.",26],["// we must not remove non-persistent (e.g. predefined) schemes, because we cannot load it (obviously)",26],["rep(\"(load-file \\\"${args[0]}\\\")\", repl_env)",25],["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25]],"useCount":520},{"word":"location","context":[["GLint.IN(\"location\", \"\"),",415],["GLint.IN(\"location\", \"the uniform location\"),",20],["return location",21],["src[\"location\"],",25],["_init(location, path, cache, nested)",28],["import android.location.Location",102],["import android.location.LocationManager",39],["GLint.IN(\"location\", uniformLocation),",50],["for (location in locations) {",21],["GLint.IN(\"location\", uniLocation),",100]],"useCount":1041},{"word":"lock","context":[["lock.write {",41],["synchronized (lock) {",95],["lock.unlock()",51],["lock.lock()",50],["lock.lock()",50],["lock.withLock {",47],["syncObject.lock()",25],["Utils.lockWrite(lock) {",25],["private val lock = Object()",20],["synchronized(lock) {",17]],"useCount":488},{"word":"log","context":[["import timber.log.Timber",463],["LOG.log(Level.SEVERE, null, ex)",91],["private val log = LoggerFactory.getLogger(javaClass)",83],["private val log = loggerOf(javaClass)",48],["import com.intellij.vcs.log.graph.api.LinearGraph",29],["LOG.log(Level.SEVERE, { null }, ex)",30],["LOG.log(Level.SEVERE, null, e)",32],["if (log.isDebugEnabled) {",56],["import com.beust.kobalt.misc.log",50],["private val log = LOG(javaClass)",45]],"useCount":1660},{"word":"logging","context":[["import com.github.projectsandstone.api.logging.Logger",17],["import org.apache.logging.log4j.Logger",15],["import org.apache.logging.log4j.LogManager",95],["import okhttp3.logging.HttpLoggingInterceptor",47],["import io.vertx.core.logging.LoggerFactory",21],["import java.util.logging.Level",158],["import io.michaelrocks.lightsaber.processor.logging.getLogger",14],["import java.util.logging.Logger",186],["import org.apache.logging.log4j.Level",16],["*           logging tag",12]],"useCount":638},{"word":"lp","context":[["lp.init()",139],["this@layoutParams.setLayoutParams(lp)",139],["val lp = android.view.ViewGroup.LayoutParams(width, height)",14],["val lp = android.view.ViewGroup.LayoutParams(c!!, attrs!!)",14],["val lp = android.view.ViewGroup.LayoutParams(source!!)",14]],"useCount":320},{"word":"lparams","context":[["lparams(width = matchParent, height = matchParent)",27],["lparams(width = matchParent)",26],["}.lparams {",22],["lparams(width = matchParent, height = wrapContent)",30],["fun DSLResultStub.lparams(arg: ViewGroup.LayoutParams.() -> Unit) = layoutParams(arg)",35],["lparams {",40],["fun DSLResultStub.lparams(arg: FrameLayout.LayoutParams.() -> Unit) = layoutParams(arg)",55],["public fun <T: View> T.lparams(",385],["fun <T: View> T.lparams(",878],["this@lparams.layoutParams = layoutParams",1265]],"useCount":2830},{"word":"lwjgl","context":[["import org.lwjgl.opengl.*",546],["import org.lwjgl.generator.*",1406],["package org.lwjgl.opencl.templates",108],["import org.lwjgl.opencl.*",110],["<table class=\"lwjgl\">",128],["package org.lwjgl.egl.templates",186],["import org.lwjgl.egl.*",188],["import org.lwjgl.opengles.*",220],["package org.lwjgl.opengles.templates",221],["package org.lwjgl.opengl.templates",530]],"useCount":4432},{"word":"macro","context":[["if (key.equals(macro.key)) {",17],["if (oldPath.equals(macro.value)) {",17],["macro.value = newPath",19],["macro.value = value",20],["throw IllegalArgumentException(\"Unknown macro: $m in storage file spec: $path\")",20],["// you must not add duplicated macro, but our ModuleImpl.setModuleFilePath does it (it will be fixed later)",20],["for (macro in macros) {",57],["throw IllegalArgumentException(\"Unknown macro $macro\")",16],["fun expandMacro(macro: String): String {",16],["return env.set(ast.nth(1) as MalSymbol, macro)",16]],"useCount":332},{"word":"main","context":[["fun main(args: Array<String>) {",970],["public void main() {",118],["import main.astraeus.game.model.entity.mob.player.Player",109],["@JvmStatic fun main(args: Array<String>) {",164],["This function must only be called from the main thread.",172],["fn main() {",588],["import kotlinx.android.synthetic.main.activity_main.*",100],["fun main(args : Array<String>) {",75],["import main.astraeus.net.codec.game.GamePacketBuilder",71],["import main.astraeus.net.packet.OutgoingPacket",53]],"useCount":3281},{"word":"mainThread","context":[[".subscribeOn(AndroidSchedulers.mainThread())",18],[".observeOn(AndroidSchedulers.mainThread())",475]],"useCount":493},{"word":"manager","context":[["// if not service, so, component manager will check it later for all components",19],["val manager = createAndLoad(\"options1\")",90],["manager.save()",90],["val firstScheme = manager.findSchemeByName(\"first\")",30],["import me.rei_m.hbfavmaterial.presentation.manager.ActivityNavigator",23],["* Source manager.",18],["val first = manager.findSchemeByName(\"first\")",15],["val scheme = manager.findSchemeByName(\"first\")",15],["val second = manager.findSchemeByName(\"second\")",15],["val repository = manager.repository",15]],"useCount":559},{"word":"manga","context":[["override fun latestUpdatesFromElement(element: Element, manga: Manga) {",20],["manga.title = it.text()",16],["ChapterRecognition.parseChapterNumber(chapter, manga)",50],["db.insertManga(manga).executeAsBlocking()",32],["manga.setUrlWithoutDomain(it.attr(\"href\"))",28],["popularMangaFromElement(element, manga)",24],["db.updateFlags(manga).executeAsBlocking()",23],["override fun searchMangaFromElement(element: Element, manga: Manga) {",20],["override fun mangaDetailsParse(document: Document, manga: Manga) {",20],["override fun popularMangaFromElement(element: Element, manga: Manga) {",20]],"useCount":368},{"word":"map","context":[["map",64],["map.forEach {",217],["val map = hashMapOf(",216],[".map { it.trim() }",36],[".map {",204],["return map",129],["}.map {",70],[".map { response ->",31],["import common.quickcheck.map",34],[").map { Color.parseColor(it) }",35]],"useCount":1761},{"word":"mapOf","context":[["mapOf(",60],["assertEvents({ file.writeText(\"abc\") }, mapOf(file to 'U'))",14],["mapOf(file1 to 'U', file2 to 'U'))",14],["return mapOf(",23],["result == mapOf(1 to listOf(\"a\", \"b\"), 2 to listOf(\"ba\", \"ad\"), 3 to listOf(\"ccc\"))",15],["assertEvents({ file.writeText(\"new content\") }, mapOf(file to 'U'))",22],["assertEvents({ file.writeText(\"re-creation\") }, mapOf(file to 'C'))",22],["val postData = mapOf(",21],["assertEvents({ file.delete() }, mapOf(file to 'D'))",22],["mapOf(subFile to 'U', sideFile to 'U'))",21]],"useCount":360},{"word":"mapper","context":[["private val mPlayer by mapper<PlayerComponent>()",15],["package com.jayrave.falkon.mapper",46],["with(mapper.readTree(body)) {",44],["import com.jayrave.falkon.mapper.Column",33],["with(mapper.readTree(body())) {",24],["val mapper = ObjectMapper()",23],["import com.jayrave.falkon.mapper.Table",18],["package com.github.andrewoma.kwery.mapper",18],["package com.jayrave.falkon.mapper.lib",15],["private val mSprite by mapper<SpriteComponent>()",14]],"useCount":327},{"word":"markdown","context":[["import org.intellij.markdown.parser.markerblocks.MarkerBlockProvider",33],["import org.intellij.markdown.ast.ASTNode",40],["import org.intellij.markdown.parser.markerblocks.MarkerBlock",59],["import org.intellij.markdown.IElementType",82],["import org.intellij.markdown.MarkdownTokenTypes",77],["import org.intellij.markdown.parser.constraints.MarkdownConstraints",76],["import org.intellij.markdown.MarkdownElementTypes",75],["import org.intellij.markdown.parser.LookaheadText",74],["import org.intellij.markdown.parser.ProductionHolder",67],["import org.intellij.markdown.parser.sequentialparsers.SequentialParser",65]],"useCount":1079},{"word":"master","context":[["push(\"master\", \"origin/master\")",21],["push(\"master\", \"origin/master\")",21],["rebase(\"master\")",22],["1(3) *\"master\"",28],["1(2) *\"master\"",28],["myRepo.`assert feature not rebased on master`()",34],["assertSuccessfulNotification(\"Rebased feature on master\")",34],["myRepo.`diverge feature and master`()",41],["myRepo.`assert feature rebased on master`()",42],["master {",49]],"useCount":438},{"word":"matcher","context":[["if (matcher.find()) {",23],["val matcher = MACRO_PATTERN.matcher(path)",20],["if (matcher.matches()) {",44],["import android.support.test.espresso.matcher.ViewMatchers.*",33],["import android.support.test.espresso.matcher.ViewMatchers.withId",33],["import android.support.test.espresso.matcher.ViewMatchers.isDisplayed",15],["while (matcher.find()) {",56],["if (!matcher.matches()) {",22],["val m = matcher.group(1)",21],["val matcher = MACRO_PATTERN.matcher(path)",20]],"useCount":313},{"word":"materials","context":[["*    documentation and/or other materials provided with the distribution.",26],["*    and/or other materials provided with the distribution.",11],["//    and/or other materials provided with the distribution.",126],["*       documentation and/or other materials provided with the distribution.",420]],"useCount":583},{"word":"math","context":[["import java.math.BigInteger",227],["import java.math.BigDecimal",185],["import com.badlogic.gdx.math.Rectangle",52],["import net.minecraft.util.math.Vec3d",37],["import net.pureal.traits.math.*",32],["import com.badlogic.gdx.math.MathUtils",53],["import com.badlogic.gdx.math.Vector3",62],["import com.badlogic.gdx.math.Vector2",130],["import net.minecraft.util.math.AxisAlignedBB",31],["import net.minecraft.util.math.BlockPos",133]],"useCount":1060},{"word":"mbrc","context":[["import com.kelsos.mbrc.mvp.BaseView",15],["import com.kelsos.mbrc.mvp.Presenter",15],["import com.kelsos.mbrc.extensions.empty",17],["package com.kelsos.mbrc.events.ui",22],["import com.kelsos.mbrc.data.db.RemoteDatabase",20],["import com.kelsos.mbrc.dto.BaseResponse",17],["import com.kelsos.mbrc.events.bus.RxBus",28],["import com.kelsos.mbrc.R",50],["import com.kelsos.mbrc.mvp.BasePresenter",15],["import com.kelsos.mbrc.domain.TrackInfo",14]],"useCount":329},{"word":"me","context":[["import me.rei_m.hbfavmaterial.R",58],["package me.rei_m.hbfavmaterial.presentation.fragment",56],["package me.rei_m.hbfavmaterial.di",39],["import me.rei_m.hbfavmaterial.presentation.manager.ActivityNavigator",23],["import me.st28.flexseries.flexlib.plugin.FlexPlugin",23],["* Blog: http://loshine.me",25],["import me.rei_m.hbfavmaterial.domain.entity.BookmarkEntity",38],["import me.rei_m.hbfavmaterial.di.HasComponent",26],["import me.sargunvohra.lib.pokekotlin.test.util.mockClient",26],["package me.egorand.kotlin.playground.classes",29]],"useCount":681},{"word":"meil_mitu","context":[["import com.twitter.meil_mitu.twitter4hk.AbsPost",41],["import com.twitter.meil_mitu.twitter4hk.AbsOauth",140],["import com.twitter.meil_mitu.twitter4hk.ResponseList",29],["package com.twitter.meil_mitu.twitter4hk.converter",32],["package com.twitter.meil_mitu.twitter4hk.converter.api",28],["import com.twitter.meil_mitu.twitter4hk.exception.Twitter4HKException",202],["package com.twitter.meil_mitu.twitter4hk.data",50],["import com.twitter.meil_mitu.twitter4hk.AbsGet",63],["import com.twitter.meil_mitu.twitter4hk.ResponseData",63],["import com.twitter.meil_mitu.twitter4hk.OauthType",111]],"useCount":993},{"word":"member","context":[["uint32_t.member(",124],["nk_command.member(\"header\", \"\")",68],["nk_color.member(\"color\", \"\")",68],["DWORD.member(",60],["nk_handle.member(\"userdata\", \"\")",55],["float.member(",52],["nk_vec2.member(\"padding\", \"\")",52],["VkStructureType.member(\"sType\", \"the type of this structure.\")",128],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["VkBool32.member(",48]],"useCount":1796},{"word":"menu","context":[["menuInflater.inflate(R.menu.main, menu)",22],["super.onCreateOptionsMenu(menu, inflater)",32],["override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {",40],["return super.onCreateOptionsMenu(menu)",43],["override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {",45],["menuInflater.inflate(R.menu.menu_main, menu)",67],["menuInflater.inflate(R.menu.menu_main, menu)",67],["override fun onCreateOptionsMenu(menu: Menu?): Boolean {",71],["// Inflate the menu; this adds items to the action bar if it is present.",88],["override fun onCreateOptionsMenu(menu: Menu): Boolean {",211]],"useCount":835},{"word":"merge","context":[["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["`do nothing on merge`()",35],["noProblems = merger.merge(headCommit, srcCommit)",22],["import org.eclipse.jgit.merge.MergeStrategy",21],["package com.intellij.diff.merge",20],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20],["Observable.merge(",19],["import com.intellij.openapi.vcs.merge.MergeSession",19]],"useCount":2031},{"word":"message","context":[["import engineer.carrot.warren.kale.irc.message.IMessageParser",43],["import engineer.carrot.warren.kale.irc.message.IMessage",62],["assertNull(message)",50],["message: String? = null,",46],["import engineer.carrot.warren.kale.irc.message.IMessageSerialiser",44],["package engineer.carrot.warren.kale.irc.message.rfc1459",40],["println(\"Uncaught \" + t + \": \" + t.message)",39],["println(\"Error: \" + e.message)",38],["return message",36],["import engineer.carrot.warren.kale.irc.message.IrcMessage",107]],"useCount":2154},{"word":"method","context":[["// TODO Auto-generated method stub",35],["for (method in methods) {",27],["import android.text.method.LinkMovementMethod",33],["// Zelix KlassMaster - ERROR: Could not find method 'getScheme()'",19],["if (request.method() != HttpMethod.HEAD) {",33],["// Run method under test",116],["Implement the same logic as in 'task1' again through the library method 'joinToString()'.",19],["Method.IN(\"m\", \"the method to inspect\"),",18],["method.isAccessible = true",17],["val returnType = method.returnType",16]],"useCount":436},{"word":"mgaetan89","context":[["package com.mgaetan89.showsrage.extension",27],["import com.mgaetan89.showsrage.model.Show",20],["package com.mgaetan89.showsrage.helper",23],["package com.mgaetan89.showsrage.adapter",26],["import com.mgaetan89.showsrage.Constants",30],["import com.mgaetan89.showsrage.TestActivity",34],["import com.mgaetan89.showsrage.network.SickRageApi",48],["package com.mgaetan89.showsrage.model",59],["package com.mgaetan89.showsrage.fragment",70],["import com.mgaetan89.showsrage.R",89]],"useCount":504},{"word":"michaelrocks","context":[["import io.michaelrocks.lightsaber.processor.commons.Types",16],["import io.michaelrocks.grip.mirrors.getObjectTypeByInternalName",17],["package io.michaelrocks.lightsaber.processor.generation",17],["package io.michaelrocks.grip.mirrors",18],["import io.michaelrocks.grip.mirrors.MethodMirror",19],["import io.michaelrocks.grip.ClassRegistry",23],["import io.michaelrocks.grip.mirrors.ClassMirror",23],["package io.michaelrocks.lightsaber.processor.commons",24],["package io.michaelrocks.grip",29],["import io.michaelrocks.grip.mirrors.Type",64]],"useCount":380},{"word":"minecraft","context":[["import net.minecraft.item.ItemStack",182],["import net.minecraft.util.math.BlockPos",133],["import net.minecraft.world.World",124],["import net.minecraft.util.ResourceLocation",60],["import net.minecraft.block.material.Material",61],["import net.minecraft.nbt.NBTTagCompound",79],["import net.minecraft.block.state.IBlockState",82],["import net.minecraft.client.Minecraft",92],["import net.minecraft.entity.player.EntityPlayer",114],["import net.minecraft.util.EnumFacing",116]],"useCount":1888},{"word":"minecraftforge","context":[["import net.minecraftforge.fml.common.event.FMLPostInitializationEvent",21],["import net.minecraftforge.common.capabilities.Capability",27],["import net.minecraftforge.fml.common.event.FMLInitializationEvent",28],["import net.minecraftforge.fml.common.registry.GameRegistry",28],["import net.minecraftforge.common.MinecraftForge",28],["import net.minecraftforge.common.config.Configuration",32],["import net.minecraftforge.fml.common.event.FMLPreInitializationEvent",31],["import net.minecraftforge.fml.relauncher.SideOnly",30],["import net.minecraftforge.fml.common.eventhandler.SubscribeEvent",31],["import net.minecraftforge.fml.relauncher.Side",61]],"useCount":428},{"word":"misc","context":[["import com.beust.kobalt.misc.kobaltLog",35],["import com.beust.kobalt.misc.KFiles",69],["package pepper.misc",15],["import com.beust.kobalt.misc.log",50],["import backend.model.misc.EmailAddress",18],["it.writeChild(\"${Project.DIRECTORY_STORE_FOLDER}/misc.xml\", iprFileContent)",24],["import com.beust.kobalt.misc.warn",27],["import com.beust.kobalt.misc.KobaltExecutors",27],["package com.beust.kobalt.misc",36],["import backend.model.misc.Coord",37]],"useCount":424},{"word":"mock","context":[["val team = PowerMockito.mock(Team::class.java)",17],["val mock = Mockito.mock(A::class.java)",17],["val mock = mock(Database::class)",19],["val mock = mock(Database::class)",19],["val mock = Mockito.mock(A::class.java)",17],["val sponsor = PowerMockito.mock(Sponsor::class.java)",16],["mock<Methods>().apply {",20],["import org.mockito.Mockito.mock",80],["val mocked = context.mock(Mockable::class)",16],["import com.nhaarman.mockito_kotlin.mock",244]],"useCount":607},{"word":"mockito","context":[["import org.mockito.Mockito.verify",61],["import org.mockito.Mockito",284],["import org.mockito.Mockito.mock",80],["import org.mockito.Mockito.*",112],["import org.mockito.runners.MockitoJUnitRunner",117],["import org.mockito.Mock",170],["import org.mockito.MockitoAnnotations",77],["import org.mockito.Mockito.`when`",64],["import org.mockito.*",21],["import org.mockito.Matchers",62]],"useCount":1203},{"word":"mockito_kotlin","context":[["import com.nhaarman.mockito_kotlin.never",27],["import com.nhaarman.mockito_kotlin.capture",12],["import com.nhaarman.mockito_kotlin.times",20],["import com.nhaarman.mockito_kotlin.doReturn",25],["import com.nhaarman.mockito_kotlin.eq",36],["import com.nhaarman.mockito_kotlin.*",62],["import com.nhaarman.mockito_kotlin.any",93],["import com.nhaarman.mockito_kotlin.verify",128],["import com.nhaarman.mockito_kotlin.whenever",142],["import com.nhaarman.mockito_kotlin.mock",244]],"useCount":789},{"word":"mod","context":[["mod a {",18],["mod m {",15],["default(mod(0, 0, 3, 3))",14],["default(mod(0, 0, 1, 1))",70],["mod foo {",58],["default(mod(0, 0, 2, 2))",41],["default(mod(1, 1, 1, 1))",24],["mod inner {",20],["mod b {",18],["mod bar {",33]],"useCount":325},{"word":"model","context":[["import eu.kanade.tachiyomi.data.source.model.Page",79],["import com.github.K0zka.kerub.model.ExpectationLevel",55],["package com.mgaetan89.showsrage.model",59],["import com.github.K0zka.kerub.model.Host",170],["import main.astraeus.game.model.entity.mob.player.Player",109],["import de.vanita5.twittnuker.model.UserKey",95],["import com.github.K0zka.kerub.model.VirtualMachine",83],["package com.github.K0zka.kerub.model",69],["import com.google.android.gms.maps.model.LatLng",63],["package io.lavagna.model",61]],"useCount":4371},{"word":"models","context":[["import eu.kanade.tachiyomi.data.database.models.Manga",144],["import eu.kanade.tachiyomi.data.database.models.Chapter",89],["import dev.yuriel.kotmahjan.models.Hai",35],["import eu.kanade.tachiyomi.data.database.models.Category",24],["package glimpse.models",22],["package dev.yuriel.kotmahjan.models",18],["import eu.kanade.tachiyomi.data.database.models.MangaSync",22],["import org.seniorsigan.mangareader.models.MangaItem",18],["import com.twitter.sdk.android.core.models.Tweet",16],["models",20]],"useCount":638},{"word":"modified","context":[["* This program incorporates a modified version of Twidere.",264],["assertThat(diff.modified).isEmpty()",28],["*  This program incorporates a modified version of Twidere.",25],["modified = true",22]],"useCount":339},{"word":"modify","context":[["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20],["ALenum.IN(\"paramName\", \"the parameter to modify\"),",20],["\"delete modify\\n\" +",20],["ALuint.IN(\"source\", \"the source to modify\"),",24],["\"modify\\n\" +",25],["\"modify both\\n\" +",25],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["ALenum.IN(\"param\", \"the parameter to modify\"),",40]],"useCount":1937},{"word":"module","context":[["import com.intellij.openapi.module.ModuleUtilCore",20],["import org.brackit.xquery.module.StaticContext",103],["import com.intellij.openapi.module.ModuleManager",96],["import com.fasterxml.jackson.module.kotlin.KotlinModule",39],["import com.intellij.openapi.module.Module",192],["import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper",38],["return module",19],["This file was generated by module generate",29],["runInEdtAndWait { module.saveStore() }",27],["module M {",25]],"useCount":926},{"word":"mongodb","context":[["import org.mongodb.morphia.query.Criteria",20],["import com.mongodb.WriteResult",23],["import com.mongodb.WriteConcern",22],["import org.mongodb.morphia.annotations.Entity",21],["import org.mongodb.morphia.query.UpdateResults",19],["* @throws com.mongodb.MongoException             returned via the callback",20],["* @throws com.mongodb.MongoWriteException        returned via the callback",20],["import org.mongodb.morphia.Datastore",38],["* @throws com.mongodb.MongoWriteConcernException returned via the callback",20],["import org.mongodb.morphia.annotations.Id",16]],"useCount":327},{"word":"must","context":[["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["<li>{@code flags} <b>must</b> be 0</li>",66],["\"{@code pNext} $must be $NULL\",",68],["* Skype: dp118m (voice calls must be scheduled in advance)",213],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["This function must only be called from the main thread.",172]],"useCount":2224},{"word":"mvcoding","context":[["package com.mvcoding.expensius",22],["import com.mvcoding.expensius.R",39],["import com.mvcoding.expensius.feature.BaseActivity",23],["import com.mvcoding.expensius.model.Transaction",24],["import com.mvcoding.expensius.model.Tag",26],["import com.mvcoding.expensius.service.AppUserService",26],["package com.mvcoding.expensius.feature.tag",37],["package com.mvcoding.expensius.feature",37],["package com.mvcoding.expensius.extension",20],["package com.mvcoding.expensius.feature.transaction",27]],"useCount":414},{"word":"myRepo","context":[["myRepo.update()",17],["myRepo.`prepare simple conflict`()",41],["myRepo.`assert feature not rebased on master`()",34],["resolveConflicts(myRepo)",31],["myRepo.assertRebaseInProgress()",28],["myRepo.`diverge feature and master`()",41],["myRepo.`assert feature rebased on master`()",42],["myRepo.assertConflict(\"c.txt\")",21],["LocalChange(myRepo, \"new.txt\", \"content\").generate()",15],["assertNoRebaseInProgress(myRepo)",68]],"useCount":353},{"word":"n","context":[["\"1 ======\\n\" +",30],["\"2 ======\\n\" +",30],["\"6 ======\\n\" +",30],["\"5 ======\\n\" +",30],["\"4 ======\\n\" +",30],["println(\"package $packageName;\\n\")",26],["\"\\n\" +",57],["\"3 ======\\n\" +",30],["sourceOutput += \"\\n\"",29],["append(\"\\n\")",29]],"useCount":1022},{"word":"name","context":[["this.name = name",145],["*     * Neither the name of the Brackit Project Team nor the",405],["val name: String,",367],["val name: String",171],["return name",117],["var name: String? = null",96],["playerName { name }",65],["<option name=\"INT_V\" value=\"1\" />",65],["name: String,",128],["this.name = name",145]],"useCount":5768},{"word":"names","context":[["Arrays.sort(names)",31],["map.put(names[i], states.get(i))",12],["return StateMap(names, states)",12],["return names",25],["val names: List<Name>",26],["for (name in names) {",30],["val index = Arrays.binarySearch(names, key)",35],["for (i in names.indices) {",38],["val names: List<Name>,",53],[") in names)",70]],"useCount":366},{"word":"net","context":[["import java.net.HttpURLConnection",100],["import net.minecraft.world.World",124],["import java.net.InetSocketAddress",99],["import net.minecraft.util.math.BlockPos",133],["import net.minecraft.util.EnumFacing",116],["import java.net.URI",159],["import net.minecraft.item.ItemStack",182],["import java.net.URL",394],["import net.minecraft.entity.player.EntityPlayer",114],["import android.net.Uri",504]],"useCount":6594},{"word":"netty","context":[["import io.netty.handler.codec.http.HttpRequest",40],["import io.netty.channel.nio.NioEventLoopGroup",31],["import io.netty.handler.codec.http.FullHttpRequest",42],["import io.netty.buffer.ByteBuf",177],["import io.netty.bootstrap.Bootstrap",48],["import io.netty.handler.codec.http.HttpResponseStatus",51],["import io.netty.channel.Channel",81],["import io.netty.channel.ChannelHandlerContext",108],["import io.netty.buffer.Unpooled",45],["import io.netty.handler.codec.http.*",47]],"useCount":1048},{"word":"network","context":[["network?.calculate()",38],["import com.mgaetan89.showsrage.network.SickRageApi",48],["calculated = network?.output!![0]",19],["package im.actor.runtime.network.mtp.entity",28],["import ru.redenergy.report.common.network.NetworkHandler",19],["network?.setInput(*testingSet?.elementAt(i)!!.input)",18],["for (t in 0..network?.output!!.size - 1) {",18],["network?.setInput(*testValuesDouble)",18],["resultString += network?.output!![t].toString() + \", \"",18],["@JvmStatic var network : NeuralNetwork? = null",18]],"useCount":495},{"word":"new","context":[["let mut server = Nickel::new();",40],["// We don't load scheme with duplicated name - if we generate unique name for it, it will be saved then with new name.",26],["\"new both\\n\" +",25],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24],["Object obj = new Object();",24],["assertEvents({ file.writeText(\"new content\") }, mapOf(file to 'U'))",22],["// not saved -> user does own modification -> new (on disk) state will be overwritten and not applied",19],["Add and implement function 'buildMap' with one parameter (of type extension function) creating a new HashMap,",18],["assertThat(component.foo).isEqualTo(\"new\")",18],["LOG.warn(\"Duplicated scheme ${scheme.name} - old: $oldScheme, new $scheme\")",16]],"useCount":350},{"word":"next","context":[["next()",50],["item = it.next()",20],["return next",25],["override fun next(): T {",27],["childEnv.set(key as MalSymbol, eval(it.next(), childEnv))",28],["if (resultSet.next()) {",29],["next(action)",30],["override fun next(): Item? {",31],["val key = it.next()",34],["while (rs.next()) {",38]],"useCount":564},{"word":"nhaarman","context":[["import com.nhaarman.mockito_kotlin.*",62],["import com.nhaarman.mockito_kotlin.whenever",142],["import com.nhaarman.mockito_kotlin.mock",244],["package com.nhaarman.triad",19],["import com.nhaarman.mockito_kotlin.verify",128],["import com.nhaarman.mockito_kotlin.any",93],["import com.nhaarman.mockito_kotlin.times",20],["import com.nhaarman.mockito_kotlin.doReturn",25],["import com.nhaarman.mockito_kotlin.never",27],["import com.nhaarman.mockito_kotlin.eq",36]],"useCount":833},{"word":"nio","context":[["import java.nio.file.Path",464],["import java.nio.file.Paths",422],["import java.nio.file.Files",315],["import java.nio.charset.Charset",174],["import java.nio.FloatBuffer",33],["import java.nio.file.*",42],["import java.nio.file.attribute.BasicFileAttributes",44],["import java.nio.ByteBuffer",168],["import java.nio.charset.StandardCharsets",52],["import java.nio.ByteOrder",60]],"useCount":2018},{"word":"nk_color","context":[["nk_color.member(\"border_color\", \"\")",44],["nk_color.IN(\"color\", \"\")",126],["nk_color(",72],["nk_color.member(\"color\", \"\")",68],["nk_color.member(\"text_background\", \"\")",12],["nk_color.member(\"label_hover\", \"\")",12],["nk_color.member(\"text_active\", \"\")",12],["nk_color.IN(\"color\", \"\"),",36],["nk_color.member(\"text_hover\", \"\")",16],["nk_color.member(\"text_normal\", \"\")",16]],"useCount":438},{"word":"nl","context":[["import nl.adaptivity.xml.*",21],["import nl.komponents.kovenant.Promise",79],["import nl.komponents.kovenant.task",46],["import nl.komponents.kovenant.Kovenant",37],["import nl.komponents.kovenant.deferred",32],["import nl.mpcjanssen.simpletask.dao.gentodo.TodoItem",24],["nl()",24],["import nl.adaptivity.process.util.Identifiable",23],["package nl.adaptivity.xml",21],["package nl.mpcjanssen.simpletask",29]],"useCount":654},{"word":"node","context":[["constructor(node: ASTNode) : super(node)",67],["for (child in node.children) {",24],["import com.fasterxml.jackson.databind.node.ObjectNode",25],["node.addChildren(XValueChildrenList.EMPTY, true)",30],["override fun computeChildren(node: XCompositeNode) {",34],[".done(node) {",38],["override fun processNode(visitor: HtmlGenerator.HtmlGeneratingVisitor, text: String, node: ASTNode) {",44],["return node",93],["node.setAlreadySorted(true)",22],["constructor(node: ASTNode) : super(node)",67]],"useCount":837},{"word":"nor","context":[["*     * Neither the name of developer (Sergey Parshin) nor the",15],["*     * Neither the name of the Brackit Project Team nor the",405]],"useCount":420},{"word":"not","context":[["rep(\"(def! not (fn* (a) (if a false true)))\", repl_env)",31],["// we must not remove non-persistent (e.g. predefined) schemes, because we cannot load it (obviously)",26],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24],["get() = throw AnkoException(\"'android.widget.TextView.enabled' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.linkTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.textResource' property does not have a getter\")",20],["myRepo.`assert feature not rebased on master`()",34],["sender.sendMessage(ChatColor.translateAlternateColorCodes('&', plugin.config.getString(\"messages.not-from-console\")))",34],["throw UnsupportedOperationException(\"not implemented\")",55],["* @throws UnsupportedOperationException This operation is not supported yet",604]],"useCount":1949},{"word":"notification","context":[["import com.intellij.notification.NotificationType",106],["* unspecified and should only be used as notification.",79],["import com.intellij.notification.Notifications",71],["import com.intellij.notification.Notification",65],["notification.expire()",38],["import com.intellij.notification.NotificationsManager",26],["import com.intellij.notification.NotificationGroup",25],["import com.intellij.notification.NotificationDisplayType",13],["for (notification in notifications) {",19],["import com.intellij.notification.NotificationListener",20]],"useCount":512},{"word":"notifyDataSetChanged","context":[["adapter?.notifyDataSetChanged()",17],["adapter.notifyDataSetChanged()",70],["notifyDataSetChanged()",351]],"useCount":438},{"word":"nth","context":[["\"def!\" -> return env.set(ast.nth(1) as MalSymbol, eval(ast.nth(2), env))",22],["ast = ast.nth(2)",56],["val bindings = ast.nth(1) as? ISeq ?: throw MalException(\"expected sequence as the first parameter to let*\")",31],["val binds = ast.nth(1) as? ISeq ?: throw MalException(\"fn* requires a binding list as first parameter\")",31],["val body = ast.nth(2)",31],["val check = eval(ast.nth(1), env)",31],["ast = ast.nth(3)",28],["\"def!\" -> return env.set(ast.nth(1) as MalSymbol, eval(ast.nth(2), env))",22],["return seq.nth(1)",21],["\"quote\" -> return ast.nth(1)",17]],"useCount":419},{"word":"null","context":[["return null",3752],["null,",289],["if (result == null) {",192],["if (result != null) {",143],["if (value == null) {",152],["return null;",128],["null",687],["null)",132],["var result: DSLResultStub? = null",289],["else -> null",343]],"useCount":19011},{"word":"nullable","context":[["[Column(nullable=false,length=30) ]",26],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["[Column(nullable=false,length=128) ]",60],["Check(1)..nullable..GLsizei_p.OUT(\"length\", \"\"),",35],["[Column(nullable=false) ]",28],["nullable..noneTerminated..const..EGLint_p.IN(\"attrib_list\", \"\")",28],["nullable..nk_draw_begin.member(\"draw_begin\", \"\")",28],["nullable..nk_draw_end.member(\"draw_end\", \"\")",28],["nullable..MultiType(",25],["PIXEL_UNPACK_BUFFER..nullable..const..void_p.IN(\"data\", \"\")",26]],"useCount":575},{"word":"number","context":[["if (!it.hasNext()) throw MalException(\"odd number of binding elements in let*\")",34],["returnDoc = \"number of draw calls\"",16],["GLint.IN(\"level\", \"the level-of-detail number\"),",35],["AutoSizeShr(\"GLChecks.typeToByteShift(type)\", \"indices\")..GLsizei.IN(\"count\", \"the number of elements to be rendered\"),",16],["<build number=\"145.597\" version=\"2016.1.1\"/>",16],["foo(name = \"d\", number = 2, toUpperCase = true))",19],["foo(\"b\", number = 1) +",19],["uint32_t.IN(\"_numVertices\", \"number of vertices to render\")",20],["AutoSize(\"data\")..GLsizei.IN(\"bufSize\", \"the maximum number of bytes to write into {@code data}\"),",26],["AutoSize(\"params\")..GLsizei.IN(\"bufSize\", \"the maximum number of bytes to write to {@code params}\"),",20]],"useCount":359},{"word":"obj","context":[["val obj = JsonObject()",14],[".whereArgs(obj.id)",14],["override fun equals(obj: Any?): Boolean {",16],["json.toUser(getJSONObject(obj, source)),",18],["if (obj != null) {",20],["return obj",57],["constructor(obj: JSONObject) {",34],["obj.metadata = meta",30],["Object obj = new Object();",24],["obj(",23]],"useCount":324},{"word":"object","context":[["companion object {",7075],["companion object Data{",52],["companion object",67],["assertTrue(Fiber(scheduler, object : SuspendableCallable<Boolean> {",40],["object : RustElementVisitor() {",51],["companion object{",50],["companion object Factory {",43],["class object {",152],["private companion object {",105],["return object : RowParser<R> {",88]],"useCount":8951},{"word":"objectweb","context":[["import org.objectweb.asm.Opcodes",62],["import org.objectweb.asm.Type",72],["import jdk.internal.org.objectweb.asm.MethodVisitor",16],["import jdk.internal.org.objectweb.asm.Opcodes",17],["import org.objectweb.asm.ClassWriter",20],["import org.objectweb.asm.MethodVisitor",22],["import org.objectweb.asm.ClassReader",23],["import org.objectweb.asm.ClassVisitor",29],["import org.objectweb.asm.tree.MethodNode",46],["import org.objectweb.asm.tree.ClassNode",67]],"useCount":412},{"word":"observable","context":[["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["assertNotNull(\"observable == null\", observable)",33],["assertNotNull(\"observable == null\", observable)",33],["* *Warning:* The created observable uses [TextView.OnEditorActionListener] to",32],["* drags. Only one observable can be used for a view at a time.",30],["observable.subscribe(test)",94],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["* touches. Only one observable can be used for a view at a time.",48],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* observe actions. Only one observable can be used for a view at a time.",34]],"useCount":1475},{"word":"observeOn","context":[[".observeOn(schedulers.main)",18],[".observeOn(Schedulers.immediate())",39],[".observeOn(AndroidSchedulers.mainThread())",475],[".observeOn(Schedulers.io())",16]],"useCount":548},{"word":"of","context":[["VkStructureType.member(\"sType\", \"the type of this structure.\")",128],["*     * Neither the name of the Brackit Project Team nor the",405],["* This program incorporates a modified version of Twidere.",264],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["\"DSA version of ${src.javaDocLink}.\",",148],["* This file is part of ProcessManager.",153],["* This file is part of econsim-tr01.",213],["* This Source Code Form is subject to the terms of the Mozilla Public",179],["/* This Source Code Form is subject to the terms of the Mozilla Public",81]],"useCount":4547},{"word":"offset","context":[["var offset = document.getLineEndOffset(endLine - 1)",21],["offset++",74],["assertEquals(offset, endOffset)",42],["* @param offset The offset in bytes off the native address.",18],["* @param offset The offset in bytes off the native address.",18],["assertEquals(offset, startOffset)",21],["GLintptr.IN(\"offset\", \"\")",39],["var offset = 0",37],["GLintptr.IN(\"offset\", \"\"),",34],["offset(),",24]],"useCount":538},{"word":"okhttp3","context":[["import okhttp3.Request",80],["import okhttp3.OkHttpClient",161],["import okhttp3.mockwebserver.MockResponse",30],["import okhttp3.Response",78],["import okhttp3.HttpUrl",54],["import okhttp3.ResponseBody",21],["import okhttp3.RequestBody",27],["import okhttp3.logging.HttpLoggingInterceptor",47],["import okhttp3.Call",37],["import okhttp3.Interceptor",30]],"useCount":644},{"word":"on","context":[["myRepo.`assert feature not rebased on master`()",34],["`do nothing on merge`()",35],["* Created by kirillrozov on 9/13/15.",36],["* Created by Tlaster on 2016/9/2.",38],["myRepo.`assert feature rebased on master`()",42],["* Created by yuriel on 7/24/16.",43],["returnDoc = \"1 on success, 0 on failure\"",56],["returnDoc = \"1 on success, 0 on failure\"",56],["// automatically handle clicks on the Home/Up button, so long",80],["* *Note:* A value will be emitted immediately on subscribe.",106]],"useCount":1942},{"word":"onActivityCreated","context":[["override fun onActivityCreated(savedInstanceState: Bundle?) {",165],["super.onActivityCreated(savedInstanceState)",171]],"useCount":336},{"word":"onBackPressed","context":[["presenter.onBackPressed()",23],["override fun onBackPressed(): Boolean {",11],["onBackPressed()",41],["super.onBackPressed()",132],["override fun onBackPressed() {",161]],"useCount":368},{"word":"onClick","context":[["override fun onClick(v: View?) {",19],["override fun onClick(view: View) {",43],["override fun onClick(dialog: DialogInterface, which: Int) {",43],["import org.jetbrains.anko.onClick",48],["onClick {",70],["override fun onClick(v: View) {",74],["override fun onClick() {",18],["onClick: (Int) -> Unit",15],["override fun onClick(view: View?) {",15],["override fun onClick(dialog: DialogInterface, id: Int) {",13]],"useCount":381},{"word":"onCompleted","context":[["sub.onCompleted()",12],["subscriber.onCompleted()",137],["override fun onCompleted() {",93],["it.onCompleted()",32],["op.onCompleted()",15],["override fun onCompleted() = Unit",13],["s.onCompleted()",13],["onCompleted()",11]],"useCount":326},{"word":"onCreate","context":[["override fun onCreate() {",307],["super.onCreate(savedInstanceState)",1768],["override fun onCreate(savedInstanceState: Bundle?) {",1642],["super.onCreate()",294],["override fun onCreate(savedState: Bundle?) {",65],["super.onCreate(savedInstanceState);",22],["override fun onCreate(db: SQLiteDatabase) {",33],["super.onCreate(savedState)",64],["public override fun onCreate(savedInstanceState: Bundle?) {",55],["public override fun onCreate(savedInstanceState: Bundle?): Unit {",42]],"useCount":4448},{"word":"onCreateOptionsMenu","context":[["super.onCreateOptionsMenu(menu)",14],["override fun onCreateOptionsMenu(menu: Menu?): Boolean {",71],["override fun onCreateOptionsMenu(menu: Menu): Boolean {",211],["override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {",40],["return super.onCreateOptionsMenu(menu)",43],["override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {",45],["super.onCreateOptionsMenu(menu, inflater)",32]],"useCount":456},{"word":"onCreateView","context":[["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {",100],["baseFragment.onCreateView(layoutInflaterMock, viewGroupMock, null)",20],["super.onCreateView(inflater, container, savedInstanceState)",22],["override fun onCreateView(inflater: LayoutInflater?,",23],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedState: Bundle?): View? {",25],["\"  protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\",",31],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,",51],["override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {",60],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,",68],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192]],"useCount":688},{"word":"onDestroy","context":[["delegate.onDestroy()",13],["super.onDestroy()",396],["override fun onDestroy() {",419],["presenter.onDestroy()",12],["fun onDestroy() {",17],["factory.onDestroy()",16],["host.onDestroy()",15]],"useCount":888},{"word":"onDestroyView","context":[["super.onDestroyView()",161],["override fun onDestroyView() {",166],["baseFragment.onDestroyView()",12]],"useCount":339},{"word":"onOptionsItemSelected","context":[["override fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {",15],["override fun onOptionsItemSelected(item: MenuItem): Boolean {",336],["return super.onOptionsItemSelected(item)",289],["override fun onOptionsItemSelected(item: MenuItem?): Boolean {",129],["else -> return super.onOptionsItemSelected(item)",69],["else -> super.onOptionsItemSelected(item)",49]],"useCount":887},{"word":"onPause","context":[["override fun onPause() {",289],["public override fun onPause() {",11],["presenter.onPause()",29],["fun onPause()",11],["super.onPause()",265]],"useCount":605},{"word":"onResume","context":[["override fun onResume() {",397],["super.onResume()",377],["fun onResume()",14],["public override fun onResume() {",16],["presenter.onResume()",74]],"useCount":878},{"word":"onSaveInstanceState","context":[["super.onSaveInstanceState(outState)",156],["override fun onSaveInstanceState(outState: Bundle?) {",57],["override fun onSaveInstanceState(outState: Bundle) {",105]],"useCount":318},{"word":"onStart","context":[["presenter.onStart()",13],["super.onStart()",209],["override fun onStart() {",225]],"useCount":447},{"word":"onStop","context":[["delegate.onStop()",11],["super.onStop()",178],["override fun onStop() {",186]],"useCount":375},{"word":"onViewCreated","context":[["override fun onViewCreated(view: View, savedState: Bundle?) {",38],["super.onViewCreated(view, savedInstanceState)",255],["override fun onViewCreated(view: View, savedInstanceState: Bundle?) {",113],["override fun onViewCreated(view: View, savedInstanceState: Bundle?){",18],["presenter.onViewCreated()",17],["super.onViewCreated(view, savedState)",13],["registerController.onViewCreated()",13],["override fun onViewCreated(view: View?, savedInstanceState: Bundle?) {",156]],"useCount":623},{"word":"one","context":[["* touches. Only one observable can be used for a view at a time.",48],["* observe actions. Only one observable can be used for a view at a time.",34],["* long clicks. Only one observable can be used for a view at a time.",30],["* drags. Only one observable can be used for a view at a time.",30],["with one of the following error values returned in $errcode_ret:",21],["value with one of the following error values returned in $errcode_ret:",20],["Add and implement function 'buildMap' with one parameter (of type extension function) creating a new HashMap,",18],["// If a lambda has exactly one parameter, that parameter can be accessed as 'it'",18],["*  There are many operations that help to transform one collection into another, starting with 'to'",16],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139]],"useCount":533},{"word":"only","context":[["// save only if scheme differs from bundled",24],["* unspecified and should only be used as notification.",79],["\"This function must only be called from the main thread.\",",45],["<li>This command <b>must</b> only be called outside of a render pass instance</li>",34],["throw UnsupportedOperationException(\"read-only\")",29],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28],["This function must only be called from the main thread.",172],["// load state only if there are existing files",24],["// must be performed only after initial pull, so, local changes will be relative to remote files",27],["const..charASCII_p.IN(\"propertyName\", \"the name of the property, which needs to be valid only for the call\"),",27]],"useCount":748},{"word":"open","context":[["protected open fun beforeElementLoaded(element: Element) {",32],["protected open fun beforeElementSaved(element: Element) {",32],["whenever(execChannel.open()).thenReturn(openFuture)",26],["protected open fun getMacroSubstitutor(fileSpec: String): TrackingPathMacroSubstitutor? = pathMacroSubstitutor",21],["open inner class IcsStreamProvider(protected val projectId: String?) : StreamProvider {",20],["protected open val isUseXmlProlog: Boolean",20],["open fun pathRenamed(oldPath: String, newPath: String, event: VFileEvent?) {",19],["protected open fun getPathMacroManagerForDefaults(): PathMacroManager? = null",19],["protected open fun beforeSave(readonlyFiles: List<Pair<SaveSession, VirtualFile>>) {",19],["open class StateStorageManagerImpl(private val rootTagName: String,",18]],"useCount":537},{"word":"openapi","context":[["import com.intellij.openapi.application.ApplicationManager",500],["import com.intellij.openapi.util.text.StringUtil",380],["import com.intellij.openapi.vfs.LocalFileSystem",172],["import com.intellij.openapi.actionSystem.AnActionEvent",169],["import com.intellij.openapi.util.TextRange",168],["import com.intellij.openapi.project.Project",896],["import com.intellij.openapi.module.Module",192],["import com.intellij.openapi.diagnostic.Logger",290],["import com.intellij.openapi.util.io.FileUtil",400],["import com.intellij.openapi.vfs.VirtualFile",601]],"useCount":12218},{"word":"opengl","context":[["import org.lwjgl.opengl.BufferType.*",26],["package org.lwjgl.opengl",21],["import com.jogamp.opengl.GLAutoDrawable",15],["import scenery.rendermodules.opengl.DeferredLightingRenderer",14],["import org.lwjgl.opengl.GL11",35],["package org.lwjgl.opengl.templates",530],["import org.lwjgl.opengl.*",546]],"useCount":1187},{"word":"opengles","context":[["import org.lwjgl.opengles.*",220],["package org.lwjgl.opengles.templates",221],["import org.lwjgl.opengles.BufferType.*",17]],"useCount":458},{"word":"operation","context":[["* @throws UnsupportedOperationException This operation is not supported yet",604],["* Unsupported operation",604],["similar operation applied to other components of the vectors",32],["override fun getOldStorageSpec(component: Any, componentName: String, operation: StateStorageOperation): String? {",30],["// we must use the same StoredConfig instance during the operation",11],["override fun getOldStorage(component: Any, componentName: String, operation: StateStorageOperation) = storage",13],["operation(element)",14],["// \"RESET_TO_*\" will do \"reset hard\", so, probably, error will be gone, so, we can continue operation",17],["val oldStorageSpec = getOldStorageSpec(component, componentName, operation) ?: return null",19],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24]],"useCount":1434},{"word":"options","context":[["package com.transactia.quant.options",17],["import com.intellij.openapi.options.colors.ColorSettingsPage",16],["import com.intellij.openapi.options.colors.ColorDescriptor",16],["import com.intellij.openapi.options.colors.AttributesDescriptor",18],["import com.intellij.application.options.PathMacrosImpl",21],["import com.intellij.openapi.options.SchemesManagerFactory",23],["import com.intellij.openapi.options.SchemeManagerFactory",24],["import com.intellij.openapi.options.ConfigurableUi",25],["import com.intellij.openapi.options.ConfigurationException",27],["import com.intellij.openapi.options.*",37]],"useCount":323},{"word":"or","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["//    and/or other materials provided with the distribution.",126],["// Redistribution and use in source and binary forms, with or without",126],["override val allowOauthType = OauthType.oauth1 or OauthType.oauth2",36],["*       documentation and/or other materials provided with the distribution.",420],["* Redistribution and use in source and binary forms, with or without",450],["** Lange Dreef 17                   |  means, electronic or mechanical, for the",29]],"useCount":3382},{"word":"org","context":[["import org.slf4j.LoggerFactory",640],["import org.lwjgl.opengl.*",546],["package org.lwjgl.opengl.templates",530],["import org.junit.Test",4533],["import org.junit.runner.RunWith",867],["import org.assertj.core.api.Assertions.assertThat",968],["import org.junit.Assert.assertEquals",576],["import org.junit.Assert",621],["import org.lwjgl.generator.*",1406],["import org.junit.Before",983]],"useCount":45942},{"word":"os","context":[["import android.os.IBinder",94],["import android.os.Environment",71],["import android.os.Message",34],["import android.os.AsyncTask",120],["import android.os.Looper",125],["import android.os.Parcel",186],["import android.os.Handler",249],["import android.os.Parcelable",261],["import android.os.Build",432],["import android.os.Bundle",2910]],"useCount":4750},{"word":"other","context":[["<li>The See Also section for other reference pages using this type.</li>",88],["if (other?.javaClass != javaClass) return false",80],["val im = coordinatewiseOperation(this, other) {",63],["override fun equals(other: Any?): Boolean{",47],["if (this === other) {",35],["*       documentation and/or other materials provided with the distribution.",420],["if (this === other) return true",208],["override fun equals(other: Any?): Boolean {",459],["//    and/or other materials provided with the distribution.",126],["if (id != other.id) return false",34]],"useCount":1983},{"word":"out","context":[["out.append(')')",40],["System.out.println();",40],["package main.astraeus.net.packet.out",50],["return out",128],["System.out.println(\"\");",29],["override fun getProjectStoreClass(isDefaultProject: Boolean): Class<out IComponentStore> {",29],["out.newLine()",81],["out.closeBlock()",64],["out.close()",57],["System.out.println(\"AAA\");",56]],"useCount":1250},{"word":"outState","context":[["override fun onSaveInstanceState(outState: Bundle?) {",57],["override fun onSaveInstanceState(outState: Bundle) {",105],["super.onSaveInstanceState(outState)",156]],"useCount":318},{"word":"output","context":[["override fun writeData(output: DataOutput) {",70],["output.writeInt32NoTag(arrayByteSize)",30],["total += network?.output!![0]",18],["for (t in 0..network?.output!!.size - 1) {",18],["resultString += network?.output!![t].toString() + \", \"",18],["calculated = network?.output!![0]",19],["/** Prints the given message and newline to the standard output stream. */",19],["fun writeTo (output: CodedOutputStream) {",42],["output.writeTag(1, WireType.LENGTH_DELIMITED)",22],["return output",33]],"useCount":485},{"word":"override","context":[["override fun hashCode(): Int {",355],["override fun onCreate(savedInstanceState: Bundle?) {",1642],["override fun onPause() {",289],["override fun onCreate() {",307],["override fun onOptionsItemSelected(item: MenuItem): Boolean {",336],["override fun toString(): String {",998],["override fun run() {",397],["override fun equals(other: Any?): Boolean {",459],["override fun onDestroy() {",419],["override fun onResume() {",397]],"useCount":27780},{"word":"p","context":[["p: ViewGroup.LayoutParams?,",20],["p: android.view.ViewGroup.LayoutParams?,",32],["* </p>",48],["p {",58],["* <p>",163],["}.p",257],[".groupBy(p.name)",27],[".innerJoin(p)",27],["val p = QPlayers.players",29],["* <p/>",30]],"useCount":874},{"word":"pNext","context":[["\"{@code pNext} $must be $NULL\",",68],["pNext()",126],["<li>{@code pNext} <b>must</b> be {@code NULL}</li>",133],["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138]],"useCount":465},{"word":"package","context":[["package org.lwjgl.opengl.templates",530],["package com.devcharly.kotlin.ant",113],["package org.rust.lang.core.psi.impl.mixin",149],["package org.jetbrains.settingsRepository",159],["\"package test;\",",177],["package org.lwjgl.egl.templates",186],["package org.jetbrains.debugger",209],["package ii_collections",221],["package org.lwjgl.opengles.templates",221],["package com.intellij.configurationStore",374]],"useCount":20244},{"word":"packet","context":[["package main.astraeus.net.packet.out",50],["override fun handlePacket(player: Player, packet: IncomingPacket) {",26],["import main.astraeus.net.packet.out.ServerMessageOutgoingPacket",23],["import main.astraeus.net.packet.OutgoingPacket",53],["* @param packet",22],["import main.astraeus.net.packet.`in`.IncomingPacketListener",26],["import main.astraeus.net.packet.IncomingPacket",31],["val reader = packet.reader",28],["import main.astraeus.net.packet.IncomingPacket.IncomingPacketOpcode",27],["package main.astraeus.net.packet.`in`.impl",26]],"useCount":337},{"word":"page","context":[["if (page.page == 1) {",28],["page",17],["Observable.just(page)",18],["return GET(page.url, headers)",18],["page.status = Page.ERROR",18],["param.put(\"page\", page.toString())",19],["param.put(\"page\", page.toString())",19],["if (page.page == 1) {",28],["* Home page: http://www.cs.rice.edu/~dwallach/calwatch/",23],["page.mangas.add(this)",19]],"useCount":313},{"word":"param","context":[["ALenum.IN(\"param\", \"the parameter to query\"),",44],["* @param context",48],["val param = HashMap<String, String>()",53],["* @param handled Function invoked with each value to determine the return value of the",56],["* @param tag The bound tag, if any.",90],["* @param date the date for comparison",40],["ALenum.IN(\"param\", \"the parameter to modify\"),",40],["override fun validate(param: Parameter) {",37],["* @param context the application context.",36],["* @param player",36]],"useCount":2091},{"word":"parameter","context":[["ALenum.IN(\"param\", \"the parameter to query\"),",44],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetDoublev, GetIntegerv, and GetFloatv.\",",42],["ALenum.IN(\"param\", \"the parameter to modify\"),",40],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["GLenum.IN(\"pname\", \"the parameter to set\"),",40],["\"Accepted by the {@code pname} parameter of GetProgramiv.\",",34],["val bindings = ast.nth(1) as? ISeq ?: throw MalException(\"expected sequence as the first parameter to let*\")",31],["val binds = ast.nth(1) as? ISeq ?: throw MalException(\"fn* requires a binding list as first parameter\")",31],["override fun transformDeclaration(param: Parameter, original: String) = null // Remove the parameter",30],["GLenum.IN(\"pname\", \"the parameter to query\"),",29]],"useCount":1002},{"word":"params","context":[["Check(4)..const..GLint_p.IN(\"params\", \"the parameter value\")",22],["val params = child.layoutParams as RecyclerView.LayoutParams",23],["ReturnParam..Check(1)..GLint_p.OUT(\"params\", \"\")",51],["Check(1)..ReturnParam..GLint_p.OUT(\"params\", \"\")",42],["src[\"params\"]",34],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["env = Env(firstEval.env, firstEval.params, evaluated.rest().seq())",28],["val params = binds.seq().filterIsInstance<MalSymbol>()",28],["Check(1)..ReturnParam..GLfloat_p.OUT(\"params\", \"\")",24]],"useCount":636},{"word":"parent","context":[["// as you specify a parent activity in AndroidManifest.xml.",79],["val child = parent.getChildAt(i)",27],["override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {",61],["override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {",55],["if (parent != null) {",42],["override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder? {",35],["parent?.createDirectories()",34],["override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View? {",33],["val parent = element.parent",31],["val parent = element.parent",31]],"useCount":1007},{"word":"parse","context":[["parser.parse(\"\"\"",48],["token.parse()",24],["import com.netflix.java.refactor.parse.OracleJdkParser",19],["override fun parse(tokens: TokensCache, rangesToGlue: Collection<IntRange>): SequentialParser.ParsingResult {",14],["parse(\"\"\"",13],["public override fun parse(parser: Parser): AbstractExpression {",13],["fun parse() {",11],["import com.netflix.java.refactor.parse.Parser",60],["val a = parse(\"\"\"",120]],"useCount":322},{"word":"parser","context":[["import org.jetbrains.cabal.parser.*",32],["import org.intellij.markdown.parser.markerblocks.MarkerBlockImpl",28],["import org.intellij.markdown.parser.MarkerProcessor",33],["import org.intellij.markdown.parser.markerblocks.MarkerBlockProvider",33],["parser.parse(\"\"\"",48],["import org.intellij.markdown.parser.markerblocks.MarkerBlock",59],["import org.intellij.markdown.parser.constraints.MarkdownConstraints",76],["import org.intellij.markdown.parser.sequentialparsers.SequentialParser",65],["import org.intellij.markdown.parser.ProductionHolder",67],["import org.intellij.markdown.parser.LookaheadText",74]],"useCount":1107},{"word":"part","context":[["* This file is part of Life in Space, by Retronic Games",37],["* This source is part of the",19],["* This part of workshop was inspired by:",21],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24],["*   This file is part of OpenGPSTracker.",29],["* This file is part of alf.io backoffice.",29],["* This file is part of Krobot.",69],["* This file is part of lavagna.",81],["* This file is part of ProcessManager.",153],["* This file is part of econsim-tr01.",213]],"useCount":755},{"word":"path","context":[["if (path != null) {",32],["_init(location, path, cache, nested)",28],["override fun expandMacros(path: String): String {",21],["val file = File(path)",34],["it.path",40],["override fun setPath(path: String) {",50],["return path",77],["if (path.isEmpty()) {",21],["GLuint.IN(\"path\", \"\"),",156],["var result = path",21]],"useCount":1415},{"word":"persistence","context":[["import javax.persistence.ManyToOne",15],["import javax.persistence.GeneratedValue",30],["import de.ph1b.audiobook.persistence.BookRepository",14],["import javax.persistence.*",90],["import javax.persistence.Entity",69],["import de.ph1b.audiobook.persistence.PrefsManager",45],["import javax.persistence.Id",42],["import javax.persistence.Entity;",15],["import javax.persistence.Table",18],["import javax.persistence.Column",25]],"useCount":439},{"word":"ph1b","context":[["package de.ph1b.audiobook.persistence",13],["import de.ph1b.audiobook.misc.find",13],["import de.ph1b.audiobook.persistence.BookRepository",14],["import de.ph1b.audiobook.misc.value",14],["import de.ph1b.audiobook.model.Book",16],["package de.ph1b.audiobook.uitools",19],["import de.ph1b.audiobook.Book",22],["import de.ph1b.audiobook.persistence.PrefsManager",45],["import de.ph1b.audiobook.injection.App",54],["import de.ph1b.audiobook.R",74]],"useCount":320},{"word":"pl","context":[["import pl.ches.citybikes.domain.common.SchedulersProvider",19],["import pl.elpassion.cloudtimer.domain.Timer",26],["import pl.elpassion.cloudtimer.R",22],["import pl.ches.citybikes.data.disk.entity.Station",22],["package pl.mareklangiewicz.myintent",26],["package pl.mareklangiewicz.myutils",21],["import pl.mareklangiewicz.myutils.*",21],["import pl.ches.citybikes.data.disk.entity.Area",20],["import pl.elpassion.cloudtimer.dao.TimerDaoProvider",15],["import pl.whiter13.droidcon.model.Speaker",14]],"useCount":301},{"word":"planner","context":[["import com.github.K0zka.kerub.planner.costs.Cost",17],["package com.github.K0zka.kerub.planner.steps",21],["import com.github.K0zka.kerub.planner.StepExecutor",13],["package com.github.K0zka.kerub.planner.steps.host.ksm",15],["import com.github.K0zka.kerub.planner.reservations.Reservation",21],["import com.github.K0zka.kerub.planner.steps.AbstractOperationalStepFactory",24],["package com.github.K0zka.kerub.planner",25],["package com.github.K0zka.kerub.planner.costs",29],["import com.github.K0zka.kerub.planner.steps.AbstractOperationalStep",37],["import com.github.K0zka.kerub.planner.OperationalState",108]],"useCount":347},{"word":"player","context":[["import com.seventh_root.elysium.players.bukkit.player.ElysiumPlayerProvider",43],["* @param player",36],["override fun writePacket(player: Player): GamePacketBuilder {",51],["import main.astraeus.game.model.entity.mob.player.Player",109],["import net.minecraft.entity.player.EntityPlayer",114],["import main.astraeus.game.model.entity.mob.player.attribute.Attribute",26],["import org.spongepowered.api.entity.living.player.Player",31],["import net.minecraft.entity.player.EntityPlayerMP",30],["val character = characterProvider.getActiveCharacter(player)",27],["import com.seventh_root.elysium.players.bukkit.player.ElysiumPlayer",31]],"useCount":802},{"word":"plugin","context":[["// used in settings repository plugin",29],["val playerProvider = plugin.core.serviceManager.getServiceProvider(ElysiumPlayerProvider::class)",62],["val query = plugin.databaseManager.getNewQuery(connection) ?: return databaseError",60],["import org.bukkit.plugin.java.JavaPlugin",59],["import com.beust.kobalt.plugin.packaging.assemble",27],["val chatChannelProvider = plugin.core.serviceManager.getServiceProvider(ElysiumChatChannelProvider::class)",29],["return ResponseBuilder.build(plugin) {",30],["sender.sendMessage(ChatColor.translateAlternateColorCodes('&', plugin.config.getString(\"messages.not-from-console\")))",34],["val characterProvider = plugin.core.serviceManager.getServiceProvider(ElysiumCharacterProvider::class)",49],["Commandspy - A Minecraft server plugin to facilitate real-time usage of commands, and sign-changes",49]],"useCount":752},{"word":"plugins","context":[["package org.intellij.plugins.hcl.psi.impl",18],["import org.jetbrains.plugins.groovy.lang.psi.api.statements.blocks.GrClosableBlock",25],["import com.intellij.ide.plugins.PluginManager",25],["import org.jetbrains.plugins.groovy.lang.psi.impl.statements.expressions.TypesUtil",23],["import org.jetbrains.plugins.groovy.lang.psi.api.statements.GrField",19],["import org.intellij.plugins.hcl.psi.*",19],["package com.jonnyzzz.teamcity.plugins.node.server",18],["import com.intellij.ide.plugins.PluginManagerCore",17],["import org.intellij.plugins.hcl.terraform.config.TerraformFileType",16],["//collect plugins which were not updated and would be incompatible with new version",15]],"useCount":599},{"word":"pname","context":[["\"Accepted by the {@code pname} parameter of GetProgramiv.\",",34],["GLenum.IN(\"pname\", \"the parameter to query\"),",29],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetInteger64v, GetFloatv, and GetDoublev.\",",27],["GLenum.IN(\"pname\", \"the symbolic name of the vertex attribute parameter to be queried\"),",18],["GLenum.IN(\"pname\", \"the parameter to set\"),",40],["src[\"pname\"],",42],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetDoublev, GetIntegerv, and GetFloatv.\",",42],["\"pname\",",47],["\"Accepted by the {@code pname} parameter of GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev.\",",109],["GLenum.IN(\"pname\", \"\"),",353]],"useCount":889},{"word":"pogo","context":[["import ink.abb.pogo.scraper.util.Log",80],["import ink.abb.pogo.scraper.Settings",66],["import ink.abb.pogo.scraper.Context",62],["import ink.abb.pogo.scraper.Bot",53],["package ink.abb.pogo.scraper.tasks",52],["import ink.abb.pogo.scraper.Task",49],["package ink.abb.pogo.scraper",26],["import ink.abb.pogo.scraper.util.pokemon.getIvPercentage",24],["import ink.abb.pogo.scraper.util.cachedInventories",20],["package ink.abb.pogo.scraper.util.data",16]],"useCount":497},{"word":"pointer","context":[["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["override fun touchDown(event: InputEvent?, x: Float, y: Float, pointer: Int, button: Int): Boolean {",12],["\"pointer\",",12],["LIBRARY.CFRelease(pointer)",12],["ELEMENT_ARRAY_BUFFER..const..void_p.IN(\"indices\", \"a pointer to the location where the indices are stored\"),",12],["nullable..const..charptr.IN(\"end\", \"a pointer to the end of the sub-string to measure, or $NULL\"),",12],["<li>{@code pPropertyCount} <b>must</b> be a pointer to a {@code uint32_t} value</li>",13],["const..GLcharUTF8_p.IN(\"message\", \"a pointer to the message string representation\"),",15],["PIXEL_UNPACK_BUFFER..const..void_p.IN(\"data\", \"a pointer to the compressed image data\")",18],["override fun touchDown(screenX: Int, screenY: Int, pointer: Int, button: Int): Boolean {",15]],"useCount":305},{"word":"pos","context":[["override fun calcNextInterestingOffset(pos: LookaheadText.Position): Int {",27],["pos++",86],["var pos = 0",50],["int.IN(\"pos\", \"\"),",36],["if (pos.offsetInCurrentLine != -1) {",19],["override fun interruptsParagraph(pos: LookaheadText.Position, constraints: MarkdownConstraints): Boolean {",26],["for (pos in 0..size - 1) {",22],["override fun createMarkerBlocks(pos: LookaheadText.Position,",21],["assert(pos.char == '\\n')",20],["return pos.nextLineOrEofOffset",19]],"useCount":443},{"word":"position","context":[["override fun getItemId(position: Int): Long {",103],["override fun getItemViewType(position: Int): Int {",84],["override fun onBindViewHolder(holder: ViewHolder, position: Int) {",83],["when (position) {",60],["override fun onPageSelected(position: Int) {",50],["return position.toLong()",44],["override fun getItem(position: Int): Fragment {",42],["override fun onBindViewHolder(holder: ViewHolder?, position: Int) {",39],["override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {",34],["override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {",55]],"useCount":1288},{"word":"preference","context":[["import android.preference.Preference",30],["import android.preference.PreferenceFragment",38],["import android.preference.PreferenceManager",209],["import eu.kanade.tachiyomi.data.preference.PreferencesHelper",77],["import eu.kanade.tachiyomi.data.preference.getOrDefault",41],["import android.preference.PreferenceActivity",22],["private lateinit var preference: SharedPreferences",24],["this.preference.edit().clear().apply()",24],["this.preference = this.activityRule.activity.getPreferences()",24],["import android.support.v7.preference.Preference",30]],"useCount":653},{"word":"presenter","context":[["presenter.attach(view)",134],["presenter.onAttachView(view)",106],["presenter.onResume()",74],["presenter.attach(this)",43],["presenter.onSearchResultsAvailable(result)",36],["import eu.kanade.tachiyomi.ui.base.presenter.BasePresenter",34],["presenter.onRoutePreviewEvent(RoutePreviewEvent(getTestFeature()))",31],["presenter.onPause()",29],["package com.glucose.app.presenter",25],["presenter.onBackPressed()",23]],"useCount":845},{"word":"print","context":[["print(\"\"\"",106],["print(\"return \")",14],["print(",14],["print(\"\\t\\treturn checkFunctions(\")",19],["print(\"\\t\")",20],["print(\"\\n}\")",22],["print(\"\\t\\t\")",24],["print(eval(read(input), env))",31],["fun print(result: MalType) = pr_str(result, print_readably = true)",38],["print(HEADER)",40]],"useCount":403},{"word":"printStackTrace","context":[["e.printStackTrace()",875],["nfe.printStackTrace(System.err)",20],["t.printStackTrace()",66],["ex.printStackTrace()",59],["exception.printStackTrace()",56],["ioe.printStackTrace(System.err)",41],["it.printStackTrace()",26],["if (DEBUG) t.printStackTrace()",21],["error?.printStackTrace()",20],["e.printStackTrace();",18]],"useCount":1274},{"word":"println","context":[["println(\"\")",50],["println(\");\")",50],["println(it)",51],["println(\"\\t}\")",108],["System.out.println(\"AAA\");",56],["println(\"\"\"",57],["println(response)",58],["println(",41],["if (overrides) println(\"$indent@Override\")",118],["println()",236]],"useCount":1671},{"word":"private","context":[["private val log = LOG(javaClass)",45],["private val LOG = Logger()",35],["private val defaultInit: Any.() -> Unit = {}",32],["private val random = Random()",32],["private set",1000],["private companion object {",105],["private val log = LoggerFactory.getLogger(javaClass)",83],["private val tempDirManager = TemporaryDirectory()",67],["private val log = loggerOf(javaClass)",48],["private var subscription: Subscription? = null",39]],"useCount":5399},{"word":"process","context":[["import com.intellij.execution.process.ProcessHandler",51],["import com.intellij.execution.process.ProcessEvent",25],["override fun process(char: Int) {",24],["package nl.adaptivity.process.processModel",15],["override fun process(m: Matcher): String {",16],["package nl.adaptivity.process.engine",18],["process.waitFor()",21],["import com.intellij.execution.process.OSProcessHandler",21],["import nl.adaptivity.process.util.Identifiable",23],["import com.intellij.execution.process.ProcessAdapter",23]],"useCount":339},{"word":"processor","context":[["processor.onCurrentSchemeChanged(oldCurrentScheme)",19],["processor.onSchemeDeleted(scheme)",31],["processor.initScheme(readScheme)",28],["processor.onSchemeAdded(readScheme)",28],["processor.initScheme(scheme)",26],["val parent = processor.writeScheme(scheme)",26],["if (processor is SchemeExtensionProvider) {",26],["package io.michaelrocks.lightsaber.processor.commons",24],["val result = processor(file)",22],["package com.raizlabs.android.dbflow.processor.definition",21]],"useCount":548},{"word":"program","context":[["GLuint.IN(\"program\", \"\")",22],["GLuint.IN(\"program\", \"\"),",433],["* This program incorporates a modified version of Twidere.",264],["GLuint.IN(\"program\", uniProgram),",100],["GLuint.IN(\"program\", \"the program object to be queried\"),",38],["GLuint.IN(\"program\", \"the program object to be queried\"),",38],["GLuint.IN(\"program\", \"the program object\"),",32],["GLuint.IN(\"program\", \"the program object\"),",32],["program,",18],["*  This program incorporates a modified version of Twidere.",25]],"useCount":1040},{"word":"progress","context":[["}, IdeBundle.message(\"update.downloading.patch.progress.title\"), true, null)",13],["progress.visibility = View.GONE",33],["import com.intellij.openapi.progress.DumbProgressIndicator",33],["import com.intellij.openapi.progress.EmptyProgressIndicator",49],["override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {",22],["import com.intellij.openapi.progress.ProcessCanceledException",77],["import com.intellij.openapi.progress.Task",79],["import com.intellij.openapi.progress.ProgressManager",94],["import com.intellij.openapi.progress.ProgressIndicator",165],["progress.visibility = View.VISIBLE",16]],"useCount":581},{"word":"project","context":[["component.project.setProjectReference(this);",42],["}) { project ->",43],["project: Project,",45],["import com.intellij.openapi.project.DumbAware",48],["import com.github.czyzby.setup.data.project.Project",48],["import com.intellij.openapi.project.impl.ProjectImpl",54],["component.project.setProjectReference(this)",61],["project.saveStore()",71],["import com.intellij.openapi.project.ProjectManager",102],["import com.intellij.openapi.project.Project",896]],"useCount":3057},{"word":"promise","context":[["return promise",78],["promise.setResult(null)",12],["closeChannel(currentChannel, promise)",13],["val promise = AsyncPromise<SUB_RESULT>()",13],["promise.setResult(processHandler)",13],["promise.ready()",16],["return deferred.promise",105],["promise.catchError {",25],["promise",19],["for (promise in promises) {",18]],"useCount":324},{"word":"properties","context":[["/* properties */",48],["return properties",20],["import org.springframework.boot.context.properties.ConfigurationProperties",17],["You can add as many additional properties as you need.",17],["import kotlinfx.properties.*",15],["val properties = Properties()",38],["import kotlin.properties.Delegates",624],["import kotlin.properties.ReadOnlyProperty",60],["import kotlin.properties.ReadWriteProperty",85],["val properties = PropertiesComponent.getInstance()",29]],"useCount":1031},{"word":"property","context":[["* using the property name or the defined key in the builder as the key.",28],["get() = throw AnkoException(\"'android.widget.TextView.hintTextColor' property does not have a getter\")",20],["get() = throw AnkoException(\"'android.widget.TextView.enabled' property does not have a getter\")",20],["* @param A The type of argument the factory held by this property takes.",20],["import javafx.beans.property.SimpleIntegerProperty",21],["import javafx.beans.property.SimpleObjectProperty",23],["const..charASCII_p.IN(\"propertyName\", \"the name of the property, which needs to be valid only for the call\"),",27],["import javafx.beans.property.SimpleStringProperty",50],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28]],"useCount":837},{"word":"protected","context":[["\"  protected View onCreateView(@NonNull LayoutInflater inflater, @NonNull ViewGroup container) {\",",31],["protected open fun beforeElementSaved(element: Element) {",32],["protected open fun beforeElementLoaded(element: Element) {",32],["////            protected void useImpl(GameCharacter caster, GameCharacter target) {",32],["protected set",69],["protected Highlighted() {}",24],["protected open fun getMacroSubstitutor(fileSpec: String): TrackingPathMacroSubstitutor? = pathMacroSubstitutor",21],["protected override val header: Byte",21],["protected open val isUseXmlProlog: Boolean",20],["open inner class IcsStreamProvider(protected val projectId: String?) : StreamProvider {",20]],"useCount":699},{"word":"provided","context":[["*       documentation and/or other materials provided with the distribution.",420],["//    and/or other materials provided with the distribution.",126],["*    documentation and/or other materials provided with the distribution.",26],["3.3 V is provided",25],["* purpose with or without fee is hereby granted, provided that the above",17],["* The instance of the SharedPreferences are provided over",12],["* this fragment using the provided parameters.",12],["*    and/or other materials provided with the distribution.",11]],"useCount":649},{"word":"provider","context":[["private val provider: StreamProvider?,",26],["if (provider != null && provider.enabled) {",92],["import android.provider.Settings",43],["provider.processChildren(fileSpec, roamingType, { canRead(it) }) { name, input, readOnly ->",26],["if (!provider.isApplicable(providerPath, roamingType)) {",26],["provider.save()",25],["provider.write(SAMPLE_FILE_NAME, data)",24],["// stream provider always use LF separator",26],["import android.provider.BaseColumns",31],["if (provider != null && provider.enabled) {",92]],"useCount":820},{"word":"psi","context":[["import com.intellij.psi.util.PsiTreeUtil",150],["import org.rust.lang.core.psi.RustNamedElement",100],["package org.jetbrains.cabal.psi",104],["import org.rust.lang.core.psi.*",115],["import com.intellij.psi.stubs.IStubElementType",97],["import com.intellij.extapi.psi.ASTWrapperPsiElement",134],["import com.intellij.psi.tree.IElementType",145],["package org.rust.lang.core.psi.impl.mixin",149],["import com.intellij.psi.PsiFile",231],["import com.intellij.psi.PsiElement",660]],"useCount":4390},{"word":"public","context":[["|public class A {",43],["public fun <T: View> T.lparams(",385],["public void main() {",118],["public override fun onCreate(savedInstanceState: Bundle?): Unit {",42],["public override fun onCreate(savedInstanceState: Bundle?) {",55],["|   public void test() {",62],["public class VarArgTest {",64],["public class Test {",67],["public void test() {",77],["public class A {",101]],"useCount":3196},{"word":"publish","context":[["publish = true",24],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["import com.beust.kobalt.plugin.publish.bintray",16],["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20]],"useCount":1751},{"word":"put","context":[["readOnlyExternalizableSchemes.put(scheme.name, scheme)",26],["debugData.put(\"Fragments\", fragments)",45],["param.put(\"count\", count.toString())",22],["put(key, value)",26],["debugData.put(\"MaxLength\", maxLength)",27],["grassTransitions.put(",31],["put(0, \"0\")",34],["put(i, \"$i\")",34],["schemeToInfo.put(scheme, externalInfo)",37],["virtualFileTracker?.put(filePath, storage)",32]],"useCount":895},{"word":"query","context":[["import com.activeandroid.query.Select",27],["import org.mongodb.morphia.query.Criteria",20],["package mbuhot.eskotlin.query.term",21],["ALuint.IN(\"source\", \"the source to query\"),",22],["import mbuhot.eskotlin.query.should_render_as",24],["val list = query",27],["GLenum.IN(\"pname\", \"the parameter to query\"),",29],["ALenum.IN(\"param\", \"the parameter to query\"),",44],["query should_render_as \"\"\"",47],["val query = plugin.databaseManager.getNewQuery(connection) ?: return databaseError",60]],"useCount":840},{"word":"r","context":[["r, t ->",25],["references = { 1.r(); Pair(1, 2).r(); RationalNumber(1, 9) })",21],["r.close()",17],["if (r != null) {",18],["val r = Random()",20],["1.r(), Pair(1, 2).r()",21],["1.r(), Pair(1, 2).r()",21],["references = { 1.r(); Pair(1, 2).r(); RationalNumber(1, 9) })",21],["return r",51],["if (r == null) {",27]],"useCount":459},{"word":"randomUUID","context":[["import java.util.UUID.randomUUID",25],[".setId(UUID.randomUUID().toString())",107],["val testSuiteId = randomUUID()",11],["override val id: UUID = UUID.randomUUID(),",14],["val runId = randomUUID()",20],["id = UUID.randomUUID(),",114],["val subTestChild = TestingModel.Child.newBuilder().setId(UUID.randomUUID().toString()).setTestDisplay(\"second display\")",49],["testModel.id = UUID.randomUUID().toString()",73],["val database = File(UUID.randomUUID().toString().replace(\"-\", \"\"))",33]],"useCount":446},{"word":"read","context":[["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25],["LOG.error(\"Cannot read scheme from $resourceName\")",26],["LOG.error(\"Cannot read scheme from $resourceName\", e)",26],["* @param address The native address to read from.",27],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28],["throw UnsupportedOperationException(\"read-only\")",29],["print(eval(read(input), env))",31],["override fun read(json: Json, jsonData: JsonValue) {",33],["fun read(input: String?): MalType = read_str(input)",38],["LOG.error(\"Cannot read scheme $fileName\", e)",43]],"useCount":523},{"word":"reader","context":[["reader.endObject()",39],["reader.close()",70],["line = reader.readLine()",29],["while (reader.hasNext()) {",35],["else -> reader.skipValue()",32],["reader.beginArray()",18],["import eu.kanade.tachiyomi.ui.reader.ReaderActivity",20],["reader.beginObject()",24],["val reader = packet.reader",28],["val reader = packet.reader",28]],"useCount":458},{"word":"realm","context":[["import io.realm.RealmConfiguration",54],["Realm.getInstance(context).use { realm ->",228],["import io.realm.Realm",158],["val count = realm.where(TestEntity::class.java)",114],["val count = realm.where(RequiredTestEntity::class.java)",110],["import io.realm.RealmObject",82],["realm.close()",67],["import io.realm.annotations.PrimaryKey",65],["realm.commitTransaction()",49],["val realm = Realm.getDefaultInstance()",50]],"useCount":1261},{"word":"received","context":[["verify(a, times(1)).received(\"hello_1\")",47],["verify(a, times(0))!!.received(3)",24],["verify(a, times(1)).received(2)",71],["verify(a, times(1)).received(1)",61],["verify(a, times(1))!!.received(2)",46],["verify(a, times(1))!!.received(1)",40],["verify(a, times(0)).received(3)",40],["verify(a, times(1)).received(3)",34],["verify(a, times(1))!!.received(\"hello_1\")",30],["GLFWwindow.IN(\"window\", \"the window that received the event\"),",24]],"useCount":550},{"word":"reference","context":[["* See XML file by [ApplicationInfoEx.getUpdateUrls] for reference.",15],["* *Warning:* The created observable keeps a strong reference to {@code map}. Unsubscribe",15],["<li>The See Also section for other reference pages using this type.</li>",88],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* to free this reference.",675],["* Unsubscribe to free this reference.",88],["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["GLint.IN(\"reference\", \"\"),",24],["* *Warning:* The created observable keeps a strong reference to `recyclerView`.",17]],"useCount":1669},{"word":"references","context":[["val s: String = \"this variable cannot store null references\"",25],["references = { getPattern(); month })",17],["references = { date: MyDate, timeInterval: TimeInterval ->",17],["references = { date: MyDate -> date.toMillis().toDate()}",18],["references = { LazyProperty({ 42 }).lazy }",18],["references = { invokable: Invokable -> })",18],["references = { JavaCode1().task1(collection) })",19],["references = { PropertyExample() }",19],["references = { collection: Collection<Int> -> task1(collection); collection.joinToString() })",20],["references = { 1.r(); Pair(1, 2).r(); RationalNumber(1, 9) })",21]],"useCount":320},{"word":"reflect","context":[["import java.lang.reflect.Modifier",45],["import java.lang.reflect.InvocationTargetException",36],["import kotlin.reflect.*",36],["import kotlin.reflect.KClass",360],["import kotlin.reflect.KProperty",189],["import java.lang.reflect.Method",165],["import java.lang.reflect.Type",146],["import com.google.gson.reflect.TypeToken",59],["import java.lang.reflect.ParameterizedType",57],["import java.lang.reflect.Field",46]],"useCount":1473},{"word":"refresh","context":[["val vFile = refresh(file)",13],["refresh(file)",15],["override fun refresh() {",16],["private fun refresh() {",20],["project.baseDir.refresh(false, true)",24],["fun refresh() {",31],["refresh(top)",49],["refresh(root)",63],["refresh()",103],["fs.refresh(false)",14]],"useCount":361},{"word":"regex","context":[["import java.util.regex.*",12],["if (regex != null) {",13],["if (path.matches(regex)) {",13],["There is no escaping here, so raw strings are useful for writing regex patterns,",15],["import java.util.regex.Matcher",37],["import java.util.regex.Pattern",360]],"useCount":450},{"word":"registers","context":[["registers.flagN = true",26],["cpu : CPU, registers : Registers, gb : Gameboy ->",230],["registers.flagZ = registers.a.toInt() == 0",46],["registers.flagZ = registers.a.toInt() == 0",46],["registers.f = 0",44],["registers.flagN = false",43],["cpu: CPU, registers: Registers, gb: Gameboy ->",32],["val prevValue = registers.a",19],["registers.flagH = true",24],["registers.pc++",27]],"useCount":582},{"word":"registryLink","context":[["Native bindings to the $registryLink extension.",714],["When true, the $registryLink extension is supported.",249]],"useCount":963},{"word":"rei_m","context":[["import me.rei_m.hbfavmaterial.domain.entity.BookmarkEntity",38],["import me.rei_m.hbfavmaterial.domain.entity.EntryEntity",21],["package me.rei_m.hbfavmaterial.usecase",17],["import me.rei_m.hbfavmaterial.enum.EntryTypeFilter",17],["package me.rei_m.hbfavmaterial.usecase.impl",17],["import me.rei_m.hbfavmaterial.R",58],["package me.rei_m.hbfavmaterial.presentation.fragment",56],["import me.rei_m.hbfavmaterial.presentation.manager.ActivityNavigator",23],["import me.rei_m.hbfavmaterial.di.HasComponent",26],["package me.rei_m.hbfavmaterial.di",39]],"useCount":413},{"word":"remove","context":[["val oldInfo = schemeToInfo.remove(existing)",22],["it.remove()",27],["schemes.remove(i)",28],["filesToDelete.remove(\"${info.fileName}\")",33],["override fun remove() {",38],["iterator.remove()",96],["// remove created repository",20],["filesToDelete.remove(fileName)",26],["// we must not remove non-persistent (e.g. predefined) schemes, because we cannot load it (obviously)",26],["// remove empty directory only if some file was deleted - avoid check on each save",21]],"useCount":747},{"word":"render","context":[["uint32_t.IN(\"_numVertices\", \"number of vertices to render\")",20],["GLenum.IN(\"mode\", \"what kind of primitives to render\", PRIMITIVE_TYPES),",22],["uint32_t.IN(\"_startVertex\", \"first vertex to render\"),",20],["GLenum.IN(\"mode\", \"the kind of primitives to render\", PRIMITIVE_TYPES),",24],["override fun render() {",31],["<li>This command <b>must</b> only be called outside of a render pass instance</li>",34],["override fun render(delta: Float) {",37],["package org.jetbrains.android.anko.render",40],["<li>This command <b>must</b> only be called inside of a render pass instance</li>",20],["package mods.betterfoliage.client.render",17]],"useCount":396},{"word":"repository","context":[["repository.create()",21],["val diff = repository.computeIndexDiff()",48],["return repository",39],["import org.springframework.data.repository.PagingAndSortingRepository",34],["package yotkaz.thimman.backend.repository",23],["cd(repository)",30],["// used in settings repository plugin",29],["edit.apply(entry, repository)",27],["for (repository in readOnlySourcesManager.repositories) {",20],["import org.springframework.data.repository.CrudRepository",48]],"useCount":900},{"word":"repositoryManager","context":[["repositoryActive = repositoryManager.isRepositoryExists()",40],["updateResult = repositoryManager.resetToTheirs(indicator)",17],["updateResult = repositoryManager.pull(indicator)",17],["updateResult = repositoryManager.resetToMy(indicator, localRepositoryInitializer)",17],["repositoryManager.commit(indicator)",20],["icsManager.repositoryManager.deleteRepository()",20],["repositoryManager.commit()",33],["repositoryManager.push(indicator)",37],["val repositoryManager = icsManager.repositoryManager",62],["val repositoryManager = icsManager.repositoryManager",62]],"useCount":503},{"word":"request","context":[["val response = client.newCall(request).execute()",19],["val request = MockMvcRequestBuilders",22],["if (request.method() != HttpMethod.HEAD) {",33],["import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post",26],["override fun handleReq(request: Request, response: Response): Any {",24],["request: FullHttpRequest,",22],["val request = Request.Builder()",40],["val response = mockMvc.perform(request)",43],["mockMvc.perform(request)",46],["val request = server!!.takeRequest()",22]],"useCount":577},{"word":"requestCode","context":[["requestCode: Int,",15],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {",151],["super.onActivityResult(requestCode, resultCode, data)",126],["when (requestCode) {",80],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent) {",22],["override fun onRequestPermissionsResult(requestCode: Int,",11]],"useCount":405},{"word":"res","context":[["return res",193],["import android.content.res.Resources",98],["import android.content.res.ColorStateList",35],["res.errorCode = errorCode",23],["import android.content.res.AssetManager",19],["if (res != null) {",17],["import android.content.res.Configuration",111],["import android.content.res.TypedArray",38],["res",17],["var res = ArrayList<String>()",16]],"useCount":675},{"word":"reset","context":[["override fun reset() {",111],["fun reset() {",89],["reset()",70],["enumerator.reset()",40],["controller.reset()",19],["// \"RESET_TO_*\" will do \"reset hard\", so, probably, error will be gone, so, we can continue operation",17],["processHandler.reset()",16],["override fun reset(settings: IcsSettings) {",16],["fun reset()",15],["editor.reset(icsManager.settings.readOnlySources)",14]],"useCount":483},{"word":"resolve","context":[["val documentElement = JDOMXIncluder.resolve(JDOMUtil.loadDocument(url), url.toExternalForm()).detachRootElement()",19],["import org.rust.lang.core.resolve.scope.RustResolveScope",19],["deferred.resolve(createTuple())",21],["package org.rust.lang.core.resolve.ref",33],["assertThat(dir.resolve(\"main.xml\")).hasContent(generateData(\"test\"))",16],["import org.jetbrains.kotlin.idea.caches.resolve.analyze",15],["assertThat(dir.resolve(\"bar.xml\")).hasContent(generateData(\"bar\"))",16],["import org.rust.lang.core.resolve.ref.RustReference",50],["package org.rust.lang.core.resolve",45],["import org.rust.lang.core.resolve.RustResolveEngine",36]],"useCount":381},{"word":"response","context":[["override fun handleReq(request: Request, response: Response): Any {",24],["println(response)",58],["if (response.isSuccessful) {",29],["val document = response.asJsoup()",27],["val response = mockMvc.perform(request)",43],[".map { response ->",31],["* @param response the response from the site.",30],["* @param response the response from the site.",30],["return response",64],[".andReturn().response.contentAsString",96]],"useCount":693},{"word":"result","context":[["var result: DSLResultStub? = null",289],[".andExpect(jsonPath(\"$.result\", `is`(WebserviceResult.OK.value)))",68],["result.add(storage)",81],["return result;",54],["if (result != null) {",143],["result",170],["return result",1688],["return result!!",328],["result = DSLResultStub.fromCurrentView()",289],["if (result == null) {",192]],"useCount":5784},{"word":"resultCode","context":[["if (resultCode == RESULT_OK) {",14],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent) {",22],["if (resultCode == Activity.RESULT_OK) {",44],["super.onActivityResult(requestCode, resultCode, data)",126],["override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {",151]],"useCount":357},{"word":"ret","context":[["var ret = false",15],["ret = true",16],["ret",18],["Log.e(\"RootAPI\", \"result: ${ret.result}, error: ${ret.error}\")",23],["Log.e(\"RootAPI\", \"result: ${ret.result}, error: ${ret.error}\")",23],["return ret;",35],["return ret",242],["var ret: ArrayList<ElementType?> = ArrayList<ElementType?>()",12],["ret.add(item)",15]],"useCount":399},{"word":"retrofit","context":[["import retrofit.RxJavaCallAdapterFactory",13],["import retrofit.http.GET",36],["import retrofit.RetrofitError",36],["import retrofit.Callback",43],["import retrofit.client.Response",26],["val retrofit = Retrofit.Builder()",23],["import retrofit.http.Query",20],["import retrofit.Response",15],["import retrofit.Retrofit",29],["import retrofit.RestAdapter",31]],"useCount":307},{"word":"retrofit2","context":[["import retrofit2.converter.gson.GsonConverterFactory",59],["import retrofit2.Call",78],["import retrofit2.http.GET",90],["import retrofit2.Retrofit",121],["import retrofit2.http.Query",60],["import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory",53],["import retrofit2.Response",51],["import retrofit2.http.Path",41],["import retrofit2.http.POST",30],["import retrofit2.http.Body",22]],"useCount":696},{"word":"return","context":[["return view",314],["return result!!",328],["return super.onOptionsItemSelected(item)",289],["return 0",409],["return this",5395],["return true",4657],["return",4483],["return null",3752],["return false",3727],["return result",1688]],"useCount":43305},{"word":"returnDoc","context":[["returnDoc = \"handle to frame buffer object\"",20],["returnDoc = CallbackReturnDoc,",24],["returnDoc = \"the previously set callback, or $NULL if no callback was set\",",27],["returnDoc = \"1 on success, 0 on failure\"",56],["returnDoc =",404],["returnDoc = \"a non-zero error value on failure and 0 on success\"",14],["returnDoc = \"number of draw calls\"",16],["returnDoc = \"a handle to the image\"",17]],"useCount":578},{"word":"returns","context":[[".returns(TypeName.VOID)",15],["$SUCCESS if the function is executed successfully. Otherwise, it returns one of the following errors:",139],["<dt>On failure, this command returns</dt>",148],["<dt>On success, this command returns</dt>",148]],"useCount":450},{"word":"roamingType","context":[["getMap(roamingType).put(fileSpec, String(content, 0, size, CharsetToolkit.UTF8_CHARSET))",17],["override fun delete(fileSpec: String, roamingType: RoamingType) {",65],["roamingType: RoamingType,",35],["override fun write(fileSpec: String, content: ByteArray, size: Int, roamingType: RoamingType) {",28],["provider.processChildren(fileSpec, roamingType, { canRead(it) }) { name, input, readOnly ->",26],["if (!provider.isApplicable(providerPath, roamingType)) {",26],["override fun read(fileSpec: String, roamingType: RoamingType): InputStream? {",23],["provider.delete(spec, roamingType)",19],["if (provider.isApplicable(spec, roamingType)) {",19],["data.put(roamingType, map)",17]],"useCount":603},{"word":"robolectric","context":[["import org.robolectric.RobolectricTestRunner",77],["import org.robolectric.RuntimeEnvironment",52],["import org.robolectric.RobolectricGradleTestRunner",88],["import org.robolectric.annotation.Config",118],["import org.robolectric.Robolectric",36],["import common.robolectric",25],["import org.robolectric.*",23],["makeBrite(robolectric()).use { brite ->",18],["import org.robolectric.shadows.support.v4.SupportFragmentTestUtil",12]],"useCount":449},{"word":"root","context":[["if (root == null) {",26],["root(\"root\") {",30],["return root",27],["fileToDelete = root.findOrCreateChildData(this@TestManager, normalizedFilePath)",24],["root(\"root\") {",30],["val root = tempDir.newFolder(\"root\")",56],["val root = tempDir.newFolder(\"root\")",56],["watch(root)",63],["refresh(root)",63],["// store refreshes root directory, so, we don't need to use refreshAndFindFile",21]],"useCount":617},{"word":"row","context":[["for (row in table.rows) {",22],["fun getCellColor(index: Int, row: Int) = if ((index + row) %2 == 0) \"#dce4ff\" else \"#eff2ff\"",13],["row {",143],["import net.yested.bootstrap.row",38],["table.row()",31],["this.mainTable!!.row()",24],["throw error(e, table.headers.values(), row.values())",22],["return row",15],["fun getCellColor(index: Int, row: Int) = if ((index + row) %2 == 0) \"#dce4ff\" else \"#eff2ff\"",13],["for (row in rows) {",14]],"useCount":346},{"word":"rs","context":[["import javax.ws.rs.core.Response",70],["import javax.ws.rs.ext.ExceptionMapper",29],["import javax.ws.rs.*",29],["while (rs.next()) {",38],["import javax.ws.rs.Consumes",38],["import javax.ws.rs.GET",47],["import javax.ws.rs.Produces",54],["import javax.ws.rs.Path",67],["import javax.ws.rs.core.MediaType",87],["rs.close()",27]],"useCount":558},{"word":"ru","context":[["import ru.dageev.compiler.domain.type.ClassType",19],["import ru.dageev.compiler.bytecodegeneration.statement.StatementGenerator",20],["import ru.dageev.compiler.grammar.ElaginBaseVisitor",23],["import ru.dageev.compiler.grammar.ElaginParser",26],["import ru.dageev.compiler.domain.ClassesContext",26],["import ru.redenergy.report.common.network.NetworkHandler",19],["import ru.dageev.compiler.parser.CompilationException",18],["import ru.redenergy.report.client.QReportClient",17],["import ru.dageev.compiler.domain.type.Type",17],["import ru.dageev.compiler.domain.scope.Scope",29]],"useCount":348},{"word":"run","context":[["override fun run(bot: Bot, ctx: Context, settings: Settings) {",52],["SpringApplication.run(Application::class.java, *args)",26],["public override fun run():Unit {",31],["runRepository.save(run)",34],["@Suspendable override fun run(): Boolean {",40],["fun run() {",53],["override fun run(indicator: ProgressIndicator) {",68],["run {",251],["override fun run() {",397],["import ch.yvu.teststore.run.RunRepository",19]],"useCount":1208},{"word":"runFunctionalTest","context":[["runFunctionalTest(\"ServicesTest.kt\", AnkoFile.SERVICES, version) {",41],["runFunctionalTest(\"InterfaceWorkaroundsTest.kt\", AnkoFile.INTERFACE_WORKAROUNDS_JAVA, version) {",28],["runFunctionalTest(\"SimpleListenerTest.kt\", AnkoFile.LISTENERS, version) {",41],["runFunctionalTest(\"ComplexListenerClassTest.kt\", AnkoFile.LISTENERS, version) {",41],["runFunctionalTest(\"PropertyTest.kt\", AnkoFile.PROPERTIES, version) {",41],["runFunctionalTest(\"SqlParserHelpersTest.kt\", AnkoFile.SQL_PARSER_HELPERS, version) {",41],["runFunctionalTest(\"ViewTest.kt\", AnkoFile.VIEWS, version) {",41],["runFunctionalTest(\"LayoutsTest.kt\", AnkoFile.LAYOUTS, version) {",41],["runFunctionalTest(\"ComplexListenerSetterTest.kt\", AnkoFile.LISTENERS, version) {",41]],"useCount":356},{"word":"runWriteAction","context":[["runWriteAction {",163],["import com.intellij.openapi.application.runWriteAction",135],["ApplicationManager.getApplication().runWriteAction {",16],["filePath = runWriteAction { projectCreator(tempDirManager.newVirtualDirectory()) }",12],["runWriteAction { virtualFile.delete(requestor) }",12],["import org.rust.ide.utils.runWriteAction",11]],"useCount":349},{"word":"runner","context":[["import android.support.test.runner.AndroidJUnit4",155],["import org.junit.runner.RunWith",867],["import org.junit.runner.Description",73],["package org.mikeneck.kuickcheck.runner",15],["import org.junit.runner.notification.RunNotifier",13]],"useCount":1123},{"word":"runners","context":[["import org.junit.runners.Parameterized",144],["import org.mockito.runners.MockitoJUnitRunner",117],["import org.junit.runners.model.Statement",44],["import org.junit.runners.JUnit4",36],["import org.junit.runners.Suite",22],["import com.intellij.execution.runners.ExecutionEnvironment",17],["import org.junit.runners.Parameterized.Parameters",16]],"useCount":396},{"word":"rust","context":[["import org.rust.lang.core.psi.RustNamedElement",100],["import org.rust.lang.core.psi.*",115],["package org.rust.lang.core.psi.impl.mixin",149],["import org.rust.lang.RustTestCaseBase",95],["import org.rust.lang.core.psi.util.parentOfType",81],["import org.rust.ide.icons.RustIcons",69],["import org.rust.lang.RustLanguage",64],["import org.rust.lang.core.stubs.RustItemStub",60],["package org.rust.lang.core.psi",58],["package org.rust.ide.inspections",64]],"useCount":3014},{"word":"rx","context":[["import rx.observers.TestSubscriber",110],["import rx.Single",127],["import rx.schedulers.Schedulers",443],["import rx.android.schedulers.AndroidSchedulers",384],["import rx.Subscription",297],["import rx.functions.Action1",133],["import rx.subjects.PublishSubject",140],["import rx.Observable",1576],["import rx.Subscriber",160],["import rx.subscriptions.CompositeSubscription",175]],"useCount":4413},{"word":"s","context":[["override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["return when (s) {",70],["return s",82],["nk_str_p.IN(\"s\", \"\"),",57],["override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {",40],["override fun afterTextChanged(s: Editable) {",37],["override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {",30],["override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {",29]],"useCount":1007},{"word":"save","context":[["runRepository.save(run)",34],["save()",62],["config.save()",33],["override fun save() {",77],["manager.save()",90],["schemeManager.save()",166],["schemesManager.save()",28],["provider.save()",25],["fun save(errors: MutableList<Throwable>) {",26],["fun save() {",26]],"useCount":926},{"word":"savedInstanceState","context":[["override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {",162],["override fun onActivityCreated(savedInstanceState: Bundle?) {",165],["super.onActivityCreated(savedInstanceState)",171],["override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {",192],["override fun onViewCreated(view: View, savedInstanceState: Bundle?) {",113],["override fun onViewCreated(view: View?, savedInstanceState: Bundle?) {",156],["savedInstanceState: Bundle?): View? {",106],["super.onViewCreated(view, savedInstanceState)",255],["override fun onCreate(savedInstanceState: Bundle?) {",1642],["super.onCreate(savedInstanceState)",1768]],"useCount":5490},{"word":"sb","context":[["val sb = SearchBuilder()",84],["sb.append(\"}\")",19],["return sb.toString()",186],["val sb = StringBuilder()",202],["val terms = sb.build()",40],["sb.append(c)",29],["sb.append(\", \")",28],["sb.append(\"\\n\")",21],["sb.append(\"{\")",15],["sb.append(element)",18]],"useCount":692},{"word":"scene","context":[["import javafx.scene.layout.VBox",35],["import javafx.scene.control.Label",32],["import javafx.scene.image.Image",29],["stage.scene = scene",27],["import javafx.scene.control.Button",36],["import javafx.scene.paint.Color",41],["import javafx.scene.control.TextField",44],["import javafx.scene.Scene",75],["import javafx.scene.Parent",50],["import javafx.scene.Node",50]],"useCount":775},{"word":"scene2d","context":[["import com.badlogic.gdx.scenes.scene2d.InputEvent",52],["import com.badlogic.gdx.scenes.scene2d.Actor",39],["import com.badlogic.gdx.scenes.scene2d.ui.Image",24],["import com.badlogic.gdx.scenes.scene2d.Stage",65],["import com.badlogic.gdx.scenes.scene2d.ui.Skin",25],["import com.badlogic.gdx.scenes.scene2d.ui.Label",26],["import com.badlogic.gdx.scenes.scene2d.utils.ClickListener",31],["import com.badlogic.gdx.scenes.scene2d.ui.*",18],["import com.badlogic.gdx.scenes.scene2d.actions.Actions",18],["import com.badlogic.gdx.scenes.scene2d.ui.Table",25]],"useCount":423},{"word":"scenes","context":[["import com.badlogic.gdx.scenes.scene2d.ui.Table",25],["import com.badlogic.gdx.scenes.scene2d.Actor",39],["import com.badlogic.gdx.scenes.scene2d.InputEvent",52],["import com.badlogic.gdx.scenes.scene2d.Stage",65],["import com.badlogic.gdx.scenes.scene2d.utils.ClickListener",31],["import com.badlogic.gdx.scenes.scene2d.ui.Label",26],["import com.badlogic.gdx.scenes.scene2d.ui.Skin",25],["import com.badlogic.gdx.scenes.scene2d.ui.Image",24],["import com.badlogic.gdx.scenes.scene2d.actions.Actions",18],["import com.badlogic.gdx.scenes.scene2d.ui.*",18]],"useCount":423},{"word":"schedulers","context":[[".subscribeOn(schedulers.io)",14],["import rx.schedulers.Schedulers",443],["import rx.android.schedulers.AndroidSchedulers",384],["import rx.schedulers.TestScheduler",24],[".observeOn(schedulers.main)",18]],"useCount":883},{"word":"scheme","context":[["val info = schemeToInfo.get(scheme)",35],["for (scheme in schemes) {",96],["schemes.add(scheme)",79],["return scheme",56],["scheme.data = \"newTrue\"",45],["val scheme = TestScheme(\"s1\")",45],["LOG.error(\"Cannot read scheme $fileName\", e)",43],["schemeManager.setSchemes(listOf(scheme))",42],["schemeToInfo.put(scheme, externalInfo)",37],["currentScheme = scheme",35]],"useCount":2401},{"word":"schemeManager","context":[["schemes = schemeManager.getAllSchemes()",16],["schemeManager.save()",166],["schemeManager.loadBundledScheme(bundledPath, this, converter)",26],["schemeManager.setSchemes(emptyList())",38],["var schemeManager = createSchemeManager(dir)",15],["schemeManager.setSchemes(listOf(customScheme))",15],["val schemeManager = createSchemeManager(dir)",53],["schemeManager.setSchemes(listOf(scheme))",42],["schemeManager.loadSchemes()",71],["assertThat(schemeManager.allSchemes).isEmpty()",17]],"useCount":512},{"word":"schemeToInfo","context":[["var externalInfo: ExternalInfo? = schemeToInfo.get(scheme)",22],["val oldInfo = schemeToInfo.remove(existing)",22],["if (schemeToInfo.isEmpty()) {",19],["get() = schemeToInfo.get(this)?.fileNameWithoutExtension",18],["if (oldInfo != null && scheme is ExternalizableScheme && !schemeToInfo.containsKey(scheme)) {",15],["schemeToInfo.put(scheme, externalInfo)",37],["schemeToInfo.clear()",26],["val info = schemeToInfo.get(scheme)",35],["private val schemeToInfo = THashMap<E, ExternalInfo>(ContainerUtil.identityStrategy())",15],["val info = schemeToInfo.get(existingScheme)",24]],"useCount":352},{"word":"schemes","context":[["val iterator = schemes.iterator()",27],["for (scheme in schemes) {",96],["private fun collectExistingNames(schemes: Collection<T>): Collection<String> {",26],["// we must not remove non-persistent (e.g. predefined) schemes, because we cannot load it (obviously)",26],["schemes.addAll(newSchemes)",26],["assertThat(schemes.size(), equalTo(1))",26],["schemes.remove(i)",28],["for (i in schemes.indices.reversed()) {",31],["schemes.clear()",52],["schemes.add(scheme)",79]],"useCount":943},{"word":"scraper","context":[["import ink.abb.pogo.scraper.Bot",53],["package ink.abb.pogo.scraper.tasks",52],["import ink.abb.pogo.scraper.util.Log",80],["import ink.abb.pogo.scraper.Task",49],["package ink.abb.pogo.scraper",26],["import ink.abb.pogo.scraper.util.pokemon.getIvPercentage",24],["import ink.abb.pogo.scraper.util.cachedInventories",20],["package ink.abb.pogo.scraper.util.data",16],["import ink.abb.pogo.scraper.Settings",66],["import ink.abb.pogo.scraper.Context",62]],"useCount":497},{"word":"second","context":[["val second: V2,",18],["assert(second != null)",15],["doLoadSaveTest(\"options1\", \"1->first;2->second\")",15],["checkSchemes(\"2->second\")",15],["val subTestChild = TestingModel.Child.newBuilder().setId(UUID.randomUUID().toString()).setTestDisplay(\"second display\")",49],["val second = manager.findSchemeByName(\"second\")",15],["val second = manager.findSchemeByName(\"second\")",15],["checkSchemes(\"2->second;first->first\")",15],["checkSchemes(\"2->second;renamed->renamed\")",15],["val second: T2",14]],"useCount":366},{"word":"security","context":[["import java.security.NoSuchAlgorithmException",23],["import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",17],["import java.security.MessageDigest",68],["import java.security.PublicKey",19],["import net.devrieze.util.security.SecureObject",18],["import org.springframework.security.core.annotation.AuthenticationPrincipal",16],["import org.springframework.security.access.prepost.PreAuthorize",24],["import java.security.Principal",38],["import java.security.SecureRandom",50],["import org.springframework.security.core.userdetails.UserDetails",16]],"useCount":510},{"word":"selectors","context":[["import org.apache.tools.ant.types.selectors.SizeSelector",21],["import org.apache.tools.ant.types.selectors.DifferentSelector",21],["import org.apache.tools.ant.types.selectors.TypeSelector",21],["import org.apache.tools.ant.types.selectors.FilenameSelector",21],["import org.apache.tools.ant.types.selectors.DateSelector",21],["import org.apache.tools.ant.types.selectors.ContainsSelector",21],["import org.apache.tools.ant.types.selectors.DependSelector",21],["import org.apache.tools.ant.types.selectors.ContainsRegexpSelector",21],["import org.apache.tools.ant.types.selectors.DepthSelector",21],["import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector",22]],"useCount":420},{"word":"sell","context":[["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179]],"useCount":1711},{"word":"seq","context":[["val params = binds.seq().filterIsInstance<MalSymbol>()",28],["return seq.nth(1)",21],["val seq = SafeCharSequenceRange(rawSeq, start, end)",18],["var first = seq.first()",21],["val seq = ast as ISeq",21],["env = Env(firstEval.env, firstEval.params, evaluated.rest().seq())",28],["return MalFnFunction(body, params, env, { s: ISeq -> eval(body, Env(env, params, s.seq())) })",28],["ast = ast.seq().last()",28],["private fun is_pair(ast: MalType): Boolean = ast is ISeq && ast.seq().any()",21],["val it = bindings.seq().iterator()",34]],"useCount":417},{"word":"server","context":[["server.listen(\"127.0.0.1:6767\").unwrap();",30],["let mut server = Nickel::new();",40],["server.start()",44],["server!!.enqueue(MockResponse().setResponseCode(200))",24],["val request = server!!.takeRequest()",22],["import com.vaadin.server.*",21],["val recordedRequest = server!!.takeRequest()",73],["Commandspy - A Minecraft server plugin to facilitate real-time usage of commands, and sign-changes",49],["server.get(\"**\", hello_world);",50],["server!!.enqueue(MockResponse().setResponseCode(200).setBody(responseBody))",66]],"useCount":621},{"word":"service","context":[["import com.intellij.openapi.components.service",30],["import com.seventh_root.elysium.core.service.ServiceProvider",31],["import com.mvcoding.expensius.service.AppUserService",26],["package at.cpickl.gadsu.service",22],["// if not service, so, component manager will check it later for all components",19],["import at.cpickl.gadsu.service.LOG",37],["service",18],["import at.cpickl.gadsu.service.Logged",18],["import at.cpickl.gadsu.service.Clock",17],["if (componentNameIfStateExists != null && service) {",16]],"useCount":385},{"word":"services","context":[["import org.roylance.yaorm.services.proto.EntityProtoService",16],["package com.github.K0zka.kerub.services.impl",69],["import com.o3dr.services.android.lib.drone.attribute.AttributeEvent",26],["import com.o3dr.services.android.lib.drone.attribute.AttributeType",26],["import org.roylance.yaorm.services.jdbc.JDBCGranularDatabaseProtoService",19],["import com.github.K0zka.kerub.services.LoginService",18],["import backend.services.ConfigurationService",16],["package y2k.joyreactor.services.requests",26],["import org.bubblecloud.pepper.modules.security.services.ContextService",15],["package com.github.K0zka.kerub.services",43]],"useCount":443},{"word":"servlet","context":[["import javax.servlet.http.HttpServletResponse",126],["import javax.servlet.http.HttpServletRequest",139],["import javax.servlet.ServletContext",29],["import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post",26],["import org.springframework.test.web.servlet.request.MockMvcRequestBuilders",12],["import org.springframework.web.servlet.config.annotation.EnableWebMvc",14],["import javax.servlet.http.HttpServlet",20],["import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*",23],["import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter",23],["import javax.servlet.http.Cookie",26]],"useCount":484},{"word":"session","context":[["session.transaction {",31],["session",24],["session,",128],["return session",37],["if (session == null) {",24],["override fun decode(input: String, startIndexInBytes: Int, session: DecodeSession): DecodedData {",24],["override fun decode(input: String, startIndexInBytes: Int, session: DecodeSession): List<DecodedData> {",22],["for (session in externalizationSessions) {",21],["if (session != null) {",30],["import org.apache.sshd.client.session.ClientSession",117]],"useCount":746},{"word":"set","context":[["set(v) = setText(v)",31],["private set",1000],["internal set",95],["protected set",69],["set(v) = setGravity(v)",68],["@set:Inject",64],["set(value) {",1113],["@Inject set",51],["GLenum.IN(\"pname\", \"the parameter to set\"),",40],["set(v) = setEnabled(v)",37]],"useCount":4184},{"word":"setContentView","context":[["setContentView(R.layout.activity_login)",33],["setContentView(layout.viewGroup)",76],["setContentView(R.layout.activity_main)",338],["setContentView(R.layout.activity_detail)",11],["setContentView(R.layout.main)",13],["setContentView(R.layout.activity_about)",18],["setContentView(R.layout.activity_settings)",21]],"useCount":510},{"word":"setLayoutParams","context":[["this@layoutParams.setLayoutParams(layoutParams)",474],["this@layoutParams.setLayoutParams(lp)",139]],"useCount":613},{"word":"setSupportActionBar","context":[["setSupportActionBar(toolbar)",295],["setSupportActionBar(mToolbar)",16],["setSupportActionBar(findViewById(R.id.toolbar) as Toolbar)",12],["setSupportActionBar(toolBar)",13]],"useCount":336},{"word":"setText","context":[["setText(text)",307],["view.setText(text)",60],["set(v) = setText(v)",31]],"useCount":398},{"word":"setUp","context":[["@Before fun setUp() {",171],["public override fun setUp() {",20],["projectFixture!!.setUp()",15],["override fun setUp() {",209],["super.setUp()",217],["fun setUp() {",390]],"useCount":1022},{"word":"settings","context":[["return settings",26],["val settings = ConfigSetSettingsImpl(pathProvider)",25],["val settings = UserSettingsImpl(coreSettings)",21],["import org.rust.cargo.project.settings.toolchain",20],["}, settings.commitDelay)",20],["val settings: IcsSettings",20],["// used in settings repository plugin",29],["val settings = EditorSettingsExternalizable.getInstance()",31],["val searcher = Searcher(settings)",42],["override fun run(bot: Bot, ctx: Context, settings: Settings) {",52]],"useCount":628},{"word":"settingsRepository","context":[["import org.jetbrains.settingsRepository.git.cloneBare",25],["import org.jetbrains.settingsRepository.*",29],["import org.jetbrains.settingsRepository.git.processChildren",25],["import org.jetbrains.settingsRepository.git.GitRepositoryService",20],["import org.jetbrains.settingsRepository.git.commit",31],["import org.jetbrains.settingsRepository.git.GitRepositoryManager",32],["import org.jetbrains.settingsRepository.LOG",36],["package org.jetbrains.settingsRepository.test",65],["package org.jetbrains.settingsRepository.git",75],["package org.jetbrains.settingsRepository",159]],"useCount":644},{"word":"setup","context":[["super.setup()",44],["import io.dropwizard.setup.Bootstrap",17],["import com.github.czyzby.setup.data.templates.Template",17],["setup()",19],["import com.github.czyzby.setup.views.ProjectTemplate",20],["override fun setup() {",35],["@Before fun setup() {",43],["import com.github.czyzby.setup.data.project.Project",48],["fun setup() {",140],["setup(\"\"\"",215]],"useCount":706},{"word":"seventh_root","context":[["import com.seventh_root.elysium.players.bukkit.player.ElysiumPlayerProvider",43],["import com.seventh_root.elysium.characters.bukkit.ElysiumCharactersBukkit",31],["import com.seventh_root.elysium.core.service.ServiceProvider",31],["import com.seventh_root.elysium.characters.bukkit.character.ElysiumCharacterProvider",35],["import com.seventh_root.elysium.characters.bukkit.character.ElysiumCharacter",35],["import com.seventh_root.elysium.chat.bukkit.ElysiumChatBukkit",42],["import com.seventh_root.elysium.players.bukkit.player.ElysiumPlayer",31],["import com.seventh_root.elysium.chat.bukkit.chatchannel.ElysiumChatChannelProvider",24],["import com.seventh_root.elysium.core.database.Database",22],["import com.seventh_root.elysium.economy.bukkit.currency.ElysiumCurrencyProvider",21]],"useCount":475},{"word":"should","context":[["it(\"should pass\") {",110],["it(\"should fail\") {",108],["* unspecified and should only be used as notification.",79],["it(\"should be correct\") {",24],["// 1.oldExt is loading after 1.newExt - we should delete 1.oldExt",22],["// should not happen",17],["it(\"should format the output\") {",16],["assertEquals(1, success, \"success should be called once\")",16],["it(\"should be ${it.expected}\", {",15],["* Schemes can be lazy loaded, so, client should be able to set current scheme by name, not only by instance.",15]],"useCount":661},{"word":"show","context":[["stage.show()",24],["show()",39],[".show()",236],["dialog.show()",87],["}.show()",68],["override fun show() {",49],["Toast.LENGTH_LONG).show()",41],["Snackbar.LENGTH_LONG).show()",17],["dialogs.show(",18],["popupMenu.show()",19]],"useCount":760},{"word":"showsrage","context":[["package com.mgaetan89.showsrage.extension",27],["import com.mgaetan89.showsrage.R",89],["package com.mgaetan89.showsrage.fragment",70],["package com.mgaetan89.showsrage.model",59],["import com.mgaetan89.showsrage.network.SickRageApi",48],["import com.mgaetan89.showsrage.TestActivity",34],["import com.mgaetan89.showsrage.Constants",30],["package com.mgaetan89.showsrage.adapter",26],["package com.mgaetan89.showsrage.helper",23],["import com.mgaetan89.showsrage.model.Show",20]],"useCount":504},{"word":"since","context":[["* @since 1.0",146],["since = \"version 3.0\"",119],["* @since 1.1.0",20],["* @since v1.0",24],["* @since 2015/10/08",30],["since = \"version 3.1\"",31],["since = \"version 3.2\"",49],["* @since 1.0.0",53],["* @since 0.1",56],["since = \"version 1.0\"",75]],"useCount":799},{"word":"size","context":[["size += WireFormat.getInt32SizeNoTag(arraySize)",60],["size += arraySize",60],["if (args.size > 0) {",48],["size += WireFormat.getVarint32Size(size) + WireFormat.getTagSize(fieldNumber, WireType.LENGTH_DELIMITED)",46],["for (i in 0..size - 1) {",71],["override val size: Int",72],["var size = 0",107],["return arrayOfNulls(size)",76],["nk_vec2.IN(\"size\", \"\")",81],["return size",109]],"useCount":2480},{"word":"sleep","context":[["Thread.sleep(1000)",81],["Thread.sleep(2)",14],["Thread.sleep(100)",47],["Thread.sleep(2000)",36],["Thread.sleep(50)",35],["Thread.sleep(500)",28],["Thread.sleep(10)",26],["Thread.sleep(1)",21],["Thread.sleep(5000)",19],["Thread.sleep(10000)",16]],"useCount":345},{"word":"slf4j","context":[["import org.slf4j.Logger",218],["import org.slf4j.LoggerFactory",640]],"useCount":858},{"word":"so","context":[["*      furnished to do so, subject to the following conditions:",242],["// scheme could be changed - so, hashcode will be changed - we must use identity hashing strategy",26],["// scheme from file with old extension, so, we must ignore it",26],["// so, bundled scheme is shadowed",26],["// file will be overwritten, so, we don't need to delete it",26],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24],["// must be performed only after initial pull, so, local changes will be relative to remote files",27],["// automatically handle clicks on the Home/Up button, so long",80],["furnished to do so, subject to the following conditions:",270],["* furnished to do so, subject to the following conditions:",1193]],"useCount":2217},{"word":"source","context":[["val layoutParams = FrameLayout.LayoutParams(source!!)",100],["* Redistribution and use in source and binary forms, with or without",450],["val layoutParams = android.widget.FrameLayout.LayoutParams(source!!)",242],["// Redistribution and use in source and binary forms, with or without",126],["source: android.view.ViewGroup.MarginLayoutParams?,",106],["source: android.view.ViewGroup.LayoutParams?,",100],["import eu.kanade.tachiyomi.data.source.SourceManager",50],["source: ViewGroup.LayoutParams?,",64],["source: ViewGroup.MarginLayoutParams?,",67],["import eu.kanade.tachiyomi.data.source.model.Page",79]],"useCount":2176},{"word":"sourceConnection","context":[["sourceConnection,",152],["val sourceConnection = MySQLConnectionSourceFactory(",82],["val sourceConnection = PostgresConnectionSourceFactory(",37],["val mySqlGeneratorService = MySQLGeneratorService(sourceConnection.schema)",28],["val mySqlGeneratorService = MySQLGeneratorService(schemaName = sourceConnection.schema, useMyISAM = true)",27],["val sourceConnection = SQLiteConnectionSourceFactory(database.absolutePath)",27]],"useCount":353},{"word":"spek","context":[["import org.jetbrains.spek.api.dsl.it",23],["package org.jetbrains.spek.samples",20],["import org.jetbrains.spek.api.dsl.on",17],["import org.jetbrains.spek.api.dsl.given",15],["import org.jetbrains.spek.meta.Experimental",15],["import org.jetbrains.spek.api.Spek",270],["import org.jetbrains.spek.api.*",49],["package org.jetbrains.spek.api",35],["import org.jetbrains.spek.api.shouldEqual",21],["package org.jetbrains.spek.console",28]],"useCount":518},{"word":"springframework","context":[["import org.springframework.stereotype.Component",138],["import org.springframework.beans.factory.annotation.Autowired",389],["import org.springframework.web.bind.annotation.RequestMapping",136],["import org.springframework.stereotype.Service",120],["import org.springframework.context.annotation.Configuration",117],["import org.springframework.context.annotation.Bean",98],["import org.springframework.web.bind.annotation.RestController",88],["import org.springframework.boot.SpringApplication",78],["import org.springframework.test.context.junit4.SpringJUnit4ClassRunner",75],["import org.springframework.transaction.annotation.Transactional",64]],"useCount":2873},{"word":"sql","context":[["import java.sql.Connection",128],["import java.sql.SQLException",123],["import javax.sql.DataSource",87],["import java.sql.ResultSet",57],["import java.sql.Timestamp",40],["import java.sql.PreparedStatement",44],["import java.sql.*",35],["import java.sql.DriverManager",33],["assertThat(statement.sql).isEqualTo(expectedSql)",30],["import java.sql.Statement",28]],"useCount":790},{"word":"sqlite","context":[["import com.pushtorefresh.storio.sqlite.queries.UpdateQuery",15],["import android.database.sqlite.SQLiteException",21],["import android.database.sqlite.SQLiteOpenHelper",66],["package com.jayrave.falkon.sqlBuilders.sqlite",17],["import com.pushtorefresh.storio.sqlite.queries.DeleteQuery",14],["package com.jayrave.falkon.engine.android.sqlite",14],["import com.pushtorefresh.storio.sqlite.operations.get.DefaultGetResolver",11],["import android.database.sqlite.SQLiteDatabase",188]],"useCount":346},{"word":"squareup","context":[["import com.squareup.javapoet.ClassName",47],["import com.squareup.moshi.Moshi",40],["import com.squareup.sqldelight.SqliteParser",44],["import com.squareup.okhttp.OkHttpClient",40],["import com.squareup.okhttp.Request",37],["import com.squareup.sqlbrite.BriteDatabase",41],["import com.squareup.otto.Subscribe",41],["import com.squareup.otto.Bus",43],["import com.squareup.picasso.Picasso",159],["import com.squareup.okhttp.Response",67]],"useCount":1061},{"word":"src","context":[["src[\"target\"],",42],["\"DSA version of ${src.javaDocLink}.\",",148],["\"Robust version of ${src.javaDocLink}\",",66],["src[\"type\"],",49],["src[\"format\"],",44],["src[\"pname\"],",42],["src[\"level\"],",36],["src[\"width\"],",36],["src[\"params\"]",34],["src[\"internalformat\"],",28]],"useCount":937},{"word":"stage","context":[["override fun start(stage: Stage) {",24],["stage.draw()",33],["stage.scene = scene",27],["stage.dispose()",27],["Gdx.input.inputProcessor = stage",22],["stage.show()",24],["import javafx.stage.Stage",122],["MapToInt..uint8_t.IN(\"_stage\", \"compute stage\"),",20],["val stage = Stage()",20],["import javafx.stage.FileChooser",19]],"useCount":453},{"word":"start","context":[[".start()",39],["override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {",40],["}).start().get())",40],["server.start()",44],["val token = WriteAction.start()",51],["}.start()",55],["}).start()",60],["start()",61],["override fun start() {",101],["fun start() {",134]],"useCount":1420},{"word":"startActivity","context":[["startActivity(intent)",265],["activity.startActivity(intent)",30],["import org.jetbrains.anko.startActivity",21],["startActivity(sendBack)",13],["startActivity(Intent.createChooser(intent, getString(R.string.__block_canary_share_with)))",11],["startActivity(Intent(this, MainActivity::class.java))",11],["startActivity(i)",31],["context.startActivity(intent)",74],["this.startActivity(intent)",11]],"useCount":467},{"word":"state","context":[["override fun setStateInOldStorage(component: Any, componentName: String, state: Any) {",34],["override fun onPageScrollStateChanged(state: Int) {",35],["when (state) {",104],["<li>{@code commandBuffer} <b>must</b> be in the recording state</li>",102],["XmlSerializerUtil.copyBean(state, this)",37],["if (state != null) {",43],["\"{@code commandBuffer} $must be in the recording state\",",50],["return state",54],["import net.minecraft.block.state.IBlockState",82],["else -> state",99]],"useCount":1944},{"word":"statement","context":[["import ru.dageev.compiler.bytecodegeneration.statement.StatementGenerator",20],["statement.executeUpdate()",59],["return statement",22],["assertThat(statement.tableName).isEqualTo(table.name)",22],["assertThat(statement.sql).isEqualTo(expectedSql)",30],["val resultSet = statement.executeQuery()",41],["statement[i - 1] = EmptyToken();",17],["package org.rust.ide.surroundWith.statement",17],[").use { statement ->",57],["statement[i + 1] = EmptyToken();",17]],"useCount":463},{"word":"status","context":[["if (status.hasReadonlyFiles()) {",19],["status = HostStatus.Up,",18],["return status",18],["page.status = Page.ERROR",18],["status = VirtualMachineStatus.Up,",22],["status = HostStatus.Up",22],["when (status) {",26],["<channel id=\"IDEA_Release\" status=\"release\" licensing=\"release\">",42],[".andExpect(status().isCreated)",45],[".andExpect(status().isOk)",175]],"useCount":665},{"word":"stereotype","context":[["import org.springframework.stereotype.Repository",63],["import org.springframework.stereotype.Component",138],["import org.springframework.stereotype.Service",120],["import org.springframework.stereotype.Controller",56]],"useCount":377},{"word":"storage","context":[["if (!storage.deprecated) {",29],["for (storage in changedStorages) {",38],["result.add(storage)",81],["import org.eclipse.jgit.storage.file.FileRepositoryBuilder",37],["if (storage == null) {",25],["virtualFileTracker?.put(filePath, storage)",32],["if (storage is StateStorageBase<*>) {",30],["return storage",71],["for (storage in storages) {",70],["if (storage is FileBasedStorage) {",61]],"useCount":1344},{"word":"storageManager","context":[["val storageManager = storageManager",18],["val storageManager = storageManager",18],["storageManager.beforeElementSaved(element)",18],["storageManager.addMacro(StoragePathMacros.WORKSPACE_FILE, workspacePath)",18],["storageManager.beforeElementLoaded(element)",18],["tracker.remove { it.storageManager.componentManager == componentManager }",19],["private class MyFileStorage(override val storageManager: StateStorageManagerImpl,",19],["componentStore.storageManager.streamProvider = streamProvider",20],["override final fun getStateStorageManager() = storageManager",20],["storageManager.addMacro(ROOT_CONFIG, path)",17]],"useCount":382},{"word":"storages","context":[["for (storage in storages) {",70],["return storages",46],["val storages = stateSpec.storages",29],["val storages = stateSpec.storages",29],["if (storages.isEmpty()) {",25],["private val storages = THashMap<String, StateStorage>()",20],["throw AssertionError(\"All storages are deprecated\")",19],["storages.clear()",19],["private fun findNonDeprecated(storages: Array<Storage>): Storage {",19],["storages.put(key, storage)",16]],"useCount":385},{"word":"store","context":[["store.close()",28],["val s: String = \"this variable cannot store null references\"",25],["import com.intellij.openapi.components.store.ReadOnlyModificationException",27],["store.commit()",27],["notReloadableComponents = store.getNotReloadableComponents(changedComponentNames)",16],["assertThat(store.nameFile).doesNotExist()",18],["assertThat(store.nameFile).hasContent(name)",18],["val db = DB(store =StoreTrivial(), storeOpened = false, isThreadSafe = false)",20],["// store refreshes root directory, so, we don't need to use refreshAndFindFile",21],["assertEquals(4, q.store.getAllRecids().asSequence().count())",22]],"useCount":366},{"word":"stores","context":[["import com.intellij.openapi.components.impl.stores.IProjectStore",42],["import com.intellij.openapi.components.impl.stores.*",40],["import com.intellij.openapi.components.impl.stores.StorageUtil",35],["import com.intellij.openapi.components.impl.stores.StreamProvider",33],["import com.intellij.openapi.components.impl.stores.IComponentStore",43],["import com.intellij.openapi.components.impl.stores.FileStorageCoreUtil",55],["import com.intellij.openapi.components.impl.stores.StateStorageManager",63],["import com.intellij.openapi.components.impl.stores.StateStorageBase",21],["import com.intellij.openapi.components.impl.stores.StoreUtil",19],["import com.intellij.openapi.components.impl.stores.StateStorageManager.ExternalizationSession",19]],"useCount":415},{"word":"stream","context":[["import com.google.gson.stream.JsonReader",40],["import com.google.gson.stream.JsonWriter",42],["constructor(stream: DataInput) : super(stream) {",27],["import java.util.stream.Stream",43],["stream.close()",35],["constructor(stream: DataInput) : super(stream) {",27],["// stream provider always use LF separator",26],["import java.util.stream.Collectors",21],["override fun serializeBody(stream: OutputStream) {",30],["override fun deserializeBody(stream: InputStream, context: TLContext) {",30]],"useCount":462},{"word":"string","context":[["this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)",20],["builder.setNegativeButton(android.R.string.cancel, null)",26],[".negativeText(android.R.string.no)",17],[".positiveText(android.R.string.yes)",20],[".negativeText(android.R.string.cancel)",25],["rep(\"(def! load-file (fn* (f) (eval (read-string (str \\\"(do \\\" (slurp f) \\\")\\\")))))\", repl_env)",25],["\"string\" to 1L,",24],[".negativeText(R.string.dialog_cancel)",23],["builder.setPositiveButton(android.R.string.ok, this)",22],["this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)",20]],"useCount":472},{"word":"strong","context":[["* <em>Warning:</em> The created observable keeps a strong reference to {@code view}. Unsubscribe",48],["* *Warning:* The created observable keeps a strong reference to `menuItem`.",48],["* *Warning:* The created observable keeps a strong reference to `recyclerView`.",17],["* *Warning:* The created observable keeps a strong reference to {@code map}. Unsubscribe",15],["* *Warning:* The created observable keeps a strong reference to `view`.",13],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610]],"useCount":751},{"word":"structure","context":[["nullable..const..voidptr.member(\"pNext\", \"{@code NULL} or a pointer to an extension-specific structure.\")",138],["VkStructureType.member(\"sType\", \"the type of this structure.\")",128],["package org.rust.ide.structure",47],["package com.anyaku.epd.structure",20],["// project structure",11],["package org.rust.lang.structure",15],["import com.raizlabs.android.dbflow.structure.Model",18]],"useCount":377},{"word":"stubs","context":[["import com.intellij.psi.stubs.StubElement",30],["import org.rust.lang.core.stubs.RustNamedStubElementType",27],["import org.rust.lang.core.stubs.RustNamedElementStub",26],["package org.rust.lang.core.stubs.elements",32],["package org.rust.lang.core.stubs.types",33],["import org.rust.lang.core.stubs.RustItemStub",60],["import com.intellij.psi.stubs.*",21],["import com.intellij.psi.stubs.IStubElementType",97],["package org.rust.lang.core.stubs",18],["import com.intellij.psi.stubs.StubIndexKey",17]],"useCount":406},{"word":"subject","context":[["data class Data(val user: VcsUser? = DEFAULT_USER, val subject: String = \"default commit message\")",14],["* furnished to do so, subject to the following conditions:",1193],["furnished to do so, subject to the following conditions:",270],["*      furnished to do so, subject to the following conditions:",242],["* This Source Code Form is subject to the terms of the Mozilla Public",179],["/* This Source Code Form is subject to the terms of the Mozilla Public",81],["return subject",14],["it.value.user!!, it.value.subject, it.value.user!!, 1L)",13],["subject,",17],["*  furnished to do so, subject to the following conditions:",20]],"useCount":2066},{"word":"sublicense","context":[["*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",20],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179]],"useCount":1711},{"word":"subscribe","context":[["observable.subscribe(test)",94],["}.subscribe()",23],[".subscribe(ts)",24],[".subscribe(testSubscriber)",41],[".subscribe(subscriber)",42],[".subscribe()",64],[".subscribe(",78],["* *Note:* A value will be emitted immediately on subscribe.",106],[".subscribe({",111],[".subscribe {",168]],"useCount":799},{"word":"subscribeOn","context":[[".subscribeOn(AndroidSchedulers.mainThread())",18],[".subscribeOn(Schedulers.computation())",22],["}.subscribeOn(Schedulers.io())",19],[".subscribeOn(schedulers.io)",14],[".subscribeOn(ioScheduler)",16],[".subscribeOn(Schedulers.io())",241],[".subscribeOn(Schedulers.immediate())",37],[".subscribeOn(Schedulers.newThread())",82]],"useCount":449},{"word":"subscriber","context":[["subscriber.onNext(Unit)",18],["observable { subscriber ->",20],["if (!subscriber.isUnsubscribed) {",20],["subscriber.awaitTerminalEvent()",25],["subscriber.onCompleted()",137],["return Observable.create { subscriber ->",121],["subscriber.add(AndroidMainThreadSubscription {",92],["subscriber.onNext(it)",56],[".subscribe(subscriber)",42],["subscriber.onError(e)",34]],"useCount":635},{"word":"subscriptions","context":[["private val subscriptions = CompositeSubscription()",22],["import rx.subscriptions.Subscriptions",47],["subscriptions.unsubscribe()",48],["import rx.subscriptions.CompositeSubscription",175],["subscriptions = CompositeSubscription()",19],["subscriptions.clear()",15],["val subscriptions = CompositeSubscription()",14]],"useCount":340},{"word":"success","context":[["} success {",23],["a non-zero error value on failure and 0 on success. Some possible errors are:",18],["returnDoc = \"1 on success, 0 on failure\"",56],["success = false",34],["var success = 0",27],["return success",26],["<dt>On success, this command returns</dt>",148],["success { v ->",22],["return CommandResult.success()",17],["if (success) {",22]],"useCount":476},{"word":"sunghyouk","context":[["* @author debop sunghyouk.bae@gmail.com",123],["* @author sunghyouk.bae@gmail.com",204]],"useCount":327},{"word":"super","context":[["super.setUp()",217],["super.onStop()",178],["super.onStart()",209],["super.onCreate(savedInstanceState)",1768],["super.onViewCreated(view, savedInstanceState)",255],["super.onPause()",265],["return super.onOptionsItemSelected(item)",289],["super.onCreate()",294],["super.onResume()",377],["super.onDestroy()",396]],"useCount":7427},{"word":"support","context":[["import android.support.v7.app.AppCompatActivity",929],["import android.support.test.runner.AndroidJUnit4",155],["import android.support.v7.widget.RecyclerView",967],["import android.support.v4.app.Fragment",635],["import android.support.v7.widget.Toolbar",400],["import android.support.v7.widget.LinearLayoutManager",358],["import android.support.v4.content.ContextCompat",269],["import android.support.design.widget.Snackbar",233],["import android.support.v7.app.AlertDialog",156],["import android.support.v4.app.DialogFragment",151]],"useCount":8190},{"word":"supported","context":[["PME signal is supported",23],["When true, the $extensionLink extension is supported.",22],["When true, the $extensionName extension is supported.",22],["supported by device associated with queue.",12],["When true, the $registryLink extension is supported.",249],["* @throws UnsupportedOperationException This operation is not supported yet",604]],"useCount":932},{"word":"suppress","context":[["[suppress(\"UNCHECKED_CAST\")]",20],["[ suppress(\"UNCHECKED_CAST\") ]",16],["suppress(\"UNCHECKED_CAST\")",16],["/** @suppress */",21],["[suppress(\"USELESS_CAST_STATIC_ASSERT_IS_FINE\")] [suppress(\"UNCHECKED_CAST\")]",1144],["[suppress(\"UNNECESSARY_NOT_NULL_ASSERTION\")]",2944],["@suppress(\"DEPRECATED_SYMBOL_WITH_MESSAGE\")",29],["@suppress(\"UNCHECKED_CAST\")",220],["@suppress(\"NOTHING_TO_INLINE\")",785],["[suppress(\"USELESS_CAST_STATIC_ASSERT_IS_FINE\")] [suppress(\"UNCHECKED_CAST\")]",1144]],"useCount":6351},{"word":"swing","context":[["import javax.swing.JLabel",82],["import javax.swing.Icon",182],["import javax.swing.*",135],["import javax.swing.JButton",43],["import javax.swing.JComponent",120],["import javax.swing.JPanel",109],["import javax.swing.JTextField",47],["import javax.swing.SwingUtilities",81],["import javax.swing.JFrame",46],["import javax.swing.event.DocumentEvent",33]],"useCount":1415},{"word":"synchronized","context":[["synchronized (clients) {",13],["synchronized(IdeaTestApplication.getInstance()) {",14],["synchronized(this) {",114],["<li>Host access to {@code commandBuffer} <b>must</b> be externally synchronized</li>",100],["if (synchronized (lock) { runToLocationBreakpoints.remove(breakpoint) }) {",15],["synchronized(lock) {",17],["synchronized (changes) {",20],["synchronized (this) {",26],["\"Host access to {@code commandBuffer} $must be externally synchronized\"",49],["synchronized (lock) {",95]],"useCount":534},{"word":"t","context":[["t.printStackTrace()",66],["override fun calculate(t: Float, b: Float, c: Float, d: Float): Float {",25],["// file will be overwritten, so, we don't need to delete it",26],["// We don't load scheme with duplicated name - if we generate unique name for it, it will be saved then with new name.",26],["println(\"\\t/** Unsafe version of {@link #$getter}. */\")",32],["println(\"Uncaught \" + t + \": \" + t.message)",39],["println(\"\\t}\")",108],["} catch (t: Throwable) {",157],["return t",53],["println(\"Uncaught \" + t + \": \" + t.message)",39]],"useCount":1611},{"word":"table","context":[["val table = TableForTest()",33],["</table>",139],[".table(TABLE)",25],["package org.ojacquemart.eurobets.firebase.management.table",27],["table.row()",31],["<table class=\"lwjgl\">",128],["val table = bundle.table",47],["val table = bundle.table",47],["${table(",40],["table {",31]],"useCount":824},{"word":"tachiyomi","context":[["import eu.kanade.tachiyomi.data.preference.PreferencesHelper",77],["import eu.kanade.tachiyomi.data.source.model.Page",79],["import eu.kanade.tachiyomi.data.preference.getOrDefault",41],["import eu.kanade.tachiyomi.data.download.model.Download",42],["import eu.kanade.tachiyomi.util.toast",44],["import eu.kanade.tachiyomi.data.source.SourceManager",50],["import eu.kanade.tachiyomi.data.database.DatabaseHelper",53],["import eu.kanade.tachiyomi.data.database.models.Chapter",89],["import eu.kanade.tachiyomi.R",157],["import eu.kanade.tachiyomi.data.database.models.Manga",144]],"useCount":1635},{"word":"tag","context":[["* @param tag The bound tag, if any.",90],["package com.mvcoding.expensius.feature.tag",37],["* @param tag The bound tag, if any.",90],["val tag = loggerTag",30],["return tag",26],["val wireType = WireFormat.getTagWireType(tag)",23],["val fieldNumber = WireFormat.getTagFieldNumber(tag)",23],["val tag = input.readInt32NoTag()",23],["if (tag == 0) { return false }",21],["val tag = readTag(expectedFieldNumber, WireType.VARINT)",16]],"useCount":474},{"word":"target","context":[["\"target\",",42],["GLenum.IN(\"target\", \"\"),",586],["src[\"target\"],",42],["GLenum.IN(\"target\", \"the texture target\"),",20],["GLenum.IN(\"target\", \"the target buffer object\", BUFFER_OBJECT_TARGETS),",22],["GLenum.IN(\"target\", \"the target buffer object\", BUFFER_OBJECT_TARGETS),",22],["if (target == null) {",24],["GLenum.IN(\"target\", \"\")",26],["val target = message.parameters[0]",27],["////            protected void useImpl(GameCharacter caster, GameCharacter target) {",32]],"useCount":1107},{"word":"task","context":[["return task()",26],["fun runInAutoCommitDisabledMode(task: ()->Unit) {",20],["task {",29],["task()",37],["import nl.komponents.kovenant.task",46],["return task",48],["task.fail(e)",50],["import com.proxerme.app.task.ProxerLoadingTask",16],["task.setEncoding(encoding)",16],["import com.proxerme.app.task.framework.ListenableTask",19]],"useCount":469},{"word":"td","context":[["<tbody><tr><td>Primary Secondary</td><td>Both</td><td>Graphics</td><td></td></tr></tbody>",11],["tr(td(\"0\"), td(\"0\"), td(\"0\"), td(\"1\")),",15],["Pass a color as an argument to functions 'tr', 'td'.",16],["this.td {",24],["td {",145],["tr(td(\"0\"), td(\"0\"), td(\"0\"), td(\"1\")),",15],["tr(td(\"0\"), td(\"0\"), td(\"0\"), td(\"1\")),",15],["tr(td(\"0\"), td(\"0\"), td(\"0\"), td(\"1\")),",15],["'td' is:",12],["a. block inside built-in syntax construction 'td'",12]],"useCount":423},{"word":"tearDown","context":[["override fun tearDown() {",95],["super.tearDown()",89],["fun tearDown() {",100],["@After fun tearDown() {",23],["projectFixture?.tearDown()",15],["public override fun tearDown() {",11]],"useCount":333},{"word":"tempDirManager","context":[["val remoteRepository = tempDirManager.createRepository()",16],["public Rule fun getTemporaryFolder(): TemporaryDirectory = tempDirManager",18],["val tempDirManager = TemporaryDirectory()",41],["val dir = tempDirManager.newDirectory()",63],["private val tempDirManager = TemporaryDirectory()",67],["private val ruleChain = RuleChain(tempDirManager)",17],["tempDirManager,",22],["@Rule fun getTemporaryFolder() = tempDirManager",25],["val dir = tempDirManager.newPath()",33],["loadAndUseProject(tempDirManager, {",40]],"useCount":376},{"word":"templates","context":[["package org.lwjgl.opencl.templates",108],["package org.lwjgl.openal.templates",67],["package org.lwjgl.vulkan.templates",59],["package org.lwjgl.stb.templates",17],["import com.github.czyzby.setup.data.templates.Template",17],["package org.lwjgl.glfw.templates",16],["package org.lwjgl.ovr.templates",14],["package org.lwjgl.opengles.templates",221],["package org.lwjgl.opengl.templates",530],["package org.lwjgl.egl.templates",186]],"useCount":1270},{"word":"terms","context":[["* This Source Code Form is subject to the terms of the Mozilla Public",179],["/* This Source Code Form is subject to the terms of the Mozilla Public",81],["assertTrue(terms is Some)",40],["val terms = sb.build()",40]],"useCount":340},{"word":"test","context":[["import kotlin.test.assertNull",118],["import kotlin.test.*",122],["import kotlin.test.assertNotNull",131],["import android.support.test.runner.AndroidJUnit4",155],["import kotlin.test.assertFalse",164],["fun test() {",171],["\"package test;\",",177],["import org.junit.Test as test",206],["import kotlin.test.assertTrue",370],["import kotlin.test.assertEquals",933]],"useCount":5828},{"word":"testAll","context":[["public fun testAll() {",17],["testAll()",722]],"useCount":739},{"word":"testFramework","context":[["import com.intellij.testFramework.*",54],["import com.intellij.testFramework.ProjectRule",70],["import com.intellij.testFramework.TemporaryDirectory",66],["import com.intellij.testFramework.RuleChain",31],["import com.intellij.testFramework.UsefulTestCase",61],["import com.intellij.testFramework.fixtures.IdeaProjectTestFixture",31],["import com.intellij.testFramework.fixtures.LightCodeInsightFixtureTestCase",36],["import com.intellij.testFramework.PlatformTestUtil",38],["import com.intellij.testFramework.runInEdtAndWait",39],["package com.intellij.testFramework",56]],"useCount":654},{"word":"testModel","context":[["testModel.id = UUID.randomUUID().toString()",73],["testModel.testUint64 = 4",28],["testModel.testSfixed64 = 10",28],["testModel.testSint64 = 6",28],["testModel.addCoolTypes(firstCoolType)",59],["testModel.coolType = TestingModel.SimpleInsertTest.CoolType.SURPRISED",73],["val testModel = TestingModel.SimpleInsertTest.newBuilder()",73],["val records = ProtobufUtils.convertProtobufObjectToRecords(testModel.build(), HashMap())",60],["testModel.addChilds(subTestChild)",60],["testModel.addCoolTypes(secondCoolType)",59]],"useCount":962},{"word":"testng","context":[["import org.testng.annotations.AfterClass",17],["import org.testng.annotations.Test",339],["import org.testng.Assert",107],["import org.testng.annotations.*",21],["import org.testng.annotations.BeforeMethod",49],["import org.testng.Assert.assertEquals",27],["import org.testng.annotations.DataProvider",41],["import org.testng.annotations.BeforeClass",43],["import org.testng.Assert.*",44]],"useCount":688},{"word":"text","context":[["import android.text.TextUtils",218],["text(\"Product\")",77],["import java.text.DecimalFormat",78],["import android.text.Editable",80],["import kotlin.text.Regex",95],["const..charUTF8_p.IN(\"text\", \"\"),",104],["setText(text)",307],["import com.intellij.openapi.util.text.StringUtil",380],["import android.text.TextWatcher",74],["import java.text.SimpleDateFormat",275]],"useCount":3534},{"word":"texture","context":[["this argument represent destination texture Z position.",14],["GLsizei.IN(\"width\", \"the texture width\"),",14],["GLuint.IN(\"texture\", \"\"),",170],["\"texture\",",16],["bool.IN(\"_hasMips\", \"indicates that texture contains full mip-map chain\"),",20],["bgfx_texture_handle_t.IN(\"_handle\", \"texture handle\"),",29],["bgfx_texture_format_t.IN(\"_format\", \"texture format\", TextureFormat),",21],["import net.minecraft.client.renderer.texture.TextureMap",20],["GLenum.IN(\"target\", \"the texture target\"),",20],["import net.minecraft.client.renderer.texture.TextureAtlasSprite",20]],"useCount":514},{"word":"th","context":[["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53],["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53],["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53],["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53],["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53],["<thead><tr><th>Command Buffer Levels</th><th>Render Pass Scope</th><th>Supported Queue Types</th></tr></thead>",53]],"useCount":318},{"word":"that","context":[["// If a lambda has exactly one parameter, that parameter can be accessed as 'it'",18],["* purpose with or without fee is hereby granted, provided that the above",17],[".that(componentFile).processedWith(XmlProcessor())",119],["* Returns a property delegate for a read-only property that takes its value from a SharedPreferences,",28],["* that the following conditions are met:",26],["\"The {@code VkCommandPool} that {@code commandBuffer} was allocated from $must support graphics operations\",",24],["GLFWwindow.IN(\"window\", \"the window that received the event\"),",24],["bool.IN(\"_hasMips\", \"indicates that texture contains full mip-map chain\"),",20],["* file that was distributed with this source code.",20],[".that(componentFile)",19]],"useCount":484},{"word":"the","context":[["Native bindings to the $registryLink extension.",714],["* This Source Code Form is subject to the terms of the Mozilla Public",179],["*      furnished to do so, subject to the following conditions:",242],["*     * Neither the name of the Brackit Project Team nor the",405],["*     * Neither the name of the Brackit Project Team nor the",405],["* furnished to do so, subject to the following conditions:",1193],["*       documentation and/or other materials provided with the distribution.",420],["*     * Neither the name of the Brackit Project Team nor the",405],["When true, the $registryLink extension is supported.",249],["furnished to do so, subject to the following conditions:",270]],"useCount":12831},{"word":"this","context":[["this.name = name",145],["<dt>On failure, this command returns</dt>",148],["return this;",208],["if (this === other) return true",208],["this@layoutParams.setLayoutParams(layoutParams)",474],["* to free this reference.",675],["this",139],["<dt>On success, this command returns</dt>",148],["return this",5395],["this@lparams.layoutParams = layoutParams",1265]],"useCount":15855},{"word":"thread","context":[["for (thread in threads) {",15],["import common.thread.assertWorkerThread",14],["thread.join()",24],["thread.start()",29],["\"This function must only be called from the main thread.\",",45],["thread {",93],["This function must only be called from the main thread.",172],["import kotlin.concurrent.thread",135]],"useCount":527},{"word":"throw","context":[["throw RuntimeException()",102],["throw IllegalArgumentException()",54],["throw QueryException(",139],["throw e",387],["throw UnsupportedOperationException()",1916],["throw RuntimeException(e)",99],["throw AssertionError()",64],["throw IComponentStore.SaveCancelledException()",57],["throw UnsupportedOperationException(\"not implemented\")",55],["get() = throw UnsupportedOperationException()",55]],"useCount":4697},{"word":"throws","context":[["throws(javaClass<IOException>())",38],["* @throws UnsupportedOperationException This operation is not supported yet",604],["throws(IOException::class)",114],["* @throws SQLException",50],["* @throws IOException",41],["* @throws RecycledObjectException The document is recycled",23],["* @throws kontrol.doclient.ResourceNotFoundException",38],["* @throws kontrol.doclient.RequestUnsuccessfulException",38],["* @throws kontrol.doclient.AccessDeniedException",38],["* @throws RecycledObjectException The item is recycled",23]],"useCount":1203},{"word":"timber","context":[["import timber.log.Timber",463]],"useCount":463},{"word":"time","context":[["import org.joda.time.DateTime",358],["import java.time.LocalDateTime",303],["import java.time.Duration",109],["import java.time.LocalDate",97],["import java.time.Instant",84],["import java.time.format.DateTimeFormatter",59],["import java.time.ZonedDateTime",51],["Commandspy - A Minecraft server plugin to facilitate real-time usage of commands, and sign-changes",49],["* touches. Only one observable can be used for a view at a time.",48],["import org.joda.time.format.DateTimeFormat",40]],"useCount":1740},{"word":"times","context":[["verify(a, times(1)).received(1)",61],["verify(a, times(1)).received(2)",71],["verify(a, times(0)).received(1)",23],["verify(a, times(0))!!.received(3)",24],["verify(a, times(1))!!.received(\"hello_1\")",30],["verify(a, times(1)).received(3)",34],["verify(a, times(1))!!.received(1)",40],["verify(a, times(0)).received(3)",40],["verify(a, times(1))!!.received(2)",46],["verify(a, times(1)).received(\"hello_1\")",47]],"useCount":545},{"word":"title","context":[["title: String? = null,",71],["if (title != null) title(title)",24],["if (title != null) title(title)",24],["val title: String",25],["const..charUTF8_p.IN(\"title\", \"\"),",30],["var title: String? = null",35],["this.title = title",36],["this.title = title",36],["title: Int? = null,",56],["val title: String,",65]],"useCount":803},{"word":"to","context":[["*      furnished to do so, subject to the following conditions:",242],["furnished to do so, subject to the following conditions:",270],["furnished to do so, subject to the following conditions:",270],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["* to free this reference.",675],["Native bindings to the $registryLink extension.",714],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["* furnished to do so, subject to the following conditions:",1193],["* furnished to do so, subject to the following conditions:",1193]],"useCount":12386},{"word":"toString","context":[["return result.toString()",47],["val subTestChild = TestingModel.Child.newBuilder().setId(UUID.randomUUID().toString()).setTestDisplay(\"second display\")",49],["override fun toString(): String{",50],[".toString()",53],["testModel.id = UUID.randomUUID().toString()",73],[".setId(UUID.randomUUID().toString())",107],["return builder.toString()",170],["return sb.toString()",186],["}.toString()",190],["override fun toString(): String {",998]],"useCount":2865},{"word":"token","context":[["if(token.type == JsonToken.Type.EndObject) {",24],["if (token != null) {",24],["} else if(token.type == JsonToken.Type.FieldName) {",24],["if (token == null) {",29],["val lineNumber = parser.token.lineNumber",24],["token.finish()",90],["token.expect(JsonToken.Type.StartObject)",25],["token.expect(JsonToken.Type.StringLit)",25],["val token = WriteAction.start()",51],["return token",25]],"useCount":565},{"word":"toolbar","context":[["private val toolbar: Toolbar by bindView(R.id.toolbar)",16],["import org.jetbrains.anko.appcompat.v7.toolbar",13],["private val toolbar: Toolbar by bindView(R.id.toolbar)",16],["setSupportActionBar(toolbar)",295],["val toolbar: Toolbar by bindView(R.id.toolbar)",18],["val toolbar = findViewById(R.id.toolbar) as Toolbar",86],["val toolbar = findViewById(R.id.toolbar) as Toolbar",86],["val toolbar: Toolbar by bindView(R.id.toolbar)",18],["this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)",20],["import kotlinx.android.synthetic.main.toolbar.*",23]],"useCount":626},{"word":"tools","context":[["* [Testing Fundamentals](http://d.android.com/tools/testing/testing_android.html)",50],["import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector",22],["import org.apache.tools.ant.types.ResourceCollection",26],["import org.apache.tools.ant.types.selectors.DepthSelector",21],["import com.rarnu.tools.neo.R",33],["import org.apache.tools.ant.types.selectors.DifferentSelector",21],["package com.intellij.diff.tools.fragmented",29],["import org.apache.tools.ant.types.selectors.ContainsSelector",21],["import org.apache.tools.ant.types.selectors.DateSelector",21],["import org.apache.tools.ant.types.selectors.ContainsRegexpSelector",21]],"useCount":727},{"word":"tree","context":[["tree.index()",20],["import com.intellij.psi.tree.IElementType",145],["import javax.swing.tree.DefaultMutableTreeNode",22],["import javax.swing.tree.TreePath",22],["import com.intellij.psi.tree.IFileElementType",22],["import cool.tree.AbstractExpression",23],["import org.objectweb.asm.tree.MethodNode",46],["import com.intellij.psi.tree.TokenSet",50],["import javax.swing.tree.DefaultTreeModel",19],["import org.objectweb.asm.tree.ClassNode",67]],"useCount":506},{"word":"true","context":[["setHasOptionsMenu(true)",102],["true",845],["return true",4657],["while (true) {",531],["When true, the $registryLink extension is supported.",249],["if (this === other) return true",208],["return true;",144],["override val isAuthorization = true",100],["@JsonIgnoreProperties(ignoreUnknown = true)",98],["supportActionBar?.setDisplayHomeAsUpEnabled(true)",96]],"useCount":11405},{"word":"try","context":[["//            try {",11],["try {",8931],["val result = try {",11],["// try Ctrl+Space \"default completion\" after the dot: lastChar() is visible",13],["//        try {",19],["try{",99],["return try {",85],["// try old key - as hash",12],["try",94]],"useCount":9275},{"word":"twitter","context":[["package com.twitter.meil_mitu.twitter4hk.data",50],["import com.twitter.meil_mitu.twitter4hk.exception.Twitter4HKException",202],["import com.twitter.meil_mitu.twitter4hk.AbsOauth",140],["import com.twitter.meil_mitu.twitter4hk.OauthType",111],["package com.twitter.meil_mitu.twitter4hk.converter.api",28],["import com.twitter.meil_mitu.twitter4hk.ResponseList",29],["package com.twitter.meil_mitu.twitter4hk.converter",32],["import com.twitter.meil_mitu.twitter4hk.AbsPost",41],["import com.twitter.meil_mitu.twitter4hk.AbsGet",63],["import com.twitter.meil_mitu.twitter4hk.ResponseData",63]],"useCount":1121},{"word":"twitter4hk","context":[["import com.twitter.meil_mitu.twitter4hk.AbsPost",41],["package com.twitter.meil_mitu.twitter4hk.converter",32],["import com.twitter.meil_mitu.twitter4hk.ResponseList",29],["import com.twitter.meil_mitu.twitter4hk.util.JsonUtils.getString",28],["import com.twitter.meil_mitu.twitter4hk.AbsOauth",140],["import com.twitter.meil_mitu.twitter4hk.exception.Twitter4HKException",202],["import com.twitter.meil_mitu.twitter4hk.OauthType",111],["import com.twitter.meil_mitu.twitter4hk.ResponseData",63],["import com.twitter.meil_mitu.twitter4hk.AbsGet",63],["package com.twitter.meil_mitu.twitter4hk.data",50]],"useCount":993},{"word":"twittnuker","context":[["import de.vanita5.twittnuker.TwittnukerConstants.*",31],["import de.vanita5.twittnuker.library.MicroBlog",32],["import de.vanita5.twittnuker.util.*",32],["import de.vanita5.twittnuker.model.ParcelableUser",38],["import de.vanita5.twittnuker.model.AccountDetails",41],["import de.vanita5.twittnuker.library.MicroBlogException",41],["import de.vanita5.twittnuker.model.ParcelableStatus",42],["package de.vanita5.twittnuker.fragment",89],["import de.vanita5.twittnuker.model.UserKey",95],["import de.vanita5.twittnuker.R",105]],"useCount":1076},{"word":"type","context":[["import javax.lang.model.type.TypeMirror",40],["return when (type) {",45],["src[\"type\"],",49],["this.type = type",68],["this.type = type",68],["GLenum.IN(\"type\", \"\"),",142],["VkStructureType.member(\"sType\", \"the type of this structure.\")",128],["<li>The See Also section for other reference pages using this type.</li>",88],["when (type) {",158],["\"type\",",71]],"useCount":2397},{"word":"types","context":[["import org.apache.tools.ant.types.ResourceCollection",26],["import org.rust.lang.core.types.visitors.RustTypeVisitor",36],["import org.rust.lang.core.types.util.resolvedType",36],["import org.bson.types.ObjectId",69],["import org.rust.lang.core.types.visitors.RustUnresolvedTypeVisitor",30],["import org.rust.lang.core.types.*",30],["import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector",22],["import org.apache.tools.ant.types.selectors.TypeSelector",21],["package org.rust.lang.core.stubs.types",33],["package org.rust.lang.core.types",35]],"useCount":866},{"word":"ui","context":[["import com.intellij.util.ui.UIUtil",95],["import com.intellij.openapi.ui.DialogWrapper",72],["import com.vaadin.ui.*",65],["import com.intellij.openapi.ui.TextFieldWithBrowseButton",35],["import eu.kanade.tachiyomi.ui.base.presenter.BasePresenter",34],["ui {",32],["import com.intellij.openapi.ui.popup.JBPopupFactory",32],["package org.ligi.passandroid.ui",30],["import com.intellij.ui.components.JBList",27],["import com.intellij.openapi.ui.Messages",162]],"useCount":1522},{"word":"ul","context":[["* </ul>",16],["</ul>\"\"\")",34],["<ul>",1434],["</ul>",1404],["ul {",25],["<dd><ul>",296],["</ul></dd>",296],["${ul(",1190],["* <ul>",16]],"useCount":4711},{"word":"unused","context":[["@Suppress(\"unused\", \"UNUSED_PARAMETER\")",59],["@Suppress(\"unused\")",313],["@file:Suppress(\"unused\")",40],["@SuppressWarnings(\"unused\")",37],["\"@SuppressWarnings(\\\"unused\\\")\",",19],["\"  @SuppressWarnings(\\\"unused\\\")\",",15]],"useCount":483},{"word":"update","context":[["override fun update() {",49],["override fun update(e: AnActionEvent) {",65],["update()",78],["fun update() {",34],["import main.astraeus.game.model.entity.mob.update.UpdateFlag",27],["override fun update(delta: Float) {",21],["return ds.update(query(), updateOperations, true, wc)",19],["return ds.update(query(), updateOperations, true)",19],["return ds.update(query(), updateOperations, false)",19],["camera.update()",19]],"useCount":794},{"word":"url","context":[["val documentElement = JDOMXIncluder.resolve(JDOMUtil.loadDocument(url), url.toExternalForm()).detachRootElement()",19],["if (url == null) {",47],["val url: String,",52],["val url = DecodeDefaultsUtil.getDefaults(component, componentName) ?: return null",19],["var url: String? = null",41],[".url(url)",40],[".url(url)",40],["val url: String",31],["val url = if (requestor is AbstractExtensionPointBean)",26],["return url",21]],"useCount":747},{"word":"use","context":[["// Redistribution and use in source and binary forms, with or without",126],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",1179],["// stream provider always use LF separator",26],[").use { statement ->",57],["database.createConnection().use { connection ->",88],["Realm.getInstance(context).use {",95],["* Redistribution and use in source and binary forms, with or without",450],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",270],["*      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",242],["Realm.getInstance(context).use { realm ->",228]],"useCount":3355},{"word":"used","context":[["* drags. Only one observable can be used for a view at a time.",30],["* observe actions. Only one observable can be used for a view at a time.",34],["* touches. Only one observable can be used for a view at a time.",48],["fun example3(c: Boolean, x: Int, y: Int) = \"Any expression can be used: ${if (c) x else y}\"",23],["// used in settings repository plugin",29],["* long clicks. Only one observable can be used for a view at a time.",30],["* unspecified and should only be used as notification.",79],["// used in upsource",21],["/** The type used in the native API. */",20],["// protected setter used in upsource",19]],"useCount":486},{"word":"user","context":[["if (user == null) {",30],["return user",25],["val user = userService.getUserFromCustomUserDetails(customUserDetails)",24],[".andExpect(jsonPath(\"$.user\").exists())",22],["import dk.etiktak.backend.model.user.Client",40],["val input = readline(\"user> \")",39],["if (user != null) {",35],["import backend.model.user.Participant",32],["/* optional user callbacks */",28],[".asUser(mockMvc, user.email, \"password\")",28]],"useCount":897},{"word":"util","context":[["import java.util.HashMap",377],["import android.util.Log",786],["import com.intellij.openapi.util.io.FileUtil",400],["import com.intellij.openapi.util.text.StringUtil",380],["import android.util.AttributeSet",445],["import util.TODO",454],["import java.util.ArrayList",881],["import java.util.concurrent.TimeUnit",631],["import java.util.regex.Pattern",360],["import java.util.*",5431]],"useCount":22768},{"word":"utils","context":[["package org.jetbrains.android.anko.utils",42],["import com.badlogic.gdx.scenes.scene2d.utils.ClickListener",31],["import com.github.K0zka.kerub.utils.toSize",61],["import com.github.K0zka.kerub.utils.getLogger",81],["import com.badlogic.gdx.utils.Disposable",31],["package lt.markmerkk.utils",34],["package debop4k.core.utils",39],["import com.badlogic.gdx.utils.JsonValue",39],["package com.github.K0zka.kerub.utils",41],["import com.badlogic.gdx.utils.Json",43]],"useCount":967},{"word":"v","context":[["viewGroup.addView(v)",66],["_style(v)",142],["viewGroup.addView(v.viewGroup)",76],["v.listenerMap.clear()",38],["v.listenerLambdasMap.clear()",38],["override fun onClick(v: View) {",74],["set(v) = setGravity(v)",68],["set(v) = setGravity(v)",68],["v.init()",146],["return v",241]],"useCount":2807},{"word":"v4","context":[["import android.support.v4.app.DialogFragment",151],["import android.support.v4.content.ContextCompat",269],["import android.support.v4.view.ViewPager",128],["import android.support.v4.app.FragmentManager",120],["import android.support.v4.app.Fragment",635],["import android.support.v4.app.FragmentActivity",63],["import android.support.v4.app.ActivityCompat",74],["import android.support.v4.content.Loader",76],["import android.support.v4.widget.SwipeRefreshLayout",118],["import android.support.v4.widget.DrawerLayout",84]],"useCount":2603},{"word":"v7","context":[["import android.support.v7.widget.SearchView",39],["import android.support.v7.widget.Toolbar",400],["import android.support.v7.app.AppCompatActivity",929],["import android.support.v7.widget.LinearLayoutManager",358],["import android.support.v7.widget.helper.ItemTouchHelper",43],["import android.support.v7.widget.RecyclerView.ViewHolder",54],["import android.support.v7.widget.GridLayoutManager",60],["import android.support.v7.app.ActionBarDrawerToggle",70],["import android.support.v7.app.AlertDialog",156],["import android.support.v7.widget.RecyclerView",967]],"useCount":3573},{"word":"val","context":[["val name: String,",367],["val sb = StringBuilder()",202],["val name: String",171],["val layout = horizontalLayout {",169],["val args = Bundle()",158],["val granularDatabaseService = JDBCGranularDatabaseProtoService(",152],["val id: Int,",144],["val builder = StringBuilder()",230],["val map = hashMapOf(",216],["val layoutParams = android.widget.FrameLayout.LayoutParams(source!!)",242]],"useCount":31231},{"word":"valid","context":[["<li>{@code image} <b>must</b> be a valid {@code VkImage} handle</li>",20],["<li>{@code device} <b>must</b> be a valid {@code VkDevice} handle</li>",161],["\"{@code device} $must be a valid {@code VkDevice} handle\",",77],["\"{@code commandBuffer} $must be a valid {@code VkCommandBuffer} handle\",",52],["<li>{@code physicalDevice} <b>must</b> be a valid {@code VkPhysicalDevice} handle</li>",39],["cl_context.IN(\"context\", \"a valid OpenCL context\"),",29],["const..charASCII_p.IN(\"propertyName\", \"the name of the property, which needs to be valid only for the call\"),",27],["<li>{@code commandBuffer} <b>must</b> be a valid {@code VkCommandBuffer} handle</li>",106],["<li>{@code buffer} <b>must</b> be a valid {@code VkBuffer} handle</li>",27],["\"{@code physicalDevice} $must be a valid {@code VkPhysicalDevice} handle\",",26]],"useCount":760},{"word":"value","context":[["when (value) {",97],["this.value = value",79],["* *Note:* A value will be emitted immediately on subscribe.",106],["if (value != null) {",108],["const..GLfloat_p.IN(\"value\", \"\")",125],["if (value == null) {",152],["Assert.assertThat(count, CoreMatchers.`is`(it.value))",216],["return value",266],["field = value",391],["set(value) {",1113]],"useCount":6959},{"word":"values","context":[["\"the data type of the values stored in the array\",",31],["val values = ContentValues()",65],["assertEquals(listOf(2, 5, 8), values[1])",21],["for (value in values) {",23],["package org.jetbrains.debugger.values",22],["throw error(e, table.headers.values(), row.values())",22],["throw error(e, table.headers.values(), row.values())",22],["return values",21],["assertEquals(listOf(1, 4, 7), values[0])",21],["with one of the following error values returned in $errcode_ret:",21]],"useCount":575},{"word":"vanita5","context":[["import de.vanita5.twittnuker.R",105],["import de.vanita5.twittnuker.model.UserKey",95],["import de.vanita5.twittnuker.model.ParcelableStatus",42],["package de.vanita5.twittnuker.loader",31],["import de.vanita5.twittnuker.library.MicroBlogException",41],["import de.vanita5.twittnuker.model.AccountDetails",41],["import de.vanita5.twittnuker.model.ParcelableUser",38],["import de.vanita5.twittnuker.library.MicroBlog",32],["import de.vanita5.twittnuker.util.*",32],["package de.vanita5.twittnuker.fragment",89]],"useCount":1076},{"word":"var","context":[["var id: Long = 0",59],["override var formatting: Formatting,",50],["var counter = 0",91],["var name: String? = null",96],["var size = 0",107],["var arraySize = 0",99],["var index = 0",112],["var count = 0",179],["var result: DSLResultStub? = null",289],["var i = 0",492]],"useCount":7435},{"word":"vcs","context":[["import com.intellij.vcs.log.graph.utils.LinearGraphUtils",21],["import com.intellij.openapi.vcs.changes.ChangeListManager",22],["import com.intellij.vcs.log.graph.api.elements.GraphEdge",23],["import com.intellij.vcs.log.graph.api.LinearGraph",29],["import com.intellij.vcs.log.graph.api.elements.GraphNode",21],["import com.intellij.vcs.log.graph.api.EdgeFilter",20],["package com.intellij.vcs.log.graph",19],["import com.intellij.openapi.vcs.merge.MergeSession",19],["import com.intellij.vcs.log.graph.impl.permanent.GraphLayoutBuilder",19],["import com.intellij.openapi.vcs.Executor",19]],"useCount":580},{"word":"verify","context":[["verify(a, times(1)).received(\"hello_1\")",47],["verify(a, times(1))!!.received(2)",46],["verify(a, times(1))!!.received(1)",40],["q.verify()",57],["import org.mockito.Mockito.verify",61],["verify(a, times(0)).received(3)",40],["e.verify()",37],["verify(a, times(1)).received(2)",71],["import com.nhaarman.mockito_kotlin.verify",128],["verify(a, times(1)).received(1)",61]],"useCount":1092},{"word":"version","context":[["since = \"version 3.0\"",119],["* @version 1.0",105],["runFunctionalTest(\"LayoutsTest.kt\", AnkoFile.LAYOUTS, version) {",41],["* @version $Id$",81],["since = \"version 1.0\"",75],["\"Robust version of ${src.javaDocLink}\",",66],["\"The extension specification version.\",",54],["\"DSA version of ${src.javaDocLink}.\",",148],["* This program incorporates a modified version of Twidere.",264],["since = \"version 3.2\"",49]],"useCount":1688},{"word":"vertx","context":[["import io.vertx.core.Handler",27],["import io.vertx.core.buffer.Buffer",24],["import io.vertx.core.Future",25],["import io.vertx.ext.web.Router",33],["import io.vertx.core.http.HttpMethod",27],["import io.vertx.core.AsyncResult",28],["import io.vertx.core.Vertx",64],["import io.vertx.ext.web.RoutingContext",36],["import io.vertx.core.AbstractVerticle",24],["import io.vertx.core.json.JsonObject",55]],"useCount":657},{"word":"vfs","context":[["import com.intellij.openapi.vfs.newvfs.impl.VfsRootAccess",26],["import com.intellij.openapi.vfs.newvfs.BulkFileListener",30],["import com.intellij.openapi.vfs.LocalFileSystem",172],["import com.intellij.openapi.vfs.CharsetToolkit",106],["import com.intellij.openapi.vfs.VfsUtil",87],["import com.intellij.openapi.vfs.VirtualFileManager",59],["import com.intellij.openapi.vfs.newvfs.events.VFileEvent",53],["import com.intellij.openapi.vfs.VirtualFile",601],["import com.intellij.openapi.vfs.VfsUtilCore",44],["import com.intellij.openapi.vfs.*",43]],"useCount":1480},{"word":"view","context":[["import android.view.MenuItem",546],["* *Warning:* The created observable keeps a strong reference to `view`. Unsubscribe",610],["height: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["width: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["import android.view.LayoutInflater",1152],["import android.view.ViewGroup",1541],["import android.view.View",2723],["view",766],["view.init()",733],["import android.view.Menu",353]],"useCount":15301},{"word":"viewFinder","context":[[": ReadOnlyProperty<Dialog, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<View, List<V>> = optional(ids, viewFinder)",17],[": ReadOnlyProperty<View, List<V>> = required(ids, viewFinder)",17],[": ReadOnlyProperty<View, V> = required(id, viewFinder)",17],[": ReadOnlyProperty<View, V?> = optional(id, viewFinder)",17],[": ReadOnlyProperty<Activity, List<V>> = required(ids, viewFinder)",16],[": ReadOnlyProperty<ViewHolder, V> = required(id, viewFinder)",16],[": ReadOnlyProperty<ViewHolder, V?> = optional(id, viewFinder)",16],[": ReadOnlyProperty<Fragment, V?> = optional(id, viewFinder)",16],[": ReadOnlyProperty<Activity, List<V>> = optional(ids, viewFinder)",16]],"useCount":468},{"word":"void","context":[["IgnoreMissing..void(",100],["DependsOn(\"OpenGL20\")..void(",61],["DependsOn(\"OpenGL30\")..void(",107],["public void main() {",118],["DependsOn(\"OpenGL13\")..void(",194],["DeprecatedGL..void(",499],["void(",4977],["|   public void test() {",62],["public void test() {",77],["ProgramUniformRef..void(",100]],"useCount":6718},{"word":"warren","context":[["import engineer.carrot.warren.warren.loggerFor",38],["import engineer.carrot.warren.kale.irc.message.IrcMessage",107],["import engineer.carrot.warren.kale.irc.message.IMessage",62],["import engineer.carrot.warren.kale.irc.message.IMessageParser",43],["import engineer.carrot.warren.warren.loggerFor",38],["import engineer.carrot.warren.kale.irc.prefix.Prefix",38],["import engineer.carrot.warren.kale.irc.message.IMessageSerialiser",44],["package engineer.carrot.warren.warren.handler",30],["import engineer.carrot.warren.kale.IKaleHandler",32],["package engineer.carrot.warren.kale.irc.message.rfc1459",40]],"useCount":1019},{"word":"was","context":[["returnDoc = \"the previously set callback, or $NULL if no callback was set\",",27],["\"$INVALID_CONTEXT if {@code context} is not a valid context or was not created from a GL context.\",",15],["\"OVRErrorCode#Success: The call succeeded and a result was returned.\",",16],["* file that was distributed with this source code.",20],["// remove empty directory only if some file was deleted - avoid check on each save",21],["DO NOT EDIT - this file was generated",113],["This file was generated by module generate",29],["* This part of workshop was inspired by:",21],["\"The {@code VkCommandPool} that {@code commandBuffer} was allocated from $must support graphics operations\",",24],["throw AnkoException(\"Query selection was already applied.\")",24]],"useCount":411},{"word":"we","context":[["// scheme from file with old extension, so, we must ignore it",26],["// store refreshes root directory, so, we don't need to use refreshAndFindFile",21],["// 1.oldExt is loading after 1.newExt - we should delete 1.oldExt",22],["// we keep it to detect rename",22],["// if another new scheme uses old name of this scheme, so, we must not delete it (as part of rename operation)",24],["// we must not remove non-persistent (e.g. predefined) schemes, because we cannot load it (obviously)",26],["// scheme could be changed - so, hashcode will be changed - we must use identity hashing strategy",26],["// file will be overwritten, so, we don't need to delete it",26],["// We don't load scheme with duplicated name - if we generate unique name for it, it will be saved then with new name.",26],["// we must not remove non-persistent (e.g. predefined) schemes, because we cannot load it (obviously)",26]],"useCount":709},{"word":"web","context":[["import io.vertx.ext.web.RoutingContext",36],["// web: www.droidmate.org",54],["import org.springframework.test.context.web.WebAppConfiguration",33],["import org.springframework.web.bind.annotation.RequestParam",27],["import org.springframework.web.bind.annotation.*",56],["import org.springframework.web.bind.annotation.RequestMethod",58],["import org.springframework.web.bind.annotation.RestController",88],["import org.springframework.web.bind.annotation.RequestMapping",136],["import io.vertx.ext.web.Router",33],["import org.springframework.web.bind.annotation.PathVariable",28]],"useCount":888},{"word":"when","context":[["when (state) {",104],["when (requestCode) {",80],["when (this) {",87],["when {",495],["return when {",208],["when (item.itemId) {",201],["when (type) {",158],["when (value) {",97],["when (action) {",118],["when (it) {",121]],"useCount":3727},{"word":"which","context":[["when (which) {",35],["override fun onClick(dialog: DialogInterface, which: Int) {",43],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command is recorded\"),",21],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46],["* Create an observable which emits on `view` long-click events. The emitted value is",18],["ReturnParam..GLfloat_p.OUT(\"params\", \"the buffer in which to place the returned data\")",18],["\"This is some text in which variables ($a, $b) appear.\"",18],["const..charASCII_p.IN(\"propertyName\", \"the name of the property, which needs to be valid only for the call\"),",27],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command is recorded.\"),",28]],"useCount":463},{"word":"while","context":[["while (line != null) {",45],["while (true) {",531],["} while (false)",41],["while (rs.next()) {",38],["while (reader.hasNext()) {",35],["while (iterator.hasNext()) {",78],["while (matcher.find()) {",56],["while(true) {",73],["} while(false)",112],["while (it.hasNext()) {",76]],"useCount":1612},{"word":"widget","context":[["import android.widget.Toast",418],["import android.support.v7.widget.Toolbar",400],["import android.widget.LinearLayout",276],["val layoutParams = android.widget.FrameLayout.LayoutParams(source!!)",242],["import android.widget.ImageView",390],["import android.support.v7.widget.LinearLayoutManager",358],["import android.support.v7.widget.RecyclerView",967],["init: android.widget.FrameLayout.LayoutParams.() -> Unit = defaultInit",320],["import android.support.design.widget.Snackbar",233],["import android.widget.TextView",1093]],"useCount":9574},{"word":"width","context":[["this.width = width",51],["val layoutParams = FrameLayout.LayoutParams(width, height, gravity)",36],["val layoutParams = FrameLayout.LayoutParams(width, height)",37],["override fun resize(width: Int, height: Int) {",44],["this.width = width",51],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height)",92],["val layoutParams = android.widget.FrameLayout.LayoutParams(width, height, gravity)",92],["GLsizei.IN(\"width\", \"\"),",202],["width: Int = android.view.ViewGroup.LayoutParams.WRAP_CONTENT,",387],["src[\"width\"],",36]],"useCount":1562},{"word":"will","context":[["* *Note:* A value will be emitted immediately on subscribe.",106],["// Handle action bar item clicks here. The action bar will",80],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded.\"),",46],["VkCommandBuffer.IN(\"commandBuffer\", \"the command buffer into which the command will be recorded\"),",46],["// must be performed only after initial pull, so, local changes will be relative to remote files",27],["* Opposite to Java, parent directories will be created",26],["// scheme could be changed - so, hashcode will be changed - we must use identity hashing strategy",26],["// file will be overwritten, so, we don't need to delete it",26],["// We don't load scheme with duplicated name - if we generate unique name for it, it will be saved then with new name.",26],["controller will {",22]],"useCount":657},{"word":"with","context":[["// scheme from file with old extension, so, we must ignore it",26],["// Redistribution and use in source and binary forms, with or without",126],["import net.yested.with",42],["with(mapper.readTree(body)) {",44],["* Created with IntelliJ IDEA.",53],["* @param handled Function invoked with each value to determine the return value of the",56],["* distributed with this work for additional information",79],["//    and/or other materials provided with the distribution.",126],["*       documentation and/or other materials provided with the distribution.",420],["* Redistribution and use in source and binary forms, with or without",450]],"useCount":2129},{"word":"without","context":[["* Functionality without stream provider covered, ICS has own test suite",12],["* Language chain without any further semantical meaning.",16],["* purpose with or without fee is hereby granted, provided that the above",17],["without the use of any underlying \"native\" APIs or functionality.",18],["** 4131 NJ Vianen                   |  purpose, without the express written",29],["// Redistribution and use in source and binary forms, with or without",126],["* Redistribution and use in source and binary forms, with or without",450]],"useCount":668},{"word":"world","context":[["stack.pop() shouldBe \"world\"",15],["createJoint(world, jd)",16],["val worldName = event.player.world.name",19],["world.popStatus()",15],["world.facts)",15],["val tile = world.getTileEntity(pos)",14],["import net.minecraft.world.IBlockAccess",23],["world",25],["stack.push(\"world\")",26],["import net.minecraft.world.World",124]],"useCount":376},{"word":"write","context":[["* @param address The native address to write to.",25],["write {",25],["AutoSize(\"data\")..GLsizei.IN(\"bufSize\", \"the maximum number of bytes to write into {@code data}\"),",26],["override fun write(fileSpec: String, content: ByteArray, size: Int, roamingType: RoamingType) {",28],["provider.write(SAMPLE_FILE_NAME, data)",24],["\"You can write it in a Java way as well. Like this: \" + a + \", \" + b + \"!\"",22],["write[\"comp\"],",21],["import kotlin.concurrent.write",30],["override fun write(json: Json) {",37],["lock.write {",41]],"useCount":700},{"word":"writer","context":[["writer.name(name).value(value)",21],["writer.startObject()",23],["writer.endArray()",61],["writer.beginObject()",23],["writer.name(name)",56],["writer.beginArray()",49],["writer.endObject()",46],["writer.close()",61],["writer.flush()",75],["override fun generateFunctionAddress(writer: PrintWriter, function: NativeClassFunction) {",32]],"useCount":611},{"word":"ws","context":[["import javax.ws.rs.Produces",54],["import javax.ws.rs.*",29],["import javax.ws.rs.ext.ExceptionMapper",29],["import javax.ws.rs.core.MediaType",87],["import javax.ws.rs.core.Response",70],["import javax.ws.rs.Path",67],["import javax.ws.rs.PathParam",20],["import javax.ws.rs.GET",47],["import javax.ws.rs.Consumes",38],["FileUtil.copyContent(oldWs, ws)",19]],"useCount":537},{"word":"x","context":[["\"x x\",",65],["x.f()",126],["\"x x\",",65],["\"x Y x\",",55],["\"x Y x\",",55],["GLint.IN(\"x\", \"\"),",54],["\"x X x\",",45],["\"x X x\",",45],["return x",154],["0.assertContent(\"x\")",40]],"useCount":2166},{"word":"xdebugger","context":[["import com.intellij.xdebugger.XDebugSession",28],["import com.intellij.xdebugger.evaluation.XDebuggerEvaluator",21],["import com.intellij.xdebugger.XSourcePosition",25],["import com.intellij.xdebugger.XDebugProcess",27],["import com.intellij.xdebugger.frame.XValueChildrenList",20],["import com.intellij.xdebugger.frame.XSuspendContext",20],["import com.intellij.xdebugger.breakpoints.XBreakpointHandler",20],["import com.intellij.xdebugger.breakpoints.XLineBreakpoint",35],["import com.intellij.xdebugger.evaluation.XDebuggerEditorsProvider",20],["import com.intellij.xdebugger.frame.XCompositeNode",31]],"useCount":356},{"word":"xdm","context":[["import org.brackit.xquery.xdm.Kind",34],["import org.brackit.xquery.xdm.type.SequenceType",37],["import org.brackit.xquery.xdm.Type",40],["import org.brackit.xquery.xdm.DocumentException",56],["import org.brackit.xquery.xdm.Iter",64],["import org.brackit.xquery.xdm.Sequence",168],["import org.brackit.xquery.xdm.Expr",64],["import org.brackit.xquery.xdm.Item",116],["import org.brackit.xquery.xdm.Signature",86],["import org.brackit.xquery.xdm.Node",72]],"useCount":876},{"word":"xml","context":[["// as you specify a parent activity in AndroidManifest.xml.",79],["import org.xml.sax.InputSource",34],["import javax.xml.parsers.DocumentBuilderFactory",33],["import javax.xml.namespace.QName",29],["it.writeChild(\"${Project.DIRECTORY_STORE_FOLDER}/misc.xml\", iprFileContent)",24],["import nl.adaptivity.xml.*",21],["import com.intellij.xml.util.XmlStringUtil",21],["package nl.adaptivity.xml",21],["import org.xml.sax.SAXException",19],["val addedFile = \"\\$APP_CONFIG$/remote.xml\"",16]],"useCount":621},{"word":"xquery","context":[["import org.brackit.xquery.QueryException",273],["import org.brackit.xquery.xdm.Sequence",168],["import org.brackit.xquery.QueryContext",156],["import org.brackit.xquery.ErrorCode",102],["import org.brackit.xquery.Tuple",72],["import org.brackit.xquery.function.AbstractFunction",80],["import org.brackit.xquery.xdm.Signature",86],["import org.brackit.xquery.atomic.QNm",154],["import org.brackit.xquery.xdm.Item",116],["import org.brackit.xquery.module.StaticContext",103]],"useCount":2484},{"word":"y","context":[["test1 (\"z\", \"x\", \"y\") {",28],["val y = this.y",24],["val y = this.y",24],["val sum = { x: Int, y: Int -> x + y }",24],["test1 (\"x\", \"y\", \"z\") {",24],["GLint.IN(\"y\", \"the lower framebuffer pixel coordinate\"),",25],["test1 (\"x\", \"x\", \"y\") {",28],["short.member(\"y\", \"\")",32],["GLint.IN(\"y\", \"\"),",54],["0.assertContent(\"y\")",55]],"useCount":929},{"word":"y2k","context":[["package y2k.joyreactor.widget",24],["import y2k.joyreactor.common.bindingBuilder",21],["import y2k.joyreactor.common.platform.NavigationService",20],["import y2k.joyreactor.common.http.HttpClient",26],["package y2k.joyreactor.services.requests",26],["import y2k.joyreactor.common.ServiceLocator",27],["package y2k.joyreactor",36],["package y2k.joyreactor.common",45],["import y2k.joyreactor.R",19],["import y2k.joyreactor.common.ui",19]],"useCount":424},{"word":"yested","context":[["import net.yested.bootstrap.Medium",38],["import net.yested.bootstrap.pageHeader",38],["import net.yested.bootstrap.row",38],["package net.yested.bootstrap",33],["import net.yested.HTMLComponent",25],["import net.yested.with",42],["import net.yested.div",53],["import net.yested.Div",61],["import net.yested.*",23],["import net.yested.Component",19]],"useCount":488},{"word":"yet","context":[["// we have not experienced such problem yet, but we are just aware",14],["throw IllegalAccessException(\"Not implemented yet.\")",25],["* @throws UnsupportedOperationException This operation is not supported yet",604]],"useCount":643},{"word":"yuriel","context":[["import dev.yuriel.kotmahjan.models.Hai",35],["* Created by yuriel on 8/9/16.",16],["package dev.yuriel.kotmahjan.rules.yaku.yakuimpl",44],["import dev.yuriel.kotmahjan.rules.MentsuSupport",43],["* Created by yuriel on 7/24/16.",43],["import dev.yuriel.kotmvp.Dev",28],["* Created by yuriel on 8/13/16.",26],["package dev.yuriel.kotmahjan.models",18],["* Created by yuriel on 8/8/16.",16],["import dev.yuriel.kotmahjan.models.PlayerContext",16]],"useCount":346},{"word":"￿","context":[["￿    VkCommandBuffer                             commandBuffer,",100],["￿    VkDevice                                    device,",161],["￿    uint32_t*                                   pPropertyCount,",13],["￿    VkImage                                     image,",14],["￿    VkQueryPool                                 queryPool,",14],["￿    VkInstance                                  instance,",17],["￿    VkBuffer                                    buffer,",18],["￿    VkPhysicalDevice                            physicalDevice,",39],["￿    const VkAllocationCallbacks*                pAllocator);</code></pre>",50],["￿    const VkAllocationCallbacks*                pAllocator,",55]],"useCount":517}]